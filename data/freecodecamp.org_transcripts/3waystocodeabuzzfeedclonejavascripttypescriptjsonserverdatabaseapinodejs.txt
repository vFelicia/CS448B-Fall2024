00:00 - hello everyone here on freeco Camp my
00:04 - name is Anya Kubo and I'm a software
00:05 - developer as well as a course creator
00:07 - here on freecodecamp as well as on my
00:09 - own channel in this video I'll be
00:12 - showing you three ways to build one
00:14 - thing
00:15 - I'm going to show you how to build a
00:17 - buzzfeed clone in JavaScript followed by
00:19 - a version in reacts using Jason Saba for
00:22 - mimicking an API and then build a
00:25 - typescript buzzfeed clone with a mini
00:27 - backend using node.js to communicate
00:29 - with our external database
00:32 - so a lot of Technologies and the coolest
00:34 - part about this app is I will also
00:36 - prompt you to the next question once you
00:39 - answer the ones above and scroll to the
00:41 - top most unanswered question use some
00:44 - cool scroll logic that we will write
00:46 - together okay so what are we waiting for
00:49 - let's find out what cheese we are thanks
00:51 - to building out BuzzFeed in these three
00:54 - different ways ranging in difficulty and
00:56 - Technology
01:03 - okay so here we are on my code editor of
01:06 - choice I'm using webstorm which means
01:08 - all I have to do is start a new project
01:09 - and I'm going to create an empty project
01:11 - and just go ahead and call this Buzz
01:15 - feeds
01:17 - clone JS okay so all I'm going to do is
01:21 - Click create and that will spin up a new
01:24 - directory for me of course you are free
01:26 - to use whatever code editor you wish so
01:29 - if you're using vs code or anything like
01:31 - that just go ahead and create a
01:32 - directory and open it up in vs code
01:35 - once you have done that we're just going
01:37 - to add in some new files so we're going
01:39 - to create an index HTML file making sure
01:42 - to give it the HTML extension and then
01:45 - also create a style sheet my style so
01:49 - Styles CSS
01:51 - and then also a Javascript file which
01:54 - I'm going to call app.js just like so
01:58 - so there we go those ro3 files make sure
02:01 - to put in those extensions so that your
02:02 - code editor knows to treat them as a
02:04 - HTML file CSS file and JavaScript file
02:08 - now first off well we're going to be
02:10 - doing the majority of this in JavaScript
02:13 - okay because we want to populate the
02:15 - question based off some data but we can
02:18 - put a little bit of stuff in here so
02:20 - let's go ahead and just change the title
02:22 - of this document that so that it shows
02:24 - up in the browser when we open this up
02:26 - so I'm going to put BuzzFeed clone and
02:29 - then of course we need to link up the
02:32 - style sheet so we do this using the link
02:35 - tag Rel
02:40 - sheets and then we also have to put the
02:43 - href which will take us to our style CSS
02:45 - file as it's in the root of the project
02:47 - we could just put the file name like so
02:50 - and of course we need the script tag
02:52 - making sure that it's at the end so
02:53 - after everything in here loads then we
02:56 - read the JavaScript at the moment there
02:58 - isn't anything in here but just make
03:00 - sure that that's at the bottom anyway
03:01 - and we're going to link it to the app.js
03:03 - file
03:04 - now in here I'm actually just going to
03:06 - create a section and in this section we
03:09 - are going to have a header that says
03:12 - what cheese are you now we could have
03:15 - fed this in from the data but you know
03:18 - I'm going to show you how to feed in
03:19 - data anyway so if you choose to find the
03:21 - title after this then that is your
03:23 - choice and then we're also just gonna
03:25 - have a fun little paragraph underneath
03:27 - it this quiz isn't cheesy
03:32 - or anything
03:35 - okay so making sure to spell anything
03:37 - correctly so so far that's what's in our
03:40 - section I'm also going to get a div and
03:41 - we are going to be injecting stuff into
03:43 - this div using JavaScript what we're
03:45 - going to be injecting is the questions
03:47 - so I'm going to pick this out I'm going
03:48 - to give this ID of questions and then
03:50 - I'm also going to create a div where I'm
03:53 - going to inject the answer once we've
03:55 - answered all the questions so I'm going
03:57 - to give this the ID of answer so you
03:59 - could also pick it out in our JavaScript
04:02 - so this is it this is really everything
04:04 - we have in here does it fit yeah there
04:06 - you go it all fits kind of nicely I can
04:08 - even make it smaller if you want so that
04:10 - you can literally everything
04:14 - okay and then this would be the proper
04:17 - indentation as well so script section
04:20 - cool
04:23 - nice
04:25 - so that is our HTML done uh what should
04:29 - we do first should we give this some
04:30 - basic styling yeah let's do it I'm
04:33 - actually going to put my style sheet
04:34 - over here
04:38 - and I'm just going to open up this index
04:39 - HTML file in the browser so with
04:42 - webstorm I could just go ahead and click
04:43 - this
04:47 - and I will open up the document in our
04:49 - browser I'm just going to inspect this
04:51 - so you can see what's going on so there
04:53 - you'll see the body with the section
04:54 - with H1 tag the paragraph and the two
04:57 - divs that I made or if you're using uh
05:00 - other code editors you can also do this
05:04 - by going into the project clicking on
05:06 - the index.html file right clicking and
05:09 - then just copying the path the absolute
05:11 - path and go back to the browser and
05:14 - pasting it like so okay it's it's the
05:16 - same thing
05:18 - so there we go which cheese are you
05:21 - let's give this a little bit of styling
05:23 - so the first thing I'm going to do is
05:25 - actually just make sure that everything
05:26 - is centered so I'm going to grab the
05:29 - body let's make this a little bit bigger
05:31 - and again I'm just going to minimize
05:32 - this
05:33 - and move this over perhaps
05:38 - so I've grabbed the body and I'm going
05:40 - to use display
05:42 - flexed initialize Flex box and I'm just
05:45 - going to justify content Center to make
05:48 - everything centered horizontally and
05:51 - then all I'm going to do is grab the
05:53 - section and the section I'm going to
05:55 - hard code the width to be 600 pixels
05:57 - okay
05:58 - so that is how coded it won't change
06:01 - I'm also going to grab the H1 element
06:03 - and just give it the font size
06:06 - what font size we want to give this we
06:07 - can work in Ram 2.5 RAM and then let's
06:10 - give it a line
06:13 - height of
06:16 - 0.1.05 text align left so we don't want
06:20 - it to be centered and also the P element
06:24 - uh well with this let's also give it a
06:26 - font size we can do it in Ram
06:29 - so like that and also give it a line
06:34 - height
06:35 - of 1.2
06:38 - great so now if we look in a browser
06:42 - and just hit refresh
06:45 - there we go so this section is kind of
06:47 - in the center and has a hard-coded width
06:50 - of 600 and the text is aligned left and
06:53 - the fonts have been changed now if I
06:56 - want to actually use a different font
06:58 - see I'm like no I'm not keen on this one
07:00 - and it doesn't look like what BuzzFeed
07:01 - does we can actually pick out a font
07:04 - thanks to Google fonts so I'm going to
07:06 - do that too we're going to have to
07:08 - import it so there is a font that I
07:10 - found that I quite like
07:13 - it's Montserrat and it's the closest
07:16 - thing to the one on BuzzFeed so let's go
07:18 - to Google fonts
07:22 - let's search for monsterat
07:26 - and I'm just going to select let's
07:27 - select a few so I can do the thin one
07:29 - the light one
07:32 - medium we can really just pick out all
07:35 - of these if we want and if we view them
07:38 - I can use the import we could do in the
07:41 - HTML or we could do it directly in the
07:42 - CSS file so I'm going to do it in the
07:44 - CSS file so I'm going to copy all of
07:46 - this and then
07:49 - just at the top here I'm just going to
07:51 - paste that in okay so I'm actually going
07:53 - to minimize this so you can see
07:54 - everything I've just pasted in that
07:56 - entire line which will give me the font
07:58 - Montserrat along with the weights okay
08:01 - so that's what it looks like and now I'm
08:03 - going to apply this font to everything
08:04 - all the elements in my document so star
08:08 - means everything
08:11 - and I'm just going to do font
08:13 - family
08:17 - month
08:19 - so rat making sure to spell it the same
08:22 - and sounds
08:23 - serif
08:25 - cool
08:27 - so that is looking good so now if I go
08:30 - to my clone and refresh that font has
08:33 - now been applied
08:35 - wonderful
08:36 - let's
08:38 - carry on
08:40 - so now I think it's time for us to start
08:43 - injecting the questions into here
08:47 - so
08:49 - let's get up our appsius file and the
08:51 - first thing that I'm going to do is just
08:52 - pick out these so I'm going to pick out
08:55 - this div by the ID questions so I'm
08:59 - going to use documents it's a little bit
09:01 - bigger
09:07 - query selector and look for the ID of
09:12 - questions
09:15 - and I'm going to save this as
09:18 - a question
09:20 - display
09:22 - the next thing I'm going to do is the
09:24 - same for the answer display so cons
09:25 - answer display and I'm going to look in
09:29 - my document my HTML document and then
09:32 - look for something with the ID of
09:35 - answer and I believe it was a singular
09:37 - answer answer that's right so we've
09:41 - picked those two things out and now
09:43 - let's get to injecting stuff into them
09:45 - and what I want to inject is stuff from
09:48 - this data so const questions is it going
09:51 - to be an array of all the data that
09:53 - we're going to use for this quiz
09:55 - so
09:57 - we need sir three questions we're going
09:59 - to answer three questions in order to
10:01 - find out what cheese we are so each
10:03 - question is going to be essentially an
10:05 - object so there's one
10:06 - there's another
10:10 - there's another and now I'm going to
10:12 - give each question an ID so we can keep
10:15 - track of it so this is going to have ID
10:17 - 0. each one is also going to have the
10:19 - actual text of the question question so
10:22 - let's go ahead and put pick a vacation
10:25 - destination
10:28 - and then we're also going to have
10:32 - the answers available to us so there's
10:35 - going to be an array because there's
10:36 - going to be four of these and each one
10:38 - is going to have essentially one of our
10:40 - choices so the first choice is going to
10:41 - be New York
10:45 - uh we're gonna have an image for it
10:48 - so we're going to put the image in here
10:50 - which is going to be essentially a URL
10:52 - to unsplash.com is where you can get
10:55 - loads of free images but you do need to
10:56 - credit them we also need to add some
10:59 - alternative text so I'm going to put a
11:00 - photo of the
11:02 - Empire State
11:05 - building during daytime
11:09 - again I'm just going to get rid of that
11:11 - and then we have to give this credit
11:13 - right because unsplash asks you to do
11:15 - that so we're going to put the credit of
11:17 - this photo which is
11:19 - Oliver
11:20 - nubat
11:22 - okay and I actually have the URL already
11:27 - so I'm just going to go ahead
11:29 - and paste it in here like so if you want
11:32 - to get this specific URL then please
11:36 - visit uh my description where I'm going
11:39 - to share this code so you can take this
11:40 - or you can find your own image okay just
11:42 - visit
11:44 - images.unsplash.com and find a cool
11:46 - image of New York and just grab the
11:48 - whole URL to do it so for those of you
11:51 - who perhaps haven't done this before you
11:54 - can get any image really so for example
11:56 - if I visit Wikipedia
12:00 - and just type in
12:02 - New York and if I want to get a picture
12:05 - of New York City I can literally just
12:09 - essentially what I'm doing is left
12:11 - clicking on here copying the image
12:15 - address
12:16 - and then this is essentially the images
12:18 - so that's exactly what I'm doing apart
12:20 - from minor not from Wikipedia they're
12:22 - from unsplashed
12:26 - so
12:27 - that's what we need in order to get one
12:31 - answer so now let's do another so this
12:34 - is the form that it needs to take
12:37 - so let's open up our curly braces
12:39 - and I'm not going to subject you to this
12:42 - because you know I've already kind of
12:44 - done this for you so we're gonna have
12:46 - New York we're also going to have Austin
12:48 - with a time lapse photography of cars
12:51 - and then we're also going to have
12:54 - Portland with a photo taken by Elena
12:57 - kuchko
12:59 - so there we go
13:02 - and then last one we're gonna have
13:05 - New Orleans
13:07 - okay so that's just one question we have
13:10 - two more to go so making sure that is
13:13 - finished now so here we go that's our
13:16 - first question
13:18 - we're gonna make another so let's give
13:21 - this the idea of one this time
13:24 - and let's carry on this time the text is
13:27 - going to be pick some food and the
13:31 - answers
13:32 - are going to be so let's open up our
13:34 - array let's get the first answer the
13:36 - first answer is going to be a pizza so
13:39 - you can choose to select a pizza with a
13:41 - photo of some pepperoni pizza by Ellen
13:44 - Hardman let's open up another object the
13:47 - second one is going to be a sandwich
13:48 - because who doesn't love sandwiches so
13:51 - there we go uh the third one is going to
13:54 - be some pasta it's actually going to be
13:57 - some pasta and tomato sauce
14:00 - and then finally the fourth one
14:02 - is going to be a hamburger so I'm just
14:05 - going to paste that in like so so there
14:08 - we go that's our second object and our
14:11 - third question so id2 is going to have
14:14 - the text of picker home this time so
14:17 - this is how the three important
14:19 - questions apparently for how to find out
14:21 - what cheese you are and the answers are
14:23 - going to be well let's get up our first
14:25 - object
14:27 - so our first answer is going to be a
14:30 - traditional home so I'm just going to
14:33 - paste that in here like so
14:36 - our second answer is going to be a
14:37 - modern home this time
14:40 - so I'm just going to paste that in
14:43 - and then we're going to have an actual
14:45 - house
14:46 - so like a full-on house with a garden
14:48 - everything
14:50 - and then the last one is going to be the
14:52 - mountains like some cabin in the
14:54 - mountains or something like that
14:56 - wonderful so that's all our data done
14:59 - please go ahead and check you know like
15:02 - obviously that's working with arrays and
15:04 - objects it can get kind of messy so if
15:06 - you're getting any issues just check out
15:07 - my code below
15:10 - cool so now let's use all this data in
15:13 - order to create some questions so what
15:17 - I'm going to do is actually write a
15:18 - function
15:19 - um
15:20 - I'm going to use a function expression
15:22 - for this so populate questions
15:26 - that's what I'm going to call it
15:29 - so just like that and when we call this
15:33 - well for each question in my questions
15:36 - array so if here's a questions array and
15:39 - here's each question we've got three in
15:42 - here right so four each item in my
15:47 - questions array which I'm going to
15:48 - choose a cool question you can call it
15:50 - whatever you like and call it I if you
15:52 - wish I like to give it you know some
15:54 - readable value
15:55 - so for each of those what I'm going to
15:57 - do is use document create making sure to
16:02 - spell document correctly document create
16:04 - element and I'm just going to create a
16:07 - div so I'm going to call this div
16:09 - something I'm going to call it title
16:10 - block
16:12 - okay and this title block I'm going to
16:16 - give it the ID of the question ID okay
16:19 - so we can just keep track of it that
16:21 - will be useful later what I'm also going
16:23 - to do is get the title block class list
16:27 - and we're going to make a class called
16:29 - title block so we can see it in our
16:32 - browsers and before we do anything else
16:36 - let's just see what this looks like so
16:37 - of course we made the div we've got an
16:39 - ID we've given a class name a title
16:41 - block but we also need to put it in to
16:44 - our questions display so let's grab the
16:47 - questions display
16:50 - and I'm going to use append
16:53 - to put in the title
16:58 - lock
16:59 - wonderful and of course we need to call
17:01 - this so we can actually make this
17:03 - function do something it's just been
17:06 - called otherwise nothing would happen
17:07 - and now let's style this up a little bit
17:09 - like a block so we can see something in
17:11 - the browser
17:13 - so class of title block because we added
17:15 - a class and the title block well I'm
17:18 - just going to hard code each one to have
17:20 - a width of
17:22 - 600 pixels a height of 210 pixels
17:30 - a background color what we're going to
17:32 - do RGB and then 102 96 221
17:38 - and then we're going to do a border
17:41 - radius of 5 pixels
17:43 - display
17:46 - Flex
17:48 - justify content because we want to
17:50 - Center everything in the center and we
17:51 - also want to align so we've just
17:54 - centered everything horizontally if we
17:56 - want to Center everything vertically too
17:57 - so it's like literally in the middle we
17:59 - do a line content Center and make sure
18:01 - that it's got a height otherwise that
18:03 - will not work and of course these two
18:05 - will not work without the display Flex
18:09 - and let's also give the text of
18:10 - everything in here some uh just white so
18:12 - I'm gonna do
18:14 - cool
18:16 - so that's our title block
18:19 - so now if I look in the browser I should
18:21 - see three question blocks right ta-da
18:25 - one
18:29 - two
18:31 - three but they're kind of like scrunched
18:33 - up on each other
18:35 - um which is fine for now because we're
18:37 - going to be adding the question options
18:40 - in here too or the question answers I
18:41 - call them
18:43 - okay but first we also need to add a
18:45 - heading in here so let's go ahead and
18:46 - put a heading inside this div we just
18:48 - created so the div that we called in our
18:51 - JavaScript title block
18:54 - so let's go back in here so let's create
18:57 - another element so we want to put in
18:59 - let's put an H2 tag so I'm going to use
19:01 - document create element by putting
19:03 - document here doesn't mean I'm actually
19:05 - putting it in the document yet okay it's
19:06 - kind of floating around in nowhere we
19:08 - have to put it in using append
19:10 - so that's something that might trip you
19:12 - up
19:13 - let's create an H2 tag and I'm just
19:15 - going to save this as title heading just
19:19 - like so and title
19:22 - hedging
19:24 - text content equals the question
19:28 - text so for each question in here so
19:32 - again this is one question I'm going
19:34 - into the question because I've chosen to
19:36 - call it question and I'm getting the
19:38 - text we've already got the ID now we're
19:40 - getting the text next we're going to get
19:42 - the answers which is an array which
19:44 - which means we're going to have to use
19:46 - four each again on this array but don't
19:48 - worry I'll walk you through that when
19:50 - the time comes
19:53 - cool so we've given the title heading we
19:56 - made an H2 tag we've given it the text
19:58 - from our data and of course next we need
20:01 - to put it in and we want to put it in
20:04 - the
20:05 - title block right so title block append
20:10 - title
20:12 - heading
20:13 - cool so I believe that's it so if we
20:16 - look in the browser and hit refresh so
20:18 - here's the divs we made there's nothing
20:20 - in them at the moment and if we refresh
20:22 - that ta-da we have put in the H2 element
20:25 - with the title
20:29 - wonderful
20:31 - let's carry on
20:32 - so perhaps let's also style up our H2
20:36 - tags because I want them to be a little
20:38 - bit bigger so I want to override the
20:40 - default styling for the h
20:42 - to element and I want the H2 element to
20:45 - have a font
20:47 - size of 3.5 Ram
20:50 - a line height of 1.05 and I want to text
20:56 - and what the text is already in the
20:57 - center so we don't need to
20:59 - do that
21:00 - cool
21:02 - so the next thing I want to do is just
21:04 - create a block for all my questions to
21:06 - go and so all four of them so once again
21:08 - I'm going to do document to create
21:10 - element I'm going to create a div I'm
21:12 - going to call this const question Z
21:15 - block
21:19 - and I'm going to give the question block
21:21 - the ID as well so question block ID this
21:26 - time the ID obviously happens to be
21:27 - different because we can't use the same
21:29 - ID
21:30 - um that's literally the not the point of
21:32 - IDs they're meant to be unique so I'm
21:34 - just going to add the string of
21:37 - questions as well so we can pick it out
21:40 - later and the question block I'm also
21:43 - give it the class list add of answer
21:47 - options so perhaps we should call this
21:50 - answers block
21:56 - now let's keep it like it is I hope
21:58 - that's not too confusing so now let's
22:00 - actually give some styling to this
22:07 - so answer options uh and the answer
22:10 - options I just want to make sure that
22:12 - all four items are going to go in this
22:15 - are going to be spaced out evenly so I'm
22:17 - going to use display oops making sure
22:19 - that that's in here
22:21 - display Flex
22:24 - and I'm also going to make it Flex wrap
22:26 - wrap so I'll show you what this looks
22:29 - like without it and I'm going to justify
22:31 - content space between so that there's a
22:35 - space in between them not around because
22:37 - I want it to go all the way up to the
22:38 - edges so space between will literally
22:40 - give like a little Gap in the middle
22:41 - between the objects
22:43 - cool and perhaps Also let's give it a
22:44 - margin just at the top 16 pixels Zero
22:48 - from the side 23 pixels at the bottom
22:50 - and zero to the right
22:52 - wonderful so we've made a div that will
22:55 - store all our questions the next thing
22:57 - I'm going to do is actually populate
23:00 - the
23:02 - um
23:04 - the the on the div with the class of
23:07 - answer options so I'm going to do so by
23:10 - getting the question answers
23:12 - and then four each so this is exactly
23:14 - what I said earlier we're getting the
23:16 - question answers and using four each so
23:19 - we can essentially use these four items
23:21 - to do stuff
23:23 - for each answer
23:27 - I'm going to create an element so
23:29 - document create element and I'm going to
23:32 - create a div let's call this answer
23:35 - block
23:41 - okay and the answer block
23:48 - is also going to have a class class list
23:52 - add of
23:55 - singular answer block
23:59 - do you know what let's call this answers
24:01 - block because it's annoying me I feel
24:02 - like it should answers
24:05 - block
24:07 - answers block
24:11 - answers block
24:13 - okay yeah because the answers block is
24:15 - going to hold all our answer blocks that
24:17 - makes way more sense
24:19 - okay so our answer block we're adding
24:21 - the class of answer block so perhaps
24:24 - let's go ahead and add that too I'm
24:26 - essentially just going to make them like
24:28 - uh little squares that have a width of
24:31 - 286 pixels and a height of 286 pixels
24:36 - let's round them off a little bit so
24:37 - border radius I'm gonna get five pixels
24:39 - and I'm also going to give it a box
24:41 - Shadow so box shadow
24:45 - RGB a because I want the to be
24:47 - transparent I'm going to do black so
24:50 - that's black and then 0.07 opacity okay
24:55 - and then we want zero
24:58 - horizontal
25:00 - zero vertical zero
25:03 - uh blur but then one
25:07 - um
25:08 - spread okay cool one pixel that should
25:11 - be those can be zero without a unit but
25:13 - that needs to have pixel
25:15 - okay and I'm going to make the text
25:17 - align
25:20 - Center
25:22 - I'm going to give it some margin at the
25:24 - bottom let's just say 15 pixels and
25:27 - overflow
25:29 - hidden okay so that if anything comes
25:31 - out of this box like an image that we
25:33 - want to put in then it will be cut off
25:37 - cool so we've done quite a bit I'm not
25:40 - going to show you the browser because we
25:41 - haven't actually put this in if I wanted
25:43 - to though I guess I could put the
25:45 - answers Block in and we put the answers
25:47 - block into the question display so we've
25:51 - already put in the title block
25:55 - and outside this for loop I can also now
25:58 - put in the
26:00 - answers block so now if we look in the
26:03 - browser you will see r
26:06 - title block but also
26:09 - the div that we made with the id0
26:12 - questions that have the class answer
26:13 - options and we haven't put anything in
26:16 - it that's what we're literally doing now
26:17 - we're going to put the four questions in
26:19 - at the four answer blocks in it
26:21 - so let's go back
26:23 - we've added a class to that answer block
26:27 - next we're going to get the answer block
26:29 - and use add event listener to listen out
26:32 - if we click on the option and for now
26:36 - I'm just going to put handle click
26:39 - which of course we haven't written yet
26:42 - so that's equal back function uh const
26:45 - handle
26:46 - click
26:50 - so we'll write that later I'm just going
26:52 - to write console.log
26:54 - clicked for now
26:57 - great
26:59 - so next we're going to put in the image
27:02 - so we're going to use document create
27:04 - element and create an image element and
27:07 - I'm going to save this as answer image
27:12 - and we're going to use so let's get the
27:14 - answer
27:15 - image that we just created and I'm going
27:17 - to use set attribute
27:19 - to set the source of the image as the
27:23 - answer
27:24 - image
27:26 - okay because We're looping the same this
27:28 - time We're looping we're already in the
27:29 - loop this is our second Loop and we're
27:31 - getting the answer
27:33 - image we're also going to have to get
27:35 - the answer text and alternative text and
27:37 - credit so alt is the next one that I
27:40 - want to do
27:42 - so answer
27:44 - image set attribute this time alt and
27:48 - I'm just going to get the answer
27:51 - Alt
27:53 - Okay so we've done that of course we
27:55 - haven't put it anywhere else yet we are
27:59 - going to have to essentially append that
28:01 - to the answer block itself so down here
28:04 - still on the loop
28:06 - I'm going to get the answer block
28:10 - and I'm gonna append
28:15 - the answer
28:18 - image so we've got the image the next
28:20 - thing we want to do is uh create the
28:24 - I guess like a little answer title so
28:26 - let's go ahead and do that document
28:28 - create
28:30 - element and I'm going to create an H3
28:32 - tag this time I'm going to save this as
28:35 - answer
28:38 - title
28:40 - and I get the answer
28:43 - title
28:44 - and I'm going to use text content to
28:47 - just give it the answer
28:49 - text it wasn't titled it was answered
28:51 - text because that's what we're getting
28:53 - we've got the answer text
28:56 - okay
28:59 - so we've done that we've got the answer
29:01 - title so now let's put it in so we're
29:03 - going to put it in after the image so
29:05 - this order does matter because it's
29:07 - literally the order we're going to be
29:08 - putting these elements in
29:10 - until after we have the answer title
29:12 - we're going to have the answer info so
29:14 - I'm going to create a document again
29:15 - create document create element and I'm
29:17 - just going to create a paragraph element
29:19 - and I'm going to save this as answer
29:22 - info
29:24 - now I'm going to get answer info and use
29:26 - text content
29:28 - uh or am I
29:32 - no I'm not because we're gonna have to
29:34 - make some links in here as well so let's
29:36 - create a link I'm going to call it image
29:38 - link
29:39 - document
29:41 - create element a tag and with the image
29:47 - Link Link a
29:50 - image
29:56 - link I'm going to use set
29:59 - attribute to set the href to be the
30:04 - answer
30:05 - credit so that's essentially who created
30:08 - this image right we also have one more
30:10 - link to make and that's the source link
30:13 - which will essentially just give us a
30:15 - link to unsplash
30:16 - so document create element another a tag
30:20 - let's get the source link I'm going to
30:23 - use text content to assign the well just
30:27 - the string on
30:29 - Splash right and then if we click on it
30:32 - so source
30:36 - link set attribute I'm going to set the
30:39 - source to be
30:40 - https
30:44 - www dot unsplash
30:49 - dot com
30:50 - cool so once we have all of that I'm
30:52 - going to get answer info and I'm going
30:54 - to use a pen to put in first off the
30:57 - image link then just the string two with
31:01 - some spaces around it and then the
31:05 - Source link
31:07 - okay so that's our answer info let's go
31:11 - ahead and also put it in the answer
31:13 - block
31:15 - so just gonna put it in
31:18 - here
31:20 - and before we do that we actually need
31:22 - to get the answers block and append
31:25 - the whole answer block
31:28 - itself
31:30 - cool so now if we look in here and hit
31:33 - refresh
31:38 - handle click okay right that's fine
31:47 - we'll just do that for now
31:50 - so I made a call back
31:53 - and we'll just do that for now and ta-da
31:58 - this is looking great there's a few
32:02 - things that didn't work however why is
32:04 - the P tag not showing up
32:06 - so there's a P tag but it seems to be
32:10 - kind of below there
32:13 - seems to be some sort of styling issue
32:16 - so let's solve it
32:24 - so we've done overflow hidden
32:27 - um perhaps we should actually stall the
32:29 - image itself as well so
32:32 - I feel like obviously without the
32:34 - Overflow hidden we would see all the
32:35 - other stuff but I'm just going to say
32:37 - that any image that exists in the answer
32:39 - block well I'm just going to give it a
32:40 - width of 100 fast
32:42 - okay so that's looking a little bit
32:44 - better this is it's just too big that
32:46 - text that's why it isn't fitting to my
32:50 - wanted size so I'm gonna once again get
32:52 - the answer block and say that any P tag
32:56 - that lives in here is going to have the
32:57 - font size 11 pixels and the font
33:04 - Style
33:06 - italic okay and just the same I'm going
33:10 - to actually get the answer block
33:14 - and say that any a tags that live in
33:16 - here are going to be gray so let's give
33:18 - it the color RGB
33:20 - oh let's just do I don't know which
33:23 - color we should do so I'm just going to
33:24 - use this to pick out a kind of grayish
33:28 - color RGB one one okay
33:32 - RGB
33:34 - just to keep everything kind of
33:35 - consistent even though I know we put RAM
33:37 - for one font size and pixels here I'll
33:41 - go back and change that later
33:43 - so now
33:46 - ta-da
33:48 - even though why is this not working
33:52 - to unsplash
33:57 - this should have a name so let's go back
34:00 - to our code
34:04 - image link
34:05 - hrefr okay the image link also needs
34:08 - some text so image link
34:11 - text content equals answer
34:17 - credit as well
34:19 - so that should actually show the name as
34:21 - well as link to it cool so that is
34:24 - looking wonderful this is looking so
34:27 - good why is this one not
34:31 - centered however
34:33 - hmm let's start the H2 tags just to make
34:36 - sure that everything is centered was H2
34:43 - text align
34:46 - Center
34:50 - wonderful pick a destination pick some
34:53 - food and pick a home so now that we've
34:56 - done that let's get to writing our
34:58 - function for the handle click to handle
35:00 - our clicks so what this means is that I
35:03 - want to actually collect all the
35:05 - questions that have been answered make
35:07 - all the others disabled and do some
35:09 - scrolling as well to make sure that we
35:11 - scroll to the uppermost unanswered
35:14 - question
35:16 - so let's do this let's get up our app.js
35:19 - file
35:22 - so okay I'm gonna get rid of this now
35:26 - in the handle click well what do we want
35:29 - to happen well if we click on the actual
35:34 - Square
35:36 - um we want to know which question it
35:38 - belongs to is it question one two or
35:39 - three so we're going to have to pass
35:41 - that in to the handle click here so
35:44 - let's open this up
35:45 - and for whatever question we are on so
35:49 - question ID that's what we're going to
35:51 - pass through we're going to pass through
35:52 - the question ID
35:58 - and we're also going to pass through the
36:01 - answer
36:05 - text
36:06 - okay so I don't need to call it the same
36:09 - in here in fact let's definitely not I'm
36:13 - going to call this
36:16 - question ID and chosen answer
36:23 - so now if I console log
36:25 - what we are passing through
36:34 - just hit refresh
36:36 - so click that's the question ID because
36:38 - we're on question zero which is pick a
36:40 - destination and I've clicked on New York
36:42 - Austin and if I click on here this is
36:45 - question two so we've got the id1 and
36:49 - ID to Modern traditional and so on
36:52 - so that's working that is good now let's
36:55 - use this to our advantage
36:58 - so
36:59 - what do I want to happen well actually
37:01 - what I would quite like is to make an
37:03 - array of unanswered questions so that we
37:06 - can essentially work with it so I'm
37:08 - going to do so perhaps right under the
37:10 - data so right here I'm going to go const
37:12 - on answered
37:15 - questions and make this an empty array
37:19 - so unanswered questions
37:24 - why is this not like it on on
37:26 - I don't even notice for answer anymore
37:29 - I've said it so many times on answered
37:33 - oh my gosh
37:37 - okay I'll answer the questions so I'm
37:39 - going to get this array and I'm actually
37:40 - going to push in
37:42 - um
37:43 - each question ID
37:46 - and I can do somewhere We're looping
37:47 - over each question so let's maybe just
37:50 - go ahead and I mean we can do whatever
37:54 - we want so unanswers questions and I'm
37:56 - going to push the
37:58 - question ID in here
38:01 - okay so when we create all the questions
38:03 - all of the questions are going to go in
38:05 - the unanswered array okay because
38:07 - they're unanswered yet but however if we
38:10 - click on one well first off we
38:13 - essentially need to get rid of something
38:17 - from the answered unanswered questions
38:19 - right but we also need to make another
38:21 - array of chosen answers so I'm going to
38:24 - do that up here const chosen answers
38:30 - again an empty array
38:33 - I'm going to get the chosen
38:37 - answers array
38:39 - and push in the
38:42 - chosen
38:43 - answer
38:44 - now
38:47 - we probably want to do this
38:49 - only if the unanswer so
38:52 - if
38:54 - unanswered questions includes
38:58 - the question ID
39:01 - so say we click on question with ID 0
39:04 - and we click on something in there it
39:06 - goes oh yes it's included so it's
39:08 - unanswered so we can go ahead and push
39:10 - our chosen answer in here and then we
39:13 - can also remove that from the unanswered
39:16 - questions so let's get our unanswered
39:18 - questions again and I'm going to use
39:20 - index
39:21 - of
39:24 - question ID and then save this as item
39:28 - to remove
39:32 - and then if
39:34 - item to remove is larger than -1
39:39 - I'm going to get the unanswered
39:41 - questions and splice
39:45 - item to remove
39:47 - so that is how you would remove
39:49 - something from an array based on its
39:53 - answer okay so I'm essentially finding
39:55 - the item to remove and I'm looking and
39:57 - answer the question and I'm getting rid
39:58 - of it okay so that's the piece of code
40:00 - to do that so now
40:04 - I'm just going to console okay
40:05 - console.log
40:07 - the chosen
40:09 - answers but then also console log
40:12 - unanswered
40:15 - questions
40:17 - so let's look in the browser
40:21 - so if I pick traditional we pick
40:23 - traditional that's been put in our
40:24 - chosen answers array and you will see
40:27 - that on unanswered questions now consist
40:29 - of zero and one because question zero
40:32 - hasn't been answered and question one or
40:35 - with id1 hasn't answered we have a
40:37 - question with id2 has been answered so
40:39 - it's been taken out of the array cool
40:41 - right and if I go ahead and maybe pick
40:43 - one from here
40:45 - okay so just this one to answer now
40:48 - sandwich so now all our questions are
40:50 - answered there's nothing in the
40:52 - unanswered array and those are our three
40:54 - chosen answers
40:55 - cool rights but we are not yet done of
40:57 - course we have like edge cases and stuff
40:59 - to do
41:03 - so if
41:10 - there's basically nothing in our
41:12 - unanswered
41:14 - questions array so on answer questions
41:17 - length
41:21 - does not exist
41:23 - well then I just want to
41:27 - show the answer right because we've
41:30 - answered all three there's nothing
41:31 - unanswered questions we want to show the
41:33 - answer and ideally we want to scroll to
41:35 - something so I'm going to put scroll to
41:38 - answer
41:41 - div
41:43 - okay so that is something that will
41:46 - happen we also want to essentially
41:48 - disable
41:49 - the question blocks right the ones that
41:52 - haven't been chosen so disable question
41:56 - block or the entire question block minus
41:59 - the one that we chose of course uh and
42:02 - to do this we're going to pass through
42:04 - the question ID into here and the chosen
42:06 - answer as well and then we're also going
42:08 - to have to
42:10 - scroll to top most unanswered
42:16 - question in fact we could do this now so
42:19 - let's do this before writing the
42:20 - disabled question block because I'm
42:23 - going to show you how to do that so to
42:25 - do this well we need to find the lowest
42:28 - question ID
42:32 - and to do this we're going to use a math
42:34 - Min okay math Min will return the lowest
42:39 - value from an array so I'm going to get
42:42 - that array and I'm going to destructure
42:44 - it to get all my unanswered questions
42:46 - and pass them through into math men like
42:49 - so and that will give us the lowest
42:52 - question ID and I just want to scroll to
42:54 - it so I can use location H ref to scroll
42:58 - to the ID of
43:01 - whatever the lowest question ideas so
43:03 - let's check it out
43:06 - um I'm of course going to have to
43:07 - comment out show answer because we don't
43:10 - have that yet
43:12 - so now
43:15 - let's start at the top I'm going to pick
43:17 - New York and then it takes me to the
43:18 - second question and I pick one and it
43:20 - takes me to the third question same for
43:22 - if I start on the third question it
43:24 - should take me to the first question and
43:26 - it does pick a vacation destination and
43:28 - Let's do let's start on the second
43:30 - question so one two and it should take
43:32 - me to the top one great and if I answer
43:34 - that
43:35 - amazing so it's taking us to the top
43:37 - most unanswered question I hope that was
43:40 - useful I thought that was pretty cool
43:41 - let's carry on
43:43 - so now what shall we do let's show the
43:46 - answer yeah let's go ahead and do that
43:48 - so const show answer
43:56 - and all I'm gonna do is uh essentially
44:00 - show so we're going to create an answer
44:02 - block first
44:05 - I'm just going to move this down a
44:06 - little bit
44:09 - so document create element and I'm going
44:13 - to create a div
44:15 - and I'm going to save this as answer
44:18 - block
44:20 - now I'm going to grab the answer block
44:22 - and I'm going to use class list add
44:25 - result
44:27 - block
44:32 - I want the result block to be pink so
44:35 - the answer to be pink so let's go ahead
44:37 - and do that I'm going to get the result
44:40 - block and I'm just going to give it a
44:42 - width
44:43 - of 600 pixels
44:48 - a background
44:50 - color
44:52 - of RGB
44:54 - 255 61158
44:59 - any border
45:01 - radius of 5 pixels
45:04 - okay so that's what my results block is
45:07 - gonna look like
45:09 - um
45:10 - we'll do some more styling in a bit but
45:12 - for now I'm just going to add that and
45:15 - then what else do we want to do well we
45:18 - want to have a title so let's go ahead
45:21 - and once again use document create
45:22 - element to create a H3 tag which I'm
45:26 - going to save as answer
45:29 - title
45:31 - now I'm going to get the answer title
45:33 - and I'm going to use text content and
45:36 - it's going to give it the result
45:38 - text
45:39 - and then I'm also going to get the
45:40 - answer image and I'm going to use
45:43 - document
45:45 - create element to create an image
45:48 - and I'm going to get the answer image
45:50 - and I'm going to use set attribute to
45:54 - set the source to be well we're actually
45:56 - going to have to write some data for
45:58 - this right
45:59 - so I'm going to go ahead and name this
46:00 - answers and it's going to be array of
46:02 - all the possible combinations of answers
46:04 - that I have so it's not actually going
46:06 - to be all of them because you know we
46:08 - need a lot of data for this so I'm just
46:10 - going to essentially make four and then
46:12 - make a default answer as well of course
46:15 - if you actually got all three
46:17 - combinations that would be a lot more
46:19 - but hopefully you know that and if you
46:20 - really want to make all the combinations
46:22 - then please go right ahead so if the
46:24 - combination is
46:26 - New York in any order by the way New
46:30 - York
46:34 - is that so it doesn't matter which way
46:35 - you put this in the array but we will do
46:37 - that in the code
46:38 - uh traditional making sure this has to
46:42 - be spelled exactly the same otherwise it
46:44 - will not work then the answer that you
46:46 - get is blue cheese or blue cheese
46:50 - and then the image that you get is going
46:52 - to be again from unsplash just a picture
46:55 - of some blue cheese that I found so
46:58 - there we go once again that will be in
47:01 - the code that I provided and we're going
47:02 - to have to provide some alt text so I'm
47:05 - just going to go ahead and put Alt
47:10 - blue cheese
47:13 - okay so that's one answer that it could
47:16 - be now I'm just going to copy paste
47:18 - these
47:19 - four and then like I said we're gonna
47:21 - have a default the default one is just
47:23 - going to be
47:24 - um
47:25 - well
47:27 - it could just be the first one we'll
47:28 - decide that later so for this one if we
47:31 - choose
47:32 - Austin
47:34 - pasta
47:39 - modern
47:40 - you get to be
47:42 - cheddar so I'm going to change this to
47:45 - be cheddar cheese
47:53 - and that is going to be the image and
47:55 - then this one is going to be Portland
48:01 - sandwich
48:04 - mountains
48:12 - the image we'll put in later and you are
48:15 - a feta cheese I'm gonna put feta let's
48:18 - put feta here too and one last one let's
48:21 - put New Orleans
48:24 - hamburger
48:33 - house
48:35 - and then you get to be halloumi
48:41 - let's get rid of that
48:43 - as well and I'm just gonna put
48:46 - halloumi cheese
48:48 - wonderful so those are our answers like
48:51 - I said the combinations
48:55 - need to have a default
49:00 - answer
49:03 - to
49:04 - compensate for a lack of combination
49:08 - data okay
49:13 - so in the show answers
49:16 - we're going to have to essentially get
49:19 - the the answer right of the combinations
49:22 - so I'm going to put this as
49:25 - results so let result
49:31 - and we're going to get all the answers
49:33 - and for each answer
49:40 - if our chosen answers includes
49:46 - the first item from the answer
49:49 - combination
49:51 - array
49:54 - and
50:04 - the second answer and the third answer
50:07 - so if three of those are included then
50:14 - the result
50:17 - is the answer which will be an object
50:19 - right it will be the whole object of the
50:20 - answer
50:23 - else
50:29 - make sure to spell answer correctly
50:36 - which is going to default to the first
50:38 - answer
50:40 - object is default
50:43 - so I'm just going to assign the value of
50:46 - answers
50:48 - first item to the result
50:51 - okay so great that will give us our
50:54 - answer so if I console log
50:59 - results
51:00 - let's just check sure okay so that's
51:03 - being called
51:06 - so if I go ahead and pick New York
51:09 - Pizza
51:11 - traditional
51:14 - okay so that is our answer we get the
51:16 - answer which is an object that has the
51:18 - alt blue cheese the combination the
51:20 - image of some blue cheese and the text
51:22 - blue cheese so that is cool now we need
51:25 - to get the answers essentially text
51:29 - we need to also get the image and all
51:32 - that and assign it to
51:37 - here so the answer image result image is
51:41 - going to be the answer image
51:47 - we're also going to get the answer image
51:49 - and we're going to use set attribute to
51:52 - set the source and the result
51:54 - alternative text
52:00 - and now we're going to get the actual
52:01 - answer block
52:06 - to the answer block
52:09 - and we're going to append
52:11 - the answer
52:15 - title and the answer image
52:19 - cool and then we're actually also going
52:21 - to get the answers display that we
52:23 - picked out and append the answer block
52:26 - which has all three of which has all two
52:29 - of those things in it so answer
52:32 - block
52:34 - cool
52:36 - so that is looking good let's have a
52:39 - look to see if that has worked
52:41 - so once again
52:43 - one two three
52:46 - and there we go even though the blue
52:48 - cheese image is not working why is that
52:51 - there must be something wrong with our
52:53 - data
52:58 - okay so that's fine
53:05 - oh that should say Alt
53:08 - so there we go
53:13 - so now some things we need to do are
53:14 - actually disable
53:16 - any other clicking right because
53:18 - otherwise two Jesus show up and we don't
53:20 - want that we can't have that so I'm
53:22 - going to show you how to essentially get
53:24 - all the um answer blocks and essentially
53:27 - disable them
53:29 - so we're going to do this on the show
53:31 - answer right at the end of the show
53:34 - answer
53:35 - function
53:37 - clean this up a little bit
53:41 - so let's get all the answer blocks again
53:44 - const all answer blocks because we have
53:47 - to get them in their current state or
53:49 - onto blocks document
53:52 - query selector
53:55 - all I'm going to look for anything with
53:58 - the I class name sorry of answer
54:02 - block
54:03 - and once we have that we're going to
54:06 - create an array from this array
54:09 - from all answer blocks
54:12 - and then for each
54:14 - answer
54:16 - block
54:17 - we're going to get the answer block and
54:21 - do replace
54:23 - with
54:24 - block answer block
54:29 - clone
54:31 - note okay unfortunately we can't have uh
54:34 - we can't just do remove event listener
54:36 - that will not work so this is a way to
54:38 - do it and pass through true so now once
54:41 - again let's just test it out if I just
54:45 - go ahead and select some
54:48 - oh two two one
54:51 - oops
54:59 - let's do it again
55:03 - we got
55:04 - even though we shouldn't really have
55:06 - blue cheese but if we click on the
55:08 - others you won't see anything else
55:10 - popping up
55:12 - so Austin sandwich modern I feel like
55:15 - this should have given me a different
55:16 - sandwich so let's check it out
55:23 - uh Austin pasta modern let's try that
55:25 - one
55:28 - Austin
55:30 - pasta modern
55:33 - still giving me blue cheese
55:36 - hmm
55:38 - okay so because we are looping even if
55:41 - we do get the correct answer and then we
55:43 - do another loop and turns out there
55:45 - isn't a combination that result's been
55:47 - going to be overridden by the default
55:49 - answer we don't want this so I'm going
55:51 - to put if else else if sorry there's no
55:54 - results if no result exists only then do
55:57 - we give the default answer
56:01 - and finally let's write our disable
56:03 - questions
56:06 - question blocks we're going to disable
56:07 - the whole question block minus the
56:09 - answer that we have chosen and for this
56:12 - we need to pass through the question ID
56:14 - and the chosen answer so let's uncomment
56:17 - that out and I'm just going to pass
56:19 - through the question ID and chosen
56:23 - answer
56:27 - I'm going to look in the document I'm
56:29 - going to get element by ID and look for
56:31 - the question IDs we're looking for the
56:34 - essential question block so we're going
56:36 - to look for as we know something with
56:38 - the question ID
56:40 - questions and I'm going to save this as
56:43 - const current
56:45 - question
56:47 - block
56:49 - and now let's get the current question
56:51 - block
56:52 - I'm going to make an array from it array
56:54 - from
56:57 - current question block children so all
57:00 - of its children are going to get all
57:01 - four things and four each
57:04 - block
57:06 - I'm going to say that if
57:10 - block children
57:15 - item
57:19 - one so the second item
57:22 - in that block so essentially the title
57:24 - if the titles in a text does not equal
57:28 - The Chosen answer
57:33 - then we're going to get the block style
57:35 - and add opacity
57:41 - 50 to it okay so that is what I have
57:46 - done essentially what I'm doing is
57:49 - saying I'm grabbing I'm looking in here
57:54 - so this is the div with the ID questions
57:59 - and I'm looking into it I'm getting all
58:01 - of the children all of the children and
58:03 - then for each child I'm getting the
58:06 - child's second item so I'm not getting
58:08 - the image I'm getting the H3 tag and if
58:11 - that equals The Chosen answer well then
58:13 - I know not to disable it so for example
58:15 - ta-da and you'll see New York is not
58:18 - disabled same for the sandwich you'll
58:21 - see all three are disabled and same for
58:22 - here
58:23 - wonderful and of course you can't click
58:27 - on any others great so that is it that
58:31 - is my BuzzFeed clone I hope you've
58:33 - enjoyed it
58:35 - I hope you've learned a lot one last
58:37 - thing I would do is of course change
58:38 - everything so it's not RAM and pixels
58:41 - and of course we need to scroll to the
58:43 - answer here as well so on the
58:46 - where do we leave the scroll to answer
58:48 - so I'm going to use location
58:50 - href equals and then we're just going to
58:53 - pick out the answer
58:55 - active by the ID
58:58 - answer okay so
59:01 - that is it and that should scroll to the
59:04 - div with the ID of answer
59:07 - wonderful
59:08 - I just want to clean up a few things so
59:10 - actually when we set the attribute of
59:13 - the image link to credit it shouldn't be
59:15 - credit it should be the image link so
59:17 - I'm just gonna use answer image for that
59:20 - and I notice that we aren't getting an
59:21 - image of Portland
59:23 - so let's go ahead and change
59:26 - that Portland is just showing New York
59:29 - so I'm just gonna switch that out
59:34 - like so and then let's change everything
59:36 - so that it's consistent I'm just going
59:39 - to give the H1 30 pixels let's get rid
59:42 - of the line height for now
59:45 - the H2
59:46 - 20 pixels
59:49 - and the paragraph tag
59:51 - go let's look at the H2 maybe larger so
59:54 - 50 pixels instead
59:57 - that's looking
59:59 - watch
60:01 - watch
60:02 - better and just get rid of the line
60:05 - height maybe let's just make this 15
60:06 - instead
60:08 - and finally we just need to add some
60:10 - cheeses that we are missing in here so
60:14 - let's go ahead and add a URL for cheddar
60:18 - a URL for feta
60:21 - and a URL for halloumi as well okay so
60:24 - that's all I am doing right
60:27 - now
60:29 - and now in the Styles I'm just going to
60:32 - style the images so I'm going to say
60:34 - that any image that lives inside the
60:36 - result block is going to have a width of
60:38 - 100 and then I'm also going to give the
60:40 - results block a border of solid
60:45 - and I'm going to use this color
60:51 - I'm going to say 20 pixels
60:54 - thick
60:57 - okay just so the result is like that
61:00 - great
61:02 - thanks so much for watching and I hope
61:04 - to see you again soon
61:12 - okay so let's do this let's make our
61:15 - BuzzFeed clone and react
61:17 - so all I'm gonna do is start a new
61:19 - project I'm going to go ahead and click
61:21 - new project on my web store which is the
61:23 - IDE that I'm choosing to make this
61:25 - project in if you're using vs code then
61:27 - please go ahead and spin up your
61:28 - directory in any way you want I'm just
61:32 - going to go ahead and select react here
61:34 - which will essentially spin up the
61:37 - project that I need with all the files
61:39 - as well as configuration thanks to npx
61:42 - create react app and I'm just going to
61:45 - call this react buzz feed clone and
61:50 - click create now for those of you who
61:53 - are not using webstorm please just go
61:55 - ahead and get up your Terminals and
61:58 - whatever you choose so for example I can
62:00 - do this in development I'm going to use
62:02 - npx create react app so that command to
62:05 - essentially do what is happening in the
62:07 - background right now and I would go
62:09 - ahead and call this react BuzzFeed clone
62:13 - and just hit enter and that once again
62:15 - will essentially give me all the files
62:17 - and all the configuration I need to set
62:19 - up a react project but I'm not going to
62:21 - do it this way right I just wanted to
62:23 - show you I've already got webstorm doing
62:25 - all of that for me so I'm just going to
62:27 - let that do its thing and once it's
62:29 - ready you should be able to see all the
62:32 - files along with a package.json file
62:34 - which is going to hold all the
62:36 - dependencies that we need for this
62:37 - project
62:38 - okay
62:40 - so great and
62:43 - there we go happy hacking that is now
62:46 - done I can now minimize this and if we
62:48 - look in the directory code react was
62:50 - being clone you will see the punch Json
62:53 - file which holds all our scripts as well
62:56 - as all the packages that we have these
62:59 - other versions that I am using so if
63:01 - you're watching this future and
63:03 - something doesn't work it could be down
63:04 - to the package so just go ahead and
63:06 - change the package and run npmi making
63:09 - sure that you are in the directory so
63:13 - npmi to install
63:16 - the latest versions of those packages
63:17 - however I'm not going to do that so
63:19 - let's put that back to 18 that's an 18
63:22 - for react Dom
63:24 - great
63:25 - now while I'm again just going to clean
63:27 - some of this stuff up because we don't
63:29 - need it I'm not going to be writing any
63:30 - tests or reporting any vitals so I'm
63:33 - just going to delete these files like so
63:36 - delete anyway I'm going to delete the
63:37 - logo as once again we're not going to
63:39 - need it we're just starting off
63:40 - completely from scratch so delete that
63:43 - delete anyway and then delete the test
63:47 - file because we're not going to be
63:49 - writing any tests as I said I'm going to
63:51 - delete the app CSS file as we're going
63:53 - to hold all our styling just in one file
63:55 - as this isn't really a very big project
63:59 - okay so now if you look in the index.js
64:02 - file you'll see this I'm just going to
64:03 - get rid of everything that we don't need
64:06 - so we don't need this import anymore I'm
64:09 - just going to get rid of the semicolons
64:10 - just because that is my preference
64:14 - okay so just like that that is now my
64:17 - entire
64:20 - index.js file now my index CSS file once
64:23 - again is going to start from scratch so
64:25 - let's delete everything in there and the
64:27 - app.js well I'm just going to change
64:28 - this to a functional expression as that
64:30 - is my preference so const app and let's
64:34 - use the arrow function here
64:37 - and we're not going to import these two
64:40 - things
64:41 - const app sorry
64:44 - I have written that completely wrong so
64:46 - there we go and then we're just going to
64:47 - return a div for now
64:51 - okay
64:52 - so there we go that is now what my
64:55 - app.js file looks like I've stripped
64:57 - everything down okay so now if we run
65:00 - this so let's go ahead and look at the
65:02 - script npm on start that's what I need
65:04 - to do so npm
65:09 - Run start making sure that you're in the
65:11 - directory and hit enter and this should
65:13 - bring up my browser with my project on
65:17 - localhost 3000.
65:20 - and there we go okay and if I inspect
65:23 - the page get a back console log we are
65:25 - now ready to go
65:28 - wonderful so I'm just going to minimize
65:31 - this again because that is running let's
65:32 - get rid of the packaging file get rid of
65:34 - the index.js file I'm going to keep the
65:37 - app.js file the first thing I'm going to
65:39 - do is actually just think of what
65:40 - components we need to make our BuzzFeed
65:43 - clone but we're going to have a title
65:45 - okay that's going to hold you know the
65:47 - title of the article we're also going to
65:49 - have a questions block this is going to
65:52 - hold all four of the questions that we
65:55 - can answer and then we'll have each
65:57 - individual question container as well as
65:59 - a reveal answer block to tell us what we
66:02 - are what cheese we are
66:04 - so let's go ahead and do this so let's
66:08 - make a components directory I'm going to
66:10 - make a new directory called components
66:16 - and in here I'm going to create a new
66:18 - file this is going to be a jsx file and
66:21 - it's going to be called
66:23 - questions
66:26 - block
66:28 - jsx
66:34 - I'm also going to create
66:36 - a question block
66:39 - jsx or individual for each individual
66:42 - question and then an answer blocks a new
66:45 - file answer
66:49 - block which is going to show up to show
66:51 - us what cheese we are
66:53 - and then also the title which is going
66:56 - to probably be the easiest component so
66:58 - title jsx
67:01 - okay great and now let's just create
67:05 - each component
67:06 - so there we go let's return a div for
67:10 - now
67:11 - and then let's export default the
67:14 - constant
67:16 - okay so there we go I'm actually going
67:21 - to use this I'm going to copy this
67:23 - for all the others so this can also be
67:25 - answer
67:27 - block
67:29 - and then we export it so there we go our
67:32 - answer block next we have the question
67:35 - block individual so question
67:41 - and then the questions block which is
67:44 - going to hold all four of our individual
67:46 - questions and we need to answer in order
67:49 - to find out what shoes we are
67:52 - great so that's all our components done
67:55 - next let's go ahead and import some into
67:57 - here so I'm definitely going to have the
67:59 - title import title from
68:02 - you want to go into the components
68:04 - directory
68:06 - and I'm going to get the title just like
68:10 - so don't forget to put this
68:14 - and I'm simply just going to use it
68:18 - like that so now if I just put something
68:20 - here I am a title and we look at it in
68:25 - the browser you will see I am title okay
68:28 - so that has worked just going to make
68:31 - that a little bit bigger
68:34 - great
68:35 - so now that we have all the components
68:37 - done I think we should start by adding
68:39 - our data so let's go ahead and do this
68:41 - I'm just going to serve this up from a
68:44 - Json file so I'm going to show you how
68:45 - to do that for your own projects in the
68:48 - root of your project I want you to go
68:50 - ahead and create a file which I'm just
68:52 - going to call database Json which is
68:55 - going to hold all our data
68:57 - and now we're going to add all the data
68:59 - that we need to populate our BuzzFeed
69:00 - clone so let's do it
69:04 - well first off in a database I would
69:07 - imagine that each kind of quiz is going
69:10 - to be an object in itself and I'm going
69:13 - to maybe give this the quiz ID right
69:16 - because if I was working at BuzzFeed I
69:18 - want each quiz to have an ID and I'm
69:20 - just going to make one up for now like
69:22 - we're not actually going to use it I'm
69:23 - just showing you what I imagine this
69:25 - would look like a buzzfeed HQ
69:28 - next we're going to put the title of the
69:31 - quiz itself we know this is what cheese
69:34 - are you question and then we're also
69:37 - going to have a subtitle okay and this
69:40 - subtitle is going to be this quiz isn't
69:46 - cheesy or anything
69:50 - okay
69:51 - let's put in dot dot
69:53 - so there we go so that is the quiz
69:56 - object and each quiz object I imagine
69:59 - should have
70:01 - content right and that content is going
70:05 - to be an array of all the different
70:07 - questions that we have
70:10 - so one question block is going to have
70:14 - the ID of zero let's just say of course
70:17 - we can give it whatever we want and then
70:20 - the text of the question block is going
70:23 - to say kick a vacation destination you
70:28 - will see how tab 9 is trying to guess
70:30 - the uh text for me whether it's a I
70:33 - Thank You tab 9.
70:35 - so that is what it's going to say and
70:38 - then we're going to have the actual four
70:39 - questions that are possible for us to
70:43 - pick from okay so the first one is going
70:46 - to have the text
70:48 - we could have options we could have
70:50 - questions it really is up to you the
70:53 - first one is going to be New York so are
70:56 - we picking New York and then we're going
70:59 - to have an image
71:01 - that's going to show us essentially New
71:03 - York
71:07 - so I've already picked this out so I
71:09 - already have an image of New York that
71:11 - I'm going to use so just like so if you
71:16 - want to just use your own images what I
71:17 - would suggest doing is going to do
71:19 - something like unsplash.com and then you
71:21 - can literally search for a picture of
71:23 - New York like this and then click on it
71:25 - and copy the image address and
71:28 - essentially that's what we're doing
71:29 - we're just getting that image addressed
71:31 - just like so but instead of putting it
71:33 - in the browser we're putting it in here
71:35 - okay so there we go and please do
71:39 - credits whoever's image this is just
71:42 - because you know we're not paying for it
71:44 - so it's the least we can do to support
71:46 - artists uh let's also give it some
71:49 - alternative text and first off let's
71:51 - give credit to this photo to Oliver
71:56 - Nesbitt thank you sorry not neswit
71:59 - niblet thank you very much Oliver new
72:02 - bullet for the wonderful photo and the
72:05 - alternative text I'm going to have is
72:07 - photo of Empire Building during the
72:10 - daytime
72:11 - okay so that's one of our options one of
72:14 - our questions for the question block
72:17 - next uh we are going to have text it's
72:20 - not going to be New York this time it's
72:22 - going to be Austin and the image of this
72:24 - is not going to be the images above
72:27 - we're going to have an actual image of
72:30 - Boston which I've again picked up
72:32 - already so you can I will be sharing of
72:35 - course this project with you so please
72:36 - feel free just to copy and paste this
72:39 - whole database if you want to the whole
72:41 - file I'm just going to talk you uh
72:43 - through it there so just make sure to
72:45 - actually understand what it is your
72:47 - problem
72:48 - and the alternative text for this is
72:51 - going to be just a time lapse of
72:53 - Photography car photography so again
72:56 - I've just pre-done this to save us time
72:58 - and credit for this is not going to go
73:01 - to Oliver this time credit is going to
73:04 - go to
73:05 - Carlos Al Gonzo
73:10 - so thank you Carlos okay so I think you
73:13 - get the jizz so I'm just going to copy
73:15 - the other two we're also going to have
73:18 - Portland as an option
73:21 - and New Orleans as the fourth option
73:25 - okay so as you will see each
73:29 - question block so this is my question
73:32 - block right here
73:34 - okay that's my question block and each
73:37 - question blog's gonna have an ID the
73:39 - text and then four options to choose
73:42 - from okay so let's go ahead and create
73:44 - our next one we're gonna have three
73:46 - question blocks the next question block
73:48 - is going to have the ID uh
73:51 - not titled bridge but nice guess and
73:54 - description
73:59 - it's going to be something else too
74:01 - so this one is going to have the idea of
74:04 - one and the text is going to be pick
74:07 - some food because apparently we need to
74:08 - pick some food in order to find out what
74:10 - kind of cheese we are and actually we're
74:12 - not going to have description we're
74:13 - going to have an array of questions so
74:16 - this is an array so let's open up our
74:18 - array and create our first object and
74:21 - that first object is just going to have
74:23 - the
74:24 - text this time of bit set an image of
74:27 - pizza alternative over any pizza and
74:29 - credit goes to Adam Hardman for the
74:31 - project
74:32 - and change that to give that the integer
74:35 - of one like so
74:39 - change this to say text
74:42 - next we're going to also have a sandwich
74:45 - so sandwich could be one of the options
74:47 - you choose thank you it is collective
74:49 - for this lovely image and the third one
74:53 - is going to be pasta again thank you so
74:56 - much for the image we have credited the
74:58 - author of this photography and then the
75:01 - fourth it's just going to be a hamburger
75:02 - with credit to s k
75:05 - great so now third question block
75:10 - and this is going to have the ID
75:15 - of two
75:17 - the text for this is going to be
75:20 - pick a
75:22 - um
75:22 - [Music]
75:24 - just like so so previous ones to pick
75:26 - some food this is going to pick a home
75:27 - and now we're going to have our four
75:30 - homes as an array of option for us to
75:33 - choose from so I've called this
75:35 - questions but I guess we're asking do
75:37 - you want a traditional house so here's
75:40 - the traditional house or representation
75:42 - of the traditional house with an image
75:44 - or do you want a modern house so again a
75:48 - representation of a modern house
75:50 - or just a
75:53 - house in the woods
75:56 - or a house in the
75:59 - mountains okay
76:02 - great so there we are there we have our
76:05 - three question blocks I think we're
76:07 - finished so let's finish off that array
76:09 - and next off we're now going to have the
76:12 - answers that are possible
76:15 - for us to get so essentially I'm gonna
76:19 - have answers as an array and each answer
76:21 - essentially gonna is be a combination
76:25 - it's going to be a combination of
76:28 - basically
76:30 - one
76:32 - answer from each of the question blocks
76:35 - but basically every single every single
76:37 - um
76:39 - possible option of it so what we have to
76:42 - do is how many other
76:44 - that will give us 60 possible
76:47 - combinations
76:50 - combination
76:52 - okay so let's say that the first
76:55 - combination
76:56 - and obviously I'm saying that repeat
76:58 - ones aren't allowed right because you
77:00 - can only choose one from each question
77:02 - block that's one combination and if you
77:05 - get that combination you are blue cheese
77:08 - okay and the image of this is going to
77:11 - be some blue cheese that I found
77:19 - so
77:23 - just that
77:25 - and the alt for this is Bluetooth okay
77:28 - so I'm not going to sit here and make
77:30 - you just wait until I write out all 60
77:33 - I'm just gonna paste them in so you
77:36 - don't have to like so and please go
77:38 - ahead and just get this from my
77:41 - uh project at the bottom in the
77:44 - description so there's lots of very
77:45 - different cheeses that I have found
77:47 - manureone
77:50 - there's a lot okay
77:52 - great
77:54 - so that is my database Json file done
77:57 - now I'm going to serve this up onto the
78:01 - internet so host it online and I'm going
78:04 - to do so by writing a script so I'm
78:07 - actually going to change this start
78:08 - script I'm going to change this to front
78:10 - end and I'm going to call this a back
78:13 - end even though kind of really
78:16 - I mean whatever you can call a bucket if
78:18 - you wish and I'm going to use a command
78:20 - npx Json server to save up the Json
78:23 - watch and we're going to watch the TV
78:26 - Json file on Port 8000.
78:31 - okay so that is how you would write that
78:34 - okay so save this get a good terminal
78:37 - stop this from running using command C
78:40 - or control C and I'm going to have to
78:43 - install another package which is Jason
78:46 - server which we wrote in our Command
78:48 - right here so just go ahead and install
78:52 - that
78:54 - and you should see that populate right
78:56 - here along with all the other
78:58 - dependencies and there it is I'm just
79:01 - going to do one more thing and that's on
79:03 - the database right here what I'm going
79:06 - to do
79:07 - in order for us to be able to have an
79:09 - end point is actually put this all in
79:13 - another object called quiz
79:16 - so that our end points can go to
79:19 - localhost 8000 forward slash quiz okay
79:23 - and I'm going to take all of this you'll
79:25 - see everything that we wrote
79:28 - and then just put it as an object right
79:32 - here okay so object quiz and this is our
79:37 - quiz object the quiz ID so save this and
79:41 - now open up our terminal and I'm going
79:43 - to use this command to serve up the Json
79:47 - so this one right here npm run
79:51 - start back end
79:53 - and now if we visit localhost forward
79:56 - slash localhost 8000 so let's go ahead
80:00 - and visit this one first actually
80:03 - nothing will happen however when we
80:06 - visit the endpoint quiz you will see our
80:09 - quiz is here so I'm just going to make
80:12 - this a little bit smaller again there we
80:14 - go there is our Json file essentially
80:16 - being served up
80:18 - got it
80:20 - cool now to populate our app
80:24 - so
80:25 - let's go ahead and start up front end
80:27 - again so making sure you're in the right
80:29 - directory just to npm run start
80:32 - front end so this one front end this
80:36 - time I'm just going to paste it to make
80:38 - it obvious what we are using and this
80:40 - will spin up our front end once again so
80:44 - there we go there's our front end
80:46 - spinning up once more I'm just going to
80:47 - inspect this page again and get up our
80:49 - console log
80:51 - great
80:52 - so now I'm just gonna
80:55 - minimize these and what I want to do is
80:59 - on the app itself I'm simply going to
81:02 - fetch the data so for this I'm going to
81:05 - import
81:07 - use
81:09 - state
81:11 - and use effect from
81:15 - react which will mean that I can write a
81:19 - function here so I'm going to call this
81:21 - fetch data it's a functional expression
81:25 - which is why I haven't used the function
81:27 - keyword it's going to be an async
81:29 - function so stick the word async in
81:31 - there I'm going to try to fetch
81:35 - the data from
81:38 - this URL right here so this one logo
81:41 - host 8000 forward slash quiz
81:44 - and we need the await keyword as this
81:46 - will return a promise and once that has
81:49 - returned to us I'm going to save it as
81:51 - the response
81:53 - okay and once we have the response we're
81:55 - going to get the Json from it and we're
81:58 - going to store the Json as Json
82:01 - okay and once we have all that Json
82:04 - we're going to set
82:06 - quiz items
82:10 - Jason
82:12 - so const
82:14 - quiz items
82:18 - set
82:19 - quiz items
82:22 - use State and we want the quiz items to
82:26 - start off as null or we could just call
82:29 - it the quiz right as essentially it's
82:31 - the quiz we're not working with items
82:33 - it's it's a quiz so set
82:35 - quiz let's just make it a little bit
82:37 - more easier to understand so set quiz so
82:40 - using set quiz to essentially override
82:46 - sorry this is going to be false
82:50 - override the value of false which has
82:52 - been assigned to a quiz to whatever the
82:54 - Json is
82:55 - okay
82:58 - so that is essentially what I am doing
83:01 - right here again this needs to be a
83:04 - weight as this returns back a promise so
83:07 - once again we're fetching the resource
83:09 - we're saving it to the response then
83:11 - we're getting the adjacent from that
83:13 - response we're awaiting it as it returns
83:15 - a promise and then we're saving to the
83:17 - Constitution and whatever comes back we
83:20 - are saving to the constant quiz right
83:22 - here which at the start has the value of
83:24 - false as we've used use state in order
83:27 - to set the value of quiz to false to
83:30 - start off with okay
83:32 - cool let's actually just console log
83:34 - what this Json looks like just assuming
83:37 - know what we are working with
83:39 - and of course we also need to catch any
83:40 - errors so go ahead and do that and I'm
83:43 - going to console off any errors that we
83:44 - have
83:45 - so there is our function I'm just going
83:47 - to put it in a use effect so
83:51 - there we go this is the Syntax for a use
83:54 - effect and we're just going to run it
83:56 - without any dependencies so we're going
83:58 - to call the function in the use of facts
84:00 - so that you know if it doesn't return
84:02 - anything the first time it will keep
84:05 - essentially doing this until we get the
84:07 - data that we need in order to make our
84:10 - app work
84:12 - okay so let's go ahead and see what
84:16 - we've done I'm just going to refresh
84:17 - this and
84:19 - great
84:21 - so there we go there's our Jason it's
84:24 - coming back because we've saved it all
84:26 - under the constant of quiz so there it
84:29 - is there's what it looks like we expand
84:31 - it we've got our content which is the
84:33 - three question blocks and we also have
84:35 - our answers which are all the possible
84:37 - combinations of all the answers we got
84:39 - from our question blocks
84:42 - great
84:43 - so this is looking good
84:46 - so I'm just going to get rid of that for
84:49 - now and if I console log quiz here
84:54 - The Flash you will see quiz is false at
84:58 - the beginning because we assigned it the
84:59 - value of false and use effect
85:02 - essentially means it runs until we get
85:04 - the data back to us
85:08 - okay wonderful now the first thing I'm
85:10 - going to do is just feed in the title
85:12 - and the subtitle into the title
85:14 - component so let's go ahead and do that
85:18 - now
85:19 - so here is my title component and it's
85:21 - going to feed through the title which I
85:24 - know is the quiz title and that's if
85:27 - that exists
85:29 - and also the subtitle which I know is
85:33 - the quiz
85:34 - objects subtitle but only if that exists
85:37 - as at the beginning you saw this would
85:39 - be essentially false right is the value
85:42 - of false so false does not it's not an
85:45 - object that doesn't have a subtitle uh
85:47 - property so this won't work which is
85:49 - what I'm saying a quiz you know exists
85:52 - So It Isn't false then we want to get
85:55 - the subtitle property
85:59 - wonderful so that means that on the
86:02 - title block we're going to have to pass
86:03 - you the props I'm going to de-structure
86:05 - them to get the title and the subtitle
86:10 - okay just like that and instead of it
86:12 - saying I am a title here well let's
86:14 - return a few things actually
86:17 - I'm going to return a div that has an H1
86:21 - tag of title and a P tag of subtitle
86:27 - okay
86:28 - wonderful
86:29 - okay so now if we look in here
86:33 - we go we will see our title and our
86:35 - subtitle are being fed through from the
86:38 - quiz object
86:39 - got it
86:41 - good
86:42 - perhaps now it's time to do a little bit
86:45 - of styling so I'm just going to actually
86:48 - just minimize this as we don't really
86:50 - need it get our CSS up
86:53 - so the first thing I'm actually going to
86:54 - do is import a font I'm going to do it
86:56 - from Google fonts okay the font I want
86:59 - to use is a monster at so if I go to
87:03 - Google fonts and then essentially what
87:06 - I'm going to do is just search for the
87:08 - fonts and the font is called Montserrat
87:11 - so that's the one that I want I'm just
87:13 - going to select a few of these okay
87:15 - let's go ahead and set the thin one
87:18 - maybe the 300 one 400 500 you can really
87:23 - pick as many as you wish okay so there
87:26 - we go I'm going to use the import so I
87:28 - can import it directly into the CSS file
87:30 - so just copy this and then just paste it
87:33 - in like so so that's how you import it
87:35 - and it means that now we can use the
87:36 - font family so I'm going to say that I
87:38 - want to use it on everything so the star
87:41 - means everything and this is the CSS
87:45 - rule that I need to apply so I'm just
87:46 - going to copy that and paste it in here
87:48 - like so
87:50 - great I also want to grab the body of
87:53 - the entire document and I want to Center
87:55 - everything so for that I'm going to use
87:57 - display flex and I'm going to justify
87:59 - content Center so I'm essentially uh
88:02 - centering everything horizontally at the
88:05 - moment
88:06 - next I'm actually also going to let's
88:10 - make sure let's actually say that this
88:15 - app
88:16 - component is returning a div I'm going
88:19 - to give it the class name of app
88:22 - okay which means we can now pick out
88:25 - this class name
88:26 - and I'm going to say that I want my
88:29 - whole BuzzFeed app to only be 600 pixels
88:33 - in width at all times
88:35 - okay
88:36 - great
88:38 - and my H1 element so I want my H1
88:42 - element I'm only going to use it once so
88:43 - I'm comfortable just styling the one
88:45 - each one element if you're using this in
88:47 - projects then I would suggest you know
88:48 - maybe picking up the H1 element by an ID
88:51 - or class name or nesting it and I want
88:54 - this to be 2.5 Ram
88:58 - and I'm also going to give it a line
89:00 - height of 105.
89:03 - and text align is going to be left and
89:07 - also for the paragraph I'm not really
89:10 - going to do much I'm just going to say
89:12 - that all paragraph elements are going to
89:15 - have the font size of 1.125 Ram
89:19 - and a line height of 1.2
89:23 - so if we look in here now
89:26 - that is what it looks like okay I'm just
89:28 - going to get rid of the Google fonts
89:31 - browser tab for now
89:33 - cool
89:36 - now that we have our title let's go
89:38 - ahead and map out some question blocks
89:41 - so the questions blocks are the ones
89:44 - that are going to hold all our four
89:45 - questions so let's go ahead and import
89:46 - them I'm going to import questions
89:50 - block so questions questions so just
89:55 - like that I'm looking at single quotes
89:56 - to make everything consistent I'm going
89:58 - to get that component and this time well
90:01 - what I'm going to do is say that you
90:04 - know if the quiz exists
90:08 - then we want to get its content and map
90:12 - each content piece
90:15 - so let's do content
90:17 - or content item
90:21 - and I'm going to map it to the question
90:25 - log element like so
90:29 - okay so all I'm doing is essentially
90:33 - looking in here and checking with the
90:35 - quiz content and checking if the quiz
90:37 - exists and if it does I'm getting its
90:39 - content so the three objects I'm going
90:41 - to map each content item to the question
90:42 - block I'm going to pass through each
90:44 - content item let's pass it through as a
90:47 - quiz item it's a Content item I'm
90:50 - passing through into the questions block
90:51 - as a quiz item which means that on the
90:54 - questions block this will be a quiz item
90:56 - now and I'm de-structuring it and then
90:58 - let's go ahead and just console of this
91:02 - so console log each quiz item so if we
91:05 - look in here now
91:09 - I cannot read properties undefined of
91:13 - map
91:16 - let's say if quiz exists and
91:22 - okay
91:24 - so there we go we are now mapping out
91:27 - each quiz item and this should
91:30 - be three okay and there it is
91:35 - so now with each quiz item
91:39 - let's actually display it on the
91:41 - questions block so let's go ahead and do
91:45 - that by getting the quiz items title
91:48 - so I'm just going to get rid of that
91:50 - console log
91:53 - and let's return a
91:56 - empty div this time and then an H2
91:59 - element
92:01 - which is going to essentially just show
92:05 - the quiz items
92:07 - text
92:09 - so if we look in here
92:12 - so now we have pick a vacation
92:13 - destination pick some food and pick a
92:15 - home we also need to add a key as we are
92:18 - mapping so let's go ahead and go back to
92:20 - the app I'm going to get some
92:22 - parenthesis so that we can also add an
92:25 - index
92:27 - so we can add a key to the questions
92:29 - block so key
92:34 - index just like so in fact we might be
92:38 - able to just use the ID of the content
92:40 - and let's go and see what this looks
92:42 - like we can go ahead and
92:48 - foreign
92:50 - so let's go ahead and perhaps use that
92:53 - instead which means we don't need this
92:57 - I'm just going to pass through the
92:58 - content item ID instead
93:01 - just like that
93:03 - great so now we shouldn't have the error
93:06 - showing up anymore
93:07 - okay now that we have each question
93:10 - block let's style it up a little bit so
93:13 - let's get up our CSS once more and this
93:16 - time I'm going to add some sine to the
93:18 - H2 elements
93:19 - happens
93:22 - I'm going to say that each H2 element is
93:25 - going to font size 3.5 or M
93:29 - a line height of 1.05 and text a line
93:34 - this time it's going to be
93:36 - Center
93:37 - okay
93:39 - cool and while I'm actually here I'm
93:42 - going to get the questions container
93:46 - and while I'm actually here I'm also
93:48 - going to perhaps give this the class
93:52 - name
93:53 - of
94:01 - question title
94:04 - okay
94:09 - and I'm also going to create a div
94:11 - and give this the class name
94:15 - of questions multiple containers so that
94:19 - we can figure out and style it I'm also
94:20 - going to give this the ID as we are
94:22 - going to want to scroll to these titles
94:25 - so let's go ahead and give this an ID
94:27 - and it's just going to be the quiz items
94:29 - ID that we passed through
94:33 - cool so this is looking good now let's
94:36 - pick out the question title so let's get
94:39 - up our CSS once more dot question title
94:42 - as it say class name and all I'm going
94:44 - to do is just say that each question
94:46 - title well I'm just going to give it a
94:48 - width of 600 pixels just like our app
94:50 - our height a particular height of 210
94:53 - pixels a background color which I picked
94:55 - out which is this the purplish color
94:57 - that I quite
95:00 - like
95:03 - let's also give it a border radius to
95:06 - soften it up a little bit around the
95:09 - edges and I'm going to say that
95:11 - everything in it is going to be centered
95:14 - horizontally so I'm using display Flex
95:16 - justify content Center but also
95:19 - vertically so I need to use align items
95:22 - Center for this and we also need to
95:25 - assign a height which it already has
95:27 - okay and I'm going to say that the color
95:30 - of the text for these question titles is
95:33 - going to be white so I'm just going to
95:35 - use the RGB
95:36 - for white which is
95:39 - like so
95:40 - cool
95:42 - and we also want to grab the questions
95:44 - container so questions
95:48 - container class name and I'm again just
95:52 - going to use display
95:54 - Flex however this time I'm going to do
95:57 - Flex wrap as we're going to have four
95:58 - items in there and I want to wrap over
96:00 - each other and I also want to use
96:02 - Justified content space between to make
96:05 - sure there's equal spacing between each
96:08 - of the four options
96:10 - okay and let's also space out a little
96:13 - bit 16 pixels from the top Zero from the
96:16 - right hand side 23 pixels from the
96:19 - bottom and zero from the left side
96:22 - so there we go
96:24 - there's each of our titles okay question
96:27 - titles they look like this and once
96:30 - again just maybe we're going to zoom out
96:31 - a little bit so it's better for us to
96:33 - see what this looks like
96:36 - cool so that's what we have done now
96:38 - let's get to putting in our questions
96:40 - into the questions container
96:44 - so let's do it
96:48 - so this time I'm actually going to have
96:50 - to import the question block the
96:52 - individual question block into here
96:55 - question block
96:58 - individual from our components directory
97:05 - components we are in the same place
97:07 - actually so we can just do
97:10 - this and get the question block and now
97:14 - for each quiz item so quiz item
97:19 - DOT questions
97:22 - I'm going to map each
97:24 - question to the question block I don't
97:28 - think we need an index again thanks to
97:30 - have nine anyway because I think each
97:32 - question has an ID or at least I'm
97:34 - pretty sure it does content question
97:39 - questions
97:40 - they do not have an ID
97:42 - because that's one question okay fine so
97:44 - let's put it back let's put in the index
97:47 - and I'm just going to underscore as we
97:49 - don't really need it
97:51 - okay so into the question block
97:56 - I am passing through the actual question
97:59 - which means that here we can destructure
98:02 - the question
98:06 - so that we can use it
98:08 - in the component
98:11 - so let's go ahead and just return a
98:14 - button
98:16 - element for now okay because we're gonna
98:18 - have to choose each one of the options
98:21 - so that button for this essentially
98:23 - makes sense
98:24 - uh for this let's actually give it the
98:27 - class name
98:31 - individual question
98:34 - lock this time
98:36 - and then we are also going to in the
98:40 - button put in an image
98:44 - element
98:46 - an H3 element which was a closing
98:49 - element H3 element is time which is
98:53 - going to show our question text
98:56 - and then we're going to put a p element
98:59 - which is going to have two uh links
99:03 - essentially the first one is essentially
99:05 - going to go to wherever we hold our
99:08 - image so I'm just going to put the
99:09 - question URL and as the text I'm going
99:13 - to put the person who took the photo so
99:17 - the question credit is going to go there
99:20 - and as the second one I'm going to say
99:24 - where you can get this image so I'm
99:26 - going to put href and I'm actually just
99:28 - going to put a link to unsplash as all
99:30 - my images are from there so I just want
99:33 - to credit it properly and in here I'm
99:36 - just gonna put on Splash
99:39 - okay
99:41 - great so if we just look at this now
99:43 - that's what it looks like each button
99:45 - has some text which is one of our
99:48 - options whoever took the photo as well
99:52 - as where we've got it from and just go
99:54 - ahead and put a space after the credit
99:56 - so that it spaced out a little bit and
99:58 - now let's get the image showing so all
100:00 - I'm going to do is put the source as the
100:05 - question
100:08 - image
100:10 - like so so once again all we're doing is
100:13 - getting the all
100:15 - the image the text and the credit
100:17 - showing up as well as the alternative
100:20 - text which I'm just about to use because
100:22 - as we know each image element should
100:24 - have some alternative text so I'm going
100:26 - to get a question Alt
100:29 - uh question URL doesn't exist we
100:31 - actually have to use question dot image
100:33 - in order to get the URL so there we go
100:36 - so great this is looking kind of cool
100:40 - let's just go ahead and sell up these
100:43 - buttons a little bit by getting rid of
100:45 - the default silent
100:47 - so let's grab the button by the class
100:50 - name this time so I'm just going to grab
100:53 - the class name of question block and all
100:56 - I'm going to do is say that each
100:58 - question block has to have a width of 2
101:02 - 8 6 pixels and a height of 286 pixels
101:07 - I'm going to give it a background color
101:09 - which is just going to be white
101:11 - essentially so RGB 255 2x5
101:16 - 255 just like so
101:20 - a border radius to soften it up of 5
101:23 - pixels and then let's also give it a box
101:26 - Shadow one that I have kind of pre-made
101:29 - already but essentially all it's saying
101:31 - is that I want it to be black with an
101:34 - alpha channel of 0.070
101:38 - uh from the x-axis zero on the y-axis
101:42 - zero spread within one pixel plus so
101:45 - it's a really really small box Shadow
101:47 - and I want the text aligned in the
101:50 - question block to be in the center
101:54 - I'm also going to get the margin bottom
101:58 - to be 15 pixels and any overflow I'm
102:01 - going to say that
102:03 - hidden and let's see what that looks
102:07 - like I'm also going to get rid of the
102:08 - Border as that is very harsh so Porter
102:13 - none
102:18 - so there we
102:20 - go
102:22 - okay that is looking quite cool as you
102:25 - will see overflow is hidden so if the
102:27 - image is bigger it will be hidden with
102:29 - the overflowed property
102:32 - great
102:33 - I'm also just going to get rid of the
102:35 - padding as it's causing some funky
102:38 - Behavior I believe
102:41 - so padding
102:43 - zero
102:44 - just like so so that is looking much
102:49 - better
102:51 - now we have our questions block we have
102:54 - our individual questions this is looking
102:56 - good however I think we might need to
102:58 - make these a little bit bigger or maybe
103:01 - the text smaller as it's hiding
103:04 - a paragraph element right here
103:08 - so maybe let's go ahead and do that
103:13 - in fact let's get our H3 elements
103:18 - I'm just going to give it margin
103:20 - 10 pixels
103:22 - okay so that is kind of becoming a
103:24 - little bit more visible
103:27 - and maybe the height of these
103:30 - let's try auto see what that looks like
103:33 - okay so actually that's not bad
103:38 - if I want to apply different styling to
103:40 - these paragraph elements I can actually
103:43 - gravity question block and say that any
103:45 - P tag that lives inside of it is
103:47 - actually going to have a really small
103:49 - font size let's go ahead and put 11
103:51 - pixels and I'm also going to make it
103:54 - italic so I'm going to do font style
103:57 - italic which would mean that it's just a
104:00 - little bit smaller and I think that
104:01 - looks better I'm also going to change
104:04 - the anchor links so again any anchor
104:07 - link that lives in the question block is
104:09 - just going to have a color of uh
104:14 - this gray let's maybe change it to be
104:16 - RGB though so
104:21 - what is that
104:23 - one five three
104:25 - RGB one five three one five three one
104:28 - five three so just like that
104:30 - great and I'm also going to get rid of
104:32 - the underline with text decoration none
104:36 - cool so that's already looking much much
104:40 - better
104:42 - uh cool I'm pretty happy with
104:46 - this
104:48 - great
104:51 - so now that we have done that let's
104:53 - actually get to
104:55 - picking out the questions and we want to
104:59 - save each question so let's go ahead and
105:03 - what should we do first okay let's
105:07 - we have to scroll to each unanswered
105:09 - question two and we also have to make
105:11 - the others disabled ones we put up a
105:13 - question but let's just do this slowly
105:15 - let's start from the beginning and let's
105:18 - actually choose the chosen answers first
105:22 - so
105:25 - get rid of the CSS file
105:27 - get rid of the title get rid of the
105:29 - answer block
105:30 - and let's focus on the app.js file so
105:34 - I'm just going to save this under here
105:36 - okay I'm going to go and
105:39 - save this in state so chosen answer
105:44 - items
105:46 - set chosen on Sarah items
105:51 - and use state
105:54 - it's going to be null as we're starting
105:56 - off with nothing and we hope to
105:59 - essentially add stuff into this chosen
106:03 - answers item which is going to be an
106:05 - array
106:07 - okay so that's what that is going to be
106:09 - let's go ahead and do it
106:13 - so
106:14 - what do I want to do well
106:18 - on the question block I'm actually going
106:20 - to write a function to handle the click
106:22 - and if we click a button
106:25 - so a handle click just like so and what
106:29 - we're going to do in here is set chosen
106:32 - answers
106:35 - items
106:37 - and then if we want to add to an array
106:41 - we're going to get the previous state of
106:42 - the array so this is how you essentially
106:45 - add to an array and use State and we're
106:48 - going to get whatever was the previous
106:51 - state of that array and destructure it
106:55 - so essentially letting it all spill out
106:56 - into this new array but we're also going
106:58 - to add whatever we chose okay so
107:02 - whatever we chose in here
107:04 - which is going to be the question text
107:06 - that we have passed through here as a
107:09 - prop yeah so what this means if I click
107:13 - on the button
107:16 - so on click of the button I want to
107:19 - handle the click and if I click any one
107:21 - of these buttons
107:23 - then the text of that button so New York
107:27 - or Austin or Portland OR New Orleans
107:29 - will be saved to My Chosen answer items
107:33 - on the app but for this to work I
107:35 - actually need to pass through such
107:37 - chosen items into here so along with the
107:39 - question I'm going to pass through set
107:41 - to chosen answer items I'm gonna have to
107:44 - pass that through also from the
107:46 - questions block which is in passed down
107:49 - into from the app so there's our
107:52 - questions block so I'm just going to
107:54 - pass through the set chosen answer items
107:56 - too
107:57 - so let's go ahead and actually console
108:00 - log
108:03 - chosen answer items get rid of that so
108:07 - we can see a little bit better let's get
108:09 - up our console
108:11 - it's refresh so we can get rid of
108:13 - everything and if I click on New York we
108:17 - should save the question text into the
108:21 - array
108:22 - Something's Happened
108:24 - sections and items is not a function at
108:27 - handle click
108:30 - question block set chosen answer items
108:35 - being passed through here we're not
108:38 - passing that through into the question
108:39 - block
108:41 - so let's go ahead and pass that through
108:45 - as well
108:46 - okay so that's now being passed down
108:49 - so it's here we're passing it into the
108:53 - questions block
108:55 - and then in the questions block we're
108:56 - passing through is a plot prop and then
108:59 - into the question block so we can now
109:02 - use it and I've destructed it and I'm
109:04 - using it here got it
109:08 - and finally instead of having no we're
109:10 - just going to start off with chosen
109:12 - answer items being an empty array
109:14 - instead
109:15 - cool so now let's test it out and if I
109:19 - check in here set chosen items is an
109:21 - empty array and if I click on this we
109:23 - should pass through the question title
109:26 - of New York and we do and if I click
109:29 - Austin New York and also not be there
109:31 - but if I click any of these we're
109:33 - essentially adding to that array
109:35 - also this is looking good however I
109:39 - don't want to be able to pick any
109:42 - of these if I click one from this Bunch
109:45 - right so perhaps let's go ahead and do
109:49 - that next
109:50 - so to do this well I need to know what
109:53 - the chosen answer items are really at
109:55 - all times or more specifically when I
109:58 - handle the click right so what I'm going
110:02 - to do is
110:05 - pause through the chosen answer items
110:09 - into the questions block which means
110:12 - that I need to de-structure it here and
110:14 - pass it through into the question block
110:17 - so then I can destructure it in the
110:19 - question block and use it here so now if
110:23 - I will add the disabled property to the
110:26 - button I'm going to say that the button
110:28 - should be disabled if chosen answer
110:31 - items
110:33 - and does not
110:35 - include
110:41 - the question text
110:44 - so at the moment they are all disabled
110:46 - but if we clicked on one which we're not
110:48 - able to at the moment then that one
110:51 - should go in the array and show up as
110:54 - not disabled so how do we go around this
110:56 - I'm just going to comment this out for
110:58 - now
111:00 - so that's how we would do that however
111:01 - we also want to keep track of which ID
111:06 - so which question block ID
111:09 - so for example this one has the ID of
111:12 - zero this one has the ID of 1 and so on
111:15 - we want to know which one has already
111:17 - been answered so I'm again going to set
111:20 - this in state up here on the app so
111:23 - const
111:25 - set unanswered
111:30 - question IDs
111:33 - and a set
111:37 - const unanswered
111:43 - question IDs and set an answered
111:49 - question IDs I'm going to use State and
111:54 - let's start off with this being an empty
111:56 - array
111:58 - and we're going to actually handle this
112:03 - on the question block again so let's
112:06 - pass both of these through I'm just
112:08 - going to pass them through
112:11 - here so just like we did
112:15 - with the other state
112:19 - so we're passing them through into the
112:20 - questions block which means we need to
112:22 - destructure them now so on answered
112:24 - question IDs and set
112:26 - unanswered questions let's maybe put
112:29 - this on a
112:30 - new
112:32 - line
112:35 - like so
112:37 - I think it's set unanswered question IDs
112:41 - and then let's pass it through into the
112:43 - question block as well so unanswered
112:45 - question IDs and set unanswered
112:47 - questions IDs streams on here we again
112:52 - are going to get the unanswered
112:54 - questions IDs and set unanswered
112:57 - questions IDs and once again I'm just
112:59 - going to put these on a new
113:01 - line for us so we can see them all and
113:07 - welcome
113:09 - okay
113:10 - great so on the handle clip when we
113:14 - click on one of the buttons we set a
113:17 - chosen answer but we also want to change
113:20 - the unanswered questions so actually at
113:22 - the beginning what we should do is set
113:26 - the unanswered questions well we could
113:28 - have hard code it to be zero one and two
113:31 - or we can do it dynamically based on how
113:35 - many question blocks we have so I'm
113:37 - going to show you how to do that as it's
113:39 - more interesting I think rather than
113:40 - just hard coding it as we know there's
113:42 - three
113:43 - so let's get rid of that and under the
113:47 - fetch data and the use effects I'm going
113:50 - to write another use effect
113:52 - to get the unanswered question IDs
114:00 - so there we go I'm just going to leave
114:01 - this empty for now and I'm going to say
114:04 - that if the quiz exists I want to get
114:07 - its content and map so I'm just
114:10 - literally going to get the ID of each
114:12 - object by destructuring it to get the ID
114:18 - and then just returning
114:21 - the ID so that's how you would do that
114:23 - in order to get the ID of each object in
114:26 - my content array
114:29 - and I'm going to say this is constant
114:31 - answer word IDs
114:36 - just
114:38 - like so unanswet IDs
114:42 - okay and once we have those I'm going to
114:44 - use set unanswered question IDs and pass
114:46 - through the unanswered question IDs it's
114:50 - an array so we'll essentially override
114:52 - this array
114:53 - okay so great if we console log
115:01 - unanswered question ideas and have a
115:04 - look in here
115:05 - not defined in the questions block
115:09 - questions
115:16 - so that's not being passed through
115:17 - properly set unanswered question IDs
115:27 - grab that
115:30 - just make sure that I'm spelling it
115:32 - correctly at all points
115:39 - uh typo
115:42 - unanswered
115:45 - set and answered
115:48 - set and answered
115:51 - set and answered
115:55 - says and answered certain answered
115:58 - and I believe the last one is here
116:02 - great
116:08 - wonderful so now if we look in the
116:11 - console log
116:13 - now that we've spelled it right
116:15 - everywhere
116:19 - and we need to run this use effect every
116:21 - time the quiz data changes so just pass
116:24 - through a quiz as a dependency here
116:27 - and great so now you will see that the
116:30 - unanswered question IDs are zero one and
116:33 - two based off the IDS of these three
116:36 - question logs
116:39 - got it
116:41 - cool
116:42 - so now whenever we click on a question
116:45 - in one of these question blocks I want
116:48 - to remove one of these ideas from this
116:51 - array
116:53 - so let's go ahead and do that now
116:56 - so we are passing that through into the
116:59 - question block
117:00 - so what I'm going to do is when we click
117:03 - on one of the questions
117:04 - along with choosing the chosen answer
117:07 - I'm going to use the set unanswered
117:09 - question IDs and I'm going to filter out
117:13 - and look for the ID
117:16 - so the ID does not equal the quiz
117:22 - item id which is going to be passed down
117:25 - from the question block so let's go
117:27 - ahead and call this quiz Item ID
117:31 - and it's essentially just going to be
117:33 - well the quiz item is
117:36 - and get its ID
117:38 - okay
117:39 - so should that should be either a zero
117:41 - or one or a two we're passing that
117:44 - through as a quiz Item ID into the
117:46 - question block which means that here we
117:48 - destructure it and now we can use it
117:51 - here so get the quiz Item ID
117:56 - awesome
117:57 - okay so if quiz exists and if content
118:00 - exists then we map so just put the
118:03 - question mark there great so now if I go
118:06 - ahead and pick New York it should add it
118:09 - to the chosen answers array and also
118:11 - this array of unanswered questions the
118:14 - zero should be removed
118:17 - are not a function
118:24 - that's because we need to do unanswered
118:26 - questions not to set an answer questions
118:28 - sorry we're getting the array we're
118:30 - filtering it and then we are passing the
118:33 - whole new array into set unanswered
118:36 - questions ID okay so what overriding was
118:40 - ever in there with this new array
118:44 - cool
118:46 - so now let's try again
118:49 - let's pick New York and great New York's
118:52 - been added here and zero has been taken
118:55 - away from our unanswered question IDs
118:58 - wonderful and if I click New Orleans
119:02 - New York and New Orleans have been added
119:03 - but we can't take away zero so it's
119:05 - still one and two and if I click
119:07 - Sandwich New Orleans and sandwich has
119:09 - been added to the answered questions and
119:12 - two is the only ID left so that's this
119:14 - one here
119:15 - great this is looking good now to use
119:19 - this to disable all the other buttons
119:21 - right
119:22 - so we've already written this I'm going
119:25 - to actually write this
119:27 - as a const up here const valid pick
119:31 - and I'm going to say it's a valid pick
119:35 - if
119:37 - The Chosen answer items do not include
119:42 - the question text and
119:46 - the unanswered questions ID array I'll
119:49 - put this on a new line
119:51 - includes
119:56 - does not
119:58 - includes
120:00 - the quiz
120:02 - Item ID and then I'm just going to pass
120:04 - through this
120:06 - and through the disabled
120:08 - property okay
120:12 - once again let's see what's happened
120:14 - cannot read properties undefined or
120:16 - includes okay so we just need to check
120:19 - if this exists and check if this exists
120:23 - great
120:25 - so now you click on here New York select
120:30 - an audio this is disabled sandwich is
120:32 - selected and all three are disabled
120:34 - traditional is selected or if you're
120:36 - disabled so we can't click on any of
120:37 - them and we've answered all the
120:39 - questions
120:40 - now to actually gravitate towards the
120:44 - top most unanswered question so I'm
120:46 - going to show you how to do that
120:49 - so this is going to happen on the
120:51 - questions block as we've given the H2
120:53 - elements an ID for a reason and that is
120:56 - because we want to scroll to each one of
120:58 - them
120:58 - so what I'm gonna do is
121:02 - so this is going to happen on the app.js
121:04 - file however I just want to show you
121:06 - again that's why we added the ID to each
121:09 - one of the sh2 elements as we're going
121:11 - to scroll to them so on the app.js file
121:15 - I'm just going to get rid of these for
121:17 - now I'm going to write another use
121:19 - effect
121:22 - and this times is going to pass through
121:25 - an empty dependency for now and I'm
121:27 - going to say if unanswered question IDs
121:30 - exist
121:32 - so perhaps we need to actually make this
121:34 - null to start off with let's make that
121:37 - null
121:38 - if unanswered question IDs exist
121:42 - and if the unanswered
121:45 - question IDs length
121:48 - is suddenly smaller than or equal to
121:49 - zero we know that all the questions you
121:52 - know haven't answered but just to double
121:55 - check and chosen
121:58 - answer items
122:02 - land is larger than or equal to one then
122:06 - we definitely know that you know all the
122:08 - questions haven't answered then we want
122:10 - to essentially scroll to the answer
122:12 - block right so I'm just going to put
122:14 - scroll
122:15 - to answer block
122:20 - however
122:23 - still if unanswered question IDs exist
122:26 - in general we just want to scroll to
122:29 - highest
122:31 - unanswered question ID
122:36 - and to do that we need to get the
122:37 - highest and I can get the highest or
122:40 - const highest ID by simply getting all
122:45 - of the unanswered question IDs and
122:47 - unpacking them into math
122:51 - Min okay so that will return the
122:55 - smallest number from this array okay so
122:59 - that would be the highest ID and now
123:02 - we're going to grab the highest element
123:04 - in my document and I'm going to do so by
123:08 - grabbing the document and using get
123:10 - element by ID and passing through the
123:13 - highest ID so that would be either 0 or
123:16 - 1 or a two whichever one is the highest
123:18 - that exists in that array I'm going to
123:20 - say this is highest element just like so
123:24 - and now if highest element
123:28 - exists I want to scroll
123:31 - into view
123:34 - so dot scroll into view
123:37 - and the behavior of this I want it to be
123:45 - okay
123:47 - great
123:48 - so this is looking good and I want this
123:52 - use effect to run essentially each time
123:54 - the unanswered question IDs array
123:56 - changes okay and also each time the
124:00 - chosen answer items uh change as well
124:05 - so let's see if this works so for
124:08 - example we're scrolling to the first one
124:11 - however if I answer sandwich here it
124:13 - will take me back here so the first one
124:15 - to answer it and then we'll scroll down
124:17 - to the third one as I haven't answered
124:19 - it either great and if all three are
124:21 - answered it should scroll to the answer
124:23 - block but we are yet to write that code
124:25 - so let's go ahead and do that now
124:28 - so the answer block well essentially I
124:30 - want to actually show the answer block
124:31 - first and to do that we're going to have
124:34 - to save this up here
124:36 - um I'm going to save the state of show
124:38 - Answer set show answer I'm going to
124:44 - start off with it being false so use
124:46 - State false
124:50 - foreign
124:56 - have answered everything we want to
124:58 - scroll to the answer block because we
124:59 - want to show it right so we're going to
125:00 - put show Answer true and now we're going
125:03 - to use this constant social answer in
125:06 - order to show an element so I'm going to
125:09 - do so here
125:10 - and I'm going to say if show Answer
125:13 - exists then I want to essentially show
125:17 - the answer
125:18 - block
125:20 - just like so and what do I want to pass
125:23 - through into the answer block well maybe
125:26 - let's just pass through all the answer
125:28 - block options and do the logic on there
125:31 - so I'm going to put answer options and
125:34 - just pass through
125:36 - quiz if that exists
125:39 - dot answers it's okay so that's an array
125:42 - of all our answers as well as the chosen
125:45 - answers so our combination so chosen
125:50 - answer items so now on the answer block
125:54 - right here
125:56 - just going to make that a little bit
125:57 - bigger
125:59 - I'm going to de-structure the answer
126:02 - options as well as the chosen answers
126:07 - okay and we're going to save the results
126:09 - so const result set
126:12 - result
126:15 - use State and the state of it's going to
126:18 - be null to start so this this is going
126:21 - to be no let's actually go ahead and
126:22 - import use state so we can use it import
126:26 - use State from
126:29 - react
126:31 - and now in a use effect
126:38 - and then just empty dependencies for now
126:41 - thanks for importing the use effect I'm
126:44 - going to get the answer options and for
126:47 - each answer okay so for each object in
126:52 - my answer options
126:55 - or 60 of them
126:59 - I want to say that
127:05 - if
127:08 - chosen
127:10 - answer
127:14 - s includes
127:18 - so essentially I'm looking in my array
127:20 - of chosen answers of the three question
127:23 - blocks that I have here and it includes
127:25 - the
127:27 - answers
127:29 - combination
127:34 - first item
127:36 - or
127:41 - if the array includes the second item in
127:45 - our combinations array
127:49 - or includes the
127:51 - third item
127:54 - then I want to set result
127:57 - with the answer
127:59 - objects okay
128:03 - this should be an and and this should be
128:06 - an and
128:11 - else
128:16 - if no results to say for some reason it
128:20 - didn't work and we didn't get one even
128:22 - though we should I'm gonna have a
128:24 - default okay and I'm going to set the
128:26 - results as whatever the answer options
128:29 - are
128:30 - just the first one this is the first
128:33 - answer object is what we are going to
128:35 - set as the result
128:37 - okay
128:39 - great
128:41 - so let's see if that works
128:44 - I'm just going to console log it for now
128:46 - so console.log
128:47 - results
128:52 - and in here
128:54 - it's going to pick New York Pick Pizza
128:56 - pick traditional and ta-da we get an
128:59 - answer object and that is blue cheese so
129:02 - that is the answer object that we're
129:04 - getting back let's pick another one
129:05 - Austin
129:06 - pasta mountains and this time we get
129:10 - sanit cologne as the cheese so this is
129:13 - working we're getting different uh
129:15 - results each time let's go ahead and
129:17 - show that
129:19 - here so I'm going to return
129:21 - this time a div I'm going to have to
129:24 - give this the ID so we can scroll to it
129:27 - and let's give it the ID of
129:29 - answer
129:31 - block
129:34 - and I'm going to give this also the
129:36 - class name of
129:38 - answer
129:40 - lock
129:42 - and then in here I'm going to the H2
129:44 - element that's going to say that if the
129:46 - result exists I want to show its text
129:50 - and I'm also going to show an image of
129:51 - the cheese so let's get our image
129:54 - element and as a source I'm going to say
129:57 - that if the result exists I'm going to
130:00 - grab its image and the alt text for this
130:04 - is going to be the result and it exists
130:08 - text
130:10 - cool and now let's style up our answer
130:12 - block so once again just get up our
130:15 - style sheet
130:18 - right here
130:21 - so dot answer block
130:24 - and I'm going to say that my answer
130:26 - block is going to awit of course of 600
130:28 - pixels I'm just going to hard code it
130:30 - you don't have to a background color of
130:32 - this pink that I have preachers and so
130:34 - RGB 255 61158
130:39 - and then order radius to soften it out
130:42 - of 5 pixels display
130:45 - so we can Center everything align items
130:48 - Center Flex Direction
130:52 - column and the font of everything in
130:56 - here to be white so 245 245 255. I'm
131:00 - also going to say that the image so the
131:02 - answer
131:04 - clock image is going to have a width of
131:07 - 90 percent
131:10 - so now if we look in here we also need
131:13 - to actually scroll to this actually so
131:15 - let's finish out the code that we
131:17 - started writing here
131:19 - so this time we're going to go into the
131:21 - document and get element by ID of
131:26 - answer
131:30 - block
131:33 - and save it as the answer
131:36 - block
131:37 - and then if answer block exists I'm
131:41 - going to scroll into view and once again
131:43 - the behavior
131:50 - is going to be
131:54 - yes
131:55 - just make sure that it's consistent
131:58 - okay great so let's check it out New
132:01 - York
132:02 - hamburger modern
132:05 - I do not scroll why is that
132:09 - so let's also actually add show answer
132:13 - to this dependency so that if she'll
132:15 - answer changes we run this again
132:19 - Austin Pizza modern and there we go we
132:23 - scroll to the blue cheese we just go to
132:26 - the top of this for now however if you
132:28 - want to offset it further then please
132:29 - feel free well I'm kind of happy with
132:31 - this we scroll through and get the title
132:33 - and then we can move down to see the
132:36 - full answer
132:38 - and actually we don't really want a
132:40 - backup let's just get rid of a backup
132:42 - for now because null will be the start
132:45 - state so we don't want that we just want
132:48 - to override whatever this is so let's go
132:50 - ahead and say each time the result of
132:52 - changes that we want to run this is
132:54 - effect again
132:56 - okay so now let's try again
133:00 - okay wonderful so that is working now
133:03 - and I guess
133:05 - I mean we can add this back in now if
133:07 - else
133:12 - no results
133:15 - then set result to the answer options
133:22 - fast
133:24 - item
133:27 - so it should be else f
133:33 - okay
133:36 - great
133:40 - because now that null will get
133:42 - overridden when we get to a new answer
133:44 - so great we're getting so many cheeses
133:49 - in some reason the image of Goya did not
133:51 - work perhaps it's been removed but you
133:54 - get the gist
133:56 - okay
133:58 - now we should really use the and
134:00 - operator for this instead of the bitwise
134:03 - operator so that returns a Boolean so
134:06 - the statement of terms of Boolean rather
134:08 - than integer so just go ahead and change
134:10 - that I'm just going to change up a few
134:12 - more things as well while we're here I
134:14 - don't think we should be using false
134:16 - here as technically we should start off
134:18 - with this state being null instead of
134:21 - false and then we're going to change
134:22 - null from being not null to something
134:25 - okay
134:26 - so that makes more sense to me and one
134:28 - last thing I'm going to do is just make
134:30 - everything consistent in here as we use
134:32 - RAM and pixels interchangeably so I'm
134:36 - just going to make everything be REM
134:38 - okay so please go ahead and do the same
134:40 - for you will file just to keep
134:42 - everything kind of a bit neater in here
134:45 - I don't really like using RAM and pixels
134:48 - interchangeably so that's essentially
134:51 - what I am doing I'm just cleaning things
134:53 - up a little bit I will be sharing this
134:55 - code in the video description as well so
134:59 - you can just take this if you need
135:02 - um of course I would like you to really
135:05 - practice your skills by you know maybe
135:07 - applying different styling if you are
135:09 - using this for your portfolio Okay or
135:12 - perhaps even a different quiz that is
135:14 - completely up to you too that could be
135:16 - quite fun okay
135:19 - great so nearly done and
135:23 - wonderful
135:24 - now one more thing that I want to change
135:28 - and that is actually back on the app.js
135:32 - file which really should be an app.js X
135:34 - part as we have jsx in here I'm actually
135:37 - going to just use the question mark here
135:41 - as what we are technically doing is
135:43 - checking if content exists
135:46 - and done
135:48 - wonderful so maybe just change this to a
135:51 - jsx file that's what I will be uploading
135:53 - to the code at the end
135:57 - and finally I'm going to show you how to
135:59 - not use the document get element by ID
136:02 - and use the use ref instead however this
136:05 - is going to be a little bit more
136:06 - complicated as I'm going to be using the
136:08 - use or a hook from react but outside of
136:12 - the component so just go ahead and get
136:15 - the create ref Hook from react for now
136:19 - and then just under here let's do it
136:22 - here I'm going to Define all our
136:25 - references which are going to be taken
136:28 - from the unanswered question IDs if they
136:31 - exist and if they do we're just going to
136:33 - essentially reduce them
136:37 - to create a reference for each ID
136:40 - so this is all I'm going to do I'm going
136:42 - to show you what this looks like create
136:44 - graph and call that method and I'm just
136:47 - going to return
136:49 - the accumulation
136:53 - as an object
136:55 - so if I console log
136:59 - graphs
137:01 - and look in here that's what it looks
137:04 - like at the moment the current rep is
137:06 - null however we're going to pass it
137:08 - through into each mapped question block
137:13 - so I'm going to get the refs now
137:16 - and on the question block I'm going to
137:19 - pass you the refs but go into
137:22 - the ref and just pass through the ID so
137:25 - we can just use the content ID for this
137:27 - because that will get us back as zero or
137:29 - one or a two and now on the questions
137:31 - block well I need to wrap this in a
137:34 - forward ref so get the forward ref this
137:37 - is something again from react so we're
137:40 - going to have to import that up here
137:42 - import forward ref
137:53 - from
137:55 - react just like so and now we pass
137:58 - through the ref so our props are here
138:01 - the ref is the second argument so just
138:04 - pass that through like that and now we
138:05 - can just use it here like so and we
138:08 - don't actually need the ID anymore so
138:09 - let's get rid of that
138:12 - great
138:13 - so that is all I had to do wrap this in
138:17 - a forward wrap pass through the ref as a
138:20 - second argument and then use it here
138:21 - okay so great now how do we scroll at
138:26 - the moment if we look in here you will
138:28 - see they all have a current H2 element
138:31 - so either this one or this one or this
138:34 - one but to scroll to them we're going to
138:36 - have to put that in the use effect so
138:38 - we're gonna have to change up this whole
138:39 - use effect here
138:41 - and first off I'm just going to get rid
138:43 - of this and then I'm going to say that
138:46 - I'm going to get the rest and we're
138:48 - going to pass through the highest ID
138:50 - into that and scroll into View Behavior
138:52 - smooth okay and we're going to do this
138:56 - in an if else
138:59 - right because now if we go and finish
139:02 - all of the ones that we've clicked
139:04 - through this will show errors hence I'm
139:05 - putting in the if else because we're
139:07 - going to check for the unanswered
139:10 - questions and chosen answer items first
139:12 - so just put that in there
139:15 - like so and in here I'm also going to
139:19 - essentially have to get rid of this
139:21 - right so let's get rid of picking out
139:23 - the answer block by the ID and I'm going
139:25 - to create a new
139:27 - reference so I'm going to call this
139:29 - const answer
139:31 - graph and use create draft for it again
139:34 - so just call it like so grab the answer
139:37 - ref
139:38 - and on the answer block I'm going to
139:41 - password a ref which is the answer ref
139:43 - which means that on the answer block
139:45 - once again I need to wrap this in a
139:47 - forward
139:49 - ref
139:52 - pass through the ref as a second
139:55 - argument
139:57 - and then just use it on here so ref
139:59 - equals
140:01 - ref okay and I believe we don't need
140:03 - this now here
140:05 - great
140:07 - so now we are nearly done however I just
140:10 - need to handle scrolling to the answer
140:13 - so instead of this I'm actually going to
140:15 - check if the chosen answer the items
140:18 - length
140:20 - is larger than zero as we only really
140:22 - want to start scrolling once we actually
140:25 - have some chosen answers right and if
140:28 - show answer is true well then we get the
140:32 - answer ref
140:33 - current
140:37 - scroll
140:39 - into view
140:41 - and then let's also have
140:43 - Behavior Smith
140:45 - okay
140:46 - so I believe this should be it of course
140:50 - the score is now happening here let's
140:52 - check it out
140:54 - what we should also do is add the
140:56 - missing dependencies from here so I
140:58 - believe we're now missing the answer
141:00 - around and the Reps
141:04 - and we also need to just import
141:06 - the forward
141:08 - graph
141:10 - in yeah as well
141:15 - now this is causing errors so we just
141:17 - need to render this once reps exist as
141:20 - well so just add that to this line on
141:23 - 5th 959 make sure to have current here
141:27 - too
141:28 - foreign so now we can go ahead and
141:32 - select items
141:35 - it's not letting us scroll to answer
141:38 - current as well into you why is that
141:41 - score interview I need to change the
141:44 - spelling of that
141:49 - so now we can scroll and it will take us
141:53 - to a cheese
141:55 - and we can also start like from the end
141:57 - and it will take us to the highest
141:58 - unanswered question and then to the
142:01 - answer
142:02 - great
142:05 - so that's it I hope you found this
142:07 - useful and I hope you now can enjoy your
142:10 - BuzzFeed clone in reacts I hope to see
142:12 - you again soon for another action-packed
142:15 - walkthrough lesson
142:23 - okay so let's do it let's go ahead and
142:25 - create a project I am using webstorm
142:28 - which means that it will help me get all
142:30 - the correct files and configuration to
142:32 - spin up a project fast I'm just going to
142:35 - hit new project and under here click
142:38 - react as well as make sure that create
142:40 - typescript project is checked right here
142:43 - okay so that is all I am going to do
142:48 - and then also going to choose to call
142:50 - this type
142:53 - script
142:55 - BuzzFeed clone like so and then just
142:58 - create okay so that should now spin up
143:01 - my project for me along with all the
143:04 - correct files and configuration in this
143:06 - typescript BuzzFeed clone directory for
143:09 - those of you who are not using webstorm
143:12 - please go ahead and use the following
143:13 - command just go ahead and get a few
143:16 - Terminals and then wherever you choose
143:18 - so if I choose to do this in webstorm
143:20 - projects I would just use npx create
143:23 - react app my app so whatever you want to
143:25 - call it and template typescript okay and
143:28 - hit enter well if I'm not doing it this
143:30 - way I'm doing it the webstorm way
143:33 - so once again just go ahead and wait for
143:37 - that to happen and done happy hacking so
143:41 - now if I look in here it will give me
143:42 - all the files and configuration that I
143:44 - need to start my project including a TS
143:47 - config Json file
143:49 - okay so that's what it should look like
143:52 - just make sure that you have the same
143:54 - I'm actually going to change this to the
143:56 - es6 and that should be fine for now the
144:00 - next thing I do is just delete some
144:01 - things that we don't need in here so I'm
144:03 - not going to be doing tests I'm just
144:05 - going to delete all of these
144:08 - okay just go ahead and delete
144:11 - those three
144:16 - and then I'm going to delete the logo as
144:18 - well so just delete the logo
144:23 - delete anyway and then the app tests and
144:26 - app CSS as we're going to be doing all
144:28 - our styling in one file
144:30 - okay we're just going to keep it simple
144:32 - as this app isn't very big
144:34 - great so now your index TSX again just
144:38 - delete everything that you don't need so
144:40 - I'm just going to delete
144:43 - all of these lines that are not
144:46 - necessary to me so that your file looks
144:49 - like this
144:51 - I'm so going to get the index CSS and
144:53 - delete everything from those we can
144:55 - start from scratch and here as well I'm
144:57 - just going to delete everything just so
144:59 - that it turns one div like so and I'm
145:04 - going to choose this to be a function
145:05 - expression so const app equals and then
145:09 - an arrow function right here and then
145:11 - we're not importing these two so there
145:14 - we go
145:16 - great so this is what each of these
145:20 - three files should look like now
145:24 - now the next thing I want to do is
145:25 - create some components so in the source
145:28 - directory I'm going to create a new
145:29 - directory called components and in here
145:33 - I'm going to create a new file this is
145:35 - going to be for our title which is going
145:37 - to hold some TSX
145:39 - so click add I'm just essentially going
145:41 - to just look like this so let's go ahead
145:43 - and just copy and paste that in here and
145:45 - I'm just going to change this to title
145:46 - and also change this to title just like
145:50 - so
145:54 - and then do the same for the question
145:58 - block
146:00 - and then next I'm going to create a new
146:03 - typescript file so type script to jsx
146:06 - file and this time is going to be to
146:08 - hold all of my questions so I'm going to
146:10 - call it a questions block just like so
146:13 - so it's going to hold all four of my
146:16 - question options so let's just go ahead
146:18 - and change this to be questions plural
146:21 - lock
146:22 - and questions
146:25 - blog plural once more okay and just one
146:31 - more maybe sure to spell that exactly
146:32 - the same so questions block
146:35 - so new
146:37 - typescript file jsx file question block
146:41 - this time so individual question block
146:44 - I'm just going to paste that in here
146:46 - actually let's copy this one and paste
146:48 - it and we get question block question
146:52 - block just like so and one more we're
146:54 - gonna have an answer block which is
146:56 - going to show us the answer
146:59 - as to what shoes we are after we answer
147:02 - all our questions so answer block just
147:05 - like so paste that and changes to be
147:08 - answer block and once again
147:11 - answer
147:12 - block suggest like that
147:16 - great
147:18 - so now that we have those I'm just going
147:20 - to get rid of these for now
147:23 - let's get to
147:26 - adding
147:30 - some of those components in here so I'm
147:32 - going to import the title of course from
147:36 - title
147:39 - and that's in the components directory
147:41 - so we go in there and we get the title
147:43 - okay so there we go we've got our first
147:46 - component which I'm going to actually
147:48 - put in here
147:51 - so title
147:56 - great and that is the first component
147:58 - that we're going to feed data into but
148:00 - first let's actually put our data in the
148:03 - database so for this I'm just going to
148:05 - use a free database so you might have
148:07 - seen me using this before as it is one
148:09 - that I like to use because it is free
148:12 - I'm talking about data Stacks so I'm
148:15 - just going to go ahead and sign in
148:17 - please sign up if you haven't already
148:19 - and I'm going to just sign in with
148:21 - Google
148:21 - okay so you can choose to do it this way
148:24 - or you can choose to manually just put
148:25 - in your email address and set a password
148:27 - that part is totally up to you
148:30 - now once in here we're going to create a
148:33 - new database so just go ahead and click
148:35 - that and what should we call this
148:36 - database name what I'm just going to
148:38 - call it BuzzFeed
148:40 - and the key space name I'm going to call
148:42 - this quizzes okay and now we just need
148:46 - to select a region I am currently in
148:48 - Europe so I'm just going to go ahead and
148:50 - put West Europe and click create
148:53 - database
148:54 - okay so that will now do its thing
148:56 - you're going to get shown a token and
148:58 - please go ahead and get this data I'm
149:01 - going to show you as I will be deleting
149:02 - this but this is what yours should look
149:04 - like so please copy this and keep it
149:06 - somewhere safe as this is what we're
149:07 - going to use in order to communicate
149:09 - with our database okay so I'm just going
149:12 - to put mine in notes
149:14 - wonderful so I'm just going to go to
149:17 - database however this won't be done yet
149:19 - we need to wait for it to do its magic
149:21 - and we will know when that's finished as
149:24 - the status will not be pending anymore
149:26 - okay so we'll come back to that in a bit
149:28 - let's carry on here so now I'm going to
149:31 - go ahead and create a backend for this
149:33 - project there's just going to be a one
149:34 - file it's going to be a typescript file
149:36 - it's not going to be a jsx file okay so
149:39 - I'm just going to call it server and
149:40 - that should create a file called server
149:43 - TS a typescript and essentially all our
149:46 - backend stuff is going to be done on
149:48 - server TS and all of our front end is
149:51 - going to be in the source directory so
149:53 - that is how I kind of envisioned the
149:55 - structure for this project
149:57 - in the savates file this is going to be
149:59 - responsible for getting our data from
150:01 - the database and four I'm going to have
150:03 - to import a few packages so just make
150:07 - sure you're in the directory and use
150:09 - npmi to install the packages Express
150:13 - axios and I think that should be it for
150:17 - now I also know them on to listen out
150:19 - for changes to our backend so that you
150:22 - know we don't run the file once we keep
150:24 - on listening out to any changes done in
150:26 - this file so go ahead and install those
150:30 - three
150:31 - and great so that is now done
150:34 - next up I'm going to go to the package
150:36 - Json and actually write a script to
150:38 - start the back end so I'm going to add
150:40 - start back end just like so and I'm
150:43 - going to change this script to start
150:45 - front end in order to start off front
150:48 - end
150:49 - so my backend script is essentially
150:51 - going to be no demand to listen out for
150:53 - constant changes to the server TS file
150:56 - and that's it okay so we are done on
151:00 - this right now
151:02 - wonderful as you will see here here all
151:05 - the other packages and the versions that
151:08 - I am using so if something doesn't work
151:10 - it could be down to the version you are
151:12 - using of any one of these packages okay
151:15 - so just make sure that yours are the
151:16 - same as mine
151:19 - great
151:22 - let's have a look at how our database is
151:24 - doing and the state is now active
151:26 - wonderful so let's get to adding some
151:28 - data I'm going to do this using the
151:31 - document API to help us with this we can
151:34 - actually use the Swagger UI to make it a
151:36 - lot more visual so just go ahead and
151:38 - click on this link right here and that
151:40 - will load some Swagger documents for us
151:42 - in order to create our first collection
151:44 - that's going to install our quiz so
151:47 - let's go ahead and create an empty
151:49 - collection in a namespace I'm going to
151:51 - try it out and all of this has been also
151:53 - generated for me so that's great and
151:55 - we're just going to put in the namespace
151:57 - or key space which we called quizzes
151:59 - okay and I'm going to create a
152:01 - collection in here and the name of this
152:04 - collection is going to be quirky
152:07 - quizzes okay so imagine we're about
152:09 - speed and you know they have like a
152:11 - whole bunch of quizzes and they've
152:13 - decided to split them out into
152:15 - collections uh this collection is going
152:18 - to be called funky quizzes and it's
152:19 - going to store all our funky quizzes
152:21 - okay I'm not saying this is the way
152:23 - BuzzFeed do it I'm just doing it this
152:25 - way for the sake of tutorial but you can
152:27 - choose to organize your data however you
152:29 - wish
152:30 - so
152:31 - quirky quizzes is what our collection is
152:35 - called make sure to actually put this in
152:37 - double quotes too and let's go ahead and
152:39 - execute this
152:42 - and great we get a 201 response that has
152:45 - worked so that is now the name of our
152:47 - collection let's grab it
152:51 - and then we're going to put an ID to
152:53 - create a new document in here try it out
152:55 - the name space is called quizzes The
152:58 - Collection is called quirky quizzes and
153:00 - we're going to put in our fast Json
153:01 - object which is going to represent one
153:04 - quiz I'm going to show you how I'm going
153:06 - to write this now in fact I'm actually
153:08 - just going to get a Json document up as
153:10 - I think will be easier and we can paste
153:12 - this thing here
153:14 - so let's go ahead and do that now I'm
153:17 - just going to get up my project and I'm
153:20 - actually going to make a new file in
153:22 - here called sample
153:24 - data.json okay and just add it like so
153:28 - now for our sample data well we're going
153:31 - to have to create an object as this
153:32 - object is going to represent one quiz
153:36 - and each quiz is going to have its own
153:38 - ID so I'm going to give it the quiz ID
153:40 - and I'm just going to make this up so
153:43 - let's just go ahead and give it a random
153:45 - ID and then we're also going to have the
153:47 - title of the quiz on this occasion it's
153:50 - going to be what cheese are you question
153:54 - mark and also we're going to have a
153:56 - subtitle
153:57 - if I can only spell subtitles
154:03 - wow uh and then this is going to say
154:06 - which
154:09 - uh and then this is gonna say this quiz
154:11 - isn't
154:13 - cheesy or anything like that dot
154:19 - okay so there's our subtitle next we're
154:21 - going to have the actual content for the
154:23 - quiz okay and the content is going to be
154:26 - made up of an array of three different
154:31 - questions okay three questions to find
154:35 - out what cheese we are so there's one
154:37 - question
154:38 - and each question is going to have an ID
154:40 - which is going to have a integer value
154:43 - it's also going to have some text which
154:46 - is going to be pick a vacation
154:50 - destination for the fast
154:53 - question and then it's going to have the
154:55 - actual questions associated with that so
154:59 - there we go the question options are
155:02 - going to be
155:06 - New York for the first one so New York
155:09 - is our fast vacation destination so
155:12 - let's just put text
155:13 - New York
155:16 - and then we're also going to have an
155:18 - image associated with it that I've taken
155:20 - from unsplashed so I've actually
155:23 - pre-made this already so that we don't
155:25 - have to you know sit here while I search
155:28 - for images because that would be pretty
155:29 - boring so here it is this is what it
155:32 - looks like and we can get it by actually
155:33 - visiting on splashed searching for New
155:36 - York and then all I would do is right
155:38 - click this and copy the image address
155:41 - okay so that's all I've really done
155:44 - okay
155:45 - great
155:46 - so let's just get rid of that for now
155:50 - and paste in the original image that I
155:52 - found so we've got the text we've got
155:55 - the image I'm also going to have to give
155:57 - this alternative text as you know we
155:59 - really should do that uh on images for
156:02 - the visually impaired photo of Empire
156:08 - state
156:09 - building during
156:12 - daytime
156:14 - okay so that is just some alternative
156:17 - text that I have given and we also have
156:19 - to credit this right as we are taking
156:22 - this from unsplashed it is essentially
156:25 - free and they have requested that we
156:27 - credited so Oliver
156:29 - niblet get some credit that we're gonna
156:32 - display
156:33 - so there is my Essential first
156:37 - um
156:42 - question option we're going to have
156:44 - another one we're actually going to have
156:46 - four in here that I have pre-made so I'm
156:48 - just gonna copy them in here to save as
156:50 - time the next one is going to have
156:52 - Austin as an option and then we're also
156:55 - going to have another option which is
156:57 - Portland so I'm just going to copy this
157:00 - because I pre-made it and there we go
157:02 - and then here's our fourth one our
157:04 - fourth one is going to be New Orleans so
157:06 - I'm just going to copy that and paste it
157:09 - in
157:10 - like so
157:13 - okay so that is our array of content
157:16 - essentially let's just check this works
157:19 - they feel I've messed something up
157:20 - already
157:22 - so questions should end here
157:28 - so that is finishing and then we've got
157:31 - an object
157:33 - in an array okay and then that array is
157:39 - in an object itself so great so there we
157:41 - have it so questions those are our
157:44 - questions great
157:47 - for our first question object which
157:49 - finishes that and now we're going to of
157:51 - course have another one so yes we're
157:54 - going to have an ID this time the ID is
157:56 - going to be one the title of this is
158:00 - going to be
158:04 - pick a
158:06 - um
158:09 - and then of course we're also going to
158:11 - have some questions
158:14 - okay which is going to be an array
158:17 - some questions
158:21 - and then
158:23 - all right
158:24 - great
158:27 - so just like with the first one I'm
158:29 - going to have
158:30 - one option for picker home which is a
158:32 - traditional home then we're going to
158:34 - have another option which is a modern
158:37 - home
158:38 - and then we're going to have a third
158:40 - option which is a house with some trees
158:43 - next to it I call just a white house I
158:45 - guess and then some house in the
158:48 - mountains so there we go and then we
158:51 - have one more
158:55 - question objects which is going to have
158:57 - an ID to this time a title
159:03 - of
159:05 - pick
159:06 - some food so we are obviously going to
159:09 - decide what we are by some food in fact
159:12 - I'm going to swap these out because I
159:14 - think in the other tutorial that I did a
159:17 - simplified version of this pick your
159:19 - food was the second question and then we
159:23 - finished on picking a home it doesn't
159:24 - really matter it's just because I want
159:26 - to keep it consistent with another
159:28 - tutorial that I did so pick some food
159:30 - and then the questions for this are
159:32 - going to be when it's an array
159:35 - and again we're going to add an object
159:38 - that's going to represent a pizza choice
159:40 - because you can choose a pizza and then
159:43 - another option which is going to
159:44 - represent a sandwich Choice and then
159:47 - another option which is going to
159:48 - represent some pasta so let's just wipe
159:51 - that in and then a last option that's
159:54 - going to represent a hamburger
159:57 - okay so great so there we go we have all
160:01 - of our three
160:03 - question objects which live in the
160:07 - content of the question and now we're
160:10 - going to have the answers
160:13 - so answer is essentially just going to
160:15 - be
160:16 - um objects representing different types
160:18 - of cheese based on a combination that we
160:21 - have chosen of the three questions so
160:24 - there's actually going to be 60 okay
160:26 - there's going to be 60 answers to cover
160:29 - all the combinations that we have so our
160:31 - first object we're going to have a
160:35 - combination It's a combination which is
160:38 - going to be made up of an array of let's
160:41 - say someone picked New York and then
160:43 - they picked
160:44 - pizza and then they picked traditional
160:48 - for the home well if they pick these
160:51 - three combination if they picked these
160:54 - three I have said that I want them to be
160:58 - blue cheese okay great and the image
161:02 - that they give back is a picture of some
161:04 - blue cheese that I found again on
161:06 - unsplashed so I'm just going to whack in
161:10 - that image like so
161:13 - okay
161:14 - great and then we also have some
161:17 - alternative types of glitches
161:19 - so that's one answer I'm not going to
161:21 - make you sit here while I write out all
161:23 - 60 because I'm not sadistic and I'm sure
161:27 - you have better things to do so I'm just
161:29 - going to share this file in the video
161:31 - description okay so you can take it just
161:33 - copy the contents of this file
161:35 - so there we go we have paneer we have
161:38 - Ezra we have Danish blue we have manure
161:42 - we have so many cheeses
161:44 - I seem to have used title instead of
161:47 - text for the two question objects so
161:50 - let's go ahead and change that and here
161:55 - so once that is done or you've decided
161:58 - to just take the file content of my file
162:01 - I'm going to copy all of it this is
162:03 - essentially one quiz item right this
162:06 - object is one quiz and I want you just
162:08 - to paste it in like so and then I'm
162:11 - going to ask you to just execute
162:14 - okay so there we go that is a lot of
162:19 - data but as you can see that has worked
162:21 - you get a 201 code and our object now
162:24 - has a document ID so this is great we
162:27 - have added that into our database
162:31 - great
162:33 - so now we actually need to communicate
162:35 - with this database so that's what our
162:37 - server.js file is for it's going to get
162:39 - rid of the sample data for now
162:41 - so what was in our server TS file
162:45 - well we're going to have to import
162:46 - Express
162:48 - as well as the request and response type
162:53 - from it
162:55 - so from Express
163:00 - just like
163:01 - so making sure it's built everything
163:03 - correctly import Express as well as
163:07 - request and response from Express and
163:10 - now I can use Express
163:13 - and call it to release all of its
163:15 - wonderfulness and I'm going to save it
163:17 - as the const
163:19 - app just like so
163:21 - and now another thing I'm going to do is
163:25 - actually uh use app
163:28 - and then app of course that's Express's
163:31 - wonderfulness and express comes with
163:33 - something a method called listen and I'm
163:35 - going to listen out for changes to my
163:37 - port so let's go ahead and Define a port
163:41 - let me do so here cons Port equal
163:46 - and I'm going to say 8 000. so that's
163:47 - what I want my server to run on so all
163:50 - I'm going to do is just say that we're
163:53 - going to listen up to the port and we're
163:54 - going to console log
164:00 - server is running on Port
164:07 - and then whatever the port
164:10 - is
164:12 - great
164:14 - so now if we get up our terminal we're
164:18 - actually going to run this script
164:21 - so
164:23 - get up our terminal npm Run start back
164:26 - end
164:28 - uh it would seem we need to download TS
164:32 - node as well so just go ahead and
164:34 - install that package
164:36 - but also also going to have to install
164:40 - types Express
164:42 - and at types
164:45 - node
164:51 - which means we don't actually need this
164:52 - Express package anymore so delete that
164:57 - and reinstall everything
165:02 - and under module we're going to just
165:04 - change this to
165:06 - common Js
165:08 - click save
165:10 - and now just hit npm Run start back end
165:13 - and great
165:15 - I think we should we should technically
165:17 - be getting rid of you know stuff like
165:19 - this and we will just get rid of that
165:21 - and Jess as we're not doing any tests or
165:24 - anything like that I think that should
165:27 - be it testing Library let's get rid of
165:29 - those
165:34 - and I think that should be fine
165:37 - great so that is now running on our Port
165:40 - let's carry on I'm just gonna get rid of
165:43 - this and get rid of this
165:46 - great
165:48 - so now we're going to use app get and
165:51 - we're going to pass through a path or an
165:53 - end point and let's just go ahead and
165:55 - call this quiz item to get one quiz item
165:58 - and this is going to be an async
166:00 - function in which we're going to have
166:02 - the request which is a request type and
166:06 - a response which is a response type
166:07 - which we have imported from the package
166:10 - express and what we're going to do is
166:13 - try
166:15 - and then we're going to essentially use
166:16 - axios to get a
166:20 - resource from the following URL so let's
166:24 - go ahead and actually import axial so
166:26 - import axios as well as the axios
166:29 - response type so axios response type
166:34 - from
166:36 - response from axios okay I think we've
166:41 - already installed axios but I can't be
166:44 - sure so let's just go ahead and install
166:45 - again axios I'm just being lazy I could
166:48 - have actually just looked in here and
166:51 - there it is
166:52 - okay so we have axios in here so now we
166:57 - can use axial sket and the URL that we
167:00 - need to pass through is essentially the
167:02 - URL to get all our documents through
167:05 - such documents in a collection let's try
167:07 - it out and all I'm going to do is
167:10 - essentially pass through the name space
167:12 - so the namespace of the collection is
167:15 - called quizzes The Collection ID is
167:17 - called quirky quizzes so quirky
167:21 - quizzes with an underscore
167:25 - and we're just going to execute this and
167:29 - it will return my quirky quizzes Which
167:32 - at the moment only has one quiz so I'm
167:34 - just going to get this URL okay I'm
167:36 - going to get it like so and then
167:40 - I'm going to just paste it in okay so
167:45 - that's the URL that I am so I should get
167:47 - it okay
167:52 - just disable that hint so you don't
167:55 - confuse it as code
167:57 - so great we have the URL it should end
168:01 - with quirky quizzes and that will get us
168:03 - all our quizzes
168:05 - okay and we are gonna pass through
168:10 - some headers as well so let's put a
168:13 - comma and make an object and we're gonna
168:16 - pass through the headers so headers
168:20 - of
168:22 - X Cassandra token so essentially
168:25 - everything we see here x Cassandra token
168:27 - the header X Cassandra token let's grab
168:30 - that I'm just going to paste it in like
168:32 - so
168:34 - um so let's just make sure to make
168:35 - everything kind of consistent I'm just
168:37 - going to give everything single quotes
168:43 - and our X Cassandra token is going to be
168:45 - the one that we saved at the beginning
168:46 - so go ahead and find your token
168:51 - and just paste it in like so for now
168:54 - okay so that's one thing we need to pass
168:56 - through and the second thing we need to
168:58 - pass through is accept application Jason
169:01 - so just copy that and put it in
169:04 - and put this in
169:07 - single chords as well
169:09 - so so those are my headers and we are
169:13 - going to have to await this as this
169:16 - returns a promise and whatever comes
169:18 - back I'm going to save as a response
169:20 - this also has the type of axios
169:25 - okay so that is a typescript thing
169:28 - great
169:30 - now if the response which I know is an
169:34 - object an object that has a status and
169:37 - if that status equals 200 well we know
169:40 - that everything essentially has worked
169:43 - right
169:44 - so we're going to get the response and
169:46 - get the data which is also linked to
169:48 - that object await it and save this as
169:52 - quiz
169:54 - item
169:55 - okay and we actually can write a type
169:58 - for this or an interface so let's go
170:01 - ahead and do that in fact let's maybe
170:04 - wait a little bit just know that we're
170:06 - going to actually Define the type of
170:08 - quiz item and what it's made up of
170:11 - uh the other thing we actually need to
170:14 - do is also set a header so set
170:17 - had a
170:19 - access
170:24 - control allow origin and I'm just going
170:27 - to allow
170:29 - http
170:33 - localhost
170:35 - 3000 so essentially our front end again
170:37 - I'm just going to disable these hints
170:40 - okay as I don't want you to get confused
170:42 - and think they are good
170:44 - and I'm also just going to send
170:47 - the quiz item
170:49 - to localhost 8 000 as well
170:53 - otherwise I'm just going to catch any
170:57 - errors and console log them out so
171:00 - console login error
171:03 - okay we can actually pass that through
171:04 - the console error
171:07 - great so let's check this out right I'm
171:10 - now going to visit
171:11 - localhost
171:14 - 8000 forward slash quiz
171:18 - item
171:20 - and ta-da we are getting the same days
171:23 - about that we are seeing here we're
171:25 - getting all of our quirky quizzes
171:27 - however if I just want to get the first
171:30 - one okay we only have one in here so I'm
171:33 - just going to go ahead and get the first
171:35 - one really
171:39 - so I'm just gonna do that I'm gonna go
171:42 - into the data and I'm going to grab the
171:45 - objects by its document ID so just
171:49 - like
171:51 - so but we're going to hard code in here
171:53 - okay once again I'm just going to put in
171:56 - single
172:00 - quotes
172:01 - so now what we are doing because we knew
172:04 - the document ID of the quiz item when we
172:07 - created it okay that was its documented
172:09 - D what I am doing is in my back end just
172:12 - looking in my collection of quirky quiz
172:15 - items and looking in the data of that
172:18 - and I'm looking in the data to find the
172:21 - document ID of this and then I'm
172:25 - returning the whole object so this is
172:27 - what it looks like now we get the
172:30 - answers we also get the
172:34 - quiz ID the subject of the title and the
172:37 - actual questions themselves too so all
172:40 - our data is here okay even though
172:44 - backwards to how we entered it but it's
172:46 - that
172:47 - great so now let's move on we don't need
172:50 - the Swagger UI anymore and we don't need
172:53 - this either
172:55 - wonderful so also our server is nearly
172:59 - done I just want to actually create some
173:01 - interfaces so that we can essentially
173:04 - assign types to the quiz item fragments
173:09 - if that makes sense I'm just going to
173:11 - create a new file and here it's a new
173:14 - file I'm going to quote interfaces
173:17 - dot TS to make sure that it's a
173:19 - typescript file
173:22 - and hit enter
173:25 - okay great and now I'm going to define
173:28 - the interfaces that make up our quiz
173:31 - item
173:32 - so the first interface we're going to
173:34 - have is the quiz data that makes up our
173:36 - individual quiz as we know it has a
173:39 - title which is a string it also has a
173:43 - subtitle which is also a string and a
173:47 - quiz ID
173:50 - as you will see here
173:52 - there is a quiz ID which is also a
173:55 - string so let's go ahead and put that as
173:57 - a string
173:59 - next up we also have these questions
174:04 - right so each question block is made up
174:07 - of an ID and then multiple questions and
174:11 - then we also have answers which again
174:13 - can also be made up of a interface right
174:17 - because they are all kind of the same
174:20 - and we want to make sure to keep the
174:22 - same types assigned to each property
174:25 - so let's go ahead and do that
174:29 - we're gonna have
174:32 - content
174:37 - which is going to be made up of an array
174:39 - of content and we're also going to have
174:45 - answers
174:47 - which is going to be made of the answer
174:49 - interface
174:51 - as an array let's maybe go ahead and do
174:55 - the uh answer interface first so
174:58 - interface answer just like so
175:02 - and each of these when it comes with
175:05 - some text which is a string an image
175:07 - which is also some string a combination
175:14 - which is actually an array of strings so
175:16 - I'm just going to put string as an array
175:20 - and some alternative text to the image
175:23 - which is also a string so that's my
175:27 - answer interface next up we also have a
175:30 - Content interface so interface content
175:34 - and let's go ahead and Define our
175:36 - content well our content let's have a
175:39 - look here
175:41 - foreign
175:42 - object
175:45 - so let's call this a question perhaps
175:49 - so literally the content is just going
175:52 - to have
175:54 - an ID
175:56 - and questions and I think it has some
175:59 - text too it also has some text which is
176:01 - a string so ID which is actually a
176:04 - number some text which is a string and
176:08 - then questions
176:11 - which I'm going to say as a question
176:14 - interface I'm going to make that
176:15 - interface now interface question
176:18 - let's get rid of these
176:21 - and the question interface is made of
176:24 - some text which is a string
176:28 - image credit and opt they're all strings
176:30 - so this should be easy
176:33 - image string
176:35 - alt string and then the final one is
176:38 - credit
176:40 - which is a string
176:42 - so there we go that's all the interfaces
176:46 - that we need
176:48 - let's go ahead and Export them all so
176:51 - export
176:53 - quiz data
176:58 - answer
177:04 - content and question
177:09 - making sure that's an export type
177:12 - great so now in here
177:14 - I'm actually going to import
177:16 - the quiz data
177:21 - from
177:26 - interfaces
177:28 - and use it as the response
177:32 - to this so quiz data
177:36 - and wonderful so that is our first
177:39 - custom interface or custom type that we
177:43 - made
177:44 - let's move on
177:46 - it's going to try and minimize this so
177:48 - you can see the whole file now while we
177:51 - are here I'm just going to create a DOT
177:52 - DMV file so create a new file called dot
177:55 - EnV so you can store all of our
177:58 - sensitive data so that we don't upload
178:01 - it onto GitHub and for this I'm going to
178:03 - have to insert a new package so import a
178:06 - new package called dot EnV so just go
178:09 - ahead and import that package and we're
178:12 - going to actually use it in here so
178:14 - import
178:17 - or as dot Envy
178:20 - from dot e and V
178:24 - and then dot EnV config
178:27 - just like so and now that means that I
178:31 - can actually get this whole token the
178:33 - sensitive token and store it here so the
178:37 - token equals
178:38 - like so and in here I can just use
178:42 - process dot EnV token like that and now
178:47 - that will work
178:50 - we can also do the same for the URL so
178:52 - let's go ahead and grab this URL I'm
178:55 - just going to paste it in here
178:59 - like so by putting in here I'm saying
179:02 - that you know this is a string it's
179:04 - implied it's a string and I could just
179:07 - use process NV dot URL in order to get
179:12 - that URL
179:14 - okay so for some reason this is picking
179:16 - up the URL I can see that here but
179:21 - I'm still getting errors so what I'm
179:23 - going to do is just suppress this for
179:25 - now
179:27 - and then come back to this later so
179:29 - suppress with TS ignore okay and save
179:32 - that and just check this still works
179:35 - and great
179:38 - cool so let's move on
179:41 - so that's our server done we were just
179:44 - about to create our components so let's
179:47 - go ahead and
179:50 - start with the app
179:52 - again and then pass through the days
179:54 - that we need for our title but to do
179:56 - that we're of course going to have to
179:57 - you guessed it get the data so our
180:00 - interface is now also done let's remove
180:02 - that EnV is done our package.json is
180:04 - done on our TS config is done
180:08 - let's go write a function to fetch our
180:11 - data so I'm going to call this fetch
180:12 - data and it is an async function so I'm
180:15 - just going to use the async keyword and
180:17 - in here we're going to try
180:20 - to get that data so I'm going to use the
180:23 - fetch API and I'm going to pass through
180:26 - this URL right here so localhost 8000
180:30 - and then the endpoint to get my quiz
180:32 - item and I'm going to await this as it
180:35 - will return a promise I'm going to save
180:37 - this to the constant response just like
180:40 - so and once we have that I'm going to
180:43 - get the response and get it to Json okay
180:46 - and again I'm going to await this as
180:48 - that returns a promise and save the
180:51 - response as Json so that we can use it
180:55 - okay and then all I'm going to do is get
180:58 - that Json and set it up here so I'm also
181:01 - going to have to import
181:04 - use State and use effect
181:11 - from react and I'm going to
181:16 - save the Json as well let's just call it
181:19 - quiz
181:21 - right this is the quiz that's coming
181:22 - back to us and set quiz and we're going
181:26 - to start off with the state
181:30 - being no right now
181:34 - so just empty and I'm going to say that
181:38 - these State types we can have are going
181:41 - to be the quiz data so we're gonna have
181:44 - to import the quiz data interface quiz
181:47 - data
181:52 - or null as we're going to start off with
181:54 - now so let's go ahead and import that
181:57 - interface import
182:00 - quiz data
182:03 - from
182:05 - interfaces okay so that we can use it
182:09 - so I'm now going to do set quiz to set
182:14 - the cons of quiz
182:16 - to be whatever the Json is in value okay
182:20 - so it starts off of being null
182:23 - and then we use set quiz in order to
182:25 - change it to be the quiz data
182:29 - right
182:32 - and of course we're going to catch any
182:35 - errors if there are any
182:39 - I'm going to console
182:41 - error of the error great once again I'm
182:45 - just going to disable this hint so it's
182:47 - not confusing for you
182:49 - awesome so we've written our function
182:51 - now I'm going to use use effects in
182:53 - order to call it
182:55 - as many times as we need in order to get
182:58 - that data back I'm just going to pass
182:59 - through an entry dependency and I'm
183:01 - going to call fetch data in here and I'm
183:04 - also going to consult log
183:06 - the quiz to see if we get that back of
183:10 - course we need to actually start our
183:11 - front and two so let's go ahead and do
183:14 - that in the second tab I'm going to do
183:16 - npm run
183:17 - start and then front end as a script we
183:21 - wrote oops I misspelled it front end and
183:24 - just hit enter
183:26 - okay so that should start up our front
183:28 - end on localhost 3000 I'm just going to
183:30 - inspect this and see the console log as
183:34 - I'm hoping our quiz comes back and it
183:36 - does okay so there's our quiz item uh it
183:39 - has a title a subtitle quiz ID content
183:41 - and the answers we're going to pass
183:43 - through the title and the subtitle into
183:45 - the title element so let's go ahead and
183:48 - do that here title and I'm going to pass
183:50 - through the quiz if it exists title as
183:54 - well as the subtitle if it exists
183:57 - subtitle okay
184:00 - great and let's just close off that
184:02 - component once more
184:05 - so what I am going to do now is on the
184:09 - title I'm going to destructure the title
184:12 - and these subtitles that we can use it
184:14 - in here
184:16 - and the types for each well the title
184:20 - has to be a string which we can actually
184:22 - take from quiz data and search for the
184:25 - title as that interface has the title
184:30 - property which has a type of string
184:33 - attached as the value so again I'm just
184:36 - using stuff I already have so the
184:37 - interfaces are coming in quite useful
184:39 - for the button and the front end and of
184:41 - course we're also going to have a
184:44 - subtitle as well so we're going into the
184:46 - quizzes object and finding the subtitle
184:49 - two so it can be this or it can actually
184:52 - be undefined as well
184:55 - okay so just go ahead and do that
184:58 - because on the first run it will most
185:00 - likely be undefined as you know we might
185:02 - not have our quiz uh come through
185:04 - quickly enough
185:06 - great so now that we've done that I'm
185:08 - just going to add an H1 tag that has our
185:10 - title and a p element that has a
185:14 - subtitle and close off this div
185:17 - wonderful so now if we look in here we
185:20 - get our title and we get our subtitle
185:22 - this is looking good
185:25 - so that is not it for our title let's
185:28 - carry on
185:31 - next up in the app I'm just going to
185:33 - actually map out all my quizzes content
185:38 - onto questions blog so multiple ones
185:41 - that are going to hold each question we
185:43 - have like what's your favorite vacation
185:45 - spot pick a favorite food and so on so
185:47 - let's go ahead and get that questions
185:49 - block questions block
185:53 - so there it is and I'm going to import
185:56 - it
185:57 - so import
185:59 - questions block from questions block
186:05 - and I did say that for each quiz
186:09 - content
186:11 - I'm going to map out
186:13 - onto the questions
186:16 - lock
186:19 - and what I'm going to map out is I'm
186:21 - just going to put this on a new line
186:23 - actually
186:25 - to make it a little bit more readable so
186:28 - if this exists
186:30 - we're going to map out let's get rid of
186:33 - the hinge
186:35 - each piece of content individual
186:40 - which has the type of content
186:45 - okay
186:47 - we're gonna have to import that
186:48 - interface from the interfaces
186:52 - page as well
186:53 - okay because we did pre-define it so now
186:56 - we can use it
186:59 - so that content well I'm going to pass
187:02 - this through as a quiz item
187:04 - okay so that it's a bit more readable
187:07 - maybe as each question block is going to
187:09 - be made up of the quiz item and I pass
187:12 - that through as the content
187:15 - and also going to have to give this an
187:17 - ID so let's go ahead and just use the
187:20 - content ID for this so ID
187:33 - and I can just use the
187:36 - questions block ID for this as you can
187:38 - see here
187:43 - so I'm going to go into content
187:48 - and get the ID from it
187:51 - okay
187:55 - great
187:57 - so now this I also need to give a key
188:00 - which I'm going to pass through as the
188:03 - ID
188:06 - and as you can see if I hover over it
188:09 - the content ID is the type of number so
188:11 - that is good
188:14 - okay so now we need to pause three of
188:16 - these things into the questions block
188:18 - I'm just gonna pick out the quiz item in
188:20 - fact so let's get up our components and
188:22 - get the questions block
188:24 - and I'm just going to pass through the
188:26 - quiz item
188:29 - and the type of this
188:32 - well let's just put this on a new line
188:38 - the quiz item is going to have a type of
188:44 - content
188:47 - so again I'm just using the interface
188:49 - for this which means it means to import
188:50 - the content
188:53 - interface
188:55 - from
189:00 - interfaces
189:06 - the quiz item is now an ID a text that's
189:09 - a string and the questions which is made
189:11 - up of the questions interface
189:14 - and what we're going to return is just
189:16 - two empty elements so an empty element
189:18 - sorry and with an H2 element that's
189:23 - going to hold our
189:25 - quiz item title and I'm actually going
189:28 - to also give this an ID as I'm going to
189:31 - want to pick this out by the ID later so
189:33 - that we can scroll to it and this is
189:36 - going to be the quiz items ID
189:41 - right as the content or the interface
189:44 - right here does have an ID we can use
189:46 - which is a number however we can't
189:49 - assign a number to an ID so I'm going to
189:51 - have to turn this into a string so that
189:54 - the ID attribute can use it
189:56 - great
189:59 - and at the same property title does not
190:01 - exist on content why is that
190:05 - let's have a look in here
190:07 - that's because it's text
190:09 - so that's a great little helper for us
190:12 - we're going to use text so we've got the
190:14 - H2 element
190:16 - and great we get all three texts of each
190:21 - of the content objects so pick a
190:23 - vacation destination pick some food and
190:25 - pick a home let's carry on next under
190:29 - each one of these I actually want to
190:30 - show four of the options that we added
190:32 - okay so each of the four questions
190:34 - associated with each object so let's do
190:37 - that next
190:39 - to do this I'm actually going to map
190:41 - that out onto a question block so let's
190:44 - go ahead and import
190:48 - question
190:52 - lock
190:54 - from question block so we're in the same
190:57 - location as it and I am going to
191:00 - essentially map this out I'm actually
191:02 - going to create a div faster and that
191:05 - div is going to have the class name
191:12 - of
191:17 - questions container
191:23 - and then for each quiz item
191:26 - questions so if quiz item exists
191:31 - and for each of the questions I'm going
191:33 - to map each question
191:36 - which has the type of requestion
191:39 - interface
191:41 - which we're going to actually
191:43 - import
191:46 - from the interfaces so the question
191:48 - interface let's have a look at it one
191:50 - more time here is the question interface
191:54 - as text image or on credits or as
191:56 - strings
191:57 - and we're going to map that onto the
192:00 - question
192:02 - block
192:03 - element
192:05 - okay
192:06 - great
192:07 - I'm also going to have an ID which is
192:11 - the type of number
192:13 - or maybe let's just put the index like
192:15 - so I'm going to comment that like that
192:18 - because we're not really going to use it
192:21 - so this means that we need to give this
192:23 - a key which is going to be the index
192:26 - that I am not using I'm also just going
192:29 - to pass through the whole question right
192:30 - onto the question block
192:33 - let's get rid of this
192:35 - also make sure not to use curly braces
192:37 - here
192:39 - great
192:40 - so now on the question block
192:43 - I'm going to de-structure the question
192:48 - which has the type of question which I'm
192:52 - actually going to move this as I know
192:54 - we're going to have a few more props to
192:58 - pass through here so I'm just going to
193:01 - do it like so and I'm going to say that
193:02 - question as a type of question
193:08 - foreign
193:10 - otherwise interface which we're going to
193:12 - have to import so import question
193:15 - interface from the interfaces
193:19 - file
193:24 - and this time on the question I'm
193:26 - actually going to return a button right
193:27 - as we want to click on each one of the
193:30 - buttons
193:31 - and in fact let's actually give it an
193:33 - opening and a closing tag as we're going
193:36 - to want to put other stuff in this
193:37 - button so button
193:39 - right and in the first
193:43 - tag I'm just going to pass through the
193:47 - class name
193:48 - because I'm going to want to style it up
193:50 - I'm going to give it the class name of
193:52 - question block
193:56 - and then on click of this well I'm going
193:59 - to want to handle the clicks I'm just
194:01 - going to write a function called handle
194:03 - click
194:04 - which we're going to Define up here
194:08 - again also in the button what I'm going
194:10 - to want to add a few things right I'm
194:13 - actually going to put in an image which
194:15 - is going to have the source of the
194:17 - question that we're passing through
194:20 - image and the alternative text that
194:23 - comes with it which comes with a
194:26 - question object is Alt
194:29 - and then we're going to have an H3
194:31 - element which is just going to have the
194:33 - question text
194:37 - as well as a p element which is going to
194:40 - have two anchor tags so just like so one
194:44 - two the first one is going to take us to
194:48 - the URL of the image which is actually
194:50 - also stored in the object as image and
194:54 - as the text I'm just gonna actually put
194:57 - whoever took this so I'm going to get
195:00 - the credit that is associated with the
195:03 - question object
195:05 - okay so if we look in here question
195:08 - credits actually I think it's credit
195:11 - though is it credits or credit what does
195:14 - it say in our sample data it's credit so
195:16 - just change that to be credit just like
195:19 - that
195:20 - great and that will get rid of those
195:21 - cardio lines
195:23 - and in the next one the href I'm
195:25 - actually just going to put https
195:31 - for www dot
195:34 - unsplash
195:36 - foreign
195:38 - [Music]
195:46 - okay
195:48 - and then a space here
195:50 - just so the two whites aren't so close
195:52 - together
195:53 - great
195:55 - out
196:00 - I'm just going to rerun this as doesn't
196:03 - seem to be registering my change in the
196:05 - interfaces
196:12 - and great okay so I'm just going to
196:14 - inspect this once again so we can get up
196:16 - our console log but essentially we've
196:18 - done it okay we have got a question
196:21 - object pick a vacation and it shows us
196:23 - four options as well as you know who
196:25 - took it and where to find the image and
196:27 - then pick some food and then pick a home
196:29 - so now before we do anything else let's
196:32 - take a break and do some styling okay
196:35 - let's do it
196:37 - so let's get up our index CSS file
196:42 - right here
196:44 - and perhaps let's just minimize all of
196:46 - this
196:47 - for now
196:48 - great
196:50 - so first off I'm just going to go to
196:52 - Google fonts as I want to import a font
196:54 - called Montserrat so just go ahead and
196:58 - go here and then all I'm going to do is
197:01 - simply search for the font
197:03 - called Montserrat so this is it I'm just
197:07 - going to select a few line weights so
197:09 - you can do the thin one you can do the
197:11 - 300 one the 400 the 500 it's up to you
197:15 - and then what I'm going to do is import
197:16 - it with this option so I can import it
197:19 - into the CSS file so go ahead and copy
197:21 - all of that and just whack it in like so
197:23 - and this just means that now I can use
197:25 - the font family so I'm going to say that
197:27 - everything star means everything is
197:30 - going to have the following font family
197:31 - and that is font family Monster Rat so
197:34 - I'm just going to copy this let's get
197:36 - rid of that for now and I'm just going
197:37 - to paste it in like so
197:39 - and that's it now I'm going to Center
197:42 - everything horizontally and to do this
197:44 - I'm going to use display
197:46 - Flex
197:48 - justify content Center to Center
197:51 - everything horizontally
197:54 - now I'm going to actually give my app
197:58 - the class name of
198:01 - app okay so that I can pick it up a DOT
198:05 - for class name and all I'm going to do
198:07 - is just give it a width of 600 pixels
198:10 - next up I am also actually going to
198:17 - say that I want every single H1 element
198:19 - that I have used to have the font size
198:22 - of 2.5 RM
198:25 - and a line height of
198:29 - 1.05 and text aligned to be
198:34 - left
198:35 - okay so that's all my H1 elements and
198:38 - all my H2 elements that I use in this
198:41 - app are going to have the font size so
198:43 - this is standardizing all of these fonts
198:46 - 3.5 Ram
198:48 - a line height of again 1.05 and text a
198:54 - line this time the center
198:56 - okay
198:57 - and any H3 element that I use is just
199:00 - going to have a margin of 10 pixels I'm
199:02 - going to keep the default sizing
199:05 - any P element is going to have the font
199:07 - size of 1.125 Ram this time and a line
199:12 - height
199:14 - line height
199:16 - of 1.2
199:18 - okay
199:20 - great
199:21 - so there we go we've just changed up a
199:24 - little bit for now
199:27 - wonderful next let's style up the title
199:31 - blocks so this is going to be on the
199:33 - questions block
199:35 - I'm going to give this specific H2
199:38 - element the class name of
199:41 - title
199:44 - block
199:46 - be sure to spell that the right way and
199:48 - this time I'm going to pick out the
199:50 - title
199:52 - block
199:54 - just like so and all I'm going to do is
199:58 - make sure that it has a width of 600
200:01 - pixels
200:03 - I'm going to hard code a height of 210
200:06 - pixels so they're all consistent and
200:07 - give it a purple color as the background
200:09 - color so RGB is one I picked out earlier
200:13 - 69 221
200:16 - okay great and let's round it off so I'm
200:19 - going to give it a border radius of 5
200:21 - pixels and I'm also going to Center
200:23 - everything so display Flex
200:26 - justify content Center to Center
200:29 - everything horizontally on this occasion
200:31 - and I'm gonna align it vertically two by
200:34 - using align content Center or align item
200:37 - sorry I should say and we've given it a
200:39 - height so we'll Center it to this height
200:41 - and I also want the font to be white so
200:44 - I'm just going to pass through the rgb4
200:46 - right
200:49 - next I'm also going to grab the
200:52 - questions container that contains all
200:55 - the questions okay all four of my
200:57 - questions for each question block and
201:00 - I'm going to use display flags and then
201:03 - I'm going to make them wrap over each
201:05 - other so Flex wrap wrap so they're not
201:08 - stacked and I'm going to also justify
201:10 - the content between them space between
201:13 - so that they just look a little bit
201:15 - better okay
201:18 - uh and we also have to actually use this
201:21 - class name on the questions container so
201:23 - in the questions block
201:31 - okay this should say questions container
201:34 - as that's what we call the here
201:35 - questions container and now let's also
201:38 - style each of the question blocks so
201:41 - let's grab this button that has the
201:43 - class of question block I'm just going
201:45 - to remove any default styling from it
201:47 - really I'm going to do border none let's
201:51 - see what this looks like
201:53 - okay so that's what it looks like at the
201:56 - moment
202:00 - it is a little bit big so let's make
202:02 - them a little bit smaller I'm going to
202:05 - hard code their width as 286 pixels and
202:09 - our height as 286 pixels too so they're
202:12 - like little squares and great you will
202:15 - see they are wrapping over each other
202:16 - the images are kind of going over so I'm
202:19 - also going to do overflow hidden
202:21 - overflow hidden and that will stop the
202:24 - images from
202:26 - leaving these squares
202:29 - wonderful so this is looking so much
202:32 - better let's continue doing some styling
202:34 - we're losing some of the text here so
202:37 - what I'm also going to do actually let's
202:39 - get rid of the Heights I'm just going to
202:41 - get rid of that so that it just kind of
202:43 - lets it do its thing I'm also going to
202:45 - make the text smaller however let's
202:47 - finish off signing this question block
202:49 - first I'm going to actually give it the
202:51 - background color of white
202:55 - okay and instead I'm going to give it a
202:58 - box Shadow and also border radius so
203:00 - everything's going to be that little bit
203:02 - softer and box
203:04 - Shadow is going to be RGB a and I'm just
203:08 - going to make it black but then with
203:10 - 0.07 Alpha
203:14 - and I'm going to say I want 0 x axis
203:17 - Shadow 0 Y axis zero spread and one
203:21 - pixel blur so it's a very very light
203:24 - Shadow I also want all the text to be
203:27 - centered so it takes the line Center and
203:29 - let's just give it some more margin at
203:31 - the bottom 15 pixels margin on the
203:33 - bottom okay so now it looks a little bit
203:36 - more like this I it did say I want to
203:39 - make this text smaller but only the
203:41 - paragraph text inside the question block
203:43 - so any P elements inside the question
203:46 - block we're going to override the
203:48 - default key sizing
203:52 - I want to give it a font size
203:55 - of what did we make this one
203:58 - let's make it 0.5 RM I think that should
204:01 - be okay and font
204:04 - Style metallic
204:07 - okay maybe that's a bit small but I mean
204:10 - you can change it too whatever really
204:12 - you wish great and then maybe let's also
204:16 - give each of the a tags that live inside
204:18 - the question block text decoration
204:21 - none to get rid of that underlined uh
204:24 - color
204:27 - style as well as I'm going to give them
204:28 - a
204:29 - grayish color so color RGB three one six
204:34 - three one six three one six
204:37 - okay
204:39 - maybe a little bit
204:41 - darker
204:44 - okay I mean it's really up to you I
204:46 - don't think that's very readable so
204:47 - maybe let's get it
204:49 - wonderful
204:50 - so there we go and then let's also get
204:53 - rid of the padding on these so I'm gonna
204:55 - get rid of the padding on the question
204:58 - block padding zero
205:01 - great so now that we have that I think
205:05 - we're now ready to do the handle click
205:08 - for handling the clicks on all of these
205:10 - buttons what I really want to do is uh
205:14 - collect all the chosen answers and if it
205:17 - shows an answer is I guess attached to
205:21 - one of these question ideas so at the
205:24 - moment this one this whole block
205:27 - right here
205:29 - hold on
205:31 - let's try
205:33 - make these a little bit smaller
205:35 - so this
205:37 - questions object has the ID 0 this one
205:40 - has the od1 and this one has the id2
205:43 - let's also collect them so we can figure
205:45 - out which ones have been answered and we
205:48 - can also scroll to each of the topic so
205:50 - the highest ID that hasn't been answered
205:52 - so all of these things we're going to do
205:54 - there so I'm just going to get rid of
205:56 - that for now
205:57 - so let's handle that on click well cons
206:01 - handle click what do we want to do
206:06 - like I said we want to start collecting
206:08 - all the chosen answers so we're going to
206:10 - do that up here so I'm just going to do
206:13 - const chosen
206:16 - answer
206:21 - items
206:24 - and set
206:26 - chosen onto items
206:28 - I'm going to use state to say that this
206:32 - is an empty array to start with
206:35 - okay
206:36 - it's an empty array
206:39 - and this is going to take the types of
206:43 - string as an array as it's going to be
206:45 - an array of strings let's make this
206:48 - small
206:49 - and now we're going to use set chosen
206:52 - answers to override this empty array or
206:56 - in other words actually we're going to
206:57 - take that array and put stuff into it
206:58 - I'm going to show you how to do that in
207:01 - use state so this is going to happen on
207:03 - the question block which means we need
207:04 - to pass through that method all the way
207:07 - into here I'm going to do that here so
207:10 - handle click I'm going to set chosen
207:13 - answer items and we're going to get the
207:16 - previous
207:19 - state
207:20 - of the array
207:23 - and then we're going to destruction
207:25 - whatever's in there I'm going to put in
207:28 - the new item and on this occasion I just
207:31 - want to put through the question text so
207:34 - whether it's uh New York or Austin or
207:38 - Portland OR New Orleans that's what I
207:39 - want to put in my array so that is how I
207:41 - would do it well of course we need to
207:43 - pass this through from the app so it
207:45 - exists here so we're going to have to
207:47 - pass it through into the questions block
207:51 - just like so so I'm passing it through
207:54 - into here and then here I'm going to
207:56 - have to destructure it so let's just
207:58 - pass it through like so
208:01 - and
208:03 - this is going to be
208:06 - a function
208:08 - which I'm then going to pass through
208:10 - into the question block of course
208:12 - so there we go and on the question block
208:15 - once again destruction the prop
208:18 - so just pass it through and this of
208:21 - course is a function so now I can use
208:25 - that here of course we need to actually
208:27 - uh assign a type to this well this is
208:30 - going to be an array
208:32 - of strings
208:35 - so string array
208:37 - cool so now back in here if we console
208:42 - log
208:48 - The Chosen answer items
208:53 - where is this on the questions block I
208:56 - clearly missed
208:58 - an s
209:02 - let's get our consort log out
209:04 - so at the moment I'll raise empty but if
209:07 - I click on New York it will put the
209:08 - string of New York in there if I put New
209:10 - Orleans it'll be New York and New
209:12 - Orleans and then New York New Orleans
209:14 - sandwich and so on however we don't want
209:16 - this to happen really right if we click
209:18 - on one of these we want to disable all
209:20 - the others so that we can't put them in
209:22 - our array and to do this we're also
209:24 - going to have to collect the unanswered
209:27 - question ID so by questioning me this
209:30 - whole question object IDs this is zero
209:33 - this is one and this is two so to do
209:36 - this well once again on the app I'm
209:39 - gonna const
209:41 - uh what should we call this this time
209:43 - let's go ahead and call it unanswered
209:45 - question ideas on on swords
209:50 - question IDs
209:53 - set unanswered question IDs use State
209:57 - and the state of this to start off with
210:00 - um it's just going to be
210:02 - an empty array
210:06 - and this array is going to take numbers
210:09 - so an array of numbers
210:12 - just like so so once again I'm going to
210:17 - pass this through
210:20 - into the questions block
210:23 - so which means I need to de-structure it
210:25 - here
210:27 - and again this is a function so function
210:30 - and I'm just going to pass it through
210:32 - into the question block two
210:38 - which is on the question block once
210:40 - again I'm passing it through destruction
210:42 - of the prop and this is a function type
210:47 - great
210:48 - so on the handle click well we should
210:51 - actually in here first of all
210:56 - um we could go ahead and just say that
210:58 - to start off we have these three IDs as
211:02 - we have you know three question IDs or
211:05 - we can do it dynamically based on
211:06 - exactly how many questions we have I'm
211:09 - going to show you how to do that as I do
211:10 - think it's more interesting so to do
211:12 - this I'm just going to do it in a
211:14 - separate use effect so let's go ahead
211:17 - and do that here use effect
211:22 - and I'm just going to on um
211:27 - okay so we're going to get the quiz and
211:31 - if it exists we're going to get its
211:33 - content and if that exists we're going
211:35 - to map and get each item of the content
211:37 - and destructure its ID so I'm going to
211:41 - go to the object and get its ID and then
211:43 - I'm just going to return the ID okay so
211:47 - that's all I am doing and I'm going to
211:49 - save this
211:51 - put some parenthesis around this
211:54 - and yes this is a number
211:58 - however the whole object that the ID is
212:01 - in is technically the content so we can
212:04 - do this
212:05 - and then let's save this as an answered
212:11 - IDs Okay so we've saved our const
212:16 - and I'm just going to use set unanswered
212:18 - questions to be the unanswered questions
212:20 - ID so I'm going to pass that through in
212:22 - order to set this constant
212:26 - okay
212:28 - it seems like this could be undefined as
212:31 - it might not exist so I'm just going to
212:32 - add number
212:34 - or undefined as a type here
212:38 - okay
212:40 - okay so just you can read that that's
212:42 - what it is
212:44 - so now we should have
212:47 - uh let's console log it out of our
212:51 - unanswered questions
212:53 - or unanswered question ideas sorry
212:55 - let's have a look I'm just going to get
212:57 - rid of any other content actually let's
212:59 - keep that there so I'm going to keep
213:01 - that console log
213:03 - now if we look in here
213:05 - we don't want this to run forever in
213:07 - fact I only really want to run this use
213:10 - effect if the quiz changes so quiz
213:15 - stop this running loads of times okay so
213:19 - great so now if I click on New York
213:21 - you'll see New York coming here
213:24 - and here is our dynamically produced
213:27 - array of all our unanswered questions so
213:30 - now if we click on this I want to change
213:32 - this array so it gets rid of ID 0 as
213:35 - this belongs to the question group of
213:37 - id0 so let's do it
213:40 - so this is going to have an on the
213:42 - question block I'm going to set
213:44 - unanswered questions and what I'm going
213:45 - to do is override the array that's in
213:47 - there and like to do this I'm going to
213:49 - get the unanswered question IDs and
213:52 - filter this actually means that we need
213:54 - to pass this through as well as these
213:56 - set and answered questions so let's go
213:58 - ahead and do that let's start from here
214:01 - I'm going to pass through the unanswered
214:03 - question IDs
214:05 - which means that on the questions block
214:08 - I need to pass through the unanswered
214:10 - question IDs and then pass it through as
214:14 - a prop of course as well let's maybe do
214:16 - it in the same order
214:20 - and this is going to be array of strings
214:23 - you can also just do
214:26 - which is numbers it's number
214:29 - yeah array of numbers
214:32 - or
214:35 - undefined
214:42 - and now on the question block we of
214:44 - course also need to pass it through and
214:46 - it's an array of numbers
214:49 - or undefined
214:55 - which means we can now use it here so
214:58 - we're using it here
215:01 - to filter
215:02 - and if it exists you're going to filter
215:06 - each ID
215:08 - and return only if the ID does not equal
215:12 - the quiz
215:14 - item id we are answer quiz item id which
215:18 - we're again going to have to pass
215:19 - through this time from the questions
215:21 - block so the question blocked when I
215:24 - pass through the quiz item id which is
215:28 - actually the quiz Item ID right because
215:32 - it belongs to
215:36 - the quiz item itself or the content okay
215:39 - so this will either be a zero a one or a
215:42 - two right I hope that makes sense
215:45 - okay if it doesn't let's have a look at
215:47 - the interface so let's look in here
215:50 - I'm essentially getting this right the
215:54 - content and that's what I'm passing
215:58 - through into the question log
216:02 - great
216:06 - so we also need to pass this through as
216:08 - a prop which we forgot to
216:11 - okay okay
216:23 - so I hope that makes sense I'm also
216:25 - going to give this the type of number
216:28 - well I'm here and
216:30 - great
216:32 - so now when I click it it should get rid
216:34 - of the quiz item id let's have a look
216:37 - seems to be wrong here IDs that should
216:41 - be on
216:42 - the app
216:46 - IDs
216:48 - and we also need to pass the quiz item
216:51 - id onto the question block
216:54 - so let's pass that through as the first
216:56 - one
217:02 - and this is going to be a
217:06 - great
217:07 - so now if I click New York
217:11 - New York will be added to My Chosen
217:14 - questions array and my unanswered
217:17 - question IDs zero will have disappeared
217:19 - as this belongs to the group with the ID
217:21 - of zero and if I click on here well
217:24 - either 2 will disappear and it does okay
217:27 - and traditional husband added great and
217:29 - if I click on here we have answered all
217:31 - the questions so there is nothing in our
217:33 - array so now I'm going to use this in
217:36 - order to write a const
217:39 - called valid pick
217:41 - and if I look in my chosen answer items
217:44 - array and of course it exists and it
217:47 - does not include the question text so
217:49 - bank will not include so if it does not
217:52 - include that and
217:54 - we look in the unanswered question IDs
217:57 - array and if it exists and check if it
217:59 - does not include
218:01 - so not include the quiz item ID so if
218:07 - these two things are true then we know
218:10 - we've got a valid pick
218:17 - which means we disable all the other
218:18 - buttons so now I'm just going to pass
218:20 - through this
218:22 - from the app as well as it's another one
218:24 - we need to pass through so on here I'm
218:27 - just going to pass through
218:29 - chosen answer items into the questions
218:31 - block
218:37 - so there we go chosen answer items
218:41 - I'm going to pass that through here as
218:43 - well and this is
218:45 - an array of strings
218:50 - and then I'm also going to pass it
218:51 - through here
218:53 - which means that in here
218:57 - as well not again this is a
219:05 - array of strings
219:08 - great
219:09 - so now if I click New York all the other
219:11 - ones should be disabled so I can't pick
219:13 - them sandwich
219:15 - and traditional so great so now that we
219:19 - have done that let's get to scrolling to
219:22 - the highest uh question group so I'm
219:25 - going to do that right here and we're
219:28 - going to use a use effect for this
219:36 - so under the last use of fact I'm going
219:39 - to use use effect again
219:41 - okay so just get up
219:43 - this following
219:45 - syntax
219:47 - and we're going to scroll to the highest
219:50 - unanswered question ID so to do that I'm
219:53 - going to actually get the unanswered
219:55 - question IDs and I'm going to
219:56 - destructure them into a method called
220:00 - math Min which will literally return the
220:03 - smallest number from anything that's in
220:06 - here and I'm going to save this as the
220:09 - highest ID
220:12 - okay
220:13 - so that's all I have done that was
220:15 - actually super easy I'm also going to
220:18 - run this use effect every time the
220:20 - unanswered question IDs change
220:22 - and now I'm going to look into my
220:25 - document and get anything with the ID of
220:29 - the highest ID
220:32 - okay and I'm going to save this as the
220:35 - highest element because we're going to
220:37 - want to scroll to it okay so I'm going
220:40 - to grab the highest element
220:43 - making sure that this is in parenthesis
220:46 - say that a little bit bigger for you
220:49 - now I wouldn't usually recommend using
220:51 - the document get element by ID in a
220:53 - react project but as this is kind of
220:56 - hard to do with the use refwork I've
220:59 - shown you this way but if you're
221:01 - interested in how I would do this using
221:03 - the use ref hook then please stick
221:06 - around to the end and I'll switch this
221:08 - out okay I'll switch it out so you can
221:10 - see
221:12 - and making sure this is a string as at
221:14 - the moment is a integer and get element
221:17 - by ID won't take that so now we're going
221:20 - to get the highest element and I'm going
221:22 - to use if it exists actually I'm going
221:25 - to do scroll
221:27 - into view and I'm going to put the
221:29 - behavior as smooth so Behavior
221:34 - smooth
221:35 - okay and disable this
221:39 - great
221:40 - so we actually only want to do this if
221:43 - unanswered questions IDs exist right so
221:46 - I'm going to grab this
221:50 - and check for it before we do any of the
221:53 - following Behavior
221:56 - okay so there we go
221:59 - so now
222:02 - I go ahead and fix them from here it
222:04 - will scroll to the top one and if I pick
222:07 - something from the last one it will
222:08 - again scroll to the top one until we
222:10 - answer it okay so that is pretty cool we
222:13 - have now finished the scrolling Behavior
222:16 - now if
222:21 - unanswered questions length
222:24 - is smaller than or equal to zero
222:27 - and just to You Know cover ourselves
222:30 - chosen answer items length
222:33 - is larger than
222:36 - or equal to one
222:39 - well then we want to find the answer
222:42 - block which we're going to have to make
222:44 - so let's go ahead and create our answer
222:47 - block I'm going to give this to the
222:48 - class name of answer block just like
222:53 - so oops
222:55 - and we want to scroll to it so I'm going
222:58 - to essentially
223:02 - once again look in our
223:11 - document and get element by ID
223:18 - of answer
223:20 - lock it's gonna disable this hint
223:25 - and I'm going to save this as the answer
223:30 - block
223:34 - and if the answer block exists
223:38 - I'm going to scroll into view and once
223:41 - again I have the behavior as smooth okay
223:44 - so we also want this to run anytime the
223:48 - answer items or the chosen answer items
223:52 - change
223:53 - great
223:55 - so that's really it next up let's get to
223:59 - actually displaying our answers so we
224:03 - are actually going to want to show the
224:04 - answer block so let's gonna go ahead and
224:06 - import it import
224:09 - answer
224:12 - block
224:15 - from answer block and I only want to
224:18 - show it so I'm actually going to set
224:20 - this as const shell on
224:23 - tour
224:25 - set
224:27 - show answer you state Boolean and I'm
224:30 - going to start off with it being false
224:34 - and I'm going to use set show answer
224:38 - to
224:40 - actually
224:42 - true
224:43 - when we want to
224:46 - show the block so the answer block so if
224:50 - show answer is true then we want to
224:54 - show the answer log component so that is
224:58 - how we would write that
225:00 - okay so expect that we need to do our
225:03 - outside here so just like that
225:06 - now what do we want to pass through into
225:08 - the answer block but we want to pass
225:09 - through the answer options that we have
225:12 - so he's going to pass through all of
225:13 - them I want to do the logic on the
225:15 - answer block and we're also going to
225:17 - pass through our chosen answer items
225:21 - okay I'm just going to pass in through
225:23 - as chosen answers
225:26 - but we have them saved here as chosen
225:29 - answer items
225:31 - great
225:33 - our answer options are actually going to
225:35 - be your quizzes and if our quiz exists
225:37 - answers
225:40 - okay so everything that comes with the
225:42 - database
225:44 - so now on the answer block
225:47 - we're going to have to pass through
225:50 - the answer
225:52 - options but also the chosen
225:57 - of course just like that and the types
226:01 - of these are
226:03 - well I'm just going to put this on a
226:07 - new line for us I will format this a lot
226:10 - better A little bit later
226:17 - when I upload these files at the moment
226:19 - I'm kind of rushing the answer option is
226:22 - going to be well it's going to be an
226:24 - Erasure but it's going to also have the
226:27 - interface of answer that we pre-written
226:30 - so an array of the interface answer or
226:33 - is going to be undefined
226:37 - we of course need to import the answer
226:39 - interface so answer
226:43 - interface
226:45 - from
226:49 - let's go back on more interfaces
226:54 - and the chosen answers is going to be an
226:57 - array of strings so let's just go ahead
226:59 - and undo that
227:03 - now in here what do I want to do well I
227:08 - essentially want to show an answer but
227:10 - to do this I'm going to have to
227:12 - essentially check
227:15 - to all our answer options that we have
227:17 - got from the database to see if it
227:20 - matches the combination that we have for
227:21 - the chosen answers so what I am going to
227:25 - do let's just return an empty dependency
227:28 - is get our answer options so essentially
227:32 - the ones from
227:34 - the database and for each
227:38 - answer
227:40 - which is going to have the interface of
227:43 - answer
227:46 - foreign
227:48 - just go ahead and put this in some
227:51 - parenthesis
227:54 - I'm going to have to say that if
227:56 - The Chosen answers array that we have
228:00 - you know done on our client
228:02 - includes
228:06 - answer combination
228:10 - the fast in the array and
228:15 - includes
228:18 - the second item in the array from our
228:21 - database
228:22 - and the third item
228:27 - well then I want to set the results
228:29 - as the answer
228:32 - right
228:33 - which means we also need to actually
228:36 - import use effects as well as use State
228:40 - into here so we can use both and I'm
228:43 - going to use const
228:45 - results
228:47 - set result
228:49 - use state
228:52 - and it's either going to be the answer
228:55 - or
228:58 - no
229:01 - and essentially I want to do this every
229:03 - single time the chosen answers change
229:07 - okay so now there's a console log or
229:10 - result
229:13 - so now if I go ahead and pick New York a
229:16 - sandwich and mountains I get as Darrow
229:20 - as the cheese and if I pick Austin Pizza
229:24 - and traditional Eggert palmito so this
229:28 - is looking good the final thing I'm
229:30 - going to do is actually just show that
229:32 - result in here so all I'm going to do is
229:35 - actually scroll to this so I'm going to
229:37 - have to give this the ID because we
229:39 - haven't actually given this an idea yet
229:41 - or answer
229:43 - block so that we have something to
229:45 - scroll to
229:47 - and I'm just going to use the H2 element
229:50 - to say that if result exists I want to
229:54 - just pass you the text of the result and
229:57 - then also the image so I'm going to use
229:58 - the image element and the source of this
230:01 - is going to be the result if it exists
230:05 - image as well as the alternative text
230:08 - which is going to be the results
230:11 - objects if it exists
230:15 - text great and now some final styling
230:19 - so let's get up our CSS files
230:25 - and I'm going to grab my answer
230:29 - block
230:32 - I'm going to give it a width of 600
230:34 - pixels a background color of pink that
230:37 - I've picked out previously so this is
230:39 - just a funky one that I have found
230:45 - I'm of course going to soften up with a
230:47 - border radius because they are my
230:49 - favorite and I'm also going to do
230:51 - display
230:53 - Flex
230:55 - align items Center to Center everything
231:00 - vertically Flex direction is going to be
231:05 - column
231:07 - and color for the text is just going to
231:10 - be white so there is the RGB for white
231:13 - and I'm also going to say that any image
231:16 - that is inside the answer block is just
231:19 - going to have a width of 90.
231:23 - great so
231:26 - let's try it out I'm going to start from
231:29 - the last one modern and should take me
231:31 - up to here I just miss it there and pick
231:33 - pasta and then pick Austin
231:36 - we get cheddar cheese okay so that is
231:40 - cool however something funky did happen
231:42 - it didn't all um I had to click Austin
231:45 - twice so it must be something on the use
231:48 - effect
231:53 - let's go ahead and give this index a
231:55 - number type while we're here
231:59 - foreign
232:12 - show Answer changes
232:14 - let's try this again New York sandwich
232:17 - modern and we get roomy the image is
232:21 - broken but that's because we took it
232:23 - from Wikipedia so maybe someone took it
232:25 - down let's try another one New York
232:28 - Pizza traditional and blue cheese okay
232:32 - so this is looking good and of course we
232:35 - can you know start from the bottom house
232:38 - pasta New York
232:41 - and we get bread cheese again this is
232:43 - taken from Wikipedia so the image is
232:45 - broken but you get the gist now before
232:48 - we run off I just want to clean a few
232:50 - things up I'm gonna get rid of this I've
232:52 - left it to last as this is a bit
232:54 - Advanced so if you're happy with it just
232:56 - leave it just know it's probably not the
232:58 - best practice and that we should use use
233:00 - ref so I'm just going to get rid of that
233:03 - and all I am going to do is import
233:07 - create ref from react
233:11 - just like so and under here so perhaps
233:15 - just get rid of this console log as well
233:17 - so before we fetch the data I'm going to
233:19 - Define our refs because we're going to
233:21 - be picking out a ref outside of the
233:24 - components to scroll to so what I'm
233:26 - going to do is get the unanswered
233:28 - questions
233:30 - so unanswered question ideas and if they
233:34 - exist I'm going to reduce
233:37 - them so I'm going to use accountant ID
233:40 - that sounds good to me and then I'm just
233:43 - going to look into the objects by the ID
233:48 - and then for each one I'm going to
233:50 - create a reference
233:53 - okay so that is what I am doing we're of
233:57 - course going to have to add some types
234:00 - to this I'm just going to console log
234:02 - refs so we can see what is going on
234:05 - so for this I'm going to actually make a
234:08 - reduced type
234:10 - to reduce
234:12 - type
234:14 - up here and let's refine it to type
234:16 - reduce type
234:19 - and then I'm just going to add the ID if
234:22 - it exists
234:23 - which is going to have an object okay so
234:26 - that's all I have done and then
234:29 - here
234:31 - you need to say that this ref that we
234:34 - are making art is an HTML
234:38 - give elements
234:41 - or let's just put them now
234:44 - okay
234:46 - just make sure that says type
234:48 - great
234:49 - so this is looking good we'll put as
234:54 - unknown
234:56 - as key of the reduced type
235:02 - as well just so we can identify that
235:07 - and we're going to create objects out of
235:08 - all of that great
235:10 - so what's it not liking here now
235:14 - let's maybe just put any
235:18 - as well okay so we shouldn't really use
235:21 - any but you know I'm at the end now I'm
235:24 - just showing you this alternative better
235:26 - option of how to use ref instead of
235:28 - using document get element by ID
235:31 - and now let's just return the
235:33 - accumulation
235:34 - so now if we look in here
235:37 - this is what is the return we've used
235:39 - the unanswered question ID so here to
235:43 - create this object that has the create
235:46 - ref in it so it's an object of objects
235:48 - okay and we're going to collect them all
235:50 - in here and to do that I'm just going to
235:53 - scroll down to the questions block pass
235:55 - the ref through get the Reps and then
235:58 - pass through the content ID so in fact
236:01 - can we just do ID I think we can
236:04 - they should probably be content ID
236:07 - you should probably get rid of this
236:09 - actually and just make this the content
236:11 - ID instead
236:14 - and then we can just use the content ID
236:16 - here too
236:18 - great
236:20 - so now on the questions blog so let's
236:23 - find the questions block we need to pass
236:25 - that through as a reference so here are
236:28 - all our props and the reference is the
236:30 - second argument I'm going to wrap this
236:32 - in a forward ref just like so and then
236:36 - import that from reacts so forward
236:40 - breath
236:43 - and great and it means we can now get
236:46 - rid of this ID as we don't need it
236:47 - anymore and I'm just going to use the
236:49 - ref instead okay
236:57 - great and then we can just infer
236:58 - parameters from usage if we want
237:01 - there we go
237:06 - great
237:08 - so now if we look in here
237:12 - you will see that has been populated
237:14 - with the H2 elements okay just like so
237:18 - so now let's go ahead and use that in
237:21 - order to scroll to the highest element
237:23 - so I'm going to have to rewrite the use
237:27 - effect for that so this one right here
237:32 - so once we get the highest ID we're
237:34 - going to use the refs we're going to go
237:35 - into them and pass through the highest
237:38 - ID we're going to get the current
237:41 - scroll into View Behavior smooth
237:45 - okay great and just disable this hint
237:49 - wonderful and of course we also need to
237:52 - scroll to the answer block so I'm going
237:55 - to do that in its own
238:00 - if statement to show Answer exists
238:04 - then we're going to scroll okay and I'm
238:07 - also going to pass through
238:09 - a check to see if the chosen
238:13 - answer items length
238:16 - is larger than zero because we don't
238:19 - want any scoring to happen when we first
238:20 - load our page so that should get rid of
238:22 - that okay and just keep the unanswered
238:24 - questions check
238:26 - great so now let's create another
238:28 - reference let's get rid of that I'm
238:31 - going to call this answer ref
238:34 - I'm going to use create ref for it and
238:37 - just call the method and then I'm going
238:39 - to use the answer ref
238:41 - pass it through as a reference into here
238:46 - let's also check that refs exists
238:50 - you know
238:52 - before reading it down here now on the
238:55 - answers block let's just put this on a
238:57 - new line
239:00 - just like so I'm also going to pass
239:02 - through the ref but this time is the
239:04 - answer breath okay so that means that on
239:07 - the answer block we again need to pass
239:10 - it down as a second argument so outside
239:12 - of the props and then wrap this in a
239:16 - forward
239:17 - ref
239:21 - just like so which we're going to have
239:23 - to import from react to import forward
239:27 - graph
239:30 - foreign
239:34 - use current
239:37 - scroll into view and then just put the
239:39 - behavior as smooth
239:42 - okay
239:43 - great
239:45 - so this is looking good I'm going to put
239:47 - this as an else
239:49 - because this works as an elf else a
239:52 - little bit better now
239:54 - let's also add the missing dependencies
239:57 - so answer ref
239:59 - current
240:04 - and refs
240:06 - and we need to assign a type to this
240:10 - well once again I'm just going to get
240:13 - that from here it's going to be an
240:14 - htmlive element or null
240:16 - okay
240:17 - great
240:19 - so now in here let's also check if
240:21 - answer ref exists
240:23 - so and answer ref
240:28 - all right
240:30 - and
240:31 - great
240:38 - maybe let's add that to be current as
240:40 - well
240:41 - okay
240:43 - wonderful I believe that is it let's
240:46 - also add the type here so
240:51 - I'm just going to copy this right here
240:58 - and paste it
241:00 - it doesn't it seem to like that so let's
241:02 - go ahead and just put any as well
241:05 - great
241:07 - let's go back in here
241:10 - let's run it if the children items
241:12 - length
241:13 - changes
241:21 - and of course we cannot get rid of this
241:22 - and just pass through the ref onto the
241:24 - wrapping div so now let's check it out
241:28 - let's go click here
241:30 - click here and click here and we scroll
241:32 - to the answer
241:34 - wonderful now one last thing I'm going
241:37 - to do and that is in the index CSS file
241:40 - I want everything to be consistent so
241:42 - I'm going to change everything to have
241:43 - REM instead of pixels because at the
241:46 - moment I'm kind of using both and I
241:47 - don't really like that
241:48 - so let's change this to be 37.5 REM this
241:54 - to be
241:56 - 0.625
242:00 - um
242:04 - this to be 37.5 gram
242:08 - and then we've got
242:10 - 13.125 gram
242:13 - a border radius of
242:16 - 0.313 Ram
242:21 - a width of
242:23 - 17.875 gram
242:25 - again a broader radius of
242:28 - 0.313 RAM
242:30 - a margin bottom of 0.938
242:34 - um
242:39 - it's got one pixel here so let's change
242:41 - that to
242:43 - this
242:45 - let's change the answer block to 37.5
242:48 - gram with a border radius of
242:51 - 0.313 RAM
242:54 - and there we go
242:58 - Okay so we've done it we have
243:00 - essentially finished our BuzzFeed clone
243:04 - in typescript I'm going to share this
243:05 - with you I'm going to clean it up so you
243:08 - know everything's indented a little bit
243:09 - better and we get rid of the console
243:11 - logs so if you want to check out my code
243:12 - then please go ahead and do that let me
243:15 - know what you think in the video
243:17 - description and I will hopefully see you
243:19 - again soon
243:20 - thanks very much