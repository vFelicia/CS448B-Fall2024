00:00 - so i hope you are ready with energy for
00:02 - the talk okay but if you want an app
00:04 - that's fine i don't have a problem with
00:06 - that um so we're going to talk about web
00:09 - performance okay so i will start
00:12 - presenting myself really quickly okay
00:14 - maximilian is my name max is fine i'm
00:17 - first on twitter
00:19 - um i'm a mobile web developer so i have
00:21 - been doing web development since that
00:23 - browser okay since 1995 so long time ago
00:27 - uh using front page for example
00:31 - and as we mentioned before i've been
00:33 - traveling a lot for doing consulting
00:35 - training in 66 countries this is my
00:37 - first time here in serbia
00:40 - so i'm also been doing training for a
00:42 - lot of companies and consulting
00:44 - and you can find content and trainings
00:47 - uh from me on different providers such
00:49 - as linkedin learning uh people is known
00:52 - as linda or safari i have all four a
00:54 - couple of books okay there is a kind of
00:57 - a trick there
00:58 - so because we have original books these
01:00 - are the original books and those are
01:02 - translations on languages that i don't
01:05 - understand
01:06 - so um
01:07 - [Music]
01:08 - the last two books are basically on the
01:10 - topic that we will be covering the next
01:12 - 35 minutes probably 34 now so uh
01:16 - performance okay web performance how
01:19 - many of you are currently creating
01:21 - websites or web apps
01:23 - okay
01:24 - perfect and how many of you are creating
01:26 - fast websites
01:28 - okay only 10 and there are a couple of
01:32 - okay let's see we're going to talk about
01:34 - that and how you can hack the web
01:36 - performance how we can push that even
01:39 - further that's the whole idea of this
01:41 - talk so i have two goals for this talk
01:45 - the first one is to show you new tricks
01:47 - that you can start applying in your own
01:48 - websites or web apps pretty soon and the
01:51 - other one is to make you feel bad okay
01:53 - about what you're doing right now so
01:55 - let's start with that
01:57 - so um
02:00 - i know that you know
02:01 - that your users are currently not happy
02:05 - and probably you are losing money
02:08 - okay you or your customers or your
02:10 - clients are losing money why because of
02:14 - the performance or because the web is
02:16 - slow
02:17 - your website is slow i'm sorry to tell
02:19 - you that
02:20 - so some quick information about this
02:23 - half a second delay it's increasing user
02:26 - frustration by 26 percent
02:29 - okay that's a lot
02:31 - half a second delay is reducing google's
02:33 - traffic and that's money for google okay
02:36 - in terms of ads for example uh 100
02:39 - milliseconds only uh delay will decrease
02:42 - amazon's sales by one percent these are
02:45 - all the information okay so there are a
02:47 - lot of information data that you can get
02:49 - on this problem
02:51 - and i'm pretty sure that you know
02:54 - that today we are not talking about page
02:56 - load as a metric there are new uh
02:58 - metrics that are user-centric not about
03:01 - like javascript metrics but about from a
03:04 - user's point of view and we have first
03:06 - meaningful pain that is when something
03:08 - meaningful appears on the page that is
03:10 - not just a line or a background color so
03:12 - something that the user's
03:14 - user's brain is currently parsing the
03:18 - then we have first interactive because
03:20 - it's not just to see something on the
03:21 - screen we should be able to interact
03:23 - with that
03:24 - like for example scrolling or touching
03:26 - so sometimes you see a page but it's not
03:28 - working
03:29 - okay
03:30 - and visually complete is finally when
03:32 - you are seeing the actual content that
03:34 - is not page load
03:36 - and i'm sure that you're creating your
03:39 - own custom metrics because that's
03:40 - something that it's really important so
03:42 - what is important for your users what
03:44 - are you expecting your users to do on
03:46 - your website on your web app and then
03:48 - you measure that
03:50 - and so i know you know that performance
03:52 - is important and we don't need just the
03:54 - metrics we need goals because if how
03:56 - fast is fast
03:58 - probably you say oh my website is
04:00 - loading in 15 seconds really fast right
04:03 - well not really so we need to set our
04:06 - goals
04:07 - currently
04:08 - the goals in the market are around this
04:11 - first meaningful pain should be between
04:13 - one and three seconds so the user is
04:15 - typing the url or clicking on a link and
04:17 - after maximum three seconds it should be
04:20 - seeing something meaningful on the page
04:22 - and that means on not on your computer
04:24 - and wi-fi that means on any context
04:26 - including um let's say a low-end device
04:29 - with a 3g connection with a slow 3g
04:32 - connection
04:33 - first interactive has like one more
04:35 - second to make that content interactive
04:37 - so to two to four seconds so um now you
04:41 - need to think about this and see how how
04:44 - close are you to these goals today
04:48 - so i know that you're already doing a
04:50 - lot of stuff like optimizing the network
04:52 - transfer such as for example enabling
04:54 - gcp on text-based files on your server
04:57 - you are currently working with tls and
04:59 - http 2.
05:01 - you are using css as appetizer
05:04 - okay so where here in serbia appetizer
05:06 - is like a big plate but typically the
05:08 - appetizer should be small right so css
05:11 - should be a small
05:13 - and you should start with that so the
05:15 - css should be the first thing that
05:16 - you're going to deliver to the browser
05:18 - because css will block rendering which
05:20 - is small and
05:22 - um as an appetizer and javascript as
05:25 - dessert at the end
05:28 - okay we need to defer javascript as much
05:30 - as possible so javascript is your
05:33 - baklava basically
05:35 - so uh
05:36 - you are already optimizing images okay
05:38 - you're already creating a great image uh
05:42 - with with png or jpeg you're optimizing
05:45 - that
05:46 - and you have an http cache policy
05:49 - you are currently using service workers
05:51 - right everyone is using service workers
05:53 - right
05:54 - no
05:55 - so you should avoid the redirects that
05:58 - is when you go to a website and that
06:00 - website says now you know you know what
06:02 - no no it's not here you need to go there
06:04 - and you go there it says no it's not
06:06 - here you need to go there so for example
06:08 - you type a url and then first you go to
06:11 - https which is fine but when you get
06:13 - there it says oh you're a mobile phone
06:15 - now you need to go to mdot and then you
06:17 - go to mdot and it says oh you want a
06:19 - home page you need to go to m dot slash
06:21 - homepage so all those redirects are
06:24 - basically wasting time so you are not
06:26 - doing that
06:27 - i already know
06:29 - this is basic web performance techniques
06:31 - that are you're all doing that stuff
06:34 - what's the problem
06:36 - the problem is even with all those
06:38 - techniques the average time to load the
06:40 - mobile landing page today is 22 seconds
06:44 - it's really far away from our goals okay
06:48 - so it's really far away
06:49 - so and this is from google by the way so
06:53 - if
06:54 - a page is taking more than three seconds
06:56 - to load
06:58 - more than half of the user will start
07:00 - leaving that page at that time so you
07:02 - are losing users you are losing
07:04 - conversion you are losing money
07:06 - because we are not doing web performance
07:08 - for the sake of web performance has to
07:10 - to measure with the with with your with
07:13 - our clock we are doing this because of
07:15 - conversion okay we want conversion in
07:18 - our websites so that's why we're doing
07:20 - web performance
07:22 - and one of the problems is that we have
07:24 - been always underestimating mobile okay
07:26 - since the beginning
07:28 - so for example today you can say that
07:30 - it's ios and android but from a web
07:32 - point of view
07:33 - is it safari and chrome only
07:37 - so the answer is no
07:39 - so if you if you have tested your
07:40 - website on on mobile browsers it
07:43 - shouldn't be just ios
07:45 - with safari and chrome
07:47 - android with chrome there are a lot of
07:49 - browsers out there samsung in the
07:51 - browser uc browser opera mini chrome on
07:54 - ios that is not actually chrome so these
07:56 - browsers are currently having like a
08:00 - good market share so more than three
08:02 - percent
08:03 - and that means millions of users that
08:05 - are currently using those browsers and
08:07 - also we have facebook that now has a
08:10 - name facebook mobile browser
08:12 - what i'm saying is when you the user is
08:14 - browsing on facebook and clicking on a
08:15 - link by default that link is not being
08:18 - browsed in the browser but inside an
08:21 - in-app browser that in a browser is
08:24 - using a different engine both on ios and
08:26 - android so have you ever tried your
08:28 - website there how it looks like how it
08:30 - works in terms of performance is it the
08:32 - same as safari or chrome it's not so um
08:37 - and it's a lot of a lot of users are
08:38 - currently on that situation and also
08:41 - when we are talking about the mobile web
08:43 - that is more today more than half of our
08:45 - users on some situations it can be 70
08:48 - and 80 of your users on mobile browsers
08:51 - we are typically using cellular networks
08:53 - and i know that you're thinking about
08:55 - this oh we have 4g now so we shouldn't
08:59 - we don't need to worry about performance
09:01 - we shouldn't need to worry
09:04 - but to be honest if you look at that
09:05 - information
09:07 - that's for a couple of months ago
09:09 - so less than 30 of the users worldwide
09:13 - are currently in 4g
09:15 - okay
09:16 - and
09:17 - it's not so much and also sometimes when
09:20 - you have we are like you're a lucky 4g
09:23 - device uh user you're also a lucky 4g
09:26 - data plan user you're also a lucky user
09:30 - that is currently in a city
09:32 - with 4g coverage
09:34 - okay so lucky users on that situation 10
09:38 - of the time you are downgraded to 3g
09:41 - okay so it happens a lot i'm currently
09:43 - in 3g here
09:45 - i'm in roaming even with the iphone 10
09:47 - i'm in 3g
09:49 - so um that happens a lot it's not just
09:51 - because it's um eastern europe i've been
09:54 - in san francisco so in the middle of
09:56 - silicon valley i was driving like
09:58 - half an hour north and it was in qg
10:01 - okay juji in the middle of silicon
10:03 - valley so that happens a lot with our
10:06 - with your users so you need to be very
10:08 - careful about that and when we are
10:09 - talking about 3g 4g or even 5g
10:12 - um typically your brain is thinking
10:14 - about bandwidth okay so oh it's fast 4g
10:17 - is faster yeah it's faster but the
10:19 - problem is not the bandwidth the problem
10:21 - is the latency
10:23 - so if you think about this if you if you
10:25 - have at home
10:27 - a 50 megabits per second connection and
10:29 - you go to 100 megabits per second are
10:32 - you browsing the web faster
10:35 - probably not it's better for netflix
10:38 - it's better for youtube it's better for
10:39 - downloading big files but not for
10:40 - browsing the web because when you are
10:42 - when we are browsing the web browser is
10:44 - downloading a lot of small files
10:47 - and the latency if you look there into g
10:50 - is really big it can be up to one second
10:52 - that's the round trip time that takes to
10:55 - get data from the server
10:57 - 3g is better up to 450 milliseconds
11:00 - 4g it's even better like a quarter of a
11:02 - second but if you compare that with the
11:05 - home the dsl connection or an office dsl
11:08 - or cable connection
11:10 - 4g has 10 times
11:13 - the latency of your home connection so
11:15 - even those 4g lucky users
11:18 - have big latency
11:20 - then that's the problem okay so that's
11:22 - why we need to push web performance even
11:24 - further
11:26 - so we need to hack web performance so i
11:28 - have here a couple of tricks okay that
11:31 - uh you're gonna start analyzing and
11:34 - using in your own websites or web app to
11:36 - push the web performance further so
11:39 - we're going to start talking about the
11:41 - first load how we can hack the first law
11:43 - so the first time that the user is
11:45 - accessing your website and it's
11:46 - currently being downloaded from the
11:48 - server
11:50 - we should try to avoid more than one
11:53 - round trip this is a very extreme case
11:56 - okay but it's interesting i have i have
11:58 - done a lot of consulting and we did uh
12:01 - this trick and it's incredible how fast
12:03 - you can get the first load
12:05 - so
12:06 - in tcp we are not getting too deep into
12:09 - tcp and networking but basically there
12:11 - is something known as a slow start so
12:13 - even if you're not a network engineer
12:15 - you know that on the internet basically
12:17 - the data is split into packages okay tcp
12:20 - packets
12:22 - so uh the problem is how big are those
12:24 - packets
12:25 - okay so if we can try to fit our website
12:29 - in one packet it will get faster because
12:32 - it won't need another round trip
12:34 - that's basically taking the latency
12:37 - and there is something known as initial
12:39 - congestion window
12:40 - that in linux based servers it's around
12:43 - 14.6
12:46 - kilobytes in fact it's kiwi bytes and if
12:48 - you don't know what a kibi byte is
12:50 - google that later um
12:52 - [Music]
12:53 - so 14.6 so if you can fit
12:56 - your your first response from the server
12:59 - so it's only for the first response this
13:01 - in
13:02 - 14.6k
13:04 - it will fit in one tcp packet okay only
13:07 - one
13:08 - so the problem you say oh 14 it's not
13:10 - too much but we are g zipping our files
13:14 - so that's around 70k of html which for
13:18 - example for the viewport of a mobile
13:20 - device it might be okay
13:22 - if you can fit the html there
13:24 - cdns are also playing with different
13:27 - values of this
13:28 - initial congestion window so you can see
13:31 - a couple of
13:32 - experiments going on
13:34 - on this idea so if you can deliver the
13:37 - atf content what is the atf content
13:40 - above the fold so
13:43 - above default is the content that you
13:44 - see in the first scroll
13:47 - so if you can fit the content for the
13:49 - first scroll on a mobile device of your
13:50 - website or web app in 14.6k
13:54 - she shipped
13:56 - you will
13:57 - render the content as soon as possible
14:00 - and you can also embed css and
14:02 - javascript needles for that first
14:03 - initial load only and if you still have
14:06 - a space you can embed the logo and i'm
14:09 - talking about embedding known an amg tag
14:11 - with a source logo jpeg or logo png i'm
14:14 - talking about using base64 and data uri
14:18 - because we want to embed that in one
14:21 - html response
14:23 - another thing that you can do now to
14:25 - increase web performance is to avoid the
14:28 - http to https resurrection so we you
14:32 - should know i'm pretty sure that you
14:33 - know that you need to move your websites
14:36 - to https so it's mandatory today every
14:39 - website should be in tls so https the
14:43 - problem is that when the user is typing
14:44 - the url it's not typing https
14:47 - column forward slash forward slash so
14:50 - and the browser is going to http by
14:52 - default so we have a redirect there that
14:54 - can take around 300 to 500 milliseconds
14:59 - and we have a tiny budget and
15:02 - maybe half a second is a lot so we want
15:05 - to avoid that um
15:07 - the solution is something known as hsts
15:10 - and it's
15:11 - some kind of a protocol
15:13 - that you're going to add in your in your
15:15 - http header
15:16 - and you're going to say on that first
15:18 - access to http hey browser you know what
15:21 - my website from now on it's we always in
15:24 - https so a stop
15:27 - go into http by default okay so next
15:30 - time the user will go directly to https
15:32 - and we are going to save up to half a
15:34 - second and also when you have this you
15:37 - can go and opt in into that website and
15:40 - then a browser such as chrome safari
15:42 - firefox and edge are taking the list as
15:45 - a white list pre-loaded in the browser
15:48 - so a new user
15:50 - will type your url and if you are in
15:52 - that white list it will go directly to
15:54 - https avoiding one resurrect okay
15:59 - so um after the first load was after the
16:02 - first
16:03 - response was sent to the
16:06 - to the browser we need to hack the data
16:07 - transfer okay so okay how can we send
16:10 - the data even faster over over that
16:13 - network or uh the wireless network so
16:16 - first i want to talk about something
16:18 - known as quick
16:19 - okay there is no typo there that's the
16:21 - name quick without okay
16:24 - and it's an experimental protocol
16:26 - to provide an http 2 based api over udp
16:30 - and not tcp
16:32 - in fact if you are using chrome
16:34 - and you are browsing google website can
16:37 - be gmail google.com google drive you are
16:41 - currently browsing the web using quick
16:43 - okay so um quick will reduce latency
16:48 - a lot because it's not using tcp it's
16:50 - using udp uh but it's it's compatible
16:53 - with http too so basically it's
16:55 - compatible with uh all your current um
16:59 - let's say websites and architecture
17:02 - it has something called zero rt
17:04 - rtt so round trip time connection
17:07 - establishment so you can analyze that
17:09 - later but it means that when the user is
17:12 - um
17:13 - coming back to your website it will have
17:15 - zero round trip time to get that
17:18 - connection open
17:20 - okay so it's increasing a lot in fact uh
17:23 - for the google search pay is increasing
17:25 - the performance by three percent
17:28 - a youtube has reduced thirty percent of
17:30 - buffering
17:31 - thanks to using quick
17:33 - facebook has a similar protocol for uh
17:36 - their app it's improving performance by
17:38 - two percent and according to google
17:41 - three quarters of every request on the
17:43 - web
17:44 - can be faster if we use quick instead of
17:48 - uh normal hdb2 quick is experimental but
17:51 - it's currently available on chrome and
17:53 - it's there are some works in other
17:54 - browsers as well and of course you need
17:56 - to add something on your server so you
17:58 - can serve your website using quick if
18:00 - the browser is compatible with quick
18:03 - okay
18:04 - cool so um
18:06 - softly
18:07 - repeat with me softly
18:09 - so um this is a new
18:12 - algorithm
18:13 - for shiship that will encode your she
18:17 - sips
18:18 - compressing more okay it can save up to
18:21 - eight percent of the data transfer
18:24 - so the same html when you send that over
18:27 - the wire or the wireless channel um it
18:30 - will occupy less bytes
18:33 - okay
18:34 - so uh the problem is that it's 80
18:36 - times slower so it consumes 80 times
18:39 - more cpu for compressing not for
18:42 - decompressing
18:43 - but because it's gc based it works with
18:45 - ie6
18:46 - it works with every browser so you can
18:49 - start applying this on your server and
18:51 - then you will save data transfer so your
18:54 - website will appear faster on users
18:58 - devices and you will save data transfer
19:00 - in the meantime
19:02 - and if we wanted to push this even
19:05 - further there is another protocol known
19:07 - as broccoli by the way we are talking
19:09 - about german names here um
19:12 - in this case you can say up to 25
19:15 - compared to gsip but it's not just
19:18 - incompatible so you need a browser
19:19 - compatible with broadly and so you can
19:22 - check the encoding header by the way
19:24 - there are a couple of broadly compatible
19:26 - browsers today uh including chrome
19:29 - including some versions of safari and
19:31 - firefox
19:34 - so you need to check the encoding header
19:35 - and then send the broadly version
19:38 - um
19:39 - for linkedin for example it has saved
19:41 - four percent
19:43 - in loading time so if you take four
19:44 - percent from here three percent from
19:46 - here two percent from here okay and
19:48 - because we have a tiny budget you can
19:50 - actually save a lot of time and you can
19:53 - actually be closer to your performance
19:55 - goals
19:57 - so facebook has saved in css okay and
20:01 - also a serving javascript files using
20:03 - broadly and by the way with broadly
20:06 - remember that we mentioned the 14.6k
20:10 - threshold for the initial response if we
20:13 - are using broadly we can say we can
20:15 - store up to 80 85
20:18 - kilobytes of html
20:20 - on on one tcp packet
20:24 - readable streams this is also
20:26 - interesting is coming right now on some
20:28 - browsers it will let you process the
20:31 - data as soon as arrived so let me give
20:34 - you a quick example it's typically today
20:36 - if you have a web app it can be a react
20:38 - application it can be a
20:39 - angular application or view or whatever
20:42 - i'm vanilla js so you are downloading a
20:45 - json file you are parsing the json file
20:47 - client side and you're rendering
20:49 - something on the html okay that's
20:51 - basically the idea but let's say you're
20:53 - downloading 100 uh
20:56 - items i know
20:58 - clients cds whatever you're downloading
21:01 - so you're starting parsing that json
21:03 - file only when you have the 100
21:07 - you cannot like take a chunk of the json
21:10 - as soon as it's arriving from the
21:11 - network you're receiving the file using
21:14 - ajax or the fetch api
21:16 - you are using you are receiving the file
21:18 - when you have the the total file
21:20 - so what if we can start receiving from
21:23 - the network layer
21:25 - pieces
21:26 - chunks of the response and start
21:29 - analyzing each chunk and start rendering
21:33 - as soon as
21:34 - one part of the json is available so
21:36 - that api is called readable streams is
21:39 - available on some browsers and you can
21:41 - start playing with it and it can save on
21:43 - pain metrics when you are doing uh this
21:46 - kind of client-side uh rendered
21:50 - solution
21:52 - so
21:53 - that's for the initial
21:55 - page and also for sending device from
21:58 - the server to the client
22:00 - what about
22:01 - loading the rest of the resources images
22:04 - videos web fonts style sheets and
22:06 - javascript files
22:08 - so um
22:09 - we have new modern cache control systems
22:12 - that you can start using
22:14 - for example
22:15 - if how many of you are react or angular
22:18 - developers let's see
22:19 - okay quite like 20
22:21 - so you're probably using the cli
22:23 - probably i don't know or webpack at
22:25 - least so
22:27 - these clies when you're compiling your
22:29 - your apps are creating uh file names
22:32 - with hash for your resources for example
22:34 - your your style css
22:36 - file it's not the styles.css dot hash
22:41 - like
22:42 - xh024 dot css and every time you change
22:45 - that file the name changes so now we
22:48 - have um
22:50 - a way
22:51 - to for the browser to say you know what
22:53 - instead of doing conditional requests we
22:56 - know for sure
22:57 - that that file
22:59 - will never change because if we are
23:01 - changing the css file react or angular
23:04 - cli will change the file name
23:07 - so we know for sure that it's not going
23:09 - to change so we asked the browser hey
23:12 - browser if you have a cached version of
23:14 - that file use it
23:16 - because i will never change it on the
23:17 - server and that's uh known as a cache
23:21 - control immutable
23:22 - okay that is currently
23:24 - available on those browsers in chrome
23:26 - it's kind of great because chrome is not
23:28 - supporting it yet but it has a
23:31 - like a similar intelligent solution that
23:33 - is
23:34 - finally getting to the same result
23:38 - and also there is a common new pattern
23:40 - um
23:41 - that is available mostly with service
23:43 - workers not sure how many of you have
23:45 - played with service workers
23:46 - let's see
23:47 - okay quite a few only one percent
23:51 - so um
23:53 - we need to change that but there is a
23:54 - new pattern there known as a stale wire
23:57 - revalidate like you always serve the
24:00 - file from the cache
24:02 - okay so from the local cache so you
24:04 - serve the file really quickly it's in my
24:06 - local cache so here you have it but it
24:08 - might be outdated because maybe on the
24:10 - server you have a new version so then
24:12 - the browser is updating that in the
24:14 - background so the next time you request
24:17 - that resource it will be updated that's
24:20 - known as statewide revalidate if you
24:22 - have played with service workers it's a
24:24 - common design pattern and now that
24:26 - design pattern is coming to browsers so
24:28 - you can specify that you want to use
24:31 - that behavior stale where we validate
24:33 - and the browser will do that for you it
24:35 - will give you the cached version when
24:37 - you are actually i mean an img tag and a
24:39 - script
24:40 - it will it will take it from the cache
24:42 - but in the background it will go and
24:44 - update the resource for the next time
24:47 - okay
24:49 - warming up engines
24:51 - so when the browser is trying to
24:54 - download uh
24:55 - resources we can try to warm up the
24:58 - engines and help the browser to start
25:01 - some processes as soon as possible for
25:04 - example dns queries when you are
25:06 - downloading files from a different
25:08 - domain from different origin
25:11 - uh a dns query is needed so you can
25:14 - like change resolve the name to an ip
25:17 - address and that might take up to 200
25:19 - milliseconds and that's a lot because we
25:21 - have a tiny budget so and also
25:24 - connecting to tcp and the tls connection
25:27 - can be another 200 milliseconds when you
25:29 - are connecting to another server
25:31 - so we can announce dns queries as soon
25:34 - as possible at the top of your html you
25:37 - can add a link with a rel dns prefetch
25:40 - and you're announcing the browser hey
25:42 - browser later i will request a file from
25:45 - that server so you can start the dns
25:47 - right now beforehand
25:51 - also you can use preconnect in this case
25:53 - it's not just the ens query it's also
25:56 - going to create the tls and tcp
25:58 - connection to that server okay even if
26:01 - the browser doesn't know that you will
26:02 - need the resource from that server
26:06 - and on both
26:07 - you can use an http header instead of
26:10 - html so when you are answering with your
26:12 - html you are going to say hey browser
26:15 - you know what later this html will need
26:17 - this than this domain so let's start the
26:20 - connection right now
26:22 - to bundle and not to bundle so what is
26:24 - this
26:26 - so this is a typical question that i
26:29 - receive in terms of javascript and css
26:32 - so um
26:33 - typically you have 10
26:35 - 50 100 css file and javascript file i've
26:39 - seen that
26:40 - um so should we create like one big
26:42 - bundle or should we create a lot of
26:44 - script tags and link tags for different
26:46 - files on http 2
26:49 - bundling seems like an admin pattern
26:51 - however it's not
26:53 - banding is still a good idea in fact
26:56 - this is a tweet from paul irish saying
26:58 - that from the the chrome team saying
27:00 - that today
27:02 - band is still the best possible ideas to
27:05 - create one big javascript file one big
27:09 - css file but big however here i'm
27:13 - talking about only the necessary content
27:16 - for rendering initial
27:19 - rendering not the whole website or page
27:22 - so we need code splitting first
27:24 - and then
27:25 - for the initial rendering only one file
27:28 - okay so that's the idea so don't create
27:31 - a find mega by javascript file because
27:33 - that's not the idea it should be really
27:35 - small only for the important part and
27:37 - then you
27:38 - defer and download the rest
27:42 - so web fonts
27:44 - web fonts are nice okay we can change
27:47 - the default fonts that we are using on
27:49 - websites but we have a problem that
27:52 - probably you have seen that
27:53 - the flash on and off and style text what
27:56 - is this you access a website you see the
27:59 - logo you see the background and no text
28:02 - and text on the web
28:04 - was always non-blocking text was just
28:07 - text it was there by automatically we
28:10 - don't need to wait but now when we're
28:12 - using web fonts we are waiting for the
28:14 - font
28:14 - and that's a problem so
28:17 - now you have on css a way to define how
28:20 - do you want to load this with phone
28:21 - display so look for phone display so you
28:24 - can specify the algorithm so you can
28:27 - create a more performant solution for
28:29 - this and finally for resource loading we
28:32 - have preloading
28:34 - so uh preloading is even uh like a
28:38 - better
28:39 - way of the pre of prefetching or the dns
28:43 - prefetch or the pre-connect so it's we
28:45 - are pushing it even further we can help
28:48 - the browser prioritize the most
28:50 - important resources for example the font
28:52 - file
28:53 - okay so you use a link rel preload
28:57 - and you're going to say this is a style
28:59 - sheet this is a web font this is a
29:00 - script tag and you will need it later so
29:02 - but i start downloading it now
29:04 - so we can help the browser to download
29:07 - the most important files
29:09 - sooner
29:10 - with more priority okay and that will
29:13 - save a lot of time for your
29:15 - metrics
29:17 - you can also of course use an http
29:19 - response header in instead of a link
29:23 - type as well
29:25 - hacking images
29:27 - so we know that the picture is worth a
29:29 - thousand words the problem is that if it
29:31 - loads
29:32 - okay so we need to load pictures
29:35 - so first you need to embrace responsive
29:37 - images okay that means you need to
29:40 - deliver not one image not three versions
29:42 - of the image okay because today a lot of
29:44 - traffic is coming from images and you
29:47 - can improve a lot your metrics if you
29:49 - create end versions that is the version
29:52 - that is exactly the one that is needed
29:54 - for that particular user
29:56 - also it's time to replace normal
29:58 - standard jpeg and png files
30:01 - remember softly the one i mentioned
30:03 - before for gcp
30:04 - the same algorithm works over deflate
30:07 - and png are using deflate meaning that
30:10 - you can compress your png files 20 more
30:14 - using this new algorithm okay and it
30:17 - works everywhere because it's still png
30:20 - and also we have a jpeg version of this
30:23 - it's called ghastly another german name
30:25 - uh that will let you in like compress
30:28 - your jpeg files even more without
30:30 - reducing quality
30:32 - so these are new compression algorithm
30:34 - that are open source are available right
30:36 - now so you can start uh helping your
30:39 - users with uh performance okay so start
30:42 - working with that
30:44 - and the last thing that i have for you
30:46 - has to do with how to hack user
30:48 - experience
30:49 - so
30:51 - with something known as reactive web
30:53 - performance
30:54 - so
30:56 - i'm pretty sure that if you're a netflix
30:58 - user you have seen this in action from a
30:59 - network point of view it's difficult to
31:01 - see netflix with a buffering
31:04 - system typically netflix is changing the
31:07 - quality of the streaming as soon as the
31:09 - pathway is changing okay this is a
31:11 - similar idea about the web
31:14 - so we can know about the context today
31:16 - using client-side performance apis
31:18 - network information api device memory
31:21 - client hints apis so basically you can
31:23 - detect the current connection of the
31:25 - user
31:26 - the bandwidth the latency you can detect
31:29 - the current available memory so you can
31:31 - know if it's a feature phone
31:33 - if it's the latest android device and
31:35 - make a decision about that
31:37 - because maybe you have the latest
31:39 - android device the latest iphone device
31:42 - but you are in 2g in roaming so it
31:44 - doesn't make any sense to send a very
31:46 - super high quality ultra resolution to
31:49 - that device because it will never arrive
31:52 - and that's a bad experience we need to
31:54 - keep the the user the the consistency
31:58 - and the consistent experience so for
32:00 - example if you're in roaming don't send
32:02 - web fonts
32:04 - we can change the service workers cache
32:05 - policy so if we are in 2g
32:09 - we'll say okay let's go first to the
32:11 - cached version
32:12 - because it will be slow and we want to
32:15 - improve users experience
32:17 - we can reduce the amount of loaded data
32:20 - and maybe
32:21 - you can send a low resolution image not
32:23 - matter the device pixel radio or the
32:25 - resolution okay you might have a 4k
32:29 - screen
32:30 - but if if you have a very slow network
32:33 - it doesn't make any sense to send that
32:36 - picture you can just then send a low
32:38 - resolution image
32:39 - so are you feeling bad now
32:41 - about what you're doing
32:42 - yeah no yes
32:44 - so
32:45 - performance is top priority okay if you
32:48 - want to succeed on the web on web apps
32:51 - it's operating because it was proven
32:52 - that it has to do with conversion it
32:55 - will give you conversion so you need to
32:57 - push it even more you need to start you
32:59 - need to learn how to
33:00 - uh measure with the new metrics and it's
33:04 - a really worthwhile effort so okay so
33:07 - please please take uh take time and
33:11 -  to improve the performance of
33:13 - your website okay please please do it
33:17 - so
33:18 - um that's an iphone okay by the way um
33:22 - make it fast please so that's all for me
33:25 - so thank you
33:26 - and see you later because i have another
33:29 - talk on progressive web apps on the
33:31 - other room okay
33:32 - thanks