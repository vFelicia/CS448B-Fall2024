00:00 - hi i'm beau carnes with freecodecamp.org
00:03 - in this course i'm going to teach you
00:04 - how to make a full stack web application
00:07 - using the mirn stack but i'm going to
00:09 - teach you even more than other mernstadt
00:11 - courses
00:12 - i'm going to show you how to convert the
00:14 - back end of the app to
00:16 - serverless and how to host it for free
00:18 - in the cloud
00:19 - so you don't even need node or express
00:22 - the mernstack is a popular stack of
00:25 - technologies for building a modern
00:27 - single page application mongodb is a
00:30 - document based open source database
00:32 - node.js allows javascript to run outside
00:34 - a browser in places like a web server
00:37 - express is a web application framework
00:39 - that makes it simpler to code a web
00:41 - server in javascript
00:43 - and react is a javascript front-end
00:45 - library for building user interfaces
00:48 - in this course we will be building a
00:49 - restaurant review web app
00:51 - first i will talk about mongodb and how
00:54 - to host your database in the cloud
00:56 - using mongodb atlas then i'll show you
00:58 - how to create the back end of the app
01:00 - using node.js and express our server
01:03 - will interact with the database
01:05 - using the native mongodb javascript
01:07 - library
01:08 - instead of the mongoose library used by
01:10 - many other mirnstat courses
01:12 - why use an extra library if you don't
01:14 - have to next i will show how to create
01:16 - the front end with react
01:18 - and connect the front end to the back
01:20 - end at that point the merge stack app
01:22 - will be complete
01:24 - but i'll have one more thing to show you
01:27 - in the final part of this course
01:29 - i will show you how to replace the node
01:31 - express backend
01:32 - with mongodb realm this is a serverless
01:35 - platform that will allow us to do
01:37 - everything in the cloud
01:38 - without running our own server and with
01:40 - a lot less code
01:42 - then i'll show you how we can use
01:43 - mongodb realm to host our react
01:46 - front-end
01:46 - so our entire web app will be hosted for
01:49 - free on mongodb realm
01:51 - if you already know a lot about the mern
01:52 - stack just skip to this time code
01:55 - and go straight to where i show how to
01:57 - convert the node express back in to use
01:59 - mongodb realm instead
02:01 - let me show you an overview of the
02:03 - structure of the app we're going to
02:04 - build
02:06 - over on this side we have the m of the
02:07 - mirn stack mongodb
02:09 - we'll be hosting this on mongodb atlas
02:12 - we also and then we have the e in the
02:14 - end this is the backend
02:16 - node in express you'll see that express
02:19 - is just part of node and this is where
02:21 - we're going to be running the our
02:22 - backend server here and then we have our
02:25 - react
02:25 - front end and we'll be running our react
02:29 - on a local server too
02:30 - inside node.js and then the client so
02:33 - this is what people will see when they
02:35 - go to the website
02:36 - to our web app so let's start by talking
02:38 - about mongodb
02:43 - first a quick overview of the mongodb
02:45 - database
02:47 - in the tabular or relational world we
02:49 - think of things like databases
02:51 - tables rows etc mongodb has similar
02:54 - concepts that use different terms
02:55 - i'd like to make sure everyone is aware
02:57 - of instead of a table we have
02:58 - collections
02:59 - instead of rows we have documents we can
03:01 - do join operations with the lookup
03:03 - operator
03:04 - and instead of foreign keys we utilize
03:06 - references mongodb is very well suited
03:08 - for handling data with a wide variety of
03:10 - relationships
03:12 - let's have a quick look at the document
03:13 - model to see
03:15 - here's an example of a mongodb document
03:18 - it looks very much like json
03:20 - we can see in here a variety of
03:22 - relationships an address a title
03:24 - here's the different data formats
03:26 - they're all in the document
03:27 - mongodb stores data in bson format or
03:31 - binary json
03:32 - this provides for a wide variety of
03:34 - support for data types like strings or
03:36 - integers
03:37 - and in our code we're sometimes going to
03:39 - have to do some converting between
03:41 - json and binary json specifically for
03:44 - the object id
03:46 - okay let's get started creating our
03:47 - database
03:52 - you can host your mongodb database
03:54 - locally but i found that it's easier to
03:56 - host the database using mongodb
03:58 - atlas so we can do everything in the
04:00 - cloud and eventually
04:02 - we will literally do everything in the
04:04 - cloud
04:05 - where our entire back end and front end
04:08 - is in the cloud
04:09 - and we can actually do it right all on
04:11 - mongodb atlas
04:13 - but for now we're just going to create
04:14 - the database we'll be using the free
04:17 - tier on mongodb
04:18 - atlas in this tutorial so the first step
04:20 - is to create an account
04:22 - or you can just sign in so once you're
04:24 - creating your account for the first time
04:26 - you're going to have to set up the
04:27 - account so you can create an
04:29 - organization
04:30 - everything's going to have to have an
04:32 - organization i'll just call bose org
04:34 - for the project name for our first
04:36 - project i'm going to put
04:37 - mern stack so i'm going to
04:40 - call this the mirnstack project and
04:43 - preferred language
04:45 - well we'll be mainly working with
04:47 - javascript and the mern stack
04:48 - so let's go past this
04:53 - and then i'm going to choose this free
04:55 - tier
04:57 - okay now we're going to be choosing
04:59 - where our
05:01 - our files are going to be stored at and
05:04 - we can just
05:04 - basically choose all these default
05:07 - options if we
05:08 - choose these default options it's going
05:09 - to be on the free tier
05:11 - you probably want to actually choose a
05:13 - location
05:14 - that's close to where you're at so if
05:17 - none of these are really close you can
05:19 - actually check
05:20 - some of these other cloud providers and
05:22 - just kind of pick the one that seems to
05:23 - be
05:24 - closest to where you're currently
05:25 - located i'll just
05:27 - keep on the default and then i'll just
05:29 - do create cluster
05:31 - and you can update the settings
05:33 - depending on what you need um
05:35 - you can actually pay more if you need a
05:38 - bigger
05:39 - cluster but for now when we're just
05:42 - learning it's
05:43 - good to start with the free version okay
05:45 - after the cluster is created
05:47 - you'll have to configure it so you can
05:49 - connect to it so click the connect
05:50 - button here
05:52 - and then we're going to have to have a
05:53 - white list ip so just add the current ip
05:56 - address
05:57 - so we'll be connecting to it right from
05:59 - our computer because we're developing
06:01 - the back end locally so i'll just add my
06:04 - current ip address
06:06 - and then we'll create a database user so
06:09 - i'll just create it as my name and the
06:13 - password is
06:14 - mernstack we'll choose a connection
06:17 - method
06:19 - and we'll be connecting through
06:22 - mongodb's native drivers
06:24 - so this is going to give us the
06:26 - connection string
06:27 - we're going to use to connect from uh
06:30 - from
06:31 - mongodb and node.js now eventually we'll
06:34 - have to come back and copy this
06:36 - but for now we'll just leave it and
06:38 - we'll come back and get this when it's
06:39 - time
06:40 - when we're doing our code in node.js and
06:42 - i can just close this for now
06:44 - and now we'll add sample data to the
06:47 - database
06:48 - one thing great about mongodb atlas is
06:51 - that
06:51 - when you're doing when you're creating a
06:52 - demo app or you're just trying to try
06:55 - things out
06:56 - there's a lot of sample data you can
06:58 - just use so you don't have to
07:00 - do all this work of finding your own
07:01 - sample data so i'm going to click these
07:03 - three dots here and go to
07:04 - load sample data set and then load
07:08 - sample data set
07:10 - and this is actually going to create a
07:12 - bunch of different
07:14 - data sets right within our cluster okay
07:17 - after the
07:18 - sample data set is successfully loaded
07:20 - we can actually use this interface to
07:22 - explore the data status
07:24 - and see what's in it so i'm going to
07:26 - click on
07:28 - collections
07:31 - and then these are all the different
07:33 - data sets are in here there's sample
07:34 - airbnb
07:35 - sample analytics geospatial inflix
07:38 - restaurants supplies
07:39 - training and weather data for this
07:41 - tutorial
07:42 - we're going to be using the sample
07:44 - restaurants data and you can see there's
07:46 - the neighborhoods data
07:47 - and there's the restaurants data and if
07:50 - we look at the restaurants
07:52 - we have a list of a bunch of restaurants
07:54 - in new york
07:56 - so this one's called the riviera carrer
08:00 - i guess i don't know how to pronounce it
08:01 - uh so it's gonna show the cuisine and
08:03 - the burrow
08:04 - and then there's also going to be an
08:06 - address for each restaurant
08:08 - so we are going to be using this data in
08:11 - our app
08:12 - so let's start creating our app we're
08:14 - going to start creating our back-ends
08:19 - so i'm going to go over to the terminal
08:20 - here i've already created a folder
08:23 - called
08:23 - restaurant reviews and i'm going to just
08:27 - make sure i have the right version of
08:28 - node
08:30 - and so that's going to be a good version
08:33 - 12.18.0
08:35 - and now we are going to first start with
08:38 - our
08:38 - back end we're going to start by
08:40 - creating the back end of the app with
08:42 - nodejs and express
08:44 - and then we'll create the front end with
08:45 - react and then like i said in the final
08:48 - section we'll switch out the node.js
08:50 - express backend with mongodb realm
08:53 - so inside this root folder i'm going to
08:55 - create a new folder called backend
09:01 - and then i'll switch into it
09:04 - okay now that i'm in this folder i'm
09:08 - going to
09:08 - we're going to create a package.json
09:10 - file inside this folder by running
09:13 - npm init
09:16 - and then okay we've initiated our
09:19 - package.json file since we're going to
09:21 - be using
09:22 - node here and now we're going to install
09:24 - a few dependencies
09:26 - so we'll do npm install we're going to
09:28 - do express
09:32 - cores mongodb and dot
09:35 - env so let me tell you a little bit
09:38 - about these
09:39 - so express is going to be what we use
09:42 - for
09:43 - the the web server it's going to help us
09:44 - make the web server
09:46 - cores stands for cross-origin resource
09:49 - sharing
09:50 - and it allows ajax requests to skip the
09:52 - same origin policy and access
09:54 - resources from remote hosts the course
09:57 - package provides an express middleware
09:59 - that can enable cores with different
10:01 - options
10:02 - basically it's going to make it so we
10:04 - can make the right connections on our
10:06 - network that we need to make without
10:07 - that we could have some errors
10:09 - and then the mongodb dependency allows
10:11 - us to interact with our mongodb database
10:14 - the emv dependency loads environmental
10:16 - variables from a dot emv
10:18 - file in the process.emv so this makes
10:21 - development
10:21 - simpler so instead of saying setting
10:24 - environment variables
10:25 - on our development machine they can be
10:27 - stored in a file
10:28 - so that all will all make more sense
10:30 - later once we actually create that file
10:32 - and i guess the last thing we'll do it
10:34 - will installed
10:36 - nodemon so if i do npm install slash
10:40 - g that means it's going to install
10:42 - globally we'll do nodemon
10:44 - and that's going to make development
10:45 - easier it helps develop node.js based
10:49 - applications by automatically restarting
10:50 - the node application
10:52 - when file changes in the directory are
10:54 - detected
10:55 - so we don't have to restart the server
10:58 - every time we make an update to our
11:00 - files okay time to create our backend
11:03 - server
11:04 - we're going to separate our main server
11:06 - code from the code that is accessing the
11:08 - database
11:09 - also the routes will be in a separate
11:11 - file
11:12 - since we will be using es6's import
11:15 - statements
11:16 - the first step is to update the
11:18 - package.json file
11:21 - in that file after the line main
11:24 - index.js we're going to add
11:27 - type and then we're going to set that to
11:31 - modules
11:33 - module that's going to allow us to use
11:36 - the import statements from es6
11:38 - okay i'll just save that and then i'm
11:41 - going to create a new file
11:43 - in the backend folder it's going to be
11:45 - called
11:47 - server.js
11:50 - now in the server file we'll configure
11:52 - an express server
11:53 - we'll attach the cores and express.json
11:55 - middleware
11:56 - since we'll be receiving and sending
11:58 - json and specify routes
12:00 - so let's start by importing everything
12:02 - we need to import
12:04 - let me just zoom in a little bit on this
12:05 - code here we're going to import
12:07 - express from
12:11 - express
12:14 - and then we're going to import cores
12:18 - from cores now i'm going to import a
12:21 - file that we still have to create it's
12:24 - just going to be
12:25 - called restaurants
12:28 - from and then the directory we're going
12:31 - to create it is
12:32 - api slash restaurants
12:35 - dot route dot js okay because we're
12:38 - going to have our routes in a separate
12:40 - file
12:41 - so that's why we're going to that's the
12:42 - file we're going to have our routes in
12:44 - so let's make our express app so const
12:49 - app equals express
12:54 - and that's what we're going to be using
12:55 - to make our server
12:57 - and now we have to apply our middleware
13:00 - so app.use so these are the things that
13:04 - express is going to use
13:07 - and that's going to
13:10 - use our our course our course module
13:14 - and then we are also going to use
13:18 - express.json so this express.json line
13:22 - this in old versions of express if
13:25 - you've ever seen other old tutorials
13:26 - they use
13:27 - a a something called body parser but
13:30 - that's now included in express
13:32 - so just doing express.json means that
13:35 - our server can accept json in the body
13:39 - of a request so if someone sends a get
13:41 - request
13:42 - or a post request to our server it can
13:46 - it'll be able to read json okay now
13:49 - let's
13:50 - specify some of the initial routes
13:53 - so we're actually going to be putting
13:56 - most of our routes in another file
13:58 - but we have to specify what our initial
14:01 - url
14:02 - is going to be so since this is an api
14:05 - the general procedure for api urls
14:09 - is to say it's an api here and then what
14:12 - version version one
14:14 - and then this is the restaurants api
14:17 - so this is going to be the url people go
14:19 - to so our or
14:21 - basically our main url which is going to
14:23 - be localhost with the port number
14:25 - and then it's going to then you put api
14:27 - v1 slash restaurants for our url
14:29 - that people have to go to and
14:32 - the routes are all going to be in the
14:35 - restaurants file
14:37 - which we still have to make but if
14:40 - someone tries to go to a different route
14:42 - let's make a a message that appears if
14:45 - anybody goes to a route that doesn't
14:47 - actually exist
14:48 - so we'll put an asterisk here so if
14:51 - anybody goes to a
14:52 - asterisk means wild card if anybody goes
14:54 - to a route that's not in our
14:57 - in our route file then we're just going
15:00 - to return
15:00 - something
15:07 - so we'll just return a 404 page that
15:10 - just says not found
15:13 - okay and now i'm going to export this
15:17 - we're going to export app as a module
15:24 - we'll then be able to import this module
15:27 - in the file that accesses the database
15:30 - which will be the file that you actually
15:32 - run to get the the server running
15:34 - we just want to separate our main server
15:37 - code from
15:38 - our database code but before we create
15:41 - that file that connects to the database
15:43 - and starts the server
15:44 - we'll create a env file to store our
15:46 - environment variables
15:48 - so i will save this i will create a new
15:52 - file
15:52 - go to new file and then this is just
15:54 - going to be dot e n
15:56 - v so this is where we're going to
16:00 - set the the uri of our database
16:04 - so we need to get the uri so to get the
16:06 - uri
16:07 - we're actually going to have to go right
16:08 - back to mongodb atlas
16:10 - so if i click connect then we go to
16:14 - choose a connection method connect your
16:16 - application
16:18 - and then we have the node.js already
16:20 - selected here
16:21 - so we just need to copy this url here
16:25 - so now let's go back to our emv file
16:30 - so in this.emv file we're going to
16:32 - create
16:34 - the variable for the the database uri
16:38 - so i'm going to be calling this rest
16:39 - reviews
16:41 - underscore db underscore uri
16:46 - and then i'll just paste the uri in and
16:49 - then i'm going to
16:50 - update some things so we got the
16:52 - username
16:53 - bo and the password is going to be
16:56 - mergedack and then i'm also going to
17:00 - have to update
17:01 - this part where it says my first
17:03 - database this database
17:05 - the database we're going to access is
17:07 - the sample
17:08 - the sample restaurants database
17:13 - and then we have to create another
17:15 - variable called
17:17 - rest reviews
17:23 - ns and we're going to set this to the
17:26 - first database again
17:27 - so this is going to be sample
17:29 - restaurants
17:30 - and now we have to set the port this is
17:33 - going to be the the starting port that
17:35 - the server is going to start off
17:36 - to 5000 and then we're going to create a
17:41 - new file
17:42 - i'm going to go new file and it's going
17:44 - to be called index
17:46 - dot js so
17:49 - in this file we're going to
17:52 - connect to the database and start the
17:54 - server
17:55 - so first we're going to just import the
17:58 - file we already created from
18:02 - server.js so that's the file we already
18:05 - created
18:06 - we're also going to import mongodb
18:09 - because we're going to be accessing
18:12 - mongodb
18:14 - and then we're going to import dot
18:18 - e and v this is what allows us to access
18:20 - our
18:21 - environment variables
18:27 - now we have to configure env so we'll
18:30 - load in the environment variables
18:37 - and then we have to get access to our
18:40 - client from
18:43 - mongodb
18:48 - oh this would be const now we have to
18:51 - create our port number
18:54 - or we need to set our port from our
18:56 - environment variable so to access
18:58 - an environment variable we'll just do
19:00 - process dot e and
19:01 - v dot and then we put whatever we
19:04 - specified in our
19:05 - emv file which was porch so port is the
19:08 - port number
19:09 - and if somehow that cannot be accessed
19:12 - we will make it eight thousand
19:15 - okay now we will connect to the database
19:18 - so we go to client dot
19:22 - connect so
19:25 - and once we connect to the database
19:26 - we're going to pass in some information
19:28 - we're going to have to pass in the
19:29 - database uri
19:31 - which is process dot env
19:35 - so this is our environment variable rest
19:38 - reviews db
19:44 - uri so that's the name we created
19:48 - now we'll pass in the options for
19:50 - accessing the database
19:52 - and we want to make it so only 50 people
19:55 - can connect at a time
19:58 - so pool size 50 and we'll
20:01 - set the w timeout to 2500.
20:06 - so after 2500 milliseconds the request
20:09 - will timeout
20:11 - and then use new url parser
20:15 - is going to be set to true that is added
20:18 - because the mongodb
20:20 - node.js driver rewrote the tool that it
20:22 - uses to parse mongodb connection strings
20:24 - and because it's such a big change they
20:26 - put the new connection string parser
20:28 - behind the flag
20:30 - so now we're going to catch any errors
20:32 - so if there's an
20:33 - error
20:39 - we're just going to console.air or log
20:42 - the error
20:46 - stack
20:49 - and then we'll just exit the process
20:56 - after we've connected to the database
20:59 - and checked for errors
21:01 - now we can do something then
21:04 - we're gonna create a function here async
21:08 - client and
21:14 - app.listen and app.listen is how we
21:18 - start
21:19 - our web server so we're finally starting
21:21 - our web server after the database is
21:22 - connected to
21:24 - so we're gonna listen at the port
21:31 - okay we're just going to log that
21:32 - listening on the port
21:34 - and we're done so we've connected to the
21:36 - database
21:37 - and we've started our web server it's
21:40 - almost time to test out the backend
21:42 - server
21:43 - but first we need to make a route so
21:46 - let's create a new directory called
21:47 - api so
21:51 - new folder api and then i can
21:55 - also create a new file that way and the
21:56 - new file is going to be called
22:01 - restaurants.route.js
22:03 - so this is a file that we've already
22:05 - referenced in one of our other files
22:08 - okay this time instead of typing
22:09 - everything i'll just paste in and kind
22:11 - of explain
22:12 - what the code does first we're just
22:14 - going to import express from express
22:16 - then we'll get access to the express
22:18 - router
22:19 - because this is our route file we're
22:21 - going to be creating the different
22:22 - routes that people can go to
22:24 - and then right now it's just going to be
22:26 - one route we're going to be adding more
22:27 - routes
22:28 - and this is just a demonstration route
22:30 - so the route is just slash
22:32 - so just if you just go to the root url
22:36 - then it's going to respond with hello
22:39 - world
22:40 - so let's just save that and now we can
22:42 - actually
22:43 - test our program so far uh just so
22:47 - you remember from in the server.js is
22:51 - where we access the file that we just
22:53 - created
22:54 - and it's going to have to start with
22:56 - this
22:57 - so i'm actually going to copy this
23:00 - because
23:00 - every route is going to start with this
23:03 - and then
23:03 - it will at the end of the route you'll
23:05 - add whatever's here
23:07 - okay let's try starting the server
23:18 - okay since we didn't get any errors that
23:20 - means we successfully connected
23:22 - to our database so we're not accessing
23:26 - anything in the database yet but we're
23:28 - actually at least connected to the
23:29 - database
23:31 - let's go to our browser and check the
23:34 - the url that we created
23:36 - so go to the url bar i'll type in local
23:38 - host
23:40 - 5000 and then i'll do
23:44 - api slash v1 slash restaurants
23:50 - and then i'll just go to that page and
23:52 - you can see right here
23:54 - it says hello world
23:57 - so it worked and if we go to any other
23:59 - url
24:01 - like if i go to slash nine or something
24:03 - it'll say air not found
24:05 - looks like we have a mistake here so let
24:07 - me go and fix that it shouldn't have
24:08 - this little
24:09 - part when it says not found so let's go
24:12 - back to
24:12 - our so let's go back to our code
24:18 - and where do we oh here's where we have
24:20 - the extra
24:22 - character there
24:25 - okay well everything is working
24:29 - now we will make the data access object
24:31 - that will allow our code to access
24:33 - restaurants in the database
24:35 - so let's create a directory called dao
24:39 - for data access object
24:46 - and inside this directory we'll create a
24:48 - new file
24:51 - restaurant dot
24:54 - or d-a-o dot js
24:57 - now in this file i'm going to paste in
24:59 - some code and then i'll
25:01 - show you what all it all means so
25:04 - let me show the code here
25:08 - okay so first we're going to create a
25:11 - variable called restaurants that we're
25:12 - going to use to
25:14 - store a reference to our database
25:18 - and so we're going to export this class
25:20 - called restaurants
25:21 - dao and we're going to have a few
25:23 - methods here's the first methods
25:25 - and these are all going to be async
25:27 - methods and this is the inject database
25:30 - method
25:31 - so basically this is how we initially
25:34 - connect to our database and we're going
25:36 - to call this method
25:38 - as soon as our server starts so as soon
25:40 - as our server starts we're going to
25:42 - get a reference to our restaurants
25:45 - database so if there already is the
25:48 - reference if this is already filled
25:50 - we're just going to return
25:51 - but if this is not filled already we're
25:53 - going to
25:55 - fill that variable with a reference to
25:57 - that specific database
25:58 - so we're going to try to connect so you
26:00 - can see this we're going to
26:02 - wait for this and so connection
26:07 - this is we're trying to connect to our
26:09 - database and this is
26:11 - the name of our database this is our
26:12 - environmental variable
26:14 - and we're specifically trying to get the
26:16 - collection
26:17 - restaurants so let's go back
26:20 - to the mongodb atlas interface and i can
26:24 - show you
26:25 - where this database actually is right
26:26 - from the interface
26:28 - so if i click on collections here
26:32 - and we have restaurants and see in this
26:35 - sample restaurants
26:37 - section of the database we have
26:39 - neighborhoods
26:40 - and restaurants so we're specifically
26:43 - trying to get
26:44 - the restaurants and not the
26:45 - neighborhoods we're not even going to
26:47 - use the neighborhoods data
26:48 - in this project
26:53 - so that's what this collection
26:54 - restaurants is
26:56 - and if we're able to successfully get it
27:00 - then great if not we're gonna send this
27:03 - error message to the console
27:05 - okay so we're gonna we're gonna add the
27:08 - call to this right when we connect to
27:10 - the
27:10 - the database for the first time right
27:11 - when the server runs
27:13 - and then the other function is the
27:16 - get restaurant so this is the only other
27:18 - function that i just added or the only
27:20 - other method that i just added and this
27:22 - is what we'll
27:23 - call when we want to get a list of all
27:26 - the restaurants
27:27 - in the database so first of all there's
27:30 - some options
27:31 - now these are options that we just
27:34 - created
27:35 - that we just made up specifically for
27:37 - this method
27:38 - and you so when you when we call this
27:42 - method
27:43 - you can put in what filters you want if
27:45 - you want to sort things based on the
27:47 - name of the restaurant the zip code or
27:49 - the cuisine
27:50 - what page number you want because
27:52 - there's going to be a lot of restaurants
27:54 - so you may not want to get all of them
27:56 - at once you're only going to get
27:57 - actually 20
27:59 - at once with this default setting so
28:02 - it's default to page zero it's default
28:05 - to uh
28:06 - 20 restaurants per page and then
28:09 - we're going to put together a query
28:12 - now first it's going to be empty and it
28:14 - may stay empty unless
28:16 - someone has passed the filters unless
28:18 - we've called called the get restaurants
28:20 - method with some filters and there are
28:23 - three different filters that we've set
28:25 - up
28:26 - there's the the name filter so we can
28:29 - search
28:30 - by name of the restaurant or we can
28:33 - search by the cuisine of the restaurant
28:35 - or we can search by the zip code of the
28:38 - restaurant
28:39 - and these are three different types of
28:41 - searches
28:42 - queries are very powerful in mongodb and
28:45 - there's a bunch of different things you
28:46 - can do
28:47 - now i'm just going to show you three of
28:49 - them right here but if you want to learn
28:51 - more about how you can query with
28:53 - mongodb
28:54 - check the resources in the description
28:56 - of this video first of all let's look
28:58 - at the the cuisine and the zip code
29:01 - so we're just seeing if it equals if
29:05 - the cuisine from the database from the
29:08 - entering the database
29:10 - equals
29:13 - the cuisine that was passed in so
29:16 - filters cuisine
29:18 - means that we've called the get
29:20 - restaurants method
29:21 - and we've passed in the a filter of what
29:24 - the cuisine is going to be
29:27 - and so we're actually going to search
29:28 - for that specific cuisine
29:30 - where we're going to search for a an
29:33 - entry in the database
29:34 - where the zip code equals the zip code
29:36 - that was passed in
29:38 - and then this is a little different to
29:41 - search
29:41 - to do a text search um we're going
29:44 - instead of searching for something
29:46 - that's equal
29:47 - we're going to search for any a text
29:50 - search is we're going to search
29:51 - anywhere in that text we're going to
29:53 - search for
29:54 - this name so you can see that
29:58 - here this is a database field this is a
30:01 - database field
30:02 - but when we're searching for the name
30:03 - there's no database field in here so how
30:06 - does it know which field to
30:07 - search for for the name that was passed
30:10 - in
30:11 - well we actually have to set that up in
30:14 - mongodb
30:15 - atlas so we'll do that later but we're
30:18 - going to specify
30:19 - in mongodb atlas that if someone does a
30:23 - text search which fields from the
30:26 - database
30:27 - will will be searched for that specific
30:30 - string
30:30 - so we'll set that up later so we're
30:33 - going to get the filters we're going to
30:34 - set the query
30:35 - to be either to be one of these three
30:38 - queries
30:39 - depending on which filter was passed
30:41 - into this method
30:43 - and then we're going to get a cursor and
30:45 - then we're going to
30:47 - await restaurants dot find query so
30:51 - this is going to find all the
30:53 - restaurants from the database
30:55 - that go along with the query that we
30:58 - passed in
30:59 - if there is no query if we just had this
31:02 - blank query and it wasn't set to
31:04 - anything
31:04 - then it's just going to return all
31:06 - restaurants
31:08 - and then we're going to catch an error
31:10 - and then we'll just return
31:11 - that's an empty list and 0 for the total
31:14 - number of restaurants if there's an
31:15 - error
31:16 - but if there's no error now we're going
31:18 - to
31:19 - limit the results because it return in
31:22 - the cursor is every single result
31:24 - but we're going to limit to restaurants
31:27 - per page
31:28 - the default is 20 and then to get the
31:32 - actual page number we do a skip
31:35 - so we're going to skip from the
31:36 - beginning to whatever page number
31:39 - we're at so we're going to multiply
31:41 - restaurants per page
31:42 - times the page number to get to a
31:45 - specific page of the results
31:48 - then we just set this to an array
31:51 - the restaurants list to an array and
31:53 - then
31:54 - we return the array
31:58 - and this can actually be
32:02 - changed here to get the total number of
32:05 - restaurants
32:06 - we don't need all this here so to get
32:08 - the total number of restaurants
32:10 - we're just going to count the documents
32:13 - in the query
32:14 - and then we can return the restaurants
32:17 - list
32:18 - and the total number of restaurants or
32:20 - if there's an error we just return
32:22 - this okay
32:25 - let me save that now we'll use the
32:28 - methods
32:29 - that we just went over that we just
32:30 - added to this file
32:32 - to access the database from our other
32:34 - files so let's go to index.js
32:38 - and in this one we are going to add at
32:41 - the beginning
32:42 - that we're going to import that file
32:45 - so import restaurants
32:48 - deo from
32:53 - d a o slash
32:57 - restaurants
33:00 - d a o dot j s
33:04 - so we have gotten a reference to
33:07 - this file and i'll just copy that
33:11 - and then it's gonna be right down here
33:14 - so right after we've connected to the
33:16 - database
33:17 - right before we start our server we are
33:19 - going to
33:20 - call that inject db
33:23 - so await
33:26 - restaurants inject db
33:30 - and we're going to pass in the client
33:35 - so this is how we get our initial
33:37 - reference to the
33:38 - restaurants collection in the database
33:44 - okay now we're going to create the
33:45 - controller that the route file will use
33:48 - to access
33:48 - the deo file so let's go
33:52 - let's save this i'll go to
33:54 - restaurants.route.js
33:58 - and we will need to make it so it uses
34:00 - the controller file we are
34:02 - about to create so the controller file
34:05 - is going to to be what is what the route
34:08 - uses
34:09 - so i'm going to import
34:14 - restaurants
34:18 - controller from
34:27 - restaurants.controller.js
34:29 - and now instead of sending this instead
34:32 - of getting this
34:33 - i'm going to do restaurants.controller
34:36 - dot api get restaurants
34:41 - and that's something we still have to
34:43 - create so
34:46 - now we're going to get what's going to
34:48 - be returned
34:50 - at this route that's going to come from
34:52 - this file here the restaurants
34:54 - controller file
34:55 - and then this method which we're going
34:57 - to create right now
34:59 - so let me save that and then inside the
35:03 - api folder create a new file
35:06 - and this one's going to be called
35:15 - dot restaurants.controller.js now it
35:17 - looks like
35:20 - we've got some things in the wrong spot
35:22 - this dao directory should be
35:26 - in the back end directory
35:29 - okay yeah so in the backend directory we
35:31 - have the api directory
35:33 - and the dao directory okay in the
35:36 - restaurant.control.js file i will paste
35:38 - in some code
35:39 - and then we'll go over it like last time
35:42 - so
35:42 - first we're going to import the other
35:45 - file we created
35:47 - the restaurantsdeo.js and then we're
35:50 - creating this restaurant controller
35:52 - class
35:53 - and there's a few methods actually right
35:56 - now there's just one method
35:57 - which is the api get restaurants and
36:00 - when this is
36:01 - when this api call is is called through
36:03 - a url
36:05 - there can be a query string a query
36:07 - string is how we can
36:09 - specify certain parameters and you'll
36:12 - see that when we do a test later but
36:14 - when you're typing in the the url
36:16 - you type in question mark and then the
36:18 - key value pairs that you want to pass
36:20 - in to this to this api
36:24 - and so one of the query strings that we
36:26 - can
36:27 - that we have is called restaurant stop
36:29 - restaurants per page
36:31 - so we are going to set this variable
36:34 - restaurants per page
36:35 - to equal whatever value is passed in
36:37 - through the url the query in the url
36:42 - so first we're going to check if this
36:44 - even exists in the url
36:46 - if this exists then we are going to
36:50 - convert it to an end we're going to get
36:53 - this restaurants per page and convert it
36:54 - to an integer
36:56 - if not the default is 20 here then
36:59 - we are going to do the same thing with
37:00 - the page number we're going to see if
37:02 - we've passed in
37:03 - a page number with the url then we're
37:06 - going to convert it to an
37:07 - end and then if not
37:10 - then we're going to get this zero the
37:12 - page number is just going to be zero
37:14 - now we're going to do the same thing
37:15 - with the filters so the filter is going
37:17 - to start off
37:18 - with as an empty object but if
37:22 - we see the cuisine query string then
37:25 - filters.cuisine is going to be set to
37:28 - the query string
37:30 - if zip code is in the query then we'll
37:33 - set the filter.zip code to the zip code
37:35 - if name is in the query then we'll set
37:38 - the filters.name to the name
37:41 - pretty soon once i get this all set up
37:43 - to show an example
37:44 - i'll show you exactly what those query
37:46 - strings look like
37:47 - and this will make a lot more sense if
37:49 - you're not familiar with what query
37:50 - strings are
37:52 - okay now we are going to call
37:55 - this get restaurants that's the thing
37:58 - that we just created
37:59 - we created before so we are going to
38:02 - pass
38:03 - in the filters the page and the
38:05 - restaurants per page
38:07 - and it's going to return a restaurants
38:09 - list and then the total number of
38:11 - restaurants
38:12 - and that's what we specifically made it
38:13 - return now
38:15 - we are going to get a response we're
38:18 - going to
38:18 - create a response to send to the person
38:22 - or to sit to respond when this api
38:25 - url is is called so we're going to
38:29 - respond with the restaurant list
38:31 - the page number the filters the
38:34 - restaurants per page
38:35 - and then the total number of restaurants
38:38 - and then rest.json response
38:40 - is one we're going to send a rest json
38:42 - response with all this information
38:45 - to whoever called this url
38:49 - okay i'm going to save that and now we
38:51 - can finally
38:53 - test to see if our backend server can
38:56 - actually
38:57 - access the database
39:00 - so let me go back to my web browser
39:03 - and then we're going to go to the api
39:06 - slash v1
39:07 - restaurants and if i call that we should
39:09 - see
39:11 - okay we have an error it looks like we
39:12 - made a mistake and it looks like i have
39:15 - a
39:15 - spelling error so let's see where that
39:18 - spelling error was
39:21 - right here okay so
39:24 - let's fix that so after some
39:28 - troubleshooting
39:30 - i realized i have this spelled wrong
39:32 - this file spelled wrong
39:34 - someone go to rename and
39:38 - control there's an r in that word
39:41 - controller
39:44 - okay now let's go back to
39:48 - this and refresh and you can see it
39:51 - sends back
39:53 - all the restaurants
39:57 - now we can keep testing the api right
40:00 - within
40:01 - the browser but it's better to use
40:05 - another tool when you're testing api
40:07 - so over here i have a tool called
40:10 - insomnia
40:12 - now another very popular one is called
40:15 - postmen
40:16 - postmen and insomnia basically do the
40:18 - same thing so if you have postmen you
40:20 - can use postman for this
40:21 - i'm going to use insomnia and then we're
40:23 - going to be making a
40:24 - get request so go to uh
40:28 - local shows 5000 slash api slash v1
40:32 - slash restaurants
40:38 - and now we can see all the restaurants
40:40 - on the side here
40:46 - so you can see each one that has the
40:47 - address it has
40:51 - the burrow the cuisine uh we're not
40:54 - gonna do anything with these grades in
40:55 - this project
40:56 - but we have the name here and now
41:00 - let's check using some of our
41:03 - filters that we created so in our api
41:07 - that we create in our server
41:08 - we can filter by zip code so let's
41:11 - filter by this zip code c10012
41:15 - so what i'm gonna do
41:19 - is put a question mark now a zip code
41:23 - equals one zero zero one
41:26 - two and i'll send that
41:30 - okay look this zip code is zero zero one
41:32 - zero zero one two let's see if that what
41:34 - the next one is
41:35 - one zero zero one two one zero zero one
41:39 - two so it's all filtered by that zip
41:41 - code
41:41 - if we scroll down to the bottom we can
41:43 - see everything that else that's returned
41:45 - so we have the page number we have the
41:48 - filters which is a zip code
41:51 - and then we have the entries for page 20
41:54 - and total results
41:55 - 407. there's four 407 restaurants with
41:59 - that that zip code
42:01 - and we could switch to page
42:04 - two so i'll show you how you would do
42:06 - that
42:07 - so we can see the first one right now is
42:10 - a restaurant
42:11 - called
42:15 - angelica film center but if i
42:18 - do and page
42:22 - equals two
42:25 - uh let's see i messed it up two and then
42:28 - i click send
42:30 - okay now the first restaurant is cafe
42:35 - and if we go all the way to the bottom
42:37 - we're now on
42:38 - page two there's still the same number
42:40 - of results
42:41 - and we have 20 per page
42:45 - so let me zoom in even more here
42:49 - and
42:56 - we are going to do a search by cuisine
43:00 - and then i'm going to do american
43:05 - okay so american cuisine
43:08 - american cuisine
43:12 - and now i'm going to search by
43:15 - name now this one actually is not going
43:19 - to work so we haven't got this set up
43:20 - yet
43:21 - but let's search for let's see a name
43:25 - let's see a restaurant name let's just
43:28 - search for
43:28 - um food what restaurant has the word
43:32 - food in its name okay
43:35 - not found this is the thing i said that
43:37 - we need to set up
43:38 - right within mongodb atlas so let's go
43:42 - and do that right now
43:43 - okay i'm on mongodb atlas
43:47 - i'm in my database under restaurants and
43:50 - i'm going to click
43:51 - indexes i'm going to create
43:54 - a new index let me see if i can make it
43:57 - so you can see this better
43:58 - here we go so i'm going to create an
44:00 - index
44:02 - actually i realized before we create it
44:04 - we want to confirm that we know the
44:06 - exact
44:06 - field so let's go go to see what the
44:09 - fields are
44:10 - so we know the only field we want to
44:12 - search for is the name
44:13 - field so let's go back to indexes create
44:16 - index
44:18 - and then we'll do name
44:24 - and for the type it's going to be text
44:33 - i'll review that
44:37 - confirm and now it's going to create our
44:41 - index
44:43 - now let's go back and see if that that
44:46 - search works so i'm going to send the
44:50 - same search
44:52 - and now it works now that we created
44:55 - that index
44:56 - and let's look at the names of the
44:58 - restaurants
44:59 - well this one's all about food this
45:02 - one's
45:02 - feel food this one's king
45:06 - food so it's searching for the word food
45:09 - all about indian food it's searching for
45:12 - the keyword
45:13 - food in the name of the restaurant so we
45:15 - have this part of the api
45:17 - working okay the whole point of this app
45:21 - is that people can leave reviews
45:24 - for certain restaurants so let's go back
45:27 - to our route file
45:29 - and we're going to create the routes for
45:31 - people to
45:32 - post put and delete reviews so post is
45:36 - to create a new review
45:37 - put is to edit a review and delete is if
45:40 - you want to delete your view
45:41 - so let me add those routes right now
45:51 - okay so we have router dot route
45:54 - and so up here we just made a single get
45:56 - request
45:58 - but now we are going to be able to make
46:00 - the post put
46:01 - and delete all within this one router
46:04 - call to the router so for the route
46:07 - review
46:08 - if it's a post acp request it's going to
46:11 - use
46:12 - this method here put this method
46:15 - and delete this method now we still have
46:17 - to create those
46:18 - methods and we actually have to import
46:22 - the file that we haven't created yet
46:24 - but i'll do that right now
46:28 - reviews and then this is going to be the
46:30 - reviews controller
46:33 - okay now let's create these methods that
46:35 - will be called when people go to these
46:37 - different routes
46:40 - so in the api i'm going to create a new
46:43 - file
46:44 - and it's going to be called
46:50 - reviews.controller.js
46:52 - okay so i've pasted in some code for the
46:54 - reviews controller
46:55 - i'm just going to review it so we start
46:57 - off by importing the reviews deo which
46:59 - we still have to create
47:01 - so we'll do that right after this and
47:03 - then we're going to create the reviews
47:04 - controller class
47:05 - and then there's going to be three
47:07 - methods we have the post review method
47:10 - and then we are going to get some
47:11 - information from the body
47:13 - before we got information from the query
47:15 - parameter and now we're going to get
47:16 - information right from the body of the
47:18 - request
47:19 - so we get the restaurant id and we get
47:22 - the text
47:23 - of the review and then for user info
47:25 - we're going to get the the name of the
47:27 - user id from the body
47:28 - and you'll see how all this works when
47:30 - we test it later and i'll show you how
47:32 - you send this information through the
47:34 - body we're going to get a new date
47:36 - and then we're going to put that all
47:37 - together we're going to send that
47:39 - to the ad review data which we still
47:41 - have to create it's going to send this
47:43 - information the restaurant id user info
47:45 - review and date
47:47 - and then in this other file which we're
47:49 - going to create will actually
47:50 - send that to the database but it's going
47:54 - to return
47:54 - success if it worked and then there'll
47:56 - be an error message if it didn't work
47:59 - and our next method is update review and
48:02 - it's pretty similar we're going to get
48:03 - the information from
48:05 - the body the review id the text
48:08 - those are the only things we need
48:09 - they're just the review id and the text
48:10 - we're going to update
48:11 - we're going to automatically create a
48:12 - new date and then we're going to update
48:14 - the review
48:15 - oh we also need the the user id we're
48:17 - going to get that in the body too
48:19 - and we just send it all all over and
48:22 - that's how we know if we're updating the
48:25 - so we get the user id
48:27 - because we want to make sure the user
48:28 - who created the review is the same one
48:30 - who's trying to update the review
48:33 - and then we just check if there's an
48:35 - error and return the error message
48:37 - if the modified count equals zero that
48:39 - means that the review was not updated
48:42 - and then we can throw an error here
48:45 - okay the final method is the delete
48:48 - review
48:49 - this is going to be a little different
48:50 - this is going to actually have a query
48:51 - parameter instead of
48:52 - the in the body the the id to be deleted
48:56 - is going to be a query parameter right
48:57 - in the url
48:58 - and then we're going to get the user id
49:00 - right in the body
49:02 - now this is admittedly non-standard for
49:05 - delete request for http delete requests
49:08 - it's
49:09 - non-standard to have anything in the
49:11 - body but
49:12 - for this example we're going to do it
49:14 - normally you would do this is
49:16 - this is just like a simple version of
49:19 - authentication
49:20 - this is nothing that you would do in a
49:22 - production environment
49:23 - but for this example we're going to
49:26 - check the user id in the body to see if
49:28 - it's the same
49:29 - user id that created the review before
49:31 - it's deleted in a production environment
49:33 - you're going to have a little more
49:34 - complex things you're not going to
49:35 - actually include anything in the body in
49:37 - the delete request
49:38 - and then we are going to call the delete
49:41 - review
49:42 - and then send over the review id and the
49:44 - user id and if it says success
49:46 - will respond with success or else we'll
49:49 - have an error
49:51 - okay i've been talking about the reviews
49:53 - dale a lot
49:54 - so let's create that now i'm going to
49:58 - create a new file and it's going to be
50:00 - called
50:01 - reviews
50:04 - deo dot js
50:08 - okay pasted in the code for the reviews
50:11 - deo
50:12 - it's very similar to the restaurants one
50:16 - first we're going to import this stuff
50:19 - up here mainly so we can get access to
50:22 - object id we're going to have to convert
50:24 - a string to a mongodb object id and
50:27 - that's what we're going to use this for
50:28 - we're going to get three views this is
50:30 - going to just be an empty variable but
50:32 - we're going to fill it
50:33 - with a reference to the reviews
50:35 - collection
50:36 - just like before we're going to have the
50:39 - injectdb
50:40 - and um we're going to see if if the
50:43 - reviews already exist then we're just
50:45 - gonna return but if not
50:46 - we are going to access the database and
50:49 - then we're gonna access the reviews
50:51 - collection
50:52 - and one great thing about mongodb is
50:55 - that
50:56 - it's okay if it doesn't exist already it
50:58 - will just automatically be created if it
51:00 - doesn't already exist
51:01 - whenever we try to insert a document
51:04 - into it
51:05 - and then the first thing we're going to
51:07 - do is to add
51:08 - a review and you can see it takes a
51:12 - restaurant id
51:12 - a user a review and a date and then
51:15 - we're going to create this review dock
51:17 - here
51:18 - and we are going to actually
51:21 - create a an object id from this
51:24 - and then we are going to
51:28 - insert it and then it'll just insert it
51:32 - right into the database
51:33 - with the the rest id converted to a
51:36 - mongodb
51:37 - object id and then if there's an error
51:39 - i'll return the error
51:40 - and then for the update review we're
51:42 - accepting review id a user id
51:44 - text and the date and the text is the
51:46 - text of the review
51:49 - and you can see that we are setting
51:52 - well first of all you can see that we
51:54 - are looking for a review
51:56 - that has the right review id and also
51:59 - has the right user id
52:01 - we only want to update a review if it
52:03 - was created by the same user that's
52:06 - trying to update it
52:07 - and then we'll just set the new text and
52:09 - the new date
52:11 - and then return the update response or
52:13 - return error
52:14 - and then delete review it's the same
52:15 - we're going to
52:17 - get the i we're looking for a review
52:20 - that has
52:20 - the the id and also the user id so it's
52:24 - the same
52:25 - user that created that review and if so
52:28 - we're going to delete
52:29 - that review and then return the delete
52:31 - response or to
52:32 - return the console.log here
52:36 - okay we're going to test out adding
52:38 - review but first let's get a list of
52:40 - restaurants because
52:41 - we're going to need this restaurant id
52:43 - because we're going to add the review to
52:45 - this
52:45 - restaurant id so now i'm going to
52:48 - make a post request
52:52 - and then i make it to review at the end
52:54 - now here's the body that we have to send
52:56 - over
52:57 - so first we have to send over the
53:00 - restaurant
53:02 - id and that's going to be this thing
53:05 - that i just copied from over there
53:07 - and then we need the text of the review
53:10 - which is going to be
53:11 - great food and then
53:16 - we need the user
53:20 - id
53:23 - which is going to be one two three four
53:26 - that can be a string or a number
53:28 - and i will put name
53:31 - so the name of the person leaving the
53:33 - review
53:34 - which will be oh now i'll just send that
53:38 - over
53:39 - success let's go over to
53:42 - the mongodb atlas interface i'm going to
53:45 - refresh and this is how we're going to
53:46 - see
53:47 - if it got successfully put into our
53:49 - database
53:50 - so we're on reviews and here it is look
53:54 - we got text great food we got the user
53:56 - id we got the name
53:58 - we got the restaurant id
54:01 - and everything got entered correctly now
54:04 - let's see if we can
54:05 - edit it so to edit it we are going to
54:08 - need
54:09 - the object id number
54:13 - so let me copy this
54:18 - and we'll go back over here this is
54:20 - going to be a
54:22 - put request instead of restaurant id
54:24 - it's going to be
54:25 - review id
54:31 - and then we'll put that here now we can
54:34 - keep the user id and the name in there
54:37 - because it has to check to see if the
54:39 - same user id is creating that review
54:42 - and then we are going to change the text
54:45 - to
54:46 - [Music]
54:47 - bad food bad food so
54:50 - if i send that success let's go back
54:54 - over here now
54:57 - this whole uh tutorial isn't really
55:00 - about
55:01 - the like the most secure user
55:03 - authentication methods
55:05 - so this is just all about how to use
55:08 - mongodb atlas how to set up
55:09 - the basic mern stack so if you're really
55:12 - looking for how to get the most secure
55:16 - database as far as user authentication
55:19 - you're going to have to check out
55:20 - another tutorial so i'm just using some
55:22 - basic things as far as sending the user
55:24 - id
55:25 - with this request and checking for that
55:27 - so if you want to learn more about
55:29 - security with mongodb and mongodb atlas
55:32 - check the resources in the description
55:35 - but you can see
55:36 - it has changed to bad
55:39 - food so we've updated this
55:42 - item now let's see if we can delete it
55:45 - so let's go back over here again
55:47 - and to delete it we're going to to make
55:49 - this into
55:51 - the delete the query request we can do
55:53 - question mark
55:54 - and then review
56:00 - or wait wait is id let me see it's just
56:03 - id
56:05 - id equals that we'll just delete the
56:09 - stuff in here and it's okay if you send
56:11 - extra stuff
56:12 - in the body just as long as it has the
56:14 - required fields
56:16 - so i'm going to change this to a delete
56:18 - and then
56:19 - click send cannot read property id of
56:22 - undefined
56:23 - so let's see what that means
56:29 - oh this user this one there shouldn't be
56:32 - a dot there
56:34 - okay now let's check this send
56:37 - and success okay so let's go over here
56:41 - we will refresh
56:49 - zero result it's been deleted so now we
56:53 - added a review editor review and
56:56 - deleted a review we are getting
56:59 - close to being done with the back end
57:01 - there's just two more things we're going
57:03 - to add
57:04 - we want to be in the let's go see the
57:07 - routes we're actually going to add
57:09 - two more routes to the route file
57:12 - for the restaurants
57:15 - so i'm just going to paste these in here
57:16 - and i'll explain them so
57:18 - now we're going to instead of getting
57:20 - this gets a list of all restaurants
57:21 - we want to get a list a specific
57:24 - restaurant
57:25 - with a specific id when you get to that
57:29 - specific
57:29 - restaurant not only is it going to give
57:32 - all the information that you get when
57:33 - you get all the restaurants
57:35 - you're also going to get a list of all
57:37 - the reviews
57:38 - that are associated with that restaurant
57:41 - and then
57:42 - we're going to have a route for cuisines
57:44 - we want to get a list of all
57:46 - just return a list of cuisines the
57:48 - reason why we're going to do that
57:50 - is because on our front end we want a
57:52 - user to be able to select the cuisine
57:55 - from a drop down menu
57:56 - instead of just having to have all the
57:58 - cuisines memorized
57:59 - and the way we're going to populate that
58:01 - drop down menu is from this route right
58:03 - here
58:03 - so you can see these are both routes
58:06 - from the restaurants controller
58:08 - file and so we have to make both of
58:11 - these
58:12 - from the restaurants controller so i'm
58:14 - going to save this
58:15 - i'm going to pop over to restaurants
58:16 - controller and then we are going to add
58:20 - so right now we have this method here we
58:22 - just have to add two more
58:23 - methods for those other routes so
58:26 - i'm going to paste in some code here and
58:28 - then we'll look at it so get restaurants
58:30 - by
58:31 - id we're just going to look for a
58:33 - parameter the id parameter
58:36 - so a query is is something that's after
58:39 - the question mark in the url
58:41 - a parameter is just write something
58:43 - that's right after in the url
58:45 - after a slash and then the body is
58:48 - in the body of the request so we're
58:50 - going to get
58:52 - this this item this this id and then we
58:55 - are going to call the restaurants
58:58 - get restaurants by d which we still have
58:59 - to create passing the id
59:01 - and we're going to get the restaurant
59:02 - back there's no restaurant we return an
59:05 - error or we return the restaurant
59:08 - and then we also if there's another air
59:09 - we can return that
59:11 - so also get restaurant cuisines
59:15 - this time it's not going to need to
59:16 - accept any parameters or anything like
59:18 - that
59:19 - it's just going to get get cuisines and
59:21 - that's going to return
59:23 - the cuisines or there's going to be an
59:24 - error okay that was pretty
59:26 - straightforward
59:28 - so now we have to go into the
59:30 - restaurants deo
59:31 - and finish that up there this is where
59:34 - it gets a
59:35 - little more complicated okay so now let
59:38 - me just
59:38 - paste in this new code here and let me
59:41 - review it so
59:42 - get restaurants by id so this is going
59:45 - to be more
59:46 - complicated because we're com we're
59:48 - going to be trying to get the reviews
59:50 - from one collection and put it into the
59:52 - the restaurant
59:54 - so first of all you see that we're using
59:57 - object id
59:58 - we're going to have to add the same code
60:00 - that we had in
60:02 - the restaurants deo
60:05 - to get access to the object id here so
60:08 - let's go over here
60:11 - add this at the top
60:16 - okay so let's look at how this works
60:19 - we are going to create a pipeline
60:22 - so this is uh one thing that's pretty
60:25 - cool about mongodb
60:27 - db is that you can create certain
60:29 - pipelines that help
60:31 - um match different collections together
60:35 - so we're first of all we are trying to
60:37 - get
60:38 - we're specifically trying to match the
60:40 - id of a certain
60:42 - restaurant but then
60:45 - we are going to look up some other
60:48 - items which are going to be the reviews
60:50 - to add to the result
60:52 - this is part of the mongodb aggregation
60:55 - pipeline
60:56 - lookup is only one part of it the
60:59 - aggregation pipeline is a framework for
61:01 - data aggregation
61:02 - modeled on the concept of data
61:04 - processing pipelines
61:06 - documents enter a multi-stage pipeline
61:09 - that transforms the documents
61:11 - into aggregated results it's very
61:13 - powerful and i'm only going to touch on
61:15 - a small part of it in this tutorial
61:17 - check out the resources in the
61:18 - description if you want to learn more
61:20 - about it
61:21 - mongodb atlas data explorer and compass
61:24 - can assist in creating pipelines
61:26 - so from the reviews collection we are
61:30 - going to create this
61:31 - pipeline that's going to match
61:34 - the the restaurant id and then we're
61:38 - going to find
61:38 - all the reviews that match that
61:40 - restaurant id
61:42 - and we are going to set that to be
61:45 - reviews
61:45 - and the result is going to be listed as
61:48 - reviews we're going to add this
61:50 - we're going to add a field of reviews
61:52 - and that's going to be a new thing in
61:54 - the results
61:55 - now if you check the description i'm
61:57 - going to link
61:58 - to a a a guide that shows you how to
62:02 - create these pipelines
62:04 - so if it will give you all the
62:05 - information about creating the exact
62:07 - pipeline that you need if you're trying
62:08 - to do something a little different than
62:09 - this
62:11 - okay then we are going to aggregate the
62:14 - pipeline which is to
62:16 - collect everything together and we're
62:18 - going to return that we're going to
62:19 - return
62:20 - the the next item which is the the
62:24 - restaurant with all the reviews
62:25 - connected
62:27 - and then for get cuisines this is kind
62:29 - of the simplest thing here
62:30 - we have an empty array here we're just
62:33 - going
62:34 - to await restaurants.distinct
62:37 - cuisine that means we're going to get
62:39 - all the distinct
62:40 - cuisines one of each cuisine because a
62:42 - lot of restaurants have the same cuisine
62:44 - so you're going to get each cuisine one
62:47 - time
62:47 - and we're just gonna return those
62:48 - cuisines and that's all
62:52 - so we got that saved it's time to test
62:55 - this out again
62:56 - so let's just look at our routes file
62:59 - again
63:01 - that's not it here we go so we're going
63:05 - to
63:05 - test we've tested this route this route
63:08 - this route this route
63:09 - now we're going to test these two routes
63:11 - first we're going to test the cuisines
63:13 - route
63:13 - so restaurant slash cuisines
63:17 - and then this is going to be a get
63:18 - request if i send for that
63:20 - and now here's all the cuisines you can
63:22 - see it's just a list here
63:24 - and later we can use this to populate
63:26 - the drop down menu
63:27 - now we're going to do the id one so
63:30 - we're gonna look for a
63:31 - well first of all let's get a list we
63:33 - need to get a restaurant id
63:35 - so if i sent oh before that
63:39 - let's make another review because we
63:41 - when we get a specific restaurant id we
63:43 - want the reviews to come back as well
63:46 - so i'm going to make i'm going to
63:49 - get the list of restaurants
63:52 - and get that restaurant id now i'm going
63:56 - to review
63:58 - post and let's do
64:01 - [Music]
64:03 - restaurant
64:05 - id and we'll put that id in there
64:12 - and then we will do the review which is
64:14 - going to be text
64:17 - it's going to say nice
64:21 - and then let's try another one that's
64:24 - going to say
64:26 - bad and this is going to be from a
64:28 - different person i'm going to put one
64:29 - two three
64:31 - four six and this is just going to say
64:34 - quincy
64:35 - now i'll send that okay now we have two
64:38 - reviews
64:39 - and we have this restaurant id so i'm
64:41 - gonna copy that id
64:43 - slash and i'm gonna paste in the
64:44 - restaurant id right there and this time
64:46 - i'm gonna do a get request
64:48 - and see what happens okay so we just got
64:51 - this specific restaurant id
64:55 - if we scroll down now we have the
64:57 - reviews look this is
64:59 - this is an array so remember quincy says
65:02 - bad
65:03 - bo says nice so it worked we were able
65:07 - to get a list of the reviews for the
65:09 - restaurant that way
65:10 - now we never really need to get an
65:13 - individual review so
65:15 - we don't actually have any route we
65:17 - don't have a get rid out around to get a
65:19 - review because we'll we'll never be
65:21 - getting just an
65:22 - individual review we'll just be getting
65:24 - all of the reviews
65:25 - or just editing and editing a review so
65:29 - we are done with our backend server
65:33 - all the route to work and now we're
65:35 - going to create our front end and
65:36 - connect it to our back end
65:42 - okay we got the back end of our project
65:44 - created with node in express
65:47 - now we're going to create the front end
65:49 - so let's go back
65:51 - to our root directory our restaurant
65:53 - reviews directory
65:54 - and now we're going to create the front
65:56 - end so
65:58 - here i'm going to use create react app
66:00 - so
66:01 - i'm going to use mpx you may have to
66:03 - install if you don't already have it
66:04 - installed
66:05 - and i'll do create react
66:10 - app and then i'm just going to call it
66:12 - the front end
66:14 - because it's the front end of our app
66:16 - now this is going to create
66:18 - a basic react project
66:21 - that will be able to update for our
66:23 - purposes
66:28 - now before we start actually actually
66:30 - editing our files and creating our front
66:32 - end
66:33 - we're going to install one more thing
66:35 - npm install
66:36 - bootstrap this is a css framework
66:41 - and it's just going to make designing
66:43 - our app much simpler
66:45 - we're not going to do any custom css for
66:47 - this project we're just going to
66:48 - use what's included in bootstrap and now
66:52 - we're going to install
66:54 - uh npm install
66:57 - react router dom
67:01 - we are going to be using react router to
67:04 - route
67:04 - different urls to different pages on our
67:06 - site
67:07 - so let's go over to visual studio code
67:10 - we're going to close the backend folder
67:12 - and open up the front end folder
67:14 - now in this src folder we have app.js
67:18 - this is the entry point for our react
67:20 - app
67:21 - so this is what we're going to start
67:22 - with modifying
67:25 - i'm not going to go over all the details
67:27 - about how react
67:28 - works so it's good to have some
67:29 - understanding about react
67:31 - but even if you're new to react you
67:33 - should still be able to follow along
67:35 - i'm going to be using some parts of
67:36 - react hooks but again we're not going to
67:38 - go into a lot of detail
67:40 - so if you like are really interested in
67:42 - react hooks there's some other tutorials
67:43 - for that but we will be using that and
67:45 - i'll be explaining them a little bit
67:46 - here
67:47 - so the first thing we're going to do is
67:49 - just do some imports
67:51 - so we're actually going to update pretty
67:53 - much everything in this file
67:54 - and we're not going to use this logo
67:56 - we're not going to use this css
67:57 - i'm going to actually paste in these new
67:59 - imports we're going to
68:00 - import react and we're going to from and
68:03 - then from react router dom
68:05 - switch route and link because we're
68:07 - using react router to
68:09 - create our different url routes that
68:10 - people are going to go to and route to
68:12 - the different
68:13 - react components and then we just have
68:15 - our bootstrap here
68:17 - this is what we're going to be using to
68:19 - style our whole
68:20 - app okay in this app i'm going to
68:24 - erase everything that's being returned
68:26 - here
68:27 - actually just inside this div
68:31 - and for now i'm just going to type in
68:33 - hello
68:34 - world we're going to make sure
68:37 - everything is working so far
68:39 - so if we go back over to our terminal
68:42 - i'm in the front end directory and i can
68:44 - just do npm start
68:49 - on it open up local 3000 in my browser
68:51 - says hello world
68:53 - so let me just zoom in more on that
68:56 - hello
68:57 - world okay let's go back to our
69:01 - code and we're going to start making
69:03 - this a little more complex
69:07 - so this file is going to have a header
69:11 - with some navigation on it and it's
69:14 - going to have a route
69:15 - where the main part of the page can
69:17 - switch between a few different routes
69:20 - so let's start with our component so
69:23 - we're going to start by creating some
69:24 - simple
69:25 - components that then our router will
69:27 - load the different components depending
69:29 - on
69:30 - which url that someone is going to or
69:32 - which route someone's going to
69:34 - so let's open up the file browser here
69:36 - and then
69:38 - under this src folder i'm going to
69:41 - create a new folder
69:42 - called components
69:48 - inside components i'm going to make
69:49 - three new files we're going to have
69:52 - a restaurants list file
69:59 - which will list the restaurants we're
70:02 - going to have a
70:04 - [Music]
70:05 - restaurants.js file which would be a
70:07 - single restaurant
70:09 - we are going to have an ad
70:12 - review which will obviously
70:16 - be used to add a new review and then a
70:19 - login.js which is the login page
70:22 - so now that we have that we're just
70:24 - going to make a
70:26 - a simple thing for each one right now so
70:29 - let me just
70:30 - copy what we have here and i'm going to
70:33 - go to add review
70:34 - we're just going to start off by making
70:35 - something
70:37 - really simple
70:41 - and i will call this ad
70:44 - review and we're going to
70:48 - export ad review
70:52 - and then we're basically going to do the
70:53 - same thing for each with one of these
70:56 - this is going to be login
70:59 - this is going to be
71:05 - restaurants list
71:08 - and then oh this is spelled wrong so let
71:10 - me
71:11 - rename this
71:17 - and this is just gonna be restaurants
71:27 - okay so now that we have all these
71:30 - created
71:33 - let me make sure they're all saved okay
71:36 - now we can start creating the rest of
71:39 - our main
71:40 - file that's going to be the link to
71:42 - those others
71:45 - so since we are going to be linking to
71:48 - those
71:48 - other components i made we have to
71:50 - import them at the top
71:52 - so that's what i'm doing here i just
71:54 - paste it in so we're going to import
71:55 - every view from component slash add
71:57 - review
71:58 - restaurant restaurants list and login
72:03 - and now let's see what we're going to
72:04 - return here
72:07 - okay i just pasted in some new code for
72:10 - what this is going to return
72:12 - and i'm going to go over it right now
72:14 - it's going to start with the nav bar
72:16 - now let me just highlight the nav bar
72:18 - here now this nav
72:20 - bar is just basically copy and pasted
72:23 - from the bootstrap documentation
72:26 - so bootstrap has all these different
72:28 - components and suggested ways of how to
72:30 - make them
72:31 - and so one way you can do if there's a
72:33 - component you want you go over to the
72:34 - bootstrap documentation
72:36 - you can copy the code for that and then
72:39 - you can update it for your purposes
72:41 - so this is just a basic bootstrap nav
72:44 - bar
72:44 - and it's going to have three different
72:47 - links
72:48 - the first link you can see is going to
72:50 - be
72:51 - so it it's all so this is how the navbar
72:54 - style that's going to be
72:56 - these different things are different
72:57 - bootstrap classes
72:59 - that are used to expand to style the
73:02 - navbar
73:03 - the first link is this one right here
73:05 - which is going to be
73:06 - the main almost like a logo that the
73:10 - main the main
73:11 - brand or class name is nabar brand which
73:14 - is the name of the website
73:15 - restaurant reviews sometimes this would
73:17 - be an image or logo this is just me text
73:20 - and it's just going to go to slash
73:22 - restaurants
73:23 - and you'll see soon that slash
73:24 - restaurants and just slash are they
73:26 - going to be go to the same
73:28 - the same url the same component
73:31 - and then there'll be two other buttons
73:33 - in the nav bar
73:35 - and they're going to be set a little
73:36 - different they're they're the nav bar
73:38 - nav so this is the
73:40 - the brand part of the nav bar and these
73:41 - this is the navigation part of the net
73:43 - nav bar
73:44 - and the first item is just going to be
73:48 - to link
73:49 - to restaurants now this link part
73:52 - that's that's imported right from react
73:55 - router dom
73:56 - and that will route to a different
74:01 - url which is going to load a different
74:03 - component so if you click on the word
74:05 - restaurant
74:06 - it's going to link to restaurants and
74:08 - then we have this next section
74:10 - now this is going to be one link but
74:13 - it's going to look different
74:15 - depending on our a variable
74:18 - so it can either look like saying
74:22 - login which will link to the login page
74:26 - or it can say log out and then the
74:29 - user's name the user not that name so it
74:31 - could say log out
74:32 - bow and if it says this on click it's
74:35 - going to
74:36 - run a function the log out function
74:40 - and we still have to create the log out
74:42 - function
74:43 - it's going to determine whether it's
74:45 - going to show log out
74:46 - or log in because of whether
74:50 - the user exists so this is a ternary say
74:53 - statement
74:53 - now in react we can use these brackets
74:56 - here
74:57 - to put in some code so
75:00 - these curly braces not brackets these
75:02 - curly braces
75:04 - are putting in some code and the code is
75:06 - a ternary
75:07 - statement where we're going to say user
75:09 - if that's true or false it's true
75:11 - if there is a user it's false if this is
75:13 - null
75:14 - and then the question mark uh is going
75:16 - to say that the first item
75:18 - after the question mark is what happens
75:20 - if it's true
75:21 - and then we have a colon the second
75:24 - section after the colon is going to
75:29 - be if it's false so if there is a user
75:32 - we're going to return this code if
75:35 - there's
75:35 - not a user we're going to return this
75:38 - which is to log in so while we're
75:41 - talking about the log
75:42 - out function we we we're going to
75:44 - implement the login logout function
75:46 - we're also going to make a user
75:49 - variable state a state variable so right
75:52 - up here
75:55 - actually right here the first line
75:58 - is we are going to create a user
76:01 - variable in the state
76:02 - now here we are going to use react hooks
76:06 - and the method is just like this
76:09 - const user
76:13 - set user
76:19 - react dot u state
76:26 - null
76:30 - okay so the react.ustate
76:34 - is a way to to create and create
76:38 - a state variable that you can use in
76:40 - your react app and this is going to be
76:42 - the initial value which is null and so
76:46 - it's going to set null to the user
76:48 - variable and then we also have a setter
76:50 - so we can use set user this is a
76:53 - function that we can use to
76:54 - update the user variable later in our
76:57 - program
76:58 - so now we have the user variable and now
77:01 - we're going to create two functions the
77:03 - login function and the logout function
77:06 - we'll create these as async functions so
77:08 - async
77:09 - function
77:13 - login and
77:16 - you're going to pass in we're going to
77:18 - pass in the user but we'll default it to
77:20 - null
77:24 - and then we're going to set user to
77:27 - user so now
77:31 - if you call the login function and pass
77:33 - in the user
77:34 - this user variable will be updated with
77:36 - the user that you pass them to that
77:38 - function
77:39 - and then we can also do a similar thing
77:41 - with the logout function
77:43 - so async function log out
77:51 - set user null
77:55 - okay so when you log out it's just
77:56 - making the user null there is no user
77:59 - you've been logged out just so you know
78:01 - for this app i'm not going to be
78:03 - implementing a full
78:04 - login system i'm going to be basically
78:07 - implementing a dummy login system
78:09 - that's a little out a full login system
78:11 - is a little outside the scope of what i
78:13 - want to teach in this tutorial
78:15 - so we're just making a dummy login
78:17 - system which is basically a form
78:19 - that someone when when someone uh fills
78:21 - out the form they click log
78:22 - in it's just going to set the user with
78:24 - that those details and it's not even
78:26 - going to save the user to the database
78:28 - or anything like that
78:30 - this is just kind of a dummy login
78:32 - system that you can easily
78:34 - update with a more fully full-fledged
78:37 - login system
78:38 - you can maybe even set it up to use
78:41 - google sign in
78:42 - or some sort of authentication provider
78:46 - but for now we're just having a dummy
78:47 - system just for this example
78:50 - but we have this login and log out
78:53 - function
78:54 - and so if someone clicks log out it's
78:56 - going to log out the user here
78:59 - and if they click login it's going to go
79:01 - to this url
79:02 - and this is going to be a page we can
79:04 - log in that we still have to create
79:06 - but let's just keep scrolling down we
79:08 - are past
79:10 - the navbar section and now we're going
79:13 - to have
79:13 - basically the the route section
79:17 - or the rest of the page so this is the
79:19 - rest of the page here
79:21 - and it's we are going to use a
79:24 - switch to switch between a few different
79:27 - routes
79:28 - so the first route is either going to be
79:31 - slash or slash restaurant
79:33 - and that's going to load this component
79:35 - restaurants list
79:37 - the second route is one that i don't
79:40 - actually need
79:42 - i was trying something out and i ended
79:44 - up not he's
79:45 - deciding not to use that that thing that
79:48 - last route so the next route is
79:51 - restaurants
79:52 - slash id slash review so up here
79:56 - we do a component equals restaurant list
79:59 - here
79:59 - instead of doing components we're going
80:01 - to do render the reason why
80:03 - we're using render instead of components
80:05 - is because this allows us to
80:07 - pass in the props to the component that
80:11 - we're loading
80:12 - so here we're loading restaurants list
80:13 - here we're loading the ad review
80:15 - component
80:16 - and we're passing in the props we're
80:18 - passing in the user
80:20 - to this ad review component also
80:23 - uh we'll be able to access this
80:26 - id variable from from that
80:30 - component and then we also have the
80:32 - route of the restaurants slash id
80:35 - so this would be loading a spec and this
80:38 - is going to load the
80:39 - the restaurants component and then we
80:42 - have the login route
80:43 - and that's going to load the login
80:44 - component so those are all the routes
80:48 - we have the the route that the
80:50 - restaurant list
80:51 - route the ad review the restaurant route
80:54 - and the login route where it says
80:57 - restaurant that made me realize that
81:00 - this should be a singular okay
81:03 - let's start with creating the restaurant
81:06 - list
81:06 - component which is going to list all
81:09 - the restaurants now a key part of
81:13 - listing
81:14 - all the restaurants is getting the
81:16 - restaurants
81:17 - from the database we have to get a list
81:20 - of restaurants
81:21 - from the backend server that's connected
81:24 - to our mongodb
81:26 - database and then we're going to need to
81:30 - display those in the restaurants list
81:34 - okay i'm just checking over on the
81:36 - browser to see how it's looking
81:38 - and i see an error so it's obviously
81:40 - it's really good to check
81:42 - your to check things and test things
81:44 - frequently to see if you have an error
81:46 - and then it reminded me of something
81:47 - that we forgot to do it says you should
81:49 - not use a link
81:51 - outside a router so let's go back over
81:54 - here
81:54 - and so we had updated the app.js
81:58 - file but there's a file that we need to
82:00 - update also that's actually even loaded
82:02 - right before app.js
82:04 - which is the index.js and this
82:07 - is really what kind of loads everything
82:09 - else and react
82:11 - so most of this stuff we don't
82:14 - even need so we don't need the css file
82:17 - because we're just using bootstrap
82:20 - we don't need this web vitals
82:24 - but we are going to need something from
82:27 - react router
82:28 - so we're going to import
82:32 - browse browser router
82:38 - from react
82:41 - router dom
82:47 - okay and instead of this react strict
82:50 - mode
82:51 - we are going to be using browser router
82:54 - so we're going to put browser router
82:59 - and we don't we're not even going to
83:01 - mess with this web
83:02 - vitals thing so i'm going to save that
83:06 - and then let's go over here
83:10 - and see how it's looking now it says
83:13 - hello world so let's test all of our
83:16 - routes actually so that's the
83:17 - restaurants list
83:18 - we have the login that also says hello
83:20 - world i guess i could have made these
83:22 - say
83:23 - different things so you would know that
83:24 - they're working so
83:26 - like for instance if we switch login we
83:29 - could actually just type in
83:30 - login here if i save that and then now
83:33 - restaurants
83:34 - log in so those routes are working
83:39 - okay well let's update our restaurants
83:42 - list like i was saying we're gonna need
83:44 - to get
83:46 - a list of restaurants and the list of
83:48 - restaurants
83:49 - has to come from the database
83:52 - so we have to figure out we have to we
83:54 - have to implement some code
83:56 - that's going to get
83:59 - information from our backend server
84:02 - we're going to create a separate file
84:05 - for that
84:06 - so this is going to be under a new
84:09 - directory
84:10 - called services so
84:13 - here i'm going to click new folder and
84:15 - put services
84:19 - so underneath source we have components
84:22 - and services and underneath services
84:26 - we're going to create a new file
84:27 - called restaurant
84:32 - dot js and we are going to use a library
84:35 - called
84:36 - axios for the get request the post
84:38 - request
84:39 - the put request and the delete requests
84:42 - and we're going to create a some
84:44 - helper file that's going to kind of set
84:46 - up axios how we want it to work
84:48 - and we're going to import that into this
84:50 - file so in the source
84:52 - directory again we're going to create a
84:54 - new file called
84:55 - http common.js
84:59 - this will be our helper file okay in
85:02 - this http common file
85:04 - i just pasted in some code we're
85:05 - importing axios
85:07 - which while i'm thinking about it let's
85:09 - make sure we install that so let's go
85:11 - over to
85:13 - here wait which one this one
85:17 - we're going to close stop the server
85:20 - and do mpm install axios
85:27 - okay got it axios installed now we'll
85:29 - just restart the server
85:32 - okay back to this http common file
85:35 - so we're just setting two things
85:38 - the base url which this is the url
85:42 - of our backend server locals 5000 slash
85:44 - api plus v1 slice restaurants
85:46 - and then this is the base url and all
85:49 - the other routes for our backend server
85:51 - come after this and then we're just
85:54 - going to set
85:55 - the header and now we're going to be
85:58 - able to import this
85:59 - and make our http
86:02 - post get delete requests and stuff like
86:04 - that
86:06 - more easily with all these things being
86:07 - set automatically
86:09 - i'm going to save this and then i'm
86:11 - going to go back into
86:12 - the services restaurant.js
86:16 - and then i'm just going to import that
86:17 - file that we just created
86:19 - import http from
86:22 - [Music]
86:23 - slash http
86:26 - common
86:30 - and then i'm going to make a class
86:32 - called
86:33 - [Music]
86:34 - restaurant
86:37 - data service
86:42 - this is where we're going to make all
86:44 - the
86:45 - functions that are going to make api
86:48 - calls
86:48 - and return the information from the api
86:51 - calls
86:53 - okay i'm going to just paste in all of
86:56 - these
86:56 - functions that we're going to use for
86:59 - the different
87:00 - http requests so the first request is
87:03 - going to be
87:04 - for get all so if you call get all it's
87:06 - going to have a default page number of
87:08 - zero
87:09 - and it's going to do a hp
87:13 - get request of this url now this url
87:16 - just added this is what's added to the
87:19 - end of this base url
87:21 - so this base url is already the url
87:24 - for doing the get all and then you can
87:28 - add the page
87:29 - number also what what page you want and
87:31 - then if you want to
87:32 - get a specific id a restaurant of a
87:36 - specific id the url
87:37 - is this base url but slash id
87:41 - and then with the id in here and then
87:44 - find the find is going to take
87:48 - three things the query
87:52 - which is the actual search term or
87:55 - number
87:55 - the number if it's a zip code or search
87:57 - term if it's a cuisine or a name
87:59 - and what you're searching by you're
88:01 - you're either going to be searching by a
88:03 - name
88:03 - by a zip code or by a cuisine and the
88:06 - actual search is the query
88:07 - and then what page number you want so
88:10 - it's going to do a get request
88:12 - and this is what it's going to add to
88:14 - the end of the base url
88:16 - and it's going to be like zip code
88:20 - by equals and then the query is going to
88:22 - be what the zip code is and the page
88:24 - number here
88:25 - create review is just going to do a post
88:27 - request this last review with the with
88:29 - the data
88:30 - update review put request with the data
88:34 - delete delete with and but you're going
88:36 - to have the id on the end
88:37 - or get cuisines okay
88:40 - now we can start creating
88:44 - our component our restaurant list
88:47 - component
88:48 - first of all let's import a little more
88:50 - things so
88:51 - we are also going to be using the you
88:53 - state and use effect from react hooks
88:56 - we're going to import our restaurant
88:58 - data service
88:59 - which is the thing that we just created
89:02 - and then we're also going to get a link
89:03 - from react router dom
89:05 - i'm just going to update this so it's a
89:07 - different type of function
89:09 - so this is going to const
89:12 - restaurants list equals props
89:16 - so this is how it's going to be able to
89:18 - take the props and use the props
89:20 - as part of this function this component
89:25 - so we're going to use react hooks to
89:28 - create a bunch of state variables
89:31 - so here we are we're creating the
89:34 - restaurants variable which is going to
89:36 - start as an
89:36 - empty array and then the search name
89:39 - search zip and search cuisine
89:41 - so we're going to keep track of what
89:45 - someone's searching for on the
89:47 - restaurant list
89:48 - and then also the cuisines the reason
89:51 - why we have these
89:53 - is because right on the restaurants list
89:56 - page people are going to be able to
89:59 - search
89:59 - for these all these items so we need to
90:02 - have variables for all the items that
90:04 - people are searching for
90:06 - okay i just put in some more code here
90:07 - that i'm going to review we have here we
90:09 - have the use effect
90:11 - this is the way that react hooks this is
90:14 - the way you tell react that your
90:15 - component needs to do something
90:17 - after render so after rendering it's
90:20 - going to retrieve
90:21 - the restaurants and retrieve the
90:24 - cuisines
90:25 - and these are functions we can look at
90:28 - those functions right now
90:29 - so here's one of them retrieve
90:31 - restaurants so we're doing the
90:32 - restaurant data service dot
90:34 - get all and that's something that we
90:38 - just
90:38 - created in the data services and then
90:41 - it's going to
90:42 - log the data but more importantly it's
90:44 - going to set the restaurants to be the
90:46 - response that restaurant
90:47 - data.restaurants
90:49 - and so this is going to go into
90:52 - the restaurants state and we're also
90:56 - going to retrieve
90:57 - the cuisines very similar we're going to
91:01 - use the data service to get cuisines
91:03 - and we are going to log them and then
91:05 - we're going to set the cuisines
91:07 - now we're going to add so this is going
91:10 - to be in the drop down menu
91:11 - so instead of just putting the response
91:15 - dot data
91:16 - into the cuisines variable first we're
91:19 - going to
91:20 - start with an all cuisine element
91:24 - and then we're going to concat to this
91:26 - array the rest of the data
91:28 - so the first element in the data is
91:30 - going to be all cuisines
91:31 - so that's going to be the first item in
91:33 - the drop down menu if you don't want to
91:34 - select a specific cuisine but you want
91:36 - to show all the cuisines
91:38 - so if we go back up here you'll see soon
91:41 - that there's going to be a form at the
91:42 - top of the page
91:44 - and people can search for by name zip
91:46 - code or cuisine
91:48 - so if someone searches for a name a zip
91:50 - code or a cuisine
91:52 - these three functions are going to when
91:55 - someone types into the search box
91:57 - we're going to take the value of the
91:58 - search box and we're going to set the
92:00 - name or set the zip or set the cuisine
92:03 - to whatever thing that the person typed
92:06 - in or in the case of the
92:07 - cuisine if they selected it so let's
92:10 - keep going down here
92:12 - here's a function to refresh the list of
92:14 - restaurants
92:16 - if that's needed one of the times is if
92:19 - someone searches for all cuisines
92:21 - it will retrieve all the restaurants
92:24 - okay now if someone tries to
92:28 - find something now this function is
92:30 - actually going to be called
92:32 - from these functions so someone's going
92:35 - to type in the name that they're going
92:36 - to search for and they're going to click
92:38 - the button
92:38 - to search once the button is is clicked
92:42 - then we're going to call this function
92:43 - find by name and they want to call the
92:46 - find
92:46 - and pass in the search name and the name
92:49 - if they're finding my zip we're going to
92:51 - pass in the search zip and zip code
92:53 - if they're refining by cuisine we're
92:55 - gonna find
92:56 - by we're gonna pass in the search
92:58 - cuisine that they selected
93:00 - and the word cuisine or if they have
93:02 - selected all cuisine we're just gonna
93:04 - refresh the list
93:05 - so then it goes to this find function
93:08 - the find function
93:09 - is going to pass in the query
93:13 - and the buy so for example here the
93:14 - search name and the
93:16 - buy is the name so we're going to call
93:19 - the restaurant data service
93:20 - with the query and the buy if we go back
93:23 - to the data services
93:31 - we can see the query and the buy so buy
93:35 - would be
93:37 - name so let's say the name we're looking
93:39 - for all
93:40 - restaurants that have the word food and
93:42 - the name so by would say
93:44 - name and then query would say food
93:47 - or by could say zip code and then query
93:50 - could be
93:51 - the number of the zip code
93:55 - so after we get the result of the find
93:58 - we're going to console log the data and
94:01 - then we're going to set
94:02 - restaurants to be whatever comes back
94:05 - from the the backend server okay those
94:08 - are all the functions
94:10 - so let's go really quick over the html
94:12 - that we're creating
94:14 - now we're making heavy use of bootstrap
94:16 - so most of these classes are directly
94:18 - from bootstrap to help style things
94:21 - and we can see that we have an input
94:24 - group
94:25 - because at the top of the page we're
94:26 - going to have three
94:28 - input boxes or or three ways that people
94:30 - can search the first one
94:33 - is searching by name and impop input box
94:36 - which is going to say search by name and
94:38 - the value is gonna be the search name
94:40 - and on change is gonna be on change
94:41 - search name
94:42 - to so as soon as someone types something
94:45 - it gets set
94:46 - as the name and then we have the second
94:49 - one or well then we have the button so
94:51 - if someone clicks this button
94:52 - and on click it's going to find by name
94:54 - then we have this next section which is
94:56 - the search by
94:57 - zip is going to be just like the one we
94:59 - just saw for name but it's going to be
95:01 - for the zip so someone can
95:04 - change the search dip and they click the
95:06 - button it's going to find my zip
95:08 - and then the final one is going to be a
95:09 - little different it's going to be a drop
95:10 - down menu
95:11 - for the cuisines we're going to see all
95:14 - this in just a second on the page
95:16 - but we're going to select unchange so on
95:18 - change it's going to do on
95:19 - change search cuisine it's going to set
95:21 - the cuisine variable to the cuisine that
95:22 - the person selected
95:24 - and to get the cuisines in the list
95:27 - we're going to use this react function
95:30 - this map function cuisines remember
95:31 - cuisines is the list of cuisines
95:33 - and we're going to map it and for each
95:35 - cuisine in that array
95:37 - we're going to return an option for the
95:40 - select box
95:41 - and the value is going to be the cuisine
95:43 - and then
95:44 - the reason why it's substring 0 20
95:46 - because some cuisines are very
95:48 - very long and we want to make sure the
95:52 - search box isn't too long so we're going
95:54 - to just have it
95:56 - just the first 20 characters or is that
95:59 - 21 characters
96:00 - just the first little bit of the cuisine
96:03 - and
96:04 - so people and search the cuisine and
96:06 - they click the button it'll find my
96:08 - cuisine
96:09 - okay now the next section is we have
96:12 - another row here a row is from bootstrap
96:15 - and we're going to use another map
96:17 - function to map through the restaurants
96:19 - array
96:19 - we're in react this curly braces
96:23 - means that it's going to be some sort of
96:26 - javascript code
96:27 - and for each restaurant
96:31 - we're going to first get
96:34 - the address so we're going to be putting
96:36 - the address of each
96:38 - restaurant and the address in the
96:41 - database is actually three different
96:43 - fields we have the building
96:45 - which is like the number then we have
96:47 - the street
96:49 - then we have the zip code
96:53 - so we're just going to put that on to
96:55 - one string that we can use
96:58 - and so for each restaurant we're
97:00 - returning
97:02 - this whole thing right here which again
97:05 - is directly from bootstrap and there are
97:07 - different cards and each card is going
97:09 - to have the name of the restaurant
97:11 - the cuisine the address
97:16 - and then there is going to be a
97:19 - link to view reviews and if you click
97:21 - this rank
97:22 - link it's going to go to this new route
97:25 - ralph
97:25 - restaurant slash and then it's going to
97:27 - have the restaurant id
97:33 - and then also there's going to be a link
97:35 - here to link to
97:37 - google maps so the reason why we have
97:41 - one of the reasons we got this variable
97:42 - up here so we can use it both
97:44 - here and we can use it for this link to
97:46 - google maps so
97:48 - it's going to use this link from google
97:51 - maps and it's just going to put the
97:53 - address
97:54 - on the end which is actually going to
97:56 - create a link
97:57 - to a google maps of that exact address
98:00 - and then we have a bunch of classes from
98:02 - bootstraps and it's going to be called
98:04 - view map
98:07 - let's test this out and see what it
98:08 - looks like i'm going to save this
98:10 - okay and here's our page so here are the
98:14 - three different
98:15 - search boxes i was talking about and
98:17 - here we can
98:18 - select a cuisine if we want and you can
98:20 - see it's cut off like we
98:21 - mentioned but most of the cuisines are
98:24 - are less than
98:25 - those characters and then we can see
98:29 - all the restaurants and it cuts off
98:32 - at 20. so we can search by
98:35 - cuisine if i click search here now it's
98:38 - just going to show
98:39 - the african cuisine restaurants
98:42 - or i can search by name and put
98:45 - food click search and now all the
98:49 - restaurants have the word food in them
98:51 - or i can search by zip code
98:53 - let's do one zero zero one four and
98:56 - click search
98:57 - and now all the restaurants
99:01 - have the zip code of one zero zero one
99:04 - four and if i click on view map
99:08 - let's see what opens here the google map
99:11 - opens
99:12 - if i zoom in let's see if it even shows
99:15 - the name of that restaurant i zoom in
99:17 - look it says one if by land two if by
99:20 - sea right there
99:21 - and that is actually the name of the
99:23 - restaurant from our database one if by
99:25 - land 2 if by c
99:26 - so that actually took us to the map
99:30 - so let's say we want to go back to all
99:32 - cuisines
99:33 - and all cuisines is also means that
99:37 - you can only search for one thing at a
99:38 - time so if i click all cuisines it's
99:40 - going to go back to every restaurant
99:43 - another thing really quick right now i
99:45 - do not have any pagination and i don't
99:47 - plan to add any pagination
99:49 - but because of how the api is set up it
99:51 - would be pretty simple to add the
99:53 - pagination yourself
99:54 - so you could make something at the end
99:56 - where you can maybe you would make
99:58 - something at the be
99:58 - the end of the data or maybe the
100:00 - beginning of the data
100:02 - where you could click next page previous
100:04 - page and then go through the different
100:05 - pages
100:06 - for the front end we do not current i do
100:08 - not currently have that
100:09 - in the code but that's just like an
100:11 - extra thing you could try to
100:13 - add in but let's go to view reviews
100:16 - well right now it just says hello world
100:18 - because so we the route is restaurant
100:20 - slash the id
100:21 - and we have not created anything for the
100:24 - reviews yet
100:26 - that's what we need to create now we
100:27 - need to create
100:29 - what it looks like when you're viewing
100:30 - an individual restaurant with the
100:32 - reviews
100:33 - so let's go back over to our code we are
100:37 - going to open up
100:38 - the restaurants file
100:42 - and let's update the import so we're
100:44 - going to also import used
100:46 - stay in use effect and the restaurant
100:48 - data
100:49 - service and i'm going to change this to
100:52 - the other kind of function where
100:57 - props
101:01 - now i'm just going to paste in some code
101:03 - again and we'll review it but we're
101:04 - going to create the initial
101:06 - restaurant state which has all the
101:08 - fields but they're just set to empty or
101:11 - null and then we're going to create a
101:14 - restaurant
101:15 - we're going to use the initial
101:16 - restaurant state to set up the
101:18 - restaurant which is just
101:20 - all these null and empty fields and then
101:24 - the use effect okay when the use effect
101:27 - is going to be called
101:28 - when the page when the component first
101:30 - renders and
101:32 - how it has the this array here
101:35 - with just this the id in the end in the
101:38 - array
101:39 - that means this use effect is only going
101:41 - to be called
101:43 - if this id is updated so if this
101:46 - component is called multiple times it's
101:48 - only going to call the get restaurants
101:50 - again if this id is updated
101:54 - so it's going to call get restaurants
101:56 - with the id
101:57 - and that's where it's going to load the
102:00 - restaurant
102:02 - through the data service restaurant data
102:04 - service and they get the id
102:05 - and then it's going to set the
102:07 - restaurant as response.data
102:10 - and it's going to log that or else if
102:12 - there's an error it will log the error
102:16 - and one thing you're going to be able to
102:17 - do in here is
102:19 - delete a review now this will only
102:23 - you'll only be able to delete if you are
102:25 - logged in as the user who created that
102:27 - review
102:29 - but when you do delete a review it's
102:32 - going to need
102:32 - a review id and the index
102:36 - of the review from the review
102:39 - array which is the state the reviews
102:43 - the review variable from the state
102:46 - so we're going to delete call delete
102:48 - review with the review id
102:50 - and then with the response we are going
102:53 - to set
102:54 - the restaurant with to be that array
102:57 - the restaurant array without the
102:59 - restaurant that was deleted
103:01 - so we're going to take the previous
103:02 - state of the restaurant array
103:04 - and we're going to splice
103:08 - the index of the one that was deleted so
103:10 - whatever review is deleted we're going
103:11 - to delete from the reviews
103:13 - array and then we're going to return
103:15 - that previous state with this
103:17 - spliced array with with the array that
103:19 - was deleted removed
103:20 - back into the restaurants array
103:25 - else or i'm not else but if there's an
103:27 - error we're going to log the error
103:29 - now let's update the actual html that's
103:32 - returned from here
103:36 - so we're going to check to see if there
103:38 - is a restaurant
103:39 - so remember whenever you see the
103:40 - squiggly brace we're just about to put
103:42 - in some code
103:43 - and the code is a ternary operator okay
103:46 - so if there is a restaurant
103:48 - well first let's look what happens if
103:49 - there's no restaurant if we go down this
103:51 - line here
103:52 - with the ternary operator if there's no
103:55 - restaurant
103:56 - it will say no restaurant selected
103:59 - so if somehow you get to this
104:02 - you are this route and there's no
104:04 - restaurant i'll say no restaurant
104:05 - selected
104:07 - but most of the time there's going to be
104:08 - a restaurant and it's gonna
104:11 - that's what the so the first thing after
104:13 - the question mark is if it's true if
104:14 - there is a restaurant
104:16 - we're gonna we're gonna put the
104:18 - restaurant name
104:19 - we're going to say what the cuisine is
104:22 - say what the address is what the
104:24 - building
104:25 - the street the zip code
104:29 - and there's also going to be a button
104:31 - add review
104:33 - which will link to this route
104:34 - restaurants
104:36 - slash the restaurant id slash
104:40 - review so that's the route to add a
104:43 - review to that restaurant
104:46 - now we're going to list the reviews so
104:48 - first there's this new heading of the
104:50 - reviews
104:53 - and if restaurant reviews that length is
104:57 - more than zero that means there's some
104:59 - reviews we're going to do something
105:00 - if not it's going to show you what if
105:02 - not it's going to say no reviews yet
105:05 - but if there are reviews we're going to
105:08 - map over the reviews and for each review
105:11 - and then also we're going to get the
105:13 - index of each item in that reviews array
105:17 - for each review now we always have to
105:20 - have a key so the key is going to be the
105:21 - index
105:22 - for each review we're going to put the
105:25 - text now these are going to be cards
105:27 - this is just part of bootstrap to show
105:28 - cards we're going to put the review text
105:31 - and they're going to have the user which
105:32 - is the name the name of the user
105:34 - and then the date and now
105:37 - this is where we are going to show
105:40 - buttons
105:41 - depending on what user is logged in
105:45 - so let's look at this so first of all we
105:48 - check to see
105:49 - if there is a user if there's a user
105:52 - logged in
105:53 - so if there's a user logged in and
105:56 - if the user id equals the same
106:00 - as the review dot user id so if the
106:03 - logged in user has the same id
106:05 - as the user id of the review
106:08 - then now it just says and and again
106:11 - that's just like a
106:12 - a fancy way uh having the these
106:15 - ands is a fancy way of saying if these
106:19 - are true
106:20 - then we're going to put this code in
106:21 - here it
106:23 - so as far as what what javascript you
106:26 - can put
106:27 - inside a react like this this is kind of
106:30 - the best way to do it
106:32 - you put and so it only gets to this last
106:34 - part of adding this last part if the
106:35 - things before
106:36 - are true so if both these are true then
106:39 - it's going
106:40 - to put two different buttons we're going
106:43 - to have this
106:44 - delete review button which see it's
106:47 - going to be delete
106:48 - and on click when you
106:51 - when you click it it's going to call the
106:53 - delete review function
106:54 - with the review id and the index and
106:57 - also
106:58 - we are going to have
107:01 - a link here and this link is going to be
107:04 - an
107:05 - edit button if you click the edit button
107:08 - it's going to
107:09 - call the restaurants it's going to go to
107:13 - the restaurants path the restaurant
107:15 - slash
107:15 - restaurant id slash review so that's the
107:18 - place to edit a review and it's going to
107:21 - pass
107:22 - in the state of the current review
107:26 - so we're going to if we're editing this
107:29 - review
107:30 - we're going to pass in the state of that
107:32 - review so we can
107:33 - fill in the fields with the actual text
107:36 - of the current review
107:37 - on the review page and that's
107:40 - pretty much it because this is going to
107:43 - create a
107:44 - card for each element of the reviews
107:46 - array
107:47 - okay we can test that out so let me save
107:50 - that
107:51 - go back to the all the restaurants and
107:54 - remember
107:55 - we had already added some reviews to
107:56 - this one just from
107:59 - from insomnia so if we view reviews we
108:01 - can see
108:03 - nice so these are the two reviews
108:06 - now we can't delete or edit them because
108:09 - we're not logged in we have to log in as
108:11 - one of these users to be able to delete
108:12 - or
108:13 - edit them so let's click login and we
108:16 - can't because we haven't implemented
108:18 - that page yet
108:19 - so that's what we'll do now okay let's
108:21 - go back to the login.js page
108:24 - this is going to be a simple page with
108:26 - just two text fields
108:28 - for the user and the user id that you
108:30 - submit and then it logs in with that
108:32 - user and user id
108:33 - remember what i said we're not doing a
108:35 - full featured
108:37 - authentication system this is just like
108:39 - a dummy authentication system
108:41 - and you would update this page with
108:43 - something more complex if you wanted to
108:45 - actually
108:46 - use this in anything like production but
108:48 - we're just going to make something
108:49 - simple really quick
108:50 - and i'm just going to update all this
108:52 - with this new page and just go over it
108:55 - so we're going to you we're going to
108:56 - have the use date
108:58 - and then we're going to create the login
109:02 - component so the initial user state is
109:04 - just going to be a blank name and a
109:06 - blank id
109:07 - and then we're going to create the user
109:09 - variable which is the initial user state
109:11 - which is just the blank name and
109:13 - blank id and we're going to handle
109:16 - input change because we we have this
109:19 - form down down here and the form is just
109:20 - going to have
109:21 - two input fields we have this first
109:23 - input field which is the username
109:26 - and you can see we have the id of name a
109:28 - name here
109:29 - uh the value is user.name if you click
109:31 - on it on change handle input change
109:34 - and then this is also handle input
109:36 - change on the id
109:38 - which has the value of user.id and
109:41 - so no matter whether you
109:45 - it's doing a handle input change for
109:47 - both of these for the username and id
109:49 - event.target is going to get the name
109:52 - and the value from the target
109:54 - so so the name is going to be this so if
109:56 - it gets the
109:57 - it knows whether it's the name or the id
110:02 - and then it's going to get the value
110:05 - and then it's just going to set the set
110:07 - the is it going to update the user state
110:10 - with the new name or the new id and then
110:13 - the only other thing would be
110:15 - if you click the login button on click
110:18 - login it's going to
110:22 - call props dot login user and then
110:26 - props dot history dot push slash means
110:28 - it's going to
110:30 - update the url so it just goes through
110:33 - this other route it's going to this
110:34 - route the slash route
110:36 - so it's going to log in the user and
110:39 - then it's just going to go to the home
110:41 - page again
110:42 - now you may be thinking wait where is
110:44 - this login coming from is it calling
110:46 - this login
110:46 - no it's it's actually different this is
110:48 - props.login
110:50 - so if we go back to
110:53 - what pages i think app.js
110:57 - so if you see when we created the
111:01 - the route the route for the login page
111:05 - one thing we passed in as one of the
111:08 - props we passed in as login
111:10 - was login equals login and this login
111:14 - is actually this login
111:18 - so we're passing this function
111:21 - to the login page so
111:25 - on the login page when we do
111:29 - props dot login and pass in the user
111:32 - this is actually the function
111:35 - from from the other page from from the
111:38 - other file
111:40 - so it's actually passing in the user
111:44 - to this we're setting the user into this
111:46 - file and to this
111:47 - into this user variable and then that
111:50 - user variable
111:53 - through these routes see are
111:56 - passed in to the other routes
112:01 - so that's how we get the user from the
112:03 - login page
112:05 - to these other routes so let me go
112:08 - and save this
112:13 - and we'll go try this out so we're on
112:16 - the login page now so click it log
112:18 - in i'll put bo one two three
112:22 - four and click log in now it goes back
112:25 - to the main page if i click
112:26 - view reviews here well look we can now
112:29 - edit and delete this one
112:30 - because the user and user id was bo1234
112:34 - for this review
112:35 - now i can delete or edit let's try
112:38 - editing
112:39 - oh we haven't made that page yet the
112:42 - editing page and the add page are the
112:45 - same
112:45 - page so add review
112:49 - we can try out the delete though let's
112:51 - see if the delete works
112:52 - yep that works and let's see if i
112:53 - refresh if it's still deleted
112:55 - and it's not so that did not work
112:59 - okay so that delete didn't work and it
113:01 - was because we're not
113:02 - sending the the user id here
113:06 - so the server is expecting a user id to
113:10 - be sent with this
113:12 - and a delete can't send
113:16 - data in the normal way because normally
113:19 - most people don't use a body with a
113:21 - delete request
113:22 - it's not necessarily best practice but
113:25 - again
113:25 - i'm not really focusing on
113:27 - authentication here but what we're going
113:29 - to do
113:30 - to make sure this
113:33 - to pass in the username is this we're
113:36 - going to have to use
113:43 - user id
113:49 - id and when i get this user id here
113:55 - this should be user id and now we have
113:58 - to make sure we
113:58 - call this with the user id
114:02 - so if we go over to
114:06 - where we delete something
114:12 - we're going to pass in the user id
114:18 - so delete reviews review id and then
114:22 - comma props dot user.id
114:26 - okay let's see if that works
114:29 - i'm going to log in with bo1234
114:36 - view reviews and let's see if i delete
114:38 - enough i refresh it let's see if it
114:40 - stays deleted
114:41 - and it stays deleted so we successfully
114:44 - deleted that review and it's deleted
114:45 - from the database
114:47 - now we have to create the ad review page
114:50 - so let's go to add review here
114:53 - now i'm going to update this code and
114:55 - then we'll go over it
114:58 - so it starts off like the other ones
115:00 - react review state
115:01 - the restaurant data service link from
115:03 - react dom
115:04 - and the initial review state is just
115:07 - going to be an empty string
115:08 - because someone's just going to type in
115:10 - a string for the review
115:11 - and then we're going to keep track of
115:13 - whether this is a new review
115:15 - or if we're editing the review like
115:18 - i could have titled this something
115:19 - besides ad review because we're using
115:21 - the same page to add reviews
115:23 - and edit reviews but the default is
115:25 - false
115:26 - false we are not editing the review
115:28 - we're defaulting to adding the review if
115:30 - we go to this page
115:31 - so now we have to figure out if this
115:34 - editing should become true if we are
115:36 - editing the review the way to find out
115:39 - if we're editing this review
115:40 - is to see if a current review was passed
115:42 - in
115:43 - to this component
115:46 - so if we go back to here if someone
115:49 - clicks the edit review
115:53 - it passes in this state of current
115:56 - review
115:57 - so we're seeing if this state has been
115:59 - passed in
116:01 - so first we need to see if the state
116:03 - even exists and if it does
116:05 - we have to check if the current review
116:08 - is part of that state
116:09 - if so then we'll set editing to true and
116:12 - then we'll set the initial review state
116:15 - to props at location state that current
116:17 - review
116:18 - text so that's the text of the review
116:20 - that we're editing
116:24 - and then we are going to create this
116:25 - review variable
116:27 - using the initial review state which is
116:28 - either going to be an empty string
116:30 - or it's going to be the text here and
116:32 - then we're going to keep track of
116:33 - whether the review was submitted or not
116:36 - starting with false it hasn't been
116:37 - submitted and this is our handle input
116:40 - change function so when someone types
116:42 - into the text box
116:43 - it will change it'll set the review to
116:45 - whatever the person typed in
116:48 - and i can just i'll just i'll just go
116:50 - and look at that right now
116:52 - so first we check to see if there's a
116:55 - user if there's no user you can't
116:57 - actually add a review because you have
116:58 - to be
116:59 - logged in to add review then we're gonna
117:02 - ch so this
117:03 - is a ternary function if so we're gonna
117:06 - do this
117:07 - if not so if there is no user it's going
117:09 - to say please log
117:10 - in see anything after this colon here
117:12 - it's going to say please log
117:14 - in but if we are logged in now we're
117:16 - going to check if it's submitted yet
117:18 - so if it is already submitted it's going
117:21 - to
117:22 - do this so question mark is it submitted
117:25 - right after this question mark is the
117:26 - yes answer yes i'll say you submitted
117:29 - successfully
117:30 - and then there's going to be a link to
117:32 - go back to the restaurant
117:35 - so the restaurant that you started on if
117:38 - it's not submitted yet
117:40 - then there's going to be a form here so
117:43 - this form
117:44 - is going to have a description it's
117:47 - either going to say
117:48 - edit review or create review depending
117:51 - on whether we're currently editing the
117:52 - review or
117:54 - if it's we're adding a new review so if
117:56 - editing is
117:57 - true it's going to say edit review if
117:59 - editing is false that means writing a
118:01 - new review it's going to say create
118:02 - review
118:04 - then the input form is going to
118:08 - have the value of the review and then if
118:10 - you type
118:11 - it will update that value and then if
118:14 - you click
118:15 - it's going to save review if you click
118:17 - submit
118:19 - so this let's look at the save review
118:21 - function
118:22 - the save review function is going to
118:25 - create this data
118:26 - with the text of the review the name
118:29 - which is the props that user.name
118:31 - the user id props user id and the
118:34 - restaurant id props.match.params id
118:37 - the mass.pram's id means it's going to
118:40 - be right from the url we're getting the
118:42 - restaurant id
118:43 - right from the url here and then
118:46 - if we're editing
118:50 - there's also going to be one more part
118:52 - of the data
118:53 - if we're editing the review then
118:56 - we are going to get the review id
119:00 - and add it to it the current review id
119:03 - so if you're not editing there's not the
119:06 - review doesn't have an id because it
119:07 - doesn't
119:08 - get an id until you create the new
119:09 - review review but if you're already
119:11 - editing it
119:12 - you need the review id to say what
119:14 - review is going to be
119:16 - edited and then so if you're editing a
119:18 - review
119:20 - it's going to call update review and
119:23 - it's going to set submitted to true
119:25 - if you create a new review else it's
119:28 - going to create a review
119:30 - in both cases passing in the data in
119:32 - both cases it's setting
119:34 - submit to true it's logging the data
119:38 - and that's pretty much it for the ad
119:40 - review
119:41 - so let's save that and then we'll test
119:44 - it out
119:45 - so click on restaurants we'll go to
119:48 - happy garden this time
119:50 - there's no reviews yet let's see if we
119:52 - can add one well wait to log in first so
119:54 - click login i'll click i'll do bow
119:58 - one two three four log in and then we'll
120:01 - go to view reviews again
120:03 - add review and i'll say
120:06 - worst
120:07 - [Music]
120:10 - restaurant ever
120:14 - submit you submit successfully back to
120:16 - restaurant
120:17 - and you can see here's the review here
120:20 - also
120:21 - let's just confirm we haven't been to
120:23 - mongodb atlas for a while so let's go
120:24 - check to see if
120:25 - it's in there so let me go back to that
120:27 - page
120:30 - and then we'll go to reviews here
120:36 - loading which are refreshing
120:46 - and let's see if we can find the review
120:48 - i just added
120:51 - worst restaurant ever here it is
120:55 - so bo1234 worst restaurant ever
120:58 - so let's go back over
121:01 - and we can edit actually now it is the
121:04 - best restaurant i went to it again and
121:06 - realized i was wrong the first time
121:08 - submit that and now it's best restaurant
121:11 - ever
121:11 - if i log out i can still see the review
121:13 - but i cannot edit it and i cannot delete
121:15 - it
121:16 - so we can see the list of restaurants we
121:19 - can
121:19 - search we can search by kitchen
121:24 - let's try that word all the kitchens we
121:27 - can search by zip code 1001
121:32 - we can search by cuisine
121:35 - do brazilian
121:38 - we can view maps
121:46 - this one seems to be closed
121:50 - and we can log in
121:53 - and i'll try different name
121:57 - how about abby and we'll do four three
121:59 - two one
122:02 - now i can view reviews but i can't edit
122:04 - that one but i can add another review
122:08 - not amazing
122:12 - if you go back to restaurant i can
122:14 - delete a review
122:16 - and this is basically done
122:19 - we've created a fully functional mern
122:22 - stack
122:23 - app okay we're going to do one
122:26 - final thing we're going to update the
122:29 - title
122:30 - that will be on the tab or in the top
122:32 - bar on your web browser
122:34 - so let's go to the public tab here
122:37 - and then we're going to or the public
122:39 - folder i mean we go to index.html
122:42 - and we'll keep most of this as is but we
122:45 - will update this instead of react
122:48 - app this is going to now say
122:51 - restaurant reviews
122:55 - okay we're done
123:01 - so we finished creating our entire app
123:04 - using
123:05 - the mern stack using mongodb express
123:08 - react and node.js well
123:12 - now i'm going to show you that you don't
123:13 - even need node.js
123:15 - or express because you can do all of the
123:17 - backend
123:18 - right from mongodb realm mongodb realm
123:21 - is a serverless application backend
123:23 - that streamlines implementation of
123:25 - features like user authentication
123:27 - data validation and business logic with
123:30 - configurable functions and services
123:32 - that integrate realms data access and
123:34 - security rules
123:36 - so this is the structure of our app so
123:38 - far
123:39 - but we're now going to replace this e in
123:42 - the n
123:43 - this whole section with mongodb realm
123:46 - and we're also going to replace this
123:49 - section
123:50 - and instead of hosting it locally we are
123:52 - going to host it
123:53 - in the cloud so this is what the new
123:56 - structure of the app is going to look
123:57 - like
123:58 - see the back end is now realm and it's a
124:01 - back end as a service
124:03 - because it's all hosted in the cloud at
124:05 - realm and then the front end is also
124:07 - going to be hosted
124:08 - through realm and it's going to be the
124:10 - same react front-end you see the client
124:12 - is going to look exactly the same
124:14 - now you can see these little lock icons
124:16 - after we get everything set up on realm
124:19 - we're going to have a lot more security
124:21 - between
124:22 - the backend and the front end of the
124:23 - database and the client
124:25 - so let's start setting this up so we are
124:28 - going to
124:29 - completely remove the backend that we
124:31 - made with node.js in express
124:33 - and i'm going to show you how to
124:35 - implement that all with realm
124:37 - and it's way easier and way faster than
124:40 - creating that whole back end with no
124:42 - node in express so we'll still be using
124:44 - the same
124:45 - react front end but i'm going to show
124:47 - you how to just use that front end
124:50 - with the realm back end and after that
124:53 - i'm going to show you how you can use
124:54 - mongodb realm to host the front end as
124:58 - well
124:58 - so the front end and back end will be
125:01 - all hosted in the cloud
125:03 - on mongodb realm so let's get started
125:07 - first i'm going to show you how to use
125:09 - realm to create an api that exposes data
125:12 - and then i'll show you how to update
125:13 - data in a mongodb database
125:15 - inside mongodb atlas so first let's go
125:19 - we're we're starting in our mongodb
125:20 - atlas cluster
125:22 - and then we'll go to the realm tab right
125:24 - here
125:26 - okay it automatically goes into the
125:28 - create a new application
125:30 - section but if you have already been
125:33 - to if you already have an application
125:35 - you may just have to click the create
125:36 - new application button to get to the
125:38 - screen
125:39 - but we're going to call this
125:42 - restaurant reviews
125:50 - and then i'll just click create realm
125:51 - application and i don't need any of
125:54 - these guides here
125:56 - okay we got this set up and
125:59 - realm has a bunch of features and we're
126:02 - only going to scratch the surface of
126:04 - what it can do
126:05 - so you can look through all these things
126:07 - over here
126:09 - we're actually going to mainly focus on
126:11 - third-party services
126:12 - and then later when we want to host our
126:14 - front end we're going to go to
126:16 - hosting but you can kind of play or just
126:19 - look around in here and see the
126:20 - different
126:21 - things that it can do but we're going to
126:23 - start off by just going to third party
126:25 - services here
126:27 - exposing data through third party
126:28 - services is at the heart of creating a
126:30 - realm back in service
126:31 - so that's what we're going to create now
126:33 - this is going to allow us to update the
126:35 - data outside of this website
126:37 - we'll basically be creating the the
126:38 - wrapper for an api
126:40 - so let's add a service
126:43 - we are going to create a service called
126:46 - http
126:47 - now there's some built-in you can choose
126:49 - twilio github aws depending on
126:52 - what type of api you're trying to
126:55 - connect
126:55 - or create or what type of service you're
126:57 - going to create but for our purpose
126:59 - we're just
126:59 - doing an http service and i'm just going
127:02 - to call this restaurants
127:06 - and then i'll click add service
127:09 - okay now i'm going to click add
127:12 - incoming webhook this is what's going to
127:16 - expose this service
127:17 - to the outside world on the internet so
127:21 - we're in the settings first we're going
127:22 - to look at that first and this is going
127:24 - to
127:25 - this will specify the authentication
127:28 - requirements and other behaviors
127:30 - i'm just gonna call this restaurants and
127:33 - this name
127:34 - is basically going to be one of our api
127:37 - endpoints so each
127:38 - name the each web hook or wait each name
127:41 - is going to be a different api
127:42 - endpoint that our front end is going to
127:44 - access
127:46 - if you scroll down here a little bit you
127:48 - can see that you can choose the http
127:50 - method
127:51 - we can we have to actually create a
127:53 - different service for each type of http
127:55 - method like get
127:56 - post put delete so the most popular type
128:00 - is a get request so this first one we're
128:01 - going to make a get request
128:03 - this is going to be so we have the
128:05 - different apa endpoints
128:06 - we're going to recreate all the api
128:09 - endpoints from
128:10 - our node express server right from realm
128:13 - and the first one we're going to create
128:14 - is the one that's going to return a list
128:17 - of all the restaurants
128:19 - you can also set up different types of
128:21 - authentication here
128:23 - or authorization for the request
128:26 - but since this is a pretty uh basic
128:28 - tutorial i'm just trying to show you how
128:30 - to do the basics here so we're not going
128:31 - to get into
128:32 - authentication but one cool thing
128:35 - is that mongodb realm can it
128:39 - makes it easy to either create your own
128:42 - authentication
128:43 - or also hook up with the a google
128:46 - authentication or facebook
128:47 - authentication
128:49 - and so you can use that those
128:51 - authentication pages to authenticate
128:53 - for your mongodb realm app we're not
128:56 - going to
128:56 - go get into that today but i just want
128:58 - you to know that that's a possibility
129:00 - for now we're not even going to
129:02 - implement any authentication because i
129:04 - just want to want you to see
129:05 - the basics of how this works request
129:07 - validation is important to verify
129:09 - requests
129:10 - it helps fight against bots that may
129:12 - attempt to interact with your service
129:13 - an easy way to implement this is to
129:16 - require secret
129:17 - this is just a git argument it's a
129:19 - parameter that's appended to the call
129:21 - then request will only be processed if
129:23 - they include the secret
129:25 - but for now we're just going to do no
129:27 - additional authorization
129:29 - and i'm going to click the save button
129:34 - so now it brings us over to the function
129:36 - editor by the way when you click the
129:37 - save button it actually doesn't
129:39 - deploy anything it doesn't make anything
129:41 - live until you click the review and
129:43 - deploy
129:44 - a button so that's where you can save a
129:46 - bunch of things and then deploy
129:47 - everything all at once you may have
129:49 - multiple changes and then you can deploy
129:51 - all of them
129:52 - but we're not going to deploy yet
129:54 - because we have to create our
129:56 - function so we're just on the settings
129:58 - tab right here but now
129:59 - once we click save it automatically went
130:01 - over to this function editor so now
130:02 - we're on the function editor
130:04 - and this is the function that will be
130:06 - run when someone
130:07 - calls the api to call this api
130:11 - or to send a message to this api
130:13 - endpoint it's just this
130:14 - url here so this url
130:18 - is what we are going to use that our
130:20 - front end
130:21 - is going to send a get request to this
130:24 - url
130:26 - and then this function will be run so
130:28 - this function
130:29 - is basically just like the function from
130:32 - our node express server or it will be
130:34 - once we finish creating it
130:36 - this is just an example when you when
130:39 - you first create
130:40 - one of these services it will
130:42 - automatically put this code in
130:44 - as a function as an example but we're
130:46 - going to update all this
130:47 - to create a function that's very similar
130:50 - to our node express backend
130:52 - okay so first i'll just show you how to
130:55 - create
130:56 - a very simple response and then we'll
130:58 - make it a little more
130:59 - complicated so we're going to actually
131:03 - get rid of most of the stuff but let me
131:04 - just show you this so this is how you
131:06 - get
131:06 - query parameters so payload.query is
131:10 - going to be these arguments right here
131:12 - and then you can
131:14 - get the content types with
131:15 - payload.headers you can get the body
131:17 - with payload.body
131:19 - and then this is just kind of showing
131:20 - how you would log that information here
131:22 - so these are all just examples here but
131:24 - what we want to do
131:26 - for now i'm going to just delete
131:30 - all of this here
131:34 - [Music]
131:36 - and what we're going to do is just try
131:38 - to
131:39 - get remember we're we're trying to
131:40 - return a list of restaurants
131:43 - so what i want to do is just get that
131:46 - collection we need to get access to
131:48 - our collection our restaurants
131:50 - collection right from this function
131:53 - so let's make a variable const
131:54 - collection
131:57 - equals when you're creating a function
131:59 - you're always going to have access to a
132:01 - variable called
132:02 - context and if you do context.services
132:08 - we're going to get the get mongodb atlas
132:14 - [Music]
132:16 - now this is just how you're going to get
132:17 - a your database on mongodb
132:20 - d atlas and then we put db
132:24 - sample restaurants
132:29 - remember that's the name of our database
132:33 - that collection and the collection is
132:35 - just called restaurants
132:41 - okay now let's get the list of
132:42 - restaurants so let
132:44 - restaurants list and this is going to be
132:47 - very similar to the mongodb javascript
132:49 - driver restaurants
132:53 - list equals
132:57 - now we're just going to do await
133:01 - collection dot find
133:05 - dot to array
133:08 - [Music]
133:10 - so this is just going to create an array
133:12 - of our entire collection
133:14 - for this example we don't want to return
133:16 - the entire collection
133:18 - let's limit so we're just going to limit
133:20 - to 20
133:21 - dot limit
133:25 - limit and then i'll put 20.
133:30 - and then i'm going to return the
133:32 - restaurant list
133:34 - [Music]
133:36 - and since we're using a weight right
133:37 - here we're going to make this in a sync
133:39 - function
133:40 - so async and then
133:44 - we can just click the run button it's
133:46 - going to open up the console
133:47 - and then we have the results right here
133:50 - and if i lift this up here
133:54 - look we got it right here this is the
133:56 - list of restaurants so if i just scroll
133:58 - all the way up to the top
134:00 - we can see riviera carter
134:04 - so that's the first restaurant and so
134:06 - this is the list of restaurants
134:08 - just the first 20 because we've limited
134:11 - it to 20.
134:13 - so now we could actually just put
134:16 - in this url right into our react
134:19 - front end and if we call this url it'll
134:22 - return that list of restaurants
134:23 - but we're not going to update our react
134:25 - code to use that url quite yet
134:27 - what we're going to do is actually just
134:29 - test this in insomnia
134:31 - so make sure you save your own function
134:34 - and then we can test this out so let's
134:35 - click review and deploy
134:37 - and the settings in atlas have a
134:40 - configuration driven approach
134:42 - so before we finalize this deploy you
134:44 - can see the settings that we're about to
134:46 - change
134:47 - this is also the command you would use
134:48 - in a terminal or a program so you can
134:51 - avoid using this interface in this user
134:53 - interface
134:54 - but we're just going to use the user
134:55 - interface so hit deploy here
134:59 - okay deployment was successful so we'll
135:02 - go over here
135:03 - and then i already have the url in here
135:05 - this is our url right from
135:06 - our mongodb web hook in realm and if i
135:10 - click send
135:12 - it's going to see we have our list of
135:15 - restaurants right here
135:17 - so it worked now we're about to use that
135:20 - same url in our react app
135:22 - but before we do that let's improve this
135:25 - function a little bit
135:26 - we want this function to also be able to
135:29 - be used for searches
135:30 - so this api endpoint will be able to
135:32 - return all the restaurants
135:34 - but also if someone does a search for a
135:35 - zip code or
135:37 - a title or a
135:40 - cuisine it will also return the search
135:42 - results for that
135:43 - so let's go back to our code now this is
135:46 - our back-end code this is the
135:49 - restaurants.controller
135:51 - and we're just going to actually copy
135:53 - this code
135:54 - and then make a few changes
135:57 - and then we'll go right back into our
136:00 - function editor
136:02 - and then i'm going to paste the code in
136:03 - here
136:05 - but we're going to make some changes so
136:06 - it works for our purposes here
136:08 - so first of all first of all let's move
136:11 - this down a bit
136:15 - i'm just going to move it just paste it
136:17 - in right here
136:18 - and then let's start at the top here you
136:20 - can see we're getting the restaurants
136:22 - per page and we're getting the page
136:24 - from the query parameter well there's a
136:27 - different way for to do this
136:28 - in this function here we're going to be
136:30 - using payload.query
136:32 - we're going to have restaurants per page
136:34 - and we're going to have the page
136:37 - and let's do some destructuring here
136:44 - equals payload dot query
136:48 - okay so that's how we're gonna get the
136:50 - restaurants for page in the page and
136:51 - we'll have some default parameters
136:53 - so default to 20 and
136:57 - default to zero so if it doesn't have
137:00 - resonance for page if it doesn't have
137:01 - page
137:01 - we'll just default to those numbers
137:05 - and we're going to build up instead of
137:07 - building up
137:08 - the filters we're just going to build up
137:10 - the query
137:11 - the query that we're going to send when
137:14 - we do our find here
137:16 - so wreck that query we're going to use
137:19 - payload.query
137:20 - and then we're going to set the query
137:24 - to equal well we can get the query
137:28 - right from our other code so we just
137:30 - have to go
137:31 - over to the restaurants deo
137:36 - and this is what the query looks like
137:39 - for the cuisine query it's going to look
137:41 - just like this
137:43 - now bring that over and instead of
137:46 - filters cuisine
137:48 - this is just going to change to
137:52 - payload.query.cuisine
137:54 - so you can kind of see we are taking our
137:56 - code from two different files
137:58 - the restaurants controller and the
138:00 - restaurants deo and we're combining them
138:02 - all together
138:03 - into our function so the next thing
138:06 - we're going to be doing
138:07 - is getting our search for the name
138:10 - filter well let's do zip code let's the
138:13 - next thing we're going to do is get the
138:14 - zip code one i'll just copy this whole
138:16 - thing from here
138:18 - bring it over and then we'll use zip
138:21 - code
138:22 - and then this is just going to be
138:25 - payload
138:26 - dot query dot zip code
138:34 - and then the final thing is just going
138:35 - to be the name one
138:45 - just paste that in there
138:51 - so this is going to be payload dot
138:55 - query dot name
138:59 - and to make a text search look work like
139:02 - this
139:02 - we have to i already created a text
139:05 - index
139:06 - so if you just like skip right to this
139:08 - part of this video you may not have seen
139:09 - how i made that text index
139:11 - but in mongodb atlas if you create you
139:14 - can create an
139:15 - index based on any field
139:18 - where you could do a full text search
139:20 - for any field
139:21 - and i did the search for the name field
139:24 - in our database i created an index for
139:26 - the name field in our in our database
139:28 - so we could do a text search of that
139:30 - field okay so
139:31 - we develop our query we're going to get
139:34 - an access to our collection
139:36 - and then we're going to get our
139:37 - restaurants list but let's add a few
139:40 - things here so find
139:42 - out we're going to put the query in here
139:44 - because we're going to find based on the
139:46 - query
139:47 - and we also want to get a certain page
139:50 - number
139:50 - okay because p we passed in the page
139:53 - number
139:54 - and to get the page number it's going to
139:56 - be
139:58 - skip and then we're going to do a
140:01 - calculation here
140:02 - page times restaurants
140:06 - per page and then
140:10 - we're going to limit that to we're not
140:12 - going to limit that to 20 anymore we're
140:14 - going to limit that to restaurants per
140:15 - page
140:17 - and then we keep we're keeping the two
140:19 - array and then i don't need this anymore
140:22 - before we send the response we are going
140:24 - to have to update something
140:26 - in the database all the ids are object
140:28 - ids and we want to create
140:30 - we want to return them as a string
140:32 - instead of an object id
140:33 - so we can just loop through the entire
140:36 - restaurant list and update
140:38 - all the ids to strings and se instead of
140:40 - the object ids
140:42 - so i'll do restaurants
140:46 - dot 4 each and then for every restaurant
140:57 - we're going to call this function
141:00 - and the function is just going to be
141:02 - restaurant
141:06 - dot underscore id equals restaurant
141:12 - dot underscore id dot to
141:15 - string okay
141:18 - and the final thing is that we're going
141:20 - to create this response
141:22 - but we're going to now call this
141:24 - response
141:26 - data and restaurants is still going to
141:30 - be restaurants list
141:31 - page will be paged and then we'll just
141:34 - convert that to a string
141:39 - the filters in this case we're just not
141:42 - going to return anything for the filters
141:44 - we'll just return
141:45 - an empty object because in their front
141:49 - end we don't even use the filters we
141:50 - don't
141:51 - we don't even keep track of the filters
141:52 - on the front end and then for the
141:54 - entries per page we'll do restaurants
141:56 - per page and then convert that to a
141:58 - string
142:01 - and then for the total results we'll do
142:08 - restaurants list dot
142:12 - length dot to string
142:18 - and then we'll return response data
142:26 - okay let's save this
142:29 - and then well let's just do a test we'll
142:32 - run this
142:35 - it says rec not define looks like we
142:37 - must have made a mistake up here
142:40 - somewhere
142:41 - what do we still have
142:47 - oh this should be i forgot to change
142:49 - this payload
142:54 - payload
142:55 - [Music]
142:57 - and then we'll try doing a test here
143:01 - restaurants is not defined what do we
143:04 - must have made a spelling error
143:06 - oh okay restaurants
143:09 - list for each okay so let's run that
143:14 - and then we get the result now we can
143:17 - actually
143:18 - test sending the print the query
143:20 - parameters right in here
143:21 - so let's go to the console
143:25 - and this is how you would test sending
143:27 - the parameters you can actually
143:29 - test sending parameters by using these
143:30 - right here so it has an example here
143:32 - so i'm going to send a page
143:38 - and i'm going to send it to 2 and
143:41 - i'm going to do name
143:45 - and set that to
143:48 - food so now we're going to be searching
143:51 - for by name
143:52 - and we're going to be searching doing
143:55 - the page 2.
143:56 - so let's try that
144:01 - okay well first of all you can see that
144:03 - it returned
144:04 - page two and if i go back up here
144:09 - let's see the restaurant names and let's
144:12 - scroll up and look oh see
144:13 - this restaurant name has the word food
144:15 - in it let's see another restaurant name
144:17 - this restaurant had the name food in it
144:20 - so that worked
144:21 - i did this is a good thing about testing
144:23 - this we can see if there's any mistakes
144:25 - and i need to notice this this total
144:27 - result is 20
144:29 - so it's not well i wanted to return the
144:32 - total results of this
144:34 - find of with the query but it's actually
144:37 - giving us the total results
144:39 - after we've limited to restaurants per
144:42 - page
144:43 - so there's a few ways we can do this
144:45 - okay so what we're going to do
144:47 - is just copy this here
144:50 - come down here and then the total
144:53 - results
144:54 - is just going to be okay i'm going to
144:56 - change this find to count
144:59 - dot then
145:03 - num num dot 2 string
145:08 - run okay good we got the right
145:11 - total results we'll make sure we're
145:14 - saved
145:17 - and then make sure we deploy
145:22 - and we got that function done let's try
145:24 - adding this to
145:25 - our react app so let's go back into the
145:28 - settings
145:29 - so let's get our url go back to our code
145:33 - and then i'm going to go back go into
145:36 - our front end code
145:38 - so our front end code we're going to
145:40 - need to go into
145:41 - our where is our
145:45 - http common so here's our base
145:48 - url we're going to update this base url
145:52 - and i'm just gonna
145:52 - paste in this url ascot
145:57 - and i'm gonna take off this section here
146:00 - where it says restaurants
146:02 - okay i'm gonna say that and go into our
146:04 - services
146:06 - and then this file
146:10 - are of all of our api calls so get
146:14 - all i'm just going to put
146:17 - restaurants here and then
146:20 - the search should also work if i just
146:23 - put restaurants here so those are the
146:25 - two ones that we've updated
146:27 - this the restaurants the thing where
146:31 - you're going to get everything and we're
146:32 - going
146:33 - find specific restaurants so let me save
146:36 - that
146:38 - okay let's try it and it works in to
146:42 - prove that it's working
146:43 - i'm gonna open up my console i'm gonna
146:46 - go to my
146:48 - network i'm going to refresh here
146:53 - let me zoom in on this if i go to
146:56 - restaurants here and if i hover over
146:59 - you can see it's our url it's our
147:01 - mongodb realm
147:03 - url and you can see the cuisines doesn't
147:06 - work because we haven't implemented that
147:08 - endpoint yet so let's implement the
147:11 - cuisines
147:11 - endpoint right now and by the way all
147:14 - the other endpoints are going to be way
147:16 - easier we started with the hardest one
147:18 - with all the searches and stuff
147:19 - well let's test that first so let's test
147:22 - to see if that works
147:23 - so let's type in food search
147:26 - look all about food feel food now let's
147:29 - try the zip code
147:30 - search one zero zero one
147:33 - four search and yep
147:36 - all the zip codes are one zero zero one
147:38 - four so that works
147:39 - i assume the cuisine search is gonna
147:41 - work but we're gonna have to implement
147:43 - our cuisine's endpoint first so we'll
147:45 - pull that in
147:46 - so to implement a new api endpoint
147:50 - i'm going to go back to here
147:53 - and then i'm going to add an incoming
147:56 - web book so we have the restaurants
147:57 - webhook
147:59 - now i'm going to add another one and
148:02 - this one is going to
148:03 - be called cuisines
148:06 - and everything else is basically going
148:08 - to be the same here
148:09 - oh it's going to be a get request okay
148:13 - let me go over to the function editor
148:16 - now if you're in the github repository
148:18 - there's actually a folder called realm
148:21 - that has the code for all the functions
148:24 - so the rest of these functions i'm just
148:25 - going to paste in here
148:27 - and then i can just go over it again
148:29 - it's going to be way easier these are
148:30 - all going to be way easier than the last
148:32 - ones
148:33 - but all this code is basically just a
148:36 - modified version
148:37 - of the code that was in our node express
148:40 - backend
148:41 - and i just modified it to use this thing
148:43 - specific to
148:44 - realm like the context.services
148:48 - and basically this is pretty
148:50 - straightforward we get the collection
148:52 - and then a weight await
148:53 - collection.distinct cuisine and return
148:55 - the cuisines
148:56 - so let me save that and then i'll review
149:00 - and deploy that
149:03 - and now let's just update back in our
149:06 - react front end let's
149:08 - update the get cuisines
149:13 - and actually that should be right it's
149:15 - just going to have slash cuisines
149:16 - at the end if we go back to our settings
149:20 - and we go to the url we can kind of
149:22 - confirm that
149:23 - see yeah it just ends with slash
149:25 - cuisines our main url
149:27 - ends at incoming web books and then has
149:29 - cuisines at the end
149:30 - so let's test that i'll refresh this
149:32 - page here
149:34 - and now we have all these cuisines it
149:36 - comes in
149:37 - and we can do a search yep we got the
149:41 - chicken cuisine
149:42 - and let me just make sure right from
149:45 - our networks so if i refresh here
149:48 - and we can see the cuisines is actually
149:51 - coming
149:51 - right from the mongodb round website so
149:54 - that
149:55 - that web hook is working okay let's
149:58 - implement
149:58 - all the rest of them so to see which
150:01 - ones we still need to implement we can
150:02 - go back over here
150:04 - so we need the get one which is
150:07 - slash id and then with the id
150:10 - right in there we need the crate review
150:13 - we need the update review
150:15 - we need the delete review and then
150:18 - we'll be done so let's do this one first
150:20 - where we're going to get a
150:21 - single review where we're going to get a
150:24 - single restaurant with all of the
150:25 - reviews
150:27 - so click add incoming web hook this is
150:29 - going to be just called restaurant
150:32 - singular not plural and this is also
150:35 - going to be a get request
150:37 - pretty soon we're going to do a post one
150:38 - but this one's a get request
150:40 - go to the function editor let me save
150:42 - that
150:45 - you can see there's an asterisk there
150:46 - now there's not because it's saved
150:48 - and now i'm going to update this code
150:50 - again you can just copy the code right
150:52 - from the github repository if you're
150:54 - trying to follow along here
150:56 - so let's look at some of things that are
150:58 - specific to
151:00 - mongodb realm we have the
151:02 - payload.query.id
151:04 - so one thing tricky for this one this
151:07 - one uses a
151:08 - path parameter so right in the url as
151:11 - part of the url there's this
151:13 - parameter so it's id slash
151:16 - and then it's the the id
151:20 - the actual id then we get that path
151:22 - parameter
151:23 - to look up the id that's how it is in
151:25 - the node express backend
151:27 - so that's one thing kind of different on
151:30 - realm is that it cannot do a path
151:33 - parameter it cannot get a path parameter
151:34 - it can only get a query parameter
151:36 - so we're going to have to switch this to
151:38 - a query parameter
151:39 - so a query parameter is something that's
151:41 - after a question mark
151:43 - so it's in the url after a question
151:44 - marks me a query parameter
151:46 - if it's just after a slash just like
151:48 - this it's going to be a path parameter
151:50 - so we have to change the path parameter
151:52 - to a query parameter
151:54 - and it's going to be a query parameter
151:55 - called id and so we're going to do
151:58 - something else in react
151:59 - to make it a query parameter instead of
152:02 - a path parameter
152:03 - but it'll be pretty simple i'll show you
152:05 - when we get to that point and so we get
152:07 - a list of the the restaurants just like
152:10 - before
152:10 - and then this pipeline this is basically
152:13 - just copy and pasted right from our
152:15 - express app
152:16 - to get a list of all the reviews so you
152:19 - know we're
152:20 - we're sending it the rest a single
152:22 - individual restaurant but then we have
152:23 - to go to the reviews collection to get
152:25 - all the reviews so that's what this
152:28 - pipeline does and then
152:31 - this is all this information is
152:33 - basically very similar to our express
152:35 - app
152:36 - and then right here we're converting
152:39 - we're going through each review
152:41 - and we're converting the date to a
152:43 - string
152:44 - and we're converting the id to a string
152:47 - if we don't do that
152:49 - our react app won't work with it
152:51 - correctly
152:52 - okay i'll save that and then i'll just
152:56 - do review and deploy
152:58 - and then we have to deploy here
153:02 - so if we go to our url it's just going
153:05 - to end with
153:06 - restaurant so let's see how we have to
153:08 - change the path parameter
153:10 - to a query parameter
153:14 - so it no longer is going to be id here
153:18 - this is going to be restaurant
153:22 - and we're going to get rid of this slash
153:24 - here because now it's going to be a
153:26 - query parameter which is pretty simple
153:28 - we're going to do
153:29 - question mark id equals
153:33 - and now we change the path parameter to
153:35 - a query parameter
153:37 - so save that and now let's
153:40 - test it in our browser okay i'll just
153:43 - use leave this network tab open
153:46 - and i'll click view reviews
153:49 - and let's see okay it's getting
153:53 - our restaurant is coming right from our
153:54 - mongodb realm
153:57 - api so that worked and we even got the
153:59 - review here
154:00 - so that worked too so now the final
154:03 - things are
154:05 - adding reviews editing reviews and
154:07 - deleting reviews
154:08 - so let me go back to the list of all our
154:11 - web hooks
154:12 - i'm going to add an incoming web hook
154:15 - i'll call
154:16 - it review
154:20 - new and we're finally going to be using
154:24 - a post request here
154:26 - instead of a get request go to the
154:28 - function editor
154:32 - and then i'm going to paste in some code
154:34 - here and now we're finally using the
154:36 - body
154:37 - so the body of the request payload.body
154:41 - if at first it checks if there is a body
154:43 - and if there
154:44 - is a body this is how we have to get it
154:47 - from the payload body that was sent to
154:49 - this web hook
154:50 - we'll get the text and then we'll have
154:52 - to convert it
154:53 - from bson to an e json object
154:57 - e json is basically json with a few
154:59 - extra types
155:01 - this body includes the name user id and
155:04 - the other data sent to this web hook
155:06 - so this is something kind of specific to
155:10 - mongodb atlas for realm but we got the
155:13 - body
155:14 - and then we have to get a list of the
155:16 - review or
155:17 - not a list but we have to get the
155:18 - reviews collection a reference reference
155:20 - to the reviews collection
155:21 - and then we have to create our document
155:23 - that we're going to insert
155:24 - with by name by.user.i user underscore
155:27 - id
155:28 - a new date body.txt and now we're
155:31 - converting this
155:33 - string to an object id with bson.object
155:37 - id
155:38 - and then we are just inserting it into
155:40 - their database
155:41 - await reviews.insert one review doc so
155:44 - that's pretty straightforward
155:46 - and i'll save that and deploy it
155:49 - and we're not going to put into our
155:50 - react app yet let's just create all of
155:52 - these and then we'll put them all into
155:54 - our react
155:54 - app so add incoming web hook
155:58 - this is going to be the editing one so
155:59 - review edit
156:02 - and then this is going to be a put
156:07 - save that function editor
156:12 - i'll paste that in and it's
156:15 - pretty similar to the last one we check
156:17 - to see if there's a body
156:19 - and we get we get the body into this
156:21 - variable here we get a reference to the
156:23 - reviews
156:24 - we create a new date and then
156:28 - we update so reviews.update1
156:31 - first we have to just like in our
156:34 - express app
156:35 - we're searching for the one to update by
156:38 - the
156:38 - id which we do have to convert to an
156:41 - object id here
156:42 - and we also are making sure that the
156:44 - user id is the same as the id that
156:47 - created
156:48 - that review and then we just have to
156:51 - update the
156:52 - text and the date and then we return the
156:55 - update response
156:56 - so save that view and deploy
157:00 - now i actually don't have to be
157:02 - deploying this each time i can create
157:04 - all of them
157:06 - at once and then deploy it but it's good
157:08 - to kind of get in the habit or you'll
157:10 - just forget to deploy then you won't be
157:11 - able to figure out what the error is
157:13 - okay this is the final web hook that
157:15 - we're creating and it's going to be
157:17 - review delete
157:21 - and this will be a delete request here
157:25 - and then function editor i'm just going
157:27 - to paste in the code again
157:30 - keep in mind there's no authentication
157:32 - on this function
157:33 - so this is there's this is not for use
157:35 - in a
157:36 - production environment it's just an
157:38 - example to see how
157:39 - how this thing would work because you're
157:42 - probably going to want to have some
157:43 - authentication before someone's able to
157:45 - delete
157:46 - something obviously in a production
157:48 - environment
157:49 - but let's just let me just we'll just do
157:52 - it this way for now and we can see if it
157:53 - works
157:54 - so we'll just save and we'll review and
157:58 - deploy
158:00 - okay let's update our react app with the
158:04 - new urls
158:06 - so this review is going to review
158:10 - new and an update review is review
158:14 - edit and then delete review
158:19 - is review
158:26 - delete
158:28 - that should be done let's test it
158:32 - okay let me log in here
158:38 - view reviews and review
158:42 - best ever today
158:47 - okay submit back to restaurant
158:52 - let's see if i can edit it and let me
158:54 - just check the network tab so i can see
158:56 - where the requests are going to so edit
158:58 - and the best ever yesterday
159:03 - submit and then you can see yep it uses
159:06 - mongodb realm
159:09 - okay let's see if it deletes right and
159:11 - deleted
159:12 - and yep it's at the restaurant view it's
159:15 - it's the mongodb
159:16 - realm url and we're able to successfully
159:18 - delete
159:19 - so we just created the entire
159:24 - node express backend all in mongodb
159:27 - realm and it was way quicker it didn't
159:30 - really take that long to
159:32 - to put it all together and now it's all
159:34 - in the
159:35 - cloud it's and it's connected right to
159:37 - our mongodb database
159:39 - it's just a lot simpler way to create a
159:42 - merge stack app
159:43 - basically a merge stack app without the
159:45 - e and the n
159:50 - and now i'm going to show you how you
159:52 - can very simply and
159:54 - quickly host your react front end
159:57 - right from db realm and it's
160:00 - completely free
160:03 - okay if you still have your react app
160:05 - running stop that
160:07 - and i'm in the directory for the react
160:09 - app the front end directory
160:11 - and i'm just going to do npm run build
160:16 - and this is going to create a build
160:18 - directory that we can
160:20 - upload directly to mongodb realm
160:24 - okay back in realm let's see where we're
160:26 - going to upload our frontend
160:28 - well look at this section right here
160:30 - hosting
160:31 - so click hosting host your website here
160:35 - enable hosting
160:39 - now i just have to drag over my build
160:41 - folder
160:42 - right over to here okay so i'm just
160:45 - gonna grab
160:46 - select all the files in my build folder
160:49 - not the folder itself just the files in
160:51 - the build folder
160:52 - i'm just going to drag them over here
160:54 - and then they will upload
160:59 - i can overwrite index.html
161:02 - and then after they're uploaded i'll
161:04 - just click review and deploy
161:07 - deploy and it deployed was successful
161:12 - and it says your site is in the process
161:14 - of being created which may take up to 15
161:16 - minutes
161:16 - so it could take a little while before
161:18 - you're able to access the site
161:20 - but it has the url right here so we'll
161:23 - just go right to this url
161:25 - but first let's go into the settings and
161:26 - look at some of the settings
161:28 - so you can actually use a custom domain
161:31 - so you can use any domain you like
161:33 - i'm not going to go through those
161:35 - instructions here but if you just click
161:36 - view
161:37 - instructions it's going to show you
161:39 - everything you need to know
161:40 - to how to use your custom domain
161:44 - so i'm just going to copy this url here
161:49 - and look it already works i just went to
161:51 - the url and it's hosting
161:53 - my react app right on here and let's see
161:56 - if we can do a
161:58 - search how about ice
162:02 - okay everything that the names that have
162:05 - ice
162:06 - we can try a cuisine
162:09 - that works let's see if we can do a
162:12 - review
162:12 - first of all i'm going to go to all
162:14 - cuisines
162:17 - and we'll do happy garden
162:20 - add review oh login
162:24 - oh one two three four oops
162:28 - one two three four
162:40 - and we can edit it
162:43 - [Music]
162:47 - and this is all working everything
162:50 - that you're seeing including the front
162:52 - end the back end
162:53 - the database it's all through mongodb
162:56 - and mongodb
162:57 - realm and even delete works
163:01 - it's done our entire app is hosted
163:05 - for free in the cloud everything
163:09 - about our mirnstack app is hosted for
163:11 - free in the cloud through mongodb
163:12 - and mongodb realm well thanks for
163:15 - watching everybody
163:16 - remember to use your code for good