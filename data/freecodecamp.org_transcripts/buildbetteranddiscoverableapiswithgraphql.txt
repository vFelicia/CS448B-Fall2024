00:00 - [Music]
00:17 - so hi i'm daniel lemay i am a developer
00:20 - at phase 2 technology and i am here to
00:24 - talk to you about graphql and how it can
00:28 - help
00:29 - improve your apis and as well as make
00:32 - them more discoverable
00:34 - and a joy to use to your front-end
00:36 - developers
00:37 - out of curiosity who has heard of
00:40 - graphql
00:42 - most everyone who's actually used it
00:45 - even tinkering so about half of the
00:47 - people have heard about it all right
00:50 - so i know when i first got into graphql
00:52 - and started looking to it like it was
00:55 - seemed like this big ominous scary thing
00:58 - and a lot of people that i've talked to
00:59 - of like oh graphql that's like really
01:01 - complicated like i don't know if i can
01:03 - get into it well it's not
01:05 - so i'm hope to kind of give
01:08 - an introductory overview of what it is
01:11 - and what some of the problems that it
01:13 - solves are
01:14 - and give you some tools to get started
01:17 - with it if that's something that you're
01:18 - interested in
01:21 - so
01:22 - first i want to talk about something
01:24 - that
01:25 - i don't think we always keep in mind and
01:27 - that's latency because a lot of us as
01:30 - developers were
01:32 - on really good internet speeds we've got
01:34 - either on a wired connection or really
01:36 - good wireless so here's just some
01:38 - average latencies
01:40 - um so average latency this is just to
01:43 - get your network request going
01:46 - wired connection 0.3 milliseconds it's
01:48 - pretty darn fast wi-fi connection three
01:50 - milliseconds we're already in order of
01:52 - magnitude higher
01:54 - 4g which we've got pretty good 4g
01:56 - coverage especially if you're in
01:58 - good metropolitan areas now we're
02:00 - already at 64 milliseconds
02:04 - 3g
02:06 - we're up to
02:07 - milliseconds
02:09 - now
02:10 - as we develop more mobile first
02:14 - and keeping in mind
02:16 - the international market like we need to
02:19 - keep this in mind
02:20 - and it's something that can be really
02:22 - easily overlooked because hey it runs
02:24 - fast for me but
02:27 - a lot of people are consuming things on
02:29 - their phones
02:32 - they're nowhere near even your even your
02:34 - wi-fi connection
02:36 - so russ has this
02:39 - good thing and this bad problem that
02:41 - comes with so here's a sample api
02:43 - request
02:44 - response from the yelp api this is
02:47 - all of the data that gives me for one
02:49 - singular business
02:52 - it's a lot
02:54 - which is exactly how rest is designed
02:56 - you
02:57 - give me this endpoint i'll give you all
02:59 - the details about this business or hit
03:01 - this endpoint and i'll give you an array
03:03 - of businesses that meet meet this
03:05 - category like that's exactly what rest
03:08 - is supposed to do
03:09 - problem again keeping in mind mobile is
03:12 - this is
03:13 - a lot of over fetching like you have a
03:16 - seriously increased payload and it only
03:19 - further exacerbates itself
03:21 - when i now need to take some of this
03:23 - data
03:24 - and make another api call so i have to
03:26 - wait for this data to get back
03:28 - fine pull out that piece of data make
03:30 - another api call still having that
03:32 - latency effect sometimes you get two
03:35 - three round trips like
03:38 - it can can really start to bog things
03:40 - down
03:42 - and
03:44 - if i'm looking at that api as a
03:46 - front-end developer because i do most of
03:48 - my work as front-end
03:50 - like it just gives me a giant migraine
03:53 - so here's a sample api structure for a
03:55 - really basic block
03:57 - so
03:58 - i've got users who can create blogs so i
04:01 - i have the a user api endpoint this is
04:04 - obviously somewhat contrived like i'm
04:06 - not trying to build the most robust api
04:08 - example in the world
04:10 - uh so slash user gives me the user
04:12 - object which also has an array of posts
04:14 - that they've created and we have posts
04:16 - which returns me all of the posts that
04:17 - they've created i'm sure we can add some
04:19 - imagination in there to make it more
04:20 - efficient and then post will give me all
04:23 - the data for just a specific post
04:25 - so
04:26 - let's say i want to create an index of
04:29 - said posts i'd probably hit the user api
04:33 - get the array of posts
04:36 - or get their id then hit the posts api
04:38 - with their user id to get all of their
04:41 - posts
04:42 - everything all i really care about is
04:44 - the title
04:46 - the slug
04:47 - maybe an excerpt like i don't need all
04:50 - of that data but i'm going to get it
04:51 - because that's what rest does it gives
04:53 - it to you whether you like it or not
04:57 - so that's where graphql comes in
05:00 - so
05:01 - according to graphql.org that's the
05:03 - specification
05:04 - graphql is a query language for apis and
05:07 - a runtime for fulfilling those queries
05:08 - with your existing data so a couple
05:11 - things that graphql is
05:12 - not
05:14 - it is not a framework
05:16 - is not language specific
05:19 - you can integrate it with most major
05:22 - programming languages and i have a link
05:24 - in the resources slide at the end that
05:26 - you can say oh i want to build a front
05:28 - end i want to build a back end here's
05:30 - the language it'll give you all the
05:32 - libraries that you can use
05:34 - so graphql is a specification
05:37 - it was written by facebook
05:40 - to fulfill their increasing graph
05:44 - data needs and all these interconnected
05:47 - queries and to find a more efficient way
05:49 - to get the data that they need
05:51 - so
05:52 - graphql.org you can find the actual
05:55 - specification there and then there's
05:57 - multiple frameworks that have
06:00 - built up several layers of abstraction
06:02 - to make it a whole lot easier to use
06:06 - so
06:08 - key things first what problems does
06:10 - graphql solve and have huge impacts on
06:13 - your performance
06:14 - so you decrease your payload size
06:17 - because you're only getting the data
06:18 - that you need
06:20 - and it reduces the number of round trips
06:22 - because i'm no longer waiting for data
06:25 - to come back on the client and then
06:26 - making another request i'm getting all
06:28 - of the data that i need
06:30 - back in the single request
06:32 - all of the fetching and all the looping
06:35 - is handled on the server
06:38 - it increases developer experience
06:40 - through
06:41 - automatic documented apis
06:45 - which is amazing
06:47 - who here has
06:48 - tried to use a horribly documented api
06:52 - yeah that's no fun
06:55 - or the documentation is out of date or
06:57 - something's changed
06:59 - non-existent even better yeah just just
07:02 - great fun throwing the computer out the
07:04 - window so
07:06 - graphql includes amazing documentation
07:10 - out of the box
07:12 - and updates as you build your api you're
07:14 - no longer relying on someone to maintain
07:16 - documentation
07:18 - using a system like swagger to document
07:20 - your api it's just included and that's
07:23 - because of how it's set up
07:26 - it also has deep integration with modern
07:29 - front end javascript so react view
07:34 - all of the modern frameworks i think
07:35 - angular also has some plugins for it
07:38 - which include caching which reduces
07:40 - their need to even fetch data from
07:43 - the back end which again
07:45 - further increases performance
07:48 - so how do we do this
07:50 - so graphql
07:53 - creates a declarative data structure so
07:55 - you
07:56 - declare all of the different fields that
07:58 - your data structure has and what types
08:00 - they are
08:01 - so if you aren't familiar with type
08:03 - systems like this is this is going to be
08:05 - kind of new it's not
08:07 - all
08:08 - loose and fancy free like javascript as
08:10 - we generally think of it
08:13 - you can connect different data sources
08:15 - in the same query so let's say i need to
08:17 - get some from
08:19 - a database some from a third party api
08:21 - endpoint something from
08:23 - a lambda function you can include all of
08:26 - those in your your graphql server
08:29 - um through the resolvers
08:32 - you also only have one endpoint which as
08:35 - a front-end developer
08:37 - like
08:38 - that makes me so happy i don't have to
08:40 - deal with environment variables of like
08:42 - oh i'm in dev so i need to have this url
08:45 - for this endpoint here and
08:47 - oh change it to this url in production
08:50 - and have to tie all of my react
08:52 - component codes to all of these
08:54 - ridiculous urls
08:57 - and oh the the url change like you don't
09:00 - have to deal with any of that
09:01 - you set up one one url and then all of
09:04 - the queries all of the mutations run
09:06 - through the one url it's amazing
09:09 - it also enables really good mocking so
09:11 - if you're developing your back end and
09:13 - your front end right alongside of each
09:15 - other
09:16 - you can set up hey here's what the data
09:18 - store looks like and you can
09:20 - plug in
09:21 - mock resolvers for the front end and
09:23 - they'll pretend like they're actually
09:25 - getting real data from the back end even
09:26 - if the back end isn't set up yet and
09:29 - then when the back ends are ready to go
09:30 - live you just pull out that line of code
09:32 - and you hook it up to the real back end
09:35 - and we already talked about client
09:36 - caching a little bit
09:39 - so graphql uses types so vanilla
09:42 - javascript is loosely typed
09:46 - for better or worse like it's one of
09:48 - those things that people either love or
09:50 - hate
09:51 - i will say that after getting into
09:52 - graphql i really just like loosely typed
09:55 - javascript and
09:56 - i've gone full in on using flow
09:59 - uh so with vanilla javascript you can
10:01 - have loose equality the string of one
10:04 - equals one that's going to render true
10:07 - and the string of one with strict
10:09 - equality to one
10:11 - is going to equal false so when you're
10:13 - using loose equality
10:14 - it's using type coercion
10:16 - to determine if the values are equal
10:21 - graphql uses strict typing so there's no
10:24 - coercion
10:26 - so you can't do any loose equality it
10:28 - basically treats everything like with
10:30 - strict equality you declare your field
10:32 - types on the server
10:35 - if there's any mismatches whatsoever
10:36 - it's going to throw an error
10:38 - like it gives you no wiggle room
10:41 - which
10:42 - sounds intimidating but then
10:45 - you don't actually have to worry about
10:46 - the structure of your data you're going
10:48 - to get exactly the structure of your
10:49 - data that you declare
10:51 - which makes development really really
10:54 - nice
10:55 - and you can also declare the field as
10:57 - nullable or non-nullable
11:00 - so default types that you get with
11:02 - graphql in the spec out of the box
11:05 - you have a string an integer float
11:08 - boolean and id
11:10 - id is really just a string but it flags
11:13 - it in graphql terms as something that
11:16 - is not meant to be human readable so
11:18 - like if you have an id for your
11:21 - your document id from your database like
11:23 - that's auto generated that's where you
11:25 - would use the type id when it gets parts
11:27 - it's still a string but it's not
11:28 - something that you're going to be
11:30 - like printing out to the screen
11:33 - so getting started with graphql server
11:36 - we declare all of our types for our
11:38 - different data so
11:40 - this is actually a sample type from a
11:43 - react native application that i've been
11:44 - building
11:47 - so we declare the type with the the key
11:50 - keyword type and then whatever we want
11:52 - to name it you can name that whatever
11:54 - you want
11:55 - and this is going to look really similar
11:56 - to like a json object without all as
12:00 - much of the uh
12:02 - there's no commas like
12:04 - and if you throw in commas it'll yell at
12:05 - you
12:06 - that might take a while
12:08 - it took me a while anyways i kept on
12:09 - trying to put commas on like being the
12:11 - good good javascript developer that i
12:13 - was
12:14 - um so
12:16 - but similar to javascript object the the
12:19 - keys on the left
12:20 - the values on the right
12:22 - uh so we've got id which is of type id
12:26 - created at is the type date
12:30 - so here we've got the document id from
12:32 - mongodb because that's the database that
12:34 - i'm using for the project
12:37 - title is of type string and that
12:40 - exclamation point says that that's a
12:42 - non-nullable value so every brew entry
12:46 - must have a title it cannot be null
12:50 - we also can have subtypes
12:52 - so like
12:54 - json architecture we're used to seeing
12:55 - like objects within objects
12:58 - you can do that with graphql but you
13:00 - can't just say like ingredients and then
13:02 - open up a new object like it'll throw an
13:04 - error at you you have to declare a
13:05 - separate type
13:07 - and then you insert that so like type
13:09 - ingredients is just another
13:12 - type just like brew entry except it has
13:14 - the key values of sugar water and tea
13:17 - which actually is a further subtype so
13:19 - you can nest them but you nest them a
13:21 - little bit differently than traditional
13:22 - json
13:25 - you can declare your own
13:29 - custom types so you don't have to stick
13:31 - to the default types that you come out
13:32 - of the box you just have to say how
13:35 - they're serialized and deserialized in
13:38 - the database
13:40 - with graphql
13:42 - declare that in your schema and then you
13:44 - can use it elsewhere and you can also
13:46 - use enums or union types so
13:49 - the brew method where it says allowed
13:51 - brew methods that's an enum type
13:53 - so it's only going to
13:55 - allow one of several values
14:01 - so then we define our queries which are
14:04 - in their own type called query that's a
14:07 - reserved
14:08 - phrase for setting up your queries
14:11 - in graphql
14:14 - and you declare the query name as key
14:17 - and then
14:18 - you define what it returns
14:20 - so here all brew entries returns an
14:22 - array of type brew entry so they kind of
14:25 - build up on each other
14:26 - you can also define optional arguments
14:29 - again with the appropriate types
14:32 - noticing a pattern types types types
14:36 - which
14:37 - where this comes in in handy is with
14:40 - some tool a great tool that ships with
14:43 - called graphical
14:45 - and the built-in documentation and
14:46 - you'll see why this is so amazing in a
14:48 - little bit
14:50 - so brew entry accepts the singular
14:52 - argument and it's a required argument
14:54 - because again we have that exclamation
14:56 - point
14:57 - so it expects an id and it's going to
14:59 - return a singular brew entry
15:06 - you can also do mutations on our
15:07 - database
15:09 - so here we've got new brew entry and so
15:12 - we've got something a little bit
15:13 - different here we have an input type
15:15 - so input types are different than
15:17 - regular types they're set up the same
15:20 - except an input type is what is declared
15:23 - inside those arguments so they're
15:25 - they're very similar like the brew entry
15:27 - input is basically the same except it
15:29 - doesn't have the id field because
15:31 - obviously there is no id it cannot be
15:33 - required because it has not been saved
15:35 - to the database yet
15:37 - so a newborn entry is going to expect a
15:39 - brew entry input it's going to return a
15:41 - brew entry
15:42 - update brew entry is going to take the
15:44 - id and the input return the brew entry
15:47 - and then removing it it's going to take
15:48 - the id and delete it
15:52 - so
15:53 - there's a lot to digest and we still
15:55 - haven't even well
15:57 - how does all of us actually hook up like
16:00 - actually
16:01 - huh
16:02 - kombucha
16:03 - yes
16:04 - i i'm like a true hipster portlander
16:09 - so
16:11 - schema is only half the half of the
16:13 - things with
16:14 - graphql and setting up the server you
16:16 - also need to have resolvers and so
16:18 - resolvers basically tell the server
16:21 - what in the world it's supposed to do
16:22 - with this data structure
16:28 - so we set up our resolvers in an object
16:30 - map
16:31 - and we've got key root values such as
16:34 - query and mutation so in that object we
16:37 - have okay all brew entries is going to
16:39 - return brew entry dot find brew entry is
16:42 - a
16:43 - mongoose model that i have set up
16:46 - mutation is going to take in the new
16:49 - brew entry it's going to take in the
16:50 - arguments and
16:52 - return the saved output
16:57 - and i know it's a node meet up but we
16:59 - still got to talk about the client
17:01 - because this the servers only half the
17:03 - excitement and where graphql really
17:06 - shines is how it integrates with front
17:08 - end code
17:10 - so
17:11 - out of the box benefits is
17:14 - you get a data store similar to redux
17:16 - without all of the boilerplate by the
17:18 - way no there's like next to no
17:20 - boilerplate which is awesome there's
17:22 - been
17:23 - several like large organizations that
17:26 - have shifted
17:28 - from redux to graphql
17:30 - and
17:31 - eliminated very large portions of their
17:34 - code base that was taken up with redux
17:38 - you get caching out of the box
17:41 - you don't have any data massaging in the
17:42 - client because you're declaring the data
17:44 - that you want and that's all the data
17:46 - that you're getting back
17:48 - you're not getting
17:50 - you're not under fetching you're not
17:51 - over fetching you're getting exactly the
17:53 - data that you want back
17:55 - and so you don't have to massage it on
17:56 - the client's end
17:58 - again you can get exactly the data that
18:00 - you need for each view so for example
18:02 - that blog post index if all i want is
18:04 - the title of the slug and an excerpt all
18:06 - i ask for is that and that's all i get
18:11 - you can focus on more developer friendly
18:14 - and discoverable methods than a plethora
18:16 - of endpoints again you've got that one
18:18 - endpoint and you've got a really
18:20 - discoverable api
18:22 - and you have an amazing tool set to help
18:23 - write queries faster
18:26 - so here's an example of the query syntax
18:29 - in the client side you open up with a
18:31 - set of brackets
18:33 - call the query open up another set of
18:35 - brackets and say okay i want the id in
18:37 - the title that's going to return a data
18:39 - object
18:41 - the root uh the root key on that is
18:43 - going to be the query name and again it
18:46 - returns an array of brew entries and
18:49 - each one
18:51 - is only giving me the id and title
18:52 - because that's all i asked for
18:55 - so we're gonna go into
18:59 - the star wars api
19:04 - and
19:06 - bump that up a lot
19:08 - so here's what is like one of the most
19:12 - mind-blowing things ever so
19:15 - graphical
19:17 - which is not a typo it is graphical
19:20 - because apparently the people who made
19:22 - it were very tongue-in-cheek
19:26 - includes this docs tab
19:28 - and this ships with any like graphql
19:31 - at least with any of the major
19:32 - frameworks that are implementing it
19:34 - and if i pull this open
19:38 - the star wars api doesn't allow me to
19:39 - mutate their data so i only have this
19:41 - query so i can click on this query
19:44 - and now i can see oh
19:46 - here are
19:48 - here's the all films
19:51 - query
19:52 - and oh it takes an argument of
19:56 - after
19:58 - you can give me a description
20:04 - you can get vehicles
20:08 - you can just drill down into your api
20:11 - and see
20:13 - what everything looks like
20:17 - and as my schema changes that
20:20 - automatically updates
20:22 - because it's driven and produced by the
20:25 - schema so there's no manually updating
20:27 - of documentation
20:29 - there's no out of date documentation you
20:31 - can deprecate certain fields on your
20:34 - graphql schema you can include notes of
20:38 - why it was deprecated you can include
20:40 - descriptions
20:41 - like you get all that out of the box
20:45 - so we'll just open up a query and we're
20:47 - going to say okay i want all films
20:49 - and we'll open that up and another nice
20:52 - thing is if i hit control space i can
20:55 - see
20:58 - okay i want edges
21:02 - node
21:02 - they're using relay which has this edges
21:05 - and node
21:07 - concept
21:08 - and i can say oh i want the
21:12 - title
21:14 - and
21:16 - i want the
21:17 - release date
21:19 - and you can just start playing around
21:21 - with it
21:24 - character connection
21:30 - edges
21:33 - you can build up really
21:34 - complex queries
21:37 - we'll just run this
21:41 - now here's all the data that i get back
21:48 - and what's really cool is
21:51 - since it's just a specification
21:53 - it
21:54 - this
21:55 - nasty url
21:56 - is actually encoding
21:58 - this query
22:00 - so i could plug in
22:02 - this url like even if i didn't want to
22:05 - set up a graphql client in my frontend
22:07 - code i could plug in that url into a
22:10 - fetch call and i'm going to get exactly
22:12 - that data object back
22:15 - really cool
22:16 - also this is exactly the
22:19 - format that i need in my front end code
22:21 - so
22:22 - i always test my queries in graphical
22:26 - test my mutations get it working right
22:29 - rather than having to navigate through
22:31 - three different screens oh error didn't
22:33 - get this data back the way you wanted no
22:35 - i'm going to do it right here i'm going
22:36 - to get the instantaneous feedback
22:39 - get it right and then just copy the code
22:40 - over
22:41 - it's fantastic
22:46 - so here's some resources um
22:49 - and
22:51 - the link to the slides is at the bottom
22:55 - howtographql.com is a great video
22:57 - tutorial series built by the folks at
23:01 - graph pool now prisma which do a
23:05 - database as a service um and will do
23:08 - your
23:09 - like they can set up um they do a sql
23:13 - database and you can just say okay
23:15 - here's the data set that i want and how
23:18 - i want it set up they'll like auto
23:20 - create a lot of your schemas and your
23:22 - resolvers for you you can plug in
23:24 - authentication they'll set it all up for
23:26 - you i mean you're paying a service fee
23:28 - but they do have some free tiers if you
23:30 - just want to tinker around with it and
23:32 - they also did release an open source
23:35 - library if you want to basically use
23:37 - their technology but
23:40 - not have as many of the bells and
23:41 - whistles but run it on your own servers
23:45 - graphql.org is uh the specification page
23:49 - graph.cool we just talked about
23:51 - graphql stack is that uh
23:54 - reference i was talking about earlier
23:55 - where you can
23:56 - someone like took the time and
23:59 - blessed them for it
24:00 - and went through
24:02 - all the different types of whether
24:04 - you're doing backend serverless front
24:06 - end
24:07 - what language you're writing in and you
24:09 - just do a drop down
24:11 - and it'll say oh well here's the if
24:13 - you're writing in
24:14 - python on backend server here's the
24:17 - frameworks if you're writing an elixir
24:19 - if you're it's amazing
24:22 - apollo graphql i think is one of the
24:24 - best um
24:26 - javascript frameworks they have both an
24:28 - express server and a client server
24:31 - that they're continuing to iterate on
24:34 - and doing really well with
24:37 - i love collecting
24:40 - graphql links because it's kind of a
24:42 - passion of mine so that's my pin board
24:43 - with all of my graphql tags and if
24:45 - you're interested in checking out the
24:46 - kombucha log application that i'm
24:49 - building it is on github
24:50 - although it's not being as actively
24:52 - developed now that i'm working uh full
24:55 - time
24:56 - so all right well thank you so much
25:03 - [Music]
25:16 - you