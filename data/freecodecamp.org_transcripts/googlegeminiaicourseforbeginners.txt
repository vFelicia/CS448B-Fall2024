00:00 - dive into the cuttingedge realm of
00:02 - artificial intelligence with this
00:04 - comprehensive video course on Google's
00:06 - AI model Gemini Guided by Ana Kubo this
00:09 - course will teach you how to use the
00:11 - Gemini API and how to build an AI chat
00:14 - bot powered by gini if you are new to
00:17 - the world of AI this is the perfect
00:19 - video for you my name is Ana kuo and I a
00:22 - software developer as well as course
00:24 - creator here on free Camp as well as on
00:26 - my own channel in this video course we
00:28 - will be learning about AI as developers
00:30 - through the use of Google's AI model
00:33 - Gemini now as some of you may or may not
00:35 - know we can use AI chatbots in order to
00:38 - ask questions about the world generate
00:39 - images or even have full-on chat using
00:42 - information we fed in before but how
00:44 - does this even happen and how can I
00:46 - build my own AI chatbot well this is
00:50 - exactly what we'll be covering today in
00:52 - fact here is a full list of what we will
00:54 - be looking at throughout this video we
00:57 - will start off with this introduction
00:59 - and then move on to to have a look at
01:00 - what Gemini actually is Follow by
01:03 - looking at AI so that we actually
01:06 - understand it next we will look at llms
01:08 - or large language models followed by
01:11 - getting our API key in Pre for making
01:14 - out our final project we will then
01:16 - quickly cover tokenization before moving
01:18 - on to some of the models that we can
01:20 - access with Gemini and then of course
01:23 - we're going to build out our ay code
01:25 - buddy so what are we waiting for let's
01:28 - do it what is Gemini in the least amount
01:32 - of words Gemini is a series of
01:34 - multimodal generative AI models
01:36 - developed by Google Gemini models can
01:39 - accept text and image in prompts
01:41 - depending on what model variation you
01:43 - choose and output text responses what
01:47 - this means is that we can feed in text
01:49 - prompts such as what day of the week is
01:51 - it today and we can receive responses
01:54 - back such as it is Wednesday and not
01:57 - only that we can feed in images as
01:59 - prompts too so I can feed in a picture
02:01 - of a cat in a hat and we can ask what is
02:05 - in the photo and we should receive back
02:07 - a text response pretty cool right we can
02:10 - do this by interacting with the Gemini
02:13 - app previously known as bod we can do so
02:16 - pretty easily by typing the prompt here
02:18 - and we can then even see a history of
02:21 - all our previous chats so here I am
02:23 - writing a prompt in text and receiving
02:26 - the text back as well as continuing a
02:28 - whole chat that takes into account the
02:31 - previous messages I sent or here I am
02:34 - uploading images and asking questions
02:37 - about them or if you actually want to
02:40 - use this core technology to build your
02:42 - own apps you can also interact with a
02:45 - Gemini
02:46 - API by interacting with the API or
02:50 - application programming interface we can
02:52 - do exactly what the Gemini app UI does
02:56 - so for example putting in text inputs
02:59 - and receiving a text input back by using
03:01 - the Gemini pro model and the generate
03:04 - content method from
03:06 - it and we can also use the generate
03:09 - content method from the gemino provision
03:12 - model in order to prompt with text and
03:14 - or images and receive text back as well
03:18 - as build multi-turn conversations with
03:21 - the Gemini pro model using the generate
03:23 - content method as well as some extra
03:26 - configuration we will also look at
03:28 - creating embedding using the embedding
03:30 - 001 model with the embed content method
03:34 - but for that we need to understand what
03:36 - embeddings actually are first we will go
03:39 - into these models and the methods they
03:41 - come with and how to use them
03:43 - individually later on just for now know
03:45 - that these are the most popular at the
03:47 - time of recording and a few more do
03:49 - exist but we will not be covering them
03:52 - in this particular course okay so we got
03:55 - it to recap Gemini is a series of
03:58 - multimodal generative AI models
04:00 - developed by Google that you can
04:02 - interact with via an API or via the app
04:05 - of the same name of Gemini what is ai ai
04:09 - or artificial intelligence is the
04:11 - simulation of human intelligent
04:13 - processes by machines I say simulation
04:17 - as artificial intelligence is not sense
04:19 - it at least not yet anyways meaning it
04:22 - cannot think for itself as much as it
04:24 - may seem it does often when we say AI we
04:28 - most of the time are referring to a firm
04:29 - called machine learning machine learning
04:32 - works by using large amounts of training
04:34 - data that is then analyzed for
04:35 - correlations and patterns these patterns
04:38 - are then used to predict outcomes based
04:40 - on the training data provided so for
04:43 - example if I was to feed this training
04:46 - data basically summarizing what each
04:48 - paragraph is about so for example that
04:51 - we are feing data saying that a
04:53 - paragraph that looks like this should be
04:55 - categorized as Finance the second
04:58 - paragraph should be put in the category
04:59 - of fashion and so on with some code we
05:03 - should be able to train our AI model to
05:05 - correctly guess what future paragraphs
05:08 - are about and that's it so if we were to
05:11 - get a paragraph that says Bad Bunny had
05:13 - some black adeda sneakers that were from
05:15 - 4
05:16 - 2022 this was a great something
05:18 - something then thanks to our training
05:21 - data the AI model should guess with some
05:24 - percentage of accuracy that the topic
05:26 - for this paragraph should be fashion of
05:29 - course that is a super super basic
05:32 - example and we would need way more data
05:34 - than these five paragraphs right here
05:36 - but you get the idea as of now rapidly
05:39 - improving generative AI techniques can
05:41 - create realistic text responses and even
05:43 - images music and other media thanks to
05:46 - the huge amounts of training data and
05:48 - talented developers working on it today
05:51 - large language models large language
05:54 - models or llms are machine learning
05:57 - models sometimes referred to as AI model
05:59 - models that can comprehend and generate
06:01 - human language text so in fact we
06:04 - already had a look at a super super
06:06 - basic example of one it was when we fed
06:09 - training data into our AI model so that
06:12 - it could accurately predict what
06:14 - category a paragraph would belong to at
06:16 - their most basic level large language
06:19 - models are like sophisticated
06:21 - autocomplete applications just like
06:24 - guessing a category that a paragraph can
06:26 - belong to we can train models to take an
06:28 - input of Tex text such as you can lead a
06:31 - horse to water and have the llm output
06:34 - text statistically return but you can't
06:36 - make it drink as the following text
06:38 - suggestion based on patterns learned
06:41 - from the training data in fact you can
06:44 - use this basic property of llms for
06:47 - various applications you can use it to
06:49 - generate poetry short stories metors
06:52 - blog posts and other creative copy or
06:55 - convert structured data to free form
06:57 - text or even extract and summarize
06:59 - information from Fe form text generate
07:02 - code translate or build a chatbot like
07:05 - we we doing today so now some of you may
07:09 - ask is there a Randomness in llm
07:11 - responses or are they
07:14 - deterministic this your answer is yes to
07:16 - both when you prompt an nlm its text
07:20 - response is generated in two stages in
07:22 - the first stage the llm processes the
07:24 - input prompt and generates a probability
07:28 - distribution over Poss I tokens or words
07:31 - that are likely to come next for example
07:34 - if you prompt with the input text the
07:36 - dog jumped over there dot dot dot the
07:39 - llm will produce an array of probable
07:42 - next words so as you can see here the
07:45 - word fence has the highest probability
07:47 - score as opposed to ledge or blanket
07:50 - this process is
07:52 - deterministic an llm will produce the
07:54 - same distribution every time it's input
07:57 - the same prompt text in the second stage
08:00 - the llm converts these distributions
08:02 - into actual text responses through one
08:04 - of several decoding strategies a simple
08:08 - decoding strategy might select the most
08:10 - likely token at every time step this
08:13 - process would always be
08:15 - deterministic however you could inste
08:17 - choose to generate response by randomly
08:19 - sampling over the distribution returned
08:21 - by the model this process would be
08:23 - random you can control the degree of
08:25 - Randomness allowed in this decoding
08:27 - process by setting the temp temperature
08:30 - a temperature of zero means only the
08:32 - most likely tokens are selected and
08:34 - there's no Randomness conversely a high
08:37 - temperature injects a high degree of
08:39 - Randomness into the tokens selected by
08:41 - the model leading to more unexpected
08:44 - surprising model
08:47 - responses okay so now that we've
08:49 - understood that let's work on actually
08:51 - getting our apiq to work with
08:54 - Gemini just like most apis the Gemini
08:57 - API uses API key key is for
09:00 - authentication in this section I'm going
09:02 - to show you how to get your own API key
09:04 - for when it comes to communicating with
09:06 - the API from the applications that we
09:09 - will be building today remember make
09:12 - sure not to share or upload your API key
09:14 - anywhere public if you do someone might
09:17 - take it use it in their own project and
09:19 - use up all of your free tokens or rack
09:21 - up a huge credit card bill if you have a
09:23 - card attached this also includes
09:26 - exposing in any client side code by this
09:29 - I mean building an app without a backend
09:31 - and deploying it onto the internet the
09:33 - code in this case will be visible simply
09:35 - by inspecting it like so someone will
09:38 - then be able to go and take it from here
09:40 - for their own use to use this key safely
09:42 - requests must be rooted through your own
09:44 - backend server where your API key can be
09:46 - securely loaded from environment
09:48 - variable or Key Management Service okay
09:51 - so let's do it let's get our API key
09:54 - okay so first we're just going to start
09:56 - off on this URL currently at at the time
09:59 - of recording this is what it is and
10:01 - we're going to choose to build with
10:04 - Gemini we just take us here and then
10:06 - we're going to click on AI
10:08 - google.de now you might be required to
10:12 - sign in or because I am using Google
10:14 - Chrome I could just go ahead and get API
10:17 - key in Google AI studio so I'm just
10:20 - going to click here
10:24 - and taada once you are here so
10:28 - essentially you can write prompts here
10:31 - if you would like such as what day is it
10:35 - and hit enter and the chat will work you
10:39 - can actually select the model from a
10:41 - drop down here and you can also select
10:43 - the temperature the temperature is
10:46 - something that we covered in the
10:48 - previous section and essentially as we
10:50 - know allows us to be more deterministic
10:53 - with our answers so that is something
10:55 - that you can set you can be more
10:57 - deterministic or less Det DET
10:59 - terministic okay so we get the response
11:02 - back great now to get your API key all
11:05 - you're going to do is click here so I'm
11:07 - going to go ahead and select that and
11:10 - we're going to create an API key so go
11:12 - ahead and select create API key and I'm
11:16 - just going to search for generative
11:18 - language client it's actually the only
11:20 - Google Cloud project that we have and go
11:23 - ahead and select create API key in
11:26 - existing project so now we have our API
11:30 - key make sure to copy this and of course
11:33 - keep it safe and do not share it or put
11:36 - it in any code that can be visible to
11:38 - anyone on the internet okay cool that is
11:43 - just because you could use up all your
11:45 - credits or if you have a credit card
11:47 - attached it could of course take up all
11:50 - your pennies from your credit card
11:53 - amazing and of course you can delete API
11:56 - keys and create new ones if you want so
11:58 - for example example if one is
12:00 - compromised and that's it I hope that
12:03 - was easy to
12:04 - understand great now that we have our
12:06 - API Keys let's get to looking at the
12:08 - available models to our disposal after
12:10 - learning about
12:12 - tokenization when using long proms it
12:15 - might be useful to count tokens before
12:17 - sending any content to the model if you
12:19 - want to be specific about it you can use
12:21 - one of the models at our disposal it is
12:24 - the gemino prob model we touched on
12:26 - previously along with the count tokens
12:28 - method you can get it with this car
12:30 - command I will show you how to do this
12:32 - in a bit however as a general rule of
12:34 - thumb for Gemini models a token is
12:36 - equivalent to about four characters 100
12:39 - tokens are about 60 to 80 English words
12:42 - okay so let's do
12:44 - it okay so all I'm going to do in order
12:48 - to get a template for the code is head
12:50 - over to the rest API and then I'm going
12:54 - to just go to count tokens and this will
12:57 - tell me the
12:59 - method that we're going to use from the
13:02 - model the Gemini pro model so we're
13:04 - going to use this in order to write our
13:06 - own curl command so let's go ahead and
13:09 - get with our terminal I'm going to write
13:12 - curl just like so as the header content
13:14 - type we're going to have application
13:16 - Json and then as the content we're going
13:18 - to have this object which takes an array
13:22 - of another object and then the text that
13:25 - we want to essentially find out how many
13:28 - tokens make it up so as the text I'm
13:32 - just going to write let's go ahead and
13:34 - go up
13:35 - there let's do write a story about a
13:41 - magic
13:44 - backpack and then we're going to have to
13:45 - put in our API keys so making sure that
13:48 - this is the same so generative language
13:50 - googleapis.com slv1 beta models Gemini
13:54 - Pro and then the method count tokens and
13:56 - then we're going to put in our API key
13:58 - here that we just saved so go ahead and
14:01 - just whack in your own like so and hit
14:05 - enter and amazing so we now know that
14:09 - this string this string takes up eight
14:13 - tokens great and that's
14:16 - it models as we know we can interact
14:20 - with the Gemini API by interacted with
14:23 - the API we get access to all the Gemini
14:25 - generative AI models and their methods
14:27 - including these for right here as a
14:30 - recap we can have text only input and
14:33 - use the generate content method to
14:34 - generate a response from the Gemini pro
14:37 - model given an input message and we can
14:39 - also use the generate content method
14:41 - from the gerini Pro Vision model in
14:43 - order to prompt with text and or images
14:46 - and receive text back as well as build
14:48 - multi-turn conversations with the gemo
14:50 - pro model using the generate content
14:52 - method as well as some extra
14:54 - configuration we will also look at
14:56 - creating embeddings using the embedding
14:58 - Z 01 model with the embed content method
15:01 - but for that we need to understand what
15:02 - embeddings actually are first so let's
15:05 - have a look at how these four work for
15:08 - this cause we'll be using node.js make
15:11 - sure to have node.js version 18 and
15:13 - above installed and npm installed first
15:16 - off we would need to initialize the
15:18 - generative AI model we would need to do
15:21 - this for all the scenarios in order for
15:23 - this to work you will need to install
15:25 - the SDK package right here
15:29 - okay so here is the code we will be
15:30 - using to initialize the generative model
15:33 - if you want to have a look at it this
15:35 - time we're going to be going to node.js
15:38 - as we're going to start building out a
15:40 - nodejs app so let's go ahead and do it
15:45 - we're going to initialize the generative
15:47 - model after of course installing this
15:50 - package so let's get up our code editors
15:53 - of choice I'm just going to create a new
15:55 - project I'm just going to call this
15:58 - scratch pad okay so just like that and
16:02 - create it so here we are has an empty
16:05 - project and I'm just going to get out my
16:08 - terminal so I'm going to click here
16:10 - making sure that we are in the scratch
16:12 - pad and I'm just going to initialize
16:14 - this so npm in it for this to
16:17 - essentially spin up a package Json file
16:19 - with the correct
16:21 - configuration so let's go ahead and
16:24 - choose package name default version one
16:26 - description I'm going to keep empty I'm
16:28 - just going to literally go through all
16:30 - of these and choose the defaults is this
16:33 - okay and yes and my package Json file
16:36 - should be in here now great now let's go
16:40 - ahead and install that dependency so I'm
16:43 - just going to go back in here let's copy
16:46 - that and I'm going to do npm install
16:49 - Google generative AI so please be aware
16:52 - of the version of this package that we
16:55 - will be using for this tutorial if you
16:57 - are using this in the future and
16:59 - something isn't working it could be down
17:01 - to the version you are using in which
17:02 - case you'll have to revert back to this
17:04 - so for example if it's here just go back
17:06 - to this and then run npmi again to
17:09 - install this package but of course we
17:11 - don't need to do that cuz this is the
17:13 - version that we want to use for this
17:15 - project great now while we are here I'm
17:18 - just also going to write a start script
17:23 - so start and node we're going to listen
17:26 - out to changes on an index ch s file
17:29 - that is fine if we want to listen out to
17:31 - constant changes we can use noem one in
17:34 - which case we need to install the
17:35 - package noem one 2 and once that is done
17:39 - we should be able to use a start script
17:42 - so this is the script I just wrote to
17:45 - essentially run an index GS file and
17:47 - listen out to changes on it so let's go
17:50 - ahead and create that index GS file so
17:52 - it's a Javascript file I'm going to call
17:54 - it index JS just like so wonderful so
17:58 - this is is looking good I'm happy with
18:00 - all of this let's just shut this down
18:03 - now okay I'm going to make this a little
18:05 - bit bigger for you so now I can use npm
18:09 - Run start and this will start off
18:12 - listening out to the index JS file that
18:15 - is good and now we're going to
18:17 - essentially initialize the generative
18:21 - model so let's go ahead and do this
18:24 - const and we're going to get Google
18:28 - Google
18:30 - generative
18:32 - AI
18:34 - from
18:35 - Google generative AI okay so that's how
18:39 - you need to write it and maybe let's
18:42 - just minimize these for now so great
18:45 - once you have that we're going to get
18:47 - Google generative AI we're going to pass
18:49 - our API key into it okay so we're going
18:52 - to pass it through so that we can use
18:54 - Google generative AI for the purpose of
18:56 - this tutorial I'm just going to pass in
18:58 - the API key like so and now we have all
19:01 - of its method and properties to our
19:03 - disposal so let's save them as something
19:06 - I'm going to save them as gen AI great
19:09 - now if you do want to be super safe and
19:12 - you don't kind of even want to leave
19:14 - your API key even in here for demo
19:15 - purposes you can create a EnV file so
19:20 - you would just go ahead and create a new
19:22 - file call ITV and this is essentially
19:25 - for secrets so I'm going to call this
19:28 - API key and just paste in my API key in
19:31 - order to access this so This value by
19:35 - its
19:38 - property I can now just use
19:42 - process EnV and then API key okay
19:46 - however we do need a package for this uh
19:49 - so let's go ahead and do that I'm just
19:50 - going to open this up again making sure
19:52 - that we are in scratch pad and we need
19:54 - to install a package called EnV so that
19:58 - we can use EnV okay in this project and
20:01 - of course we need to also require it so
20:06 - require EnV
20:09 - config great so let's get rid of that
20:12 - for now and this is still running
20:14 - wonderful so that is now doing its thing
20:18 - we've initialized the generative model
20:21 - so that we can now like I said get all
20:23 - the methods and properties from it
20:26 - they're all stored under gen AI so I
20:28 - grab gen Ai and for example I can use
20:31 - get generative model and we can pick
20:35 - which model we want so for example I
20:39 - could go ahead and put model and then we
20:41 - would put Gemini Pro or anything like
20:44 - that okay so we're going to put in the
20:47 - string of Gemini Pro and then let's also
20:50 - save this to the C model as that the
20:53 - model we will be using for this tutorial
20:56 - wonderful so that that is it of course
20:59 - if you need to change the model please
21:01 - go ahead and change the text here making
21:03 - sure that it is spelled exactly the same
21:06 - as in the documentation meaning that if
21:08 - you want Gemini provision it has to be
21:11 - spelled like this or if there's any more
21:13 - in the future that you want to use just
21:16 - again refer to the documentation to get
21:18 - that spelling correct wonderful let's
21:22 - move on this is the final code okay so
21:26 - just to make sure this works I'm just
21:28 - going to conso log out the
21:31 - model and great everything looks as if
21:35 - it's working well okay so now let's move
21:38 - on and work on the generating text from
21:41 - text only input when the prompt input
21:44 - includes only text okay we just want
21:46 - text we want a text prompt and we want
21:48 - some text returned back to us from the
21:50 - model for that we need to use the gemino
21:52 - pro model with the generate context
21:55 - method okay so that's what we're going
21:57 - to be doing next I'm going to show you
21:59 - how to do it so this I would say is the
22:01 - most basic one uh I would of course need
22:05 - to initialize the model so let's go back
22:07 - to where we left off so here we are
22:10 - where we left off I'm just going to get
22:11 - rid of this console log once again this
22:13 - is me initializing the model so I can
22:16 - use it and once we have done that
22:19 - perhaps let's go ahead and write a
22:23 - function for this so I'm going to make
22:24 - this an async function let's call it run
22:28 - just like so and in this function is
22:31 - actually where I'm going to Define what
22:35 - model we want to use so I'm just going
22:37 - to whack that in there like so the model
22:40 - is going to be Gemini Pro as we said the
22:42 - next thing we need to do is Define a
22:44 - prompt so that prompt again maybe let's
22:48 - keep it the same so write a story
22:52 - about
22:53 - a
22:55 - magic backpack and now let's get the
22:59 - result so we essentially need to send
23:01 - over that prompt right so we're going to
23:05 - get this prompt and we're going to put
23:08 - it in to the generate content method and
23:12 - it lives on the Gino pro model so let's
23:15 - grab that
23:16 - model and let's get the generate content
23:21 - method from it and I'm just going to
23:23 - pass through the prompt and we're going
23:25 - to have to await this as this is an
23:27 - async methods we're going to have to
23:28 - wait for that to come back to us and
23:32 - once we have that
23:34 - result we're going to get the response
23:37 - from it but uhoh this is also async so
23:40 - we need to await it and let's save the
23:43 - return of this as something I'm going to
23:45 - save it as response and once we have
23:48 - that response I'm going to get the text
23:51 - from it and call it like so and just
23:53 - save this under text okay so there we go
23:58 - so let's just console log this text out
24:00 - so we can see what is going on and I'm
24:02 - just going to call this function so just
24:05 - like that let's hit
24:08 - save and great so this is the text that
24:12 - comes back so we've prompted the text of
24:15 - write a story about a magic backpack and
24:17 - we get a story about a magic backpack we
24:21 - get the text coming back to us so in the
24:24 - qut little town of Willow Creek a mixed
24:26 - Rolling Hills and Whispering Willows
24:27 - there's a curious young girl named Ana
24:29 - no way that is me little did she know
24:33 - that the ordinary bpack held a secret
24:34 - that would change her life forever so
24:36 - this is pretty cool I don't know if
24:38 - that's kind of creepily meant to be
24:40 - based on me or if that is a complete
24:42 - coincidence but I'm really into this I
24:45 - will read the story when I have time
24:48 - wonderful I'm really happy with this
24:51 - once again this is the full code that
24:54 - you will need in order to create text
24:58 - prompts okay so now let's look at
25:01 - generating text from text and image
25:04 - input so this is multi modal Gemini
25:06 - actually provides a multimodal model
25:08 - called Gemini provision so not Gemini
25:11 - Pro it's Gemini provision and we can
25:13 - input both text and images if we want so
25:18 - let's go ahead and do it I'm going to
25:20 - show you a super basic example so you
25:22 - can build out your nodejs out with it
25:25 - once again we're going to be inputting
25:27 - both text and images using the Gemini
25:30 - provision model with the generate
25:32 - content method from it to generate text
25:35 - input okay
25:38 - great so this time what I'm going to do
25:42 - well let's go ahead and go back to where
25:45 - we started so let just going to move
25:48 - this out here and delete this whole
25:51 - function so here is where we started off
25:55 - last time we did say we want the model
25:57 - to be Gemini Pro
26:00 - Vision so I'm just going to replace that
26:05 - and now we're going to also require
26:07 - another package that's going to allow us
26:08 - to essentially work with image files a
26:11 - little bit better it's the package
26:14 - called FS so
26:16 - FS require FS which means we need to
26:19 - install it so once again I'm going to do
26:22 - npm ifs in order to install that
26:24 - dependency you will see it show up in
26:27 - the package Json so if you look in here
26:30 - this is the version of FS that we are
26:32 - using so just keep that in mind and once
26:35 - again revert back to this if you're
26:37 - viewing this in the future and something
26:39 - doesn't seem to be working great let's
26:42 - move
26:43 - on now we're going to first have to
26:46 - convert local file information to a
26:49 - Google generative AI part object and in
26:51 - order to do this I'm going to write a
26:52 - function so the function here I'm going
26:55 - to call it file
26:58 - to
27:03 - generative part we're going to pass
27:06 - through two things a path and a mime
27:09 - type okay and then we're just going to
27:12 - return an object I'm going write
27:15 - inline
27:16 - data and this is also going to be an
27:19 - object I'm going to pass through some
27:21 - data to it which essentially we're going
27:26 - to buff from FS read path and then we
27:32 - are going to get all of
27:35 - this and append to string base 64 and
27:39 - we're also going to pass through the
27:42 - mime type okay so whatever we pass
27:44 - through into this function we're going
27:46 - to put here and here so that essentially
27:50 - will create a generative part to our
27:53 - files now let's go ahead and write our
27:56 - async function again again that will run
27:59 - this thing so async function
28:03 - run just like so once again we're going
28:07 - to get that model so Define our model in
28:12 - here and then let's also Define our
28:17 - prompt so const
28:21 - prompt what's
28:24 - different between these
28:31 - pictures so just like that and then
28:34 - let's get both our images so image
28:38 - Parts we're going to have two I'm going
28:40 - to use the function we just wrote we're
28:42 - going to pause through the
28:44 - file okay so I'm just going to put the
28:48 - files I'm going to put two in I'm going
28:50 - to put a picture of a cat so I'm just
28:55 - going to put on the same level as the
28:58 - index GS so we can just write the file
29:00 - name so there we go there it is I'm just
29:03 - going to type it out
29:05 - so cat. JPEG and this is an image JPEG
29:11 - and then let's do the other one so this
29:14 - time I'm just going to drag in another
29:16 - picture this one is going to be of Rick
29:20 - and Morty we have this one and then we
29:22 - have this one too okay so now I'm also
29:26 - going to write the path to the Rick and
29:28 - morti file this is a JPEG file image
29:32 - JPEG okay again we can just put through
29:36 - the file names as these files live on
29:37 - the same level as the index JS file
29:40 - great so those are the two images we
29:42 - will be comparing now once again let's
29:45 - work on getting the result so const
29:48 - result equals we're going to await the
29:50 - model we are using the generate content
29:54 - method and I'm going to pass through an
29:56 - array so we're going to pass through the
29:59 - prompt and the image part okay this
30:01 - generate content method lives on a
30:03 - different model this time it lives on
30:05 - the Gemini provision model so we can
30:07 - pass through two images along with the
30:10 - prompt and now once we have that let's
30:13 - get the response so
30:16 - response equals result but we're going
30:20 - to have to await it and we're going to
30:22 - get the
30:23 - response and then we're going to get the
30:25 - text so let's define that text and we're
30:28 - going to get the response and we're
30:30 - going to get the text from it like so
30:34 - and just console log out the text so
30:38 - great now let's run this so just like so
30:43 - and Tada the first picture is of a cat
30:46 - and the second picture is of a character
30:48 - from the anime series one punch man I
30:50 - don't know if that's true I'm pretty
30:52 - sure it's uh Rick and myty so I don't
30:55 - really know what one punch man is but
30:57 - hey that's close enough okay so great
31:02 - that is how you would essentially use
31:05 - the generate content method from the
31:10 - Gemini provision model let's move on so
31:14 - I'm just going to clean this up for the
31:15 - next one let's get out this model I'm
31:17 - just going to put everything back to
31:18 - where it was and I'm going to delete
31:20 - everything in here so we can
31:22 - start with this and we don't need that
31:26 - one either any
31:28 - now let's look at building a multi-time
31:30 - conversation chatbot so using Gemini we
31:33 - can also essentially create chatbots
31:35 - that will essentially take all the
31:37 - history of your chat previously in order
31:40 - to take into context your next questions
31:43 - to build a multi-time conversation so
31:45 - like a chat we're going to use the
31:46 - Gemini pro model and initialize the chat
31:49 - by calling start chat and then use send
31:51 - message to send a new user message which
31:53 - she'll also append the message and the
31:55 - response to the chat history
31:57 - okay so there are two possible options
32:01 - for roles associated with this we're
32:03 - going to have the user and this is the
32:05 - role which provides the prompt and we're
32:07 - also going to have the model which is
32:08 - essentially the role which provides the
32:10 - response this role can be used when
32:13 - calling start chat with existing history
32:16 - so let's go ahead and do it let's go
32:18 - back to our code so once again this is
32:20 - the start point that we have started at
32:23 - throughout this course I'm going to
32:25 - change the model to be Gemini Pro so
32:28 - that is now our model so let's go ahead
32:31 - and write our function so I'm going to
32:32 - write an async function let's call it
32:34 - run so just like so and now what we're
32:38 - going to do well I'm just going to stick
32:40 - that in here like we have been doing
32:43 - previously and let's go ahead and
32:45 - essentially start the chat so I'm going
32:47 - to get the model and it comes with a
32:49 - method called start chat so start chat
32:53 - is the method that we're going to use
32:55 - and we're essentially going to pass
32:56 - through an object let's go ahead and
32:58 - also store this as something so I'm
33:00 - going to save this as the cons chat just
33:02 - like so and in here well we're going to
33:05 - pass through the history it's going to
33:06 - be an array there's going to be multiple
33:09 - objects in here the first object is
33:11 - going to be of the role user so let's
33:13 - pretend this is a previous question that
33:15 - we asked so I'm going to say that as the
33:18 - user I asked
33:20 - hello I have two dogs in my house so
33:25 - let's have a question and of a statement
33:28 - and then let's also say that the model
33:31 - responded
33:33 - with great to meet you what would you
33:38 - like to
33:42 - know okay so that is the history
33:45 - essentially now let's also Define our
33:48 - message so let's define our message
33:52 - here and we let's say we want to ask a
33:55 - followup question of how many PS are in
34:00 - my
34:01 - house okay so that is a good message uh
34:05 - so that is really it we've got the
34:06 - history we've got the new question we
34:08 - want to ask so let's go ahead and get
34:10 - the result right so
34:13 - result equals we going to await
34:17 - chat okay because that's what we've
34:19 - defined here and we're going to
34:22 - send message that's another method that
34:25 - comes with it I'm going to just pass
34:26 - through the new message like so so once
34:28 - we have all of that so the history and
34:31 - our new message I'm going to get the
34:33 - response and we're going to
34:36 - await the
34:38 - result
34:40 - response and once we have that we going
34:43 - to need the text from it so text
34:47 - response text and I'm just going to
34:49 - console log out the text don't forget to
34:52 - call this as well and now let's run this
34:54 - function and call it
34:58 - and great if you have two dogs and each
35:00 - dog have four pors then there are eight
35:01 - pors in your house amazing so this is
35:04 - what we're going to be using in order to
35:05 - build out our own chatw coming up soon
35:08 - for the final project let's just look at
35:10 - one last thing and that is creating
35:12 - embeddings
35:14 - next so once again I'm just going to get
35:17 - rid of all this let's move out the
35:20 - model and let's start with this code so
35:23 - we can start
35:25 - freshh now finally I want to talk a
35:28 - little bit about creating embeddings
35:30 - this is a bit more on the advanced side
35:32 - embedding is a technique used to
35:34 - represent information as a list of
35:36 - floating points essentially so floating
35:38 - Point numbers in an array with Gemini
35:41 - you can represent text words sentences
35:43 - and blocks of text in a vectorized form
35:46 - making it easier to compare and contrast
35:48 - embeddings so for example two text that
35:51 - share a similar subject matter or
35:53 - sentiment should have similar embeddings
35:55 - which can be identified through
35:56 - mathematical comparison techniques such
35:58 - as cosign
35:59 - similarity so that is what an embedding
36:02 - looks like essentially this array of all
36:05 - these numbers represents a word or a
36:08 - sentence and this is how we essentially
36:10 - look for terms with similar meaning so
36:14 - similar semantic meaning if you want to
36:16 - learn more about embeddings please do
36:18 - check out this amazing video that I have
36:21 - on free code camp that will be a deep
36:23 - dive into this subject for now however
36:26 - I'm going to show you how to make your
36:27 - own embeddings so let's go ahead and do
36:30 - that so this is going to use the batch
36:33 - embed content method or the embed
36:36 - content method that lives on the embed
36:38 - 001 model so let's go ahead and change
36:41 - it up so we're not going to use this
36:42 - model anymore we're going to use em
36:46 - embedding
36:47 - 01 okay and let's go ahead and Define
36:51 - our function again so async function
36:55 - run let's move the model into here like
36:59 - so let's get the
37:03 - text the
37:05 - quick brown fox jumps over the lazy
37:11 - dog now let's get the
37:15 - result await
37:17 - model embed content as that is the
37:20 - method we're going to use I'm going to
37:21 - pause through that text okay and now
37:24 - let's get the result and get the
37:25 - embedding from it and I'm going to save
37:28 - this under the const embedding just like
37:31 - so and let's just console log out the
37:35 - embedding okay and if I run this you
37:39 - will see that this piece of text the
37:42 - quick brown fox jumped over the lazy dog
37:46 - is represented by this Vector so this
37:48 - array full of all these numbers okay all
37:51 - of these right here this is the
37:53 - embedding it's got 668 more items and if
37:57 - you were to perhaps change this to the
38:01 - quick B fox jumped over the lazy C and
38:05 - run this this embedding that is created
38:09 - will be more
38:12 - similar so this one right here will have
38:15 - more similarity in numbers to this one
38:20 - than
38:22 - perhaps the quick brown fox jumped over
38:25 - the lazy helicopter okay because cat and
38:29 - dog are relatively similar as opposed to
38:32 - a helicopter so that is a quick crash
38:35 - course in embeddings and how essentially
38:37 - they're used in order to find words of
38:39 - similar meaning so I hope that was
38:42 - really interesting once again do check
38:43 - out that Vector embeddings video If you
38:46 - do find this interesting I would like
38:47 - you take your knowledge to the next
38:49 - level otherwise let's move on let's
38:52 - actually get to using one of these to
38:55 - build out our project project coming up
38:59 - soon okay so let's do it I'm just going
39:02 - to go ahead and create a new project so
39:04 - let's go ahead and select new project
39:06 - and this is going to be a react app so
39:09 - this will essentially spin up a react
39:12 - app for me thanks to the MPX create
39:14 - react app commat so let's go ahead and
39:17 - call this something I'm just going to
39:18 - call this
39:20 - Gemini app maybe let's stick react to
39:23 - the front Okay so this is essentially
39:25 - going to be stored in my webstorm
39:27 - project directory on my computer I'm
39:29 - just going to click create and wait for
39:31 - that to spin up the app along with all
39:34 - the preconfigured files that we need so
39:37 - this is wonderful this going to save us
39:39 - a bunch of time let's just wait for that
39:42 - to do its thing in the meantime I'm just
39:44 - going to go to the Gemini documentation
39:48 - so here we are here is the URL if you
39:50 - need it and we're just going to work on
39:53 - getting our API key so let's go ahead
39:56 - and build with Gemini and let's click on
39:59 - this link right here AI Google Dev and
40:02 - it should take us to our dashboard of
40:05 - course please do make sure that you are
40:07 - signed in so I'm just going to go ahead
40:09 - and sign in
40:13 - here and I'm just signing in with my
40:16 - Google account so please go ahead and do
40:18 - the same and now we are free to get our
40:20 - API key so that is something we're going
40:23 - to do as a reminder I'm just going to go
40:25 - to the API here what we're going to be
40:28 - doing is creating an app that uses the
40:32 - Gemini pro model and now we're going to
40:35 - just go to node.js as we are going to be
40:37 - building in node.js for this project and
40:40 - we're going to build a multi-turn
40:42 - conversation chat so if you click on
40:44 - here here is build multi- turn
40:46 - conversation chat we're going to use the
40:49 - Gemini pro model for this allow us to do
40:52 - so and essentially we're going to be
40:53 - taking this code from here so if you get
40:55 - stucke please refer to the documentation
40:58 - for now however we also need to get our
41:01 - API key so let's go ahead and do it you
41:04 - scroll down here and click on get an API
41:06 - key just click on here and it should get
41:09 - a key for you so that you can
41:11 - communicate with the API however make
41:13 - sure to keep this safe you don't want
41:15 - someone seeing in your key and racking
41:17 - up loads and loads on your credit card
41:19 - if you choose to attach a credit card to
41:21 - this eventually so let's go ahead and do
41:25 - this
41:26 - I'm going to head over to Google AI
41:29 - Studio get API key in Google AI
41:33 - studio and you should be able to get the
41:35 - API key now if you can't it could be
41:38 - because it is not available in your
41:40 - region so just keep that in mind great
41:45 - okay let's go back to our app so once
41:49 - this is done you will see all the node
41:51 - modules that you need as well as a
41:52 - source directory of all the files that
41:54 - have been added as well as a package
41:57 - Json along with all the dependencies
42:00 - that we will be using so far so these
42:02 - are the latest dependencies and the
42:04 - versions of them that we are using for
42:06 - this project please make sure to always
42:09 - keep the dependencies the same version
42:11 - okay just in case you're doing this in
42:13 - the future and you know something's
42:14 - changed and you want to still build this
42:16 - app just revert back to these versions
42:18 - that you see here as well as the
42:20 - versions that we will be installing so
42:23 - first off however I'm just going to
42:24 - clean this up a little bit so on the
42:27 - index GS file I'm just going to delete
42:30 - the report web vitals from here as we
42:32 - will not be doing that we also won't be
42:35 - doing any testing and I'm going to get
42:37 - rid of the semic codons just because
42:39 - that is my personal preference so that
42:41 - is all that should be in the index JS
42:43 - file just save that like I said I'm just
42:46 - going to delete these three files right
42:49 - here so the logo the report where vitals
42:51 - and the setup tests so just do the same
42:54 - delete anyway now in the index CSS we're
42:57 - going to start from scratch I'm going to
42:59 - delete everything from this file the app
43:02 - test JS is also going to be deleted as I
43:05 - don't want to do any tests so no test
43:07 - for you today let's also get rid of the
43:10 - app CSS files this is a small app so I'm
43:12 - just going to keep all the styling in
43:14 - the index CSS file and now the appjs
43:17 - file once again I'm just going to
43:20 - essentially delete all of this from it
43:22 - and let's delete all of that so we can
43:25 - start fresh so that should be in here
43:27 - I'm going to make this a functional
43:29 - expression as well just because that is
43:32 - my preference okay great so all you
43:37 - should have in the source directory is
43:38 - this appjs file that looks like this the
43:41 - index CSS file that is empty and the
43:43 - index JS file should look like this
43:47 - wonderful let's
43:51 - move
43:53 - on now let's go ahead and start store
43:56 - our secret somewhere so I'm going to
43:58 - create a new file it's a EnV file and
44:01 - we're going to add our API key in here
44:04 - so our Google generative AI key so let's
44:08 - go ahead and call this Google gen
44:11 - AI key you can call it whatever you wish
44:14 - and I'm just going to paste in my unique
44:16 - key like so great and that's it so now
44:20 - we are ready to continue we essentially
44:24 - can start building I'm just going to
44:26 - going to build out a simple front and
44:27 - forther so we can get started with the
44:29 - meia stuff soon so let's go ahead and do
44:32 - it let's go ahead and create a simple
44:34 - chat so in here what I'm going to do is
44:39 - let's create a wrapping div let's give
44:41 - it the class name app let's also have a
44:44 - section in here this is going to be the
44:46 - search section so I'm going to give it
44:48 - the class name of you guessed it search
44:54 - section just going to minimize that for
44:58 - now and I'm just going to have a
45:01 - paragraph element what do you want to
45:06 - know okay and then let's have a button
45:10 - that says surprise me in case we you
45:12 - know want to be surprised with something
45:14 - so
45:16 - surprise me just like that uh let's
45:20 - maybe also give this a class name I'm
45:22 - going to give the class name of
45:24 - surprise
45:27 - and in fact what I am going to do is
45:29 - actually put this in the paragraph
45:30 - element you will see why so in fact
45:34 - maybe let's run this I'm going to get up
45:35 - my terminal and I'm just going to do npm
45:39 - Run start and in fact because we're
45:42 - going to have a front end a b a backend
45:44 - I'm going to get that script I'm just
45:46 - going to Define it as the frontend
45:49 - script and we're also going to have a
45:52 - backend script okay so backend and this
45:55 - is going to be no demon so that's a
45:57 - package that we're going to have to
45:58 - install to listen out for constant
45:59 - changes on the server JS file which we
46:03 - are yet to write that's going to hold
46:04 - that whole back
46:06 - end so maybe let's go ahead and create
46:08 - that file new file it's a Javascript
46:11 - file I'm going to call it server
46:14 - JS okay cool and let's
46:20 - continue so before we forget let's
46:22 - actually install that package so maybe
46:25 - let's go ahead and do that now npmi
46:27 - noemon and that will essentially install
46:30 - it so it will just add to these
46:32 - dependencies right here noemon has just
46:35 - been added along with its version so
46:37 - okay let's start our front end I'm going
46:39 - to do npm run Start Front End again
46:42 - making sure you're just in that app and
46:44 - TDA it's spun up our front end along
46:47 - with the elements that we've essentially
46:49 - added I'm just going to inspect this so
46:51 - we can work with it a little bit better
46:54 - great this is looking looking good let's
46:58 - move on so let's just minimize that for
47:00 - now and let's continue adding elements
47:03 - so we've got that P element next I'm
47:06 - going to have a div and this is actually
47:08 - going to be a container so I'm going to
47:12 - wrap let's call this the input container
47:15 - as this container is going to wrap an
47:16 - input element so here is my input
47:20 - element and as all input it's going to
47:23 - have a value at the moment I'm just
47:25 - going to leave it like
47:30 - so let's also have a placeholder for it
47:33 - uh maybe let's have something like
47:35 - when is
47:39 - Christmas okay very simple
47:43 - question um we'll have an onchange which
47:46 - will essentially change the value for us
47:48 - and save it in the state of this app but
47:52 - for now I'm just going to keep it empty
47:53 - of course we haven't written that
47:55 - function yet cool I'm also going to do
47:58 - something and I'm going to have a button
48:01 - here it's going to say ask me and then
48:04 - another button so we're going to have
48:05 - two buttons but we're going to show them
48:07 - conditionally so ask me or clear so at
48:10 - the moment you can see both buttons but
48:13 - I want to be able to only show the ask
48:15 - me button if there's no
48:18 - error then show this button so if this
48:22 - is true show this element however if
48:24 - there is an error then we show this
48:28 - button which means we need to save that
48:30 - error and I'm going to save it to state
48:32 - so we might as well just go ahead and
48:34 - import use state from react we're not
48:37 - going to be using use effect so let's
48:39 - get rid of that and now I can set the
48:43 - error so that is the Syntax for saving
48:47 - state to the
48:51 - app okay at the moment there is no error
48:55 - or but we can actually just keep this as
48:58 - null for now or in fact this is going to
49:02 - be a string so I'm going to just save it
49:04 - as that at the moment this has been
49:07 - assigned to the value of error and if we
49:09 - want to change it we use set error so if
49:12 - there is an error at the moment there
49:14 - isn't we should see this because there
49:17 - is no error right so let's have a look
49:19 - and the ask me button is showing however
49:22 - if I change this to something
49:28 - when is wrong and save it then it will
49:31 - say clear because an error does exist
49:34 - okay so hopefully that makes sense so we
49:37 - have those two
49:39 - buttons and now outside of this div
49:42 - let's also show the error if one exists
49:44 - so if an error does exist I'm going to
49:48 - show this P element that shows the error
49:51 - otherwise if it doesn't exist this won't
49:53 - show at all cool
49:56 - now we're also going to have a div and
49:58 - this is actually going to show the
50:00 - search results so you know whatever
50:02 - comes back from the API but of course
50:04 - there going to be multiple it's going to
50:05 - be a history so it's going to be
50:06 - multiple chants so class
50:10 - name search result I will call it and
50:14 - here we're going to essentially map
50:16 - items onto something it's going to be a
50:18 - div and this div is going to hold a p
50:22 - element that is just going to be the
50:25 - answer so let's go ahead and give this
50:26 - the class name
50:29 - of answer okay and this div will have a
50:33 - key because when you map onto things you
50:35 - need a key so I'm just going to leave
50:37 - that blank for now great and that really
50:40 - is it okay hopefully that was painless
50:42 - of course it doesn't look very nice for
50:43 - now the magic of styling will literally
50:46 - transform this so let's go ahead and do
50:48 - it I'm just going to go ahead and get my
50:50 - index CS file so let's get into the
50:53 - source let's get an index CS C SS file
50:57 - and now all I'm going to do it's going
50:58 - to say that all the fonts so font family
51:03 - is going to be sand serif no backup okay
51:06 - just sand serif being really basic here
51:09 - really kind of streamlining this project
51:11 - margin
51:13 - zero padding is going to be zero let's
51:16 - make the whole width of this 100 of the
51:18 - viewport width the height of this 100 of
51:21 - the viewport height and then the
51:23 - background color is just going to be
51:25 - like this off white that I picked out
51:28 - earlier and then the text color again
51:30 - it's not going to be black it's just
51:32 - going to be a gray so that's the short
51:35 - hand for writing seven seven s s six
51:37 - sevens display Flex we're going to
51:40 - initialize Flex box just so we can make
51:43 - sure that everything is in the center
51:44 - from like to left great all P elements
51:48 - in here again I'm just going to change
51:50 - the font weight to be 200 and I'm going
51:53 - to change the font size as well so I
51:56 - want the font size of all the elements
51:58 - the P elements to be exactly 14 pixels
52:02 - now the app itself so the element with
52:05 - the class name of app so this one right
52:08 - here I'm going to go ahead and make sure
52:11 - that it's width is smaller okay 80
52:14 - viewport width uh and I'm actually going
52:17 - to give it a margin of 10 viewport width
52:20 - again to make up to that 100 and the
52:23 - height is going to be 80
52:25 - viewport Hye okay great and that's going
52:28 - to contain everything in it um I think
52:32 - what shall we do let's have
52:37 - the search section so that is the first
52:40 - element in
52:42 - there I'm just going to make sure that
52:44 - it's 100% of the element with the class
52:48 - name of app the height of it is again
52:50 - going to be
52:53 - 100% uh let's use display Place flex and
52:56 - Direction column to make sure everything
52:57 - goes from top to bottom and that's
53:01 - really
53:05 - it okay so that section essentially is
53:09 - the same as the app so perhaps we can
53:11 - even go ahead and just give this the
53:15 - class name of app and just make this a
53:17 - div so I'm just going to delete that for
53:20 - now okay we're really streamlining
53:22 - things here so there we go and this just
53:26 - means that I can let's go ahead and add
53:29 - this like that and get rid of the search
53:31 - section completely great now let's go
53:34 - ahead and get the search
53:37 - results so the search results is here it
53:41 - lives inside the
53:45 - app let's maybe format this a little bit
53:47 - better so I'm just going to use webstorm
53:51 - to code format code and that is much
53:56 - better so the search
54:00 - result singular make sure that is
54:05 - singular I'm going to do margin top to
54:08 - space it out from the element above 10
54:11 - pixels and I'm going to do overflow
54:16 - scroll so we can scroll through all the
54:18 - results and we don't have to scroll the
54:20 - actual page okay great now let's pick
54:24 - out the little things so I'm going to
54:26 - pick out this button by the class name
54:28 - of surprise so do surprise let's give it
54:32 - a background color I'm going to go ahead
54:36 - and use another color that I have
54:37 - pre-picked out EC e
54:41 - cf1 I'm also going to change the color
54:43 - of the text to be black and then let's
54:47 - add a
54:48 - border radius of five pixels to round it
54:52 - off this should be that
54:56 - and let's also add a font weight to this
54:59 - text uh let's go ahead with
55:02 - 600 and the padding four pixels on the
55:06 - top and bottom and 12 pixels on the left
55:08 - and right the margin of this again this
55:12 - I'm going zero at the top zero on the
55:15 - right two pixels on the bottom and five
55:18 - pixels on the left and the border of
55:21 - this is going to be none okay so if
55:24 - you're interested in how this is looking
55:26 - so far here we go this is looking good
55:29 - let's carry on so now I'm going to style
55:33 - the input container so I'm going to find
55:35 - the element with a class name of itut
55:37 - container the width of this is going to
55:39 - be 100% H and now I'm going to add a
55:42 - border to this it's going to be a solid
55:45 - border 0.5 pixels in width and again
55:48 - caaca is the color I have picked out for
55:51 - it the Box sizing of this is going to be
55:55 - border box so that the border is
55:56 - actually on the
55:57 - inside and let's round it off so border
56:00 - radius maybe let's make it six pixel
56:02 - this
56:04 - time and the Box Shadow I'm going to
56:08 - give it is going to be rgba for
56:10 - transparency 0 0 82 with 0.15 opacity
56:17 - okay and once again we're going to a
56:19 - blur a
56:21 - spread and great now inside the input
56:25 - container I want to grab the input that
56:27 - lives in it uh I'm just going to get the
56:30 - rid of the border the padding for this
56:34 - let's go ahead with 13 pixels on the top
56:36 - and bottom and 14 pixels on the left and
56:38 - right once again box sizing I'm going to
56:41 - go with border
56:43 - box the font size I'm going to go with
56:47 - 15
56:49 - pixels outline none this will just get
56:53 - rid of the blue outline when you
56:55 - interact with the input and the width of
56:57 - this is going to be 90% of the parent
57:00 - with the font weight of this being 200
57:03 - okay so now the input looks like this
57:06 - I'm going to use display Flex on this
57:09 - input container so that each item is
57:12 - kind of next to each other the rather
57:13 - than stacked and there we go let's do
57:17 - the button next so in fact maybe let's
57:20 - also work on the placeholder text so I
57:23 - can do this by graph grabing the input
57:26 - that lives inside the input holder and
57:29 - then if I want to get the placeholder
57:31 - text I can change it like so uh yeah
57:34 - let's go with this color and let's just
57:36 - make this a little bit like that so
57:39 - there we go much better in my opinion
57:42 - okay now let's do the button that lives
57:45 - inside the input container so any button
57:48 - that lives inside the input container is
57:50 - going to have this styling I'm going to
57:52 - give it a minwidth of 10% uh border of
57:56 - course is going to be none and let's
57:59 - also just add a border on the left side
58:01 - okay to differentiate from the input
58:03 - let's give it one pixel solid and Y I'm
58:06 - happy with that gray let's also make
58:08 - sure the background color is white and
58:10 - the text color is going to be this one
58:12 - that I used before the font weight I'm
58:15 - going to go with bold and cursor I'm
58:18 - going to add a cursor that is a pointer
58:20 - just for fun okay just make sure that
58:24 - that is light that and let's see what it
58:27 - looks like so I love this so much let's
58:31 - move on I think maybe let's add overflow
58:34 - hidden to the input so once again let's
58:38 - go maybe to the input container this
58:41 - time I'm just going to go with
58:44 - overflow hidden just so that this is a
58:47 - bit more rounded off at the edges on a
58:50 - fo okay that's nearly finished so I'm
58:55 - also going to add some styling to any
58:58 - button that lives inside the input
59:00 - container and if it's active so this is
59:03 - how you grab an active button that lives
59:06 - inside the input container make sure
59:07 - that space is there I'm going to just
59:10 - change the background color to be ca ca
59:13 - ca so kind of grade out when it's active
59:16 - and finally let's
59:18 - also style anything with the class of
59:22 - answer and for us that is these P
59:25 - elements so I'm just going to go ahead
59:28 - and add a padding to each one of 13
59:32 - pixels at the top and bottom 14 pixels
59:34 - on the left and right let's also add a
59:36 - border of solid 0.5 pixels uh ca ca C
59:41 - okay so kind of similar styling
59:45 - repeating I'm also going to give them a
59:47 - background color let's make it white so
59:51 - #
59:52 - FFF a margin of 5 pixels a font size of
59:57 - 15 pixels a font weight of 200 and a
60:01 - border radius of six so wonderful I'm
60:05 - really happy with how this is looking so
60:08 - far okay let's work on linking up the
60:11 - surprise me button first so let's get
60:14 - rid of this for now and up here I
60:17 - essentially want to get a random value
60:19 - to work with so we've saved errors
60:23 - another thing I want to save is the
60:24 - value and the value is simply going to
60:26 - be the text that we are writing in here
60:29 - but we also want to generate some
60:30 - randomly so this is super simple to do
60:33 - all I'm going to do is Define our
60:35 - surprise options like so and it is going
60:39 - to be an array so that is good for us to
60:44 - use and I'm just going to put in some
60:47 - random options so who want the
60:50 - latest
60:51 - [Music]
60:53 - Noel
60:57 - piece prize can be one
61:00 - question we can also
61:03 - have where does
61:08 - pizza come from that's a great
61:11 - question uh and how do you make a BLT
61:17 - sandwich and clearly very hungry CU
61:19 - these are all very food focused pretty
61:22 - much apart from the first one so once we
61:24 - have our surprise options I'm just going
61:26 - to write a super simple function con
61:29 - surprise and all it's going to do is get
61:31 - a random value from this array so in
61:34 - order to get a
61:37 - random value yes thank You tab n we get
61:41 - the surprise options we open up the
61:43 - array we then get math floor which will
61:46 - round down to the nearest integer and we
61:48 - simply get the surprise options length
61:50 - and multiply it by math random and math
61:53 - random will return back a uh number from
61:56 - zero to just under one so if you
61:58 - multiply it by the length it'll always
62:00 - be just under three and we round it down
62:05 - so it could be either zero one or two
62:09 - and if we pass through zero into the
62:11 - array we'll get about this if you pass
62:12 - through one we'll get this and if you
62:14 - pass through two we will get that so
62:16 - that is how we get a random value and
62:19 - then I'm going to get random value and
62:21 - I'm going to pass it through to Z value
62:23 - so we're essentially at the beginning
62:25 - setting value to be this however if we
62:27 - call this function we will get a random
62:29 - value from here and reset this value
62:33 - using set value to be one of these three
62:36 - so now where should we do this well I
62:38 - think if we press the surprise button
62:41 - right so onclick of this I just want to
62:45 - call that function okay wonderful so
62:50 - maybe we should also add an option to
62:53 - disable this and I think this should be
62:55 - disabled if a chat history already
62:58 - exists right so maybe let's set
63:02 - const chat history set chat history and
63:07 - this will be an empty array so now if
63:10 - chat history exists we want this to be
63:13 - disabled but for now of course it's not
63:15 - and the other thing we want to pass
63:17 - through here is the value so we can
63:18 - actually see it in the input so on
63:21 - change we also need to set value of this
63:25 - I'm going to pass through the E Target
63:28 - value of whatever we type into the input
63:32 - itself of course we need to make this a
63:35 - function like so and pass through e so
63:38 - now this value so this value here can be
63:41 - changed in two ways right either if we
63:44 - click here on surprise me or if we start
63:47 - typing in here so let's try it
63:51 - out maybe as chat history you know if is
63:54 - an empty array up here we should
63:56 - probably change it to something if no
63:59 - chat history
64:03 - exists then we can do it there we go so
64:07 - this is looking good we're getting a
64:08 - random value each time or we can type in
64:11 - our own question like so and that will
64:14 - be saved to the value here so we can
64:17 - send it over to our API so let's do it
64:21 - so let's go ahead and write a function
64:23 - here and going to call it get response
64:26 - as that is essentially what we want to
64:27 - do we were going to get a response from
64:30 - the API just make sure to spell response
64:32 - correctly uh this is going to be an
64:35 - async function so let's just go ahead
64:37 - and whack that in here first off however
64:40 - if no value exists and we essentially
64:42 - click on the ask me button right so if
64:45 - you click on here and no value exists we
64:47 - want an error to show up essentially so
64:49 - I'm going to set an error and it's just
64:51 - going to say error
64:56 - please ask a
64:58 - question okay and we can of course show
65:01 - that too so maybe let's go ahead and put
65:05 - that here we already have so that will
65:07 - show up if there is an error and we're
65:10 - just going to return out of this great
65:13 - now we're going to try something so try
65:16 - and catch we're going to use the try and
65:18 - catch blocks I'm going to try something
65:20 - and if it doesn't work we're just going
65:22 - to catch any error we going to console
65:24 - error the error and we're also going to
65:26 - set the error so we're not going to use
65:28 - what comes back to us I'm just writing a
65:30 - super basic error that doesn't really
65:32 - give us much insight into what went
65:35 - wrong but if you want to take this a
65:39 - step further uh please do you can use
65:43 - this error to write some custom error
65:45 - messages cool so that's what we're going
65:49 - to do and now what are we going to send
65:53 - over to the back end well I think we're
65:57 - going to space this up a bit uh we're
66:00 - going to Define our options
66:04 - first okay and this is going to be a
66:07 - post method we are also going to be
66:09 - sending over the whole chat history so
66:13 - we're going to use Jason stringify I'm
66:15 - going to create an object and in that
66:17 - object we're going to send over all the
66:18 - chat history okay and we're also going
66:21 - to send over a message which is the lat
66:24 - lest text that we want to send through
66:26 - so essentially we're sending over
66:28 - whatever we type in here and if there is
66:30 - a chat history of previous questions
66:32 - we're going to send that over as well
66:35 - great let's also set our headers so
66:38 - we're going to choose content type Json
66:40 - for that that is correct and now as the
66:45 - response we're going to await Fetch and
66:48 - we can set our own Endo so let's say
66:51 - that we want our back end to be on Port
66:53 - 8,000 000 and I'm just going to make the
66:55 - end point Gemini and we're going to send
66:58 - through all these options with it so
67:01 - that is our response and of course once
67:04 - that comes back to us we're going to get
67:06 - text from it like so and save this as
67:09 - something we're going to await it though
67:10 - as it isn't
67:12 - asynchronous method so we need to await
67:15 - that and then let's save it as data and
67:17 - I'm just going to conso lock the data
67:18 - for now so we can see what's coming back
67:21 - great so now let's actually work on our
67:24 - back end so in here like I said we're
67:27 - going to define the port I did say this
67:29 - would be Port 8,000 so that's all I have
67:32 - done we are going to have to import a
67:35 - few packages or dependencies to help us
67:38 - here so let's just go ahead and open up
67:40 - a new tab making sure you're still in
67:42 - react Gemini app and I'm going to
67:44 - install
67:45 - Express which is going to help us with
67:47 - routing qu which is going to help us get
67:50 - rid of those pest Sky Blocks by qus
67:52 - messages when you're sending stuff from
67:54 - the front end to the back end and so on
67:56 - we're also going to use the EnV package
67:59 - to store secrets in our EnV file as you
68:01 - just saw and we are also going to need
68:05 - Google generative AI so let's go ahead
68:09 - and import that too so great that is the
68:13 - packages that we're going to need for
68:15 - this project so let's just wait for that
68:17 - to do its thing and let's continue so of
68:19 - course we're going to need Express
68:21 - require Express and we're going to wait
68:23 - for all of this wonderfulness from the
68:25 - package uh to come back and we're going
68:27 - to save it as Express and once we have
68:29 - it we're going to release it so this
68:31 - will essentially release methods and
68:33 - properties that come with Express and if
68:35 - we save it under a con so for example
68:38 - app we can now use app to get any method
68:42 - so for example to use method from it uh
68:45 - so great we're going to do that we're
68:47 - also going to require cor so
68:51 - const
68:52 - cores require cuse again this is to get
68:55 - past those pesky blocked by cuse
68:57 - messages when sending stuff from the
68:59 - front end to the back end and so on uh
69:01 - and we also going to also pass Jason
69:03 - from the front end so hence we need to
69:05 - use express Jason here great so let's
69:09 - just minimize that for now we also are
69:12 - going to require and we did import the
69:15 - EMV package so that we can essentially
69:17 - work with Secrets like our Google API
69:21 - key cool the other thing we're going to
69:24 - do is get Google
69:30 - generative AI from
69:36 - require and then the
69:41 - package at Google generative AI okay so
69:46 - there we go we've got everything nearly
69:48 - set up the other thing we're actually
69:50 - going to do is
69:52 - get that API key that we stored in our
69:57 - backend so I'm going to use Google
69:59 - generative Ai and I'm just going to PA
70:01 - through that API key okay I'm going to
70:04 - pass it through here so we can just go
70:07 - process EnV and then whatever we called
70:10 - our API key in our EnV file which was
70:14 - Google gen AI key so I'm just going to
70:17 - paste it in like so okay wonderful let's
70:22 - move on I'm also just going to listen
70:24 - out to check that everything is working
70:26 - as it should passing through the port as
70:28 - the first parameter and as the second
70:30 - parameter is a callback function I'm
70:33 - just going to do console log listening
70:35 - on Port and then I'll port number cool
70:39 - so now if we run this so for example
70:42 - here in the package Json we did write
70:45 - our script to listen out for anything on
70:48 - the server JS file so now I can do npm
70:51 - Run start backend and it should start
70:54 - our back end listening on Port 8,000
70:57 - everything is working as it should cool
71:01 - so now let's write our root we wrote a
71:06 - post request to the endpoint Gemini as
71:10 - you saw here so now what do we want to
71:13 - send over to this back end to this end
71:16 - point well it's essentially all of this
71:20 - right so let's actually do that and you
71:24 - can send stuff over and you can get it
71:26 - by going to wreck body and then that
71:30 - should bring back this whole body right
71:32 - here and if you want to get the history
71:35 - from it I can simply do do
71:38 - history so maybe let's actually console
71:41 - log this so we can see what is going
71:45 - on and I'm also going to console log the
71:47 - rec body message as that is another
71:49 - thing that we are sending over so let's
71:51 - just see this works for now I'm just
71:52 - going to get up here my back end so we
71:54 - can see what's being sent so now if I go
71:58 - ahead and send some
72:00 - text when is Christmas for example and
72:05 - now let's hook up the ask me button so
72:08 - let's actually get this whole get
72:10 - response function and attach it to the
72:14 - ask me button so on click of this we
72:16 - want to get a response so let's go ahead
72:20 - and do it ask me and let's go back in
72:22 - here and look in the ser GS file in the
72:24 - terminal we get two things being consell
72:27 - that we get the history which yes is an
72:29 - empty array as we set that up here and
72:32 - we also get the value which is when it's
72:34 - Christmas so we save the value up here
72:37 - but then we also said the value should
72:41 - be the message so great we are sending
72:43 - stuff over we're sending over the chat
72:45 - history and the value because we are
72:47 - going into the request body history and
72:49 - into the request body message so request
72:52 - body history request reest body message
72:54 - we're sending that over now let's send
72:56 - it over to Google so let's go ahead and
73:00 - do it okay all I'm going to do is get
73:03 - gen AI once again this is just from the
73:05 - documentation that I showed you earlier
73:07 - we're going to do get generative model
73:11 - and we're going to pass through the
73:12 - model that we discussed so let's define
73:15 - the model here it is the
73:18 - Gemini pro model and I'm just going to
73:22 - save this as model so we've just defined
73:25 - it this should be gen AI as we defined
73:31 - here and now let's define the
73:35 - chat the chat well we're going to get
73:37 - the model and we're going to use the
73:39 - method start chat that comes with it and
73:41 - we're going to create an object and
73:42 - we're just going to pass through the
73:45 - history which again we already have it's
73:48 - this so
73:52 - request
73:55 - body
74:02 - history cool and now let's also Define
74:05 - the message so we Define our chat and
74:08 - now the message is just simply going to
74:09 - be request body message so that's a lot
74:11 - simpler okay so I'm just going to delete
74:14 - that for now as we don't really need it
74:16 - the next thing we need to do is actually
74:19 - get the result of what comes back so
74:21 - const result equals we're going to await
74:25 - we're going to get the chat so what we
74:27 - defined
74:29 - here and we're going to send a message
74:31 - and we're going to send through this
74:32 - message to the chat as well so along
74:34 - with the history we're sending through
74:36 - the message too and now we're going to
74:38 - get the result and we're going to get
74:40 - the response from it and as this is
74:44 - a asynchronous function we need to await
74:48 - it and let's save this as the response
74:52 - so just like so so and then when we get
74:54 - the response we need to get it text okay
74:58 - and let's save this as text so just like
75:01 - that okay and now I'm just going to do
75:04 - res send the text to send it back to our
75:06 - front end make sure this is send message
75:09 - and once we get it back here well at the
75:12 - moment we're just console logging it out
75:14 - so now all I need to do is essentially
75:16 - map them onto here we need to save the
75:20 - history so I'm going to set chat history
75:25 - however when working with arrays we need
75:27 - to essentially set the old state which
75:29 - I'm going to choose to call Old chat
75:31 - history we need to release it back into
75:34 - the array and then the data well I'm
75:38 - going to actually create a new object
75:40 - that is in line with the data that
75:43 - already exists so the way that Google
75:47 - modeled it so we're going to have a user
75:50 - and the user essentially asks
75:53 - this question which is our value and
75:56 - then we're also going
75:58 - to have another object and this role is
76:03 - going to be the model and it's going to
76:06 - be what comes back to us so this is what
76:08 - the model said or essentially the AI
76:10 - said and it's going to be the data that
76:12 - comes back so the piece of text great
76:16 - and once we have done that we can set
76:19 - the value to be an empty string again
76:25 - wonderful so now that we have that chat
76:28 - history I'm just going to scroll down
76:30 - here and we're going to map it onto this
76:34 - so let's get the chat history and we're
76:37 - going to map we're going to map it onto
76:42 - this whole div just like so and what
76:46 - we're going to do is map let's open up
76:49 - our parentheses once
76:52 - more
76:55 - and we're going to map each chat
76:58 - item as well as
77:00 - the index I'm going to pass through the
77:03 - index as the key it's not really used
77:05 - hence I use this and now for each chat
77:08 - item I'm essentially going to put it in
77:13 - here I'm going to get the chat item roll
77:15 - so it's either going to be user or model
77:18 - and then I'm just going to get the chat
77:20 - item parts and
77:25 - wonderful I'm really happy with
77:30 - this and maybe let's format this file
77:32 - once more the last thing I want to do is
77:35 - just clear the chat history the value
77:37 - and the error if we want to clear
77:42 - everything so I'm going to do so on the
77:45 - clear button so on click of this I want
77:50 - to clear right so let's define this
77:53 - function let's just do so here so const
77:57 - clear and I'm just going to set the
77:59 - value to be null set the error to be
78:01 - null and set the chat history to be an
78:04 - empty array again great and that's it so
78:08 - let's try it out I'm just going to type
78:10 - in when is Christmas and if you hit ask
78:13 - me it should come back with two messages
78:16 - that was my message so when it's
78:17 - Christmas and then whatever the model
78:19 - responded with which is December 25th
78:22 - now I can go ahead and ask a follow-up
78:25 - question to this conversation meaning
78:27 - it's taking into context the previous
78:29 - messages so I can simply write are you
78:32 - sure obviously are you sure by itself
78:34 - won't mean much but with the context we
78:36 - know we're talking about Christmas so if
78:38 - I typeing are you sure the model will
78:40 - come back with yes I am sure that
78:42 - Christmas on December 25th okay and then
78:45 - you can continue with other questions so
78:48 - it will continue the multi- chat
78:51 - conversation amazing
78:53 - so this is working as it should I love
78:56 - it let me know what you think below