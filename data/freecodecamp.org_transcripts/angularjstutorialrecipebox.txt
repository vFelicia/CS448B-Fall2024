00:00 - hello everybody and welcome to another
00:03 - video today i'm going to show you how to
00:05 - do this recipe box with angularjs
00:08 - using a coat pen and free coat camp
00:12 - the things that you can do is to edit
00:15 - and delete a recipe and of course add
00:18 - one
00:20 - you can find the user stories in free
00:22 - code cup
00:25 - and the code will be available in the
00:27 - description box i will leave a link both
00:30 - to my codepen and my github account
00:34 - for this project i also inspired from
00:37 - another one that i found on github that
00:39 - i would also share in the description
00:41 - box
00:42 - and these are the user stories that our
00:44 - project is doing
00:46 - so i have already set up my codepen
00:49 - account
00:51 - i'm using scss and i'm using a mix with
00:54 - bootstrap and
00:56 - materialize then in javascript i'm also
00:59 - using bootstrap aguilar.js of course
01:04 - and jquery for the accordion part
01:08 - all right save and close and um
01:12 - i think that we're ready to start this
01:14 - beautiful recipe box
01:17 - i'm going to start with the html
01:20 - so first of all you'll need an ng app
01:22 - and i will name mine recipe box the ngap
01:26 - directive tells angularjs that this is
01:29 - the root element on the angular
01:31 - application
01:32 - all angular applications must have a
01:34 - root element
01:37 - and then of course you need the ng
01:38 - controller which in this case is usb box
01:41 - controller
01:42 - the control directive defines the
01:45 - controller
01:47 - so then we are going to continue with
01:49 - the class name container and inside
01:52 - there we will build everything else
01:55 - we're going to have a class row and we
01:57 - will part this row in two parts
02:00 - one
02:01 - call x as eight and another one will be
02:04 - four
02:06 - in the first part we will see all the
02:09 - all the recipes and we will have the
02:12 - functions of edit and delete
02:14 - and in the right panel we will have the
02:16 - add function
02:21 - so inside the row i'm going to start
02:23 - typing
02:24 - all the left part
02:31 - you'll need a ul class collapsible and
02:34 - data collapse collapsible accordion
02:37 - later in the javascript we will use we
02:39 - will write the functionality for these
02:41 - parts
02:44 - and of course you will need an mg repeat
02:50 - and your bead will repeat every time i
02:54 - have a new recipe
02:57 - so you'll need recipe in recipe list
03:01 - and i will use filter
03:05 - track by index
03:07 - filter formats a subset of items from an
03:10 - array
03:11 - or attitude directives like ng-repeat by
03:14 - using the pipe character followed by a
03:16 - filter
03:21 - and then expression is written inside
03:24 - double braces
03:26 - so in this case i'm going to have a
03:28 - recipe title
03:30 - and the class is going to be collapsible
03:32 - heater
03:34 - and then recipe ingredients
03:36 - where the class will be collapsible body
03:42 - and once again i would like to mention
03:44 - that if you can't see very clear
03:46 - everything in my code i will leave a
03:49 - link in the description box so you can
03:51 - find everything there
03:57 - alright now i need the ng click
04:02 - i'm going to write here two functions
04:04 - the first one will be edit recipe
04:07 - dollar index
04:09 - and this will be our edit button
04:12 - all the functionality will be written in
04:14 - the javascript part
04:16 - and then again another one click which
04:18 - will be the delete trace key
04:20 - and the name of course will be delete
04:25 - and i think the two arrows is done with
04:27 - the left part
04:29 - and now we are going to continue
04:32 - with the right part
04:37 - we will have a column of four
04:41 - and inside there i will start writing
04:44 - all the classes
04:46 - first i'm going to have a class card and
04:48 - inside these i'm going to have the cards
04:50 - content
04:58 - here i'm using the materialize classes
05:01 - so
05:02 - you'll see later that i won't read a lot
05:04 - of css code
05:08 - i'm going to have a new recipe
05:10 - and then for
05:12 - ng submit
05:13 - addressing
05:16 - the addresses is also going to be a
05:18 - javascript function that you will write
05:20 - later
05:23 - div class
05:25 - input field
05:27 - and i'm actually going to do this two
05:29 - times because i'm going to have two
05:31 - fields
05:33 - one will be for the name and another one
05:35 - will be for the ingredients
05:38 - so you will need input
05:40 - type equals text
05:42 - ng-model new recipe and placeholder name
05:54 - and you should do the same
05:56 - for the ingredients
05:57 - now remember that the ng model is very
06:00 - important and you will also use it in
06:02 - javascript
06:04 - you don't have to use placeholder or
06:07 - maybe even type
06:08 - but of course you need to use the ng
06:10 - model
06:13 - the ng model directive binds the value
06:15 - of html controls like input selector
06:18 - text area to application data
06:21 - you can bind the value of an input field
06:24 - to a variable created in angular
06:28 - now for the css i'm going to have a body
06:31 - and inside there box sizing and this
06:35 - image will be our background
06:38 - i will also leave this image in the
06:40 - description box
06:43 - and i'm going to add some properties
06:46 - most of them will be center and actually
06:48 - the css is quite simple
06:53 - so you will need a background size cover
06:56 - mean height
06:57 - 100 vh
06:59 - display flex justify content center
07:03 - align items center
07:06 - text align once again center and phone
07:09 - formally you can use whichever you like
07:11 - i sometimes use aria
07:13 - sometimes riding or fedora
07:16 - but you can use whatever you like
07:20 - and after that i'm gonna have it before
07:23 - and after
07:25 - the property box sizing
07:29 - and then it will be inherit
07:31 - so every property from the html is going
07:33 - to be inherited
07:37 - great
07:41 - okay now let's continue with the
07:44 - container and i'm going to add a
07:46 - background color
07:48 - i've already found the background color
07:50 - that i like and i'm going to be use
07:52 - um i'm going to use rgba and the a
07:56 - controls the opacity
07:58 - so i don't want to be
08:01 - a standard color but i want to have some
08:03 - opacity
08:04 - so we'll be using 130 138
08:09 - 117
08:11 - and 0.4
08:14 - now i'm just have a recipe button with a
08:16 - button top 20 pixel
08:18 - and a card with background black water
08:21 - radius 50
08:22 - color white font size
08:24 - 1.2 and inside there i'm going to have a
08:27 - button color block
08:30 - and that's it but uh yes let's write for
08:35 - the javascript the accordion
08:38 - and then we're going to
08:40 - continue a little bit with css because i
08:43 - think that i forgot
08:45 - to write something and my image is
08:47 - looking quite weird
08:51 - now the accordion part is very very
08:53 - simple
08:58 - and here
08:59 - is where we are using the jquery so
09:02 - you'll have document ready function and
09:05 - inside there collapsible dot collapsible
09:09 - and that's it
09:12 - all right let me find
09:16 - yes that's it you should be it should be
09:19 - bh because it stands for a vertical
09:21 - heights
09:23 - now everything looks nice
09:26 - let's continue with the javascript part
09:31 - and you will be able to see all the
09:33 - functionality
09:38 - so i'm going to start writing var up
09:40 - angular
09:44 - dot module
09:47 - so angularjs modules defined
09:49 - applications whereas controllers control
09:52 - the application
09:59 - our controller is recipebox controller
10:02 - and then we have function scope
10:07 - when you make a controller in angularjs
10:09 - you pass the scope object as an argument
10:12 - when adding properties to the scope
10:14 - object in the controller the view i mean
10:17 - the html gets access to these properties
10:20 - in the view you do not use the prefix
10:22 - scope but you just refer to property
10:25 - name in double braces
10:29 - i'm going to start creating the initial
10:31 - recipe list from the localhost
10:40 - scope dot saved equals local storage dot
10:43 - get item
10:45 - and then we have the recipe box
10:49 - and now if a local storage has a value
10:52 - for my key grab that if not create a new
10:56 - local storage item and that's how local
10:59 - storage works
11:01 - so you should have scope.jsp list equals
11:05 - local storage don't get item
11:08 - mse christ
11:10 - writes books
11:12 - different unknown
11:16 - and then inside here we are going to
11:18 - create a json object
11:21 - json format an object to adjacent string
11:32 - so json.first
11:34 - scope dot saved
11:38 - and you can write your own object for me
11:41 - it will be a pizza
11:44 - with ham and cheese
11:48 - and let's create another one
11:52 - hmm
11:56 - okay it will be a cake yes i like cakes
12:00 - and the ingredients well i don't know
12:02 - all the ingredients but let's say it
12:04 - just accents milk
12:09 - all right i think that i have a mistake
12:11 - here
12:13 - uh of course here
12:15 - oh my god
12:17 - that's so wrong let me fix that
12:21 - and of course it's the quotations it
12:23 - should be
12:24 - [Music]
12:25 - like this
12:26 - all right
12:28 - okay
12:29 - that was super wrong now everything
12:31 - everything works fine
12:35 - and i think that we are able to continue
12:39 - with our next functionality
12:49 - just copy and paste uh
12:51 - the local storage
12:58 - so this could probably be
13:01 - in a function on its own with how many
13:03 - times it's called but it's just one line
13:06 - so i didn't bother
13:08 - and i just copy and paste it
13:12 - now we want to allow the user to add a
13:15 - recipe
13:22 - so i'm going to use function
13:27 - and i will name it add recipe
13:31 - the same name i used in the html code
13:35 - so i have function
13:37 - open brackets and then i have an if
13:40 - statement
13:41 - so i have if
13:43 - scope dot new recipe
13:46 - different than no
13:47 - and
13:48 - scope
13:50 - dot new ingredients is different than
13:53 - norm
13:54 - then scope to address list push
13:58 - title
13:59 - uh scope new recipe and ingredients
14:02 - scoping ingredients
14:04 - and
14:05 - in that way you need to give both
14:08 - a title and ingredients so if you try to
14:12 - give only title or all ingredients then
14:15 - you won't have a new recipe
14:20 - and then i'm going to continue with the
14:22 - local storage
14:25 - and then i'm going to add a sculpted new
14:28 - recipe equals snow and the same thing
14:31 - goes for ingredients and i added these
14:34 - two lines
14:35 - because um if you don't add them
14:39 - then every time you're going to add
14:40 - something you're going to have the
14:42 - previous value so with the
14:45 - with the null
14:46 - everything looks empty
14:50 - i'm going to continue with that delete
14:54 - so we're going to allow a user to delete
14:57 - your recipe i'm going to write another
14:59 - function with the name delete recipe and
15:02 - again the name is from the html code
15:06 - so inside there we want to show confirm
15:10 - learn box alert box
15:12 - and when user confirms
15:14 - it cuts the recipe out of the array and
15:17 - then updates the local storage
15:21 - so i'm going to have an if statement
15:24 - and confirm
15:25 - this recipe is going to be deleted
15:28 - scope.jsp list splice
15:31 - index 1
15:33 - and with the splice
15:34 - and the scope response we delete an
15:38 - action
15:40 - so let's continue with the edit
15:44 - which will be our last function
15:48 - scope.edit recipe equals function index
15:54 - so
15:55 - let's say that we grab the recipe by the
15:57 - index for the array and then display the
16:00 - recipe's ingredients in a prompt that
16:02 - allows the user to change ingredients
16:06 - if they hit cancel it returns a new
16:08 - response
16:10 - so we will check for that also
16:13 - we have a variable name ingredients
16:16 - equal scope to trace list index dot
16:19 - ingredients and another variable named
16:21 - result with the prompt edit the
16:24 - ingredients
16:26 - and if result is different than no then
16:29 - scope.js list index dot ingredients
16:32 - equals result
16:34 - and the local storage once again
16:39 - so
16:40 - now i think that we are ready let me
16:42 - check if everything is correct
16:47 - okay let's test it
16:50 - we can edit we can add
16:54 - all right uh
16:56 - we can add something
17:00 - okay we can see it very clear
17:04 - let's add another thing
17:09 - again my examples are notes great but i
17:12 - think that you can see the point
17:14 - so
17:15 - that's it guys thank you very very much
17:18 - for watching if you have any question or
17:20 - any comments please leave it in the box
17:23 - below and
17:24 - thank you for watching
17:34 - you