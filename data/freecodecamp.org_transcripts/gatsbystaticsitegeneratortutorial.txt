00:00 - gatsby is an open source website
00:01 - generator you're about to learn all
00:03 - about it from john smilga
00:06 - john is one of the most viewed teachers
00:08 - on our entire channel what's up
00:09 - everybody and welcome to gatsby version
00:12 - 3 tutorial video
00:14 - so a few weeks back we had to be rolled
00:16 - out its latest version
00:18 - version number three and as with all the
00:21 - new versions there are some major
00:23 - changes
00:24 - so it only made sense to record a new
00:28 - gatsby video
00:29 - during the video we'll cover such things
00:31 - as
00:32 - file system route api
00:34 - new syntax for css modules and of course
00:37 - new plugin to handle images in gatsby as
00:41 - with all my videos in order to make
00:43 - things a little bit more interesting
00:44 - we'll utilize our knowledge by building
00:47 - a cool project a recipe site
00:50 - if you'd like to take a project out for
00:52 - a test drive just visit the url
00:55 - gatsby version 3 tutorial recipes dot
00:59 - notify that app
01:01 - again the url is get b version 3
01:04 - tutorial recipes
01:06 - dot netify that app and lastly this
01:09 - video is first part of my gatsby course
01:12 - where we build more cool projects with
01:15 - gadbjs
01:16 - all right and welcome to the course and
01:18 - i guess let's start our journey by
01:21 - answering the most basic and yet
01:23 - pressing question first
01:25 - well what is get bgs
01:28 - and most likely the explanation you have
01:30 - heard is this one
01:32 - gatsby is a static type generator
01:35 - and while it's true at the end of the
01:37 - day gatsby does generate a static site
01:40 - at this point in time gatsby just is far
01:43 - more closer to a full-blown framework
01:46 - than to just another static site
01:49 - generator
01:50 - gatsby is built on top of react
01:53 - so if you do enjoy the amazing dev
01:55 - experience that comes with react
01:57 - so think things like components
02:00 - modularity and etc you will feel right
02:03 - at home when using gatsby
02:06 - now that experience is of course nice
02:09 - but what about the final product what is
02:11 - so special about gatsby you see once
02:14 - we're done with our project gatsby will
02:16 - do its magic and without doing any extra
02:19 - work we'll get things like code
02:21 - splitting fast page loads
02:24 - image optimization data pre-fetching and
02:27 - i can go on and on and on since the list
02:29 - of the benefits we get straight out of
02:31 - the box is extremely long
02:34 - what's also cool is that the static
02:37 - content gatsby generates can then be
02:39 - enhanced with client-side javascript
02:41 - with the help of react hydration and
02:44 - even though it's a muscle it simply
02:46 - means that we get best of both worlds
02:49 - not only our gatsby set can have
02:51 - app-like features
02:52 - so think traditional react app but it's
02:55 - also super fast and optimized sounds
02:58 - pretty cool right so keep watching the
03:00 - course and i can guarantee you that
03:02 - you'll be extremely happy
03:04 - with what gatsby has to offer as far as
03:07 - the course structure in the first module
03:09 - so the module you're currently watching
03:11 - you'll find a useful info about the
03:14 - course
03:15 - in the second module
03:17 - you'll find extensive gas vita tutorial
03:19 - and after that every module contains a
03:22 - unique project where we test out
03:24 - different content providers
03:26 - as well as advanced gas b features
03:29 - lastly let me just mention that in order
03:32 - to make the knowledge thick
03:34 - and also in the process
03:36 - make things a little bit more
03:37 - interesting during the second module so
03:40 - the gatsby tutorial one will also build
03:43 - a cool project a simply recipes project
03:46 - where we create a nifty recipe site when
03:49 - it comes to course requirements my
03:51 - expectation is that you are at least
03:54 - familiar with react basics
03:56 - so things like components and props
03:59 - have some experience with modern
04:01 - javascript
04:02 - so es6 and up specifically array methods
04:06 - like map filter and reduce
04:08 - as well as the structuring and spread
04:11 - operator
04:12 - and while you can still follow along
04:14 - with a course
04:15 - even if you have very little experience
04:17 - with react and modern javascript
04:20 - in some cases you might need to utilize
04:22 - some external resources since i want to
04:25 - keep gatsby as the main focus of this
04:28 - course
04:29 - and therefore my plan is to cover
04:31 - extensively only the gatsby related
04:34 - topics
04:35 - if you are struggling to find a good
04:37 - place for resources i'm going to be
04:39 - biased and suggest my own youtube
04:41 - channel
04:42 - called coding addict where you'll find
04:45 - lots of useful react vanilla javascript
04:48 - node css
04:50 - and html content specifically look for
04:53 - javascript nugget series where i cover
04:56 - most asked quest questions in isolation
05:00 - and great detail as far as the dev setup
05:03 - since gatsby is an old app and will
05:06 - install quite a few dependencies you'll
05:08 - need a node on your machine and when it
05:11 - comes to my text editor and browser
05:14 - i prefer visual studio code and chrome
05:16 - but of course they're not mandatory and
05:19 - lastly all of the services i suggest
05:22 - during the course have a free generous
05:24 - steer so you can leave your credit card
05:27 - where it belongs nicely tucked away in
05:30 - your wallet like i mentioned previously
05:32 - for development i prefer visual studio
05:34 - code
05:35 - or vs code for short which at this point
05:38 - is probably the most popular option out
05:41 - there
05:42 - and since i do a lot of recording i keep
05:44 - my setup very close to the default one
05:47 - with some exceptions like font size and
05:50 - zoom level throughout the course just to
05:52 - speed things up and avoid unnecessary
05:55 - boilerplate i will use few extensions
05:59 - but i'll cover them later
06:00 - just so you get a better understanding
06:03 - of the benefits
06:05 - now if you are interested in my overall
06:07 - setup
06:08 - just navigate to my github profile
06:11 - john milga
06:13 - and look for the repo vs code setup
06:16 - and there you'll find all the extensions
06:19 - i use as well as my settings json file
06:22 - with all my config options
06:25 - all right and welcome to our first
06:26 - module gatsby tutorial module and like i
06:30 - already mentioned previously in order to
06:32 - make things more interesting during the
06:34 - module we'll also build our first
06:36 - project
06:37 - simply a recipe site
06:39 - if you want to see project in action or
06:41 - maybe you're interested in complete
06:42 - source code
06:44 - like always the fastest way
06:46 - is probably by navigating to
06:49 - johnsmilk.com so hit the url
06:51 - johnsonmilk.com
06:53 - then
06:54 - look for the project page
06:57 - and then in the projects page
06:59 - more specifically look for the gatsby
07:01 - ones
07:02 - in here you'll find all the course
07:05 - projects
07:06 - and you're looking for the recipe site
07:09 - if you click on this link
07:10 - you'll see the project in action and
07:13 - then if you want to access the source
07:15 - code look for star files or source code
07:19 - in this case they both point to the same
07:21 - repo
07:22 - and in here you'll find complete source
07:24 - code
07:25 - for the project lastly since i find
07:28 - gatsby documentation extremely helpful
07:31 - in order to support my argument and
07:33 - showcase where you can get more info in
07:35 - the future
07:36 - i will reference gatsby site somewhat
07:39 - often especially during gatsby tutorial
07:41 - part and the url is getbjs.com
07:46 - again the url
07:48 - for gas beside is
07:50 - getbjs.com
07:52 - nice and let's kick things off by
07:54 - installing a gas bcli package which is a
07:57 - tool that will allow us to quickly
07:59 - generate gatsby projects
08:01 - and if you're familiar with create react
08:03 - app the idea is exactly the same
08:06 - instead of spending our precious time on
08:08 - config and setup we'll be able to spin
08:10 - up a gatsby project with the help of one
08:13 - command
08:14 - they do suggest installing globally so
08:17 - in mac don't forget to add sudo
08:20 - and once i'm done with my install i'll
08:22 - share a great resource if you do hit
08:25 - some roadblocks or just need more info
08:28 - on the whole setup so i'm going to
08:30 - navigate back to my terminal
08:32 - and i'll massively zoom in
08:36 - the command is sudo since again we're
08:39 - installing this globally
08:41 - then we'll go with npm i
08:43 - g
08:44 - and the package name is gatsby
08:46 - cli
08:48 - and i'll be prompted my password
08:51 - and once i enter the password
08:53 - of course i kick off the install it
08:55 - looks like everything went great
08:58 - i don't see any errors
09:00 - so i should have the package now if you
09:03 - do want to double check
09:05 - just type gatsby
09:09 - version
09:10 - and if you see gatsby version 3 in
09:12 - terminal you are in good shape however
09:14 - if the terminal spits back that no such
09:17 - command is found then of course you
09:19 - haven't installed the package and you'll
09:21 - have to troubleshoot now if you get
09:24 - stuck
09:25 - or just need more info
09:27 - i suggest navigating to the gatsby docs
09:30 - then look for tutorial
09:33 - then click on this link and here they go
09:36 - over how to set up your dev environment
09:38 - where they cover how to install node on
09:40 - your particular machine
09:42 - set up git if you haven't already and
09:45 - that sort of thing so if you do hit some
09:47 - roadblocks i strongly suggest using this
09:50 - resource for guidance
09:53 - and once we have the gas bcli at our
09:55 - disposal let's take it out for a spin
09:58 - and the command for the new gasb project
10:00 - is following
10:02 - gatsby new than the project name
10:05 - followed by the starter
10:07 - project name of course is totally up to
10:09 - you and as far as the starter it's a url
10:13 - to the github repo
10:15 - and just like the name suggest start
10:17 - provides some default setup now if you
10:20 - omit this star url altogether it will
10:23 - automatically use the default starter
10:25 - and don't get me wrong there's nothing
10:27 - wrong with default starter and in most
10:29 - cases that's exactly what you'll use but
10:32 - since it comes with few bells and
10:34 - whistles
10:34 - for our first project we're going to use
10:37 - a hello world starter which essentially
10:40 - is bare bones gatsby app why i went this
10:43 - route because i think is going to be
10:45 - more beneficial
10:46 - if we add those bells and whistles
10:48 - together since that way at least in my
10:50 - opinion you'll have a better
10:52 - understanding of the whole setup lastly
10:55 - in order to spin up the server the
10:58 - command you're looking for is gatsby
11:00 - develop so let's do this people
11:03 - i'm gonna navigate back to my desktop
11:05 - i will zoom in and first i'll navigate
11:08 - to desktop
11:10 - you can set it up your project whatever
11:13 - you like but
11:14 - i always prefer desktop so i'm going to
11:16 - go with cd
11:18 - and list up and then of course we just
11:20 - want to go with commands so gadsby new
11:23 - as far as tutorial name not going to be
11:25 - particularly original and i'm just going
11:28 - to go with tutorial and at this point we
11:30 - can either type out the url
11:32 - or we can simply navigate to gatsby docs
11:36 - and then we're looking for starters now
11:38 - technically they're under the features
11:41 - but you're not going to find them
11:43 - under this features link at least at the
11:45 - time of this recording so instead keep
11:48 - scrolling scrolling scrolling scrolling
11:50 - and then all the way in the bottom
11:52 - you'll find the stars
11:54 - and then by default they'll set it up as
11:57 - version two again at the time of this
11:59 - recording
12:00 - eventually things might change
12:02 - so instead we're looking for
12:05 - version three
12:06 - and then this is going to be the default
12:09 - one so basically the one that you're
12:11 - going to get
12:12 - if you omit the url all together and
12:15 - then the one that we're looking for is
12:17 - hello world so notice here this search
12:19 - box we can simply search for it here now
12:23 - the idea for all of them is pretty much
12:25 - the same where if you're building some
12:28 - project
12:29 - and if you know that you'll need a
12:32 - specific config for example the strappy
12:35 - one or the shopify one or whatever
12:38 - you right away can get a star project
12:41 - with a bunch of things pre-configured
12:44 - and since there are github repos you can
12:46 - simply
12:48 - of course navigate and take a look at
12:49 - the source code and see what the starter
12:53 - is all about so essentially what are you
12:57 - getting now in our case like i said
12:58 - we're looking for hello world
13:00 - hello world and then i'm just going to
13:04 - click on a link and we can visit the
13:07 - demo site and all that but i'm looking
13:10 - for this command now in my case i'm not
13:12 - going to copy
13:13 - the whole thing
13:15 - because i only need the url
13:17 - since as you can see here they go with
13:19 - this name and i already have my tutorial
13:22 - so take the url part
13:25 - then navigate back of course and then
13:27 - copy and paste and once you do that
13:31 - that's bcli
13:33 - going to start bootstrapping our project
13:36 - and at this point you have two options
13:37 - you can run the gatsby develop from the
13:40 - terminal
13:41 - or you can run it from the visual studio
13:44 - code because visual studio code also has
13:46 - the integrated terminal and in my case
13:49 - i'm going to go with second option
13:50 - so i'll close my terminal then i'll open
13:53 - up my visual studio code
13:56 - drag and drop the project
13:58 - in the following video i'll go over the
14:01 - general structure of the gatsby project
14:04 - for now i just want to quickly get
14:06 - something on the screen and therefore
14:08 - i'll open up the integrated terminal and
14:11 - that's a virtual studio code thing where
14:13 - effectively they have the terminal that
14:16 - is right away pointing to our project to
14:20 - my tutorial in this case
14:22 - and then i simply want to go with gadsby
14:24 - develop so that's the command that spins
14:27 - up the dev server
14:28 - and it is always my preference to work
14:31 - side by side with a browser so
14:34 - effectively i'll make this smaller again
14:36 - this is not a gatsby thing this is
14:38 - actually a mac thing where i go with new
14:41 - window so new browser window
14:44 - and i just set them side by side
14:47 - with my text editor
14:50 - and then i'll also open up a new tab
14:55 - on a bigger browser window so i'm going
14:56 - to go with localhost and we're looking
14:59 - for
15:00 - a thousand
15:01 - and if you see hello world on a screen
15:04 - you are in good shape so i'll set them
15:07 - side by side here this is going to be
15:09 - our complete project and that's the
15:11 - project we're working on and then for
15:13 - time being i'll just close these two
15:15 - tabs and then i'll do the same thing
15:17 - here we're on a smaller browser window
15:20 - i'm going to go with localhost 8000 and
15:22 - again
15:23 - if you see hello world on a screen that
15:26 - means that everything is correct and you
15:29 - can proceed to the next video beautiful
15:32 - and as far as the typical
15:34 - gatsby project structure
15:36 - we have cache folder
15:38 - where gatsby stores the cache
15:40 - then we have node modules since at the
15:42 - end of the day it is a node app so
15:44 - basically this is where we keep all our
15:47 - dependencies and i honestly i don't see
15:50 - any reasons why you need to go here and
15:52 - do any modifications while you're
15:55 - setting up your project
15:56 - then we have a public one
15:59 - so this is where our production ready
16:01 - project
16:02 - lives and i'll cover it in more detail
16:05 - when we take a look at the different
16:07 - commands we have then we have source and
16:11 - more specifically pages so we have
16:13 - source directory with a pages directory
16:16 - and since we'll spend most of our time
16:18 - in the sources folder i'll just leave it
16:21 - at that there's really no point for me
16:22 - to repeat myself
16:24 - then we have a static folder where we
16:27 - can set up assets that are going to be
16:29 - publicly available
16:30 - as well as we can access it in our
16:33 - project however i'll talk about the
16:36 - gotcha in a second so don't start
16:39 - placing all your images right from the
16:41 - get go in a static one then we have git
16:44 - ignore which is just a file for source
16:48 - control so in this file we specifically
16:50 - say which files or directories are going
16:53 - to be ignored once we push this project
16:56 - up to github for example then we have
16:59 - prettier ignore and pre-drc which are
17:02 - just used for the package that gatsby
17:05 - comes with and the package name is
17:07 - prettier then we have gadsby config so
17:11 - this is where we'll set up all our
17:12 - configuration for our site
17:15 - things like plugin site info and all
17:18 - that good stuff license pretty
17:20 - self-explanatory package log json and
17:23 - package.json so package lock is used for
17:26 - the dependencies of the dependencies we
17:30 - know that in nodemap once we install
17:32 - dependency it possibly can have
17:34 - dependency on its own so package log
17:37 - just make sure that we can get the
17:39 - correct versions of the dependency
17:42 - dependencies and then of course we have
17:44 - a package.json where we have our
17:47 - dependencies and let's not forget readme
17:50 - the markdown file where we can find
17:52 - useful information about our project and
17:56 - i guess let's start by exploring the
17:59 - package.json
18:01 - as you can see
18:02 - we don't have that many packages if we
18:05 - keep on scrolling we have dependencies
18:07 - of course gatsby react as well as react
18:11 - down and then for development they use
18:14 - this prettier package
18:16 - and actually
18:17 - you can run a command and command is
18:20 - format and it will format the project
18:23 - for you
18:24 - now my preference is using this
18:27 - extension instead
18:29 - so let me go to my extensions
18:32 - and i actually prefer using the
18:34 - extension by the name of previewer
18:37 - and effectively the difference is that
18:40 - it runs automatically so once you
18:42 - install this package and make sure you
18:45 - add this configuration
18:47 - to your settings json
18:49 - that's definitely a must
18:51 - with the later versions of vs code
18:55 - if you won't do that it's not going to
18:56 - work
18:57 - and then the moment you do that you
18:59 - don't need to run the command because in
19:01 - this case notice the package json
19:03 - effectively if we want to
19:06 - run the formatter we need to run this
19:08 - command correct but once you install
19:10 - this extension and once you set up the
19:12 - proper configuration
19:14 - in settings.json it will automatically
19:17 - happen once you save or once you copy
19:20 - and paste whatever setup you choose and
19:23 - you can control that in two places you
19:25 - can either use the gui so first navigate
19:28 - to the settings and this is going to be
19:30 - the graphical interface and just type
19:33 - format and in my case i use format on
19:36 - paste and format on save
19:39 - or
19:40 - of course you can do it directly in
19:43 - settings json i have editor format on
19:46 - paste and format on save so those are
19:49 - the options i use but of course you can
19:52 - modify them to whatever makes most sense
19:55 - to you
19:56 - then
19:58 - as you can see we have more commands we
20:00 - have one for start one for serve clean
20:03 - and we also have one for build remember
20:07 - when we talked about the public on i
20:09 - said that this is where our production
20:11 - already
20:12 - project is going to live and in order to
20:16 - set it up we need to run
20:18 - gadsby build so let's try it out first
20:21 - in order to stop the dev server we
20:23 - simply need to go with control c
20:26 - then i'll clear the terminal so i'll
20:28 - just type clear and then we run gatsby
20:31 - and then build
20:33 - so this will do all that gadsby magic
20:36 - now there's also another option
20:39 - later once we host our project
20:41 - actually we'll set up our hosting
20:43 - provider to do the build process for us
20:47 - but it doesn't change the main idea
20:49 - where eventually
20:51 - there is a public folder with our
20:54 - project ready to go with all the
20:56 - gatsbytes so this is where we have all
20:59 - our image optimizations all the
21:01 - prefetching and all that cool stuff and
21:05 - if you take a look at the result
21:08 - you'll notice that it's just a bunch of
21:11 - static files and again this is the key
21:14 - thing about the gatsby where once we're
21:16 - done building our site
21:18 - once our project is ready to go we just
21:20 - ship it as bunch of static assets so
21:23 - there is no back and forth with a server
21:26 - we just send our project over the wire
21:28 - it is extremely fast because it's just a
21:31 - bunch of static assets and once it
21:34 - arrives there
21:35 - then of course it does the whole
21:37 - rehydration thing
21:38 - and user gets this nice react experience
21:42 - that should do it for the public folder
21:45 - and next i want to talk about the static
21:48 - one
21:48 - remember i just said that whatever asset
21:52 - will place here will be publicly
21:54 - available and you will see how gatsby
21:57 - will nicely transport that asset to the
22:00 - public one now here's the key gotcha
22:03 - just because you can does not mean that
22:05 - you should
22:06 - so imagine the scenario on my desktop i
22:10 - have this cute image of these two
22:13 - puppies i can simply open up my tutorial
22:16 - and then drag and drop into my static
22:19 - one and currently in my static one you
22:21 - can see that we have a favicon and if
22:24 - you're not familiar with favicon it's
22:26 - just this icon
22:27 - in the browser tab
22:29 - and once i spin up my dev server again
22:32 - the command is get ads be developed or
22:35 - notice how they also have this start
22:38 - script and if you have worked with
22:41 - create react app you know that they also
22:43 - have this npm start which just spins up
22:46 - the create react app so this is similar
22:50 - where i can run either a gatsby develop
22:53 - myself
22:54 - or i can run npm start and in turn that
22:58 - will run the same command
23:00 - so i'll go with npm start just to
23:02 - showcase
23:03 - that it works
23:05 - and once my server is up and running
23:08 - i'll be able to see the cute jpeg in two
23:12 - places i'll be able to see that once i
23:15 - navigate to a localhost 8000 and then
23:19 - more specifically
23:21 - let me zoom in
23:22 - i'm gonna go with forward slash and cute
23:25 - jpeg and yep i have my puppies and i can
23:29 - also do that in my project now don't
23:32 - freak out again there's going to be a
23:34 - proper introduction for the source one
23:37 - but since i want to get something on
23:38 - screen i'm just gonna navigate to the
23:41 - index.js in the pages
23:43 - and then above the hello world just for
23:46 - the time being i'll showcase that we can
23:48 - access it here as well
23:50 - and i'm gonna omit the alt attribute and
23:53 - then once i save and then once i refresh
23:55 - of course i have my cute image now just
23:59 - because you can
24:01 - does not mean that you should if you
24:04 - read the gatsby documentation they
24:06 - actually are trying to discourage you
24:09 - from this kind of pattern because if you
24:12 - add your assets in such a way where you
24:15 - just dump them into a static folder
24:18 - essentially you're not using any of the
24:21 - nice optimizations that gatsby provides
24:25 - so the whole point of using gatsby
24:27 - is because of all the magic that it does
24:30 - behind the scenes in this case you're
24:32 - just adding it to a static one and then
24:34 - you make it publicly available and if
24:37 - you want to see that take a look at the
24:38 - public one and you'll see the cute jpeg
24:42 - so my whole point is following where be
24:44 - mindful of what you place in a static
24:47 - one just because you can does not mean
24:49 - you should and of course all the
24:50 - following videos i'll show you a proper
24:53 - way how we can add assets and in turn
24:56 - we'll use all the awesome gatsby goodies
25:00 - so i'll remove the image for now
25:03 - and i'll also remove it from my static
25:05 - one
25:06 - okay
25:07 - and then let me just go back to the
25:10 - package.json
25:11 - and let's complete our list of commands
25:15 - so we covered build this is production
25:17 - rarity project we have also covered
25:19 - develop we have covered format as well
25:22 - as start and then we have serve clean
25:25 - and test now there's not much to say
25:27 - about the test but as far as serve and
25:31 - gas be clean
25:32 - so with serve
25:34 - we will serve our project locally
25:37 - so our production ready project we can
25:40 - take a look at how it looks locally
25:42 - because keep in mind that as far as our
25:45 - current setup we are looking at our
25:48 - development project once we're done
25:50 - running gadsby build and that's a must
25:53 - because you cannot have serve without
25:55 - the public folder
25:57 - then go with gatsby and then serve
26:01 - and then of course you'll be able to see
26:03 - the project at this point there's not
26:05 - much to see this is pretty much the same
26:08 - project but if i go to a local host and
26:11 - 9000 so that's going to be my production
26:15 - ready project and then eventually we
26:17 - have this one the gatsby clean and this
26:20 - is super super super useful
26:22 - once you start working with images
26:25 - because once in a while
26:27 - you'll hit the glitch where
26:29 - the image gets stuck in a cache and once
26:32 - you run gadsby clean
26:35 - you'll notice something pretty cool
26:37 - where if i go with gads be clean it will
26:40 - tell me that the cache folder as well as
26:42 - the public one has been deleted and
26:45 - throughout the course you'll see me run
26:47 - this command again it's super super
26:49 - super useful once you start working with
26:52 - images so imagine the scenario
26:54 - you
26:55 - add an image then
26:57 - i don't know a minute later you decide
27:00 - to change a path and even though your
27:02 - code did not change
27:04 - the image actually changed
27:06 - and then you are trying to spin up the
27:08 - dev server and you're getting this weird
27:11 - bug now the bug is not because there's
27:13 - something wrong with your code nabaga is
27:15 - there because gatsby is still looking
27:17 - for the older image again something to
27:19 - keep in mind and lastly let me just
27:21 - mention something about this whole dev
27:23 - setup
27:24 - in the gatsby docs they mention
27:27 - that as far as the dev server it uses
27:30 - the hot reloading what that means well
27:33 - that simply means that once i spin up my
27:35 - server so npm start again
27:39 - and if i go to the pages and index.js
27:43 - again
27:43 - don't worry i will give it a proper
27:46 - introduction for the time being i just
27:48 - want to showcase how the hot reloading
27:50 - works and if i go here and if i change
27:54 - this text to
27:56 - hello people
27:57 - once i save
27:59 - the
28:00 - changes should automatically take place
28:03 - in the browser now in my case the dev
28:05 - server is still spinning up but the idea
28:08 - is following where the moment you save
28:11 - you should see the changes in the
28:13 - browser now notice i use the word should
28:16 - because in reality
28:17 - as far as my experience whether that was
28:20 - version two or with a version three
28:24 - you'll still have to refresh now doesn't
28:26 - mean that you'll have to refresh each
28:28 - and every time there are times when
28:30 - everything is going to work so if i'll
28:32 - go back to the hello world and if i'll
28:34 - save notice how in this case it updated
28:37 - everything nicely just don't be
28:39 - surprised where not only you need to
28:42 - save the file but you also need to
28:45 - refresh and also in gatsby version 3
28:48 - they added this error model and the best
28:51 - way for me to showcase is by removing
28:54 - this div so notice if i navigate to a
28:57 - bigger browser window of course and as a
29:00 - signal i'm looking at
29:01 - 9000 should be looking for 8 000 you'll
29:04 - see this helpful model that explicitly
29:08 - says where is the error now again this
29:10 - is something that might pop up even if
29:14 - there is no error now i'm not saying
29:16 - that it's going to happen each and every
29:18 - time there's going to be times when it's
29:20 - very useful so for example in this case
29:22 - it points directly where is my error but
29:26 - yes once you start dealing with images
29:29 - and all that
29:30 - it might pop up once in a while where
29:33 - there is no need and if that is the case
29:35 - simply start by refreshing the browser
29:39 - and if of course it doesn't go away
29:41 - which in this case there is clearly an
29:43 - error so it's not going to go away but
29:45 - if it's there by mistake then you'll see
29:48 - how this appears and of course
29:50 - throughout the course we'll probably hit
29:52 - those bugs so that's when you'll see
29:55 - that in action
29:57 - that should do it for the overall setup
29:59 - and now we can start working in our
30:02 - source directory where like i just
30:04 - mentioned we'll do most of our work
30:07 - not bad not bad i think we have good
30:09 - initial understanding of typical gatsby
30:11 - project structure
30:13 - so now let's get our hands dirty and
30:15 - finally write some code and while there
30:18 - are many things i like about gatsby the
30:20 - two that i like the most are following i
30:22 - find gatsby set up extremely
30:24 - straightforward and since it's built on
30:28 - top of react
30:29 - trust me if you have done any work with
30:31 - react you'll instantly feel at home
30:34 - since a lot of things are very similar
30:37 - to typical react project case in point
30:40 - if you take a look at the source folder
30:42 - you can see that there is a pages
30:44 - directory now million dollar question
30:48 - what do you think we're going to do in
30:49 - the pages directory
30:51 - and if you answered well we'll be
30:53 - setting up pages for a project you're
30:56 - 100
30:57 - correct so the only thing we need to do
31:00 - in order to create a page in gatsby is
31:03 - just navigate to source folder then
31:06 - pages directory and then just create a
31:09 - file so simple javascript file so if
31:11 - you'll call this about.js then you'll
31:14 - have about page if you'll call this
31:16 - product.js then you'll have a product
31:18 - page and hopefully you get the gist so
31:20 - that's the straightforward part now what
31:23 - about familiarity well if you take a
31:25 - look at the content in the index.js what
31:28 - do you see over there
31:30 - and
31:31 - as far as what i see when i'm looking at
31:33 - it i see a react component and
31:35 - effectively in order to create a page we
31:38 - just need to set up area component now
31:41 - that could be class-based component
31:43 - even though i highly doubt you'll create
31:46 - one because with arrival of hooks pretty
31:49 - much the common convention is setting up
31:51 - functional components but yes you can do
31:53 - that or you can go with functional
31:55 - component which is something we're going
31:57 - to do throughout the course so as you
31:59 - can see we just import react and then we
32:02 - export our component now one gotcha is
32:05 - that this export has to be default and
32:08 - i'll show you what happens if we don't
32:10 - do that but
32:11 - as far as the setup it is straight up
32:15 - react component again this could be a
32:18 - regular function when you're setting up
32:20 - a functional component or this could be
32:22 - a arrow function and don't worry we'll
32:24 - cover both of those cases in a second
32:27 - and then whatever we return well that is
32:30 - displayed on the screen so if i'll
32:32 - change this of course around and if i'll
32:34 - say that there's going to be a heading 1
32:37 - instead of a div
32:38 - and we'll say hello
32:40 - and then
32:42 - people if everything is correct
32:46 - we should see a hello people on the
32:48 - screen and what do you know now of
32:51 - course we have hello people and just to
32:53 - give you a visual representation this is
32:56 - going to be the project we're going to
32:57 - be working on
32:58 - during the tutorial and of course it has
33:01 - multiple pages it has a recipes page it
33:03 - has tags page about page as well as
33:06 - contact page how do we create them we
33:08 - simply go to
33:10 - pages directory and just create files
33:13 - now i'm not going to set up
33:15 - all the files in this video but
33:18 - in order to get some practice i will
33:20 - navigate to the pages and in here i just
33:23 - need to say new file now we have
33:25 - multiple options in visual studio code
33:27 - if you want to use the icons here on top
33:29 - you can do that as well in my case i
33:31 - just use a right click and i'm just
33:33 - going to create a simple about js page
33:37 - so i create a page and this is where i
33:39 - need to set up my component
33:41 - now in order to speed this up
33:44 - i actually use this extension
33:46 - so let me make my extensions bigger
33:50 - and let's see let's see we have this one
33:52 - the es7 react redux and blah blah blah
33:56 - so i'm not going to read the whole thing
33:58 - but basically you get these snippets so
34:01 - if you take a look at the extension so
34:03 - now of course i just need to make this
34:04 - one smaller you'll see a bunch of
34:07 - snippets that they provide and
34:09 - effectively
34:11 - it just saves you time on typing out the
34:13 - boilerplate now the ones that we're
34:15 - going to use the most are for setting up
34:17 - the components so keep on scrolling keep
34:20 - on scrolling and eventually you'll hit
34:22 - the r so this is going to be for setting
34:25 - up d components so rcc is going to be
34:28 - for class-based component and pretty
34:31 - much i'm just going to show you one
34:32 - example because like i said throughout
34:35 - the course we'll use the functional
34:36 - components instead
34:39 - and then
34:40 - the snippet for that is let's keep on
34:42 - scrolling so we have rcc and then we
34:44 - have the functional component one now
34:46 - keep in mind that we right away we want
34:49 - to export as default and that is
34:50 - extremely important so again if you want
34:53 - to find more info just look for the
34:55 - extension and i highly suggest
34:57 - installing because throughout the course
34:58 - i will use this extension to save some
35:00 - time on setting up the boilerplate
35:04 - so let me close this one and again we
35:07 - can go with r and then they're going to
35:09 - give us suggestions so notice once i
35:11 - type our a this is going to be for the
35:15 - arrow function and i right away i want
35:16 - to go 40 r a f c e so this is going to
35:21 - set up a component and right away export
35:24 - it as default and as you can see
35:27 - it right away takes the name of the file
35:29 - so since i named my file about js set up
35:33 - a component with the same name and
35:35 - exported as default so
35:38 - let's write here
35:40 - hello
35:41 - from about page or you can simply type
35:44 - about page and for now we haven't set up
35:46 - the navbar yet don't worry we'll do that
35:49 - in a second but if you navigate to url
35:52 - bar and if you type about there you go
35:55 - now of course we have hello from the
35:58 - about page and just to get a bit more
36:00 - practice why don't we create one more
36:02 - page so a new file in this case
36:06 - let me show you that of course we can do
36:08 - it from the visual studio code google as
36:10 - well notice this is the new file option
36:13 - let's click here and i'll call this one
36:15 - contact page again if we want to set it
36:18 - up as class-based component we can
36:20 - definitely do so and the snippet for
36:22 - that is rcc notice how we're setting up
36:24 - class-based component again with the
36:27 - arrival of folks i don't know why you
36:30 - would want to do that but it is
36:32 - definitely an option and it's going to
36:34 - work so i'll say
36:35 - contact page
36:37 - once i save again i just need to
36:39 - navigate
36:40 - in my url bar for now so say contact
36:44 - so i do have the contact page that works
36:46 - and another option we have is setting up
36:48 - functional component but not as a error
36:52 - function like we were doing in the about
36:55 - we can simply set it up with good old
36:57 - function keyword and the snippet for
36:59 - that is r
37:01 - f c and i just need to click now i have
37:04 - my function which is contact so i'll say
37:06 - testing contact
37:09 - let's save it and if everything is
37:11 - correct i should see testing contact on
37:15 - the screen so in this case i'll have to
37:17 - refresh now i have the testing one now
37:20 - just to showcase what happens if you
37:22 - don't set it up as default why don't i
37:25 - create a testing page so i'm going to
37:27 - navigate to pages i'll say
37:29 - testing.js and in this case i'm going to
37:31 - go with functional one but i'll omit the
37:35 - e at the end for my snippet so simply
37:38 - go with a arrow function and as you can
37:41 - see i'm not exporting as default so
37:43 - right here fail
37:45 - and then once i save
37:48 - i'm gonna navigate in my url bar to the
37:51 - testing one and then once you navigate
37:53 - there we have our big fat error and the
37:57 - reason why we have this error
37:59 - because every time you set up a page you
38:02 - need to export it as default so the
38:06 - named exports are not going to work and
38:08 - at this point we have multiple options
38:10 - either you can just refactor it to the
38:14 - export default here in the bottom or you
38:16 - can go to the testing one and say export
38:20 - default and then of course we can just
38:22 - omit all of this stuff so we don't need
38:25 - to come up with a name and now of course
38:28 - it's not going to fail
38:29 - so say
38:30 - this testing here
38:32 - and once i save it and then once i
38:34 - refresh
38:35 - there it is i have my testing one so two
38:38 - things to keep in mind always export it
38:41 - as default and in order to save some
38:44 - time
38:45 - i suggest using this awesome extension
38:48 - because it nicely takes care of all the
38:50 - annoying boilerplate nice work at this
38:53 - point i think we're experts on how to
38:55 - set up pages in gatsby but while we're
38:58 - still on the topic let me mention two
39:01 - more things and the first one is going
39:02 - to be 404 page so imagine the scenario
39:05 - the user visits your project and then
39:09 - for some reason he or she is looking for
39:11 - a resource that doesn't exist so in this
39:13 - case i'm going to be looking for the
39:15 - company page but that page doesn't exist
39:18 - in my project and what we're going to do
39:21 - we're going to display a nice error
39:23 - message and then possibly you can add
39:25 - the link whatever you'd want so
39:27 - essentially you are setting up the page
39:29 - which you're going to display if the
39:31 - user cannot find the resource and just
39:34 - to give you another example for example
39:36 - if you take a look at the gatsby
39:38 - documentation and if you go for the
39:40 - error page notice this is what they're
39:43 - displaying as far as their page and
39:45 - notice how we can nicely navigate back
39:48 - to the homepage and the way you set that
39:50 - page in the gatsby
39:52 - is following so again in the pages
39:54 - directory however the name in this case
39:57 - is important
39:58 - if previously
40:00 - you could just set up whatever names you
40:02 - want over here just keep in mind that
40:04 - they will show up in the url when the
40:07 - user is trying to access that resource
40:10 - when it comes to 404 when it comes to
40:12 - the error page
40:14 - the file name is important and we go
40:16 - with
40:16 - 404
40:18 - and js now the one gotcha with the
40:21 - snippets that i showed you in the last
40:24 - video is the fact that they right away
40:26 - create a component with the same name as
40:30 - the file name now the problem of course
40:32 - is that in react or more specifically in
40:34 - javascript we cannot name functions
40:37 - with numbers correct so this is going to
40:39 - be the case where i need to rename it
40:41 - i'm going to go with error and i'll also
40:44 - export as error and for time being will
40:47 - simply go with arrow page again this is
40:50 - a standard page so we can set up
40:53 - whatever functionality we want over here
40:56 - and
40:57 - in order to test it i'm just going to go
40:59 - to a testing and then maybe info now of
41:03 - course we don't have that resource so in
41:06 - development we'll see this page first so
41:09 - this is going to be displayed first and
41:10 - then of course we can click on preview
41:13 - on custom page don't worry once we
41:15 - deploy our project this screen won't
41:17 - appear and if i click preview now of
41:20 - course i have my arrow page hopefully
41:23 - that is clear that's how we set up arrow
41:25 - pages in gatsby beautiful and while
41:29 - we're still on a topic of pages i also
41:32 - want to show you how to set up nested
41:34 - pages in gatsby now what am i talking
41:37 - about well if you navigate to the gatsby
41:39 - site
41:40 - and then hover over the docs link notice
41:43 - how you have these options correct and
41:46 - then if you click on for example how to
41:48 - guides check out the url so the url is
41:52 - the domain yeah bjs.com
41:55 - then we have docs and then more
41:57 - specifically how to
41:59 - and the way we set up this type of
42:01 - structure
42:02 - in the pages we just need to create a
42:05 - folder so again keep in mind whatever
42:08 - you're going to name your folder will
42:11 - show up in the url so if you'll call the
42:14 - second bag
42:15 - in the url you'll have to type the
42:17 - domain in our case localhost 8000 then
42:20 - shaken back and then whatever the page
42:23 - name so in here i'm going to go with new
42:25 - folder and then i'll just call this
42:27 - company
42:28 - company
42:30 - and then whatever file i'm going to
42:33 - create in the company again is going to
42:35 - be displayed in the url but in the url
42:39 - i'll have to have the forward slash
42:41 - company as well
42:43 - so if i create a new file
42:46 - and i'll call this history
42:48 - and js and of course we create a
42:51 - component we already know how to do that
42:53 - we have history one and we'll say this
42:56 - is
42:57 - history of our
42:59 - company
43:01 - now of course in order to get there
43:04 - i need to go with compounding so i need
43:05 - to say forward slash company and then
43:09 - the history ones so let me zoom out a
43:11 - little bit and i'll say history so now
43:14 - of course we're going to navigate to
43:16 - this specific page so again we can set
43:19 - up whatever pages we want here so i just
43:22 - need to come up with a file name and
43:24 - then set up my component
43:26 - just remember that the url will contain
43:30 - the folder name in this case company
43:33 - and lastly i just want to mention notice
43:35 - how in the pages we actually have
43:37 - index.js
43:39 - now index.js always signals
43:43 - a root
43:44 - and of course when we talk about pages
43:47 - that means that it is going to be on our
43:49 - homepage so once the user navigates to
43:52 - your domain again in our case localhost
43:54 - 8000
43:55 - whatever you set up in the index that is
43:58 - going to be the homepage now why am i
44:00 - telling you that because at the moment
44:01 - notice how company folder does not does
44:05 - not have index.js and what that means if
44:08 - someone just navigates to forward slash
44:11 - company well there's no page for that so
44:13 - of course now we'll display the error
44:16 - page now there is a page for the history
44:18 - so of course we can navigate to company
44:21 - for slash history we just saw that but
44:23 - there is no page for the company so if
44:26 - at any point you do want to create that
44:28 - page for the company simply create a new
44:30 - file in the company folder and just call
44:34 - it index.js so this always signals root
44:37 - now in the pages that root is our domain
44:40 - and in the company of course that is
44:42 - going to be forward slash company so
44:45 - again i'm going to go with my component
44:48 - and i'm just going to say hello
44:50 - from
44:51 - company
44:53 - and of course we don't have the error
44:55 - and we can clearly see hello from
44:57 - company
44:58 - that should do it for setting up pages
45:00 - in gatsby and now let's take a look how
45:03 - we can navigate from page to page using
45:06 - gatsby link component
45:08 - not bad not bad i think we are
45:10 - comfortable with setting up pages in
45:13 - nasb now let's take a look how we can
45:16 - navigate from page to page using a link
45:19 - component instead of the url bar because
45:23 - yes technically i can force
45:25 - my users to do that but you'd probably
45:28 - agree that that's not the best user
45:30 - experience and if you have done any work
45:33 - with react router dom setup is gonna
45:36 - feel extremely familiar because
45:39 - under the hood gatsby uses reach router
45:42 - which in fact is built by the same
45:44 - people who built a react router dom and
45:48 - the way we set it up we just need to
45:49 - import
45:50 - link component from gatsby and i'm going
45:53 - to do that in my homepage just keep in
45:55 - mind you can do it in any of the pages
45:58 - and then again this is a named import so
46:01 - we need to specifically say a link and
46:03 - this is coming from the gatsby now the
46:07 - problem at the moment is that i have my
46:09 - component but i'm returning just heading
46:11 - one and we know that in react
46:14 - in fact we can return only one thing so
46:17 - if i want to set my link side by side
46:19 - then of course i just need to set up a
46:21 - pattern div and then right after the
46:24 - heading one i'm going to go with link
46:26 - and then this is a component and it's
46:29 - looking forward to prop so in this to
46:31 - prop we just specifically say where
46:34 - we're going to navigate
46:36 - so if i want to navigate to about page
46:39 - i simply go with forward slash and then
46:42 - the about so if i want to navigate to a
46:46 - company and then history
46:48 - you get the gist you just need to type
46:50 - forward slash company and then the
46:52 - history so i'm just gonna add about and
46:56 - then whatever text you place inside of
46:58 - the link of course it's going to be
47:00 - displayed on screen and since we're
47:02 - navigating to about page we might as
47:05 - well set up a text as about and once i
47:08 - save my index.js and if i click on my
47:12 - about link
47:13 - check it out now of course we can
47:16 - navigate to about page and notice this
47:19 - awesome react experience
47:21 - where essentially we're not doing the
47:23 - full page reload and again if you're
47:26 - interested you can take a look at the
47:29 - source so in this case i just need to
47:30 - refresh and you'll see that at the end
47:33 - of that yes it is a link so for example
47:36 - that is important when you set up
47:37 - styling you're still looking for the
47:40 - link element however again under the
47:42 - hood gatsby does all this magic where
47:45 - essentially we have a react app
47:48 - and with that said please keep something
47:50 - in mind where we can use still
47:53 - traditional links
47:54 - and we do need to use them when we're
47:57 - setting up a link to external resources
48:00 - so these link components are intended
48:04 - for navigating around your project
48:07 - not to do the external research as a
48:09 - side note i'll place this one in a div
48:12 - just so they are in separate lines so
48:15 - create my div and then i'll just set up
48:17 - regular html link element and as far as
48:20 - the ahref let me try one more time to
48:23 - about and i'll say regular
48:26 - link and you'll see this full page
48:29 - refresh
48:31 - and again in this case i just need to
48:33 - navigate back to the home page and
48:35 - refresh notice this is going to be this
48:37 - regular link and notice the difference
48:40 - of course in this case i just navigate
48:42 - and there is no page refresh however if
48:44 - i press on the regular link check it out
48:47 - we have this refresh so the idea is that
48:50 - when you set up links around your
48:52 - project you don't want to use the
48:54 - regular html element however when you're
48:57 - setting up a external link yes you do
49:00 - need to use it so if we set up a link
49:03 - back to the gatsby docs and i'll use
49:05 - this full url here then of course i go
49:08 - with link i can copy and paste and then
49:11 - i'll say i don't know
49:13 - gatsby docs and once i set up my link i
49:17 - just need to navigate
49:18 - back to the home page
49:20 - so let me see
49:22 - i'm going to go back to my root and then
49:25 - click on gatsby docs
49:27 - so this works nicely where we use the
49:30 - regular link element and we can just
49:33 - navigate to the external resource but
49:35 - around our project we're going to use
49:38 - the link complement now to hammer this
49:41 - home
49:42 - i'll add one more link
49:44 - and
49:45 - i'll just show you how to navigate to
49:48 - company and history so we have a link
49:52 - remember the path we need to go with
49:54 - folder name in this case company and
49:57 - then whatever is the file name so we're
49:59 - going to go with history and here i'll
50:01 - simply say history
50:03 - and once i have my link in place i
50:05 - simply need to click on the link in the
50:08 - browser and there it is now we nicely
50:10 - navigate to company
50:12 - history page now you're probably
50:14 - wondering okay but
50:16 - why are we always navigating back using
50:19 - the browser can we set up link and of
50:21 - course the answer is yes so in this case
50:24 - i'll simply copy and paste and i'm not
50:26 - going to set up links in every page
50:29 - because like i keep mentioning
50:31 - eventually we will make a navbar so for
50:34 - time being i'm just going to go to the
50:35 - history one
50:36 - import my link i already have the div
50:39 - here so why don't i wrap my text in the
50:43 - heading 2
50:44 - the one that i currently have in here
50:47 - and set up one more link back to the
50:49 - home page just to showcase how is that
50:52 - going to look like so in this case i
50:53 - just need to use forward slash that's
50:56 - how we can navigate back to the home
50:58 - page and of course whatever text so in
51:01 - here i'll say home page so now of course
51:03 - let's test it out i'm going to go to my
51:05 - history page and then in this case i do
51:08 - need to refresh and just like that i
51:11 - have my homepage so once i click i
51:13 - nicely navigate back to the home page so
51:17 - whether you just have one pages
51:20 - directory with simple pages or you have
51:23 - a
51:24 - nested setup where you have nested pages
51:27 - the navigation is exactly the same you
51:30 - just go with a forward slash and then
51:33 - whatever is the path so if you want to
51:35 - navigate to about you go with forward
51:37 - slash about if you want to go to history
51:40 - which is inside of the folder then you
51:42 - go with the folder name and then
51:44 - whatever is the file language of course
51:46 - in our case is history
51:49 - excellent once our project has awesome
51:52 - routing let's take it a step further and
51:55 - add the nav bar
51:56 - now i must warn you though there are
51:58 - going to be few iterations of navbar so
52:01 - don't be upset if after this video our
52:04 - nav does not look exactly like in the
52:07 - complete project however
52:09 - this is
52:10 - our goal
52:11 - so eventually we want to have a nav like
52:14 - this so this is the look on a big screen
52:18 - and then if we make this smaller
52:20 - notice we'll have a nice button
52:22 - that can toggle the links as well
52:26 - and
52:27 - our most basic setup
52:29 - could look like this we're back in the
52:32 - index.js since i have div and you know
52:35 - what at this point i'm going to close
52:37 - the terminal just so i have a bit more
52:40 - real estate in here and inside of there
52:42 - let's just say nav and then i can have
52:45 - one link to the home page and then the
52:48 - second one to the about page like i said
52:50 - there's going to be a few iterations
52:52 - we're going to say to home so that's
52:53 - going to be our home and i'm not going
52:55 - to add the page text here and let's say
52:58 - to about we're just gonna go with about
53:02 - let's save that one now of course i have
53:05 - a nice looking nav where i have the home
53:09 - as well as the about links now the
53:12 - problem of course with the setup is the
53:15 - fact that if i want to add this nav to
53:18 - all my pages
53:20 - as you can see i'll have to copy and
53:23 - paste
53:24 - and since we know that our pages are
53:27 - exact components in react we can
53:29 - actually nest another component inside
53:33 - of the component correct so we can
53:35 - obviously do that in gas b as well so
53:38 - let's try it out
53:39 - and the way we're going to do that is in
53:42 - source we're going to create another
53:44 - folder now you can name this folder
53:47 - however you would please
53:49 - just keep in mind that common convention
53:51 - is naming it components so in this case
53:54 - i need to go to the source and i need to
53:57 - go with new folder just make sure that
53:59 - you don't place it inside of the pages
54:01 - again the goal is to place it inside of
54:03 - the source and like i said common
54:05 - convention is calling this components
54:09 - and then of course
54:10 - we can be rebels and come up with
54:12 - whatever component name we would like
54:14 - and in my case i'm going to call this
54:16 - surprise surprise navbar
54:19 - js and then i'm going to set up my good
54:21 - old regular component and again my
54:24 - preference is always
54:26 - using the arrow function syntax so
54:29 - therefore throughout the course this is
54:31 - the syntax that you'll most likely see
54:33 - but if you prefer different setup
54:35 - i believe i cover those options in the
54:38 - previous videos and as far as this
54:40 - component to return well i can simply go
54:42 - with nav and the same deal now since i
54:45 - don't want them to be e in the same line
54:48 - i'll just place a on our list then list
54:51 - item and then same deal we need to
54:54 - import our link
54:56 - from
54:56 - and you guessed it from gatsby so we go
54:59 - here with our link again same addresses
55:02 - we're gonna go with two prop and we'll
55:05 - just set up to homepage so that's gonna
55:07 - be forward slash and now let me copy and
55:10 - paste this list item
55:12 - and we're gonna go with about
55:14 - and let's just add here about as well so
55:18 - let's save this sucker here and once my
55:20 - navbar is ready to go then of course i
55:23 - just need to go to any of the pages that
55:27 - i want to set up the navbar import the
55:29 - app bar and return it in my component so
55:33 - back in the index.js we want to set up
55:36 - the import and of course since i'm
55:38 - exporting as default i can call it
55:40 - whatever i want notice here export
55:42 - default navbar so back in the index.js
55:46 - i'm going to go with navbar and then
55:47 - from and now of course in this case
55:49 - we're looking in the components and then
55:52 - more specifically in app bar so now of
55:54 - course i don't need to hard code it i
55:56 - just simply go
55:58 - with navbar like so and now of course we
56:01 - have a good looking navbar so in here if
56:04 - i click on about i navigate to about
56:07 - page and since i want to navigate back
56:09 - to the homepage i'll do the same thing
56:12 - in the about.js so let's import the
56:14 - navbar
56:15 - let's set it up here on the top
56:18 - so i guess in order to speed this up
56:20 - i'll just copy the component
56:23 - and then
56:24 - copy and paste i guess
56:26 - and then as far as this text
56:29 - so it's easier for you to see i'll just
56:30 - place it in the heading two so let's say
56:33 - this one
56:34 - should probably restart now i have the
56:37 - navbar in the about page as well as the
56:40 - homepage so that's how we can add a
56:43 - component to our gatsby pages
56:46 - now in the next video i'll show you even
56:49 - an easier way how we can set up a navbar
56:52 - in all our pages nice we have a way of
56:56 - adding components to our pages
56:58 - and throughout the course we'll
57:00 - definitely use this option
57:01 - but not for the navbar why
57:04 - well because navbar typically is a
57:06 - global component meaning a component
57:10 - that we want to display in all our pages
57:13 - and in typical project
57:15 - you also want to display footer in all
57:17 - the pages maybe a sidebar model and
57:19 - hopefully you get the gist
57:21 - as you can imagine it will start
57:23 - importing all the components all the
57:25 - global components in all our pages
57:28 - it's going to get messy pretty fast so
57:31 - one option we're going to use instead a
57:34 - wrapper component approach
57:36 - now before we set anything up let me
57:39 - just stress something this is not a
57:42 - invalid syntax
57:44 - so we will use this approach where we
57:46 - set up the component and then we use it
57:49 - in one of our pages or maybe two of our
57:51 - pages but the idea is that if you have a
57:54 - component that is displayed in all your
57:57 - pages
57:58 - there's a better approach where you set
58:01 - up a wrapper component and that way you
58:03 - can group all your global components in
58:05 - that one wrapper component
58:08 - and then you don't have to import all
58:10 - the global components in all your pages
58:14 - now in order to stress the point of
58:17 - multiple global components first i'm
58:19 - going to navigate to components and
58:21 - create a file by the name of footer and
58:24 - then i'll create that wrapper component
58:27 - now a common convention is calling this
58:30 - layout just keep in mind it is just a
58:32 - file name it is just a react component
58:34 - so of course you can be a rebel and call
58:37 - it whatever you want just keep in mind
58:39 - that if you're reading someone else's
58:41 - code most likely you'll see this
58:44 - convention of naming it layout now first
58:48 - i'll go to footer and in here i'll just
58:51 - create my react component
58:53 - and i'll close the sidebar just so we
58:54 - have a bit more real estate and as far
58:56 - as the footer
58:58 - i'm just gonna go with footer tags and
59:00 - for time being
59:01 - i'll just go with hello from
59:04 - for like so so we save the sucker here
59:08 - and then of course we need to go to the
59:09 - layout now layout is going to be the
59:12 - component that wraps pretty much
59:14 - all the pages
59:16 - and the way we set it up we just go with
59:19 - component and then in our return we're
59:21 - going to place our global components and
59:24 - then we'll use this layout to wrap all
59:28 - our pages so first i guess let's start
59:30 - by importing all our global ones the
59:32 - moment we have two so we're gonna go
59:34 - with import and we're looking for navbar
59:36 - it is sitting in the same folder so we
59:39 - simply go navbar and at this point i'll
59:42 - use two cursors
59:44 - so say here footer and then like i said
59:47 - we just need to place them inside of the
59:50 - return so i go with a navbar
59:53 - and then the second one is the footer
59:56 - now keep in mind one thing
59:58 - when we use layout of course this div
60:01 - will show up in our source code
60:04 - so
60:05 - at this point you have multiple options
60:07 - either you can return it as a main you
60:10 - can return it as a section or whatever
60:13 - element you want but just keep in mind
60:15 - that that element will show up with this
60:18 - particular setup
60:19 - in your source code so my approach is
60:22 - always using the react fragment so you
60:25 - can write it the long way react dot
60:27 - fragment or the shorthand is just using
60:30 - the angle brackets and effectively it is
60:33 - a pattern
60:35 - to return multiple elements because
60:37 - keeping in mind that in react we still
60:39 - need to have this parent but using react
60:41 - fragment we can group children without
60:44 - adding the extra note again that is just
60:47 - a react thing and that is my particular
60:50 - setup i just prefer keeping my source
60:53 - code as clean as possible so i'll save
60:56 - the layout i'll open up the sidebar and
60:59 - you know what
61:00 - i'll remove all the files that i'm
61:01 - currently in but we're not done we will
61:04 - have to return to layout because there's
61:06 - one key thing missing with the current
61:09 - setup but i just want to show you what
61:11 - is going to be the error and now of
61:13 - course i just need to navigate to you
61:15 - about an index and then wrap both of
61:18 - those pages if i want to display the
61:20 - footer as well as the bar
61:23 - and we're going to first remove the nut
61:26 - bar just so you don't think that i'm
61:27 - cheating so notice how i'm removing the
61:30 - import as well as the component
61:33 - then i also do the same thing here
61:35 - where i'll remove the
61:37 - and from the return as well and now in
61:40 - the index.js let's start by importing
61:43 - the layout so we go with layout from
61:46 - and then of course we're looking in the
61:48 - components and then we go with the
61:50 - layout and then like i said what we're
61:52 - going to do we're going to wrap
61:55 - all the return so everything that we're
61:57 - returning from the page in our layout
62:00 - component so at the moment we have div
62:02 - and i can simply replace it i can say
62:05 - that instead i'm going to be returning a
62:07 - layout now keep in mind that the moment
62:09 - you'll save you won't see any contents
62:12 - of the home page because we haven't
62:14 - handled that in layout component and
62:17 - once i save i do have the navbar as well
62:20 - as the footer but what about the
62:22 - contents of the page well we don't see
62:25 - anything because we haven't handled that
62:27 - in the layout
62:29 - and if you're familiar with the react
62:30 - you know that in react of course we have
62:33 - a props object so let's quickly
62:37 - unlock the props
62:39 - for our layout
62:41 - and now i'm going to navigate to the
62:42 - bigger screen just so we can see a
62:44 - little bit better
62:46 - and in the console notice the object and
62:49 - i'll try to zoom in
62:50 - and basically props object is a way to
62:54 - pass in the props
62:56 - into the components so that is the react
62:59 - setup
63:00 - now one special prop is children and
63:04 - essentially this children just
63:06 - represents whatever you have inside of
63:09 - the component so whatever is placed
63:12 - inside of the component so i'm not
63:14 - talking about the return of the
63:15 - component i'm just talking about
63:17 - whatever is placed inside of the
63:19 - component
63:20 - and
63:21 - since i want to display the contents of
63:23 - the homepage i need to access the
63:25 - children
63:27 - and then set up my return where i'm also
63:29 - returning a children and in order to
63:31 - access them there's multiple ways i can
63:34 - do that you can either go with
63:35 - props.children
63:37 - somewhere here or you can just structure
63:39 - it right away in the parameters and the
63:42 - syntax for that is the curly braces and
63:45 - then we go with children
63:48 - and then once i have access the children
63:51 - now of course i just need to decide how
63:53 - my return is going to look like and then
63:55 - since i want a nav navbar on the top and
63:58 - then folder in the bottom i simply set
64:00 - up children
64:02 - in between like so so once i save notice
64:06 - now of course i have the contents of the
64:09 - homepage now in order to make it less
64:11 - confusing why don't we head back and
64:14 - instead of hello people we just say home
64:17 - page
64:19 - so we save it and now i can clearly see
64:21 - that this is my homepage now keep in
64:24 - mind one thing where nothing stops you
64:27 - from
64:28 - moving the navbar a common approach of
64:30 - course is placing that bar at the top
64:32 - and that footer in the bottom but there
64:34 - is no rule that says that you always
64:37 - have to do that as long as you display
64:39 - the children basically the contents of
64:42 - the page that you're going to wrap and
64:45 - as long as you have a valid syntax for
64:48 - the component you're importing of course
64:51 - you're going to be in good shape and now
64:55 - to hammer this home when we do the same
64:57 - thing in the about.js
64:59 - so let's navigate to about.js we need to
65:02 - go with import then we're looking for
65:04 - layout from
65:06 - and again components and then the layout
65:09 - and now of course i'm just going to wrap
65:11 - the return of the about page as well
65:14 - and as you can imagine if you have more
65:17 - global components you simply create them
65:21 - and then add them to your layout and in
65:23 - turn that does two things first it keeps
65:26 - our project cleaner where we have only
65:29 - one place where we have all the global
65:32 - components and second you don't need to
65:34 - hop from page to page for every global
65:37 - component
65:38 - that you create and in order to test it
65:40 - out why don't i go to my navbar and
65:43 - click about so notice this is my about
65:45 - page and i can nicely navigate back to
65:49 - the homepage as well so that is a
65:51 - wrapper component approach
65:54 - where effectively we set up one
65:56 - component then import
65:58 - all the global ones that we're going to
65:59 - use in all our pages and then we simply
66:02 - wrap all our pages
66:04 - in this layout component but don't
66:07 - forget about the children because
66:09 - otherwise you won't see the contents of
66:12 - the actual page good job i think at this
66:14 - point we have a solid understanding of
66:17 - the gatsby basics so switch gears and
66:19 - look at the styling options in gatsby
66:22 - as a quick side note since the primary
66:24 - focus of this course is gatsby and
66:27 - typing out the css takes a long time
66:29 - for all the course projects including
66:32 - this one all the css is already prepared
66:36 - and ready to go we might type few lines
66:38 - of css here and there while we work on
66:41 - some examples but that's about it
66:43 - for the most part styling is exactly the
66:45 - same as in regular react so if you
66:48 - already have the preferred styling
66:50 - method you will be able to hit the
66:52 - ground running in no time now since i
66:54 - don't want this module to be three hours
66:56 - long
66:57 - i will only cover the major options as
67:00 - well as my personal favorite just keep
67:02 - in mind that gatsby fully supports other
67:04 - options like bootstrap tailwind emotion
67:07 - or any of the gazillion options that we
67:10 - have out there as well
67:12 - and you can find those implementations
67:13 - within a matter of seconds
67:15 - by just performing a quick search in
67:18 - star library or utilizing your favorite
67:22 - search engine all right and the most
67:24 - basic way how we can style our gatsby
67:27 - applications is using inline styles
67:31 - so if i go back to index.js
67:35 - and for example i want to style the
67:37 - heading 1 i can simply add a style
67:40 - attribute but just keep in mind that
67:43 - when we work in jsx we're actually
67:45 - working with javascript now what that
67:48 - simply means
67:50 - is that if i set up my double curlies
67:52 - and again the reason why we're setting
67:54 - up double curly because for style it is
67:57 - looking for the object and then in order
68:00 - to access javascript we simply need to
68:02 - use these curly braces so the first
68:04 - curly braces
68:06 - is to go back to the javascript and then
68:08 - the second one is the object because
68:10 - again that is what is required in the
68:12 - jsx when you're setting up the style
68:15 - attribute because at the end of the day
68:17 - you're setting up the javascript and the
68:19 - same goes for properties and values for
68:22 - example you cannot type color and then
68:25 - colon in red like you normally would in
68:28 - css why because this is javascript so
68:30 - the value needs to be in the quotation
68:33 - marks and then of course once we save
68:35 - there is of course my heading is red and
68:39 - like i said the same goes for the
68:40 - properties if i want to set up text
68:43 - transform notice i don't write text
68:46 - hyphen transform again we cannot do that
68:48 - in javascript as far as the object
68:50 - properties so we need to go with text
68:52 - transform and then as far as the value
68:55 - again e in the quotation marks and
68:57 - capitalized so that's the most basic way
69:00 - how we can add css to our gatsby
69:03 - application while setting up our styling
69:05 - using inline css
69:07 - is definitely an option
69:09 - you can kind of see that it's going to
69:11 - get messy pretty fast
69:14 - and we don't need to even add that many
69:16 - elements so for example
69:18 - if i set up multiple heading ones so
69:21 - there's going to be hello world and copy
69:24 - and paste and hello people and what if i
69:27 - want to style them exactly the same
69:29 - of course you can say well you'll just
69:31 - grab the style and then you'll copy and
69:34 - paste okay but what if i later want to
69:37 - change
69:38 - all my heading ones to green am i gonna
69:40 - hop from one heading one to another one
69:43 - and keep changing these values
69:45 - okay and what about different pages we
69:47 - have about we have contact and hopefully
69:50 - you get a just so a better approach is
69:53 - setting up a
69:54 - global css now
69:57 - eventually we'll set up a separate
69:59 - folder for that for all the assets the
70:02 - images css and all that but for time
70:05 - being while our project is still nice
70:07 - and cute i'm just gonna head to
70:09 - components
70:10 - and then we need to come up with a file
70:13 - name and since i'm gonna be attaching
70:15 - this to the layout i'm going to go with
70:17 - layout
70:18 - and then css so at this point this is a
70:21 - traditional css file so you can do all
70:25 - the cssc things that you like to do so
70:28 - you can import fonts you can set up css
70:30 - variables and all that cool stuff now in
70:33 - our case we're not going to be that
70:35 - dramatic we're just going to go with
70:37 - body and then we're going to go with
70:39 - font family and i'm going to go with a
70:41 - system one like so and then maybe let's
70:45 - add a bit of background as well just so
70:47 - we can see that it actually works and
70:50 - maybe let's go with red so maybe we will
70:52 - be a bit drastic in the beginning now of
70:54 - course nothing is happening because we
70:56 - haven't imported this css
70:59 - and
71:00 - next i'm also going to style all the
71:02 - heading ones and i'm just going to set
71:04 - them up as color
71:06 - blue
71:07 - and then where do we import this file
71:09 - well since we have a layout and that
71:13 - layout is going to wrap all our pages i
71:16 - think it kind of makes sense if we just
71:18 - import this layout css here now with
71:21 - this one since it is a css file we don't
71:24 - need to specifically say what we're
71:25 - importing however we do need to use the
71:28 - extension
71:29 - so remember how when we use nav button
71:31 - footer we simply went with navbar footer
71:34 - notice there is no js with the css one
71:37 - you need to have a full extension since
71:39 - it's not a javascript file so we simply
71:41 - go with import and then forward slash
71:43 - and then layout
71:45 - and then css now again we don't need to
71:49 - say what we're importing now of course
71:51 - to have my background red as well as the
71:54 - color for the hanging ones now let me
71:57 - mention two things
71:58 - first keep in mind that since we have a
72:01 - inline style in our project
72:05 - it will always be stronger than the
72:07 - global one so even though i said all my
72:10 - heading wants to be blue
72:12 - because i'm using the inline style for
72:14 - the first one
72:16 - whatever color i have here is going to
72:18 - be applied now why am i telling you that
72:21 - because there's going to be cases where
72:22 - you are not setting up the inline style
72:25 - for example you're using a third-party
72:27 - library
72:28 - and that library adds that inline css
72:31 - and then it's your job to go back to the
72:33 - source code and check what styles are
72:36 - applied so that way you can either
72:38 - override them
72:40 - or maybe you can just fully understand
72:42 - what is happening as far as the css now
72:46 - the second thing with the gatsby version
72:49 - 3 they have this interesting setup where
72:51 - during the development even though
72:54 - contact
72:55 - or i don't know testing does not have
72:58 - the layout component the styles will be
73:01 - applied so previously the setup was
73:03 - following where only the pages that had
73:06 - layout
73:07 - the css was applied that's not a
73:10 - scenario anymore with gatsby version 3.
73:13 - what am i talking about well if i go to
73:16 - about i can clearly see that i still
73:18 - have my footer and bar correct and i
73:21 - have hello from the about page so that
73:24 - makes sense of course the global style
73:27 - is present but
73:29 - why i have the global style also in
73:32 - contact so if i hop over to the navbar
73:35 - and if i add a link
73:37 - to a contact
73:39 - so say contact here
73:41 - and
73:42 - contact you'll notice something
73:44 - interesting so once we save first of all
73:46 - we have a link
73:47 - in navmar that makes sense and then once
73:50 - you press check it out notice how the
73:53 - page is read and if you still don't
73:55 - believe me if we go to the contact and
73:58 - just change to heading one
74:00 - and change the text to the contact page
74:03 - you'll see that there is no nav bar
74:06 - so there's no navbar footers so we don't
74:08 - have the layout but the background is
74:11 - red and of course the heading one is
74:14 - blue so again we'll still have to use
74:17 - the layout we'll have to import the
74:19 - layout set up the layout and all that
74:20 - but the global css in usb version 3 is
74:24 - already applied but let me be very clear
74:27 - as far as i tested this is only
74:29 - happening
74:30 - in development
74:32 - so once you deploy your project
74:34 - if the page does not have the layout
74:37 - styles won't be applied while global
74:39 - styles are great and will definitely use
74:41 - them in our project
74:44 - as your project gets bigger eventually
74:46 - will run into two issues
74:48 - where you'll have to get creative with a
74:52 - class names because you don't want to
74:55 - have name collisions
74:57 - and second it's going to get harder and
74:59 - harder to manage the global css and in
75:03 - this video i simply want to show you the
75:05 - name collision problem and then in the
75:08 - following videos we'll take a look at
75:10 - the approaches that we can use in gatsby
75:13 - to avoid them and i actually want to
75:15 - start by removing this background red
75:18 - because i do find it a bit annoying and
75:21 - again we have multiple heading ones and
75:23 - you know what in these videos i'll just
75:25 - focus on the about an index.js again
75:29 - eventually we will add layout to the
75:31 - rest of the pages but for now let's just
75:33 - work in these two pages the homepage as
75:37 - well as the about so in the about i'm
75:39 - just gonna change it around and i'll
75:41 - simply say
75:42 - about page
75:45 - and of course i just need to navigate
75:46 - back
75:47 - so let's go to about
75:49 - for some reason it tells me that there
75:52 - is no page so let me refresh now of
75:55 - course everything works and
75:57 - as you can see i have the about page and
75:59 - i have the home page and in both cases i
76:02 - have these heading ones and they are
76:05 - and of course in order to avoid that i
76:08 - just need to go with maybe a class of
76:10 - about
76:11 - heading
76:13 - and then i'm just going to say color
76:16 - and we're going to go with green and we
76:18 - can do the same thing with home heading
76:21 - so home
76:22 - heading
76:24 - and then as far as these ones well why
76:27 - don't we keep them as blue so i'll just
76:29 - remove the global style and i'll set up
76:32 - a color and say color is equal to blue
76:37 - now if we head back to index.js first i
76:40 - guess let's just remove the inline style
76:44 - for these ones and then i want to simply
76:46 - apply this class so where i can apply
76:49 - the class well i can probably come up
76:51 - with a div
76:54 - and inside of this div i'm just going to
76:56 - go with home heading so home
76:58 - and then hyphen heading and then
77:01 - whatever heading i'm going to place
77:03 - inside of the div of course all of them
77:06 - will be blue we can clearly see that and
77:08 - then the same thing will do ian about so
77:11 - let's say here that i'm going to create
77:14 - a div and this is going to be an about
77:16 - heading
77:17 - class name and about heading and now of
77:20 - course if i navigate to about page the
77:23 - heading should be green but it's not so
77:26 - let's see
77:27 - first let's try to refresh that didn't
77:30 - work
77:30 - and maybe at this point i'll have to
77:33 - restart the server so let's go with npm
77:36 - start
77:37 - and then once the server is up and
77:40 - running we definitely should see that
77:42 - green color so that's the thing
77:44 - sometimes in development yes the hot
77:47 - reloading is technically working but
77:50 - once in a while you might need to
77:52 - restart the server and then once you do
77:54 - and once i refresh notice now of course
77:57 - i have the about page and like i said
77:59 - as your project gets bigger and bigger
78:02 - you just need to get really creative
78:05 - with these class names because you want
78:08 - to avoid the name collisions as much as
78:11 - possible and also the second issue is
78:14 - the fact that as your project gets
78:15 - bigger and bigger and bigger it is
78:17 - harder and harder to manage the global
78:20 - css file so in following videos we'll
78:22 - take a look at two solutions that we can
78:25 - use in our gatsby project all right and
78:29 - the first solution that we have in
78:30 - gatsby is built into the gatsby so you
78:34 - don't need to install anything and it is
78:36 - called css modules now i have to be
78:39 - perfectly honest
78:40 - i actually don't use that solution
78:44 - because i do find it a bit clunky
78:46 - and i actually prefer
78:48 - styled components option instead and i'm
78:51 - going to cover that in next video again
78:54 - that is just my personal preference it
78:56 - doesn't mean that it's a bad one i just
78:58 - find style components easier to use and
79:02 - the way we set up css modules
79:04 - we simply need to create a file by the
79:07 - name of
79:08 - module css now what i'm going to do is
79:12 - in the source i'm going to create a new
79:14 - folder and i'll call this examples and
79:18 - effectively in this folder i'll just
79:20 - dump things that eventually are not
79:22 - going to be part of our project meaning
79:24 - part of our recipe site but just in case
79:27 - you ever want to have a reference you
79:29 - can just find it in the examples so in
79:32 - the examples we'll create two css files
79:36 - and the first one will be home module
79:38 - css and the second one will be about
79:41 - module css so as you can imagine
79:44 - for every page you can create one for
79:47 - every component you can create one it
79:49 - really comes down to your preference so
79:51 - in the examples i'm going to go with
79:53 - home
79:54 - and naming here is important so come up
79:56 - with whatever name you want so in my
79:58 - case i'm going to go with home then
80:00 - module
80:02 - and then css so that is the proper
80:05 - syntax and let's do the same thing
80:07 - for the about as well so we're going to
80:09 - go with about
80:11 - module css and if you want to create one
80:14 - for navbar one for footer of course you
80:16 - can definitely do so and then here we
80:19 - just need to come up with a class and
80:22 - since i don't want to be creative with
80:23 - my class names i'll simply say page so i
80:27 - go with page here and then i just need
80:29 - to come up with the styles so in this
80:31 - case
80:32 - in my page i want to have a color and
80:35 - i'm going to go with blue
80:38 - so all the elements the color will be
80:40 - blue and then let's also set up a text
80:43 - one
80:44 - so that's going to be another class and
80:48 - in this case i'm just going to add text
80:49 - transform
80:50 - text transform and we're going to go
80:53 - with capitalize and just to showcase
80:55 - that we're not limited to only setting
80:57 - up the classes meaning we can use other
81:01 - css selectors instead i'll also write
81:04 - page and planning 1 is going to be color
81:08 - and for time being why don't we go with
81:11 - blue violet so i'll save it here
81:14 - and now i just need to import now since
81:17 - i named my one home module css now of
81:20 - course it only makes sense
81:22 - if i navigate to index.js and then i go
81:26 - with import and this is the difference
81:29 - between version two and version three
81:31 - where in version three you need to be
81:33 - specific of what classes you're actually
81:37 - importing previously you just got the
81:39 - whole object and then somewhere in your
81:42 - code you used it now in this case it is
81:45 - different where they actually want you
81:47 - to name it now you can still import as
81:50 - the whole thing and i'll show you that
81:53 - in the about page but a typical approach
81:56 - is getting the exact classes that you
82:00 - have in the module css file so in my
82:03 - case what classes do i have i have page
82:06 - and of course i also don't have the text
82:09 - now where is it coming from of course it
82:11 - is coming from examples and then the
82:13 - file name is home
82:15 - module css again since it is a css file
82:19 - you need to provide a full path and then
82:22 - i just need to decide well where i'm
82:24 - going to apply those classes and let's
82:26 - start with the page class well this one
82:29 - kind of makes sense if i'll apply to my
82:32 - div
82:32 - correct and then that way i'll right
82:34 - away style my headings and then this
82:37 - text one well i'll have to create a
82:40 - paragraph and probably add that text
82:42 - class so we go here with class name
82:45 - and then we need to use this dynamic
82:48 - approach where of course now we have
82:50 - imported the class name by the name of
82:53 - page so we simply go with page like so
82:57 - so once i save and once i navigate back
82:59 - home
83:00 - check it out i can see that all my
83:02 - heading ones at the moment have this
83:05 - color now if you don't see it try
83:07 - refreshing the page
83:09 - and then of course i also want to create
83:12 - a paragraph with some lorem text so say
83:15 - lorem and apply the text and of course
83:18 - in here notice how the text is blue why
83:23 - well because i say that everything is
83:26 - going to be color blue but then the
83:28 - heading ones are going to have this blue
83:31 - violet color now if i want to capitalize
83:33 - this of course i need to go back to
83:35 - index.js and i already have this class
83:39 - so the same deal we go with class name
83:42 - and then we go with the text
83:45 - now wire is so powerful because i can do
83:48 - the same thing in about module meaning i
83:51 - can use the same names
83:53 - and just change the value so let me copy
83:55 - this copy and paste and i don't need to
83:58 - come up with about page or home page or
84:01 - contact page or whatever i can simply
84:04 - change these values so for example i'm
84:06 - going to go back to the annoying red one
84:09 - so all the text is going to be color red
84:13 - and
84:14 - the ones are gonna be i don't know
84:17 - yellow maybe yellow green and then as
84:20 - far as the text i'm gonna go to
84:22 - uppercase so notice how i'm using the
84:24 - same names i'm just changing the values
84:27 - so now of course if i navigate to about
84:30 - again i just need to import we go here
84:33 - import page
84:34 - and then the text from and then the
84:37 - module of course examples and then about
84:41 - module
84:42 - and then css and in here again instead
84:46 - of the div
84:47 - why don't we go
84:48 - with a page so that's the class that i
84:51 - have and then of course right below it
84:55 - let's add a heading one with hello world
84:57 - just so you can see that it is actually
85:00 - working and we can check it out notice
85:02 - at this point nothing was updated so
85:05 - again at this point we'll have to
85:06 - refresh and there it is now i have about
85:09 - page as well as the hello world and then
85:12 - right below it why don't we set up a
85:14 - text
85:16 - and again this is going to be a
85:17 - paragraph with just some dummy text so
85:20 - we'll use lorem once we save and then
85:24 - again once we refresh it is going to be
85:26 - red why because
85:28 - that's the styling i have in my about
85:31 - module and then lastly if i want to have
85:34 - this uppercase i simply go with text and
85:37 - i add that to my paragraph so i'm going
85:40 - to go back to about and then if we go
85:42 - with class name
85:44 - and then if we say text then of course
85:47 - the moment we'll save
85:49 - and again in this case we'll have to
85:51 - refresh of course our text will be
85:53 - uppercase so as you can see using these
85:56 - modules solves both issues first we
85:59 - don't need to be creative with our class
86:02 - names and yet we can still use the
86:05 - proper css selector so if you come up
86:08 - with one class name you can just say
86:10 - that i'm going to style any ones or
86:11 - paragraphs and all that
86:13 - and the second thing your files will be
86:16 - way more manageable because of course in
86:18 - here for example i'm just going to apply
86:20 - styles to the homepage and in the about
86:23 - module of course that is going to be 40
86:25 - buck module in the navbar one the styles
86:27 - are going to be for navbar and hopefully
86:30 - you get the gist again it is my
86:32 - preference to use styled components
86:34 - because i still find it a bit clunky but
86:38 - it is definitely a good option and
86:40 - what's really cool it is right away
86:42 - built into the gatsby now lastly i just
86:45 - want to showcase that of course there's
86:47 - also an option
86:48 - where we don't have to name them and we
86:52 - simply do it this way where we go with a
86:55 - star and we say as and then we just need
86:57 - to come up with a name in here i can say
87:00 - about styles now every time i access
87:03 - this one i also need to use about
87:07 - and styles and then class name didn't
87:09 - change
87:10 - so class name is exactly the same
87:13 - but of course the beginning part is
87:15 - different so at this point i'm not
87:18 - setting up named imports i'm not saying
87:21 - hey get me the page or text i'm just
87:23 - saying get me everything i'm gonna
87:26 - rename it as styles about styles and
87:29 - then i'm just gonna use this value so
87:30 - that definitely is another option you
87:33 - can do
87:34 - and let me just save the text and let me
87:36 - refresh and showcase that nothing
87:38 - changed and at the very end i just want
87:41 - to showcase that if you navigate to the
87:44 - browser
87:45 - notice the elements
87:48 - so if we go to the gatsby one right now
87:50 - and then instead of the div
87:52 - and then inside of the div
87:54 - notice the class name it is home module
87:57 - and then page and then whatever value
88:00 - you're here and
88:01 - the way the modules work effectively
88:04 - they set up these unique class names so
88:06 - that's why i can use the same name in my
88:09 - about module the same as in home module
88:11 - and in any page module that i possibly
88:15 - have so here notice we have this class
88:17 - that i'm styling heading once and the
88:19 - same works for the paragraph where i
88:22 - have that text one again this is a
88:24 - unique class name so that way you won't
88:26 - have those name collisions and if we
88:28 - navigate to about check it out again
88:31 - this is going to be a different name for
88:32 - that div so about module and then page
88:35 - and then again some kind of different
88:37 - value and with that said now let's take
88:39 - a look at the style components approach
88:42 - awesome job we're almost done with the
88:43 - styling and as a last topic in this
88:46 - module i would like to cover styled
88:48 - components now i can tell you right away
88:50 - that we'll only be scratching the
88:52 - surface of what styled components can do
88:55 - and we only cover them since in later
88:57 - course projects i'll provide css using
89:00 - styled components and therefore i want
89:02 - you to be aware of the general setup as
89:05 - a side note if you are interested in
89:07 - style components i do have an entire
89:09 - course dedicated to style components and
89:11 - you can check it out by visiting
89:13 - johnsmilga.com
89:15 - now the idea behind style components is
89:17 - very similar to that of css modules they
89:20 - add unique class names so we don't need
89:22 - to worry about naming collisions and
89:25 - also provide modularity so we don't need
89:27 - to jam all of our css code in one file
89:31 - what's also interesting in order to add
89:33 - style components to our project we'll
89:35 - learn how to add plugins to our project
89:38 - and you can think of plugins as a way to
89:40 - enhance our project's capabilities with
89:43 - the help of gadsby community
89:46 - so with that said let's first navigate
89:49 - to the gatsby docs and we're looking for
89:52 - the plugins link
89:53 - so go to the galaxy docs and then look
89:56 - for the plugins once we navigate here as
89:59 - you can see we have many many many many
90:01 - many plugins at our disposal and the
90:06 - idea is following where if i have a
90:08 - gatsby project and if i want to add some
90:11 - feature i just go to the plugins get the
90:13 - plugin and basically somebody else in
90:17 - the community has provided that feature
90:19 - for me now there's official plugins so
90:22 - plugins made by the gatsby team they're
90:24 - plugins made by the companies and as an
90:27 - example later in the project we'll use
90:30 - the contentful one and of course since
90:32 - we can create our own plugins there's
90:34 - also plugins made by the community
90:37 - and in my case since i don't want to
90:39 - search through all the plugins just to
90:41 - find the styled component one i'll
90:44 - simply go to the search box and i'll
90:46 - type styled and once we do
90:49 - first option is going to be gatsby
90:52 - plugin styled components that's the
90:54 - plugin we're looking for and what i
90:57 - really enjoy for most of them the
91:00 - documentation
91:01 - is super super well written where they
91:05 - right away tell you everything you need
91:07 - to install everything you need to set up
91:09 - and as a result you are up and running
91:11 - in no time in this case
91:13 - right away tell us
91:14 - what libraries we need to install what
91:17 - dependencies we need to add to our
91:18 - project so we simply copy this line and
91:22 - then navigate back to our project now we
91:24 - do need to stop the server so press ctrl
91:27 - c i'll clear the terminal and copy and
91:30 - paste and then keep on scrolling and
91:32 - notice how to use we need to add in gas
91:36 - b config our plugin
91:39 - and what's really important gatsby
91:41 - config is a
91:43 - node file so this is just a export
91:46 - syntax for node files they use commonjs
91:49 - that's why we go with module exports
91:51 - we're exporting a object and then in
91:54 - that object we have plugins all right
91:56 - and this is important don't rename it to
91:58 - john peter or susan it has to be a
92:01 - plugins that's a must and then we have
92:04 - two options some plugins will be set up
92:07 - as objects if we want to set up more
92:09 - options and some of them will be set up
92:12 - only as a string now
92:15 - in this case they showcase as an object
92:17 - but in fact we can use it as a string so
92:20 - i'll just copy
92:21 - this string keep in mind that these are
92:23 - template literals those are not
92:25 - quotation marks and that is very
92:27 - important so now i have this string and
92:30 - again i'll navigate back to my project
92:33 - and of course in this case i'm going to
92:34 - be looking for my get to be config and
92:37 - then notice i have my array and just
92:39 - copy and paste and successfully i have
92:42 - my first plugin now every time you
92:45 - install a dependency or make some
92:47 - changes in gatsby config i suggest
92:51 - restarting the server otherwise the
92:55 - latest changes might not be applied so
92:58 - npm start we spin up the dev server and
93:02 - the way we set up style component we
93:05 - simply go to
93:06 - examples we'll create a new file and
93:09 - i'll call this button and more
93:11 - specifically button.js so let me zoom
93:14 - out for some reason
93:16 - i didn't add the js extension and the
93:19 - way we work with styled components we go
93:21 - with import and common convention is
93:24 - calling this styled but it is a default
93:27 - export so technically you don't have to
93:29 - follow the conventions then we go with
93:31 - styled components and the way we set up
93:34 - our styled component we either can go
93:37 - with export default or a named export
93:40 - and effectively we're right away setting
93:42 - up a react component now under the hood
93:45 - it is still going to be a html element
93:48 - and i'll show you that in a second in
93:51 - the browser so in my case i'm going to
93:52 - go with a named export option where i'm
93:56 - going to go with export cons and then we
93:58 - just need to come up with the name
93:59 - example button is equal to styled dot
94:04 - and then whatever html element we want
94:07 - so if you want div you just type div if
94:10 - you want article you type article if you
94:12 - want a section
94:14 - you get to just type the section now in
94:16 - my case since i have the file name by
94:18 - the name of button as well as the
94:20 - component name i might as well go with
94:21 - the button and then we go with this
94:24 - interesting syntax of tag template
94:26 - virtual now they're not unique to style
94:28 - components
94:30 - in fact they were introduced in es6 but
94:33 - the way style components use them is we
94:36 - simply add here the styles and they will
94:38 - be applied to our component
94:41 - and in turn our html element so if i go
94:45 - with background
94:47 - and green
94:49 - and also add maybe a color of orange
94:52 - and font size
94:54 - is going to be two rems you'll see that
94:57 - once we render the button all these
94:59 - styles will be applied
95:01 - now quickly i want to mention that if
95:04 - your screen looks a bit different than
95:06 - mine it is simply because i'm using this
95:09 - extension the vs code
95:12 - styled components i believe that was the
95:13 - name
95:14 - style components extension yeah and this
95:17 - extension does two things
95:19 - it adds colors to properties so
95:22 - properties are different color than the
95:24 - value so probably in your case you
95:26 - probably see everything as orange and
95:29 - second it right away checks for the bug
95:32 - so for example if i remove the semicolon
95:35 - right away it tells me that hey listen
95:37 - there's something wrong with your code
95:38 - if you don't have that extension then
95:40 - you'll have to debug it yourself so
95:43 - that's the extension
95:45 - let me make this smaller now once we
95:48 - have the button in place and by the way
95:50 - you know what i messed up i did not save
95:53 - gas b config so my apologies but i'll
95:55 - have to restart it otherwise i might
95:57 - have to do that later anyway so again i
96:00 - stop the server control c
96:02 - in this case i have saved all the
96:04 - changes and then i go with start okay
96:09 - now back in our file system of course in
96:12 - the index.js i want to get that button
96:16 - so i'm going to go with import now since
96:18 - it is a named export i need to go with
96:20 - example button from and then of course
96:24 - we're looking in the examples and then
96:26 - the button and then i just need to
96:28 - decide where i want to render it so i'm
96:30 - going to go above the headings and i'll
96:32 - say example button now as far as the
96:35 - text inside of the button we're just
96:37 - gonna go with click me so once i
96:39 - navigate back home the moment i don't
96:41 - see it but once i refresh i should see
96:45 - my button and that's interesting okay
96:48 - now it is so i guess it took a little
96:50 - bit
96:50 - for the server to spin up now of course
96:53 - we can see the button not just the show
96:55 - case it is still a html element here i
96:59 - also need to refresh so gatsby div
97:03 - and then notice this unique class name
97:06 - that's what's responsible for setting up
97:09 - those unique styles so we don't need to
97:11 - worry about
97:12 - the name collisions so these styles will
97:15 - be only applied to this specific button
97:19 - not to all the buttons that we have
97:21 - in our project and the way we'll use
97:25 - later style components in our upcoming
97:28 - project is following where basically i'm
97:32 - going to go to about.js keep in mind
97:33 - that you can do it in any of the
97:36 - components i'm just going to use
97:38 - about.js as an example and i'm going to
97:41 - go with import
97:42 - styled
97:44 - and then of course i'm looking for
97:45 - styled components and then typically
97:48 - i'll set up my styled component below
97:52 - my actual component and then i'll just
97:54 - wrap my component in the start component
97:57 - so we go with
97:59 - const and
98:01 - usually i'll probably call them wrapper
98:03 - and then i'll say style again
98:06 - whatever html element you want so
98:08 - sometimes it's going to be a section
98:10 - sometimes it's going to be a div
98:11 - and you get an idea so in this case when
98:14 - we go with section here
98:16 - and then as far as the styles why don't
98:18 - we copy the ones from the about modules
98:23 - css so just grab everything and i'll
98:25 - show you how we can set it up in the
98:27 - start component and a setup in a style
98:29 - component is pretty much just like in
98:31 - normal css since i know that i'm going
98:34 - to be wrapping my component
98:36 - in this style component i actually don't
98:39 - need this page anymore i can simply say
98:41 - that
98:42 - whatever elements are going to be inside
98:44 - of my wrapper well the color is going to
98:46 - be red and the same goes for heading
98:48 - ones i don't need to have these classes
98:50 - anymore i'm just going to say all the
98:52 - heading ones that are inside of this
98:54 - wrapper will have this yellow green now
98:56 - we can still use the classes if you want
98:58 - in a style component if there is going
99:00 - to be a text class inside of my
99:04 - styled component then of course the text
99:06 - transform will be equal to uppercase now
99:09 - the only thing left to do is just scroll
99:12 - up and then i'll remove these class
99:15 - names
99:16 - we don't need them apart from the
99:17 - paragraph one that one we will add back
99:20 - later but first i want to just change
99:24 - the div to my wrapper so that's my style
99:27 - component and then like i said let's
99:29 - also add a class name of text for my
99:32 - paragraph and we'll save it
99:35 - and of course this is the homepage so
99:36 - now i need to navigate to about page and
99:39 - notice how my styles did not change and
99:41 - if i'll change it from red to blue in
99:45 - this case once we save once we refresh
99:48 - of course the text color right now is
99:50 - going to be blue now why do i find style
99:54 - components
99:55 - easier to work with than the css modules
99:58 - simply because i like the fact that all
100:01 - my styles are in the same file as my
100:04 - component so that way as i'm setting up
100:07 - the functionality i can right away add
100:09 - the styling as well the reason why i
100:12 - find the modules a bit clunky because
100:14 - you set up the logic and then you need
100:16 - to rush back to the module css file look
100:20 - for the class look for changes and all
100:22 - that now again for some people that's
100:24 - not a big deal but my preference is
100:26 - always to have the styles in the same
100:29 - file and effectively that is going to be
100:31 - the setup in a future project where i
100:34 - will prepare all the boiler plate for
100:36 - you so we won't create the components
100:40 - every time from the scratch it's only in
100:43 - this project in tutorial one where we're
100:45 - doing that and then also with the setup
100:49 - there's going to be a style component in
100:51 - the bottom with all the styles so we'll
100:53 - simply need to add the wrapper to our
100:56 - component and we'll be in good shape and
100:59 - you'll have all the styles and also
101:00 - you'll be able right away to see what
101:03 - styling i applied to my component now
101:07 - i'm not complaining
101:09 - the default modules option is a very
101:12 - good one it's definitely better than
101:14 - global css but i personally prefer using
101:18 - styled components instead
101:20 - that should do it for the main styling
101:23 - options that we have in gatsby
101:26 - and now we can move on to our next topic
101:30 - nice and before we cover data in gatsby
101:33 - why don't we spend some time on our
101:36 - current project
101:37 - so it looks more like this
101:40 - than whatever we have right now
101:43 - and we're going to start with some house
101:45 - cleaning
101:46 - so i'm going to navigate back
101:48 - to my project and in the pages i'll
101:52 - remove that company folder again
101:54 - that was just to showcase how the nested
101:59 - structure works we actually don't need
102:01 - it for a project now if you want to keep
102:03 - it that's definitely your option but in
102:05 - my case i will remove it and visual
102:08 - studio code is concerned but i'll say
102:10 - yes i want to remove the company and the
102:13 - same goes for testing as a quick side
102:16 - note you probably noticed that in a
102:19 - terminal you get this warning so even
102:22 - though i said that yes this is one of
102:24 - the options that you can use when you're
102:26 - setting up the error function where
102:28 - essentially you just go with export
102:30 - default and our function at this point
102:32 - they right away set up the warning and
102:34 - basically they just suggest using
102:36 - another approach where we set up the
102:38 - name and then we export as default which
102:42 - is going to be my option throughout the
102:44 - course anyway now why am i telling you
102:46 - that because i want to remove the
102:48 - testing anyway so go with remove and
102:51 - we'll remove that sucker as well now
102:54 - that's a great start
102:56 - then in the components
102:58 - i'm not going to have the layout
103:00 - all the css is going to be in a
103:03 - different folder anyway so yes i want to
103:06 - remove the layout css as well
103:08 - and then one by one
103:11 - we'll add
103:12 - the basic changes to all our pages as
103:15 - well as create all the pages we
103:18 - eventually will have in our project so
103:21 - let's start with index.js
103:24 - i don't want to keep this module one and
103:26 - that was for your reference same goes
103:28 - for the example button and i simply can
103:31 - remove example button as well as this
103:34 - class name
103:35 - now to tell you honestly i'll just have
103:37 - the layout for now with a heading one
103:40 - off homepage so i'll say home page let's
103:44 - just keep things simple at this point
103:47 - and since i removed the files and all
103:49 - that it looks like i'll have to restart
103:51 - so let's go here with npm start
103:55 - we'll start it up and then of course
103:57 - next one is the about js again the same
104:00 - deal i don't want the import for the
104:02 - module i also don't want for styled ones
104:06 - and i have another complaint where the
104:09 - layout gs is of course looking for
104:12 - layout css
104:13 - so let's remove this one as well and
104:16 - once that one is fixed in the about.js
104:20 - of course we don't have the wrapper
104:21 - anymore so remove that one
104:24 - and
104:25 - also
104:26 - i'll remove the whole
104:28 - style component
104:31 - and here also wrapper goes and the same
104:35 - deal
104:36 - i'm just gonna leave one heading one
104:38 - with a above page so again let's see yep
104:41 - that fixes it so i have my current
104:44 - navbar home about contact and then i
104:46 - just have hello from footer and
104:49 - effectively this is the structure that i
104:51 - want to set up in all my pages and i
104:55 - guess let's continue by setting up all
104:58 - the pages that we're going to have in
105:01 - our project
105:02 - so if i take a look at the complete one
105:04 - i have home i have recipes page i have
105:07 - tags page about and contact and of
105:10 - course the error so effectively we need
105:12 - to create two more we need to create
105:14 - recipes as well as the tags
105:18 - so since i'm going to use pretty much
105:20 - the same setup i can just copy whatever
105:23 - i have in the about and now in the pages
105:26 - let's create
105:27 - tags page so tags js
105:30 - as well as new files and we'll call this
105:33 - recipes js so copy and paste
105:36 - now it's probably a better setup if we
105:39 - change the name keep in mind we're
105:40 - exporting as default so technically it
105:42 - doesn't matter but just to stay
105:45 - consistent i'm going to go with recipes
105:48 - and i always suggest using the capital
105:51 - casing and i'll show you when we work
105:54 - with navbar why it is better and
105:57 - essentially it's because i'll react
105:59 - works but don't worry we'll get there
106:02 - and i'll say here recipes as well and
106:05 - let's just say instead of about page
106:08 - recipes page let's save it okay
106:12 - awesome
106:13 - and then i want to do the same thing in
106:15 - text so copy and paste everything
106:18 - and again instead of recipes
106:21 - we're going to go with tags here
106:24 - and tags here as well
106:27 - and recipes
106:29 - will become tags page now since i want
106:32 - to quickly navigate around my project
106:34 - just to see whether everything worked
106:36 - i'll go back to navbar again there's
106:38 - going to be multiple iterations of the
106:40 - snapbar
106:42 - so we will have to restructure it a bit
106:44 - later but for now let's just copy and
106:47 - paste and remember that we have
106:50 - tags
106:51 - as well as the recipes
106:54 - recipes okay let's save it and of course
106:58 - i didn't change these values here so
106:59 - that's why i have
107:01 - multiple contacts so tags
107:04 - recipes over here and i can clearly see
107:08 - now all my pages so i have home
107:11 - about
107:12 - contact and of course in the contact
107:15 - page i did not add layout so that was my
107:18 - bad i guess let's go back to the contact
107:23 - page so where it is over here and now
107:26 - since we already have this setup why
107:28 - don't we copy and paste it's gonna be
107:29 - faster so let's go back to the contact
107:32 - select everything in here i'm showcasing
107:35 - the function approach meaning the good
107:37 - old function keyword approach but we'll
107:39 - just change it to a arrow function
107:41 - instead so i'm looking for recipes and i
107:43 - want to change it to contact so let me
107:46 - in this case select all three of them
107:48 - we'll say contact here
107:51 - and then if we refresh of course we also
107:54 - have right now a navbar as well as a
107:56 - footer in a contact page so now i can
107:59 - nicely navigate around and i can see
108:01 - that i have all my pages and lastly i
108:04 - just want to add layout to my error page
108:07 - as well
108:08 - because if you remember i said that
108:10 - error page is just a typical page so we
108:13 - can do all the same things that we do in
108:17 - other pages and again i think it's just
108:19 - going to be faster selecting everything
108:20 - copy and paste and just change the name
108:23 - now if you're wondering why nothing
108:25 - breaks well it is simply because layout
108:28 - of course is sitting in the same place
108:30 - so as we're setting up the files here in
108:33 - the pages this path will always be
108:35 - correct now of course if you'll have
108:37 - nested structure that's a different
108:39 - scenario so say here error
108:42 - and
108:43 - i'm gonna do it here as well and then
108:46 - lastly for the heading one
108:48 - let's just say error so let's say this
108:50 - one as you can see all these pages
108:53 - are set up correctly and now i just want
108:56 - to test out the error so simply add i
108:58 - don't know whatever gibberish after
109:00 - contact this is gonna spit me back this
109:03 - screen and of course now i can see the
109:05 - error page so
109:07 - we have good fundamentals in place
109:09 - and now we can move on to our next task
109:13 - all right and once we have general
109:14 - structure in place
109:16 - now let's quickly deal with styling and
109:18 - don't worry since it's a gas because i
109:21 - won't make you type about dcss i'll
109:24 - simply copy and paste the styles from
109:26 - the final project
109:28 - and if you want to access the styles you
109:30 - have two options
109:32 - probably the fastest one is just going
109:34 - to be using johnsmiller.com
109:36 - navigate there again we're looking
109:39 - for the gatsby project
109:41 - and then we're looking for recipe site
109:44 - and then click on either the star files
109:47 - or source code both of them lead to the
109:49 - same place and basically you'll hit the
109:51 - repo now another option of course you
109:54 - can look for my get up profile
109:56 - johnsmilk.com or i'm sorry john smilga
110:00 - and then go for gatsby version 3
110:02 - tutorial recipes and once you hit the
110:05 - repo in the source look for the assets
110:09 - one
110:10 - and in there more specifically look for
110:13 - css and finally you'll hit the main css
110:17 - and i suggest just clicking on raw
110:20 - and essentially these are all the styles
110:22 - we're going to use
110:23 - in the project so just click select all
110:27 - copy and navigate back now again in my
110:30 - case i'll keep the same structure
110:33 - because later i'll use those assets so
110:36 - in the source i'll create a new folder
110:38 - and the name is assets like so then in
110:42 - this folder i'm going to create another
110:44 - one and i'll call the css and then
110:46 - finally in this one i'll create the new
110:48 - file i'll call my one main css i'll zoom
110:52 - out copy and paste and we have all the
110:55 - styles
110:56 - now you'll notice that at the very top
111:00 - the fonts are commented out because
111:02 - later we will use a plugin
111:05 - to set up the funds and of course i'll
111:07 - talk about it once we get there for time
111:09 - being if you want to have the same funds
111:12 - as in the final project just uncomment
111:15 - the fonts that's all you have to do now
111:17 - of course nothing changed in that
111:19 - project because
111:20 - we still need to include it
111:22 - and the way i'm going to do that i'm
111:24 - going to go to the layout one and
111:26 - instead of looking for the layout css
111:28 - now of course i'm going to go with
111:29 - import and then in the assets folder css
111:34 - and again the file name is
111:36 - main css and the moment you save notice
111:39 - right away we have the styles
111:42 - now i also prefer using normalized css
111:46 - in my project keep in mind this is
111:48 - nothing to do with gatsby it is just a
111:51 - thing that i like to use now if you're
111:53 - not familiar with normalize
111:55 - effectively it preserves useful defaults
111:58 - and tries to normalize the styles across
112:01 - the browsers basically it gives us a
112:04 - safe starting point
112:05 - and if you're familiar with css reset it
112:08 - is just a nicer version of this one you
112:11 - probably have seen this one margin 0
112:14 - padding and then zero and then box
112:17 - sizing border box normalize just uses
112:20 - way more complicated setup than that so
112:24 - i'll remove this dummy code and if you
112:27 - want to use normalized just quickly go
112:29 - to
112:30 - normalize css now you can click on
112:34 - download and you're going to get entire
112:36 - css code and you can create a new file
112:40 - that is definitely an option and then
112:42 - copy and paste whatever code you have
112:45 - over here or you can use the npm module
112:49 - which is going to be in my case so i'm
112:51 - just going to copy this line of code
112:53 - i'm going to navigate back to my project
112:55 - stop everything clear the console copy
112:57 - and paste install normal icss again this
113:01 - is the case where i don't need to set up
113:03 - anything in the gatsby config i don't
113:06 - need to set it up as a plugin because
113:08 - this is not a gadget building
113:10 - effectively this is a reacting and now
113:13 - of course i just need to navigate to my
113:16 - layout and
113:18 - before i import main css i'll also
113:21 - import my normalize so in here i go with
113:24 - import and then i look for normalized
113:28 - and css that's all we have to do and the
113:31 - moment i import my normalize as well i'm
113:34 - just going to restart the server
113:37 - and of course normalize has been added
113:39 - to our project and once that is out of
113:42 - the way now of course we can move on to
113:44 - the next step
113:45 - beautiful once the styling is in place
113:48 - now let's knock out some components and
113:51 - we'll start with the basic ones so the
113:52 - ones that don't have any queries or
113:55 - images and once we have more knowledge
113:57 - about gatsby
113:58 - then we'll complete the complicated ones
114:01 - as well
114:02 - and i guess our footer can be a great
114:05 - starting point
114:06 - so if you take a look at the complete
114:08 - application of course you can see the
114:10 - footer and this is going to be our first
114:14 - component
114:15 - and i'm going to navigate to the footer
114:17 - that's my component and at the moment i
114:20 - just have this footer tag with a heading
114:23 - 2 and instead i'm going to use the class
114:27 - so i'm going to attach the class that is
114:28 - coming from my global css class name is
114:32 - page footer and then as far as the
114:34 - return there's going to be a paragraph
114:37 - and first i'm going to use this html
114:39 - entity where i do want to have this copy
114:42 - one and once i save i have my black
114:45 - footer as well as the copyright symbol
114:49 - and then after that we're going to go
114:50 - with date now first i'll hard code this
114:52 - and then in a second i'll show you how
114:54 - we can make this dynamic
114:56 - then we have a span and a span we'll
114:59 - simply write the name of the site
115:01 - so in my case
115:03 - that is going to be
115:04 - simpler recipes
115:06 - then right next to the span
115:08 - we are going to have a text and
115:11 - text is going to be following built
115:13 - with and why don't we use the href so
115:17 - why don't we use the simple link element
115:20 - because i want this link to navigate to
115:22 - external resource more specifically get
115:24 - adsb site so let me go back here i'm
115:27 - going to go back to the main site and
115:30 - then i'll just copy and paste the url
115:33 - here in the href and then i'll simply
115:36 - place a text and i'll simply write
115:38 - gatsby we save it
115:40 - that's our look and then the only thing
115:43 - that is actually missing is the dynamic
115:46 - year now since we know that we are of
115:49 - course
115:50 - working in the jsx in order to go back
115:53 - to the javascript plan we just need to
115:55 - set up the curly braces and then we can
115:57 - just use a javascript date we can go
115:59 - with new date so
116:02 - that gets us the date and then we can go
116:04 - with get full year which is a method
116:06 - that of course gets us a full year and
116:09 - that way we don't need to come back
116:11 - every year and update the hard-coded
116:14 - value will always display the correct
116:17 - current year as far as the css if you're
116:21 - interested
116:22 - in styles that i set up just navigate to
116:25 - main css and use the shortcut command f
116:29 - and then just type whatever class name
116:30 - so in this case of course you have page
116:32 - footer so these are all the styles that
116:35 - i applied to the footer and the setup
116:38 - for next component is going to be the
116:40 - same we're basically we'll be working on
116:42 - our return
116:43 - and we'll just add classes so that way
116:46 - we can save some time on typing out the
116:49 - css and lastly i just want to mention
116:51 - that the site doesn't look exactly the
116:53 - same as the complete one because of
116:55 - course we need to work on the other
116:57 - components as well so eventually as the
117:00 - footer will be all the way at the bottom
117:02 - and it's not going to be hanging out by
117:04 - the homepage but we just need to add
117:06 - more components and add
117:08 - more css and then we won't have those
117:11 - issues and once the footer is in place
117:14 - our next step is going to be
117:17 - our error page so let me navigate in the
117:20 - complete one and there it is so place a
117:23 - 404 some text and we'll be in good shape
117:28 - so first i'm going to navigate back i'm
117:30 - going to close all the files and then
117:33 - i'll open up the 404 then i'm going to
117:35 - close the sidebar and i'm also gonna
117:38 - remove the finder and then we'll still
117:40 - have a layout but we'll have a different
117:43 - structure where there's going to be a
117:45 - main tag with a class name of error
117:47 - and page and then inside of this main
117:50 - let's place a selection and then instead
117:52 - of the section we're going to have a
117:54 - heading 1 with 404
117:56 - and then also a heading 3 page
118:00 - not found that's it we save this one and
118:03 - now of course we want to test it out so
118:05 - in the browser let's navigate to the
118:07 - error like so now of course we don't
118:10 - have the page for that so then we open
118:12 - this up and of course we have 404 page
118:16 - not found awesome that concludes the
118:18 - error page all right and our next step
118:21 - is going to be a contact page and
118:23 - basically here we have text on the left
118:26 - hand side
118:27 - and then a working form on the right
118:29 - hand side
118:30 - now for the time being we'll just set up
118:32 - to return and eventually we will add the
118:37 - service that takes care of the form
118:39 - submissions but for time being let's
118:42 - just not worry about form submissions
118:44 - and just set up the return now as far as
118:47 - this component we'll work on this one
118:49 - later because here we're fetching
118:51 - data from contentful and in fact we are
118:55 - reusing this component all throughout
118:57 - our application if you take a look at
118:59 - the above it's the same component it's
119:02 - actually the same component in recipes
119:04 - now i know there's more recipes right
119:05 - now but of course we will make our
119:08 - component flexible where we just pass in
119:11 - the data and then the component displays
119:14 - those recipes same one is used in home
119:17 - here as well as the tags so if i go to a
119:21 - specific tag this is the same component
119:23 - again less data but same component so
119:26 - once we create that component once we
119:27 - understand how we can fetch data from
119:30 - the headless cms
119:32 - then of course we'll add it to the
119:34 - contact page as well so let's navigate
119:37 - back and i'll open up my sidebar
119:40 - and of course i'm looking for the
119:41 - contact page
119:42 - and then in contact inside of the layout
119:45 - i just want to place a main first
119:48 - and we're going to add a class name of
119:50 - page like so and then inside of the main
119:53 - we have a section with a class of
119:56 - contact page contact page and then
119:59 - inside of this section we have those two
120:01 - articles so one is going to be a form
120:04 - and the second one is just a text so i'm
120:08 - gonna go with heading three and in order
120:10 - to speed this up i'm just going to copy
120:11 - this i'm not going to write it now if
120:13 - you're interested on where i'm getting
120:15 - this text my preference
120:18 - is using hipster ipsum
120:20 - and the site for that is ipsum
120:24 - and then you come here and you just say
120:26 - how many paragraphs you want in my case
120:28 - of course i'm gonna go with five
120:30 - and then if you want you can start with
120:32 - i'm baby if not then of course you can
120:34 - just unclick it and then you bear me and
120:38 - of course there is this is the text
120:40 - again in order to speed this up i'll
120:42 - simply copy and paste the values from
120:45 - the complete page so that way you don't
120:47 - have to watch me type out the text so
120:49 - this is going to be my heading and then
120:52 - i'll have three paragraphs so
120:53 - essentially three paragraphs one after
120:56 - another and
120:58 - i have this one as well
121:00 - and then i have the third one right so
121:02 - copy and paste
121:04 - and then the sucker as well
121:07 - of course i have my heading as well as
121:09 - three paragraphs now i said that i'm
121:11 - going to add two articles and for some
121:13 - reason i skipped on that one so let me
121:16 - add an article i'll add a class name
121:18 - here and i'll say contact and then
121:21 - hyphen info and now let's place the
121:24 - headings as well as the paragraphs
121:27 - inside of this article my bad
121:29 - let's do it and once we save then of
121:32 - course i'll create another article and
121:34 - in this case there's going to be no
121:36 - class and then inside of the article
121:39 - we're going to go with form tags and
121:42 - then we're looking for two classes form
121:45 - and contact form
121:47 - and then i'm going to remove the action
121:49 - because we'll work on this one later
121:51 - we're not worried about it right now and
121:54 - then we have a form roll and instead of
121:57 - the form row we'll have a label and the
121:59 - input and effectively we'll have three
122:02 - four rows and i said i need to fix this
122:04 - bug this should say email and also of
122:07 - course we'll have the submit button as
122:09 - well so let's navigate back and then
122:11 - like i said
122:12 - for every input there's going to be a
122:15 - form row and then inside of this div
122:17 - there is going to be a label so we're
122:19 - going to go with label and as far as the
122:22 - html4 what's going to be name because of
122:25 - course the id
122:26 - on my name input is going to be named so
122:29 - say your name and then input now type in
122:32 - this case is going to be text and then
122:34 - we'll have name is equal to name and
122:37 - then id is also equal to name and once i
122:40 - save that's our first input
122:43 - and in order to speed this up i'll copy
122:46 - and paste our entire div and then i'm
122:48 - looking for the name and i just want to
122:50 - change it to email
122:52 - so i'll use command d again to get all
122:54 - the instances
122:55 - of this one and i'll change it around to
122:58 - email now there's one bug this shouldn't
123:01 - be email should be name so let's save it
123:04 - now of course we have the second one
123:06 - and the third one will be our message
123:09 - and that is going to be a text area so
123:11 - this is not going to be the case where
123:12 - i'll copy and paste i'll simply say form
123:15 - bro and then instead of this form row
123:17 - let's add another label now this is
123:19 - going to be for the message
123:21 - so let's write the text message as well
123:24 - and then right next to the label let's
123:27 - just go with our text area
123:29 - and i did already set up the css
123:32 - so we only need name so i'm going to go
123:35 - with message and then the id
123:37 - also message but as far as the columns
123:40 - and rows
123:41 - that's controlled by the css so i'll
123:43 - just remove it and then like i said
123:45 - eventually we also want a submit button
123:47 - so we just go with button
123:49 - and submit now i do want to add some
123:52 - classes here and the class names are btn
123:55 - and block and then instead of the button
123:58 - write whatever you want so in my case
124:00 - i'm going to go with submit so once we
124:03 - save that is our contact form so let me
124:06 - go here and check it out so that's my
124:09 - home page of course i have the contact
124:11 - page okay awesome
124:12 - as well as the error page so let's see
124:15 - this sucker here as well and of course
124:18 - that's my custom one and yes and with
124:20 - this in place i think we can tackle a
124:24 - bit harder component and that is going
124:26 - to be our navbar nice congrats on
124:29 - completing our first three components i
124:31 - think we're in good shape and we have
124:34 - finally arrived at the navbar component
124:37 - now before we start typing away we do
124:39 - need to get some assets because if you
124:42 - take a look at the navbar there is a
124:44 - logo so there is going to be a imaging
124:47 - nav bar as well as on a small screen we
124:50 - have the button and then instead of the
124:52 - button there's actually a icon
124:54 - now for my assets i'm going to get them
124:57 - from the complete project because i
124:59 - already have the logo of course and when
125:02 - it comes to icons i prefer using react
125:05 - icons but you don't have to if you have
125:08 - your own assets if you have your own
125:10 - logo
125:11 - as well as you have a preference for
125:13 - icons
125:14 - you can definitely use your own assets
125:18 - nothing stops you from doing that now
125:20 - the only thing yeah you might need to
125:22 - change some css around where maybe your
125:25 - i don't know logo is bigger or maybe
125:27 - your icon is smaller and something along
125:30 - those lines and as far as getting the
125:32 - assets simply navigate to complete
125:35 - project so again i'm going to go to my
125:37 - github i'm looking for gatsby
125:40 - version 3 tutorial recipes
125:44 - and then at this point i'm just going to
125:46 - get the whole project so i'm going to
125:49 - clone it and then in the project i'm
125:51 - looking for the asset folder so i'm
125:54 - going to navigate back
125:55 - and i said i actually don't need this
125:57 - one open
125:58 - because once in a while it kind of opens
126:00 - up the window that's a side note but
126:03 - while you're recording it's just the
126:04 - email pops up so we're going to go with
126:07 - cd and stuff like so git clone
126:10 - and i'm just going to clone it here so
126:12 - that's my recipes and as a quick sign
126:15 - note it is actually a working project so
126:19 - if you want you can open up a new window
126:21 - and just drag and drop and then i
126:24 - purposely
126:25 - left all my credentials as far as the
126:28 - headless cms because that way you can
126:30 - definitely see that the project works so
126:33 - first you just need to run npm install
126:36 - and the second one will be gadsb develop
126:39 - now keep in mind that it will spin up
126:41 - the dev server on localhost 8000. so of
126:44 - course it's going to ask for a different
126:47 - port so let's spin this up
126:49 - while i'm installing dependencies i'll
126:52 - simply
126:53 - go to the project here and then in the
126:56 - source i'm looking for this whole thing
126:58 - so i have the assets i have css i have
127:01 - some data which we're going to use a
127:02 - little bit later and i have the images
127:05 - so i already have the css folder so
127:07 - simply take these two folders and i'll
127:10 - just copy and paste and set them up in
127:13 - my tutorial so in here i'm going to go
127:15 - back to the source i'm going to go back
127:17 - to the assets i'll zoom in so you can
127:19 - see better and i'll just copy and paste
127:21 - and now i have the data again something
127:23 - we'll use later and then the images so
127:26 - notice this is my logo svg and then i
127:29 - have some images that we're going to use
127:32 - later as well as a quick side note as
127:35 - you can see it's a extremely basic logo
127:38 - and yep notice here it says can i use a
127:41 - different port and of course i'll say
127:44 - yes and back to the logo like i said it
127:46 - is extremely basic logo that i just made
127:49 - in figma i've been getting questions how
127:51 - you can make such image i just went to
127:54 - figma and just typed out the text and
127:56 - added different fonts and colors and all
127:59 - that that's it that's all i did and as
128:02 - far as the icons i prefer using react
128:05 - icons but again this is nothing to do
128:08 - with gatsby that's just my preference
128:10 - regardless whether it is a gatsby
128:12 - project or not and i simply like them
128:14 - because they have tremendous amount of
128:18 - icons
128:19 - and you actually import them as a react
128:22 - component and what that means that
128:24 - you're going to add a class you can have
128:26 - all kinds of effects and it's straight
128:29 - out of the box so you don't have to do
128:30 - anything and you simply install it as a
128:33 - dependency so again the command is npm
128:36 - install react icons another site is a
128:38 - react hyphen icons github io
128:41 - and what's really cool that you can
128:44 - basically search for the icon so for
128:46 - example if you want to have a person
128:48 - icon use that person and notice how you
128:50 - have
128:51 - all of these options and the way this
128:54 - index works
128:55 - you install of course which we're going
128:56 - to do in a second
128:58 - then you import the icon so that's going
129:01 - to be the name but then you need to be
129:03 - specific from which library because
129:05 - notice these are all the libraries they
129:07 - use so you import the icon you
129:10 - specifically say which library this is
129:11 - going to be from and then you just stuck
129:14 - it in your code and everything works i
129:17 - mean it's as easy as it gets now they do
129:20 - show two installs
129:22 - one straight up react icons and then the
129:24 - second one with all the files
129:27 - but i don't think we'll run into this
129:29 - issue since we literally need four icons
129:32 - and therefore i'm just gonna go with a
129:34 - first option so copy and paste this
129:37 - command of course you can actually copy
129:39 - here to the clipboard as well then
129:41 - navigate back to your project stop the
129:44 - server copy and paste again we don't
129:46 - need to do anything in the gatsby config
129:50 - and if you want to take a look how it
129:52 - works let's just go back to the navbar
129:55 - and i'll show you which icon we're going
129:58 - to use so now of course we need to spin
130:00 - up the dev server let's say npm start
130:03 - and then we're looking for import and
130:05 - then the icon name is f i
130:09 - and then align
130:10 - and justify
130:12 - justify and this is coming from react
130:15 - icons that's the main library and then
130:18 - specifically the icon library is this
130:21 - one the fi and like i said it is a
130:24 - component so i can simply stick it in my
130:26 - return and i'm going to be in good shape
130:28 - so we just go here with f i online
130:31 - justify and then once i save
130:34 - and probably i'll have to refresh as
130:36 - well
130:37 - there it is that's my icon and again
130:39 - what's really cool it is a react
130:41 - component so if you want you can take a
130:43 - look at the source code and you'll see
130:45 - that we're getting a svg and what's also
130:49 - really cool is that if you want you can
130:51 - for example add a class and then style
130:54 - it and all that cool stuff so again a
130:57 - very very cool library that i use not
130:59 - only in gatsby projects because it's
131:02 - very easy to get up and running it has
131:04 - tons and tons of options for the icons
131:07 - and at the end of the day they are exact
131:09 - components so working with them is
131:12 - really easy and finally let's just go
131:15 - back to our localhost i believe it's
131:17 - going to be 8001 right here and i'll
131:21 - show you that of course you can have a
131:23 - complete project so
131:25 - 8001
131:26 - and there it is that's the complete site
131:29 - so
131:30 - if you ever
131:31 - want to compare your code to mine
131:34 - just get the complete project and you're
131:37 - going to be in good shape
131:39 - all right and our last simple component
131:41 - is going to be a navbar component but
131:44 - since it has toggle functionality we'll
131:46 - split this up into videos first i want
131:49 - you to navigate to navbar.js and let's
131:53 - just start from the scratch so remove
131:56 - everything and we're going to return a
131:59 - nav element then we want to right away
132:01 - add the class so go with classname and
132:04 - it's going to be a nap bar then inside
132:07 - of the nav we're going to have a div
132:09 - with a class of nav center and then
132:12 - instead of this nav center div we're
132:15 - going to have two more we're going to
132:16 - have nav header 1 so this is where the
132:19 - image as well as the button with icon is
132:22 - going to sit and then right next to it
132:24 - we're gonna go with nav links and we'll
132:27 - add a show links class as well so
132:29 - there's another div with a class of nav
132:31 - links and for the time being since i
132:34 - want to showcase how the links are going
132:36 - to look like i'll also add this show
132:39 - links class now eventually this is the
132:40 - class that we're going to use to toggle
132:43 - our links on a small screen so we have
132:46 - the
132:46 - studios and let's start with a header
132:49 - and in a header the first thing that i
132:51 - want to do is add that image and as far
132:54 - as this logo we'll do the traditional
132:57 - react way just so you understand that it
133:00 - is definitely an option and then in the
133:02 - following videos of course we'll cover
133:04 - how the gadgets be image works and what
133:06 - kind of goodies we get when we use gas
133:09 - bit image for time being we'll just go
133:12 - the traditional react route where we
133:14 - first need to get the image so we need
133:16 - to import it and then just set it up in
133:18 - a source again
133:20 - a straightforward react way so we go
133:23 - with import then we need to come up with
133:25 - the name so in my case it's going to be
133:26 - a logo and then we're looking in the
133:28 - assets as well as images and then
133:30 - finally we have logo svg again it's not
133:33 - a javascript file so we need to provide
133:35 - a full path and then inside of the snap
133:37 - header i want to place my logo now we
133:40 - can just place the logo
133:42 - directly or we can place it in a link
133:46 - and just to showcase that we're not
133:48 - limited to setting up links with text
133:50 - that we can also set up a link with
133:54 - images if i navigate to tags and notice
133:57 - if i click on my logo i navigate back
134:00 - home so in order to do that we simply
134:03 - need to go with link component then we
134:05 - need to pass in the two prop so where
134:08 - we're going to navigate and that's it we
134:10 - just need to place our link so i'm going
134:12 - to go with img and then like i said for
134:14 - the source let's place in our variable
134:17 - so our logo and then as far as the
134:19 - alternative will just say simply recipes
134:23 - let's save that one that should do it
134:26 - now of course we have our header and
134:29 - then right next to my logo i want to
134:32 - have my button so i'm going to go with
134:34 - button and then inside of this button i
134:36 - want to place my icon so i'm going to go
134:39 - with a icon knife again align justify
134:42 - and as far as the class is i'm just
134:43 - going to go with class name
134:45 - and we're going to go with nav
134:48 - btn now eventually there's going to be
134:50 - also on click but
134:53 - not for time being so that should do it
134:55 - for the header once we save notice this
134:58 - is going to be our logo and if i click
135:01 - notice how i navigate back home and then
135:04 - also i have my button and now of course
135:07 - i want to set up my links now as far as
135:10 - links you can place them in our list if
135:13 - you want but the way i set up the css
135:15 - and everything i simply dump those links
135:18 - in this dev so here let's start with a
135:21 - link component and to prop and we're
135:24 - going to have a forward slash and then
135:26 - as far as the text let's go with home
135:29 - let's save it and then once i have my
135:31 - home link in place
135:33 - now i just want to add few more
135:35 - attributes first of all i want to add a
135:37 - class name so we get the styling so this
135:40 - is coming from my css i'm going to go
135:42 - with nav link
135:44 - and then i also want to add a attribute
135:46 - by the name of activeclassname so this
135:50 - is coming from the gatsby and what it's
135:52 - simply doing
135:53 - notice how once we navigate to the page
135:56 - well the link that represents that page
135:59 - just changes the color now again you can
136:02 - set up whatever css you want but
136:04 - basically gatsby provides this
136:07 - active class name attribute and then
136:10 - whatever class name you pass it in it's
136:12 - going to be applied to the link that
136:14 - represents the page so just to showcase
136:17 - if again
136:18 - you navigate to
136:20 - i believe which one was it main css
136:22 - sorry got lost a little bit there if you
136:25 - go to active and then hyphen link so
136:27 - this is going to be the class that we
136:28 - had
136:29 - notice the css again sky is the limit
136:32 - you can add whatever css you want but
136:34 - basically gatsby behind the scenes the
136:36 - moment you'll navigate to that specific
136:39 - page if you add the active class name
136:42 - the active link it will dynamically add
136:45 - this class to the link so here whatever
136:47 - you set up is going to be applied to the
136:50 - link so now let me go back i'll close
136:52 - the sidebar and then i'm going to go
136:54 - with active class name that's the prop
136:58 - that you need to pass it here and then
137:00 - we're looking for active
137:02 - and then link and once i save notice how
137:05 - it changes the color
137:07 - now eventually there's also going to be
137:09 - on click
137:10 - similar to what we're going to have on a
137:13 - button but for the time being why don't
137:16 - we just copy and paste the links and
137:18 - we'll worry about the functionality in
137:20 - next video so now just copy and paste
137:23 - and the first one
137:24 - will be to the recipes so we just need
137:27 - to change the two prop of course and
137:30 - then the same goes here for the value we
137:32 - go with recipes and notice how this one
137:35 - doesn't have the color but the moment we
137:37 - navigate the recipes of course
137:39 - now we have that color applied to this
137:42 - specific link
137:43 - then we'll copy and paste
137:46 - two more times i believe so we have tags
137:49 - and about
137:50 - and the contact one is going to be a bit
137:52 - different because if you take a look at
137:54 - the completed project
137:56 - it has a different styling so for time
137:59 - being let's just copy and paste two
138:00 - times
138:01 - so we have one
138:03 - two homepage then the second one we have
138:07 - i believe
138:08 - it was what it was for the recipes of
138:10 - course and then we have one for about
138:14 - and then we have tags as well
138:16 - so let's scroll up so we have home
138:18 - recipes
138:20 - then let's add those tags
138:22 - and then of course
138:24 - the path also is going to be to the tags
138:26 - and then eventually why don't we set up
138:29 - here about
138:30 - and then as far as the text it is also
138:32 - going to be about
138:34 - so once we save there it is we have more
138:36 - links now
138:37 - and everything looks pretty cool and now
138:40 - of course we just need to add that
138:42 - contact link as well
138:43 - and i want to place that content link in
138:45 - a div and it's going to have class of
138:48 - nav link as well as contact link
138:51 - and again this is just for different
138:52 - styling and then we're going to have a
138:55 - link
138:56 - and then again to prop so this will
138:59 - still direct you to the contact page so
139:01 - we're going to go to
139:03 - and then contact now i do want to add a
139:05 - class name of btn and then eventually
139:09 - again there's going to be on click but
139:12 - we're not going to worry about it right
139:13 - now and then let's just add a contact
139:17 - and that should do it now we have a nice
139:20 - looking navbar and if you want to test
139:22 - it out on a bigger screen
139:24 - let's just refresh again custom page
139:26 - okay awesome that's our error one and
139:30 - this is the look on a small screen again
139:32 - we right away showcase them eventually
139:34 - we'll have the toggle functionality
139:36 - and then once the screen size gets
139:39 - bigger now using css we'll hide the
139:42 - button and we'll also change the layout
139:45 - of our link so that's the look on a
139:47 - small screen without the toggle and then
139:50 - this is going to be a look on a big
139:52 - screen
139:52 - one last thing that i like to mention
139:55 - normally
139:56 - in my project i don't like hard-coding
139:58 - my links so normally i set them up as
140:02 - some kind of array
140:03 - in a different file and then just
140:05 - iterate over however for our first
140:08 - project i thought that's going to be an
140:09 - overkill so don't worry we will do that
140:12 - in a later project but in this project i
140:14 - just thought that it's going to be a bit
140:16 - easier for all of us if we hardcode them
140:19 - again biggest takeaway is this is just a
140:22 - straight up react approach where we
140:24 - import a image and then we set up the
140:27 - source for the image tag and then as far
140:31 - as the icon i just placed inside of the
140:34 - button all right we're done with the
140:36 - simple nav bar return so now of course
140:38 - let's set up the functionality and if
140:41 - you take a look at the main css you'll
140:43 - notice that for the nav links by default
140:46 - they're actually hidden so the height is
140:48 - zero and our flow is set in and only if
140:50 - we have this class of show links then we
140:53 - add a height and of course at the moment
140:56 - we're doing that manually so for example
140:59 - if i remove show links we're not going
141:01 - to see the links but if i add them back
141:04 - up and of course we can see them again
141:07 - now the idea is that we'll set up a
141:09 - state value here using use state and
141:11 - then we'll just toggle it so based on
141:14 - that value we will either show links or
141:16 - hide the links and before we continue
141:18 - let me just stress something i fully
141:20 - aware that this is technically cheating
141:22 - because i am hard coding the height
141:25 - meaning if we'll change the amount of
141:27 - links we have of course css will also be
141:30 - affected now if you took my react course
141:33 - you probably worked on the projects and
141:36 - you know that in one of the projects we
141:38 - actually covered how we can make this
141:40 - dynamic however
141:41 - for the gatsby tutorial i thought that
141:43 - it is going to be an overkill so i just
141:46 - thought that this is going to be a
141:48 - easier setup and back in navbar first i
141:52 - want to get a use state hook from react
141:55 - so we're going to go with use state and
141:57 - then i just want to set up that toggle
141:59 - value and i'm going to go with const and
142:02 - i'm just going to go with show and set
142:05 - show and that will be equal to use state
142:08 - and then by default it is going to be
142:10 - false and now of course i need to scroll
142:12 - down where i have the now links and i
142:14 - need to make this dynamic so instead of
142:17 - adding both classes right away i'm going
142:19 - to go back to the javascript plan and
142:21 - i'll say if show is true and as you can
142:24 - see i'm setting up the ternary operator
142:27 - i'm going to go with nav links as well
142:29 - as showings
142:31 - so if the value is true then i have both
142:34 - classes if not then i'm just going to
142:36 - have the nav links class so now links
142:39 - class over here and then once i save
142:42 - course links are hidden so now our job
142:45 - is of course to add on clicks on the
142:48 - button as well as the links and i'll
142:50 - show you why i want to add on the links
142:53 - as well so here let's go with on click
142:56 - click now we do need to set up of course
142:58 - here the arrow function otherwise it's
143:01 - going to run instantly so i set up my
143:03 - arrow function and we go with set show
143:06 - and then whatever is the value in a
143:08 - state we'll just pass in the opposite so
143:11 - i take my function and then whatever is
143:14 - the current show value i just pass in
143:16 - the opposite and that way we get the
143:18 - toggle functionality so now of course
143:20 - once i click check it out now of course
143:23 - we can see the links so we check the
143:25 - state value and if it is true we're
143:27 - gonna have both classes if not then
143:30 - there's only one now why do i want to
143:32 - add on click on my links as well well
143:35 - because on a small screen what i want is
143:38 - the moment i click on one of the links
143:40 - so basically the moment i navigate to
143:43 - one of these pages i just want to hide
143:45 - those links i think that's a better
143:47 - setup so here we simply need to copy our
143:50 - on click
143:51 - keep on scrolling keep on scrolling and
143:53 - then this is going to be our first link
143:55 - the home one and then we go set show but
143:59 - in this case i don't want to pass in the
144:01 - opposite i simply don't want to pass in
144:03 - the false because i know that
144:05 - i can only click on those links if the
144:07 - navbar is already open basically if i
144:10 - can see those links so now of course we
144:13 - grab this value
144:14 - and just copy and paste so one by one we
144:17 - just add it to all the links now
144:19 - technically if you don't want that
144:21 - functionality you don't have to add the
144:23 - same click but in my case i'm going to
144:26 - do that so let's keep on scrolling and
144:28 - then all the way to the bottom we have
144:29 - the contact ones as well copy and paste
144:32 - and we're in good shape where we also
144:35 - have toggle functionality so now once i
144:37 - click on tags check it out not only i
144:40 - navigate to the text page but i also
144:42 - hide the links and then if we take a
144:45 - look on a big screen notice this is
144:47 - going to be our navbar of course notice
144:50 - how we're adding this class dynamically
144:53 - using the gatsby goodies and then once
144:56 - we go to the small screen of course
144:58 - there is our button and then like i said
145:00 - if you want to take a look at css you
145:02 - can check it out how i'm hiding right
145:04 - away button on a big screen and it only
145:07 - appears on a small screen that should do
145:10 - it for navbar and now of course we can
145:12 - start talking about images in gatsby all
145:16 - right we're done with the simple
145:17 - components and next i want to cover how
145:19 - gadsby handles images
145:21 - and if we're being honest in a typical
145:24 - web project
145:25 - images can be a real pain and oftentimes
145:28 - are solely responsible for slow load
145:30 - times and bad user experience but fear
145:34 - not
145:35 - gasby is here to save the day and before
145:37 - we start typing away let me just
145:39 - demonstrate some of the goodies gatsby
145:41 - offers straight out of the box so i'm
145:44 - currently staring at the complete
145:46 - project
145:47 - and i'm going to go to the dev tools and
145:49 - more specifically the network tab and
145:52 - you know what i'm gonna make my sites
145:54 - lower and i'm gonna go with 3g so i'll
145:58 - refresh and you'll notice something
146:00 - pretty pretty cool where check it out
146:03 - get adsb actually preserves the size of
146:07 - the image
146:08 - so you don't get that annoying jump
146:10 - because you know that if browsers
146:12 - waiting for the image but there's some
146:14 - content underneath it then the content
146:17 - first is on the top and then when the
146:19 - image comes in then of course everything
146:22 - is pushed down because now of course the
146:25 - space is taken by the image so that's
146:27 - number one number two
146:30 - notice the nice placeholder that i have
146:33 - 40 images so i have this nice svg
146:35 - placeholder pattern and then while the
146:38 - image is loading the user sees the
146:40 - placeholder
146:41 - but then the moment image loads then of
146:44 - course the image is displayed
146:46 - then if we take a look at the elements
146:49 - we'll see something even more nifty so
146:52 - i'm going to go to the elements and
146:54 - we're going to take a look at the page
146:57 - and then more specifically section
147:00 - recipes container so i'm looking here
147:02 - and then recipes list so i just want to
147:04 - showcase
147:05 - these three images so
147:07 - this row and here you can see that okay
147:11 - all of them are links that's fine
147:13 - but
147:14 - we also can see this div
147:16 - now this is going to be a wrapper div so
147:18 - effectively when we'll work with gatsby
147:21 - image plugin that's the plugin we're
147:23 - about to use
147:24 - it wraps our images in this wrapper and
147:27 - then if we inspect this wrapper even
147:30 - more we can notice the picture tag
147:33 - so we have this picture element and also
147:36 - we have a source element and more
147:38 - specifically source set attribute now if
147:41 - you're not familiar with source elements
147:44 - in short they provide different sources
147:47 - for the browser to choose from
147:50 - so gatsby created multiple sizes of the
147:53 - same image we can see it over here again
147:55 - in the source set notice this is the
147:57 - same image but gatsby provided multiple
148:00 - sizes
148:01 - then browser pricks whichever size makes
148:04 - the most sense and a result we are not
148:06 - forcing a huge images on smaller screens
148:09 - so think smaller devices and what's
148:12 - super super super nifty we get all of
148:15 - these and other goodies with very little
148:18 - config we simply pass a path to the
148:21 - gatsby component and we're good to go
148:24 - yes that's how easy it is and lastly i
148:27 - just want to mention if you're
148:28 - interested in learning more about
148:31 - responsive images essentially all this
148:34 - gibberish that is written here
148:36 - i highly suggest this resource so go to
148:39 - your search engine just type responsive
148:41 - image mdn then follow this link and in
148:45 - this well written article you'll find
148:47 - about all the benefits
148:49 - that the picture element the source
148:52 - element as well as source set feature
148:54 - provide
148:55 - okay in next video we're going to
148:57 - install gatsby plugin image but before
148:59 - we do that i want to create a little
149:01 - sandbox where i can demonstrate some of
149:03 - the features side by side now this is
149:06 - optional
149:07 - eventually it's not going to be part of
149:09 - our project and i'm simply setting this
149:12 - up
149:13 - so later if you ever need to you can go
149:16 - back and find the reference if you don't
149:19 - feel like setting up the examples
149:21 - component just kick back relax and watch
149:24 - me struggle and since i don't want to
149:26 - over populate our current project what
149:29 - i'm gonna do is just open up my sidebar
149:33 - and then in the examples i'll create
149:35 - another one i'll create the
149:37 - images component and then i'll render it
149:40 - i guess in home page because it's just
149:43 - going to be easier as far as navigating
149:45 - around my project and then once we're
149:48 - done setting up the examples of course
149:50 - i'll just remove it from the homepage
149:52 - but the images component of course is
149:55 - going to stay here so if you ever need
149:57 - to you can go back
149:59 - and take a look at the reference so
150:02 - in the examples like i said new file
150:05 - let me zoom in and i'll call this images
150:08 - js
150:10 - all right awesome then i'll create a new
150:12 - component of course and it's going to be
150:14 - called images
150:16 - and for starters i guess i'm just going
150:19 - to get styled components because i'll
150:21 - add a little bit of styling over here so
150:23 - i'm going to go with import styled from
150:26 - uh let me close the sidebar and of
150:28 - course style components i will call this
150:31 - wrappers a const
150:33 - wrapper is equal to styled and again it
150:36 - doesn't really matter but i'm going to
150:38 - go with section here
150:40 - and then let's just add this wrapper
150:42 - like so and then let's just add a text
150:45 - with i don't know heading 2
150:48 - and let's just say gatsby
150:51 - image let's say this let's just test it
150:53 - out whether we can see it in a home page
150:56 - so i'm going to navigate of course to my
150:58 - index.js i'm looking for import one for
151:01 - images from and you guessed it of course
151:04 - we go to examples then we go to images
151:07 - folder
151:08 - and
151:09 - right below or above doesn't really
151:12 - matter in this case
151:13 - we're just gonna go with our images
151:16 - component okay we save it and then of
151:19 - course i have my gatsby images we are in
151:22 - good shape but i'm gonna do something a
151:25 - bit extra where i'm going to go to the
151:28 - pixels to one of the awesome websites
151:30 - you can get nice images and i'm just
151:33 - going to download a massive image again
151:37 - this is optional you don't have to do
151:38 - that but i just want to demonstrate how
151:40 - the typical project
151:43 - is going to look like so let's go back
151:45 - and
151:46 - i'm going to open up a new tab i'll say
151:48 - pixels
151:49 - and then once it finally opens for some
151:52 - reason it just decided to quit on me i
151:55 - guess i'm gonna go with food
151:57 - and then i'll pick any of these images
151:59 - so i'll pick the first one and i
152:01 - purposely go with original size so i
152:03 - want to get this massive image let's do
152:06 - a free download
152:08 - then i'm going to go to my downloads and
152:10 - i just need to find the sucker somewhere
152:12 - here and i'm going to call this a big
152:15 - and then
152:16 - let's just say big you can add image if
152:19 - you want but i'm just going to leave it
152:20 - as big so move it out
152:23 - and then of course i want to place it in
152:25 - my source in the assets and in the
152:28 - images so and drag and drop
152:31 - and let's just first right away check
152:33 - the size for the sucker so i'm going to
152:35 - go here and notice it is 2.5 megabytes
152:40 - that's good to know and now let's see
152:42 - how that is going to look like in
152:44 - traditional project so let me remove
152:47 - this tab i guess we won't need it
152:49 - anymore we simply go to our images
152:52 - since this is going to be our sandbox
152:54 - and i'll say import big that's the name
152:57 - and then i'm looking in the assets
153:00 - then more specifically images and then i
153:02 - go with big and i believe the extension
153:06 - was jpeg and now above the heading 2 i
153:10 - just want to display that image so i'm
153:12 - going to go here with img
153:15 - source
153:16 - and big
153:17 - and as far as the alt let's just say
153:19 - food
153:20 - and once we save of course we can see
153:23 - the image
153:24 - but just to hammer my point home
153:27 - i'm gonna go with image so i'm selecting
153:29 - all the images that i have in the
153:31 - wrapper and i'm gonna go with width
153:33 - of 200 pixels so technically using css i
153:38 - will make it smaller correct so now of
153:41 - course the size of my image is smaller
153:43 - but here's the million dollar question
153:45 - does that mean that we'll be sending
153:48 - a smaller amount of bytes over the wire
153:52 - since we know that our image is actually
153:54 - massive or we'll be still sending 2.5
153:58 - megabytes well i don't know let's test
154:00 - it out so i'm going to go to the bigger
154:02 - browser window and of course i'll
154:04 - refresh okay first we definitely see
154:06 - this jump we see that while the image is
154:09 - still loading
154:10 - we have this gatsby image underneath the
154:13 - home page but then once we're done then
154:15 - of course we push it down so that's the
154:17 - jump that i'm talking about and the
154:19 - second thing well let's see the size of
154:21 - it i'm going to go with inspect and then
154:24 - i'm going to go to network i guess i'm
154:26 - just going to right away go for images
154:28 - refresh and surprise surprise
154:31 - so even though in my css i set up my
154:34 - image to be 200 pixels
154:36 - i'm still spending 2.5 megabytes over
154:39 - the wire and i fully understand that you
154:42 - can make a reasonable argument that it's
154:44 - probably not the wisest choice to use
154:47 - these type of images to begin with with
154:50 - such sizes and i get it
154:52 - understand this is just for the
154:54 - demonstration i just want you to see
154:57 - the difference when we use gatsby image
155:01 - plugin
155:02 - beautiful once i have my image sandbox
155:05 - in place
155:06 - next i want to install gatsby image
155:09 - plugin now if you were not following
155:11 - along with the previous video
155:13 - you do have to follow along with this
155:15 - one so make sure you do install the
155:18 - plugin otherwise
155:20 - when we'll need to add the images to our
155:23 - about as well as home and setting them
155:26 - up with headless cms
155:29 - nothing is going to work and of course
155:31 - we already know where we need to go we
155:33 - need to go to gatsby site then we're
155:36 - looking for plugins but there is a major
155:41 - major catch do not do not install this
155:44 - one gadsby image because this one is
155:47 - with version 2. so when the version 3
155:50 - came out they rolled out a new plugin
155:52 - and the plugin you're looking for is
155:54 - gatsby plugin image even though this one
155:57 - has more downloads and the reason for
155:59 - that is because this was used in version
156:02 - two now on version three they rolled out
156:05 - a new plugin so bravely either search
156:08 - for it here or just click it it's going
156:11 - to be probably one of the top plugins
156:14 - and once we navigate here you can
156:16 - probably right away open up the link
156:18 - the gatsby image plugin reference so i'm
156:21 - going to open this up in a new tab we
156:23 - will use it quite extensively in
156:26 - following videos and then let's start
156:29 - with an install so i'll just copy this
156:31 - whole line of code and then i'm going to
156:33 - go over why we have that many plugins so
156:37 - let me go back to our project i'll stop
156:40 - the dev server clear everything copy and
156:43 - paste and just like with our previous
156:46 - plugin we styled components one we
156:48 - actually have multiple plugins so
156:50 - basically we get the gatsby plugin image
156:53 - okay
156:54 - then we have two
156:56 - that are providing all the goodies so we
156:58 - have plugin sharp and transformership
157:01 - and then we have one for the file system
157:04 - now we'll cover this plugin more
157:06 - extensively a bit later when we start
157:09 - setting up the queries but this plugin
157:11 - is responsible for interacting with a
157:14 - file system and this is a pattern that
157:19 - you'll see quite often where just like
157:22 - npm dependencies they have dependencies
157:25 - on their own so the same works with
157:27 - gatsby plugins effectively we have the
157:29 - main plugin where we're going to get
157:32 - our components that we're going to use
157:35 - but of course this plugin depends on
157:38 - some other ones as well so that's why we
157:40 - need to install all of them and as far
157:42 - as gets be config like i said we will
157:45 - cover the source file system
157:48 - more extensively later so that's when
157:51 - we'll actually set it up as object in
157:53 - this case you don't need to even set it
157:56 - up and that's be config you simply want
157:58 - to add plug-in image plug-in sharp and
158:01 - transformer shop so grab all of these
158:05 - suckers here one by one and notice how
158:07 - none of them are set up as object
158:10 - they're simply strings
158:12 - we navigate here and then of course we
158:14 - need to go to the gas b config like so
158:18 - and we already have plug-in style
158:21 - components okay awesome then just add a
158:23 - comma and copy and paste so let's say
158:26 - this one and now let's go with npm
158:29 - and start let's spin up our project if
158:32 - we don't have some massive red errors in
158:35 - a terminal we are in good shape and we
158:38 - have successfully installed gatsby image
158:41 - plugin nice and once the plugin is in
158:43 - place now let's take a look at our
158:45 - options so if we keep reading the plugin
158:49 - documentation
158:50 - we can see that gatsby image provides
158:54 - two components and those components are
158:57 - static image and gatsby image now gatsby
159:01 - image is used for
159:03 - dynamic images and we'll use it later
159:06 - when we fetch our data from the headless
159:10 - cms
159:10 - and the static one as the name already
159:13 - suggests is used for static images so
159:17 - basically those are the images that will
159:20 - be the same each time the component is
159:23 - used and a good example
159:25 - is our hero so this one in home page and
159:29 - the same goes for about but then when
159:32 - we'll be fetching recipes
159:35 - from the contentful will be iterating
159:38 - over our recipes and every time we'll
159:41 - call that as the image that image is
159:44 - going to be dynamic now don't worry the
159:47 - setup for both of them is extremely
159:50 - similar the only difference is that with
159:52 - gatsby image we just grab the data from
159:56 - the query something we haven't covered
159:58 - yet but as far as the customizations i
160:01 - mean the setup will be extremely
160:04 - similar so for now let's put the pen on
160:06 - the gatsby image
160:08 - let's work with a static image but i can
160:11 - guarantee you once you understand how
160:13 - static images work you'll have no
160:16 - problem switching to the gatsb1 instead
160:20 - so again let's go back
160:22 - this is the documentation and we simply
160:25 - need to import static image from gatsby
160:29 - plugin image so similar how we imported
160:31 - link from gatsby in this case we have
160:34 - gatsby image plugin or plugin image i
160:37 - guess more correctly and we're importing
160:39 - this component static image and then we
160:42 - just need to provide a path in the
160:44 - source
160:45 - and what's interesting we have two
160:47 - options
160:48 - we can either provide a local file so
160:51 - that's why under the hood it uses that
160:53 - source file system plugin that we
160:55 - covered in the last video or we can
160:58 - actually provide the url so that's also
161:02 - cool where we can provide an external
161:05 - route but again the main idea with a
161:07 - static one is the fact that the image
161:11 - will be the same each time the component
161:14 - is used so i guess the only thing that's
161:16 - left to do is take it out for test drive
161:19 - so i'll simply navigate back to my
161:22 - project again i'm working in the images
161:25 - example and then i want to import a
161:27 - component again the name is static
161:31 - and image
161:33 - and then of course it is coming from
161:35 - gatsby plugin image
161:37 - and then i'm going to delete the big one
161:40 - i don't think there's any need for it we
161:42 - just need to go with static image
161:45 - then the source prop and again we need
161:47 - to provide a path to the image so since
161:51 - i want to speed this up a little bit i'm
161:52 - just going to copy and paste again this
161:54 - points back to the same image
161:56 - and then the second thing we need to
161:58 - provide is alt prop
162:01 - and here we provide a text explanation
162:04 - of the image so we save and then check
162:07 - it out we right away get this image
162:09 - however now it is wrapped in that gatsby
162:13 - image wrapper with all those goodies so
162:16 - if you want to test it out we can
162:17 - navigate back to the big browser and i'm
162:20 - going to be in the home page and notice
162:23 - we don't get the jump we right away get
162:25 - the placeholder now we don't have the
162:26 - svg yet don't worry we'll set it up in a
162:29 - second but we already have all those
162:33 - goodies the moment we provide the path
162:36 - and if you want to see even more cool
162:38 - things than just navigate to the network
162:42 - again you're looking probably for the
162:43 - images or you can look for all and then
162:46 - just look for the image check out the
162:48 - size
162:49 - is this 2.5 megs no it's not of course
162:52 - it is much smaller so right away without
162:55 - doing any extra work just by passing the
162:58 - path into the static image component we
163:02 - are in good shape we get all these extra
163:05 - benefits and just to showcase that we
163:07 - can use also external images
163:10 - i'm gonna go to my course api site and
163:13 - essentially this is the site where i
163:16 - provide all the apis for my courses and
163:20 - i'm gonna look for the slides this is
163:21 - where i keep the external images
163:24 - and again you can choose any of them
163:27 - in my case i think i'm going to go with
163:29 - this one then copy and paste the url
163:33 - then back in the project copy and paste
163:36 - the static image so let's set up two of
163:38 - them and of course i'll provide that new
163:41 - path
163:42 - and as far as the food well it's not
163:44 - going to be food it is going to be code
163:46 - and once we save it of course we can see
163:48 - that we get our image and before we take
163:51 - a look at the various customization
163:53 - options we have
163:55 - with the static image as well as the
163:57 - gatsby image i quickly want to mention
164:00 - that there are restrictions on how we
164:02 - can use static image
164:04 - and this is the case where we're going
164:07 - to switch from the plugin docs to the
164:10 - actual documentation so just go to the
164:12 - docs and then we have to we have a
164:15 - reference guide as well as how to guide
164:18 - so in this case i'm going to look for
164:20 - the reference guide and then more
164:22 - specifically we're looking for gatsby
164:24 - plugin api and essentially it's going to
164:26 - be the same link that i opened when we
164:29 - navigated to the plugin box so it's the
164:32 - same place
164:33 - and basically keep on scrolling keep on
164:35 - scrolling these are shared props which
164:38 - we're going to cover in the next video i
164:40 - just want to show you the restrictions
164:42 - so notice where they say this does not
164:45 - work and effectively we cannot provide
164:48 - this path as a prop
164:50 - so you cannot go back to the images and
164:53 - then set up a prop where you're going to
164:55 - be getting the path and then pass it
164:57 - from the home page that does not work
165:00 - that's not how you can
165:01 - use the static image and also what we
165:04 - can do is get some kind of prop value
165:08 - because like i said in the next video we
165:11 - will cover the props and now we can use
165:13 - the perhaps to customize our image but
165:18 - as far as the values for these props
165:20 - they have to be in the same file
165:24 - so you cannot get them from somewhere
165:26 - outside so basically both
165:29 - the path to the image as well as the
165:31 - value for the props need to be set in
165:35 - the same component so you cannot just
165:37 - randomly get this value from somewhere
165:39 - else and expect that everything is going
165:42 - to work now you can add some dynamic
165:46 - features for example in here they say
165:47 - how you can calculate the height yeah
165:50 - that is a lot but notice all these
165:52 - values are still here they are still
165:55 - within the same file it's not like
165:57 - you're getting them from somewhere else
165:59 - and once we have covered restrictions
166:02 - now let's take a look at the props we
166:03 - can provide
166:04 - and how we can customize our image
166:08 - nice hopefully we're good with
166:10 - restrictions
166:12 - so now let's scroll back up
166:14 - and first let's take a look at the
166:16 - shared props and like i mentioned before
166:19 - the following props can be passed to
166:21 - both
166:22 - get the image which we're going to use a
166:24 - little bit later as well as the static
166:26 - image
166:28 - and we may also pass
166:30 - just any valid image that props that is
166:34 - also a option because at the end of the
166:37 - day there is the image element somewhere
166:40 - inside of that wrapper and then as far
166:43 - as the shared props we have alternative
166:46 - actually e is required so if you won't
166:48 - pass it there's going to be a warning
166:51 - that's just for alternative text we also
166:53 - have as
166:55 - prop
166:56 - where we can change that element if you
166:58 - remember initially when we set it up it
167:00 - was a div that wrapper but you can set
167:03 - it as a section as an article or
167:05 - whatever we have a loading one by
167:08 - default it is going to be lazy
167:11 - now if you want you can set it to eager
167:13 - as well then we have two class names one
167:17 - is going to be for the wrapper so if you
167:19 - set up class name and then i don't know
167:22 - about img
167:23 - that about img class is going to be
167:26 - added to the wrapper
167:28 - and then if you go with img class name
167:31 - prop instead then of course this class
167:33 - will be added to the image and
167:35 - effectively that just allows you to
167:37 - avoid all the hacking you simply add
167:40 - those class names and then you can
167:41 - target them from the css we can add
167:44 - inline css again this is going to be for
167:46 - the wrapper in line this is and this is
167:48 - going to be for the image then we have a
167:51 - background color if we ever want to
167:54 - which is going to be applied for the
167:55 - wrapper as well as object fit and object
167:59 - position okay hopefully they were good
168:02 - with the props and don't worry of course
168:04 - we'll use it in examples as well so i'll
168:07 - just leave it at that and let's just
168:09 - keep on scrolling and now we have image
168:12 - option and like i previously mentioned
168:14 - yes there are some differences of how we
168:17 - can pass in those options
168:20 - and it's simply because
168:21 - for the static one effectively we're
168:24 - hard coding we just set up the component
168:26 - and we pass it in we as a dynamic one
168:29 - we'll be getting that data using graphql
168:32 - and of course it will make way more
168:35 - sense once we get there
168:37 - and options itself we have a layout
168:40 - which probably is going to be the most
168:42 - important one because with this option
168:45 - we'll determine
168:47 - how the image is going to be resizing
168:49 - basically we have fixed option we have
168:52 - full width and we have constraint and as
168:56 - you can see again we have some defaults
168:58 - so the image that we currently have
169:00 - is actually constrained because that is
169:02 - the default now the only thing why
169:04 - they're so small because if you remember
169:07 - i added in a wrapper the css so that's
169:10 - why the size of them is 200
169:13 - and as far as the other ones we have
169:15 - aspect ratio
169:17 - we have width and height so of course
169:20 - you can imagine that you can control the
169:22 - width and height of the image this is
169:25 - the placeholder one remember
169:27 - the svg pattern or dominant color or
169:30 - there's also a blur option well this is
169:33 - where we can control that and by default
169:36 - it's going to be dominant color then we
169:38 - have multiple formats and of course you
169:40 - can experiment with that but in my
169:42 - experience the default setup works
169:45 - really well as well as transform options
169:48 - and then if we keep on scrolling keep on
169:51 - scrolling then notice we have the layout
169:54 - one and again this probably will be the
169:56 - most important one that's why they have
169:58 - a awesome awesome visual representation
170:02 - so notice the first one obviously is
170:04 - going to be the fixed one and that one
170:06 - stays fixed regardless of the screen
170:08 - size
170:09 - but when we take a look at the
170:11 - constrained one and full width the
170:13 - difference is following where full width
170:16 - is always going to be the size of the
170:19 - container regardless
170:21 - whether we're talking about the phone
170:22 - screen or we're talking about the
170:24 - desktop
170:25 - now with the constrained one
170:28 - yes it is going to be the size of the
170:31 - parent container however
170:33 - once the container gets bigger than the
170:36 - image then of course it will just
170:38 - maintain the original size
170:41 - now that should do it for the theory
170:43 - part
170:44 - now let's apply this knowledge in our
170:46 - sandbox
170:47 - beautiful and once we're familiar with
170:50 - our options
170:51 - now let's navigate back to the images
170:55 - and i think at this point i can just
170:57 - remove big for good
170:59 - so my big image
171:01 - and then i'll do a bit more house
171:03 - cleaning where i'm going to go with
171:05 - different image just because i want to
171:08 - show you something regarding the
171:10 - constraint layout so you know what at
171:13 - this point i'll remove everything i'll
171:15 - just set up wrap or clean and instead
171:18 - i'm going to go with static image i'm
171:20 - going to go with the source and then
171:22 - pick one of the recipes once
171:24 - so i'm going to go with recipe one but
171:27 - just go with these ones since they are
171:29 - not that big and that way we'll see
171:32 - features of the constraint layout so i'm
171:35 - going to go to source again i need to
171:36 - provide the path i'm going with assets
171:39 - here
171:39 - images and then the file name is a
171:42 - recipe hyphen one and a jpeg now as far
171:47 - as the alternative i think we can go
171:48 - back to food
171:50 - here
171:51 - and then i'll save it for time being
171:54 - okay notice if you get this technically
171:57 - error once in a while don't worry about
171:59 - it
172:00 - just close it and then refresh and of
172:02 - course we have our image
172:04 - now i want to remove this css selection
172:08 - and we're not going to use it and then
172:10 - inside of the wrapper eventually we'll
172:12 - set up a three column layout where i'll
172:15 - show you the fixed one the full width as
172:18 - well as the constraint one side by side
172:20 - for now in this video i'll just work
172:22 - with the constraint one and that's why
172:24 - i'll set up here a heading four with the
172:27 - text of constrained
172:30 - and then default so we know that that's
172:34 - the default setup so once i save check
172:36 - it out
172:37 - now of course the image is much bigger
172:40 - because we're not targeting from the css
172:43 - correct and i guess let's start adding
172:46 - those options to our static image and
172:50 - again we simply need to provide them as
172:53 - props so
172:55 - let's do it we can go with the height
172:57 - and i can say 400 and the moment i set
173:00 - it up again unfortunately there is going
173:03 - to be this tiny error there for a while
173:05 - and then we get the image so that works
173:08 - we know that we can add the height now
173:11 - if you want you can add the width as
173:13 - well
173:14 - just keep in mind when you set width and
173:16 - height for constraint you're actually
173:18 - setting max width and max type
173:21 - not fixed values
173:23 - so if you want fixed values you might as
173:25 - well go for fixed layout instead
173:29 - but yes if you want i can add 100 pixels
173:32 - here and save it now of course my image
173:35 - is going to be
173:36 - smaller like so so we refresh so now i
173:39 - have a tiny image
173:41 - that's good
173:43 - i guess i'm just going to remove it and
173:45 - then we have remember a placeholder
173:48 - so this is the pattern
173:50 - that we can show
173:51 - while the image is loading and in here
173:53 - we have blurred we have dominant color
173:55 - we have none as well as traced svg and
173:58 - if you remember dominant color was the
174:00 - default one so in this case i'm gonna go
174:02 - with traced svg don't worry we will
174:06 - cover the other ones later as well then
174:08 - i'm going to set up a layout just keep
174:10 - in mind that constraint is already
174:12 - default so i'll just showcase how that
174:15 - works
174:16 - we're going to go with constraint but as
174:18 - far as our logic well nothing is going
174:21 - to change it's still constrained so it
174:23 - doesn't really matter and then
174:25 - eventually i just want to showcase how
174:26 - we can add the class name
174:28 - and i'm just going to go with example
174:30 - img and if you remember
174:32 - this class will be added to our
174:35 - container and you know what why don't we
174:37 - try one more
174:39 - remember the as prop let's keep on
174:42 - scrolling that was the options one and
174:45 - here we had as so why don't we try this
174:48 - one why don't we say as and i'm going to
174:51 - set it up as a section so we're going to
174:53 - go here with a section so i have an
174:56 - article inside of the article i have
174:58 - heading 4 and then i have my static
175:00 - image and as far as the styling well i'm
175:03 - just going to add some border so you can
175:05 - clearly see how the constraint works so
175:08 - i'm going to go with width now this is
175:09 - for the whole wrapper
175:11 - and we'll set it up as 70
175:14 - of the screen width and we'll add some
175:17 - margins here zero auto so it's always
175:19 - going to be in the center and then we're
175:22 - going to go with article
175:24 - basically i want to style the article
175:26 - and for some reason it's just a tag
175:28 - that's not what i wanted so i'm going to
175:30 - go with article and then i just want to
175:32 - add the border and then you'll clearly
175:34 - see how the constraint
175:36 - and full width option work
175:38 - and we're going to go 2 pixels
175:41 - solid
175:42 - and let's go with the red because why
175:44 - not and then of course i also want to
175:47 - add a little bit of styling to this
175:49 - class because remember we add this class
175:51 - to the container so why don't we use it
175:54 - and in this case i'm just going to add
175:55 - some border radius to my image so let's
175:58 - go with example
175:59 - and then hyphen img
176:01 - and we're going to go with border radius
176:04 - and let's go with one rem now i think
176:06 - it's going to be easier if we take a
176:09 - look at on a big screen
176:11 - so let's navigate there localhost
176:14 - 8000 we can refresh now eventually i
176:18 - will open up the devtools but i just
176:19 - want to showcase how it's going to look
176:21 - like on a small screen so on a small
176:24 - screen notice how the image is spanning
176:27 - exactly the size of the container and
176:30 - let me see my zoom level yeah it is 175
176:33 - but then
176:34 - the moment container gets bigger than
176:38 - the max size of the constraint image
176:41 - so effectively
176:43 - once the container
176:45 - is bigger than the image then of course
176:47 - we just use the width of the image so
176:51 - that is going to be the difference
176:52 - between the constraint one and full
176:54 - width full width is always going to be
176:56 - full width regardless now the constraint
176:58 - one
176:59 - unless you set up the width
177:01 - it's basically going to be dependent on
177:03 - a parent
177:04 - but the moment parent actually gets
177:07 - bigger notice of course at this point
177:08 - the parent is bigger then of course we
177:11 - just go with the width of the image you
177:14 - can clearly see the border radius which
177:17 - we applied
177:18 - using the class name and of course we
177:20 - selected it here in css and if you want
177:24 - to take a look at the other options for
177:26 - example placeholder i'll simply navigate
177:29 - back to my browser i will refresh and
177:32 - there is you can clearly see the
177:34 - placeholder pattern more specifically
177:37 - traced svg
177:39 - and what's more interesting
177:40 - if we start drilling down we have a
177:43 - section
177:44 - now keep in mind this is my style
177:47 - component one that's the one that i
177:49 - created and we keep going down down down
177:52 - and then of course we have the article
177:54 - and then what do we have inside of this
177:56 - article well we have a section now why
177:59 - do we have it as a section
178:01 - well simply because that is the value
178:03 - that i provided
178:04 - for my as pro
178:06 - and then as you can see we have some
178:08 - classes here we have gatsby image
178:11 - wrapper and then we also have gatsby
178:14 - image wrapper constrained so i guess
178:17 - they add this class if the image is
178:19 - constrained and then of course i have my
178:22 - own one i have my example img and then
178:26 - of course whatever css i applied
178:29 - notice how it is added to my wrapper
178:33 - and that's how we can set up options in
178:37 - the gatsby image
178:38 - beautiful and to really hammer this home
178:41 - why don't we set up two more articles
178:44 - with different layouts so that way we
178:46 - can see them side by side and i guess
178:49 - i'm just going to start with a bit of
178:52 - house cleaning i'll remove the height
178:54 - for the time being from my static image
178:58 - and then also
179:00 - i want to add a little bit of css here
179:03 - in my wrapper so width will stay the
179:05 - same margin 0 auto that stays the same
179:08 - for i'll set it up as a display grid so
179:12 - display grid and we're going to go with
179:15 - text line center as well so text
179:18 - align and we're going to align it in the
179:21 - center
179:23 - and then we'll also add some gap in
179:25 - between our columns and rows and that's
179:28 - why we'll go with gap and then two rpms
179:31 - and also at the very very bottom
179:34 - why don't we set up a media query
179:36 - media so once we get to the i don't know
179:41 - so i'm in with
179:43 - 992
179:45 - i'm gonna go with a three column layout
179:47 - so 992 pixels and then once we get there
179:51 - grid template columns and let's just go
179:53 - with one
179:54 - fraction one fraction
179:56 - as well as one fraction okay awesome
179:59 - that should do it for the css and now i
180:01 - just need to copy and paste
180:03 - and then like i said i'll change the
180:05 - layout values so that way you can see
180:07 - the fixed one you can see the full width
180:09 - one and all that and also we'll change
180:12 - the placeholder one as well so let's
180:15 - take the whole thing
180:16 - so the article copy and paste two more
180:19 - times now for the second one i'll set it
180:21 - up as fixed
180:23 - so i'll change the text as well now
180:26 - alternative will stay the same as far as
180:29 - the placeholder if you want to go back
180:31 - to the suggestions just remove
180:33 - everything and then once you've got the
180:35 - quotation mark numbers again these are
180:37 - the options i'm going to go with blurred
180:39 - in this case now as far as the layout
180:43 - well i don't want to constrain right so
180:45 - that was my default instead i'm going to
180:47 - go with fixed and then with fixed if you
180:50 - add just width height will be
180:51 - automatically calculated but if you want
180:54 - to be more specific of course just add
180:57 - the height and that value will be set as
181:00 - the height for the image
181:02 - so in my example i'm going to go with
181:04 - 200 just notice how you need to set up
181:06 - the currently there so that's not a
181:08 - string that you're passing in here
181:10 - you're passing in the number i'll leave
181:12 - the class name as it is because i still
181:14 - want that radius and i guess it's not
181:17 - going to be a section in this case we're
181:19 - just going to go with div now i don't
181:20 - know whether i'm going to go and check
181:22 - whether i actually have the div but
181:25 - hopefully you get the point
181:26 - now i think i made a tiny bug
181:29 - where
181:30 - x1 is actually all the way at the bottom
181:32 - so let me remove and i'll place it in
181:34 - between again it doesn't really matter
181:36 - but i just like to keep things in order
181:39 - so there we have fixed one and then last
181:42 - one will be our full width again same
181:45 - deal same image as far as traced svg
181:49 - well remember that by default we have a
181:52 - dominant color correct so we can use
181:54 - that one as well keep in mind
181:56 - technically i can just commit it i'm
181:58 - just showcasing what is the name of the
182:00 - value here
182:01 - and then as far as the layout well let's
182:03 - go with full width so we're going to go
182:05 - with full width example image class yep
182:09 - that stays the same
182:11 - and i don't know this can be an article
182:14 - maybe
182:15 - so let's save what do we have
182:17 - and then we're going to navigate the
182:19 - bigger browser window
182:21 - and of course notice since i added the
182:23 - article it also added right away the
182:25 - border because if you remember
182:28 - here i have a css selection for the
182:31 - article so since i render this as an
182:34 - article that's why we have that extra
182:36 - border and then notice something
182:38 - interesting
182:39 - so on a small screen
182:42 - they're exactly the same right and by
182:43 - the way and change the text in this one
182:46 - and just say full width here
182:49 - basically they're the same they're
182:50 - spanning
182:52 - the size of the container but
182:54 - if you keep making it bigger bigger
182:56 - bigger at some point what is going to
182:59 - happen
183:00 - this one well the container is going to
183:02 - get bigger now in our case we cannot
183:04 - really see that because we have that at
183:07 - 992
183:09 - so why don't we change this around just
183:11 - so you can see clearly so let me comment
183:14 - this out for a second
183:15 - and at this point i guess this one is
183:18 - just spanning all across so let me make
183:20 - this smaller and now you can clearly see
183:23 - so this is going to be my image with
183:24 - constraint and this is going to be the
183:26 - full width so full width
183:28 - always spans across regardless of the
183:31 - screen size now the constrained one
183:33 - again is going to be dependent on a
183:35 - parent but the moment parent gets bigger
183:39 - then of course we just render the image
183:41 - as it is and fixed one pretty
183:44 - self-explanatory notice whatever size we
183:46 - pass it in the height gets calculated
183:49 - and we're in good shape now if you want
183:51 - to add the highlight as well
183:53 - let's just keep scrolling back and we're
183:55 - going to go with height and i don't know
183:57 - maybe 600 like so so i had this one and
184:00 - of course
184:01 - this is my image now if you refresh
184:05 - notice this is going to be the traced
184:07 - svg and as i said i think in this case
184:10 - we'll have to slow down the network a
184:11 - bit we're going to go with three
184:14 - fast 3g hopefully you'll be able to see
184:16 - all of them so we're going to go here
184:19 - this is going to be i believe the
184:21 - blurred one
184:23 - and we already covered the dominant
184:25 - color so i think we're mostly interested
184:28 - in the blur look so notice this is going
184:31 - to be that placeholder while the image
184:34 - is loading so essentially these are our
184:37 - options and as we're progressing with
184:40 - the project of course we'll use those
184:43 - images and now you already know what
184:45 - options you have when it comes to props
184:48 - so if you want to use different options
184:50 - in your project so if you don't want to
184:52 - follow along with my options feel free
184:55 - to do so and you'll be in good shape i
184:58 - think at this point we have good initial
185:00 - understanding how we can pass props and
185:03 - options into our static image component
185:06 - but before we start setting up images in
185:09 - our simple recipes project i also want
185:11 - to cover width and height for
185:14 - constrained layout versus the fixed one
185:17 - and how we cannot pass the height for
185:20 - the full width one
185:21 - and what in my opinion is a niftier
185:24 - solution when we deal with height for
185:27 - constraint and full width now i know
185:29 - that there's a lot to unpack so let's
185:32 - start with width and height for
185:34 - constraint versus the fixed one so if we
185:37 - go to the gatsby docs and if we keep on
185:40 - scrolling
185:41 - notice here we have width and height and
185:45 - what they're saying here that for the
185:46 - fixed layout
185:48 - these define the size of the image
185:50 - displayed on a screen however when we
185:53 - talk about the constrained one
185:56 - these define the maximum size so that's
185:59 - the biggest difference that's why i'm
186:00 - saying that for the constrained one it
186:02 - will be the size of the container but
186:06 - once the container size gets bigger than
186:08 - the maximum size that's why you see that
186:10 - space in between
186:12 - so that's number one
186:14 - number two if i go back and for example
186:17 - add a height for the static image
186:20 - everything is great and in my case i'm
186:22 - gonna go for 300. now i'll remove the
186:25 - height for the fixed one i think it's
186:28 - getting quite busy in the browser and if
186:31 - i'll try to do the same thing for the
186:33 - full width one i'm actually going to
186:34 - have a big fat complaint
186:37 - in a browser so let me navigate back
186:40 - this is my local
186:41 - and then once i refresh
186:44 - check it out i have a error basically
186:47 - tells me that failed prop type height
186:50 - 300 may not be passed when layout is
186:53 - full with so that's something to be
186:55 - aware of yes you can pass in the max
186:59 - height four constraint one remember for
187:01 - constraint one
187:03 - width and height are max values yes we
187:05 - can do that however for the full width
187:08 - one well
187:09 - that's not allowed so what would be a
187:11 - solution if i want to have height for
187:14 - both of them for full width
187:16 - as well as the constrained one well a
187:19 - nester solution in my opinion is using
187:23 - this example img because in here i can
187:26 - kill two birds at the same time first
187:30 - if i add here this max height i cannot
187:33 - really control it when i add this height
187:35 - 4 constraint i add 300 and that's it
187:38 - essentially it's set in stone however if
187:41 - i add the height
187:43 - for my class for the example image
187:47 - not only i can control it depending on
187:49 - the screen size but i can also control
187:52 - my full width so let's keep on scrolling
187:55 - i'll add my media query back up
187:58 - and then notice this example mg why
188:01 - don't we set it up this way where i'm
188:02 - going to go with height and then
188:05 - 300
188:06 - that's gonna be on a small screen and
188:08 - then once we get to the bigger screen
188:11 - i'm gonna make it smaller so i'm gonna
188:14 - go with height
188:15 - and we'll set it up as 200 pixels so
188:19 - let's save the sucker and then once we
188:22 - move to a bigger browser window notice
188:25 - the difference and as a side note this
188:27 - one is just lower because of the text so
188:30 - let me go back
188:31 - and fix it because it's important that
188:33 - you see that both of them actually
188:36 - behave exactly the same way
188:38 - so notice the difference
188:40 - yeah of course on a small screen size we
188:43 - have the height correct we have the
188:45 - height that we set over here and that
188:48 - one was 300 but then the moment screen
188:51 - size is gonna get bigger
188:53 - notice how we're gonna have this 200 now
188:56 - i'll zoom out so you'll definitely see
188:58 - so this is going to be the 200 one
189:01 - and then once we go to the smaller
189:04 - screen size of course the height is
189:06 - going to be 300 again that's just my
189:09 - approach of fixing the height issue
189:12 - where once you add the height to the
189:15 - class a i can control it on multiple
189:17 - screen sizes so depending on the screen
189:20 - size i can control that value and you
189:22 - can also add that height to the full
189:25 - width image because notice without using
189:28 - that prop i can actually control the
189:30 - height of the full width one as well
189:34 - nice i think we have a solid
189:36 - understanding of how static image works
189:39 - and now let's put it to good use by
189:41 - adding some images to our simple recipes
189:44 - project
189:45 - and i guess i'm going to start with
189:48 - about page so if we navigate to complete
189:51 - project we can see that this probably is
189:54 - going to be a static image as well as in
189:57 - the about page so where do we start here
190:00 - and then next video we'll work on home
190:02 - page
190:03 - now i do want to keep my project
190:06 - somewhat clean
190:07 - so in the pages i'll start by removing
190:11 - the images component again you always
190:13 - know where to find the reference
190:16 - and i'm not sure maybe later i will get
190:19 - the link back but for the time being i
190:21 - don't want that warning in the console
190:24 - in the terminal so remove it as well
190:27 - and then of course we want to navigate
190:29 - to about page and first i guess let's
190:32 - start by changing the name here
190:35 - and what i mean is i want to capitalize
190:38 - it because that's the proper setup
190:41 - for react component
190:43 - and then we're going to go with our
190:45 - static image of course we do need to
190:47 - import it so we're going to go with
190:48 - import and then i'm looking for static
190:51 - and image and that is coming from
190:55 - of course
190:56 - gatsby plugin image
190:58 - so we have our static image then i want
191:01 - to import link because we will set up a
191:04 - link to the contact page and eventually
191:07 - we'll add some more imports but not for
191:10 - time being so we're going to go with
191:11 - import then we're looking for a link and
191:14 - again this is coming from
191:16 - gatsby this time so we go with gatsby
191:19 - here all right that's awesome then
191:22 - inside of the layout we will set up main
191:26 - so let's go with a main tags we'll add a
191:29 - little bit of css so add a class name of
191:32 - page here
191:33 - and then there's going to be a section
191:35 - with the class of about page so let's go
191:38 - with this section and then the class is
191:40 - about
191:42 - page and effectively we'll have two
191:44 - articles one for the text and then the
191:48 - second one
191:49 - is going to be a static image now when i
191:52 - say articles i mean two columns so one
191:55 - column is going to be an article and the
191:57 - second column will be my static image so
192:00 - again if we navigate to a complete
192:02 - project i'm going to say that
192:03 - this is going to be the text side of it
192:06 - and then on the right hand side we
192:08 - basically have the image and again i can
192:10 - always make it smaller and you'll see
192:12 - that this is going to be look on a small
192:15 - screen
192:16 - and then this is going to be the look on
192:18 - a big screen let's navigate here and i
192:21 - guess let's start with the text like i
192:23 - said i'll just group everything in the
192:25 - article in this case there's going to be
192:27 - a heading 2
192:28 - and also i'll add two more paragraphs
192:32 - now i'll copy and paste the text to
192:34 - speed it up but i'm just showing you the
192:36 - structure so heading two then two
192:39 - paragraphs and then like i said i also
192:41 - want to make a link
192:43 - to a contact page the link to
192:46 - and then as far as the address well we
192:49 - go to the contact page so i pass in the
192:51 - path here correct
192:53 - and then of course i want to have some
192:56 - kind of text so contact and then let's
192:58 - also add a class name so let's write
193:01 - here button again this just comes from
193:03 - the css i just add a little bit of
193:06 - styling to my link so i'll save it here
193:09 - and probably
193:11 - it would make way more sense if in the
193:14 - browser i would be in contact page and
193:17 - there it is now as far as the text like
193:19 - i said i'll just speed this up i don't
193:21 - see the point of typing everything
193:24 - together
193:25 - i mean you probably have way better
193:28 - things to do so copy and paste
193:31 - and the last one as well okay
193:35 - that's awesome i mean we have the text
193:38 - and now like i said two column layout
193:40 - this is important because i already have
193:42 - the css of course so i have an article
193:44 - this is where the text is sitting and
193:46 - now of course i want to set up my static
193:49 - image
193:50 - okay
193:51 - so side by side with my article i'm
193:54 - going to go with static image
193:56 - and now first we know that we have a
193:59 - source prop correct so we go with source
194:02 - and as far as which image i want to show
194:05 - well i want the about
194:07 - jpeg that's it now if you want a
194:09 - different one if you want to download
194:10 - your own i mean feel free to do that so
194:13 - we're going to go with source
194:15 - and again i'm navigating to the assets
194:18 - now i guess one annoying thing here
194:21 - is that it doesn't show any suggestions
194:24 - you know that when you're working with
194:26 - imports here it right away auto
194:28 - completes it for you in this case it is
194:30 - not happening so we go with assets then
194:33 - forward slash then we go with images and
194:36 - then the image name about
194:38 - jpeg
194:40 - now as far as the alternative i just
194:42 - took the info from the image so it says
194:46 - there person pouring
194:48 - salt
194:50 - in ball that's it again i didn't make
194:53 - this one up
194:54 - that's in the info of the image and now
194:57 - let's close our static image
195:00 - and then eventually we'll add two more
195:03 - class names so let's save it for now we
195:06 - should have this giant image okay that's
195:08 - good
195:09 - and if we can see it in a big browser as
195:12 - well
195:13 - then we are in good shape so we do have
195:15 - the two column layouts but as you can
195:17 - see
195:18 - we do need to apply a little bit of css
195:20 - because
195:21 - it's probably not the look that you're
195:23 - shooting for yes looks somewhat okay on
195:27 - a small screen but once the screen size
195:30 - gets bigger then of course we just have
195:32 - this
195:32 - giant image and we already know how to
195:35 - do that we know that we can apply a
195:37 - class name right and the way i set up
195:39 - the css there is a class by the name of
195:42 - about img
195:43 - so in this case i'm going to go to class
195:45 - name so remember we're adding this class
195:48 - to the wrapper
195:50 - not the image to the wrapper and we go
195:52 - with about img
195:55 - and then as far as the placeholder well
195:57 - why don't we try out the blurred one
195:59 - again my favorite
196:00 - is the traced svg but once in a while i
196:04 - like the blurred one instead so
196:08 - let's navigate now to the bigger browser
196:10 - and what do you know of course we nicely
196:13 - have two column layout where we have a
196:16 - text and image side by side again i can
196:19 - make this smaller
196:20 - and you'll see how it looks on a small
196:23 - screen and then once i make my screen
196:25 - size bigger
196:26 - we have our column layout and then as
196:29 - far as the css it's pretty typical css
196:33 - and probably the fastest way how you can
196:35 - find these styles
196:36 - is by navigating to main css and then
196:39 - again the command is command and f
196:42 - and you get the search window and then
196:44 - just look for about and probably the
196:47 - most interesting thing here
196:49 - is the setup for the about img since we
196:52 - just covered how we can add those
196:54 - classes to the static image so notice
196:57 - how i have this about emg and first let
197:00 - me just showcase that it is going to be
197:03 - added of course to my wrapper so there
197:06 - it is once i navigate here now there is
197:08 - the class names i have about img so
197:11 - that's for my wrapper
197:13 - and then i set up the height for the
197:16 - small screen in this case i go with 500
197:18 - pixels i also add this border radius
197:22 - and then if you keep scrolling notice
197:24 - the media query so
197:26 - my about page so the parent for both
197:30 - for the text article as well as my
197:32 - static image it's actually a grid so we
197:36 - set it up as display grid and then once
197:38 - we get to 992
197:41 - i set up two column layout
197:43 - and then i set up the height for the
197:45 - whole about page as 400 pixels and then
197:48 - for my static image i just say height
197:52 - 100
197:53 - meaning set your height based on a
197:56 - parent so if this parent is going to be
197:58 - i don't know 800 then of course my image
198:01 - is going to be 800. now if the height is
198:03 - going to be smaller then of course my
198:05 - image is going to be smaller as well so
198:08 - hopefully you get the gist unlike the
198:10 - previous video where i hardcoded based
198:13 - on a screen size so remember i set one
198:16 - pixel value for the smaller screen size
198:19 - and then added media query and set the
198:22 - pixel value for the bigger one in this
198:24 - case yes i hard code for the small
198:26 - screen
198:27 - where it is 500 but then once i have
198:30 - that two column layout i want to set my
198:32 - height based on a pattern and if we
198:35 - navigate back and in this case i'll zoom
198:37 - out
198:38 - just so you can see better
198:40 - and i guess i'm going to look for my
198:43 - about img
198:44 - and then notice what happens if i remove
198:47 - that height of hundred so of course now
198:50 - this image is bigger now it is that 500
198:53 - correct and then once we remove the 500
198:56 - as well now it's even bigger again
198:58 - that's something nifty you can do it's
199:00 - not part of official asb documentation
199:04 - but again the idea is that instead of
199:07 - adding that prop you can simply set up
199:10 - the class on the wrapper
199:13 - and then that way you can control it way
199:15 - better because you can add all kinds of
199:18 - nifty css and then in this case we are
199:21 - actually setting our image height based
199:24 - on the parent and once we're done with
199:27 - about page
199:29 - why don't we tackle the homepage as well
199:32 - now eventually there are going to be
199:33 - more things in the homepage if you take
199:36 - a look at the complete project you can
199:37 - see not only we have the hero image with
199:41 - some text but of course we'll also have
199:44 - the tags for recipes as well as the
199:46 - recipes itself but for the time being
199:49 - let's just focus on this image and then
199:52 - of course
199:53 - once we learn how to fetch data and set
199:55 - up that data in our headless cms the
199:58 - contentful in our case
200:00 - then of course we'll knock out these two
200:03 - suckers as well so
200:06 - i think i'm gonna clean my workspace
200:08 - first
200:09 - and i'm just gonna close all my tabs
200:12 - okay that's good
200:13 - and then in the index.js
200:16 - okay i have the react i have layout
200:18 - that's good i think i can close the
200:20 - search for now and then as far as the
200:23 - imports
200:24 - well i just want to get my static image
200:27 - right so i'm going to go with import and
200:29 - then i'm looking for static
200:31 - and image again it's coming from
200:34 - and gatsby plugin image
200:37 - good and then as far as the return yes
200:39 - i'll still have layout that stays the
200:42 - same
200:43 - and again i want to go with main tags
200:45 - and i want to add the class name off
200:48 - page
200:48 - and then inside of the main i'm just
200:50 - going to go with my header and the class
200:53 - name will be hero so header and a class
200:56 - name is hero now instead of this hero
201:00 - i'm gonna have two things i'm gonna have
201:02 - my static image with a layout on full
201:05 - width so we can keep on practicing and
201:08 - then the second thing is going to be my
201:10 - text let's go first here with a
201:13 - static image and then as far as the
201:16 - source well i need to go to my files and
201:21 - let's see i think i want to go with the
201:23 - main one here
201:24 - so this guy
201:26 - and again the path is following where we
201:28 - go with two dots and we're looking in
201:31 - the assets
201:32 - and more specifically images and then we
201:35 - go with
201:36 - main and jpeg
201:39 - now that's good then i want to have the
201:41 - alternative one and let's see what it is
201:44 - i guess i don't know a flower
201:47 - and eggs so let's just write eggs
201:50 - so let's go here with eggs and then i
201:53 - want to add a few more props so class
201:55 - name again added to my wrapper we're
201:58 - going to go with hero img important for
202:01 - the styling then as far as the
202:03 - placeholder i want to go with my
202:05 - favorite one with traced svg and then as
202:09 - far as the layout now i'm going to go
202:10 - with full width one instead let's save
202:14 - this one here and now i want to test it
202:16 - out in a browser it looks pretty good
202:19 - and then like i said i also want to set
202:21 - up that text and as far as the text
202:24 - how i was able to set it up here in the
202:26 - center well i'm doing that using the css
202:30 - so first let me set it up and then i'll
202:32 - go over what's happening here so we're
202:35 - going to go div with the class of hero
202:37 - container
202:39 - and then inside of it there's going to
202:41 - be another div with a class of hero text
202:44 - and then instead of this div this is
202:46 - where we'll place a heading one
202:48 - with some kind of text in my case simple
202:51 - recipes and then heading four and we
202:55 - just say no fluff
202:57 - no fluff just recipes let's save that
203:00 - one now we have a little bit of styling
203:02 - as well as the text is sitting in the
203:05 - center so let's take a look at the css
203:08 - i'm going to go to main css again
203:10 - i'll look for my dot hero
203:13 - and
203:14 - first of all notice how the height is
203:16 - right away 100 percent so i'm adding
203:19 - this class on the wrapper the hero img
203:22 - and then i right away i set the height
203:24 - to be 100
203:26 - why well because hero my parent has the
203:30 - height of
203:31 - 40
203:32 - of the screen size so again
203:35 - in this case i'm using the parent to
203:37 - control the height of my image because i
203:40 - add the class on the wrapper and then i
203:43 - just set it equal to 100
203:46 - now as far as how i was able to set this
203:49 - text on top of the image well the hero
203:52 - container here is actually position
203:55 - absolute so i take it out of my normal
203:57 - flow and i just set width and height
204:00 - equal to 100 percent and then since hero
204:02 - is a relative essentially it's spanning
204:05 - all across the hero and i add a little
204:08 - background that's why you can see that
204:10 - it is darker so if i remove it notice of
204:12 - course it's going to be lighter another
204:14 - reason why i add that background is
204:16 - because i want to see that white text
204:18 - better
204:20 - and then of course you can also see that
204:22 - we had a little bit of border radius so
204:24 - we matched the one we have for the image
204:27 - and as far as how i was able to place
204:30 - the text in the center well the hero
204:31 - container is actually a display flex and
204:35 - i just set my text e in the center by
204:38 - using align items and
204:40 - justify content
204:42 - that's about it if you want you can go
204:44 - here and by the way i'm showing you the
204:47 - complete one
204:48 - this is how it looks currently in our
204:50 - project again if you want you can
204:52 - inspect and you'll see all the
204:54 - properties in action for example if i
204:57 - remove my height now of course i have
204:59 - this massive image that's the reason why
205:01 - we need to set this height as 100
205:04 - and then it depends on the parent and
205:06 - the same goes for hero if you remove it
205:09 - of course now i'll just have this
205:10 - massive image now if i'll set back my
205:13 - height to be 40 percent of the screen
205:16 - size or if i want it i don't know 30
205:19 - then of course it is going to be smaller
205:21 - hopefully this makes sense i know that i
205:24 - covered quite a bit of css but in this
205:27 - case it is very important
205:29 - since setting them up in the layouts is
205:32 - a big part of working with images and i
205:35 - just wanted to cover clearly my
205:38 - approaches when setting up layouts using
205:41 - gatsby images
205:43 - awesome work on setting up the images
205:45 - and next one up we have graphql or how
205:49 - to work with data in gatsby
205:51 - you see up to this point we have been
205:53 - using standard react practices to access
205:56 - our data in our gatsby project and while
205:59 - there's technically nothing wrong with
206:00 - that particular approach in essence
206:02 - we're not utilizing all the awesome
206:04 - features gadsby offers in order to
206:07 - change that we will have to understand
206:09 - how the gatsby data layer works in a
206:11 - nutshell we'll learn how to load our
206:13 - data directly into our components using
206:16 - graphql if you are new to graphql i
206:19 - fully understand that syntax might seem
206:22 - a bit foreign and intimidating at first
206:25 - but believe it or not once we'll get few
206:27 - graphql queries under our belts i doubt
206:30 - you'll want to go back to good alt rest
206:32 - api and actually at least in my opinion
206:35 - gatsby makes it very easy to start with
206:38 - graphql since a lot of complexities have
206:41 - been removed and we really need to worry
206:44 - about writing the queries since it is a
206:46 - major major course on overall gatsby
206:49 - topic here are a few of my suggestions
206:52 - of how to tackle it and i guess i'll
206:55 - start with this one whatever you do do
206:57 - not throw in a towel or in other words
207:00 - give up
207:01 - and yes it is that simple look you can
207:04 - only get better if you practice and
207:06 - sometimes it just takes a bit of time to
207:09 - get used to the syntax and logic behind
207:12 - it second if my explanations are not
207:14 - good or clear enough try gatsby
207:16 - documentation like i have mentioned
207:18 - already a few times they have awesome
207:20 - and comprehensive docs so if necessary
207:23 - try to utilize them i would also suggest
207:25 - spending some time in graphical
207:27 - just writing some queries and testing
207:29 - results and you can think of graphql as
207:33 - it is also called as a sandbox for your
207:36 - graphql queries since graphql is such a
207:39 - major gatsby topic we will spend
207:41 - multiple videos
207:43 - just practicing writing queries testing
207:45 - results and only then proceed to cover
207:48 - multiple ways of how we can render our
207:51 - data also starting from this video we
207:54 - spent a lot of time in our sandbox and
207:57 - the url for this sandbox is going to be
207:59 - http then localhost 8000 underscore
208:02 - underscore underscore and then graphql
208:05 - now you can easily find the url if you
208:07 - run gatsbydevelop and all the way in the
208:10 - bottom you'll have two urls
208:12 - one for the 8000 which of course
208:14 - displays our project in the browser and
208:17 - then the second one for the sandbox and
208:19 - at this point you have two options we
208:21 - can either command click which will
208:22 - right away open up in a browser or we
208:25 - can copy and paste the url now my
208:27 - problem with command click is the fact
208:29 - that it will open up the sandbox in a
208:32 - smaller browser window and in my opinion
208:34 - it's kind of hard to work in a smaller
208:36 - browser window as you're working with a
208:38 - sandbox i think you have a much more
208:41 - clear view of what is happening if
208:43 - you're doing that in a bigger browser
208:45 - window so in my case i will copy the url
208:48 - like so
208:50 - and then i'll navigate to my bigger
208:52 - browser window open up a new tab
208:55 - copy and paste and there you go now we
208:58 - have our sandbox and we can start
208:59 - writing queries and getting data into
209:02 - our components
209:04 - whenever dealing with complex subject it
209:07 - always helps to keep things in
209:08 - perspective so let's give it a shot in
209:10 - this case as well since gasby is built
209:13 - on top of react
209:14 - we know that our project will consist of
209:17 - components
209:18 - now those components could be small
209:20 - components big components at this point
209:22 - it is irrelevant at the end of the day
209:24 - our project will have a bunch of
209:26 - components in some of those components
209:29 - maybe in all of them we would want to
209:31 - render some data now that data could be
209:34 - really anything
209:35 - external apis local files and images
209:38 - markdown
209:39 - site metadata just to name a view
209:42 - in order to access that data we'll
209:45 - utilize graphql and in a nutshell
209:48 - graphql is the syntax that describes of
209:51 - how to ask for data it allows us to
209:54 - specify what data we would need and uses
209:58 - the type system to describe that data
210:01 - in gatsby we can create and test our
210:03 - queries in the graphical ide or simply
210:07 - sandbox and once we are ready to display
210:10 - or render our data we can do that with
210:12 - the help of static or page queries
210:15 - static query could be used in any
210:17 - component including the page component
210:20 - but when it comes to page query we can
210:22 - only use them in our page components
210:25 - what makes page query so special is the
210:27 - fact that unlike static query it can
210:30 - also accept variables so natural we have
210:33 - components that want data now we use
210:35 - graphql to get that specific data test
210:39 - our queries in sandbox and render it
210:42 - using static or page queries since we'll
210:46 - spend a significant amount of time in
210:48 - our sandbox let's get familiar with an
210:50 - interface now please keep in mind that
210:52 - it is just an intro video and i fully
210:55 - understand that a lot of things might
210:58 - look sketchy confusing and even flat out
211:01 - scary i hear you
211:03 - don't worry when it comes to writing our
211:05 - actual queries we'll start very nice and
211:08 - easy i'll probably repeat the same thing
211:11 - 20 000 times to the point where you will
211:13 - scream at the monitor but hopefully by
211:15 - doing so you won't feel overwhelmed and
211:19 - will be able to set up your own queries
211:21 - in no time as far as the interface on
211:24 - the left hand side this is where we'll
211:26 - set up our queries and then on the right
211:28 - hand side we'll have two options either
211:31 - we'll get a result for the query we just
211:33 - set up and of course we can just copy
211:35 - and paste that query into our project
211:38 - and we're good to go essentially we will
211:40 - get our data or we'll have an error so
211:43 - if we have an error of course we'll have
211:45 - to troubleshoot
211:46 - now later as our queries get more
211:49 - complicated we'll also have to set up
211:51 - query variables and this is exactly
211:54 - where we'll set them up as you can see
211:55 - we have a name here query variables but
211:58 - at the moment we don't have to worry
212:00 - about that remember later that's where
212:02 - you can find your variables as you can
212:05 - see right now on the left hand side we
212:07 - have a bunch of very useful comments and
212:10 - as a side note even though some of it
212:12 - might not make sense
212:13 - i would suggest just kind of skimming
212:16 - over it just so you understand the main
212:18 - idea now when it comes to running our
212:21 - queries we have a few options either i
212:23 - click on a play button right here hard
212:26 - to miss or we also have an option of
212:29 - shortcut and that shortcut would be
212:31 - control and enter
212:33 - then as we're setting up the query there
212:35 - might be a time where you would want to
212:37 - format it because as you're writing the
212:38 - query it might get messy
212:40 - it is much more easier to see
212:43 - if everything is nicely formatted and in
212:45 - order to do that we just click on pretty
212:48 - fire and that one would be shift ctrl
212:50 - and p
212:52 - then we have a history which should be
212:54 - self-explanatory as you can see these
212:56 - are the queries that i wrote in your
212:58 - case if you just open it up probably it
213:01 - is blank and then we have your next
213:04 - future best friend why am i saying that
213:06 - because even though
213:08 - as we will set up our first queries we
213:10 - will write them out manually because i
213:12 - would want you to struggle i want you to
213:15 - understand how it works all the nuts and
213:17 - bolts but
213:18 - later we will use the explorer and
213:21 - what's really cool about the explorer is
213:23 - the fact that the only thing you really
213:25 - need to do
213:26 - is check off boxes so for example i have
213:29 - a query with the name of all site
213:31 - these are the options i have for example
213:33 - i'm looking for the edges and again i
213:35 - fully understand that none of this makes
213:37 - sense right now i'm just showing you
213:39 - what is going to be our future so edges
213:42 - then we have node and then these are all
213:43 - the options that i have and you can
213:45 - notice that without typing anything i
213:48 - can pretty much set up my query and once
213:51 - my query is done i can run it i can get
213:53 - back my results and i'm good to go
213:56 - now the explorer is awesome because it
213:59 - allows you to set up the query by just
214:02 - clicking on the check boxes and you're
214:04 - ready to go in no time code exporter
214:08 - allows you to save on typing out deposit
214:11 - so essentially as you can see it
214:13 - prepares the code that you would need to
214:15 - use in your component of course there's
214:17 - going to be some modifications and we'll
214:19 - add some more code and delete some of
214:22 - the options that i provide
214:24 - but in general again it allows you to
214:26 - save some time in the beginning we will
214:29 - type out these things manually because i
214:31 - think that is the best way to learn but
214:33 - of course later we will utilize our code
214:36 - exporter as far as the options we have
214:39 - page query static query hook that will
214:42 - cover a little bit later and static
214:44 - query so for example if i would go with
214:46 - static query option notice my code will
214:48 - change but again it is generated for me
214:51 - i will close the code exporter for the
214:53 - time being as well as the explorer and
214:56 - then we also have the docs now i want to
214:58 - cover docs right now because i think
215:01 - they will bring unnecessary level of
215:03 - complexity so i think it's better if we
215:05 - cover them once we have some basic
215:07 - understanding of graphql and the last
215:09 - thing that i want to do in this video is
215:10 - to go over the basics of graphql and in
215:14 - order to do that i'm going to look in my
215:16 - history so in your case you'll probably
215:19 - not have this query
215:21 - and when it comes to graphql the setup
215:23 - is following so we have a query in this
215:26 - case we're looking for a product but
215:28 - unlike the rest api
215:30 - which essentially just dumps all the
215:32 - data and then you're the one who is
215:34 - stuck just coming up with which property
215:37 - and value you're looking for
215:39 - when you're setting up the query you are
215:41 - right away being asked to be very
215:44 - specific and in graphql we have fields
215:46 - now when we talk about fields think of
215:48 - them as properties on the object so for
215:51 - example these nodes represents all the
215:54 - products that i have the thing is though
215:57 - right away as i'm setting up my query i
216:00 - need to say which fields
216:02 - am i looking for in the specific product
216:05 - because i cannot just say okay give me
216:08 - all the products graphql is like nope
216:10 - you need to be specific of what you
216:12 - would want to get back so if nodes has
216:16 - more subfields which in case it does so
216:19 - fields within the fields then you need
216:21 - to say okay i want title i would want
216:24 - url i would want size but then as you
216:27 - notice if the field
216:29 - has its own subfields then we need to
216:31 - drill it down even more and as a result
216:34 - we get only the specific data that we
216:37 - were looking for and one more thing that
216:39 - i really like about gatsby is that i can
216:42 - only set up these queries if i have
216:45 - installed the plugin and what that means
216:48 - is that i don't have to memorize 10 000
216:50 - queries so only if i'll install the
216:53 - plugin
216:54 - then i'll have access to that specific
216:56 - query and only then i'll have access to
216:59 - that specific data by far the best way
217:01 - to learn graphql is by writing queries
217:04 - but here's the kicker first we have very
217:07 - limited amount of actual queries
217:10 - since we have very few plugins installed
217:13 - and second at this point in time we have
217:16 - a very limited amount of data as well
217:19 - and i guess let's fix the data issue
217:22 - first
217:23 - and we're going to do that by adding
217:25 - some site metadata in our gas b config
217:29 - and you can think of site metadata as
217:32 - info about our site
217:34 - and once we set it up we can pull that
217:36 - info anywhere in our project so
217:39 - basically we can access it and do
217:41 - something useful with it for example
217:44 - later we'll use it to set up search
217:46 - engine optimization component
217:48 - or seo for short
217:50 - let's navigate to gatsby config
217:53 - probably want to start the server right
217:55 - away meaning stop server my apologies
217:58 - then i'll close again all the files that
218:00 - i'm currently working in and of course
218:02 - i'm looking for
218:04 - get bconfig
218:05 - then
218:06 - above the plugins i guess i'm gonna go
218:09 - with a property name of site
218:12 - meta
218:13 - and data now please please please please
218:17 - keep the same sentence i know looks a
218:20 - bit sketchy but yes you need to write it
218:22 - site meta data like so and i'll talk
218:26 - about it at the end of the video
218:28 - basically why it is important as far as
218:30 - the syntax and then inside of it
218:33 - we can go really wild and crazy and we
218:36 - can come up with whatever property names
218:38 - we want so in this video i'll just set a
218:41 - bunch of them
218:42 - so we can get a good practice when we
218:45 - set up the query and then eventually
218:47 - we'll remove the unnecessary ones so
218:50 - let's start with the useful one not is
218:52 - going to be the title of our site and
218:55 - yes i'm going to go with simply recipes
218:58 - because why not then i'll add a comma
219:01 - again this is
219:02 - normal object so make sure that you
219:05 - follow all the proper rules then i'm
219:08 - gonna go with description
219:10 - and we'll say nice and clean
219:14 - recipe site recipes site
219:17 - then
219:18 - i'm gonna go with author and in this
219:20 - case i'm going to go with at
219:22 - and john smith if you want you can add
219:25 - john doe
219:27 - or susan though whatever and then i'm
219:29 - going to set up some properties for
219:31 - practicing graphql query so start with a
219:35 - person property which actually is going
219:37 - to be an object and then instead of that
219:39 - object i'm going to set up a few more
219:41 - properties one will be named and second
219:44 - one will be age
219:46 - awesome then i'm going to go with simple
219:49 - data
219:50 - and in this case it's going to be an
219:52 - array so simple data
219:54 - that is equal to an array and we'll just
219:56 - go with item one
219:58 - and then item two you guessed it
220:01 - item
220:02 - two and then let's set up also a complex
220:06 - data it is going to be an array but it's
220:09 - going to be an array of objects again
220:11 - the reason
220:12 - why we do all of this is because i want
220:15 - you to get a good practice when we're
220:18 - setting up our first query
220:21 - let's write here complex
220:23 - data
220:24 - and like i said it's going to be an
220:26 - array of objects
220:28 - so i set up the array and i'll simply
220:30 - copy and paste just so i can speed it up
220:32 - a little bit name john age 32 let's
220:36 - leave it the way it is and then copy and
220:38 - paste one more time and let's change it
220:40 - to good old susan
220:42 - and she's going to be
220:44 - 21. so let's save it make sure you save
220:47 - the sb config i suggest always stopping
220:51 - the server and then restarting the
220:53 - gatsby config so i'm going to go with
220:55 - npm start or i'm sorry so gatsby config
220:58 - i'm man gatsby dev server and let me
221:01 - stress something
221:03 - when it comes to site metadata property
221:06 - you need to use the same exact name
221:09 - if you want you will get a big fat error
221:12 - in your terminal since it's a property
221:15 - on this export object
221:17 - now on the other hand properties inside
221:19 - of it that's a different ball game you
221:22 - can name them however you like whatever
221:24 - makes the most sense to you and just so
221:26 - you don't think that i'm making this up
221:29 - let's navigate to gatsby docs let's use
221:32 - their awesome search option
221:35 - and then we can type gatsby config here
221:39 - gatsby
221:40 - config and let's just go with api option
221:44 - and then once we navigate here keep on
221:46 - scrolling keep on scrolling and there it
221:49 - is we have configuration options so we
221:53 - have options available to set within get
221:56 - b config and then notice
221:58 - these are our options so we have plugins
222:01 - which is an array then we have flags and
222:03 - all that so obviously you can read them
222:05 - and site metadata is that object
222:08 - so if you'll go with your own name
222:11 - gatsby is going to spit back the massive
222:13 - error because you're not supposed to add
222:16 - your own properties on that object
222:18 - there's a reason why they set up that
222:20 - object and on that object you're only
222:23 - allowed these properties now if you're
222:25 - interested in learning more about site
222:28 - metadata or the plugins and all that
222:31 - feel free to read the documentation in
222:34 - my case we're going to go to the graphql
222:36 - now and actually practice setting up the
222:39 - query
222:40 - similarly how we always should restart
222:43 - the server
222:44 - when we make changes in get b config
222:47 - or gatsby node you also want to always
222:51 - restart the browser when it comes to
222:53 - sandbox so the moment you make some kind
222:55 - of change as far as data in our case we
222:58 - added that site metadata
223:00 - if you want to have access to it make
223:02 - sure that you restart otherwise you
223:04 - might have the scenario where you do
223:06 - make some changes you come back to the
223:08 - sandbox and unfortunately you don't see
223:11 - that query now i'll remove the comments
223:14 - just keep in mind that we'll use this
223:16 - guy often
223:17 - at least while we're writing everything
223:19 - manually and then of course eventually
223:21 - once we learn how to work with explorer
223:24 - then i guess we'll do that a little bit
223:26 - less but again in general this is a very
223:29 - very good helper so again the command is
223:32 - control space so now let me remove
223:34 - everything so i'm going to go with
223:36 - command a i'll remove everything and of
223:39 - course i'll zoom in so we can see a bit
223:42 - better
223:43 - now the way we set up the query we just
223:45 - start here with the curly braces now
223:48 - there is a query keyword and also we can
223:51 - name them and we can pass some more
223:54 - options and yes we'll cover that but as
223:56 - far as the basic query let's just start
223:59 - with simple curly braces that's all we
224:01 - have to do and then like i said our best
224:04 - friend is going to be the command of
224:06 - control and space and there it is so
224:09 - these are all the queries we can set up
224:12 - and you're looking at it and you're like
224:14 - well wait a minute that's not that many
224:17 - and not to be redundant but again the
224:19 - reason for that is because we're using
224:21 - bare bones gatsby application so of
224:24 - course we have
224:26 - no plugins so we also have no queries
224:29 - once you install the plugin
224:31 - then you'll get the query that's how it
224:32 - works and again in my opinion that's a
224:35 - very cool setup because you don't need
224:37 - to memorize 20 000 queries if you have
224:40 - the plugin
224:41 - then you have the query that's all there
224:44 - is to know so in my case i'm looking for
224:46 - the site query
224:48 - and then the moment i type type notice i
224:51 - get this red squiggly line
224:53 - and i have the error field site of the
224:56 - type site must have a selection of
224:59 - subfields did you mean site blah blah
225:02 - blah and in simple terms what graphql is
225:05 - saying hey listen buddy you're looking
225:07 - for a site
225:08 - but site has more subfields so more
225:12 - options
225:13 - and you need to be more specific again
225:15 - it's not like rest api where we hit the
225:17 - url and then server just dumps all the
225:20 - info no with graphql we need to be
225:23 - extremely specific of what we're looking
225:26 - for and in order to get those subfields
225:28 - we simply need to add the curly braces
225:31 - and the moment i add those curly braces
225:33 - again i can check for suggestions so
225:35 - essentially i can see what subfields i
225:38 - can access and what do you know what do
225:40 - you see over here no i see site metadata
225:43 - why well because we just created that
225:45 - object so i go with site metadata and
225:48 - again i have this red squiggly line
225:50 - again i have this error but at this
225:52 - point where you know why because site
225:54 - metadata is the object so now we simply
225:57 - need to start pulling these properties
226:00 - one by one now at minimum you need to
226:02 - provide at least one
226:05 - but then if you want all of them
226:07 - just add them
226:08 - to the query so again we need to go with
226:11 - a curly braces and then again we can use
226:13 - our suggestions so control space i have
226:17 - my title i have my description i have my
226:19 - author and on and on and on so i just go
226:22 - with my title i run it and what do you
226:25 - know of course now i have my title
226:29 - and if you notice as far as what
226:31 - response we're getting back we have this
226:34 - data object so that's going to be the
226:36 - wrapper around our response and then we
226:39 - basically have this mirror image of our
226:42 - query now let me run right now the
226:45 - prettify here just so it looks a bit
226:48 - nicer and the notice of course i'm
226:50 - requesting the site so i'm getting back
226:52 - to the site i'm requesting site metadata
226:54 - and hopefully you get the gist now they
226:56 - also dumped this extensions on us but at
227:00 - this point in our gatsby journey we're
227:02 - not really concerned with it so just
227:04 - focus on this data object so that is
227:08 - going to be our response and again
227:10 - whatever is going to be sitting inside
227:12 - of the data object is going to be
227:14 - mirror image
227:16 - of your query now let me showcase what
227:19 - happens if we run with that red squiggly
227:22 - line and effectively the graphql the
227:26 - sandbox does nice suggestions so if i
227:28 - run it notice it right away pulls some
227:32 - default one so for example title
227:33 - description and author so that is also a
227:36 - case but once in a while you might run
227:39 - into some errors so of course it's
227:41 - always better if you're explicit of what
227:44 - actually you're looking for and again
227:46 - your best friend is going to be control
227:49 - and space to see the options so now
227:51 - let's take a look at our options one by
227:53 - one i'm gonna look for the title i'll go
227:56 - to the next line i'll look for
227:58 - description of course and again if we
228:00 - want we can run prettify just so our
228:03 - code looks clean and then of course i
228:06 - can go with author and now we come to
228:09 - the person so let me run before the
228:11 - person
228:12 - as you can see as straightforward as it
228:14 - gets we have the property and of course
228:17 - in the site metadata we have the value
228:19 - so i'm looking here for the property and
228:22 - i get my my response so here i say title
228:24 - description author and i get back the
228:27 - properties
228:28 - with the values and of course in our
228:31 - code we'll access those values and do
228:33 - something meaningful now what happens
228:36 - with a person well
228:38 - person is an object right and since it
228:41 - is an object we shouldn't be surprised
228:43 - if i type here person and i get this red
228:46 - squiggly line because again we need to
228:48 - be more specific we need to say hey get
228:52 - me the person but more specifically
228:54 - since it is an object get me such and
228:57 - such property what are our options we
229:00 - have
229:00 - name or age so again we go back to the
229:04 - suggestions and we can clearly see that
229:06 - we have option for name as well as age
229:10 - again i run it and beautiful i get my
229:12 - person with both values now we have the
229:15 - array i believe it was simple data
229:19 - so let's just go here with simple data
229:21 - and if the array just has a simple item
229:24 - like we have with simple data we'll just
229:27 - get the array with those items so let me
229:29 - type simple data let me run it and there
229:32 - it is now of course i have simple data
229:34 - and whatever items i have so of course
229:36 - in our code we're going to access the
229:39 - array and then we can iterate over the
229:41 - items now what do you think is going to
229:44 - happen when we try to query complex data
229:48 - and not to be redundant but we'll have
229:50 - to be a bit more specific where we go
229:53 - with complex data like so so let me run
229:57 - here for some reason it just gives me
229:59 - that annoying suggestion so complex data
230:02 - and again the issue here is simple
230:04 - where each item is an object so in
230:08 - graphql we cannot just say hey get me
230:11 - the array of objects no you need to go
230:14 - with okay get me the array of objects
230:17 - but from that object this is the
230:19 - property that i'm looking for and i know
230:21 - that i keep pretty much repeating the
230:23 - same thing but this is crucial for
230:26 - understanding graphql since in my
230:28 - opinion if i really need to oversimplify
230:30 - everything
230:31 - this is the biggest difference between
230:33 - rest api
230:34 - and graphql as far as working with it
230:36 - again i'm not comparing them as
230:38 - technologies don't get me wrong what i'm
230:40 - talking about as far as the user biggest
230:43 - difference you need to be extremely
230:44 - specific so we need to go again with
230:47 - suggestions and check it out
230:49 - now i have name and age why well because
230:52 - these are the properties that i have in
230:55 - my object so if i go name and also if i
230:59 - go age and if i want to make everything
231:02 - pretty
231:02 - i just run prettify
231:05 - and then of course at this point i think
231:07 - i can zoom out a bit and then if we run
231:10 - not only i get the simple data so if we
231:12 - have single item array essentially where
231:15 - the items are not complex structures
231:18 - whether that's number whether that's
231:20 - string or whatever then we'll simply get
231:23 - the array and we'll have to iterate over
231:25 - and in this case though we need to say
231:27 - well what are we looking for so for
231:29 - example
231:30 - if i want complex data but i don't want
231:33 - the age i say get me the name just
231:36 - always remember if you have more
231:38 - subfields you need to request at least
231:41 - one otherwise you'll get an error and
231:44 - once we have a solid understanding how
231:46 - we're going to set up queries now let's
231:49 - take a look at the explorer and how it's
231:51 - going to make our lives easier to
231:54 - showcase how much faster we'll be able
231:56 - to set up our queries using the explorer
231:59 - why don't we try to recreate the same
232:02 - query using the explorer option instead
232:06 - so i'll remove everything just so you
232:08 - don't think that i'm doing some
232:09 - blackmagic there it is must provide a
232:12 - query string so obviously we have some
232:14 - kind of error
232:15 - now i'm going to click on the explorer
232:18 - and then again we just need to look for
232:20 - the same query now what was the query
232:23 - that we used because that was the site
232:25 - one so i click here and basically if the
232:29 - query or a field is going to have more
232:31 - options you will have essentially here
232:33 - this triangle on left hand side so i
232:36 - click on the query now up on the top
232:39 - these purple ones are going to be the
232:40 - arguments and we're not going to talk
232:42 - about them right now because i don't
232:44 - want to dump too much stuff on you right
232:46 - from the get-go but if you notice we
232:49 - have these fields so this build time of
232:52 - course doesn't have any subfield so i
232:54 - simply can click it and again i get some
232:56 - arguments and all that but as far as the
232:58 - value i can simply click it and again
233:00 - this returns the data object and then
233:03 - instead of the data object i have a site
233:06 - and build time so essentially i was
233:09 - looking for this build time field and i
233:12 - got the value back now i'm going to
233:14 - unclick the build time and of course
233:16 - we're looking for what we're looking for
233:18 - site metadata now of course i have
233:21 - author i have description i have simple
233:24 - data and title all the fields
233:26 - that have no more sub builds
233:30 - we can write away query and then the
233:32 - same goes for complex data and person we
233:35 - just need to click on the triangle so we
233:37 - open this up of course in this case we
233:39 - just need to be more specific okay i
233:41 - want age from the complex data and then
233:43 - when it comes to person
233:45 - i'm going to get both
233:47 - and hopefully it is clear that we can
233:49 - set up the same query within a matter of
233:52 - 10 seconds and that's of course why
233:55 - throughout the course we'll use the
233:57 - explore option instead
234:00 - congrats on completing your first query
234:02 - and now let's talk about our render
234:04 - options
234:05 - and in general we have to do we have
234:07 - static query and page query and the
234:10 - setup for both of them is very similar
234:13 - so once you grasp the setup for one
234:15 - you'll have no problem implementing the
234:17 - other one as well
234:19 - in general static queries are intended
234:21 - for regular components and page queries
234:25 - are used in the page components with
234:28 - that said we are allowed to set up a
234:30 - static query in the page component but
234:34 - not the other way around
234:35 - so you're not allowed to use page
234:37 - queries in simple components
234:40 - and the reason for that is because
234:41 - unlike static queries page queries do
234:44 - accept variables which makes them
234:46 - dynamic
234:47 - and later in the project we will
234:49 - implement the page query variable
234:51 - feature when setting up our pages
234:54 - programmatically
234:55 - lastly for static query we have two
234:58 - syntax options one using render props
235:01 - and one with use static query hook
235:04 - provided by the gatsby team
235:06 - and since the react hooks have become
235:08 - pretty much a standard and most likely
235:11 - that's the syntax you will encounter
235:13 - when working in las vegas we will use
235:15 - only to use static query hook for all
235:18 - our static queries just remember
235:21 - they both accomplish the same task just
235:23 - the implementation is a bit different
235:26 - all right
235:27 - and once we know our options let's pull
235:29 - data using use static query hook
235:32 - now in the next video we will set up
235:34 - everything from scratch since in my
235:36 - opinion it's important to understand how
235:38 - stuff really works not just blindly copy
235:41 - and paste the code
235:43 - but in this video since i want to
235:44 - showcase how fast we can get something
235:46 - on the screen we'll cheat a little bit
235:49 - and use code exporter option instead
235:53 - so back in my query i actually want to
235:56 - add the other property in a complex data
235:58 - as well so i'm just going to go with my
236:01 - name i'll run it and that is my result
236:05 - and like i said we'll use code exporter
236:09 - and once you open up the tab
236:12 - notice we have these options we have
236:14 - page query static query hook as well as
236:17 - the static query now since we'll
236:19 - practice with static query hook of
236:21 - course pick this option and then you can
236:24 - just select it here notice they provide
236:27 - this option of copying this to the
236:29 - clipboard and of course that's what i
236:32 - want to do so once you have this code
236:34 - just navigate
236:36 - back to our project and again i'll set
236:39 - up some examples just so you have a
236:42 - reference for later and we'll just call
236:44 - this fetch and then data js you can
236:48 - simply copy and paste the whole code
236:51 - like i just mentioned we will set up
236:53 - everything from scratch so you have a
236:56 - better understanding how stuff actually
236:59 - works but for now i just want to get
237:01 - something on the screen
237:03 - so let's save
237:04 - now you'll notice how they set up
237:06 - component name
237:08 - and then right away export as default
237:11 - and that just means that they can keep
237:13 - this generic name meaning since we're
237:16 - exporting as default it doesn't really
237:18 - matter what we call here inside of the
237:20 - file that's just a side note
237:23 - and of course i can navigate to index.js
237:26 - i think it's just going to make a bit
237:27 - more sense if we do it there and then
237:30 - i'll import my fetch data so import and
237:34 - i'm guessing i'm going to call it the
237:35 - same way i'll say
237:37 - fetch
237:38 - data and that is coming from and of
237:40 - course i'm looking in the examples and
237:43 - the file name is
237:45 - fetch data
237:46 - and then right below the header
237:49 - but still within main i'm just gonna go
237:52 - with fetch
237:53 - and data
237:55 - and if you see this string on a screen
237:57 - which you should let's see yeah there it
238:00 - is now of course i can see this giant
238:02 - string everything works now at this
238:05 - point it's not particularly useful i can
238:08 - clearly see the same info here in my
238:11 - sandbox now what's more interesting is
238:14 - the fact that i can access this data so
238:17 - i'm going to go back to the fetch data
238:20 - and then remember
238:21 - this is a giant object now at the moment
238:24 - we use json string file and all that
238:26 - that's good but instead what i want is
238:29 - to set up some kind of div here and then
238:32 - instead of this div why don't we set up
238:34 - a heading two
238:35 - with a person name
238:38 - and in order to practice a bit why don't
238:40 - we iterate over the complex data and i
238:43 - don't know show multiple people again
238:46 - just a small practice of how we can
238:49 - access data and don't worry of course
238:52 - since it is an object we can structure
238:54 - it and we'll do all that cool stuff
238:56 - later for now
238:58 - let's just do the old-fashioned way
239:00 - where we'll literally drill down to the
239:02 - necessary property so for example if i
239:05 - go with heading 2 i know that i can go
239:08 - back to the javascript land
239:10 - and i have the info inside of this data
239:13 - so we set up the query and then notice
239:15 - this result will be in the data just
239:18 - like in our sandbox so what we're
239:21 - looking for of course is this data
239:24 - variable and then i need to go site site
239:27 - metadata and more specifically i'm
239:29 - looking for the name of the person
239:31 - correct
239:32 - so
239:33 - let's set it up we're going to go with
239:35 - data since that is the name of the
239:36 - variable then cite it
239:39 - site meta
239:40 - and then data
239:42 - make sure that the property name is
239:44 - exactly the same
239:46 - then of course we have the person
239:49 - and of course i'm looking for the name
239:52 - so i'm going to save it and the moment i
239:53 - save i see john now if you have
239:55 - different value of course you'll see the
239:57 - different value and just to kind of
240:00 - hammer this home
240:02 - notice the complex data i want to do the
240:04 - same thing where right below the heading
240:07 - 2 now i just want to iterate over that
240:10 - array and play a paragraph with both
240:13 - values the name and the h and we're
240:16 - going to go with another div and then
240:18 - instead of this div i want to look for
240:20 - the property by name of complex data so
240:25 - in order to speed this up a little bit
240:27 - i'm just going to grab site metadata
240:29 - again
240:30 - later we'll take a look at the better
240:33 - options instead for knowledge just copy
240:35 - and paste
240:36 - and let's do it the long way and of
240:38 - course i'm looking for complex data that
240:41 - is my array so i can use the map method
240:43 - and then i'll just reference each object
240:46 - as the item and then as far as what i'm
240:49 - returning well like i said i'm just
240:51 - going to return a paragraph and in this
240:53 - case since i'm returning an array i need
240:57 - to add my key of course that is just a
240:59 - reacting when we have a list so keep
241:02 - prop and we need to pass in something
241:03 - unique so in this case i'm just going to
241:05 - grab the index and then as far as the
241:07 - values well i have the object correct
241:11 - and i have two properties age and name
241:14 - and it's represented by my item so here
241:17 - simply i can say
241:19 - item dot name and then colon and then
241:23 - another set of curly braces and i'm
241:25 - going to go with item
241:27 - and age
241:28 - and once i save i see john 32 and susan
241:32 - 21 so that's how easy we can set up the
241:36 - query and then once we have the data we
241:39 - could pull it in our components using
241:42 - gatsby
241:43 - beautiful we were successful with
241:45 - getting the data on screen so now of
241:47 - course let's recreate everything from
241:50 - scratch and
241:51 - in a process we'll cover what is graphql
241:55 - what's the deal with use static query
241:58 - and all that good stuff so i'll remove
242:00 - everything
242:01 - and i'll just create a new component
242:04 - using my snippets and as you can see the
242:06 - name here is fetch data but i purposely
242:10 - created with a lowercase because i want
242:12 - to showcase what giant error you're
242:15 - going to get if you'll try to use the
242:18 - huge static query hook
242:21 - with a component that has the name with
242:24 - lowercase so for time being let's just
242:26 - write heading 1 and we're going to go
242:29 - with hello
242:31 - from
242:32 - fetch
242:33 - data let's save that one and of course
242:35 - the moment
242:36 - i have this again annoying thing there
242:39 - and then once i refresh
242:40 - everything is correct so we go with
242:43 - hello from fetch data and then in order
242:45 - to use use static query hook we need two
242:48 - things we need a hook
242:50 - and we also need a graphical tag
242:53 - template now both of them are named
242:56 - exports so when we import we definitely
242:58 - need to set up the curly braces and then
243:00 - we say use static
243:03 - query and also comma and then graphql
243:07 - now since i'm using the snippets once in
243:10 - a while it spits back the snippet for
243:12 - something else so in my case i'm just
243:14 - going to go with graphql and then from
243:16 - academy so once i have these two imports
243:20 - you need to invoke use static query but
243:23 - then it's looking for an argument of
243:27 - graphql
243:28 - and then since it is a tag template you
243:31 - pass e in the query
243:33 - and if you take a look at their example
243:36 - so if you take a look at the code
243:38 - exporter notice how they pass graphql we
243:41 - the query right away in the use static
243:44 - query
243:45 - my preference is always to set it up
243:48 - above here so above the component
243:50 - because that way i believe
243:52 - my component code is cleaner so i'm
243:55 - going to get back and i'm just going to
243:57 - simply create a variable and again name
244:00 - is really up to you but i'm going to go
244:02 - with get data and then we go with this
244:05 - graph
244:07 - ql and like i said this is a tag
244:10 - template and this should actually ring a
244:13 - bell why well because if you remember
244:17 - when we were setting up the button
244:19 - what we were doing
244:20 - well we had styled
244:22 - that button so we're creating an element
244:25 - and again i was setting up the tag
244:28 - template and the only difference is the
244:31 - fact that in style components we pass in
244:34 - the css in the tag template and then
244:37 - those styles are applied to the button
244:39 - now in gatsby case we pass in the query
244:43 - so again under the hood gatsby does
244:46 - something with the query that we provide
244:48 - but it doesn't change the syntax again
244:50 - we're using this tagged template
244:52 - basically a javascript thing where we
244:55 - just go with a tempo literals and then
244:58 - we pass in some data so in our case what
245:01 - is our data well of course that is the
245:03 - query now where we can get the query
245:05 - well we need to go back to the sandbox
245:08 - and then we have a few options either
245:11 - you can just grab the whole thing but
245:13 - since i haven't covered the query
245:14 - keyword as well as the name and what
245:18 - gotcha you should be aware of i'm just
245:21 - going to take everything starting with
245:23 - the curly brace and including the
245:25 - closing one and i'll navigate back copy
245:28 - and paste and we'll save now once we do
245:31 - that
245:32 - we get back some kind of value that will
245:34 - make sense to use static query and that
245:38 - is the hook that we need to invoke now
245:41 - since it is a react hook
245:43 - all the react hooks rules apply meaning
245:46 - we can only run it in a functional
245:50 - component okay
245:51 - that looks about right then
245:54 - we can only run it inside of the
245:57 - function so you cannot run it outside
245:59 - here and lastly we can only run it if
246:02 - the component name is uppercase and
246:06 - you'll see that in a second if i just go
246:08 - with const data and don't worry we'll
246:10 - recreate everything from scratch one
246:12 - more time in a second and if i just
246:15 - invoke this one we'll have a big fat
246:17 - error right now and the reason for that
246:20 - is because use static query is called in
246:23 - a function fetch data that is neither
246:25 - and you're not i think at this point i'm
246:27 - just going to go to the bigger screen
246:28 - sorry my apologies so we have here uh if
246:32 - we refresh
246:33 - we're going to have this react hook use
246:35 - static query is called in function fetch
246:38 - data that is neither a react component
246:41 - nor a custom react function now again
246:44 - the reason why is that happening because
246:47 - the name here needs to be with a
246:49 - uppercase
246:50 - so once you set it with a capital case
246:53 - now of course we're not going to get
246:55 - that error so let me set it and then i
246:58 - want to pass in that get data variable
247:01 - again
247:02 - if you don't prefer setting up this way
247:04 - of course you can just directly pass in
247:06 - graphql with a query so i'm going to go
247:09 - here with get data and actually first i
247:13 - just want to cancel log it so i just
247:15 - want to see what i'm going to be getting
247:16 - back so i'm going to go with console.log
247:18 - and notice i'm just going to cancel log
247:20 - the result that i'm getting from my use
247:24 - static query and then once i save
247:27 - and i guess i'm just going to do that on
247:29 - a big screen because
247:31 - i think you'll see that way better and
247:34 - then once we refresh we should see the
247:36 - site
247:37 - now what does that site represent
247:39 - well that's the object that we're
247:41 - getting back right
247:42 - this is the object that we're getting
247:44 - back that's it
247:46 - and of course since we'll assign it to
247:48 - some kind of variable
247:49 - the value data will be assigned to that
247:51 - variable and then inside of that
247:53 - variable we'll have site site metadata
247:56 - and of course then we already know the
247:58 - drill then inside metadata we have
248:00 - author we have complex data and all that
248:04 - good stuff and at this point it is
248:05 - really a javascript thing
248:07 - whichever method you prefer using when
248:10 - you're pulling the data out of the
248:12 - object well that's the one that you're
248:14 - going to use
248:15 - so for now what i'm going to do is
248:17 - simply go with const and data again some
248:20 - kind of variable and this is going to be
248:22 - equal to that object that i'm getting
248:25 - back and then if i go the long way i'm
248:28 - going to go with heading 2
248:30 - and let's just say name here
248:32 - so right here name so again i go with
248:35 - data i go with cite and i'm gonna go
248:39 - with site meta
248:41 - meta
248:42 - and then data
248:44 - and then i'm looking for a person
248:46 - and more specifically i'm looking for
248:48 - the name and then once we save and once
248:50 - i refresh my
248:52 - name is john so that's definitely one of
248:55 - the options that we can use so i'll
248:57 - leave it for your reference and i'll
248:59 - just comment that out
249:00 - and then another option we have is of
249:02 - course the structuring so since i know
249:05 - that i'm getting back the object i can
249:07 - right away destructure it i can say you
249:10 - know what in the object get me the site
249:12 - property now the thing is
249:15 - if we take a look site property is an
249:18 - object itself right so what are we
249:20 - really looking for well we're looking
249:22 - for site metadata so i can just say all
249:25 - right so get me site
249:27 - meta and then data okay
249:30 - that is the object itself so i can keep
249:32 - on structuring this way and since i
249:34 - don't want to keep on doing this i'm
249:36 - just going to go with title which is a
249:38 - simple property so i'm going to say
249:40 - title now title is not an object it is
249:43 - just a value so i can simply save it and
249:46 - now instead of doing this whole dance of
249:48 - data sites and metadata each and every
249:52 - time you can simply go with a heading
249:55 - two and i can just write site title
249:58 - is and then colon and then i can just
250:01 - access the title like so so save it and
250:04 - there it is i have site title is simply
250:07 - recipes again at this point it's really
250:09 - just javascript so it really comes down
250:12 - to your preference some people find the
250:15 - structuring confusing
250:17 - and therefore they're used either the
250:19 - long way of accessing the value or you
250:22 - can also set up a variable assign it to
250:26 - data site site metadata and then instead
250:28 - of accessing all the time using this
250:32 - long way you can just access the
250:33 - variable and then for example look for
250:35 - the person and don't worry throughout
250:37 - the first project and the other ones as
250:40 - well i'll try to switch it up so we're
250:43 - not using all the time the same syntax
250:45 - but of course in my case
250:48 - for the most part i always go the
250:50 - destruction route instead
250:52 - and one more time let's go over the
250:54 - setup where we do need to have a
250:56 - component
250:57 - and then we import use static query hook
251:00 - and all react hooks rules apply as well
251:04 - as graphql tag template
251:06 - now in the graphql tag template we pass
251:09 - in the query
251:11 - and then we can either
251:13 - place it right away as an argument in
251:16 - the use static query or we can just
251:19 - assign the value that we're getting back
251:21 - to some kind of variable and this one we
251:23 - can do outside of the component but
251:26 - the use static query we need to invoke
251:28 - it inside of the component and per react
251:32 - hooks rules the component names must
251:35 - start with a uppercase letter and then
251:38 - once we invoke use static query with our
251:41 - variable or with graphql with a query
251:45 - we're just going to be getting back the
251:47 - object now which object well same one
251:50 - that we can see here in our sandbox
251:54 - basically
251:55 - this is what we're going to be getting
251:57 - back
251:58 - the data object and then we have
252:01 - multiple ways how we can pull that data
252:03 - out either the structuring either
252:05 - assigning to variables or we can simply
252:07 - drill down to the property we're looking
252:09 - for
252:10 - and then we'll just display that data on
252:13 - screen
252:14 - as you were setting up the first query
252:16 - i bet you found one thing extremely
252:18 - annoying and that is a simple fact that
252:20 - each and every time we were setting up
252:22 - the query or we were accessing the data
252:25 - we had to use this site metadata
252:29 - and trust me this is not even a long
252:32 - name once you start working with images
252:34 - once you start working with cms these
252:37 - names will get even longer it's not like
252:40 - i can just randomly
252:41 - start typing something else right i need
252:44 - to be specific of what i'm looking for
252:45 - however there is a way around it where
252:49 - basically in graphql we can set up
252:51 - aliases so before we cover keyword as
252:54 - well as the name why don't we take a
252:56 - look at how we can add alias because i
252:59 - think it's just going to make our lives
253:01 - much easier
253:02 - and we simply need to go back to our
253:04 - query here and we need to come up with
253:07 - the name so call it bugs bunny call it
253:09 - bubble it doesn't really matter and in
253:12 - my case i'm just going to go with info
253:14 - and then the syntax is following where
253:16 - you need to add a column now keep in
253:18 - mind one thing
253:20 - we're still looking
253:22 - for this property it's not like i'm just
253:25 - randomly came up with a name what i'm
253:27 - giving here is the alias so when i'm
253:30 - going to be accessing this data then
253:32 - instead of using this site metadata blah
253:35 - blah blah
253:36 - i can simply run it and notice my
253:38 - response i have info so nowhere in my
253:42 - response i have the site meta data so
253:44 - when i'm setting up the query i'm saying
253:46 - yeah get me this field but from now on
253:50 - i'll access using this name instead and
253:53 - now of course we want to test it out in
253:55 - our project and please be aware that the
253:58 - moment we'll change it just in a query
254:01 - we will have a big fat error and i'm
254:04 - doing that on purpose so let's go back
254:06 - over here and then inside of this site
254:08 - metadata like i said i'm gonna go with
254:11 - info instead we will save but there is
254:14 - going to be a big fat error now can you
254:17 - guess why we have that error well let's
254:20 - scroll down let's scroll down let's
254:21 - scroll down now
254:23 - is anywhere in our response the property
254:26 - by the name of site metadata since i'm
254:30 - trying to destructure it and keep in
254:32 - mind
254:33 - even if you're using this long way
254:35 - you'll still have the roi
254:37 - because site object does not have the
254:40 - site metadata property anymore in
254:43 - response
254:44 - what name we have
254:45 - well info since that's the alias so
254:48 - instead i'm going to change this around
254:50 - and i'm going to say info and we'll do
254:53 - it over here as well so all right info
254:56 - and then once i save again it's annoying
254:59 - but we'll have to refresh and now of
255:01 - course everything works site title is
255:04 - simple recipes so that's how we can add
255:07 - alias in our graphql query if we have a
255:11 - long and annoying name or we just simply
255:14 - want to be hipsters as you're going to
255:16 - be progressing with your gazp
255:18 - applications and setting up more and
255:20 - more complex queries
255:22 - eventually you will come across the
255:23 - syntax where query keyword and query
255:26 - name is used
255:28 - like i mentioned at this point in our
255:29 - journey it's optional but later once
255:32 - we'll work with more complex queries we
255:35 - will use query keyword now few gotchas i
255:38 - like to mention are following
255:40 - query names must be unique and once you
255:43 - start tinkering with query data in the
255:47 - file you might need to run gas be clean
255:50 - to clean the cache and restart the
255:53 - server so let's start with a query name
255:56 - please understand one thing where yes
256:00 - you can run the same query in multiple
256:03 - files
256:04 - you're not limited one query per one
256:07 - file no that's not what i'm saying what
256:10 - i'm saying is that if you're setting up
256:13 - multiple queries with the same name yes
256:17 - you're going to get an error so please
256:20 - be careful basically every time you use
256:22 - the query name make sure that it is
256:25 - unique that's first second if i navigate
256:28 - back to my project and if i simply write
256:32 - a query keyword
256:34 - everything should work
256:36 - now i emphasize the work should
256:38 - unfortunately you'll see
256:41 - this error and even though i keep on
256:43 - refreshing
256:44 - well i can clearly see that in the cache
256:47 - there is some kind of bug now again in
256:50 - order to avoid it because i know that
256:52 - this syntax is correct i just use the
256:54 - query that's it nothing else so i
256:57 - shouldn't be getting this bug
256:59 - now in order to avoid it i simply need
257:02 - to clear everything i'll run gatsby
257:05 - and unclean and of course we'll run
257:08 - gatsby built
257:10 - or i'm sorry what built develop so we're
257:13 - going to go with gatsby develop and
257:15 - you'll see when the dev server spins up
257:19 - that we won't have that error anymore so
257:22 - now let me just wait a little bit
257:24 - and then once the dev server is going to
257:27 - be up and running you'll see that our
257:30 - query is going to be correct so let me
257:33 - go back and there it is as you can see
257:36 - it wasn't the query that was causing the
257:38 - issue it's basically the cache so if you
257:42 - run into that problem where you can
257:44 - clearly see that the query is correct
257:47 - but you're still getting some kind of
257:49 - cashback but make sure to run get be
257:52 - clean and one more thing i want to
257:54 - mention if you just use query keyword
257:57 - you're going to be in good shape meaning
257:59 - i can grab the whole file copy and paste
258:02 - and everything is going to work again
258:04 - we're just talking about the name so the
258:06 - name that comes after the query keyword
258:10 - those ones have to be unique so if you
258:12 - go with first query and then select the
258:15 - whole file and again since i made some
258:17 - changes there's going to be this bug but
258:19 - if you just grab this whole query
258:21 - and use it in a different component yes
258:25 - you will get an error because query
258:27 - names must be unique
258:29 - all right and once we have covered use
258:32 - static query hook now let's take a look
258:34 - at our page query option and for this
258:37 - temporarily i will create a page but
258:40 - eventually it's not going to be part of
258:41 - our project so i'm going to go with new
258:43 - file and i'll just call this testing gis
258:47 - now same rules apply of course we need
258:49 - to export as default okay that's good
258:52 - and then i'll right away rename it even
258:54 - though in this case it's not really
258:55 - going to make much difference and then
258:57 - we're going to go with heading 2
258:59 - and then we're going to go with testing
259:02 - and the way it's going to work we'll
259:04 - again import graphql
259:07 - tag template
259:08 - but in this case the setup is going to
259:10 - be a bit different so let me close the
259:13 - sidebar and first i just want to check
259:15 - whether i have the page to begin with so
259:18 - let's say testing and for some reason i
259:20 - cannot see it okay that's interesting
259:22 - even though i saved it and again i have
259:25 - these weird bugs okay and now everything
259:27 - works so as you can see i just needed to
259:30 - keep on refreshing and now i can see my
259:32 - testing all right so that's a great
259:34 - start
259:35 - and then yes we will import our graphql
259:38 - tag template and then of course it is
259:41 - coming from the gatsby and then i'll use
259:44 - the same query just because i don't want
259:46 - to overcomplicate things but in this
259:48 - case we're going to be exporting the
259:49 - variable
259:50 - and we'll be able to access this data
259:53 - in the props now just so you don't think
259:56 - that there's some black magic i simply
259:59 - want to show you that by default every
260:02 - time you create a page
260:04 - gatsby will provide already a bunch of
260:07 - props so if i look for props
260:09 - and then just console log the props just
260:11 - like in any normal component if i go to
260:14 - the bigger screen and again if i go with
260:17 - testing
260:18 - i'll see in a console that gatsby
260:20 - already provides a bunch of things so
260:22 - notice that's my prop object and notice
260:25 - all the cool things gasb already
260:28 - provides now the kicker here is
260:30 - following that once we set up our
260:33 - graphql tag template assign it to a
260:35 - variable and export that variable
260:38 - the data that we're getting back so
260:41 - again we're talking about this one
260:43 - whatever we have access over here that
260:46 - one will be available in the data
260:48 - property in our props object now as you
260:52 - can currently see
260:53 - there is no data property so of course
260:56 - we do need to set up that query so let's
260:59 - go back to the testing site and i'm
261:01 - going to do it over here so we do need
261:03 - to export that's a must for the syntax
261:06 - to work then we go with const and in
261:08 - this case i'm just going to call this
261:10 - data and then we go again with graphql
261:14 - so graphql that's our tag template that
261:18 - is coming from the gatsby and then again
261:20 - we just need to pass in the query so i'm
261:23 - just going to go back to the fetch data
261:26 - and in a second i'll show you what error
261:28 - we're going to get if we run with the
261:30 - same name
261:31 - just to hammer that point home but for
261:34 - the time being i'll just take everything
261:36 - apart from the query and first query so
261:40 - let's take this one
261:41 - let's copy
261:43 - and paste let's save it and then we'll
261:46 - see whether we need to refresh or not so
261:48 - in this case i'll refresh and now notice
261:50 - something interesting
261:52 - where now we have the data one right so
261:56 - once we set up our variable
261:58 - once we export it and of course once we
262:02 - pass in the query in a tag template
262:05 - then we have access to the data in the
262:08 - data property in the process again i
262:10 - know for some students this is a bit
262:13 - confusing where they're like wait a
262:15 - minute so i'm just setting up the
262:16 - variable here and then i have the value
262:18 - in the props yes behind the scenes at
262:21 - the build time so when our project gets
262:24 - created gatsby is smart enough to read
262:27 - this value and then just provide the
262:29 - data that we're getting back
262:31 - in that data property
262:33 - and then from that point
262:35 - again it's just simple javascript of how
262:38 - we want to access the property values so
262:42 - in this case we know that we can
262:45 - destructure right away in function
262:47 - arguments
262:48 - so i can simply say you know what
262:50 - instead of looking for the whole props i
262:52 - just want to get that data and just to
262:55 - showcase another way how we can access
262:57 - the value i can simply go with const and
263:00 - author
263:02 - and that one will be equal to my data
263:04 - and then of course i have the info since
263:06 - i use the alias and i'm sorry i need to
263:09 - go inside my apologies since i'm getting
263:11 - back the object that is in my data and
263:14 - then of course i have site i have info
263:17 - and then of course i have the author as
263:20 - well so some people prefer this syntax
263:22 - instead again
263:24 - that's really up to you if you like to
263:26 - structure everything
263:28 - you can do that if you like to do the
263:31 - long way where you drill down the
263:32 - properties in the return that's also an
263:35 - option or you can assign to a variable
263:38 - instead so here let's just change the
263:40 - round to author
263:42 - and that one will be equal of course to
263:45 - my variable
263:46 - and we're in good shape so once we save
263:49 - of course i have author
263:51 - john smilker now just to showcase what
263:53 - happens if we use the same name well let
263:56 - me copy and paste the first query
263:59 - and i'm going to go back to the testing
264:00 - one okay i know that this syntax should
264:03 - work but i right away have this error
264:07 - and basically this error is just going
264:09 - to tell me that we have multiple queries
264:12 - so notice here multiple root queries
264:14 - found first query and first query only
264:17 - the first first query will be registered
264:20 - so again if you just remove the first
264:22 - query if you just leave it as a query
264:25 - everything is going to work so there is
264:27 - no error if you just keep using query
264:29 - keywords however the moment you add the
264:32 - name
264:33 - make sure that that
264:34 - name is unique and let me also just
264:37 - emphasize the fact that yes you can't
264:40 - use the regular use static query hooks
264:44 - in the pages
264:45 - you can do that however you cannot use
264:48 - page query
264:50 - in the components you can only use it in
264:52 - pages so essentially in the files that
264:55 - are sitting in the pages directory
264:58 - because in the page queries we can also
265:01 - pass in the variables which we're going
265:04 - to do a little bit later and effectively
265:06 - that way we can make pages
265:08 - programmatically again something that
265:10 - we're gonna do later and don't worry if
265:13 - at the moment you're a bit iffy on any
265:16 - of this stuff remember as we're gonna be
265:18 - progressing with of course we'll write
265:20 - more and more queries we'll set up more
265:23 - and more use static queries page queries
265:25 - and all that and the more practice
265:27 - you'll do the easier is going to get i
265:31 - think at this point we're more than
265:32 - comfortable with setting up the queries
265:34 - and displaying the results in the
265:36 - browser so let's skip it up a notch and
265:39 - start interacting with our file system
265:42 - in order to do that we'll have to use
265:44 - yet another gatsby plugin and plugin
265:47 - name is source file system if you
265:50 - remember we actually already installed
265:51 - the plugin it was one of the
265:53 - dependencies of the gatsby plugin image
265:56 - but just to repeat the steps and since i
265:58 - have nothing better to do i'll install
266:00 - it one more time also we'll set up the
266:03 - plugin as an object
266:05 - so in the video i'll set up the code
266:07 - first and then explain it in detail as a
266:11 - side note if you ever want to check
266:13 - whether you have a plugin installed just
266:15 - go to the package.json and then
266:18 - look for the dependency name and then if
266:20 - you have it in dependencies then of
266:22 - course you are in good shape but then
266:25 - like i said i have nothing better to do
266:27 - so i'm just going to stop the server and
266:29 - then we'll navigate back to the plugins
266:32 - and the plugin name is source file
266:34 - system now it's definitely going to be
266:37 - one of the top plugins so you can just
266:39 - find it here or of course you can use
266:42 - search box and then navigate to the docs
266:45 - the command that you're looking for is
266:46 - this one so copy and paste like so
266:51 - now i'm going to close the sidebar for
266:53 - the second and then we're going to
266:54 - navigate back to the docs the first
266:57 - sentence says it all a gatsby source
266:59 - plugin for sourcing data into your gas b
267:02 - application from your local file system
267:06 - now as far as the config let's keep on
267:09 - scrolling keep on scrolling we need to
267:11 - set it up as an object and at this point
267:14 - you have two options you can either type
267:17 - everything in the gatsby config or it's
267:20 - always my preference when i work with a
267:22 - docs just copy and paste and of course
267:26 - once i do that i just modify the code
267:29 - so it matches to whatever i want to do
267:32 - but that way i just avoid the
267:34 - unnecessary typos so just grab this
267:37 - first object again
267:39 - make sure that the syntax is correct
267:41 - though make sure that you get both curly
267:43 - braces the opening one and the closing
267:46 - one and all that so make sure you copy
267:48 - that
267:49 - then navigate back and of course we need
267:51 - to work in the gatsby config so let me
267:54 - navigate to this file and for time being
267:56 - i'll close the terminal
267:58 - and of course just remember that we'll
268:00 - have to restart it copy and paste and
268:03 - now i just want to change some values
268:05 - around and then once i change the values
268:07 - then of course i'll go over
268:10 - what is happening as far as the logic so
268:12 - in my case i'm going to go with name of
268:14 - images and then instead of looking for
268:18 - the pages directory i'll remove that
268:20 - sucker and then i want to go to assets
268:23 - and
268:24 - of course in the assets i do have the
268:26 - directory for the images
268:28 - so i'll say images instead let me save
268:32 - it and now let me restart the server
268:35 - just so i can see that everything works
268:38 - because if you'll provide a wrong path
268:41 - it right away will spit back the warning
268:43 - and the error that basically the path
268:45 - that you provided does not exist now
268:48 - since i don't want to restart the server
268:50 - i'm not going to show you what is the
268:52 - warning just trust me that's the case
268:55 - now
268:56 - what is happening here as far as the
268:58 - config well we have this resolve
269:01 - property and here we just pass in the
269:04 - name of the plugin so in our case it is
269:07 - gatsby source file system now let me
269:09 - quickly double check yep notice there
269:11 - are no warnings so i'm in good shape and
269:14 - then we have this options object and
269:16 - then for this particular plugin
269:18 - we have two properties we have a name
269:21 - property which is just your name for the
269:24 - resource that you're providing so for
269:26 - example if you don't like my name you
269:29 - can simply set up here as photos
269:32 - and yes in a few videos i'll show you
269:35 - where we use that in the graphql but
269:38 - again keep in mind this is your name for
269:41 - the resource so sky's the limit you're
269:43 - not limited to using the same name as
269:47 - the directory name and then we need to
269:49 - provide a path
269:51 - and here we need to provide a absolute
269:53 - path and a node we have this underscore
269:56 - underscore their name
269:58 - so what underscore underscore their name
270:00 - is doing it sets up a absolute path to
270:04 - the directory where the file is sitting
270:06 - so in our case we have get b config this
270:09 - is in a root correct so we get the
270:11 - absolute path
270:13 - to the root and then we just point to
270:15 - that specific folder so in my case
270:18 - source
270:19 - assets and images
270:21 - if you have a different folder of course
270:23 - you set up a different path for instance
270:25 - if you didn't
270:27 - set up a asset if you just went with
270:29 - images of course you just go with source
270:32 - and images and of course we need to do
270:35 - that because eventually we will host the
270:36 - application and it's not like the same
270:40 - path is going to be for example on
270:41 - nutsify as it is on my computer okay
270:45 - hopefully that is clear and the way it
270:47 - works is following so essentially we
270:50 - come up with the name we come up with a
270:52 - resource so now when we'll be using our
270:56 - queries
270:57 - we'll have access to all those files but
271:00 - just keep in mind
271:02 - that as far as queries are concerned
271:04 - we'll only have access to the images
271:07 - directory meaning whatever files you
271:10 - have in this directory those ones you'll
271:13 - be able to access so it's not like
271:16 - as a magic you just access all your
271:19 - files no on purpose
271:21 - you are setting up the options where you
271:23 - say okay so get me only the images and
271:27 - the name for this resource is going to
271:29 - be images
271:30 - now what is the benefit of that well the
271:32 - benefit is the fact that we can have
271:34 - multiple instances so for example i can
271:37 - copy and paste and i can say you know
271:38 - what
271:39 - this is going to be a instance for my
271:42 - css so i'll call this styles and then of
271:46 - course i'll change the directory because
271:48 - it's not images anymore
271:50 - if i remember correctly it was css and
271:53 - then once we save and then once we spin
271:55 - up the dev server one more time
271:57 - now i'll have both of these directories
272:00 - available
272:01 - now i'll have nine files at my disposal
272:04 - because if i remember correctly i think
272:06 - i had eight images and then i have one
272:09 - four main choices and then of course if
272:11 - i want to have access to the data then i
272:14 - can add the data as well so every time
272:17 - you'll need to access another resource
272:19 - you'll set up another instance and of
272:22 - course you'll add your own name now why
272:25 - do you want to add the name and actually
272:27 - a name that makes sense at least to you
272:30 - well it's simply because when you'll be
272:32 - setting up the query of course if you
272:34 - have two of these instances now you're
272:36 - getting all the files
272:38 - but imagine the scenario where you're
272:40 - like okay you know what just get me the
272:43 - images i want to do something with
272:44 - images and then you have this one lonely
272:47 - css file in the middle of it so of
272:49 - course when you'll be setting up the
272:51 - query you graph your query you'll
272:53 - explicitly say hey
272:55 - i want to do something i want to get
272:57 - those files but only get those files
273:00 - where the source instance name and that
273:02 - is just a official name for this one in
273:05 - graphql is equal to images or it is
273:08 - equal to styles and i'm not sure whether
273:11 - you're expecting a mine grenade but i'll
273:14 - throw it anyway
273:15 - and first i'll just start by copying and
273:17 - pasting and then we'll just comment out
273:20 - and i want to showcase that technically
273:22 - we can
273:24 - get all the files so for instance here i
273:26 - can just say project and then instead of
273:29 - assets instead of css so for example i
273:31 - can just get all the assets that's also
273:34 - allowed or i can simply get the whole
273:37 - sources folder that is also an option
273:40 - and you're looking at it and you're like
273:43 - okay weirdo
273:44 - then why we're not doing that
273:46 - why we did this whole song and dance
273:48 - where you showcase the images then you
273:50 - show these files i just want to get my
273:53 - entire project
273:54 - yeah but keep in mind that there are
273:56 - trade-offs at this point i'm getting all
273:59 - the files
274:00 - all the files that i have in the source
274:03 - but imagine this scenario where in my
274:05 - project
274:06 - i'll only be working with images
274:09 - that's the only need that i have for
274:11 - source file system so every time i'll be
274:14 - setting up the query
274:15 - i'll have to jump through the hoops just
274:17 - to get to this one and at this point it
274:20 - really comes down to your preference
274:22 - and what you're trying to do in your
274:24 - project
274:25 - if you just need to access to this one
274:27 - resource whether that is images whether
274:30 - that is styles whether that is markdown
274:32 - posts or whatever
274:34 - then you just set up this one instance
274:36 - where you point to that folder and trust
274:38 - me it's just going to be easier to work
274:40 - with those files
274:41 - because you don't have to spend that
274:43 - much time in a graphql basically
274:47 - filtering out the images now if of
274:49 - course for some reason in your product
274:52 - you want to have access to your entire
274:56 - file pool of course definitely just set
274:58 - up the source and you're in good shape
275:00 - just keep in mind that when you'll be
275:01 - setting up those graphql queries you'll
275:03 - have to do way more work
275:06 - just to get to a specific file
275:08 - compared to these two options so that's
275:10 - why i'll remove my last example and you
275:14 - know what i'll add the styles but we'll
275:16 - do that in a few videos
275:19 - so i don't overwhelm you
275:21 - and now of course i want to uncomment
275:23 - everything and again i'll save it and
275:27 - just stay on the safe side i will stop
275:30 - and start one more time of course you
275:32 - don't have to do that if you're not
275:34 - adding these changes here and once the
275:36 - server is up and running then of course
275:39 - we can navigate to the sandbox and see
275:41 - what fields we have with this plugin all
275:44 - right and once we have our plugin in
275:47 - place we have access to two fields
275:50 - we have access to file field
275:53 - and we have access to the all file
275:56 - now the difference is that with a file
275:59 - field we'll be working with
276:01 - single file node now if we work with all
276:04 - file this just means that we're working
276:06 - with collection of data and this is
276:10 - going to be the same with our future
276:13 - source plugins as well so for example
276:15 - when we'll be setting up the recipes for
276:18 - a recipe there's going to be a single
276:20 - query there's going to be a recipe query
276:23 - now for all the recipes if you want to
276:25 - work with collection of that data then
276:27 - of course we'll work with all contentful
276:30 - recipes or all strappy recipes so get
276:33 - comfortable with this all that just
276:35 - means that you're working with
276:36 - collection of data now it doesn't mean
276:39 - that it magically creates that data if
276:42 - in the images i'll have only one image
276:45 - it will treat it as a collection
276:46 - basically we'll get back the array but
276:48 - of course there's going to be one item
276:50 - so hopefully you get the gist and we'll
276:52 - start with all file
276:54 - so i'm just going to show you how we can
276:55 - work with collection and don't worry of
276:57 - course we'll practice with file as well
277:01 - and as you can see of course i have more
277:03 - options i have my triangle and once i
277:05 - click it here at the top i have my
277:08 - arguments which we're going to actually
277:10 - cover in the next video and then we have
277:13 - quite a few fields here and as you can
277:16 - see we have more options and all the way
277:19 - on the bottom we have this field by the
277:20 - name of total count
277:22 - and as i can clearly see with my lonely
277:25 - checkbox that effectively it just
277:28 - returns a value so click it here and
277:31 - i'll run it of course i get back my data
277:33 - okay that makes sense and then i have
277:36 - this all file and total count now total
277:38 - count is date which again just
277:41 - underscores the point that i was making
277:43 - in the previous video effectively we're
277:46 - pointing to the images folder
277:48 - so if i were to go back and then in the
277:51 - source
277:52 - and in the assets i'm just going to copy
277:54 - one of these images i don't know which
277:56 - one doesn't really matter so i'm just
277:58 - gonna make a copy here
278:00 - and
278:01 - if i navigate back now and if i refresh
278:04 - the browser and then run it one more
278:06 - time
278:07 - what do you know
278:08 - of course the value right now is nine
278:10 - why well because i increased the amount
278:14 - of files that i have in that resource so
278:17 - again hopefully it is clear that we have
278:19 - that one resource we have that images
278:21 - and this is what we're working with okay
278:25 - that's a great start now if you want to
278:27 - interact with the list of those assets
278:29 - meaning if you want to interact with all
278:32 - of those files you need to look for the
278:34 - nodes now the old way was doing edges
278:37 - and then the field name was node inside
278:39 - of it but i'm not going to show it i
278:41 - mean it's been already a long time since
278:43 - we're using nodes so i'll just stick
278:46 - with nodes but again just remember
278:48 - maybe in some old source codes you might
278:51 - see the edges and then more specifically
278:54 - and the way it works when we run nodes
278:56 - for every instance of course in our case
278:59 - what is our instance that is the file
279:01 - we're getting back to node
279:03 - and in that node we have more options
279:06 - that's why again we have this error
279:08 - where graphql is complaining that
279:10 - there's more sub builds now why is that
279:13 - well because each instance is
279:15 - represented by the node what is a node
279:18 - well if we navigate back to our guides
279:20 - being config we remember the complex
279:22 - data
279:23 - and remember i said this is an array and
279:25 - then each item is an object and a node
279:28 - has the same structure basically it is
279:30 - an object with bunch of properties now
279:33 - of course their setup is way more
279:35 - complex where they have properties that
279:38 - are actually objects that have more
279:39 - subfields and all that but the idea is
279:42 - exactly the same and if you remember
279:45 - what steps did we need to take in order
279:47 - to access name or essentially to avoid
279:50 - that error when we were working with
279:53 - complex data well we needed to be more
279:55 - specific correct so in the nodes i can
279:58 - see these are my values and effectively
280:01 - these are the subfields that i have
280:03 - access to now again some of them
280:06 - just return a value correct some of them
280:09 - like for example child image sharp
280:12 - something that we're going to work on
280:13 - when we set up gadgets the image well
280:15 - that's actually a pretty complicated
280:18 - object where we can drill down multiple
280:20 - levels
280:21 - and as far as what values i want to see
280:23 - well i at least need one correct so i'm
280:27 - gonna go with
280:28 - i guess relative path here and then once
280:31 - we run it notice these are going to be
280:34 - all my files again i have the nodes like
280:36 - i said each file is represented with
280:39 - this node so eventually when we work
280:42 - with recipes each recipe will be
280:44 - represented by that in this case it's a
280:46 - file so it says relative path and here
280:48 - it says logo svg now i can just look for
280:52 - the name for example we can run it and
280:54 - now of course not only i have a relative
280:56 - path but i also have the name we can
280:59 - also check for the size we can check for
281:02 - absolute path again bunch and bunch of
281:05 - cool stuff
281:06 - so run it i'll close the explorer for
281:08 - now and notice this is what we're
281:11 - getting back again we have all file to
281:14 - work with all the files in that source
281:18 - and then we have the nodes field and
281:21 - that nodes field just represents that
281:23 - list and those items are going to be
281:25 - coming back as nodes and in those nodes
281:28 - you have the subfields that's why
281:29 - when you set up the node field you'll
281:33 - have to be more specific hey
281:35 - what do you want back
281:36 - as far as data so again they're not
281:39 - dumping the whole thing on you they say
281:41 - okay you want to have access to all the
281:43 - files great but you need to be more
281:45 - specific you need to tell us well what
281:48 - properties are you actually looking for
281:50 - and that's why you drill down you say
281:52 - okay i just want a name or i want a size
281:55 - or absolute path or whatever hopefully
281:58 - it is clear
281:59 - and now of course we can move on to our
282:01 - next topic beautiful once we have
282:03 - covered all file field now let's see how
282:06 - query arguments work we'll use query
282:08 - arguments with the same all file field
282:10 - just keep in mind that the idea is
282:12 - exactly the same with other fields as
282:13 - well
282:14 - and basically query arguments allow us
282:16 - to be more specific of what data we are
282:19 - going to be getting back and the index
282:21 - for the query argument is following
282:23 - where we go with the field name and then
282:25 - we set up the parentheses and then of
282:27 - course we get the suggestion whether we
282:30 - want to filter limit
282:31 - skip or sort and you can also see that
282:34 - of course we can access those arguments
282:37 - when we are working with explorer and
282:39 - for this all file field notice these are
282:43 - my arguments effectively everything that
282:46 - is in a purple color those are my
282:49 - arguments so again if you want to type
282:51 - it out you can definitely type it out
282:53 - but in my case we'll set up everything
282:56 - using the explorer now since my response
282:59 - is somewhat busy i'll also remove
283:02 - these two fields
283:05 - these two subfields and essentially i'm
283:07 - just going to be looking for
283:08 - name and size so notice these are my
283:11 - file names of course and then those are
283:14 - the sizes and let's start with the most
283:17 - straightforward one and that one is
283:19 - limit so basically we're limiting amount
283:22 - of nodes that we're getting back and in
283:24 - order to use this argument i simply
283:26 - click on limit like i said you can type
283:28 - it out if you want and i'm gonna go with
283:31 - three
283:32 - and then once i run it check it out here
283:34 - i still have a total count nine
283:37 - since
283:37 - that tells me how many
283:39 - nodes i have in the source and then this
283:42 - is my response now keep in mind two
283:44 - things first we can combine these
283:46 - arguments and later once our queries get
283:49 - more complex we'll definitely do so and
283:52 - second if we're just using the limit
283:54 - technically these items are random
283:57 - meaning we say graphql get me three
284:00 - items and graphql just dumps three items
284:04 - so at this point we're not specifically
284:06 - say what we're looking for we just say
284:08 - hey in my response just limit this to
284:11 - three so of course when it comes to
284:14 - limit in most cases
284:16 - you'll use it in combination with one of
284:19 - the other arguments because in that case
284:22 - it's just going to make a bit more sense
284:24 - but the whole idea is we're limiting the
284:27 - amount of nodes that we're getting back
284:29 - so for example if i'll change it to five
284:31 - again
284:32 - i just get two more items okay hopefully
284:35 - that is clear then we can skip and this
284:38 - is going to start skipping from the
284:40 - first item in my response i run and i
284:43 - get back nine and if i'll go with skip
284:47 - and i'll skip the first three you'll
284:50 - notice how logo about and main will be
284:54 - missing so once i run notice i right
284:56 - away start with the recipe and then all
284:58 - the way to the big copy hopefully that
285:01 - is clear
285:02 - then we have filter and sort and as far
285:06 - as sort notice how stored has more
285:08 - options so it has this triangle and then
285:13 - it will still return
285:15 - all the items because in a second we'll
285:17 - take a look at the filter filter
285:18 - actually limits the items that we're
285:21 - getting back with sword effectively
285:23 - we're getting all nine items but we'll
285:26 - just sort it in
285:27 - type of order so we go with sort then we
285:30 - can check which field we want and
285:33 - literally here sky is the limit now
285:35 - there is this source instance name we'll
285:38 - work with this one in a few videos
285:40 - however once you click on it notice
285:43 - these are all your options so you can go
285:45 - here as wild as you want so in my case i
285:48 - want to sort
285:49 - based on name and size i think those are
285:52 - going to be two good instances so let me
285:56 - just check the size first and then we
285:58 - have the order and then as far as the
286:00 - order we have ascending so start with
286:03 - the smaller one or we have the same
286:05 - thing where of course we'll start with
286:06 - the bigger one so once i run it check it
286:09 - out logo is the smallest one that's why
286:12 - it's the first one and then of course we
286:14 - get the big copy which is going to be
286:17 - the biggest image okay
286:19 - then if i go descending of course the
286:21 - order is going to be the opposite where
286:24 - again my total value did not change i'm
286:26 - still getting back all nine however i'm
286:29 - sorting
286:30 - and now the two biggest ones are first
286:34 - and of course we can sort based on name
286:36 - as well so if i'll change this around
286:38 - and if i go with name and of course if
286:41 - we go with ascending then we'll start
286:44 - with about and then two big files will
286:47 - be next and hopefully you get the gist
286:49 - so effectively we sort our response in
286:52 - alphabetical order so that's sort and
286:55 - then finally we have a filter and for
286:58 - the filter i'll make some changes in my
287:01 - images
287:02 - so i'll go here with the source
287:04 - i'll zoom in
287:05 - and then again we're looking for assets
287:07 - images and i'll create recipes folder
287:11 - and i'll place
287:12 - all of these suckers in there so go new
287:14 - folder and i'll call this recipes
287:18 - and then all the recipes images
287:20 - i'm just going to move into the recipes
287:23 - folder and once i do that you'll notice
287:26 - something interesting where once you run
287:28 - it i still have nine so i'm still
287:31 - pointing to the same source so that did
287:34 - not change however if i use filter i can
287:37 - say hey listen get me only the recipes
287:41 - ones and hopefully i named it recipes
287:43 - let me double check because for some
287:45 - reason i think that i named it product
287:47 - so not asset images yep recipes good
287:51 - awesome
287:52 - uh sometimes i do the weirdest stuff
287:54 - when i'm actually recording so it's
287:56 - always good to double check and as far
287:59 - as the filter same thing notice we have
288:01 - multiple options and as you can see
288:03 - since we have a triangle
288:06 - these ones have more options themselves
288:09 - and what is a relative directory
288:12 - well that is going to be a director that
288:15 - is sitting in our instance
288:17 - correct so in this case i'm going to go
288:20 - with relative directory and then i have
288:22 - these options starting with equal and we
288:25 - have non-equal
288:26 - as well as the rejects so in my case i'm
288:29 - going to go with relative directory is
288:31 - equal to and then i just need to provide
288:33 - that value so in here i go with recipes
288:37 - and notice the syntax that you have to
288:39 - write so again you start with an
288:41 - argument name then you go with a colon
288:44 - then you go with a object because again
288:47 - you have more options here right in the
288:50 - filter and then since the relative
288:52 - directory has more options
288:54 - that's why again you go with one of the
288:56 - options and then you provide the value
288:59 - now the reason why i'm showing you right
289:01 - away the explorer because in my opinion
289:04 - that's probably the option you're going
289:07 - to choose yes previously before explorer
289:10 - was available
289:11 - you just had to type about the arguments
289:13 - but in my opinion with explorer
289:16 - there's very little use case so in this
289:19 - case i'm going to run it and now notice
289:21 - how my total count changed and now i'm
289:24 - getting only the nodes
289:26 - that are in that folder and like i said
289:29 - we can combine them so we can combine
289:32 - these arguments for instance i could
289:34 - sort them based on the name
289:37 - or size whatever so i'm going to go back
289:39 - to the sort and you know what i'll go
289:41 - with size and i'll say that i want to
289:45 - have the biggest ones first and notice
289:47 - again the syntax where we have filter
289:50 - here
289:51 - that's our one argument and then we have
289:53 - the second one where we go with sort
289:55 - again we run it and now of course not
289:58 - only i get only the four recipes but i
290:01 - get the biggest one first then smaller
290:04 - smaller and eventually i get the
290:06 - smallest one hopefully it is clear and
290:08 - you're not overwhelmed don't worry
290:12 - the more practice we'll do the easier
290:14 - this stuff is going to get
290:16 - as a quick side note if you're following
290:19 - along with the videos you'll most likely
290:22 - get this warning in a console simply
290:25 - because in the images component remember
290:28 - that was the first component we set up
290:30 - in the examples as far as the images
290:33 - where we were testing out the static
290:36 - image component
290:38 - we provided a path where we say acids
290:41 - then images and then recipe one
290:43 - now since we copy and pasted all the
290:46 - recipes into recipes folder of course
290:50 - now this path returns nothing so the
290:54 - gatsby is complaining that could not
290:55 - find the image for assets images and
290:58 - then recipe one jpeg so at this point
291:01 - either you can change the path where you
291:03 - include the recipes folder as well so
291:06 - you'll need to go with assets images and
291:08 - then recipes folder and then a recipe
291:10 - number one or
291:12 - we can simply go back to the file system
291:16 - and then i'll grab my recipe number one
291:18 - and then just copy and paste back in my
291:22 - images folder so i'll still have my
291:24 - recipe one jpeg directly in my images
291:27 - folder
291:28 - i think this is going to be the approach
291:30 - that i'm going to take so again i can
291:32 - restart the server and
291:34 - if everything is correct there should be
291:37 - no warnings in terminal
291:40 - all right that should do it as far as
291:42 - the arguments so now let's take a look
291:43 - at
291:44 - file field
291:45 - and what i'm going to do is just delete
291:48 - everything here notice i just go back to
291:50 - this nice clean layout and then like i
291:53 - said when we work with all file we work
291:56 - with collection we work with all of our
291:59 - nodes now when we work with file we work
292:01 - with that one specific node so for
292:05 - example i could go here to the file and
292:07 - notice how we're getting all of these
292:10 - arguments
292:11 - and you're probably okay why is it so
292:13 - many why for all file we had only four
292:15 - and now i have this huge list well let's
292:20 - see
292:21 - when we set up the data for example i'm
292:23 - going to go here with the name and i'll
292:25 - run it and it's beautiful i'm getting
292:28 - back my logo and if i really want to
292:30 - double check of course i can go with i
292:32 - don't know
292:33 - relative path and i'll see that of
292:35 - course the name is logo svg and that's
292:39 - awesome because now of course i can
292:42 - access the same fields like we did with
292:45 - all file field when we're iterating over
292:48 - those nodes
292:49 - however there's one gotcha
292:51 - i mean i'm getting a logo profile right
292:54 - but what if i don't want a logo
292:56 - because i can clearly see that
292:59 - in my project in the images folder well
293:02 - i have about i have big copy big or
293:05 - maybe even i want to access one of the
293:08 - recipe images
293:09 - how can i do that
293:11 - because this logo svg is awesome if i
293:14 - want that logo svg but if i don't want
293:16 - it it's kind of useless correct
293:18 - and again we have to use the arguments
293:21 - that's why we have so many of them here
293:23 - where essentially we say yeah get me
293:25 - that one file but with the help of
293:28 - arguments we specifically say which file
293:31 - we're actually looking for and again you
293:34 - can use any of them over here
293:36 - but the one that i'll use is going to be
293:39 - relative path and again we have more
293:43 - options here and i'm going to go with
293:45 - equal and once i have this in place i
293:47 - just need to provide the name of the
293:51 - image for instance if i'm looking for
293:53 - big jpeg i go with big
293:56 - and then jpeg and if i run it of course
293:59 - now i have this file now if i want to
294:02 - access the recipes one of course i need
294:04 - to point to the folder
294:06 - and then the file name so if i go here
294:10 - and if i say recipes and then if i try
294:13 - to look for big well of course that file
294:16 - is not there that's why i get back to
294:18 - null just keep in mind that when we're
294:20 - talking about a relative path
294:22 - we're already pointing to the images
294:24 - correct
294:25 - and then relative path just means well
294:28 - once we get to the images or relative to
294:30 - images where do we want to go
294:33 - and in this case i want to go to the
294:34 - recipes and then of course the file name
294:38 - is a recipe for example one and i
294:42 - believe it was jpeg so we run it and now
294:44 - of course i get back that singular
294:46 - recipe and again
294:48 - from here once you get to that
294:50 - particular file
294:52 - same thing again you have
294:54 - all of these fields that you can choose
294:57 - and of course you can just do something
294:59 - with that data in your application and
295:03 - since i promise you that i'll show you
295:04 - an example where we'll use this and name
295:07 - property in our query in this video i'll
295:11 - set up another instance and we'll just
295:13 - set up the query using the arguments now
295:16 - this video is not intended as a code
295:18 - long if you don't want to you can just
295:20 - sit back and relax
295:22 - so at this point i want to copy and
295:24 - paste and since i have examples folder
295:27 - right next to the assets well i'll
295:29 - simply set up another instance pointing
295:32 - to the examples as far as the name i'm
295:34 - going to go with the same as the folder
295:36 - and of course i'm not looking in the
295:38 - assets now i'm looking in the examples
295:41 - like so so we save it and then of course
295:44 - we need to remember that we need to
295:46 - restart the server so i'm going to go
295:48 - with npm and start now once we navigate
295:51 - back
295:53 - then i'm going to set up all file query
295:55 - one more time so let me delete
295:57 - everything here and then i'm going to
295:59 - look for total count and you'll notice
296:02 - something interesting where now the
296:03 - total account is 14 because now of
296:06 - course we have two instances not only
296:09 - we're sourcing the images but we also
296:12 - have access to the examples but if i
296:15 - want to do some work with examples and
296:18 - if i don't want to deal with images i
296:20 - simply need to add my argument and in
296:23 - this case i'm just going to say you know
296:24 - what get me only the file whose source
296:28 - instance name is equal to examples so we
296:31 - go to the filter and then we keep
296:33 - scrolling keep scrolling and this source
296:35 - instance name
296:37 - represents the name that you have in
296:39 - gatsbyconfig so we go source instance
296:42 - name we have more options again and i'm
296:45 - just going to go with equals and then i
296:47 - just need to type the same name so i'm
296:48 - going to go with examples and now of
296:50 - course once we run it the total count is
296:53 - five and if you don't believe me i can
296:56 - show you that if i take a look at the
296:58 - nodes and then we keep on scrolling keep
297:00 - on scrolling and for example we can go
297:03 - with a name option so i click it here
297:06 - and there it is these are all the files
297:09 - that we have in the examples all right
297:11 - and up next i want to work with gatsby
297:14 - image remember when we set up the gatsby
297:18 - plugin image we had two options
297:20 - we had a static image and gas bias and i
297:24 - said that the only difference the
297:26 - biggest difference is the fact that when
297:28 - we work with gatsby image it is
297:30 - expecting a dynamic data and we provide
297:34 - that using graphql and that point of
297:36 - course didn't know nothing about graphql
297:39 - well
297:40 - now we do and i just want to create a
297:42 - simple gallery
297:44 - where essentially there's going to be a
297:45 - component
297:46 - where we'll set up the query
297:48 - we'll look for all our images since we
297:51 - know how we can do that and then we'll
297:53 - iterate over and then of course we'll
297:56 - provide that dynamic data
297:58 - to the gatsby image component and of
298:01 - course in the process we'll learn how we
298:03 - can work with gatsby
298:05 - image component first i want to do a
298:08 - little bit of setup where i'm going to
298:10 - navigate back like i said this was just
298:12 - for your reference i don't want to deal
298:14 - with the source instant name and all
298:17 - that so i'll just remove it
298:19 - and then i'll restart the server i'm
298:21 - going to go with npm start
298:25 - then i'm going to keep on scrolling
298:27 - and in the examples i want to create a
298:29 - new component by the name of gallery so
298:32 - let's go with gallery js and then inside
298:36 - of it let's go with a component and by
298:38 - the name of gallery of course all right
298:41 - and we'll just say
298:43 - simple image gallery and you're not why
298:46 - don't we place this actually in heading
298:48 - two
298:49 - so we'll go with simple
298:51 - image gallery now i'll render this
298:54 - component in
298:56 - the test page just because it's easier
298:58 - but of course you can do it anywhere in
299:01 - our project now i do want to clean out a
299:04 - little bit of our index.js
299:06 - because i don't like that it is getting
299:08 - so busy so remember the fetch data i'll
299:11 - remove it and i'll remove it here as
299:14 - well
299:15 - that's an awesome start then i'll
299:17 - navigate back to the testing one now
299:19 - since i want our gallery to look a bit
299:21 - nicer i'm also going to look for my
299:24 - layout
299:25 - that is coming from the components if
299:26 - you remember so we have a layout
299:29 - component
299:30 - then we'll remove our current query
299:34 - because essentially we'll just render
299:38 - our gallery one so there is no author of
299:41 - course
299:42 - and of course i'll remove the page query
299:44 - as well again don't worry there's going
299:46 - to be plenty of practice for the page
299:49 - query so i'll remove it here and then
299:52 - like i said i just want to wrap
299:54 - everything
299:55 - in the layout
299:57 - and then i want my gallery again the
299:59 - reason why i'm doing that interesting
300:00 - because i'll remove the whole testing
300:02 - one so then i don't need to hop around
300:04 - my project and just remove them one by
300:07 - one so let's go here with import we're
300:09 - looking for gallery one from and in this
300:13 - case we're looking in the examples and
300:15 - of course the file name is gallery and
300:18 - then it's not gonna be an author we'll
300:19 - simply go here with a gallery so now of
300:23 - course we should see the heading two but
300:25 - of course i do need to restart i guess
300:27 - or i guess refresh and there it is now i
300:30 - have my simple
300:32 - gallery component now since i want to
300:35 - have a bit better css i'll also set up a
300:39 - page here so i'm going to go with the
300:40 - main with a class off page and that's
300:44 - just a css class that just makes sure
300:47 - that we have nav bar on top and the
300:49 - footer is all the way in the bottom and
300:52 - once we have the setup in place now of
300:53 - course we'll head back to the sandbox
300:56 - and see how we can get that dynamic data
300:59 - that the gatsby image component is
301:02 - looking for
301:03 - all right and once we have our setup in
301:04 - place now let's set up the query where
301:08 - we'll get the data that the gatsby image
301:11 - plugin is looking for and as i know i'm
301:14 - not going to need this graphql here
301:16 - so i'm going to delete that one now as
301:19 - far as the setup once again select
301:21 - everything
301:23 - and just remove because i want to start
301:25 - from scratch
301:27 - and then we're looking for all file okay
301:31 - and in this case again gives me all
301:33 - these suggestions
301:35 - that's not what i want
301:37 - and i don't want the filter yet don't
301:39 - worry in a second we'll set it up
301:41 - and then i don't think i'll need the
301:44 - total count so the only one that i
301:46 - believe is this one the name so
301:48 - basically i just want to showcase what
301:50 - we're getting back
301:51 - we get all these files great
301:54 - now what well now if we drill down we
301:58 - can see that we have this
302:00 - child image sharp
302:02 - and i know that
302:03 - the field name is somewhat interesting i
302:06 - get it i was also surprised the first
302:09 - time i saw that one but this is where we
302:12 - get the info
302:14 - and if we open this up
302:16 - then we notice that we have
302:18 - fixed and fluid so these ones we used in
302:21 - the gatsby version 2 and now we have
302:24 - this new one so this new one is gatsby
302:27 - image data now notice how it has way
302:30 - more arguments and we'll cover them in a
302:33 - second just keep in mind that
302:35 - effectively this is a object that
302:38 - provides all the data
302:40 - that the gatsby image is looking for and
302:43 - if you remember
302:45 - when we talked about the images
302:47 - i said that the setup is almost the same
302:51 - meaning for the static image and gatsby
302:53 - image and the difference is simply how
302:56 - we pass in this data
302:58 - for instance when it comes to source
303:00 - placeholder and all that
303:02 - now we're going to do that here in a
303:04 - query
303:05 - for instance source is right away
303:08 - provided notice how we look for gatsby
303:10 - image data and we're good to go the
303:12 - source is provided but notice our
303:15 - options here
303:16 - so for example
303:17 - i can go with a layout remember that was
303:21 - one of the options
303:22 - when we were setting up of course our
303:25 - static one and what do you know
303:27 - i have fixed there i also have full
303:30 - width and constraint so hopefully you
303:32 - get the gist where again the setup is
303:36 - the same
303:37 - in here i'm hard coding that for every
303:40 - static image in here i just say all
303:42 - right
303:43 - get me all the images then specifically
303:45 - get me this gatsby image data and that's
303:48 - a must you must provide this one and
303:50 - then if you want to provide more options
303:53 - you can definitely do so so in this case
303:55 - i'm going to go with fixed layout as far
303:58 - as the placeholder i'm going to go with
304:01 - the blurred one and just to showcase
304:03 - that we have more options i'll also go
304:05 - with transform options and that's
304:07 - something we didn't cover
304:09 - in the static image because i didn't see
304:11 - the point of covering all the options
304:14 - that we have
304:15 - and then we can just go with a grayscale
304:18 - and we're going to go with true and
304:19 - you'll see once we set up the gallery
304:21 - how it looks like so once we run it now
304:24 - of course we provide those options
304:26 - not only we provide the basic setup
304:29 - because remember
304:30 - when we set up the image whether it's
304:33 - static or gas b of course there's going
304:36 - to be some defaults that's what i
304:38 - mentioned before when it comes to
304:40 - options there are some defaults that's
304:41 - why if you just run gatsby image data
304:44 - yes you will get some data the correct
304:47 - data but of course with just some preset
304:50 - options in this case i'm more specific
304:52 - i'm saying hey get me the layout and i
304:55 - want layout fixed get me the blurred one
304:57 - and hopefully you get the gist so
305:00 - everything is nice we're getting this
305:01 - data basically we just need to set up
305:03 - the query in our gallery
305:06 - and we're going to be in good shape
305:08 - but there is a catch and if we go back
305:11 - to our project and if you open up the
305:13 - terminal you'll notice you can't use
305:16 - child image sharp together with
305:18 - logo svg so effectively we need to
305:20 - remove our svg file from the query and
305:24 - that's a bummer but that gives us a
305:26 - option to practice on our arguments if i
305:30 - scroll up i can filter i can say you
305:32 - know what
305:33 - get me all the images apart from the
305:35 - ones that have the svg extension we
305:39 - bravely click on filter then we keep on
305:42 - scrolling keep on scrolling
305:44 - and of course we're looking for the
305:45 - extension
305:47 - there it is that's our extension and
305:49 - then we say the extension
305:51 - is not equal and we simply go with
305:54 - s v
305:56 - and g
305:57 - and then once we run it
305:59 - notice how our first image is actually
306:02 - about
306:03 - so it's not svg like we were getting
306:05 - before now it is about and then at this
306:08 - point you have as always multiple
306:11 - options you can go with code exporter
306:15 - and then look for the static query hook
306:18 - but again my issue with this code and i
306:21 - really appreciate the fact that they
306:22 - provide this code don't get me wrong i'm
306:24 - not complaining but my issue is that
306:27 - they can set up everything here in the
306:29 - component
306:31 - and in my opinion it just makes those
306:33 - components bloated
306:35 - so that's why even if i go with a hook
306:39 - option i always go for page
306:42 - and then
306:43 - i grab everything apart from the export
306:45 - that is just my preference you don't
306:47 - have to do that if you are okay
306:50 - with this setup where basically
306:52 - everything is in a component feel free
306:54 - to do so at the end of the day you'll
306:56 - have the same data
306:58 - now in my case i will always use the
307:01 - page one and then i'll just grab
307:03 - everything here like this so copy this
307:05 - one then i'll navigate back to my
307:08 - gallery like so now of course we'll have
307:11 - to make some imports of course so let's
307:13 - copy and paste and of course we need to
307:15 - have a graphql that's a must and also we
307:19 - need to have our use static query hook
307:22 - so we go with import then use static
307:26 - query hook of course and then the second
307:28 - one is my graphql
307:31 - tagged template and then this is coming
307:34 - from and of course the gatsby one now i
307:37 - also want to get that gatsby image
307:40 - correct because remember we cannot use
307:43 - the static image with dynamic data
307:46 - because again keep in mind we're
307:47 - iterating over the nodes so as we're
307:51 - iterating each and every time we'll pass
307:54 - different data and that's essentially
307:55 - why we need to use that get the image
307:58 - plugin so we go to import and instead of
308:01 - the static one we go with gatsby
308:04 - image
308:05 - and then of course this is coming from
308:07 - a gatsby plugin image so once we have
308:11 - all the imports in place i just want to
308:14 - see whether i'm getting the data i want
308:17 - to do a console log and if i have the
308:19 - data then the next video will work on
308:21 - the return so let's go with const and
308:25 - let me scroll down
308:26 - data is equal and now i use my use
308:29 - static query
308:30 - what is the name of my variable it is
308:33 - simply query here
308:35 - and then let's log the data if we have a
308:38 - massive massive massive
308:40 - object then we are in good shape so
308:43 - let's go back and of course this is
308:45 - going to be my testing let's spin it up
308:48 - and if we inspect and in the console i
308:51 - see this object we are in good shape so
308:54 - notice we have all file and we're not
308:57 - surprised because that's the query that
308:59 - we set up and then i have the nodes and
309:02 - of course nodes is my array and we know
309:05 - the rest so in the next video let's
309:07 - iterate over our data and display
309:10 - something meaningful on the screen
309:13 - all right we're done with our query
309:15 - and before we go any further let me just
309:18 - showcase where we can find useful info
309:21 - about the gatsby plugin image so
309:24 - remember previously i showed you
309:26 - the reference guides well now let's take
309:29 - a look at the how to guide and then
309:32 - we're gonna keep on scrolling and we're
309:34 - looking for adding images and media and
309:37 - more specifically how to use gatsby
309:39 - image plugin now they start here from
309:42 - the scratch of course we already covered
309:44 - that one we know about static images
309:47 - we keep on scrolling keep on scrolling
309:49 - and we come to
309:51 - dynamic images so like i said in order
309:54 - to set up dynamic images we need to go
309:56 - with gatsby image data that's the field
310:00 - that we're looking for and as a setup
310:02 - i'm just looking at this width and i
310:05 - just remember that i forgot to add it so
310:07 - let me quickly go back my apologies i
310:10 - know that some of you are probably very
310:12 - annoyed by this
310:13 - but let me
310:15 - close my exporter for a while
310:17 - and then i'm going to go back to
310:18 - explorer and then of course this is my
310:22 - filter that's not what i want i'm going
310:23 - to keep on scrolling and remember we had
310:26 - options for highlight and width and in
310:28 - this case since i'm getting fixed it
310:30 - only makes sense if i'm going to go with
310:33 - a certain width and in my case i'm going
310:35 - to go with 200 keep in mind that yes
310:37 - technically you can run it without width
310:39 - it's not going to break but of course
310:41 - you'll have to do more work in the css
310:44 - and since i want to avoid that i'm just
310:46 - going to add that option here instead
310:49 - and let me quickly swing back to the
310:52 - code exporter
310:53 - and then like i said i'm grabbing
310:56 - everything here
310:57 - as far as the page query
310:59 - the only thing that
311:01 - i'm avoiding is that export and then
311:04 - i'll copy and paste again you can simply
311:06 - add here the text i just wanted to go
311:08 - through all the steps so you're not
311:10 - surprised where i'm getting this info
311:11 - from all right that should do it
311:14 - now let's swing back so we have this
311:16 - gatsby image data and this is what we're
311:18 - going to pass
311:20 - into our component and we keep on
311:23 - scrolling blah blah blah we have display
311:25 - the image and again the difference here
311:27 - is that we grab
311:29 - get the image component and there's also
311:31 - going to be a helper function which i'm
311:34 - going to cover in the next video for now
311:36 - we just need to grab this gatsby image
311:39 - and the way it works again in that case
311:42 - they right away showcase with a helper
311:45 - function but the idea is that we just
311:48 - drill down to that gatsby image what was
311:51 - the name gatsby image data this is what
311:54 - we need to pass in in the problem by the
311:57 - name of image in the gatsby image
311:59 - component
312:00 - so
312:01 - we're going to go back we have our
312:03 - gatsby image but since i first want to
312:05 - test out how we can iterate over our
312:08 - data why don't we simply
312:10 - set up some kind of array list or
312:14 - whatever where we just iterate over and
312:16 - display the name and once we understand
312:18 - the name then of course it's going to be
312:19 - much more easier to add that gatsby
312:22 - image now i might need to add a little
312:24 - bit of css so i'm going to go with
312:27 - styled components in this case and of
312:29 - course i'm looking for my styled
312:30 - components i'll quickly set up my
312:32 - wrapper
312:34 - and we're gonna go here with a const
312:37 - wrapper again this is optional you don't
312:39 - have to do it styled and i'm going to
312:41 - say section
312:42 - and eventually i might add some styles
312:45 - for the css flexbox and here i'll just
312:48 - wrap everything with my wrapper and then
312:51 - as far as well how we can access those
312:53 - values
312:55 - well remember
312:56 - that of course data is a massive object
312:59 - so in my case
313:01 - i'm going to set up nodes so this is
313:03 - going to be in the data and then we just
313:06 - need to scroll up and see okay in the
313:08 - data there's going to be all file
313:10 - and then i have my nodes so that's going
313:12 - to be that array that i'm looking for so
313:15 - i simply go with data
313:17 - all file and then nodes and now of
313:19 - course i assign this to a node variable
313:23 - and then inside of the wrapper
313:26 - let's just set up the curlies and we'll
313:29 - iterate over the nodes
313:31 - and for time being let's just set up map
313:33 - and i'll call this image like so so that
313:36 - represents that individual object and
313:39 - i'm just going to go to return and let's
313:42 - set up the article now i'll use the key
313:44 - here
313:45 - meaning i'll use the index for my key
313:48 - because i don't think that i query for
313:50 - any meaningful id so i'm going to go
313:52 - with key index because again we're
313:54 - returning a list so this is a must
313:57 - and then as far as the data for timing
314:00 - let's just go with the paragraph and
314:02 - we'll say single and image now the
314:06 - reason why i'm doing all of this because
314:07 - i want to showcase what we're going to
314:09 - have inside of this image so i can see
314:12 - the list
314:13 - that's an awesome start and now let's go
314:15 - to the bigger browser window and see
314:17 - what actually we have inside of that
314:20 - image an image is an object and it has a
314:24 - name property and child image sharp and
314:26 - again we shouldn't be surprised we're
314:29 - iterating nodes we're getting back for
314:31 - every item that node and in that node
314:34 - these are the fields we have name field
314:37 - which just returns a value and then like
314:39 - i said there's going to be more
314:41 - complicated fields that have the
314:43 - subfields themselves and of course that
314:45 - is the child image sharp so for time
314:48 - being i simply want to access this name
314:51 - and here i'm going to switch things
314:53 - around
314:54 - and i'm just going to do a bit of
314:56 - destructuring where i'm going to say
314:58 - that i'm looking for a name that is
315:00 - sitting in my image object and
315:04 - instead of single image let's just look
315:07 - for the name now of course we have all
315:10 - these names okay we are moving in the
315:13 - right direction and now of course we
315:15 - just need to see well where is our
315:18 - gatsby image data well that is sitting
315:21 - in child image sharp correct now what
315:25 - gatsby image was looking for was looking
315:28 - for gatsby image data so now again we
315:31 - scroll back down
315:32 - and right above the paragraph i'm gonna
315:35 - go with my component gatsby image here
315:39 - and then remember the prop name was
315:42 - image and now in this image we want to
315:44 - pass in that gatsby image data so again
315:48 - if you wanted to structure it you can do
315:50 - so in my case i'm going to go to image
315:53 - child image sharp and of course get the
315:56 - image data now if you want to add
315:58 - aliases feel free to do so in my case
316:01 - i'm just going to go with image
316:03 - then child image
316:05 - and sharp and then of course we're
316:07 - looking for good ads b and then image
316:10 - and of course the data one now i want to
316:13 - close my component
316:15 - and then i'm going to save it and what
316:17 - do you know we have all the images that
316:20 - we currently have
316:21 - in the images directory even the ones
316:24 - that we have in the subdirectory
316:27 - and you're probably wondering okay but
316:29 - why they're black and white well because
316:31 - we have this transform options grayscale
316:34 - if you remove this one then you'll see
316:36 - that they have their color now this case
316:39 - i'll add manually here the height as
316:41 - well so go with height keep in mind
316:44 - we're not using the sandbox here and
316:46 - we're going to go with 200 we save and
316:49 - of course it's going to split back into
316:51 - the error but eventually i should have
316:53 - the height as well
316:55 - now of course all my images are 200 now
316:58 - if you don't like the grayscale which i
317:00 - do
317:01 - but for example if you don't
317:03 - you can just remove it
317:05 - again
317:06 - it's annoying i understand but that's
317:08 - how it is we just have to refresh and
317:10 - now of course we have
317:12 - all of these images and then why don't
317:14 - we set up a nice column layout so in
317:17 - here i'll say wrapper and then pretty
317:19 - much every article is going to be placed
317:23 - in line with the help of flexbox so say
317:27 - that my wrapper by default will be
317:30 - display
317:31 - flex here then flexwrap will be equal to
317:34 - wrap that just means that if there's not
317:36 - enough space we'll wrap to the next line
317:38 - we'll say wrap
317:40 - and then if we navigate we should get
317:43 - the size by side now of course it's not
317:45 - going to be on a small screen because we
317:47 - have 200 by 200
317:49 - if you go to the big screen and if
317:50 - you're refresh
317:53 - and yep
317:54 - of course we have the gallery displayed
317:56 - now what's missing is the alt problem so
317:58 - it's complaining that we don't have the
318:01 - old prop okay
318:02 - let's do that one let's say that for the
318:05 - gatsby image we'll add alt as well and
318:08 - in this case i'll just pass in the name
318:10 - so i'll say name and once we add that we
318:13 - scroll back
318:15 - notice oh we don't have any warnings now
318:18 - also let's remember
318:20 - that we have shared props meaning if i
318:24 - want i can add the class on this gatsby
318:27 - image as well
318:28 - for instance in here i can go with class
318:31 - name again this name is exactly the same
318:35 - like we had in the static image so in
318:38 - the static image we have this class name
318:40 - and remember we were accessing it well
318:42 - this is going to be the same the
318:44 - difference of course now i'm adding to
318:47 - all of the images the same one so i'm
318:49 - not doing that manually i'm adding to
318:51 - all of them and i'm going to call this
318:53 - gallery img okay now i'll also add a
318:57 - class here with a item
319:00 - just because i want a little bit of
319:02 - space in between so i'm gonna go with
319:04 - item and first i'm gonna say that every
319:07 - item class is gonna get a little bit of
319:09 - margin to the right again we're not
319:12 - worried about css i just want a little
319:14 - bit of space in between so my apologies
319:17 - if you're not a fan of my css
319:20 - and you're not actually instead of all
319:22 - margin i'm just going to go with margin
319:25 - right
319:27 - and then remember
319:29 - now we have gallery img so i can simply
319:32 - add for example a border radius so i
319:36 - have that class on my wrapper so i can
319:40 - simply say gallery img
319:43 - and here i can say border radius and
319:46 - this one will be equal to
319:49 - 1 rem again we'll have to go back to the
319:52 - big screen now we have ourselves a nice
319:55 - gallery i guess the key takeaways here
319:58 - are following
320:00 - where we're iterating over the list
320:02 - and then we need to look for child image
320:06 - sharp
320:06 - and more specifically gatsby image data
320:10 - and then inside of this gatsby image
320:12 - data these are all the options we can
320:15 - set up just like we did with the static
320:18 - one the difference is that of course
320:20 - here we are doing that using
320:22 - graphql then of course we just need to
320:25 - pass this in into a gatsby image so we
320:29 - import gatsby image then we need to set
320:32 - up the component and then we have image
320:35 - prop this is where we pass in that data
320:38 - with whatever configurations you have
320:40 - again you can technically leave this
320:42 - open
320:42 - just deal with a default setup and then
320:46 - of course we have alt prop and then rest
320:49 - of the shared props that we covered with
320:51 - a static image and if you do that you'll
320:54 - display all your list images using
320:57 - gatsby image and while we're still on a
320:59 - topic of gatsby image i also want to
321:02 - cover this awesome helper function that
321:04 - they provide and the name of this
321:06 - function is get image
321:08 - now what this get image function is
321:11 - doing it basically provides a path
321:15 - to the gatsby image and if you're
321:18 - looking at it you're like well what's
321:19 - the big deal and just type out the path
321:22 - myself
321:23 - i'm gonna go back to the plugins or i
321:26 - guess not plugins i'm gonna go back to
321:28 - the reference guides in this case and
321:31 - again we're looking for gatsby image
321:32 - plugin will scroll
321:34 - all the way down
321:36 - and then we'll look for the function
321:39 - and notice this get image right
321:42 - now
321:43 - why is a big deal that we have this
321:45 - function it is a big deal because it
321:47 - uses the conditional training where
321:49 - essentially we need to understand that
321:51 - at the moment
321:52 - yeah we're iterating over our list
321:56 - and i know that all my list items
321:58 - are images however
322:01 - please understand that we are accessing
322:04 - here the object property but if that
322:07 - object doesn't exist in this case if the
322:09 - child image sharp does not exist we're
322:11 - looking for a property on a null and as
322:15 - a result we're going to get a massive
322:17 - error and the way the previous setup
322:20 - worked even if one of the items was
322:23 - missing that image
322:24 - your whole site broke
322:27 - that's it it just broke because it was
322:28 - iterating over the list it was looking
322:30 - for the object and then instead of the
322:32 - object it was getting no
322:34 - i literally cannot stress how many
322:37 - questions i was getting from the
322:38 - students where they were like hey listen
322:40 - what's wrong
322:42 - my data is technically there i mean my
322:44 - code is exactly the same
322:45 - and the only difference was that one of
322:48 - the items was actually just missing that
322:51 - image
322:52 - because keep in mind again we have image
322:54 - object and we have child image sharp and
322:57 - then we have gatsby image there for
322:59 - instance if this child image sharp does
323:02 - not exist we're looking for a property
323:05 - on a null and you cannot do that so if
323:07 - there is no object then how you can
323:09 - access the property on that object you
323:11 - cannot and that's why this is really
323:13 - cool because now of course you can just
323:15 - set up that function
323:17 - and effectively if there is no object
323:20 - then it's going to return as undefined
323:23 - and again it doesn't probably seem like
323:26 - that big of a deal right now but yes i
323:28 - can tell you right away that once you
323:30 - start working with headless synthesis i
323:32 - mean mistakes do happen
323:34 - and then if that image is going to be
323:36 - missing
323:38 - then of course your site will break your
323:40 - whole site just because of one image
323:43 - and now let's go back and test it out so
323:45 - i'm gonna navigate back to my
323:47 - project i'm looking for get image
323:50 - function
323:52 - and then we keep scrolling down
323:54 - and of course i just want to use it
323:56 - somewhere and the way we set it up we
323:59 - just go with some kind of variable now
324:01 - in that case they just name it image i
324:03 - guess in my case i'm going to say path
324:06 - to
324:07 - image and then we go with our get image
324:10 - function and then you need to provide
324:12 - the path
324:13 - all the way to the object
324:15 - where the child image sharp is setting
324:18 - so in our case of course that is the
324:21 - image itself so i can simply pass here
324:24 - the image
324:25 - and then instead of writing image prop
324:28 - is equal to image i can just say
324:30 - that i'll have path to the image so we
324:33 - save it here we refresh and if we don't
324:36 - have any errors we know that this is
324:39 - going to work again you need to provide
324:41 - path
324:42 - all the way where the child image sharp
324:46 - is sitting so if for example you have a
324:48 - different structure and i believe they
324:51 - showed that different structure here
324:53 - where notice how they're querying for
324:55 - the blog post
324:56 - and then there is this avatar property
324:59 - and then as far as what data you pass in
325:02 - you pass in data
325:04 - blog post and then you're looking for
325:07 - the avatar okay so make sure that you
325:10 - provide a path down to the object where
325:13 - the child image chart is sitting again
325:16 - in our case that object is a image
325:19 - itself because we're iterating over
325:21 - those objects but there's gonna be some
325:23 - cases where you need to provide a
325:26 - different path hopefully that is clear
325:29 - and now we can move on to our next topic
325:32 - when it comes to data in gadsby
325:33 - effectively we have these two options we
325:36 - can keep it locally
325:38 - basically store it in our project
325:40 - or store it in the cloud
325:42 - when it comes to local data at the time
325:44 - of this recording
325:45 - these are our choices json format
325:48 - markdown or mdx mdx is a very cool
325:52 - option that allows us to combine a
325:55 - markdown and react components and as a
325:59 - quick side note we will make an
326:00 - interesting project later in the course
326:02 - using mdx
326:04 - and as far as storing data externally
326:06 - most likely you'll use something called
326:08 - headless cms or content management
326:11 - system for the most part the setup for
326:13 - both options the local one an external
326:16 - one is almost the same
326:19 - first we need to create data
326:21 - so think data first then set up query so
326:24 - of course we need to pull it in and
326:26 - lastly render it in the component
326:28 - so either in a page component or a
326:31 - typical react component now the major
326:34 - difference between the two is the fact
326:36 - that most likely external option offers
326:39 - a graphical interface for data entries
326:42 - so think nice gui and in most setups you
326:45 - can add or update data later without
326:48 - actually touching your project and don't
326:50 - worry we will implement that in our
326:52 - project as well and because of those two
326:55 - reasons we'll take an external route
326:58 - right from the get-go
326:59 - now once we have established that we
327:01 - will use headless cms for our gatsby
327:03 - project
327:04 - it would probably be very useful to
327:06 - learn what it actually is
327:08 - so headless cms is a concept of
327:10 - decoupling your data
327:12 - from your project
327:14 - so if you think of traditional cms aka
327:17 - wordpress the moment you want to use
327:19 - your data separately you will face many
327:22 - challenges and hit numerous roadblocks
327:25 - and the reason for that is very simple
327:26 - because it is meant to go hand in hand
327:28 - with your project
327:30 - now the way headless cms works is the
327:32 - opposite in most cases you'll get a gui
327:35 - more graphical interface where in a
327:37 - matter of few minutes you can set up
327:39 - your data and then consume that data the
327:42 - same data in literally any front end so
327:45 - of course in our case we'll use gatsby
327:48 - but the same way we just as easily could
327:50 - have used react swell or even vanilla js
327:54 - as far as the choices at the moment
327:56 - headless cms space is a wild wild west
327:59 - and if you don't believe me just visit
328:02 - headlesscms.org
328:03 - and be prepared to spend the remaining
328:05 - of your afternoon scouring through your
328:08 - options but the two major types of
328:10 - headless cms are open source
328:13 - meaning in most cases it's free and i'll
328:16 - talk about it a bit later what i mean by
328:18 - in most cases and a closed source
328:21 - basically where you pay some monthly
328:22 - fees for using their service in most
328:25 - cases paid options do provide a generous
328:27 - freebie tier so you can sign up for free
328:30 - and unless you're building the next
328:31 - facebook it should be more than enough
328:34 - now let me also point out that while i
328:36 - myself
328:37 - use free tier options when it comes to
328:40 - headless cms open source does not does
328:44 - not always mean it's completely free
328:47 - once you introduce a dynamic element to
328:49 - your app
328:50 - for example users you'll have to host
328:53 - that back end somewhere and at that
328:55 - point standard hosting rules will apply
328:58 - so which headless cms option did i pick
329:00 - for our tutorial well that would be
329:02 - contentful
329:04 - before we go any further
329:06 - let me just clarify they're not
329:08 - sponsoring this video and i don't have
329:11 - any affiliate program with them the only
329:13 - reason why i picked this particular
329:14 - service is because i use it myself
329:18 - i find their service really good and in
329:20 - my experience you will be up and running
329:23 - in a matter of few minutes which at the
329:25 - moment is probably the most important
329:28 - thing
329:28 - they do offer free tier
329:30 - so you will not have to pay anything
329:33 - they do host your data so that's taken
329:35 - care of as well and their interface is
329:37 - as straightforward as it gets
329:40 - in order to sign up just visit
329:42 - contentful.com and just keep watching
329:44 - the videos since we'll set up the
329:46 - account together all right and why don't
329:48 - we kick things off by creating a free
329:50 - contentful account
329:52 - and in order to do that we need to
329:54 - navigate to
329:55 - contentful.com again the url is
329:58 - contentful.com
329:59 - then look for this get start option
330:03 - and then specifically go for sign up for
330:06 - free
330:07 - then you'll need to provide your data so
330:09 - in my case i'm going to be peter smith
330:13 - as far as the company i'm gonna go with
330:15 - coding
330:17 - and addict as far as the email i'm gonna
330:19 - go with one of my dummy ones learn code
330:22 - at mail.com
330:24 - as far as the platform javascript job
330:26 - title other
330:28 - job function other
330:30 - and just get creative with your password
330:34 - so it's hard to hack
330:37 - and then once we set up they will send
330:39 - us a confirmation email so make sure
330:43 - that you wait for the email and click on
330:46 - a link
330:47 - and then once you get the email like i
330:48 - said
330:49 - click on confirmation link beautiful and
330:52 - then they will ask you this question how
330:54 - do you usually work with content and
330:56 - essentially
330:57 - they're just giving you a free trial to
331:01 - one of their services so in my case i'm
331:03 - just going to go with explore content
331:05 - and then they will be setting up the
331:07 - trial space for you and eventually
331:09 - you'll get the second email where they
331:11 - basically just say that you're getting
331:13 - that 10-day trial now don't worry the
331:16 - way we'll set up everything you won't
331:18 - have to pay a dime because we'll go with
331:20 - free option then we can navigate back
331:23 - once everything is in place this is
331:24 - going to be our dashboard
331:27 - and mostly we'll work with content model
331:30 - so this is where we'll set up the
331:32 - structure for our data and this is where
331:34 - i will set up a content now as you can
331:37 - see
331:38 - when they set up this example space you
331:41 - have all these entries as well as
331:43 - content model however i want to start
331:45 - everything from scratch
331:47 - and in contentful they basically set up
331:50 - something called spaces and you can
331:52 - think of it as your databases and in a
331:55 - free option you get only one
331:58 - so that's why we'll have to delete the
332:00 - example one that they just set up and we
332:03 - can do that if we navigate to the
332:05 - settings
332:06 - then more specifically we're looking for
332:08 - general settings
332:09 - and then notice that our space
332:13 - and we're going to go with this delete
332:14 - space option so now let me just grab the
332:18 - text because that's what you need to
332:20 - provide
332:21 - and then once we remove it then we can
332:24 - start from the scratch
332:25 - and in this case we go with add a space
332:29 - then we want to go with a free one here
332:32 - and web app only
332:34 - because as you can see rest of them will
332:36 - have to pay so monthly total
332:39 - is going to be zero like so so then we
332:41 - click on continue and we just need to
332:43 - come up with a space name so in my case
332:46 - i'm going to go with gatsby tutorial
332:49 - and again you can go with the example
332:51 - space where they already
332:53 - provide a content type as well as some
332:55 - entries but in my case i'm going to go
332:58 - with empty one and i strongly suggest
333:00 - you do the same so we're gonna go with
333:02 - create space
333:04 - and then once everything is in place of
333:06 - course we go here and once we're done
333:09 - setting up the new space we'll be back
333:11 - in our dashboard however notice the
333:13 - space name of course now it is gatsby
333:15 - tutorial and since i went with empty
333:18 - space option
333:19 - i have no data in here so we'll start
333:22 - everything from the scratch all right
333:25 - and we're going to start by setting up
333:27 - our content model
333:29 - and you can think of content model as a
333:32 - structure
333:33 - for our data
333:34 - so we will be setting up the recipes
333:37 - correct now what do normal recipes have
333:40 - we have title they probably have
333:42 - description prep time cook time servings
333:45 - maybe an image as well so of course we
333:48 - just need to set up that structure and
333:50 - then later of course we'll be able to
333:53 - add our entries we'll be able to add our
333:55 - data but we always always need to start
333:57 - with content model where again we set up
333:59 - the structure for our data and we go
334:03 - with add content type now you can add as
334:06 - many content types as you like but in my
334:09 - case of course we'll have only one we'll
334:11 - have one for the recipe so just go with
334:14 - the name and of course the name will be
334:16 - a recipe now once i set up my content
334:19 - type in the content model then i just
334:22 - need to add those fields so we click on
334:24 - add field option and notice these are
334:28 - all the types that we can have so for
334:30 - example for title we're going to use a
334:32 - text
334:33 - for the description we'll use text
334:36 - however we'll use long text just so you
334:38 - can see how we can fetch that data on
334:40 - the front end for images we'll use media
334:43 - and hopefully you get adjust so now
334:45 - let's start setting up our fields
334:47 - and we'll have i believe
334:49 - eight or nine
334:50 - and we'll start with a title so go with
334:53 - text like i said there are two options
334:55 - short text or long text and i'll show
334:57 - you the long text when we set up
334:59 - description and for time being let's
335:02 - just go with the name and that will be
335:04 - title now we can go with create or
335:07 - create and configure and as far as
335:10 - configuration options
335:12 - well you can modify the field for
335:14 - example you can set up the validation
335:17 - where the field is required but just
335:19 - keep in mind that even if you go with
335:21 - create option you can still
335:23 - get to the settings of this particular
335:26 - field but in my case i'm going to go
335:27 - right away with create and configure
335:30 - and even though during the video i'll
335:32 - not set up all the fields as required
335:35 - just so i can save some time it is my
335:38 - strong belief that you'll avoid a lot a
335:41 - lot of unnecessary bugs if you do set
335:44 - them up as required because that way
335:46 - when you're adding the data you can
335:48 - right away see like okay i missed this
335:50 - field because trust me it is much harder
335:53 - to find it on the front end later so you
335:56 - just go here with validation and then
335:59 - for the title
336:00 - i'm going to click on required field and
336:03 - in this case since we'll be setting up
336:04 - the pages based on title i'll also go
336:07 - with unique field and lastly i'll also
336:10 - limit the character count just because
336:12 - when i'm displaying them in recipes or
336:15 - at home i'm displaying that in cards and
336:17 - i just don't want to have long titles
336:19 - where they're spanning in two lines
336:21 - again that's just my preference
336:23 - technically you don't have to do that
336:25 - and i'm gonna go with max of i don't
336:27 - know 25 characters like so
336:30 - so let's save this one and there it is
336:33 - now we have our first field
336:35 - then we'll have a cook time so let's go
336:38 - with add field
336:40 - and in this case i'm going to go with
336:42 - integer so notice we have this number of
336:44 - course and then more specifically we can
336:46 - go with decimal or integer so
336:49 - essentially in this field we'll set up
336:51 - how long it takes to cook the recipe and
336:54 - i'll call this cook
336:56 - time so i'm going to use this capital
336:58 - question again normally i would
337:00 - configure
337:02 - where
337:02 - the field is required but in this case
337:04 - i'm just going to skip but i do want to
337:06 - showcase that if for instance you don't
337:09 - click on create and configure right away
337:12 - you can still access it in the settings
337:14 - so go to the settings and basically you
337:17 - will have the same models available
337:20 - then we're looking for description and
337:22 - again it's going to be a text however
337:24 - we're going to go with long text just
337:26 - because there are some differences when
337:28 - we access it and i'm going to call this
337:30 - description
337:32 - okay we create then again how many
337:34 - servings that's going to be an integer
337:37 - so servings here we'll keep it as an
337:40 - integer awesome
337:41 - then we're going to go with our image
337:43 - and if we want to add an image we go
337:46 - with media and then we have options of
337:49 - one file or many files
337:51 - now of course the difference is when
337:53 - you're accessing it the data structure
337:55 - is going to be different if you go with
337:56 - many files so that's why in my case i'm
337:59 - going to go with one file and if you
338:01 - want to follow along exactly like i code
338:04 - in the videos i also suggest using this
338:06 - one file now again you can use many
338:08 - files just keep in mind that you might
338:11 - need to do some hacking later since when
338:14 - the data comes back from the contentful
338:16 - the structure might be a bit different
338:18 - so in my case i'm going to go with image
338:20 - and i'm going to go with one file and
338:23 - this is going to be the case where i'll
338:24 - definitely set up my validation
338:26 - and i'm going to go with required
338:28 - because keep in mind that
338:29 - images are always a pain if they are
338:32 - missing then we have featured and
338:36 - essentially this is going to be the
338:38 - setup where some items are going to be
338:40 - displayed in recipes and home
338:43 - and for about and the contact page will
338:47 - only display
338:48 - featured items so only the ones that
338:51 - have feature property set to true and as
338:54 - far as the field type
338:56 - well this one will be a boolean so we go
338:59 - with add field
339:00 - and then i'm going to go with this
339:02 - boolean option and the name of it will
339:05 - be featured and then we'll just create
339:07 - here and then we have one more integer
339:10 - at this point we have cook time and
339:12 - servings and i'll add one for the prep
339:15 - time as well so again we go with number
339:17 - and more specifically integer and then
339:20 - we go with prep time here we create this
339:22 - one and last one will be our content
339:25 - where i want to showcase how we can set
339:28 - up a json object in contentful and
339:32 - effectively the reason why i want to set
339:34 - it up as a json object is because if i
339:37 - take a look at the recipe notice i have
339:39 - these tags here which is going to be an
339:41 - array then i have instructions which is
339:44 - also going to be array ingredients and
339:47 - tools and all of them effectively are
339:50 - arrays and just to showcase how we can
339:53 - work with json data in contentful i'll
339:56 - set them all up
339:58 - in this one field so i'm going to go
340:01 - back and i'm going to go with add field
340:03 - in this case i'm looking for this json
340:06 - object
340:07 - and i'm just going to call this content
340:09 - here
340:10 - let's create this one
340:12 - and then once we're done setting up all
340:14 - the fields we just bravely click on save
340:16 - and we're good to go and once we have
340:19 - our content type in place now of course
340:22 - we just need to add some content i do
340:25 - suggest adding at least four items
340:28 - so three are going to be featured and
340:31 - one not featured because that way you
340:33 - can have the same setup where basically
340:36 - we'll display all the recipes in home as
340:39 - well as the recipes but when it comes to
340:41 - about
340:42 - as well as contact we'll just display
340:44 - the featured ones now if you want you
340:46 - can set up one as featured and then
340:49 - maybe the second one has not featured
340:51 - that's also an option but i'm gonna go
340:54 - with four
340:55 - and three
340:56 - and the way we add the content instead
340:59 - of content model where we were setting
341:00 - up the structure for our data now of
341:03 - course we just need to add those entries
341:05 - so i'm gonna go with add recipe
341:09 - and then notice what happens if i try to
341:12 - publish without the title which is
341:14 - required as well as my image well i'm
341:17 - going to get the errors i'll have
341:19 - required here
341:21 - as well as required for the title and
341:23 - that's why it's so important to add
341:26 - those validations because that way you
341:28 - can make sure that you always provide
341:30 - the data because i don't want to repeat
341:32 - myself but it's much harder to later
341:35 - find it on front end and in order to
341:38 - speed this up i'll use the values again
341:40 - from my complete project and i'll also
341:43 - open up the hip sum
341:45 - where i can get my dummy text
341:48 - i'm not going to start with i'm baby
341:50 - and then let's go back
341:53 - as far as the title let's see what is
341:55 - the first one
341:56 - in home page we're gonna go with this
341:58 - one
341:59 - here so let me copy this one
342:01 - copy and paste as far as the cook time
342:04 - i'm gonna go with 10 minutes
342:07 - then for the description like i said
342:09 - i'm just going to grab from the hipster
342:11 - ipsum
342:13 - like so so we're just going to copy and
342:14 - paste when it comes to servings i'm just
342:17 - going to add it here for
342:18 - now for the images these are our options
342:21 - so i can go with add media now
342:24 - eventually once we add already some
342:26 - images of course we can choose from add
342:27 - existing but at the moment we have
342:29 - nothing here so i'm just going to go
342:31 - with add new and then we can either
342:36 - get it from our file system we can get
342:39 - it from the search and of course you can
342:41 - see all of your options now in my case
342:45 - i'm gonna go actually with the file
342:47 - system and then more specifically i'm
342:50 - gonna look for my project because if you
342:51 - remember in the assets i had the photos
342:54 - for my four recipes so if i go to the
342:58 - assets and then images and then more
343:00 - specifically now recipes since we set up
343:03 - one more directory i can easily access
343:06 - them so i can say open here and of
343:08 - course i'm going to get
343:10 - my recipe
343:12 - and
343:13 - with images you'll have to publish the
343:15 - image first make sure you do that
343:18 - and then of course you can just
343:20 - navigate back now as you can see once
343:23 - the image is published we are in good
343:25 - shape and the next one is featured so
343:28 - like i said i'll set up three items with
343:31 - a feature of yes and then one is going
343:34 - to be with featured of no now for the
343:37 - prep time i'll simply go with value of
343:40 - four
343:41 - and up next we have the content field
343:43 - where if you remember we went with json
343:47 - object type
343:49 - and therefore of course whatever we set
343:52 - up over here we need to follow the
343:54 - typical json rules for instance all the
343:58 - properties must be in the double
344:01 - quotation marks so for example here i
344:03 - can say items and i can set it up as an
344:06 - array now in order to speed this up just
344:09 - so you don't have to watch me
344:11 - type the json object as well as for your
344:15 - own use i provided already a dummy data
344:18 - for you so if you navigate back to the
344:20 - project and look for data in the assets
344:23 - so first assets and then data directory
344:27 - more specifically look for recipe json
344:30 - and this is the example one
344:33 - that you can right away use
344:35 - notice this is an object i followed the
344:38 - json syntax and
344:40 - all my four properties
344:42 - are arrays so one for tags one for tools
344:46 - ingredients as well as instructions
344:49 - so if you want to speed this up just
344:51 - grab everything here
344:53 - and then navigate back
344:55 - clean out and copy and paste
344:58 - now i do suggest
345:00 - changing at least the tags
345:03 - because if you take a look at our
345:05 - complete project i'm using those tags
345:08 - to showcase how many recipes i have for
345:12 - one tag and notice how this value is
345:14 - changing and then we're clearing
345:17 - for that specific tag so we get all the
345:21 - recipes that match that tag so what i'm
345:23 - trying to say here is that once you save
345:28 - as you move from one item to the next
345:30 - one
345:31 - try to change these tags around now i do
345:33 - suggest keeping this food because that
345:35 - will make sure that we have one tag that
345:38 - has all the items but you don't have to
345:41 - and of course if you want to change
345:42 - these values around for example
345:44 - instructions or ingredients you already
345:46 - know what to do just go into the
345:48 - quotation marks and just change the
345:50 - value now please keep in mind you have
345:52 - to have a proper json syntax so if i'll
345:55 - remove this comma notice i'll get this
345:58 - this is not a valid json so we always
346:01 - always need to follow proper json rules
346:04 - now before we continue let me stress
346:06 - something where of course this is not
346:09 - the only way how you can set up the
346:12 - content type for this particular project
346:15 - case in point i could have just set up
346:17 - four different
346:19 - field types one for tags one for tools
346:21 - and all that and then again just set
346:24 - them up as arrays
346:26 - why i went this route first i wanted to
346:29 - showcase
346:30 - how flexible the json object is that
346:34 - pretty much we can set up as complicated
346:36 - as we want and second well
346:40 - that way i can just provide the entire
346:43 - object and my opinion it just speeds up
346:47 - the data entries for you as well as for
346:50 - me and as far as the tags for my first
346:52 - item i'm going to change them around and
346:54 - i'm going to say beef
346:56 - and then i'm going to go
346:59 - with lunch here and again i'll keep the
347:02 - food tag for all my items so all my
347:05 - items will have the same food
347:07 - just so we can see the functionality in
347:10 - action and once i'm done setting up my
347:12 - json object of course i have all my
347:15 - fields in place so i can just publish my
347:19 - entry so click here and then once it's
347:22 - published if you go back to your content
347:24 - you'll see that you have
347:26 - one item in place
347:28 - and now of course i'll stop the video
347:30 - and i'll add the rest of them just
347:32 - because i don't see the point of you
347:33 - watching me add all my items and then
347:37 - once you're done adding all of your
347:39 - items then of course you can move on to
347:41 - the next video where we'll connect our
347:43 - gatsby application to our contentful
347:47 - i successfully added the rest of my
347:50 - recipes
347:51 - so i have four total
347:54 - and just to showcase how we can add an
347:56 - existing image i'm just going to create
347:58 - one dummy one so if i go with the recipe
348:01 - and then if i find my image like i said
348:04 - we have two options add new media where
348:06 - we can get from the internet or from our
348:09 - computer and of course once we add some
348:13 - images of course i can click from the
348:16 - current assets as well these are my
348:18 - images i can just select from one of
348:20 - these ones and i'm good to go
348:23 - and then i'm not going to save this one
348:25 - so i'll just say delete
348:28 - and we're going to go with permanently
348:29 - delete i guess like so and once i remove
348:32 - that dummy content let me just showcase
348:34 - that
348:35 - for greek ribs
348:36 - i went with featured false
348:39 - so rest of them have features set to
348:41 - true
348:42 - but this one has it as false so this one
348:45 - won't show up in the about page and
348:48 - contact page and second as far as the
348:50 - tags
348:51 - try to set up some repeating tags
348:54 - because that way you'll be able to see
348:55 - better our tags functionality in action
348:59 - now we have the data how do we get it
349:02 - into our gatsby application well we'll
349:06 - have to use a plugin for that and i'm
349:09 - going to navigate to my docs and more
349:11 - specifically i guess i'm looking for
349:13 - gatsby
349:14 - and i'm going for plugins and we're
349:16 - looking for content for one so gas b
349:19 - source contentful we keep on scrolling
349:22 - we can see that we need to install the
349:24 - package and of course we need to stop
349:26 - the server for that so clear everything
349:29 - copy and paste okay we install the
349:32 - package then we keep on scrolling and
349:34 - we'll have to set up our plugin as an
349:37 - object of course we need to provide
349:40 - those options and in this case we need
349:42 - to provide space id
349:44 - as well as the access token now in this
349:47 - video i'll just copy and paste them just
349:49 - because i quickly want to test whether
349:51 - we get some errors or the connection is
349:54 - correct and then in the next video
349:56 - i'll show you how we can work with
349:59 - environment variables in gatsby so
350:01 - please do not push this up to get up
350:04 - after this video because if you'll do
350:06 - that you'll just expose your api keys in
350:10 - your source code so i'll grab this
350:13 - object so i'm looking for this gadsby
350:16 - source contentful
350:18 - and of course i need to go to the
350:20 - guidance b config i'll go below the file
350:23 - system one
350:24 - copy and paste
350:26 - and notice this is the name of course
350:28 - for our result and then in the options
350:31 - as you can see for a different plug-in
350:33 - we have different properties so here we
350:35 - need to provide a
350:36 - space id and second one will be our
350:39 - access token and like i just said in the
350:42 - next video we will set up proper
350:45 - environment variables but for time being
350:48 - we'll just pass in our values directly
350:52 - in the gas b config and where we can get
350:55 - those values well we need to go to our
350:58 - content for one and then look for the
351:00 - second ones and more specifically api
351:04 - keys
351:05 - and of course we haven't set up any yet
351:08 - so we need to go with add api key and
351:11 - i'm going to call this one gatsby
351:13 - tutorial if you want you can add
351:14 - description but you don't have to and
351:17 - you just save it here so we save and
351:20 - then this is going to be our key and
351:22 - then this is our space id and as you can
351:25 - see they're not hiding this space id so
351:27 - we can simply copy
351:29 - and then go back and again make sure
351:31 - that you copy and paste correctly within
351:34 - the template string
351:36 - and then in this case we'll do the same
351:38 - thing with our api access token but just
351:42 - make sure that you get the content
351:44 - delivery one so the preview one is
351:47 - different
351:48 - then we go back again copy and paste we
351:51 - save and then once we spin up the dev
351:54 - server
351:55 - if we don't have any errors in a console
351:58 - we are in good shape trust me
352:01 - if you provided some invalid values then
352:05 - you'll have big fat errors in your
352:07 - terminal when the gatsby application is
352:10 - trying to connect to the contentful and
352:14 - if you scroll up here you'll notice that
352:17 - process data and then we're creating
352:19 - four contentful recipe nodes so we're
352:22 - fetching data we are in good shape
352:24 - because i can see that i'm getting four
352:26 - entries all the four recipes that i just
352:31 - added and once we have successfully
352:33 - connected gatsby application to the
352:35 - contentful before we take a look at the
352:38 - graphql so how we can set up our query i
352:43 - want to showcase how we can hide these
352:45 - sensitive api keys all right so we're
352:48 - successfully fetching data from
352:50 - contentful however there's a major issue
352:54 - in our current setup
352:56 - you see the moment i'll push this up to
352:58 - the github
352:59 - anyone who looks at my source code can
353:02 - just take my api key and that's
353:05 - something you want to avoid at all cost
353:09 - and in order to hide this value you will
353:11 - have to use env variables now env
353:14 - variables are not unique to gatsby in
353:17 - fact they're part of node and then since
353:19 - gatsby is not application of course we
353:21 - have access to env variables as well now
353:25 - if you want to see the whole setup
353:28 - how it works just follow this link so in
353:31 - my case i'm going to go here just
353:33 - because i want to showcase where you can
353:35 - get more info so keep scrolling keep
353:37 - scrolling and we have two options
353:39 - we have
353:40 - one file the environment variables file
353:43 - for development and one production now
353:47 - i'll right away set up both
353:49 - because you want the production one if
353:51 - you run the gatsby build locally now
353:54 - there's two options when we push this up
353:57 - to the nutify we can either drag and
353:59 - drop which is going to be a local build
354:01 - option or we can do the continuous
354:04 - deployment and in that case we don't
354:06 - care about the production one since
354:08 - we'll have to set up those values on
354:10 - metal files separately anyway however
354:13 - i'll right away set them both the
354:14 - development one as well as the
354:17 - production one so let's keep on
354:18 - scrolling
354:20 - again they just mentioned how you can
354:22 - create these two files one for
354:23 - development and one for production and
354:26 - the syntax is following where for
354:29 - env files we need to go with dot emv
354:31 - first and again in gatsby it's
354:33 - development and production keep
354:36 - scrolling keep scrolling and in order to
354:38 - access those values you'll have to
354:40 - require the package now the package
354:43 - comes already as dependency on gatsby so
354:46 - we don't need to install or we'll have
354:48 - to add this line of code whenever we
354:51 - want to use those values so whenever we
354:54 - want to use the values that are coming
354:56 - from the development or the production
354:59 - one and then we just keep on scrolling
355:01 - keep on scrolling and notice in order to
355:03 - access we simply go with process env and
355:07 - then whatever
355:08 - is the variable name so let's go back to
355:10 - our project
355:12 - and i'll open up the sidebar
355:14 - and then you want to create both of
355:16 - those files in the root and you'll for
355:19 - sure need a development one
355:22 - but also right away set up the
355:25 - production one so when we perform a
355:28 - local build we don't get the errors
355:30 - again you create that in the root not in
355:33 - a source
355:34 - that's extremely important and we go
355:36 - here with dot env
355:38 - and we're gonna go with development like
355:40 - so
355:41 - and we'll right away set up another file
355:44 - and here we'll say production so we're
355:47 - gonna go with new file and dot
355:50 - env and
355:52 - production
355:54 - now in development one
355:57 - i'll set up my variable
355:58 - and i'm just going to call this
356:00 - contentful
356:03 - contentful api key api and underscore
356:07 - key and now of course you want to go to
356:10 - gatsby config and take this value now
356:13 - you don't need to set it up as a string
356:16 - you can leave it the way it is
356:19 - and if you're wondering how come the
356:21 - colors in my development file meaning in
356:25 - my emv file are different for the
356:28 - property and the value well because i'm
356:31 - using this extension
356:33 - let me make this one bigger
356:35 - and let me see okay so i'm using this
356:38 - one this dot env so that's the one that
356:41 - makes the color values different
356:44 - and then i'll save my development of
356:46 - course and then back in the gatsby
356:48 - config remember in order to access those
356:52 - values
356:53 - we need to require that package the one
356:55 - that comes with a
356:57 - gatsby as dependency and the package
357:00 - name is dot interview so just take these
357:03 - three lines of code copying them here as
357:06 - well navigate back and somewhere here
357:10 - top of the gadget config of course we
357:13 - want to invoke this one so we want to
357:15 - save it and then scroll down and then
357:19 - simply just write
357:20 - process env and then whatever e is them
357:24 - so in this case contentful api key
357:28 - so navigate back and save it and of
357:31 - course i want to do the same thing in
357:33 - production where i'll take my variable
357:36 - my contentful
357:37 - api key and i'll just copy and paste so
357:40 - now we'll save gatsby config and again
357:43 - this is going to be the case where
357:45 - once you restart the server
357:47 - if there's something wrong with the
357:48 - setup you'll right away see the errors
357:50 - trust me there's going to be big massive
357:53 - errors in the terminal if you don't that
357:56 - means that the setup is correct
357:58 - and now it's really cool
358:00 - is the fact that once we'll push this up
358:03 - to the github
358:04 - then these values
358:07 - the api key values will be hidden
358:10 - because if you take a look at the git
358:11 - ignore you'll see that we're actually
358:14 - ignoring all the env files so keep on
358:17 - scrolling and notice
358:19 - dot env
358:20 - all of them are going to be ignored keep
358:23 - in mind that if you're setting up your
358:25 - own project
358:26 - and if you don't have the git ignore
358:28 - it's crucial that you also add
358:31 - all the nv files otherwise
358:34 - whatever we're doing over here doesn't
358:36 - really matter because it's going to be
358:38 - pushed up to the github anyway now if i
358:41 - check my terminal looks like everything
358:43 - went correct again we can scroll up and
358:46 - we can see that we're fetching data from
358:48 - contentful and we're successful we're
358:50 - getting four entries so now of course we
358:53 - just need to go to the graphql and
358:55 - figure out how we can set up the query
358:58 - for our recipes all right and once we're
359:01 - done setting up our env variables
359:03 - next i want to set up a query where we
359:06 - fetch
359:07 - all the recipes
359:08 - now in order to do that we need to go
359:10 - back to the graphql and if you don't see
359:12 - these fields for example all contentful
359:15 - asset
359:16 - or the contentful recipe make sure that
359:18 - you restart the sandbox and then of
359:22 - course you'll see all these fields and
359:25 - the ones that we're looking for
359:27 - is the all contentful recipe as well as
359:30 - the recipe one so we have contentful
359:33 - recipe
359:34 - why do we want these fields well because
359:37 - this one will use to get all the recipes
359:40 - and this one will use later when we set
359:42 - up our pages programmatically and again
359:46 - not to be redundant but what's really
359:47 - cool is that the moment we
359:50 - install a plugin then we have access to
359:54 - those fields so it's not like you have
359:56 - to memorize them or remember them
359:58 - they're only available once you install
360:01 - the plugin
360:03 - and then of course in order to set up
360:05 - the query i need to pick a field and in
360:08 - this case since i want to query all my
360:11 - recipes in this case well i just need to
360:14 - go with all because remember that was
360:16 - the rule if you want to work with list
360:18 - you go with all and in this case since
360:21 - my content type is a recipe since i
360:24 - named my content type recipe that's why
360:26 - i need to follow the same name
360:29 - and then if i want to get one
360:32 - specific recipe of course i'm gonna go
360:34 - with content for one
360:35 - now in order to set everything up we
360:38 - just click on the triangle for all
360:40 - contentful recipe
360:42 - and then if you remember if we want to
360:45 - work with that list we just need to go
360:48 - with nodes
360:49 - and of course as you can see we get
360:52 - all the fields so pretty much
360:54 - everything that we just set up in
360:57 - contentful we have access to and of
361:00 - course at this point we just need to ask
361:02 - ourselves so for this first query
361:05 - do i really need all the data
361:07 - or i simply need my image
361:10 - i need the title
361:11 - i need the prep time as well as the cook
361:13 - time
361:14 - and of course the answer is i only need
361:17 - these four values plus the id because
361:20 - we'll be setting up a list
361:22 - and if you remember in react we need to
361:24 - use key prop and we need to provide
361:26 - something unique so we might as well use
361:28 - the id that is coming back from the
361:31 - contentful now later when we'll be
361:34 - setting up individual pages yes of
361:36 - course we'll grab not only the
361:39 - instructions ingredients tools and tags
361:41 - but also servings as well as description
361:44 - but for the time being
361:46 - we really need only these four things
361:49 - plus the tags so something i forgot to
361:51 - mention we'll also need to get those
361:54 - tags
361:54 - out of that content
361:56 - because side by side i want to set up my
361:59 - tags with my recipes
362:02 - so let me stop talking and we'll just
362:04 - navigate back
362:06 - and get those fields now where do you
362:09 - see the yeti here so we click on id and
362:12 - notice i can run it and i right away i
362:14 - get my array
362:16 - that's my nodes and then in there i have
362:18 - four values why i have four values
362:20 - because i have four recipes and at this
362:23 - point we simply need to provide
362:25 - which fields we want to query so i click
362:28 - on a title and in my response i'll see
362:32 - all the titles
362:33 - if i want to have a cook time
362:36 - then of course i just need to look for
362:38 - that field and add it to my query now i
362:42 - also want to have a prep time and like i
362:46 - said i also want to have access to the
362:48 - tags so i'm going to go to the content
362:51 - if you remember content was an object
362:54 - but then instead of the content
362:56 - i have the tags correct so we go with
362:59 - content since it's an object we're more
363:02 - specifically looking for the tags which
363:04 - is an array and that should get us back
363:08 - our tags and lastly of course i also
363:10 - want to get my image now in order to get
363:13 - the image first i need to look for the
363:15 - field name which surprise surprise is an
363:18 - image and then if you remember in order
363:21 - to set up gatsby image component we
363:24 - needed to provide this gatsby image data
363:28 - now something important i want to
363:29 - mention you will only have access to
363:32 - gatsby image data if the people who
363:35 - built the plugin
363:37 - made it available to you
363:38 - and in fact that's one of the reasons
363:40 - why we picked contentful because they
363:42 - made it available
363:44 - since gatsby image component comes with
363:47 - version three
363:49 - you might run into some plugins
363:51 - that do not support that yet
363:54 - and if they don't support it then your
363:56 - only other option is building a plugin
363:59 - yourself
364:00 - where effectively you do provide that
364:03 - gatsby image data now again that is
364:05 - definitely out of the scope of what
364:07 - we're trying to do just keep in mind
364:09 - that again if you use some plug-in that
364:12 - doesn't support gatsby image data then
364:14 - there's no way you can use it unless you
364:16 - build your own plugin now in our case
364:20 - people who built the plugin for
364:21 - contentful were nice enough to provide
364:24 - it so of course we just need to go with
364:26 - gatsby image data and then if you
364:28 - remember we can run it as it is or we
364:31 - can provide the options and in my case
364:34 - i'm going to go with layout one and i'll
364:36 - say that the images are going to be
364:38 - constrained and also i'll use my
364:41 - favorite placeholder which is going to
364:43 - be the traced svg so once i run it we're
364:47 - going to get back this giant response
364:51 - with all this data i know that it can be
364:54 - a little bit overwhelming because once
364:56 - we add that image data i mean the
364:58 - response is just going to be massive
365:00 - that's why i was starting with simpler
365:03 - ones like id and title and again the
365:05 - main idea is following where we'll only
365:08 - have access to the fields
365:10 - once we install the plugin
365:12 - then the field name will correspond to
365:15 - our content type which in our case is a
365:17 - recipe now since i want to work with the
365:19 - whole collection i'm going to go with
365:21 - the field that starts with all
365:24 - and then i can access all the fields
365:26 - that i set up in my headless cms
365:29 - and i just need to check on boxes and
365:32 - i'll get back the values and you know
365:34 - what before we go
365:36 - why don't we make things a bit more
365:38 - interesting and also sort our response
365:41 - based on a title so essentially i want
365:44 - to sort my response a to z so i'm going
365:46 - to look for my sort argument
365:48 - and then as far as the fields i'm going
365:50 - to go with title and then when it comes
365:53 - to order i'm gonna go with ascending and
365:56 - then once i run it notice how we're
365:57 - sorting our response a to z and once we
366:01 - have the setup in place now of course i
366:03 - just need to go back to my application
366:05 - and set up a component that takes
366:07 - advantage of this query beautiful once
366:10 - we have our query let's navigate back to
366:12 - our project and in the components i want
366:15 - to create a new component and we're
366:17 - going to use that component in two pages
366:20 - we're going to use it in the recipes as
366:23 - well as the home
366:24 - now inside of our component there's
366:26 - going to be two more components
366:28 - because if you remember
366:30 - i mentioned previously that
366:32 - one of these components we will reuse
366:35 - all throughout our application in about
366:38 - pages as well as the template pages so
366:41 - that's why first i'm going to go to the
366:43 - components and i'll right away create
366:46 - all three of them now the main one where
366:48 - i'll get all the data is going to be all
366:51 - recipes js and the other two are going
366:54 - to be tags list and recipes list so
366:57 - we're going to go with tags
366:59 - list js
367:01 - as well as the recipes list
367:04 - recipes
367:06 - list and we go with jazz now in all
367:10 - recipes for time being
367:12 - let's set it up as a component
367:16 - and then we can right away import our
367:18 - tags list and recipes list so for time
367:21 - being we can set up a heading four
367:24 - and we can just say all recipes just so
367:26 - we can see something on the screen and
367:29 - then let's set up these two components
367:32 - so again i'll use my snippets tags list
367:35 - and we'll say this is
367:37 - tags
367:38 - tags list okay awesome and we're going
367:42 - to do the same thing here
367:44 - so this is going to be our recipes
367:47 - recipes list we save and of course in
367:50 - all recipes i want to import both of
367:53 - them so first i'm going to look for tags
367:55 - list
367:57 - and that is coming from the same folder
368:00 - so i simply say tags list and we're
368:03 - gonna render right after our heading
368:05 - four so we're gonna go with tags list
368:07 - and then we're gonna copy and paste
368:10 - and we'll set up the recipes list so in
368:12 - here i think i can just go with multiple
368:15 - cursors
368:17 - and we'll remove and we'll just say
368:19 - recipes list so we save it and now i
368:22 - want to navigate to both of my pages to
368:25 - the index one as well as the recipes one
368:28 - and just grab my all recipes component
368:32 - so import we go with all
368:35 - recipes from and of course we're looking
368:37 - in the components and we have all
368:40 - recipes component so right after the
368:43 - main but still within the layout that's
368:46 - important
368:47 - render the all recipes
368:50 - and we should get the text once we
368:51 - refresh there it is all the way at the
368:53 - bottom we have those this is a tags list
368:57 - and you know what actually it should be
368:59 - here in the main my apologies yep now it
369:02 - looks better so we have all recipes this
369:04 - is tags list and this is a recipe list
369:08 - and the same thing we want to do in the
369:10 - recipes page as well so navigate to the
369:13 - recipes page
369:14 - and simply go with import and then the
369:18 - same import we go with all
369:20 - recipes
369:22 - from um we're looking in the components
369:25 - and then we're looking for
369:27 - all the recipes
369:29 - and then as far as return
369:31 - we'll have a layout then we'll have a
369:35 - main with a class of page and then
369:38 - inside of it let's just render again all
369:41 - recipes
369:42 - and then let's see what we have in the
369:44 - browser so i'm going to navigate to the
369:46 - recipes
369:48 - now i have my component there as well
369:51 - and once we have the setup in place now
369:54 - let's navigate to all recipes
369:57 - and set up the
369:58 - use static query hook so we can pull
370:01 - that data so we can pull that data into
370:03 - component and then we'll pass it in into
370:06 - the tags list and recipes list again why
370:09 - we're doing that because recipes list
370:12 - will reuse throughout our project
370:15 - so set them up separately
370:18 - and then we can reuse this sucker in
370:20 - different pages as well
370:23 - remember this is react so you can set it
370:26 - up in all kinds of ways this is just one
370:28 - of the ways how we can set it up and in
370:31 - order to use the use static query hook
370:34 - we need to have two things from gatsby
370:37 - graphql first and also we need to have
370:40 - this use static
370:42 - query and we just need to import from
370:44 - the caspy and after that i want to set
370:48 - up my query however
370:50 - i think i will use the code exporter
370:52 - option because i think it's going to be
370:54 - faster so again my preference is using
370:56 - the page query even though i'm not going
370:59 - to be setting up a page query of course
371:01 - we're working in a component so i'll
371:04 - just omit the export and i'll take
371:06 - everything after that so i'll take
371:09 - constant all the way to the closing tag
371:13 - template
371:14 - and i'm going to copy and paste that's
371:16 - my query and in order to invoke it i
371:19 - just need to go with some kind of
371:20 - variable and i'm going to go data and of
371:22 - course i'll use my use static query and
371:25 - i'll pass it in my query and for time
371:27 - being i just want to check whether i'm
371:30 - getting back that object if i do then
371:32 - i'll pass my nodes array down to tags
371:35 - list as well as recipes list
371:38 - so in here i'm going to go simply with
371:41 - data and i'll cancel logic just so i can
371:44 - see that i have something on the screen
371:47 - i can refresh testing
371:49 - that's where we were setting up the
371:50 - gallery in this case i want to go to the
371:53 - home one
371:54 - and i want to take a look at my devtools
371:57 - console and of course i have my giant
372:00 - object and then instead of that object i
372:03 - have property by the name of
372:05 - all contentful recipe and then that
372:08 - property is an object and inside of that
372:11 - object i have those nodes and again at
372:14 - this point it is simply javascript if
372:16 - you want
372:17 - you can destructure it here
372:19 - you can say that inside of this object
372:21 - i'm looking for all contentful recipe
372:25 - and then more specifically nodes
372:27 - that's definitely an option or just
372:30 - drill it down to the nodes so first
372:32 - let's do the second option where i'll
372:34 - still call this data
372:36 - and then i'll come up with a new
372:38 - variable i'll say recipes is equal to
372:40 - data and then
372:43 - remember the property name all
372:45 - contentful
372:47 - and
372:48 - recipe
372:50 - recipe
372:51 - and dot nodes
372:53 - and of course if you want again you can
372:55 - console log it and yes in first examples
372:58 - we'll do quite a bit of console logging
373:00 - and then later of course we'll do that
373:01 - less and less if i refresh notice now of
373:04 - course i have access to the array
373:07 - and the way our functionality is going
373:09 - to work will pass this recipes variable
373:13 - down to both components to the tags list
373:16 - where i will set up some functionality
373:18 - as well as the recipes list so in the
373:21 - recipes list we'll just iterate over
373:24 - that list and display those nice cards
373:26 - now the tags list yes there's going to
373:28 - be a different functionality at this
373:30 - point i simply want to showcase that
373:33 - both of them effectively do the same
373:34 - thing so if i'll comment this out and if
373:37 - i go this route where i do the
373:39 - structuring all content full
373:42 - and recipe which is an object and then
373:45 - we just look for the nodes and i can
373:48 - give it an alias and i can just call it
373:50 - the recipes
373:51 - please try to understand it both of them
373:54 - do exactly the same at the end of the
373:56 - day you just have access to the array
373:59 - and it really comes down to your
374:01 - preference some people prefer
374:03 - the destruction like so and some say
374:05 - that this is more readable and
374:08 - understand that there's no way for me to
374:10 - please everyone
374:11 - and therefore i'll go with whatever i
374:15 - prefer the most
374:16 - and in most cases it is going to be
374:19 - setting up the destruction but just so
374:22 - we can start nice and easy i'm going to
374:24 - go back to the first option instead so
374:28 - i'll set this up as data and again in
374:31 - the console we'll see the four recipes
374:34 - and then like i said in order to set
374:36 - everything up
374:38 - we'll have to pass in this recipes so
374:41 - our
374:42 - nodes array down to the tags list
374:44 - component as well as the recipes list so
374:47 - i'll set up props on both of them i'll
374:50 - call the recipes and i'll set it equal
374:52 - to my recipes variable and the same
374:55 - thing you want to do here so we can just
374:58 - copy and paste and now both
375:00 - tags list and recipes list has access to
375:04 - the array
375:05 - and in one component we'll just iterate
375:07 - over them
375:08 - and then in the second one in tags
375:10 - there's going to be more functionality
375:13 - not bad that bad we have all recipes
375:16 - component
375:17 - in good styling so now of course we can
375:20 - work on the other two as well and i
375:23 - think since i want to get something fast
375:26 - on the screen we'll set up the recipes
375:29 - list first
375:30 - and then we'll work on our tags list
375:33 - and as far as the recipes list
375:36 - well let's start by removing this
375:38 - heading 4 in all recipes
375:41 - and you know as far as the return why
375:43 - don't we also change this div to a
375:46 - section and we'll add a class name just
375:49 - so we can get a little bit of styling so
375:51 - we'll go with recipes and then container
375:55 - okay awesome
375:57 - and then i'm going to navigate to
376:00 - recipes list and we want to do some
376:02 - imports first now what are we going to
376:05 - be looking for i want to get a link
376:07 - since cards are actually going to be
376:10 - links and they will navigate to that
376:13 - single recipe page and don't worry
376:17 - for time being we'll have some errors
376:19 - because we haven't set up those pages
376:21 - yet
376:22 - that's still coming up but i still want
376:24 - a link right away so i'm gonna go with
376:26 - import link from and of course i'm
376:29 - looking for gatsby and i also want to
376:31 - have a gatsby image because of course
376:34 - now i want to display those images but
376:37 - for dynamic data we need to use gatsby
376:40 - image component so we go with import
376:43 - we're looking for gatsby image
376:45 - that one is coming from gatsby plugin
376:48 - image
376:49 - those are our two imports and now of
376:51 - course we just need to set up the
376:52 - functionality now i know that i'm
376:55 - getting my recipes prop correct and
376:58 - that's where i have my recipes alright
377:00 - so i'll simply destructure it right away
377:03 - in the parameters
377:04 - and since i will use it all throughout
377:07 - my project i might as well set up a nice
377:11 - default where i say that if recipes are
377:13 - not provided then the default value will
377:17 - be empty already so again that way you
377:19 - just avoid some unnecessary errors then
377:22 - as far as the return
377:24 - i want to iterate over my recipes so the
377:28 - list that is going to be passed in
377:30 - and for return we're going to go with
377:32 - div and we're gonna add class name so we
377:35 - get a little bit of styling recipes list
377:39 - and now let's iterate over
377:41 - our array so inside of this div i'm
377:44 - gonna set up recipes that's the name of
377:47 - course for my prop and i know that it is
377:50 - an array and as far as the parameter i'm
377:52 - just going to use the name of a recipe
377:55 - and what i want to return for each and
377:57 - every recipe well let's just start very
378:00 - simply
378:01 - by saying return and we're going to go
378:03 - with paragraph and i'll say recipe title
378:07 - just so we can get something on the
378:08 - screen and of course then we'll work on
378:11 - more meaningful return
378:13 - and how do i know that the title
378:16 - property is there well i simply know
378:18 - that because when we take a look at our
378:21 - graphql what do i have there i have the
378:24 - nodes and then inside of this node i
378:26 - have my tile property and don't worry we
378:28 - can also cancel log here and you'll
378:31 - definitely see that as well you'll see
378:33 - that object and then once we save we
378:35 - have banana pancakes and the rest of
378:38 - them as well and again if you want to
378:41 - double check where we're getting this
378:43 - info now again there's going to be some
378:45 - warnings because we're not using the key
378:48 - prop yet don't worry we'll do that but
378:50 - take a look at our console we have four
378:53 - objects so we have an array and i'm just
378:56 - iterating over that array and then for
378:58 - every item i'm getting back this object
379:01 - so now of course we just need to
379:02 - construct
379:04 - our return
379:05 - so it looks more like this
379:08 - like these cards here
379:10 - and the way we're going to do that
379:12 - i'll write away the structure those
379:14 - properties out of my object so we go
379:17 - here with id we also want to get a title
379:21 - we want to get a image and we're going
379:24 - to go with prep time
379:26 - and cook time cook time here and all of
379:29 - that is coming from my object and as far
379:32 - as the return i'll right away wrap it in
379:36 - a link and i'll provide a dynamic value
379:39 - so the way it's going to look like i'm
379:40 - going to say link and then we need to
379:42 - add a to prop so where we're going to
379:45 - navigate once we click on this link
379:47 - however in this case i want to set up a
379:50 - dynamic value so unlike the previous
379:52 - cases where i was hard coding i said go
379:55 - to the forward slash home or about or
379:58 - whatever we need to keep in mind that
380:00 - eventually there's going to be a page
380:03 - for every item and the url is going to
380:06 - be forward slash and whatever is the
380:09 - name
380:10 - of my recipe now there's going to be
380:12 - some magic
380:14 - where we'll add these hyphens in between
380:16 - as well and when i say we of course i
380:18 - mean gatsby but we don't need to worry
380:21 - about that just worry about the fact
380:23 - that we need to set up our links
380:25 - with forward slash and whatever is the
380:28 - name of the recipe just keep in mind
380:30 - that we have four so that's why we
380:32 - access this variable name where we say
380:34 - okay
380:35 - so we're going to navigate to
380:38 - and we'll set up here a curly braces
380:41 - because we want to go back to the
380:42 - javascript plan and since i want to
380:44 - access a variable
380:46 - i'm also going to set up right away a
380:48 - tempo literal i'll say forward slash and
380:52 - then whatever is my title so we're
380:54 - passing in this dynamic value for our
380:57 - url okay let's say that one so now of
381:00 - course we have them as links but like i
381:02 - said we haven't created those pages so
381:04 - of course the moment you'll click on it
381:07 - you'll have the error page because
381:08 - notice these are all the pages we have
381:11 - and we don't have one for forward slash
381:13 - banana package or greek cribs or
381:16 - vegetable soup we will create those
381:18 - pages later but i right away we want to
381:20 - set up these dynamic links where the
381:23 - values depend on the title
381:26 - that we get out of the recipe
381:29 - let me just navigate
381:31 - back to the home page or recipes it
381:33 - doesn't really matter and then instead
381:36 - of the link
381:37 - why don't we also right away set up a
381:40 - gatsby image instead i want to set them
381:42 - up as cards now i do want to add a
381:45 - little bit of styling here and i'll say
381:47 - recipe that's the class that is coming
381:49 - from my main css and also since i have a
381:52 - list in react i need to add a key prop
381:55 - and something dynamic now in this case
381:57 - something dynamic and unique is going to
382:00 - be my id something that the contentful
382:03 - already provides for me and then inside
382:05 - of the link i right away want to set up
382:07 - my images so i have the card
382:10 - and each card has the image and of
382:13 - course that represents that particular
382:15 - recipe and i already imported a get the
382:18 - image component since i have dynamic
382:21 - images the value of course
382:23 - is changing from one recipe to another
382:26 - one so it's not the same so it's not
382:28 - static and here we go with guess the
382:30 - image component we have image prop and
382:33 - initially
382:34 - i will drill down to the property by the
382:37 - name of gatsby image data
382:39 - and then later we'll use the helper
382:42 - function as well again if you're a bit
382:44 - lost of what's happening
382:46 - remember we are querying
382:49 - for the image and then inside of that
382:51 - image we have gatsby image data object
382:54 - and this is a giant object that provides
382:57 - all the necessary values to our
383:00 - component to our gatsby image component
383:03 - and this is also where we passed in our
383:06 - options so now we simply need to go with
383:08 - image that's the name of the property
383:11 - and inside of it we have this gatsby
383:14 - image and data property that's all we
383:17 - have to do now i have some css in place
383:20 - so we also want to go with class name
383:23 - and recipe hyphen img and also as far as
383:27 - the alternative we can simply pass in
383:30 - the title so whatever we have as a title
383:32 - value we can just simply pass it here
383:35 - i'll close it
383:36 - and then once we save notice we have
383:40 - our nice images displayed on screen as
383:43 - well and then right after the gatsby
383:45 - image i'm going to go with heading 5
383:47 - with my title
383:49 - so i'm going to go back to javascript
383:50 - and i'll access the title variable and
383:54 - then we have paragraph with two values
383:56 - we have one for prep time and second one
383:59 - for the quicktime so let's go prep
384:02 - and colon and let's access the variable
384:05 - so prep time here
384:07 - and then the second one will be cooktime
384:09 - and you know what it's also add here min
384:12 - and i'm going to add that vertical bar
384:14 - and i'll say cook
384:16 - and of course this one will be cook time
384:19 - so we save it and if we navigate to the
384:22 - bigger screen
384:24 - there should be no warnings in the
384:27 - console okay that's good and we can also
384:29 - see the prep time as well as the cook
384:32 - time now as you're hovering notice these
384:35 - errors we'll have them for time being
384:39 - so these are different these ones are
384:40 - because gatsby is trying to prefetch
384:43 - that page which will eventually set up
384:46 - and of course the moment the page
384:48 - doesn't exist so don't worry about it
384:51 - we'll fix it later
384:52 - one thing that is missing here is cook
384:55 - and i also want to add a min
384:58 - and then let's also utilize our helper
385:00 - function so at the moment i'm accessing
385:03 - my image property and usb image and the
385:07 - way i set up my contentful the image
385:09 - field is required but just in case the
385:12 - image is missing so there is no image
385:14 - property but i'm still trying to access
385:17 - a property on that image since i don't
385:20 - want to get that big fat error i can go
385:23 - with my get image remember that was my
385:26 - helper function and simply
385:29 - we can set up a new value again i'm
385:31 - going to go with path to
385:33 - image
385:34 - and that will be equal to get image and
385:37 - then i simply need to provide my image
385:40 - property so i go here and instead of
385:43 - image we simply go with path to image so
385:48 - once we get to the object
385:50 - where the
385:51 - gatsby image data is sitting
385:54 - we are in good shape notice we provide
385:56 - that one and everything works now if
385:59 - you'll mess this up nothing bad is going
386:01 - to happen so if by mistake i type here
386:04 - recipe that's not going to be a direct
386:08 - parent of my gatsby image so once i save
386:11 - notice my images are just missing but i
386:14 - don't have those errors so this bug does
386:16 - not break my application which is super
386:19 - super cool and that's why
386:21 - the get image helper function is very
386:24 - useful so i'm going to go back to my
386:26 - image again that's where the
386:29 - gatsby image data is sitting and once i
386:33 - provide that i get a proper path and
386:35 - we're in good shape where we have the
386:38 - recipes list in two pages we have it in
386:42 - homepage as well as the recipes page
386:46 - and since we can access recipes as props
386:49 - that's our setup in our recipes list
386:51 - will just provide different value for
386:53 - the recipes so in this case i'm
386:56 - providing all my recipes whatever i have
386:59 - currently i have four but if i'm gonna
387:01 - have four thousand then of course i'll
387:03 - provide four thousand in the all recipes
387:06 - however you'll see how in different
387:09 - setups we'll provide
387:11 - different data
387:13 - and while we still have our query in
387:15 - sandbox
387:16 - why don't we do just that why don't we
387:19 - worry about rendering recipes list with
387:22 - different data in different pages and
387:25 - then we'll switch back to the tags list
387:28 - because there's also a bit more
387:30 - functionality we need to do in order to
387:33 - showcase the tags
387:35 - like i have in the final project so
387:38 - first
387:39 - i want to go back to my sandbox and now
387:43 - let's think about the changes we need to
387:45 - make
387:46 - first i don't need to have tags here so
387:49 - i can simply go back to my explorer and
387:53 - remove the tags so i'm not looking for
387:55 - them i also want to change a little bit
387:57 - images so they're a bit different so
388:00 - instead of the placeholder option i'm
388:03 - going to go with a blurred one and
388:05 - probably the most important part is the
388:07 - fact that in this case i want to filter
388:10 - my response i want to get only the
388:13 - recipes which have featured
388:15 - set to true and remember we can combine
388:18 - all these arguments so i simply go back
388:21 - to my filter argument
388:23 - and then i'm looking for the featured
388:25 - one
388:26 - where it is where it is where it is yep
388:28 - there it is that's my featured and i'm
388:30 - going to go with equals option
388:32 - and notice how it right away tells me
388:35 - that it is a boolean so either i can go
388:37 - with true or false and in my case i just
388:40 - want to set feature to true so only the
388:44 - items
388:45 - who have featured set to true so in my
388:48 - case three items those ones will be
388:50 - returned again it's gonna be very hard
388:52 - to see
388:53 - in our response because of course we
388:56 - have that gatsby image data now if you
388:59 - want you can just scroll down and you
389:02 - can take a look at the total count
389:04 - that's one of the options let's scroll
389:05 - down and in my case it's going to say
389:07 - two which is weird because i told you
389:10 - that i set three of them so let me
389:12 - quickly fix that
389:13 - i'm gonna go back here
389:16 - and
389:17 - let's say greek ribs
389:19 - okay that one was for sure now
389:22 - and let's see vegetable soup and this
389:25 - one i just didn't set up so by default
389:27 - is going to be as false so something to
389:29 - keep in mind but then remember two
389:31 - things first every time you modify data
389:34 - in contentful make sure that you publish
389:36 - the changes otherwise you won't access
389:38 - the latest value so make sure the one
389:41 - that you just modified you also have it
389:44 - as published not just changed and second
389:48 - we need to restart our project because
389:50 - we want to get the latest data so i'm
389:53 - going to go with clear npm start i'll
389:56 - spin up my dev server and then i'll just
389:59 - have to wait a little bit and then once
390:01 - i have the latest data my total count
390:04 - should be equal to three
390:06 - and once the dev server is up and
390:08 - running if i refresh
390:10 - and if i run it
390:12 - and if we take a look notice of course
390:15 - now the total count is three which is
390:18 - exactly what i was looking for so now i
390:21 - can remove that total count
390:24 - and i'll simply use my code exporter in
390:27 - this case i do want to use the page
390:29 - query because we'll be setting up this
390:31 - query in the about page then we want to
390:35 - navigate back to our project and i'll
390:39 - start with about page
390:41 - where below my component
390:43 - i will set up my query okay awesome
390:47 - that is working
390:48 - then we want to make some imports here
390:51 - as well so at the moment we have a link
390:53 - we have static image but i also want to
390:56 - get that graphql
390:58 - from the gatsby so make sure that every
391:01 - time you set up the query you also
391:03 - import this graphql that is a must and
391:07 - then of course i want to get my recipes
391:09 - list again keep in mind something we're
391:12 - not talking about all recipes
391:14 - all recipes has both it has tags list
391:17 - and recipes list in this case i just
391:20 - want to grab the recipes list and we'll
391:23 - provide the value
391:26 - that we're getting back from our query
391:28 - so that's how we can reuse it in
391:30 - multiple parts of our application and
391:33 - every time we'll pass in different
391:35 - values so every time we'll just change
391:38 - what recipes are rendered so
391:42 - in the about.js i'm going to go with
391:44 - import and i'm looking for recipes
391:48 - and a list from i'm looking in the
391:51 - components and then recipes list i
391:54 - scroll down
391:56 - and then
391:57 - right next to my first section i'm going
392:00 - to create another one now there's right
392:02 - away a class so i want to add a little
392:05 - bit of styling and therefore i'll go
392:08 - with featured and then
392:10 - recipes like so and then inside of this
392:13 - section let's start with a heading 5.
392:16 - and let's just type look at this
392:19 - awesome sauce
392:20 - awesome
392:22 - sauce exclamation point and then let's
392:24 - go with our recipes list and what's
392:27 - really cool since i have in my recipes
392:30 - list this default value
392:33 - if i don't provide something by mistake
392:35 - for example
392:36 - then nothing bad is going to happen so
392:38 - if i navigate back to my project and of
392:41 - course i want to take a look at the
392:42 - above notice how nothing bad is
392:45 - happening right so everything still
392:47 - works so if i take a look at the console
392:49 - yeah i have these ones but they have
392:51 - nothing to do with my current setup but
392:55 - if you go to the recipes list and if
392:57 - you'll remove this one then you'll right
393:00 - away have the big fat error because
393:02 - you're trying to render a component and
393:04 - that component is looking for the prop
393:06 - is looking for a recipes prop however in
393:09 - the above page we're not passing that's
393:11 - why
393:12 - it's always nifty if you add those
393:14 - default values and again this has
393:16 - nothing to do with gatsby or react it's
393:18 - just straight up javascript where i say
393:20 - you know what if the recipes are not
393:22 - provided well simply treat it as an
393:25 - empty array and that way of course we
393:27 - don't have anything on the screen
393:29 - but what's important is that we also
393:32 - don't mess everything up and before we
393:35 - deal with recipes if you ever have this
393:38 - type of situation where you can see that
393:41 - the image is not loading try running
393:43 - gatsby clean so i'm going to go back i'm
393:45 - going to stop my server and then we
393:47 - simply run gatsby clean and then we're
393:50 - going to go with gatsby develop
393:52 - and you'll see that
393:54 - everything is going to work once in a
393:56 - while you might have something all stuck
393:58 - in a cache so
394:00 - that's the reason why you have this box
394:02 - so if i navigate back and if i refresh
394:04 - notice how everything works smoothly and
394:07 - of course i have my heading 5
394:09 - and
394:10 - at the moment i don't see any recipes
394:12 - because we're not passing them in and if
394:15 - you remember the difference between the
394:17 - component query and the page query is
394:20 - the fact that with a page query we don't
394:23 - need to use our hook we simply can
394:25 - access it if we take a look at the data
394:28 - property and in order to check that we
394:30 - simply go with data as you can see i'm
394:32 - right away structuring and i'm going to
394:34 - go with console.log and data
394:37 - so once i navigate back once i refresh
394:39 - and all the way in the bottom i have my
394:41 - object and line inside of it again i
394:43 - have all contentful recipe and nodes and
394:46 - all that now the difference of course in
394:48 - this case is that this nodes array is
394:51 - smaller because we're only getting the
394:54 - items
394:56 - who have featured set to true and again
394:59 - if you want you can assign it to a
395:02 - variable just like we were doing in
395:05 - all recipes but in my case i'm going to
395:08 - go with the structuring in the function
395:10 - parameters
395:11 - so i'm going to go back to about.js
395:14 - and then here i'll say that instead of
395:16 - the data there is a object by the name
395:19 - of contentful recipe
395:22 - and then inside of that recipe object i
395:25 - have nodes and i'll right away give an
395:28 - alias of recipes
395:30 - again at the end of the day
395:32 - the functionality is exactly the same
395:34 - where now i can scroll down and since
395:37 - recipes list is
395:39 - looking
395:40 - for recipes prop i can simply pass in my
395:43 - recipes and now if you navigate to about
395:46 - the page and if you refresh
395:48 - by the way
395:49 - here i guess i'll have to save it one
395:51 - more time and there is now of course i
395:54 - have my recipes however these ones are
395:57 - the featured recipes and i know i said
396:00 - this before but what's really really
396:02 - really cool
396:03 - is the fact that we can reuse this
396:05 - component so i can do the same thing in
396:08 - a contact page i simply need to go there
396:11 - and first i guess i want to start with
396:13 - my imports and you know in order to
396:14 - speed this up i will copy and paste so
396:17 - i'm looking for these two suckers
396:19 - and we're gonna do copy and paste okay
396:21 - awesome that will do the same thing with
396:24 - a query okay awesome and then all the
396:28 - way in the bottom in the contact page
396:29 - we'll set up our query and then the same
396:32 - thing we have access to the values in
396:35 - the data and in this case again let me
396:38 - switch back to the drilling one where
396:40 - i'm going to go with the recipes is
396:42 - equal to data and then the value is all
396:46 - contentful
396:48 - and recipe
396:50 - and then no it's correct and of course i
396:53 - just need to scroll down we're going to
396:54 - go with the same section just like we
396:57 - have in about.js so i think it's gonna
396:59 - be faster if i just navigate back here
397:02 - select my whole section
397:03 - and render it in the contact page as
397:06 - well and now if i go back to my big
397:09 - browser i can clearly see that i have my
397:12 - featured ones in the about page as well
397:15 - as the contact page again
397:17 - main takeaways are following
397:19 - where we change our query a bit so we
397:23 - look for different fields and i removed
397:26 - the contact one
397:28 - then i added another argument in this
397:30 - case we're filtering for the recipes
397:34 - that have featured set to true and then
397:37 - we just set up two page queries one and
397:40 - about and one contact and in the page
397:43 - queries we access it directly in the
397:45 - component so we don't need to use the
397:47 - hook
397:48 - and we need to look for the data
397:50 - property and from there the setup is
397:52 - exactly the same where we have the
397:54 - component which is looking for the
397:56 - recipes and we just render
397:59 - the recipes list component and provide
398:02 - the value for the recipes prop
398:05 - not bad not bad i think our project
398:07 - looks nicer and nicer at the moment we
398:10 - can display the recipes as well
398:12 - and up next i want to work on tags
398:16 - but there are two major issues
398:18 - you see unlike the recipes
398:20 - we're not going to be able just to
398:22 - iterate over the tags
398:24 - why well because tags are actually an
398:27 - array e inside of the items so we have
398:31 - array within the array and moreover
398:34 - there's a content property as well
398:36 - that's number one so our data structure
398:39 - is more complicated for the tags and
398:42 - second
398:43 - check out this is the result that i want
398:46 - so i want tags
398:47 - i want them in the alphabetical order
398:50 - and i want to showcase well how many
398:53 - food items i have
398:54 - with that tag for food i have four and
398:57 - then for beef i have only one
399:00 - so it's not like with recipes where we
399:02 - just took the array iterate it over and
399:05 - then display the image title and all
399:07 - that unfortunately we'll have to do a
399:09 - bit more work and if you don't believe
399:11 - me
399:12 - we can just navigate back to the project
399:15 - i'll close everything here
399:16 - i'll close the sidebar
399:19 - and here as well and let's just simply
399:21 - go to components we're looking for the
399:25 - tags list here and then remember we're
399:28 - passing in the recipes right so we're
399:30 - going to go to the recipes and if we
399:32 - cancel log
399:34 - you'll see that of course the structure
399:36 - is more complex so i'm going to navigate
399:39 - to the home page
399:41 - or recipes page it doesn't really matter
399:43 - since we render in both pages in the
399:46 - console and i guess i'll have to refresh
399:49 - in a console eventually i should see the
399:51 - tag list and that's again one of the
399:53 - unfortunate things where you need to hop
399:55 - back and forth
399:56 - just to get the latest results
399:58 - and as you can see so that is my array
400:01 - those are my four items
400:03 - and then
400:04 - those tags
400:06 - are inside of it
400:08 - so we have here a content property
400:11 - and then inside of it we have that array
400:14 - of tags
400:16 - and that's why we'll set up a separate
400:17 - function now why are we setting up the
400:20 - separate function to pull out those
400:22 - particular tags well because there's
400:23 - going to be more functionality and i
400:26 - want to reuse that functionality in the
400:28 - tags page so i don't want to set it up
400:31 - here and then copy and paste we might as
400:33 - well then just set up a separate folder
400:36 - and call it utils and then reuse that
400:39 - function so here's what i want to do
400:41 - i'm going to go back to the source i'll
400:43 - create a new folder and i'm going to
400:46 - call this utils
400:47 - once i create that folder then i'm going
400:49 - to create a new file
400:51 - and i'll say setup tags set up tags and
400:55 - it's simply going to be a function so
400:57 - i'm not going to set it up as a
400:59 - component i'll say const and then set up
401:02 - tags and it's going to be looking for
401:05 - one thing as an argument it's going to
401:07 - be looking for my recipes already so
401:09 - i'll just name my parameter recipes
401:12 - and then for time being i'll just return
401:15 - the recipes
401:16 - i mean we don't have any functionality
401:18 - yet and then of course i want to export
401:20 - it
401:21 - and since i'm not going to have more
401:22 - functions here i'm just going to go with
401:24 - export default and then setup tags and
401:28 - now of course i need to go back to the
401:30 - tags list
401:32 - and then import the function correct so
401:34 - we're going to go with import and you
401:36 - know before we import one and we also
401:38 - cancel log
401:39 - just so we can see that our import works
401:41 - because
401:43 - it's the worst thing ever if you spend
401:44 - half an hour on functionality and then
401:47 - something doesn't work but it's not the
401:49 - code it's actually the fact that you
401:52 - messed up on the import so i'm going to
401:54 - go with hello
401:56 - from eu tools here just so we can see
401:59 - that our stuff works and back in tags
402:01 - list
402:03 - again i'm going to go with setup
402:05 - tags from and of course i'm looking in
402:08 - the utils
402:09 - and more specifically setup tags and
402:11 - instead of console logging the recipes
402:14 - why don't we go here we set up tags and
402:18 - i'll pass in the recipes
402:20 - and eventually we'll get some new tags
402:22 - back so i might as well come up with
402:25 - some kind of variable there
402:27 - and i'm thinking i'm gonna go with new
402:29 - tags so i'm gonna say const new
402:32 - tags is equal to a setup text and then
402:35 - we pass in the recipe so once we save if
402:38 - everything is correct
402:41 - then in home page
402:44 - or in recipes page doesn't really matter
402:47 - we should see hello from utils and
402:50 - that's awesome that means that our
402:52 - function works at least the initial
402:54 - functionality and now we can just head
402:57 - back
402:58 - and pull out those tags
403:00 - from our array and before we continue
403:03 - let me just stress something this is by
403:06 - far not the only way how you can do it
403:08 - i
403:09 - set up my functionality in a certain way
403:12 - just because i thought that it's going
403:13 - to make way more sense for gatsby
403:15 - tutorial
403:17 - and if at any point
403:19 - you get stuck and you need more info i
403:22 - suggest referring to the javascript
403:24 - nugget series that i have mentioned
403:26 - already quite a few times because in
403:28 - there i cover the topics that i'm going
403:30 - to use to set up the functionality and
403:32 - also eventually i'm planning to add a
403:35 - video
403:36 - where i specifically tackle this topic
403:39 - and i try to do in multiple ways
403:42 - and lastly if you have a better approach
403:45 - don't be shy to share it and i'm going
403:47 - to start here by just looking at the
403:49 - recipes and we need to understand that
403:51 - of course recipes is an array correct so
403:55 - my approach was following where i'm
403:57 - going to create a new empty object so
404:00 - i'm going to go with const
404:01 - all tags is equal to an empty object and
404:04 - then i'm going to set up a for each
404:07 - and i'm actually going to iterate twice
404:10 - i'm going to iterate over recipes but
404:12 - then remember
404:13 - since tags was an array itself i'll also
404:16 - iterate over those tags so every time as
404:20 - i'm iterating all the recipes i'll set
404:22 - up a for inch inside of that recipe over
404:25 - the tags as well so go here with recipes
404:28 - then for each
404:30 - and then
404:32 - we need to set up some kind of parameter
404:34 - that will reference the item and in my
404:36 - case i'm going to go with the recipe and
404:38 - then instead of my function body like i
404:41 - said tags are sitting where they are
404:43 - sitting in the content correct so we
404:45 - need to go with recipe not recipes
404:48 - recipe so that's that individual recipe
404:51 - then we have content property and then
404:53 - we have the tags property which is an
404:56 - array so again we can use the for each
404:58 - and in this case i'm going to call my
405:01 - item a tag and instead of this function
405:05 - well we can start simply by console
405:06 - logging the tag so you can see what is
405:10 - happening again i'm going to navigate
405:11 - back and then
405:12 - notice in the console so these are all
405:15 - the tags i have
405:17 - and first i just want to add them to an
405:20 - object
405:20 - and not only i want to add them to the
405:23 - object i want to make sure that i add
405:26 - only the unique tags that's number one
405:29 - because if you take a look at the
405:30 - complete project i only have the unique
405:32 - ones so they're not repeating and second
405:36 - i want to count them
405:37 - i want to know well how many food i have
405:40 - how many i don't know dinner or whatever
405:42 - so how many similar tags i have so i'm
405:46 - going to go back and remember we have
405:49 - all tags object and here i'll simply set
405:52 - up the functionality where i'll say if
405:54 - all tags object
405:57 - has this particular tag
405:59 - then i just want to add plus one
406:01 - basically i
406:03 - want to add one value to that tag
406:06 - because if i have
406:08 - four foods then of course i want to
406:09 - count them now if the item is not there
406:12 - if there is no property on that object
406:14 - then of course i'm going to create one
406:16 - so i'm going to go with all tags and tag
406:19 - so if the property already exists i'm
406:21 - going to go with all tags and
406:24 - tag plus one initially it's going to be
406:26 - one and then every time there's a
406:29 - repeating tag we just add plus one now
406:32 - if the tag doesn't exist which can be
406:34 - our second option we're gonna go with
406:35 - alt tags
406:36 - and we'll create that property and we'll
406:38 - set that property equal to one and in
406:41 - this case i'm not gonna cancel lag tags
406:43 - anymore i just want to cancel out the
406:46 - alt tags just so you can see what is the
406:48 - result of our iteration
406:51 - and as you can see we have a object and
406:54 - we're counting the tags so for beef we
406:56 - have one for breakfast we have one like
406:59 - i said in my case i set up four food
407:02 - tags just so the functionality makes
407:04 - sense and of course i have two for lunch
407:07 - as well as soup and actually we are in
407:10 - pretty good shape we have the unique
407:13 - tags we have the values and all that but
407:16 - there's two more things that i want to
407:17 - do i want to turn this back into the
407:20 - array that's number one
407:22 - and second i do want to perform sort one
407:24 - more time to
407:26 - always make sure that we definitely have
407:30 - our values
407:31 - based on the alphabetical order so
407:34 - they're always sorted so i'm going to
407:36 - navigate back i have all the tags and
407:39 - then i'll create a new variable i'm
407:41 - going to go with const new tags and that
407:44 - will be equal to the object and then
407:46 - entries and if you're not familiar with
407:49 - this method it returns a property and
407:53 - value in the array and i guess the
407:56 - easiest one
407:58 - is to showcase by actually cancel
408:00 - logging
408:01 - new tags and if you go back to the
408:04 - console notice now i have array of
408:06 - arrays each item is set up as an array
408:10 - like i said property and the value
408:13 - and then that is all sitting in
408:16 - one giant array and once i have this one
408:19 - in place now i want to error proof it by
408:22 - running sword on this array so i'm going
408:25 - to navigate back and we're going to go
408:27 - with sort method
408:29 - now sort method iterates over a and we
408:32 - can access every item on that array and
408:36 - they're represented by some kind of
408:38 - parameters and in my case it's going to
408:39 - be a and b
408:41 - now since we're sorting based on the
408:44 - alphabetical order we need to keep in
408:46 - mind that of course i want to access the
408:49 - string
408:50 - not the value because at this point i
408:53 - have an array as an item not just one
408:56 - simple string and in order to access
408:59 - that string i'm just going to go with
409:00 - const and then i'll rename it first tag
409:04 - and that is coming from the a now this
409:06 - is actually arrayed structure the first
409:08 - item is going to be an array and then
409:11 - from the array get me the first item and
409:14 - again if you want you can cancel logit
409:16 - and you'll see that we're getting both
409:18 - strings so we're going to go with second
409:20 - tag is equal to b and then lastly
409:24 - as far as the functionality for the
409:26 - sorting i'm just going to go with the
409:27 - return
409:28 - and then first tag and then we have this
409:31 - asset method in javascript where we can
409:34 - right away compare strings based on
409:38 - their text i can say locale compare
409:41 - that's the function name and then i pass
409:43 - in the second tag so not setup tag sorry
409:47 - second
409:48 - tag as a result you'll see that we are
409:51 - comparing those string values and we'll
409:54 - always make sure that they are in the
409:56 - alphabetical order and of course
409:58 - eventually i just want to return the
410:00 - tags so i'm going to go with return and
410:03 - instead of recipes we're going to go
410:04 - with new tags so if we go back to the
410:07 - tags list
410:08 - and if you console log
410:10 - new tags
410:12 - you'll see that again we have this array
410:15 - of arrays
410:16 - and these items are always going to be
410:18 - in the alphabetical order and each item
410:21 - is going to be array and then inside of
410:24 - that item we have a string so that's
410:26 - going to be the value and then we have
410:29 - the actual number so this represents
410:31 - well how many tags with this value we
410:33 - have and from then of course it's the
410:36 - same thing we just need to iterate over
410:38 - and then display
410:40 - the links to the tags pages awesome and
410:44 - once we have our array in place now
410:46 - let's just iterate over it
410:48 - and then set up the links to the tags
410:51 - pages again we do not have those pages
410:54 - yet
410:55 - we don't have for example page for the
410:58 - carrots and in that page we display all
411:00 - the foods that have a carrot stack now
411:04 - we don't have it but eventually we will
411:06 - set it up and therefore we'll have right
411:09 - away links to those pages and the way
411:13 - we're going to do that in tags list of
411:16 - course we're not going to cancel log
411:17 - anymore that's it we have all the tags
411:20 - and we just need to work on the return
411:23 - and here simply we'll say that we're
411:25 - returning a div with a class
411:27 - of tag container tag
411:31 - container and we're going to start with
411:34 - a heading 4 here
411:36 - so say
411:37 - heading 4 and we're going to go with
411:39 - recipes
411:41 - so we save it because now we have the
411:43 - heading 4 and then there's going to be
411:45 - another div
411:46 - with a class of tags list
411:49 - so let's go with tags
411:51 - list and then instead of this div
411:53 - now i want to iterate over the new tags
411:56 - array so we're going to go with new tags
411:58 - and we'll map it over and then set up
412:01 - the callback function i'll reference
412:03 - each item as a tag and we also need to
412:07 - get an index because of course we have a
412:09 - list in react
412:11 - and then as far as the return let's just
412:13 - simply start by returning a link and
412:15 - then we'll add all the necessary data so
412:18 - i'm going to go with link now that is a
412:20 - named import and it is coming from the
412:23 - gatsby like so so for time being let's
412:25 - just display
412:27 - all the tags here
412:28 - so i'll simply say that i'm displaying a
412:31 - tag yep there's going to be some errors
412:33 - and all that
412:34 - don't worry about it and as i said for
412:36 - some reason i have here a template
412:38 - string so these are going to be all my
412:40 - tags
412:41 - okay that's good but just keep in mind
412:44 - that this is an array
412:46 - so it's not a string or number it is
412:50 - actually an array so again we'll have to
412:52 - do that all right the structuring just
412:54 - like we do with use state and we're
412:56 - going to go with const and then the
412:58 - first item i'll name it as a text and
413:00 - the second one will be value and again
413:02 - both of them are coming from the stack
413:04 - because it is an array and as far as the
413:07 - link first i'm going to set up the
413:08 - keyprop because of course i have a list
413:11 - in react and i'll pass in that index
413:14 - that's number one then inside of it i'm
413:17 - gonna go with two values i'm gonna go
413:19 - with tag value and then the actual value
413:22 - as well however i'll place this in
413:23 - parentheses now again this is just for
413:26 - display i mean doesn't do any
413:28 - functionality as far as these
413:30 - parentheses and we'll say a value so
413:33 - again we'll save it one more time now
413:35 - you can see that these are all my tags
413:38 - okay nice and then lastly i just want to
413:42 - set up a tool prop and it's going to be
413:44 - based on the tag name now i notice here
413:47 - that i messed up a little bit it's not a
413:50 - tag
413:51 - should be here a text now of course it's
413:54 - going to look like it should and back to
413:57 - the prop we're going to go with two and
413:59 - again we're not hard coding this value
414:02 - because eventually there's going to be a
414:04 - page for every tag and therefore we go
414:07 - here with the curly braces
414:09 - we'll set up a template string because i
414:12 - want to access the value here and we're
414:14 - going to go with forward slash and then
414:16 - we're going to go with text so again the
414:19 - moment there is no such page so once you
414:22 - save and then once you navigate to a
414:24 - beef page of course it doesn't exist
414:27 - don't worry we will set up those pages
414:29 - shortly
414:30 - and once we have our tags list in place
414:34 - we should see that in homepage as well
414:37 - as the recipes page and while we're
414:40 - still on a topic of tags why don't we
414:42 - set up a tags page now the only thing we
414:45 - need to do here differently
414:47 - is setting up a graphql query so i want
414:50 - to get a query where i specifically only
414:53 - get the tags now keep in mind that the
414:55 - structure actually is going to be
414:56 - exactly like we have in all the recipes
415:01 - so if you go back to this component
415:02 - notice of course we have the query we
415:05 - get the recipes of course we're using
415:07 - nodes and all that now in the tags page
415:10 - though we're only interested in this
415:13 - content property with a
415:15 - tags property because keep in mind that
415:18 - we'll still get back the array so we'll
415:20 - be able to pass the array into our setup
415:24 - tags function and of course we'll get
415:26 - back that array of arrays and if you
415:30 - want to see how the tags page is going
415:32 - to look like in complete project we have
415:35 - the tags here and then once we click on
415:38 - it we just navigate to that specific
415:40 - page where we get only the food items
415:44 - that have that tag that's it that's all
415:46 - we have to do and i guess first let me
415:49 - start here by setting up my query
415:52 - and simply i'm going to be looking for
415:54 - contentful recipe
415:56 - and you know what i'm just going to
415:57 - remove everything and i'll start from
415:59 - scratch and i'm going to go with
416:01 - explorer of course i'm looking for all
416:04 - content for recipe i still want to get
416:06 - the list i still want to get all my
416:09 - recipes
416:10 - then nodes
416:11 - but in this case i just want to go with
416:13 - content and then tags that's it that's
416:16 - all we have to do we run it and notice
416:19 - again i'm getting back this array of
416:22 - actual recipes
416:24 - of course and instead of that recipe i
416:26 - have content property with a tags so the
416:29 - functionality in our utils function will
416:32 - still work so that doesn't change we're
416:35 - just not grabbing the rest of the items
416:38 - in the object
416:40 - and in order to export it i'm going to
416:42 - go with code exporter
416:44 - so grab here my query of course now i
416:48 - just need to navigate to the tags page
416:51 - so let's go to the pages directory there
416:55 - it is we have a tags
416:58 - below the component i'm going to copy
417:00 - and paste okay awesome then i'm going to
417:02 - have to set up some imports so i'll go
417:04 - with import then graphql
417:08 - that's for my query and then the second
417:10 - one is of course linked because again
417:12 - they will be links both of them are
417:14 - coming
417:15 - from the gatsby and also i want to get
417:17 - those setup tags so in here i'm going to
417:20 - go with import setup
417:22 - tags and it's coming from my utils so
417:25 - let's go to the youtubes folder and set
417:27 - up tags and then inside of the component
417:30 - we're gonna do the same thing where we
417:31 - go with new tags is equal to a setup
417:35 - tags and now of course remember with a
417:37 - page query
417:39 - where we can access this value so where
417:42 - i can get the nodes and of course the
417:44 - answer is in the data property so we can
417:48 - structure the data property and then
417:50 - pass the value into the setup tags now
417:53 - of course i need to pass in the nodes
417:56 - because setup tags is looking for that
417:58 - array so we simply go here with data dot
418:02 - all contentful again
418:04 - all contentful and then nodes and as i
418:08 - say node i need to add here a recipe
418:10 - recipe like so and now of course we just
418:13 - need to iterate over that array and
418:16 - display something meaningful in a tags
418:18 - page so for them being i'm just going to
418:20 - go to the tags page
418:22 - and then as far as the return
418:24 - i'll still go with a layout okay that
418:27 - still stays the same i'm gonna go with
418:29 - main
418:31 - tag here so let's set up a main tag and
418:35 - we'll also right away add a class name
418:37 - of a page
418:40 - so let's save that one and then inside
418:42 - of this main tag we're going to go with
418:44 - section and we'll add a class name of
418:46 - tags page
418:48 - so a little bit more styling and then
418:50 - again the same deal we'll iterate over
418:53 - those new tags and then for every tag
418:56 - we'll display a link
418:58 - to the tags page so let's go here with
419:01 - new tags then map again i'll reference
419:04 - each item as a tag and then we need to
419:07 - have a index
419:09 - and in here i'm going to go with const
419:11 - and again i'm looking for text
419:14 - and value that is coming from my tag
419:18 - and then as far as the return well we'll
419:20 - simply go we return
419:23 - and then we're going to go with link
419:25 - here
419:26 - and we'll close it out and inside of the
419:28 - link in this case i'm going to go with
419:30 - heading 5
419:32 - and as far as the value i'll pass in the
419:34 - text and you know what there's also a
419:36 - tiny bug i just need to add here a
419:38 - parenthesis and then right next to the
419:40 - setting 5 i'm going to go with a
419:43 - paragraph i'll pass in the value
419:46 - value here and i'll say recipe and then
419:49 - the same deal as far as the two prop
419:52 - it's going to be a dynamic one so
419:54 - therefore we're going to set up template
419:56 - strings we'll say 2 and then i want to
419:59 - access my text value
420:02 - now i do need to add a index so we're
420:05 - going to go with key and we'll pass in
420:08 - the index again we have the list and
420:10 - react that's why we need to do that and
420:11 - lastly a little bit of styling so add a
420:15 - tag class as well and once we save we
420:18 - have ourselves a nice tags page and this
420:21 - is going to be the look on a small
420:22 - screen
420:23 - and this is how it's going to look like
420:25 - on a big screen
420:27 - and once we're done with our tags next
420:30 - we're going to cover extremely important
420:33 - and interesting topic and that is going
420:35 - to be how to set up pages
420:37 - programmatically beautiful our project
420:40 - looks pretty nice but every time a user
420:44 - clicks on the tags or the recipe
420:48 - he or she
420:49 - sees the error page why well because we
420:52 - haven't set up those pages
420:54 - and so far in course every time we
420:56 - needed a page
420:58 - we rushed over to pages directory and
421:02 - then created either a folder
421:04 - or a file and then the moment we created
421:07 - that file of course we have the page
421:10 - but before we do that with tags and
421:12 - recipes we kind of need to think about
421:14 - it is this really the best approach
421:18 - am i really going to go over all my
421:20 - recipes
421:21 - and create those pages manually
421:23 - and the same with tags
421:25 - and what for example if i change the
421:28 - name for the tag or name for the recipe
421:31 - am i really gonna hop back and forth
421:33 - and then try to manually
421:36 - keep my project up to date with my
421:39 - headless cms and of course the answer is
421:41 - no a better solution in gatsby is
421:45 - creating pages programmatically and
421:47 - we'll take a look at two approaches one
421:50 - approach that's pretty much the latest
421:52 - and greatest is file system route api
421:57 - and the other one is setting up in
422:00 - gatsby node and since i want you to be
422:02 - aware of both approaches
422:04 - for the tags we'll use the gatsby node
422:07 - and that one is coming up and then for
422:09 - recipes we'll use the file system route
422:12 - api now since there's a lot to unpack
422:16 - we'll do a bunch of small videos
422:18 - and also in the beginning just type out
422:21 - the code with me
422:23 - and then i'll go over
422:25 - everything in detail so first i want you
422:28 - to go back to your files and once we're
422:31 - here we need to look for pages directory
422:35 - so that's not changing however we need
422:38 - to create a file with a very funny name
422:42 - so basically i want you to set up the
422:43 - curlys and right away add js
422:46 - and then in here remember when we were
422:49 - setting up the query we used a field by
422:52 - the name of all contentful recipe now in
422:55 - your case if the name is different
422:56 - please use that name but in my case it
422:58 - was all contentful recipe and now we
423:01 - need to type that field without the all
423:03 - i'm gonna go with contentful contentful
423:07 - and make sure the syntax is exactly the
423:09 - same so again if the name in your case
423:11 - is different if you're named your
423:13 - content type differently make sure you
423:15 - use that name otherwise you're just
423:17 - gonna get an error so i go with
423:19 - contentful recipe again without the all
423:22 - up front and then i need to look for
423:24 - specific field so in my case i'm gonna
423:27 - go with title and of course later i want
423:30 - to show you that we have other options
423:33 - as well so once you create this file
423:36 - then of course i can zoom out
423:38 - so we create a file and then i'll use my
423:41 - snippets to create the component now
423:43 - this gives me this funny name of course
423:45 - i don't want to use this name so i'll
423:47 - remove it and i'll just say
423:49 - recipe
423:50 - and then template and inside of it i'll
423:53 - do the same thing there's going to be a
423:55 - heading 4 with the text of recipe
423:58 - template so we save it and just to be on
424:00 - the safe side i'll restart the server so
424:03 - i'll clear everything i'll close the
424:05 - sidebar and we're gonna go with npm
424:08 - start and once the server is up and
424:10 - running i'll show you something
424:12 - extremely extremely cool
424:14 - and that is the fact
424:16 - that we created
424:18 - pages for all our items
424:22 - so if you go to a localhost 8000 and
424:26 - then just navigate to a page that
424:28 - doesn't exist so in my case i'm going to
424:30 - go with another page that is obviously
424:33 - not there and now notice something
424:34 - interesting
424:35 - i have pages now but the value is 12
424:39 - and if i keep on scrolling keep on
424:41 - scrolling
424:42 - check it out we have one for vegetable
424:45 - soup one for greek ribs and one for
424:48 - banana package as well as the last one
424:50 - here we iterated over our recipes and
424:54 - created
424:55 - for every recipe now granted
424:58 - there's not much here we just have a
425:00 - recipe template but trust me this is a
425:03 - huge huge deal and then like i said
425:05 - since there's a lot to unpack
425:07 - i'll divide this into multiple videos
425:10 - just so you're not overwhelmed by the
425:13 - amount of info all right and i guess
425:16 - let's start with the most pressing
425:18 - question first
425:19 - what just happened
425:21 - well
425:22 - what just happened gatsby was smart
425:25 - enough to run
425:26 - this query and then for every recipe
425:30 - gatsby created a page
425:33 - and the url of that page is actually
425:35 - equal to the title and then if i were to
425:39 - have i don't know 20 more recipes i'll
425:42 - get all those 20 pages
425:45 - the moment i set up of course my query
425:48 - and the reason why we went with title
425:50 - here is because gatsby uses that
425:53 - property value when it sets up the url
425:56 - and since i want my urls to be more
425:59 - user-friendly since i want text
426:02 - instead of just some random id
426:04 - i prefer using the title now keep in
426:08 - mind you can use other properties that
426:10 - are in the object as well you're not
426:12 - limited to the title one and notice how
426:16 - this needs to be in the curly braces and
426:19 - then we need to add still this
426:21 - js and of course this is the field
426:24 - without the all and then i pass in the
426:27 - title so i go with dot title
426:30 - now you can set up a different property
426:33 - so for example if you don't like the
426:35 - title
426:36 - then of course you can go with dot and
426:39 - then id
426:40 - but the difference of course is the fact
426:42 - that the id is going to be used in the
426:45 - url and the typical setup you want your
426:48 - urls to be friendlier
426:50 - and that's why you use some kind of text
426:53 - and effectively it's called slug
426:56 - if you're not familiar with that and
426:58 - what's super super super cool
427:01 - is the fact that notice the url
427:05 - gatsby is smart enough to take our title
427:08 - and then basically turn it into a slug
427:11 - into a usable url because if you're
427:14 - familiar with urls we cannot have a
427:16 - space in between so gatsby sets up
427:19 - everything in lowercase and adds that
427:21 - hyphen in between and as a side note our
427:24 - current project still has the issues
427:27 - with the links that we created together
427:29 - and don't worry we will fix it in a
427:31 - second because at the moment if you take
427:32 - a look we actually still have the error
427:35 - if we click on this link because check
427:37 - out the url again we still need to fix
427:40 - it but when gatsby creates the pages usb
427:44 - is super smart and it right away sets it
427:47 - up as a slug
427:50 - okay hopefully that is clear so you can
427:52 - set up the query over here just make
427:54 - sure that you follow this syntax
427:56 - and then remove the all so in your case
427:59 - if the name is different make sure that
428:01 - you use the same name and then more
428:03 - specifically that title so for every
428:05 - recipe i have gatsby will create a
428:09 - new page using this template
428:12 - and then in the url
428:15 - i'll have the title of my recipe
428:19 - and you're probably wondering okay but
428:21 - what's the big deal i mean at the end of
428:23 - the day i still have the recipes
428:26 - template that's it that's all i have
428:28 - well remember that recipes template or
428:32 - recipe template to be more correct is
428:34 - still a page correct
428:36 - and remember that behind the scenes god
428:38 - be passed in a lot of useful information
428:42 - when the page was created and the same
428:44 - works over here
428:46 - if you go to the recipe template and if
428:48 - you type props and if we can't log it
428:52 - you'll notice something pretty practical
428:55 - so let me navigate back i have my greek
428:58 - cribs now let me go to another page just
429:00 - so you can see the difference and again
429:02 - the easiest one you can just navigate to
429:05 - an error page and you'll see all the
429:07 - pages that you have in your project so
429:09 - in my case i'm going to open up a new
429:11 - tab and i'm going to look for my banana
429:13 - package and let me refresh just so i
429:17 - know that for sure i'll see my props and
429:19 - if i open up the dev tools check it out
429:23 - now of course i have this params
429:25 - property
429:26 - and in the params property i have a
429:29 - title and what is the value here well
429:32 - that is greek ribs now you can probably
429:34 - already guess that if i go to the banana
429:38 - pancakes page
429:40 - and take a look at the same dev tools
429:42 - i'll have a different value and you're
429:44 - correct because notice we still have
429:47 - this params property and inside of that
429:50 - object we have title now this style of
429:52 - course is different the same how the url
429:55 - is different so for every title we
429:58 - create that page and this is why it was
429:59 - important remember when we're setting up
430:01 - the headless cms
430:03 - i set up a unique value for my title
430:07 - so that way of course if i'm creating
430:09 - the pages i specifically create page for
430:12 - every item instead of creating i don't
430:15 - know some duplicates or something like
430:18 - that and now of course we can try to
430:20 - access this title
430:22 - and i'm going to navigate back again
430:24 - remember the property name was params so
430:28 - instead of the heading 4 why don't we go
430:30 - with heading two here
430:33 - and we'll simply drill down we'll say
430:36 - props then params and the end title so
430:40 - now of course you'll notice that i have
430:42 - banana pancakes here and then in the
430:45 - greek ribs
430:46 - because the title is different the title
430:49 - is unique to that page and again this is
430:52 - super super super super useful to us
430:55 - because now we don't have to manually
430:57 - create those pages gatsby does
431:00 - everything for us
431:01 - now there's still one piece missing and
431:04 - that is the fact that of course we need
431:06 - to go back to this recipe template and
431:08 - we need to set up another query
431:10 - and in this case we'll be looking for at
431:13 - one specific item
431:15 - so when we're setting up those pages we
431:18 - use this query so for every recipe we
431:21 - create a new page
431:23 - but
431:24 - in that template we'll actually have to
431:26 - set up a single query and in that query
431:30 - we'll use something that we covered at
431:32 - the very beginning and that is a query
431:35 - variables now first let me just showcase
431:38 - where you can get more info
431:40 - about the file system api
431:43 - and simply go to the gatsby docs again
431:46 - and then we're going to go with search
431:48 - and we're looking for
431:50 - file system
431:52 - file system
431:53 - and route api that's the one that we're
431:56 - looking for and here you can find all
431:59 - the info so again
432:00 - there's more setups available
432:03 - and like i say notice here they go with
432:06 - pages and then in the product they set
432:08 - up the query you can set up a path
432:11 - inside of the folder as well just like
432:13 - we did previously with examples and then
432:16 - we have the query and notice how again
432:19 - they're not using this all so they're
432:21 - looking for all the products but they
432:23 - don't add this all and then by default
432:26 - there's always going to be this id but
432:29 - then since they add dot name so that is
432:31 - a different property then of course they
432:33 - get the name here as well now why is
432:35 - that important because we can also use
432:38 - the id
432:39 - when we're fetching data about that one
432:43 - specific recipe and behind the scenes
432:45 - they say that it is faster if you do it
432:48 - that way
432:49 - but i mean in our case we're just gonna
432:51 - use the title now as far as if you have
432:54 - a bit more nested structure if you have
432:57 - a recipe and then you have the field
433:00 - that you're looking for inside of the
433:03 - field that is an object so if it is a
433:05 - subfield then you go with a property
433:07 - you're looking for that is on the nodes
433:10 - object and then in this case they go
433:12 - with underscore underscore and then they
433:14 - look for the skew so again in our case
433:18 - if we were to have a nasty structure
433:20 - then we go first with a contentful
433:23 - recipe then dot the property name where
433:26 - is that nested structure and then you
433:29 - look for the actual property so again if
433:32 - you want to find more info just navigate
433:35 - here but in our case we're pretty much
433:38 - done setting up the pages
433:40 - programmatically as far as this approach
433:42 - now of course we just need to connect
433:44 - the dots and set up the query in such a
433:46 - manner where it's dynamic because keep
433:49 - in mind again this is not just one
433:51 - single page basically we create page for
433:55 - every recipe so somehow we need to make
433:57 - our query dynamic
433:59 - where we can pass in the title value and
434:02 - based on that title value we'll get
434:05 - specific info about that one recipe
434:08 - not all of them but that one specific
434:10 - recipe and of course by doing so we'll
434:13 - actually have the pages for every recipe
434:17 - item
434:18 - all right and before we take a look at
434:20 - how we can pass in dynamic values
434:24 - into our queries so how we can start
434:27 - using the query variables let me just
434:30 - fix our tiny bug
434:32 - where currently in our project if i
434:35 - click on one of the cards on one of my
434:39 - recipes i don't navigate to the page
434:43 - and technically the page is there
434:45 - so this shouldn't be happening now the
434:47 - reason why is that happening because we
434:49 - just take the title and then we pass it
434:51 - as our url however if you take a look at
434:54 - the synthetic that is not allowed so
434:56 - when we're setting up the url we need to
434:59 - have hyphens between the words now we
435:01 - don't have this issue with the tags so
435:04 - for example
435:05 - if you go to home notice tags is just
435:09 - one word anyway so it doesn't really
435:11 - matter so this is going to work we're
435:12 - not going to have to do that in a tags
435:15 - list however with the recipes list we
435:18 - need to sluggify our title now
435:20 - alternative is setting up another field
435:24 - in headless image and again common name
435:26 - is calling the slug which just
435:28 - represents a
435:30 - friendly url and you can manually set
435:33 - this up some headless cmss offer this
435:36 - option where when you enter that field
435:39 - it right away has the type of slug and
435:42 - it does that for you in strappy as
435:44 - you're typing the title in our case it
435:46 - right away creates the slug for you like
435:49 - so that way we don't have to do this
435:51 - extra work but since contentful does not
435:54 - do that and since i don't want to go
435:56 - back and manually add them as slugs i'll
435:58 - show you how we can set that up
436:00 - programmatically and in order to do that
436:02 - we'll have to install another package
436:05 - and again this is not a gas bb plug-in
436:06 - this is just a npm package and the name
436:09 - is slogify so we go with npm and of
436:12 - course we need to go with install and
436:15 - we'll just run slugify we run this one
436:19 - and then once the package is in place
436:22 - i'm just going to go with npm start
436:24 - then we need to go to the recipes list
436:29 - and of course i want to import that one
436:31 - so i'm just going to go here with
436:32 - sluggify
436:34 - logify and that is coming from the
436:37 - slogifi so i get my function and this
436:40 - function
436:41 - will return
436:42 - my title
436:44 - in a manner that is acceptable as a url
436:47 - and we're going to create a new variable
436:50 - i'll call this slug and this is going to
436:52 - be equal to the sluggify
436:54 - then we pass in the title and then we'll
436:57 - set up some options
436:59 - and we do that by just passing in the
437:01 - comma and then the object this will take
437:04 - this string and this will sluggify for
437:07 - us so this will make it in a syntax that
437:10 - is acceptable as the url and here in the
437:14 - object we just say that we want to pass
437:17 - in the lower and we'll say that it is
437:20 - equal to true so i want everything
437:22 - lowercase
437:24 - and pretty much we're done because by
437:25 - default it will add the hyphens in
437:28 - between and now if i change this around
437:30 - and instead of title if i access the
437:33 - slug
437:34 - you'll notice something pretty cool now
437:37 - once i click on one of those cards we
437:40 - will correctly
437:41 - navigate to our template if i go back to
437:44 - my homepage and if i click on banana
437:47 - pancakes there it is now of course we
437:49 - navigate to banana pancakes now at the
437:51 - moment we just have the heading for
437:53 - there don't worry we're going to work on
437:56 - that next but the idea is that every
437:58 - time you click on one of those cards we
438:01 - correctly navigate to the page
438:05 - because that's the url that gatsby set
438:08 - up for us because again this is the
438:10 - syntax we need to use
438:12 - when we set up the urls we cannot have
438:14 - spaces in between and with this in place
438:18 - now let's focus
438:19 - on the query that will fetch the data
438:23 - about this one specific recipe
438:26 - beautiful so how we can make our queries
438:29 - dynamic
438:30 - first let's back up a little bit
438:33 - and cover the basics we learned in
438:36 - previous videos so first i just want to
438:39 - remove everything
438:40 - and i'm gonna go with my explore option
438:43 - and specifically i'm looking for
438:45 - contentful recipe field now we already
438:48 - know that this works so there is no
438:50 - issue here but of course we'll just get
438:53 - some random recipe because in order to
438:56 - get a specific one of course we do need
438:58 - to provide what well we need to provide
439:00 - the arguments correct so if i go here
439:03 - with the title
439:04 - yeah this is awesome if i'm looking for
439:06 - vegetable soup but if i'm not looking
439:09 - for a vegetable soup then of course this
439:10 - is meaningless because yes of course i
439:13 - can access for example cook time here
439:16 - and everything is going to work
439:18 - but if
439:20 - i'm looking for my banana pancakes i
439:22 - mean what good does it do for me nothing
439:26 - okay so why don't we do this why don't
439:28 - we open up
439:29 - a new graphql sandbox
439:32 - just so i can get all the names since
439:34 - i'll use them and in this case i'm going
439:36 - to go with graphql okay awesome and
439:39 - instead of this one i'll remove it we're
439:42 - going to go with explorer and let's go
439:44 - back to all the recipes so we're going
439:46 - to go with all contentful recipe and
439:48 - then we're looking for notes and i just
439:50 - want to grab the title and we're doing
439:52 - that because i want to copy and paste
439:54 - and i think it is going to be faster and
439:56 - of course once we run it we get all the
439:59 - recipes and more specifically we get the
440:01 - titles so now of course we can go back
440:04 - to our
440:05 - first sandbox
440:06 - and in here i can add the argument
440:09 - correct i can open up the explorer again
440:12 - and i can say you know what get me the
440:14 - recipe whose title
440:16 - matches to whatever i'm passing in and
440:19 - of course in order to do that i just
440:21 - need to look for my title one here and i
440:24 - need to say equals
440:26 - and simply we can start by copying and
440:28 - pasting and in this case i'm going to go
440:30 - with banana pancakes so i'll pass it in
440:33 - and then once i run it i can clearly see
440:35 - by my title that this works
440:38 - so that's an awesome start of course
440:40 - because now if i'll add more fields here
440:44 - i'm going to get a specific data
440:46 - about this recipe
440:48 - not just some random one and of course
440:50 - we control that with our argument so now
440:53 - let's take a step further
440:55 - i want to pass this in as a variable
440:59 - and i must warn you that in the
441:01 - beginning is gonna look useless you're
441:04 - gonna be like well it's pretty much the
441:06 - same thing but trust me there's a reason
441:08 - why i'm showing you that first i'll just
441:11 - give it a more meaningful name i'll say
441:13 - get
441:14 - single
441:15 - recipe and now let's set up the variable
441:18 - you see we can pass in
441:20 - variables into our query
441:22 - now the way it works first we need to
441:24 - instantiate the variable and syntax is
441:27 - following where we go with a dollar sign
441:30 - and then the name of the variable
441:32 - now i'm going to go with the name of
441:35 - title but here sky is the limit just
441:37 - keep in mind that later we'll have
441:40 - access to the title variable simply
441:43 - because that's how we set up those pages
441:45 - programmatically
441:47 - so i strongly suggest you use the same
441:49 - name and then we just need to say
441:51 - what is going to be type for our
441:52 - variable and i'm going to go with string
441:56 - okay
441:57 - that's a start and of course i
441:59 - misspelled it here it has to be a string
442:02 - and then of course i can use that
442:04 - variable
442:05 - so in here instead of saying equals to
442:08 - whatever text i'm passing in i'm gonna
442:11 - go with equals and of course now i need
442:13 - to use my variable and i'll say title
442:16 - after that in the query variables what i
442:18 - want is to set up a object and of course
442:21 - i need to give it a name for my variable
442:24 - which has to be exactly the same so
442:26 - since i'm using title here of course you
442:28 - can guess that i'm going to use title
442:30 - over here as well
442:33 - and of course i'll do the same thing
442:35 - where i'm going to navigate back and
442:37 - i'll just select one of the recipe
442:39 - titles and if i go back and if i run it
442:43 - now of course i get a specific data
442:45 - about this one recipe
442:47 - and i'm controlling that using the
442:49 - variable
442:50 - and like i already mentioned probably
442:52 - your first thought is falling okay but
442:55 - what's the big deal
442:56 - i mean the only difference is that now
442:58 - i'm passing in my string
443:00 - where i have the variable
443:02 - instead of passing it directly in the
443:05 - query but the end result is the same
443:08 - every time i want to get that specific
443:11 - data
443:12 - i need to pass in that value and you're
443:15 - correct
443:16 - but here's the kicker
443:18 - what if i go back to my recipe template
443:22 - and i'll import graphql here
443:25 - so i'll say graph ql coming from the
443:29 - gatsby and then below my component i'll
443:32 - set up my page query
443:34 - and we do that by export then const and
443:37 - query and of course we just need to
443:39 - provide the value correct because we
443:41 - have the graphql so let's set up a graph
443:44 - ql tag template and i'll set up the
443:47 - template strings and of course i just
443:49 - want to copy and paste this query
443:53 - so i'll grab it
443:54 - i'll copy and paste and let's cancel log
443:57 - the props one more time so let's go with
443:59 - props here
444:01 - and let's see what we get back
444:03 - so if i'm gonna navigate to vegetable
444:06 - soup one and if i'll refresh you'll
444:08 - notice something interesting where in
444:10 - the console i have the object again that
444:14 - makes sense but what do you see here in
444:16 - the page context i see the id
444:19 - and i also see the title and remember
444:22 - how in one of the previous videos i
444:24 - mentioned that when gatsby sets our
444:26 - pages programmatically it actually makes
444:29 - query variables available by default it
444:32 - will pass in the id and then whatever
444:35 - field you set up in a query of course in
444:38 - our case that field is titled
444:41 - and as you can see we can access those
444:43 - variables in a page context property
444:47 - now what's even better
444:48 - when it comes to query
444:50 - gatsby will pass that value
444:52 - automatically
444:54 - so we don't even need to do anything
444:56 - just make sure that the variable name is
444:59 - the same
445:00 - and again in our case the name has to be
445:03 - title
445:04 - since in query the field that we're
445:07 - using is title and once we do that we
445:10 - are good to go so here when we are
445:12 - setting up our single query we just say
445:16 - that yes there's going to be a title
445:18 - variable coming in and for every page
445:21 - that value will be unique so we won't
445:23 - have to do that manually gatsby will do
445:26 - that behind the scenes the only thing we
445:28 - need to do is set up a query with a
445:31 - variable where we say yes we set up the
445:34 - file path using the title property so
445:37 - now this title will be set up as a
445:40 - variable and that value will always be
445:42 - unique and it will represent the actual
445:44 - title
445:45 - so therefore if again we go to banana
445:48 - pancakes in this case we can see that
445:50 - the same thing works here
445:52 - where now i have the page context and of
445:55 - course i'm getting the banana pancakes
445:58 - so basically what that means is that we
446:00 - just need to go back to our sandbox get
446:03 - all the properties that we want for
446:06 - specific recipe and then we'll be able
446:08 - to access that in our template and then
446:12 - for every recipe we will set up this
446:15 - unique page so i go to my recipes and i
446:18 - can click on any of the recipes and in
446:20 - there there's a query that gets specific
446:22 - data about the recipe and just pulls it
446:26 - in so that way of course we can have the
446:28 - page for
446:29 - every recipe hopefully that makes sense
446:32 - i fully understand that this looks scary
446:35 - a bit in the beginning but we have the
446:37 - syntax of setting up the variable we
446:39 - need to say that it is a string
446:42 - and then of course we just use it
446:44 - somewhere in our query that's why we did
446:46 - everything step by step where first i
446:48 - showed you how we would do that manually
446:51 - then we pass in the value ourselves and
446:53 - then lastly just remember that whatever
446:57 - you'll set up here e in the file path
447:00 - is going to be available as a variable
447:03 - that's why i said that in my case i'll
447:05 - definitely use my tile variable so if
447:08 - you use the different property of course
447:10 - then use a different variable and then
447:12 - once we pull the data we're pulling data
447:14 - for that specific recipe nice and once
447:18 - we know how we can access the variables
447:20 - in our sap template now let's set up a
447:23 - proper query in the sandbox and of
447:26 - course then we'll use it in our template
447:29 - as well
447:30 - so let me scroll up a bit
447:32 - now we just need to
447:34 - explicitly say which fields are we
447:36 - looking for
447:38 - so i'm going to grab all the content
447:40 - ones and look for ingredients
447:42 - instructions
447:43 - also check the tags and tools then i
447:47 - also want to get the description but
447:49 - just keep in mind that sentence
447:50 - description is a long text it's actually
447:53 - an object so if we want to get the value
447:56 - we need to go with description and then
447:59 - the description so if you run it nourish
448:01 - this is going to be my recipe and if i
448:04 - keep on scrolling i have description
448:06 - object and then the actual value is
448:09 - inside of it with the same name that's
448:11 - just the contentful setup after that i
448:14 - want to look for prep time
448:17 - as well as the server rings and finally
448:20 - let's not forget about the image correct
448:23 - so we're going to go with image we're
448:25 - looking for gatsby image data and then i
448:28 - want to go with a layout that is
448:31 - constrained
448:32 - and also i want to go with my
448:34 - placeholder and i'll set it equal to the
448:37 - traced svg so again i just grab this
448:41 - whole thing now
448:43 - and copy and paste
448:45 - in my template in recipe template so in
448:48 - the graphql i'll remove
448:51 - whatever i currently have and copy and
448:54 - paste
448:55 - and in next video of course we'll set up
448:57 - the return but first i want to grab
449:00 - all the imports
449:02 - and then i'll also destructure it right
449:04 - away and you know what i'll start by
449:06 - removing these props
449:08 - because we need to understand that this
449:10 - is a typical page at the end of the day
449:13 - so
449:14 - the data that we're getting back from
449:16 - our query is going to be available
449:19 - in the data property remember every time
449:22 - we were setting up the page query the
449:24 - return was available in the data so the
449:26 - same works here i was just showcasing
449:28 - the props for two reasons first the
449:30 - query variables are available in the
449:34 - page context gatsby provides them but i
449:36 - was just showcasing where you can find
449:38 - them don't worry you don't have to go
449:39 - with page context and then that title i
449:42 - was just showcasing what variables are
449:45 - available to us that's number one and if
449:48 - you want to access directly the title
449:51 - property you can either go with
449:54 - pagecontext.title or
449:56 - params.title now in our case
449:59 - i don't want the title because i'm
450:01 - getting the title here anyway so it
450:03 - doesn't really matter and that's why
450:05 - i'll remove the heading 2 and also
450:07 - console.log for props we'll simply get
450:10 - back the data but before we do any
450:12 - destructuring i just want to set up my
450:14 - imports and i'm going to go with import
450:17 - and first i want to get the gatsby image
450:19 - then i want to get a image function
450:23 - so from and that is of course coming
450:25 - from gatsby plug-in image
450:28 - i think i can make this one smaller a
450:30 - bit
450:30 - and also i want to get some icons
450:32 - because if you take a look at our
450:34 - complete project notice i'm using these
450:37 - icons for the recipe so we might as well
450:40 - import them right away and this one is
450:43 - going to be a bootstrap one so start
450:45 - with the bootstrap and then clock
450:48 - and history then we have another one
450:51 - with a clock
450:53 - and the last one will be a people one so
450:56 - let's say bootstrap and people that is
450:59 - coming from the react icons and we go
451:02 - with forward slash and of course the
451:03 - bootstrap one
451:05 - that should do it and after that i want
451:07 - to structure all our data just so we can
451:10 - see what we're getting back
451:13 - and here i'm gonna go with const and
451:15 - i'll set it equal to the data and then
451:18 - what is the field name well that one is
451:21 - this one the contentful recipe if you
451:24 - want you can give it an alias but in my
451:25 - case i'm just going to go with dot and
451:27 - contentful recipe so i'm getting back
451:30 - the object and then instead of that
451:32 - object i have contentful recipe property
451:36 - and the property is an object itself so
451:38 - now of course i can pull out the titles
451:41 - the cook times and all that so in here
451:44 - let's just go down the line we're going
451:45 - to go title
451:47 - cook time
451:48 - and content
451:50 - as well as prep time
451:52 - prep time we have servings here
451:56 - and also we have a description but just
451:58 - remember that the description is an
452:00 - object itself so we're going to go with
452:02 - description
452:03 - is an object and then more specifically
452:05 - we're looking for description property
452:08 - inside of it and then lastly i want to
452:10 - get the image so i'll say this one and
452:14 - then right below it why don't we set up
452:16 - the path to image right away so we're
452:18 - going to go with const and remember we
452:20 - just need to pass in the object where to
452:22 - get the image data is saying so we
452:24 - simply go with some kind of variable
452:26 - path to
452:27 - image is equal to get image or helper
452:30 - function and then of course we pass in
452:33 - the image object
452:35 - and right below this one i want to pull
452:38 - out from the content if you remember
452:41 - content was an object with those arrays
452:43 - with ingredients instructions tags and
452:46 - tools and
452:48 - i will iterate over them so that's why i
452:50 - want to pull out all of those arrays i
452:53 - want to pull out the tags instructions
452:55 - ingredients as well as the tools and we
452:58 - simply do that by again setting up
453:00 - another line for the structuring where
453:02 - we go with tags
453:04 - instructions
453:06 - then ingredients
453:08 - just need to make sure that i don't do
453:10 - some dumb typos because i'm an expert on
453:12 - doing that and that one is equal to the
453:16 - content again
453:17 - tons of ways how you can set this up
453:19 - if you want you can structure it here or
453:23 - even in parameters it only depends on
453:26 - your preference and for this example i
453:29 - just chose this one there's really no
453:31 - rule that says that you can do only one
453:34 - way and you cannot do the other way and
453:36 - then as far as the return let's simply
453:39 - set up our page
453:40 - as well as the div inside of it and then
453:43 - next video will display everything so
453:46 - for time being i'm just gonna go with a
453:48 - main tag
453:50 - and we'll add a little bit of class name
453:52 - we'll say here page and then inside of
453:55 - this page we're going to go with div
453:57 - with the class of
453:58 - recipe page and then instead of just
454:01 - there since i want to see something on a
454:03 - screen again i'm going to go with a
454:05 - title one so for time being there's
454:07 - going to be a heading two
454:09 - with my title just so i can see that my
454:13 - structuring works and now of course i
454:15 - just need to navigate back to home page
454:17 - or recipes
454:19 - then look for one of the recipes
454:21 - and then once i click check it out of
454:24 - course i have my banana pancakes now
454:26 - just double check yep this is going to
454:28 - be four degree cribs
454:30 - and of course what's left to do is just
454:33 - grab all of these properties and set
454:37 - them up in a meaningful return not bad
454:40 - nothing bad i think we're done with the
454:42 - structure so now of course let's work on
454:44 - return but you know what i think i
454:46 - forgot in a previous video to get my
454:49 - layout so i'm going to go with import
454:52 - layout from and of course we're looking
454:55 - in the components
454:56 - and then more specifically layout so now
454:59 - let's scroll down and then let's just
455:01 - wrap our return
455:04 - in the layout so that way we'll get
455:06 - our number as well as the footer and
455:09 - once we save of course now everything
455:12 - works
455:13 - and then
455:14 - there's going to be two parts of this
455:16 - return
455:17 - first we're gonna have a hero
455:20 - where there's going to be a image with
455:22 - the title description some icons as well
455:25 - as the tags and then we'll get another
455:29 - set of columns where we'll display
455:31 - instructions ingredients and tools
455:34 - so i'm going to go back to the page to
455:37 - the recipe template and i'll remove that
455:40 - heading 2.
455:41 - i'll add a comment for the hero this is
455:44 - where i'll set up my section with the
455:47 - class of recipe
455:50 - and then hero
455:52 - and then we'll right away set up another
455:55 - section where we'll place the rest of
455:57 - the content so the rest of the content
456:00 - and again this is where the instructions
456:02 - the ingredients and all that so i'm
456:05 - going to go to section and again same
456:07 - class name recipe
456:09 - and content
456:12 - beautiful
456:13 - and then let's start working on hero
456:15 - first
456:17 - and we're gonna have another two column
456:19 - layout where one is going to be a gatsby
456:22 - image and then the second one will be
456:24 - the article with the rest of the info so
456:27 - we just start here with our component
456:29 - remember image prop and then we pass in
456:32 - the path to the image
456:33 - that should work and then as far as the
456:35 - alternative i'll use the title property
456:38 - now i did add a little bit of styling to
456:41 - the container so i'm going to go to
456:42 - class name and about img let's close it
456:46 - and yep of course i have my gatsby image
456:50 - so that's the first column now the
456:51 - second column
456:52 - is going to be my article
456:55 - with a class of recipe and hyphen info
457:00 - and then inside of it let's go with
457:02 - heading 2 where we'll display title
457:04 - properly now and i'll scroll down a
457:06 - little bit and then we'll right away
457:08 - grab the description and then remember
457:11 - the biggest gotcha between the long text
457:13 - and the short text is the fact that
457:15 - description is an object itself so if i
457:18 - scroll down notice that's my title and
457:21 - this is my description and the only
457:23 - difference is that this is sitting
457:26 - inside of the object so keep that in
457:28 - mind then there's going to be a div
457:32 - with a icons and right next to it
457:35 - there's going to be a paragraph with a
457:38 - tags so let's right away set up the
457:40 - structure
457:41 - we're going to go with
457:42 - recipe
457:44 - icons like so so that's where we'll set
457:46 - up the content and you know what in here
457:48 - i'll say icons and then right next to
457:50 - this div
457:51 - we will place the paragraph so say here
457:55 - tags
457:56 - and then we'll just basically iterate
457:59 - over our tags and display it inside of
458:02 - the paragraph and i think we can start
458:04 - with this one so i'm going to go with
458:05 - paragraph and then the class name is
458:08 - recipe tags again a little bit of
458:10 - styling
458:11 - and then as far as the text i'm just
458:13 - going to go tags and then colon
458:15 - and i want to go with tags map now
458:17 - remember tags is an array
458:20 - and in this case we're not passing it
458:22 - through the setup tags the helper
458:24 - function we created this is just write
458:26 - up our array
458:28 - and i'll reference each tag with a
458:31 - parameter of tag surprise surprise
458:33 - and i'll also set up my index to tag an
458:36 - index because i have the list and i need
458:38 - to use a key prop and as far as return
458:41 - well i want to grab the link so it's
458:44 - kind of funny in the last video i was
458:46 - getting all the imports and i missed out
458:49 - on two important ones so scroll up and
458:52 - just look for the link from the gatsby
458:55 - and then let's return here and then
458:57 - we'll go with return we're returning a
459:00 - link to now in this case again keep in
459:03 - mind
459:04 - the url will point to a page that we
459:06 - haven't created yet
459:08 - in the following videos we'll set up the
459:10 - tag pages in a similar fashion now we'll
459:13 - use gatsby not for that but the idea is
459:15 - going to be the same where for every tag
459:18 - there's going to be a page set up
459:20 - programmatically for time being we'll
459:23 - just navigate to the error page and we
459:26 - pass in two now this is going to be
459:28 - dynamic again and that's where we need
459:30 - to use the template string forward slash
459:32 - and then we access the tag here so i
459:35 - said tag
459:37 - and then we need to add a key here
459:39 - okay and that will be equal to an index
459:42 - and then inside of this link
459:44 - let's display the tag so save
459:48 - and there is now of course we have tags
459:50 - and these are all the tags again these
459:52 - are links so once you click on them
459:54 - you'll navigate to the error page and
459:57 - then eventually we'll fix it now
459:59 - emmett i guess or the formatter he is
460:02 - trying to help me so i'll just remove
460:04 - this one this really has nothing to do
460:07 - with our return
460:08 - and then i'm gonna swing back to the
460:10 - icons and then in the icons we'll set up
460:14 - three different articles pretty much for
460:17 - every icon that we have and then of
460:18 - course we'll add some text there as well
460:21 - so i'm gonna go here with article
460:24 - and in the first article i just want to
460:25 - display my clock so i'm going to go here
460:28 - not clock history just clock and again
460:31 - that's just a react icon and it is a
460:34 - component so we go with heading 5 with
460:36 - some text so prep
460:38 - prep time here let's say that one yep
460:41 - and also let's actually access that
460:43 - dynamic value so in here i'm going to go
460:45 - with a paragraph and we're just going to
460:47 - go with prep time and we'll add here
460:51 - main as well as that and that's our
460:54 - first icon so now let's copy and paste
460:56 - and we just need to change the values
460:58 - so there's gonna be three of them
461:01 - second one will be a history one
461:03 - and of course this will be a cook time
461:06 - and the property also
461:08 - is going to be a cook time and then
461:10 - lastly we have servings so we're going
461:12 - to go with a bootstrap people one and in
461:16 - here
461:17 - let's access the servings value
461:21 - and let's also change here
461:23 - the text let's say we're getting the
461:25 - servings
461:27 - and once i save and once i refresh
461:29 - i should see three of them now of course
461:32 - i have all my three icons and lastly we
461:36 - just need to scroll down where we have
461:38 - the recipe content and we'll have to set
461:40 - up a two column layout one is going to
461:42 - be four
461:43 - instructions and the second one will be
461:46 - for ingredients and the tools but again
461:49 - the idea is exactly the same where they
461:51 - are arrays
461:52 - so i'll set up some kind of html element
461:56 - and then in that element i'll iterate
461:59 - over those arrays
462:01 - and return something so for example for
462:03 - instructions i'll return this step one
462:06 - two three and whatever and then these
462:08 - will be the values for ingredients i'll
462:10 - simply iterate over the list and
462:12 - hopefully you get the digest so let's go
462:14 - back we have a recipe content and we'll
462:17 - start with setting up two columns first
462:20 - one will be article and it's not going
462:22 - to have any classes so we simply have an
462:24 - article and then the second one will
462:26 - have a class
462:28 - of a second column second column as you
462:32 - can see i was a bit lazy with the class
462:34 - name here and then inside of the first
462:37 - article this is where i want to set up a
462:39 - heading for with the text of
462:41 - instructions and you can probably
462:43 - already guess that we'll iterate over
462:46 - our instructions array since that's the
462:48 - name in my heading 4 so we'll go here
462:51 - with instructions it is an array so we
462:54 - can use a map
462:55 - and then i'll reference each item simply
462:58 - as an item just because i'm lazy and
463:01 - then as far as return well here's the
463:03 - thing i want to return a div and instead
463:06 - of that div i'm going to go with my step
463:10 - as well as the actual instruction
463:12 - so let's go back and we're going to go
463:14 - with return
463:16 - then
463:16 - i said we're going to go with div we do
463:18 - need to add a key prop we say here index
463:22 - and then also let's add a class name and
463:25 - i'll say single
463:26 - and hyphen instruction
463:29 - and then instead of this div i'm gonna
463:31 - go with a header
463:33 - and in there i'll set up my paragraph
463:36 - with that text off step so i'm gonna go
463:38 - with paragraph and then step now for the
463:41 - step you can set up the index however
463:45 - it's not gonna make sense because you'll
463:48 - have step zero one two and i think it
463:52 - makes more sense if we add just plus one
463:54 - we start with step number one
463:57 - instead of step number zero and then
464:00 - right next to it i'm going to set up a
464:02 - div and there's a reason for that that's
464:05 - how we have this horizontal line so
464:07 - let's save it and of course we have the
464:09 - line as well and then
464:11 - right next to the header so not within
464:13 - the header right next to the header i'm
464:15 - going to go with paragraph and i'll say
464:17 - that i actually want to render that item
464:20 - meaning my instruction
464:22 - and of course i have it now as you can
464:25 - see i was pretty smart and i iterated
464:28 - over the ingredients
464:30 - so my bad i need to go back to
464:32 - instructions instead
464:34 - and of course once i do that i have my
464:38 - proper instructions
464:40 - then we're going to scroll down to the
464:41 - second column
464:43 - and we'll set up two more divs in a
464:46 - similar fashion
464:47 - one for ingredients so the suckers that
464:50 - i was trying to render a second ago and
464:52 - then of course also for those so the
464:55 - setup is gonna be almost the same we're
464:58 - gonna go with div here and then
465:00 - we have a heading four with ingredients
465:05 - hopefully i'm spelling this correctly
465:07 - then we're going to iterate over
465:10 - ingredients and then
465:12 - of course we just need to go with our
465:14 - map
465:14 - again i'm going to be lazy and i'm just
465:16 - going to say item
465:17 - so whatever ingredient i have i'm going
465:20 - to reference it as an item
465:22 - and then when it comes to return
465:24 - we're going to go with paragraph we do
465:26 - need to add the key of course so we go
465:28 - with index
465:30 - then let's add a class name of
465:32 - single
465:33 - and then ingredient
465:36 - and then instead of this paragraph let's
465:37 - just showcase the item
465:39 - and of course i have my ingredients and
465:42 - at this point i think i'm just going to
465:45 - copy and paste because it's going to be
465:47 - faster so everything starting with this
465:48 - div
465:49 - and ending with the closing one just
465:51 - copy and paste
465:53 - and we just need to change some values
465:55 - around where of course we have the last
465:57 - array and the name is tools
466:00 - so we go with tools then we are not
466:03 - iterating over ingredients we are
466:04 - integrating our tools i still reference
466:07 - this as an item
466:09 - and then the class name will be also a
466:10 - little bit different
466:12 - we'll go with two and once we're done
466:14 - with our tools of course we can navigate
466:16 - to the bigger screen
466:18 - and that's our banana pancakes page
466:21 - and of course if i go to a different
466:23 - page this is going to be a recipe page
466:26 - for that recipe and hopefully you get
466:29 - the gist
466:30 - again key takeaways we can use the file
466:33 - system route api to set up those pages
466:36 - we pass the value the property value as
466:39 - a variable and then of course we can set
466:41 - up those queries
466:43 - using the variable name so in our case
466:45 - of course since i'm looking for the
466:47 - title property
466:48 - i have access to the title variable
466:51 - there i get that unique value and of
466:53 - course i can set up my query and get the
466:56 - data about that one single recipe nice i
466:59 - think we're in good shape
467:00 - now we have a page for
467:03 - every recipe where we display
467:05 - all the useful info
467:08 - and of course this data is only about
467:10 - this recipe
467:11 - so we get the title description and all
467:14 - that and now i want to do the same thing
467:17 - for the tags however for the tags we'll
467:20 - take a look at another way how we can
467:22 - set up pages programmatically
467:25 - and prior to the file system api which
467:28 - was introduced i believe at the later
467:32 - versions of gatsb2 gatsby known was the
467:35 - only way how you can create pages now
467:38 - don't think that gatsby node is a old
467:41 - way how you can create pages yes of
467:43 - course you can use the file system route
467:45 - api and it's an awesome way how to set
467:48 - up pages because you can basically do it
467:50 - faster because you'll see in a second
467:52 - that gatsby node is a bit trickier
467:55 - however don't dismiss this approach and
467:58 - there's a reason why i'm showing that
468:00 - because there might be some cases at
468:02 - least in the current gatsby setup where
468:04 - you still need to use the gatsby node
468:07 - approach because it just gives you more
468:10 - flexibility now if you want to find out
468:12 - more about gatsby node just go to the
468:14 - docs and more specifically look for
468:16 - gatsby node and essentially the way it
468:19 - works we can respond to events during
468:22 - the build life cycle and we do that
468:24 - using the special functions that are
468:27 - provided for us so in our case we will
468:29 - use a function by the name of create
468:32 - pages and you can probably already guess
468:34 - by the name of it what this function
468:37 - does so yes it creates pages for us that
468:41 - should do it for theory now let's head
468:43 - back to our project
468:45 - and we don't have the template folder we
468:48 - don't have the gatsby node so let's just
468:50 - start with that
468:51 - so unlike the previous setup where we
468:54 - directly set up the page inside of the
468:57 - pages directory
468:59 - a common approach when you set up the
469:01 - pages in the gatsby node is to create
469:05 - another folder so let me just close
469:07 - everything here so i can start from
469:09 - scratch and then in the source again
469:12 - name is up to you but a convention is
469:15 - calling this template like so
469:18 - let me zoom in that's my template and
469:20 - then instead of this template you create
469:22 - another file as always you can go as
469:25 - wild and crazy as you want but a typical
469:28 - approach is just calling it whatever
469:30 - page you're going to be creating so in
469:32 - our case we'll be creating tags pages
469:35 - and that's what i'll call this tag and
469:36 - then hyphen and then template and then
469:40 - of course i'll add the gis now i do want
469:43 - to create a component here so i'll use
469:45 - my snippet and again i just need to
469:47 - change these values here because of
469:49 - course i cannot call my component like
469:51 - that and i'll just say tag
469:54 - template and then instead of this div
469:57 - let's just say tag
469:59 - template and page and once we have our
470:03 - template in place next i want to create
470:06 - that gatsbyhyphen
470:08 - node.js file again
470:10 - this is the case where name matters
470:13 - and also the location so don't set this
470:16 - up in the source
470:17 - make sure that you're in the root
470:20 - and then in the root go with gatsby and
470:23 - of course
470:24 - gatsby and then hyphen node and js so
470:28 - that's my file name and of course now
470:31 - we're back in the note line and you'll
470:33 - see why it's important in a second also
470:36 - keep in mind that every time you'll type
470:38 - something in a gatsby node you will have
470:40 - to restart the server that's why i'll
470:43 - try to move somewhat slow
470:45 - so that way i can avoid some unnecessary
470:48 - typos and bugs
470:51 - and as a result
470:52 - you don't have to watch me constantly
470:55 - restarting the server
470:57 - and like i said we have the api provided
471:00 - already for us meaning those functions
471:03 - that we're going to be exporting are
471:05 - already provided for us so we just need
471:08 - to access them and the setup is somewhat
471:11 - similar to what we have here in the
471:13 - gatsby config
471:14 - notice we have this module
471:17 - and then we're exporting the object
471:19 - correct and i mentioned previously that
471:22 - the property names here are important so
471:25 - the same works in a gatsby node where
471:27 - again we go back to the node land and
471:30 - that's where we'll use the node syntax
471:31 - the commonjs one where we go with
471:34 - exports so now we're exporting
471:36 - and the function name is important so
471:38 - we're creating a function here and the
471:40 - function name is create pages so now
471:43 - gatsby knows all right so this is going
471:45 - to be a create pages function and you
471:48 - just need to provide the values and i'll
471:50 - do the rest
471:51 - now from this function we need to return
471:54 - a promise and if you're familiar with
471:56 - javascript we can either use promises or
472:00 - we can right away set up async await and
472:03 - this is going to be my approach where
472:05 - i'll right away set up the create pages
472:07 - function as a synchronous function
472:10 - because that just means that by default
472:12 - it's going to return a promise and it's
472:14 - going to be easier to work inside of
472:17 - this function because we'll have to wait
472:19 - for some promises to be settled now
472:22 - since this is a function we actually get
472:25 - parameters
472:26 - and more specifically we're looking for
472:29 - the parameters of
472:30 - graphql again this is provided by gatsby
472:34 - it's not like i'm just making this up
472:36 - and then also the actions object and
472:39 - then right away instead of the function
472:41 - button i wanted the structure even more
472:43 - from the actions i want to get a create
472:46 - page function so i'm going to go with
472:48 - const and then create page and that is
472:51 - coming
472:51 - from my actions object keep in mind that
472:54 - of course if you want you can structure
472:56 - it here instead i just thought that it's
473:00 - going to be easier for you to understand
473:02 - if we do it in new line
473:04 - and once we have our function
473:07 - now i want to set up my query and
473:10 - essentially the idea is similar to what
473:13 - we have here in the pages so if we take
473:16 - a look at the page folder we can see
473:19 - that we have our contentful recipe title
473:21 - and the idea is the same here where i'll
473:24 - have my query
473:26 - i'll get back the result
473:29 - and then i'll iterate over
473:31 - those nodes
473:33 - and then for every item i'm going to
473:36 - create a new page
473:38 - now of course the difference here is
473:41 - that we're going to be a bit more
473:42 - explicit where in this scenario gas baby
473:45 - does a lot of things behind the scenes
473:48 - so we just set up the query and we're
473:50 - good to go we say yeah get me all the
473:53 - recipes and then behind the scenes
473:55 - gatsby creates the page as well sets up
473:58 - the url and all that good stuff in this
474:00 - case we'll have to do more manual labor
474:04 - and first we want to start by invoking
474:06 - this graphql now ideas are exactly the
474:09 - same where we pass in the query however
474:12 - since we are in a node blend so this is
474:15 - not a react file now of course we need
474:17 - to use the parentheses so there's a
474:19 - little bit of different syntax
474:21 - and essentially the way it works i'm
474:23 - going to come up with some kind of
474:24 - variable and i'll call this a result
474:28 - and then i'm going to wait for this
474:30 - promise to settle because this graphql
474:33 - returns a promise and since i set up my
474:36 - function my create page function as a
474:39 - synchronous i can just use a await
474:41 - keyword inside of function and here like
474:44 - i said we go with graphql
474:47 - so graphql but instead of tag template
474:51 - we are going to go
474:52 - with a parenthesis because this is
474:54 - different this is a node file and then
474:57 - we'll set up the template string now
474:59 - second you're probably wondering okay
475:00 - but what kind of query we're going to
475:02 - pass it in well the one that gets the
475:05 - stacks so if i go back and
475:08 - [Music]
475:09 - if i take a look at my sandbox and you
475:11 - know what i'll move everything here
475:14 - and then i'm just going to set up a
475:16 - query where i'll query the all
475:19 - contentful recipe field
475:21 - then i'm looking for the nodes
475:23 - and more specifically i want to look for
475:25 - the content
475:27 - and then tags
475:29 - and you'll notice that once i run my
475:32 - query
475:33 - i get all my tags and that's exactly
475:36 - what i'm looking for so now of course
475:38 - we'll just have to set up the
475:39 - functionality and gatsby node where
475:41 - again we iterate over the nodes array
475:46 - and then more specifically we iterate
475:48 - over the tags array inside of it
475:51 - and then for every item we create that
475:54 - page
475:55 - so hopefully that makes sense
475:57 - just like we set up regular queries in
476:00 - the components in the pages as well as
476:02 - with a file system route api we do the
476:05 - same thing in gatsby node now in this
476:08 - case we do need to provide the
476:11 - value that is exactly the same as in our
476:14 - sandbox because if you remember
476:17 - in here the syntax was different correct
476:19 - we use the field without that all in
476:21 - front of it
476:22 - now when we're working in gatsby node no
476:25 - the query needs to be exactly the same
476:27 - and i think i'm going to start by giving
476:29 - it a bit more meaningful name first and
476:31 - i'll say get recipes
476:35 - so then take everything here
476:37 - and navigate back and copy and paste
476:40 - and just so we understand what is
476:43 - happening i will cancel log it now that
476:45 - just means that i'll have to restart the
476:47 - server and i'll have to stop it one more
476:49 - time because there's more code coming up
476:52 - but since i want you to be aware of
476:54 - what's happening i will do it so
476:57 - i'm gonna go with log
476:59 - and i'm just gonna set up some hashtags
477:02 - here
477:03 - and then i'll just showcase what we're
477:05 - getting back so the idea is that we
477:07 - still have access to this data object so
477:11 - that doesn't change now of course the
477:13 - difference is that we're working in the
477:15 - gatsby node and you can probably already
477:17 - guess that we'll have to use somehow
477:20 - this create page function and for now i
477:24 - just want to showcase what we're getting
477:25 - back as a result
477:27 - and notice right away the moment i open
477:29 - up the terminal it says develop process
477:31 - needs to be restarted to apply changes
477:34 - in gatsby node so always always
477:37 - whenever you do something in gasb node
477:39 - remember to restart the server and then
477:43 - since i have those hashtags i just need
477:45 - to wait
477:46 - for my dev server to spin up
477:49 - and once it's going to be in full gear
477:52 - somewhere in the terminal
477:54 - i should see the result now if you don't
477:57 - see anything if there's some errors or
477:59 - whatever please troubleshoot because
478:01 - it's important that we get back this
478:03 - data and hopefully you can see
478:05 - i have my object and then inside of this
478:08 - object now i have the data property and
478:11 - as you can see the result is tiny bit
478:13 - different because if you remember in
478:15 - components we were right away
478:18 - accessing the object
478:19 - the data object that we're getting back
478:22 - in this case
478:23 - we're getting the whole thing so i get
478:25 - the whole object so that's also
478:27 - something that we need to be aware of
478:29 - and once we can access it now of course
478:31 - we just need to do a little bit of
478:33 - javascript magic where i want to iterate
478:37 - over the nodes
478:38 - then access the content and then more
478:41 - specifically tags and then for every tag
478:44 - we will run that create page function
478:48 - and we'll have to pass in that variable
478:50 - manually if you remember when we were
478:52 - setting up the pages with a file system
478:55 - route api
478:57 - gatsby provided that variable for us
479:01 - correct in this case we'll have to do
479:03 - that manually and the way we do
479:05 - everything and by the way just so i can
479:07 - have more room i will remove my terminal
479:10 - for the time being and then i'm going to
479:12 - go with a result
479:13 - so that's the object that i'm getting
479:15 - back the property name is data then more
479:18 - specifically i'm looking for this all
479:21 - contentful recipe
479:23 - like so
479:24 - copy and paste
479:25 - then i want to access nodes property and
479:28 - i want to iterate over it and i'll use
479:31 - my four each
479:33 - and i'll reference each and every item
479:36 - as a recipe
479:37 - so far so good
479:39 - then of course i want to access those
479:41 - tags now because keep in mind i'm just
479:43 - iterating over the recipes
479:46 - so i'm just iterating over my notes what
479:49 - i'm looking for is actually the tags
479:51 - since i already created pages for
479:53 - recipes i don't need to do that now i
479:55 - want to access the tags and we do that
479:58 - with the help of recipe
480:01 - then content because that is the
480:03 - property name
480:05 - then tags and then
480:06 - one more for each so we set up two four
480:09 - eaches and then in this case i'll
480:11 - reference
480:12 - my tag
480:13 - with a tag parameter
480:16 - and then inside of this function this is
480:19 - where we finally call this create page
480:22 - and then in the create page we pass in
480:25 - the object
480:26 - with three properties we need to set up
480:28 - the path so what is going to be the path
480:31 - for the page
480:33 - so for example remember when we set it
480:35 - up for
480:36 - the recipes meaning technically gatsby
480:39 - set it up for us we had a forward slash
480:42 - and then the title for recipe now in
480:45 - this case we are in charge so what is
480:48 - going to be the path well i'm going to
480:49 - set up my property first and then i'll
480:52 - say that the path will be forward slash
480:55 - and then whatever is the tag value
480:58 - because if you remember when we were
481:00 - setting up the links
481:02 - in the tags
481:04 - meaning in a tags list this is what i
481:06 - used
481:07 - so i have access to the text and i just
481:11 - passed it in the url so now i'm doing
481:13 - exactly the same where i go with path
481:16 - and it's going to be forward slash and
481:18 - tag name now nothing stops you from
481:21 - adding more info here
481:23 - you can go here with tags and then
481:25 - forward slash and then tag
481:27 - now the reason why i'm not doing that is
481:29 - because when i was setting up my links
481:32 - for attacks of course i just used a
481:34 - forward slash so sky is the limit here
481:37 - just keep in mind that both of those
481:38 - values need to match and therefore i'll
481:40 - remove this tags one and i will save it
481:44 - and once i have my path in place next i
481:47 - need to provide two more properties i
481:49 - need to provide the component
481:51 - as well as the context property where
481:54 - we'll pass e in the variable now why do
481:57 - we need component because we'll need a
481:59 - template because if you remember when we
482:02 - were setting up the recipes pages
482:05 - well the file was used correct so the
482:08 - file where we're setting up the query
482:10 - that was used as a template however in
482:13 - this case we're doing this manually so
482:15 - we need to point to some type of
482:17 - template and of course we already have
482:19 - the template folder and then inside of
482:21 - the template folder we have a tag
482:24 - template so that's the file we're going
482:26 - to use so this is where we'll eventually
482:29 - set up the query with a query variable
482:32 - just like we're doing in the contentful
482:35 - recipe title one now
482:37 - i think i'm going to rename it my
482:39 - apologies i think i set it up as
482:41 - template and actually want as a template
482:45 - and then back in the gatsby node now i
482:47 - want to set up a component property so
482:51 - let me close my sidebar and make this
482:53 - one smaller and again the name here is
482:55 - extremely important you cannot call it
482:57 - whatever you want you need to go with
483:00 - component and then that one is equal to
483:03 - the path to the component however since
483:06 - we are in a node file
483:08 - we need to provide a proper path and in
483:11 - order to do that we need to use one of
483:13 - the built-in modules and node and that
483:16 - one is the path one again the syntax is
483:19 - gonna be a bit different because we use
483:21 - common js syntax and we just look for
483:24 - path so this one we don't need to
483:25 - install comes preinstalled with node and
483:28 - of course we have access to a bunch of
483:29 - properties and methods that this module
483:32 - provides now the one that we're looking
483:34 - for is path dot resolve which basically
483:38 - will point to the directory in our case
483:41 - it's going to be a root and then from
483:43 - there we want to point to our tag
483:46 - template.js so i set up here the
483:49 - parentheses and then i just say that in
483:52 - the source look for templates
483:55 - template and then forward slash tag
483:57 - template
483:59 - if you have a different name please make
484:01 - sure that you use that name instead
484:04 - otherwise you'll have the bug
484:06 - then
484:08 - i need to set up the last thing and that
484:09 - is actually the variable so again
484:11 - something that gatsby does behind the
484:13 - scenes when we use the first approach in
484:16 - this case we need to explicitly pass
484:18 - that value in and the way we do that the
484:20 - way we pass in that variable is by using
484:23 - the context property and it is an object
484:27 - and now we just need to set up a key
484:28 - value pair
484:30 - so first one is going to be the name for
484:32 - my variable and the second one will be
484:34 - value so in my case for the name i'm
484:36 - going to go tag and as far as the value
484:39 - i'll pass in the tag as well so this
484:43 - will be the name that i'll use in my
484:44 - query and this provides me the value so
484:47 - now of course i just need to save it
484:50 - and restart the server and if everything
484:54 - is correct once we navigate to the error
484:57 - page you'll see that we created
484:59 - more pages in our project so now we're
485:02 - programmatically creating pages for all
485:05 - the tags
485:07 - so let's say that i'm going to clear
485:09 - everything and we're going to go with
485:11 - npm start
485:13 - and once dev server is up and running
485:15 - and if i don't see
485:17 - some massive errors in the terminal
485:21 - we should be in good shape where once we
485:23 - navigate to a page that doesn't exist
485:25 - you'll see that we have more pages in
485:29 - our project so let me just go to the
485:32 - browser hopefully everything works
485:34 - i will refresh
485:36 - and yep i should see it so notice the
485:40 - amount of pages that i have
485:41 - now we have 21. so for every tag we also
485:46 - set up a page so if i navigate to the
485:49 - food of course i'll have my template and
485:52 - we can test it out in our project where
485:55 - either in a tags page or in recipes or
485:58 - home just simply click on a tag now of
486:00 - course i navigate to a breakfast one so
486:04 - if i'll go to food then this is going to
486:07 - be a full template and hopefully you get
486:09 - the gist where again for every tag that
486:12 - i have i'm able to set up a dynamic page
486:16 - and in that page eventually there's
486:18 - going to be a query and i'll use my
486:20 - variable to access specific values and
486:23 - let's just go back and go over the setup
486:26 - where again we work in gatsby node
486:29 - we need to set up that file first it has
486:31 - to be in a root and since it is a node
486:34 - file we use a common js syntax with
486:36 - require as well as export
486:39 - we create a function by the name of
486:41 - create pages and the name is important
486:44 - now we do need to return a promise from
486:46 - this function so we right away set it up
486:48 - as async
486:50 - and as parameters we have access to
486:52 - graphql function as well as actions
486:55 - object now from the actions object we
486:57 - access a create page function and then
487:01 - first we set up the query now since the
487:04 - graphql returns a promise we wait for it
487:06 - to settle
487:07 - and the difference in the syntax is the
487:10 - fact that since we are in a node land we
487:12 - set up the parentheses and then inside
487:14 - of the parenthesis we go with a template
487:17 - strings and then we pass in the query
487:20 - then just like with a normal query we
487:23 - get back the result and then we iterate
487:26 - over our list now in our case not only
487:29 - we are iterating over the recipes
487:31 - since the tags are sitting inside of the
487:33 - recipe and is an array itself we
487:37 - actually iterate over a recipe and then
487:39 - inside of the recipe we look for tags
487:42 - and then we create a page for every tag
487:45 - and we do that by calling a create page
487:48 - function where we pass in the object
487:51 - with three properties a path property
487:53 - which just sets up a path in the url for
487:56 - that page so forward slash and then the
487:58 - tag name then we point to a component
488:01 - and this is where we use the path module
488:04 - where we go with resolve which points to
488:06 - a directory where the file setting in
488:09 - our case that is of course our route and
488:11 - from there we just point to a specific
488:14 - template which in our case is sitting in
488:16 - the template and then
488:18 - tag template and eventually we want to
488:21 - pass in the variable since we will use
488:23 - it in a query and we do that by setting
488:26 - up the context property it is an object
488:29 - and then we just need to come up with
488:31 - the name of the variable and the value
488:33 - so in our case we're setting up the
488:35 - variable with the name of tag and the
488:37 - value for this variable is equal to the
488:40 - current tag in our iteration and as a
488:44 - result you have more pages in your
488:47 - project that are created
488:48 - programmatically using gasb node not bad
488:52 - not bad once we have the tag pages in
488:55 - place i think we can simply start by
488:57 - console logging so i think at this point
489:00 - i can close the gas binary one and then
489:02 - back in the tag template remember these
489:05 - are still pages and we can access of
489:08 - course all the props from here i'm going
489:11 - to go with props and i just want to
489:13 - specifically show you where we can
489:15 - access the value again
489:18 - this is going to be done technically by
489:20 - gatsby so we're not going to have to
489:22 - worry about it but i just want to
489:24 - showcase where are we getting the
489:26 - variable from so if you go here
489:29 - and then expect and of course this is
489:31 - going to be for the food
489:33 - course in this case again i'll have to
489:36 - probably cancel log for some reason i
489:38 - thought that i'm going to skip that part
489:40 - and there it is now of course i can see
489:43 - my path
489:45 - and then notice that page context
489:48 - same how we had with a previous setup
489:51 - but of course the difference in this
489:52 - case is the fact that in the previous
489:55 - video we set up that variable
489:58 - correct we set up this variable and
490:00 - here's the value so now of course again
490:02 - we can set up the query
490:05 - where we look for specific recipes
490:08 - that match
490:09 - the tag and now of course we just need
490:11 - to go to the sandbox and set up the
490:14 - query for that where we use this
490:17 - variable name by the name of tag
490:20 - and i'm going to leave this one open
490:22 - just because
490:23 - of course i'll grab once in a while some
490:25 - tag values just so i don't have to type
490:27 - it out and i'm going to go to the second
490:29 - one to my second sandbox and i want to
490:33 - repeat one of the previous queries
490:35 - because we need to keep in mind that
490:36 - eventually
490:38 - when we're setting up the tags page
490:41 - it's not going to be a single return
490:44 - like we have in the recipe page now
490:47 - what's going to happen in the tags if
490:49 - you remember we have the recipe list
490:52 - component
490:53 - and essentially i'm just going to get a
490:56 - array of recipes and i'll use that
490:58 - component to render those recipes
491:01 - if you go to the tags where the value is
491:04 - for
491:05 - notice now i have the list so the same
491:08 - list that i'm using in the home page
491:11 - same list that i'm using in recipes page
491:14 - as well as about page and hopefully you
491:16 - get to just so this setup will be a bit
491:19 - different where we're not rendering info
491:22 - about one tag we basically get a bunch
491:25 - of recipes that have that tag value
491:29 - hopefully that makes sense so now let me
491:31 - navigate to my second sandbox
491:34 - and here i'll repeat our first query i
491:38 - want to get all the recipes that's why i
491:40 - use all content full recipe then
491:43 - specifically i'm looking for nodes and
491:45 - as far as which properties i want i want
491:49 - to get the id so select it here then i
491:52 - also want to have a prep time and cook
491:55 - time because remember that's what the
491:58 - recipes list is looking for it's looking
492:00 - for a list of recipes and more
492:03 - specifically those values so we look for
492:05 - prep time cook time
492:07 - then i also want to get a image
492:11 - so let me see i have the image i have
492:13 - gatsby image data and i just want to set
492:16 - it up as constraint so as far as the
492:19 - layout is going to be constrained
492:21 - and also for the placeholder i'm going
492:23 - to go with my favorite one i'm going to
492:25 - go with traced svg so that of course
492:28 - gets me all the recipes
492:30 - now i want to sort them first and second
492:33 - i want to filter them and i want to
492:36 - filter them based on the tag so first
492:39 - let's sort them and we're going to do
492:41 - that by saying all right
492:43 - based on the title field
492:46 - and we're going to do the ascending one
492:48 - so we just go here we run it and now of
492:51 - course we are sorting it alphabetically
492:54 - okay that's step number one now second i
492:57 - want to filter
492:58 - based on a tag and remember in the
493:01 - gatsby node
493:02 - that's the variable that we're passing
493:04 - in and as we know the variable name is
493:07 - stack so set it up exactly the same in
493:11 - my second box where i'll say
493:13 - filter
493:15 - and then
493:16 - as far as the value well it is still
493:19 - going to be a content because the tag of
493:22 - course is sitting in the content so i'm
493:23 - going to go with content then tags and
493:26 - then equals so effectively what we're
493:28 - saying here is
493:30 - get me the recipe
493:32 - where one of the tags is equal to the
493:35 - one that we're passing in so set equals
493:38 - and for time being why don't we hardcode
493:40 - this and i'm gonna go with food so we
493:42 - can get
493:43 - more values
493:44 - so i'm going to go here i'll pass it in
493:47 - and once i run it this should get me
493:49 - four of them now if i'll use another one
493:53 - if i'll use beef
493:55 - then of course i'll get only one value
493:57 - correct
493:58 - so we go here we set up the beef and
494:01 - this is going to return only one value
494:04 - hopefully that is clear again it's
494:06 - exactly like our previous setup and now
494:09 - i'm just going to give it a bit more
494:11 - meaningful name and i'm going to say get
494:13 - recipe
494:15 - by
494:16 - and then tag
494:18 - now i want to set up my variable
494:20 - again since i'm passing in the variable
494:22 - by the name of tag i'll set it up
494:24 - exactly the same in here once a tag it
494:27 - is going to be a string and now of
494:29 - course instead of hard coding this value
494:31 - it will depend on my variable name so i
494:34 - just need to go with a tag and then in
494:37 - the sandbox of course we'll have to hard
494:39 - code that
494:41 - so again we open up the query variables
494:43 - we set up the object and in here i say
494:46 - tag and let's just use the same one
494:49 - let's say food let's run it and again
494:52 - this will return
494:53 - all the recipes since i added that tag
494:56 - to all the recipes but then if i'll use
494:59 - i don't know i believe one of them was
495:01 - soup then i'm gonna get less because
495:04 - less
495:05 - recipes have that specific tag and now
495:07 - of course the setup is exactly the same
495:10 - where i simply want to take this one and
495:13 - something to keep in mind where if you
495:15 - go with code exporter
495:17 - notice how it omits the setup it omits
495:20 - the query keyword as well as the name so
495:23 - that's something to be aware of that if
495:25 - you'll just copy and paste
495:27 - essentially you'll get an error so make
495:29 - sure that you do this manually with me
495:31 - so we're going to navigate back to the
495:33 - tag template page
495:35 - then we'll set up our query
495:38 - and probably it's better if we import
495:40 - first the graphql as well as the recipe
495:43 - list because we'll iterate over so go
495:46 - with graph
495:48 - ql from
495:50 - and then of course this is coming from
495:52 - the gatsby
495:54 - then after that i'm gonna go with my
495:56 - import and then a recipes list from and
496:00 - in this case i'm looking in my
496:01 - components and then
496:02 - recipes list
496:04 - and then let's just scroll down and set
496:06 - up our query i'm going to say export
496:08 - const and then query and that is equal
496:11 - to my graphql
496:14 - and then of course we set up the
496:15 - template strings and now i want to pass
496:17 - in the query
496:18 - so in here i have a bunch of things open
496:21 - so let me just grab this one and again
496:23 - let me stress something the only reason
496:26 - why i use a stack
496:27 - is because that's the value that i set
496:29 - up in my gatsby node if you set up a
496:32 - different name of course use that name
496:34 - instead i'll copy and paste
496:38 - and then
496:39 - if you take a look at the props you'll
496:42 - notice that of course now i'll have
496:43 - access to the data
496:45 - and in that data we'll have that array
496:49 - of recipes again let's save it
496:52 - and let's go back to the food one
496:55 - and if you inspect and if everything is
496:58 - correct we have the object okay that's
497:02 - the props like i said we have the page
497:04 - context where we pass in the tag what's
497:07 - more interesting notice the data now
497:10 - now of course i set up the query
497:13 - i set up the page query again i have
497:14 - access to the data property and what do
497:18 - you know i have nodes array
497:20 - and that array has four items so what's
497:23 - the only thing left to do well we just
497:25 - need to go back to our tag template
497:28 - and again in my case i'm going to use
497:30 - the structuring
497:32 - i'm going to say i want to access the
497:34 - data
497:35 - and in order to set up proper syntax i
497:37 - need to wrap it in the parentheses so
497:39 - that's my property i will grab my
497:42 - recipes by drilling down so i'm going to
497:45 - say data and then again i need to use
497:47 - this guy all contentful recipe that's
497:49 - the property and then more specifically
497:52 - i'm looking for the nodes and i just
497:54 - need to pass in this recipes variable
497:57 - with its value into the recipes list so
498:01 - as far as the return
498:02 - again i'm going to go with layout and
498:05 - sound again i forgot to import that one
498:07 - so let's go here with a layout
498:10 - layout from
498:12 - and we're looking for the components and
498:14 - then the layout one i'll wrap my whole
498:17 - return in the layout
498:20 - and then inside of this layout let's go
498:22 - with a main tags again
498:24 - with a class of page
498:26 - and then instead of the main we're going
498:28 - to set up a heading 2 and for time being
498:32 - i'll just hard code that and i'll say
498:34 - tag
498:35 - name
498:36 - and then right after this one we're
498:38 - going to go with div with the class of
498:40 - tag
498:42 - recipes and this is of course where we
498:44 - go with our recipes list and we provide
498:48 - those recipes so in some cases it's just
498:50 - going to be an array with one item and
498:53 - in some cases like in our example with
498:55 - the food we're gonna have more recipes
498:59 - available so we save here
499:02 - we navigate back to our project we
499:04 - refresh and in this case it is
499:07 - complaining
499:08 - that there's some kind of bug so it
499:10 - tells me that the recipe
499:12 - is not defined and yep of course i made
499:15 - a small typo it's not a recipe it is
499:18 - recipes and then once we are fresh we
499:21 - have our tag name something we'll work
499:24 - on in a second and notice these are all
499:27 - the recipes that have that specific tag
499:29 - so if i go back to all my recipes i have
499:32 - beef blah blah blah and if i go with
499:35 - lunch this is going to get me
499:37 - these two recipes now how we can get
499:39 - this one dynamic well if you remember
499:42 - it was in one of our props and more
499:44 - specifically page context prop and again
499:47 - behind the scenes gatsby is using it to
499:50 - pass it into this query
499:53 - but in our case since i want to showcase
499:56 - that specific value i can simply go with
499:59 - comma then page
500:01 - context and then where i have the
500:03 - heading 2 instead of the generic tag
500:06 - name i'm going to go with page context
500:09 - that's my object and i'll just access
500:11 - the tag and now of course this value
500:13 - will be dynamic and that concludes
500:16 - another way how we can set up pages
500:18 - programmatically in gatsby and that is
500:20 - by using gatsby node js
500:23 - nice at this point we're familiar with
500:25 - two ways how we can set up pages
500:27 - programmatically in gatsby but before we
500:29 - continue let me fix two possible bugs
500:32 - with our current setup
500:34 - and in order to demonstrate that i'm
500:36 - going to go back to contentful and i'll
500:38 - show you that i created a
500:41 - testing recipe
500:43 - and as far as the
500:45 - they're very similar to our previous
500:48 - recipes now the gotcha here is in the
500:51 - json object
500:53 - if you take a look of course i have tags
500:55 - already but as far as the value for my
500:58 - first tag it's exactly the same
501:00 - as my recipe name and then also for the
501:04 - second tag i use two words instead of
501:07 - one and once i restart the server and i
501:10 - pull in the latest data
501:11 - i get two following bugs first if i try
501:15 - to navigate
501:16 - to a testing recipe page unfortunately
501:20 - i'm not able to i only navigate to a
501:24 - testing
501:25 - tags page
501:26 - and second if i take a look at my tag
501:30 - where i use two words now if i go here
501:34 - i can see that the url is following
501:37 - and that's definitely not what i want
501:40 - and also once we restart the server we
501:42 - can actually
501:44 - see this bug because notice gatsby is
501:47 - warning us it says attempting to create
501:50 - a page this thing but the page testing
501:53 - already exists
501:55 - and finally if you definitely want to
501:57 - see
501:58 - what is happening simply navigate to the
502:01 - page that doesn't exist and notice we
502:03 - have one page for the testing one and
502:07 - this is in the tags and then if i keep
502:09 - on scrolling i have one for testing in
502:13 - the recipes as well
502:15 - now as far as the effects we simply need
502:17 - to go back to our gatsby node so let me
502:20 - close my terminal here
502:22 - and then i want to change the url
502:26 - where instead of setting up as forward
502:28 - slash tag remember i said we are in
502:31 - charge here so i can simply go with
502:33 - forward slash
502:34 - and then tags and then the tag value now
502:38 - since i have now a tag with a two words
502:43 - now of course i also need to implement
502:45 - that sluggify remember when we were
502:47 - setting up the recipes list we
502:49 - implemented plugify now we need to do
502:51 - the same thing in three places or maybe
502:55 - more correctly in four places we need to
502:57 - do that in gatsby node we need to do
502:59 - that in a tags list tags page and also
503:02 - for a single recipe because there we
503:05 - also have the tags now gatsby note is in
503:08 - the note land
503:10 - so in here we need to go with slogify
503:13 - and we need to use a require syntax
503:16 - so i go here with sluggify then i'm
503:18 - going to scroll down and then instead of
503:21 - setting up the tag i'm going to go with
503:23 - const and i'll call this
503:25 - slug or tag slug whatever
503:28 - and this is going to be equal to a
503:30 - sluggify i'll pass in the tag i'll pass
503:32 - in the options object and say lower is
503:37 - equal to true and now instead of this
503:39 - tag
503:40 - i'm going to go with tag
503:43 - and then of course we're going to call
503:45 - this slug so tag slug okay
503:48 - let's save it now cadbury is going to
503:51 - help me and restart the server or at
503:54 - least the browser or no it's actually
503:55 - restarting the server so let's see
503:58 - whether that works and now of course i'm
504:00 - going to close the terminal
504:01 - and then like i said we need to do that
504:03 - in three places first i'm going to go to
504:06 - the tags list now in this case we're
504:08 - back in the react land so we simply go
504:11 - with slugify
504:13 - from
504:14 - and of course the package name is
504:16 - sluggify then scroll down and this is
504:19 - going to be the case where i want to
504:20 - speed it up a little bit and i'll just
504:22 - copy and paste
504:24 - so in the tags list i'm not going to
504:27 - call this tagslog anymore i'm just going
504:29 - to go with slug
504:31 - simply
504:32 - and then instead of going forward slash
504:35 - and then the text of course now i want
504:37 - to pass in the text into the sluggify
504:40 - and then forward slash
504:42 - tags
504:43 - and then the actual tag
504:46 - and like i said we need to do that in
504:48 - the tags page as well
504:50 - as well as the recipe page the single
504:52 - recipe page because that's where we also
504:55 - have those slugs meaning tags set up as
504:59 - links so let me save in the tags list
505:02 - and again in order to speed this up
505:04 - this is going to copy and paste and i'll
505:07 - start with a tags one
505:09 - so copy and paste and notice again i
505:12 - have the sluggish file i just need to
505:13 - import
505:15 - so let's grab this logifi here
505:17 - and then let's keep on scrolling again
505:19 - the url is going to be the tags and then
505:23 - slug and lastly i'm going to do the same
505:25 - thing in contentful recipe page as well
505:29 - so first let's start by importing this
505:31 - log
505:32 - and up at the top i'm going to get my
505:35 - slug then let's keep on scrolling and
505:38 - then notice i have those tags so now of
505:41 - course i just need to set them up first
505:43 - so let me go back here we might need to
505:46 - change something around because now of
505:48 - course i'm getting a string value with a
505:52 - parameter of tag so instead of text i'm
505:55 - gonna go back to the tag this will be my
505:58 - slug and i'm gonna go with my tags page
506:02 - and then of course i'm looking for
506:04 - my slug
506:06 - so once you save we should fix both bugs
506:10 - now let me go back
506:12 - to my home page
506:13 - and of course once i navigate to the
506:15 - testing one and clearly see
506:18 - that i have a recipes page for testing
506:21 - not a tags page and now if i click on
506:25 - this nice rice check out the url
506:27 - everything worked i have nice hyphen
506:30 - and rice
506:32 - and of course we can double check this
506:34 - by navigating to a page that doesn't
506:38 - exist so let's say here some kind of
506:40 - error page and i'll see that
506:43 - all my tags
506:44 - are under the url of tags forward slash
506:48 - and then whatever is the tag value and i
506:51 - can nicely set up my own slug
506:54 - and then if i take a look at the recipes
506:57 - ones of course i still have the one with
507:00 - the testing so that's how we can fix the
507:02 - possible issue of the duplicating values
507:06 - when it comes to tags as well as the
507:09 - recipe name
507:10 - nice at this point we're actually done
507:12 - with our project
507:13 - but before we deploy our project to
507:15 - notifier so instead of hosting i want to
507:18 - add some small but necessary features to
507:20 - it and let's start by pre-loading our
507:22 - fonts
507:23 - you see our current setup works great
507:25 - especially in local development but if
507:28 - our user has a slow network connection
507:31 - he or she might experience some issues
507:34 - why simply because we fetch our funds
507:37 - after our project loads what's the
507:39 - solution of course another plugin
507:42 - and just to make my case if i navigate
507:45 - to our local project
507:47 - and then inspect
507:49 - more specifically network and if i look
507:52 - for css we can clearly see that we're
507:55 - getting our fonts once our project loads
507:58 - and once we're done setting up our
508:00 - plugin
508:01 - effectively we will preload the fonts
508:04 - and let me start by navigating back to
508:07 - our project i'm looking in the assets
508:09 - i'm looking for css and then i'll scroll
508:12 - up all the way up up up up up up up
508:15 - so let me see
508:16 - it's not what i wanted there it is and i
508:19 - want to remove my import like so or you
508:22 - can comment it out that is also an
508:24 - option
508:25 - so let's say that one of course now i
508:28 - won't have my fonts
508:30 - and by the way i'll probably need to
508:31 - restart
508:33 - here so let me stop my server
508:35 - and pm start
508:37 - and probably i should have cleaned the
508:39 - cache as well so let me run gatsby clean
508:43 - and i'm going to go with gatsby develop
508:46 - and then while the project is loading
508:49 - i'm going to navigate to gatsbyducks and
508:52 - then we're looking for the plugins
508:54 - and more specifically we're looking for
508:56 - the plugin by the name of web fonts now
508:59 - if you'll type fonts in a search you'll
509:03 - see that you have many many plugins
509:06 - available and you can pick any of these
509:08 - plugins but let me just warn you that
509:10 - for some weird reason
509:11 - font plugins constantly get depreciated
509:14 - i have no idea why just be aware when
509:17 - you make your decision
509:19 - and actually the same goes for the
509:21 - plugin i'm about to show you so the
509:23 - plugin we're about to install since
509:25 - you're going to be watching this video
509:27 - in the future at that point plugin might
509:30 - be out of date now i'm not saying that
509:32 - it will but i'm just saying it might be
509:34 - the case since again for some weird
509:36 - reason font plugins constantly get
509:39 - depreciated now if that is the case just
509:41 - simply look for a different font plugin
509:44 - the good news setup for all of them is
509:46 - almost the same so switching to a
509:49 - different plugin should not be a clause
509:51 - for
509:52 - too many headaches
509:54 - so i'll remove my fonts and i'm going to
509:56 - go with web
509:57 - fonts instead
509:59 - that's the plugin i'm going to use as
510:02 - far as the setup
510:03 - we just need to use this command
510:06 - and as i said let's just check
510:08 - yep notice we don't have the fonts
510:10 - anymore so we need to prefetch them
510:13 - instead
510:14 - and at this point i'm going to stop my
510:17 - server
510:18 - will install the plugin
510:21 - so let me see where's my terminal there
510:23 - it is
510:24 - install the plugin awesome
510:26 - and then the setup for all of them is
510:27 - pretty much the same
510:29 - where you'll have to set them up as
510:31 - objects and then of course the value for
510:34 - resolve property is going to be equal to
510:36 - the name of the plugin and then whatever
510:40 - options you want to set up meaning
510:43 - whatever fonts you want to use now for
510:46 - this particular plugin if you just want
510:49 - to use the google fonts setup is
510:51 - actually easier where again you have
510:53 - resolve and then within the options we
510:55 - go with fonts google and then of course
510:58 - we have the family as well as the
511:01 - variants so in my case i'm going to grab
511:03 - this object i'm going to navigate back
511:07 - to my gatsby config
511:11 - and then i'm going to keep on scrolling
511:13 - right after the contentful one
511:16 - i'm gonna copy and paste my plugin web
511:19 - fonts
511:20 - and then i just need to change these
511:22 - values around in the main css you can
511:25 - see which ones i'm using
511:27 - so i'll start with the first one and
511:29 - i'll just copy and paste so instead of
511:31 - roboto i'm getting this one and as far
511:34 - as the variance i'm just going to go
511:36 - with 400 in this case
511:39 - and then the second one
511:42 - this is where i'll get
511:44 - more variants
511:46 - so second front family
511:48 - and then i'm gonna go with 400 500 600
511:51 - and 700
511:53 - so let me do that 400
511:56 - 500
511:58 - and 600
512:01 - okay let's add a comma
512:04 - and one more time just to be on the
512:06 - safer side i'm going to go with gatsby
512:08 - clean even though i already ran a second
512:10 - ago i'm gonna go with cats be clean and
512:13 - then get be developed
512:15 - beautiful and once the server is up and
512:17 - running you can just go to localhost
512:20 - 8000 once you refresh notice we're not
512:24 - fetching the fonts when our project
512:26 - loads but i can clearly see
512:29 - that i have my fonts
512:31 - because if i double check with my
512:33 - complete project the fonts are exactly
512:35 - the same
512:36 - now if you want to see
512:38 - where are we getting the fonts
512:40 - if you take a look at the head element
512:42 - you can see that we have some link
512:44 - elements with url attribute set to
512:47 - preload
512:48 - which just ensures that our assets
512:51 - in this case fonts are available earlier
512:53 - and as a result improve our project
512:56 - performance
512:57 - awesome we're done with our fonts now
513:00 - let's work on our contact form
513:02 - and when it comes to form submissions in
513:05 - gatsby since we ship our project as
513:08 - static assets so there's no back and
513:10 - forth between the server and the user
513:13 - effectively we have two options first we
513:16 - build our own server
513:18 - or second we offload this task to a
513:21 - third-party service
513:23 - and since building our own server is
513:25 - definitely not an option since of course
513:27 - this is a gatsby tutorial i will show
513:30 - you my favorite service for handling
513:32 - forms in gatsby keep in mind you have
513:34 - plenty of options to choose from
513:36 - just utilize the search engine and
513:39 - you'll be in good shape
513:40 - and the service i like the most is
513:42 - called form spree and mainly i like it
513:45 - because it has general street here and
513:48 - the setup is extremely extremely
513:50 - straightforward so navigate to formspree
513:54 - dot io so again the url is formspree
513:58 - dot io
514:00 - and then
514:01 - i'm gonna click on get started even
514:03 - though i have the account
514:05 - and i'm gonna go with my dummy one
514:07 - i believe it was let me just double
514:09 - check learn code mail.com learn code at
514:13 - mail.com as far as the password
514:17 - let me pass in my uncrackable password
514:21 - here
514:22 - and then no i don't want to get the news
514:26 - let's register
514:28 - and once we do that
514:30 - they are asking us to verify the email
514:32 - okay good
514:33 - not a robot that's awesome and well it's
514:36 - also really cool that you can actually
514:38 - use the service in local development so
514:40 - you can test it right away and once you
514:43 - verify the email address then look for
514:46 - the new project
514:47 - in my case i'm going to call this gatsby
514:50 - tutorial
514:52 - i'm going to create the project then i
514:54 - want to set up the form
514:56 - and notice here we have a form name and
514:58 - i'm going to call this
514:59 - recipes form recipes
515:02 - form okay good let's create that form
515:05 - and once we do that notice the easy
515:07 - setup so that's the url we're going to
515:10 - use and if we keep on scrolling
515:12 - as far as the simple html setup it's
515:15 - following where we have the action
515:17 - attribute and then we just pass in the
515:19 - url and that's the same url so you can
515:22 - simply just copy and paste and of course
515:24 - we need to add a method of post so let's
515:28 - try this one out
515:30 - i'm going to copy these two values then
515:32 - of course i want to navigate back to my
515:34 - contact form
515:35 - so let me look
515:37 - for my pages
515:39 - and then instead of the pages of course
515:42 - i have my form now i'm not using the
515:44 - link so i might as well
515:45 - remove it
515:47 - here okay good let's keep on scrolling
515:49 - keep on scrolling
515:50 - that's the form and now we just need to
515:52 - add these two attributes
515:54 - and once we have the setup in place
515:57 - you know what just to stay on safe side
516:00 - i'm going to go with npm start one more
516:04 - time and once the server is up and
516:06 - running i'll try to submit the form so
516:09 - i'm going to navigate to the contact
516:11 - page again that's the local project that
516:13 - i'm working
516:15 - and i'm just going to go with my name
516:17 - with some kind of
516:19 - dummy email
516:20 - and as far as the message i'm just going
516:22 - to say hello there now let's see the
516:25 - server is up and running
516:28 - that's good news so now let's try to
516:30 - submit the form so i click here
516:33 - and check it out now of course i can see
516:35 - that the form was submitted awesome and
516:38 - if i go back of course i'm directed back
516:40 - to my project and effectively two things
516:43 - just happened first i got the email from
516:47 - the service from the forum spree and
516:49 - also i can check in submissions and i'll
516:52 - see that i have one submission where i
516:54 - have the message name as well as email
516:57 - so basically whatever you set up with
517:00 - that name attribute will show up in
517:03 - those submissions so for example for me
517:05 - it was name message and email and of
517:08 - course i can see those values in the
517:10 - submissions now if i navigate back to my
517:13 - email i can also see
517:15 - that i just got a form submission
517:19 - and of course
517:20 - there are paid options you can do more
517:22 - integrations and you can do tons and
517:24 - tons of things i'm just showing the
517:25 - basic one but as far as get up and
517:28 - running with form submissions
517:30 - in my opinion formspree is a pretty
517:33 - solid option okay and let's also see how
517:35 - we can change the default favicon
517:38 - and if you're not familiar with favicon
517:40 - it's an icon in the browser tab so this
517:43 - thing over here
517:45 - get b does provide a default icon and it
517:49 - is located
517:50 - in the static folder
517:52 - so we simply need to get our own icon
517:55 - and just replace it and while there are
517:59 - tons of resources for the favicons the
518:02 - one that i enjoy the most is this one
518:05 - and the url is favicon
518:07 - io
518:10 - then i usually go with the text option
518:14 - and i'll close the ad then let's keep on
518:16 - scrolling and we can change the font
518:19 - color we can change the background color
518:21 - as well as we can set up the text so in
518:23 - my case i'm gonna go with letter r
518:27 - and i'll leave the font color white and
518:30 - i'll just change it to my background so
518:33 - again in the main css
518:35 - i'll have my primary color
518:37 - this one over here
518:40 - then of course i just need to navigate
518:41 - back and then copy and paste
518:44 - hopefully it is going to work and now i
518:47 - simply just need to download
518:49 - and then once the download is complete
518:52 - you can probably already guess
518:54 - that we'll simply just swap them out and
518:58 - of course this is my download now
519:00 - i'll pop it open
519:02 - and more specifically i'm looking for
519:05 - that favicon ico notice they provide
519:08 - multiple options
519:10 - but we just need this one so now i need
519:12 - to go to my tutorial
519:14 - where i have the static folder i simply
519:17 - can drag and drop and i'll say replace
519:20 - and then you might need to restart the
519:22 - server or even clean out the cache so
519:25 - let me just first
519:26 - try by refreshing and actually it works
519:29 - even without doing those things so of
519:31 - course now i have a new favicon again
519:34 - the steps are following just get the
519:36 - favicon and replace the one that you
519:38 - currently have in a static directory
519:41 - beautiful and now let's set up a search
519:44 - engine optimization component or seo for
519:47 - short where basically we'll set up a
519:49 - metadata for our project and it's very
519:52 - useful if we want to increase the
519:54 - visibility of our site for relevant
519:57 - searches keep in mind two things first
520:00 - since it's not a seo course we'll just
520:03 - scratch the surface and second we'll
520:05 - start nice and easy with just bare bones
520:08 - setup and in a later course project we
520:10 - are going to take a look how we can set
520:12 - up a more complicated component faster
520:15 - by utilizing the gatsby dogs for
520:18 - starters the main idea is following
520:21 - where if i take a look at my source
520:24 - of course i'll see that i have html tags
520:28 - that's what the usb returns and then of
520:30 - course we also have the head element and
520:33 - then instead of the helmet notice these
520:35 - meta tags so
520:36 - that's a metadata about our project
520:40 - so here we can control things like title
520:42 - description and that sort of thing
520:45 - now the thing is it's not like i can
520:48 - hack into it myself manually because
520:51 - keep in mind in our project we're just
520:54 - working with components correct so this
520:57 - is my homepage and effectively this is
520:59 - my component
521:01 - now once gatsby is done performing its
521:04 - magic
521:05 - then of course i get back this html and
521:08 - the way around it is by installing
521:10 - another plugin
521:11 - and in this case we're looking for
521:12 - gatsby plugin react helmet
521:16 - so you can either search for seo or just
521:19 - search for helmet and believe me with
521:22 - 1.6 downloads you will definitely be
521:25 - able to find the plugin
521:27 - and then as far as the dependencies we
521:30 - need to install gatsby plug-in react
521:32 - helmet
521:33 - as well as the react helmet so under the
521:35 - hood this plug-in uses react helmet
521:38 - which pretty much is a standard these
521:41 - days when it comes to
521:43 - react applications and setting up the
521:46 - metadata and let's just grab those
521:49 - commands
521:50 - and of course i'll navigate back
521:52 - i want to stop my server and once i
521:55 - clear everything copy and paste okay
521:58 - that seems to work now i also want to
522:01 - add the string of course
522:04 - in my gatsby config
522:06 - okay let's keep on scrolling let's keep
522:09 - on scrolling and then somewhere all the
522:11 - way in the bottom
522:12 - but still within the array i want to
522:15 - install
522:16 - my helmet one
522:17 - then let's start up our server
522:20 - and i want to go to my components and
522:23 - create a new one
522:24 - and i'm going to go with the name of seo
522:27 - and then once we create this component
522:30 - then i want to start by setting up the
522:33 - react component
522:34 - and then i also want to right away set
522:36 - up my imports
522:38 - and we'll be looking for the helmet from
522:40 - react helmet so that's the package and
522:43 - also i want to right away get the use
522:45 - static query and the graphql because we
522:49 - will utilize the query here as well so
522:52 - let's start with our helmet one and this
522:55 - is a named import so we go here with
522:57 - helmet and then this is coming from of
523:02 - course the react helmet package
523:04 - and then once we have this imported like
523:06 - i said we're gonna go with use static
523:09 - query
523:11 - and i also want a graphql tag template
523:14 - from and it's coming from the gatsby
523:17 - as far as the component instead of
523:19 - returning div
523:21 - i want to return a helmet component
523:24 - so we're going to go here with helmet
523:26 - component and then this is where we set
523:29 - up the meta information
523:31 - for example if i want to change the
523:34 - title of my page because at the moment i
523:36 - have localhost 8000 i just need to pass
523:39 - in a
523:40 - title prop and i need to set it equal to
523:44 - some kind of value now we will make this
523:46 - dynamic in next video for time being i'm
523:49 - just going to go with title is equal to
523:52 - home
523:53 - so that is going to be my title element
523:57 - in the header element and then the value
524:00 - will be home and like i said we are
524:02 - returning a
524:03 - helmet component from our seo component
524:07 - let's save it and of course i want to
524:09 - take it out for test drive so i'm just
524:11 - going to navigate to index.js
524:14 - then we go with the import we're looking
524:16 - for seo component it is coming from of
524:20 - course our components and then at the
524:22 - very top i'm just going to go with seo
524:25 - component for time being we're not
524:26 - passing anything in
524:28 - we just save it and then the moment we
524:31 - do that well compliance that cannot get
524:34 - it from the components because of course
524:36 - i didn't specifically say which one i'm
524:37 - looking for my apologies once we save we
524:41 - should see the title
524:43 - with a name of them and of course once i
524:47 - do notice now in my tab
524:50 - you clearly see
524:51 - that the title of my page is home
524:55 - so that's the basic setup for this
524:56 - plugin
524:57 - where effectively we need to import a
525:01 - helmet component that is coming from
525:03 - react helmet
525:04 - then we'll need to set up props on that
525:07 - component and return from this component
525:10 - and then of course whatever meta
525:12 - information will set it up will be added
525:15 - to our page and if you're interested in
525:18 - even more info
525:20 - just navigate to the bigger browser
525:21 - window
525:22 - and let me refresh
525:25 - just so
525:26 - everything is up to date and then take a
525:29 - look at the elements if i open up the
525:32 - header element
525:34 - notice now here all the way in the
525:36 - bottom
525:37 - i do have my title tags so i have my
525:39 - title element and of course the value is
525:42 - home so everything works whatever i'll
525:45 - set up on the helmet component
525:48 - it will be added to my head element and
525:53 - in turn i'm going to be setting up meta
525:56 - information about my project
525:59 - all right so this works pretty great we
526:01 - can have title we can have it also e in
526:05 - the browser tab but of course the issue
526:07 - is that if i wanna reuse this component
526:10 - at the moment i'm hard coding this value
526:14 - and we already know what we can do in
526:16 - order to solve this problem because of
526:18 - course at the end of the day we have the
526:20 - component we have the react component so
526:22 - we can right away set up two props
526:25 - and i'm gonna go with title prop as well
526:27 - as the description prop so these are the
526:30 - two things that will pass in description
526:33 - and then in order to test it out of
526:36 - course i'll have to set up a description
526:39 - meta tag as well now this one is a bit
526:42 - more complex because we need to have
526:44 - property and there in most cases they
526:47 - set it up as an array so don't worry
526:49 - we'll get there let's just start by
526:51 - testing out the title so this is the
526:53 - first prop that i'm going to be looking
526:55 - for title prop and then instead of hard
526:57 - coding this home i want to go with title
527:00 - and what this allows me to do is to
527:03 - reuse this component so i take my seo
527:06 - component and now of course since i'm
527:08 - looking for the title prop
527:10 - i can render it in about page and then
527:14 - pass the above page value instead of
527:16 - hard coded home correct so first let's
527:19 - go back to the index just so we can test
527:21 - it out and of course we have now tile
527:24 - prop and as far as the value
527:27 - let's just write home
527:28 - and page and of course the moment i save
527:31 - it check it out of course now our title
527:34 - is different all right so let's write
527:37 - the same thing e in the about page so
527:40 - let me select this one again in order to
527:42 - speed this up i'm just going to copy and
527:44 - paste
527:46 - and then i'm looking for
527:49 - the return and of course like i said
527:52 - we're gonna go with seo and then as far
527:55 - as this title we'll just say about and
527:58 - once i say i do have a tiny bug because
528:01 - i do need to close it out and then the
528:03 - moment i save everything seems to be
528:05 - working fine i just need to go to the
528:07 - bigger browser window and then once i
528:10 - navigate to about page again
528:12 - everything is working
528:14 - i have my title and of course the value
528:16 - is above
528:18 - because that's what i passed in the prop
528:20 - and the same thing i can see in my
528:23 - source code awesome so now let's see how
528:26 - we can pass in that description
528:28 - and like i already previously mentioned
528:30 - as far as description it is a bit more
528:33 - complex because we are setting up meta
528:35 - tags
528:36 - and usually you set up quite a few of
528:39 - them
528:40 - so the syntax what they're looking for
528:42 - here is following so we go here with
528:45 - meta and then we'll set it up of course
528:48 - with curly's
528:50 - and then we'll be looking for array
528:52 - and then it's going to be an array of
528:54 - objects and now for this meta
528:57 - description tag we simply need to say
529:00 - name so this is going to be the name of
529:02 - our meta tag then we need to go with
529:05 - template strings and then we just type
529:07 - description so that's going to be the
529:09 - name of our meta tag and as far as the
529:12 - content
529:13 - let's just set it up equal to our
529:16 - description to the prop that we're
529:18 - passing in
529:19 - but in the next video i'll show you how
529:23 - we can actually
529:24 - use our gatsby config
529:27 - and more specifically remember when
529:29 - we're setting up the site metadata well
529:31 - now set up a query to pull in that data
529:35 - and first i want to add the comma just
529:37 - keep in mind we're still working in the
529:39 - same object
529:40 - and we're going to go with content and
529:43 - that's the property name that we're
529:44 - looking for and then we pass in our
529:47 - description
529:49 - now i'll save
529:50 - and i simply need to go back to my
529:53 - index.js and i'm just gonna write some
529:56 - gibberish i'm gonna say here the
529:57 - description
529:58 - and we're gonna go with this is home
530:02 - page because in the next video we'll use
530:05 - our site's description and then i'm
530:07 - gonna go back to about.js and in this
530:10 - case i'm looking for seo component of
530:12 - course
530:13 - and i just want to copy and paste now i
530:16 - do want to change the value around and
530:18 - i'll say about page
530:20 - and again the reason why we're just hard
530:23 - coding this gibberish is because in the
530:25 - next video i'll show you how we can pass
530:27 - in the site description so now i just
530:30 - want to navigate back i want to refresh
530:33 - and then if we take a look at the header
530:35 - element
530:36 - and if we keep on scrolling keep on
530:38 - scrolling notice here we have meta so
530:41 - the name is description and then as far
530:43 - as the content of course in the about
530:45 - page i'm going to have this is about
530:47 - page now if i'll take a look at the home
530:50 - page where this value will be different
530:52 - now of course i will have a
530:55 - this is a homepage all right and lastly
530:59 - in this video i just want to showcase
531:01 - how we can set up a language for our
531:04 - project now this one will be a bit
531:06 - different
531:07 - because this one we're adding on the
531:09 - html tag
531:11 - and the way it works in the seo
531:14 - component
531:15 - on a helmet we need to go with html
531:18 - attributes and then we'll have to set up
531:21 - an object
531:22 - and they're looking for the property of
531:25 - a language so they have a language
531:27 - property and you just want to set it
531:29 - equal to whatever language you want so
531:32 - in my case i'm gonna go with english
531:35 - i will save and again once i go back to
531:38 - my project notice the html element now
531:41 - of course i have the language and that
531:43 - is set equal to an english so that's how
531:46 - we can add more
531:48 - tags to our head element by using our
531:52 - plugin
531:53 - beautiful i think we're in good shape
531:56 - but what's missing
531:58 - is our site's information
532:00 - if you remember in the gas b config more
532:03 - specifically in site metadata we already
532:05 - have
532:06 - info about our site
532:09 - so why don't we try this why don't we
532:11 - pull in this data
532:12 - in the seo component
532:15 - and then utilize it
532:17 - and we'll have to start by setting up
532:19 - our query
532:20 - and i simply want to go with my explorer
532:23 - i'm going to go with site
532:25 - i'm looking for my site metadata that's
532:28 - not a surprise and i'm going to go with
532:30 - my title
532:31 - and description
532:33 - now i will run my query
532:35 - and of course i can see that i'm getting
532:37 - back my simple recipes as well as my
532:40 - description i just want to grab
532:42 - everything and i'm going to go with code
532:44 - exporter in this case and of course i
532:47 - just want to take everything apart from
532:49 - export
532:50 - i'll navigate back to my serial
532:52 - component
532:53 - copy and paste and then instead of the
532:55 - component
532:57 - i want to access that data and i know
533:00 - that i'm going to be getting back my
533:02 - object and inside of it i have the site
533:05 - so right away the structure and i'm
533:07 - going to go with use static query and
533:09 - i'll pass in query and once i save
533:13 - there seems to be a cache bug
533:16 - so let me try this
533:18 - let me try clearing out the cache
533:20 - and once i run gatsby clean and restart
533:23 - the server
533:24 - everything is working as expected so now
533:27 - of course we're pulling
533:29 - our site's information and in here i'll
533:32 - use it in two places
533:34 - first i'll set up a vertical bar
533:37 - for my title for my page title and what
533:41 - i'm trying to do here is
533:43 - having a title with home and then
533:46 - vertical bar and then whatever is the
533:49 - project name and if you're interested
533:51 - how it's going to look like take a look
533:53 - at the complete project notice here we
533:55 - have home and vertical bar and then of
533:58 - course we have our sites title that's
534:01 - the first thing that i want to do and i
534:03 - simply
534:04 - need to change this value here where
534:06 - it's not going to be just title i'm
534:09 - going to go with the template string and
534:11 - then i'll access the value and i'm going
534:14 - to go title then like i said we're going
534:16 - to go with our vertical bar
534:18 - and then
534:19 - right next to the vertical bar we'll
534:21 - place our site's title now where's the
534:24 - site title setting of course it is
534:26 - sitting in sight so i have metadata and
534:29 - title now in my case i'm not going to
534:31 - structure it i think i'm just going to
534:32 - drill down to the property so let's go
534:35 - with site
534:36 - site
534:37 - meta
534:38 - and then data and of course finally i
534:41 - want to access the title property and
534:44 - again once we save once we refresh we
534:47 - should
534:48 - see these simple recipes and finally
534:51 - after struggling with it a bit now of
534:53 - course i can see my homepage and also i
534:56 - have the site title now i think in the
535:00 - index.js i will remove this home page i
535:03 - think that's better and as far as
535:05 - description i want to make it more
535:08 - flexible
535:09 - where if i pass in the value for the
535:12 - prop then of course i'll set it up as my
535:15 - value for my meta tag however if i don't
535:19 - pass it in then i'll use our site
535:22 - description and the way we do that we go
535:25 - to the meta and then take a look at the
535:27 - content of course at the moment i'm
535:30 - looking for my description however above
535:32 - the return i can just set up a new
535:35 - variable and i'll call this meta in the
535:37 - description and this one will be equal
535:39 - to the description and i'll use the aura
535:42 - operator so if the description is passed
535:45 - then of course we'll use it if not
535:48 - then we'll default to site description
535:52 - again we go with site site metadata and
535:55 - then description
535:57 - again the only gotcha here is this or
535:59 - operator
536:01 - i say get me a description if
536:03 - description is undefined so if it's not
536:06 - passed then use site description and of
536:09 - course i need to change it in my meta
536:13 - prop as well so i'm gonna go with meta
536:16 - description
536:17 - and in order to test it out i'm gonna go
536:19 - back to index.js i will remove it and
536:24 - i'll do the same thing in about
536:27 - so this is going to be my about page by
536:29 - passing the title
536:30 - but i will remove my description let me
536:33 - save it and in order to test it out i'm
536:36 - going to go to my bigger browser i can
536:39 - see that title is correct and if i take
536:42 - a look at my head element
536:44 - somewhere there should be
536:46 - meta tag with a name of description and
536:49 - notice the value now of course i have
536:52 - nice and clean recipes so if i were to
536:55 - go back
536:56 - and actually add this description for my
536:58 - page so if i'll say this is
537:01 - about and then page
537:04 - then of course if we navigate back and
537:06 - again we just need to refresh and
537:08 - navigate to that about page of course
537:10 - we'll be able to see
537:12 - that
537:13 - the content is different and hopefully
537:15 - you see how it works
537:17 - if we pass in the description awesome
537:20 - then of course we'll use it if not then
537:22 - we'll always default back to
537:25 - site description
537:26 - and now of course i just want to set it
537:28 - up in all our pages again a little bit
537:31 - of copying pasting but i'm not going to
537:33 - pass in description i'll always default
537:36 - back to a size description and we simply
537:39 - want to start
537:40 - by setting up our seo component in 404
537:45 - that's going to be our error and again
537:47 - we simply want to set it up in return so
537:50 - we go with seo and as far as title i'm
537:53 - just going to say error
537:55 - and then i'm not going to test it out
537:57 - right now i want to add it to all the
537:59 - pages and then we'll test all of them
538:02 - together that was my 404 then of course
538:05 - we also have the contact copy and paste
538:08 - we need to set up our seo component and
538:10 - we just need to set up our title so this
538:13 - will be a contact
538:15 - and then of course we're going to close
538:18 - the seo component then i'm looking for
538:21 - recipes again we import seo component
538:24 - and then we go with seo then title will
538:28 - be equal to
538:29 - recipes again close out our component
538:32 - and then lastly we have the
538:35 - tags
538:36 - where again inside of the layout i want
538:39 - to go with seo component and then title
538:42 - and of course the value
538:43 - will be
538:45 - tags let's save this one and now of
538:48 - course we have two dynamic pages we have
538:51 - contentful recipe and also a tag
538:54 - template so let's start with contentful
538:56 - recipe
538:57 - we'll get our seo component again as far
539:00 - as the return we just go inside of the
539:03 - layout
539:04 - but as far as the values now of course
539:06 - this is dynamic
539:09 - so we're getting the title and
539:11 - description for every recipe that we
539:13 - have
539:14 - because remember we are creating this
539:16 - page dynamically so here we simply go
539:18 - with title is equal to our title
539:21 - property whatever we're getting back
539:24 - from data dot contentful recipe and the
539:28 - same thing will be with description so
539:30 - we're going to go with description
539:32 - and we'll just pass in that description
539:35 - and of course we want to do the same
539:36 - thing
539:37 - in our tag template we now get there
539:41 - copy and paste the seo component inside
539:44 - of the layout we're going to go with our
539:47 - title and as far as the value remember
539:50 - if we want to access that specific tag
539:54 - we need to go with page context and then
539:57 - dot tag so here we go with title and
540:00 - that one will be equal to our page
540:03 - context and then we're looking for the
540:05 - tag again i'll close my component and
540:08 - now of course let's go and test it out
540:11 - on a bigger browser window i'm first
540:13 - going to go to about page i can see that
540:16 - everything works i have my about and of
540:18 - course i have simply recipes then tags
540:21 - then recipes
540:23 - back to home
540:24 - then contact and then eventually i also
540:27 - want to test out my error page so just
540:30 - type some gibberish and we'll take a
540:32 - look at the error page and it looks like
540:35 - everything is working
540:37 - great
540:38 - and then let's take a look at our
540:40 - programmatic pages so in here i have my
540:42 - banana package and i can clearly see
540:45 - that everything works as far as the
540:47 - title okay and then if i take a look
540:51 - at my description
540:53 - that also showed returns a value
540:56 - and of course you can clearly see that i
540:59 - have my meta with my value that is
541:02 - coming from the contentful and lastly
541:05 - let's just take a look at the tags so
541:07 - now in this case i want to go to home
541:10 - and then take a look at one of the tags
541:12 - and once we navigate there you can
541:14 - clearly see that in the tab
541:17 - i have the correct value this is for the
541:20 - ribs and we're successfully done setting
541:23 - up our seo component beautiful at this
541:26 - point our recipes project is complete
541:28 - and now we just want to host our project
541:30 - online so everyone can see our awesome
541:33 - work when it comes to hosting you have
541:35 - plenty of options to choose from since
541:37 - at the end of the day our project just
541:39 - contains cluster of static files and for
541:42 - the most part we have two options we can
541:45 - build the project locally with the help
541:47 - of gatsby build or use the continuous
541:50 - deployment where we utilize git
541:53 - and of course in the following videos
541:54 - i'll cover both options i prefer hosting
541:57 - provider called metal file and i like it
541:59 - because the setup is extremely
542:00 - straightforward and they do offer
542:03 - generous free tier but of course like i
542:05 - said it's just one of the options out
542:07 - there
542:08 - now in order to create an account if you
542:10 - don't have one already navigate to
542:12 - notify.com again the url is
542:14 - networkify.com and just follow the sign
542:17 - up link and once you create the account
542:20 - just log in this is going to be your
542:22 - dashboard and then at this point we have
542:25 - two options
542:26 - we can do the drag and drop
542:29 - where basically we will build our
542:31 - project locally
542:33 - and then the second option is the
542:35 - continuous deployment
542:37 - where we'll push our project up to the
542:39 - github
542:40 - and then from there netfly will build
542:43 - our site for us so let's start with the
542:46 - simpler option first which is the drag
542:48 - and drop and then next video
542:51 - we will take a look at the continuous
542:52 - deployment
542:53 - and in order to set up the drag and drop
542:56 - you simply need to go to this site
542:58 - here and then keep scrolling keep
543:00 - scrolling and here
543:02 - all the way in the bottom you have this
543:04 - window so i'll make this smaller
543:07 - and maybe not this small
543:10 - but i'll set it here
543:12 - and what i want right now is to go back
543:15 - to my project
543:16 - stop everything
543:18 - and then clear my terminal then first i
543:22 - want to run get ads be clean
543:24 - i just always prefer running this first
543:27 - and then we want to run the gatsby build
543:30 - now keep in mind something extremely
543:33 - important your local gatsby build will
543:36 - fail
543:37 - if you don't have this env production or
543:41 - if the values here are incorrect
543:44 - that's just the way it is that's why for
543:46 - development we have one and then for the
543:49 - production we have another one so make
543:51 - sure that if you do get some errors to
543:54 - first check what is happening with em
543:57 - production and here we simply need to
543:59 - run gatsby and then build and now of
544:02 - course gatsby will build the production
544:05 - ready site for us
544:07 - and once the gatsby is done
544:09 - we can go to our folder
544:13 - and then of course we have the public
544:16 - one and this is where our production
544:18 - ready project is setting so at this
544:21 - point we simply need to take this public
544:23 - folder
544:24 - and just drag and drop
544:26 - again the setup is going to be pretty
544:28 - fast once you're done with gatsby build
544:30 - because metal file doesn't really need
544:32 - to do anything of course now we are in
544:34 - good shape
544:36 - and before we check out the site let me
544:38 - just change the site name
544:40 - so click on the site settings and then
544:43 - more specifically site name now if the
544:45 - name is already taken of course you
544:47 - won't be able to use it and therefore
544:50 - i'm going to go temp gods be tutorial
544:54 - hopefully
544:55 - that name is not taken so gatsby
544:58 - tutorial
545:00 - and notice how they will add this notify
545:03 - that app so eventually yes of course you
545:05 - can set up the custom domain that is
545:08 - definitely an option
545:09 - but for time being of course we're not
545:12 - going to do that
545:13 - and once i'm done changing the name
545:16 - i want to navigate to the url and this
545:19 - is my set and notice how it is live
545:22 - because of course i have my netlify.app
545:26 - good so let's see we have recipes we
545:28 - have tags
545:29 - everything seems to be working i can
545:32 - click on a recipe this is going to get
545:34 - me the individual recipe
545:36 - beautiful
545:37 - contact page yep
545:39 - still everything is in place and now
545:41 - let's test out that error like i said
545:43 - you always want to test out those arrow
545:46 - pages actually in production and just
545:48 - like that we're done with the drag and
545:50 - drop option and our site is live all
545:53 - right and next i want to showcase how we
545:56 - can use the other option the continuous
545:58 - deployment where basically we set up a
546:00 - github repo
546:02 - and then
546:03 - metalfly does the building for us
546:06 - so it is smart enough to check if there
546:09 - are any changes in our repo and the
546:12 - moment we push up some changes
546:14 - then number five restarts the
546:17 - build process since this is somewhat of
546:20 - a advanced course i'm not gonna go over
546:22 - the basic git commands as well as how to
546:25 - set up a github repo
546:26 - if you need to brush up on that please
546:28 - utilize the search engine
546:30 - so i'm staring at my github dashboard
546:33 - and i want to create a new repo
546:35 - and since i'll remove it once i'm done
546:38 - with this video i'm going to go with
546:40 - temp gatsby
546:42 - and then tutorial okay awesome
546:45 - and i'm gonna go with public one i'll
546:48 - create the repo
546:50 - and i right away wanna copy and paste
546:52 - these three commands because i wanna
546:54 - point the url to the repo and i guess
546:58 - let's start by navigating back i'll
547:00 - clear my terminal
547:02 - and i want to set this up as a git of
547:04 - repo
547:05 - so just in case it is already a github
547:08 - repo i'm just going to go with rm and rf
547:10 - and git
547:12 - i remove the github repo
547:14 - and then i'll create a new one get in it
547:17 - then i'll add all the files and again
547:20 - just make sure
547:22 - that you have a git ignore and that
547:25 - you're ignoring the env variables
547:28 - otherwise everyone will be able to see
547:30 - your secret api case
547:33 - and i'm just going to go with git commit
547:35 - and i'll just say first
547:38 - commit
547:40 - and then i'll copy and paste those three
547:42 - commands so now i have the url pointing
547:45 - to my repo
547:47 - and then from there i simply need to go
547:50 - back to my repo refresh
547:53 - and of course this is my project
547:56 - and once i have my repo in place
547:59 - now of course i want to navigate back to
548:01 - the netify
548:02 - and i'll create a new site however now
548:05 - is the other option new site from git
548:08 - and as a provider i'll pick my github
548:11 - and then more specifically i need to
548:13 - look for my tampon so let's say i have
548:16 - temp
548:18 - and then once i find my repo so temp
548:22 - gatsby tutorial
548:23 - then we simply
548:25 - need to set everything up and as you can
548:28 - see i have the owner i have the main
548:31 - branch okay that is correct and then
548:33 - notice how right away natalify sets up
548:37 - the command the build command so this is
548:40 - what i said another file will build the
548:42 - site for us and then as far as the
548:44 - publish directory it is public so make
548:47 - sure that these match now in most cases
548:49 - nettle fire is smart enough to get the
548:51 - correct commands but if you do
548:53 - experience
548:54 - some bugs make sure that the commands
548:57 - match exactly that because this is where
548:59 - our gatsby project will eventually sit
549:02 - and also in our case since our project
549:05 - is more complex we want to add this env
549:09 - variable because we need to keep in mind
549:10 - that since
549:12 - netflie is doing the build process
549:15 - of course
549:16 - it also needs to know well what is the
549:18 - value here correct
549:20 - otherwise everywhere where we use that
549:22 - can be variable nut supply is going to
549:24 - be like hey listen
549:25 - you want me to provide some kind of
549:27 - value here but i have no access to it
549:30 - and therefore we're gonna go with show
549:32 - advanced and in a second i'll show you
549:36 - where we can do that in the dashboard as
549:38 - well just in case you ever forget so
549:41 - here we go with new variable and now you
549:43 - wanna go back to your env file
549:47 - take the contentful part and then do the
549:50 - same thing with the value so select
549:52 - everything and then copy and paste
549:55 - and then of course we just need to go
549:57 - with deploy side now i can tell you
549:59 - right away that the process takes longer
550:02 - therefore i'm going to go back to my
550:04 - dashboard
550:06 - and i'll simply remove this site so in
550:09 - the process i can show you how you can
550:10 - do that so go here to the site settings
550:13 - again keep scrolling keep scrolling and
550:15 - notice we have this option of delete the
550:18 - site
550:19 - so i'm going to copy and paste
550:21 - we delete the site
550:23 - then i'll add the same name for this guy
550:26 - notice we're still building
550:28 - and again we do that in the site
550:30 - settings
550:31 - change site name
550:33 - and then i'm going to go with the same
550:35 - one so i'm going to go with temp gatsby
550:37 - tutorial
550:39 - we save it that's awesome
550:42 - and then as far as the build process if
550:45 - you want to take a look what's happening
550:47 - or if you want to check errors
550:49 - if you do get some
550:51 - then go with deploys
550:54 - and notice this is our current build so
550:58 - in here you'll be able to see what is
551:00 - happening as far as the build process
551:03 - now if you ever want to change those env
551:06 - variables
551:08 - if you want to add a new one or maybe
551:10 - change it then again you're looking for
551:13 - domain settings
551:15 - and more specifically you keep on
551:18 - scrolling or no sorry you're looking for
551:20 - build and deploy
551:22 - and then of course we have the build
551:24 - command we have publish directory so
551:26 - this is also a place where you can
551:28 - change that keep scrolling keep
551:30 - scrolling
551:31 - then we have hooks which we're going to
551:33 - cover in a second
551:36 - and then of course we also have the
551:39 - environment variables so notice if you
551:41 - ever want to add a new one or edit the
551:44 - existing one again
551:46 - look for this window and then more
551:48 - specifically for the edit variables
551:51 - option so let me navigate back and i'll
551:54 - take a look at deploys
551:56 - now the network is still building like i
551:58 - said this will take longer because now
552:01 - netlify
552:02 - is doing all of the work
552:05 - and it looks like everything is nice
552:08 - because my site is live and again if you
552:11 - ever
552:12 - need to check for the errors or what's
552:15 - happening just navigate here and you'll
552:18 - be able to see what's happening with
552:21 - your project so i'm going to go back to
552:23 - my project and again everything works
552:26 - pretty nice now why do you want to use
552:29 - this option why do you want to go with
552:31 - continuous deployment even though it
552:33 - looks like there are more steps involved
552:36 - simply because at the moment i'll push
552:39 - a new change up to my repo notify will
552:44 - rebuild my site for me so i'm not gonna
552:47 - have to do this manually and as always
552:50 - the most
552:51 - basic and drastic probably way is simply
552:54 - adding some kind of background color so
552:56 - let me scroll down
552:58 - and where it is where it is body and
553:01 - then instead of the background
553:04 - of whatever i have as a css variable
553:08 - i'm just going to go with red now i
553:09 - don't think i'm going to run it locally
553:12 - but i'll right away push it up and i'll
553:14 - say
553:14 - testing testing background
553:18 - and red
553:20 - let's see okay i want to push this up
553:22 - and as i said i'm using the visual
553:24 - studio gui for this notice we just need
553:26 - to add a message then i click on commit
553:30 - and then in order to push it i go with a
553:32 - push option
553:34 - and now of course i just need to double
553:36 - check that
553:37 - in my repo
553:39 - so let's navigate here that's refresh
553:41 - notice i have testing background red so
553:44 - that's good and then what's even nicer
553:47 - that if you navigate back to your
553:50 - project you'll notice that there's
553:52 - another build process started by the
553:56 - network so again notify smart enough it
553:58 - has hooks right now in the repo so now
554:02 - every time we push some kind of change
554:05 - metal file will rebuild the site for us
554:08 - and at this point i'm not going to wait
554:09 - till the build process is complete since
554:12 - that seems like a waste of your time and
554:14 - once everything is done i'm just going
554:16 - to showcase that of course
554:18 - the background color for our project is
554:20 - going to be red and once notify is done
554:23 - building
554:24 - my latest project
554:26 - of course i can just double check
554:28 - and i can see that everything went fine
554:31 - and
554:32 - we of course can check out our full
554:34 - project
554:35 - as a very very quick side note if
554:38 - one of the build processes is going to
554:41 - fail then of course it's just going to
554:42 - revert back to the old one so for
554:45 - example
554:46 - if this for some weird reason would have
554:49 - failed
554:50 - then we would still be using the
554:52 - original one something to keep in mind
554:55 - and let's just test this one out
554:57 - and of course now my background is red
555:00 - so hopefully you can clearly see the
555:02 - benefits of using the continuous
555:05 - deployment all right and as a last thing
555:08 - in our first project i just want to
555:10 - showcase how we can utilize the web box
555:13 - now before we do anything webhook
555:15 - related let me just remove this
555:17 - background color because it really
555:19 - annoys me
555:20 - so let me go back to my background color
555:22 - again i'll make another commit in this
555:26 - case i'll say
555:28 - back to default
555:30 - and then we push this up like i said i'm
555:33 - using the gui and i'm just gonna go with
555:35 - push and as far as the web hooks
555:38 - the idea is following where
555:40 - if i go to my contentful right now
555:43 - and if i log in and
555:46 - for example add a product
555:49 - with our current setup
555:51 - either we need to go manually to mentify
555:56 - and restart another build here you can
556:00 - clear the cache and
556:02 - trigger another deploy or we need to add
556:05 - some kind of change to our project and
556:07 - then push it up to the github because we
556:09 - know that the deploy process will be
556:12 - triggered that way as well
556:15 - however there is a better option
556:17 - we can actually connect it to
556:19 - where we set up something called
556:21 - webhooks and the main idea behind the
556:23 - webhooks is that we send a post request
556:28 - now in netflix
556:30 - we need to go to our site again we're
556:31 - looking for domain settings
556:34 - more specifically build and deploy
556:37 - keep on scrolling keep on scrolling and
556:39 - notice we have this build hooks now we
556:42 - add build hook here and we just need to
556:44 - come up with a name here i could say
556:48 - contentful
556:49 - contentful recipes
556:52 - we save it
556:54 - and then we want to copy and paste this
556:56 - value so we copy this one so this is
556:59 - going to be the url
557:02 - where
557:02 - netflie wants us to send a post request
557:06 - and then if we go to contentful and more
557:10 - specifically settings and then the
557:13 - webhooks we can simply add that value i
557:16 - want to add a webhook
557:18 - now for the name here of course we're
557:21 - dealing with contentful now some names
557:24 - don't need to match is just something
557:26 - that makes sense to the contentful and
557:29 - then we copy and paste the url this is
557:31 - where we need to paste and here i'll say
557:34 - network recipes just to showcase that
557:36 - those names do not need to match so we
557:39 - save it here and what's gonna happen
557:42 - every time i'll make some change to my
557:45 - project again nettlefly will restart
557:49 - the build for me and i think the easiest
557:53 - way for me to showcase that
557:55 - is by removing a item so i think i'm
557:58 - going to go with this one i'll say on
558:00 - publish and notice how we cannot
558:02 - directly delete it we first need to
558:05 - unpublish then click it one more time
558:07 - and then delete it and i can right away
558:11 - see that something is happening if i
558:12 - take a look at my web hooks because i
558:15 - have right now the successful calls
558:18 - and if you click on it notice there were
558:21 - some http request okay
558:24 - that's good and then if i go back to my
558:27 - notify application
558:28 - and more specifically again i'm looking
558:30 - for deploys
558:32 - notice i have another
558:34 - deploy triggered by the hook
558:37 - now of course if you want to be more
558:40 - specific
558:41 - when you will send those post requests
558:45 - then you need to do that when you're
558:47 - setting up the webhook because notice by
558:50 - default it is triggered for all events
558:52 - but just keep in mind that in some cases
558:55 - it might get annoying
558:57 - where you have data for multiple
558:59 - projects and then every time you change
559:02 - one data then you're rebuilding all your
559:05 - projects so we're not going to cover
559:07 - that but
559:08 - just keep in mind that you do have the
559:10 - option of only triggering that
559:13 - if there is a specific event and now of
559:16 - course i want to go back and once the
559:18 - build process is complete let me just
559:20 - navigate to my project i can clear