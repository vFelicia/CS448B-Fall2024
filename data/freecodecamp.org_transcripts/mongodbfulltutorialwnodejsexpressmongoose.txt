00:00 - hello and welcome to our bongo db
00:02 - tutorial
00:04 - what we're going to build in this
00:05 - tutorial is a very simple node express
00:07 - application deployed on turbo using the
00:10 -  database of course and it's going
00:12 - to have two models it's going to have a
00:14 - profile and a team so it's gonna
00:16 - simulate sort of like a
00:17 - like a project for like a
00:19 - team like some sort of sport
00:22 - or a recreational league something like
00:23 - that
00:24 - we're gonna use a rest api to interface
00:26 - with the data so we're gonna set up a
00:28 - basic rest api for all the querying and
00:31 - inserting data and things of that sort
00:35 - we're obviously going to focus on the
00:37 - mongodb
00:39 - in terms of topics we're going to use
00:40 - the mongoose orm which is uh definitely
00:43 - the most popular orm for the javascript
00:46 - community
00:47 - for mongodb
00:49 - and we're going to cover all the crud
00:51 - operations
00:52 - for using and mongoose so crowd is
00:56 - create
00:57 - read update and delete
00:59 - and we will cover all four of those
01:02 - in this tutorial again using the rest
01:04 - api
01:07 - this is a beginner tutorial but it's not
01:09 - for complete beginners you should have a
01:11 - basic not working knowledge of html css
01:14 - and javascript
01:16 - as well as how to set up a node express
01:17 - project the the basics of node express
01:19 - should be familiar to you you don't have
01:22 - to be an expert again this is a beginner
01:23 - project
01:25 - but you should know how to set up a
01:26 - nodexpress project
01:28 - install npm modules etc
01:31 - know how to use uh the static directory
01:33 - as well as
01:35 - templating engines things like that
01:37 - you will need a turbo account so that we
01:39 - can deploy our projects so that is free
01:41 - and you're we're also going to use the
01:43 - mlab service for our hosting
01:47 - so you'll need an account on mlab which
01:49 - is also free and you can sign up at
01:51 - mlab.com
01:53 - so make sure you have all that ready to
01:54 - go
01:55 - and then we can go ahead and dive in so
01:57 - in this video we're going to
01:59 - get our tools set up
02:03 - so first thing you want to be sure about
02:04 - is you want to be sure that you have
02:06 - node and npm installed on your machine
02:10 - so head over to nodejs.org if you don't
02:12 - and make sure you install the
02:14 - the lts version right here
02:17 - and you should be all set to go with
02:18 - node and
02:20 - npm
02:21 - if you want to if you want to check
02:22 - beforehand you can do node dash fee
02:25 - and you can see i'm running 8.11
02:28 - and then you can do npm dash v
02:30 - to see what version of npm
02:33 - you are running if neither of these
02:35 - return values for you just go ahead and
02:37 - install the node
02:39 - runtime on your computer and you should
02:41 - be good to go
02:42 - next we're going to need to install
02:43 -  itself which i'm going to use uh
02:46 - homebrew to do that so brew sh head over
02:50 - to here
02:51 - and install home brew if you don't
02:53 - already have it
02:55 - you can just copy and paste this into
02:56 - your terminal
02:57 - and you should have that will install
02:59 - homebrew homebrew is a package manager
03:01 - for your machine it installs well
03:03 - installs and updates packages so
03:06 - that's what it does and
03:07 - we're going to use that for installing
03:10 - so
03:12 - if you do not have manga well let's
03:14 - check if you have so one way you
03:15 - can do that is by doing dash dash
03:18 - version
03:19 - and here i'm running 4.0.1
03:23 - so
03:24 - if you do not get a return value from
03:27 - this command that means you need to
03:28 - install manga so one way you can do that
03:31 - is brew
03:32 - brew install db
03:35 - like so
03:36 - and that will install the
03:39 - database on your local machine
03:42 - that normally takes a takes a couple
03:44 - minutes so just be patient with that and
03:46 - follow the commands
03:47 - whenever you get prompted with further
03:49 - instructions
03:52 - next we will need the turbo cli
03:55 - so make sure you
03:57 - have the turbo cli installed you can
03:59 - check by running turbo version
04:02 - and make sure you have a version number
04:04 - like this or higher
04:05 - so if you have a previous version then
04:08 - this
04:09 - uh that means you need to update and
04:11 - that's very easy you just do sudo and
04:14 - pmi dash g and then turbo cli
04:18 - and this will install the turbo cli on
04:20 - your machine that'll give you
04:22 - the ability to deploy your projects onto
04:25 - the turbo environment staging
04:27 - environment which is also free
04:29 - so make sure you have that set to go
04:31 - and once you have all that we should be
04:33 - all set
04:35 - so we should be ready to start with our
04:36 - project
04:41 - and let's go ahead and get started with
04:43 - our project
04:44 - so
04:45 - first things first you got to make sure
04:47 - you have a
04:48 - an account on turbo360.co so head over
04:51 - here so that we can go ahead and set up
04:54 - our account so that we can
04:56 - deploy to our staging server this is
04:58 - free so don't worry about that
05:00 - so once you have that open up your
05:02 - terminal
05:04 - and cd
05:06 - change directory to your desktop
05:10 - like so or wherever you prefer to do
05:12 - your work i'm going to do it in the
05:13 - desktop
05:14 - and let's create a new turbo project
05:17 - so let's call it proj
05:20 - and this creates a node express project
05:22 - a very basic node express project so i'm
05:24 - going to open this up in the text editor
05:28 - i'm using sublime
05:30 - and here you will see the app.js where
05:33 - the project is set up
05:35 - and
05:36 - we have our standard you know our routes
05:38 - our views in our public directory uh the
05:42 - views are for your templates we're using
05:43 - our the mustache templating engine
05:46 - routes we have two routes we have an api
05:48 - route and an index route these are just
05:49 - scaffolded by the the scaffold right out
05:52 - of the box we can change these as needed
05:55 - obviously and public is for your static
05:57 - assets javascript images and css
06:00 - so
06:02 - that is all set to go now if you look at
06:04 - the
06:05 - well let's head over to our terminal and
06:07 - cd into the proj now given that
06:10 - this is a node express
06:12 - project
06:13 - we have to install our dependencies as
06:15 - defined in the package.json these are
06:17 - not yet installed so make sure you head
06:19 - over to your root directory and do npm
06:22 - install
06:25 - in order to install those packages and
06:28 - that usually takes about a minute or so
06:30 - so while that's going let's head over to
06:32 - our app.js where our project is
06:33 - basically set up and let's step through
06:36 - this to figure out our configuration
06:39 - so if you look at line four
06:41 - you'll see that this is where the app is
06:43 - initialized and this is an express app
06:46 - it's called vertex here because that's
06:47 - the
06:48 - vertex is the is an express application
06:50 - basically configured modified uh for the
06:53 - turbo environment so it's just an
06:55 - express app with a few minor
06:57 - modifications
06:58 - so here is the instantiation but if you
07:00 - look down here on line 24 you'll see
07:03 - another instantiation
07:04 - which takes a config object
07:07 - which is defined on line 11.
07:09 - and inside this config object is where
07:11 - we set up our
07:13 - some configuration options view static
07:15 - directory and most importantly db on
07:17 - line 14
07:19 - so what we want to do is we want to use
07:20 - this instantiation instead
07:23 - so
07:23 - let's get rid of line 4 just remove it
07:28 - and then
07:29 - uncomment
07:31 - this right here
07:33 - and
07:34 - like so
07:37 - actually we can just get rid of this
07:39 - whole thing
07:40 - so now we're going to use the config
07:42 - object to configure our project
07:45 - and the most important line right now is
07:47 - this one right here line 8
07:49 - where we define our database url
07:52 - so we're going to comment that out and
07:54 - replace it with our own database url
07:58 - which for now will be an empty string
08:00 - so what this is going to be is a
08:02 - reference to our local server so
08:05 - what we want to do
08:07 - is
08:09 - db
08:10 - colon slash slash local
08:13 - host
08:15 - slash
08:17 - proj
08:18 - and this last
08:21 - term right here
08:22 - will be the name of our database
08:25 - so this is the pattern for the default
08:27 - pattern for
08:28 - local
08:30 - urls
08:31 - so and again the last one here
08:34 - is the name of our database which we can
08:37 - name it whatever we want
08:39 - so here is how we configure our project
08:42 - to run
08:44 - with a local server
08:46 - so what we want to do now
08:48 - is test that so we can do
08:53 - turbo
08:54 - dev
08:55 - server
09:02 - and we will see this message here
09:04 - db connection failed
09:07 - which is this message right here the on
09:09 - error callback that's because we're not
09:11 - running a local database so we want to
09:16 - stop the web server
09:18 - and then do command t to open another
09:20 - tab
09:21 - and then we want to do
09:24 - d like that and this will run the local
09:26 -  server
09:29 - and all these lines will pop up but most
09:32 - importantly is this last line right here
09:35 - waiting for connections on port
09:38 - 27017 this is the default port number
09:41 - for local instances
09:44 - so now we're running a server
09:46 - locally on our machine we can head back
09:49 - to our web server
09:51 - and run the dev server again but before
09:53 - we do
09:54 - i'm going to include an on success
09:58 - callback
10:00 - so that we can get a confirmation
10:02 - message
10:09 - db
10:11 - connected
10:15 - in order to confirm that the database
10:17 - was successfully connected to our web
10:19 - project
10:20 - so let's go ahead and check that out so
10:22 - we can do turbo dev server again
10:30 - and there we go
10:31 - the database has successfully connected
10:33 - and our project is running locally on
10:36 - localhost
10:37 - 3000 so we can head over to localhost
10:40 - 3000 in our browser
10:44 - and we can see our project running
10:47 - locally
10:48 - this is the how your project should look
10:50 - uh while running the database so this is
10:53 - now database connected to your local
10:55 -  instance
10:56 - so everything is ready to go
11:02 - we're going to create our models
11:04 - for our project to work with which will
11:07 - be profile and team
11:09 - and that's it so let's go ahead and get
11:11 - started
11:12 - let's go ahead and head back to our
11:15 - terminal and run the server
11:18 - so in a separate tab i'm running the
11:19 - local server
11:21 - and then in the web server i'm going to
11:24 - run turbo
11:25 - dev
11:26 - server
11:31 - and then head over to localhost 3000
11:36 - to make sure everything still works
11:37 - which it does
11:38 - so everything is still in working order
11:40 - so i'm going to turn off the web server
11:43 - make sure you're in the root directory
11:45 - and we're going to create a new folder
11:47 - called models which is where we're going
11:49 - to store our models models for profile
11:53 - and team which will define the schemas
11:55 - for each so we want to head over to that
11:58 - directory and create
12:00 - a profile js
12:03 - and we may as well do the team one right
12:04 - now as well
12:07 - and then head back to the root and let's
12:10 - go back to our models directory and open
12:13 - up the profile.js
12:15 - and here is where we will define the
12:17 - schema the attributes which
12:20 - comprise a profile in our project within
12:22 - the context of our project
12:24 - so we're going to need the mongoose
12:27 - orm so let's go ahead and import that
12:31 - and then let's go ahead and create the
12:33 - profile schema
12:35 - which is a new mongoose schema object
12:39 - now make sure you insert the json
12:41 - argument here
12:44 - and then let's go ahead and export it
12:48 - module exports
12:51 - and this is a mongoose model
12:54 - which we will call profile which takes
12:56 - the profile schema that we're about to
12:59 - define
13:00 - so in here is where all the action takes
13:03 - place here is where we define the actual
13:06 - attributes
13:07 - which comprises a profile so first name
13:10 - last name email password things like
13:11 - that all that goes in here so let's go
13:14 - ahead and get that process started so we
13:16 - want to start with first name
13:20 - and these all take json arguments or
13:23 - these are all json values excuse me
13:26 - last name
13:29 - age
13:32 - team
13:34 - and position
13:38 - okay great so these are all empty json
13:41 - values but obviously they shouldn't stay
13:43 - empty so
13:45 - these all these attributes are going to
13:48 - be strings except for age age is going
13:51 - to be a number so we want to define that
13:54 - in these json arguments we inside these
13:56 - json values
13:58 - we define we determine the data type of
14:02 - the respective attribute so all of these
14:04 - are going to be string
14:10 - except for the age which is going to be
14:12 - a number
14:14 - and then technically we can stop here
14:16 - and this is a complete schema but we can
14:18 - actually go we want to take advantage of
14:20 - a few more options
14:22 - we want to assign default values to all
14:25 - of these
14:28 - and in the case of all the strings the
14:30 - default value will be empty string
14:33 - in the case of the number it will be
14:35 - zero
14:36 - so the default value basically gives
14:38 - these attributes
14:40 - an automatic value
14:42 - if the user doesn't input one
14:45 - during the process of creating uh the
14:48 - profile
14:49 - so
14:50 - when there's data being sent to our uh
14:53 - our server
14:54 - if the first name attribute is undefined
14:58 - the mongoose schema will insert an empty
15:01 - string on our behalf which is a nice
15:04 - tool so
15:05 - so this is one extra
15:08 - tool we can use that provided to us by
15:10 - mongoose to make this uh our data more
15:14 - consistent in the database
15:16 - so another value another tool we want to
15:18 - use is called
15:20 - trim and this is a boolean which we will
15:22 - set to true
15:24 - so what this does is that it removes a
15:27 - trailing white space so for example if
15:29 - we have a
15:30 - user named bob like so
15:33 - bob
15:34 - during registration bob may have done
15:37 - something like this
15:38 - where he put an empty space in at the
15:41 - trailing edge by mistake
15:44 - in all likelihood this is not on purpose
15:46 - so we want to trim those trailing and as
15:49 - well as preceding white spaces
15:53 - so that this doesn't mess up our
15:54 - database integrity
15:56 - so we definitely want to uh
15:58 - take advantage of things like that so we
16:00 - want to trim
16:03 - the last name as well
16:05 - team
16:06 - and the position
16:11 - and there are a series of other options
16:12 - we can include
16:14 - which we won't get to for now just just
16:16 - understand that
16:18 - the mong use orm provides us a series of
16:20 - tools like this which makes the data
16:22 - more consistent within our
16:25 - database
16:27 - so that it's it's across all of our
16:29 - records there's more consistency
16:32 - within the attributes which is very very
16:34 - very very useful
16:36 - so
16:37 - now that we have our profile
16:39 - set up
16:41 - schema set up the question is how can we
16:44 - query those profiles how can we
16:46 - use this to
16:48 - to fetch the profiles from our back end
16:51 - so what we're going to do is we're going
16:53 - to use one of the provided routes from
16:56 - the scaffold specifically the api route
16:59 - the api route
17:02 - is provided to us automatically from the
17:04 - scaffold
17:05 - we're not going to use what's in here so
17:07 - let's get rid of this
17:11 - and we're going to create our own routes
17:12 - instead
17:14 - so
17:15 - what we want to do is create a get
17:19 - handler
17:21 - which takes a string argument and we're
17:23 - going to call it profile
17:25 - and this get handler will fetch all the
17:28 - profiles currently in our database
17:31 - so this takes a rec
17:33 - request and a response object
17:36 - and for now we're just going to return a
17:38 - json response
17:41 - with a hard-coded
17:43 - output
17:52 - sometimes these are called endpoints
17:54 - instead so we'll just call this endpoint
17:56 - so right now that's all it's going to
17:57 - return
17:59 - right so what we want to do
18:00 - is we want to test that endpoint by
18:03 - heading back to our terminal
18:06 - running the dev
18:08 - server
18:15 - head over to localhost 3000.
18:18 - now if you look at the app.js you'll see
18:20 - that the routes are connected on the
18:21 - bottom
18:22 - and you'll see that the api route is
18:24 - connected in the path
18:26 - with the path slash api
18:29 - so if we do slash api
18:31 - and then
18:32 - slash
18:33 - profile
18:35 - that will invoke this endpoint so we do
18:37 - slash
18:38 - api
18:40 - profile and here we have
18:42 - the endpoint
18:44 - we just wrote a few minutes ago
18:46 - so that worked so now what that means is
18:49 - within this endpoint we can query
18:52 - the profiles
18:54 - using this schema
18:55 - so let's go ahead and do that so we do
18:57 - co we have to import that of course
19:08 - okay so now here we have our profile
19:10 - model which is a mongoose
19:13 - object
19:14 - so we want to
19:17 - run the find query
19:20 - which returns a promise
19:25 - the promise success block returns
19:29 - the profiles from the database
19:31 - so we can get rid of this now
19:35 - and this right here is our first
19:38 - mongoose query this is going to query
19:40 - every profile currently in our
19:43 - database our backend and return them in
19:45 - this success block right here so we can
19:47 - do
19:48 - res.json
19:50 - and then confirmation
19:52 - success
19:56 - data profiles
20:00 - and that will return
20:02 - the profiles in our
20:04 - browser just like it did over here
20:07 - and before we finish that though let's
20:10 - handle the error scenario so this is the
20:12 - catch block which is the error case so
20:14 - we want to
20:16 - return an error message
20:18 - here obviously the confirmation is not
20:21 - success it's fail
20:23 - and then we should return a message
20:26 - from the error object which should
20:28 - indicate what went wrong
20:30 - so
20:31 - this query right here is for every
20:33 - profile in our database our
20:36 - database so now if we rerun this this
20:39 - request we should see
20:40 - an empty array because there are no
20:43 - profiles in our database
20:45 - so
20:47 - that's that's the expected outcome
20:49 - because right now we don't have any
20:50 - profiles
20:51 - so
20:52 - here what we've done is we've set up
20:54 - a very simple query for a schema that
20:59 - currently uh is defined in the models as
21:02 - per this set of attributes right here
21:04 - and then we created we ran a request
21:07 - against that schema
21:09 - but we don't have any data in the
21:11 - backend so right now we're just getting
21:12 - empty results at so so far so good but
21:15 - obviously we want to have some data to
21:17 - work with next we're going to set up our
21:18 - database with some initial data
21:21 - what's often called seed data
21:25 - using some static json objects and then
21:27 - we will insert those records into our
21:29 - database so that when we run this query
21:32 - we have some stuff to work with
21:38 - and my terminal is right here i'm going
21:40 - to turn off
21:42 - everything that's running so we can
21:43 - start from scratch
21:44 - so
21:45 - first things first let's run the
21:48 - server locally so by doing mongod
21:51 - and then
21:52 - head over to your web server and do
21:54 - turbo dev server
21:59 - and then make sure that everything still
22:01 - works
22:04 - so here is the api slash profile route
22:08 - that we created specifically to fetch
22:10 - profiles and again there are no profiles
22:13 - so let's go ahead and turn off our web
22:15 - server
22:16 - and let's create
22:18 - a json file which will we can use to
22:22 - insert some initial data into our
22:24 - database so right now we're doing what's
22:26 - called we're using what's called seed
22:28 - data we're going to seed the database
22:30 - with some initial data so that we have
22:31 - some stuff to work with right away
22:33 -  is a json based
22:36 - document storage database so what that
22:38 - means is if we just create some json
22:40 - records json objects we can insert them
22:43 - directly into our database using
22:45 - the cli
22:46 - which is exactly what we're going to do
22:48 - so
22:49 - first things first we've got to create
22:50 - the json files right the json object so
22:53 - let's create a directory for this
22:57 - uh let's call it initial for initial
23:00 - data
23:02 - let's cd into the initial
23:04 - folder and let's create a profiles.json
23:10 - file
23:12 - head back to your root directory
23:14 - and then actually no you want let's stay
23:16 - in the initial
23:19 - okay and then
23:21 - open this up and let's create our
23:24 - profiles so this
23:26 - this set of profiles we're about to
23:28 - create should be consistent with the
23:30 - profile schema that we defined in the
23:32 - previous video so first name last name h
23:35 - team position
23:37 - so we have
23:40 - first name
23:44 - last
23:47 - last name
23:53 - age
23:58 - position
24:03 - and team
24:04 - i believe we have team on there yes
24:12 - and notice how all these are string
24:14 - values except for the age because that
24:16 - that is defined as a number
24:18 - in the schema so we have to be
24:20 - consistent with that over here
24:22 - so now that we have our first
24:24 - profile we can just add a few more
24:55 - all right and uh
24:57 - let's see actually i'm going to add one
25:00 - more
25:16 - okay so here i have four profiles to
25:18 - start with
25:19 - all json objects fitting the schema as
25:22 - defined in our models directory
25:24 - and so we can insert these records into
25:26 - our database right away
25:28 - so that we have some data to work with
25:30 - so let's go ahead and do that
25:31 - so
25:32 - the way we want to do that is through
25:34 - the the shell
25:36 - so we can directly the cli i
25:39 - should say we can directly interface
25:40 - with our database using the cli so
25:43 - one way we can do that is by doing
25:47 - like this just directly connect to our
25:50 -  database make sure your
25:52 - instance is running otherwise this won't
25:53 - work now we can do show dbs
25:56 - right and we can see
25:58 - what our current what what the current
26:00 - databases are in our database
26:02 - so we're going to create a new database
26:04 - uh let's do control c
26:08 - and we're going to insert these records
26:10 - into that database as a collection
26:13 - so a collection is a basically it's what
26:15 - it sounds like it's a collection of
26:16 - records uh all under one schema so what
26:20 - we want to do is we're going to use a
26:22 - tool called
26:24 - import
26:26 - and it takes a few arguments the first
26:28 - one is db and that's going to be the
26:30 - name of the database if you recall
26:33 - we set the name in the app.js called
26:35 -  proj
26:37 - so we want to say db
26:40 - is praj
26:41 - so that we're going to interface with
26:43 - the same database and then collection
26:46 - is going to be called profiles which is
26:48 - basically the pluralized version of our
26:50 - schema the profile schema profiles is
26:53 - plural
26:54 - and then we can we can pass in a file
26:58 - argument
26:59 - and that's going to be the json file
27:01 - profiles json
27:06 - so
27:07 - just so you understand what's going on
27:08 - here
27:11 - the import is going to create this
27:13 - database proj because right now it
27:15 - doesn't exist
27:16 - and then afterwards it's going to create
27:18 - a
27:19 - profiles collection
27:21 - which will use the profiles json
27:25 - file
27:26 - for the initial set of data so once i
27:28 - press enter here it says imported four
27:31 - documents which are
27:33 - these four documents right here
27:36 - so it created those four records in our
27:39 - database
27:40 - so
27:41 - we can
27:42 - head back to our root directory and run
27:45 - turbo dev
27:46 - server
27:52 - and now we can
27:54 - test this endpoint again and now we have
27:57 - our
27:59 - four
28:00 - football players for um quarterbacks or
28:04 - three quarterbacks and one wide receiver
28:07 - so
28:07 - it worked everything worked
28:09 - one thing that's very worth pointing out
28:11 - is that there's this extra field called
28:13 - underscore id which we did not define
28:17 - in here you will not see an underscore
28:19 - id in these initial record set that's
28:22 - because assigns that for us
28:24 - automatically but does that on our
28:26 - behalf and these are unique identifiers
28:29 - for each record in the database so this
28:33 - is a unique number that
28:36 - ties to this entry in particular it's
28:38 - kind of like a social security number it
28:39 - only it only relates to this one record
28:42 - and manga does that on our behalf
28:44 - so
28:45 - now that we have some data to work with
28:47 - we can start running
28:49 - queries
28:51 - in our api route let's go ahead and find
28:55 - that
28:57 - right here
28:58 - in our api route
29:00 - uh for specific profiles based on
29:03 - things like
29:05 - you know position
29:05 - [Music]
29:07 - position team things like that we're
29:09 - going to start running those kinds of
29:10 - queries basically adding filters to our
29:12 - query so we can get specific profiles
29:14 - based on
29:15 - uh parameters that we the project may
29:18 - need at a certain point of time
29:19 - at this juncture of the video
29:22 - a good exercise would be to do the same
29:24 - thing for teams you may remember you may
29:27 - recall we created a teams model which is
29:30 - empty so we want to create a similar
29:33 - uh
29:33 - setup so that would be a good pro a good
29:36 - assignment to work on
29:38 - the team should be the attribute should
29:40 - be something like team name
29:42 - uh city
29:44 - um
29:45 - uh conference so this is american
29:47 - football we're talking about so you know
29:49 - team like the new england patriots uh is
29:52 - the the city is boston the name is
29:56 - patriots the conference is uh afc
29:59 - american football conference and that
30:01 - should be enough for the team schema
30:04 - so
30:05 - um
30:06 - so yeah that's it let's try to get that
30:08 - put together
30:13 - here in the terminal i'm going to run
30:15 - the
30:17 - local server
30:20 - and the web server
30:27 - okay and then if i run a query for all
30:29 - the profiles
30:31 - we see everything that we added to our
30:33 - database so now what we want to do is is
30:36 - query the same data
30:38 - with specific filters
30:40 - so that is done
30:42 - inside here the api route
30:44 - inside this this find method from
30:48 - mongoose inside here we can add a json
30:50 - object
30:51 - that specifies the filters for example
30:54 - if i say
30:55 - i only want to query for
30:58 - profiles whose position is
31:00 - qb
31:01 - i'll do it like that
31:03 - and then if i rerun the query
31:06 - everyone but odell beckham should be
31:08 - returned see his position is not qb
31:11 - so here we have three players
31:14 - all of whom are cubies
31:17 - and then we can do the same thing
31:19 - for a wide receiver
31:22 - and now we get only odell beckham
31:24 - who is of course a wide receiver so
31:27 - the filtering of your queries in
31:29 - mongoose is pretty straightforward we
31:31 - want to make it more dynamic of course
31:33 - by having the filter come in from the
31:35 - actual user so what we want is something
31:37 - like this
31:41 - to return only the qb's so right here
31:44 - this is the request query we can parse
31:47 - that out inside the api route
31:50 - like so
31:54 - so that this rec object gives us the
31:56 - query which is really
31:58 - this key value pair in json form so it's
32:01 - ready in json form for us which is nice
32:09 - so now we can just insert the query
32:10 - object into the
32:12 - the find method from mongoose so if i do
32:15 - this now it'll give us all the qb's
32:20 - if i do wide receiver it gives us only
32:23 - the
32:23 - wide receiver we have in our database
32:25 - which is one player odell beckham
32:28 - if i want to query by team i can do team
32:33 - like that and here i have the two
32:35 - players on the giants
32:37 - of course i can do the other teams as
32:39 - well
32:43 - oops
32:45 - so here is the one player on the
32:47 - patriots and if i query a team that's
32:48 - not that doesn't have any players in our
32:50 - database
32:52 - um
32:53 - of course we get an empty array which is
32:55 - what we expect
32:57 - so that's it it's good the query filters
33:00 - work so far
33:01 - we can also query by the numerical value
33:04 - so here we have three players four
33:06 - players excuse me
33:07 - ages ranging from 24 to 41 so let's say
33:10 - we want to query for profiles who are
33:13 - only older than 41
33:15 - or we can do exactly 41.
33:22 - like so so this gives us the one player
33:23 - who's 41 but if i do 40 then i get
33:26 - nobody
33:27 - so maybe what i want to do instead is
33:30 - older than 40
33:31 - right so
33:33 - the way you would do that
33:35 - is
33:36 - inside here
33:38 - the way it would look is you query by
33:40 - age
33:41 - and then you pass in another json object
33:44 - and then inside here you have a special
33:47 - mongoose
33:49 - key
33:50 - with the dollar sign that's denoted by
33:51 - this dollar sign that means it's a
33:53 - special mongoose key and the gt stands
33:55 - for greater than and then you can do 40.
33:58 - right so here now we should only get
34:02 - tom brady
34:03 - who is older than 40. and if i do 30
34:06 - then i get
34:08 - three players
34:11 - aaron rodgers eli manning and tom brady
34:14 - and then i can also add in a less than
34:16 - filter so query dollar sign lt for less
34:20 - than
34:21 - and then 40
34:22 - this will give us the profiles ages
34:24 - between 30 and 40. and so that now we
34:27 - should only get these two players
34:29 - and that gives us aaron rodgers and eli
34:31 - manning
34:33 - and so that works and so
34:35 - um
34:36 - it's up to you how you want to structure
34:38 - this from the actual query
34:40 - itself the query uh request query itself
34:43 - but for now i'm just going to use the um
34:45 - [Music]
34:47 - uh the greater than exclusively so one
34:49 - way we can do that is if we see the age
34:52 - parameter at all
34:55 - if
35:06 - so what we're going to do
35:08 - is we're going to create a filters
35:10 - object
35:18 - and we are going to
35:24 - let's see here if
35:26 - the
35:27 - query
35:29 - contains the age key so if this age key
35:33 - is is present inside the request query
35:37 - what we want to do
35:38 - is take the filters
35:41 - and set the age
35:45 - as greater than
35:47 - the query dot age value
35:58 - and let's see here the best way to do
36:01 - this would be
36:06 - let's set the filters to the query
36:09 - to begin with
36:11 - like that
36:16 - and then we can pass in the filters
36:19 - like so
36:21 - so by default
36:23 - if the
36:24 - query the request query has the age key
36:28 - we're querying for every profile older
36:30 - than the specified value so right here
36:35 - line 12
36:38 - we want rec.query excuse me
36:46 - 14
36:52 - okay and that should take care of that
36:56 - so now we get tom brady here because
36:57 - he's the only player older than 40.
37:00 - if i enter 30 i get everyone older than
37:04 - 30.
37:05 - so forth and so on if i enter 20 i get
37:08 - everybody
37:09 - so here i'm just adding a
37:12 - default greater than
37:15 - if there's an ah key passed in
37:19 - that's only if there's an h key passed
37:21 - in if there's no h key passed in the
37:22 - filters will be automatically inserted
37:24 - inserted into the request basically as
37:27 - is so i can do team
37:29 - and giants
37:30 - and we still get these two or we can do
37:33 - position
37:35 - and qb and we only get the qb's
37:40 - we can do wide receiver so forth and so
37:41 - on
37:45 - we're going to query for a specific
37:47 - record so that we don't have to filter
37:50 - add filters based on an attribute every
37:52 - single time we can query for a specific
37:55 - entry based on the unique identifier so
37:58 - let's go ahead and get that started so
38:00 - i'm going to run the local server
38:04 - and then the
38:06 - web server
38:12 - and then let's go ahead and set up
38:14 - another endpoint for querying a specific
38:18 - entity a specific profile i should say
38:20 - so let's go ahead and set up in a route
38:23 - a route for that it's going to be
38:24 - another get
38:26 - and the path is going to also be profile
38:27 - but this time i'm going to add a request
38:30 - parameter called id
38:32 - and that's going to be a
38:34 - variable passed into the actual url
38:37 - and then
38:39 - the callback for now let's just have it
38:41 - hard coded
38:50 - and this id param can be parsed out
38:58 - as a param
39:00 - like that
39:02 - and then we can just
39:04 - return that in the json response for now
39:06 - just to make sure everything is uh
39:08 - properly set up so let's test the
39:10 - endpoint all we have to do here
39:13 - is
39:16 - do another slash and then
39:18 - some random text and here you'll see
39:21 - that the data is returned to us
39:23 - pretty much as is
39:25 - which is what we're specifying right
39:26 - here good so it's connected so if you
39:29 - look at the profiles you'll see that
39:30 - they all have an id
39:32 - string that's randomly generated by
39:36 - and assigned to the entity
39:37 - by so we can query specifically by
39:40 - using that id so what we want to do
39:43 - is
39:44 - grab the profile and this time it's find
39:47 - by id
39:48 - and we pass in the id
39:50 - and that returns a promise again
39:53 - same as before
40:05 - and here
40:09 - is the success callback so we can do
40:11 - confirmation success here
40:20 - and in the error callback we want to
40:22 - handle the error appropriately
40:25 - by returning a failure confirmation with
40:27 - the error message
40:29 - so now what we can do is we can grab
40:32 - so make sure you have everything here
40:33 - like this
40:34 - we can grab the profile id
40:37 - like so
40:38 - and in this case we have tom brady and
40:41 - just append that
40:42 - to this route and now we get
40:45 - specifically the request result for tom
40:48 - brady and of course we can test all the
40:50 - profiles that way so
40:52 - if we do aaron rodgers
40:54 - so forth and so on
40:57 - we can confirm that they all work
40:59 - and then what we want to do is make sure
41:01 - that it works in the failure scenario as
41:03 - well
41:04 - so for example if i do
41:06 - if i enter an id that doesn't exist it
41:09 - should return an error message
41:11 - um now this error message is a little
41:13 - bit hard to decipher if you're not not a
41:16 - programmer or not very familiar with uh
41:18 - sort of the mongoose error styles so
41:21 - instead of returning just the error
41:22 - message we should replace that with
41:25 - profile
41:27 - id
41:29 - not found a much more human readable
41:31 - message so that it's very quick and easy
41:34 - to see
41:35 - uh what exactly what went wrong
41:37 - so
41:38 - i think that would be a better way to
41:39 - handle that
41:42 - so that when you when you come across
41:44 - this error it's immediately obvious what
41:46 - what went wrong
41:51 - i was just testing something there don't
41:53 - worry about that
41:55 - so that it's it's a lot
41:57 - faster to determine what the proper
42:00 - adjustments are and that's it and this
42:03 - is one this is a way to
42:05 - query a specific record by the
42:08 - identifier which is a much more
42:09 - efficient type of query than using this
42:12 - this kind
42:14 - you don't want to use this general query
42:15 - every single time
42:17 - because it's not the most efficient
42:20 - if you can query by a specific key an id
42:23 - that's much faster so you want to do
42:25 - this one whenever it's possible or
42:28 - whenever
42:28 - it's appropriate you want to use the
42:30 - identifier to query for a specific
42:33 - record
42:37 - we're going to
42:38 - create the ability to add records from
42:41 - the web interface rather than
42:43 - from the client side cli
42:46 - excuse me
42:47 - so that users can add profiles when they
42:50 - sign up
42:50 - so
42:51 - that's it let's go ahead and get started
42:53 - so now what we want to do is add the
42:55 - ability to create a profile from the web
42:58 - web interface
43:00 - so
43:01 - what we want to do is go to the api
43:03 - route where we set up our queries
43:06 - and set up another endpoint
43:08 - where a user can create a profile
43:11 - probably through signing up
43:13 - this all this usually happens through a
43:15 - post request rather than a get request
43:17 - so these this is a get request
43:20 - that's a get request
43:22 - but this time we want to set up a post
43:23 - request because adding data is usually
43:26 - happens for a post request
43:28 - especially dealing when dealing with a
43:29 - rest api which is essentially what we're
43:31 - setting up here on a basic level
43:34 - so here we want to set up a post
43:36 - endpoint
43:46 - and then like usual we just want to
43:47 - return a hard-coded
43:49 - confirmation
43:51 - now the data in a post request is
43:55 - in a node express application is
43:56 - returned to us in the rec.body
44:00 - the body attribute of the request
44:02 - so
44:03 - when the post data is submitted to the
44:06 - endpoint
44:07 - here is where the actual data can be
44:09 - retrieved
44:10 - so now the question is how do we set up
44:12 - the post request well that normally
44:14 - happens through a form
44:16 - on the on a web on a website an actual
44:18 - html web page so if we go to the home
44:20 - page of this project localhost 3000
44:25 - here you will see our homepage
44:27 - and this is just regular html css
44:29 - javascript etc
44:31 - and this page in particular is inside
44:33 - the views directory right here
44:36 - index dot mustache and mustache is the
44:39 - templating engine that is installed by
44:40 - default
44:42 - so
44:43 - we can use this to create a form
44:45 - where a new profile can be submitted so
44:48 - let's get rid of all these other all
44:49 - this other content because we don't need
44:51 - it anymore so let's get rid of all this
44:52 - stuff
45:14 - and here
45:17 - inside the last remaining div let's set
45:19 - up a form
45:24 - where we can create
45:26 - inputs for each of the attributes of the
45:29 - profile so we have first name oops this
45:32 - should be the type is text excuse me
45:34 - text text inputs
45:40 - so we have first name last name
45:43 - team position and age
45:52 - now these attributes these name
45:54 - attributes should correlate to the
45:56 - properties in the actual schema so they
45:58 - should match up with what we see here
46:01 - uh and also in terms of casing uppercase
46:04 - lowercase that all has to match up so
46:06 - make sure yours matches up as well and
46:09 - if we take a look at the homepage now we
46:10 - should see this
46:13 - it's going to be hard to know what field
46:15 - corresponds to what so we can use the
46:16 - placeholder
46:18 - attribute for that first name
46:32 - last name
46:35 - team
46:40 - position
46:44 - age
46:45 - so now we have the placeholders makes it
46:47 - easier to remember what goes with what
46:50 - and the final input should be a submit
46:52 - type
46:54 - it doesn't need a name but it could use
46:56 - a value
46:58 - add
46:59 - profile
47:01 - so now we have a button
47:03 - which will send the request
47:05 - now
47:06 - now we have a form here
47:08 - that right now points to nothing so we
47:09 - want to point the data of this form
47:13 - to this endpoint
47:15 - so the way you do that is by adding two
47:17 - attributes in the form itself
47:19 - action and method
47:22 - now the method is post and that this
47:24 - post right here
47:26 - is in relation to that post right there
47:28 - in other words this is a post request
47:31 - and the action is slash api slash
47:34 - profile
47:36 - as specified by this path right here
47:40 - and it's slash api because it's that's
47:42 - the original path right there so slash
47:44 - api
47:45 - slash profile
47:47 - is where this should go this data should
47:49 - be submitted to
47:51 - and if everything is properly set up
47:53 - this is the response we should get
47:54 - basically just it'll just spit the data
47:56 - right back to us in json form
47:59 - so if i load the home page
48:01 - and i add another profile
48:09 - i think it's one word
48:16 - here we have the data basically just
48:19 - returned right back to us in json form
48:22 - thereby confirming that it worked that
48:24 - this endpoint
48:25 - this endpoint right here is successfully
48:27 - receiving the data so now that we've
48:29 - confirmed that
48:31 - we can now
48:33 - create an entry a profile entry in the
48:36 - database using the create command
48:39 - and we can simply take the request body
48:41 - which is the data in json form it's all
48:43 - of this already in json form
48:51 - and run the
48:52 - standard promise sequence
48:59 - now mongoose returns the profile or the
49:01 - object the document that's created it
49:03 - returns it back to us in the completion
49:05 - block the success block so right here
49:08 - we can just return the success
49:10 - confirmation
49:14 - with the profile that was just created
49:17 - and then in here
49:19 - is the error block so we do what we
49:21 - normally do here return a fail message
49:24 - a failure confirmation with the error
49:26 - message
49:27 - so that we can see what went wrong
49:30 - and then
49:33 - we can now get rid of this
49:36 - and if we go back to the home page we
49:38 - can try it again
49:51 - qb
49:54 - and now it's going to return
49:56 - the json again but notice this time
49:58 - there's a version an id and a version
50:00 - that comes from
50:02 - so what that means is the request was
50:03 - successful if i actually take the id
50:07 - and run the id request we get russell
50:09 - wilson again
50:11 - and if i run the general profile request
50:14 - we get all the
50:16 - quarterback all the players including
50:18 - russell wilson the player we just
50:20 - created who is a quarterback so if we do
50:26 - position qb
50:29 - now we get russell wilson as well inside
50:32 - the results set
50:35 - and so forth and so on so
50:37 - so it worked so this is the the proper
50:40 - way to handle inserting data into the
50:43 - database which almost always happens
50:45 - through some sort of form of this sort
50:47 - like like this is a very conventional
50:49 - way of submitting data from a form
50:52 - to a post handler like that and then and
50:56 - then inserting that data into the
50:57 - database this is the proper way of
50:58 - handling that situation
51:00 - so
51:01 - hopefully you got that working
51:03 - at this juncture a good exercise is to
51:06 - continue this process for the teams you
51:08 - may have noticed that we haven't really
51:09 - been doing much work with the teams
51:11 - because this is something i want you to
51:12 - do on your own as you go through this
51:14 - project so you should set up
51:16 - corresponding endpoints for
51:19 - profile and teams
51:21 - and as well as post handlers so that you
51:24 - can create a team
51:25 - through a form on the on the home page
51:28 - in this fashion
51:32 - we're going to set up a simple way to
51:34 - update the data it'll be done through a
51:36 - simple
51:38 - get request which is not the
51:40 - conventional way by the way we're going
51:42 - to take a little bit of a shortcut here
51:43 - just to illustrate the concept as well
51:45 - as the
51:46 - the
51:47 - commands to create an update and then
51:50 - we'll update some of our profiles and
51:52 - that's it so let's get started
51:56 - and so let's say we want to update this
51:58 - right
52:00 - what i'm going to do is set up a an
52:02 - endpoint just for updating
52:04 - so it's going to be right here router
52:07 - this is going to be a get but normally
52:08 - this is a put
52:09 - uh the reason i'm using a get is just to
52:12 - make this process a little bit more
52:13 - convenient
52:14 - but normally this would be done through
52:16 - a put so profile and then update
52:21 - actually this should be over here
52:32 - uh you may be wondering why i placed the
52:35 - handler above this one because this one
52:37 - is a generic has a generic id parameter
52:40 - after the profile path
52:42 - which will be interpreted first
52:45 - and
52:46 - if i put this one beneath it
52:50 - it no request will ever ever actually
52:53 - get to this end point because this one
52:54 - will reach first
52:56 - if that makes any sense
52:58 - however by putting this one above
53:01 - the update command will happen
53:04 - will be interpreted before this one and
53:06 - so we can we can process the requests
53:09 - so let's try sending a
53:12 - hard coded
53:22 - hard-coded response and let's see if
53:24 - that works
53:27 - there we go
53:28 - and if i go back here this still works
53:31 - fine so we are set to go
53:34 - okay so what we want is the
53:37 - query parameters
53:40 - and this
53:41 - should require
53:43 - id
53:44 - and
53:45 - key value pairs
53:47 - for what to update so for example it
53:50 - might be like here's an id number for
53:53 - russell wilson so the request would look
53:55 - like this id
53:57 - equals that
53:58 - so we're specifying which profile
54:00 - specifically we want to update and then
54:03 - let's say we want to update the team
54:04 - let's say he got traded so team
54:06 - equals cardinals
54:08 - and this will update
54:10 - the profile this particular profile
54:13 - the team value and that's it or maybe he
54:16 - um you know he aged one more he got one
54:19 - year older or a change position etc
54:22 - so
54:22 - what we want to do is grab the id
54:32 - and then we want to
54:35 - get the profile and then
54:37 - find by id
54:39 - and update
54:41 - and this
54:42 - will take the profile id
54:45 - argument
54:46 - and then the query
54:48 - and then
54:50 - new equals true this last part is a
54:52 - little bit tricky what's happening here
54:54 - is that
54:55 - by default mongoose will return the
54:58 - the record
55:00 - prior to the update where in reality we
55:02 - normally want the record after the
55:05 - update so by returning by passing in
55:07 - this true boolean that's what we get
55:10 - that's a bit of a sneaky gotcha that you
55:12 - want to keep in mind about mong use
55:14 - and then
55:15 - here we just do what we normally do
55:21 - let's get rid of that
55:23 - and the error
55:26 - is the same as always just return the
55:28 - failure confirmation with a message
55:36 - and then the
55:37 - success
55:44 - return the updated
55:45 - profile
55:47 - so
55:48 - here
55:49 - we are grabbing the profile id from the
55:51 - query
55:52 - and then we are identifying the specific
55:55 - profile based on that
55:57 - whatever else is in the query parameters
55:59 - we pass in
56:02 - here as the updates actually i'm going
56:04 - to do one more thing just to be sure
56:08 - i'm going to remove
56:09 - the id
56:11 - so now all that's left
56:13 - are the parameters that we want to
56:15 - update like the team the position the
56:17 - age things like that
56:19 - so
56:20 - and then we return the new version over
56:23 - here
56:24 - so let's try it
56:26 - so now when i run this request it should
56:28 - say team see cardinals and there it is
56:32 - now if i
56:34 - run the overall request head down to
56:36 - russell wilson it says cardinals
56:39 - uh let's say
56:42 - uh eli manning
56:47 - let's insert his id let's say the age is
56:50 - 38.
56:52 - so at some point i'll turn 38
56:54 - and there it is
56:56 - and then if we go back here you'll see
56:58 - that the age is still 37 if i reload
57:01 - it now should say 38.
57:03 - so this is a standard update using
57:05 - and mongoose again i want to point out
57:08 - that this is normally handled through a
57:09 - put request right here put
57:12 - rather than a get
57:14 - but the reason i set it up as a get is
57:16 - so that i can run it through the browser
57:18 - like this
57:19 - for a convenient way of doing that
57:21 - rather than setting up a whole web front
57:23 - end just for this
57:25 - however just be aware that this is not
57:28 - this area right here is non-restful very
57:31 - important non-restful
57:39 - and normally it should be handled
57:40 - through a put
57:41 - so this is how you handle updates in
57:44 -  and mongoose
57:46 - i recommend you set up the same thing
57:47 - for teams now
57:49 - so that you can update your teams
57:52 - if
57:53 - not really sure what
57:54 - what categories of a team will change
57:56 - sometimes cities teams change cities
57:58 - fairly frequently so maybe that's
58:00 - something that you might want to test
58:02 - and that's it
58:07 - we're going to complete the sequence the
58:08 - crowd sequence by deleting a few records
58:10 - and making sure that that can be handled
58:12 - as well
58:13 - uh like before we're going to set that
58:14 - up through a get request which normally
58:17 - wouldn't be the case
58:19 - but for the sake of convenience i'm
58:20 - going to set it up as a get request so
58:22 - we can we can test it run it through the
58:24 - browser and make sure everything works
58:26 - so
58:27 - let's go ahead and get started here we
58:29 - set up
58:30 - this
58:31 - request right here for updating i'm
58:33 - going to do one more
58:34 - after it has another get
58:38 - profile and this is going to be removed
58:40 - to remove a record a specific record and
58:43 - it's going to be the same idea it's
58:44 - going to take an id
58:46 - and in this case that's all it's going
58:48 - to need because that's enough to
58:49 - identify which record we want to remove
58:52 - right so we want to
58:55 - grab the query object
59:01 - and then we want to do profile
59:04 - find by id and remove that's the
59:08 - mongoose
59:09 - corresponding mongoose query for
59:11 - removing a profile
59:14 - and then this is going to return
59:20 - the usual this is just a promise
59:22 - but this time there is no profile keep
59:23 - in mind because
59:24 - um
59:26 - there uh
59:27 - excuse me the profile has been removed
59:30 - so
59:31 - what we want to do is handle the error
59:33 - like we normally do
59:35 - and then here on the success
59:39 - return a success confirmation
59:42 - and then just return a message saying uh
59:45 - profile
59:48 - query dot id
59:52 - successfully
59:54 - removed
59:57 - that's good enough for now and that will
59:59 - confirm that the removal of this
60:01 - specific record
60:03 - is complete and successful so let's go
60:05 - ahead and test it out so it's profile
60:07 - slash remove and then we have to pass in
60:08 - the
60:10 - id into the query so
60:12 - let's say we want to remove
60:18 - uh aaron rogers so we do slash profile
60:22 - and then don't forget the end point is
60:24 - remove so slash remove and then we pass
60:27 - in an id filter
60:28 - and then we paste in the id
60:31 - and then profile
60:32 - was successfully removed so if i do a
60:35 - general profile request now
60:40 - we should no longer see aaron rodgers
60:42 - and that is that has been completed so
60:45 - obviously we can continue testing
60:47 - but
60:48 - oftentimes what happens during your uh
60:50 - throughout your testing process
60:51 - especially locally is that you end up
60:53 - with all these records that were just
60:55 - inserted for pure testing purposes
60:58 - and have all sorts of inconsistent data
61:01 - patterns and things like that like maybe
61:03 - you initially had the age as a string
61:05 - and then change your mind later
61:07 - making it a number so forth and so on
61:10 - things like that this is very common in
61:11 - a local testing environment so it's not
61:14 - unusual at all
61:15 - for within local testing to want to
61:18 - remove all of the records
61:20 - the whole thing the entire the entire
61:22 - collection would be the way to phrase
61:24 - that so this happens a lot so um
61:27 - what what you want to do here instead of
61:29 - removing everything one at a time
61:30 - because maybe you have instead of four
61:32 - or five you have 50 or 60 so that can be
61:34 - very tedious to remove everything one at
61:36 - a time what you'd rather do everything
61:38 - what you'd rather do instead is remove
61:41 - the entire collection in one command and
61:43 - we can do that through the cli i do this
61:45 - a lot through the cli so
61:47 - if i open a new tab
61:50 - i can connect to the database
61:53 - directly
61:55 - and the name of the database if you ever
61:57 - forget you just go back to the app.js
61:59 - and you just look it up right here in
62:00 - the url
62:02 - and i can just connect directly to the
62:04 - database
62:05 - and so here i am and then i want to do
62:07 - show collections to see what i have and
62:09 - currently have i have profiles
62:12 - and then i can do
62:13 - db
62:16 - profiles and then find
62:18 - and then i can see
62:20 - spell the wrong profiles i can see what
62:23 - profiles i currently have in the back
62:25 - end the database which is obviously the
62:27 - examples we used in the video so far so
62:30 - i can just drop the entire collection
62:32 - very easily by doing instead of find i
62:34 - can do drop like that and it should
62:37 - return true
62:38 - if it was successful so now if i go back
62:41 - to the api and i run this request i get
62:44 - an empty array because now i removed all
62:47 - the profiles in one quick command
62:50 - so that's another way you can do that
62:53 - by interfacing directly with the
62:55 - cli rather than mongoose and then when
62:58 - we're done we can just do exit we're
62:59 - done with that
63:00 - and then now we're back down to zero
63:02 - so
63:03 - uh that's that's another way of quickly
63:05 - removing a whole set of collections
63:08 - which again is very common
63:10 - in a local testing environment because
63:12 - oftentimes you have all these records
63:14 - that were only there for testing and the
63:16 - data is all messed up and things are
63:18 - inconsistent and you just need to sort
63:19 - of wipe your slate clean and start fresh
63:22 - which is what we just did right here
63:24 - so
63:25 - that's it that completes our crud
63:27 - operations for now there's obviously a
63:29 - lot more
63:30 - that you can you can look into
63:32 - using the mongoose documentation i
63:35 - highly recommend
63:39 - you look into the documentation for
63:41 - mongoose
63:44 - well this is the npm page what we really
63:46 - want is the documentation page and it
63:49 - will give you the entire set of apis
63:51 - that you can use in the mogu's orm which
63:55 - extends much further than what i've
63:56 - showed so far but in this series so far
63:59 - we've gone through the basics
64:01 - which is enough to get you started and
64:04 - putting together a very basic
64:06 - application web application
64:11 - so now it's time to deploy to a staging
64:13 - environment and get our database working
64:15 - on an actual database server
64:18 - so we're going to get that set up today
64:20 - and
64:21 - that's it so let's get started you're
64:23 - going to need an account on mlab right
64:26 - here so make sure you have that as well
64:28 - as turbo you should already have that
64:30 - but if you don't go to turbo360.co this
64:32 - is where we're going to deploy our
64:34 - projects
64:35 - and we're going to host our application
64:37 - on here and host our database on here so
64:41 - make sure you have that properly
64:43 - make those make sure you have those
64:44 - accounts properly ready to go
64:46 - so
64:47 - what we want to do next is head over to
64:50 - our project
64:51 - and
64:52 - we're going to make a slight adjustment
64:54 - here so this
64:57 - early on
64:58 - we had commented out this line right
65:00 - here
65:01 - which is using environment variables
65:04 - to establish the database urls
65:07 - so this one right here mongodb uri
65:11 - is your local environment variable for
65:14 - the database local database
65:16 - so really what we want to do is we want
65:17 - to reuse this right here so if we head
65:19 - over to the env file
65:21 - right here is where you will see
65:24 - the environment variables configured for
65:26 - your project
65:28 - so
65:29 - we need to define the mongodb uri
65:35 - and that is going to be our local
65:40 - url what we've been using so far
65:43 - so now if we head over back to app.js
65:45 - instead of using the actual string we
65:47 - want to use the environment variable
65:50 - like so
65:55 - and this is a better way to handle it
65:57 - so
65:59 - what we can do now is test it by
66:02 - running the server
66:08 - and then running the dev server to make
66:10 - sure everything still works as expected
66:17 - and it does so everything is still set
66:19 - to go we can just run one quick query to
66:22 - make sure about that
66:23 - and uh
66:25 - just confirm that everything is still
66:26 - working which it is that's great so
66:28 - we're good to go on that so now what we
66:30 - want to do next
66:31 - is set
66:32 - the
66:33 - production
66:35 - database url
66:37 - and this
66:38 - is the mlab url
66:42 - so we need to establish that first
66:44 - so
66:46 - we head over to mlab
66:48 - and we sign up if you don't have an
66:49 - account i already do so i'm going to log
66:51 - in
66:58 - and we now want to create a new database
67:02 - uh right here so make sure you click on
67:04 - that
67:06 - uh you can choose any of these three i'm
67:08 - going to use amazon because that's my
67:09 - preferred
67:11 - provider i'm going to we want to create
67:13 - the sandbox account because it's free
67:17 - i'm going to use a us east one
67:24 - doesn't really matter but i'm in the
67:26 - east coast so i'm going to use usc one
67:31 - uh database name so
67:34 - praj
67:39 - uh it's good enough turbo approach
67:43 - doesn't really matter but this will help
67:45 - me keep track
67:49 - great and here are some just
67:50 - configuration options etc and then we go
67:53 - ahead and create the database and this
67:55 - is going to create the database for you
67:58 - right here
68:00 - and we can click on that now
68:04 - and we need to create a database user
68:07 - which we can just call admin for now
68:09 - so
68:10 - we the user that we create needs a
68:13 - username and a password so we add a
68:16 - database user we'll call it uh
68:18 - admin
68:19 - and password will just say turbo 360.
68:24 - obviously you can make these whatever
68:26 - you want
68:33 - and in doing so we now have our
68:36 - production url string right here
68:40 - so you copy that
68:46 - and then you head back over to your
68:48 - project
68:51 - and then you enter you paste that in but
68:53 - make sure you have
68:54 - your user and your password so the user
68:58 - well the password is turbo 360
69:00 - and the user
69:02 - is admin
69:04 - and so now we have our production
69:06 - database url right here
69:09 - and that's ready to go
69:12 - so now we can head back to our app.js
69:18 - then really we can just uncomment the
69:21 - original url line and remove this
69:26 - and so what this establishes is that if
69:28 - the environment is the dev environment
69:30 - or the local environment
69:32 - it will use the local database url
69:35 - otherwise it will use the production
69:37 - database url
69:39 - so what's important to understand here
69:41 - is that the turbo environment is right
69:44 - now dev inside the env variables dna
69:47 - file
69:49 - but when you deploy the project to your
69:51 - turbo
69:52 - staging server it will automatically
69:55 - switch to production
69:56 - so you don't have to change this in fact
69:58 - you know you really never should change
69:59 - this
70:00 - so now what we need to do is set it up
70:02 - so that we can deploy our project to
70:04 - turbo so we have our m-lab configuration
70:06 - all set that's done
70:08 - we're ready to go with that so now what
70:10 - you want to do is head over to turbo and
70:12 - sign up over here which is free
70:15 - or you can sign up on the right side if
70:16 - you don't have if you don't see this
70:21 - and then
70:22 - log into your account and then in your
70:24 - projects
70:25 - you want to create a new project here
70:27 - called project or demo
70:29 - whatever you don't need a description
70:30 - though just go ahead and create it and
70:32 - click the create site
70:34 - i'm not going to do that because i
70:35 - already have a project set up for this
70:37 - and when you do that you should see this
70:39 - interface
70:41 - and what we need right now is the app id
70:44 - this is what we use to connect our local
70:46 - project to our staging server on turbo
70:49 - so you head back
70:51 - to your terminal you turn off the local
70:53 - server
70:54 - and the first thing you need to do is
70:55 - log in to turbo
70:57 - like so
70:58 - and just log in using the account that
71:01 - you used to set up just now
71:05 - and then you want to do turbo app and
71:08 - then you paste in your app id
71:10 - from here just copy and paste it right
71:12 - there like that and this command will
71:14 - connect your local project to your
71:16 - staging environment on turbo it's really
71:18 - that simple
71:20 - and then once that's connected you're
71:22 - all set to go you do turbo deploy
71:25 - and it will deploy the project to your
71:27 - staging environment on turbo which
71:29 - usually takes around a minute
71:31 - and when it's done it will give you a
71:32 - staging url
71:34 - uh you know a web-based url that's a
71:36 - live web url that you can hit on your
71:38 - browser and check out your project
71:51 - so mine is wrapping up just now
71:54 - and when it's done
71:56 - right here you get that deploy complete
71:59 - message and this is your staging url
72:02 - right here and that is where your
72:04 - project is hosted if you copy and paste
72:06 - that into your browser you should get
72:09 - a you should get the interface that we
72:12 - had last time locally but now it's on
72:14 - our browser
72:16 - so before we test anything let's copy
72:18 - that over into another tab and do api
72:21 - profile and see if we get any kind of
72:23 - response which we do and that's because
72:26 - it is currently connected to our mlab
72:28 - account right here
72:30 - and if we click on the home
72:32 - we will see that we have our turbo
72:34 - proj right here of course it's empty
72:36 - there's nothing in here right so what we
72:38 - can do next
72:40 - is head back to our home page
72:42 - and add our first record in our
72:43 - production database or at least our
72:45 - staging database
72:47 - so let's see here whoever not gotten to
72:49 - yet um
72:51 - matt
72:53 - ryan
72:54 - falcons
72:56 - quarterback 32. so let's see what
72:59 - happens here
73:00 - so here
73:01 - on production we get
73:03 - the json
73:04 - values for the entry we just added with
73:06 - the entry
73:08 - so that's a good id excuse me so if we
73:10 - head over to the mlab page
73:12 - you will see if we reload the mlab
73:15 - you will see the profiles says one
73:17 - document
73:19 - and that corresponds to the the entry i
73:22 - just inserted
73:23 - and
73:24 - more importantly if we head over to our
73:26 - api profile page
73:28 - sorry that's localhost if we head over
73:30 - to our api
73:32 - profile endpoint
73:35 - we now see matt ryan
73:38 - the quarterback who we just entered into
73:40 - our production database
73:42 - we can now grab the id
73:45 - and then do backslash id
73:47 - and we get the same person there's only
73:49 - one anyway
73:50 - we can test all the filters so position
73:53 - equals quarterback
73:55 - and we still get that ryan because
73:57 - that's the only one if we try a wide
73:58 - receiver we get empty array so that's
74:01 - good
74:02 - we can do
74:04 - profile update
74:06 - id perhaps i got the age wrong i don't
74:09 - really know his age so i'm just guessing
74:12 - so maybe it's
74:15 - and then age maybe he's 31 and then 31
74:19 - and there we go
74:21 - and
74:22 - everything we set up before
74:24 - now currently works on our staging
74:26 - environment
74:28 - just like we saw on local so everything
74:30 - is successful on staging as on local
74:33 - which obviously is very very important
74:35 - and
74:36 - that's it so if you got all this working
74:38 - congratulations you have a node express
74:40 - application with a database
74:43 - connected and successfully
74:46 - reading and writing data to your
74:47 - database so that's
74:49 - clearly a big step towards your
74:51 - development as a full stack engineer and
74:54 - hopefully you got everything working if
74:56 - you have any questions comments anything
74:57 - like that feel free to shoot me an email
74:59 - you can reach me at
75:01 - dequan turbo360.co
75:07 - that's my email and i'll get back to you
75:09 - as soon as i can
75:10 - and um
75:11 - and yeah that's it thanks again for
75:13 - watching and uh best of luck in your
75:15 - future endeavors