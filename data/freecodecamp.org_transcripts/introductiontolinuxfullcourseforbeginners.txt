00:00 - welcome to this introduction to Linux
00:01 - course I'm Beau Carnes and I will be
00:03 - teaching this course this course is
00:05 - designed for computer users who have
00:07 - limited or no previous exposure to Linux
00:10 - whether they're working in an individual
00:12 - or Enterprise environment this course
00:15 - explores the various tools and
00:16 - techniques commonly used by Linux system
00:18 - administrators and end users to achieve
00:21 - their day-to-day work in a Linux
00:23 - environment you will gain a good working
00:26 - knowledge of Linux and how to navigate
00:28 - through major Linux distributions system
00:31 - configurations and graphical interfaces
00:34 - of Linux basic command line operations
00:37 - common applications of Linux and more
00:39 - upon completion of this training you
00:42 - should have a good working knowledge of
00:44 - Linux from both a graphical and command
00:47 - line perspective allowing you to easily
00:50 - navigate through any of the major Linux
00:53 - distributions the content of this course
00:55 - was developed by the Linux Foundation
00:58 - Who provided a Grant to make this course
01:01 - possible I've taken their primarily
01:04 - text-based course and turned it into a
01:07 - video based course throughout the course
01:09 - you will see some video segments that
01:11 - were developed by the Linux Foundation
01:13 - also you should know that sometimes
01:15 - throughout this course I put Linux
01:17 - commands on the screen like this the
01:19 - dollar sign at the beginning is not part
01:21 - of the command that just indicates the
01:24 - command should be typed into the system
01:25 - shell or terminal so if you're following
01:28 - along type everything after the dollar
01:30 - sign in the description of this video
01:33 - I've linked to a text-based version of
01:35 - this course
01:36 - okay let's get started
01:41 - by the end of this chapter you should be
01:44 - able to describe the software
01:46 - environment required for this course and
01:48 - describe the three major Linux
01:50 - distribution families
01:55 - in order to fully benefit from this
01:57 - course you will need to have at least
01:59 - one Linux distribution installed if
02:02 - you're not already familiar with the
02:03 - term distribution as it relates to Linux
02:06 - you soon will be you are about to learn
02:09 - some more details about the many
02:11 - available Linux distributions because
02:13 - there are literally hundreds of
02:15 - distributions I'm not covering them all
02:18 - in this course instead I'll focus on the
02:21 - three major distribution families the
02:24 - families and representative
02:25 - distributions this course will focus on
02:27 - are red hat family systems including OS
02:31 - and Fedora Susie family systems
02:34 - including open Susie and Debian family
02:37 - systems including Ubuntu and Linux Mint
02:45 - I'm about to tell you more about red hat
02:47 - Susie and Debian well this course
02:50 - focuses on these three major Linux
02:52 - distribution families as long as there
02:54 - are talented contributors the families
02:56 - of distributions and the distributions
02:58 - within these families will continue to
03:01 - change and grow people see a need and
03:03 - develop special configurations and
03:05 - utilities to respond to the need
03:07 - sometimes that effort creates a whole
03:09 - new distribution of Linux sometimes that
03:12 - if effort will leverage an existing
03:14 - distribution to expand the members of an
03:16 - existing family
03:21 - Red Hat Enterprise Linux or Rel heads
03:25 - the family that includes Centos Centos
03:28 - stream Fedora and Oracle Linux Fedora
03:32 - has a close relationship with Rel and
03:34 - contains significantly more software
03:36 - than red Hat's Enterprise version one
03:40 - reason for this is that a diverse
03:42 - Community is involved in building Fedora
03:44 - with many contributors who do not work
03:46 - for Red Hat
03:47 - furthermore it's used as a testing
03:49 - platform for future Rel releases
03:52 - and this course we'll mainly use synth
03:55 - OS stream from the Red Hat Family the
03:57 - basic version of scint os is also
03:59 - virtually identical to Rel the most
04:02 - popular Linux distribution in Enterprise
04:05 - environments however Centos 8 has no
04:09 - more scheduled updates the replacement
04:11 - is Cento S8 stream some of the key facts
04:14 - about the red hat distribution family
04:16 - are Fedora serves as an upstream testing
04:19 - platform for Rel Centos is a close clone
04:22 - of Rel while Oracle Linux is mostly a
04:25 - copy with some changes it supports
04:27 - Hardware platforms such as Intel x86 arm
04:31 - titanium powerpc and IBM system Z it
04:34 - uses the Yum and dnf RPM based yum
04:37 - package managers to install update and
04:40 - remove packages in the system Rel is
04:43 - widely used by Enterprise which hosts
04:46 - their own systems
04:51 - the Susie family and their the
04:54 - relationship between Susie and open Susi
04:57 - is similar to the one described between
04:59 - Rel sentos and Fedora we use open Susi
05:03 - as the reference distribution for the
05:05 - Susie family as it's available to end
05:08 - users at no cost because the two
05:11 - products are extremely similar the
05:13 - material that covers open Sushi can
05:15 - typically be applied to sles with few
05:18 - problems
05:19 - some of the key facts about the Susie
05:22 - family are the Susie Linux Enterprise
05:25 - server or sles is Upstream from open
05:29 - Susie it uses the RPM based zipper
05:32 - package manager which we'll cover later
05:34 - to install update and remove packages in
05:37 - the system it includes the yast or get
05:40 - another setup tool application for
05:42 - system administration purposes slas is
05:46 - widely used in retail and many other
05:48 - sectors
05:53 - the Debian distribution is Upstream for
05:56 - several other distributions including
05:58 - Ubuntu in turn Ubuntu is Upstream for
06:01 - Linux Mint and a number of other
06:02 - distributions it's commonly used on both
06:05 - servers and desktop computers Debian is
06:08 - a pure open source Community project
06:10 - which is not owned by any Corporation
06:12 - and has a strong focus on stability and
06:16 - Debian provides by far the largest and
06:18 - most complete software repository to its
06:21 - users of any Linux distribution Ubuntu
06:24 - aims to at providing a good compromise
06:27 - between long-term stability and ease of
06:30 - use since Ubuntu gets most of its
06:32 - packages from Debian stable Branch it
06:35 - also has access to a very large software
06:37 - repository for those reasons we will use
06:40 - Ubuntu LTS or long-term support as the
06:43 - reference to the Debian family
06:45 - distributions for this course
06:47 - some key facts about the Debian family
06:49 - are the Debian family is Upstream for
06:53 - Ubuntu and Ubuntu is Upstream for Linux
06:56 - Mint and others it uses the dpkg based
07:00 - apt package manager which we'll cover
07:03 - later in detail to install update and
07:06 - remove packages in the system
07:09 - Ubuntu has been widely used for cloud
07:11 - deployments well and while Ubuntu is
07:15 - built on top of Debian and is gnome
07:17 - based under the hood it differs visually
07:19 - from the interface on standard Debian as
07:22 - well as other distributions
07:27 - so in conclusion there are three major
07:29 - distribution families within Linux Red
07:32 - Hat Susie and Debian in this course
07:35 - we'll work with Representative members
07:37 - of all of these families throughout
07:42 - by the end of this chapter you should be
07:45 - able to define the common terms
07:47 - associated with Linux
07:49 - and discuss the components of a Linux
07:52 - distribution in order for you to get the
07:55 - most out of this course we recommend
07:57 - that you have Linux installed on a
07:58 - machine that you can use throughout this
08:00 - course you can use this brief
08:03 - installation guide preparing your
08:05 - computer for Linux training it will help
08:07 - you to select a Linux distribution to
08:10 - install decide on whether you want to do
08:12 - a standalone pure Linux machine or a
08:15 - dual boot one whether to do a physical
08:17 - or virtual install and more and then it
08:20 - guides you through the steps I'll also
08:22 - cover installation soon well we have not
08:25 - covered everything in great detail but
08:27 - keep in mind that most of the
08:29 - documentation in Linux is actually
08:31 - already on your system in the form of
08:34 - band Pages which we'll discuss in great
08:36 - detail later whenever you do not
08:38 - understand something or want to know
08:40 - more about a command program topic or
08:42 - utility you can just type man and then
08:45 - the topic at the command line so I'll
08:47 - just assume you're thinking this way so
08:50 - I won't constantly repeat for more
08:52 - information look at the man page for
08:54 - this topic
08:55 - On a related note throughout the course
08:57 - we'll use a shorthand that is common in
09:00 - the open source Community when referring
09:03 - to cases where the user has to make a
09:06 - choice of what to enter like a name of a
09:08 - program or file we'll use the shorthand
09:10 - Foo to represent the to basically
09:14 - represent insert file name here so we're
09:16 - not actually suggesting that you
09:18 - manipulate files or install Services
09:20 - called Foo
09:22 - the best way to learn Linux is by doing
09:24 - it so make sure to try things out
09:26 - yourself as you follow along you'll need
09:28 - to have a Linux system up and running
09:30 - that can either be a native Linux system
09:33 - on your Hardware running through a live
09:36 - USB stick or CD or a virtual machine
09:39 - running through a hypervisor we'll show
09:41 - you all these methods so let's get going
09:45 - before you begin using Linux you need to
09:48 - be aware of some basic terms such as
09:50 - kernel distribution bootloader service
09:54 - file system X Windows system desktop
09:58 - environment and command line
10:01 - these are very commonly used by the
10:03 - Linux community
10:05 - the kernel is considered the brain of
10:07 - the Linux operating system it controls
10:09 - the hardware and makes the hardware
10:11 - interact with the applications
10:14 - an example of a kernel is the Linux
10:16 - kernel
10:17 - the most recent Linux kernel along with
10:20 - past Linux kernels can be found at the
10:22 - kernel.org website
10:25 - a distribution also known as distros is
10:28 - a collection of programs combined with
10:30 - the Linux kernel to make up a Linux
10:32 - based operating system
10:34 - some common examples of a distribution
10:36 - are red hat Enterprise Linux Fedora
10:39 - Ubuntu and gen 2.
10:42 - the bootloader as the name implies is a
10:45 - program that Boots the operating system
10:48 - two examples of a bootloader are grub
10:50 - and isolinux
10:53 - a service is a program that runs as a
10:55 - background process some examples of the
10:58 - service are httpd
11:01 - nfsd ntpd
11:04 - ftpd and name d
11:07 - a file system is a method for storing
11:09 - and organizing files in Linux some
11:12 - examples of file systems are ext3 ext4
11:17 - fat xfs and butter FS
11:22 - the X Windows system provides the
11:24 - standard toolkit and protocol to build
11:26 - graphical user interfaces on nearly all
11:29 - Linux systems the desktop environment is
11:32 - a graphical user interface on top of the
11:35 - operating system
11:36 - gnome KDE xfce and fluxbox are some
11:42 - examples of the desktop environment
11:44 - the command line is an interface for
11:46 - typing commands on top of the operating
11:48 - system
11:50 - the shell is the command line
11:52 - interpreter that interprets the command
11:54 - line input and instructs the operating
11:57 - system to perform any necessary tasks
11:59 - and commands for example bash TC shell
12:04 - and Z shell
12:09 - suppose you have been assigned to a
12:11 - project building a product for a Linux
12:13 - platform
12:15 - project requirements include making sure
12:17 - that project works properly on the most
12:19 - widely used Linux distributions to
12:22 - accomplish this you need to learn about
12:24 - the different components services and
12:27 - configurations associated with each
12:30 - distribution we're about to look at how
12:32 - you would go about doing exactly that
12:35 - so what is a Linux distribution and how
12:38 - does it relate to the Linux kernel the
12:40 - Linux kernel is the core of the
12:43 - operating system a full Linux
12:45 - distribution consists of the kernel plus
12:47 - a number of other software tools for
12:49 - file related operations user management
12:51 - and software package management each of
12:55 - these tools provides a part of the
12:56 - complete system each tool is often its
12:59 - own separate project with its own
13:01 - developers working to perfect that piece
13:03 - of the system while the most recent
13:05 - Linux kernel and earlier versions can
13:08 - always be found in the Linux kernel
13:10 - archives Linux distributions may be
13:13 - based on different kernel versions for
13:16 - example the very popular rel8
13:17 - distribution is based on the 4.18 Kernel
13:20 - which is not new but is extremely stable
13:23 - other distributions may move more
13:26 - quickly in adopting the latest kernel
13:28 - releases it's important to note that the
13:31 - kernel is not an All or Nothing
13:33 - proposition for example Rel instant OS
13:36 - have Incorporated many of the most the
13:39 - more recent kernel improvements into
13:41 - their older versions as I have Ubuntu
13:43 - opensusi slas and more examples of other
13:47 - essential tools and ingredients provided
13:49 - by distributions include the C and C
13:52 - plus and claim compilers the GDB
13:54 - debugger the core system libraries
13:57 - applications need to to link with in
14:00 - order to run the low level interface for
14:02 - drawing graphics on the screen as well
14:05 - as the higher level desktop environment
14:07 - and the system for installing and
14:09 - updating the various components
14:11 - including the Cur the kernel itself and
14:14 - all distributions come with a rather
14:16 - complete Suite of applications already
14:18 - installed
14:22 - the vast variety of Linux distributions
14:25 - are designed to cater to many different
14:27 - audiences and organizations according to
14:31 - their specific needs and tastes however
14:34 - large organizations such as companies
14:36 - and governmental institutions and other
14:38 - entities tend to choose the major
14:41 - commercially supported distributions
14:44 - from Red Hat Susie and canonical which
14:48 - is Ubuntu sent OS and Os stream are
14:50 - popular free alternatives to Red Hat
14:53 - Enterprise Linux Rel and are often used
14:55 - by organizations that are comfortable
14:57 - operating without paid technical support
15:00 - Ubuntu and Fedora are widely used by
15:03 - developers and are also popular in the
15:05 - educational realm scientific Linux is
15:07 - favored by the scientific research
15:09 - Community for its compatibility with
15:11 - scientific and mathematical software
15:14 - packages both Centos variants are binary
15:17 - compatible with Rel which means in most
15:20 - cases binary software packages will
15:22 - install properly across the
15:24 - distributions many commercial
15:25 - Distributors including Red Hat Ubuntu
15:27 - Susie and Oracle provide long-term
15:30 - fee-based support for their
15:32 - distributions as well as hardware and
15:34 - software certification all major
15:37 - distributions provide update services
15:39 - for keeping your system primed with the
15:41 - latest security and Bug fixes and
15:43 - performance enhancements as well as
15:45 - provide online support resources
15:51 - you have completed chapter two let's
15:53 - summarize the key Concepts covered Linux
15:56 - borrows heavily from the Unix operating
15:58 - system with which its creators were well
16:01 - versed Linux accesses many features and
16:04 - services through files and file like
16:06 - objects Linux is a fully multitasking
16:09 - multi-user operating system with
16:12 - built-in networking and service
16:13 - processes known as daemons some of the
16:16 - more common terms used in Linux are
16:18 - kernel distribution bootloader service
16:21 - file system X Windows system desktop
16:24 - environment and command line and a full
16:27 - Linux distribution consists of the
16:29 - kernel plus a number of other software
16:31 - tools for file related operations user
16:34 - management and software package
16:36 - management
16:41 - by the end of this chapter you should be
16:43 - able to identify Linux file systems
16:46 - identify the differences between
16:49 - partitions and file systems describe the
16:52 - boot process and install Linux on a
16:55 - computer the Linux boot process is the
16:58 - procedure for initializing the system it
17:01 - consists of everything that happens from
17:03 - when the computer is first switched on
17:05 - until the user interface is fully
17:08 - operational having a good understanding
17:10 - of the steps in the boot process may
17:13 - help you with troubleshooting problems
17:15 - as well as with tailoring the computer's
17:18 - performance to your needs on the other
17:21 - hand the boot process can be rather
17:23 - Technical and you can start using Linux
17:25 - without knowing all the details
17:30 - starting in x86 based Linux system
17:33 - involves a number of steps when the
17:35 - computer is powered on the basic input
17:37 - output system or bios and this
17:40 - initializes the hardware including the
17:42 - screen and keyboard and test the main
17:44 - memory this process is also called post
17:47 - power on self-test
17:49 - the bio software is stored on a ROM chip
17:52 - on the motherboard after this the
17:55 - remainder of the boot process is
17:56 - controlled by the operating system
18:01 - once the post is completed the system
18:04 - control passes from the BIOS to the
18:06 - bootloader the bootloader is usually
18:08 - stored on one of the hard disks in the
18:11 - system either in the boot sector for
18:13 - traditional bios or MBR systems or the
18:17 - EFI partition for more recent or unified
18:20 - extensible firmware interfaces or EFI
18:22 - ufi systems up to this stage the machine
18:25 - does not access any mass storage media
18:28 - thereafter information on date time and
18:31 - the most important peripherals are
18:33 - loaded from the CMOS values after
18:35 - technology used for the battery-powered
18:37 - memory store which allows the system to
18:39 - keep track of the date and time when
18:41 - even when it's powered off a number of
18:44 - boot loaders exist for Linux the most
18:46 - common ones are a grub for Grand unified
18:49 - bootloader ISO Linux for booting from
18:51 - removable media and dos u-boot for
18:54 - booting on embedded devices appliances
18:57 - most Linux bootloaders can present a
19:00 - user interface for choosing alternative
19:01 - options for booting Linux and even other
19:04 - operating systems that might be
19:06 - installed when booting Linux the
19:09 - bootloader is responsible for loading
19:11 - the kernel image and the initial Ram
19:13 - disk or file system into memory
19:20 - the bootloader has two distinct stages
19:23 - for systems using the BIOS MBR method
19:26 - the bootloader resides at the first
19:28 - sector of the hard disk also known as
19:30 - the master boot record the size of the
19:33 - MBR is just 512 bytes in this stage the
19:37 - bootloader examines the partition table
19:39 - and finds a bootable partition once it
19:41 - finds a bootable partition it then
19:43 - searches for the second stage Bootloader
19:45 - for example grub it loads it into RAM
19:48 - for systems using the EFI U EFI method
19:53 - UEFI firmware reads its boot manager
19:55 - data to determine which UEFI application
19:58 - is to be launched and from where the
20:00 - firmware then launches the UEFI
20:03 - application for example grub as defined
20:06 - in the boot entry in the firmware's boot
20:08 - manager the second stage bootloader
20:11 - resides under slash boot a splash screen
20:13 - is displayed which allows us to choose
20:15 - which operating system to boot after
20:18 - choosing the OS the bootle boot the
20:21 - bootloader loads the kernel of the
20:23 - selected operating system into RAM and
20:25 - passes control to it kernels are almost
20:28 - always compressed so its first job is to
20:31 - uncompress itself after this it will
20:34 - check and analyze the system hardware
20:35 - and initialize any hardware device
20:37 - drivers built into the kernel
20:42 - the init ramp FS file system image
20:44 - contains programs and binary files that
20:47 - perform all actions needed to mount the
20:50 - proper root file system like providing
20:52 - kernel functionality for the needed file
20:54 - system and device drivers for mass
20:56 - storage controllers with a facility
20:58 - called udev for user device which is
21:01 - responsible for figuring out which
21:02 - devices are present locating the device
21:05 - drivers they need to operate properly
21:07 - and loading them after the root file
21:09 - system has been found it's checked for
21:12 - errors and mounted the mount program
21:14 - instructs the operating system that a
21:17 - file system is ready for use and
21:19 - Associates it with a particular point in
21:21 - the overall hierarchy of the file system
21:23 - the mount point if this is successful
21:26 - the the init Ram FS is cleared from RAM
21:29 - and the init program from the root file
21:31 - system is executed and it handles the
21:34 - mounting and pivoting over to the final
21:36 - real root file system if special
21:39 - Hardware drivers are needed before the
21:41 - mass storage can be accessed they must
21:43 - be in the init Ram FS image
21:49 - near the end of the boot process and it
21:51 - starts a number of text mode login
21:53 - prompts these enable you to type your
21:55 - username followed by your password and
21:59 - to eventually get a command shell
22:01 - however if you're running a system with
22:04 - a graphical login interface you'll not
22:06 - see these at first usually the default
22:08 - command shell is Bash but there are a
22:12 - number of other Advanced command shells
22:14 - available the shell prints a text prompt
22:17 - indicating it is ready to accept
22:18 - commands after the user types the
22:22 - command and presses enter the command is
22:24 - executed and another prompt is displayed
22:27 - after the command is done
22:31 - the bootloader loads the kernel and an
22:35 - initial ram-based file system into
22:37 - memory so it can be used directly by the
22:40 - kernel when the kernel is loaded in Ram
22:43 - it immediately initializes and
22:45 - configures the computer's memory it also
22:48 - configures all the hardware attached to
22:50 - the system this includes all processors
22:53 - i o subsystems storage devices and more
22:56 - the kernel also loads some necessary
22:58 - user space applications
23:04 - once the kernel has set up all its
23:06 - hardware and mounted the root file
23:08 - system the kernel runs the S bin init
23:11 - this then becomes the initial process
23:13 - which then starts other processes to get
23:16 - the system running most other processes
23:18 - on the system Trace their origin
23:20 - ultimately to init exceptions include
23:23 - the so-called kernel processes these are
23:26 - started by the kernel directly and their
23:28 - job is to manage internal operating
23:30 - system details besides starting the
23:33 - system init is responsible for keeping
23:36 - the system running and for shutting it
23:39 - down cleanly one of his one of its
23:42 - responsibilities is to act when
23:43 - necessary as a manager for all
23:45 - non-kernel processes it cleans up after
23:48 - them upon completion and restarts user
23:51 - login Services as needed when users log
23:54 - in and out and does the same for other
23:56 - background system services
23:59 - traditionally this process startup was
24:01 - done using conventions that date back to
24:04 - the 1980s and the system V variety of
24:07 - Unix this serial process had the system
24:10 - passing through a sequence of run levels
24:12 - containing collections of scripts that
24:14 - start and stop Services each run level
24:17 - supported a different mode of running
24:19 - the system with the within each run
24:21 - level Individual Services could be set
24:24 - to run or to be shut down if running
24:26 - however all major distributions have
24:28 - moved away from this sequential run
24:31 - level method of system initialization
24:33 - although they usually emulate many
24:35 - system V utilities for compatibility
24:38 - purposes
24:40 - next we'll discuss the new methods of
24:42 - which system MD has become dominant
24:48 - systems with systemd start up faster
24:51 - than those with earlier init methods
24:53 - this is largely because it replaces a
24:56 - serialized set of steps with aggressive
24:59 - parallelization techniques which permits
25:01 - multiple services to be initiated
25:04 - simultaneously it has been adapted by
25:07 - all major distributions and so we'll not
25:10 - discuss the older system B method or
25:12 - upstart which has become a dead end
25:14 - complicated Startup shell scripts are
25:16 - replaced with simpler configuration
25:18 - files which enumerate what has to be
25:21 - done before a service has started how to
25:23 - execute service startup and what
25:25 - conditions the service should indicate
25:27 - have been accomplished when startup is
25:29 - finished one thing to note is that S Pen
25:32 - slash knit now just points to lib
25:34 - systemd system d
25:37 - so systemd takes over the init process
25:39 - one system D command system control is
25:44 - used for most basic tasks while we have
25:47 - not yet talked about working at the
25:48 - command line here's a brief listing of
25:50 - its used
26:01 - think of a refrigerator that has
26:03 - multiple shelves that can be used for
26:05 - storing various items these shelves help
26:08 - you organize the grocery items by shape
26:11 - size type Etc
26:13 - the same concept applies to a file
26:15 - system which is the embodiment of a
26:17 - method of storing and organizing
26:19 - arbitrary collections of data in a human
26:22 - usable form different types of file
26:25 - systems supported by Linux include
26:27 - conventional disk file systems
26:30 - flash storage file systems
26:34 - database file systems and special
26:37 - purpose file systems
26:39 - this section will describe the standard
26:42 - file system layout shared by most
26:44 - linuxed distributions
26:50 - a partition is a fiscally contiguous
26:53 - section of a disk or what appears to be
26:56 - so in some Advanced setups a file system
26:59 - is a method of storing or finding files
27:02 - on a hard disk usually in a partition
27:04 - one can think of a partition as a
27:07 - container in which a file system resides
27:09 - although in some circumstances a file
27:12 - system can span more than one partition
27:15 - if one uses symbolic links which we'll
27:18 - discuss much later a comparison between
27:20 - file systems in Windows and Linux is
27:23 - shown in this table
27:32 - Linux systems store their important
27:35 - files according to a standard layout
27:37 - called the file system hierarchy
27:40 - standard which has long been maintained
27:43 - by the Linux Foundation having a
27:45 - standard is designed to ensure that
27:48 - users administrators and developers can
27:50 - move between distributions without
27:52 - having to relearn how the system is
27:55 - organized
27:56 - Linux uses the slash character to
27:58 - separate paths unlike Windows which uses
28:01 - the backslash and it does not have
28:03 - multiple Drive letters multiple drives
28:06 - and or partitions are mounted as
28:08 - directories in the single file system
28:10 - removable media such as USB drives and
28:13 - CDs and DVDs will show up as mounted at
28:17 - run slash media slash your username
28:19 - slash disk label for recent Linux
28:22 - systems or under slash media for older
28:25 - distributions for example if your
28:27 - username is student a USB pin Drive
28:30 - labeled Fedora might end up being found
28:32 - at run slash media student Fedora and a
28:37 - file readme.txt on that disk would be at
28:41 - run slash media student slash Fedora
28:43 - slash readme.txt all Linux file systems
28:46 - are case sensitive so these different
28:49 - ways of spelling boot represent three
28:52 - different directories or folders mini
28:55 - distributions distinguish between core
28:57 - utilities needed for proper system
28:59 - operation and other programs and place
29:02 - the ladder in directories under slash
29:04 - USR or user now let's learn about
29:07 - viewing the file system hierarchy from
29:10 - the graphical interface in Ubuntu
29:13 - click the file manager icon on the left
29:16 - panel by default it explores your home
29:19 - directory
29:20 - to see all directories under root
29:22 - directory click computer on the left
29:24 - places pane inside this window
29:28 - double-click the Etsy directory to open
29:31 - it
29:33 - double-click Avi and press Ctrl L to see
29:37 - the current location the current path
29:39 - appears at the top of the window the
29:42 - path for this is Etsy avahi
29:45 - now let's learn about viewing the file
29:47 - system hierarchy from the graphical user
29:49 - interface in opensuse
29:52 - click activities on the top left corner
29:54 - of the screen corner
29:56 - click the file manager icon on the left
29:59 - panel by default it explores your home
30:02 - directory
30:03 - click computer on the left places pane
30:06 - inside this window you can see all
30:09 - directories under the root directory
30:12 - double-click the Etsy directory to open
30:15 - it
30:16 - to see the current location double-click
30:19 - the avahi folder and press Ctrl L the
30:23 - current path appears at the top of the
30:25 - window the path for this is Etsy avahi
30:33 - suppose you intend to buy a new car what
30:36 - factors do you need to consider to make
30:38 - a proper choice
30:40 - requirements which need to be taken into
30:42 - account include the size needed to fit
30:44 - your family in the vehicle the type of
30:47 - engine and Chaos economy your expected
30:50 - budget and available financing options
30:53 - reliability record and after sales
30:55 - Services
30:56 - Etc similarly determining which
30:59 - distribution to deploy also requires
31:01 - planning here you can see some but not
31:04 - all choices note that many embedded
31:07 - Linux systems use custom crafted
31:09 - contents rather than Android or octo
31:13 - some questions worth thinking about
31:15 - before deciding on a distribution
31:17 - include what is the main function of the
31:20 - system
31:21 - what types of packages are important to
31:24 - the organization for example web server
31:27 - word processing Etc
31:29 - how much hard disk space is required and
31:31 - how much is available for example when
31:34 - installing Linux on an embedded device
31:36 - space is usually constrained
31:39 - how often are packages updated
31:42 - how long is the support cycle for each
31:45 - release for example LTS releases have
31:48 - long-term support
31:49 - unique kernel customization from a
31:52 - vendor or a third party
31:54 - what Hardware are you running on for
31:56 - example it might be x86 arm or PPC do
31:59 - you need long-term stability can you
32:01 - accept or need a more volatile Cutting
32:04 - Edge system running the latest software
32:11 - the partition layout needs to be decided
32:13 - at the time of installation it can be
32:16 - difficult to change later while Linux
32:18 - systems handle multiple partitions by
32:20 - mounting them at specific points in the
32:22 - file system and you can always modify
32:25 - the design later it's always easier to
32:27 - try to get it right to begin with
32:30 - nearly all installers provide a
32:32 - reasonable default layout with either
32:35 - all space dedicated to normal files on
32:37 - one big partition and a smaller swap
32:39 - partition or with separate partitions
32:42 - for some space sensitive areas like home
32:45 - and VAR you may need to override the
32:47 - defaults and do something different if
32:49 - you have special needs or if you want to
32:51 - use more than one disk
32:58 - all installations include the bare
33:00 - minimum software for running a Linux
33:03 - distribution most installers also
33:05 - provide options for adding categories of
33:08 - software common applications such as the
33:11 - Firefox web browser and Libra office
33:14 - office suite developer tools like the V
33:17 - and emacs text editors which we'll
33:20 - explore later in other popular services
33:22 - such as the Apache web server tools or
33:25 - mySQL database are usually included in
33:28 - addition for any system with a graphical
33:31 - desktop a chosen desktop such as normal
33:33 - KDE is installed by default all
33:37 - installers set up some initial security
33:38 - features on the new system one basic
33:41 - step includes setting the password for
33:44 - the super user root and setting up an
33:46 - initial user in some cases only an
33:49 - initial user set up direct root login is
33:52 - not configured and root access requires
33:54 - logging in first as a normal user and
33:57 - then using sudo as as we'll describe
33:59 - later some distributions will also
34:01 - install more advanced security
34:02 - Frameworks such as SC Linux or app armor
34:06 - for example all red hat based systems
34:08 - including Fedora and Centos always use
34:11 - SC Linux by default and Ubuntu comes
34:14 - with app armor up and running
34:20 - like other operating systems Linux
34:22 - distributions are provided on removable
34:24 - media such as USB drives and CDs or DVDs
34:28 - most Linux distributions also support
34:30 - booting a small image and downloading
34:32 - the rest of the system over the network
34:34 - these small images are usable on Media
34:37 - or as Network boot images in which case
34:40 - it is possible to perform and install
34:41 - without using any local media mini
34:44 - installers can do an installation
34:46 - completely automatically using a
34:49 - configuration file to specify
34:51 - installation options this file is called
34:54 - a Kickstart file for Red Hat based
34:56 - systems and auto yes profile for sushi
34:59 - based systems and a precede file for dbm
35:03 - based systems each distribution provides
35:06 - its own documentation and tools for
35:09 - creating and managing these files
35:15 - the actual installation process is
35:17 - pretty similar for all distributions
35:19 - after booting from the installation
35:22 - media the installer starts and asks
35:24 - questions about how the system should be
35:26 - set up these questions are skipped if an
35:30 - automatic installation file is provided
35:32 - then the installation is performed
35:35 - finally the computer reboots into the
35:37 - newly installed system on some
35:40 - distributions additional questions are
35:42 - asked after the system reboots most
35:45 - installers have the option of
35:46 - downloading and installing updates as
35:49 - part of the installation process this
35:52 - requires internet access otherwise the
35:54 - system uses its normal update mechanism
35:57 - to retrieve those updates after the
35:59 - installation is done
36:05 - the demonstrations we'll see show how to
36:07 - install Linux directly on your machine
36:09 - erasing everything that was there while
36:12 - the demonstrations will not alter your
36:14 - computer following these procedures in
36:17 - real life will erase all current data
36:19 - there are also alternate methods to
36:22 - install Linux where you won't lose any
36:24 - data so some of those methods include
36:26 - re-partitioning your hard disk to free
36:29 - up enough room to permit dual boot or
36:31 - side-by-side installation of Linux along
36:34 - with your present operating system or
36:36 - using a host machine hypervisor program
36:39 - such as vmware's products or Oracle
36:42 - virtualbox to install a client Linux
36:45 - virtual machine and finally booting off
36:47 - of and using a live CD or USB disk and
36:50 - not running to the hard disk at all the
36:53 - first method is sometimes complicated
36:54 - and should be done when your confidence
36:56 - is high and you understand the steps
36:59 - involved the second and third methods
37:02 - are quite safe and make it difficult to
37:04 - damage your system
37:09 - here are the steps to install Ubuntu now
37:12 - going to do an install of Ubuntu 1804 as
37:16 - a virtual machine under the VMware
37:19 - hypervisor using a red hat seven
37:23 - host system
37:25 - running VMware Player
37:28 - so first thing we need to do is to
37:31 - create a new virtual machine
37:34 - and for that I already have the Ubuntu
37:38 - installed this mounted uh
37:43 - in the virtual CD drive and we'll give
37:46 - it a name
37:48 - for the user as LF student
37:53 - for the username of student
37:55 - now we have to give a password
37:59 - which I have done
38:01 - and then for the name let's just call
38:03 - Ubuntu and then on the host machine I
38:06 - wanna
38:07 - have a certain place I want to put it
38:09 - rather than my home directory I wanted
38:13 - an uh on a disk that has a lot of space
38:17 - and then let's allocate 30 gigabytes of
38:21 - space
38:23 - and I prefer to have it as one big file
38:26 - rather than multiple files or slices I
38:30 - find that clutters my system less
38:34 - and really that's all you have to do to
38:37 - start setting up the install but it's
38:40 - better to click on customize hardware
38:42 - and increase the amount of memory from
38:45 - one gigabyte to four and in my case and
38:48 - I might as well take advantage of having
38:50 - multiple processors so I'll let it use
38:52 - all four processors on this host machine
38:57 - and then I'll just click on finish
39:00 - and it will start the install after a
39:04 - couple of harmless messages about
39:07 - how the virtual machine graphics driver
39:10 - doesn't permit accelerated graphics
39:12 - performance
39:14 - now
39:16 - the beautiful thing about the Ubuntu
39:19 - install on this recent version
39:21 - is that I am done there are no more
39:23 - choices to make I don't have any more
39:26 - parameters to specify Etc
39:28 - if I hadn't been installing in a virtual
39:31 - machine it would have asked me
39:33 - information like username and password
39:36 - at this stage but it was able to pick
39:39 - that up because of the intelligent way
39:42 - that VMware can handle Ubuntu
39:45 - so I'm doing this in real time yeah if
39:48 - you can read the messages you see it
39:50 - just created the the main file system on
39:54 - the system and now it's going through
39:56 - the stage of copying all the files over
39:59 - to the hard disk or I should say the
40:02 - simulated hard disk
40:04 - now this takes a little bit of time so
40:06 - I'll pause the recording for a few
40:08 - seconds so you don't have to watch not
40:10 - much happening I skipped about a minute
40:13 - or so and now it says it's almost
40:15 - finished copying files
40:17 - it's showing a bunch of different blurbs
40:20 - for various features in this bionic
40:23 - Beaver or Ubuntu 18.04 release
40:30 - the status bar has reached all the way
40:32 - to the right so it should be almost done
40:37 - and now it's doing the actual install of
40:39 - the system so it's copied all the files
40:42 - it needs over to the hard disk
40:44 - and it's doing the actual configuration
40:53 - so once again I believe I'll pause for a
40:55 - little while so you don't have to sit
40:57 - here and watch not much happening
41:00 - pause for about a minute now it says
41:03 - it's configuring Hardware
41:06 - so it's finding all the hardware devices
41:08 - in the system making sure it has the
41:10 - right device drivers for it Etc
41:15 - it's now configuring the bootloader the
41:18 - grub
41:19 - and now it's doing cleanup it's getting
41:21 - rid of packages which were only need a
41:24 - journey install
41:30 - then of course that's
41:33 - rolling by far too fast to be readable
41:42 - and so
41:45 - it's doing a little bit more
41:47 - package installation
41:50 - and then I'll pause again for a little
41:52 - while
41:54 - is that it reached the end of the status
41:57 - bar and now it's doing the reboot
42:05 - and shortly I should be getting a login
42:08 - prompt
42:15 - if you notice it's installing openvm
42:18 - tools that's a package
42:20 - of special drivers and configuration
42:23 - stuff that's used when you're running it
42:27 - as a guest under VMware hypervisor
42:34 - and we've reached the login screen
42:35 - running under the greeter
42:38 - so I'll just
42:40 - well again as student
42:44 - and oops I typed in the wrong password I
42:47 - suppose yep
42:53 - and now the system's running there's a
42:55 - few introductory uh messages here and
42:58 - I'll just
42:59 - click through them to get
43:01 - to a fully up system and then
43:05 - just to see what really happened here if
43:07 - I right click I can open up a terminal
43:10 - and then I'm going to run the command DF
43:12 - for disk free
43:14 - Dash T to show me what type of file
43:17 - systems have I have an H to print out
43:20 - the results in megabytes and gigabytes
43:23 - and I see that in the main file system I
43:27 - have 30 gigabytes of space of which I'm
43:30 - using 5.3 and it's an ext4 file system
43:34 - when we install Centos we need to
43:37 - actually specify the type of file system
43:39 - the size of the partition Etc but Ubuntu
43:43 - made choices that he thought were best
43:46 - likewise uh we will talk about this now
43:49 - but if I look at
43:51 - swap files
43:53 - you'll see that there is a swap file of
43:56 - about one and a half gigabytes created
43:58 - uh instead of a swap partition usually
44:01 - distributions create swap partitions
44:04 - so that's all there is to install the
44:07 - latest version of Ubuntu uh absolutely
44:11 - nothing to do during the install it
44:13 - makes what it thinks is sensible
44:14 - decisions for everything and after the
44:17 - system is up and running you can then go
44:19 - into the package manager and put in
44:21 - exactly what you need and configure the
44:23 - system in other ways if you need a more
44:26 - flexible installation to begin with you
44:29 - can make such choices when you start but
44:33 - we we took the easy path here
44:37 - here are the steps to install synth OS
44:41 - we are now going to do a fresh install
44:44 - of Centos
44:46 - 8.1 the latest version of Centos at the
44:50 - time of this installation
44:52 - we have already allocated hardness space
44:56 - for its installation to make a virtual
44:58 - machine under VMware and we have
45:01 - inserted the
45:04 - install disk image and we're ready to
45:07 - begin
45:08 - so we will uh not take the step of
45:11 - testing the media and installing it
45:13 - because that takes some time so we'll
45:16 - just go directly to an install so I'll
45:18 - just move to the first
45:20 - element here and hit return
45:24 - and we'll try to do this install as
45:27 - quickly as possible so we'll choose
45:29 - mostly the default choices and we're
45:33 - going to do a workstation install rather
45:36 - than a server install because this is
45:39 - what is desired for this course
45:43 - to happen to have a user-based install
45:53 - okay so the first choice is to pick the
45:56 - language we'll pick English
46:03 - and then uh we can go really through any
46:07 - order we want through these different
46:09 - choices uh to begin with but let's just
46:12 - go in order so we've already picked an
46:13 - English keyboard with the US
46:16 - layout and also language support is set
46:19 - up for English for United States you can
46:21 - click on these to make those changes
46:23 - for the time and date uh it's actually
46:26 - better to make sure the network is
46:28 - installed first so here I'm going I
46:32 - clicked on network
46:33 - and I'm going to turn on the network it
46:36 - found the network card and it's kind of
46:38 - ready to go probably should configure
46:42 - but I think the default choices will be
46:45 - fine if I go to General this is all
46:48 - users May connect and then if I go to
46:52 - ipv4 settings you'll see it's automatic
46:55 - DHCP
46:57 - so that's generally what you want rather
47:00 - than having to give it a fixed address
47:02 - so we'll just say okay for all this and
47:06 - uh
47:08 - um
47:09 - I guess we should say connect
47:11 - automatically with priority zero that
47:13 - means it'll always connect when you
47:15 - start up the machine and we can say done
47:18 - the reason it's good to do that before
47:20 - we set the time and date is we can now
47:23 - have Network time on which means it will
47:25 - automatically find a time
47:27 - uh
47:29 - I'm currently doing this installation
47:32 - from Central Time Zone in the United
47:34 - States so you can try to do that with
47:38 - the mouse
47:39 - and I got it right it's set for Chicago
47:42 - which is Central Time so I'll say done
47:46 - and then uh the installation source is
47:50 - uh rather important but that's local
47:52 - media I already have the DVD so as you
47:55 - see it's sent OS
47:56 - 8-1 1911 that's the latest version sent
48:01 - to us
48:02 - for the software selection uh let's just
48:06 - keep the workstation
48:07 - I could make it a server with a
48:09 - graphical interface or just a server if
48:12 - I really wanted to be quick I could do a
48:14 - minimal install and then bring
48:15 - everything up later that I need
48:17 - uh but within the workstation I should
48:20 - pick a few things so I'll pick an own
48:22 - applications internet applications uh
48:26 - you'll probably want to pick the office
48:27 - suite and productivity but I'd like this
48:29 - to go quickly so I won't do that right
48:31 - now
48:32 - uh I'll pick development Tools in case I
48:36 - want to compile anything
48:39 - and that's probably the main things I
48:41 - need right now but you can always
48:43 - change everything in detail once the
48:45 - system's up so it's it's good to do a
48:49 - relatively quick install
48:51 - the trickiest part here is to do the
48:53 - installation
48:55 - um
48:56 - partitioning setup so I'll pick I've
49:00 - already got picked here
49:02 - the virtual 30 gigabyte disk
49:05 - and if I wanted to take things really
49:07 - fast I would do automatic storage
49:09 - configuration and let it decide what
49:13 - kind of partitions that should have how
49:15 - big they should be Etc and you may want
49:17 - to at least look at that but let me just
49:19 - do custom because it fits in better with
49:21 - my needs
49:23 - and then I can say done
49:25 - okay and then I get to pick what kind of
49:28 - installation I want to do a standard
49:31 - partition and not an lvm which is
49:33 - logical volume management I just want a
49:36 - simple standard partition so I'll do
49:38 - that
49:39 - and then I actually have to create this
49:42 - partitions I need so I hit the plus sign
49:45 - and I'll have one big partition for
49:47 - everything so it's mounted at slash and
49:51 - let's give it 29 gigabytes
49:54 - and I'll add that this is the 30
49:56 - gigabyte disk and then I'll add one more
50:00 - okay and that won't be mounted that'll
50:03 - be for swap
50:04 - and if I don't give a desired capacity
50:06 - it should take it all
50:09 - uh which it actually decided it should
50:12 - have three gigabytes
50:14 - I'll let the system go with what it
50:16 - wants it's it's doing that based on how
50:19 - much uh memory I have okay
50:23 - it says I have only like one megabyte
50:25 - left that'll get a total 30 gigabytes
50:28 - the one other thing I get to do for the
50:31 - first mound Point here is pick what kind
50:33 - of file system
50:35 - and you notice the default on red hat
50:38 - now is Orson OS is xfs let me make it
50:41 - ext4
50:44 - um which is which is easier to mount
50:47 - from other other machines Etc either
50:50 - than xfs but you can just take the the
50:53 - default if you prefer and then I say
50:56 - done and
50:57 - it should be done it's telling me do I
50:59 - really want to do this because it's
51:01 - going to wipe out everything that's on
51:03 - that disc and I'll say sure accept the
51:05 - changes
51:07 - so uh I'm pretty much done uh K dump is
51:12 - a system you can set up so that if the
51:14 - system crashes your produce what's
51:16 - called a core dump file so I'll just you
51:19 - know you probably won't need to use that
51:22 - it'll be a little faster to boot uh when
51:24 - you have a new kernel so I'll just not
51:27 - enable that but if you're doing a
51:30 - develop machine you probably want that
51:32 - we already configured the network and
51:35 - under security policy we won't do any
51:38 - specialization we'll just leave it alone
51:40 - for now you can always change it later
51:43 - and then you just say begin installation
51:46 - now it'll already take a head start on
51:50 - trying to load some packages and files
51:52 - while you have some more information to
51:55 - put in first you'll have to pick a
51:57 - password for the root account
51:59 - and so I'll do that
52:01 - and it's actually LF train for uh
52:05 - virtual machines we use for the classes
52:08 - which is a pretty simple password
52:11 - and uh
52:14 - it's it's hard to read here but it
52:16 - should be saying it's too simple I can't
52:19 - see that oh it says week here but it
52:22 - says press done again to use the
52:23 - password anyway so I'll do that this is
52:26 - a throwaway machine and then I have to
52:28 - create a user I'll make the full name of
52:32 - the user LF student
52:34 - and by choice by default it wants to
52:37 - make the username of the account L
52:39 - student but we'll just make it student
52:43 - will require a password to use this
52:46 - account if we said make this user
52:48 - administrator would be like
52:50 - Ubuntu systems where there's just one
52:53 - password and you have to do as you do to
52:56 - do anything privileged but let's keep a
52:59 - standard Unix type setup with separate
53:01 - accounts and passwords for the student
53:03 - user and the root user so we're going to
53:06 - give a very simple password again just
53:09 - the word student
53:11 - and once again it's oh it says it does
53:13 - not match I must have typed things wrong
53:16 - let's try again s-t-u-d-e-n-t
53:18 - [Music]
53:19 - s-t-u-d-e-n-t
53:22 - yeah so now it says the password
53:24 - contains the username in some form you
53:27 - will have to pass done twice to confirm
53:29 - it it's also considered very weak but
53:32 - we'll accept it once again it's a
53:33 - throwaway machine in real life you
53:35 - shouldn't do this
53:38 - and so I say done
53:40 - and now uh we just have to wait for the
53:43 - install you'll see it is installed
53:46 - 500 some odd packages at a 1481. we can
53:51 - keep watching while this happens but it
53:53 - takes some time so I'm going to pause
53:55 - the recording and come back when it's
53:57 - almost done
54:06 - so it has finished and it's configuring
54:09 - the kernel now
54:10 - uh that takes a little bit of time to
54:13 - get installed I think 1481 packages
54:17 - so now it's doing the actual
54:18 - configuration of the kernel it is doing
54:22 - a few other configuration steps you'll
54:24 - notice it this is installing the
54:27 - bootloader it configured the editors
54:30 - is generating What's called the init Ram
54:33 - FS which is uh needed to boot it
54:37 - contains the initial file system which
54:39 - is stored in memory for just for the
54:42 - system booting which we talk about in
54:44 - detail in this course
54:48 - and this is probably the last thing it
54:50 - really has to do before it's done uh
54:53 - depending on the complexity of things it
54:56 - can take a while is not complete so now
54:59 - we can simply reboot
55:02 - so let's do that and we should have a
55:04 - running system
55:11 - and you see it wants to boot there into
55:14 - the default kernel
55:16 - 4.18.0
55:18 - and I didn't do anything it will
55:20 - automatically boot on its own
55:26 - and then there's a few things that
55:28 - happen when you start up the first time
55:31 - I I wants me to accept the uh end user
55:35 - license which is pretty
55:37 - simple for uh open source product
55:43 - um
55:44 - and then finish configuration it has a
55:47 - few other things
55:48 - the setup
55:50 - and we're ready to do our first login as
55:52 - student so I clicked on that I'll type
55:55 - in the password
56:02 - and we have an up and running system
56:05 - and uh it's going to ask us to confirm
56:09 - again our choice of language
56:12 - and uh we could check to make sure the
56:14 - keyboard is okay but we're fine with
56:17 - English us
56:19 - and uh I'm going to turn off location
56:21 - services that's uh that's a choice you
56:24 - can make
56:27 - and if you want you can connect to
56:29 - various online accounts so we're going
56:31 - to skip all that
56:33 - then we're ready to go so now we have a
56:36 - fully functional system it brings up a
56:39 - tutorial screen if you want to get some
56:41 - more information we'll just skip that
56:45 - and here we are it's a fully functional
56:47 - system
56:48 - if I want to get a little information
56:50 - let me drop to a command line so I
56:53 - clicked on activities
56:54 - I'll say terminal and here we are so for
56:57 - instance if I do DF Dash h
57:01 - you'll see uh I've used 5.2 gigabytes
57:04 - uh and there's plenty of space available
57:07 - if I wanted to change the size of the
57:10 - screen depending on your hypervisor
57:12 - sometimes you can just kind of drag it
57:14 - out or something but here let me go to
57:17 - display settings and it's set for 1280
57:20 - times 780 768 and I obviously can go
57:25 - bigger so just to show you for instance
57:27 - let's say I take 19 20.
57:32 - by 12 20.
57:34 - and I'm filling up the whole screen now
57:36 - it's actually bigger than my whole
57:38 - screen so I'll revert to settings
57:40 - but you can do all sorts of other
57:42 - adjustments and we've done a complete
57:44 - install of sentos 8 it's all set and
57:47 - ready to use and customized to your
57:49 - heart's content
57:52 - here are the steps to install open Susie
57:56 - we are now going to do a fresh install
57:58 - of open Suzy as a virtual machine under
58:01 - a VMware hypervisor on a red hat 7
58:04 - system
58:06 - we have already inserted the install DVD
58:09 - and we're about to begin
58:11 - notice that in our initial screen we can
58:14 - do an installation upgrade or if we
58:17 - scroll down to more
58:20 - we see that we can also use the install
58:22 - DVD as a rescue system
58:25 - uh we can check memory and do various
58:28 - things but we're going to do an install
58:30 - so I'll just click on install and then
58:34 - it will cook for a while before it asks
58:36 - me to do anything
58:39 - uh so now it's
58:41 - finding all the hardware deciding what
58:43 - drivers to use Etc and getting started
58:49 - this is open Suzy leap version 42.3
58:57 - and this is a typical gnome graphical
59:00 - booting screen while it's getting itself
59:03 - ready
59:10 - so it should take a few more seconds
59:14 - I'll pause so we don't have to watch the
59:16 - whole thing okay it has moved on and
59:19 - it's about ready to bring up a graphical
59:21 - screen
59:22 - and there we go
59:26 - so it's initializing the hardware on the
59:28 - system
59:33 - okay now it's asking whether we want to
59:35 - accept English as a language
59:38 - and also the license agreement so we'll
59:40 - just say sure
59:42 - click on the next button
59:44 - is doing more probing of the system
59:46 - deciding what to do
59:51 - and it says in a very small font
59:54 - initializing
59:55 - the installation now it would like to
59:58 - take a default
60:00 - partition scheme which we will override
60:04 - um so let me say edit proposed settings
60:08 - and I will take a partition-based
60:11 - proposal
60:12 - I will choose for my root partition ext4
60:16 - I won't have any separate home partition
60:19 - or other partitions to keep things
60:21 - simple and that's all I have to choose
60:23 - so it's pretty simple
60:26 - and it says here it's going to create a
60:28 - swap partition of two gigabytes
60:31 - and then a root partition for everything
60:33 - else 28 gigabytes
60:36 - and so I'm happy enough with that so
60:39 - I'll just say next
60:47 - and first thing is just to pick the time
60:50 - zone so I'll pick Central Time
60:53 - where I am currently sitting
60:56 - and I could do some other settings
61:00 - do that unless I don't want to take
61:02 - automatic time setting
61:04 - so I just say next
61:07 - and here I have a choice for what kind
61:09 - of desktop let me pick the gnome desktop
61:11 - I could pick the KDE or as a server pure
61:14 - text mode no graphical or I can do
61:16 - custom to do something a little more
61:19 - complicated or different
61:22 - and then it wants me to give up
61:25 - a full name for uh the main users I'll
61:28 - say LF student
61:31 - and for the username I'll pick student
61:33 - and I'll give a password
61:37 - and then I will not pick use this
61:39 - password for system administrator that
61:41 - would be like what Ubuntu does and I
61:43 - will not pick automatic log and it's
61:45 - generally not a good idea to let your
61:47 - system log in without having to give a
61:50 - password
61:51 - so I'll say next
61:53 - it doesn't like my password because it's
61:55 - too simple but I'll say okay do it and
61:59 - now I have to give a root password
62:03 - and you might want to test your keyboard
62:05 - layout to make sure you have the right
62:06 - language
62:09 - I'll say next and once again it's going
62:11 - to complain my password is too simple
62:15 - and then I just say install and that's
62:17 - all the choices
62:18 - that I actually have to make so they
62:22 - really nothing except specifying
62:24 - username password and what kind of
62:27 - desktop I want
62:29 - we can do further adjustments once the
62:31 - system is fully installed
62:34 - now while it's installing
62:36 - which should take about 10 minutes
62:39 - the default screen here is a slideshow
62:42 - giving you brochures and information if
62:44 - I click on details it's a little more
62:46 - fun to look at
62:48 - so you can see the overall progress as
62:51 - it goes this first bar here is for each
62:55 - package as it's being installed and on
62:57 - the bottom you can see I'm already about
62:58 - 15 percent installed
63:00 - so I'm going to pause the recordings
63:02 - it's kind of boring to watch it install
63:04 - all 1500 packages and I'll wait until
63:07 - it's asking me to do something again
63:09 - before resuming
63:11 - okay that took about less than 10
63:15 - minutes and now it's telling me the
63:17 - system is going to reboot and it did
63:22 - um and so we'll just see our normal
63:24 - booing
63:25 - of the new open Suzy system
63:34 - and it should quickly bring up the login
63:37 - screen
63:44 - just a few more seconds
63:55 - and there's our usual greeter screen
63:58 - I'll just type in the password for the
64:01 - student account
64:03 - and we have a fully operational open
64:05 - Souza system
64:07 - now the first thing I would do from here
64:09 - is update the system because there's
64:12 - always new updates to various packages
64:16 - since the DVD installed this was
64:19 - released so that's important for both
64:21 - security and performance
64:23 - and it's even prompting me to go ahead
64:26 - and do that and then I'd probably do
64:28 - some minor customizations about what
64:30 - kind of menus I see how Windows behave
64:32 - the keyboard Etc but I'll leave that for
64:36 - people to do as an exercise
64:43 - you have completed chapter three let's
64:46 - summarize the key Concepts covered
64:49 - a partition is a logical part of the
64:51 - disk
64:52 - a file system is a method of storing or
64:55 - finding files on a hard disk by dividing
64:58 - the hard disk into partitions data can
65:00 - be grouped and separated as needed when
65:03 - a failure or a mistake occurs only the
65:06 - data in the affected partition will be
65:08 - damaged while data on the other
65:11 - partitions will likely survive
65:14 - the boot process has multiple steps
65:16 - starting with the BIOS which triggers
65:18 - the bootloader to start up the Linux
65:21 - kernel from there the init Ram FS file
65:23 - system is invoked which triggers the
65:25 - init program to complete the startup
65:28 - process
65:29 - and determining the appropriate
65:31 - distribution to deploy requires that you
65:33 - match your specific system needs to the
65:37 - capabilities of the different
65:38 - distributions
65:43 - by the end of this chapter you should be
65:45 - able to manage graphical interface
65:47 - sessions perform basic operations using
65:51 - the graphical interface change the
65:53 - graphical desktop to suit your needs you
65:56 - can use either a command line interface
65:58 - or a graphical user interface when using
66:01 - Linux to work at the CLI you have to
66:04 - remember which programs and commands are
66:07 - used to perform tasks on the other hand
66:09 - using the GUI is often quick and easy it
66:12 - allows you to interact with your system
66:14 - through graphical icons and screens for
66:18 - repetitive tasks the CLI is often more
66:20 - efficient while the GUI is easier to
66:23 - navigate if you don't remember all the
66:24 - details or do something only rarely
66:26 - we'll learn how to manage sessions using
66:29 - the GUI for the three Linux distribution
66:32 - families that we cover the most in this
66:34 - course which are red hat including
66:37 - sentos and Fedora Susi open Susi and
66:40 - Debian Ubuntu and mint in subsequent
66:43 - sections of this course will concentrate
66:45 - in great detail on the command line
66:48 - interface which is pretty much the same
66:50 - on all distributions generally in a
66:53 - Linux desktop system the X Windows
66:55 - system is loaded as one of the final
66:57 - steps in the boot process it's often
67:00 - just called x a service called the
67:02 - display manager keeps track of the
67:04 - displays being provided and loads the X
67:07 - server so called because it provides
67:09 - graphical services to Applications
67:11 - sometimes called X clients the display
67:14 - manager also handles graphical logins
67:17 - and starts the appropriate desktop
67:19 - environment after a user logs in X is
67:22 - rather old software it dates back to the
67:24 - mid-1980s and as such it has certain
67:27 - deficiencies on Modern systems for
67:30 - example with security and it's been
67:33 - stretched rather far from its original
67:35 - purpose a newer system known as Weyland
67:38 - is gradually superseding it and is the
67:40 - default display system for Fedora rel8
67:42 - and other recent distributions for the
67:45 - most part it looks just like x to the
67:47 - user although under the hood it's quite
67:49 - different a desktop environment consists
67:52 - of a session manager which starts and
67:54 - maintains the components of the
67:56 - graphical session and the window manager
67:58 - which controls the placement and
68:01 - movement of Windows the window title
68:04 - bars and controls although these can be
68:07 - mixed generally a set of utilities
68:09 - session manager and Window Manager are
68:11 - used together as a unit and together
68:13 - they provide a seamless duct stop
68:15 - environment if the display manager is
68:18 - not started by default in the default
68:20 - run level you can start the graphical
68:22 - desktop in different in a different way
68:24 - after logging into a text mode console
68:27 - by running start X from the command line
68:29 - when you install a desktop environment
68:31 - the X display manager starts at the end
68:34 - of the boot process it's responsible for
68:36 - starting the graphics system logging in
68:38 - the user and starting the user's desktop
68:41 - environment you can often select from a
68:43 - choice of desktop environment when
68:46 - logging into the system gnome is a
68:48 - popular desktop environment with an easy
68:51 - to use graphical user interface it's
68:53 - bundled as the default desktop
68:55 - environment for most Linux distributions
68:57 - including Red Hat Enterprise Linux Rel
69:00 - Fedora Centos Susie Linux Enterprise
69:03 - Ubuntu and Debian gnome has menu based
69:07 - navigation and is sometimes an easy
69:09 - transition to accomplish for Windows
69:11 - users however as you'll see the look and
69:14 - feel can be quite different across
69:16 - distributions even if they're all using
69:18 - gnome another common desktop environment
69:20 - very important in the history of Linux
69:23 - and also widely used is KDE which has
69:26 - often been used in conjunction with Susi
69:28 - and open Susie as previously mentioned
69:31 - most desktop environments follow a
69:33 - similar structure to gnome and will
69:35 - restrict ourselves mostly to it to keep
69:37 - things less complex let's demonstrate
69:40 - how we log in and log out of a system
69:43 - which has already been booted on all
69:46 - recent distributions this looks pretty
69:48 - much the same here we're showing an
69:51 - instance of Centos stream which has
69:54 - three users on the system and I can log
69:56 - in and any one of them by selecting so
69:59 - let's go with the second one BJ moose
70:02 - and you'll notice that when I log in if
70:04 - I click on the gear item I have a choice
70:06 - of different desktops
70:08 - okay here's the default on Silhouette
70:11 - stream which is a Weyland but I can pick
70:13 - a couple of different kinds of
70:16 - x11s if I want I'll type in the password
70:22 - and I log in I depending on what's going
70:24 - on I may see a little bit of information
70:28 - um
70:28 - and that's all it's involved in logging
70:31 - in I probably won't see a hell of a lot
70:33 - this is a new user without much going on
70:37 - if I click on activities for instance
70:39 - I'll see some favorite applications
70:41 - if I click on Terminal here I can bring
70:44 - up a terminal if I want to do command
70:46 - line activity
70:47 - to log out all I have to do is go in the
70:49 - upper right corner
70:51 - and I can click on my name
70:54 - and then I can say either switch user or
70:56 - log out I would do switch user if I want
70:59 - to keep more than one session active at
71:01 - a time for different people which is
71:02 - something you probably won't want to do
71:05 - very often but it would mean if I came
71:08 - back into this user session I would see
71:10 - the whatever applications I had open but
71:13 - I'll just pick on log out
71:15 - and then I click here log out
71:18 - and I'm back to my greeter or my login
71:21 - screen where I can pick the users again
71:23 - so I can log in on any one of them so
71:27 - that's a simple demonstration of how one
71:28 - logs in and out of a system each Linux
71:32 - distribution comes with its own set of
71:34 - desktop backgrounds you can change the
71:36 - default by choosing a new wallpaper or
71:39 - selecting a custom picture to be set as
71:41 - the desktop background if you don't want
71:44 - to use an image as the background you
71:47 - can select a color to be displayed on
71:49 - the desktop instead in addition you can
71:52 - also change the desktop theme which
71:54 - changes the look and feel of the Linux
71:56 - system the theme also defines the
71:59 - appearance of application windows so
72:02 - let's see how to change the desktop
72:03 - background and theme
72:06 - we're going to demonstrate how to change
72:08 - the background wallpaper on a red hat 7
72:12 - system all recent Linux distributions
72:14 - have exactly the same method so this
72:16 - will suffice the show for all
72:20 - so all we have to do is click on the
72:23 - background with a right click and change
72:26 - background
72:29 - click on background again and then we
72:32 - have a choice between
72:34 - wallpapers that the system knows already
72:36 - and it's possible to load up other ones
72:39 - so let's say we pick this one here
72:43 - and you see now the background has been
72:45 - changed
72:47 - or I could pick for instance a picture
72:50 - stored on my machine in my pictures
72:52 - directory under my home directory so
72:55 - I'll pick this one
72:58 - and you see it's been changed
73:01 - so that's all we have to do to change
73:03 - the background on any recent Linux
73:05 - system
73:10 - most common settings both personal and
73:14 - system-wide are to be found by clicking
73:16 - in the upper right hand corner on either
73:19 - a gear or other obvious icon depending
73:22 - on your Linux distribution
73:25 - however there are many settings which
73:27 - many users would like to modify which
73:30 - are not accessible in that way the
73:33 - default settings utility is
73:35 - unfortunately rather Limited in modern
73:37 - gnome-based distributions unfortunately
73:40 - the Quest for Simplicity has actually
73:42 - made it difficult to adapt your system
73:45 - to your tastes and needs
73:47 - fortunately there is a standard utility
73:49 - gnome tweaks which exposes many more
73:53 - setting options it also permits you to
73:55 - easily install extensions by external
73:57 - parties not all Linux distributions
73:59 - install this tool by default but it's
74:01 - always available you may have to run it
74:03 - by hitting alt F2 and then typing in the
74:06 - name you may want to add to your
74:08 - favorites list as we shall discuss in
74:11 - this screenshot the keyboard mapping is
74:13 - being adjusted so the useless cap slot
74:16 - key can be used as an additional control
74:19 - key this saves users who use control lot
74:22 - such as emacs aficionados from getting
74:25 - physically damaged by pinky strain
74:33 - the visual appearance of applications
74:35 - the buttons scroll bars widgets and
74:37 - other graphical components are
74:39 - controlled by a theme gnome comes with a
74:42 - set of different themes which can change
74:45 - the way your applications look
74:48 - the exact method for changing your theme
74:50 - may depend on your distribution
74:53 - for older gnome-based distributions you
74:56 - can simply run gnome tweaks as shown in
74:59 - the screenshot from Ubuntu however
75:06 - now you'll be able to see a
75:08 - demonstration for logging in and out on
75:11 - the major Linux distribution families
75:13 - will concentrate on in this course note
75:16 - that Evolution has brought us to a stage
75:18 - where a little it matters little which
75:20 - distribution you choose as they're all
75:22 - rather similar
75:23 - recent Linux distributions which use the
75:26 - gnome desktop look remarkably the same
75:29 - when it comes to the process of starting
75:31 - up and shutting down
75:33 - so we will demonstrate that here by
75:35 - using a VMware hypervisor on a red hat
75:38 - Enterprise Linux host and we'll
75:41 - demonstrate three recent distributions
75:44 - and how they boot
75:45 - so we've already teed them up so here I
75:49 - will start Sentosa stream
75:53 - here I will start Ubuntu 2004
75:56 - and here I will start open Suzy
76:01 - leap 15.3
76:04 - so you'll see a little bit different
76:05 - messages on each as they boot uh
76:08 - according to how grub is configured and
76:10 - what the possible kernel choices are it
76:14 - will take longer to boot than they would
76:16 - normally would if I was only doing one
76:18 - at a time
76:19 - simply because uh the host machine is a
76:22 - little bit overloaded running three
76:24 - virtual machines it really doesn't have
76:26 - a ton of memory in this case I have
76:30 - allotted three gigabytes of memory to
76:32 - each out of a total of 16 gigabytes on
76:37 - the machine so it's a little bit memory
76:39 - stressed so we'll just wait till they
76:42 - start and reach their greeter screen
76:44 - which you see we've already done that on
76:47 - Ubuntu
76:48 - we've already done that on open suse a
76:51 - leap and it's taking somewhat longer on
76:54 - Centos uh eight stream so let's log into
76:58 - these guys while we wait for sent a list
77:01 - stream to get ready so I'll log in the
77:04 - student
77:06 - password here on the Ubuntu machine I'll
77:10 - do the same thing on the open suse
77:12 - machine
77:16 - and now we're just waiting for the
77:18 - central S8 machine
77:23 - finally ready and then I'll log in there
77:25 - as well
77:28 - and you notice they have different
77:30 - background pictures just because we have
77:32 - selected different background pictures
77:34 - over time but they all arrive to pretty
77:37 - much the same appearance within
77:39 - activities and applications menu and
77:42 - then Ubuntu still likes to have this
77:46 - sidebar on the left with major
77:48 - applications
77:49 - I can easily bring that up on the other
77:52 - ones for instance if I type activities
77:54 - here
77:55 - activities on open Tuesday I will see
77:58 - the same thing there
78:01 - and then the process of shutting down is
78:03 - also quite similar all I need to do
78:06 - is click in the upper right hand corner
78:08 - and I find the power icon
78:11 - and I just say power off
78:14 - I'll do the same thing with Ubuntu
78:17 - again power off I'm gonna go power off
78:21 - and I could do the same thing with open
78:23 - Suzy
78:24 - power off and power off so it's
78:27 - remarkably the same from distribution to
78:29 - distribution these days
78:35 - it's often a good idea to lock your
78:37 - screen to prevent other people from
78:39 - accessing your session while you're away
78:41 - from your computer no this does not
78:43 - suspend the computer all your
78:45 - applications and processes continue to
78:48 - run while the screen is locked
78:51 - let's show how to lock unlock your
78:53 - screen on any recent gnome distribution
78:57 - so the simplest way is to go the upper
78:58 - right corner and click
79:00 - refine the lock button
79:04 - and simply and simply click on that and
79:06 - then you can unlock it by
79:09 - clicking on the display on the time
79:12 - there and just typing in the password
79:14 - again
79:16 - very simple another way to do it is
79:18 - through combination of keys uh depending
79:22 - on your machine this will generally be
79:23 - the Super Key plus l or the Super Key
79:27 - plus the Escape where the super key is
79:29 - also known as the Windows key
79:31 - uh so let me do that here and once again
79:33 - I brought up the lock window and I can
79:35 - simply unlock it again
79:38 - so that's all that's involved it's very
79:40 - simple
79:47 - Linux is a true multi-user operating
79:50 - system which allows more than one user
79:52 - to be simultaneously logged in if more
79:55 - than one person uses the system it's
79:57 - best for each person to have their own
79:58 - user account and password this allows
80:01 - for individualized settings home
80:04 - directories and other files users can
80:06 - take turns using the machine while
80:09 - keeping everyone's sessions alive or
80:11 - even be logged in simultaneously through
80:14 - the network
80:15 - let us demonstrate how to switch users
80:18 - on an Ubuntu machine with several
80:21 - accounts
80:23 - so first I will choose the Linux
80:26 - Foundation student as the account to log
80:28 - into
80:29 - type my password and sign in
80:34 - and then if I look in the upper right
80:36 - hand corner
80:38 - and click there
80:39 - I will see LF student
80:42 - and I can click on either log out or
80:44 - switch user notice if I log out I really
80:48 - log out but if I switch user I will just
80:50 - lock the user account and then when I
80:52 - start up I will preserve all my sessions
80:55 - and open Windows Etc when I restart
80:59 - on some distributions you may actually
81:00 - see a list of users at this screen but
81:04 - not on Ubuntu
81:05 - so I'll say switch user back to the
81:08 - greeter screen
81:09 - and let me pick the second one Theodore
81:12 - cleaver
81:15 - and login as that other user
81:19 - and there we go and now if I look up
81:22 - here again I can do the same thing
81:25 - so let me click on the name and I'll say
81:27 - switch user
81:30 - and if I pick student again you notice
81:32 - here it says unlock and not restart that
81:36 - means that if I were to log in now I
81:38 - will have preserved all the open windows
81:39 - and running applications from before
81:43 - this will look the same essentially on
81:45 - all Linux distributions of recent
81:48 - vintage so it's very easy to switch
81:50 - users and not lose any information from
81:52 - what you're already doing
81:59 - besides normal daily starting and
82:02 - stopping of the computer a system
82:04 - restart may be required as part of
82:06 - certain major system updates generally
82:09 - only those involving installing a new
82:11 - Linux kernel initiating the shutdown
82:14 - process from the graphical desktop is
82:17 - rather trivial on most current Linux
82:19 - distributions with very little variation
82:21 - we'll discuss later how to do this from
82:24 - the command line using the shutdown
82:26 - command in all cases you click on either
82:29 - a settings or gear or a power icon and
82:32 - follow the prompts to shut down the
82:34 - computer on any recent gnome based Linux
82:37 - distribution perform the following steps
82:40 - first click the power or the gear icon
82:43 - in the upper right hand corner of the
82:45 - screen
82:46 - second click on click on the power off
82:48 - restart or cancel
82:50 - if you do nothing the system will shut
82:52 - down in 60 Seconds
82:55 - shut down reboot and log out operations
82:57 - will ask for confirmation before going
82:59 - ahead this is because many applications
83:02 - will not save their data their data
83:04 - properly when terminated this way always
83:07 - save your documents and data before
83:09 - restarting shutting down or logging out
83:13 - all modern computer support suspend or
83:16 - sleep mode when you want to stop using
83:19 - your computer for a while
83:21 - suspend mode saves the current system
83:23 - State and allows you to resume your
83:26 - session more quickly while remaining on
83:28 - but uses very little power in the
83:31 - sleeping state it works by keeping your
83:34 - system's applications desktop and so on
83:36 - in system Ram but turning off all the
83:39 - other Hardware this shortens the the
83:41 - time for a full system startup as well
83:44 - as conserves battery power once note
83:46 - that modern Linux distributions actually
83:48 - boot so fast that the amount of time
83:50 - saved is often minor
83:56 - even experienced users can forget the
83:59 - precise command that launches an
84:01 - application or exactly what options and
84:03 - arguments it requires fortunately Linux
84:06 - allows you to quickly open applications
84:08 - using the graphical interface
84:10 - applications are found at different
84:12 - places in Linux and with a gnome
84:15 - they can be found from the applications
84:17 - menu in the upper left hand corner or
84:21 - from the activities menu in the upper
84:24 - left hand corner
84:25 - also in some Ubuntu versions from the
84:29 - dash button in the upper left hand
84:31 - corner for KDE and some other
84:34 - environments applications can be opened
84:37 - from the button in the lower left hand
84:39 - corner in the upcoming sections you will
84:42 - learn how to perform basic Linux
84:43 - operations using the graphical interface
84:51 - unlike other operating systems the
84:53 - initial install of Linux usually comes
84:55 - with a wide range of applications and
84:57 - software archives that contain thousands
85:00 - of programs that enable you to
85:01 - accomplish a wide variety of tasks with
85:04 - your computer
85:05 - for most key tasks a default application
85:08 - is usually already installed however you
85:10 - can always install more applications and
85:12 - try different options
85:14 - for example Firefox is popular as the
85:17 - default browser in many Linux
85:19 - distributions while Epiphany concodor
85:21 - and chromium the open source of Google
85:25 - Chrome are usually available for install
85:27 - from software repositories proprietary
85:30 - web browsers such as Opera and chrome
85:32 - are also available locating applications
85:35 - from The Gnome and KDE menus is easy as
85:38 - they're neatly organized and functional
85:40 - sub-menus
85:41 - multiple applications are available to
85:44 - accomplish various tasks and to open a
85:47 - file type of a file of a given type for
85:49 - example you can click on a web address
85:51 - while reading an email and launch a
85:53 - browser such as Firefox or Chrome
85:56 - to set the default applications enter
85:58 - the settings menu on all recent Linux
86:01 - distributions and then click on either
86:03 - default applications or details default
86:07 - applications
86:09 - let's now demonstrate how to set default
86:11 - applications on a red hat system
86:14 - we go to the upper right hand corner
86:16 - click on the top bar then scroll down to
86:20 - the gears icon for settings
86:22 - go down to the bottom for details
86:26 - and then I can click on default
86:28 - applications
86:30 - so you see under web or browser there
86:33 - are three choices on this system I have
86:35 - Google Chrome Firefox or Opera we'll
86:38 - leave it at Google Chrome
86:41 - for video the default choices videos
86:44 - which is actually a program called totem
86:47 - but let's switch it to the VLC media
86:50 - player
86:51 - and for the image viewer I have the
86:53 - built-in image viewer or I could switch
86:56 - to the new image manipulation program
86:58 - better known as
87:00 - so on all recent distributions with a
87:04 - known desktop
87:05 - the procedure is identical and
87:07 - absolutely the same and it's very simple
87:09 - to change your default applications
87:16 - each distribution implements the
87:18 - Nautilus or file manager utility which
87:22 - is used to navigate the file system it
87:25 - can locate files and when a file is
87:27 - clicked upon either it will run if it's
87:29 - a program or an associate application
87:31 - will be launched using the file as data
87:34 - this behavior is completely familiar to
87:36 - anyone who has used other operating
87:37 - systems to start the file manager you
87:41 - will have to click on its icon a file
87:43 - cabinet which is easily found usually
87:46 - under favorites or accessories it will
87:49 - have the name files this will open a
87:52 - window with your home directory
87:54 - displayed
87:55 - the left panel of the file manager
87:57 - window holds a list of commonly used
88:00 - directories such as desktop documents
88:03 - downloads and pictures
88:10 - the file manager lets you access
88:12 - different locations on your computer and
88:14 - the network including the home directory
88:16 - the desktop documents pictures and other
88:21 - other locations every user with an
88:23 - account on the system will have a home
88:25 - directory usually created under home
88:28 - slash home usually named according to
88:31 - the user such as slash home student by
88:34 - default files the user saves will be
88:36 - placed in a Directory Street starting
88:39 - there account creation whether during
88:41 - system installation or at a later time
88:43 - when a new user is added also induces
88:46 - default directories to be created under
88:49 - the user's home directory such as
88:51 - documents desktop and downloads
88:59 - the file manager allows you to view
89:01 - files and directories in more than one
89:03 - way
89:04 - you can switch between the icons and
89:07 - list formats either by clicking The
89:09 - Familiar icons in the top bar or you can
89:12 - press Ctrl 1 or control 2 respectively
89:14 - in addition you can also arrange the
89:16 - files and directories by name size type
89:19 - or modification to date for future
89:22 - sorting to do so click View and select
89:25 - arrange items another useful option is
89:28 - to show hidden files sometimes and
89:31 - precisely called system files which are
89:34 - usually configuration files that are
89:35 - hidden by default and whose name starts
89:38 - with a DOT to show him file select show
89:41 - hidden files from the menu or press Ctrl
89:45 - H the file browser provides multiple
89:47 - ways to customize your window view to
89:50 - facilitate easy drag and drop file
89:52 - operations you can also alter the size
89:55 - of the icons by selecting zoom in and
89:58 - zoom out under the view menu the file
90:02 - manager includes a great Search tool
90:04 - inside the file browser window
90:06 - one click search in the toolbar to bring
90:09 - up a text box then enter the keyword in
90:13 - this text box this causes the system to
90:15 - perform a recursive search from the
90:17 - current directory for any file or
90:19 - directory which contains a part of this
90:22 - keyword
90:23 - you can refine your search beyond the
90:24 - initial keyword by providing drop down
90:27 - menus to further filter the search
90:34 - deleting a file in Nautilus will
90:36 - automatically move the deleted file to
90:38 - the local share slash trash files
90:41 - directory basically a trash can under
90:44 - the user's home directory there are
90:46 - several ways to delete files and
90:47 - directories under Nautilus
90:49 - one you can select all you select all
90:51 - the files and directories that you want
90:53 - to delete then press Ctrl delete on your
90:56 - keyboard or right click the file
90:58 - then select move to trash
91:01 - note that you may have a delete
91:04 - permanently option which bypasses the
91:06 - trash folder and this option may be
91:09 - visible all the time or only in list
91:11 - rather than icon mode to permanently
91:15 - delete a file on the left panel inside a
91:18 - nautilus file browser window right click
91:21 - on the trash the on the trash directory
91:24 - select empty trash
91:26 - and that's all alternatively select the
91:29 - file or directory you want to
91:31 - permanently delete and press shift
91:34 - delete
91:35 - let's see how to locate the Firefox
91:37 - application in locate Firefox
91:41 - click activities on the top left corner
91:43 - of your desktop on the left panel click
91:46 - the show applications icon click the
91:49 - Firefox icon
91:52 - close Firefox by clicking close in the
91:56 - top right corner of the Firefox window
91:59 - next let's explore the home directory
92:01 - using the file manager try to View files
92:04 - in list mode create a new empty document
92:07 - save it and remove it
92:10 - click activities in the upper left
92:11 - corner of your desktop
92:14 - in the left panel click the file manager
92:16 - icon
92:18 - this will by default open the home
92:20 - directory to View files in list mode
92:22 - click the list icon in the upper right
92:25 - of the file manager window
92:27 - double-click the document directory to
92:29 - open it click activities in the top left
92:32 - corner of your desktop to launch G edit
92:37 - type G edit in the search box
92:40 - click the G edit icon to open it
92:44 - type your name and click close in the
92:46 - top right corner of the G edit window to
92:49 - create and close a file
92:51 - click save as to save the created file
92:54 - select documents from the left panel of
92:57 - the save as window
92:59 - type test to save the file by that name
93:03 - click save to save the file and close G
93:05 - edit this brings you back to the
93:08 - document directory right-click the test
93:10 - file in the document window select move
93:13 - to trash to remove the file
93:20 - you have completed chapter 4. let's
93:22 - summarize the key Concepts covered gnome
93:25 - is a popular desktop environment and
93:28 - graphical user interface that runs on
93:30 - top of the Linux operating system
93:33 - the default display manager for Gnome is
93:35 - called gdm the gdm display manager
93:39 - presents the user with the login screen
93:41 - which prompt for the user the login
93:43 - username and password
93:45 - log out through the desktop environment
93:47 - kills all processes in your current X
93:50 - session and returns to the display
93:52 - manager login screen
93:54 - Linux enables users to switch between
93:56 - logged in sessions so spending puts the
93:59 - computer into sleep mode
94:01 - for each key task there is generally a
94:04 - default application installed
94:06 - every user created in the system will
94:09 - have a home directory
94:11 - the places menu contains entries that
94:14 - allow you to access different parts of
94:16 - the computer and the network
94:19 - Nautilus gives three formats to View
94:21 - files
94:23 - each Linux distribution comes with its
94:26 - own set of desktop backgrounds
94:28 - gnome comes with a set of different
94:30 - themes which can change the way your
94:33 - applications look
94:38 - by the end of this chapter you should be
94:40 - able to apply system display and date
94:43 - and time settings using the system
94:44 - settings panel
94:46 - track the network settings and manage
94:48 - connections using the network manager in
94:51 - Linux
94:52 - install and update software in Linux
94:54 - from a graphical interface
94:57 - note that we'll revisit all these tasks
94:59 - later when we discuss how to accomplish
95:01 - them from the command line
95:07 - the system settings panel allows you to
95:09 - control most of the basic configuration
95:12 - options and desktop settings such as
95:14 - specifying the screen resolution
95:16 - managing network connections or changing
95:18 - the date and time of the system
95:21 - for The Gnome desktop manager one clicks
95:24 - on the upper right hand corner and then
95:26 - selects the tools image the screwdriver
95:28 - crossed with a wrench or gear depending
95:31 - on your distribution you may find other
95:33 - ways to get into the settings
95:34 - configurations as well you'll also find
95:36 - variations in the menu layout between
95:38 - Linux distributions and versions so you
95:40 - may have to hunt for the settings you
95:42 - need or to examine or modify
95:48 - to get deeper into configuration one can
95:52 - click on the devices on the previous
95:54 - menu in order to configure items like
95:57 - the display the keyboard the printers
95:59 - Etc one can also click on the users icon
96:03 - which may be under details to set values
96:06 - for system users such as their login
96:08 - picture password Etc
96:14 - a lot of personalized configuration
96:17 - settings do not appear on the settings
96:18 - menu instead you have to launch a tool
96:21 - called either gnome tweaks or gnome
96:25 - tweak tool we have not really discussed
96:27 - working at the command line yet but you
96:29 - can always launch a programs such as
96:30 - this by doing alt F2 and typing in the
96:34 - command
96:35 - some distributions have a link to the
96:36 - tweaks menu and the settings but for
96:39 - some mysterious reason many obscure this
96:42 - Tool's existence and it becomes hard to
96:44 - discover how to modify even rather basic
96:47 - desk type attributes and behaviors
96:49 - important things you can do with this
96:51 - tool include selecting a theme
96:53 - configuring extensions which you can get
96:56 - from your distribution or download from
96:59 - the internet you can control fonts
97:01 - modify the keyboard layout and set which
97:04 - programs start when you log in the most
97:06 - recent gnome versions have removed a lot
97:08 - of the functionality of gnome tweaks
97:11 - extensions now have to be configured
97:13 - using a new a new app called gnome
97:15 - extensions app the reasoning for this is
97:18 - obscure here you can see a screenshot
97:20 - from a red hat system with quite a few
97:23 - extensions installed but not all being
97:25 - used
97:30 - clicking on settings displays or
97:33 - settings devices displays will expose
97:35 - the most common settings for changing
97:37 - the desktop appearance these settings
97:39 - function independently of the specific
97:42 - display drivers you're running the exact
97:45 - appearance will depend enormously on how
97:48 - many monitors you have and other factors
97:50 - such as Linux distribution and
97:52 - particular version
97:54 - if your system uses a proprietary video
97:58 - card driver usually from Nvidia or AMD
98:01 - you'll probably have a separate
98:03 - configuration program for that driver
98:05 - this program may give more configuration
98:08 - options but may also be more complicated
98:11 - and might require this admin root access
98:14 - if possible you should configure the
98:16 - settings in the displays panel rather
98:18 - than with the proprietary program
98:21 - the X server which actually provides the
98:24 - the GUI uses slash Etc X11 xorg.com as
98:29 - its configuration file if it exists in
98:32 - modern Linux distributions this file is
98:34 - usually present only in unusual
98:36 - circumstances such as when certain less
98:39 - common graph drivers are in use changing
98:42 - this configuration file directly is
98:44 - usually for more advanced users
98:51 - while your system will usually figure
98:53 - out the best resolution for your screen
98:55 - automatically it may get this wrong in
98:57 - some cases or you might want to change
98:59 - the resolution to meet your needs
99:02 - you can accomplish this using the
99:04 - displays panel the switch the switch to
99:07 - the new resolution will be effective
99:09 - when you click apply and then confirm
99:11 - that the resolution is working in case
99:14 - the selected resolution fails to work or
99:16 - you're just not happy with the
99:18 - appearance the system will switch back
99:20 - to the original resolution after a short
99:22 - timeout once again the exact appearance
99:25 - of the configuration screen will vary a
99:27 - lot between distributions and versions
99:29 - but usually it's rather intuitive and
99:32 - easy Once you find the configuration
99:34 - menus
99:35 - in most cases the configuration for
99:38 - multiple displays is set up
99:39 - automatically as one big screen spanning
99:42 - all monitors using reasonable guests for
99:45 - screen layout if the screen layout is
99:47 - not as desired a checkbox can turn on
99:49 - mirrored mode where the same display is
99:51 - seen on all monitors clicking on a
99:54 - particular monitor image lets you
99:55 - configure the resolution of each one and
99:59 - whether they make one big screen or
100:02 - mirror the same video configuring
100:04 - display settings such as resolution is
100:06 - almost identical on all major
100:08 - distributions so we'll demonstrate that
100:11 - running virtual machines under VMware on
100:15 - a red hat 8 host
100:18 - so let's begin with showing what it
100:20 - looks like on Ubuntu
100:22 - so I go up in the upper right hand
100:24 - corner and I find the settings button
100:28 - and then in the main uh panel here we
100:32 - have displays so we've already clicked
100:34 - on that
100:35 - and you see uh the easiest thing to do
100:38 - here is I can change the resolution to
100:41 - be any one of these numbers
100:43 - now you can continuously vary the
100:46 - display size usually on a virtual
100:49 - machine
100:50 - and by dragging and dropping the corners
100:53 - you see now it's changed to another
100:54 - number but that's all that's involved in
100:57 - Ubuntu for instance
100:58 - if I want to go to open well let's try
101:02 - Centos
101:04 - incentives 8 stream actually I find the
101:08 - settings once again and then here I have
101:12 - to scroll down to devices
101:14 - and then displaces in there and we have
101:17 - the identical setup except for this
101:18 - night light option which is for looking
101:22 - in a darker situation which we also had
101:24 - in the Ubuntu was just located in a
101:27 - different place
101:28 - on open Tuesday
101:31 - you'll see it's virtually identical as
101:33 - well I just click on the settings gear
101:36 - button here
101:38 - and once again I have to go to devices
101:41 - like I did on the red hat system and I
101:45 - have the identical situation you
101:46 - couldn't tell what operating system you
101:49 - were on if you just looked at this
101:52 - now these are all virtual machines with
101:55 - one terminal if I look on the host which
101:57 - actually has three different monitors
101:59 - hooked up to it
102:01 - you'll see then I get something like
102:03 - this
102:04 - where I can see all three of my monitors
102:06 - uh I can figure any one of them here
102:09 - it's doing those the smaller one the 18
102:11 - inch one but I could switch to the 27 or
102:15 - the 24
102:17 - and I can control their different
102:20 - resolutions if I move these guys around
102:23 - here I can change the way the three of
102:25 - them are laid out for left to right I
102:29 - don't particularly want to do that
102:30 - because it gets kind of messy but this
102:33 - is how you can control which ones in the
102:35 - middle which is on the right or left Etc
102:38 - so these days configuring the display
102:40 - resolution and some other basic things
102:43 - is really very simple very intuitive the
102:45 - hardest thing is just to find the the
102:48 - settings icon to click on
102:55 - by default Linux always uses coordinated
102:58 - universal time for its own internal time
103:01 - keeping displayed or stored time values
103:04 - rely on the system time zone setting to
103:06 - get the proper time UTC is similar to
103:09 - but more accurate than Greenwich Mean
103:12 - Time
103:13 - if you click on the time displayed on
103:15 - the top panel you can adjust the format
103:17 - with which the date and time is shown on
103:20 - some distributions you can also alter
103:22 - the values the more detailed date and
103:25 - time settings can be selected from the
103:27 - date and time window in the system
103:29 - settings menu the automatic settings are
103:33 - referring to the use of network time
103:35 - protocol which we'll discuss next
103:43 - the network time protocol is the most
103:46 - popular and reliable protocol for
103:48 - setting the local time by Consulting
103:50 - established internet servers Linux
103:53 - distributions always come with a working
103:55 - ntp setup which refers to a specific
103:58 - time servers run or relied on by the
104:01 - distribution this means that no setup
104:03 - Beyond on or off is generally required
104:05 - for Network time synchronization
104:12 - all Linux distributions have network
104:14 - configuration files but file formats and
104:16 - locations can differ from one
104:18 - distribution to another hand editing of
104:20 - these files can handle quite complicated
104:22 - setups but it's not very dynamic or easy
104:25 - to learn and use network manager was
104:28 - developed to make things easier and more
104:31 - uniform across distributions it can list
104:34 - all available networks both wired and
104:36 - wireless allow the choice of a wired
104:39 - Wireless or a mobile broadband Network
104:41 - handle passwords and set up virtual
104:43 - private Networks except for unusual
104:47 - situations it's generally best to let
104:49 - network manager establish your
104:51 - connections and keep track of your
104:53 - settings in this section you'll learn
104:55 - how to manage network connections
104:57 - including wired and wireless connections
105:00 - and mobile broadband and VPN connections
105:08 - wired connections usually do not require
105:10 - complicated or manual configuration the
105:13 - hardware interface and Signal presence
105:15 - are automatically detected and then
105:17 - network manager sets the actual network
105:19 - settings via Dynamic host configuration
105:22 - protocol or DHCP
105:25 - for static configurations that do not
105:28 - use DHCP manual setup can also be done
105:32 - easily through network manager you can
105:35 - also change the Ethernet Mac address or
105:37 - media Access Control address if your
105:40 - Hardware supports it the MAC address is
105:43 - a unique hexadecimal number of your
105:45 - network card wireless networks are
105:47 - usually not connected by default you can
105:50 - view the list of available wireless
105:51 - networks and see which one if any you're
105:55 - currently connected to by using network
105:57 - manager you can then add edit or remove
106:00 - known wireless networks and also specify
106:03 - which ones which ones you want connected
106:05 - by default when present
106:11 - to configure a wireless network in any
106:14 - recent gnome-based distribution
106:17 - click on the upper right corner of the
106:19 - top panel which brings up a settings and
106:22 - or network window while the exact
106:24 - appearance will depend on Linux
106:26 - distribution inversion it will always be
106:29 - possible to click on a Wi-Fi Sub menu as
106:33 - long as the hardware is present here is
106:35 - an example from a rel8 system
106:38 - select the wireless network you wish to
106:40 - connect to if it's a secure network the
106:43 - first time it will request that you
106:45 - enter the appropriate password by
106:48 - default the password will be saved for
106:50 - subsequent connections if you click on
106:53 - Wi-Fi settings you will bring up this
106:56 - if you click on the gear icon for any
107:00 - connection you can configure it in more
107:02 - detail
107:03 - older and other Linux distributions may
107:06 - look quite a bit different in detail but
107:08 - the steps and choices are essentially
107:10 - identical as they're all running network
107:12 - manager with perhaps somewhat different
107:14 - clothing
107:15 - let's demonstrate
107:17 - how to control wired and wireless
107:20 - network connections on a red hat system
107:25 - if I click on the upper right hand
107:26 - corner for instance if I want to look at
107:28 - the wired connection I can just scroll
107:30 - down to the wired connection
107:32 - and then wired settings
107:34 - and it asks me for my password
107:37 - the root the root password because it
107:40 - wants
107:41 - to have a super user only control
107:44 - network connections
107:46 - and you'll see I have a thousand megabit
107:48 - connection
107:49 - if I click on the gear icon I can
107:51 - control the settings
107:53 - on the details first screen it says it
107:56 - connects automatically when the system
107:57 - starts and all users can use it
108:00 - on identity I give what the name of the
108:04 - interface looks like not the name of the
108:06 - system
108:07 - in older systems that would have been
108:10 - eth0 eth1 Etc but as we will discuss
108:14 - later newer systems have these more
108:16 - complex names
108:18 - under ipv4 we control the basic Internet
108:21 - Protocol systems settings
108:25 - most of the time you'll leave it alone
108:27 - it automatically hcp Dynamic host
108:30 - configuration protocol
108:32 - where the system figures out its address
108:34 - from the server Etc if you understand
108:38 - how the importance of manual settings
108:41 - you can specify an address a net mask a
108:45 - Gateway you can select a particular DNS
108:47 - server and you can specify routes to
108:50 - certain addresses
108:52 - if you understand those Concepts this is
108:54 - where you would go to control all that
108:56 - we're not changing anything so I'll just
108:58 - hit cancel
109:00 - now if I want to control Wi-Fi settings
109:02 - I could go back to that upper right
109:03 - corner or I can just click on
109:06 - the Wi-Fi setting here and once again
109:08 - it's asking me for the
109:11 - super user password
109:13 - these are the different wireless
109:15 - networks that have to be that are
109:17 - available at the moment they all have
109:18 - lots next to them means they require a
109:21 - password this is the one that I'm
109:23 - actually on coopj the first one
109:25 - if I click on the settings there once
109:28 - again it's going to ask me
109:31 - for um
109:33 - my my super user password and I see
109:37 - essentially the exact same settings I
109:38 - had on the wired connection
109:40 - the automatic startup as other people
109:44 - use it the identity and whether I want
109:47 - to use DHCP or set things manually or
109:49 - not
109:51 - so that's all there really is in the
109:53 - graphical interface to control basic
109:55 - network connections it's rather simple
109:58 - and it looks the same at all recent
110:00 - Linux distributions
110:07 - you can set up mobile broadband
110:09 - connection with network manager which
110:12 - will launch a wizard to set up the
110:14 - connection details for each connection
110:17 - once the configuration is done the
110:19 - network is configured automatically each
110:21 - time the Broadband network is attached
110:24 - network manager can also manage this
110:26 - manage your VPN connections it supports
110:29 - many VPN Technologies such as native
110:32 - ipsec Cisco open connect via either the
110:35 - Cisco client or a native open source
110:37 - client Microsoft pptp and openvpn
110:41 - you might get support for a VPN as a
110:44 - separate package from your distributor
110:47 - you need to install this package if your
110:49 - preferred VPN is not supported
110:56 - each package and Linux distribution
110:58 - provides one piece of the system such as
111:01 - the Linux kernel the C compiler
111:04 - utilities for manipulating text or
111:06 - configuring the network or for your
111:08 - favorite web browsers and email clients
111:11 - packages often depend on each other for
111:15 - example because your email client
111:16 - communicates using SSL TLS it will
111:19 - depend on a package which provides the
111:21 - ability to encrypt and decrypt SSL and
111:24 - TLS communication and will not install
111:26 - unless that package is also installed at
111:29 - the same time
111:30 - all systems have a lower level utility
111:33 - which handles the details of unpacking a
111:35 - package and putting the pieces in the
111:37 - right places most of the time you will
111:39 - be working with a higher level utility
111:42 - which knows how to download packages
111:44 - from the internet and can manage
111:46 - dependencies and groups for you
111:49 - in this section you will learn how to
111:50 - install and update software in Linux
111:52 - using the dbn packaging system used by
111:56 - systems such as Ubuntu as well and RPM
111:59 - Packaging Systems which is used by both
112:02 - red hat and the Susie family systems
112:04 - there are these are the main ones and
112:06 - use although there are other ones which
112:09 - work well for other distributions which
112:11 - are less used
112:16 - let's look at the package management for
112:19 - the Debian family system
112:22 - dpkg is the underlying package manager
112:25 - for these systems it can install remove
112:28 - and build packages unlike high-level
112:32 - packages Management Systems it does not
112:34 - automatically download and install
112:36 - packages and satisfy their dependencies
112:38 - for deviant based systems the higher
112:41 - level package management system is the
112:45 - advanced package tool or apt system of
112:49 - utilities generally while each
112:51 - distribution within the Debian family
112:53 - uses apt it creates its own user
112:56 - interface on top of it for example
112:58 - aptkit or app kit synthetic Ubuntu
113:02 - software sensor Etc although apt
113:04 - repositories are generally compatible
113:06 - with each other the software they
113:07 - contain generally is not therefore most
113:10 - repositories Target a particular
113:12 - distribution like Ubuntu and often
113:15 - software Distributors ship with multiple
113:17 - repositories to support multiple
113:19 - distributions demonstrations are shown
113:21 - later in this section
113:27 - Red Hat package manager or RPM is the
113:30 - other package management system popular
113:32 - on Linux distributions it was developed
113:34 - by red hat and adopted by a number of
113:36 - other distributions including Sushi and
113:39 - open Sushi OS Oracle Linux and others
113:42 - the high level package manager differs
113:45 - between distributions Red Hat Family
113:48 - distributions historically use Rel or
113:50 - syn Os and Fedora uses dnf while
113:54 - retaining good backward compatibility
113:56 - with the older yum program Susie family
113:59 - distributions such as open Susi also use
114:01 - RPM but use the zipper interface
114:09 - the yet another setup tool or yes
114:12 - software manager is similar to other
114:14 - graphical package managers it's an RPM
114:18 - based application you can add remove or
114:20 - update packages using this application
114:23 - very easily to access the yes software
114:26 - manager first click activities
114:29 - then in the search box type yeast and
114:33 - click on the yes icon then click
114:36 - software management you can also find
114:38 - yes by clicking on applications other
114:41 - guest which is a strange place to put it
114:44 - but open sources yes software management
114:46 - application is similar to The graphical
114:49 - package managers and other distributions
114:51 - a demonstration of the yes software
114:54 - manager is seen later in this section
115:00 - we are now going to demonstrate software
115:03 - package management from a graphical
115:05 - interface
115:06 - using the open Suzy Linux distribution
115:10 - the tool we want to use for doing this
115:13 - is yes yast and there's two different
115:16 - ways I can reach it if I have the gnome
115:19 - shell extension installed which shows
115:21 - the applications menu which doesn't come
115:24 - by default
115:25 - I can go down to systems tools and then
115:28 - go down to yes
115:30 - or I can always go up
115:32 - to the upper right hand corner click on
115:34 - the tool icon
115:36 - and then at the bottom here on the
115:38 - system click on yes
115:40 - it will want the root password because
115:42 - I'm going to manipulate what's installed
115:45 - on the system
115:47 - and so if I go to software I can go to
115:50 - software management
115:54 - now the first thing that yes has to do
115:57 - is study the system and get a database
115:59 - of every possible package
116:02 - so it you can look at the packages on
116:05 - the system in different ways
116:07 - you can look by what's called RPM groups
116:11 - so here's all the games and are grouped
116:14 - under Amusements
116:15 - I have applications development and all
116:19 - different kinds of development
116:20 - subcategories
116:21 - tools documentation Etc or RPM groups
116:26 - that is rpm groups okay
116:31 - or I can look at package groups which
116:34 - maybe is a little more intuitive
116:35 - so I could click on let's say multimedia
116:38 - and see all the different programs are
116:40 - involved in uh in dealing with
116:41 - multimedia
116:43 - suppose I want to install something or
116:46 - inquire as to where something is
116:48 - installed I can click on search
116:51 - and type something in here I'll type the
116:54 - new plot
116:57 - and I bring up quickly all the different
116:59 - canoe plot uh pro programs there are the
117:04 - main one you see has a check mark in the
117:07 - box that means it's already installed
117:10 - [Music]
117:10 - um
117:12 - I will decide to install gnu plot.doc
117:16 - which is a small documentation package
117:19 - and then in order to do the install I
117:21 - will click on accept
117:24 - and it will go ahead and do it it's a
117:26 - pretty small package it doesn't take
117:28 - long if you needed some other packages
117:30 - to function it would have installed them
117:32 - at the same time
117:34 - so now I'll say continue
117:37 - and if I could want to remove it because
117:40 - I don't really need it I'll type it that
117:42 - in the search again
117:44 - and then I click on here
117:48 - um
117:50 - until I get an X for removal
117:53 - and then I say accept
117:56 - and it's removing it so that's all I had
118:00 - to do to do some basic package
118:02 - installation and removal under gnome
118:04 - software with open Susie pretty simple
118:14 - experienced Linux administrators
118:17 - probably do most of their package
118:19 - management from the command line rather
118:22 - than from a graphical interface
118:25 - however every Linux distribution has at
118:28 - least one graphical interface for
118:31 - installing upgrading removing Etc
118:34 - various software packages
118:36 - so let's take a look at a recent Ubuntu
118:39 - system
118:40 - I can go to Applications and then down
118:43 - to system tools and first let's look at
118:47 - the one at the bottom here which just
118:49 - says software
118:50 - this is actually a program called gnome
118:53 - software you can always install it if it
118:56 - hasn't been installed on your system it
118:59 - looks somewhat like an app store or a
119:01 - Play Store from Android and it's pretty
119:05 - obvious you can click on any one of
119:07 - these to try to install Etc and at the
119:10 - bottom you'll see things are grouped by
119:13 - category so for instance oh I could
119:16 - click on utilities
119:18 - and then I'll see a bunch of different
119:20 - utilities that may or may not be
119:23 - installed on your system already okay
119:27 - or I could search for various things so
119:30 - let me go back to the main page and
119:34 - um
119:35 - if I click on The Hourglass up in the
119:37 - corner here I can search
119:39 - so let's say I search on Terminal
119:45 - here you'll see it'll come up with a
119:46 - number of different things I could
119:48 - install
119:49 - you'll see here this terminal here is
119:52 - the gnome terminal that it says
119:54 - installed in a rather small font here
119:57 - uh and if I wanted to install something
120:00 - else I could just say for instance here
120:03 - I could click on that and I would say
120:05 - install and it could just be installed
120:08 - or if I want something a little more fun
120:10 - let's say
120:11 - look for a program called cheese
120:14 - which lets you use your
120:19 - webcam to take pictures or or make
120:24 - videos Etc and I can say remove because
120:27 - it turns out it's already installed so
120:29 - let me remove it
120:32 - and it's going to want a password to do
120:34 - this which should be that price
120:35 - surprising
120:39 - so I type my password and it's removing
120:42 - it
120:43 - and then uh
120:45 - you know if I want to reinstall it which
120:47 - I'll do I'll just say install and give
120:49 - the password again
120:53 - so this is not a very complex
120:55 - program to use uh it's pretty easy to
120:58 - use Canon software and you'll notice at
121:01 - the top you have a list here of explore
121:04 - which is where we are now installed
121:06 - would be all your installed packages
121:09 - and if you do updates it's telling me
121:12 - the system has two sets of updates that
121:14 - I really should install but to save time
121:16 - I'll do that right now
121:19 - so that's one graphical interface
121:21 - there's a much older graphical interface
121:23 - that's available in Ubuntu called
121:26 - synaptic so let's do that one
121:33 - photo is under system tools there we go
121:38 - synaptic package manager
121:44 - and once again this is going to ask
121:47 - for a password
121:49 - and uh it's an informatory message and
121:54 - this is actually a very simple easy to
121:57 - use and uh gives you a clearer
121:59 - uh vision of exactly where everything
122:01 - came from
122:03 - compared to the more modern graphical
122:05 - interfaces
122:07 - it's pretty straightforward to use
122:09 - um it's organized by either sections
122:12 - here I can do it in other ways I can do
122:15 - searching uh uh Etc so suppose I want to
122:20 - search I'll do the same search here
122:22 - terminal
122:25 - and it's going to show me all the
122:27 - packages that either have terminal the
122:30 - name or discuss terminal if I want to
122:32 - restrict it to ones that have only
122:35 - uh in the name I can do that
122:39 - and it's pretty straightforward to use I
122:41 - won't run through this these are already
122:43 - installed because they're in green
122:45 - uh I can install any of these other ones
122:48 - and I can just click on that and then I
122:52 - will say I want to do QT terminal
122:54 - I would say Mark for installation
122:58 - and it says in order to this the work it
123:00 - has to install all these other packages
123:02 - too which it depends on so we won't
123:04 - bother to do that and that's briefly
123:08 - what you can do on an Ubuntu system with
123:10 - a graphical software package
123:13 - installations and removals
123:20 - you have completed chapter five so let's
123:23 - summarize the key Concepts covered
123:26 - you can control basic configuration
123:28 - options and desktop settings through the
123:31 - system settings panel
123:34 - Linux always uses coordinated universal
123:37 - time or UTC for its own internal
123:39 - timekeeping you can set the date and
123:41 - time settings from the system settings
123:43 - window
123:44 - the network time protocol is the most
123:47 - popular and reliable protocol for
123:49 - setting the local time via internet
123:51 - servers
123:52 - the displays panel allows you to change
123:55 - the resolution of your display and
123:57 - configure multiple screens
123:59 - the network manager can present
124:02 - available wireless networks it allows
124:04 - the choice of a wireless or mobile
124:06 - broadband Network handles passwords and
124:10 - sets up vpns the dpkg and RPM are the
124:14 - most popular package Management Systems
124:16 - used on Linux distributions
124:18 - deviant distributions use dpkg and
124:21 - apt-based utilities for package
124:24 - management RPM was developed by red hat
124:26 - and adopted by a number of other
124:29 - distributions including open succe
124:32 - Oracle Linux and others
124:37 - by the end of this chapter you should be
124:39 - familiar with common Linux applications
124:42 - including internet applications such as
124:46 - browsers and email programs office
124:49 - productivity Suites such as Libra office
124:52 - developer tools such as compilers
124:55 - debuggers Etc multimedia applications
124:58 - such as those for audio and video
125:01 - graphic editors such as the and
125:04 - other Graphics utilities
125:09 - the internet is a Global Network that
125:12 - allows users around the world to perform
125:13 - multiple tasks such as searching for
125:16 - data communicating through emails and
125:18 - online shopping obviously you need to
125:20 - use Network aware applications to take
125:22 - advantage of the internet
125:25 - these include web browsers email clients
125:28 - streaming media applications Internet
125:31 - relay chats and conferencing software
125:37 - as discussed in the graphical interface
125:39 - chapter Linux offers a wide variety of
125:42 - web browsers both graphical and text
125:44 - space
125:45 - including Firefox Google Chrome chromium
125:50 - Epiphany renamed web conquer
125:54 - links lynx w3m and Opera
126:01 - email applications allow for sending
126:03 - receiving and reading messages over the
126:06 - Internet Linux systems offer a wide
126:08 - number of email clients both graphical
126:11 - and text-based in addition many users
126:14 - simply use their browsers to access
126:16 - their email accounts most email clients
126:19 - use the internet message access protocol
126:21 - or IMAP or the older pop post office
126:24 - protocol to access email stored on a
126:27 - remote mail server most email
126:29 - applications are we also display HTML
126:32 - formatted emails that include objects
126:34 - like pictures and hyperlinks Linux
126:36 - support the following types of email
126:38 - applications
126:40 - graphical email clients such as
126:42 - Thunderbird Evolution and Clause mail
126:45 - text mode email clients such as Mutt and
126:49 - mail
126:50 - all web browser-based clients such as
126:52 - Gmail Yahoo mail and office 365.
126:58 - Linux systems provide many other
127:00 - applications for performing internet
127:03 - related tasks
127:05 - these include filezilla pigeon ikiga and
127:08 - hexchat
127:12 - most day-to-day computer systems have
127:15 - productivity applications sometimes
127:17 - called office suites available or
127:19 - installed each Suite is a collection of
127:22 - closely coupled programs used to create
127:24 - and edit different types of files such
127:27 - as text
127:28 - spreadsheets presentations graphical
127:31 - objects
127:33 - most Linux distributions offer a Libra
127:36 - office an open source office suite that
127:38 - started in 2010 and has evolved from
127:41 - open Office while other office suites
127:43 - are available as as we have listed
127:45 - LibreOffice is the most mature and it's
127:48 - most it's also the most widely used and
127:50 - intensely developed in addition Linux
127:53 - users have full access to internet-based
127:55 - office suites such as Google Docs and
127:57 - Microsoft Office 365.
128:02 - the component applications included in
128:05 - Libra office are writer for word
128:08 - processing calc for spreadsheets impress
128:11 - for presentations draw for creating and
128:14 - editing graphics and diagrams the
128:16 - LibreOffice applications can read and
128:19 - write non-native document formats such
128:22 - as those used by Microsoft Office
128:23 - usually Fidelity is maintained quite
128:26 - well but complicated documents might
128:28 - have some imperfect conversions
128:34 - Linux distributions come with a complete
128:36 - set of applications and tools that are
128:39 - needed by those developing or
128:41 - maintaining both user applications and
128:44 - the kernel itself these tools are
128:46 - tightly integrated and include Advanced
128:50 - editors customized for programmers needs
128:52 - such as V and emacs compilers for every
128:56 - computer language that has ever existed
128:57 - including very popular or new ones such
129:00 - as golang and rust debuggers such as GDB
129:03 - and various graphical front ends to it
129:06 - and other and many other debugging tools
129:08 - performance measuring and monitoring
129:10 - programs some with easy to use graphical
129:13 - interfaces others more Arcane and meant
129:15 - to be used only by serious experienced
129:18 - development Engineers complete
129:20 - integrated development environments or
129:22 - Ides such as eclipse and visual studio
129:26 - code that put all these tools together
129:28 - another operating systems these tools
129:31 - have to be obtained and installed
129:33 - separately often at a high cost well in
129:36 - licks they are all available at no cost
129:38 - through standard package installation
129:40 - systems
129:44 - multimedia applications are used to
129:46 - listen to music watch videos
129:49 - Etc as well as to present and view text
129:51 - and Graphics Linux systems offer a
129:54 - number of sound player applications
129:56 - including amarok audacity and Rhythm box
130:00 - of course Linux systems can also connect
130:02 - with commercial online music streaming
130:05 - services such as Pandora and Spotify
130:08 - through web browsers
130:12 - movie and video players can portray
130:15 - input from many different sources either
130:17 - local to the machine or on the Internet
130:19 - Linux systems offer a number of movie
130:22 - players including VLC and player zine
130:27 - totem
130:31 - movie editors are used to edit videos or
130:33 - movies like systems offer a number of
130:37 - movie editors including cinepaint
130:39 - blender Cinderella and ffmpeg
130:46 - graphic editors allow you to create edit
130:49 - View and organize images of various
130:52 - formats the new image manipulation
130:54 - program or is a feature-rich image
130:57 - retouching and editing tool similar to
130:59 - Adobe Photoshop and it's available on
131:01 - all Linux distributions some features of
131:04 - of are it can handle any image
131:07 - format it has many special purpose
131:09 - plugins and filters it provides
131:12 - extensive information about the image
131:14 - such as layers channels and histograms
131:17 - in addition to there are other
131:20 - Graphics utilities that help perform
131:22 - various image related tasks
131:24 - including EOG inkscape convert and
131:28 - scribus
131:33 - you have completed chapter six let's
131:36 - summarize the key Concepts covered
131:38 - Linux offers a wide variety of Internet
131:41 - applications such as web browsers email
131:43 - clients online media applications and
131:46 - others
131:47 - web browsers supported by Linux can be
131:50 - either graphical or text-based such as
131:53 - Firefox Google Chrome Epiphany w3m links
131:56 - and other others
131:58 - Linux supports graphical email clients
132:01 - such as Thunderbird Evolution and
132:04 - cosmile and text mode email clients such
132:07 - as Mutt and mail Linux systems provide
132:10 - many other applications for performing
132:12 - internet related tasks such as filezilla
132:15 - xchat pigeon and others most Linux
132:18 - distributions offer LibreOffice to
132:20 - create and edit different kinds of
132:22 - documents
132:23 - Linux systems offer entire Suites of
132:26 - development applications and tools
132:28 - including compilers and debuggers Linux
132:31 - systems offer a number of sound players
132:33 - including amarok audacity and Rhythm box
132:36 - Linux systems offer a number of movie
132:39 - players including VLC and players Dean
132:42 - and totem Linux systems offer a number
132:44 - of movie editors including Kino
132:46 - cinepaint blender among others
132:49 - the utility is a feature-rich image
132:53 - retouching and editing tool available on
132:55 - all Linux distributions
132:57 - other Graphics utilities that help
132:59 - perform various image related tasks are
133:02 - EOG inkscape convert and scrivas
133:09 - by the end of this chapter you should be
133:11 - able to use the command line to perform
133:13 - operations in Linux
133:16 - search for files
133:17 - create and manage files
133:20 - install and update software
133:27 - Linux system administrators spend a
133:29 - significant amount of their time in a
133:31 - command line prompt they often automate
133:33 - and troubleshoot tasks in this text
133:36 - environment there's a saying graphical
133:38 - user interfaces make easy tasks easier
133:41 - while command line interfaces make
133:43 - difficult tasks possible
133:46 - Linux relies heavily on the abundance of
133:48 - command line tools the command line
133:50 - interface provides the following
133:52 - advantages no ugui overhead is incurred
133:55 - virtually any and every task can be
133:57 - accomplished while sitting at the
133:58 - command line
134:00 - you can Implement scripts for often used
134:03 - or easy to forget tasks and series of
134:06 - procedures you can sign into remote
134:08 - machines anywhere on the internet
134:11 - you can initiate graphical applications
134:13 - directly from the command line instead
134:16 - of hunting through menus
134:18 - while graphical tools may vary among
134:20 - Linux distributions the command line
134:22 - interface does not
134:28 - a terminal emulator program emulates or
134:31 - simulates a standalone terminal within a
134:33 - window on the desktop by this we mean it
134:36 - behaves essentially as if you were
134:38 - logging into the machine at a pure text
134:40 - terminal terminal with no running
134:42 - graphical interface most terminal
134:45 - emulators programs support multiple
134:47 - terminal sessions by opening additional
134:49 - tabs or Windows
134:51 - by default on gnome desktop environments
134:54 - The Gnome terminal application is used
134:57 - to emulate a text mode terminal in a
134:59 - window other available terminal programs
135:02 - include extern console default on KDE
135:06 - and Terminator
135:13 - to open a terminal on any system using a
135:16 - recent gnome desktop click on
135:18 - applications system tools terminal or
135:21 - applications utilities terminal
135:25 - if you do not have the applications menu
135:27 - you will have to install the appropriate
135:29 - gnome shell extension package and turn
135:33 - it on with gnome tweaks
135:35 - on any but some of the most recent gnome
135:38 - based distributions you can always open
135:40 - a terminal by right-clicking anywhere on
135:43 - the desktop background and selecting
135:46 - open in terminal
135:48 - if this does not work you will once
135:50 - again need to install and activate the
135:52 - appropriate gnome shell package
135:55 - you can also hit alt F2 and type in
135:58 - either gnome terminal or console
136:01 - whichever is appropriate
136:04 - because distributions have had a history
136:06 - of bearing opening up a command line
136:09 - terminal and the place in menus may vary
136:12 - in the desktop GUI it is a good idea to
136:15 - figure out how to pin the terminal icon
136:17 - to the panel which might mean adding it
136:20 - to the favorites grouping on gnome
136:21 - systems
136:27 - there are some basic command line
136:29 - utilities that are used constantly and
136:32 - it would be impossible to proceed
136:34 - further without using some some of them
136:37 - in simple forms before we discuss them
136:39 - in more detail a short list has to
136:42 - include cat used to type out a file or
136:46 - combine files head used to show the
136:49 - first few lines of a file tail used to
136:52 - show the last few lines of a file man
136:55 - used to view documentation
136:59 - this screenshot shows Elementary uses of
137:01 - these programs note the use of the pipe
137:04 - symbol the vertical line you used to
137:07 - have one program take as input the
137:09 - output of another
137:11 - for the most part we will only only use
137:13 - these utilities and screenshots
137:14 - displaying various activities before we
137:16 - discuss them in detail
137:23 - most input lines entered at the Shell
137:25 - prompt have three basic elements
137:28 - the command
137:29 - the options and the arguments
137:33 - the command is the name of the program
137:35 - you are executing it may be followed by
137:37 - one or more options or switches that
137:41 - modify what the command may do options
137:43 - usually start with one or two dashes for
137:46 - example Dash p or dash dash print in
137:49 - order to differentiate them from
137:51 - arguments which represent what the
137:54 - command operates on
137:56 - however plenty of commands have no
137:58 - options no arguments or neither in
138:00 - addition other elements such as setting
138:03 - environment variables can also appear on
138:05 - the command line when launching a task
138:13 - all the demonstrations created have a
138:16 - user configured with pseudo capabilities
138:18 - to provide the user with administrative
138:21 - privileges when required
138:23 - sudo allows users to run programs using
138:26 - the security privileges of another user
138:28 - generally root the super user on your
138:31 - own systems you may need to set up
138:33 - enable sudo to work correctly to do this
138:36 - you need to follow some steps that will
138:39 - not explain much detail now but you will
138:41 - learn about later in this course
138:44 - when running on Ubuntu and some other
138:46 - recent distributions Sudo is already
138:49 - always set up for you during
138:51 - installation another Linux distributions
138:54 - you will likely need to set up sudo to
138:56 - work properly for you after the initial
138:59 - installation
139:00 - next you will learn the steps to setup
139:03 - and run sudo on your system
139:10 - if your system does not already have
139:13 - sudo set up in and enabled you need to
139:17 - do the following steps
139:19 - you'll need to make modifications to the
139:22 - administrative or super user root while
139:25 - sudo will become the preferred method of
139:27 - doing this we do not have to have it set
139:29 - up yet so we use we will use Su which
139:32 - we'll discuss later in detail Instead at
139:35 - the command line prompt type Su and
139:37 - press enter you'll then be prompted for
139:39 - the root password so enter it and press
139:42 - enter you'll notice that nothing is
139:44 - printed this is so so others cannot see
139:47 - the password on the screen you should
139:49 - end up with a different looking prompt
139:51 - often ending with a hash mark or a pound
139:55 - sign for example Su and then password
139:57 - now you need to create a configuration
140:00 - file to enable your user account to use
140:02 - sudo typically this file is created in
140:04 - the slash Etc slash
140:06 - sudoers.d slash directory with the name
140:09 - of the file that as the same as your
140:11 - username for example for this demo let's
140:13 - say your username is student after doing
140:16 - step one you would then create the
140:18 - configure duration file for student by
140:21 - doing this
140:22 - Echo student all equals all all and then
140:27 - the the directory here finally some
140:30 - Linux distributions will complain if you
140:33 - do not also change from missions on the
140:34 - file by doing
140:36 - chmod 440 and then put the file name
140:39 - that should be it for the rest of this
140:41 - course if you use sudo you should be
140:44 - properly set up when using sudo by
140:47 - default you will be prompted to give a
140:49 - password your own user password at least
140:52 - the the first time you do it within a
140:54 - specified time interval it's possible
140:58 - though very insecure to configure pseudo
140:59 - to not require password or change the
141:02 - time window in which the password does
141:04 - not have to be repeated with every
141:06 - pseudo command
141:13 - the customizable nature of Linux allows
141:15 - you to drop the graphical interface
141:18 - temporarily or permanently or to start
141:20 - it up after the system has been running
141:23 - most Linux distributions give an option
141:26 - during installation or have more than
141:28 - one version of the install media to
141:30 - choose between desktop with a graphical
141:32 - desktop and server usually without one
141:36 - Linux production servers are usually
141:38 - installed without the GUI and even if it
141:41 - is installed usually do not launch it
141:43 - during the system startup removing the
141:45 - graphical interface from a production
141:47 - server can be very helpful in
141:50 - maintaining a lean system which can be
141:52 - easier to support and keep secure
142:00 - VT or virtual terminals are console
142:02 - sessions that use the entire display and
142:04 - keyboard outside of a graphical
142:05 - environment such terminals are
142:07 - considered virtual because although
142:10 - there can be multiple active terminals
142:12 - only one terminal remains visible at a
142:15 - time a VT is not quite the same as
142:17 - command line terminal window you can
142:19 - have many of those visible at once on a
142:21 - graphical desktop
142:23 - one virtual terminal usually number one
142:26 - or seven is reserved for the graphical
142:29 - environment and text logins are enabled
142:32 - on the unused VTS Ubuntu uses vt7 but
142:35 - since OS in Rel and opensuse vt1 for the
142:38 - graphical display an example of a
142:41 - situation where using VTS is helpful is
142:43 - when you run into problems with the
142:44 - graphical desktop in this situation you
142:47 - can switch to one of the text VTS and
142:50 - troubleshoot
142:51 - to switch between VTS press Ctrl alt
142:55 - function key for for the VT for example
142:58 - press Ctrl alt F6 for vt6 actually you
143:02 - only have to press the alt F6 key
143:04 - combination if you are in a VT and want
143:06 - to switch to another VT
143:13 - Linux distributions can start and stop
143:15 - the graphical desktop in various ways
143:18 - the exact method differs from
143:19 - distribution and among distribution
143:21 - versions for the newer system md-based
143:24 - distributions the display manager is run
143:27 - as a service you can stop the GUI
143:29 - desktop with the system control utility
143:32 - and most distributions will also work
143:34 - with the tel init command as in sudo
143:39 - system control stop gdm or Studio telnet
143:43 - 3 and restart it after logging into the
143:46 - console with sudo system control start
143:50 - gdm or sudo telen 5. I'm going to move
143:54 - to versions before 18.04 LTS substitute
143:58 - light DM for gdm
144:04 - in this section we will discuss how to
144:06 - accomplish basic operations from the
144:08 - command line these include how to log in
144:11 - and log out from the system restart or
144:14 - shut down the system locate applications
144:16 - access directories identify absolute and
144:18 - relative paths and explore the file
144:21 - system
144:25 - an available text terminal will prompt
144:27 - for a username with the string login and
144:31 - password when typing a password nothing
144:33 - is displayed on the terminal not even a
144:36 - an asterisk to indicate that you typed
144:37 - in something and this is to prevent
144:39 - others from seeing your password after
144:41 - you've logged into the system you can
144:43 - perform basic operations
144:45 - once your session is started either by
144:48 - logging into a text terminal or via a
144:51 - graphical terminal program you can also
144:54 - connect and log into remote systems by
144:57 - using SSH for example by typing SSH
145:00 - student at remote server.com SSH which
145:03 - control it would connect securely to the
145:06 - remote machine or remote server.com and
145:09 - give student that's the user a command
145:11 - line terminal window either using a
145:14 - password as with regular logins or a
145:16 - cryptographic key to sign in without
145:18 - providing a password to verify the
145:20 - identity
145:25 - the preferred method to shut down or
145:27 - reboot the system is to use the shutdown
145:30 - command this sends a warning message and
145:33 - then prevents further users from logging
145:35 - in the init process will then control
145:37 - shutting down or rebooting the system
145:39 - it's important to always shut down
145:42 - properly failure to do so can result in
145:44 - damage to the system and or loss of data
145:47 - the Halt and power off commands issue
145:52 - shutdown Dash 8 to Halt the system
145:55 - reboot issue shutdown Dash R and causes
145:58 - the machine to reboot instead of just
146:00 - shutting down both rebooting and
146:03 - shutting down from the command line
146:04 - requires super user or root access
146:08 - when administering a multi-user system
146:11 - you have the option of notifying all
146:13 - users prior shutdown as in sudo
146:17 - shutdown-hs 10 o'clock sitting down for
146:20 - scheduled maintenance
146:25 - depending on the specifics of your
146:28 - particular distributions policy programs
146:31 - and software packages can be installed
146:33 - in various directories in general
146:35 - executable programs and scripts should
146:38 - live in the slash bin or slash user
146:40 - slash band or slash s-pan or slash user
146:43 - s spend directories or somewhere under
146:45 - slash opt they can also appear in the
146:48 - slash user slash local span or slash
146:50 - user slash local s bin or a directory
146:52 - and a user's account space such as slash
146:55 - home student bin one way to locate
146:58 - programs is to employ the which utility
147:01 - for example to find out exactly where
147:04 - the diff program resides on the file
147:06 - system you can do which diff
147:09 - slash user slash bin stiff if which does
147:13 - not find the program where is is a good
147:16 - alternative because it looks for
147:17 - packages in a broader range of system
147:20 - directories so where is diff
147:27 - when you first log into a system or open
147:30 - a terminal the default directory should
147:33 - be your home directory you can prove you
147:35 - can print the exact path of this by
147:37 - typing Echo home mini Linux
147:40 - distributions actually open new
147:42 - graphical terminals in the dollar China
147:43 - home desktop the following commands are
147:46 - useful for directory navigation
147:55 - let's get some practice navigating among
147:58 - directories at the command line
148:01 - so suppose I go to the temp directory CD
148:04 - slash TMP I do PWD for print working
148:08 - directory I'm at TMP
148:10 - I could do go to the home directory by
148:12 - doing CD dollar home
148:15 - you see PWD now is home student
148:18 - if I do CD dot dot I go up one level to
148:22 - just home
148:24 - another way to navigate is to use the
148:26 - push D and pop D commands so I could do
148:28 - push d
148:31 - temp
148:33 - okay and it showed me my previous
148:35 - history I was at temp and I was at home
148:38 - and I go to temp
148:39 - now if I do pop d
148:42 - it puts me back at the home directory
148:45 - another thing I can do is CD Dash
148:49 - and that takes me to the previous
148:51 - directory just like pop D did so let's
148:54 - do some basic day-to-day practices of
148:57 - navigating directories that one does all
148:59 - the time on a Linux system
149:05 - there are two ways to identify paths
149:09 - absolute path name which an absolute
149:11 - path name begins with the root directory
149:14 - and follows the tree branch by Branch
149:16 - until it reaches the desired directory
149:18 - or file absolute paths always start with
149:21 - a slash or the relative path name a
149:25 - relative path name starts from the
149:26 - present working directory relative paths
149:29 - never start with a slash multiple
149:31 - slashes between directories and files
149:33 - are allowed but all but one slash
149:36 - between elements in the path name is
149:38 - ignored by the system so if you have a
149:40 - bunch of slashes it's valid but it's
149:42 - just seen as just having a single slash
149:45 - by the system most the time it's most
149:47 - convenient to use relative paths which
149:50 - require less typing usually you take
149:53 - advantage of the shortcuts provided by
149:55 - use dot for present directory dot dot
149:58 - for Parent Directory or the utility for
150:00 - your home directory for example suppose
150:02 - you're currently working in your home
150:04 - directory and wish to move to the slash
150:06 - user slash spin directory the following
150:09 - two ways will bring you to the same
150:11 - directory from your home directory there
150:13 - is the absolute path name method and the
150:15 - relative path name method in this case
150:18 - the absolute path name method requires
150:20 - less typing
150:25 - traversing up and down the file system
150:27 - tree can get tedious the tree command is
150:30 - a good way to get a bird's eye view of
150:32 - the file system tree use tree Dash D
150:34 - just to view just the directories and to
150:36 - suppress listing the names
150:39 - the following commands can help in
150:41 - exploring the file system
150:59 - let's get started with how to explore
151:02 - the file system to access slash USR
151:06 - slash local slash live from the slash
151:10 - USR directory using absolute path add
151:14 - command prompt type CD slash USR
151:18 - slash local
151:20 - slash live and press enter
151:23 - go back to slash USR directory by typing
151:27 - CD slash USR and press enter to access
151:31 - slash USR slash local slash live from
151:35 - the slash USR directory using relative
151:38 - path at command prompt type CD local
151:42 - slash live and press enter get to the
151:45 - root directory at the command prompt
151:47 - type the CD slash command
151:50 - and press enter to get a list of the
151:53 - files and directory in the present
151:54 - working directory at the command prompt
151:57 - type the ls command and press enter to
152:00 - get a list of hidden files and hidden
152:02 - directories at the command prompt type
152:05 - the
152:05 - ls-a command and press enter
152:09 - to get a tree view of the file system at
152:11 - the command prompt type the tree command
152:14 - and press enter
152:16 - to get a tree view of only directories
152:18 - in the file system at the command prompt
152:21 - type the treat
152:23 - Dash diesel slash command and press
152:27 - enter
152:34 - the end utility is used to create hard
152:37 - links and with the dash s option soft
152:39 - links also known as symbolic links or
152:42 - stem links these two kinds of links are
152:45 - very useful in Unix based operating
152:46 - systems suppose that file 1 already
152:49 - exists a hard link called File 2 is
152:51 - created with the conf with this command
152:57 - note that two files now appear to exist
153:00 - however a closer inspection of the file
153:02 - listing shows that this is not quite
153:04 - true so we'll do ls-li file 1 name File
153:08 - 2 and the dash I option to LS prints out
153:11 - in the First Column the in node number
153:14 - which is a unique quantity for each file
153:17 - object this field is the same for both
153:19 - these files so what is really going on
153:21 - here is that there's only one file but
153:23 - it has more than one name associated
153:25 - with it as indicated by the two that
153:28 - appears in the ls output thus there was
153:31 - already another object linked to file 1
153:33 - before the command was executed hard
153:36 - links are very useful and they save
153:38 - space but you have to be careful with
153:40 - their use sometimes in subtle ways for
153:43 - one thing if you remove either file 1 or
153:45 - file 2 in the example the inode object
153:48 - and the remaining file name will remain
153:50 - which might be undesirable as it may
153:53 - lead to subtle errors later if you
153:55 - recreate a file of that name
153:57 - if you edit one of the files exactly
154:00 - what happens depends on your editor most
154:03 - editors including V and G edit will
154:06 - retain the link by default but it's
154:09 - possible that modifying one of the names
154:10 - may break the link and result in the
154:13 - creation of two objects
154:18 - soft or symbolic links are created with
154:21 - a dash s option as in ln-s file one file
154:25 - 3 or ls-li 501 file three
154:29 - notice file three no longer appears to
154:31 - be a regular file and it clearly points
154:34 - to file 1 and has a different enote
154:36 - number symbolic links take notes or
154:38 - space on the file system unless their
154:40 - names are very long they're extremely
154:43 - convenient as they can easily be
154:44 - modified to point to different places an
154:47 - easy way to create a shortcut from your
154:49 - home directory to long path names is to
154:53 - create a symbolic link unlike hard links
154:56 - soft links can point to objects even on
154:59 - different file systems partitions and or
155:02 - disks and other media which may or may
155:04 - not be currently available or even exist
155:06 - in the case where the link does not
155:08 - point to a currently available or
155:10 - existing object you obtain a dangly link
155:18 - the CD command remembers where you were
155:21 - last and lets you get back there with CD
155:24 - dash for remembering more than just the
155:27 - last directory visited use push D to
155:30 - change the directory instead of CD this
155:32 - pushes your starting directory onto a
155:34 - list using pop D will then send you back
155:38 - to those directories walking in reverse
155:40 - order the most recent directory will be
155:43 - the first one retrieved with pop D the
155:45 - list of directories is displayed with
155:47 - the durs command
155:53 - Linux provides many commands that help
155:55 - you with viewing the contents of a file
155:57 - creating a new file or an empty file
155:59 - changing the timestamp of a file and
156:01 - moving removing and renaming a file or
156:04 - directory these commands help you in
156:06 - managing your data and files and in and
156:09 - ensuring that the correct data is
156:11 - available at the correct location in
156:13 - this section you will learn how to
156:15 - manage files
156:16 - let's get a feel for how to look at some
156:19 - of the lines in a given text file on
156:22 - your machine
156:23 - so we have on all our Linux Foundation
156:26 - virtual machines a file called ready for
156:29 - DOT sh which I'm using word count
156:33 - to show me it has
156:35 - 5127 lines
156:37 - if I just want to type the whole file
156:40 - out I could do that with the cat
156:42 - utilities so let me just do that
156:46 - but it went very very fast and in fact
156:48 - if I do cat
156:50 - dash n
156:52 - it shows me the line numbers as it goes
156:55 - and it is indeed 51.27
156:58 - the way to page your way through is to
157:01 - use the less utility
157:03 - so then I would do less ready
157:07 - 4.sh
157:09 - and then I get one screen at a time if I
157:12 - hit the space bar I see the second
157:15 - screen third screen Etc and I can keep
157:18 - going all the way through the file as
157:20 - fast as I want
157:22 - and by the way I can also do the less
157:24 - Dash capital n
157:27 - option and then I also get line numbers
157:29 - I did with catfishing
157:32 - well similar thing
157:34 - now suppose I just want to look at the
157:37 - first few lines of the file I could do
157:39 - head ready 4.sh
157:43 - and you see that only gave me I believe
157:46 - 10 lines if I wanted to get 20 lines I
157:49 - could just give that as an argument
157:53 - okay so there we see the first 20 lines
157:55 - likewise with tail
157:59 - by default I get the last 10 lines if I
158:02 - wanted to see the last 20 lines
158:05 - I would do tail-20
158:08 - and if you want to have some fun you can
158:10 - use the TAC utility
158:13 - where you'll notice that Tac is cat
158:16 - backwards
158:18 - and that just gives you the entire file
158:20 - backwards
158:22 - so these are day-to-day utilities one
158:24 - uses just to look at the contents of
158:26 - text files
158:34 - touch is often used to set or update the
158:37 - access change and modify times of files
158:39 - by default it resets the file's
158:42 - timestamp to match the current time
158:44 - however you can also create an empty
158:46 - file using touch like this touch and
158:49 - then the file name this is normally done
158:51 - to create an empty file as a placeholder
158:53 - for a later purpose touch provides
158:56 - several useful options for example the
158:59 - dash T option allows you to set the date
159:01 - and time stamp of the file to a specific
159:04 - value as in touch Dash T and then we put
159:07 - the value and then the file name
159:12 - make there is user create directory such
159:17 - as maker sampner it creates a sample
159:19 - directory named sampner under the
159:21 - current directory maker slash user slash
159:25 - sampner will create a sample directory
159:27 - called sampner under slash user
159:31 - removing a directory is done with rmdir
159:34 - or remove directory the directory must
159:36 - be empty or the command will fail to
159:38 - remove a directory and all of its
159:40 - contents you have to do rm-rf
159:48 - note that MV does double duty and that
159:51 - it can simply rename a file or move a
159:55 - file to another location while possibly
159:57 - changing its name at the same time
160:01 - if you're not certain about removing
160:03 - files that match a pattern you supply
160:05 - it's always good to run RM in
160:09 - interactively RM dash dash I to prompt
160:12 - before every removal
160:18 - rmdir Works only at empty directories
160:22 - otherwise you get an error so while
160:23 - typing RM Dash RF is a fast and easy way
160:26 - to remove a whole file system tree
160:28 - recursively it's extremely dangerous and
160:31 - should be used with the utmost care
160:33 - especially when used by root recall that
160:36 - recursive means drilling down through
160:38 - all subdirectories all the way down a
160:40 - tree
160:44 - the PS1 variable is the character string
160:47 - that is displayed as the prompt on the
160:50 - command line most distributions set PS1
160:53 - to a known default value which is
160:55 - suitable in most cases however users may
160:58 - want custom information shown on the
161:01 - command line for example some system
161:03 - administrators require the user and the
161:07 - host system name to show up on the
161:09 - command line as in this example
161:14 - this could prove useful if you're
161:16 - working in multiple roles and want to be
161:19 - always reminded of who you are and what
161:21 - machine you are on the prompt above
161:23 - could be implemented by setting the PS1
161:27 - variable to the following
161:31 - for example you could do that with this
161:33 - command here
161:37 - by convention most systems are set up so
161:41 - that the root user has a pound sign as
161:44 - they're prompt
161:46 - let's gained some experience with
161:48 - day-to-day basic file operations on a
161:51 - centos8 stream system
161:53 - this would be the same on any Linux
161:55 - system
161:56 - so first let's create a couple of files
161:58 - uh it could be empty or they could be
162:00 - small one way to do it is to use the
162:03 - echo command and just say Echo and the
162:07 - direct actually nothing into file one
162:10 - another way to do it is with the touch
162:12 - command I'll say Touch file 2.
162:15 - then if I do ls-a file 1 and file two
162:20 - I see two very small files both created
162:24 - at the same time basically
162:27 - if I want to rename one of them I could
162:29 - rename it with the move command like
162:31 - move file one to file one
162:36 - new name
162:41 - and then if I do
162:43 - LS shells star file star
162:47 - I see there it is uh it it it has the
162:51 - new name now
162:52 - if I want to remove them I can simply
162:55 - say RM file to
162:58 - and it just work it's a good idea though
163:01 - to always use the I option for
163:03 - interactive when doing removal
163:05 - then I would say RMI Dash I file one new
163:09 - name
163:10 - It'll ask me if I really want to do it
163:12 - many distributions will set up the I
163:15 - option to be the defaults so they always
163:17 - have a chance
163:19 - uh to change your mind about removing
163:21 - something before you do it
163:23 - now how would I make a directory I could
163:25 - do Meg Deer uh dear one
163:30 - in fact I can make more than one
163:31 - directory on the same line I can do make
163:33 - deer deer 2 and deer three
163:38 - and if I look now I see I have three
163:40 - different directories or all actually
163:42 - empty
163:43 - so let me put a couple of files in one
163:46 - of the directories so I'll do Touch
163:48 - deer2 file one
163:52 - and I'll do touch deer to file two
163:56 - so if I do ls-l-r just to see everything
163:59 - that's there
164:01 - in the directory files
164:03 - uh that's what I'll see deer one is
164:05 - empty deer two has these two files and
164:08 - dear three uh is also empty
164:12 - now the command for removing directories
164:14 - is our end here
164:16 - so let's say I just try to remove them
164:19 - all with a RM dear dear star
164:23 - uh you notice
164:26 - it got rid of deer one and dear two but
164:28 - it couldn't remove deer the deer one and
164:31 - dear three I should say couldn't get rid
164:32 - of deer too because there's files in it
164:34 - to do that instead of using R and D or I
164:37 - would say RM
164:39 - RF dr2
164:43 - and then that goes and descends into the
164:45 - directory and gets rid of all the files
164:47 - be very careful with the RN Dash RF uh
164:51 - command because if you give the bad
164:53 - argument you could even wipe out your
164:55 - whole system but that is a standard way
164:57 - to get rid of a whole directory tree
165:00 - so that's just some of the very basic
165:02 - commands for
165:04 - renaming files moving them creating
165:07 - directors removing them Etc
165:14 - when commands are executed by default
165:17 - there are three standard file streams or
165:20 - descriptors always open for use
165:23 - standard input
165:25 - standard output and standard error
165:29 - usually the standard input is your
165:32 - keyboard and standard output and
165:34 - standard error are printed on your
165:36 - terminal standard error is often
165:38 - redirected to an error logging file
165:40 - while standard n is supplied by
165:42 - directing input to come from a file or
165:45 - from the output of a previous command
165:47 - through a pipe standard out is also
165:49 - often redirected into a file since
165:51 - standard error is where error messages
165:53 - are written usually nothing will go
165:55 - there in Linux all open files are
165:58 - represented internally by what are
166:00 - called file descriptors simply put these
166:03 - are represented by numbers starting at
166:05 - zero standard n is file descriptor 0
166:08 - standard out is file descriptor 1
166:10 - standard errors file descriptor 2.
166:12 - typically if other files are opened in
166:14 - addition to these three which are open
166:16 - by default they will start at the file
166:18 - descriptor 3 and increase from there
166:21 - on the next section and in the chapters
166:24 - ahead you will see examples which alter
166:26 - where a where a running command gets its
166:29 - input where it writes its output or
166:31 - where it prints diagnostic or error
166:34 - messages
166:40 - through the command shell we can
166:42 - redirect the three standard file stream
166:43 - so that we can get input from either a
166:46 - file or another command instead of from
166:48 - our keyboard and we can write output and
166:50 - errors to files or use them to provide
166:52 - input for subsequent commands
166:55 - for example if we have a program called
166:57 - do something that reads from standard in
167:01 - and writes to standard out and standard
167:04 - error we can change its input source by
167:07 - using the less than sign followed by the
167:10 - name of the file to be consumed for
167:12 - input data here's an example
167:17 - if you want to send the output to a file
167:19 - use the greater than sign as in this
167:22 - example
167:24 - because standard error is not the same
167:26 - as standard out error messages will
167:28 - still will still be seen on the terminal
167:30 - windows in the above example if you want
167:33 - to redirect standard error to a separate
167:36 - file you use standard errors file
167:38 - descriptor number two the greater than
167:41 - sign followed by the name of the file
167:43 - you want to hold everything the running
167:45 - command writes to standard error so
167:48 - here's how you do that
167:50 - a special shorthand notation can send
167:53 - anything written to file descriptor to
167:55 - standard error to the same place as file
167:58 - descriptor 1. standard out you can do it
168:00 - like this
168:03 - bash permits an easier Syntax for the
168:06 - above which is like so
168:14 - the Unix Linux philosophy is to have
168:16 - many simple and short programs or
168:19 - commands cooperate together to produce
168:22 - quite complex results rather than have
168:25 - one complex program with many possible
168:27 - options and modes of operation in order
168:30 - to accomplish this extensive use of
168:32 - pipes is made you can pipe the output of
168:35 - one Commander program into another as
168:37 - its input in order to do this we use the
168:40 - vertical bar pipe symbol between
168:43 - commands as in this example here
168:47 - this represents what we often call a
168:50 - pipeline and allows Linux to combine the
168:52 - actions of several commands into one
168:54 - this is extraordinary efficient because
168:57 - Command 2 and command 3 do not have to
168:59 - wait for the previous pipeline commands
169:02 - to complete before they can begin
169:04 - hacking at the data in their input
169:06 - streams on multiple CPU or core systems
169:09 - the available computing power is much
169:12 - better utilized and things get done
169:14 - quicker furthermore there is no need to
169:17 - save output in temporary files between
169:19 - the stages in the pipeline which saves
169:22 - disk space and reduces reading and
169:24 - writing from disk which is often the
169:26 - slowest bottleneck and getting something
169:28 - done
169:32 - being able to quickly find the files you
169:35 - are looking for will save you time and
169:37 - enhance productivity you can search for
169:40 - files in both your home directory space
169:42 - or in any other directory or system or
169:45 - or location on the system the main tools
169:48 - for doing this are the locate and find
169:50 - utilities we'll also show how to use
169:53 - wild cards and Bash in order to specify
169:56 - any file which matches a given
169:58 - generalized request
170:03 - the locate utility program performs a
170:05 - search taking advantage of a previously
170:08 - constructed database of files and
170:10 - directories on your system matching all
170:13 - entries that contain a specified
170:15 - character string this can sometimes
170:17 - result in a very long list to get a
170:20 - shorter and possibly more relevant list
170:22 - we can use the grep program as a filter
170:25 - grep will print only the lines that
170:28 - contain one or more specified string as
170:31 - in this example which will list all the
170:33 - files and directories with both zip and
170:36 - Bin in their name we'll cover this crap
170:39 - in much more detail later notice the use
170:42 - of the pipe or the vertical line to pipe
170:44 - the two commands together
170:46 - locate utilizes a database created by a
170:49 - related utility update DB most Linux
170:54 - systems run this automatically once a
170:56 - day however you can update it at any
170:58 - time by just running update DB from the
171:00 - command line as the root user let's get
171:03 - some practice with locating and finding
171:06 - files on an Ubuntu system
171:09 - so suppose I want to find all files that
171:12 - have the string lfs 300 in them so I
171:15 - could do locate lfs 300.
171:19 - and it finds indeed just one file that's
171:21 - in the home student directory on the
171:24 - subdirectory there
171:26 - and I could also find it by doing find
171:30 - dot meaning the current directory name
171:33 - lfs 300 star
171:36 - and then I'll see it finds it if I want
171:40 - to find out a little more I can give the
171:41 - ls option which will show me who owns it
171:44 - what group they're in the length of the
171:47 - file the inode the date Etc
171:50 - now if I create another file
171:54 - just by doing Echo into lfs 300 so it
171:58 - creates essentially an empty file
172:00 - the find command will find the new file
172:03 - as well as the old one
172:05 - but the locate command will not because
172:09 - I need to update
172:11 - the database that uh that the locate
172:14 - command uses and I do that by running as
172:17 - root so I need as you do as you do
172:20 - update DB
172:22 - and that was pretty quick uh and then if
172:27 - I say locate it now it finds both files
172:29 - okay and
172:32 - um just to get rid of the file I didn't
172:34 - really need I'll remove it I run update
172:37 - DB again
172:39 - well I need it to be root so I have to
172:41 - say yes you do and then once again okay
172:44 - FS 300 won't find this new file now I
172:48 - can configure update dbe and locate to
172:52 - do a bunch of things so if I go to the
172:54 - ETC directory
172:55 - you'll see there's a file called update
172:59 - DB
173:02 - Dot comf
173:05 - and it controls where update DB does not
173:09 - look where locate does not look
173:11 - so for instance under prune task it says
173:13 - don't look in these places like the temp
173:15 - directory because they're temporary and
173:17 - you don't want to keep track of what's
173:19 - there particularly and prune FS these
173:22 - are file systems really pseudo file
173:25 - systems that are not real file systems
173:27 - that you shouldn't look in because
173:29 - they're also the contents change every
173:32 - time you boot let's say so for instance
173:34 - you don't look in the proc directory or
173:36 - this is FS directory or the dev
173:39 - directory uh well Dev FS directory
173:43 - because these things disappear every
173:44 - time you reboot
173:46 - uh and so it's pretty easy to configure
173:49 - some other things you can do which you
173:51 - can learn by looking at the
173:52 - documentation on your system
173:58 - you can search for a file name
174:00 - containing specific characters using
174:02 - wild cards to search for files using the
174:06 - question mark wildcard replace each
174:08 - unknown character with question mark for
174:11 - example if you know only the first two
174:13 - letters are ba of a three letter file
174:16 - name without an extension you can type
174:18 - this
174:20 - to search for files using the wildcard
174:23 - replace the unknown string with the
174:25 - asterisk for example if you remember
174:27 - only that the extension was dot out type
174:31 - LS asterisk dot out
174:35 - let's get some experience using wild
174:37 - cards
174:38 - on an Ubuntu system so I've gone to the
174:41 - VAR log directory and let me just do an
174:43 - LS to see what's there so for instance
174:46 - uh let me use the DU or disk usage
174:50 - utility which tells me all the bytes
174:52 - that are being used by a given file or
174:55 - subdirectory I could do something like d
174:58 - u that s uh h
175:02 - uh a star
175:04 - and you'll see these are all the
175:06 - different things under a summer
175:09 - directories like app the others are just
175:11 - files if I only wanted to look at ones
175:15 - which have log in the name I could do d
175:18 - u this s h a star log star
175:22 - and so only ones that have log in their
175:24 - names
175:25 - if I only want to look at the ones that
175:28 - start from the letter P or later in the
175:31 - alphabet I could do d u that sh
175:34 - a and then I could say uh square
175:37 - brackets
175:41 - p through z
175:44 - star you're seeing it neglected the
175:47 - alternative ones uh which would have
175:50 - done that
175:51 - if I just want to look at uh ones which
175:54 - have a certain character in them I could
175:56 - do something like d u star Dot
176:00 - uh one character dot star
176:05 - so those are all the ones that have a
176:07 - substring in them with one character
176:10 - here it's always a number but it
176:12 - wouldn't have to be surrounded by
176:14 - periods on both sides
176:16 - now you have to be careful with wild
176:18 - cards that the system doesn't quote glob
176:20 - what you were doing the string that
176:23 - you're putting in so to give you an
176:24 - example
176:25 - you'll notice there's a bunch of
176:27 - different files here that start with the
176:29 - name VMware well they're all over in the
176:31 - right column here so suppose I try to do
176:34 - uh uh apt-get
176:37 - install VMware star and I should make
176:41 - that as you do
176:44 - well it's actually looking for packages
176:47 - with all these names like VMware Network
176:49 - one VM VSC root 2. log and there are of
176:54 - course no packages with silly names like
176:57 - that but I could do something like this
176:59 - now
177:00 - let me put the VMware star in quotes
177:05 - and you see it actually did find things
177:07 - it found two packages VMware NSX common
177:11 - VMware manager and it wants to install
177:14 - them and it needs these other Utilities
177:16 - in order for them to work uh I'm not
177:19 - going to do this because I don't need
177:21 - these guys so I'll just say no
177:23 - so when you put something in quotes it
177:27 - says don't look in the current directory
177:28 - to like fill out the names to expand
177:31 - what you're doing instead looking in
177:33 - this case in the database packages
177:36 - so you have to be careful and you'll
177:39 - often see people use quotes even when
177:41 - there's no need for them just to be safe
177:43 - so that's a little bit of demonstration
177:45 - of the use of wild cards
177:51 - fine is an extremely useful and often
177:54 - used utility program in the daily life
177:56 - of a Linux system administrator it
177:59 - recurses down the file system tree from
178:02 - any particular directory or set of
178:04 - directories and locates files that match
178:06 - specified conditions the default path
178:09 - name is always the present working
178:11 - directory for example administrators
178:14 - sometimes scan for potentially large
178:16 - core files which contain diagnostic
178:19 - information after a program fails there
178:21 - are more than several weeks old in order
178:24 - to remove them it's also common to
178:26 - remove files that are not essential or
178:30 - that are outdated in the slash TMP
178:32 - directory especially those that have not
178:35 - been accessed recently many Linux
178:38 - distributions use shell scripts that run
178:40 - periodically through cron to perform
178:43 - such house cleaning
178:49 - when no arguments are given find list
178:52 - all files in the current directory and
178:54 - all of its subdirectories commonly used
178:57 - options to sort in the list include Dash
178:59 - name which only lists files with a
179:01 - certain pattern in their name Dash I
179:03 - name also ignore the case of the file
179:06 - names and dash type which will restrict
179:09 - the results to files of a certain
179:11 - specified type such as D for directory L
179:15 - for symbolic link or F for a regular
179:17 - file here's how you can search for files
179:19 - and directories named GCC
179:21 - here's how to search only for
179:23 - directories named GCC
179:25 - here's how to search for or only for
179:27 - regular files named GCC
179:34 - another good use of find is being able
179:37 - to run commands on the files that match
179:39 - your search criteria the dash exec
179:42 - option is used for this purpose to find
179:45 - and remove all files that end with DOT
179:48 - swp you can use this
179:52 - the squiggly brackets are a placeholder
179:55 - that will be filled with all the file
179:57 - names that result from the find
179:58 - expression and the preceding command
180:01 - will be run on each one individually
180:04 - please note that you have to in the
180:06 - command with either a semicolon
180:09 - including the single quote or a slash
180:12 - semicolon both forms are fine
180:15 - one can also use the dash OK option
180:17 - which behaves the same as Dash exec
180:20 - except that find will prompt you for
180:23 - permission before executing the command
180:26 - this makes it a good way to test your
180:29 - results before blindly executing any
180:32 - potentially dangerous commands
180:39 - it is sometimes the case that you wish
180:41 - to find files according to attributes
180:43 - such as when they were created last used
180:47 - or based on their size it's easy to
180:50 - perform such searches to find files
180:53 - based on time you can use this
180:56 - here Dash C time is when the inode
180:59 - metadata or the file and ownership the
181:01 - permissions last change it's often but
181:04 - not necessarily when the file was first
181:06 - created you can also search files based
181:09 - on when they were accessed or last read
181:10 - or based on when they were modified or
181:12 - last written
181:14 - the number is the number of days and can
181:17 - be expressed in either a number in that
181:19 - means exactly that Value Plus n which
181:22 - means greater than the number or minus n
181:24 - which means less than that number there
181:27 - are similar options for times in minutes
181:29 - as in the def C Min Dash amen and dash M
181:34 - Min to find files based on sizes you can
181:38 - do this
181:39 - note that the size here is in 512 byte
181:42 - blocks by default you can also specify
181:45 - bytes kilobytes megabytes gigabytes Etc
181:48 - as with the time numbers above file
181:51 - sizes can also be exact numbers for
181:53 - details consult the man page for find
181:56 - for example to find files greater than
181:58 - 10 megabytes in size and running a
182:00 - command on those files you can use this
182:02 - command
182:06 - let's gain some experience using a very
182:08 - powerful find utility on an Ubuntu
182:12 - system and I'll work in the VAR log
182:14 - directory so suppose I wanted to see
182:17 - every file here that's underneath our
182:21 - log and let me do it as you do because
182:24 - otherwise it will give me error messages
182:26 - about not having permissions to look at
182:28 - some files so do as you do find Dot I
182:33 - get a very long list of every single
182:35 - file and directory that's underneath
182:37 - here if I wanted to restrict it just to
182:39 - directories I would do type D
182:44 - and you'll see this just shows me the
182:46 - directories and subdirectories okay
182:48 - because like some of them like live vert
182:50 - have multiple directories if I add to
182:53 - that another parameter Max
182:57 - Def One
183:00 - you see it suppressed the subdirectories
183:03 - here I only see live bird now so I only
183:05 - went down a depth of one and actually I
183:08 - could do two and three or whatever is
183:10 - necessary though here it doesn't go that
183:12 - deep anyway now you can always add
183:14 - commands to
183:18 - any fine command so I could do find Dot
183:22 - type
183:25 - f
183:27 - and then I can say exact grep Dash H log
183:32 - and I put in that parentheses uh pair
183:36 - there and then let's say slash
183:40 - um
183:41 - semicolon you can also do a single Dash
183:44 - semicolon single Dash
183:46 - and it searched through every single
183:48 - file that had the word login and printed
183:50 - out
183:51 - all the different things that were there
183:53 - or to keep it a little simpler I could
183:55 - have done exec
183:58 - just ls-l
184:03 - and it would give me listings of all
184:05 - these files okay
184:06 - now there actually is a LS option
184:10 - built into fine so I didn't really have
184:12 - to do that and it will just show me that
184:15 - kind of information there's other things
184:17 - I can do like find
184:20 - size zero
184:23 - it's finding all the files I should have
184:26 - done as you do but all the files that
184:28 - have the size of zero and if I want to
184:31 - verify that I'll add the ls option
184:34 - you see these are all files of the name
184:36 - with size 0. you can also do things like
184:40 - find let's say I want to find everything
184:43 - that's newer than this file B temp here
184:46 - I could do something like this you do
184:49 - find
184:50 - dot newer
184:54 - B temp
184:57 - and it showed me everything that's been
184:59 - done since then
185:00 - there's a million options to find it can
185:03 - be used on a lot of complicated ways you
185:06 - can negate any parameter you want to put
185:08 - in by saying not you can combine uh
185:12 - different search criteria and I
185:15 - recommend heavily that you really read
185:17 - up on find if you're going to use it
185:18 - because it's a little hard to describe
185:21 - in a few seconds but there's a million
185:22 - things you can do with it
185:28 - the core parts of a Linux distribution
185:31 - and most of its add-on software are
185:33 - installed via the package management
185:35 - system each package contains the files
185:38 - and other instructions needed to make
185:41 - one software component work well and
185:43 - cooperate with the other components that
185:46 - comprise the entire system packages can
185:49 - depend on each other for example a
185:51 - package for a web-based application
185:53 - written in PHP can depend on the PHP
185:57 - packets there are two broad families of
186:00 - packages package managers those based on
186:02 - Debian and those which use RPM as their
186:06 - low-level package manager the two
186:08 - systems are incompatible but broadly
186:10 - speaking provide the same features and
186:12 - satisfy the same needs there are some
186:15 - other systems used by more specialized
186:17 - Linux distributions in this section you
186:19 - will learn how to install remove or
186:21 - search for packages from the command
186:24 - line using these two package Management
186:26 - Systems
186:31 - both package Management Systems operate
186:34 - on two distinct levels a low level tool
186:37 - such as dpkg or RPM takes care of the
186:41 - details of unpacking individual packages
186:43 - running scripts getting the software
186:46 - installed correctly while a high level
186:48 - tool such as apt-get dnf yum or zipper
186:52 - works with groups of packages downloads
186:55 - packages from the vendor and figures out
186:57 - dependencies
186:59 - most of the time users need to work only
187:02 - with the high level tool which will take
187:04 - care of calling the low level tool as
187:06 - needed dependency resolution is a
187:09 - particularly important feature of the
187:12 - high level tool as it handles the
187:14 - details of finding and installing each
187:16 - dependency for you be careful however as
187:19 - installing a single package could result
187:21 - in many dozens or even hundreds of
187:24 - dependent packages being installed
187:30 - the advanced patching tool apt is the
187:34 - underlying package management system
187:35 - that manages software on Deviant based
187:38 - systems while it forms the back end for
187:41 - graphical package managers such as the
187:43 - Ubuntu software Center and synaptic its
187:46 - native user interface is at the command
187:48 - line with programs that include apt or
187:51 - apkit and app cache dnf is the open
187:55 - source command line package management
187:57 - utility for the RPM compatible Linux
188:00 - systems that belongs to the red hat
188:02 - family dnf has both command line and
188:06 - graphical user interfaces Fedora and
188:08 - rel8 replaced the older yam utility with
188:12 - dnf thereby eliminating a lot of
188:14 - historical baggage as well as
188:15 - introducing many nice new capabilities
188:18 - dnf is pretty much backwards compatible
188:21 - with yum for day-to-day commands
188:24 - zipper is the package management system
188:26 - for the Susie or open Susie family and
188:29 - it's also based on RPM zipper also
188:32 - allows you to manage repositories from
188:34 - the command line zipper is fairly
188:37 - straightforward to use and resembles dnf
188:39 - or yum quite closely to learn the basic
188:43 - package commands take a look at these
188:45 - basic packaging commands
189:04 - let's get some practice with the basic
189:08 - low-level command for the Debian
189:10 - packaging system
189:12 - dpkg or
189:14 - D package so to get a list of all the
189:17 - packages on the system I can simply type
189:20 - dpkg dash dash list
189:26 - and I'll just pipe that into the list
189:28 - because it's a long list
189:30 - okay
189:32 - actually if I don't use less for some
189:34 - reason it's more compact
189:36 - okay so there are a lot of different
189:38 - packages on the system
189:40 - now if I want to see some information
189:43 - just about a particular package I could
189:45 - just
189:46 - grip let's say bzip two to see what's
189:49 - going on would be zip2
189:51 - and that's the information about bzip2
189:53 - that tells us the version number the
189:56 - architecture which here is AMD 64 and
189:59 - its description is a high quality block
190:01 - sorting file compressor utility so it's
190:05 - a more advanced program with better
190:07 - compression than gzip or the
190:10 - old-fashioned zip program
190:12 - if I want to see what's actually
190:15 - contained in that package I can do DP kg
190:20 - list files and then the name of it
190:24 - and then I'll go slower by putting it
190:26 - into less
190:28 - and you'll see there's the executables
190:30 - in the bin directory and then what's
190:33 - under user is basically documentation
190:35 - under user share doc user sure man
190:39 - Etc
190:43 - if I try to remove the package let's see
190:46 - what happens
190:48 - so do as you do d p k g of course have
190:52 - to have root privilege to remove the
190:53 - package
190:56 - so I'm removing these zip2d package
190:58 - remove B sub 2.
191:01 - and it's telling me I cannot do this
191:04 - because
191:05 - I need the developer and package
191:08 - dpkg-st Dev that would be headers and
191:10 - stuff for programs which use this in a
191:14 - library version and firewaller which is
191:17 - a archive extractor that's common on
191:20 - Linux systems so I would have to remove
191:22 - all three of them we'll see later when
191:24 - we use tools like app dead it's easier
191:26 - to deal with these dependencies
191:31 - we'll now get some practice using the
191:35 - low level RPM command in order to look
191:38 - at a package try to remove itself
191:41 - so we're going to type
191:42 - rpm-qa for query and look at all
191:45 - packages on the system and then we're
191:47 - going to grip to look for the package B
191:49 - zip2
191:52 - okay and you see there's actually two
191:54 - RPM packages which have B zip2 in their
191:58 - names the actual bzip 2 program and then
192:01 - bzip two lives which is libraries that
192:05 - depend on bzip2
192:07 - so
192:09 - let's take a look more at information
192:12 - about B sub 2 if I do RPM
192:16 - if I do RPM there's Q for query I for
192:19 - information
192:21 - and then L for a list of files and
192:23 - that's a lot so I'll pipe it through
192:25 - less
192:27 - oops I forgot to give the name in the
192:29 - package so B zip2
192:34 - you see the name is B zip2 you see it's
192:37 - version 1.06
192:40 - um we see it's
192:42 - Source RPM here we see when it was
192:45 - released in November 2015 out of
192:48 - centos.org
192:51 - and then a description of what it does
192:53 - these are freely available patent free
192:55 - high quality data compressor Etc
192:58 - I'm going to list of the files that are
193:00 - part of bzip2
193:02 - if I want to get a little bit more
193:04 - detailed look at what's
193:06 - in there I could do something a little
193:08 - fancier like RPM that Q L B zip2 we just
193:15 - list the files
193:17 - and then I'll make that a show command
193:20 - and substitute for it and do an ls-lf on
193:24 - that
193:24 - so this will give me a detailed listing
193:27 - and then I'll pipe it into less
193:30 - and these are the actual files that are
193:32 - in the package and a little bit more
193:33 - detail like their length and what type
193:35 - of files you'll notice for instance B
193:38 - unzip two and B zip2 are really the same
193:41 - file it's just a symbolic link
193:44 - and the system knows what to do or I
193:47 - should say the application knows what to
193:49 - do whether the zipper unzip depending on
193:52 - how it's called
193:56 - now let's see what happens if I try to
193:59 - remove the package
194:01 - so I I would should be uh rude to do
194:04 - that so do an S you do
194:05 - and then I'll do RPM Dash e for a race
194:09 - and then just to be extra careful I'll
194:11 - use the dash there's test which means it
194:14 - won't actually do anything with this
194:15 - option it'll just see if it could do it
194:18 - bzip two so I try to remove it
194:21 - and it's telling me that I can't do that
194:24 - because it's needed by those following
194:26 - three packages as well as the file
194:29 - roller program which is an archiving
194:33 - program present on basically all Linux
194:35 - distributions
194:37 - and then I can get a little more
194:39 - information in a different way with
194:41 - rpm-q dash dash what
194:45 - provides B zip2
194:49 - and you'll see it's the B zip2 package
194:53 - and if I do what requires
195:01 - I get the same information about the
195:03 - three packages that would like that
195:07 - need to have bzip2 installed for them to
195:10 - behave properly and not crash or
195:12 - anything
195:14 - a little bit later we're going to
195:16 - discuss yum and zipper and also dnf
195:19 - which are higher level programs that can
195:21 - handle dependencies in robust fashion
195:23 - RPM is really designed for individual
195:27 - packages which
195:29 - are listed on the command line or groups
195:31 - of packages listed on the command line
195:38 - let's get some practice using dnf from
195:41 - the command line on a recent Fedora
195:43 - system
195:43 - so in order to do that first I'll have
195:45 - to bring up the command line so I'll do
195:47 - that with activities and I'll click on
195:49 - the terminal icon at the bottom and I've
195:51 - got a nice command line terminal and
195:53 - I'll make it a little bit bigger because
195:55 - the the font's bigger that is because
195:58 - it's hard to see with the smaller fonts
196:01 - and then first let's get a list of all
196:03 - packages
196:05 - that have the string bzip two in their
196:08 - name
196:10 - so I'll do that with dnf list
196:13 - and the first package is that will come
196:15 - up will be the ones that are already
196:17 - installed so let me scroll up a little
196:19 - because there's a really long list here
196:21 - so there I have the actual program bc2 a
196:25 - development package in case I want to
196:27 - write code that uses bzip2 in internally
196:31 - and then uh bzip two lives would be used
196:34 - by programs that have been zip2 and
196:37 - already built into them
196:39 - the two I'm going to be interested in
196:41 - installing here are the lbzip tube
196:45 - packages
196:46 - lbzip 2 is a parallel version of B sub 2
196:50 - that can separate the amount of work
196:52 - into a number of pieces that can be done
196:54 - simultaneously so for instance if you
196:57 - had four processors or cores you could
196:59 - split the work up into four pieces and
197:02 - do them all at the same time and then
197:03 - merge them at the end and in theory it
197:06 - could run almost four times as quickly
197:09 - so let's try to install the utilities
197:12 - package I do as you do dnf install
197:17 - live bzip two
197:22 - yeah I guess it's lb is it two B zip two
197:27 - utils
197:32 - and you'll see yes it's happy to do that
197:34 - but it also needs the lbzip 2 package
197:37 - which it depends on so say yes I'll just
197:40 - type y
197:42 - and it will install the two packages
197:46 - um I probably have a program now called
197:48 - lbzip2 but let's check if that's the
197:50 - case
197:52 - with which
197:57 - and yes I do
197:59 - so I could go ahead and use it now if I
198:01 - wanted
198:02 - if I don't really want these installed
198:04 - and I want to clean up with them I could
198:06 - do uh something like yes you do dnf
198:10 - remove lb zip2
198:16 - and you notice it's happy to remove it
198:19 - but it's telling me that because lbzip 2
198:22 - utils depends on lbzip two if I remove
198:25 - lb zip2 I better remove them both
198:28 - otherwise I'll have an unsatisfied
198:29 - dependency so I'll just say yes
198:34 - so that's just a really simple uh
198:36 - example of using dnf in the command line
198:39 - unfortunately recent red hat-based
198:41 - systems do not have a really good
198:43 - graphical package management utility
198:46 - Fedora has something called dnf Dragon
198:49 - but it can be rather slow to load and a
198:52 - little bit buggy and there's nothing at
198:54 - all for Red Hat Aid or Central S8 so
198:58 - experienced developers will just always
199:00 - tend to do things from the command line
199:07 - let's demonstrate some basic package
199:10 - managing functions on an open Souza
199:13 - system using the zipper utility so first
199:16 - let's look for all
199:18 - packages with zipper
199:21 - search that have the string new cloth in
199:24 - them
199:26 - and we see a number of packages let's
199:28 - concentrate on the documentation package
199:31 - so suppose I try to install that and for
199:34 - that I have to be a super user for an
199:36 - installation so I do as you do zipper
199:39 - install new plot Dot
199:45 - and you notice it's telling me I not
199:47 - only have to install new plot.talk I
199:50 - would have to install new plot which is
199:52 - the actual program that new plot.doc
199:56 - their stock documents so I'll say sure
199:59 - yes
200:04 - and it's been done successfully if I
200:06 - want to get some information about
200:08 - the package I can do rpm-qi
200:12 - new clot their stock and for this once
200:15 - again I do not have to be root
200:18 - and it's telling me the name the version
200:20 - the size all sorts of things and under
200:23 - the purposes telling me it concludes the
200:25 - man and the info Pages for this rather
200:28 - useful plotting program
200:30 - now suppose I want to remove this
200:33 - package I can do zipper
200:35 - remove the new
200:39 - plot let's say I try to remove the new
200:41 - plot not not new plot.
200:46 - and it's telling me that if I am remove
200:49 - new plot I also have to remove new plot.
200:52 - because otherwise there would be unmet
200:55 - dependencies so say yes for sure
200:58 - and now both of them are gone so that's
201:01 - basic steps you would take to look for a
201:05 - package install it get some information
201:07 - about it and remove it using zipper
201:16 - so let's do some basic package
201:18 - management
201:20 - on an Ubuntu system using Debian
201:22 - Packaging
201:23 - we're going to use the high level
201:25 - utilities which understand dependencies
201:27 - at Cash cannot get
201:30 - so first let's look for
201:33 - all packages
201:35 - that contain the string
201:39 - that you get two so we do that with app
201:41 - cache search wget2
201:45 - and it comes up with wget 2 and wget to
201:48 - Dev
201:49 - this is uh an enhancement to the
201:51 - standard wget utility which is used for
201:54 - recursive downloading of the content of
201:57 - a website or some other kinds of
202:00 - resources
202:02 - so let's just try and install so the as
202:04 - you do at get install wget to dash Dev
202:12 - and it's telling me it also needs to
202:15 - install W live W get 0 and wget 2. it
202:20 - shouldn't be that surprising that you
202:23 - need to install the base packages on
202:25 - which the development packages built up
202:28 - and it will download 264 kilobytes of
202:32 - archives but once everything's installed
202:34 - it will expand out to 805 kilobytes so
202:38 - let's just say yes I'll type y
202:42 - and it quickly goes ahead and does all
202:44 - that
202:45 - now suppose I want to remove
202:48 - wget to devil more interesting let's try
202:52 - to remove
202:54 - wget
202:56 - uh itself
203:01 - so what is it doing
203:03 - well I shouldn't have removed W again I
203:05 - meant W get two w again I do not want to
203:08 - remove so I'll type it again with the
203:10 - two
203:11 - and you see it wants to remove wget
203:15 - to Dev as well because without wget wget
203:20 - to Dev isn't have much meaning okay and
203:23 - we no longer need the live W get zero
203:27 - um it's sort of orphaned out but we'll
203:30 - leave it there for now so I'll just say
203:32 - yes
203:35 - and I have removed things from my system
203:38 - so that's the most basic operations you
203:41 - would need to do on an Ubuntu system
203:45 - using Debian Packaging
203:52 - you have completed chapter seven let's
203:55 - summarize the key Concepts we covered
203:57 - virtual terminals or VT and Linux are
204:00 - consoles or command line terminals that
204:03 - use the connected Monitor and keyboard
204:06 - different Linux distributions start and
204:09 - stop the graphical desktop in different
204:11 - ways a terminal emulator program on the
204:15 - graphical desktop works by emulating a
204:17 - terminal within a window on the desktop
204:20 - the Linux system allows you to either
204:23 - log in via text terminal or remotely via
204:26 - the console when typing your password
204:29 - nothing is printed to the terminal not
204:31 - even a generic symbol to indicate that
204:34 - you typed
204:35 - the preferred method to shut down or
204:37 - reboot the system is to use the shutdown
204:40 - command
204:42 - there are two types of path names
204:44 - absolute and relative
204:47 - an absolute path name begins with the
204:49 - root directory and follows the tree
204:51 - branch by Branch until it reaches the
204:53 - desired directory or file
204:55 - a relative path name starts with the
204:58 - present working directory using hard and
205:01 - soft symbolic links is extremely useful
205:04 - in Linux
205:05 - CD remembers where you were last and
205:08 - lets you get back there with CD Dash
205:11 - locate performs a database search to
205:14 - find all file names that match a given
205:16 - pattern
205:17 - find locates files recursively from a
205:20 - given directory or set of directories
205:22 - find is able to run commands on the
205:25 - files that it lists when used with the
205:28 - dash X exec options
205:30 - touch is used to set the access change
205:33 - and edit time to files as well as to
205:35 - create empty files the advanced package
205:38 - tool packaging tool apt this package
205:42 - management system is used to manage
205:43 - installed software on dbm based sus
205:46 - systems you can use the dnf command line
205:49 - package development utility for the RPM
205:52 - based Red Hat Family Linux distributions
205:55 - the zipper package management system is
205:59 - based on RPM and used for open Susie
206:06 - by the end of this chapter you should be
206:09 - able to use different sources of
206:12 - documentation
206:13 - use the Man pages
206:15 - access the new info system use the help
206:19 - command and the dash dash help option
206:22 - use other documentation sources
206:27 - whether you are an inexperienced user or
206:30 - a veteran you'll not always know or
206:33 - remember the proper use of various Linux
206:36 - programs and utilities what is the
206:38 - command to type what options does it
206:40 - take Etc you'll need to consult help
206:42 - documentation regularly because Linux
206:45 - based systems draw from a large variety
206:47 - of sources there are numerous reservoirs
206:49 - of documentation and ways of getting
206:51 - help Distributors consolidate this
206:54 - material and present it in a
206:56 - comprehensive and easy to use manner
206:58 - important Linux documentation sources
207:00 - include the Man pages short for manual
207:04 - pages new info
207:07 - the help command and dash def's help
207:09 - option
207:10 - other documentation sources like the Gen
207:13 - 2 handbook
207:17 - The Man pages are the most often used
207:20 - source of Linux documentation they
207:22 - provide in-depth documentation about
207:24 - many programs and utilities as well as
207:27 - other topics including configuration
207:28 - files and programming apis for system
207:31 - calls library library routines and the
207:34 - kernel they are present on all Linux
207:36 - distributions and are always at your
207:38 - fingertips
207:39 - The Man pages infrastructure was first
207:41 - introduced in the early Unix versions in
207:44 - the beginning of the 1970s the name man
207:47 - is just an abbreviation for manual
207:48 - typing man with a topic name as an
207:51 - argument retrieves the information
207:52 - stored in the Topic's Man pages the man
207:55 - program searches formats and displays
207:58 - the information contained in the man
208:00 - page system because many topics have
208:02 - copious amounts of relevant information
208:04 - output is piped through a pager program
208:08 - such as less to be viewed one page at a
208:11 - time at the same time the information is
208:13 - formatted for a good visual display a
208:16 - given topic may have multiple Man pages
208:18 - associated with it and there is a
208:21 - default order determining which one is
208:22 - displayed when no options or section
208:25 - number is specified to list all pages on
208:28 - the topic use the dash F option to list
208:30 - all pages that discuss a specific topic
208:33 - even if the specified topic is not
208:35 - present in the name use the dash dash K
208:37 - option
208:38 - let's use the man utility to get some
208:41 - information about sockets on our system
208:44 - I just type man socket
208:47 - I get chapter two
208:49 - of the Linux programmers manual
208:53 - I get the page in there in chapter two
208:55 - that has to do with sockets and this is
208:57 - a pretty General page that tells me a
209:00 - lot of information about sockets and
209:02 - different protocols that they can use
209:05 - if I want to get a list of all the pages
209:09 - that occult socket I do man Dash fsocket
209:12 - you see there's actually five of them in
209:14 - different chapters
209:16 - that by the way is exactly the same as
209:18 - saying what is socket
209:20 - so man Dash F and apropower are the same
209:24 - if I want to see a particular page say
209:26 - chapter seven I can do nand seven
209:28 - socket
209:30 - and I'm getting the man page in chapter
209:32 - seven
209:35 - which is rather detailed if I want to
209:38 - see them all at once I can say Man dash
209:41 - a socket for all I guess
209:43 - and I can space my way through this one
209:46 - if I hit Q
209:48 - it's telling me if I hit return I'll see
209:50 - the next one 3p so let's do that
209:54 - I'll hit Q again you see if I want to
209:56 - get out rather than going through the
209:58 - rest of them the next one would be seven
210:00 - I can hit Ctrl C Ctrl D would just skip
210:03 - the next one
210:05 - if I want to see all Man pages that have
210:08 - the word socket in there this basic
210:10 - description
210:12 - I do that with Man dash k
210:15 - that's arrived a long list because
210:17 - sockets are pretty basic and involve all
210:19 - sorts of things on your system Man dash
210:22 - K is exactly the same
210:24 - just typing apropos socket
210:27 - and I get the exact same thing
210:30 - so that's just some basic day-to-day
210:32 - functioning of using man to get
210:34 - information you should play around with
210:37 - different Man pages and look at the real
210:39 - contents in them and see how they differ
210:41 - from page to page
210:47 - the next source of Linux documentation
210:49 - is the new info system this is the new
210:52 - project standard documentation format
210:54 - which it prefers as an alternative to
210:57 - man the info system is basically
210:59 - freeform and supports linked subsections
211:02 - functionally info resembles man in many
211:05 - ways however topics are connected using
211:07 - links even though its design predates
211:10 - the World Wide Web information can be
211:12 - viewed through either a command line
211:14 - interface a graphical help utility
211:17 - printed or viewed online typing info
211:20 - with no arguments in a terminal window
211:22 - displays an index of available topics
211:25 - you can browse through the topic list
211:27 - using the regular movement Keys arrows
211:29 - page up and page down you can view help
211:32 - for a particular topic by typing info
211:34 - topic name the system then searches for
211:37 - the topic in all available info files
211:39 - some useful keys are queue to quit is
211:42 - for help and enter to select a menu item
211:48 - the topic which you view and then info
211:50 - page is called a node this table lists
211:52 - the basic keystrokes for moving between
211:54 - nodes nodes are essentially sections and
211:57 - subsections in the documentation you can
212:00 - move between nodes or view each node
212:02 - sequentially each node may contain menus
212:05 - and links subtopics or items items
212:08 - function like browser links and are
212:10 - identified by an asterisk at the
212:13 - beginning of the item name named items
212:15 - outside menu are identified with double
212:18 - colons at the end of the item name items
212:21 - can refer to other nodes within the file
212:23 - or to other files
212:25 - let's gain some experience using the
212:29 - info command for documentation
212:31 - so suppose I type info make I will get
212:34 - information about the make you utility
212:36 - used by all programmers
212:39 - and this takes me to the top of the info
212:42 - page or the head node if I want to look
212:46 - for a particular topic I can hit slash
212:48 - and you'll see at the bottom it's
212:50 - prompting me for assert so I'll say
212:52 - example
212:54 - and it brought me down here to rule
212:56 - example
212:58 - if I just hit return
213:01 - I get that page now at the top you'll
213:04 - notice
213:05 - it says the node is root example the
213:07 - next one is Rule syntax so if I hit an n
213:11 - I get the rule syntax it says the next
213:14 - one is prerequisite types if I hit and
213:17 - again I get prerequisite types
213:20 - if I hit P I will go back to the
213:22 - previous one so I hit B rule syntax
213:25 - if I want to look again for example
213:28 - I can just hit the slash again and it's
213:31 - it's prompting me for the same string so
213:34 - I'll just hit return
213:35 - and I'm finding a later example about
213:38 - wild card examples and if I hit return I
213:41 - find out above that if I want to go all
213:43 - the way up I can hit a u
213:46 - it takes me to the top of section 4.4
213:49 - I hit U again I'm at chapter four
213:53 - I hit you again I'm at the very top of
213:55 - everything
213:56 - so I want to get information on the
213:59 - various keystroke bindings I can hit an
214:01 - H for help
214:03 - and you'll see in the bottom window
214:05 - where the focus is shifted to it lists
214:07 - all the possible keystrokes and what
214:10 - they can do
214:12 - so that's basically how I would use info
214:15 - if I hit Q I am out of it and the rest
214:18 - you can learn by navigating within the
214:22 - info page of any topic that interests
214:24 - you
214:28 - another important source of Linux
214:30 - documentation is the use of the dash
214:32 - dash help option most commands have an
214:35 - available short description which can be
214:37 - viewed using the dash dash help or the
214:39 - dash H option along with the command or
214:41 - application for example to learn more
214:44 - about the man command you can type man
214:47 - def Dash help the dash help option is
214:50 - useful as a quick reference and it
214:52 - displays information faster than the man
214:54 - or info pages
214:58 - when running within a bash command shell
215:01 - some popular commands such as Echo and
215:04 - CD actually run especially built-in bass
215:07 - versions of the commands rather than the
215:09 - usual binaries found on the file system
215:12 - it's more efficient to do so as
215:14 - execution is faster because fewer
215:16 - resources are used one should note that
215:18 - there can be some usually small
215:21 - differences in the two versions of the
215:23 - command to view a synopsis of these
215:26 - built-in commands you can simply type
215:28 - help as shown in this screenshot
215:32 - for these built-in commands help
215:34 - performs the same basic function as the
215:37 - dash H and dash dash help arguments
215:39 - perform for Standalone programs
215:44 - in addition to the Man pages the new
215:47 - info system and the help command there
215:49 - are other sources of Linux documentation
215:51 - some of the some examples of which
215:54 - include desktop help system package
215:57 - documentation and online resources
216:04 - you have completed chapter 8. let's
216:06 - summarize the key Concepts covered the
216:10 - main sources of Linux documentation are
216:12 - the Man pages new info and the help
216:15 - options and commands and a rich variety
216:17 - of online documentation sources
216:20 - the man utility searches formats and
216:23 - displays Man pages The Man pages provide
216:27 - in-depth documentation about programs
216:29 - and other topics about the system
216:31 - including configuration files system
216:34 - calls Library routines and the kernel
216:38 - the new info system was created by the
216:41 - new project as a as its standard
216:43 - documentation it's robust and it's
216:46 - accessible via command line web and
216:48 - graphical tools
216:50 - short descriptions for commands are
216:52 - usually displayed with the dash 8 or
216:54 - dash dash help argument you can type
216:57 - help at the command line to display a
216:59 - synopsis of built-in commands there are
217:02 - many other help resources both on your
217:04 - system and on the internet
217:09 - by the end of this chapter you should be
217:12 - able to describe what a process is and
217:15 - distinguish between types of processes
217:17 - enumerate process attributes
217:20 - manage processes using PS and top
217:24 - understand the use of load averages and
217:27 - other process metrics manipulate
217:29 - processes by putting them in background
217:32 - and restoring them to foreground
217:34 - use at cron and sleep to schedule
217:37 - processes in the future or pause them
217:43 - a process is simply an instance of one
217:46 - or more related tasks threads executing
217:49 - on your computer it's not the same as a
217:51 - program or a command a single command
217:53 - may actually start several processes
217:56 - simultaneously some processes are
217:59 - independent of each other and others are
218:01 - related a failure of one process may or
218:05 - may not affect the others running on
218:06 - this on the system processes use mini
218:09 - system resources such as memory CPU
218:12 - cycles and peripheral devices such as
218:15 - network cards hard drives printers and
218:17 - displays the operating system especially
218:20 - the kernel is responsible for allocating
218:22 - a proper share of these resources to
218:25 - each process and ensuring overall
218:27 - optimized system utilization
218:33 - a terminal window one kind of command
218:36 - shell is a process that runs as long as
218:38 - needed it allows users to execute
218:40 - programs and access resources in an
218:43 - interactive environment you can also run
218:45 - programs in the background which means
218:47 - they become detached from the shell
218:49 - processes can be of different types
218:52 - according to the task being performed
218:54 - here's some different process types
218:57 - along with their description
218:58 - descriptions and examples
219:12 - a critical kernel function called the
219:14 - scheduler consistently shifts processes
219:17 - on and off the CPU sharing time
219:19 - according to the relative priority how
219:21 - much time is needed and how much has
219:23 - already been granted to a task when a
219:26 - process is in a so-called running state
219:28 - it means it's either currently executing
219:31 - instructions on a CPU or it's waiting to
219:34 - be granted a share of time a Time slice
219:36 - so it can execute all processes in this
219:39 - state reside on what is called a run
219:41 - queue and on a computer with multiple
219:43 - CPUs or cores there there's a run cue on
219:47 - each CPU or core however sometimes
219:49 - processes go into what is called a sleep
219:52 - State generally when they're waiting for
219:54 - something to happen before they can
219:56 - resume perhaps for the user to type
219:59 - something in this condition a process is
220:02 - said to be sitting in a weight queue
220:04 - there are some other less free process
220:06 - States especially when a process is
220:09 - terminating sometimes a child process
220:11 - completes but its parent process has not
220:14 - asked about its state amusingly such a
220:16 - process is said to be called a said to
220:19 - be in a zombie State it's not really
220:21 - alive but still shows up in the system's
220:23 - list of processes
220:28 - at any given time there are always
220:30 - multiple processes being executed the
220:32 - operating system keeps track of them by
220:34 - assigning each of each a unique process
220:37 - ID or PID number the PID is used to
220:40 - track process State CPU usage memory use
220:43 - precisely where resources are located in
220:46 - memory and other characteristics new
220:49 - pids are usually assigned in ascending
220:51 - order as processes are born thus pid1
220:55 - denotes the init process and and
220:58 - succeeding processes are gradually
221:00 - assigned higher numbers
221:02 - the table explains the PID types and
221:05 - their descriptions
221:16 - at some point one of your applications
221:18 - may stop working properly how do you
221:21 - eliminate it
221:22 - to terminate a process you can type kill
221:25 - Dash Sig kill PID or kill-9 the PID no
221:30 - however you can only kill your own
221:31 - processes those belonging to another
221:33 - user are off limits unless you're root
221:39 - many users can access a system
221:42 - simultaneously and each user can run
221:45 - multiple processes the operating system
221:47 - identifies a user who starts the process
221:49 - by the real user ID or the ruid assigned
221:53 - to the user the user who determines the
221:56 - access rights for the users is
221:59 - identified by the effective uid the euid
222:02 - the EU ID may or may not be the same as
222:05 - the ruid users can be categorized into
222:09 - various groups each group is identified
222:12 - by the real group ID or the rgid the
222:15 - access rights of the group are
222:17 - determined by the effective group ID the
222:19 - EG ID each user can be a member of one
222:22 - or more groups most of the time we
222:25 - ignore these details and just talk about
222:27 - the user ID the uid and the group ID GID
222:34 - at any given time many processes are
222:37 - running on the system however a CPU can
222:40 - actually accommodate only one task at a
222:43 - time just like a car can have only one
222:45 - driver at a time some processes are more
222:49 - important than others so Linux allows
222:51 - you to set and manipulate process
222:52 - priority higher priority processes get
222:55 - preferential access to the CPU the
222:58 - priority for a process can be set by
223:00 - specifying a nice value or niceness for
223:04 - the process for the the lower the nice
223:07 - value the higher the priority low values
223:09 - are assigned to important processes
223:11 - while high values are assigned to
223:13 - processes that can wait longer a process
223:15 - with a high nice value simply allows
223:17 - other processes to be executed first in
223:20 - Linux a nice value of negative 20
223:22 - represents the highest priority and
223:24 - positive 19 represents the lowest well
223:27 - this may sound backwards this convention
223:29 - goes back to the earliest days of Unix
223:32 - you can also sign a so-called real-time
223:35 - priority to time sensitive tasks such as
223:38 - controlling machines through a computer
223:40 - or collecting incoming data
223:43 - a very high priority and is not to be
223:45 - confused with what is called hard real
223:48 - time which is conceptually different and
223:50 - has more to do with making sure a job
223:52 - gets completed within a very
223:54 - well-defined time window
223:57 - so now let's show
223:59 - how to see what the niceness or priority
224:02 - of our process is and how you can change
224:05 - it with the renice command or how you
224:07 - can do it actually from a graphical user
224:10 - interface
224:11 - so let's look at the processes in this
224:15 - current screen with the PS command which
224:17 - we will discuss in detail later and we
224:20 - see that this current bash shell is 30
224:23 - 77. to see the priority I can run PS
224:27 - with the options LF
224:30 - and there you see 3077 here
224:35 - is is uh here is the bash command
224:39 - and the license is zero so let's try to
224:42 - change the license I can do re nice
224:46 - um plus 5 30 77
224:52 - and you see it did change the priority
224:54 - to five which I can see once again with
224:56 - the PS command it has made it five here
225:00 - notice that the child processor ran off
225:03 - during the command pslf also has a nice
225:06 - sense of five
225:07 - is there anything else I create in this
225:09 - shell will have that new niceness
225:12 - so this is a lower priority remember
225:14 - increasing the nicest lower to priority
225:18 - so now suppose I try to increase their
225:21 - priority by decreasing the nicest to -5
225:26 - you notice it says I can't do that
225:28 - that's because only the super user or
225:30 - root is allowed to increase the priority
225:32 - of a process
225:33 - but if I type the same command over
225:35 - again with s you do
225:38 - it worked just fine and I can verify
225:40 - that once again with pslf
225:43 - and there you see it's set up to be
225:46 - minus five now as well as the new
225:49 - um
225:50 - the new uh PS command that I issued now
225:53 - if I want to do this from a graphical
225:55 - utility I can run gnome system monitor
225:57 - I'll start from the command line here
226:00 - though I could get it from a menu
226:03 - and uh this is on the first possible
226:07 - screen here on processes
226:10 - so if I hear that was process 30
226:13 - that was process 3077 it's right here
226:17 - and you notice it says priority High
226:20 - I could right click on there and I can
226:23 - go to change priority
226:25 - and I can just say low
226:28 - and now you see that it's low
226:31 - and if I get out of the graphical
226:33 - utility and I look at the niceness again
226:38 - you see now the priority has come up to
226:41 - five
226:42 - I'm not the niceness of five so that
226:45 - means it's a little priority again
226:47 - so that's how you can manipulate the
226:49 - priority of a process from the command
226:51 - line or from a graphical utility
226:57 - the load average is the average of the
226:59 - load number for a given period of time
227:01 - it takes into account processes that are
227:04 - actively running on a CPU considered
227:08 - runnable but waiting for a CPU to become
227:10 - available or sleeping I.E waiting for
227:13 - some kind of resource to become
227:15 - available the load average can be viewed
227:17 - by running W top or uptime the load
227:20 - average is displayed using three numbers
227:23 - such as 0.45 0.17 and 0.12 in this
227:27 - screenshot assuming our system is a
227:30 - single CPU system the three load average
227:32 - numbers are interpreted as follows
227:35 - 0.45 means for the last minute the
227:37 - system has been 45 utilized on average
227:41 - 0.17 means for the last five minutes
227:43 - utilization has been 17 and 0.12 is for
227:47 - the last 15 minutes utilization has been
227:49 - 12 percent if we saw a value of 1 in the
227:53 - second position that would imply the
227:55 - single CPU system was 100 util lies on
227:58 - average over the past five minutes this
228:00 - is good if we want to fully use a system
228:02 - value over one for a single CPU system
228:05 - implies that the system was over
228:07 - utilized there were more processes
228:09 - needing CPU than CPU was available if we
228:12 - had more than one CPU say a quad CPU
228:15 - system we would divide the load average
228:17 - numbers by the number of CPUs in this
228:20 - case for example seeing a one minute
228:21 - load average of 4.0 implies that the
228:25 - system as a whole was one hundred
228:26 - percent four divided by four utilized
228:29 - during the last minute
228:30 - short-term increases are usually not a
228:33 - problem a high peak you see is likely a
228:35 - burst of activity not a new level for
228:38 - example at startup mini processes start
228:40 - and then act and then activities to
228:42 - settles down the high peak is seen in
228:44 - the 5 and 15 minute load averages it may
228:47 - be cause for concern
228:52 - Linux supports background and foreground
228:55 - job processing a job in this context is
228:58 - just a command launched from a terminal
229:00 - window foreground jobs run directly from
229:03 - the shell and when one foreground job is
229:05 - running other jobs need to wait for
229:08 - Shell access at least in that terminal
229:10 - window if using the GUI until it's
229:13 - completed this is fine when jobs
229:15 - complete quickly but this can have an
229:17 - adverse effect if the current job is
229:19 - going to take a long time even several
229:22 - hours to complete in such cases you can
229:24 - run the job in the background and free
229:27 - the shell for other tasks the background
229:29 - job will be executed at lower priority
229:32 - which in turn will allow smooth
229:33 - execution of the interactive tasks and
229:36 - you can type other commands in the
229:38 - terminal window while the background job
229:40 - is running by default all jobs are
229:42 - executed in the foreground you can put a
229:45 - job in the background by suffixing and
229:48 - or the Amber stand to the command for
229:50 - example update DB ampersand and you can
229:53 - either use Ctrl Z to suspend a
229:55 - foreground job or control C to terminate
229:58 - a foregun job and you can always use the
230:00 - BG and FG commands to run a process in
230:04 - the background and foreground
230:06 - respectively
230:10 - the job utility displays all jobs
230:12 - running in the background the display
230:15 - shows the job ID State and command name
230:18 - as shown here jobs L provides the same
230:22 - information as jobs and adds the PID of
230:25 - the background jobs
230:27 - the background jobs are connected to the
230:30 - terminal window so if you log off the
230:33 - jobs utility will not show the one
230:34 - started from that window
230:40 - PS provides information about currently
230:42 - running processes keyed by pid if you
230:46 - want a repetitive update of this status
230:47 - you can use top or other commonly
230:50 - installed variants such as h-top or atop
230:53 - from the command line or invoke your
230:56 - distributions graphical system monitor
230:58 - application PS has many options for
231:01 - specifying exactly which tasks to
231:04 - examine what information to display
231:06 - about them and precisely what output
231:08 - format should be used without options PS
231:11 - will display all processes running under
231:14 - the current shell you can use the dash U
231:17 - option to display information of
231:19 - processes for a specified username the
231:23 - command ps-ef displays all the processes
231:26 - in the system in full detail the command
231:29 - ps-elf goes one step further and
231:32 - displays one line of information for
231:34 - every thread remember a process can
231:36 - contain multiple threads
231:41 - PS has another style of option
231:44 - specification which stems from the BSD
231:46 - variety of Unix where options are
231:49 - specified without preceding dashes for
231:51 - example the command PS aux displays all
231:54 - processes of all users the command PS
231:57 - EXO allows you to specify which
232:00 - attributes you want to view
232:02 - this screenshot shows a sample output of
232:04 - PS with the aux and axo qualifiers
232:08 - the PS utility is used very often at the
232:11 - command line to gather information about
232:13 - what is running on the system about the
232:16 - various processes and tasks which are
232:19 - running what resource they were using
232:20 - what relationship they have to each
232:23 - other Etc
232:24 - if I just type PS without any arguments
232:27 - I get the processes which have been
232:30 - launched underneath this particular
232:32 - terminal window and in order to make it
232:35 - more interesting I have a background
232:37 - processes running I have a cat an
232:40 - orderless which is the file manager and
232:42 - the events which is the PDF viewer and
232:45 - get more information if I type ps-f
232:49 - which you see now also tells me that
232:52 - parent process ID
232:54 - so you notice bash as a process like Z
232:58 - of 2942 and that's the parent process
233:01 - for both the cat and the Nautilus which
233:04 - I launched directly out of the shell as
233:07 - well as the PS command itself
233:10 - uh the events
233:11 - command is actually has something else
233:14 - is apparent for complicated reasons
233:16 - having to do with how the gnome shell
233:18 - runs if I want to get a different piece
233:21 - of information I can do ps-l
233:27 - and now uh I'm also seeing information
233:30 - in these two columns about the priority
233:33 - and the niceness which on most Linux
233:36 - systems is just a a numerical shift okay
233:40 - from a neutral niceness of zero means
233:44 - the default priority of 80 which is what
233:46 - all normal processes start out with
233:50 - now I can do more than this if I want to
233:53 - give additional arguments so I do PS
233:57 - there's elf
234:01 - this will tell me about all processes on
234:03 - the system and let me type it into less
234:05 - so it doesn't go too quickly
234:08 - so you can see this is everything which
234:10 - is actually running on my system
234:12 - you'll notice that the first bunch of
234:14 - processes in this rather long list all
234:17 - have these square brackets around them
234:19 - that means they were not started by a
234:22 - user program they're running inside the
234:24 - kernel to do various kinds of background
234:28 - tasks that run in the kernel all the
234:30 - time handle moving things from one CPU
234:33 - to another for instance and all kinds of
234:36 - other things
234:37 - uh and you see they have different
234:39 - priorities uh they the minus 20 here uh
234:43 - minus 20 there that means they're higher
234:46 - priorities okay it's kind of backwards
234:49 - the lower the priority number here the
234:51 - higher the priorities
234:53 - if I page down to the bottom I will
234:56 - eventually get to the tests which are
234:58 - not running inside the kernel which are
235:01 - uh running for instance uh under my name
235:04 - here Coop as you see these are the
235:07 - actual user processes and they they're
235:10 - quite a bit different
235:11 - now one reason the PS command can be a
235:14 - little confusing is that there are
235:17 - different kinds of options those which
235:19 - have a dash in which those which do not
235:22 - so for instance P Ash Dash e is
235:25 - different than PS space e one commonly
235:28 - set of options is psaux without a dot
235:32 - dash
235:34 - and there you see uh one nice additional
235:37 - piece of information is the percentage
235:40 - of CPU being used and of course there
235:43 - isn't much going on in the system right
235:45 - now so that tends to be zero
235:48 - so you can customize what the output of
235:52 - the PS command is uh if you look at the
235:55 - man page for PS you'll see there's ways
235:57 - to have it print out only the columns
236:00 - that you want if you want to produce
236:02 - some customized reports Etc but a
236:05 - standard Linux system administrator
236:06 - probably uses PS every day for one thing
236:09 - or another
236:14 - Street displays the processes running on
236:17 - the system in the form of a tree diagram
236:19 - showing the relationship between a
236:21 - process and its parent process and any
236:24 - other processes that it created repeated
236:26 - entries of that process are not
236:28 - displayed and threads are displayed in
236:30 - curly braces
236:35 - while a static view of what the system
236:37 - is doing is useful monitoring the system
236:40 - performance live over time is also
236:43 - valuable one option would be to run PS
236:46 - at regular intervals say every few
236:48 - seconds a better alternative is to use
236:51 - top to get constant real-time updates
236:54 - until you exit by typing q.top this
236:58 - clearly highlights which processes are
237:00 - consuming the most CPU cycles and memory
237:03 - using appropriate commands from within
237:06 - top the first line of the top output
237:08 - displays a quick summary of what is
237:10 - happening in the system including how
237:13 - long the system has been up how many
237:15 - users are logged on and what is the load
237:19 - average the load average determines how
237:21 - busy the system is load average of 1.00
237:24 - per CPU indicates a fully subscribed but
237:27 - not overloaded system if the load
237:29 - average goes above the value and it
237:31 - indicates that the processors are
237:32 - competing for CPU time if the load
237:35 - average is very high it might indicate
237:37 - that the system is having a problem such
237:39 - as a runaway process a process and a
237:42 - non-responding state the second line of
237:45 - the top output displays the total number
237:48 - of processes the number of running
237:51 - sleeping stopped and zombie processes
237:54 - comparing the number of running
237:56 - processes with the load average helps
237:58 - determine if the system has reached its
238:01 - capacity or perhaps a particular user is
238:04 - running too many processes the stopped
238:07 - processes should be examined to see if
238:09 - everything is running correctly the
238:11 - third line of the top output indicates
238:14 - how the CPU time is being divided
238:16 - between the users and the kernel by
238:19 - displaying the percentage of cputine
238:22 - used for each the percentage of user
238:25 - jobs running at a lower priority
238:27 - niceness Dash ni is then listed idle
238:31 - mode or ID should be low if the load
238:34 - average is high and and vice versa the
238:36 - percentage of jobs waiting wa for Io is
238:39 - listed interrupts include the percentage
238:42 - of Hardware or hi versus software
238:45 - interrupts SI steel time St is generally
238:48 - used with virtual machines which has
238:51 - some of its idle CPU time taken for
238:53 - other uses
238:55 - the fourth and fifth lines of the top
238:58 - output indicate memory usage which is
239:01 - divided into categories
239:04 - physical memory or Ram displayed on line
239:07 - 4 and swap space displayed on line 5.
239:10 - both categories display total memory
239:13 - used memory and free space
239:17 - you need to monitor memory usage very
239:20 - carefully to ensure good system
239:22 - performance once the physical memory is
239:25 - exhausted the system starts using swap
239:28 - space or temporary storage space on the
239:31 - hard drive as an extended memory pool
239:34 - and since accessing disk is much slower
239:36 - than access accessing memory this will
239:39 - negatively affect the system performance
239:42 - if the system starts using swap often
239:45 - you can add more swap space however
239:48 - adding more physical memory should also
239:50 - be considered each line in the process
239:52 - list of the top output displays
239:55 - information about a process by default
239:58 - processes are ordered by highest CPU
240:01 - usage the following information about
240:03 - each process is displayed process
240:05 - identification number PID process owner
240:09 - the user priority PR and nice values ni
240:14 - virtual physical and shared memory
240:17 - status that's a percentage of CPU and
240:22 - memory used execution time the time plus
240:25 - and command besides reporting
240:28 - information top can be utilized
240:30 - interactively for monitoring and
240:32 - controlling processes well top is
240:34 - running in a terminal window you can
240:36 - enter single letter commands to change
240:38 - its behavior for example you can view
240:40 - the top ranked processes based on CPU or
240:44 - memory usage if needed you can alter the
240:47 - priorities of running processes or you
240:49 - can stop or kill a process this table
240:52 - lists what happens when pressing various
240:55 - Keys when running top
241:02 - the top utility is used to interactively
241:05 - monitor what processes and tests are
241:08 - doing on your system to start it up all
241:11 - you have to do is type top
241:14 - and it will refresh itself at some
241:17 - interval of a I think by default two or
241:19 - three seconds it's easily changed it
241:22 - shows you standard information about
241:25 - each process similar to what you get
241:27 - with the PS command such as the process
241:30 - ID the user the priority and niceness
241:32 - some information about how the memory is
241:35 - being used by the process the state SB
241:38 - meaning sleeping for instance and by
241:42 - default it is sorted by CPU time and
241:45 - then there's also memory the total time
241:47 - and what the actual command is
241:49 - the lines at the top or or have been
241:52 - designed over the years to convey a lot
241:54 - of information so in the first one you
241:56 - see how long the system has been up how
241:59 - many users there are the low to average
242:01 - or rolling averages of how much time has
242:04 - been spent in the last I believe one
242:07 - minute five minutes Etc there are
242:10 - currently 295 tests running on the
242:12 - system but really only one is running
242:14 - the others are sleeping
242:16 - um and this shows you the CPU time
242:19 - percentage is used by the user processes
242:22 - by the system by so-called nice
242:24 - processes
242:26 - and then idle
242:29 - and how many would be waiting how many
242:31 - are high priority and and some other
242:34 - details like that and then you have
242:36 - basic information about the memory such
242:38 - how much is being used how much swap
242:40 - there's available being used how much is
242:43 - in cash Etc if I type the letter one I
242:47 - get statistics for each CPU instead of
242:50 - uh just The Amalgamated total and that
242:53 - can be rather useful one will take it
242:55 - back again if I hit H I get a listing of
243:00 - what the possible keys I can hit are and
243:02 - what they do would make sense to try to
243:05 - run through much of that here but I
243:07 - highly recommend that you run top and
243:09 - play with these different keys and try
243:11 - to understand what kind of information
243:13 - you can extract
243:15 - well top is how you can do it from the
243:18 - command line and if you hit q that will
243:20 - kill the program you can get some
243:22 - information by going to your menus and
243:24 - finding system monitor
243:26 - and then uh let me drag that over to
243:29 - this screen
243:30 - uh the processes pane on here is pretty
243:33 - much the same as tops get the same
243:35 - information it's easier to do things
243:38 - like restore because I could just click
243:39 - on memory and get it sorted by how much
243:41 - memory is used if I click again I'll get
243:44 - it in descending order
243:46 - uh priorities CPU Etc you can also once
243:51 - again change the priority of processes
243:53 - you can kill them
243:55 - Etc so you can do a lot if you want to
243:57 - see the graph just click on resources
243:59 - you can see what's going with the
244:02 - constantly redrawn graph and with file
244:04 - systems you can see
244:06 - how much of your file systems on the
244:09 - computer are actually full where they're
244:11 - mounted Etc so that's a brief
244:14 - explanation of top and some related
244:16 - issues
244:20 - suppose you need to perform a task on a
244:23 - specific day sometime in the future
244:24 - however you know you will be away from
244:27 - the machine on that day how will you
244:29 - perform the task you can use the at
244:32 - utility program to execute any
244:34 - non-interactive command at a specified
244:36 - time as Illustrated in this screenshot
244:44 - KRON is a time-based scheduling utility
244:47 - program it can launch routine background
244:50 - jobs at specific times and or days on an
244:54 - ongoing basis cron is driven by a
244:57 - configuration file
244:59 - called the cron table which contains the
245:02 - various shell commands that need to be
245:04 - run at the properly scheduled times they
245:07 - are both system-wide cront tab files and
245:10 - individual user-based ones each line of
245:13 - the cront tab file represents a job and
245:15 - is composed of a so-called cron
245:17 - expression followed by a shell command
245:19 - to execute typing cront tab e will open
245:23 - the cront tab Editor to edit existing
245:25 - jobs or to create new jobs each line of
245:28 - the cront tab file will contain six
245:31 - fields
245:37 - and here are some examples
245:52 - sometimes a command or job must be
245:54 - delayed or suspended suppose for example
245:57 - an application has read the and
246:00 - processed the contents of a data file
246:02 - and then needs to save a report on a
246:04 - backup system if the backup system is
246:07 - currently busy or not available the
246:10 - application can be made to sleep or wait
246:12 - until it can complete its work such a
246:15 - delay might might be to mount the backup
246:17 - device and prepare it for writing
246:20 - sleep suspends execution for at least
246:22 - the specified period of time which can
246:25 - be given as the number of seconds the
246:27 - default minutes hours or days after that
246:30 - time has passed or an interrupting
246:33 - signal has been received execution will
246:35 - resume the syntax is sleep and the
246:38 - number and then the suffix where the
246:40 - suffix may be S for seconds the default
246:42 - M for minutes H for hours or D for days
246:47 - sleep and at or at are quite different
246:50 - sleep delays execution for a specific
246:53 - period Well at starts execution at a
246:56 - later time
247:01 - you have completed chapter nine let's
247:04 - summarize the key Concepts covered
247:06 - processes are used to perform various
247:09 - tasks on the system processes can be
247:12 - single threaded or multi-threaded
247:14 - processes can be of different types such
247:17 - as interactive and non-interactive every
247:20 - process has a unique identifier the PID
247:22 - to enable the operating system to keep
247:25 - track of it the nice value or niceness
247:28 - can be used to set priority PS provides
247:31 - information about the currently running
247:33 - processes you can use top to get
247:36 - constant real-time updates about overall
247:39 - system performance as well as
247:40 - information about the processes running
247:42 - on the system
247:43 - load average indicates the amount of
247:46 - utilization the system is under at
247:49 - particular times
247:50 - Linux supports background and foreground
247:53 - processing for a job
247:55 - at executes any non-interactive command
247:58 - at a specified time
248:01 - KRON is used to schedule tasks that need
248:03 - to be performed at regular intervals
248:09 - by the end of this chapter you should be
248:11 - able to explore the file system and its
248:15 - hierarchy explain the file system
248:17 - architecture compare files and identify
248:20 - different file types
248:22 - and back up and compressed data
248:28 - in Linux and all unix-like operating
248:30 - systems it is often said everything is a
248:34 - file or at least at least it's treated
248:36 - as such this means whenever you are
248:38 - dealing with normal data files and
248:40 - documents or with devices such as sound
248:43 - cards and printers you interact with
248:45 - them through the same kind of input
248:47 - output operations this simplifies things
248:50 - you open a file and perform normal
248:52 - operations like reading the file and
248:54 - writing on it which is one reason why
248:56 - text editors which you will learn about
248:58 - in an upcoming section are so important
249:01 - on many systems including Linux the file
249:04 - system is structured like a tree the
249:07 - tree is usually portrayed as inverted
249:09 - and starts at what is most often called
249:12 - the root directory which marks the
249:14 - beginning of the hierarchical file
249:16 - system and is also sometimes referred to
249:19 - as the trunk or simply denoted by a
249:22 - slash the root directory is not the same
249:25 - as the root user the hierarchical file
249:27 - system all also contains other elements
249:29 - in the path or directory names which are
249:32 - separated by forward slashes as in user
249:34 - slash spin slash emacs where the last
249:37 - element is the actual file name in this
249:40 - section you will learn about some basic
249:42 - concepts including the file system
249:44 - hierarchy as well as about disk
249:46 - partitions
249:51 - Linux supports a number of native file
249:53 - system types expressly created by Linux
249:57 - developers such as ext3 exe4 squash fs
250:03 - and BT RFS it also offers
250:06 - implementations of file systems used on
250:09 - other alien operating systems such as
250:11 - those from Windows SGI IBM or Mac OS
250:16 - many older Legacy file systems such as
250:19 - fat are also supported
250:25 - each file system on a Linux system
250:28 - occupies a disk partition partitions
250:31 - help to organize the contents of disks
250:34 - according to the kind and use of the
250:36 - data contained for example important
250:38 - programs required to run the system are
250:41 - often kept on a separate partition known
250:44 - as root or slash this is a separate
250:47 - partition than the one that contains
250:48 - files owned by regular users of the
250:50 - system in slash home in addition
250:53 - temporary files created and destroyed
250:55 - during the normal operation of Linux may
250:57 - be located on dedicated partitions one
251:00 - advantage of this kind of isolation by
251:03 - type and variability is that when all
251:05 - available space on a particular
251:07 - partition is exhausted the system may
251:09 - still operate normally
251:11 - this picture shows the use of the G
251:14 - parted utility which displays the
251:16 - partition layout on a system which has
251:18 - four operating systems on it roll eight
251:21 - Cent OS 7 Ubuntu and Windows
251:27 - before you can start using a file system
251:29 - you need to mount it on the file system
251:32 - tree at the mount point this is simply a
251:35 - directory which may or may not be empty
251:37 - where the file system is to be grafted
251:39 - on sometimes you may need to create the
251:42 - directory if it does not already exist
251:44 - but keep in mind this warning if you
251:47 - mount a file system on a non-empty
251:49 - directory the former contents of that
251:51 - directory are covered up and not
251:53 - accessible until the file system is
251:55 - unmounted thus Mount points are usually
251:58 - empty directories
252:00 - the mountain command is used to attach a
252:02 - file system which can be local to the
252:05 - computer or on a network somewhere
252:07 - within the file system tree the basic
252:10 - arguments are the device node and the
252:13 - mount point for example pseudo Mount or
252:16 - slash Dev slash sda5 slash home will
252:19 - attach the file system contained in the
252:21 - disk partition associated with the slash
252:23 - Dev slash sda5 device node into the file
252:26 - system tree at the slash home Mount
252:29 - point there are other ways to specify
252:31 - the partition other than the device node
252:33 - such as using the disk label or the uuid
252:35 - to unmount the partition the command
252:38 - would be sudo u-mount slash home note
252:41 - the command is u-mount not unmount only
252:44 - a root user has the privilege to run
252:46 - these commands unless the system has
252:48 - been otherwise configured if you want it
252:51 - to be automatically available every time
252:53 - the system starts up you need to edit
252:56 - the slash Etc fstab accordingly looking
252:59 - at this style will show you the
253:01 - configuration of all pre-configured file
253:03 - systems man f-stab will display how this
253:06 - file is used and how to configure it
253:08 - executing Mount without any arguments
253:10 - will show all presently mounted file
253:13 - systems the command DF th disk free will
253:17 - display information about Mountain file
253:18 - systems including the file system type
253:20 - and usage statistics about currently
253:23 - used and available space
253:28 - it's often necessary to share data
253:30 - across physical systems which may be
253:32 - either in the same location or anywhere
253:34 - that can be reached by the internet a
253:36 - network or distributed file system may
253:40 - have alt data on one machine or have it
253:42 - spread out on more than one network node
253:45 - a variety of different file systems can
253:47 - be used locally on the individual
253:50 - machines a network file system can be
253:52 - thought of as a grouping of lower level
253:55 - file systems of varying types mini
253:58 - system administrators Mount remote users
254:00 - home directories on a server in order to
254:02 - give them access to the same files and
254:04 - configuration files across multiple
254:06 - client systems this allows the users to
254:09 - log into different computers you still
254:11 - have access to the same files and
254:13 - resources the most common such file
254:15 - systems is named simply NFS the network
254:18 - file system it has a very long history
254:20 - and was first developed by Sun
254:22 - Microsystems another common
254:24 - implementation is cifs also termed Samba
254:28 - which has Microsoft routes
254:34 - in this section you will learn to
254:36 - identify and differentiate between the
254:38 - most important directories found in
254:39 - Linux we start with ordinary users home
254:42 - directory space each user has a home
254:45 - directory usually placed under the slash
254:48 - home the slash root directory on Modern
254:51 - Linux systems is no more than the home
254:53 - directory of the root user or super user
254:56 - or system administrator account
254:58 - on multi-user systems the slash home
255:01 - directory infrastructure is often
255:03 - mounted as a separate file system on its
255:05 - own partition or even exported remotely
255:08 - on a network through NFS sometimes you
255:11 - may group users based on their
255:13 - department or function you can then
255:15 - create subdirectories under the slash
255:16 - home directory for each of these groups
255:19 - for example a school May organize home
255:22 - with something like the following slash
255:24 - Home factory home staff home students
255:27 - the slash bin and slash S Pen directory
255:33 - the slash bin directory contains
255:35 - executable binaries essential commands
255:38 - used to boot the system and essential
255:40 - commands required by all system users
255:42 - such as cat cpls MV PS and RM likewise
255:47 - the slash S Pen directory is intended
255:48 - for essential binaries related to system
255:51 - administration such as fssck and IP to
255:55 - view a list of these programs you can
255:57 - type LS slash bin slash S Pen commands
256:00 - that are not essential for the system to
256:02 - boot or operate in single user mode are
256:05 - placed in the slash user slash bin and
256:07 - slash user slash S Pen directories
256:10 - historically this was done so slash user
256:12 - could be mounted as a separate file
256:14 - system that could be mounted at a later
256:15 - stage of system startup or even over a
256:18 - network however nowadays most find this
256:20 - distinction is obsolete in fact many
256:23 - distributions have been discovered to be
256:25 - unable to boot with this separation as
256:27 - this modality had not been used or
256:30 - tested for a long time thus on some of
256:32 - the newest Linux distributions slash
256:35 - user slash Spin and slash bin are
256:37 - actually just symbolically linked
256:39 - together as our slash user slash S ban
256:42 - and slash S Pen
256:46 - certain file systems like the one
256:48 - mounted at slash proc are called pseudo
256:51 - file systems because they have no
256:52 - permanent presence anywhere on the disk
256:55 - the slash proc file system contains
256:57 - virtual files files that only exist in
257:00 - memory that permit viewing constantly
257:02 - changing kernel data slash proc contains
257:05 - files and directories that mimic kernel
257:07 - structures and configuration information
257:09 - it does not contain real files but
257:12 - runtime system information IG system
257:15 - memory devices mounted Hardware
257:17 - configuration Etc some important entries
257:20 - in slash proc are the following
257:24 - so let's broadcast subdirectories as
257:26 - well including the following
257:29 - the first example shows there is a
257:31 - directory for every process running on a
257:33 - system which contains Vital Information
257:35 - about it the second example shows a
257:39 - virtual directory that contains a lot of
257:41 - information about the entire system in
257:44 - particular it's hardware and
257:45 - configuration the slash proc file system
257:48 - is very useful because the information
257:50 - and reports is gathered only as needed
257:53 - and never needs storage on the disk
257:58 - the slash Dev directory contains device
258:01 - nodes a type of pseudo file used by most
258:05 - hardware and software devices except for
258:08 - network devices this directory is empty
258:10 - on the disk partition when it's not
258:12 - mounted and also contains entries which
258:14 - are created by the udep system which
258:17 - creates and manages device nodes on
258:19 - Linux creating them dynamically when
258:22 - devices are found the slash Dev
258:25 - directory contains items such as slash
258:27 - Dev sda1 the first partition on the
258:30 - first hard disk slash Dash lp1 the
258:33 - second printer slash Dev slash random a
258:35 - source of random numbers
258:40 - the slabs of VAR directory contains
258:42 - files that are expected to change in
258:44 - size and content as the system is
258:46 - running VAR stands for a variable such
258:49 - as the entries in the following
258:51 - directories system log files slash log
258:53 - and packages and database files like
258:56 - slash lib print queues slash VAR slash S
258:59 - Pool and temporary files slash TMP
259:03 - the slash of our directory may be put on
259:05 - its own file system so that growth of
259:07 - the files can be accommodated and any
259:10 - exploding file sizes do not fatally
259:12 - affect the system network service
259:14 - directories such as slash bar FTP the
259:17 - FTP Service in slash www the HTTP web
259:22 - service are also found under slash bar
259:28 - the slash Etc directory is the home for
259:31 - system config configuration files it
259:34 - contains no binary programs although
259:36 - there are some executable scripts for
259:38 - example slash Etc
259:40 - resolve.conf tells the system where to
259:42 - go on the network to obtain hostname to
259:45 - IP address mappings DNS files like
259:48 - password Shadow and group for managing
259:50 - user accounts are found in the slash Etc
259:52 - directory while some distributions have
259:54 - historically had their own extensive
259:56 - infrastructure under slash Etc with the
260:00 - admin of systemmd there is much more
260:01 - uniformity among distributions today
260:03 - note that slash Etc is for system-wide
260:06 - configuration files and only the super
260:08 - user can modify files there
260:10 - user-specific configuration files are
260:13 - always found under their home directory
260:18 - this last boot directory contains the
260:21 - few essential files needed to boot the
260:22 - system for every alternative kernel
260:24 - installed on the system there are these
260:26 - four files VM Li news which is the
260:29 - compressed Linux kernel required for
260:32 - booting in it Ram FS which is the
260:34 - initial Ram file system required for
260:36 - booting sometimes called init Rd not in
260:39 - it Ram fs and then config the kernel
260:42 - configuration file only used for
260:44 - debugging and bookkeeping and finally
260:46 - system.map which is the kernel symbol
260:49 - table only used for debugging each of
260:51 - these files has a kernel version
260:53 - appended to its name the grub files such
260:56 - as boot grub slash grub.com or slash
261:00 - boot slash grub2
261:01 - grub2cfd are also found under the slash
261:04 - boot directory this screenshot shows an
261:07 - example listing of the slash boot
261:09 - directory taken from the Rel system that
261:11 - has multiple installed kernels including
261:14 - both distribution supplied and custom
261:16 - compiled ones names will Aryan things
261:19 - will tend to look somewhat different on
261:21 - a different distribution
261:26 - slash lib contains libraries which is
261:28 - which are common code shared by
261:30 - applications and needed for them to run
261:32 - it contains libraries for essential
261:34 - programs in slash bin and slash S Bend
261:37 - these Library file names either start
261:39 - with LD or lib here's an example
261:42 - most of these are what is known as
261:45 - dynamically loaded libraries also known
261:48 - as shared libraries or shared objects on
261:51 - some Linux distributions there exists a
261:53 - slash lib64 directory containing 64-bit
261:56 - libraries while slash lib contains
261:59 - 32-bit versions on recent Linux
262:02 - distributions you can find this
262:04 - just like for slash bin and slash S bin
262:07 - the directories just point to the those
262:09 - under slash user kernel modules or
262:12 - kernel code often device drivers that
262:14 - can be loaded and unloaded without
262:16 - restarting the system are located in
262:19 - slash lib slash modules slash and then
262:22 - the kernel version number
262:27 - one often uses removable media such as
262:29 - USB drives CDs and DVDs to make the
262:32 - material accessible through the regular
262:34 - file system it has to be mounted at a
262:36 - convenient location most linked systems
262:38 - are configured so any removable media
262:40 - are automatically mounted when the
262:42 - system notices something has been
262:44 - plugged in while historically this was
262:46 - done under the slash media directory
262:48 - modern Linux distributions place these
262:51 - Mount points under the slash run
262:53 - directory for example a USB pin drive
262:56 - with a label my USB drive for a user
262:59 - named student will be mounted at slash
263:01 - run slash media student slash my USB
263:03 - drive the slash Mount directory has been
263:06 - used since the early days of Unix for
263:08 - temporarily mounting file systems these
263:11 - can be those on removable media but more
263:13 - often they might be Network file systems
263:15 - which are not normally mounted or these
263:18 - can be temporary partitions or so-called
263:20 - loopback file systems which are files
263:23 - which pretend to be partitions
263:28 - here's some additional directories to be
263:30 - found under the root directory
263:41 - the slash user directory tree contains
263:43 - theoretically non-essential programs and
263:46 - scripts in the sense that they should
263:47 - not be needed to initially boot the
263:49 - system and has at least the following
263:52 - subdirectories shown here
264:01 - now that you know about the file system
264:03 - and its structure let's learn how to
264:05 - manage files and directories diff is
264:08 - used to compare files and directories
264:11 - this often used utility program has many
264:14 - useful options including the ones you
264:16 - see here
264:22 - to compare two files at the command
264:24 - prompt type diff and options file name 1
264:27 - file name two diff is meant to be used
264:29 - for text files for binary files one can
264:32 - use CMP in this section you will learn
264:35 - additional methods for comparing files
264:37 - and how to apply patches to files
264:43 - you can compare three files at once
264:45 - using diff3 which uses one file as the
264:48 - reference basis for the other two for
264:50 - example suppose you and a co-worker both
264:52 - have made modifications to the same file
264:54 - working at the same time independently
264:57 - diff 3 can show the differences based on
265:00 - the common file you both started with
265:03 - here's the Syntax for diff3
265:06 - this graphic shows the use of diff3 many
265:09 - modifications to source code and
265:11 - configuration files are distributed
265:13 - utilizing patches which were applied not
265:16 - surprisingly with the pets program a
265:18 - pets file contains the Deltas or changes
265:21 - required to update an older version of a
265:23 - file to the new one the patch files are
265:25 - actually produced by running diff with
265:27 - the correct options as in this command
265:30 - Distributing just the patch is more
265:33 - concise and efficient than Distributing
265:35 - the entire file for example if only one
265:37 - line needs to change in a file that
265:39 - contains one thousand lines the patch
265:41 - file will be just a few a few lines long
265:44 - to apply patch you can just do either of
265:47 - these two methods the first usage is
265:49 - more common as it's often used to apply
265:51 - changes to an entire directory tree
265:53 - rather than just one file as in the
265:56 - second example to understand the use of
265:58 - the dash P1 option and many others see
266:01 - the man page for patch
266:06 - in Linux a files extension often does
266:09 - not categorize it the way it might in
266:11 - other operating systems one cannot
266:13 - assume that a file name file.txt is a
266:16 - text file and not an executable program
266:18 - in Linux a file name is generally more
266:21 - meaningful to the user of a system than
266:23 - the system itself in fact most
266:25 - applications directly examine a file's
266:27 - contents to see what kind of app object
266:29 - it is rather than relying on an
266:31 - extension this is very different from
266:33 - the way Windows handles file names where
266:35 - a file naming ending in exe for example
266:38 - represents an executable binary file the
266:42 - real nature of a file can be determined
266:43 - by using the file utility for the file
266:47 - names given as arguments it examines the
266:49 - contents and certain characteristics to
266:52 - determine whether the files are plain
266:54 - text shared libraries executable
266:57 - programs scripts or something else
267:02 - there are many ways you can backup data
267:04 - or even your entire system basic ways to
267:07 - do so include the use of simple copying
267:09 - with CP and use of the more robust rsync
267:13 - both can be used to synchronize entire
267:15 - directory trees however our sync is more
267:18 - efficient because it checks if the file
267:20 - being copied already exists if the file
267:23 - exists and there's no change in size or
267:26 - modification time our sync will avoid an
267:28 - unnecessary copy and save time
267:30 - furthermore because our sync copies only
267:33 - the parts of the file that have actually
267:34 - changed it can be very fast
267:37 - CP can only copy files to and from
267:39 - destinations on the local machine but
267:41 - rsync can also be used to copy files
267:44 - from one machine to another
267:46 - locations are designated in the Target
267:49 - colon path form where Target can be the
267:52 - form of someone at host and the someone
267:54 - at part is optional and used if the
267:56 - remote user is different from the local
267:58 - user our sync is very efficient when
268:01 - recursively copying One Directory tree
268:04 - to another because only the differences
268:06 - are transmitted over the network one
268:09 - often synchronizes the destination
268:10 - directory tree with the origin using the
268:14 - dash R option to recursively walk down
268:16 - the directory tree copying all files and
268:18 - directories below the one listed as the
268:21 - source
268:25 - our sink is a very powerful utility for
268:28 - example a very useful way to back up a
268:30 - project directory might be to use this
268:32 - command
268:36 - note that rsync can be very destructive
268:39 - accidental misuse can do a lot of harm
268:41 - to data and programs by inadvertently
268:44 - copying changes to where they are not
268:46 - wanted take care to specify the correct
268:48 - options and paths it's highly
268:50 - recommended that you first test your RC
268:52 - command using the dash dry dash run
268:55 - option to ensure that it provides the
268:57 - results that you want to use rsync at
269:00 - the command prompt type rsync source
269:02 - file destination file where either file
269:04 - can be on the local machine or on a
269:07 - network machine the contents of source
269:09 - file will be copied to destination file
269:12 - a good combination of options is shown
269:14 - here
269:17 - the file data is often compressed to
269:19 - save disk space and reduce the time it
269:21 - takes to transmit files over networks
269:24 - Linux uses a number of methods to
269:26 - perform this compression including these
269:33 - these techniques vary in the efficiency
269:35 - of the compression or how much space is
269:38 - saved and how long they take to compress
269:40 - generally the more efficient techniques
269:42 - take longer decompression time does not
269:45 - vary as much across different methods
269:51 - you have completed chapter 10. let's
269:54 - summarize the key Concepts covered
269:57 - the file system tree off starts at what
270:00 - is often called the root directory or
270:02 - trunk or slash the file system
270:04 - hierarchical standard FHS provides Linux
270:07 - developers and system administrators a
270:10 - standard directory structure for the
270:12 - file system
270:13 - partitions help to segregate files
270:16 - according to usage ownership and type
270:19 - file systems can be mounted anywhere on
270:21 - the main file system tree at a mount
270:24 - Point automatic file systems mounting
270:26 - can be set up by editing Etc fstab in a
270:31 - fast or network file system is a useful
270:32 - method for sharing files and data
270:34 - through the network systems file systems
270:37 - like slash proc are called pseudo file
270:39 - systems because they exist only in
270:41 - memory slash root is the home directory
270:45 - for the root user slash VAR may be put
270:48 - in its own file system so that growth
270:51 - can be contained and not fatally affect
270:53 - the system
270:54 - slash boot contains the basic files
270:56 - needed to boot the system patch is a
270:59 - very useful tool in Linux many
271:01 - modifications to source code and
271:02 - configuration files are distributed with
271:04 - patch files as they contain the Deltas
271:07 - or changes to go from an old version of
271:09 - a file to the new version of a file file
271:12 - extensions in Linux do not necessarily
271:14 - mean that a file is of a certain type
271:17 - CP is used to copy files on the local
271:20 - machine while rsync can be all can be
271:23 - used to copy files from one machine to
271:25 - another as well as synchronize contents
271:30 - by the end of this chapter you should be
271:33 - familiar with how to create and edit
271:35 - files using the available Linux text
271:38 - editors Nano a simple text-based editor
271:41 - G edit a simple graphical editor VI and
271:45 - emacs to Advanced editors with both
271:48 - text-based and graphical interfaces
271:53 - at some point you will need to manually
271:56 - edit text files you might be composing
271:59 - an email offline writing a script to be
272:01 - used for bash or other command
272:03 - interpreters altering a system or
272:05 - application configuration file or
272:08 - developing source code for a programming
272:10 - language such as C python or Java Linux
272:13 - administrators May sidestep using a text
272:15 - editor instead employing graphical
272:17 - utilities for creating and modifying
272:19 - system configuration files however this
272:22 - can be more laborious than directly
272:24 - using a text editor and be more limited
272:26 - in capability
272:28 - note that word processing applications
272:30 - including those that are part of common
272:33 - Office application Suites are not really
272:35 - basic text editors they add a lot of
272:38 - extra usually invisible formatting
272:40 - information that will probably render
272:42 - system administration configuration
272:44 - files unusable for their intended
272:47 - purpose so knowing how to confidently
272:49 - use one or more text editors is really
272:52 - an essential skill to have for Linux by
272:55 - now you have certainly realized Linux is
272:57 - packed with choices when it comes to
273:00 - text editors there are many choices
273:02 - ranging from quite simple to very
273:05 - complex including Nano G edit VI or
273:10 - emacs
273:11 - in this section we learned first about
273:13 - the Nano and Geeta editors which are
273:16 - relatively simple and easy to learn and
273:19 - then later the more complicated choices
273:21 - VI and emacs before we start let's take
273:24 - a look at some cases where an editor is
273:27 - not needed
273:31 - sometimes you may want to create a short
273:34 - file and don't want to bother invoking a
273:36 - full text editor in addition doing so
273:39 - can be quite useful when used from
273:41 - within scripts even when creating longer
273:43 - files you'll no doubt find yourself
273:45 - using this method when you start on the
273:48 - later chapters that cover shell skip
273:50 - scripting if you want to create a file
273:52 - without using an editor there are two
273:53 - standard ways to create one from the
273:55 - command line and fill it with content
273:57 - the first one is to use Echo repeatedly
274:01 - like shown here
274:03 - note that while a single greater than
274:05 - sign will send the output of a command
274:08 - to a file two of them will append the
274:11 - new output to an existing file the
274:14 - second way is to use can't combined with
274:16 - redirection
274:18 - as in this example here
274:21 - both techniques produce a file with the
274:24 - following lines in it line one line two
274:27 - line three
274:28 - and are extremely useful when employed
274:30 - by Scripts
274:35 - there are some text editors that are
274:37 - pretty obvious they require no
274:39 - particular experience to learn and are
274:41 - actually quite capable even robust
274:43 - particularly easy to use one is the text
274:46 - terminal base editor Nano just invoke
274:49 - Nano by giving a file name as an
274:51 - argument all the help you need is
274:53 - displayed at the bottom of the screen
274:54 - and you should be able to proceed
274:56 - without any problem as a graphical
274:59 - editor G edit is part of the gnome
275:01 - desktop system K Wright is associated
275:04 - with KDE the G edit and K write editors
275:07 - are very easy to use and are extremely
275:09 - capable they're also very configurable
275:11 - they look a lot like notepad and windows
275:14 - other variants such as Kate are also
275:17 - supported by KDE Nano is easy to use and
275:20 - requires very little effort to learn to
275:22 - open a file type Nano and then the file
275:24 - name and press enter if the file does
275:27 - not exist it will be created Nano
275:29 - provides a two-line shortcut at the
275:32 - bottom of the screen that lists the
275:34 - available commands so these commands are
275:36 - Ctrl G display the help screen control o
275:40 - right to a file Ctrl X execute exit a
275:43 - file Ctrl R insert contents from another
275:46 - file to the current buffer or control C
275:49 - show the cursor position
275:51 - G edit is a simple to use graphical
275:54 - editor that can only be run within a
275:57 - graphical desktop environment it is
276:00 - visually quite similar to the notepad
276:02 - text editor in Windows but it's actually
276:04 - far more capable and very configurable
276:06 - and has a wealth of plugins available to
276:09 - extend its capabilities further
276:11 - to open a new file find the program in
276:14 - your desktop's menu system or from the
276:17 - command line type G edit and then the
276:19 - file name if the file does not exist it
276:22 - will be created using G edit is pretty
276:24 - straightforward and does not require
276:26 - much training its interface is composed
276:28 - of quite familiar elements
276:34 - developers and administrators
276:37 - experienced in working on unix-like
276:40 - systems almost always use one of the two
276:42 - venerable editing options VI and emacs
276:46 - both are present or easily available on
276:48 - all distributions and are completely
276:50 - compatible with the versions available
276:52 - on other operating systems both VI and
276:55 - emacs have a basic purely text-based
276:58 - form that can run in a non-graphical
277:00 - environment they also have one or more
277:03 - graphical interface forums with extended
277:06 - capabilities these may be friendlier for
277:08 - a less experienced user while VI and
277:11 - emacs can have significantly steep
277:13 - learning curves for new users they are
277:15 - extremely efficient when one is learned
277:17 - how to use them usually the actual
277:19 - program installed on your system is vim
277:21 - which stands for Vim proved and is
277:25 - aliased to the name VI even if you don't
277:29 - want to use VI it's good to gain some
277:31 - familiarity with it it's a standard tool
277:33 - installed on Virtual actually all Linux
277:36 - distributions and Mac OS indeed there
277:38 - may be times when there is no other
277:40 - editor available on the system and
277:42 - remember VI and them are going to be
277:45 - very similar gnome extends VI with a
277:47 - graphical interface known as gvm and KDE
277:50 - offers cavem either of these may be
277:52 - easier to use at first when using VI all
277:55 - commands are entered through the
277:57 - keyboard you don't need to keep moving
277:59 - your hands to use a pointer device such
278:01 - as a mouse or a touchpad unless you want
278:03 - to do so when using one of the graphical
278:05 - versions of the editor typing Vim tutor
278:09 - launches a short but very comprehensive
278:11 - tutorial for those who want to learn
278:13 - their first VI commands even though it
278:16 - provides only an introduction and just
278:18 - seven lessons it has enough material to
278:20 - make you a very proficient VI user
278:22 - because it covers a large number of
278:25 - commands after learning these basic ones
278:28 - you can look up new tricks to
278:30 - incorporate into your list of VI
278:32 - commands because there are always more
278:34 - optimal ways to do things in VI with
278:36 - less typing VI provides three modes as
278:40 - described in this table here it's vital
278:42 - to not lose track of which mode you're
278:44 - in many keystrokes and commands have
278:46 - quite different behave quite differently
278:49 - in different modes
278:56 - this table describes the most important
278:58 - commands used to start exit read and
279:00 - write files in VI
279:02 - the enter key needs to be pressed after
279:05 - all these commands
279:09 - and this table describes the most
279:11 - important keystrokes used when changing
279:13 - cursor positions in VI line mode
279:16 - commands those following a colon require
279:19 - the enter key to be pressed after the
279:21 - command is typed
279:25 - let's get started on using modes and
279:28 - cursor movements in VI open VI by typing
279:32 - VI followed by the file name VI opens in
279:36 - command mode type I to enter insert mode
279:39 - VI's insert mode is displayed type the
279:43 - following sentences
279:44 - the quick brown fox jumped over the lazy
279:47 - dog nobody expects the Spanish
279:49 - Inquisition to exit insert mode and
279:53 - switch to command mode press Escape
279:56 - to exit VI and save the file type colon
279:59 - WQ and press enter
280:02 - open the recently saved file and place
280:05 - the cursor on the letter k in the word
280:07 - quick in the first sentence to move the
280:10 - cursor four characters to the left type
280:13 - h four times the cursor is moved to
280:16 - letter Q of the word quick to move the
280:19 - cursor to the next line type J
280:22 - to move the cursor to the beginning of
280:24 - the next word type w the cursor is moved
280:28 - to the beginning of the word expects to
280:31 - move the cursor to the end type the
280:33 - dollar sign the cursor is moved to the
280:36 - end of the second sentence type I to
280:38 - enter insert mode VI insert mode is
280:41 - displayed to insert text at the end of
280:44 - the second sentence type A and type
280:47 - history the word history is displayed to
280:49 - the end of the sentence to exit insert
280:52 - mode and switch to command mode press
280:54 - escape to exit VI and save the file type
280:58 - colon WQ and press enter
281:02 - here you can see the most important
281:04 - commands used when searching for text in
281:07 - VI the enter key should be pressed after
281:09 - typing the search pattern
281:11 - this table describes the most important
281:14 - keystrokes used when searching for text
281:17 - in VI
281:18 - and this table describes the most
281:20 - important keystrokes used when changing
281:22 - adding and deleting text in VI
281:39 - typing the sh command opens an external
281:42 - command shell when you exit the shell
281:44 - you will resume your editing session
281:45 - piping exclamation point executes a
281:48 - command from within VI the command
281:51 - follows the exclamation point this
281:53 - technique is best suited for
281:55 - non-interactive commands such as
281:58 - exclamation point WC percentage typing
282:00 - this will run the word count command on
282:02 - the file the character the percentage
282:04 - represents the file currently being
282:06 - edited
282:08 - let's get started on using external
282:10 - commands saving and closing in Vim
282:13 - editor open VI editor by typing VI
282:16 - followed by the file name VI opens in
282:19 - command mode
282:20 - type I to enter insert mode VI's insert
282:24 - mode is displayed type the following
282:27 - sentences nobody expects the Spanish
282:29 - Inquisition nobody expects the 2020
282:33 - Revolution to exit insert mode and
282:35 - switch to command mode press escape to
282:38 - write and quit the file type colon WQ
282:41 - the file is updated with the changes
282:43 - enclosed open VI by typing VI followed
282:48 - by the file name
282:49 - to count the words in the current file
282:51 - type colon exclamation WC percent the
282:57 - word count is displayed press enter to
283:00 - continue editing to quit if no edits
283:02 - were made in the file type colon queue
283:05 - the file is closed open VI by typing VI
283:09 - followed by file name
283:11 - to quit without saving the file type
283:13 - colon queue exclamation the file is
283:16 - closed without saving the changes
283:21 - the Emax editor is a popular competitor
283:24 - for Vi unlike VI it does not work with
283:27 - modes emacs is highly customizable and
283:30 - includes a large number of features it
283:31 - was initially designed for use on a
283:33 - console but was soon adopted to work
283:35 - with a GUI as well emacs has many other
283:38 - capabilities other than Simple Text
283:40 - editing for example it can be used for
283:42 - email debugging and many other things
283:45 - rather than having different modes for
283:48 - command and insert like VI emacs uses
283:51 - the control and meta or alt or Escape
283:54 - keys for special commands here you can
283:57 - see some of the most important key
283:59 - combinations that are used when starting
284:01 - exiting reading and writing files in
284:04 - emacs
284:07 - the emacs tutorial is a good place to
284:09 - start learning basic commands it's
284:11 - available anytime when in emacs by
284:13 - simply typing Ctrl H for help and then
284:16 - the letter t for tutorial we will now
284:19 - demonstrate some of the operations you
284:22 - can do with emacs in your daily work
284:25 - so first let's get a file to edit so
284:27 - working in the TMP directory let's get a
284:30 - copy of Etc password and bring it over
284:33 - here
284:35 - and then in order to work on it I just
284:37 - have to say emacs pass in the name of
284:40 - the file
284:42 - Now the default font here is a little
284:44 - small so I'll play a trick and hit
284:46 - control and the middle button of the
284:49 - mouse to control the size of the font
284:52 - and then I'll make the window a little
284:55 - bigger
284:56 - Okay so we've done that now suppose I
284:58 - want to look for a certain string let's
285:01 - say FTP I would hit Ctrl s and type in
285:04 - the very bottom window at the very
285:07 - bottom line here FTP so you can see down
285:10 - here and you'll see it brought me to FTP
285:14 - I'll go back to the beginning of the
285:16 - line is hitting Ctrl a and then let's
285:19 - say I want to change all occurrences of
285:21 - the string FTP to something else I hit
285:24 - Escape
285:25 - percent Mark and then I'll say FTP again
285:28 - and the bottom line
285:30 - and then let's just do it backwards in
285:32 - capitals PTF
285:35 - and you see I hit space it does the
285:37 - first one
285:39 - space it does the second one space it
285:41 - does the third one if I had hit an
285:44 - exclamation point it would have done all
285:46 - of them in the entire file
285:50 - suppose I want to remove a line I can
285:52 - just hit Ctrl K and it's gone Ctrl K is
285:56 - gone again suppose I want to remove a
285:59 - range of lines I hit control space and
286:03 - then I
286:04 - go down a few lines uh with either the
286:08 - arrow key or control N I hit Ctrl w
286:11 - and they're gone if I want to move them
286:14 - further on in the file
286:16 - I go down a few lines and I hit Ctrl y
286:18 - for yank
286:20 - and they're back in there
286:22 - one nice thing I can do with emacs is
286:25 - open up multiple windows at the same
286:27 - time so let me hit Ctrl x 2 and now I've
286:31 - got two windows and I can switch to the
286:34 - bottom window by hitting Ctrl x o for
286:37 - other
286:38 - and then I hit control x f i could put a
286:41 - different file in that buffer so let's
286:43 - say I put in ETC group
286:49 - okay once again I'll make the font a
286:51 - little bigger by hitting control and the
286:53 - middle button on the mouse
286:55 - okay and you'll notice the bottom line
286:57 - is actually uh right protected so I
287:01 - can't really delete anything because it
287:03 - belongs to root if I try to delete this
287:05 - line it won't let me do it it says
287:07 - buffer is read only
287:09 - but in general like if I had two files
287:12 - with the same permissions I could cut
287:14 - and paste and go from one to the other
287:16 - to get back to just one I can do control
287:19 - X1 and I have only this but if I really
287:22 - wanted the other window I could hit Ctrl
287:24 - xB
287:26 - and I'm back in the password file
287:29 - if I want to rewrite it I can hit Ctrl x
287:32 - w
287:33 - control X control W and that would let
287:36 - me write it as a different name so I'll
287:38 - say p-a-s-w-d
287:41 - revised
287:43 - and it's there if I want to terminate
287:46 - the program I say control x s
287:48 - make sure things have been saved and
287:50 - then control XC
287:52 - and I'm done so you can see we use the
287:55 - control key quite a bit in Emax the
287:58 - position most keyboards put it in these
288:00 - days is a little unnatural all the way
288:03 - at the bottom left or right
288:05 - so veteran Emax users tend to remap the
288:08 - keyboard so that the caps lock key also
288:11 - works as control
288:13 - so that's some of the basic operations
288:15 - you would do in day-to-day use of emacs
288:24 - you have completed chapter 11. let's
288:27 - summarize the key Concepts covered
288:30 - text editors rather than word processing
288:32 - programs are used quite often in Linux
288:35 - for tasks such as creating or modifying
288:37 - system configuration files writing
288:39 - scripts developing source code and more
288:42 - Nano is an easy to use text-based editor
288:45 - that utilizes on-screen prompts G edit
288:48 - is a graphical editor very similar to
288:50 - notepad and windows the vi editor is
288:53 - available on all Linux systems and is
288:55 - very widely used graphical extension
288:58 - versions of VI are widely available as
289:01 - well the max is available on all Linux
289:03 - systems as a popular alternative to VI
289:06 - emacs can support both a graphical user
289:08 - interface and a text mode interface to
289:11 - access the vi tutorial type Vim tutor at
289:14 - a command line window to access the
289:16 - emacs tutorial type control h and then T
289:19 - from within emacs VI is three modes
289:22 - command insert and line emacs has only
289:26 - one but requires use of special keys
289:28 - such as control and Escape
289:30 - both editors use various combinations of
289:33 - keystrokes to accomplish tasks the
289:36 - learning curve to master these can be
289:38 - long but once mastered using either
289:40 - editor is extremely efficient
289:46 - by the end of this chapter you should be
289:48 - able to use and configure user accounts
289:51 - and user groups use and set environment
289:54 - variables use the previous shell command
289:57 - history
289:58 - use keyboard shortcuts
290:01 - use and Define aliases
290:04 - use and set file permissions and
290:07 - ownership
290:11 - as you know Linux is a multi-user
290:13 - operating system meaning more than one
290:16 - user can log on at the same time
290:19 - to identify the current user type who am
290:22 - I to list the currently logged on users
290:25 - type who
290:26 - giving who the dash a option will give
290:28 - more detailed information
290:34 - in Linux the command shell program
290:36 - generally bash uses one or more startup
290:39 - files to configure the user environment
290:42 - files in the slash Etc directory define
290:45 - global settings for all users while
290:47 - initialization files in the user's home
290:49 - directory can include and or override
290:51 - the global settings
290:53 - the startup files can do anything the
290:56 - user would like to do in every command
290:58 - shell
290:59 - such as customizing The Prompt defining
291:03 - command line shortcuts and aliases
291:06 - setting the default text editor setting
291:09 - the path for where to find executable
291:12 - Pro or setting the path for where to
291:14 - find executable programs
291:19 - the standard prescription is that when
291:21 - you first log into Linux slash Etc
291:24 - profile is read and evaluated after
291:27 - which the following files are searched
291:28 - if they exist in this order dot batch
291:32 - profile dot bash login dot profile where
291:36 - the squiggly line slash dot denotes the
291:38 - user's home directory the Linux login
291:41 - shell evaluates whatever startup file
291:43 - that it comes across first and ignores
291:46 - the rest this means that if it finds dot
291:48 - batch profile it ignores dot best login
291:51 - and Dot profile
291:53 - different distributions may use
291:55 - different startup files however every
291:58 - time you create a new shell or terminal
292:00 - window you do not have to perform a full
292:03 - system login only a file name dot bat RC
292:07 - file is read and evaluated although this
292:09 - file is not read and evaluated along
292:11 - with the login shell most distributions
292:13 - and or users include the dot bash RC
292:16 - file from within one of the three
292:18 - user-owned startup files
292:21 - most commonly users only fiddle with the
292:24 - dot bashrc as it is it is invoked every
292:26 - time a new command line shell initiates
292:28 - or another program is launched from a
292:31 - trauma window while the other files are
292:33 - read and executed only when the user
292:36 - first logs on to the system
292:38 - recent distributions sometimes do not
292:41 - even have bash profile and or bash login
292:44 - and some just do little more than
292:47 - include dot bash RC
292:52 - you can create customized commands or
292:55 - modify the behavior of already existing
292:58 - ones by creating aliases most often
293:01 - these aliases are placed in your bashrc
293:03 - file so they're available to any command
293:06 - shells you create on Alias removes an
293:09 - alias
293:10 - typing Alias with no argument will list
293:12 - currently defined aliases
293:15 - please note that there should not be any
293:17 - spaces on either side of the equal sign
293:20 - and the Alias definition needs to be
293:22 - placed within either single or double
293:24 - quotes if it contains any spaces
293:31 - all Linux users are assigned a unique
293:33 - user ID uid which is just an integer
293:36 - normal users start with a uid of 1000 or
293:39 - greater Linux uses groups for organizing
293:42 - users groups are collections of accounts
293:44 - with certain shared permissions control
293:46 - of group membership is administered
293:49 - through the slash Etc group file which
293:52 - shows a list of groups and their members
293:54 - by default every user belongs to a
293:56 - default or primary group when a user
293:59 - logs in the group membership is set for
294:01 - their primary group and all the members
294:03 - enjoy the same level of access and
294:05 - privilege permissions on various files
294:08 - and directories can be modified at the
294:10 - group level users also have one or more
294:13 - group IDs GID including a default one
294:16 - which is the same as the user ID these
294:19 - numbers are associated with names
294:21 - through the files slash Etc password and
294:24 - slash Etc group groups are used to
294:27 - establish a set of users who have common
294:29 - interests for the purpose of x success
294:31 - rights Privileges and security
294:34 - considerations
294:35 - access rights to files and devices are
294:38 - granted on the basis of the user and the
294:40 - group they belong to
294:45 - distributions have straightforward
294:47 - graphical interfaces for creating and
294:50 - removing users and groups and
294:52 - manipulating group membership however
294:55 - it's often useful to do it from the
294:57 - command line or from within shell
294:59 - scripts only the root user can add and
295:02 - remove users and groups adding a new
295:05 - user is done with user ad and removing
295:07 - an existing user is done with user Dell
295:09 - in the simplest form an account for the
295:12 - new user BJ moose would be done with
295:14 - sudo user ad BJ moose which by default
295:18 - sets the home directory to slash home
295:20 - slash BJ moose populates it with some
295:22 - basic files copied from slash Etc skell
295:26 - and adds a line to the slash ett slash
295:28 - password such as this
295:31 - and sets the default shell to slash spin
295:33 - slash bash removing a user account is as
295:36 - easy as typing user Dell BJ moose
295:38 - however this will leave the slash home
295:40 - slash BJ moose directory intact this
295:43 - might be useful if it's a temporary
295:45 - inactivation to remove the home
295:47 - directory while removing the account one
295:49 - needs to use the dash R option to user
295:52 - Dell
295:53 - typing ID with no arguments gives gives
295:56 - information about the current user as in
295:59 - this ID
296:00 - if given the name of another user as an
296:04 - argument ID will record information
296:06 - about that other user
296:08 - let's get some experience with creating
296:11 - modifying and removing a new user
296:13 - account we will do this on Ubuntu 1704.
296:17 - there are some variations between
296:19 - distributions about what exactly is
296:22 - created when a new account is is created
296:26 - and exactly which files are there Etc
296:29 - this is mostly controlled by a file
296:32 - under
296:33 - Etc default
296:35 - user ad appropriately named
296:38 - so you can see for example in here the
296:41 - default shell is set to be shell bsh bin
296:45 - sh
296:46 - now on some distributions such as red
296:48 - hat this files rather short and not very
296:51 - well documented on Ubuntu is rather long
296:54 - so let's create the account as you do
296:58 - a user ad and I'll say Dash M to make
297:02 - sure it creates a home directory some
297:06 - uh some distributions do not do that by
297:09 - default the Ubuntu does not for instance
297:11 - and neither does open Souza I'll give
297:14 - the full name to be
297:16 - Eric dolphy
297:19 - I'll specify the default shell to be bin
297:22 - bash with the S option
297:25 - and here's the name e d o l p h y e
297:28 - dolphin
297:30 - now I still have to pass a specify a
297:33 - password so I'll do that whatever you do
297:35 - past w d e d o l p h y and then I type
297:41 - something
297:43 - and now the accounts exist and I can
297:46 - verify that by making sure entries were
297:49 - made
297:50 - uh in the etcy
297:54 - password file and etcy group
297:57 - and there we go notice it is now user
298:01 - 1001 remember normal users start at 1000
298:05 - and student is user 1000 and so that's
298:08 - appropriate
298:10 - and also the other information I
298:12 - specified is there such as the full
298:14 - username and the shell bin Bash
298:18 - and the group is set to be 1001
298:21 - which is the same ID as the user all
298:25 - users are created with at least one
298:27 - group that has the same number as their
298:29 - username
298:31 - now let's actually try to log into that
298:33 - account and I'll do that with SSH
298:36 - and
298:38 - e-d-o-l-p-h-y at localhost
298:41 - and I'll give the password
298:45 - and I succeeded just fine
298:48 - so let's see what's actually in that
298:49 - directory
298:51 - and you'll see there isn't much but
298:54 - these are files that all new users get
298:58 - um and let me log out now and that's
299:00 - controlled by whatever's in the ETC skel
299:04 - directory anything you put in there
299:07 - let me do the a option anything you put
299:09 - in there
299:10 - will show up in any new users
299:14 - account
299:17 - so let's just clean up and I'll do that
299:19 - with user
299:21 - Del Dash R uh e dolphy
299:26 - and the
299:28 - R is necessary to make sure it removes
299:31 - the home directory
299:33 - you know as I get a warning message
299:35 - about not having created a mail spool
299:38 - file that's harmless
299:39 - and if you do lssl on home now we see
299:42 - the account is gone so we're all cleaned
299:45 - up
299:50 - adding a new group is done with group AD
299:54 - so you can use sudo slash user slash S
299:57 - Pen slash group AD a new group the group
300:00 - can be removed with
300:01 - sudo slash user slash S Pen slash group
300:04 - Dell a new group
300:06 - adding a user to an already existing
300:08 - group is done with user mod for example
300:11 - when you would first look at what groups
300:13 - the user already belongs to
300:18 - and then add the new group
300:21 - sudo slash user slash S Pen slash user
300:23 - mod Dash a dash G in your group RDS
300:26 - squirrel RJ squirrel and then groups RJ
300:29 - squirrel will show the new group
300:31 - these utilities update the slash Etc
300:34 - group as necessary make sure you use the
300:36 - dash a option for append so as to avoid
300:39 - removing already existing groups group
300:41 - mod can be used to change group
300:43 - properties such as the group ID with the
300:46 - dash G option or its name with the with
300:49 - the dash in option removing a user from
300:52 - the group is somewhat trickier the dash
300:55 - G option to user mod must give a
300:57 - complete list of groups thus if you do
301:00 - pseudo slash user slash S Pen slash user
301:04 - mod Dash g r j squirrel RJ squirrel and
301:08 - then do groups RJ squirrel you'll see
301:11 - that only the RJ squirrel group will be
301:14 - left
301:18 - the root account is very powerful and
301:20 - has full access to the system other
301:22 - operating systems often call this the
301:24 - administrator account in Linux it's
301:27 - often called the super user account you
301:30 - must be extremely cautious before
301:31 - granting full root access to a user it's
301:33 - rarely if ever Justified external
301:35 - attacks often consist of tricks used to
301:38 - elevate the root account however you can
301:41 - use sudo to assign more limited
301:43 - privileges to user accounts but only do
301:46 - it on a temporary basis and only for a
301:49 - specific subset of commands
301:54 - when assigning elevated privileges you
301:57 - can use the command Su the switch or
302:01 - substitute user to launch a new shell
302:03 - running as another user you must type
302:06 - the password of the user you are
302:07 - becoming most often this other user is
302:10 - root and the new shell allows the use of
302:13 - elevated privileges until it's until it
302:15 - is exceeded it's almost always a bad
302:18 - practice to use slsu to become root
302:21 - resulting errors can include deletion of
302:24 - vital files from the system and security
302:26 - breaches
302:28 - granting privileges using Sudo is less
302:31 - dangerous and is preferred by default
302:34 - Studio must be enabled on a per user
302:37 - basis however some distributions such as
302:39 - Ubuntu enable it by default for at least
302:42 - one main user or give this as an
302:45 - installation option
302:49 - to temporarily become the super user for
302:52 - a series of commands you can type Su and
302:56 - then be prompted for the root password
302:59 - to execute just one command with root
303:02 - privileges type sudo and then the
303:04 - command when the command is complete you
303:07 - will return to being a normal
303:09 - unprivileged user
303:11 - sudo configuration files are stored in
303:14 - the slash Etc sudoers file and in the
303:17 - slash Etc
303:19 - pseudoers.d directory by default the
303:23 - pseudoers.directory is empty and
303:25 - whenever you talk about sudo in a course
303:28 - or article you're basically required to
303:31 - show this webcomic by XKCD
303:39 - environment variables are quantities
303:41 - that have specific values which may be
303:44 - utilized by the command shell such as
303:46 - bash or other utilities and applications
303:49 - some environment variables are given
303:51 - preset values by the system which can
303:54 - usually be overridden While others are
303:56 - set directly by the user either at the
303:58 - command line or within startup and other
304:00 - scripts an environment variable is
304:03 - actually just a character string that
304:06 - contains information used by one or more
304:08 - applications there are a number of ways
304:11 - to view the values of currently set
304:13 - environment variables one can type set
304:16 - EMV or export depending on the state of
304:20 - your system set May print out many more
304:22 - lines than the other two methods
304:27 - by default variables created within a
304:30 - script are only available to the current
304:32 - shell child processes subshells will not
304:35 - have access to values that have been set
304:38 - or modified allowing child processes to
304:40 - see the values requires use of the
304:43 - export command
304:51 - you can also set environment variables
304:53 - to be fed as a one shot to a command as
304:57 - in the following
304:58 - this feeds the values of the Esters and
305:02 - K root environment variables to the
305:04 - command make modules install
305:10 - home is an environment variable that
305:13 - represents the home or login directory
305:15 - of the user
305:17 - CD without arguments will change the
305:19 - current working directory to the value
305:21 - of home
305:22 - note the tilde character is often used
305:25 - as an abbreviation for home thus CD home
305:29 - and CD with utility are completely
305:31 - equivalent statements
305:38 - foreign
305:45 - path is an ordered list of directories
305:48 - the path which is scanned when a command
305:51 - is given to find the appropriate program
305:54 - or script to run each directory in the
305:57 - path is separated by colons a null or
306:00 - empty directory name or slash indicates
306:03 - the current directory at any given time
306:05 - so in this example there is a null
306:07 - directory before the first colon
306:10 - similarly for this there is a null
306:12 - directory between path 1 and path 2.
306:16 - to prefix a private bin directory to to
306:19 - your path you can use this command
306:28 - the environment variable shell points to
306:31 - the user's default command shell the
306:34 - program that is handling whatever you
306:36 - type in a command window usually bash
306:38 - and it contains the Full path name to
306:41 - the Shell
306:45 - prompt statement or Ps is used to
306:48 - customize your prompt string in your
306:50 - terminal Windows to display the
306:52 - information you want PS1 is the primary
306:55 - prompt variable which controls what your
306:58 - command line prompt looks like
307:00 - the following special characters can be
307:03 - included in PS1
307:08 - they must be surrounded in single quotes
307:10 - when they are used as in this example
307:22 - bash keeps track of previously entered
307:24 - commands and statements in a history
307:27 - buffer you can recall previously used
307:29 - commands simply by using the up and down
307:32 - cursor keys to view the list of
307:34 - previously executed commands you can
307:36 - just type history at the command line
307:40 - this list of commands is displayed with
307:42 - the most recent command appearing last
307:45 - in the list this information is stored
307:48 - in the slash dash dash history if you
307:51 - have multiple terminals open the
307:52 - commands typed in each session are not
307:55 - saved until the session terminates
308:00 - several Associated environment variables
308:02 - can be used to get information about the
308:05 - history pile his file is the location of
308:08 - the history file his file size is the
308:11 - maximum number of lines in the history
308:13 - file default 500 his size is the maximum
308:17 - number of commands in the history file
308:20 - his control is how commands are stored
308:23 - hist ignore is which command lines can
308:27 - be unsaved for a complete description of
308:30 - the the use of these environment
308:31 - variables see the man page and Bash
308:37 - there are specific keys to perform
308:39 - various tasks if you want to recall a
308:42 - command in the history list but do not
308:45 - want to press the arrow key repeatedly
308:47 - you can press Ctrl R to do a reverse
308:49 - intelligent search as you start typing
308:52 - the search goes back in reverse order to
308:54 - the First Command that matches the
308:56 - letters you have typed by typing more
308:58 - successive letters you make the match
309:00 - more and more specific
309:05 - you can use keyboard shortcuts to
309:08 - perform different tasks quickly this
309:10 - table lists some of these keyboard
309:12 - shortcuts and their uses note the case
309:15 - of the hotkey does not matter meaning
309:18 - doing control a is the same as doing
309:20 - control capital a
309:28 - in Linux and other Unix based operating
309:30 - systems every file is associated with a
309:32 - user who is the owner every file is also
309:35 - associated with a group a subset of all
309:37 - users which has an interest in the file
309:40 - and certain rights or permissions read
309:42 - write and execute the following utility
309:45 - programs involve user and group
309:47 - ownership and permission settings
309:57 - files have three kinds of permissions
309:59 - read write and execute these are
310:03 - generally represented as the rwx these
310:07 - permissions affect the three groups of
310:09 - owners owner user owner group and others
310:13 - as a result you have the following three
310:15 - groups of three permissions there are a
310:18 - number of different ways to use chmod
310:20 - for instance to give the owner and
310:22 - others execute permission and remove the
310:24 - group write permission you can do this
310:27 - where the U stands for user or owner o
310:31 - stands for other world and G stands for
310:33 - group
310:34 - this kind of syntax can be difficult to
310:37 - type and remember so one often uses a
310:40 - shorthand which lets you set all the
310:42 - permissions in one step this is done
310:44 - with a simple algorithm and a single
310:47 - digit suffices to specify all three
310:49 - permission bits for each entity this
310:52 - digit is the sum of four if read
310:54 - permission is desired two if right
310:56 - permission is desired one if execute
310:59 - permission is desired so 7 means read
311:03 - write execute six means read write 5
311:06 - means read execute when you apply this
311:09 - to the the chmod command you have to
311:12 - give three digits for each degree of
311:15 - Freedom such as chmod 755 sum file
311:25 - now let's see an example of changing
311:27 - file ownership using CH own as shown in
311:31 - this screenshot
311:33 - first we create two empty files using
311:36 - touch
311:37 - notice it requires sudo to change the
311:40 - owner of file 2 to root the second CH
311:42 - ohm command changes both owner and group
311:45 - at the same time
311:46 - finally only the super user can remove
311:49 - the files now let's see an example of
311:52 - changing the group ownership using
311:54 - chgrep
312:01 - you have completed chapter 12. let's
312:04 - summarize the key Concepts covered
312:07 - Linux is a multi-user system
312:10 - to find the currently logged on users
312:12 - you can use the who command to find the
312:15 - current user ID you can use the who am I
312:18 - command
312:20 - the root account has full access to the
312:23 - system it's never sensible to Grant full
312:25 - root access to a user you can assign
312:28 - root privileges to regular user accounts
312:30 - on a temporary basis using the sudo
312:33 - command
312:34 - the shell program or bash uses multiple
312:38 - startup files to create the user
312:39 - environment each file affects the
312:42 - interactive environment in a different
312:43 - way slash ectc profile provides the
312:47 - global settings
312:48 - advantages of startup files include that
312:51 - they customize the user's prompt set the
312:54 - user's terminal type set the command
312:56 - line shortcuts and aliases and set the
312:59 - default text editor an environment
313:01 - variable is a character string that
313:03 - contains data used by one or more
313:05 - applications the built-in shell
313:07 - variables can be customized to suit your
313:10 - requirements the history command recalls
313:13 - a list of previous commands which can be
313:16 - edited and recycled in Linux various
313:19 - keyboard shortcuts can be used at the
313:21 - command prompt instead of long actual
313:24 - commands you can customize commands by
313:27 - creating aliases adding an alias to the
313:31 - slash.rc file will make it available for
313:34 - other shells file permissions can be
313:36 - changed by typing chmod permissions in
313:39 - the file name file ownership is changed
313:42 - by typing CH own then the owner and the
313:45 - file name the file group ownership is
313:47 - changed by typing CHC Erp then the group
313:50 - then the file name
313:55 - by the end of this chapter you should be
313:57 - able to display and append to file
314:00 - contents using cat and Echo edit and
314:03 - print file content to contents using SED
314:06 - and ewk search for patterns using grep
314:09 - use multiple other utilities for file
314:12 - and text manipulation
314:17 - irrespective of the role you play with
314:19 - Linux such as system administrator
314:21 - developer or user you often need to
314:23 - browse through and parse text files and
314:26 - or extract data from them these are file
314:29 - manipulation operations thus it's
314:31 - essential for the Linux user to become
314:33 - Adept at performing certain operations
314:36 - on files most of the time such file
314:39 - manipulation is done at the command line
314:41 - which allows users to perform tasks more
314:44 - efficiently than while using a GUI
314:46 - furthermore the command line is more
314:48 - suitable for automating often executed
314:51 - tasks indeed experienced system
314:53 - administrators write customized scripts
314:55 - to accomplish such repetitive tasks
314:57 - standardized for each particular
314:59 - environment we'll discuss such scripting
315:02 - later in much detail
315:03 - in this section we'll concentrate on
315:06 - command line file and text manipulation
315:08 - related utilities
315:13 - cat is short for concatenate and is one
315:16 - of the most frequently used Linux
315:18 - command line utilities it's often used
315:20 - to read and print files as well as for
315:23 - simply viewing file contents to view a
315:25 - file use the following command cat and
315:28 - then the file name
315:29 - for example cat readme.txt will display
315:33 - the contents of readme.txt on the
315:35 - terminal however the main purpose of cat
315:37 - is often to combine or concatenate
315:40 - multiple files together you can perform
315:43 - the actions listed in this table using
315:46 - cat
315:51 - the tech command or cat spelled
315:53 - backwards prints the lines of a file in
315:56 - reverse order each line Remains the Same
315:58 - but the order of lines is inverted the
316:00 - syntax of TAC is exactly the same as for
316:02 - cat as in the following
316:07 - cat can be used to read from standard
316:08 - input such as the terminal window if no
316:11 - files are specified you can use the
316:13 - greater than operator to create and add
316:15 - new lines to file and the double greater
316:18 - than operator to append lines or files
316:21 - to an existing file to create a new file
316:23 - at the command prompt type cat greater
316:25 - than file name and press the enter key
316:28 - this command creates a new file and
316:31 - waits for the user to edit or enter the
316:34 - text after you finish typing the
316:36 - required text press Ctrl D at the
316:38 - beginning of the next line to save and
316:40 - exit the editing
316:42 - let's demonstrate some of the basic
316:45 - operations you can perform with the cat
316:47 - utility where the word cat stands for
316:51 - concatenate
316:52 - it's typically used to copy files
316:54 - combine them Etc so first we will need a
316:57 - couple of simple text files to play with
316:59 - let's create one using a text editor
317:03 - let's say Nano so Nano file 1. text
317:07 - and I will just type in a couple of
317:13 - lines actually three lines with a point
317:16 - one at the end I hit control X for exit
317:19 - I say yes I want to save the modified
317:21 - buffer and I keep the name
317:23 - so now I can look at the the file
317:26 - created with cat so I do cat file one to
317:29 - text
317:30 - perfect
317:31 - now let's create another one
317:32 - interactively using cat itself as we
317:35 - talked about earlier so I can say cat
317:39 - in their Direction with elf and I'll put
317:42 - it into file 2.txt
317:45 - and here is a second file with a few
317:50 - lines
317:51 - and then I just type eof on a line
317:56 - and that
317:58 - closes the input phase and I can say cat
318:00 - file 2.6
318:03 - it's there if I want to see them both
318:06 - together I can say cat file one the text
318:10 - file two dot text
318:12 - I see a combined or I could send it into
318:15 - a third file file three that text
318:19 - and then clear the screen I can say cat
318:22 - file three
318:24 - a text and I see the combined
318:28 - two files in a third file
318:30 - so this is how we use CAD it's an
318:32 - everyday operation you rarely do
318:34 - anything that much more complicated with
318:36 - it
318:42 - system administrators need to work with
318:44 - configuration files text files
318:46 - documentation files and log files some
318:49 - of these files may be larger or become
318:51 - quite large as they accumulate data with
318:53 - time these files will require both
318:55 - viewing and administrative updating in
318:58 - this section you will learn how to
319:00 - manage such large files for example a
319:03 - banking system might maintain one simple
319:05 - large log file to record details of all
319:07 - of One day's ATM transactions due to a
319:11 - security attack or a malfunction the
319:13 - administrator might be forced to check
319:15 - for some data by navigating within the
319:17 - file in such cases directly opening the
319:20 - file in an editor will cause issues due
319:22 - to high memory utilization as an editor
319:25 - we'll usually try to read the whole file
319:27 - into memory first however one can use
319:30 - less to view the contents of such a
319:32 - large file scrolling up and down Page by
319:35 - Page without the system having to place
319:37 - the entire file in memory before
319:39 - starting this is much faster than and
319:42 - using a text editor viewing some file
319:44 - can be done by typing either of the two
319:46 - following commands less some file or cat
319:50 - some file pipe less
319:52 - by default Man pages are sent through
319:54 - the less command you may have
319:56 - encountered the older more utility which
319:58 - has some basic functionality but fewer
320:00 - capabilities I.E less is more
320:07 - head reads the first few lines of each
320:09 - named file 10 by default and displays it
320:12 - on standard output you can give a
320:14 - different number of lines in an option
320:16 - for example if you want to print the
320:18 - first five lines from Etc slash default
320:21 - scrub we can use this command head Dash
320:24 - in and then Etc default scrub you can
320:27 - also just do this head Dash 5 Etc
320:31 - default scrub
320:35 - tail prints the last few lines of each
320:38 - named file and displays it on standard
320:40 - output by default it's it displays the
320:43 - last 10 lines you can give a different
320:45 - number of lines as an option tail is
320:47 - especially useful when you are
320:49 - troubleshooting any issue using log
320:51 - files as you probably want to see the
320:53 - most recent lines of output for example
320:56 - this to display the last 15 lines of
320:58 - some file.log we can use this command
321:01 - tail Dash end 15 some file that log you
321:05 - can also just do this
321:07 - tail that's 15 some file that log
321:10 - continually monitor new output in a
321:12 - growing log file we can do tail Dash F
321:15 - some follow that log this command will
321:18 - continuously display any new lines of
321:20 - output in some file.log as soon as they
321:23 - appear thus it enables you to monitor
321:26 - any current activity that is being
321:28 - reported and recorded
321:33 - it's very common to create and then
321:35 - repeatedly edit and or extract contents
321:38 - from a file let's learn how to use SED
321:40 - and awk to easily perform such
321:43 - operations
321:44 - note that many Linux users and
321:46 - administrators will write scripts using
321:49 - comprehensive scripting languages such
321:51 - as Python and Perl rather than use SED
321:55 - and awk and some of the other utilities
321:57 - we'll discuss later using such utilities
321:59 - is certainly fine in most circumstances
322:01 - one should always feel free to use the
322:04 - tools one is experienced with however
322:06 - the utilities that are described here
322:08 - are much lighter I.E they use fewer
322:11 - system resources and execute faster
322:14 - there are situations such as during
322:16 - booting the system where a lot of time
322:18 - would be wasted using the more
322:20 - complicated tools and the system may not
322:22 - even be able to run them so the simpler
322:25 - tools will always be needed
322:30 - SED is a powerful text processing tool
322:33 - and is one of the oldest earliest and
322:35 - most powerful Unix utilities it's used
322:38 - to modify the contents of a file or
322:40 - input stream usually placing the
322:42 - contents into a new file or output
322:44 - stream its name is is an abbreviation
322:46 - for stream editor
322:49 - said SED can filter text as well as
322:52 - perform substitutions in data streams
322:54 - data from an input source or file is
322:57 - taken and moved to a working space the
323:00 - entire list of operations or
323:02 - modifications is applied over the data
323:04 - in the working space and then file
323:06 - contents are moved to the standard
323:07 - output space or stream you can invoke
323:10 - Saturn sdd using commands like those
323:12 - listed in this table the dash e option
323:15 - allows you to specify multiple editing
323:18 - commands simultaneously at the command
323:21 - line it's unnecessary if you only have
323:23 - one operation invoked now that you know
323:27 - that you can perform multiple editing
323:28 - and filtering operations with said let's
323:31 - explain some of them in more detail the
323:34 - table explains some basic operations
323:36 - where pattern is the current string and
323:39 - replace underscore string is the new
323:41 - string
323:48 - let's demonstrate some of the most
323:51 - Elementary operations you can perform
323:54 - with SCD on a fedora system
323:58 - so I have taken the Liberty to prepare a
324:01 - simple text file uh before we start
324:04 - which looks like this cat in file that
324:07 - text
324:08 - it just says three lines indicating
324:11 - their presence
324:12 - so balls I do
324:15 - scd-e slash
324:17 - and then let's say is to R
324:23 - on the file
324:25 - and the output will go right on standard
324:28 - out
324:29 - and you see it changed only the first
324:32 - instance on every line so I even have
324:35 - VAR instead of this
324:39 - um I can make a slight modification to
324:41 - the command if I put a g at the end of
324:44 - it
324:45 - and you see this time we caught every
324:48 - instance
324:49 - I could also do
324:53 - something like this one comma 2s
324:58 - and it only did it on the first and the
325:00 - second line but I left the third line
325:02 - alone
325:04 - you'll notice that I don't have to use a
325:07 - forward slash I can use many other
325:10 - characters so here I'll use a colon
325:14 - and it makes no difference what I use
325:17 - now there is an option for SED to change
325:21 - character streams in place on the
325:24 - original file but it's a pretty
325:27 - dangerous operation to do since you
325:29 - destroying the original file so
325:31 - generally it's better to send the output
325:33 - into another file so I'll do I'll call
325:36 - that one out file.txt
325:41 - oh I forgot to say infile.text for input
325:46 - so it hung so
325:49 - now I can look at out file.text
325:54 - you see and that's the output and if I
325:57 - want to use the diff command to see the
326:00 - difference I can do something like this
326:01 - diff in file.text
326:05 - Al file dot text
326:09 - and it shows me the two lines that have
326:11 - changed
326:12 - now you can do some pretty complicated
326:14 - things with SCD when you're trying to
326:17 - deal with special characters including
326:20 - spaces and question marks and stars life
326:24 - can get pretty complicated it it
326:27 - respects everything in the world about
326:30 - what are called regular Expressions
326:33 - which can look rather strange but it's a
326:37 - daily tool that's just the
326:38 - administrators do to make Elementary
326:40 - substitutions and files
326:42 - so that's a little bit about SCD
326:49 - awk awk is used to extract and then
326:52 - print specific contents of a file is
326:54 - often used to construct reports it was
326:56 - created at Bell labs in the 1970s and
326:58 - derived its name from the last names of
327:00 - its authors akes the following features
327:03 - it's a powerful utility and interpreted
327:05 - programming language it's used to
327:07 - manipulate data files and for retrieving
327:09 - and processing text it works well with
327:12 - Fields containing a single piece of data
327:14 - essentially a column and Records a
327:16 - collection of fields essentially a line
327:19 - in a file
327:20 - awk is invoked as shown in this example
327:26 - as was said short op commands can be
327:28 - specified directly at the command line
327:30 - but a more complex script can be saved
327:33 - in a file that you can specify using the
327:35 - dash F option
327:37 - this table explains the basic tasks that
327:40 - can be performed using awk the input
327:42 - file is read one line at a time and for
327:44 - each line awk matches the given pattern
327:46 - in the given order and performs a
327:48 - requested action the dash F option
327:50 - allows you to specify a particular field
327:53 - separator character for example the
327:55 - slash Etc password file uses a colon to
327:59 - separate Fields so the dash F colon
328:02 - option is used with the slash EDC slash
328:04 - password file the command or action in
328:07 - AUC needs to be surrounded with
328:08 - apostrophes or single quotes awk can be
328:12 - used like the following like in this
328:14 - example
328:18 - in managing your files you may need to
328:20 - perform tasks such as sorting data and
328:23 - copying data from one location to
328:25 - another Linux provides numerous file
328:28 - manipulation utilities that you can use
328:30 - while working with text files in this
328:33 - section you will learn about the
328:34 - following file manipulation programs
328:36 - sort unique paste join and split you
328:42 - also learn about regular expressions and
328:45 - search patterns
328:49 - sort is used to rearrange the lines of a
328:52 - text file in either ascending or
328:55 - descending order according to a sort key
328:57 - you could also sort with respect to
329:00 - particular fields or columns in a file
329:02 - the default sort key is the order of the
329:04 - ASCII characters I.E essentially
329:07 - alphabetically so it can be used like
329:09 - this
329:12 - when used with the dash U option sort
329:14 - checks for Unique values after sorting
329:16 - the records or lines it's basically
329:18 - equivalent to running unique on the
329:20 - output of sort
329:25 - unique removes duplicate consecutive
329:27 - lines in a text file and it's useful for
329:29 - simplifying the text display because
329:32 - unique requires that the duplicate
329:34 - entries must be consecutive when often
329:37 - run sort first and then pipes output
329:39 - into unique if sort is used with the
329:42 - dash U option it can do all this in one
329:45 - step to remove duplicate entries from
329:48 - multiple files at once use this command
329:52 - or you can use do this one
329:55 - to count the number of duplicate entries
329:57 - use this command
330:03 - suppose you have a file that contains
330:05 - the full name of all employees and
330:07 - another file that lists their phone
330:08 - numbers and employee IDs you want to
330:11 - create a new file that contains all the
330:12 - data listed in three columns name
330:14 - employee ID and phone number how can you
330:16 - do this effectively without investing
330:18 - too much time Paste can be used to
330:20 - create a single file containing all
330:23 - three columns the different columns are
330:25 - identified based on delimiters which is
330:27 - spacing used to separate two fields for
330:30 - example delimiters can be a blank space
330:32 - a tab or an enter in this image a single
330:35 - space is used as a delimiter in all
330:38 - files
330:39 - paste accepts the following options Dash
330:42 - D for the delimiters which specify a
330:45 - list of delimiters to be used instead of
330:47 - tabs for separating consecutive values
330:49 - on a single line each delimiter is used
330:52 - in turn when the list has been exhausted
330:54 - Pace begins again at the first delimiter
330:58 - dash s which causes Pace to append the
331:00 - data in series rather than in parallel
331:03 - that is in a horizontal rather than
331:05 - vertical fashion
331:06 - Paste can be used to combine Fields such
331:09 - as name or phone number from different
331:10 - files as well as combine lines from
331:13 - multiple files for example Line 1 from
331:15 - file 1 can be combined with line 1 of
331:18 - file 2 and line 2 from file 1 can be
331:20 - combined with line 2 of file two and so
331:23 - on to paste contents from two files one
331:26 - can do this
331:28 - and here's the syntax to use a different
331:31 - delimiter
331:32 - common delimiters are space Tab and
331:34 - comma
331:38 - suppose you have two files with with
331:40 - similar columns you have saved employees
331:43 - phone numbers and two files one with the
331:45 - first name and the other with their last
331:47 - name you want to combine the files
331:49 - without repeating the data of common
331:51 - columns how do you achieve this
331:54 - this task can be achieved using join
331:57 - which is essentially an enhanced version
331:59 - of paste it first checks whether the
332:01 - files share common fields such as names
332:04 - or phone numbers and then joins the
332:06 - lines and two files based on a common
332:08 - field to combine two files on a common
332:11 - field at the common prompt type join
332:14 - file one file 2 and press the enter key
332:16 - for example the common field I.E it
332:19 - contains the same values among the phone
332:21 - book and cities files is the phone
332:24 - number and the result of joining these
332:26 - two files is shown here
332:33 - split is used to break up or split a
332:36 - file into equal size segments for easier
332:38 - viewing and manipulation and it's
332:40 - generally used only on relatively large
332:42 - files by default split breaks up a file
332:45 - into 1000 line segments the original
332:47 - file remains unchanged and a set of new
332:50 - files with the same name plus added
332:52 - prefix is created by default the X
332:55 - prefix is added to split a file the
332:58 - segments use the command split and file
333:01 - to split file into segments using a
333:04 - different prefix use the command split
333:06 - in file and then the prefix we will
333:08 - apply split to an American English
333:10 - dictionary file of over 99
333:12 - 000 lines and in this example we've used
333:15 - WC which stands for word count that
333:17 - we'll discuss shortly to report on the
333:19 - number of lines in the file and then you
333:22 - just type this
333:23 - this will split the American English
333:25 - style into 100 equal size segments named
333:28 - dictionary XX the last one will of
333:31 - course be somewhat smaller
333:36 - regular expressions are text strings
333:39 - used for matching a specific pattern or
333:41 - to search for a specific location such
333:44 - as the start or end of a line or a word
333:46 - regular Expressions can contain both
333:49 - normal characters or so-called meta
333:51 - characters such as an asterisk or an and
333:55 - a dollar sign many text editors and
333:57 - utilities such as VI said OC find and
334:00 - grep work extensively with regular
334:02 - Expressions this table lists the search
334:05 - patterns and their usage
334:10 - for example consider the following
334:12 - sentence the quick brown fox jumped over
334:14 - the lazy dog some of the patterns that
334:17 - can be applied to the sentence are shown
334:19 - here
334:27 - grep is extensively used as a primary
334:31 - text searching tool it scans files for
334:34 - specified patterns and it can be used
334:36 - with regular Expressions as well as
334:38 - simple strings as shown in this table
334:46 - strings is used to extract all printable
334:49 - character strings found in a file or
334:51 - files given as arguments it's useful in
334:54 - locating human readable content embedded
334:57 - in binary files for text files one can
335:00 - just use grep for example to search for
335:02 - the string my underscore string in a
335:04 - spreadsheet you can use this command
335:07 - and this screenshot shows a search of a
335:10 - number of programs to see which ones
335:12 - have GPL licenses of various versions
335:22 - in this section you will learn about
335:24 - some additional text utilities that you
335:26 - can use for performing various actions
335:28 - on your Linux files such as changing the
335:31 - case of letters or determining the count
335:33 - of words lines and characters in a file
335:35 - the TR utility is used to translate
335:38 - specified characters into other
335:40 - characters or to delete them the general
335:43 - syntax is as follows TR options set 1
335:46 - and set 2. the items in the square
335:49 - brackets are optional TR requires at
335:51 - least one argument and accepts a maximum
335:54 - of two the first designated set one in
335:57 - this example lists the characters in the
335:59 - text to be replaced or removed the
336:02 - second set two lists the characters that
336:04 - are to be substituted for the characters
336:06 - listed in the first argument sometimes
336:08 - these sets need to be surrounded by
336:10 - apostrophes or single quotes in order to
336:13 - have the shell ignore that they mean
336:14 - something special to the Shell it's
336:17 - usually safe and may be required to use
336:19 - the single quotes around around each of
336:21 - the sets as you'll see in these examples
336:24 - for example suppose you have a file
336:27 - named City containing several lines of
336:29 - attacks in mixed case to translate all
336:31 - lowercase characters to uppercase at the
336:34 - command prompt type cat City pipe TR adz
336:38 - adfz and press the enter key
336:55 - takes the output from any command and
336:58 - while sending to the standard output it
337:00 - also saves it in a file in other words
337:02 - it tees the output stream from the
337:05 - command one stream is displayed on the
337:07 - standard output and the other is saved
337:09 - to a file
337:11 - for example to list the contents of a
337:13 - directory on the screen and save the
337:15 - output to a file at the command prompt
337:18 - type ls-l pipe T new file and press
337:21 - enter key typing can't new file will
337:24 - then display the output of ls-l
337:30 - WC or word count counts the number of
337:33 - lines words and characters in a file or
337:36 - a list of files options are given in
337:38 - this table
337:40 - by default all three of these options
337:42 - are active
337:47 - cut is used for manipulating column
337:49 - based files and is designed to extract
337:51 - specific columns the default column
337:54 - separator is the tab character different
337:56 - deliminator can be given as a command
337:59 - option for example to display the third
338:01 - column delimited by a blank space at the
338:04 - command prompt type ls-s pipe cut Dash d
338:08 - double quote space double quote and then
338:09 - Dash F3 and then you press the enter key
338:15 - you have completed chapter 13. let's
338:18 - summarize the key Concepts covered
338:20 - the command line often allows the users
338:23 - to perform tasks more efficiently than
338:25 - the GUI
338:27 - cat sort 4 concatenate is used to read
338:30 - print and combine files Echo displays a
338:34 - line of text either on standard output
338:36 - or to place in a file set is a popular
338:39 - stream editor often used to filter and
338:42 - perform substitutions on files and Text
338:44 - data streams awk is an interpretive
338:47 - programming language typically used as a
338:50 - data extraction and reporting tool
338:53 - sort is used to sort text files and
338:56 - output streams in either ascending or
338:59 - descending order
339:00 - unique eliminates duplicate entries in a
339:03 - text file paste combines fields from
339:06 - different files you can also extract and
339:08 - combine lines from multiple sources join
339:12 - combines lines from two files based on a
339:15 - common field it works only if files
339:17 - share a common field split breaks up a
339:20 - large file into equal size segments
339:22 - regular expressions are text strings
339:25 - used for pattern matching the pattern
339:27 - can be used to search for a specific
339:28 - location such as the start or end of a
339:31 - line or a word
339:32 - grep searches the text files and data
339:35 - streams for patterns and can be used
339:36 - with regular expressions
339:38 - TR translates characters copy standard
339:41 - input to standard output and handle
339:43 - special characters
339:45 - T saves a copy of standard output to a
339:48 - file while still displaying at the
339:51 - terminal WC for word count displays the
339:54 - number of lines words and characters in
339:56 - a file or a group of files cut extracts
339:59 - columns from a file less views files a
340:02 - page at a time and allow scrolling in
340:04 - both directions head displays the first
340:07 - few lines of the file or data stream or
340:10 - standard standard output by default it
340:12 - displays 10 lines tail displays the last
340:15 - few lines of a file or data stream on
340:17 - standard output by default it displays
340:19 - 10 lines strings extracts printable
340:22 - character strings from binary files
340:27 - by the end of this chapter you should be
340:30 - able to explain basic networking
340:32 - Concepts including types of networks and
340:34 - addressing issues configure network
340:36 - interfaces and use it and use basic
340:39 - networking utilities such as ifconfig IP
340:42 - ping route and trace route use graphical
340:45 - and non-graphical browsers such as links
340:48 - w3m Firefox Chrome and Epiphany transfer
340:51 - files to and from clients and servers
340:53 - using both graphical and text mode
340:55 - applications such as filezilla FTP SFTP
340:59 - curl and wget
341:03 - a network is a group of computers and
341:06 - Computing devices connected together
341:08 - through communication channels such as
341:10 - cables or wireless media the computers
341:14 - connected over a network may be located
341:16 - in the same geographical area or spread
341:19 - across the world a network is used to
341:22 - allow the connected devices to
341:25 - communicate with each other enable
341:27 - multiple users to share devices over the
341:29 - network such as music and video servers
341:32 - printers and scanners
341:34 - share and manage information across
341:37 - computers easily
341:39 - most organizations have both an internal
341:41 - Network and an internet connection for
341:44 - users to communicate with machines and
341:46 - people outside the organization
341:49 - the internet is the largest Network in
341:51 - the world and can be called the network
341:54 - of Networks
341:59 - devices attached to a network must have
342:01 - at least one unique Network address
342:03 - identifier known as the IP or Internet
342:06 - Protocol address the address is
342:08 - essential for routing packets of
342:10 - information through the network
342:11 - exchanging information across the
342:14 - network requires using streams of small
342:17 - packets Each of which contains a piece
342:20 - of the information going from one
342:21 - machine to another these packets contain
342:24 - data buffers together with headers which
342:27 - contain information about where the pack
342:29 - is going to and coming from and where it
342:33 - fits in the sequence of packets that
342:35 - constitute the Stream
342:37 - Network Protocols are in software are
342:40 - rather complicated due to the diversity
342:42 - of machines and operating systems they
342:44 - must deal with as well as the fact that
342:47 - even very old standards must be
342:49 - supported
342:53 - there are two different types of IP
342:56 - addresses available
342:57 - ipv4 version 4 and IPv6 version 6. ipv4
343:02 - is older and by far the most widely used
343:04 - while IPv6 is newer and is designed to
343:07 - get past limitations inherent in the
343:09 - older standard in furnace many more
343:11 - possible addresses ip4 uses 32-bits for
343:14 - addresses they're only 4.3 billion
343:18 - unique addresses available furthermore
343:20 - many addresses are allotted and reserved
343:22 - but not actually used ipv4 is considered
343:25 - inadequate for meeting future needs
343:27 - because the number of devices available
343:28 - on the global network has increased
343:30 - enormously in recent years
343:33 - IPv6 uses 128 bits for addresses this
343:37 - allows for a 3.4 times 10 to the power
343:40 - of 38 unique addresses if you have a
343:43 - larger network of computers and want to
343:44 - add more you may want to move to IPv6
343:47 - because it provides more unique
343:49 - addresses however it can be complex to
343:51 - migrate to IPv6 the two protocols do not
343:54 - always interoperate well thus moving
343:56 - equipment and addresses to IPv6 require
344:00 - significant effort and has not been
344:02 - quite as fast as was originally intended
344:05 - we'll discuss ipv4 more than IPv6 as
344:09 - you're more likely to deal with it one
344:11 - reason ipv4 has not disappeared is there
344:14 - are ways to effectively make many more
344:17 - addresses available by methods such as
344:19 - Nat the network address translation net
344:22 - enables sharing one IP address among
344:24 - many locally connected computers Each of
344:27 - which has a unique address only seen on
344:29 - the local network while this is used in
344:32 - organizational settings it's also used
344:34 - in simple home networks for example if
344:37 - you have a router hooked up to your
344:38 - internet provider such as a cable system
344:41 - it gives you one externally visible
344:44 - address but issues each device in your
344:47 - home an individual local address
344:53 - a 32-bit ipv4 address is divided into
344:56 - four 8-bit sections called octets so
345:00 - here's an example
345:01 - note that octet is just another word for
345:03 - byte Network addresses are divided into
345:06 - five classes a b c d and e classes a B
345:10 - and C are classified into two parts
345:12 - Network addresses netid and host address
345:15 - host ID the netid is used to identify
345:17 - the network while the host ID is used to
345:19 - identify a host in the network class D
345:22 - is used for special multicast
345:24 - applications information is broadcast to
345:27 - multiple computers simultaneously in
345:29 - class E is reserved for future use in
345:32 - this section you will learn about
345:33 - classes a b and c
345:38 - Class A addresses use the first octet of
345:41 - an IP address as their net ID and use
345:44 - the other three octets as their host ID
345:47 - the first bit of the first octet is
345:49 - always set to zero so you can only use
345:51 - seven bits for Unique Network numbers as
345:54 - a result there are a maximum of 126
345:56 - Class A networks available not
345:58 - surprisingly this was only feasible when
346:01 - there were very few unique networks with
346:03 - large numbers of hosts as the use of the
346:07 - internet expanded classes B and C were
346:09 - added in order to accommodate the
346:11 - growing the growing demand for
346:13 - independent Networks
346:15 - each class a network can have up to 16.7
346:19 - million unique hosts on its Network the
346:22 - range of host addresses is from
346:24 - 1.0.0.0 to 127.255.255.255
346:32 - Class B addresses use the first two
346:35 - octets of their IP address as their
346:38 - netid and the last two octets as their
346:40 - host ID the first two bits of the first
346:43 - octet are always set to Binary 10. so
346:46 - there are a maximum of 16 384 Class B
346:50 - networks the first octet of a Class B
346:52 - address has values from 128 to 191. the
346:56 - introduction of Class B networks
346:59 - expanded the number of networks but but
347:02 - it soon became clear that a further
347:04 - level would be needed each class B
347:06 - Network can support a maximum of 65 536
347:10 - unique hosts on its Network the range of
347:13 - post addresses is from
347:16 - 128.0.0.0 to 191.255.255.255
347:24 - Class C addresses use the first three
347:26 - octets of the IP address as their net ID
347:30 - in the last octet as their host IDE the
347:33 - first three bits of the first octet are
347:34 - set to Binary one one zero so almost 2.1
347:37 - million Class C networks are available
347:39 - the first octet of a Class C address has
347:41 - values from 19192 to 223 these are most
347:46 - common for smaller networks which don't
347:48 - have many unique hosts each class seed
347:51 - Network can support up to 256 unique
347:54 - hosts the range of host addresses is
347:57 - from
347:59 - 192.0.0.0 to 223.255.255.255
348:07 - typically a range of IP addresses are
348:10 - requested from your internet service
348:12 - provider your ISP by your organization's
348:15 - network administrator often your choice
348:18 - of which class of IP address you're
348:20 - given depends on the size of your
348:22 - network and expected growth needs if Nat
348:25 - is an operation such as in a home
348:27 - network you only get one externally
348:29 - visible address you can assign IP
348:31 - addresses to computers over a network
348:33 - either manually or dynamically manual
348:37 - assignment adds static or never changing
348:40 - addresses to the network dynamically
348:42 - assigned addresses can change every time
348:45 - you reboot or even more often the
348:48 - dynamic host C configuration protocol
348:50 - DHCP is used to assign IP addresses
348:57 - name resolution is used to convert
348:59 - numerical IP address values into a human
349:02 - readable format known as the hostname
349:05 - for example
349:08 - 104.95.5.15 is the numerical IP address
349:11 - that refers to the hostname
349:13 - whitehouse.gov host names are much
349:15 - easier to remember given an IP address
349:18 - you can obtain its corresponding
349:20 - hostname accessing the machine over the
349:22 - network becomes easier when you can type
349:25 - the hostname instead of the IP address
349:27 - you can view your system's hostname
349:30 - simply by typing hostname with no
349:33 - argument the special host name localhost
349:35 - is associated with the IP address
349:38 - 127.0.0.1 and describes the machine you
349:41 - are currently on which normally has
349:43 - additional Network related IP addresses
349:49 - let's get a feel for how the domain name
349:52 - server works on a recent Ubuntu system
349:55 - so first we need to log in
349:58 - and when you log in we'll open up a
350:01 - command line terminal because we're
350:03 - going to do all our operations from the
350:04 - command line
350:06 - so I have done that by right clicking on
350:08 - the desktop and then let me make a
350:10 - bigger font
350:12 - and I might as well go full screen while
350:14 - I'm at it so
350:16 - there are a couple of important files on
350:19 - your system one is called
350:22 - etcresult.conf
350:26 - now on older Linux systems you didn't
350:29 - have all this information at the top you
350:31 - just had important thing here name
350:34 - server
350:37 - 127.0.053 you're more likely to find
350:39 - your name server is not a one two seven
350:43 - one which all one two seven addresses
350:45 - are on the actual machine but one nine
350:48 - two one six eight that one that one for
350:51 - instance would be a common thing
350:53 - might point to your your wireless modem
350:57 - which is attached to your internet
350:59 - service provider for instance recent
351:03 - systems use a systemd service called
351:05 - systemd resolve D which works in a more
351:08 - complicated way it makes a DNS server on
351:13 - the local machine which caches the
351:15 - results or previous searches so we're
351:19 - not going to get into the details of
351:20 - that but uh that's a recent development
351:23 - that you'll find on newer machines
351:25 - another important file is ETC hosts
351:30 - this file is consulted before the domain
351:32 - name server is consulted
351:35 - so you'll see for instance here at the
351:37 - bottom we've got two machines on the
351:39 - local network we give their IP addresses
351:41 - and a name that we can use to get at
351:44 - them and you'll notice you can have more
351:46 - than one name tied to an IP address so
351:49 - for instance I could do
351:50 - ping Theodore
351:53 - and that's going to take me to 200 or I
351:55 - could do ping uh beaver
351:59 - it takes me to the same machine
352:03 - now if I want to look at something which
352:04 - isn't specified in that file or in fact
352:08 - I can do that host uh Theodore
352:11 - and it will go look at the file but if I
352:14 - want to get something out on the
352:16 - internet I could do most
352:17 - linuxfoundation.org
352:20 - and I'll get the both the ip4 and the
352:23 - ip6 addresses here of the Linux
352:26 - foundation and also information about
352:29 - the mail services provided by the Linux
352:31 - Foundation
352:32 - I can do another utility for similar
352:37 - information is NS lookup so I'll do that
352:40 - and this lookup foundation.org
352:43 - linksfoundation.org so you see you got
352:45 - the same basic information a little more
352:47 - compactly I've got here's the ip4
352:50 - address and then the two ip6 addresses
352:53 - another utility I can use is dig so
352:57 - let's do dig Linux
352:59 - foundation.org
353:04 - and you'll see I once again got the
353:06 - information about the IEP address and
353:08 - then a lot more information about the
353:11 - search to find that server so that's
353:14 - just a little bit of what you can do
353:15 - with DNS and some of the files that are
353:18 - associated with it
353:22 - network configuration files are
353:25 - essential to ensure that interfaces
353:26 - function correctly they are located in
353:29 - the slash Etc directory tree however the
353:31 - exact files used have historically been
353:33 - dependent on the particular Linux
353:36 - distribution and version being used
353:39 - for deviant family configurations the
353:42 - basic network configuration files could
353:45 - be found under slash Etc Network while
353:48 - for red hat and Susie family systems one
353:51 - needed to inspect Etc sysconfig Network
353:54 - modern systems emphasize the use of
353:57 - network manager which we briefly
353:59 - discussed when we considered graphical
354:01 - system administration rather than keep
354:03 - up with all the files and slash Etc
354:06 - while the graphical versions of network
354:08 - manager do look somewhat different in
354:10 - different distributions the nmt UI
354:13 - utility shown here varies almost not at
354:16 - all as does even more sparse in mcli or
354:20 - command line interface utility if you
354:22 - are proficient in the use of gui's by
354:24 - all means use them if you're working on
354:26 - a variety of systems the lower level
354:28 - utilities may make life easier
354:33 - network interfaces are a connection
354:36 - Channel between a device and a network
354:39 - physically network interfaces can
354:41 - proceed through a network interface card
354:44 - or it can be more abstractly implemented
354:47 - as software you can have multiple
354:49 - network interfaces operating at once
354:52 - specific interfaces can be brought up or
354:54 - activated or brought down deactivated at
354:57 - any time information about a particular
355:00 - network interface or all network
355:03 - interfaces can be reported by the IP and
355:06 - ifconfig utilities which you may have to
355:09 - run as the super user or at least give
355:11 - the full path name IE spin ifconfig IP
355:16 - is newer than ifconfig and has far more
355:18 - capabilities but its output is uglier to
355:21 - the human eye some new Linux
355:22 - distributions do not install the older
355:24 - net tools packets to which ifconfig
355:27 - belongs and so you would have to install
355:29 - it if you want to use it
355:33 - to view the IP address you can do this S
355:37 - Pen slash IP address show to view the
355:40 - routing information slash S Pen slash IP
355:43 - route show IP is a very powerful program
355:46 - that can do many things older and more
355:49 - specific utilities such as ifconfig and
355:52 - Route are often used to accomplish
355:54 - similar tasks a look at the relevant Man
355:57 - pages can tell you much more about these
355:59 - utilities
356:03 - ping is used to check whether or not a
356:06 - machine attached to the network can
356:08 - receive and send data I.E confirms that
356:11 - the remote host is online and is
356:13 - responding check the status of the
356:16 - remote host at the command prompt type
356:18 - ping and then the hostname peeing is
356:21 - frequently used for Network testing and
356:24 - management however its usage can
356:26 - increase Network load unacceptably hence
356:29 - you can abort the execution of ping by
356:31 - typing control C or by using the dash C
356:33 - option which limits the number of
356:35 - packets that ping will send before it
356:37 - quits when when an execution stops a
356:40 - summary is displayed
356:44 - a network requires the connection of
356:47 - many nodes data moves from source to
356:50 - destination by passing through a series
356:52 - of routers and potentially across
356:54 - multiple networks servers maintain
356:56 - routing tables containing the addresses
356:58 - of each node in the network the IP
357:00 - routing protocols enable routers to
357:03 - build up a forwarding table that
357:04 - correlates final destinations with the
357:06 - next hop addresses one can use the route
357:09 - utility or the newer IP route command to
357:12 - view or change IP routing table to add
357:14 - delete or modify specific static routes
357:17 - to specific codes or networks this table
357:20 - explains some commands that can be used
357:22 - to manage IP routing
357:27 - foreign
357:32 - is used to inspect the route which the
357:35 - data packet takes to reach the
357:37 - destination host which makes it quite
357:40 - useful for troubleshooting Network
357:42 - delays and errors by using trace route
357:45 - you can isolate connectivity issues
357:47 - between hops which helps resolve them
357:49 - faster to print the route taken by the
357:52 - packet to reach the network host at the
357:54 - command prompt type trace route and then
357:57 - the address
358:02 - now let's learn about some additional
358:04 - networking tools networking tools are
358:06 - very useful for monitoring and debugging
358:09 - network problems such as network
358:11 - connectivity and network traffic
358:25 - let's get started on using more
358:27 - networking tools to use more networking
358:30 - tools open the command prompt to query
358:33 - network interface connected to eth2 type
358:36 - sudo eth tool eth0 and press enter to
358:42 - display all active connections and
358:43 - routing tables type
358:45 - netstat-r and press enter all active
358:48 - connections and routing tables are
358:50 - displayed to scan open ports on a
358:52 - network type sudo nmap Dash SP
358:59 - 10.0.2.15 24 and press enter
359:03 - the open ports on a network are
359:05 - displayed
359:09 - browsers are used to retrieve transmit
359:12 - and explore information resources
359:14 - usually on the world wide web Linux
359:17 - users commonly use both graphical and
359:19 - non-graphical browser applications the
359:21 - common graphical browsers used in Linux
359:23 - are Firefox Google Chrome chromium
359:28 - conquer and Opera sometimes you either
359:31 - do not have a graphical environment to
359:33 - work in or have reason not to use it but
359:36 - still need to access web resources in
359:39 - such a case you can use non-graphical
359:41 - browsers such as these
359:50 - sometimes you need to download files and
359:52 - information but a browser is not the
359:54 - best choice either because you want to
359:56 - download multiple files or you want to
359:58 - perform the action from a command line
360:00 - or a script wget it's a command line
360:03 - utility that can capably handle the
360:05 - following types of downloads large file
360:07 - downloads recursive downloads where a
360:10 - web page refers to other web pages and
360:13 - all are downloaded at once password
360:15 - required downloads and multiple file
360:18 - downloads to download a web page you can
360:20 - simply type wget and then the URL and
360:23 - then you can read the downloaded page as
360:25 - a local file using a graphical or
360:27 - non-graphical browser
360:32 - besides downloading you may want to
360:34 - obtain information about a URL such as
360:36 - the source code being used curl can be
360:39 - used from the command line or a script
360:41 - to read such information curl also
360:44 - allows you to save the contents of a web
360:46 - page to a file as does wget you can read
360:49 - a URL using curl URL for example if you
360:53 - want to read freecodecamp.org type curl
360:55 - HTTP colon freecodecamp.org
360:59 - it to get the contents of a web page and
361:02 - store it to a file type curl slash o
361:05 - save.html and then the website address
361:08 - the contents of the main index file at
361:10 - the website will be saved in save.html
361:16 - secure shell SSH is a cryptographic
361:20 - network protocol used for secure data
361:22 - communication it's also used for remote
361:25 - services and other secure Services
361:27 - between two devices on the network and
361:30 - is very useful for administering systems
361:32 - which are not easily available to
361:34 - physically work on but to which you have
361:36 - remote access to log in to a remote
361:39 - system using your Sam username you can
361:41 - just type SSH some system and press
361:44 - enter SSH then prompts you for the
361:47 - remote password you can also configure
361:49 - SSH to securely allow your remote access
361:51 - without typing a password each time
361:54 - if you want to run as another user you
361:57 - can do either ssh-l someone some system
362:00 - or SSH someone at some system
362:04 - to run a command on a remote system via
362:07 - SSH at the command prompt you type SSH
362:10 - sum system my command
362:16 - we can also move files securely using
362:19 - secure copy SCP between two networked
362:22 - hosts SCP uses the SSH protocol for
362:26 - transferring data to copy a local file
362:28 - to a remote system at the command prompt
362:30 - type sdp in the local file and then the
362:33 - user at the remote system clones home
362:35 - slash user and then you press enter you
362:38 - will receive a prompt for the remote
362:40 - password you can also configure sap so
362:43 - that it does not prompt for a password
362:45 - for each transfer
362:50 - let's do a simple demonstration of using
362:53 - secure shell and secure copy between two
362:56 - virtual machines
362:59 - Ubuntu machine and a Centos machine so
363:02 - first from the Ubuntu machine let's try
363:04 - to log into the Centos machine well
363:08 - first I need to know the IP address of
363:10 - both machines so I can do that with IP
363:14 - and I'll say brief to get a condensed
363:16 - output
363:18 - um
363:19 - addr for address shows
363:21 - and I can see my address on this machine
363:24 - is one seven two one six two four nine
363:27 - one three three
363:28 - I'll do the same command on the Cent OS
363:31 - machine
363:37 - and see the address is the same except
363:39 - for the last byte or octet which is one
363:41 - two nine
363:42 - so first let's log into the Centos
363:44 - machine from Ubuntu I do SSH student
363:49 - at
363:50 - 172.16.249.129
363:57 - and it's the first time I'm doing this
363:59 - so it wants to make sure that I'm
364:02 - authentic so I say yes
364:04 - and now I have to give the password
364:09 - and it's fine I'm on the central s
364:10 - machine as you can see from the prompt
364:13 - now in that command I really didn't have
364:15 - to give student that because we're using
364:19 - student account on both machines but it
364:21 - never hurts to do that
364:23 - so let me exit
364:26 - now let's do from the Centos machine
364:29 - Let's copy over directory
364:32 - using SCP over to the Ubuntu machine
364:35 - so let me do
364:37 - scp-r for recursive to get the whole
364:39 - directory and everything underneath it
364:42 - uh and this time uh I won't as a home
364:46 - student I'll copy the home student
364:48 - directory I won't bother saying student
364:50 - ad I'll just give the address
364:51 - 172.16-249.133
364:56 - and I'll put it in the temp directory
364:59 - once again it wants to make sure that
365:02 - it's authentic so I'll say yes
365:05 - and once again I have to give the
365:06 - password
365:08 - and it's copied over and if I go over to
365:11 - the Ubuntu machine
365:13 - and I look in the temp directory
365:19 - I'll see the account is now there the
365:21 - directory is now there so that's all
365:24 - there is to do a pretty simple
365:25 - demonstration of using secure shell and
365:28 - secure copy
365:34 - you have completed chapter 14. let's
365:37 - summarize the key Concepts covered the
365:40 - IP or Internet Protocol address is a
365:43 - unique logical Network address that is
365:45 - assigned to a device on a network ipv4
365:48 - uses 32 bits for addresses and IPv6 uses
365:51 - 128 bits for addresses every IP address
365:54 - contains both a network and a host
365:56 - address field there are five classes of
365:59 - network addresses available a b c d and
366:02 - e DNS domain name system is used for
366:05 - converting Internet domain and host
366:07 - names to IP addresses the ifconfig
366:11 - program is used to display current
366:13 - Active network interfaces the commands
366:16 - IP addr show and IP route show can be
366:20 - used to view IP addresses and routing
366:22 - information you can use ping to check if
366:25 - the remote host is alive and responding
366:27 - you can use the route utility program to
366:30 - manage IP routing you can monitor and
366:32 - debug networking problems using
366:34 - networking tools
366:36 - Firefox Google Chrome chromium and
366:38 - Epiphany are the main graphical browsers
366:40 - used in Linux
366:42 - non-graphical or text browsers used in
366:45 - Linux are links links and w3m you can
366:49 - use wget to download web pages you can
366:52 - use kernel to obtain information about
366:53 - urls you can use SSH to run commands on
366:57 - remote systems
366:59 - we've reached the end of the course you
367:01 - should now have a good working knowledge
367:03 - of Linux from both a graphical and
367:06 - command line perspective I mentioned at
367:09 - the beginning of the course that there
367:11 - is a text-based version of this course
367:12 - Linked In the video's description that
367:15 - version also has sections about the bash
367:17 - shell and scripting Printing and local
367:20 - security principles those won't be
367:22 - relevant to everybody but feel free to
367:24 - check that out if you want to learn
367:26 - about those topics so good luck as you
367:29 - use and administer Linux