00:15 - well hi everybody uh
00:17 - this is sam with python basics and i
00:20 - just want to welcome you all to a first
00:23 - of mini
00:25 - python tutorial live stream so we're
00:27 - going to do two hours today so locally
00:31 - for me it's
00:33 - 9 and it's 10 eastern and we're going to
00:36 - go for 2 hours so the idea of this is
00:40 - this is for a complete
00:42 - beginner so we're actually just gonna
00:44 - act like
00:46 - we don't even have python on our
00:48 - computer so we need to go to
00:51 - python.org
00:53 - look up here
00:54 - at downloads and as you see right here
00:57 - you can download
00:59 - 3.8.1
01:01 - when we look at mine i have three uh
01:04 - excuse me three eight three i have three
01:06 - eight one
01:07 - so you come down here
01:09 - you click this
01:10 - save
01:12 - and it's going to
01:15 - install
01:17 - down here in the bottom corner i got
01:19 - mine kind of zoomed in a little bit
01:21 - and then we'll go ahead and open
01:24 - this up but if you're new to python
01:27 - um it is a very high level language and
01:31 - i'm sure you guys have already seen in
01:32 - the comments
01:34 - that uh python's slow and things like
01:36 - this but one of the things that i love
01:38 - about it that i believe makes it such a
01:41 - very powerful language
01:43 - is the amount of contributors and the
01:47 - community and as many people that are
01:50 - involved because it actually started out
01:52 - as a community language
01:55 - so all right um you can just hit uh
01:58 - right now it's gonna ask me but you hit
02:00 - the uh
02:01 - install right here and now there's gonna
02:03 - be a check box down here in the bottom
02:06 - and it's to install the path i recommend
02:09 - go ahead and do that right now but let's
02:12 - just assume that you guys already have
02:14 - that do i want to cancel this
02:16 - so now
02:17 - this is the shell and you might hear me
02:20 - also call this idle
02:22 - and
02:24 - uh
02:25 - just so it's what the integrated
02:27 - development environment idle
02:30 - you might have an editor but right now
02:33 - everything that we're going to be doing
02:34 - today and for a while you are not going
02:37 - to need an editor
02:39 - all that you're going
02:42 - uh all that you're gonna need is
02:46 - um
02:46 - the shell
02:48 - so let's just go ahead and jump into it
02:51 - so
02:52 - in python there are four types of
02:55 - variables you have integers floats
02:59 - um strings and bullions so let's just
03:02 - let's just go ahead and get
03:05 - started
03:08 - so
03:10 - and like i was saying my name is
03:14 - sam
03:16 - and
03:16 - then a float is anything with a decimal
03:21 - and let's see true
03:28 - so you got
03:29 - you got your integer
03:31 - you got your string
03:33 - you got your float
03:35 - and you have your boolean
03:38 - so now
03:41 - now we need to kind of understand what
03:44 - these do so what
03:47 - what computers are awesome at
03:50 - is
03:52 - repeatability and remembering things
03:55 - so right here we're storing things in
03:56 - memory so we don't have to remember any
04:00 - of this
04:01 - now
04:02 - let's go ahead and look at some of the
04:04 - very
04:06 - powerful things
04:07 - that
04:08 - python already has for us these are the
04:11 - methods
04:12 - that are associated
04:15 - with
04:16 - this type variable and we can
04:20 - look at this
04:21 - so now
04:22 - one like i said python is very powerful
04:26 - because
04:27 - of the community
04:29 - so now there are built-in functions
04:32 - already defined for us so i used dur
04:34 - right here pretty quickly and didn't
04:36 - really explain it
04:38 - so
04:40 - these are the methods and we're going to
04:43 - look at this in just a few minutes
04:46 - but then also
04:48 - these are
04:50 - things you can do
04:52 - with this type of variable so name right
04:56 - now my name
04:58 - is a string and you can tell
05:00 - that it's a string because it lives
05:02 - inside these quotation marks
05:04 - and basically the way that i like to
05:06 - explain it to be to beginners
05:08 - is
05:09 - is if it's not a number
05:11 - it's a string
05:13 - so basically and then you have your
05:15 - variation of boolean
05:17 - and binary so booleans are binary we're
05:20 - going to learn about conditions and
05:22 - tests and things like that
05:24 - and
05:25 - that's the way a computer can either
05:28 - tell it's either yes or no true or false
05:30 - and we'll delve into that so what the
05:33 - way that we're gonna do things
05:35 - today and for the next uh few weeks is
05:38 - we're going to go forward and we're
05:39 - going to go backwards so we're going to
05:40 - be exposed to something then we're going
05:43 - to
05:44 - move on then we're going to come back
05:46 - and we're going to dig deeper so we're
05:47 - just going to move back and forth and
05:48 - back and forth
05:50 - so all right so now to prove that
05:55 - python and i know what we're talking
05:56 - about str
05:59 - so python says okay i know that name is
06:02 - a string and you want to know that it is
06:05 - a string
06:06 - so here we go
06:08 - now
06:09 - what things
06:11 - so we have our x so we do type x
06:15 - int then type
06:18 - y
06:20 - we have a float and then type
06:22 - true
06:25 - we have a boolean
06:27 - so
06:28 - now what we need to look at
06:30 - are the things
06:32 - that we can do
06:34 - that we can do with these things
06:36 - so this right here like i said is idle
06:39 - shell you might have even even heard
06:42 - rebel so you got read evaluate print and
06:45 - loop
06:46 - the next thing is computers can do the
06:50 - the same thing over and over and over
06:52 - again that
06:53 - that a person
06:55 - a human
06:56 - gets bored with frustrated and will make
06:59 - a mistake now when you're over here in
07:02 - this is one thing that i love showing
07:04 - new people is
07:06 - python only knows exactly what you tell
07:09 - it so i just type name in all caps
07:12 - and it
07:14 - it kicked back an error so this is a
07:16 - perfect example of
07:19 - how
07:20 - you can learn and become a better
07:22 - programmer because you're going to sit
07:24 - here and you're going to look and you're
07:26 - going to make a mistake and python's
07:27 - going to tell you exactly where and what
07:30 - mistake you made so
07:32 - it kicks out a name error
07:35 - and it gave you
07:37 - the name
07:38 - name
07:39 - is not defined and you wait a minute yes
07:41 - i know i defined it oh i come up here
07:44 - and i see that
07:46 - i forgot that it's all lowercase
07:48 - now i've thrown out a lot of built-in
07:51 - functions pretty quickly
07:53 - so
07:54 - and again i'm assuming that you are
07:56 - completely brand new to python and we're
07:58 - it's summertime we're coming up to
08:00 - school you're trying to get prepared uh
08:03 - for
08:04 - fall classes and especially with
08:05 - everything going on
08:07 - this is a complete beginner course
08:10 - starting from scratch you know nothing
08:13 - we're gonna build on it so one important
08:15 - fact that you need to know about me
08:18 - is i've been doing
08:20 - i've been learning python for about
08:22 - seven years so you
08:24 - if you have any concern that you won't
08:26 - be able to learn python i started
08:28 - learning at 36 years old
08:31 - and if i can do it anybody can do it so
08:34 - i want to
08:35 - the the purpose of this also is to keep
08:37 - you guys motivated
08:40 - and
08:43 - going through
08:45 - and proving that you can learn to do
08:47 - this if i can learn to do this anybody
08:49 - can learn to do this
08:51 - so all right
08:53 - here we go
08:58 - so okay somebody just commented 36 yeah
09:03 - i was i was 36 when i started and um
09:06 - like i said if i can do this anybody can
09:10 - so
09:11 - what i like to really teach people is i
09:14 - start with uh print
09:16 - and so you can remember the association
09:18 - so python helps you
09:20 - really a tremendous amount just with the
09:24 - with the shell in idle
09:26 - so you got print purple parentheses
09:29 - so now
09:31 - we assigned the variable
09:34 - we linked it with our equal sign you
09:35 - guys are
09:36 - if you have no exposure
09:39 - to
09:40 - programming and uh especially python
09:44 - you're used to the equal sign showing
09:46 - the balance between an equation in
09:48 - equilibrium well in python what it does
09:51 - is it links the information to it and
09:54 - again we'll delve into that more but
09:56 - let's just let's just work on and
09:59 - understand that it's it's linked
10:00 - together
10:02 - so
10:03 - the information and i'll say this and
10:04 - again we'll expand upon this everything
10:06 - on the right side is done first and then
10:09 - that information is linked and
10:11 - associated with the variable name so
10:13 - variable name equal sign information
10:16 - so now so i did that with name and then
10:19 - i just typed it into the chevrons or the
10:21 - rebel and i hit enter
10:24 - and i got
10:25 - my name out the information i associated
10:28 - it with
10:29 - with
10:30 - our equal sign doesn't really look
10:32 - pretty
10:33 - so
10:34 - python has
10:36 - functions already built in for us so
10:39 - print purple parentheses very important
10:42 - and let's also talk about this now
10:45 - computers like to know when something
10:46 - starts and when something finishes
10:49 - so i showed you one mistake i'm going to
10:51 - show you another
10:52 - so right here i'm going to hit enter
10:55 - python sits here and looks and goes what
10:59 - are you doing
11:00 - so now i close this out and if you look
11:02 - really really quickly
11:03 - it grays out
11:06 - so python says okay i know what you're
11:08 - talking about you closed this now let's
11:10 - actually look at reassigning and making
11:12 - a mistake
11:14 - so if i do
11:16 - this
11:17 - and i leave off a quotation mark
11:20 - i get this long weird syntax error
11:23 - ah i forgot to close this out now i'm
11:26 - going to show you another way
11:29 - if i can spell my name and you can get
11:31 - there we go
11:33 - so now
11:34 - so let's look up here sam is all in
11:36 - green
11:38 - now i started typing sam and it's black
11:40 - well python goes you didn't tell me you
11:43 - wanted to have a quotation at the
11:44 - beginning
11:46 - so now
11:48 - also we are going to expand
11:51 - um
11:53 - upon this but i recommend especially if
11:56 - you're brand new use double quotation
11:58 - marks so you can you can use single but
12:02 - we'll we can work through this but there
12:04 - are levels of quotation you can use
12:06 - double
12:08 - uh or single but right now until you get
12:10 - very comfortable let's use the double
12:13 - quotation marks so all right
12:16 - oops name
12:18 - equals let's get this in memory
12:22 - all right so now let's go back to
12:26 - what
12:28 - we can do here and also
12:31 - der
12:33 - is your friend
12:35 - when you get stuck and you can't
12:37 - remember what
12:38 - a
12:40 - character what an object can do so we're
12:43 - going to start adding new words
12:44 - everything in python is an object
12:47 - and then a lot of these are
12:50 - have classes so we'll begin to build
12:56 - so we'll be switching to members only
12:57 - chat okay
12:59 - um
13:01 - so
13:02 - now we identified that this is a string
13:05 - str
13:07 - so now we can run help
13:10 - on str a string
13:12 - ah-ha
13:14 - now this is another
13:17 - very powerful part of python the amount
13:20 - of documentation that we have
13:23 - now so what help does
13:30 - is it goes through
13:33 - and it has
13:35 - the actual
13:36 - description
13:38 - and a small little definition
13:41 - if if it's unable to be
13:44 - really understood so
13:46 - these are
13:48 - methods
13:49 - and we'll delve into what those are and
13:51 - the difference between a method and a
13:53 - function is they act the same you
13:56 - utilize them differently
13:58 - so
13:59 - right now
14:00 - let's run
14:03 - let's look at so i did dur on name
14:07 - and let's look at
14:10 - what's one that i like upper
14:13 - so now now so i can call
14:17 - name
14:21 - and upper is sitting
14:23 - right there
14:25 - so i call upper
14:29 - boom
14:30 - return a copy
14:32 - and we are going to talk a lot about
14:34 - return and other terminologies but
14:36 - return a copy of a string converted to
14:40 - upper case
14:43 - so if i call name dot upper now
14:47 - super important here parenthesis like i
14:49 - said parentheses starting finishing
14:52 - beginning and ending so we had our
14:54 - quotations we had one at the beginning
14:55 - one at the end when we used help endure
14:58 - in print we had an open parenthesis and
15:00 - we had a closed parenthesis
15:02 - now
15:03 - look right here
15:05 - upper open and closed
15:07 - so i just go
15:08 - boom
15:09 - and it will return
15:12 - that just means create python is going
15:14 - to create something
15:17 - and go forward
15:19 - so create a copy so now if i still call
15:21 - name
15:22 - i still have
15:26 - my original variable
15:28 - and this just spit out so if i wanted to
15:34 - create
15:37 - create a new
15:40 - variable
15:41 - and it was all upper case i would take
15:46 - my information
15:48 - put it on the left side
15:50 - associate it link it with my equal sign
15:52 - and give it a variable
15:54 - all right
15:55 - so now i have name
15:59 - and i have upper
16:00 - and look at that
16:02 - guess what kicked out because i
16:06 - can't spell sometimes so i put one too
16:08 - many
16:09 - one too many p's in there so then it
16:12 - kicked out sam all uppercase so we'll
16:15 - delve into
16:18 - if not all of these because these are
16:20 - very powerful and very handy and usable
16:24 - and then we go from there so all right
16:26 - now
16:28 - now what we need to do is we need to
16:31 - look at
16:35 - all right so right now like i was saying
16:38 - this is the shell
16:40 - this is like live television when
16:42 - you especially when i show young people
16:45 - this at uh schools and they try to come
16:48 - back up here and fix something you can't
16:50 - this is this is the rebel this is the
16:53 - shell this is live this is like live
16:55 - television
16:56 - but
16:58 - uh for repeatability python's one of
17:00 - python's way to
17:02 - be able to do things over and over and
17:04 - over again is you come up to file
17:07 - click new file
17:09 - and then you have something called a
17:11 - script but i already have one
17:13 - set up and sized
17:15 - so
17:17 - so i have it over here and i want you to
17:18 - draw your attention to this dot py so
17:21 - when you're opening yours you're gonna
17:22 - do
17:23 - either control shift s
17:26 - or down here to
17:28 - save as and then you give it your file
17:32 - that whatever name i recommend the date
17:34 - or the beginning of uh beginning python
17:38 - one thing that is super important and uh
17:41 - i've answered a lot of questions on
17:42 - message boards
17:44 - and especially later when you get
17:47 - more advanced
17:49 - don't ever name your file the name of
17:51 - the file of the library you're working
17:55 - that's why that's why i recommend dates
17:57 - or the beginning subject matter that
17:59 - you're working on because you're going
18:01 - to have a circular import error so
18:03 - that's that's a side note of something
18:05 - very futuristic so that's why i like
18:07 - that's why i like dates that's why i
18:10 - recommend starting uh with dates so
18:13 - now
18:14 - so we got name
18:17 - and
18:19 - sam
18:22 - sam
18:23 - now
18:25 - print name
18:27 - so what
18:29 - is awesome about this
18:31 - and
18:32 - so you see this little run up here then
18:35 - you got run module f5 so as long as your
18:37 - cursor is in this script over
18:40 - here it will run it will kick this out
18:44 - you'll get this and it's going to say
18:45 - hey and also right here asterisk see
18:48 - this asterisk right up here in this
18:50 - corner beside the file name that means
18:52 - you've changed that file
18:54 - and
18:56 - it has something that hasn't been saved
18:58 - to it so that's why you get this prompt
19:00 - right here you hit f5 you get this
19:02 - prompt because something has changed so
19:04 - then you click ok
19:06 - it runs now this is important and i
19:08 - remember when i was learning i it was
19:10 - driving me nuts
19:12 - what when you see restart it just
19:14 - emptied out everything that was in
19:15 - memory
19:16 - so uppers gone
19:19 - everything everything that you had
19:21 - before so this does a complete memory
19:23 - dump right here
19:25 - and then the only thing in memory is
19:27 - everything in your script so script file
19:31 - your py
19:32 - however you want to think about this but
19:34 - all of this is to save your um
19:38 - mental well-being so you don't have to
19:40 - retype something over and over and over
19:43 - and over again so all right
19:45 - oops
19:46 - i just lost all the chat well we'll work
19:49 - on that
19:50 - later but all right uh if you're just
19:52 - joining us today i'm sam with python
19:55 - basics
19:57 - and um this is going to be a complete
20:00 - beginner series
20:02 - uh in python
20:04 - and this actually came about by
20:08 - uh on my channel
20:10 - i think there's 740 videos and
20:14 - i wanted to
20:16 - uh i partnered with bo and we were
20:19 - talking about
20:21 - kind of starting over so this is
20:23 - basically
20:24 - a recap of
20:27 - and
20:28 - for the next few weeks we're gonna we're
20:30 - gonna get through the first hundred and
20:31 - really start delving into
20:34 - all of the other videos but
20:37 - that's where all this is so if by chance
20:39 - you're like me and you want to get ahead
20:42 - and know what we're going to talk about
20:43 - before we talk about it
20:46 - you can go the link's down below
20:48 - uh for all those but this chan this
20:52 - these streams are designed for
20:55 - brand new people and especially i
20:56 - started thinking about it about um
20:59 - it'd be in summer time right before
21:01 - school is going to be starting that
21:02 - there's going to be plenty of people
21:04 - that are going to be wanting to
21:06 - really get ahead
21:08 - with their programming skills and
21:10 - especially the popularity of python but
21:14 - i have a great passion for python i've
21:16 - been learning it for seven years been
21:18 - teaching it for about five
21:20 - so uh i know i can get excited pretty
21:22 - easy and fly through some of this
21:24 - material
21:25 - so uh
21:27 - bear with me hold on and we'll get
21:29 - through all this together
21:31 - so
21:32 - let's talk about some more repeatability
21:36 - and also actually before we get into
21:38 - that we need to look at this so we
21:40 - looked at der
21:42 - also you run dur with zero arguments i
21:45 - know that's a word you may not have
21:47 - heard before
21:48 - but you leave out the parentheses
21:51 - excuse me you leave the parentheses
21:53 - empty you get everything that's in
21:55 - memory right now
21:57 - and we'll talk about all this stuff
21:58 - later but there we are with our name
22:00 - our name variable
22:02 - so now
22:03 - same thing with help if you put help
22:06 - here
22:07 - and you
22:08 - pass it zero
22:10 - arguments you get the
22:14 - you get the prompt help
22:16 - so we looked at
22:19 - we looked at um strings
22:22 - now let's look at some keywords
22:24 - because again like i've like i've been
22:27 - saying python is so powerful because of
22:30 - its
22:31 - vast
22:32 - width and depth of its community
22:35 - so let's look at some more repeatability
22:38 - so we already just talked about a file
22:40 - for repeatability then now we need to
22:43 - look at something that
22:45 - is very powerful
22:47 - is something
22:48 - a way that you can do over and over and
22:51 - over and over again
22:53 - and one of these ways is with a loop i
22:56 - made a comment made a brief comment
22:58 - about repple
22:59 - read evaluate print and loop well there
23:02 - are two types of loop with python and
23:04 - we're going to focus on the for loop
23:06 - right now and the reason why i wanted to
23:09 - show you these keywords let's get out of
23:11 - there
23:12 - is
23:14 - one of the other powerful things about
23:16 - python is it gives you some color hints
23:20 - and because
23:21 - being dyslexic dyslexic and being not
23:24 - being able to spell so when i'm writing
23:26 - a word and it doesn't go the color that
23:29 - i expect that helps me when i have to
23:33 - when i'm trying to find out why my
23:36 - program is not running very well and i
23:38 - will tell you another one that just is
23:41 - the bane of my existence
23:44 - lambda
23:45 - i have to usually try that three or four
23:47 - times
23:48 - so
23:49 - now we're going to learn about a second
23:53 - built-in or excuse me our our so we did
23:56 - help we did type we did dur we did print
24:00 - now we're going to so that's 5. so now
24:01 - we're going to look learn about range so
24:04 - what range does is this is a very
24:08 - interesting
24:10 - function
24:11 - so it has some characteristics to it
24:16 - in programming you need to be able to do
24:18 - something a certain amount of times
24:20 - so one of those tools
24:24 - is range
24:26 - so and if you look right here
24:30 - you got
24:31 - stop
24:32 - so if i give it one argument i get stop
24:35 - but if i give it
24:36 - more than one the rules change so let's
24:38 - just go through it
24:41 - so i'm going to use a new keyword for
24:44 - then i'm going to give it a variable
24:45 - it's a temporary intermittent variable
24:48 - another keyword in
24:52 - and then we're going to pass it
24:54 - and we want this to do this three times
24:57 - so i know i know i just did a lot right
24:59 - here
25:00 - so
25:01 - this is actually called the header
25:03 - and everything inside this is called the
25:05 - body
25:07 - and this this also we're gonna see this
25:09 - in our own built-in functions and we're
25:11 - gonna do that very very soon
25:13 - so
25:14 - keyword for
25:16 - temporary variable in
25:18 - this
25:19 - so
25:20 - this
25:21 - has to be
25:22 - an iterable all right and we're going to
25:24 - go into more definitions more terms like
25:27 - i said we're gonna we're gonna go
25:28 - forward and backwards are gonna move
25:29 - back and forth
25:30 - so this is
25:32 - an iterable
25:33 - and now
25:34 - one thing that a lot of new people do is
25:37 - they forget that colon at the end
25:39 - and you can learn
25:41 - right here quickly that i forgot
25:43 - something i want to draw everybody's
25:44 - eyes and attention to this down here in
25:47 - this corner
25:49 - so i'm on column zero
25:51 - python automatically indents four
25:54 - so now i'm here on column four so that's
25:57 - how i know and it goes when you have
25:59 - multiple levels you go in four every
26:01 - single time
26:02 - so
26:03 - we're gonna print
26:04 - we're gonna do this slow everything
26:07 - i talk fast but i go slow if that makes
26:09 - sense all right
26:12 - so i want something to happen
26:15 - three times and right now all we're
26:17 - going to do is print out
26:20 - name and name is associated
26:23 - to sam it's we have sam assigned to name
26:26 - and i want this printed out
26:28 - three times and this is my temporary
26:30 - variable so i works
26:33 - or even a blank underscore
26:35 - all right
26:37 - so
26:42 - yes it is going to be a full series and
26:45 - we'll build up to a code editor but the
26:48 - reason what
26:49 - this is
26:50 - the way that we're doing these streams
26:53 - is this is for absolute complete
26:55 - beginners absolute complete beginners we
26:58 - don't want anybody i don't want anybody
27:00 - feeling overwhelmed that they can't
27:02 - learn this
27:03 - so
27:03 - i ran across
27:05 - some videos and basically the way that
27:08 - all of this is designed is
27:11 - what how
27:13 - what organization what structure would i
27:15 - would have wanted if
27:18 - if
27:19 - if i was starting to learn over again so
27:22 - this is not important this is only if
27:25 - you're going to do something with this
27:27 - over and guess what we're going to do
27:29 - that in just a minute
27:31 - so
27:32 - this is going to print out so you got
27:34 - your header
27:35 - and your body basically
27:38 - what do you want to do
27:40 - and what are you doing
27:43 - so
27:44 - what do you want to do
27:46 - how do you want to do it and what do you
27:48 - want to do so let's run this so now i
27:50 - hit my f5
27:51 - and
27:52 - i have let's comment we need to learn
27:54 - about we need to talk about commenting
27:57 - ah
27:58 - for the younger people in the crowd you
28:00 - might know the pound sign as a hashtag
28:02 - well
28:03 - that's the comment so whenever you see
28:05 - red colors in python are very important
28:07 - so red means it's been commented out
28:11 - so that just threw off everything so now
28:13 - you're like why why why'd sam come out
28:15 - four
28:16 - so let's rerun this
28:17 - all right so sam came out three times
28:20 - so here we go so i commented this out
28:22 - and i quickly did that with alt three
28:24 - you can also come up here
28:26 - comment out region
28:28 - uncommon out region so alt three and alt
28:30 - four i can highlight and do this so all
28:33 - right
28:34 - so now like i said throughout a little
28:37 - bit of a term
28:38 - this is called
28:40 - an iterable
28:42 - and we're going to throw it into a
28:44 - container in a minute but right now
28:47 - let's change this to i
28:50 - actually let's leave this and so you
28:52 - guys can see all of it especially if
28:54 - you guys are joining us
28:56 - now let's see
29:02 - yes
29:03 - okay
29:05 - all right
29:11 - and let's see so we're going to copy
29:13 - this
29:16 - and we're going to change this to i
29:18 - and change this to i and guess what
29:20 - we're going to comment all this out
29:22 - so we highlight the region and then we
29:24 - press our alt 3 comments it out
29:29 - and let's see make sure okay you guys
29:31 - can see that good
29:32 - now i'm going to press my f5 and we're
29:34 - going to see what happens now something
29:37 - different that your may not be expecting
29:40 - so all right
29:42 - zero one two
29:44 - all right
29:45 - that's still three numbers right so
29:47 - let's look at range one more time
29:51 - and still no i didn't spell it right
29:53 - because it didn't go purple so all right
29:55 - if i give
29:58 - we have this handy tool and i'm not even
30:00 - using it
30:03 - so i'm going to put range
30:05 - in our help
30:07 - ah here we go so range stop
30:10 - range object range start stop let's read
30:14 - this return an object that produces a
30:16 - sequence of integers
30:18 - start it's inclusive means it is
30:20 - included stop
30:22 - is exclusive means it goes right up in
30:25 - two but does not include well what'd we
30:28 - just find out here
30:29 - three i want i want three numbers
30:32 - well python is a zero index
30:35 - language
30:38 - starts at zero think about a number line
30:40 - and the reason why i say this is because
30:42 - we're going to address this in a minute
30:44 - with negative indexing and especially
30:46 - when we get into slicing
30:48 - slicing strings so it starts starts dead
30:51 - in the middle at zero and it goes
30:53 - positive i think i'm pointing up for you
30:55 - it might be that way
30:57 - goes positive and then of course
30:59 - negative so you don't want to have a gap
31:01 - in the number line so that's why
31:04 - gordo decided to start at zero zero
31:07 - indexing and then go positive
31:10 - so we got zero one two
31:12 - still has three numbers
31:15 - just it starts
31:17 - start
31:18 - step stop
31:20 - just like this so when you give it two
31:23 - numbers
31:25 - the first one is the first argument is
31:27 - start
31:28 - second one is stop
31:30 - and then you have step
31:32 - so now if i change this
31:37 - so the start sequence is inclusive
31:40 - stop is exclusive so i have
31:43 - one two three four
31:47 - five
31:49 - but five is not included it's exclusive
31:52 - it's excluded so how many numbers will
31:54 - come out
31:56 - one two three four
31:58 - now now let's get
32:02 - now now let's learn about a container
32:05 - so we got
32:07 - four different types of variables we got
32:08 - strings we got ants we got floats we got
32:10 - booleans
32:12 - now we need to figure out a way so
32:14 - basically you're saying so i have to
32:16 - assign all these variables well
32:18 - not necessarily now there's also we're
32:20 - going to learn about a list
32:22 - and a list is one of the basic
32:24 - containers
32:27 - help
32:30 - list
32:32 - and it's literally like that and guess
32:34 - there we go
32:35 - so
32:36 - haha it's an iterable
32:39 - built in mutable so we're going to talk
32:41 - about that later but mutable just means
32:44 - you can change it
32:46 - and
32:48 - then let's look at
32:50 - der
32:51 - on
32:52 - list
32:54 - and here we are we're not going to worry
32:55 - about these double underscores
32:58 - and
32:59 - i i don't think you'll ever hear me say
33:01 - dunder
33:02 - i don't think
33:04 - uh double underscore methods and then
33:06 - here are the methods that we would
33:07 - utilize
33:09 - so let's go and we're going to do
33:11 - something very cool
33:14 - so we need to
33:18 - um
33:20 - list of
33:21 - 5.
33:24 - so we have our range
33:26 - five
33:28 - now what is so super cool with python
33:31 - is like i said python doesn't care as
33:34 - long as it's legal
33:35 - and you do everything on the
33:37 - right side of the equal sign then then
33:39 - link it then give it a variable
33:42 - this is completely legal so i take my
33:45 - range
33:46 - and python knows okay so it's 0 1 2 3 4
33:50 - because that's 5 numbers i started zero
33:52 - okay i know what you want all right then
33:55 - now you want this
33:57 - around the list
34:00 - functions so you want to turn that into
34:02 - a list
34:04 - okay
34:05 - i can do that so now
34:07 - and i kind of alluded to that so here
34:09 - are brackets
34:11 - so this is our first basic container
34:14 - holder of
34:15 - stuff and will become more elaborate
34:18 - holder of objects in python
34:21 - and these are ins
34:23 - so now when i run type
34:27 - on
34:28 - my l underscore 5
34:30 - and it helps if i close this out
34:34 - it gets back the class
34:36 - of list now let's talk about some rules
34:39 - for variables we have not done that yet
34:41 - there are
34:43 - python has
34:44 - python is a language python has rules so
34:47 - basically
34:48 - when you start programming and you start
34:51 - building
34:52 - uh have a project and then you
34:54 - build it to functionality in the project
34:57 - then you have functions inside the
34:58 - functionality and then you're going
35:00 - you're going and you're strong and
35:01 - you're getting smaller and smaller and
35:02 - smaller so
35:04 - you have to take a project and get it
35:06 - down to
35:08 - remembering
35:09 - information and doing something over and
35:11 - over and over again maybe analyzing it
35:14 - maybe a little bit more but that's how
35:16 - simple you have to get this so when i'm
35:18 - teaching people i say that you have to
35:20 - get it down to the bare bones of can you
35:23 - explain this to a five-year-old if you
35:25 - can explain this to a five-year-old you
35:27 - can write this as a program
35:29 - or you can have a function
35:31 - and that's that's how you have to go
35:34 - so uh how much do you have to indent the
35:36 - code all right the code will indent
35:39 - itself if
35:41 - now if you're in sublime you may have to
35:45 - now you want to get very careful with
35:48 - spacing and tabs that's why if you're
35:50 - new i want you to be i want you to start
35:53 - here so you can begin to really
35:55 - understand
35:56 - you can get i remember i i equate this
35:59 - to the lesson that i learned when i was
36:01 - playing tennis i had a tennis pro
36:04 - and um i told him that he was better
36:06 - than me because of his racket so we
36:08 - changed rackets and he beat me with my
36:10 - own racket so
36:12 - we're learning the basics we're learning
36:14 - python don't get hung up on the editors
36:16 - let's learn the skills first
36:18 - you learn the skills then you can use
36:20 - the editors this is fine for what we're
36:22 - doing for several weeks
36:24 - alright
36:25 - so we have some rules for python has a
36:28 - couple rules for um
36:31 - variables cannot contain a special
36:33 - character
36:34 - cannot start with
36:36 - um a
36:38 - number cannot start with a number
36:46 - all right cannot start with a number
36:48 - and cannot be a keyword
36:52 - and a
36:54 - so that's why
36:55 - i showed you these so these are already
36:57 - used in python same thing also it can't
37:00 - be a function name all right
37:02 - so we can
37:05 - alright
37:06 - so now we're we're
37:10 - 37 minutes in we're going pretty good
37:12 - we're going strong so if you're just
37:14 - joining us
37:16 - i'm sam with python basics
37:18 - and we're going to be doing an entire
37:20 - series
37:21 - um for complete complete absolute
37:24 - beginners
37:25 - and the
37:27 - what i was kind of thinking uh and bo bo
37:30 - and i chatted and i would appreciate bo
37:33 - for giving me this opportunity
37:35 - to be here with you guys
37:37 - but i have a great passion for python i
37:40 - learned it at later
37:42 - later in life starting at 36 so if i can
37:46 - do it anybody can
37:48 - um
37:52 - so i've been
37:53 - learning for seven years and i've been
37:55 - teaching for five
37:57 - so
37:58 - i've gotten down some pretty pretty good
38:01 - material and i've had a youtube channel
38:04 - for almost three and a half no it's only
38:07 - three three years and uh four months so
38:10 - tons of videos over there and
38:14 - bo beau and i were talking that
38:16 - uh
38:17 - we just kind of wanted to start over
38:19 - from those and compress these and put
38:21 - these into some live streams so thanks
38:23 - for joining us today and we're going to
38:24 - be doing this every tuesday for the
38:26 - foreseeable future so all right let's uh
38:30 - let's continue with on with
38:32 - where we are
38:34 - so we just looked at that we called
38:36 - repeatability we got our scripts
38:40 - so here we go so now all right
38:43 - so now
38:45 - so we ran
38:47 - we ran this let's pull this back up
38:49 - let's touch on this again
38:51 - so we have our range
38:53 - we have when we give two two digits
38:57 - all right
38:59 - and i apologize for copying it was not
39:02 - that big of a deal i should not have
39:04 - copied that
39:05 - now
39:06 - let's look at this
39:08 - print i
39:10 - let's comment this out
39:13 - now what did we see
39:16 - about
39:18 - range
39:23 - start stop
39:25 - step and step is
39:30 - uh will will be omitted but
39:34 - i thought it used to say interval
39:37 - does not say interval anymore sorry
39:39 - think about your times table steps
39:42 - let's change this to two
39:45 - so what should come out right here
39:47 - any
39:49 - any thoughts
39:50 - oh i don't have chat anymore uh any
39:52 - thoughts of what should come out so we
39:54 - know it's gonna start at 2
39:56 - and it's going to go by
39:58 - twos right here
40:03 - 2 4 6 8.
40:06 - wait a second
40:07 - i wanted 10 to come out so
40:11 - oh that's right 10 is the stop is 2 4 6
40:15 - 8. you're exactly right
40:18 - uh
40:20 - jan no 10 no why not 10. very good
40:22 - question why not 10 is stop is exclusive
40:27 - so if i wanted
40:28 - to get 10 to come out
40:30 - i need to go past 10.
40:33 - stop is inclu
40:35 - is exclusive right up in two but not
40:39 - including the stop position so i went
40:42 - past because we're going by twos
40:45 - but technically really
40:47 - i just need to go to 11
40:49 - i just need to get past
40:51 - 10
40:52 - to go
40:53 - to
40:54 - have 10 be included because the stop is
40:57 - exclusive right up into so
41:00 - great question
41:01 - so now
41:03 - now let's
41:04 - change this a little bit because i want
41:08 - i want to
41:10 - i want to wrap so now i want to look at
41:14 - iterables as
41:16 - another because right here this is a
41:22 - so this is
41:24 - this returns an object of sequence so
41:27 - this is iterable
41:28 - but let's let's see what we did here so
41:31 - we took
41:33 - so we got our l
41:37 - so you don't want to do see if i do this
41:40 - list it's not going to work so that's
41:43 - why we did our l
41:47 - five
41:49 - then we wrapped list around range
41:53 - five
41:54 - close this out let's go over this real
41:56 - close so i do five
41:58 - i gray out i get around this and i grade
42:01 - out one more time and i get all my
42:02 - contents
42:03 - so now let's comment this out we're
42:06 - going to type some more
42:08 - for i in
42:09 - and so let's look at this number num
42:13 - in
42:14 - l underscore
42:16 - five
42:18 - i get my
42:24 - because it is that that is the same rule
42:28 - it
42:30 - a so we so the rules for a variable are
42:33 - can't contain a special character
42:36 - can't start with a number and it can't
42:39 - be a keyword
42:41 - or a function
42:42 - so there we go those are the three rules
42:46 - now print
42:48 - num
42:49 - so here's my temporary intermediary
42:51 - variable
42:52 - and
42:53 - right here
42:56 - now now let's look at one more very
43:00 - important
43:04 - other function my goodness sorry guys i
43:06 - cannot type today len
43:09 - short for length
43:10 - return the number
43:13 - of items
43:14 - in a container
43:17 - so now
43:18 - lynn on l underscore five close this out
43:22 - five
43:24 - so there we go
43:26 - so now when i run this
43:29 - what will
43:30 - happen
43:32 - anybody
43:33 - jan you got any you got any guesses
43:36 - so if i run if i press f5
43:38 - what will what will happen
43:41 - i don't know how much of a delay there
43:42 - is on my end
43:44 - in chat so i'm going to run this i don't
43:46 - know if you're sitting there watching me
43:47 - going why hasn't he pressed it yet so
43:50 - same rules apply here
43:52 - now
43:54 - let's do
43:55 - let's do something cool
44:00 - because no i changed it to just
44:03 - one integer
44:05 - so
44:06 - it reverts back to starting at zero
44:11 - yes
44:14 - you're good you're good
44:18 - so when you pass in one integer
44:21 - to
44:22 - range
44:24 - help on range
44:27 - when you pass in one integer
44:30 - it's only the stop point
44:31 - so zero through right up into not
44:34 - including the stop point
44:37 - so that's why
44:39 - this
44:41 - was four
44:43 - so now
44:46 - so now what happens
44:49 - right
44:50 - this is also where it gets really cool
44:54 - so now that i'm inside the body right
44:56 - here i can i can list
44:58 - however many instructions i want
45:01 - okay
45:02 - sorry guys that was probably a big loud
45:05 - and study okay
45:07 - so print
45:10 - all right and print
45:13 - num
45:13 - [Music]
45:15 - times
45:17 - actually let's do this over here first
45:21 - we need to talk about this so we have
45:23 - not talked about operators yet so python
45:26 - was built upon the basics and again
45:29 - that's why this thing is so so very
45:32 - powerful
45:33 - so it just jumps out as a calculator so
45:36 - you got your standard multiplication
45:38 - subtraction excuse me addition
45:40 - subtraction multiplication division
45:42 - uh exponents and there are a couple
45:44 - others that
45:45 - need needed to be added so we got our oh
45:48 - where they did that so
45:50 - 1 minus 1
45:52 - then you have 5 times 2
45:55 - 6 divided by 3.
45:58 - now here's how you handle exponents
46:01 - so two
46:03 - two asterisks
46:06 - is a exponent
46:08 - and then um
46:11 - so where it gets very important and when
46:13 - you're dealing with floats and integers
46:16 - and guess what we'll get to that
46:19 - there is a way
46:21 - so if i go and divide so as you can see
46:24 - right here this kicks back a float well
46:27 - when you're doing specific things
46:29 - and you're expecting one type of integer
46:31 - excuse me
46:32 - one type of object and you get a
46:34 - different type of object that can be a
46:35 - problem
46:37 - so guess what
46:38 - python has a way to handle that so this
46:41 - is floor division
46:43 - it removes
46:44 - it removes everything that you don't
46:47 - need
46:48 - now one of the very cool operators it
46:50 - took me a long time to figure out was
46:52 - the modulo this is what is so cool
46:56 - it's the remainder so right here let's
46:59 - go 5
47:01 - divided by
47:02 - 3 i get 1.66
47:06 - so 5
47:07 - modulo 3
47:09 - i get two
47:12 - okay so three goes in two times no no no
47:16 - no three goes in
47:18 - one time or it almost goes into no
47:22 - let's do long division so three goes in
47:25 - to five
47:26 - one
47:27 - whole time
47:28 - and the remainder
47:30 - is two
47:32 - or two thirds so we're going to have a
47:36 - very interesting exercise and a very
47:37 - nice problem
47:39 - especially when you're
47:41 - trying to solve
47:42 - mathematics
47:44 - and you're looking for ways to handle
47:46 - rounding this modulo is a very important
47:49 - character so all right
47:52 - a little bit of side note so we're going
47:53 - to do print we're just going to give an
47:54 - empty line and we're going to do print
47:57 - num times 2.
47:59 - so i want
48:01 - i want
48:02 - the number
48:04 - then a then a blank then a
48:08 - and actually we're gonna add another one
48:11 - print
48:12 - so we're gonna do
48:13 - the number
48:14 - then a blank line then the number times
48:16 - two then a blank line so let's run this
48:20 - so i will get okay i got 0 0
48:24 - 0 1 2 2 4. now let's change the scale
48:28 - you know what i don't like that i don't
48:30 - like that one there i want to do
48:32 - number number times two then a blank
48:35 - line and then go to the top
48:36 - so this is what's very powerful about
48:38 - loops and also then you have to plan and
48:40 - think about loop control
48:42 - flow of the program how are you going to
48:46 - be doing this and i think we're going to
48:47 - get to it today we're going to do a
48:49 - number triangle i love teaching this
48:51 - because this is a perfect example
48:53 - of
48:55 - how do you control
48:57 - control the flow of the program and you
48:59 - have to think about it you have to go
49:01 - through the order of events and
49:03 - how can i do this in a form that can do
49:06 - this every single time
49:08 - that is that is the challenge of a loop
49:11 - is that what order of events can i do
49:13 - this every single time with maybe a
49:16 - variation at the beginning or a
49:17 - variation at the end to kick outside of
49:20 - it
49:21 - so now let's run this again
49:24 - alright
49:27 - so i get
49:30 - zero zero blank line one two blank line
49:33 - two four blank line three six and four
49:36 - eight
49:37 - so the order of events are
49:41 - one time through
49:42 - i do all of this
49:44 - then it kicks back up here so all right
49:47 - we're going to expand upon this sorry i
49:49 - can get sucked in and talk about
49:51 - loops for
49:52 - hours
49:53 - so all right
49:55 - let's see what is next
50:03 - all right
50:04 - so we need to now look
50:08 - at some slicing
50:14 - so slicing has the same rules
50:16 - as let's bring in
50:18 - um
50:21 - name
50:23 - say
50:25 - s-a-m-u-e-l
50:30 - so all right
50:32 - so now
50:34 - you have slicing and indexing
50:37 - so we've seen parentheses and we've seen
50:40 - a bracket with a list
50:41 - so when i give
50:43 - python
50:45 - brackets and one
50:47 - digit
50:48 - beside
50:49 - a string variable
50:52 - i will get
50:54 - a
50:56 - singular
50:58 - character
51:00 - this is the zero index
51:02 - all right
51:03 - so this is one
51:05 - this is two
51:06 - three
51:07 - 4 and so on but the same rules apply
51:12 - if
51:13 - i now with our range function i gave
51:18 - i used commas
51:20 - with slicing i use quotations
51:24 - so we're gonna we're gonna look at this
51:27 - 0
51:29 - 4.
51:30 - so what in the world just happened
51:34 - so let's look at this
51:38 - i start at 0
51:39 - i go through
51:41 - up to
51:43 - but not including
51:45 - here let's come over here
51:47 - so let's look at another quick comment
51:50 - way to do this so if i give three
51:52 - quotation marks
51:54 - everything inside this
51:56 - is
51:58 - not looked at by the computer so i got 0
52:02 - 1 2 three four five
52:06 - let's space this out some
52:08 - that wasn't very good
52:10 - that looks jumbled
52:12 - okay
52:14 - there we go
52:17 - shrink this a little bit so we can see
52:18 - both of them side by side
52:22 - all right
52:24 - so i got zero
52:26 - i got
52:28 - one
52:29 - two
52:30 - three not including i did not include
52:34 - four
52:34 - now
52:36 - we need to look at this
52:37 - so when i leave
52:39 - now with our range function you could
52:41 - not leave one of them blank
52:43 - but with the string
52:45 - you can omit
52:47 - 0
52:49 - and pass
52:50 - in the colon so python goes okay you
52:53 - know what you're talking about you know
52:55 - you want to use the
52:57 - stop
52:58 - location and we kind of understand each
53:01 - other that you know what you're doing
53:03 - and you want to start at zero and then
53:05 - you want to stop at
53:07 - five
53:08 - so i close this out
53:12 - so i go to 5
53:14 - 2 5
53:16 - not including 5 and that's why i stop at
53:18 - e
53:18 - now
53:20 - so
53:22 - let's see so now i go name
53:27 - [Music]
53:29 - if i leave the other one blank i'm
53:30 - telling python hey i want all of it i
53:33 - want i want the whole thing
53:37 - now there's a couple ways that you can
53:39 - do this
53:40 - in reverse and this is this is just one
53:43 - of the things that i just love about
53:45 - python so all right same rule start stop
53:48 - step
53:49 - start stop step
53:55 - now so if i go by twos
53:58 - start stop step i want start at the
54:00 - beginning
54:01 - go all the way to the end
54:02 - and i want you to go by twos
54:05 - so
54:07 - start at zero uh
54:10 - start at zero
54:13 - skip every other so boom
54:16 - boom so that's why i only get s
54:18 - m
54:19 - e
54:20 - start and come over here
54:23 - now all right
54:25 - now let's look at how to go backwards
54:31 - negative
54:32 - so i'm going negative in reverse
54:35 - one time
54:37 - so this is a way
54:39 - that you can take the string and reverse
54:41 - it
54:42 - so this is a very cool test
54:45 - if you've ever heard of palindrome so
54:48 - palindrome
54:49 - so this is a very good test
54:52 - to how could you take in
55:00 - exactly it is exactly it is the same
55:02 - rules that's why i like to tie these
55:04 - together range you can look at the
55:05 - documentation for help on range and then
55:08 - we slide over to slicing with strings
55:11 - the exact same rules so that's why i
55:14 - like to include this what you'll notice
55:15 - about me and the way that we're going to
55:17 - do things is we're going to have
55:18 - association and then we're going to have
55:20 - reinforced learning so
55:22 - we're going to learn a couple of things
55:24 - together that act similar and then it's
55:26 - going to revert back to something and
55:27 - it's going to support it so we're going
55:29 - to we're getting our good base down
55:30 - we're quite getting we're getting that
55:32 - we're building a good foundation and
55:33 - then we're going to build upon it we're
55:35 - not going to rush through anything if
55:37 - anything we're going to go over a couple
55:38 - things uh several times and hopefully
55:41 - while we're here together you're going
55:43 - to get something that you've never seen
55:45 - before
55:46 - because that's what i tried to do i
55:47 - wanted to
55:49 - do
55:50 - one letter in the string i can't do that
55:53 - what if we only want to omit one letter
55:56 - in the string
55:58 - you want to just omit one
56:00 - oh okay so
56:03 - you just want to jump over one letter
56:05 - all right
56:06 - so there is because we are actually
56:08 - going to get to something like that
56:11 - so now one of the other issues with
56:13 - strings are
56:15 - let's look at help
56:18 - str string
56:21 - we need to do we need to look at this
56:26 - uh
56:27 - where does it say it
56:29 - watch it not say it in here for me
56:34 - uh immutable you cannot change a string
56:38 - but you can use parts
56:41 - you can use the whole string parts of
56:43 - strings
56:44 - and here's the little bit that can get
56:46 - confusing at first until you really
56:47 - start thinking about it
56:49 - you can
56:50 - add to a string
56:51 - but you're actually then creating a new
56:53 - object really
56:55 - but alright so let's say we wanted to
57:00 - so we got we got sam right
57:04 - uh
57:06 - name
57:07 - actually let's shorten it to just sam
57:13 - so now
57:24 - we're going to do this in a minute so
57:25 - this is a very great question
57:28 - we're going to take a bank of
57:36 - well let's build upon this
57:38 - so if i just wanted am to come out
57:41 - how how could i do this so we can look
57:44 - at how to slice up and chop
57:47 - this up in the middle so how would i get
57:50 - so if i know 0 starts
57:52 - s how could i get a to start where would
57:55 - i need to where would i need to go
57:57 - what would i need to type right here
58:04 - so i say start at one and index one go
58:07 - all the way to the end include
58:08 - everything
58:10 - i get am
58:12 - so now
58:19 - all right this is called
58:20 - concatenation just a fancy word to say
58:23 - adding strings together
58:25 - all right
58:26 - so
58:28 - p
58:33 - should do
58:34 - it
58:36 - oh okay uh jan i think i know what
58:39 - you're saying but hang on a second
58:41 - so if i want so if you did that that's
58:43 - going every other letter uh and i don't
58:46 - know if that was name for sam or samuel
58:48 - but then that so if i wanted to if i
58:51 - just wanted am to come out it's one
58:54 - starting at starting at this index one
58:56 - second letter
58:57 - always be off by one especially when we
58:59 - start doing
59:00 - our number triangle here in a little bit
59:03 - you're always going to be you're usually
59:05 - off by one either side plus or minus one
59:08 - so we got
59:12 - oops i typed that wrong
59:15 - let's come up here
59:21 - all right
59:22 - so what did i do so
59:26 - name
59:27 - slicing starting at one index
59:30 - one then going through so i got am
59:34 - right here
59:36 - and i added i concatenated
59:39 - p
59:40 - with am and that's how i got
59:43 - pam
59:44 - and then you got
59:46 - uh so then if i made a bank
59:49 - right here
59:52 - this is i love this
59:54 - exercise so bear with me
59:56 - so if i make a string
60:01 - and i do
60:03 - p
60:05 - t
60:07 - j
60:08 - what's the other one i do yeah
60:12 - four and i still have name
60:15 - yep
60:16 - so this is going to call name up here
60:18 - just to remind you
60:21 - for
60:23 - letter in
60:27 - letters
60:29 - so
60:30 - this is a group
60:32 - this is a string this is an iterable so
60:34 - i can place this here this is an
60:36 - iterable
60:37 - so i get my colon
60:39 - then print
60:41 - letter
60:43 - plus
60:45 - name just like we did over there
60:49 - close this out all right
60:51 - this is this is my building block this
60:53 - is just the same rule i'm just using
60:55 - variables
60:56 - all right let's put this into memories
60:58 - we'll go slow we'll go slow
61:01 - so letters what is this
61:04 - so if i go for
61:06 - letter in
61:07 - letters
61:11 - print
61:12 - letter
61:13 - i'm going to get each one of these
61:17 - i'm iterating through an iterable one at
61:19 - a time
61:22 - p t
61:23 - b
61:24 - all right
61:25 - so those are my building blocks
61:27 - i'm iterating
61:29 - through my iterable
61:31 - one letter at a time
61:33 - so here's my
61:35 - temporary variable
61:37 - and i remember that
61:40 - this
61:41 - is am
61:43 - and i'm adding m to the end of each
61:45 - letter which comes out p t j b
61:49 - so then now i hit my f5 and now i get
61:52 - pam tam jam bam
61:55 - all right
61:57 - does that make sense
62:04 - any questions about that
62:07 - all right cool let's keep going
62:10 - hour one is down so all right
62:12 - if you're new here thanks for joining us
62:14 - i'm sam
62:15 - with python basics and we're going to be
62:17 - doing
62:19 - a live stream uh once a week for two
62:22 - hours
62:23 - and basically this is
62:26 - a compressed
62:28 - course
62:29 - of all the videos off of my youtube
62:32 - channel
62:33 - uh 700 plus videos
62:35 - and we
62:37 - beau and i uh been talking and
62:40 - i had been experimenting with live
62:41 - streams and
62:44 - uh free code camp has given me this
62:46 - wonderful opportunity so i just want to
62:48 - make sure i tell them thank you thank
62:49 - you to them and thank you to beau for
62:51 - this um uh wonderful chance to share
62:54 - this because i just love python
62:56 - absolutely so much
62:58 - i think it is a doorway to so many
63:01 - things
63:02 - for anybody who wants to learn
63:05 - uh anybody who wants to give any effort
63:08 - to programming because if i can learn
63:10 - how to do this i promise you i can teach
63:12 - anybody because i was 36 i'm dyslexic
63:16 - adhd
63:18 - any issue you can think of
63:21 - i got it i learned it i love teaching
63:24 - this
63:24 - it is a powerful tool it changes the way
63:27 - you think it changes your outlook it
63:29 - i want you guys to stay motivated all
63:31 - right i want to i'm i'm here to keep you
63:33 - guys going so all right let's keep going
63:35 - let's keep going so now
63:38 - so we've done a little bit of slicing
63:40 - we've done a little bit of concatenation
63:42 - so now we need to really look at
63:46 - what did i want to look at next
63:51 - so we slice the strings
63:55 - ooh we haven't even built a function yet
63:57 - so let's go ahead and do that so all
63:59 - right
64:00 - we have been using all of python's
64:02 - built-in everything so now i like to i
64:06 - like to build on
64:09 - from our
64:11 - from our loops into
64:14 - our function
64:16 - they do the exact same thing so
64:19 - that it's designed the same you have
64:20 - your header and then you have your body
64:23 - and that's it and
64:24 - the same
64:26 - rules
64:27 - apply
64:28 - so let's just go ahead and do this
64:32 - let's comment out all this so we don't
64:33 - have any straggler stuff and also very
64:36 - important side note don't ever delete
64:39 - anything
64:40 - i remember i was going i was like oh
64:42 - i'll remember this i you got tons of
64:45 - hard drive space there's stuff in the
64:46 - cloud don't ever delete anything you've
64:48 - ever written one it's kind of cool to go
64:50 - back and look and see what you've done
64:52 - in the past but don't delete it just
64:55 - comment it out save it and also one
64:57 - important thing to really learn
65:00 - is make sure when you're writing
65:01 - programs
65:03 - you put comments in them because
65:06 - what i have a challenge for you is if
65:08 - you've been programming a while go back
65:10 - and look at one of your programs you
65:11 - wrote a year ago or even six months ago
65:14 - see if you didn't put any comments in
65:15 - there see if you can remember
65:17 - what in the world you were trying to do
65:19 - so all right now we're going to build
65:22 - our
65:23 - first
65:26 - function all right let's get this up
65:28 - here so it's all towards the top so all
65:30 - right now we're going to learn about
65:31 - another keyword and we know it's a
65:33 - keyword because it is orange
65:35 - so let's let's come and remind ourselves
65:38 - help
65:39 - keywords keywords and i'm there
65:43 - i'm at our interactive help prompt
65:47 - and you get to there by typing in help
65:49 - with
65:50 - zero arguments
65:53 - all right
65:55 - and as you can see now we have def we
65:58 - pass in def
66:01 - and oh wow okay so we use this for
66:04 - defining uh a function
66:07 - okay
66:08 - there we go so
66:10 - let's jump into it so yeah if you can't
66:13 - ever remember exactly what something
66:14 - does especially i remember i was going
66:16 - nuts i'm like how am i gonna what do i
66:18 - what is that what does that keyword do
66:20 - what is that key oh wait a minute yeah i
66:22 - have my interactive help and i can ask
66:24 - about that keyword
66:26 - so all right we're just gonna type
66:28 - hello
66:32 - i think it's good if you get a zero all
66:34 - right so the way that i like to explain
66:35 - this is you need
66:37 - five things on your header
66:39 - your
66:41 - def keyword
66:43 - the name of your functions your
66:45 - parentheses
66:46 - your colon because if you leave your
66:48 - colon out
66:50 - you go back to
66:52 - under def on the edge column zero you
66:55 - have a problem
66:56 - so you make sure you put your colon in
66:58 - there and python will take care of it in
67:00 - the script and indent four for you now
67:04 - stuff in the middle the argument inside
67:06 - the function is optional right now we're
67:09 - not going to take in anything
67:11 - we're just going to print out
67:13 - hello
67:14 - and it helps if you
67:16 - pass it
67:18 - a string
67:20 - all right my goodness guys i'm very
67:22 - sorry for the typing today
67:24 - so let's look at this same same setup
67:28 - sorry
67:30 - same setup so when i'm here i go down
67:32 - python says hey do you have any more
67:33 - instructions i'm sitting here i'm
67:35 - waiting i'm at your beck and call
67:38 - and you're like no actually i'm done
67:40 - so now that just now a little variation
67:42 - just like when we created so i put this
67:45 - into memory looks like nothing happens
67:49 - so same thing just like when we did our
67:53 - variable
67:54 - we put it into memory
67:57 - and it looks like nothing happened but
67:59 - then we had to call it right so we did
68:01 - this went to the next line you're like
68:02 - nothing happened actually a lot happened
68:05 - same thing over here so in our file
68:09 - in our script we created then we called
68:12 - it
68:12 - we put it into memory
68:15 - but where did we call it we haven't
68:17 - actually
68:18 - called
68:19 - the function
68:22 - so we just go hello
68:25 - and it's a function and as you can see
68:27 - python helps you it says hey doesn't
68:29 - take any arguments just pass parentheses
68:32 - and you're like okay cool
68:35 - now if you're like me
68:37 - you're going to want to see this thing
68:39 - run
68:40 - so you're going to so i'm here inside my
68:43 - function right and i'm coming here i'm
68:45 - coming here i'm coming here
68:47 - well i need i get outside the function
68:50 - i'm not inside so like i said we're
68:52 - going to build we're going to add we're
68:54 - going to sprinkle we're going to add
68:55 - we're going to go back we're going to go
68:56 - backwards we're going to add we're going
68:57 - to add all right
68:58 - python tracks white spaces
69:02 - this white space right here python goes
69:05 - okay you know what you're talking about
69:06 - you just made a function
69:08 - and everything i'm going to do
69:09 - everything inside this function
69:12 - and when i get outside the function then
69:14 - i'm going to go through so just like our
69:16 - for loop
69:17 - python comes down here and it loops
69:19 - through everything here once it gets to
69:21 - the bottom exterminates at the bottom
69:23 - goes back up to the top same thing with
69:25 - the function it's going to read all this
69:27 - in then kick outside here so if i want
69:30 - to then
69:31 - inside
69:32 - this file inside this script
69:35 - called the function after i put it into
69:37 - memory i come down below it
69:40 - and then just call
69:41 - said function
69:43 - just like i did here so i just put it
69:45 - over here now it can't be inside the
69:47 - function that's another type of issue
69:49 - we'll deal with that later but we'll
69:51 - jump into that very very soon
69:54 - all right
69:55 - so here we go
69:57 - i get hello
69:59 - now
70:00 - now let's do a little bit
70:03 - more
70:05 - so now
70:09 - i'm going to pass in
70:11 - sam
70:18 - [Music]
70:26 - name
70:29 - and then
70:30 - concatenate
70:32 - name
70:34 - so then i give it
70:38 - here we go
70:40 - all right
70:42 - so now i'm taking in information here's
70:45 - my here's my argument my first my first
70:48 - exposure to an argument
70:50 - i'm then going to
70:53 - print hello
70:55 - along
70:56 - with this argument this variable and
70:59 - then down here when i'm calling the
71:00 - function i'm passing in
71:03 - this so the way that i want you to look
71:05 - at this
71:07 - is this is the variable
71:10 - from here right
71:11 - same concept same concept
71:14 - where
71:16 - we have
71:19 - the information the variable and then
71:20 - we're utilizing that variable here
71:23 - so now we're passing this in
71:25 - this goes here so visualize this as sam
71:29 - and sam
71:30 - now there is a problem here
71:33 - and we're going to see it and then we're
71:34 - going to fix it
71:36 - and i love teaching young people and
71:38 - they say i did it wrong
71:40 - well it didn't do it right it didn't put
71:42 - a space in there
71:44 - okay
71:45 - well show us where we put the space
71:48 - we didn't put a space anywhere so of
71:50 - course the computer it's not gonna guess
71:52 - it's not gonna hope it's not going to go
71:54 - i know you meant to put a space in there
71:56 - it's not going to do that
71:58 - so we're going to come here we're going
71:59 - to run boom hello sam
72:02 - all right now
72:03 - now
72:05 - why don't we
72:07 - right now we have this program and
72:10 - it's not even close to an end user i got
72:12 - to get into the program to put my name
72:14 - in there
72:15 - well guess what
72:17 - python's got something for you help
72:21 - input
72:24 - let's pull this over these get bigger
72:26 - and bigger so all right let's go back to
72:29 - chat who has seen the input
72:31 - function before anybody
72:37 - okay
72:38 - so read a string from standard input
72:41 - trailing
72:43 - trailing new line is stripped
72:45 - the prompt string if given
72:48 - standard output with a trailing new line
72:50 - before reading in sorry what this is
72:52 - basically saying you have okay cool
72:56 - so basically now we're going to get rid
72:58 - of this
72:59 - we're going to get
73:01 - then we're going to do name
73:04 - input
73:07 - enter
73:09 - name
73:12 - so now this can
73:17 - you can get uh user input from the
73:19 - command line but that's gonna be
73:22 - at least a video or two away because
73:24 - that's dealing with uh
73:26 - um sysrv and i don't wanna
73:29 - we're not we're not to that point we're
73:32 - we're we're still dealing with beginner
73:33 - beginner stuff but yes you are come
73:35 - completely completely accurate there is
73:37 - a way to grab all input
73:40 - from the command line and that is some
73:42 - very powerful stuff with python and i
73:45 - i love it i love it i don't i don't want
73:47 - to get sucked into that crack quite yet
73:49 - i want to i want to deal with uh all the
73:51 - basics first but we are we are going to
73:53 - get to that and we're actually going to
73:55 - uh do some pretty cool stuff with that
73:57 - so all right um so now we have so i got
74:00 - to get rid of this because this is not
74:02 - we don't take in any information
74:05 - uh with our with our function so i have
74:08 - this function
74:09 - i then am creating a variable
74:12 - utilizing the input
74:16 - utilizing the
74:18 - input function i'm passing any in some a
74:22 - prompt in then i'm taking that
74:23 - information and going forward all right
74:26 - so now let's go through this enter name
74:29 - and then i go oh i don't like that it's
74:31 - right there on that
74:33 - uh
74:34 - colon so we're gonna fix that later
74:36 - and we do that just by this
74:40 - boom
74:40 - so now i have
74:42 - my space right here let's run this again
74:45 - so now my prompt is sitting right here
74:47 - it's
74:48 - now i go
74:49 - sam
74:50 - oh very cool okay so now
74:52 - now i have this
74:54 - now
74:55 - now now we're going to look at this
74:57 - and let's close comment that out
75:01 - now we're going to
75:03 - look at
75:07 - how to
75:09 - uh def
75:12 - crent
75:14 - so i want
75:18 - blank
75:22 - print
75:23 - empty blank
75:25 - so then i call blank
75:29 - and what happens
75:31 - get a blank line
75:33 - all right
75:36 - deaf
75:40 - blank
75:46 - three
75:50 - so now
75:51 - i want three blank lines
75:53 - so now i'm going to call
75:57 - blank
76:00 - three times
76:02 - so the reason why i'm showing you this
76:04 - is i know i could use print but
76:06 - the the point of this exercise is to
76:08 - show you
76:10 - that you can begin to utilize
76:15 - so now i got three lines
76:18 - so now now i'm gonna go
76:20 - def
76:22 - blank
76:24 - nine
76:29 - so instilled sorry blank
76:32 - three
76:34 - all right i'm gonna cheat a little don't
76:35 - tell nobody
76:37 - do not recommend this okay so now i call
76:41 - blank
76:43 - underscore nine
76:45 - open close
76:46 - run this and now i get nine
76:49 - so the point of this exercise is to
76:51 - begin to show you
76:53 - that where this becomes very powerful
76:56 - is so i don't have to go in here and
76:58 - type
76:58 - i don't have to type
77:00 - print three times
77:03 - three times so
77:05 - or nine so this is the building block of
77:09 - how you would go in create a function
77:13 - be able to utilize that function at a
77:15 - later time
77:16 - and then
77:17 - even expand upon it so
77:20 - that was one of the first things because
77:22 - when when when computer programs were
77:24 - first being built you had to go in and
77:26 - do the exact same command over and over
77:28 - and over again i i can only imagine what
77:32 - that
77:33 - what that could be and had to be like
77:35 - and then then they designed efficiencies
77:38 - hey there's got to be a way for us to
77:41 - do this over and over again and the
77:43 - first one was the go-to line
77:45 - and then and then it was like okay do we
77:47 - really need to then go back up there so
77:49 - we have this thing circulating so then
77:51 - they came up with a way to have a
77:52 - function and then it has developed and
77:55 - evolved and then files and then boom
77:56 - boom boom because i mean if if you're
78:00 - if you're anywhere near my age
78:03 - the computers were actually the
78:05 - information was actually saved on magnet
78:07 - tapes it would search the tape and coil
78:10 - and spin and run that was the original
78:13 - hard drive
78:14 - it was
78:15 - it was nuts all right
78:17 - i digress but uh all right it's a
78:21 - little ads we got another
78:23 - bunch of time that went by if you're
78:24 - just joining us today
78:26 - thanks for being here can you
78:28 - can i call the function with the same
78:30 - function
78:32 - like blank function inside the blank
78:34 - function
78:36 - yeah but i don't want to get into that
78:37 - right now that's recursion
78:40 - and that
78:41 - you can do that for certain purposes if
78:44 - you mean to especially we're gonna have
78:46 - an exercise uh
78:48 - a recursive function but um what am i
78:52 - what am i trying to think um
78:55 - oh where we swap
78:58 - fibonacci
78:59 - so
79:00 - uh the fibonacci sequence can you call
79:03 - the function from within a print
79:06 - function
79:10 - when
79:10 - giving an example jana what i mean you
79:13 - can but all it would do is print out the
79:14 - function
79:16 - can you give an example what you're
79:17 - wanting to do
79:21 - [Applause]
79:22 - because here
79:23 - if i call
79:25 - because you're going to get something
79:26 - like this
79:31 - that's what it would look like
79:36 - so okay
79:37 - yes
79:41 - oh well i'm glad to hear that i'm very
79:43 - i'm very glad you uh you joined because
79:45 - look if it like if like if you're just
79:47 - joining us right now
79:49 - um i've been given this wonderful
79:51 - opportunity to live stream with you guys
79:54 - and
79:57 - python has just changed everything uh
79:59 - about me and i know that sounds a little
80:02 - cheesy but i mean it has it's given me
80:06 - a bunch of new skills
80:08 - the way that i see everything the way
80:10 - that i problem solve
80:12 - i've been able to teach python at my
80:15 - kids school
80:16 - been able to expose a great deal of
80:18 - people i've had a youtube channel for
80:21 - over three years
80:23 - it is just a wonderful tool
80:26 - uh that is out there so
80:28 - yes i'm going to be doing we're going to
80:30 - be doing this for a very very long time
80:33 - and
80:34 - i don't see it slowing down at all if
80:36 - anything i see it going faster so all
80:38 - right
80:39 - but yes you you do have a function
80:42 - called other functions and especially a
80:44 - fibonacci sequence
80:46 - well
80:48 - well i really appreciate that thank you
80:50 - very much
80:51 - all right so we have a function call in
80:53 - other functions
80:55 - and all this basically is and then we're
80:57 - going to get it we can get into nested
80:58 - functions later
81:01 - for example if you want to user to enter
81:04 - the gender
81:05 - [Music]
81:06 - the character in the program
81:08 - standardizes their input
81:10 - the user enters the character as male
81:12 - and the sentence would say the character
81:14 - is a male
81:17 - uh
81:19 - okay i'll look at that
81:21 - later i think i get that let's see if i
81:24 - can copy that all right i'm copying
81:27 - that question right now
81:29 - and i'll look at it i don't want to slow
81:32 - uh all of us down but jan that's a good
81:34 - question i'll look at i think i know
81:36 - what you're saying but i don't want to
81:37 - not answer
81:39 - i got i got some other stuff i want to
81:42 - go through but i will examine that and
81:45 - if you go to my
81:46 - uh
81:48 - my channel and then there's an email
81:51 - address that you can email me
81:54 - and we will uh we can we can chat about
81:57 - that or you can send me a
81:59 - uh a paste bin if you have a script that
82:01 - you're kind of working on and i can i
82:02 - can help you with that all right so cool
82:07 - where are we
82:09 - oh i think we're to the point where we
82:10 - need to
82:14 - where where was i
82:18 - are we gonna do the
82:22 - oh yeah okay we need to look at how to
82:25 - start looking at making decisions
82:28 - so we need to
82:32 - because we're talking about modulo so we
82:34 - need to thou bring in
82:40 - we're going to make a list
82:43 - numbers
82:46 - and it's going to be
82:56 - all right
82:57 - we're going to go
82:58 - 1
82:59 - 5
83:00 - 2 4 6
83:03 - 10
83:04 - and i don't think i have three
83:08 - so print
83:10 - number and numbers
83:15 - print number
83:17 - so what i want to do is i want to we're
83:19 - going to we're going to we're going to
83:21 - build
83:22 - we're going to start small okay so we
83:24 - got our we we got where we can go
83:26 - through
83:27 - our
83:28 - our list
83:30 - so now we need to find out and we want
83:32 - to print out
83:34 - if
83:38 - if each number is odd or even and i made
83:41 - one little concept one little passing
83:44 - comment
83:45 - about
83:47 - a tool
83:49 - so does anybody have any guesses how in
83:52 - the world
83:53 - we could begin to use the tools that we
83:55 - have to find out if a number is odd or
83:58 - even or i guess how would you explain to
84:00 - a five-year-old what an odd number is
84:02 - and what an even number is any comments
84:06 - jan you've been doing awesome and
84:08 - they're super interactive any any quick
84:10 - comments how you'd describe to a
84:12 - five-year-old
84:13 - what a uh
84:14 - what an odd or even number is
84:17 - all right
84:18 - best description for the tools that we
84:20 - have is if
84:22 - a number is divisible by two with a
84:25 - remainder of zero
84:30 - all right
84:32 - so now
84:35 - if a number can be divided by itself
84:37 - it's even
84:41 - okay all numbers wait hang on if a
84:43 - number it can be divided by itself it's
84:45 - even
84:47 - by two yes
84:49 - absolutely with a little a little bit of
85:00 - but with a little bit of caveat with a
85:03 - remainder of zero so we have to have
85:05 - that little
85:06 - we have to have that they're all
85:09 - evenly divided evenly divided that
85:12 - that's where the sticky the stickiness
85:14 - of this gets so now we've learned about
85:16 - how to use an equal sign to link
85:19 - information
85:22 - information to a variable
85:24 - now now we need to learn how to find
85:26 - equivalence
85:30 - boom
85:31 - okay
85:33 - very very good
85:36 - if there is a remainder of zero
85:40 - awesome
85:42 - uh
85:43 - modulo
85:44 - we're gonna it's gonna be like this if
85:46 - you guys are looking at the comments
85:47 - that is exactly it
85:49 - so this is then how you do
85:52 - a condition
85:54 - so another keyword
86:00 - keywords
86:05 - words
86:07 - if
86:08 - as alphabetical order for me
86:11 - where'd it go there it is
86:13 - if
86:15 - all right
86:17 - conditional statement conditional
86:20 - execution and the way that we do this
86:25 - is
86:26 - one
86:27 - equal to one
86:29 - is one the way that i would recommend
86:31 - and say put an is in front of it to help
86:34 - put you until you get very comfortable
86:36 - with this is one equal to one
86:39 - two equal signs is the equilibrium one
86:41 - equal sign is association linking
86:44 - assigning association linking assigning
86:47 - two equal
86:48 - signs equivalency test true is one
86:53 - equal to zero
87:04 - so now
87:07 - so now
87:09 - now we have
87:11 - inside our
87:12 - for loop
87:14 - now we're going to have some more
87:15 - indention
87:16 - if number
87:19 - one here
87:21 - do we have a number still in here
87:24 - okay numbers
87:26 - all right
87:28 - so if number
87:30 - modulo
87:33 - 2 so i divide it by 2
87:37 - equals
87:38 - 0
87:39 - nether colon
87:41 - more indention and i want you to print
87:44 - out
87:45 - number we're not going to do anything
87:47 - else right now so basically all that
87:49 - should happen right now is we should
87:50 - only print out
87:52 - because this is the only instructions we
87:54 - have so we have
87:55 - we have our loop we have our header loop
87:57 - now we have our header condition
87:59 - now now we have our specific here's our
88:01 - condition now
88:05 - actually
88:06 - i want to let's hardwire this
88:11 - all right
88:11 - so we're going to cheat i want i want to
88:13 - really focus on this
88:15 - this line will only happen these
88:17 - instructions will only happen if this
88:20 - line is true
88:22 - all right
88:26 - so it just printed out everything i made
88:28 - i just said make everything true so
88:31 - right here
88:32 - i have
88:34 - one equals one true
88:36 - one equals zero
88:38 - absolutely not it's false okay so i
88:41 - hardwired this i made this true so every
88:44 - single number printed out
88:46 - so now we're going to pass in if number
88:50 - modulo
88:51 - 2
88:52 - equals zero so now
88:55 - this
88:56 - has to be true
88:59 - for this to happen
89:01 - all right so i should only get even
89:04 - numbers
89:05 - to print out
89:07 - right
89:08 - because this will only it will only
89:10 - happen it will kick down here past here
89:12 - and then it exhausted the instructions
89:14 - and will go back up so now let's run
89:15 - this
89:17 - so i only printed out
89:19 - even numbers
89:22 - so now how about we say let's change
89:24 - this up a little bit
89:26 - uh
89:28 - is
89:29 - even
89:32 - all right
89:34 - and i told you to do this and here i am
89:36 - getting fancy and giving you bad
89:39 - examples i'm a bad teacher
89:41 - all right
89:42 - 2 is even 4 is even 6 is even so we have
89:45 - the same thing so now
89:50 - bingo else odd
89:54 - so now we have to the way that
89:57 - python works is it goes hey
90:01 - i got you an if
90:04 - so you don't have to do another if
90:06 - because we're going to talk more about
90:07 - that i don't know if we'll get to that
90:09 - today i think we will we only got we
90:10 - only got 30 minutes
90:12 - um i don't know if we'll get to that
90:14 - today
90:15 - but you have to have a way to grab the
90:17 - opposite
90:19 - because
90:20 - let's let's hard wire this
90:24 - let's hardwire this right now as false
90:30 - false and i'm going to run this
90:32 - nothing happens because all these are
90:34 - false
90:35 - so nothing happens it comes up here gets
90:37 - exhausted so i back this up
90:41 - boom
90:43 - now the way that i did that i know i
90:45 - just typed a lot so if you're new here
90:49 - uh
90:51 - let's
90:58 - see
91:05 - yeah you're right
91:07 - is that better i should be probably more
91:09 - consistent so
91:11 - now
91:13 - the way
91:14 - that we can do this
91:16 - is i print
91:19 - number
91:21 - so if this becomes false
91:24 - if this if this is not true excuse me
91:27 - if this is not true
91:30 - don't do this content continue on
91:32 - all right
91:35 - boom so now i get
91:43 - okay
91:45 - now
91:53 - here we go
91:57 - one is odd five is odd two is even four
92:00 - is even six is even
92:02 - ten
92:04 - and so on and
92:06 - soon i don't know if it's next we need
92:09 - to then figure out a way and there's
92:12 - another term actually yeah let's go
92:14 - ahead and
92:15 - i think i do have that
92:17 - next
92:20 - oops
92:25 - see where i am with the notes
92:30 - all right
92:32 - yeah yeah yeah
92:33 - all right so now
92:36 - now the next one and we need to figure
92:38 - this out is is
92:42 - is a number
92:43 - so
92:45 - this simple example works because there
92:47 - are two conditions right
92:49 - we have we have a positive
92:52 - we have a positive and
93:00 - we have a positive and excuse me we have
93:02 - an even and an odd so there's only two
93:04 - there's only two scenarios
93:07 - what happens if we have a
93:09 - even or odd number
93:11 - what would we do
93:13 - i need to add one little
93:15 - one little caveat here
93:18 - there we go
93:20 - all right so kind of just gave
93:23 - gave it away right there
93:29 - so i got i got a set of numbers let's go
93:31 - through these numbers
93:34 - for number
93:37 - and numbers
93:39 - print
93:41 - number
93:44 - all right
93:45 - do i have even a rod how am i gonna
93:48 - excuse me positive or negative i need to
93:50 - change excuse me i forgot to change that
93:54 - that
93:55 - and
93:57 - that so how many conditions will we have
93:59 - if we have
94:00 - if we have
94:03 - because right there even or odd there's
94:04 - only two
94:06 - but if we do
94:08 - positive or negative
94:10 - that's kind of a trick question
94:13 - because
94:14 - there's actually three conditions so we
94:16 - need to learn about
94:19 - we can we can do this one of two ways so
94:22 - we're gonna we're gonna do it two ways
94:26 - so
94:29 - i'm gonna do a nested
94:34 - all right
94:37 - so we print out
94:38 - oh did i not save this then it's not
94:40 - safe
94:41 - there we go all right so we got we got
94:43 - some we got some negative numbers we got
94:45 - negative 5 negative 4 negative 10
94:48 - and we're going to zero so that's that's
94:51 - our
94:52 - that's our little bit of our our hint
94:54 - right now yep we got three conditions so
94:56 - how in the world are we going to handle
94:57 - those three conditions we could we could
94:59 - devise this
95:02 - a couple of different ways so
95:05 - let's let's just go ahead and get
95:06 - started
95:08 - if
95:10 - num
95:12 - equals zero
95:16 - print
95:19 - zero
95:23 - wow
95:25 - zero
95:26 - and there i am doing that again sorry
95:32 - now
95:33 - we need to look at this
95:36 - else if statement all right or another
95:39 - one
95:42 - shoot
95:43 - help
95:46 - keywords
95:48 - and
95:50 - it's very very handy very very cool lf
95:56 - so
95:57 - the reason why this was created was if
96:00 - you have a bunch of if conditions this
96:03 - took me a long time to figure out
96:06 - and i was new to programming and i was
96:09 - old so if it worked i
96:11 - i went on about my day but then i
96:13 - started realizing that these that i was
96:16 - these longer programs and especially
96:18 - checking these longer
96:20 - uh lists and these longer containers
96:21 - this was taking
96:23 - forever
96:24 - because it was running through and
96:25 - checking every single if so the elif
96:29 - you you utilize elif
96:32 - so it will only check the first if and
96:35 - then exterminate and go out for zero
96:39 - uh for even
96:41 - for even an odd oh that's actually kind
96:43 - of cool
96:44 - so if it's zero and even and odd all
96:47 - right
96:48 - so right now i may have been misspeaking
96:50 - because i was trying to
96:51 - read some comments so no all we're going
96:53 - to do right now is if it's positive or
96:56 - negative and there's a tr there's a
96:59 - trick there's a sneaky condition in
97:01 - there as if it's 0.
97:04 - so if it's 0 do that
97:06 - l if
97:09 - lf number
97:11 - greater than
97:14 - zero
97:16 - print
97:18 - uh what
97:22 - positive
97:28 - positive
97:31 - wow
97:33 - and then what's the last they all enter
97:36 - getter
97:37 - la
97:38 - else
97:39 - then
97:42 - negative
97:44 - all right so let's
97:48 - i agree i agree i i love this actually i
97:52 - have a couple of
97:54 - uh subscribers on my channel that are
97:57 - older than i am and i think that is the
98:00 - i think that is the coolest thing i
98:02 - think that is the very i think that is
98:04 - very very cool that that makes me very
98:06 - happy
98:07 - um and actually a majority super
98:10 - majority of the of my subscribers are uh
98:13 - my viewers the subscribers i don't know
98:16 - if i have access to that but a super
98:19 - majority of my viewers
98:22 - are from uh
98:24 - overseas international and um
98:27 - a huge portion huge portion of my
98:30 - viewers are
98:32 - sometimes it's sometimes it's upwards of
98:34 - 20 22
98:36 - are from india so
98:38 - that i think that is very cool and a lot
98:40 - more are women watching um now when i
98:43 - first started it was you could barely
98:46 - see it now it's up to
98:48 - um
98:49 - i think i've hit 15 percent at some
98:51 - weeks all right so i digress
98:53 - so here we go
98:55 - we got zero
98:57 - and you could actually do this as
99:00 - nested
99:01 - where then if it
99:03 - if it's not
99:04 - you can come out like that we'll deal
99:06 - with that
99:07 - later and really sum this up because
99:11 - you want to have this be as as efficient
99:14 - as possible in the workflow so actually
99:16 - going to look at workflow right now and
99:19 - we're going to look at
99:21 - um building
99:24 - we're going gonna do the number triangle
99:25 - do i have the number triangle being
99:28 - uh next
99:31 - what did i have next
99:41 - we did even odd
99:47 - ooh
99:48 - actually
99:49 - here i want to build this
99:52 - into a function let's do this now that's
99:55 - exactly what i have so we're going to
99:57 - build a
99:59 - and we need to learn about return
100:01 - so we we need we need to look we need to
100:03 - look at return right now
100:05 - so we're going to
100:08 - type this in
100:09 - even
100:11 - then we take in a number
100:15 - and if x
100:20 - 2
100:22 - equals
100:24 - zero
100:26 - we need to look at this and we need to
100:28 - look at then a compressed way to do this
100:33 - return
100:35 - true
100:37 - so all right
100:38 - we're kind of looking at how to speed
100:40 - this
100:42 - up
100:44 - so return creates
100:46 - so right now
100:48 - i want to show you this and then we're
100:49 - going to show you a compressed way to do
100:51 - this
100:58 - even
101:01 - then i'm going to pass it
101:04 - this now watch what happens
101:08 - nothing happened
101:09 - i'm returning i'm creating something
101:12 - but that's just creating it so i'm not
101:14 - assigning it anywhere remember how we
101:16 - did that if it created it it assigned it
101:19 - so now i'm going to print this out so
101:20 - this is true now this is a little bit of
101:23 - extra double work uh if
101:26 - there's a difference between single
101:27 - quotes and double quotes also i can
101:29 - assign stuff to triple quotes
101:32 - i am cute i'm a curious guy all right
101:35 - so
101:36 - question i asked myself
101:39 - for 35 years
101:47 - oh i gotcha okay
101:50 - so i
101:53 - let's plan on dealing with the quotes
101:55 - next week because
101:57 - that is a way
101:58 - so triple quotes are typically utilized
102:02 - when you're creating a function
102:05 - you know how we typed in
102:07 - range like this
102:09 - and we got some so we got some we got
102:10 - some notes here that's the documentation
102:14 - so if i come over here
102:17 - comment this out
102:22 - oops sorry guys
102:25 - do not mean to do that
102:30 - all right
102:31 - so if i comment this out and i run
102:36 - and if i run even
102:40 - i get my x and i pass that in and it's
102:43 - not going to do anything right now
102:45 - but then if i
102:47 - give it some information one two three
102:54 - enter number
102:57 - to be
102:59 - checked
103:01 - if even
103:03 - then one two
103:05 - one two three all right
103:09 - so i put that in memory and i call even
103:12 - if you spell even right
103:15 - and i get the information i get the
103:17 - how many variables do do i how many uh
103:20 - arguments do i take
103:22 - and then was there any documentation
103:26 - docstring right there that's called a
103:27 - docstring
103:29 - and i get this right here enter a number
103:31 - to be checked if even
103:34 - so
103:34 - that's typically what and then also
103:37 - three
103:39 - three quotation marks are for double or
103:42 - excuse me are for multi-line printing we
103:45 - can do we're gonna deal with um all
103:48 - those things with uh strings you got
103:50 - your new line you got your tab
103:54 - uh
103:55 - things like that and then also if you
103:58 - really think about it you have
103:59 - contractions in python excuse me and and
104:02 - and print in english
104:04 - and the reason why you got then you have
104:07 - escape characters
104:09 - this is what so like don't
104:11 - well i'm having a heck of a time typing
104:13 - today i apologize everybody
104:17 - so for that to be able to work that's
104:18 - why i was saying i suggest uh
104:21 - doing double quotation marks i haven't i
104:24 - haven't taught
104:25 - uh beginner stuff in a
104:28 - while uh i guess it's been a couple
104:30 - months since i started
104:31 - that other stuff so i apologize i i
104:34 - really
104:34 - emphasize uh want to enforce reinforce
104:38 - using the double quotes because so when
104:41 - you if you were to use single quotes if
104:42 - you get into that habit so when you do
104:45 - this
104:46 - you're gonna have a nightmare
104:48 - but if you use double quotes it goes
104:49 - through
104:52 - so i don't want to get too far off uh i
104:55 - want to i want to get i want to do the
104:58 - oh shoot
105:00 - let's get this up here
105:03 - there we go
105:05 - all right i want us to do
105:07 - this for a second
105:10 - so now we create and we got our numbers
105:14 - so we're going to go through
105:17 - and we're going to check this right
105:19 - and this works
105:23 - but boy
105:24 - wait a minute what do we learn
105:26 - if this returns true
105:29 - so basically
105:30 - this is just gonna
105:32 - kick out
105:34 - if i make x
105:37 - if i make
105:39 - this and i do this and i do this
105:43 - equals this i'm going to get a boolean
105:46 - so i don't need to have this test here
105:50 - i just need to
105:52 - [Music]
105:54 - return
105:57 - this right
105:58 - so here i'll leave this
106:00 - and we'll
106:03 - let's come down here
106:04 - so def
106:06 - even
106:08 - x
106:12 - return
106:14 - x
106:16 - to
106:19 - equals
106:21 - zero
106:24 - let's comment that out
106:26 - let's run this
106:28 - boom so now these are the type of things
106:32 - that
106:34 - we need to be constantly thinking about
106:36 - can i
106:38 - compress this can i
106:41 - can i make this more fluid
106:43 - so i rem and and that's and that's fine
106:45 - when you're starting out get it to work
106:48 - get it to work
106:49 - learn something more
106:51 - make the code better make it readable
106:55 - make it flow better yes it will get
106:57 - faster some people get hung up on faster
107:00 - look
107:01 - i'm i'm old the tortoise and the hair it
107:04 - is a lifetime their lifetimes of
107:06 - experiences get it done make it work
107:09 - so what
107:11 - then make it faster then make it more
107:12 - efficient then you're gonna see you're
107:14 - like oh my gosh i can i can move that i
107:17 - can move that whole thing up there i can
107:19 - indent this that i can get this step
107:21 - that if i check that at the beginning
107:24 - this happens more than anything i'm
107:26 - going to move this to the top
107:28 - those are those little bitty things
107:30 - those little things that just save that
107:33 - just save everything
107:35 - uh
107:36 - so any comparison operator returns yes
107:39 - that that's that that's what it returns
107:41 - every
107:42 - you get you get binary
107:45 - a comparison it is either true or false
107:48 - it is either now we have not talked
107:50 - about this
107:52 - then there are times so if i wanted to
107:54 - make an odd one
107:56 - there's got to be a way to do that right
107:59 - and guess what
108:01 - there is
108:03 - return
108:03 - [Music]
108:06 - x excuse me y
108:10 - 2
108:12 - let's come over here
108:14 - so 1 is equal to
108:18 - one
108:19 - is one equal to zero
108:22 - no
108:24 - is one not equal
108:25 - to zero
108:27 - if you're anything like me you're about
108:29 - to have a panic attack because i hate i
108:31 - hate true and false questions this is
108:33 - why this is about the only problem i
108:35 - really have that i have to really uh
108:39 - exclamation point zero in python it's
108:41 - exclamation point zero not equal
108:44 - not equal so one is not zero one is not
108:46 - equal to zero true
108:49 - so if it's basically if it's not zero
108:51 - it's anything else so
108:53 - keep that in mind because you can
108:56 - build a comparison that you have a
108:58 - little bit of a problem with but that's
109:00 - how we handle this so guess what that's
109:02 - how we're going to handle our
109:03 - odd we're going to do boom boom
109:06 - boom
109:07 - so that is but yes every comparison
109:10 - returns a boolean
109:16 - bingo
109:17 - that is exactly right
109:19 - why modulo 2 not equal to 0
109:22 - and that's your odd
109:25 - print
109:27 - odd
109:28 - five
109:29 - close that out
109:33 - so we got true and true so five
109:35 - five is odd
109:37 - and four is even and guess what we pass
109:40 - those in
109:41 - and there we go so all right
109:44 - let's see where we
109:47 - are today
109:50 - all right so i want to
109:54 - look
109:55 - at a nested
109:58 - loop
109:59 - because those are very cool
110:01 - and i think they teach a lot
110:04 - so let's do this
110:09 - for i in
110:12 - range
110:14 - five
110:16 - print
110:18 - i and we're also going to learn about uh
110:21 - how to suppress the new line with print
110:25 - okay
110:27 - so i want
110:30 - how could i get a square
110:36 - and i
110:36 - want
110:38 - four numbers i want four
110:41 - four columns
110:43 - five columns five rows
110:48 - so
110:49 - i got this five times
110:52 - so let's call this
110:55 - let's change it to row so we can just be
110:57 - consistent in our temporary variable and
110:58 - we can see it up in our head
111:00 - for row in
111:02 - so we gotta change this
111:04 - row so i got i have my base i'm gonna go
111:08 - down
111:09 - i'm gonna go down four times five times
111:12 - and now i wanna go over
111:15 - four times
111:17 - how do i do this
111:20 - print
111:22 - column
111:24 - in range
111:27 - 5
111:29 - print
111:31 - column
111:33 - all right let's see what this does oh
111:35 - that's not right
111:38 - okay so
111:40 - now there's a now let's look real close
111:42 - and see what print does it tells us a
111:44 - bunch of stuff doesn't it
111:46 - it does so we got
111:53 - end
111:54 - that's a new line so we need to look at
111:56 - this for a second we need to go what
111:58 - does this do
112:02 - if i print
112:04 - this
112:11 - that's actually a new line
112:13 - character in python python goes
112:16 - oh i know what that is
112:18 - it's the equivalent of
112:20 - this i want to show you
112:22 - because look right
112:24 - here
112:26 - so i'm actually telling python so this
112:28 - is automatically slapped at the end of
112:30 - every single
112:32 - print
112:33 - whatever
112:34 - print a new line so i didn't pass in
112:37 - anything
112:38 - got a new line that's why that works so
112:41 - now i'm telling python
112:44 - throw in a new line and i know
112:46 - you're going to put a new line
112:49 - at the end of it
112:51 - anyway
112:54 - all right
112:56 - so
113:01 - perfect that is exactly right
113:04 - so now if i do
113:07 - column
113:08 - end
113:10 - and i change it
113:13 - to a
113:15 - and we need to do this first we haven't
113:18 - got a blank
113:24 - that's a lot of typing to get a blank
113:29 - so
113:30 - that is
113:32 - still a string it is an empty string
113:35 - and i know it's an empty string because
113:38 - it has zero spaces i didn't press any
113:40 - keys to get anything in between it
113:43 - and
113:45 - type
113:46 - blank
113:51 - string
113:52 - so
113:53 - i'm suppressing
113:56 - this right here
113:58 - okay
113:59 - all right
114:00 - so i really don't need let's experiment
114:02 - before we get rid of anything before we
114:04 - get all crazy
114:05 - escape sequence new line tab
114:10 - uh
114:11 - it's just the character escape sequence
114:14 - escape characters that's
114:16 - let's let's delve into that because
114:18 - that's how
114:19 - you can also handle
114:23 - your where we with our
114:26 - with our single quotes and our quotes to
114:28 - have when you have a problem and
114:30 - python's saying ooh i know what you're
114:31 - doing
114:32 - yeah
114:33 - we'll get there so now let's look let's
114:35 - look at this
114:36 - so what am i doing
114:37 - okay so all right wait a minute wait a
114:39 - minute
114:40 - [Music]
114:42 - okay i'm getting i'm getting close i'm
114:43 - getting close i'm getting close i'm
114:44 - getting close all right
114:48 - now do i want a new one here is this my
114:51 - flow
114:52 - nope because that's suppressing
114:55 - that suppress i'm on the same
114:57 - indention i'm on the same instruction so
115:00 - i need to back this out let's see this
115:02 - so we can see this nice and clean and
115:04 - clear
115:06 - so i need to back this out
115:08 - one
115:10 - loop
115:11 - one loop so when i get done with that
115:13 - loop so i went from an extreme
115:15 - of
115:16 - suppressing because i want
115:20 - i want
115:21 - five rows
115:23 - of five columns
115:26 - so i went from one line this way to one
115:29 - line
115:30 - this way and i want it in between so i
115:33 - want to balance this
115:39 - so there we are i think
115:41 - this is a perfect
115:43 - stopping point
115:46 - so bo
115:47 - there there we go um
115:50 - we got four minutes left i don't want to
115:53 - start anything new but guys this was um
115:57 - super exciting i
115:59 - loved all of the good
116:01 - um
116:02 - interaction you guys you guys are
116:05 - awesome so thank you so much
116:08 - for being here and we're going to be
116:09 - doing this for this foreseeable future
116:12 - on
116:13 - tuesdays at 10
116:16 - 10 eastern
116:18 - 10 eastern time
116:20 - and we'll be moving forward
116:22 - on
116:24 - yeah
116:30 - okay
116:32 - i know what you're saying about copying
116:33 - and pasting for errors
116:37 - if you're a more seasoned
116:40 - you you lose the
116:42 - you lose the power you you lose the
116:44 - practice you lose the chance of making a
116:47 - mistake you lose
116:49 - when you make a mistake you learn so
116:51 - much
116:52 - i learned
116:53 - i
116:54 - i learned more from debugging my own
116:56 - programs from the garbage that i used to
116:58 - write
116:59 - and i don't i
117:02 - and also i i've now become a much better
117:05 - typer because i was just typing and
117:07 - typing and typing and typing and also
117:09 - you get out of
117:11 - we're running out of time let's make
117:14 - next week's
117:15 - broadcast awesome together well i
117:16 - appreciate that
117:18 - now you guys were very cool i appreciate
117:20 - all the um
117:27 - oh
117:28 - i don't know who that is
117:30 - uh object oriented uh yes we were we
117:33 - will get there i like to build to
117:36 - that um
117:38 - okay you do you see it jan yeah it's
117:40 - just
117:42 - it
117:43 - if you know you're if you don't have to
117:45 - change anything because especially okay
117:47 - i had a young man just working with
117:49 - a month or so ago
117:52 - and he moved something but then
117:54 - all of he was becoming frustrated
117:56 - because the variables changed we had a
117:58 - different function so then he started
118:01 - deleting stuff and backspacing
118:04 - and
118:04 - he lost the opportunity of learning to
118:07 - redo that function
118:09 - um reinforced learning when you're
118:12 - typing this stuff over and over and over
118:13 - again it's reinforced learning
118:15 - so and especially you're always going to
118:17 - have to change some unless it's
118:18 - completely 100 percent the same
118:22 - okay
118:23 - copy it i i get that but very rarely are
118:26 - you gonna but if you're copying the
118:27 - exact same code it should be a function
118:29 - that's also how you can know that too
118:31 - you there's no if you have to copy it
118:34 - you shouldn't need to be copying it
118:35 - anyway right
118:37 - all right does that make sense okay cool
118:39 - all right i think we're right at time uh
118:42 - bo i'm gonna go ahead and shut it down
118:45 - but i can't wait to see you guys next
118:47 - week this was super awesome
118:49 - uh super exciting for me
118:52 - i loved every second of it
118:54 - so um you guys go check out my channel
118:57 - let me know what you guys think
118:59 - and
119:00 - so you guys can go and see where we are
119:03 - uh planning on picking up next week and
119:05 - we'll just go
119:06 - keep going through that content and
119:08 - we'll be back here but uh you guys are
119:10 - awesome and hope to see you guys next
119:12 - week thanks bye-bye