00:00 - beat is a build tool and development
00:02 - server designed specifically for modern
00:04 - web development it helps with fast and
00:07 - efficient building and bundling of
00:09 - JavaScript applications hey folks my
00:12 - name is isagan I help developers to
00:14 - learn front-end Technologies you should
00:16 - also check out my Instagram where I post
00:18 - tips tricks code Snippets related to web
00:21 - Technologies so talking about learning
00:23 - objectives what we are going to learn in
00:25 - this tutorial is we will start with what
00:27 - is wheat the very Basics and then we
00:29 - will move on to why to use it what makes
00:32 - it fast and what are the reasons that
00:34 - you should pick feed as compared to any
00:36 - other front end too and then moving on
00:39 - we will learn about what are the
00:41 - features that we offer and then how to
00:43 - create a static JavaScript project using
00:45 - wheat how to initialize view react and
00:49 - sweat projects using the predefined
00:51 - templates also how to integrate teguin
00:54 - into your JavaScript and react.js
00:56 - applications how to use environment
00:58 - variables in wheat how to apply your
01:00 - wheat projects to GitHub Network file
01:03 - and Versa lastly how to configure your
01:06 - vgs projects so all of this in this just
01:09 - one single video and if you want to skip
01:12 - to a specific part for example you have
01:14 - the basic idea of it but you want to
01:16 - learn about configuration so you can
01:18 - simply jump to the configuration part
01:20 - and skip the rest of the tutorial or if
01:22 - you want to learn about deployments so
01:24 - you can jump to the deployment section
01:26 - so with that let's get started
01:29 - foreign
01:40 - wheat can be used as a replacement for
01:43 - your create react app that is because
01:45 - wheat is quick to set up it takes a few
01:48 - seconds blazing fast keyboard regardless
01:51 - of the app size support for multiple
01:53 - Frameworks such as view sweat Etc out of
01:56 - the box support for typescript jsx and
01:59 - CSS and many more features
02:06 - in terms of technical knowledge this
02:08 - course is for beginners having a greater
02:10 - understanding of Technologies such as
02:12 - create react app react View and angular
02:15 - is more than enough to use wheat you
02:18 - need to have the node version of at
02:19 - least 4.18 however this depends on the
02:22 - templates some require a higher version
02:24 - of node.js but for most of them you can
02:27 - go for 14.18 and keep in mind that this
02:30 - minimum requirement of 14.18 is at the
02:33 - time of making of this video maybe in
02:35 - the future it may change to some other
02:37 - version and another example is let's say
02:39 - we actually has used a new version and
02:41 - the minimum node requirement is version
02:44 - 15. so in that case you will need
02:46 - version 15 and not 14.18
02:53 - wheat is known for being super fast
02:55 - especially when it comes when you
02:57 - compare it with create react app that is
03:00 - because create react app will download
03:02 - many dependencies including webpack
03:04 - which takes a lot of time comparing that
03:06 - to wheat it takes a few seconds because
03:09 - wheat only makes the project structure
03:11 - to install dependencies you have to do
03:13 - npm install but the good thing is with
03:14 - wheat there are only few dependencies
03:16 - making the process quick which means no
03:19 - webpack we have seen bundle Skype
03:22 - webpack and parcel helping us with our
03:24 - projects however as our project size
03:27 - increases we notice degrees when
03:29 - spinning up our developers development
03:31 - server or hot recording that is because
03:34 - of the increasing dependencies resulting
03:36 - in the bundle doing the heavy lifting
03:39 - and taking the time to spin up servers
03:41 - all hot record them this quickly affects
03:44 - the developers productivity which makes
03:46 - very good use of the browser features
03:48 - such as the native JavaScript modules in
03:51 - the browser to skip the bundle part and
03:53 - and use the browser support to make the
03:55 - process fast to understand this more
03:57 - here is how it works in create react app
04:00 - so in this case everything is Blended
04:02 - together and served to the browser and
04:04 - by everything I mean all of the gloves
04:06 - and modules this is very time consuming
04:09 - and makes a hot recording very slow on
04:12 - the other hand when working with wheat
04:14 - only the required code is served and
04:16 - processed wheat uses the dynamic import
04:19 - and on the records the gout and modules
04:22 - that needs to be reloaded this technique
04:24 - makes wheat project fast regardless of
04:27 - the app size so now that you have the
04:29 - basic idea of what feed is what are the
04:31 - features of it and what makes it
04:33 - different or fast as compared to the
04:35 - other front and tools like create react
04:37 - app let's type into the Hands-On and see
04:40 - how can we create projects using wheat
04:43 - how can we deploy them to GitHub to
04:45 - pulsar and to notify and how can we
04:47 - configure our wheat projects
04:53 - all right let's talk about how to create
04:55 - a static server just a simple plain
04:58 - JavaScript and HTML website using read
05:01 - first thing first that we need to do is
05:03 - to add wheat in as a project dependency
05:06 - so for that what we need to do is npm
05:08 - install beat
05:16 - all right we have wheat install and if
05:18 - we go to the project.json we can see it
05:21 - here so with that let's create an
05:24 - index.html file here and add something
05:27 - here so for example hello world
05:31 - save this and now we want to start the
05:34 - server
05:35 - um so for that we need to go to
05:37 - package.json this should be
05:40 - add
05:42 - add scripts and in the scripts for now
05:46 - we only need one script that is Dev
05:48 - which stands for development so this is
05:49 - to start a development server so for
05:51 - that we will do weight Tab and that's it
05:55 - so now let's try this and for that npm
05:58 - gun Dev and over server is started so
06:02 - let's see that in the browser all right
06:04 - we have our server started and running
06:06 - and as you can see this here in the
06:09 - browser let me also open the inspect
06:11 - agreements uh and maybe console so yeah
06:16 - with that
06:18 - um so we have our server started so next
06:20 - thing is let's try to add JavaScript
06:22 - here so let me make main.js and for now
06:27 - let's simply go with console log hello
06:30 - world save that and then go back to
06:33 - index.html and then here one thing to
06:36 - keep in mind is uh to make things simple
06:38 - and to remove extra editors I am not
06:40 - adding a lot of tags that I need to do
06:42 - when I'm actually working on a project
06:44 - for example you had text body tags uh
06:47 - those HTML tags Etc that is to make
06:50 - things simple and to remove extra
06:51 - details but when you're working on an
06:53 - actual project you need to add those
06:55 - details or add those extra tags not
06:59 - extras add those compulsory tags and
07:02 - necessary tax so with that uh next thing
07:05 - is we need to add script so you know
07:07 - this that in JavaScript in in HTML if
07:10 - you want to link a Javascript file we go
07:13 - with the script so here it in the usual
07:16 - way is this main.js but we're not going
07:19 - to do it with this one and also there is
07:22 - one attribute that we need to add here
07:24 - otherwise this we do need few things
07:27 - that will not work
07:28 - um Let me let me show you that right now
07:31 - before we fix this and add that one
07:35 - attribute that we need so
07:37 - here this works right now as you can see
07:39 - Hello word but let's say that we have
07:43 - multiple files here so let's say file.js
07:45 - and we export something from this file
07:49 - um maybe an object and we call this we
07:52 - have a value inside that that is hadak
07:55 - Dev and save this so save this and then
07:58 - uh let me resize this uh a little bit so
08:02 - yeah we save this and then go to Main
08:05 - and High
08:07 - import
08:09 - file from dot slash file we save this
08:13 - and you can see cannot use import
08:15 - statement outside a module so why is
08:18 - that that is because this module import
08:21 - will not work until unless we set the
08:23 - type to module for this script and that
08:27 - is very simple and easy thing to do so
08:29 - type equals to module save this
08:32 - and now we go back to the main.js and
08:36 - add
08:37 - concert.org
08:39 - file
08:40 - and save this
08:43 - and now you can see this works so we
08:46 - have our uh we have our value equals to
08:50 - correct F so that that that
08:53 - so that type equals to module makes it
08:57 - work and another way is even if you do
09:00 - not want to go with this one there is
09:02 - also another way just to show you so
09:04 - that is import
09:07 - dot slash main.js or maybe just main.js
09:12 - uh oops yeah that will not work so Dot
09:14 - scratch main.js and now this is behaving
09:18 - the exact same way as it was when we add
09:20 - Source like this so both ways work
09:23 - um basically this portion between this
09:26 - section between the script starting in
09:29 - the ending tags this is uh about uh this
09:32 - section is for JavaScript so we can
09:35 - either add JavaScript here or we can add
09:38 - our JavaScript here so both ways work
09:41 - for but for now let me
09:45 - let me let me add it here and then
09:48 - eventually we can move out of that to
09:50 - the main and also I do not need the file
09:52 - so let me delete the file for now
09:58 - and let me also remove it from here all
10:01 - right uh so that is about how you can
10:03 - add uh how you can connect Javascript
10:05 - file with your index.html so that is
10:08 - about JavaScript and index.html but what
10:11 - about CSS so for that let's uh make
10:13 - something here with name star.css and H1
10:19 - here and then here equals to Blue uh not
10:24 - Blue Tomato for some reason I like
10:26 - tomato using in using tomato in
10:29 - tutorials and then go back to index.html
10:32 - and something we already know and been
10:35 - using this so link
10:37 - CSS and style save this
10:41 - and we can see now this is working
10:44 - if I now go to sources Nar sources if I
10:47 - go to elements and
10:50 - how about on this click on this and you
10:52 - can see the style tomato and then here
10:55 - we have star.css so this is the this is
10:58 - that style but
11:00 - yeah so this is yeah so this is uh to
11:05 - add style to add CSS to your project but
11:08 - if you have worked way to react.js you
11:11 - may know the concept of mod use like CSS
11:14 - modules and the concept of of CSS
11:17 - modules is sometimes we may have a lot
11:20 - of uh CSS classes and since we are using
11:25 - we have reusable components and uh we
11:29 - are doing a lot of imports exports Etc
11:31 - we might end up with similar classes and
11:35 - that may might give us conflict so to
11:39 - fix that we have a concept known as CSS
11:42 - modules
11:43 - um but if you know if you already know
11:45 - about that so nothing much to explain
11:46 - here and so that's the guy let's see how
11:49 - can we do that so for that style Dot
11:53 - module.css and then here I am going to
11:56 - copy the code from star.css
12:00 - paste it here save this and then go back
12:04 - to my index.html
12:07 - and then here I cannot do like this
12:10 - module dot CSS this works but this is
12:16 - not what you want
12:18 - um for example let me show you what what
12:21 - I mean by this works but this is not how
12:23 - we want it so rather than H1 we give it
12:26 - tighter we save this
12:28 - and then go back here and then give this
12:32 - class equals to Tita
12:36 - you see
12:37 - this is not working but if I go here and
12:42 - then add dot writer here save this and
12:46 - then go back to
12:47 - HTML and remove dot module and we save
12:51 - this now this works so which means that
12:53 - it works for start.css but it does not
12:55 - work for style dot module.css okay so
12:58 - why then we are using star dot module so
13:01 - let's talk about that and let's fix that
13:03 - so we will comment this code and then go
13:06 - to the JavaScript section and here
13:08 - import classes
13:11 - from
13:12 - style dot module dot CSS
13:16 - and keep in mind classes is not a
13:19 - keyword this could be anything depending
13:21 - on whatever name you want to give it to
13:23 - for example I can also give it to
13:25 - styling I can give it the name starting
13:28 - or start classes or anything anything
13:31 - works and Technical status data reserved
13:34 - keyword so with that save this
13:37 - and then do console.gov
13:41 - glasses
13:43 - and when we save this and we go to the
13:46 - console we can see this here that it has
13:51 - this object here title and this value
13:55 - here so what exactly that is so that is
13:58 - this title and here that this title
14:01 - stands for the class name and then we
14:04 - have a unique sequence and then the
14:07 - guide number so this one stands for the
14:08 - guy in the
14:09 - um to here is another example so body
14:13 - and maybe anything here because we are
14:16 - not using this
14:18 - blue save this and now here we have
14:21 - another
14:23 - value another property body that is
14:26 - equal to body the class name a unique
14:28 - sequence and then the guy number that is
14:31 - five all right and uh now the question
14:33 - is how to use it so unfortunately we
14:36 - cannot use it like this uh as you can
14:38 - already see we have that writer but this
14:41 - is not working here and like one way is
14:44 - to like for example if I refresh this
14:48 - if I keep refreshing this it's always
14:52 - um the number the unique number is I was
14:54 - same for the title
14:55 - um so one way is to like if I
14:59 - copy this
15:01 - and if I paste this here let's see if
15:03 - that works save this and yeah it worked
15:07 - but when we are making an application we
15:10 - cannot do this this is not a uh an
15:13 - applicable solution we cannot save this
15:16 - and console work the classes and then
15:18 - check for that and then copy that and
15:19 - then paste them here this is not
15:22 - something that we need uh this is not
15:24 - something that will work so what we need
15:26 - to do here is we remove the class here
15:28 - from here and we can add the class
15:30 - dynamically in using JavaScript so for
15:34 - that document dot very selector and then
15:37 - we select over H1 tag and then class
15:41 - name equals to
15:43 - classes Dot classes dot tighter
15:47 - and we save this and we have it here
15:50 - hello now if I go to the arguments if I
15:53 - go click on this you can see here we
15:57 - have that Dynamic regenerated class name
16:01 - and here we have style so if I click on
16:03 - Style
16:04 - it gives me this style which is this
16:07 - star dot module.css so that is how you
16:10 - can dynamically generate classes class
16:14 - names and then and and then add them to
16:16 - your HTML and connect them with your
16:18 - customers so of course you need a
16:19 - JavaScript for this but that is how it
16:22 - works and yeah so that is the basic idea
16:26 - or and that is a very basic server now
16:28 - we can copy all of this except for the
16:32 - first import main copy this we move this
16:36 - and then
16:38 - here we can just simply do source that
16:40 - would be main Dot
16:43 - that would be
16:45 - main.js and save this go back to console
16:49 - we have however that works perfect and
16:52 - then just simply add these two things
16:54 - and of course import should be odd at
16:56 - the top and let's just do some effecting
16:59 - all right now this is working so
17:03 - this is a very basic uh static server uh
17:06 - just a simple JavaScript HTML and
17:09 - CSS now you may be wondering if there is
17:11 - a quick way to start with this project
17:13 - like if there is a template to spend
17:15 - less time on configuration and starting
17:18 - with the ball upgrade so yes the answer
17:20 - is yes there is a template that you can
17:23 - use and let's see how we can use the
17:26 - vhci to generate something similar to
17:30 - this
17:32 - so for that let's move to the next
17:34 - section where we can talk about how can
17:36 - we use a CI to generate similar template
17:39 - without starting from scratch all right
17:42 - we have our new project here and this is
17:44 - a completely empty folder nothing here
17:46 - as you can see here and the project name
17:49 - is vinegar dot dash feed so what we need
17:52 - to do here is we type npm create weight
17:56 - and enter this now it's going to ask us
17:59 - a few questions so first thing is
18:01 - Project name so since we are already in
18:02 - the project we made up project so if I
18:05 - go with wheat project it will create a
18:06 - new product for us but what I want is I
18:09 - do not want a new folder what I want is
18:12 - to create to create the project inside
18:15 - this folder here so I will remove this
18:18 - and I will just add dot so dot means
18:21 - that it should be generated in this
18:24 - folder without creating a new folder and
18:27 - then here we have the options of which
18:29 - for which project we want to we will
18:31 - discuss some other options but for now
18:33 - we are going to we are going to go with
18:35 - vinegar and JavaScript and that's it so
18:39 - we have that same process generated here
18:41 - and first thing first that if we
18:44 - need to do is you can see we have the
18:47 - dev dependency read but there is no node
18:49 - modules so which means that if I try
18:52 - these commands this will not work as you
18:55 - can see npm1 Dev
18:57 - this does not work and the reason for
18:59 - that is we do not have the notebook use
19:01 - this problem this dependency is not
19:03 - installed so let's simply and quickly
19:05 - install this npm install
19:09 - so now if if I do it again npm gun Dev
19:13 - this will work now as you can see here
19:17 - um but if before opening this let's uh
19:20 - get a good idea of what files we have so
19:23 - index.html something we had previously
19:27 - we created from scratch and then here
19:29 - script type module Source main.js
19:31 - exactly the way that we did and then we
19:34 - have the main folder here which is like
19:36 - importing Styles
19:37 - um so it's not using the modules but
19:40 - still this we we also did something like
19:43 - this if you want to convert it to
19:44 - modules we will be doing
19:46 - um classes and then style dot module and
19:50 - then we also have to fix the name here
19:53 - in here but uh there should be four but
19:57 - for now let's not do this because you
20:00 - already got the idea so
20:02 - yeah and and if you if we have to do
20:04 - this we have to make uh multiple changes
20:06 - here so then we have the index.html and
20:10 - then we have the public folder which has
20:12 - the assets so in this case it's uh the
20:14 - SVG of the V so let's uh start server
20:17 - and let's we already have started this
20:19 - particles all right so here is the
20:21 - server and this is the server generated
20:24 - using the create other template so that
20:27 - is how you can start with your boy
20:29 - upgrade uh using the template that is
20:31 - given to us by wheat and feel free to
20:35 - make any changes depending on your
20:37 - project so that is it for this section
20:39 - uh with that let's move on to the next
20:42 - section on uh how can we skip those all
20:46 - of those questions we had that was the
20:48 - project name and uh the type Etc and if
20:53 - there is a way to quickly generate this
20:55 - project or the power create uh the
20:57 - template without going through all of
20:59 - those questions and yes there is a way
21:00 - so let's let's learn that so what we
21:03 - need to do uh is we type npm
21:07 - create
21:08 - white and then my Js app then dash dash
21:13 - template now if you're using npm 7 plus
21:17 - version 7 plus you do need some extra
21:19 - dashes here if you're using npm 6.x then
21:22 - it is fine you do not need need these
21:25 - dashes but if you are on version 7 or
21:28 - above you do need these extra dashes and
21:30 - then template and then the template
21:32 - should be vinegar
21:34 - and we have our setup here so let's open
21:38 - this and see what we have inside code
21:41 - mygs app and here you can see we have
21:43 - the exact same setup so we just skipped
21:47 - all of those questions
21:48 - similarly we we are going to talk more
21:51 - about this but if in case Cuts you want
21:54 - to go for uh make a view JS application
21:57 - so for that npm create feed my view app
22:03 - again extra dashes and then template
22:06 - View
22:08 - and let's see this so maybe just go
22:13 - inside this in the terminal and let's
22:15 - see uh we have index package.json
22:19 - Etc
22:22 - uh let's see the practice.json here and
22:25 - you can see here it has view in it so
22:28 - that is how you can use the templates
22:30 - without going through all of those
22:32 - questions by just using some extra
22:34 - arguments in the command guide
22:36 - all right now we already know about the
22:39 - template CLI commands um so let's try to
22:43 - use that for uh making a react chess
22:46 - application so for that I again have a
22:48 - new folder and a new project and that is
22:51 - a computer empty project with the name
22:53 - react.wipe react dash feed so what I
22:57 - need to do here is one way is to go with
22:59 - npm create create feed but what I will
23:05 - do here is npm create wheat Dash Dash
23:09 - and dashes template again
23:11 - notice that I've add a DOT here
23:14 - otherwise this should be like my app or
23:16 - something and then last thing here is
23:19 - let me add a DOT and then the last thing
23:22 - here is the template should be react and
23:25 - let's see yes we have the package and
23:29 - this is a react application and if I do
23:33 - npm install
23:35 - so this is the last step and once we are
23:37 - done with this we have our react
23:40 - application all set up and see how
23:44 - notice how easy it is to create a react
23:47 - application with v and like create
23:49 - reactive which takes almost a Whole
23:51 - Decade to create a basic project so we
23:55 - have this our setup and uh this will not
23:57 - work because this is from the previous
23:58 - project
23:59 - um that we created but gets Sky npmgun
24:02 - Dev and let's see what we have here and
24:05 - yeah we have our uh wheat plus react
24:09 - application so that is how simple it is
24:12 - to make over uh basic react application
24:16 - um so yeah with that uh let's move on
24:18 - towards understanding how we can
24:21 - integrate tag event uh we are going to
24:23 - first try with the simple vinegar JS
24:26 - application the static application and
24:27 - then we are going to move back to this
24:30 - project that we just created and add
24:32 - event CSS to this one as well so uh
24:35 - let's uh open that other project that we
24:38 - created previously
24:42 - so this is a web project and what we
24:45 - need to do here is uh we first need to
24:47 - start the dev server
24:49 - um so that I can refresh this and here
24:51 - you can see this so to add payment here
24:53 - what we need to do here is first thing
24:55 - first uh we will again we will stop the
24:57 - server for now clear this and then here
25:00 - we need to add a bunch of things here so
25:03 - first thing is npm install we basically
25:06 - need to install a bunch of dependencies
25:09 - um so of course Taiwan CSS and then post
25:12 - CSS and then Auto prefix
25:15 - so let's install this and once we
25:19 - install these dependencies then we need
25:21 - to do npx David CSS
25:25 - init which stands for initial guys and
25:27 - net P so this adds this
25:31 - divin.config dot CGS now we are almost
25:35 - set up uh another thing that we need to
25:38 - do is
25:39 - um so this is something you can get from
25:41 - the table and CSS website but we need to
25:45 - import the payment components uh the
25:48 - table and classes so go to this go to
25:51 - the style.css uh any of your CSS class
25:55 - and then add these tablet base
26:00 - different components
26:03 - they should replace different components
26:05 - and then they went utilities and that is
26:08 - it so now we are done with this
26:11 - um then it's almost set up so let's try
26:14 - let's let's see if this works npm gun
26:16 - Dev notice that we have a warning and
26:19 - then there was slight change in the
26:21 - structure let's see if the CSS
26:23 - components of David is working so for
26:27 - that I need to go to the main.js because
26:29 - we have something here and then get me
26:31 - Chi
26:33 - cross equals to text Dot Maybe 2xi
26:39 - and save this
26:41 - and you can see it did not work if I
26:45 - even if I go for 6xi it's not working
26:49 - um maybe I can try pg Dash black and
26:53 - text Dash white nothing works and the
26:56 - why is that
26:58 - um the reason for that is if I again
27:00 - start the server there is this warning
27:02 - the content option in your table and CSS
27:03 - configuration is missing or empty so
27:06 - let's go to the time in config so this
27:08 - content should have are the files where
27:11 - we want to apply our Styles so let's add
27:15 - that let's for now we
27:19 - have this index.html and we don't have
27:22 - anything here but we will also include
27:24 - this file so index.html
27:27 - and then for now it depends on how you
27:29 - want to use this but for now I am going
27:31 - to include all of my JavaScript files so
27:34 - uh dot slash
27:36 - stag.js and save this and the moment I
27:41 - save this you can see the change
27:42 - happened here so I have a bit with the
27:44 - background black background and white
27:46 - text and if I go back here and then if I
27:50 - change this to let's say 3xi
27:52 - this works but 6xl looks pretty good
27:56 - then we add some padding just to show
27:59 - you so PX 4 and py2
28:02 - and we can see it has spreading so yeah
28:05 - that is how it works and we have
28:08 - successfully integrated and added tape
28:10 - and CSS to a vinegar are static
28:13 - um website app so with that let's move
28:15 - on to a reactor supplication and let's
28:17 - see how we can add it there as well it's
28:20 - it's almost exactly the same but let's
28:23 - see how we can do that all right back to
28:26 - react.js application created with wheat
28:29 - um npm1 Dev and refresh this and we have
28:33 - this uh so let's see how we can
28:35 - integrate turbine into this so for that
28:38 - again I'm going to stop the server for
28:40 - now and then again install all those
28:42 - packages so they went CSS post CSS and
28:47 - auto we fix it it's a side thing a side
28:51 - note uh this this documentation is
28:54 - already available on the table and CSS
28:56 - official website so you can also check
28:59 - it out from there as well and then we
29:01 - have this installed so let's also go
29:02 - with Degen CSS init Dash p which we
29:06 - install the tavin config file here and
29:10 - again we need to add our
29:13 - configuration we need to and again we
29:16 - need to add the files that we want to be
29:19 - included for the classes so here it's
29:23 - going to be index.html and then another
29:26 - one is going to be Source forward slash
29:30 - extract and then static Dot
29:33 - Dot and then we have to include multiple
29:37 - extensions here so that is JS DS jsx and
29:42 - TSX
29:44 - depending on what extensions we are
29:46 - using so this one is all about GSX so we
29:50 - can remove typescript extensions
29:53 - and even to be more specific we can also
29:55 - just include
29:57 - dot jsx but it depends on how what are
30:01 - what are the extensions you're using but
30:03 - this basically means that go to the
30:04 - source and then maybe something that
30:08 - exists here or maybe something that
30:09 - exists in a file and then Dot GSX uh
30:14 - static jsx means that anything dot TSX
30:17 - so that encodes app.jsx as well as
30:20 - main.jsx so with that let's uh
30:23 - uh yeah one more thing that we need to
30:25 - do is to import the classes for uh the
30:29 - index dot to to the index.css so
30:33 - go to the index.css and then again tag
30:37 - event
30:38 - base
30:41 - components and then the event utilities
30:46 - and that is it save this and now let's
30:49 - start the server and be I'm going to Dev
30:54 - we see the change in the in the images
30:58 - so that means that something happened
31:00 - here
31:01 - um we have no utility classes were
31:03 - detected in your source file so let's
31:06 - see a what exactly is happening here
31:10 - uh
31:11 - yeah this should be the Google practical
31:14 - entertainment so in wagon so maybe let's
31:16 - fix this
31:19 - and that is what it wants us to do stop
31:22 - the server start it again
31:27 - let's see if this work if it does not
31:30 - then maybe we can just remove this one
31:32 - so maybe add it here
31:35 - um again for the H1 BG dash pack let's
31:39 - see if it works yep it is working
31:42 - so yeah
31:43 - text white and text Dash
31:48 - 6xl or maybe 5xl
31:52 - and yep that is how we can add our HTML
31:56 - classes
31:57 - um and and yep that is how we can add
32:00 - our different classes and maybe I can go
32:02 - to my index.css uh maybe yeah so we move
32:07 - the
32:08 - padding
32:10 - so I maybe remove all of these values
32:13 - and we have we can then just go with
32:15 - different classes but that is how it
32:18 - works
32:19 - um and then that other warning you can
32:21 - ignore that for now so yep that is how
32:23 - you can integrate CSS into your react
32:26 - yes application so with that let's move
32:28 - on towards the next section
32:34 - all right let's understand how
32:36 - environment forgiveness Works in wheat
32:38 - and to do so let's first understand the
32:41 - theory behind it in wheat there are
32:43 - multiple environment variables and fast
32:45 - for example a simple dot EnV file loads
32:47 - in all cases and uh dot EnV dot local
32:50 - also goes in all cases but is ignored by
32:54 - git
32:55 - simulator.env dot mode on records in a
32:58 - specific mode in this case the mode
33:00 - stands for development of production and
33:02 - r dot
33:03 - env.mod.co also loads in a specific mode
33:07 - but is ignored by git so let's see that
33:09 - in action so for example we create this
33:12 - new file dot EnV now this file is the
33:15 - file that environment variables that we
33:17 - have in this file we got in all cases
33:19 - for example if I type something here and
33:23 - also to keep in mind that whenever you
33:25 - are adding an environment variables you
33:28 - need to have a prefix that is white
33:30 - underscore test otherwise this will not
33:32 - work I will give you unexpected issues
33:35 - the next thing is we have this another
33:37 - environment for you by that is env.goker
33:40 - there is not much difference between
33:42 - this dot EnV and Dot EnV local except
33:45 - the except that this dot env.hoker will
33:48 - be ignored by gate 4. so for example if
33:51 - you have some sensitive data let's say
33:53 - some API key or something similar so you
33:55 - can add all of that here for example
33:58 - here we can add DB name and then some
34:01 - something here and then under white and
34:05 - wheat and score DB pass and then also
34:08 - add something here password
34:12 - and save this
34:13 - now the question is how can we use this
34:16 - in uh in our JavaScript for example if
34:20 - you use node.js so it's in node.js it's
34:22 - something like this node underscore
34:24 - process underscore node underscore EnV
34:28 - but in case of Feed the way to use it is
34:32 - import dot meta dot EnV and if I save
34:37 - this and I go back to my console and in
34:40 - the console I can see these things here
34:43 - so let me resize my window I'll get a
34:46 - bit
34:48 - so here I can see uh we test as run and
34:52 - then wheat DB name something and we DB
34:55 - uh pass something now and I also have
34:58 - some other variables that is Dev Mode
35:01 - God
35:02 - Etc
35:03 - um let's talk about that in a second but
35:05 - in this case if I commit this and push
35:08 - this to GitHub this we test wheat
35:10 - underscore test will be sent to GitHub
35:12 - and committed by kit but the wheat
35:16 - underscore DB name and wheat underscore
35:18 - DP password big no because that exists
35:20 - in this env.worker let's talk about
35:23 - these Dev mode dot SSR Etc so these are
35:26 - some properties and we can use that to
35:29 - get an idea for example if I want to see
35:31 - that if this is a development server or
35:33 - a production server and based on that
35:35 - decision we want to make some decision
35:37 - so we can do something like this so
35:39 - let's say we do console log
35:41 - solo
35:43 - is running in and then import dot meta
35:48 - dot EnV dot mode
35:51 - I believe this is mode uh yes but this
35:55 - should be
35:56 - mode
35:58 - and save this so you can see Server is
36:00 - getting in development similarly we can
36:02 - also do something like if
36:04 - if you want to let's say check that if
36:07 - based on like the mode we want to make a
36:09 - specific decision if it's in development
36:11 - server we have a specific scenario and
36:14 - we want to make a specific decision and
36:16 - if it's a production server we want to
36:18 - make another specific decision so for
36:20 - that case import dot meta dot EnV Dot
36:25 - Dev
36:27 - and then console.org
36:32 - this is Dev server
36:35 - and also let me do console log
36:38 - import dot meta dot EnV and save this so
36:43 - like you can see this here this is Dev
36:45 - server that is because this is two
36:47 - because we are in the dev server open
36:49 - this and in this case Dev is to go
36:52 - because we are using wheat Dev if we do
36:54 - weed build so that will be production
36:57 - and then in that case mode will be
36:58 - production and this period will be true
37:01 - and this one will be fast so these are
37:03 - exactly opposite when Dev is to God is
37:06 - false and when God is 2 Dev is fast
37:09 - um so similarly the base URL is the base
37:10 - UI in SSR stands for server side again
37:13 - so this is pretty simple now let's move
37:16 - on to another example
37:18 - um so let's say we have EnV Dot plot dot
37:23 - dot local
37:26 - and this should be dot EnV and let's say
37:30 - that let me see why this did not work
37:34 - EnV dot dot
37:36 - dot okay
37:39 - so maybe we can change this for now for
37:42 - testing uh we can change this to dot Dev
37:46 - and let's see this so white underscore
37:49 - sum underscore key equals to uscon and
37:54 - let's test this now so if I open this
37:58 - do we have it
38:00 - do we have it nope we don't have it
38:02 - let's remove this and then check this
38:06 - again all right um this is probably
38:08 - because we are writing it wrong so this
38:10 - should be in V Dot development and let's
38:13 - see this again
38:17 - and now we have it white underscore read
38:20 - underscore sum underscore key equals and
38:22 - similarly if I change this to
38:26 - dot local and then save this again
38:30 - refresh this this also still works we
38:34 - didn't score some underscore key equals
38:36 - to run now if I change this to
38:39 - production
38:42 - and close all of these messages and save
38:45 - this now in this case
38:48 - we still don't have anything that is
38:50 - because this will work for the
38:51 - production but this does not work for
38:53 - environment figures and it's uh to get
38:56 - these values it's the same as
38:58 - import.meter.env and underscore
39:00 - something so maybe change it here dot uh
39:06 - read underscore sum underscore key but
39:08 - this will not work for production so
39:10 - let's revert it back to development and
39:14 - once we save this we flash this we have
39:18 - some key here we have a second here uh
39:21 - that is the value of v d underscore sum
39:23 - underscore key so the the way to get it
39:26 - is the same as the way to get anything
39:28 - from dot EnV the only difference is the
39:31 - file name so that is how it works for uh
39:34 - the different modes now talking about
39:35 - learning priorities in EnV variable for
39:37 - a specific mode takes a higher priority
39:40 - than a generic one so to show you that
39:42 - for example we have this here and I'll
39:44 - copy this and do this again here but in
39:48 - this case I change the Swagger to
39:50 - haddock and save this now let's see what
39:54 - we get here we still get S1 that is
39:55 - because this one will take and has
39:58 - higher priority as compared to this one
40:00 - or this one because this is more
40:02 - specific so the more specific will give
40:04 - us takes higher priority than the
40:06 - generic ones moreover uh variables added
40:09 - the script have the highest priority for
40:11 - example if I go to my package.json and
40:15 - then here I type something let's say
40:17 - white we again go with the same key
40:19 - white underscore sum underscore key and
40:23 - set this to uh attack Dev and save this
40:29 - and stop the server start it again so
40:32 - let's see what we get there so now we
40:34 - get product F that is because this one
40:36 - has the highest priority and then the
40:38 - more specific environment variable
40:40 - sketch the higher priority and then the
40:43 - US priority is for these generic
40:45 - environment variables so that is how you
40:47 - can use environment variables in wheat
40:49 - and all of the different modes and how
40:51 - of the different priorities for the
40:54 - variables in wheat so with that let's
40:56 - move on to what's the next section
41:01 - alright folks let's talk about how to
41:03 - deploy our applications and in this
41:05 - section we are going to talk about how
41:07 - to deploy it to GitHub how to deploy it
41:09 - to netifi and also how to deploy it to
41:11 - versa so let's start with GitHub the
41:14 - first thing that you need to do is you
41:15 - need to have a project and in this case
41:17 - I again created a new template and this
41:19 - is a vanaga JavaScript template which
41:21 - means that this is a static website so
41:24 - first thing first I am going to do is I
41:26 - will do npm install to install other
41:28 - repositories other dependencies and once
41:31 - we are done with this uh before we move
41:33 - on towards deployment section there is
41:35 - one thing I want to talk about and that
41:38 - is how to make a build so for that what
41:41 - you need to do is
41:43 - if I go to package.json there you can
41:45 - see there is a build and a preview
41:47 - command so bit stands for making the
41:49 - production version so if I do npm build
41:51 - you can see a desk folder so uh if I
41:55 - want to check this so what I need to do
41:57 - is I want to I need to do npm gun
42:00 - preview and this will start the server
42:02 - for us so if I open this you can see
42:05 - this server and you can see this website
42:07 - um something we already know and we did
42:09 - this before so let's get back and one
42:12 - other thing is let's say I do not want
42:14 - this
42:15 - 44173 port so what I can do here is I
42:18 - can give it a custom Port that is port
42:20 - 8080 save this and then again do npm1
42:24 - preview and this will give us the Goku
42:27 - host with 8080 so uh that is how to test
42:30 - it so once you're done with testing your
42:32 - website locally testing in the build
42:34 - version then the next part is to deploy
42:36 - it on GitHub pages so for that what I
42:38 - need to do is I have to make a GitHub
42:40 - reposit and for that I will go to my
42:42 - GitHub and there create a new repository
42:44 - here so maybe go here and then click on
42:48 - new Repository
42:49 - and then I will name this wheat GitHub
42:52 - and select myself here nothing to do
42:55 - here and then click on create capacity
42:57 - so we have a simple repository what I
43:00 - need next is I need to push out the code
43:02 - to GitHub this is pretty simple these
43:04 - are pretty simple steps you already know
43:06 - this I assume so I'll clear the console
43:08 - and then initialize git and then add all
43:11 - of these and then last thing is
43:14 - initial commit
43:16 - all right now the thing is
43:18 - if this was uh so in this case this is
43:22 - going to be wheat GitHub but uh which
43:25 - means that this is going to be
43:26 - eventually uh
43:29 - dot attack dot GitHub dot IO forward
43:32 - slash wheat Dash GitHub so this will be
43:36 - our repository
43:37 - um this will be our depart website but
43:40 - if this was not the case and we had
43:42 - something like this
43:44 - product.dev.github.io which means that
43:46 - this capacity was named as productive so
43:49 - in that case we do not need to do
43:50 - anything but in this case this is going
43:52 - to be uh V Dash GitHub so that is the
43:55 - repository name so for that we need to
43:57 - also change our path so that when it
43:59 - uploads and when we deploy the server
44:00 - when you deploy the website it is
44:03 - zipcard at it is deployed in we Dash
44:07 - GitHub so for that what we need to do is
44:09 - to have wheat config file so that is
44:12 - feed Dot config.js and then here I need
44:16 - to do Define config here and then export
44:20 - default Define config
44:24 - this is a function and then this
44:25 - function accepts uh object so objects so
44:29 - first thing here is base so base stands
44:32 - for the base path where this path will
44:34 - be so in this case by default the base
44:37 - path is this which means that nothing uh
44:41 - just a simple scratch so the reason uh
44:44 - that you do not need to modify it if if
44:47 - this is forward sketch product Dev so
44:50 - that will be eventually this one hotel
44:52 - dev.github.io so nothing here and that
44:55 - is the default part but in this case it
44:57 - is going to be wheat Dash GitHub so
44:59 - which means that we have to modify our
45:00 - base path
45:02 - to make sure that everything work so
45:04 - what I need to do is this should be read
45:06 - GitHub and also have forward slash so
45:09 - save this and if I now again do npm1
45:12 - build and let's see this so npm1 preview
45:16 - and now you can see this that the path
45:18 - is totally different so it's sweet
45:20 - GitHub so let's go there now here is the
45:22 - problem uh we have the JavaScript logo
45:24 - working but the wheat Coco is not
45:26 - working so a quick fix for this is and
45:29 - this is something to keep in mind when
45:31 - you have in a different path and so this
45:34 - currently it has aggregate of path and
45:37 - this will not work because the reason
45:38 - for this is this is if I click on this
45:41 - and open this in a new tab this is
45:43 - basically not using wheat Dash GitHub
45:46 - here so the issue here is the long path
45:48 - and the fix for this is if I do V Dash
45:50 - GitHub and then forward scratch now this
45:53 - works so to fix this what we can do is
45:55 - we can make this an absolute path like
45:57 - this and save this we start with server
46:00 - uh make the build again and then again
46:03 - do preview
46:05 - and let's see this now so now this works
46:07 - so that is to keep in mind that it
46:09 - should be absolute path not the greater
46:12 - path and the reason that JavaScript Coco
46:14 - works is that because we are using
46:15 - import here we just tested our build
46:17 - version locally so everything works good
46:19 - so let's stop this
46:22 - get add and then we just updated the
46:24 - path
46:25 - rated path and then get push origin Main
46:30 - uh get push origin mean
46:35 - whoops get push origin mean yeah this is
46:38 - because
46:39 - we did not copy this
46:42 - so we have to set this and then get
46:44 - personal reason Main
46:48 - now let's go back here refresh this
46:52 - and we have our project here so let's uh
46:55 - talk about how can we now make a GitHub
46:58 - page here so go to settings and then go
47:00 - to pages
47:02 - and then here we are going to go with
47:05 - GitHub actions
47:06 - and here in this case since this is a
47:10 - static HTML file so we will go with this
47:13 - option static HTML configure now here
47:15 - are we have to do a couple of things
47:17 - here and if in case you forget this you
47:19 - can always get this in the whatever
47:21 - changes I'm making you can always get
47:23 - this from read documentation but what we
47:25 - need to do here is uh this is just
47:27 - setting pages and uploading artifacts
47:30 - and all those things but the thing here
47:32 - is this is a wheat project which means
47:35 - that there are some dependencies if this
47:37 - was a simple HTML project then we do not
47:40 - need to make any changes here but this
47:41 - is a wheat project and it has some
47:43 - configuration basically npm install and
47:46 - read build and read preview that you can
47:49 - see here so we need to add these things
47:52 - so for that what we need to do is
47:54 - let me Zoom this a bit so that we can
47:57 - see this maybe just a little bit more
47:59 - and
48:01 - yeah so what we need to do here is we
48:03 - need to add a few more actions here so
48:07 - steps here so for that I will add a new
48:10 - name and this one is going to be set up
48:13 - node
48:15 - and then here it is going to be uses
48:18 - actions forward slash setup Dash node at
48:23 - V3 and then the next thing is with that
48:27 - so the width basically means that with
48:29 - which node version I want it to be so
48:32 - this is going to be 18 and then cash
48:35 - equals to this one is npm then the next
48:39 - thing is we have
48:41 - install dependencies so once we set up
48:44 - our node version we need to install
48:45 - dependencies
48:48 - and the command for this is npm install
48:51 - and then once we install dependencies so
48:53 - something we already did in our local
48:55 - server so then the next thing is we need
48:58 - to build the dependencies build the
48:59 - project so this one is going to be build
49:02 - project uh a bit so the name is
49:05 - basically the action name what a step
49:07 - name what we are doing and it could be
49:09 - anything it's up to you how you define
49:11 - it and then this one is Run npm Gun
49:15 - build and I believe that is it so yeah
49:18 - we need to build it and then we need to
49:19 - set up Pages Etc now one other thing is
49:22 - if I go back to the server uh if I go
49:24 - back to the visual studio code when we
49:26 - do npm gun bid it makes the project in
49:29 - the dist folder so we need to also
49:31 - change that here so upload entire
49:33 - apostrophe path is going to be forward
49:36 - slash dist and that's it so that we save
49:39 - this
49:40 - we don't do anything here because this
49:42 - is just a test file and save this and
49:45 - then go to actions
49:48 - and here we have the action so let's go
49:50 - there and let's see what's happening and
49:52 - click on deploy
49:56 - it's gonna take a few seconds
49:58 - so I will fast forward this
50:01 - all right it looks like something is not
50:03 - working and let's see that so setup node
50:05 - unable to find node version 18 comma for
50:08 - platform index now I know what the
50:10 - problem is so we made a small mistake
50:12 - here so let's go back to the GitHub
50:14 - actions workflow and then static.yaml
50:17 - and the problem here is let me edit this
50:20 - the problem here is this is not no 18
50:22 - comma this is just 18 otherwise it will
50:25 - create it as 18 comma and that is not
50:28 - what we what version we want so save
50:30 - this and then let's go back to GitHub
50:33 - actions update static.camwell and then
50:36 - click on deploy and let's wait for this
50:40 - all right the deploy has been successful
50:42 - so let's go back to the actions and
50:44 - click on this update actions and then
50:47 - click on this link and here we can see
50:50 - our web page and this is successfully
50:52 - working and we also have the wheat
50:54 - Google as well as the JavaScript that is
50:56 - how you can deploy your wheat
50:57 - application to GitHub using GitHub
50:59 - actions and GitHub pages so now let's
51:01 - move on towards the net KFI version all
51:04 - right let's talk about how to deploy our
51:05 - code to network I just like we did it on
51:07 - GitHub and for this I made a new project
51:09 - and this is again uh and this is again a
51:12 - template and a static JavaScript project
51:15 - so for that what we need to do first is
51:18 - I have to install I have to initialize
51:21 - git and I have to commit all those files
51:24 - so initial guys uh I may be initial
51:28 - commit
51:29 - and whoops I have to put codes all right
51:33 - with that let me go to my GitHub and uh
51:37 - make a new Repository I will call this
51:42 - uh no template product Dev and this is
51:45 - named as Network
51:48 - let me see what name I have here so this
51:52 - is sweet net cafe so wheat Dash net cafe
51:55 - and create repository all right copy
51:58 - this and simply push the code so this is
52:02 - get
52:04 - not get just paste this and then get
52:07 - push origin Main
52:09 - all right so we simply post the code so
52:13 - this was the very simple step we press
52:14 - the page and we can see things here all
52:17 - right so for the next thing what we need
52:19 - to do is uh we need to add we need to
52:22 - add net file CLI this is the npm package
52:26 - that we need let me Zoom this bit so
52:29 - this is the package that we need and I
52:31 - think I have already installed this but
52:33 - let me try installing this again so and
52:35 - and keep in mind that you have to
52:37 - install this um I'm going to install
52:39 - this with Dash G which means that it's a
52:42 - globally installed so I can access this
52:44 - anywhere so for that it's npm install
52:48 - Network
52:49 - C and this might not work so I am gonna
52:53 - do with sudo command and I will add my
52:56 - password
52:57 - and this will install this so let's uh
53:00 - wait for the installation and once
53:02 - installation completes it can move on
53:05 - with the next steps all right it is
53:08 - installed so let's try Netflix I
53:11 - init but before that what you need to do
53:14 - is you need to do Network file login
53:17 - um if I just do Network I
53:19 - it will probably give us commands so
53:23 - it's going I will have to do sudo notify
53:26 - because I installed this using sudo so
53:28 - yeah it gives us other commands that we
53:31 - can use so first thing first is that you
53:33 - need to use Network file login so that
53:36 - it can log into your account and for
53:38 - that it will open the browser for you
53:40 - and you have to login your account I
53:42 - think I since I already installed this
53:44 - so I am already logged in so I am not
53:47 - going to do that step but I will go with
53:50 - netify init which will initialize
53:52 - Network app project here so connect this
53:56 - with uh to a new to an existing
53:58 - rectifier directory Network site nope
54:01 - create and configure new set yes because
54:03 - I want to create a new set
54:04 - um so in my network file this is my team
54:07 - and site name so I'm gonna give this
54:10 - blank so that Network generates its own
54:13 - domain and and the link for me and that
54:15 - will be line up so select that uh
54:17 - nothing here and create it so
54:21 - um yeah we have these links here we can
54:24 - see that but let's first finish the
54:26 - setup your bit commands
54:28 - um so by default it's going to be read
54:30 - built and yeah that is that is exactly
54:32 - what you want uh depart to the current
54:34 - directory dist so yeah that will be test
54:38 - and
54:40 - known that if I detected what you like
54:42 - one just simply yes and which means that
54:45 - we don't need to make any changes here
54:46 - to keep things simple we have it so
54:50 - let's uh go back and let me go to
54:52 - network.com and login here
54:58 - and let's see what we have it so uh if I
55:02 - move back we have so you can see here
55:05 - site created and the URL is this
55:07 - adorable style guides if I open this
55:11 - I can see Hello wheat and this is
55:14 - perfectly working everything is working
55:15 - and if I go back to my uh
55:19 - if I go back to my Netflix I can see
55:21 - that here adorable guides and you can
55:24 - see ghost published was 11 21 so yeah
55:28 - which means that we have successfully
55:30 - deployed our application to network file
55:32 - and this is very simple as compared to
55:35 - uh GitHub using GitHub actions and
55:38 - GitHub pages so yeah our website is live
55:40 - and here it is uh if you want you can
55:43 - also change the domain for this one and
55:45 - for that you need to go to The Domain
55:46 - settings and add your domain here but
55:49 - that's out of the scope of this so we
55:51 - are not gonna do any changes here and if
55:53 - I go to site settings and then if I go
55:55 - for build and deploy you can see
55:57 - currently policy this is the capacity
56:00 - that we have in this one and another
56:02 - thing is uh build command is wheat build
56:05 - purpose directory is dist and or
56:07 - production branch is me now one another
56:10 - good thing is if I make any changes here
56:12 - if I push any let me Zoom this a bit if
56:15 - I push anything to my GitHub repost key
56:18 - to we destined foreign
56:21 - get up actions for me and it will update
56:25 - um it will update this for me so which
56:27 - means that I do not need to manually
56:28 - update this just like we had in GitHub
56:33 - action so every time we make any changes
56:35 - the GitHub actions guns and it updates
56:38 - our website for us so similarly in net
56:40 - profile as well it will update us it
56:42 - will update it so yeah that is how we
56:45 - can deploy our application to net
56:46 - profile we can deploy our wheat
56:48 - application to network with that let's
56:50 - move on to Virtual and let's see how can
56:53 - we
56:54 - our project to us all right again
56:57 - another new apostrophe and another new
56:59 - project that is static static JavaScript
57:02 - so uh I am again going to repeat those
57:05 - same steps that is get in it and then
57:08 - commit this and then push this code so
57:10 - this will be initiate commit I am fast
57:13 - forwarding this because we already just
57:15 - did this twice um so let me create the
57:20 - browser so be it Versa and create the
57:23 - capacity and then copy this and then
57:26 - push the code so get push origin mean
57:30 - all right we just pushed the code and if
57:33 - I refresh this uh we have the code here
57:36 - so with that uh what we need to do is uh
57:39 - we for the previous Network example we
57:41 - installed Network file that was 95-ci
57:43 - but for this I am going to install Voice
57:46 - um and that is like this uh net KFI npm
57:50 - install Versa G and I think I have
57:53 - already installed this but let's try
57:55 - this again and probably this will not
57:56 - work because I have to do this with sudo
57:58 - but let's see if this is installed or
58:03 - does this work okay so this is not
58:05 - working and that is because I have to
58:07 - give sudo here um so let me I think I
58:10 - already have installed this but let me
58:12 - just do this again so I will add my
58:14 - password here and get me then fast
58:17 - forward the video all right now what we
58:19 - need to do next is we just simply do
58:21 - sudo versus and set up and deploy yes we
58:26 - have to deploy this so this is the path
58:27 - uh
58:30 - and yes this is y and then which scope
58:34 - do you want to deploy it to contact f
58:37 - going to an existing project nope I want
58:40 - a new project what's your
58:42 - [Music]
58:43 - what's your project name wheat person
58:46 - and in which directory is your code
58:49 - located so this is the current directory
58:50 - so I will not add anything here setting
58:53 - up your project
59:01 - all right I want to modify these
59:03 - settings nope because these settings
59:05 - looks pretty good because output
59:06 - directory is disk yep install commands
59:09 - npm install deployment we test a spot
59:11 - part and bid command feedback so yeah
59:13 - all things go good no
59:16 - all right it created this get ignore and
59:19 - as well as this sourcer and we have the
59:22 - production here and get let's click on
59:25 - this open this
59:27 - and we can see our web page so with that
59:31 - let me go to versa
59:34 - and let's see if we have our website
59:37 - there so Versa and then here we have it
59:40 - so this is the website if I go back and
59:43 - here we can see the website waitverse if
59:46 - I click on this and here this is
59:50 - if I go back
59:52 - um this is the link read Versa and
59:56 - here to confirm this we have V Dash
59:59 - versus
60:00 - dot app and this is the same link meet
60:03 - Dash versus DOT log dash dot Versa dot
60:07 - app so yeah that is the same thing and
60:10 - this was created one minute ago by me so
60:13 - so that is how to deploy your website to
60:15 - Versa and uh pretty simple pretty easy
60:18 - and very straightforward so that was
60:21 - about uh deployment
60:25 - all right so by now we have covered a
60:28 - lot of things that includes how to start
60:29 - your server how to make your projects
60:31 - and what exactly is feed and how to
60:35 - deploy your projects and a lot of many
60:37 - things but there is one other important
60:39 - thing that is configuration so we are
60:42 - going to talk about how to configure
60:43 - your wheat project I have again made a
60:45 - new content and uh first thing first I
60:48 - am going to install all the dependencies
60:50 - and again this is a static JavaScript
60:52 - project and I am using that project I
60:54 - chose that project to make things simple
60:56 - so no reactors few JS Etc so I installed
61:00 - my packages and if I do npm um oops not
61:04 - npm install if I do npm Dev it starts
61:07 - the server for me and yeah everything is
61:09 - working so I clear this and I stop the
61:13 - server and clear this all right
61:15 - um so to con so to add configuration
61:18 - what you need to do is you need to
61:20 - activate a new file and with the name
61:22 - feed dot config dot Js
61:26 - and um maybe I can zoom in
61:29 - um and yeah so let me
61:33 - let me size some windows okay so this is
61:36 - the in empty file and this is the
61:39 - configuration file and other
61:40 - configurations should be in this file so
61:43 - what we need to do here is the very
61:45 - simple and the most basic config should
61:48 - be export default and course and uh that
61:54 - is a start course attacks brackets and
61:57 - if I save this and if I do npm1 Dev
62:00 - everything works and this is uh
62:03 - technically this is uh similar to not
62:06 - having this file at all because there is
62:08 - no configuration at all right now and
62:12 - and if I and if we move back to the
62:16 - deployment specifically the GitHub
62:19 - deployment using GitHub Pages we talked
62:22 - about base and we talked about how to
62:25 - deploy our project when the path is not
62:29 - just the username dot github.io but
62:32 - username.github.io forward slash
62:34 - repository name so in that case what we
62:36 - did was we added a base URL we added
62:40 - base so in that case if you remember we
62:43 - used uh something that is known as
62:46 - Define config so but if in case you do
62:50 - not want to go with that and I am going
62:51 - to also talk about that
62:53 - why we use that there are what is the
62:55 - difference between that and this one the
62:57 - basic one so we can also use base for
63:00 - example I add base and I do wheat and
63:03 - save this and then clear the console and
63:06 - then again do npm1 tab so notice here we
63:09 - have working host 5173 and then read so
63:12 - wheat is now the base path and that is
63:14 - because we change the base so which
63:16 - means that it works it's it works
63:19 - exactly the same way but I am will stop
63:22 - the Server create the screen close this
63:26 - and all right
63:29 - um so close this and this and I'm going
63:32 - to remove this and rather than this what
63:35 - I will do is I will use import Define
63:38 - config from wheat and then export
63:41 - default
63:43 - Define config
63:46 - and brackets and then again brackets and
63:49 - then here if I type base
63:52 - I can see Visual Studio code giving me
63:55 - suggestions so the reason are the point
63:59 - of using Define config are comparing
64:03 - this Define config with the most basic
64:05 - config which was export default
64:09 - and default and this so writing it like
64:13 - this
64:14 - um
64:14 - it should be wheat so getting it like
64:17 - this or getting it like this this is
64:21 - both of these does the similar job the
64:23 - difference is
64:25 - in this basic we do not get any
64:27 - Integrations
64:30 - so if I type base nothing nothing
64:32 - happens the space is because we already
64:34 - declared it once but in this case if I
64:38 - don't have the base and I type Bas it
64:40 - gives me the base and also helps me with
64:44 - the what exactly is the base so it is
64:46 - base public path when server and
64:48 - deployment and development of production
64:50 - and then it can be a string or it can be
64:53 - undefined so if I now again do chords
64:56 - and then wait save this and then again
64:59 - npm1 def I can see 5.73 forward slash
65:03 - feed so stop this Server create a screen
65:05 - and uh
65:07 - minimize this so which means that it the
65:10 - difference here is with defined config
65:12 - things get pretty much easy uh things
65:15 - get super easy because we have the
65:17 - integrisens giving us
65:19 - giving us suggestions
65:21 - all right so uh which means that um in
65:24 - this case we uh in this tutorial we are
65:26 - going to use the Define config but feel
65:28 - free to go with the other uh basic
65:30 - configuration as well it's totally up to
65:33 - you all right so uh we already discussed
65:35 - base and um base is something that you
65:37 - already know um and if in case you have
65:40 - skipped that part and you're just
65:41 - watching this video for configuration so
65:43 - base is basically for if in case you do
65:46 - not want your file uh your project to be
65:48 - hosted on the main on the home page
65:51 - which means like localhost 3000 I'll go
65:54 - okay host 5173 and you want it to be
65:56 - hosted on at say Google host with 3000
65:59 - forward slash feed so in that case the
66:01 - base should be wheat okay so that is the
66:04 - base now with that
66:06 - um maybe you want to do something some
66:08 - configuration uh some specific things in
66:12 - your development server
66:14 - um so let's say you want your project to
66:17 - be if it is going in development if it
66:20 - is going to production then you want the
66:23 - base to be wheat but if it is in
66:24 - development in in Dev mode you do not
66:28 - want the base path
66:29 - um so you can also do that and for that
66:33 - what we can do here is I will remove
66:36 - this and then uh what I am going to do
66:39 - here is I will again
66:40 - um add make this more like a function
66:43 - and then here uh this accepts uh an
66:46 - argument and a single argument which is
66:49 - basically an object and then that object
66:51 - has
66:53 - um consists of three properties command
66:55 - mode and SSR bid now all of these
66:58 - consist in one argument but I
67:01 - desstructured that here in this object
67:03 - so uh we can get all of these here so if
67:07 - I do console log command mode SSI bit so
67:11 - let's see what it gives and then I can
67:13 - talk about uh what exactly it is and how
67:17 - to how to use and this will not work so
67:19 - if I if I do the npm grandf this would
67:21 - probably not work yes this will not work
67:23 - and that is because now we converted
67:25 - this into a function and it must
67:27 - obviously done something so what we can
67:29 - do is we can just for now we can return
67:31 - an empty object and then clear the
67:34 - screen and then again npm gun Def and
67:36 - this should work now so let's open this
67:39 - and with that we have this and let's see
67:41 - what do we have in if I go to inspect
67:44 - and maybe I can dock it or attach it to
67:47 - the bottom and then go to console
67:50 - refresh this uh nothing happens here
67:54 - that is because this is not going to
67:57 - appear on the website this is going to
67:59 - appear here
68:00 - in the terminal and that is because this
68:04 - is the configuration this is not the
68:06 - main.js that appears or that is rendered
68:09 - on in in the browser so what we have
68:11 - here command mode SSI bit so the command
68:13 - itself mode is development and SSI build
68:17 - as far so what does self mean so self
68:20 - stands for Dev mode a development server
68:23 - and build stands for production so if
68:27 - this command is saved so that means that
68:30 - this is a Dev mode and if this is built
68:34 - then that means that this is production
68:35 - maybe we can check that as well but that
68:39 - is the general idea so the mode is for
68:41 - now development and that makes sense if
68:43 - this is if we change this and go to
68:46 - window production so this will change
68:48 - and then SSI bit stands for server side
68:50 - grinding um
68:52 - and as of now in version 3 this is an
68:55 - experiment uh property so with that
68:58 - let's drop the server let's see what
69:00 - happens when I do npm1 build
69:04 - and do we have anything here uh yes so
69:08 - now you can see this is build command
69:09 - turns into build and more turns into
69:12 - production and SSI again is fast and
69:14 - let's see now npm gun preview what we
69:17 - get here again self uh because that is
69:20 - now again in a development mode uh we
69:22 - are just trying to uh see the
69:26 - development uh so we have the production
69:28 - version yet anyway just
69:30 - doing the preview so that is why this
69:32 - itself because we are in the dev board
69:34 - uh we are in the dev and production
69:38 - because this is the production version
69:40 - and then again SSR is false
69:43 - so with that uh now that you have the
69:45 - basic out of these properties
69:47 - um what happens if I
69:51 - if I do so what we can do about the base
69:53 - part so let's say
69:55 - um I can do is if not maybe command if
70:00 - mode equals to so what modes we have one
70:03 - is uh
70:04 - so one more that we have here is
70:07 - production and the other one is document
70:09 - so what I want is if this is in
70:11 - production what I want is that base
70:15 - should be
70:17 - this should be done with the base of
70:20 - power slash beat but if this is not then
70:24 - we just simply do this now let's see
70:27 - what happens here if I do npm gun Dev
70:30 - what we get here so you could host 5.73
70:34 - but if I stop the server and then npm
70:37 - gun build
70:39 - and then npm can preview
70:43 - now what we see here is this this file
70:46 - so if I click on this and open this so
70:48 - now this is working and again this video
70:51 - is not working and this is something
70:54 - that we have already fixed in the GitHub
70:56 - deployment paper when we were going for
70:58 - GitHub deployment so we have already
71:00 - fixed that but just to quickly let you
71:03 - know how why is that happening and how
71:05 - to fix this if you want to know why is
71:07 - that happening you can refer back to the
71:09 - GitHub deployment section but to fix
71:11 - this we can just remove uh this read
71:15 - from here and then
71:17 - npm1 build and then npm gun
71:21 - preview
71:23 - and this should work now have I refresh
71:25 - this yeah so again if you want to one if
71:28 - you want to learn more why why is this
71:31 - working this way and why not
71:33 - um like this you can refer back to the
71:35 - GitHub deployment section
71:37 - so if I stop the server and if I do npm
71:40 - gun Dev
71:41 - this is now not on the not on the
71:44 - forward slash wait this is on this path
71:46 - and here everything is working
71:49 - um so with that mode and command Etc you
71:52 - can uh add some conditional conditions
71:55 - so but I'm going to remove this
71:59 - um maybe I should also remove this
72:02 - because we do not need this and also
72:06 - remove this and save this let me know if
72:10 - just to make sure everything works fine
72:12 - and yes everything works fine
72:14 - um and that's it so yeah that is about
72:16 - conditional config and based on these
72:19 - settings are based on these modes you
72:21 - can uh do conditional things all right
72:25 - um the next thing is uh async config so
72:28 - you can use async config for example
72:31 - calling a third party API to get some
72:33 - data that can be used in configuration
72:35 - and how exactly to do that so that is
72:40 - um what you can do here is you can make
72:43 - this function async so basically you
72:46 - pass the function in this Define config
72:49 - and then here uh you restructure this
72:53 - again so that is command and mode and
72:56 - then here uh you do const data equals to
73:00 - await and then what uh some async
73:02 - function that you have
73:04 - um already defined somewhere so you get
73:06 - that and then based on that you return
73:10 - um other information and then use this
73:12 - data so you can also this is pretty much
73:15 - the same thing that we did before right
73:17 - this command and mode and SSI bit so we
73:20 - did that but we just made this function
73:22 - async and that means that uh you can
73:25 - also have some async uh configuration
73:28 - here and make this configuration in
73:31 - async function make this function in
73:33 - async function so if you have something
73:36 - some third-party configurational you
73:39 - have to access third party fault
73:41 - configuration you can also do that and
73:43 - simply make this function async by just
73:45 - adding async here and then using a
73:47 - weight here um you already I'm I am
73:49 - assuming you have the you are familiar
73:51 - with async await concept so with that
73:54 - let me remove this again and this as
73:57 - well and save this
73:59 - all right
74:01 - um so to make things simple because and
74:03 - and also we do not need async at the
74:05 - moment are these commands and modes so
74:08 - with that uh another thing and by the
74:11 - way
74:11 - um there are a lot of configuration that
74:13 - you can check on the on the dogs in the
74:16 - docks of uh vidges but in this tutorial
74:20 - I am going to go few of the most
74:23 - important Accenture the most used
74:25 - configuration uh to give you a good idea
74:28 - of how to get started with uh
74:30 - configuration I'll have to do the basic
74:32 - configurations all right let's talk
74:34 - about how to load environment variables
74:36 - in our configuration file so for example
74:38 - if we need the files for some reason so
74:41 - let's see how can we do that for that
74:44 - maybe first thing is we need to make an
74:48 - environment variable file r dot EnV so
74:50 - that we have something to import and
74:52 - here I can do V Dot DB name equals to DB
74:56 - name and
74:58 - not wheat underscore name DB name and
75:01 - then wheat underscore pass equals to DB
75:04 - pass and save this maybe I can do DB
75:08 - um just a name and then go back here and
75:10 - for that to load them we need an import
75:14 - to import something that is about EnV
75:16 - and then here we need to again convert
75:18 - this to a function so this function and
75:22 - we need uh two things here that is uh
75:26 - maybe not two things one a one and that
75:28 - is mode but uh let's stay
75:32 - that's a import a command and mode and
75:36 - this should be in the brackets these
75:38 - brackets because we are destruction in
75:41 - them and then here constant V equals to
75:43 - your dnv and then mode and then crosses
75:47 - dot CWD so the CWD method Returns the
75:50 - current working directory of the node
75:52 - process so this means that this in this
75:54 - case it's a returning this target key
75:57 - and then we have empty codes and that
76:01 - third parameter if we set that to empty
76:03 - codes uh this means that to load all the
76:06 - environment for viewers regardless of
76:08 - wheat underscore prefix so this means
76:12 - that we will get every uh applicable
76:15 - environment for you but and you can see
76:17 - that in a few seconds so with that let
76:20 - me do console.log and then EnV and then
76:24 - uh maybe here I can do return and then
76:28 - empty so let's see what we get here npm
76:30 - gun Dev and oops we have an unexpected
76:34 - area and let's see why we have that um
76:37 - the path argument must be of a type
76:39 - scanning so yeah this should be like
76:42 - this and let's uh see it again so yeah
76:45 - this work now and let's see what we have
76:47 - here so you can see that we have
76:49 - everything here and if I scroll to the
76:52 - top we will be able to see what we are
76:56 - looking for that is wheat underscore
76:58 - name wheat underscore pass
76:59 - so let's see if I can adjust access with
77:02 - name and pass by just doing this and
77:05 - let's try again I don't know if this
77:07 - will work but let's see and Yep this
77:10 - works so this is a this is for the
77:11 - prefix so if I type this this means that
77:14 - we only get uh other variables that
77:16 - start with V so that is how you can
77:18 - access that and then you can use them
77:19 - here
77:20 - so that is for the environment variables
77:22 - and then let's talk about some of the
77:24 - options and for the options we do not
77:28 - need to have this object we can again
77:30 - convert this to
77:32 - um a simple object we don't need the
77:33 - function and then here we already talked
77:36 - about the function let's talk about so
77:38 - another important one or a simple one is
77:41 - so if you have noticed whenever we do
77:43 - something here it clears the screen so
77:45 - for example if I if I save this and if I
77:48 - create a console
77:50 - um if I run npm1 Dev you see the screen
77:52 - is good and we get this but if I get
77:55 - safe I do not want this other it's
77:57 - technically it's not cleared if I scroll
77:59 - to the top I can see either data here
78:01 - but let's say I do not want that so what
78:03 - I can do here is
78:04 - I can do clear screen equals to fast
78:07 - this is 2 by default so if I do screen
78:09 - first and then stop the server and let
78:13 - me
78:14 - resize this npm and Dev and now you can
78:16 - see this is not clear and if I make a
78:20 - small change here and save this you can
78:24 - see nothing changed here uh I mean the
78:27 - previous log is still available on the
78:28 - screen so that is a very small property
78:31 - that is a very simple property that you
78:33 - can use and then apart from that
78:35 - um in the environment for you by the
78:37 - default prefix is sweet underscore that
78:39 - is what what is expected but if you want
78:42 - you can also change that so let's say I
78:44 - want this to be uh rather than wheat I
78:47 - want this to be app and for this one as
78:50 - well app but for that we need to figure
78:53 - configure that in
78:54 - vid.config and this is EnV
78:59 - prefix and then here I can I can do app
79:02 - underscore and save this so now we will
79:05 - have app underscore name and app
79:06 - underscore password hide this so I go
79:09 - here and then I type
79:12 - console.org import dot meta dot EnV so
79:16 - that is how you can import environment
79:18 - for your bus we already talked about
79:20 - this before so I saved this and I go
79:23 - back I refresh this up
79:26 - this is not the server the server should
79:28 - be
79:29 - the server should be 5173 so five
79:33 - five one seven three
79:35 - and I go to the inspect
79:37 - and uh go to console and we size this
79:41 - refresh this and then here you can see
79:43 - app and it's called name and app
79:44 - underscore pass so this works now all
79:47 - right so that is for uh
79:49 - so so that is to change the environment
79:53 - for variable prefix now make sure that
79:56 - you do not set it to this because that
79:59 - again we might return an error and also
80:02 - this means that you will be expecting a
80:05 - lot of and unexpected issues so we do
80:08 - not need this so let's get back to app
80:10 - and let's go and then
80:12 - next thing is a source map so uh if you
80:17 - are working with the let's say scss then
80:21 - when you load your website and when it
80:24 - appears on your browser it's uh the
80:27 - browser do not understand the CSS assess
80:29 - or any other preprocessor it you need to
80:32 - use uh you need to use something to
80:35 - convert all of your code to CSS and then
80:38 - that CSS is loaded here but sometimes
80:41 - that CSS in in the in in the arguments
80:45 - in the arguments that CSS might be a
80:49 - minified version so uh to D to make it
80:53 - easy for yourself to debug the issue so
80:55 - what you can do is you can do CSS and
80:58 - then in CSS you can do Dev Source map
81:02 - and you can turn this to two so this
81:04 - means that you will have the source map
81:06 - if you want to enable The Source map
81:08 - property if you do not know about the
81:10 - source Maps basically the browser can
81:12 - map C CSS generated by a p processor
81:15 - such as SAS back to the source file so
81:17 - it means that you will be able to trace
81:21 - that specific property back to its CSS
81:24 - scss SAS version so that is the property
81:28 - that is the functionality of uh Source
81:30 - map so if you enable this you will be
81:32 - able to go back to that SAS scss file
81:36 - and
81:37 - exactly get that line number of the
81:40 - property in scss in the browser
81:43 - so that is for the source map but for
81:46 - now since we are not using this so let
81:48 - me skip this uh maybe comment this and
81:51 - then another thing is if let's say I
81:55 - want is um so there are two things one
81:58 - is the server and one is the preview so
82:01 - the server is when I
82:04 - let me show you this so if I do server
82:06 - and then if I do if I want to let's say
82:08 - change the part number if I do part
82:11 - 3000
82:13 - and then if I do preview and then part
82:19 - 80 80 and save this I need a comma here
82:24 - save this and then refresh this clear
82:28 - screen
82:29 - and
82:31 - npm and build I make the build and then
82:34 - npm and preview so let's see what we get
82:37 - here we get 8080 that is for this one
82:39 - now let me
82:41 - so we get the ETD that is for the
82:43 - preview and for the preview we already
82:45 - set the power to 8080. so if I stop this
82:47 - and if I now do npm gun Dev what we get
82:50 - here we get 3000 so what do you
82:52 - understand from this
82:54 - um the understanding here is
82:56 - that this server uh has a pod that is
83:01 - set to 3000 and then we have preview
83:03 - which has a part of 8080 so this means
83:05 - that when we ever we execute npm gun Dev
83:08 - it will use this port and whenever we do
83:11 - nbm and preview it will use this part
83:13 - now it may be possible that a port is
83:16 - already taken by something else and in
83:20 - that case what it will do is it will
83:23 - take the next available port and um that
83:26 - whatever that is so that will be
83:28 - automatically detected and it will take
83:30 - it but let's say you do not want that
83:33 - and you want it to be if that Port is
83:36 - taken so just close the app so what you
83:38 - can do here is you can add strict pot
83:41 - equals to true so if you do this
83:45 - um this means that if this 8080 is not
83:49 - available so do not search for the next
83:51 - spot and just exit uh close the project
83:54 - across the server
83:57 - um so yeah that is uh what it means so
83:59 - maybe what I can do is I can start
84:02 - another server in the background and
84:04 - then we can we can try this again all
84:06 - right I started another server with the
84:08 - port 3000 and uh let's see what happens
84:10 - here so if I do npm gun Dev
84:13 - um we can see now 3001 started because
84:15 - 3000 is already taken but what I if I do
84:20 - strict pot equals to 2 and save this and
84:24 - stop the server here
84:27 - uh this might take a time so if I can
84:31 - stop this and stop this and this is not
84:34 - working so let me
84:36 - just open a new terminal and then let's
84:38 - try this so if I
84:41 - set this to save this and npm I'm going
84:43 - to have uh you can see what we get here
84:47 - um Port 3000 is already in use but if I
84:49 - comment this which means clickbot is
84:51 - equals to 2 save this and then High npm
84:54 - gun Dev now we have Port 3000 is in use
84:57 - trying another one and then 3001 so we
85:00 - get three thousand one all right so that
85:02 - is uh how you can how you can State the
85:05 - port number uh if you want you can leave
85:07 - it and by default it's far so which
85:10 - means that it will get the next part
85:11 - number and with that in other thing is
85:14 - uh the log level so let's say in server
85:21 - um if I change if I do uh not in server
85:24 - this is not a server a previous password
85:27 - command so this is General command so if
85:29 - I do log level and turn this to silent
85:33 - and save this and let's say I set this
85:36 - to 2 as well stop this so let's me let
85:39 - me save this and then let's try
85:41 - something here so npm.dev and uh
85:45 - let me maybe stop pause this because I
85:48 - was expecting it it did not work so
85:50 - let's do npm gun Dev and we do not get
85:54 - anything here but what exactly is
85:58 - happening so if I
86:01 - um try to if I try to open my browser
86:05 - and if I do and Google host 3001 it is
86:10 - working but we do not get anything here
86:12 - that is because the log is set to sign
86:14 - in so basically you can choose what
86:16 - messages to see in the logs by using
86:18 - Google which has four options that are
86:21 - info one error and second out of which
86:27 - the default is info if you set it to 1
86:30 - you will get the warning messages if you
86:32 - set it to error you get the error
86:34 - messages and if you get set it to silent
86:36 - so you will not get any kind of messages
86:38 - and then
86:40 - um for now let's set it back to info we
86:43 - can comment this as well but with that
86:46 - you can also change the environment
86:48 - directory
86:50 - um as as well by using EnV directory
86:53 - this one
86:55 - and uh we can maybe set it to the EnV
87:01 - um and setting the part to that folder
87:03 - where you have environment variable so
87:05 - what I mean by that is let's say we have
87:07 - this environment variable here but uh
87:09 - maybe I can make a new folder here and
87:11 - name this the EnV and then again here
87:14 - make another folder dot EnV copy out of
87:17 - this paste this here and then type here
87:20 - new add new so now we have two
87:24 - environment variables one is this and
87:25 - one is this
87:27 - I need to add a comma here so what do
87:31 - you think which app name and password we
87:33 - got it this one or this one so let's see
87:36 - that if I go back here and since we
87:39 - already have this here and in vgs config
87:42 - with config.js we said environment
87:45 - environment directly to the EnV which is
87:48 - this one and then in that we have NV so
87:50 - let's see what we get
87:52 - um if I go to console and uh if I
87:55 - refresh this this should be
87:58 - if I do npm1 Dev
88:01 - oops and BM1 Def
88:03 - and then go here you flash this now you
88:07 - can see DB name new DB Pass New so this
88:10 - means that uh we
88:14 - set when we set the EnV so it takes the
88:18 - high priority and whatever values we
88:21 - have that will be using out of the
88:23 - environment variables will be taken from
88:24 - this one let's also try
88:27 - um app underscore test equals to test
88:29 - and let's see if this is used so if I
88:33 - refresh this and if I see we also do not
88:36 - get that here because now this means
88:38 - that only the environment for you was
88:40 - that are presented in this file will be
88:42 - taken so by default this is um this is
88:47 - the root folder so which means that
88:49 - anything that is here that that works so
88:53 - I will comment this with EnV and yeah
88:58 - all right
89:00 - um another thing that we can do here is
89:02 - let's say I am fed up of running
89:06 - development npm gun Dev and then going
89:08 - to my console or going to my browser and
89:11 - then typing the UI so what I can do here
89:13 - is I can in the server all in the
89:16 - preview so what I can do here is
89:19 - um I can do open and then type
89:24 - index dot dot HTML and save this so now
89:29 - in this case if I again do npm gun Dev
89:31 - it will automatically open uh or start
89:34 - the server and open the browser for me
89:36 - so it already open and it opened in in
89:39 - this tab which is not in the view so
89:41 - maybe I can try this again and maybe it
89:43 - shows up here on the screen so if I
89:45 - again do this and yep you can see this
89:48 - it automatically switch switch uh the
89:51 - focus to the Chrome browser and to that
89:55 - specific tab so and you can also set
89:56 - this here as well um you can set the
89:59 - open here as well with index.html or
90:02 - whatever file you want to use and with
90:04 - that uh that is those are the basic
90:08 - commands for those are the basic
90:10 - configurations for vgs there are many
90:14 - other configurations which I did not
90:16 - cover so if in case you are interested
90:18 - in those you can visit vgs.dev and then
90:22 - go to config and then here you can find
90:24 - eye of the configurations so with that
90:26 - again I just discovered maybe just 10
90:29 - percent of these um of 15 percent of
90:32 - these commands so with that that is it
90:34 - for this section
90:37 - all right so that is it for this V
90:40 - tutorial I hope you liked the video If
90:42 - you do so please make sure to follow me
90:44 - on other social platforms such as
90:46 - Twitter and Instagram and give this
90:48 - video a thumbs up and please make sure
90:50 - to subscribe to the channel also let me
90:52 - know what would you want to learn next
90:54 - are what is something that is missing in
90:57 - this tutorial and you want me to cover
90:58 - that as well so hope to see you again in
91:01 - the next video