00:00 - in this course slow button will teach
00:01 - you how to incorporate 3D models into
00:04 - your react websites and product pages
00:06 - slow button is a senior full stack
00:09 - developer and popular course creator and
00:12 - welcome to this tutorial in this one
00:14 - you're gonna learn how to create this
00:16 - amazing react website with astonishing
00:18 - 3D animations we are gonna learn how to
00:21 - use webgi SDK to manipulate and find
00:24 - your 3D models then we're gonna learn
00:26 - how to display them in your website
00:28 - using webgi and 3js and then we're gonna
00:31 - learn how to animate these 3D models
00:33 - using gsap and webgi we are also going
00:36 - to create this preview mode where
00:37 - visitors can play around with their 3D
00:40 - model and apart from that we're gonna
00:42 - learn how to optimize these animations
00:44 - for mobile devices and at the end we're
00:46 - going to build this project and deploy
00:48 - so be ready to learn a ton of stuff some
00:51 - prerequisites for this tutorial is to
00:53 - have basic HTML CSS and JavaScript
00:55 - knowledge if this video reaches 1000
00:58 - likes on my channel I will be releasing
01:00 - the full source code on my GitHub
01:02 - otherwise you may want to check
01:04 - patreon.com for
01:06 - my support and full source code so what
01:10 - are you waiting let's get yourself
01:11 - comfortable and let's start
01:14 - code with slova
01:18 - and welcome back so this is the website
01:20 - that we're gonna be building in this
01:22 - tutorial
01:23 - the first thing that we need to do is to
01:25 - head over to github.com
01:27 - here I have created these 3D website
01:30 - startup package for you guys
01:32 - the URL of this repository is going to
01:34 - be in the description box below but you
01:36 - can see the URL here as well
01:39 - so what we need to do here is to
01:41 - download this package
01:43 - this way it's going to be very easy for
01:45 - us to set up the project and get going
01:47 - with programming
01:49 - so head over to this code button and
01:51 - click on it there are multiple ways to
01:53 - download this repository but the easiest
01:55 - way is to download a zip so click here
01:58 - download zip
02:02 - wait for a couple of seconds and the
02:04 - file has been downloaded now let's find
02:07 - it in the file explorer
02:08 - so click on the Explorer icon
02:11 - and in my case it's in the downloads
02:13 - folder
02:14 - now let's right click on it and extract
02:17 - here so we want to extract the content
02:19 - of this folder
02:22 - now open this folder in your code editor
02:24 - for me it's Visual Studio code
02:26 - so open the visual studio code
02:30 - file
02:32 - open folder
02:34 - downloads
02:35 - and iPhone 3D website starter Dash Main
02:41 - I will click yes I trust the authors
02:44 - let me zoom in this a little bit
02:48 - and let's see what we have generated in
02:50 - this Repository
02:52 - first you have this public folder on top
02:54 - here are all the files that you don't
02:56 - want to import using the module system
02:58 - in your application
02:59 - so this could be the files that you
03:01 - import dynamically
03:03 - the next folder is the source folder
03:05 - essentially this is the core of our
03:08 - application inside of the source we have
03:10 - this assets folder as well
03:13 - in this folder you can store images svgs
03:15 - fonts whatever you need
03:18 - all the images that we are going to be
03:20 - using for this website are already
03:22 - downloaded and set here so you don't
03:24 - have the bottle with downloading
03:25 - separately
03:26 - next we have this app.jsx component
03:29 - which is the only component at the
03:31 - moment that we have in our application
03:34 - but generally this is going to be the
03:36 - root of our application and everything
03:38 - that we put inside of this component
03:40 - will be displayed next to our component
03:43 - we have this index.css file here I
03:47 - already imported all the fonts that we
03:48 - need and generated all the code that we
03:51 - need for our application as the purpose
03:53 - of this tutorial is not to learn CSS but
03:56 - to learn how to animate 3D models
03:59 - you can think of this file as a UI
04:01 - Library so all the classes already have
04:05 - been written for you and all you have to
04:07 - do is add the proper classes to the
04:09 - sections in your HTML file
04:12 - the next component is main.jsx file
04:16 - this is the main file where we are
04:18 - importing our app component our styles
04:22 - and we are rendering our app component
04:24 - inside of the root div
04:27 - and this div is located inside of the
04:30 - index.html file here so entire
04:33 - application is going to be generated
04:34 - here
04:36 - and you generate that using this create
04:38 - root method from react down
04:41 - apart from that we have this
04:43 - package.json file as well
04:45 - in case you are watching this tutorial
04:47 - years ahead and this repository doesn't
04:50 - exist here are all the dependencies that
04:53 - you need to install in order to make
04:54 - this project running
04:57 - let me just close this folder so that
04:59 - you can see entire urls
05:03 - like so
05:05 - and the dev dependencies as well
05:12 - now let's close this package.json file
05:15 - and the last file that we have here is
05:18 - veet.compic.jis file
05:20 - wheat is a front-end building tool and I
05:23 - use it over create react app because of
05:25 - its performance benefits all this file
05:28 - does is set up some configuration files
05:30 - for react but you don't have to worry
05:32 - about anything because it's going to do
05:34 - the configuration for you
05:36 - and it has better performance than the
05:38 - webpack so let's close this file and now
05:42 - let's install our packages to open the
05:44 - terminal I will just drag from the
05:46 - bottom in the vs code
05:47 - like so and I will choose here git Bash
05:52 - let me close the Powershell
05:55 - now run the npm install command
05:59 - and hit enter
06:02 - after couple of seconds you can see that
06:04 - we added this number of packages
06:06 - and here on the top we have this node
06:08 - underscore modules new folder generated
06:11 - for us which contains all the folder
06:14 - packages that we need for our project so
06:16 - let's close it
06:18 - now let's start our application by
06:20 - running the command npm run Dev
06:25 - let's face it for a couple of seconds
06:28 - we should start a development server for
06:30 - us
06:32 - and just open the URL from the console
06:35 - and as you can see our application is
06:37 - successfully running let me just zoom in
06:39 - a little bit so you can see it better
06:41 - and the other thing that you can notice
06:43 - is that some default Styles have already
06:45 - been applied to this application like
06:47 - background color and foreground color
06:51 - so this is a good start already
06:53 - the first thing that I want to build is
06:54 - the navigation on top
06:56 - so we want to replicate the apple style
06:59 - here
07:00 - so let's build this component first let
07:02 - me close this file
07:03 - and let's get back over to our Visual
07:05 - Studio code
07:08 - reduce the size of the terminal we don't
07:10 - need it
07:13 - and now let's create a new folder here
07:15 - inside of the source folder name this
07:17 - file as components or actually folder
07:22 - essentially all the components that we
07:24 - create for application are going to be
07:26 - stored here as we don't have multiple
07:28 - pages in our application we only have
07:31 - the components for this app.js file so
07:33 - let's add a new file and name this file
07:36 - as nav.jsx
07:41 - and this is short for navigation
07:42 - component
07:43 - let's import react from the top and I'm
07:46 - using Code snippet extension for faster
07:48 - development
07:49 - if you want to have exactly the same
07:51 - shortcuts as I'm building in this
07:53 - tutorial go to the extensions here and
07:56 - just install this simple react Snippets
07:58 - code extension
08:00 - now let's close it
08:02 - and let's generate new functional
08:04 - component so we can run the shortcut FFC
08:07 - for functional syntax component
08:10 - and now enter the name of the component
08:12 - for us it's nav
08:16 - without the e on the end so remove the e
08:21 - and we got generated this code snippet
08:23 - so what this code snipper does it
08:25 - generate a dysfunctional component with
08:27 - empty return statement and also export
08:30 - default on the bottom so let's start
08:32 - writing some jsx code first let's add an
08:35 - app
08:37 - here
08:38 - this now will have a class name
08:43 - of nav Dash wrapper
08:47 - next let's add additional div inside of
08:49 - this now
08:52 - and this day we'll have a class name
08:54 - and the class name is snap Dash content
08:57 - inside of this div we're gonna place our
09:00 - Northern list component with all the
09:02 - links for the navigation
09:04 - and we created this nav element for the
09:06 - semantic purposes and this tip is just
09:09 - for styling purposes
09:11 - is we need to apply some background
09:13 - color to our navigation and also to
09:15 - center it and apply some styles to our
09:17 - fonts as well
09:18 - so let's create an ordered list here
09:24 - in this list we'll also have a class
09:26 - name
09:29 - and the name of the class name is list
09:31 - Dash styled
09:33 - the first element of this list is going
09:35 - to be Apple logo so let's just review it
09:38 - for a second
09:39 - open the browser
09:42 - and if I open the final version you can
09:44 - see on navigation here on top on the
09:47 - left we have first logo and then we have
09:49 - all these links and on the right side we
09:52 - have here search icon and this like
09:54 - store purchase icon as well so let's
09:57 - build that
09:59 - let's get back to our nav.jsx file
10:03 - and let's import the logo first on top
10:06 - so type the following import
10:09 - logo from
10:12 - assets folder images
10:16 - logo Dot scg
10:21 - now let's add the list item here
10:26 - we don't need any classes for the list
10:28 - item and inside of the list item let's
10:30 - add the image
10:32 - so this image will hold the logo
10:35 - let's add the source property
10:38 - and passing the logo
10:40 - next we want to add the alt attribute as
10:43 - well
10:44 - and let's write Apple
10:48 - now let's run the default formatting so
10:50 - right click and format the document
10:53 - nice and let's save and preview
10:57 - but before we do that actually we need
11:00 - to include it inside of our app.jsx file
11:03 - so here in the import section write the
11:05 - following import now from components for
11:09 - slash nav
11:10 - and let's remove this hello text
11:13 - and place the nav self-causing component
11:17 - now let's save it and open the browser
11:20 - close this file
11:22 - and there you go
11:24 - you can see that we have this white
11:26 - background and our logo here on the left
11:28 - let me just zoom out a little bit
11:30 - because it's this is too much like so
11:34 - now let's add the links
11:37 - open an app.jsx again and close this
11:40 - app.jsx file
11:43 - now let's add additional
11:45 - list element or item and inside of this
11:49 - one we want to add anchor tag
11:52 - let's add a class name to this link
11:54 - the class name is going to be link Dash
11:57 - styled
11:59 - and we are not going to be adding the
12:01 - link attribute but on the real website
12:04 - obviously you want to add that as well
12:06 - for the first link
12:08 - the name is going to be store of this
12:11 - link so let's format this document
12:13 - let's save and let's preview
12:16 - at the moment the link is on the top
12:19 - right corner but when we add all the
12:21 - other links it's going to fall in place
12:23 - here next to the logo so let's add them
12:27 - so let's copy paste this link a couple
12:29 - of times
12:31 - because we're just going to be changing
12:33 - the name of the links
12:35 - the first one is store the second one is
12:38 - Mac
12:40 - the next one should be iPad
12:44 - then we have the iPhone
12:48 - next to iPhone we have watch
12:53 - now let's paste a couple more
12:57 - next to the watch we have airpods
13:02 - then we have TV
13:04 - and home
13:08 - next we have entertainment
13:14 - next to that we have accessories
13:20 - and after that let's paste another one
13:24 - and here let's place
13:26 - support
13:29 - okay okay and now we just need two more
13:32 - links
13:33 - the first one is going to be for the
13:35 - search icon
13:37 - so let's add an image element
13:41 - let's add a source
13:43 - attribute
13:45 - and let's add an alt
13:47 - for alt let's write search
13:50 - and let's import the search icon on the
13:53 - top here
13:54 - write the following import
13:57 - search from
13:59 - assets images
14:03 - search.svg
14:05 - like so and let's Import in the image
14:08 - here
14:10 - and let's do the same for the second
14:12 - link
14:13 - except that we're going to use the
14:15 - different image
14:16 - let's rename this one as store
14:19 - and let's rename the alt attribute as
14:22 - well
14:22 - and now let's import the store SPG as
14:26 - well copy the search import and just
14:28 - rename from search to store
14:33 - let's save this one again let's format
14:36 - this document
14:37 - and let's preview
14:40 - we got this failed import R so we are
14:44 - missing one letter here images
14:45 - and here as well images so let's save
14:48 - and let's preview again
14:50 - and now it works
14:52 - with this we have completed our
14:54 - navigation
14:55 - and let's proceed on building this
14:57 - Jumbotron so let's close this page and
15:00 - let me open Visual Studio code
15:02 - and now let's add a new file in the
15:04 - components folder
15:06 - name this file as geometron.jsx
15:12 - once again let's import the react on top
15:14 - and let's generate the functional
15:16 - component using the code Snippets
15:20 - name of this component is going to be
15:22 - Jumbotron
15:25 - and let's just add some placeholder text
15:32 - now let's import this component inside
15:34 - of the app component
15:36 - so on the top import
15:38 - Jumbotron from components forward slash
15:41 - Jumbotron and let's place it here next
15:44 - to the nav
15:46 - make it a self-closing tag
15:48 - now let's say this in preview for a
15:51 - second
15:53 - it's loaded correctly so we can continue
15:57 - let's close the app.jsx file and let's
16:00 - close the navigation as well
16:03 - now let's add some jsx code
16:06 - here I want to add a root div
16:11 - Dy will have a class name and the name
16:13 - of this class name is going to be
16:15 - Jumbotron
16:17 - Dash section
16:19 - and the second one is going to be
16:21 - wrapper
16:22 - the first thing that I want to create
16:24 - inside is the title so add h2 tag and
16:28 - let's add a class name of title the tact
16:32 - is going to be new
16:35 - below that you want to add another image
16:38 - here we're going to display iPhone 14
16:40 - pro but actually we're going to use an
16:42 - image for it not the text and although
16:45 - this sounds like a weird solution
16:47 - but I probably wanted to keep the
16:49 - original look of the text on the logo
16:51 - which cannot be a hundred percent
16:53 - replicated with CSS or at least they
16:56 - wanted to be sure it's rendered
16:57 - correctly on all devices
16:59 - so let's add an image element
17:02 - and add a class name of logo
17:06 - Source we're going to add just in a
17:09 - second and let's add an ALT attribute
17:11 - right here iPhone 14 pro
17:17 - like so
17:19 - and let's import this image
17:21 - but here in the import section let's
17:24 - import iPhone
17:26 - from
17:29 - assets
17:31 - slash Images slash iPhone
17:34 - Dash 14.
17:37 - 14 Dot jpg
17:41 - and let's place this one
17:43 - and the source attribute here
17:46 - now let's preview that one
17:50 - and there you go
17:52 - let's proceed
17:54 - let's set a text below this image
17:57 - so add a paragraph and this paragraph
17:59 - also has a class name
18:00 - class name is text
18:03 - and the text is big and
18:07 - bigger
18:09 - which means that they have versions that
18:11 - are big and bigger
18:13 - below that let's set a span
18:16 - it will hold the description
18:19 - let's add a class name as well
18:22 - and the name of the class is description
18:26 - and the text is going to be just some
18:28 - paying options
18:29 - from
18:31 - 40
18:34 - 1.62 dollars
18:37 - per month for 24 months
18:41 - or
18:43 - 999 dollars before
18:47 - Trading
18:49 - we want to replicate exactly the same
18:51 - text as they have on their website
18:53 - let's see what we have for now
18:57 - and this big title looks beautiful with
18:59 - the gradient and apple is well known for
19:02 - the Simplicity and Aesthetics
19:04 - next below this we need to add a buy
19:06 - button and learn more so let's do that
19:10 - so here below this description let's add
19:12 - an ordered list
19:15 - and this unordered list has a class name
19:19 - name of the class name is going to be a
19:21 - links
19:22 - let's add a first list item
19:25 - and this one is going to have a button
19:28 - inside of it
19:30 - and here we're gonna say pi
19:33 - Also let's add a class name to this
19:35 - button and it's going to be simple
19:36 - button
19:39 - also we can add an href
19:41 - but actually we don't need it
19:44 - now let's copy paste this list item
19:47 - and for the second one we want to add an
19:50 - anchor tag
19:52 - this link is going to say
19:54 - learn more
19:56 - and let's add a class name
19:59 - link
20:02 - and let's save it now
20:05 - let's preview
20:07 - boom this looks beautiful let's continue
20:11 - and the last part is that we want to add
20:13 - an image on the bottom and we're going
20:15 - to have on the hand holding an iPhone so
20:18 - let's import image for that
20:21 - write the following import and name
20:23 - these images holding iPhone from
20:29 - assets
20:32 - we want to get into the images and the
20:35 - name of this image is iPhone Dash hand
20:38 - dot PNG
20:41 - and now let's add an image on the bottom
20:43 - here
20:45 - after the unordered list let's add an
20:48 - image now let's add a class name the
20:51 - class name is going to be iPhone Dash
20:53 - image
20:54 - source is going to be
20:57 - holding
21:00 - iPhone
21:01 - and let's add an ALT which is going to
21:03 - be iPhone
21:10 - let's see how it looks
21:12 - and boom this looks great
21:15 - later in this tutorial we're gonna add
21:17 - 3D model object here next to this phone
21:20 - so it's not going to look so empty
21:23 - and also when we add additional sections
21:25 - we want programmatically to scroll down
21:28 - to these sections clicking on learn more
21:30 - here so we're going to add that later
21:33 - now let's add those additional sections
21:35 - so let's get back here
21:38 - and in the components folder let's add
21:41 - additional file and name this file as
21:43 - sound section.jsx
21:48 - let me show you what we're going to be
21:50 - building in this section
21:53 - and when we open the final version
21:55 - you can see that on this second section
21:58 - you have more information about the
22:00 - sound and the new sound system that's
22:02 - why I call it sound section
22:05 - so let's build that
22:08 - again let's import react from the top
22:11 - and let's create functional component
22:14 - all using the code Snippets the name of
22:17 - this component is going to be sound
22:19 - section
22:22 - let's add a placeholder text here in the
22:25 - return statement
22:28 - and let's import this component in the
22:30 - app file
22:33 - so let's open the app.jsx
22:36 - and import
22:37 - on the top
22:39 - sound section
22:41 - and let's place it below the Jumbotron
22:44 - make this one a self-closing tag as well
22:47 - let's save the app
22:49 - and let's close both of these
22:52 - let's just preview it so that we are
22:54 - sure
22:55 - that is connected properly
22:57 - and there you go hello
23:00 - let's add some jsx code
23:03 - so let's remove this placeholder text
23:07 - let's add a div
23:09 - and this day will have a class name
23:13 - the name of the class name is sound Dash
23:15 - section
23:16 - and let's add a wrapper class as well
23:20 - inside a wrapper let's add one more div
23:23 - and this div will be a div with a class
23:27 - name of body
23:28 - and let's add additional div
23:32 - and this one will have a class name
23:34 - of sound section
23:37 - content and let's add additional class
23:41 - just content
23:43 - you may be wondering why we have so many
23:45 - divs
23:46 - but the purpose of them is to have the
23:48 - proper structure and to have proper
23:51 - Styles applied to them
23:52 - the first thing inside of the content is
23:55 - going to be the title so add an H2
23:58 - element and this one is going to have a
24:00 - class name
24:01 - simply title
24:03 - and here we're gonna say new sound
24:07 - system
24:08 - like so
24:10 - and below that let's add a paragraph
24:14 - this paragraph has a class name text
24:17 - and the text is going to be feel the
24:20 - base
24:22 - like so
24:24 - below that we want to add a span with
24:27 - payment options and let's add a class
24:29 - name
24:31 - of description
24:34 - for the text
24:35 - I can copy from the final version
24:37 - so I don't have to type out
24:41 - here
24:43 - let me close the folders and let me
24:45 - format
24:47 - let's save and preview
24:49 - now the reason why you can't see
24:51 - anything on this section is because this
24:54 - section has opacity set to zero
24:57 - and later we'll use gsap to add a fading
25:01 - effect here so let's remove the opacity
25:03 - so we can see it actually
25:06 - let's open our index.css file and let's
25:10 - search for sound section
25:14 - and let's find the opacity zero and
25:16 - let's comment this out
25:18 - so now if we save it close this file
25:21 - close the folder
25:24 - and let's see again
25:26 - and there you go
25:30 - we just need to fix this typo and add a
25:34 - button and a link
25:36 - so let's do that here there's a typo
25:38 - should be filled
25:41 - and here after the description let's add
25:44 - an ordered list with the links
25:48 - let's add a class name of
25:52 - just links
25:55 - and let's add a first list item
26:00 - inside of this one we're gonna have a
26:02 - button similar like on the Jumbotron
26:05 - text will be just by
26:08 - and let's add a class name
26:10 - of button
26:12 - simple as that
26:13 - now let's add additional list item
26:17 - for the second one we're gonna have a
26:19 - link
26:20 - so error anchor element and let's add a
26:23 - class name of Link
26:26 - the text is going to be learn more
26:29 - now let's format the document
26:32 - and let's preview
26:35 - there you go this is the final version
26:37 - of this section except if you're gonna
26:40 - have iPhone here
26:42 - once we add our 3D object and this learn
26:46 - more button
26:47 - we're going to implement scrolling once
26:50 - we add the next section
26:52 - but since we added this section we can
26:54 - Implement actually this one so once we
26:57 - click on the learn more we want the page
26:59 - to scroll down to this section so let's
27:01 - do that
27:03 - so let's open the geometron component
27:07 - and here on the top
27:09 - let's add a function
27:11 - name this function
27:13 - handle learn more
27:16 - this is a fat Arrow function first we
27:19 - want to Target our sound section so use
27:21 - the document
27:22 - dot query selector
27:25 - and then let's target the sound Dash
27:28 - section
27:30 - and we want to store this inside of the
27:33 - constant named element
27:37 - we want to take the top position of this
27:39 - element and scroll down so let's use the
27:42 - window
27:43 - dot scroll to method
27:48 - this method takes an object as argument
27:50 - and this object receives a couple of
27:53 - parameters the first one is the top
27:55 - position
27:57 - and then we can use our element
28:01 - from the document query selector and
28:04 - call the get bounding client rect
28:07 - call this method this method will return
28:10 - the position and move on to access the
28:12 - top position
28:14 - and let's add an optional chaining
28:16 - operator
28:18 - which basically says if this element is
28:20 - undefined don't execute this function so
28:24 - this component doesn't get an error the
28:27 - next property is the left we want to set
28:29 - the Left To Zero as we don't need any
28:32 - horizontal scrolling and the last
28:34 - property is behavior
28:37 - which we're gonna set to smooth
28:39 - so that we have a smooth scrolling so
28:42 - let's use this
28:44 - method that we just created or write a
28:46 - function
28:47 - and here on the learn more
28:49 - let's add on click method
28:53 - and let's pass this function
28:56 - and now let's try this
28:59 - let's scroll up to the Jumbotron section
29:02 - and once we click on the learn more
29:05 - boom we get scroll down here and now
29:08 - let's build the last section of this
29:10 - website so if I go over to the final
29:12 - version and if you click on the learn
29:14 - more
29:15 - you can see that we got scroll down to
29:17 - This brilliant display section let's
29:20 - build that one
29:22 - so let's get back to the visual studio
29:24 - code
29:25 - let's close these files and let's add a
29:28 - new file in the components folder it's a
29:30 - new file and name this file as display
29:33 - selection Dot jsx
29:36 - again let's import the react
29:39 - using the code snippet and then let's
29:42 - generate new functional component this
29:44 - one is going to be called display
29:46 - section
29:48 - let's add
29:50 - placeholder text
29:52 - and let's Import in the app.jsx file
29:56 - so let's import it first
29:58 - import the space section from components
30:01 - slash display section and let's place it
30:05 - next to the sound section
30:07 - so just place the display section
30:09 - component and make it a self-going tag
30:12 - save this close the app.jsx file and
30:15 - let's preview
30:17 - there is no errors in the component we
30:20 - get the hello here on the bottom left
30:21 - and let's add all the components or
30:24 - actually the elements that we need
30:27 - let's remove this
30:28 - placeholder text and let's add a div
30:32 - this deal will have a class name of the
30:35 - display section
30:38 - and also let's add a wrapper class as
30:41 - well
30:42 - similar to other section let's add h2
30:45 - tag and a class name of title
30:49 - the text is going to be new
30:51 - and below this text let's add a
30:53 - paragraph
30:54 - with a class name of text
30:57 - and here we're going to say brilliant
31:01 - with a DOT
31:03 - and let's add a span
31:05 - to the class name of description
31:09 - and let me copy paste the text as it's a
31:12 - little bit longer
31:13 - so let me open
31:15 - the final version and let me just copy
31:17 - this text
31:19 - okay let me close that
31:21 - and let paste the text here I will close
31:25 - the folder and let me format the
31:27 - document so it's more readable
31:30 - and below that let's add the button
31:34 - so again similar to other sections we
31:36 - want to have two buttons the first one
31:38 - is going to say try me
31:41 - and here we're going to have a class
31:43 - name
31:44 - of a button simply
31:49 - the second button is going to be called
31:51 - top
31:55 - and the class name is going to be back
31:57 - button
32:00 - the first button is gonna trigger the
32:02 - preview mode of your 3D model object and
32:05 - the second one is just going to be
32:07 - scroll back to top
32:09 - so let's save and see what we have
32:12 - so let's scroll down
32:14 - and once again this section is invisible
32:16 - because we have set opacity to zero and
32:19 - we're going to use the gcap to animate
32:21 - and fade in later so let's remove that
32:23 - opacity rule from the index file
32:27 - so open the index.css file
32:30 - and let's search for the display section
32:39 - and let's find the opacity
32:42 - and let's remove this just comment out
32:45 - now if we save this and close it
32:49 - we should get our text
32:51 - beautiful
32:53 - now we're just missing that 3D model
32:55 - which is actually the most interesting
32:57 - part of this tutorial
32:59 - we're going to be using webgi viewer to
33:01 - display this 3D model to our website
33:04 - which is powered by 3js
33:06 - and then we're going to be using the
33:08 - gsap to animate this model through the
33:11 - different sections of our website
33:13 - 3D model is already presented in a
33:16 - repository
33:17 - if you open the public folder you can
33:19 - find it here scene Dash black dot glb
33:22 - but in case you want to find some
33:25 - additionals or different models I will
33:28 - show you where you can find them
33:30 - there are plenty of websites with 3D
33:32 - models but I found my model here on the
33:35 - sketchfab.com and this is the model that
33:38 - we are going to be using in this
33:40 - tutorial as you may see this is iPhone
33:42 - 13 Pro Max but it will serve the purpose
33:46 - you can browse this website to find
33:48 - different models for example we can type
33:51 - here
33:53 - keyboard
33:55 - and then you you get a set of different
33:58 - 3D models
34:00 - and then when you find the one that you
34:02 - want
34:03 - you can just download them so as you can
34:05 - see here on the bottom you have download
34:07 - 3D model
34:09 - the format that we need is glb so just
34:12 - click on the download here
34:14 - and this model is free but you need to
34:17 - give attribution to the authors
34:19 - once you download the file you need to
34:21 - go over to this web GI website and the
34:24 - links to all the website are going to be
34:26 - in the description here we can open this
34:29 - online viewer for this 3D models just
34:32 - click on the latest version here
34:35 - and then we can open even newer version
34:38 - and just click on OK
34:41 - and now what we can do is we can just
34:43 - open up our 3D model and Import in the
34:48 - viewer here
34:49 - and there you go
34:52 - in this viewer there are a couple of
34:53 - things that might be very useful as you
34:55 - may see here we have this 3D reflection
34:58 - and on our website we don't have that
35:01 - because you want this object maybe to
35:03 - not have the ground or reflection so how
35:05 - you can remove it is just go to here to
35:08 - the scene and you have ground
35:10 - and you can just uncheck the visible and
35:13 - there you go
35:14 - also here you will be defining the
35:17 - initial position of the actual 3D model
35:19 - on your website
35:22 - how you do that is actually go here to
35:24 - the animations
35:26 - and you have camera views
35:28 - and then you can find the camera angle
35:30 - that you like and you can just click on
35:32 - ADD current View and it gets saved here
35:35 - then if you want a second view for
35:37 - example let's just rotate it
35:40 - like this maybe and click add current
35:43 - view now we can rotate to this views
35:47 - that you just saved so just focus on
35:49 - next and there you go
35:51 - so again this is very important so this
35:54 - is how it's going to appear on your
35:56 - website once you load this file
35:59 - once you set your initial the first
36:01 - position that you want you want to go
36:03 - here to the export
36:04 - and we have here
36:07 - assets export and glb Export because
36:10 - we're going to be using this glb file
36:12 - and also you want to click here on the
36:14 - drag or compress
36:16 - and you just click on the export glp
36:18 - we're not going to be exporting this
36:20 - file because we're going to use the
36:21 - iPhone that I have found and I also
36:24 - already optimized this asset for you
36:27 - guys so basically I just removed
36:29 - uh the ground so if I go to the scene I
36:32 - just remove the ground and I just
36:33 - compressed it
36:35 - also I added the initial the first
36:37 - position of the actual 3D model
36:41 - and additionally what's important is
36:43 - this position and this target values
36:46 - because these are the values that we are
36:48 - going to be animating or changing using
36:50 - the gsop library to rotate and animate
36:53 - our 3D model
36:55 - so let's do that
36:57 - so let's add a new component close this
36:59 - public folder and inside of the
37:01 - components let's add a new file a name
37:04 - of this file is going to be Fab GI V
37:07 - over
37:09 - .jsx
37:12 - now let's import react from the top and
37:15 - let's create new functional component
37:18 - and this one is going to be called
37:20 - web
37:21 - GI Uber
37:24 - and here in the return statement let's
37:26 - add a div
37:29 - and let's add an ID
37:32 - here
37:34 - it is going to be web GI Dash canvas
37:38 - Dash container
37:40 - and we're gonna use this ID to apply
37:43 - some styles to this container
37:45 - and inside of this div let's add a
37:48 - canvas
37:52 - let's add an ID
37:56 - and the idea is web GI canvas
38:00 - and let's add ref
38:03 - we're gonna render our 3D model inside
38:06 - of this canvas and we're going to use
38:07 - this ref as a reference so as a place
38:10 - where we can render the 3D model as well
38:12 - and for the ID we're going to use to
38:14 - apply some Styles so let's import graph
38:17 - on the top
38:19 - so import
38:22 - use ref
38:24 - from react if you're unfamiliar with
38:27 - user app hook all this hook does is it
38:30 - gets reference to an HTML element and
38:32 - then you can perform Dom manipulations
38:34 - using this reference
38:36 - so let's call this hook inside of our
38:38 - component so just call use ref and set
38:42 - the value as null this is the initial
38:44 - value and it will return in reference so
38:47 - we want to store that inside of the
38:48 - canvas graph this is the name of our
38:52 - reference and now we can use this
38:53 - reference and pass this to the ref
38:55 - parameter of our canvas
38:59 - and then we're going to be using this
39:01 - camera strap to initialize the 3D model
39:04 - and render it inside of this ref
39:09 - next the great thing about webgi is that
39:12 - they have a starter code for us so we
39:14 - actually start developing faster so if
39:17 - you click here on the get started
39:20 - here if you scroll a little bit down you
39:23 - have this web GI starter template on the
39:26 - GitHub so click on the that link
39:28 - and you get redirected to the GitHub
39:30 - webgi vanilla starter this is great but
39:34 - we cannot reuse this entire project
39:36 - because we are building this in react
39:37 - and this is vanilla starter project so
39:40 - we're just going to borrow some of the
39:41 - code so go to the source folder and go
39:44 - to the index.ts file
39:48 - first let's copy the Imports
39:51 - they have in this file so copy that
39:54 - and let's head over to webgi viewer and
39:57 - let's paste this
40:01 - and these are all the plugins that you
40:03 - use in the webgi viewer to apply some
40:06 - different effects and achieve some
40:08 - different styles
40:10 - so let's remove the ones that we are not
40:12 - going to be using
40:14 - we are not going to be using timeout
40:19 - we also don't need this diamond plugin
40:24 - let's remove this Frame fade plugin as
40:27 - well
40:29 - let's remove this one gltf animation
40:31 - plugin
40:35 - we don't even need this ground plugin
40:36 - either
40:38 - we need this bloom
40:41 - we don't need this temporal
40:43 - plugin
40:46 - we can remove this one as well
40:50 - we need this one
40:53 - and we can use this one as well
40:55 - for the rest of this one we can remove
40:58 - and let's add a couple of these that
41:00 - we're gonna actually be using in our
41:02 - application
41:04 - mobile and tablet checks so this one
41:07 - you're going to be using to check if
41:09 - you're on mobile or tablet so that we
41:11 - can optimize the position of our models
41:13 - now let's format this and let's add
41:16 - additional Imports once we are here so
41:19 - here let's add additional hooks that
41:22 - we're going to be using so we're gonna
41:23 - need use stat hook as well
41:26 - we're gonna use use callback
41:29 - you're going to need forward ref and
41:33 - use imperative handle as well
41:37 - for animating all of this we're gonna
41:39 - use gsap so import
41:41 - GSAT from gsap and let's import
41:46 - scroll trigger so import scroll trigger
41:51 - from gsap scroll trigger
41:56 - instead of all it needs to be scroll
41:59 - trigger like this
42:01 - now let's copy the setup function
42:04 - scroll a little bit down and here async
42:07 - function this function initialize the
42:09 - viewer
42:11 - so let's just copy it and adjust it to
42:13 - our needs
42:14 - for react
42:16 - here just copy
42:19 - and let's paste it inside of our
42:21 - function here
42:24 - let's first check what this code does
42:28 - we can see here that this is
42:30 - asynchronous function
42:32 - and on the next line we are initializing
42:34 - the viewer so we call the new viewer app
42:37 - method and we are saving that into the
42:40 - viewer constant and then we're passing
42:42 - the canvas argument and here they are
42:45 - using this document that get element by
42:47 - ID but actually we're going to use the
42:49 - camera strap that we just created
42:51 - so we can just replace that
42:55 - kind of strap.current
43:00 - next they are adding some basic plugins
43:04 - here using this add plugin method on the
43:07 - viewer and they're storing these values
43:09 - in the manager
43:10 - following that they are adding a pop-up
43:13 - here to show the download progress you
43:16 - can remove this one as we don't want
43:17 - this to be displayed
43:22 - next they are adding some base plugins
43:24 - using the viewer
43:27 - and once all the plugins have been added
43:30 - they are calling this viewer.render
43:32 - refresh pipeline so basically to load
43:35 - all the plugins
43:37 - and then below that they're adding the
43:39 - 3D model from the path let's update this
43:43 - for us it's going to be
43:46 - scene Dash black dot glb because we are
43:49 - writing this from the public folder
43:54 - and at the bottom they're adding some
43:56 - additional UI plugins these plugins
43:58 - would add an interface to your website
44:01 - like UI panel which you can use to
44:04 - update and modify your 3D model on the
44:07 - website but that's not what we want so
44:09 - let's remove that
44:12 - and since we're gonna have a lot of
44:14 - re-rendering on this component I want to
44:17 - Cache this function using the use
44:19 - callback hook
44:21 - this way it's not going to be recreated
44:24 - every single time that we re-render our
44:26 - component
44:27 - so
44:29 - let's remove that and let's call it use
44:31 - callback
44:35 - use callback hook Xbox
44:38 - an async function
44:42 - and at the end we provide the list of
44:45 - the dependencies when we want to
44:46 - recreate this function but it's going to
44:48 - be empty because we don't want to
44:50 - recreate this function
44:52 - now let's just copy the function that we
44:54 - already have here
44:56 - and replace the one inside of the use
44:59 - callback function or actually hook now
45:02 - let's format this document
45:05 - foreign
45:06 - actually we are missing the equal sign
45:09 - here
45:11 - and now we can format the document
45:14 - and let's preview
45:16 - but before we can preview we actually
45:18 - need to call this function and we can do
45:21 - that inside of a user effect look
45:24 - so in use effect we will just
45:27 - call this setup viewer function
45:31 - and we want to do this only once so
45:34 - pass an empty array of dependency lists
45:38 - now let's save this and let's preview
45:41 - so let's open the app.jsx file and let's
45:44 - import this component
45:46 - here in the import section
45:48 - type in import
45:50 - webgi viewer from components slash web
45:54 - GI viewer and let's display it here
45:57 - make it a soft close inside similar to
46:00 - others
46:01 - so let's save
46:04 - and let's open our website
46:07 - but actually see that we have an error
46:10 - so let's open up the console
46:12 - and inside of the console
46:14 - we have this canvas snip plug-in is not
46:17 - defined so probably we are missing the
46:19 - import let's go back and let's add it
46:22 - so here in the webgl viewer
46:25 - we are adding this plugin but we are
46:27 - probably not importing it so let's add
46:29 - it here in the import section
46:31 - let's save it and let's refresh and boom
46:35 - as you saw for a second let me just
46:37 - refresh it
46:40 - there you go this is our phone but now
46:43 - we need to adjust the animation so this
46:45 - is the initial position and also we need
46:48 - to clip the background because this one
46:51 - has a black background which is covering
46:53 - our navigation on top so let's do that
46:58 - here in webgi viewer let's scroll a
47:01 - little bit down after the import here of
47:04 - the manager so let's add viewer
47:06 - dot get plugin
47:09 - and the plugin that we need to do this
47:11 - is tone map plugin
47:13 - and we're going to set the configuration
47:18 - and the clip background is the property
47:20 - that we want to update we want to clip
47:22 - the background and set just to true
47:25 - and if we save this in preview you can
47:28 - see that now we see our background and
47:31 - actually background is transparent and
47:33 - we can see the navigation on top
47:35 - so now let's do a little bit of cleanup
47:37 - of this file because there is a lot of
47:39 - comments that we don't need and we can
47:41 - remove that and add the stuff that you
47:43 - need
47:45 - let's remove this comment here
47:48 - I will remove this one as well here
47:53 - and let's add some plugins that we have
47:55 - imported so we need this one
47:58 - GB buffer plugin
48:01 - let's uncomment all of these because we
48:03 - will need them as well
48:08 - we also need this Bloom plugin
48:11 - so adding these plugins to change the
48:13 - appearance of the 3D model and we're
48:15 - only including the ones that we need
48:18 - okay
48:20 - we are not adding the base plugins
48:22 - anymore because we are adding them
48:23 - individually
48:25 - and here we also need to remove this one
48:30 - because we are adding again the plugins
48:32 - individually I can remove this comment
48:35 - and let me see on the import section so
48:37 - we don't need any more add the base
48:39 - plugins
48:40 - and we don't need this canvas snipper
48:43 - plugin either
48:44 - this one we're going to be using later
48:46 - to determine whether we are on tablet
48:48 - mobile or desktop
48:52 - let's clean up a little bit more as well
48:54 - we don't need any of these comments
48:57 - and now let's add one more command so I
49:00 - want to disable the controls once we
49:02 - load our viewer so set the viewer
49:05 - scene
49:08 - DOT active camera
49:11 - dot set camera options so here we want
49:14 - to set the camera options and we want to
49:16 - use controls enable and I want to set it
49:18 - to false
49:20 - so what it means is we are disabling the
49:22 - controls so the users are not able to
49:24 - rotate the 3D model once the website is
49:27 - loaded
49:29 - next whenever we reload our website I
49:32 - want the position of our page to be on
49:34 - top so let's add window dot scroll to
49:40 - insert the top and left to zero so that
49:44 - we are always at the top position of our
49:46 - website and we can start with the
49:48 - animation now I want to add an event
49:50 - listener to the viewer itself
49:53 - what this listener will do once it's
49:55 - fired off it will update the position of
49:57 - the camera if update is needed so type
50:00 - the following viewer dot add event
50:04 - listener and the name of the listener is
50:06 - pre-frame
50:09 - once that fire off we want to execute
50:11 - this callback function
50:14 - and here we want to update our camera
50:16 - but in order to update our camera we
50:18 - actually need to get our active camera
50:21 - first so we do that here
50:25 - before all these plugins that you're
50:27 - adding here let's add new constant and
50:31 - here we will save our camera so we
50:34 - access the camera by viewer dot scene
50:37 - DOT active camera
50:40 - and using this camera we can access the
50:42 - position and the target so let's do that
50:45 - as well click once position
50:50 - equals the camera
50:51 - dot position
50:54 - and the target is const
50:57 - ant Target
51:00 - is equal to camera dot Target
51:05 - using these three properties that we
51:08 - just got from the camera and the viewer
51:09 - we're gonna modify and animate our 3D
51:12 - model because changing the view and the
51:14 - Target and the position of that you're
51:17 - actually getting that 3D rotation
51:19 - animation model so let's update the
51:21 - camera here
51:23 - and once this event listener has been
51:25 - fired off we want to call camera
51:29 - dot position Target updated and set that
51:32 - to true
51:34 - but we want only to update this in
51:36 - certain conditions so let's create a
51:38 - variable
51:39 - and name it as needs update
51:43 - and set it to
51:45 - just make sure that spelling is correct
51:47 - it's
51:50 - update and set that to true
51:53 - and we want to make a shack inside of
51:54 - the listener if
51:56 - it needs update
51:58 - then we want to update the camera
52:00 - position
52:01 - and set
52:03 - flag to defaults
52:05 - like so
52:06 - let's format the document
52:09 - and let's save and let's see if we have
52:10 - any errors so far
52:13 - and as you can see the background clip
52:15 - doesn't work anymore so let's fix that
52:20 - the issue is probably with the tone
52:22 - mapping plugin because it adds some
52:24 - stuff which disables the transparency so
52:27 - let's remove this argument and let's
52:29 - just add it true
52:31 - save that and let's preview again
52:34 - and this works correctly now so now what
52:37 - we want to do is once we click on the
52:38 - learn more we want this mobile to rotate
52:42 - and to set into this position here so
52:45 - let me just zoom out a little bit so
52:47 - it's at 100
52:48 - and once we click on the learn more it
52:51 - will rotate and move on the right side
52:52 - here so let's do that
52:56 - we are going to be using gsap and we
52:58 - already imported the gsap and the scroll
53:00 - trigger plugin so let's register that
53:03 - plugin call the gsap
53:06 - .register
53:07 - plugged in and just pass in the name of
53:09 - the scroll because this is the animation
53:12 - that is going to be triggered on the
53:14 - scroll itself
53:15 - now I want to create new file where I
53:18 - will be saving this animation as I want
53:20 - to break down this file bit because it's
53:23 - becoming very large so add a new folder
53:26 - inside of the source folder
53:28 - and name this one as Loop
53:30 - which stands for Library
53:32 - and let's add a new file the name of
53:35 - this file is going to be scroll Dash
53:37 - animation.js
53:40 - first we will need gsap here as well so
53:43 - import gsap from
53:45 - gsap
53:47 - like so
53:48 - let's create a scroll animation function
53:50 - and Export it so type in export const
53:54 - scroll animation
53:57 - this is going to be a fat Arrow function
54:00 - and here we're going to receive some of
54:02 - the arguments so first we're going to
54:04 - receive the camera position
54:07 - then camera Target
54:10 - then we're going to receive on update
54:14 - we are going to be using this method to
54:16 - update the position of the camera every
54:18 - time we added the parameters of our
54:21 - camera we will call this method to
54:23 - update it and re-render
54:25 - so let's create a new timeline for the G
54:27 - sub so let's hit TL for timeline and
54:31 - let's execute the jsop.timeline
54:34 - function
54:37 - but before we add the animation let's
54:39 - first import this function inside of the
54:42 - webgi viewer and pass all the arguments
54:44 - that we need for the animation so that
54:46 - we can see what we are changing while we
54:48 - are coding the animation
54:50 - so let's import the function here on the
54:52 - top
54:53 - and make sure actually to save the file
54:55 - here first
54:57 - and then import
55:00 - animation from lib slash scroll
55:04 - animation
55:06 - and again as you don't want to re-render
55:08 - and recreate this animation function on
55:11 - every render let's use a callback to
55:13 - Cache it and memorize it so add a new
55:16 - variable const memorize
55:20 - scroll animation
55:23 - and we're going to use use callback
55:25 - again to memorize this function
55:28 - here we're going to receive position
55:31 - Target
55:32 - and on update
55:36 - and we're just gonna check if these
55:38 - three exist so if
55:41 - we have position
55:44 - and we have Target
55:47 - and we have on update
55:50 - then we want to call our our scroll
55:53 - animation function
55:56 - and pass all the all the three arguments
56:02 - here
56:04 - and we want to execute this only once so
56:08 - pass the empty array of the dependencies
56:10 - and now let's call this function
56:13 - here
56:15 - on the very end
56:17 - after the event listener let's call our
56:20 - function and now let's pass the
56:21 - arguments so first we want to pass the
56:23 - position this is the position of the
56:25 - camera and we Define it here
56:28 - we Define the position and the target of
56:30 - the camera
56:32 - so we are passing in the position and
56:34 - the Target and the last one is we need
56:37 - to create new own update method for
56:40 - updating our camera view so let's create
56:43 - it const
56:44 - on update this is a simple fed Arrow
56:47 - function
56:48 - and we just want to update this needs
56:50 - update here
56:52 - set it to true
56:55 - and we want to Mark the camera
56:57 - or actually the viewer as dirty so
57:00 - viewer
57:01 - dot set dirty this basically says that
57:05 - the camera and the viewer needs to be
57:07 - updated that's all it does
57:09 - and now let's pass this method here to
57:12 - the memoize scroll animation
57:16 - there you go and now let's go back to
57:19 - the scroll animation.js file and let's
57:22 - start with our animation here
57:26 - and now on the GSAT timeline we want to
57:30 - execute to function so this function
57:32 - takes the parameters of what we want to
57:35 - animate but first we want to animate the
57:37 - position of the camera
57:38 - and as a second argument it receives an
57:41 - object and inside of this object we want
57:44 - to define a trigger what will trigger
57:45 - the animation and the properties that we
57:47 - want to change for us in this animation
57:50 - when we are scrolling we are starting
57:52 - the animation so set the scroll trigger
57:55 - property and we Define here a new object
57:58 - inside of this object the first property
58:00 - that you want to Define is the actual
58:02 - trigger so this needs to be the element
58:04 - that is triggering this animation the
58:07 - element in the Dom itself for us this is
58:10 - the sound section so type in the sound
58:12 - section
58:14 - and where I found this class let me show
58:16 - you
58:18 - so if you go to our browser
58:20 - if we inspect
58:22 - developer tools you can see here they
58:24 - have this sound section and this is the
58:26 - second section here this one
58:29 - so we want this section to trigger the
58:33 - animation
58:35 - the next property is when we want to
58:37 - start the trigger so type in start
58:42 - and we want to start when the top of
58:44 - this section
58:46 - hits the bottom of the viewport
58:49 - so let me just show you what I mean by
58:51 - that
58:53 - let me close to browser console tools
58:56 - and here
58:58 - this is the top section
59:00 - of the sound system this right here this
59:04 - line and the bottom part of the viewport
59:06 - is this
59:08 - so this is static actually this Top Line
59:10 - is static it's always there but the
59:13 - bottom of the viewport is changing once
59:15 - we start scrolling so when we start
59:17 - scrolling it's changing and basically at
59:20 - this first scroll this is already
59:22 - reached the top and this is when we want
59:24 - to fire off our animation
59:28 - here also we need to Define what will
59:30 - end the animation so we set the end
59:32 - property when the top of the sounds
59:35 - section this reaches the top
59:38 - of the viewport
59:40 - so again let's review that
59:43 - top of the viewport
59:45 - is right here
59:47 - and the top of the sound section is
59:49 - right here so when these two meet we
59:52 - reached the end of the animation so if
59:54 - we scroll
59:58 - and when we reach
60:00 - this position position when the top of
60:03 - the viewport reaches the top of this
60:04 - sound section the animation should be
60:06 - ended
60:08 - and now if we update our position camera
60:10 - position and we'll leave it like that we
60:13 - will only have the start and end
60:14 - position and there will not be any
60:17 - transition in between so we need to use
60:19 - the scrub property
60:21 - you can set the scrub to true
60:24 - this way the 3D model will be changing
60:27 - its position from start to the end
60:29 - position using the scroll position so
60:32 - but if you want to add a little bit of
60:33 - delay
60:34 - you can add numbers here so I tried a
60:36 - couple of numbers and I found it too
60:38 - works the best
60:41 - if this animation is very heavy on our
60:43 - browser we need to do a little bit of
60:45 - implementation for the performance so we
60:48 - can pass in immediate render as false
60:51 - this means that you are not going to try
60:53 - to render this animation until it's
60:55 - actually triggered
60:57 - and once the animation is done we want
61:00 - to call this on update method
61:04 - and if you don't remember what this
61:06 - method does so let's go back here all
61:08 - this method does it sets this flag to
61:11 - true and says the viewer to set 30. so
61:14 - it means the viewer needs to be updated
61:16 - and then we trigger this event listener
61:19 - and then the camera position gets
61:21 - updated here
61:24 - and now we need to set the values that
61:26 - we are going to be changing so we have X
61:29 - y and z
61:33 - and where we get these values is from
61:35 - the webgi viewer so let's do that
61:39 - so we need to open the webgi viewer and
61:42 - then you need to import the 3D model
61:44 - that you're going to be using in your
61:45 - application
61:46 - to get the position of camera you need
61:49 - to go to the animations
61:51 - and then what you want to do is you want
61:53 - to position the 3D model the way you
61:55 - want it to look
61:57 - so you basically want to position the
62:00 - end position for your 3D model
62:03 - once you do that you can go and click
62:05 - here on ADD current View
62:07 - a new camera view has been added here in
62:10 - the list
62:11 - you can expand that
62:13 - and you can see that here we got the
62:15 - position of the camera and target of the
62:17 - camera so we have the x y z values and
62:20 - we can use these values to animate and
62:23 - add them to the gsap so this animation
62:26 - will have this position as end
62:28 - and once you add all the position that
62:30 - you want you can basically just go and
62:32 - keep rotating the animation that's all
62:35 - we want to do in our application to
62:37 - rotate the views that we saved in our
62:39 - glb file and retrieve this information
62:41 - and store them in the gsap animation
62:44 - function so let's do that
62:48 - I already tested the positions that I
62:50 - want for my mobile 3D model so let's
62:53 - just type them in the X position should
62:56 - be minus 3.38
62:59 - the Y position should be -10.74
63:04 - and the set should be minus
63:08 - 5.93 and now I want to execute exactly
63:12 - the same function but on the camera
63:14 - Target so we can reuse this code
63:17 - just add this function here
63:22 - and for the second one we want to remove
63:24 - the on update because it's enough to
63:27 - call this function only once
63:29 - and we want to update the element is
63:32 - Target
63:33 - here
63:34 - now let's update the values that we got
63:36 - for the Target
63:38 - for the X
63:39 - is going to be 1.52
63:43 - 40y we're going to set
63:45 - 0.77 and for the set
63:49 - let's add minus 1.08
63:54 - and again I'm not coming up with these
63:57 - numbers randomly but I was playing
63:58 - around with the 3D model and I found
64:01 - that this position is a position that I
64:03 - want to have at the end of this
64:04 - animation so let's save this
64:08 - and let's try it out
64:12 - let's open the browser and if you click
64:14 - on the learn more
64:15 - boom we get our animation and if we
64:18 - scroll up the animation starts as well
64:20 - the problem is here that as you can see
64:23 - that this image is covering our 3D model
64:25 - so what we can do is we can change the
64:28 - opacity and Fade Out this all content I
64:31 - mean the other solution could be that we
64:33 - place the 3D model on top of this
64:34 - content but I would like to fade in
64:37 - anyways so let's do that
64:42 - again we can reuse the same function
64:44 - that we called so let me just copy paste
64:47 - this
64:48 - and now the target is going to be the
64:51 - jumble transaction
64:52 - so let's type in shambotron
64:55 - Dash section
64:57 - and here we don't want to update any
64:59 - positions but actually we want to fade
65:01 - out so set the opacity to zero like so
65:06 - the trigger will remain the same so
65:08 - let's try that
65:11 - and now if you scroll
65:13 - it's actually not working so let me
65:15 - check if the selector is correct
65:18 - so as you can see here we are missing o
65:21 - so it should be a Jumbotron section so
65:24 - if you go back and if we inspect this
65:26 - section so let me just show you can see
65:28 - that this is the the target CSS Target
65:31 - that we want to use
65:34 - okay let's try now
65:36 - we scroll now you can see that it's
65:37 - fading away and we get this nice effect
65:40 - but what we also want to do is we want
65:42 - to fade in this new sound system so this
65:45 - section should be fading as well so
65:47 - let's do that
65:50 - first let's open index.css file and
65:54 - let's find the not the space section but
65:57 - actually we want sound section sound
65:59 - Dash section
66:01 - and let's find here opacity so we want
66:03 - to set the initial opacity to be zero
66:06 - and as you can see here
66:09 - when we get to that position we don't
66:11 - see anything but now we want to fade in
66:13 - so let's add the fading animation
66:16 - so here we can reuse again the same code
66:20 - so just copy this function and paste and
66:25 - this time we want to trigger sound
66:28 - section content or actually we want to
66:31 - animate the sound section content and
66:34 - the trigger is again sound section
66:37 - here we want to set the opacity to 1.
66:40 - because we want to fade in
66:42 - there are rest of the animation should
66:45 - be remained the same so let's try now
66:47 - let's see and let's reload
66:52 - and click on learn more
66:54 - and there you go you see how it's
66:56 - animating once you start scrolling down
66:59 - here is semi-transparent and then we
67:02 - reach the final position it's fully
67:04 - fully solid great so let's continue
67:09 - now we want to add the last piece of the
67:11 - puzzle so once we click on the learn
67:12 - more here we want to get scroll to the
67:15 - bottom and we want to animate but as you
67:18 - can see we haven't implemented this
67:19 - scroll at all so let's go back to this
67:22 - field of Base sound system section and
67:25 - let's implement this first learn more
67:27 - and then we can animate this phone so
67:29 - let's do that
67:31 - let me close all these files
67:35 - and let's open the sound section here
67:39 - I want to add new function
67:42 - and let's name this function as
67:45 - const
67:46 - handle learn more and this is going to
67:50 - be fair Arrow function
67:53 - first we want to get a reference to the
67:55 - last section and we can store that
67:56 - inside of the element
67:58 - so Define const element
68:00 - and then using the document
68:04 - query selector
68:06 - we can Target the display section
68:09 - which is the last section so let me show
68:11 - you
68:12 - so right click and let's inspect
68:15 - and you can see this is the display
68:17 - section which is the last section of the
68:19 - website which we want to Target
68:22 - okay and now we want to scroll to that
68:24 - element so call the window dot scroll to
68:30 - and pass in an object with the
68:32 - parameters for the top we want to use
68:34 - the element
68:35 - and we want to get bound
68:38 - the client Direct
68:40 - and we want the bottom position
68:43 - we want to set the Left To Zero because
68:46 - we don't have any horizontal scroll and
68:48 - for the behavior you want to set this
68:50 - mode
68:52 - and let's use this method or actually
68:54 - function
68:56 - and pass it here to learn more
68:59 - so Define new event handler on click and
69:03 - just pass this function
69:05 - let's try it out
69:07 - so scroll a little bit up and let's
69:09 - click on the learn more
69:11 - and there you go
69:13 - beautiful now we should add the
69:14 - animation for this 3D model
69:18 - so let's open our
69:20 - lib scroll animation.js file and again
69:23 - we can reuse
69:25 - this uh this entire function so we
69:28 - actually can copy the both of this
69:30 - position
69:35 - because we're going to update the
69:37 - position and the target as well for the
69:39 - third animation
69:41 - first we need to update the trigger
69:42 - because we the trigger right now is the
69:45 - last section so
69:47 - display Dash section it's not the sound
69:50 - section anymore
69:51 - so the same for the last one
69:55 - and now let's just update the values
69:58 - so for x
69:59 - 1.56
70:02 - for y 5.0 and for its set
70:07 - 0.01
70:11 - and for the Target
70:13 - X is going to be minus 0.55
70:20 - 0.32 for y and for the set
70:23 - you want to set 0.0
70:26 - like so let's save and let's see what we
70:29 - have
70:31 - if you click on the first learn more we
70:34 - get animation to the second section and
70:36 - if you click on the next learn more
70:39 - we get the animation for the last
70:40 - section beautiful and you see how easy
70:43 - it is to add this animation effect using
70:46 - gsap and 3js and you can also do the
70:49 - custom scrolling and you can see that
70:51 - the animation is changing while you're
70:53 - scrolling this is just outstanding
70:58 - the only thing that I want here is I
71:00 - want this section to fit in as well so
71:03 - let's add this animation
71:06 - we can actually reuse the animation from
71:09 - The Sound section so let's just copy
71:11 - that
71:13 - and let's add it here on the bottom
71:16 - here I just want to change the target
71:20 - for the last action it's going to be
71:23 - space section
71:25 - without the content here
71:28 - and let's update the trigger as well
71:30 - it is also display section
71:33 - like so
71:34 - let me save and let's see
71:38 - once again click on the learn more
71:41 - in here
71:42 - but actually we forgot to set the
71:46 - opacity initially to zero so let's find
71:49 - the display section
71:56 - if I can write it correctly
71:59 - and let's find it here so set the
72:01 - opacity to zero initially
72:04 - let's save it and let's try
72:06 - so let's refresh the page
72:09 - click on the learn more
72:11 - once again and there you go you have
72:14 - this nice animation fade in as you can
72:16 - see it's semi-transparent here and once
72:19 - we start scrolling it gets fully visible
72:22 - and solid beautiful
72:25 - the next thing that I want to do is I
72:27 - want to implement this try me to get
72:28 - that preview mode where you can play
72:30 - around with this 3D model and I want to
72:33 - implement this top so that we get scroll
72:35 - to the top of the page so let's first
72:37 - implement this topic because it's the
72:39 - easiest one
72:42 - let's first close all these files
72:45 - close all these files and let's open the
72:47 - display section here
72:49 - let's add another function
72:52 - and let's name this function as handle
72:56 - scroll
72:58 - to talk
73:00 - and this is going to be fat Arrow
73:02 - function again
73:03 - and all we want to do is to scroll to
73:05 - top so use the window Dot scroll to
73:09 - and we want to set the top to zero left
73:12 - to zero and set the behavior to smooth
73:17 - like so
73:19 - and now we can use this function
73:23 - and pass to this button so let's call
73:26 - the on click event and pass this
73:28 - function
73:30 - beautiful let's try it
73:32 - so if you click on top
73:35 - nice that's exactly what you wanted to
73:38 - do now let's implement this try me
73:40 - preview mode
73:44 - so what we need to do is we need to add
73:46 - on click eventually Center on this
73:48 - button and once we click on this button
73:50 - we want to fire our function from the
73:52 - pair component parent component is
73:55 - app.jsx file here
73:57 - and then inside of this function we want
73:59 - to fire off another function and that
74:02 - last function is going to be inside of
74:04 - this webgi viewer so let's start from
74:07 - that
74:08 - in order to reference a function from
74:11 - this component we need to use forward
74:13 - graph use hook so let's rename this
74:16 - function to use this hook
74:19 - so instead of the function let's write
74:21 - const we have gi viewer and we're going
74:24 - to use
74:25 - forward graph
74:29 - and forward graph takes two arguments
74:31 - the first one is the properties and the
74:34 - second one is the reference
74:36 - and we just need to wrap our component
74:40 - with this four draft hook so let's copy
74:42 - the component
74:46 - and let's place it in here
74:51 - and now what we need to do is we need to
74:53 - use use imperative handle hook
74:56 - so let's write
74:58 - here
74:59 - use imperative hand hook and inside of
75:02 - this hook we're gonna Define what is the
75:04 - function that we're going to trigger
75:06 - from the air component
75:07 - here we receive
75:09 - Fair Arrow function
75:13 - and
75:16 - the name of the function can be
75:18 - trigger preview
75:25 - and in order to enable this animation
75:28 - you basically need to have the reference
75:29 - to the camera to the Target to the
75:31 - position all these informations and this
75:34 - is inside of the setup user so we need
75:36 - to create another variable and store all
75:39 - of this inside of the variable so that
75:41 - we can access them inside of this
75:42 - trigger preview so let's add the
75:45 - reference to them
75:46 - we will use use statehope for that
75:49 - so let's create first one const
75:52 - viewer
75:53 - ref this is the name of our variable
75:55 - that we're going to use to store the
75:57 - viewer now let's set the setter function
75:59 - so set viewer graph
76:03 - and just use the use State hook
76:05 - to set the initial value to zero or
76:08 - actually to null
76:09 - let's copy paste this a couple of times
76:11 - because we're going to do the same for
76:13 - the Target
76:17 - so copy the target
76:21 - and here we want to set the set function
76:24 - as set-sided ref
76:26 - and then we want to update the third one
76:29 - which is for the camera
76:32 - and update the setter function
76:34 - should be set camera ref
76:38 - the next one is position ref
76:43 - position wrap and
76:45 - the setup function is set position Raw
76:50 - like so
76:51 - and now we can use these variables and
76:53 - use the gsap to change the position of
76:55 - our camera
76:56 - because as you can see on the last
76:58 - position this is the camera or actually
77:01 - 3D model position when you click on try
77:04 - me we want to change the position of
77:06 - this phone to face us and be a little
77:08 - bit smaller something like similar like
77:10 - here or actually on the first position
77:12 - something more similar like this
77:14 - position so that's what we are going to
77:16 - be doing
77:18 - so let's call the gsap
77:22 - .2 this is the function again and we are
77:26 - now changing the position route
77:29 - and we want to pass in X again x y
77:34 - that's it
77:36 - and values are going to be
77:38 - 4X 13.
77:41 - 04
77:43 - or Y is going to be minus 2.01 and for
77:47 - the set it's going to be 2.29
77:50 - and for the duration let's set it
77:52 - duration to two
77:55 - and at the end we want to call on update
77:57 - because we want to update the position
77:59 - once we set the values
78:03 - we actually want to re-render the camera
78:05 - view and 3D model so call the unupdate
78:08 - which receives a function as a callback
78:11 - and we want to set the viewer app to be
78:13 - dirty set dirty this means that we are
78:16 - marking the viewer for rendering
78:21 - and then let's call the camera ref
78:25 - position
78:27 - Target updated and set it to true
78:29 - so basically we're saying that the
78:31 - position of the target has been updated
78:34 - and we need to do the same for the
78:36 - Target
78:37 - so again let's call gsap.2
78:41 - and this time we need Target ref
78:45 - and again position where X is going to
78:47 - be zero point
78:48 - one one where the Y is going to be 0.0
78:52 - to the set is going to be 0.0 and set
78:55 - the duration to B2
79:00 - just make sure to put the column in
79:01 - between
79:02 - and now we should be able to call this
79:04 - function from the parent
79:06 - so let me open the app.jsx and first we
79:09 - need to create a user ref reference to
79:11 - this function so use ref
79:13 - call this one and let's store that
79:15 - inside of the const webgi
79:19 - viewer rack
79:22 - foreign
79:23 - and now we can connect
79:25 - our reference to the component so use
79:28 - the ref
79:29 - property and I just pass the subject
79:31 - that we created
79:33 - like so and now let's define a new
79:35 - function that you'll be triggering from
79:37 - this display section
79:40 - let's name it
79:41 - can look preview
79:44 - it is going to be a fat Arrow function
79:47 - and we're going to access the method
79:49 - from the webgl viewer
79:51 - so X is the ref
79:53 - dot current
79:56 - and the name of the function that you
79:57 - define here is trigger preview
80:01 - like so
80:04 - and we are going to trigger this
80:06 - function from the display section so
80:08 - let's add another property
80:10 - and call it trigger preview and let's
80:12 - just pass the handle preview function
80:15 - now let's call this trigger preview
80:17 - property inside of the display section
80:20 - here
80:23 - and make sure to destructure it now
80:26 - let's add an event handler here on try
80:29 - me button so let's add on click
80:32 - and just call this function
80:36 - let's format the document
80:38 - let's save this one
80:40 - let's format this one and actually let's
80:43 - format this one as well
80:46 - let's save all of them and let's try
80:49 - and obviously we have an error so let's
80:51 - inspect to see what's happening
80:54 - and we have user app is not defined so
80:57 - let's import user
81:00 - so here in the app.jsx
81:03 - let's import
81:04 - loose wrap Hook from react
81:08 - let's save it
81:09 - and let's try now
81:11 - so in our our application is not broken
81:13 - anymore so let's write try me
81:17 - but it's not working for some reason so
81:19 - let me inspect
81:20 - let's see the console
81:22 - and you cannot read properties of null
81:25 - inside of the web Java viewer okay so
81:28 - that we are actually not storing these
81:30 - values viewer app Camera
81:32 - and position wrap and Charlie graph we
81:34 - only created these values
81:36 - but we never assign them so let's do
81:38 - that we forgot this step
81:40 - let's close this
81:42 - let's open the web Java viewer
81:45 - and here let's scroll a bit down
81:48 - here we are setting the viewer let's
81:50 - initialize and store it inside of our
81:52 - variable so set viewer ref and just pass
81:55 - in the viewer
81:58 - and now let's do the same
82:00 - for the camera so let's find where the
82:02 - camera is
82:04 - okay so it's here camera position and
82:07 - Target
82:07 - so let's call it set camera ref
82:11 - I'm passing the camera
82:13 - and we want to set position ref
82:17 - and press into position
82:19 - and set the target graph
82:23 - in crossing the target
82:25 - like so
82:26 - we are basically calling this set
82:28 - function
82:29 - and storing the reference to these
82:31 - variables
82:32 - so that we can use them inside of this
82:34 - trigger preview
82:36 - just for reminder okay let's try now
82:41 - let's scroll down
82:43 - and let's scroll to the end and now
82:45 - let's click on try me
82:48 - and there you go we have animated this
82:50 - 3D model iPhone to have this front
82:53 - facing position the next thing that I
82:55 - want to do is I want to enable this to
82:57 - be rotated and I want to hide all these
83:00 - things behind this this iPhone so let's
83:03 - do that
83:05 - let's open the app.jsx file and let's
83:08 - add a container here for all of these
83:11 - sections so we can hide them
83:13 - so let's add another div
83:16 - and let's add ideal content
83:22 - and let's add a reference
83:24 - to add a ref and let's make a new
83:26 - reference
83:27 - let's call it three smart as content
83:33 - ref
83:34 - and call the use refwork again
83:37 - so we're going to use this ref to hide
83:40 - all this content
83:42 - so pass the ref
83:44 - variable to this content and let's move
83:47 - in all these sections here
83:51 - so what we are going to do is just to
83:53 - fade away all these sections once we are
83:55 - in a preview mode and that's it and this
83:58 - webgl viewer will be only viewable on
84:01 - the website
84:02 - so let's do that
84:04 - let's pass this reference to the webgr
84:07 - viewer
84:08 - add new property and call this on
84:10 - content ref
84:12 - and just pass in the content graph
84:16 - here now let's open the web job viewer
84:19 - component
84:21 - now let's just access
84:24 - from the properties so call the props
84:26 - Dot contentrev
84:30 - set the current
84:33 - Style
84:35 - and opacity
84:37 - to zero
84:39 - like so so let's try that
84:42 - and now if we scroll to the bottom of
84:44 - the website
84:45 - and let's click on the try me
84:48 - we can see that all elements have
84:50 - disappeared apart from the 3D model
84:54 - now we want to be able to rotate this
84:55 - model but at the moment the pointer
84:57 - events are disabled for this section so
85:00 - if you go to the canvas you can see the
85:02 - pointer events are set to none so we
85:04 - want to fix this
85:05 - and to enable rotation so let's do that
85:10 - so let's add another reference to the
85:12 - container of the canvas
85:14 - let's store it inside of the constant
85:16 - and let's call this one canvas
85:18 - container
85:20 - and again we're going to use use refwork
85:23 - and the initial value is going to be
85:25 - null
85:26 - now we want to pass this to our canvas
85:29 - container so scroll down
85:31 - to the canvas and let's use the wrap and
85:34 - pass this reference here
85:37 - now we can use this
85:39 - to update it once we call the trigger
85:41 - preview
85:42 - so here let's call it and let's add the
85:45 - current dot style dot pointer events
85:51 - and equals to all
85:55 - this will remove the pointer events rule
85:58 - that we set earlier but what we also
86:00 - need to do is we want to set and enable
86:03 - a 3D model to be rotated so we do that
86:05 - here and set the viewer ref dot scene
86:09 - DOT active camera
86:12 - and set camera options
86:15 - we want to reset this back to controls
86:18 - enabled to true
86:20 - and this will enable the rotation
86:23 - of the 3D model so let's save it and
86:25 - let's preview
86:28 - let's scroll to the bottom of the page
86:30 - once again let's click try me
86:33 - and let's try to roll and there you go
86:35 - now we are able to control the 3D model
86:38 - how exciting is this
86:41 - you can zoom in
86:42 - zoom out change the position to whatever
86:46 - you want and inspect this 3D model
86:48 - this is outstanding
86:51 - but there is one problem we cannot exit
86:53 - this preview mode so we need to add
86:56 - another button here and once we click on
86:58 - the button we want to close
87:00 - this preview mode and return everything
87:02 - back to the normal so let's do that
87:05 - so we need to create another flag
87:07 - variable to be able to distinguish when
87:11 - we are in preview mode and we are not
87:13 - so Define const
87:17 - in the array
87:18 - preview mode
87:20 - and set preview mode
87:23 - you're gonna use the use that hook
87:27 - and set initial value to be false so at
87:31 - the beginning we are not in the preview
87:33 - mode
87:34 - and now when we call this trigger
87:36 - preview method or function rather we
87:38 - want to set this preview mode to be true
87:41 - so call the set preview mode and passing
87:44 - true
87:46 - and now depending on this model we want
87:48 - to show or hide the button that we're
87:51 - going to add here
87:52 - in the containers so let's add
87:54 - expression and let's see if the preview
87:57 - mode
87:58 - is true if it's true we want to render
88:00 - this button
88:03 - so add a button
88:05 - and this button will just say exit
88:08 - let's set a class name
88:10 - of Simply button like so
88:14 - let's save it
88:15 - and let's see what we got here
88:17 - so refresh the page
88:20 - let's scroll to the bottom of the page
88:23 - click on the try me and there you go now
88:26 - let's implement the exit
88:30 - so let's add a new on click event
88:32 - handler on the exit button so on click
88:36 - and we will create new function
88:38 - and let's call this function handle head
88:40 - is it
88:42 - like so and let's define it here
88:45 - so up to the hook here
88:48 - and we're going to use use callback
88:50 - because let's save it and we don't want
88:52 - to recreate this function all over again
88:54 - whenever we're rendering the component
88:57 - so we're calling this one as hand exit
88:59 - and we're going to use use callback hook
89:03 - and you're gonna receive this function
89:05 - inside of it
89:07 - and we're going to pass an array of
89:10 - dependencies later
89:13 - so what we want to do in this function
89:15 - is we want to reset the state that we
89:19 - set here in this trigger preview so we
89:21 - can reuse the code that we defined here
89:24 - let's copy this one
89:26 - and let's paste it here
89:29 - we want to set the pointer events back
89:31 - to none
89:35 - and we want to set the opacity of the
89:37 - content graph
89:38 - to 1 as well and also we want to disable
89:44 - here
89:45 - controls for the rotating the 3D model
89:48 - so let's reset them back
89:51 - set the controls enable to false
89:58 - let's also set the preview mode
90:00 - to false
90:02 - so that we hide the button
90:05 - and now we need to position our iPhone
90:07 - or 3D model back to its original
90:09 - position and we already defined its
90:12 - position inside of the
90:14 - leave scroll animation so we can reuse
90:16 - that code
90:17 - so you're going to find the Target and
90:19 - the opacity
90:20 - or actually this is for the display
90:22 - section so here the target
90:25 - and the position
90:27 - so let's copy this
90:30 - and let's paste it here
90:32 - called the gsap
90:35 - and call it to or actually we copied to
90:37 - Method as well
90:41 - let me just close the folders and let me
90:44 - format this
90:47 - and let's just update the position
90:48 - because here we are using the reference
90:51 - to the position
90:52 - and also let's update the target to ref
90:57 - and let's update this method on update
90:59 - method so we need to find that
91:03 - let's pass in a function and inside of
91:05 - this function we're going to call EUR
91:08 - and we're going to set 30.
91:11 - again something Simon that we already
91:12 - did and we want to call the camera ref
91:15 - and let's set the position Target
91:18 - updated to true
91:21 - like so
91:23 - and we want to update this function only
91:26 - with certain dependencies are updated so
91:29 - canvas container ref
91:34 - usition ref
91:36 - camera ref
91:38 - and Target draft
91:41 - and let's just not forget to call the
91:43 - GSAT
91:44 - on the second animation as well and we
91:47 - can close to the previous one
91:49 - perfect let's save this and let's
91:51 - preview
91:53 - let's open the browser
91:55 - let's scroll to the bottom of our page
91:58 - and let's click on try me
92:01 - now we are in preview mode so we can
92:03 - scroll play around or actually rotate
92:05 - and click on the exit
92:08 - and boom we are back at the initial
92:10 - position
92:10 - you can open the preview mode when we
92:12 - want
92:13 - zoom in play around
92:15 - do whatever we want and click on the
92:18 - exit
92:19 - and you're back excellent
92:21 - and the next thing that I want to do is
92:23 - optimize this for mobile devices so
92:25 - let's open the console tools so inspect
92:28 - and let's open up the simulator here on
92:30 - the right top
92:32 - let's refresh
92:34 - and as you can see this doesn't look
92:36 - correct so we want to update the
92:38 - positions of our preview model so let's
92:41 - do that
92:43 - we already are importing
92:46 - function to help us to determine this
92:48 - mobile intelligent check so let's add
92:51 - another flag which will be used to store
92:54 - the results of the mobile and tablet
92:56 - check
92:58 - so let's set up lag type in const is
93:01 - mobile and the setup function will be
93:04 - set is mobile
93:06 - and we're going to use u-state hook
93:08 - obviously to store the state and set to
93:12 - no first
93:14 - next
93:15 - in setup Uber
93:17 - here next reset your ref we want to call
93:20 - this function so mobile
93:23 - and double check and we want to store
93:25 - the result in a constant
93:27 - name this one is mobile
93:30 - or tablet
93:33 - like so
93:38 - and to be able to access this variable
93:40 - outside of this function we want to
93:43 - store that
93:44 - to our state variable so set is
93:48 - mobile as well to
93:51 - this constant
93:54 - so now we can access that through the
93:57 - entire functional component that we have
93:59 - here
94:00 - and now let's scroll a little bit down
94:05 - and here below this controls that we are
94:08 - disabling controls we want to check
94:10 - if
94:13 - is mobile or tablet
94:16 - if it is we want to reset the position
94:18 - and Target to fit the mobile phone so
94:20 - use the position to set
94:23 - to
94:24 - -16 point
94:26 - seven
94:28 - the second one is going to be 1.17 in
94:31 - the third one
94:32 - 11.7 again I was playing around with
94:34 - this
94:35 - with these positions and these values to
94:39 - set the one that corresponds to the
94:41 - resolution that I need for the mobile
94:42 - phone
94:43 - then we want to set the target as well
94:46 - set the first to zero for the X for y
94:49 - set the one point
94:51 - 30. 7 and the last one set to zero
94:56 - and we want to add additional class to
94:59 - our content draft so use the props Dot
95:02 - contentref
95:04 - dot current
95:06 - dot class name
95:09 - and set the class to mobile Dash or Dash
95:13 - tablet
95:15 - using this class we're going to hide the
95:18 - elements that we don't need on the
95:19 - mobile phone
95:20 - so let's save and see if this fixed our
95:22 - initial position
95:23 - and there you go it is but if you scroll
95:26 - down we can see that the second position
95:29 - and probably the third one are not
95:31 - working as expected so let's fix them
95:35 - so we want to pass this flag to memorize
95:39 - scroll animation as well so let's pass
95:41 - here is mobile or tablet like so
95:45 - yeah let's
95:47 - accept it here
95:51 - add it here it's a property or actually
95:54 - as an argument is mobile
95:56 - and we want to send it here as well so
95:59 - that we are able to update the positions
96:04 - okay
96:05 - and now we can open this inside of our
96:07 - scroll animation so let's save this
96:10 - let's format this document
96:12 - and let's open up the scroll animation
96:14 - here
96:15 - so we are receiving another argument
96:17 - here
96:19 - and we call it is mobile
96:22 - like so
96:24 - now let's update these values
96:27 - so let's use the ternary operator to
96:29 - make this more simple so let's just
96:31 - check is this not mobile if it's not
96:34 - Remain the values as they are
96:37 - if it is let's set the new value
96:39 - for the first X is going to be
96:41 - -7
96:43 - now let's do the same
96:45 - for the add values
96:48 - for the second one
96:50 - if it's on mobile we want to set minus
96:52 - 12.2
96:54 - like so for the third one
96:58 - we're gonna set minus 6.0
97:02 - let's do the same for the Target here
97:06 - if it's not on mobile
97:08 - remain the same otherwise set to 0.7
97:12 - for the Y let's set
97:15 - the value to be 1.9
97:18 - and for the last one let's set it to be
97:20 - 0.7
97:23 - okay let's save
97:25 - now let's update for the last section
97:28 - again we want to add this ternary
97:30 - operator and for the second one we're
97:33 - going to add
97:34 - nine point
97:36 - 50.
97:38 - we're actually 36 sorry
97:41 - for the Y we want to add a value of
97:45 - 10.95 if it's on mobile
97:48 - and for the set you want to set a
97:50 - position to be 0.09 on mobile
97:55 - and let's set the target for the display
97:57 - section as well here
98:01 - if you are on the mobile we want to set
98:03 - the position to be minus 1.62
98:08 - then for the Y
98:09 - we want to set position to be 0.02
98:14 - and for the last one we want to set
98:16 - position to be minus 0.06
98:20 - let's save this and let's see what we
98:22 - got
98:24 - let's open the browser
98:26 - and let's refresh the page
98:30 - and if you click on the learn more
98:32 - we can see that we get the correct
98:34 - position for the second section and
98:36 - let's see in the last section
98:38 - great this looks awesome so what if we
98:41 - click on try me
98:43 - okay this looks a little bit different
98:45 - but if we click on the exit we can see
98:48 - that this value remained the same so
98:50 - let's update that one
98:53 - let's open the webgi viewer and we do
98:56 - that here in the handle exit function
98:59 - so again let's add
99:02 - again this ternary operator and let's
99:05 - check if it's not on mobile we're
99:07 - setting this value as it is but if it's
99:09 - on mobile you want to set 9.36
99:13 - for the second one we're gonna set
99:16 - 10.95
99:20 - for the last one is going to be 0.09
99:24 - this is for the position and for the
99:27 - Target let's have it as well
99:31 - so we're gonna say minus
99:34 - 6.62 40 y
99:37 - let's set
99:39 - 0.02
99:41 - and for the last Z
99:45 - let's set
99:46 - the value to be -0 point
99:49 - 0 6.
99:52 - like so let's save and let's format
99:55 - again
99:57 - actually we have this L we don't need
99:59 - that so let's remove the L and once
100:02 - again let's format
100:03 - and let's preview what we have
100:05 - and once again let's scroll to the
100:07 - bottom of our website
100:09 - let's click on try me
100:12 - this looks fine and let's click on the
100:15 - exit
100:16 - and boom we are back at the right
100:17 - position outstanding so let's scroll to
100:20 - the top and the last piece of the puzzle
100:23 - and the last piece of the website that I
100:24 - want to add
100:25 - is the loader because this animation is
100:29 - very very heavy on the performance of
100:31 - the website itself so we want to give
100:34 - some time the website and the assets to
100:36 - load in and display some nice animation
100:38 - for the user as well so they don't have
100:40 - to you know just see and wait and look
100:43 - at black so let's do that
100:48 - let's close all these files
100:51 - and let's add a new component in the
100:53 - component section so add a new file and
100:56 - name this file as loader.jsx
100:59 - let's import react on top
101:02 - and let's create functional component
101:04 - name it folder
101:07 - here we're just gonna import a gif image
101:10 - and display that so let's import
101:12 - animated
101:14 - logo
101:15 - from
101:17 - assets slash Images slash logo Dash
101:21 - animated
101:24 - dot GIF so this is already placed in the
101:27 - assets folder we just need it to load it
101:29 - and in the return statement let's add a
101:31 - div
101:32 - and this diff has a class name of loader
101:37 - and let's add an image
101:40 - let's add a class name of logo
101:43 - let's add a source
101:46 - animated logo
101:48 - and let's add an alt
101:50 - and set that one too
101:52 - iPhone
101:55 - loader
101:56 - or actually Apple maybe it's about
101:59 - because we have multiple devices on the
102:01 - loading animation so let's save this and
102:04 - let's import this inside of the app.jsx
102:06 - file
102:09 - let's import it in the import section
102:11 - here
102:13 - import
102:14 - order from components for slash loader
102:18 - and let's place it here
102:23 - and make it a self-closing tag
102:25 - let's save and see what we have
102:28 - now let's reload the page
102:30 - and boom we have this nice loading
102:32 - animation and after couple of seconds it
102:35 - fades away
102:36 - if you're wondering how this Fade Away
102:38 - animation is being done let me show you
102:41 - so let's open the index.css file and
102:44 - let's find this
102:46 - let's search for DASH loader class and
102:49 - as you can see I'm using the animation
102:51 - called Fade Out and this is just a
102:54 - simple CSS animation so we are fading
102:57 - from opacity 1 to opacity zero and we
103:00 - are holding this GIF for three seconds
103:02 - and after three seconds you're firing
103:05 - this animation which actually Fades away
103:07 - in 0.3 seconds and that's all it does
103:12 - and with that we completed our website
103:14 - now let's build and deploy this project
103:17 - so head over to our Visual Studio code
103:20 - and let's open up the terminal
103:23 - I want to open another terminal and
103:25 - let's actually open up a bash let's
103:28 - close the Powershell and let's close the
103:30 - first batch
103:31 - and now simply just run npm run build
103:37 - make sure to spell it correctly
103:40 - and this will build a static folder for
103:42 - us and we can use this folder to upload
103:45 - to the hosting and it's done that was
103:48 - very fast and as you can see we have
103:50 - this this folder and we can upload that
103:52 - so let me do that let's head over to the
103:54 - browser and let's open netlify.com
103:57 - website
103:58 - and you want to create account here
104:00 - everything is free so you don't have to
104:02 - worry about that go to the login
104:05 - and now let's add a new site here on the
104:08 - top right add a new site and we want to
104:10 - deploy manually or deploy actually so
104:13 - click here on the browse to upload and
104:15 - in the download section for me
104:18 - I want to click on the list folder so
104:20 - let's upload it click on the upload
104:23 - and let's wait for a couple of seconds
104:24 - depending on your connection and there
104:27 - you go it was very fast now what we can
104:29 - do is this is the URL of our application
104:31 - we can change that so go to the site
104:33 - settings and let's change the site name
104:36 - so we can type something as Apple
104:39 - iPhone website
104:42 - so that we have much nicer URL so let's
104:45 - save that
104:46 - and let's click on the site to preview
104:47 - it
104:51 - and it's beautiful it's working
104:54 - and there you go
104:56 - this is astonishing
104:59 - so let's sum up what we did and what we
105:02 - created so we created these beautiful
105:03 - animations which changes these three
105:06 - positions and at the end we created this
105:09 - preview mode as well which is
105:11 - astonishing really
105:13 - also we added this loading animation
105:15 - indicator at the beginning of our
105:18 - website
105:19 - and what we also did is we optimized
105:22 - this for mobile devices
105:24 - and obviously you could spend even more
105:26 - time to optimize this website for
105:28 - different devices right but that wasn't
105:30 - the purpose of this tutorial the purpose
105:33 - of this tutorial was to show you how to
105:35 - animate 3D objects inside of your
105:37 - website and there are some edge cases
105:39 - probably on this website that needs to
105:41 - be handled in regards to the layout and
105:44 - optimization
105:45 - I hope you guys learned something new
105:47 - and if you want to support me and get
105:49 - the full source code of this tutorial go
105:52 - check my patreon at
105:53 - patreon.com forward slash code with
105:56 - sloba or if this tutorial reaches 1000
106:00 - views I will release the full source
106:02 - code on my GitHub also if you get stuck
106:04 - during the development of this project
106:06 - you can get my help so check the
106:08 - advanced tiers on my patreon as well
106:11 - also I have private one-on-one chat
106:13 - where I can help you and support you on
106:15 - this project
106:16 - until the next time happy coding