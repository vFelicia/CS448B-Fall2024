00:00 - lynn is a software engineer at
00:02 - salesforce and an excellent teacher
00:05 - in this course she will teach you how to
00:06 - solve backtracking problems which are
00:09 - common in coding interviews and
00:11 - challenges hi everyone i'm lin i'm a
00:14 - software engineer hobbyist game
00:15 - developer and recent graduate from the
00:17 - university of chicago
00:19 - welcome to this course on solving
00:21 - backtracking problems
00:23 - whether you are new to coding interviews
00:25 - or already have experience with
00:26 - backtracking problems this is the crash
00:29 - course for you
00:31 - we will learn about an all-purpose
00:33 - template
00:34 - that helps you solve any kind of
00:35 - backtracking problems and we will apply
00:38 - the template to decode problems like the
00:40 - 8 queens problem or the sudoku silver
00:42 - problem
00:44 - this is exactly the template that i use
00:47 - for my code interview problems when i'm
00:49 - developing algorithms for my games or
00:51 - even ones in my research on a non-convex
00:54 - optimization problem
00:56 - i hope you're excited and let's dive
00:58 - right into this versatile template
01:01 - you can find this template in my github
01:03 - just linked to in the video description
01:05 - below
01:07 - let's start with some keywords and
01:09 - concepts in backtracking problems that
01:11 - will help us understand the template
01:12 - better
01:13 - the first keyword state
01:17 - essentially a backtracking problem is
01:19 - asking you to find valid states
01:21 - take the n queens example that we will
01:23 - solve later in this video an example of
01:26 - a state is just arbitrarily placing n
01:29 - queens on an unbian board for example
01:32 - here we are placing four queens on a 4x4
01:34 - board
01:37 - on the contrary an example of a valid
01:39 - state requires that the queen are placed
01:41 - in a fashion not they cannot attack each
01:43 - other
01:45 - if you aren't familiar with the rules of
01:46 - chess don't worry
01:48 - the moves of queens are pretty
01:50 - straightforward
01:52 - a queen can move horizontally
01:55 - vertically or diagonally
01:58 - therefore for replacement of the n
02:00 - queens to be valid they can't stand on
02:03 - the same row the same column or the two
02:05 - diagonals
02:08 - so how do we construct a valid state
02:10 - like this
02:12 - well we build up from previous states
02:14 - suppose we're starting from the blank
02:16 - and by end board where no queen is
02:18 - present we can put our first queen
02:20 - arbitrarily wherever we want let's see
02:23 - we put it here
02:26 - then where can we place the second queen
02:28 - you can see now our choices are limited
02:31 - or in background terminology our
02:33 - candidate states are limited
02:36 - because we place the first queen here
02:38 - this entire
02:40 - column this entire row and the two
02:42 - diagonals are now unavailable for new
02:45 - queens
02:47 - let's say we just put the second queen
02:49 - here where it's available
02:52 - next we try to see where we can fit in
02:55 - the third queen
02:56 - our candidates are now more limited
02:58 - because we put the second queen here
03:00 - this
03:01 - column this row and this diagonal is not
03:04 - available
03:06 - so our third queen can only go here
03:10 - finally let's place the fourth queen
03:13 - because
03:14 - this third queen is here it blocks this
03:16 - diagonal
03:18 - and this row and this column leaving our
03:20 - fourth queen to set here
03:23 - great
03:24 - now is this global layout a valid
03:26 - solution such that no queen can attack
03:28 - each other well we've already seen in
03:30 - our checks
03:33 - so like this we have found a valid
03:35 - solution to this end queen problem
03:38 - as a counter example consider if we
03:41 - place the first two queens like this
03:45 - now
03:46 - all these cells marked in red are
03:49 - available and we only have one left for
03:51 - the third queen and nowhere to place the
03:53 - fourth queen
03:56 - this means that this succession of state
03:59 - searches fails to lead to a valid
04:01 - solution
04:02 - and this is pretty much it about states
04:05 - identifying candidates to build the next
04:07 - state and validating a final solution
04:10 - now let's look at how these procedures
04:12 - are defined in our template
04:15 - there are four functions in our template
04:18 - the first three
04:19 - is valid state get candidates
04:22 - search or helper functions
04:26 - the last and most important one so
04:29 - is the entry point to our program
04:32 - the so function is indeed the one that
04:35 - the elite code problem is asking you to
04:37 - write
04:39 - it is responsible for returning the
04:41 - valid solutions
04:44 - let's look at the helper functions one
04:46 - by one
04:48 - this valid state
04:51 - this function takes in a state and
04:53 - returns a boolean it validates whether a
04:55 - state can be used as a final solution
04:58 - in our quiz problem a state is a
05:00 - validate solution if all n queens are
05:03 - placed on the board and none of them can
05:06 - attack each other
05:08 - get candidates this function finds a
05:10 - list of candidates that can be used to
05:12 - construct the next state
05:14 - search
05:16 - this is a recursive function it calls
05:18 - the previous two helper functions and
05:20 - checks if the state is a valid solution
05:23 - to our backtracking problem
05:26 - if it is
05:28 - it records the solution by making a deep
05:30 - copy of the state
05:31 - note that we do need a deep copy instead
05:33 - of a shallow copy because we will
05:35 - continue to modify the state as our
05:37 - search goes
05:39 - but we need a static snapshot of the
05:41 - valid state here
05:44 - this line of return is commented out
05:47 - because depending on the nature of the
05:49 - problem we might need to find all valid
05:51 - solutions or just one
05:54 - if we only need one we can return as
05:56 - soon as we have find it
05:58 - otherwise we continue on until we
06:00 - exhaust all the possible search states
06:03 - continue down here
06:05 - if the state isn't yet a valid solution
06:08 - we find candidates to build the next
06:10 - state
06:14 - recall that candidates return a list of
06:17 - candidates
06:18 - for each one we add the candidate to the
06:21 - state
06:22 - in a quiz problem for instance suppose
06:25 - our state only contains the position of
06:27 - the first queen
06:28 - here we add a candidate position for the
06:31 - second queen
06:33 - now we take this modified state and
06:35 - recurse on it by calling the search
06:37 - method on this modified state
06:43 - if the modified state is valid the
06:45 - solution is recorded
06:48 - like here
06:50 - otherwise the search function
06:53 - fetches candidates for this modified
06:55 - state and recurs further
06:58 - eventually for some state there is no
07:00 - more possible candidate
07:02 - think that example where we cannot place
07:05 - a fourth queen anywhere because
07:07 - all the spaces have been occupied
07:11 - after returning from the recursive
07:12 - search we restore the modified state to
07:15 - the original by removing the candidate
07:17 - from the state
07:21 - again in the queen's example we undo the
07:23 - placement of the second queen and now we
07:25 - only have the first queen
07:29 - as for serve it starts with an empty
07:31 - list of solutions and an empty state
07:35 - a cost search on the state and this list
07:37 - of empty solution
07:40 - search will eventually fill up this list
07:42 - of empty solutions and then return the
07:45 - list of solutions
07:47 - and remember this is the function that
07:49 - the code problem is asking us to write
07:55 - when using this template keep in mind
07:57 - that this is only a template so your
08:00 - helper functions
08:01 - is valid state get candidates
08:05 - then by taking additional parameters
08:09 - search might also return a boolean
08:11 - indicating whether a solution has been
08:12 - found and returned early if there is one
08:16 - and only one valid global solution like
08:18 - in the sudoku problem that we will
08:20 - eventually see
08:22 - this concludes our brief introduction to
08:24 - the template
08:25 - next let's solve the queen's problem
08:27 - hands-on in lead code
08:30 - here we are only called number 51 the
08:33 - end queen's problem which is a legal
08:34 - heart problem
08:37 - let's first read the problem statement
08:40 - given an integer n we want to return all
08:43 - the distinct solution to the n queens
08:45 - puzzle and we may return the answer in
08:47 - any order
08:49 - and lico has a specific format for us to
08:52 - represent the board
08:56 - for four queens example
08:58 - these are the two valid solutions
09:02 - and here we denote that the first
09:05 - square on the first row is not occupied
09:07 - the second square is occupied by a queen
09:10 - the third one is not occupied the fourth
09:12 - one is not occupied
09:14 - and on the second row the first three
09:16 - squares aren't occupied and the last one
09:18 - is occupied by queen so on and so forth
09:23 - and in the case where n is 1 the queen
09:26 - can only be under a single grid so
09:29 - that's the solution
09:31 - before jumping into the code let's first
09:33 - think about how we may represent this
09:35 - problem logically
09:37 - we might be tempted to represent this
09:40 - board data structure as a 2d array but
09:43 - it's actually a little bit waste of
09:44 - space to do so
09:47 - since no queens can be on the same row
09:50 - or the same column we may just keep a 1d
09:52 - list that tracks the queen's position in
09:55 - each row
10:02 - concretely for this example here on the
10:05 - left for the first row the queen is in
10:08 - the second cell so the first index is
10:10 - one
10:18 - for the second row the index is three
10:21 - since the queen is in the fourth cell
10:27 - and this here is zero
10:32 - this here is two
10:42 - following the same logic
10:45 - for the example on the right
10:47 - the first index is two the second index
10:50 - is zero
10:51 - the third one is
10:52 - three
10:53 - and the last one
10:55 - one because
10:57 - the third cell the first cell the fourth
11:00 - cell and the second cell
11:05 - so this is the way that will represent
11:07 - each state as a 1d list
11:09 - for this backtracking problem
11:14 - now i'm going to grab my template and
11:17 - put it into the code
11:38 - i'm going to move the soap method on top
11:44 - as i already mentioned
11:46 - the silver method is basically the one
11:48 - that the code is asking us to write so
11:51 - for the solve n queens problem we will
11:52 - just be adapting the sole function
11:55 - so solutions
11:56 - is initially an empty list because we
11:59 - may return all the valid solution in any
12:03 - order
12:05 - then my starting state
12:08 - is just
12:10 - an empty list because
12:14 - we haven't placed any of the queens into
12:16 - the board just yet
12:21 - then we call self.search
12:24 - on the state
12:25 - giving it our list of solutions to
12:27 - append to and the parameter n for the n
12:31 - queens
12:33 - after the search is complete we return
12:36 - the solutions
12:41 - let's go ahead and remove this part
12:53 - great
12:54 - now we will write the is valid state
12:56 - function
12:58 - it will take as parameter solve
13:00 - state and n
13:03 - for state to be valid
13:05 - it needs to
13:06 - put all end queens onto the board so if
13:09 - the length
13:10 - of the state
13:12 - is n
13:13 - then we know
13:15 - we have already put all n queens onto
13:17 - the board as for the condition where no
13:20 - queens can attack each other we will
13:22 - handle it in the get candidate function
13:26 - essentially we will only return
13:28 - candidates that land on valid squares
13:31 - that won't be attracted by the
13:32 - previously placed queens
13:36 - so self state
13:39 - and
13:43 - great
13:45 - so here we are constructing candidates
13:47 - based on the state that we are given
13:49 - if there is no state meaning that we are
13:51 - starting from a blank board we may place
13:54 - the first queen anywhere we want
13:56 - so if not state
13:59 - we return
14:01 - all the possible indexes
14:08 - if the state is not empty we find
14:11 - the next position in the state to
14:12 - populate
14:17 - [Applause]
14:23 - so position
14:25 - is the length of the state
14:27 - if we already place the first queen we
14:30 - want to place the second queen
14:35 - so candidates initially start
14:37 - from
14:40 - all the indices and then we prune down
14:42 - candidates that aren't valid
14:46 - i'm using a set because it's better than
14:49 - walking through a list
14:51 - and set guarantees uniqueness
14:56 - all right
14:57 - let's prone
14:59 - down
15:00 - candidates
15:03 - dot
15:04 - place the queen
15:06 - into a text
15:08 - so for row column in enumerate
15:12 - state
15:18 - we discard
15:20 - the
15:21 - we discard the column index
15:25 - if it's occupied
15:30 - so candy dates
15:32 - got this card
15:43 - recall that our state
15:45 - is recording the column index for each
15:47 - row
15:48 - now we discard the diagonals
15:51 - so distance is
15:53 - the distance between the position
15:56 - and the row index
15:59 - because we're trying to put a queen
16:01 - in the second row now that we have
16:03 - already filled in the first row
16:05 - we want it in a place that cannot be
16:07 - attacked by the first queen diagonally
16:10 - so this one is out of the question and
16:13 - this is column plus distance
16:16 - this one is also out of the question
16:17 - column minus distance
16:19 - and at the very end we return candidates
16:24 - now let's define our recursive search
16:27 - function
16:28 - it should take some
16:30 - states solutions
16:32 - and n
16:34 - we just adapt the template so if self
16:37 - dot is valid state
16:39 - state
16:40 - n
16:44 - we just add it to the solutions
16:46 - and
16:48 - return otherwise if we come down here
16:51 - for candidates in self.candidates
16:57 - state
16:59 - and
17:01 - we recurse
17:07 - because our state is
17:09 - a list and no longer a set we do append
17:14 - candidate
17:15 - and then call
17:17 - self.search
17:20 - state
17:21 - solutions
17:22 - and then
17:26 - and then
17:27 - to restore the modified state back to
17:29 - our original we pop the lost entry
17:37 - right
17:39 - so this here is the only thing that we
17:42 - need to take care of because leak wants
17:44 - us to output strings and here we have is
17:48 - a list of
17:51 - column indexes
17:53 - so let's define some additional helper
17:55 - functions here
17:56 - state to string
18:01 - so
18:02 - state
18:04 - n
18:09 - [Applause]
18:12 - and we expect the output to be
18:15 - just like here
18:28 - here's how we convert our list of
18:30 - indexes
18:32 - to
18:33 - this output string specified by the code
18:36 - so the return is just a list
18:38 - for i in state
18:43 - because one means that the queen is in
18:46 - the second cell and the other cells are
18:48 - empty we just
18:50 - append the strings for the empty cells
18:53 - as well the string for the queen's
18:54 - concept notes together to get the return
18:57 - value
18:59 - string is
19:00 - this dot meaning the empty square
19:04 - times
19:05 - i
19:05 - plus the queen's position
19:08 - plus
19:13 - the remaining empty cells
19:17 - and
19:18 - red dot pen is great
19:22 - and we return the red
19:25 - and here is the solution at penn
19:26 - state.copy
19:28 - we do state
19:30 - stream
19:34 - and state
19:35 - string is produced by self dot state to
19:40 - string
19:42 - state
19:44 - great
19:45 - let's now run the example code to see
19:47 - how we did
19:50 - all right cool looks like our output is
19:52 - accepted let's submit and see
19:56 - whether we can pass all the test cases
20:02 - great
20:03 - you can see that
20:05 - our runtime is better than almost 70 of
20:07 - the submissions and also some memory
20:09 - usage is better than seven percent of
20:12 - the
20:13 - other submissions we are definitely
20:15 - using some memory because of the
20:16 - recursion but that's totally okay for
20:18 - backtracking problems
20:22 - next we will solve another leaked heart
20:24 - problem called the pseudocode silver
20:25 - problem
20:27 - we are now only called problem 37 the
20:30 - sudoku solver problem which is a hard
20:32 - problem
20:34 - if you don't already know what a sudoku
20:35 - puzzle is you can read the description
20:38 - so a sudoku solution must satisfy all
20:41 - the following rules
20:42 - each of the digits 1 to 9 must occur
20:45 - exactly once in each row and in each
20:47 - column
20:49 - also in nine of the three by three sub
20:52 - boxes of the grid
20:54 - and liquid used the dot character to
20:56 - indicate empty cells
20:58 - so for example here
21:00 - liko want us to write a program that
21:02 - fills out this sudoku puzzle
21:06 - in a valid way
21:09 - the board is represented
21:11 - as a 2d array of strings
21:15 - some maybe numbers some are empty cells
21:17 - and liko wants us to solve the problem
21:20 - and modify the board in place
21:26 - the constraints are that
21:28 - because it's a sudoku problem
21:30 - the shape is 9x9
21:32 - and each cell is either a digit string
21:36 - or the empty string
21:38 - and it's guaranteed that the input board
21:40 - has only one solution so we may return
21:42 - early before you find only one solution
21:48 - let me copy paste my template and jump
21:51 - into the problem
22:15 - all right so again we adopt the soap
22:17 - function
22:18 - like this
22:20 - because it asks us not to return
22:22 - anything and just modify the board in
22:25 - i think we'll just need to do
22:27 - self.search
22:29 - board
22:34 - and then we can get rid of this so
22:35 - function
22:39 - i'm going to have to define
22:42 - some
22:43 - constants here so the shape is 9x9
22:48 - the grid
22:49 - length is 3x3 if we are trying to
22:53 - validate the sub boxes
22:59 - and empty is represented as this dot
23:02 - here
23:03 - and all the digit strings
23:06 - are
23:08 - like follows
23:10 - so screen
23:12 - number
23:13 - four number in range
23:16 - [Applause]
23:18 - one
23:19 - shape
23:20 - plus one so this gives us the strain
23:23 - from
23:23 - one to nine and i'm going to wrap it in
23:26 - a set
23:27 - because the order is not important
23:32 - and
23:33 - i know i'm going to need this when i'm
23:35 - traversing the grid
23:42 - great
23:43 - so let's start by writing the is valid
23:46 - state function
23:50 - so it should take self and the board
23:56 - and check if the board is a valid
23:58 - solution
23:59 - so let's validate
24:02 - all the rows first
24:05 - for row
24:07 - and i'm going to just define some helper
24:09 - function later down so
24:11 - let's do first
24:13 - soft get rows
24:15 - which returns
24:17 - each row of the board one by one
24:20 - if
24:22 - if my row is equivalent to all the
24:24 - digits
24:25 - then it's a valid row
24:28 - otherwise it's an invalid row and the
24:30 - entire board is not valid
24:34 - if not
24:35 - set row
24:36 - is equal to self.digits
24:40 - return false
24:43 - validate
24:44 - similarly we validate the columns
24:52 - because
25:04 - return
25:05 - false
25:07 - and lastly we validate
25:09 - the sub boxes
25:13 - foregrip
25:14 - and self dot get great
25:17 - board
25:28 - and
25:30 - if
25:31 - all the rows are validated all the
25:33 - columns are validated and all the grids
25:35 - are validated without causing this false
25:38 - return early we return true meaning that
25:41 - the board is now a valid solution
25:45 - now let's write get candidates
25:48 - so self
25:50 - board
25:52 - a row
25:53 - and a column
25:55 - i'm using the row and the column because
25:58 - for eight cell
26:00 - i want to know which row and which
26:02 - column it is on to determine what digits
26:05 - have already been used and what are left
26:07 - for us to use as a next state
26:11 - so used
26:14 - digits
26:15 - is a set of digit
26:18 - and
26:19 - i'm going to
26:23 - remove used
26:25 - remove digits
26:28 - used by the
26:31 - same row
26:32 - so used
26:35 - digits
26:37 - dot update
26:38 - self
26:39 - dot get okay
26:44 - bro this is another helper function that
26:46 - i will define
26:47 - later down
26:51 - move
26:52 - digits
26:53 - used by the same column
26:57 - so use digits
27:00 - dot update
27:01 - self dot get paid
27:04 - column
27:06 - four
27:07 - and a column
27:13 - and remove digits
27:16 - used
27:18 - by
27:19 - the same by the
27:21 - by the three by three sub box
27:28 - so use
27:30 - digits
27:31 - dot update
27:33 - get
27:35 - grid at row
27:38 - and column so we need to identify for an
27:41 - arbitrary cell which
27:43 - grid it is on
27:47 - board row call
27:50 - and lastly because we might have already
27:54 - used the empty string
27:57 - here when we are doing the updates
28:00 - we
28:00 - subtract those from our use digits
28:17 - self dot empty is the constant that we
28:19 - defined for the empty string
28:21 - and candidates
28:24 - are just
28:26 - whatever
28:27 - that's left for us to use so the all
28:30 - used ones
28:34 - [Applause]
28:37 - and that concludes our get candidate
28:39 - function
28:43 - now we are moving on to do search
28:47 - because we only have one single solution
28:50 - we don't need the list of solutions here
28:52 - so self
28:54 - and board
29:02 - we have this valid state so if
29:04 - self dot is valid state
29:08 - board
29:11 - we return
29:12 - true
29:15 - found solution
29:19 - otherwise
29:21 - we find the next
29:23 - empty
29:24 - spot and take a guess
29:28 - so
29:28 - for
29:30 - row
29:31 - index row in enumerate
29:34 - board
29:38 - for
29:39 - column index the actual element in
29:42 - enumerate
29:44 - row
29:45 - if the element is the empty
29:48 - string so soft dot
29:51 - empty
29:55 - for
29:57 - if this is empty
29:59 - find candidates to construct the next
30:01 - string next stage
30:08 - candidate a self dot get candidates
30:14 - for
30:15 - now that we have the row index and
30:16 - column index we pass those in
30:26 - we modify the board in place as the
30:28 - problem instructed us to do so
30:33 - candidate remember that candidate is
30:35 - just one of the digit string
30:40 - and because here our search returns a
30:42 - boolean if one of the search actually
30:45 - finishes that means that the board has
30:48 - been modified in place and our problem
30:50 - is solved so it's solved is now equal to
30:53 - self.search
30:57 - board
31:00 - and just to add some comment here
31:04 - we recurse
31:05 - on the modified
31:07 - board
31:11 - if it's soaked
31:14 - if it's soaked then we just return true
31:16 - meaning that the entire search has
31:18 - completed
31:19 - otherwise
31:21 - we undo
31:23 - the wrong guess
31:26 - and start a new
31:30 - so
31:31 - we make
31:32 - this entry
31:34 - back into the empty string that it was
31:42 - and down here we have exhausted all the
31:45 - candidates
31:50 - but
31:53 - none solves the problem
31:56 - we return
31:58 - false because this is an invalid
32:01 - succession of searches
32:05 - and
32:06 - if
32:07 - no empty spot
32:11 - in the first place then we just return
32:13 - true
32:15 - and we can get rid of this boilerplate
32:18 - code from our template
32:21 - now the structure is pretty much clear
32:23 - and all i need to do is to fill in
32:26 - those hopper functions
32:31 - helper functions
32:33 - for
32:34 - retrieving
32:36 - rows columns
32:38 - and grids
32:41 - so here are my helper functions for
32:43 - retrieving rows columns and grids this
32:45 - is pretty straightforward because our
32:47 - board is just a 2d array and to retrieve
32:51 - the kth row case column or grid other
32:54 - certain row and column indexes
32:56 - we are basically just doing some really
32:58 - smart indexes and sometimes relying on
33:02 - the power of either tools
33:07 - i will post my complete code all my
33:10 - github linked in the description so you
33:12 - can digest those helper functions on
33:14 - your own now let's run the code and see
33:17 - what we get
33:22 - great our output is accepted
33:25 - let's submit and test it against all the
33:28 - test cases
33:33 - awesome with this template we solve two
33:36 - legal heart problems
33:42 - to recap a back checking problem is all
33:45 - about finding valid states
33:47 - to solve for a valid state we identify
33:49 - candidates that satisfy the problem
33:51 - constraint and use them to build upon
33:53 - our current state
33:56 - once a modified state is valid we add it
33:59 - as a final solution
34:03 - now that we have solved two problems
34:04 - hands-on let's take another look at our
34:07 - template
34:10 - recall that we have these four functions
34:13 - its valid state
34:15 - is a helper function with a boolean
34:17 - return value
34:18 - that validates whether a given state is
34:20 - a funnel solution
34:24 - get candidates is another helper
34:26 - function returning a list of candidates
34:28 - satisfying the problem constraint based
34:31 - on our current state
34:34 - search
34:35 - is a recursive function across the two
34:38 - hopper functions
34:40 - is valid state and get candidates
34:43 - and recurs on itself
34:50 - lastly
34:51 - solve is the function that a legal
34:53 - problem is asking you to write
34:55 - it does nothing fancy other than
34:57 - initializing an empty list of solutions
35:00 - an empty state and calling search on
35:02 - them
35:08 - for more practice problems on
35:10 - backtracking go to leakcode.com and in
35:13 - text search for
35:15 - backtracking
35:18 - this filters out a list of questions
35:21 - that all shares the backtracking idea
35:25 - you see we already solved sudoku solver
35:27 - and n queens if you're looking for a
35:31 - medium hard problem i recommend the
35:33 - subsets problem
35:38 - this is about
35:39 - finding all possible subsets or power
35:42 - sets of a given integer array
35:45 - it is pretty easy to identify a
35:47 - backtracking problem
35:49 - when we are asked to find all possible
35:52 - solutions and may return the solution in
35:54 - any order
35:58 - as you can see in my submission details
36:00 - i solved the subsets problem using the
36:02 - exact template
36:04 - as you go through more and more lead
36:06 - code problems
36:07 - and test how much you understand about
36:09 - the template you will be better prepared
36:11 - to identify a backtracking problem once
36:14 - you encounter one in your coding
36:15 - interviews
36:17 - this concludes our video and the only
36:19 - crash course you ever need for solving
36:21 - backtracking problems on your code
36:23 - interviews
36:24 - for more content like this please
36:26 - subscribe to my youtube channel
36:28 - linksdevelop
36:29 - i also post fun project tutorials and my
36:32 - game development demos on my channel
36:34 - my latest tutorial is about building a
36:37 - discord ai chatbot with the personality
36:39 - of your favorite character using
36:41 - entirely cloud-based technologies and
36:43 - i'm sure you will enjoy it
36:46 - thanks for watching and best of luck
36:48 - prepare for code interviews