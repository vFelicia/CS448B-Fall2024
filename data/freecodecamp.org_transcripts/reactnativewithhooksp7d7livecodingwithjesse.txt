00:06 - hey everybody welcome to live coding
00:08 - with jesse i'm jesse and today i have a
00:12 - really exciting pull request that we're
00:14 - going to review and hopefully merge
00:17 - so i i just started looking at it
00:20 - but i'm i'm excited there's a lot of
00:22 - awesome things that are done in this
00:23 - pool request but i think i'm probably
00:25 - most excited about
00:27 - the use of react hooks
00:30 - so
00:32 - if you don't know what hooks are
00:33 - hopefully you'll know a little bit more
00:34 - about them by the end of this stream
00:38 - this is going to be kind of a short
00:39 - stream i just want to try to get through
00:41 - this pull request and merge it test it
00:42 - out and um
00:45 - and then we'll probably finish up with
00:46 - some question and answer
00:48 - got started a little bit later this
00:50 - morning
00:51 - um
00:53 - so let's let's get right into it so the
00:56 - first thing we're going to do is read a
00:59 - little bit about pull requests like i
01:00 - mean i'm i'm not gonna read it out loud
01:02 - but we're just gonna kind of review uh
01:05 - shout out to
01:06 - chrisbrownie55
01:09 - for this amazing pull request
01:12 - so let's just
01:14 - do a quick overview we'll check out
01:15 - what's changing the files and then we'll
01:18 - pull it down as a separate branch
01:20 - test it out locally a little bit
01:24 - okay
01:25 - so
01:29 - some of some of the changes here like i
01:31 - said i just started to look at this so
01:33 - this is all going to be fresh we're
01:35 - going to be looking at this together
01:39 - um
01:40 - so
01:41 - he put in
01:43 - a use reducer so we're not going to
01:45 - clutter the component with a lot of
01:47 - state so that's that's cool
01:49 - um
01:54 - is now in the reducer
01:56 - and it's in a separate file
01:58 - um
02:00 - okay we got some um
02:02 - stuff in here to avoid re-rendering
02:04 - which is good is performance
02:06 - uh
02:15 - oh cool so we got rid of that switch
02:17 - statement
02:18 - i mean i love switch statements but they
02:20 - they are quite long sometimes so that's
02:24 - cool i'm excited to see what that looks
02:25 - like
02:26 - uh another replace switch statement very
02:29 - cool random number generator
02:34 - okay cool so we could set a minimum
02:36 - maximum number awesome
02:38 - uh
02:41 - let's make the values of this you should
02:43 - experiment with reactive tools
02:46 - okay cool so
02:50 - all right so hooks has changed some
02:52 - stuff in devtools and
02:55 - chris is recommending that we switch to
02:57 - this experimental version of devtools
02:59 - that does look really cool
03:01 - so i'll probably do that i don't know if
03:02 - i'll get to that in this stream but
03:05 - uh thank you for the for the advice
03:08 - there
03:09 - uh also a prettier config
03:12 - i love this so i i usually do something
03:16 - like this uh in all my projects and i
03:18 - have auto formatting i hadn't gotten
03:20 - around to setting it up so i'm i'm super
03:22 - excited about this at some point we'll
03:24 - probably set up like
03:26 - husky to do some automated formatting on
03:29 - commit but uh this is this is really
03:32 - awesome so thank you for that all right
03:34 - now let's check out the files uh in case
03:36 - you don't know how i got to this point
03:38 - um i just went to the
03:41 - battle math repository on github the
03:43 - links in the description
03:45 - and i um
03:48 - i just clicked on pull requests and then
03:50 - this was the
03:52 - the first pull request in there right so
03:56 - we also have an issue that
03:58 - i think i made that issue i think it was
04:00 - just a readme or something
04:02 - um
04:03 - so now first thing you see is this
04:07 - now i'm going to go to the actual files
04:09 - changed
04:10 - so we can see the changes actually let
04:13 - me switch it to
04:15 - um split
04:20 - okay
04:22 - so i like viewing it like a split so on
04:24 - the left hand side it will show you
04:27 - your files now
04:29 - as they are and on the right hand side
04:30 - it will show you what the files will be
04:32 - like if you merge this pull request
04:34 - right
04:36 - um
04:37 - so
04:38 - there was no prettier config before
04:39 - that's why there's nothing here so now
04:41 - we have this it has right
04:44 - no semicolons i use single quotes a tab
04:47 - with two which is awesome that's that's
04:49 - how i roll
04:52 - we have oh significant reduction in the
04:55 - amount of code here look at that i love
04:57 - that so all the red
04:59 - is stuff that's going away so it's been
05:01 - deleted and green is stuff that's been
05:03 - added so
05:05 - um
05:06 - look at that so so much is going to be
05:08 - gone out of that app.js file it's going
05:10 - to be
05:11 - much easier to figure out what's going
05:14 - on like in terms of like layout
05:19 - so now we do have
05:21 - use reducer use callback use effect
05:23 - these are those hooks
05:26 - right or
05:27 - i mean this is not all the hooks but
05:28 - like this is
05:29 - uh coming from the react hooks which
05:32 - we'll talk about more
05:35 - all right and we also have this app
05:37 - reducer component now
05:39 - and um we're pulling in
05:42 - state a reducer and types from there so
05:45 - that's awesome let's uh let's scroll
05:47 - down
05:51 - i love that
05:53 - okay
05:54 - um
05:57 - okay so we have
05:58 - some additions now too right
06:02 - so let's go through this and try to uh
06:04 - figure out what's going on
06:06 - it's always good to try to figure out
06:08 - what's going on before you attempt to
06:10 - merge a pull request right you never
06:12 - want to merge a pull request that that
06:14 - you don't understand
06:19 - number one like
06:20 - it somebody could be trying to mess with
06:22 - you and mess up your project which i've
06:24 - never ever had happen but it's possible
06:26 - number two
06:27 - you still have to be responsible for
06:29 - maintaining your own project and if you
06:31 - don't understand how your project works
06:32 - then how are you going to maintain it
06:34 - right
06:36 - so
06:39 - also notice i did move the uh
06:42 - the view of my face up so we had some
06:45 - people say that it was being blocked
06:47 - by a watermark free code kit watermark
06:49 - so hopefully that's better let me know
06:51 - what you think about that is it
06:53 - does this work for you is it blocking
06:55 - too much let me know
07:00 - so
07:03 - all right so inside of our
07:05 - our app
07:06 - um
07:08 - have we moved to a functional component
07:10 - here
07:12 - i believe we have
07:15 - um
07:16 - so number one we moved to a functional
07:18 - component which is awesome i keep saying
07:20 - like number one number two and stuff i
07:22 - don't know
07:23 - i don't know what's wrong with me today
07:24 - it's just
07:25 - talking enlist
07:28 - um so
07:32 - use reducer okay so we're pulling out
07:35 - and certain number of enemies so this is
07:37 - all our state right
07:38 - [Music]
07:41 - um
07:42 - so we're making our state available from
07:44 - our uh reducer
07:48 - all right so this is
07:50 - what chris was talking about when we're
07:51 - preventing rendering right so that's
07:53 - awesome these are very helpful um
07:56 - uh comments so thank you chris
07:59 - uh
08:00 - so memorization if you're not familiar
08:02 - with memoization uh basically it's
08:06 - i think of it almost like uh caching for
08:09 - like
08:09 - a function
08:11 - right hopefully that
08:15 - makes sense right
08:16 - so it's not
08:18 - not memorization which it kind of sounds
08:21 - like but memoization
08:23 - so
08:25 - it'll basically
08:30 - save us in this case it saves us from
08:32 - rendering something if the result is
08:34 - going to be exactly the same anyway
08:36 - right why re-render it um
08:42 - let's see
08:43 - handle mode picker use callback just
08:45 - finish
08:46 - cool and notice like all these are not
08:49 - right we we need to set
08:53 - which we need to do all of our state
08:54 - changes and everything in our
08:57 - um
08:58 - reducer file right so now we're not
09:00 - directly doing like set state or
09:03 - anything like that
09:04 - we're all using this
09:06 - um this dispatch
09:08 - right so we're gonna look at the next
09:10 - file that we'll see is that dispatch
09:12 - file so hopefully this will make more
09:13 - sense but right when we handle answer
09:16 - change it's going to dispatch uh
09:18 - basically everything we're doing now is
09:20 - going to dispatch
09:22 - same way with submit
09:24 - we now have a
09:26 - theme um
09:31 - actually we had that before i put that
09:32 - in last time didn't i okay
09:34 - sorry i forgot about that
09:36 - um
09:37 - okay this is cool so this is the
09:39 - equivalent of component did mount for a
09:40 - functional component so it's use effect
09:44 - awesome
09:45 - that's going to give us a new a new
09:47 - problem on
09:48 - on
09:50 - component
09:51 - uh
09:52 - the component loading component did
09:55 - mount right
09:57 - okay
09:57 - so this should probably be pretty much
10:00 - the same
10:01 - uh i do
10:03 - i think chris added a key so i think i
10:05 - remember
10:06 - a mention of that so that's awesome you
10:08 - do get a warning in the console if
10:10 - there's no key on um
10:13 - uh like iterated elements
10:18 - and
10:19 - all right cool now here is the new stuff
10:22 - like
10:22 - a lot of the most of the new stuff this
10:25 - appreducer.js file
10:27 - uh so
10:30 - every time we see this export that means
10:32 - like we we can basically have access to
10:34 - that so you see it matches up with
10:36 - that random number generator that we had
10:38 - access to in app.js we have access to
10:41 - the types a reducer right so anytime you
10:44 - see that
10:45 - like we can
10:46 - basically use that in other files and
10:48 - import it
10:50 - alright so now we have this random
10:52 - number generator that allows us to have
10:54 - a min and a max which is awesome
10:57 - uh so this will come in handy too like
10:59 - if we want to add modes where you could
11:01 - do double digit numbers then we want to
11:04 - set the minimum to a double digit number
11:06 - right
11:07 - so
11:08 - that's that's pretty sweet
11:12 - all right so now we have our our types
11:14 - which
11:16 - let's see these look like they're all
11:21 - our
11:22 - kind of actions right
11:29 - um
11:30 - thanks for function here's our reducer
11:33 - right so we do have
11:36 - our types this this is actually uh very
11:38 - reminiscent of like uh redux style so if
11:41 - you've done redux this
11:43 - this is very similar
11:47 - all right so
11:50 - if we want to set an answer right then
11:53 - we're returning the state so this is uh
11:56 - this means when you see this dot dot
11:58 - state that means we're going to take the
12:00 - current state as it is and merge it with
12:02 - this so the rest of the state will
12:04 - remain unchanged except for answer
12:08 - right and then our action payload which
12:10 - is whatever we've passed it into passed
12:12 - into that
12:13 - meaning
12:14 - the the answer that's been typed in is
12:16 - going to come in here so that's cool and
12:18 - it's the same way for
12:21 - for like add an enemy
12:23 - um so you can see still some familiar
12:25 - right like we're we're not gonna add any
12:26 - more than six enemies
12:29 - right but
12:30 - you see this is basically just
12:33 - changing your state right
12:37 - all right so let's get down because some
12:38 - of these are
12:39 - pretty much the same i'm going to check
12:41 - the answer
12:43 - um
12:47 - okay so we're using eval here which
12:49 - normally you don't want to use eval but
12:51 - chris is explaining that eval is safe
12:53 - because we control the input okay so
12:56 - that's that's cool
12:57 - um
13:00 - let's see listen to see
13:11 - cool
13:12 - this is really cool
13:13 - update problem
13:23 - so i'm just looking at this i'll point
13:25 - out some stuff that's like really
13:26 - different you can see here we're still
13:28 - just
13:31 - taking our
13:32 - our actions and
13:36 - just basically updating state all right
13:38 - like we were before
13:39 - all right but now this has all been
13:41 - abstracted out
13:43 - right and now it's it's in uh our reduce
13:45 - appreducer component
13:48 - the same way set mode
13:51 - invalid action time oh cool and now we
13:53 - have an error so this is a big switch
13:56 - statement
13:57 - right and the default case for the
13:59 - switch is what happens when
14:01 - something is a value is passed that
14:03 - doesn't need any of the other cases
14:06 - right so now we have an error invalid
14:07 - action which that's pretty cool
14:12 - okay and then here's our initial state
14:15 - which looks just like our state did look
14:17 - right
14:18 - all right here's our our operators so
14:20 - that is really awesome
14:24 - so
14:26 - next step is let's pull this down verify
14:29 - that everything works
14:30 - and
14:31 - then maybe we'll merge it so
14:35 - uh let's see
14:37 - i want to make sure i stay on top of the
14:39 - chat here so let me uh now that we've
14:41 - kind of gone through the step one i'm
14:43 - going to go to the chat just for a
14:44 - minute here and answer a few questions
14:48 - and then we'll we'll pull this down
14:51 - and test it out
14:54 - rabbit works javascript says are hooks
14:56 - available in react native as a
14:58 - production feature i didn't think they
14:59 - were mature enough yet yes so as of
15:01 - react native version 0.59.0
15:07 - hooks are available in react native so
15:10 - the current latest version as of
15:12 - yesterday was uh 0.5 9.1
15:16 - so
15:18 - if you update react native
15:20 - to the latest version
15:22 - you can use hooks
15:24 - that's a good question uh it did take a
15:26 - little a little while for hooks to come
15:28 - out for react native after they had come
15:30 - out for
15:32 - regular react
15:33 - um but i think it wasn't too long to
15:36 - wait i i just kept checking like
15:39 - i was watching the thread the github um
15:43 - i guess issue that was talking about it
15:45 - so i knew exactly when they were coming
15:47 - out i was pretty excited about it
15:50 - all right
15:59 - gaming with us uh underscore yt says i
16:02 - am just 11 years old and learned
16:04 - complete html php and sql that's awesome
16:07 - uh keep up the good work you're gonna be
16:09 - by the time you get to be my age you're
16:11 - gonna be uh a genius in um web
16:14 - development
16:19 - let's see
16:27 - all right i'm skipping over some stuff
16:29 - um
16:29 - there are some good comments in there
16:31 - and of course anybody watching can read
16:33 - read along with the chat
16:34 - but i'm just looking for questions right
16:36 - now just to kind of keep things going
16:38 - quickly
16:51 - uh what language okay what language do
16:53 - you think is better for server side php
16:55 - or go um i've used php before i've never
16:59 - used go to be honest with you if you're
17:01 - gonna ask me what my favorite server
17:02 - side language is i'm going to say node
17:04 - so javascript
17:05 - but but that's because i'm i'm
17:08 - most comfortable
17:10 - coding with that right so that's not
17:13 - that's a very like uh
17:16 - that response is very much
17:18 - um
17:19 - based on my experience and not anything
17:21 - objective
17:30 - let's see
17:38 - all right cool i think i got through the
17:40 - uh the questions if i missed your
17:42 - question like go ahead and repost it and
17:44 - i'll try to get to it on the next round
17:46 - through
17:47 - um let's let me
17:50 - make note of where i left off at 8 48
17:56 - 48 okay
17:58 - um
18:01 - let's go back to this and
18:03 - i'm gonna double check the syntax it's
18:05 - been
18:07 - a little while since i've actually had
18:09 - to pull down a pull request from github
18:11 - so let me think
18:12 - um
18:20 - locally let's see if that comes up
18:22 - checking out pull requests locally
18:25 - see if this this is what i want
18:32 - there we go get fetch origin pool idea
18:34 - okay
18:47 - okay
18:51 - so let's do
18:52 - get
18:53 - fetch
18:54 - origin pool
18:59 - i already forget the rest of it give
19:00 - fetch origin pool okay there's slash
19:03 - slash id slash head branch name
19:08 - slash id
19:10 - slash
19:11 - oops not
19:13 - slash two
19:14 - slash
19:16 - oops
19:18 - head and uh we can name the branch
19:20 - whatever we wanted to it doesn't have to
19:22 - be the name of the branch currently
19:25 - for that pool request
19:28 - so i'm just going to name this one
19:31 - [Music]
19:32 - chris hooks
19:35 - okay
19:37 - since chris uh submitted a pull request
19:39 - and the most exciting thing to me out of
19:40 - here is the hook so
19:42 - let's see
19:44 - yay all right awesome now we can
19:46 - do a git checkout
19:50 - and we have the chris hooks branch let's
19:53 - do yarn just to
19:55 - make sure
19:56 - okay so
19:58 - sorry that was hard to see
19:59 - right so
20:00 - always do yarn um
20:04 - just to make sure you have all the
20:05 - packages right it it stinks if you
20:07 - forget to do that and you're testing
20:09 - stuff out and there are errors and
20:10 - things don't work
20:12 - and then you realize you forgot to pull
20:13 - in any new packages so in this case
20:15 - there weren't any new packages but it's
20:17 - just a good habit to get into
20:19 - so you can see we have our new files
20:22 - um
20:23 - where's uh
20:25 - let's see
20:26 - there we go there's our app producer
20:30 - all right so let's actually get to the
20:33 - to the testing
20:34 - here's our app
20:36 - right and
20:38 - we have addition
20:40 - yay subtraction multiplication division
20:43 - right
20:44 - let's do some of these so
20:47 - we'll do one we'll get it right i still
20:49 - never put in the uh
20:51 - being able to use the enter key so i
20:53 - definitely need to do that
20:55 - quit for getting that
20:56 - um
20:59 - let's see
21:00 - cool let's just try
21:05 - try this one
21:10 - what is that 27
21:13 - i think so
21:14 - yay
21:16 - cool
21:17 - all right which one of these do you
21:19 - think looks the best i think i'll leave
21:21 - it on that
21:22 - whatever it looks the best i'm not sure
21:26 - i'll leave it on this pink for now right
21:30 - that's is prob maybe like the least
21:33 - jarring on the eyes right now
21:36 - okay so that looks good it looks like
21:38 - everything works i mean i could probably
21:40 - get out the console and see
21:43 - we had no errors the whole time which is
21:45 - awesome
21:47 - um
21:48 - yeah so
21:50 - what do y'all think
21:51 - are there any objections to merging this
21:54 - pull request
21:56 - if anybody has any objections let me
21:57 - know now within the next minute or so
21:59 - otherwise let's let's merge this pull
22:02 - request
22:04 - so i'm going to
22:06 - give you all
22:07 - just like is it probably just a minute
22:08 - or less to uh to let me know
22:11 - if there's anything
22:13 - uh
22:14 - in this pool request that you think
22:16 - absolutely should not be merged
22:22 - all right
22:23 - we do have a question of why is it
22:24 - called hooks um
22:27 - i think it's like
22:32 - there's there's precedent set already
22:34 - like in other frameworks for having
22:37 - these like hooks into um life cycle
22:40 - methods and stuff so
22:43 - um
22:48 - i think that's why
22:52 - why they went with hooks right so it's a
22:55 - familiar term
22:56 - for for what they're doing so i don't
22:58 - it's not like react came up with the
23:00 - name hooks out of nowhere right there
23:01 - are hooks and like
23:03 - uh i used to do wordpress dev back in
23:05 - the day and so like there are hooks in
23:07 - wordpress right so they
23:10 - uh it's like a familiar design pattern i
23:12 - guess you'd call it
23:22 - nikki says that visual studio code
23:24 - github pull request extension is great
23:26 - for this oh okay cool yeah i've never
23:29 - i never used any of the um
23:32 - like
23:33 - get extension stuff before um
23:38 - maybe i'll have to try that out
23:40 - uh
23:41 - creepy says is atom code editor good
23:43 - enough for the web for what yeah yeah i
23:46 - like adam
23:51 - all right so it looks like there are no
23:54 - um
23:55 - objections to merging this pull request
23:56 - so let's merge it
23:59 - so
24:01 - first thing i'm going to do is you
24:03 - git
24:05 - merge master
24:08 - so this is going to merge anything from
24:10 - master into put into this one now i
24:12 - already know that there's nothing that
24:15 - i've updated in master but i like to do
24:17 - this to first see like
24:19 - have i updated anything for in master
24:22 - since this pull request was submitted so
24:24 - i merge it there that way if there are
24:27 - any merge conflicts or anything if it
24:29 - really messes stuff up i'm messing up
24:31 - the
24:33 - the branch and not master
24:36 - right otherwise if i were to do it the
24:38 - other way around and try to first merge
24:40 - this branch into master
24:42 - i could potentially mess up my master
24:44 - branch
24:45 - and if i were to need to make a change
24:48 - like an emergency change and push that
24:49 - out really quick that could be bad right
24:51 - so
24:52 - this in my mind is much safer here let
24:55 - me make this bigger so we can actually
24:57 - see what's going on okay so everything's
24:59 - up to date like just like i
25:01 - assumed it would be
25:04 - all right now let's do a get checkout
25:08 - master
25:10 - and we'll do git merge
25:13 - and
25:15 - we'll merge the hooks yay
25:18 - okay and
25:20 - it's all i'm just always in a habit of
25:22 - doing that yarn you know after we do
25:25 - anything like that just to be sure okay
25:28 - so now
25:30 - everything's merged in that was an easy
25:32 - merge sometimes you have merge conflicts
25:34 - and when that happens
25:36 - uh you'll actually have to go into the
25:38 - files that have
25:39 - let's say that the same line of code was
25:42 - edited
25:44 - uh
25:44 - you know
25:46 - at this
25:48 - at the same time right like somebody
25:49 - made the pull request they edited their
25:51 - line and then afterwards i did something
25:53 - on master where i edited the same line
25:56 - and then i tried to merge
25:57 - we'd have to decide whose edits are
25:59 - going to stay so you would manually go
26:02 - in there and
26:04 - either get rid of completely of one of
26:06 - the edits or the other or have a
26:08 - combination of the two all right so
26:11 - thankfully we didn't have to do that if
26:12 - you stay on top of your pull request
26:15 - um
26:16 - and
26:17 - get them in there like as they come in
26:19 - you can decrease the chance of having to
26:22 - do uh having to deal with merge
26:23 - conflicts
26:25 - also if you make sure that you recommend
26:27 - that when people do a pull request they
26:29 - only change like very small things
26:32 - that can help as well
26:35 - definitely
26:36 - i don't think we have a contributing.md
26:38 - file yet no but you know you can explain
26:41 - it in there to like remind people
26:43 - you know hey make sure you have
26:45 - everything up to date like frequently
26:47 - merge in what's going on in master into
26:49 - your pr
26:50 - i even like to say like hey before you
26:53 - submit a pull request do one last merge
26:55 - from master to make sure your stuff's up
26:58 - to date and then the person doing the
27:00 - pull request handles any merge conflicts
27:03 - and then and that that can greatly
27:05 - increase
27:06 - your chances of getting your pull
27:07 - request merged not just in this project
27:09 - but in any other project so it's kind of
27:11 - like the polite way uh to do a pull
27:14 - request but
27:16 - all right so that's that's cool and
27:17 - we'll just just to prove like everything
27:19 - still works
27:20 - all right here we go it works and
27:25 - let's just put in
27:29 - um
27:33 - right so that should give us let's just
27:35 - like verify right we're not getting any
27:37 - more than six
27:38 - right
27:39 - hey that's the right one
27:41 - okay so
27:44 - it still works
27:47 - and now
27:48 - cool so i have a few minutes left before
27:50 - i have to start doing um
27:53 - work stuff
27:56 - let me double check
27:58 - my calendar really quick to just see
28:00 - exactly when my first meeting is
28:04 - okay
28:05 - all right we're good so let me go back
28:06 - to the live chat and answer some you
28:09 - know any of the remaining questions
28:11 - um also let me push this i forgot to
28:14 - push this up to get up so let's do
28:17 - git push
28:22 - okay so now that we've pushed that let's
28:24 - check out our repo
28:26 - so i forgot about this
28:30 - so look it's already changed to say
28:31 - merged
28:32 - so i don't have to come back in here and
28:34 - do anything
28:35 - um you know github
28:37 - detects that i've merged this these
28:39 - changes in and it automatically says
28:42 - it's merged so if we go to pull request
28:44 - now there's no more open ones there's a
28:45 - closed one and if we go back to our code
28:48 - let's check contributors this should be
28:51 - yep
28:52 - so now there are two contributors
28:54 - right and uh chris is actually
28:57 - the number one contributor on this this
29:00 - repository right now so uh
29:02 - congratulations on that
29:06 - uh and this is going by commits right so
29:09 - um
29:11 - yeah so if anybody wants to get
29:14 - on this contributors board uh submit a
29:16 - pull request
29:21 - okay so
29:25 - that's it for the code portion now let
29:27 - me finish up with the questions and
29:31 - um
29:33 - then i'll have to get to work
29:37 - sorry i'm trying to find my place
29:48 - all right creepy says how much can i
29:50 - really make as a web developer because i
29:52 - really love web developing and i want to
29:54 - be a front-end developer
29:55 - um okay that's a hard question to answer
29:57 - because it depends on where you're where
29:59 - you live
30:00 - um like what part of the world or even
30:02 - what part of the country you live in
30:04 - and there's a huge range of
30:07 - um
30:08 - salary right which is going to depend a
30:11 - lot upon like your years of experience
30:13 - you know in your company and stuff so
30:16 - um i've seen jobs
30:19 - you know people offering even in the
30:21 - united states
30:22 - offering as low as like
30:25 - uh like fifty thousand dollars for front
30:27 - end developer
30:28 - right and then i've seen jobs offering
30:30 - over a hundred thousand dollars for
30:33 - uh developer for front end developer
30:35 - it's somewhat rare to be over a hundred
30:37 - thousand dollars unless you're in a
30:39 - bigger city
30:41 - if you kind of switch over to full stack
30:43 - or become a software engineer
30:45 - those salaries can get higher than that
30:47 - but it's it's quite a large range
30:49 - salary range in the united states
30:53 - oh creepy says in india yeah honestly i
30:56 - have no idea what the salary range is in
30:58 - india but i know we have a lot of
31:00 - viewers from india so if anybody has any
31:02 - insight into that please
31:04 - let creepy know in the uh in the live
31:08 - chat
31:14 - um nikki says how do you handle merge
31:16 - conflicts in your lock file i delete
31:18 - both and do a fresh install
31:20 - actually that's a great idea to just do
31:22 - fresh install and delete i
31:24 - i
31:25 - never
31:26 - directly edit the lock file and i
31:28 - recommend never delet directly editing
31:30 - your lock file if you don't know what
31:31 - we're talking about it's this yarn lock
31:33 - right here
31:34 - so like this this thing is just kind of
31:36 - like
31:38 - pretty crazy right this is you're not
31:40 - meant to directly edit this this is
31:43 - created by yarn
31:45 - based on
31:46 - your package json and it keeps
31:49 - you know track of all the
31:52 - the packages that are installed all the
31:54 - node modules and all the individual
31:56 - versions
31:58 - uh so
32:00 - yeah if there happens to be a conflict i
32:03 - i think nikki's uh advice is is perfect
32:06 - just
32:07 - delete do a fresh install
32:17 - let's see
32:20 - uh creepy says but would i need a cs
32:22 - degree to be a web developer and can i
32:25 - get higher chances in the future in the
32:27 - united states you definitely don't need
32:28 - a computer science degree i don't know
32:30 - what it's like in india though so i
32:32 - i don't want to give you advice there
32:34 - because i i don't really have knowledge
32:36 - of that
32:46 - uh troll master says web developer
32:49 - doesn't even need a brain these days
32:51 - that is like
32:53 - so perfect for the name troll master so
32:56 - you're staying on brand there
33:12 - hd movies pakistan says dear sir please
33:15 - send your email
33:17 - um
33:18 - you can reach out my email is out there
33:20 - i have a lot of contact info in the
33:22 - description
33:23 - of this video so you know reach out to
33:25 - me on social media and stuff like
33:27 - my my contact info for like every part
33:30 - of my life is out there and freely
33:32 - available
33:33 - uh online so it's not hard to get
33:41 - uh troll master says hmm so a web
33:43 - developer is not a software engineer
33:46 - all right here's
33:47 - when it comes to titles like web
33:48 - developers software engineer front end
33:50 - back end
33:51 - they are
33:52 - so mixed up these days like from company
33:55 - to company
33:57 - it's it's different those will be
33:58 - defined differently right so
34:01 - you could be labeled a front end
34:02 - developer at one job doing the same
34:05 - thing as a software engineer is doing at
34:08 - a different job or a full stack engineer
34:10 - is doing a different job
34:12 - it's it's really
34:14 - so like there are companies that just
34:16 - don't understand the differences
34:18 - um so don't don't take titles like
34:23 - that seriously
34:25 - uh like
34:27 - let's say if you don't think you're a
34:28 - full stack if you think you're just
34:30 - mostly front end don't be afraid to
34:31 - apply to a full stack job because
34:34 - or a software engineering job
34:38 - because the titles really don't mean
34:40 - that much in terms of what you'll be
34:41 - doing at your job at least that's been
34:43 - been my experience
34:46 - i applied for a lot of different jobs um
34:49 - a few months ago and got a lot of
34:51 - interviews and it was like every job had
34:54 - a different title but they pretty much
34:56 - all were doing exactly the same thing
35:02 - uh music license how to become the best
35:04 - coder without a degree
35:06 - um
35:07 - i would say code a little bit every day
35:09 - uh keep trying to code like actual
35:12 - websites and learn
35:15 - you know that's the best thing right
35:16 - like
35:17 - people with a computer science degree
35:19 - don't necessarily code like real things
35:21 - every day right so if you code
35:24 - somebody goes to school for four years
35:25 - for computer science degree but you code
35:27 - every day for four years like real
35:29 - projects
35:30 - you both come out
35:32 - you're gonna have a really good
35:33 - portfolio and you're gonna have a lot of
35:34 - real world experience you probably will
35:37 - be a better coder at that point given
35:40 - everything else being equal right like
35:42 - let's say you both have the same iq and
35:44 - all that you know
35:45 - um
35:47 - right so there's
35:49 - actually coding is the best way to
35:52 - become better at coding right practice
35:54 - just keep practicing
36:02 - and that's what creepy said practice in
36:03 - online courses yeah for sure
36:09 - jacob evans says i don't have a computer
36:10 - science degree and i work as a react
36:12 - developer at discover see that's awesome
36:14 - yeah like i do not have a computer
36:16 - science degree now i have a business
36:18 - degree so i have a college degree but i
36:20 - don't have a computer science degree and
36:22 - i'm a senior software engineer for
36:24 - dick's sporting goods so i do
36:27 - react development
36:29 - for
36:30 - react native development
36:32 - for them right now
36:38 - music glasses how to become a developer
36:40 - and how to earn money online um well i
36:42 - think it goes along with your earlier
36:43 - question like just
36:45 - take online courses and practice
36:48 - um
36:49 - hd movies pakistan says okay sir thanks
36:52 - yeah so let me know if you if you really
36:54 - need to get a hold of me for something
36:56 - you know just send me a message uh on
36:59 - probably twitter would be the best way
37:01 - um
37:03 - yeah that would probably be the best
37:10 - let's see
37:13 - um
37:15 - let's see
37:20 - all right troll master i just deleted
37:21 - that message it wasn't like too bad but
37:24 - i want to keep this safe for children so
37:26 - um
37:28 - that's just to let you know why i
37:29 - deleted that one
37:41 - i'm sorry i probably messed up the
37:43 - pronunciation your name says i'm trying
37:44 - to learn advanced react and redux any
37:46 - recommendations tutorials books etc
37:49 - um
37:52 - let me think
37:54 - what did i see
37:56 - um
37:57 - there are some advanced react training
38:00 - courses i think it's called there's a of
38:02 - course
38:03 - called advanced react training so
38:06 - try to search for that
38:08 - uh
38:09 - i believe there are like online courses
38:12 - that you can do
38:15 - um so i would yeah definitely check that
38:17 - out
38:26 - i'm mad sorry i lost my place
38:34 - uh moshiko says how do you keep
38:36 - motivated with programming
38:38 - um
38:40 - i really like it
38:41 - so it's not that hard to stay motivated
38:44 - um
38:45 - and
38:47 - i don't know there's just like no
38:52 - i want to say like there's there's no
38:53 - choice but to not be motivated really
38:55 - like
38:56 - i work full-time i have a family i have
38:58 - bills to pay like i do i do the work
39:01 - right and i like the work so it's like
39:03 - even if i start to get
39:04 - like where i'm not motivated i still
39:06 - have to go in and do the work every day
39:08 - and once i start to program i i get into
39:11 - it i get motivated so
39:13 - it's not hard for me
39:15 - uh i guess but like what really
39:17 - motivates me like working with new stuff
39:19 - you know working on
39:21 - like cool projects like that that is
39:23 - kind of motivating
39:25 - um
39:27 - so
39:28 - you know learning new things motivates
39:30 - me
39:34 - uh creepy says is it necessary for a
39:36 - full stack developer to learn other
39:38 - backend languages than javascript like
39:39 - php or go it's not necessary unless
39:42 - you're the job that you want
39:44 - says it's necessary right
39:47 - so so much of what you're going to learn
39:49 - is going to be dependent on what you
39:50 - have to learn to do whatever you're
39:52 - getting paid to do
40:03 - let's see
40:14 - uh w3 develop says should i learn
40:16 - javascript php
40:19 - uh with python simultaneously as my
40:22 - first language i don't know why you
40:24 - would want to learn php and python
40:26 - simultaneously
40:28 - um they're both back-end languages
40:30 - unless there's a good reason i then i
40:32 - don't know
40:35 - i don't know why you would need to learn
40:36 - both you certainly could though
40:39 - i mean javascript
40:41 - with one of those other languages makes
40:43 - sense if you want to just do javascript
40:45 - front end and pair them with a python or
40:47 - php backend
40:50 - there's no reason why you couldn't do it
40:52 - it's just i don't understand um that
40:54 - particular combination
41:15 - uh
41:16 - suraj says nowadays which language is
41:19 - used more for development
41:21 - for game and webs
41:24 - okay so javascript is where it's at for
41:26 - web development uh no doubt for game
41:29 - development that's a whole different
41:31 - story i don't know that much about game
41:32 - development so i'm i'm gonna have to
41:34 - defer if anybody else knows more about
41:36 - game development then
41:38 - you know um please let us know but uh
41:41 - you can definitely make web games with
41:43 - javascript but like serious game
41:46 - development like the games that are
41:47 - making millions of dollars like
41:49 - i don't to be honest with you i have no
41:51 - idea what
41:52 - programming languages or frameworks
41:54 - they're using
41:55 - i hear like unity
41:58 - unity i know is a tool i guess that a
42:01 - lot of games use i don't know what the
42:03 - underlying language though is
42:16 - uh ling yini tv says can you share how
42:19 - much you earn as a developer for dicks
42:21 - uh i don't know
42:23 - i'm not exactly sure
42:25 - what
42:27 - dick's sporting goods uh what their
42:29 - opinion is on sharing salary stuff so in
42:31 - general i'm i think sharing salaries is
42:34 - a good thing but seeing as how i just
42:36 - started out there i don't want to do
42:38 - anything um that they would not like
42:41 - right away so
42:43 - um
42:44 - maybe at some point i'll share that
42:46 - but
42:47 - maybe just not right now like i want to
42:49 - be a little bit more careful about it
42:50 - right now so
42:52 - um
42:55 - hopefully
42:57 - hopefully you understand
43:01 - all right i think i've gotten through
43:03 - all the questions and that's good
43:05 - because i definitely have to
43:06 - [Music]
43:07 - get to my job
43:10 - my regular job now uh thank you all so
43:13 - much for watching had a lot of good
43:14 - questions so i love that and um
43:18 - i will be back
43:20 - next week
43:21 - probably wednesday morning of next week
43:25 - um i'm still hoping to do something
43:27 - either like a live stream or a video
43:29 - about graphql on my channel the link to
43:32 - my personal channel is in the
43:33 - description
43:34 - um just haven't had time so maybe this
43:37 - weekend will be the weekend that i get
43:39 - to that so if you're interested in that
43:40 - uh be looking out for that
43:42 - um
43:43 - otherwise yeah thanks again for watching
43:45 - and uh for all your help a big thank you
43:48 - to
43:49 - to chris for the amazing pull request
43:52 - and
43:54 - yeah so i'll see you next week and have
43:56 - a great weekend