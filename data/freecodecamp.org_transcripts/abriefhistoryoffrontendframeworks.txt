00:01 - so
00:02 - hello y'all
00:04 - this is a good way to start off a
00:05 - presentation um today i'm going to be
00:08 - talking to you about the history of
00:09 - front-end frameworks uh this is actually
00:11 - i feel that it's a pretty important talk
00:14 - not because i'm presenting it only
00:15 - because the material that uh i'll be
00:17 - going over today really does help uh it
00:20 - helps explain shape
00:22 - explain why things are the way they are
00:25 - now with javascript you know like i'm
00:26 - assuming there are some developers out
00:28 - there that go on stack overflowing and
00:30 - uh you know as they're looking for the
00:32 - answer they see jquery and they're like
00:33 - what's jquery how does that fall into
00:35 - react or you know they talk about state
00:38 - like what is state like how old
00:40 - i'm hoping tonight we'll be able to uh
00:43 - i'll be able to explain that and help
00:44 - answer some of those questions you may
00:46 - have
00:46 - uh so
00:48 - first of all i wanted to uh thank the
00:50 - houston react meetup group for allowing
00:52 - me to present tonight uh i also want to
00:54 - thank y'all for coming out the last
00:56 - thing that i want is for someone in this
00:58 - room to walk away thinking that you know
01:00 - man that was a waste of time so i really
01:02 - i tried to
01:04 - or i made this presentation uh with the
01:06 - mindset that though there are you know
01:08 - many types of developers in this room
01:10 - from you know uh developers that are
01:12 - self-learning developers that are
01:14 - currently in boot camps to you know
01:15 - developers that have been doing this for
01:17 - decades now so i really feel that
01:20 - people or everyone here will walk away
01:22 - with something
01:24 - another i guess another housekeeping i
01:26 - guess i want to tell y'all tonight we
01:28 - are recording tonight's presentation so
01:30 - in case that you missed something or if
01:32 - you want to follow up on some of the
01:33 - topics i'm going to be talking about
01:35 - know that i will be posting it on the
01:38 - meetup group
01:39 - either later on
01:40 - this weekend or maybe even tonight i
01:43 - don't know yet
01:44 - uh
01:45 - make sure i'll go over everything and
01:47 - then also since another thing i want to
01:49 - mention we can hold all questions to the
01:51 - end just so that we can kind of have
01:52 - like a q a
01:53 - group discussion on some of the
01:55 - questions y'all may have
01:58 - so with that
02:00 - let's get started
02:04 - oh i think i need to click on the
02:06 - presentation
02:08 - there we go
02:11 - so as i mentioned my name is fabian
02:12 - pontello uh plot twist
02:15 - i'm actually an ios developer at taiwan
02:18 - yeah hold y'all um
02:20 - so uh at chai once here in houston we're
02:22 - a digital innovation agency uh we work
02:25 - with most most of our clients are in the
02:26 - enterprise space and what's really cool
02:28 - is because
02:30 - i work on those type of projects i come
02:31 - across some really interesting problems
02:34 - that
02:34 - a lot of people a lot of you know
02:36 - average adult developers won't come
02:37 - across um so things like you know some
02:40 - of the topics i'll be talking today
02:41 - things like architecture uh things you
02:43 - know
02:44 - those topics are
02:45 - before i didn't know anything about it
02:47 - now i'm very very comfortable uh
02:48 - comfortable with them
02:51 - and then also
02:52 - okay so as far as my gloves
02:54 - javascript swift and accidentally hit
02:57 - the space bar twice but uh this is going
03:00 - to be a ben stiller theme
03:02 - presentation i wanted to have some fun
03:04 - with it
03:05 - and uh so i felt you know
03:08 - earlier this week i came across a ben
03:10 - stiller gift i'm like yes this is what i
03:12 - want to have in a presentation like i
03:14 - could really make a story line with ben
03:16 - stiller not it's not that he's my
03:18 - favorite actor or anything he just has
03:19 - some really funny movies so hopefully
03:21 - you know if you don't walk away with
03:22 - something
03:23 - presentation you at least walk away
03:24 - wanting to see one of his movies right
03:26 - so let me hit i'm gonna get you one more
03:28 - time
03:29 - there you go
03:32 - so some of the questions you might be
03:34 - asking yourself
03:36 - you know what is ajax
03:38 - what does state mean what is this thing
03:40 - people say is nbc what is that i don't
03:43 - know
03:44 - why are there so many frameworks
03:46 - and then also
03:48 - what is ecmascript
03:49 - like how does all this
03:51 - tie in together
03:55 - so
03:56 - if you have some of those questions
03:58 - great i really hope that i answer them
04:00 - and if not i afterwards i can answer
04:02 - them i provide you the tools so you know
04:04 - find those answers
04:06 - so let's go over our agenda
04:09 - first
04:10 - foremost
04:11 - what is javascript and why why does it
04:14 - exist
04:15 - then we're going to talk about before
04:18 - the before time
04:20 - and with that we're going to be talking
04:21 - about web versions ecmascript
04:24 - the browser wars it's a really
04:25 - interesting battle been you know took
04:27 - place in the mid 90s or mid 90s to the
04:30 - early 2000s
04:32 - a lot of casualties then afterwards
04:35 - we're going to talk about the before
04:36 - time
04:37 - and then which we're going to be talking
04:40 - about server side rendering and
04:41 - client-side rendering now one thing i
04:43 - want to mention
04:44 - the material that we're going to be
04:46 - going over in these two sections are in
04:49 - no particular order it's just
04:51 - information that you need to have that
04:53 - just because you know the come before
04:55 - ecmascript doesn't mean that it happened
04:57 - before it's just you know information
04:58 - that you need that would want for the
05:00 - audience to know
05:02 - uh before we get to our next section
05:04 - which is the framework era all right
05:08 - so i really had some fun with uh this
05:12 - section here and i realized like we have
05:14 - we had all these battles or wars in
05:16 - between these frameworks right and if no
05:18 - one gives them a name
05:20 - like i'm going to and i'm going to name
05:22 - him whatever i want to call them right
05:24 - so i'm going to call the first war
05:26 - first blood right this is going to be
05:29 - your jquery's
05:30 - your
05:31 - mood tool
05:32 - dojo
05:34 - then
05:35 - someone can i think or if you can
05:36 - already think of what the next war is
05:38 - going to be
05:39 - the mona oh kind of kind of got cut off
05:42 - there but it's the uh
05:44 - the monolithic melee okay i try to have
05:46 - you know some some fun with them and
05:48 - then last is going to be
05:50 - the clash of the components so these are
05:52 - all wars right now we're currently in
05:55 - the third war i don't know if you know
05:56 - this but the first two happened and if
05:59 - you missed it don't worry i'm going to
06:01 - recap what you missed out on all right
06:03 - and then after that
06:05 - what's next like okay fabian we just had
06:08 - these three wars we're in the middle of
06:09 - the third one i'm tired what's coming
06:11 - down the pipeline this is actually going
06:13 - to be my opinion so
06:15 - as i mentioned a few slides i'm an ios
06:17 - developer so my opinion i don't really
06:20 - have a lot of weight behind it but from
06:21 - my
06:22 - observations what i've seen i feel i
06:24 - kind of have an idea where we're going
06:27 - uh
06:28 - next we're going to have the follow-up
06:29 - topics these are just going to be it's
06:30 - going to be a slide that's going to have
06:31 - everything i talked about briefly along
06:33 - with names
06:36 - some videos there are some must watch
06:37 - videos if you're a javascript developer
06:39 - especially a react developer
06:41 - and then lastly we're going to be going
06:43 - we're going to have questions
06:45 - sound
06:46 - good so
06:48 - first
06:50 - what is javascript and why
06:53 - so it was created in 1995 by brennan i
06:55 - when you say his name he worked at
06:57 - netscape
06:59 - it was developed in 10 days think about
07:01 - what you did 10 days ago we're thinking
07:03 - about what's like what's 10 days from
07:04 - now it's going to be what not this
07:06 - sunday the next or next two saturdays
07:09 - from now imagine you create an entire
07:10 - language so next time someone starts you
07:13 - know batching up javascript say hey i
07:14 - want to know how well of the language
07:16 - you could have made in 10 days
07:18 - right
07:20 - next thing
07:22 - netscape and sun's lab joined forces
07:24 - against microsoft so what why this is
07:26 - important is
07:28 - remember
07:28 - brandon brandon you worked for netscape
07:31 - right and so right now this was
07:32 - happening during the early browser wars
07:35 - uh
07:37 - we had you know you had microsoft you
07:39 - had or internet explorer netscape you
07:41 - got a few other browsers and they're all
07:43 - pretty much fighting for you know what's
07:45 - going to be the main browser little did
07:46 - they know this thing called chrome was
07:48 - going to be coming out later but
07:49 - uh for right now they have no idea right
07:51 - so they're all fighting so netscape and
07:53 - sun's lab
07:54 - given the fact that they're much smaller
07:56 - than microsoft they actually join forces
07:58 - like okay hey
08:00 - um we needed to have we need to have
08:02 - this uh
08:03 - this actually the uh the next slide
08:06 - so why was it made to make the to make a
08:09 - browser you know interactive right and
08:12 - so they joined courses
08:14 - to create javascript or javascript was
08:16 - created here and then they later joined
08:18 - some labs you know kind of joined the
08:19 - cause like okay let's let's
08:21 - plain javascript like this is what we're
08:23 - going with is where we're putting all
08:24 - our easter eggs in let's go with that
08:26 - that's the only way we're gonna be able
08:27 - to compete compete with microsoft and
08:29 - whatever you know monster they come out
08:31 - with
08:32 - right
08:34 - so by the way this this whole what's
08:37 - going on
08:39 - this really should be its own talk this
08:40 - reason why i'm briefly going over it
08:42 - like i could spend probably another two
08:43 - hours talking about it just knows a lot
08:45 - of information don't worry the names for
08:47 - you to look into like uh brandon and
08:49 - then another one
08:51 - don't worry it's gonna be later on in
08:52 - the slides but this is really really
08:54 - interesting what happened here i feel
08:55 - everyone should know this but don't
08:57 - worry for today
08:58 - just know a few of these items right and
09:00 - like this next one right here
09:03 - sun's lab playing ownership
09:05 - of the javascript trademark so why is
09:08 - that important well
09:10 - this is why the standard's called
09:12 - ecmascript and not javascript so i mean
09:14 - you know we have like uh es5 es6 esm
09:17 - there's a reason why it's not js5 or
09:19 - javascript one javascript five dollar
09:22 - script six like we have like ruby one
09:23 - ruby two swift one swift two right
09:25 - um
09:27 - so because sun's lab had claimed
09:30 - ownership of it whenever netscape went
09:32 - to uh
09:35 - standardize the language
09:37 - well they ended up at the european
09:39 - computer manufacturer of european
09:42 - commuter manufacturers association don't
09:43 - worry like i said there's some things to
09:45 - be able to learn at a later time
09:47 - fortunately
09:49 - and they couldn't call it javascript and
09:51 - so they ended up falling on the decision
09:53 - that like you know let's call it
09:54 - ecmascript and so for the longest time
09:56 - me as a javascript developer i'm like
09:58 - what is es5 like i was just been doing
10:01 - javascript also if you were talking
10:02 - about this ethyl script like what is it
10:04 - it's the same exact thing the only
10:06 - reason why it's not it's javascript
10:08 - echoscript js jstrip it's all the same
10:12 - thing
10:12 - trademarks the reason why we can't call
10:14 - it javascript i don't know what it is
10:15 - now like that's still the case but
10:17 - that's the reason why we are where we
10:19 - are now
10:21 - uh
10:23 - so this is a bit of a timeline don't
10:24 - worry you don't have to know what's
10:25 - going on here or but just know you know
10:27 - from 1999 all the way to i believe i
10:29 - think it goes down to 2016.
10:33 - a lot happens here right so we have like
10:35 - the creation of some of these browsers
10:38 - as well as some frameworks you know
10:39 - html5 angular is
10:42 - somewhere there i know i saw it earlier
10:45 - we have rails
10:46 - at jquery here over here in 2006.
10:49 - so just know there's a lot that's going
10:51 - on by the way like right now we're kind
10:52 - of like circling this area here
10:56 - right but just uh keep in mind 2006
10:58 - that's a that's a pretty important year
11:00 - for a javascript developer so just keep
11:01 - that in the back of your mind
11:05 - so
11:06 - before the before time
11:08 - right
11:10 - like i said this is these are some items
11:12 - that aren't in any particular order
11:14 - these except these are just
11:15 - this is just material that i would like
11:17 - for you to know before you get to the
11:19 - framework era
11:20 - so web 1.0
11:23 - what that means no dynamic content you
11:25 - know what that means don't worry what
11:26 - 2.0 will explain that i didn't know what
11:27 - it meant uh
11:29 - javascript and css are still you know
11:32 - little babies they don't really have
11:34 - they still don't know who they are what
11:35 - they do really
11:36 - and the major players
11:38 - were netscape and internet explorer
11:42 - and to kind of give you some context i
11:44 - bet you're trying to wonder like what
11:45 - was i doing in 1990 or like what was
11:47 - what was happening what can i kind of
11:48 - like you know attach myself with and
11:50 - remember what it felt like to be in
11:52 - 1990s well
11:53 - around this time
11:55 - ben stiller was filming happy gilmore so
11:58 - in case you you know next time you see
11:59 - this movie just remember oh hey web 1.0
12:03 - that was at the same time
12:06 - so the next one with 2.0 right so it
12:09 - added dynamic html
12:12 - it means javascript and css can
12:13 - manipulate the dom like cool like that
12:16 - that's react in a nutshell really right
12:19 - so this was in the early 2000s uh drag
12:22 - and drop animation you know some
12:23 - examples are going to be like amazon
12:25 - wikipedia youtube so this is in the
12:27 - 2000s right
12:29 - so you can kind of remember like okay
12:30 - what can i attach myself to remember
12:32 - like oh this is when web 2.0 came out
12:35 - well that's when stark skin hutch came
12:37 - out all right so next time you see that
12:39 - movie you know it really takes place in
12:40 - the 70s right or 60s i think 70s just
12:43 - know that oh web 2.0 was around this
12:45 - thing you know around the same time
12:49 - so this is now okay like i said
12:51 - nothing's in any particular order it's
12:53 - just information that i needed to bring
12:54 - to your attention so ecmascript right so
12:57 - now we have this is really really cool i
12:59 - didn't i did i learned this while doing
13:00 - research for this presentation
13:03 - so v3 1999 right v4 there's a reason why
13:07 - you don't hear es4
13:08 - right i don't know if you ever look
13:09 - looked into it but it doesn't exist it
13:11 - was abandoned actually right so then you
13:13 - have b5 and 2009. look how there's a
13:16 - 10-year gap here right look at these
13:18 - look at the dates the stronger makes
13:19 - america 2006 right like all these
13:22 - uh things detective here right
13:24 - v5 2009 5.1 2011. this is actually
13:28 - pretty important as well you know when
13:29 - you use the use strict in your
13:31 - javascript
13:32 - that's actually the standard that they
13:34 - fall on uh which i mean it falls on
13:36 - version 5.1 that standard so some of the
13:38 - ugly parts of javascript that they
13:40 - really want to do away with
13:42 - actually gets you know gets declared
13:44 - here in 5.1
13:46 - uh then you have v6 v7 vn you kind of
13:49 - know from there but there's all this ef
13:50 - stuff right so remember
13:52 - it's ecmascript only because
13:55 - sun's lab had the trademark to be you
13:57 - know had the javascript trademark so
13:59 - whenever they had to create the standard
14:01 - for it they're like okay well let's just
14:02 - call it ecmascript
14:04 - very confusing i'm not gonna lie i
14:06 - didn't learn it until i did this
14:08 - presentation
14:11 - so then now okay that's some information
14:13 - that you know right remember remember
14:15 - those dates i was talking about right
14:17 - now let's enter the browser wars
14:19 - right and so this graph actually ends in
14:21 - 2008 which is when chrome was created i
14:24 - think you can kind of know what happened
14:25 - from there as far as you know who was
14:27 - winning or who started winning from
14:28 - there but let's let's uh not knock the
14:31 - line i couldn't find one that had 1990
14:34 - you know from the 90s all the way till
14:35 - today so i had to just you know
14:38 - this was more important at the time of
14:40 - course so
14:41 - just know 2008 chrome got created things
14:43 - changed again
14:45 - but uh okay this is the timeline from
14:47 - 1994
14:48 - to
14:49 - you know 2008
14:50 - right if you look back
14:52 - this time 99 2009 right things are
14:55 - starting to
14:56 - timelines are starting to uh line up
14:58 - here right
15:02 - so
15:04 - this is what i found very interesting
15:06 - i'm going to read it to you
15:08 - having 10 years in which nothing
15:10 - happened
15:11 - allow for the language to become stable
15:13 - douglas proctor and so what he what he
15:15 - was talking about was
15:18 - this right here i was talking about
15:20 - browse awards right what was happening
15:22 - then was all these browsers you know
15:24 - firefox internet explorer netscape
15:26 - they're still figuring things out
15:28 - especially in the javascript world
15:29 - especially now okay we thought
15:31 - browser compatibility was bad now
15:34 - back then was worse what would have made
15:36 - things 10 times worse is if
15:39 - we had new versions of javascript as
15:41 - these browsers are trying to you know
15:43 - figure things out and try to make things
15:45 - compatible right so it was good it's
15:47 - great that we didn't have a es4 because
15:51 - that would have
15:53 - i don't even know what would have
15:53 - happened might you might have been right
15:55 - in the uh you know front end in java or
15:58 - c or something i don't know but just
16:00 - know that you know these browser boards
16:01 - and the ecmascript you know it all kind
16:03 - of ties in together just i would have
16:05 - hated to work
16:06 - on javascript during this time this is
16:08 - just a headache
16:11 - so it's good
16:13 - so now okay that was some information
16:14 - right like i said you just needed to
16:16 - know that
16:17 - as we're getting into the not this
16:19 - section but the next
16:21 - okay
16:22 - so now we're at the before time
16:24 - so before time i want you to think we're
16:26 - not the frameworks yet we're not a
16:27 - jquery we're just in vanilla javascript
16:30 - right
16:32 - so some terms i want you to know are
16:34 - server-side rendering and client-side
16:36 - rendering
16:38 - so server-side rendering the logic
16:40 - existed i'm going to explain these two
16:42 - so server-side rendering logically
16:44 - existed on the back end it's very
16:46 - expensive what i want you to think of
16:48 - you can rewind the clocks real quick to
16:50 - you know early myspace days or late my
16:52 - space days or early facebook days where
16:55 - you know you're standing there in your
16:56 - profile and you're waiting for you know
16:58 - a new notification and you're like okay
16:59 - command r let me refresh it right and
17:02 - all of a sudden boom you have a new
17:03 - comment or something right but you
17:05 - wouldn't have seen it unless you
17:06 - refreshed it right
17:08 - that's server-side rendering that means
17:09 - all everything that you see on the
17:11 - screen is actually is actually being
17:13 - computed or created on the server and
17:15 - the server that fits that to your
17:17 - browser right
17:21 - then you have client-side rendering
17:23 - client-side the logic exists on the
17:25 - client this is what we are experiencing
17:27 - now this will you know react angular
17:29 - move all that's where you check to see
17:31 - okay is the user logged in the user's
17:32 - logged in let me show them this view
17:34 - because the user not logged in okay i'm
17:36 - going to show them the login screen that
17:37 - used to happen on the server now it
17:39 - happens on the client the reason why i
17:41 - was expensive
17:42 - let's pretend you know you have your
17:44 - little your little website that
17:46 - unfortunately it's just you and your mom
17:48 - that visit right
17:50 - that's not really that expensive but if
17:51 - you think about facebook or somebody's
17:53 - major you know youtube they did
17:55 - server-side rendering imagine having to
17:57 - spit out for millions of requests every
17:59 - single day you know the entire web page
18:02 - it's pretty expensive um so that's the
18:04 - reason why client side exists
18:07 - so like i said this this is going to
18:08 - come into play later this is going to um
18:11 - this is important when we start talking
18:12 - about ajax
18:15 - so we have a meet-up example for you i
18:18 - made an example to kind of illustrate
18:20 - this
18:22 - so in here we have a
18:25 - bootstrap template i had an edit user
18:27 - let's pretend this is a uh a social
18:29 - network that you're building right and
18:31 - this is your
18:32 - your accounts page where you update your
18:34 - username or something like that i don't
18:35 - know right and then also the other
18:37 - sidebar and you do see that we have
18:39 - nfabian you know here that by that's my
18:41 - twitter handler uh github that's how you
18:44 - contact me i probably should put that
18:46 - slide sorry
18:47 - uh in favorites here on the sidebar in
18:50 - the you know the body the main content
18:52 - and also the nav bar over there on the
18:53 - far right it was like hi fabian kind of
18:55 - see that sometimes right so we have it
18:56 - throughout the webpage correct
18:58 - uh if we did server side rendering
19:04 - let's pretend so this is just html don't
19:06 - worry like i want you if you can imagine
19:08 - what you know what it is i'm pointing at
19:10 - then that's fine just know that this is
19:12 - a span of the class of username info
19:14 - this is important for later on but i
19:16 - just want to say like okay this is
19:18 - hard-coded in the you know in the p-tech
19:21 - like my name right
19:22 - so this is server-side rendered
19:25 - what would end up happening
19:26 - is when you hit update on the form which
19:29 - is right here think of an html form
19:32 - right just
19:33 - before client-side running whenever you
19:34 - hit the submit or update what end up
19:36 - happening is the form gets sent up to
19:37 - the server and then the server responds
19:39 - back with uh hey you forgot to fill in
19:41 - this field so if you've experienced when
19:44 - you're uh you know
19:46 - when you're filling out like a 10 field
19:49 - you know
19:50 - form online to sign up for something
19:52 - more than like probably government forms
19:54 - when you whenever this happens and then
19:56 - also you hit submit all the page
19:57 - refreshes and a small little error box
19:59 - says hey you forgot to you know fill in
20:01 - zip code and all your text fields are
20:03 - empty you gotta do it all over again
20:05 - that's server side rendering that's
20:06 - what's gonna happen here whenever i hit
20:08 - update it's gonna go up to the server
20:09 - server's gonna spit back you know an
20:11 - html page and if it's up if it updates
20:14 - my name it's gonna update in all three
20:16 - locations you know the sidebar
20:18 - the uh the main body and the nav bar
20:24 - so now let's talk okay now let's talk
20:26 - about uh client-side rendering
20:28 - so we have the xml http request this is
20:31 - like i said this is straight vanilla
20:32 - javascript i'm true story i've never
20:34 - actually was able to make this work
20:37 - whenever i was when i was learning
20:39 - javascript and i didn't know what jquery
20:41 - was or you know what bootstrap is right
20:43 - you know i just saw this
20:45 - and i'm following those
20:46 - buggies the new boston tutorial and i
20:48 - could never get it to work to save my
20:50 - life i don't know those browsers or what
20:52 - but i end up you know just oh let me
20:54 - just copy this jquery thing and oh they
20:56 - have this ajax we'll talk about that
20:58 - later but just know that yeah this is
21:00 - going to be
21:01 - this is a vanilla javascript at its best
21:04 - so xml http request aka ajax it stands
21:08 - for asynchronous javascript and xml
21:11 - that's what ajax stands for
21:13 - i have actually never parsed a xml file
21:16 - in my life
21:17 - but that's what it stands for it's
21:19 - actually misleading this is on w3school
21:21 - ajax is a miss sleep it's a misleading
21:23 - name
21:24 - ajax applications might use xml to
21:26 - transport data but it is equally common
21:29 - to transport data as plain text or json
21:32 - so just it's a misleading name ajax is
21:34 - all you really got to know um
21:37 - like i said so what ajax allowed us to
21:40 - do it's going to talk about that
21:42 - is it allows us to communicate to a
21:44 - server without having to refresh the
21:45 - entire page
21:47 - so whenever you hit submit we can
21:49 - instead do instead of having to submit
21:51 - the entire form we can just hit this
21:53 - function here we can communicate to the
21:55 - server or to the url which is right down
21:57 - here and we can pass in all this mumbo
22:00 - jumbo i don't really need to know what's
22:02 - going on just know that like okay this
22:03 - is vanilla javascript ajax that it's you
22:05 - know it's bearish this is what it looks
22:07 - like
22:10 - another thing to know
22:12 - uh
22:13 - safari
22:14 - did not end this is where remember those
22:17 - dates i was talking about safari didn't
22:19 - implement this until
22:21 - you know
22:22 - uh 1.2 that was 2004. opera did it and
22:25 - operate in 2005 and internet explored in
22:28 - 2006.
22:29 - all right
22:31 - so let's see except i just want you to
22:33 - remember those dates
22:35 - all right so now we have this form again
22:37 - right
22:38 - so now with our vanilla javascript when
22:40 - you hit update we can instead do
22:43 - is we just run this javascript function
22:45 - this javascript function would do is
22:46 - communicate to the server
22:48 - hey is this is it okay to update their
22:50 - name right and the server says okay yes
22:52 - here's the updated name and then in one
22:54 - of these functions down here it's like
22:56 - line six now you can't see it uh what i
22:58 - do is i get the element by class name
23:01 - username info
23:02 - and i set the inner html to the updated
23:06 - username that's all i did
23:09 - and so that would then update it
23:11 - throughout my entire application
23:14 - cool right
23:16 - now let's talk about the framework era
23:19 - so where things are getting juicy
23:21 - really juicy
23:23 - so this is just a timeline i wanted to
23:24 - show you right look at the dates again
23:27 - 99 2004
23:30 - 2005 oh 2006 this thing called jquery
23:32 - comes out right remember all those
23:34 - timelines all those dates so the stakes
23:36 - is where the magic happened
23:38 - i don't know where i was at 2006 to be
23:40 - honest i think i was in middle school
23:42 - but i know it wasn't nowhere near a
23:43 - keyboard to develop
23:45 - um
23:46 - and then you know i had the rest but i
23:47 - just wanna show you there's a timeline
23:48 - that exists
23:51 - so
23:52 - the framework era what is the framework
23:56 - so it's a library that's all it is
23:58 - uh it's a way to help you organize
24:00 - applications right imagine if you didn't
24:02 - have a framework and you did it your own
24:04 - way with vanilla javascript when you
24:05 - came and looked at my applications and i
24:07 - did it my own way things look very
24:09 - different you wouldn't know what's going
24:10 - on so fortunately frameworks allow us to
24:12 - have some sort of you know common ground
24:14 - uh you know standardized standardization
24:17 - help collaborate
24:19 - and more importantly this is a really
24:20 - good point
24:22 - cross-platform compatibility as you
24:24 - wrote your own web before jquery if you
24:26 - wrote your own website you needed to
24:27 - make an api request when all those other
24:29 - browsers didn't implement the http or
24:32 - xml http request you have a lot of
24:34 - trouble right so having frameworks
24:37 - allowed us to have that cross platform
24:38 - and else to work on all the browsers
24:40 - it made code more reusable right it was
24:42 - really nice to just be able to go to
24:44 - you know your old project or on
24:46 - uh on stack overflow i don't even know
24:48 - if it existed yet and just copy the
24:50 - answer and paste and boom it worked
24:51 - right so that's what frameworks allowed
24:53 - us to do
24:54 - and then also allow us to build out
24:56 - communities and have some great
24:57 - tutorials
24:58 - it's really hard to learn um
25:01 - you know to learn how to do some of
25:02 - these things without a framework
25:03 - especially in javascript because if you
25:04 - go to once tutorials can be done one way
25:06 - and you go to another one completely
25:07 - done a separate way
25:09 - still experience i still experience that
25:10 - today um especially when i was like
25:12 - learning note but it's another day
25:16 - so now we're at our first battle right
25:18 - you've made it this far
25:20 - first blood
25:23 - oh it doesn't come out as smooth but
25:25 - this is a tropic thunder this is ben
25:27 - stiller he's drawing first blood right
25:30 - he's uh he's having some fun with his
25:32 - machine gun
25:35 - so
25:36 - let's choose a side
25:38 - you have prototype
25:40 - you have
25:40 - dojo you have mood tools
25:42 - and then jquery spoiler jquery wins
25:46 - we're not going to talk about all of
25:47 - them we're going to talk about jquery i
25:48 - don't care about the losers
25:50 - just jquery
25:52 - so jquery
25:53 - released in
25:54 - 2006 updates
25:57 - simplified javascript tasks things such
26:00 - as you know applying styles animations
26:02 - dom manipulation and then more
26:03 - importantly ajax like if you can think
26:06 - about it server or client side rendering
26:09 - aka the xml http request that didn't
26:11 - really happen a lot until jquery came
26:13 - out right and so when we saw jquery as a
26:16 - developer i didn't see it but i'm
26:18 - assuming with the javascript developers
26:19 - all the time when they saw they probably
26:21 - thought
26:22 - that's blue steel all right
26:24 - this thing is magic
26:28 - so
26:30 - let's talk about ajax right cause all
26:31 - the other stuff you kind of already know
26:32 - what's going on especially if you're
26:33 - doing react like it what you see it's
26:36 - influenced heavily by jquery so this is
26:38 - really like the grandfather of it all
26:41 - so let's talk about ajax remember this
26:42 - is what it looked like really really
26:44 - ugly yeah i really don't want to see
26:46 - this
26:47 - that's what it turned into
26:49 - that looks very similar to what you're
26:51 - used to like uh please pronounce axiom
26:53 - i've never used it but uh this is what
26:55 - you see in uh you know http with node uh
26:58 - when you see the dollar sign http in
27:00 - angular so this ajax very influential to
27:04 - all the future frameworks moving forward
27:06 - right so next time someone wants to
27:08 - challenge you on something you just
27:09 - bring that up even if it's irrelevant
27:11 - you're talking about cats or you know
27:12 - the rockets just point this and be like
27:15 - look this is what i know what do you
27:16 - know
27:17 - so jquery another important are the
27:19 - events this is really exciting this
27:21 - really did shape frameworks moving
27:23 - forward
27:24 - so what this is is
27:27 - this pound that we have here in front of
27:28 - us is it's an id on an html element and
27:32 - what it's saying whenever this element
27:34 - submits i want you to run this function
27:36 - so this was a form all you have to do is
27:37 - put an id on it and you can attach this
27:40 - listener very similar to what we see now
27:42 - uh
27:44 - and so here is you can get the value
27:45 - instead of doing get element by id you
27:48 - put in the id and you do enter html all
27:51 - that vanilla javascript that turns into
27:53 - this right here
27:54 - dollars you know pound updated username
27:56 - field dot val boom you got your input uh
27:59 - and put a text field and we're just
28:01 - console logging in
28:03 - well let's combine the two let's combine
28:05 - that event listener that we just saw and
28:07 - also venue ajax
28:10 - that turned the code into this it's
28:13 - really really small like i said you
28:14 - really don't have to know exactly what's
28:16 - going on except slides presentation
28:17 - would be uploaded afterwards it was
28:19 - really kind of small but uh just though
28:22 - it really shrunk down
28:24 - um it really shrunk down submitting the
28:26 - form and made it very reusable moving
28:28 - forward
28:31 - then
28:32 - peace was brought to the galaxy all was
28:34 - well we're like okay
28:36 - we're done like man that was a brutal
28:38 - battle but the internet seems like it's
28:41 - going it's not going to be changing
28:42 - anytime soon right
28:44 - and then the monolithic melee happened a
28:47 - lot of people were lost
28:51 - by the way he's not really getting shot
28:52 - is from uh tropical all if you can
28:54 - imagine all my war scenes are from
28:56 - tropic thunder unfortunately but they
28:58 - just really exaggerate the amount of
28:59 - times you got shot you've got like 10
29:01 - more times before this
29:04 - so before we start talking about the
29:06 - actual frameworks there's something you
29:07 - know there's a topic that you need to go
29:08 - over this thing called mvc
29:11 - uh actually coming from ios i deal with
29:13 - nbc a lot and so it's kind of biased for
29:16 - me to be up here because i'm kind of on
29:18 - one side
29:20 - i just like it
29:21 - so anyways
29:22 - pretend you can hear that and we're
29:24 - going to talk about all the frameworks
29:25 - like the rest of the world saw them when
29:26 - they were released you know the golden
29:28 - you know silver bullets that they all
29:30 - were
29:31 - so nbc it's an architectural pattern not
29:34 - a design pattern these are some topics
29:36 - these are uh this is the material i want
29:38 - you to look into later on or whenever
29:40 - you're bored like okay i want to know
29:41 - about something cool and uh programming
29:44 - architectural patterns design patterns
29:46 - two very different things so
29:48 - architectural patterns are a way for you
29:50 - to separate your code base in uh in this
29:52 - case into either models
29:55 - views or controls it needs to fall under
29:57 - one of those three classes or one of
29:58 - those three components you have things
30:00 - like services you have all these other
30:02 - but
30:03 - mvc
30:04 - states that you will have a model a view
30:07 - and a controller and the way that
30:09 - information flows through them it's not
30:11 - very clear
30:13 - don't worry
30:14 - we'll we'll get into that later but just
30:16 - know
30:17 - whenever the javascript developers at
30:18 - the time saw that and like wow this is
30:20 - amazing because we've had jquery right
30:22 - but whenever i want to store user you
30:24 - know user email or user full name or
30:27 - information or state
30:30 - of the user
30:31 - i don't have anywhere to store it like
30:33 - i'd be really nice for me to have things
30:34 - like you know such a thing as a model or
30:36 - controller for me to like be able to
30:38 - separate my code in a way to where i can
30:40 - store user information you know over
30:42 - here and be able to manipulate the dom
30:44 - and you know
30:45 - pump different or pump my data into the
30:48 - view
30:49 - you know all you know with ease instead
30:51 - of doing it jquery way jquery said it
30:54 - was more of a utilities tool for you to
30:55 - manipulate the dom it really wasn't made
30:57 - to maintain user state or to be able to
30:59 - handle uh user
31:02 - state management would say it's not good
31:04 - for state management it's another term
31:06 - for you to look into later on um
31:08 - so the npc it helped with a separation
31:10 - of concern these are some like just
31:12 - programming
31:13 - uh
31:14 - some uh
31:15 - programming jargon or you know buzzwords
31:17 - and so it just means that your code
31:19 - really should be separated into a
31:20 - presentation layer a business layer or a
31:23 - data layer all right
31:25 - if it doesn't fall in one of those three
31:26 - then you're doing something wrong that's
31:28 - what nbc really
31:30 - likes to say in some way but i don't
31:32 - agree with it don't worry redux and all
31:34 - that answers it don't worry
31:37 - make sure
31:39 - i cover everything
31:40 - and so by the way this
31:43 - make sure okay so you want to make sure
31:45 - that
31:46 - your views and your controllers and your
31:48 - models are not are not typing coupled
31:50 - meaning if i were to copy this
31:52 - controller and paste it in this other
31:54 - project that it's not going to complain
31:56 - or don't ever say like hey i don't know
31:57 - what this model that you're talking
31:59 - about or that you're talking about right
32:01 - so it really
32:02 - mvc it's
32:04 - it really wants you to decouple your
32:06 - code
32:07 - but that isn't necessarily the case
32:12 - so let's choose a side so we're in the
32:14 - monolithic frame of the monolithic melee
32:16 - here so we got backbone js got ember we
32:20 - got angular there are a few others but
32:22 - these were you know for the most part
32:24 - were the three big players right
32:26 - and the developers at the time all
32:28 - thought
32:30 - this is all blue steel here all right
32:32 - this the this is what we're looking for
32:36 - so let's use an example let's use a
32:38 - to-do list i mean whenever you learn a
32:39 - new language one of the first things
32:40 - that you do is created to do a to-do
32:42 - list app
32:44 - so we're going to break down this uh app
32:46 - as uh
32:48 - as nbc so
32:51 - for sure we know that
32:54 - our entire uh website our entire view
32:57 - like that is a view right so therefore
32:58 - because we have a view here we need to
33:00 - have a controller we need to have a
33:01 - model even if we don't have anything in
33:02 - it you need to have it right so we have
33:04 - a view meaning we have a controller for
33:06 - the parent
33:08 - class then we also have
33:11 - an mvc here with uh the to-do list so we
33:14 - actually have a list and that means okay
33:16 - we're gonna have a list it's gonna have
33:17 - a table right and we're just gonna feed
33:19 - it in a model an array of to-do's
33:22 - and it's going to display it on its view
33:28 - and then lastly we'll be able to do all
33:29 - right to do we'll have its own view
33:32 - which is going to be a row it's going to
33:33 - have its own controller to be able to
33:35 - handle you know the delete on the
33:37 - right-hand side or the is complete on
33:39 - the left-hand side so it looks like we
33:41 - have like mvc all the way down right it
33:43 - looks really organized like it looks
33:44 - good like if i i can build this you know
33:47 - near spec with mvc and i don't think i'm
33:49 - breaking any kind of any code
33:50 - conventions or any walls right
33:53 - the thing about the thing about nbc that
33:56 - you need to know is uh another term i
33:58 - mentioned separation concerns
34:01 - and also there's another term called
34:02 - single responsibility principle what it
34:04 - means is
34:05 - your code should only be
34:07 - uh should only be in charge above
34:09 - excuse me you should only be in charge
34:11 - of one thing and that's it right so we
34:13 - have a main or if you have an app
34:15 - controller that's controlling the entire
34:17 - app right but it doesn't have control
34:19 - over
34:20 - the uh
34:21 - over the items inside of the
34:24 - list controller right it only needs to
34:26 - worry about the entire view
34:28 - any anything anything that happens there
34:30 - right and so as you
34:32 - as you'll get smaller and smaller the
34:34 - to-do controller the actual row should
34:37 - not communicate back up to its parent or
34:40 - the to-do list controller should not
34:42 - communicate down or up but you should
34:44 - just have you said single responsibility
34:47 - principle it's part of this solid
34:50 - programming
34:52 - term i forget what's acronym
34:55 - that's something for you to look into
34:56 - later if you want
34:58 - so
34:59 - let's look at how all these frameworks
35:00 - should do doing
35:02 - so this is backbone
35:04 - it doesn't actually follow nbc so sorry
35:06 - i lied to you
35:07 - there's no controllers
35:10 - you have a model you have a view
35:13 - controller but already a red flag kind
35:15 - of uh you know a red flag gets thrown up
35:19 - with the events over here on line four
35:21 - it's a view look at line one
35:23 - backbone.view dot extend right then you
35:25 - have events meaning this view is
35:27 - handling events which
35:29 - as you as we remember a view should only
35:32 - be a single responsibility principle
35:34 - should only be responsible for
35:36 - displaying the data and that's it the
35:37 - controller should be in charge of
35:39 - handling events and how it should mutate
35:41 - the view or if it needs to update the
35:43 - model
35:45 - so already
35:46 - you know this is going on okay well hey
35:49 - the developers at the time didn't know
35:50 - that that's fine as an ios developer i
35:53 - know this
35:55 - i hate nbc
35:56 - we deal with this all the time actually
35:58 - in ios
36:00 - mvc stands for massive view controller
36:03 - so it's kind of funny how we just kind
36:04 - of throw everything in the controller
36:06 - and that's a real thing if you google it
36:08 - you will find it
36:10 - so now let's talk about amber
36:12 - amber by far is the closest to nbc so
36:15 - you have a model
36:16 - you have the view and it actually uses
36:18 - handlebar js to uh render out its views
36:21 - and so it just means it allows you to
36:22 - put javascript inside of your xml or
36:24 - inside your html
36:26 - any other controller
36:28 - this actually looks really good i don't
36:29 - have anything bad to say i don't have
36:31 - any experience with backbone or amber
36:33 - angular i do but so from what i see
36:36 - it's actually pretty good
36:40 - now we have angular
36:41 - i actually have i before doing react i
36:44 - had done angular for probably like three
36:46 - years
36:47 - i made all my websites i even made a
36:50 - website for a client
36:52 - in angular and i'm looking to you know
36:54 - change that to rio to react
36:56 - but uh
36:58 - so what made angular
36:59 - interesting is that 2a data binding i
37:01 - don't necessarily know backbone and
37:03 - amber had that out the box at least the
37:04 - way that angular did
37:06 - but what it meant is unless you got a
37:08 - text field and you're inputting
37:10 - information
37:11 - and you had a label where it's excuse me
37:13 - you had a you know
37:15 - a p tag you know some text over here
37:17 - you can set up your controller to where
37:19 - whatever you type inside the text field
37:21 - the uh
37:22 - the labor the text on the other side
37:24 - will update that was really cool
37:26 - remember when i first saw that i'm like
37:27 - that is awesome i love angular not
37:30 - really knowing what was gonna happen
37:32 - later on because when you have a simple
37:34 - to-do list that that's oh man that's
37:36 - that's gold once you get to a real life
37:38 - application which we will in a bit
37:40 - you're going to see how that backfires
37:41 - pretty quick
37:43 - so think about angular
37:45 - i know if anyone here
37:46 - has experience with it or for those who
37:48 - don't
37:49 - so
37:50 - this was another thing that
37:52 - i didn't know
37:53 - you know a lot of developers didn't know
37:55 - the problem at the time so
37:57 - this is my to-do right it's
38:00 - uh open brick open bracket my dash to do
38:04 - snake case right
38:07 - well when that's how you use it right
38:10 - and this is the director this is the
38:11 - html this is the component that you're
38:12 - used to seeing and react right it
38:14 - doesn't just so you just have a small
38:15 - bit of html and whenever you call
38:18 - whenever you use
38:19 - you know this html element
38:22 - it's just going to replace it's going to
38:24 - replace this with that sorry i don't
38:26 - know why it took me so long to say but
38:28 - it's just and so now in order for your
38:30 - javascript to know that it exists you
38:32 - need to have a directive
38:34 - and what this tells us what this does
38:36 - javascript program is like hey if you're
38:37 - going to have a file on line five it
38:39 - says it's going to be to do tpl.html
38:42 - federal tpl that was my personal
38:43 - preferences i like to sub uh
38:46 - sub categorize my
38:48 - my uh my files
38:50 - so it knows that it's looking for that
38:52 - file and
38:53 - remember how this is my dash to do
38:56 - well over here on line two it's actually
38:58 - camel case that was one of the worst
38:59 - things in angular that i felt like i
39:01 - always whenever a directive or a
39:03 - component didn't you know
39:05 - show up on the view the very first thing
39:07 - is i probably messed up on my navy
39:09 - because in javascript it needs to be
39:12 - camel case but in html it needs to be
39:14 - snake case that was the worst thing and
39:16 - then what sucked is whenever i would go
39:18 - back to angular i would always forget
39:19 - and i would just be going in through
39:21 - stack overflow then realizing 20 minutes
39:23 - later that like oh
39:25 - i need to do that
39:27 - and then finally you have a controller
39:29 - as you see there is no model
39:31 - it's and there's no models it's just you
39:33 - know views and controllers and at the
39:35 - time i didn't really know what mvc was
39:37 - so i didn't really know supposed to have
39:38 - it but if i was going into angular today
39:41 - i would think to myself where do i store
39:42 - my data
39:44 - there's a huge learning curve i remember
39:46 - that i would fight and get to my angular
39:48 - programs or i felt like
39:51 - weeks until finally things started
39:52 - clicking you start learning things the
39:54 - angular way and then so views there's
39:57 - just a lot of work so of the three or
39:59 - excuse me of the four
40:00 - screens you see here
40:03 - three of them belong to just views you
40:04 - gotta do all this just for review i
40:06 - didn't know that that was a lot of work
40:07 - at the time i just you know i just
40:10 - learned what jquery was
40:12 - uh
40:13 - yeah that was angular
40:16 - so let's do a real world application
40:17 - right so let's just
40:20 - disregard the names just like okay amber
40:22 - backbone and angular right and these
40:25 - were when i say monolithic frameworks
40:27 - what i meant is that these are
40:30 - uh
40:30 - all in one solution for you
40:32 - okay i mean with react reacts very good
40:35 - about like oh if you want to use jquery
40:36 - with react it can work it can work in
40:38 - angular it can work
40:40 - with just regular plain vanilla
40:41 - javascript
40:43 - but with these other frameworks
40:45 - for example with meteor
40:47 - with meteor if you've had a meteor
40:49 - project if you wanted to use something
40:51 - i'm just going to throw a framework
40:52 - under the buster let's say you wanted to
40:53 - use underscore right you needed to find
40:55 - the under the meteor version of
40:57 - underscore you always need you could
40:59 - just throw in any javascript class or
41:02 - any javascript library in with your
41:04 - monolithic framework oh i remember with
41:06 - angular if you had jquery things broke
41:09 - all the time
41:10 - um
41:12 - so real world application right don't
41:13 - worry we're not looking at any code
41:14 - right so let's break down this
41:17 - this example using empty nbc
41:19 - architecture
41:21 - so we're gonna bring it center
41:23 - we have one npc here right so we have
41:25 - the main body
41:27 - then we have another npc here on the
41:29 - sidebar right so that we can handle you
41:31 - know my name here let's say his friends
41:33 - had like parentheses and it said like oh
41:35 - you have 400 friends right so it
41:36 - controlled yeah i had a controller for
41:38 - all this information and a controller
41:40 - for all this information here in the in
41:42 - the
41:43 - main body oh and then also
41:45 - we need a controller for the nav bar too
41:47 - right it's like alright cool like i was
41:48 - able to split up my application into the
41:51 - section and it looks it looks good
41:54 - yeah
41:55 - well
41:57 - okay well now let's let's go and
41:58 - implement some of the code for me to
42:00 - update the text or update the username
42:02 - right
42:03 - there's no models remember that
42:05 - okay when i hit update it updates it
42:07 - here but oh wait
42:09 - oh y'all see the problem
42:11 - uh
42:12 - i need to update it over here in this
42:14 - controller
42:15 - and also in the nav bar but then that
42:17 - breaks our single responsibility
42:18 - principle that we had mentioned earlier
42:20 - like i the controller shouldn't
42:21 - communicate to other controllers it
42:23 - shouldn't communicate up so if let's say
42:25 - we had a parent controller around this
42:27 - this controller should not communicate
42:28 - back to the parent for the parent then
42:30 - to tell the other one like that's
42:32 - already
42:33 - we're in a bad spot
42:35 - we're like okay you know what all right
42:37 - fine i'm just gonna do this one time
42:39 - four hours later you're gonna do it
42:40 - about ten more times and then two months
42:42 - later you're going to be coming across
42:43 - some code you're going to come across a
42:45 - bug like how does this even happen not
42:47 - realizing that you have this thing
42:49 - called side effects that are happening
42:51 - in your code when you update it here all
42:53 - of a sudden you have a side effect on
42:54 - the other side of your application
42:56 - that updates and you're just like i
42:58 - don't know where this book came from
43:00 - so this is
43:02 - this is the problem that you have that
43:04 - you come across with nbc especially in
43:05 - javascript especially with ios
43:09 - so
43:10 - let's rewind real quick during this
43:12 - while you're developing this application
43:14 - and your mvc monolithic framework
43:17 - you're thinking you're like this you're
43:18 - having fun everything's awesome
43:20 - everything's groovy right not really
43:22 - knowing what you were doing is this
43:27 - you're just you just set yourself up to
43:29 - fail so bad like as i did with my
43:31 - angular application
43:34 - that is gasoline
43:35 - now the next scene is when things go up
43:38 - in flames but they didn't have a gift
43:39 - that had all of it so plus i wouldn't
43:42 - put it down
43:44 - i'll say one more time
43:47 - okay so the issue is to go back
43:51 - controllers get bloated
43:52 - because really they're in between the
43:54 - models and the views so
43:57 - by nature we want to just like oh we'll
43:59 - just throw this in this controller not
44:00 - really thinking that like oh it really
44:02 - needs to be somewhere else but wait it
44:04 - needs to either be a model of you or a
44:06 - controller so i kind of don't know where
44:07 - to put this things like oh i need to
44:09 - make a quick api call to you know send
44:11 - up you know analytics or something right
44:13 - as soon as you do that you broke the
44:15 - single responsibility principle you
44:16 - should your controller should only
44:17 - control what uh it is i guess classified
44:21 - so or whatever components it is in
44:23 - charge of
44:25 - but
44:26 - oh also data bindings data binding is
44:28 - bad at least for me every single time
44:30 - someone says like observable to me it
44:32 - kind of like
44:33 - gives me a
44:34 - you know i start getting this pain in
44:37 - the back of my neck when i hear
44:38 - observables it's not a bad word or
44:39 - anything and it's still used very much
44:41 - today there's
44:42 - very valid use cases but i just
44:44 - automatically think about two-way data
44:45 - binding and i just remember you know the
44:47 - headaches that came with that but don't
44:50 - let that discharge you
44:52 - like we'll fame you i followed the
44:53 - diagram like
44:55 - well how come it's not working
44:57 - well the thing is nbc if you remember
45:00 - the photo that you saw earlier that was
45:02 - this top one
45:03 - and if you look at the arrows the way
45:05 - they're communicating is one way right
45:06 - if you look at these other ones these
45:08 - are still mvc patterns as you can kind
45:11 - of see there really is no
45:13 - set standard on how how your application
45:15 - communicates between your models your
45:17 - views and your controllers so for
45:18 - example this view actually observes the
45:21 - model and it communicates back to the
45:23 - controller but then also the controller
45:26 - communicates down to the model which is
45:28 - being observed by the view the
45:30 - controller also updates with what
45:32 - this is what i'm talking about like
45:33 - there is especially when you look at
45:35 - apple's documentation and bring up a
45:37 - model view controller
45:39 - it's just it's an idea that us
45:42 - developers fell in love with not really
45:44 - understanding the repercussions of it
45:46 - because we really don't have a set
45:48 - standard of this is the way you
45:49 - communicate
45:51 - and also when nbc was created uh it was
45:54 - created small talk or with small talks
45:56 - of programming language back in the 70s
45:58 - i believe um back then the things such
46:01 - as the internet didn't exist web
46:03 - browsers like mvc was meant to be you
46:05 - know
46:06 - very small components like i feel when
46:09 - we're developing when uh we're
46:11 - developing out these frameworks or you
46:13 - know when we have this problem we just
46:16 - you know like oh nbc like we have a
46:17 - model future let's just let's just use
46:19 - that
46:21 - i don't i personally don't believe it
46:22 - was meant for its use case today but
46:26 - that is uh
46:27 - that's to be seen
46:30 - so lastly my other issues that i had and
46:32 - this is what react answered for me
46:35 - look at the way the html is like it
46:37 - really does this is invalid html when
46:40 - you see ng repeat if this is a string
46:42 - like framework and framework so that's
46:44 - not valid html at all
46:46 - what this does is this does a loop
46:48 - um
46:50 - so this is a problem that i had
46:53 - uh material over
46:54 - and so when we talk about let's say we
46:57 - talk about react in the next section
46:59 - know that the standard or the best
47:01 - practice was to have your html in a
47:04 - separate file within your javascript
47:06 - having the having html in your
47:08 - javascript was bad you didn't do that if
47:10 - you did that that was rookie
47:14 - so now
47:16 - we're at the clash of the components
47:17 - this is the war that we're in now people
47:19 - prepare yourself
47:20 - i don't care if you're tired
47:22 - all right you need to get up continue
47:25 - moving
47:28 - so
47:29 - clash of the components we got react
47:32 - blue and polymer
47:34 - um
47:35 - i was going to talk about react not just
47:37 - because well
47:39 - hey we're in a you know a react meetup
47:41 - that has nothing to do with the fact
47:42 - that i don't have any experience with
47:43 - blue or polymer either but it's mostly
47:45 - because we're in a react meetup right
47:50 - so with react it was announced in js
47:52 - comp 2013 as you see it's it's
47:54 - underlined if you have not seen this
47:56 - conference or at least the announcement
47:58 - of it i suggest you do so it's like
48:00 - really it's crazy whenever you see the
48:01 - announcement of some of these things
48:02 - it's like when you're out here
48:04 - re-watch the uh announcement of the
48:06 - iphone like it was crazy seeing people's
48:08 - reaction whenever they did the pinch to
48:10 - zoom people lost it they're like oh my
48:11 - god it's amazing right well that was the
48:13 - same thing happened 2013. now it's
48:15 - normal to us but back then it was
48:16 - groundbreaking right
48:18 - so react it discourages mutation
48:22 - uh
48:24 - it renders a dom like a server-side
48:26 - render uh if you remember server-side
48:28 - rendered a rendering as we mentioned
48:30 - right like you hit the server and the
48:31 - server re-renders the entire page well
48:34 - it's kind of similar to that if you
48:35 - think about it right just only running
48:37 - on your client
48:38 - and code becomes more predictable
48:40 - uh since you break everything down in
48:43 - such a way to where okay it's just the
48:45 - view right and we stepped away from the
48:48 - you know so uh
48:50 - one size fit all or you know a solution
48:52 - for all your problems with the whole
48:54 - monolithic era now we're in just the
48:56 - view okay i want to decide how i
48:59 - architect my code
49:02 - and so
49:03 - back in uh the jsconf 2013 this was the
49:05 - actual slide that was used
49:08 - and uh as tom
49:10 - aquino at least how you pronounce his
49:12 - last name
49:13 - tom appino don't worry i said this is
49:14 - gonna be the lyrics like i watched all
49:16 - his talks he's really a very good
49:18 - presenter but really interesting stuff
49:20 - uh so they said
49:22 - that we took a huge step backwards in
49:24 - terms of the main tillage
49:25 - maintainability of our code simply
49:27 - because we were embedding markup inside
49:29 - of our javascript so remember remember
49:31 - that slide i showed you before where the
49:32 - html was separated from the javascript
49:34 - well that was because that's what the
49:35 - standard was for years
49:37 - react completely just you know made
49:40 - everyone rethink the way things were
49:41 - done and they actually had you know
49:43 - people tweeting saying that
49:45 - what the hell is facebook doing like
49:47 - what is this this is bad
49:51 - and then
49:52 - entered redux right or flux right
49:54 - because it discouraged mutation this is
49:57 - actually a uh
50:00 - a functional uh
50:02 - assuming redux was inspired by the elm
50:05 - architecture which
50:06 - is a unidirectional theta flow these are
50:08 - just terms this is jargon terms but it
50:11 - just means that like okay the whole
50:12 - two-way data binding that doesn't exist
50:14 - anymore whenever you mutate something or
50:16 - you change something you make an
50:18 - announcement and this announcement then
50:20 - goes to a reducer and then a reducer
50:22 - goes down to the store and the store
50:24 - updates and then that causes a re-render
50:27 - right the way that the flow is actually
50:29 - going to be the next slide
50:30 - this is a unidirectional
50:32 - flow
50:33 - of data
50:34 - you hear the term called pure function
50:37 - what that means is you never mutate the
50:39 - object that's being you know that's
50:41 - being input into the function you always
50:43 - return a new object
50:46 - so the redux the unidirectional data
50:47 - flow influenced by the l architecture
50:51 - up and go over
50:53 - make sure okay and so when you update
50:55 - things like state
50:57 - this is why react is so scalable right
51:01 - with mvc or you had other previous
51:03 - frameworks you end up having these
51:05 - you'll go really really fast building up
51:06 - right and all of a sudden you reach a
51:07 - plateau and no matter what you have the
51:09 - uh i think it's the
51:11 - someone pregnant what's the it's not the
51:13 - end man or whatever the ghost where like
51:15 - once you add people you actually start
51:17 - slowing down forgot the terms
51:20 - but
51:22 - with this as uh as top of keynote
51:24 - mentioned they actually sped up creating
51:26 - features because code becomes more
51:28 - predictable with react and redox or flux
51:31 - um
51:33 - i'm sure just talk about your function
51:35 - okay so now what's next
51:37 - like what do i think is next i said this
51:39 - is
51:40 - subjective i'm an ios developer for one
51:43 - i actually think
51:44 - something that i learned uh really early
51:47 - on is that history repeats itself no
51:49 - matter what whether it's in programming
51:51 - and human nature history always repeats
51:53 - itself right now we're talking we're
51:54 - going crazy over these you know
51:56 - functional way of programming well that
51:58 - existed a long time ago way before i was
52:01 - born so why are we now making a big deal
52:02 - about it you simply do is we grab
52:05 - something that's already existed and we
52:06 - you know
52:08 - wrap it up and call it something new and
52:10 - we throw you know an electron or a
52:11 - neutron symbol on it it's like boom
52:13 - create a new framework right
52:15 - so let's just think about like okay we
52:18 - just had we went to this utilities
52:20 - framework and went through the mvc
52:23 - uh era then now we're at the view right
52:25 - i personally feel
52:27 - the next thing that's going to go is
52:28 - going to be data
52:30 - not go but i mean what's going to be
52:32 - reinvented is data uh i'm hoping or
52:35 - predicting i don't know uh that we will
52:38 - move away from apis and start moving
52:40 - towards web sockets things because right
52:42 - now the world is all about real time
52:44 - right like i want to get notification i
52:45 - want it now okay apis don't really
52:48 - uh give me that unless i do you know
52:50 - constant polling of me of my api so i
52:53 - feel web sockets is going to be the way
52:54 - right
52:55 - instead of updating user information
52:58 - through an api we're actually going to
52:59 - send it off through a websocket and
53:01 - update it right then it's going to
53:02 - update all your phones uh so that's one
53:04 - thing that i'm assuming we're going to
53:06 - go
53:07 - as far as like who's going to come out
53:09 - winning from the component clash of the
53:11 - components i honestly think it's going
53:13 - to be react not because i'm going to
53:14 - react meet up but because coming from
53:17 - the ios space i know
53:18 - how much how much work goes into just
53:21 - creating an ios app in terms of like
53:23 - there's a reason why phonegap or cordova
53:26 - don't work it's because and why react
53:28 - has become so successful with react
53:30 - native
53:31 - is because react native actually
53:33 - communicates down to the javascript core
53:35 - library and it's a library inside of ios
53:39 - that allows
53:40 - objective-c or swift code to execute
53:42 - javascript
53:43 - and vice versa right so that's how react
53:46 - native in a nutshell works
53:48 - so
53:49 - boo
53:50 - and polymer they've got a long way to go
53:53 - if they're if they have even if they
53:54 - even think they're going to be competing
53:56 - with uh react native in the future right
53:58 - and so i feel that since everything's
54:00 - moving in mobile
54:02 - that for as a developer i imagine in
54:05 - five years now a single javascript
54:06 - developer will be able to create
54:08 - applications for you know of course the
54:10 - web
54:11 - mobile using react native
54:13 - uh
54:14 - actual platforms using your react native
54:16 - or something like electron
54:19 - so that's where i feel that that's going
54:21 - um and so i mentioned like history
54:23 - repeats itself right so
54:26 - with that
54:27 - you see
54:28 - yeah i'll just leave it at that
54:31 - uh
54:32 - so the last thing is topics and people
54:34 - right so the people that i really find
54:36 - influencers people that i like watching
54:38 - talks over when i go on youtube and as
54:40 - like to recommend it if i see tom
54:41 - aquino's name i'm stopping what i'm
54:43 - doing and i'm watching this video really
54:45 - good presenter he's the manager of the
54:47 - react team right pete hunt is also part
54:50 - of the reacting has some really good
54:52 - presentations uh
54:54 - especially during the 2013 2015 uh those
54:57 - presentations were really good because
54:58 - that's whenever you know the world the
55:00 - javascript world was really changing uh
55:02 - to how we know today
55:05 - so brandon he's actually the creator of
55:07 - javascript
55:09 - robert uncle bob martin this guy is
55:12 - amazing he's funny too uh he if you want
55:14 - to know about architecture you're going
55:15 - to learn about things like mbbm mvc
55:18 - mvp talk about things called vipers and
55:20 - ios uh anything like architecture will
55:22 - start like getting you know want to
55:24 - become not only a better developer but
55:25 - really understanding and be able to talk
55:27 - the jargon
55:29 - robert uncle bob martin is your guy
55:32 - john reed he actually comes from an ios
55:34 - background but most of his presentations
55:36 - go over concepts like you know
55:37 - architecture test driven development he
55:40 - is very good and they also talk they all
55:42 - talk about nbc not the negative not the
55:44 - negative like that i did but they
55:45 - explained
55:46 - since they were alive during its
55:48 - creation they explained what its actual
55:51 - intent was uh lastly like douglas
55:53 - crawford he is uh actually just started
55:56 - watching durian while creating this
55:57 - presentation he actually kind of goes
55:59 - hand in hand with brandon he a lot of
56:01 - his talks are on the early days of
56:03 - javascript this is where i learned a lot
56:04 - of the you know the browser wars and you
56:07 - know what equal script how that all kind
56:09 - of
56:09 - transpired
56:11 - topics and like i said i'm going to be
56:13 - posting this on the web
56:15 - for you to you know later
56:18 - later click on or later
56:20 - do research on but the topic is
56:22 - unidirectional data flow
56:24 - architectures in javascript
56:27 - and some must watch videos for all
56:29 - javascript especially react developers
56:31 - are the
56:33 - shooting white i'm sorry this is like of
56:36 - the ugly yellow that's really hard to
56:37 - see but it's going to be the jscon 2013
56:40 - and that's when react was being
56:42 - announced and also the hacker's way of
56:44 - rethinking web development at facebook
56:46 - this
56:47 - was uh eye-opening i remember whenever i
56:50 - was applying this you know these type of
56:52 - architecture like redux and flux to ios
56:54 - i didn't really understand it i just
56:56 - knew it was what i needed for my team
57:00 - uh so these videos really did help you
57:02 - know
57:03 - help me understand what was going on
57:05 - what's up
57:06 - how we got to where we are today
57:10 - so last stop granted does anyone have
57:13 - any questions