00:00 - quick demo of this video tutorial this
00:02 - is a mean stack beginners tutorial in
00:04 - this tutorial we will develop a mean
00:07 - stack application from scratch to
00:09 - implement credit operations insert
00:11 - update and delete in order to insert a
00:14 - new employee you can do this
00:19 - now click on submit
00:21 - so here we have inserted a new employee
00:24 - inserted employees will be listed inside
00:26 - this table here in order to update a
00:29 - record you can click on this pencil icon
00:31 - here
00:32 - instead of uk i will update lender now
00:36 - click on submit so here you can see the
00:38 - dos message updated successfully here we
00:40 - have updated in this tab list also so
00:43 - these employer codes are inserted into
00:46 - this employees collection in mongodb
00:49 - here
00:50 - if you want to delete error code you can
00:52 - click on this delete icon here it will
00:55 - ask for confirmation are you sure to
00:57 - delete this record or not click on ok so
00:59 - here we have deleted the record for
01:01 - fiona agree so from this tutorial you
01:04 - can learn how to develop an enterprise
01:06 - application in mean stack so please
01:09 - watch till the end of this video
01:10 - tutorial so here is my vs code editor i
01:13 - will be using this ide for the
01:15 - application development you can use any
01:18 - ide as you wish basically in mean stack
01:21 - application we will have node.js api in
01:23 - server side and as a server we will use
01:26 - npm package express for database we will
01:30 - use nosql mongodb and finally we will
01:33 - have the client side it will be
01:34 - implemented in angular 5. before
01:37 - starting this project we have to ensure
01:39 - that we have a working means stack
01:41 - development environment first of all we
01:44 - need node.js itself for that you can go
01:47 - to this website nodejs.org
01:50 - then you have to download the
01:51 - installation file as per your operating
01:53 - system in my case i have windows
01:56 - operating system with 64-bit so we have
01:58 - to download either of these two files
02:01 - here we have this table version and here
02:03 - we have the beta version better download
02:05 - this table version 8.11.1
02:08 - node.js installation is so simple you
02:11 - can complete the installation process by
02:13 - pressing a bunch of next buttons in the
02:15 - installation wizard after installation
02:18 - just open command prompt
02:20 - then type the command node space minus v
02:23 - hit enter so here you can see the latest
02:26 - installed version in my system i have
02:28 - already installed node.js 8.11.1
02:32 - after node.js we have mongodb first of
02:35 - all go to this website mongodb.com
02:38 - then click on download here
02:40 - then go to community server then select
02:43 - the installation file as per your
02:45 - operating system in my case i have
02:47 - windows so i can download this msr
02:49 - installer file installation of mongodb
02:52 - is also simple you just need to go
02:54 - through few next buttons after
02:56 - installation we need to start mongodb
02:58 - for that we need to know the
02:59 - installation directory where we have
03:01 - installed mongodb in my case i have
03:04 - windows operating system so it will be
03:06 - there in programs files so here is my c
03:08 - drive inside that we have programs file
03:11 - and here we have the mongodb folder
03:13 - server 3.6 bin folder here we can see
03:17 - the file mongod.exe
03:19 - in order to start the server we have to
03:21 - run this application from our command
03:23 - prompt so let's look how we can do that
03:26 - in order to start the mongodb we have to
03:29 - navigate inside this folder for that in
03:32 - command prompt you have to run this cd
03:35 - command after running this command we
03:37 - will be inside this uh folder directory
03:40 - here bin folder from there we have to
03:42 - run this
03:44 - mongod.exe file using this command in
03:47 - order to run this file we have to pass
03:50 - this command line argument db path here
03:53 - we have a folder path to a folder
03:56 - hyphen dot data you can name the folder
03:58 - and you can keep the folder anywhere you
04:00 - wish basically inside this folder
04:02 - mongodb will store the files related to
04:05 - the database that we have created okay
04:07 - in my case
04:08 - it is here
04:10 -  hyphen dot data so whenever we
04:13 - want to work with mongodb we have to
04:15 - start the server using these two
04:17 - commands here in order to make the
04:18 - process more simple i have saved these
04:21 - two commands in a notepad then go to
04:24 - file then save as then name the file
04:27 - here finally you have to add the
04:29 - extension dot b80 then click on save in
04:33 - my case i have already saved this file
04:36 - in my desktop you just need to double
04:39 - click on this file so that it will start
04:42 - the mongodb so here we have started the
04:44 - mongodb with this batch file so here we
04:47 - have installed and started mongodb
04:49 - server now we need a management tool in
04:52 - order to work with mongodb in latest
04:54 - versions of mongodb it comes with a
04:57 - default management tool here it is
04:59 - mongodb compass or you can use this uh
05:03 - software
05:04 - robomongo
05:06 - okay so in my case i'll be using this
05:08 - one default management tool mongodb
05:11 - compass community double click on it in
05:13 - order to connect with mongodb we have a
05:16 - connection wizard here it is already
05:19 - filled with default configurations since
05:21 - we have no change from default
05:23 - configuration
05:24 - you just need to click on this connect
05:26 - button here
05:27 - as a first step towards the application
05:29 - development let's create a database for
05:32 - that you can click on this create
05:33 - database button here then you have to
05:36 - name the database i will name this
05:37 - database as cred
05:40 - db to create a database in mongodb
05:43 - combust management tool we need to have
05:45 - at least one collection so i will name
05:48 - the collection as
05:50 - employees okay if you are not familiar
05:53 - with nosql database collection means
05:56 - tablets in sql database table rows in
06:00 - sql database is treated as a record in
06:03 - nosql database
06:05 - column in sql database is treated as a
06:08 - field in nosql db
06:10 - so here we have the collection
06:13 - employees inside that we will have a
06:16 - number of records related to each
06:18 - employee now let's create the database
06:21 - click on create database so here we have
06:24 - the newly created db for now we don't
06:26 - have any record inside this employees
06:28 - collection now back to required
06:30 - softwares for mean stack app development
06:33 - here we have the angular cli for angular
06:36 - 5 development we need to install angular
06:38 - cli in order to install the package you
06:40 - can use this command npm install minus g
06:44 - then angular cli so that's it here we
06:47 - have a mean stack app development
06:49 - environment now back to vs code editor
06:52 - first of all we will create a server
06:54 - side app with node.js
06:56 - after that we will implement the client
06:58 - side using ankula 5. so i am going to
07:01 - create a mean stack application from
07:03 - scratch inside this project folder so
07:06 - first of all we have to open this folder
07:08 - in my vs code editor so let me copy this
07:11 - folder path from here then back to the
07:13 - vs code then go to file open folder
07:17 - then paste the directory here hit enter
07:20 - then click on select folder now let me
07:22 - create a new folder for node.js
07:24 - application i will name this folder as
07:27 - node.js then go to this folder node.js
07:31 - we have to open command prompt inside
07:33 - this folder directory for that you can
07:35 - use the shortcut hold shift then right
07:38 - click on mouse
07:40 - then click on this open command window
07:42 - here in order to create a node.js
07:45 - application first therefore we have to
07:47 - have
07:48 - a package.json file in order to create
07:50 - the package.json file you can use this
07:53 - command
07:54 - npm
07:55 - init
07:56 - hit enter then it will ask configuration
07:59 - details about the project package name
08:02 - will be nodejs hit enter then version
08:05 - description
08:06 - entry point
08:08 - test command
08:09 - leave it as it is hit enter
08:13 - so here we have created a package.json
08:16 - file it is filled with these default
08:19 - configuration is this okay type yes here
08:22 - then hit enter so you can see the newly
08:24 - created package.json file here in order
08:27 - to work with this node.js application we
08:29 - need some npm packages we need npm
08:32 - package express to act as a server then
08:35 - we need mongoose it will act as a
08:37 - mongodb or arm finally we have body
08:40 - parser it allows us to send json data to
08:44 - node.js api so let's install these
08:47 - packages npm
08:50 - in store first of all we have express
08:53 - mongoose
08:55 - after that we have body hyphen parser
08:58 - now we need to save these dependencies
09:01 - inside package.json file for that you
09:03 - can do this hyphen hyphen save hit enter
09:07 - so here we have successfully installed
09:09 - these three packages mongoose express
09:12 - body parser now let's start coding
09:15 - inside this application we have already
09:17 - created a db cred db here now we
09:20 - are going to connect the database from
09:22 - this node.js project for that i'm going
09:25 - to create a new file here i will name
09:28 - this file as db.js
09:31 - in order to connect mongodb we will use
09:33 - npm package mongoose that we have
09:36 - already installed so first of all we
09:38 - need a request statement for mongoose so
09:41 - here it is here we have a constant
09:43 - mongoose it requires mongoose package
09:46 - after that we can make the connection
09:49 - using the object mongoose by calling
09:51 - this function connect as a parameter for
09:54 - this function we can pass the mongodb
09:56 - connection details here we have mongodb
09:59 - protocol then localhost we have
10:01 - installed this package inside this
10:03 - default port number
10:05 - 27017 after that we have the database
10:08 - name creditdb after the mongodb
10:11 - connection we can call a callback
10:13 - function like this it has a single
10:16 - parameter err it stores possible errors
10:19 - while connecting the database if there
10:21 - is no error we will print this message
10:24 - into console window mongodb connection
10:26 - succeeded if there is any error we will
10:28 - print this message error in db
10:30 - connection with detailed error object we
10:34 - have called this json stringify function
10:36 - in order to convert this object into a
10:39 - string with indentation of two space
10:42 - character most of the case we need to
10:44 - establish mongodb connection outside
10:46 - this db.js file so we need to export
10:49 - this constant mongoose for that we can
10:51 - do this module dot exports is equal to
10:54 - mongos now let me save this file then
10:57 - open command prompt here in order to run
11:00 - this db.js file we can do this
11:03 - node
11:04 - space
11:05 - db dot js hit enter
11:08 - sorry here we have created this db.js
11:11 - file outside this node.js folder now let
11:14 - me move this file into this node.js
11:16 - folder then back to
11:19 - command prompt let me run this command
11:21 - again hit enter so here you can see the
11:24 - message mongodb connection succeeded now
11:26 - if we change something inside this
11:28 - node.js project we have to rerun this
11:31 - application inside this command prompt
11:33 - using this node command
11:35 - i'm going to add two more dots at the
11:38 - end of this mongodb connection succeeded
11:40 - message in order to see these updates
11:44 - you have to rerun this application for
11:46 - that use the shortcut ctrl c twice
11:49 - then run the command again so here we
11:52 - have the updated dots now let's check
11:55 - how we can avoid this execution restart
11:57 - after application update for that we
12:00 - have to install this npm package nodemon
12:03 - in order to install this package
12:05 - globally inside your system you can use
12:06 - this command npm install minus g then
12:09 - node mod now let's look how we can use
12:12 - node mode now let me quit the current
12:14 - execution for that you can use the
12:16 - shortcut ctrl c twice then run this
12:19 - application using nodemon instead of
12:21 - node
12:22 - node
12:23 - mod
12:24 - then db dot js
12:27 - hit enter so here we have started this
12:29 - node.js project using node mod from now
12:32 - onwards we don't want to restart this
12:34 - execution after any updates inside this
12:37 - node.js project let me remove these two
12:40 - dots from here then let me save this so
12:42 - here you can see that nodemon already
12:44 - restarted the application for new
12:47 - changes now let's create the root
12:49 - javascript file index.js
12:54 - first therefore we need request
12:55 - statement for express and body parser so
12:59 - here it is here we have a constant for
13:01 - express and one for body parser also in
13:04 - order to make a connection with mongodb
13:06 - we have to execute this db.js module for
13:10 - that we can add one more required
13:12 - statement for db.js file here it is
13:15 - always recommended to separate local
13:17 - import and package import like this so
13:20 - here we have a constant mongoose it will
13:23 - store the mongoose that we have exported
13:26 - inside this db.js file here we have used
13:29 - destructuring syntax from es6 suppose if
13:32 - you have an object or with these
13:35 - properties p and q in order to retrieve
13:38 - value of these properties into a local
13:41 - variable p and q you just need to use
13:44 - this restructuring syntax like this so
13:46 - that is what we have done inside this
13:50 - project also inside this db.js file here
13:53 - we have exported mongo's property in
13:56 - order to retrieve that we have used
13:58 - mongoose with these structure in syntax
14:01 - with this import we will establish a
14:03 - connection with mongodb in order to work
14:06 - with express package we have to call
14:08 - this core function express
14:11 - like this so here we have called the
14:13 - express function result will be saved
14:15 - inside this app variable here now we
14:17 - have to configure express middleware in
14:19 - order to send json data to this node.js
14:22 - project for that we can do this
14:25 - we just need to call this app.use
14:28 - function inside that we can pass the
14:30 - result of this function
14:31 - executionbodyparser.json
14:33 - now in order to start the express server
14:36 - we can call the function app.listen as a
14:38 - first parameter we have to pass the port
14:41 - number where we want to start this
14:42 - application after starting the server
14:45 - this callback function will be invoked
14:47 - inside that we have a message for
14:49 - console window server started at port
14:51 - number 3000 now let me save this
14:54 - index.js file then open command prompt
14:57 - here i want to run this application
14:59 - using nodemon not monspace index.js
15:03 - hit enter so here we have started the
15:05 - express server at port number 3000 and
15:08 - we have successfully connected to
15:09 - mongodb now we are going to implement
15:11 - credit operations insert update delete
15:14 - and read or view
15:16 - using post update delete and get
15:21 - web methods respectively for that first
15:23 - of all we have to create a model using
15:26 - mongbo's package so let me create a
15:28 - models folder here
15:30 - models
15:31 - inside that i will create a new file
15:34 - employee.js
15:38 - first therefore we need a request
15:40 - statement for mogus so here it is here
15:42 - we have a constant mongoose for mongoose
15:45 - package now let's create the model
15:47 - employee for that we can call the
15:49 - function mongoose dot model inside that
15:52 - first of all we have to pass the model
15:54 - name employee here after that we have to
15:57 - specify the schema or structure of our
16:00 - model so inside this application we will
16:03 - implement correct operations using
16:05 - employee details like
16:07 - name position office and salary and here
16:11 - we have specified the corresponding
16:13 - field
16:14 - types all of these fields will be string
16:17 - except the salary field finally we have
16:19 - to export this employee like this module
16:22 - dot exports is equal to employee now in
16:25 - order to insert new employer code into
16:27 - mongodb we just need to create an object
16:30 - of employee and call the function save
16:33 - from the object it will insert the new
16:35 - record into this employees collection
16:37 - that we have already created so we have
16:40 - not specified in order to insert the
16:42 - record into this employees collection
16:44 - anywhere inside this model by default
16:47 - mongoose will insert the neural code
16:49 - into a collection with name employees so
16:52 - it will use the plural version of model
16:54 - name that we have passed here you don't
16:56 - have to create the collection manually
16:58 - in management too like we do in sql
17:01 - databases mogus will automatically
17:03 - create the collection as per our model
17:05 - without using the plural version of this
17:08 - model name you can pass a third
17:10 - parameter here suppose i want to use a
17:12 - collection with name emp for this
17:16 - employee so we can pass emp as a third
17:19 - parameter here for now we will use the
17:21 - employees collection
17:23 - now it's time to implement actual card
17:26 - operations insert update delete and
17:28 - retrieve for that i'm going to create a
17:31 - new folder controllers here
17:35 - controllers inside that we need to
17:37 - create a new employee controller
17:40 - employee
17:42 - controller
17:43 - dot
17:44 - js inside this employee controller we
17:47 - need to implement router from express
17:50 - for that first therefore we can add the
17:53 - require statement for express and then
17:55 - here we have created a local variable
17:57 - for express router by calling this
18:00 - router function from express constant
18:02 - inside this employee controller we may
18:04 - need to work with mongoose model
18:06 - employee that we have created here so
18:09 - let's add a request statement for this
18:11 - employee model also so here we have the
18:14 - request statement
18:15 - and inside this employee variable we
18:17 - will store the exported employee from
18:20 - this file now let me add a router in
18:22 - order to retrieve all employees from
18:24 - this employees collection for that we
18:26 - can create a get request here so here we
18:29 - have the route for this get request when
18:31 - you so make this request we will call
18:34 - this function with these two parameters
18:37 - request and response inside the function
18:40 - we need to retrieve all the codes from
18:42 - this employees collection for that
18:44 - employees.find function can be called it
18:46 - will retrieve all the employees from
18:48 - this employees collection after
18:50 - retrieving all those records we will
18:52 - call this callback function with these
18:55 - two parameters
18:56 - error and docs so first of all we will
18:59 - check if there is any error or not if
19:02 - there is no error we will return the
19:04 - documents that we have received from
19:06 - this
19:07 - employees collection back to the
19:10 - response for that we have called this
19:12 - send function from this response object
19:15 - by passing these documents that we have
19:17 - retrieved if there is any error we will
19:20 - print this message in console window
19:22 - error in retrieving employees and here
19:25 - we have concatenated the
19:27 - stringified version of the error object
19:29 - that we have received inside this
19:31 - callback function like this get request
19:33 - we have to add few more routes inside
19:35 - this employee controller so we have to
19:38 - configure these routes inside the root
19:40 - file index.js for that we have to export
19:43 - the router object that we have created
19:46 - here module dot exports is equal to
19:49 - router now back to index.js file here
19:53 - first therefore we have to add a request
19:55 - statement for the employee controller
19:57 - that we have added here so here we have
20:00 - the request statement for the controller
20:02 - with this employee controller variable
20:04 - now in order to add router from
20:06 - employees controller into this
20:08 - application we can do this we will call
20:11 - the middleware function app.use and we
20:14 - have the base url for this controller
20:16 - employee so basically in order to
20:18 - execute this get request we have to make
20:21 - a get request like this localhost
20:26 - 3000
20:28 - forward slash
20:29 - employees
20:31 - in order to access routers from this
20:33 - employees controller we have to append
20:37 - this employees to the base url localhost
20:40 - 3000
20:41 - now let me append list into this router
20:44 - then in order to make this get request
20:47 - we can do this employees forward slash
20:50 - list so here we have appended employees
20:53 - to the base url and then here we have
20:55 - the route that we have specified here
20:58 - for now we don't need this list we will
21:00 - keep a single forward slash for
21:02 - retrieving all employees from the
21:04 - collection now let me save all of these
21:07 - files here sorry inside this model we
21:10 - have a small modification we have to
21:13 - export an object like this
21:15 - employee
21:17 - is equal to
21:19 - employee
21:20 - since we have same identifier on both
21:22 - sides we can use the es6 shorthand
21:26 - method we just need to pass employee
21:28 - here
21:30 - now let me save all of these files here
21:33 - then you don't have to restart the
21:36 - program inside the node mod it will
21:38 - automatically restart
21:39 - after making any update inside this
21:42 - node.js project now let me try to make
21:44 - this request inside the browser let me
21:47 - copy this
21:48 - and let me open one more tab here
21:51 - hit enter so basically with this get
21:53 - request it will retrieve all the
21:55 - employees from this employees collection
21:57 - unfortunately we don't have any record
22:00 - inside this employees collection so that
22:02 - is why we have an empty area here so
22:04 - next we are going to insert new employer
22:07 - code into the db collection for that we
22:09 - can define one more route with post
22:12 - request like this uri for this post
22:15 - request will be same as that of this get
22:17 - request here in order to make this post
22:19 - request you can use the same uri like we
22:22 - have done in get request during this
22:25 - post request we will call this function
22:28 - with these two parameters request and
22:30 - response first of all we have to create
22:33 - an object of employee model class
22:36 - like this so here we have created an
22:39 - object of employee model class as emp
22:43 - inside that we have filled details of
22:46 - the employee from the request body
22:49 - basically for this post request we will
22:51 - send a json data containing details of
22:54 - new employee
22:55 - so using that json data we have filled
23:00 - details of employees using request dot
23:04 - body object so in order to retrieve the
23:06 - value of name property from the send
23:09 - json data we can do this request dot
23:12 - body dot name in the same way we have
23:15 - retrieved other properties also so here
23:17 - we have created an object of mongoose
23:20 - model employee as emp it is filled with
23:23 - details of new employee now in order to
23:26 - insert the neural code into mongodb we
23:29 - can call this save function from the
23:31 - mongoose model object after saving the
23:33 - record it will call this callback
23:36 - function with these two parameters error
23:38 - and document so if there is any error it
23:41 - will be passed through this parameter if
23:44 - the operation is successful mongodb will
23:47 - return an object containing details of
23:50 - newly inserted employee with these
23:53 - properties using this dock parameter
23:56 - along with these properties it will have
23:58 - an extra property underscore id mongodb
24:02 - will use this underscore id property to
24:04 - uniquely identify a record from a
24:07 - collection it's like primary key in sql
24:10 - databases but it won't be in a sequence
24:13 - like 1 2 3 instead instead it will be a
24:17 - 24 hex character string in length so
24:20 - first of all inside this callback
24:22 - function we will check if there is any
24:24 - error or not if there is no error we
24:27 - will return the newly inserted dock back
24:30 - to the response if there is any error we
24:33 - will print this message into console
24:35 - window error in employee save with the
24:37 - detailed error object now let me save
24:41 - this file nodemon will automatically
24:43 - restart the program here now we have to
24:46 - make this post request we can't make the
24:48 - post request from the browser like we do
24:51 - for get requests for that we have to use
24:54 - a special softwares like postman so in
24:57 - my system i have installed postman as an
25:01 - extension for google chrome browser
25:04 - inside that here i am going to make a
25:06 - post request
25:08 - we can select post from this drop down
25:10 - then here we are going to make a post
25:13 - request into this url
25:15 - so that we can copy this url from here
25:18 - itself url will be same as that of get
25:21 - request so let me copy this and paste in
25:23 - here
25:25 - now open body then select draw we are
25:29 - going to send a json data here so here
25:32 - it is here we have an employee details
25:34 - of ashton cox
25:37 - position will be senior developer office
25:39 - london then we have salary now click on
25:42 - send here so here you can see the
25:44 - response from the node.js application
25:46 - here so here we have the details of new
25:49 - employee that we have passed through
25:51 - this request and here we have the
25:52 - underscore id from mongodb for this new
25:55 - code now let's check mongodb for this
25:58 - new record
25:59 - so here we have the employees collection
26:01 - just click on this refresh button here
26:04 - so here we have the new report for
26:05 - ashton cox so now we have error code
26:08 - inside this employees collection
26:11 - now let me make this previous get
26:13 - request it should return all the
26:15 - employees from the employees collection
26:17 - so let me reload this page here so here
26:20 - we have the newly inserted employee
26:22 - details in your browser you may not see
26:25 - this much intendation for the response
26:28 - in my system i have installed json
26:30 - formatter so that's the reason we see
26:32 - this much indentation here in your
26:34 - browser you may see this response like
26:37 - this now i am going to add one more get
26:40 - request into this application so that it
26:42 - will retain
26:44 - a specific employee with given
26:47 - underscore id if we pass this id we can
26:50 - retrieve this whole employee details for
26:53 - that we are going to make a get request
26:56 - like this for slash employees then
27:00 - id that we have saved
27:02 - here
27:04 - for that back to the vs code editor now
27:07 - let's make a get request here so here it
27:10 - is router dot get and here we have the
27:13 - uri for this stop in order to make this
27:16 - get request
27:17 - along with this uri you have to pass the
27:21 - id underscore id for the corresponding
27:24 - employer record when we make this get
27:26 - request we will call this function with
27:28 - these two parameters request and
27:30 - response like we have done for the
27:32 - previous routes first of all we have to
27:35 - make sure that the id pass through the
27:38 - uri should be a valid mongodb id for
27:42 - that first of all we have to import
27:45 - object id from mongoose as we have done
27:49 - here first of all we will check whether
27:52 - the id is valid or not in order to
27:55 - retrieve the value of this id from uri
27:58 - you can do this
27:59 - request object dot params then id
28:03 - so here we can check whether this id is
28:05 - valid or not for that we just need to
28:07 - call this function is valid from this
28:10 - object id if it is not a valid id we can
28:15 - return status code 400 and we will send
28:18 - the message no record with given id if
28:21 - the given id is valid we can retrieve
28:23 - the corresponding employee from the db
28:26 - for that we just need to do this
28:29 - employee dot find by id here we have
28:32 - used the function find
28:34 - and here we have used find by id so
28:37 - first parameter should be the
28:40 - id that we have received through this
28:42 - uri here as a second parameter we can
28:45 - pass this callback function
28:48 - with these two parameters
28:50 - error and dock if there is no error we
28:53 - will return the document back to the
28:56 - response if there is any error we will
28:58 - print the error message in console
29:00 - window now let me save this now let's
29:03 - try to make this get request
29:06 - so here we have the
29:07 - id for this new employee let me copy
29:11 - this
29:13 - we're placing this id here then hit
29:16 - enter
29:17 - so here we have the employee details of
29:19 - the newly inserted employee so here we
29:22 - have the employee details with given id
29:26 - now we have to add two more routes for
29:28 - update and delete now let's try update
29:31 - operation for that we have to use put
29:33 - web method
29:35 - so here it is
29:36 - router.put function can be called and
29:39 - here we have the route force
29:42 - id parameter as a second parameter we
29:45 - will call the function with these
29:47 - parameters request and response
29:49 - inside the function first therefore we
29:52 - will check the id pass through the uri
29:55 - is valid or not like we have done inside
29:58 - this
29:59 - get request
30:00 - here
30:01 - okay
30:02 - if the id is not valid we will return
30:05 - the message no record with given id if
30:08 - the id is valued we can continue with
30:10 - update operation for that first of all
30:13 - we will create an object like this
30:15 - during update operation we will send a
30:17 - json data containing new details of
30:20 - employees with that json we have created
30:24 - a normal object here
30:26 - it's not an object of the employee model
30:29 - that we have done
30:30 - in post request instead it is a normal
30:33 - object emp now in order to update the
30:37 - employee with given id here
30:40 - we can do this for that we need to call
30:42 - the function find by id and update as a
30:46 - first parameter we have to pass the id
30:48 - that we have received from this uri here
30:51 - then
30:52 - we have to do this it tells the mongodb
30:55 - we have to update an employee with this
30:57 - id
30:58 - with these new informations inside this
31:01 - object as a third parameter we can pass
31:04 - an object with options like this i will
31:07 - tell you what we meant by this property
31:09 - here later as a last parameter we will
31:13 - call the callback function like we do in
31:15 - other
31:16 - mongoose operations
31:18 - so here we have the callback function
31:20 - with error and dock parameter inside
31:23 - that we will check if there is any error
31:25 - or not if there is no error we will
31:27 - return the
31:28 - dog back to the response if there is any
31:31 - error we will print an error message in
31:33 - console window so with this new option
31:36 - we tell the mongodb whether we want to
31:38 - return
31:40 - all data of employee or updated data of
31:43 - employee back to the response so if new
31:46 - is equal to true this callback parameter
31:49 - doc will have the value of updated
31:52 - employee details otherwise it will have
31:54 - the old value of the corresponding
31:56 - employee finally we have delete
31:58 - operation for that we can add a new
32:00 - route like this
32:02 - router dot delete function for this
32:04 - route we have the uri like this so when
32:07 - we make a request delete request like
32:10 - this we can call this function with
32:12 - these two parameters request and
32:14 - response inside the function first of
32:16 - all we will check whether the id pass
32:18 - through this uri is valid or not
32:21 - otherwise we will delete the record by
32:24 - calling this function find by id and
32:27 - remove so first parameter should be the
32:30 - id for that we can do this
32:32 - request.params.id
32:34 - after delete operation we will call this
32:37 - callback function inside that we can do
32:40 - this if there is no error we will return
32:43 - the deleted employee details back to the
32:46 - response otherwise we will print the
32:49 - error message in console window so here
32:51 - we have completed with node.js project
32:54 - inside that we have implemented all
32:56 - corrupt operations using put post delete
32:59 - and update now let's create angular
33:02 - application for that we can use angular
33:05 - cli commands in command prompt since we
33:08 - have already opened two command windows
33:10 - for mongodb and node.js application i'm
33:13 - going to use integrator terminal from
33:15 - this ide for that you can go to view
33:18 - then integrated terminal here in order
33:21 - to create an angular 5 application you
33:23 - can use this command ng
33:26 - new then application name i will name
33:29 - this application as angular app hit
33:32 - enter
33:33 - so here we have successfully created a
33:36 - client-side application as part of that
33:38 - here we have a folder angular app inside
33:41 - that we have a brand new angular 5
33:43 - application
33:45 - now let's run this application for that
33:47 - first of all we have to navigate inside
33:49 - this folder
33:51 - so we can use the cd command cd
33:54 - angular app hit enter in order to run an
33:57 - angular application you can use this
33:59 - command ng
34:01 - serve
34:02 - double hyphen open
34:04 - hit enter so it will compile and open
34:07 - your application in your default browser
34:09 - so this is how the fresh angular
34:11 - application looks like
34:13 - by default angular applications uses
34:15 - this port number 4200
34:18 - in order to design this application we
34:20 - will be using materialized css for that
34:22 - we have to include these references
34:25 - stylesheet and javascript file in our
34:28 - application along with that we need few
34:31 - icons for that we will use material
34:33 - icons
34:34 - so back to the application here then
34:37 - open index.html here
34:40 - so first of all we have the
34:43 - style sheet for
34:44 - materialize css after that we have style
34:47 - sheet for material icons before the body
34:51 - end tag we can add script file for
34:53 - materialized css
34:55 - now open styles.css inside this style
34:58 - sheet we can add global css rules for
35:01 - the application for now i will copy
35:03 - paste the required css rules for this
35:05 - application development inside this
35:07 - style sheet
35:08 - so here it is now let's create required
35:11 - components model and service classes
35:14 - inside this application for that we need
35:16 - one more terminal so you can click on
35:18 - this plus button here then navigate into
35:21 - the angular application folder angular
35:24 - app now in order to create angular
35:26 - component you can use this angular cli
35:28 - command ng
35:29 - g4 generate c4 component i will name
35:32 - this component as
35:34 - employee hit enter newly created
35:37 - component can be seen inside this app
35:39 - folder here now we need to add one model
35:42 - and service class for that
35:44 - inside this app folder i'm going to add
35:47 - one more folder i will name this folder
35:49 - as shared
35:51 - now open one terminal from this folder
35:53 - for that right click on this folder
35:55 - then open in command prompt here now
35:58 - let's create a model class for that you
36:00 - can use this command ng
36:03 - g4 generate
36:05 - and we need to create a class in angular
36:08 - cli there is no specific command to
36:10 - create a model in angular application
36:13 - but we can create the model class by
36:15 - adding few tweaks inside this class
36:17 - generation command here we are going to
36:19 - create the employee model class so i
36:21 - will name it as employee
36:24 - then we have to add this command line
36:27 - argument
36:28 - type is equal to
36:30 - model
36:32 - hit enter
36:33 - newly created model class can be seen
36:36 - here
36:37 - employee dot model dot ts
36:41 - after that we need to create a service
36:43 - class also for that you can use this
36:45 - command ng
36:47 - g for generate s for service we need to
36:50 - create employee service class so i will
36:53 - just need to type
36:54 - employee here hit enter now we can start
36:57 - with employee model class so here it is
37:00 - empty.model.ts
37:02 - inside this model class we need to add
37:04 - properties corresponding to this mongodb
37:07 - collection fields so we can add these
37:09 - properties here id name position office
37:13 - and salary now open employee service
37:16 - class first and foremost i'm going to
37:18 - add import statement for this service
37:21 - class here here we have added import
37:23 - statements for angular core packages and
37:25 - rxdx along with that we have imported
37:29 - employee module from this
37:32 - employee.model.tx file here now let's
37:34 - create two variables inside the service
37:36 - clause
37:38 - so first of all we have selected
37:40 - employee it's of the type employee model
37:42 - class and here we have an array of
37:45 - employee as employees so inside this
37:48 - employee's array able to save all
37:50 - employees from the mongodb collection
37:52 - with this selected employee property we
37:55 - will design a form for insert and update
37:57 - operation that we can do in employee
38:00 - component html default design of angular
38:03 - application is rendered here and this
38:05 - view is rendered from the default
38:07 - component html which is app component
38:10 - html here so i'm going to remove these
38:13 - default html codes from here instead i
38:16 - will use the employee component selector
38:19 - so here is the component type script
38:20 - file i will use this selector let me
38:23 - copy this
38:25 - then back to
38:27 - appcomponent.html and i will add a tag
38:30 - with this selector here
38:32 - now let me save all of these
38:34 - modifications here then back to the
38:36 - browser here you see this angular
38:38 - application is already restarted
38:40 - whenever we make changes inside this
38:42 - angular application we don't need to use
38:45 - external packages like we have done in
38:47 - node.js with normal angular cli watch
38:50 - files inside this angular application
38:52 - whenever we make a changes inside them
38:55 - it will restart the program here so here
38:57 - we have the paragraph employee works
38:59 - from employee component html now inside
39:02 - this component we are going to design a
39:04 - form using the property
39:07 - employee selected employee from employee
39:10 - service class so first therefore we have
39:12 - to inject employee service class inside
39:16 - this
39:17 - employee component typescript file here
39:19 - we have the typescript file
39:20 - employee.component.ts
39:23 - for that first of all we have to add an
39:25 - import statement for employee service
39:27 - class so first of all let me add a line
39:29 - break here so that we can separate local
39:32 - import and built-in import so here we
39:35 - have the import statement import
39:37 - employee service from shared folder
39:40 - employee service ts5 in order to inject
39:43 - the service class we have to add the
39:45 - class inside the component providers
39:47 - array for that we can do this here we
39:50 - have the providers array inside that we
39:52 - have
39:53 - employee service after that we need to
39:55 - add a constructor parameter for employee
39:58 - service like this private employee
40:00 - service itself the type employee service
40:02 - class now let me save this file then
40:05 - back to employee component.html file now
40:07 - we can design a form using this employee
40:10 - service property
40:13 - selected employee here we will wrap the
40:15 - employee form inside a card component
40:18 - from materialize css we can see examples
40:21 - for card component here now back to vs
40:24 - code editor now let's replace this
40:26 - default paragraph with a card component
40:29 - so first of all we have a div with class
40:31 - row and here we have the grid system
40:34 - from materialize css it is almost
40:36 - similar to bootstrap grid system inside
40:39 - that we have a div with class card
40:41 - inside that we have another div with
40:44 - class card content apart from that we
40:46 - have one more class white hyphen text so
40:49 - this will apply
40:51 - white color for text inside this div
40:53 - inside that we have a div row now we can
40:56 - use grid system from material as css we
40:58 - want to divide this duo into two parts
41:02 - with five columns and seven columns so
41:04 - here we have the first due and second
41:07 - due inside this deal this first deal we
41:10 - will design the employee form inside the
41:12 - second view we will show employees list
41:15 - that we have inserted into the mongodb
41:17 - collection here so first of all i will
41:20 - design employee form inside this div so
41:22 - here we have the form
41:24 - form here we have the local reference
41:27 - employee form is equal to ng form and
41:30 - here we have wired up the submit event
41:32 - using ng submit attribute it will call
41:35 - this function on submit and we will pass
41:37 - the local reference employee form into
41:40 - that function inside the form first of
41:42 - all i will add a hidden field inside
41:45 - this control we will store the object id
41:48 - from mongodb so i will name this control
41:51 - as underscore id
41:53 - then we have the local reference
41:56 - underscore id is equal to ng model and
42:00 - finally we have to add the two-way data
42:02 - binding here ng model is equal to
42:05 - employee service that means injected
42:08 - object of employee service inside this
42:11 - component here then we have selected
42:14 - employee inside this employee service
42:16 - class and inside that we have the
42:18 - property
42:19 - underscore id from employee model here
42:24 - now we need to add input text box for
42:27 - remaining properties for that you can
42:29 - see some examples from the
42:32 - materialized css documentation here
42:35 - we will be using label text box pair
42:37 - like this we have the label here and we
42:40 - have the text box here now back to the
42:42 - vs code editor first of all we need to
42:45 - add a dual with class raw inside that we
42:49 - will have another deal with classes
42:52 - input field called s12 so it will take
42:55 - the entire width inside this div row
42:58 - then we have to add input control like
43:01 - this input it's of the type text we can
43:04 - use this control to end the employee
43:07 - full name so i will add the name
43:09 - property here
43:10 - name is equal to name and then here we
43:13 - have the local reference name is equal
43:15 - to ng model then we have the two-way
43:18 - data binding and g model is equal to
43:20 - employee service dot selected
43:23 - employee dot name so here we are
43:25 - designing this form using template
43:27 - driven approach after the ng model we
43:30 - have to add placeholder placeholder is
43:33 - equal to and full name after that we
43:36 - have to add the label here so here it is
43:40 - label inside that we have name i want to
43:43 - make this input text box as manatee to
43:46 - indicate the mandatory fields we will
43:48 - use a red asterisk mark for that i will
43:50 - add a nested label inside this name
43:53 - label so here it is here we have a label
43:56 - with class red text so this astrix mark
43:59 - will have red color we can add label
44:02 - text box for remaining properties
44:04 - position office and salary for that we
44:07 - can do this so here we have the label
44:10 - text box pair for position and then we
44:13 - have label text box pair for office
44:16 - then finally we have the salary text box
44:20 - so here we have designed employee form
44:22 - using template driven approach in order
44:24 - to work this approach we have to add
44:27 - forms module inside appmodule.ts5
44:30 - so first of all we can add the import
44:32 - statement for
44:34 - forms module here import forms module
44:36 - from angular forms now we can add this
44:39 - forms module inside the imports array
44:42 - here
44:44 - now let me save all of these
44:46 - modifications
44:47 - and back to the application here
44:51 - boom
44:52 - that's it here we have an employee form
44:54 - as per our design now we need to add a
44:57 - submit button and reset button into this
44:59 - form for that back to the component html
45:02 - here in order to add these buttons we
45:05 - can add one more due before the form and
45:08 - tag here so here it is
45:11 - we have a div with class row and we have
45:13 - another div with input field called s12
45:17 - inside that we have two buttons this is
45:19 - for reset operation and this is for the
45:22 - form submit button for these two buttons
45:24 - we have classes btn from materialize css
45:28 - then we have the custom class which we
45:30 - have defined inside the stats.css
45:33 - btn hyphen custom in order to align
45:36 - these two buttons in the right side we
45:38 - have added this right class now let me
45:41 - save this and back to the application
45:43 - here
45:44 - so here we have added submit and reset
45:47 - button first of all i will implement
45:49 - form reset operation for that back to
45:51 - the component type script file here
45:53 - employee component dot ts for that we
45:56 - will define reset form function here it
45:59 - has a single parameter form it's of the
46:01 - type ng form in order to use this class
46:04 - we have to import
46:06 - import ng form from angular forms we may
46:09 - need to call this reset form function
46:12 - from various parts of the application in
46:14 - some cases we cannot pass value for this
46:17 - form parameter so that is why we made
46:19 - this parameter as nullable so first of
46:22 - all we will check whether we have a
46:24 - value for this form parameter if value
46:28 - for this parameter is passed we can
46:29 - reset this form by calling the reset
46:33 - function like this form dot reset after
46:36 - that we have to manually reset these
46:38 - form controls since we have designed
46:40 - this form using selected employee
46:43 - property from employee service class
46:45 - we can do this
46:47 - this dot employee service dot selected
46:50 - employee here we have set the selected
46:52 - employee property with an object
46:54 - containing empty or null value for those
46:58 - properties id name position office and
47:01 - salary now we can call this reset form
47:03 - function inside this ng on a life cycle
47:06 - hook ng on it life cycle hook will be
47:09 - invoked whenever this component is fully
47:12 - loaded
47:13 - so initially it would be better if we
47:15 - can reset this form here for that we can
47:18 - do this
47:20 - this dot
47:22 - reset form from this ng only life cycle
47:25 - hook we can't pass value for this form
47:27 - parameter here so let me save this
47:31 - and back to the application here
47:34 - now we can wire up this reset form
47:36 - function to this reset button click
47:39 - event for that you can open the
47:40 - component html here then we will add a
47:43 - click event for this reset button here
47:47 - so here it is we will call the reset
47:49 - form function into that function we will
47:52 - pass the local reference for this form
47:55 - here okay now let me save this and back
47:58 - to the application here now let's check
48:01 - how this reset operation works for that
48:03 - i will enter some random text inside
48:06 - these text boxes here now click on reset
48:08 - button here so here we have successfully
48:11 - reset this form into its initial state
48:13 - now let's implement form validation as
48:16 - we mentioned employee full name is a
48:18 - required field for this form submission
48:21 - so that is why we have added a red
48:23 - astric mark here in order to make this
48:26 - text box as required field we have to
48:29 - add required attribute into the
48:31 - corresponding input text box here so we
48:34 - can add required attribute here required
48:39 - now let me save this and back to the
48:41 - application here we can implement form
48:43 - validation using ng classes from angular
48:47 - initially if you inspect this text box
48:49 - here
48:50 - you can see that it has classes
48:53 - ng pristine and ng invalid ng pristine
48:57 - means we have not modified its initial
48:59 - value ng invalid clause indicates that
49:02 - this field is already invalid now keep
49:06 - an eye on these classes here while we
49:08 - update this text box
49:11 - you can see that its classes are
49:13 - modified
49:14 - ng pristine is replaced with ng dirty
49:18 - and ng invalid is replaced with ng valid
49:22 - if i clear this text box we can see that
49:26 - it has two classes ng dirty and ng
49:30 - invalid we are not looking at ng touched
49:32 - class currently we have ng dirty and ng
49:36 - invalid class applied to this text box
49:38 - so that is why we have a red bottom
49:41 - border for this text box we have defined
49:44 - this style inside the styles.css
49:48 - file here
49:50 - if there is any input with these two
49:52 - classes ng invalid and ng dirty we will
49:55 - apply the bottom red border now back to
49:57 - the application whenever this form as a
50:00 - whole is not valid i want to disable
50:02 - this submit button so disabled attribute
50:05 - will be applied whenever this form as a
50:07 - whole is not valid
50:09 - employee form is the local reference for
50:11 - this form here now let me save this
50:14 - and back to the application here
50:17 - initially this text box is empty and
50:19 - thereby this form as a whole is not
50:21 - valid so we have applied disabled
50:24 - attribute to this submit button if i
50:26 - enter something inside this text box you
50:28 - can see that this submit button is
50:31 - enabled now let's implement the form
50:33 - submit even we have already added a
50:36 - function to this form submit even here
50:39 - ng submit we will call this function on
50:42 - submit
50:43 - now we have to define this function
50:45 - inside the corresponding typescript file
50:47 - here on submit function for this
50:50 - function we have a single parameter form
50:52 - it's of the type ng for inside this on
50:56 - submit function we have to insert a new
50:59 - employee into mongodb for that we need
51:02 - to consume post request from the node.js
51:05 - api here
51:07 - so inside this employee controller in
51:10 - our node.js api we have created this
51:13 - post route we need to consume this post
51:16 - route from this
51:18 - angular application here from this
51:21 - employee component in order to consume
51:23 - the post request we will create a
51:25 - function inside this employee service
51:27 - class i will name this function as
51:30 - post employee
51:33 - for this function we have a single
51:35 - parameter emp it's of the type employee
51:39 - model class
51:41 - in order to make the post request we
51:43 - have to make an http request into the
51:46 - node.js project for that we can use http
51:50 - client so
51:52 - first of all we have to inject this http
51:55 - client inside this constructor here
51:58 - private
52:00 - http
52:02 - it's of the type http client
52:07 - in order to work with http client we
52:10 - have to import http client module inside
52:14 - this app module.ts file so first of all
52:17 - i will add the import statement for http
52:20 - client module and then i will add this
52:22 - class inside this imports array here
52:26 - now back to employee service class here
52:29 - now we need to make the post request
52:31 - into employees route for that let me
52:34 - create a read-only variable here so here
52:37 - we have the base url variable it is
52:39 - initialized with the
52:42 - uri for the employee controller in our
52:45 - node.js project now we can make a post
52:48 - request for that we just need to call
52:50 - the post function from http client
52:54 - object as a first parameter we have to
52:56 - pass the uri so here it is then after
53:00 - that we have to pass the json object emp
53:04 - containing details of new employee
53:06 - so here we have returned the result of
53:09 - this post function
53:10 - back to the code so basically you can
53:13 - see that this post function returns an
53:15 - observable here so we can call this
53:18 - function inside the employee
53:21 - component.ts file here now inside this
53:24 - component typescript file we can call
53:26 - this employee service function post
53:29 - employee for that we can do this this
53:32 - dot employee service dot post employee
53:34 - into this function we have to pass an
53:37 - object of employee containing details of
53:39 - new employee for that we can do this
53:42 - here we have the
53:43 - form object in order to retrieve value
53:45 - of
53:46 - form elements we can do this form dot
53:49 - value so it will be an object of
53:52 - employee itself as i told you this
53:54 - function post employee will retain an
53:57 - observer
53:58 - so we can subscribe to that observable
54:01 - here inside the subscribe function we
54:04 - can define a callback function like this
54:07 - it has a single parameter response so it
54:10 - will have the response returned from the
54:12 - nodejs project so first of all inside
54:15 - this function after inserting a newer
54:17 - code i want to reset the form for that
54:20 - we can call this reset form function by
54:22 - passing this employee form object now i
54:26 - want to show a toast notification saying
54:28 - insertion is successful for that we can
54:31 - use toast from this material icss go to
54:35 - javascript there you can see
54:37 - toast here
54:38 - in order to make a toast request we just
54:41 - need to do this
54:42 - m.toast inside that we can pass this
54:45 - html object
54:48 - okay now in order to make use of this m
54:51 - object inside this angular application
54:53 - first of all we have to declare m before
54:56 - this component declaration here so here
54:59 - it is okay we have declared m it's of
55:02 - the type any now back to the function
55:05 - here now we can make a toss request
55:08 - like this
55:09 - m.toast here we have the
55:11 - html saved section in order to apply
55:14 - round border you can use this class
55:16 - rounder
55:17 - now let me save all of these
55:19 - modification
55:21 - and back to the application here as you
55:24 - know we have a node.js project running
55:28 - at port number 3000 in order to retrieve
55:31 - all employees we can make this get
55:33 - request from this angular application we
55:36 - are going to consume a post request from
55:38 - this node.js project where we have a
55:40 - problem in order to make the request we
55:43 - have to enable course inside the node.js
55:46 - project
55:47 - course means close origin resource
55:49 - sharing that means without course
55:51 - enabling
55:52 - any web application node.js or any web
55:55 - application will block request from
55:58 - another web application which is hosted
56:00 - in a different domain or port number now
56:03 - in order to interact with these angular
56:06 - and node.js project
56:08 - we have to enable
56:10 - course inside this node.js project for
56:13 - that first therefore we have to install
56:15 - this npm package course so back to the
56:18 - command prompt here currently it is
56:20 - running node mod let me stop this
56:22 - execution for that you can use the
56:24 - shortcut ctrl c
56:26 - then
56:27 - type y
56:28 - in order to install the package you can
56:30 - use this command npm install
56:32 - course and we have to save this package
56:35 - in our package.json file so we have
56:38 - double dash save hit enter so here we
56:41 - have successfully installed the course
56:42 - package now back to the node.js project
56:45 - here open index.js file inside this file
56:49 - first of all we have to add the request
56:50 - statement for course package so here it
56:53 - is after that we can use the middleware
56:55 - function app.use for that we can do this
56:59 - app.use inside that we have passed this
57:02 - function course so this will allow
57:05 - request from any port number or domain
57:07 - we have to be specific we need to allow
57:10 - request from this angular application
57:13 - which is running as port number 4200
57:16 - in order to enable course for the
57:18 - angular application we can pass an
57:21 - object inside this function like this so
57:24 - here we have the origin property inside
57:26 - that we have to
57:28 - enable codes for this port number which
57:30 - is running at localhost
57:33 - okay now let me save this and back to
57:36 - the application here now let me save
57:38 - these modifications here
57:41 - then back to the command prompt now we
57:43 - need to run this node.js project using
57:45 - nodemon
57:47 - now back to this uh angular application
57:50 - here i'm going to insert a new employee
57:53 - here i will name this employee as
57:56 - fiona
57:57 - green then we have position
58:00 - it will be junior
58:01 - developer
58:04 - then office will be in canada
58:07 - and we have salary
58:11 - click on submit so here you can see the
58:14 - stores notification saved successfully
58:16 - now if you check this mongodb here now
58:19 - we are inside the employees collection
58:21 - click on refresh button here
58:23 - so here you can see the new record for
58:25 - fiona green now inside this second you
58:28 - here i want to display all employees
58:30 - from this employees collection here
58:32 - for that back to the angular application
58:35 - here then open
58:37 - employee component html here inside this
58:41 - view we can add a table to list
58:43 - employees
58:44 - in order to design the table i will use
58:47 - the employees array from employee
58:50 - service class here
58:51 - okay we have already injected this
58:54 - employee service inside the employee
58:56 - component typescript file here
58:58 - so we can make use of that
59:01 - array inside this html here for that
59:04 - first of all we will add a table here
59:06 - for this table we will apply two classes
59:09 - from materialize css so first of all we
59:11 - have responsive table after that we have
59:15 - highlight class inside the table first
59:17 - of all we will add the table header for
59:20 - that we have t-head inside that we need
59:22 - a row with columns for each properties
59:25 - from the employees collection after t
59:27 - hat we can display exact content from
59:30 - employees collection for that we have a
59:33 - tr element here here you can see the ng4
59:36 - directive here it basically allows us to
59:39 - i trade through the employees array from
59:42 - employee service class with this emp
59:45 - variable
59:46 - okay so using this emp variable we can
59:49 - displace data from this employees
59:51 - collection for that we can do this first
59:54 - of all we have the employee name in
59:56 - order to display employee full name we
59:58 - have used string interpolation or one
60:02 - directional binding after that we have
60:05 - position
60:06 - and office
60:08 - here inside this employees area from
60:10 - employee service class we have to fetch
60:13 - all employee reports from this employees
60:15 - collection for that we can define a new
60:18 - function inside this employee service
60:20 - class here so function will be something
60:23 - like this get employee list here we have
60:26 - made a get request into this node.js
60:28 - project
60:30 - into this
60:32 - route here
60:33 - this one first route so it will return
60:36 - all employees from employees collection
60:39 - now we can call this function from this
60:43 - angular component employee component
60:45 - here for that i'm going to define a new
60:48 - function here function name will be
60:50 - refresh employee list inside the
60:52 - function we can call this function get
60:55 - employee list for that we can do this
60:58 - this dot employee service dot get
61:00 - employee list it basically returns an
61:03 - observable from this get function here
61:06 - so we can subscribe to that observable
61:08 - here so we will call the subscribe
61:11 - function inside the subscribe function
61:13 - we can define a callback function
61:15 - with a single parameter response now
61:18 - inside this response parameter we will
61:20 - have an array of records from this
61:23 - employees collection so we can assign
61:25 - that array into this employees array
61:27 - here for that we can do this this dot
61:31 - employee service dot employees is equal
61:33 - to response here you can see a red
61:36 - squiggly line because we are assigning
61:38 - an object into employees array
61:41 - so we have to cast this response as an
61:43 - employee array for that
61:45 - first of all we have to add an import
61:47 - statement for employee model like this
61:50 - then we can cast this response
61:53 - like this as employee array
61:56 - now i will call this function inside the
61:58 - ng only life cycle hook here
62:01 - this dot
62:03 - refresh employee list
62:06 - now let me save all of these
62:07 - modifications here
62:09 - then back to the application so here you
62:12 - can see the employee list that we have
62:14 - inserted into this mongodb collection
62:17 - now i want to add one more column into
62:19 - this table for some action buttons like
62:21 - edit and delete
62:23 - so back to the component html file here
62:26 - so first of all i will add an empty
62:28 - column inside the table header like this
62:31 - then inside this tr element we can add
62:34 - an extra td like this inside that we
62:36 - will add a button for delete operation
62:39 - like this so it has a class custom class
62:42 - action btn it is defined inside the
62:45 - styles.css inside the element we have a
62:47 - material icon for edit operation so it
62:50 - will show a pencil icon after that we
62:53 - need to add an angle element for delete
62:55 - operation so here it is we have the
62:57 - custom class action btn and here we have
63:01 - the material icons for delete operation
63:04 - so it will be a trash icon now let me
63:07 - save this and back to the application
63:09 - here
63:10 - so here you can see those two buttons
63:13 - here edit and delete operation now let's
63:16 - implement the update operation in order
63:18 - to update a record you so want to click
63:20 - on this pencil button here then we will
63:23 - show the corresponding record details
63:25 - inside this form here after making the
63:28 - update then user can submit before so
63:30 - first of all we have to implement the
63:32 - click event for this pencil button here
63:35 - so let me add the click event here
63:37 - when we click on this angular element we
63:40 - will call this function on edit by
63:42 - passing this emp object from the
63:46 - iteration now let me define this
63:48 - function inside the typescript file here
63:51 - on edit
63:54 - it has a single parameter emp its of the
63:58 - type employee model class
64:01 - inside that we just need to set this
64:04 - employee object into the selected
64:07 - employee property of employee service
64:09 - class
64:10 - so that it will update this form with
64:13 - selected employee content so we can do
64:16 - this
64:17 - this
64:18 - dot
64:20 - employee service dot
64:23 - selected employee is equal to
64:25 - emp
64:26 - now let me save all of these
64:28 - modifications and back to the
64:30 - application here if i want to update
64:33 - this record for fiona green you can
64:35 - click on this pencil button here so here
64:37 - we have populated details of employee
64:40 - fiona agree we can edit the employee
64:42 - details here then submit the form we
64:44 - have already implemented submit event
64:47 - for this form
64:49 - using this
64:50 - on submit function here
64:53 - so inside this function we have to deal
64:55 - with insert and update operation but we
64:59 - will decide whether we want to do update
65:01 - operation or insert operation based on
65:04 - the value of this
65:06 - input hidden field here underscore id if
65:09 - underscore id has an empty string then
65:12 - we will go for insert operation
65:14 - otherwise we will go for update
65:16 - operation for that we can add an if
65:19 - close here
65:20 - form
65:22 - dot value
65:24 - dot underscore id if it is equal to
65:28 - empty string we will do the insert
65:30 - operation here
65:33 - in the else part we have to do the
65:35 - update operation for update operation we
65:37 - have to consume put route from node.js
65:41 - project in order to consume the request
65:43 - i'm going to add a new function inside
65:46 - this employee service clause here so
65:48 - here we have the function put employee
65:51 - it has a single parameter emp it's of
65:53 - the type employee in order to consume
65:56 - the put route from node.js we can call
65:58 - the put function from http client object
66:02 - as a first parameter we will pass the
66:04 - uri here here we have concatenated
66:06 - underscore id into the base url like
66:10 - this
66:10 - as a second parameter we have passed the
66:13 - x at employee object
66:15 - now we can make use of this function
66:18 - inside this employee component
66:20 - typescript file here it would be same as
66:22 - that of this post employee function
66:24 - invocation so let me copy this
66:27 - and pasting inside this else part here
66:30 - then instead of this post employee we
66:33 - have put employee function inside this
66:36 - toast success function we can
66:39 - show updated successfully after insert
66:42 - or update operation we have to refresh
66:45 - this employee list inside this table for
66:48 - that we can call this function refresh
66:51 - employee list so we will do this this
66:54 - dot
66:55 - refresh employee list function can be
66:58 - called same function can be called
67:01 - inside this function also let me save
67:04 - all of these modifications here
67:07 - then back to the application
67:09 - i'm going to update this fiona agreement
67:12 - the code now click on this pencil icon
67:14 - here
67:15 - then instead of canada i'm going to
67:17 - update that with uk click on submit
67:21 - so here we have the success message
67:23 - updated successfully now back to the
67:25 - mongodb compass management tool here you
67:28 - can see the old office of fiona as
67:31 - canada if you refresh this list it
67:34 - should be updated to uk finally we have
67:36 - to deal with employee delete operation
67:39 - for that we will be using this delete
67:42 - icon here
67:43 - so we have to wire up an event for this
67:46 - button click event back to component
67:48 - html here then i will add a click even
67:51 - for this delete button here
67:54 - we will call this on delete function
67:56 - into that function we have to pass two
67:58 - parameters first of all we will pass the
68:00 - underscore id for the mongodb object and
68:04 - then we will pass the form object
68:06 - employee form because we have to reset
68:09 - this form after any delete operation now
68:12 - we need to define a function inside this
68:14 - employee service class in order to
68:16 - consume
68:17 - delete route from node.js project for
68:19 - that we can do this we have the function
68:22 - delete employee it has a single
68:25 - parameter underscore id we will make
68:27 - this delete request by passing this url
68:31 - inside that we have appended this
68:33 - underscore id now back to the component
68:35 - typescript file here
68:37 - now we can define this on delete
68:39 - function here function name will be on
68:42 - delete it has two parameters underscore
68:45 - id then four delete operation is a loss
68:48 - of data so we have to confirm the
68:50 - operation from client side
68:52 - for that we can do this we will have and
68:55 - if clause inside that we will confirm
68:57 - the operation by asking this question
69:00 - are you sure to delete this record or
69:02 - not if you so confirm this operation it
69:04 - will return a true value so inside this
69:07 - if close we are safe to delete the
69:09 - record for that
69:11 - first of all we will call the function
69:13 - delete employee from this employee
69:16 - service class function into that
69:18 - function we have passed this
69:20 - underscore id value this function will
69:23 - return an observable so we can subscribe
69:26 - to that function here
69:27 - inside the subscribe function we will
69:29 - have a callback function with a single
69:31 - parameter response after deleting an
69:34 - employee we have to refresh this
69:36 - employee list here for that we can call
69:39 - the function
69:41 - refresh employee list then we will reset
69:43 - this form if there is an employee
69:45 - selected for update operation for that
69:47 - we can do this with this dot reset form
69:50 - function can be called with this form
69:53 - object finally we have to show the toss
69:55 - message m.toast inside that we will show
69:58 - this message deleted successfully now
70:01 - let me save all of these modifications
70:04 - then back to the application here
70:07 - i'm going to delete ashton cox record
70:09 - for that you can click on this trash
70:12 - icon here
70:13 - then it will ask for confirmation are
70:15 - you sure to delete this report click on
70:17 - ok
70:18 - so here we have successfully deleted the
70:20 - record if you check the mongodb combust
70:23 - tool you can refresh this list here so
70:27 - here we have deleted ashton cox record
70:29 - so with this mean stack application we
70:32 - have implemented curb operations so
70:34 - let's wind up this means tag tutorial
70:37 - for business you can download this
70:39 - project from the git hubling given in
70:41 - video description please like and share
70:44 - this video with your friends and
70:45 - colleagues so that they can benefit from
70:47 - this have a nice day bye