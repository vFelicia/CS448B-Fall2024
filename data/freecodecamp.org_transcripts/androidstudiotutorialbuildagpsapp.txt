00:00 - hey welcome to a series here on android
00:02 - studio we're going to build an
00:04 - application that will demonstrate the
00:06 - gps features of your phone so you can
00:09 - see the app in this condition here the
00:11 - latitude and longitude is registered the
00:14 - altitude and the accuracy and the speed
00:16 - and also the address at which you're
00:18 - located there'll be a few switches here
00:20 - so we can turn the service off turn it
00:22 - back on
00:23 - switch it from the
00:25 - less precise to the most precise gps
00:28 - settings so that's just ahead
00:34 - [Music]
00:38 - so in this application here are some of
00:40 - the things that we're going to learn
00:42 - we're going to be working with something
00:43 - called a fused location provider client
00:47 - the fused idea is that there are
00:49 - multiple sources that you can get a
00:51 - location service so not just gps you can
00:54 - use your wi-fi you can use the towers
00:57 - and if other applications on your phone
00:59 - are getting location services your app
01:02 - can piggyback off of their work in this
01:05 - tutorial we'll show how to get
01:06 - permissions so that your users do not
01:09 - have to provide the gps location if they
01:11 - don't want to
01:13 - we're going to work with a class called
01:15 - location request and so this will set
01:18 - the preferences for how accurate and how
01:21 - often you want your gps service to be
01:23 - tracked
01:24 - we're going to install the google play
01:26 - services and we'll talk about what's
01:28 - required in making this phone
01:30 - application work
01:32 - this will not work in places like china
01:34 - but it will work in the rest of the
01:36 - world where google play services are
01:38 - allowed
01:39 - the application will rely on an event
01:41 - listener called unsuccess listener so
01:44 - success means successfully located
01:46 - myself and whenever that happens we will
01:48 - update the ui or the user interface on
01:52 - the application we'll set up a method
01:54 - that will start and stop the location
01:56 - tracking service
01:57 - and then finally we'll work with geocode
02:00 - which is the ability to translate a
02:02 - latitude and longitude coordinate into a
02:06 - postal mailing address a street address
02:08 - so here's a preview of what it's going
02:10 - to look like when we're done a fused
02:11 - location provider will give us these
02:13 - coordinates and the rest of the data and
02:15 - your ability to control them and how
02:17 - precise they are
02:19 - so the first step is to create a layout
02:21 - so i don't want to spend a lot of time
02:23 - working on this layout so take a look at
02:25 - what it is here all the controls and
02:27 - their names i will provide you with an
02:29 - xml file that you can copy and paste or
02:32 - you can build it on your own but the
02:33 - point of this activity is not so much
02:35 - about the user interface as it is the
02:38 - more complex tools that are behind it
02:41 - so let's get started with making a new
02:42 - project i have android studio it looks
02:44 - like version 361 as the current for
02:46 - right now so let's get started with a
02:49 - empty activity
02:52 - so i'm going to give my application a
02:53 - name something like
02:55 - gps tracking demo
02:57 - so for my location i'm going to put in
02:59 - the domain name that i work at so i'm at
03:02 - edu.gcu which is grand canyon university
03:05 - and then the name of my app
03:07 - so i'll let the build process settle
03:10 - down and then i'm ready to go so let's
03:12 - start with the xml activity and i'm
03:15 - going to the
03:16 - text view for this so where did they put
03:19 - the text view it seems like they changed
03:20 - it on this version so if i go to right
03:23 - click and choose go to xml i get the xml
03:26 - feed
03:27 - now i'm copying and pasting in all of
03:30 - the code that i'm going to be including
03:32 - in this new version of the app so let's
03:35 - see what happens if i click on the view
03:38 - to go back to the
03:40 - graphical user interface view i get this
03:43 - so you'll notice that for each of these
03:45 - items here i have set a specific naming
03:49 - convention so sw stands for switch
03:52 - tv stands for text view
03:54 - and let's see is there anything else it
03:56 - looks like tvs and sws are the only
03:59 - thing i have in this version but you can
04:00 - see the constraints are all properly set
04:03 - so that the layout is nice so you can
04:05 - use my xml file if you like i'll put it
04:07 - in the comments below
04:09 - so it would be nice to see all of the ui
04:12 - elements in
04:14 - the code side by side so instead of
04:16 - switching back and forth between these
04:17 - two tabs i'm just going to split them so
04:20 - i'm going to right click up here and
04:22 - choose split let's try vertically
04:25 - and so you can see that now i have two
04:27 - two windows to work with so i've got xml
04:29 - on this side and i can switch to java on
04:31 - this side so this way i can get all of
04:33 - these references quite quickly
04:36 - so first of all i'll put all the text
04:37 - views into place so i'm going through
04:39 - each item that is not a label so tv lat
04:42 - tv lawn altitude accuracy speed sensor
04:45 - updates and address are the ones i'm
04:48 - looking for and i ignore everything that
04:50 - says label
04:51 - now just a reminder of what all of these
04:53 - things are
04:54 - that everything that has a zero in it
04:56 - right now is considered a
04:59 - text view everything that just has the
05:01 - word listed over on the left side is
05:03 - considered a label so we can ignore the
05:05 - labels they're static
05:07 - now the two switches that i'm
05:09 - programming here are the switch for the
05:11 - location updates
05:13 - and also the switch called gps
05:15 - the next part is to go inside of the
05:18 - uncreate method so remember uncreate is
05:21 - what's called the first time that this
05:23 - activity is opened
05:24 - so we need to give all of these
05:26 - variables an actual id number and so
05:29 - those id numbers are found in the xml
05:31 - file so
05:32 - we're going to let the find view by id
05:35 - function work for each of these so
05:37 - remember to do lat lawn altitude
05:38 - accuracy speed sensor updates address
05:41 - gps
05:42 - and the location updates
05:45 - so this is kind of a tedious process but
05:47 - you got to go through it to make sure
05:48 - that all of these things work
05:50 - so this would be a good time to test
05:52 - your app to make sure that we haven't
05:53 - mistyped any of these values so let's
05:56 - run the app
05:58 - alright so if you get the app to run
06:00 - correctly that's probably a good start
06:02 - so we can
06:03 - test it out there is no activity yet of
06:06 - course we've just got the controls and
06:08 - their values set up but if you have an
06:10 - app crash here then double check all
06:12 - your work
06:13 - so all of that is ahead in just a moment
06:15 - for right now though let's pause and
06:16 - take a break and we'll be right back hey
06:19 - welcome to part two of our application
06:20 - that we're building called the gps
06:22 - tracking demo you can see the app on the
06:24 - right we are going to configure some of
06:26 - the dependencies that are required to
06:28 - make gps work on your phone
06:32 - [Music]
06:38 - all right before we continue on any
06:40 - programming there's some important facts
06:42 - that we should look at regarding the api
06:44 - that we're about to use
06:46 - so there are three sources of data that
06:48 - your phone can get its location from the
06:51 - most obvious one is the gps satellite
06:54 - location that's the one that of course
06:56 - works from space
06:58 - cell tower locations are also accurate
07:01 - if you have a triangulation system they
07:03 - can use trigonometry to figure out how
07:05 - far away you are from each tower and
07:07 - concentric circles are the idea that you
07:10 - can measure distances from three points
07:12 - and triangulate with pretty good
07:14 - accuracy where you might be
07:16 - also wi-fi locations can be used since
07:19 - they are known
07:20 - gps locations
07:22 - and you can find locations if you're
07:24 - connected to a wi-fi with a fairly good
07:27 - accuracy all three of these are fused
07:29 - together into a class that we're about
07:31 - to use called the fused location
07:33 - provider and so we're going to build
07:35 - that in just a minute
07:38 - so here's some code that we're about
07:39 - ready to type we're going to create a
07:41 - fused location provider class in our app
07:44 - and it has two different uh functions
07:47 - that are going to be chained together so
07:49 - you can see this one called get last
07:50 - location and add on success listener
07:54 - so if a location is found then the
07:57 - success listener will create another
07:59 - trigger to another anonymous function
08:01 - it's called
08:02 - and so these nested
08:04 - functions will provide most of the work
08:06 - that our application is going to do
08:09 - so fortunately a lot of the class has
08:11 - its work
08:12 - done for us we don't have to determine
08:15 - which of the three services that we want
08:17 - to connect to we can give it a general
08:19 - idea to say be superior accurate or be
08:21 - super conservative with the power and
08:24 - this class will do the work for deciding
08:26 - which service is in action at the moment
08:29 - so we're going to be configuring a class
08:32 - called location request in just a minute
08:34 - and we are going to be specifically
08:36 - telling it if we want the priority to be
08:39 - high accuracy and how often we want to
08:41 - get the location updates
08:45 - so here is what the code is going to
08:46 - look like we're going to initiate a
08:48 - location request we're going to set its
08:50 - interval we'll set its fastest interval
08:52 - so that way it's if there's no concern
08:54 - about power we'll update every five
08:56 - seconds instead of every 30 and then
08:58 - we'll set it to high accuracy
09:00 - so there's different ways that you can
09:02 - configure this and you've got them all
09:04 - listed right here in front of you
09:07 - also in just a moment we're going to
09:09 - have to install the google play services
09:11 - so this will be a dependency in our
09:14 - gradle dependency list so what is google
09:17 - play services it's far more than just
09:19 - the google play store or games as a
09:22 - matter of fact it's google's attempt to
09:24 - regain control of an open source
09:26 - operating system so even though
09:28 - technically anyone in the world can
09:31 - use android freely
09:33 - only the
09:34 - official google play services that are
09:36 - installed give you the functions that
09:38 - most phones really require for example
09:41 - you want your app to work with google
09:43 - sign in to work with locations to work
09:45 - with maps to play games to work with the
09:48 - instant messaging systems
09:50 - there's a lot of services that are built
09:53 - into google play such as showing ads and
09:57 - doing some security work
09:59 - if you don't have google play services
10:01 - on here you really don't have a full
10:03 - functioning android operating system and
10:06 - so
10:07 - it's not available in china due to trade
10:09 - restrictions and the whole business of
10:12 - relationships with
10:13 - governments and so if you are building
10:16 - an app that is for the chinese market
10:18 - then you probably don't want to rely on
10:20 - google play services
10:22 - really the only company that this
10:23 - affects is huawei and so if you want to
10:25 - work with huawei they have an
10:27 - alternative google play services and you
10:30 - can see it here at the link below
10:33 - so now i need to go find the
10:35 - dependencies that are going to make this
10:36 - gps service work so i just googled this
10:39 - it says android location services and
10:41 - gradle which is the dependency manager
10:43 - and we'll pick the first link
10:47 - so about halfway through the list i find
10:49 - google location and activity recognition
10:52 - so i want to copy this link here it
10:54 - looks like version 17 is the current and
10:57 - we're going to put this into our
10:59 - dependency manager so i copy this link
11:01 - and switch back into android studio
11:04 - so the place that i need to put these
11:05 - dependencies is in this section called
11:07 - gradle scripts let's open the first one
11:10 - and see what it says
11:12 - so this is some dependencies and the
11:14 - note says
11:15 - don't place anything here
11:17 - any individual application dependencies
11:20 - belong in the other file so let's go to
11:22 - the second file and here they are so the
11:24 - dependencies that we're allowed to add
11:26 - are down here at the bottom of the list
11:29 - so i'm going to press enter and paste in
11:31 - the location services 17.0
11:34 - i can't just paste in some string here i
11:37 - have to put in the word implementation
11:38 - beforehand so
11:40 - i'm going to paste in implementation and
11:43 - then put in the little quotation marks
11:44 - before and after this
11:46 - and then at the top of the screen it
11:48 - says you must sync so i will choose sync
11:50 - now
11:51 - and let's see what happens i got a
11:53 - configuration successful so that's great
11:56 - hopefully yours worked as well if not
11:57 - then you might have to rebuild or clean
11:59 - your project or restart android studio
12:02 - sometimes that occurs but we've got a
12:04 - success on mine so we're going to keep
12:06 - going
12:07 - now let's switch back into main activity
12:09 - we're going to be able to use a new
12:11 - class it's going to be called fused
12:13 - location provider client and you can see
12:16 - that it's providing me some type ahead
12:18 - here so i'm going to choose this
12:20 - and it automatically imported something
12:22 - up here on line number nine it says it
12:24 - came from
12:26 - the google gms location service so i'm
12:29 - just going to put in the word fused
12:31 - location provider client as the name
12:35 - so i'll just put in a node here so it
12:37 - stresses the importance that the fused
12:39 - location provider client is the heart
12:41 - and soul of this application the
12:43 - majority of the app's features depend on
12:45 - this
12:46 - this would be a great time to check to
12:47 - see if the application still works so
12:49 - i'm going to click the run button and
12:51 - see if there are any errors with this
12:52 - new class
12:54 - it looks like it launched successfully
12:56 - so i couldn't ask for anything more than
12:57 - that so let's keep going
13:00 - the next class that i'm going to import
13:02 - is called a location request
13:04 - so the location request is a config file
13:07 - really it's a class that has lots of
13:09 - properties that will influence the way
13:11 - that the fused location provider works
13:13 - so at this point we're just going to
13:16 - declare that we have a new class a new
13:18 - instance of this class
13:20 - now that we've declared it in the top
13:22 - level of our app we're going to do the
13:25 - initiation down here after we've gotten
13:28 - all of the values of the ui settings
13:32 - the first two things i'm going to set up
13:34 - are called
13:35 - the set interval
13:37 - and we're going to set this to 30 000
13:40 - milliseconds
13:41 - and then the second item is called set
13:44 - fastest interval
13:45 - which means if we are using maximum
13:47 - power and maximum accuracy how often do
13:51 - we want to update
13:53 - an alternative to putting 30 000 in here
13:56 - would be to put in a thousand times 30.
13:59 - just makes it more obvious
14:02 - now just for
14:03 - showing a good programming practice i'm
14:05 - going to change these values from
14:08 - hardcoded in this part of the function
14:10 - to a constant so i will refactor choose
14:13 - extract and constant and both of these
14:16 - can be set at the top of the page then
14:18 - so after i've extracted these two i
14:20 - should be able to find what i put in
14:22 - up here yeah so we've got ourselves the
14:24 - default update interval and the fast
14:26 - update interval is 30 and 5. so if i
14:28 - have to make any changes later this is a
14:30 - convenient location to find these values
14:34 - the next item that i'm going to choose
14:36 - is called set priority
14:38 - and in set priority i have to specify
14:41 - location request dot and i can see some
14:44 - other constants that are available to me
14:46 - so by default i could set it to the
14:49 - balanced power accuracy that's probably
14:51 - what i want to choose high accuracy and
14:54 - low power and no power are other choices
14:56 - that we can use here so so far we've
14:58 - seen several things in this video we've
15:01 - imported the location request service
15:04 - and we've done some configuration here
15:06 - so in the next video we're going to
15:08 - configure these buttons here that say
15:10 - location service updates and the gps and
15:13 - wi-fi options and so that'll be coming
15:15 - up in the next video hi in this video
15:17 - we're going to do some more work on our
15:19 - gps tracking app this is the third one
15:22 - and we are going to start configuring
15:24 - these buttons here that allow us to
15:25 - switch from cell phone tower accuracy to
15:28 - the gps accuracy and then maybe we'll
15:30 - actually see some events here happen
15:32 - with our location services so that's
15:34 - coming right up
15:37 - [Music]
15:42 - so in this part of the video we're going
15:44 - to start attacking this button right
15:46 - here that says gps and save power which
15:49 - is the ability to switch between the gps
15:51 - service and the cell phone tower
15:53 - tracking so let's put in a click
15:55 - listener for this guy so to put in a
15:57 - click listener we go ahead and type in
15:58 - the name of our switch which is sw
16:01 - underscore gps
16:03 - and then inside the parentheses of our
16:05 - event listener we're going to add a new
16:07 - click listener
16:08 - so now let's do the code for the inside
16:11 - of our switch
16:12 - so we're going to check to see if the
16:14 - switch is checked so check means it's
16:16 - turned on
16:17 - if that's turned on then we want to be
16:19 - setting this to use the gps sensors or
16:23 - we call that priority high accuracy in
16:27 - the vernacular of this function here so
16:29 - we're going to use the constant called
16:30 - location request dot priority high
16:32 - accuracy then we're going to update the
16:34 - text view called sensor and sensor tells
16:37 - us which service that we're currently
16:39 - using and so we're using gps sensors and
16:42 - of course then else is going to do the
16:43 - opposite to say hey we're not going to
16:45 - use the high accuracy we're going to do
16:47 - a balance between power accuracy and the
16:50 - the priority of uh getting more accurate
16:52 - results and then we're going to tell it
16:55 - that the sensor is using the towers or
16:57 - wi-fi
16:58 - this would be a good time to check to
16:59 - see if it actually works
17:04 - so let's turn it on and run it so we've
17:06 - got ourselves
17:08 - power and gps down at the bottom and you
17:11 - can see
17:12 - that the
17:13 - the label is set correctly and we hope
17:16 - that inside the internals that the
17:18 - variable is also being set correctly but
17:20 - we won't know that until we get a few
17:22 - more lines of code
17:25 - all right so now we're going to create
17:26 - another method
17:28 - and i just want to mark the end of our
17:30 - uncreate method here because it's going
17:32 - to get longer and longer here so i'm
17:35 - just going to put in a comment so the
17:36 - new method is called update gps and it
17:39 - does several things first of all
17:41 - its goal obviously is to update the gps
17:44 - location so we'll have to ask for
17:46 - permission from the user before we can
17:48 - make this work and then we'll get the
17:50 - current location from
17:52 - the uh
17:53 - the fused client
17:54 - and then we'll finally update the ui or
17:56 - the text views so that'll display all
17:59 - the values on the screen
18:02 - so you can see we're getting closer to
18:03 - actually making this app work
18:06 - so the first thing that we have to do is
18:08 - invoke a variable that was declared at
18:10 - the very top of the application so it's
18:12 - fused location provider client remember
18:15 - this is the heart and soul of how this
18:17 - application works so now we're going to
18:19 - actually assign a value to it it comes
18:21 - from something called location services
18:24 - dot
18:25 - and we're going to get the location
18:27 - provider client
18:29 - and that is associated with a context
18:31 - and so we can either put in the word
18:33 - this or
18:34 - main activity dot this
18:37 - so the first thing we start with is the
18:39 - permissions issue so i'm going to put an
18:41 - if statement to say if the activity
18:43 - compact that's the that's the class that
18:46 - is our application
18:48 - if that is going to get a permission
18:50 - check to say
18:52 - were the grant permissions granted for
18:55 - access fine location that's the if
18:57 - question
18:58 - do we have permissions
19:00 - if we do then we'll continue on to get
19:02 - those locations if we don't have
19:04 - permissions then we need an else
19:06 - statement and we're going to have to go
19:07 - request those so that's some things yet
19:10 - to do
19:12 - so let's assume that we have permissions
19:14 - from the user
19:15 - so we're going to now call our fuse
19:17 - location provider client
19:20 - and use the method called get
19:22 - last location so whether that's five
19:25 - seconds ago or 30 seconds or
19:27 - 10 hours we're going to take whatever it
19:29 - has in its memory
19:31 - and then we're going to use an unsuccess
19:34 - listener so we're chaining these things
19:36 - together with dots
19:37 - and then inside of there we're going to
19:40 - have another unsuccess
19:42 - listener item
19:44 - so this will eventually feed us to a
19:47 - variable called
19:49 - location so the location uh variable
19:52 - that you see in this parameter will
19:54 - contain lots of things like latitude and
19:56 - longitude and altitude and speed and the
20:00 - other things and so we'll be able to
20:01 - take that location class
20:04 - and update our text views
20:06 - so we'll do that in just a minute that's
20:08 - still a to do
20:10 - so now let's do the work for getting the
20:12 - permissions
20:14 - so first of all there's a catch here you
20:16 - have to check to see if the
20:18 - value of your current android operating
20:21 - system is sufficient
20:23 - so we need to be at build number 23 or
20:27 - higher
20:28 - and so the build code for 23 as you can
20:31 - see is the letter m now if we have the
20:35 - correct version of an operating system
20:37 - then we can go ahead and get the
20:38 - permissions so we're going to use the
20:40 - request permissions command
20:42 - and then request permissions comes in
20:44 - the form of an array and the first item
20:46 - of the array is the location or the the
20:49 - the type of permission which is access
20:51 - find locations and then we need to
20:53 - provide it some other number so we could
20:55 - use a number one or two or three
20:56 - whatever we're going to make a constant
20:58 - we're going to call it permission find
21:00 - locations
21:01 - now you can see that we have several
21:03 - things that are underlined in red so
21:04 - these are errors that we must resolve
21:07 - so for the first one to resolve i forgot
21:09 - to put in sdk.underscoreint
21:12 - so build version integer has got to be
21:14 - greater than 23. okay my mistake
21:17 - then the other record goes away and then
21:19 - finally this permissions fine is not set
21:22 - so we need to
21:23 - make this into a constant
21:26 - so we have a choice it says make this a
21:28 - constant
21:30 - when i make it a constant it shows up at
21:32 - the top here and we have to provide it a
21:34 - value so let's create something i'm
21:36 - going to call it 99. you can use any
21:38 - arbitrary number you want
21:40 - well now we're going to have to have
21:42 - another method here that will actually
21:44 - go and request these permissions
21:46 - so let's go up to the top of the screen
21:47 - and we're going to override a method
21:49 - that comes with our activity so finding
21:52 - line number 20 which is our activity
21:55 - so
21:56 - app compat activity is the
22:00 - base class that we're our main activity
22:02 - is based on so i'm going to right click
22:04 - on it
22:05 - and i'm going to choose generate
22:08 - and this time i'm going to choose
22:10 - override methods
22:15 - now there's lots of methods that can go
22:17 - into a main activity as you can see here
22:20 - so many to choose from what do we want
22:24 - so what i'm looking for is the on
22:26 - request permission result
22:29 - and what that does is it tells the
22:32 - program to trigger a method
22:34 - after permissions have been granted
22:37 - so let's see what comes in the form of
22:40 - this
22:41 - new method that just showed up here on
22:43 - line 92.
22:45 - so the key part to recognize in the
22:47 - permission request with result
22:49 - is that there's a request code
22:51 - which is going to be the number 99 that
22:54 - i had assigned earlier
22:55 - and then the permissions which is which
22:58 - thing did we actually get permission for
23:00 - and then the results
23:03 - all right so let's get on with the code
23:04 - inside of this function
23:07 - so first of all the
23:09 - request code is important
23:11 - so there could be many different
23:13 - requests that we've gotten and we're
23:14 - only interested in number 99
23:16 - so in our switch statement we're going
23:18 - to say
23:19 - check the case for permissions fine
23:23 - location or we could type 99 either one
23:25 - will work
23:26 - now if the request was from that
23:29 - permission
23:30 - then we are going to update the gps so
23:33 - that's the function that we just got
23:34 - done coding a minute ago and then if
23:38 - if they didn't give us permission if
23:39 - they denied them then we'll just give
23:40 - them a toast message and exit the
23:42 - program
23:50 - let's scroll down to where the update
23:52 - gps function is
23:54 - so we didn't do anything here once we
23:57 - got permissions so this is a whole bunch
23:59 - of stuff to do
24:00 - we could
24:01 - code everything right here we could just
24:04 - update all the text views however i'm
24:06 - going to
24:08 - provide this as a
24:09 - separate function just to keep things a
24:12 - little bit more compact
24:14 - so the new method pops into existence
24:16 - down at the bottom of the list
24:18 - so it's rather arbitrary where it goes
24:20 - but that'll work
24:21 - and i'm going to put in a comment to see
24:23 - what the purpose of this function is
24:25 - this method so we're going to update all
24:27 - of the textview objects with a new
24:29 - location
24:30 - so where's the location at
24:32 - so what i need is a parameter
24:35 - so i'm expecting to get a location from
24:38 - the other function so let's put in the
24:40 - parameter here and then go back and
24:42 - patch up the other reference so it says
24:45 - you want to do uh update values so
24:48 - you're missing something you're missing
24:49 - a location
24:51 - well do we have a location yes that's
24:53 - what this variable above us gives us
24:56 - location is given here
24:58 - so location location location
25:01 - okay so i'm going to save that
25:04 - and then let's see i don't see any more
25:06 - errors so this is some to do work that
25:09 - we'll have to come back to in just a
25:10 - moment
25:11 - but don't forget that just because we
25:14 - asked for permissions here
25:16 - uh they're not yet defined we have to go
25:18 - into our manifest to fix those so let's
25:20 - go and look in the manifest so i'm just
25:22 - going to type in uses and then magically
25:25 - it seems to know what i want to do uses
25:27 - permission and then the name of the
25:29 - permission we're looking for is access
25:31 - fine location and then we close the tag
25:33 - off so we can close it as you've seen it
25:36 - written here or i could put in just a
25:39 - slash close and that's a self-closing
25:41 - tag so either one of those will work
25:44 - okay so that's the permissions i
25:45 - probably don't need to see the manifest
25:47 - anymore so i'll close it
25:49 - now let's just finish off what we
25:51 - started here we're supposed to update
25:52 - the ui values so let's go add those now
25:55 - so what i'd like to do is set the text
25:57 - for tv lat so remember text view
26:00 - latitude is what i'm talking about and i
26:03 - want to get it from the location
26:05 - dot
26:06 - get
26:07 - latitude
26:08 - you would think that would work well
26:10 - things aren't always that easy so the
26:12 - problem is get latitude is going to
26:14 - return to us an integer and set text
26:17 - doesn't automatically convert from
26:20 - integer to string so i've got to go in
26:22 - here and parse it
26:23 - so the way to parse an integer into a
26:25 - string is to use the string method
26:27 - called
26:28 - value of and we'll surround the integer
26:31 - that we're trying to get
26:33 - so i'm going to do two others that are
26:34 - fairly similar so i'll just copy and
26:36 - paste so the second one is get longitude
26:39 - and so we'll just change a few text
26:41 - items here and we got longitude the
26:43 - third one is accuracy also is just an
26:45 - integer that we're going to display as a
26:47 - value of how accurate the computer knows
26:50 - its accuracy is now the next item that
26:53 - i'm going to accomplish is the altitude
26:56 - and it seems like not every phone has
26:58 - the ability to get the altitude so we
27:01 - have to check to see if it has an
27:02 - altitude they actually made a function
27:04 - called has altitude if it's set to true
27:06 - then we'll get it if it's not set to
27:09 - true it means or it's probably null then
27:11 - we will just say it's not available
27:14 - the same kind of thing holds true for
27:16 - speed if your phone can calculate the
27:18 - speed then we'll display it if it is not
27:20 - set it is not a value it'll be null and
27:23 - so we'll just say not available
27:26 - so we've got ourselves this final
27:28 - product almost
27:29 - we've got ourselves the update val ui
27:32 - values and that was called from this
27:35 - method called update gps
27:38 - so we could have put all that code in
27:41 - inside here and update values
27:43 - but we might want to use that again
27:45 - somewhere else so that's why i separated
27:47 - it into a separate function but if you
27:49 - want to put it all together it'll still
27:50 - work
27:51 - now we've got to use this function so
27:53 - i've created the update gps but have we
27:56 - actually called it anywhere i don't
27:57 - think so so a good place to call that
27:59 - would be right at the end of our
28:02 - oncreate method because everything's
28:04 - been set now we're ready to do update
28:06 - gps
28:07 - so i'm going to save this and let's see
28:09 - if it'll work i'm going to run it
28:11 - alright so you should get permissions to
28:13 - show up i've already run mine once and
28:16 - so they're not there
28:18 - but i did give it permissions and you
28:20 - can see i have a gps location here so
28:22 - this is the the default location that is
28:25 - found in the settings of my virtual
28:27 - phone if you put this on a real phone
28:29 - you'll get the location where you're at
28:31 - and so it appears that mine's working so
28:33 - location updates on off is not doing
28:36 - anything yet we still got that to go the
28:38 - second switch is theoretically working
28:40 - however i really can't test it on this
28:42 - phone because it's a virtual phone but
28:45 - on your real phone you can check this
28:46 - out
28:47 - so we've got ourselves a one-time update
28:49 - it is just
28:51 - checking when the app launches
28:53 - that's pretty good but we want to have
28:56 - the app to be able to turn this service
28:58 - on and off which is this switch
29:00 - and we also want to be able to track
29:03 - this
29:03 - as it's turned on so every 30 seconds or
29:06 - every five seconds and so that's still
29:08 - some work to go but we'll fix that in
29:10 - the next video so stick around and we'll
29:12 - refine our application to be even more
29:15 - useful than it is now hi welcome to part
29:17 - 4 of our gps tracking demo you can see
29:19 - the app on the screen it's got a gps
29:21 - location in this video we're going to be
29:24 - able to turn this service on turn it off
29:26 - and to be able to configure how often it
29:28 - runs and so we've still got some
29:30 - refining to do but we'll finish this up
29:33 - in just a moment
29:42 - all right so we have to go and
29:44 - program this button here that is the
29:46 - turn on and turn off so that's a click
29:48 - listener
29:50 - let's go into our code and see if we can
29:52 - put that in our
29:54 - on create method
29:56 - so we'll create a click listener
29:58 - and then inside there we'll add a new
30:00 - anonymous function or an inline function
30:03 - called onclicklistener so when the
30:05 - unclick item occurs we will ask the
30:08 - question is this
30:10 - check switch checked if it's checked
30:12 - then we want it turned on if it's not
30:15 - checked if it's turned off then of
30:17 - course turn off tracking
30:19 - so i'm going to once again create helper
30:22 - functions
30:23 - so in this function i'm going to say
30:26 - let's let's make a new one called start
30:28 - location updates which will turn on a
30:30 - bunch of things and then we'll also have
30:33 - the equivalent turn off things so we'll
30:35 - stop location updates so we've got to
30:37 - create these functions separately so
30:38 - let's go and see if we can get some code
30:40 - helping i'll click on the first item and
30:43 - we'll choose generate a new method and
30:45 - we'll put it in the main activity and
30:47 - we'll do the same thing for the stop
30:49 - location updates so we should see two
30:51 - new methods in our program so let's make
30:54 - this obvious let's put in a
30:56 - statement to say update at one of the
30:58 - text views it's called tv updates
31:01 - and its status is to say hey we're being
31:03 - tracked or we're not being tracked so
31:06 - we'll put that in
31:07 - that doesn't actually change anything it
31:09 - just tells the user what's going on now
31:11 - the second statement in this method
31:13 - should be called
31:14 - fuselocationupdateclient
31:16 - dot
31:17 - and then we're going to request location
31:19 - updates and this method requires three
31:22 - parameters first of all it says
31:25 - give me your location request remember
31:28 - that's all of the parameters such as how
31:30 - often this is occurring and how accurate
31:32 - it should be so we defined that a long
31:34 - time ago the second item is called a
31:36 - location callback and we have not
31:39 - created this yet this is going to be yet
31:41 - another method that will trigger every
31:43 - time
31:44 - this location changes and then the third
31:47 - thing is called a looper variable and uh
31:50 - honestly we're just going to put the
31:51 - word null in and i got that from the the
31:54 - instructions in the guide of how this is
31:56 - supposed to happen so this might be a
31:58 - good time to show you where some of this
32:00 - information that i'm putting on the
32:01 - screen is coming from so i'm getting
32:03 - this from the
32:05 - google documentation in their tutorials
32:07 - so you can see that i'm at the page that
32:09 - says we're looking at get the last known
32:11 - location let's see if we've done any of
32:13 - this already
32:14 - so it says you must specify your app
32:16 - permissions and sure enough we did that
32:18 - right here we accessed
32:21 - they told us to use course location i
32:23 - used fine
32:24 - but mine's a little more accurate than
32:26 - theirs
32:27 - then we've got ourselves a on create we
32:30 - created a location service so we did
32:32 - that a while ago
32:34 - we had this same function called get the
32:36 - last known location
32:38 - so so far so good of course that's just
32:40 - part of their instructions let's click
32:42 - on the next and let's see what comes up
32:44 - so this says how to configure your
32:46 - location settings let's see what they've
32:47 - got they said oh don't forget to ask for
32:49 - permissions
32:51 - and then down here it says set up a
32:52 - location request
32:54 - and if you look at the code here this
32:55 - should look familiar we created things
32:57 - that look like this here we have ours is
33:00 - 30 000 which is 30 seconds or 5000 for
33:03 - the most accurate and so we've got one
33:05 - of these things already configured so so
33:07 - far so good
33:08 - so here's another page that now we're
33:10 - going to get some information from
33:11 - that'll help us so we're going to get
33:13 - the location updates so not just when we
33:16 - launch the app but every period of time
33:19 - so it says here make sure that you got
33:21 - permissions that seems to be a theme in
33:23 - their locations
33:24 - okay then we have a location request
33:28 - so let's let's take a look here what
33:29 - they're asking us to make
33:31 - so
33:32 - create something called a location
33:35 - callback
33:36 - and then
33:37 - when you have that going we're going to
33:39 - have a
33:41 - function that goes inside there so we're
33:43 - going to kind of use this as their model
33:45 - so let's return to our code and we need
33:47 - to make a location callback so
33:50 - that has to be declared somewhere let's
33:52 - go to the top of our app
33:53 - and let's put it in here in the list of
33:56 - things that are kind of global to our
33:58 - app
33:59 - so now inside of the uncreate method
34:01 - we're going to create a new method that
34:04 - is configured here so that is the
34:06 - location callback it is a new
34:09 - location callback
34:11 - and i'll put in some notes here that say
34:13 - that this event is triggered whenever
34:14 - the update interval is met so this is 5
34:17 - seconds or 30 seconds in our case so
34:19 - let's see what's available that we can
34:21 - do inside of the location callback so
34:24 - i'm going to click on the name
34:26 - right click it
34:28 - choose generate
34:30 - and override methods
34:32 - so this will tell me everything that you
34:33 - can do inside of here
34:35 - the two at the top are the ones that are
34:38 - interesting to me
34:39 - so on location result is the one that
34:42 - we're going to implement and uh location
34:44 - availability would probably tell you
34:46 - whether or not this is actually working
34:47 - so i'm going to just choose the first
34:49 - one
34:51 - there it is so now we have on location
34:53 - result
34:55 - and we should get the location results
34:57 - right here in this variable so now i'm
34:59 - going to treat this location result as a
35:02 - new value that we can update our app
35:04 - with and so i'm going to save it in a
35:06 - variable called location and then i'm
35:08 - going to pass that on to the update ui
35:11 - values method so that will just
35:13 - redisplay all the newest values now if
35:16 - you look at this you're going to say hey
35:17 - why did you save that as a separate
35:19 - variable and location you could have
35:21 - just called it inside of the parentheses
35:23 - certainly could have so let's see if we
35:25 - can make this code a little bit shorter
35:27 - so i'm going to copy this
35:29 - and overwrite location
35:31 - and then we can delete this entire thing
35:35 - so we could make it down to one line
35:38 - whichever you like
35:39 - alright so that should work
35:41 - let's go look at one more case when we
35:44 - had the we asked to turn off the gps
35:47 - tracking so we should update a few
35:49 - things here so this part of the
35:52 - program here is to stop
35:55 - the location updates
35:59 - and so
36:00 - we're going to set the all the
36:02 - properties of all the text values to
36:04 - show location is not being tracked so
36:07 - that is for the latitude the longitude
36:10 - the speed the address the accuracy the
36:12 - altitude and even the sensor
36:14 - and finally at the very end we're going
36:16 - to say fuse location provider dot
36:19 - remove
36:20 - location update so this is going to say
36:22 - hey no longer are we interested
36:24 - in doing the location callback function
36:26 - so take that out
36:29 - oh my goodness i'm looking at my program
36:32 - and i did it exactly the opposite way
36:34 - that i intended to you notice here this
36:36 - is called stop location updates
36:39 - and this one's called start
36:41 - and the code inside is totally the
36:44 - opposite so my goodness how could i be
36:46 - so dumb let's let's copy this out of
36:48 - here and put it down below
36:51 - and then copy this and
36:54 - replace the stuff that's up above
36:57 - and let's see then we can delete
37:00 - this here so i think that's a little bit
37:02 - better
37:03 - okay so stopping says no no tracking
37:07 - starting says yes we are being tracked
37:09 - and then we should update the gps
37:12 - oh my goodness well let's see if that
37:13 - works
37:15 - all right it looks like it's running so
37:16 - we have a gps location
37:19 - and let's check this switch that says
37:21 - hey
37:22 - nothing's working so all they all go
37:24 - back
37:24 - we'll turn it back on
37:26 - and we got more locations
37:28 - so we have one more part that's not
37:30 - seems to be working here it says the
37:32 - address and so maybe we'll leave that
37:34 - for the next video but that will be to
37:37 - check to see
37:38 - what the street address is based on
37:40 - these locations above here so we'll come
37:43 - up for that in a moment
37:44 - hi in this video we're going to update
37:46 - our gps tracking demo to include the
37:49 - address of a location so right now we
37:52 - don't have a street address by the end
37:54 - of this you will
38:00 - [Music]
38:04 - the key to make this address thing work
38:06 - is we're going to use a service provided
38:07 - by google which will automatically
38:09 - translate things for us it's quite
38:11 - simple actually so i'm going to embed a
38:14 - little more code inside of this section
38:16 - called
38:17 - update ui value
38:19 - so what we're going to include now is
38:20 - called the geocoder so it's a class
38:23 - that's provided to us in android so
38:25 - geocoder is a new geocoder and it needs
38:27 - some kind of a context so let's put in
38:29 - mainactivity.this
38:32 - now this isn't guaranteed to work so
38:34 - we're going to have to insert a try and
38:36 - catch so if there's an error a program
38:38 - won't crash at least
38:41 - so the geocoder is going to provide us
38:43 - theoretically with a list of most
38:45 - recently seen addresses
38:47 - and so we're going to define a list
38:50 - of type address so we're going to do
38:52 - geocoder dot get from location and we
38:55 - have to provide it a location so we know
38:57 - a location it's in the location variable
39:00 - and we'll do get latitude and get
39:02 - longitude
39:03 - and you can see that the parameter is
39:04 - asking for the maximum results and we
39:06 - only care about one the most recent one
39:08 - so we'll get one
39:10 - now i've never actually been able to get
39:12 - more than one address so i'm not quite
39:14 - sure how the geolocator
39:17 - actually provides a list of things but
39:18 - anyway i only care about the one that
39:20 - was most recently seen
39:22 - so then the next job is to provide a
39:25 - text update so we have a text view
39:27 - called address and we'll set the text so
39:30 - we'll get the address number zero so the
39:32 - first one in the lists so that's item
39:34 - zero and then as you can see that there
39:36 - are lots of pieces to that address so we
39:38 - could get the county this city we could
39:41 - get this zip code we could get all those
39:43 - things
39:43 - for right now i'm just going to get the
39:45 - street address but go ahead and
39:46 - experiment with the others if you want
39:47 - to add more than just the address line
39:51 - if for some reason this whole thing
39:52 - fails i'll just say set text and will
39:55 - point to the user to say hey didn't work
39:58 - now we could do the capture of the
40:00 - exception and send it off to another
40:02 - level but let's leave this as a simple
40:04 - app
40:05 - let's see what happens when i run it now
40:07 - so you can see that i have the same gps
40:10 - coordinates the latitude and longitude
40:12 - but the location is actually found in
40:14 - seattle well you can guess i'm probably
40:16 - not in seattle right now i teach at
40:18 - grand canyon university here in phoenix
40:20 - arizona
40:22 - so if you want to adjust your virtual
40:24 - phone to go somewhere else you can
40:27 - there's a settings button down here
40:29 - there's three dots here and it allows
40:31 - you to adjust so seattle as you can see
40:33 - is the default location if i want to
40:35 - search for somewhere else let's go to
40:36 - london and let's go to uk
40:39 - so we're in downtown london somewhere
40:41 - let's save the point and click ok so i
40:44 - have this other point i'm going to
40:45 - choose set location so that will
40:48 - supposedly
40:49 - set the location inside of my phone
40:53 - so do i have to wait for it to update
40:55 - let's see if i change the number of
40:57 - seconds that it's being updated at
41:00 - let's see if that does anything
41:02 - let's turn it off and start again and
41:05 - there it is okay so now i got a new
41:06 - location
41:07 - so try it on your real phone you'll
41:09 - probably get better results than a
41:11 - virtual phone
41:12 - but you can move around the world at
41:14 - light speed if you want to using your
41:16 - virtual phone okay so that gives us a
41:18 - pretty good starting point for building
41:21 - any kind of a gps application so this
41:24 - will save a location now think about how
41:27 - you would build a real app you might
41:29 - have a list of recent locations we'll do
41:32 - another tutorial that will actually put
41:34 - up a map on the screen and you can show
41:36 - the locations and save them as you go so
41:39 - you could like leave breadcrumbs so one
41:41 - more to come but for right now this will
41:43 - get you to the basics of how to get this
41:45 - fused location service working and to
41:48 - get permissions so i hope you had fun
41:50 - this will be another tutorial in the
41:53 - coming minutes here about working with
41:55 - more gps apps
41:57 - in this tutorial we're going to extend
41:59 - an existing application and we're going
42:01 - to show
42:02 - maps
42:03 - [Music]
42:10 - so in a previous version of this gps
42:13 - application we had an ability to capture
42:15 - all of these attributes of our location
42:18 - we were able to turn off and turn on the
42:20 - location updates set the settings for
42:23 - precision so it could use gps or the
42:25 - wi-fi towers in this version of the
42:28 - application we are going to have the
42:29 - ability to show a list of all of the
42:32 - places that we visited and then we're
42:34 - going to be able to show a map that will
42:36 - point a pinpoint where each of those
42:39 - locations is and then finally we have a
42:41 - button at the bottom that says drop
42:43 - breadcrumb which means wherever the
42:45 - current location is we're going to add a
42:47 - new pin to the map and a new item to the
42:50 - list and so that's what we're going to
42:51 - do in the next few videos
42:53 - now if you haven't already completed
42:55 - this application as the gps demo then
42:58 - you need to back up and there were like
43:00 - five different videos that will show you
43:01 - how to create this so we're on video
43:03 - number six right now
43:05 - so i'm transitioning back to the version
43:08 - of the application that was at the end
43:10 - of last tutorial so at this version we
43:13 - just had latitude longitude speed
43:15 - accuracy and the address we were able to
43:17 - turn on and turn off all of the
43:18 - different options and so now we're going
43:20 - to add those abilities to have the list
43:22 - of things that we've breadcrumbed and
43:24 - also have a list on our map with
43:26 - pinpoints so that's what we're going to
43:28 - start with now
43:30 - so step one here is i'm going to show
43:31 - you how to add a global address list so
43:35 - that way every activity in the in the
43:37 - program can see the list so what we need
43:39 - to do is extend the application class
43:42 - and make a place where we can put global
43:45 - variables
43:46 - so let's add that class now so i'm going
43:48 - to switch over to the folders where we
43:50 - have all of our java applications
43:53 - and let's see what i'm looking for is
43:55 - where we have our main activity yeah so
43:57 - this is the place this is the folder
43:58 - that i'm looking for so i'm going to
44:00 - right click and add a new java class
44:03 - and we're going to call this thing my
44:04 - application
44:07 - so i'm going to extend the super class
44:09 - as application
44:11 - which is going to allow us to choose
44:13 - this global list so you'll see how this
44:15 - works in a minute
44:17 - okay so you can see that i'm using
44:18 - github so i'm getting this error that
44:20 - says hey you just added something do you
44:21 - want to add it to your repository you
44:23 - might not see that all right so here is
44:25 - our new class we have main activity
44:27 - which is what we've been working on and
44:28 - now we have my application so my
44:31 - application extends the application
44:33 - class
44:34 - the first thing we have to do is set
44:36 - this up as a singleton a singleton means
44:39 - that there's only one instance allowed
44:41 - and we can create the instance the first
44:43 - time we call this object but after that
44:45 - we're going to make sure that there is
44:46 - only one so a singleton is a is a
44:49 - standard kind of uh programming method
44:51 - so if you google it you'll find other
44:53 - examples in other languages but we need
44:55 - to have a proper or method called uh get
44:57 - instance and then we're going to
45:00 - assign it this this property called
45:02 - singleton which is uh instance of itself
45:05 - my application
45:07 - then
45:07 - if we go to the uncreate method so when
45:10 - this thing is first made we are going to
45:12 - refer to the singleton as this which is
45:16 - this class
45:17 - so this here is the properties for a
45:20 - singleton now after we have the
45:22 - singleton created we can add some
45:24 - variables that will be treated as
45:26 - singleton variables again they will be
45:28 - kind of like globals
45:30 - now the global list that we're
45:31 - interested in maintaining here is a list
45:33 - of locations so you remember from the
45:36 - previous
45:37 - view of this app we're going to have a
45:39 - list of locations or location
45:41 - breadcrumbs and so the list type that
45:44 - we're looking for is of type location
45:47 - so we'll just name it my locations then
45:49 - we're going to generate getters and
45:51 - setters so that way we can get the list
45:53 - and we can set the list or we can add
45:55 - items to it but the point is that this
45:58 - list will be a single source of where
46:01 - we've been where we dropped our
46:02 - breadcrumbs so one activity can see this
46:05 - as well as another now we have to make
46:07 - sure that this list is initialized so
46:09 - the uncreate method seems to be the
46:11 - right place for this we will create a
46:14 - new arraylist and it can be empty so at
46:16 - least it's not null
46:18 - so let's return to the main activity and
46:20 - we're going to add a new button called
46:22 - drop breadcrumbs so let's come into here
46:25 - where the all the controls are and let's
46:27 - put in a couple of text items and then a
46:30 - button
46:30 - so first of all i'm going to put in a
46:32 - label and then a text view that will
46:34 - count the number of breadcrumbs that
46:35 - we've dropped
46:37 - so we could call these breadcrumbs or
46:39 - waypoints they're kind of used
46:40 - interchangeably here
46:42 - so the first one is a label so i'm just
46:44 - going to call this text as
46:47 - waypoints and we're going to set the
46:48 - constraints then it'll fit here below
46:50 - the sensor and it'll stick to the left
46:53 - side of the screen
46:54 - then the next text view will actually be
46:56 - the number of waypoints that we're going
46:58 - to collect or count
47:00 - and so this guy here will have the text
47:03 - of 0 and we'll make sure that its
47:05 - constraints are stuck to the top of the
47:08 - previous label and right to the edge of
47:10 - it so now we've got ourselves two labels
47:13 - or we've got two text views one's a
47:14 - label and one's a number zero so what
47:18 - we're gonna do with those well now we're
47:19 - going to count the number of items that
47:21 - we've dropped in his breadcrumbs well
47:23 - now we need to create that button so we
47:25 - can do the dropping so i'm going to drag
47:27 - a new button in
47:29 - so this next new button that we're going
47:30 - to put is called the new waypoint button
47:33 - so let's set the constraints so that way
47:35 - it is just below the label and the
47:37 - number that we've
47:38 - created
47:39 - let's set the width so that it extends
47:41 - to the left and to the right of the
47:43 - screen and the constraints will make it
47:46 - the full width then for the button name
47:48 - of course let's create a button that's
47:50 - called the
47:51 - new waypoint that'll be a good id for
47:54 - the button and that'll also be good text
47:56 - let's create another button below that
47:58 - and we'll call that show waypoint list
48:01 - so once again we'll set the constraints
48:03 - so that it fills up the entire width of
48:05 - the screen and fits nicely below the
48:08 - previous button
48:10 - and then a good name for the id on this
48:13 - button should be like
48:15 - show waypoint list
48:17 - and that could be a good name for the
48:18 - text as well alright so now we've got
48:20 - ourselves two buttons one of them is new
48:23 - waypoint and that will save the current
48:25 - location into the list and the second
48:27 - one is show the waypoint list
48:30 - and we'll probably get to that one in
48:31 - the next video but now we want to start
48:33 - programming these buttons so the new
48:35 - waypoint button is our first target
48:38 - so let's go into the main activity and
48:40 - start doing the code so main activity
48:42 - needs to have a reference to this so
48:45 - let's get to the top of the screen where
48:47 - we have the references
48:49 - so i'm going to add two new button
48:51 - variables here the first one is for the
48:54 - waypoint so new waypoint is the id that
48:56 - i used and the second one is show
48:59 - waypoint list and both of these have the
49:01 - prefix of btn
49:03 - in the uncreate method for this activity
49:07 - we need to then assign these values to
49:10 - the variables so we'll use find view by
49:13 - id for each of these guys assign them
49:16 - and so that now the button variables
49:17 - have been configured and initialized
49:19 - correctly so now let's go ahead and
49:21 - program the button listener for this
49:23 - button
49:24 - so we will do the set on click listener
49:27 - and we will add a new button click
49:29 - listener
49:31 - inside the method called on click let's
49:33 - put some comments to see what we're up
49:34 - to so first of all we're going to get
49:36 - the gps location the current thing that
49:38 - we're talking about and then we're going
49:40 - to add that to a global list so really
49:43 - that's the focus of this video here is
49:45 - we're trying to capture a list of items
49:48 - called breadcrumbs or waypoints
49:51 - now i want to create two class level
49:53 - level variables so let's scroll up to
49:55 - the top here and the first one that i'm
49:58 - going to create is a variable we'll call
50:00 - it current location and so we'll update
50:03 - this variable every time the gps is
50:06 - updated from the callback methods so
50:08 - this will be an easy accessible
50:11 - variable that all activities can get to
50:14 - then we will have a list of saved
50:17 - locations so this will be a list and
50:20 - it'll be a type location
50:22 - and the save locations is a great name
50:24 - for it
50:25 - now you're wondering what is this
50:26 - location thing again this is the class
50:28 - that is used by android
50:31 - maps and gps a location contains a bunch
50:34 - of things the latitude the longitude the
50:37 - altitude the speed if it's available and
50:40 - so it's a class that contains a lot of
50:42 - information about a gps point
50:45 - all right so where would be a good place
50:47 - to update this thing called
50:49 - current location
50:51 - well i think there was a callback method
50:53 - that we created in the previous videos
50:56 - and let's see if we can find it so down
50:58 - below way down here we have update gps
51:02 - and this looks like the thing
51:04 - so this function here or this method
51:06 - called update gps has the listener in it
51:09 - so we have the
51:11 - get last location going on here
51:14 - and let's go see if we can put this in
51:16 - to our current location so we're doing
51:19 - update ui values
51:21 - let's also put the current location here
51:24 - as
51:25 - this value called
51:27 - location with a lowercase l so
51:29 - this guy here is the current location so
51:32 - let's just save him to a variable that's
51:34 - further out all right so let's go find
51:37 - the click button that we were already
51:39 - programming earlier this is the new
51:40 - waypoint so in the comments in the
51:43 - unclick it says get the gps location so
51:46 - there should be one in that variable
51:48 - called current location then the second
51:50 - is add it to the global list
51:52 - so this might look a little strange but
51:54 - we're going to try to get access to this
51:56 - global class called my application so
51:59 - let's create a reference to it
52:01 - and then all we have to do to get this
52:04 - variable
52:05 - assigned a value is to call get
52:07 - application context
52:09 - and cast it to
52:11 - my application
52:13 - all right so that should provide an
52:16 - access to that class now if i want to do
52:19 - the saved locations
52:21 - i'm going to be able to get that from my
52:23 - application and we should say there's a
52:26 - getter in that class get my locations
52:29 - perfect
52:30 - okay so save locations now is the little
52:32 - global list
52:35 - now the last step is to take the saved
52:38 - locations
52:39 - and we're going to add an item to it
52:42 - which is the current location
52:44 - all right so we have this global list of
52:46 - locations and when we click the button
52:50 - we're going to add a new item to it
52:53 - now this will still cause an error we
52:55 - have to do one more step that i'll have
52:56 - to show you in a minute we have to
52:58 - change something in our manifest but the
53:01 - the general idea should work
53:04 - now i'm going to borrow these uh two
53:07 - lines here and reuse them in the ui so
53:10 - let's go down to the class that says
53:13 - where we're going to update the ui
53:14 - values right
53:16 - so in this location i'm trying to update
53:18 - the number of items in the list of
53:21 - waypoints
53:22 - so i need to add a text view and what
53:25 - was it called waypoints count or
53:27 - something it doesn't look like i've
53:29 - added that yet so let's let's go back
53:31 - and fix that problem so i've got to go
53:33 - to the very top here and add another
53:35 - reference to an item in my layout so i
53:38 - forgot to do that earlier so let's go to
53:40 - the text view items and let's call this
53:42 - thing
53:43 - waypoint counts
53:45 - i don't i don't know if that's the
53:47 - actual name for it but we can use that
53:50 - and then down here in the list of
53:53 - assignments we can do this text view
53:55 - waypoint counts
53:58 - okay i called it count of chromes that's
54:01 - the actual name so we'll use that count
54:03 - of chromes okay
54:05 - now let's go back down to the area where
54:08 - they're doing the updates on the ui so
54:10 - near the end of the program
54:12 - so what did i want to do i wanted to say
54:13 - the waypoint counts and set the text
54:16 - so the goal here is to show the number
54:18 - of items that are in my list
54:20 - so let's do the
54:23 - savedlocations.size
54:26 - and don't forget that we have to convert
54:27 - this into a string so i'm going to use
54:30 - the
54:30 - integer.2string method and then we
54:32 - should have an actual string that we can
54:34 - assign to the text
54:35 - so that should update the ui
54:38 - alright so i told you there was one more
54:40 - thing that i have to fix so i'm going to
54:42 - run the program and it should crash
54:49 - all right just as i predicted the
54:51 - application crashed let's go look at the
54:53 - logcat and see if we can understand
54:56 - where the error is because
54:58 - for sure you're going to see one of
55:00 - these items when it comes your way if
55:02 - you're using this global class
55:05 - all right so i got way too much stuff
55:06 - here i'm just going to
55:08 - click on the trash can and let's see
55:10 - i'll re relaunch the app and maybe we
55:12 - can get a message that i can find here
55:17 - okay so we got the app running again and
55:19 - it crashed the second time
55:21 - now here is the error it says
55:22 - application cannot be cast
55:24 - to this thing called my application
55:28 - so there it is on line 262
55:31 - this thing here doesn't work now i
55:33 - promised you it would
55:34 - and let's see if there is any helpful
55:37 - hints on it
55:39 - alright so there are no helpful hints to
55:41 - know what you're supposed to do here but
55:43 - i'll tell you what what the problem is
55:45 - let's go into the manifest as i promised
55:47 - and what we need to do is we need to
55:49 - give the application a name so let's go
55:51 - into the properties and we're going to
55:53 - call this thing
55:54 - name at android colon name
55:57 - and there it is it's suggesting my
55:59 - application there it is that's the
56:01 - problem
56:02 - isn't that a weird kind of a thing but
56:04 - anyway that will cause the error to
56:06 - disappear
56:08 - and let's see if we can get the app up
56:09 - and running now
56:11 - okay there we go so the
56:14 - location is right now at building 84.
56:16 - there are zero waypoints
56:18 - let's choose new waypoint
56:21 - and let's see the ui has not been
56:23 - updated so let's just shut this off and
56:25 - turn it back on and there we got one
56:27 - waypoint let's do another one
56:29 - so every time the app
56:31 - updates and gets a new location the ui
56:33 - should also update so i think that
56:35 - happens about every 30 seconds right now
56:37 - so i don't want to wait 30 seconds i'm
56:38 - just going to shut it off
56:40 - retrigger okay so we got two waypoints
56:42 - now in the next video we're going to
56:44 - show that list and then the video after
56:47 - that we're going to create a new button
56:48 - and we'll show them on a map so we're
56:50 - getting closer so what we got here was
56:52 - the ability to save a waypoint in a
56:54 - global list
56:56 - we'll see you in a minute in the next
56:58 - video
57:00 - hey welcome back to another android
57:01 - video for gps we're in the middle of a
57:04 - process of creating an application that
57:06 - does gps tracking and a demo
57:11 - [Music]
57:16 - so we created this waypoint button in
57:19 - the last video which allows us to add a
57:22 - new waypoint and so you can see that now
57:24 - we have three waypoints now in this
57:26 - video we're going to do show waypoint
57:28 - list and that will show all of the items
57:30 - that we've saved
57:32 - all right so let's get to this point
57:33 - here where we can make this button
57:35 - active and show the list
57:37 - so let's do a
57:39 - intent we'll make a listener on this
57:41 - button and create an intent to go to a
57:43 - new page so i might as well stop the app
57:46 - here and let's go and create that new
57:47 - page first of all so let's go into the
57:50 - folder where our java stuff is and i'm
57:52 - going all the way down to activity and
57:54 - let's choose an empty activity so empty
57:57 - means you know obviously we can start
57:59 - from scratch so i'll try to name this as
58:02 - well as possible so it's a show saved
58:04 - locations list
58:06 - and that should give us a pretty good
58:07 - description of what his job is
58:10 - so show save locations list is going to
58:12 - be very simple let's go to its layout
58:15 - and then we're going to add only one
58:18 - item
58:19 - we're just going to add a list view
58:22 - so here it is we've got an empty screen
58:24 - and i'm going into the legacy area and
58:27 - choosing list view
58:28 - dragging that out
58:31 - let's uh
58:32 - just
58:33 - change the id here let's just call it lv
58:36 - underscore waypoints so we know what
58:39 - what's in there
58:41 - all right so let's just uh leave that
58:42 - alone
58:44 - and i think we should probably do the
58:45 - constraints so let's see if we can pin
58:47 - that to the top
58:49 - and
58:50 - let's pin it to the side
58:52 - and to the right side now i'm going to
58:54 - intentionally leave no constraint at the
58:57 - bottom so it can fall off the edge of
58:59 - the screen
59:00 - because it's going to be scrollable all
59:02 - right so that is the entire layout it's
59:04 - going to be the simplest thing possible
59:06 - and the only way to to return to the
59:08 - main screen is to click the back arrow
59:10 - so we don't have to create a button to
59:11 - go back but we do have to create a
59:13 - button to get here so let's go back to
59:14 - our main activity
59:17 - and let's add
59:18 - some items to this
59:20 - button here we're going to make this
59:21 - thing
59:22 - a new button listener so show waypoint
59:24 - list
59:25 - is the id number let's go program it
59:28 - so back into main activity
59:31 - and let's go find a good place to put
59:33 - this
59:37 - so i'm thinking near the top of the
59:39 - screen is probably a good location so
59:41 - let's go and add our new button listener
59:44 - so button show waypoint list is the name
59:47 - and we will set a click listener on it
59:49 - and add a new click listener
59:51 - now inside of on click we're going to
59:53 - have a simple program we're going to say
59:55 - give me an intent to go to another
59:57 - screen
59:58 - so this intent should be pretty simple
60:01 - as you might remember from previous
60:02 - lessons an intent needs a couple of
60:04 - things it needs to have the context so
60:07 - the context is coming from
60:08 - mainactivity.this
60:10 - and then it has to have the name of the
60:12 - class that we're trying to show and so
60:14 - the class name is show saved locations
60:16 - list we just created that a second ago
60:19 - and then we just have to tell it to
60:20 - start the activity we don't have to send
60:22 - any data we're using a global lists that
60:24 - we've saved and we're going to access
60:26 - that in a minute all right so there we
60:28 - go we got ourselves the button listener
60:29 - let's see if it works
60:31 - and if it works then we can start
60:33 - programming the list
60:35 - all right it looks like we got ourselves
60:36 - the application running let's save a
60:38 - waypoint
60:39 - let's do a show the list and see if this
60:42 - works
60:45 - all right so it shows an empty list and
60:48 - i can return to the main program so far
60:51 - so good now when we go to this list here
60:53 - let's actually populate it with the
60:55 - items that we've saved
60:57 - so as we did in a previous video we're
60:59 - going to have a global access to this
61:02 - list so i need to get a reference to my
61:04 - application so my application comes from
61:07 - this function called get application
61:09 - context and then we cast it into this
61:12 - class called myapp
61:14 - then once we have that we can get the
61:15 - saved locations using the getter so get
61:18 - my locations remember this is a static
61:20 - class or this is a singleton so that way
61:22 - we can get it from anywhere in the
61:25 - application
61:27 - now the next thing we're trying to do is
61:28 - add this list to the list view that's
61:31 - supposed to be on this page so let's
61:33 - create some variables to access the list
61:34 - view
61:36 - so let's create a variable at the top
61:38 - level and we'll call it lv underscore
61:40 - saved locations that might or might not
61:43 - be the exact name i used in the layout
61:45 - then in the oncreate area we're going to
61:48 - go find this item in the view or find
61:51 - view by id
61:53 - and it looks like i called it lvu
61:55 - underscore waypoints so the names don't
61:57 - match exactly but it'll still function
61:59 - correctly so now all you have to do is
62:01 - connect our list called saved locations
62:04 - to the list view and the absolute
62:07 - simplest way to do this is with what's
62:08 - called a simple list adapter
62:11 - and it's not fancy but it is all we need
62:13 - for right now if you want to create a
62:15 - more fancy version with graphics and
62:17 - everything go see another tutorial on
62:19 - creating a custom
62:21 - list adapter
62:22 - so then what are the parameters inside
62:24 - of this arrayadapter there are three of
62:27 - them the first one is the context so the
62:29 - context is just the reference to this
62:31 - activity so i'll just call it this and
62:34 - then the second item is what layout or
62:37 - what type of adapter are you using so
62:40 - i'm going to choose a predefined one and
62:42 - you can find this in android.r.layout.
62:45 - and you can see there are multiple
62:47 - different types of layouts that are
62:48 - predefined for us now the one i'm going
62:50 - to choose is the only one that i've
62:52 - actually have any experience with is
62:54 - simple lists item one
62:56 - and it will take whatever object you're
62:58 - doing and make a two string out of it so
63:00 - it's not fancy but it will show the data
63:04 - now the last item in the list is the
63:06 - list itself so save locations is what
63:09 - we're looking for so that should assign
63:12 - all of the items in saved locations to
63:14 - this list
63:15 - let's run the app again and let's see if
63:17 - it works
63:18 - okay it looks like the app is up and
63:20 - running i'm going to choose new waypoint
63:23 - and then show the waypoint list and sure
63:25 - enough you can see that there is a
63:26 - location that is there
63:28 - let's go back and add another waypoint
63:31 - and choose show the list
63:33 - so we can see one there and one there so
63:35 - there are two now so we've got ourselves
63:38 - a successful list
63:39 - now as you could probably argue this is
63:42 - a very useless list what can i tell from
63:45 - it all i can tell is that i have a whole
63:46 - bunch of data that relates to a gps
63:49 - location i have latitude and longitude
63:52 - the point is that i now can see
63:55 - which waypoints i've saved now in the
63:58 - next video instead of showing a list
64:00 - we're going to put these on a map
64:02 - and that will be a whole lot more
64:04 - graphical and understandable but for
64:06 - right now we've got ourselves the goal
64:08 - that we met here of adding this button
64:10 - called show waypoint list and it's
64:13 - exactly what it does so we'll see in the
64:15 - next video where we create a map and
64:17 - show all the pins on the map
64:19 - hey welcome back to another in our
64:21 - series on our gps tracking demo in this
64:24 - video we're going to add a new button
64:25 - that says show map and it will show all
64:28 - of the waypoints that we've saved and
64:30 - put them as pins on a google map
64:32 - [Music]
64:39 - so let's get started right away by
64:41 - putting a button on this screen and then
64:43 - we'll create a new activity that will
64:45 - have the map
64:46 - so let's get into our main activity area
64:50 - and let's go ahead and add this new
64:52 - button
64:54 - so this is a pretty standard button
64:55 - we're going to put the anchor points in
64:57 - so that it falls next in line so
64:59 - there'll be three buttons in a row
65:01 - then let's set an id called button show
65:04 - map with the constraints of course and
65:07 - let's do the full width of the screen
65:09 - and then for the text let's put in
65:12 - show map
65:13 - now let's go into main activity and
65:14 - program this so we need to give a
65:16 - reference to it at the top of the screen
65:18 - and then program it
65:20 - so here we go with our reference
65:22 - so after the reference variable is
65:24 - defined at the top then we need to give
65:26 - it a value in the uncreate method we've
65:28 - got a whole list of things that are
65:29 - already being created and so let's
65:31 - choose a new one find view by id and it
65:34 - looks like btn show map is the correct
65:37 - value from the layout so now we've got
65:39 - ourselves a reference to the button
65:41 - now we have another button that's almost
65:43 - doing the exact same thing that this one
65:44 - is the show waypoint
65:47 - this one here so we're going to use this
65:48 - as a model so let's go ahead and add a
65:50 - new button listener
65:52 - so all the code will look pretty much
65:54 - like we did on the previous function so
65:56 - we're going to have a set on click
65:58 - listener a new click listener we're
66:00 - going to put inside an intent in there
66:02 - so the intent is going to say what is
66:05 - the context which is mainactivity.this
66:08 - and then we have a problem because we
66:10 - don't have the new activity that we're
66:11 - trying to get to yet so this is supposed
66:14 - to be called maps or something like that
66:16 - but
66:17 - we'll have to leave it blank and we'll
66:18 - go create the map and then we'll come
66:20 - back and finish off this button click
66:22 - listener
66:23 - all right so let's create the map so
66:25 - we're gonna have to leave this little
66:26 - error and it says we're expecting an
66:29 - expression so let's go create the name
66:31 - of the class that we'll actually get to
66:34 - in a minute so let's go up to the java
66:36 - folder right click and we're going to
66:38 - add a new activity this time and let's
66:41 - go to the gallery let's see what's in
66:42 - our gallery
66:44 - so you can guess that we're going to do
66:45 - an android maps activity let's choose
66:49 - next
66:50 - we'll just leave it as maps activity as
66:52 - a good enough name
66:53 - and finish
66:55 - okay so we got this map activity going
66:58 - and it says here we've got some to do's
67:00 - before we can get anywhere um anywhere
67:02 - close to using the maps
67:04 - so it says you need to have a google
67:07 - maps api key so you have to register
67:10 - your application with google in order to
67:12 - make it work well they make it so simple
67:14 - they have this link here you just copy
67:15 - the link and bring it into your browser
67:19 - so let's bring up a new browser here and
67:21 - paste that link
67:22 - and let's see what comes up
67:25 - so we're going to have a registration
67:27 - process so if you don't have a google
67:29 - account uh you don't have gmail well you
67:32 - have to get something like that
67:34 - so
67:35 - we have uh create a project here as our
67:38 - option and let's just choose
67:41 - and this will register a key name for us
67:44 - that we can copy and put into our
67:46 - project so if you have to go through the
67:48 - registration process of setting up a
67:49 - google api that's another issue
67:52 - but
67:53 - you're trying to get to this screen here
67:55 - all right so it says your api is enabled
67:57 - create the api key
67:59 - and let's see what comes up
68:06 - oh perfect okay so now i have an api key
68:08 - i'm going to copy that so there's a
68:10 - little copy icon
68:11 - and i'll just switch back
68:13 - into my application
68:15 - so i'm switching back and now it says
68:18 - this place called your key here so i'm
68:20 - just going to paste that now your key is
68:22 - going to be different than mine so
68:23 - obviously don't use the one that i'm
68:25 - using on the screen because it'll
68:27 - probably go away
68:28 - all right so we got this first step
68:30 - involved we got an api crea
68:32 - key created now we're ready to go ahead
68:34 - and do some programming well where is
68:36 - this new class it's called maps activity
68:40 - and they've already given us some code
68:41 - how nice
68:43 - tells us that we have an uncreate method
68:45 - and we've got ourselves a sample of
68:49 - this
68:50 - function here they've put some data in
68:51 - for us and they've added sydney isn't
68:54 - that nice so sydney is located at
68:56 - negative 34 151 on the gps coordinates
69:00 - that's the
69:01 - latitude and longitude so there is a
69:03 - class called lat long okay
69:07 - and they put a marker on this thing
69:09 - called marker in sydney and then they
69:11 - and they move the camera
69:13 - let's see if this actually does anything
69:14 - so let's go back into main activity
69:17 - and now we can add the reference to our
69:19 - new guys so it was called maps maps
69:22 - activity
69:23 - come on maps activity dot class
69:28 - all right so now the intent seems to be
69:30 - happy let's see if we can get to our new
69:32 - map and see what sydney looks like on
69:34 - the map
69:36 - okay the app is up and running let's
69:38 - just go straight to the show map button
69:40 - and there it is we have a map and sure
69:43 - enough it looks like sydney so i'm going
69:45 - to try to zoom in as best i can with
69:47 - this
69:48 - emulator it's a little bit odd
69:51 - now we're going to instead of putting
69:53 - sydney on the map we're going to put the
69:56 - points on that we've plotted using our
69:58 - gps tracker so let's go do that next so
70:01 - let's go back into our map program so
70:03 - maps activity
70:04 - and instead of showing
70:07 - the marker here for sydney
70:09 - and for this guy let's just
70:11 - comment them out because
70:13 - we might want to see them as an example
70:16 - but we want to use our own
70:18 - so the first thing i want to do is
70:19 - create a variable called savedlocations
70:22 - let's put it at the very top as a class
70:23 - variable and we can assign and read from
70:26 - that as we need to
70:28 - so we got saved locations as type list
70:31 - then let's go into the uncreate method
70:34 - and let's go and assign that to the
70:37 - global list that we've been working with
70:39 - so we're going to create two lines that
70:41 - will get us access to that list
70:43 - so my application is the first variable
70:45 - we need to create
70:46 - and we get that from our get application
70:49 - context command
70:50 - then the next line down is we're going
70:52 - to do save locations equals and we will
70:55 - get the locations from the global list
70:58 - so now save location should have data in
71:01 - it
71:02 - now once we have saved locations we can
71:04 - go ahead and add them to our map
71:06 - so now i'd like to create a for each
71:08 - loop and go through the items in the
71:10 - saved locations so when i type for each
71:13 - the ide helps me out with some code
71:16 - typing so it looks like in java we have
71:18 - to do a colon
71:20 - and that's how the for each loop works
71:22 - so we have four the first item is the
71:24 - counter variable or the each variable so
71:27 - let's type location is what we're
71:29 - expecting and then the list is after the
71:31 - colon so it's saved locations
71:34 - now i'm going to look at the example
71:36 - that we used for sydney so sydney used a
71:39 - type called
71:40 - lat long and so that's we're going to
71:42 - create as well so we'll create a new lat
71:44 - long variable
71:45 - and it is going to need the gps
71:48 - locations from our location item
71:51 - so
71:51 - location.getlatitude location.getlawn
71:54 - will give us exactly what we want
71:57 - so now i'm going to create a new map
71:58 - marker and let's take a look back at
72:01 - what they gave us for the sydney example
72:03 - so we're going to we're eventually going
72:05 - to call add marker that's the name of
72:07 - the function but inside the parentheses
72:09 - you can see that there is a variable
72:11 - called marker options so let's create a
72:14 - new marker options to start with and the
72:16 - marker options allow us to create a
72:18 - position property so marker options dot
72:22 - position
72:23 - and we have the lat long available now
72:25 - i'd also like to add a title to it
72:27 - instead of saying the marker in sydney
72:28 - for the text i'm going to create a new
72:30 - text and we have the lat and long so i'm
72:33 - just going to use that as the title so
72:35 - that way when we show the variable or we
72:37 - show the pin in the map it'll show us
72:39 - the location and
72:41 - we we could have put some other thing in
72:43 - there but this works as well as anything
72:45 - for a title
72:46 - finally we do the map m-map and add the
72:49 - marker and so this should add a new item
72:52 - to the list
72:54 - let's go ahead and launch this and see
72:55 - if it works we might have to
72:57 - refine it but i think this will work
73:00 - okay the app is up and running
73:02 - and we're let's gonna add a new waypoint
73:05 - and then let's go show the map
73:07 - so the map shows up
73:09 - and we have do we have a waypoint
73:13 - there it is
73:14 - it looks to me like it is in arizona
73:16 - which
73:17 - makes sense that's
73:19 - where grand canyon university is
73:21 - now let's uh let's go back here
73:24 - and let's add another location so as you
73:26 - recall we can set our location
73:30 - on the gps for our phone emulator to any
73:33 - place we want
73:34 - so let's let's go ahead and put in
73:36 - something in london
73:38 - and let's see what happens if we save a
73:40 - point here
73:42 - and i'm going to call this thing london
73:46 - so i got london in my list and i'm going
73:48 - to set the location all right so it's
73:50 - just like my phone went at light speed
73:52 - and is on the other side of the world
73:54 - now
73:55 - so if i turn the gps off and on
73:58 - uh it still says grand canyon university
74:01 - that's not what i meant so let's go and
74:04 - use this set the location come back
74:08 - and let's see what happens here do we
74:10 - have
74:12 - do we have a new location at london
74:15 - okay let's turn this off turn it back on
74:18 - let's see if we can get this to save so
74:20 - in a real phone this actually works
74:22 - better so let's go and look at the list
74:25 - and you can see now the last item in the
74:27 - list is a different location so that
74:29 - that looks good now let's go look at the
74:31 - map
74:32 - and we should see something up there's
74:34 - one tagged in london
74:36 - and there's something over here in
74:37 - arizona so yes we do have two locations
74:39 - now
74:40 - and the list seems to be working so this
74:43 - is a lot more fun with a real phone if
74:45 - you go out and you
74:47 - follow your phone around you can track
74:49 - and place little breadcrumbs where
74:50 - you've been
74:51 - and so this gives you an idea of how to
74:53 - track and put a pin on an item on your
74:56 - map now we're going to make another
74:57 - video that will show us how to click
74:59 - those buttons on the map
75:01 - and we could create some interaction
75:04 - with the map as well but for right now
75:05 - we got ourselves a map that shows our
75:07 - list so that's good progress one more
75:09 - video and we will show a little bit more
75:11 - interactivity see you soon
75:14 - hey welcome back to another video in our
75:15 - android app with gps in this video we're
75:18 - going to take our map and make it a
75:20 - little bit interactive so when we show
75:22 - the map of where we've placed our pins
75:24 - if i click a pin
75:26 - we can actually do something with it
75:28 - i'll show you how to make interaction
75:30 - [Music]
75:37 - okay so this should be a pretty quick
75:38 - video it's not really that complex of
75:40 - what we have to do
75:42 - so the activity that we're going to work
75:43 - on is the maps activity and we are going
75:46 - to program inside of the just the java
75:49 - code all right so let's um let's do two
75:51 - things here we're going to do a zoom in
75:52 - on the last pin that was dropped and
75:55 - then we're also going to add the ability
75:57 - to click on those pins so let's come
75:59 - into the place where we're putting the
76:00 - pins on the map that was on the map
76:02 - ready
76:03 - so i'm going to have a new variable and
76:04 - we'll call that the last location
76:07 - so this variable that i'm going to
76:08 - assign is called last location placed
76:11 - and for the initial value we'll just set
76:13 - it to whatever sydney was
76:15 - and then after we've got this defined
76:18 - i'm going to redefine it inside the loop
76:21 - so the last location placed is going to
76:23 - be important because it's where we're
76:25 - going to zoom in on the map
76:26 - and so every time we place an item in
76:28 - our for loop i'm going to update the
76:30 - last location placed as lat long which
76:34 - is exactly this one point
76:37 - all right so when i get to the end of
76:39 - the loop outside of the little curly
76:40 - bracket i want to zoom in on that last
76:43 - location so the method to do that is
76:46 - called animate camera as you can see
76:48 - there's several options for animate
76:50 - camera so i'm just going to choose
76:52 - animate camera now inside of there i
76:54 - need to have something to actually
76:57 - configure that so the item that i'm
76:59 - looking for is called a camera update
77:02 - factory okay so it's a factory design
77:04 - pattern
77:05 - go look up factory design patterns if
77:07 - you want to know what that's all about
77:09 - and then if you look at the options here
77:12 - i have the first one called the new lat
77:15 - long zoom
77:16 - and you can see that the parameter says
77:18 - i can have a lat a long and then a float
77:20 - value so the float value is the zoom
77:22 - value
77:23 - so the long value is pretty easy i have
77:26 - that already decided
77:28 - all right so the parameters i'm looking
77:30 - for inside of the new lat long zoom
77:32 - is the last location that was placed so
77:35 - that's the coordinates that we're going
77:37 - to and then a zoom value i think you can
77:39 - go from anywhere from like 2 to 20 or
77:42 - some range like that so i'm going to
77:43 - pick a medium zoom like 12 and i have to
77:46 - make sure that it's in float float
77:48 - values so let's put a 12 f this might be
77:50 - a good place for a constant value but
77:52 - let's just put in 12 for now okay i'm
77:54 - going to relaunch the app and see if
77:55 - it'll zoom in on the last location that
77:57 - i clicked
77:58 - okay the app is up and running let's
78:00 - show my waypoint list
78:02 - and it should show empty okay so i don't
78:04 - have any items let's add a new waypoint
78:07 - and let's see if it's in the list
78:09 - sure enough we have something i think
78:11 - that's london that's what it says here
78:13 - anyway right here in trafalgar square
78:15 - and now let's go show the map
78:17 - so it brings up the map and sure enough
78:19 - it zooms in and we're right there in
78:21 - london perfect
78:23 - now let's see if we can configure a new
78:25 - waypoint so let's go back to grand
78:27 - canyon university entrance
78:29 - set the location
78:31 - okay so it's now set there
78:34 - close here
78:36 - and this should update
78:38 - all right so i'm just going to wait it
78:39 - out i'm going to see if we can get the
78:42 - location to update it's supposed to
78:44 - update
78:45 - okay so it takes a few minutes maybe but
78:47 - as you can see i now have grand canyon
78:50 - university so
78:51 - like i say in a real phone it would work
78:53 - better
78:57 - okay so it looks like i finally figured
78:59 - got two different locations this one's
79:01 - at 33 this one's at 51. we got two
79:04 - different spots so let's go ahead and
79:05 - chose the map and the second one that i
79:09 - chose was in in arizona okay so if i
79:12 - zoom out a bit
79:14 - you should be able to see
79:15 - london as well
79:19 - and let's see did i have something set
79:21 - in london it looks like i did
79:23 - okay so go around your neighborhood and
79:24 - set these pins and they automatically
79:26 - should zoom in on you
79:28 - all right there's one more cool thing
79:29 - i'd like to show you it's the ability to
79:32 - click on a pin so let's go back and add
79:34 - a new item here
79:36 - so let's type in map dot set and you can
79:39 - see that there's a new option called set
79:41 - on marker click listener that sounds
79:44 - cool that means we're going to be able
79:46 - to use those pins as buttons
79:48 - so the click listener item that we're
79:50 - looking for is something called google
79:52 - map dot on marker click listener so
79:55 - i choose new and goo
79:57 - and you get the help typing ahead and
79:59 - there it is
80:00 - all right so now we have a new method
80:02 - called on marker click and it has a
80:05 - marker
80:06 - now the return false here is kind of a
80:09 - strange thing it's just something we
80:10 - have to add at the end i think it tells
80:12 - the computer or tells android that we're
80:16 - we haven't actually consumed this click
80:18 - it's
80:18 - it's going to be used again later i'm
80:20 - not quite sure what that is but we'll
80:22 - leave return false as is
80:24 - so i'm going to create a very simple
80:26 - routine here i'm just going to count the
80:27 - number of times that this button is
80:29 - clicked this pin is clicked you could
80:31 - set it to do other more interesting
80:33 - things but this just gives you a demo of
80:35 - how clicking works
80:38 - so we're going to utilize a property in
80:40 - a marker called a tag now tag is kind of
80:42 - a universal flexible type of field you
80:46 - can stick anything in it until you want
80:47 - you can put in an integer strings
80:49 - objects we're going to just use an
80:51 - integer so i'm going to say
80:53 - assign this value called clicks to be
80:55 - whatever was in get tag now you can see
80:58 - that there's a problem here it says
81:00 - you don't know really what get tag is
81:03 - but if you cast it
81:05 - you will now have an integer
81:07 - as a promise so if it doesn't work let's
81:09 - check on the second line to say if
81:11 - clicks turns out to be absolutely null i
81:14 - mean it didn't get work it didn't get
81:15 - anything the the tag is empty so if the
81:17 - tag is empty then let's set the value of
81:20 - clicks to zero
81:21 - after we set it to zero then let's
81:23 - increment it so we'll do a plus one and
81:25 - then we will set the tag to whatever new
81:28 - variable it is so
81:30 - it might be one it might be ten whatever
81:32 - how many clicks it was
81:34 - so the next goal is i'm going to have a
81:35 - toast that will tell us how many times
81:37 - that the marker was clicked
81:39 - so i will put in a string for the text
81:41 - that says marker and we'll get the title
81:44 - was clicked
81:45 - and then how many times it was clicked
81:47 - is from the tag
81:49 - so this should tell us a new number
81:51 - every time we click it
81:53 - alright let's run the application again
81:55 - and let's go ahead and set a new
81:56 - waypoint
81:58 - and let's show the map
82:02 - all right here is our marker and if i
82:04 - click it
82:05 - and let's see if the click works there
82:06 - it is
82:07 - so at the bottom i have a toast that
82:09 - says your marker
82:11 - was clicked three times and four times
82:14 - now there's all kinds of things you can
82:16 - do with markers you can set their colors
82:17 - you can change them to different styles
82:20 - other than these generic pins you can
82:22 - draw circles you can draw lines maps
82:24 - have a lot of options you can do heat
82:26 - maps you can do
82:29 - guided tours
82:30 - so we're just barely getting started on
82:33 - the maps and so since this is an android
82:35 - class i wanted to show you how to get
82:37 - into these different classes
82:39 - but look at the documentation to see
82:41 - what the full potential is
82:43 - so this extends our gps demo and allows
82:46 - you to add waypoints save them as a list
82:49 - show them as a map and navigate between
82:51 - a few screens so very basic of course
82:54 - but it's a great doorway opening to
82:57 - whatever apps and imagination that you
82:59 - can think of so good luck with your apps
83:02 - in android and maps
83:14 - you