00:00 - hello and welcome to this video where
00:02 - you're going to learn how to code in
00:04 - javascript with the help of two really
00:06 - popular millennial games my name is anya
00:09 - and i'm a software developer and
00:10 - youtuber who just loves to teach
00:12 - javascript and reacts by building all
00:14 - sorts of online retro and modern games
00:17 - today i'm going to be focusing on two
00:19 - modern classics that's doodle jump and
00:22 - flappy bird in these two tutorials
00:24 - you're going to practice over 32 of
00:26 - javascript's most popular methods
00:28 - including for each event listener slice
00:32 - pop push and many more these two
00:34 - tutorials for those who've already
00:35 - completed free code cams fundamental
00:38 - courses in html css and javascript as
00:41 - we're not going to be going into the
00:42 - nitty gritty i'm gonna already
00:44 - you know assume you know the for loop is
00:46 - you know what a const and let are if you
00:48 - are unsure of any of those words that
00:49 - i've just used please go ahead and do
00:51 - those fundamentals fast or hey if you're
00:53 - feeling brave follow along the more the
00:55 - merrier i'm gonna go at my natural pace
00:58 - but please feel free to use the youtube
01:00 - settings right here if you want to speed
01:02 - up or slow down it should be where the
01:04 - little cog is so yeah go ahead and do
01:07 - that it's pretty hard to please everyone
01:08 - but hey i try i also want to make note
01:11 - that this is going to be the basic
01:12 - versions of the game okay so we're not
01:14 - going to be like leveling up adding
01:16 - levels and the styling is going to be
01:18 - super basic i'm doing this because we
01:20 - want to practice the logic of javascript
01:23 - and not focus too much on styling that
01:26 - part is going to be completely up to you
01:28 - when you do finish your games please do
01:30 - share them with me i'd love to see what
01:31 - you've made how you have been creative
01:34 - how you've really taken the game and
01:35 - made it your own who knows maybe you've
01:37 - like added 10 levels to it i really want
01:39 - to see so please do share them with me
01:41 - i'm going to put my socials right here
01:43 - please tag me and free code camp i know
01:45 - we'd both love to see what you have made
01:47 - okay so what are we waiting for let's do
01:49 - this doodle jump exclusively for free
01:51 - code cam coming up first
01:56 - okay so first let's talk logic let's
01:59 - actually figure out what we need to do
02:01 - to make this game first
02:03 - so if we look at the game itself you
02:05 - will see that we need to start off with
02:07 - five randomly placed platforms so we're
02:09 - going to need to make that
02:11 - we also know they're all equally spaced
02:13 - apart so that's something that we're
02:15 - going to have to think about equally
02:16 - spaced apart vertically that is
02:19 - we also have the doodler himself who
02:22 - automatically lands wherever the first
02:24 - platform is okay so we're gonna have to
02:26 - remember that as well he can't just be
02:28 - landing wherever when we start the game
02:30 - otherwise you'll just fall to the bottom
02:31 - and die
02:32 - we then also have the platforms moving
02:36 - once the doodler is at a certain height
02:40 - okay so they're not always moving it's
02:41 - only if he moves past a certain height
02:44 - that's something else that we're gonna
02:45 - have to remember
02:46 - now you can also see they are
02:48 - disappearing if they pass the floor and
02:51 - then we add a new one to the top once
02:53 - that happens so i already know this is
02:54 - going to be array work we're probably
02:56 - going to be using pop or unshift in some
02:59 - way or another with this array
03:01 - and of course we have the doula
03:03 - movements themselves so that's gonna be
03:05 - a lot of jumping and event listeners
03:07 - so yeah you can see he he jumps up and
03:10 - down if he is on any platform at any
03:12 - height he also moves left and right but
03:16 - stops if he hits the left or right hand
03:18 - edge and the game is over if he hits the
03:20 - floor
03:22 - we then also need to see the final score
03:24 - which is actually the amount of
03:26 - platforms we have jumped over so we're
03:28 - gonna have to account for that we're
03:29 - gonna have to store this score somewhere
03:31 - okay so now that we have those basics
03:33 - down here are some of the javascript
03:35 - methods that we're gonna use for this
03:37 - project
03:38 - okay great and now time to set up our
03:41 - project
03:43 - okay so to start off here is our project
03:46 - i've already gone ahead and made some
03:49 - html boilerplate where i have linked our
03:52 - app.js file for our javascript with a
03:54 - script tag and our style sheet with a
03:57 - link tag right here
03:59 - i've also gone ahead and put in a div
04:02 - and given it the class of grid
04:05 - this is where all the magic is going to
04:07 - happen this is where our grid our doodle
04:09 - jump grid is essentially going to be
04:12 - okay so let's actually start off perhaps
04:13 - by styling this grid up so
04:16 - let's open up our style sheet
04:19 - and use dot grid because this is how we
04:22 - get classes with the dots
04:24 - we're grabbing the div with the class
04:26 - name of grid giving it a width of 400
04:29 - pixels
04:31 - a height of 600 pixels
04:33 - a background color of let's say yellow
04:36 - for now
04:42 - a position of relative
04:46 - okay so i'm going to explain this a
04:48 - little bit later but we need to give it
04:49 - a position of relative if we're going to
04:51 - be dealing with positions of things in
04:54 - our
04:54 - browser okay so the next thing we're
04:57 - going to do is actually grab our doodler
04:59 - so we haven't made them yet but i'm
05:00 - going to go ahead and style them up as
05:02 - if we did
05:03 - so once again i'm going to give it a
05:06 - class of doula so dot doodle
05:09 - and then he's going to be 60 pixels wide
05:12 - so width 60 pixels
05:14 - a height of 85 pixels
05:16 - a background color of let's say red
05:19 - and this time position absolute
05:22 - ah we need to actually spell doodler
05:24 - correctly
05:28 - okay so this is looking good let's go
05:30 - ahead and make our platforms too
05:32 - so
05:33 - each platform is going to have a class
05:35 - of platform
05:36 - and i'm going to give it a width of 85
05:38 - pixels
05:40 - a height of i don't know 15 pixels
05:44 - and then a background color of green i
05:48 - think green will be
05:49 - good i mean this is just temporary for
05:52 - now
05:53 - i'm also going to give it a position of
05:55 - absolute
05:56 - i am using position absolute for the
05:58 - doula and the platform to make sure that
06:00 - their position is absolute inside our
06:02 - grid whereas the grid itself is going to
06:05 - be relative to our browser okay so
06:08 - that's the sort of meaning behind that
06:11 - now let's flip over to our app.js file
06:14 - now the first thing to do because i did
06:16 - put my javascript tag in the header is
06:20 - actually use a document event listener
06:22 - and pass through dom content loaded okay
06:25 - so that's the event essentially what
06:27 - this is saying is that i only want the
06:29 - contents of this file to load only once
06:32 - all the html has been written let's just
06:35 - get rid of that for now we don't need it
06:37 - an alternative to this would be putting
06:39 - your script tag at the bottom of your
06:41 - html file both ways are correct this
06:44 - one's just that little bit more
06:45 - foolproof
06:47 - okay so first things first let's
06:49 - actually grab our grid so we can work
06:51 - with it in this file i'm going to do so
06:54 - by the
06:55 - getting the const grid and using
06:57 - document query selector so query
07:00 - selector is actually a javascript method
07:02 - that allows to pick out elements from my
07:05 - html
07:06 - so in this case i am picking out the
07:08 - class
07:10 - again dot of grid
07:12 - so i'm picking out this element right
07:14 - here
07:16 - next let's grab our doodler
07:18 - so we don't actually have this in our
07:19 - html file yet
07:21 - so let's go ahead and create him so
07:24 - cons doozler i'm going to use document
07:27 - create element to create a div
07:31 - so i'm creating a div at the moment
07:34 - and i'm calling it doodler we haven't
07:36 - actually placed our doula
07:38 - in anywhere yet so if you go to your
07:40 - browser you won't see him we have just
07:42 - created a div okay now next let's
07:45 - actually write a function to create the
07:47 - doodler itself okay so i'm gonna write
07:49 - function create doodler
07:51 - and inside of this i'm actually gonna
07:54 - grab our grid which is already made and
07:58 - use a javascript method called append
08:01 - child
08:02 - okay so i'm going to put in something
08:04 - into our grid that's what child append
08:06 - child the grid is the parent i'm putting
08:08 - in a child into it
08:10 - so i'm going to put the doula the div we
08:12 - just created called doodler i'm bringing
08:13 - that into our grudge
08:16 - okay
08:17 - let's go ahead and invoke this to see
08:19 - what happens and if it has worked
08:22 - so let's go ahead and do that now uh we
08:24 - actually need to add some styling to
08:26 - this otherwise of course we won't be
08:27 - able to see it so let's grab that doula
08:29 - the constella and use classless add to
08:33 - add the doodler class so this class
08:35 - right here to it
08:38 - okay now let's click refresh and there
08:40 - he is there's our doodler fantastic
08:43 - that has worked
08:45 - okay now let's actually get to moving
08:46 - our dealer around
08:48 - so i can actually move elements using my
08:51 - javascript which is pretty cool i can
08:53 - actually use javascript to essentially
08:55 - give css attributes to elements
08:58 - i'm going to do this by writing doula
09:01 - style
09:02 - and left
09:04 - okay so if i go ahead and just write the
09:07 - string 50 pixels
09:09 - and save this file
09:11 - you will see that i have actually made
09:13 - my element move 50 pixels or appear to
09:15 - move 50 pixels because essentially all
09:17 - i'm doing is giving it a left spacing of
09:20 - 50 pixels great
09:23 - now i'm actually going to store i don't
09:24 - want 50. i want to store this 50 as a
09:27 - variable so that i can manipulate it
09:29 - later and we can change it around so i'm
09:31 - going to do that now i want to say i
09:33 - don't know doodler left space sure let's
09:35 - do that do the left space
09:37 - so i'm replacing the 50
09:39 - plus px
09:42 - and now all i really need to do is
09:45 - let doula left space equal 50. so this
09:48 - is essentially the same thing as we
09:50 - wrote before it's exactly the same thing
09:54 - cool
09:56 - now let's go ahead and give it some
09:59 - bottom spacing as well we do that in the
10:02 - exact same way so get the doula use
10:04 - style and bottom and then do the bottom
10:07 - space plus pixels
10:09 - and once again at the top let's define
10:12 - what this is so let doula bottom space
10:15 - i don't know 150 pixels
10:18 - see what that looks like
10:20 - and fantastic
10:21 - so you now see 50 and 150
10:25 - and it's going from this point right
10:26 - here okay this corner
10:28 - that is essentially what we mean
10:31 - okay great so we've created our doula
10:34 - this is all looking good
10:36 - now
10:37 - uh when do i want to create the doula
10:39 - well i'm gonna actually write another
10:40 - function
10:41 - i'm gonna call it function start
10:44 - and i want our doula to appear if this
10:48 - function is invoked
10:49 - okay so let's get rid of this here
10:51 - because i don't want it creating in the
10:53 - file
10:54 - now i'm going to use an if statement
10:56 - and if is game over which we haven't
10:59 - defined yet
11:01 - equals false
11:03 - then
11:04 - i want to create the doula i'm actually
11:07 - gonna go ahead and do let this game over
11:09 - false here to start with because
11:10 - obviously when we start the game the
11:12 - game is going this game over is false
11:15 - now another neater way of actually
11:17 - writing is game over false
11:19 - is actually to get rid of this
11:21 - and just put a bang at the beginning
11:23 - okay so if the game is not over
11:26 - then we create doodler
11:28 - great
11:30 - let's invoke this again so this is going
11:33 - to be our start function it would be
11:35 - cool in the future to attach a button to
11:37 - this to make our game start so it
11:39 - doesn't just start you know when we load
11:41 - the browser so i'm going to make a note
11:42 - of this here attach
11:44 - to a button so we attach this function
11:45 - to a button but that's something you can
11:47 - do if you wish
11:49 - now the next thing i want to happen when
11:51 - my game starts or whenever we press the
11:53 - button is i want to create platforms
11:56 - i'm going to write function create
11:58 - platforms
11:59 - and let's go ahead and write this
12:01 - function so
12:03 - function create platforms
12:10 - now essentially in here we're going to
12:11 - be using a lot of the same logic we did
12:13 - to create the doula apart from five
12:16 - times so hopefully you're gonna be a
12:19 - little bit more familiar with this so
12:20 - let's go ahead and do it
12:22 - so for this i'm actually going to use a
12:24 - for loop as we need to do this five
12:26 - times as i said
12:27 - so for let i equal zero and as long as i
12:31 - is smaller than five we increment i by
12:34 - one okay so this is the syntax for a for
12:37 - loop
12:38 - now i could make this a little bit
12:40 - neater instead of using the five and
12:42 - actually replace this with a variable so
12:44 - let's just do that
12:46 - platform
12:47 - count i guess that sounds
12:49 - right i'm gonna use platform count for
12:51 - this
12:52 - so let's scroll to the top and once
12:54 - again let platform
12:56 - count and i'm going to store the value
12:59 - 5.
13:00 - this is so we can change it later on as
13:01 - well
13:03 - okay so now let's get to writing some
13:05 - logic
13:06 - for this i'm actually going to set a
13:08 - platform gap to start off with
13:11 - okay because we need to decide exactly
13:14 - how much space each platform is going to
13:16 - have
13:17 - in between each other
13:19 - so let's call this platform space
13:24 - now to decide this i'm actually going to
13:26 - have to look at the height of our grid
13:28 - so 600 pixels
13:30 - take that 600 and divide it by the
13:34 - platform count
13:35 - okay so that as we know is five
13:38 - so the platform space actually let's
13:41 - call it platform gap that probably makes
13:43 - a lot more space the platform gap is now
13:45 - gonna be 600 divided by five so that's
13:47 - going to be the space if we choose to
13:49 - add more platforms this will of course
13:51 - change as well
13:53 - okay now let's go ahead and start adding
13:55 - some spacing to all our platforms
13:58 - so to do this i'm going to make a new
13:59 - variable called let platform bottom let
14:02 - new platform
14:04 - bottom
14:05 - and once again i'm gonna actually give
14:08 - this new platform bottom a value of 100
14:12 - plus i
14:14 - multiplied by the platform gap
14:16 - okay so what i'm doing here is using my
14:19 - for loop in order to increment the gap
14:21 - space so 100 obviously when i is zero
14:25 - times platform gap would be zero
14:27 - one times the platform gap is going to
14:28 - be 120 two times the platform graph is
14:31 - going to be 240 and so on okay so that's
14:34 - how that's going to work
14:36 - so
14:37 - let's go on
14:39 - and do it so i times
14:42 - plat gap
14:44 - okay
14:45 - cool
14:46 - okay great now that we have that down
14:48 - let's go ahead and actually start making
14:50 - our new platform so let new platform and
14:53 - i'm actually going to create a class for
14:55 - this called new platform okay and it's
14:59 - going to use things like the new
15:00 - platform bottom in our for loop
15:02 - so i'm going to show you how to do this
15:04 - class platform
15:07 - and then i'm going to need a constructor
15:10 - so constructor to construct our class
15:13 - that's what a constructor essentially is
15:16 - now in it as i said i'm going to pass
15:18 - through the new platform
15:20 - okay so let's pass it through here as
15:21 - well
15:22 - and i'm going to use this to create our
15:24 - new platform so each new value that i
15:28 - get is going to be passed through into
15:29 - this class five times
15:33 - so in each platform well what makes up a
15:36 - platform let's have a think about it
15:38 - each one of them is going to have its
15:40 - own bottom so bottom spacing between the
15:43 - five is all going to be different and
15:44 - we're going to use new plat bottom for
15:46 - this
15:47 - we then also need a left spacing because
15:50 - each platform has its own left spacing
15:53 - okay
15:54 - now we know the grid width is 400 and
15:57 - the platform width is 85. so we actually
16:00 - go ahead and make sure
16:03 - that the left spacing is anything from
16:07 - 315 pixels okay because 400 minus 85 is
16:10 - 315 and the left spacing as we know is
16:13 - from the left side of the platform so as
16:15 - long as we get a number from zero to 315
16:18 - it will appear in our grid okay so this
16:21 - left equals math random this is another
16:24 - javascript method
16:26 - if i use math random and multiply by any
16:28 - number it will return a random number
16:30 - from 0 to 315.
16:33 - this is going to be our left spacing for
16:34 - a platform
16:36 - now i'm going to do something called
16:38 - this visual and again use document
16:40 - create element just like we did with our
16:43 - doodler to create a div for each
16:46 - platform
16:48 - okay so that's looking good now we just
16:51 - need to add some styling to it so we're
16:54 - going to actually store the visual as
16:56 - the const visual
16:58 - okay this is just we can use it so now
17:00 - visual class list add
17:03 - andy's style of platform
17:05 - i'm doing this because this
17:07 - visual.classes ad wouldn't work we need
17:09 - to store it as a variable first
17:12 - now once again let's
17:14 - give it some left spacing so this style
17:16 - left will be this left plus the string
17:19 - pixels and visual cell bottom is of
17:22 - course going to be this bottom plus
17:24 - pixels
17:26 - this is looking good i'm really pleased
17:28 - with this so far
17:32 - okay so the last thing to do as you
17:34 - might remember from our doula is
17:36 - actually put this into our grid once
17:38 - again using append child the javascript
17:40 - method of pen child and passing through
17:43 - our newly created visual
17:46 - okay
17:49 - let's see if this has worked moment of
17:50 - truth
17:52 - and great you can see all five platforms
17:54 - randomly spaced out from the left and
17:57 - evenly spaced out from vertical
18:00 - great let's refresh a few times just to
18:02 - make sure this is working and fantastic
18:05 - this is looking really good i'm really
18:07 - pleased
18:09 - okay so we've created the five uh
18:11 - platforms but you actually now want to
18:12 - put them in an array so that we can work
18:15 - with them in our project
18:17 - to do this i'm going to use an array
18:19 - called platforms
18:20 - so let's actually move to the top and
18:23 - make this an empty array
18:25 - now i'm going to use a javascript method
18:27 - called push
18:29 - now each time this loops i'm actually
18:31 - pushing the newly created platform we've
18:33 - made
18:34 - into this array okay so i'm literally
18:36 - going to push it into the platforms
18:39 - array
18:40 - okay this is how we do it and this is
18:42 - how push works so platforms push new
18:45 - platform i'm going to console log this
18:47 - just you can see exactly what's
18:48 - happening and how we're looping over and
18:50 - how each time we loop over it gets added
18:52 - so ah oops
18:54 - we've obviously misspelled something
18:56 - here uh that's right platforms
19:00 - cool thank you so much console log
19:03 - for helping us
19:05 - figure that out let's refresh
19:07 - and great you will see here that the for
19:09 - loop is working each time we loop we're
19:11 - adding our newly created platform into
19:13 - it and if we look into these into our
19:16 - array you will see exactly that you'll
19:18 - see our platform with the bottom with a
19:20 - left so essentially everything that's in
19:22 - our constructor this is pretty neat and
19:24 - we can now visually see all this
19:26 - information in our console as well
19:29 - awesome
19:31 - okay now that is done and we can see all
19:33 - our data and we know everything's
19:35 - working correctly let's carry on
19:38 - so we've already got the jeweler we've
19:40 - created our platforms i think the next
19:42 - thing we need to do
19:44 - is why do we focus on moving the
19:47 - platforms
19:48 - so let's go ahead and do that
19:52 - move platforms
19:54 - once again we actually need to write
19:55 - this function so let's do that now
19:58 - i'm going to do it here so function
20:02 - move
20:04 - platforms
20:06 - okay
20:08 - okay now as we discuss we only want to
20:11 - move the platforms if the doula is in a
20:13 - certain position
20:15 - so what this means is let's actually
20:17 - take the dual bottom space because
20:19 - that's how far the doodler is from the
20:21 - top from the bottom sorry of our grid
20:23 - now if the doula is anywhere above 200
20:27 - the doodle at bottom space is above 200
20:30 - then and only then we want our platforms
20:32 - to move
20:33 - so in the grid you will see here if our
20:35 - doodles anywhere in this space up here
20:38 - okay
20:39 - then we want our platforms to move
20:42 - okay so now we actually grab the
20:44 - platform so our array of platforms and
20:48 - then for each platform inside this array
20:51 - so this is how we use the for each
20:53 - javascript method we go into the
20:55 - platforms array we then do for each
20:58 - platform inside of that array we can
21:01 - essentially call it whatever we want but
21:02 - i'm gonna call it platform just for the
21:05 - sake of readability and for each
21:07 - platform in that array
21:10 - i wanna get the platform and to its
21:12 - bottom
21:13 - minus four
21:15 - okay so by writing minus equals four i'm
21:18 - essentially writing platform bottom
21:20 - equals platform bottom minus four so
21:23 - this is just a nicer way of writing that
21:24 - it's a lot it's a lot simpler
21:27 - now once again we need to get the
21:28 - platform visual so let visual equal
21:32 - platform visual
21:33 - and then visual style bottom equals
21:36 - platform bottom plus pixels
21:39 - okay so essentially what we are doing is
21:41 - making sure that each of the platforms
21:43 - moves by four each time
21:46 - okay let's check it out that has worked
21:49 - and great that has essentially worked
21:51 - but because the change is so small i
21:53 - mean four pixels you probably can't
21:54 - really see it
21:56 - now that we're moving each of the
21:57 - platforms down by four each time we
22:00 - actually need to put this move platforms
22:02 - on a set interval
22:04 - okay so i'm going to put on a set
22:06 - interval
22:07 - so this is another javascript method
22:09 - that will allow us to invoke the move
22:11 - platforms function
22:13 - so we pass through a function and then
22:15 - the time that we want to keep invoking
22:18 - this function at
22:19 - okay so now let's go ahead and refresh
22:22 - that
22:23 - that should be moving every 30 seconds
22:25 - 30 milliseconds sorry
22:27 - what is not happening here so we're
22:30 - getting our visual from each of the
22:33 - platforms we're then getting the style
22:35 - bottom
22:36 - and applying the new platform bottom to
22:39 - it
22:42 - ah okay yes it's because we are not
22:44 - above 200 pixels so if i move up here
22:48 - 250 tada all our platforms are falling
22:52 - down because they're on a set interval
22:54 - moving by four pixels every 30
22:56 - milliseconds okay if i move this back to
22:59 - 150 pixels we are alert below the 200
23:03 - mark so nothing's gonna happen amazing
23:05 - this is working
23:08 - okay now that we have the platforms
23:10 - moving we of course need to make them
23:12 - disappear once they hit the bottom and
23:14 - so on but let's leave that for now let's
23:16 - actually focus on getting our little
23:17 - doula to move
23:19 - so i'm going to write a function called
23:20 - function jump
23:22 - jump let's spell that correctly function
23:24 - jump
23:26 - okay so our jump function is actually
23:28 - going to have a lot of set intervals in
23:30 - here just like we have the moving
23:32 - platforms we're going to need it to make
23:34 - our doula appear like it's jumping
23:36 - now one thing that we didn't use with
23:38 - the other set interval is a
23:41 - timer id so a timer id is essentially
23:44 - how we can stop this clear interval okay
23:46 - so once we don't want it to keep moving
23:49 - we can actually clear it with this id
23:51 - so i'm going to call it uptime ids you
23:53 - can already see i've done
23:55 - and i'm actually going to define it
23:57 - outside of this function
23:59 - so i'm going to move it up here and make
24:01 - it global so that we can cancel it
24:04 - outside of the junk function too okay so
24:06 - this is how you do that you just make a
24:08 - global
24:10 - okay so uptime id equals set interval
24:12 - and then we pass through a function
24:14 - we don't have a function to pass through
24:16 - so we're going to write a function
24:17 - instead
24:18 - so function and we're going to invoke it
24:20 - every 30 milliseconds it's the same
24:22 - format just written a bit differently
24:24 - this move platforms function is
24:26 - essentially this function here okay so
24:30 - same thing just different format
24:34 - okay so what do we want to do every 30
24:36 - milliseconds in our jump function well
24:39 - i'm going to get my doodler bottom space
24:41 - okay
24:42 - and i'm going to plus equals 20 to it so
24:45 - once again this is essentially just
24:46 - adding 20 to my doula bottom space each
24:49 - time
24:50 - i'm also going to style it so doodle
24:53 - style bottom i'm going to apply this
24:55 - bottom space to it using a string as
24:58 - well of pixels so this is we can see it
25:00 - as well so we're not only moving our
25:02 - doula bottom space we also want to apply
25:04 - it to our element
25:06 - let's check it out and whoa there he
25:08 - goes
25:10 - amazing so he's going up
25:13 - we now have to probably make him go down
25:15 - right
25:16 - so let's go ahead and do that
25:22 - in here if doula bottom space
25:26 - is smaller than
25:29 - let's say 350 for now we want to invoke
25:32 - a function to fall
25:34 - okay so now let's get to writing that
25:37 - for function
25:40 - let's do it here
25:44 - function full
25:50 - okay so once we are falling we actually
25:53 - want to clear the interval that we
25:55 - discussed we want to get rid of the
25:56 - uptime id because we don't want it going
25:58 - up anymore so another javascript method
26:01 - called clear interval will do that and
26:03 - we just pass through the up timer id
26:06 - we then want to start another set
26:08 - interval so this is going to be just the
26:10 - same as a jump i'm going to use dime
26:12 - down down timer id and once again set
26:15 - interval and pass through a function
26:18 - and in that function i want the doula
26:20 - bottom space to this time go down by
26:22 - five okay and let's go ahead and apply
26:25 - it by the styling so doodle start bottom
26:27 - doula space plus
26:29 - picks doula bottom space sorry plus
26:32 - picks
26:33 - okay so what else do we do i mean it's
26:35 - going to be exactly the same right so
26:37 - what we're doing in here
26:38 - we've got that
26:40 - great
26:41 - so i'm actually going to make sure to
26:44 - clear the downtime id when we jump so
26:46 - each time we go to jump we want to clear
26:48 - the down timer id
26:50 - okay
26:51 - and then when we go to four we want to
26:53 - clear the up time radius so each of them
26:55 - canceling each other out
26:56 - let's make sure to invert the full
26:58 - function every 30 milliseconds and let's
27:01 - test it out
27:03 - and whoa yeah we can see the little
27:05 - element is jumping and going down once
27:08 - he hits that 350 pixel mark okay so this
27:12 - is looking good
27:14 - now let's go to stopping him
27:16 - so if doula bottom space is smaller than
27:19 - or equal
27:20 - to zero well we know that's a game over
27:23 - so
27:24 - let's actually just go ahead and do it
27:27 - now so game over function which we
27:29 - haven't written yet because of course
27:31 - we're going to write it now so a
27:33 - function game over
27:35 - now if you think about it in the game
27:36 - over we essentially just want to know
27:39 - it's a game over right so let's console
27:41 - our game ever so we know that it's a
27:42 - game over
27:44 - so
27:45 - cool that should be enough to do that
27:48 - this is obviously just for us developers
27:50 - this isn't going to show up anywhere
27:51 - it's just a console log
27:53 - now we also want to set the is game over
27:56 - to true because you know the game is the
27:58 - game is over
28:00 - um so that is looking good and we also
28:03 - want to clear the interval of the uptown
28:06 - up timer id and the down timer id even
28:09 - though the technically the up timer id
28:11 - should be cleared already because we're
28:12 - going down i'm just going to do it here
28:14 - you know it's default just as a safe
28:16 - sort of practice
28:19 - okay
28:20 - cool
28:21 - and there he goes
28:23 - and our console logs printing game over
28:25 - and we're no longer moving down because
28:27 - the down timer id is cleared fantastic
28:32 - let's just try again
28:35 - this is looking great but as you can see
28:37 - we need to do a lot more right we're not
28:39 - even done we don't want our doodle
28:42 - jumper to just be
28:48 - okay so this is all looking great i'm
28:50 - really pleased with how this is all
28:52 - looking we've got our game over we've
28:54 - got our platforms moving one thing we
28:56 - did mention is that we actually need our
28:58 - doula to start off on our platform right
29:00 - so we don't want them just appearing
29:02 - anywhere but not just any platform our
29:05 - first platform so we can easily do that
29:08 - let's move over to our create
29:11 - doodler
29:13 - function
29:14 - now in here doula style left
29:17 - now we don't actually
29:19 - want him just going anywhere so i'm
29:22 - going to get the doodle less space and
29:25 - assign it our first platform so we're
29:28 - going into our platforms array we're
29:30 - getting the first item so we do this by
29:33 - passing through a zero into our array
29:36 - and we're getting the left of that
29:38 - platform so let's have a look at it here
29:42 - so if you look here i'm going into our
29:44 - platforms and then going into the first
29:47 - platform
29:49 - and then grabbing the left
29:52 - so now it's going to be the same
29:54 - let's check it out
29:57 - so let's go ahead and see what this
29:59 - looks like ah and an error message why
30:02 - is there an error message all we're
30:04 - doing is going into the platforms
30:07 - heart it's because we actually make the
30:09 - platform
30:12 - after we try to get the platform so we
30:15 - can easily solve that let's just solve
30:17 - this by moving these two functions
30:19 - around so we're going to create the
30:20 - platforms first and then create our
30:22 - doodle jumper okay because we want to
30:23 - create the four or five platforms first
30:26 - so we can then take the first platform
30:29 - once again thank you error log
30:31 - okay now let's carry on
30:35 - okay so now
30:38 - what else do we need to tackle well i
30:40 - think we need to actually get our dual
30:42 - jumper moving when we control our
30:45 - keyboard so i'm going to do this with a
30:46 - function called control
30:48 - in this control function i'm actually
30:50 - gonna essentially link up the keys on
30:52 - our keyboard in order to use them and
30:54 - whenever we press the keys that we want
30:56 - a function will get invoked so i do this
30:59 - like this
31:00 - if e for event key
31:03 - equals arrow left as a string so ease
31:07 - for event we actually need to pass this
31:08 - into our function
31:10 - if the key that we press is the arrow
31:13 - left on our keyboard
31:15 - then we want to move left right so we
31:18 - don't have a move left function yet so
31:19 - i'm just going to put some pseudo code
31:21 - in here
31:22 - else
31:23 - if e key equals arrow right so the
31:26 - string arrow right this time then while
31:29 - you guessed it i want to move right
31:31 - so once again i'm just going to put a
31:32 - placeholder hole that placeholder here
31:36 - else if e key equals arrow
31:40 - up
31:41 - well i essentially just want to
31:43 - straighten out because i don't want to
31:45 - move left or right anymore so i'm going
31:48 - to just
31:49 - put move straight
31:51 - sure
31:51 - move straight function
31:54 - do we want to write this here no let's
31:56 - let's comment it out for now and put it
31:58 - as a placeholder
32:00 - okay this is looking good
32:03 - um what should we tackle first
32:07 - so
32:08 - again
32:09 - we want to be able to move our doodle
32:11 - jumper
32:14 - before we do anything let's actually set
32:16 - ourselves some variables so i'm going to
32:19 - put let is jumping equals true
32:21 - because if we if you remember we only
32:25 - want to be able to jump again if his
32:28 - jumping is false okay because we don't
32:31 - want him to be like mid-jumping we don't
32:33 - want to jump and jump again if he's
32:35 - already mid-jump
32:36 - and then in the jump once we are jumping
32:39 - we want his jumping to be true
32:44 - okay that makes sense right when we're
32:45 - jumping is jumping is true and when
32:47 - we're falling well you guessed it as
32:49 - jumping is false
32:51 - so now we have this being stored so we
32:54 - always know if he is jumping or he's not
32:56 - jumping and we can use this in our
32:57 - project
32:59 - great
33:01 - okay i think we should probably tackle
33:03 - i think let's tackle if the doodle
33:05 - jumper is actually on a platform so
33:07 - we're essentially checking up for
33:08 - collision
33:09 - so we're going to do this in the fall
33:11 - because we don't care if he's jumping if
33:12 - he's jumping he'd go through the
33:14 - platforms we only care if he's falling
33:16 - and if he falls onto a platform we want
33:19 - him to essentially jump again
33:21 - so let's do this by grabbing our
33:23 - platforms array
33:24 - and for each platform so for each item
33:26 - in our platforms array
33:28 - if
33:29 - the doula bottom space so from the
33:32 - bottom
33:33 - is bigger than or equal to the platform
33:35 - bottom
33:37 - and the doula bottom space is smaller
33:39 - than or equal to the platform bottom so
33:41 - essentially we're going we're making
33:43 - we're checking if the doula bottom space
33:46 - is in between that 15 pixels
33:48 - in between so we're checking if it's in
33:51 - the platform right
33:53 - so you can see here height 15 and that's
33:56 - why we are adding that 15 because we are
33:57 - checking if he's at the bottom of the
33:59 - platform but plus 15.
34:01 - now we also need to check for if the do
34:04 - the left space so we need the first
34:07 - statement to be true and the second
34:09 - second statement to be true and now this
34:11 - statement to be true
34:13 - so do the less base plus 60 so we're
34:16 - going from the left and plus 60 because
34:18 - that's the width of our doula
34:20 - and then we are checking if that is
34:22 - smaller than or equal to platform left
34:26 - okay
34:28 - so once again we are getting the doula
34:30 - less space we're adding the width of the
34:32 - doula to it and whatever that number is
34:35 - is smaller than the platform left means
34:37 - he's not on the platform okay he's to
34:39 - the left of the platform somewhere so we
34:41 - need that to be true and we also need to
34:43 - get the do the left space
34:45 - now this time we actually need to check
34:47 - that this is smaller than or equal to
34:48 - the platform left space but this time
34:51 - plus the platform's width okay so we're
34:54 - essentially making sure that the delay
34:56 - is not anywhere on the right side of the
34:58 - of the platform
35:00 - so all of these four things need to be
35:02 - true in order for a collision to happen
35:04 - so we need to make sure that the doula
35:06 - is not in here or not in there and he's
35:09 - also
35:10 - in that little platform space
35:14 - cool
35:16 - now we just need to check for one final
35:18 - thing and that is that he is not jumping
35:22 - okay
35:23 - so just this is sort of like
35:25 - i guess safety blanket because we are
35:27 - falling so he should technically not be
35:28 - jumping but you know just to like fool
35:30 - proof this whole thing
35:32 - great
35:33 - let's actually also get a console log
35:34 - going just to check that we have met all
35:37 - of those criteria
35:39 - and we should get a console saying
35:40 - landed
35:42 - and then once he has landed we want him
35:44 - to jump again so let's put that function
35:46 - here and invoke it so if all those
35:49 - things are true in that if statement we
35:51 - want to print landed and jump again
35:54 - so
35:55 - bang there we go landed bang and we are
35:57 - jumping
35:58 - awesome
35:59 - okay this is looking good there is a
36:01 - floor however i don't know if you can
36:03 - see it but our jump only goes to a
36:05 - certain height
36:06 - this is because we hard coded the max
36:09 - height that we can jump to okay so at
36:11 - any point we'll never ever jump higher
36:13 - than this okay not even c not even if we
36:15 - get like a platform that's close to that
36:17 - it just won't happen
36:18 - this is because we need to reset our
36:21 - starting point of where we are jumping
36:23 - because at the moment we're simply
36:24 - jumping a certain amount so let's do it
36:26 - now
36:30 - so do the bottom space is 150 i'm
36:33 - actually going to make another variable
36:34 - called let's start point equal and to
36:36 - start off with it's actually going to be
36:38 - 150
36:40 - so i can actually get the do the bottom
36:42 - space
36:43 - and assign it the start point for when
36:45 - we start jumping so that's what we're
36:47 - writing here essentially
36:49 - okay so now let's use this to reset
36:52 - essentially our jumping point each time
36:56 - so once again i'm going to do this here
36:59 - so i'm going to get the start point
37:01 - and whatever the doula bottom space is
37:04 - at this time
37:05 - i'm going to make it the start point
37:07 - okay so i'm overwriting 150. so if we're
37:10 - on a platform then we can overwrite the
37:13 - start point and store it as start point
37:15 - so we can use it globally so our start
37:17 - point is only now
37:18 - changing
37:20 - okay so there's gonna be our new start
37:22 - point for jumping i'll do the bottom
37:23 - space it's always gonna be moving
37:25 - continuously moving because we're gonna
37:26 - track wherever the jeweler is but our
37:28 - start point is gonna change
37:31 - okay so now if doula bottom space
37:34 - is smaller than
37:37 - and we need to change this 350 we're
37:39 - going to get our start point so remember
37:41 - at the start it's 150 plus 200 so
37:43 - essentially we're not changing anything
37:45 - too much here but as soon as we land on
37:48 - a platform that number's gonna change
37:50 - so let's see if that has worked
37:54 - woo
37:55 - okay and there we go we have now fixed
37:58 - our problem
38:00 - okay only a few more things to do and
38:02 - that is actually write our move left
38:05 - function move right function and move
38:07 - straight function
38:08 - let's start off with our move left
38:10 - function
38:11 - so here we go function move left
38:15 - now what happens when we move left well
38:17 - essentially
38:18 - it's very similar to the jumping
38:21 - but we're going to be changing the
38:23 - doula space left instead so i'm actually
38:26 - going to write a new variable
38:28 - let is going left let's actually also
38:31 - set this at the bottom so it is going
38:33 - left is false because that's what we are
38:36 - starting with
38:38 - i'm actually going to go ahead and write
38:40 - let is going right false as well because
38:41 - i know i'm going to use that later on
38:43 - so it is going left when we are moving
38:47 - left i want to change this to true
38:49 - okay and we're going to store that
38:50 - globally
38:52 - now i'm also going to start a left timer
38:54 - id so once again it's a set interval
38:57 - left time id equals set interval and
39:00 - pass it through a function
39:08 - once again i'm going to store this left
39:10 - timer id globally and this right time id
39:12 - globally so we can access it and other
39:14 - functions
39:16 - so that is now done
39:18 - cool now what do we want to happen let's
39:20 - move on equals
39:22 - what do we want to happen in here well
39:25 - a few things we need to get the doodler
39:28 - to move so let's go i'll do the left
39:30 - space and this time minus five from it
39:34 - or yeah minus five from it and then we
39:37 - need to actually show this in our
39:39 - browser so i'm gonna use doula style
39:41 - left and then do the left space one of
39:44 - the new dead doula spaces plus pixels
39:48 - okay
39:49 - and then i i want to invoke this uh set
39:51 - interval every 30 milliseconds
39:54 - so that is looking good
39:57 - now
39:58 - okay
39:59 - now we just need to hook up our control
40:01 - function
40:03 - so the move left is in the control
40:04 - function
40:06 - i'm going to do this in the start
40:07 - function and use document and add event
40:09 - listener
40:10 - and pass through control but also the
40:13 - event of key up so now each time we
40:17 - essentially press our key
40:20 - we can invoke this control function
40:22 - which will invoke our move left function
40:24 - and if we move our or click sorry our
40:28 - arrow left button on our keyboard we
40:30 - will move left
40:31 - and great this is working perfectly
40:35 - now one thing that isn't going well is
40:37 - that our doula is actually going off the
40:39 - left off our grid we need to stop this
40:41 - so if do the left space is bigger than
40:45 - or equal
40:46 - to zero and only if this is true then we
40:50 - can make our doula move otherwise we
40:53 - move right let's get to writing our
40:55 - function for move right
40:57 - again it's going to be very similar to
40:58 - move left is going right equals true
41:03 - okay
41:04 - now let write timer id
41:07 - equal set interval and then a function
41:10 - which makes sure that if the doula left
41:13 - space this time is smaller than or equal
41:17 - to the width of the grid so smaller than
41:20 - or equal to what is it again
41:23 - 400 okay
41:25 - and then we need to actually minus the
41:27 - doula width so 400 minus the doula width
41:30 - so 340 okay so if that statement is true
41:33 - and only if that statement is true we
41:35 - get the doula left space
41:38 - and this time let's add five to it
41:40 - and once again let's apply this to the
41:43 - styling so doodler left sorry doula
41:46 - style left and the do the left space
41:49 - cool don't forget to add the string of
41:51 - pixels
41:52 - so
41:53 - now we just need to make sure
41:56 - to account for if it is so if it is then
41:59 - we move left
42:01 - and let's invoke this every 30
42:02 - milliseconds
42:04 - great this is looking
42:06 - good
42:08 - okay shall we
42:10 - test it out
42:13 - let's actually put this back here so
42:14 - move right and invert the function
42:17 - okay so now if you press the right arrow
42:19 - so let's go ahead and do that whoa
42:22 - what the hell is happening why is it
42:23 - going so fast
42:25 - okay what have we done
42:28 - that's strange it's also sort of like
42:31 - flinching because it can't decide
42:33 - whether to go left or right that's
42:34 - because we haven't cleared the interval
42:36 - so let's do that first function move
42:38 - left if is going right we clear the
42:41 - interval right timer id and we set is
42:44 - going right to false okay so when we're
42:45 - moving left we need to clear the right
42:47 - time id and make sure that we are not
42:49 - going right anymore
42:50 - let's do the same for move left so if is
42:53 - going left well we need to clear
42:57 - interval
42:59 - left timer id
43:01 - and make sure that is going left is
43:03 - false
43:05 - okay
43:06 - great that should definitely stop the
43:08 - twitching
43:10 - um
43:13 - let's refresh that
43:14 - boom
43:16 - i mean it's still going really fast i
43:18 - don't know why that is but at least it's
43:19 - not twitching anymore
43:21 - boom
43:23 - why is that
43:24 - doing that
43:27 - ah it's because we're putting 50 we need
43:29 - five great typo
43:32 - okay
43:33 - and that's much better
43:34 - cool
43:35 - we now have a little doula whacking off
43:38 - each side
43:39 - we now need to actually allow it to
43:40 - straighten up if we want to write so we
43:42 - don't always want it to going from left
43:44 - to right from left to right we need like
43:46 - an out
43:47 - so for this let's focus on the move
43:49 - straight
43:51 - so function moves straight and i'm
43:53 - simply just going to clear everything so
43:55 - i'm going to put is going right it's
43:57 - false it's going left is false
44:01 - um what else we need to do clear the id
44:03 - so clear interval
44:08 - right timer id and clear interval
44:12 - left
44:13 - timer id
44:15 - okay
44:16 - it's looking good
44:27 - cool let's test this out again
44:29 - and we've done it
44:31 - this is looking better and better each
44:33 - time
44:36 - it's still glitching when we get a game
44:38 - over i mean we just need to do some more
44:40 - interval clearing but this is looking
44:42 - good
44:44 - okay now i think let's focus on actually
44:47 - removing the platforms and adding new
44:49 - ones so that's gonna be fun that's gonna
44:51 - be some fun array work
44:53 - let's do this in the function move
44:55 - platform
44:56 - if the platform bottom this time is
44:59 - smaller than let's say 10 so you're
45:01 - really at the bottom of the grid not
45:02 - exactly the bottom but you're in the
45:03 - last like
45:05 - slice that 10 pixel slice
45:07 - if the platform if any of the platforms
45:10 - in fact are there
45:11 - we need to get rid of the first platform
45:14 - in the array okay so let first platform
45:17 - let's define it let's grab our platforms
45:20 - array go into it so we're going into our
45:23 - opening of our array we're in first item
45:25 - and we're getting its visual
45:27 - okay
45:28 - so now let fast platform is defined
45:31 - classlist i'm going to remove
45:34 - the class of platform from it so i'm
45:36 - removing the cluster platform on the
45:38 - first item this is so we can visually
45:41 - not see it anymore
45:42 - okay
45:43 - now we actually need to also remove the
45:45 - array
45:46 - i'm going to do this by grabbing the
45:48 - platforms array and using shift
45:50 - so shift will do that it will get rid of
45:53 - the first item it's another javascript
45:55 - method that will get rid of the first
45:56 - item of an array
45:58 - so now if we console our platforms let's
46:01 - see if that has worked
46:03 - and great you will see here that the
46:05 - platform array is getting shorter and
46:07 - shorter each time let's just test out
46:09 - again i'm just really happy with how
46:11 - this is looking and obviously it's quite
46:13 - cool to see our array going down by one
46:15 - each time
46:17 - okay
46:18 - so we're getting rid of the first one
46:19 - let's go ahead and actually add a new
46:22 - platform as well
46:24 - so i'm gonna use
46:26 - let's
46:28 - new platform
46:30 - and what we need to do is actually use
46:32 - the class again so let new platform
46:34 - new
46:36 - platform but the class of new platform
46:37 - this time
46:39 - so this is the class of new platform
46:41 - now we need to pass something through
46:43 - into our cluster platform member and
46:45 - that's our bottom space well because we
46:47 - know that our grid is 600 pixels high
46:50 - let's pass through just a hard-coded 600
46:53 - so that will mean that our new platform
46:54 - will appear at the top of our grid
46:57 - okay this is looking good and now we
46:59 - actually need to add that to the end of
47:01 - our array so i'm going to do that again
47:03 - with another javascript method i'm going
47:05 - to grab our platforms array use push and
47:08 - then pass through this new platform
47:11 - okay
47:12 - let's test it out
47:15 - and great this is looking good you will
47:17 - see our new platforms being created each
47:20 - time a platform disappears
47:22 - i mean i'm really proud of this i think
47:24 - this is fantastic
47:26 - um let's carry on
47:29 - okay so the one thing i did want to do
47:30 - is get rid of that glitchiness right so
47:33 - this this is definitely to do with the
47:34 - intervals
47:35 - let's head over to our game over
47:37 - function and clear the intervals of left
47:39 - timer d and right timer id to stop that
47:41 - glitching
47:42 - so clear interval
47:45 - yeah pass that through
47:47 - and clear interval again
47:50 - that will 100
47:52 - 100
47:53 - stop any glitching happening
47:56 - okay
47:57 - so let's test that out
48:01 - i mean it's just so fun to play
48:04 - um but yeah come on let's let's actually
48:06 - do some testing it's actually quite hard
48:07 - to get at the bottom maybe i should
48:09 - increase the hardness settings of this
48:12 - okay let's do it now
48:14 - okay put that to a 20
48:16 - and put that to a 20.
48:18 - i think that should make it harder
48:22 - okay i think it just makes just means
48:24 - everything's gonna move faster right so
48:26 - ah it's still glitching why is this
48:28 - happening
48:30 - hmm
48:40 - okay this is really weird but you know
48:42 - what let's just get rid of it right
48:43 - because it's game over we don't want it
48:44 - there anyway so i'm going to show you
48:46 - something cool and a cool way to get rid
48:48 - of all the children of a parent so i'm
48:50 - essentially going to get rid of anything
48:51 - in the grid
48:52 - i'm going to use wild to do this so
48:54 - while
48:56 - grid
48:57 - first child this essentially means if
48:59 - this is true so if a group if the first
49:03 - child of the grid exists then we
49:05 - continue to remove
49:08 - the grid's first child
49:10 - okay so this is essentially a loop while
49:12 - this is true remove the first child if
49:15 - there's another first child remove the
49:16 - first child until we have zero children
49:18 - in there okay so that's cool i'm also
49:21 - gonna actually display the score here so
49:24 - i'm gonna use grid and then in html
49:27 - and then score
49:28 - so let's actually set that globally to
49:31 - let score equal zero
49:34 - now all we need to do is define where we
49:36 - actually add a score well i think it
49:37 - would probably make sense to add a score
49:39 - you know like as soon as we get rid of a
49:41 - platform
49:42 - so score plus plus
49:44 - and there we go
49:46 - now that means that we are storing a
49:49 - score so once we actually let's die and
49:52 - let's see what happens you should see
49:54 - all the elements disappear and then
49:56 - yep and great
49:58 - you will now see it that was worked it's
50:00 - tiny but it has worked that's just
50:03 - styling so
50:04 - cool let's go ahead and i'm gonna do it
50:06 - now with you quickly
50:09 - so inside our grid i'm actually going to
50:11 - add font size
50:14 - and let's make it huge right let's make
50:15 - it like 200 pixels
50:18 - cool
50:19 - text align as well to make it in the
50:21 - center
50:23 - and
50:24 - center great
50:27 - so now when we die
50:30 - let's
50:31 - make our little guy die
50:34 - of course like this is still really
50:35 - basic i really do want you to like go
50:38 - wild with the styling i'm gonna style it
50:40 - myself and put on my github so feel free
50:42 - to take it if you want but obviously
50:45 - it's like it's much better to do it
50:47 - yourself and
50:48 - really give it that ah and there we go
50:51 - 22.
50:53 - amazing my score was 22 i passed 22
50:56 - platforms and we can now see an average
51:00 - one huh
51:01 - okay that's it thank you so much for
51:03 - watching i hope this was really useful i
51:05 - really enjoyed making this with you and
51:07 - as i said please do share your finished
51:09 - games with me i'd love to see how you
51:10 - styled it this is something i made
51:12 - earlier this is something i made you're
51:15 - more than welcome to it but again please
51:17 - do try it try make your own thanks so
51:20 - much again for watching if you enjoyed
51:22 - this video please do like and subscribe
51:24 - to my channel i'd love to uh have you
51:27 - there and please do comment on any other
51:30 - sort of projects you'd like me to make
51:32 - or you'd like to see from me or if
51:33 - there's some like concepts that you
51:35 - don't understand i'm more than happy to
51:38 - explain them to you
51:40 - thanks so much again and i'll see you
51:42 - soon
51:45 - for those of you who have never played
51:46 - flappy bird before it's a simple game in
51:49 - which you as the player so the little
51:51 - bird have to navigate
51:54 - obstacles which are little pipes
51:56 - actually coming down this way and this
51:57 - way so there's like two pipes you have
51:59 - to get navigate through them but you
52:01 - also have gravity trying to pull you
52:02 - down so you can't hit the pipes and you
52:05 - can't hit the floor otherwise it's a
52:07 - game over so now that that's done let's
52:10 - do it flappy bird
52:12 - okay so make sure we have linked up our
52:15 - javascript file with our script tag and
52:17 - the style sheet with the link tag
52:20 - now we create a game container div so
52:23 - give a div the class container
52:26 - now our game container is going to
52:27 - contain a div with the class of sky and
52:30 - a div with a glass of ground
52:33 - in the sky div i'm gonna hard code our
52:37 - bird so add a div with a class of bird
52:40 - in it
52:41 - great
52:42 - now go ahead and save this file and flip
52:45 - to your style sheet
52:48 - now styling we're going to do this by
52:50 - picking out the class of our game
52:52 - container so let's do that first we tell
52:54 - our file to class by this dot before the
52:57 - name
52:58 - now how big do we want our game
52:59 - container to be well let's give it a
53:01 - high of let's say 730 pixels and a width
53:04 - of 500 pixels
53:07 - i am also going to give it a position of
53:09 - absolute this means the element is
53:12 - positioned relative to its positioned
53:14 - ancestor element in layman terms this
53:17 - means whatever parent div this div is in
53:20 - we will position it based on the parents
53:23 - dimensions and position
53:25 - now let's grab these sky
53:28 - we will give it a background color of
53:29 - light blue for now just so we can play
53:32 - around with it
53:33 - we can replace this with an image later
53:36 - let's also give it a width of 500 pixels
53:38 - so it fits in our game container exactly
53:41 - let's also give it a height of 580
53:44 - pixels and a position of absolute
53:47 - relative to the game container it is in
53:50 - now let's pick out the ground
53:52 - once again let's pick a color so brown
53:55 - this time
53:56 - give it a width so it fits exactly in
53:58 - our game container a height that is 730
54:02 - pixels minus 580 pixels so the height of
54:06 - our sky so it fits in the remaining
54:08 - space of our game container let's also
54:11 - not forget to give it a position of
54:13 - absolute
54:14 - once again this is relative to the game
54:16 - container because that is the parent
54:18 - element
54:20 - okay let's flip over to our browser see
54:22 - what this looks like
54:24 - ah it appears that light blue is not a
54:27 - color so let's go back and make this
54:30 - blue
54:32 - you will see here that we have all the
54:34 - elements here
54:35 - so you will also see here that they will
54:37 - collect on the top left corner we need
54:40 - to fix this so the ground appears below
54:42 - the sky
54:43 - we can do this in our css file using a
54:45 - property called top
54:47 - by writing top we are saying that we
54:50 - want to give spacing between the top of
54:52 - the element and the top of the parent
54:54 - element the ground is in as we want the
54:56 - ground below the sky we simply put the
54:58 - height of the sky so 580 pixels like
55:01 - this let's see what this looks like now
55:04 - that should be below and it does great
55:08 - let's also just zoom out a bit so we can
55:10 - see what we are doing
55:12 - okay now i'm also going to go ahead and
55:13 - style our bird so let's grab the bird
55:16 - class
55:17 - give it a background color of yellow so
55:19 - we can see it against the blue
55:21 - background
55:22 - now once again a position of absolute
55:25 - a height of 45 pixels and a width of
55:29 - let's say 60 pixels
55:32 - we are now ready to start applying logic
55:34 - to our elements
55:36 - so let's go ahead and flip to our
55:38 - javascript file in order to pick out
55:40 - elements to work with
55:42 - now as we put our script tag here we
55:45 - need to wait for all our html to load
55:48 - before reading any javascript
55:50 - we do this by using a dom event listener
55:53 - so we grab the document
55:55 - and add a javascript method of add event
55:58 - listener to it
55:59 - now we pass through the dom content
56:01 - loaded event and need a function
56:04 - so this is how event listeners work we
56:06 - pass through an event and then a
56:08 - function
56:09 - from now on all our javascript will be
56:11 - between these two parentheses and curly
56:13 - braces
56:15 - now we need to pick out our first
56:17 - element let's get to picking our bad
56:20 - let's pick the badge
56:21 - we do this by grabbing the document
56:23 - using a javascript method of query
56:25 - selector and then passing through a
56:28 - string of bad not for getting the dot as
56:30 - it's a class name we are looking for
56:33 - let's also save this as the conspired so
56:36 - we can use it again and again in our
56:37 - javascript
56:39 - let's also do the same for the game
56:41 - container so get our document use our
56:45 - query selector then pass through the
56:47 - class name of game container let's save
56:50 - this as the constant i don't know game
56:52 - display
57:01 - and once again for the ground so
57:04 - const ground equals document query
57:06 - selector and pass through the class name
57:08 - of ground
57:10 - now the first thing we're going to do is
57:11 - move our bird to the bottom-ish center
57:14 - of our sky of our sky div as that is
57:17 - what it sits in right in the sky div
57:20 - so right there in the middle bottom
57:24 - we're going to do this by adding space
57:26 - between the sky's left side and the
57:28 - bird's left side let's say by 220 pixels
57:33 - so let's set a constant that will vary
57:35 - so let bad left equal 220
57:39 - and let's do the same for the bottom of
57:40 - the sky div
57:42 - and the bottom of the bad element so
57:45 - let's say 100 pixels we want between
57:47 - those two
57:50 - now that we have this declared let's
57:52 - write a function to apply these pixel
57:54 - changes to the styling rubber element
57:57 - let's write a function called start game
58:00 - now by grabbing the bird element and
58:02 - using a method of style and bottom i'm
58:04 - going to add this new bird bottom value
58:06 - to it and using plus px and strings i'm
58:10 - saying add 100 pixels to the bottom of
58:13 - our bird element relative to the sky div
58:16 - it is in
58:17 - let's go ahead and invoke the start game
58:19 - function
58:20 - and have a look what this looks like and
58:22 - great you will see our bird bottom we
58:25 - have added 100 pixels to that that looks
58:28 - cool let's go ahead and do the left side
58:31 - so we want to add spacing between the
58:33 - left side of the wall remember left side
58:35 - of the sky grid and the left side of our
58:38 - bird
58:39 - so once again let's grab the bird
58:42 - element
58:43 - get the style
58:45 - and
58:46 - left
58:47 - and assign bud left so about left is 220
58:51 - and add the string of pixels
58:55 - start and left is actually javascript
58:57 - methods i'm not making that up
58:59 - and let's refresh
59:01 - and great our bird is now in the
59:03 - position that we want
59:05 - let's carry on
59:07 - now as we know we want the bird to move
59:09 - down with gravity because the bird
59:11 - starts dropping as soon as this game is
59:13 - started so let's get gravity and set it
59:16 - as two as a variable so let gravity
59:18 - equal two
59:20 - now let's grab our bottom and each time
59:24 - we invoke this function we wanna minus
59:27 - gravity from the bird bottom so we're
59:29 - changing the bird bottom variable
59:30 - essentially to minus two each time this
59:33 - function is being invoked
59:36 - now as you see it's only moving once we
59:38 - won't actually put this on an interval
59:39 - because we wanted to execute over and
59:40 - over again appearing the bus be dropping
59:43 - so i'm going to use set interval this is
59:45 - a javascript method called set interval
59:47 - to do this
59:48 - the set interval works by passing
59:50 - through a function and a time so let's
59:53 - put 20 milliseconds so i want this to
59:55 - invoke every 20 milliseconds i want the
59:58 - start gain function to invoke every 20
59:59 - milliseconds if i assign this to a
60:02 - variable so let time id i can actually
60:04 - stop this set interval from running i
60:07 - will do this by passing it through
60:08 - another javascript method called clear
60:10 - interval so as you can see here i am
60:12 - passing time id through clear interval
60:14 - this will essentially stop
60:17 - this particular set interval from
60:19 - running
60:20 - let's get rid of this now as we don't
60:21 - need it and see if this has worked
60:25 - okay great
60:26 - that looks perfect
60:28 - let's carry on okay now let's get about
60:31 - to jump so as we know we need about to
60:33 - jump if we press a button we want it to
60:35 - actually go up and sort of fight against
60:37 - the gravity i'm going to do this in a
60:39 - function called jump so function jump
60:42 - let's grab that by getting the bird
60:44 - element star bottom bad bottom plus
60:46 - pixels
60:48 - now i'm going to grab the bad one again
60:51 - and actually add 50 to it before passing
60:54 - it through to style our badge
60:57 - this means that each time we invoke the
60:59 - jump function i am adding 50 pixels to
61:02 - whatever bad bottom is before
61:05 - styling our bird with this new black
61:07 - bottom
61:09 - okay now using an event listener i'm
61:11 - going to grab document and using the
61:13 - javascript method of add event listener
61:15 - so remember about event listeners we
61:17 - need to pass through two things the
61:19 - event
61:20 - in this case is going to be key up
61:22 - actually key no key up so each time your
61:24 - finger leaves a key on the keyboard i
61:26 - want to invoke the jump function
61:29 - let's see if that has worked
61:31 - and great
61:33 - that looks good
61:34 - i am happy to carry on
61:38 - let's just console log the bird position
61:40 - at all times to the bird bottom just so
61:42 - we can see in our console look what's
61:43 - happening let's inspect the page open it
61:46 - up
61:50 - and great you will now see our bad
61:52 - bottom at all times whenever we jump
61:59 - as you can see here we're sort of
62:00 - reaching 500 we don't really want about
62:02 - to go off the grid off the top so we can
62:04 - actually stop this so yeah that looks
62:07 - around 500 i guess
62:11 - essentially i guess it would be 100
62:13 - we're in a 580 box so 480
62:16 - i think that's around 480 we should make
62:18 - the bad stop so if bad bottom
62:22 - is smaller than so this means smaller
62:24 - than and i guess yeah 580 pixels minus
62:28 - the 100 we started so 480 pixels and
62:31 - only if this is true we want to jump
62:34 - okay so as long as bad bottom is under
62:37 - 480 we can keep jumping and okay well oh
62:41 - that's weird maybe we should increase
62:43 - that a bit because you can actually go a
62:44 - little bit further can't it let's make
62:46 - it
62:47 - so as long as bird bottom is smaller
62:49 - than 500 we can add 50 to the bed bottom
62:53 - to make it appear to be jumping and
62:55 - great this looks great
62:59 - perfect i am really happy with how this
63:01 - is working out
63:02 - let's perhaps continue by making sure
63:05 - that not just any key on our keyboard is
63:08 - a jump but specifically the space bar
63:10 - will invoke a jump so i'm going to write
63:11 - a function called control and password e
63:14 - for event
63:15 - so this e is actually short for event
63:18 - now using e if e key code so key code as
63:22 - a javascript method
63:24 - deeply equals the number 32 so number 32
63:28 - is actually the key code for your space
63:30 - bar
63:30 - so if
63:32 - we press
63:33 - the keyword 32 so the space bar then we
63:35 - jump
63:36 - so now let's go ahead and replace the
63:39 - event listener
63:40 - to execute the control function which
63:42 - then controls the junk function
63:45 - now have a go yourself
63:47 - we are jumping we are jumping but we are
63:49 - only jumping if you press the space bar
63:51 - not any other key on our keyboard that's
63:54 - pretty cool you can link it up to
63:55 - whatever key you like i've just chosen
63:57 - the space bar please do google kiko's on
64:00 - the internet there's loads of resources
64:02 - to choose from keycode.info is a good
64:04 - one i'll share it with you below
64:07 - okay now that we've done that let's get
64:09 - to generating obstacles so i'm going to
64:11 - do this in a function called generate
64:13 - obstacle
64:15 - i'm actually going to use a javascript
64:17 - method called create element to do this
64:20 - so by grabbing the document
64:22 - i'm going to use a javascript method
64:24 - called create element and pass through
64:26 - into it the string of div
64:29 - okay so from now on this is how you
64:30 - create divs
64:32 - i'm going to save this as const obstacle
64:34 - so we can use it later in our javascript
64:38 - i'm now going to grab the obscure and
64:39 - using classlist add another javascript
64:42 - method i'm going to add the class of
64:44 - obstacle to this div we haven't actually
64:47 - written this styling yet so let's flip
64:49 - over to our style sheet and give our
64:51 - obstacles some styling
64:53 - so dot obstacle for class
64:55 - background color let's go green for now
64:57 - we can change this later
65:00 - width i'm going to say 60 pixels height
65:02 - 300 pixels let's say
65:04 - position absolute as always so it's
65:06 - absolute we haven't actually put this
65:08 - div in anyway yet but we will be
65:10 - so i'm going to do this now let's flip
65:13 - back to our app.js file now grabbing the
65:16 - game display to the game container i'm
65:18 - saying i want to grab this div right
65:20 - here so the div class game container
65:23 - now using a method so let's grab that
65:25 - game display now so that's the game
65:27 - container
65:28 - i want to put in my obstacle into this
65:31 - i'm going to do this with the pen child
65:33 - this is a javascript method a pen child
65:35 - and pass through the created obstacle we
65:37 - just made
65:39 - by doing this i am literally putting in
65:41 - a div into the game container it's
65:44 - pretty cool right i'm putting it in with
65:47 - sky and ground
65:52 - let's invoke this function to see if
65:54 - this has worked
65:56 - so press save refresh
65:58 - and great we have now put an obstacle
66:01 - into our grid amazing
66:05 - now let's actually position it to where
66:07 - we want so we've done this before we
66:09 - grab the element
66:11 - we then use style and left to give it
66:15 - a
66:16 - i guess padding from the left side of
66:18 - the sky container to the left side of
66:20 - our obstacle i'm going to set a variable
66:22 - obstacle left
66:24 - let's declare it up here so let obstacle
66:26 - left equal
66:28 - 500 pixels that's the width of our grid
66:31 - so then it should appear in the right
66:33 - place if we said it's 500
66:36 - i'm actually also going to give it
66:37 - obstacle bottom as well
66:39 - so we want it to appear i guess above
66:42 - our ground which is 150 pixels tall as
66:44 - we can see here
66:46 - so as a reminder what i am doing is
66:49 - positioning our obstacle
66:52 - to be 150 pixels so i guess the height
66:55 - of the ground so it appears to be above
66:57 - the ground
66:58 - so let obstacle bottom equal 150
67:02 - great this is looking good
67:05 - now let's grab the obstacle element and
67:08 - use style bottom
67:10 - to add the obstacle button passing
67:12 - through this so this is we're just
67:14 - passing 150 150 pixels and fantastic
67:18 - this is exactly where we wanted our
67:20 - obstacle to be everything is looking
67:22 - great
67:23 - 500 pixels and then 150 pixels fantastic
67:29 - i think we are ready to carry on right
67:33 - hopefully you understand this by now and
67:35 - how the left and bottom work
67:38 - okay now the next thing we want to do
67:40 - whenever we generate a obstacle we want
67:43 - to let it generate a random height okay
67:45 - we don't want all the obstacles coming
67:46 - in at the same height i'm going to do
67:48 - this by generating random numbers and
67:50 - passing them through into our obstacle
67:52 - bottom
67:53 - so let random height i'm going to set a
67:55 - variable of random height
67:57 - equals
67:59 - now i'm going to use math random this is
68:01 - a javascript method and if it's
68:03 - multiplied by any number we get any
68:05 - number from one to that number
68:08 - so let's say i don't know
68:11 - 60
68:12 - that should be fine so math random
68:15 - multiplied by 60 will give us a number
68:16 - for one to 60 now that's our random
68:18 - height so i can get i don't know 5 30 45
68:22 - whatever number coming out of this i
68:24 - have chosen 60 as i want an obstacle to
68:26 - appear below this ground line but quite
68:28 - a bit under it okay so there's 150 the
68:31 - ground is 150 high and i've chosen to
68:34 - make our obstacle ps60 from the ground
68:36 - to 60 from the game now that we have our
68:38 - random height i'm going to assign it to
68:40 - obstacle bottom
68:41 - now each time we refresh the page you
68:43 - will see what i mean so our obstacle is
68:46 - generating at random height from 0 to 60
68:49 - each time
68:51 - by 0 to 60 i mean from the bottom of our
68:53 - game grid
68:56 - now let's get our obstacle moving from
68:58 - right to left
69:00 - in the generate optical function i'm
69:02 - going to write another function called
69:04 - move obstacle
69:05 - in it i'm going to get our obstacle left
69:08 - and minus 2 from that variable each time
69:10 - we execute this so sort of like we moved
69:12 - our flappy bird we are now going to move
69:15 - our obstacle left by 2 visually each
69:18 - time the move optical function is
69:20 - invoked so again we need to put this on
69:22 - a timer as we don't want this function
69:25 - invoking just once we want it to keep
69:27 - invoking until we stop it so again let
69:30 - time id
69:31 - we can set it as let him id as the other
69:34 - timer id is outside of the scope of this
69:36 - function so it's fine
69:37 - now set interval let's use the set
69:39 - interval method and pass through a
69:41 - function so this times we move obstacle
69:44 - and let's choose to invoke it i don't
69:46 - know every 20 milliseconds again just so
69:49 - it's consistent so 20.
69:52 - great
69:56 - okay now that we have done that we need
69:58 - to grab the obstacle use style
70:01 - and left and reassign the obstacle left
70:04 - to it so it actually affects our
70:06 - obstacle element let's save this file
70:09 - and check it out and awesome it's moving
70:12 - amazing i love how it moves this looks
70:14 - fantastic we now need to stop our
70:17 - element once it hits the left hand side
70:19 - right we want to make it disappear we
70:20 - need to stop it and make it disappear
70:22 - let's do that again in our move optical
70:25 - function
70:26 - so
70:27 - if obstacle left deeply equals zero
70:30 - okay because that is zero position zero
70:33 - right here
70:34 - if
70:35 - it does deeply equal zero
70:39 - actually let's have a look at this so
70:41 - maybe we actually want the obstacle to
70:43 - view when it's minus 50 as we own the
70:45 - whole obstacle to be out of view if we
70:48 - stopped at zero it would sort of
70:49 - disappear but you'd still see it does
70:51 - that make sense so we want it to be when
70:53 - it's outside of view and since the
70:55 - obstacle width is 60 pixels isn't it
70:57 - let's check this that's actually yeah
71:00 - okay yeah it's 60 so let's change it
71:02 - from 50 to 60. okay so if obstacle left
71:06 - db equals 60 we clear interval and we
71:09 - pass through the timer id we stop this
71:11 - set interval
71:13 - from excusing
71:15 - we then grab our game display and just
71:18 - like we used a pen child we remove child
71:20 - obstacle so we pass through the obstacle
71:22 - to remove it
71:24 - okay let's see if that has worked
71:31 - and great
71:32 - our obstacle has now disappeared and
71:36 - stopped
71:37 - fantastic
71:39 - now that we have done this let's move on
71:41 - to actually generating new obstacles
71:43 - once our obstacle has gone off the grid
71:45 - i'm going to do this by putting a
71:47 - function that we've actually already
71:48 - written
71:49 - so the generate obstacle function on
71:52 - another timing event called set timeout
71:55 - so set timeout once again we pass
71:58 - through the function so generate
72:00 - obstacle and this time we pass through a
72:02 - time so this time means after this
72:04 - amount of time has passed then we want
72:06 - to execute the function generate
72:08 - obstacle okay so let's say that we want
72:12 - to execute this function every three
72:13 - seconds so i think three seconds is
72:16 - about enough time so we pass through
72:18 - three thousand three thousand
72:20 - milliseconds set timeout generate
72:22 - obstacle 3000 milliseconds okay
72:25 - so generate obstacle let's save
72:29 - one two three
72:32 - great
72:33 - we now have random obstacles generating
72:36 - at random heights
72:38 - every three seconds
72:41 - fantastic this is all looking good so
72:43 - far
72:44 - now let's actually get the game to stop
72:46 - if the bird reaches the bottom of our
72:49 - sky grid
72:50 - so once again because the bird is in the
72:52 - sky grid if bad bottom equals zero it
72:55 - means it's at the bottom of the sky grid
72:58 - what do we want to happen well we want
72:59 - the game to finish right so let's write
73:01 - a function called game over
73:03 - so
73:04 - function
73:05 - game over
73:09 - in it let's decide that we want to clear
73:11 - the interval
73:14 - start game
73:16 - do you know what let's for clarity let's
73:17 - actually change this so maybe make it i
73:19 - don't know
73:20 - game timer id
73:22 - okay
73:24 - just so we don't get confused game timer
73:26 - id so we want to clear the start game
73:28 - function from running
73:32 - we want to then set a variable that is
73:34 - gamer to true let's actually go ahead
73:36 - and declare this here so as default is
73:38 - game over it's false obviously because
73:40 - we want to start off with it being true
73:42 - we can play the game
73:44 - that looks good okay what else do we do
73:47 - on a game over well we actually want to
73:49 - stop our
73:51 - key
73:52 - spacebar key from working so using
73:54 - document and remove event listeners time
73:57 - we pass through the key up and control
73:59 - this is how we remove events
74:01 - so now
74:02 - if a game is over and you press your
74:04 - key space bar nothing will happen let's
74:07 - go ahead and try that and yeah perfect
74:09 - that works
74:12 - now let's get to writing what happens if
74:14 - our bird is in the same location as an
74:18 - obstacle so essentially if we collide
74:20 - with the obstacle okay so i'm going to
74:22 - write this like this and tell you a
74:24 - little bit why
74:25 - so
74:26 - if obstacle left is larger than 200
74:30 - meaning that
74:31 - it's not in the last 200 pixels of its
74:34 - travels
74:35 - and obstacle left is smaller than 280
74:39 - okay
74:40 - so it's like literally in the middle of
74:43 - our grid essentially
74:45 - and our bird left deeply equals 220
74:49 - in the position of 220 as it is all the
74:51 - time anyway maybe this is relevant
74:53 - then we have a game over
74:55 - okay so let's check this out
74:59 - okay so as you can see our game is
75:01 - stopping our bird is no longer moving
75:03 - it's not dropping down our spacebar does
75:05 - not work anymore great and we're getting
75:07 - game over show up in our console
75:10 - fantastic i know the obstacle's still
75:12 - moving we need to fix that
75:14 - we can actually do this by using if
75:17 - and then passing through is game over
75:19 - but bang
75:20 - by putting bang is game over i'm
75:22 - essentially saying if this game over is
75:25 - not true so if this is false
75:28 - if it's game move is false
75:30 - so the game carries on then we can
75:32 - generate new obstacles every three
75:34 - milliseconds however if this is true and
75:37 - it is a game over
75:39 - then we won't generate new obstacles on
75:41 - the set timeout get it
75:44 - let's see if that has worked
75:49 - okay it has worked we are not generating
75:52 - new obstacles however
75:54 - we're generating one obstacle do you see
75:57 - that so it was like one got generated
75:59 - then we stopped generating new ones but
76:00 - it was too late for the other one
76:02 - how do we solve this
76:05 - okay perhaps i know okay so obviously
76:09 - one more obstacle is being generated
76:11 - we can actually say we can actually just
76:13 - not add a class to it
76:15 - so once again if bang is game over
76:18 - so if the game is not over so if this is
76:22 - false
76:23 - then we can add a class of obstacle to
76:27 - the obstacle but only if the game is not
76:31 - over
76:32 - okay let's see if our little fix has
76:35 - worked
76:38 - okay great
76:39 - now once there is a game over there are
76:40 - no more obstacles being generated we are
76:43 - that much closer to what we want the
76:46 - last thing we need to do is actually
76:48 - stop our obstacle from moving so that
76:50 - green one right we actually want to stop
76:52 - when it collides with the bird
76:54 - let's also do that here
76:59 - so
77:00 - if any of the above is true we get a
77:03 - game over and we also clear our time id
77:06 - so we stop the move obstacle from moving
77:09 - so we'll let's clear that term 82 right
77:11 - here let's save
77:13 - and now
77:14 - ah oops and now when the bird and
77:16 - obstacle collide
77:18 - both stop
77:20 - amazing now you will see here that
77:23 - we have not written a rule to allow our
77:25 - butt to fly over the obstacle we're
77:27 - simply saying if the two are aligned
77:28 - vertically then the game is over let's
77:30 - fix this
77:32 - so again in here let's write more rules
77:36 - so once again here let's write more
77:37 - rules so this time if bad bottom is
77:41 - smaller than obstacle bottom plus
77:45 - let's just play around with some pixels
77:46 - here so 190 let's see if that works okay
77:49 - that's nearly there let's make a bit
77:51 - smaller so
77:53 - let's go ahead and try
77:55 - 160 i just want to see what looks the
77:57 - best really what makes it look like the
77:59 - most realistic
78:01 - so that looks okay actually let's make
78:03 - it a tiny bit smaller again
78:06 - 155
78:08 - actually 153. let's make it 153.
78:13 - okay that looks perfect i'm happy to
78:17 - carry on
78:19 - so bad bottom as long as bad bottom is
78:21 - smaller than obstacle bottoms whatever
78:23 - obstacle bottoms at the time it'll be a
78:25 - number from 0 to 60 plus 153 and that
78:28 - should work great i'm actually going to
78:31 - go ahead and show you how to make these
78:33 - pipes looks like actual pipes so
78:35 - if we head over to my github where i've
78:38 - stored these items for you kindly please
78:41 - feel free to take them or you can of
78:43 - course make your own that's a lot more
78:44 - fun
78:45 - so if you go over to my repo called
78:47 - flappy birds
78:50 - you will find the pipe just go ahead and
78:52 - download it and then perhaps you need to
78:55 - write so i'm going to right click and
78:57 - save image
78:58 - save image as and just save it to my
79:00 - download so save
79:04 - now i'm just going to import it by
79:05 - dragging it in so this is quite easy
79:08 - when you use vs code i'm just going to
79:10 - drag it into my project
79:13 - cool so now you'll see my pipe
79:15 - okay i'm going to replace the background
79:17 - color here background image and the url
79:20 - that is the url of my pipe in the
79:23 - project so it's actually the root of my
79:25 - project so i don't need to do much just
79:27 - pass through the name
79:29 - uh oops i put in the wrong place let's
79:30 - put it in the root of my project i don't
79:33 - know why i put in an open editor okay
79:36 - let's save and let's see how that has
79:39 - worked
79:40 - amazing
79:42 - here's our pipe this looks great i'm
79:44 - happy to carry on
79:47 - now i'm actually going to shoot
79:48 - something cool we're going to actually
79:50 - do the top obstacle so i'm just going to
79:52 - copy paste this here i'm going to rename
79:54 - it as top obstacle so it's the same
79:57 - thing really
79:58 - however i'm going to use a property
79:59 - called transform
80:02 - and pass through the degrees i want to
80:04 - transform it by
80:06 - so to make it look upside down i'm going
80:08 - to pass through 180 degrees so
80:12 - rotate
80:14 - 180 degrees
80:17 - cool
80:18 - now this part will be easy essentially
80:20 - each time we have anything to do with
80:22 - obstacle we need to do the same for top
80:23 - obstacle okay so here you see how we
80:26 - create a element div
80:28 - let's do the same but call it top
80:29 - obstacle so top obstacle equals document
80:31 - create element and then pass through a
80:34 - div so we're creating a div and storing
80:36 - is top obstacle this time
80:38 - now let's grab the game display and
80:39 - append it
80:41 - using a pen child top obstacle we're
80:43 - passing through the top top obstacle
80:45 - into our game this time
80:48 - if there is not a game over so if the
80:51 - game is running we also want to add the
80:54 - class of obstacle or top obstacle to our
80:58 - obstacle and then of course we want to
81:00 - as the obstacles are moving the same
81:02 - time we could just use obstacle left so
81:04 - top obstacle style left equals obstacle
81:07 - left
81:08 - just to make sure they're both moving at
81:10 - the exact same time use the same
81:12 - variable
81:13 - and top obstacle style bottom now again
81:16 - we'll use the same variable so bottom
81:18 - optical bottom plus a gap
81:21 - let's set this gap at something i don't
81:23 - know 400 pixels
81:25 - so now each time the top of the score
81:27 - will have a gap of 400 pixels between it
81:29 - and the bottom obstacle
81:32 - cool oops we need to change that top
81:34 - obstacle too i forgot
81:36 - okay let's save this
81:38 - ah amazing
81:40 - we're getting the top of school it's not
81:42 - moving yet but that's fine we'll fix
81:44 - that at least it's appearing there with
81:46 - a 400 pixel gap
81:49 - i'm gonna make this gap bigger let's
81:50 - make it i don't know 430 pixels i'm sure
81:53 - that'll be fine
81:55 - cool let's carry on now let's just see
81:57 - if this works okay yeah that's better
81:59 - that's much better actually
82:01 - now
82:02 - the reason our top obstacle is not
82:04 - moving is because we actually forget
82:06 - to assign it the obstacle left variables
82:09 - so once again top of school style left
82:12 - equals obstacle left pixels while we are
82:15 - here let's actually go ahead and remove
82:16 - the top obstacle once it hits the left
82:19 - hand side too
82:21 - ah i missed about left and great we now
82:25 - have both obstacles moving along
82:28 - now we need to also write some rules
82:30 - that is a game over if the bad hits the
82:32 - top obstacle
82:34 - let's do that once again in here
82:38 - this time i'm going to write i'm going
82:39 - to open up some brackets
82:43 - okay and put this around the brackets so
82:45 - what i'm saying here is that if bad
82:47 - bottom is smaller than obstacle bottom
82:48 - plus 153 or
82:51 - the bad bottom is bigger than the
82:54 - obstacle
82:55 - bottom
82:57 - plus the gap
82:59 - minus 200 let's try that out okay great
83:04 - once again i'm just sort of playing
83:05 - around pixels with trial and error
83:07 - you'll probably figure out the right
83:08 - pixel that you want it to stop at what
83:10 - looks good
83:12 - this looks good don't forget to put it
83:14 - in brackets however as we want this to
83:16 - execute as one thing so we're going to
83:18 - choose between the two and then have and
83:21 - and and all the others so and the bad
83:24 - hits the bottom so there's a game over
83:25 - if obstacle left is smaller than 200 and
83:28 - obscure left is bigger than 280 and
83:30 - about left directly equals 220 and
83:35 - either of those two and the bad bottom
83:37 - deeply equals zero cool
83:39 - i believe we have most our logic done
83:42 - this is looking really good i'm going to
83:44 - quickly go over some styling just so we
83:46 - can i can show you how to bring elements
83:49 - uh in front of one another so i'm gonna
83:52 - actually make borders so our left border
83:54 - right border top border and bring out
83:56 - the ground so our pipes are behind all
83:58 - of these
83:59 - so i'm gonna show you how to do that
84:00 - quickly
84:02 - it shouldn't take too long but it's
84:03 - quite a cool thing to know about it's
84:05 - called the z index
84:06 - so let's go ahead and add the z index to
84:08 - our ground first so by putting plus one
84:11 - i'm saying i want it to be appear like
84:13 - closer to us
84:14 - let's refresh and great it is now in
84:17 - front of the pipes it is now plus one in
84:19 - front of us on the z index
84:21 - let's do the same for the borders so i'm
84:23 - going to make a border left
84:25 - once again let's make it i don't know 60
84:28 - pixels wide as that is how wide our
84:30 - obstacles are i'm gonna give it a height
84:33 - of 730 pixels as that's the height of
84:35 - our game container actually i'm going to
84:37 - make it 90 because if i'm going to give
84:39 - it about a top i want it to sort of be
84:41 - the height of the game container and the
84:43 - top border again for this position
84:46 - absolute
84:47 - a background color of white so it blends
84:50 - in that background and a zen index of
84:52 - plus one actually maybe
84:55 - yeah plus one fine
84:57 - um now let's go ahead and add this to
84:59 - our html so i'm gonna put this above
85:02 - here
85:03 - it will appear stacked on top of our
85:06 - game container but don't worry we're
85:07 - gonna give some styling to the body of
85:10 - our game
85:11 - oh this is very strange why are we
85:13 - missing a body tag hmm okay let's put
85:16 - weird let's put the body tag in so now
85:18 - that we're in the body tag let's style
85:20 - up our body
85:21 - okay to make sure that our divs appear
85:24 - side by side and not stacked on top of
85:26 - each other so body i'm going to use
85:28 - display flex to do this
85:30 - cool
85:32 - i need to also in my game container 60
85:34 - pixels left to make space for the border
85:36 - left so let's do that
85:38 - let's change that to left i think that's
85:40 - how i spelt it let's check yeah water
85:42 - left water left
85:44 - and refresh
85:46 - amazing
85:47 - we now have a border left
85:50 - fantastic
85:51 - this is looking really good let's go
85:54 - ahead and add the other two borders
85:58 - let's actually go ahead and make this
86:00 - made our board a little wider so 80
86:02 - pixels here and 80 pixels here
86:07 - okay that's better that's better yeah i
86:09 - like that more
86:10 - okay now let's make our other borders
86:13 - so once again i'm gonna make a border
86:15 - right
86:16 - so in our html i'm gonna make a div and
86:19 - give it a class of border right
86:22 - cool
86:25 - border right and i'm basically just
86:27 - going to copy it so width 80 pixels
86:30 - height 790 pixels
86:32 - position
86:34 - absolute background color white
86:38 - and z index plus two
86:43 - okay
86:44 - now the only difference is is i'm going
86:45 - to give it a left
86:47 - left positioning of whatever the width
86:49 - of the game container is plus the border
86:51 - left width
86:53 - so that's 580 pixels so it starts at the
86:55 - 580 pixels from the left
86:58 - cool
86:59 - refresh
87:01 - amazing now just the top one to go so
87:04 - the top border it's going to be very
87:06 - similar once again
87:08 - so
87:09 - we should probably feel comfortable
87:10 - doing this by now so let's go ahead and
87:12 - bought a top
87:14 - let's give it a width of
87:16 - whatever the
87:18 - width is 500 plus 80 plus 80
87:21 - right
87:22 - because that's the border right width
87:24 - and then we're left with plus the game
87:26 - width
87:28 - okay so i'm actually going to put it in
87:30 - the game container because i want to put
87:32 - it in the game container
87:35 - but i'm also going to
87:37 - i guess position it outside of the game
87:39 - containers so make it appear above the
87:41 - sky even though it's in the container
87:44 - it's sort of not really if you get what
87:46 - i mean i'm going to make it like
87:47 - position it off
87:49 - so yeah div class
87:51 - border top
87:53 - okay let's save this now border top
87:57 - once again width well i guess it's going
87:58 - to be the border right width and the
88:01 - border left with plus the sky so 660
88:04 - pixels
88:05 - height let's just go with 50 pixels that
88:07 - should be fine position absolute and
88:10 - background color white
88:13 - z index i guess plus two again why not
88:17 - okay now this is what i mean
88:19 - top i'm going to go with minus 50 okay
88:23 - because i want it to appear above
88:25 - the sky
88:27 - cool amazing
88:29 - fantastic
88:30 - i am loving how our game looks this is
88:33 - looking really good i'm not going to go
88:35 - ahead and style off for now that's
88:36 - something you could do by yourself
88:38 - i'm going to show you a little something
88:39 - i made earlier
88:41 - so yeah this is my game with moving
88:43 - grounds and everything