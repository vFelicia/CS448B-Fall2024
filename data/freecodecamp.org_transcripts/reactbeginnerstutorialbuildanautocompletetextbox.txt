00:00 - in this video you're going to be getting
00:02 - started with react from creating a
00:04 - skeleton react app all the way to
00:06 - building this reusable real world
00:08 - component which is an auto-complete text
00:11 - box with suggestions that filter as you
00:13 - type
00:18 - so what is react
00:20 - react is a javascript library created by
00:23 - facebook for building user interfaces
00:26 - it allows you to build and combine
00:28 - reusable ui components much like
00:31 - creating your own custom html tags
00:34 - these components are declarative views
00:37 - which update as the data in your
00:39 - application updates i.e they react to
00:43 - changes in your application state hence
00:45 - the name of the library
00:47 - enough background let's get started
00:51 - you need a recent version of node for
00:53 - this to work so if you haven't got that
00:55 - installed already go and do that first
00:58 - when that's done in the terminal i want
01:00 - you to type npm install
01:02 - g
01:04 - create dash
01:05 - react dash app
01:08 - this will install an npm package that
01:11 - creates bare bones react apps for you
01:13 - with all the webpack configuration and
01:16 - required modules already set up for you
01:18 - so you can start coding straight away
01:22 - after that's done installing you need to
01:25 - do create
01:26 - dash react dash app
01:29 - then a space and the name of whatever
01:31 - you want to call your new app let's call
01:33 - it my dash
01:34 - first dash app
01:39 - and this will set up your new react app
01:42 - and install all the necessary
01:44 - dependencies
01:46 - that'll take a little while and after
01:49 - it's done you need to go into the
01:51 - directory that's just been created so
01:52 - that's my first
01:55 - app
01:57 - and you'll see here it's
01:59 - installed an npm application for us it's
02:02 - created our bare bones react app and we
02:05 - just do an npm start
02:07 - and this will this will compile the app
02:10 - and run the dev server
02:12 - it's also in the moment going to open
02:14 - here we go it opens a browser window and
02:17 - runs the app in it for you that's very
02:19 - convenient
02:22 - so it's still just loading it's still
02:23 - probably compiling in the background
02:31 - and there we go and this is the bare
02:33 - bones react app and you can see here it
02:37 - tells you to
02:39 - go to src app.js
02:41 - edit the code and save and it will auto
02:44 - reload
02:45 - so let's do that now
02:48 - to start off with we're just going to
02:49 - fly through building a really simple
02:51 - component with react just as a taster
02:54 - after that we'll move on to the
02:56 - autocomplete textbox which is more
02:58 - useful but also more complex
03:02 - open the code in an editor of your
03:04 - choice
03:05 - and go to the src folder and then you
03:08 - want to go to app.js
03:11 - and this is the main top level app
03:13 - component that renders what we saw in
03:15 - the browser if you remember there's this
03:18 - text here about getting started let's
03:21 - just edit this and change it to say
03:23 - hello world
03:26 - and if we save it
03:27 - and go back to the browser
03:30 - the code recompiles it hot reloads
03:34 - and we get hello world
03:37 - so now let's create our first react
03:39 - component and then we'll be able to use
03:41 - it just like a custom html tag really
03:46 - we're going to make a component which is
03:48 - a button and some dynamic text
03:50 - when you click the button it's going to
03:52 - toggle hiding the text
03:54 - so in src i want you to create
03:57 - a new file
03:59 - we're going to call it hideable
04:02 - text.js
04:05 - we're going to import
04:06 - react
04:08 - from react
04:12 - then we're going to export as default
04:16 - a new class
04:17 - and we're going to call that hidable
04:20 - text and it needs to extend
04:24 - the react dot component class
04:28 - we give it a constructor
04:31 - and the constructor takes an argument
04:33 - called called props these are just
04:36 - properties for the component and they
04:38 - can be passed in like attributes are
04:40 - passed to an html tag
04:42 - and we do just need to call super in the
04:44 - constructor passing through the props
04:46 - and super just calls the parent class
04:48 - constructor so it's calling the react
04:50 - dot component constructor that just
04:52 - ensures the class is set up properly
04:54 - next we have a very special function
04:56 - called render
04:58 - now whatever gets returned from render
05:01 - is what gets rendered in the browser for
05:04 - this component so we're going to return
05:07 - some jsx it's called which is xml within
05:10 - javascript
05:12 - and this jsx is just going to be
05:15 - a div so it's just like doing html tags
05:18 - within our javascript really it's going
05:20 - to be a div
05:23 - and then we're going to have a button
05:26 - and we'll call it toggle
05:36 - and then some just some hard-coded text
05:39 - for now
05:48 - now we have this component we can go
05:49 - ahead and import it into our app
05:52 - component so we open that file
05:55 - and we just import it import hidable
05:58 - text from
06:01 - hideable
06:03 - text
06:05 - now we can use it pretty much like a
06:07 - custom html tag so if we go within this
06:10 - div class name app content we just go
06:13 - hideable text like an html tag
06:16 - we save it and then we'll have a look
06:19 - and see how it looks in the browser
06:21 - and there we go we've got our button
06:23 - that does nothing at the moment and our
06:26 - text
06:27 - react elements can take arguments called
06:30 - props that are a lot like attributes for
06:33 - html tags
06:35 - so to our hideable text we'll add one
06:38 - called text
06:40 - and as the value just as a string we
06:43 - will put
06:44 - dynamic
06:46 - text
06:50 - now we go back to our component
06:54 - and that text prop will be available in
06:57 - the component within an object called
07:00 - this dot props it comes in via the
07:02 - constructor here and is passed to the
07:04 - superclass
07:06 - so we want to output this here
07:08 - and if you want to output the result of
07:11 - an expression in jsx
07:14 - you just wrap the expression in curly
07:15 - braces that's completely wrong wrap the
07:18 - expression in curly braces so we're
07:20 - going to do this dot props dot text and
07:23 - that will be the dynamic text we just
07:26 - passed in as the prop
07:27 - so if we save this and take a look in
07:29 - the browser the text should have changed
07:34 - so as we can see we've now got our
07:35 - dynamic text
07:37 - and the button does absolutely nothing
07:40 - let's fix that now
07:43 - props are one form of data available to
07:45 - a rat component they are passed in from
07:47 - outside the component as we saw and are
07:50 - immutable but we can also store internal
07:53 - mutable data within a component and this
07:56 - is called state we will define this
07:59 - within the constructor so we'll go this
08:01 - dot state
08:02 - and state is a special property on a
08:05 - react component so it has to be called
08:08 - state
08:09 - and it's just a plain old javascript
08:10 - object so we can just define it as an
08:13 - object literal we will add an is hidden
08:16 - property
08:17 - defaulting to false
08:19 - so obviously if is hidden is true the
08:22 - text will be hidden otherwise it will be
08:24 - shown
08:25 - and we can achieve that by going down
08:27 - here and doing not this dot state
08:31 - dot is hidden
08:34 - and props dot text
08:37 - this means the text will only show if is
08:39 - hidden
08:40 - is true
08:42 - next we need a way to toggle is hidden
08:45 - so let's go up here let's create a new
08:47 - method on the class called toggle
08:50 - is hidden
08:52 - it doesn't take any arguments
08:54 - and this is going to use a special
08:57 - method which is inherited from the react
08:59 - dot component class
09:01 - and this is called set state
09:04 - for reasons i won't go into now because
09:06 - it's beyond the scope of the video
09:08 - this dot state should never be altered
09:10 - manually after being initially set up in
09:13 - the constructor
09:16 - so we call this dot set state and this
09:18 - takes a function as an argument
09:21 - and it gives us actually the current
09:23 - state
09:26 - as an argument to this function
09:28 - and then this function has to return the
09:30 - changes we want to make to the state
09:33 - object in the form of an object
09:36 - so we'll return an object
09:39 - and we want is hidden to be
09:43 - the result of toggling
09:46 - the current is hidden so current state
09:48 - dot is hidden
09:50 - and again for reasons i won't go into
09:52 - now because it's too complicated for the
09:54 - moment you must always you get the
09:57 - current value of any state object
10:00 - when you're doing a set state from
10:01 - current state not from this dot state
10:04 - you'll have to watch my entire react
10:06 - course to find out why i think it's a
10:08 - bit more complicated but this toggle is
10:11 - hidden function will do exactly what we
10:13 - want
10:14 - next comes the task of hooking toggle is
10:18 - hidden up to this button here
10:20 - it's actually very simple
10:22 - it's a lot like in html and javascript
10:25 - without react how you would have
10:28 - how you would add rather an event
10:30 - handler you just put it straight on as
10:32 - an attribute on click in this case
10:35 - it's going to be an expression so we
10:37 - want the curly braces again and then we
10:39 - just put an arrow function and all this
10:41 - arrow function is going to do is call
10:44 - this dot toggle is hidden
10:48 - let's save that and check this in the
10:51 - browser
10:52 - first i have just noticed a big error
10:56 - in toggle is hidden i set the new value
10:59 - of his hidden to be exactly the same as
11:01 - the current value which is obviously
11:03 - wrong we want to negate it so it's
11:05 - toggled and now it should work
11:09 - so in the browser we have the toggle
11:11 - button we have the dynamic text we click
11:14 - toggle and the text disappears we toggle
11:16 - it again and it reappears
11:19 - so that's working as intended
11:23 - so what's happening here is when we
11:25 - initially render the button is hidden is
11:28 - false
11:29 - and so the text is hidden then when we
11:32 - click the button toggle is hidden is
11:34 - called
11:35 - set state is called and it sets is
11:37 - hidden to true each time we update the
11:40 - state of react component the component
11:42 - re-renders so the render function is
11:45 - called again and so when we click for
11:47 - the first time and his hidden is set to
11:50 - true
11:51 - this function is then called again this
11:53 - time is hidden is true and so the text
11:57 - isn't shown
11:59 - now we're going to move on to building a
12:00 - more useful real world component
12:03 - i'm going to be teaching you how to
12:05 - build this autocomplete text box using
12:07 - react
12:08 - it's one of those text boxes where you
12:10 - type and get a list of possible items
12:12 - you can select which fill in the text
12:14 - box a bit like the auto suggestion
12:16 - search boxes on most search engines what
12:20 - i really like about this is that it has
12:22 - real world uses it's a very simple
12:25 - component but by creating it you'll
12:27 - learn about reusable react components
12:30 - props component state and using css with
12:33 - react
12:35 - you'll first need to set up a new react
12:37 - app by installing create react app
12:39 - creating a new app with it and then run
12:41 - it by going to the directory in the
12:43 - terminal and doing npm start
12:45 - alternatively you could just put the
12:47 - code within the app you previously
12:49 - created it's up to you open the code in
12:52 - an editor we're going to create a new
12:55 - component
12:56 - first create a new file for your
12:58 - components and call it
13:00 - autocompletetext.js and it should be in
13:02 - the src folder
13:05 - components are the building blocks of
13:07 - any react application
13:09 - they can be configured using something
13:11 - called props more on that later in the
13:13 - series and they can hold their own
13:15 - mutable data called state
13:18 - they can be used to represent anything
13:20 - in your ui from small things like a
13:22 - standalone ui widget such as this
13:25 - autocomplete text box we're going to
13:27 - create
13:28 - right up until something large like an
13:30 - entire web page
13:33 - components are reusable so you can use
13:35 - them many times on one page or even
13:37 - across different pages they're also
13:40 - composable you can think of them like
13:42 - lego bricks you can fit them together to
13:45 - build other larger components
13:48 - first we need to import the react module
13:51 - you need to do this for every component
13:54 - you create
13:56 - then we create a class to represent our
13:58 - component and we're going to call it
14:00 - autocomplete text
14:03 - it needs to extend the react dot
14:06 - component class in order to make it a
14:09 - component
14:16 - our text box will need the list of all
14:18 - possible items that it can auto complete
14:20 - with
14:21 - in a future video i'll show you how to
14:23 - make that configurable but for now we're
14:25 - just going to hard code a list of names
14:28 - to do this first create a constructor
14:30 - react component constructors must take
14:32 - an argument called props and call the
14:34 - superclass constructor passing the props
14:37 - argument to it
14:39 - this just ensures the component is set
14:40 - up properly
14:42 - let's add a member variable called items
14:44 - so it's this.items and it's going to be
14:47 - an array
14:48 - we create a member variable so we can
14:50 - access it from anywhere in the class
14:52 - later
14:53 - so let's add some names now to the array
14:57 - these will be what can be shown in the
14:59 - autocomplete drop down they're all the
15:02 - possible items to auto complete with
15:14 - now the markup for our component
15:17 - at the heart of any react component is
15:20 - the render function
15:22 - it will examine all of the components
15:23 - data and based on this will render the
15:26 - markup for the component
15:28 - the idea is that when the components
15:30 - data changes the markup changes so the
15:33 - user sees something different
15:37 - so we define our render function
15:40 - from this we must return the react
15:42 - elements we want to represent our
15:44 - components
15:45 - some magic called jsx lets us write them
15:48 - directly within javascript as html tags
15:51 - so we're going to return a rapid div and
15:54 - inside it a text input this is going to
15:57 - be our text box
16:00 - we're also going to put an unordered
16:02 - list to hold our auto complete
16:04 - suggestions
16:06 - we'll worry about showing only items
16:08 - that match the text entered later
16:11 - for now let's show all the items in the
16:14 - list
16:15 - so we have this as an array so we can
16:17 - just output an li for each item in the
16:21 - items array
16:23 - now this is going to be an expression
16:25 - and to mix expressions into our markup
16:28 - using jsx we need to wrap them in curly
16:31 - braces
16:32 - anything within curly braces will be
16:34 - evaluated and the value output within
16:38 - our markup this can be anything from a
16:40 - simple string to the results of a
16:43 - function call or even
16:45 - other react elements
16:49 - we want one li per item in the list so
16:52 - inside those curly braces we're going to
16:55 - map over the array and output an li for
16:58 - each item
17:00 - within the li we have the item itself
17:02 - this itself is an expression so is also
17:05 - wrapped in the curly braces
17:08 - the result of this map is an array of
17:10 - react elements now if we put an array of
17:13 - react elements within curly brackets
17:16 - each element in that array will be
17:19 - rendered
17:20 - although we're nowhere near finished yet
17:22 - i think this is a good time to check how
17:25 - our new component looks in the browser
17:28 - so far we have our new component but
17:31 - haven't used it anywhere
17:33 - we can use the component just like a
17:35 - custom html tag
17:37 - the component itself is just the
17:39 - definition
17:40 - we need a new instance of this
17:42 - definition which will be a react element
17:45 - let's do that now
17:48 - so you want to go to app.js this is our
17:51 - main top level component for the app
17:55 - and we're just going to delete all this
17:57 - we don't need that header section at all
17:59 - and we also want to go into index.css
18:02 - and just put 50 pixels of margin at the
18:05 - top of the body just so we've got a bit
18:07 - of space up there when we put our text
18:10 - box in
18:12 - so first we need to import our
18:15 - components module
18:21 - and we're going to use the component
18:23 - just like a custom html tag
18:41 - so it's just auto complete text as an
18:44 - html tag
18:46 - so you should be running the app using
18:48 - npm start in the folder in the terminal
18:51 - so that it will hot reload in the
18:52 - browser when you change the code let's
18:55 - take a look
18:57 - as you can see we have our text box
19:00 - and our list with all the names in it
19:04 - when the user types in the text box
19:06 - we're going to need to know about it so
19:07 - we can filter the list so that only
19:10 - items that match what the user types are
19:12 - displayed we're also going to need the
19:15 - current text which has been entered for
19:17 - the same reason
19:19 - so let's get that text now
19:22 - you can add events to elements in react
19:24 - much the same way as you can in html so
19:27 - this text input has an onchange event
19:30 - available
19:31 - so we add that and we're going to assign
19:33 - a function to it since a function is an
19:35 - expression we wrap it in curly brackets
19:39 - and all the function is going to do is
19:41 - take the event that has been generated
19:44 - and console.log
19:47 - event.target.value or e.target.value
19:50 - because is the event target is the
19:52 - element which is the target of the event
19:55 - and the value is the value of the html
19:58 - text input
20:00 - let's check that in the browser
20:03 - so we right click and choose inspect to
20:06 - open the developer console
20:08 - and choose console from the tab above
20:11 - then we type in the text field
20:14 - and as we do you can see the text being
20:16 - output each time we change the value
20:20 - in order to only show items in the list
20:22 - that match the text entered we need to
20:24 - use the component state
20:27 - component state is just internal data
20:30 - belonging to the current instance of the
20:31 - component
20:33 - since it belongs to the current instance
20:35 - you can have multiple versions of the
20:36 - same components on the same page at the
20:39 - same time and they each keep their own
20:41 - individual state
20:44 - so in this dot items we have all the
20:47 - possible items
20:49 - we will store the list of items which
20:51 - match what is entered in the text box in
20:53 - the components state
20:56 - the state is initialized in the
20:58 - constructor
21:00 - it is just a plain old javascript object
21:02 - but it must be called state
21:04 - and must be on the current instance ie
21:06 - on this
21:08 - as this is the property react.component
21:10 - uses for the state
21:12 - it's like a property which is special to
21:15 - react
21:17 - so we're going to create this dot state
21:19 - and it's going to equal a new object
21:22 - literal for the list of suggestions
21:24 - we'll have a property called
21:26 - suggestions
21:28 - when the component is first created we
21:30 - want the suggestions to be empty so
21:32 - let's go ahead and make it an empty
21:35 - array
21:37 - let's create a function to handle the
21:39 - user typing in the text box
21:42 - we'll call it
21:43 - on text changed and it's very important
21:46 - that it's an arrow function or this
21:48 - won't work
21:49 - if you don't understand why this is you
21:51 - need to learn about function context in
21:54 - javascript
21:55 - the function will take the onchange
21:57 - event as an argument we'll call it e
22:03 - and now let's go down to the onchange
22:05 - attribute in the textbox and we're going
22:08 - to add that function there we just put
22:10 - this dot on text change there's no
22:13 - brackets at the end we're not calling
22:14 - the function just assigning it
22:18 - so we need to get the value from the
22:21 - event
22:23 - if the string is empty
22:24 - we're going to want to make sure that
22:27 - the suggestions are empty as there's
22:29 - nothing to match on
22:30 - this case would happen for example if
22:33 - the user types a single character and
22:35 - then deletes it
22:44 - now you might think we empty the
22:46 - suggestions array by doing something
22:48 - like this dot state dot suggestions
22:51 - equals empty array that seems to make
22:52 - sense doesn't it we just
22:54 - set the suggestions array on the state
22:57 - to be empty however this would be the
22:59 - wrong way to update a value in the state
23:03 - the reason for this is that what gets
23:05 - rendered in the render function will
23:07 - probably depend upon the state now in
23:09 - this case it doesn't yet but we'll be
23:11 - making render do this in just a minute
23:14 - the idea is when you change the state
23:17 - you change what gets rendered so that
23:19 - the component displays something
23:21 - different this is what makes react
23:23 - components dynamic rather than static
23:26 - for this reason the component needs to
23:28 - know that the state has changed so it
23:31 - can re-render call render again and
23:33 - display the new version of the component
23:36 - to the user
23:38 - react.component gives us a function it's
23:41 - called setstate that does just this
23:45 - so it's this dot set state
23:47 - and now this takes a function which will
23:50 - return an object with any state changes
23:52 - in it so any properties we want to
23:54 - change in the state
23:55 - go in that object the reason it takes a
23:58 - function that returns an object instead
24:00 - of just an object is beyond the scope of
24:02 - this video i do however talk about this
24:04 - in my udemy course
24:07 - so we want to set the suggestions to
24:09 - empty array so the function just returns
24:11 - an object with suggestions as an empty
24:14 - array
24:15 - you don't need to return the entire
24:17 - state from this function just the
24:18 - properties you want to change
24:21 - the else case is if for the text isn't
24:25 - empty
24:26 - for this case we're going to create a
24:29 - case insensitive regex to test for
24:32 - matches in the items list that start
24:35 - with the text the user entered
24:46 - next we're going to define the list of
24:49 - matching suggestions and put it in a
24:51 - const and this is going to be defined as
24:54 - taking the contents of the items array
24:58 - sorting it alphabetically
25:00 - and filtering it for items that match
25:02 - the regex we just created
25:16 - we then need to update the state
25:18 - with the filtered list of suggestions
25:26 - and actually i've just thought of a
25:28 - better way
25:29 - of writing this
25:36 - so we're going to use let and define
25:40 - suggestions so it's mutable and we're
25:42 - going to initialize it as an empty array
25:45 - and if the length of the string entered
25:47 - is more than zero we set suggestions
25:51 - to be the filtered list of items
25:57 - so we just need the regex in there
26:01 - and then
26:02 - the filtered suggestions in there as
26:04 - well
26:18 - and then after that we just set
26:20 - suggestions in the state this does
26:22 - exactly the same thing it's just more
26:24 - concise
26:27 - now we're only going to render the
26:28 - filtered list of suggestions instead of
26:30 - the full list
26:32 - i'm going to create a function to do
26:34 - this which i'm going to call render
26:36 - suggestions
26:40 - so we destructure the suggestions from
26:43 - the state
26:53 - and if this list is empty we don't want
26:56 - to show the ul element at all
26:59 - um to do this we can just return null
27:02 - from this function
27:04 - anything that is null won't render
27:06 - anything to the browser
27:10 - so next is if it's not empty
27:13 - and in this case we want to copy and
27:15 - paste all the code from down here from
27:18 - the render function or cut and paste
27:19 - rather for the ul
27:26 - so we're going to return that
27:28 - and within that instead of mapping over
27:30 - the items array which is
27:32 - sort of all the items that we have
27:36 - because we only want to output the
27:38 - suggestions
27:40 - we change it to suggestions instead of
27:43 - items
27:46 - then in the render function we call
27:48 - render suggestions
27:50 - in the place of where we had the markup
27:53 - for our ul
27:57 - so now what should happen is when i type
28:00 - in the text box only items which match
28:02 - the value entered get shown
28:05 - but we have an error
28:06 - v.test is not a function it actually
28:09 - says there's two errors on the page but
28:11 - they're both the same
28:13 - let's just go and fix this now
28:17 - so i've got things the wrong way around
28:18 - here i've done
28:20 - text value dot test instead of regex dot
28:23 - test
28:24 - and i need to pass in the text value to
28:27 - the test function so just the wrong way
28:28 - around there let me go back
28:31 - try again
28:32 - cannot read property map of undefined
28:36 - again just a small bug it's not
28:39 - this.suggestions.map it's just
28:40 - suggestions as we've already structured
28:44 - third time's a charm we're now getting
28:47 - everything filtered as i type
28:50 - what's happening is the suggestions are
28:52 - being updated in the state as i type
28:56 - each time they are the component's
28:58 - render function gets called again
29:00 - and it only returns the list with the
29:02 - matching items as this is what's in the
29:05 - state at the time the function gets
29:07 - called
29:09 - so we have our filtered list next we
29:12 - need to make it so when we click an item
29:14 - on the list it populates the text box
29:16 - with it
29:17 - to do this we need to be in control of
29:20 - the value of the text input
29:22 - now there are two types of controls in
29:24 - react or inputs rather controlled and
29:27 - uncontrolled
29:28 - currently this text box is uncontrolled
29:31 - this means the browser controls the
29:33 - value the user types and the text
29:36 - appears in the text box
29:38 - if we make our text box controlled we
29:41 - control the value via react
29:44 - we make it controlled simply by adding a
29:46 - value prop
29:48 - and we'll set this now to an empty
29:49 - string
29:51 - so look what happens when we're in
29:52 - control of the text box via react i am
29:56 - actually now typing the text box and
29:58 - nothing will appear
29:59 - we will have to set the value ourselves
30:01 - from within the component
30:05 - we will set the value of the text box
30:07 - using the component state to do this
30:10 - we're going to add a text property to
30:12 - the state and the value should just be
30:14 - an empty string
30:16 - then we want to go down to our render
30:18 - function
30:20 - and we want to extract this text value
30:23 - from the state
30:28 - and then in our text box
30:30 - we're going to make that
30:32 - value prop
30:34 - the text from the state
30:36 - so that's what goes in the text box
30:39 - now we go to the on text change function
30:43 - and when the text box value changes we
30:46 - want to set that value in the state as
30:49 - text
30:50 - now when we type in the text box the
30:53 - value updates
30:55 - to select the item we need a function to
30:58 - say a suggestion has been selected
31:02 - so we're going to go ahead and add a
31:04 - function suggestion selected
31:08 - it's going to take the value of the
31:10 - suggestion which will be one of the
31:12 - items from the suggestion list as an
31:14 - argument
31:16 - we're then going to update the state so
31:19 - the value the text box uses is the
31:22 - selected suggestion
31:32 - this point we're also going to wipe the
31:34 - suggestions list by setting it to be an
31:36 - empty array as we don't want to still
31:39 - show it when the user has just selected
31:41 - an item
31:44 - finally we need this to fire when a
31:47 - suggestion is clicked on
31:49 - so we're going to go down to the li for
31:52 - a suggestion item and we're going to add
31:55 - an on click event handler and we're
31:57 - going to add an arrow function in there
32:00 - and this is going to call
32:02 - this dot suggestion selected with the
32:05 - suggestion text for this li
32:13 - we should now be done and everything
32:15 - should work
32:17 - now as we type it filters the list and
32:20 - when we make our selection it populates
32:23 - the text box so that's a success there
32:26 - are a number of ways to handle css and
32:28 - react today i'm going to show you the
32:30 - simplest
32:32 - you see here we have our app.css file
32:35 - this came with create react app
32:38 - and then if we go into our components
32:41 - our app components javascript file we
32:43 - import it just like we would a
32:45 - javascript module not forgetting to add
32:48 - the dot css extension this part's very
32:51 - important
32:53 - now looking in the browser and viewing
32:55 - the source
32:57 - we go into the head section
33:00 - and we scroll down a bit
33:02 - and there's this style tag here and
33:05 - within it we see the contents of
33:08 - app.css what's happening here is that
33:11 - create react app has set up a webpack
33:13 - loader for us
33:14 - webpack is a commonly used javascript
33:17 - build tool anyway this loader is
33:20 - intercepting imports of files based on
33:22 - the css extension it is then adding code
33:26 - to add a style tag into the web page
33:28 - using javascript and putting the
33:30 - contents of all the imported css files
33:33 - in here that's what happened with
33:35 - app.css
33:36 - so let's add our own css file
33:42 - so we add a new file for our css
33:44 - autocompletetext.css
33:52 - within that we're going to add a class
33:54 - autocomplete text
33:57 - for now we're just going to put a width
33:59 - of 100 on it
34:02 - next we go to our component
34:06 - and we need to import
34:08 - autocompletetext.css
34:11 - remember the.css extension
34:15 - this now ensures that the css we wrote
34:17 - shows up in the head of the document
34:19 - just like with app.css
34:24 - we can now apply the class we added to a
34:26 - react element so we're going to apply it
34:29 - to the wrapper div
34:33 - now one thing to note this is very
34:35 - important in jsx you can't just use the
34:39 - class attribute because it's a reserved
34:41 - word in javascript so you can't put just
34:43 - that instead we have to use class name
34:46 - uppercase on then but this acts just
34:48 - like the class attribute in html so we
34:51 - add our autocomplete text class in there
34:55 - let's check that in the browser
34:58 - so we can go to the head
35:01 - and we can see the style has been added
35:03 - there
35:04 - looking at the finished product we can
35:06 - work out what we need to do in terms of
35:08 - styling firstly let's take the width
35:11 - since this is a reusable component we
35:13 - want a flexible width i think the best
35:15 - way to achieve this is to make
35:17 - everything 100 width then when someone
35:20 - uses the component they can put in a
35:22 - fixed width container in order to
35:24 - dictate the final width of the component
35:27 - now let's look at the border
35:29 - so we have a grey border with a drop
35:32 - shadow
35:33 - my first thought was to put a border
35:35 - around both the text input and the ul
35:38 - that appears with the suggestions
35:40 - the main problem with this is that if we
35:42 - put a border and drop shadow on both
35:44 - elements they would overlap at the
35:47 - bottom of the text input and the top of
35:49 - the ul
35:50 - the simplest solution is just that the
35:52 - container div has a border and a drop
35:55 - shadow while the ul and text have none
35:58 - this way when just the text box is shown
36:00 - the border wraps that
36:04 - when the suggestion list is also shown
36:05 - it wraps both components
36:08 - so let's make those changes now
36:11 - the width of our container is already
36:13 - 100
36:14 - so let's add a new selector for the text
36:17 - input and give that a width of 100
36:20 - 2.
36:24 - we then add a
36:26 - gray border to our container
36:31 - and then we want to drop shadow on it
36:33 - too so we add some code from that now i
36:36 - just generated this with an online tool
36:39 - you can google css box shadow generator
36:42 - and you'll find a similar tool
36:45 - and we take off the border from the
36:47 - input
36:50 - so we're going to go into our app
36:51 - component now
36:54 - and we're going to wrap the text box
36:57 - in a div with the class name of app
37:00 - hyphen component
37:08 - then we go back to app.css
37:11 - and we do a selector for app hyphen
37:13 - component as a class
37:16 - and we're going to put some margin on
37:18 - the top of it because we just want a bit
37:19 - of space between the top of the browser
37:21 - and the component
37:23 - and then the margin the sides is going
37:25 - to be auto to center it and we give it a
37:28 - width of 600 pixels this is to constrain
37:31 - the size of our reusable component from
37:34 - outside of the component so
37:37 - once we finish that we'll save and have
37:39 - a look in the browser
37:42 - taking a look at this we see that the
37:44 - text in the list is centered we want it
37:47 - left aligned also we want to get rid of
37:49 - those bullet points let's do that now
37:53 - so i'm just going to give the entire div
37:56 - and also the input a consistent text
37:59 - style so they just look the same
38:04 - i'm now going to put in a new selector
38:07 - for the ul
38:11 - and with list style type set to 9 i get
38:13 - rid of the bullets
38:15 - and i align the text to the left
38:22 - if we have a look at our elements we can
38:25 - see the alignment is a bit off between
38:27 - the text input and the list and there's
38:29 - this funny thing going on with the right
38:31 - hand side of the text box
38:34 - um there's a couple of things going on
38:36 - here
38:37 - we need to use border box box sizing on
38:40 - it otherwise the text input can end up
38:43 - being more than 100 width of its parent
38:46 - both the text input and the list items
38:49 - should also have consistent padding
38:52 - finally there's also a small you
38:54 - probably can't see it but there is a
38:55 - small gap between the top of the ul and
38:57 - the bottom of the text input that throws
38:59 - things off just a little bit this is
39:01 - caused by the new line between the two
39:03 - in the markup this can be fixed by using
39:06 - the before pseudo selector
39:10 - first we'll take away all the margin and
39:12 - padding on the ul element we won't be
39:15 - needing that
39:19 - then we're going to add a consistent
39:22 - margin and padding to both the li and
39:25 - text input so we add a new selector of
39:27 - the li
39:28 - put the padding in there
39:30 - and then put the same padding on the
39:32 - text input
39:34 - and we need to also add to that
39:37 - box sizing and set it to border box for
39:40 - the text input so it doesn't get more
39:42 - than 100 in width
39:46 - finally we're going to add a pseudo
39:48 - selector for our ul
39:52 - this is the before sudo selector we're
39:54 - going to use
39:56 - and it just allows us to remove the
39:58 - white space before the ul
40:00 - so we're going to send the content to be
40:02 - an empty string
40:04 - i also want to remove this blue
40:06 - highlighting when the text box is in
40:08 - focus this is very simple to do we just
40:11 - add outline none to the text input
40:16 - things are looking really pretty good
40:17 - now
40:18 - we actually do want to border at the top
40:20 - of the ul though just to separate it
40:22 - from the text input we also want to make
40:25 - the list of items look clickable
40:28 - we can do this by adding a cursor style
40:31 - and some hover styling to the uis
40:35 - so we add a border to the top of the ul
40:37 - that's of course one pixel solid grey
40:40 - and we set cursor to pointer on the li
40:44 - so that the cursor has a little hand on
40:47 - hover so it looks like a link something
40:49 - we can click
40:50 - then we're going to add a new selector
40:53 - and we're going to use the hovo sudo
40:55 - selector on the li selector
40:58 - and then on hovered we're going to give
41:00 - all the allies a background just sort of
41:03 - a light gray background and an underline
41:05 - to emphasize this to the user just to
41:07 - emphasize that they're selectable
41:10 - so yeah that all looks really good
41:14 - i want some good data for our
41:16 - suggestions so i'll get a list of all
41:18 - the countries in the world
41:21 - i google for it
41:23 - and there's actually a text file for it
41:25 - on github which is perfect
41:28 - so i click view raw
41:30 - and i copy all of them
41:33 - we want the countries to be an array
41:35 - so i create a new module countries.js in
41:38 - src
41:41 - and we simply paste in the entire list
41:45 - and we're going to export it from the
41:46 - module as the default export
41:51 - i'm going to wrap it in backticks so it
41:53 - can be multi-line as opposed to say
41:55 - single or double quotes
41:57 - and make sure there's no space at the
41:58 - beginning or the end of the backticks
42:00 - and then i do a dot split on the new
42:03 - line character
42:04 - and this will make it an array one line
42:08 - or country in this case per item
42:12 - the module now exports an array of
42:15 - country names so if we go to our
42:17 - component we have an array called this
42:20 - dot items which contains the hard-coded
42:23 - items names in this case we need to
42:26 - transform this into a prop
42:28 - props in react are a way to get data
42:30 - into a component in order to make it
42:32 - configurable you pass props to a react
42:35 - element just like an html attribute
42:39 - so if we have a look at the text input
42:41 - down here
42:43 - we use two props on that one is value
42:45 - one is on change so this is just how you
42:48 - get props
42:49 - into a react element
42:52 - and you can see up here the props are
42:54 - passed to the constructor
42:56 - we then pass them to super and after
42:58 - that they can be accessed via an object
43:00 - this dot props from anywhere in the
43:02 - class
43:04 - so we remove this dot items from the
43:06 - constructor we don't need it anymore
43:08 - and we use this variable in the function
43:11 - on text change
43:13 - where we filtered these items to get the
43:15 - suggestions based on what the user typed
43:18 - so let's destructure this dot props to
43:21 - get a prop called items
43:24 - and then we use that in place of this
43:26 - dot items
43:32 - now we need to go to the app component
43:34 - where we actually used the text box and
43:37 - passed in the countries as a prop called
43:39 - items
43:41 - so first we need to import our countries
43:43 - from the countries module we created
43:49 - then we add items as a prop just like an
43:53 - attribute
43:54 - and give it the value of countries in
43:56 - curly braces
43:58 - so now the text box has our list of
44:00 - countries available
44:01 - but what happens if we wanted to add
44:03 - another text box with different items on
44:06 - the same page we simply add another
44:10 - autocomplete text tag
44:12 - this one will set the items to be an
44:15 - array of names we'll just hard code the
44:17 - array straight in the curly brackets
44:19 - straight into the prop items
44:29 - we now have two auto complete text boxes
44:32 - they're a bit squished together so let's
44:34 - just add a bit of space in here
44:43 - so now we've got two auto complete text
44:45 - boxes on one page each has its own
44:48 - internal state both has its own list of
44:51 - items so we've created a truly reusable
44:55 - component
44:56 - if you want to progress to building
44:58 - entire apps in react instead of just
45:00 - components see the link to my course
45:03 - learn react and redox from beginner to
45:05 - paid professional in the video
45:07 - description