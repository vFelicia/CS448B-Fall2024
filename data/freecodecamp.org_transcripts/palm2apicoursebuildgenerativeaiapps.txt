00:00 - Palm 2 is a powerful large language
00:02 - model from Google in this course you'll
00:04 - learn how to effectively use Palm 2 and
00:06 - its API to enhance your productivity and
00:09 - develop AI powered applications Ana Kubo
00:13 - teaches this course she is one of our
00:15 - most popular instructors so let's start
00:19 - learning hi everyone and welcome to this
00:22 - full course on Google's large language
00:23 - model Palm 2 my name is Anna Kuba and
00:26 - I'm a software developer as well as
00:27 - course creator here on free Camp as well
00:30 - on my own channel if you are new to the
00:33 - world of large language models this
00:34 - course is the perfect video for you we
00:37 - will be starting completely from scratch
00:39 - introducing you to this wonderful world
00:41 - that power some of the most powerful AI
00:43 - tools today such as Google's B for
00:46 - example by the end of this course you'll
00:49 - be able to confidently use the Palm 2
00:52 - API as well as hopefully gain some
00:54 - knowledge about the world of AI in
00:56 - general in fact here's a whole list of
00:59 - the things that we we will be covering
01:00 - in the next hour or so so we will first
01:03 - look at why use Palm 2 followed by what
01:06 - is AI and large language models in
01:08 - general we will then get set up look at
01:11 - tokenization AI hallucinations
01:13 - authentication the models that come with
01:16 - p 2 and finally we're going to build our
01:18 - own AI chatboard so that's at the end I
01:21 - hope you're excited what are we waiting
01:23 - for let's do it first off why use pal 2
01:27 - googus palom 2 is an advanced large l
01:29 - anguage model or llm designed to be more
01:33 - effective at a range of task than its
01:34 - predecessor P before we get to
01:37 - demystifying some of the words in that
01:39 - sentence such as llm let's actually
01:42 - understand why we would want to use
01:43 - something like Palm to in the first
01:45 - place if you are a developer here's some
01:48 - reasons you might think about using Palm
01:50 - 2 first up let's look at its
01:53 - multifunctionality Palm 2 is capable of
01:55 - various tasks including code generation
01:58 - this means you can use it for helping
01:59 - you code debug your code or explain code
02:03 - so imagine you have this component here
02:05 - written in JavaScript and suddenly the
02:07 - team decides they want to start using
02:08 - typescript you can literally ask
02:10 - Google's AI tool Bard built using Palm 2
02:13 - to convert the code for you into
02:16 - typescript another thing you can ask it
02:18 - to do is literally write the code for
02:20 - you from scratch Palm 2 in comparison to
02:23 - its predecessor Palm has been
02:25 - pre-trained on a broader range of data
02:27 - sources meaning it has better
02:28 - multilingual capabil ities and can
02:30 - handle diverse programming languages
02:33 - from popular ones like python to more
02:35 - specialized ones like foran however
02:38 - please do keep in mind that taking this
02:40 - code with a pinch assault is advised as
02:42 - some hallucinations or in other words
02:44 - guess workor could have been done and
02:47 - just like we did all of that with code
02:49 - you can also do various tasks with
02:51 - mathematical reasoning natural language
02:53 - generation question answering and
02:55 - translation heck with p 2 he even has
02:58 - been trained on data to make it better
03:00 - understanding nuances in human language
03:02 - such as idioms and riddles pretty sure
03:04 - it's good at sarcasm too Palm 2 just
03:07 - like Palm it predecessor also emphasizes
03:09 - safety in terms of responsible AI
03:11 - development Google has taken measures to
03:14 - ensure that Palm to is free from biases
03:17 - as much as possible and reduces harmful
03:20 - outputs it's done this by the removal of
03:23 - personally identifiable information
03:25 - filtering of duplicate data and
03:28 - Performing extensive evaluation s to
03:30 - measure potential harms and biases and
03:33 - finally Palm 2 also offers API access
03:36 - for developers developers can leverage
03:38 - the Palm 2's capabilities via the Palm
03:41 - API which we'll be using today making it
03:43 - easier to build applications requiring
03:45 - Advanced natural language processing
03:47 - capabilities this can be beneficial for
03:50 - Content generation chatbots
03:52 - summarization classification and more
03:55 - this is the API we'll be using to build
03:57 - out our project at the end in summary as
04:00 - a developer you can see pal 2 as a tool
04:02 - that offers a wide array of capabilities
04:05 - ranging from natural language processing
04:07 - to coding assistance I'm excited to use
04:09 - it via the API soon but first what is AI
04:14 - artificial intelligence is a simulation
04:16 - of human intelligence processes by
04:18 - machines I say simulation as artificial
04:21 - intelligence is not sentient at at least
04:24 - not yet anyways meaning it cannot think
04:26 - for itself as much as it may seem it
04:29 - does often and this is certainly the
04:31 - case with tools such as this one for
04:33 - example when we say AI we are simply
04:35 - referring to a term called machine
04:37 - learning machine learning works by using
04:40 - large amounts of training data that is
04:42 - then analyzed for correlations and
04:44 - patterns these patterns are then used to
04:47 - predict outcomes based on the training
04:49 - data provided so for example if I was to
04:52 - feed this training data basically
04:55 - summarizing what each paragraph is about
04:57 - so for example here we are feeding in
04:59 - data saying that a paragraph looks like
05:01 - this with this type of title should be
05:03 - categorized as international finance the
05:06 - second paragraph should be put in the
05:07 - category of earning reports and so on
05:10 - and with some code we should be able to
05:12 - train our AI model to correctly guess
05:15 - what future paragraphs are about and
05:17 - that's it of course that is a super
05:20 - basic example and we would need way more
05:22 - data than these five paragraphs right
05:24 - here but you get the idea if you want to
05:27 - build your own AI model and understand
05:29 - the con concepts of machine learning
05:30 - better as a total beginner please do
05:32 - check out my video on it on my channel
05:35 - code with ANUK kuo for now however let's
05:38 - not make our own model but use an
05:39 - existing model or large language model
05:42 - Palm 2 starting off with getting our API
05:45 - key in order to communicate with it
05:48 - first just like most apis the Palm 2 API
05:51 - uses API keys for authentication in this
05:55 - section I'm going to show you how to get
05:57 - your own API key when it comes to
05:59 - communicating with the API from the
06:01 - applications that we will be building
06:04 - remember make sure not to share or
06:06 - upload your API key anywhere public if
06:09 - you do someone might take it and use it
06:11 - for their own projects and use up all of
06:13 - your free tokens or rack up a huge
06:15 - credit card bill if you have a credit
06:16 - card attached this also includes
06:19 - exposing in any client side code by this
06:21 - I mean building an app without a backend
06:24 - and deploying onto the internet the code
06:27 - in this case will be visible simply by
06:28 - inspecting it like so someone will then
06:31 - be able to go and get it and take it
06:33 - from here for their own use to use this
06:36 - key safely request must be rooted
06:38 - through your own backend server where
06:40 - your API key can be securely loaded from
06:42 - an environment variable or Key
06:44 - Management Service okay so in order to
06:47 - get your API key make sure to visit this
06:50 - URL and then simply explore the API and
06:54 - then get your API key this is super
06:57 - simple all I'm going to do is click get
07:00 - my API key and agree to the terms of
07:03 - service and then simply create API key
07:06 - in new project so that's all you're
07:08 - going to do and here it is you can copy
07:11 - it and make sure to keep it somewhere
07:13 - safe as mentioned okay and then you can
07:17 - delete it if you don't want it anymore
07:19 - and create a new one as well that is
07:22 - totally up to you just make sure you
07:24 - have your API key ready for creating our
07:27 - projects but first let's have a look at
07:30 - the models available in Palm 2 next in
07:33 - Palm 2 we have many generative models we
07:36 - can use I'm going to take you through
07:38 - four of the more popular ones using the
07:40 - rest API please note there are many ways
07:43 - to interact with palm 2 including an SDK
07:46 - with no. JS as well as all these ways
07:49 - you can see here if you would like to
07:51 - play around with them please do so for
07:53 - the sake of making this tutorial as
07:55 - accessible to as many developers as
07:57 - possible I will stick to using the the
07:59 - rest API with a c command however so
08:03 - let's do it let's start with the
08:05 - generate text model first the generate
08:08 - text model generates a response from the
08:10 - model given an input message this means
08:13 - we can use it to ask pomp to a question
08:15 - to which you will return a response for
08:17 - example let's have a look at this step
08:20 - by step okay so we're going to write a
08:23 - call command we're going to go to a
08:26 - specific URL so let's get up our quote
08:31 - and I'm just going to paste it so it's
08:34 - htps generative language. googleapis.com
08:37 - we're going to use V1 beta 2 uh we're
08:40 - going to get the models and the models
08:42 - we're going to get it's going to be for
08:43 - text so we're going to use text bison
08:47 - one and then we're going to use the
08:49 - generate text model and we're going to
08:50 - put in our API key so just make sure to
08:53 - put in your API key we did get this in
08:56 - the last section so if you ski that
08:58 - please have a a look at how to get your
09:00 - own API key this is mine and this will
09:02 - be disabled soon okay and end quote next
09:06 - just make a space and now we're going to
09:08 - write our header and our header is going
09:11 - to say
09:12 - application Json for the content type
09:16 - once again this is a string so put it in
09:18 - these quote marks great make a space and
09:22 - next we're going to Define this as a
09:24 - post so I'm just going to put X post cuz
09:28 - it's a post request and as the data well
09:32 - I'm going to have an object I'm just
09:36 - going to paste it like so here is our
09:38 - object and as the prompt we have another
09:41 - object and it just going to be some text
09:43 - and this is essentially the text or the
09:46 - string we want to send over to the Palm
09:49 - to API in order to get a response so we
09:51 - wanted to write a story about a magic
09:53 - backpack okay and just hit enter and let
09:57 - it do its thing and and here we go so
10:03 - here we have it we received an object
10:05 - back and the output okay so this is an
10:08 - array and the output is a Story Once
10:11 - Upon a Time there's a young boy named
10:12 - Billy who love to go on adventures so
10:14 - this should be a story about a backpack
10:17 - we have some other stuff here we have
10:19 - safety rating as well we have a category
10:21 - and probability so I'm going to talk to
10:24 - you a little bit more about what else we
10:26 - going to send over with our request next
10:29 - with the generative text model as we saw
10:32 - we sent over a prompt this is an object
10:35 - as we saw so this right here this is an
10:38 - object that has text as an attribute and
10:42 - the text or string as a value okay so
10:46 - this is required however we have a bunch
10:49 - more things that we could to passed
10:51 - through with this which we did not these
10:53 - are safety settings stop sequences
10:57 - temperature and this controls the
10:59 - randomness of the output with zero being
11:02 - essentially less creative and values
11:05 - closer to one being more creative we
11:08 - also have a candidate count Max output
11:10 - tokens top p and top X I will not be
11:14 - using these in the tutorial okay this is
11:16 - a bit more advanced I'm just showing you
11:19 - a basic way in order to generate text
11:22 - however if you are interested in this
11:24 - please do pause here and make a note of
11:27 - these and have a read through them in
11:29 - your own time for now let's continue
11:32 - next up we have the generate message
11:34 - model this is us to have more of a
11:36 - conversation in which we feed in not
11:39 - just a string so just one question but a
11:42 - bunch of previous conversations that
11:44 - we've had with the llm okay so this just
11:47 - means that it can build on the previous
11:49 - conversation and build on the previous
11:51 - stuff that you told it I'm going to show
11:53 - you how to do this now so first off
11:57 - we're just going to write curl and then
12:00 - we're going to paste in the URL so once
12:04 - again let's make this a string and this
12:07 - time I'm just going to show you where
12:09 - this goes this goes to the generative
12:11 - language. googleapis.com V1 beta2 models
12:16 - chat this time bison instead of text and
12:19 - we're going to use the generate message
12:21 - model and we're just going to put in our
12:23 - API key so just like we did before okay
12:27 - great once again we need to put in the
12:30 - header this is going to be once again
12:32 - content type application Json so just
12:35 - like so as a string and then I'm going
12:38 - to Define this as a post request with
12:41 - the data and the data once again this is
12:44 - going to be an object it's going to have
12:47 - the property of prompt so just like so
12:51 - however this time it's going to take
12:52 - multiple messages so I've made an array
12:55 - in which we can put objects that will
12:58 - represent one one message so this one
13:01 - message essentially has the content of
13:04 - high that's going to be our first
13:06 - message and if I just go ahead and hit
13:09 - enter we get the response so this is
13:13 - what we sent over these are all our
13:15 - messages there's just one in there for
13:17 - now it says hi that's what we sent over
13:20 - and this is the response okay so the
13:23 - responses are going to be saved under
13:25 - candidates here's an array of them and
13:28 - the response essentially is high how can
13:30 - I help you today simple just like with a
13:34 - generate text model we can also have
13:37 - different parameters on this occasion we
13:40 - can have a temperature so again setting
13:43 - zero to be less random and one to be
13:46 - essentially more random or more creative
13:49 - we can also have a candid account and
13:51 - this can return multiple responses you
13:54 - can set the candid account to B1 for
13:57 - example and actually as a default it is
14:00 - one or you can choose a value between 1
14:02 - and8 we also have top p and top K which
14:06 - we will not be covering in this tutorial
14:08 - however if you want to have a look at
14:09 - them please pause here and read through
14:12 - this documentation now great let's
14:16 - continue so let's go ahead and add some
14:20 - more messages in here right so I'm going
14:23 - to just get that back up again and we're
14:25 - going to send this over to this year URL
14:29 - to generate message okay but we're going
14:31 - to pass through a bunch more messages so
14:35 - here is our first message right so it's
14:37 - the first object that has content High
14:40 - I'm just going to essentially put a
14:42 - comma right after it and paste it and
14:46 - this time as the content I'm going to
14:48 - put the string of remember my name is
14:51 - Anna and ask me a question so I'm
14:53 - sending over two messages now hi and
14:56 - remember my name is Anna and ask me a
14:58 - question
14:59 - and let's see what we get
15:01 - back and great so here are the messages
15:05 - we sent over that's the full array
15:07 - that's the first message of hi and this
15:09 - is the second one of remember my name is
15:12 - Anna and ask me a question and then the
15:15 - response is hi Anna it's nice to meet
15:18 - you how can I help
15:20 - today great now let's have a look at how
15:23 - many tokens this cost us next so as we
15:27 - are making a request it is us ful to
15:29 - know that this is costing us tokens each
15:32 - word is tokenized okay and it can be
15:34 - hard to figure out exactly how many
15:36 - tokens are being used we can essentially
15:39 - use a HTTP request to find out exactly
15:43 - how many tokens are use for a message as
15:46 - well as text however we're just going to
15:48 - look at the messages for now so I'm
15:50 - going to use the count message tokens
15:54 - model so let's go ahead and do it I'm
15:58 - just going to get get up my terminal
15:59 - once more and in fact I'm just going to
16:01 - bring up the last thing that we did so
16:04 - here we have curl and this is generate
16:07 - message as well as our API key and then
16:11 - as the header we have content ey
16:12 - application Jason this is a post request
16:16 - and as the data again we have the prompt
16:18 - with messages the array of two messages
16:22 - okay and all I'm going to do is just
16:24 - switch out the URL so all I'm going to
16:28 - do is change this right here generate
16:33 - message
16:34 - token to count
16:37 - message
16:39 - token just like so and it should
16:43 - calculate exactly how many tokens these
16:46 - messages cost me okay so just say enter
16:50 - and the token count is
16:52 - 27 great okay so we're now really done I
16:56 - just want to touch on one topic and that
16:59 - is touch on the topic of creating text
17:02 - embeddings now this is a super
17:05 - interesting and advanced topic and I
17:08 - really recommend you watch my video on
17:10 - Vector embeddings in order to fully
17:12 - understand this because I cannot fit
17:15 - this it's outside of the scope of this
17:17 - tutorial but essentially the Palm to API
17:19 - will also allow us to create text
17:21 - embeddings or in other words Vector
17:24 - representations of words for us to be
17:27 - able to search large databases for
17:29 - similar words okay so I'm quickly going
17:33 - to show you how to do this we're going
17:35 - to use the curl command and then we're
17:37 - going to use the embedding text model
17:41 - along with our API key so once again
17:44 - this is the URL we're going to embedding
17:48 - Gecko and then we're going to use the
17:49 - embed text model and we're going to put
17:51 - in our API key so this one is mine
17:54 - please use your own finish off that
17:57 - string then we're going to put the
17:59 - header as content type application Jason
18:03 - just like we have been doing and once
18:06 - again this is a post request and as the
18:08 - data this time I'm simply going to put
18:10 - an object and it's going to have the
18:12 - text that we want to create into a text
18:14 - embedding so this time is just the
18:17 - string of say something nice and I'm
18:20 - going to hit enter and taada it's an
18:24 - array so this array of numbers
18:26 - essentially repres
18:29 - presents the text of say something nice
18:32 - which means that we can now use this
18:34 - array in order to search for similar
18:37 - texts in a large language model so this
18:40 - is something that is super interesting
18:42 - please go ahead and watch this video
18:44 - after this if you have time otherwise
18:47 - let's continue with building out our
18:50 - Palm to chatbot so we've learned about
18:53 - the models necessary to do this we've
18:55 - also leared how to get our API key so
18:58 - really we're ready to
19:02 - go okay so let's create a project I'm
19:05 - going to start off using my code editor
19:07 - of choice which is webstorm I'm going to
19:10 - save it in a direct called webstorm
19:12 - projects and in webstorm I can actually
19:14 - choose to essentially get the command
19:17 - npx create react app in order to spin up
19:20 - an react application so again this is
19:24 - going to be stored on my computer and
19:26 - webstorm project I'm going to go ahead
19:28 - and call this palom to chatbot just like
19:32 - so okay and I'm going to click create so
19:37 - there we go that is now doing its thing
19:40 - it's Sally spinning up all the files we
19:42 - need in this directory so here's one
19:44 - file and more will get added for those
19:47 - of you who aren't using webstorm you can
19:51 - also choose a directory I'm going to
19:54 - once again go into webstor projects and
19:56 - then run the command MPX create react
19:58 - app followed by whatever you would want
20:01 - to call the project so for example like
20:04 - this and hit enter and then this
20:06 - directory with all the files will be
20:08 - created in the directory webstorm
20:10 - projects on your computer but I'm not
20:12 - going to do it this way as I'm doing it
20:14 - this way and we're just going to wait
20:16 - for that to do its
20:18 - thing and great so here we have the
20:21 - directory with all the files as you can
20:24 - see here this is looking wonderful I'm
20:27 - just going to minimize that so first off
20:29 - I'm just going to clean this up a little
20:31 - bit uh we're not going to be using this
20:33 - app CSS file as it's a small project so
20:35 - I'm just going to delete this file there
20:38 - we go delete anyway we're not going to
20:40 - be writing any tests so that can go as
20:43 - well no test for this project of course
20:45 - you can add yours if you want at the end
20:48 - and I'm going to delete these three too
20:50 - so the logo and anything to do with
20:52 - testing or reporting web vitals will go
20:56 - wonderful so now if we look in the index
20:58 - JS again I'm just going to delete
21:00 - everything we don't need so we can get
21:02 - rid of
21:02 - that as well as this import I'm also
21:05 - going to get rid of the semicolons as I
21:08 - don't want to use them in this project
21:10 - so that is what the index.js file will
21:13 - look like at the moment then we've got
21:15 - the index CSS and I just want to start
21:17 - fresh so I've deleted all of that and
21:20 - then we have the appjs file so once
21:22 - again I'm just going to delete the logo
21:25 - as we're not importing that anymore
21:27 - we're not importing the app CSS file I'm
21:29 - going to change this to a functional
21:30 - expression as that is my preference so
21:34 - just like so just going to minimize that
21:37 - and again we're just going to stop fresh
21:39 - so I'm going to delete the content of
21:41 - all of this and just return a single a
21:44 - div and delete the semicolons okay so
21:47 - you should have the appjs file that
21:49 - looks like this the index CSS file which
21:51 - is empty and the index JS file which
21:54 - looks like this great and you will see
21:57 - that's all in The Source directory now
22:00 - as this is going to need a backend I am
22:03 - going to create a backend for this
22:05 - project I'm going to do it on the same
22:07 - level as the read me and the package
22:08 - Json so just go ahead and add a new file
22:11 - this is going to be a Javascript file so
22:15 - let's go ahead and make that I'm going
22:17 - to call it index JS or you can call it
22:19 - server JS just to be more clear it is up
22:22 - to you great so we'll go to this in a
22:26 - bit I just want to build out the UI of
22:27 - the but first this shouldn't be too
22:30 - complicated like I said it's super basic
22:32 - so let's do it first off I'm going to
22:35 - create a wrapping div and I'm going to
22:37 - give this the class name of chatbot so
22:40 - we can pick it out in our
22:42 - CSS next I'm going to actually have
22:45 - another div this is going to well we can
22:49 - make it a I'm just going to give it the
22:51 - class
22:53 - name of chat header notice I'm not
22:57 - putting it in a header element this is
22:59 - because I don't want to it's not a
23:01 - technical header to the document now in
23:05 - here what I'm going to do is also create
23:08 - another nested div and this is just
23:10 - going to contain some information so
23:12 - let's give this the class name of
23:16 - info container so we can style it up and
23:20 - I'm going to include the H3 element with
23:24 - chat with so that's a heading as well as
23:27 - a
23:28 - bigger title so that's why I'm using H2
23:32 - and it's just going to say the Palm to B
23:38 - great so there we go under here so just
23:43 - under the info container I'm actually
23:45 - going to put an SVG but we'll come back
23:47 - to that and now that is it so that is
23:50 - our whole chat header under the chat
23:53 - header I'm going to make another div and
23:56 - this is actually going to be the feed so
23:58 - the feed of all the messages so let's go
24:01 - ahead and give this the class name I'm
24:02 - going to just do feed like so great and
24:06 - once in here I'm going to map messages
24:09 - I'm actually going to map onto two divs
24:11 - because we're going to have one div for
24:13 - the question bubble so let's give this
24:15 - the class name of question as this is
24:18 - going to be a question and this is also
24:20 - going to have the class name of bubble
24:21 - because I want both of these to
24:22 - essentially look like a bubble but be
24:24 - differentiated by the color so this is
24:27 - going to be for the question that we ask
24:29 - our chat Boot and this is going to be
24:31 - for the response Okay
24:35 - cool so that is our feed and under our
24:39 - feed we're going to have just a I think
24:42 - we should probably just have a text area
24:44 - Okay so this is essentially where we're
24:46 - going to ask the chatbot that question
24:49 - we're going to write it in and this is a
24:51 - self closing element uh and it's going
24:54 - to have a value which is going to be
24:57 - some text we're going to leave that
24:58 - blank for now and then and an onchange
25:01 - event because we want to essentially
25:02 - save the question to the state of this
25:06 - component so let's just comment that out
25:10 - for now and continue and finally I'm
25:13 - just going to have a button and this
25:14 - button is also going to have an onclick
25:17 - which is going to generate the response
25:19 - okay so essentially this is where all
25:21 - the Magic's going to happen we're going
25:22 - to write in some into our chatbot we're
25:24 - going to click on this button it's going
25:25 - to send it over to our server and
25:27 - essentially come back with the answer to
25:29 - our question from the Palm to
25:32 - API great on the button I'm also just
25:35 - going to use this text
25:38 - icon symbol okay it's this little arrow
25:41 - right here if you can't see it looks
25:42 - like
25:44 - that just make that a bit smaller and
25:47 - that's essentially a whole app at the
25:49 - moment if you want to find this text
25:51 - icon just go ahead and visit this URL
25:55 - right here in order to get get the same
25:58 - one and just copy it like so wonderful
26:02 - okay so now I think it's time to spin up
26:03 - our app so I'm just going to go ahead
26:07 - and spin this up by clicking this button
26:09 - right here and that should spin up our
26:11 - application so great I'm just going to
26:14 - comma this out for now in order to get
26:16 - this to work and wonderful there we go
26:20 - that's what we should see and I'm just
26:21 - going to go ahead and inspect this page
26:23 - in order to get up our console here so
26:26 - we can debug
26:28 - now for those of you not using webstorm
26:32 - I'm just going to stop this from running
26:34 - you can just go ahead and have a look at
26:37 - the package Json in order to spin this
26:39 - up we're just going to use this Command
26:41 - right here start this just means I'm
26:44 - just going to shut this down and get up
26:46 - our
26:47 - terminal that in here so just make sure
26:50 - that you're in the project you can do
26:53 - npm Run
26:56 - start and that will do the same thing it
26:59 - will essentially run the app and spin it
27:02 - up on Local Host 3000 you can do that
27:04 - there or you can do that on here too
27:06 - right so you can do CD and then whatever
27:08 - you saw the project CD pal to chatbot
27:13 - npm Run start and that will spin up the
27:16 - app so those three ways are all viable
27:19 - it's up to you whichever way you want to
27:21 - do it great so there we go we've spun up
27:26 - our app let's just get to styling up a
27:29 - little bit first I'm just going to
27:31 - minimize that for now so let's get up
27:34 - our index CSS files first off I'm just
27:37 - going to grab the whole body the whole
27:39 - body of the app and I'm going to start
27:41 - fresh by overriding the margin and
27:44 - padding to start off with zero and then
27:46 - I'm just going to change the background
27:48 - color of this app so background color
27:51 - and I pricked a color it's a kind of
27:55 - very light grayish 2 27
27:58 - 227
28:01 - 227 so that's what it should
28:04 - be and then I'm just going to make sure
28:08 - that the chatbot is aligned to a certain
28:12 - part of the browser so perhaps let's go
28:15 - ahead and actually start that chatbot
28:17 - first so let's grab the chatbot I'm
28:19 - literally looking for the element with
28:21 - the class name dot means class name of
28:23 - chatbot and I'm just going to give it a
28:26 - height of 500 pixels a width of 400
28:30 - pixels let's give it a background color
28:32 - as well background color and I'm just
28:35 - going to go with white so that is the
28:37 - RGB for
28:39 - white great while we are here I'm just
28:41 - going to also uh give it a border radius
28:44 - and what I'm going to do is make sure
28:46 - that the top left hand corner is rounded
28:49 - by 20 pixels top right hand corner is
28:51 - also but the two bottom ones are zero
28:54 - now I am going to give it a margin
28:58 - as
28:58 - well okay just to space it out a little
29:02 - bit you will see why so I'm going to go
29:04 - 20 pixels at the top 20 pixels on the
29:07 - right zero at the bottom and 20 pixels
29:10 - on the left and finally I'm also just
29:13 - going to give it a box Shadow okay to
29:14 - kind of make it pop up from the
29:16 - background so again I'm using rgba cuz
29:19 - this time I want to add a
29:21 - transparent uh I guess argument into
29:25 - here so I'm going to give it 0.16 for
29:28 - transparency and the color black and now
29:31 - I'm going to do zero pixels xaxis 10
29:35 - pixels ya AIS 36 pixels blur and zero
29:39 - spread so there we go and then we're
29:43 - going to do two box Shadows actually so
29:44 - rgba again this time it's going to be
29:47 - black but
29:51 - 0.06 is what I'm going to do for opacity
29:55 - and then essentially just have one pixel
29:58 - uh spread great so now if we look in
30:02 - here it looks kind of like this but we
30:04 - want to position this right I want to
30:05 - position it so it kind of moves with the
30:07 - browser and it's always here and for
30:10 - that I'm going to use display and then
30:13 - I'm going to initialize Flex box so
30:16 - flex and I'm going to justify
30:20 - content
30:22 - end okay so if we save that it's already
30:25 - here and I want to go to the bottom as
30:27 - as well you will see it's not exactly
30:29 - all the way here because we gave it a
30:30 - margin right we gave it a margin on all
30:33 - the three sides apart from the bottom so
30:35 - now let's move it to the bottom so and
30:37 - for this I actually need to assign a
30:39 - height to the body otherwise this will
30:41 - not work so I'm going 100% of the
30:43 - viewport height and I'm going to use
30:45 - align items end as well so now that will
30:50 - be here and no matter how much I move
30:53 - the brows and how big I make it it will
30:55 - always be there and amazing this is
30:59 - coming out well the other thing I want
31:02 - to do is to the whole body just add a
31:04 - font family so I'm going to actually use
31:07 - Ariel and then sand serif as a backup
31:11 - while we're here though I'm also going
31:12 - to add the H2 and H3 element in here for
31:16 - styling and I'm just going to apply a
31:18 - margin of five pixels to both okay just
31:21 - to space those out but also overwrite
31:25 - any pre-existing margin
31:28 - great let's move on the next thing I
31:31 - want to actually grab is the info
31:33 - container so essentially stuff that
31:35 - holds this so let's go ahead and do that
31:38 - I'm going to grab the info container
31:42 - just like so give it a height of 60
31:45 - pixels and a
31:48 - background of um I'm actually going to
31:50 - use a linear gradient for
31:53 - this so let's get the linear gradient
31:56 - method and I'm just going to pass
31:58 - through RGB so color into here I'm going
32:02 - to use 22 1
32:05 - 9741 and then RGB 6
32:11 - 12084 okay so at the moment it will look
32:14 - like this uh and then we're actually
32:16 - going to add an SVG here to the bottom
32:18 - but first off we need to essentially
32:21 - hide any overflow right because at the
32:23 - moment that box is overflowing what we
32:25 - set before in terms of the actual chat
32:30 - bot so I'm actually going to also on the
32:33 - chatbot do
32:37 - overflow hidden and that just means that
32:40 - any overflow is hidden
32:46 - wonderful uh let's also added padding to
32:49 - this so all the letters aren't so
32:53 - squashed up to the sides of the info
32:54 - container and I'm going to change the
32:56 - color of the text to be an off white so
32:58 - not exactly white and that is the color
33:01 - I'm going to choose so already is
33:03 - looking much better cool before we move
33:07 - on to the SVG or anything like that I'm
33:10 - just going to grab the text area as well
33:13 - so we've commented out the text area at
33:16 - the
33:17 - moment here it is so maybe let's in fact
33:21 - maybe let's put these back in but just
33:23 - get rid of these as that is why we are
33:26 - getting errors so here's our text area
33:29 - I'm just going to style it up so let's
33:31 - grab it this is super basic styling
33:34 - right this is a basic chat bot that you
33:36 - can take and you know make your own
33:39 - style it up and all that so position
33:42 - absolute I'm going to give it and it's
33:45 - going to be positioned to the chatbot
33:48 - which means this I'm going to need to
33:49 - give a position of relative to because
33:52 - we don't really want this to move but we
33:53 - do want this to move we want to be
33:55 - absolute based on where it is in the
33:57 - chatbot and this just means I can use
34:00 - bottom zero to place at the bottom zero
34:02 - of the chatbot element or its parent
34:05 - element and left zero so if we look in
34:08 - here it's going to be here bottom zero
34:10 - left zero right so that's where it would
34:12 - be and let's style it up a little bit
34:15 - further now I'm going to get rid of that
34:19 - border so I'm going to do border none
34:23 - and make sure the the width like I said
34:24 - is 100% width of the par
34:27 - which is the chatbot and the Box sizing
34:30 - I'm also going to give it border a box
34:32 - so there's no funky Behavior happening
34:34 - it's like inside the Box rather than
34:36 - over spilling and now I'm just going to
34:39 - give it some padic as well so 25 pixels
34:42 - on the top 70 pixels on the right
34:45 - because we're going to put a button
34:46 - there and 25 pixels on all the other
34:49 - sides so that's the pattering inside the
34:51 - text area one last thing I'm going to do
34:53 - is just add a border just to the top
34:55 - though I'm going to make it one pixel
34:56 - solid
34:57 - and a kind of
35:01 - off whitish color too so there we go
35:05 - that's looking good now I don't want the
35:08 - text area to be in Focus so to get rid
35:11 - of that this is easy you just grab the
35:13 - text area once more and when it's in
35:16 - Focus I just want the outline to be none
35:20 - so that will get rid of that if you are
35:22 - curious
35:24 - great now let's actually grab the Button
35:27 - as we're going to have to make it
35:29 - essentially go here so let's do
35:33 - it let's give it a height I'm going to
35:35 - give it a height of 40 pixels as well as
35:37 - a width of 40 pixels as I want it to be
35:39 - a circle which means that border radius
35:43 - uh I'm going to give it
35:44 - 50% uh the background color again let's
35:47 - pick this out I'm going to make it
35:50 - 62084 yes I did pick this out already
35:52 - it's a green and then the inside so the
35:55 - text inside which is the arrow is going
35:58 - to be
36:00 - 207 207 207 so kind of in line with the
36:05 - off-white we saw before again I need to
36:08 - position it so I'm going to go a
36:09 - position of
36:10 - absolute um and this time from the
36:12 - bottom of the chat B I'm going to place
36:15 - it 21 pixels and to the right I'm going
36:17 - to make it 21 pixels so that it should
36:20 - appear essentially here
36:23 - cool now let's also start the bubbles so
36:27 - we're going to grab anything there
36:29 - should be two in there with a class of
36:30 - bubble and each bubble of text that
36:33 - appears is going to be in a bubble that
36:35 - is width 250 pixels let's Pat it out 20
36:39 - pixels I'm going to get a margin from
36:42 - the top and bottom 10 pixels to space it
36:45 - out from any other Bubbles and 25 pixels
36:47 - from the left and right let's also round
36:49 - it off a little bit uh by 10 pixels so
36:52 - it's not so harsh it's not a rectangle
36:55 - and also give it a box shadow Shadow so
36:57 - this sticks out from the background I'm
37:00 - going to use rgba make it black and then
37:03 - for opacity I'm going to put
37:05 - 0.24 and then zero on the x axis three
37:09 - pixels on the Y AIS and 8 pixels blur in
37:13 - fact we don't really need that zero here
37:15 - either cuz the spread if you don't put
37:18 - anything is automatically
37:20 - zero great and then the color of the
37:23 - text in here it's not going to be black
37:24 - it's going to be an off black I don't
37:26 - want to be too harsh so that is the
37:28 - color that I'm going to choose so at the
37:30 - moment our two bubbles look like this
37:32 - but we want to give both of them a
37:34 - different color based on if it's a
37:36 - question or a response so let's pick out
37:38 - the
37:41 - question and the background color for
37:43 - this I'm actually going to make it
37:46 - 24 24
37:48 - 244 uh and then the response I'm going
37:51 - to maybe keep it white but what I will
37:55 - do is override the margin left and just
38:00 - make it 85 pixels okay so that it's
38:03 - going to look like that question
38:04 - response question response I mean we're
38:07 - pretty much done we just have the SV
38:09 - Gene last so I left this last so that
38:12 - you can just stick it in essentially
38:15 - what I did is went to
38:18 - SVG
38:21 - generator so this one right here by high
38:24 - and then I just made a wave so that's
38:27 - all I did essentially I'm going to start
38:29 - designing for free I've got the wave so
38:31 - that's essentially what it looks like
38:33 - and then I simply just kind of played
38:36 - around with it really so just play
38:38 - around with it yourself you can make it
38:40 - more or less of a
38:42 - wave it is up to you and then I just
38:47 - downloaded it so again do the same
38:50 - please obviously change the colors to be
38:53 - more in line with the colors that we
38:56 - have here so in other words you want
39:01 - the green here and then for it to go to
39:05 - White right so please do the same I've
39:09 - already done this and exported the SVG
39:12 - so that's what mine looks like you will
39:13 - see the fill here as well if you are
39:16 - struggling please feel free to take my
39:18 - code of course I'm not going to code
39:20 - this out because that path is just
39:22 - ridiculous so please do take this from
39:25 - the code that I've shared in the video
39:27 - description below or have a go at you
39:29 - know making this yourself here just like
39:31 - I told you so just make sure that the
39:33 - fill here is the same color green so
39:37 - let's have a look at what green this is
39:39 - is this
39:42 - one which is essentially this color code
39:45 - and the background I mean you can make
39:47 - it white or you can just hide it
39:49 - completely okay and then just download
39:51 - the SVG so wonderful of course you might
39:56 - need to flip this around so just make
39:58 - sure to do it by changing the direction
40:01 - as well okay let's move on I think we're
40:06 - now ready to actually get some of those
40:08 - messages coming through so let's do it
40:11 - so now on the server I'm just going to
40:13 - define a few things the first one is the
40:18 - port it's going to be Port 8,000 just
40:21 - going to make this bigger for you we're
40:23 - going to have con Express require
40:25 - Express cuz that's a package we're going
40:27 - to need for roting and then once we have
40:30 - this Okay so we've we're going to import
40:34 - the package express and we're going to
40:35 - save as the con Express and we're going
40:38 - to get Express and release all of its
40:40 - wonderfulness so that's us releasing it
40:42 - and save it under the const app okay so
40:45 - we can use it with all of its methods
40:46 - later on we're also going to need CES so
40:49 - that we can get rid of any pesky
40:51 - messages blocking us you know you see
40:53 - blocked by caes that will help us get
40:56 - around around that and we're also going
40:58 - to be working with variables secret
41:00 - variables and in order to do that we're
41:02 - going to also require another package is
41:04 - the EnV package uh and that is
41:09 - the code in order to be able to use it
41:12 - in this project okay also as I believe
41:16 - we are going to be using Json I'm just
41:18 - going to for safe measure use express
41:21 - Json here so we can pass it from the
41:23 - front end to the back end and then I'm
41:25 - just going to use cause as well so we
41:28 - can override and then I'm just going to
41:30 - use cause as well like I said so that
41:32 - essentially we can bypass when we are
41:34 - blocked by C great now let's go ahead
41:37 - and import those so I'm going do npmi
41:40 - and import Express C andv so just hit
41:44 - that right there and then in your
41:46 - package Json file you should see those
41:48 - popping up so there they are along with
41:52 - their versions so if you're watching
41:53 - this in the future and this doesn't work
41:55 - it could be the version you're using
41:57 - just revert back to this one right here
41:59 - so just changed it obviously I'm not
42:01 - going to and then do npmi again to
42:04 - reinstall those packages with those
42:06 - versions cool let's move on so now that
42:10 - we have those let's actually start up
42:13 - our back end first I'm just going to
42:15 - listen out to the port just to make sure
42:18 - that everything is working so app Listen
42:22 - port and then we're just going to do
42:26 - here console
42:29 - log listening on Port and then the port
42:32 - number so let's do it I need to get my
42:36 - package Json file up again and I'm going
42:38 - to write a script so I'm going to do
42:42 - start backend and then we're just going
42:45 - to do noden one we're going to listen
42:46 - out continuously so that's another
42:48 - package we need to install npmi noden
42:52 - one and this will continuously listen
42:54 - out for changes make sure to save this
42:57 - first NPA no Dem
43:00 - one maybe just cut that out first as
43:02 - it's causing errors and store
43:05 - that make sure that no Deon is there to
43:07 - listen out for constant changes and then
43:10 - just put that back in so no Deon I'm
43:12 - going to listen out to the file server
43:14 - JS so there we go okay making sure that
43:19 - is eight string while we're here I'm
43:23 - just going to change this script to
43:25 - start front end so it's more obvious and
43:28 - let's continue so now that we've done
43:31 - that let's start up our back end and
43:33 - this should start up on uh Port 8000 so
43:36 - I'm going do npm Run
43:39 - start backend this time I'm not going to
43:42 - restart the front end as it's already
43:44 - running so there we go so now if we go
43:48 - to I'm going to just shut these
43:51 - down Local Host 8000
43:56 - there we go and it should say listening
43:59 - on P 8,000 and it is so everything is
44:02 - looking good our front end is running
44:04 - and our back end is running so now we're
44:08 - going to have to use a few things here
44:11 - uh we're going to have the language
44:13 - model API key that we're going to get
44:15 - from the pal to portal so con
44:21 - language
44:23 - model API key
44:28 - and yes I am going to store this in a
44:30 - EnV file and the other thing we're going
44:33 - to need is the URL that we're going to
44:36 - essentially quot so first off to access
44:39 - anything in a EnV file let's go ahead
44:41 - and make it that EnV file. file. EnV we
44:45 - of course as I mentioned need this
44:48 - required. EnV in order to use process.
44:52 - EnV and then look in the EnV file for
44:55 - something that that corresponds so if I
44:58 - literally maybe just copy this and
45:00 - Define it in here this is where we're
45:03 - going to save it okay great so process.
45:08 - env. language model API key we're going
45:11 - to look in here for that and grab
45:13 - whatever we put here in order to
45:15 - populate this and save it as the con
45:17 - language model API key so that's one
45:21 - thing we're going to have to do we're
45:22 - also going to get the
45:24 - language model
45:27 - URL and this again we're going to get
45:29 - from the documentation so let's do it
45:34 - let's go to the paltu page and let's get
45:37 - that API
45:39 - key okay so there is my API key please
45:42 - do generate your own I'm going to
45:44 - disable this it won't work make sure to
45:46 - get your own and keep it safe great now
45:50 - for the language model URL so we're
45:53 - going to be using the model URL here I
45:56 - however as of recent Palm 2 has also got
45:59 - some methods that you can get from
46:02 - certain packages if you install them so
46:05 - just keep that in mind I'm just going to
46:06 - go super basic like I said this is a
46:08 - very basic tutorial and use the model
46:10 - URL so the model URL for this is
46:14 - https and then we're going to go with
46:18 - generative language Google apis Thank
46:21 - You tab 9 it's completed it for us I'm
46:24 - checking if it's right goi.com
46:27 - V1 it's actually V1 beta 1 and then
46:32 - maybe let's just delete this as that is
46:35 - not correct models and we're going to
46:38 - get the chat by
46:43 - son
46:45 - 01
46:47 - model generate message
46:51 - model and then we're just going to get
46:54 - the key which which is our API key and
46:57 - essentially pass it through so language
47:00 - model API key that is correct so that is
47:03 - the whole
47:04 - thing there we go I'm just making sure
47:07 - that it's correct again so models we're
47:09 - using the generate message model and
47:13 - there we go make sure that's in back
47:15 - ticks otherwise this code will not be
47:17 - picked up and we're telling our code
47:19 - editor that this is Code by since using
47:21 - the dollar sign and passing it through
47:23 - Kylie braces like so great so we've got
47:27 - our language model URL let's move on now
47:31 - we can write a request so what we're
47:34 - going to do is essentially send some
47:35 - text from the front end to our back end
47:39 - and then send it over to the pal to API
47:43 - so we can get a response right so we're
47:45 - going to ask a question and get a
47:46 - response so let's write our root we're
47:49 - going to use the get method for this and
47:51 - I'm going to say that if we go to Local
47:52 - Host 8,000 SL prompt slash and we're
47:58 - going to get the text from the URL so
48:00 - that is how you do it just zoomed in so
48:01 - you can see it a little bit better this
48:04 - is going to be an async method where we
48:05 - get the request and the response and
48:08 - then we're going to essentially get that
48:13 - text from you using request param text
48:16 - so we can Define it here yeah you can do
48:19 - it like this or you can do
48:23 - it like so it is up to to you so there's
48:27 - our text now let's define our payload
48:30 - pay load
48:33 - equals and this payload is actually
48:36 - taken from the documentation we're going
48:39 - to have to get the
48:41 - prompt and then Define the
48:43 - messages that are going through so we're
48:47 - going to pass through a whole array of
48:49 - them like I said each time we're just
48:52 - going to be sending through one message
48:53 - okay this is just one message that we're
48:55 - sending over and we're getting a
48:57 - response so let's send over that one
49:00 - message essentially an object and that
49:02 - object is going to have content and the
49:05 - content is literally going to be this
49:06 - text okay so that's what we're sending
49:09 - over to the API we can also set a
49:12 - temperature for this okay so here's our
49:15 - prompt object in fact maybe just to make
49:17 - it a little bit more readable I'm just
49:19 - going to make it all on one
49:24 - line
49:28 - like so so there's our prompt next we
49:32 - pass through the
49:34 - temperature I'm going to set it as
49:39 - 0.1 and the
49:42 - candidate count which is going to be a
49:44 - one as well now that we have that we can
49:47 - get the response so let's define the
49:50 - response this is going to use fetch
49:53 - which is an async method so we use use a
49:56 - wait and then we're going to pass
49:57 - through the URL that we're going to
49:59 - visit along with headers so let's set
50:03 - some
50:05 - headers we're going to do content type
50:08 - application Json and then as the body
50:12 - we're going to get the payload and just
50:14 - pass it through Json string ofi and this
50:16 - is going to be a post method so there we
50:20 - go so again what we're doing is we're
50:24 - sending this over so all of this with
50:29 - the text from the URL to pom 2 and
50:33 - essentially to this end point
50:35 - essentially right so it's going to this
50:36 - end point along with all of this stuff
50:39 - and then let's await that response so
50:41 - let's await the response let's get it
50:44 - Json but uhoh this is an async method so
50:48 - we use the await keyword and let's save
50:50 - it under data and once we have that data
50:53 - just going to send it back okay okay
50:57 - great so at the moment this will
51:00 - actually work uh I won't have to do much
51:03 - let's just console log this data at the
51:06 - moment too I can simply go SL prompt and
51:11 - then hello so this text of hello is the
51:15 - text po over into the URL right and
51:19 - there we go so once again the text was
51:21 - hello that's what we passed through to
51:23 - the back end and Center over to the Palm
51:26 - 2 API as you will see here so there's
51:29 - are messages there is just one message
51:32 - and this is the response that we are
51:35 - getting from Palm 2 hello how can I help
51:37 - you today so now let's display that here
51:41 - right so we got the question and the
51:43 - answer we've got the data let's display
51:45 - it we're also going to have to pass
51:47 - through this word from the front end so
51:50 - here rather than just typing it out like
51:52 - so so this should be relative L painless
51:56 - let's do it so let's go back to the app
51:59 - I'm going to have to import state so
52:04 - import use state from react we're not
52:08 - going to need use effect and next we're
52:11 - just going to save the state of the text
52:15 - so const text set text and new state is
52:19 - going to be an empty string to start off
52:21 - with and then we're also going to save
52:24 - the messages that come back so we're
52:26 - going to call it
52:28 - messages just to keep kind of in line
52:32 - with the messaging so
52:34 - far that has been used so
52:41 - messes set
52:43 - messages and this is going to be an
52:45 - empty array to start off with just like
52:47 - so so in order to get the response so
52:51 - cons get response this is going to be
52:55 - async method and when do we want to get
52:58 - the response well as soon as we click on
53:01 - this button so on click of this we're
53:03 - going to get the response and we're
53:06 - going to get the response by essentially
53:08 - using the value in the text area so here
53:14 - again I'm just going to make sure that
53:16 - the value is the text so currently that
53:19 - will be an empty string and then on
53:23 - change of anything in this text area I'm
53:28 - going to set the text so we're going to
53:30 - get the
53:32 - event and set text so we're essentially
53:35 - changing the state of text to be e
53:41 - Target
53:44 - value okay just in case you do not
53:47 - believe me that we are changing this I'm
53:52 - just going to console log it out console
53:55 - log text so you can see
53:59 - it so in the console log here now if I
54:03 - right hello that is text Cu we're conso
54:07 - logging out the con text and it's
54:09 - constantly changing so now that we have
54:12 - the text let's send it over to the back
54:15 - end so that we can get the response so
54:19 - I'm going to define the response I'm
54:21 - going to use await Fetch and we're going
54:23 - to pass through literally the back end
54:26 - so Local Host 8,000 make sure that says
54:29 - 8,000 use back ticks here as we're going
54:31 - to essentially write the end point which
54:36 - is this okay so you can just paste it
54:40 - like so I'm going to replace this with
54:42 - code so once again we get the dollar
54:43 - sign the curly braces and we're just
54:46 - going to use text so that is now the
54:48 - equivalent of us essentially writing
54:50 - this out
54:52 - essentially maybe let's get rid of that
54:55 - and what do we do with the response well
54:58 - we're going to grab the
55:00 - response get it Json like so let's await
55:05 - this as well and save this as data and
55:09 - then once we have the data we're
55:11 - actually going to set the messages right
55:13 - here so we're going to set messages and
55:15 - then we're going to essentially open up
55:17 - an array and whatever messages already
55:21 - exist okay so at the moment Nono we're
55:24 - going going to get those and then append
55:28 - a new object so we're going to make a
55:30 - new
55:31 - object just going to put it down here so
55:33 - maybe it's a little bit more readable
55:35 - for you and our objects are going to
55:38 - look like this well we're just going to
55:39 - have the author and we're going to get
55:41 - that data that comes back to us so we
55:44 - know what this looks like we saw it
55:45 - before go into the messages we're going
55:48 - to go into the first as it's always
55:50 - really going to be one message and we're
55:52 - going to get it content okay because we
55:55 - saw it before we had the messages
55:57 - content which is the messages that we
55:59 - sent over and then we also have data
56:05 - candidates content and that was what the
56:08 - API sent back to us and we'll save this
56:11 - under bot so we've constructed this
56:13 - object okay we've just made it up
56:15 - because this is what we're going to use
56:17 - in order to map onto our divs okay cool
56:25 - so let's try this out I'm also going to
56:27 - console log messages here so we can see
56:31 - what's going on and I'm also actually
56:33 - going to console log the data here just
56:35 - so again it's just really obvious what
56:37 - is going
56:38 - on so
56:42 - data messages and let's try this out so
56:47 - once again let's just stop Fresh So
56:50 - messages and States currently nothing
56:53 - however if I write hello okay still
56:55 - nothing this is our text and I send this
56:59 - over suddenly this is the data that
57:02 - comes back right like I said this is
57:04 - what it looks like we've got candidates
57:07 - and we've got an array at the moment it
57:09 - just has one item in there and it's
57:11 - essentially the response from the API
57:14 - hello hi can I help you and then we also
57:16 - have messages in here and this is the
57:17 - message that we sent over author that's
57:19 - us and the content hello okay cool and
57:23 - then once we get that dat to back I'm
57:25 - essentially using it to create our own
57:27 - object so this is the object that we
57:28 - created I've just got author and Bot and
57:31 - we've just taken the content from both
57:33 - of these and stuck it in our own object
57:35 - so we just stuck in a message in here
57:38 - and I'm going to map the content of this
57:40 - object onto these two so this is easy
57:43 - I'm just going to go down here let's
57:45 - comma this out for
57:47 - now I'm going to grab the messages and
57:51 - if they exist I'm going to map each m
57:54 - message we're going to have an index as
57:57 - well we're going to map it fact we don't
58:00 - need that on to all of this so just like
58:05 - so let's uncommon this out just like
58:08 - that so I'm just going to delete this
58:10 - and wrap this in something so let's make
58:13 - a new div this is actually going to hold
58:15 - our key as well so there we go just C
58:20 - cut that paste it in here and then for
58:22 - this I'm going to have a key and is just
58:25 - going to be the
58:27 - index great so now onto here as the text
58:31 - I'm going to go into the message and get
58:33 - the author so once again this is just
58:36 - from the object that we made we're going
58:37 - into the object getting author and then
58:39 - we need to do the same for bot so
58:41 - perhaps I'll just copy this and then
58:44 - write bot so if we save that we will be
58:48 - able to see it and if I write something
58:51 - else let's write how are
58:55 - you and send that
58:58 - over you will see now there are two
59:01 - messages in here however if you look in
59:03 - data okay it's still just the
59:11 - one message that comes back because
59:13 - we're not sending over all of that data
59:16 - to the API okay we're just sending over
59:19 - the text so essentially this text right
59:22 - here just keep that in mind as each
59:25 - question will be unrelated to another
59:27 - okay if you want to of course expand on
59:30 - this you're more than welcome to I'm
59:32 - just pointing that out that you know
59:34 - when you're having conversation it won't
59:36 - build on its previous knowledge it will
59:38 - treat each question as an individual
59:40 - question unrelated to the previous great
59:44 - so we're seeing all of that one last
59:47 - thing however because if you look in the
59:50 - feed uh we need to be able to scroll so
59:53 - let's go back to our CSS
59:55 - s so maybe let's grab the whole feed
59:59 - just like that I'm going to do position
60:04 - absolute bottom 82 pixels to kind of
60:09 - space it up on the bottom left
60:11 - positioning zero width I want it to be
60:13 - 100% of the parent and height I'm going
60:16 - to constrain it to be 250 pixels so we
60:18 - can scroll through it so I'm going to do
60:20 - overflow on the Y AIS scroll okay okay
60:25 - so now we should be able to scroll and
60:28 - this is looking great another thing we
60:31 - can do is if we are you know seeing some
60:35 - dodgy Behavior here maybe we need to
60:38 - also position the X AIS so it's always
60:40 - in
60:41 - front I'm just going to grab the
60:46 - header so the chat header right
60:50 - here and do
60:52 - position relative
60:55 - Z index
60:59 - one okay and that is now much better
61:03 - great so hopefully that makes sense I
61:06 - hope you found this useful and I hope
61:09 - that you can share your chat Bots with
61:11 - me please take them build them maybe use
61:14 - different models start them up I'd love
61:16 - to see what you have made please tag me
61:18 - on socials on Twitter and yeah I hope to
61:22 - see you again on another tutorial soon
61:24 - yeah