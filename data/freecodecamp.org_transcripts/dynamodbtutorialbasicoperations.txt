00:00 - hello world in today's video i will show
00:02 - you how to perform basic operations on
00:05 - dynamodb tables
00:07 - meaning saving getting updating and
00:10 - deleting items on the table we are going
00:12 - to perform basic operations in dynamodb
00:15 - tables from lambda using the aws sdk
00:20 - so i will not get into
00:22 - how is dynamo works on what is dynamo
00:26 - but i will just go straight into the
00:28 - code and show you how you can get this
00:30 - done as always building everything as
00:32 - infrastructure as code from the
00:34 - serverless framework so let's go to the
00:37 - code so let's get started as always
00:39 - making a new
00:41 - directory and getting into the directory
00:44 - we are calling this serverless dynamo
00:47 - basic operations and we get into the
00:50 - directory then we just initialize the
00:53 - npm package npn init yes and then we
00:56 - initialize the serverless project so
00:58 - let's create minus t
01:00 - aws that's node.js dash n and then we
01:04 - put the name of the project so that we
01:06 - don't need to change it in the
01:07 - serverless yammer it's changed for us
01:09 - now we open atom
01:11 - and we are going to do some
01:13 - modifications and then we are going to
01:15 - create our dynamo table so the first
01:18 - modification we already have the name in
01:20 - place i'm going to remove a lot of
01:22 - comments start distracting
01:24 - then i add in my profile because i have
01:26 - many and i will just use my default
01:27 - profile and i will pick the region that
01:30 - is ireland but you can pick any region
01:32 - you like my default is
01:34 - north virginia
01:36 - then we are going down
01:39 - in the serverless yml and we are just
01:41 - going to define the database using
01:43 - cloudformation i have done this many
01:46 - times and
01:47 - basically we are defining a table and we
01:50 - are using environmental variables if you
01:52 - want to know more about environmental
01:54 - variables leave me a comment below and i
01:56 - can make a video out of it but for now
01:59 - we're just using environmental variables
02:01 - and i'm creating them in the serverless
02:03 - ml so we can access them from the
02:06 - code and from the serverless yml so i
02:08 - create a custom variable and then i
02:11 - added
02:12 - i had my environments property in the
02:14 - provider
02:15 - i referred to these
02:17 - custom settings
02:19 - that we just created
02:21 - then the next step is to define
02:22 - permissions for this table and we are
02:25 - going to
02:26 - define the permissions where the i am
02:28 - role comment is and we are replacing it
02:30 - and we are defining for get to put
02:32 - update and delete items in this table so
02:35 - the lambda can do that after that we are
02:37 - going to create some new functions so
02:40 - i'm going to create one function for
02:43 - each
02:44 - of the things we want to do you can have
02:46 - everything in one one function or you
02:48 - can have separate functions if you want
02:49 - to know
02:50 - more about this you can go and check my
02:52 - video on patterns
02:55 - but for now i will make it easy and i
02:57 - will make one function pair
02:59 - operation one function for save one
03:01 - function for get one function for delete
03:04 - and one function
03:06 - for
03:07 - update i leave you card for the pattern
03:09 - video after we have the four functions
03:11 - i'm just going to save this file and go
03:14 - into the
03:15 - huddler
03:17 - and then here i'm going just to clean up
03:19 - a bit we are going to create a function
03:22 - that will be generating our response
03:24 - because we are just returning always a
03:27 - status code and a body so why to repeat
03:30 - that everywhere and then i'm going to
03:32 - create a new file
03:33 - that will be the database manager will i
03:35 - will be performing all the operations
03:38 - using the aws sdk
03:40 - i create that file i go into and i will
03:43 - start defining all the functions and
03:45 - here is the beef of this video first
03:47 - thing we want to do is to require the
03:49 - aws sdk and the module
03:52 - document client
03:54 - then i will define the table name the
03:56 - constant in this module and that's
03:59 - referring to the variable we have
04:01 - defined in the serverless yml again
04:03 - environmental variables if you want to
04:04 - know more just leave a comment below i
04:07 - can make a video about this
04:09 - and then i create the save function
04:12 - the get function
04:14 - the
04:15 - delete function and the update function
04:18 - and you will see that in each of these
04:20 - there is more or less the same structure
04:24 - there is a
04:25 - parameters variable where we will define
04:29 - different things in all the cases we
04:31 - have the table name because we need to
04:32 - know in which table we are applying in
04:34 - the case of say we have the item
04:37 - that is the one that we just want to
04:39 - save the whole item and the table name
04:42 - in the case of get and delete we have
04:44 - the table name and also we have the item
04:47 - id
04:48 - that is the reference to this item we
04:50 - want either to get or to delete
04:53 - and in the case of update the parameters
04:55 - will be more complex
04:56 - this parameters will be sent to the aws
04:59 - sdk to the
05:00 - dynamo module either we have dynamo dot
05:04 - boot dynamo dot get dynamod dot delete
05:07 - dynamo dot update and they will all take
05:09 - the parameters i'm always permissifying
05:11 - these calls so this is a promise so i'm
05:15 - doing that promise after all of these
05:17 - calls for the update let's stop for a
05:19 - moment and analyze the whole thing
05:21 - because i think it's the most complex of
05:23 - all of them so the update it takes three
05:25 - parameters the item id
05:27 - aparament parameters name parameters
05:30 - value and then it returns the new
05:33 - modify item so the parameters that we
05:35 - need to construct this variable called
05:37 - parameters the table name as in our
05:40 - cases the key that is the item id
05:43 - and then it will take a set of other
05:45 - things first it will take a condition
05:46 - expression this is not necessary but i
05:49 - like to add it in the case so if the
05:52 - attribute exists with this item id we
05:54 - can continue if not it will throw an
05:55 - error the update expression and here we
05:58 - define
05:59 - what is the parameters that we want to
06:01 - change what is the attribute in the
06:02 - table we want to change
06:04 - in this case it's a flexible one it's
06:06 - dynamic so we pass that in the method
06:09 - and i will put set params name that will
06:11 - be whatever we decide to pass
06:14 - in this method and it will be setting it
06:16 - to some
06:18 - value the value is also dynamic and you
06:21 - can find it in the expression attribute
06:23 - values that we define the dynamic value
06:26 - and then we have the return values that
06:28 - we want to return all the new you can
06:30 - change this for for other options either
06:32 - the old and all new and old as well you
06:35 - can check the documentation for the aws
06:38 - sdk i will link it in the in the comment
06:41 - box below for you to check and then
06:42 - after we have these four operations so
06:44 - we can go back to our handler
06:47 - and do the calls that we want to do from
06:49 - these operations so we are going to
06:51 - create our four
06:53 - methods
06:55 - that are going to handle these
06:57 - functions first we want to generate
07:00 - the
07:01 - item id
07:02 - so for that we need to use this library
07:05 - called
07:06 - id so we just install it in our
07:08 - dependencies
07:10 - and
07:11 - then we can use it i will use that in
07:13 - the save so we have a dynamic item id
07:17 - whenever we save because in dynamo
07:20 - items needs to be identified with a
07:22 - unique id so we should not uh have
07:25 - duplicates so now i have the save item
07:27 - and i will just fetch the item
07:31 - body that will be passed in the
07:34 - api gateway body in the request body and
07:37 - then i'm attaching to that item that we
07:40 - get from the body the item id that we
07:43 - are generating with this library
07:45 - and then i'm passing that item to
07:47 - database manager that save item and i'm
07:50 - returning in the callback the response
07:53 - with this item id we just created
07:57 - and the 200
07:58 - for the gate item is similar we are
08:00 - getting the item id for the path
08:03 - parameters
08:04 - and then we are passing that item id to
08:06 - database manager
08:08 - to the get item
08:10 - and this item that we get i'm returning
08:13 - it in the response
08:15 - to the api gateway
08:18 - so the client can see it for delete we
08:21 - have a similar one
08:23 - we are getting the item id from the path
08:25 - parameters but we are just returning the
08:27 - item was deleted because the response in
08:30 - this case will be empty if everything
08:33 - goes fine
08:34 - here we are not handling errors so
08:36 - in the case that the item is not fine we
08:39 - are just not doing a catch so that's
08:41 - something you need to handle in your
08:42 - case for example if you get an item that
08:45 - doesn't exist it will return you an
08:48 - empty response
08:49 - because we are not handling the errors
08:52 - so remember that these are only for the
08:55 - happy path but this is an example for
08:58 - you to see and for the update it's a
09:00 - little bit more complex we are getting
09:02 - the item id from the path parameters and
09:06 - then the program name and the param
09:07 - value from the body because this will be
09:10 - a put so we will have a body and then we
09:13 - are passing those three things to our
09:15 - update item that will return
09:17 - the new item updated and we will pass
09:21 - that back to our response and that's all
09:24 - the code we need now we can go and
09:26 - deploy and after is deploy we can test
09:29 - it in postman so i will speed this up
09:32 - for you so we go to testing so when this
09:35 - is deployed we get our four endpoints
09:38 - that are more or less the same they just
09:40 - have different methods and then we can
09:42 - take them to postman and start playing
09:44 - with them so we put our first one that
09:46 - is the post and we create a body that is
09:50 - very flexible because we have not
09:52 - defined anything
09:54 - so we just pass whatever we want i just
09:57 - pass
09:58 - a name for example and then we can pass
10:00 - some attribute one attribute two and
10:04 - things like that
10:06 - this is an example so it's not important
10:08 - what is in the in the item just imagine
10:11 - that you have something that makes sense
10:12 - for you
10:14 - and then after we have this body we can
10:16 - just send it and we will get an id back
10:19 - this id we can use in the get
10:23 - so we can now run the get that is the
10:25 - same url but it has just a path
10:28 - parameter at the end that is this id
10:31 - that we just got so i modify the call
10:34 - and i send it and then we get the item
10:36 - back with the id and all the attributes
10:38 - we can update this item and we are going
10:40 - to change some
10:42 - attribute for example attribute one we
10:45 - are going to change and we are
10:49 - passing a new
10:50 - value for that attribute and then we
10:52 - send it and then we will see that the
10:54 - response now has this attribute one to
10:57 - be attribute one
10:59 - underscore new so that change
11:01 - if we do a get again of this
11:04 - we'll get exactly the same because this
11:05 - was saved in the database now we can do
11:08 - delete if we just delete then
11:11 - the item was deleted and then if we do a
11:13 - get we are going to get an empty
11:15 - response because this is returning from
11:18 - the database an error and we are not
11:20 - handling errors so the code as always is
11:22 - available in github for you to take a
11:24 - look
11:25 - that was the video for today i hope you
11:27 - like it if you did give a big thumbs up
11:29 - if you have any questions comments
11:31 - requests
11:32 - you can always leave it in the comment
11:34 - box below