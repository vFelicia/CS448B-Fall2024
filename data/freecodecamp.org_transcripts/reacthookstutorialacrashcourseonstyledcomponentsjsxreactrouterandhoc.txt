00:01 - hello i'm excited to show you this
00:04 - course where we're going to use the
00:06 - react hooks to create a video player i'm
00:08 - thomas webenfalk and i will be your
00:10 - guide in this course
00:12 - so what are we going to build here we're
00:14 - going to build this video player it's
00:16 - fully responsive and we're going to
00:18 - create this list of videos where we can
00:21 - select the video and also
00:23 - i made this kind of night mode here if
00:26 - you want to shift the color for a light
00:28 - theme to a dark theme and we're going to
00:31 - use style components for all the css
00:34 - styling here and i'm going to show you
00:36 - how you can use different theming and
00:38 - stuff like that so i'm really excited
00:40 - for you to see this because i love these
00:42 - new hooks and i also think style
00:44 - components is great if we go to the
00:47 - react site we can read a little bit of
00:49 - hooks here at the time of the recording
00:51 - of this
00:52 - course they're fairly new so they're not
00:54 - in the official release yet so we have
00:56 - to use this alpha build of react to have
00:58 - access to the hooks
01:00 - but that's okay we'll go through that in
01:02 - a bit we're going to install this so
01:04 - don't worry about it
01:06 - so we're going to use the state hook and
01:08 - the effect hook there's a lot more hooks
01:10 - and you can read about them here at the
01:12 - site you can also create your own hooks
01:14 - i think the effect hook and the state
01:16 - hook are the ones you're going to use in
01:18 - 95 of the cases when you code so
01:22 - they're the most important and they will
01:24 - kind of replace the state in the class
01:28 - component and the life cycle methods so
01:31 - with this ones we can have state and
01:34 - kind of life cycle methods in our
01:35 - functional components there's no need to
01:37 - use class components and that's great
01:40 - they also say that it's great because if
01:43 - you're kind of new to react you don't
01:45 - have to learn all about classes and
01:47 - things like that you can do your stuff
01:49 - with just functional components
01:52 - so it should have a less learning curve
01:54 - as you don't have to go that deep into
01:57 - javascript classes
01:59 - well with that said let's go through
02:01 - what we're going to need to create this
02:04 - application we are going to use a
02:06 - library called react player it will give
02:08 - us some nice functionality like
02:11 - callbacks when playing the video and
02:13 - callbacks when the video has played and
02:15 - things like that we could do everything
02:18 - ourselves in an iframe but there's a lot
02:20 - more coding so it's better to use this
02:22 - library and we have all this for free so
02:25 - why create it from scratch when you
02:27 - don't need to
02:29 - we're also going to use as i said the
02:30 - style components and the style
02:33 - components is really great because it's
02:35 - almost like creating regular components
02:37 - in react but you create like css
02:40 - components we'll get to that when we get
02:41 - there i'll show you that in a later
02:43 - video and we're also going to use the
02:46 - react router for routing our videos
02:48 - because if you look up here you can see
02:51 - we have a unique id for each video so if
02:55 - we click another one we have another id
02:57 - and we use routing for that in that way
03:00 - we can just copy this link and paste it
03:02 - somewhere and we'll get directly to that
03:04 - video so it's great if you want to share
03:06 - a link or something like that
03:09 - that's why we're using react router you
03:11 - could do this player without the router
03:13 - and just change the video here and it
03:15 - will still be at the main domain here
03:17 - and not change the route and of course
03:20 - you can style this whatever you want
03:22 - later maybe there is some few things
03:24 - that could be better here with the
03:26 - styling and yeah you decide what taste
03:29 - you have and what you want to do with
03:30 - that later
03:32 - let's get on with the installing of our
03:34 - dependencies we need for this if we go
03:36 - back to our
03:38 - terminal we do a cd and we have to go
03:42 - into our starter files directory so make
03:45 - sure you download the starter files and
03:47 - it's the folder that's called react
03:49 - hooks video player start at the end
03:52 - so cd
03:53 - into that
03:54 - folder it's really important that you're
03:57 - in this folder you can rename it if you
04:00 - want it doesn't matter but do it now
04:02 - before you start doing anything and make
04:04 - sure you're in that folder and then we
04:07 - just do an npm install
04:13 - as this is an intermediate course i
04:15 - assume you know how to use the terminal
04:17 - and mpm and all this stuff so
04:19 - if you don't you probably should take a
04:22 - starter course before taking this course
04:25 - i actually have a starter course where
04:27 - we create a movie application so you can
04:29 - enroll that course if you want to learn
04:31 - the react stuff the basic stuff before
04:34 - you do this one
04:36 - well my fan just went crazy here on the
04:38 - computer i hope it doesn't bother you
04:40 - too much so you can hear what i'm saying
04:42 - well let's get on with it we have to
04:44 - install our react player so we write npm
04:47 - install
04:48 - minus s react
04:51 - oops player
04:55 - then we need to install our react router
04:57 - and we do that by mpm install minus s
05:00 - react
05:02 - router
05:03 - dom
05:08 - and lastly we need our stun components
05:10 - so npm install minus s
05:14 - style components
05:17 - like so and press enter
05:20 - and that should be it we should be good
05:21 - to go we just take a quick look at the
05:24 - package.json file in the folder
05:27 - as i told you before we're using the
05:30 - 16.7 alpha version so that's what i want
05:32 - to show you know it's really important
05:34 - to use this version of react otherwise
05:36 - the hooks won't be there
05:39 - and as you can see our dependencies has
05:41 - been installed here also
05:44 - so we should be able to just write npm
05:47 - start
05:49 - and this should fire up our application
05:52 - here at localhost 3000
05:56 - it should open up automatically but if
05:58 - you don't so go to this address here
06:01 - and it says start here as we see this
06:03 - here we know that our app is working so
06:06 - we can start building things so we can
06:08 - also just take a quick look at the
06:10 - folder structure for our project so we
06:13 - have as usual we have a public folder
06:16 - where our index.html file is i've only
06:20 - imported a frontier from google that
06:23 - we're going to use for this one
06:25 - and i've also created this kind of input
06:28 - hidden input field where this is a
06:30 - little trick you're going to use to get
06:32 - access to the videos in the player we
06:34 - will get back to this when we'll get
06:36 - there i'll show you this trick later on
06:39 - and we also have the source folder there
06:41 - we have our index.js file and we have
06:45 - our components folder i've created these
06:47 - ones for you so they are empty now and
06:49 - we're going to fill these ones up with
06:51 - code we also have a folder called hook
06:54 - we're going to create a high order
06:55 - component i'm going to show you how to
06:57 - use that
06:59 - and we have a containers folder with our
07:02 - app and this one is just the start here
07:04 - that we see i created this one so it
07:07 - just started up something here and the
07:09 - playlist stamp is empty the playlist
07:12 - items is empty and this one is the main
07:15 - component for the app where most of our
07:17 - logic will go
07:18 - and i also supplied the styles for you
07:20 - here because i think this is a react
07:22 - course and not the css course it's kind
07:24 - of boring seeing me creating i'm writing
07:27 - css a long time here so we're going to
07:30 - create maybe one or two of these when we
07:32 - go through the style components
07:35 - and the other ones i'll give you for
07:37 - free so you don't have to do that by
07:39 - yourself
07:40 - so i think this is it we're good to go
07:43 - we have our local host up and running
07:45 - here and we can start scaffolding out
07:48 - our application in the next video
07:51 - all right we're going to start
07:53 - scaffolding out our components and the
07:56 - the structure of this application so
07:58 - we're going to create a lot of
07:59 - functional components here and we just
08:01 - create some basic stuff in there now so
08:03 - we're going to come back to all of them
08:05 - and finish them later on
08:07 - so we can start with the wbn player.js
08:10 - wbn is short for weben they call me
08:13 - vegan because my name is bayman falk so
08:16 - this is my player i'm doing so i
08:18 - selected to call it wbn player you can
08:20 - change the name if you don't like it i
08:22 - don't care so do whatever you want
08:25 - so we're just going to create regular
08:27 - components regular functional components
08:29 - so we import react
08:31 - from react
08:33 - and in this one we're also going to need
08:35 - a video and a playlist because the video
08:37 - is the kind of window where we play the
08:39 - video and the playlist is the playlist
08:41 - to the right in the application if we
08:44 - look at it here
08:45 - where do i have it
08:47 - no i have it there
08:49 - yeah so this is the playlist and here
08:51 - we're going to have a night mode
08:52 - component we're going to have a header
08:54 - component and this one is also container
08:58 - it's the playlist items container and
09:00 - this is each a playlist component of
09:03 - these ones here and this is the video
09:05 - component we are using here let's go
09:08 - back to our application
09:10 - so we import
09:12 - video from
09:14 - dot dot forward slash video and of
09:16 - course we haven't created these ones yet
09:18 - so it will give us an error if we save
09:20 - and try to run our application right now
09:22 - so bear with me we'll fix this in a
09:24 - second
09:26 - and we import the playlist
09:28 - from and this one is going to be dot dot
09:31 - forward slash containers
09:34 - and playlist
09:37 - because this one is a container and the
09:39 - other ones are just presentational
09:41 - components and they go outside the
09:43 - containers folder
09:46 - then we create the const wb and player
09:51 - props
09:53 - on our function like this and also make
09:56 - sure you have the casing right on
09:58 - everything we do in this course because
10:00 - i know there's a lot of people having
10:02 - trouble sometimes and it's in ninety
10:04 - percent of the case it's uh some type
10:07 - error or it's the casing here
10:10 - that's different and it will throw an
10:12 - error if you don't have a casing exactly
10:14 - like i write it here in the video so
10:16 - make sure you have everything correct
10:18 - and check it twice if you got some error
10:21 - when you try it later on
10:23 - and this one we have to have a return
10:25 - statement and parenthesis
10:28 - and we're going to return the video
10:30 - component
10:32 - and the playlist
10:36 - we're going to change this a lot in the
10:38 - future videos because this is the main
10:40 - component most of our logic will go here
10:42 - so it will grow and have a lot more code
10:45 - and we export
10:47 - default
10:49 - wb and player like so
10:52 - and we can save it also
10:53 - whoops we have some error here
10:56 - and that's because you can't return two
10:58 - components we can create a react
11:01 - fragment here
11:03 - and you can just use this this is
11:05 - shorthand for react
11:08 - fragment
11:11 - so you can just write it like this
11:17 - like so we can copy all of this code
11:21 - we can move into our playlist component
11:23 - we paste it we import react
11:25 - these ones we don't need but we are
11:28 - going to need the
11:30 - playlist header
11:33 - and we import that one from dot dot
11:36 - forward slash playlist header
11:39 - like so
11:41 - we're also going to need a playlist
11:43 - items
11:46 - and we grab that from dot dot forward
11:48 - slash containers
11:51 - play list items
11:53 - and we're going to need our knight mode
11:55 - also
11:57 - and that one we grab from dot dot
11:59 - forward slash night mode like so
12:02 - and this one is only going to return jsx
12:05 - so we can
12:06 - omit these ones and remove
12:09 - the return
12:12 - and make it nice like that
12:16 - first we have our night mode component
12:19 - then we have our play list header
12:25 - and then we have our play list items
12:28 - and there's a typing arrow here it
12:30 - should say playlist items and of course
12:33 - we have to rename this one also
12:36 - so we call it playlist
12:40 - and that's it we save that one
12:43 - and we can copy this one
12:45 - and go to playlist items
12:49 - paste the code in we can remove this one
12:53 - we are going to import our playlist item
12:55 - from
12:57 - dot dot forward slash playlist item we
13:00 - can remove the night mode and we also
13:02 - going to import the high order component
13:05 - in this one later on but we'll save that
13:06 - one for a special video about this
13:09 - we rename this one to play list items
13:14 - and export it as playlist items of
13:17 - course
13:18 - and in this one we're just going to
13:20 - return a playlist item for now
13:27 - like so
13:28 - and we can make a little nicer
13:31 - then we save it so this is our container
13:35 - components we have our app we have our
13:37 - playlist our playlist items we have our
13:40 - main component to wb and player.js so
13:44 - let's move on or high order component we
13:47 - save this one for later as i said so we
13:49 - go to our presentational components
13:52 - we can paste our code we can remove all
13:55 - of this
13:57 - and remove these ones here for now
14:00 - and rename it to night mode
14:02 - like so and we can just create
14:06 - a div for now here and we write night
14:08 - mode
14:10 - save this one and actually we can copy
14:13 - this one we go to our playlist header
14:18 - rename this one
14:21 - to play
14:22 - list header
14:25 - and that's enough for this one also for
14:27 - now so save that one and move on to our
14:29 - playlist items
14:31 - paste the code
14:33 - and rename it to
14:35 - play list items
14:37 - playlist item
14:39 - not with an s
14:41 - save it
14:42 - and we go to our last one the video.js
14:46 - paste it and
14:48 - you probably know it by now we should
14:50 - rename it to video
14:52 - like so
14:54 - and for this one we can also import our
14:56 - react player so import
14:58 - react player from
15:01 - react player like this
15:04 - and this should be it we have all our
15:06 - components scaffold out now
15:12 - and if we go into our app.js
15:15 - and import
15:16 - wbn player
15:19 - from and this one is just going to be
15:21 - one dot and forward slash
15:23 - wb and player
15:26 - and we can return that component here
15:32 - like so and we save it
15:34 - go back to our application
15:36 - and as you can see it's working because
15:38 - it's showing the text we wrote in the
15:40 - different components so we know that our
15:42 - structure are working in the application
15:45 - in the next video we're going to finish
15:46 - our app.js and talk a little about
15:48 - routing and react router
15:51 - it's time to start coding our
15:53 - application for real and we're going to
15:55 - start by creating our routes we're going
15:57 - to need for this one so we're going to
15:59 - be working in the app.js file for this
16:02 - video we need a browser router and the
16:04 - routes because we want every individual
16:06 - video to have a unique link so we can go
16:09 - directly to it in our video player so
16:12 - that's why we're using routes for this
16:14 - one
16:15 - let's start off by importing everything
16:17 - we need from the browser router so
16:19 - import
16:21 - browser router and we need the road and
16:24 - we need a switch
16:26 - and we grab them from
16:29 - react router dom
16:33 - we can delete this one we won't need it
16:36 - instead we create a new component called
16:38 - browser router and we wrap everything in
16:40 - that component
16:42 - and inside we create a switch
16:46 - and we can start creating our first
16:48 - route and it's going to be an exact
16:51 - match with a path
16:53 - to the route
16:54 - our component
16:56 - are going to be the wbn
16:59 - player
17:02 - and what this will do is when we go to
17:04 - the root here
17:06 - in my case it's vapenfuck.com react
17:09 - underscore video player it will start
17:11 - the application from scratch so in this
17:14 - case now you see it's going to another
17:16 - route here that's because i played a
17:18 - bunch of videos here and it remembers
17:20 - that i was on the video 7. i'm going to
17:22 - show you this in a later video so don't
17:24 - worry how we do this routing and how it
17:27 - remembers where we left off the last
17:30 - time
17:31 - so this is kind of the first time when
17:33 - you go to the video player and haven't
17:34 - played anything then it's going to stay
17:37 - in the root and not forward you to
17:39 - another video
17:41 - okay
17:42 - let's create another route it's also
17:44 - going to be an exact one and the path is
17:47 - going to be forward slash colon
17:50 - active video so you probably know this
17:53 - as this is an intermediate course and
17:55 - not a starter course so what this will
17:58 - do is create kind of a variable for us
18:00 - we call it whatever we want in this case
18:02 - it's active video and it's this id up
18:05 - here
18:07 - by calling this one in our application
18:09 - we can grab this id up here
18:12 - so the component
18:15 - will be guess what it's going to be the
18:17 - exact same component for this one and
18:19 - why is that yeah of course we don't want
18:22 - to change the view here we just want to
18:24 - go to different videos but have the same
18:26 - view so we're just using this so we can
18:29 - get this id and use it in our
18:31 - application
18:33 - make sense i hope so
18:35 - one thing you also could do here is to
18:37 - create kind of a not found component i
18:40 - haven't done this now so if we for
18:42 - example go into another directory here
18:44 - it won't show us anything or if you
18:47 - write the wrong id it won't show us
18:50 - anything either so that's kind of an
18:53 - exercise you can do if you want just
18:55 - create another route that will fall back
18:57 - to a not found component when the rods
19:00 - don't match
19:02 - okay this is actually it for this video
19:04 - it's a short one and in the next video
19:06 - we're going to talk about style
19:08 - components and how we can use them to
19:10 - style our applications
19:12 - ok we're going to talk a little about
19:14 - style components in this video and also
19:17 - start coding with style components
19:20 - if we first go to the
19:22 - stylecomponents.com we can check out
19:24 - what star components are and yeah it's
19:26 - visual primitives for the component age
19:29 - yeah
19:30 - use the best bits of es6 and css to
19:33 - style your apps without stress that
19:35 - sounds wonderful you should also know
19:37 - that there's different opinions about
19:39 - style components and what you should use
19:42 - creating react application or you maybe
19:44 - should use css modules or regular css i
19:47 - happen to like star components and i
19:50 - wanted to try using it in this course i
19:53 - hope you like it if you don't like it
19:54 - you can of course implement another
19:57 - styling for your application you can
19:59 - read everything about it here and i
20:01 - suggest you do it if you're interested
20:03 - in your style components in the future
20:06 - the basic idea here is that you create
20:09 - components with your styles so you can
20:11 - use the styles just as regular react
20:13 - components
20:14 - if we look at the basic instructions
20:16 - here we have to import style from style
20:18 - components we've already installed style
20:21 - components we did that in the first
20:22 - video with the mpm install command and
20:26 - then you create
20:27 - this cons and call it whatever you like
20:29 - it will be a component to use for you
20:31 - later on
20:33 - and then you create your style as
20:35 - regular css
20:36 - so the only thing you may be wondering
20:39 - about here that these backticks and it's
20:42 - called a tagged template literal you can
20:44 - basically invoke function with backticks
20:47 - instead of parentheses and they write
20:50 - all about it here and this is not a
20:52 - star component specific it's in es6
20:55 - javascript so you have to look this up
20:58 - if you don't know what this is so i
21:00 - suggest you do that also if you're
21:02 - interested in learning more about es6
21:04 - and javascript
21:06 - and as you see we write a style inside
21:09 - of these backticks and it will create a
21:12 - component for us to use in our code and
21:15 - that's the basics of style components
21:17 - and we're going to go to our code editor
21:19 - and start coding our first style
21:22 - component
21:23 - if we take a look at our starter files
21:26 - you have a directory called styles i
21:28 - chose to separate this out from the main
21:31 - components and have them in their own
21:33 - file and there's also different opinions
21:35 - about this some like to have them in
21:37 - their component directly but i think
21:40 - it's nice to do like this to kind of
21:42 - separate them in their own files but if
21:45 - it's a large application it may be good
21:47 - to have it in their own components so
21:49 - you know exactly where you have the
21:51 - styles for your component as always do
21:54 - as you want i choose to do it this way
21:56 - because i like it and i think it's
21:58 - fitting for this
22:00 - application and this course
22:02 - all right we're going to work in the
22:03 - app.js file this time also
22:06 - and we're also going to work with a
22:08 - globalstyle.js
22:10 - in the styles folder because now we're
22:12 - first going to create the global styles
22:14 - for the whole application
22:16 - if we look at the globalstyle.js i
22:19 - already provided these for you we're
22:21 - going to delete it now if you don't want
22:23 - to do this if you don't want to create
22:26 - css and if you don't want to do all
22:28 - these things with star components you
22:30 - can just keep this because this way you
22:32 - can just import these in the components
22:34 - later as we're going to do and you don't
22:37 - have to write your css at all
22:40 - so delete these ones
22:42 - and we start writing some code here
22:44 - again
22:45 - so we import
22:48 - something called
22:50 - create global styles
22:54 - from styled components
22:57 - and this is something as it says we can
22:59 - use to create a global styles it's in
23:02 - the star components library
23:04 - so we use these ones when we want to
23:07 - create global styles
23:08 - then we create the const we can call it
23:11 - whatever we want and i want to call it
23:13 - global
23:14 - style for this one
23:16 - then we use create global style it
23:20 - shouldn't be an s there it should just
23:22 - say create global style
23:25 - then we create backticks
23:28 - and inside these backticks we write our
23:31 - css
23:32 - first
23:34 - we want to set our box sizing
23:37 - to border box in the whole application
23:42 - then we have our body
23:45 - and we set our font size to 10 pixels
23:48 - and we set our font family to
23:52 - hindsense serif
23:55 - and this is the one i imported in the
23:57 - index from the google fonts
24:00 - and this is it for a global styling
24:03 - we just have to export this one export
24:05 - default
24:07 - global style like this
24:10 - we save it and as i said this is the
24:12 - exact code as we just deleted i just
24:15 - wanted to provide you with these if you
24:17 - don't want to do all this
24:19 - so we go back to our app.js
24:22 - we have to import our global style that
24:24 - we just created
24:28 - globalstar from we grab that from dot
24:30 - dot forward slash
24:32 - tiles
24:33 - global style
24:36 - and now we can use it in this component
24:39 - and how do we apply the global style to
24:42 - our application well it's fairly easy
24:44 - actually in this case we just create the
24:47 - component called global style
24:51 - like so and this will apply the global
24:53 - style to our application
24:55 - and as you can see we have an error now
24:58 - and that's because as it says the rotor
25:00 - may only have one shell element so we'll
25:02 - wrap this once in a
25:05 - fragment
25:10 - like so
25:12 - you see that the font size is less now
25:14 - so we know that the global styles are
25:17 - kicking in
25:19 - and this is it this is how we apply
25:21 - global styling with style components in
25:24 - the next video i'm going to show you how
25:25 - to do the styling for the individual
25:27 - components
25:30 - we've finished our global styling and
25:32 - we're going to continue to do some
25:34 - regular component styling in this video
25:37 - so if we go into the styles folder and
25:40 - into the styled playlist we're going to
25:42 - create the style component for the
25:44 - playlist so as before delete this one
25:48 - and we're going to write it from scratch
25:50 - first we import style just as before
25:53 - from styled components
25:56 - then we create a const called styled
26:00 - playlist
26:01 - and an equal sign and style.div
26:04 - and if this for example should be an
26:07 - input box
26:08 - we just write input like this or if you
26:10 - can have what element you want here so
26:13 - in this case it's going to be a div so
26:15 - we use the div here
26:18 - and now it's just regular css here so
26:20 - not that funny but we have to do it
26:24 - so we set a flex
26:27 - to one
26:28 - don't know if we need to have these
26:30 - vendor prefixes here but to be sure
26:32 - i put them in
26:41 - so we're creating a flex box here
26:44 - just for centering things in a nice way
26:48 - if you're not familiar with flexbox i
26:50 - recommend looking it up it's really nice
26:52 - and you it's much easier to center
26:54 - things and vertical center and
26:56 - horizontal center and aligning your
26:58 - items
26:59 - and we have a color of white for that
27:02 - one and also if you're going to have
27:04 - some other classes and things maybe for
27:06 - example you want to have some styling
27:09 - for different viewports and some
27:11 - responsive styling you just write it
27:13 - below here and you can have what classes
27:16 - you want it's just regular css so you
27:18 - can name
27:19 - some class and you just do like this and
27:21 - write your css in here it just have to
27:24 - be inside these backticks so for example
27:27 - you don't want to create a component for
27:29 - every little class you have in this case
27:31 - we don't have other classes we have one
27:33 - media query that we're using for the
27:35 - responsive functionality so
27:38 - we write media
27:41 - screen
27:42 - and
27:43 - max width
27:45 - of 1400 pixels
27:48 - and we have a width of 100 percent
27:51 - and display
27:53 - block
27:55 - and finally we just export this one also
27:58 - export default
28:00 - style playlist like so and this is it
28:03 - this is the style for the playlist
28:05 - we save this one and we go back into our
28:08 - playlist.js file
28:10 - first we import our newly created styled
28:14 - playlist
28:15 - from
28:16 - dot dot forward slash styles
28:19 - style the playlist like so
28:24 - and then instead of this fragment here
28:26 - we can just wrap it in
28:28 - the styled playlist
28:31 - like so
28:33 - and if we take a look here we can see
28:35 - that it's not showing the other ones
28:37 - here and that's because they're white
28:39 - now
28:40 - we're using a white color in the
28:42 - playlist but they dear so don't worry it
28:45 - will look a lot better soon right now
28:47 - it's looking tragically sad but we're
28:49 - going to fix this
28:51 - and we're going to do one more just to
28:53 - make some exercise in this one so if we
28:56 - go into our styled playlist items in the
28:59 - styles folder
29:01 - just as before delete this one
29:04 - i think it's good to repeat things
29:06 - because that way you learn a lot faster
29:09 - and maybe it's boring and you already
29:11 - have this code as i told you you can
29:13 - just save it and let it be but i highly
29:15 - recommend that you do like this and
29:17 - repeat it and just write it because your
29:19 - brain will learn a lot more if you write
29:22 - it down yourself so import style from
29:25 - style components again
29:29 - we create the const called styled play
29:32 - list items
29:34 - and we write styled dot div this is a
29:37 - div also and we do two backticks
29:41 - and we're going to write a css between
29:43 - these backticks and we have a padding
29:47 - 0 20 pixels 0 and 20 pixels actually we
29:51 - can do like this
29:54 - like so that's the short term for that
29:56 - one
29:57 - we have an overflow
29:59 - y of order we have a height
30:03 - of 28
30:05 - vw
30:06 - a max height
30:08 - of 500 pixels
30:11 - right then we're going to do some tricks
30:13 - here to style our scroll bar and we have
30:15 - to do some webkit stuff here so colon
30:18 - colon
30:20 - webkit
30:22 - scroll bar
30:25 - we want a width
30:27 - of 5 pixels
30:31 - colon colon
30:33 - webkit
30:34 - scroll bar track
30:38 - and we set the background
30:41 - to transparent
30:45 - and we have a webkit
30:48 - scroll bar thumb
30:53 - where we want our background
30:56 - to be
30:57 - 888
31:00 - and or border radius
31:02 - 2 pixels
31:05 - and the last one colon colon
31:07 - webkit
31:09 - scroll bar
31:12 - thumb
31:13 - and hover
31:15 - and we want a background to be a little
31:18 - darker so we set that one to five five
31:21 - five
31:22 - that's it then we export
31:26 - default styled playlist items
31:30 - and we save this one so i hope you got
31:33 - the flow here now we just import styled
31:36 - and we create the const we name it
31:38 - whatever you want this is not something
31:40 - specific to style components or react or
31:42 - anything you can call it whatever you
31:44 - want and we create our css inside these
31:48 - backticks
31:49 - here as i said before this is the
31:51 - element you want to create the style
31:53 - component for it can be whatever html
31:55 - element you want so in this case it's a
31:58 - div we go into our playlist items.js
32:03 - we import
32:05 - styled play list
32:08 - items from
32:09 - dot dot forward slash styles
32:12 - and styled playlist items
32:17 - like so
32:18 - and then we can wrap this component in
32:21 - our
32:21 - styled playlist items
32:28 - and we save it
32:30 - and we have some error here module not
32:32 - found okay there must be some
32:34 - misspelling here from my side
32:38 - of course this one shouldn't be there it
32:41 - should be right there instead
32:44 - bad mistake by me but all right that's
32:47 - coding you know trial and error all the
32:49 - time and now it should work again
32:53 - still not showing anything exciting here
32:55 - but it will soon get more exciting i
32:57 - promise
32:58 - okay we can do one more thing here
33:00 - before we finish off this video we're
33:02 - going to go into our playlist
33:05 - item.js not items with an s playlist
33:08 - item.js
33:10 - and for this one we're not going to
33:12 - create the whole css for this one we're
33:15 - just going to import it here
33:18 - import style play list item from dot
33:23 - forward slash styles styled playlist
33:27 - item
33:28 - like so
33:30 - and as you can see here if we just check
33:32 - the css file playlist item you see it's
33:35 - a lot of
33:36 - css code here and we don't have to write
33:39 - all these now it's kind of a boring the
33:41 - one thing you can notice here is this
33:43 - special where we use props here to
33:46 - change different values on the
33:48 - properties of the css and we're going to
33:50 - talk this in the next video when we go
33:52 - through the theming with style
33:54 - components so don't worry so go back
33:56 - into our playlist item
33:58 - and instead of a div we just wrap this
34:00 - with
34:02 - styled playlist item like so and save it
34:06 - still not showing up anything here but
34:08 - it will soon
34:11 - alright so far so good this is the last
34:14 - video in setting up the styled
34:15 - components to be used in our application
34:18 - we're going to talk a little about
34:20 - theming and how we can use it to have
34:22 - different themes in our app so let's get
34:25 - started here we're going to be mostly in
34:27 - our wbn player.js file so make sure you
34:31 - navigate in to that component style
34:34 - components have something called a theme
34:36 - provider and we can use that to switch
34:39 - different themes in our application and
34:41 - also we can use it to sort of set up
34:44 - different properties that we're going to
34:46 - reuse somewhere in our styles it's
34:49 - really convenient if you for example
34:51 - have some predefined colors then you can
34:53 - just use those colors by fetching the
34:55 - props for your component because the
34:57 - theme provider will make sure that the
35:00 - theme get passed down by props to your
35:02 - component
35:03 - so first of all make sure we import our
35:06 - theme provider so import
35:09 - theme provider
35:11 - from
35:12 - style components
35:15 - we're going to create our themes now
35:18 - first of all we have a regular theme we
35:20 - call that theme
35:23 - it's just a regular object here you can
35:24 - see we create a const named theme and
35:26 - it's a regular javascript object so we
35:29 - have a bd color
35:31 - of three five three five three five
35:35 - we have a bd color
35:37 - item
35:38 - that one will be four one four one four
35:40 - one like so
35:42 - we have a bd color item active
35:46 - and that one is going to be
35:48 - 45 c63
35:51 - whoops there's something wrong here of
35:54 - course there should
35:55 - be comas here as it's an object
35:59 - bd color played and that one is going to
36:03 - be 5 2
36:05 - 6 d 4e and we have a border it's going
36:09 - to be none and we have a border played
36:14 - and it's going to be none also
36:17 - and we have a color
36:18 - that is going to be white
36:21 - so set that to fff
36:24 - all right that's our theme object and
36:27 - then we're going to create another theme
36:29 - object it's the object for the light
36:31 - theme so we can just copy this one
36:34 - and right below it we paste it and we
36:37 - call that
36:38 - theme light and we're going to change
36:41 - some values here so we set the bd color
36:44 - to fff white
36:47 - we also set the bd color item to white
36:51 - we set to be the color item active to
36:54 - 80a
36:55 - 7b1 we set our video color played to 7d
37:01 - 9979
37:03 - really innovative numbers here and you
37:06 - can of course style it like whatever you
37:08 - like for this one we're going to have a
37:10 - border of one pixel solid
37:13 - and a color of three five three five and
37:17 - three five
37:18 - and border played
37:20 - it should say border plate there so make
37:23 - sure you change this
37:25 - in both of the themes border plate and
37:27 - that should be none there
37:29 - and the color for this one should be
37:32 - three five three five three
37:34 - five like so
37:37 - so this is our objects with all the
37:39 - different theming styles and we have
37:42 - this theme provided that we imported
37:43 - from style components so we can use this
37:46 - one
37:46 - let's go down here to our return
37:49 - statement and first of all we're going
37:51 - to wrap everything in our theme provider
37:57 - so make sure you move it inside the
38:00 - theme provider
38:03 - like so then we're going to send in our
38:05 - themes
38:06 - so we have the theme
38:08 - and we're going to set the theme based
38:10 - on our button if you look here
38:14 - we have this night mode button here so
38:17 - our theme is going to be based on how we
38:19 - have set this button state
38:21 - so we grab that one from state night
38:24 - mode
38:25 - and this is a ternary operator here so
38:27 - if the state night mode is true
38:30 - we're going to grab the theme because
38:31 - that's the night mode otherwise we're
38:33 - going to show the theme light
38:37 - like so and of course this won't work
38:39 - now because we have no state yet and we
38:41 - haven't fixed all other things so it
38:43 - will throw an error now and we're going
38:46 - to replace this fragment here with our
38:48 - wb and player styles first of course we
38:51 - have to import them
38:53 - so we grab them from import style wbn
38:57 - player
38:58 - from dot dot forward slash styles styled
39:04 - wb and player like so
39:07 - and now we can use it so we replace the
39:09 - fragment with styled wb and player
39:12 - alright we have wrapped everything we
39:14 - return in our theme provider and we have
39:17 - provided the theme based on the state on
39:20 - our night mode button
39:22 - we also have created a style for the
39:24 - player component here so if we go into
39:28 - our styles folder and style wb and
39:30 - player and this is how we can access the
39:33 - values in the two themes we created in
39:35 - the component
39:37 - so we can yet again delete all of this
39:39 - and we're going to create it from
39:41 - scratch and we import styled from style
39:46 - components just as before
39:49 - and we create a const of style wbn
39:52 - player
39:53 - and we use style that we imported and
39:56 - it's a div this time also create two
39:59 - backticks
40:00 - and we write our css inside of these
40:03 - backticks just as before so our
40:06 - background are going to be based on if
40:08 - we have the light or dark theme and how
40:11 - do we access this well in our
40:14 - wbnplayer.js we use this theme provider
40:16 - and supply the theme that means we now
40:19 - have a prop that's named theme and we
40:21 - can access all of these values in this
40:24 - prop so we go back to our style styled
40:28 - wbnplayer.js and for our background we
40:30 - grab our prop we do that by a dollar
40:33 - sign and curly brackets we grab our
40:35 - props and we grab it from props dot
40:39 - theme
40:40 - bd color just as we named it in this
40:43 - component here so this is the one we're
40:45 - grabbing based on what
40:47 - theme we are using light or dark
40:50 - we do the same with our border
40:54 - or props
40:56 - arrow function we grab it from props
40:59 - theme
41:00 - and border
41:02 - and other ones are just regular css so
41:04 - we have a max width of 1800 pixels we
41:07 - have a margin of 0 and auto
41:11 - we display it as a flexbox
41:14 - webkit
41:15 - box
41:16 - ms flexbox and display flex
41:22 - we have a flex direction
41:25 - of row a max height of
41:29 - 863 pixels
41:31 - we have a transition
41:33 - all 0.5 seconds and an ease like so then
41:37 - we have a media query here for our
41:40 - responsiveness
41:41 - so we have media screen
41:44 - and
41:46 - max
41:47 - of 1400 pixels
41:50 - we display
41:53 - block
41:56 - and max height
41:58 - of 10 000 pixels well this is css so you
42:02 - have to you can try it yourself and see
42:04 - what all these values does to the app
42:07 - and we also have to export this one so
42:09 - export default
42:12 - styled
42:14 - wbn player
42:16 - like so
42:18 - and save it and that's it that's how you
42:20 - use themes with style components one
42:22 - more thing we're going to do in this
42:23 - video is we're going to connect our
42:25 - different style sheets here with our
42:27 - components so we go through all of our
42:30 - components here in our app we've already
42:33 - all the style sheets we need here we
42:34 - have the global style and the styles for
42:36 - the individual component
42:38 - in our playlist we also have all our
42:40 - styles
42:41 - in our playlist items we also have our
42:44 - styles
42:45 - in our wbn player
42:47 - we have all our styles
42:50 - in the night mode dot js
42:53 - we're going to import a style sheet for
42:55 - that one so we import
42:58 - styled night mode
43:00 - from
43:01 - dot forward slash styles tiled night
43:04 - mode
43:06 - here
43:07 - and we wrap this one with the styled
43:10 - night mode instead
43:14 - like so
43:15 - and actually we can just finish this one
43:17 - as we hear we have a span
43:22 - and we write night mode
43:24 - and a colon
43:28 - then we have a label with a class name
43:30 - of
43:32 - switch
43:35 - then we have an input
43:39 - with a type of checkbox
43:43 - we set the checked to night mode
43:47 - we've set the unchange
43:49 - to a callback function that we call
43:52 - knight mode callback
43:55 - and as before these are not going to
43:57 - work now because we haven't created
43:59 - these ones yet
44:03 - we have another span with a class name
44:07 - of slider
44:10 - round
44:12 - we can just destructure the props here
44:14 - also
44:17 - we have a night mode callback
44:19 - and we have a nice mode
44:23 - and that's it for this component and
44:25 - we're going to create these ones in a
44:27 - later video so don't worry
44:29 - say this one
44:31 - okay we have a few more components left
44:33 - that we're going to import our styles
44:34 - for so we go into our playlist header.js
44:38 - and we import our styled playlist header
44:43 - from
44:44 - dot forward slash styles style playlist
44:47 - header like so
44:49 - and then we import our styled journey
44:53 - from
44:54 - dot forward slash styles
44:57 - styled journey
45:00 - and this is also quite a small component
45:02 - so i think we can finish this off right
45:04 - now
45:05 - we have our styled playlist header we
45:07 - wrap it in that one then we have a p tag
45:10 - and we grab that from a prop called
45:12 - active.title
45:15 - then we have our styled journey
45:21 - and also from the active prop we grab
45:24 - the num and we have a forward slash
45:26 - and we have a total
45:29 - like so and this is it for this one and
45:31 - these ones here it is what you see here
45:34 - this is the journey we have the active
45:36 - video and the total video and this is
45:38 - the title of the active video that's the
45:40 - ones who goes here
45:42 - we can distract you the props for this
45:44 - one also the active and the total like
45:47 - so so it's nice and clean then we go to
45:50 - our playlist item.js
45:53 - we already have imported our styles for
45:55 - that one
45:56 - but we can finish this component off
45:58 - also and for this one you can see we're
46:01 - sending in some props so we're sending
46:03 - the active and we send in the plate like
46:06 - so
46:07 - and we distracted the props
46:10 - we have the video
46:13 - we have the active and we have the
46:15 - played
46:16 - so if we go and check our style sheet
46:18 - for this one style playlist item you can
46:21 - see that the props we send in we're
46:22 - using them here also just as we did
46:24 - before with the theming so we have these
46:27 - props accessible for us and we can
46:29 - change the css based on the props
46:32 - it works the same way as i showed you
46:34 - before
46:35 - here we have the theme and here we also
46:37 - have the props that's called active and
46:39 - also the props that's called played
46:42 - we're changing the visual of our player
46:44 - based on the active video and if it's
46:46 - played or not that's
46:48 - this one here
46:50 - is the green dot here that's going to
46:51 - show up
46:53 - you can check those css files out as i
46:55 - said before this is not a css course
46:57 - it's a react course so i'm not going to
47:00 - go through all of this css the most
47:02 - important thing here is that you can use
47:04 - props like this with the style
47:06 - components
47:07 - so i suggest you can go through them and
47:09 - see how i've done it here we go back to
47:12 - our playlist item dot yes and finish
47:14 - this one off also
47:16 - first we have a div with the class name
47:18 - of wb and player underscore underscore
47:22 - video minus number
47:24 - and we have the video and num for that
47:27 - one you can actually copy this one here
47:32 - and this one is going to have class name
47:35 - of video name and this one is going to
47:38 - have
47:39 - a video time
47:42 - and here we grab the video title
47:46 - and here we grab the duration like so
47:49 - and this is of course
47:51 - these ones here in each item that we are
47:54 - setting up here
47:56 - so say that one and we have the last one
47:59 - to go
48:00 - and that's our video we import styled
48:05 - video wrapper
48:07 - from
48:08 - dot forward slash
48:09 - styles
48:12 - style video wrapper
48:14 - and we import styled video
48:18 - from
48:18 - dot forward slash styles
48:21 - style video like so
48:23 - i actually think we're going to finish
48:24 - this one off also and we're going to
48:27 - talk more about these components later
48:29 - on when we are assembling the video
48:32 - player with these components so we have
48:34 - a proper active we have an autoplay
48:37 - we have an end callback
48:40 - and we have a progress callback
48:43 - we change this one to styled video
48:46 - and inside of this one we have a styled
48:49 - video wrapper
48:51 - like so and our react player goes inside
48:54 - these ones
48:55 - orac player are the one that we imported
48:58 - here and also installed with an pm
49:00 - earlier so this one will take a few
49:03 - props
49:05 - we have a width
49:08 - of 100 percent we have a height of 100
49:11 - percent
49:12 - we do some in-line styling here with
49:14 - this one it's just a small small
49:17 - adjustment here we have a position
49:19 - of absolute
49:22 - and top of zero
49:24 - then we have playing
49:28 - we're going to grab that from the prop
49:30 - auto play
49:32 - we have the controls set to true we want
49:34 - to show the controllers in the video you
49:36 - can change these ones if you want we
49:39 - have an url of active dot video
49:46 - on ended
49:48 - we're going to create an end callback
49:51 - and we have an on
49:53 - progress callback also
49:56 - and these ones are defined in the react
49:59 - player so we're just using them as they
50:01 - say you should use them we have to close
50:04 - this one also
50:05 - and this is it for a video as i said
50:07 - we're going to talk more about this
50:09 - later on but i thought we could finish
50:11 - them as we're already here now
50:14 - first of all we're going to correct some
50:16 - little type error i did in the last
50:18 - video maybe you saw it already done so
50:20 - you have corrected it but in the
50:22 - playlist header.js
50:24 - and where with the structure the props
50:26 - it should say total not totaled totaled
50:30 - is the swedish word for total so maybe
50:32 - it was that who made me misspell it so
50:36 - all right with that said i thought we
50:39 - were going to create some hooks by now
50:41 - but i think it's better if we in this
50:43 - video just finish off our components so
50:47 - when we start creating the hooks in the
50:49 - next videos it's better to have a
50:51 - working app and not this kind of failed
50:54 - to compile thing here and a broken
50:57 - application so if we fix these ones in
50:59 - this video we are going to at least have
51:02 - something showing here when we create
51:04 - the state hook in the next few videos
51:08 - so let's get on with it we can start we
51:10 - have the playlist and the playlist items
51:12 - left so in the playlist go into the
51:14 - playlist.js and first we can the
51:17 - structure the props we're going to need
51:19 - and we have some videos we have the
51:22 - active we have the night mode callback
51:28 - and we had a night mode
51:30 - like so
51:31 - and for our night mode component we're
51:33 - going to send in the night mode callback
51:38 - like so
51:39 - and we also have the night mode prop
51:44 - like so
51:47 - our playlist header are going to get the
51:49 - active prop
51:53 - and the total prop
51:55 - and we grab that from video's length
51:59 - and our playlist items are going to get
52:01 - the videos
52:04 - and active also
52:09 - like so and we're going to come back to
52:11 - these props and what they are
52:14 - so say this one
52:16 - and we continue on to our playlist
52:18 - items.js
52:20 - first we destructed the props
52:23 - and we have the videos and we have the
52:25 - active for this one and we can delete
52:28 - this one because in this styled playlist
52:31 - items we have this list of different
52:34 - videos so we have to loop through this
52:36 - list and create all the items
52:39 - and we do that by grab our videos
52:42 - and map through them
52:45 - we have a video and an arrow function
52:49 - and inside here we are going to return
52:52 - our playlist item
52:54 - and it's going to have some props it's
52:56 - going to be the key we always have to
52:58 - have the key when we map through
52:59 - something
53:01 - we had a video
53:04 - we have the active
53:06 - and here we're going to check if the
53:08 - active id is the same as the video id
53:10 - and then we set the active to true
53:12 - otherwise we set them to false that way
53:15 - we know which video that is active so we
53:18 - have the video id and we check if that's
53:21 - equal to the active id and then we set
53:24 - it to true
53:27 - otherwise we set it to false
53:30 - we set played
53:32 - to video dot played
53:35 - and we close it like so and this is it
53:38 - for this one
53:39 - and the last thing we have to do here is
53:41 - to kind of assemble everything in the wb
53:44 - and player.js and we're also going to
53:47 - create empty callback functions just so
53:50 - we don't get an arrow because they don't
53:52 - exist
53:53 - and then we're going to fill them out
53:54 - and create them in a later video
53:57 - if we go into our component
54:00 - we can create
54:02 - a const
54:03 - night
54:05 - mode callback
54:07 - and this is just an empty error function
54:10 - we're doing here now
54:13 - then we create another one that's called
54:16 - end callback
54:22 - like so and the last one is going to be
54:25 - progress callback
54:33 - and for now they at least exist so we
54:35 - don't get an error thrown at us
54:38 - and in our return statement here we are
54:40 - going to do some coding also so first
54:44 - what we want to do is to check if we
54:47 - have videos in our state
54:49 - the state we haven't created that yet
54:51 - we're going to do that in the next
54:52 - videos
54:53 - so we're just preparing it here so it
54:56 - will work for us later on
55:00 - so we check that the videos array isn't
55:02 - null
55:04 - and if not we're going to return all
55:07 - this
55:08 - right under here
55:10 - we create the closing parenthesis
55:12 - and then
55:13 - no
55:14 - if we have videos we're going to return
55:16 - the player otherwise we return nothing
55:18 - we return null
55:20 - and we have a closing curly bracket
55:22 - there also
55:26 - and we can do like this and then we have
55:28 - to send in the props to the video and
55:31 - the playlist
55:32 - so in our video we're going to send in
55:34 - an active prop
55:37 - we're going to grab that from our
55:39 - state that we're going to create later
55:43 - so we have a state of active video
55:46 - we have the order play prop
55:48 - and we grab that from state
55:51 - auto play
55:53 - we have the end callback
55:56 - and that's the one we've created up here
56:00 - like so and we have our progress
56:03 - callback
56:05 - and that's of course is this one
56:09 - like so
56:12 - and of course this shouldn't be there so
56:14 - remove this one
56:16 - we have it down here
56:18 - and our playlists are going to receive
56:20 - some props as well and for this one we
56:22 - have the videos
56:24 - we grab them from state.videos
56:28 - we have the active
56:31 - we grab that from state active video
56:36 - we have the night mode callback
56:39 - and that one we're grabbing from of
56:42 - course night mode callback
56:44 - and i spell that wrong also this
56:47 - shouldn't be two c's so remove the c's
56:50 - and just have one in that one
56:53 - and we have the night mode and it's
56:55 - going to be from state
56:57 - night mode like so and this should be it
57:00 - we should be good to go
57:02 - what's happening here well we're going
57:04 - to create a state with hooks in this
57:05 - functional component
57:07 - and we have our video
57:09 - that's this one and we have a playlist
57:11 - components
57:13 - so in our video we grab from our state
57:16 - the active video we grab if it's auto
57:19 - playing and we grab our end callback and
57:22 - our progress callback these ones are
57:24 - going to be sent into
57:26 - the video component
57:28 - so we have the active autoplay and
57:29 - callback and progress callback here in
57:32 - our video and we're using them to
57:34 - control the video
57:36 - then we have our playlist and for our
57:38 - playlist we have to have some videos and
57:40 - we want to show if it's the active video
57:42 - and we also have a night mode callback
57:45 - and a night mode if it's true or false
57:47 - and this one as i showed you is the
57:49 - button for night mode and here is our
57:52 - items in the list so in our playlist
57:55 - we have our props that we sent in from
57:57 - wb and player
57:59 - and we use them in our playlist
58:01 - component we send in our callback for
58:03 - the night mode and the night mode if
58:05 - it's true or false
58:07 - and the playlist header are receiving
58:09 - the active video because it's the active
58:11 - video we're showing here
58:13 - it also receives the total amount of
58:15 - videos in our list because we're going
58:17 - to need it here as we're displaying the
58:20 - total and what video we're on in the
58:22 - journey section here
58:25 - and we have a playlist items that's
58:26 - going to of course need a video so we
58:29 - send in all the videos all the videos
58:31 - from the array and we also send in the
58:34 - active one because we want to highlight
58:37 - the active video somehow here
58:40 - the playlist items are going to loop
58:42 - through the list of videos in this array
58:44 - and create the playlist item for each
58:47 - video in the array
58:49 - so i hope this is clear for you if you
58:51 - want to get the feeling you can click
58:53 - through the components and start with
58:55 - this one as this is the kind of main
58:57 - component for application and from there
59:00 - we send out props to different
59:01 - components down the tree this is it for
59:04 - this video we should be good to go when
59:07 - we create the state hook and in the next
59:09 - video i'm going to show you another
59:11 - example of react hooks and how they work
59:14 - before we start actually coding our
59:17 - hooks
59:18 - take a deep breath and lean back in your
59:20 - chair because now you can relax you
59:22 - won't have to code anything in this
59:24 - video we're going to step away from the
59:26 - original application we're building and
59:28 - i'm going to show you some basic
59:30 - concepts of the react hooks in this
59:33 - video so i created this special little
59:36 - application here or it's really an input
59:38 - field where you can write some text in
59:41 - that i'm going to use to show you how
59:42 - you can use the hooks instead of class
59:44 - components and keeping state in a
59:47 - controlled component
59:49 - so if we look at the code here it's just
59:51 - a regular input field that i've styled
59:53 - with the style components and this one
59:56 - is the new ones here it's the the hooks
59:58 - here that i'm going to explain a little
60:00 - short before we create our own hooks so
60:03 - as you can see here it's just a
60:05 - functional component and i'm creating
60:07 - the state here with the use state hook
60:10 - so the benefit here is that you don't
60:12 - need to have a class component to have
60:13 - state in your component
60:16 - and we import them from a use state and
60:19 - use effect from react and as i said
60:21 - before you have to have the alpha build
60:24 - of react
60:25 - that's called 16.7
60:28 - alpha for the hooks to work
60:32 - when you create a state you do it like
60:34 - this and for now i'm just going to show
60:37 - you we're not going to write anything in
60:39 - the next video we're going to create our
60:41 - own state and then i explain it more in
60:43 - detail so hold on we'll get there soon
60:46 - enough
60:47 - the basic concept is that you create
60:49 - whatever name you want for your state
60:51 - and you also have a second one that sets
60:54 - the state here
60:55 - and this value here is the default value
60:58 - so it can for example be
61:01 - testing
61:02 - we save that one
61:04 - and you see it says testing here in the
61:06 - input box
61:08 - and for now we just want it to be
61:10 - nothing
61:13 - this is the placeholder text in the
61:14 - input field that i specified here
61:17 - well so how do we use these well if you
61:20 - look at this style input
61:22 - we have a name of test we have a value
61:24 - of state the state is this one so we set
61:27 - the value to state just as we do in a
61:30 - regular controlled component in a
61:32 - regular class and we have an unchanged
61:34 - function here that's called update value
61:37 - so in this update value i just set the
61:39 - state to e dot target dot value it's the
61:42 - value that you write in the input field
61:44 - and then in turn the use effect will
61:47 - trigger when the state updates
61:50 - and for this one i just got an console
61:52 - log now that console log out the state
61:55 - so if we for example are going to write
61:57 - star wars here i love star wars so i
61:59 - have to use that as an example so we
62:02 - write the star wars you can see here
62:05 - it's console logging out the state so
62:08 - there's nothing special about that it
62:10 - works like a regular state here you just
62:13 - have to initialize it a bit different
62:15 - with this i also created the effect
62:18 - state because in this use effect
62:21 - we are now going to set another state
62:25 - so you can have how many hooks you want
62:27 - here you can have how many states you
62:29 - want and your state can of course also
62:31 - be an object just like your regular
62:33 - state in a class component but in this
62:35 - case it's just this string and we'll
62:37 - talk more about this later when we
62:38 - create the state in the next video but
62:41 - for now we have these kind of two
62:43 - different states here
62:45 - so in the use effect we are going to set
62:47 - the effect state with the state we use
62:50 - the set effect state to set the value
62:53 - that we have in this state and we do it
62:56 - here you just call this as a regular
62:59 - function and send in the value you want
63:01 - to set the state with
63:03 - and then we console log the effect state
63:05 - just to show what's happening here so we
63:08 - save this one
63:09 - and we try to write star wars as you can
63:12 - see here now what's happening here whoa
63:14 - it's going crazy and why is that i have
63:16 - to break this
63:18 - let's do it like this now and save it
63:21 - why did it go and set the state that
63:22 - many times like in an infinite loop well
63:25 - there's nothing strange going on
63:28 - actually because when we set the effect
63:29 - here in the use effect it's going to
63:32 - trigger the use effect again and of
63:34 - course it will set the effect state
63:36 - again and it will trigger it again so it
63:38 - goes into an infinity loop here and
63:40 - that's not good so how can we control
63:43 - this
63:44 - if we do like this i have comment out
63:46 - but we'll make this active in this array
63:49 - here you can specify what this use
63:51 - effect should be dependent on if we
63:54 - write state inside this array it will
63:57 - check if state has changed so that means
64:00 - in other words if we have the state here
64:02 - it won't do anything if we haven't
64:04 - changed the state with a set state
64:06 - because in the next loop here it will
64:09 - see that the state haven't changed and
64:11 - it will skip this use effect so we say
64:14 - this one now
64:17 - and as you see it's working just as
64:19 - before
64:20 - if we look at the state here it says
64:23 - star but it only says sta in the effects
64:26 - it's always one character behind and
64:28 - that's because it's a sync
64:31 - when we set the effect state here it
64:33 - hasn't update this state when we console
64:36 - log it out
64:37 - instead we can have another use effect
64:39 - here if we copy this one
64:42 - like so you can have as many as you want
64:44 - and we want this to be dependent on the
64:48 - effect state instead
64:50 - and in this one we console log out the
64:53 - effects state so we remove this one here
64:56 - and if we save and try this now
65:00 - we write star
65:02 - and as you see it's always the same now
65:05 - and it's not
65:06 - like behind with one character all the
65:08 - time and that's because
65:10 - this one will trigger when the state has
65:13 - been set so we make sure that this is
65:15 - finished before we console log it
65:17 - and we also make sure to not go into
65:19 - this infinity loop by using this one
65:21 - here
65:28 - and actually this won't go into an
65:30 - infinity loop because we're not setting
65:32 - any new state in this one it will
65:34 - trigger when we update this state also
65:36 - so it will run kind of double
65:42 - yeah as you see it runs it two times
65:45 - and that's no good so we wanted to just
65:48 - show the console log when we update the
65:50 - effect state like so
65:52 - and this is kind of neat because you
65:54 - don't need that class component
65:56 - many people find the class components
65:58 - more complicated than the regular
66:00 - functional components and we use this
66:02 - use effect instead of the life cycle
66:04 - methods that's on the class component i
66:07 - think it's great because you just have
66:09 - to think of this one and you can control
66:12 - it by specifying what should affect this
66:15 - one
66:16 - it's kind of new when filming this video
66:18 - so it would be fun to see what people
66:19 - will do with the hooks in the future
66:22 - here i hope this gave you some little
66:24 - idea before we go through and creating
66:26 - our own hooks we're going to do that in
66:28 - the next video and we're going to start
66:30 - with a used tail hook for our
66:33 - application
66:35 - all right it's time to start creating
66:37 - some hooks finally that you've been
66:39 - waiting for this as my motivation for
66:41 - this whole course was to show you the
66:43 - newly announced hooks in react as of
66:46 - recording this video so in this video
66:49 - we're going to be in the
66:51 - wbnplayer.js file and we're going to
66:53 - create the state hook and if we go to
66:56 - the homepage for react.js.org and read
66:58 - about the hook i just wanted to show you
67:00 - some small things here before we start
67:03 - you noticed in the previous video that i
67:05 - was using this syntax when we created
67:07 - the state maybe you know about this
67:09 - already because this is es6 syntax how
67:12 - we destructure an array you can read
67:14 - about it here also they're showing a
67:17 - great example here of why we can do like
67:19 - this when we create the state and u
67:23 - state returns an array with two elements
67:25 - and when we do like this we can name
67:28 - these elements so this is the same as
67:30 - these three rows here you first create
67:33 - one variable with the use state and you
67:35 - send in your initial value
67:37 - and this one will return a pair and this
67:40 - is just a regular array so we can access
67:42 - the values by the zero and one to get
67:46 - the first and the second value
67:47 - respectively yeah they're using the
67:49 - fruit example here so they're assigning
67:51 - to variables called fruit and set fruit
67:54 - and you can call these ones whatever you
67:56 - want i don't think i explained that in
67:58 - the previous video with the set thing
68:00 - here it don't have to be named set but
68:03 - it's very practical to have it like this
68:05 - naming convention so you know that this
68:07 - is the one that you set the state with
68:09 - but you can call them whatever you want
68:11 - so enough said about that go back to our
68:14 - coding editor and we're going to start
68:17 - this on coding here and i just want to
68:19 - show you i promised you in an early
68:21 - video that i was going to show you a
68:22 - neat trick on how we can get the videos
68:25 - into our react player if we look at our
68:28 - index.html file in the public folder
68:32 - and inside here you can see i've created
68:34 - a hidden input field here and the nice
68:36 - about this is that we can create a value
68:39 - on this hidden input field and this is
68:41 - like a json syntax here we can write all
68:44 - our videos here and we can grab them in
68:46 - our react player so we don't have to
68:48 - hard code them in as we don't have a
68:50 - backend to upload we don't have a
68:52 - database to grab our videos from for our
68:54 - react player so we can just create this
68:56 - hidden input field and you can do this
68:58 - in whatever html file you are going to
69:01 - apply this player to
69:03 - just be careful here because you can't
69:05 - just create space and things and quotes
69:09 - you have to use these special characters
69:10 - here otherwise it won't work so this is
69:13 - simply the videos here i wanted to have
69:15 - an id of each playlist because when we
69:18 - save it to local storage it's good to
69:20 - know what the playlist we have saved
69:22 - there then i have the actual playlist
69:25 - that's an array with objects in it we
69:27 - have the video number we have the title
69:29 - we have the video id after the title
69:32 - we have the duration and lastly we have
69:35 - the video link
69:38 - so you can add whatever you want here
69:40 - and this is kind of neat trick to get
69:42 - the videos for a player kind of a
69:45 - hackish maybe but it works and as i said
69:48 - before if the things work and this easy
69:50 - to do it
69:51 - they're sometimes not bad doing things
69:53 - like this you don't have to build a
69:55 - complete backend a complete admin system
69:58 - for this just to get some videos into
70:00 - your player so let's go back into our
70:03 - wbnplayer.js
70:05 - file and we're going to add these videos
70:07 - to our state
70:08 - first we have to import our state hook
70:11 - so we do that up here we write the coma
70:14 - and curly brackets and we have use state
70:17 - and we can also import use effect right
70:20 - now because we're going to use that
70:21 - later on
70:22 - all right
70:24 - let's go into our component here and
70:26 - create the const that's called
70:28 - videos like so and we grab our videos
70:32 - with the json
70:34 - and we want to parse it we have a
70:36 - parenthesis
70:38 - we grab it from document query selector
70:42 - and we have a new parenthesis and a tick
70:44 - we have a bracket
70:46 - name equals
70:49 - videos like so and we have an n bracket
70:53 - and then
70:55 - dot value at the end and this one will
70:57 - give us all the videos in this const
70:59 - here so we just had to create our state
71:01 - now
71:03 - we do that with the new const brackets
71:05 - we call it state and set state
71:08 - like so and as i said many times now
71:11 - they don't have to be called this that's
71:13 - cause i choose to call them this you can
71:14 - call them whatever you want
71:18 - and we call the use state function
71:22 - and we're going to set our initial state
71:23 - with an object inside here
71:26 - so we have our videos we grab them from
71:29 - videos.playlist
71:33 - we have an active video and that one
71:35 - we're grabbing from
71:38 - videos.playlist
71:39 - and it's an array so we're using the
71:41 - first video if you haven't watched any
71:43 - video we're going to set it to the first
71:45 - one
71:47 - we have a night mode
71:48 - i'll set that to true because i want the
71:50 - dark theme you can set it to false and
71:52 - it'll show you the light theme so it's
71:54 - up to you what you want there
71:56 - we have a playlist
71:58 - id
72:00 - and we grab that one from videos
72:02 - playlist id
72:06 - and we have an autoplay that we're going
72:08 - to set to false to start with
72:11 - and this is really all there is to it
72:13 - it's just these two here one that we
72:15 - save the stadium and one that we can set
72:17 - the state with we will do that in the
72:18 - next video when we use the use effect
72:21 - hook also if we say this one it should
72:24 - work now
72:25 - and of course we have an error here
72:27 - playlist items we go back here and check
72:30 - that one
72:32 - okay
72:34 - nothing wrong here so we're going to our
72:37 - playlist.js
72:41 - and yeah of course i forgot an s here so
72:44 - make sure in your playlist.js file in
72:46 - your playlist items
72:48 - the prop there should be called videos
72:50 - not video
72:52 - it should be plural so put an s on that
72:54 - one and save it and it should hopefully
72:56 - work now yeah we see it here now the
72:59 - first time we see our player it's
73:01 - actually not working now you can of
73:03 - course play the video if you want but we
73:04 - can't change the videos for now because
73:07 - we're going to create these links here
73:08 - when we do the high order component and
73:11 - also the night mode won't work now
73:13 - because we haven't created our callback
73:15 - functions
73:16 - but the player is there and as you can
73:18 - see it's fully responsive and it's
73:20 - working and looking
73:21 - great here now and that's good in the
73:24 - next video we're going to check the use
73:25 - effect hooks
73:27 - okay welcome back you can see that i
73:29 - have a little bit of different colors
73:32 - here in my editor and that's because i'm
73:34 - re-recording this video because the
73:36 - rules of hooks have changed a little bit
73:38 - since i recorded this course i recorded
73:40 - it when the hooks wasn't officially
73:42 - released so now they have some special
73:44 - rules here we have to take into
73:46 - consideration and that is in the use
73:48 - effect we have to define all the
73:50 - dependencies and that's what we're going
73:52 - to do also now in this video if you see
73:54 - something in the videos after this one
73:56 - that's yeah maybe not look the same as
73:58 - this one i created here that's because i
74:01 - have re-recorded this one and this is
74:03 - the one that it should look like so this
74:05 - is the correct video here all right
74:07 - first of all we can go to react home
74:09 - page and check out the hooks api and
74:12 - there you can see that they've got some
74:13 - basic hooks and additional hooks there's
74:15 - actually a lot of hooks here and you can
74:17 - create your own hooks also we are only
74:20 - going to use the use state and the use
74:22 - effect in this course because that's the
74:24 - only ones we need but i highly suggest
74:26 - that you read more about the hooks api
74:27 - here and also if you like the hooks i'm
74:30 - going to work with them in your future
74:32 - work i suggest that you also
74:34 - read about creating your own custom
74:36 - hooks because it's very useful i use
74:39 - them a lot in my projects so that's the
74:42 - key i think with hooks that you can
74:43 - compose your own hooks and it's very
74:46 - composable if you use hook throughout
74:48 - your whole application okay that said
74:50 - we're going to create our use effect in
74:53 - this video so let's go back into our
74:55 - code editor and into our wbn player.js
74:59 - file it's in your containers folder so
75:02 - we create the use effect we've already
75:04 - imported it up here and as you can see i
75:07 - also done some destruction here now in
75:09 - this component that's also one thing i
75:11 - didn't do in the previous video so we
75:14 - have the match and the history and the
75:15 - location prop so you can just structure
75:18 - them out like this
75:22 - all right then we create
75:25 - our use effect
75:27 - parenthesis and we create an inline
75:28 - arrow function here
75:31 - we're going to have our
75:33 - dependency array so we can create that
75:36 - right now
75:38 - all right and the first thing we have to
75:40 - do is to get our video id and if you
75:42 - remember in our app.js file in our route
75:46 - we created this param and that means
75:48 - that we can grab this id with this param
75:51 - so if we look at the finished app here
75:53 - you can see that we have this id here
75:55 - and this is the one that we're going to
75:57 - grab and that's the one we call active
75:59 - video
76:02 - so first we create the const
76:05 - we can call it video id
76:07 - and we grab that from match
76:09 - dot params dot
76:12 - active
76:13 - video like so
76:15 - and that's because we destructure it
76:17 - here otherwise we have to
76:18 - put props in front of it but we don't
76:21 - have to do that now
76:22 - so here we grab the video id from the
76:25 - url and then we have to do some if
76:27 - statement here because if this value is
76:29 - undefined we know that we're not on a
76:32 - video and we're going to rock back to
76:34 - the first video in the video list when
76:36 - you open the video player for the first
76:38 - time then we don't have any saved state
76:40 - in local storage so we're just going to
76:42 - wrap back to the first video and we're
76:44 - setting that as a default here in the
76:46 - active video it's the 0 that's our first
76:49 - video
76:50 - so we create an if
76:52 - video id
76:54 - not equals to undefined
76:58 - then we're going to do something and
76:59 - we're going to have an else and inside
77:01 - of this
77:02 - if it's not undefined we have to find
77:05 - the current video in our videos array
77:08 - and we can do that by
77:10 - creating a new const first that's called
77:12 - new active video
77:16 - we have our state or videos and we can
77:19 - find index
77:21 - we have a parenthesis
77:23 - and inside here it will iterate through
77:26 - every element in our array so we can do
77:28 - some comparing here and find the index
77:31 - of that video so we have an inline
77:33 - function
77:34 - the video we compare the video the
77:36 - current video we're on in the loop the
77:38 - id of that one
77:40 - if that equals to our video id
77:43 - like so and that will give us the index
77:45 - for this video that we get from our
77:47 - params
77:49 - all right and then we have our video we
77:51 - know what video it is so we can set our
77:53 - state
77:54 - and we're going to use an update the
77:56 - function inside of the state for this
77:57 - one and that's because we don't want to
78:00 - specify this state as a dependency in
78:02 - our use effect because that will create
78:04 - an infinite loop in our use effect every
78:07 - time our state updates it will run the
78:09 - use effect and as we set the state in
78:12 - the use effect it will create this
78:13 - infinite loop but if we grab the
78:16 - previous value in an updated function
78:18 - inside of set state it will just live
78:20 - inside of here and we don't have to
78:22 - specify it in the use effect and we get
78:24 - the previous state by this parameter
78:27 - here
78:28 - so we spread the previous state that's
78:30 - really important when we're using hooks
78:33 - the set state will not merge the old
78:35 - state so you always have if we want to
78:37 - keep it should be three dots there if
78:39 - you want to keep the state as it was
78:41 - before you always have to spread it out
78:44 - otherwise it will wipe out the state and
78:45 - just to create the new values for you
78:48 - but if we spread it here we keep the
78:50 - state and we can set our new properties
78:52 - here
78:53 - so we have our active video and of
78:55 - course we also want to have parentheses
78:57 - here
79:03 - like so and we have our active video we
79:05 - grab that from prev videos
79:09 - and we set a new active video so we
79:11 - change the video to the one we got here
79:15 - and the auto play
79:18 - we grab that from location because we're
79:20 - sending this order play with our route
79:22 - so we can grab that from props dot
79:24 - location
79:26 - auto play
79:28 - like so and that's it if the video id
79:31 - isn't undefined we change the video to
79:33 - the value we have up here so we grab
79:36 - this value and set it in the state and
79:38 - this will trigger an update so we change
79:40 - the video in our list all right but if
79:43 - the video id is undefined we know that
79:45 - we're going to route back to the first
79:47 - video and we can do that by push to our
79:50 - history prop
79:52 - that we get from the router so history
79:55 - push
79:55 - paranthesis and we have an object we
79:58 - have a path name
80:00 - we have backtick
80:02 - forward slash and a dollar sign
80:08 - and from our state active video we grab
80:11 - the id
80:12 - and we end with another backtick
80:15 - and we're also going to set the order
80:17 - play to false because we don't want the
80:19 - first video to start playing by itself
80:23 - all right
80:24 - and as you can see here now the linting
80:26 - rule are complaining that we're not
80:28 - specifying any dependencies so i guess
80:31 - we can just order format it like so this
80:33 - one depends on what linting rules you
80:35 - set up for yourself so maybe
80:37 - this one won't work for you maybe you
80:40 - have to specify this yourself depending
80:41 - on your linkedin rules so it tells us
80:44 - that we need a history we're using that
80:45 - inside of here we have a location auto
80:47 - play we're also using that inside of
80:50 - here we have our match params active
80:52 - video we're using it inside of the use
80:54 - effect and we have the state active
80:56 - video dot id that we use here and we
80:58 - have the state videos so they are now
81:01 - specified in our dependencies for the
81:03 - use effect and this was the new thing
81:06 - when they released the hooks officially
81:08 - so
81:09 - if we save this one
81:12 - and go back to our application
81:15 - and if we
81:17 - go to the localhost 3000 and not using a
81:21 - video id
81:23 - it should route us to the first video
81:25 - and it does so that's great
81:27 - and we can't click these once now
81:29 - because that one we're going to do in
81:30 - the next video where we create the high
81:32 - order component and attach this kind of
81:35 - linked functionality to our list items i
81:37 - hope this made sense for you well it may
81:40 - seem a little much but i think if you
81:42 - take a look at this one or two or three
81:44 - more times it will come clear to you i
81:46 - think it's not that difficult what we're
81:49 - doing here
81:50 - okay we're getting somewhere here now
81:52 - and we're going to create our high order
81:54 - component so we can get these links to
81:56 - work so we can change the videos in the
81:58 - video list
82:00 - so let's go into our hoc folder or hook
82:04 - folder and or with link.js file and to
82:08 - be honest we actually don't need this
82:10 - high order component for this to work we
82:12 - could just go into our playlist item and
82:16 - we could create the link here on the
82:18 - name but i thought that i wanted to show
82:19 - you how to create the high order
82:21 - component as this is an intermediate
82:23 - course and high order components are
82:26 - useful when you want to reuse your logic
82:29 - for different components so my thought
82:31 - was maybe you build another application
82:34 - where you just want to show your video
82:36 - titles or something and don't want them
82:38 - to be clickable then you can create a
82:40 - high order component where you can apply
82:42 - the link instead and then you can use
82:45 - your playlist item component for another
82:48 - course without the link so this is the
82:51 - truth you don't have to have this i
82:52 - thought it would be great to show you
82:54 - how high order component works a high
82:57 - order component is a component that
82:59 - either takes in a component as a
83:01 - parameter or returns a component or both
83:04 - of them in this case we're going to send
83:06 - in our playlist item component and we're
83:08 - going to create a new component with the
83:11 - link function applied to it so it kind
83:14 - of boosts the other component with new
83:16 - functionality
83:17 - but we never modify the original
83:20 - component we're sending in as a
83:21 - parameter we're just returning a new one
83:23 - because you shouldn't do that in a high
83:25 - order component you should always return
83:27 - a new one all right
83:29 - enough said in our with link.js let's
83:32 - start with import react
83:35 - from react
83:38 - then we import a link
83:42 - from
83:43 - react router dom
83:47 - then we create const with link
83:51 - wrapped component
83:53 - that's the component we're sending in
83:54 - here
83:56 - we have our props
84:02 - and curly brackets
84:04 - and how this is going to work is we're
84:05 - going to take in the props and we're
84:07 - going to modify these props and apply
84:10 - the link to the name
84:12 - so we create the const
84:14 - with new props
84:19 - like so
84:21 - we clone our props
84:23 - and we modify our video
84:27 - so this is not an array in this one this
84:28 - is only one single video so we have the
84:31 - video and all the data about the video
84:33 - in the video object this is not an array
84:35 - it's an object this time
84:37 - so we yet again
84:39 - clone the video object
84:43 - and we modify the title
84:47 - inside the title we create a link
84:52 - we link it to
84:55 - and for this one we have curly brackets
84:57 - and another curly brackets because it's
84:59 - an object inside here so we change the
85:01 - path name
85:03 - to
85:04 - backticks forward slash dollar
85:07 - curly brackets props
85:10 - video id
85:11 - and an ending backtick there
85:15 - then we set our auto play
85:18 - to true because we wanted to play when
85:20 - we clicked the video
85:22 - and we closed that one
85:24 - and we have a link an inside or link
85:29 - we grab our props dot video dot title
85:33 - so we have wrapped our title inside this
85:35 - link now
85:37 - then we just need to return or wrap
85:40 - component
85:44 - with our new props
85:47 - so we spread them out like that with es6
85:49 - syntax
85:51 - and of course we export default
85:55 - or with link
85:57 - like so
85:58 - then we need to use this component and
86:01 - if we go into our playlist items.js
86:04 - for now we're just returning the
86:05 - playlist item but we want to return the
86:07 - modified playlist item
86:10 - so first of all we import our newly
86:12 - created high order component
86:15 - from
86:17 - dot dot forward slash hawk
86:19 - with link
86:24 - we create a const
86:25 - playlist
86:27 - item
86:28 - with link
86:30 - make sure that i don't have an s too
86:32 - much or something it should be playlist
86:34 - item with link yeah
86:37 - and we use a weed link and send in our
86:41 - playlist item
86:43 - so this one will give us the modify the
86:45 - booster component to use for us inside
86:48 - here
86:49 - and now we can just change this one
86:52 - to playlist item with link
86:56 - and it should work if we save this
87:00 - so we go back into our application
87:03 - but they won't work and why is that yeah
87:06 - and that's because we should of course
87:08 - return our new props here not the old
87:10 - props go back to your weedlink.js
87:14 - and change this one to new props
87:17 - otherwise we're just passing by the
87:19 - props and we're doing nothing with them
87:20 - so it should say new props and save that
87:22 - one
87:25 - and now we can click the links as you
87:27 - can see here
87:30 - nice it's working great actually
87:33 - and as you can see the id is changing up
87:35 - here because we're rolling it and we're
87:37 - changing this id with our router
87:40 - so this is how you do it with a high
87:42 - order component if you don't want to use
87:44 - this you can just apply the link
87:46 - in your playlist item instead in a much
87:49 - simpler way but in this way you can
87:51 - reduce this component and we have just
87:54 - added functionality with this with
87:56 - link.js file with this high order
87:58 - component in the next video we're going
88:01 - to create the callback functions that we
88:03 - set up here so we get our full
88:06 - functionality of the player
88:09 - okay there's not much left to do here
88:11 - now with our player but we have some few
88:13 - things left in this video we're going to
88:16 - create the callback functions that we
88:18 - need for the player we have one when we
88:20 - switch the night mode on and off and we
88:22 - have also one when the video has ended
88:24 - when it's here and going to change to
88:26 - another video and we're also going to
88:28 - have a callback that sets the status to
88:30 - watched on the video that means it's
88:32 - going to indicate here with a little
88:34 - green dot that we have watched this
88:36 - video and we want to do this when we
88:38 - have played a video 10 seconds so you
88:40 - just don't click it and then it will say
88:42 - that you have played it we want to know
88:44 - that the user actually have watched at
88:47 - some of the video at least so let's go
88:49 - back into our wbn.js
88:52 - file
88:53 - and first we create the callback for the
88:55 - night mode and that's fairly easy
88:57 - actually we have already created these
88:59 - kind of empty functions here so in this
89:02 - one we just have to check a boolean if
89:04 - the night mode is on or off and we have
89:06 - our night mode in our state here
89:09 - for now it's true and we should change
89:11 - it to false or true when we click the
89:13 - button in our player
89:15 - so in this one we actually just have to
89:17 - set the state
89:19 - first we clone the state
89:22 - and then we set the night mode to the
89:23 - opposite of state
89:26 - night mode like so
89:29 - and that's all we have to do with that
89:30 - one based on that boolean we are setting
89:33 - our theme here and selecting the light
89:36 - or the dark theme
89:38 - so we save that one
89:40 - and we should be able to try it now
89:42 - yeah as you can see we're changing the
89:44 - theme here now when our callback
89:46 - function working
89:47 - and that's really nice so now you can
89:49 - select if you want a light theme or a
89:51 - dark theme and of course as usual you
89:54 - can style them as whatever you want you
89:56 - can have a
89:57 - orange team or a green theme or whatever
89:59 - you want
90:00 - all right and then if you just look in
90:03 - our video.js file we have two callbacks
90:05 - on our video and these callbacks are
90:08 - integrated in the react player so we
90:11 - just use them as they are intended to do
90:13 - in the instructions from the rex player
90:15 - we have one prop that is called on ended
90:17 - and one prop that is called on progress
90:20 - on handed is when the video has stopped
90:22 - playing and what we should do then so
90:24 - every time a video has reached the end
90:26 - we get the callback from this component
90:28 - react player
90:30 - also we have this on progress it's given
90:32 - us a callback call every second i think
90:34 - so we can do some stuff
90:35 - on progress callback here and we're
90:38 - going to use that to check when we have
90:39 - played the video for at least 10 seconds
90:42 - go back into our wbnplayer.js
90:46 - and we can start with the end callback
90:48 - here and there's a few things we have to
90:50 - do here first of all we have to know the
90:52 - index in the video arrays of the video
90:55 - we're currently playing because we have
90:56 - this array here in a state with videos
90:59 - and we're going to go to the next video
91:01 - or if we're at the last video down here
91:04 - we're going to jump to the first video
91:07 - and how do we do this well if we go to
91:09 - our public index.html file we have this
91:12 - num here so we num we give each video a
91:15 - number so that would be fairly easy to
91:17 - just grab this number and take minus one
91:20 - on the numbers because the array starts
91:23 - at zero and this one starts at one then
91:25 - we know what position in the array we're
91:28 - at but we can't be sure that the user
91:31 - always are going to have these numbers
91:33 - in this file it can actually say
91:36 - whatever you want here so that's not a
91:38 - safe way for us to decide where in the
91:41 - array the current video are what we do
91:44 - also have is this kind of unique ideas
91:47 - they should be unique
91:49 - you could of course have the same here
91:51 - but then it won't work so the thought
91:53 - here is that we have unique ids for
91:56 - every video and we can use this to find
91:58 - the index in the array
92:00 - so let's go back to wbmplayer.js
92:03 - and in our end callback
92:05 - first just as before we grab
92:08 - the video id
92:10 - from props match
92:12 - params
92:14 - active video
92:16 - and that'll give us this id up here
92:20 - then we have a method that we can use
92:22 - that's called find index on the array so
92:25 - if we use find index in our state dot
92:28 - videos array we can find the index of
92:30 - the current video so we create the const
92:34 - current video index
92:37 - and we have the array in state dot
92:41 - videos
92:42 - and then we use the find index method so
92:45 - parenthesis
92:47 - and now we have to do some comparing
92:48 - here because we have our video id and
92:51 - we're going to look for that one in the
92:52 - array so we have the video
92:55 - we have an arrow function we have a
92:58 - video dot id
93:00 - and we just check if it's equal to our
93:04 - video id that we grabbed up here
93:07 - so this one will iterate through every
93:10 - element in our array and compare the
93:12 - video id for each item with this item
93:15 - here because we know this one is the
93:17 - active video so
93:18 - when it find this one when this is equal
93:21 - it will return the index for us in the
93:23 - array all right i hope that was clear
93:25 - for you then we have to do some more
93:27 - checking here and see what our next
93:29 - video will be so we have this const
93:31 - called
93:32 - next video
93:35 - if our current video index equals to
93:38 - state
93:40 - dot video's length
93:42 - minus 1
93:44 - we are going to jump to the video 0 the
93:47 - first element in our array and we're
93:49 - doing this minus one here because as i
93:51 - said the array starts at zero and our
93:54 - videos starts at one
93:57 - otherwise
93:58 - we just set our current video index
94:01 - to plus one
94:03 - we jump to the next video and this is a
94:05 - ternary operator here as you can see
94:08 - maybe we can just do like
94:10 - this so it's a bit nicer
94:13 - so we know now what the next video will
94:15 - be so we can push that into our url with
94:18 - the index of our next video and we push
94:21 - programmatically
94:22 - by props history
94:25 - push
94:27 - we have on parentheses and we have curly
94:30 - brackets we have a path name
94:33 - backticks we have a dollar sign curly
94:35 - brackets again
94:37 - state dot videos
94:39 - and we use our next video that we got
94:42 - here and our id for that video
94:46 - and we end with another backtick
94:48 - so this one will go into our state array
94:50 - with the videos and use the index we got
94:53 - here in the next video for the array and
94:55 - grab the id and we push that to the url
94:57 - so we change video
95:01 - and this one should of course be a coma
95:04 - and we set the order play to false we
95:07 - don't want it to autoplay when it's
95:08 - changed the video we just want to order
95:10 - play when we actively click a video
95:12 - ourselves and this should be it we could
95:15 - save this one so if we try it we can
95:17 - take one video here
95:19 - whatever and we go to the end
95:22 - so we're at video 2 now oh it's kind of
95:25 - slow here we play it
95:28 - and as you can see it jumped to the
95:30 - video 3 and it stopped there because we
95:32 - didn't set it to order play
95:34 - so we know that that one is working
95:37 - and now we have our progress callback
95:39 - left to do
95:41 - and as i said before what this will do
95:43 - is we'll set our video to played after
95:46 - 10 seconds
95:48 - so first of all we have to check if we
95:50 - played it 10 seconds so we create an if
95:53 - statement
95:54 - if and of course here we have our event
95:57 - and it's only one parameter here so we
95:59 - can omit the parenthesis so we do like
96:01 - this
96:03 - and we write if e dot played
96:07 - seconds we get this one from the video
96:10 - from the react player so we can check
96:12 - how many seconds we played so we're just
96:13 - grabbing that one from the event we get
96:15 - to this callback function
96:17 - if it's greater than 10 and we also want
96:20 - to check that it's actually not greater
96:22 - than 11 because we don't want this to
96:24 - fire off all the time when we play the
96:26 - video so yet again we grab e dot played
96:29 - seconds
96:30 - and set it to less than 11
96:34 - and there we have our if statement
96:36 - and now yet again we have to find the
96:37 - correct video to apply this played value
96:40 - to so you can do this in a couple of
96:43 - different ways one way of doing it is
96:45 - set the state and then we can just loop
96:47 - over the videos and when we find the
96:49 - correct id we just set that to true so
96:52 - i'm going to show you this one now
96:54 - so we set
96:56 - state
96:57 - parenthesis curly brackets
97:00 - we clone our state
97:03 - we have our videos array we want to
97:05 - update this whole array here so what we
97:07 - can do here is we can map through all
97:09 - the videos and we can update the element
97:11 - that we want to apply the plate value to
97:14 - so we just write state dot videos dot
97:18 - map we have an element
97:20 - an arrow function
97:22 - curly brackets and inside this map we
97:25 - want to return something and we create a
97:27 - ternary operator here we check if our
97:29 - element
97:31 - dot id
97:33 - equals to
97:34 - state active
97:36 - video dot id
97:38 - if it does we know that this is the
97:39 - video we want to change because we're
97:41 - playing this active video now and we
97:43 - want to change our videos array and set
97:45 - that this video has been played all
97:48 - right
97:49 - and if this is true
97:52 - we update this element so we clone the
97:54 - element first
97:55 - we always have to clone it
97:57 - and then we set the plate property to
97:59 - true for that element otherwise we just
98:03 - return the element because we don't want
98:04 - to modify that one and this should work
98:07 - now so we go back to our video you can
98:09 - see here this it's this green little dot
98:12 - here that will get applied when we have
98:13 - played a video more than 10 seconds
98:16 - so if we for example grab the second
98:18 - video here and we let it play for over
98:21 - 10 seconds
98:22 - then it will apply this green little dot
98:25 - here and as you see if we change before
98:27 - the 10 seconds nothing will happen
98:31 - it kind of tells us that we have been
98:33 - visiting this video before and played it
98:35 - and of course you can have more than 10
98:37 - seconds you can have less than 10
98:38 - seconds it's up to you what you want
98:40 - there
98:41 - stop this one
98:42 - and i can also just show you another way
98:45 - of doing this if you want if you don't
98:47 - want to do this map thing here
98:50 - take this one comment it out
98:55 - you can just create a const with videos
98:58 - equals
99:00 - dot state videos we clone our state here
99:03 - with the videos
99:05 - we have a const played video
99:09 - that equals
99:10 - videos find
99:12 - and here we can now find the correct
99:14 - video so we have a video on our function
99:18 - video dot id equals state active video
99:22 - dot id so here we grabbing the video in
99:25 - our array that's equal to the video that
99:28 - we're actively playing now then we can
99:30 - just apply the played value to this one
99:32 - so we have the played video dot played
99:35 - and set that to true and then we can
99:38 - just set the state
99:41 - dot dot state
99:44 - and videos so
99:46 - we created this copy we cloned
99:48 - the videos here and we looked for the
99:50 - video that we want to set the play to
99:53 - true we apply that one and then we set
99:55 - the state with the complete new videos
99:58 - array and it will replace the other one
100:00 - so save this one
100:02 - and it should work just as good so if we
100:05 - take this video for example
100:07 - and let it play for about 10 seconds
100:13 - yeah we're getting there all right and
100:16 - 10 11 12 just to be safe
100:19 - and you see it applies the green dot
100:22 - so it's really up to you there's
100:24 - probably even more ways to doing this
100:26 - but now you have two ways you can do it
100:28 - here and um i hope this was helpful for
100:30 - you and this is actually our complete
100:32 - player we just have to create our local
100:34 - storage so we can persist this data of
100:36 - what we have played and our list with
100:39 - videos
100:41 - okay we're almost finished with this one
100:43 - and in this video we're going to learn
100:45 - how to persist or state in local storage
100:48 - the first thing we have to do is to have
100:50 - a function that will trigger when we
100:52 - have updated our state in the player and
100:55 - for that one we can use the use effect
100:57 - hook as we did before so we need a use
101:00 - effect hook that triggers every time the
101:01 - state updates so if we go into our file
101:04 - wbnplayer.js
101:06 - yet again and below our state we create
101:09 - a new use effect hook
101:12 - use effect parenthesis then we have this
101:15 - arrow function inside
101:18 - like so
101:20 - and we will access the local storage and
101:22 - write to it here so we write local
101:24 - storage dot set item parenthesis then we
101:28 - need a backtick dollar sign curly
101:30 - brackets and we want to grab state play
101:34 - list id we want to save different states
101:37 - in the local storage if we have more
101:39 - than one player with different playlists
101:41 - so we identify it with a playlist id
101:44 - another backtick coma and then we do a
101:47 - json
101:49 - stringify of course you can only write a
101:51 - string to the local storage so we have
101:53 - to convert this one to a string before
101:55 - we write it
101:56 - parenthesis and we have our state object
102:00 - so we clone that one like so as we
102:02 - learned before we also have to make this
102:04 - use effect dependent on something and in
102:06 - this case we want it to only update when
102:08 - the state changes so we go down here
102:11 - write the
102:12 - comma create our state like so and this
102:15 - will make it only fire when the state
102:18 - changes so we say this one
102:20 - we go back to our player and into our
102:22 - console we can check our application and
102:25 - inside there we have a local storage
102:28 - oops just going to delete my old ones
102:31 - here
102:32 - so i reload it and as you can see we
102:34 - have this playlist called wbn rdx and we
102:39 - have our state here as you see so every
102:41 - time we change something here it will
102:43 - also update the state
102:47 - as you can see now it's the active video
102:49 - it's number three here
102:52 - and now it's number four so it's working
102:54 - it's updating the local storage and sync
102:56 - it with the state
102:58 - what we have left to do is when we
103:00 - initialize the player we want to check
103:02 - if we have something saved in local
103:04 - storage and use that state instead
103:07 - so we create a new const up here called
103:10 - saved state
103:12 - and we get to undo a json we parse it
103:15 - back to json format
103:19 - local storage
103:21 - get item
103:23 - parenthesis backticks
103:26 - dollar sign curly brackets
103:28 - and we use the videos
103:31 - this one here we just playlist id we
103:33 - grab the playlist id from this one here
103:36 - in our json object in the index.html
103:39 - file so we have another backtick to end
103:41 - this one
103:44 - like so
103:45 - whoops we have an error here
103:49 - yeah i misspell this one it should say
103:52 - parse like so
103:54 - so hopefully we'll have our local
103:56 - storage saved in the saved state const
103:59 - here
104:00 - so what we have to do now is to modify
104:02 - our state or initial state here we have
104:04 - to check if we actually have this one or
104:07 - if not we're going to use the videos so
104:09 - we use a ternary operator here on every
104:12 - property in the state so we check if we
104:14 - have a saved state
104:16 - if we have a save state we grab the
104:18 - values from the save state instead
104:21 - otherwise we grab it from the videos
104:22 - const
104:24 - say state
104:26 - save state active video like so
104:32 - a bit repetitive here but we have to do
104:34 - it
104:35 - save state
104:38 - say state dot night mode
104:41 - otherwise we can set it to true as
104:43 - before and we have a save state
104:48 - say it's the
104:49 - dot
104:50 - playlist
104:52 - id like so
104:54 - just making sure that i spelled
104:55 - everything correctly here
104:57 - it looked like so so save this one
105:03 - and if we remove this one we clear out
105:06 - the local storage we make a reload
105:12 - and we change to video yeah 3 and we can
105:16 - also wait for 10 seconds here to see
105:19 - if it will save this one for us so we
105:22 - change
105:22 - to video 5
105:24 - we can change the night mode
105:27 - and if we look here it should be saved
105:29 - now number five not more false and or
105:32 - video so if we reload this one
105:36 - yeah it's working so we've learned how
105:38 - to persist a state it was fairly easy in
105:40 - this application it's not that much code
105:42 - to persist the state in local storage
105:45 - in the next video we're just going to
105:47 - learn how to deploy this one
105:50 - we only have to learn where to deploy
105:52 - this sucker so in this video we'll do
105:54 - that
105:55 - if we start in our app.js file you have
105:58 - to think about the url where you want to
106:00 - host your application and for example
106:04 - where i host it
106:06 - i have it at the
106:08 - react underscore
106:10 - video player like so so i have it in a
106:12 - sub folder here and that's very
106:14 - important because we have to tell the
106:16 - router in react that we have our
106:19 - application in a subfolder so if we go
106:22 - into our app.js file
106:24 - and inside your browser router component
106:27 - tag here you create the base name
106:30 - equals and then forward slash and your
106:33 - subfolder
106:36 - and the forward slash again and this is
106:39 - only important if you're going to use a
106:41 - subfolder if you have it hosted at the
106:43 - root you don't need to do this it's only
106:45 - if you have a subfolder
106:47 - but it's likely that you're going to
106:49 - have that i think
106:51 - so say this one then we have to go into
106:54 - our
106:54 - package.json file
106:57 - you have a property called homepage and
106:59 - inside here you can just write the whole
107:02 - complete url to your application so in
107:05 - my case it will be
107:06 - webenfalc.com react video player so put
107:10 - in your own url there and also be sure
107:12 - that you don't have a typing arrow here
107:14 - you have to have a coma because this is
107:15 - a new property in this object here
107:19 - save this one and this is really all
107:21 - there is to it now we have to go into
107:23 - our console
107:25 - we have to break our application here
107:28 - with control and c and then we just run
107:31 - npm run build
107:33 - and press enter and create direct app
107:36 - will create this build folder for us
107:38 - as you can see here it has built some
107:40 - files for us here we go into our finder
107:43 - and you see we have this new build
107:44 - folder so these are the files that you
107:46 - just copied to your server so grab this
107:49 - file and upload them to your hosting
107:51 - server and it should work
107:54 - and there's also one more thing you have
107:55 - to think of and that's the dot ht access
107:58 - file and this is really
108:00 - where it can look very different
108:03 - depending on the hosting company your
108:04 - server and where you're going to host
108:06 - this one but i can just show you what
108:09 - works in my case so i create a new file
108:12 - here and i copy and paste this one
108:14 - this one here goes in the dot htaccess
108:17 - file in the folder where you host your
108:20 - application what this will do is it will
108:22 - always route back to the index.html on
108:25 - the server because we want our react
108:27 - application to do the routing and this
108:29 - is really important course if you don't
108:31 - have this i've i've had a lot of
108:33 - headache with these things a lot of
108:36 - times and if you don't have this one it
108:38 - will not work it will probably show you
108:40 - the start page but if you click another
108:42 - video here it will throw you an error
108:44 - because it won't find this one here as
108:46 - it's in a subfolder and we also have
108:48 - this id here and it won't work because
108:51 - it's trying to route this on the server
108:53 - and we want to do this routing in the
108:55 - application that's why we fall back to
108:58 - the index.html file
109:00 - so this is the end of this course i hope
109:02 - you learned something and i have had a
109:05 - blast creating this one and showing this
109:07 - for you hopefully i see you in my future
109:09 - courses i intend to do a lot more of
109:11 - them and i wish you all a great time and
109:14 - happy coding thanks
109:17 - hi guys hope you're enjoying the react
109:19 - hooks course i thought i could show you
109:21 - how to use the use callback hook in this
109:24 - little bonus video today so what i've
109:26 - done here i set up a really simple react
109:28 - app here it's just this button that
109:30 - generates a random number here and as
109:33 - you can see in my code here i just have
109:36 - the app component and the button
109:38 - component and of course the index so
109:40 - what's going on here yeah in our app
109:42 - we're using the hooks in a functional
109:45 - component just as in the course and i
109:47 - created a callback for the button so
109:50 - when the button is clicked this callback
109:52 - is invoked the button that receives the
109:55 - callback and i also console log what's
109:58 - happening here so
109:59 - if we start looking at the application
110:02 - and press the button here you can see i
110:04 - console log out when i click and i also
110:07 - cancel log if the button is rendered so
110:10 - first of all we can just google use
110:13 - callback and go to the react home page
110:17 - and we have it down here
110:21 - and as you can see it returns a
110:22 - memorized callback and this is because
110:25 - in the functional components when you
110:27 - render the component it renders
110:29 - everything again and if we look in our
110:31 - code for example or app.js or app
110:33 - component when this one re-renders it
110:36 - will go through all of this code again
110:38 - and create the callback over and over
110:40 - again and there's also many that's using
110:43 - inline functions here for the callback
110:46 - like so and you do something here inside
110:49 - this and this anonymous function will
110:52 - get recreated every time you click so
110:55 - there will be a lot of these ones and
110:57 - that's no good if you have a really
110:58 - large application to be honest react is
111:01 - a pretty good and optimized library so
111:04 - you don't have to worry about this
111:05 - really but there's a lot of people out
111:07 - there worrying about recreating
111:09 - functions and callback functions so what
111:12 - we do in a regular class component we
111:15 - can remove this one
111:17 - and just go back to what it was before
111:20 - here
111:21 - and we just call the function up here
111:24 - instead and then it will not get
111:25 - recreated every time but that's in the
111:28 - class components and they work different
111:31 - from the functional components so we
111:33 - have to do something else here for this
111:34 - one to not get recreated every time and
111:37 - if we read a little about the use
111:39 - callback hook here pass an inline
111:41 - callback and an array of inputs
111:43 - use callback will return a memoized
111:45 - version of the callback that only
111:47 - changes if one of the inputs has changed
111:50 - so you can kind of send in this array
111:52 - here just like we did with the use
111:54 - effect hook and
111:55 - this one will control when the callback
111:58 - function will renew itself and if you
112:00 - don't want to renew it just like with
112:02 - usefx you can just send in an empty
112:04 - array so this is useful when passing
112:06 - callback to optimize child components
112:08 - that rely on reference equality to
112:10 - prevent unnecessary renders eg should
112:13 - component update so when this one
112:15 - creates a new callback on every render
112:18 - even if the callback haven't changed the
112:21 - shell components will think that it's a
112:23 - new prop that's being sent in and will
112:26 - re-render and of course you have to do
112:28 - something to control also what props are
112:31 - being sent to your component but i'll
112:33 - show you that in a second so what can we
112:35 - do here because this one is being
112:37 - recreated every time
112:39 - we click on this one it creates a new
112:41 - one
112:42 - so we can firstly import the use
112:45 - callback
112:46 - hook like so use callback and then it is
112:50 - as simple as just wrapping this one
112:55 - like so and we also want to pass in an
112:57 - empty array for this one because we're
113:00 - not going to need to recreate this one
113:02 - we just have this new state here that's
113:06 - creating a random number when we click
113:08 - this one
113:09 - so it should look the same all the time
113:11 - we don't have to recreate it so we just
113:13 - create this callback function once and
113:15 - we do that by sending in an empty array
113:18 - so if we save this one
113:20 - and we click and we can see that nothing
113:22 - has really changed here the callback
113:25 - function itself is just created once but
113:27 - we can't really see it now so
113:29 - we can test this one by go into our
113:32 - button.js file there's also one new
113:35 - thing in react they call react.memo
113:38 - and this one if you use the react memo
113:40 - it will make this functional component
113:43 - to check the props and if the props
113:45 - aren't changed it won't re-render itself
113:48 - and this one you don't have to import
113:50 - anything special you just write react
113:52 - dot memo and you wrap your component in
113:56 - that one like so so if we click this one
113:58 - you can see that we're not re-rendering
114:00 - the component now and that's good
114:02 - because before we had this react memo
114:06 - say this one again you can see i have
114:08 - this console log here
114:11 - every time the app is re-rendered the
114:13 - button component also gets re-rendered
114:16 - but by using the memo here
114:22 - like so we are making sure that this
114:24 - component will check the props before it
114:26 - decides if it should re-render or not
114:29 - and because we use the use callback hook
114:32 - here we are not recreating this one in
114:34 - each render so this will work now and as
114:37 - i said there's not a lot of performance
114:40 - issues here so you don't really have to
114:41 - do it and that's why i didn't show this
114:44 - one also in the course where we create
114:46 - the video player because you're not need
114:48 - to do this in this kind of small
114:51 - applications but it could be good to
114:53 - know what the use callback is and now
114:56 - you know what it is and what you can use
114:58 - it for so hope this little bonus video
115:00 - was worth something to you and you
115:02 - learned something i also hope you enjoy
115:05 - my react hooked course and that it's
115:07 - going great you can also hook me up on
115:09 - twitter at web and funk if you want to i
115:11 - started to share small code tips there
115:14 - especially in react but also other
115:16 - things so this is it i hope you enjoyed
115:19 - it see you