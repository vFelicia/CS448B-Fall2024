00:00 - Master react by Building 25 different
00:02 - projects and if you follow along you'll
00:04 - be ready to interview for a job as a
00:06 - react developer sanum created this
00:09 - course he's an experienced react
00:11 - developer hello everyone and welcome so
00:13 - in this particular video we are going to
00:15 - create 25 react just projects from
00:17 - scratch so all the projects that we will
00:19 - be learning in this one those are
00:22 - created from a interview point of view
00:24 - so in top product based companies there
00:27 - will be always around that we call as a
00:29 - frontend interiew round or browser
00:31 - coding round so in that round
00:33 - interviewer will give you a simple to
00:35 - midlevel assignment and you have to
00:37 - complete that questions within a given
00:39 - time frame so it varies from 30 minutes
00:41 - to 1 hour I can guarantee you that all
00:44 - the projects that we will be learning if
00:46 - you complete all of them because each
00:48 - and every project is associated to a
00:50 - particular concept and I will highly
00:53 - suggest that whenever you will watch
00:54 - this video try to code along it will
00:57 - definitely going to help you so let's
01:00 - quickly see what are the projects that
01:01 - we are going to build so first we'll
01:04 - start with this very famous accordion so
01:06 - here we will be learning two concept so
01:08 - one will be a single selection so every
01:11 - time you will click only one will open
01:14 - at a time then we will be learning this
01:16 - multi selection so in this case you will
01:18 - be able to open multi multiple accordion
01:21 - all right next we'll move to this random
01:24 - color generator where we will be
01:26 - learning how to create both hex random
01:29 - color and also RGB random color so here
01:32 - you can see that currently we are
01:34 - creating hex color if I now click on
01:37 - this Generate random color button so it
01:39 - will automatically create random hex
01:41 - color if I click now on this RGB color
01:44 - so now this will create a random RGB
01:47 - color then we'll move to very famous
01:49 - star rating questions and I think I
01:51 - don't have to explain this one this is a
01:53 - very very very famous interview
01:55 - questions after this we will be
01:57 - basically learning this image slider
01:59 - where we will be fetching the list of
02:02 - images from a API endpoint and then on
02:04 - top of it we are going to implement this
02:06 - slider
02:08 - functionality after this we'll be
02:10 - implementing this load mode data project
02:12 - so here basically we'll be getting some
02:14 - certain amounts of or basically certain
02:17 - data from API endpoint and every time we
02:19 - will be clicking on this load Moree
02:21 - products button it will uh basically
02:24 - face the next set of
02:26 - data then after this we are going to
02:28 - implement this next review so this is
02:31 - also very very very famous interview
02:33 - questions here they will basically give
02:34 - you some Ned Json structure and from
02:37 - that structure you have to recursively
02:39 - implement this nested review all right
02:42 - and also you can basically call this one
02:44 - as Dynamic navigation or dynamic menus
02:46 - also then we will be creating this QR
02:49 - code generator so here you have to give
02:52 - some input and Bas on this input it will
02:54 - automatically generate some QR code
02:57 - after that we'll be implementing this
02:59 - light and dark dark mode so here on
03:01 - click of this button you will be able to
03:03 - basically change the theme and also we
03:05 - going to save this current theme into
03:07 - our local storage for this one we are
03:09 - going to implement a custom hook and
03:12 - here throughout this particular project
03:14 - apart from the QR code one we are not
03:17 - going to use any third party Library
03:19 - packages all right then after this we
03:22 - will be implementing this scroll IND
03:23 - indicator and if you noticed here on the
03:25 - top we are getting this scroll indicator
03:27 - all right so this is basically part of
03:29 - this particular project so every time we
03:31 - will scroll this will basically give you
03:33 - the progress how much the user already
03:36 - scrolled after this we are going to
03:38 - implement the custom tabs so this is
03:41 - also a very famous interview questions
03:43 - and then we'll be implementing this
03:44 - custom model popup so if I click here
03:47 - this will open this custom model then we
03:50 - will be implementing this GitHub profile
03:52 - finder so here you need to give some
03:54 - random name and if this particular user
03:57 - exists so this will basically fetch the
04:00 - details of this particular user from the
04:02 - geub API and based on this it will give
04:04 - you the data after this we are going to
04:06 - implement this search autocomplete so
04:09 - here whatever you will be typing uh for
04:11 - this one also you're going to face the
04:13 - data from API all
04:15 - right then we will be implementing this
04:17 - Tic Tac to so I think this is also a
04:19 - very famous interview questions there
04:21 - will be also restart functionality then
04:24 - we'll be implementing this very
04:25 - interesting uh project this is called
04:27 - the feature flags flags so what
04:29 - basically happens in very large
04:32 - companies so instead of changing the
04:35 - feature directly in the code sometimes
04:37 - what will happen they will basically
04:39 - give you a API endpoint and that in that
04:41 - API response there will be some data and
04:44 - from that particular data you will be
04:46 - able to understand that what are the
04:47 - features you have to enable and what are
04:49 - the features you want to disable without
04:51 - changing anything in the code and for
04:53 - this one we are going to implement this
04:55 - particular project and this uh questions
04:57 - is also asked in very top level product
04:59 - based compan companies all right so this
05:00 - is a very important one and after this
05:03 - we will be
05:04 - implementing these three custom hooks so
05:07 - the first one will be very famous this
05:08 - is called use fet hook and after this
05:11 - we'll be implementing this use outside
05:14 - click hook so if I now click on this so
05:16 - content and click outside of it this
05:18 - will basically toggle this content and
05:21 - then we'll be implementing this use
05:23 - window resize so if I now resize this
05:25 - window this width and height will
05:26 - automatically change and at the end
05:28 - we'll be implementing this scroll to top
05:30 - and bottom feature where on click of
05:32 - this you'll be able to scroll to the
05:34 - bottom and if I click on this scroll to
05:36 - top so it will automatically scroll to
05:38 - the top all right so these all are the
05:41 - very simple projects that we are going
05:43 - to build and after this we'll be moving
05:44 - to some mid-level projects so the reason
05:47 - for this mid-level projects is that
05:49 - sometimes some uh in uh some companies
05:51 - will give you some assignment and you
05:53 - have to complete those assignment like
05:55 - within one or two days so in that case
05:57 - they can give you some mid-level
05:59 - projects instead of giving you some
06:01 - simple one so for this one we are going
06:03 - to implement this weather application so
06:05 - here I can give some uh city name and
06:08 - based on that it will automatically face
06:09 - the data all right then we'll be moving
06:12 - to this food recipe where uh we will be
06:15 - basically able to search reip is based
06:17 - on some input that we'll be giving and
06:20 - you can see that we'll be getting the
06:21 - data if I click on this recipe details
06:24 - so it will face the recipes we'll be
06:26 - able to add the uh recipes to the
06:28 - favorites if I go to favorites will be
06:30 - getting the favorites here all right and
06:32 - if I go here this will be automatically
06:35 - updated so let's say if I now go on this
06:37 - one so you can see that this is now add
06:39 - to favorites if I click this one go to
06:40 - favorites this uh Apple gallet this is
06:44 - already added if I now go to the
06:45 - homepage and click on this one so you
06:47 - can see that we are still getting
06:49 - because this is already added in the
06:50 - favorites after this we'll be adding
06:52 - this or implementing this shopping cut
06:54 - so for this one we are going to use
06:56 - Redux toolkit so we'll be able to add to
06:58 - the C
06:59 - and here we'll be getting the result
07:01 - we'll be able to remove and after this
07:04 - we'll be implementing this expense
07:05 - tracker for this one we are going to
07:07 - chakra UI and some of the projects also
07:09 - we going to implement using tnd CSS so
07:11 - here you will be able to add some
07:13 - expense let's I'll add a expense give
07:16 - the amount and then check this one as
07:19 - expense click on ADD so we'll be
07:20 - basically getting the data here and also
07:22 - we'll be getting the data as a chart
07:25 - View and at the end we are going to
07:27 - implement this monack applications where
07:29 - we are going to use mongodb express so
07:31 - here uh we will be able to add a new
07:33 - blog so let's say I'll add new blog
07:36 - added and this one we're going to store
07:38 - in a database we will be able to add the
07:41 - uh edit this one so let's say I'll edit
07:43 - this will be edited and also I'll be
07:46 - able to delete this one so these all are
07:48 - the projects that we are going to build
07:49 - in this whole video and I can guarantee
07:51 - you that this video is going to help you
07:54 - in so many ways so that's all for the
07:56 - intro now without further wasting any
07:58 - more time let's get started and good
08:00 - luck all right everyone so let's start
08:02 - with our first project and that will be
08:05 - simple accordian component so here we
08:06 - are having two types of accordian
08:08 - feature one will be single selection and
08:10 - you can see that there is a button so on
08:12 - click of this you'll be able to enable
08:14 - multi selection now in interview the
08:16 - questions some will be something like
08:18 - this that they will give you some dummy
08:20 - data and based on that you have to
08:22 - create the accordion so if I do single
08:24 - selection so if I click only one so only
08:26 - one will be opened at a time you can see
08:28 - that once you'll complete this feature
08:31 - if there is a time left so what
08:32 - interviewer will do they will try to
08:34 - make this uh project little bit complex
08:37 - so they will say that now let's say you
08:39 - have to do or enable multi selection so
08:41 - on if I click this one so now the multi
08:43 - selection is enabled so if I click here
08:45 - you can see this is opened if I click
08:47 - here this is also opened so this is
08:50 - something like what we are going to
08:51 - build so let's start working on this
08:53 - first project all right everyone so
08:55 - let's get started so the first thing is
08:57 - that uh you can see I created a simple
08:59 - reactj project now what we are going to
09:01 - do each and every project that we will
09:03 - be creating for this particular video
09:06 - inside this Source folder we are going
09:07 - to create a components folder and inside
09:09 - components each and every project will
09:12 - be a simple component because throughout
09:14 - this particular video we'll try not to
09:16 - use any third party Library package
09:17 - because whenever you'll give any browser
09:19 - coding interview most of the times your
09:21 - interviewer will expect you to create
09:24 - everything from scretch so the first one
09:27 - will be to create accordion now there
09:30 - can be two things now whenever you will
09:32 - start a browser coding interview the
09:34 - first time interviewer will start with a
09:36 - simple approach so first he will ask all
09:39 - right so I'll give you some uh dummy
09:41 - data so now please create a simple
09:43 - accordian component now obviously you
09:46 - can either use a JavaScript or any uh
09:49 - framework that you like so most of the
09:51 - times because react is a very popular so
09:54 - I believe that most of the times we are
09:55 - going to choose
09:57 - react and then once you solve the simple
09:59 - approach then they will give you some of
10:01 - the complex variation so now you can see
10:04 - that what I'll do inside this Source
10:05 - I'll create a folder and let's give this
10:07 - one name as components and inside
10:11 - components uh I'll create another folder
10:14 - and I'll give this on name as
10:16 - accordion now you can see that what I've
10:18 - done I'm having some dummy uh data here
10:21 - so this dummy data I'm going to use and
10:23 - also in the interviewer also most of the
10:25 - times your interviewer will give you a
10:27 - dumy data or else sometimes they will
10:29 - say that okay you create any dumy data
10:31 - that you
10:32 - like now inside this what I'll do I'll
10:35 - create our
10:37 - index. jsx and also we'll create another
10:41 - file that will be styles. CSS now inside
10:45 - this I'm going to create another file
10:47 - and this will be our
10:49 - data.js let me just minimize this one
10:52 - little
10:52 - bit all right now what I'm going to do
10:55 - I'll just copy this
10:57 - one and I'll p paste it here I'll do
11:00 - export default and this
11:04 - data all right now first thing what you
11:08 - should always do while giving an
11:10 - interview is that always explain the
11:13 - approach that you are going to use and
11:15 - that is very very very important believe
11:16 - me or not so it's not like that they
11:19 - have given you one example and then you
11:21 - start uh writing your code immediately
11:23 - first you have to explain the approach
11:25 - that how you are going to do this
11:26 - particular uh uh problem
11:30 - because it will be very very easy for
11:32 - your interviewer that okay you got the
11:33 - problem and based on this approach you
11:35 - are basically solving it now what we are
11:38 - going to do first obviously so what you
11:40 - can say that okay I created a component
11:42 - folder and inside that I'm creating
11:44 - another acarian folder the main re
11:46 - reason being is that I'm creating this
11:48 - one as a usable component so that in
11:50 - multiple places we can use this
11:52 - component throughout the application so
11:54 - here I'll create our export default
11:57 - function let's give this one name is
12:01 - accordion now here uh let's uh do one
12:05 - thing uh what we'll do we'll simply
12:08 - return some jsx for now so we having div
12:11 - and I'll give this on name as
12:14 - accordian all
12:16 - right now let's save it so now this
12:20 - component we are uh we want to use in
12:22 - this
12:23 - app.js so I'm going to remove
12:26 - everything and
12:27 - then I'm going to uh give a comment so
12:31 - this is our accordian
12:35 - component and here I'm going to import
12:38 - this
12:39 - component now let's save it so we
12:43 - getting accordion here now the first
12:45 - thing is that uh there can be two types
12:47 - of accordion one will be let's say your
12:49 - interview give you first you complete a
12:53 - single
12:54 - selection so basically each and every
12:57 - time you select something you have to
12:58 - open only one accordion menu at a time
13:01 - and then uh the complex variation will
13:03 - be you can basically will be able to
13:06 - open multiple selection also all right
13:09 - so let's start one by one so for the
13:11 - first selection you have to explain that
13:13 - all right because we are doing as a
13:14 - single selection so I'll take a straight
13:17 - here and this will be the selected and
13:20 - set
13:22 - selected so this is basically the single
13:24 - one that you will be selecting and
13:26 - because first time we'll not select
13:28 - anything thing so here I'm going to use
13:30 - the UST State and I'll keep this one
13:32 - name as null now if you noticed here
13:36 - here we are having this ID this is the
13:38 - question and this is the answer so based
13:40 - on this ID you will be able to track
13:43 - that which accordian item you're
13:45 - currently clicking and this is very
13:47 - important all right now here what I'm
13:49 - going to do so the first thing is that
13:51 - let's quickly create the uh structure
13:54 - here so now uh let's give this on name
13:57 - as a class name I'll give this on name
13:58 - name is rapper now style we are going to
14:01 - do later first let's complete the
14:03 - functionality now inside this I'm going
14:05 - to take another
14:07 - div and here I'll give a class name of
14:12 - accordion all right now here what I'm
14:15 - going to do so we are having this data
14:17 - here so I'm going to take this data now
14:20 - you should always cover the age cases so
14:22 - let's say you are having the data you
14:24 - know that this is a dummy data So
14:25 - currently we are having the data length
14:27 - but let's say you getting this dat from
14:29 - a API so in that case let's say the a
14:32 - data length is empty so in that case
14:35 - what you should always check all right
14:36 - if the data and and data. length if this
14:40 - is greater than zero then we are going
14:42 - to do something or else you will show
14:44 - something like uh let's say no data
14:47 - present no data
14:51 - found all
14:52 - right so here what we are going to do do
14:56 - data do map so this will be our data
15:00 - item and here what we are going to do
15:02 - we'll return another
15:05 - div so this will be our class name and
15:07 - I'll give this name as
15:09 - item and here uh what we'll do we'll
15:12 - take another div inside of
15:15 - this and here let's give a class name so
15:19 - this will be our
15:20 - title and here inside this we'll take A3
15:26 - and I'm going to render the data item
15:28 - dot question so this will be basically
15:31 - our header all
15:34 - right and also after this take another
15:37 - span
15:39 - here and we'll basically show a expand
15:42 - or uh like cups icon but in in interview
15:46 - we will not get that much time so far
15:48 - now we'll do simply like a
15:50 - plus all
15:51 - right so now let's save
15:55 - it let's see how it is looking all right
15:58 - so we are getting the question and this
16:00 - is the icon this is fine so now what we
16:04 - need to do
16:05 - basically so after this we need to check
16:09 - that which uh item you are clicking and
16:13 - that you want to so that answer you want
16:15 - to show at a time so this is a single
16:17 - selection so what we can do simply
16:19 - whenever we'll click on this title so
16:23 - here this is our title so we'll take on
16:26 - click here now so so here for now I'll
16:30 - do the single selection so we'll do
16:31 - handle
16:33 - single
16:35 - selection all right so this will be a
16:38 - method so this will function
16:40 - handle single
16:45 - selection and this will basically
16:47 - receive the current ID of that
16:49 - particular question so you'll be get
16:51 - current
16:53 - ID as a argument so here I'll just
16:56 - invoke this and here I'll just pass this
17:00 - current ID so here we are having this ID
17:03 - so this will be data item do ID so this
17:07 - one will be receiving here so now let's
17:09 - see if I log this get current ID so now
17:14 - let's save
17:16 - it so we'll go to console let's see if I
17:19 - click here we getting 1 2 3 and we're
17:23 - getting
17:24 - four so now you basically know that uh
17:27 - on click of each and everyone we are
17:29 - getting the current ID so we just have
17:30 - to set this one to the uh this method
17:33 - set selected method but here one thing
17:35 - we need to do so here I'll take this set
17:38 - selected and here first I'll just uh
17:41 - save this one as get current ID and
17:43 - let's see what is happening so that
17:45 - means we are setting this current ID
17:47 - that we are clicking and now after this
17:49 - what we can do we can simply check if
17:51 - this selected is equal to equal to data
17:54 - item Ro ID that means the current data
17:57 - item ID is equal to equal to current
17:59 - selected that mean which we are clicking
18:01 - let's say if I click on two so this
18:03 - selected will be two and this two is
18:05 - equal toal data item. ID that means we
18:08 - want to s that accordian item only all
18:10 - right or else this will be null so here
18:13 - what I'll do I'll just simply return a
18:16 - div and
18:18 - here I'll render this data item dot this
18:23 - will be answer and here I'll give a
18:26 - class name of let's say content
18:30 - so now let's see what is happening if I
18:31 - know save it and let's log this selected
18:35 - also so that you'll be able to
18:37 - understand if I now go back let's say
18:39 - click here so now we clicked on this
18:42 - first item so we getting the first
18:43 - answer if I click here we are getting
18:45 - the second one so you can see that this
18:46 - is automatically getting closed and this
18:49 - is the fourth one now what will happen
18:50 - if I click here again so this is not
18:52 - closing right so how we are going to do
18:54 - that so to do this one what you can do
18:57 - basically here you have to check that if
19:00 - the current ID is already selected so we
19:03 - are having four and this is the one that
19:05 - we are clicking here so in that case we
19:07 - can again make this one as null so if I
19:09 - click here so it is three so here what
19:11 - we can do simply we can basically check
19:14 - if this gate current ID which is three
19:18 - is equal to equal to this selected that
19:20 - means already selected so we'll make
19:22 - this one as null or else this will be
19:24 - get current
19:26 - ID so now save this let's say if I click
19:29 - here so now it is null if I click here
19:31 - again so this is three so let's say if I
19:33 - click three again so it will be null
19:35 - again if I click here this is four three
19:39 - this is two this is one all right so now
19:42 - this is fine now let's quickly complete
19:43 - the style and then we will be moving to
19:45 - the multiple approach so now let's go to
19:47 - our style. CSS now the first thing is
19:51 - that we are having this
19:53 - wer now obviously we'll not uh um
19:57 - basically cover much of The Styling
19:59 - throughout this particular video because
20:00 - our objective is to complete the
20:02 - function because in interview obviously
20:04 - you'll get a very limited amount of time
20:06 - and in that time you have to not only
20:07 - complete the simple approach but also
20:09 - they will ask some multiple or complex
20:12 - variation and obviously in interview
20:14 - will'll face most of the times I can
20:16 - guarantee that they will not expect any
20:18 - kind of CSS from you only basic styling
20:20 - is more than enough so this is exactly
20:23 - what we are going to do so we'll do
20:25 - display Flex height will do 100 VH
20:29 - uh with we'll do 100
20:32 - VW we'll do justify content Center and
20:35 - align items will do
20:38 - Center then I think we are having a
20:40 - accordian so let's copy
20:44 - this so here we'll do a width of 500
20:49 - PX then we are having item so for this
20:53 - one we'll do a background so for this
20:56 - one we'll do this background six
21:00 - 4101 and we'll do a margin bottom
21:03 - of 10 PX and we'll do padding of 10 PX
21:08 - 20
21:09 - PX then I I think we having the title so
21:12 - we'll do title so here we'll do color as
21:17 - white we'll do display as
21:20 - Flex we'll do justify content as space
21:24 - between and we'll do align item as
21:27 - Center
21:29 - and we'll do cursor as pointer and at
21:32 - the end we are having the content so
21:35 - here we'll do color
21:36 - as
21:39 - white and we'll do height as
21:43 - Auto and now what we need to do we have
21:45 - to basically import this one in this so
21:48 - we do
21:50 - import
21:52 - styles do
21:55 - CSS let's save this let's see awesome
21:58 - so now if I click here so you can see
22:02 - that this is working fine now all right
22:06 - so now you have completed the simple
22:07 - approach so now they'll ask you how you
22:10 - can achieve that if I click here this
22:12 - will open again if I click here this
22:14 - will also open this will not close only
22:17 - it will close if I click here again so
22:19 - this will be a multiple approach and
22:21 - let's say they will ask you that how you
22:22 - can do that you are having a button so
22:25 - let's say enable multi- selection on
22:27 - click of that only you want to show
22:29 - multiple selection if I click here again
22:31 - it will show the single
22:33 - selection so this is a complex variation
22:36 - let's say so how we are we can do so
22:38 - first your uh job will be to create a
22:41 - simple button and this will be enable
22:45 - multi
22:48 - selection let's save it all right so we
22:51 - are having this button here and let's go
22:54 - to
22:56 - our so here we can do Flex direction as
23:01 - column and we'll do a gap
23:04 - of
23:07 - 20px okay then we'll do dot wrapper of
23:11 - button we'll just simply give padding of
23:13 - 10 PX 20
23:16 - PX and let's see how this is looking
23:19 - okay background will give uh this one as
23:22 - black and color will give white we'll do
23:27 - font style as
23:29 - bold sorry font weight will give as bold
23:34 - and font size will give
23:38 - 20px awesome and now we'll give a cursor
23:42 - as pointer and now let's use the same
23:44 - background so we copy this and we'll use
23:47 - the same here also
23:55 - sorry okay
23:58 - all right so now what you need to do
24:00 - again you have to take another state not
24:02 - only one but two so here I'll do const
24:06 - enable so we'll do enable multi
24:12 - selection set
24:15 - enable multi selection and this will be
24:19 - U state of
24:23 - false all right and again you have to
24:26 - take another state and that will be
24:27 - multi select so whenever you select
24:29 - multiple items you have to store
24:31 - multiple IDs so here I'll do const
24:34 - multi
24:36 - multiple
24:38 - selected or you can also keep this one
24:41 - as multiple set
24:44 - multiple and this will be US state of
24:48 - empt array all right because you have to
24:50 - store multiple uh
24:52 - here so now what we can do basically the
24:55 - first thing is that you have to enable
24:57 - this m multi selection so here I'll do
24:59 - on click and on click of this will do
25:02 - set enable multi selection will be not
25:05 - equal to enable multi selection so that
25:07 - means we are basically toggling this one
25:11 - so if this is false on click of this
25:13 - button this will be true and vice versa
25:15 - now again what you can do here on this
25:18 - on click so if this enable multi
25:21 - selection is true so that means you will
25:24 - uh create another function that will be
25:26 - handle multi selection or this will be
25:28 - handle single selection so I'll do
25:30 - function handle multi obviously you can
25:34 - do the same in this function only but
25:35 - I'm creating a separate so that it is
25:37 - easier to understand so this will be
25:39 - handle multi
25:42 - selection this is also receive the
25:44 - current
25:48 - ID and here what we can do we'll do it
25:52 - if this is
25:54 - true
25:55 - so uh this will basically get the handle
25:58 - multi selection and here also we pass
26:01 - the data item.
26:04 - ID all right so that means if this
26:07 - enable multi selection is true so that
26:10 - means here we are doing this handle
26:12 - multi selection if this is false we only
26:14 - handle with single selection okay so now
26:18 - what we need to do the first thing is
26:19 - that whenever we clicking uh any
26:21 - particular item we have to store this
26:24 - one in this uh in this areay until
26:26 - unless we'll click the same item again
26:27 - then only you have to basically remove
26:29 - it so how we do that so we'll do let
26:32 - here first we'll copy the state from
26:36 - this state variable so that we don't
26:38 - mutate this state variable directly so
26:40 - copy
26:41 - multiple so this will be this multiple
26:44 - so first basically we are copying from
26:45 - this state and now we'll basically check
26:48 - the index of this current ID if this ID
26:50 - is already present in this array or not
26:52 - if this ID play and that means we
26:54 - already clicked on that so you have to
26:56 - if I click that that again you have to
26:58 - remove it from this are or else we'll
27:00 - push it so con find
27:03 - index of
27:06 - current ID so how we'll do that simply
27:09 - do it multiple sorry we'll do copy
27:13 - multiple do index of this gate current
27:17 - ID and now let's log here let's see what
27:20 - is
27:21 - happening if I now save it let's go
27:25 - back so now if I go to cons what will
27:27 - happen if I click here you can see this
27:29 - is happening because currently this
27:31 - multi selection is not
27:32 - enabled but if I now click here now
27:36 - let's click you can see we are getting
27:38 - minus one so that means this is coming
27:40 - here so that means this ID is not
27:42 - present in this array so what we going
27:44 - to do we can check if this find index is
27:46 - equal toal to
27:47 - minus1 so we'll simply do copy multiple
27:50 - dopus and we'll push this uh current ID
27:55 - all right else we'll do copy multiple do
27:59 - splice we'll remove it so we'll get the
28:02 - index so we'll remove this from this
28:05 - particular index and how many items we
28:07 - need to remove we need to remove only
28:08 - one item that's it now if I click here
28:11 - set sorry I have to set it to this state
28:14 - so set multiple will be this copy
28:18 - multiple okay now let's log here
28:21 - multiple also and let's see what is
28:24 - happening if I now save it let's go back
28:27 - we'll enable this one now click
28:31 - here sorry Let me refresh this
28:34 - again so we'll enable this one if I
28:37 - click here so you're getting one if I
28:40 - click here again we are getting 1 2 3
28:43 - and we getting four if I click here
28:45 - again you can see one will be removed so
28:47 - now 2 3 4 but you can see nothing is
28:49 - opening the reason is what we can do
28:51 - simply we can give condition here so
28:54 - basically here either we can simply do
28:57 - if this enable multi selection is true
29:00 - so you have to basically check it from
29:02 - this multiple or else you have to check
29:04 - it from this selected so simply we can
29:07 - do something like this so here we'll do
29:11 - or multiple do index
29:15 - of this data item do ID is not equal
29:21 - toal to
29:23 - minus1 all right this we can do or else
29:28 - if this is very difficult to understand
29:31 - if I now break it little bit so let's do
29:33 - it very uh one uh line by line so let's
29:36 - do something like this we'll do enable
29:38 - multiple selection if this is true so
29:40 - that means we are currently doing multi
29:42 - select so if this is true so then we'll
29:44 - check that in this multiple
29:47 - array this
29:49 - current ID is present or not ID is not
29:53 - equal to equal to minus one all right if
29:56 - this is true
30:00 - so we'll s this
30:04 - message or else we have to check if this
30:08 - selected is equal to equal to data item.
30:11 - ID then we'll show this this
30:16 - one that's it now let me just remove
30:19 - this or let's comment it out I'll
30:22 - explain again what we are doing so we
30:25 - are basically checking if this multi
30:26 - selection is true so you're checking in
30:28 - this multiple array if the current ID is
30:31 - current data item. ID is present or not
30:33 - so you're showing this if this is false
30:36 - so that means you have to check from the
30:37 - single one now let's see what is
30:39 - happening if I now refresh this now now
30:42 - enable multi selection is not enabled so
30:44 - if I click here we are getting only one
30:47 - at a time but now if I let's say enable
30:50 - this one so now this is open this is
30:53 - getting opened see if I click here now
30:56 - this is closed and this is working
30:59 - fine all right so this is another very
31:02 - very important uh uh question that you
31:05 - will get in some browser coding
31:07 - interview round now first they will ask
31:09 - you to create a simple accordion and
31:12 - then once you'll solve that then it will
31:13 - ask you to uh implement the multi
31:16 - selection so that's all for this
31:17 - particular project let's move on to the
31:20 - next one all right so the second one now
31:23 - this is also another very important
31:25 - interview question so here the questions
31:26 - will will be something like this that
31:29 - you are having a button and on click of
31:30 - this you have to create a random color
31:33 - so if I click here you can see that the
31:35 - random color is generated so now I
31:37 - actually tried to make it little complex
31:39 - so we'll be having two more button so if
31:41 - I click here it will obviously create a
31:43 - hex color so here you you can see that
31:45 - each and every time if I click hex color
31:48 - will be created if I try to create RGB
31:50 - color so now this is getting changed to
31:51 - R RGB color and if I click here so the
31:54 - RGB color will be selected uh so sorry
31:57 - created and here if I click again so you
32:00 - can see that this is now my hex color so
32:02 - this is another very very important very
32:04 - frequently interview question so let's
32:05 - try to implement this one all right
32:07 - everyone so let's start with our second
32:09 - one and that is to create any random
32:12 - color so how the questions will be asked
32:15 - uh let's say you are having one button
32:18 - uh like generate uh random color so on
32:20 - click of that button you have to let's
32:21 - say change the enter background of this
32:23 - particular page now obviously that will
32:25 - be very the simple approach and after
32:27 - that we'll be moving to the complex
32:28 - variation so let's do one thing inside
32:31 - components I'll create another folder
32:33 - and let's give this on name as random
32:36 - color so inside this I'll create another
32:38 - file and this will be index. jsx I'll
32:42 - just close everything else now here I'll
32:44 - do export default function and let's
32:48 - give this one name as random
32:51 - color and here uh we return some div all
32:56 - right
32:57 - and here let's do one thing let's give a
32:59 - class name of
33:02 - container and inside this I'm having one
33:05 - button and this will be Generate random
33:12 - color so how the color concept basically
33:15 - works now if you already have some idea
33:16 - on the CSS you know that for the hex
33:19 - color we are having this has and Then
33:21 - followed by six digit right and then we
33:24 - are having the RGB which is RGB
33:27 - and then you have to basically give the
33:30 - values here which will be like any
33:32 - random value and this will basically
33:34 - generate a color all right now obviously
33:37 - for now uh how this can be asked is that
33:41 - let's say you are having two more
33:42 - buttons one is like create hex color and
33:45 - one is to create RGB color now on click
33:48 - of each and every button whenever you
33:49 - click on this create RGB button so it
33:52 - will create RGB color if you click on
33:54 - this hex button it will create a hex
33:56 - color so that will be little more
33:58 - complex so let's see how we are going to
34:01 - uh create this so for this one what I'll
34:03 - do I'll create two more button so one
34:05 - will be button here and this will be
34:07 - create hex
34:10 - color and you have to create another
34:12 - mode button and this will be uh create
34:16 - RGB
34:17 - color all right now for this one uh what
34:22 - you need to do first again I told you
34:23 - that you have to explain the approach so
34:25 - you are going to uh going to take two
34:27 - State one will be to set the type so
34:30 - type can be either hix or RGB and the
34:33 - second one will be to store the current
34:35 - color so here I'll take const and this
34:38 - will be type of color let's give type of
34:43 - color set type of color and by default
34:49 - we'll take us St and here I'll keep this
34:52 - one name as hex so hex is our default
34:54 - color next we are having our color color
34:58 - set
34:59 - color and here I'm going to take this
35:02 - one as US state and the by default I'll
35:05 - take the black as our color all right
35:08 - let's remove this one for now this class
35:10 - name we don't need we'll keep this one
35:11 - very simple so now what I'm going to do
35:13 - I take our style uh here now the first
35:17 - thing we'll do we'll take a WID as 100
35:21 - VW we'll take a height as 100 VH we'll
35:26 - take the back
35:27 - ground so we're having this background
35:30 - now background will be this color that
35:33 - we are having all
35:35 - right so for now this is fine let's save
35:37 - it so now let's go to our
35:40 - app.js and here we take another one and
35:43 - this will be our random color
35:46 - component and here I'm going to just
35:49 - import the random color component let's
35:51 - save
35:53 - it and let's see what we are getting so
35:56 - so we getting this random color
35:58 - component let me just uh comment out
36:00 - this one all right so that it will be
36:02 - easier so I'll just comment out this
36:05 - accordion let's save it all right so now
36:08 - we are getting this three button so on
36:10 - click of this you have to generate the
36:12 - random color on click of here you have
36:13 - to create RGB color and on click of this
36:16 - you have to create a hex color so now
36:19 - what you will do the first thing is that
36:21 - we have to go here now the first thing
36:24 - let's keep this one very simple so we'll
36:27 - take on click method and here I'll do
36:29 - set type of color which will be a hex
36:33 - because on click of this I want to
36:35 - create a hex color and here I want to
36:39 - create a RGB color that's
36:41 - it now what we need to do we have to
36:44 - basically take another on click so here
36:46 - I'll do handle create random
36:51 - color so now this method I'm going to
36:54 - create here so this will be function
36:56 - handle
36:57 - create random
37:01 - color and here uh basically you have to
37:05 - check that whether you want to create a
37:08 - RGB color or you want to create a x
37:10 - color let's do something like this
37:11 - instead of creating like that we'll do
37:14 - here that if the type of color is equal
37:16 - to equal to
37:17 - hex so I will create a hex
37:21 - color a random hix
37:24 - color or I'll do hand create random RGB
37:29 - color so this will be our hex
37:33 - color and then this will be
37:37 - our RGB
37:39 - color so now how we are going to create
37:42 - a hex color now as I already told you
37:45 - that the approach will be like this
37:47 - you'll be having a has followed by six
37:49 - digit something like that all right so
37:53 - to do this one first you have to take
37:55 - the hex uh array now how we are going to
37:58 - create that so this will be consist of
38:00 - the following things so we can have
38:02 - numbers from 1 to 9 and then we can a
38:06 - alphabet or basically letter of a b CDE
38:09 - e f so here I'm going to take one 2 3 4
38:14 - 5 6 7 8 9 then we'll be having a
38:20 - b
38:22 - c d e and then f
38:27 - that's it so this will be our array of
38:31 - this hex now what we'll do we'll do let
38:34 - hex color so this will obviously start
38:37 - with our has and then what I'll do I'll
38:40 - do for let I equal to 0 now because the
38:45 - length will be of six so I'll do I less
38:47 - than 6 because it is starting from zero
38:51 - and then we'll do
38:52 - i++ and here I'll do Hex
38:55 - color
38:57 - plus equal to and now what we need to do
39:00 - basically we have to create a random
39:02 - color now how we are going to create
39:04 - this random color this random color will
39:06 - be based on this length of this
39:08 - particular uh hex that you have created
39:11 - so for this one what we're going to do
39:13 - we create another function and this will
39:15 - be handle create uh let's give this one
39:18 - name as function
39:21 - utility random color utility
39:27 - now this will basically receive the
39:29 - length and here it is very very simple
39:31 - what we need to do to basically floor
39:33 - this so we'll do math. floor and then
39:36 - you have to take the math. random and
39:39 - then we are going to multiply this one
39:41 - with this length that we'll be
39:44 - receiving all
39:47 - right so this will basically give you
39:49 - the random color so now what we are
39:52 - going to do will do Hex of this random
39:56 - color utility and here we are going to
39:57 - pass this XX do length so this is the
40:01 - length so this will basically add the
40:04 - rest of the color here after this all
40:07 - right so if I now log
40:09 - this and let's log this hex color let's
40:13 - see what is happening so if I now go
40:17 - here let's go to our console I'll create
40:20 - on this click on this hex color and
40:22 - let's click on here so you can see that
40:25 - we are getting a random color here
40:27 - every time this will be basically
40:29 - generated so now this is very very
40:31 - simple you just have to take set color
40:33 - so you're basically setting this and
40:35 - then it will be our hex
40:37 - color all
40:39 - right so only this part is very very
40:42 - important that which uh values that you
40:44 - have to take uh into consideration
40:46 - inside this areay if I now click here
40:49 - you can see the background is getting
40:52 - changed and same will be for RGB color
40:55 - so RGB color is actually pretty simple
40:57 - so what you can do simply here we will
41:00 - basically create our R GB these three
41:02 - value so here I'll do const R and this
41:06 - will be our random color utility and
41:08 - here you have to basically multiply by
41:10 - 256 because this is the maximum length
41:13 - that you can pass same will be for R
41:16 - same will be for G same will be for B so
41:19 - this will be r
41:20 - g and then this will be B and now here
41:24 - we'll do set color and here will take
41:26 - template literals now here I as I
41:29 - already told you it will start with RGB
41:31 - and then you to pass this value so it
41:33 - will be r value then it will be
41:35 - our G value you have to also give
41:39 - comma and this will be our uh B value
41:43 - that's
41:43 - it now to check this one let's do one
41:47 - thing uh after this button we'll take
41:49 - another div
41:50 - here now here I'll do class name we'll
41:54 - do display sorry not class last name
41:56 - we'll do direct style so we'll do
41:59 - display
42:01 - as display as
42:05 - Flex We Do justify content
42:09 - Center we'll do align
42:12 - items as
42:14 - Center we'll do color as
42:18 - white we'll do font
42:21 - size as
42:24 - 60px and also do a margin top of 40 50
42:30 - PX and inside this we are going to uh
42:33 - let's do one thing uh let's take
42:36 - something like this we'll take
42:38 - H1 so here this will be our
42:42 - color and we'll take a A3 here and this
42:47 - will be our type of
42:50 - color so here we can do something like
42:53 - if the type of color is equal to RGB so
42:56 - show here RGB
42:58 - color or else this will be hex
43:06 - color that's it let's save it let's see
43:11 - what is happening so we are getting XX
43:13 - color and now if I click here so you're
43:15 - getting XX color let's click on this RGB
43:18 - now you can see this is getting changed
43:20 - but this is not getting changed so what
43:23 - we can do simply this is another
43:24 - interesting thing so you can take use
43:27 - effect and every time this type is
43:31 - basically getting changed so here we are
43:33 - having this type of color so again we
43:36 - can check if the type of color is equal
43:38 - to equal to RGB so we'll call this
43:42 - handle create RGB color else we'll call
43:46 - this handle
43:48 - create uh hex
43:51 - color all
43:55 - right
43:56 - all right now let's click here so you
43:58 - can see RGB and this is looking very odd
44:01 - let's do one thing uh let's make this on
44:03 - Flex dxn
44:05 - as column and we'll do gap of
44:13 - 20px okay let's click X
44:16 - color you can see this is working fine
44:18 - if I click here so you're getting RGB
44:20 - color
44:21 - here and also I think another thing what
44:24 - we need to do and that is
44:26 - we have to go here and we have to give
44:29 - bracket
44:32 - here all right now click
44:36 - here so you can see this is getting
44:39 - changed if I click X here so you're
44:41 - getting X color now let's
44:43 - generate if I click here this is getting
44:46 - changed and this is working fine so
44:49 - that's all for this particular project
44:50 - now this is also another very
44:51 - interesting project now F first of all
44:53 - another thing is that if you want to
44:55 - create the same in JavaScript the
44:57 - function will be exactly same so you
44:59 - just have to create your HTML structure
45:01 - and then you have to basically take all
45:02 - of this using document. get element by
45:05 - ID or query selector and then on click
45:07 - of this button or basically have to add
45:09 - event listener and then on click of this
45:11 - even listener you have to basically
45:13 - write the same functions that you have
45:15 - written here nothing will change all
45:17 - right so that's all for this particular
45:18 - video let's move on to the next one all
45:21 - right so the third one I think we don't
45:23 - have to discuss much we all know that
45:25 - this is one of the most frequently asked
45:28 - questions in interview mostly in product
45:30 - Bas companies like Adobe Amazon Atlas in
45:32 - so here you are having this star and if
45:35 - you H basically you have to show that
45:37 - how many Star you are currently
45:39 - selecting and if I click and then remove
45:41 - so those many starts you have to
45:43 - basically select it and again if I just
45:45 - do hover and then click so this will be
45:47 - updated so this is a very very famous
45:49 - interview question so let's try to
45:50 - implement this one in react CH all right
45:53 - everyone so let's move on to the next
45:54 - one so as I already told you this start
45:56 - rating is another very very important
45:58 - questions that you might be ask in your
46:00 - interview now there can be two things
46:02 - either your interviewer can say that you
46:04 - have to basically implement this one in
46:06 - a framework let's say like reactjs or
46:08 - angular whatever you like or they
46:11 - actually the requirement can be that
46:12 - they will say that you have to implement
46:14 - this one in pure vanilla JS so for this
46:16 - one what I'll do in the next video that
46:18 - I'll be creating whatever projects that
46:20 - I'm creating for this particular video I
46:22 - will be implementing these projects in
46:24 - simple vanilla J in the next video all
46:27 - right so let's see how we are going to
46:28 - do that so for this one again I'm going
46:31 - to create another folder inside these
46:33 - components and let's give this one name
46:35 - as star rating and inside this what you
46:38 - can do you can simply create the same
46:39 - structure index. jsx plus Styles uh
46:44 - styles.
46:46 - CSS now as I already told you that we
46:49 - are not going to concentrate much on CSS
46:51 - so for this one what I can do whatever
46:53 - star you will be creating in the
46:55 - interview either you can simply create
46:57 - uh using CSS or simply you can create
46:59 - some kind of circle that will also work
47:02 - because at the end your interview
47:03 - requirement will be to complete the
47:05 - functionality first but because now we
47:07 - are actually learning so what you can do
47:08 - you can simply install a um project
47:11 - sorry install a uh dependency here and
47:13 - that is npm install react uh icons all
47:17 - right now in the interviewer in in the
47:19 - interview also if you are installing
47:21 - this uh dependencies I think it is also
47:24 - fine all right so now let's quickly
47:27 - create our uh component here so you will
47:30 - be creating export default function
47:33 - let's give this one name as uh star
47:36 - rating all
47:38 - right now let's return here so we'll be
47:41 - returning a class
47:44 - name so here we'll return something like
47:47 - star rating now what uh you can do uh in
47:52 - the interview in the interview basically
47:53 - you can ask your interviewer that how
47:56 - many stars you basically want uh so
47:59 - whenever you'll give any kind of
48:00 - interview your Prime objective will be
48:02 - to ask so many uh questions to the
48:05 - interviewer obviously you'll get good
48:06 - points based on that because let's say
48:09 - uh you uh immediately start coding uh
48:12 - your component without asking any
48:14 - questions so that will basically give a
48:15 - negative impression on the interviewer
48:17 - so for example there can be requirement
48:19 - is like let's say you are creating a
48:21 - common component uh reusable component
48:23 - and you will be basically receive some
48:25 - of the proper is from props from the
48:26 - parent component let's say the number of
48:28 - starts that you want to create all right
48:31 - so for this one what we'll assume that
48:33 - okay we'll be receiving some kind of
48:34 - props so I will basically receive a
48:36 - props like number of starts and based on
48:39 - this uh we will be creating so this will
48:41 - be number of
48:42 - STS now here uh what you need to do
48:45 - basically inside this we will be
48:47 - creating a array of these many starts so
48:50 - here we'll do aray of this number of STS
48:54 - all right by by default this will be
48:56 - five let's say so if you're not passing
48:59 - anything it will be five by
49:01 - default now what you can do we can
49:03 - simply map this one and here we
49:05 - basically need this
49:07 - index all right now here what we are
49:10 - going to do basically I'll basically
49:12 - explain the approach first let me return
49:14 - that that star so for this one we will
49:17 - be basically importing a icon from the
49:19 - react icons package so let's import
49:22 - something from uh react icons CL fa and
49:27 - this is fa a uh
49:30 - star all right so here we'll be
49:33 - returning this fa
49:35 - start now here the first thing we need
49:38 - to pass the key so we'll be passing key
49:41 - as this index all right and also here we
49:45 - need to pass some kind of class name
49:46 - that we are going to do later we need to
49:49 - pass a onclick uh property here sorry so
49:53 - on click uh whenever we will will be
49:55 - clicking on some particular star we need
49:57 - to basically take the current current
50:00 - index and then we have to basically show
50:01 - some kind of styling and also we need a
50:04 - on Mouse enter so whenever we'll be
50:07 - basically hovering on that particular
50:10 - and also we need on Mouse leave now
50:14 - these all the things whatever we are
50:16 - creating here you have to basically
50:17 - explain that this methods we want to
50:20 - create in this component only all this
50:23 - all the methods we will be receiving
50:24 - from the parent component all
50:26 - right and at the end what we are going
50:29 - to pass we will also pass the size so
50:32 - size will be let's say 40 now here what
50:34 - I'm going to do I'll create a state here
50:36 - so this will be let's say give this one
50:38 - as rating and this will be Set uh rating
50:43 - for this one we are going to keep a UST
50:46 - start of zero all right first time we
50:48 - will not select any start and also you
50:50 - have to take another state and that is
50:52 - whenever we will be hovering on some
50:54 - particular St you have to to basically
50:55 - show some kind of styles also that uh
50:58 - which is the current state or basically
51:00 - current index you are hovering so for
51:03 - this one we'll take a hover uh State and
51:05 - this will be set
51:06 - hover and this is also will be U state
51:09 - of
51:11 - zero all right now here what I'm going
51:13 - to do I will be basically receiving uh
51:15 - sorry I'll be creating a method so this
51:17 - will be handle click now this handle
51:20 - click what it will receive it will
51:22 - receive the current index that you are
51:23 - clicking so this will be G
51:25 - current index and I'm actually repeating
51:28 - this again and again whenever you'll be
51:29 - giving any interview you need to explain
51:32 - all of this that why you are doing this
51:33 - one so that it will obviously give you
51:35 - good points same next we'll be creating
51:38 - another uh function this will be handle
51:40 - Mouse enter now obviously I can directly
51:44 - do this one here but I'm just uh writing
51:46 - or breaking everything so that it is
51:48 - easier to understand now whenever you'll
51:50 - be entering or Mouse entering it will
51:52 - also receive the current index same will
51:56 - goes for handle uh let's say mouse
52:00 - leave this is also will receive great
52:03 - current index so these all are the uh
52:05 - method that we are creating here so this
52:08 - I'm going to call this one so this will
52:10 - be handle click and here I'm going to
52:12 - pass the index now what we are going to
52:13 - do so this will start from zero so what
52:16 - we can do simply we can increase this
52:18 - index by one so simply we can do index +
52:22 - one so that means here whenever we'll
52:24 - pass IND index instead of zero it will
52:26 - be passing let's say you are passing
52:28 - number of Star as five so it will start
52:30 - with uh index one then it will be two it
52:34 - will be three four and five all right
52:38 - that's it now same you have to pass the
52:40 - index here also sorry we have to
52:42 - basically call this method so we are
52:45 - going to call handle Mouse enter and
52:48 - here I'm going to pass index and here
52:51 - I'm going to do handle Mouse leave and
52:54 - I'm going to to pass the index that's it
52:58 - now let's log here let's see what we
53:02 - getting so I'm going to copy and paste
53:06 - it and let's paste it here now let's
53:09 - save it now let's
53:11 - see also you have to basically import
53:13 - this component here so I'm going to
53:15 - again comment it out and I'm going to
53:17 - giving another one so this is our star
53:19 - rating component so here I'll giveing
53:23 - star rating and here I'm going to
53:26 - passing the number of Star as let's say
53:28 - 10 let's save this let's see what we are
53:33 - getting all right now you see if I now
53:37 - go to
53:39 - console and if I now you can see we are
53:41 - getting this three four if I click here
53:44 - we are getting four if I removing we are
53:46 - getting four that means we are first we
53:48 - are getting Mouse enter Then if I click
53:51 - we are getting on click and then if I
53:53 - now remove this cursor we'll be getting
53:55 - on leave so that means let's see if I
53:58 - just overover or click this one so I
54:00 - have to basically show some kind of that
54:02 - these many are selected so this is the
54:04 - end point and this all will be basically
54:07 - selected if I click on the last that
54:09 - means last will all last will be or
54:11 - basically all the starts will be
54:13 - selected so how we are going to
54:14 - basically do that so what we can do
54:16 - simply
54:17 - here we have to basically take a class
54:20 - name so that we can show some kind of
54:22 - active state so we take a class name all
54:25 - right so here what we can do basically
54:27 - we can take this index so this index is
54:29 - basically current index if this is less
54:32 - than or equal to the current hover state
54:35 - that we are
54:36 - having so this one or this rating state
54:41 - so let's say if I click on this current
54:43 - uh star which is let's say three so we
54:46 - are basically showing some kind of State
54:48 - in this uh all these three starts
54:51 - basically so the current one will be
54:53 - three and the current overover which is
54:55 - basically the we are basically setting
54:57 - on this mouse enter or basically Mouse
55:00 - uh leave all right so if this is true so
55:03 - what we going to do we basically show
55:05 - some kind of um here uh class which will
55:08 - be let's say active or
55:11 - inactive now here we need to do
55:14 - basically set this set rating as this
55:17 - get current
55:19 - index and here we need to do set hover
55:23 - as get current index all right but for
55:28 - this mouse leave what we need to set we
55:30 - have to set this set
55:32 - over this will be basically equal to the
55:35 - current rating because if I already
55:38 - clicked on this fourth start that means
55:40 - these four are already selected so if I
55:42 - now leave this mouse this should be
55:44 - selected here so that means we are
55:45 - basically one Mouse leave we are setting
55:48 - this uh handle Mouse leave or basically
55:50 - on this method setting the set over as
55:53 - the current rating which is we already
55:55 - selected so in this case we basically
55:57 - don't need this get current index so we
56:00 - can basically remove this one and I
56:02 - think that's it so now we can go to our
56:06 - style before that let me just import
56:08 - this
56:10 - one and let's go to our style so what we
56:13 - can do we can simply we'll take a uh
56:16 - class of active so for this one we going
56:19 - to make the color so we'll do this color
56:22 - FF
56:23 - f70 all right if this is
56:27 - inactive so we are going to make the
56:29 - color as let's say
56:32 - black and I think that's it if I now
56:35 - save this now let's see so you can see
56:38 - if I now hover this is working if I now
56:41 - let's click here and now remove this see
56:43 - these four are already
56:44 - selected all right if I now come here
56:47 - and selected Sol three are selected and
56:49 - if you see if I now enter here so till
56:52 - this part is now selected if I now
56:54 - remove this one you can see the previous
56:57 - one whatever is there that is actually
56:59 - selected so that is the reason we are
57:00 - taking the current rating state but if I
57:02 - now go to this let's say fifth one and
57:04 - now click and then remove now you can
57:06 - see this is now updated so this is the
57:09 - whole process that you need to do or
57:10 - basically this is how you can explain in
57:12 - your interview now this is a very very
57:14 - important questions that you might
57:16 - encounter in your browser coding
57:18 - interview so that's all for this
57:19 - particular project let's move on to the
57:22 - next one all right so the next project
57:24 - project is another very important
57:26 - interview questions and that is to
57:28 - implement a image slider so here most of
57:31 - the times your interviewer will give you
57:33 - some dummy data or dummy array where
57:35 - let's say you are having the image URLs
57:37 - and you have to you have to just render
57:39 - and create this slider now for this one
57:41 - we obviously not using any third party
57:43 - Library packages so I'm I actually make
57:45 - this one little bit Advanced so here the
57:47 - data you are basically seeing so this
57:49 - data we uh we are getting from API and
57:51 - then we are rendering and based on that
57:53 - we'll be creating this image
57:55 - uh slider so let's start working on this
57:57 - particular project all right everyone so
57:59 - let's start with our next one so next
58:01 - one as I already uh discussed so you
58:03 - need to create a image slider now there
58:06 - can be two things in the interview one
58:08 - is that the interviewer will give you
58:10 - subd data with some image URL and then
58:14 - they will uh tell you that based on this
58:15 - image URL you have to basically render
58:17 - these images and then you have to create
58:19 - your slider or the second thing will be
58:22 - they will give you a API URL so first
58:25 - they will tell that okay first you have
58:26 - to fetch this list of images you have to
58:29 - render this and then you have to create
58:31 - your slider on top of it now obviously
58:33 - this URL can be dynamic anything so
58:36 - you'll be receiving this URL from props
58:38 - and also you can see the page number and
58:40 - this limit so this limit can be anything
58:42 - So currently we are having 10 if I now
58:44 - pass here five so it will give you only
58:46 - five images something like that so let's
58:49 - see how we are going to do that now the
58:51 - reason why I'm doing with API because
58:53 - API version is is obviously the little
58:55 - bit complex if they will give you some
58:58 - dummy data obviously it will be very
58:59 - very easy so you just have to take the
59:01 - dummy data as a props and then you have
59:02 - to pass that data to your component so
59:05 - for this one what we'll do again let's
59:07 - create another component here and I'll
59:09 - give this on name as image slider now
59:12 - one thing is that if they're giving
59:14 - giving you some dummy data so let's you
59:16 - will create one file inside of this
59:18 - let's say dumy data.js and then you will
59:20 - basically get the data from this
59:22 - component currently we will be basically
59:24 - calling the API so for now this is fine
59:26 - so here I'll be creating index. GSX
59:29 - let's close this
59:31 - one and we'll be creating our uh so here
59:36 - we'll be creating styles. CSS now here
59:39 - let's create so this will be export
59:42 - default function image slider now this
59:46 - will receive the URL and also it will
59:49 - receive the limit for example let's
59:52 - say now here what what we are going to
59:55 - do we will be returning a
59:58 - div and let's give this one name as a
60:01 - class name as a
60:03 - container all right so now the first
60:06 - thing what we are going to do will be
60:07 - basically calling the API so here for
60:10 - this one we need to take some state so
60:14 - here let's take something like
60:17 - const uh so here the data we uh let's do
60:20 - one thing let's take our images straight
60:23 - here only set images and this will be US
60:27 - state of empty array also we need to
60:30 - take another one and that is our current
60:32 - slide so this will be our current
60:35 - slide and Set current
60:39 - slide and the current slide will be set
60:42 - to zero for the first time so this is
60:45 - our initial state so now what you need
60:48 - to do you have to again I already
60:49 - mentioned that you have to explain
60:50 - everything so you'll be receiving this
60:52 - URL you have to basically check that if
60:55 - this URL is empty or something goes
60:57 - wrong so you have to show the or
60:59 - basically render the message so for this
61:01 - one what we going to do we'll take a use
61:05 - effect and here we'll take this URL as a
61:08 - dependency because based on this URL you
61:11 - need to check and here we'll check if
61:13 - this URL is not equal to equal to empty
61:16 - then only we want to call some API so I
61:19 - think we can remove this part so we'll
61:20 - call fet images something like that and
61:24 - we are going to create this one so this
61:26 - will be asnc method so as sync function
61:29 - Fage
61:31 - images all right and I think here we can
61:34 - pass this URL so we receive get
61:38 - URL and now uh now see whenever you'll
61:41 - give some interview always try to cover
61:44 - the error handling process because they
61:46 - or else they will ask you that why
61:48 - haven't you uh handle the error properly
61:50 - so take a try catch
61:53 - here and and here let's say I'll take
61:56 - another state so this will be our
62:00 - error message
62:03 - set error message and let's give this
62:07 - one as a use St of
62:10 - null something goes wrong so that means
62:12 - we'll set here set error message as e do
62:17 - message something like that now here
62:20 - what we'll do we do const
62:23 - response this this will be AIT
62:27 - Fage and here we need to pass the URL
62:30 - sorry we have to get the URL so get
62:33 - URL all right and then we'll do const
62:36 - data this will be AIT response.
62:41 - Json all right now here we are going to
62:43 - check if this data is true so we are
62:47 - going to set uh set images as this data
62:51 - or basically whatever you'll be
62:53 - receiving for I'm keeping this one as
62:54 - data now here always take another state
62:57 - and that is the loading State because
63:00 - whenever you will be handling any kind
63:02 - of API call so always take the loading
63:05 - State and this will be U state of
63:09 - false all right now before calling the
63:11 - API we're going to make the set loading
63:13 - as true and if we are getting the data
63:17 - so make the set loading as
63:19 - false if there are any error we are
63:22 - going to make the set loading as false
63:25 - all
63:27 - right so this is fine now we are going
63:30 - to check if there if it is loading so
63:33 - we'll simply return some uh message
63:37 - like
63:41 - loading data please
63:45 - wait all right and also you can
63:47 - basically check if there is any kind of
63:49 - error message if this is not equal to
63:51 - equal to
63:53 - null so so we are going to return the
63:56 - div we show
63:58 - error
64:03 - occurred and I'm not sure if this
64:05 - spelling is wrong or correct but that is
64:07 - fine and then we are going to render
64:09 - this error message
64:12 - here all right now let save this now
64:16 - what we going to do uh we basically need
64:19 - to pass the URL from this parent
64:21 - component because obviously this is a
64:23 - reusable component so need to call this
64:24 - one from the parent so I'm going to just
64:26 - comment it out again then give another
64:28 - comment so this is our image slider
64:33 - component so here I'm going to call our
64:36 - image
64:38 - slider and we're going to pass our URL
64:41 - so now let's see so let's copy this one
64:43 - from
64:47 - here so this is our URL and also you're
64:50 - going to pass the limit as let's say 10
64:53 - all right
64:56 - uh so this is fine so now let's go here
64:59 - so what we going to
65:01 - do here we can take a template literals
65:05 - so we get our gate URL and here we are
65:08 - going to pass the extra PMS now
65:09 - obviously if you want you can pass this
65:11 - extra params also from your pattern
65:13 - component but for now let's keep this
65:15 - one simple so pass it here page equal to
65:18 - one I'm keeping and this limit will be
65:20 - this uh limit that you will be receiving
65:23 - from your component
65:25 - if you want you can also pass this page
65:27 - let's pass the page also so here we will
65:31 - give uh pass here
65:33 - page let's make this one default as five
65:37 - and the page as
65:39 - one and here I'm going to pass the pag
65:41 - as
65:43 - one all
65:45 - right now let's save this now let's see
65:49 - uh what we are getting in these images
65:51 - so I log here
65:58 - images so now let's go
66:01 - there all right so you can see that we
66:03 - are getting 10 images here so this is
66:05 - working fine if I now go to parent
66:07 - component let's pass this one as a four
66:10 - limit as four now let's see if I now
66:14 - refresh this we are getting four now so
66:18 - this is working fine so now what you
66:20 - need to do we have to basically render
66:21 - these images here based on your parent
66:23 - whatever you're passing you're able to
66:25 - basically face the
66:26 - data so this is working fine let's keep
66:29 - this one as St only now I'll go back and
66:31 - then we'll basically create our uh GSX
66:34 - so the first thing is that what we going
66:36 - to do here we are having this container
66:39 - now I'm going to take some uh icon from
66:41 - this react
66:43 - icon so here let's import something from
66:48 - react icons
66:51 - slbs and the arrow name is I think BS
66:56 - Arrow left Circle fi yes and then we are
67:02 - having BS
67:03 - Arrow right Circle
67:07 - fill now here I'm going to basically
67:09 - render this left one so we are having
67:12 - two arrows so this is the left one and
67:16 - here we need some on click but that we
67:17 - are going to do later and here I'm going
67:19 - to take some class name so we'll take a
67:22 - class name we make this one as Arrow
67:24 - Arrow
67:25 - left all right so after this what you
67:29 - need to do you to basically render your
67:30 - images so you'll check if the images and
67:32 - then images. length if this is true or
67:36 - else this will be null so here what I'm
67:39 - going to do I return this one so we'll
67:41 - do images. map so this is our image
67:45 - item and here what we going to return
67:48 - written a simple
67:50 - image we'll pass a key here which will
67:53 - be image item do ID we are having then
67:56 - we pass alt here which I'll keep this
67:58 - one as let's see what we getting here so
68:02 - we are
68:03 - getting
68:05 - author I think let's uh pass this
68:08 - download URL
68:12 - only so we'll pass the same so we do
68:15 - image item. download
68:19 - URL next we need to pass a source so
68:23 - Source will be image item. download
68:28 - URL and also you have to pass a class
68:30 - name but for now this there is a trick
68:32 - part so that we are going to do for now
68:34 - we'll keep this one as current slide or
68:38 - current image something like
68:41 - that all right so this is fine now next
68:45 - after this what we going to do we'll uh
68:48 - render our right
68:51 - Circle and here what we can we can
68:55 - simply take a class name so for this one
68:58 - also we'll take Arrow Arrow right also
69:03 - have to take a on click and then we also
69:06 - need to basically render the circles so
69:10 - here what we are going to do we'll do a
69:11 - span
69:13 - here and we'll render a class name and
69:16 - we'll give this one as uh
69:19 - Circle
69:21 - indicators all right here I'm going to
69:23 - render again the images and then
69:28 - images do length if this is true so here
69:32 - or else this will be null so again I'll
69:35 - do
69:36 - images do
69:38 - map so we need the current
69:41 - index and here I'm going to re render a
69:47 - button and we are going to give some key
69:50 - so key I'm going to give this one as
69:52 - index and also we going to give a class
69:54 - name so we'll give this one as current
69:57 - indicator later we are going to do when
69:59 - we'll do the we'll uh complete the
70:01 - functionality so this is our current
70:04 - indicator if I now save all of this now
70:07 - obviously this will
70:08 - break nothing will work for
70:12 - now so you can see that we are not able
70:15 - to see anything all right so this is
70:18 - fine but now what we are going to
70:21 - do we need to basically start working on
70:24 - the functionality first but before that
70:26 - let's uh quickly complete the
70:29 - CSS so let's start with our first one so
70:32 - we are having container uh let me import
70:35 - this one first so we do import style.
70:39 - CSS so we'll start with our
70:43 - container all right so we'll do po as
70:46 - relative we'll do display as
70:49 - Flex we'll do justify content as Center
70:53 - we'll do align items also as
70:58 - Center uh we'll do width as 600
71:03 - PX and we'll do height as let's make
71:06 - this one as 450
71:08 - PX this is
71:12 - fine okay now next uh we are having
71:17 - the current image so here we are having
71:21 - the current image so let's copy this
71:24 - so we'll do current image and for this
71:26 - one we'll do a border radius as 0.5
71:31 - RM we'll do a box sadow we'll do 0 PX 0
71:36 - PX 7
71:38 - PX 666 this is the color and we'll do
71:43 - width as
71:44 - 100% and height as
71:48 - 100% all
71:52 - right all right we are getting some
71:56 - error a is not
72:01 - defined all right here we are getting
72:07 - okay okay now this is coming you can see
72:10 - but obviously this will not work that is
72:12 - okay now what we are going to do next we
72:15 - are having the uh I think we are having
72:18 - what else we're having the arrow so we
72:20 - going to take dot Arrow so so for Arrow
72:24 - we'll do this one as Po and as absolute
72:26 - because we already have taken the parent
72:28 - as relative all right and here uh we are
72:32 - going to do width as 2 RM height as 2 r
72:37 - m and color we are going to take as
72:42 - white let's take a filter also here so
72:45 - we're going to do filter we'll do a drop
72:47 - shadow and here we're going to do 0 PX 0
72:51 - PX 5 PX we'll do
72:55 - 555 okay now next uh we are having
72:59 - the arrow left so we are having do Arrow
73:03 - left so for Arrow left we are going to
73:06 - do left as 1 RM then we are having the
73:10 - right so for the right what we're going
73:11 - to do sorry for right we'll do the right
73:15 - so we'll do right and this will be right
73:18 - as 1
73:20 - RM this is fine now next we having the
73:24 - circle indicators so let's go there
73:27 - let's copy
73:31 - this and here we having the circle
73:34 - indicators so we'll do as display as
73:37 - Flex we'll do poison as
73:40 - absolute and we'll do bottom
73:42 - as 1
73:45 - RM now next we're having the current
73:48 - indicator so this is the one so we copy
73:52 - this and we'll paste it here so we'll do
73:56 - background color as
73:59 - white we'll do a height of 15 PX we'll
74:03 - do width of 15
74:06 - PX we'll do a border radius of uh border
74:10 - radius of how much
74:13 - 50% uh we'll do border as none we'll do
74:17 - outline as
74:19 - none all right uh what else we'll do a
74:22 - margin
74:24 - we'll do 0 comma 0.2 RM and we'll do
74:28 - cursor as
74:33 - pointer all right so you can see that
74:36 - this is coming here now what we need to
74:38 - do see the main logic of a slider is
74:42 - that you have to show the current one
74:44 - and you have to hide all of the others
74:46 - correct so how you are going to do that
74:48 - so for that is the reason uh we have
74:51 - taken this state which is the c current
74:53 - slide so now we have to basically work
74:55 - on this one so what we need to do we are
74:58 - having two arrows and based on these two
75:00 - arrows we have to take a on click so the
75:03 - first one so we'll take on click here
75:05 - sorry we'll take on click here so here
75:09 - what we can do we'll take handle uh
75:12 - previous something like that and then
75:15 - here we are having the on click and
75:17 - we'll do handle
75:20 - next now another thing what we need to
75:22 - do we have to take a on
75:25 - click on this button also but that we do
75:29 - in some time but let's quickly create
75:31 - these two function first so we are
75:33 - having function handle
75:38 - previous and then we having function
75:40 - handle
75:42 - next now what we going to do to set the
75:44 - current slide so do Set current slide
75:48 - now for the previous how the logic will
75:50 - be let's say you are at the end of the
75:54 - sorry you are at the first so let's say
75:56 - you in the first image and you're
75:58 - clicking here but on left we don't have
76:00 - any other image right so what you have
76:01 - to do I have to basically show the last
76:03 - one on click of the previous Arrow but
76:07 - if you're at the end of this slide let's
76:09 - say here and you're clicking on the next
76:10 - one so again you have to show the first
76:12 - one correct and if you are at the first
76:15 - and if you're clicking here so you to
76:16 - show the last one so here what we can do
76:19 - we do set previous so we can simply
76:22 - check if the Set current slide when
76:23 - you're clicking on the first one if the
76:26 - current slide is equal to equal to zero
76:29 - that means you are at the first so what
76:31 - we can do we can simply set this one as
76:34 - this images. length minus one so we'll
76:38 - be showing the last image or else this
76:41 - will be current slide minus one okay so
76:44 - that means again I'm explaining let's
76:46 - see if you're here on the fourth one so
76:48 - if you're clicking on the left one so
76:50 - you'll be going to the third one you
76:52 - clicked again you go to to the second
76:53 - one you clicked here again go to the
76:55 - first one now you're at the first we
76:57 - don't have anything else if I click here
76:59 - we are again seeing the last one okay
77:02 - now same will be for the next one so
77:03 - this will be Set current slide so here
77:06 - we'll check if the current slide is
77:08 - equal to equal to data sorry we having
77:11 - images. length minus one so that means
77:13 - you are at the end here so if you click
77:16 - here you against so the first one so in
77:19 - this case what you need to do to set
77:20 - this one to zero or else this will be
77:22 - CCT and slide plus
77:24 - one that's
77:26 - it now let's save it now what we need to
77:30 - do to basically set a uh class name here
77:33 - we have to update this class name so
77:35 - what we can do we can basically cut it
77:37 - and we can check that if the current
77:40 - slide is equal to equal to current index
77:43 - so we'll take index here let's take an
77:46 - index here so if this is equal to equal
77:49 - to this index so that means we are going
77:51 - to show this current image or also we
77:54 - going to hide this one so we'll do
77:56 - current image and then we'll do hide
77:59 - current image all right I hope you're
78:02 - getting the same basically you have to
78:04 - do it for the uh this one also so we are
78:08 - having this circles right so here also
78:10 - we're going to hide so we'll cut it here
78:14 - so we'll going to do if the current
78:16 - slide is equal to equal to this index so
78:19 - you're going to show the current uh
78:21 - sorry we are going to do the current
78:24 - indicator so we'll copy this
78:29 - one if this is true so you're going to
78:31 - set this onto current indicator or else
78:34 - this will be current indicator and hide
78:37 - current
78:40 - indicator all
78:42 - right this is fine and here on click of
78:46 - this button this is pretty simple what
78:48 - we can do so whenever we'll click on
78:51 - this this one here so you have to show
78:53 - the fourth one if I click here it to
78:54 - show the current fifth one so this is
78:56 - pretty simple we can simply set the
78:58 - current slide as this
79:01 - index now let's format this now what we
79:04 - need to do we have to go to the style
79:06 - and then you have to basically hide that
79:08 - one so we are having this height current
79:10 - image so copy
79:13 - this go to
79:15 - Styles and then we'll
79:17 - do here display as none so you don't
79:21 - show the others and same will be for
79:24 - this one also what we can do so we can
79:27 - go here and we can do let's make this
79:31 - one as not hide we'll do
79:33 - update so we'll update the current
79:38 - one so the all let's make this one as
79:41 - what we can do so we having already
79:43 - current we'll do inactive we'll do
79:46 - inactive inactive
79:49 - indicator so here we'll copy this so
79:52 - those are are not inactive we going to
79:54 - change the color so let's make this one
79:56 - color as uh
79:59 - gray let's save it now let's
80:02 - see all right so this is changing but
80:04 - this is not uh the color is not changing
80:07 - here all right let me just
80:09 - check so we having indic uh inactive
80:14 - indicator oh sorry we have to make this
80:16 - one as background
80:18 - color now I think this will work yeah so
80:21 - now if I change this one so this is
80:23 - changing now let's go at the end click
80:27 - here it's going to the
80:28 - first if I now click here again so it's
80:31 - going to the last and this is working
80:39 - fine awesome all right so I think that's
80:42 - all for this particular project now this
80:43 - is another important project that you
80:46 - might get ask in your browser coding
80:48 - interview and this is pretty simple what
80:50 - I have done if they're giving you d data
80:53 - obviously you can directly take the d
80:54 - data instead of calling the API but if
80:56 - they're telling that you have to call
80:57 - the API so you call Api set a current
81:00 - slide set a loading State and then you
81:03 - just have to basically make this
81:04 - functionality that's it so that's all
81:06 - for this particular project let's move
81:08 - on to the next one awesome now this
81:11 - project is very important so this is
81:14 - called load more products or load more
81:17 - button or also the same concept you can
81:19 - use in infinite scroll also obviously
81:21 - I'm not I'm saying that
81:23 - that is not exactly same but the concept
81:25 - will be almost similar the uh properties
81:29 - and the features and the methods that
81:30 - you're going to use for infinite scroll
81:32 - that will be different so here what we
81:33 - are doing we uh in the interview
81:36 - interviewer will give you a URL and
81:38 - there will be a limit uh property in the
81:40 - API URL so let's say we are calling some
81:43 - 20 data first time if I click on this
81:46 - button again so we have to render the
81:47 - next set of data obviously but the data
81:50 - we are currently having we don't have to
81:52 - reender under this data again so this
81:54 - data is already present here right so if
81:55 - I click this one we'll be showing some
81:57 - loader and next set of data is uh
82:00 - selected now the uh here the point is
82:03 - once it will reach to the 100 products
82:06 - you have to disable this uh button so if
82:08 - I click here so now we are getting next
82:12 - set of data and if I click here again so
82:15 - you can see that now this button will be
82:17 - disabled and you have reached to the 100
82:19 - products now if you are giving interview
82:21 - companies like Amazon on Adobe and Atlas
82:25 - and also you might get ask these
82:27 - particular questions so I'm requesting
82:29 - everyone to please uh practice this one
82:31 - all right so let's uh try implementing
82:34 - this one obviously for this one also we
82:36 - not use any any other third party
82:37 - Library packages we'll be using only
82:39 - react the same logic you can also
82:42 - Implement in your
82:43 - JavaScript if you're implementing the
82:45 - same in vanilla GS all right everyone so
82:48 - let's move on to the next one so next
82:49 - one is another very important questions
82:51 - that you might get in in your interview
82:53 - and that is uh let's say you are having
82:55 - some scenario like you are getting a
82:57 - data from API but instead of calling all
82:59 - the data at once you are having a load
83:01 - mode button so every time you'll click
83:03 - on this button you will be basically
83:04 - loading the next set of data now this is
83:07 - actually similar to infinite scroll but
83:09 - this is also another very very important
83:11 - question that you might get asked so
83:14 - let's do one thing let's create another
83:16 - folder inside these components and let's
83:18 - give this one as load more
83:21 - button
83:23 - or let's keep this one as load more
83:25 - data so here I'm going to create index.
83:28 - jsx and styles do
83:35 - CSS all right so for this one uh we are
83:39 - going to use this dummy Json uh products
83:41 - this URL so how this will basically work
83:44 - you can see that we are having this
83:46 - limit and this skip so we going to
83:49 - basically use this parameters now it
83:51 - doesn't matter that what you you are
83:53 - getting at the end the functionality
83:54 - will be same for most of them so now
83:56 - what we going to do will be basically
83:57 - fishing the products we will be
84:00 - rendering the products and there will be
84:02 - a button at the bottom of the page and
84:04 - every time you click on this button
84:06 - you'll be rendering the next set of data
84:09 - now if I know show you the output you
84:11 - can see that we are having the total is
84:12 - 100 so once the data length is 100 we
84:16 - need to basically disable the button and
84:18 - you will not be able to load more uh
84:20 - data again so this is basically the
84:22 - function
84:23 - so let's quickly create this component
84:25 - and now I'm again telling now this is
84:27 - one of the very important asked
84:28 - questions in like companies like Amazon
84:30 - ad Atlas on these
84:32 - companies so let's create this one as
84:35 - load
84:37 - more data now it's up to you if you want
84:40 - to change the component name you can
84:42 - basically change
84:43 - it for now I'm going to R return here a
84:47 - div and let's give a class name I'll
84:50 - give this one as container
84:53 - now if you want you obviously you will
84:55 - be able to take the URL from your parent
84:57 - component as we have already done in the
84:59 - image slider well let's create all the
85:01 - state in this component only so here I'm
85:04 - will be taking some State one will be
85:06 - our loading State as I already done in
85:08 - the previous project so this will be set
85:10 - loading and which will be used state of
85:14 - false then we need a uh data state or
85:18 - let's make this one as
85:21 - products set
85:26 - products and this will be US state of
85:30 - empty array and also we need basically
85:33 - the count or page number whatever you
85:35 - can take count is basically how many
85:37 - times you're clicking on this button so
85:39 - we'll take a count here and this will be
85:41 - set count now first time this will be
85:43 - zero
85:45 - right so this is all the state we need
85:48 - so now what you need to do you have to
85:50 - basically ask all the clarifying
85:51 - questions to to your interviewer that uh
85:55 - will this URL will be always same or
85:57 - basically this will basically change
85:58 - based on different
86:00 - requirement this limit 10 will be always
86:02 - fixed or basically you have to change
86:04 - this one this skip something like that
86:07 - but for now what we going to do we will
86:08 - be keeping the limit as 20 and then uh
86:12 - we will be basically skipping every time
86:13 - 20 all right so the reason is because
86:16 - whenever we will be loading the data for
86:18 - the first time we'll be loading 20 data
86:20 - next time whenever we'll be clicking on
86:21 - this but but and we no need to load the
86:23 - previous data because that data will be
86:25 - always stored in our state so let's see
86:28 - how we are going to do that so again we
86:31 - are going to take use
86:34 - effect and here I'm going to create a
86:38 - method so this will be fet
86:42 - products so this will be asking function
86:46 - fet
86:48 - products we'll take a try and catch
86:51 - block
86:55 - and we're going to log this error for
86:57 - now if you want you can take another
86:59 - state and you can set the eror here now
87:01 - this will be const response this will be
87:05 - equal to AIT
87:08 - fet and here now the trick part and that
87:11 - is we are going to take till this por
87:13 - and here we are going to copy this and
87:16 - then we'll paste it here now see what we
87:20 - need to basically do the limit will be
87:21 - 20 limit is always fixed means every
87:23 - time we want to get 20
87:26 - data so this will be 20 but skip here
87:30 - the catch so first time you're loading
87:33 - the 20 data right so first time you
87:35 - don't need to skip anything so first
87:36 - time you have to keep this one as zero
87:38 - but next onwards let's say if I click
87:40 - the button first time so the count will
87:42 - be one so when we'll be clicking the
87:45 - data for the the button for the first
87:47 - time we already have 20 data in our
87:49 - state so we are going to skip those 20
87:51 - data or basically previous data so how
87:53 - we are going to do that so the logic is
87:55 - something like this so here we are going
87:57 - to do let me take this on as template
88:02 - literals so here logic will be if the
88:04 - count is equal equal to zero that means
88:07 - for the first time we don't need to skip
88:09 - any data because we don't have any data
88:11 - currently but next onwards what we can
88:14 - do we can simply take this page sorry
88:17 - the count number so next time when we'll
88:19 - be clicking on this button the count
88:21 - will be one and then we already have the
88:23 - 20 data so we going to skip 20 I hope
88:27 - you're getting now when the count will
88:28 - be two so we'll be skipping 40 data
88:31 - something like that then we are having
88:33 - const result and this will be equal to
88:37 - AIT
88:38 - response.
88:41 - Json and let's log this result
88:46 - here and what else we need to do I think
88:48 - this is fine let's save this and I'll go
88:51 - to our app
88:52 - .js and I'm going to comment out this
88:55 - component
88:57 - here I'm going to take another one and
88:59 - this will be load more products
89:04 - component so this will be
89:07 - load more data let's save it let's see
89:11 - what we are
89:14 - getting so you can see that we are
89:16 - getting products 20 you are getting only
89:17 - 20 products the total is 100 the limit
89:21 - is 20 here and we are skipping zero all
89:24 - right awesome so this is fine so now
89:27 - what we can do we can simply check here
89:30 - if this
89:32 - result and and result dot length sorry
89:37 - result do
89:38 - products and then result do products do
89:44 - length if this is true sorry this will
89:47 - be length so we are going to do set
89:51 - products as result dot products also we
89:56 - going to make the set loading as true
90:01 - here and here we are going to make the
90:03 - set loading as
90:06 - false and if there are any error we are
90:08 - going to make this one as
90:11 - false awesome so now let's save it and
90:15 - here we'll check if the loading is true
90:18 - so we'll return return something like
90:20 - div that loading
90:22 - data
90:25 - please
90:28 - wait all right now here uh we'll take
90:31 - another
90:32 - div and inside this we're going to check
90:35 - if this products and then products.
90:39 - length if this is
90:41 - true so you're going to map these
90:45 - products do map this will be item let's
90:49 - take a div
90:50 - here
90:55 - and now so let's see what we are getting
90:57 - in the products so you're having the ID
91:00 - so you can take the key as this item.
91:04 - ID and we'll keep this one very very
91:07 - simple we'll see what we are getting we
91:11 - are having this thumbnail so let's
91:14 - implement this one let's take this one
91:16 - so we'll take a
91:18 - image it will be source which will be
91:21 - item do
91:26 - thumbnail all right also let's take a
91:29 - alt so alt we're going to take the item
91:32 - dot I think we are having
91:34 - [Music]
91:35 - name uh we'll take this one as title so
91:38 - we're having item.
91:40 - title and inside this we going to sorry
91:43 - after this we'll take the item do title
91:47 - and I think this will be more than
91:48 - enough for now for this one we're going
91:50 - to take a class class name and this will
91:52 - be our
91:53 - product and here I'm going to take
91:55 - another class name and this will be
91:58 - product
92:01 - container let's save this now after this
92:03 - we'll take another div and here will be
92:05 - having this button which will be load
92:08 - more
92:10 - products so here I'm going to take a
92:13 - class name and we will give button
92:17 - container awesome so now let's go to our
92:20 - Styles and and let's quickly create our
92:23 - style so we having the container so for
92:26 - this one we'll take a display as Flex
92:29 - Flex Direction we'll take column and
92:31 - we'll take a gap of
92:34 - 20px next we are having the product
92:37 - container so we'll copy
92:40 - this so here we are going to take this
92:43 - one as display grid we'll take grid
92:46 - template columns as repeat we are going
92:48 - to repeat let's say four and one eer
92:52 - and then we are having we'll be taking
92:54 - gap of 10
92:56 - PX next we are having the product so
93:00 - here we're going to take dot product so
93:02 - we'll take a padding of 20 PX we'll take
93:06 - border of one PX
93:09 - solid all right and what else uh we are
93:13 - going to also take a display as Flex
93:16 - we'll take Flex direction as column and
93:19 - we'll take a gap of 10 PX
93:23 - now let's import
93:26 - our style.
93:32 - CSS all right we are getting
93:36 - something let's see what is happening
93:41 - here oh I think we I think it's taking
93:44 - from somewhere else this 600 let me give
93:48 - some different uh name here so we'll
93:51 - give this one as load
93:55 - more
93:58 - container so let's save
94:05 - this yeah so this is
94:11 - fine uh let's make this one as three
94:14 - let's see what is
94:19 - happening all right I got it so we'll do
94:22 - one thing we'll take this do product and
94:24 - then
94:25 - image uh we'll make this one as width
94:29 - small 200
94:30 - PX and height 200
94:36 - PX awesome so I think this is fine for
94:41 - now see at the end we need to see
94:44 - whether our functionality is working or
94:45 - not so we getting 20 data so now what we
94:48 - need to do whenever we clicking on this
94:50 - button we have to render the next set of
94:52 - data but we not be R we'll not be
94:54 - rendering this data we are already
94:56 - having in the UI so for this one what we
94:58 - can do uh we can we are already having
95:01 - this button and then we'll take a on
95:03 - click here and we'll basically do set
95:06 - count as count +
95:09 - one all right so this is the first step
95:13 - and then here we are having this set
95:15 - products we storing right so we can take
95:17 - our previous data here so we do pre data
95:21 - which is already stored so we'll
95:23 - basically first take the pre data and
95:25 - then we'll take our result. products all
95:28 - right so now let's see what is happening
95:30 - here so if I now go back now let me
95:33 - refresh it again all right now if I now
95:36 - go to inspect go to network
95:39 - tab now let's click here all right
95:42 - nothing is happening so the what is the
95:44 - reason so the reason is pretty simple
95:47 - every time this count value will change
95:49 - you have to call the uh this F H
95:51 - products uh function so we'll take this
95:53 - count as a dependency now let's
95:56 - see so now let's refresh this so we
95:59 - getting 20 data now let's click on
96:02 - next so you're getting 20 data again
96:05 - let's click here so you're getting next
96:08 - data if you go here you can see we are
96:11 - now skipping 40 and the limit is 20
96:14 - first time we skip 20 and at the first
96:16 - time we skip zero if I click here again
96:18 - to it will skip 60 data because we
96:20 - already have
96:23 - all
96:24 - right and now next we'll go here if I
96:28 - click here so you're already having
96:30 - total you can see we are now having
96:32 - total 100 data and this total is also
96:35 - 100 so let's say your interviewer will
96:36 - tell you that if some of the your
96:39 - current data which is basically this
96:42 - products if this data is length is 100
96:45 - so you need to disable your button so
96:48 - how you're going to do that so that is
96:49 - pretty simple so we'll take another
96:51 - State here so we'll do uh
96:54 - disable
96:56 - button and set disable button which will
97:00 - be use state of
97:04 - false and now you'll take another use
97:06 - effect
97:09 - here and then we'll keep these products
97:13 - as a dependency and we can simply check
97:15 - if these products and and products do
97:19 - length if this is equal toal 100 so
97:22 - you're going to make set disable button
97:24 - as true all right so now what you can do
97:29 - we can simply make this take a disable
97:32 - property and this will be equal to if
97:34 - this disable button is
97:36 - true that's it and now we can also
97:40 - render if this disable button is true so
97:44 - render message that you have reached to
97:48 - 100 products
97:52 - or else this will be null now let's see
97:55 - if this is working or not let's save
97:57 - it so now let's refresh
98:01 - this so
98:03 - 20 now this is
98:06 - 40
98:09 - 60 we are having 80 now if I click here
98:13 - again so now we having total 100
98:15 - products you can see this is not disable
98:17 - and you reach to the 100 products so
98:18 - you'll not be able to call any uh API
98:21 - now so this is how the main logic of
98:23 - load mode button load mode button
98:25 - functionality works all right so I think
98:27 - that's all for this particular project
98:29 - let's move on to the next one now this
98:32 - one I can guarantee you that I'm not
98:36 - telling that you will not face the
98:38 - similar questions in your interview but
98:40 - the questions pattern will be somwhat
98:42 - same so they might say that you have to
98:45 - create a Tre view so you the logic will
98:48 - be almost same they can say you to
98:50 - create a dynamic navigation menu the
98:52 - answer will be almost same they can also
98:55 - tell you that please create a Implement
98:57 - a recursive menu UI then answer will be
99:00 - also same sometimes they will give you
99:02 - some uh nested uh data structure and you
99:05 - have to basically uh they will tell the
99:06 - interviewer will tell that you have to
99:08 - simplify it so then also the structure
99:10 - will uh the answer will be almost same
99:12 - so here you can see that we having main
99:14 - parent menus if I click here the child
99:16 - will be basically uh opened you have to
99:19 - toggle this one so if I now click on
99:22 - this parent all the Childs will be
99:24 - hidden all right so this is what exactly
99:26 - we need to implement here now also
99:29 - sometimes they'll say that on click of
99:31 - this level you have to render some page
99:33 - but again this is pretty simple the at
99:36 - the end our objective will be to learn
99:38 - this feature because if they tell that
99:40 - on click of this you have to render The
99:41 - Details page so you'll give the URL of
99:44 - this page and then based on that you'll
99:45 - be rendering so I'll be discussing that
99:46 - one in the later while implementing this
99:48 - one but in this project we have to
99:51 - basically see how we will be rendering
99:52 - this child parent relationship and then
99:55 - based on that we'll create this tree
99:56 - structure so let's start working on this
99:58 - very very important uh interview
100:00 - questions in the next part all right
100:02 - everyone so let's get started so as I
100:04 - already told you that in the interview
100:05 - most of the times they will share some
100:08 - kind of data which will be like nested
100:10 - now this data format can be anything at
100:12 - the end you should know basically the
100:14 - logic how this is working now I'm
100:17 - repeating this one again because this is
100:19 - one of the very very important question
100:21 - most of the times they will ask you this
100:22 - now the question can be vary like they
100:25 - can tell you that you have to build a
100:27 - nested navigation menu or you have to
100:29 - implement recard menu UI or like uh what
100:33 - they will say that will give you some
100:34 - Json structure you have to simplify it
100:36 - and then based on that you have to
100:37 - render that one in the UI so here you
100:39 - can see the structure that we are having
100:41 - we are having a label and then we having
100:43 - a two two is basically path so don't uh
100:46 - worry about this one because currently
100:47 - we have to basically focus on this
100:49 - particular structure how this data is
100:51 - actually coming here and inside each and
100:55 - every object we are having this children
100:57 - now this is very very important which
100:58 - will be arrrow of objects now again
101:00 - inside this the structure is exactly
101:03 - same so again you are having a label
101:05 - then again the two two is basically the
101:08 - path that you want to navigate to on
101:09 - click of this particular link and again
101:11 - you are having the children which is
101:13 - again the same
101:14 - structure so now in the interview first
101:17 - you have to explain all of this that
101:18 - what you want to do what part you want
101:20 - to
101:21 - and how the function will work once you
101:24 - have done all the discussion then just
101:26 - you just take the data and then we again
101:29 - do the same process we'll create another
101:31 - folder now again I am here giving the
101:33 - name as treeview you can give based on
101:36 - the requirement that you are getting in
101:38 - your interview all right so if they're
101:39 - telling that you have to create a menu
101:41 - UI so obviously you'll be giving the
101:43 - folder name based on the requirement so
101:45 - here the first thing I'm going to create
101:47 - a
101:48 - data.js and I'm going to paste this data
101:50 - data so this is our uh let's give this
101:53 - one name as uh menus all right and then
101:57 - we are going to do export default
102:01 - menu that's it let me just close
102:05 - everything now let's create our index.
102:08 - jsx and then styles. CSS so here let's
102:13 - quickly create the component so this
102:15 - will be export default function now here
102:18 - I'm giving this one as uh Tre
102:21 - now again here you will be basically
102:23 - getting the data or basically the menus
102:25 - from the pattern component so always
102:26 - you'll be receiving from the pattern
102:28 - component so I'm giving this one as
102:30 - menus which will be empty array and here
102:33 - we have to basically do the
102:34 - functionality now here how this will
102:37 - work now the first thing is that if you
102:39 - see the structure so let me just show
102:42 - you so here you have to first render
102:44 - this label and then you have to check
102:46 - that whether this particular object is
102:48 - having any children or not so so yes
102:51 - there is a children so you have to again
102:52 - recursively call the same component and
102:55 - it will basically go on so again this
102:57 - will take this children it will render
102:59 - this level and again it will check
103:01 - whether there is a children or not yes
103:03 - there is a children so again it will do
103:04 - the same process again and again so for
103:07 - that is the reason we need two more
103:09 - component here so I'll be giving the
103:11 - name as one is menu
103:15 - list and then we are having a menu item
103:18 - which will basically render the each and
103:20 - every item so here this is item this is
103:23 - item here this is the item and this is
103:26 - item so on so this will be our menu item
103:30 - do jsx so now in the main component so
103:36 - this is your tree view component here
103:38 - you will be first checking that whether
103:40 - there is a length is greater than zero
103:42 - or not in this menu's length so here we
103:44 - are going to return return and here
103:46 - let's return a div which is our main div
103:49 - so here I'll give a class name name
103:51 - let's give this one a three view
103:55 - container and here first we need to what
103:58 - we can do we can simply render or let me
104:01 - just quickly create the menu list
104:02 - component so list will take the list of
104:04 - data now I'm creating each one each and
104:07 - every component separately so that it
104:09 - will be easy to understand also in the
104:11 - interview time also you should different
104:13 - um create small small chunk of component
104:15 - so that you will be able to explain your
104:17 - interview properly and also this is also
104:19 - much more structured so here I'm going
104:21 - to create this on export
104:23 - default uh sorry export default function
104:26 - this will be menu
104:29 - list now again this will receive the uh
104:32 - list of data which will be again default
104:34 - I'm taking this one as empt now it will
104:37 - return a div now here what we can do uh
104:41 - we'll take a class name here we'll give
104:44 - this on as uh menu list container
104:48 - something like that now here you you
104:50 - need to basically check if this least
104:52 - and and list do length if this is
104:56 - greater than zero or basically if this
104:58 - is true or else we show null here or you
105:00 - can show some message that is also fine
105:02 - that no menu is present so here what you
105:05 - need to do basically this menu list will
105:08 - map the list of data and it will return
105:10 - the single menu menu item so here let me
105:13 - just quickly create this component also
105:15 - so that it will be easier to understand
105:17 - so here I'll be creating the component
105:19 - so this will be function and this will
105:21 - be menu item now what this menu item
105:23 - will receive menu item will receive a
105:25 - single item as I already told you so
105:28 - this is our single item
105:30 - here all right now here let me just
105:33 - quickly return some menu item and later
105:37 - we'll be changing this one so that we'll
105:38 - be able to understand what is happening
105:40 - so now this will basically map here so
105:43 - this will do list do map this will be
105:46 - list item and here it will going to
105:49 - return menu item item and here you'll be
105:51 - passing the item which will be your
105:53 - Leist item all right so that means it is
105:56 - actually three-step process in your
105:58 - pattern component you are calling the
106:00 - menu list item and then sorry from the
106:03 - pattern component first you're calling
106:04 - your main treeview component which is
106:06 - calling the menu list component and this
106:09 - is calling the menu item component so
106:11 - here I'll simply return so here in this
106:14 - component what we going to do we simply
106:16 - call the menu list component and here
106:19 - we'll be passing the list which will be
106:21 - our menus all right these
106:24 - menus awesome so now let's save this now
106:28 - we'll go to our
106:29 - app.js and let me just quickly comment
106:32 - out this part here I'll give another
106:34 - comment and this will be our tree view
106:39 - component or this will be menu UI
106:42 - component or this will be also recursive
106:46 - navigation menu anything you can
106:48 - basically use the same logic here so
106:50 - here I'm going to call the tree view
106:53 - component and here I'll be passing the
106:55 - menus which will be basically our menus
106:58 - that we are having here all right so
107:00 - this menu is basically this static data
107:03 - so now let's format and save this and
107:07 - let's see what is happening here so you
107:09 - can see that we are getting menu item
107:11 - three times now here I want to explain
107:14 - each and everything the reason is why
107:16 - you are getting three times because it
107:17 - is only rendering the parent com parent
107:20 - uh menus here so you're having one then
107:22 - you're having two then you're having
107:24 - three so that is the reason you are
107:26 - getting this one three times because
107:27 - currently we are not checking if the
107:29 - children is present or not if the
107:31 - children is present again we have to
107:33 - basically recursively call the same
107:35 - component but how we are going to do
107:37 - this one now to do that each and
107:40 - everything the logic mainly will be in
107:42 - your menu item component so here now let
107:46 - me show you how we can basically do that
107:49 - so the first thing let let me just go to
107:50 - menu list component and here uh what we
107:54 - can do uh instead of rendering a div I
107:58 - think we can render a
108:00 - ul and here in the menu item we render a
108:04 - AI instead of a div now let me just
108:08 - remove this one now the first thing what
108:10 - we will basically do uh later we are
108:13 - going to change the structure but first
108:15 - let's understand so here I'm going to
108:17 - render the item. level
108:20 - now this item do level is basically this
108:23 - level that we are having here so let me
108:26 - just save this so we are getting home
108:28 - profile and settings main three parent
108:32 - so now what we can do
108:34 - here the first thing is that we need to
108:37 - basically check whether this item has a
108:40 - children or not so here we can simply
108:42 - check if this item and and item do
108:47 - children and and item do children.
108:51 - length if this is true let's give
108:55 - greater than zero so we render null or
108:58 - else what we need to do here now you can
109:01 - pause the video and try to find out by
109:02 - your own because this is a very
109:03 - important concept that you will
109:05 - basically learn how you can recursively
109:07 - call a particular component so here what
109:09 - we need to do we have to call now this
109:12 - is very important you have to call this
109:14 - menu list component only because this
109:16 - will receive the list now if you go to
109:18 - this structure you'll see that okay for
109:20 - the first one we don't have any children
109:23 - so it will basically give you null but
109:25 - for the second one we are having this
109:27 - children so children is again the array
109:29 - of object so this Arrow of object we are
109:32 - going to pass in this menu list
109:34 - component which will again call the menu
109:36 - item component so that means in this
109:38 - component we are recursively calling
109:40 - this menu list component if the item has
109:43 - a children if the item don't have any
109:45 - children so it will be null so here what
109:47 - we can do simply we'll call the menu
109:50 - list component here and then you have to
109:53 - pass the list now list will be basically
109:55 - this item. children I hope you're
109:58 - getting so that means what we have done
110:00 - we are recursively calling this menu
110:01 - list component from this menu item
110:03 - component which will again call the menu
110:05 - item component inside of this if I now
110:08 - go here see now we are getting all of
110:10 - this so we getting home profile inside
110:13 - profile we are having details then we
110:15 - are having location then we are having
110:16 - settings account security and inside
110:19 - security you can see that we are having
110:21 - login and register so till this part you
110:23 - have done now your interviewer will ask
110:25 - you that okay so you are able to
110:27 - basically see what will happen if I not
110:29 - try to add a new one in this location
110:30 - inside location so let's see what is
110:32 - happening so I'll go to data now let's
110:35 - go to location so here I'll again a
110:38 - children and here I'll add a label so
110:40 - I'll just add a Rand random value so
110:42 - this will be random value or let's add a
110:45 - CT so this will be a
110:48 - CT and and I'll add two which will be
110:52 - to uh
110:55 - City so now if I save this sorry if I
110:58 - now save this see now inside location
111:01 - you are getting City so that means it is
111:03 - recursively calling the same component
111:05 - again and again so this is working fine
111:08 - so now your interviewer will ask you
111:10 - okay till this part this is fine now
111:12 - what you need to do for the parent one
111:14 - so let's say this parent this parent and
111:16 - this parent and again each and everyone
111:18 - is the parent of its children
111:20 - you have to show a plus iccon if that
111:23 - that particular item has a children so
111:24 - you have to basically show a plus icon
111:26 - and whenever we will click on this plus
111:28 - icon or basically expand icon then only
111:31 - you need to basically show the children
111:33 - and vice versa so if you click again so
111:35 - it will be toggling basically so that
111:36 - toggle functionality you need to
111:38 - implement so how we are going to do that
111:41 - now later we'll do the uh styling but
111:43 - for now let's complete the functionality
111:45 - so to do this one what you need to do we
111:47 - have to go to this menu item component
111:49 - and here here we are going to take a uh
111:51 - state so here we'll uh take something
111:54 - like uh
111:56 - display uh display current
112:01 - children set
112:04 - display
112:06 - current
112:08 - children and here we are going to take
112:10 - this one as U state of empty
112:15 - object now here uh what you need to do
112:19 - basically so the first thing is that you
112:21 - have to basically show a plus or minus
112:23 - icon so now what I'll do I'll take a d
112:27 - here now I'll paste it now here I'm
112:30 - going to check if this item and and item
112:33 - do uh
112:35 - children sorry dot
112:38 - children and an item do children. length
112:43 - this is true so we'll take a span and
112:46 - we'll show a plus icon for now or else
112:49 - this will be
112:50 - null now let's format this let's save it
112:54 - now let's see so you can see that we are
112:55 - getting plus here here here here and
112:59 - here because these all are having the
113:00 - children for now let me just give Here
113:02 - style as later we'll change this we'll
113:05 - do display as flex and we'll do a gap
113:09 - of
113:12 - 20px okay now what we need to do we to
113:14 - basically take a on click so we take a
113:17 - on click and do handle toggle
113:21 - children all right now here what we
113:23 - going to pass we'll pass the
113:26 - current label now obviously most of the
113:29 - times you will have a ID also for each
113:31 - and every but currently we don't have
113:32 - any ID that is fine but most of the
113:35 - times you'll have ID if you are having a
113:36 - ID or something like that any unique key
113:39 - you can also pass it but at the end the
113:40 - concept is actually same so for now we
113:43 - are going to pass the uh item do
113:47 - label now let's quickly create this so
113:49 - this function
113:52 - handle
113:53 - toggle
113:55 - children it will get current
114:00 - level now here what we need to do we'll
114:02 - simply take set display current children
114:05 - so here we will basically take the
114:08 - existing one and then we'll basically
114:11 - set this get current level which will be
114:15 - not equal to display current children so
114:18 - this is the one that we are already
114:20 - having so that means we are basically
114:21 - checking if the current level is already
114:23 - existing here so you're toggling if this
114:25 - is true it will be false if this is
114:27 - false this will be true of this gate
114:29 - current
114:31 - level that's it so now let me just show
114:35 - you what is happening here and I'll go
114:37 - to log and then you'll do display
114:39 - current
114:43 - children so now let's go to
114:47 - console so first time you can see we are
114:49 - having nothing if I now try to click
114:52 - here we are getting profile true if I
114:54 - click here again we are getting profile
114:56 - false so that means this is working fine
114:58 - so now based on this you will be able to
115:00 - see if we are clicking on this one then
115:02 - only I want to expand the children of
115:04 - this particular menu all right so now
115:06 - what we can do we can simply go here and
115:08 - we can give the condition that if the it
115:11 - uh sorry the if the current item
115:13 - children length is greater than zero and
115:16 - if the current display current children
115:19 - of the current item. label if this is
115:23 - true so that means we are checking if
115:25 - this profile is true then only we want
115:27 - to
115:28 - expand so then only it will show the
115:30 - children if I now save this now you can
115:32 - see we are not getting anything if I now
115:35 - click here we are getting details if I
115:37 - now click here we are getting here but
115:39 - this icon is not changing so this also
115:42 - we can simply do we can go here and then
115:44 - we can check that if this display
115:48 - current children of this item do label
115:52 - this is true so that means what we need
115:54 - to do we will basically show a minus or
115:57 - else will show a
115:59 - plus now let's see so let me just close
116:04 - this so now I'll click here this is
116:07 - minus I'll click here I'll click
116:10 - here and you can see that this is
116:12 - working fine if I know X sorry minimize
116:15 - this one this is working fine if I here
116:18 - that this is also changing and the uh
116:19 - children is also now not s so this is
116:22 - now working fine so this is all about
116:25 - the functionality that you need to do
116:26 - now after this only we will be moving
116:28 - towards to uh styling we'll do very
116:31 - little bit of styling here all right so
116:33 - the first thing what we can do I think
116:36 - uh let me just check whether we are
116:38 - having this react icons okay so the
116:41 - first thing is that we'll import some
116:42 - two icons so we do import something from
116:47 - we'll do react icons slfa
116:50 - so one will be fa
116:53 - minus and one will be fa
116:56 - plus okay so here we'll basically change
116:59 - this one to fa minus sorry this will be
117:02 - fa
117:04 - plus all
117:06 - right sorry this will be F A
117:09 - Plus and uh let's give a color of
117:14 - white and also give a size of
117:18 - 25 and let me just copy
117:22 - this and we'll paste it here so this
117:24 - will be AFA
117:26 - minus let's
117:30 - see okay I think we are having colored
117:32 - white so we need to basically change
117:34 - this uh main styling actually for this
117:38 - container so let me just copy this I
117:41 - think we are already having the
117:43 - Styles so we'll paste it so let give a
117:46 - mean height of 100 VH we'll give a width
117:50 - of
117:51 - 350px and we'll give a background
117:54 - of RGB we'll give 0 comma 71 comma
118:03 - 1110 let me
118:05 - just uh import this one so you
118:11 - import want to do styles do
118:15 - CSS let's save this all right
118:21 - okay this is expanding so this part we
118:23 - need to check what is happening
118:26 - here so for this one let's go to our
118:30 - main menu list
118:33 - component and let's go to menu item so
118:35 - we having Ali here so we'll give a class
118:38 - name we'll give this one as menu
118:42 - item and let's go to our style. CSS so
118:47 - here what we can do we'll give this on
118:49 - SD display
118:50 - Flex we'll give align items as
118:54 - Center we'll give gap of 20 PX and we'll
118:58 - do cursor as
119:00 - pointer now next uh we'll go to our menu
119:04 - list uh so for this one what we can do
119:08 - sorry I think we have given in the wrong
119:12 - place that is the reason so let me just
119:14 - copy this instead of manualist I to we
119:17 - have to give this one in the main sorry
119:19 - we have to give it here not
119:22 - there so here what we can do we can give
119:24 - this one as uh this is fine we'll give
119:27 - this one as I think this was correct
119:29 - review container so let me just copy
119:31 - this and we'll change this one here
119:33 - instead of menu list this will be
119:35 - preview container and then we'll be
119:37 - having menu list container which is for
119:41 - the UI sorry UL so for this one we'll do
119:44 - Leist style as none and we'll do a
119:47 - margin top as 0 PX and we'll do margin
119:51 - bottom as also 0 PX now let's see what
119:55 - is
119:58 - happening okay so here something is
120:01 - [Music]
120:03 - wrong let me just
120:09 - check so I think we are having this is
120:15 - fine okay we don't need display Flex
120:18 - here
120:21 - I got it so the reason is I think we
120:23 - have given in the wrong
120:24 - place you can copy this and we have to
120:28 - give it
120:31 - here and we can remove it from
120:33 - here all right so now let's save it now
120:36 - let's see what is happening okay now
120:39 - this is working
120:41 - fine awesome also let's make the color
120:45 - as uh White we having menu so we'll do
120:48 - color as
120:52 - white okay so now let's see okay so this
120:55 - is working fine awesome if I now so here
121:00 - you can see that everything is working
121:02 - fine uh let's add another one inside
121:05 - this register so we go to our data and
121:08 - then inside this register if I now add
121:11 - another
121:12 - children and we do label so here what we
121:16 - can do we add some random data
121:22 - and we'll do a two of something else
121:24 - empty let's see what is happening so you
121:27 - got the plus icon and we getting random
121:29 - data here if I uh toggle this one this
121:33 - is working and everything is working
121:35 - fine so this is one of the very very
121:37 - important questions that you might
121:39 - encounter in your browser coding
121:40 - interview now as I already mentioned
121:42 - that they will give you the question in
121:44 - many different ways but that the end the
121:45 - concept will be exactly similar so
121:48 - that's all for this this particular
121:50 - project let's move on to the next one
121:52 - all right so this is the first project
121:54 - you can say we'll be using a third party
121:56 - Library package the reason is that
121:57 - sometimes uh you might get asked that
122:00 - whether they will check that whether you
122:01 - will be able to integrate a third party
122:03 - Library package or not so that is the
122:05 - reason I've chosen this project also so
122:06 - here it will be pretty simple you to
122:08 - give any value let's say I'm giving my
122:10 - name and then based on that it will
122:12 - generate the QR code and the same you
122:14 - will be basically able to scan it so
122:16 - this is a very simple project that we
122:18 - are going to Implement so let's see how
122:20 - we are going to do that using a third
122:21 - party Library package all right everyone
122:23 - so let's get started with our QR code
122:25 - generator now as I already told you in
122:27 - the introductory uh section that this
122:29 - will be a very very small project now
122:31 - sometimes interviewer will basically
122:33 - test that whether you will be able to
122:35 - work with any third party Library
122:36 - package or not so that is the reason I'm
122:38 - actually including this very small
122:40 - project so let's see so for this one
122:42 - what we going to do will be using this
122:44 - particular package that called react QR
122:47 - code let me just quickly uh install this
122:49 - one so we'll do npm install and this
122:52 - will be react QR code all right so you
122:57 - will be having one very simple input and
122:59 - there will be a button so whenever
123:01 - you'll be typing some input you have to
123:03 - store the value and on click of this
123:04 - particular button you have to basically
123:06 - generate some random QR
123:08 - code all right so this is done so let me
123:11 - just quickly create a component so here
123:13 - I'll do QR code
123:17 - generator
123:19 - so I'll do index. jsx and
123:24 - styles.
123:25 - CSS so let me just quickly create the
123:28 - component so this will be export default
123:30 - function and this will be QR
123:35 - code
123:38 - generator all
123:40 - right now
123:42 - here we we are going to Simply return
123:45 - some
123:46 - div now here we'll take a H1 and this
123:49 - will be our qword
123:52 - code
123:56 - generator awesome so now after this we
124:00 - will take another div and here we will
124:04 - take a input
124:06 - simple and there will be a button so
124:09 - this will be generate something like
124:12 - that so here we'll be giving a type
124:16 - which will be text name will be now
124:19 - another thing is that uh you should
124:21 - always ask the interviewer that whether
124:23 - this all this input that you are giving
124:25 - here this name type whether this you
124:28 - will be receiving from the parent
124:29 - component or not if the interviewer says
124:32 - yes then in that case you have to take
124:34 - all of this in your props now I'm not
124:37 - doing this one for this particular
124:38 - project because I'm pretty sure that you
124:40 - already have that idea so that is the
124:42 - reason I'm repeting uh this one again
124:43 - and again that you have to basically
124:45 - Drive the interview you have to ask
124:47 - interview a lot of questions so that
124:49 - they will understand that okay whatever
124:51 - you are doing you actually not blindly
124:53 - doing anything okay so that is very
124:56 - important for now we'll give this one as
124:57 - let's say QR
125:00 - code all right and let's give a
125:02 - placeholder and
125:05 - enter
125:08 - your value here that's it and inside
125:13 - this what we are going to do take a div
125:17 - and here we are going to render our QR
125:21 - code which we need to import from our
125:23 - react QR code now this will basically
125:26 - take a ID so here we'll give our uh
125:30 - QR
125:31 - code uh value anything and also it will
125:35 - take a value property so for this value
125:38 - property we are going to basically take
125:40 - a state which will be our
125:44 - QR code set QR code
125:49 - and this will be of use state
125:52 - of
125:54 - empty now what we can do uh now because
125:58 - we need to create this on on click of
126:01 - this particular button so we will take
126:03 - another state which will be our input
126:07 - and this will be our set input now again
126:10 - I'm repeating if he's telling that or
126:12 - your interval that you need to basically
126:14 - get these values from your parent
126:15 - component so you have to again take this
126:17 - one from Pro but there is another way
126:19 - that I'm going to explain so here I'm
126:21 - going to take this one as UST state of
126:23 - empty so that is fine now what we are
126:26 - going to do uh we will basically take a
126:28 - on
126:29 - change so this will give you event and
126:33 - here I'm going to set this on event.
126:35 - target.
126:38 - value that's it and we are going to take
126:41 - a on click for this button which will be
126:43 - handle
126:46 - generate QR code
126:49 - so here let's quickly create this method
126:52 - so this will be handle generate QR
126:56 - code and here simply this is very very
126:59 - simple what you can do you can simply do
127:00 - set QR code which will be your input
127:03 - value now here another thing very very
127:05 - important that always handle some kind
127:07 - of error let's say if the input is empty
127:09 - somehow so you will be basically
127:12 - disabling this button or you'll show
127:13 - some kind of message that your input is
127:15 - empty so here we can basically take a
127:18 - dig
127:19 - and we'll check that if the input and
127:21 - and input do trim if this is not equal
127:26 - to equal to
127:27 - empty so if this is not equal to equal
127:29 - to empty so this will be false or else
127:33 - this will be
127:34 - true that's it now here you have to pass
127:37 - the value and so value will be your QR
127:41 - code and it will also take a size I'm
127:43 - going to take this one as 400 and also
127:46 - let's give a background color of
127:50 - white that's it and I think that's it uh
127:54 - that's all you need so now let's go to
127:56 - our
127:57 - app.js now I'm going to comment out this
127:59 - one and I'll create so this will be our
128:02 - keyword code generator so I'm going to
128:07 - import our QR code generator and then
128:11 - let's save it and let's see what is
128:13 - happening awesome so you can see that we
128:15 - are some getting some value and I'll
128:17 - type something here suum and let's click
128:20 - generate you can see this is basically
128:22 - getting uh generated so this is also
128:25 - getting disabl now once you will
128:27 - generate something let's reset this
128:28 - value also so that we can very easily do
128:32 - so here we can make this set input as
128:34 - empty again let's save this so now we'll
128:38 - give some random value random value
128:42 - generate this is getting changed but
128:45 - this is not getting reseted so the
128:47 - reason is pretty simple simp because we
128:49 - haven't given the value here so here we
128:51 - have to give the value which will be our
128:53 - input all right so I'll give again I'll
128:56 - generate now this is getting reseted and
128:59 - you getting a new all right I think
129:01 - that's it so as I already told you this
129:03 - will be a very small project but this
129:04 - will actually give you some idea how you
129:06 - can create some kind of QR code so
129:08 - that's all for this particular project
129:10 - let's move on to the next one all right
129:12 - so the next one I'm pretty sure that you
129:15 - already know this one uh so this is a
129:18 - light to Dark theme switch and the vice
129:20 - versa so this is the first uh project
129:23 - where we will be creating a custom hook
129:25 - and that is called use local storage so
129:27 - we'll be storing the current uh data in
129:29 - our current choosen theme in the local
129:32 - storage and on click of this button
129:33 - we'll be able to change the text color
129:36 - the button color background color if I
129:37 - now refresh this you can see that now
129:39 - only light will be light mode will be
129:41 - selected the reason is if I go to this
129:44 - application you can see that we will be
129:46 - basically saving the current theme using
129:49 - a custom hook if I change this one this
129:50 - will be basically getting changed all
129:53 - right so this is another very very
129:55 - important project uh interview question
129:57 - that you might get asked and for this
129:59 - one also we'll be not using any third
130:01 - party Li package we'll be creating each
130:03 - and everything from simple scratch using
130:05 - simple CSS and react jsx so let's see
130:08 - how we are going to implement this one
130:09 - all right everyone so let's start
130:11 - working on another very very important
130:13 - uh project that we just now discuss and
130:15 - that is how you can switch from light to
130:17 - dark mode and vice vers so so for this
130:19 - one what we'll do let's create another
130:22 - component so we'll do like uh light dark
130:25 - mode or switch whatever you can do so
130:28 - here first let's quickly create the our
130:32 - structure now here we'll create our
130:36 - component so this will be export
130:39 - default function light dark
130:45 - mode here I'm going to return
130:48 - some
130:50 - div and
130:52 - here uh let's do one thing for now we'll
130:55 - simply return the jsx then we'll explain
130:57 - the uh functionality how we are going to
131:00 - implement that and at the end we'll be
131:01 - doing the
131:02 - CSS and here I'm going to do a div and
131:06 - let's give a class name of
131:10 - container here I'll give a class name of
131:13 - Light Dark
131:17 - mode we'll take a simple paragraph and
131:20 - we'll render here hello
131:24 - world all right now here we will be
131:27 - having a button which will basically
131:30 - switch from uh or basically change the
131:32 - theme so for this one we'll keep this
131:33 - one change theme this is fine so this is
131:38 - all about the GSX structure that we need
131:40 - but first let's imple uh let's discuss
131:43 - that how we are going to do
131:45 - that so the first thing is that what
131:47 - we'll be doing we will be creating a
131:49 - custom hook that will be basically a
131:51 - kind of storage which will store our
131:54 - current uh theme in local storage so
131:57 - that whenever we refresh the page we
131:59 - will be getting our latest uh uh stored
132:03 - uh theme from our local storage and
132:05 - based on that we'll be doing the
132:06 - functionality but because you'll see
132:08 - that whenever you'll go for an interview
132:10 - most of the times in this case your
132:12 - interviewer will say that you can't use
132:14 - any kind of third party package because
132:17 - if you are using any like let's say
132:19 - style components or material UI or
132:21 - something else it will be very very easy
132:23 - for you to implement so because they
132:25 - will give you inbu hook that you will be
132:27 - able to uh easily use and then you have
132:30 - to just pass the property and based on
132:32 - that you have to change the style
132:34 - because here what you will explain your
132:36 - in your interviews that we will be
132:38 - creating a custom hook of our own and
132:40 - there we want to store our Uh current
132:43 - theme and based on that we want to
132:44 - change that first we will be basically
132:48 - explaining how we will be able to create
132:50 - a custom hook so for this one inside
132:53 - this you will be creating a uh file and
132:56 - I'll give this name as use local
132:59 - storage.
133:01 - jsx now custom Hook is basically again
133:05 - I'm pretty sure that you already have
133:07 - some idea so it's like a reusable hook
133:09 - that you can use throughout your
133:10 - application all right in the later
133:12 - section of this particular project we
133:14 - will be creating some more like use fet
133:16 - use responsive use preview yes but for
133:18 - now let's start with this one so now
133:21 - here we'll do export default function so
133:26 - first you have to give the name so we'll
133:27 - give this one as same use local storage
133:30 - now what this will receive this hook you
133:33 - will be calling from anywhere in your
133:34 - component right so hooks are always
133:37 - actually called on the top level on the
133:38 - component so it will receive something
133:40 - so it will receive the key that what
133:43 - what is the name of the key that you
133:45 - want to store in your theme so it will
133:46 - receive a key and and also it will
133:48 - receive the default value that you want
133:50 - to save for this particular key so let's
133:52 - say you having this key that is light
133:55 - theme and the value will be true
133:58 - something like that or the value will be
134:01 - false so this is the key value pair now
134:04 - here what we'll
134:06 - do we'll take our state which will be
134:09 - our value and then we'll set our value
134:12 - now here we'll do US state and this will
134:16 - take a method now this is pretty simple
134:20 - what you can do you can take a current
134:23 - value and here you can do a try catch
134:26 - block now obviously if there are any
134:29 - catch any error so you can log the error
134:34 - first all right you can also set the
134:36 - error so that I will also show you and
134:39 - then what you can do you can set the
134:41 - current value that you are having so
134:43 - this value is with the default value
134:45 - because this default value you will be
134:47 - always passing from from your component
134:48 - correct so this you can set which will
134:51 - be your default value or else if there
134:53 - are no error so your current value will
134:55 - be your json. pars now what will be the
135:00 - current value pause the video and try to
135:02 - find so what you need to do if any value
135:05 - is already stored so you are going to
135:06 - get it from your local storage so this
135:09 - will be your key that you'll be getting
135:11 - or else you have to basically take this
135:15 - one from string of this default value
135:19 - sorry this will be this will be default
135:21 - value so this your setting and at the
135:24 - end because this is a function so here
135:27 - you are going to return the current
135:29 - value what I'm doing you have to return
135:31 - the current value that's
135:33 - it all right so this will do all the
135:36 - functionality saving and everything and
135:38 - at the end I'm sorry not saving you have
135:40 - to basically extracting and now how you
135:43 - are going to save this one so this is
135:45 - also pretty simple so first you have to
135:47 - take a use
135:49 - effect and here it is very very
135:51 - important to keep this key and this
135:53 - value as a dependency because based on
135:55 - this key and value only you want to do
135:58 - this one sorry this value I'm talking
136:00 - about this value here and this is the
136:02 - key that you are passing from your
136:04 - parent component now here you can simply
136:06 - do local storage. set item which will be
136:09 - your key and the value will be see
136:12 - because you're already setting the value
136:13 - here right here so this will be your
136:17 - YouTu do stringify so it will be JSM do
136:20 - stringify of value so this will set your
136:24 - uh value in your local storage or
136:26 - basically your theme and at the end you
136:28 - are going to return return the value and
136:30 - the set value which is your set State
136:33 - method here so this is all about your
136:37 - hook that is need now this hook you need
136:39 - to basically store sorry you have to
136:41 - call from your component or any
136:43 - component that you want so here what you
136:46 - are going to do you will be getting the
136:49 - theme now this is very important so I'll
136:51 - show you why so here you can take any
136:55 - name you want because here you are going
136:57 - to call this use local storage and if
137:00 - you noticed here this is receiving a key
137:03 - and the default value so here I'm
137:05 - keeping the key as theme so now this
137:07 - theme this key can be anything also and
137:10 - here I'm keeping this one as a
137:12 - dark so that means by default my theme
137:16 - will be dark and the this method you are
137:18 - basically getting from here so this is
137:20 - the value and set value are getting
137:22 - right so this is same as this one all
137:24 - right now let's say what you need to do
137:27 - you have to basically change the theme
137:29 - so you'll take on click so we'll take a
137:31 - on click here and this will be handle
137:35 - toggle
137:36 - theme so here we'll do function handle
137:40 - toggle theme and here we are going to
137:44 - Simply do set theme so here you have
137:47 - having this theme right so here you'll
137:49 - check if the theme so this theme that
137:52 - you are having if this is light
137:54 - theme if this is light so you're going
137:56 - to make this on vice versa or else this
137:59 - will be light so if this is light we
138:01 - going to make this on dark and or else
138:03 - this will be light now how I am actually
138:05 - explaining each and everything in
138:06 - interview interview also please please
138:09 - explain each and everything that you are
138:10 - doing you will get extra points for sure
138:13 - and you'll thank me later in this
138:15 - comment section I'm telling you so these
138:17 - thing please always explain in your
138:19 - interview that how you are doing and why
138:21 - you are doing this now let's see what is
138:23 - happening here let me just log this
138:25 - theme
138:27 - here let's save it and let's go to our
138:31 - app.js I'm going to comment out this one
138:34 - and what you're having dark light and
138:36 - dark mode so I'll give another command
138:40 - so this will be light and dark theme
138:45 - switch so here we are having light and
138:47 - dark mode let's save
138:51 - it now let's go to our console so you're
138:54 - having dark I think we are getting some
138:57 - error here all right no nothing is
138:59 - happening this is fine change this one
139:02 - light click here dark light let's go to
139:05 - our
139:06 - application theme is light now click
139:09 - here this is getting changed to dark
139:12 - light dark so this is working fine now
139:14 - this is also a custom hook that you have
139:16 - created so obviously get extra bonus
139:18 - marks for sure in your interview all
139:21 - right so this is now working fine so now
139:22 - this is pretty simple so now you have to
139:24 - work on the CSS but so how we will be
139:28 - basically implementing the CSS see for
139:31 - this one what we going to do we'll take
139:32 - a data property here and here I'll do a
139:35 - data theme which will be this theme that
139:39 - we are having here so that means based
139:41 - on this theme we want to change the
139:43 - style for this particular
139:45 - component so how we are going going to
139:47 - do that so now it's everything in the
139:50 - CSS so now let's quickly create our uh
139:54 - theme do CSS so here we'll take our root
140:00 - oh sorry we'll take
140:01 - root and here I'm going to take some
140:05 - variables so first I'll take background
140:07 - which will be white then I'll take a
140:12 - text
140:13 - primary so for this one this will be be
140:18 - black then we'll take a button color so
140:21 - this will be button BG so which will be
140:24 - button button background now you can
140:26 - take any name you want that doesn't
140:28 - matter at the end we should basically
140:30 - understand that if we are able to
140:32 - understand the concept or not all
140:35 - right and then we are having the button
140:39 - text so we'll take this one as
140:43 - white so this is about our root colors
140:46 - that we need now how you are going to uh
140:49 - set for Dark theme now noticed here we
140:52 - are taking this data theme here so based
140:54 - on this you'll be able to do so here you
140:56 - can do basically simply take a data
141:00 - sorry data theme this will be data theme
141:03 - and this if this is equal to equal to
141:07 - dark so that means you want to do
141:09 - something so based on that I want to
141:11 - change the color if the theme is dark or
141:14 - else this will take from the root so
141:16 - here I'll copy all of
141:18 - this and for this one I'm going to make
141:21 - this one as opposite means if this is
141:24 - white for black it will be dark this
141:27 - will be
141:28 - white this is also will be white and
141:31 - this is will be
141:34 - black that's it now let's save it so
141:37 - this is now will basically change now if
141:39 - you notice we not using any third party
141:42 - Library package so now we're going to
141:44 - import our theme do CSS this is fine and
141:49 - now let's copy out this class
141:53 - name so here uh we'll start with this
141:56 - one
141:59 - sorry so we're going to take a
142:01 - background color and for this one we
142:04 - going to use a uh background this one
142:08 - we'll take a height of 100 VH we'll take
142:12 - display as
142:14 - Flex uh we'll do a flex direction as
142:17 - column we'll do justify content as
142:21 - Center we'll do font size as
142:25 - 20px and we'll do a transition we'll do
142:29 - all uh. 5
142:33 - Seconds let's save it let's see what is
142:35 - happening now go back now change theme
142:40 - see is working I now refresh
142:44 - this see this is now black because
142:46 - currently it is STO show in the black so
142:48 - it's working fine even though we refresh
142:50 - the page right now if I now change this
142:52 - one now you see this will be light only
142:55 - and it's working fine awesome now next
142:57 - what we'll do we are having this
142:58 - paragraph I think so we'll have
143:02 - paragraph uh let's make this on chaining
143:04 - or else this will apply in other
143:06 - components
143:08 - also so inside this paragraph what we
143:10 - going to do we'll do a color so for this
143:13 - one we'll do text
143:15 - primary and we'll do a font size of 40
143:20 - PX awesome then we are having buttons
143:23 - we'll do dot Light Dark theme of button
143:27 - so we'll do a background color so for
143:30 - this one we'll do we button
143:33 - BG and we'll do a
143:36 - border uh for this one we'll do one PX
143:39 - solid where I'll do button background
143:42 - color we'll do a color of where button
143:46 - text
143:48 - that's it we'll do a margin of 6 15 PX
143:51 - let's do 0 PX we'll do a padding of 12
143:57 - PX we'll do a border radius of 8 PX
144:01 - we'll do font weight of 600 and we'll do
144:05 - cursor as
144:07 - pointer this is fine and I think we are
144:10 - having another one which is our
144:11 - container so let's copy
144:16 - this and let's give here container
144:22 - also so we'll do do light dark mode of
144:24 - container so for this one also we'll
144:28 - make display Flex we'll do justify
144:30 - content as Center we'll do align item as
144:34 - Center and we'll do a flex direction of
144:37 - column that's fine and let's take a gap
144:41 - of 30px and I think in that case we
144:44 - don't need this margin here now let's
144:47 - save all of this let's see what is
144:48 - happening awesome so now uh for this
144:52 - paragraph also we do margin of0
144:57 - PX okay now let's see if I now click
145:01 - here it's changing don't worry about
145:03 - it's not middle that is fine at the end
145:05 - we should see whether the function it is
145:07 - working or not so this is changing from
145:10 - black to white this button background is
145:12 - also changing and the color if you
145:14 - noticed if I click here background is
145:16 - now black this is now white this is now
145:19 - White and the color is black and this is
145:21 - also changing so this is how you will be
145:24 - able to implement your light and dark
145:26 - mode without using any third party libr
145:28 - package so what we have done we created
145:30 - a simple uh reusable custom hook which
145:35 - will take the key and the default value
145:37 - now here basically we are extracting the
145:39 - value current value and in the use
145:41 - effect we are setting in our local
145:43 - storage and then from the component we
145:45 - are basically calling this
145:47 - we are setting our Uh current theme as
145:50 - dark and on button click we are changing
145:52 - or basically toggling from light to dark
145:54 - and dark to light the catch is a Pally
145:57 - we basically we are doing this one based
146:00 - on this data attribute here the same we
146:03 - are utilizing in this CSS file yeah I
146:06 - think that's all for this particular
146:08 - project and let's move on to the next
146:10 - one all right so this will be our next
146:12 - project this is called custom scroll
146:14 - indicator so here what we are trying to
146:16 - do we will be fetching the list of data
146:18 - and there will be scroll indicator if
146:20 - you visit some of the website you might
146:22 - notice that whenever you scroll it will
146:24 - basically show you the progress so if
146:26 - you see that if I scroll here and just
146:29 - change the scroll view this will be
146:31 - basically the progress bar will be
146:33 - changed and then if I go to the at the
146:35 - end of the page so it will basically
146:37 - show 100% so this is what exactly we are
146:40 - going to build in this project you'll
146:42 - learn that how the scroll functionality
146:43 - and what are the properties that window
146:45 - properties that you need to use to to
146:46 - create this progress work so let's start
146:49 - working on this particular project all
146:50 - right so let's get started with our
146:52 - scroll indicator so for this one as we
146:55 - already discussed that we will be
146:56 - basically fishing the list of products
146:58 - and based on that we'll be showing how
146:59 - much we have scrolled into our page so
147:02 - we are going to use this URL here so
147:05 - let's go here and let's create another
147:07 - component and this will be our scroll
147:11 - indicator so we'll create our index.
147:15 - jsx and we'll create create our
147:18 - scroll.
147:20 - CSS so let's quickly create the
147:22 - component so this will be export default
147:25 - scroll
147:28 - indicator sorry this will be
147:31 - function all right now here uh let's
147:35 - simply return our
147:37 - div and so basically now your work will
147:40 - be first you have to uh ask your
147:43 - interviewer that the URL that we are
147:45 - calling the API will that be always same
147:48 - or that you will be receiving from a
147:50 - parent component or that URL can be
147:52 - basically anything if that is the case
147:55 - you will be receiving the receive the
147:57 - URL from your parent component as a prop
147:59 - so let's say we will be receiving from
148:01 - the parent
148:03 - component so the first thing is that uh
148:05 - we are going to take our state so this
148:08 - will be our data State and set data
148:11 - which will be use state of empty aray
148:15 - all right now later we going to do the
148:17 - scroll thing but for now let's first
148:19 - Implement our uh data fishing also we'll
148:22 - do a loading State see always implement
148:26 - the loading State because this is always
148:27 - a good practice to implement and this
148:30 - will be US state of
148:32 - false and
148:34 - now uh we will be taking our use effect
148:38 - and then we'll keep this URL as a
148:41 - dependency because that is the we are
148:43 - depending on the parent component and
148:45 - here we'll create a phage data
148:48 - function which will take this URL as a
148:52 - parameter that's it now here let's
148:55 - create the function so we do as sync
148:58 - function Fage
149:01 - data which will take our gate URL and
149:04 - here we are going to implement our try
149:06 - and catch
149:09 - block all right so here for now we'll
149:12 - simply log the
149:15 - error also so you can take another state
149:18 - which will be our error
149:23 - message set error
149:27 - message which will be used state of
149:30 - empty so here you'll basically render
149:34 - this as this error Dot
149:38 - message now here the first thing what
149:40 - you need to do the first thing is that
149:41 - you to make the set loading as true
149:44 - because you are calling the API and then
149:46 - you have to do const response this will
149:49 - be AIT
149:52 - F and here you have to do
149:55 - URL so this URL you are getting sorry
149:58 - this will be get
150:00 - URL and
150:03 - here we'll do const data which will be
150:06 - AIT response. Json and now we are going
150:10 - to first log the
150:13 - data so let's format this let's save it
150:17 - so now go to our app.js let me just
150:19 - comment out this part again and here
150:22 - we'll create another component and this
150:23 - is our scroll indicator
150:27 - component so here we are going to
150:29 - implement uh sorry import scroll
150:31 - indicator which will take URL so this
150:35 - URL will be this one here so let me just
150:39 - copy
150:41 - this and here uh we are going to pass a
150:44 - limit so we'll pass a limit of of 100 so
150:48 - we want to fetch 100 data at once let's
150:51 - save it so now we already logged in this
150:54 - data let's see what we are getting
150:58 - here we are getting object and you can
151:00 - see we're getting the products we're
151:02 - having 100 products this is
151:05 - fine so now we will simply check if data
151:10 - and
151:11 - and data do
151:14 - products and and data do products.
151:18 - length this is greater than zero so
151:21 - we'll do set data which will be data do
151:24 - products and we are going to make the
151:26 - set loading as false
151:29 - again all right so now let me just cut
151:32 - it from here and we'll log this uh data
151:37 - and this
151:38 - loading let's
151:41 - see okay let me just refresh this so
151:45 - you're getting false true and then again
151:47 - we are getting the data done so now what
151:50 - we can do
151:51 - simply uh let me take here H1 tag and
151:55 - we'll Implement custom
151:58 - scroll we'll do custom
152:00 - scroll
152:06 - indicator all right and then uh inside
152:09 - this uh what we can do we'll take a
152:12 - simple
152:13 - div and we'll take a class name which
152:16 - will be our data
152:18 - container and inside this simply you
152:20 - will just render the data for now we
152:22 - keep this one very simple this will be
152:24 - data. length if this is greater than
152:27 - zero or else this will be null and here
152:30 - we are going to render uh the data so
152:34 - this will be data. map data
152:37 - item and let's take a paragraph and we
152:40 - are going to render the data item. title
152:43 - that we are
152:45 - having let's save
152:47 - it now let's see what we getting awesome
152:51 - so we are getting 100 data here okay so
152:55 - now here we have to basically show that
152:57 - uh the scroll that how much we have
152:58 - scrolled and if I go to the bottom of
153:01 - the page so that means we have we have
153:03 - completed the 100% so for this one the
153:07 - first thing is that what you need to do
153:09 - you to manage a state so we'll take
153:11 - another state and what we can do we can
153:14 - check that uh SC
153:17 - percentage something like that set
153:22 - scroll
153:24 - percentage which will be US state of
153:28 - zero for the first time and now here
153:32 - what we need to do we'll take another
153:33 - use
153:35 - effect all
153:37 - right and
153:39 - then we will have to take event listener
153:42 - so we'll do window do add event listener
153:46 - ER and this will be on scroll and we'll
153:49 - do handle handle uh what we can do we
153:52 - can handle scroll
153:58 - percentage all right and we'll just
154:01 - simply do R so on on unmount we are
154:05 - going to remove this one so we'll do
154:07 - window. remove even listener scroll and
154:11 - we'll make this one
154:14 - as like this that's it now let's quickly
154:17 - create this one so we'll do function
154:20 - handle scroll
154:22 - percentage so this is our method now
154:25 - here what we need to check we have to
154:28 - check the following things now I'll show
154:29 - you that there are three things we have
154:31 - to calculate the first one is that how
154:33 - much we have scrolled and what is the
154:35 - full height all right and then how we'll
154:38 - be able to basically uh get that so you
154:41 - have to take the SC height and the
154:44 - client height we have to substract and
154:45 - then based on that you have to calculate
154:48 - the percentage that how much you have uh
154:50 - scrolled so for this one I'll just log
154:52 - some of the things so first we'll do
154:55 - document. body do
154:59 - scrolltop this one or we'll also do
155:03 - document. document element do
155:08 - scrolltop we will also log here
155:11 - document dot document element do scroll
155:15 - height
155:16 - and also we do document do document
155:19 - element. client
155:21 - height so these all the things that we
155:24 - need let me just save it now let's go to
155:27 - our console and I'll just do scroll so
155:30 - you can see that we are getting all of
155:32 - this so one we are getting the full
155:35 - height you can see this is our scroll
155:37 - height and this is our client height all
155:39 - right and this 130 is basically how much
155:43 - we have do we have done till top so so
155:46 - this is a scroll
155:47 - top okay if I know if you see if I now
155:50 - scroll down so this will obviously
155:53 - increase right and see this increase
155:56 - this is increasing so now we will be
155:58 - able to basically create the uh get the
156:01 - percentage very easily so we'll create
156:03 - our percentage like that so we'll do
156:07 - const uh how
156:10 - much uh I'm keeping this one very funny
156:13 - not funny like I'm uh writing this
156:16 - variable name little bit long so that it
156:18 - will be easier to understand so this
156:20 - will be how much sced so this will be
156:26 - document.body do scroll toop or else if
156:30 - this is not so this will be document do
156:33 - document element do scroll
156:36 - toop all right and then we'll be
156:39 - calculating our height so this one is
156:42 - pretty simple we need to get the
156:44 - document
156:46 - dot document element dot we are having
156:49 - this scroll height and we'll basically
156:52 - substract with our client height so this
156:54 - will be document dot sorry document
156:57 - element dot client
157:00 - height that's
157:03 - it and now we can simply create our
157:06 - percentage so this will be set scroll
157:09 - percentage so here this will be how much
157:12 - you scrolled divided by your height
157:16 - right into 100 so we just do like this
157:19 - into
157:23 - 100 let's save it so now let log here uh
157:28 - scroll
157:29 - percent let's save this
157:32 - one so I'll just refresh
157:36 - here and let's scroll down so you can
157:41 - see this is getting
157:44 - changed if I go
157:47 - below and now this is almost 100 so you
157:52 - can see that this is almost 100 so this
157:54 - is now working fine if I know scroll top
157:56 - little
157:58 - bit so you can see this is now
158:00 - decreasing right so this is working fine
158:02 - now based on that we have to create our
158:05 - CSS so now let's give some name of the
158:08 - classes so what we can do uh let me just
158:12 - create another one so we'll create
158:13 - another div here and and I'll give this
158:16 - one as class name so we'll give this one
158:18 - as
158:19 - call
158:21 - progress
158:23 - tracking container something like that
158:27 - and inside this we'll take another
158:31 - div and here I'll take class name this
158:34 - will be our current progress
158:38 - bar all
158:40 - right and here we'll take a style and
158:44 - we'll mark the width of of this one as
158:46 - this uh scroll percent sorry we take
158:49 - template
158:50 - literals and here we'll do our scroll
158:53 - percentage of percent so this is the
158:55 - current width each and every time we
158:57 - will be scrolling so this width will be
158:59 - either increasing or decreasing I hope
159:01 - you're getting all right and here we'll
159:04 - take another one so we'll do here class
159:07 - name this will be our top
159:10 - [Music]
159:11 - container and let's move all of
159:14 - this inside
159:17 - this let's format this let's save it now
159:21 - let's start working on the CSS so first
159:23 - one we be our top container so we'll
159:25 - copy
159:26 - this and here we are going to make this
159:28 - one position as
159:30 - fixed we'll do top as zero we'll do J
159:34 - index as one we'll do width as
159:39 - 100% we are going to do text align as
159:42 - Center we'll do background color as
159:46 - black sorry let's use hex code
159:50 - only all right and and I think for now
159:54 - this is fine
159:59 - sorry okay now next we are having our
160:02 - progress bar so this one scroll progress
160:06 - tracking
160:09 - container so for this one we'll do a
160:11 - width of 100% we'll do a height of 10 PX
160:16 - and we'll do a background of Let me just
160:19 - take some random color then we'll change
160:21 - this one or let's use this
160:28 - color anything we can use for now we
160:30 - keep it like this let's see how this is
160:32 - looking based on that I will change and
160:35 - after that I think we are having our
160:37 - current progress bar so copy
160:41 - this and for this one we'll do a height
160:43 - of 10 PX
160:46 - we'll do a background of this one has 8
160:52 - b0 2
160:54 - B5 then we are having width of
160:58 - 0% yeah I think that's it now let's save
161:01 - it let's see how this is looking so let
161:04 - me just go here and let me import
161:07 - our scroll.
161:10 - CSS if here loading we'll show some kind
161:13 - of message here that at if loading true
161:18 - so we going to return some div uh
161:21 - loading data please
161:25 - wait and if there are any
161:28 - error so we're going to return that
161:32 - error
161:34 - occurred error and we'll just render the
161:38 - error
161:40 - message let's save it let's see what is
161:44 - happening okay this is I think we have
161:47 - kept this one as black only okay let's
161:49 - use some different color what we can
161:59 - use uh we'll keep like this this
162:03 - one let's copy this we'll go to top
162:10 - container and then we'll make the color
162:12 - as
162:14 - white
162:15 - now let's see
162:17 - awesome okay now let's refresh
162:21 - this awesome so you can see that now
162:25 - this is working
162:28 - fine so we are scrolling and this is
162:30 - also giving you the progress right and
162:33 - this is working
162:35 - fine now another thing if you want what
162:39 - you can do basically let's go to
162:42 - this
162:43 - here so here we are having this data
162:46 - container we can copy
162:48 - this and then we can give a margin
162:52 - top uh margin top of 100 PX because we
162:56 - are having that uh because the position
162:58 - is fixed you have to give the margin top
163:00 - to get the full
163:01 - data all right let's save
163:04 - it so now you can see it's working fine
163:09 - right yeah I think that's all for this
163:11 - particular project now this is another
163:12 - important concept that you have learned
163:14 - how you can s see another thing we are
163:15 - not using any third partyy Library
163:17 - package so obviously these all are the
163:20 - very very important uh uh questions that
163:22 - you can practice for your front end
163:23 - interview so that's all for this
163:25 - particular project let's move on to the
163:27 - next one all right so here we are again
163:30 - another very important very frequently
163:32 - Asked interview questions and that is to
163:33 - create custom tabs with Dynamic content
163:37 - without using any third party Library
163:39 - package so this is exactly what we are
163:41 - going to build so here we are having so
163:43 - this data is dynamic so what about how
163:45 - much data we want to pass or how many
163:47 - tabs we want to create based on that it
163:49 - will automatically create the tabs and
163:52 - that this content can be dynamic so you
163:54 - can see that this content whatever we
163:56 - will pass and based on that we'll be
163:58 - creating this uh simple tabs component
164:00 - without using any third party Library
164:02 - package so let's start working on this
164:04 - particular project all right everyone so
164:05 - let's get started working on the custom
164:07 - tabs component so now uh now here also
164:11 - another very important thing is that
164:12 - most of the times in interviews whatever
164:15 - your interviewer will tell that let's
164:17 - say you will get some components from a
164:20 - parent component basically so list of
164:22 - child components and those components
164:24 - you have to pass to your custom tab
164:25 - components and on click of each and
164:28 - every tab you have to render that
164:29 - content based on that particular tab so
164:32 - for this one for this particular
164:34 - component we will be basically having
164:36 - three files so I'll create here like
164:38 - custom
164:40 - tabs so one will be my tabs so we'll
164:44 - give this one as
164:45 - tabs.
164:48 - GSX then we'll be having the Styles
164:51 - we'll give tabs.
164:53 - CSS and then we are having tab test so
164:57 - that means uh this will be our custom
164:59 - component or basically the sorry this
165:01 - will be a parent component so this is
165:03 - just for example in this component we
165:05 - are going to uh use this tabs component
165:08 - all right so now uh let me just do one
165:11 - thing let me close everything else all
165:13 - right so here we'll create the component
165:15 - so this will be export default function
165:18 - and I'll give this on name as tabs for
165:20 - now now here what uh it will receive it
165:24 - will basically receive the tabs content
165:27 - that we are going to pass from the
165:28 - pattern component so we give this name
165:29 - as tabs content you can give whatever
165:31 - you want also it it will going to
165:34 - receive another on change property and
165:36 - I'll discuss
165:37 - why all right now let's return our
165:40 - j6 so here uh let's give a class name
165:44 - and uh styling we are going to do later
165:46 - for now I'll give a class name of
165:48 - wrapper for this one inside this uh we
165:51 - will take another
165:53 - div and here we are going to give a
165:55 - class name and let's give this one name
165:56 - as
165:58 - heading all right now here what we are
166:02 - going to do basically we will map this
166:04 - tabs content and based on that we are
166:06 - going to render the label that we are
166:08 - going to receive now obviously this
166:10 - depends on that in which uh way or
166:12 - basically the how you are getting the
166:14 - data and based on that this key or the
166:16 - value pair will automatically change so
166:19 - this will be our heading section and
166:21 - then after that we will be basically
166:23 - having our tab content section so I'll
166:26 - take another div now and here we are
166:28 - going to take this one as content all
166:30 - right now here I'm going to check if
166:33 - this tab
166:35 - content uh or directly we can do do map
166:39 - so here we'll give tab
166:41 - item and here what we are going to
166:45 - return let's return a div
166:48 - here the first thing is that we are
166:50 - going to give a key which will be our
166:52 - tab item do
166:55 - label now inside this we will take a
166:59 - span and let's give a class name of
167:02 - label and I'm going to render this tab
167:04 - item do label here that's
167:09 - it now next inside this content again
167:12 - here what we need to basically check
167:15 - if we are clicking on that current tab
167:18 - based on that we have to get the current
167:20 - tab index so for this one we need a
167:22 - state that we need to manage so we'll
167:24 - take a state here and let's give this
167:26 - one name as current tab uh
167:30 - index Set current tab index and here I'm
167:36 - going to take this one as a u state of
167:39 - zero all right now here what we are
167:41 - going to do see we are having this tabs
167:43 - content that we are going to receive
167:44 - from the pent components we'll do tabs
167:46 - content of this current tab index if
167:49 - this is true then only we will basically
167:51 - take tabs content of current tab index
167:54 - do content that we are going to pass now
167:57 - for now this is fine let's quickly
167:59 - create the pent component so that it
168:01 - will be easy to understand now let's say
168:02 - this is your pent component and from
168:04 - here you want to call these tabs all
168:06 - right so now here what we are going to
168:08 - do will be creating out uh this
168:10 - component so here we are going to import
168:11 - this tabs component so let's quickly
168:13 - create so this will be export default
168:15 - function let's give this on name as tab
168:19 - test and here I'm going to return and
168:22 - we'll keep this one very simple so what
168:25 - we can do return here tabs so this is
168:29 - our component and here we need to pass
168:31 - the tabs content so now let's say we are
168:33 - having the components like this so we'll
168:35 - create a array here so this will be our
168:41 - tabs and here if you now go to a tabs
168:44 - component so here you can see we are
168:46 - getting Level and the content so these
168:49 - two things you need to pass so here I'll
168:51 - pass level and let's give you some name
168:53 - as tab one and I'll pass a Content which
168:56 - will be I'll take div and this will be
168:59 - this is content for tab one now let's
169:05 - copy this and we'll paste it two more
169:08 - times so this will be tab
169:10 - two and this will be tab two now let's
169:13 - say you are having a separate component
169:15 - so this is just to show you so you're
169:16 - having function some random
169:22 - component and this is returning a div or
169:26 - let's say H1 and some
169:30 - random
169:34 - content okay now here what we are going
169:37 - to do we take a label here also and this
169:40 - will be tab three and here I'm going to
169:43 - pass a content
169:45 - which will be instead of this now I'm
169:47 - going to pass this random component here
169:49 - so we can simply pass this random
169:51 - component also this will work so now
169:53 - this is our tabs or basically the arrrow
169:55 - of tabs and this we need to pass it here
169:59 - that's it and now if you go here we are
170:02 - also passing this on change so that
170:04 - means the current tab that we are
170:06 - currently clicking we need to get the
170:08 - tab index and based on that let's say
170:09 - you want to do certain operation for
170:11 - example you want to save the data in the
170:13 - database or whatever you want to call
170:15 - Api so now for this one here I'll pass
170:18 - on change which will be my handle
170:21 - change so now let's quickly create this
170:24 - component so this will be function
170:26 - handle change now here this will
170:28 - basically receive our current tab index
170:32 - current tab index so basically what we
170:34 - are doing we are doing a parent to child
170:36 - and child to parent relationship and
170:39 - let's say I want to log this current tab
170:41 - index that's it now let's save it now we
170:45 - need to go here and now here what we are
170:47 - going to do we need to basically create
170:49 - this functionality that whenever we will
170:51 - be clicking on this particular header I
170:53 - need to set that onto the current index
170:56 - because you can see we are checking that
170:58 - if the current index is true then only
171:00 - want to show the content here so here we
171:03 - can take on
171:05 - click and here I'll create a handle on
171:09 - click and I want to pass the index let's
171:12 - say we are having this index so this
171:15 - index we want to pass it here so now I'm
171:17 - going to create a function handle on
171:20 - click so this will get the get current
171:25 - index now simply set this current tab
171:29 - index to get current index now we can
171:32 - call this parent function here and we
171:35 - can simply pass this get current index
171:37 - also this will be done now let's format
171:40 - this let's save it now this component I
171:43 - want to use in my app .js so now I'll
171:46 - just commit it out and let's give
171:48 - another comment so this is our custom
171:50 - tabs
171:53 - component and here I'm going to import
171:55 - tab
171:58 - test that's it let's save it now let's
172:02 - see what is happening all right let's
172:04 - see what is happening here I think this
172:06 - is some styling
172:08 - issue okay so you can see that we are
172:12 - having here let me just give some
172:13 - styling for now so we go here let's go
172:16 - to our
172:17 - tabs content for now we'll give a style
172:21 - and we'll give a color of
172:23 - red now let's
172:26 - see all right now if I change this one
172:28 - tab two and if I click here we are
172:30 - getting some random content click here
172:33 - so this is working fine all right now
172:35 - let's start working on the styling so
172:37 - this is all about the functionality that
172:39 - we
172:40 - need so now let's go to our tab. CSS so
172:44 - the first thing is that we are having
172:45 - our wrapper components we'll take dot
172:49 - wrapper and let's give a padding of how
172:52 - much
172:54 - 8px next I think we are having heading
172:58 - so we'll take heading we'll give display
173:01 - Flex we'll give justify content Center
173:05 - and we'll give a margin bottom of 2
173:07 - lpx uh next I think we are having
173:12 - label or let's do one thing let's also
173:15 - give some uh class name to this also so
173:19 - this div so let's give a class name here
173:22 - and for this one we are going to give a
173:24 - dynamic class name so here what we can
173:26 - do we can give a class name of tab item
173:30 - and then we can basically check that if
173:32 - this current tab index if this is equal
173:35 - to equal to index that means this is
173:37 - currently selected so we give a active
173:40 - class name here that means this tab is
173:42 - active or this will be empty
173:45 - all right so now let's copy this tab
173:51 - item so for this one we'll give this one
173:53 - as display as inline
173:56 - Flex we'll give font size of uh let's
173:59 - give how much
174:00 - 30px uh we'll give font weight as
174:05 - bold sorry this will be bold we'll give
174:08 - a text align as
174:12 - Center uh we'll also give a adding of 10
174:15 - PX 15
174:18 - PX what else we give a cursor as pointer
174:22 - and we'll do border as
174:24 - none Also let's give a color color will
174:27 - give white and let's give a background
174:30 - so background will give this one 4 e 01
174:34 - 6
174:37 - a that's it now if this is active so
174:41 - we'll give tab item do active
174:46 - so we will basically change the styling
174:49 - so we'll do a border
174:53 - color color of
174:55 - black and we'll give a background color
174:58 - or
175:00 - background so we make this one A1
175:05 - D60 and we'll do a color
175:08 - of
175:11 - white that's it now next we are having
175:16 - label so we'll take this for label I
175:20 - think uh what we can do I think for
175:22 - level it is fin not required let's give
175:25 - some styling in the content so we'll
175:27 - take
175:28 - content and here we give a padding of 20
175:31 - PX 10 PX we'll give a height of 300 PX
175:37 - we'll give overflow as
175:39 - Auto and also let's give a background
175:42 - color of white
175:45 - and I think for now this is fine let's
175:47 - save it now in this tab test component
175:50 - only I think we can
175:53 - import
175:55 - tab.
175:57 - CSS now let's save
176:00 - it let's see what is happening all right
176:04 - we are getting something but this is
176:05 - fine let's see what is happening here so
176:08 - you're getting tab one this is content
176:10 - for tab one this is tab two and this is
176:13 - tab three where we are getting some
176:14 - random content so this is working fine
176:17 - see at the end our Prime objective is to
176:19 - complete this small small uh project so
176:21 - that whenever it gives any kind of
176:23 - interview because whenever you're
176:25 - learning at the end your objective will
176:28 - be to get good com good job in a good
176:30 - company especially product based company
176:33 - now whenever you give some interview
176:35 - they will always ask you very simple
176:37 - questions but the questions will be in
176:39 - such a way that they will basically
176:41 - judge that how you are approaching that
176:43 - problem what is is the approach and how
176:45 - you are explaining that uh whether you
176:48 - know that what basically you are doing
176:49 - so that is the reason you should always
176:51 - explain these all of the things that you
176:53 - are doing in your interview and that
176:54 - will definitely going to help you a lot
176:57 - so I think that's all for this
176:58 - particular project now let's move on to
177:00 - the next one all right welcome to the
177:02 - next one so next one will be another
177:05 - very important uh interview question now
177:06 - I'm tell telling all of this B C you
177:09 - might say that okay he's telling each
177:10 - and everything important see this is the
177:12 - reason why I've have taken so much time
177:14 - while selecting these questions because
177:16 - most of the times you will get the
177:18 - questions from this particular video
177:20 - Whatever projects that we are doing so
177:21 - here again we are using not using any
177:23 - third party liy package we'll be
177:25 - creating this um custom model component
177:27 - where we will be basically able to
177:30 - create this model where will this data
177:32 - whatever data we're having here each and
177:33 - data can be customized and based on that
177:35 - we'll be creating this model for this
177:37 - one also will not use any third party
177:39 - liability package because whenever
177:41 - you'll face this interviews uh these
177:42 - questions in your interview especially
177:44 - the model they will ask you not to use
177:46 - any third party Library so let's see how
177:48 - we are going to do this all right so
177:50 - let's uh create our custom model
177:52 - component so first I'm going to create
177:55 - another folder here and let's give this
177:57 - one name as custom model
178:00 - popup and let's create our here also
178:03 - we'll create our model.
178:05 - jsx we create model do CSS and also we
178:09 - create another one which will be model
178:11 - test. GSX
178:14 - let's close everything else now here
178:17 - also how this will work so let's say
178:19 - this is your parent component and you
178:21 - are having a reusable model component so
178:23 - you will be managing the state from this
178:25 - component only so you'll be let's say
178:27 - you are having a button here and on
178:29 - click of this button only want to open
178:30 - the model so that means we are going to
178:32 - import the model in this component only
178:35 - and that model we are going to use
178:36 - throughout the application so this is
178:37 - the main idea so now here now obviously
178:40 - see the approach you can do this on many
178:43 - many different ways is at the end our
178:45 - objective is to understand the concept
178:47 - uh very carefully and how you can
178:49 - Implement those in real life projects or
178:51 - basically in your interview whatever so
178:54 - here I'll create
178:55 - a uh component first so this will be our
178:58 - function and this will
179:01 - be model
179:04 - test all right so now here let's quickly
179:08 - create our model component also so this
179:10 - will be export
179:12 - default function this will be our
179:16 - model and here I'm going to just return
179:19 - here model for
179:21 - now so now here in this component I'm
179:24 - going to return a
179:27 - div and inside this let's say we having
179:29 - a
179:30 - button and we having open model popup or
179:35 - anything now to manage the state from
179:38 - this component you have to take the
179:40 - state here and you have to pass this one
179:42 - in your model component so let's quickly
179:45 - take a state so this will be so
179:48 - model popup set so
179:53 - model
179:56 - popup which will be obviously used of
179:59 - false all right now uh because you are
180:02 - managing from here so you have to take
180:04 - on click in this button so I'll take an
180:07 - on click like handle
180:09 - toggle
180:10 - model
180:12 - popup so so this will be
180:16 - function handle toggle model popup now
180:20 - what you need to do here you just need
180:22 - to Simply toggle this so this will be
180:24 - set so model popup it will be not equal
180:27 - to so model popup that means if it is
180:29 - false it will be true if it is true it
180:31 - will be false vice versa so now what you
180:34 - can do you can simply check now this is
180:36 - pretty simple the only thing they will
180:38 - check I'll tell you whenever they will
180:40 - give you to create any kind of model
180:42 - they want to test how you are good at
180:44 - CSS because in this particular project
180:46 - function it is very little at the end
180:49 - they will tell you that how you are
180:50 - going to implement the CSS and also
180:51 - let's see if you want to pass some
180:53 - custom content to the model how you're
180:55 - going to do
180:56 - that so here you will basically do if
180:59 - this so model popup is true then only
181:01 - you want to render the model component
181:04 - that's it now here uh what we'll do for
181:08 - now this is fine now let's save it so
181:11 - let's go to app.js I'm going to comment
181:14 - out this one and here we are having
181:16 - custom
181:18 - model
181:21 - component so this will be our model
181:25 - test let's save
181:27 - it so I click here we are getting model
181:31 - so this is working
181:32 - fine so now let's go to our model
181:35 - component
181:37 - first so this is our model so here what
181:41 - we are going to do so the first thing is
181:44 - that it will receive some of the props
181:47 - now why it will receive some of the
181:49 - props the first thing it will receive
181:51 - the ID of the model it will also receive
181:54 - the class name it will receive a header
181:56 - content body content and the model
181:58 - footer content if you don't have any of
182:01 - this then it will basically uh what it
182:03 - will do it will basically render the by
182:06 - default content so what you can do here
182:09 - the first thing let's quickly give a ID
182:12 - here so ID here will be ID or if it is
182:16 - ID not present so this will be our model
182:19 - and this ID it will going to receive
182:21 - from this parent
182:23 - component so this is first thing then it
182:25 - will be class name will be let's give
182:27 - this one as model inside this we'll take
182:30 - another div we'll give a class name
182:32 - we'll give model uh we'll give this one
182:34 - as
182:35 - content all right inside this will take
182:38 - another div this will give class name as
182:42 - header and after this we going to take
182:45 - another class name sorry another div
182:47 - this will be class name this will be our
182:50 - body and after this we'll take another
182:52 - div we'll take a class name this will be
182:55 - our
182:57 - footer all right now here it will
183:00 - receive a header content it will also
183:02 - receive the body it will also receive
183:04 - the
183:05 - footer so now how you're going to
183:07 - basically do that and before that let's
183:10 - take a span here so this will be class
183:12 - name will give close
183:14 - model
183:17 - icon and here we are going to pass this
183:20 - so we'll
183:22 - do
183:24 - times that's it it will basically create
183:27 - a cross icon and here I'm going to take
183:29 - a A3 let's uh H2 also is fine and here
183:33 - I'm going to check if the header uh is
183:36 - present so it will render header or else
183:39 - this will be uh
183:41 - header that's it
183:44 - same here also so you're going to check
183:46 - if body is true so it will get body or
183:49 - else we are going to render some default
183:51 - content here and inside this uh let's
183:55 - take a p so this is
183:58 - our model
184:04 - body and same will be for
184:06 - footer so if footer is present it will
184:09 - do footer render footer component or
184:12 - else this will be will take this one as
184:15 - uh H2 so this is our
184:20 - footer all right now let's save it now
184:23 - let's see what is happening so if I now
184:25 - click here all right nothing is
184:27 - happening
184:29 - here I think we are getting some
184:39 - error okay I think the content is coming
184:42 - and the point is I think there are some
184:44 - issues happening with this tabs content
184:47 - all right I got it so we'll give this
184:50 - one as model content let's see now see
184:55 - now this is coming okay so this is
184:57 - working fine now let's see what will
185:00 - happen if I try to pass some uh random
185:03 - sorry some Custom Body so here we'll
185:05 - pass body and we'll make this one as a
185:08 - div component and this is will be our
185:12 - customize
185:15 - body now let's format it save
185:18 - this if I click here we are getting
185:21 - customized body so that means it's up to
185:24 - you you will be able to manage whatever
185:26 - you want to do from here right so this
185:28 - is the advantage of creating a reusable
185:30 - component so I think that's all for this
185:32 - particular project in terms of
185:34 - functionality now let's start working on
185:36 - the CSS so now the first thing we are
185:38 - having this model class name so we'll go
185:42 - to our model CSS and this will be our
185:45 - model so we make the PO as fixed we'll
185:49 - do J index as
185:51 - one uh we'll do a padding top
185:54 - of uh 150 PX we'll do left of zero we'll
186:00 - do top of
186:04 - zero width will do 100% height we'll do
186:08 - 100% we'll do overflow as
186:12 - Auto
186:13 - and also we'll do a background
186:17 - color which will be our uh we'll do
186:20 - black color only so this is fine next I
186:25 - think we are having the model
186:27 - content so copy
186:30 - this and here I'm going to pass the PO
186:33 - as
186:34 - relative we'll do background color as
186:38 - Fe F
186:40 - Fe then we having margin as
186:44 - Auto we'll do padding of zero we'll do
186:48 - border of 1 PX solid
186:53 - red we'll do width as
186:57 - 80% and I think this is
187:01 - fine now first let's see what is
187:04 - happening if I save this let's go here
187:06 - because in this component you have to
187:07 - import so I'm going to
187:09 - import model. CSS let's save
187:14 - it all right so it's coming black this
187:18 - is looking very bad let's do one thing
187:20 - let's change this color to something
187:22 - else uh let's see I'll go
187:27 - here we'll do something
187:32 - different let's
187:34 - see okay I think this is fine at theend
187:36 - now another thing what we need to do we
187:38 - have to basically close this
187:41 - here all right so this what we are going
187:44 - to do so for this one let's take a on
187:49 - close method here so we'll do function
187:52 - on
187:53 - close and here I'm going to do set so
187:56 - model popup and this will be equal to
187:59 - false all right and this I'm going to
188:02 - pass it here so this will be our on
188:05 - close all right so this it will receive
188:07 - in this model jsx so it will receive on
188:10 - close and now the advantage is is that
188:13 - you can easily manage this using on
188:15 - click so you on click and you'll pass
188:17 - this on close that's it so now if I go
188:20 - back if I now click this is closing and
188:24 - it is working fine all
188:27 - right now let's give some more uh
188:30 - styling also so the first thing is that
188:32 - what we can do we can give some styling
188:34 - to
188:35 - the uh this close icon so let's go to
188:40 - model. jsx we having close model icons
188:43 - we copy
188:44 - this and we'll do here cursor pointer
188:47 - first we'll
188:49 - do all right color I think let me
188:53 - see color this is
188:56 - fine uh we'll do this one
189:00 - as we'll do font size as 24
189:04 - PX we'll do a float
189:07 - right and we'll do font
189:09 - weight as
189:11 - bold
189:15 - okay this is coming here let me do this
189:18 - one
189:20 - 40 all right now next we are having I
189:24 - think header so let me copy this so
189:29 - we'll do dot header we'll do padding of
189:31 - for PX 16 PX we'll do a background color
189:36 - here we'll do this color 5 C B 85
189:41 - C and we'll do color of
189:48 - white awesome now next uh we are having
189:52 - body so we'll do dot body we'll do a
189:55 - padding of 2 PX 6 15
190:01 - PX uh let me see what is the name body
190:03 - is fine and after that we are having
190:06 - footer so we do do footer we'll do
190:08 - padding as 2 PX 16 PX let's make this on
190:12 - 16 PX only and after this we are going
190:15 - to do a background
190:17 - color should use the same color
190:22 - here
190:25 - sorry what I'm doing okay this is fine
190:29 - and we'll do color as white
190:38 - only okay and for body let me just check
190:42 - what is happening in
190:46 - here uh let me just give a height of 200
190:52 - PX okay yeah I think this is
190:55 - fine if I now close this open
190:59 - this so this is working fine if you want
191:02 - you can also give some uh animation Also
191:04 - let's give some animation here so we'll
191:07 - go to our model content and here we'll
191:10 - do some animations we'll give Animation
191:15 - name animate
191:18 - model and also we give Animation
191:20 - duration of uh 0 uh how much 5 Second
191:25 - and this uh key frame you need to create
191:27 - so we'll create a key frame so we do at
191:29 - theate Key frames we have to give the
191:32 - name so here we'll do from so it will
191:35 - start from let's say we want to give a
191:37 - bottom or whatever bottom let's say we
191:39 - want to give minus 200
191:41 - PX and that time we will give a opacity
191:46 - of zero and then what you need to do to
191:48 - give a two so this will be
191:51 - bottom we give bottom
191:54 - zero or let's do one thing let's make
191:56 - this one as STP instead of bottom and
191:59 - I'll do this one a stop and then for two
192:03 - this oppacity will be
192:05 - one all right so now let's see what is
192:08 - happening if I now save this I click
192:11 - here see
192:14 - it is working fine and this is looking
192:16 - nice so now if you want you can pass
192:18 - customized header so let's pass some
192:20 - customize header also so here let me
192:23 - just format this so here you can pass a
192:26 - header component which will be let's say
192:29 - your
192:30 - H1 so this our
192:34 - customize
192:36 - header and also if I now copy this and
192:39 - pass it so this will be our footer so
192:42 - this will be our customize
192:45 - footer I now save it so you're getting
192:48 - customized header customized body and
192:50 - customized footer and this is working
192:53 - fine also if you want you can pass some
192:55 - id id custom
192:58 - ID that's it so this is how you need to
193:02 - create a model component now this is
193:04 - also very frequently Asked interview
193:06 - questions and you should always practice
193:08 - this one so that's all for this
193:10 - particular project let's move on to the
193:12 - next one all right so this is another
193:15 - project simple project that we are going
193:16 - to build where we will be using the
193:18 - GitHub uh public API to F and username
193:21 - details so if I search something here
193:23 - let's say Tom and search here so you can
193:25 - see that we'll be showing the loading
193:27 - State and based on that we'll be getting
193:28 - the data here and I will be basically
193:31 - able to visit this particular user
193:34 - GitHub page and if I type my name
193:38 - here so you can see that this data is
193:41 - coming and then will be basically going
193:43 - to my homepage so this is another very
193:45 - simple one that we are going to create
193:47 - so let's see how we are going to do this
193:48 - one all right everyone so let's start
193:50 - working on our GitHub profile finder so
193:53 - for this one let's quickly create
193:55 - another component inside this and I'll
193:56 - give this one name as GitHub profile
194:00 - finder so inside this I'll create our
194:03 - index.
194:04 - jsx and we'll create styles.
194:09 - CSS and let me close everything else so
194:12 - the first thing is that we are going to
194:13 - create the component so this will be
194:14 - export default function and we'll give
194:17 - this one as G profile
194:19 - finder so how the approach will be so
194:22 - we'll be calling a simple API based on
194:24 - that we'll be getting the uh that
194:27 - profile data based on a input that we
194:29 - will be basically typing and then
194:32 - whatever data we'll be receiving based
194:34 - on that we want to render the user based
194:36 - on that particular API response so here
194:39 - I'm going to return a div and inside
194:43 - this I'll give this on a class name and
194:45 - let's give this one name as GitHub uh
194:50 - profile
194:54 - container all right inside this we'll
194:57 - take another div let's give a class name
195:00 - so here I'll give this one as input
195:05 - wrapper and here let's take a
195:08 - input so I'll give this a name as uh
195:11 - like what we can do we can give name as
195:14 - a
195:15 - GitHub or let's give this on name as
195:19 - search by
195:21 - username we also give a
195:24 - type which will be
195:27 - text we'll give a placeholder which will
195:29 - be
195:30 - search GitHub
195:35 - username all right and after this we'll
195:39 - be having a
195:41 - button and here we are going to uh do
195:45 - something like
195:48 - search that's it so later we are uh we
195:51 - will be implementing the CSS but for now
195:54 - this is fine so here in this button
195:56 - we'll be having on click method which
195:57 - will be handle
196:00 - submit so here we're going to create the
196:03 - function this this will be handle
196:06 - submit and now we need to basically take
196:08 - some
196:09 - state so one will be our user name state
196:13 - so which will hold the username that we
196:15 - are typing in the input and let's say by
196:18 - default I want to keep this one as my
196:20 - name so I'll give this one as s mukarji
196:22 - so on page load it will be always this
196:25 - value here all right and here I want to
196:28 - pass this value as this
196:31 - username that's it now here the next
196:36 - thing what we are going to do we'll take
196:37 - a onchange method which will give you
196:40 - the
196:41 - event and this will be set username
196:44 - which will be event. target.
196:48 - value that's
196:50 - it all right till this part this is fine
196:53 - so now what we going to do we will take
196:55 - use
196:58 - effect all right so now here what we can
197:01 - do we can simply take a use effect so on
197:03 - page load we are going to call uh API
197:06 - and let's do this on something like
197:09 - fet uh D have
197:12 - user
197:14 - data and now let's quickly create this
197:17 - method so this will be assing
197:20 - function Fage gav user
197:23 - data and here we'll do const response
197:26 - which will be AIT
197:29 - Fage now here what we need to do we have
197:31 - to give this URL which is https api.
197:34 - github.com
197:37 - slash users slash and here you have to
197:40 - basically pass the username
197:44 - that's
197:45 - it so having const data which will be
197:49 - have it race.
197:52 - Json and we're going to log the data
197:56 - here so now let's see what is happening
197:58 - now first so we'll save it and let's go
198:01 - to our
198:03 - app.js and now
198:05 - here we're going to give GitHub
198:10 - profile finder
198:13 - and this will be GitHub profile finder
198:17 - let's save
198:18 - it and now let's see what is happening
198:21 - all right so you can see that we are
198:22 - getting s mukarji here and if I go to
198:24 - console we're getting object and inside
198:28 - this we are getting all the data here
198:30 - now whatever data we need based on that
198:32 - you will be able to render the data as
198:34 - simple as that so for this one what we
198:36 - can
198:37 - do uh let's do one thing let's take
198:40 - another state here so this will look
198:42 - const user
198:44 - data and set user
198:47 - data and this will do US state of null
198:52 - and then we are going to check if the
198:54 - data is true so we are going to do set
198:57 - user data will be our
199:00 - data and also let's take a loading state
199:03 - so I'll take another one so const
199:07 - loading set loading which will be use
199:11 - state of of
199:13 - false and before calling the we're going
199:15 - to do this one as
199:18 - true and here we are going to make this
199:20 - one as
199:24 - false all right now here we'll do if
199:27 - loading is true so we'll simply return
199:30 - H1 and we show like
199:33 - loading
199:35 - data
199:38 - please
199:41 - wait now let's save it let's see what is
199:45 - happening phras
199:47 - this so you're getting immediately that
199:50 - is fine we can also make this one as
199:51 - true also that is also fine now let's
199:55 - see now let's refresh
199:57 - this okay now this is fine now let's
200:01 - create another component here and uh
200:03 - what we can do we'll give this one
200:06 - as uh what we can do we'll give this one
200:08 - as card do
200:10 - jsx and basically we are going to pass
200:13 - the user data let's make this one as
200:18 - user so this will be export default
200:23 - function user so this will receive the
200:26 - user
200:28 - item and we are going to basically
200:30 - return the jsx
200:32 - here all right so first let's go here
200:36 - let's see what we are getting and what
200:38 - are the things that we need so the first
200:40 - thing is that you can see that we are
200:41 - having having this URL or uh this one
200:45 - basically here this is the image that we
200:47 - can
200:51 - use uh what else we need we can also
200:54 - check
200:55 - like when this is created we can also
200:58 - get the followers data here how many are
201:01 - following all right uh what else we need
201:04 - we can also check like how many repos
201:06 - are there uh repo URL like whatever you
201:10 - need basically you'll be able to Al able
201:12 - to check that if this is a type of user
201:14 - or not all right and this is the URL or
201:17 - basically the website that you want to
201:18 - visit so let's start with this one so
201:21 - let's say I want to take this one here
201:24 - so first let me return something
201:27 - here so we going to destructure a our
201:33 - URL then we need the
201:40 - followers then we need how many are
201:47 - following then we need the what else you
201:51 - can check the public
201:57 - repos and also you'll take the URL
202:04 - here so this will be from our user let
202:08 - me just format this all right all right
202:11 - now let's quickly create the uh jsx here
202:15 - now we'll give a class
202:18 - name and let's give this one as
202:21 - user and inside this we'll take a
202:25 - div and we'll take a image
202:30 - here we'll give the source which will be
202:33 - our this this URL
202:35 - here also give a class name
202:39 - aor and we'll give alt which will be
202:41 - your user uh user that will be fine we
202:45 - don't need to specifically say like it's
202:48 - a image that is fine all right now after
202:51 - this we'll take another
202:53 - div and I think we are also having the
202:55 - name that we can take I
202:58 - think so you can see that we are having
203:00 - this name which is null for now that is
203:03 - fine we can also take this login name
203:06 - that is the name that we can check so if
203:08 - the name is null so we render the login
203:10 - one so we'll check the name
203:12 - or the
203:14 - login so here what we will do uh we will
203:20 - basically take a paragraph and we'll
203:22 - render the or or let's do one thing uh
203:26 - we will take a anchor here and we are
203:29 - going to render this if the name is
203:31 - present or else this will render the
203:33 - login and here we are going to give a h
203:36 - rdf so this will basically go to this
203:39 - URL here on click of this so this is the
203:41 - URL you can can
203:44 - see this one let me see what is
203:46 - happening here it is giving this data
203:50 - this we don't need what we going to do
203:52 - we don't need this URL then so we'll
203:54 - give a let's give a template literals
203:57 - here and we'll give
203:59 - https SL github.com
204:04 - and then here we will be able to pass
204:07 - this login data that we are having the
204:09 - reason is because if I show show you
204:11 - here this login is basically my username
204:13 - that we are having here so this we can
204:15 - basically use and I think this will be
204:18 - fine all right let's see what is
204:20 - happening till now so I'll go here and
204:23 - here we'll basically check if the
204:26 - user uh user data if this is not equal
204:28 - to equal to
204:30 - null or else will show null or else we
204:33 - are going to render the
204:36 - user and we'll pass the user which will
204:38 - be my user
204:40 - data all right let's save it and let's
204:45 - see what is happening awesome so you're
204:47 - getting the data here and also once we
204:49 - call the data let's make this one as uh
204:52 - false sorry let's make this username as
204:54 - empty so we set username as
204:59 - empty let's refresh
205:01 - this awesome I'll search something like
205:04 - let's give Tom also okay on click of
205:07 - this also you need to give this so let
205:09 - me just quickly call the same one so on
205:11 - handle submit we can call the same F get
205:13 - user data this will
205:17 - work okay now I'll give S mukarji
205:22 - search we getting we'll give Tom search
205:26 - we getting something let's give some
205:28 - random value let's see what is coming
205:31 - we're getting some random data let's
205:33 - give some
205:37 - name awesome so it's working fine so now
205:41 - we have to start working on the uh
205:42 - styling so what else we can render here
205:45 - we can render there uh when basically
205:48 - this
205:50 - user uh created the data or basically he
205:53 - created this data so this is the created
205:56 - data that we'll be able to get so let me
205:58 - just copy this so go here I think we are
206:02 - already have taken let me check we don't
206:04 - have
206:06 - taken okay so now here what we can do we
206:09 - can create our date so this will our
206:11 - created date which will be our new sorry
206:15 - this will be equal to new
206:18 - date of this created date and after this
206:22 - what we'll
206:24 - do uh let's take after this only we'll
206:26 - take a
206:28 - paragraph and we'll show something user
206:32 - joined on and then here we'll take a
206:37 - template
206:38 - literals and we'll do create a date dog
206:42 - datee so this is the date it will give
206:46 - and after this we'll give a space and
206:49 - here we will do this created date sorry
206:52 - created date do to local
206:56 - string and here we can pass
206:59 - en
207:01 - us all right and after this we'll give
207:05 - the property will'll Pass a month we'll
207:07 - make this one as
207:09 - sort awesome and after this what we can
207:13 - do we can simply take another template
207:15 - literals here and here we are going to
207:17 - pass this created date Dog full
207:22 - year so let's format this let's save
207:27 - it so user join on this is fine let me
207:30 - refresh
207:32 - this so you can see that user joined on
207:35 - 17 March 2019 so this is working fine
207:39 - all right now next what we going to do
207:41 - we'll keep this one very simple we'll
207:43 - take another div all right and you'll
207:46 - render here three more Dives so we'll
207:48 - take
207:49 - one we'll take two and
207:52 - three and here we'll take a paragraph so
207:56 - this will be the public
207:59 - repos all right and we'll take another P
208:03 - so this will be our the number of repos
208:06 - so this will be public repos let's copy
208:09 - this render here for followers and
208:12 - following so this will be
208:19 - followers and this will be
208:26 - following
208:29 - awesome let's save this let's see so we
208:33 - getting the data
208:35 - here let me refresh this let me search
208:39 - like what you going do here
208:42 - I'll give something like this let's
208:44 - search it so we getting some data here
208:48 - okay so this is now done so now let's
208:51 - quickly create uh little bit of a
208:53 - styling we don't need that much styling
208:56 - the only uh objective is to learn the
208:58 - functionality again I'm repeating the
209:00 - same thing but let's give some basic
209:02 - styling actually I think that will be
209:03 - more than enough so what we can do
209:06 - having the Styles let me first import
209:07 - this one in this
209:09 - component also let me remove this
209:11 - console so here we can import
209:16 - our
209:17 - Styles uh sorry this will be styles.
209:22 - CSS all right so the first thing we are
209:25 - having
209:26 - this uh what we are having the gab
209:28 - profile container so we'll copy
209:32 - this so here we'll do margin zero
209:37 - Auto we'll give a width of
209:40 - 90% we'll give Max width of 1,00 PX
209:45 - we'll give padding of 20 PX and we'll do
209:48 - border radius of
209:50 - 8px that's it next I think we are having
209:53 - this input wrapper so let me just copy
209:58 - this so here we'll give display uh let
210:01 - me just check what we are
210:03 - [Music]
210:04 - having okay so we getting some wrong
210:07 - value here let me see what is
210:09 - happening okay this is fine so this is
210:13 - coming in the middle so now let's go
210:15 - back here so you're having this input
210:17 - rapper so what we can do first uh let me
210:21 - just take this input rapper do
210:25 - input and also we'll do input rapper
210:28 - we'll make display as flex and we'll
210:30 - just do a gap of 20px that will be
210:35 - enough okay and here also do justify
210:39 - content Center
210:43 - all right and let's give a margin bottom
210:46 - of
210:47 - 20px so input what we'll do we'll do a
210:50 - padding of 12 PX we'll do font size of
210:54 - 16
210:56 - PX we do uh border
211:05 - none okay so this is fine next we are
211:09 - having the buttons we do Dot input
211:11 - wrapper of
211:13 - button so what we can do we'll give here
211:16 - padding as 5 PX
211:19 - 12px we'll do border as
211:24 - none uh border radius we'll do 8 PX
211:28 - only we'll give some background color
211:30 - what we can give we can give like let me
211:33 - just give some random color for now and
211:36 - then we'll take it from here let's give
211:39 - something like anything
211:44 - yeah I think this is
211:45 - fine let's give a color
211:48 - of
211:50 - black and also going to give a color of
211:53 - sorry cursor as
211:59 - pointer okay I think this is fine this
212:02 - is more than enough for this now next uh
212:05 - we are having this card so let's go to
212:08 - our card let me just close this so did
212:11 - not cut the user component so you're
212:13 - having the user so copy
212:16 - this so you're having do user will give
212:19 - a padding of 15
212:22 - PX we'll give a border radius of 10 PX
212:26 - and yeah I think this is
212:28 - fine okay now next uh what we can
212:32 - do uh we are having this image so let me
212:36 - just copy
212:39 - this and here what we'll do we'll give a
212:42 - height of 70 PX we'll give aspect ratio
212:46 - of 1 by
212:47 - 1 and we'll do border radius as
212:54 - 50% awesome let's make it 150 let's see
212:58 - how this is
213:00 - looking okay and for this one we give a
213:03 - border actually we'll give one PX
213:08 - solid awesome so now uh next we are
213:12 - having if I now go here we are having
213:14 - this part which is our name container so
213:18 - we'll give a class we'll give name
213:21 - container and here let's copy
213:26 - this so here we'll do name container
213:29 - we'll do display as flex and we'll do
213:32 - gap of
213:37 - 20px all right and here I think we are
213:39 - having something let me just check here
213:41 - what is
213:51 - happening okay so what we can do we can
213:53 - give a flex of one this is also
213:57 - fine and I think this is cheing the
214:00 - margin I think that is the reason
214:02 - because we're having the P right so what
214:03 - we going do we can give it do name
214:05 - container of P we'll make the margin as
214:08 - 0 PX we'll do font size as 20 PX
214:11 - font weight will do
214:14 - bold this is
214:16 - fine and name container will do justify
214:19 - content
214:22 - Center let's see what is
214:26 - happening okay and also we'll give
214:29 - a margin top of
214:34 - 20px okay if I now click here it should
214:37 - go to this page only and see this is
214:40 - working for
214:42 - fine now let's do one thing we'll use
214:44 - the same structure for this one uh so
214:46 - we'll make the uh this two three also
214:49 - make this one as display Flex so what we
214:52 - can do uh we'll give a class name so
214:55 - we'll give this one as uh
214:58 - profile info something like that so here
215:02 - we'll copy
215:04 - this and then here we'll do div and
215:09 - we'll do display as Flex this one also
215:13 - and we'll do justify content as
215:17 - Center okay and also give a gap of
215:22 - 20px and let's use the same style that
215:24 - we are using here so copy all of
215:27 - this paste it let's save it let's see
215:33 - awesome yeah I think that will be more
215:35 - than enough so let me just sear
215:37 - something else we give something value
215:39 - like
215:43 - okay we are getting the name here let's
215:46 - search for something
215:49 - Richard you can see this is working fine
215:51 - right so that's all for another
215:53 - particular project now this is a kind of
215:56 - a general project where uh what they
215:58 - will do like they will give you some
216:00 - kind of uh API URL they'll tell you that
216:03 - simply pH the data create a usable
216:06 - component just like we have created this
216:07 - user component you can also give this on
216:09 - name as a card doesn't matter and also
216:12 - you have to do a little bit of styling
216:14 - so that's all for this particular
216:15 - project let's move on to the next one
216:18 - all right so this is another very very
216:20 - important questions and that this is
216:22 - called search autocomplete now in
216:23 - interview most of the times they will
216:25 - give you some dummy data and from that
216:27 - data only you have to filter and show
216:28 - the auto complete but for now in this
216:30 - project what we're going to do will be
216:32 - fetching the list of users from API and
216:34 - then based on that you can see that
216:35 - you'll be getting the data here so if I
216:38 - update this will be updated
216:42 - all right so if I click here this is
216:45 - selected if I again remove this will be
216:47 - updated so this is another very simple
216:49 - project that we are going to build so
216:50 - let's see how we are going to implement
216:52 - this one all right everyone so let's
216:53 - start working on our search autocomplete
216:56 - component so for this one I'm going to
216:58 - use this dumy Json uh API so the first
217:02 - thing is that what we are going to do
217:03 - now again uh the question will be
217:05 - something like this either uh they will
217:07 - give you some dummy set of array of data
217:10 - and then based on that you have to
217:11 - basically search and show the options or
217:14 - they will say that face the data store
217:15 - the data in a state and then whenever
217:17 - you will type something you have to
217:18 - basically filter from that data so
217:21 - you're going to do the complex part so
217:23 - we'll go to a docs let me close this now
217:26 - let's go to which one we can do we do
217:29 - this get all
217:32 - users anything is fine like this is just
217:35 - for
217:36 - example all right so now uh let me first
217:39 - quickly create another components we'll
217:41 - give this one as search
217:45 - autocomplete we'll give search
217:47 - autocomplete with API all right now
217:50 - inside this we'll do index.
217:53 - jsx and let me close everything else so
217:56 - the first thing we quickly create this
217:57 - component so this will be function and
217:59 - this will be
218:00 - search auto
218:04 - complete all
218:06 - right now inside this we are going to
218:09 - return return so we will return return
218:11 - uh first we'll take a class
218:13 - name so this will be Search autoc
218:16 - complete
218:19 - container and here uh we will take one
218:23 - input simple input then we'll give a
218:25 - name which will be
218:27 - search uh because we are calling the
218:29 - users API will give search
218:31 - users uh then we'll be having a value
218:33 - onchange that we are going to do but for
218:35 - now we give a placeholder uh it will be
218:38 - search
218:39 - users search users
218:42 - here and also give a class name but that
218:45 - is also fine this will work now now
218:48 - first thing there are so many states we
218:51 - need to take so we'll do one by one
218:53 - first we'll need a loading State again I
218:55 - always told you that we should always
218:57 - show the loading uh State while calling
219:00 - any kind of API so this will be US state
219:02 - of false then we are having the users or
219:06 - basically our data so we'll do this on a
219:09 - set users and use state of Mt all right
219:13 - now first time the page load we are
219:15 - going to face the data and then we'll be
219:17 - storing in this users so we take a use
219:19 - effect for now we have done so many
219:21 - times now we'll be like this will be
219:23 - like a piece of cake for you very very
219:26 - easy just take a method so this will be
219:28 - Fage
219:29 - list uh list of
219:33 - users and this will be
219:35 - async function Fage list of of
219:41 - users uh let's take a tri block here if
219:44 - you want you can like it's always better
219:46 - to do these
219:48 - things uh we can simply uh let's do one
219:51 - thing let's take another state here so
219:53 - this will be const error set error which
219:57 - will be used of uh
220:01 - null so here we are going to log this
220:03 - error first and we'll do set eror as
220:07 - this
220:09 - error
220:11 - all right so this is fine now here we
220:13 - are going to call the API so this will
220:15 - be const
220:17 - response uh which will be equal to AIT
220:22 - fet so let me just take
220:29 - this all right and this will be our data
220:32 - which will be AIT response do
220:36 - [Music]
220:37 - Json and let's see what we are getting
220:39 - in this
220:42 - data let's save it uh let's go to our
220:46 - app.js let's let me just comment it out
220:49 - and we'll create another one and this
220:50 - will be our search auto
220:54 - complete so this will be search auto
220:58 - complete let's save it now let's
221:04 - go all right so we are getting object
221:07 - and here we are getting users so we can
221:10 - check if the user length is true so we
221:12 - can go here and we can check that if
221:17 - data and and data.
221:21 - users and and data. users. length if
221:25 - this is true so set users will be data.
221:30 - users we'll do set loading as
221:35 - false and also do set error as uh null
221:40 - and here we are going to make the set
221:42 - loading as
221:44 - two and if there are any error then also
221:46 - you can make the set loading as
221:49 - false that's
221:51 - it all right so this is about the
221:54 - getting the data so now what we need to
221:56 - do whenever we will be typing something
221:58 - we have to fet the data from this list
222:01 - of users correct now we can do another
222:04 - thing and that is if you go here let's
222:06 - say we want to uh filter based on only
222:10 - first name so instead of setting the
222:13 - full object we can make this one much
222:16 - simpler so we'll do data. user. map so
222:19 - this will be user item and we'll just
222:22 - take uh store this user item. first name
222:26 - instead of storing all of this so now
222:29 - let me just log this and let's see what
222:31 - we getting in this
222:35 - users all right so we are getting all of
222:37 - this you can see that we are getting all
222:39 - the first name right right so now we
222:41 - need to basically implement the uh on
222:43 - change so for this one the first thing
222:45 - is that what we are going to do we will
222:48 - take another state and this will be our
222:50 - search
222:51 - param and set search
222:55 - param and this will be used state of
223:00 - empty so
223:02 - here we are going to uh give the value
223:05 - as search
223:06 - Pam and now we need to basically
223:11 - check that when we want to S the uh drop
223:14 - down to the user drop down means
223:15 - whenever we'll be typing something if
223:17 - there are any match so you have to show
223:19 - some kind of drop down here so for this
223:22 - one we will take another state and this
223:25 - will be const so uh drop down set
223:30 - so uh drop
223:33 - down and this will
223:35 - be equal to UST state of
223:38 - false all
223:41 - right so now what we are going to do
223:43 - first we'll be doing the on change so
223:46 - we'll take on change let me format this
223:49 - so we'll take on change and this will be
223:51 - handle uh change something like that and
223:55 - now let's quickly create this method so
223:58 - this will be handle change all
224:02 - right now here first we'll be getting
224:05 - the event so what we can do we can take
224:09 - the query all right so which will be the
224:13 - first thing is that query will be our
224:15 - this search Pam that we are having here
224:18 - that is fine but we can do something
224:21 - like this so we'll take a query first
224:23 - let's make this event sorry we'll do
224:26 - event.
224:28 - Target do value that we'll be receiving
224:31 - and we'll make this on to two lower
224:34 - case all right and then we'll do set
224:38 - search Pam which will be this this query
224:41 - that we are setting now here what we are
224:43 - going to do we'll check if user is
224:46 - typing at least two characters at least
224:49 - two they need to type so we do if the
224:52 - quiry sorry if the quiry is greater than
224:56 - one so then we want to do something so
224:59 - what we are going to
225:01 - do again we will set take another state
225:04 - which will be our
225:07 - filtered users and say
225:11 - filtered users should be US state of
225:16 - empty obviously you can directly also uh
225:20 - like manipulate this uh method here but
225:24 - I think it is always better to take
225:25 - another separate State here now here
225:28 - we'll do const filtered data now this
225:32 - will be this users that we are having so
225:35 - this will be
225:37 - users and then if this users. length if
225:41 - this is true then only we want to do
225:43 - this will be empty now here what we
225:45 - going to do we do users do filter so it
225:49 - will filter will take
225:52 - item now here it will do this item dot
225:58 - to
225:59 - lowercase then we are going to check the
226:02 - index
226:03 - of this quy that we are typing that
226:06 - means in this item whether this quy is
226:09 - present or not as simple as that index
226:11 - of this query that we are typing here if
226:14 - this is greater than minus1 that means
226:17 - that is basically present so this is
226:20 - this will basically give us our filtered
226:21 - data now we'll do set filtered user will
226:24 - be our filtered data and we'll do so
226:28 - drop down as true correct else the so
226:32 - dropdown will be
226:35 - false and I think that is fine now
226:38 - you'll see what will happen happen uh
226:40 - let me just do one
226:43 - thing I think we are logging here let me
226:45 - just log users and then we'll uh do
226:48 - filtered
226:49 - users and now let me just go there so
226:52 - you're getting ter you can see that we
226:53 - are getting two data now I'll search for
226:56 - T okay I think we are getting some ER so
226:58 - drop down is not a function I think we
227:00 - have done wrong so this will be set so
227:02 - drop
227:08 - down okay so you can see now you type
227:10 - here
227:11 - e
227:13 - r okay so you're not getting
227:22 - anything okay let's see what exactly we
227:25 - are doing here in the
227:28 - code so getting the query you're setting
227:31 - this part is
227:36 - fine oh sorry we need to do query.
227:39 - length
227:40 - now this would work and now let me
227:42 - refres this so do t e we got two result
227:48 - you can see here if I give like let's
227:51 - give R still two R now I'll give
227:55 - y so we are getting only one if I remove
227:58 - we are getting two so this is working
228:00 - fine so now what we can do
228:03 - simply if this is true that means so
228:06 - drop down is true so we want to S
228:08 - another component so I'll create another
228:10 - component here I'll give this name as
228:13 - suggests.
228:14 - jsx and here I'll look export default
228:18 - function and this will be
228:25 - suggestions now here what we are going
228:28 - to do will be receiving the data from
228:30 - the parent
228:31 - component and then we are going to
228:33 - return simple
228:35 - ul and here we'll do this data Dot
228:40 - length sorry first we'll check if the
228:42 - data and and data do length if this is
228:45 - true or else this will be
228:48 - null and here we are going to do data do
228:51 - map so this will be our item and we are
228:54 - going to Simply return
228:56 - Ai and in the key we'll render this
229:01 - we'll take the index
229:03 - here so we take the index and we're
229:07 - going to render the item here
229:10 - that's
229:12 - it all right now let's save it now let's
229:15 - go back and here we're going to do if
229:17 - this s drop down is true and then I want
229:20 - to render the
229:21 - suggestions and here you have to pass
229:23 - the data which will be our filtered
229:26 - users I hope you're getting now this is
229:28 - a reusable component now you will be
229:31 - obviously will be able to pass all of
229:32 - this as a prop also from another parent
229:34 - component and you'll be able to easily
229:36 - manage that now another thing we can do
229:39 - and and that is here we can show
229:41 - something like if loading is true so uh
229:45 - we'll do another thing here instead of
229:48 - here because we're calling the API so we
229:51 - need to manage this
229:53 - loading so we'll do loading
229:57 - data
229:59 - please
230:02 - wait or else we want to render this
230:06 - item so let's format this now let's see
230:09 - what is happening so we go here see we
230:11 - are already getting the result here so
230:13 - I'll type something te we are getting r
230:17 - r y we are getting only one now let me
230:21 - give something else we'll give M sorry m
230:23 - i we getting one what else we are having
230:26 - to let's see M A we are having so we'll
230:29 - give M A we getting four I'll give C we
230:33 - getting only one remove R and you can
230:36 - see that this is working fine all right
230:39 - I I think till this part this is fine so
230:41 - now what exactly we want to do so
230:42 - whenever we are typing something here
230:45 - let's say if I click something so I want
230:46 - to set that value here let's see how we
230:49 - are going to do that so to do this one
230:51 - we'll take another handle click method
230:54 - so that I'm going to create this will be
230:56 - handle
230:57 - click so this method I'm going to
231:00 - receive in this
231:01 - component all right and here what we can
231:05 - do
231:07 - simply uh we will basically take a on
231:10 - click
231:11 - here and you'll pass this handle click
231:14 - here all right so this is what we can do
231:18 - now here if I now format this let's save
231:21 - it let's go here let's quickly create
231:24 - this method so we'll do function handle
231:28 - click we get
231:30 - event all right and now what we can do
231:33 - let me just log this e do Target do
231:39 - inner
231:40 - text uh sorry let's make this an event
231:43 - okay so now let's see what is happening
231:45 - now if I now go back and let me first
231:48 - refresh
231:49 - this so I'll type something let's click
231:53 - here okay I think we are getting error
231:56 - in a text of
231:58 - undefined sorry this will be
232:02 - Target so now let's click here so you're
232:04 - getting this St and you can see that we
232:07 - are getting the value here now this is
232:08 - pretty simp simple what we can do you
232:10 - can make this Set uh set so drop down
232:15 - this will be false we don't want to so
232:18 - and then we want to set the search param
232:20 - which will be this event. target. inner
232:23 - text so copy this and also we'll make
232:27 - the set filtered users as empty that's
232:30 - it now let's save it now let's
232:33 - see Let me refresh this so do te now
232:38 - click here we getting the value all
232:40 - right I now see this is working fine if
232:43 - I click here you're getting this one if
232:45 - I remove one again remove remove we are
232:49 - getting two remove all of this we'll do
232:52 - m a click marel and this is coming
232:56 - fine and you can see that the
232:58 - functionality is working fine I'll see
232:59 - one thing that I haven't done any CSS in
233:02 - this particular project because I think
233:04 - there is no point because here for this
233:07 - particular project from this point of
233:09 - view they will not ask you to do much
233:11 - CSS like this is kind of a functionality
233:14 - wise project so even if you done till
233:15 - this part that will be more than enough
233:18 - so what we have done we have basically
233:19 - called the API and based on that we
233:20 - stored the data in somewhere and then
233:23 - from that data we are filtering and we
233:25 - are s now if they told you to do CSS I
233:28 - think for now till these many project
233:30 - that you have done I think you do have
233:32 - much idea you'll be able to do it by
233:34 - yourself so I think for now for this
233:36 - particular project this is fine let's
233:38 - move on to the next one all right so I
233:40 - think I don't have to explain this one
233:42 - that why we are doing this I know that
233:45 - you all know that Tik Tac to is one of
233:48 - the most asked interview questions in
233:49 - product based companies and most of the
233:52 - times they will say that you can't use
233:53 - any framework but that also we going to
233:56 - do in next videos when we will be
233:57 - implementing all of this in simple vanes
234:00 - but sometime companies like Amazon or
234:03 - atasan they will tell you that okay you
234:04 - can use any framework that you like so
234:06 - obviously we will be able to implement
234:08 - this this one so here we'll show that
234:11 - the user that will be winning and if no
234:13 - one is winning this is a draw we'll be
234:15 - able to restart and let's say how it
234:18 - will work so let's say if I do here you
234:20 - can see winner is O and if I let's say
234:23 - if I do here for
234:26 - X so you can see that winner is X please
234:29 - restart the game and this also will be
234:31 - implementing each and everything from
234:33 - scratch so let's see how we are going to
234:34 - do this one all right everyone so let's
234:36 - get start working on this uh tic TCT to
234:39 - uh so what we'll do let's create a
234:41 - component first sorry the folder first
234:43 - so TI Tac to so inside this we'll create
234:47 - our index.
234:49 - jsx and we'll do styles.
234:53 - CSS all right so here we'll do export
234:56 - default
234:58 - function ttac
235:01 - to so the first thing is that what we
235:03 - are going to do we need to basically
235:04 - create the board now as I already
235:06 - mentioned in the introductory video of
235:08 - this particular like this is a very very
235:10 - important questions that you actually
235:12 - will get in your interview most of the
235:13 - times like companies like Amazon Adobe
235:16 - Microsoft even Atlas and also ask uh
235:18 - this question so you should prepare it
235:20 - very carefully and here actually you
235:22 - have to explain each and everything what
235:24 - you are
235:24 - doing now here the first thing is let's
235:27 - return our div so here I'll give a class
235:30 - name of uh TI
235:33 - tcto
235:35 - container all right and here we need to
235:38 - C create our rows so because we are
235:41 - having three rows so if you see here how
235:43 - this logic will works we're having 0 1 2
235:46 - right let's say 3 4 uh 3 4 5 and then
235:51 - let's say 6 7 and 8 So based on that you
235:54 - have to create these three rows so we
235:55 - having one row then we'll create two and
235:59 - three and I'll give this one as name as
236:02 - row let's copy this and we'll paste it
236:05 - here same here let's format this
236:10 - let me just comment it
236:12 - out all right so you're having three
236:14 - rows now for each and every row will be
236:16 - having three squares so one will be for
236:18 - this one this one this one same for row
236:21 - second three and then last row three so
236:25 - here uh what we can do we can simply
236:27 - create another component we can create
236:29 - in this file only and we'll give this
236:31 - one name as
236:33 - Square all right and for now uh we'll
236:37 - simply return a button Buton here and we
236:40 - are going to render some value all right
236:43 - so this value it will basically receive
236:44 - from this parent component which is this
236:46 - component so it will receive a value for
236:48 - now we'll just we don't have any value
236:50 - but we are uh going to implement that so
236:54 - here inside of this uh we will be
236:56 - basically creating our each and every
236:58 - Square so what we can do simply we can
237:01 - call this
237:02 - Square this component here so this
237:05 - component that we are having and then we
237:07 - can paste it three times same we can do
237:10 - it for
237:12 - here and then we can do it for here so
237:15 - total we are having total 9
237:18 - squares all right now first let's uh
237:21 - create the CSS first so first what we
237:25 - are going to do uh first we'll take our
237:28 - uh let me just copy the class name so we
237:31 - are having this
237:32 - one so we'll do tick TCT to container
237:35 - and then we'll do after so we'll do
237:38 - clear both
237:40 - uh we'll do content as
237:43 - empty and we'll do a display of
237:46 - table all right then inside this we are
237:50 - having each and every squats so let me
237:53 - just go here let's give a class name
237:55 - here so we give a class name of square
237:58 - uh sorry this will be U so this is our
238:01 - each and every individual
238:03 - squares so let's go here and then we'll
238:06 - do dot Square so here for we'll do a
238:09 - border of 1 PX solid
238:12 - red then we'll do a float of
238:15 - left we'll do a font size of 40 PX we'll
238:20 - do a height of 100
238:22 - PX uh what else we'll do padding of 0
238:26 - PX we'll do text align as Center and
238:30 - we'll do width as 100
238:32 - PX that's
238:34 - it also Let's uh use some margins we'll
238:37 - do a margin in left sorry margin right
238:40 - of Min -1 PX and we'll do a margin top
238:44 - of Min -1
238:48 - PX all right that's it and also let's
238:52 - use a cursor
238:53 - pointer so now let me just import it so
238:56 - we do import styles.
239:00 - CSS and then we are going to use this
239:03 - one here so let me just comment it out
239:05 - so we'll use another component so this
239:07 - will be our Tic Tac tool
239:09 - and here I'll import Tic Tac to let's
239:12 - save it and let's see what is happening
239:14 - here so if I now go back all right so
239:17 - you can see that it's breaking that is
239:19 - fine we have to give some styling here
239:22 - so what we can do if I go here so you're
239:25 - having this one each and every door so
239:28 - here we can give a display of flex and
239:31 - we'll do Flex direction as column and
239:34 - that's it this will work all right so
239:36 - you can see the each and every row you
239:38 - are having
239:40 - and let's give a justify content Cent
239:42 - sorry not justify content we have to
239:44 - give the Align item as Center and we can
239:47 - give a margin top of for example 100
239:51 - PX so let me copy this so this is our
239:55 - container so we'll go to our
239:57 - container and we'll just paste it
240:01 - here let's see awesome so we having here
240:05 - so I think for now this will be more
240:06 - than enough for the styling part but now
240:09 - here the main thing is that you have to
240:11 - basically uh explain the functionality
240:14 - in the interview that what you are doing
240:15 - and how why you are doing that so let's
240:18 - start uh one by one so the first thing
240:20 - is that you can see how it will work so
240:22 - this game is basically whenever you'll
240:24 - click on any of the squares so first if
240:27 - I am uh giving the cross first so next
240:30 - time you have to give a zero so this is
240:31 - how it will work zero or O whatever you
240:33 - work you can say so it will be like
240:35 - toggling again if I click it will be
240:37 - cross again it will be zero
240:39 - so that means we have to first decide
240:41 - that uh from which we want to start
240:44 - either we can start with a cross or we
240:46 - can start with a zero and also for each
240:48 - and every squares there will be some
240:51 - space or some State we need to take so
240:53 - that we can fill that letter whenever
240:55 - we'll be clicking we have to let's say
240:57 - if I click here the first one with cross
240:59 - so I have to set a square value for this
241:02 - particular Square uh for this particular
241:04 - element in the state so that means we
241:07 - for now we need two state so one will be
241:11 - our
241:12 - squares and this will be set
241:17 - squares I think I'm doing some spelling
241:20 - wrong q a r s so this will be UA and
241:25 - here what we can do we can do a u state
241:28 - of so we'll take array of nine because
241:31 - we are having nine uh uh Square
241:34 - basically and we are going to fill this
241:36 - one with empty string that means
241:38 - currently we have empty so if I now show
241:40 - you what is happening in this so it show
241:42 - you square so you'll understand I think
241:45 - something is wrong here let me just
241:46 - check what is
241:48 - happening I think we can remove this one
241:51 - let me just
241:58 - check sorry it is not taking what is
242:01 - happening oh see this is the reason so I
242:04 - think we don't need to give this one we
242:06 - can remove this part from here now let's
242:07 - see
242:09 - yes so this is fine that is the reason
242:12 - okay so now you see if I go to console
242:14 - we are having 1 2 3 4 5 6 7 89 9 with
242:17 - empty now let's say if I click here that
242:19 - means I clicked on the Zero index for
242:21 - example so I have to fill this one with
242:23 - that if I click cross it will be cross
242:25 - here and then next let's say I clicked
242:27 - on this one so this is 0 1 2 3 4 with
242:30 - zero so four element will be uh a zero
242:34 - like that so like that you have to fill
242:36 - all the nine elements if there is is a
242:38 - winner so simply return the winner and
242:41 - there will be a restart button if all
242:43 - the elements are filled and no one wins
242:46 - that means it's a draw so for this one
242:49 - what we can do we can take another state
242:52 - and this will be const we do is X turn
242:56 - that means if it is X turn or it's a o
242:59 - turn Set uh do set is X turn and this
243:06 - will be used state of true so that means
243:08 - first time we'll do start with
243:10 - X all right now next what we are going
243:14 - to do uh here you can see that we have
243:17 - to
243:18 - basically take a on click each and every
243:21 - time we'll be clicking so here first
243:23 - I'll receive a on click so it will
243:26 - receive on click which will be here on
243:30 - click so this will be on click which
243:32 - will be this on click that will be
243:34 - receiving and then you have to pass the
243:35 - on click
243:37 - everywhere
243:38 - and here I'll take a handle click method
243:41 - and for first one I have to pass
243:43 - zero so this will be zero second one I
243:46 - have to pass one so this will be one
243:49 - sorry this will be one this will be
243:52 - two then we are having these
243:55 - three and at the end we having this
243:59 - three so this will be three this will be
244:03 - four this will be
244:05 - five this will be six 7
244:09 - and this will be eight so for each and
244:11 - every Square we are having kind of
244:13 - identifier or basically the index so now
244:16 - we going to create our function handle
244:18 - click all right so here it will receive
244:21 - the gate current
244:24 - Square so here what we will simply do
244:27 - we'll take this square that we are
244:29 - having or let's do one thing let's copy
244:31 - this copy squares so that will not
244:33 - directly mutate the uh
244:36 - state which will be uh these
244:42 - squares and here we'll do simply copy
244:45 - squares of this gate current Square so
244:47 - we'll check that if it is X turn so
244:50 - we'll render X or else it will be o I
244:53 - hope you're getting so we check if it is
244:55 - X turn so we cross a X or else this will
244:58 - be a o and then what you need to do
245:00 - first you have to basically uh reverse
245:02 - this so if it is X means now it is false
245:04 - because this will be not o turn if it is
245:07 - O turn then again it will be true so do
245:09 - set is xter will be not equal to is ex
245:12 - turn I hope you're getting this and then
245:14 - you have to set the squares which will
245:16 - be this copy squares that's it now what
245:19 - you need to do you have to pass the
245:21 - value here you can see we are getting
245:22 - this
245:23 - value so this we can simply pass so here
245:26 - we'll take a value and this value will
245:29 - be what we can do we can simply pass so
245:32 - it will be squares of
245:35 - zero so copy this
245:38 - paste it
245:42 - here if you want you can also make this
245:45 - on Dynamic you can create a simple
245:46 - function and then you can pass these
245:48 - values dynamically so this is 0 1 2 then
245:52 - it will be three
245:54 - 4
245:56 - 5 6 7 and 8 now let's save it and let's
246:02 - see what is happening so see if I click
246:04 - here coming X again if I click here now
246:07 - this is o x o x o now you see one thing
246:11 - will happen see I clicked all of this
246:13 - now let's see if I click here again see
246:15 - it is getting changed to O So that means
246:18 - we need to check if this square is
246:20 - already full or means already there is a
246:22 - value so we no need to change the value
246:23 - we have to return and also another thing
246:25 - we need to check and that
246:28 - is uh that we are going to do that if
246:30 - there is a winner or basically if there
246:32 - is a draw then also we don't want to
246:34 - render anything so first we'll simply
246:36 - check here that that if this copy
246:40 - squares of this gate current index uh
246:43 - sorry G current square if there is a
246:45 - value so we'll simply return from
246:48 - here all right so now let's see what is
246:51 - happening let's save it so now I refresh
246:54 - this so we render some value zero and
246:58 - now see if I click here again nothing is
247:00 - happening because we don't want to
247:02 - change the value here and this is as
247:04 - expected correct so this is working fine
247:07 - now now what we need to do so this
247:08 - handle click part we actually got now we
247:11 - have to calculate the winner that how we
247:13 - are going to calculate so now you see
247:15 - one thing that how winner is calculated
247:17 - so if all of this actually pattern is
247:20 - true so I'll show you so first I'll
247:22 - create another function so this will be
247:23 - function get winner something like that
247:27 - and here I'll pass this squares uh it
247:31 - will get the
247:33 - squares as argument so how we have to do
247:37 - we have to basically first take the
247:38 - winning
247:40 - patterns so winning patterns will be
247:42 - this 012 I'll show you
247:45 - why if all three are X or O So this this
247:49 - and this one so this is one pattern then
247:52 - we are having 3 4 5 6 7 8 then we having
247:57 - 03 6 means this one horizontally 147 258
248:02 - then we are also having this one
248:04 - diagonally 048 and 642 so these all will
248:08 - be winning patternss and these also you
248:10 - have to explain in your interview or
248:11 - whatever you are doing 3 4 5 then we are
248:14 - having 6 7
248:16 - 8 uh then we are having
248:19 - 25 uh 8 I think 258
248:23 - 258 then we are having
248:28 - 048 then we are having two sorry 2 4 6
248:34 - and also we are having 03 6 and we are
248:38 - having 1 4 7 so we having Total 1 2 3 4
248:41 - 5 6 7
248:44 - 8 that's it so these all will be your
248:47 - winning patterns so now what we'll do
248:49 - we'll simply take a fall Loop let I = to
248:53 - 0 I less than winning patterns. length
248:57 - and
248:58 - i++ so now we can simply check first
249:01 - we'll dist structure this three values
249:03 - so for each and every one will be a
249:04 - value so this is let's say a value B
249:07 - value and C value or let's take this one
249:09 - as like X Y and Z so this will be
249:15 - winning patterns of I now we'll simply
249:18 - check if the squares of
249:21 - X and and squares of X is equal to equal
249:26 - to squares of Y and then
249:31 - squares of X is equal to equal to
249:34 - squares of Zed
249:38 - so what we are doing here so that means
249:40 - we are checking if this the value that
249:42 - we are having here let's say we are
249:43 - having X here so this is x value and
249:46 - here also we are having X so that mean
249:48 - this is equal to this and also here also
249:50 - we having X that mean this also equal to
249:52 - this so all three are of either X or
249:54 - either y sorry either o or either X so
249:57 - that means this is a winning pattern so
249:59 - this is exactly what we are doing here
250:01 - if x is equal y or xal to Z so that
250:04 - means we are having a winner so we going
250:06 - to return this squares of X that's it
250:11 - else we we will simply return here uh
250:14 - let's do something like
250:16 - this after this we are going to return
250:19 - return null sorry what I'm doing so this
250:21 - will be return return
250:25 - null so this will basically calculate uh
250:28 - the winner that's it so now what we
250:31 - going to do we'll simply take a use
250:36 - effect okay
250:39 - and here I'll keep this squares and the
250:42 - e extern as a dependency now another
250:45 - thing we need to check here if there is
250:47 - a winner that means if this is true so
250:50 - we don't want to change anything so that
250:52 - means we don't want to change any value
250:54 - if there is a winner so here also we
250:56 - need to give this condition that if
250:58 - there is a winner so what we can do
251:00 - simply you can pass this uh gate winner
251:04 - of this copy squares if this is is true
251:07 - orse or else if there is a value that
251:09 - means we want to return return all right
251:12 - now we have taken the use effect so here
251:14 - what we are going to do I'll take
251:16 - another state here to maintain the state
251:18 - uh status so we'll take a
251:20 - status and this will be set status and
251:24 - this will be US state of we'll keep this
251:26 - one as
251:27 - empty so here uh we'll check that
251:32 - if there is a winner or that means first
251:35 - we'll do the not one so if there is not
251:37 - a winner so look get
251:39 - winner of these
251:42 - squares that means if there is a no
251:45 - winner and and if squares do every sorry
251:49 - squares. every if every square is full
251:52 - that means it's a draw because see in
251:54 - this position you can see X is a winner
251:56 - or this part because these three are
251:58 - same these three are same but let's say
252:00 - there is a different scenario for
252:02 - example we give x 0 x we're having zero
252:07 - then x 0
252:10 - x 0 and x so you can see here we don't
252:14 - have any winner correct and but all the
252:16 - squares are full so that means this is a
252:19 - draw in this scenario so this is what we
252:21 - are doing that if every item is not
252:24 - empty if item is not equal toal to empty
252:26 - so we'll do something like set status
252:29 - and we'll render here this is a
252:32 - draw this is a draw please uh please
252:38 - restart so do please restart the
252:42 - game all right else if there is a winner
252:46 - so if this get winner of this square if
252:49 - this is true so we'll do set
252:52 - status sorry we'll do set
252:56 - status so set status will
252:59 - be so here we'll do
253:02 - winner is sorry this will be winner is
253:06 - so we'll just render this gate
253:09 - winner of
253:12 - squares because here we are returning
253:14 - that value all right else if there is no
253:18 - winner that means the game is not a draw
253:21 - and also there is a no winner so either
253:23 - it will be a x turn or Y turn so here
253:25 - we'll do set
253:27 - status so this will be so we'll show
253:31 - like next player uh next
253:33 - player is uh so here we'll render if it
253:37 - is X turn so it will be X or it will be
253:44 - o and I think we are done so now let's
253:47 - see if I want to render here we'll take
253:50 - H1 and we'll render the
253:53 - status let's see what is happening now
253:56 - so you can see next PL is X click here o
254:00 - click here
254:03 - o x o now notice what will happen if I
254:07 - click here winner is X you're not able
254:10 - to click or do anything here
254:13 - correct so it's that means that if there
254:15 - is a winner you don't want to do so we
254:17 - can restart the game so here also you
254:20 - can do something like winner is this
254:22 - please uh
254:25 - restart the
254:29 - game all right now we will have a button
254:33 - simple and we'll keep this one as
254:36 - restart so we'll do on click we'll do
254:39 - handle
254:41 - restart so here we'll create method this
254:44 - will be handle restart so what we need
254:49 - to do on the restart first we have to
254:50 - make this set is xter is true and then
254:53 - we'll do set squares so again we'll uh
254:56 - make this array dot array of nine do
254:59 - fill with empty that's it now let's save
255:04 - it let's click on next player is X click
255:09 - here click
255:11 - here winner is O please restart the game
255:15 - not be able to restart now I'll do
255:18 - x o x x sorry I'm doing let me restart
255:24 - again 0 x 0 x
255:28 - 0
255:31 - x zero now if I click here let's see
255:35 - what is the issue here
255:40 - so you're doing Square dot not equal mty
255:43 - see we are doing set Square this will be
255:45 - set status now let's
255:48 - see okay so we'll do x o x o
255:53 - x
255:55 - o
255:57 - x o and now if I click again so this is
256:01 - a draw please restart the game I'll not
256:03 - be able to click anything restart if I
256:06 - do X
256:11 - x o y winner ISO if I do for X let's
256:18 - see winner is X let me check another
256:21 - time if it's a
256:26 - draw so this is a draw yeah I think
256:29 - that's all for this particular project I
256:31 - hope that this will definitely help you
256:32 - and also I break down each and every
256:34 - step why I'm doing that so this is the
256:35 - same that you can implement in your
256:37 - project or wherever you want to
256:38 - implement the same so that's all for
256:41 - this particular project let's move on to
256:42 - the next one all right now this is a
256:44 - another new uh like I'm not sure whether
256:48 - you know this particular uh project and
256:50 - that is called the feature flag so how
256:52 - this basically works so let's say you
256:55 - are creating a production level
256:56 - application where you're having so many
256:58 - application and for a particular year of
257:00 - time let's say in Christmas you will
257:02 - show some special component in your
257:04 - website so instead of changing the code
257:08 - directly how it will work so you will be
257:11 - basically calling a API from from a real
257:14 - AP obviously and then you'll be
257:16 - basically getting the list of key value
257:18 - pairs that which features you want to
257:21 - enable and which features you want to
257:22 - disable for that particular time and
257:25 - whatever Flags you are getting as enable
257:27 - from the API those only you want to
257:29 - render so you see that obviously we
257:31 - don't have any real API but the
257:33 - implementation will be exactly same so
257:35 - for this one we are going to use text so
257:37 - here you can see that we'll be having
257:38 - some features let's say I want to enable
257:40 - the light and dark theme I want to
257:42 - enable the Tic Tac tool I want to enable
257:44 - the random color generator accordion and
257:47 - Tree View and the tabs So based on that
257:49 - it will automatically render all of
257:51 - these and the functionality will
257:52 - definitely work for each and every
257:54 - separate component so you can see that
257:55 - all right so this is exactly what we are
257:58 - going to build now most of the times
258:00 - like this is obviously not a very simple
258:02 - one uh like if you're giving an
258:04 - interview and they will give you like 30
258:06 - minutes of time you'll not be able to
258:08 - implement that F but let's say there are
258:11 - more than 1 hour or two hours of time so
258:14 - they might ask you these particular
258:15 - questions and most of the times they
258:18 - will again ask you this one to implement
258:19 - in vanilla JS simply but you will be
258:22 - able to sometimes they will allow you to
258:24 - implement in reactjs also so let's see
258:26 - how we are going to implement this uh so
258:28 - this is not a simple one this is kind
258:30 - you can say like this is a middle level
258:32 - uh project that we'll be implementing
258:34 - all right everyone so let's start
258:35 - working on the feature flag
258:37 - implementation now this is a very very
258:38 - important questions that you might get
258:40 - faced in your interview so as I already
258:42 - discussed that what exactly we are going
258:44 - to do so let's quickly start
258:46 - implementing so what I'm going to do uh
258:49 - inside this uh components folder let's
258:51 - create another folder and sorry I think
258:55 - we have to give here so inside
258:57 - components we'll give this one name as
258:59 - feature
259:01 - flag now for this one what we are going
259:04 - to do we will be basically using a
259:06 - context now in a real life project when
259:08 - you will be basically creating this
259:09 - feature most of the times you need some
259:11 - kind of Global Management something like
259:14 - Redux or context whatever you are using
259:16 - like just and some other uh State
259:18 - Management library that doesn't matter
259:20 - but at the end the concept will be
259:21 - exactly same so inside this what I'm
259:24 - going to do I'll create a folder and
259:25 - I'll give this on name as context sorry
259:27 - this will be a folder and this will be
259:30 - context and inside this I'm create
259:32 - index.
259:34 - jsx all right now this is inside our
259:37 - context now for this particular feature
259:39 - flag we need also our index.
259:42 - jsx and also we need a data because for
259:45 - this one we will be using a dummy data
259:48 - for now because most of the times in
259:49 - interview also you will get this dummy
259:51 - data and I'll discuss why so now the
259:54 - first thing is that we'll start with
259:55 - this data now how it will work let's say
259:58 - you are having some feature in your
259:59 - application for example if I give some
260:02 - very common example like let's say dark
260:04 - and uh light and dark toggle
260:06 - functionality in your uh application you
260:08 - are having various kind of charts or
260:10 - some kind of like let's say you are
260:12 - having a banner and that Banner you want
260:14 - to display in some particular time of
260:17 - your year let's say Christmas uh
260:19 - Christmas Banner so what will happen we
260:22 - using this feature flag you will be
260:25 - basically calling a feature flag API and
260:27 - then that API will give you the response
260:30 - and in that response you will be having
260:32 - that what are the features that you want
260:34 - to enable and what are the features that
260:36 - you want want to disable so if you do
260:38 - this kind of thing what will happen you
260:40 - don't have to manually change anything
260:42 - in the code based on your API response
260:44 - you will be able to understand that okay
260:46 - I need to enable the Christmas Banner so
260:48 - we'll be basically getting the data from
260:50 - the API all right so let's see how we
260:52 - are going to implement
260:54 - this all right so for now you can see
260:56 - that we are already having so many
260:57 - components let's say we want to enable
261:00 - our light and dark mode and also we want
261:02 - to enable this QR code whatever we want
261:05 - to enable so for this let's see we're
261:07 - getting a dummy response so this will be
261:09 - our dummy API response now obviously
261:13 - this response you'll be getting from
261:14 - your API for now we'll be using a dummy
261:17 - API response doesn't matter you just
261:18 - have to call the API and you have to
261:19 - save the data now here what I'm going to
261:22 - do I'll show something like so light and
261:25 - dark mode so this is each and every
261:28 - actually is the key and this is the
261:31 - value that you want to show this feature
261:33 - in your website or not let's we having
261:35 - dark and light and dark mode then we are
261:37 - having so Tick Tac to
261:42 - board this is also true we'll take five
261:45 - uh what else we can take we'll take this
261:48 - uh random color
261:52 - so random
261:56 - color
262:00 - generator this will be true and let's
262:03 - take another two we'll take so as
262:08 - accordian we'll make this one as let's
262:10 - say false and also let's make this one
262:13 - also
262:14 - false and let's take another last one
262:17 - which one we can take we'll take this
262:19 - tree view so Tre View and this will be
262:23 - let's say true so this is the key value
262:25 - pairs that you will be receiving from
262:27 - your API now I will be basically
262:29 - creating a function so let's make this
262:32 - on a function fetch uh or let's do
262:36 - feature
262:38 - Flags data service
262:45 - call so this will return return up new
262:50 - promise sorry this will be a promise so
262:53 - we'll take
262:55 - resolve
262:57 - reject and what I'm going to do for now
262:59 - because we are already having a dumy AP
263:01 - response I'll check if the dumy AP
263:02 - response is present so I'll just do a
263:05 - set timeout sorry we'll do set
263:08 - timeout and we'll resolve this dummy API
263:11 - response that we are having will give a
263:13 - time of
263:14 - 500 milliseconds else we'll just uh
263:20 - reject and we'll show something like
263:23 - some error
263:27 - occurred
263:28 - please try
263:31 - again that's
263:33 - it and let's do export default of this
263:37 - feature flag data service
263:40 - called all right so this is the let's
263:43 - say AP response you are having now we
263:45 - will go to our context and let's create
263:47 - our context so here I'm going to first
263:50 - we have to create the context so here
263:52 - I'll create a context so this will be
263:53 - export const and I'll give this one as
263:55 - feature Flags context which will be
263:59 - create context of
264:02 - null now let's create our state so we'll
264:05 - do export default function this will be
264:07 - feature flag
264:10 - Global
264:12 - state so this will receive the children
264:15 - of
264:17 - components and here you are going to
264:19 - return this feature flag context do
264:23 - provider and we're going to get the
264:26 - children here for now we also have to
264:28 - pass a value so we'll pass a empty
264:31 - object all right so this is all about
264:33 - the context that we need
264:36 - so now what we basically need to do so
264:39 - in this context we will be calling the
264:42 - API and then we will be passing that uh
264:45 - how many flags that are enabled so let's
264:47 - say this true all all the trues are
264:50 - enabled and all the false are disabled
264:52 - so if this is enabled so I I want to
264:54 - show this one in my UI all right so
264:57 - let's quickly do one thing let's quickly
264:59 - create our component so this is our main
265:02 - component which will be export default
265:04 - function this is our
265:07 - feature Flags something like
265:11 - that and here I want to just return
265:14 - div and let's return return H1 and this
265:17 - will be your feature
265:20 - flags all
265:22 - right now generally whenever we will use
265:25 - any kind of context we should always use
265:26 - this one in our index but for now this
265:28 - is fine because we want to individually
265:30 - use this one in this particular
265:31 - component only but later if you're doing
265:33 - in the global level always wrap this
265:35 - index .js or basically this app inside
265:38 - your uh this uh this app you have to
265:41 - wrap inside this feature
265:43 - flag all right so now let's go to app.js
265:47 - and I'm going to comment out this part
265:50 - let's take another comment and this will
265:52 - be our feature
265:53 - flag
265:56 - implementation so here I'm going to
265:58 - import our first thing what we need to
266:00 - do we have to import our feature flag
266:02 - Global State because we have to wrap
266:05 - this component in inside our uh context
266:08 - so this will be our main uh context
266:10 - wrapper and this feature flag will be
266:13 - our component I hope you're
266:15 - getting so now let's format and save
266:23 - this all right so we are getting feature
266:25 - Flags so now what we need to do first we
266:28 - will call the API so we'll go to our
266:31 - context we'll take two state so one will
266:34 - uh one will be
266:36 - loading and set
266:38 - loading which will be US state of false
266:42 - and if you see for each and every
266:44 - project I'm always taking this loading
266:45 - State and it is always a good practice
266:48 - to Showcase your user that whenever you
266:50 - doing some asynchronous activity you
266:53 - should always show some kind of loading
266:54 - St so that it will be very very easy to
266:56 - understand for them and also I'm going
266:58 - to take the enabled flags that will be
267:02 - received from the API and this will be
267:03 - set enabled flag
267:07 - TS and we'll give this one as use state
267:10 - of
267:14 - null now let's take a empty object all
267:17 - right now what we'll do we'll simply
267:20 - take a use
267:21 - effect and here on page load we're going
267:27 - to do here
267:29 - Fage uh
267:31 - feature
267:34 - Flags so this this will be as sync
267:36 - method so here I'm going to do async
267:39 - function
267:42 - fet feature
267:46 - Flags so here I'm going to do a try
267:49 - catch
267:51 - block so here I'm just uh do a log for
267:54 - now and also let's throw some
268:00 - error all this error sorry so here what
268:05 - do we'll do const
268:08 - response which will be AIT this will be
268:12 - feature flag data service call now here
268:14 - you need to do the main
268:17 - your
268:18 - original service
268:23 - call all right now here you will be
268:27 - getting the response so if I know log
268:30 - this response let's see what we are
268:32 - getting let's format this let's save it
268:41 - so we getting object and inside this we
268:43 - getting all the keys now based on these
268:45 - Keys you have to basically render the
268:47 - components here so now what you can do
268:50 - you can do here set enabled Flags this
268:52 - will be equal to
268:54 - response and here we are going to pass
268:57 - this enabled Flags so this will be our
269:02 - value that's it now this is a very very
269:04 - simple so so if I now go here so we'll
269:08 - basically render a components so we'll
269:10 - take const
269:13 - components to
269:18 - render which will be array and inside
269:21 - this we'll take our key now you'll see
269:23 - this key is basically this key that we
269:25 - are having so having five
269:28 - keys so I'll paste it here so this will
269:31 - be our first one now for this one I have
269:34 - to use the component so this this will
269:35 - be our light and dark mode I hope you're
269:38 - getting then you'll copy this and paste
269:41 - it five
269:45 - times we'll do so Tic Tac board so this
269:50 - will be our Tic Tac to then we are
269:52 - having so random
269:54 - color this will be our random color then
269:58 - we are having so
270:01 - accordion this will be our accordion and
270:04 - at then we are having the tree View
270:07 - so this will be our uh sorry this will
270:10 - be our tree
270:11 - view that's it now let me remove
270:15 - this now what we need to do so we will
270:19 - basically get the enable flags from the
270:22 - API so the first thing is that we'll
270:24 - destructure this one from use
270:26 - context of we are having this feature
270:29 - flag context so this will give you this
270:33 - enable flags that you are passing here
270:35 - so this state also you don't manage the
270:39 - loading state so let me just do a
270:40 - loading state of
270:43 - true and here we'll make the set loading
270:46 - as
270:47 - false if there are any error we'll also
270:50 - set loading as
270:52 - false so you have to do it here before
270:57 - this and here we'll pass the
271:00 - loading so these two we are going to
271:03 - receive from our context
271:07 - so we'll paste it here so now uh we'll
271:10 - basically so if there are any loading so
271:14 - we simply return here
271:16 - div or let's make this one as
271:20 - H1 so this will be
271:24 - loading uh
271:26 - data
271:28 - please
271:30 - wait let's save it let's see what is
271:32 - happening it will be very fast I think
271:34 - you'll not be able to see see this all
271:36 - right so this is fine so now what we
271:37 - need to do we have to basically check
271:39 - that how many flags are enabled based on
271:41 - that we have to check based on this key
271:44 - we will render that particular component
271:46 - so what we can do we can simply do here
271:49 - component to render do map and this will
271:52 - be our component
271:54 - item and here we'll simply check we'll
271:57 - create a function here so let's quickly
271:59 - create this function so this will
272:01 - function check enabled
272:04 - flags and here it will receive the G
272:07 - current uh sorry this will be G current
272:11 - key so here we'll simply return this
272:14 - enabled flags of this get current key so
272:17 - now what this is object so if we are
272:19 - getting a current key of let's say sort
272:22 - sort review so it will check that if
272:24 - this sort review is true or false if it
272:26 - is true so render it or else not so now
272:29 - we'll do check enable flags of component
272:32 - item.
272:34 - key
272:35 - if this is true so we'll do component
272:38 - item dot component we want to render or
272:40 - else this will be
272:42 - null now see what will happen if I now
272:45 - save this now go back see now we getting
272:49 - all the components here so first we are
272:51 - getting Tic Tac to I think this is the
272:53 - first
272:54 - one sorry I think we having so and light
272:57 - and because this is false this is
272:58 - correct then we are having this one and
273:01 - this all definitely will
273:03 - work you can see everything is
273:08 - working and I think this Tre view is not
273:11 - not working the reason is I think we
273:13 - have to pass the data so here we have to
273:15 - pass the
273:16 - data data what is the name let me just
273:19 - check so this is menus so we have to
273:22 - pass the
273:24 - menus which will be our menus from
273:27 - treeview that is the reason let me just
273:29 - save it now let's see okay now this is
273:32 - coming now see what will happen now
273:35 - let's say uh in your API response now
273:38 - this so accordion is also coming true
273:41 - and this so dark mode is also coming
273:43 - true now if I now save this now see we
273:46 - getting all of these so we getting this
273:48 - one we also getting tic Taco random
273:52 - color generator and here you are also
273:55 - getting the accordion all right I think
273:59 - there are some styling issue but that is
274:01 - fine because it is mismatching I think
274:02 - multiple component style because of the
274:04 - naming but at the end functionality is
274:06 - working so you can see that everything
274:08 - is working
274:10 - fine yep now let's say if you want to
274:14 - add a new component so obviously this
274:16 - key needs to be updated and based on
274:18 - that you have to also have to reender
274:20 - this component ORS this will not work
274:23 - for example let's say we want to
274:25 - render the which one we'll do I'm not
274:30 - sure we'll do tab tabs one so we add
274:33 - another key here so we'll do so
274:38 - tabs and here we'll do
274:41 - component and this will be our tab
274:45 - test and here I'll add these so
274:49 - tabs as true if I now save it now let's
274:54 - see so it's scroll down you can see we
274:56 - are getting the tabs component also all
274:59 - right so this is basically the concept
275:01 - behind this feature flag implementation
275:03 - obviously sometimes they will tell you
275:05 - not to use any kind of framework you
275:07 - have to do it in vanilla JS but as I
275:09 - already mentioned that in later videos I
275:11 - will be creating all of these projects
275:12 - in vanila JS also so that's all for this
275:15 - particular project let's move on to the
275:17 - next one all right so next three
275:19 - projects will be three custom Hooks and
275:22 - one will be the use fet so you can see
275:24 - that so for this one we'll be creating a
275:25 - custom hook where you will be like able
275:28 - to pass a URL customizable and all the
275:30 - options and based on that you'll be
275:32 - getting the data next will be uh like
275:36 - this one so which is basically outside
275:38 - click so here you can see that we are
275:40 - having some data and if I click outside
275:42 - that data is basically hidden so this
275:44 - concept you can also Implement any kind
275:46 - of model so let's say uh in interview
275:49 - they'll ask you that okay you create a
275:51 - model and on outside click you have to
275:53 - close the model so this is basically the
275:54 - same hook that we are going to create
275:56 - and at the end we'll be creating this
275:57 - use window resize hook so if I let's say
276:00 - try to resize this one so you see that
276:02 - this width will be basically and the
276:04 - height will be changed so this is
276:05 - another one that we are going to build
276:07 - so we'll be creating most uh mainly
276:09 - three hook one is use f use on click
276:12 - outside and then use window resize or
276:14 - you can also say this one as use
276:17 - responsive all right everyone so let's
276:18 - start implementing the first custom hook
276:21 - and that is use fet although this is not
276:23 - the first custom hook I think we have
276:24 - already implemented another one and that
276:26 - is use local storage while implementing
276:29 - the that light and dark component but
276:32 - this is also very very important I think
276:34 - I already disc discuss multiple times
276:36 - whenever you'll give any interview most
276:38 - of the times they will ask you like
276:39 - create any any custom hook that you know
276:42 - now one of the most popular one is use
276:44 - fetch that basically is used to fetch
276:46 - any kind of data from API URL and that
276:49 - has to be customizable so that we are
276:51 - going to create and also you'll be
276:52 - creating two more one will be use on
276:54 - click outside so let's see you are
276:56 - having a model and on click of outside
276:58 - you want to close the model or anything
277:00 - and the third will be the use responsive
277:02 - or use window size whatever you want to
277:05 - tell so let's start with our first one
277:08 - so I'll just close everything else and
277:10 - also let me just comment out this
277:13 - one all right so we having first custom
277:16 - hook and that is use
277:19 - fetch
277:21 - custom
277:25 - hook so let me just close everything
277:28 - else so here I'll create another folder
277:31 - and this will be my use fetch so here I
277:34 - want to create two file one will be my
277:37 - use fetch hook that will be my index.
277:40 - jsx and second one will be the testing
277:43 - so I'll give this one as test.
277:46 - jsx all right so now whenever we'll
277:49 - Implement any custom the first question
277:52 - will be a to quy like what are the
277:54 - requirements what are the parameters
277:55 - that you need to pass what are the state
277:58 - that you need to manage and lot of other
278:00 - things so here let's say in this use fet
278:02 - hook you will be receiving for now we'll
278:04 - keep this one very very simple Le we'll
278:05 - just receive some URL and also let's say
278:08 - you want to receive some options and you
278:10 - want to me you want to manage a loading
278:12 - state that is absolutely mandatory and
278:14 - also you have to maintain a error state
278:17 - so let's see how we are going to do that
278:19 - so the first thing is that we have we do
278:22 - export default function we have to give
278:25 - this on name as use so this is how a
278:28 - hooks name works I think you already
278:31 - aware sorry so we'll give this one as a
278:34 - use fet this will receive a URL and also
278:38 - this will receive some optional uh
278:42 - options all right so now here as I
278:45 - already told you to manage three states
278:48 - so one will be our data so this will be
278:51 - data set data and this will be use state
278:55 - of
278:57 - null then we are having a loading state
278:59 - so you give loading or let's say pending
279:02 - whatever you give this on pending we
279:03 - have given so much loading loading
279:05 - everywhere so we'll give this one as
279:07 - false and also we'll take another state
279:10 - and that will be our error
279:13 - State uh we'll do error set error and
279:17 - this is also will be used state of null
279:21 - all right so now what we need to do
279:23 - basically we are getting this URL so
279:25 - this URL will be our dependency So based
279:27 - on this URL we need to page the data so
279:31 - here what you can do simply create a use
279:33 - effect
279:37 - and then you give this URL as a
279:41 - dependency and here we are going to
279:43 - create a method so this will be our Fage
279:50 - data all right so now here we will
279:53 - create our function so this will be as
279:54 - Inc function Fage
279:58 - data so here the first thing is that
280:01 - we'll take a
280:02 - try and we'll take a catch so this will
280:05 - be error so we'll just uh render the set
280:09 - error that this will take template
280:13 - literals and we'll pass this error and
280:16 - then we'll show
280:18 - some we'll show some error
280:22 - ORD all
280:24 - right and obviously we have to make the
280:27 - Set uh pending as
280:31 - false that's it now let's copy this and
280:35 - here we are going to make also this one
280:37 - as
280:38 - true now here we'll do const
280:41 - response this will be AIT
280:44 - fet so fet will take the URL and then we
280:49 - can pass this option that we are having
280:52 - here that's
280:54 - it so here now we we can check if this
280:57 - response do okay is false so we'll uh
281:02 - basically throw a new error
281:06 - and we'll take this response for now and
281:09 - we have to do uh the dot response.
281:13 - status text all right and then here
281:17 - we'll do const result which will be AIT
281:21 - response.
281:23 - Json so this will give you the result
281:27 - and after that we are going to just call
281:29 - the set data this is actually simple as
281:31 - how we have usually do a API call result
281:34 - and we are going to make the set error
281:37 - uh sorry set error as
281:39 - null and also we'll do set pending as
281:44 - false that's it so this will now just do
281:48 - the automatic fetching call and now as
281:52 - simple as that we just have to return
281:55 - the data the error and the pending State
282:00 - that's it so that means this all the
282:02 - data you are returning from this
282:05 - uh your custom hook this custom hook now
282:09 - you will be able to use throughout the
282:11 - application it doesn't matter all right
282:14 - obviously there are lot of things that
282:15 - you can do like you can manage this one
282:18 - on some button click like anything like
282:20 - on some on change event on some call
282:24 - back like so many things that you can do
282:25 - but for now let's keep this one very
282:27 - simple so now let's say we want to use
282:29 - this one in this uh test component so
282:31 - I'll just quickly create this component
282:33 - so this will be export
282:35 - default function and this will be use f
282:39 - hook
282:44 - test all right so here let's keep this
282:48 - one very very simple so we just R A
282:51 - div and we'll give this on H1 and this
282:54 - will be our use
282:57 - fet
283:00 - hook now here first thing is that we
283:03 - have to take the
283:05 - uh output from the hook but how we are
283:08 - going to get that before that we have to
283:10 - pass this input right until unless we
283:12 - pass the URL it doesn't work so that is
283:16 - the reason we'll do const then we are
283:18 - having data error so basically we
283:20 - destructuring and the pending state so
283:23 - this we are going to get it from use
283:24 - Fage now you see it will take URL now as
283:28 - for uh I remember I think we are using
283:30 - some URL in this scroll indicator I
283:33 - think we can use the same
283:36 - uh let me just
283:43 - check uh I think we're using somewh
283:46 - dummy
283:47 - Json yes so here we can copy
283:53 - this and then we can pass this
283:55 - one and this will pass this one as empty
284:00 - object that is fine all right so that
284:02 - means we are passing this input to this
284:06 - hook and based on that we are returning
284:08 - the data error and the pending let's see
284:10 - what is happening here now so we un log
284:13 - our error data and pending let's save it
284:18 - let's go to our app.js and here I'm
284:21 - going to render use f hook test now
284:25 - let's save
284:27 - it all
284:29 - right now let's go to our
284:33 - inspect
284:35 - so we getting null so that means there
284:37 - is no error first time this is false
284:39 - pending then it is true now we getting
284:41 - the data so you can see that we getting
284:42 - the products here so this is the things
284:45 - that we need to render so now this is
284:47 - very simple so we can just simply go to
284:49 - our test
284:51 - component and here we can simply check
284:54 - if the pending is true so we'll
284:57 - basically render some h2 tag H3 that
285:02 - pending so we'll do pending
285:05 - please
285:08 - wait or else this will be null and then
285:11 - here we can basically check if the data
285:14 - and and data.
285:18 - products and and data. products. length
285:22 - if this is true so we'll do data.
285:25 - products. map this will be product
285:29 - item and here I'll simply return some P
285:32 - for now and I'll return return product
285:35 - item.
285:36 - title and we also give some key which
285:39 - will be product item.
285:41 - key if there is nothing so we'll just
285:44 - render
285:45 - null find now format this let me just
285:49 - remove this one let's save it let's see
285:51 - what is happening awesome so now we
285:54 - getting the data here if I now refresh
285:56 - this pending please wait and then we are
285:59 - having the data so this is you have to
286:02 - basically how you need to do now there
286:04 - is another thing that you can do you can
286:06 - see that we are explicit
286:08 - uh now here another thing we can do you
286:11 - can see that we are explicitly using
286:12 - this data do products if you want you
286:16 - can basically mention that what key you
286:17 - want from this data and based on that
286:19 - also you will be able to uh change this
286:22 - functionality here but for interview
286:24 - purpose this is more than enough that
286:25 - you can do but one thing I'll suggest to
286:27 - do and that is this method that you are
286:31 - having try to implement the same method
286:33 - on button click so let's say you having
286:35 - a button in this component and whenever
286:37 - you will click on this button you want
286:39 - to call the same uh hook and based on
286:42 - that you want to get the data another
286:44 - thing I forgot so if there are any error
286:46 - so we'll render this A3 and we'll render
286:50 - this error here or else this will be
286:56 - null that's it all right so I think
286:59 - that's all for this particular project
287:01 - let's move on to the next one so in the
287:02 - next one we'll be creating a another two
287:05 - more hooks uh one will be used on click
287:07 - outside and one will be use window size
287:10 - so let's start working on those all
287:11 - right everyone so let's Implement our
287:13 - second hook and this will be used on
287:15 - click outside something like that so
287:18 - let's say you are having some content
287:20 - and whenever you will be clicking
287:21 - outside of that content you have to hide
287:23 - or basically you have to remove that
287:25 - particular content from the from the
287:27 - screen or basically the Dom so here uh
287:31 - what we are going to do so most of the
287:33 - times you'll face these uh questions in
287:35 - the interview that you are having a
287:36 - model and then let's say on click of
287:39 - outside of that particular model content
287:40 - you want to hide that model how you're
287:42 - going to do
287:44 - that okay so here I'll create another
287:47 - one and this will be use outside
287:52 - click and let's create our index.
287:56 - jsx and then we are having test. jsx so
288:01 - the first thing is that we'll create
288:02 - this test component so this will be
288:04 - export default
288:07 - function so this will be function this
288:10 - will be use
288:11 - onclick
288:13 - outside
288:17 - teste and here let's say uh what we're
288:21 - going to do is simply return some
288:24 - div sorry we'll return a div and here
288:27 - I'm going to first uh take a state and
288:30 - this will be like so content now here
288:33 - I'm doing a simple content it doesn't
288:35 - matter if in the interview they're
288:37 - telling you that you have to create a
288:38 - model simply create a model and apply
288:41 - the exactly same logic it doesn't
288:44 - matter and here we'll do set so content
288:48 - so here we are having used state of
288:52 - false so now we are going to check if
288:55 - this so content is
288:57 - true so I want to do something or else
289:00 - I'll rer a
289:02 - button and here I'll do
289:06 - so
289:08 - content all
289:10 - right and here we'll take on click and
289:13 - we'll simply make this set sorry this
289:16 - will be set so content we'll do set so
289:19 - content
289:20 - as uh we'll make this one as true now
289:24 - here in this content uh let's say we are
289:27 - having a
289:28 - H1 uh this is a random content all
289:35 - right and then we'll take a paragraph
289:38 - please
289:41 - click outside of
289:45 - this to close
289:49 - this it won't
289:52 - close if you
289:55 - click inside of this content something
289:59 - like
290:01 - that so this is the content now in place
290:04 - of this one if you want to render a
290:06 - model you can do that let's save it
290:09 - let's go to our app.js and here I'm
290:12 - going to create another content uh
290:14 - component so this will be use onclick
290:18 - outside hook
290:25 - test all right so here we are having use
290:29 - out on click outside test let's save
290:32 - this let's go so click here we are
290:35 - getting this one now what will happen
290:37 - this is the content so each and every
290:39 - content will have a reference so that
290:42 - ref that we are going to use all right
290:45 - so what will happen whenever I'll click
290:47 - on the outside so here anywhere I want
290:49 - to hide this and again I want to show
290:50 - the button and this will be a general
290:53 - concept so you are going to create a
290:55 - model which will take a reference and
290:57 - Handler function and based on that it
290:59 - will basically detect that if we are
291:02 - clicking inside of the ref of that
291:04 - particular content so it will on close
291:06 - if we are clicking outside then
291:08 - obviously it will close so let's see how
291:10 - we are going to implement that so go to
291:12 - our hook and here I'll give this one
291:15 - name as export default
291:18 - function and this will be use
291:21 - outside
291:24 - click so as I already told you this will
291:26 - receive a reference and also it will
291:28 - receive a Handler function all right now
291:32 - here what you're going to do you'll
291:33 - simply take a use
291:36 - effect and we're going to pass this
291:39 - Handler and the ref as a dependency
291:42 - because based on this ra only we are
291:43 - going to do certain functionality all
291:46 - right now here this is very very
291:48 - important we need to create a function
291:51 - which will be something like uh listener
291:54 - we can give so this will be a listener
291:56 - that we are going to create which will
291:58 - give you a
291:59 - event now what we are going to check if
292:03 - so each and every reference so for
292:06 - example each and every Dom element will
292:08 - have a reference and that reference will
292:10 - give you a current property so that I'm
292:12 - going to show you so we are going to
292:15 - check if it is not equal to this ref do
292:18 - current or else if this ref sorry if
292:22 - this ref. current.
292:24 - contents this event.
292:28 - target so we going to return all right
292:32 - so here we'll simply
292:34 - return or else what we are going to do
292:37 - we'll call this Handler that we are
292:40 - passing and we'll pass this event here
292:42 - so this
292:43 - event and now what we going to do we
292:46 - have to add a listener to this so what
292:50 - we can do simply we can take our
292:51 - document sorry we can take document. add
292:55 - event listeners so here we'll do mouse
292:58 - down and we're going to pass this
293:00 - listener that we have created same we
293:02 - have to do it for document do add event
293:05 - listener and we'll do a touch
293:08 - start and we'll pass the same listener
293:11 - all
293:12 - right that's it now what will happen
293:15 - this will do the functionality it will
293:17 - basically check based on this current
293:19 - ref property which will give you this
293:21 - current property from this ref but here
293:23 - one very very important thing whenever
293:25 - this component will unmount so in the
293:28 - call back we are going to remove this uh
293:32 - event listeners we'll do document do
293:34 - remove listener and we'll do the mouse
293:38 - down and we'll remove this listener from
293:41 - here and same we'll do for document.
293:45 - remove event listener we'll do touch
293:49 - start and we are going to remove this
293:53 - listener that's it let's save it so now
293:56 - this you need to check it here so how we
293:59 - are going to do that so the first thing
294:01 - very very important let me close this
294:04 - so first thing is that we have to create
294:06 - a ref so we do a ref which we are going
294:09 - to do using use re I'm sure that you
294:11 - already have some idea and this ra you
294:14 - need to pass it to a Dom element now
294:17 - because we are checking this one based
294:19 - on this particular content so you're
294:20 - going to pass this ra here I hope you're
294:22 - getting so now this ra will give you ra
294:25 - do current property now because this is
294:27 - a custom hook hooks are always should be
294:29 - called on the top of the top of this
294:31 - particular function so we need to
294:33 - basically and also hooks you can't call
294:35 - directly inside a function so you have
294:38 - to call on the top level always so you
294:40 - can directly call here use outside click
294:44 - all right now what will receive it will
294:46 - receive a ref correct and then it will
294:48 - receive a Handler now what Handler you
294:50 - want to do so here let me just move it
294:54 - here this is fine so here we can simply
294:56 - do this whenever I'll click outside so
294:59 - I'll make the set so content as false I
295:02 - hope you're getting so what will happen
295:03 - it will basically check based on this
295:05 - ref and if this ra is not in the current
295:08 - Target or basically here that logic we
295:10 - are
295:11 - doing then it will basically remove or
295:14 - basically make this Handler as false
295:16 - which is at the end that dispatch
295:18 - function that we are using here if I now
295:21 - save this let's go back let's click here
295:25 - nothing is happening if I click outside
295:28 - this is closing you can see
295:31 - that and if I click any of here it's
295:35 - working fine if I click here it's
295:37 - closing so this is basically the whole
295:39 - logic how you need to do that now this
295:41 - is everything is basically based on this
295:42 - R wherever you are passing this R this
295:45 - part you have to be very very careful if
295:47 - you want you can pass any component
295:48 - inside of this and it will beave uh in
295:50 - the same way so I think that's all for
295:53 - this particular project now in the next
295:55 - video we are going to do another
295:56 - important custom hook and that is called
295:58 - the uh use window size or use responsive
296:01 - and that is also very very useful hook
296:03 - that you can use in your uh project
296:05 - whenever you'll be doing any kind of
296:07 - large scale project so let's Implement
296:09 - that particular hook in the next part
296:11 - all right everyone so let's Implement
296:13 - our third and the last hook that we are
296:15 - going to create and that will be use
296:16 - window resize or you can also name this
296:19 - one or use this one as a use responsive
296:23 - so let's say the scenario will be like
296:25 - this so you are creating a global
296:27 - application where uh you want to check
296:30 - the responsiveness of this particular
296:32 - page d dally using a particular reusable
296:35 - hook so what you can do basically you
296:37 - can create this hook and you can use
296:39 - this in various components directly
296:41 - which will give you the width and height
296:43 - and based on that you can do based on
296:45 - that you can do certain
296:46 - operations so let's do one thing let's
296:48 - quickly create another component inside
296:50 - this and I'll give this one name as use
296:53 - window resize you can name whatever you
296:55 - like again we are going to create two
296:57 - file inside of this one will be index.
297:01 - jsx and one will be
297:03 - test.
297:05 - jsx now let me just close everything
297:07 - else so here this will be the hook so
297:11 - let's quickly create the component so
297:12 - this will be function and we'll give
297:15 - this one as we use window
297:20 - resize now this will not receive any
297:22 - parameters because at the end we need to
297:25 - use a add even listener and that will be
297:28 - resized and based on that we just need a
297:31 - simple state which will hold the width
297:33 - and height of that particular uh page so
297:36 - here we are going to take this uh State
297:39 - we'll give this name as window size and
297:43 - this will be use window
297:45 - size as I already mentioned this is
297:48 - another very very important hook you
297:50 - might get ask in your interview and here
297:52 - you you will basically mention that I
297:54 - will have a width which will be zero and
297:57 - then I'll be having a height which will
297:58 - be a zero initially all right now again
298:02 - here what you need to do
298:04 - here you need to take use layout effect
298:06 - now what is the difference between use
298:07 - layout effect and use effect use effect
298:09 - will only load when all the Dom elements
298:12 - will be rendered in your browser but use
298:14 - layout effect will be called before that
298:16 - so that is the reason we'll take a use
298:18 - layout
298:21 - effect
298:22 - and here we are going to you can see
298:25 - that this fire synchronously after all
298:27 - the Dom
298:28 - mutations but here it is almost
298:31 - identical to use effect
298:37 - so here you can see that uh what is
298:39 - telling that it will FL ringly before
298:42 - the browser has a chance to paint so
298:43 - paint is one of the process whenever
298:45 - browser will render all the elements and
298:47 - after that it will do the paint so
298:49 - before that only this use effect use
298:51 - layout effect will be called actually it
298:53 - is preferred to standard use effect you
298:55 - can also use use effect but there is
298:57 - nothing wrong using this use layout
298:59 - effect in this particular scenario so
299:02 - here what we are going to do we will
299:03 - simply create a method so which will be
299:06 - our handle
299:11 - resize all right so now here we need to
299:13 - add a event listener so we do window.
299:15 - add event listener and we need to take
299:17 - this
299:19 - resize and we'll pass this
299:21 - handle uh resize this function that we
299:24 - will be creating so this is now when the
299:28 - component will unmount so now we'll just
299:31 - return and then we'll just need need to
299:33 - remove this even listener we'll do
299:36 - resize and then call this method
299:40 - here all right so now let's create this
299:43 - method so this will be function handle
299:48 - resize and here what we are going to do
299:51 - is simply do set window resize and here
299:54 - we'll do width which will be window dot
299:58 - inner
300:00 - width and then we'll do height which
300:02 - will be window do inner height that's it
300:06 - so this will automatically set the
300:09 - current width and height of this
300:11 - window or basically the screen that you
300:14 - are accessing and then simply return
300:16 - this window size that's it all right so
300:20 - now what we are going to do we need to
300:22 - use this in our component so you create
300:24 - a component so do export default
300:27 - function and do use window
300:31 - resize
300:34 - test and here let's simply return a div
300:38 - we'll give a H1 and this is a use
300:41 - window resize
300:45 - hook and now here we'll take a p
300:50 - and we'll show here something like width
300:53 - is so here we'll render the
300:55 - width and then we'll take another
300:59 - p and we'll do height is
301:03 - height now from where you will be
301:06 - basically getting so we'll get this
301:10 - window
301:13 - size from use window
301:17 - resize now here you will be able to
301:20 - extract
301:22 - width comma
301:24 - height from this window size and that's
301:28 - it now what you can do simply based on
301:30 - this width and height you can do certain
301:32 - of and you can write some CSS anything
301:34 - you can do let's save it let's go to our
301:37 - app.js I'll just comment it out and
301:40 - let's give another comment here and this
301:41 - will be
301:42 - use window resize hook
301:49 - test and here we are going to do use
301:52 - window resize
301:54 - test now let's save it and let's see
301:58 - what is
301:59 - happening so let's go here so you can
302:01 - see that we are getting width is this
302:03 - height is this now let's try
302:06 - to resize so you can see width is
302:09 - changing and if I just do something like
302:14 - this so we'll notice WID is changing
302:17 - here and if I decrease height is also
302:19 - getting changed all right so this is
302:21 - working fine so this is another very
302:23 - important react hook that you might get
302:26 - faced in your uh interview also like
302:28 - this is a very helpful hook that you can
302:30 - also use for usability purposes whenever
302:32 - you'll be creating a very big
302:34 - application so I think that's all for
302:36 - this particular project let's move on to
302:38 - the next one all right so in this
302:40 - project you can see that we'll be
302:41 - creating the scroll to top and bottom
302:42 - feature so we will be basically fetching
302:44 - the list of data from API and there will
302:47 - be two button one is scroll to bottom
302:49 - and then scroll to top if I click here
302:51 - it will scroll to the top and if I click
302:53 - here it will scroll to the bottom so
302:55 - this is another very small uh kind of
302:57 - for snippet that we are going to
302:58 - implement so let's see how we are going
303:00 - to do this one all right so let's start
303:02 - working on the scroll to top and bottom
303:05 - uh component so let's create another
303:07 - component inside this I'll do
303:09 - scroll to
303:12 - top and
303:16 - bottom so here I'll create index. jsx
303:20 - now let's say uh you are fetching some
303:22 - data from API and there is a button on
303:25 - top of the page which says that scroll
303:28 - to bottom and at the same time you'll be
303:30 - having some kind of button or any any
303:32 - kind of Icon at the bottom of the page
303:35 - on on click of that you you want to
303:37 - basically go to the top of the page so
303:39 - let's see how we are going to implement
303:41 - that so first let me just quickly create
303:43 - this component so this will be a very
303:45 - simple project but although I think it's
303:47 - a very good idea or basically very good
303:50 - thing to know this this kind of concept
303:53 - if like they will ask you that how you
303:55 - will maintain scroll feature in your
303:57 - website so that it will be very easy for
303:58 - you to answer in your interview so let's
304:01 - see how you're going to do that so we'll
304:03 - do this on a scroll to top and
304:10 - bottom all right now here let's say
304:13 - we're fetching some data so I'll have
304:15 - some data here or let's do one thing
304:17 - another very interesting thing that we
304:19 - can do and that is we have already
304:21 - created a custom hook that is used Fetch
304:24 - and we can use the same logic here to
304:26 - get the data instead of calling the same
304:28 - API again and again because we have
304:29 - already we have already called this API
304:32 - multiple times so you can copy this
304:34 - thing and then we can paste it here now
304:38 - I'll just import it that's it so this
304:41 - will basically give me data now what I'm
304:43 - going to do I'll return a
304:45 - div I'll First Take H1 and I'll do
304:48 - scroll to
304:50 - top and
304:53 - bottom
304:55 - feature and here what we can do we'll
304:58 - give another A3 tag and I'll do this is
305:02 - the top
305:06 - section and then we'll be having a
305:10 - button and this will be scroll to bottom
305:14 - so that means on click of that we want
305:16 - to go to the bottom of the page and here
305:18 - I want to render the data so I'll take a
305:21 - UL here
305:23 - simple and we can do here data and end
305:27 - data. length this is true or else this
305:30 - will be null so what we can do we can
305:33 - simply do data. map we are having item
305:36 - and we can render lii and because we
305:39 - calling the product so I'm pretty sure I
305:42 - think this will have data do products
305:44 - sorry so this will be data dot
305:49 - products and this will be also
305:53 - same so here it will basically Ranger
305:56 - item.
305:58 - title all
306:00 - right here we'll show so if loading is
306:05 - sorry if bending is true so we just
306:08 - return some H1 and we'll so
306:11 - loading please
306:15 - wait all right and if there are any
306:19 - error so we'll also render something
306:21 - like return H1 and we show error
306:28 - Ur please try
306:36 - again all right so after this what we
306:40 - going to do so let's say we will be
306:43 - having another button here and this will
306:47 - be
306:49 - scroll to
306:52 - top that's it so now let's format this
306:56 - and here also another thing what we can
306:57 - do we'll take another A3 and we'll
307:00 - render this is the
307:04 - bottom of
307:06 - the
307:09 - page let's go to our app.js and let's
307:12 - render this
307:14 - component so this will be scroll to top
307:18 - and
307:23 - bottom all right let's save it let's see
307:25 - what we are
307:28 - getting all so we getting data do map is
307:30 - not a function sorry this will be data.
307:36 - products now let's
307:38 - see all right so here also you can give
307:41 - some style for now this is fine we'll
307:43 - give a style and we'll do Le
307:45 - style as
307:50 - none all right so we are getting the top
307:52 - section then we are getting uh this
307:55 - sorry this is our top section then a
307:57 - button and then we getting the data we
307:59 - can also do one thing uh let's give
308:03 - a limit
308:05 - of 100
308:08 - here so let's see if we are getting 100
308:10 - dat or not yeah this is fine okay so now
308:13 - on click of this we we want to basically
308:15 - go to the top of the page and on click
308:17 - of this we want to go to the bottom of
308:20 - the page so how we are going to do
308:22 - that so first let's take a on click so
308:27 - we'll do handle
308:31 - scroll to
308:33 - top so we'll create a method so this
308:37 - will function let me just copy
308:43 - this that's it so now this will be
308:45 - pretty easy what you going to do simply
308:47 - do window. scroll
308:50 - to all right and here you can basically
308:53 - mention the options which will be the
308:55 - scroll options so here you can mention
308:57 - the top so if you want to go to the at
309:00 - most top you can give the top top as
309:02 - zero correct if you want to give 100 so
309:06 - that will definitely work that is fine
309:08 - and left will be also zero now another
309:11 - option that you can give that is called
309:12 - behavior and that is a behavior that we
309:15 - will be giving this one as
309:17 - smooth I think there are some other
309:19 - options also you can use Auto instant
309:22 - and smooth so this is I think fine let's
309:26 - save it and let's see what is
309:28 - happening all right now we'll go here
309:30 - let's click here
309:32 - see it's going to the
309:34 - top all
309:37 - right okay now I want to go to the
309:39 - bottom so how we are going to do that
309:42 - now to go to the bottom we need a
309:44 - reference so because we need to tell
309:47 - that what is the bottom of the page so
309:49 - for this one what we can do so let's
309:52 - take a d here this is just to uh give
309:56 - you the example so I'll take a reference
309:58 - and this will be our bottom reference
310:03 - and here I'll be creating this so let's
310:05 - create this const bottom ref this will
310:09 - be used R of
310:13 - null now we are having this button here
310:16 - so this is the button so you need to
310:18 - create another on click so Lo on click
310:20 - this will be handle scroll to
310:24 - bottom so let's copy this and let's
310:28 - create this
310:30 - method so now to do do this one what you
310:32 - can do we need to basically I already
310:35 - mentioned in the previous uh lectures
310:37 - that this reference will give you a
310:39 - current property and that basically you
310:41 - can use so here we can simply do this
310:44 - bottom ref do current and here it will
310:47 - give you this
310:48 - scroll into view all right so this is
310:53 - the property and here you can use this
310:55 - Behavior which will be
310:58 - smooth all right now let's form this and
311:03 - let's save it now let's see what is
311:06 - happening if I click here it's going to
311:09 - the bottom you can see that if I click
311:10 - here it's going to the
311:12 - top and this is working
311:15 - fine all right now this is one thing now
311:18 - let's say you want to go to a certain
311:20 - section of this particular uh thing not
311:23 - here I'll give you a different um
311:25 - example for that all right so in this
311:27 - project what we are going to do we will
311:29 - be basically able to scroll to a
311:31 - particular section so so let's say we
311:32 - having first second third fourth and
311:34 - fifth and let's say we want to scroll to
311:36 - a particular section so if I click here
311:38 - you can see that it's going to the third
311:39 - card so based on reference we will be
311:42 - basically getting the uh top content of
311:45 - this particular card if we want to
311:46 - change this one to Fourth it will scroll
311:48 - to this particular section and if I
311:50 - scroll to this fifth card it will scroll
311:52 - to this particular fifth card so we are
311:53 - going to see how we are going to
311:55 - implement this one so the reason I'm
311:56 - doing this one because once you'll
311:58 - complete this scroll to top and bottom
312:00 - functionality they might ask you that
312:02 - okay let's say now you are doing top and
312:04 - bottom and let's say there are multiple
312:05 - section in your application in your web
312:08 - page and you want to go to a particular
312:10 - uh page uh for if I give you a real time
312:13 - uh like more realistic uh example uh you
312:17 - are having a website and then there is a
312:19 - home about Services testimonial footer
312:21 - section and let's say they they will
312:23 - tell you that whenever you will click
312:25 - the about it it should go to the about
312:27 - section when you click to the services
312:29 - it will go to the services when you
312:30 - click on footer it should go to the the
312:31 - footer so in this case this concept we
312:33 - will be able to use so let's see how we
312:35 - are going to do this one so let's create
312:38 - another file here and this will be
312:40 - scroll
312:41 - to
312:43 - section do jsx so how this will work so
312:48 - let me just quickly create this
312:49 - component so that it will be easy to
312:51 - understand so this will be export fun
312:53 - default
312:56 - function this will be scroll to
313:00 - section
313:02 - and here I'll return something let me
313:05 - just give a div and H1 so this is
313:08 - basically scroll to a
313:12 - particular
313:14 - section so here I'll create some data
313:17 - all right so create some dummy data for
313:19 - now so what we going to
313:22 - do so here uh let's give a label for
313:26 - this one so this is our first card or
313:29 - anything all right and we'll give a
313:32 - color of
313:35 - red let's copy
313:37 - this and
313:40 - also uh what we can do we can also give
313:42 - a height or let's do one thing let's
313:44 - create a style
313:46 - here so we'll give a width of
313:51 - 100% height
313:53 - of uh 600 PX and so for this one I'm
313:58 - going to give a background
314:00 - of
314:02 - uh red now let's copy this and I'm going
314:06 - to paste it 1 2 3 4 and five so this
314:11 - will be my fifth
314:14 - card and for this one we'll do this one
314:17 - as
314:19 - black so this will be my
314:22 - fourth this one will do
314:25 - green this one will do blue this is my
314:29 - third and for this one what we can do we
314:32 - do this one as
314:34 - gray and this one will be
314:37 - second all right so let's see what
314:39 - having this data so first let me just
314:42 - render this so we are having this H1 and
314:45 - after this I'll be having a button and
314:48 - this will be click something like uh
314:51 - what we going do we do click to scroll
314:55 - all right and then here I'm going to
314:57 - render this data do map so this is a
315:01 - data item and here I'm going to return a
315:07 - div and then I'm just take a p or let's
315:11 - take A3 and render this data item dot
315:16 - level and here I'll take the style which
315:19 - will be data
315:21 - item dot
315:24 - style all right so now first let's save
315:28 - it and let's go to our
315:32 - app.js let me just comment it out or
315:36 - let's make another comment here so this
315:38 - will be scroll to a
315:42 - particular uh
315:45 - particular section all right so this is
315:51 - let me just import it so this will be
315:52 - scroll to
315:54 - section let me just comment it out let's
315:57 - save it and let's see what we getting
316:00 - all right so we getting first card
316:03 - second third fourth and fifth so fifth
316:06 - one I think we not able to see let me
316:07 - just change this color what we can do uh
316:11 - we'll give some different color for this
316:12 - one uh so let's give this one as
316:18 - orange okay so now let's say you want to
316:22 - scroll to this fourth card for this one
316:26 - so how we going to do that so for this
316:30 - one you are to create again the the ref
316:32 - so here I'll create a ref so let's say
316:34 - I'll create a ref for now I'm giving
316:38 - this one name as ref you can use any
316:40 - name you want so this will be use ref
316:43 - all right and then let's say here in
316:46 - this div I'll give a ref which will be
316:50 - if this data item or let's take index so
316:54 - index so check if the index is equal to
316:57 - equal to three that means this is the
316:59 - fourth item and want to give this ra as
317:02 - this ra or else this will be null all
317:05 - right so now let's save it and here I'll
317:08 - give on
317:10 - click so this will be handle scroll
317:14 - to
317:16 - section and then you have to again
317:18 - create the
317:20 - function and then here what you need to
317:23 - do first you have to basically get the
317:27 - current position so we'll do uh let
317:30 - we'll do let po position which will be
317:32 - our ref do current and now this will
317:36 - basically give you one property which is
317:39 - get bounding client get bling bounding
317:44 - client and this is
317:46 - wed and this will give you a top
317:49 - property now here what you can to do you
317:52 - simply do window. scroll
317:55 - to and here you will basically pass I
317:57 - think we already discussed that you have
317:59 - to pass the stop so which will be this
318:02 - PO that you are having and then you'll
318:04 - do a behavior which will be smooth
318:10 - sorry H that's it so that means you are
318:14 - targeting this particular uh ref which
318:17 - is basically the card number four and
318:19 - then you are basically getting this gate
318:21 - bounding cent. top which is the current
318:23 - of and then if I now save it and let's
318:26 - go here let's click here so it's going
318:28 - to the fourth card you can see that if I
318:31 - change change this index to let's say
318:33 - four that means now it will go to the
318:35 - fifth card all right so this is the
318:37 - advantage so how you will be able to
318:39 - basically go to a particular section all
318:41 - right so this is now going to the
318:46 - third all right now you can see it's
318:48 - going to the fifth card if I click here
318:51 - again this is going to the fifth if I
318:53 - let's make this one two so now it should
318:56 - go to the third Let me refresh this if I
318:59 - click here it's going to the third card
319:01 - so this is another very important thing
319:03 - that you should know how you can
319:05 - basically scroll to top bottom and also
319:07 - to a particular section so that's all
319:09 - for this particular project let's move
319:11 - on to the next one all right everyone so
319:13 - this will be a very very simple project
319:15 - so this will be a weather application
319:16 - now this is a very very popular
319:17 - interview questions and the main reason
319:21 - behind is that here actually you don't
319:23 - have any routing or some any other
319:25 - functionality so we will be having this
319:27 - search functionality obviously and if
319:28 - you type something based on that we'll
319:30 - be calling the AP
319:32 - and the data will be updated so this is
319:33 - the main uh main thing that what we are
319:36 - doing here nothing else obviously we'll
319:38 - be creating some reusable component and
319:40 - based on that we'll be try we'll try to
319:41 - implement this particular project so
319:43 - let's start working on this particular
319:45 - uh project that will be weather
319:46 - application so the first thing is that
319:48 - what we are going to do here so let me
319:51 - uh what I've done I just created a
319:53 - simple react project here and then uh
319:55 - I'm in this app.js now if you're
319:58 - watching this for the first time or you
319:59 - don't have any knowledge on react then I
320:01 - will suggest that please watch some of
320:03 - the very basic videos on reactj so that
320:06 - you'll get some idea and then you can
320:07 - start uh this video if you already have
320:10 - some idea then I think you are good to
320:12 - go so the first thing what we are going
320:13 - to do we'll just remove everything from
320:16 - this app and then now here let's create
320:21 - our first uh folder so I'll create one
320:24 - component folder here so let's give this
320:26 - on name as components so in the weather
320:29 - application as I already showed you that
320:31 - we'll be having one simple search bar
320:33 - and then whenever we'll search or input
320:36 - any city name and based on that we'll be
320:38 - getting the weather info of that
320:40 - particular City so you're going to
320:42 - having basically two components one will
320:44 - be a search component and second one
320:47 - will be basically our weather
320:49 - component now inside this we are going
320:51 - to create our index. jsx same I'll
320:55 - create here index.
320:58 - jsx all right so here let's quickly
321:01 - create this component so this will be
321:03 - export default function and let's give
321:07 - this our name as
321:10 - weather now let's return some simple div
321:14 - and this is our main weather component
321:17 - what we are going to do will be
321:18 - importing this component in our app.js
321:21 - so here we'll simply import our weather
321:24 - component so this is our first step so
321:27 - you're getting weather here now
321:29 - similarly we are going to create our
321:31 - search component here so this will be
321:33 - export default function
321:36 - search and here I'm going to return
321:39 - return search now this search component
321:42 - we are going to use in this weather
321:44 - component all right so let's say here
321:48 - I'm having this weather so I'm going to
321:50 - now use this one this search component
321:52 - here later we are going to change uh the
321:55 - structure so now we are having search
321:57 - and weather so first let's start with
321:59 - this search components will be having a
322:01 - search bar and for this one this project
322:04 - is our very basic project so for this
322:06 - one we are going to we will be basically
322:09 - use Simple CSS we'll not use any other
322:11 - third party utilities like Tailwind or
322:13 - material UI all right so now let's go to
322:16 - our search component now here what I'm
322:19 - going to do for now I'll give a class
322:22 - name here now later we will be writing
322:24 - all the uh all the Styles in this app.
322:27 - CSS so this will be our main app. CSS
322:29 - and you can see that this is basically
322:31 - imported in our main app.js file so here
322:35 - what I'm going to do I give this on name
322:37 - as let's give this one as search
322:41 - engine and
322:43 - here we will simply return one
322:46 - input so here I'll give a type as
322:49 - text uh let's give a class name CT
322:55 - search then we are having placeholder so
322:57 - this will be enter city name
323:01 - then we will be having a name so name
323:04 - what we can give we can give this one as
323:07 - search we'll also we be having a value
323:10 - so value will be basically be receiving
323:12 - from our parent component as a prop so
323:14 - this is our first prop and let's give
323:16 - this our name as search all right and
323:20 - then we'll be having a on change now for
323:22 - on change what we are going to do we'll
323:24 - be having a event and again we are going
323:26 - to receive a prop from our pent
323:28 - component which will be basically a
323:29 - wether or app.js doesn't matter so here
323:32 - what I'll do I'll do set search as this
323:36 - even do Target dot value so now these
323:40 - two are the props that we are going to
323:42 - receive so the first thing will be
323:44 - search and then this will be set search
323:47 - all right so this is all about our input
323:51 - if I now save this we will be having one
323:53 - very simple input this is fine and after
323:56 - this what we going to do we will
323:57 - basically take a button so this will be
324:00 - our button and let's give this on name
324:01 - as search weather something like
324:05 - that and here I'll give a class name and
324:09 - or I think this is fine let's give a
324:11 - class name of for example search
324:15 - button all right now here in this button
324:18 - we will also receive another props and
324:21 - this will be submit search something
324:24 - like that or let's give this on name as
324:26 - handle
324:28 - search all right now this is another
324:30 - prop that we are going to receive from
324:31 - our parent
324:33 - component so this is very simple uh
324:36 - structure that we need now let's do one
324:38 - thing let's quickly create our uh Styles
324:41 - so the first thing what I'm going to do
324:43 - let's remove everything let's take our
324:45 - body and here I'll give margin as zero
324:48 - and padding as zero then uh we'll be
324:52 - having our search engine so this is our
324:55 - class name so copy this so this will be
324:58 - a search engine here I'll give you width
325:01 - as
325:02 - 100% we'll give display as
325:05 - Flex we'll give justifying content as
325:08 - space around we'll give align items as
325:12 - Center we'll give margin bottom as
325:16 - 30px and we'll give margin top as
325:19 - 10px all
325:21 - right now next thing we are having the
325:23 - input so we'll having search engine then
325:26 - we having input I think we also have a
325:29 - class name here so you can and directly
325:31 - use this class name Also let's remove
325:32 - this one we basically don't need so here
325:36 - what I'm going to do so the first thing
325:37 - is that let's take a width here we give
325:40 - this one
325:41 - 70% we'll take a height of 45 PX we'll
325:46 - take a border of one PX
325:50 - solid then we'll take a border
325:53 - radius uh let's take this one as 8
325:56 - PX all right we'll take a padding of 2
326:00 - PX x 15
326:02 - PX we'll take a font size of 16
326:05 - PX uh we'll do outline as
326:09 - none background color will'll do
326:13 - white and we're going to use a color of
326:17 - this
326:19 - one all right this is fine now similarly
326:24 - I think we don't need this class name
326:25 - also so you can remove this one so what
326:28 - we can do we can simply take dot search
326:29 - engine of button so you're targeting the
326:32 - button so here the first thing we'll do
326:34 - border is
326:36 - none we'll do border radius as
326:41 - 8px uh what else we'll do background
326:45 - color as
326:49 - black we'll do color as
326:53 - white we'll do font size as 20 PX we'll
326:58 - do outline none we'll do cursor as
327:02 - pointer and also do padding as uh 12 PX
327:07 - 15 PX let's see how this will look so
327:10 - now let's save this save this one also
327:14 - and now let's
327:15 - see all right so now this is fine I
327:18 - think there are some let me just check
327:21 - we can basically increase some of
327:24 - the uh some of the padding here
327:27 - basically so 47 This Is 50 so what we
327:32 - can do we can make this one as
327:36 - 13 okay and also let's do this one as
327:40 - search so we'll make this one as
327:45 - 13 all right so this is done so now next
327:49 - uh we will be basically start working on
327:51 - the functionality first so what we need
327:53 - to do here because we need to pass this
327:56 - Prof from the parent component which is
327:59 - basically our weather so because we are
328:01 - using this search component in this
328:02 - weather component so we need to take all
328:04 - the uh State here so the first state we
328:06 - need to take that is to handle the
328:08 - search and this will be our set search
328:11 - and this will be U state of empty so
328:15 - this is our initial value and here we
328:17 - need to pass this so we'll pass this
328:19 - search as
328:20 - search also we pass this set search as
328:23 - set search and another one we need to
328:26 - pass and that is handle search because
328:28 - this way we are going to handle on click
328:30 - on of this
328:31 - button so here what I'm going to do so
328:34 - let's do one
328:36 - thing we'll make this one as a as sync
328:39 - method because we need to call the API
328:41 - on click of this button and this will be
328:44 - handle search all right and here we are
328:47 - going to pass this
328:49 - one like this so this is done all right
328:54 - now next thing what we need to do
328:55 - basically we need to take two more State
328:57 - one is to so loading state so whenever
329:00 - we will be typing something here and
329:02 - click on this search we want to show
329:04 - some kind of loader until unless we'll
329:07 - get the data from the API so that is the
329:09 - reason we are going to take another
329:11 - state here and let's give this our name
329:13 - as loading and set
329:16 - loading and this will be use state of
329:20 - false and at the end we also need to
329:23 - take our weather data so this will be
329:26 - our weather data set weather data and
329:31 - this will be US state of
329:35 - null all right so now everything is
329:39 - almost done so what we need to do
329:40 - basically on click of this button we
329:42 - need to call the API so for this one we
329:44 - are going to use this open weather map
329:46 - API let me just show you that which
329:49 - endpoint we are going to use all right
329:50 - so you can see that we are going to use
329:52 - this open weather map uh this API this
329:54 - is a very nice API that you can use it
329:57 - will give you lot of uh API end points
329:59 - that you basically will be able to
330:01 - integrate in your application for now we
330:04 - are going to keep it very simple so what
330:06 - you need to do first you need to create
330:07 - a uh account and then once you'll do
330:10 - that you
330:11 - basically have to get your own API keys
330:14 - please don't use my own obviously I'll
330:16 - push my code in GitHub but don't uh use
330:20 - like my own API key please create your
330:22 - own so you have to go here and then you
330:24 - will be able to basically see the API
330:27 - key all right so this is our API key
330:29 - that I will be using
330:30 - and for AP end point what we are going
330:32 - to do
330:34 - basically you'll basically get lot of
330:36 - options uh so let's see if I now go here
330:40 - so we can basically use the same end
330:42 - point but here instead of this lat and
330:44 - Lawn what we are going to do we'll be
330:46 - passing this queries this query will be
330:48 - basically our city name and then you
330:51 - have to pass the app ID which will be
330:53 - your API key all right now how we are
330:55 - going to do that so the first thing is
330:57 - that uh what we need to do we will be
331:00 - creating one uh sorry one method here
331:05 - and this will be as sync function f
331:09 - weather
331:11 - data all right now here let's take a
331:15 - triy block so in
331:19 - catch we'll just log this
331:22 - error and here what I'm going to do I do
331:25 - const response and this will be AIT
331:29 - Fage
331:30 - and here we we are going to use the same
331:33 - one so let me just copy this one we need
331:35 - to basically change some of the things
331:37 - so here the first thing is that what we
331:39 - need to do we basically don't need this
331:41 - one so what we will basically use we'll
331:44 - use this query parameter and this quy
331:47 - parameter is uh our search value here so
331:51 - this is our search or basically the CT
331:53 - name and this API key uh I'm going to
331:56 - use my own so I'll go here and then
331:59 - let's go to our let me just go to my API
332:04 - keys so I'll just copy
332:07 - this and I'll paste it
332:10 - here that's it so this is
332:14 - done all right so now what we can do
332:17 - simply we'll do const data equal to AIT
332:22 - response do Json and then I'm going to
332:26 - log the data here and we'll see what
332:30 - what we are getting
332:33 - now this search is basically the city
332:36 - name that we will be typing so now let's
332:38 - say if I now type here something let's
332:41 - say uh
332:43 - Mumbai click on this search nothing is
332:46 - happening the reason is we need to
332:48 - basically call this method here so what
332:51 - we going do we can simply do Fetch with
332:53 - the data now this will receive a query
332:57 - or the param let's make this one as
332:59 - param
333:00 - so this param we are going to pass it
333:02 - here and this param is basically nothing
333:04 - but our search data all right now let's
333:08 - save it and now let's click on this
333:11 - search see how first we getting the
333:14 - result so we getting all the result
333:15 - based on this so this is our city name
333:18 - if I now change this one to
333:20 - Bangalore and now let's click on search
333:23 - so now we are getting based on bangaluru
333:25 - so now you will be basically getting the
333:28 - obviously this is happening very very
333:29 - fast first still what we are going to do
333:31 - we will be swing some kind of loader
333:33 - until unless we're getting the data back
333:36 - and that is pretty simple what we can do
333:38 - simply uh here before calling the API
333:42 - we'll make this set loading as true all
333:45 - right and then once we'll get the data
333:48 - so we'll do if data is true then we'll
333:51 - do set loading as
333:54 - false and we'll do set weather data as
333:58 - this data
334:01 - that's it and if something goes wrong
334:04 - then we we will basically make this one
334:06 - as false in the catch block that's it so
334:09 - now let's see what is happening with
334:11 - this
334:13 - loading so now if I now go back now
334:17 - refresh this
334:18 - page will be getting false now let's
334:21 - click on something let's say daily then
334:24 - I click on search true and then false so
334:28 - for sometime it is coming true so it is
334:30 - in the loading phase then we are getting
334:31 - the data so that is the reason it is uh
334:34 - false again so this is done now another
334:37 - thing what we need to do and that is on
334:39 - page load also we need to get some kind
334:41 - of data so now what I'm going to do for
334:44 - now we'll give some static city name
334:47 - that will obviously whenever you load
334:49 - the page it will give you the data based
334:51 - on that City so to achieve that what we
334:53 - can do you can simply take use effect
334:56 - now this is a dependency that will run
334:58 - on the page load if we pass empty
335:00 - dependency here and then what we can do
335:03 - we can simply call this Fetch with the
335:05 - data and here I'm going to pass this on
335:08 - as Bangalore so that means every time we
335:11 - load this page it will basically face
335:13 - the data based on this Bangalore City
335:16 - now here we can if I now log this wether
335:18 - data now let's go back you can see that
335:21 - we are getting now based on bangaluru so
335:23 - each and every time load this page it
335:24 - will give you the data based on that so
335:28 - this is done so now next thing what we
335:30 - need to do now we need to basically
335:31 - create our weather component so the
335:34 - first thing uh here uh we'll do
335:37 - something like this if loading is true
335:40 - so we'll show some kind of message that
335:44 - the data is in loading Fage so so
335:47 - something like loading or else we going
335:49 - to write our jsx so here we'll take a
335:54 - div all right now inside this we'll take
335:57 - another
335:58 - div
336:00 - and we'll give a class name let's make
336:03 - this our name as uh city
336:06 - name and here I'm going to take a h2 tag
336:10 - now here what we'll do we'll basically
336:13 - check if this wether data is present so
336:17 - we are going to render the name so I
336:20 - think we are having this name here so
336:22 - this is the name and also you're going
336:24 - to render the continum so continum will
336:27 - be weather. SS do country all right so
336:31 - here I'll do this is name then comma
336:34 - we'll take a span here and here I'm
336:37 - going to check if this weather data true
336:40 - do sis dot uh
336:44 - country that's
336:45 - it now let's save it let's see what is
336:48 - happening so you're getting bang Lulu
336:50 - and this is the uh okay this is this
336:53 - message that we need to
336:56 - remove now let's type here London and
337:00 - let's search so now we are getting
337:02 - London GB and then also if you notice we
337:05 - also getting the loading uh for very
337:08 - small amount of time so this is fine now
337:11 - next thing what we will do so after this
337:14 - we'll take another D here and here we'll
337:18 - give a class name of
337:21 - date and here uh we'll take a
337:25 - span and we are going to create a
337:27 - utility function and this will be G
337:30 - current date all right so let's quickly
337:34 - create this one so for this one what we
337:36 - can do uh let's create one function this
337:39 - will be function gate current
337:43 - date sorry this will be date so here
337:46 - we'll do simply return new date and then
337:50 - we'll do two local date string we are
337:54 - going to pass en us and we have to
337:58 - basically pass some of the properties so
337:59 - we can pass weekday as long then we have
338:03 - to pass month we'll pass this one as
338:07 - long and day we are going to do as
338:11 - numeric all right and here also
338:16 - same I think we are using some different
338:19 - name so this will be get current date
338:21 - all right so now let's save it so now
338:24 - we'll be getting our current date so
338:26 - this is fine now next thing what we are
338:28 - going to do we are going to render this
338:31 - temperature so we'll be getting this one
338:33 - from weather. m.
338:37 - temperature all right so here what we
338:39 - can do so after this we'll take another
338:43 - div sorry this will be div and
338:49 - here so we are going to render this will
338:52 - be
338:53 - weather data dot
338:58 - Main do
339:00 - temp all
339:02 - right now after this we'll take another
339:06 - paragraph and this will be our
339:09 - description so let's give this one as
339:12 - description so description will be
339:15 - getting
339:17 - from uh I think we are having so here
339:21 - weather and then this is our description
339:24 - so what we can do we can simply check
339:26 - something like if weather data and
339:31 - then with the data of zero then with the
339:35 - data of 0
339:37 - dot
339:39 - description or else this will be
339:42 - empty all right now let's see what we
339:46 - getting let me just save
339:52 - it I
339:54 - think let me just change this one to
339:57 - London search
340:00 - all right we are not getting anything
340:02 - here all right so the pro problem is
340:05 - basically here we have to basically
340:06 - check dot weather of zero so this will
340:09 - be weather data and and weather data dot
340:15 - weather and
340:18 - and weather data do weather of
340:22 - zero and this will be wether data of
340:26 - with the zero do description now this
340:28 - should come all right so now this is
340:30 - coming so now next thing what we'll do
340:32 - we'll take another div here so after
340:34 - this P we'll take another
340:37 - div all right so here we'll give a class
340:40 - name so we'll give this one as weather
340:43 - info and here uh what we can do we can
340:47 - simply take one
340:51 - div and inside this we'll take another
340:57 - div and we'll take a p here and let's uh
341:02 - display the speed here so speed we will
341:06 - be able to
341:08 - see so you have to go to
341:11 - wind weather. wind. speeed all right and
341:16 - also we have to basically render the
341:19 - humidity so I think humidity will get
341:21 - from here from the mean so what you can
341:24 - do you can simply give a class name so
341:27 - you'll give a class name of wind and
341:30 - we'll do here weather info do
341:34 - wind do
341:36 - speed and here we'll take another p and
341:41 - we'll make this one as wind
341:44 - speed all right and now let's copy
341:48 - this and we'll paste it here
341:51 - again and here we'll make this one as
341:55 - humidity and this will be weather do
341:58 - Main
341:59 - dot uh this will be
342:03 - humidity all right and this will
342:08 - be
342:10 - humidity and I think this is fine now
342:12 - let's save
342:14 - this so you're getting all the data here
342:17 - all right this is wind speed and this is
342:20 - humidity now you have to style this so
342:23 - now let's go to our uh CSS file so the
342:27 - first thing what we'll do is start with
342:29 - our main app uh class which is basically
342:33 - this one so here we'll do dot app and
342:37 - here we'll do text align as Center we'll
342:40 - do margin as 50px
342:46 - auto0 we'll do width as
342:49 - 90% we'll do Max width as 700 PX we'll
342:54 - do border radius as 20
342:58 - PX uh we'll do height as 470
343:02 - PX we'll do padding as 20 PX 15
343:07 - PX and we'll do background as this one
343:11 - so this will be RGB 0a 255 comma
343:18 - 166 let's save it let's see awesome so
343:22 - now this is looking nice so now
343:24 - let's uh start with our weather uh comp
343:29 - component so the first thing we'll start
343:30 - with this city name so we'll do this one
343:33 - as dot CT
343:37 - name so we'll do margin bottom as
343:41 - 10px next we'll do uh we also have a
343:45 - loading class here so let me just take
343:47 - another loading
343:49 - here so this will be our DOT
343:53 - loading and here we are going to do this
343:55 - on a font size as
343:58 - 60px all right and we'll do font weight
344:02 - as Bolder and then also we do color as
344:06 - black this is done now next we'll do our
344:10 - date so for date we'll do font size as
344:13 - 18 PX we do font weight as 500 and we'll
344:19 - do font
344:22 - style as
344:25 - EIC so now let's save this let's see how
344:29 - this is looking all right so this is
344:32 - fine now next what else I think we also
344:37 - have C date this is done we also have to
344:41 - take this temperature so we'll do class
344:46 - temperature we'll do temp
344:50 - only all right so here we'll go here and
344:53 - we'll do do imp so we'll do font size as
344:57 - 64 PX
344:59 - we'll do color as
345:02 - black we'll do font weight as bold and
345:07 - we'll do text align as
345:11 - Center let's see all right now next uh
345:17 - we are having weather description let me
345:20 - just
345:21 - check I think we having only description
345:25 - so this will be do description so here
345:27 - we'll do color as
345:30 - black all right font size will do how
345:33 - much 22
345:35 - PX font weight
345:39 - 500 margin top 0 PX and margin bottom
345:46 - 20px let's
345:48 - see all right and after that uh what
345:52 - else we are having weather info which is
345:55 - our main rapper class okay so we'll do
345:59 - do weather
346:02 - info so here we'll do display as
346:05 - Flex we'll do justify content space
346:09 - evenly we'll do align items as
346:13 - Center we'll do margin top as 20
346:16 - PX padding as 0 PX
346:20 - 20px we'll do font
346:23 - size uh as 20px we do font
346:27 - weight bold and also we do text
346:32 - align Center all
346:35 - right now we'll do uh
346:39 - let's do one thing uh let's go here
346:43 - let's take some class name for this also
346:45 - this will be
346:46 - column something like
346:48 - that and also for this
346:51 - one so we'll do dot
346:55 - column and we'll do uh display Flex
346:59 - align items
347:02 - Center we do uh what else we'll do line
347:06 - height of 1
347:09 - PX let's save it let's
347:12 - see all right I think this is looking
347:15 - nice so this is
347:17 - fine now let's refresh
347:20 - this so now the first thing is that
347:23 - we'll give some name here uh let's say
347:25 - Mumbai let's search so getting based on
347:28 - Mumbai for sometime we are also getting
347:30 - the loading state if I give
347:34 - Bangalore so we getting based on
347:36 - bangaluru if I give something else let's
347:38 - say what else New
347:42 - York we are getting New York so
347:45 - everything is working fine so I think
347:47 - that's all for this particular project
347:49 - and this is a very very small project
347:51 - obviously but obviously you will learn a
347:53 - lot of things the first thing you learn
347:54 - that how you can create components very
347:57 - basic level how you can use the
347:59 - components the child components in the
348:01 - parent component and then import the
348:02 - same and also how to use the use State
348:05 - and also obviously the API call so
348:07 - that's all all for this particular
348:09 - project now in the next project we will
348:11 - be basically creating a RP application
348:14 - now that will also will be not very
348:15 - advanc level project but obviously that
348:17 - will be harder than this one so see you
348:20 - in the next project good luck all right
348:22 - everyone so this will be our second
348:24 - mid-level project so this will be food
348:26 - recipe application in this project Al
348:28 - we'll also learn how you can integrate
348:31 - react router Dom so you'll be able to
348:33 - search some recipes and based on that
348:36 - you'll be basically getting the data
348:37 - from API and then you'll be having the
348:39 - details page also and here you'll be
348:42 - able to add this one and in this page
348:45 - this will be updated here so you can see
348:47 - that this is updated if I try to add
348:49 - something else so it will go to the
348:51 - homepage I'll add here and let's add
348:54 - this one so you can see that this is
348:55 - updated let's go to
348:57 - homepage and let's see if I try to add
348:59 - here this will be updated so this is
349:02 - another uh thing that we are going to
349:04 - another very simple project that we are
349:06 - going to build so so mainly uh the
349:08 - reason is because what we are trying to
349:10 - do here here we are not only obviously
349:12 - we will be getting the data from API but
349:14 - here we are having multiple pages so
349:16 - this will also give you some idea how
349:18 - you can work with Dynamic routes how you
349:20 - can Implement react router Dom so this
349:21 - is the main idea or basically the main
349:24 - objective to implement this particular
349:26 - application so let's start working on on
349:28 - this full recipe application all right
349:30 - everyone so let's start with our uh
349:32 - second project and this will be
349:33 - basically recipe application so I
349:36 - already created one uh project and for
349:38 - this one we are going to use delin CSS
349:41 - and also uh for this particular
349:43 - application as you already discussed
349:45 - that will be having basically multiple
349:48 - pages so we need to implement routing so
349:51 - for this one we are going to install
349:52 - react router Dom so I'll do npm install
349:57 - react router
350:00 - Dom also uh we have to basically install
350:04 - tawin CSS now tawin CSS is basically
350:06 - utility CSS framework and here basically
350:10 - what you have to do you just have to
350:13 - basically write some predefined classes
350:16 - that tnd team already created and based
350:18 - on that it will basically automatically
350:19 - apply those Styles in that particular
350:22 - HTML element if you have already used
350:25 - this one uh previously then it is nice
350:28 - if not then also it is fine it is very
350:30 - very easy to use so let's see how we are
350:33 - going to basically use this TCS so the
350:35 - first thing is that you have to create a
350:36 - react project that I already have done
350:39 - now next thing uh you have to install
350:40 - this T Inc as a DA dependency so that is
350:43 - the reason it is showing here minus D so
350:45 - I'll just copy this one and then here
350:49 - let's uh paste it so now this will
350:52 - basically install this one as a de
350:53 - dependency and after that what you need
350:55 - to do you have to basically init uh this
350:59 - uh Tailwind CSS so it will basically
351:01 - create a configuration file so this is
351:02 - the configuration so now I'll copy this
351:06 - second now I'll run this one and you can
351:08 - see that it will create a uh file here
351:12 - so this is our tawin configuration file
351:14 - now whatever configuration that you will
351:15 - be writing based on uh this Tailwind you
351:18 - will be writing here so you will be
351:20 - basically able to extend some of the
351:22 - theme you'll be able to add uh plugins
351:25 - and also you have to pass the content
351:26 - that which content you want to to
351:28 - basically access for this particular
351:29 - application now because we are using the
351:31 - react so react generally accepts you can
351:34 - see that it is JS jsx TS if it is a
351:38 - typescript project or TSX so this one
351:40 - you have to basically pass so I'll copy
351:43 - this one and then I'll pass it
351:46 - here all right so that means now twin
351:49 - config will understand okay we are using
351:51 - uh this extension which can be either JS
351:53 - or jsx TS or TSX let me minimize this
351:57 - and at the end of this what you need to
351:59 - do you to use this base utility in our
352:01 - main index. CSS file which is basically
352:04 - our root CSS file so I'll just copy
352:07 - this and then I'll go to our index. CSS
352:11 - and then just paste it here all right so
352:14 - now what it will do it will basically
352:16 - apply all the base uh classes components
352:19 - and the utilities that whatever we are
352:21 - having related to this tement and you
352:23 - are good to
352:24 - go all right so that's all now next
352:27 - thing what we are going to do first we
352:29 - will be basically implement the routing
352:31 - now basically you'll be having three uh
352:34 - pages so the first or landing page will
352:36 - be where we'll be searching the recipe
352:38 - name and we'll be basically getting the
352:40 - list of recipes and on click of that it
352:42 - will go to the recipe Details page and
352:44 - also on click of uh that particular
352:47 - recipe we will be able to add that
352:49 - recipe into our favorite section all
352:51 - right so now let's do one thing to
352:54 - implement the routing the first thing
352:55 - what we need to do as we already uh
352:58 - install the react router Dom so react
353:00 - router Dom will give you a main wrapper
353:03 - that you need to basically wrap your app
353:05 - component inside the reper so that you
353:07 - will be able to consume all the react
353:09 - router Dom react router functionalities
353:12 - so for this one what you need to do
353:14 - first you have to import something from
353:17 - react router n and this component is nam
353:21 - as browser router now this is basically
353:24 - a router for uh used for use uh browsers
353:27 - and basically this will be work as a
353:31 - wrapper for this particular application
353:32 - and you have to do it or else it will
353:34 - basically give you error so now what
353:36 - I'll do I'll just wrap uh this browser
353:40 - router and then place this app inside
353:42 - this browser router that's
353:45 - it all right now next thing what we are
353:47 - going to do we will basically uh let's
353:50 - do one thing let's create our pages so
353:52 - I'll create another folder here and
353:54 - let's give this on name as pages so here
353:56 - I'll create three more folder one will
353:58 - be our home and then one will be our
354:06 - details all right and one will be our
354:11 - favorites all right now here let's
354:14 - create our index. jsx so this will be
354:18 - our export default function this will be
354:23 - home and here I'm going to return here
354:27 - div and this will be our home let's copy
354:30 - this or let's copy this one only and
354:33 - then I'll place it here and also here so
354:37 - now this will be our
354:40 - favorites and this will be our
354:43 - favorites and this will be our
354:48 - details and this will be our details all
354:51 - right so we are having basically three
354:53 - pages now so now what we'll do we'll go
354:55 - to our main app.js and and here we need
354:58 - to basically implement the routing all
355:01 - right so the first thing is that what we
355:03 - can do we have to basically import uh
355:06 - the main routes wrapper now because we
355:10 - are using the route uh react router Dom
355:12 - version six I believe so you can see
355:15 - that this is
355:16 - 6.19 previously we are using this one as
355:18 - a switch the component that I'm going to
355:20 - use but now they have basically change
355:22 - some of the functionalities so the first
355:24 - thing is that we have to import that
355:25 - wrapper from uh react router Dom and
355:29 - this name as
355:32 - routes all right you can see that this
355:34 - is basically a container which will Nest
355:36 - all the route elements this is the first
355:39 - step also you need the to represent the
355:42 - each and every individual route or
355:44 - basically each and every Pages we need
355:46 - route component also all right now let's
355:49 - remove all of this from
355:51 - here now what I'm going to do here let's
355:55 - uh we already having this D let's remove
355:57 - this class we don't
355:59 - need and inside this now I'm going to
356:02 - use one
356:04 - div now here we are going to use the
356:07 - tailin
356:08 - classes so here we'll give this one as
356:11 - mean height of
356:13 - screen we'll give a padding of
356:15 - six we'll give a BG of white we'll give
356:19 - text Gray 600 and also give text as
356:24 - large now inside this we will be having
356:27 - our nap component now this will be a
356:29 - common component so what I'm going to do
356:31 - inside this Source I'll create one
356:33 - folder and this will be our components
356:36 - and here let's create our nabar all
356:39 - right so this will be index. jsx so this
356:44 - will be our naar component or basically
356:45 - header component so here I'll do export
356:48 - default function and this is our naber
356:52 - all right now let's return here this div
356:56 - and this will be our Napp
356:59 - so napar component will be common for
357:01 - all the pages so that is the reason we
357:03 - are going to Simply import this napar
357:05 - component here now after this uh
357:09 - whatever content we'll be having that
357:11 - will basically differ Bas on different
357:12 - pages right so home will be having
357:14 - different content favorite will be
357:16 - having different and same for details so
357:18 - to switch from one page to another page
357:20 - the first thing what you need to do you
357:22 - have to basically use this routes
357:23 - wrapper and inside this you have to use
357:26 - each and every individual
357:28 - uh route so here I'll use three route
357:30 - because we are having three pages one is
357:32 - home favorites and details so I'll copy
357:35 - this one and paste it three times now
357:37 - here you have to pass some of the props
357:39 - so the first thing you have to pass the
357:41 - path so this will be our SL path and
357:44 - here you have to pass the
357:46 - element so here I'm going to import our
357:49 - home component so you're having home
357:52 - component let me check the name so this
357:56 - is home only
358:01 - all
358:02 - right now same goes for this one so let
358:05 - me just copy this one so this will be
358:08 - our favorites component so this is
358:11 - basically the path name and here this
358:13 - will be our
358:20 - favorites okay we are not getting any
358:23 - let me just
358:24 - check so we have to import this one
358:29 - so this will be our
358:33 - favorites from favorites and also we'll
358:36 - be having our
358:38 - details from our Details page that's it
358:43 - so this is our favorites and next we'll
358:45 - be having a details now details is
358:48 - basically a dynamic page that means for
358:51 - each and every recipe item the item id
358:53 - will be different so for this one how we
358:55 - are going to do that so we'll do
358:57 - something like this we'll do here let's
358:59 - say recipe item SL and to denote a
359:04 - dynamic value in uh in this path name
359:07 - what you need to do you to use this
359:08 - colon and then you have to pass the ID
359:10 - so that means this is basically denoting
359:12 - that this value can be a dynamic it can
359:14 - be anything 1 2 3 4 5 6 whatever all
359:17 - right and here again we are going to use
359:19 - the element so here I'm going to use
359:21 - this details
359:23 - component and that's it so this is all
359:26 - about the uh um routing structure that
359:29 - we need so if I now go back and you can
359:32 - see that now we are getting home because
359:33 - we are currently in the slash route all
359:35 - right because we have given the slash
359:37 - here for home if I now go to SL
359:39 - favorites so let's go to slash favorites
359:44 - so you're getting favorites here if I
359:46 - now go to slash let's say recip item
359:49 - slash one so that means this is a
359:51 - dynamic value so now now this would go
359:54 - to The Details page all right now if I
359:57 - not check this one to let's say four
359:59 - you'll be getting the same result
360:01 - because this value can be anything so
360:03 - this is a dynamic Details page so that's
360:06 - all about the routing functionality that
360:08 - we need now next thing what we going to
360:10 - do first we'll implement this NAB
360:12 - because nabard will be a common
360:13 - component and after that we'll be start
360:15 - working on the API integration all right
360:17 - so let's start working on the uh nabar
360:19 - component so the first thing let me just
360:22 - close everything so what we'll do we'll
360:24 - remove this one from here and we'll
360:26 - return a nav
360:28 - element and here I'll use this class
360:30 - name now I'm not going to explain each
360:34 - and every class Name by the name of it
360:36 - you will be able to basically know if
360:38 - you have some basic idea on CSS so we
360:40 - are going to use flex this will be
360:43 - justify between item
360:46 - Center py that means padding top and
360:49 - bottom of eight we'll use a container
360:53 - class MX
360:55 - Auto Flex call
360:58 - for large we'll do Flex
361:02 - row all right we'll do gap of five and
361:06 - for large you'll do gap of
361:11 - zero all right now inside this I'm going
361:14 - to take H2 and let's give a name like
361:17 - food recipe now anything you can give
361:20 - here whatever you like now here I'll use
361:23 - a class name so we do text 2 XL and font
361:28 - semi
361:30 - bold let's format and save this let's
361:33 - see okay now after this uh I'm going to
361:37 - take one form here and here I'm going to
361:40 - take a
361:42 - input now here type uh this will be
361:46 - text then we'll give a name so let's
361:50 - give this name of
361:51 - search then we are having placeholder so
361:54 - we'll give it
361:55 - enter items something like
361:59 - that and then I'll give a class name
362:02 - here so we'll do here BG of white divide
362:06 - by 75 we'll do p of 3 PX of 8 we'll do
362:12 - rounded full outline none for large
362:17 - we'll do W of 96 we'll do Shadow
362:23 - large we'll do
362:25 - Shadow red
362:28 - 100 we'll do
362:31 - Focus
362:33 - Shadow
362:34 - red 200 all
362:38 - right this is fine now next what I'm
362:41 - going to do so you also need here value
362:43 - and um onchange property but for now
362:46 - this is fine but let's save it now let's
362:49 - see how this is
362:51 - looking all right so now this is fine
362:54 - now next thing what we are going to do
362:56 - so after this form we take another uh
362:59 - here
363:00 - e and here I'm going to use sorry this
363:03 - will be e here I'll use a class name of
363:07 - flex gap of
363:10 - five now inside this I'll take
363:14 - Ai and here I'm going to use the nav
363:17 - link from react router Dom now the first
363:20 - I need home and here we need to pass the
363:23 - two property so here I'll pass a two
363:26 - property I want to go to the slash route
363:30 - and here I'll use a class name so Lo
363:32 - text as black for hover sorry we need to
363:37 - do text as black for hover we are going
363:42 - to do text uh gray 700 and we'll do
363:48 - duration of 300 all right this is
363:54 - fine now next thing uh let's copy this a
363:58 - from here and I'll use the same one
364:01 - because we also need another section and
364:03 - that will be our favorite so I'll use
364:05 - her favorites and this will go to/
364:07 - favorites
364:09 - section also what we can do we can uh
364:13 - use nav link here also so let me just
364:17 - use the same here so this will also go
364:21 - to the food
364:24 - recipe
364:26 - okay
364:27 - now let's format this let's save it
364:30 - let's see what we getting all right so
364:33 - you're getting middle we are having
364:35 - input home and favorites if I click here
364:38 - it is going to home if I click here it
364:40 - is going to favorites if I click here it
364:43 - is going to the homepage and this is
364:45 - very simple uh nabar now as I already
364:49 - told you multiple times when I created
364:51 - this uh video this full video is
364:54 - basically created in such way that
364:59 - now as I already told you multiple times
365:01 - before that the main objective of
365:03 - creating this particular video is for
365:05 - the reactj beginner developers so that
365:08 - you you guys who don't have much
365:10 - experience on reactj so that you'll be
365:11 - able to Gras all this concept very
365:13 - easily that is the reason whatever
365:15 - project that I have chosen in this full
365:18 - course or basically full video this
365:21 - projects will be very very simple all
365:23 - right now don't expect too much
365:24 - complicated CSS or very large amount of
365:26 - Cs is because the prime objective of
365:29 - this particular video is to learn how
365:31 - you can apply react Concepts and create
365:33 - multiple different kind of projects with
365:35 - a minimal uh styling or basically
365:37 - minimum minimal use of CSS all right so
365:40 - that is the reason we are not going to
365:41 - use much
365:43 - CSS so this is all about the nap section
365:45 - that we need in the next video what we
365:47 - need to do we have to handle this input
365:49 - and then whenever I'll enter something
365:51 - we have to basically call the API and
365:53 - based on that we'll be getting the list
365:54 - of recipes here so let's work on this uh
365:58 - particular functionality in the next
365:59 - part all right everyone so now let's
366:01 - start uh handling this input form so for
366:04 - this one what we're going to do so there
366:06 - are two ways we can manage the state
366:07 - either we can create a context or we can
366:10 - basically manage uh in this app.js and
366:12 - then we have to basically pass uh all of
366:15 - these as a prop to each and every
366:17 - individual component all right so let's
366:19 - do one thing let's create our first
366:20 - context so in this um project only or
366:23 - basically most of the projects we are
366:25 - going to create a context and that that
366:27 - is basically more cleaner way to manage
366:29 - your state so what I'll do I inside this
366:33 - Source I'll create another folder and
366:34 - let's give this on name as context and
366:37 - here I'll create index. jsx now the
366:40 - first thing is that what you need to do
366:42 - first you have to create the context and
366:44 - then you have to basically provide the
366:46 - context and then you have to consume the
366:47 - context or basically state from the
366:49 - context first I'll do I'll create the
366:51 - context so this will be export const
366:54 - let's give this one name as Global
366:55 - context and this will be create context
366:59 - and here you have to basically give the
367:00 - default value or basically the initial
367:02 - value which will be null all right now
367:04 - what I'll do I'll just do here export
367:08 - default uh this will be export default
367:10 - function this will be our Global State
367:14 - now this Global state will receive the
367:15 - children now children is basically all
367:17 - the nested components that you are
367:19 - having in this particular
367:21 - application so this will be our children
367:24 - and here what we need to return We to
367:26 - basically return Global context now this
367:28 - context will give you this provider now
367:30 - this provider will basically provide the
367:32 - state and then you have to basically
367:34 - consume the state from this context and
367:37 - here you have to basically pass the
367:38 - children now this is very very easy to
367:40 - do all right now how you will be able to
367:43 - access this so in a root component you
367:45 - have to basically Wrap This Global State
367:47 - inside your app component as simple as
367:49 - that so let's go to our index.js and
367:53 - here what we can do we can simply import
367:56 - uh Global state here and you have to
367:58 - paste it here so that means what you are
368:00 - doing basically here you are um uh sorry
368:04 - you are basically accessing this app
368:05 - inside This Global state so whatever
368:07 - state you are managing from this context
368:09 - you will be able to access in this app
368:11 - component Now app component is basically
368:13 - at the is the combination of all the Ned
368:15 - components that you are having all right
368:18 - now here what I'm going to do first I'll
368:20 - create our first it and this will be our
368:22 - search
368:24 - panm and this will be set
368:27 - search Parn and this will be use state
368:31 - of empty all right but how you are going
368:34 - to pass this state to your context so
368:36 - what you need to do you have to copy
368:38 - this both so this is aate variable in
368:40 - the uh set State method this provider
368:43 - will take a value property and this will
368:45 - be object and here you will be able to
368:47 - basically pass this uh value or
368:50 - basically the state in in this context
368:54 - so now what we need to do we have to
368:55 - basically go to a na
368:57 - because here we are having this input
368:59 - all right now here let's say you are to
369:01 - basically give the value and the on
369:02 - change so what you need to do to
369:05 - basically consume this from your context
369:07 - in this component so what we need to do
369:10 - first we have to basically
369:12 - take use context hook now this basically
369:16 - will accept a context object and this
369:18 - will basically return the current
369:20 - context value and from there you will be
369:21 - able to basically get the state values
369:24 - or basically the methods so I'll take
369:26 - use context and here you have to
369:28 - basically pass the context so in our
369:30 - case the context is basically This
369:32 - Global context that we have created so
369:35 - here we'll do Global context now here
369:37 - now what we need to access you will be
369:40 - able to access all of these so now let's
369:42 - say I want to access both search for and
369:44 - the set search for so I'll copy this and
369:47 - I'll pass it here so that means what we
369:48 - are doing from this Global context using
369:51 - this hook we are accessing this uh
369:54 - parameters now what we can do we can
369:56 - simply pass the value property which
369:57 - will be our search PM and on change here
370:01 - I'll take event and here what we can do
370:04 - we'll simply do set search Pam equal to
370:08 - event. target. value and this is
370:13 - done now let's see if I now log this
370:16 - search param
370:17 - here sorry so if I log this search P I'm
370:21 - here let's see what we getting so I'll
370:23 - go
370:24 - back now let's go to our console let's
370:27 - I'll type something here my name so you
370:29 - can see that we are getting the updated
370:31 - name here all right so now what we need
370:33 - to do we are getting the uh whatever
370:36 - user is typing here so if I now click
370:38 - enter I need to basically call the API
370:40 - and based on the app to basically list
370:41 - the list of recipes based on what user
370:44 - has entered here so let's do that in the
370:47 - next part all right so now what we need
370:49 - to do on submit of this form we have to
370:51 - basically get this search param value
370:52 - and then based on that you have to call
370:54 - the
370:54 - API all right so now what we can do uh
370:58 - let's do one thing let's take one on
371:00 - submit here and this will be handle
371:04 - submit now this one we are going to
371:06 - basically receive from this context only
371:09 - now let's save it now what we'll do
371:12 - we'll basically create this method here
371:13 - so this will be asnc function handle
371:16 - submit and here we are going to
371:18 - basically pass this handle submit
371:21 - method now here what we'll do we'll
371:23 - basically take a try block here we'll do
371:26 - catch
371:28 - and we'll just log this error here so
371:31 - here what we're going to do this will be
371:33 - const response AIT F and here we have to
371:37 - basically call this uh URL so here what
371:41 - we'll do we basically copy this path and
371:45 - then you'll paste it here now here uh
371:48 - along with this you have to basically
371:50 - pass the search value now this search
371:52 - value will be basically I hope for now
371:55 - we'll be getting this is basically this
371:56 - search F whatever we are entering that's
372:00 - it now this will be const data this will
372:03 - be AIT race. Json now let's log this uh
372:08 - data here let's see what we are
372:11 - getting all right now let's save it now
372:15 - here what we'll do we'll basically type
372:17 - something like banana and let's hit
372:20 - enter all right another thing we need to
372:23 - do we have to basically take our event
372:25 - here and and we'll do here event.
372:29 - prevent uh
372:31 - default all right so now let's see so
372:35 - now here we'll type for uh Apple hit
372:39 - enter and we getting the data here so
372:42 - you can see that we are getting success
372:44 - status data and inside this we're
372:46 - getting recipes awesome so now what we
372:48 - need to do to basically take a state and
372:50 - then you have to save this recipes and
372:52 - we have to basically render the list of
372:54 - recipes in this component so let let's
372:56 - do that in the next part all right so
372:58 - now let's do one thing uh here we will
373:01 - take another state so the first thing
373:03 - we'll uh take our loading State also I
373:05 - think this also we have done in the
373:07 - previous uh projects so we'll basically
373:09 - check until unless the API is getting
373:11 - loaded so we'll show some kind of loader
373:13 - so this will be use state of false and
373:16 - we'll take another state here and this
373:18 - will be our recipe
373:19 - list set recipe list and this will be uh
373:25 - used Straight of Mt now what we are
373:29 - going to do we will basically check here
373:32 - uh that if data
373:35 - dot so what we are getting so we are
373:38 - getting here let me just check we having
373:40 - data do data do recipes so if data dot
373:46 - data dot
373:48 - recipes so we are going to basically uh
373:51 - do here this data do data do is also
373:57 - you're going to make the set loading as
374:01 - false and also we'll do set search param
374:04 - as empty so you're going to basically
374:07 - empty this search uh or reset this
374:10 - values whatever we are typing here
374:13 - that's it if there are any kind of error
374:15 - so what we'll do we'll do the same thing
374:17 - we'll reset this one and also make the
374:19 - set loading as false all right now this
374:23 - is done now next thing what we'll do uh
374:26 - so first let's see what exactly we are
374:28 - getting in this so if I now log this
374:32 - loading and recip list let's
374:37 - see so we'll be getting empty for now
374:39 - but let's type something here let's hit
374:44 - enter and we getting here you can see
374:47 - the 22 results all right so now what we
374:50 - need to do to basically render this list
374:52 - of
374:53 - recipes what we'll do first thing we
374:56 - will will pass this uh
374:58 - loading and also this recipe list
375:02 - here all right now let's save it so now
375:06 - this recip list will will be receiving
375:09 - in our home component so we'll go to
375:10 - this home component here now we'll
375:13 - understand the advantage of using
375:14 - context so from any component you will
375:16 - be able to basically manage the state
375:18 - globally now here what we'll do we'll
375:20 - basically take our recip list so we'll
375:23 - do uh use context and this this will be
375:26 - of global context all right uh so let me
375:30 - just import it I think we can go to this
375:34 - component and let's copy this and paste
375:37 - it
375:42 - here
375:44 - okay so here we'll receive our recipe
375:47 - list and also receive our loading all
375:51 - right that's it now here what we are
375:54 - going to do uh we'll take a class name
375:57 - so we'll do a class name we'll do py of
376:00 - 8 we'll do container we do MX of Auto
376:05 - we'll do Flex Flex WP justify Center and
376:11 - we'll do gap of
376:17 - 10 all right now inside this uh what we
376:20 - do we'll basically check if this recip
376:22 - list and and recip list do length
376:25 - greater than Z zero so we going to
376:27 - render or else this will be
376:29 - null and here uh what we will do
376:32 - basically we will just map it and we'll
376:34 - create another recipe component so
376:37 - inside this uh component I'll create
376:40 - another folder and this will be our
376:42 - recipe uh recipe list something like
376:46 - that all right so here will be index.
376:49 - jsx and this will be export
376:54 - default function this will be recipe
376:58 - list and here I'll return here div or
377:02 - let's make this one as recipe item not
377:05 - recip
377:07 - list so this will be recip item and here
377:11 - I'll return recipe item now here what we
377:15 - will do recipe list. map so here I'm
377:19 - going to just render this recipe item
377:22 - component and I'll pass this item as a
377:26 - prop to this
377:28 - component so we'll copy this and this we
377:32 - are going to receive it
377:34 - here another thing what we can do we can
377:37 - basically check if loading is true so
377:39 - you're going to return something like
377:41 - div and this will be
377:44 - loading please
377:46 - wait that's
377:49 - it all right now here uh instead of
377:52 - showing null we can do another thing uh
377:55 - if that is no recipe that means if the
377:57 - length is zero so show something like
377:59 - nothing uh nothing to show please search
378:02 - something or something like that so
378:04 - we'll take another paragraph here we'll
378:05 - do nothing to
378:08 - so please
378:11 - search something and here I'll use a
378:14 - class name so we'll do
378:17 - large text for Xcel do
378:22 - text Excel will do text
378:26 - Center we'll do text black and we'll do
378:30 - font
378:32 - Bolder extra
378:36 - Bolder all right now let's save it let's
378:38 - see what is happening now awesome so now
378:41 - we're getting nothing to so please
378:42 - search something if I now search
378:46 - something so you're getting 1 2 3 4 how
378:48 - many items are there that we are getting
378:50 - if I saw Apple so getting more items if
378:54 - I saw something else let's say m go we
378:57 - are getting the data here so now we have
378:58 - to basically start working on this
379:00 - creating the structure so that means
379:02 - this is working fine all right so now
379:04 - let's do one thing uh let's go to this
379:07 - uh recipe item component now here what
379:10 - we'll do we'll keep it very simple so
379:13 - you're receiving single recipe here so
379:15 - let's take a class name so we'll do this
379:18 - one as
379:19 - Flex Flex call W8 we'll do overflow
379:25 - hidden
379:26 - we'll do p of five we do BG white ided
379:30 - by 75 we'll do sadow Xcel we'll do gap
379:35 - of five we'll do border uh we'll do
379:39 - border
379:40 - two uh we'll do
379:44 - rounded uh we'll do rounded to XEL we'll
379:48 - do border
379:51 - white all right let me just remove this
379:55 - now inside this we'll take another
379:58 - div we'll take a class name we'll do
380:01 - height of 40 we'll do Flex justify
380:05 - Center L overflow hidden item Center and
380:11 - we'll do rounded
380:14 - Excel all right now here I'm going to
380:16 - take a image so we are going to render
380:19 - The Source here so this will be our item
380:22 - this item that we are receiving dot we
380:25 - this will give give us item uh sorry
380:27 - image URL also we going to use all this
380:30 - will be our
380:31 - recip item and class name will do block
380:35 - and W uh
380:38 - full that's it let's save it let's see
380:42 - what we
380:44 - getting awesome so you're getting the
380:46 - result here you can see
380:48 - that now next thing uh what we can do
380:51 - sof this uh we'll take another div here
380:56 - uh inside this will take a span sorry
380:59 - this will be
381:00 - span and here I'm going to render this
381:05 - item dot
381:09 - publisher and here we are going to use a
381:11 - class name so Lo text as Lo
381:18 - text uh how much
381:20 - 700 is fine and we'll do font medium
381:24 - let's save it let's see
381:29 - see I think we have done something
381:32 - [Music]
381:35 - wrong okay this is
381:39 - wrong okay now next uh what we'll do uh
381:43 - we'll take another A3 and here I'm going
381:46 - to render item dot
381:50 - title all right and here we'll use a
381:52 - class name we'll do font bold
381:56 - uh we'll do text 2
381:59 - XEL we'll do
382:02 - tranet text
382:04 - black that's it and after this we are
382:08 - going to import link from RE router Dom
382:12 - and here we'll be showing something like
382:14 - recipe
382:17 - details and here we'll basically have to
382:19 - give two now here it is very important
382:21 - now where it should go it should go to
382:23 - the dynamic uh page that we have created
382:26 - so how we are going to do this we'll do/
382:28 - recipe item slash and here we have to
382:32 - basically pass the ID of this item so
382:35 - this will be item.
382:37 - ID all right and here we are going to
382:40 - use this class name so we'll use uh text
382:43 - SM P of three and padding PX of 8 we'll
382:48 - do rounded
382:50 - large uh we'll do
382:53 - uppercase we'll do font
382:56 - medium we'll do
382:58 - tracking wider we'll do inline block
383:03 - we'll do sadow
383:05 - medium we'll do BG black and we'll do
383:09 - text as
383:13 - white that's it let's save it let's see
383:18 - all right this is fine let's take a
383:20 - margin top of
383:23 - five awesome so this is looking very
383:25 - nice and if you notice if I now click
383:27 - here it will go to the dynamic P so
383:29 - let's say click here see now it is going
383:31 - to this page and this is the ID if I now
383:34 - go back click here this is now different
383:37 - ID if you noticed if I click here this
383:40 - is now different and now type something
383:43 - here so you're getting related to Apple
383:46 - all right and
383:49 - uh uh let's say search for mango so now
383:53 - we're getting related to mango so this
383:56 - is working fine now what we need to do
383:58 - basically on click of this whenever
384:00 - we'll go to this Details page we have to
384:02 - get this ID and once we'll receive this
384:05 - ID based on this ID you have to again
384:07 - call the API and then you have to
384:09 - basically render the details here so
384:11 - let's do that in the next part all right
384:12 - so let's start uh working on this
384:14 - Details page so how we are going to do
384:17 - so on click of this first it is going to
384:19 - The Details page so let's go to this
384:20 - Details page now what we need to do we
384:23 - basically need to extract this ID from
384:26 - this
384:27 - URL how we are going to do that so for
384:29 - this one we will be importing one Hook
384:32 - from De router
384:33 - Dom all right so let's go here so now
384:36 - let's do one thing here I'll take const
384:39 - params equal to use params now this
384:42 - params will basically give you sorry
384:45 - will give you all the details if I now
384:46 - log this params
384:48 - here let's see what is happening if I
384:51 - now go back let's refresh this
384:54 - page
384:56 - now I'll open console let's search
385:02 - something all right now if I click here
385:05 - see we are getting ID now this ID is
385:08 - basically the Val the par name and the
385:11 - this is the value now from where this is
385:13 - coming this is coming from this ID name
385:16 - that you have given here this is the
385:17 - dynamic value so now this is pretty
385:19 - simple so what you can do you can take
385:21 - use effect here and then we can
385:23 - basically call the API but before that
385:25 - let's do another thing so we go to our
385:27 - context and I'll take another state here
385:31 - so this will be const recipe
385:35 - details dat data set recipe details uh
385:41 - data and this will be equal to UST state
385:45 - of
385:46 - null now I'll copy
385:49 - this and then we'll pass it
385:52 - here let's format this
385:55 - now go to our Details page and here
385:58 - first we are going to import this one
386:00 - from our context so this will use
386:02 - context of global context all right so
386:06 - now we'll do use
386:09 - effect and
386:12 - here uh what we'll do we will basically
386:15 - uh create a method here so let's create
386:17 - aing method Asing function
386:20 - get
386:21 - recipe
386:23 - details and here here we will create
386:26 - this one so this will be const response
386:28 - equal to
386:29 - AIT F and we are going to use the same
386:33 - URL that we are using there will be some
386:36 - difference so let me first copy this
386:40 - sorry copy this paste it here so only
386:45 - difference will be after recipes we have
386:47 - to basically pass the ID so here we'll
386:50 - do recipes slash and here we to pass the
386:53 - ID this ID will be basically this params
386:56 - do ID so you remember we are getting
386:59 - this params do ID so what we'll do we
387:01 - can simply destructure this ID from this
387:04 - params and then we'll basically pass
387:06 - this ID here and this is done now we'll
387:09 - do const data equal to AIT response.
387:14 - Json and now let's log this data here
387:18 - and let's see what you're getting now
387:21 - let's save it so you're getting some
387:23 - error params is not defined fine so let
387:25 - me remove
387:26 - this so now if I now go
387:29 - back uh let's search for
387:34 - something and now let's say if I click
387:38 - here all right we are not getting
387:41 - anything I think the reason is because
387:43 - what we can do we can basically give
387:45 - this ID as a dependency here now this
387:47 - would work oh sorry my bad we have to uh
387:52 - basically invoke this method sorry now I
387:55 - think this should work awesome so now
387:57 - this is working although if you give
387:59 - this ID as a dependency then also it
388:00 - should work but on if you give empt
388:03 - dependency also this would work fine I
388:05 - now let's say go back uh let's say try
388:08 - for this one so you're getting the data
388:10 - here all right so now this is pretty
388:14 - simple so what we can do we can
388:15 - basically check here if this data do
388:19 - data is true so we do set recip details
388:22 - data is equal to data Dot
388:25 - data that's it all right so now we have
388:29 - to basically uh render the uh jsx
388:32 - structure so now the first thing what we
388:34 - can
388:35 - do
388:37 - here let me just cut
388:40 - it so we return one
388:42 - div let's take a class name so here I'll
388:46 - do
388:47 - container this will be MX
388:50 - Auto py of 10 look
388:55 - grid grid calls of one for large you'll
388:59 - do
389:01 - grid Columns of two and we do gap of
389:06 - 10 now inside this we'll take a div
389:09 - we'll take a class name we'll do this
389:11 - one as row start two for large we'll do
389:15 - row start
389:18 - Auto and here we are going to basically
389:20 - render the image so we'll do another
389:23 - div we'll give a class class name so
389:25 - we'll do height of
389:27 - 96 we'll do overflow as hidden we'll do
389:32 - rounded Excel and we'll do as
389:37 - group now inside this we'll take
389:41 - image so we do source which will be
389:45 - our recipe details data do image
389:52 - URL and here we are going to take a
389:54 - class last name so we'll do W full
389:58 - height full we'll do object cover block
390:04 - we'll do here uh we'll do a take a group
390:09 - hover and we'll do a scale of
390:13 - 105 and we'll do a duration of
390:18 - 300 let's save
390:23 - it let's see what is happen happening
390:25 - let me just refresh
390:28 - this all right we are not getting
390:31 - anything let me just log it here let's
390:33 - see what is happening
390:38 - here so what we are getting in this
390:40 - recip details data all right so we have
390:43 - dot recip here okay now I got it so what
390:46 - we need to do we have to do dot here dot
390:51 - recipe now this would
390:53 - work awesome now you can see that this
390:56 - scaling is also happening and if I now
390:59 - go back search for
391:02 - something and let's say if I click here
391:06 - so now getting the different data if I
391:09 - click this one we getting the updated
391:11 - data here all
391:12 - right this is fine now next uh what we
391:16 - are going to do so after this we'll take
391:19 - another div here we'll take a class name
391:22 - we'll do Flex uh we'll do Flex column
391:26 - and gap of
391:28 - three here we'll do a
391:31 - span and here we'll do recipe details
391:35 - data do
391:36 - recipe dot
391:40 - publisher all right and let's use the
391:43 - same styles that we are using here so
391:45 - for this one also we'll use the same
391:47 - let's copy
391:49 - this and we'll paste it
391:51 - here and also we'll do the same thing
391:54 - for this this one also the title so
391:56 - we'll copy this one and after that we'll
391:59 - paste the same
392:02 - here let's save it let's see what we
392:05 - getting all right so we have to change
392:06 - this on item is not defined so we'll
392:10 - just replace this
392:13 - one okay so you're getting the name uh
392:16 - this is fine now next uh what we are
392:19 - going to do here uh let's take another
392:22 - div
392:23 - here
392:25 - so this is our main
392:29 - div okay after this or let's take it
392:33 - here so we'll take another div
392:37 - here and here we'll take a
392:39 - button and this will be our save as
392:47 - favorites okay and here we'll take a
392:50 - class name so we'll do a p of
392:53 - three ex off I think for this one also
392:57 - you'll use the same class name let
392:59 - me uh let me write it down we'll do
393:02 - rounded large I'm very lazy of writing
393:04 - this much CSS to be honest text SM then
393:08 - we are having upper case
393:12 - font
393:14 - medium then we are having
393:17 - tracking
393:18 - wider we'll do a margin top of three
393:21 - we'll do inline
393:23 - block
393:25 - we'll do sadow as medium we'll do BG
393:29 - black and we'll do text as uh
393:34 - White that's
393:36 - it all
393:38 - right now let's save
393:40 - it for let's see first how this is
393:43 - looking okay so you're having save as
393:46 - favorites this is fine now what else we
393:48 - can do so we can also render the
393:52 - ingredients so after this div
393:55 - let's take another div
393:57 - here so here I'll take a span and we'll
394:00 - do
394:03 - ingredients all
394:05 - right so here let's take a class name we
394:08 - do text 2 XL font semi
394:13 - bold all right text
394:17 - black now after this span we'll take
394:23 - e we take take a class name and here
394:26 - we'll do Flex Flex column gap of three
394:31 - and here we are going to basically
394:33 - render the ingredients so this will be
394:34 - recipe uh details dot recipe dot uh here
394:40 - to do ingredients
394:45 - ingredients do map this will be
394:50 - ingredient and here I'm going to render
394:53 - AI
394:55 - all
394:56 - right now inside this we'll take a span
395:01 - here and let's render the
395:06 - ingredient dot
395:13 - quantity sorry this will be
395:16 - Dot and then we'll give a space and this
395:19 - will be
395:21 - ingredient uh dot unit all
395:25 - right and after this span we'll take
395:28 - another span here and we'll render
395:31 - ingredient dot
395:35 - description all right let's format
395:38 - this uh what else for this one also we
395:41 - use the same class name so we copy this
395:45 - one and we'll use here and also here
395:50 - sorry what I have done sorry not here to
395:53 - do it here
395:55 - let's
395:56 - see okay so now we are getting all of
395:59 - this that these all are the ingredients
396:02 - this uh you will be able to save as
396:04 - favorites if I now go back uh let's say
396:07 - I'll click on this one so now we're
396:11 - getting the updated data if I click this
396:14 - one we are getting the data
396:16 - here let's see if I search for
396:21 - mango and let's click here so now we're
396:24 - getting related to Mango and this is
396:26 - working fine so now next thing what we
396:28 - need to do on click of this basically we
396:29 - have to store this in our favorite
396:31 - section so that one we going to do in
396:33 - the next part all right so let's start
396:35 - working on this favorite functionality
396:36 - so the first thing is that what we are
396:38 - going to do we'll go to our context and
396:40 - then we'll take another state here and
396:42 - this will be our favorites favorite list
396:46 - favorites
396:47 - list and set
396:51 - favorite list and this will be us state
396:54 - of Mt
396:56 - ARR now let's copy
396:59 - this uh or let's do one thing we can do
397:02 - another thing
397:03 - here we can create a method here and
397:06 - this will be handle add to
397:11 - favorite and this will basically receive
397:14 - the current
397:16 - item
397:17 - okay so if I now log this here let's see
397:21 - what is happening so I'll just copy this
397:24 - sorry I'll just copy this method handle
397:26 - add to favorite and I'll pass in our
397:29 - context now we'll go to our Details page
397:32 - and here you can see that we are having
397:33 - this save as faites this is the button
397:36 - so here on click of this we will
397:39 - basically call this method so now we'll
397:42 - do on click and here we'll basically
397:45 - invoke this method and we'll pass this
397:48 - recipe item details. recip as a
397:51 - parameter which is basically our current
397:53 - item
397:54 - I hope you're getting if I now save this
397:57 - now let's go
397:59 - back now let's go to console if I now
398:02 - click here see now we getting the
398:05 - current data here right now here we'll
398:07 - be able to get the ID and based on that
398:09 - we'll be able to see whether this item
398:11 - is already added in the favorites or not
398:13 - as simple as that so now we can go to
398:17 - our context and now what I'll do the
398:20 - first thing is that uh we'll do copy uh
398:24 - favorite uh favorites list and this will
398:28 - be our
398:30 - favorites now we'll do we'll check the
398:32 - index so we'll do here copy favorite
398:35 - list do find index and we'll do item if
398:40 - this item. ID is equal toal to get
398:43 - current item. ID that means whether the
398:46 - item is already present in this array or
398:48 - not if index is
398:51 - minus1 that means the item is not
398:53 - present so we'll do copy favorite list.
398:56 - post and we'll PST this current item
399:00 - else what we need to do we'll do copy
399:03 - favorites and then we'll just splice
399:05 - this index that means we'll remove if
399:06 - the item is already present and at the
399:09 - end we'll just do set favorite list
399:10 - equal to copy favorite list now let's
399:13 - log this favorite list and let's see
399:15 - what we are
399:17 - getting so now if I now go back here so
399:21 - we are getting empty click here so one
399:24 - item is there if I now again click you
399:27 - can see now this is empty again so that
399:28 - means this is now removed okay so now
399:32 - what we can do we can pass this favorite
399:34 - list in our context so this is the first
399:37 - step and we are already having this
399:39 - favorite component so what we going do
399:42 - in this home component the structure
399:44 - that whatever we are having this will be
399:46 - similar exact similar to here so what we
399:49 - can do we can simply copy this whole
399:53 - part from here
399:55 - and then you can simply paste it here
399:58 - now there are some changes we need to do
400:00 - so the first thing is that this will be
400:02 - favorites list instead of recipe list
400:06 - loading is not
400:08 - required and here this will be favorite
400:11 - list and here we will show nothing to
400:14 - added uh nothing is
400:16 - added nothing is added in
400:19 - favorites that's it and this is done if
400:24 - I now save this so you're getting some
400:27 - error recipe item is not defined let me
400:29 - just import this one so now this is fine
400:33 - again we are getting some error Global
400:35 - context is not defined and use context
400:38 - is not defined okay so now let's say if
400:42 - I now click here let's go to our
400:45 - favorites we are getting one favorite
400:47 - here let's go to our home all right wait
400:50 - because we not storing this one in any
400:53 - store or basically in database that is
400:55 - the reason but this is fine now let's
400:57 - click on here click on save to favorites
401:00 - go to favorites we are getting two let's
401:02 - go to home go
401:04 - here click here go to favorites we are
401:07 - getting
401:08 - three all right let's click on this
401:12 - one click
401:14 - here and you can see that we are getting
401:17 - this one for items now one thing we need
401:19 - to do basically if I now click here we
401:21 - have to because this is already added so
401:23 - so if you see banana cookies is already
401:25 - added so it show here remove from
401:27 - favorites so how we are going to do that
401:30 - so let's copy this favorite list and
401:34 - then uh what we can do go to our
401:37 - details so first thing we'll basically
401:40 - take from here and then we'll go to our
401:43 - button and here basically what we'll
401:46 - do we'll simply check that uh what we
401:50 - can do so we do here
401:52 - favorites all right
401:54 - um dot so we'll do find
402:00 - index and here we'll do item so we do
402:03 - item do ID is equal to equal to this uh
402:08 - recipe Item recipe. ID so that means if
402:11 - that this is already present or not if
402:14 - this is not equal to equal to minus1 so
402:17 - that means this is already present so
402:19 - this will be remove from
402:21 - favorites or this will be add two
402:27 - favorites that's it so now let's format
402:31 - this and here we can do something like
402:34 - if this
402:36 - length now do length is greater than
402:42 - zero let's save it let's see what is
402:44 - happening so now getting removed from
402:46 - favorites because banana cookies is
402:48 - already present now let's go to our home
402:51 - so let's click on this Banana Foster
402:54 - so now this is coming add to favorites
402:55 - if I now click here now remove to
402:57 - favorites go to here Banana Foster if I
403:01 - now go
403:02 - back let's click here add to favorite if
403:06 - I now go back this is now removed all
403:08 - right so now obviously this is not like
403:11 - a very big project but this will give
403:13 - you a idea that how you can work with
403:15 - routing how you can create multiple
403:17 - Pages how you can create context and
403:19 - manage Global State and also lot of
403:21 - other functionality also obviously what
403:23 - we can do we can see use very easily
403:25 - basically store this one in in a
403:27 - database so that on page refresh this uh
403:30 - doesn't like if I now refresh this page
403:32 - obviously this data will not be there
403:34 - but this is fine because this is a
403:35 - static website this will definitely help
403:37 - you to understand lot of things now
403:39 - let's do one thing let's go to our home
403:41 - another thing whenever we type something
403:43 - here let's navigate to the homepage so
403:46 - this is one very important thing that uh
403:48 - come to my mind so what we can do simply
403:52 - uh something like let's go to our uh
403:55 - where we can go
403:59 - context so here uh we'll do const
404:04 - navigate equal to use
404:07 - navigate and whenever we'll enter here
404:10 - we'll navigate to the
404:13 - homepage so this is another important
404:15 - thing so now let's say if I type
404:18 - something here
404:20 - Apple let's go to our Reb details add to
404:24 - favorites go to favorites now let's say
404:26 - type something here banana so it's going
404:29 - back to this page all right now click
404:32 - here add to
404:34 - favorite let's go here click
404:39 - here uh search for
404:42 - mango click
404:45 - here this is coming now let's click this
404:50 - one all right let's go back one
404:54 - more so now this is
404:57 - added if I now go back remove this one
405:01 - this is now removed all right so that's
405:03 - all for this particular video now see
405:05 - you in my next video now in the next
405:07 - video we are going to create many more
405:08 - uh very interesting project see you in
405:10 - my next video till then good luck and
405:12 - peace hey everyone so let's start
405:14 - working on our shopping cart application
405:16 - so in this application the only
405:18 - difference will be here we are going to
405:20 - use Redux toolkit so this is the
405:22 - speciality of this particular project so
405:24 - this is very very simple as you can see
405:26 - we will be fetching the data from the
405:27 - API where we'll be getting the list of
405:29 - products from fake store API then on
405:32 - click of this this will be added to cart
405:35 - now if I go to cart obviously this will
405:36 - be added and this amount will be updated
405:39 - now you may think that this is a very
405:40 - simple project but actually for a
405:42 - beginners or if you think about from
405:45 - interview perspective this is not a
405:47 - simple project if they give you two
405:48 - hours to code this one you have to do it
405:50 - in that time so let's if I go here and
405:53 - then add this one also so you can see
405:56 - that this is updated if I try to remove
405:58 - this will be updated so for this one I
406:00 - have chosen Tailwind CSS and Redux
406:01 - toolkit for this particular project so
406:04 - that in case you face or basically
406:06 - interfere will ask you that whether you
406:08 - have worked with Redux or not so this
406:10 - project will definitely going to help
406:12 - you so let's start working on this
406:13 - particular project all right everyone so
406:15 - let's start working on our shopping cut
406:17 - project so first thing you can see that
406:18 - I already created one project here so
406:21 - here first we will be basically
406:23 - installing all the dependencies that we
406:24 - need and also we need to install
406:26 - Tailwind CSS because that one we are
406:28 - going to use for our
406:30 - styling so first we'll start with tellin
406:33 - CSS so to install what you need to do
406:36 - you have to basically install as a dep
406:37 - dependency so you're going to copy this
406:40 - and then we'll paste it
406:43 - here so once this will be installed then
406:45 - we have to basically in it and then we
406:47 - have to give some the some of the
406:49 - configuration that you need for this
406:51 - particular project all right so this is
406:53 - done now let's init this one so if I do
406:56 - npx in it so it will basically create a
407:00 - uh file here for the
407:02 - configuration and then what we need to
407:04 - do basically we have to give this
407:06 - content that we are using because we
407:08 - using react so this will be either JS
407:10 - jsx TS or TSX so you'll copy
407:14 - this and let's go here and then we'll
407:18 - paste inside this content and the last
407:21 - step will be we have to import this base
407:23 - Utilities in the index. CSS so go to the
407:27 - index. CSS and we are going to paste it
407:31 - here that's it so this is all the
407:34 - configuration that we need for the
407:35 - Tailwind SES and now coming to the uh
407:38 - packages so we are going to use Redux
407:40 - toolkit so the first thing we need to
407:42 - install Redux
407:44 - j/
407:47 - toolkit all right next we need react
407:51 - Redux we need react
407:54 - icons we also need react router
407:59 - Dom and also you're going to use another
408:01 - one that will be react loader
408:04 - spinner so this is basically to S any
408:07 - kind of uh loading State and I think
408:10 - that's
408:11 - it all right so
408:13 - now let it uh be installing so now we'll
408:17 - do one thing let's quickly create all
408:19 - the components and the pages that we
408:22 - need
408:23 - so first I'll be creating a Pages folder
408:26 - and then I'll be creating a components
408:29 - folder and then I'll be creating another
408:32 - folder and this will be our store so
408:34 - store is basically our Redux store so
408:37 - here we will be creating all the slice
408:39 - and our main configuration for the
408:41 - store all right now what else we need so
408:45 - inside this page we basically need two
408:48 - pages so one will be homepage and one
408:50 - will be a cart page so in the homepage
408:52 - we'll be getting the list of I think I
408:53 - already showed you in the demo we'll be
408:55 - getting the list of products and in the
408:57 - cart page we'll be showing how many
408:59 - products we have added in the cart so
409:01 - I'll be creating two pages here so I'll
409:03 - create home.
409:04 - jsx and then I'll be creating card.
409:08 - jsx so let's quickly create the
409:11 - components uh sorry the pages first and
409:13 - then we'll be uh first uh uh
409:16 - implementing the react router Dom or
409:17 - basically the
409:18 - routing so let me just close everything
409:21 - so here let's create this cart
409:25 - component so function this will be our
409:31 - cart and we are going to return some div
409:34 - for now and this will be our
409:38 - card let's save it let's create our
409:40 - homepage so this will be export default
409:43 - function this will be
409:45 - home and we are going to return here div
409:49 - and this will be our
409:51 - homepage all right right now we need to
409:54 - import this one in our app.js now
409:57 - because we need to switch from one page
409:59 - to another page so we definitely need
410:01 - react router D basically routing
410:03 - functionality so the first thing first
410:05 - thing what we need to do you have to
410:07 - import the browser router here and let's
410:10 - do one thing let's remove this react.
410:11 - strict mode this we don't
410:14 - need and here I'm going to import
410:17 - browser router from react router Dom and
410:21 - then I'm going to paste it this this app
410:24 - here that's it now let's go to our
410:27 - app.js now let me just remove everything
410:30 - from
410:31 - here let's remove this class name also
410:34 - now here what we need we basically need
410:36 - the routes so we'll import routes from
410:39 - react rout them so this will work as a
410:42 - switch all right now here what we are
410:45 - going to do the first thing is that we
410:46 - will be having a common napar component
410:48 - so let's say I'll be having a nap bar
410:50 - here so this will be my napar
410:53 - and then inside this we need to create
410:55 - all the routes so for now we are having
410:57 - only two pages so we'll create two route
410:59 - so we'll import
411:01 - route and here I'll give
411:05 - exact and here I'm going to use a path
411:08 - which will be slash and I'll be passing
411:11 - element which will be basically our
411:13 - component this is our home
411:15 - component so let's copy
411:18 - this and here we need card and this will
411:22 - go to to the card
411:25 - page let's save it now let's remove this
411:28 - logo so now let's go to this page so you
411:33 - can see that we're getting naar home if
411:35 - I try to go to/
411:38 - card so going to the cart page and abar
411:40 - is basically common for both the uh
411:43 - pages so this is working fine so now
411:45 - what will be our next step so next step
411:47 - will be let's implement this napar
411:49 - component first or basically the header
411:51 - component so we go here so you're having
411:54 - this reusable components so inside this
411:56 - component I'll be creating a folder so
411:58 - let's create the folder and let's give
412:00 - this on name as we'll give this one name
412:02 - as a header only and inside this I'll
412:05 - create index.
412:06 - jsx all right so now let's quickly
412:09 - create this so this will be export
412:11 - default function
412:14 - header now let's return a
412:20 - div so this will be D
412:24 - leave all right inside this so let's
412:29 - take a uh we'll do another thing we'll
412:31 - take a nav
412:33 - here and we'll give a class name here so
412:35 - we'll give
412:36 - Flex items Center
412:40 - justify between height of 20 we give Max
412:45 - W 6xl and MX of
412:50 - Auto inside this we are importing link
412:54 - from react router
412:56 - Dom and here in this link component we
412:59 - have to give a two property so it will
413:01 - go to the slash or basically the
413:03 - homepage on click of this inside this
413:06 - I'll take another div let's take a class
413:09 - name we'll take a margin left of
413:12 - five and inside this I'll take H1 and
413:15 - let's give this one name as react
413:18 - Redux shopping
413:21 - card and here I'm going to use a class
413:24 - name so we'll give text uh red 900 font
413:31 - bold we'll give text transparent L to
413:36 - text Excel we do for SM we'll do
413:40 - text uh 2
413:42 - XEL for MD we'll do text 3 XEL we'll do
413:47 - cursor
413:48 - pointer and we'll do
413:51 - tracking wide uh tracking wider or let's
413:56 - make this one
413:58 - wide let's format this let's save it now
414:02 - we are going to import this header
414:04 - component in our
414:05 - app.js so here we'll import this
414:10 - header let's save
414:14 - it let's see what is happening all right
414:17 - so we are getting this one so here what
414:20 - we can do we can also I think this is
414:23 - fine for now uh now after this link so
414:27 - let's go to our header component so
414:30 - we'll take another
414:33 - div and here we'll take a class name
414:38 - we'll make this on
414:39 - Flex uh we'll do
414:42 - list I think this is not required we'll
414:44 - do item
414:45 - Center we do space X of uh let's make
414:50 - this one six we do text Gray
414:56 - 800 all right and we'll do font semi
415:00 - Boldt inside this we'll take another
415:04 - link so this will again will be
415:07 - two
415:09 - slash and here what we'll do we'll take
415:12 - a paragraph and we'll make this one as
415:15 - home or let's do one thing let's make
415:18 - this one as a
415:20 - ul and we'll do this one as
415:23 - Ali and here we are going to do a class
415:26 - name uh we will do so for this one I
415:29 - think we need list
415:31 - none for this lii uh we will do a cursor
415:38 - pointer and I think that's fine so we
415:41 - having one home next we will take we'll
415:45 - copy this and we paste it here this will
415:48 - be SL
415:50 - card and
415:53 - here what we can do we'll simply render
415:55 - this card here let's save this and let's
415:59 - see what is
416:00 - happening so we giving uh getting here
416:04 - this is
416:05 - fine but for this one also I think we
416:08 - can have to give
416:09 - list none all right so there was some
416:12 - error actually the Tailwind was actually
416:14 - not applying so I just restart the
416:16 - project so it's now coming fine but I
416:18 - think we are not able to see this text
416:21 - so I think the reason is we have given
416:23 - text
416:24 - transparent uh we don't have to give uh
416:28 - let me just remove this one from here we
416:30 - already using this text
416:32 - here H okay so now this is fine so now
416:36 - next thing what we going to do so now if
416:39 - I click here you can see that it's going
416:41 - to the cart page if I click here going
416:42 - to the
416:43 - homepage and if I click here also it's
416:46 - going to the homepage so now we have to
416:48 - start working on the home component so
416:50 - to First list uh the list of products or
416:54 - whatever that we want to fetch and then
416:56 - after that we'll be start working on the
416:57 - Redux tool kit part so let's get started
417:00 - so the first thing is that let's go to
417:02 - our
417:04 - homepage and or or else we can do
417:06 - another
417:07 - thing or I think for now this is fine uh
417:10 - let's keep this one simple so we'll take
417:12 - uh two State here so one will be our
417:15 - products and another one will be set
417:19 - products and this will be used state of
417:22 - empty array and then we'll be having our
417:25 - pending state or let's make this on
417:28 - loading set
417:31 - loading which will be used state of
417:35 - false and we'll take use
417:40 - effect and
417:42 - here we are going to fet the list of
417:45 - products we'll do fet list of
417:50 - products so this will be syc function
417:54 - Fage list of
418:01 - products this will be const response AIT
418:07 - Fage and here we are going to use this
418:10 - URL which will be fake store API so this
418:13 - is f store
418:16 - api. com/
418:19 - products here we'll be having data
418:22 - again the same thing which will be have
418:24 - it race.
418:27 - Json all right now before this one let's
418:31 - make this set loading as
418:35 - true and
418:37 - here we will do if this data is true so
418:41 - we'll do set loading as
418:44 - false and we'll do set product as this
418:49 - data that's it all right so now the
418:53 - first thing is that let's remove this
418:55 - part from here so we'll check if this
418:58 - loading is true so you want to basically
419:01 - render some kind of uh loader so I think
419:03 - for this one we have already installed
419:05 - this react uh loading spinner so that
419:08 - component only we are going to use so
419:10 - let's do one thing let's take a div here
419:13 - or else let's make this one null for now
419:15 - leter change this and here we'll do
419:17 - class name which will be mean height
419:21 - screen
419:23 - we do W full
419:25 - Flex justify
419:27 - Center and item
419:30 - Center here I going to import these
419:33 - circles from react loader spinner you
419:35 - can go to the official website and you
419:36 - can also check but this is pretty simple
419:39 - you just have to import the spinner that
419:41 - you want to use you to give a height
419:43 - property I'll give this one
419:45 - 120 uh sorry let's make this one like
419:48 - this then we having width I'll take one
419:52 - 20 we'll take a color we'll do
419:56 - RGB 127 comma 29 comma
420:02 - 29 then what else we need we'll do
420:05 - visible as
420:08 - true all right so now let's save it
420:11 - let's see what is
420:14 - happening awesome so you can see that we
420:17 - are getting this
420:19 - one loader and it's working fine so now
420:22 - next thing what we are going to do we
420:24 - have to basically render the list of
420:27 - products so for this one let's create
420:29 - another component inside this and I'll
420:31 - give this one name as
420:32 - product
420:34 - tile and we'll do index.
420:38 - jsx so here let's create export default
420:42 - function this will be our product tile
420:46 - which will receive the
420:47 - product single product basically from
420:50 - the pattern component and here for now
420:52 - I'm going to return a simple div and
420:54 - let's uh return product item uh we'll do
420:59 - this one single product
421:02 - item awesome so now here if loading is
421:07 - false that means we got the data so
421:09 - we'll do a
421:11 - div and here we'll first do a class name
421:16 - we'll do mean
421:18 - height of uh let's make this one as a 80
421:23 - VH we'll do grid we'll do SM grid calls
421:29 - of two for MD we'll do grid Columns of
421:33 - three we'll do space X of
421:37 - five space y of
421:41 - 10 for large we are going to do grid
421:45 - Columns of
421:46 - 4 we'll do Max
421:48 - W 6 XL we'll do MX Auto and we'll do
421:54 - padding of
421:55 - three all right inside this we are going
421:58 - to check if these products that means
422:01 - these products that we are having from
422:03 - the API and and products. length if this
422:07 - is true we are going to render the
422:10 - products or else we'll render null so
422:12 - here I'll do products. map so this is
422:16 - our product item and now what we need to
422:20 - return we need to Simply return this
422:22 - product tile component and here we need
422:26 - to pass this product which will be this
422:28 - product item as simple as that so now
422:31 - format this let's save it let's see what
422:35 - is happening so you can see that we are
422:37 - getting single product item I don't know
422:40 - why this is going on top this part we
422:41 - need to check okay fine first let's see
422:43 - what is happening first let's quickly
422:45 - start working on this component then
422:47 - we'll see if there are any issue in the
422:49 - CSS all right so let's go here here so
422:52 - we go to a product
422:54 - tile all right so now the first thing is
422:58 - that let's remove this we'll take
423:00 - another
423:01 - div and here we'll take a class
423:04 - name what we'll do here we'll do this on
423:07 - Groove Flex Flex column we'll do item
423:13 - Center we'll do border of two we'll do
423:17 - border red 900 we'll do Gap of three
423:23 - padding of four height of uh how much
423:27 - let's make this 360
423:30 - PX margin top of 10 margin left of five
423:35 - and we'll do rounded
423:38 - Excel inside this we'll take another div
423:42 - and here we'll do a class name we'll do
423:44 - height of
423:47 - 180px now here we are going to render
423:50 - image which we will get from this
423:52 - product all right so in this Source we
423:55 - are going to pass this
423:57 - product do image we'll do
424:01 - alt uh which will be product.
424:05 - title we'll do a class name we'll do
424:08 - this one as object
424:11 - cover height of full and width of
424:16 - full let's format this let's save it
424:19 - let's see what is happening
424:23 - okay this is
424:24 - fine this part we need to check why this
424:27 - is coming on top this is weird all right
424:29 - so let's fix this one I think this is
424:31 - coming because of this uh let me go here
424:35 - I think this is because of this space
424:37 - issue here let me just remove this I
424:38 - think this is not
424:41 - required okay so now this is fine so now
424:45 - let's uh add some title and also a
424:48 - button for add to card and then remove
424:50 - item so we'll go to this page so after
424:54 - this image let's do this div and after
424:58 - this we'll take another div here let's
425:01 - take a H1 and we'll just render this
425:05 - product
425:07 - dot title and here we'll give a class
425:11 - name so we'll do sorry we'll do class
425:14 - name for this
425:16 - H1 so we'll do width of 40 we do trunet
425:23 - uh what else we'll do margin top of
425:25 - three do text Gray 8 uh 700 we'll do
425:31 - font bold and we'll do text
425:35 - large let's save this let's
425:38 - see awesome now next uh so after this uh
425:44 - we'll take another
425:47 - div and we'll make this on class name as
425:50 - Flex we'll do item as Center we'll do
425:54 - justify between W full and we'll do Mt
425:58 - of five that means margin top all right
426:01 - now here basically we need to show if
426:02 - the product is already added in the card
426:05 - so we show remove item or else we'll
426:06 - show add to card but because we now
426:09 - haven't created any functionality
426:10 - something like that so for now we'll
426:11 - just add one
426:13 - button and we'll do add to
426:17 - cut and also let's take a class name for
426:19 - this button so we'll do BG red
426:24 - 950 uh we'll do text of white we'll do
426:28 - border
426:30 - of two we'll do border uh no sorry this
426:35 - is fine we'll do a
426:37 - rounded
426:39 - large we'll do font semi bold for this
426:42 - one or let's make this one bold only and
426:45 - then we'll do padding of
426:48 - food let's save it let's
426:50 - see
426:52 - okay this is fine all right so now uh
426:56 - let's do another thing we'll do justify
426:58 - Center instead of
427:01 - between okay so now this is fine all
427:04 - right so now we have render we'll go to
427:07 - card we'll come back here so data is
427:10 - coming so now let's start working on the
427:12 - Redux part so the main idea of this
427:15 - particular project is to that so that
427:17 - you guys have some idea on how to
427:19 - integrate Redux to because I think for
427:21 - now these many projects that we have
427:23 - done so we know how to phase data and
427:26 - also how you can integrate Redux uh
427:28 - sorry reactor out Dom and Implement
427:30 - routing functionality so it this project
427:32 - basically will give you very basic idea
427:34 - of Redux tool kit and now the reason why
427:37 - you should always start with the very
427:38 - basic because even if the project is
427:40 - complicated you will be able to easily
427:42 - do that so that's the reason your basic
427:44 - has to be very very clear now to start
427:46 - working on the Redux part the first
427:48 - thing is that Redux is basically a
427:50 - global store management uh sorry Global
427:52 - State Management Library something like
427:53 - context so you'll keep your state in one
427:56 - place so that you will be able to use
427:58 - this uh State anywhere you want
428:01 - basically so that is the main idea of
428:03 - this so the first thing is that what we
428:05 - need to do now in the Redux the concept
428:08 - is basically you will be creating slices
428:10 - for each and every each and every
428:13 - component or Pages you can say let's say
428:14 - we are having a cart here so we are
428:16 - going to create a cart slices which will
428:18 - consist of the accents and the reducer
428:20 - and your state basically and now we have
428:23 - integrated this sorry we have installed
428:25 - this react Redux uh package so that will
428:28 - basically connect your react application
428:30 - with Redux store and then using
428:32 - different hooks you will be able to
428:34 - basically extract those States from your
428:36 - Redux store so here I'm going to create
428:38 - our
428:40 - index.js sorry this will be
428:44 - index.js and here I'm going to create
428:46 - the store but before that you have to
428:48 - create the slices so I'll create here
428:50 - slice this and inside this uh I'll
428:53 - create another uh let's do one thing
428:57 - let's give a name of card slice. JS all
429:02 - right now how we are going to create the
429:04 - slice so the first thing is that so the
429:07 - process is like first you have to import
429:09 - the create slice method then you have to
429:13 - basically your
429:17 - initialize the initial
429:20 - state
429:22 - so which you will be basically
429:23 - manipulating and then you will be
429:25 - getting the updated State back then
429:27 - you'll be creating your slice using this
429:30 - create slice you have to give a
429:33 - name you will be creating uh you have to
429:36 - basically mention the initial
429:40 - State and you'll be creating all the
429:42 - accents here and at the end you have to
429:44 - import those accents and those accent
429:46 - you will be using in your component so
429:48 - first let's import something
429:53 - from uh Redux toolkit and this is called
429:58 - create
430:00 - slice all right so you can see that this
430:03 - you have to basically
430:06 - use which will generate the accents
430:08 - Creator and accents types that
430:10 - correspond correspond to reducer and
430:13 - your state now I'll be creating my cart
430:17 - slice so here you have to take this
430:20 - create slice
430:22 - and then you to basically give a name so
430:25 - I'll give a name of
430:27 - card you to mention the initial State
430:29 - you can see that it will take anyal
430:31 - state so we'll be creating this one in a
430:32 - minute and now after this you have to
430:34 - create your reducers so for now this is
430:37 - fine and now let's create our initial
430:39 - state so we'll do const initial state
430:43 - which will be empty so this initial
430:46 - State you using here all right now what
430:49 - we going to do we will be simply
430:51 - also here you have to give the reducers
430:54 - which will be object and here you'll be
430:57 - creating all the accents so for now this
431:00 - is fine so now what we going to do we
431:02 - just do export default then you're
431:05 - having this cart sl.
431:09 - reducer that's it all right let's format
431:13 - this let's save it so now we have to
431:15 - basically create our Global store just
431:18 - like we usually create Global uh global
431:21 - Global context so we go to our index.js
431:25 - and here we have to create this store
431:26 - now you obviously will be able to
431:29 - combine multiple slices for now we are
431:31 - having only one slice that is fine let's
431:33 - say we having 100 slice so you will be
431:35 - able to import all the slices in your
431:37 - Global State and that will combine and
431:39 - create a one single uh state so the
431:42 - first thing is that to create this one
431:44 - you have to import something
431:47 - from Redux j/ toolkit which is called
431:51 - configure store all right you can see
431:55 - that now here we are going to create so
431:58 - we do const
432:03 - store which will be configured
432:05 - store and this will basically take a
432:08 - reducer property and here you will be
432:11 - able to combine multiple reducers and
432:13 - this is very very important so now let's
432:15 - say you are giving a name so I'll give a
432:17 - cart as a name so I want to import the
432:20 - cart reducer
432:22 - now you'll see here in this card slice I
432:25 - uh default exported this reducer so I
432:28 - will be able to import this cart
432:32 - reducer
432:34 - from the slices SLC slice so this will
432:39 - be my cart reducer let's see you are
432:40 - having a 100 reducer here so you will be
432:43 - importing your next reducer let's say
432:46 - some dummy
432:49 - reducer from some dummy
432:51 - slice and then you have to give the name
432:54 - here dummy which will be your dummy
432:57 - reducer something like that so like that
432:59 - it will basically combine all of these
433:01 - for now we don't have so we'll remove
433:03 - this one and at the end we are going to
433:06 - do export default this
433:10 - store all right so this is fine so now
433:14 - how you will be able to combine this one
433:17 - or basically use these features of Redux
433:19 - in your react project so the answer is
433:22 - in your index.js if you remember just
433:25 - like we import Global context here you
433:28 - have to import this store in this
433:31 - component and you have to basically pass
433:33 - it in the root level so that you will be
433:35 - able to access all the properties from
433:38 - here but how you are going to do that so
433:40 - to do this one you have to import some
433:42 - component from your react Redux so here
433:45 - basically this react Redux will comes
433:47 - into picture which will combine your
433:48 - react and Redux both together
433:51 - and now I'll do basically cut it from
433:54 - here and this will take a store property
433:57 - which will be your store just now we
433:59 - have created basically this store here
434:02 - and that's it so now let's save it so
434:06 - now this will basically generate your
434:09 - store now what we want to do we want to
434:12 - basically create a functionality that I
434:14 - on click of this I want to add this
434:16 - product uh and then I want to store this
434:18 - product data in my cart slice
434:21 - so let's see how we are going to do that
434:23 - so now to do this one we will be
434:26 - creating method inside this reducer so
434:30 - here so here let's say I want to create
434:33 - add property or let's say do add to
434:38 - cart all right and this will be a method
434:42 - now this will take a state and also it
434:44 - will take accent and now what we want to
434:47 - do we will simply do state which is your
434:50 - current state dopus and I want to add
434:53 - this accent. payload that I'll be
434:56 - passing from this component so this is
434:59 - your one add to cut functionality now
435:01 - how you are going to access this to
435:03 - access this one you just have to export
435:05 - it so we do export con and here this
435:08 - will be cart
435:10 - slice dot accents so this is your one of
435:14 - the accents that you are exporting add
435:16 - to cut so now what you need to do I hope
435:18 - you're getting so this method now you
435:20 - have to call and then you have to
435:22 - basically on click of this button you
435:23 - have to push this data in this array
435:27 - which is your initial State and this
435:29 - will basically give you the updated
435:31 - State
435:32 - back now let's go to our this product.
435:35 - GS component that you have created
435:37 - product tile now here I'll be creating a
435:40 - method so this will be my function and
435:43 - this will be handle add to
435:46 - cart all
435:48 - right now this is the single product
435:51 - that we are having but how you are going
435:53 - to call this method so now this is the
435:55 - point how you're going to call this
435:57 - method from this component so here this
436:01 - uh Hook from this react Redux will comes
436:04 - into picture so this react Redux will
436:07 - give you this particular hook that is a
436:09 - dispatch hook so you have to first
436:11 - import this one from react Redux and
436:15 - this is called use dispatch so this will
436:18 - dispatch a certain acction which will go
436:20 - go to this slice it will check that okay
436:22 - I called this action and it will do the
436:25 - certain functionality here I hope you're
436:27 - getting so now what you need to do first
436:28 - you have to initialize this
436:31 - one so use
436:34 - dispatch now you have to
436:37 - basically so you can see that this will
436:40 - basically dispatch a acction all right
436:43 - dispatch function so here you call this
436:47 - dispatch and you call this add to card
436:50 - from the card slice and then you have to
436:53 - basically pass this payload so you can
436:55 - see that it will take a payload and this
436:58 - can be of any type for now you have to
436:59 - pass this product because this is the
437:01 - current product I want to
437:03 - add that's it now this handle add to
437:06 - cart I will give on click of this
437:09 - button as simple as that now so let's
437:12 - save it let's go to cart slice and let's
437:15 - log this section
437:18 - here and let's see what is happening
437:26 - sorry what is
437:28 - happening let's go to console I'll add
437:31 - this one you're getting a type so this
437:33 - is the type cart SL add to cart because
437:36 - this is the accent name and in the
437:37 - payload you're getting this information
437:39 - if I click here you are getting this one
437:42 - and then you are getting the current
437:43 - product all right so now this will
437:45 - basically update your state so we have
437:48 - added this one to our state but how we
437:50 - you are going to access it so to access
437:53 - this one you have to basically use a use
437:56 - selector hook so that is also from react
437:59 - Redux so you selector will basically
438:01 - give you the updated state from your
438:02 - Redux store all right so let's see how
438:06 - we are going to do that so to do this
438:08 - one first thing is that we'll go to our
438:10 - cart. JS file here and now uh so this is
438:16 - the component let me just so here first
438:19 - thing what if you need to do so the
438:21 - first is basically we have to import the
438:23 - state updated state to get the state
438:26 - what we need to do first I'll show you
438:27 - what we getting in the updated state so
438:30 - you'll use this use selector from react
438:32 - Redux which will basically give you the
438:35 - updated state so here we'll get the
438:37 - state and let me just log this state
438:40 - here if I now save this now let's say
438:45 - I'll add this one let's go to our card
438:48 - so you can see that we are getting three
438:50 - Arrow of three now because this okay one
438:53 - is getting added two time that is fine
438:55 - but you can see that we are getting add
438:56 - of three and the data is updated and if
438:58 - you notice here we are getting a card
439:00 - here because this is the name of the um
439:03 - slides that we have given here so what
439:05 - we can do we can simply destructure this
439:07 - cart from our state so we can simply do
439:09 - here cart so that means we are getting
439:11 - this one from our state so if I now log
439:13 - this cart we'll see that we'll be
439:15 - getting a arrow of three if I now go to
439:18 - home and let's say if I I do add to cart
439:21 - here and let's go to our cart now you're
439:23 - getting four so this is getting
439:26 - updated all right so now here what we
439:29 - going to do we'll take another state and
439:31 - that will be to combine all the total so
439:33 - we'll do total
439:35 - card set total
439:40 - C this will be US state
439:43 - of
439:45 - zero and here we'll take use
439:49 - effect
439:51 - and here we'll keep this cart as a
439:54 - dependency and we'll do set total cart
439:58 - which will be simply cart do
440:02 - reduce and this will be our current and
440:05 - we'll simply add this account plus if
440:08 - you go here you'll see that we getting
440:11 - this price so we'll do uh uh accumulator
440:15 - plus current dot price all right and we
440:20 - can give this zero as initial value
440:23 - that's it so now let's see what we
440:25 - getting the total
440:29 - cut so we getting fors 110 if I go back
440:33 - here let's
440:35 - add this one go to cart so you can see
440:39 - that this is updated
440:40 - now awesome so now we need to
440:44 - basically uh start working on this cart
440:46 - page but before that another very
440:48 - important thing we need to do and that
440:49 - is if this cut is already added this
440:51 - item so we don't have to show add to cut
440:53 - we'll be showing remove to cut and then
440:55 - we we will not be able to basically add
440:57 - it again we have to remove this so first
441:00 - let's complete this functionality then
441:01 - at the end we'll be uh working on the
441:03 - card page so we will go to the product.
441:06 - JS so let's go here which is our product
441:10 - tile and here you can see that we doing
441:12 - handle add to cut so the first thing is
441:14 - that we will be first getting the list
441:16 - of cart items so again we'll do const
441:19 - we'll get cart and we'll get it from use
441:24 - selector all right and now what we are
441:27 - going to do we will basically check so
441:31 - let's come here so we'll check if this
441:33 - cart do sum that means if some of the
441:36 - item are actually
441:38 - present and here we will do this item do
441:42 - ID is equal toal to current item which
441:44 - is our product. ID that means this item
441:46 - is already added so you don't have to
441:48 - add it so here will basically show this
441:51 - one as remove from cart or else this
441:55 - will be add to cart so this is one thing
442:00 - same if this is true so if this is true
442:03 - so we don't have to do handle add to cut
442:06 - we will basically do here handle
442:09 - remove from
442:13 - card or else this will be handle add to
442:16 - cut and now let's create this function
442:18 - so we do function and remove from
442:22 - cart and then we'll uh do log and this
442:25 - will be removed now let's see what is
442:28 - happening if I go
442:30 - back now let me first refresh
442:33 - this okay so now here if I do here so
442:38 - you can see that we're getting removed
442:40 - from card but if I try to add again so
442:42 - it is getting removed so not adding
442:44 - anymore I'll go to cart only one item is
442:46 - added if I do add to cut and go back
442:50 - only two item and this is working fine
442:53 - so now let's start working on this
442:55 - remove from cart functionality so this
442:57 - will be pretty simple so first we'll go
443:00 - to our cart slice and again you have to
443:02 - create another method just like you'll
443:04 - do it in the context so we'll do remove
443:07 - from cart which will take a state and
443:10 - again also the accent and here we are
443:14 - going to return state. filter which is
443:17 - your basically current state and then we
443:20 - are going to do item. ID is not equal to
443:23 - equal to accent do
443:26 - payload that means we are basically
443:28 - filtering the current item on remove so
443:31 - now what we need to do simply we can go
443:34 - to our product tile so here we again do
443:39 - dispatch and then we'll do remove from
443:42 - card sorry we also have to basically
443:46 - import it here export it so now let's go
443:49 - here so we do remove from
443:52 - card now what you need to pass you need
443:55 - to pass a current ID so this will be
443:57 - product. ID that's it so
444:01 - now let's save
444:03 - it so now let's add this one so go here
444:08 - only one item go
444:10 - back now click here again add to cut if
444:13 - I now go back so this is empty and this
444:16 - is working fine so now we have done till
444:18 - this part so now let's start working on
444:20 - our card
444:22 - page so first we'll go to our card.
444:27 - jsx let's close everything else and
444:32 - here we'll first check if this
444:36 - card and and card. length if this is
444:41 - true so we are going to render so we'll
444:44 - take a
444:45 - div or else here we'll show like your
444:48 - card is empty some something like that
444:51 - so we'll show a div and we'll uh let's
444:54 - give a class name here
444:59 - first now let's make this one
445:01 - div we do a class
445:08 - name and here we are going to
445:11 - use we'll do a mean height
445:17 - of uh how much you do 8
445:21 - VH we'll make this one
445:23 - as Flex we'll do Flex column we'll do
445:28 - item as Center and we'll do justify
445:32 - Center all right inside this we will
445:36 - take a H1 and render your card is
445:41 - empty and here we'll add a class
445:46 - name which will be text Gray
445:50 - 800 we'll do font
445:54 - bold we'll do text Excel margin bottom
445:58 - of
446:01 - two that's it and then after this we'll
446:04 - take a link
446:07 - here so we'll do
446:10 - import link
446:12 - from react router Dom so you import
446:18 - link so this will be two it will go to
446:23 - homepage and here I'm going to import uh
446:26 - sorry use a
446:27 - button so we'll do sop
446:30 - now and let's use the same style that we
446:33 - are using here so this one copy this
446:37 - sorry copy
446:39 - this and we'll paste it
446:42 - here let's save it let's see what is
446:45 - happening awesome so if I click here
446:48 - it's going back if I add this one and
446:50 - let's go back so now we have to render
446:52 - the list of cart items all right so
446:55 - first we'll go back here all right so
446:58 - here now we are going to render the list
446:59 - of cart items so we'll take a class name
447:01 - here
447:02 - also and uh this one will
447:05 - do mean height
447:08 - of
447:10 - 80
447:13 - VH we'll do grid we'll do for MD we'll
447:17 - do
447:18 - grid column of two we'll do Max
447:22 - W 6 XL and we'll do MX
447:26 - of
447:28 - Auto all right now inside this we'll
447:31 - take another
447:34 - div we'll take a class
447:38 - name so we'll do Flex Flex column we'll
447:43 - do justify Center we do
447:48 - items uh we'll do items what we can do
447:51 - we'll do
447:53 - items
447:55 - Center and we'll do padding of
447:58 - three now inside this we're going to
448:00 - render the cart items we do card. map
448:03 - this is our
448:05 - card
448:07 - item now we are going to return the cart
448:10 - tile so here I'll create another
448:11 - component and this will be our cart tile
448:15 - let's create our index.
448:17 - JX so this will be export default
448:21 - unction this is our cart tile which will
448:25 - receive the cart
448:28 - item and here I'm going to return a div
448:32 - and this will be our card
448:34 - item so here I'm going to import this
448:38 - cart tile which will take the cart item
448:42 - which will be this cart item here this
448:46 - one that's it all right so after this
448:48 - div
448:53 - so let's do one thing uh here let me cut
448:57 - it so after this div we'll take another
449:01 - div
449:03 - here all right so here what we'll do
449:05 - we'll take another div we'll take a
449:08 - class name and we'll do Flex Flex column
449:13 - we'll do justify Center we do items end
449:17 - do p of five do space y of five and
449:22 - margin top of
449:24 - 14 inside this we'll take a H1 and this
449:26 - will be your
449:28 - card
449:31 - summary all right so let's take a class
449:34 - name here so this will be font
449:37 - bold uh we'll do text large and we'll do
449:41 - text red
449:46 - 800 all right after this we'll take a
449:48 - paragraph
449:50 - inside this we'll take a span and this
449:52 - will be our total
449:55 - items and here we'll take a class
449:59 - name so what we can do we do a text Gray
450:02 - of 800 and font
450:06 - bold all right and here we'll do take
450:10 - another
450:11 - span and this will be our
450:14 - cart cart.
450:17 - length all right
450:21 - so after this
450:23 - B uh we'll take another
450:26 - paragraph and then we'll take another
450:28 - spand let me just copy this from here
450:32 - only so this will be our total
450:37 - amount which will be this total amount
450:40 - that we have
450:41 - created sorry total
450:44 - card and I think that's it so now let's
450:46 - format and save this let's see how what
450:48 - is happening
450:51 - here all right so this is coming below
450:53 - but that is fine that we are going to
450:55 - check first let me just quickly create
450:56 - this so let's go to our
450:58 - home let's add this one let's go to cart
451:01 - we're getting two let's add this one
451:04 - let's go here we're getting three so now
451:06 - let's quickly start working on this cart
451:08 - item or basically cart tile so here I
451:11 - remove
451:13 - this so here we'll take a div we'll take
451:17 - a class name we'll do Flex
451:20 - item Center padding of five we'll do
451:23 - justify between background red we'll
451:27 - make this one as let's make 500 margin
451:30 - top of two margin bottom of two and
451:33 - we'll do rounded
451:35 - Excel inside this we'll take another P
451:38 - sorry div we'll take a class name we'll
451:41 - make this one Flex padding of
451:44 - three and we'll take a image here let's
451:48 - take a source which will be cart item
451:51 - dot this will be our
451:54 - image we'll take a class name we'll do
451:57 - height of
451:58 - 28 rounded
452:01 - large and ALT of uh let's make this one
452:05 - card item do
452:08 - title all right inside this we'll take
452:11 - another
452:12 - div let's make a class name we'll do mL
452:15 - of 10 we'll do self start we'll do space
452:20 - y of five inside this we'll take a H1
452:24 - and we'll render our cart item dot
452:28 - Title Here Also we'll take a class name
452:31 - so we do text Excel we'll do text
452:37 - white and we'll do font
452:41 - bold uh let's format
452:44 - this all right so this is fine now after
452:47 - this we'll render the price we'll take a
452:49 - paragraph and we'll do
452:51 - here sorry cart item do
452:56 - price so we'll take a class name here
453:00 - also we'll do text
453:03 - white and font extra
453:07 - bold awesome then after this we'll take
453:10 - another
453:12 - div or let's do one thing inside this
453:15 - div we'll go to our product tile and I'm
453:18 - going to copy copy this button from here
453:22 - paste it here now on click I do handle
453:27 - remove from
453:30 - cart and this will be remove from cart
453:33 - because here we will not be able to add
453:35 - because this is in the cart page so this
453:36 - will be removed from
453:38 - cart and let me copy this and create
453:41 - this function
453:44 - here that's it so now let's format this
453:48 - and let's save it let's see what is
453:51 - happening
453:53 - okay this is fine let me just check what
453:56 - is happening
453:58 - here okay I think here we can take a
454:01 - display of flex
454:07 - yes sorry this is in which one let me
454:11 - check okay so we'll go to our card
454:18 - page let me do class name of flex
454:22 - here let me reduce this little
454:26 - bit sorry not this one so we go here I
454:31 - think here can make this one as 60 let's
454:34 - see how this is looking you'll make with
454:37 - as 200 PX let's make this one 300
454:42 - sorry yeah so here what we can do we'll
454:46 - take a class
454:47 - name and and we'll do sorry we have we
454:50 - have done mean height here not width so
454:53 - we'll do a width of 300
455:02 - PX so let's
455:05 - see also this one we have to
455:08 - make
455:13 - Center to do justify content
455:17 - Center so this this
455:20 - is I
455:22 - think so here I think we can make
455:24 - justify
455:29 - Center okay let's go to soop now let's
455:32 - try to add this one let's go to
455:35 - cut okay so now this is added here now
455:39 - we have to also work on this remove from
455:40 - cut so now this will be pretty simple we
455:43 - can go to C tile now the first thing is
455:46 - that we have to do dispatch
455:49 - which will be our use
455:52 - dispatch now I think you'll be able to
455:54 - do it so just call this dispatch and
455:57 - then you have to do remove from cart
455:59 - from our cart slice and then you'll call
456:01 - this cart item. ID so this ID you need
456:04 - to pass that's it now let's save it now
456:06 - let's see what is happening if I now see
456:09 - now this is empty if I go here add 1 2 3
456:15 - 4 and five go to cart
456:19 - so you can see that this is updated
456:20 - total item is f don't worry about the
456:22 - CSS this is fine we just have to check
456:24 - the functionality whether this is
456:26 - working or not so now I'll remove this
456:28 - one from here so amount is updated
456:31 - remove this one updated remove this one
456:33 - this one if I remove here cart is empty
456:36 - so now I think that's all for this
456:38 - particular video I hope that you
456:40 - understand how we need to basically use
456:42 - Redux toolkit how to create the accents
456:45 - how you can create a global store and
456:47 - how to create the redu
456:49 - how you can use use dispatch and use
456:51 - selector hook to connect your react and
456:53 - Redux project so I think that's all for
456:55 - this particular project now let's move
456:57 - on to the next one now next one will be
456:59 - our last project and that is a monack
457:02 - Blog application so we'll be creating
457:04 - very simple blog application there will
457:06 - be very very less CSS I'm again
457:08 - explaining uh sorry mentioning this one
457:11 - so the main functionality will be how
457:13 - you can interact with a uh mongodb
457:15 - database and how you can create a full
457:17 - stack project from scratch so let's
457:19 - start working on that particular project
457:21 - all right everyone so let's start with
457:22 - our expense tracker so here you can see
457:24 - that for this particular project we are
457:26 - going to use chakra UI as our CSS
457:29 - utility framework you can say so we'll
457:31 - be having simple onepage application and
457:34 - on the left side you'll be able to see
457:35 - the balance and then you'll be having
457:37 - the expense and the income so and click
457:39 - of this model will uh open and here you
457:42 - will be able to add a income or expense
457:45 - so let's I'll add a income and I need to
457:47 - give the amount I'll choose income I'll
457:50 - add this one so you can see that the
457:52 - balance is now updated so this is a
457:54 - chart that we are going to use for this
457:56 - one we are going to use react Apex
457:58 - charts and then if I add a expense so
458:02 - let's say I add a 500 this will be
458:04 - expense if I add this one so this is
458:06 - updated here this is now updated so here
458:09 - you'll be able to see that how much is
458:11 - the balance so this will be very simple
458:13 - project the main idea is behind that so
458:15 - that you'll be able to use chakra UI if
458:17 - you want to use particularly in your uh
458:20 - like any project that you are currently
458:22 - working or let's say you are giving an
458:23 - interviewer and there is a requirement
458:25 - that they want to know that whether you
458:27 - will be able to use any CSS third party
458:29 - packages or not so this is the main idea
458:32 - so let's start working on this
458:33 - particular project all right everyone so
458:35 - let's start working on our expense
458:37 - tracker project so for this one we are
458:39 - going to use chakra UI uh so the reason
458:43 - is because we are using different
458:44 - different CSS uh packages uh in this
458:46 - whole video so that you'll get idea of
458:48 - each and everything if in case you are
458:50 - facing these things in your interview so
458:52 - the first thing is that you have to
458:53 - install this one I already installed a
458:56 - simple react project so I'm not not
458:58 - wasting any time but by doing all of
459:00 - this from scratch I I hope you're
459:02 - getting this thing so first thing is
459:04 - that we'll do uh let me just paste it
459:07 - apart from this you also need react
459:09 - icons and for this one we also need a
459:12 - chart so we will be using this react
459:16 - Apex charts so this is another another
459:18 - package that we need to install and I
459:21 - think this would be more than
459:23 - enough all right so the first thing is
459:25 - that if you go to this official Doc so
459:28 - here first you have to create this
459:30 - provider so again this provider is kind
459:32 - of like whenever you'll create a context
459:34 - and you'll wrap your application in your
459:36 - context so that you'll be getting all
459:37 - the uh Global state in your child
459:40 - component so this is exactly similar uh
459:43 - like
459:44 - that all right so I think it's still
459:47 - installing before that let's quickly
459:49 - create all the components that we
459:51 - need so we'll create a
459:54 - folder now the first component we need
459:57 - and that is a main
459:59 - component uh we also need a chart
460:03 - component then we also basically need
460:06 - the view component where we'll be
460:08 - showing all the expense and the income
460:10 - so this will be our
460:11 - view uh or let's give this one as a
460:14 - expense view uh something like that
460:17 - expense
460:19 - view uh what else we need we also need a
460:22 - overview
460:24 - component or let's make this on
460:27 - summary summary component and also you
460:30 - need a add
460:33 - transactions
460:35 - component all right I think this is done
460:37 - now let's go to our source and if you
460:39 - see that we basically need to create our
460:41 - base theme for our chakra UI so in the
460:44 - theme what we need to do this will be
460:46 - very very simple so we going to import
460:49 - something
460:50 - [Music]
460:51 - from chrai react and this is called
460:55 - extend theme now here we will be
460:59 - basically creating so we do const theme
461:02 - which will be this extend theme and here
461:05 - I will be passing one that will be our
461:08 - initial color
461:10 - mode which will be
461:14 - light and also you need to pass another
461:16 - one which will be use system color mode
461:20 - and this will be
461:22 - true and at the end we'll do export
461:25 - default
461:27 - theme so this will basically create a
461:29 - simple theme now to use as I already
461:32 - told you we have to basically go to our
461:34 - main index.js component I'll remove this
461:37 - uh strict
461:39 - mode here and then first I'm going to
461:42 - import the provider and that is called
461:44 - the chakra
461:46 - provider and you have to wrap your app
461:49 - inside of this and then here you have to
461:51 - basically pass the theme which will be
461:53 - our
461:54 - theme that's it so this is the very
461:57 - basic structure we need now because we
462:00 - are having so many components and we
462:02 - have to interact with so many different
462:03 - components again for this project also
462:06 - we are going to use a context for our
462:08 - Global State Management if you want you
462:10 - can also use Redux toolkit because we
462:11 - also have done Redux toolkit in one of
462:13 - the projects so you have some idea so
462:15 - I'll create our index. jsx
462:19 - and here first let me quickly create the
462:23 - component so we do export
462:26 - const as I already told you like uh
462:29 - context is one of my favorite uh
462:31 - features in react so I really really
462:34 - like using
462:36 - this and here we'll do export default
462:39 - function Global so we'll do Global
462:47 - state then I'm going to return this will
462:50 - be Global context. provider and I'm
462:54 - going to pass the children that's it now
462:58 - let's save it now we'll go to index.js
463:01 - again and again I'm going to WRA this
463:05 - context so we can wrap it here only so
463:08 - we'll do Global
463:12 - State
463:14 - sorry and then we'll just wrap it here
463:21 - let's save this so this is fine now
463:24 - let's go to our
463:26 - app.js and we will be first creating all
463:29 - the basic structure that we need and
463:31 - after that we'll be start working on the
463:33 - functionality and thank God in this
463:35 - project will not be doing any kind of
463:36 - API call anything this will be very
463:38 - simple one so here I'm going to remove
463:41 - all of these and I remove this one also
463:45 - now because we are using chakra UI so
463:47 - we'll try to use most of the components
463:49 - uh inbu components from Chakra react
463:51 - package only so the first uh we will
463:54 - start with
463:57 - container and inside this I'm going to
464:00 - use a BG so here I'm use this color so
464:04 - this thing I already have actually don't
464:06 - think that I actually know all of this I
464:08 - already have this one I already created
464:10 - this project separately so I'm just
464:11 - taking reference from there
464:13 - only all right and then we are having
464:16 - we'll give a Max
464:19 - W so here we can basically pass
464:23 - container dot
464:26 - 3XL then we'll take a height so height
464:29 - is basically the minimum height which is
464:31 - 100 VH we'll take and we'll pass a
464:34 - padding of zero all
464:38 - right that's it now inside this we'll
464:41 - take a
464:44 - flex we'll make the height as full
464:49 - and inside this we'll take a
464:53 - box and here we are going to import the
464:55 - main component so let's go here let's
464:57 - quickly create something so do index.
465:01 - jsx and here I'll be having export
465:05 - default function
465:08 - Main and let's return something for now
465:11 - we return a de I'm going to remove this
465:13 - one later and this is main so here I'm
465:16 - going to import main component
465:19 - and in this box we'll give a height of
465:24 - full we'll give a flex
465:26 - of five and we'll do a see I'm not uh
465:33 - like explaining each and everything it
465:34 - will definitely take a lot of time so
465:37 - here I'll just divide this one with
465:40 - 20%
465:42 - 30%
465:45 - 20% uh I will do 50% % and we'll do 60%
465:51 - if you over here also you'll get all
465:54 - the uh properties basically so this is
465:56 - the WID property and it is the
465:58 - responsive value that you'll be able to
466:01 - give for each and every resolution so
466:04 - let's save it so now let's see what we
466:07 - getting
466:08 - here so you're getting main here this is
466:11 - fine so now let's close everything else
466:15 - and we'll go to our main component and
466:17 - I'll create the structure here so I'll
466:19 - remove this one let's import a
466:22 - flex and here I'm going to give a text
466:26 - align I'll give this one as
466:30 - Center we'll do a flex Direction now
466:33 - this is actually almost similar to tnd
466:36 - SES
466:37 - also we'll give a PR of five and we'll
466:41 - do a PL of
466:44 - five inside this we'll take another Flex
466:48 - we'll do align
466:51 - items uh we'll do this one as
466:54 - Center we'll do justify
466:57 - content uh we'll do space between and
467:01 - we'll do Mt of
467:04 - 12 here we are going to import another
467:07 - Inu component that is heading from
467:09 - Chakra UI and here we'll pass simply
467:12 - expense
467:14 - tracker and here we'll do a color of
467:18 - uh let's make this one uh
467:21 - blue blue.
467:25 - 400 and we'll do display now again these
467:29 - all are actually the responsive value
467:31 - you have to go to the official Doc to
467:34 - know about more so here we'll make this
467:36 - one the first we'll do none then we'll
467:39 - do
467:40 - block then we'll do
467:43 - block
467:44 - block and we'll do block
467:49 - so now let's format this let's save it
467:52 - let's see what we getting now if you see
467:54 - if I just
467:56 - inspect let's go to very see for a small
467:59 - device it's display none so if I go
468:02 - to
468:05 - here so you can see that we're getting
468:07 - display none for this one display none
468:10 - if I go for larger device it is uh the
468:13 - display block so this is what we are
468:15 - doing here for different different
468:17 - resolution
468:19 - all right now after this heading we'll
468:21 - take another
468:23 - Flex here we'll do uh align
468:28 - items we'll do this one as
468:32 - Center and here we're going to use a
468:36 - button so for this one we'll do this one
468:40 - as add new
468:45 - transaction and here we'll need to pass
468:47 - some of the properties so the first is
468:49 - the BG so here also we do
468:52 - blue uh let's make this one as
468:55 - 500 we'll do a color
468:58 - of
469:00 - black uh we'll do mL of
469:05 - four uh what
469:07 - else I think first let's see what is
469:10 - happening here let's save
469:13 - it okay you can see on H this is
469:15 - changing but although this is looking
469:17 - nice let's make this one uh we'll make
469:20 - this one as
469:22 - 700 and we'll make this one as
469:25 - white but if I keep this one white then
469:28 - it will look odd actually we don't want
469:30 - to add any hover property so let's make
469:33 - this one as keep this one as all to Red
469:36 - only let's
469:40 - see no I think black was
469:44 - good and we'll keep this on a little bit
469:49 - yep yeah I think this is fine okay so we
469:52 - having add new
469:54 - transaction and then after this Flex
469:58 - sorry here we are going to import our
470:01 - overview component so here we'll do
470:03 - overview and after this we'll take
470:05 - another
470:06 - flex and we'll be importing The View
470:08 - component or expense view so let's first
470:12 - create this overview component here so
470:14 - we go to our overview where is that that
470:16 - is our summary
470:18 - so we'll do index.
470:20 - jsx so we do export default function and
470:25 - this will be our
470:27 - summary and I'm going to return here
470:29 - let's say H1 and this will be our
470:31 - summary
470:35 - component all right let's save it now
470:39 - let's go to our expense
470:42 - View and this will be our expense view
470:46 - component so we will be basically using
470:49 - this one for both expense and income but
470:51 - we'll discuss that one later for now
470:53 - this is
470:56 - fine okay so now here we are going to
470:59 - import the summary
471:02 - component and inside this we'll be using
471:04 - the expense view component two
471:09 - times that's
471:12 - it let's see what is happening okay so
471:14 - here summary and then we are having
471:16 - expense View
471:19 - okay so now for this uh Flex we'll give
471:24 - some style we make the wi as
471:26 - full we'll do align items as Flex
471:32 - start uh we'll do justify content as
471:35 - space
471:36 - evenly and we'll do a flex
471:41 - Direction so for this one we'll make
471:44 - this one as
471:46 - column column
471:51 - column for larger we'll do
471:54 - row and
471:59 - row okay so you can see that we'll be
472:02 - having here and here and this is our
472:03 - summary
472:05 - component all right so now what we need
472:09 - to do in the summary component in the
472:10 - summary component we will be basically
472:12 - having the balance and in the right side
472:14 - we have to show the chart so let's let's
472:17 - start working on that component
472:19 - structure
472:21 - first all right so let's create the uh
472:24 - this component the summary component
472:26 - structure first so we'll start with
472:28 - first we'll import
472:30 - box and here we'll give a padding of
472:35 - six uh here we will give a border so
472:39 - we'll do this on one PX
472:42 - solid I'll also give border
472:46 - color so we'll do this one as gray
472:51 - 100 we'll do overflow as
472:55 - hidden we'll do border
472:58 - radius as 10 and here we are going to
473:01 - use a
473:02 - background so we'll do background as
473:06 - white all right now inside
473:09 - this uh we'll also let's make the
473:13 - display as
473:16 - Flex
473:18 - okay so now inside this we'll take a
473:24 - flex and for this one we'll do width as
473:29 - full we'll do justify content as
473:34 - Center we'll do align items as
473:39 - Center and here we'll do Flex
473:44 - Direction and for this one we'll do a
473:48 - base of column oh
473:53 - sorry then for SM we'll do also
473:57 - column for MD also we'll do column for
474:01 - large and Xcel we'll do Row for large
474:04 - we'll do row and for Excel also we'll do
474:11 - row all right now inside this we'll take
474:15 - another Flex
474:19 - and here uh first we'll give some
474:22 - properties we'll do Flex
474:24 - one we'll do width as
474:28 - full we'll do Flex direction as
474:33 - column we'll do align items as
474:38 - Center we'll do justify content as space
474:42 - evenly we'll do margin sorry we'll do
474:46 - margin left
474:48 - of uh we'll do minus
474:51 - 20 and we'll do margin right of
474:58 - two let me format this now inside this
475:01 - we'll again import our heading
475:05 - component and here we'll show the
475:07 - balance so we'll show balance is let's
475:10 - say
475:11 - 100 and here we'll give a size so we'll
475:15 - do
475:16 - MD uh we'll do margin bottom of four and
475:21 - we'll do color as gray dot uh
475:26 - 600 let's save all of this let's see
475:29 - what is happening so you can see that we
475:30 - are getting balance
475:32 - here all right so now after this uh what
475:36 - we are going to do let's take another
475:38 - Flex
475:39 - here and here we are going to do justify
475:43 - content as
475:45 - space Lo space
475:49 - evenly we'll do align
475:51 - items as
475:54 - Center we'll do BG of uh let's make gray
475:59 - do
476:01 - 50 then we'll do width as for now let's
476:06 - make this one as
476:08 - full we'll do height
476:11 - of 100
476:13 - PX we'll do border as 1 PX
476:21 - solid and we'll do border
476:25 - color we'll make this one as gray do 100
476:31 - awesome all right so now inside this uh
476:34 - we'll take another
476:36 - flex and here we are going to do Flex
476:39 - direction as
476:43 - column okay so now here we are going to
476:46 - basically render our uh what is the
476:49 - income and also what is the expense so
476:52 - first we'll start with our income so for
476:55 - this one we'll do heading and we will
476:58 - basically render the income but for now
476:59 - we'll some render some uh 100 static
477:03 - value then we will take another
477:05 - component which is
477:07 - text and here this will be our total
477:10 - income all right and here we're going to
477:13 - use the color we'll do color as Gray
477:18 - dot uh fire
477:20 - 600 and for this one also we'll do but
477:23 - let's change this one we'll do
477:27 - 700 all right now next we'll copy the
477:31 - same
477:33 - thing and we'll paste it here the only
477:36 - difference is this will be our
477:40 - expense
477:42 - okay so I think rest everything will be
477:44 - same all right so now I think after
477:49 - this okay after this we'll take another
477:56 - box and here we are going to use a flex
477:59 - of
478:00 - one we'll do margin top of
478:03 - 10 we'll do
478:05 - margin left of
478:08 - minus 90
478:11 - PX we'll do a margin right
478:15 - of uh five
478:18 - we'll do a width
478:22 - of uh let's make this on 300 PX we'll do
478:26 - height of also 300 PX we'll do display
478:30 - as
478:32 - Flex we'll do align items
478:37 - Center and we'll do justify content also
478:43 - center now inside this we want to
478:46 - basically render our chart so we'll take
478:49 - heading and we'll do this is our chart
478:52 - later later we are going to change this
478:55 - one okay so we having balance this is
478:57 - our total income total expense and this
479:00 - is our chart and this is our expense
479:01 - view awesome so now uh what we can do we
479:06 - can start working on our functionality
479:08 - first and then so on click of this will
479:11 - be opening a model and then whatever
479:13 - data we'll be entering based on that you
479:14 - have to render the chart this data also
479:17 - will be dynamic and based on this here
479:18 - also you have to render the data so
479:20 - let's start working on this model first
479:23 - all right everyone so let's start
479:24 - working on this uh transaction form
479:26 - component first so I'll create index.
479:29 - jsx here so this will be export default
479:33 - function this will be our sorry this
479:36 - will be function this will be
479:37 - transaction
479:39 - form now definitely it will receive some
479:42 - props but for now let's quickly create
479:43 - the structure first so here uh this will
479:47 - return model from Chakra UI and this
479:50 - will take a e open prop so you can see
479:53 - that this one but this one we're going
479:55 - to uh fix it later here we'll take a
479:59 - form and here we just uh import the
480:04 - model
480:06 - overlay all right now after this we'll
480:09 - import
480:11 - model
480:14 - content and inside this we'll do model
480:17 - header and this will be our add new
480:23 - transaction something like
480:25 - that all right now after this we'll
480:28 - import model close
480:31 - button and here this will be model body
480:35 - see how easy it is to implement in this
480:38 - uh chaki or Tailwind whatever you'll say
480:40 - all the components are inbuilt same you
480:42 - can do for material UI
480:44 - also and here what you need to do
480:47 - I will be importing form
480:52 - control then we'll be having form level
480:55 - and this will be our enter uh
481:01 - description uh description yeah I think
481:03 - that is
481:04 - fine all right now after this we'll be
481:07 - importing
481:08 - input and here we will give a
481:13 - placeholder so this will be enter
481:17 - description we'll do enter
481:20 - transaction uh
481:22 - [Music]
481:23 - transaction
481:25 - description then uh what else we'll be
481:29 - having a name so name we'll do
481:33 - description we'll do type of text and
481:37 - also you need the on change and the
481:38 - value but for now this is fine so after
481:41 - this form control we will take another
481:43 - one so let me just copy this and we'll
481:46 - paste it here and this will be enter
481:49 - amount so this will be type will be
481:54 - number name will give this one as
481:58 - amount all right and this will be our
482:01 - enter transaction
482:04 - amount that's
482:06 - it after this we need a radio
482:11 - group all right and here we'll do a
482:14 - margin top of
482:19 - five inside this will be having
482:23 - radio all
482:25 - right this will be either it can be
482:29 - expense or this can be income correct
482:35 - let's do vice versa okay so income so
482:38 - now here we have to give a name which
482:41 - will be here
482:43 - type and the same we have to give name
482:46 - here also this will be type now this
482:48 - will also take a colored
482:50 - scheme so colored scheme will give this
482:53 - one as
482:55 - red and for this one we'll give color
482:58 - scheme as or let's make the expenses red
483:01 - and this one will do
483:03 - blue all right and also to give the
483:06 - value so for this one value will be
483:11 - income and for this one value will be
483:15 - expense
483:17 - on change and everything we are going to
483:19 - do later but for now this is
483:21 - fine all right so now after model body
483:25 - uh we'll import model
483:28 - footer and here we'll take a two
483:31 - button so one will be
483:34 - cancel and then we'll take another
483:37 - button and this will be
483:41 - add all
483:43 - right and I think this is fine uh let
483:46 - let's give for this on a margin right of
483:50 - four
483:52 - okay and I think this is all the
483:55 - structure we need now this transaction
483:57 - form we have to import in our summary
483:59 - component so here we are importing this
484:02 - chart right so after this Flex we can
484:07 - import the transaction form component
484:10 - now here we have to pass some properties
484:13 - so one will be a one close and then
484:15 - second one will be is open or not so how
484:18 - we are going to manage that so this one
484:20 - we will be receive again from this uh
484:23 - from the parent component so this will
484:25 - be on close and is open now let's go to
484:29 - our main and here chakra UI will give
484:31 - you one hook that you can directly use
484:34 - so this will be const is open comma on
484:41 - open and then we are having on close and
484:46 - this is is called use
484:48 - disclosure all right so this value you
484:51 - have to pass so now you can go to your
484:54 - overview component or summary component
484:57 - here we having ease open which will be
484:58 - our ease open then we having on close
485:02 - which will be our on
485:03 - close all
485:06 - right this is fine and now you can see
485:09 - we are having this add new transaction
485:11 - so on click of this button we have to
485:13 - show the model so now we can simply take
485:14 - on click and this will be on
485:17 - open that's it so now let's go here and
485:22 - then we are going to pass this on close
485:24 - as this on close and E open will be e
485:28 - open so these two again will receive in
485:30 - this add transaction component so
485:33 - receive on
485:35 - close and is open so here you have to
485:39 - pass e open as
485:42 - is open then we having on close which
485:46 - will be on close and then we having this
485:50 - cancel button so here also you can give
485:51 - on click this will be on
485:55 - close let's save all of this let's see
485:58 - what is happening here if I click here
486:00 - awesome so you're getting here so this
486:02 - is our income or expense you see cancel
486:06 - if I click if I click here so this is
486:09 - working
486:10 - fine so now we will start working on the
486:13 - functionality I think main structure is
486:15 - completed but before that let's quickly
486:17 - create the basic structure of this chart
486:20 - uh this chart component that we'll be
486:21 - creating now for this one I will not be
486:23 - creating all the options from scratch I
486:25 - already have some of the uh General
486:27 - configuration I basically copied from
486:29 - the official documentation and the same
486:31 - I'm going to use although I'll explain
486:33 - that what exactly we are doing there all
486:34 - right everyone so let's start working on
486:36 - the chart component so I'll create our
486:37 - index. jsx here so this one will be very
486:41 - very simple so we do export
486:43 - default function transaction
486:48 - chart
486:52 - summary now obviously this will also
486:54 - receive some data but for now we are
486:55 - going to return and here what we'll do
486:58 - we simply return uh sorry import chart
487:02 - from react Apex charts and this will
487:06 - return this chart component which will
487:09 - take the options that we are going to
487:10 - just now create it will also take the
487:13 - series which is basically the data So
487:15 - currently we are having this options you
487:16 - can see that I already copied so now I
487:20 - don't want to save this so we having
487:22 - const options and then I'll just paste
487:26 - it let me remove this so you can see
487:28 - that we having level which is expense
487:30 - and income and then we having two colors
487:33 - let me just change this color to
487:35 - Something Blue yeah I think this is fine
487:38 - and then based on that we having some
487:39 - properties which you'll be easily able
487:42 - to understand the legend we don't want
487:43 - to so data levels are for false then we
487:46 - are having some options these are the
487:48 - fields let me use the same field here
487:53 - also that's it now here I'm going to use
487:56 - the same options series because we are
487:58 - having only two levels that means there
488:00 - will be only two data one will be ex
488:02 - expense and one will be income so let's
488:05 - say I'm having expense of 100 and income
488:08 - of 500 so this is our static data type
488:11 - we have to give this will be a pie chart
488:14 - width I'll give one
488:16 - 100% and height I'll give
488:21 - 100% now let's do one thing let's take
488:23 - this
488:25 - expense and the income from the parent
488:29 - component so by default it will be let
488:30 - say
488:31 - 100 and this is also will be 100 and
488:35 - here I'm going to use this one as income
488:36 - let's say and this will be my
488:40 - expense all right I'll go to summary
488:42 - component and here we are using this
488:44 - chart component so we just inut this
488:47 - transaction chart
488:49 - summary and I'll just pass the expense
488:51 - as let's say uh
488:55 - 100 and I'll pass income as also
489:00 - 1,000 now let's see what is happening if
489:03 - I now save this awesome so now you can
489:05 - see that we are getting the data here so
489:08 - that means this is working fine now what
489:11 - will happen whatever dynamically data we
489:13 - want to pass that data we need to
489:15 - basically
489:16 - uh update here so you can see that
489:18 - income is now 100 and expense is 1,000
489:21 - why is that okay let me just
489:25 - check okay I think we have done opposite
489:28 - so to make this one as
489:33 - income and this will be
489:36 - expense also same we'll do opposite here
489:42 - also and let me copy this
489:46 - and we'll use the same
489:53 - here okay income and then expenses
489:58 - 100 all right so now we'll go to our
490:01 - context now it's time to implement the
490:03 - functionality so now we need couple of
490:05 - uh State basically in the context let me
490:08 - close everything so the first one we
490:11 - need and that is the form
490:14 - values which is basically our form that
490:18 - we are having here this form all right
490:21 - so here we'll do const and this will be
490:23 - your form data set form data this will
490:28 - be use
490:32 - state so use state of here we'll pass
490:35 - the type as
490:37 - expense and we'll do amount as zero and
490:42 - we'll do description as empty
490:46 - we also need the value and we'll do set
490:50 - value which will be U state of expense
490:54 - by
490:55 - default all right so these two we need
490:59 - also we need to track the expense value
491:01 - total expense value and the total income
491:03 - value so weing here total
491:08 - expense set
491:11 - total uh expense which will be used at
491:15 - of zero and then we are having const
491:19 - total
491:21 - income set
491:24 - total income which will be US state of
491:29 - zero all right so this is we need and at
491:33 - the end we have to track all the
491:35 - transaction so we'll track all
491:36 - transactions we'll do all
491:39 - transactions and set all
491:43 - transactions which will be used state of
491:46 - Mt so many things we need so now this
491:50 - all of these we have to pass in our
491:51 - value so we start from form data set
491:55 - form data total expense set total
492:00 - expense total income set total income
492:05 - value
492:07 - set value all transactions and set all
492:12 - transactions wow so many things so we
492:16 - have passed all of this now first thing
492:18 - we need to manage the form handling so
492:20 - go to our add transaction here and then
492:24 - we are going to import these things so
492:26 - the first thing we need
492:28 - const so we need the form values or the
492:32 - form
492:33 - data then we need the set form
492:37 - data all right we also need the
492:42 - value and we need the say
492:47 - value and then I think for now this is
492:50 - fine then we'll do use
492:54 - context of global context all right so
492:59 - now here let's create a method so we do
493:04 - function handle form
493:07 - change which will take the event and
493:10 - here we'll simply do set form
493:13 - data which will be our form data data
493:16 - and then we'll do
493:18 - event do
493:20 - Target do value will be sorry not value
493:25 - this will be
493:26 - name and this will be equal to even.
493:29 - Target
493:31 - dot
493:33 - value awesome so this is we need so now
493:36 - we need to pass this one in this one so
493:38 - this will be on
493:40 - change so this will be handle form
493:44 - change and so you can pass it
493:47 - here that's
493:49 - it all right now next we are having this
493:52 - radio group so here we have to pass the
493:54 - value so this value will be the value of
493:57 - type of either it can be a expense or it
493:59 - can be a uh income same we have to do on
494:03 - change which will be set value all right
494:07 - now here what we need to pass here we
494:09 - need to pass the checked value correct
494:12 - so checked value will be if the current
494:14 - form data that we are having do type is
494:18 - this is equal to equal to income so that
494:20 - means this is now
494:23 - checked or
494:25 - else uh here we'll do this will be
494:33 - expense let's save
494:36 - this and I think this is fine so now
494:38 - what we need to do we have to uh
494:40 - basically submit this
494:43 - so uh here we are already I think having
494:46 - a form okay so we'll do on submit we'll
494:49 - do handle
494:51 - submit all right and here we'll do
494:54 - button here we'll do button type
494:57 - of uh
495:00 - submit all
495:02 - right and here we can do uh on click
495:08 - we'll do on close for this one
495:10 - also all right so now we have created a
495:13 - method that will be on submit we have to
495:16 - basically uh handle the current form
495:19 - data so for this one what we can do we
495:21 - can create another method here which
495:23 - will do that so we do function handle
495:26 - form
495:28 - submit something like that and this
495:31 - method will pass it
495:35 - here then we are going to take it in our
495:38 - context and we'll create
495:41 - function uh this is handle
495:44 - submit which will take the event so
495:48 - first we'll do event dot prevent default
495:52 - and then we'll call this handle form
495:54 - submit and we'll pass the current form
495:56 - data that we are having as simple as
495:59 - that that's it so now let's see what is
496:01 - happening in this context the method
496:04 - that we have created so that means here
496:06 - we'll be getting the uh form value or
496:10 - basically the
496:11 - current form data and let's log here
496:16 - this form current form
496:19 - data so go
496:24 - here let's go to
496:26 - console add something we'll do this on
496:29 - the first 100 we'll do income click on
496:34 - ADD so you're getting okay so we are
496:36 - getting this one as type as expense okay
496:39 - this is wrong so make this one as income
496:42 - first okay so if I do here add something
496:45 - give some value we'll do income add
496:48 - income if I go here add something change
496:52 - the value we do expense plad we are
496:55 - getting still income so this part we
496:57 - need to
496:58 - check okay so I think I got the issue
497:01 - the reason is because we haven't passed
497:03 - any on change in this uh in this radio
497:05 - so here also you need to pass on change
497:07 - which will be our handle form change
497:10 - same we need to pass it here also so now
497:14 - I think this doesn't matter whether this
497:15 - is expense or income let's see what is
497:17 - happening now if I click here we add
497:21 - something and let's make this on income
497:24 - so we're getting income I'll add
497:26 - something
497:27 - again we'll do expense add here we
497:31 - getting expense okay so now this is fine
497:33 - so now what we need to do uh we have to
497:36 - basically go to our context and here on
497:38 - form submit we have to basically check
497:41 - if the title and the sorry if the
497:44 - description and and the amount is not
497:46 - empty so you can basically check if the
497:48 - current form data dot
497:52 - description or if current form data do
497:56 - amount empty then we are going to
497:59 - Simply
498:02 - return all right else we'll do set all
498:05 - transaction which will basically get all
498:08 - transaction the previous one and here
498:10 - we'll basically pass the current form
498:14 - data that we are having
498:15 - and also you can pass a ID which will be
498:19 - date do
498:22 - now sorry date do
498:25 - now okay now let's see what is happening
498:28 - now find
498:30 - now save it now let's log here all
498:39 - transactions uh so let's add
498:42 - first income we'll do income we'll do
498:47 - 1,000 we'll add here so you're getting
498:50 - income 1,000 first income We'll add
498:54 - we'll do
498:55 - first expense we'll do 500 we'll do
499:00 - expense add here reting two one is
499:02 - income one is expense so this is working
499:04 - fine so now what we can do basically we
499:07 - can go to our main file and we have to
499:09 - update these values dynamically so that
499:11 - is this is now pretty simple so what we
499:14 - can do we have to import import all of
499:15 - this
499:17 - now all right so now we'll go to our
499:19 - main.js file and here we are going to
499:21 - import the following things from our
499:24 - context so we'll use
499:26 - context of global
499:29 - context so we need total expense to set
499:33 - total expense total income and set total
499:35 - income so we going to copy all of
499:42 - this and then uh we will import it
499:52 - here also we go back and then we are
499:55 - going to import this all transactions
499:57 - because this will consist of all the
499:58 - data that we are having so now we'll
500:00 - take this use effect sorry we'll take
500:03 - use
500:06 - effect and then we'll keep this all
500:08 - transactions as a
500:10 - dependency and we'll do let
500:13 - income is Zer late expense is zero so
500:19 - we'll do all transactions. for
500:24 - each so this will be item so here we are
500:27 - going to check if this item. type if
500:31 - this is equal to equal to
500:32 - income so in this case we will do income
500:37 - sorry income will be equal to
500:40 - income plus Loop Parts float
500:45 - of item do income sorry item do amount
500:50 - not income because we having amount or
500:53 - else this will be expense so because
500:55 - this is income so it will be income so
500:57 - then we can copy
500:59 - this and paste it here and this will be
501:03 - expense equal to this will be expense
501:07 - plus the amount and after this we're
501:10 - going to do set total expense will be
501:12 - expense and set total income will be
501:16 - income that's it so now we will pass all
501:21 - of these in our summary components we
501:23 - pass total expense which will be total
501:26 - expense we'll pass total income which
501:28 - will be total
501:32 - income all right so now let's go to our
501:35 - summary
501:37 - component so here we will receive this
501:41 - total total expense and receive total
501:46 - income all right now here we are having
501:49 - this your
501:50 - balance and here what we going do can
501:53 - simply do something like that your total
501:56 - income minus your total expense that is
501:59 - your balance and then you're having this
502:02 - total income so here we can render our
502:05 - total income and here we can render our
502:09 - total
502:12 - expense let's save it let's let's see
502:15 - what is happening okay so I'll just add
502:18 - a new one and I'll do this one as let's
502:22 - say
502:24 - second amount 250 income I'll add here
502:28 - so you can see this is getting changed
502:31 - add here we'll do
502:34 - expense again two we'll do 6 365 expense
502:39 - add this is getting changed all right so
502:43 - the same we have to update here
502:46 - so now we can again go to our main.js
502:48 - file and in this chart basically we have
502:50 - to pass the data so I think in the uh in
502:53 - the chart we are
502:56 - passing sorry in the summary component
502:59 - only we are having chart component where
503:02 - is that where we are having chart
503:06 - component okay transaction chart summary
503:08 - I think that is the one so here we'll
503:10 - pass the total expense and here we'll
503:13 - pass the total income
503:17 - okay now you can see that this is
503:18 - getting changed awesome so now we just
503:21 - have to render this view okay so now
503:24 - let's start working on this list view
503:26 - component so we go to this
503:30 - view so here we will basically receive
503:33 - some data but first let's
503:36 - uh create the component structure first
503:39 - so we'll do
503:41 - box so here we'll do a flex of
503:45 - one we'll do width we'll keep this on
503:49 - full for
503:50 - now we'll do background as
503:55 - white uh we'll do a margin right of
504:00 - four we'll do margin top of
504:04 - 10 we'll do a padding of
504:08 - five we'll do PB of sorry we'll do a PB
504:12 - of four
504:15 - we'll do a border
504:18 - of one PX
504:21 - solid we'll do a border color of we'll
504:25 - do gray do 100 and we'll do border
504:30 - radius of
504:33 - 12 inside this we'll take a
504:37 - flex uh we'll do align items and justify
504:40 - content so we'll do justify content as
504:43 - space between
504:45 - and we'll do align items as
504:50 - Center awesome now here I'm going to
504:54 - render a heading
504:56 - component and we'll basically get the
504:59 - type here so we'll get the type so we'll
505:02 - check if the type is equal to equal to
505:06 - income so we'll render income or else
505:10 - will render
505:13 - expense and here Al Al uh use a size of
505:18 - mid and we'll use a color of let's use
505:23 - red.
505:26 - 700 all right now after this Flex we'll
505:29 - be getting the data from the parent
505:31 - components we'll receive the data here
505:34 - so we'll do data do map this will be our
505:38 - item and here we'll simply return a flex
505:46 - all
505:47 - right so the first thing is that we're
505:49 - having a background color so background
505:52 - color will check if the type that we are
505:56 - receiving if this is equal to equal to
505:58 - xense so we going to do red do 50 or
506:02 - else we'll do blue
506:05 - dot uh 50 all right we'll do a margin
506:09 - top of
506:11 - four we'll do justify content uh do
506:15 - space
506:16 - between do align items as
506:21 - Center we'll do
506:23 - border uh 1 PX
506:29 - solid soorry we have to do inser
506:37 - this again we'll do border
506:42 - color so we'll copy this
506:47 - and we'll make this one
506:51 - 100 that's it we'll do padding of
506:56 - four and we'll do a border radius of
507:01 - 8 inside this we'll take another
507:05 - flex and let's make the Align
507:10 - items as Center and justify content as
507:16 - Center and inside this we'll render a
507:19 - text
507:20 - component and we'll basically render the
507:22 - item do
507:24 - description all right and here we'll do
507:27 - a margin left
507:34 - of sorry here we'll do margin left of
507:38 - three we will do a font weight of
507:43 - bold and we'll do a color
507:46 - of gray do
507:50 - 600 awesome now after this we will take
507:54 - another text
507:56 - component and we'll just render the item
508:00 - do
508:02 - amount that's it so now we'll go to our
508:07 - overview
508:08 - component sorry not overview we have to
508:11 - go to the main.js component and here we
508:14 - are having this expense View and here
508:16 - you have to basically pass the data so
508:18 - the first you to pass the data so data
508:20 - will be all transactions that we are
508:22 - having here do
508:25 - filter then we'll do item and here we'll
508:28 - pass item. type let's say we want to
508:30 - pass if this is
508:33 - expense I think data is not defined
508:36 - we're having okay text is not defined
508:38 - okay let me fix that and here we are
508:40 - going to pass the type and for this one
508:43 - type will be expense
508:45 - let me copy
508:47 - this and here we'll be making this one
508:50 - as income and this one will be doing
508:55 - income okay now we'll go to
508:58 - our expense View and we are going to
509:01 - import this text component from CH UI
509:04 - let's save
509:07 - this
509:09 - awesome now we are getting all of this
509:11 - so add a new one third
509:15 - income of this
509:18 - month 5,000 income add we're getting
509:24 - here now let's add another one another
509:30 - expense enter amount of let's say
509:33 - 652 expense add all three are getting
509:36 - updated and the data is coming fine all
509:39 - right so that's all for this particular
509:41 - project now let's move on to the next
509:42 - one next project will be a last project
509:45 - of this particular video so we will be
509:47 - basically implementing the uh Monte blog
509:50 - application from scratch so let's start
509:52 - working on that particular project all
509:54 - right everyone so I think we are almost
509:56 - at the end of this particular video so
509:58 - this is the last project that we are
509:59 - going to build and this will be a full
510:01 - stack M blog app so the main idea behind
510:04 - this project is that so that you will be
510:05 - able to create a mon stack project from
510:07 - scratch so we are going to use mongodb
510:10 - and express for this one and for client
510:12 - side react obviously so you can see that
510:13 - we'll be having simply two pages one
510:15 - will be home and add a new blog and this
510:18 - data will be stored in a database now
510:20 - the reason you may ask that why we are
510:23 - creating a monack project now sometimes
510:25 - you'll see there are some particular uh
510:26 - companies like uh I'll not say the name
510:30 - but obviously there are some companies
510:31 - who will give you some Hands-On coding
510:34 - so they will give you one uh simple
510:36 - project to build and they they probably
510:38 - will give you like two to 5 days of time
510:41 - and in that time you have to basically
510:42 - build that project and then you have to
510:44 - give it to them so in that scenario
510:47 - sometimes you might face that they will
510:49 - give you to create a full stack M
510:51 - application but it will be very simple
510:53 - so let's see how this functionality will
510:55 - work so here we'll be having add blog so
510:58 - you can see that we are not using any
510:59 - styling because throughout this uh
511:02 - particular video we have used styling in
511:04 - most of the places so let's say I want
511:06 - to add a new blog so I'll add a new blog
511:08 - added and so this will be new blog
511:12 - description I'll add this one so now
511:15 - this is updated if I now refresh this
511:17 - obviously this will be updated if I go
511:20 - here uh
511:21 - another blog
511:24 - added let's copy this add this one now
511:28 - let's say I want to edit this one so
511:31 - I'll go here and I'll do this is
511:34 - edited so I'll edit so this is now
511:36 - edited and if I not try to delete this
511:39 - this is deleted if I refresh this
511:41 - obviously you'll be getting the updated
511:42 - data deleted and if I delete this one no
511:44 - blogs are added so this will be a very
511:47 - simple application and I'm pretty sure
511:49 - that this project will also help you a
511:51 - lot so let's start working on this
511:53 - particular project all right everyone so
511:55 - let's start uh working on our uh full
511:57 - stack or basically mon stack blog
512:00 - application so the first thing I want to
512:01 - show that what I've done you can see
512:02 - that I created a simple mongod project
512:05 - and the same we are going to use and
512:07 - also I created another folder and inside
512:09 - this I have a client folder so inside
512:11 - this client folder nothing but we are
512:13 - having a simple will create react app
512:15 - project so here now we will be basically
512:17 - start with our implementing the server
512:19 - or basically backend first so each and
512:22 - everything we are going to do from
512:23 - scratch so the first thing what we need
512:25 - to do first we'll be creating a folder
512:27 - and I'll give this one name as server so
512:30 - this will be uh this will consist of all
512:33 - the backends project that we will be
512:35 - basically having
512:36 - here all right next thing what we are
512:39 - going to do now I'll just open this one
512:40 - in
512:41 - terminal and we will be doing first npm
512:45 - in it so this will basically create the
512:48 - package dojon that we need so I'll give
512:51 - any name for now this is fine later
512:53 - we'll change this
512:55 - one we'll do yes so now this will in
512:59 - create a package.json now what are the
513:02 - packages that we need now we are we will
513:05 - be using mongod we need mongus we also
513:07 - needs nodon to run the server uh like
513:10 - concurrently and also we need uh Express
513:14 - and also you need course so mainly these
513:16 - four will be more than enough so we
513:18 - going to use npm install this will be
513:20 - course we need Express we also need
513:24 - mongus and also we need node one to run
513:27 - our
513:28 - server now let's install all of this now
513:31 - after this what we need to do we will be
513:33 - changing some of the things here and
513:36 - then we'll be first creating our main
513:38 - index.js from where we will be serving
513:40 - our main uh index file or basically the
513:43 - root file
513:44 - so here uh what we are going to do so
513:46 - you can see that we are having this main
513:48 - which is index.js so we don't have any
513:49 - index.js for now so let's create one so
513:52 - we'll do
513:54 - index.js all right now inside this
513:56 - package. jsn we'll create a script which
513:59 - will be start script and because we
514:02 - already install node one and here you
514:03 - need to basically give the file name so
514:05 - we'll be doing
514:06 - index.js because that is the file name
514:09 - so now this is done now next thing what
514:11 - we need to do first we will be basically
514:13 - Crea creting the very basic server setup
514:16 - so here let me close this one so first
514:18 - we will need Express so we'll do
514:23 - require and we need
514:27 - Express next uh we also need the DB
514:30 - connection but we haven't done this one
514:31 - so later we will be adding those we also
514:33 - need cords so we'll do require this will
514:36 - be
514:39 - cords all
514:41 - right now what we going to do create our
514:44 - app so we are going to just invoke this
514:47 - Express and then this app will use this
514:53 - course all right and also we going to do
514:57 - app.use which will be
515:00 - express.
515:03 - Json that's it now here uh we'll do our
515:07 - main app.use main API route which will
515:10 - be/ API this will give you a call back
515:13 - which will give you request
515:15 - response and now here we'll just do
515:18 - race. send and we'll just do your hello
515:22 - or I'll do hello world something like
515:25 - that and after that we need to do app.
515:28 - listen now here you can basically
515:30 - mention a port name but for now I'll
515:32 - just pass this one as 5,000 this will
515:34 - also give you a call
515:36 - back and here I just going to log
515:40 - console.log and we'll do app is running
515:44 - at
515:48 - 5,000 and I think that is all the very
515:51 - basic structure that we need now to run
515:54 - this one what we can do we can simply do
515:56 - npm start now let's see what is
515:59 - happening so you can see that it is okay
516:02 - so there are some error you're getting
516:04 - that some module is not found so this
516:06 - one we need to check so it's not getting
516:09 - the module CS okay let me just create
516:13 - open a new one or let me just check
516:16 - whether we have installed CS or not
516:18 - sorry see we we haven't installed CS
516:21 - that is the
516:22 - reason let me just uh create open
516:26 - another one so here we'll install npm
516:28 - install
516:33 - CS all right now let me I'll remove this
516:36 - one later this is not record so we
516:38 - installed now CS now let's go here so
516:41 - now let's see if we run this one what is
516:44 - happening so we do npm
516:48 - start all right so app is running at
516:51 - 5,000 so this is working fine so now we
516:54 - are going to uh do the DB connection so
516:57 - inside This Server I'll create another
517:00 - folder and I'll give this one M as DV
517:02 - and inside this I'll create
517:05 - index.js so for this one I think we have
517:07 - already uh created our mongodb project
517:11 - and the same we are going to use so
517:13 - you'll go here and the first thing is
517:15 - that if you you can see that here you'll
517:17 - get this connect and then you'll be
517:18 - getting this connect mongod for vs code
517:21 - sorry and here you have to basically
517:23 - you'll get this connection URL that you
517:24 - need to copy and then here the first
517:28 - thing is that we need
517:29 - mongus so we'll do
517:32 - require
517:35 - mongus now here we'll set mongus do set
517:39 - and here we'll set uh strict query as
517:42 - false
517:45 - and then we'll do mongus do connect and
517:48 - you have to basically pass this URL I
517:50 - just copied and then I have to you have
517:52 - to basically give the password here so
517:54 - I'll just give my password you can
517:56 - create your own and then you can use the
517:59 - same now this will give you a promise so
518:01 - we'll do dot then and here what we can
518:04 - do we can simply log
518:07 - console. log and we'll do connected
518:12 - mongodb
518:14 - all right if there are any error sorry
518:17 - if there are any error so we'll just log
518:19 - this error so let's save
518:22 - it all right so now what we can do we
518:25 - can go to our main
518:26 - index.js and here we'll simply do
518:31 - require and we need to basically go to/
518:34 - DB and it will automatically take from
518:36 - the uh that connection so it will
518:40 - automatically take this DV connection
518:42 - that we have done here all right I think
518:45 - that's it so now if you go here you can
518:47 - see app is running at 5,000 and we
518:49 - getting connected mongodb so which is
518:51 - basically coming coming from here all
518:54 - right now let's see how we are going to
518:56 - approach this one so mainly we will be
518:58 - having three things one will be a model
519:01 - so model is basically where you will be
519:03 - defining your model then you'll be
519:05 - having a route route all the routes will
519:07 - be defined and those routes you are
519:09 - going to use in your index.js and for
519:11 - each and every route let's say we you
519:13 - will be adding a blog or we'll be
519:14 - fetching list of blogs or we'll be
519:16 - deleting a blog or updating for each and
519:18 - every blog we'll be having a controller
519:20 - so that means we are having the
519:22 - following folders so we'll be having a
519:25 - controller uh we will be having
519:28 - model and also we'll be having
519:32 - route all right now the first thing is
519:35 - that we'll start with this model so
519:38 - inside this model I'll create a folder
519:40 - and let's give this one name as
519:42 - blog
519:44 - .js all right so now the first thing is
519:46 - that what we need we need mongus so
519:50 - we'll do mongus which will be
519:53 - require
519:55 - mongus and now here we'll Define our
519:59 - schema sorry this will be const schema
520:04 - which will be mongus do
520:08 - schema here we'll create our blog
520:12 - schema so this will be new
520:15 - schema and here you have to basically
520:17 - pass all the properties that you want to
520:19 - use so let's we'll be having a
520:21 - title so here we'll be having a type of
520:25 - we can directly pass or let's do like
520:27 - this only so we do type of
520:30 - string and I think that is fine next
520:34 - what we will be having we'll be having a
520:37 - description which will also will be a
520:39 - type of
520:40 - string and then we'll be having a
520:43 - date so date will be type of
520:47 - date and here we'll pass a default
520:50 - property so default will be our date do
520:54 - now all right so this now if you want
520:58 - you can also add some more properties
520:59 - Also let's say you'll be having a image
521:00 - so you can also add a image property uh
521:03 - for example let's say you want to face
521:05 - the image from some database and then
521:06 - you want to sorry some let's say you
521:08 - want to store some in storage the image
521:11 - for example fireb or some a WS cloud and
521:14 - then you want to face the URL and that
521:16 - URL you want to store here so that also
521:18 - you can do now what we can do we can
521:20 - simply do module. exports and here I'll
521:23 - do mongus sorry this will be
521:26 - mongus what you doing mongus do model
521:30 - and here basically you to give the name
521:32 - so I'll give this one name as blog and
521:34 - then you to pass the blog schema just
521:35 - now we have created this one as simple
521:38 - as that so this will create this will
521:40 - basically create your
521:41 - model all right now next thing what we
521:45 - need we basically need this controller
521:47 - and in this controller we will be having
521:49 - all the things that we will be basically
521:51 - doing so let's say inside this I'll
521:53 - create our uh we'll do blog
521:59 - controller.js all right so let me just
522:02 - close everything now so the first thing
522:04 - is that we need our
522:07 - mongus which will be
522:11 - require Mong
522:13 - goes and also we need the blog schema so
522:16 - we'll do
522:17 - blog we'll do
522:21 - require and we'll go to our model SL
522:25 - blog all right now what are the things
522:27 - we need we need basically these many
522:30 - controllers first we need fet list of
522:34 - blogs then we need add a new
522:39 - blog we also need delete a Blog
522:43 - and also we need update a
522:46 - Blog so basically these all the
522:49 - controllers that we
522:51 - need so first uh let's start with
522:55 - this uh this F list of blogs so we do
522:59 - const Lage list of blogs this will be a
523:04 - sync method definitely and here you will
523:09 - be basically getting our request and
523:11 - response now inside this what we are
523:15 - going to do first we'll take a variable
523:19 - and we'll do blog uh we do blog list
523:22 - something like that now we'll be having
523:24 - a tri block and a cat block so in the
523:27 - cat block we'll simply log the
523:31 - error and in the tri block what we are
523:34 - going to do we'll do blog list is equal
523:37 - to AIT now you can see that this is the
523:41 - schema that sorry this is the model so
523:44 - we do just blog. find so this find is a
523:47 - method so this will basically give you
523:49 - all the all the documents that you are
523:51 - having so you can see that it will list
523:54 - all the documents that match the this
523:56 - particular
523:57 - filter that's
524:00 - it now after this here we can basically
524:03 - do something like this if there are not
524:05 - blog list so that means no blog is
524:08 - present so we'll simply do a
524:10 - return and we'll do race
524:13 - dot
524:15 - status and here we'll do
524:17 - 404 and we'll do do Json and we'll pass
524:21 - a message something like no
524:24 - blogs found all right and at the end we
524:28 - are going to return sorry we going to
524:34 - return so we'll do race do status of 200
524:39 - do Json and here we are going to
524:41 - basically pass this log
524:44 - list that's
524:47 - it so now this all about will give you
524:51 - all the list of blogs that you are
524:53 - having so first what we have done we are
524:55 - finding all the blogs then we checking
524:58 - if there are no blogs that means there
525:00 - is no blog is currently present or else
525:02 - we'll return all the blog list whatever
525:04 - we are
525:07 - having all right so next method we are
525:09 - going to create and that will be to add
525:12 - a new block
525:13 - so let's create another one and this
525:14 - will be add new blog this is also will
525:18 - be a sync method here we'll get request
525:21 - and
525:25 - response all right so the first thing is
525:28 - that we will be basically receiving our
525:31 - uh title and the description and that
525:32 - will be from this so this you can see
525:35 - that we are having title and description
525:36 - in the model that means whenever we'll
525:38 - be typing something in our front end we
525:40 - need to basically extract those inputs
525:42 - whatever user is typing how we are going
525:44 - to do that so we'll simply do title and
525:50 - description and this we are going to
525:52 - basically take it from request.
525:55 - body all
525:57 - right next we'll create our date so this
526:00 - will be our current
526:03 - date and here I'll simply do new
526:08 - date now let's create our blog so this
526:11 - is our new newly created blog this will
526:15 - be new and you can see that we are
526:17 - having this blog which is our model so
526:21 - this is the model that we are
526:23 - having so here uh what we are going to
526:26 - do we will be
526:28 - basically just saving this one so we'll
526:31 - pass this
526:33 - title we'll pass
526:36 - description and also we pass let me just
526:39 - check so we having this date so you're
526:41 - having this date so date will be this
526:44 - current date that we are having here I
526:46 - hope you're getting so now we'll do a
526:49 - try block and we'll do a it and we'll do
526:52 - uh so we are having this newly created
526:55 - blog dot save so save is a method that
526:58 - you can use if there are any error so
527:01 - we'll just catch this
527:07 - error all right and then after this
527:11 - we'll take another pry
527:17 - catch here I'm going to return if there
527:20 - are any kind of Errors we'll do race.
527:22 - send it will be a 500 and we'll just
527:25 - render Json and we'll pass a message
527:28 - which will be this error and in this Tri
527:31 - block what we going to do create our
527:33 - session so this will be our a
527:38 - Mongols do start
527:41 - session
527:44 - and then we'll do session do start
527:48 - transaction and we'll do
527:51 - AIT we having
527:53 - blog. save sorry we are having newly uh
527:57 - sorry newly created
527:59 - blog dot
528:02 - save and here I'm going to pass this
528:06 - session and then we'll do session do
528:10 - commit transaction
528:13 - now at the end if everything goes
528:16 - correct so we are going to return we
528:18 - return race.
528:21 - status of
528:23 - 200.
528:25 - Json and we'll basically pass here this
528:28 - newly created blog that we just
528:32 - created awesome so this is all about our
528:35 - add a new blog that we need next we are
528:38 - having delete a Blog all right so let's
528:41 - create another method so this will be
528:42 - delete a Blog and this will be async
528:46 - request
528:49 - response and here we'll do const ID now
528:53 - the reason we need ID because we will be
528:55 - always uh deleting a particular blog
528:58 - correct so for that one we need that ID
529:00 - of that particular blog and that we will
529:02 - be receiving from the params so I will
529:05 - uh discuss that part later but for now
529:06 - let's create so we'll get it from
529:08 - request. params
529:10 - doid and then we'll do try and we'll do
529:14 - basically const find current blog and
529:19 - this will be
529:21 - a we are having
529:24 - blog dot find by ID and delete and here
529:29 - basically what you need to do to pass
529:31 - the ID that you want to delete that's it
529:34 - now here after this if there is this
529:37 - blog is not found actually so we
529:40 - basically need to send some message like
529:42 - we'll do return race.
529:45 - status we'll pass a 404 and we'll do a
529:48 - Json off we'll pass a message of blog
529:53 - not
529:55 - found all
529:57 - right and here also you'll do a
530:03 - catch sorry we'll do a error so we are
530:06 - going to log this error not sure why
530:10 - this autocomplete is very slow in The
530:12 - View code I'm not sure need to check uh
530:15 - so we'll do a status of
530:18 - 500 do Json and we'll pass your
530:23 - message
530:25 - unable to
530:27 - delete
530:29 - please uh try again something like that
530:33 - and here if we are not getting so means
530:36 - we are returning this one this is fine
530:38 - but if we are deleting that means that
530:40 - is successful so we going to return
530:41 - raise do
530:43 - status of 200.
530:46 - Json and we'll pass a message and that
530:49 - will be something like
530:53 - successfully
530:57 - deleted and I think that's it so this is
531:00 - what exactly you need to delete a
531:01 - particular blog we are first getting the
531:03 - ID that you want to
531:04 - delete and then we are deleting this by
531:07 - this method we have to pass that
531:09 - particular ID this is very very
531:11 - important and if uh we are not getting
531:14 - the blog so we return that blog not
531:15 - found if it is successful we will return
531:18 - successfully deleted and if there are
531:21 - any errors we return the unable to
531:23 - delete now at the end we need another
531:25 - one and that will be to update a Blog so
531:28 - Lon update a Blog this also will be a
531:32 - sync method here we'll get request
531:34 - response now there is a third parameter
531:36 - also you can pass here that is next but
531:37 - for now this is fine this is more than
531:40 - enough now here also you need the that
531:42 - you want to update so here also you get
531:44 - ID which will be request. params do
531:48 - ID so here we'll get our title comma
531:54 - description and here you will be
531:57 - receiving from our
531:58 - request.
532:01 - body now after
532:03 - this uh what we can do uh we can
532:06 - basically take like current blog to
532:10 - update something like that then we'll
532:13 - take a tri block and here we'll do
532:16 - current blog to update and this will be
532:20 - AIT now we have to take blog and here
532:23 - again you have to do find by ID and
532:26 - update and here what you need to pass
532:28 - you to pass this ID that which blog you
532:31 - want to update and you have to pass the
532:33 - content so here I'm going to pass this
532:35 - title and the description that I'm
532:37 - having
532:38 - here that's it all right if there are
532:41 - any error so we log this
532:44 - error and then we are going to return
532:48 - race. send
532:51 - 500. Json
532:54 - something something went wrong while
532:59 - updating
533:03 - please please try
533:08 - again sorry you to give this oh oh sorry
533:13 - sorry we have to give this one in
533:16 - message okay what is happening here I
533:19 - think we haven't given this one
533:21 - see that's
533:26 - it all right now here after this if it
533:30 - is successful so so here it is fine so
533:34 - here simply you can Che if this not
533:36 - equal to current blog to update if we
533:38 - are not getting means this is not
533:40 - present we'll simply return race.
533:47 - status uh we'll do 500 again and we'll
533:51 - do a Json and do message and we'll do
533:55 - unable to update awesome and at the end
533:59 - we are going to
534:01 - return race. send of 200. Jason and
534:06 - we'll pass this current blog to
534:10 - update that's it
534:12 - so now we have created all the method
534:15 - that we need so now we need to basically
534:17 - export all of these so you can simply do
534:19 - here module sorry we'll do here module.
534:23 - exports and here you can simply pass
534:26 - this uh fet list of blogs delete a Blog
534:31 - update a Blog and add new blog so now
534:35 - see the process is so we have created
534:37 - the model we have created all the
534:38 - controllers now we have to create the
534:40 - route so whenever we will basically
534:43 - calling these routes from our front end
534:46 - so you have to basically need those
534:47 - routes and there you have to basically
534:49 - pass all the information that you need
534:51 - so here I'll create we'll do something
534:53 - like blog route. jsx sorry
534:57 - JS and here you need the express now so
535:01 - we do Express and this will be
535:05 - require
535:08 - Express and I'm going to create our blog
535:10 - router
535:12 - which will be
535:13 - Express so this will give you this
535:15 - router you can see and here now I'm
535:19 - going to extract all of these from so we
535:22 - do
535:24 - require and I'll go to controller SL
535:28 - blog controller so what are the things
535:30 - we are having we are having G uh sorry
535:32 - we are having fet list of blogs add a
535:35 - new blog update a Blog and then delete a
535:40 - Blog
535:42 - awesome now at the end what we going to
535:45 - do is simply call this blog router and
535:48 - this will be dog and here you to
535:50 - basically give that which path so you
535:52 - can see that the path you want to call
535:54 - so I want to call this on slash and this
535:56 - will be our fet list of
535:59 - blogs then we'll do blog router
536:03 - doget and this will be SL add and here I
536:06 - need to do add a new
536:08 - Blog then I'll do blog router
536:12 - dog here I'll do slash now here is the
536:15 - catch so whenever we'll do update and
536:17 - delete we basically need the current ID
536:21 - so we'll pass a dynamic value because
536:23 - this value will be dynamic and here I'll
536:25 - pass a update a Blog something like that
536:28 - and to make this a little bit unique we
536:30 - can do something like update and then
536:33 - here we'll do blog
536:34 - router dot get sorry I'm doing too much
536:39 - mistake for adding this one this will be
536:41 - a post for this one this will be a put
536:46 - and this will be a
536:47 - delete so here we can do something like
536:50 - delete SL again we have to pass the ID
536:54 - and here we'll do uh delete a
536:57 - block and that's
537:00 - it this is done now at the end again you
537:03 - have to do module. exports and you to
537:07 - export this blog
537:09 - router so we created the routes we we
537:11 - have created the controller so now we
537:14 - need to basically go to our index.js
537:17 - here and you have to import this blog
537:20 - router just now we have created so here
537:22 - I'll do const blog
537:26 - router and this will be
537:31 - reord so here we'll go to our
537:35 - router route blog route all right and
537:40 - now what you can do simp
537:42 - after this we'll do app.
537:45 - use and here we'll call SL API SL
537:52 - blogs and here I'm going to pass this
537:54 - blog
537:56 - router that's
537:59 - it all right so this is our basically
538:01 - our uh path in which we will be
538:04 - accessing this blog router which will
538:07 - consist of all of these routes and these
538:09 - all of these route are basically the
538:10 - controller is basically maintained by
538:12 - this controller file so I think that's
538:15 - all the back end we need and this is a
538:17 - very simple project I already told you
538:19 - now we will be start working on the
538:20 - front end part but before that let's
538:22 - quickly install the packages that we
538:24 - need and another thing I want to mention
538:27 - that is for this particular project also
538:29 - we will be not doing any CSS because
538:32 - again the prime objective of this
538:33 - project is that if even if you get any
538:36 - kind of like monst related project in
538:38 - interview so you also Aid that whenever
538:42 - you interview you get a limited amount
538:43 - of time and they will not tell you to
538:45 - create a full stack Twitter clone or
538:47 - YouTube clone or insta Facebook or
538:49 - something like that like let's food
538:51 - delivery app they'll give you a very
538:53 - simple problem and they will judge you
538:55 - that whether you'll know the basics or
538:57 - not so something very very I'm pretty
538:59 - much sure that they will give you
539:01 - something related to any to-do app any
539:03 - blog list something like that F list of
539:05 - data Crow application crude application
539:08 - you can say sorry so where you'll be
539:09 - able to create update delete and add any
539:11 - new thing so the main objective is that
539:13 - the thing we are doing here to give you
539:15 - the basic understand understanding that
539:17 - how you will be able to achieve that so
539:20 - that is the reason we'll not use M CSS
539:22 - so here the packages we need we'll need
539:24 - uh react
539:26 - icons and also you need react router Dom
539:32 - and I think this will be more than
539:33 - enough so now this packages we need now
539:36 - we will be start working on the uh
539:38 - client side now how we are going to do
539:41 - that so we will be maintaining all of
539:43 - the state using our uh context all right
539:47 - so the first thing let's quickly create
539:48 - our context so we go to our source and
539:51 - inside this first I'm going to create
539:52 - our context and inside this I'll create
539:55 - index.
539:58 - jsx all right so now let's create our
540:01 - context so this will be export const
540:05 - Global context and this will be create
540:09 - context of null
540:12 - now I'm going to do export default
540:15 - function this will be our Global
540:20 - State and here I'll be receiving the
540:22 - children and I'm going to return Global
540:26 - context. provider and I'm going to pass
540:29 - the children here that's it so this is
540:32 - the first step now I'll go to our
540:34 - index.js I'll remove this strict
540:38 - mode and I'm going to import Global
540:42 - State and I'm going to W this app do app
540:45 - component inside of
540:47 - this all right now how we are going to
540:50 - do that so first let's implement the
540:52 - routing
540:54 - functionality so we need two pages so
540:57 - first I'll create Pages folder and
540:59 - inside this we'll be having our
541:01 - home and then will'll be our add
541:06 - blog all
541:08 - right so inside this we'll create our
541:10 - index x.
541:13 - jsx so let's quickly create so this will
541:15 - be export default function and this will
541:20 - be our
541:21 - home and I'm going to return here
541:25 - div and let's return H1 and this will be
541:28 - our list of blog uh blogs blog lists
541:33 - blog
541:34 - list all right next we are having this
541:37 - add blog so here I'll create index. jsx
541:42 - and again I'll create this component so
541:44 - this will export default function
541:47 - add new
541:50 - blog and I'm going to return again a div
541:53 - and inside this I'll again take a H1 and
541:55 - I'll do
541:57 - add uh add a
542:02 - Blog awesome now let's create another
542:04 - folder inside of this and I'll give this
542:07 - one name as components and I'll create
542:10 - another one and that will be our header
542:12 - and let's create our index.
542:15 - GSX so this will be export default
542:18 - function and this will be our
542:21 - header all right and I'm going to return
542:24 - here a
542:25 - div so here we'll keep this one very
542:28 - very simple I'm again explaining these
542:30 - things uh I'll just simply keep one A3
542:34 - and this will be our
542:36 - blog uh we'll
542:38 - do M blog
542:42 - log
542:44 - app and on the right side I'll take a
542:48 - e and here I'll take two AI so one will
542:51 - be our home and one will be our add a
542:54 - new
542:55 - one that's
542:58 - it now let's do one thing let's create
543:01 - our
543:02 - style so let's create now this time
543:05 - module CSS so we are going to use mod
543:08 - CSS modules so this is also will give
543:10 - you some idea
543:11 - so I'll take this one as a
543:13 - header and I'll do a display of
543:17 - flex then we'll take header of A3 and
543:22 - we'll do Flex of
543:24 - one then we'll take
543:26 - header of e I'll do display as Flex We
543:31 - Do least style as none and we'll do gap
543:34 - of
543:37 - 20px then we'll do do header. e.li we'll
543:41 - do font size as 20 BX font weight as
543:46 - bold and we'll do cursor as
543:49 - pointer now let's go here now how we are
543:52 - going to use this to use this we have to
543:54 - import classes
543:57 - from style. module. CSS and here I'll
544:01 - give a class name now this will be
544:04 - classes dot
544:08 - rapper so this is the class name that
544:10 - that we are having here sorry header not
544:16 - rapper that's it now let's save it now
544:19 - I'll go to app.js now we have to
544:21 - basically implement the
544:23 - routing so the first thing let me just
544:25 - remove all of
544:28 - this and here I'm going to import the
544:31 - header component first and let's see
544:34 - what we getting I think we are already
544:35 - running this
544:37 - application okay this is fine let give
544:40 - uh give some uh what we can do we go
544:43 - here and let's give
544:45 - a padding
544:47 - of uh
544:51 - 30px okay awesome and here I'll give a
544:55 - font size of 40
544:59 - PX and we'll do margin of
545:04 - zero okay now on click of this you have
545:06 - to change the pages but before that
545:09 - let's implement the routing first so to
545:11 - implement the routing again we have to
545:12 - go to our
545:15 - index.js and here I'm going to import
545:19 - browser router I think let me just UT it
545:22 - directly
545:23 - from react router Dom and we'll do
545:27 - browser
545:31 - router awesome now I'll just cut it and
545:35 - paste it
545:38 - inside now let's go to our app.js and
545:42 - here we are going to import routes from
545:44 - react autodom I think I'm not explaining
545:46 - because this also I've have done in the
545:47 - previous project also now we need two
545:51 - route and here I'll do a exact I'll give
545:55 - a path of Slash and I'll give a element
545:59 - for this one I'm going to use the
546:02 - home then I'm going to copy this paste
546:05 - it here this will be add
546:09 - blog and and
546:12 - here uh what we'll do we'll do add new
546:18 - blog that's it so now let's save
546:21 - this we'll go to our header and now here
546:25 - I'm going to import
546:29 - link we'll paste it two
546:33 - times we'll cut it here one and here one
546:38 - and here we'll give the two as slash and
546:42 - for this one we'll give a two AS Slash
546:45 - add
546:49 - blog let's save this so now if I click
546:53 - here this is changing and this is fine
546:57 - so now let's quickly create this form
547:00 - first because first we have to save the
547:01 - data in our uh
547:04 - database and then we'll be fetching the
547:07 - list of data so we'll go to our add blog
547:10 - component component I'll close
547:12 - everything else the first thing is that
547:15 - uh we'll do a class name here so first
547:17 - let me just create our
547:19 - styles. module.
547:23 - CSS so we'll do a
547:26 - wrapper and here also we'll do a padding
547:29 - of I think how much we have done padding
547:31 - here 30px so we do
547:35 - 30px and we'll import this on
547:39 - here
547:44 - and here I'll do a class
547:47 - name which will be classes do
547:52 - wrapper all
547:56 - right now here I'll take a
547:59 - div and inside this div I'll have a
548:05 - input so let's give a name
548:09 - of title
548:11 - we'll give a placeholder of enter blog
548:17 - title we also have to give the value uh
548:20 - but for now this is fine ID will give a
548:22 - title we'll give a type of
548:25 - text after this we'll take a texture
548:30 - here here also give a name of
548:34 - description we'll give a placeholder of
548:37 - enter
548:39 - blog dis
548:42 - description and what else we'll also
548:44 - give ID of
548:46 - description and we'll give a type
548:52 - of yeah I think that is
548:55 - fine now for this one we'll give a class
548:58 - name we'll do this one as classes do
549:03 - form
549:05 - rapper so copy this we go here and we'll
549:10 - do do this on display as Flex Flex
549:14 - Direction column and gap of 15
549:24 - PX okay for this one I'll also give a
549:28 - width of 400
549:32 - PX okay this is fine now what we can
549:37 - do we can also take a button and this
549:41 - will be add new
549:43 - blog something like that let's
549:47 - see so first let's quickly complete the
549:50 - functionality and after that we'll be
549:51 - doing little bit of styling here all
549:53 - right all right so now let's go to our
549:56 - context and then we'll create our state
549:59 - so first will be our form data set form
550:05 - data which will be equal to use state so
550:08 - here we'll be having title which will be
550:10 - empty and then we'll be having
550:13 - description which will be
550:16 - empty now let's copy
550:18 - this and we'll go here we'll do value
550:21 - and we'll pass this one so this is the
550:24 - advantage of using Contex will be easily
550:26 - able to manage straight
550:28 - globally also context is like one of my
550:31 - really favorite features of react so
550:34 - here now what we need to do we'll just
550:37 - um extract this from use context
550:41 - of global context so now what we can do
550:44 - we can simply take the value here which
550:47 - will be form data do name sorry this
550:50 - will form data. title and here value
550:53 - will be form data do
550:57 - description here we'll take a on change
551:00 - which will be event so we do set form
551:03 - data which will be our form
551:06 - data and then here we'll do title which
551:09 - will be even do target.
551:12 - value that's it now same here we'll be
551:15 - do on change we'll get the
551:18 - event and here we'll do set form
551:23 - data I think this is not required set
551:26 - form data will be our form data and then
551:30 - we'll do
551:32 - description which will be event.
551:35 - target.
551:38 - value that's it
551:40 - so now let's see what we are getting in
551:42 - this form data so log this form
551:49 - data let's go to console type something
551:53 - here we're getting title and this is our
551:57 - description
551:58 - awesome all right so now what we need to
552:01 - do on click of this button we'll call
552:03 - the API and we have to save the data in
552:05 - our database so we create a method this
552:07 - will be our on click and this will be
552:09 - handle save
552:12 - blog to database I'm giving the name
552:15 - like this so that it is easy to
552:17 - understand all right everyone so now
552:18 - let's uh start working on this method so
552:21 - this will be obviously as sync method so
552:23 - we do as sync
552:27 - function and here let's do one thing uh
552:30 - let me just open this on another
552:34 - terminal and let's
552:37 - install uh
552:39 - AOS
552:44 - so I think I think it will be done let
552:46 - me just
552:52 - check okay so now we'll
552:55 - import Aus from
552:59 - Aus and here we can simply do const
553:04 - response this will be
553:07 - AIT axos dopost and here now what we
553:11 - need to do we have to basically call the
553:13 - URL now here we'll be calling HTTP SL
553:17 - Local Host now if we go to this
553:20 - index.js here you can see that we are
553:22 - having this/ API blocks so this is our
553:24 - base URL and then here you have to
553:27 - basically go to/ add because we'll be
553:29 - adding so here we'll do uh Local Host
553:34 - 5,000 SL API SL blogs SL add and here we
553:39 - need to pass the uh title which will be
553:42 - our form data uh do title and then you
553:46 - have to also pass the description which
553:48 - will be form
553:50 - data do description all right now here
553:54 - this will basically will give me our
553:55 - result which will be
553:57 - AIT
553:59 - response do data that's it now let's log
554:05 - this result and let's see what we
554:09 - getting
554:11 - okay now let refresh this do
554:17 - inspect we'll do
554:19 - first
554:21 - blog
554:24 - added let's add this one so you're
554:27 - getting newly created blog if I go to
554:29 - network this is
554:31 - successful and now we'll go here we'll
554:35 - do browse
554:37 - collection so getting blogs and and here
554:40 - we are getting only one block so this is
554:42 - working fine so now what we can do
554:44 - simply we can check first let me import
554:47 - one thing and that is called
554:49 - navigation from
554:53 - use I think uh that is called use
554:56 - navigate so let me just import
554:59 - it so import something
555:02 - from react router Dom and this is called
555:06 - use
555:09 - navigate
555:13 - all right so here we'll simply do if
555:17 - result is true so first we'll make this
555:20 - set form data as empty so title empty
555:25 - and description as
555:27 - empty and we'll do navigate to
555:31 - homepage let's save it now let's see
555:35 - what is happening so go here now let me
555:39 - just refresh this
555:40 - again so we'll do second
555:44 - blog second
555:46 - blog bad it's going to blog list page if
555:51 - I refresh this it should have two data
555:54 - now so you're getting two data and this
555:56 - is working fine if I go to add blog and
555:59 - you can see that the form is now
556:02 - reseted so that is all about the add a
556:05 - new blog functionality now let me just
556:08 - go to the
556:10 - homepage and here we will be basically
556:13 - now fetching the list of blogs so for
556:16 - this one I'll just close everything else
556:18 - we go to
556:20 - context and here I'll be taking another
556:22 - one and this will be our blogs blog list
556:28 - set blog list which will be used state
556:32 - of array also we take a pending State
556:37 - set pending which will be US state of
556:43 - false so we are going to pass these
556:46 - values so we pass blog list set blog
556:49 - list pending and set
556:53 - pending now we'll copy
556:57 - this so we go to home first we'll
557:01 - destructure all of
557:03 - this from use context of global context
557:09 - next so what we are going to do
557:11 - basically will be simply fetching the
557:13 - list of products sorry list of blogs so
557:16 - here we need to take a use
557:17 - effect which we will be calling on page
557:21 - load and this will be Fage list of
557:27 - blocks so again this will be aing method
557:30 - so this will be function
557:32 - Fage list of
557:35 - blogs so this will be const response
557:40 - and this will be
557:41 - AIT axio let me import
557:45 - it from
557:49 - axio so here this will be
557:52 - axio
557:54 - dog so here again we'll do
557:59 - HTTP Local
558:02 - Host 5,000 SL API SL blogs so this is
558:07 - the URL that we
558:08 - need and and here we'll do const result
558:12 - equal to AIT response. data now let's
558:17 - see we log this result
558:22 - here let's save it now let's go
558:26 - here do console let's go to our homepage
558:30 - we are getting two data and this is our
558:32 - blog list so you can simply check
558:36 - if
558:38 - result
558:40 - and and result. bloglist and then
558:44 - result. blog list. length this is true
558:48 - so we'll do set blog list is result do
558:53 - blog
558:54 - list and before calling the will do set
558:56 - pending as
558:59 - true and here we do set pending as
559:04 - false all right now here we'll do simply
559:08 - if loading sorry if the pending is true
559:11 - so render H1 and we'll do
559:16 - loading
559:19 - blogs
559:21 - please
559:22 - wait or else we simply take a div
559:28 - here and inside of this we're going to
559:31 - render this blogs list do map this is
559:36 - blog
559:37 - item here we'll take a d
559:41 - so the key will be the blog item.
559:46 - ID and here we'll take a p and we'll
559:49 - render blog item.
559:52 - title and we'll take a p another one and
559:55 - this will be blog item.
560:01 - description let's save it and now let's
560:04 - see what is happening so you're getting
560:05 - two blogs correct let's go to our add
560:08 - blog and another one third
560:12 - blog third
560:14 - blog add we are getting third blog if I
560:18 - now refresh this we're getting all the
560:21 - data here so this is all about the
560:24 - fetching list of blocks now let's give
560:26 - some little bit of styling and then
560:28 - we'll be start working on the delete and
560:29 - the update all right so now let's create
560:31 - our style file here so this will be
560:34 - styles. module.
560:37 - CSS uh so here we'll give a class name
560:41 - and this will be
560:46 - classes do blog
560:50 - list and we're going to
560:53 - import classes
560:55 - from style. module. CSS and here we'll
561:00 - copy this and first thing we'll do this
561:02 - one as display
561:04 - as uh
561:06 - grid do grid template columns
561:10 - repeat uh 41
561:13 - F and we'll do gap of 10
561:16 - PX uh inside this we'll do dot blog list
561:21 - of
561:22 - div uh here we'll give a padding of 10
561:25 - PX we give a border of one uh 1 PX solid
561:31 - red let's see how this is looking okay
561:35 - and also here we'll give a class name of
561:40 - classes do uh
561:44 - rapper so we copy
561:47 - this so we'll do wrapper and we'll do
561:50 - padding of
561:54 - 30px awesome so now if I go here come
561:58 - back we are getting the data so now we
562:01 - will give some uh button here one will
562:03 - be delete and edit so let me just
562:06 - quickly import it so we import some
562:09 - something
562:10 - from react icon slfa and I think it is
562:14 - fa a
562:17 - trash and then we having fa
562:22 - edit and here we'll take a we'll just
562:26 - render this fa edit and then fa tress
562:30 - we'll give a size of
562:32 - 30 also here also give a size of
562:38 - 30
562:40 - awesome so now uh first we'll start
562:43 - working on this uh Delete functionality
562:45 - so here we'll give on click and this
562:47 - will be handle delete
562:51 - blog so now we'll create create this
562:54 - method so this will be as sync function
562:57 - handle delete blog now this will
562:58 - basically get current ID
563:02 - definitely so here to get current ID
563:05 - what you need to do you have to pass
563:07 - this current ID which is this blog item.
563:09 - ID so blog item.
563:12 - ID so if I now log
563:15 - this get current ID and let's see what
563:19 - is
563:23 - happening so if I click here we're
563:26 - getting the ID and you can see
563:29 - that awesome so now we just have to
563:31 - Simply call the API so we do const
563:35 - response this is AIT Aus do delete so
563:40 - here we'll call the API now here what
563:43 - catch is that so we'll do Local Host
563:48 - 5,000 SL API SL blogs now if I go
563:54 - here so we are having delete and then
563:56 - you have to pass the ID so you slash
563:59 - delete slash and here you have to pass
564:01 - this get current
564:04 - ID all
564:08 - right
564:09 - and here we'll do const result which
564:12 - will be equal to
564:14 - AIT
564:15 - response dot
564:19 - data all right now one very important
564:22 - Point whenever we will be deleting
564:24 - something we have to refresh the page to
564:27 - get the list of uh blogs again what we
564:30 - can do we can simply call this API again
564:32 - or else we can refresh the page I'll
564:33 - show you both the both the things so
564:36 - simply you can check here if this result
564:41 - so uh let me check what we are passing
564:43 - in the controller so if I delete
564:46 - something we passing this message so
564:49 - we'll check if this result. message is
564:51 - true so we'll do F list of
564:55 - blogs all right now let's save
565:00 - it now let's see what is happening
565:03 - refresh
565:05 - this so we'll click this one awesome if
565:09 - I click here deleted if I click here we
565:12 - are getting loading please wait now this
565:14 - is also we need to check this is the
565:16 - reason so here we'll do else set pending
565:20 - as
565:25 - false so if I now refresh this okay we
565:29 - are not getting any data but that is
565:31 - fine uh we will do one
565:34 - thing uh we'll check here if this blog
565:38 - list
565:40 - and and blog list. length is true or
565:45 - else will render
565:47 - A3 so no
565:51 - blogs
565:54 - added okay and I'll go to add
565:58 - blog new one added so this new one
566:03 - added add this one we are getting
566:06 - delete okay here we need to check what
566:09 - what is happening so go here we need to
566:11 - check I'll just add random add new one
566:15 - but
566:16 - here if I
566:19 - delete we are getting empty
566:23 - but if I go here let me refresh this we
566:26 - are not having any data but some of this
566:28 - data is showing here okay so what we can
566:31 - do let's do something like this so we do
566:34 - const navigate and this will be
566:37 - use
566:40 - navigate okay let me import it so we do
566:43 - import
566:44 - from react router
566:47 - Dom and this will be use
566:53 - navigate okay oh I got it what is the
566:56 - reason if the result is not true we have
566:59 - to make this set blog list as empty see
567:03 - this is the re but I'll show you the
567:05 - second way also now it will work for
567:06 - sure let's go here let's try to add add
567:09 - another one let's add here now let's
567:12 - delete see now we getting but I'll show
567:14 - you another one how we are able to do
567:16 - that so let's I'll add some
567:18 - random
567:23 - add add and I'll add another
567:29 - one okay now you'll see so either you
567:32 - can call this method again or else you
567:35 - can also do this navigate so navigate or
567:38 - of zero what this will do this will
567:41 - basically call the same uh page or
567:44 - refresh the same page again let's see
567:46 - what is happening so I'll just refresh
567:48 - this I'll see if I just delete this one
567:50 - see it is refreshing this page again I
567:53 - hope you're getting right so if I again
567:55 - click this one so it is refreshing and
567:58 - if I click again it is refreshing but I
568:01 - think it will be better if you call this
568:03 - sem instead of refreshing the page again
568:05 - and again so I think this is the best
568:07 - approach all right so this is all about
568:10 - the delete functionality that we are
568:12 - having now let's start working on this
568:14 - edit one now for edit what we'll be
568:16 - doing so let's say I'll add a new one
568:21 - add add something now whenever I'll
568:24 - click it will go to the ad page so it
568:26 - will go to this page and it will
568:27 - automatically fill this one and this add
568:30 - will be getting changed and this will be
568:31 - getting changed to edit all right so
568:34 - let's see how we are going to basically
568:35 - do that all right so we'll go to First
568:37 - our context
568:39 - and here I'll add another state and this
568:42 - will be
568:43 - current edited
568:47 - data Set current edited
568:52 - data and this will be equal to use state
568:56 - or let's do one thing we'll do EAS
568:59 - edit and we'll do set e edit and this
569:04 - will be equal to
569:06 - false now I'll copy this
569:10 - and I'll pass it
569:13 - here awesome so now we'll go to our home
569:17 - and here we are having this
569:20 - edit icon so we'll do on click and we'll
569:23 - do handle edit now this will also get
569:26 - the current blog
569:28 - item all right so
569:31 - here we create this method so this will
569:34 - be
569:35 - function handle edit so this will be get
569:39 - current blog
569:43 - item and let's see what we
569:50 - getting okay so now we'll go to our home
569:54 - let's add this one so you're getting the
569:56 - data so now we have to navigate to the
569:59 - add page and then we also have to pass
570:01 - the data in our state so how you will be
570:04 - basically doing that to do that what you
570:06 - need to do we can simply call this
570:10 - navigate method that we are having so we
570:13 - having
570:14 - navigate so navigate will here you have
570:17 - to pass the two so it will go to the uh
570:20 - so let's say we are going to this add
570:23 - blog so it will go to this page
570:27 - correct and then here what you have to
570:30 - pass you have to pass the state so we do
570:33 - state state here I'm going to pass the
570:36 - uh title or let's do one thing let's
570:39 - pass this gate current blog item
570:43 - full let's save it so now if I go to
570:47 - this add blog page I have to get the uh
570:51 - I have to extract the state how we are
570:53 - going to do that so for this one we are
570:55 - having another uh hook and that is
570:57 - called use
570:59 - location so we do location will be use
571:03 - location and now here let's take a use
571:07 - effect
571:12 - and we'll take this location and we'll
571:14 - log this location
571:18 - here save it now let's see what is
571:21 - happening okay currently we can see that
571:23 - we are not getting anything but if I now
571:25 - go to home and click here and I'll see
571:29 - if I expand this we are getting a state
571:31 - and here we getting gate current blog
571:32 - item and inside this we're getting all
571:34 - the data so we can now simply check if
571:37 - this location state. gate current blog
571:40 - item so here we'll check if location.
571:44 - state if this is true so this gate
571:48 - current blog item we will be able to
571:51 - take location. state from location.
571:54 - State and now what we can do we can
571:56 - simply make this set form data will be
571:59 - title which will be get current blog
572:02 - item do title and description will be
572:06 - get current blog item do
572:09 - description see if I now save this see
572:13 - now you're getting this two data
572:14 - automatically filled up here correct so
572:17 - now what we can do simply we can go to
572:19 - our context and here we are having this
572:21 - set is
572:23 - edit so this one we will be able to
572:26 - extract from here and we'll do e
572:29 - edit and here we'll
572:32 - do set is edit will be
572:37 - true and here we'll
572:41 - do if is edit is true we we'll do
572:46 - edit a
572:48 - blog or or else we do add a
572:52 - Blog save
572:56 - this and same we can do it here
573:02 - also so we'll do e edit do edit blog or
573:07 - else we'll do to add
573:11 - blog let's save it now here you are
573:14 - getting edit blog edit a Blog now on
573:18 - submit here we are saving so here
573:21 - basically we need to basically check if
573:23 - it is EAS edit so we have to call a
573:26 - different endpoint if it is a only add
573:30 - so we have to call this endpoint so we
573:32 - can simply check if this Eed it is true
573:35 - so we'll do AIT AOS do
573:41 - putut so we'll do this on access do
573:46 - putut and here you have to pass the URL
573:48 - and then here you'll be passing the
573:51 - title which will be again your form
573:53 - data. title and description will be your
573:57 - form data do
574:00 - description now here what you have to
574:02 - pass so let me just do one
574:05 - thing so we'll go here
574:12 - all right so you can see that we having
574:14 - SL update SL ID of ID so you have to
574:17 - pass it here and let me just copy from
574:19 - here only no need to write
574:22 - again okay so going to 5,000 SL API blog
574:26 - SL update and now ID will be what will
574:29 - be the id id will be this gate current
574:31 - blog item. ID so from here you'll be
574:34 - able to get it I hope you're getting so
574:36 - here you can simply do
574:39 - this
574:40 - location dot
574:43 - state do get current blog item do
574:47 - ID all right so now let's see what is
574:51 - happening and if the result is true what
574:54 - we need to do we'll again make this set
574:56 - is edit as
574:59 - false all right now let's save it now
575:03 - let's see what is
575:05 - happening now I'll go to home first
575:08 - I'll click on edit and I'll do add
575:12 - edited
575:16 - edit okay so you're getting some
575:19 - error Let me refresh this
575:26 - again all right so we are getting some
575:28 - error and that is cannot set headers
575:30 - after they send to client res status
575:33 - send St instead of
575:36 - 3314 okay sry we have to do status here
575:40 - and same we can do
575:42 - here okay now let's see so let me just
575:46 - refresh this
575:47 - first okay now this is edited although
575:50 - but let me just edit it again so edited
575:53 - again and this is also
575:56 - edited now click on edit so edited again
575:59 - if I go to add we are getting add if I
576:02 - go here it's edited let's add another
576:04 - one
576:07 - here so now I'll click on edit so now
576:11 - this one this one is
576:15 - edited edit so edited delete this is
576:21 - deleted and if I delete this one no
576:23 - blocks are added all right so now I
576:25 - think we have almost completed all the
576:27 - functionality I hope that this will
576:30 - definitely give you some idea how you
576:32 - can create a full stack mod project from
576:34 - scratch and also with this project we
576:37 - have have completed all the projects in
576:39 - this particular video and this video
576:42 - will definitely going to help you if
576:43 - you're completing these projects
576:45 - whatever we have done in this particular
576:46 - video all right so all the best and I'll
576:48 - see you in my next video till then good
576:50 - luck and
576:52 - peace