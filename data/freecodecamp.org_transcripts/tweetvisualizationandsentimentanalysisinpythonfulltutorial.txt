00:00 - if you enjoy content like this please
00:02 - subscribe to the lucid programming
00:03 - channel for more programming tutorials
00:08 - okay so in this video we'll be making
00:11 - use of the
00:12 - tweepy api and this is an api that we
00:15 - can access via python which will allow
00:17 - us to very easily stream tweets in real
00:20 - time directly from twitter
00:23 - so in order to follow this series of
00:24 - tutorials what we're going to be doing
00:27 - is installing tweepy which is a python
00:29 - package so i'm going to assume that you
00:31 - have python installed on your machine
00:33 - and if so all we'll need is the tweepy
00:36 - module we're just going to create a
00:38 - python sorry well we are going to create
00:40 - some python we're going to first create
00:41 - a twitter application
00:43 - and in order to do that you will also
00:45 - require a twitter account so if you
00:47 - don't have a twitter account go ahead
00:48 - and create one it's pretty easy to do
00:51 - doesn't need to be a main twitter
00:52 - account or anything like that you just
00:54 - need to sign up for twitter in whatever
00:56 - way you wish to do so
00:58 - um once you do that you will have the
01:00 - ability to create a twitter application
01:03 - and then we'll write python code that
01:05 - will interface with that application to
01:07 - stream tweets in real time based on
01:10 - keywords or hashtags now what we'll do
01:13 - in this video is we'll just write a very
01:14 - simple application to accomplish just
01:16 - that so we'll see tweets given a set of
01:20 - keywords
01:21 - and then in later subsequent videos
01:23 - we'll see what we can do to analyze the
01:25 - content of the tweets that we get back
01:27 - maybe we can produce some nice graphs
01:29 - based on that data
01:30 - and then some other fun things that we
01:32 - can do with that data like possibly
01:34 - sentiment analysis which will most
01:37 - likely be
01:38 - part of the natural language processing
01:40 - series of videos so keep an eye out for
01:42 - that as well
01:44 - so i guess one thing that i want to
01:46 - mention as well is that all of the code
01:48 - as usual for all of these things will be
01:50 - provided on the github page and all the
01:53 - links that i'm
01:54 - talking about here all the links that i
01:55 - have open on this browser are going to
01:58 - be available below in the description so
02:01 - no need to write them down
02:03 - but just refer to that and you can see
02:05 - the code that we use in this and all
02:07 - videos
02:08 - another thing i want to mention too is
02:10 - that if you have any problems or
02:12 - questions about tweepy which is the
02:14 - primary module that we will be using in
02:17 - this tutorial series
02:18 - the documentation is docs.tweeby.org
02:21 - again link will be in the description
02:23 - and more further information about this
02:25 - module is there and it's very
02:28 - descriptive and well written so i will
02:29 - refer you to that
02:31 - so before we get into writing any python
02:33 - code as i mentioned we need to actually
02:35 - go ahead and create a
02:37 - twitter application
02:40 - so in order to do that what we need to
02:41 - do is navigate over to
02:43 - apps.twitter.com again this will require
02:45 - that you do
02:46 - have a twitter account and are logged in
02:48 - if so you should be presented with a
02:50 - dashboard that looks probably similar to
02:52 - this depending on what time
02:53 - uh when you're watching this video
02:56 - uh you can see that i already have an
02:57 - application here listed under my twitter
02:59 - apps that was used for something else i
03:01 - was working on just for fun uh and what
03:03 - you're going to want to do you might not
03:05 - see anything here
03:06 - if you don't have any apps in this
03:08 - application management section you can
03:10 - click on this create new app button
03:13 - that will take you to a form which just
03:16 - asks for some really simple details
03:18 - about what this twitter application is
03:20 - going to be doing so i've already kind
03:22 - of
03:23 - did a dry run of this and i have some
03:25 - information for what we'll be filling in
03:28 - so you can put in whatever name you like
03:30 - i'm going to put in this name this is
03:32 - just the name of the twitter application
03:34 - lucid programming twitter app
03:36 - a description which is also required so
03:38 - i'm just going to say a test twitter
03:40 - application for a youtube tutorial
03:42 - and then a website so i'm just going to
03:44 - put in my own homepage here just for
03:46 - good measure i suppose
03:49 - callback url this is not particularly
03:51 - necessary so we'll just leave this blank
03:53 - make sure you click this developer
03:54 - agreement and then you can click on
03:55 - create your twitter application
03:59 - so if you do so then you are presented
04:00 - hopefully with this page that says your
04:02 - application has been created and uh all
04:04 - of the relevant information for your
04:06 - application will be stored here in terms
04:08 - of how to access um i guess credentials
04:11 - and things like that
04:13 - so what what you're going to want to do
04:14 - is actually click on the settings tab
04:16 - right here
04:17 - so if you do so you will see a you'll
04:20 - see four things listed consumer key
04:22 - consumer secret access token and access
04:25 - secret i'm not going to click on that
04:26 - because the
04:28 - i guess the keys are unique to each
04:31 - program and i guess showing those things
04:33 - is i think it's against well it might be
04:35 - in poor taste i don't exactly know if
04:37 - there's any like security breach if i
04:39 - show those things but i guess just for
04:41 - good measure i'm just going to uh let
04:43 - you click on that yourself look at what
04:45 - those are keep them secret and then
04:47 - we're going to use those to interface
04:50 - with our application i guess for one
04:52 - thing if you do have a twitter
04:53 - application that's interfacing with
04:55 - twitter you would want somebody to get
04:56 - access to your tokens because then they
04:58 - could manipulate it and they could you
05:00 - know possibly abuse it and
05:02 - you know that would look good for your
05:04 - twitter account so try not to let that
05:06 - happen
05:06 - so we're going to use those for
05:09 - credentials to authenticate the python
05:12 - program that we will now be writing so
05:14 - with that said minimize this and let's
05:16 - get to writing some code so the first
05:19 - thing i'm going to do is i'm going to
05:20 - create a credentials file which is going
05:22 - to store those four things which you
05:24 - should see on your settings tab so i'm
05:26 - going to create this as twitter
05:28 - credentials.pi
05:31 - so what we're going to do here is we're
05:33 - just going to create some variables
05:36 - which will be accessed in our primary
05:38 - program so i'll just put in a comment
05:41 - variables that contain the user
05:43 - credentials
05:45 - to access
05:47 - twitter
05:48 - api
05:50 - so the first one is access token
05:54 - the next is access
05:56 - token secret
05:58 - uh there's also the consumer let me
06:00 - spell it properly the consumer
06:03 - key
06:04 - and the consumer
06:06 - secrets
06:08 - so what i'm going to do is i'm just
06:09 - going to whoops
06:11 - i'm going to define each of these is
06:13 - just python strings
06:15 - so i'm just going to assume that you can
06:17 - go over to the
06:20 - settings tab
06:22 - back to here click on the settings tab
06:24 - and then copy and paste in between these
06:26 - quotes the access token access token
06:28 - secret consumer key and consumer secret
06:31 - save this file and make sure that this
06:33 - file is saved in the same directory that
06:34 - you'll be
06:36 - using all of your that you'll be writing
06:38 - all of your twitter
06:39 - api access python code in so i'm just
06:42 - going to save this
06:44 - right now
06:46 - and that's that so if i look here i have
06:48 - twitter credentials.pi in this directory
06:51 - in the same directory i'm going to
06:52 - create another python file which will be
06:54 - the brains of what we'll be doing which
06:56 - as i mentioned before will just be in
06:58 - this video at least streaming the tweets
07:00 - directly from twitter in real time so
07:02 - let's create a file which we'll call
07:06 - tweepy
07:07 - streamer
07:09 - dot pi
07:11 - so
07:12 - before we get into writing this one
07:14 - thing that i probably should have
07:15 - mentioned earlier that i did
07:18 - is that oops that was not supposed to go
07:20 - there let's see let's try that again
07:23 - there we go you need the tweepy module
07:25 - of course so as i mentioned i'm going to
07:27 - assume that you have python installed i
07:29 - won't assume that you have tweep
07:30 - installed
07:31 - so if you don't have it installed what
07:33 - you'll need to do is access it through
07:35 - pip pip install tweepy
07:38 - if you run this command in your terminal
07:40 - it will go ahead and install for me i
07:42 - already have it installed so it says
07:43 - requirement already satisfied
07:45 - so sorry about that i forgot to mention
07:48 - that earlier
07:49 - so back to the code so back to here
07:52 - let's go ahead and start importing some
07:54 - of the things that we'll be making use
07:55 - of
07:56 - that are coming from the tweepy library
07:58 - so the first thing that we'll import is
08:00 - tweepy dot streaming
08:03 - import stream listener
08:06 - this is a
08:08 - a class that's
08:09 - from the tweeping module that will allow
08:11 - us to listen to the tweets kind of the
08:13 - fire hose of tweets as they as they come
08:16 - based on certain keywords or hashtags
08:18 - we'll also need to import another thing
08:20 - for authentication so we'll say from
08:22 - tweepy
08:24 - imports oauth handler
08:26 - this class is going to be responsible
08:28 - for authenticating based on the
08:29 - credentials that we stored in the other
08:31 - file for uh associated with the twitter
08:34 - app and then we're going to uh have one
08:36 - more thing from tweepy import
08:38 - stream and i guess
08:41 - another import that we require not from
08:43 - tweepy is the credentials file that we
08:45 - created so import
08:47 - twitter credentials
08:50 - and again this should be located in the
08:52 - same folder as this file that we're
08:54 - writing to currently
08:56 - so the first thing that i want to do is
08:58 - i just want to create a class
09:01 - which will allow us to print the tweets
09:04 - so a very simple thing and then we'll go
09:06 - back over it and kind of make it a
09:08 - little bit more robust and we'll refine
09:11 - what it's doing but simple first
09:13 - so let's create a class
09:15 - and we'll call this standard out
09:17 - listener
09:19 - and this class is going to actually
09:21 - inherit from
09:23 - stream listener
09:25 - so it's going to inherit from the stream
09:26 - listener class
09:27 - and
09:28 - the stream listener class provides
09:30 - methods that we can directly override
09:32 - so one of the methods is called on
09:35 - underscore data
09:37 - it's class method that takes in a
09:38 - parameter data
09:40 - and there's another one that we can also
09:41 - override called on error which also is
09:44 - class method and takes
09:47 - a status variable so what do these
09:49 - functions do what are they responsible
09:50 - for
09:51 - odd data is an overridden method which
09:53 - will take in the data that is streamed
09:55 - in from the stream listener so the one
09:57 - that is listening for tweets
09:59 - and then it's going to pr we can do
10:00 - whatever we want with that data that
10:02 - tweet so what we're going to do just to
10:05 - make it very simple is we're going to
10:07 - print out the data that we get
10:10 - and then we're just going to return true
10:11 - to make sure that everything
10:13 - went well we will go back and make that
10:16 - a bit more robust because that's very
10:17 - simplistic at the moment
10:19 - on error this is what
10:21 - a method that we are overriding from the
10:23 - stream listener class
10:25 - that happens if there's an error that
10:27 - occurs and one thing we can do again
10:29 - which is just very simple is we can just
10:31 - print out the error which is uh
10:35 - passed in through this status variable
10:37 - we're just printing it on on screen so
10:39 - if we encounter an error what will
10:41 - happen is this method will be triggered
10:42 - and we'll print the status message of
10:45 - that error to the screen
10:48 - so the next thing that we're going to
10:49 - want to do is just actually create a
10:51 - method sorry an object from this
10:53 - standard outlistener class that we just
10:55 - created and then actually get on to
10:57 - streaming the tweets so this will be in
10:59 - the main part of the program so we'll
11:01 - say if name
11:02 - sequel to
11:04 - main
11:07 - and what we'll first do is create a
11:09 - listener object so i'm going to say
11:10 - listener
11:12 - is equal to
11:13 - standard out listener
11:15 - like that so again this is just an
11:17 - object of the class that we just created
11:19 - which is inheriting from the stream
11:20 - listener class
11:22 - and then what we're going to do is we're
11:23 - going to want to authenticate so we're
11:25 - going to want to authenticate using the
11:26 - credentials that we had
11:28 - stored in the other file so we're going
11:30 - to create this variable called auth and
11:32 - we're going to say oauth handler which
11:34 - is the
11:35 - class that we're importing from tweepy
11:37 - which is going to be responsible for
11:38 - actually authenticating our code
11:40 - and we're going to pass it in
11:42 - the credentials so we're going to say
11:44 - twitter credentials dot
11:47 - consumer key
11:48 - and twitter credentials dot consumer
11:50 - secret
11:52 - so this
11:54 - in order for us to define this auth
11:56 - uh object of the auth handler class it
11:59 - takes these two uh arguments that we
12:01 - need to pass in and then in order for us
12:03 - to complete the authentication processes
12:05 - we're going to say auth dot set axis
12:08 - token
12:10 - and this is a method which is provided
12:12 - from the oauth handler class and what
12:14 - this takes this method also takes two
12:16 - arguments and that takes the
12:19 - access token
12:21 - and the
12:22 - access token secret
12:24 - at this point our application hopefully
12:26 - should be properly authenticated so
12:29 - we'll create a twitter stream based on
12:31 - the so we'll call this uh we'll create a
12:33 - variable called stream equal to
12:36 - this thing which is the class stream
12:38 - that we imported above
12:39 - and we're going to pass it to things the
12:41 - authentication token to verify that
12:42 - we've actually authenticated properly
12:44 - and then the listener object that we
12:46 - created
12:47 - and the listener object is just
12:49 - responsible for how do i deal with the
12:51 - data the tweets and how do i deal with
12:53 - the error if i encounter an error
12:56 - one final thing that we can do
12:58 - is we can filter the tweets because
12:59 - otherwise if we just run this stream
13:02 - if we run this listener it's just going
13:04 - to stream a ton of tweets at us which
13:06 - might be some of them might be
13:07 - interesting some of them might not be
13:09 - let's say we want to stream tweets that
13:10 - are focused on some keywords
13:13 - or hashtags or something like that
13:16 - so what we can do is we can say stream
13:17 - dot filter this is a method that is also
13:20 - provided by the stream class and that
13:22 - what this takes is a list one of the
13:23 - things it can take is an optional
13:24 - parameter of a list
13:26 - which is called track
13:27 - and in this track list we can provide it
13:30 - a list of things which
13:33 - if the twitter sorry if the tweet
13:34 - contains any of these list objects then
13:37 - it will
13:38 - apply it and it will say i'll add this
13:40 - to the stream so let's see let's just
13:42 - add
13:43 - um
13:44 - donald trump
13:46 - uh let's hillary
13:48 - clinton
13:49 - and
13:50 - barack obama
13:52 - and let's say bernie sanders
13:56 - so just some politicians in there so
13:59 - we'll filter tweets based on this list
14:02 - of keywords
14:03 - so we can go ahead and run write this to
14:06 - a file and then we can go ahead and try
14:07 - to see what happens when we run it so
14:10 - python tweepy streamer
14:13 - now if we run this we get let's see a
14:15 - 401 let's check why that happens to be i
14:19 - think the reason for that was because i
14:21 - didn't fill in any of the
14:23 - consumer key consumer secret or anything
14:25 - like that i just written it
14:26 - from what you saw before all of those
14:28 - things were completely blank so don't be
14:29 - me don't be an idiot go ahead and make
14:31 - sure you fill that stuff in and once you
14:33 - do if you do that hopefully that should
14:35 - run and things should start coming on
14:38 - the screen there so like we see a ton of
14:40 - look seemingly garbage just
14:43 - showing up on the screen here these are
14:45 - tweets uh specifically these are let me
14:47 - just kind of stop this here
14:49 - so if you don't stop it it'll just keep
14:52 - it'll just keep streaming so this whole
14:54 - blob here this is one tweet it's not the
14:58 - person didn't tweet this thing out of
15:00 - course what this is is it's a json
15:03 - formatted uh dictionary object and each
15:06 - of the fields in this
15:08 - braced thing here contains information
15:11 - about the tweet so this says the tweet
15:13 - was created uh today this is today
15:16 - this is the you know id that
15:19 - twitter associates with this particular
15:20 - tweet uh apparently it was a retweet by
15:23 - this person here
15:25 - here is the actual text so donald trump
15:27 - that's one of the keywords that we had
15:29 - in the
15:30 - uh in the list check
15:32 - so
15:33 - 2019 state of the union speech is
15:35 - january 30th
15:37 - so tv ratings so yeah there's just some
15:39 - some stuff that he's saying there what
15:41 - other content do we have on this uh
15:43 - thing that's interesting let's see so
15:46 - it tells you also about um like who
15:48 - retweeted it how many times been
15:49 - retweeted um there's a whole ton of
15:51 - information in this little thing here i
15:54 - think even the the platform
15:56 - coordinates possibly of where this was
15:57 - tweeted from in some cases sometimes
15:59 - that's not uh provided but there's a ton
16:02 - of information in this thing so there's
16:04 - one tweet here and what we're going to
16:06 - be doing in subsequent videos is
16:07 - actually going through each of these and
16:09 - seeing if we can extract anything
16:11 - interesting any insights from these
16:13 - things and just kind of have some fun
16:14 - with it
16:16 - so back to the code
16:18 - so what we have at this point is just
16:20 - something that prints out tweets to the
16:22 - screen which is totally fine that it's
16:24 - proof of concept we've got tweets coming
16:26 - in
16:27 - um but i'm just going to clean some of
16:29 - this up to make this a bit more robust
16:31 - so that in subsequent videos
16:33 - things are just kind of a little bit
16:34 - more
16:36 - well robust i guess is the right word so
16:38 - let's go and create another class which
16:41 - we'll call
16:43 - let's call this twitter
16:45 - streamer so this is going to be a class
16:47 - that we'll define for ourselves which
16:49 - will be responsible for actually
16:50 - streaming the tweets just makes it a
16:52 - little bit more concise so we'll call
16:54 - this stream
16:56 - tweets
16:57 - and this is a class method so it takes
16:59 - the object of self
17:01 - i'm kind of thinking ahead here and
17:02 - assuming that instead of just printing
17:04 - tweets to the terminal like we saw there
17:06 - perhaps i want to save tweets to a text
17:09 - file or a json
17:11 - file so that way i can process them for
17:13 - whatever purpose i see fit later so i'm
17:16 - going to
17:17 - allow the ability for us to pass in
17:19 - a name which will be the file name
17:22 - of the
17:23 - tweets that we'll pass in so let's say
17:25 - fetch tweets file name i'll call that so
17:28 - again that's just the file name of where
17:29 - we want to let's say write our tweets to
17:31 - instead of showing them on the terminal
17:33 - we can do both but we don't have to
17:35 - and then i'll also have a
17:37 - hashtag list here so this will just be
17:40 - the list
17:41 - of keywords or hashtags we wish to
17:44 - filter the tweets out by
17:46 - so
17:47 - we're really just kind of reworking some
17:49 - of the code that we have that's the
17:50 - proof of concept
17:51 - into something that's a little bit more
17:53 - modular
17:54 - so let's go ahead and add a comment just
17:56 - to make this look a little nicer
17:58 - this handles twitter
18:02 - authentication
18:04 - and the connection
18:06 - to the twitter
18:08 - streaming
18:10 - api so we're going to
18:13 - pretty much just take this code that we
18:15 - wrote down here
18:17 - and i think we're just going to well
18:19 - let's just copy that
18:21 - even remove it
18:22 - move that over here
18:24 - let's go ahead and indent that
18:26 - so we'll create the listener object
18:28 - that's all good
18:29 - authenticate
18:31 - do that uh so instead of hard coding
18:34 - this here i guess what i'm going to do
18:35 - is i'm going to remove this and i'm
18:38 - going to put in the hashtag list that we
18:40 - passed into the function
18:42 - so a bit more modular so we can just
18:44 - create a twitter streamer object instead
18:46 - of
18:47 - doing that whole business that we had
18:48 - before in the main part of the code
18:52 - another thing that i guess i want to do
18:54 - in this standard outlister class that we
18:55 - defined
18:56 - is well let's see let's just um let me
18:59 - just add a few more comments here so i
19:02 - want to add a comment
19:04 - for this class this class is
19:07 - a class for streaming
19:09 - and let's say processing
19:11 - live tweets
19:13 - that looks good and then here let's do
19:15 - another one
19:17 - this is really this is a basic uh
19:19 - listener class
19:21 - that just prints at this moment anyway
19:24 - it just prints
19:25 - received
19:26 - tweets
19:27 - to standard out
19:29 - so that might change over time as we
19:31 - make this more complicated so i guess
19:33 - the first thing that we'll do is we'll
19:35 - create a constructor for this thing
19:37 - because what i want to do is i want to
19:40 - create a standard outlet center class or
19:42 - object rather and that may be associated
19:44 - with a file name that these are going to
19:47 - be
19:48 - writing to so where do we want to store
19:50 - the tweets so i'm going to say fetched
19:52 - tweets file name
19:54 - and this is a class variable so i'm
19:56 - going to say self.fetchtweet's file name
19:58 - is equal to fetched tweet's file name
20:02 - so this odd data method is a little bit
20:04 - it could use a little bit of
20:07 - something to make it a little bit better
20:09 - at dealing with possible errors so i'm
20:11 - going to have a try accept statement
20:13 - here so i'm going to say try
20:15 - let's say print data
20:18 - and then actually i'm not going to put
20:20 - anything well okay let's say let's say
20:22 - that we also want to write this stuff to
20:23 - a file too right so we've already
20:25 - created this
20:27 - file name that we've defined the uh
20:29 - constructor of this class
20:32 - let's say with open
20:34 - self.fetched tweets filename
20:37 - and we'll append because we keep what we
20:39 - want to continually add the tweets as we
20:42 - stream them from the api
20:44 - as tf
20:46 - uh we'll write the data
20:49 - so tf.write data so if you don't want to
20:52 - print it out and also write it you can
20:53 - get rid of that print statement but it's
20:54 - totally up to you
20:56 - if that went okay will
20:59 - return true and then we'll have an
21:01 - accept case here so accept
21:04 - we'll say base exception
21:06 - and then if that exception is hit we'll
21:09 - say print
21:11 - error
21:12 - on
21:13 - on data just to make sure that we know
21:15 - the method that we
21:16 - are in and then let's go ahead and print
21:19 - out
21:20 - uh let's print out the actual error
21:22 - message so we'll print out the string of
21:24 - e
21:26 - and then we'll
21:28 - return
21:29 - true
21:30 - okay so i think that's okay the error on
21:33 - error message i think is all right for
21:34 - now
21:35 - and then okay so now we have to change a
21:37 - little bit here in this main
21:39 - function so let's go ahead and use our
21:41 - new class to
21:43 - do pretty much what we did before but
21:44 - just make it a little bit more nice and
21:47 - modular so what we'll do is we'll create
21:49 - a hashtag list here
21:51 - uh we'll i guess create it as let's say
21:54 - donald trump
21:57 - hillary clinton
22:00 - uh barack obama
22:03 - and bernie sanders
22:06 - and let's see so we can also say let's
22:09 - define our fetch tweets file name as
22:12 - let's just call it tweets
22:14 - dot json so again as we saw from the
22:17 - output of the terminal
22:18 - those tweets the braced objects are they
22:22 - can be formatted as json it's a little
22:24 - bit easier for us to deal with that
22:26 - format if we want to read a little later
22:28 - you could put txt there it's totally
22:30 - fine but i'm just changing the extension
22:31 - to json it's not necessary if you don't
22:34 - want to do that
22:36 - okay so now let's define a twitter
22:39 - streamer object so i'll say twitter
22:41 - streamer
22:43 - is equal to twitterstreamer
22:46 - and then we'll say twitterstreamer
22:51 - there it is
22:52 - dot stream tweets
22:55 - which is the method that we created up
22:56 - above
22:57 - and we'll send it takes two things the
23:00 - file name
23:01 - that we want to write to and then also
23:03 - the list of of keywords that we're
23:06 - looking for
23:07 - so that just made that a little bit more
23:08 - concise and everything a little bit more
23:10 - modular and that will kind of get us
23:13 - started on this whole
23:15 - streaming tweet sling
23:19 - we're going to be touching up some of
23:21 - the code that we wrote in part one so
23:23 - we'll be touching up some code and we'll
23:24 - be focusing on the notion of page nation
23:27 - and also the cursor object in twitter
23:29 - and specifically the tweepy
23:31 - library so we'll be making use of that
23:33 - to do things like accessing our own
23:35 - tweets on our timeline accessing user
23:38 - tweets from a specific user that we
23:40 - might want to analyze tweets from also
23:43 - getting followers or friends from
23:45 - certain users and other things like that
23:47 - so we'll be making use of the cursor
23:50 - class in tweepy to do that so the first
23:53 - item on the board is to clean up a few
23:55 - things that we did in part one just to
23:57 - make things a little bit more
23:59 - streamlined and modular
24:01 - before we do that i do want to import
24:03 - two things here at the top which we'll
24:04 - be making use of in this video one of
24:06 - them is called api so from tweepy import
24:09 - api the other is called cursor so from
24:12 - tweepy import cursor
24:14 - so once we have those we're ready to
24:16 - make some changes so the first thing i
24:19 - want to do is i want to
24:21 - i think change the name of this twitter
24:23 - stream listener class so before
24:26 - i guess the initial idea of this class
24:28 - was just to print out the tweet but this
24:31 - class is doing a little bit more than
24:33 - that it's also writing it to a file
24:34 - standard out listener is probably not
24:36 - the best name for this class since it
24:37 - can do a little bit more than just print
24:39 - it out to the screen let's call that
24:41 - something a little bit more general
24:42 - let's just call it twitter listener
24:45 - which would mean we'll also have to
24:46 - change the reference to that class
24:48 - over here we make an object called
24:50 - listener
24:51 - so the next thing that i want to do is i
24:53 - thought that
24:54 - authenticating here in this stream
24:56 - tweets function is fine but i thought i
24:58 - would abstract this functionality into
25:00 - its own class so that way we can
25:02 - authenticate for other purposes that we
25:04 - may have indeed we'll have those other
25:06 - purposes in this video so i'm going to
25:08 - create another class up here
25:10 - which will be for authentication so i'm
25:13 - going to call this
25:14 - let's say twitter authenticator
25:18 - and we'll call the class twitter
25:20 - authenticator
25:22 - and what we'll do in this class is i'm
25:24 - just at this moment going to have a
25:25 - function which will do precisely what
25:28 - these two lines do i just want to
25:30 - extract extrapolate that into this class
25:34 - so what we're going to do is we're going
25:35 - to define a function called authenticate
25:37 - twitter
25:39 - app
25:40 - it's class
25:41 - method so it'll take self as a parameter
25:43 - and then what i'm going to do is i'm
25:44 - just going to essentially lift these two
25:47 - things here
25:48 - and then move them into this function
25:50 - over here
25:51 - and then what i'm going to do is i'm
25:52 - going to return the auth object that i
25:55 - create in this
25:56 - in this function so the plan is in this
25:59 - twitter streamer class
26:02 - before we had this actual these two
26:04 - lines creating the authentication what
26:06 - we're going to do now is we're just
26:07 - going to create instantiate an object of
26:10 - the authenticator class here in the
26:12 - constructor and then use that object
26:14 - right where we had the previous code so
26:17 - let me actually just write that out
26:18 - because maybe that's a little bit more
26:20 - clear
26:21 - so we'll say self dot twitter
26:24 - authenticator this will be the class
26:25 - object of the authenticator class
26:29 - and then what we'll do here is we'll
26:30 - just say
26:32 - auth is equal to self.twitter
26:34 - authenticator
26:35 - dot authenticate twitter app and that
26:38 - will go ahead and do the same thing that
26:40 - those two lines did but we've just
26:42 - kind of lifted that functionality into a
26:44 - class of its own to make it a bit more
26:46 - modular
26:47 - so i think
26:48 - that's
26:49 - one of the changes i wanted to make
26:51 - let's just go ahead and write this and
26:53 - go ahead and run it to make sure that we
26:54 - didn't break anything so it looks like
26:56 - that's streaming tweets just as it was
26:58 - before seems like that worked out okay
27:00 - the next thing i want to mention that i
27:02 - didn't before that i thought would be
27:03 - worthwhile to point out is this on error
27:05 - method now i did touch on this in part
27:07 - one of the video and i did say that if
27:09 - you encounter an error while you're
27:11 - streaming tweets this method will be
27:12 - triggered and in this case what we're
27:14 - doing here is we're printing the status
27:16 - message of the error but we might want
27:18 - to do a little bit more checking here
27:20 - namely twitter the tweepy api imposes
27:23 - these things um well specifically the
27:25 - twitter api imposes these things called
27:27 - rate limits and essentially if you're uh
27:30 - throttling the twitter api trying to get
27:32 - all this information and twitter doesn't
27:34 - like that it might try to stop you from
27:37 - abusing the system let's say
27:39 - so basically if twitter thinks that
27:42 - you're doing that it's going to give you
27:44 - an error message which is going to be a
27:46 - four two zero 420 message and that's
27:49 - going to be like hey if you keep doing
27:51 - this that will essentially kick you
27:55 - you basically the first time you get
27:56 - this message there's a window of time
27:58 - where you have to wait to access the
28:00 - tweets again and if you keep accessing
28:02 - tweets
28:03 - and you ignore those messages that
28:06 - window of time increases exponentially
28:08 - so you could lock yourself out of
28:10 - accessing this information so it's
28:11 - worthwhile to check that the status
28:14 - message the error code that you're
28:15 - receiving is is of is not in this form
28:18 - so what we want to do is we want to say
28:19 - if status is equal to this error code
28:22 - which is in this case 420 we want to
28:24 - just return false outright that's it we
28:26 - just want to kill the connection so that
28:28 - way we don't
28:29 - you know accidentally boot ourselves
28:31 - from accessing information on twitter
28:33 - and i'll just put in a comment here just
28:34 - so
28:35 - if you're looking at this later and you
28:36 - forget what this is for returning
28:39 - false
28:40 - on
28:41 - data method
28:43 - in case
28:45 - basically in case rate limit
28:47 - is
28:50 - occurs let's say
28:53 - okay so that is i think all of the
28:55 - changes let me just get rid of that
28:56 - extra space there and that is that okay
28:59 - great now we can start into actually
29:01 - making use of the cursor
29:04 - module that we imported there the cursor
29:06 - class and also
29:08 - essentially figure out how to use that
29:10 - to extract timeline tweets on your own
29:13 - timeline or a friend's timeline or
29:15 - things of that nature
29:16 - so
29:17 - to do that what we're going to do is
29:19 - we're going to create another class and
29:22 - we'll call this
29:23 - let's call this class twitter
29:26 - client
29:28 - so it'll be class twitter client
29:32 - and what we'll do here is we will make
29:35 - use well i guess let's first create a
29:37 - constructor object
29:38 - constructor method
29:40 - and so it's just going to take self at
29:42 - the moment and what we'll do is we will
29:45 - create an authenticator
29:47 - object so this is why we created the
29:49 - authenticator class so we'll say
29:51 - self.auth is equal to twitter
29:53 - authenticator
29:55 - uh authenticate twitter app so this is
29:57 - just going to be the auth object
30:00 - so that way we can properly authenticate
30:01 - to communicate with the twitter api
30:04 - and then what we're going to do is we're
30:05 - going to define another class variable
30:06 - which we'll call it twitter client and
30:09 - this is going to be equal to api which
30:11 - as you'll notice is one of the two
30:12 - things that we imported from tweepy in
30:14 - this video and then we'll pass it in the
30:16 - authentication credentials so that way
30:18 - that is authenticated
30:19 - so we're going to make use of that in
30:21 - the following functions that we'll write
30:23 - in this class and actually what i'm
30:25 - going to do here is i'm just going to
30:27 - comment these things out
30:29 - and then we're going to
30:31 - instantiate an object of the twitter
30:32 - client class and see what we can do with
30:34 - this
30:35 - so okay so let's start off with a
30:37 - function that will allow us to get uh
30:40 - tweets so we're gonna call this function
30:43 - i guess git
30:44 - tweets
30:46 - and we're going to pass in the parameter
30:48 - self since this is a class method and
30:51 - then we're also going to pass in another
30:54 - argument here which is called num tweets
30:56 - and this will allow us to determine how
30:59 - many tweets we want to actually show or
31:01 - how many tweets we actually want to
31:02 - extract so we're going to first do this
31:05 - we're going to define a list which is
31:07 - called let's say oh we'll say tweets
31:09 - tweets is equal to an empty list
31:11 - what we're going to do is loop through
31:13 - a certain number of tweets and then for
31:15 - each one we do we're going to store that
31:17 - in the list and return that list to the
31:19 - user so we'll say for
31:21 - tweet in
31:23 - cursor
31:24 - self.twitter
31:27 - client.usertimeline so i'll explain
31:29 - these things as i go
31:31 - dot items num tweets let's actually
31:34 - break this down what i just wrote here
31:36 - so we import a cursor this is a class
31:38 - that will allow us to
31:40 - essentially do we're about to do which
31:42 - is get the
31:43 - user timeline tweets so i should
31:46 - actually call this let's say uh get user
31:49 - timeline tweets
31:51 - uh and yeah let's keep it like that
31:53 - so basically what i'm doing is i'm
31:54 - saying okay that client object that we
31:56 - created here in the in the constructor
31:59 - there's a there's a method for every uh
32:03 - object derived from this api class that
32:05 - has this user timeline functionality
32:07 - that allows you specifying a user to get
32:10 - the tweets off that user's timeline
32:12 - so we haven't specified a user and in
32:15 - that case if you don't specify a user it
32:17 - just defaults to you so if that argument
32:19 - is none which it is by default then it
32:21 - will just get your own timeline tweets
32:24 - and then there's a parameter for the
32:26 - cursor object called dot items and that
32:28 - will tell
32:29 - this thing how many tweets to actually
32:31 - get from the timeline so we can specify
32:33 - that as an argument sent in this uh
32:35 - function here
32:37 - so what we'll do in this loop we're
32:39 - looping through every tweet that this
32:40 - cursor object provides to us and what we
32:42 - can do is we can say tweet dot append
32:46 - yeah tweets sorry tweets dot append
32:48 - tweets is the list that we're storing
32:49 - these things in dot append tweet
32:52 - and then we can just return
32:54 - the
32:55 - tweets list
32:56 - and that can be that will now consist of
32:58 - a list of all of the user timeline
33:00 - tweets
33:01 - so let's go ahead instantiate a client
33:04 - object and see if that works for our own
33:06 - timeline
33:07 - so going down to the bottom here what
33:09 - i'm going to do is i'm just going to
33:10 - create uh first like i mentioned a
33:14 - twitter client's object so twitter
33:17 - client is equal to
33:18 - twitter clients
33:20 - like that and then what i'm going to do
33:22 - is i'm just going to print the function
33:24 - that we just created so twitter client
33:27 - dot get
33:29 - user timeline tweets
33:31 - and that takes an argument that argument
33:33 - is the number of tweets to get in this
33:35 - case i'll say let's say five
33:38 - so let's make sure that works let's save
33:40 - that and run it so we'll see what tweets
33:42 - are on my timeline so it's got quite a
33:44 - few so remember these tweets come in
33:47 - these big blobs so actually to make this
33:49 - a little bit more readable i'm going to
33:51 - replace that number with just one so i
33:53 - just want to
33:54 - first clear my screen to make it a
33:56 - little bit easier to read and then
33:58 - actually go and run this again this will
34:00 - only get one tweet
34:02 - this whole thing is one tweet
34:04 - and basically this is if i go to let's
34:07 - see if i can find uh some information
34:09 - about this tweet that will distinguish
34:11 - it then we'll go to my twitter profile
34:12 - to verify this actually got the correct
34:15 - uh tweet so i see something about sam
34:17 - harris.org
34:19 - let's see is there anything else here
34:21 - um
34:22 - well let's actually go to my twitter
34:26 - yeah so it looks like a lot on sam
34:28 - harris so okay yeah let's verify that
34:30 - this is actually the most recent tweet
34:32 - on my timeline has something to do with
34:34 - sam harris so i have my twitter page up
34:37 - here this is my personal twitter page
34:38 - feel free to follow me if you like
34:41 - no obligation
34:42 - anyway yeah so there there we see this
34:44 - is the most recent tweet that i
34:46 - retweeted from sam harris and it's of
34:48 - the late great christopher hitchens who
34:50 - if you're not a fan of
34:52 - shame on you
34:53 - he's a really interesting guy and i
34:55 - encourage you to read about him if you
34:57 - don't know who he is so
34:59 - this isn't a political channel but he's
35:02 - amazing anyway so that's that so yeah so
35:04 - we've
35:05 - successfully obtained the
35:07 - um
35:08 - the most recent
35:10 - tweet on my timeline great now what if
35:12 - we want to do that for a specific user
35:14 - so if we want to do this for someone
35:16 - other than myself
35:18 - how do we do that
35:19 - well
35:20 - we can modify our function a little bit
35:22 - to
35:23 - allow us to specify that information so
35:25 - let's go ahead and do that
35:26 - so what we're going to do is we're going
35:28 - to create another variable here which
35:31 - we'll call self.twitter
35:34 - user is equal to twitter
35:36 - user we haven't defined twitter user yet
35:38 - we're going to pass that in
35:40 - here as an argument
35:42 - so basically what we'll do is we'll
35:44 - instantiate an object a twitter client
35:46 - object and
35:47 - what we want to do is we want to
35:49 - allow the the person who is using this
35:51 - code to specify a user
35:54 - that they can get the timeline tweets
35:55 - from
35:56 - and actually what we're going to want to
35:58 - do is we're going to put in a default
35:59 - argument of none so if you haven't seen
36:02 - this type of syntax before if you have
36:04 - uh you know like a function like this
36:06 - with an argument that has equal none or
36:08 - equal anything this is a default
36:10 - argument and if nothing is specified
36:12 - here for twitter user it just defaults
36:14 - to none
36:15 - and remember in our case none if you
36:17 - don't specify a twitter user it will
36:20 - just go to your own timeline so
36:23 - we want to specify a user so we will be
36:26 - doing that so the way that we tell the
36:29 - tweepy api that we've specified a user
36:31 - is in this cursor function here this
36:34 - method will say id is equal to
36:36 - self.twitter user
36:39 - so that will
36:41 - do that so now
36:43 - that will actually get the user timeline
36:45 - tweets for whatever user we specify so
36:47 - let's go ahead and give that a run to
36:49 - verify that actually worked so the way
36:52 - that we're going to do that remember is
36:53 - instantiate the twitter client object
36:56 - based on
36:58 - who we want to get the timeline tweets
36:59 - from so in this case
37:01 - i'm going to specify based on a user
37:04 - pycon what is pycon how do i know it's
37:06 - picon let's go back here so pycon if
37:09 - you're not aware is a conference that
37:11 - folks focuses on the python programming
37:13 - language and
37:15 - if if you're not familiar with it you
37:16 - should check it out again also on
37:17 - youtube all the talks are available
37:19 - there lots of really interesting talks
37:21 - and topics i highly suggest you check it
37:24 - out
37:24 - so anyway this is the user this is the
37:28 - tweets that we want to obtain the
37:30 - timeline or the home tweets from and the
37:32 - way that i got pycon was i just followed
37:34 - the
37:35 - what what followed the dot at symbol
37:37 - here so this is the name of the user of
37:40 - which we wish to extract tweets from
37:42 - so let me just minimize that
37:45 - we've specified that it's python we'll
37:46 - also get just one tweet from this
37:49 - user so let's go ahead and write that
37:51 - and run it and see what we get
37:54 - so let's see what do we get here so we
37:56 - get a lot of stuff let's just get some
37:58 - identifying information here
38:01 - let's see so is there a text field so
38:04 - this is the text field this is generally
38:06 - uh we'll it actually the next video what
38:08 - we'll do is we'll break down
38:10 - what uh we're looking at here there's a
38:12 - lot of information here in this tweet uh
38:14 - it's not just the text of the tweet it's
38:16 - the you know id information the user
38:18 - information the retweet information all
38:20 - this other stuff so we'll break down
38:22 - precisely what is going on here but
38:24 - there's a field in this mess which is
38:26 - called text and this is actually the
38:28 - text of the tweet so it says all early
38:30 - bird registrations have been claimed but
38:32 - it's still far from too
38:34 - late to register for pycon us 2018. so
38:37 - let's verify that this tweet is actually
38:39 - on the timeline so if we go here
38:42 - we see that this is the most recent
38:43 - tweet that we extracted indeed all early
38:45 - bird registrations have been claimed but
38:47 - it's too far from too late to register
38:49 - for pycon us 2018. cool so we're we have
38:52 - successfully extracted a timeline tweet
38:55 - from another user
38:57 - so i'm going to mention a couple other
38:59 - functions which are related but
39:01 - different to the user timeline tweet and
39:04 - they all kind of have a similar form so
39:06 - i'm just going to i guess quickly write
39:08 - those down just so you can have access
39:10 - to them you can play with them uh the
39:12 - form of all of these functions is pretty
39:15 - much the same so if you understand how
39:17 - this one works the other ones that i'm
39:19 - going to write which are just two other
39:20 - ones should be pretty similar so the
39:23 - other one that we can do is we can get
39:25 - fred list
39:27 - so this also will be a class method we
39:29 - can also
39:30 - determine how many friends we get by a
39:33 - parameter here that we'll set
39:35 - so this again just like we did before
39:37 - we're going to define an empty friend
39:39 - list which will store all of the friends
39:41 - for a given user in this case i'm not
39:44 - going to specify the user just because
39:47 - i guess it's not really necessary to get
39:48 - the concept of how this thing works so
39:50 - i'm going to define a loop for friend in
39:53 - cursor
39:54 - self.twitter
40:00 - numb friends so just to very briefly go
40:03 - over this you should see a similar type
40:05 - of idea on line 19 as you do on line 25
40:09 - so we're looping over uh
40:11 - twitterclient.friendsinthiscase.usertimeline
40:15 - and then we're getting a certain number
40:16 - of friends of that user
40:19 - based on the argument that we pass into
40:21 - the function and then what we're going
40:22 - to want to do as we loop through is we
40:24 - could say friend list dot append
40:27 - friend and then we can just return
40:29 - the friend list
40:31 - so similar concept to what we saw above
40:32 - just to hammer that pattern
40:35 - or or to give you another instance of
40:37 - that pattern
40:38 - that we saw here we can also get the
40:41 - let's call it get
40:42 - timeline
40:43 - uh let's see let's uh
40:45 - we can get home timeline let's call it
40:47 - that git home timeline
40:50 - tweets
40:51 - so these are uh you know you have your
40:54 - own tweets that you've tweeted out
40:55 - yourself the homeline or the homeline oh
40:57 - my goodness the home timeline tweets
41:00 - those are the ones that if you go to
41:01 - your twitter page on the home page you
41:03 - will see all the people that you follow
41:05 - and everything like that so the top
41:06 - tweet there and and following you know
41:09 - from there are the home timeline tweets
41:12 - and that's we can also extract those for
41:14 - a given user as well so the pattern
41:16 - there is similar
41:17 - uh as well so we'll say self numb tweets
41:21 - like that uh we'll say let's say home
41:24 - timeline
41:27 - uh tweets
41:28 - is the list that will store them in
41:30 - for tweets in cursor
41:34 - self.twitter client so this should look
41:36 - pretty familiar and we'll say dot
41:38 - we'll say home
41:40 - oops client.home timeline tweets
41:44 - or just home timeline
41:46 - dot items and then we'll pass in the
41:48 - number of tweets we wish to get from our
41:50 - home timeline or
41:52 - any user's home timeline that we happen
41:55 - to specify and then we'll say home
41:57 - timeline tweets
41:58 - dot append
42:00 - tweet and then we'll return that
42:03 - as well
42:05 - so these functions all kind of have a
42:07 - similar flavor to them the way that they
42:09 - work this get user timeline sorry about
42:11 - that this getuser timeline
42:14 - here
42:15 - also allows us to
42:17 - specify the
42:19 - id of the user and actually we can very
42:21 - quickly do that here as well just by
42:23 - saying id is equal to self.twitter
42:26 - user and we can also add that onto this
42:29 - one as well
42:30 - so id is equal to self.twitter
42:34 - twitter user
42:36 - so if you want more information about
42:39 - these
42:40 - api calls
42:41 - i will also link in the description to
42:43 - this api reference page which is
42:46 - associated with the tweepy documentation
42:48 - so if you want more information on some
42:50 - of these other things that we maybe
42:52 - didn't have so much time to go into so
42:54 - you can see there's the home timeline
42:56 - function there's also other parameters
42:58 - that you might be interested in instead
42:59 - of getting the number of tweets perhaps
43:01 - you want to get a certain number of
43:03 - pages from a user or from your own
43:05 - timeline there's also some other ones so
43:08 - we saw user timeline you can get
43:10 - retweets of me statuses update statuses
43:12 - you can update your status via the tweet
43:14 - api if you wish to do so destroy status
43:16 - i mean there's a ton of things here and
43:18 - i'm just going to kind of let your
43:20 - imagination go and leave you this page
43:22 - and if you want to experiment with these
43:24 - things this is very well documented and
43:26 - i suggest that you do that
43:30 - we're going to be
43:32 - analyzing some tweets well we're going
43:34 - to really set up the infrastructure
43:36 - first so we can take some tweets and
43:38 - then analyze them using pandas and numpy
43:41 - so in order for us to proceed with the
43:43 - remaining part of this video both of
43:44 - those modules need to be installed so
43:47 - i'm just going to go ahead and open up a
43:49 - separate tab here
43:51 - and if you don't already have numpy and
43:53 - pandas installed then you'll need to run
43:56 - the following command in the terminal
43:57 - let me just make this a little bit
43:58 - bigger
43:59 - so if you run pip install
44:02 - pandas this is going to essentially give
44:04 - us the content that will allow us to
44:06 - store the tweets and the
44:08 - corresponding things that we extract
44:10 - from those tweets into something called
44:12 - a data frame this will allow us to
44:14 - pass this around maybe make a graph out
44:16 - of it so you'll need this in order
44:18 - to store the content into these data
44:20 - frames the other thing that we'll need
44:22 - is also numpy numpy is just a general
44:25 - purpose numerical library for python
44:28 - that does a lot of things we'll only be
44:30 - using it for very small uh you know
44:32 - 0.001 percent of its functionality in
44:34 - this video but you're going to need it
44:36 - nonetheless so i'm going to say pip
44:38 - install numpy so you'll notice by the
44:40 - way that i tried to install pandas it
44:42 - said i already have it which is fine you
44:44 - might see the message as well if you
44:45 - already have pan is installed i'm going
44:47 - to see a similar message here for numpy
44:49 - as well it says that i already have it
44:50 - installed on my machine so i'm good to
44:52 - go so i'm going to close that out and
44:54 - then i'm going to go back to the file
44:56 - that we've been working with and again i
44:58 - will say this at the end of the video
44:59 - but all of the code will be available on
45:01 - my github i'm just continuing on from
45:03 - part two of this series and just working
45:06 - from that code so
45:07 - you can work along with me or you can
45:09 - download the completed code once it's
45:10 - been uploaded with this video as well
45:12 - whatever you prefer so i'm gonna go
45:14 - ahead and import both pandas and numpy
45:16 - so i'm just gonna say import numpy as np
45:19 - and then also import pandas
45:22 - as pd so this is just a general
45:24 - convention this will allow us to refer
45:26 - to anything from the numpy library by
45:28 - just using the dot operator so we can
45:30 - say mp dot the name of a function that's
45:33 - provided from numpy similarly for pandas
45:35 - anytime we want to access a function
45:37 - from pandas we can just say uh and i
45:39 - should say as here
45:41 - as pd so we can just say pd dot the name
45:44 - of a function that comes from the module
45:45 - pandas and that should do it
45:47 - so the next thing that i want to do is i
45:49 - want to add a function in this twitter
45:51 - client class that's going to allow us to
45:53 - essentially just get directly this
45:56 - twitter client api so we can interface
45:58 - with this api and we can essentially
46:00 - extract data from the tweets that we get
46:03 - so i'm going to create another function
46:04 - in this twitter client class let's just
46:06 - go ahead and call it get
46:08 - twitter
46:09 - client api it's going to take self since
46:12 - it's a member of this class and then
46:13 - really all i'm going to do is i'm just
46:15 - going to return the variable that we
46:17 - defined up here so i'm just going to say
46:18 - return self.twitter client and that's it
46:21 - so that's the only thing i want to add
46:23 - in this class let's go down to the
46:25 - bottom of the file
46:27 - so the bottom of the file we have this
46:29 - this content from previous videos i'm
46:30 - just going to go ahead and remove all
46:32 - this stuff within the main portion of
46:34 - this file and i'm going to create
46:36 - another class which is going to be
46:37 - responsible for analyzing the tweets
46:40 - that we extract from twitter so i'm
46:41 - going to call this class
46:43 - let's call it um
46:46 - let's call it tweet analyzer so we'll
46:48 - say tweet analyzer
46:50 - and this is just going to be a class
46:52 - we'll go ahead and put in a comment here
46:53 - to briefly describe what this class is
46:55 - supposed to be doing let's say
46:57 - functionality
46:58 - for analyzing
47:00 - and
47:01 - categorizing
47:03 - content from tweets something like that
47:06 - okay so that's a brief description of
47:08 - that class so we'll eventually go and
47:10 - fill this in let me go down to the main
47:13 - portion of the file here and let's just
47:15 - go ahead and create a twitter client and
47:18 - then use that function that we created
47:19 - before to allow us to get the api so we
47:22 - can interface with that because that's
47:23 - what we're going to be using to get the
47:25 - tweets before we analyze them so i'm
47:27 - going to say twitter
47:28 - clients which is a variable i'm going to
47:30 - be defining that equal to the twitter
47:32 - client class
47:34 - and then i'm just going to go ahead and
47:35 - call the function that we just created
47:37 - i'm going to say api is equal to twitter
47:39 - client
47:40 - dot get twitter client api which is what
47:43 - we called it so now api is a variable
47:46 - that has the twitter client object that
47:48 - we created in that class
47:50 - so now what i want to do is i also want
47:52 - to
47:53 - start streaming some tweets so let's go
47:56 - ahead and define a variable that we'll
47:58 - just call tweets
47:59 - and this is going to be something that
48:02 - we can
48:03 - obtain from the client that we just
48:04 - created there so i'm going to say api
48:07 - dot
48:07 - user underscore timeline so user
48:10 - timeline is a function that is provided
48:12 - from the twitter client api so it's not
48:14 - a function that we've written this user
48:15 - timeline is not a function that we've
48:17 - written it's a function from the twitter
48:19 - client so just to be clear on that so
48:21 - this function will allow us to specify a
48:23 - number of things
48:25 - one thing we can specify is the user
48:27 - that we want to extract tweets from and
48:30 - another thing that we can also specify
48:31 - in this function is how many tweets we
48:33 - want to extract from that user so i
48:36 - guess just for the sake of example let's
48:38 - go ahead and say that the screen name
48:40 - which is how we specify the user is
48:42 - equal to
48:43 - some twitter user in this case i'm going
48:45 - to be using donald trump as an example
48:47 - because
48:48 - uh i i guess he's you know someone
48:50 - that's well known on twitter so real
48:52 - donald trump is his twitter handle so
48:55 - i'm just going to use that as the
48:56 - variable screen name that we're passing
48:57 - into this function that's again given to
48:59 - us by the twitter client api and then we
49:02 - can also specify how many tweets we want
49:04 - to extract from this page by saying
49:06 - count which is a variable again you can
49:08 - consult the documentation for what the
49:10 - variables should be called in these
49:11 - functions you can't just call screen
49:13 - name anything you can't just call count
49:14 - anything these are variables that are
49:16 - specified from the documentation that we
49:17 - can hard code values to and that's what
49:19 - we're doing now as we call this function
49:22 - so account will specify how many tweets
49:23 - we want to grab from in this case
49:25 - realdonald12 trump let's just say 20.
49:28 - and then what we can do is we can let's
49:29 - just go ahead and just make sure this
49:30 - works and say print tweets so with any
49:33 - luck what this is going to do is it's
49:34 - going to go to the real donald trump
49:36 - stream the most recent 20 tweets and
49:38 - then we'll print that content out on the
49:40 - screen so i'm just going to clear the
49:42 - terminal i'm going to say python
49:44 - this is called analyzing twitter data
49:46 - which is the file that we're in and i'm
49:47 - just going to write that so we see here
49:49 - that we've got
49:52 - so i actually had to restart that
49:53 - because i believe i was streaming or i
49:56 - was running a file from another
49:57 - directory with the same name so that was
49:58 - my fault so again just going back to
50:00 - clearing the terminal and then running
50:02 - this file which is in the directory that
50:04 - we're in we run this we get this content
50:06 - here which we can see is coming from
50:08 - donald trump's
50:10 - twitter page so you can see that there's
50:11 - a few key indicators here from just the
50:13 - text see donald j trump
50:15 - so there's a couple of uh
50:18 - basically this is just one big tweet
50:19 - which has a number of
50:21 - features for a tweet which are specified
50:23 - in the json format and we can extract
50:26 - parts of that if we want to analyze
50:28 - whatever part that we might be
50:29 - interested in so in this video what
50:31 - we're going to be doing is just kind of
50:33 - honing in on a few key aspects of
50:35 - what content we can extract from a
50:37 - single tweet and then just putting that
50:38 - into a data frame so we've got this
50:40 - tweet we know that it works we're
50:41 - streaming tweets from donald trump's
50:43 - twitter page and now what we can do is
50:45 - we can go ahead and create a data frame
50:47 - which is going to store
50:49 - that content and just going to allow us
50:51 - to neatly organize that and also to
50:53 - process it for further data analysis
50:56 - later
50:56 - so we're going to make use of this tweet
50:58 - analyzer class which we've created up
51:00 - here and also the numpy and pandas
51:03 - modules that we imported
51:04 - so the first thing that i want to do is
51:06 - i want to create a function in this
51:08 - tweet analyzer class let's call it
51:10 - tweets
51:11 - to data frame so it's just going to take
51:13 - the tweets that we've gotten here which
51:15 - is just this big json string and then
51:17 - convert it
51:18 - to a data frame
51:21 - so in this it'll take self it's a member
51:23 - of the class and we'll also take the
51:24 - tweets that we want to convert to a data
51:26 - frame so what i'm going to do here is
51:28 - i'm going to create the data frame
51:29 - object
51:30 - and i'm going to say df which is going
51:32 - to be the data frame is equal to um ppd
51:38 - data frame
51:39 - so this
51:41 - is a function that's provided to us from
51:42 - pandas this will allow us to
51:44 - create a data frame based on some
51:46 - content that we feed it and then what we
51:48 - can do is we can specify the data that
51:49 - we want to make the data frame out of so
51:51 - we can say data is equal to and what
51:53 - we're going to want to do in this is
51:55 - give it a list and this list is going to
51:57 - be created from the tweets we feed in to
51:59 - this function so i'm going to say this
52:01 - is equal to the text of the tweet which
52:04 - we can extract by
52:06 - essentially saying tweet dot text
52:09 - for this tweet that we're gonna do i'm
52:10 - just gonna write out the loop and then
52:11 - i'm gonna explain what precisely this
52:13 - loop does
52:14 - for tweet and tweets
52:16 - so
52:16 - just to kind of unpack what's going on
52:18 - here we've specified this variable that
52:20 - we're feeding into the data frame
52:22 - function and we're creating a list and
52:24 - we're looping through every single tweet
52:26 - in this tweets thing that we're feeding
52:28 - in here and basically what we're doing
52:29 - is that we want to extract the text from
52:32 - each of those tweets so we're creating a
52:34 - list where each object in that list is
52:36 - the text of each of the tweets so that's
52:38 - what this data list is corresponding to
52:40 - and then what we're going to do is we're
52:42 - going to specify the column
52:44 - for which just to specify where these
52:46 - are going to live in the data frame so
52:47 - i'm just going to give the column a name
52:49 - so columns is equal to let's say tweets
52:53 - just to specify kind of what we're
52:54 - storing in this column and then i'm just
52:57 - going to go ahead and return the data
52:58 - frame that we've created here
53:00 - so down here we have our tweets and then
53:02 - what i'm going to do is i'm going to go
53:03 - ahead and say
53:04 - data frame is equal to well i guess
53:07 - before we do that we need to create a a
53:09 - tweet analyzer object for the class
53:11 - we've created so let's call it tweet
53:14 - analyzer
53:15 - let's have this be equal to the tweet
53:18 - analyzer class so it's for creating an
53:20 - object of this class
53:21 - and then we can go ahead and say
53:24 - now that we've specified that data frame
53:26 - is equal to tweet analyzer dot
53:30 - tweets to data frame
53:33 - and then we'll feed in the tweets that
53:34 - we've got from this line up here so
53:36 - we've gotten our tweets from using the
53:38 - client api and then what we're doing
53:40 - here is we're creating a data frame
53:41 - object which again is being returned
53:43 - from this function and then we're
53:44 - setting that equal to what this function
53:46 - is doing which is essentially taking the
53:48 - tweets we've gotten
53:49 - converting that into a data frame and
53:50 - then storing that data frame in df here
53:53 - so just to see what we've got we can go
53:55 - ahead and say print
53:56 - df.head and this is just going to print
53:59 - out the first couple elements in this
54:00 - case the first 10 elements of the data
54:02 - frame that we've created so i'm going to
54:04 - write that i'm going to clear the
54:06 - terminal and then i'm going to say
54:07 - python
54:08 - analyzing twitter data if we do this we
54:11 - get very nicely formatted information
54:13 - here so each of these are the first 10
54:15 - objects of this data frame that we've
54:17 - created and you can see the tweet text
54:19 - of each of these is stored under this
54:21 - heading tweets
54:23 - so it's kind of cool
54:24 - so we can also extract other pieces of
54:27 - information from each of the tweets so
54:29 - let's actually just i'm going to comment
54:31 - i'm going to comment this out for now
54:33 - and
54:34 - what we can do is we can figure out what
54:36 - other attributes of these tweets we can
54:38 - actually extract data from so if i say
54:41 - print dir of tweets of xero what i'm
54:44 - essentially doing is i'm printing out
54:46 - the essentially the information that we
54:47 - can extract from just the first tweet so
54:49 - this is going to show us what types of
54:52 - pieces of information we can extract
54:54 - from every tweet i'm just
54:56 - confining my my space to just looking at
54:58 - the first tweet and seeing what objects
54:59 - we can extract from this tweet happen to
55:02 - be so i'm going to go ahead and write
55:04 - that and run this thing so if we run
55:06 - this we see all of the it's essentially
55:08 - a list of all of the possible things
55:10 - that we can ask of this tweet we can ask
55:12 - the user we can ask the text which we
55:14 - saw we can ask how many retweets there
55:17 - are we can ask the how many likes
55:18 - they're our favorite count so we can ask
55:20 - where this tweet actually came from the
55:22 - id a whole bunch of things and so what
55:25 - we're going to want to do is we're going
55:26 - to want to
55:27 - figure out how to extract this
55:29 - information from each individual tweet
55:31 - put that information into our data frame
55:33 - and then kind of build on this so not
55:35 - only do we have the text for each of the
55:36 - tweets but we've also got maybe the id
55:39 - the like count things like that
55:41 - so that's what we want to do so i'm just
55:43 - going to go ahead and comment this out
55:44 - that's just supposed to kind of
55:45 - illustrate what things we can extract so
55:48 - now what we can do is we can also kind
55:50 - of be a little bit more granular i guess
55:52 - for another sake of example let me print
55:54 - out
55:54 - tweets of xero.id so the way that we
55:57 - access let's say the id of tweet 0 in
56:01 - this list we've extracted we can just
56:03 - use the dot id
56:05 - method here to allow us to extract what
56:07 - the id of that particular tweet is so
56:09 - i'm going to write that run this here
56:11 - and we see that if we run this this is
56:13 - the id that corresponds to the tweet
56:15 - that we've we've gotten there we can
56:17 - also say let's just say retweet count
56:21 - which is another one of the things that
56:22 - we can ask about this tweet if we run
56:25 - that we can get how many
56:26 - let's see so maybe it's not spelled
56:28 - correctly here let me just make sure
56:29 - that i spell that
56:32 - try that again
56:33 - so this is going to give us how many
56:35 - times this particular tweet tweet zero
56:36 - and that list was retweeted it's a total
56:38 - of 5 394 times
56:41 - so that's just some information about
56:43 - how we can extract this content and
56:46 - there's of course many different
56:47 - possibilities for the type of directions
56:50 - that you go with this information so
56:52 - let's just go back up to our function
56:54 - here and then kind of build on this data
56:56 - frame to allow us to continually add to
56:58 - it so we can kind of get get all of this
57:00 - information in a more helpful context
57:03 - for us to process it
57:04 - so let's go ahead and say that we want
57:06 - to in addition to storing the text of
57:08 - the tweet let's say that we also want to
57:10 - store the id so we can say df
57:13 - id so we're essentially creating a
57:14 - column in our data frame with the
57:16 - heading id and we can set this equal to
57:20 - something so we're going to essentially
57:22 - feed it in a numpy array which is going
57:24 - to be
57:25 - essentially a list of the
57:28 - content that we're after for each of the
57:30 - tweets so in this case we're interested
57:32 - in the id of each of the tweets so we're
57:34 - going to want to loop through every
57:35 - single one of the tweets in the tweets
57:37 - that we're given and then extract the id
57:39 - from that
57:40 - so i'm going to say np.array so this is
57:42 - just a numpy array object that we're
57:45 - creating here and this is basically what
57:47 - the data frame uh
57:49 - we're creating a data frame column based
57:51 - on this array and what we're converting
57:53 - to an array is a list so the list that
57:55 - we're going to be feeding into this is
57:58 - similar to what we saw above so we can
58:00 - say tweet dot id so that's again how we
58:03 - extracted the id for a specific tweet as
58:07 - we saw down here below we wanted to
58:08 - extract the retweet count or the id we
58:11 - did tweet
58:12 - zero or whatever id that corresponds to
58:14 - in our list of tweets dot id dot retweet
58:17 - count dot whatever we happen to be
58:19 - interested in so we're doing the id here
58:21 - so what we're doing is we want to
58:23 - extract that information uh kind of in a
58:26 - similar format to what we saw up up here
58:28 - so for tweet in tweets
58:31 - so again what we're doing is we we take
58:33 - the tweets that we've gotten in from
58:35 - this function we're looping through each
58:37 - every every single one of those in that
58:38 - list and then we're saying give me the
58:41 - id of that particular tweet store it an
58:43 - array convert that array to a numpy
58:45 - array and then create a column in this
58:47 - data frame with the heading id based on
58:49 - every single one of those right there's
58:51 - a lot going on in that one line so now
58:53 - that we have that let's just go ahead
58:55 - and make sure that we
58:57 - have the data frame update appropriately
58:58 - so i'm going to uncomment this line down
59:00 - here that creates the data frame based
59:02 - on our function that we have part of our
59:04 - class and then let's just go ahead and
59:06 - write the thing that we had before which
59:08 - was print
59:11 - df dot head and let's just see what the
59:13 - first 10 elements look like so we'll
59:15 - write that and then we'll give this a
59:17 - run so if we run this we see that not
59:19 - only do we have our tweets
59:21 - for each of the columns here but we for
59:23 - each of the rows here rather we also
59:25 - have the id as well so the corresponding
59:27 - id for this tweet is stored right here
59:29 - corresponding id for this tweet here
59:32 - right there so on and so forth so
59:34 - basically we're just going to keep
59:35 - extracting some information that might
59:37 - be useful and it's going to have a very
59:39 - similar pattern to
59:41 - this line so i'm just going to go ahead
59:42 - and copy this line a couple times and
59:44 - we're going to see what other
59:45 - information we can extract and again if
59:46 - you want to see any of the other types
59:48 - of pieces of information that you can
59:50 - extract from a given tweet you can just
59:52 - uncomment this to see what those
59:54 - attributes are so we're just going to go
59:56 - through this and and kind of show some
59:57 - other examples so let's say i want to
59:59 - figure out what the length of a tweet is
60:01 - so i want to figure out how long a given
60:04 - tweet is for one reason or another so
60:06 - what i can do is same format i want to
60:08 - loop through all the tweets in the
60:10 - tweets that we've been given in this
60:12 - function
60:13 - but instead of the id i want to
60:15 - analyze the text and specifically i want
60:18 - to analyze the length of that text right
60:21 - so i'm going through each of the tweets
60:23 - and i'm saying
60:25 - figure out what each of the length of
60:27 - the tweets are sorry i keep undoing
60:29 - something here
60:30 - let me just put this here
60:32 - right okay so there so i'm i'm
60:33 - extracting the length of each of the
60:35 - tweets as we loop through them and i'm
60:37 - storing that in this list converting it
60:39 - to a numpy array and then creating a
60:41 - column called len which is going to
60:43 - store that information so maybe another
60:45 - attribute that we we care about is the
60:47 - date that the tweet was posted so same
60:50 - sort of concept here the way that we can
60:52 - extract that information again which we
60:54 - can figure out by uncommenting this line
60:56 - here and seeing what the attributes are
60:58 - you can also consult the documentation
61:00 - by the way to see if it's not clear
61:01 - based on the name as to what those
61:03 - things correspond to you can see what
61:06 - a more elaborate definition of each of
61:08 - those attributes in the documentation so
61:10 - if you're not sure you can consult that
61:12 - so for us to to get the date here we can
61:15 - say created dot created
61:18 - at so this is going to give us the date
61:20 - that that particular tweet was created
61:21 - at same process there let's say that we
61:24 - also want to do the source so this is
61:26 - going to allow us to determine where the
61:29 - tweet is coming from was it from an
61:31 - iphone was it from an android
61:33 - desktop pc and the way that we can get
61:35 - that information is by saying us dot
61:37 - source
61:39 - let's say we also want to do the number
61:41 - of likes
61:42 - so in that case what we're going to be
61:44 - doing is doing the favorite count
61:47 - favorite underscore count and then let's
61:49 - do one more let's say that we also want
61:51 - to figure out how many retweets there
61:53 - were for a given tweet
61:55 - so what we can do there is instead of
61:57 - favorite count as we saw down below we
61:59 - can just do retweet
62:01 - count
62:03 - so now we've got all of these new
62:04 - columns in our data frame that we've
62:06 - created here and they're being added to
62:08 - the data frame that we're returning
62:10 - here and then when we create the data
62:12 - frame object here from the tweets we're
62:14 - given we should be able to see a whole
62:16 - bunch of new columns that we've created
62:18 - from this function let's just go ahead
62:20 - and write that clear the terminal
62:22 - and then let's just make sure that we
62:23 - see all that information so i'll run
62:25 - this here and it looks like that worked
62:28 - so we have the text of each of the
62:29 - tweets the corresponding ids the length
62:32 - so the number of characters in each of
62:34 - the tweets the date on which the tweets
62:36 - were posted uh where it's coming from so
62:38 - donald trump likes to post from
62:40 - an iphone how many likes each of the
62:42 - tweets got so this one got particularly
62:44 - uh
62:45 - the most likes out of any of these most
62:47 - recent tweets and then how many retweets
62:49 - each of these got as well
62:51 - so that's just kind of a bird's eye view
62:53 - of the type of information that you can
62:55 - extract from each of these tweets of
62:56 - course the possibilities are somewhat
62:59 - limitless in terms of what you can take
63:00 - away from that in terms of what you can
63:02 - actually what insights you can derive
63:04 - from that so this is just kind of
63:06 - setting up the scaffolding and we'll
63:07 - continue to work with the scaffolding
63:10 - that we're setting up here and continue
63:11 - to tweak at it and
63:13 - see what we can see what we can do
63:18 - so we created a data frame with the id
63:21 - length of a tweet the date that that
63:22 - tweet was created uh where that tweet
63:24 - came from like an iphone how many likes
63:26 - that got retweets so on so we've kind of
63:29 - got this data frame now of every single
63:31 - tweet that we can get from some user for
63:33 - some amount of tweets and we can now
63:36 - take this data and try to visualize it
63:38 - in some way we're going to be doing some
63:40 - very simple time series graphs based on
63:43 - the data that we've already stored and
63:45 - created in this data frame
63:46 - so one thing i guess i first want to do
63:48 - just for consistency's sake is just
63:50 - change this to a lowercase t doesn't
63:52 - really make any difference you can keep
63:54 - it uppercase but i guess i just
63:56 - a bit pedantic so i just want to make
63:58 - sure that everything's consistent
63:59 - okay so now that we've got all of this
64:01 - let's go down here i'm going to get rid
64:03 - of these commented lines we've got our
64:06 - data frame being created i'm also going
64:07 - to get rid of this
64:09 - showing the head of the data frame since
64:11 - we already know what that looks like
64:12 - so let's just before we actually get to
64:15 - plotting let's just see what we can do
64:17 - from the data frame that we have so far
64:19 - to see what types of insights we can
64:21 - derive with without even actually
64:23 - graphing anything so for instance
64:25 - there's a number of things you can do
64:27 - here there's you know countless things
64:28 - that you can analyze uh we'll just go
64:30 - over a couple of them and then from
64:31 - there we'll
64:32 - we'll look at how we can plot some
64:34 - things and again that's also relatively
64:35 - endless as well so this is by no means
64:39 - extensive this is just kind of dipping
64:41 - your toes into the water of what you can
64:43 - extract from this type of data
64:45 - so one thing we can get from our data
64:47 - frame that we've already got is let's
64:49 - just say that we want to
64:50 - maybe with the data frame we have we
64:52 - want to figure out what is the average
64:54 - length of all of the tweets that we have
64:56 - in our data frame so we we here collect
64:59 - 20 tweets and we want to figure out okay
65:01 - what is the average length of all of
65:03 - those 20 tweets and of course we can
65:05 - change this count from 20 to 200 to 400
65:07 - or whatever we care about so let's just
65:10 - write in a comment here which is get
65:12 - average length
65:14 - over
65:15 - all tweets and now that we've stored
65:17 - everything in this data frame it's going
65:19 - to make it really easy for us to just
65:20 - manipulate the data that's already
65:22 - present in that data frame and then just
65:24 - get this answer and the way that we can
65:25 - do that is by manipulating the
65:28 - mean function in numpy which is just
65:30 - going to be something that we're going
65:31 - to run on a list in the data frame so
65:34 - let me show you what i mean by that i'm
65:36 - just going to print out the result that
65:38 - comes from running the mean function so
65:40 - i'm going to say mpi or mp dot mean
65:43 - there's a little bit of a lag here since
65:44 - sometimes the autocomplete can be
65:46 - annoying in bim
65:47 - so anyway i'm calling the mean function
65:50 - and what am i calling the mean function
65:51 - on i want to figure out the mean of the
65:54 - length of the tweets so i'm saying df
65:57 - length so basically what i'm doing there
65:59 - is df length is going to return a list
66:02 - it's going to return a list of all of
66:03 - the links of all the 20 tweets in this
66:05 - case and then we're going to be running
66:07 - the
66:08 - mean function which is provided to us
66:09 - from numpy on that list and then we're
66:11 - going to get a single number which we're
66:12 - printing out to the screen so that's
66:14 - what is going on in this line i'm just
66:16 - going to go ahead and write that clear
66:17 - the terminal and then we can go ahead
66:19 - and say python this is called
66:21 - visualizing twitter data pi
66:23 - and we get here that the average length
66:26 - is 122.2
66:28 - characters per
66:29 - per tweet in this in this
66:31 - size so we can of course increase that
66:33 - to let's say like maybe i don't know 200
66:35 - tweets let's see how that changes when
66:37 - we get a larger sample of data so it
66:39 - actually doesn't change terribly much
66:40 - and it's only gone up by a little bit so
66:42 - it's kind of interesting
66:44 - so i'm gonna bring that back down to 20.
66:46 - another thing we can ask is let's say we
66:48 - want to figure out what is the tweet
66:50 - that received the most likes in the
66:53 - sample that we've gotten so we can say
66:54 - get the number
66:56 - of likes for the most
66:59 - liked tweet
67:01 - so what is uh what is the tweet that
67:03 - received the most like or specifically
67:05 - how many likes do the most like to tweet
67:07 - get so we can also do something pretty
67:09 - similar here i'm just going to copy this
67:10 - line
67:11 - put it here and instead of taking the
67:13 - mean over a list what i want to do is
67:15 - take the max because what we want to do
67:17 - is we want to figure out the maximum
67:20 - number of likes that is from the
67:23 - likes column in our data frame so the
67:25 - likes column stored all of the number of
67:27 - likes for every given tweet i'm taking
67:29 - the max of that list using the numpy max
67:32 - function and then i'm printing that out
67:33 - to the screen so again we can write that
67:35 - save it run it see what we get so the
67:38 - maximum number of likes it looks like
67:40 - over those 20 tweets was something like
67:41 - 121 862. so again maybe i'm just curious
67:46 - i want to see how this scales if we
67:48 - increase the number of tweets from 20 to
67:50 - 200 um and it looks like it's gone up by
67:52 - a factor of two uh from 121 000 to 332
67:56 - 000.
67:57 - so that's interesting
67:59 - uh one more so let's say that we want to
68:01 - do a very similar thing or instead of
68:02 - getting the number of
68:04 - likes we want to get the number of
68:06 - retweets so get the number of uh let's
68:09 - say retweets
68:10 - for the most let's say retweeted
68:14 - retweeted tweet and so that would be the
68:16 - same exact syntax the only thing that
68:18 - i'm changing here is the operation on
68:20 - which i'm performing the max function on
68:22 - so instead of performing it on likes i'm
68:24 - going to be performing it on the
68:25 - retweets column of the data frame and
68:28 - then printing that out to the screen so
68:30 - let's go ahead and write that
68:33 - and then run it see what we get
68:35 - so the maximum number of retweets is 107
68:38 - 000
68:39 - so that's interesting as well so of
68:40 - course these are just printing out the
68:42 - numbers to the screen it's very minimal
68:44 - in terms of what we're actually doing
68:45 - with the data there's endless
68:47 - possibilities for what you can actually
68:48 - do and extract from these sorts of
68:52 - insights that we're deriving from this
68:53 - data so all right so now let's move on
68:55 - to plotting some time series data and
68:58 - i'm just going to put in a comment here
68:59 - to distinguish what we're going to do
69:01 - from what we previously did time series
69:04 - and let's say hypothetically that what
69:06 - we want to do is we want to create a
69:07 - time series plot that's going to show us
69:10 - the number of let's say likes that
69:12 - donald trump received on any given day
69:14 - over the course of some days which we
69:16 - can extract from you know some given
69:18 - count here so we extract let's say 200
69:20 - tweets maybe that's over you know ranged
69:22 - over some number of days and then for
69:24 - every one of those days donald trump got
69:26 - a certain number of likes we want to
69:28 - plot that number of likes that he got on
69:30 - a given day and then just plot that for
69:32 - every given day over this time series of
69:35 - dates
69:36 - okay so that's the general idea of what
69:37 - we want to show so let's create a
69:39 - variable which we'll call time likes
69:41 - this is going to be equal to a pandas
69:44 - series object so we're essentially
69:46 - creating a series object so we can
69:47 - eventually plot this as a time series so
69:50 - i'm going to say this is equal to pd
69:52 - series and then
69:54 - this takes two things the data so
69:56 - there's a data frame that we want to
69:58 - feed it
70:00 - which is going to be values so this is
70:02 - pd
70:04 - uh data frame of likes so we want to
70:07 - actually get in the number of likes
70:08 - there that should be in quotes
70:11 - likes so we're getting the values of the
70:14 - of each of the likes so every day
70:16 - there's going to be a certain number of
70:18 - likes that are given and we're
70:19 - extracting the values from that and then
70:21 - oops and then what we also want to
70:23 - receive in this
70:25 - time series function is the index and
70:28 - the index is essentially the x-axis so
70:30 - what we're plotting um and then for each
70:33 - what we want to do is for each day show
70:35 - the number of likes so the number of
70:37 - likes is kind of the y-axis the date is
70:40 - the time series itself the number of
70:41 - days so we're going to set the index is
70:44 - equal to the data frame of the date
70:46 - which is something that we've already
70:47 - extracted from from before from our data
70:50 - frame so this is our time series object
70:52 - that we've created from pandas and now
70:54 - that's ready for us to actually just go
70:56 - ahead and plot that so what we can do is
70:58 - we can say time underscore likes dot
71:00 - plot and what we can do is we can we can
71:03 - feed this a few arguments
71:05 - i'm going to be feeding this plot
71:06 - function two arguments basically just
71:08 - the size of the figure which specifies
71:10 - how big this graph is going to be
71:12 - and then also let's say the color so
71:14 - this is going to be the color of the
71:15 - line that's plotted throughout the days
71:17 - for every given day so i'm going to say
71:20 - fig size
71:22 - is equal to
71:23 - i'm just going to say 16 comma 4 that's
71:25 - just the x y axis of the image that
71:28 - we're going to see and then also the
71:31 - color which we can
71:33 - put as red so the
71:35 - function takes in a string in this case
71:38 - it's just a single character that
71:39 - corresponds to a given color and you can
71:42 - consult the
71:43 - documentation for what other parameters
71:46 - this this can take and what valid
71:48 - arguments these parameters can take as
71:50 - well so i'm just kind of hard coding
71:51 - those two
71:53 - and you can leave those blank if you
71:54 - want to it's not necessary to put them
71:56 - in there but sometimes you might want to
71:58 - tweak the graphs in some specific way so
72:00 - then what we do once we've kind of
72:02 - created our data that we're going to
72:04 - plot is once we've created our plot that
72:05 - we're going to show we actually need to
72:08 - show the plot so we're going to say plt
72:10 - dot show now this plt is something that
72:13 - we need to actually import from map plot
72:15 - lib which is going to allow us to
72:18 - show the plots we've created so i'm
72:20 - going to go up to the top of my file and
72:22 - i'm going to make sure that i have uh
72:24 - matplotlib
72:25 - imported so i'm going to say for import
72:27 - i'm going to say let's say
72:30 - from map plot
72:32 - actually now what i'll do is import
72:34 - sorry about that plot lib.pyplot
72:39 - as plt so basically i'm importing this
72:42 - library specifically at matpotlib.pyplot
72:45 - and i'm importing it as uh plt so this
72:47 - will hopefully show up eventually
72:49 - sometimes the autocomplete and vim can
72:51 - take a little while and lying behind a
72:53 - little bit there we go so anyway so i'm
72:54 - importing the matplotlib library
72:56 - specifically from that i'm importing pi
72:58 - plot and then i'm going to refer to that
73:00 - as plt as a shorthand similar to what we
73:03 - did for numpy and for pandas so i should
73:06 - also say that you should have map plot
73:08 - lib installed and if you don't have it
73:10 - installed you can just open up a new
73:12 - terminal to make this a little bit
73:13 - bigger and you can just run pip install
73:16 - matplotlib and this should install
73:18 - everything that you need i believe this
73:20 - comes with numpy already so you might
73:22 - already have it installed if you have
73:23 - numpy installed if you don't if you want
73:26 - to be sure you can run the command that
73:27 - i just ran which is installing matpotlib
73:30 - you'll see that i already have this
73:31 - requirement satisfied so i i'm good to
73:33 - go you might already see that as well if
73:35 - you don't then it will install on your
73:37 - machine and then you should be
73:39 - good to go so i'm just going to close
73:40 - that go back to our code here go back to
73:42 - the bottom of the file which is where we
73:44 - were previously writing code and then go
73:46 - from there so again just to review we've
73:48 - created a time series object using
73:51 - pandas we've created a plot with some
73:54 - specifications and then we're showing
73:55 - that plot using the mapplotlib.pypot
73:58 - module so let's write this i'll clear
74:00 - the terminal and then i'm just going to
74:01 - say python visualizing twitter data
74:04 - that's going to pop up a window or
74:06 - should pop up a window it doesn't know
74:08 - what data is
74:09 - i think the reason for that is
74:11 - this is not
74:13 - this is not correct it's not data it's
74:14 - date right so we want the y the x axis
74:18 - to be the uh dates so that was my
74:20 - mistake there write that again try it
74:22 - again so we're gonna write this and now
74:24 - what we have here is a sequence of dates
74:27 - along the x-axis the number of likes on
74:30 - the y-axis and we can see kind of how
74:33 - the number of likes changes over the
74:35 - course of a given set of dates so from
74:37 - however long ago we were able to extract
74:39 - 200 tweet from all the way to the
74:42 - present day of this recording and then
74:44 - there's you know maybe a few interesting
74:45 - things that you can see from this graph
74:47 - there's a big spike right here number of
74:49 - likes so it might be interesting to
74:50 - drill down as to why that is uh this
74:53 - whatever tweet this was got you know
74:55 - just head and shoulders above every
74:57 - other tweet here so that's that might be
74:59 - kind of interesting to
75:00 - examine further so i'm just going to
75:02 - close that and then go back to our code
75:05 - so that's a time series for the number
75:07 - of likes but we can also do time series
75:09 - for other things so
75:10 - really we can just kind of modify this
75:12 - code very slightly to do let's say the
75:14 - time series for
75:15 - retweets so maybe i'll take this i'll
75:18 - paste this down here and then instead of
75:20 - time likes let's call this time
75:22 - retweets and let's also rename that so
75:25 - that's also time retweets
75:28 - and then the series object that we're
75:30 - going to create we want to create not
75:32 - with likes but with retweets and
75:34 - the date is fine because we still want
75:36 - to see how the retweets the number of
75:38 - retweets changes over the course of a
75:40 - given set of days this is fine we're
75:42 - just creating the same plot and then we
75:43 - just show it so let's just go ahead and
75:45 - see i'm just going to comment this
75:47 - initial time series out here the one
75:49 - that we're doing likes i'm just going to
75:50 - comment that out so we don't get too
75:51 - many plots
75:52 - save that and then run it so we should
75:54 - get a very similar looking plot where
75:56 - now
75:57 - we can see it kind of a similar type of
75:59 - graph and
76:00 - this spike you'll notice also
76:03 - corresponds to the same spike probably
76:05 - where that huge
76:06 - that tweet that was liked a lot was also
76:08 - retweeted quite a bit too so you can see
76:10 - the number of retweets here on the left
76:13 - side of the screen the y-axis is much
76:15 - less than the number of likes however
76:18 - the number of retweets is in some way
76:20 - correlated to the number of likes so
76:22 - that's kind of interesting too so this
76:25 - tweet whatever donald trump tweeted at
76:26 - this time seemed to have garnered a lot
76:28 - of likes and retweets and it seems like
76:30 - the the graph is
76:32 - somewhat consistent with the number of
76:34 - likes and perhaps what we can do just to
76:36 - kind of verify this um hypothesis or to
76:39 - kind of
76:40 - verify it but to give a little bit more
76:42 - evidence that this hypothesis is
76:44 - probably true is we can we can
76:46 - bunch the time series together onto one
76:48 - plot so instead of plotting two separate
76:51 - time series where we have one for the
76:52 - number of likes and one for the number
76:54 - of retweets one thing we can do is we
76:56 - can just put them on the same plot and
76:57 - see how they correlate
76:59 - so let's just go ahead and do that so
77:01 - i'm just going to comment this out
77:03 - and then what i'm going to do is i'm
77:04 - just going to
77:06 - copy this
77:07 - so
77:09 - i'm creating the time series likes just
77:11 - like we did before i'm creating the plot
77:13 - and i'm going to change the plot
77:14 - actually instead of doing the color and
77:16 - the fig size i'm actually going to
77:18 - change this to well i'll leave the fixed
77:20 - size
77:21 - i will get rid of the color i'm going to
77:23 - add in a label because we're going to
77:25 - have two lines on this time series one
77:28 - is going to be a label for the number of
77:30 - likes and what is going to be a label
77:32 - for the number of retweets so for this
77:34 - one this is likes i'm going to
77:36 - put this
77:37 - line as labeled as likes and then i'm
77:40 - also going to put in a legend is equal
77:43 - to true so this basically we'll put in a
77:45 - little box in the in the time series
77:47 - chart which will show us what line
77:49 - corresponds to what label and that's
77:51 - going to be kind of helpful because
77:53 - what's nice about
77:54 - pandas and matplotlib is that if we plot
77:57 - multiple lines here it will be smart
78:00 - enough to distinguish them by assigning
78:01 - them a different color and then what
78:03 - we're doing here is we're essentially
78:04 - just labeling each of those lines from
78:07 - whatever they represent and then we're
78:09 - going to put in a legend which is
78:10 - essentially going to correspond to this
78:12 - blue line is likes this orange line is
78:14 - retweets it's going to make it easier
78:16 - for us to kind of visualize what's going
78:18 - on so that will be a little bit more
78:20 - clear when you actually see the graph
78:23 - i think describing it without seeing it
78:24 - is a little bit is a little bit
78:26 - difficult so anyway let me copy this
78:28 - right here and instead of actually i'll
78:30 - just copy this right here
78:32 - which is uh corresponding to the
78:34 - retweets so doing the same thing for the
78:36 - retweets i'm going to copy that
78:39 - thing here get rid of that so all i'm
78:42 - doing here is i'm just making sure that
78:43 - the plot is formatted the same exact way
78:46 - as it is for the likes we're going to
78:48 - change the label here to retweets so
78:51 - just to confirm what we've got we've got
78:53 - our time likes we've got our time
78:54 - retweets those are both the series
78:56 - objects from pandas that correspond to
78:58 - the time series data that we want to
79:00 - plot we create a plot for the time uh
79:03 - sorry for the likes we create a plot for
79:05 - the retweets and then what we're going
79:06 - to do is we're gonna have one
79:07 - singleplot.show call plt.showcall and
79:11 - then that is going to put the single
79:14 - plot up on the screen and we'll see both
79:15 - those lines put on there together so go
79:18 - ahead and write that and then let's just
79:20 - run this and see what we get so we get
79:22 - the two plots up against each other so
79:25 - we've got the dates again just like
79:27 - before and the number of uh either
79:29 - retweets or likes of the y axis and you
79:32 - can see that right now we put legend is
79:34 - equal to true that's giving us this
79:35 - little box here in the upper right
79:37 - corner of the plot so likes is denoted
79:39 - by the blue line and then orange is
79:41 - denoted by the uh
79:44 - the retweets is denoted by the orange
79:45 - line so what we what we can kind of see
79:48 - is that there is indeed some correlation
79:50 - between the
79:51 - likes of retweets so first of all
79:52 - there's a lot more likes than retweets
79:54 - but you can see certain spikes that
79:56 - arise in the likes also correspond to
79:59 - spikes that arise in the retweets as
80:01 - well
80:02 - so that's very topical prob probably
80:05 - something you could have arrived at
80:06 - without doing any sort of a plot
80:08 - analysis on it but it's kind of
80:09 - interesting to see the data being
80:11 - visualized like this this is more just
80:12 - kind of an exercise in what you can do
80:15 - using this type of data
80:20 - we're going to analyze the sentiment of
80:23 - a given tweet so we're going to
80:25 - determine whether or not the sentiment
80:26 - of a given tweet is overly positive
80:28 - negative or neutral and
80:31 - for uh this purpose we're going to make
80:33 - use of a module called text blob so this
80:36 - is something that we'll have to install
80:38 - if you don't already have it installed
80:40 - this
80:41 - particular module has a built-in
80:42 - sentiment analyzer that's already
80:44 - trained on
80:46 - data so we can just make use of the
80:48 - analyzer itself to apply to our tweets
80:50 - to determine whether or not they are
80:52 - positive or negative based on this on
80:54 - this textblob analyzer so first and
80:57 - foremost let's just open up another
80:58 - terminal and i'll make this a little bit
81:00 - bigger what we'll need is this text blob
81:03 - thing so let's just go ahead and make
81:04 - sure that we have that installed pip
81:06 - install text blob so if you do that if
81:10 - you already have it installed you'll see
81:11 - this requirement already satisfied if
81:13 - you don't then you'll see it installing
81:15 - your machine once you've got that you
81:17 - should be good to go
81:18 - so now that we have that installed let
81:19 - me just close this we will go ahead and
81:22 - import this
81:23 - so let's go ahead and import this over
81:25 - here i'll say from text blob import the
81:29 - class text blob
81:31 - and another thing that we're also going
81:32 - to make use of in this video is a
81:35 - regular expression and this will be made
81:37 - use of to clean the tweet essentially to
81:40 - remove any extra characters or
81:42 - hyperlinks or things that are not
81:44 - necessarily indicative of the actual
81:45 - text content as part of the tweet we
81:48 - want to remove all that because that's
81:49 - not necessarily going to help us in
81:52 - figuring out the sentiment of a given
81:53 - tweet so let's go ahead and just import
81:57 - re which is the regular expression
81:59 - module in python and we've got
82:01 - everything ready to go so re should also
82:04 - already be installed on your machine if
82:05 - you have python so you don't need to
82:07 - install that separately you don't need
82:08 - to do a pip install or anything like
82:10 - that so let's go to the bottom of the
82:12 - file and i'm going to clean up some of
82:14 - these things so i'm going to get rid of
82:15 - these plotting lines here so all of
82:18 - these were from the previous video i'm
82:19 - just going to go ahead and delete that
82:21 - i'm going to keep the data frame
82:23 - creation because we'll be making use of
82:25 - that specifically we'll be adding
82:26 - another column which will have the
82:28 - sentiment analysis for each tweet
82:31 - so what i'm going to do is i'm going to
82:32 - add some functions here in the tweet
82:34 - analyzer class
82:36 - the first function
82:37 - which i'm just going to call it clean
82:39 - tweet will make use of the regular
82:41 - expression library to clean the tweet
82:43 - and remove any hyperlinks or extra
82:45 - characters so this is a member of the
82:46 - class it's going to take self and then
82:48 - also the tweet to be cleaned so what i'm
82:50 - actually going to do since the regular
82:52 - expression is a little bit cumbersome
82:54 - and verbose and annoying to write out
82:56 - i'm just going to paste it right in
82:57 - there
82:58 - and this is from a file that i've
83:00 - already saved off to the side
83:02 - and what i'm going to do is i'm just
83:03 - going to of course like i always do have
83:05 - the code available on my github so
83:08 - instead of pausing the video and writing
83:10 - that whole terrible expression out you
83:12 - can just download the code and copy it
83:14 - from there so again basically all that's
83:16 - really going on here this looks a bit
83:17 - complicated but it's just removing
83:19 - special characters from the string from
83:20 - the tweet specifically and then removing
83:22 - the hyperlinks and then returning the
83:24 - result of that clean tweet so we have a
83:26 - function that does that it's responsible
83:28 - for that now we want another function
83:30 - that's going to be responsible for
83:32 - calling
83:33 - blob and using the sentiment analog
83:35 - analyzer provided from text blob and
83:37 - then returning the sentiment so let's
83:39 - call this function analyze
83:42 - sentiment
83:43 - this will be taking self and then also
83:45 - the tweet that we want to analyze the
83:47 - sentiment of
83:48 - so we'll go ahead and create an object
83:50 - that will be returned to us from
83:51 - textblob we'll call this object analysis
83:54 - and we'll set this equal to textblob and
83:56 - then what we're going to feed into this
83:58 - is essentially what we want to analyze
84:00 - the sentiment of which in this case is
84:01 - the cleaned tweet so we're going to say
84:04 - self.clean
84:06 - tweet and then we're going to feed in
84:07 - that tweet that we get into this
84:08 - function make sure that it's clean pass
84:11 - in the clean tweet into this text blob
84:13 - thing this class and then this will
84:15 - allow us to leverage the sentiment
84:17 - analysis tools that text blob provides
84:19 - to us
84:20 - so now what we're going to do is we're
84:21 - going to do just that so we're going to
84:23 - say if
84:24 - analysis dot sentiment
84:27 - dot polarity so what we're doing here is
84:29 - analysis is the object created from text
84:31 - blob there's a function of that called
84:33 - sentiment which will make use of the
84:35 - sentiment analysis engine and then
84:37 - there's a further function that's called
84:38 - polarity which is a property of that
84:40 - analysis which basically tells us
84:43 - whether or not the tweet in this case is
84:45 - positive or negative so the polarity is
84:47 - a metric of whether or not that tweet is
84:49 - positive or negative in nature
84:51 - so if this property
84:54 - if this is greater than zero we're going
84:55 - to return one so this is to indicate
84:58 - that the polarity is positive so it's a
85:00 - it's a positively
85:02 - interpreted tweet so we're going to
85:04 - return one in that case
85:06 - so else if the sentiment so analysis dot
85:09 - sentiment dot polarity if this is equal
85:12 - to zero then we essentially don't know
85:15 - whether or not it's positive or negative
85:17 - so it's just going to be neutral so if
85:19 - it's just a neutrally
85:20 - analyzed tweet we're just going to
85:22 - return zero to denote that so zero will
85:25 - be the case when the tweet is just a
85:26 - neutral tweet and then otherwise so
85:29 - otherwise uh the case would be that the
85:31 - polarity is negative and in that case
85:33 - the sentiment analysis engine determined
85:35 - that the tweet is actually negative so
85:37 - what we're going to do to denote that is
85:39 - return -1 so that would be the way that
85:41 - we
85:42 - make use of this function to let the
85:44 - user know that the tweet was analyzed to
85:46 - be negative
85:48 - so we've done that we've gone ahead and
85:50 - created the clean tweet and analyze
85:51 - sentiment functions so now we're going
85:53 - to go ahead and make use of them let's
85:55 - go down to the main part of this file
85:57 - here so what we're going to do i'm just
85:59 - going to save this what we're going to
86:00 - do is we're going to build on the data
86:02 - frame that we've created from the tweet
86:06 - the
86:07 - what is it called the tweet analyzer
86:09 - class
86:10 - so we're going to build on that data
86:11 - frame so we're going to add another
86:13 - column which is going to be the
86:14 - sentiment analysis for each of the
86:16 - tweets that we have in this data frame
86:18 - so what we're going to do is we're going
86:19 - to create i'm actually just going to
86:20 - copy one of these lines
86:22 - up here and then add it
86:24 - after this one so really what we're
86:26 - doing is we've created this data frame
86:28 - which again is returned to us from this
86:29 - function as part of the tweet analyzer
86:31 - class and then what i'm doing is i'm
86:33 - adding another column onto that data
86:35 - frame which i'm going to call
86:37 - let's call it sentiment and this is
86:39 - going to have the 1 0 or minus 1
86:42 - depending on the sentiment analysis of
86:44 - that tweet so what we're going to do
86:46 - we're going to change one thing in here
86:48 - instead of saying the reach we count we
86:51 - obviously don't want that what we want
86:53 - in this case
86:55 - let's see i think i deleted too much
86:57 - there
86:58 - so what we want in this case is we want
87:00 - to actually call our function so we want
87:02 - to say tweet analyzer dot
87:06 - analyze sentiment
87:08 - and then we're going to pass in the
87:10 - tweet so we're going to go ahead and
87:11 - pass in that tweet
87:12 - and then we're going to be looping
87:14 - through each of the tweets in the tweets
87:16 - list that we have here so
87:18 - basically actually i it doesn't know
87:20 - what tweets is so we need to specify
87:22 - what we're actually looping through so
87:23 - instead of tweets which is clear from
87:25 - the function up here so tweets is
87:28 - defined here but it's not defined down
87:30 - here in the main so we want to specify
87:32 - that we're looping through the data
87:33 - frame
87:35 - that corresponds to the entry the column
87:37 - that has the column tweets because again
87:39 - that is where we're storing each of
87:41 - these
87:42 - each of these each of the text that
87:44 - corresponds to each of the tweets
87:46 - so just to kind of unpack what's going
87:48 - on here again we're looping through each
87:50 - tweet in the data frame column
87:52 - corresponding to the heading tweets
87:54 - which is again created up here and
87:56 - returned in this line here and then what
87:59 - we're doing is we're doing a very
88:00 - similar thing which will look familiar
88:02 - if you saw
88:03 - video three where we did
88:05 - these things to kind of determine and
88:07 - create new
88:09 - columns corresponding to the id length
88:11 - date source things like that we're doing
88:12 - the same thing only now the value that
88:15 - we're storing at that column for that
88:16 - given tweet is the sentiment analysis of
88:19 - that tweet and the way that we're doing
88:20 - that is we're making use of that
88:22 - function that we created which is
88:23 - analyze sentiment which returns zero one
88:25 - or minus one we're feeding that tweet
88:27 - it's going to get cleaned it's going to
88:29 - get analyzed and then we're going to
88:31 - have one of those three numbers
88:33 - so we have our new column here which is
88:35 - the sentiment analysis so let's just go
88:37 - ahead and make sure that this works as
88:38 - expected so what i'm going to do here is
88:40 - i'm just going to print out the first 10
88:42 - entries in the data frame so i'm going
88:44 - to say print df.head and then i'm just
88:47 - going to pass in 10 which is just
88:50 - letting python know that we only want to
88:51 - see the first 10 entries in this data
88:53 - frame so i'm going to write that i'm
88:54 - going to clear the terminal and then i'm
88:56 - going to say python and the name of this
88:58 - file is sentiment analysis
89:00 - twitterdata.pi
89:01 - so if we do that it'll get the tweets
89:03 - and then we see we have our dataframe
89:05 - here we've got our familiar columns and
89:07 - then we also have the sentiment so we
89:09 - have minus one for this first tweet it
89:11 - looks like uh that definitely could be
89:14 - phrases controversial minus one it looks
89:16 - like there's not enough of that tweet is
89:18 - showing there for me to determine
89:19 - whether or not it's really uh
89:21 - controversial that third one is neutral
89:23 - congratulations argue maybe that's
89:25 - positive the next congratulations tweet
89:27 - here that's positive so that makes sense
89:29 - uh thank you thank you is interpreted to
89:31 - be positive next one is neutral about
89:34 - vodka and the remaining uh tweets are
89:36 - positive so from this very cursory
89:38 - glance donald trump seems like a very
89:41 - positive guy
89:42 - so yeah so there's that so anyway um
89:45 - that's pretty much it for this video if
89:47 - you have any questions or comments or
89:48 - anything like that then don't hesitate
89:50 - to leave them in the comments section
89:51 - below as i mentioned before all the code
89:53 - for this will be available on the github
89:55 - and i'll have a link to that in the
89:56 - description you can just download that
89:58 - there so thanks again for watching and
90:00 - have a great day