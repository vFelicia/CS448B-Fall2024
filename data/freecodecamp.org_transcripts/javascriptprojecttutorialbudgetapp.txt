00:00 - on this project we're going to create a
00:02 - budget application now this project is
00:05 - going to be special because we're going
00:07 - to be using classes instead of
00:09 - constructor functions so now let's look
00:12 - at what we're going to be creating in
00:14 - this application well as you notice
00:16 - we're going to have a budget so whatever
00:18 - money we have
00:19 - then whatever expenses we are going to
00:22 - accumulate and what would be the ending
00:25 - balance so let's say we have two forms
00:27 - one is going to be 40 expenses and the
00:29 - one our other one is going to be for the
00:30 - budget now if i try to insert let's say
00:33 - 5000 and i'm going to press submit or
00:36 - calculate i'm going to have a budget and
00:39 - the balance because obviously there's no
00:41 - expenses yet now if i want to change the
00:44 - budget and if i would say you know what
00:45 - i'm actually getting two grant more so
00:48 - instead i'm just going to say that this
00:49 - is going to be 7 000 you notice how
00:51 - automatically my budget is updated and
00:55 - so is my balance however if i'm trying
00:57 - to insert the value that's going to be
01:00 - empty or negative notice i'm going to
01:01 - have feedback and it's going to be
01:03 - complaining that it's not possible and
01:05 - if you notice the 0 hasn't been passed
01:08 - to my budget or to my balance so once we
01:11 - set the budget next is going to be the
01:13 - expense so what would be expense so
01:15 - let's say start with a fixer car so i'm
01:18 - just going to say that fix the car is
01:19 - going to be 200 bucks so now i have the
01:21 - budget of 7 grand still 7 000
01:25 - expense is going to be 200 and the
01:27 - balance is going to be shown off 6800
01:30 - because we're going to take into account
01:32 - of expenses of 200.
01:34 - now there's a couple of things that we
01:36 - can do first if we would want we can get
01:38 - rid of expense we can say you know what
01:40 - i don't need to fix the car it was a
01:42 - mistake the mechanic called and
01:44 - everything is fine so i remove and again
01:46 - my balance is going to be to a 7000
01:50 - because i removed my 200 expense but
01:52 - let's say that we have another rent
01:55 - so another expense and this would be a 2
01:58 - 000. so again we're adding the expense
02:00 - and you know it just to show you that
02:03 - that everything is working fine we can
02:04 - have two of them and next month came
02:07 - along and we need to fix the car for a
02:09 - thousand bucks so again we are
02:11 - calculating whatever our expenses are so
02:13 - in our case this is gonna be three
02:15 - thousand so now our balance is only
02:18 - going to be four thousand because we are
02:19 - spending three thousand dollars and you
02:22 - know what our landlord showed up and he
02:24 - said you know what buddy the rent is not
02:26 - going to be 2 000 is actually going to
02:29 - be 3 000. so now i can click edit and i
02:32 - can say painfully that instead of 3 000
02:35 - i'm paying three thousand i'm sorry
02:37 - instead of two thousand i'm paying three
02:38 - thousand so i'm adding the expense and
02:40 - now my balance is even less because now
02:43 - my rent went up and i was able to edit
02:45 - it and now these are all my expenses and
02:48 - also another bad news came in my boss
02:51 - came in and he said you know what you're
02:52 - dreaming that you're getting seven grand
02:54 - instead of you're let's say getting a 2
02:58 - 500 he says i don't know what you were
03:00 - smoking but there's no way you're making
03:02 - that much money so i'm going to press
03:04 - calculate and now my balance is actually
03:07 - negative so now i need to reach for
03:08 - credit cards or something because my
03:11 - budget is a low of 2500 or my expenses
03:15 - are way more now obviously we can add as
03:17 - many expenses as we want and we can set
03:20 - our budget however high or low we would
03:22 - want and depending on that either our
03:24 - balance is going to be negative which is
03:27 - in this case or if our boss says you
03:29 - know what actually we had a huge
03:31 - investor and now our salary went up
03:33 - again so now we have a balance of six
03:36 - thousand so like i said before we're
03:38 - going to be using classes instead of
03:40 - constructor functions so that's going to
03:42 - be really really interesting and like i
03:44 - said yeah enough of me talking and let's
03:46 - start working on the project
03:48 - the project setup files are located on
03:51 - my github so you can either go directly
03:54 - and just find by the project's name or
03:57 - you can follow the link that i have left
03:59 - in the description of the video
04:02 - now hopefully you downloaded a setup
04:05 - folder and you are as eager as i am
04:08 - working on this project so whenever we
04:10 - have a download folder or setup folder
04:13 - available we can just open it up and we
04:15 - can notice what we have regarding the
04:18 - html and css
04:19 - now there's not going to be any
04:21 - functionality so it doesn't matter what
04:23 - i'm pressing you notice that i'm just
04:24 - going to be submitting the empty form
04:27 - and i can just add expense nothing is
04:29 - happening and also there's no feedback
04:31 - so i can click everything but nothing is
04:33 - happening so now this is our job to add
04:36 - javascript to this html and css so we're
04:40 - going to have a working app so in this
04:43 - case we can just maybe close it because
04:45 - we really don't need it and let's open
04:47 - up this folder in our favorite text
04:49 - editor now as always probably for the
04:53 - 45th time you're already hearing me
04:55 - saying that my favorite editor is going
04:57 - to be visual studio code however you can
04:59 - use whatever editor you would want
05:02 - now i'm already skipping a little bit
05:03 - ahead
05:04 - notice we have the index.html
05:06 - where we're going to have the forms and
05:09 - we're really going to have our lists and
05:11 - we all have two types of form this time
05:14 - now in the main css this is where all
05:16 - classes are and notice that we were just
05:18 - selecting styles so i'm just using a
05:22 - main styles and just applying them as a
05:26 - classes and then we'll also have the
05:28 - app.js
05:30 - now
05:31 - because this is a bigger project you
05:34 - notice that there's quite a few things
05:36 - that i already right away added to the
05:38 - app.js now let me go over this just to
05:42 - make some clarifications well first
05:44 - things first prior to this project we
05:46 - have been setting up a constructor
05:48 - function that was responsible for all
05:51 - our instances so in this case if we
05:53 - would want to have a constructor
05:54 - function for the ui we created a
05:57 - constructor function and then we added
05:59 - all the properties to a prototype and if
06:02 - we had some other constructor function
06:05 - and if we would want to add some type of
06:07 - properties in there we added in a
06:09 - parameter and then we set it equal to
06:11 - this so this idd was equal to id and
06:14 - here we passed the id now like i said
06:17 - this project is going to be different
06:19 - because we were going to make use of the
06:22 - es6 and we have the class syntax now the
06:25 - class syntax is
06:27 - with a class keyword first so we need to
06:30 - have a class keyword then we would need
06:33 - to have the name
06:34 - of the class
06:36 - and then this would be curly braces so
06:38 - now again we would use a
06:41 - the variable we're going to set it equal
06:42 - to a new
06:44 - ui
06:45 - a new ui class instance and then we
06:48 - would be getting the instance of this
06:50 - class
06:50 - whenever we have class we also have an
06:53 - option of having a constructor method
06:57 - that's going to run every time we're
06:59 - going to instantiate the class
07:01 - and we we have two options we can either
07:04 - pass the parameters again let's say that
07:06 - we would say id so every time we would
07:08 - be passing this id and we would say this
07:10 - id so for every instance obviously this
07:14 - id would be different we'll just set it
07:16 - equal to id or in our case we're going
07:19 - to be using this constructor and we're
07:21 - going to preset the properties so i
07:23 - already know that i'm going to have
07:25 - property of this budget feedback and i'm
07:27 - just going to use a document query
07:29 - selector and i'm just going to set a
07:31 - budget feedback or expense feedback and
07:33 - this is what i skipped so i skipped all
07:35 - these selections because by now we for
07:38 - sure should have a good handle of
07:41 - selecting something so i don't think
07:43 - that we need to write this for let's say
07:45 - 20 minutes because this should make all
07:47 - sense to us now obviously as i'm working
07:49 - we will going to be switching back to
07:51 - html maybe just to show you where
07:54 - exactly i'm getting this but we already
07:56 - should have a good handle of this where
07:58 - we have the form so if i have a form i
08:01 - obviously have the id of budget form so
08:03 - this is the form that i'm talking about
08:05 - then the budget input the budget amount
08:08 - so the input would be the input field
08:10 - the amount is what i'm getting at
08:13 - so the budget amount would be here and
08:15 - so forth and so on now after that since
08:19 - we have the construction constructor
08:21 - that we run every time we instantiate
08:24 - the class
08:25 - this is going to be added to our
08:26 - instance and basically what we're going
08:29 - to do is we're going to set up a methods
08:32 - on this class and we're going to use
08:34 - this instance and we're going to run the
08:36 - methods now most of our work we're going
08:38 - to be doing in the class in fact we're
08:40 - going to be just adding these methods to
08:43 - our event listener function and then
08:46 - what's going to be calling this function
08:48 - once the dom loads so let's do that
08:50 - first because later on only thing we're
08:52 - going to be doing is creating methods
08:54 - and what is going to be making use of
08:56 - the fact that we have access to these
08:58 - variables i'm sorry to these properties
09:00 - so this budget feedback we we can right
09:03 - away grab it so we will going to be
09:05 - working with the function and we're just
09:07 - going to grab this
09:08 - let's say variable or not variable the
09:11 - property we're going to grab this
09:12 - property and we're going to make use of
09:14 - the property so like i said there's
09:16 - going to be two more things outside of
09:19 - this class now the first one is going to
09:21 - be the function of event listeners
09:24 - event listeners
09:26 - listeners and we would want to run this
09:29 - function as the dom content loads so
09:32 - let's make that other thing that i was
09:33 - talking about and we would just say
09:35 - document
09:36 - a add event listener now we're going to
09:38 - be listening for a dom
09:41 - content
09:42 - loaded event and once this event fires
09:46 - we're going to have a callback function
09:48 - and within this callback function we
09:50 - would run we would want to run this
09:52 - event
09:53 - listeners function so this is going to
09:56 - be very straightforward and once within
09:58 - this
09:59 - event listeners we would need to create
10:02 - a new instance of this ui class and then
10:06 - like i said was going to be listening
10:08 - for a three events in this event
10:10 - listener and everything else we're going
10:12 - to be doing within the class so first
10:15 - let's select three things
10:17 - in the event listeners function because
10:21 - we will still going to make use of that
10:22 - because we're going to be listening for
10:23 - those domains and let's make a new
10:25 - instance of this ui class so first
10:28 - things first
10:29 - let's get a budget form
10:32 - we're going to set this
10:33 - into our variable of budget
10:37 - form and again we're going to do this by
10:39 - id
10:40 - get document get element by id and we're
10:43 - going to be
10:44 - listening or looking for a budget
10:48 - form id now the budget form id is the
10:51 - one with a green porter i also would
10:54 - want the expense form so this would be
10:56 - in this form and here obviously we're
10:59 - just going to change this around a
11:00 - little bit this is not going to be
11:02 - budget form this is going to be
11:04 - expense form
11:06 - and the last one is going to be the
11:08 - expense list we're going to have a title
11:10 - and the expense value so again let me
11:13 - copy and paste this this is going to be
11:15 - expense list
11:18 - so here let me delete the form
11:20 - and also let me delete the list
11:23 - so here this would be a list so we're
11:25 - going to have budget form expense form
11:28 - and expense list so these are going to
11:30 - be my three variables that are going to
11:31 - hold the elements that i'm getting back
11:34 - from the dab then let's create a new
11:36 - instance of the
11:38 - ui class so instance of ui
11:42 - class and
11:44 - if we would want to create an instance
11:45 - we do the same thing as we're doing with
11:47 - a constructor function so const ui and
11:50 - this would be new ui and like i said
11:53 - before if we would be passing something
11:56 - in a constructor since we're running
11:58 - this constructor every time we
11:59 - instantiate the class we would pass it
12:01 - over here like i did an example with an
12:03 - id so obviously for each and every
12:06 - instance the idea would be that these
12:08 - properties would be different well since
12:11 - i only have one instance and i just want
12:14 - these properties that would hold these
12:16 - dom values on i can just place them in a
12:19 - constructor without passing any
12:21 - parameters so now sure enough i'm going
12:24 - to have access to all these properties
12:26 - and more importantly not just properties
12:28 - to the methods that we're going to be
12:29 - creating here in the event listeners and
12:32 - just be careful though whenever you're
12:34 - working with a function constructor
12:36 - you can place it anywhere i mean i can
12:38 - go 100 lines down and i can still have a
12:41 - constructor function and because it is a
12:44 - function
12:45 - this is going to be available to me
12:48 - anywhere in the document
12:50 - but since this is going to be as a
12:52 - variable then be careful because you
12:54 - need to make sure that you declare it
12:56 - first and then you're making use of it
12:58 - so if i'm going to use this if i'm going
13:00 - to move this class ui somewhere down
13:03 - over here you're not going to have
13:04 - access to it so just be careful and then
13:08 - once we have the new instance of ui like
13:11 - i said we would want to add
13:13 - three event listeners one is going to be
13:15 - for the budget form the other one is
13:17 - going to be expense form and then we're
13:19 - going to have expense list so let's do a
13:22 - budget
13:24 - budget
13:25 - form submit
13:28 - submit and then maybe let's just create
13:31 - this budget from submit
13:33 - so budget form submit and add event
13:37 - listener so we're going to be listening
13:38 - for a submit event and then this is
13:41 - going to be our callback function now
13:43 - for now we're just going to be passing
13:45 - the event and we're just going to ignore
13:47 - everything because we don't really care
13:49 - we haven't created these methods yet so
13:51 - only thing i want to do is just set up
13:54 - the bones and so basically the structure
13:57 - of my event listeners function and then
14:00 - once we're going to have the methods
14:02 - available then we can start passing them
14:04 - because otherwise this is not going to
14:05 - make sense so this would be the expense
14:08 - form and the third one is going to be
14:10 - expense
14:12 - expense list however the expense list
14:14 - we're not listening for a submit
14:17 - we're actually looking for a click
14:19 - so click because we're going to be
14:21 - attaching these events to expenses that
14:24 - we're adding so whether this is going to
14:25 - be a deleting or editing or something
14:28 - like this so this would be not a budget
14:31 - form the second one this would be a
14:33 - expense form and i'm assuming that you
14:35 - already have watched quite a few
14:37 - projects already with me or done some
14:39 - quite a few projects with me so since
14:42 - this is already last project on a
14:46 - object so i'm assuming you have watched
14:48 - quite a few of them so i'm going to be
14:49 - skipping a few things ahead so this is
14:51 - not like three hours long so then let's
14:54 - do expense list so we're adding the
14:56 - click event instead of submit so we'll
14:59 - have to submit events and then we'll
15:01 - have one click of it now why i'm passing
15:04 - for the first to the event object
15:06 - because we know with the form this is
15:08 - going to be automatically submitting and
15:11 - we would want to prevent that so we
15:12 - would want to prevent default so event
15:15 - prevent default and we would run a we
15:17 - would want to run this
15:19 - method from the
15:21 - event object and this way this is not
15:24 - going to be resubmitting every time
15:26 - because we are preventing the default so
15:29 - we are done with our structure so now
15:32 - i'm glad to tell you that we can start
15:34 - working in our ui class of creating the
15:38 - methods now the first method that we're
15:41 - going to be creating is when we are
15:43 - submitting the form
15:44 - i would want to make sure that the value
15:47 - is not 0
15:49 - or
15:50 - less than 0 and if everything is fine
15:53 - i would want to show the balance
15:56 - and i would also want to show the budget
15:58 - amount so let's go ahead and let's start
16:00 - working now within the classes and es6
16:03 - we can skip right now any kind of
16:06 - function
16:07 - let's say declarations so we can do only
16:10 - a comment if you would want to so submit
16:13 - budget
16:15 - method and we can just write the name of
16:17 - the method that we're going to be
16:18 - creating so submit
16:21 - budget
16:22 - form so this is going to be the method
16:24 - that we're going to be creating and
16:26 - that's all we have to do so now we have
16:28 - the method and just to show you that
16:30 - everything is working so we have a
16:32 - submit budget form now let's do log and
16:36 - hello from es6 since now we're using es6
16:40 - and let's go to budget form
16:42 - submit event and let's run this we have
16:45 - the instance of ui and sure enough we
16:47 - have what we have submit budget form the
16:50 - only thing we need to do is just run
16:52 - this method so as you can see a lot of
16:54 - things are the same however this just
16:57 - makes a way more cleaner code since we
17:00 - don't have to deal with the prototypes
17:02 - we just have class constructor that has
17:05 - all the properties and now we can start
17:06 - creating the methods
17:08 - so once we save it let's open up the
17:10 - google developer tools
17:12 - because this is where we're going to be
17:14 - spending the last
17:16 - sorry next 10 hours i'm kidding uh well
17:19 - hopefully i'm kidding and here let's do
17:21 - calculate since only thing we have to do
17:23 - is submit the form and we have hello
17:26 - from es6 and as you notice
17:28 - nothing is refreshing because we
17:30 - prevented the default behavior
17:33 - so so far so good now this is great now
17:36 - we have the submit budget form method
17:39 - then we can start working now first
17:41 - thing i would want to get the value now
17:43 - where i'm getting the value is from the
17:45 - budget input
17:46 - because this input of the form has the
17:50 - id of budget input and i already have
17:54 - assigned it to this again property now
17:57 - again with the first one we're going to
17:58 - go back and we're going to look at
17:59 - index.html later on i'm just going to
18:01 - assume that if you have issues then just
18:03 - go back to index.html and you can find
18:06 - it now you can press command f if you
18:08 - want to find it faster so let's say i'm
18:10 - looking for a budget input i can just
18:13 - write budget
18:14 - budget and the name would be input here
18:18 - so now let's see that we have no
18:20 - values because probably i misspelled it
18:23 - or something so we have budget this
18:26 - would be the name and this would be the
18:28 - input so budget input and yeah sure
18:31 - enough because this was the class that i
18:33 - was selecting i'm sorry yeah my property
18:36 - was with a capital letter because i
18:38 - cannot use dashes and then if i'm
18:40 - looking for the id then i need to use
18:42 - the dashes so therefore if you're
18:44 - confused about something that you're
18:46 - getting at you can use the command f or
18:49 - make sure that you're not typing like
18:51 - this with my input that i was looking
18:53 - for instead of type with dashes and
18:55 - everything is going to be fine so what
18:56 - you're getting back from is this form
18:59 - group that is within the budget form and
19:01 - then this would be the input so
19:03 - basically this is the money that we're
19:04 - adding so let's go back to app.js and
19:07 - first i would want to get the value so
19:09 - const value is going to be equal to this
19:11 - now since i have again access to the
19:14 - property i'm using this and now the name
19:17 - of this would be budget input the one
19:19 - that i was trying to find with my
19:22 - command f with a fine and here let's
19:24 - just get a value
19:26 - so what would be the value now since we
19:28 - have done this quite a few times i'm not
19:30 - going to cancel log it we can just do
19:32 - right away value and we can just check
19:34 - whether value is going to be empty or
19:38 - so here this would be our operator the
19:40 - value is going to be less than zero so
19:43 - let's do less than zero now if this is
19:45 - the case
19:46 - then again we have access to a feedback
19:50 - now feedback is going to be showing i
19:52 - believe somewhere here i mean again i
19:53 - don't want to go back to index.html
19:56 - because we can spend the whole day like
19:57 - this so basically we have the feedback
19:59 - that i have selected and i have access
20:01 - to this feedback so let's do this budget
20:04 - feedback now let's again
20:07 - use the class list now with the class
20:09 - list we have an option of add or remove
20:12 - or
20:13 - i believe it was contained
20:15 - now in this case we just want to add
20:17 - show item because like with other
20:19 - projects all we did is we created this
20:22 - budget feedback i gave it in the main
20:25 - css of budget feedback and expense
20:27 - feedback display of none and now i would
20:30 - want to add this show item so this would
20:32 - be the show of block so this is all
20:34 - we're doing we're just dynamically
20:36 - adding this so let's do add show of item
20:39 - and also let's add some text inside here
20:41 - so let's say this
20:43 - budget feedback again the same
20:46 - property then let's add as an inner html
20:49 - and since we're using the inner html we
20:52 - can pass the html tags over here and for
20:56 - this we'll using the template literals
20:58 - so backticks and now we can just write
21:00 - that we would want to pass the paragraph
21:02 - now the paragraph would contain value
21:06 - cannot be
21:07 - empty
21:08 - or negative
21:10 - so pretty standard what we have been
21:12 - writing before so negative then we can
21:15 - close the paragraph and again we're able
21:16 - to do this because we're using the inner
21:18 - html we wouldn't be able to do this with
21:21 - the text content because then it's gonna
21:23 - well you would be able to do it but this
21:24 - is gonna show the actual tags and this
21:27 - is not what you would wanna do
21:28 - so so far so good let's test it out what
21:31 - we have
21:32 - now as i'm submitting the form i'm
21:34 - purposely going to put 0 and now my
21:36 - feedback is going to be showing so now
21:39 - we selected the feedback and we added
21:42 - the class of show item now obviously
21:44 - again like the previous project we would
21:47 - want to hide it after three seconds four
21:49 - seconds ten seconds
21:51 - i mean i would want to hide it no you
21:52 - could
21:53 - leave it it's not a big deal but i just
21:56 - always like to work with a bunch of
21:58 - functions in the project just so you get
22:00 - to know them and i would want to hide it
22:03 - i mean long story short let's just hide
22:05 - this now how we're going to hide this
22:07 - we're going to use again the set timeout
22:09 - and we're going to have a set timeout
22:12 - now this is going to be a function now
22:14 - this function is going to require a
22:17 - callback function and this would be the
22:19 - callback function that we're passing in
22:21 - and then the second parameter is going
22:22 - to be
22:24 - how long this in how long this function
22:26 - is going to run so again let's do 4 000
22:29 - seconds and now let's do a this now we
22:32 - know that we have the access to a budget
22:35 - feedback class list
22:37 - so budget
22:39 - feedback and let's do class list and
22:42 - remove so here we added this class to a
22:46 - feedback and now we would want to remove
22:47 - the class so the moment we're going to
22:49 - remove the class what's going to happen
22:51 - well we're going to go back to the
22:53 - default what was the default default was
22:56 - a display of none so let's remove class
22:59 - and the class is going to be the same of
23:01 - show of item and i want to let you know
23:04 - right away if everything is correctly
23:06 - this shouldn't work but let's just test
23:08 - it out so once we're on it now once
23:11 - again i want to test with the zero value
23:13 - so now i run it and interesting
23:16 - i have the value cannot be empty and
23:20 - after four seconds i have some kind of
23:22 - error
23:23 - well i mean everything is correct
23:25 - correct
23:26 - i don't know why i'm saying two times
23:28 - correct but everything is correct so we
23:30 - have this budget feedback class list i
23:32 - mean we had an access literally one line
23:35 - up now what is an issue why we cannot
23:37 - access this
23:39 - and again the same thing like we had
23:41 - with a constructor function
23:43 - we can make a great use of this
23:46 - but we always need to be aware of it
23:48 - what is actually pointing to
23:50 - so if you have been watching the
23:52 - previous tutorials or projects you know
23:55 - that there is an issue where
23:57 - at this moment this
23:59 - is pointing to a global window object
24:01 - and it's looking for the method on this
24:03 - i'm sorry for the property on this
24:05 - global window object and it's trying to
24:07 - add the class list and it's saying that
24:09 - it's it cannot read this property
24:11 - because there's no such thing there's no
24:13 - property on this
24:14 - global object because obviously the
24:16 - property is on this ui so again we need
24:19 - to make sure that as we're running this
24:22 - function
24:22 - within this method
24:24 - now within this method still this is
24:27 - pointing back to the class everything is
24:30 - correct however since we're running this
24:32 - function within this method now this is
24:36 - not pointing anymore back to a class
24:39 - it's pointing to a global object so
24:41 - again we need to do something with a
24:44 - self or you can name this really
24:46 - whatever you would want so basically
24:47 - what you would do you would say const
24:49 - and again i'm going to use self but you
24:51 - can write whatever variable you want and
24:53 - i'm going to set this equal to this so
24:56 - now i'm grabbing the value of this
24:58 - that is going to be pointing back to the
25:01 - class and just to show you let's do a
25:03 - log
25:04 - and let's do this so in this case let me
25:06 - show you what is this pointing to now
25:10 - let's also have a look at what happens
25:12 - within this function where this is
25:14 - pointing to just so you don't think that
25:17 - i'm
25:17 - i don't know making this step up and
25:20 - let's also console log this so if
25:22 - everything is correct we should have
25:24 - this that's pointing back to our class
25:27 - then we can have this to the global
25:29 - object and then self is again going to
25:31 - be pointing back to a class so let's
25:34 - check it out again empty value and sure
25:36 - enough we have a few things we have the
25:39 - ui
25:40 - so this would be the ui
25:42 - now the second one is going to be what
25:45 - now the second one is going to be div
25:48 - over here and then we have the third one
25:50 - that's basically not going to make sense
25:53 - so we have a div expense feedback alert
25:57 - and then we're gonna have a on call type
25:59 - error cannot read property off now
26:02 - so obviously this wasn't working as we
26:05 - expected even though we had the ui of
26:08 - feedback now this
26:10 - wasn't pointing to a correct
26:13 - way now obviously i cannot run these
26:15 - actually because they i have run this
26:18 - after i called already this budget
26:21 - feedback so this is not going to make
26:22 - sense let me fix this this is why we
26:25 - cannot see anything my apologies because
26:27 - you notice the error runs and so we're
26:29 - not able to see this so let's do this
26:31 - one more time
26:33 - let's calculate and let's see it's more
26:35 - interesting what we have in console log
26:38 - so we're going to have a budget feedback
26:41 - so i'm going to have ui this would be
26:43 - our first this
26:45 - then we're going to have the budget
26:48 - input and sure enough after four seconds
26:51 - now we have the window notice this is
26:53 - the window object that i was talking
26:55 - about so this is why we're trying to
26:57 - access it and we cannot
26:59 - and next again we have the ui so like i
27:01 - said we have the ui
27:03 - then we have the window object and then
27:05 - we have the ui and again i'm spending
27:07 - probably way more time than i should but
27:09 - i find it really really important
27:11 - whenever you're working
27:13 - with a javascript to understand what is
27:15 - this because
27:17 - this is really helpful but you need to
27:19 - know where it is pointing to so anyway
27:21 - long story short we need to change this
27:23 - so instead of this we're just going to
27:25 - use self so now we're reassigning this
27:28 - so now in this case everything is going
27:29 - to be working fine and in four seconds
27:31 - we're going to remove it so again let's
27:33 - go up let's say that this is going to be
27:35 - empty value now this is going to console
27:37 - log this and
27:39 - over here you can see that several i
27:41 - mean this is not what i wanted
27:43 - i mean keep on making mistakes but
27:45 - that's great
27:46 - calculate again trying to add negative
27:49 - value and in four seconds this is going
27:51 - to be gone because everything is working
27:53 - fine
27:54 - now after we have removed the feedback
27:57 - now there's two more things that i would
27:58 - want to do first i want to grab the
28:00 - value that i'm placing in the form and
28:03 - add it to the budget
28:05 - and also i would want to remove and make
28:08 - this value empty because obviously i
28:10 - would want to later on maybe pass some
28:11 - other value so i don't want the value to
28:13 - stay there
28:14 - and the third one is going to be show
28:15 - balance and this is where we're going to
28:17 - be doing a little bit of calculation so
28:19 - we're going to call another method that
28:21 - we're going to create in ui class and
28:24 - like i said most of the work is going to
28:25 - be in ui class so i know that maybe this
28:28 - is going to be frustrating for somebody
28:30 - but we i mean most of the work here is
28:32 - just going to be passing one or the
28:34 - other method now here we have one method
28:37 - but then we're going to keep on adding
28:39 - other methods from the same class within
28:43 - this submit budget form method because
28:45 - again i find it important to understand
28:47 - how we are working with a keyword of
28:49 - this so here let's do a first budget
28:52 - amount now what is budget amount i'm
28:54 - selecting budget about get element by d
28:57 - this would be the amount over here
28:59 - so budget amount
29:01 - then let's have it as a text content and
29:04 - we're just going to pass the value so if
29:06 - there is some kind of value i want to
29:07 - pass it here that's as simple as it gets
29:10 - if the value is going to be
29:11 - zero or less than zero
29:14 - then i would want to show them or tell
29:16 - the person tell the user that they need
29:19 - to fix something if the value is there
29:21 - the rate which is going to pass the
29:23 - value
29:23 - after that i also like i said i would
29:25 - want to remove whatever i have the in
29:28 - the input so for this we have a budget
29:31 - input
29:32 - property now this is also going to have
29:35 - a value since we're selecting the dom
29:38 - element and this down element has a
29:40 - property of value since this is a form
29:43 - and this is important so the forms have
29:46 - the value and we're gonna set it equal
29:48 - to zero and the last one we're gonna
29:50 - call this and show balance and again for
29:53 - now i'm not going to write anything in
29:55 - this function i'm just going to
29:57 - call the function and we're going to do
29:59 - what we did before what's going to write
30:01 - console.log now in this case i have the
30:04 - this and this is not inside some kind of
30:07 - other function that we're running here
30:09 - so everything is fine this keyword now
30:11 - is going to be again pointing back to a
30:14 - class so now in this case i can use this
30:18 - show balance this natural balance
30:20 - because i know that i'm going to be
30:21 - creating another method now the method
30:24 - is going to be well surprise surprise
30:26 - show balance
30:28 - so now i have access to it so now again
30:30 - like i said we don't need to use any
30:32 - kind of
30:33 - function keywords created we can just
30:35 - write show balance and for now we're
30:37 - going to do very simple again console
30:39 - log and we're going to do hey
30:42 - uh i am really
30:44 - or i don't know why i'm doing like this
30:46 - we can just do a
30:48 - backtext so template literals
30:50 - hey i'm
30:53 - getting a hold
30:55 - of this keyword
30:58 - well i mean this keyboard yeah
31:00 - this keyword
31:03 - and once i save it hopefully i don't
31:04 - make like 10 000 mistakes with this
31:06 - keyboard otherwise this is gonna sound
31:08 - very cocky and you know what let me just
31:10 - uh comment out this
31:12 - now keep it for your reference and
31:14 - always if you have any questions about
31:16 - this one of the best ways is just to
31:20 - console log everything out
31:21 - so let's add some value since we have
31:24 - tested already quite a few times with
31:25 - the zeros calculate 4 000 and now sure
31:29 - enough i'm running the method so so far
31:31 - so good now we need to create the method
31:35 - of show balance right correct because
31:38 - the first thing that we did was just
31:41 - call the method so now we need to write
31:43 - something within this method
31:45 - okay first things first now we have the
31:47 - method of show balance
31:49 - however like i said this
31:52 - method is going to be interesting
31:53 - because from this method we're going to
31:55 - call another method so we're going to
31:56 - have const and here we're going to write
31:58 - expense now here basically all i'm
32:01 - trying to do is calculate the expenses
32:03 - and i'm going to create a method that's
32:06 - going to do this for me so we're going
32:07 - to have total
32:09 - total and expense as you notice i'm not
32:12 - selecting the properties that i had on
32:15 - my constructor
32:16 - i'm not doing that i'm actually
32:18 - selecting a method again with this the
32:20 - same as here however again we haven't
32:22 - created the method so here let's do a
32:25 - this total expense or
32:28 - to be more correct we can just do
32:30 - comment of total
32:32 - expense
32:34 - and let's write it this is going to be
32:35 - total expense
32:37 - this is going to be our method now again
32:38 - we can do a console log just to check
32:40 - that everything is working but i think
32:42 - that after a few times of doing that
32:44 - this is becoming a redundant so we know
32:47 - that we're going to have access to it
32:48 - and the way we're going to have access
32:50 - to it that we're going to
32:52 - add this to the value so basically this
32:54 - method
32:55 - is going to calculate everything that we
32:57 - have in a list now obviously in our list
32:59 - we have nothing right now so right now
33:02 - we're going to be
33:03 - working a little bit in the dark so
33:05 - we're going to be writing a function
33:07 - that in maybe right now is not going to
33:09 - make sense but the moment we're going to
33:11 - be starting adding the values this is
33:13 - going to make way more sense than we
33:15 - think right now and here the basic idea
33:18 - behind this method is i would want to
33:20 - run through i would want to calculate
33:22 - whatever items i have over here and once
33:25 - i calculate items i would just want to
33:27 - return them so let's do very simple
33:29 - let's do let
33:31 - and we'll just going to call this total
33:33 - again we're going to be using this later
33:35 - on and let's just set it i don't know to
33:38 - 400 something like this so we always
33:40 - have this value let's do very simple
33:43 - return of total now again like i said
33:46 - later on once we're going to have the
33:48 - actual values we will going to make this
33:50 - functionality where this is gonna make
33:52 - way more sense but for now i don't see
33:55 - the point of going through if there is
33:57 - no values really i mean just kind of it
34:00 - doesn't really make sense so let's add
34:02 - this and now we know that this expense
34:03 - should have 400 because we have total
34:05 - expense and we're just returning the
34:07 - total so good enough we have a hard
34:10 - coded value of 400. now next we're going
34:14 - to be working with a total so we're
34:16 - going to have const
34:18 - total
34:19 - now this is going to be the variable now
34:21 - here i would want to parse int so i'm
34:24 - going to use this method that i have
34:26 - with parse interior and the reason for
34:29 - that is because i would want to grab the
34:31 - value that's going to be in the budget
34:33 - so whatever
34:35 - value has been passed in the budget and
34:37 - again remember important thing i'm only
34:40 - running this after i have added already
34:42 - in the budget now this is another
34:44 - stumbling point
34:46 - now we need to only call this callback
34:49 - whenever already there's some value
34:51 - otherwise this is not going to make
34:52 - sense you cannot get some value back
34:55 - from the dom element if there's nothing
34:59 - there if you're just running this
35:00 - function right away as the document
35:02 - content loads so we need a parse integer
35:06 - now here again we're going to use the
35:07 - property that we have and we'll have a
35:09 - budget amount text content so only thing
35:12 - i'm doing here here i'm passing the
35:14 - value
35:15 - so here i'm saying this budget amount
35:17 - text content value is equal to this
35:20 - value and then i'm getting it back so
35:22 - basically with the show balance i'm
35:23 - getting it back now we could have set it
35:25 - up that i'm passing it as a parameter or
35:28 - let's say here argument i mean we could
35:30 - have done a lot of things so i just
35:32 - chose to do it this way and again don't
35:34 - judge me for this everybody can do
35:36 - however they want so here let's do an
35:39 - expense now what is an expense now like
35:42 - i said later on like spence is going to
35:43 - make sense because we're going to be
35:44 - calculating all the values for now all
35:46 - we're doing is just
35:48 - returning to 400 since we're getting
35:50 - back this from the method and now
35:53 - let's do a this balance amount text
35:57 - content is going to be the total because
35:59 - as you notice i have the expression
36:01 - where i have the budget amount is going
36:04 - to be subtracted from the expense and
36:06 - now i just want to show it so whatever
36:09 - value i have in the balance so this
36:11 - balance amount again this is a property
36:15 - that holds the dom element
36:17 - with a budget amount and let's do a text
36:20 - content that's going to be equal to
36:22 - total so very simple we just grab the
36:25 - expense that we're going to calculate
36:26 - later but for now we have 400 then we
36:29 - grab the budget amount but since we're
36:32 - taking a text
36:33 - uh input then we i'm sorry not text
36:36 - input text content i want to
36:38 - run it through the parse integer so i
36:41 - want to get the integer and then i would
36:43 - want to get whatever total i have and
36:45 - now since i have the total i use this
36:47 - balance amount text content and again
36:50 - this would be a balance amount so
36:52 - balance amount over here and i would
36:54 - just want to check
36:56 - if this value is going to be less than
36:58 - zero then we're going to show it with a
37:00 - class of red so we're going to add a red
37:02 - color and then else if it's bigger than
37:05 - zero then we're going to be green and
37:07 - then last one is going to be if it's
37:10 - equal to 0 then we're going to have a 0.
37:13 - so let's write if
37:15 - and total so now we're looking for a
37:17 - total if total is less than zero so what
37:19 - we should do so we have a dis balance
37:23 - and class list again we first can find a
37:25 - class list and then we're going to find
37:27 - what we have in the css so we're going
37:29 - to remove show of green because i don't
37:31 - want to continuously keep on adding the
37:33 - classes so basic idea is since this is
37:36 - going to be changing we can have more
37:38 - expenses or we can have bigger budget or
37:40 - smaller budget
37:41 - i don't want to keep on adding and
37:42 - adding and adding classes so every time
37:44 - i'm adding the class i want to make sure
37:46 - that i'm removing the other classes that
37:48 - i'm going to be adding hopefully this
37:50 - makes sense and here we have this that
37:52 - balance and again this is going to be
37:54 - balance class list
37:56 - and again instead of removing now we
37:59 - would want to add red so whenever it is
38:03 - below zero we would want to add a color
38:05 - of red but we would want to remove the
38:08 - show of green of show black if it was
38:10 - there before because obviously we made
38:12 - it this can always change now two things
38:14 - the balance is again the easiest thing
38:17 - is going to be finding
38:19 - balance
38:21 - balance now where we have the balance
38:23 - the balance is going to be here
38:26 - so we have the expenses this would be 0
38:29 - and then we have a heading 6 of balance
38:32 - then the balance icon and the actual
38:34 - class of balance is going to be where we
38:37 - have the dollar sign so this is what's
38:40 - going to be turning red or green or
38:42 - something like this so this is what we
38:44 - have
38:45 - now after that in the main css classes
38:47 - are very straightforward show red is
38:49 - going to be red green is going to be
38:51 - green show black i mean we can guess is
38:54 - it going to be blue no it's going to be
38:56 - black so let's go back to
38:59 - js and let's figure out so we have if
39:01 - the total is less than zero so now we
39:03 - have very easy task so we can just grab
39:06 - this and we can just copy in first time
39:09 - here we're going to say else if
39:12 - and if the total is bigger than zero
39:14 - then we would want to do the opposite we
39:16 - would want to remove
39:18 - uh show red
39:20 - and show black and instead we would want
39:22 - to add
39:23 - show green and after that we have one
39:26 - more where this is gonna be equal to
39:28 - zero and i don't know why why but i
39:31 - looks like i copied two times hopefully
39:35 - um i don't know i'm not just uh having
39:37 - some kind of
39:39 - uh i don't wanna say heart attack but uh
39:42 - some kind of brain freeze or something
39:43 - let's know um show
39:45 - red
39:46 - show green so with the zero we would
39:48 - want to add the black one
39:51 - show black
39:52 - and we would want to remove what we
39:54 - would want to remove show red and show
39:56 - green again
39:58 - whenever class we're adding the other
40:00 - twos we would want to remove so this
40:03 - would be the show balance now like i
40:06 - said later on we're going to still work
40:07 - on a total
40:09 - expense so this would be the case right
40:11 - now so let's save it and let's figure
40:14 - out what we have so for now there's not
40:16 - going to be an expenses so this should
40:17 - be all green
40:18 - calculate and sure enough we have
40:20 - everything green over here now if i'm
40:23 - gonna have the adding on expenses
40:26 - this if everything is working correctly
40:28 - this should be black and i mean we can
40:30 - just check it out with a black one this
40:32 - should be black with zero this is black
40:34 - so i think that everything is going to
40:36 - be working fine now as we have the show
40:39 - of balance now everything is working
40:42 - fine with a submitting of the form now
40:45 - the next one is going to be really
40:47 - interesting because then we're going to
40:48 - be working with an expenses and this is
40:50 - going to be
40:51 - well let's just put it this way there's
40:53 - going to be a little bit more code than
40:54 - this
40:55 - so let's start
40:57 - in our event listeners since this was a
40:59 - submit budget form and the next one
41:02 - would be the expense form now for the
41:05 - expense form again the uh method name is
41:08 - not going to be very original
41:10 - submit and i'm not going to say budget
41:13 - i'm going to say expense
41:15 - because this is going to be the most
41:17 - original probably method name ever now
41:20 - here i have the submit expense form
41:23 - and now we can save it and obviously we
41:25 - need to go back and now it's saying that
41:28 - there is a well now it's actually saying
41:30 - that there's just no snow slow it's not
41:32 - snow slow network and
41:36 - it doesn't really matter to us we're
41:37 - working locally
41:39 - but
41:40 - now we had a what we had a submit budget
41:43 - form
41:44 - now we need a
41:46 - submit of expense form because this is
41:49 - going to be way more interesting so
41:50 - after a show of balance and we can just
41:53 - maybe leave this uh total expense all
41:56 - the way in the bottom we can do a submit
42:00 - submit uh
42:02 - submit
42:04 - expense form so this is going to be our
42:08 - comment now within this method of submit
42:13 - expense form
42:15 - we're going to be selecting few
42:17 - properties and we're going to be
42:18 - creating the variables so first is going
42:21 - to be const
42:22 - expensed value now expense value is
42:25 - going to be very similar to what we had
42:27 - in a budget now the difference is this
42:29 - is not going to be budget input it's
42:31 - going to be expense input we have
42:32 - expense input and an amount input so
42:35 - whatever the actual expense is and
42:38 - whatever the amount for that expenses so
42:41 - this not expense input and again i
42:44 - suggest if you are have confusion where
42:46 - we're getting this you can use the
42:49 - command find and you can just find the
42:51 - class that we're searching for
42:53 - const amount value
42:55 - so
42:56 - amount value and this is going to be
42:59 - equal to a input amount so amount input
43:02 - and again we're going to use value and
43:04 - again since these are forms we can use
43:06 - this property value to get back the
43:08 - value
43:09 - now we really don't care what we're
43:11 - going to be console logging if we really
43:13 - want we can cancel log the amount value
43:16 - but this should be straightforward what
43:18 - we're getting back and again this is
43:20 - going to be very similar to what we had
43:22 - before so we're going to be checking for
43:24 - three things this time so x if expense
43:28 - value
43:29 - isn't going to be zero so if you're
43:31 - passing something that uh well passing
43:34 - with no name
43:36 - then we're going to have or so in this
43:38 - case we're going to say amount value
43:40 - so amount value and in this case we're
43:43 - going to say this is equal to zero and
43:45 - last one is going to be if the amount is
43:47 - less than zero because these both of
43:49 - them are type number so we can also put
43:52 - zero but less than zero but this
43:55 - wouldn't make sense if we're trying to
43:57 - actually set up our budget so again or
44:00 - operator and amount value is going to be
44:03 - equal to less than zero so if any of
44:06 - them are true since we're using the or
44:09 - operator again we would need to work
44:11 - with this feedback we would need to add
44:13 - the feedback so this in this case this
44:15 - is not going to be budget feedback this
44:17 - is going to be expense feedback and
44:19 - again this is set up in the properties
44:21 - of our constructor
44:24 - so let's go down and expense feedback
44:26 - let's do the same thing we had before
44:28 - class list now again we're going to
44:30 - first show the item and then we're going
44:32 - to add some text in there so let's do
44:35 - show item and again the setup was
44:37 - exactly the same like we had with a
44:39 - budget feedback where the initial was a
44:42 - display of none and now we're just going
44:44 - to show the item
44:46 - so let's save this and still is going to
44:48 - be complaining about some slow network
44:51 - and then we'll have expense feedback
44:53 - class list now after that i would want
44:55 - to work with a inner html so this
44:59 - expense feedback inner html and then
45:04 - let's look at a template literal since
45:06 - we can use the inner inner html and
45:09 - we're doing the same thing that we had
45:10 - before so we have paragraph values
45:13 - cannot be
45:15 - empty
45:16 - or
45:18 - negative
45:19 - so this is going to be passing and then
45:21 - since we're using temple literals we can
45:23 - just
45:24 - write whatever tags we would want over
45:26 - here and again since we're doing the
45:28 - same thing as before we need to reassign
45:30 - so we'll have const self and this is
45:32 - going to be equal to this because we're
45:34 - going to be calling the same thing we're
45:36 - all going to have a set timeout function
45:39 - now this like i keep repeating this
45:41 - function is going to
45:42 - expect a callback function now this
45:44 - callback function is going to be run
45:47 - after specific amount of time which is a
45:50 - second parameter again in our case 4 000
45:53 - milliseconds which is 4 seconds
45:55 - and since we already have covered the
45:57 - self
45:58 - and expense feedback
46:00 - again we're still accessing the class or
46:04 - the instance of the class and we have a
46:06 - class list and now in this case we would
46:09 - want to remove so remove what we would
46:11 - want to remove well it's simple enough
46:12 - we would want to remove the show item so
46:16 - as we save this everything should be
46:18 - working fine and we're going to have or
46:20 - we can just test it out you know what
46:22 - let's do a first fix a car and add
46:25 - expense and sure enough we have a values
46:27 - cannot be empty or negative even though
46:29 - if only one of them is so you can
46:31 - already guess if both of them are going
46:33 - to be negative then we're going to have
46:35 - the same thing now after that let's do
46:38 - you know what let's do just the second
46:39 - one
46:40 - so let's say that or let's try you know
46:43 - what let's try
46:44 - uh adding a negative value
46:46 - so here fix a car and still we have the
46:49 - values cannot be empty or negative so
46:51 - basically this is all we're doing we're
46:52 - just checking for the values now this
46:54 - was a first
46:56 - code block for the if so this was if now
46:59 - we need to else because obviously
47:01 - there's going to be cases where
47:02 - hopefully most times there's going to be
47:04 - cases where all the values are there
47:07 - so let's do another variable this is
47:09 - going to be ml
47:11 - now we are getting back the amount value
47:14 - now the amount value we're getting back
47:16 - is again a string so we need to use
47:18 - again parse integer so we need to
47:20 - convert it otherwise this is not going
47:22 - to make sense so we're going to have
47:23 - amount value and we're using the parse
47:26 - integer so now this variable is going to
47:28 - hold whatever amount we're passing in
47:31 - however this is going to be turned into
47:32 - number
47:33 - not like we had before as a string so
47:37 - here let's say this and this would be an
47:39 - expense value now the expense input
47:42 - sorry not expense value and we're just
47:45 - set it setting again equal to a empty
47:48 - values so if everything is fine we added
47:50 - an expense i would just want to delete
47:52 - the fields so the leads the field should
47:54 - be empty and again i have the access to
47:57 - the properties because of a constructor
47:59 - and then this would be expense
48:02 - input then i have the amount input
48:06 - so i have expense input and amount input
48:08 - and they all going to be cleared once
48:10 - everything works fine then i also would
48:12 - want to set up first a
48:15 - object and we're going to create an
48:17 - object and then we're going to pass the
48:19 - object right here notice we have a item
48:22 - list which is the array that we have so
48:24 - i'm going to create a
48:26 - object that's going to contain the value
48:28 - of expense and the amount expense and
48:30 - also i'm going to grab the id and i'm
48:33 - gonna
48:34 - add a 1 to id
48:36 - and before that i'm just going to add it
48:38 - to a item list
48:39 - so we're going to do a incrementation of
48:42 - id so first let's create an object of
48:44 - let
48:45 - expense so this is going to be our
48:47 - expense and this is going to be an
48:49 - object now id is going to be equal to
48:51 - what well this
48:53 - dot item id now where we're getting back
48:55 - the id well if we'll scroll up this is
48:58 - going to be our item id so this is where
49:00 - we're getting the id now second is going
49:03 - to be what this is going to be title
49:05 - title is going to be equal to expense
49:08 - value so expense value is going to be
49:11 - here we have access to it so expense
49:15 - and here we have the expense value now
49:18 - for the amount i would want to grab the
49:19 - amount not the amount value because
49:22 - remember now this is a number so amount
49:25 - and this is going to be equal to amount
49:27 - and just a quick note uh technically
49:30 - with es6 we could have just skipped this
49:32 - if the both names are the same we don't
49:35 - need to add the property name and the
49:38 - value if they both match we can just
49:40 - skip it and just say amount since we
49:42 - have the access for this amount just
49:44 - that's just a side note and here we'll
49:47 - do a this item id like i said we would
49:49 - want to increment and this is going to
49:51 - make sure that each and every item we're
49:52 - adding is going to have a unique id
49:55 - and then we're going to do the same
49:57 - thing as we did in the previous project
49:59 - where we will grab the array the item
50:02 - list array and we'll just going to add
50:04 - using the push method and what we're
50:06 - going to be adding well the expense that
50:08 - we're creating so whatever we have here
50:10 - this variable and this object will be
50:13 - more precise than we're just going to be
50:15 - adding now after that i would want to do
50:18 - two things
50:19 - i would want to call two methods again
50:22 - which we haven't created yet now the
50:25 - first one is going to be show i'm sorry
50:27 - add expense so basically the display the
50:31 - expense and then i would want to show
50:34 - the balance so here we're going to call
50:35 - this first the add expense and again we
50:38 - have the access to it because we are
50:42 - within the method still we are not
50:44 - within some other function so this is
50:46 - going to point to whatever
50:49 - method we have and this expense is going
50:52 - to expect a parameter of an object so
50:55 - since we have the object this would be
50:56 - our expense object we're going to be
50:58 - passing it so we're passing in this as
51:00 - an argument but we're going to be
51:01 - expecting that in our parameter so let's
51:05 - just make sure that we are outside the
51:08 - previous method and let's maybe leave a
51:10 - comment just so i don't forget we also
51:12 - have a
51:13 - show balance i just don't want to create
51:15 - it right now
51:17 - so we'll have a show balance so once we
51:19 - create this we have a ad expense so
51:22 - let's make a comment
51:24 - add
51:25 - expense
51:27 - and here again this is going to be a
51:29 - method that expects to have a
51:33 - object
51:34 - so add expense and we can name this
51:37 - whatever we want again this is a
51:40 - parameter so let's just go with the same
51:42 - one as we had with an expense but we can
51:44 - name this really independently so again
51:47 - we're going to create a div and again
51:48 - why we're creating the div now if i'm
51:50 - going to go back to index.html i believe
51:53 - this time i commented out
51:55 - notice we have the title value
51:58 - first we have the expense list
52:00 - this is this is where we have all our
52:02 - expenses then this would be the title
52:05 - and for the title value and
52:08 - expense title and then we'll have a
52:10 - single expense now each and every time
52:13 - obviously we're going to be adding this
52:15 - single expense so only thing we can do
52:17 - is we can just grab this div this is
52:20 - going to be my single expense because
52:22 - we're going to be doing a lot of things
52:24 - that we did before we're going to create
52:25 - a div we're going to add this class and
52:27 - then we're going to place everything
52:28 - with within this div so actually you
52:30 - know what i'm selecting the wrong div
52:33 - because i only need this guy
52:35 - because i'm going to be creating this
52:37 - parent div i only need whatever is
52:40 - inside
52:41 - so again let me select this for a third
52:43 - time you're probably sick of watching do
52:46 - this but cons div
52:48 - then we're going to do a document and
52:50 - we're going to create an element so
52:52 - let's do create element we're going to
52:54 - be creating a div now we know that this
52:57 - div is going to have class of expense
52:59 - because i just show you so we'll have
53:01 - class list of ad expense and just as a
53:04 - side note you can really do however you
53:06 - would want
53:07 - but i find it much more easier first to
53:10 - do it in html now obviously you cannot
53:12 - see it because i commented out but in
53:14 - general you make it in html then you
53:16 - apply the classes and then at the end
53:18 - you can just comment it out and add it
53:20 - with a template literal and i think this
53:23 - is the fastest and best way to do this
53:25 - now again this is just my opinion i
53:27 - don't i'm not saying that i'm right or
53:29 - wrong i'm just saying what i prefer to
53:31 - do you really can do however you would
53:33 - want and let's just copy and paste this
53:36 - now i have the expense id and also here
53:39 - i have the expense id now where i'm
53:41 - getting the expense id i'm getting back
53:43 - from the object so it's just as simple
53:45 - as that now i could have left these
53:47 - empty but for now we already have done
53:50 - so many projects a lot of things are
53:52 - making already sense where we're getting
53:54 - this from i'm getting back the object
53:56 - and i just want to have access to this
53:58 - id and i'm going to add this to a
54:02 - attribute of data id to a edit icon and
54:06 - to a delete icon so basically every time
54:09 - i'm going to be clicking icons i want to
54:10 - know the id because this is going to
54:12 - help me to filter out
54:14 - the list that we're creating and to make
54:17 - sure that we're getting the proper
54:19 - element and we're deleting the proper
54:21 - element most importantly deleting i
54:23 - guess well editing probably is also
54:25 - important
54:26 - so we have the expense id and expense id
54:29 - we also need a title and we need an
54:31 - amount
54:32 - so let's find out where we have the
54:34 - amount so first this would be a amount
54:37 - so again we are using a template string
54:39 - so we can access
54:40 - the variable with a
54:44 - dollar sign expense
54:46 - title here and then now you know what
54:48 - this was the amount
54:50 - i don't know who i am maybe having some
54:52 - kind of brain freeze right now uh title
54:55 - it's right here
54:57 - good one good going uh again we use a
55:01 - dollar i don't know why we had the ah
55:03 - now you know what this was this is the
55:05 - wrong dollar cent so this is fine uh
55:08 - oh you know what no it wasn't sorry so i
55:11 - apologize and just keep on seeing too
55:13 - many dollar cents right now uh expense
55:15 - title this is what we need so expense
55:18 - uh this was going to be our object and
55:21 - then we'll have a title so once we saved
55:23 - it now we obviously need to use the
55:26 - again some kind of method to append this
55:29 - to something
55:30 - now
55:31 - since we're working within our class the
55:34 - method has access to what has access to
55:36 - this property now this property holds
55:38 - the value the value is what the element
55:40 - that we're getting back from the id
55:42 - let's scroll down let's
55:45 - look where is our method then this would
55:47 - be this expense and we would name this
55:51 - expense list and we're going to do the
55:53 - method of
55:54 - guess what up in child and what we're
55:57 - happening
55:58 - well i mean we can spend half an hour
55:59 - thinking about it but i would probably
56:02 - say the div since we created the div but
56:05 - i mean we can happen whatever we would
56:06 - want really but let's just do the div i
56:09 - think it's going to make a little bit
56:10 - more sense
56:12 - so
56:13 - we have the budget complete we have the
56:17 - expense complete
56:18 - i guess we're done
56:20 - um nah probably not we still need to fix
56:23 - something so we have fixed car
56:26 - 400 at expense boom
56:29 - fixed car 400 great
56:31 - why nothing is showing here
56:33 - uh well we haven't done anything right
56:35 - so this is why nothing is showing so
56:37 - fixed car 400 awesome
56:39 - now we still have an issue here why this
56:42 - is not empty
56:44 - we i thought we were working on this we
56:46 - had the expense input was supposed to be
56:50 - a empty now also we had the amount input
56:54 - that was supposed to be empty so let's
56:56 - figure out what is an issue why we don't
56:59 - have the proper way of doing that and
57:02 - the reason that is because we need to
57:04 - select the value so for now we're just
57:06 - targeting the whole input see over here
57:08 - we have the input now this is why it's
57:10 - important whenever we're working with a
57:12 - forms we need to use actually value this
57:15 - is kind of crucial otherwise you can see
57:17 - what's happening we cannot get the value
57:19 - if we'd be getting the value or we
57:20 - cannot set the value now in this case
57:22 - we're setting the value so let's try
57:24 - again let's try the fixing the car let
57:26 - me let's do this time five
57:29 - thousand and sure enough everything's
57:31 - fine we cleared it and i want to say
57:34 - boom again
57:35 - because we added an expense and i can
57:37 - keep on adding as many expenses as we
57:40 - would want now like i said
57:42 - the second one
57:44 - that we are interested
57:46 - is showing the balance
57:49 - so again this would be the method that
57:52 - we're interested so we have a show of
57:55 - balance
57:56 - now if you remember we already had this
57:59 - one-time show of balance
58:00 - and remember the reason why we did not
58:04 - want to
58:05 - run the expenses
58:07 - is or add anything to the expenses that
58:10 - we were creating is because there was no
58:12 - values
58:14 - so i think now it's going to make a
58:15 - little bit more sense if first we're
58:18 - going to add this show balance the
58:20 - method that we already worked before and
58:22 - again this method is what we used
58:25 - clearly when we were working with a
58:26 - budget so nothing has changed with this
58:28 - method so we can have the same method
58:31 - so this
58:33 - this show balance and now once we run
58:37 - this method
58:38 - then something should happen and that
58:41 - something is going to be first of all
58:42 - budget
58:43 - so
58:44 - 5
58:45 - 000
58:46 - calculate then we're going to have a 4
58:48 - 600 and again the reason for this 4 600
58:52 - because we run this show balance and we
58:55 - have hard coded the values so every time
58:57 - i'm going to be adding this fix a car
58:59 - nothing is should be changing yeah you
59:02 - notice nothing is changing even though
59:03 - i'm running
59:04 - so we need to go and fix this um
59:07 - total form otherwise this is not going
59:09 - to make sense we i mean total expense
59:12 - i'm sorry we have total expense so we
59:13 - need to fix this so first let's set a
59:17 - amount equal to zero because this is
59:19 - going to be our starting point
59:20 - then i would want to check
59:23 - if the item list length so the item list
59:27 - is the element that holds all the items
59:30 - if there's more than one item
59:32 - i want to start calculating this if
59:34 - there is no item i don't want to
59:35 - calculate anything so here i'm going to
59:37 - say like this i'm going to say if this
59:39 - and i have access to the item list
59:41 - because it is in my properties then i'm
59:44 - going to calculate if the length of the
59:46 - item list is bigger than 0 then i'm
59:48 - going to want to do something other than
59:50 - that i wouldn't want to do anything
59:52 - other than that i'm just going to say
59:54 - very simple i'm going to say this and
59:56 - now i'm going to use the expense amount
59:58 - is going to be text content so again we
60:01 - have the budget amount we have the
60:03 - balance amount so this would be the
60:04 - expense amount i was going to set it
60:06 - equal to total so all i'm saying is if
60:09 - there's no list items in expense list
60:11 - this should be zero there's no reason
60:13 - for it to be anything other than zero
60:15 - because we haven't added any expenses
60:17 - and last thing i also would want to
60:20 - return the total which would be zero so
60:22 - this is all correct however we need to
60:24 - add the logic where we have the item
60:26 - list length is bigger than zero and what
60:28 - we're going to do over here
60:30 - well well it's going to be very simple
60:32 - we're going to have a total
60:34 - then we're going to set it equal to
60:36 - this that item list
60:39 - so we're going to have a item list now
60:41 - what we're selecting this item list for
60:45 - we're going to be selecting so we can
60:47 - run the method of reduce
60:50 - now why we're running the method off
60:52 - reduce because we want to calculate the
60:54 - values over here so this is all we're
60:57 - doing we just would want to get the
60:59 - values that we have over here so first
61:02 - things first maybe in this case you know
61:04 - what let's run the console.log just so
61:06 - we can have a better understanding of
61:08 - what's happening so let's first let's do
61:11 - a console log of what we have in the uh
61:14 - item list and let's add some items just
61:16 - so we can see what's happening so i'm
61:18 - going to have item item
61:21 - list over here and let's just
61:22 - console.log item list
61:24 - and let's do a again fix a car
61:28 - 300
61:30 - adding once and item list is actually
61:33 - not defined we have 019 well that oh
61:36 - yeah obviously because i need to use
61:38 - this
61:39 - i'm selecting the this again so let's do
61:42 - fix a car
61:43 - 300 add expense so notice
61:47 - empty array
61:48 - okay so why i'm getting the item list
61:51 - well the reason for the item list is
61:53 - very simple the item list is our array
61:56 - so every time
61:58 - we're adding something in the item list
62:01 - what do we have sorry i said empty it's
62:03 - not empty we have one value over here
62:05 - i'm sorry i misspoke
62:07 - but the idea is every time we're going
62:08 - to be running this and we're going to be
62:11 - adding
62:12 - this to a item list remember the
62:15 - itemlist.push
62:17 - now we have access to it this is the
62:19 - whole purpose of the creating of array
62:21 - so what i would want to do right now if
62:24 - the length of this array
62:27 - is bigger than zero i know that there's
62:29 - some items so only thing i'm doing is
62:31 - i'm just gonna use the reduce function
62:34 - and i'm just going to count all the
62:37 - values for the amount property
62:39 - because i know that i'm setting the all
62:41 - my amounts to all the objects that i
62:43 - have so let's do another one just again
62:46 - i don't know buy milk
62:48 - something redundant buy milk
62:51 - and what would be the expense i don't
62:53 - know let's say milk went up to price and
62:55 - it's 200 bucks
62:57 - uh two items two items perfect again
63:00 - amount 300 and 200. so again the idea is
63:03 - i'm not going to be looking this in a
63:04 - dom i have access this in the array so
63:07 - only thing i'm doing is just getting my
63:09 - reduce method that i can use and i can
63:12 - just count all these values together
63:13 - it's all it is so let's do again total
63:17 - now we're going to set this total equal
63:19 - to what we're going to set this total
63:21 - equal to reduce now unlike the
63:24 - i believe 4h and the filter in the map
63:27 - this is not going to it can return more
63:29 - than just over not more than just not
63:32 - just an array it convert
63:35 - using the reduce method we can return
63:37 - whatever we want so in our case we just
63:39 - want to return zero so the number i'm
63:42 - sorry not the zero and we're going to
63:44 - start with 0.
63:45 - just a number we want to return the
63:46 - number so let's do a reduce now reduce
63:49 - function is again going to take a cobalt
63:51 - function and this callback function is
63:53 - going to take two parameters now a lot
63:56 - of times they're called accumulator and
63:58 - current now you can really name them
64:00 - however you would want but again i'm
64:02 - just going to use the accumulator and
64:04 - current now we can also set it maybe
64:06 - this one to total
64:08 - then this would be a function block so
64:09 - the callback function block and then for
64:12 - reduce we need the initial value so this
64:14 - is what i was saying with zero so all
64:16 - i'm saying is i can write here whatever
64:18 - i want i can write array i can write
64:21 - object however what i'm looking for is
64:23 - number because i'm setting this total to
64:25 - number so each and every time i'm going
64:28 - to be adding these values i would want
64:30 - to get the sum of it and display
64:33 - whatever i'm getting back and also
64:35 - calculate my balance
64:38 - now how do i do this so first of all
64:39 - whenever we're using the uh the reduce
64:42 - we need to return the accumulator so
64:45 - what we what needs to be understood that
64:48 - every time we're running this reduce
64:51 - we were going to loop to this array and
64:55 - think of this as a total that it's going
64:58 - to be returned
64:59 - each and every iteration so we have
65:02 - access to this accumulator and we're
65:05 - going to probably maybe do let's do some
65:07 - console logs just so it gives us a
65:09 - little bit better idea
65:11 - but here let's do first a console log
65:14 - and let's do a console log off
65:17 - accumulator so let's call this uh i
65:19 - don't know a
65:21 - i mean this is not totally correct but
65:23 - let's say just total
65:25 - total
65:26 - and let's do template strings this is
65:28 - going to be a little bit easier
65:29 - so
65:30 - total
65:32 - is now we're going to access the
65:34 - accumulator so first let's look at
65:36 - accumulator and then let's say
65:39 - and the current value
65:42 - value is
65:44 - and now let's do again access the value
65:47 - of current so let's do a first of
65:50 - console log
65:51 - then let's do right away our um whatever
65:54 - logic we would want and here all i'm
65:56 - saying is that with each of iteration i
65:59 - would want to grab the
66:01 - value that i'm accumulating and i just
66:04 - want the add the current amount that i
66:07 - have now why i'm getting the current
66:09 - amount because i'm looping through this
66:11 - array item list now the item wrist has
66:14 - the atoms of objects correct
66:17 - so current reflects the object
66:20 - now where i have the value in the object
66:22 - i have the in amount property so this is
66:25 - why i'm going to say current so current
66:28 - object that
66:30 - i am
66:30 - iterating through that i'm using
66:33 - in my iteration and i would just want to
66:36 - add the amount
66:37 - and like i said last thing remember
66:39 - always return the amount otherwise i'm
66:42 - sorry the accumulator otherwise this is
66:44 - not going to make sense
66:45 - so let's save this and now we're going
66:47 - to run this every time we're going to be
66:48 - adding values so i'm sorry i'm going to
66:50 - be sticking with fixing the car because
66:52 - it's saved here and i just saves me
66:54 - typing
66:55 - add expense now i have the total is zero
66:59 - and the current value is an object now
67:02 - notice because i made a mistake i'm not
67:05 - looking for a current i know that this
67:07 - is going to be an object i need a amount
67:10 - because this is what i need so this is
67:11 - what i'm saying is as we're
67:14 - going through this we're getting these
67:16 - values as an object because we have
67:18 - stored them in the item list as an
67:20 - object so again let's do fixing the car
67:23 - for the
67:24 - 45th 000 time
67:26 - so here we have total is zero so we
67:28 - start with zero and the current value is
67:31 - 400 now what do you think here the
67:33 - amount right now is because we added
67:35 - this 400
67:36 - this should be 400 right so in the next
67:39 - iteration we're going to start the total
67:41 - should be 400 and the current value is
67:43 - going to be something so let's try this
67:44 - out let's do another fixed car because
67:46 - we really don't give a damn about it
67:48 - whatever name it is and let's just add
67:50 - 100
67:51 - 100
67:52 - ad expense
67:54 - notice the total is 400 the current
67:56 - value is 100 so this is going to be
67:58 - added again to a 400 the next iteration
68:01 - we're going to have 500 so this is how
68:03 - we're getting back the values and i mean
68:05 - the reduced function is
68:07 - extremely extremely powerful i mean the
68:10 - real i mean this is one of those things
68:12 - if you want to learn something learn or
68:14 - juice because this is going to save you
68:16 - tons of time it really one of the in my
68:19 - opinion one of the most
68:20 - definitely out of the all the array
68:23 - methods the most powerful method uh
68:25 - let's save this now we have the uh what
68:28 - it was total expense done so now it kind
68:31 - of made a little bit more sense as we
68:33 - were adding the values and now we need
68:35 - to figure out what we're doing
68:37 - so we have everything set up so we have
68:40 - submit expense form and we have the
68:42 - balance and if i'm correct everything is
68:44 - working correctly right so we're gonna
68:46 - have a five grand
68:48 - we're gonna calculate
68:50 - and we're gonna fix a car again
68:53 - i'm gonna have eight two thousand so
68:55 - everything's fine so we have two
68:56 - thousand and the balance is three
68:58 - thousand so if i'm going to change this
69:00 - to a grand
69:01 - now this should be a expenses it's still
69:04 - gonna stay
69:05 - two thousand and now the balance is
69:07 - going to be negative thousand because
69:09 - obviously our budget is uh one thousand
69:13 - now we have the submit expense form done
69:17 - now the last one is going to be working
69:20 - with these icons
69:22 - with a edit icon and with a delete icon
69:26 - so let me go up and let me show you what
69:29 - i have
69:30 - so now i would want to select them
69:31 - somehow
69:33 - because i still want to have a
69:34 - functionality i would want to remove it
69:36 - or
69:37 - meaning delete it or edit it and edit it
69:40 - is going to happen like this again we're
69:42 - going to remove it from the dom we're
69:43 - going to remove from the list
69:46 - and then we're going to place the item
69:47 - here so if you want to edit then we can
69:49 - be able to edit if we just want to
69:50 - remove we're just removing we're just
69:52 - deleting from the dom and from the item
69:55 - list
69:56 - now this we're going to set up within
69:58 - expense list
69:59 - because as we're added again we could
70:02 - have technically done this as a callback
70:05 - function
70:06 - as we're adding the items here
70:09 - but in our case we're just going to do a
70:11 - event propagation where we can just use
70:13 - the event target now this would be
70:15 - another option again it really doesn't
70:17 - matter how you do it i just for the sake
70:19 - of the tutorial i just thought if you do
70:22 - another callback that might be confusing
70:24 - so let's just skip this and let's do it
70:26 - with event listener so only thing we're
70:28 - doing is since we don't have an access
70:31 - to it
70:32 - normally since we run the function
70:33 - because the items we're adding
70:35 - dynamically
70:36 - i would want to do the
70:38 - click handler i wouldn't want to attach
70:41 - the listener for a parent the parent is
70:44 - going to be expense list so anywhere i'm
70:46 - going to be clicking on expense list i
70:48 - would want to get back what i'm clicking
70:50 - on and the moment i found out what i'm
70:52 - clicking on
70:54 - then i would want to do some kind of
70:56 - action so this is going to be happening
70:58 - in the event listeners
71:00 - now again we can do the simple event
71:02 - target
71:03 - and i don't know why i'm not actually
71:05 - doing the event
71:07 - why i'm so brave i'm trying to find the
71:10 - event target without actually getting
71:12 - the event so we need the event object
71:14 - first and then let's do again a console
71:17 - log of target and this is going to
71:19 - because this
71:20 - usually clears everything up because the
71:22 - event and event target sometimes can be
71:25 - a little bit misleading so we always can
71:26 - do a console log
71:28 - now obviously this is not going to make
71:30 - sense now i'm pressing on the titles so
71:33 - this is not what i want what i would
71:35 - want is get back the element that i'm
71:37 - clicking on once we have added the items
71:40 - and this is like i said we can do
71:41 - dynamically because there's no way for
71:43 - us to select those classes just i mean
71:45 - there is with a callback but not let's
71:48 - say not to write a function here where
71:49 - you're going to be clicking where you're
71:51 - going to be looking for the edit or
71:54 - delete item class
71:56 - 500
71:58 - at expense so now this is more
72:00 - interesting now we have the expense the
72:02 - expense is 500
72:04 - and now we have these two icons
72:06 - this is what i'm looking for so i'm
72:08 - looking for this icon of edit and in
72:12 - fact i'm actually looking for the
72:15 - uh the element
72:17 - the not not the actual icon i'm not
72:20 - looking for the icon in fact i would
72:22 - want to get a
72:24 - link that is apparent of this so we're
72:27 - actually going to be using again the
72:28 - parent element property and the second
72:30 - one is going to be i the trash icon so
72:33 - this is all good
72:34 - we just need to use the parent element
72:36 - because the parenthood has the class so
72:39 - this is the case where we're going to be
72:40 - going back to a index html and notice
72:44 - what i have now we could have looked
72:45 - this in objects since we're obviously
72:48 - adding them but anyway we have the edit
72:51 - this is the icon that we're getting back
72:53 - what i need is this edit icon i want to
72:56 - make sure that
72:57 - the parent element of the element that
72:59 - i'm clicking on has this class because
73:02 - then i know that i'm selecting this icon
73:04 - or the lead icon so these are the two
73:07 - icons that i have so i should be
73:08 - listening to it and the way we do this
73:10 - we use the parent element now again we
73:13 - have done this before so we're not going
73:15 - to be going crazy with the console logs
73:17 - anymore we can just use a parent element
73:20 - console.log not console.log the property
73:23 - now if you have confusion about this
73:26 - again i suggest just console.log out the
73:28 - event target parent element and
73:31 - everything is going to be way more clear
73:33 - than if i spend another half an hour
73:34 - explaining this so we're going to have a
73:36 - target and like i said we are looking
73:38 - for a parent element and what is the
73:40 - parent element this is going to be a
73:41 - link now the link has what link has
73:44 - class now the way access to class we can
73:46 - use the classlist property now what
73:49 - classlist we we can use we can use
73:51 - contains so what contains
73:53 - contains offers us to check
73:56 - whether this element the has the class
74:00 - of whatever we're writing here or not
74:03 - so again this is really really uh useful
74:06 - uh property of classlist and obviously
74:09 - of contains
74:10 - and now we're looking for the edit icon
74:13 - this is obviously what we want
74:16 - as one option and the second one is
74:19 - going to be delete icon now here i can
74:21 - do the if so this is going to be my
74:23 - first if and then we can just do the
74:25 - elsif so let me just grab copy and paste
74:29 - this and here let's say else and if now
74:32 - i'm not going to be looking for edit
74:34 - icon this is where i'm going to be
74:35 - looking for a delete icon now what do
74:38 - you think we need over here
74:40 - we need some function because obviously
74:42 - for now we're just always saying is well
74:44 - if it is or if it's not i mean we can
74:46 - write something here that that might be
74:48 - fun
74:49 - but we need a function now what is the
74:51 - function well we can get the function
74:53 - from the method of our class instance
74:57 - right so we can do ui
75:00 - then let's write what method we're going
75:02 - to be creating edit
75:04 - and we're going to write expense
75:06 - expense now this method again i created
75:08 - obviously before and this
75:11 - expense is going to take one parameter
75:14 - and that parameter is going to be the
75:16 - parent element so basically a link so
75:18 - here we're going to do the same thing so
75:20 - if we're looking for the
75:22 - element that has the class i also would
75:24 - want to select the same element so i'm
75:26 - just going to use
75:27 - event target and parent element that's
75:30 - all i'm doing so i'm basically getting
75:31 - back to link now this would be the
75:33 - editing expense and the same is going to
75:35 - be for the delete expense now here we're
75:36 - just going to
75:37 - use a different name so delete expense
75:40 - and again the same thing it accepts the
75:42 - parameter of event target parent element
75:45 - so some kind of object
75:47 - or
75:48 - my apology is some kind of element now
75:50 - obviously since we're working with dom
75:52 - we're really going to be getting back an
75:54 - object
75:55 - but now we will gonna go up again to a
75:59 - class so total expense was our last one
76:03 - then
76:04 - i don't know either underneath or above
76:06 - it doesn't really matter whatever it
76:08 - makes sense to you it's sometimes it's
76:11 - hard to for me to decide for the
76:12 - tutorial where to place everything uh
76:15 - but um yeah we just need to create these
76:17 - methods and we're done now these methods
76:20 - might be a little bit lengthy but we're
76:22 - going to be fine
76:23 - edit expense
76:25 - the name of the method
76:27 - expense and expensive first of all i
76:30 - need to
76:31 - learn how to
76:32 - properly write everything and here this
76:35 - is the element so this is the element
76:37 - that i'm
76:38 - getting back now obviously this is a
76:40 - parameter and here this is an argument
76:43 - there i'm expecting the element here i'm
76:45 - passing the element now the second one
76:47 - is going to be delete expense where i'm
76:49 - going to do the same thing
76:50 - i'm just going to write delete expense
76:53 - and again we're going to pass the
76:55 - element
76:57 - so some kind of dom element that we're
76:59 - getting back
77:00 - and first you know what we're just going
77:02 - to write first edit
77:04 - edit expense this might be a little bit
77:07 - longer and then we'll have a delete
77:09 - expense so we're almost there i mean we
77:11 - all we have pretty much two methods that
77:14 - we need to work on
77:15 - this is going to be a little bit maybe
77:17 - probably complicated than before but
77:20 - delete expense
77:22 - now
77:23 - comments done
77:24 - the method's done
77:26 - great so let's work on it
77:28 - remember again we had the id correct
77:32 - remember we passed this id so we're
77:34 - going to make use of this id how do we
77:36 - access this
77:37 - attribute well we need to use data set
77:40 - so we will use a data set
77:43 - and we're going to access this by using
77:47 - dataset.id
77:48 - now this is important because again this
77:51 - is going to help us tremendously because
77:53 - otherwise then we really need to do a
77:55 - lot of a dom traversing so we need to
77:58 - have access to this id now how do i have
78:00 - access to this id first i'm going to
78:02 - create a variable i'm going to set this
78:04 - is going to be equal to id
78:06 - then what i'm going to be getting back
78:08 - is going to be string again so again
78:10 - we're going to use parse and so parse
78:12 - integer
78:13 - now
78:14 - what i would need i would need element
78:18 - now element has what it has the data id
78:21 - attribute
78:22 - now i could use a data set like i said
78:26 - property now for the data set only thing
78:28 - that matters is what name it is since
78:31 - this is data id i'm using data dot id
78:35 - because i couldn't write like this this
78:37 - is not going to make sense i need to
78:39 - write it as a object property so i'm
78:42 - getting back the id
78:44 - then i'm going to work with a parent
78:48 - and i'm going to remove this parent from
78:50 - the list again why am i getting the
78:52 - parent because look at the expense list
78:56 - i have the
78:57 - expense list and i need to
79:00 - go up to dom i'll traverse the home all
79:04 - the way up to the expense list and make
79:06 - sure that it deletes whatever
79:09 - parent element
79:10 - of my icon now it's not going to be
79:13 - direct parent element because notice
79:15 - again the icons are sitting within a div
79:17 - then this div is sitting within
79:19 - something so we need to kind of hop up
79:22 - to the dom get to the proper parent
79:25 - element and just delete it and
79:27 - trust me whenever you're working this is
79:29 - a lot of pretty much console logging
79:31 - you're just okay parent element okay
79:34 - what is the okay next parental okay now
79:36 - i got to the point where i need okay
79:38 - let's just get this sucker out of this
79:40 - expense list so let's go up
79:42 - and again we'll just going to be doing
79:44 - very simple we're going to say let
79:45 - parent and now we just need to hop a few
79:48 - steps up so the first one is going to be
79:51 - element so i'm getting back the element
79:53 - then i'm getting back the parent element
79:55 - and again if this is confusing just
79:57 - console log it it's going to make way
79:59 - more sense so again another parent
80:02 - element another hop on above and then
80:05 - another one so basically we hopped uh
80:08 - three times so we'll have a element
80:10 - whatever element we got back but
80:12 - remember already within this element we
80:14 - did the parent element so technically we
80:17 - have four hops we're doing first here
80:19 - with the parent element property and
80:21 - then we're doing three more so we have
80:23 - element one more two more add three more
80:25 - so here we're selecting the parent
80:27 - parent which is actually this whole item
80:31 - and then after that we would want this
80:34 - expense list so the list that's holding
80:36 - all the items we just want to remove it
80:38 - now we know that we can remove it by
80:40 - first well first probably it's going to
80:42 - make sense if we're going to adding a
80:44 - from dom the comment
80:46 - this expense list this is
80:49 - the grandfather of all these elements
80:51 - you can call it like this now obviously
80:53 - stitch thing doesn't exist but
80:56 - let's just call it uh grandfather
80:58 - and we just want to remove the parent so
81:00 - whatever parent we're getting back we
81:02 - just want to remove from the expense
81:04 - list
81:05 - then the second one is way more
81:07 - interesting this is again using the
81:09 - filter
81:10 - where we would want to
81:12 - remove
81:13 - from the array that we had
81:16 - remember we even though we remove it
81:18 - from dom
81:19 - we still have this in the array because
81:21 - remember we placed the item whenever we
81:24 - had the expenses so remember we had the
81:26 - item list now i also would want to
81:28 - filter this out and i would want to
81:30 - filter out for two reasons
81:32 - first i would want to filter out so i
81:34 - get the value so i can place
81:36 - whatever i have within the item let's
81:38 - say the value and the amount so i can
81:40 - edit it and the second one is i would
81:42 - want to return the array without that
81:45 - item so first things first
81:48 - let's get the value my friends so we
81:51 - have the remove from the list
81:54 - and we have completed already removed
81:56 - from the dom
81:57 - remove from the list
81:58 - uh remove
82:01 - from the list
82:02 - and i'm sorry sometimes it's hard to
82:05 - talk and type so
82:07 - sometimes i'm gonna talk i'm just going
82:09 - to stop and type so let
82:11 - expenses
82:13 - expense
82:14 - this item list again this is the array
82:16 - that holds all our values now we can use
82:19 - the filter to find and what we would
82:22 - want to find we would want to find the
82:24 - item so we'll have a function
82:26 - the item that has the id
82:28 - the has the id of this id
82:31 - so whatever item in our array that has
82:34 - this id we would want to return it and
82:36 - we would return it to this specific
82:38 - variable so here we're going to have
82:40 - item but remember the filter is going to
82:42 - return the new array so again we're
82:44 - going to have to select a
82:46 - zero
82:48 - parent so not zero parents sorry i've
82:50 - been talking about parents too much uh
82:52 - zero item so zero index item not not
82:56 - just this is not going to return the
82:58 - variable this is going to return a new
82:59 - array so callback function
83:02 - now within the callback function we're
83:03 - iterating through the whole array and
83:06 - i'm going to say like this if the item
83:08 - that i'm iterating through so that that
83:12 - exact item in my array if this item id
83:16 - matches whatever id
83:18 - i'm getting back from my element data
83:21 - set
83:22 - then i'm solid and i just wanna
83:24 - return this if not then i just move on
83:27 - and in the perfect world if everything
83:29 - is correct
83:30 - since the all the ids are unique this
83:33 - should return only value there should be
83:35 - no other value so first we're going to
83:37 - get expense now the second one is we
83:41 - would want to work with a rest of the
83:44 - list correct
83:46 - because we have a
83:48 - one that is the item and the second
83:51 - thing we need we need to remove this
83:53 - item from the list at least temporary
83:55 - because what is the point of editing if
83:56 - it was going to be adding a new value so
83:58 - how do we do this we're going to say
84:00 - remove from the website list is dom
84:05 - sorry
84:06 - list
84:07 - remove from the list and again we're
84:08 - doing filtering
84:10 - now what is the filtering this time
84:13 - now
84:14 - i'm going to set a variable
84:16 - so i'm going to say let and this is
84:18 - going to stand for temporary list so
84:20 - temp list i can name this whatever you
84:23 - would want so this
84:25 - item list again selecting the same array
84:28 - again using the same filter now this
84:30 - time i don't want to return this one
84:32 - item
84:33 - i don't care about i already got the
84:34 - item i'm fine
84:36 - i would need the rest of the list and
84:38 - then i'm going to use this temp list and
84:39 - i'm going to assign this to a my list
84:42 - that i have right now so filter again
84:45 - callback function within the callback
84:47 - constraint the parameter the parameter
84:49 - refers to every item in the list and
84:52 - here we're going to say return
84:54 - and i only want to return what i want to
84:57 - return
84:58 - the item
84:59 - item that does not have the same id so
85:03 - rest of the items that does not have the
85:05 - id so that id can stay in the original
85:08 - list but in the temporary list we'll
85:11 - just gonna remove all the items that
85:13 - don't have that id and now it's very
85:15 - simple we're just gonna say you know
85:16 - what
85:17 - since we have this i'm just gonna say
85:19 - this item list so whatever original list
85:22 - we have we'll just reassign it i'm just
85:25 - gonna say temp list
85:26 - bam here we go so now this item does not
85:29 - exist anymore at least in a list right
85:31 - now
85:32 - now once we're gonna again press add
85:34 - expense once we have edited everything
85:36 - is gonna be fine however right now
85:39 - we don't want it and also what we want
85:41 - is we want to show the balance because
85:43 - remember that every time we're changing
85:45 - something in a list we would want to run
85:47 - the show the balance otherwise we're
85:49 - going to be updating something and this
85:50 - is not going to show up over here so
85:52 - we're going to run the out of balance
85:54 - i'm sorry show the balance that we had
85:55 - before
85:56 - and now we have the item list and this
85:59 - would be the temp list now the last
86:01 - thing i just want to add the values here
86:03 - because remember as i'm editing i would
86:05 - want them to show up over here so again
86:07 - we can do this in the bottom we can do
86:09 - this after we have selected the item it
86:12 - doesn't really matter
86:13 - here we're going to say show value and
86:15 - remember what i was saying with the
86:16 - filter the filter is going to return the
86:19 - array so if i want to access this item
86:22 - because i know this is an object now
86:24 - obviously because i placed it as an
86:26 - object so i'm getting back as an object
86:28 - but it is an object as a zero index in
86:31 - the array so now i'm just going to say
86:33 - this expense input now this is i'm
86:36 - getting back from the selections with
86:38 - the properties
86:39 - value
86:41 - and we're going to do expense since this
86:43 - is what i'm getting back 0 so
86:46 - 0 index value and here we're going to
86:48 - say title and again we can do a bunch of
86:51 - console logs here alone but just to skip
86:53 - a little bit ahead uh let's just uh
86:57 - do this without console logs and if you
87:00 - have any issues again you can just
87:01 - console log in and you'll see what i'm
87:03 - talking about so we'll have a expense
87:05 - and now instead of title i would want to
87:07 - select the amount
87:09 - so this is all that's happening so we
87:11 - have the expense
87:14 - which is an array which is going to hold
87:16 - one object and again you can come to log
87:18 - it and you'll see what i'm saying is
87:20 - true and then we're going to be getting
87:22 - back the
87:24 - titles over here so let's least test it
87:27 - out so everything is working so let's do
87:30 - a budget of five grand
87:33 - let's calculate fix the car
87:36 - for a 33 000 time adding expense sure
87:40 - enough we have 300 so this is going to
87:42 - be 4 700.
87:44 - now if i'm gonna click edit what's gonna
87:46 - happen
87:47 - notice
87:48 - first
87:49 - i'm getting the values back so this is
87:51 - the last thing that we did expense zero
87:54 - dot title great so we have these values
87:57 - now
87:58 - also we removed from the expenses and
88:01 - now the balance is back to the 5000. so
88:03 - again this was the reason for the show
88:05 - of balance that we were running and if
88:07 - i'm going to change this expense to
88:09 - let's say 800
88:11 - boom now i have the fix the car is going
88:14 - to be 800 and everything is calculated
88:16 - directly now the last thing is the
88:19 - delete expense so the lead expense
88:21 - however the good news is a lot of this
88:24 - is exactly the same
88:25 - so we can do a first of all removing the
88:28 - parent so this is going to be exactly
88:30 - the same we just want to remove from the
88:32 - dom
88:33 - so let's just copy and paste it
88:36 - then uh i don't know why i've removed
88:38 - from the down ties
88:40 - i guess i messed it up again with my
88:42 - comments which is pretty typical
88:44 - remove from the list this is not from
88:48 - list we're removing from the list
88:50 - and again we're going to do the same
88:51 - thing
88:52 - we're just grabbing the items whatever
88:55 - we have remove from the list temp list
88:58 - id again temp list and reassigning and
89:00 - showing the balance
89:02 - that's it so the a
89:03 - the deletion is actually very simple we
89:06 - can just
89:06 - fix it in like what 30 seconds without
89:09 - me well imagine without me talking
89:11 - that's what i'm talking 30 seconds with
89:14 - me yapping this could be another three
89:15 - hours um yeah so i think everything
89:18 - works correctly and i want to feel brave
89:21 - and i want to actually open up in the
89:23 - browser now i'm probably going to regret
89:25 - this because there's going to be a
89:26 - mistake and you're going to be laughing
89:27 - like your
89:29 - heads off but anyway yeah let's test it
89:31 - out
89:32 - so we have the budget
89:34 - budget is great i mean it's great if
89:36 - you're probably positive not negative
89:38 - but
89:39 - anyway five thousand
89:41 - great awesome five grand you know what
89:44 - let's do ten
89:46 - ten is even better let's add zero well
89:49 - no way buddy
89:51 - okay expenses let's start with the zero
89:53 - let's say there's no expenses well
89:54 - that's not possible
89:56 - okay fixing the car but you know what
89:59 - mechanic actually paid me
90:01 - ah no way didn't pay you let's do maybe
90:04 - negative budget because i forgot the
90:06 - negative budget again
90:08 - yep no can do
90:10 - awesome great everything is working fine
90:13 - uh we probably you know what we should i
90:15 - you know now we're going to leave we
90:17 - could technically add input where it's
90:19 - zero right now if we add the incorrect
90:22 - value but i don't think it makes sense
90:23 - so we have fixed car let's just leave it
90:25 - so let's let the user actually fix it if
90:29 - it's his mistake then you should fix it
90:31 - now i have fix a car
90:33 - removed from budget blah blah blah
90:35 - budget nine nine nine seven nine expense
90:38 - value is 21. let's add another one let's
90:41 - do the same of
90:43 - the buying of the milk buy them buying
90:46 - or buy the milk here
90:49 - by the milk um we're going to want 300
90:52 - 3 000
90:53 - let's make some fun milk
90:55 - expenses budget balance bam so 6979
91:00 - and yeah so we have expense value what
91:03 - we can do we can delete if we want to
91:04 - delete goes back to 21 if we would want
91:08 - to edit again it removes temporarily and
91:11 - now let's do fixing the car of i don't
91:13 - know 21 000 and sure enough
91:16 - poor sucker is in the
91:18 - death of 11 000 not that death depth
91:23 - uh yeah so this would be it for the
91:25 - project guys i hope you enjoyed it and i
91:27 - hope you i hope to see you in the next
91:28 - project