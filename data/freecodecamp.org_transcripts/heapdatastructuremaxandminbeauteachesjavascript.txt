00:00 - a binary heap is a partially ordered
00:02 - binary tree which satisfies the heap
00:05 - property it has some similarities to a
00:07 - binary search tree except the order is a
00:09 - little different each node has at most
00:12 - two child nodes the heat property
00:14 - indicates a specific relationship
00:16 - between the parent and child nodes you
00:19 - may have a max heap in which all parent
00:21 - nodes are equal then or greater to the
00:23 - child nodes
00:25 - so you can see the the biggest numbers
00:27 - on top and the smallest numbers are on
00:29 - bottom or you may have a min heap in
00:31 - which all child nodes are greater than
00:33 - or equal to the parent nodes
00:36 - so the child nodes are the biggest ones
00:38 - and the parent nodes are the smallest
00:39 - ones the order between child nodes on
00:42 - the same level does not matter so you
00:44 - have 10 6 and 12 here here we have 5 6
00:47 - and 1.
00:48 - you can see that it goes from a small
00:50 - number to a big number to a small number
00:51 - the order doesn't matter if they're on
00:53 - the same level
00:54 - binary heaps are also complete binary
00:57 - trees this means that all levels of the
00:59 - tree are fully filled and if the last
01:02 - level is partially filled it is filled
01:03 - from left to right so if you see the
01:05 - example down here so here's level one
01:08 - then we have level two here level three
01:09 - level three is all the way filled level
01:12 - 4 is only partially filled because
01:14 - there's nothing over on the right side
01:16 - here but you can see it's filled from
01:17 - left to right binary heaps may be
01:20 - implemented as tree structures with
01:22 - nodes that contain left and right
01:24 - references like what i showed in my
01:26 - binary search tree video
01:28 - however heaps are more often implemented
01:31 - as arrays
01:32 - this is possible because of the partial
01:34 - ordering according to the heap property
01:37 - we can just compute the parent child
01:39 - relationship of the elements now this
01:41 - will make a lot more sense with this
01:42 - diagram here
01:44 - so if you see this array right here this
01:46 - is the array representation of this tree
01:50 - right up here the number 1 is 20 and
01:52 - that's the root you can see that right
01:54 - up here and then 2 and 3 are the child
01:57 - nodes 19 and 17 right here and now i
02:00 - want to pull your attention over to
02:01 - these equations up here
02:03 - so
02:04 - the left child is going to be i times 2
02:07 - the right child is going to be i times 2
02:09 - plus 1. let me show you what that means
02:11 - so if you look at 20 here which is at
02:15 - index 1 in the array
02:17 - also i should point out that there is no
02:19 - index 0. so when you're representing a
02:21 - heap you're just going to leave index 0
02:24 - as null to make the math work out a
02:26 - little better so if we go back to index
02:29 - 1 well the equation for the left child
02:31 - is i times 2 so 1 times 2 would be 2. so
02:35 - yeah 19 is the left child and the right
02:38 - child is i times 2 plus 1. so 1 times 2
02:42 - plus 1 is 3 17 that's the right child
02:45 - now let's say we go to number 13 here
02:47 - that's index 4
02:49 - well if we go to the equation i times
02:53 - two four times two is eight so if you're
02:56 - index four and you go to index eight
02:58 - eleven yep that's the left child now if
03:01 - we start index four and we do the right
03:03 - child equation i times 2 plus 1 that's
03:05 - 9. so if we go to index 9 yep that's the
03:08 - right child here so that's how you can
03:11 - use these equations to find the left and
03:13 - right child from an array representation
03:16 - you can also figure out the parent so
03:18 - the equation for appearance i divide by
03:20 - two if we are on 11 that's index eight
03:24 - eight divided by two is four index four
03:27 - and this really should be floor i divide
03:29 - by two because you divide the index by 2
03:32 - and then round down to the nearest whole
03:35 - number for instance 5 divided by 2 is
03:37 - 2.5 but if you round out it's 2 and then
03:40 - 2 would be the the index 19 here also
03:44 - you can see in this diagram that the
03:45 - last index is also the size of the heap
03:47 - size 10. this diagram is a max heap i'm
03:50 - going to show you the code for a min
03:52 - heap but in the same file down here we i
03:55 - also have the code for
03:57 - the max heap down here so you can check
04:00 - the link in the description so you can
04:02 - review this actual code yourself and you
04:04 - can review the max heap on your own but
04:07 - like i said we're just going to review
04:08 - the the min heap right now but before i
04:10 - show you the actual code i want to show
04:12 - you a visual representation of how it
04:15 - works when you're inserting and you're
04:17 - removing items from the heap those are
04:20 - the main two commands insert and remove
04:23 - and then there's one more i'll show you
04:24 - at the end but let me show you this
04:27 - representation here so you can see this
04:29 - is the array representation and i'm
04:32 - going to insert some numbers and you'll
04:34 - see them show up as a tree
04:35 - representation so let's see four
04:39 - you can see four goes at the top that's
04:40 - the the root node now i'm going to put
04:43 - in six
04:44 - six just goes down to the bottom there
04:47 - eight
04:49 - so as it builds the node one thing to
04:51 - keep in mind is that it's going to build
04:53 - one level of the tree at a time
04:56 - i'm going to put in
04:58 - 10 it's going to be on the very left
05:00 - side now so far i've been putting them
05:02 - in order but now i'm going to put in the
05:05 - number five here and when i insert the
05:08 - number 5 you're going to see this it's
05:10 - going to first go to the end of the
05:13 - array here you'll see the array which is
05:15 - going to first appear right down here
05:18 - and then it's going to move up to the
05:21 - correct position so let's see that
05:27 - so then as you see it checks what
05:29 - position to move it up to so i'm going
05:32 - to put in a few other numbers here
05:36 - see 16. three
05:41 - okay so you see it always puts in at the
05:44 - end of the array or the end of the tree
05:46 - and then it moves it up to the correct
05:47 - position now i'm going to just show one
05:49 - more where i put in one where it's going
05:51 - to put it put it down here and it's
05:54 - going to move all the way up to the top
05:56 - and it's a check one at a time to see if
05:58 - it has to move it up
06:00 - also
06:01 - another thing would just be removing
06:03 - when you remove you always just remove
06:05 - the smallest it's going to remove what's
06:07 - in index 1 which is always going to be
06:08 - the smallest and then it's going to pop
06:11 - the last node to the first node and then
06:15 - it's going to sort them so let's see how
06:17 - that works
06:22 - so did you see that so it moved the last
06:25 - node to the first node and then it has
06:27 - to keep checking and keep moving it down
06:29 - until it gets to the right position so
06:30 - let's move remove three
06:36 - okay so now let's go to the code and you
06:38 - can see how that works in the code
06:42 - so before we insert anything you can see
06:44 - that we've created a heap with an array
06:46 - that just has one item and it's the item
06:49 - null at index zero
06:51 - so when we insert something we pass in a
06:54 - number and we're going to push that
06:55 - number on to the end of the heap so if
06:57 - you pass in the number three there's
06:59 - going to be index zero is null index 1
07:01 - would be 3.
07:03 - now if the length of the heap is
07:06 - more than 2
07:08 - that means there's more than one item in
07:10 - the heap
07:12 - if it's less than 2 there's one or zero
07:14 - items in the in the heap and that makes
07:16 - things really easy but let's say it's
07:18 - it's a more than two so we're going to
07:20 - let the index equal heap dot length
07:22 - minus one so
07:25 - that means we're finding the last index
07:28 - in the heap while
07:30 - heap at that at the last index
07:33 - is less than
07:35 - heap and then see this equation right
07:37 - here
07:38 - that is the the parent equation so now
07:41 - we're saying if the last item in the the
07:44 - array which is the item we just inserted
07:47 - right here if the last item of the array
07:49 - is less than its parent
07:52 - well if it's less than its parent we're
07:54 - going to have to move it up because the
07:56 - smallest numbers have to be at the top
07:58 - in the min heap so if the index is more
08:02 - than or equal to 1 that means if we
08:04 - haven't reached the root node
08:06 - then we're going to do this now this is
08:09 - es6 destructuring syntax which just
08:12 - means we're gonna switch the node we
08:15 - just inserted with the parent node we're
08:17 - gonna we're gonna switch them so here is
08:20 - the parent node
08:22 - here is the node we just inserted and
08:24 - now we're gonna switch them so the
08:27 - node we just inserted is going to be
08:29 - first and then the parent node is going
08:31 - to be next so it's just a way to swap
08:33 - them for more information about the es60
08:36 - structuring you can check out my video
08:38 - about that topic so
08:40 - if
08:41 - math math.floor index divided by two is
08:44 - more than one this just means
08:47 - if the parent node is not the root node
08:50 - because remember this is the equation
08:52 - for the parent node one is the index of
08:55 - the root node so if the parent node is
08:58 - more than the root node then we're going
09:01 - to set the index to map that four and x
09:03 - divided by two that's the parent node
09:05 - which if you remember up here we just
09:07 - put the number we passed in into the
09:10 - parent node so now the index is still
09:13 - going to refer to the number we just
09:14 - passed in because that number has went
09:16 - into the parent node and so now we're
09:19 - going to set the index to that node and
09:22 - since this is a while loop we're going
09:23 - to keep going through this and we're
09:25 - going to keep switching the the node to
09:28 - its parent node as long as it is
09:31 - smaller than the parent node else break
09:34 - so once it's not smaller than the pair
09:36 - no we just get out of this while loop
09:38 - and that's the insert
09:40 - so let's go down to remove it's a little
09:43 - more more code
09:45 - but it's some similar concepts so we are
09:48 - always going to remove the the top node
09:50 - the smallest node so we're going to let
09:51 - the smallest equal heap 1
09:54 - so that just means that the first node
09:57 - and the array is the smallest node so
10:00 - that's the easy part the hard part is
10:02 - rearranging the array after you've
10:04 - removed that node so if heap.linked is
10:07 - more than two that just means we have
10:09 - more than one node in in the tree we're
10:11 - going to
10:13 - set the first node in the tree which
10:15 - remember was the smallest node but we're
10:17 - going to set this to the last node the
10:20 - last node in the array now gets moved to
10:22 - the first node in the array
10:24 - now we're going to heap dot splice keep
10:26 - that length minus one this just shortens
10:29 - the array by one so we just remove the
10:32 - whole the last index of the array
10:34 - completely since we've already moved
10:35 - that to the first index if heaped.length
10:39 - equals three that means there's only two
10:42 - numbers in the the tree and that makes
10:44 - things really easy just if one is bigger
10:47 - than the other then we just switch them
10:49 - this is the destructuring syntax again
10:51 - so if the first one is bigger than the
10:52 - second one then we switch it so the
10:54 - second one is bigger than the first one
10:56 - and then we just return the smallest
10:59 - if there are more than two nodes in the
11:01 - array that's where it gets slightly more
11:03 - complicated so we're just gonna set the
11:05 - index to equal one we're gonna set the
11:07 - left equal two times i and the right
11:09 - equals two times i plus one remember
11:11 - that was just the equations from up up
11:14 - above the equations right here we're
11:16 - just putting them into our formula down
11:19 - here
11:20 - now technically you would not need to
11:23 - put this equation here since we know
11:25 - that i equals 1 you could just put 3
11:27 - here you could just put 4 here but this
11:29 - is just so you know we're using the
11:31 - equations from above
11:32 - so we're remember one is the root note
11:35 - so we're starting with the root note so
11:36 - while the root note is more than or
11:38 - equal to
11:39 - its left child or the root node is more
11:43 - than or equal to its right child
11:46 - we're going to do everything in here
11:48 - that means we're going to have to
11:51 - basically move it down and keep moving
11:52 - it down until we get to the appropriate
11:54 - spot so if the the left node is more
11:57 - than the right node then we're going to
12:00 - switch the root node with the left node
12:03 - this is the destructuring syntax again
12:05 - so we're going to just swap the nodes so
12:07 - for instance we would be swapping if
12:08 - we're on this node and this one we just
12:10 - swap those two nodes and then we're
12:12 - going to set the index to the left node
12:15 - so we're going to set the index to be
12:18 - the node that was at the top node but
12:19 - has now been swapped
12:21 - else that means the right node is less
12:24 - than the left node we're going to switch
12:26 - the node with the right node so we're
12:29 - just going to swap with the right node
12:31 - and then we just set the index to be the
12:32 - right node so the the node just moved
12:35 - down a little bit and then we set the
12:37 - index to point to the node that we just
12:38 - pushed down a little bit and then we
12:40 - have to set the new left and right node
12:42 - so we would set the left and right node
12:44 - to be the left and right of the the one
12:46 - we just passed down
12:47 - and then
12:48 - if
12:49 - the
12:50 - the left child or the right child equals
12:52 - undefined that means we're at the very
12:54 - bottom of the tree so we can just break
12:55 - out of this while loop
12:57 - and if it's not undefined we just keep
12:59 - going through until we find the place
13:02 - where the node that we're moving down
13:04 - the tree is not more than equal to the
13:07 - left node and is not more than or equal
13:09 - to the right node else if if the length
13:11 - equals two that means there should be
13:12 - only one element in the array so we just
13:14 - cut off the last element else we return
13:17 - null that means there were zero elements
13:19 - in the array to begin with and then
13:21 - we're just going to return the smallest
13:22 - element which is just the element we
13:24 - just set up here
13:25 - the last thing i'm going to talk about
13:27 - is this
13:29 - now a common use case for the heap data
13:31 - structure is for heap sort this is one
13:34 - of the most efficient sorting algorithms
13:35 - with average and worst case performance
13:38 - of o of n log n heap sort works by
13:42 - taking an unsorted array adding each
13:44 - item in the array into a min heap and
13:46 - then extracting every item out of the
13:48 - min heap into a new array the min heap
13:51 - structure ensures that the new array
13:53 - will contain the original items in least
13:55 - to greatest order so this is the
13:58 - function that you would use to do that
14:00 - keep sort the hard part is creating all
14:02 - the code we just already went over and
14:04 - this is just going to use that code so
14:06 - let result equals new array well
14:08 - heap.link is more than one we're going
14:10 - to do this.remove so we're going to
14:12 - remove the element on top of the tree
14:15 - and we're going to push it onto the
14:16 - result and we're going to keep doing
14:18 - that until we've removed all of the
14:20 - smallest elements and push it onto the
14:22 - result and it's going to put the
14:23 - elements in order well that's all i'm
14:25 - going to talk about for heaps feel free
14:28 - to check out this code and create your
14:30 - own heap and and add some items and
14:32 - remove some items just to see how it
14:34 - works thanks for watching my name is
14:36 - beau carnes don't forget to subscribe
14:39 - and remember use your code for good