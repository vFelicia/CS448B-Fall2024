00:00 - in this video we're going to learn about
00:01 - the popular java testing framework junit
00:04 - 5. we will start off by learning how to
00:06 - write basic unit tests using jn85 by
00:09 - taking a simple contact manager
00:10 - application as an example and step by
00:13 - step will cover all the important
00:14 - features of junit 5. by the end of this
00:17 - course you will have a solid
00:18 - understanding of how to test your java
00:20 - applications using jun85
00:23 - [Music]
00:25 - [Applause]
00:28 - so what is junit
00:30 - according to junit website it is a
00:32 - simple open source framework to write
00:34 - and run repeatable tests
00:36 - jle provides a simple api to test our
00:39 - java applications
00:41 - the class or method we want to test is
00:43 - usually called as subject under test
00:46 - so to write a test we simply create a
00:48 - java test class and use the junit api to
00:52 - make some assumptions towards the
00:53 - behavior of the subject under test
00:56 - and then jail it verifies whether these
00:58 - assumptions are correct or not by either
01:01 - passing or failing the test
01:03 - before writing our first test let's take
01:06 - some time to understand the architecture
01:08 - of junaid 5. on a high level junit 5 is
01:11 - basically a combination of three
01:13 - different modules
01:15 - jain platform is the module which
01:16 - provides an api to launch the test from
01:19 - either the ids build tools or console so
01:22 - when you write a unit test using junit
01:24 - your ide or build tool or console
01:27 - whatever platform you're using uses this
01:29 - api inside the junit platform module to
01:33 - launch the tests
01:34 - next we have the jnet jupiter module
01:36 - which provides an api to write our jna
01:39 - tests and extensions in this course we
01:41 - are going to mainly focus on this module
01:43 - because if you want to write unit tests
01:45 - using jnet5 this is the module you need
01:48 - the next module is junit vintage which
01:50 - provides a test engine implementation to
01:53 - support backward compatibility for tests
01:55 - written with junit 3 and jnet4 so if you
01:58 - have some tests which are written using
01:59 - chain 3 and 4 you can use this module to
02:02 - execute the stress without rewriting
02:04 - them in jn85 and lastly junit platform
02:07 - module enables some third-party testing
02:09 - frameworks to build their own api to
02:11 - write the tests and reuse the junit
02:14 - platform module to launch these tests so
02:16 - this is another interesting update which
02:18 - is part of junit 5. now let's go ahead
02:20 - and write our first test using junit 5
02:23 - so to write the unit test we are going
02:24 - to use a contact manager application i
02:26 - already prepared before as the name
02:28 - suggests this application manages the
02:30 - contact information and this is a very
02:32 - simple application which contains only
02:34 - two java classes the first one is a
02:36 - simple pojo class which contains three
02:38 - fields first name last name and phone
02:40 - number and the next class is named
02:42 - contact manager so this is responsible
02:44 - to store the contact information
02:46 - here we have a method named add contact
02:49 - where it takes the first name last name
02:51 - and phone number as input parameters and
02:54 - then storing the information in memory
02:56 - using a concurrent hash map we are using
02:58 - a concurrent hashmap because it's a
02:59 - thread safe implementation of the map
03:01 - interface
03:02 - so as part of adding the contract we are
03:05 - performing some additional operations
03:06 - like checking whether the contact
03:08 - already exists or not and validating the
03:11 - contact information based on some
03:12 - business rules so we have a method to
03:14 - validate each field in the contact class
03:17 - so if we open the contact class we have
03:19 - a method which validates the first name
03:22 - so it is basically checking whether the
03:23 - first name is blank or not that means it
03:25 - checks whether it's not null and not
03:28 - empty
03:29 - we are doing the same validation also
03:30 - for the last name and four number fields
03:33 - but for the phone number field we are
03:34 - doing some additional validations such
03:36 - as we are checking that the phone number
03:38 - should be exactly 10 digits in length
03:40 - and it should contain only digits and it
03:43 - should start with zero so once all these
03:45 - validations are passed successfully we
03:47 - are storing them in memory this is a
03:49 - very simple application but provides
03:50 - enough functionality to cover all the
03:52 - features of junit 5. if you want to
03:55 - download the source code have a look at
03:56 - the link in the description and you can
03:58 - also have a look at the written version
03:59 - of this tutorial by checking the blog
04:01 - article i have linked this also in the
04:03 - description section to follow along the
04:05 - tutorial i suggest you to download the
04:07 - source code for the starter project from
04:09 - the link in the blog post
04:11 - where you will start with a clean slate
04:13 - without any tests and gradually by the
04:15 - end of this course you will reach to the
04:17 - state of the completed project
04:19 - i am using intellij idea as my primary
04:21 - ide for this course and the start
04:23 - project is using maven as a project
04:25 - management tool
04:26 - if you are not aware of the what is
04:28 - maven i have a comprehensive video
04:30 - tutorial called maven complete tutorial
04:32 - in my youtube channel have a look at it
04:34 - i will also leave the link in the
04:35 - description section so to start off
04:37 - first we need to download jnet5 into our
04:40 - project for that instead of downloading
04:42 - the jar manually and adding it to the
04:44 - project i'm going to take the help of
04:46 - maven to automatically download the jar
04:48 - file whenever it's needed to be able to
04:50 - do that maybe need some information so
04:52 - that it can download the java file
04:53 - automatically we call these jar files as
04:56 - project dependencies so these
04:57 - dependencies can be defined inside the
04:59 - pom.xml file and inside the file i'm
05:01 - going to add a tag called as
05:03 - dependencies
05:04 - and under that i'm going to provide the
05:06 - dependency information by typing the
05:08 - group id as org jn8 jupiter
05:12 - artifact id as jlet jupiter
05:14 - and version as 5.7.0 so this is the
05:17 - information maven needs to download your
05:19 - dependencies these are also called as
05:21 - artifact coordinates i'm just giving the
05:24 - bare minimum information about maven if
05:26 - you need more details have a look at the
05:27 - video tutorial again so once i type
05:29 - these details we need to ask intellij to
05:31 - force maven to download these
05:33 - dependencies we can do that by clicking
05:35 - on the maven icon on the top right
05:37 - corner that's all you need to download
05:38 - the jne jupiter dependency to our
05:40 - project now let's go inside the source
05:43 - test java folder again this is the maven
05:45 - convention folder structure to store the
05:48 - test classes and inside the java folder
05:50 - i'm going to create our contact manager
05:52 - test class so you know what let me show
05:54 - a shortcut to do this automatically so
05:57 - from contact manager class
05:59 - so let me open the contact manager class
06:01 - and inside this class just make sure you
06:04 - selected the editor section then press
06:05 - the key combination ctrl shift t
06:08 - then you should see a small pop-up
06:10 - window which asks whether to create the
06:11 - test or not so i'm going to select that
06:13 - option and click on ok and intellij
06:16 - automatically creates the test class
06:18 - called menu contact manager test for us
06:20 - inside the class i am going to create a
06:22 - method called as should create contact
06:24 - the jna tests are nothing but methods
06:26 - inside the test class so junit
06:28 - identifies a method as a test when we
06:30 - add the test annotation on top of the
06:32 - method by adding this annotation junit
06:34 - understands this is a test and starts
06:36 - executing it when we run this class so
06:39 - if i try to run this class with the
06:40 - empty test method you will see that it
06:42 - executes successfully because we didn't
06:44 - add anything to the method so now let's
06:46 - go ahead and add some test logic inside
06:48 - the method so basically we want to test
06:50 - that a contact is created successfully
06:52 - so for that first i need to create an
06:54 - object for the contact manager class and
06:56 - after that i'm going to call the add
06:58 - contact method inside the contact
07:00 - manager and i'm going to pass in the
07:03 - first name last name and phone number
07:05 - details as input
07:07 - so if you go inside the implementation
07:09 - we are storing the contact information
07:11 - inside the map and we have a method
07:13 - called as get all contacts where we are
07:15 - reading all the contacts present inside
07:17 - the map so to verify whether the contact
07:18 - is created or not i am going to call
07:20 - this method and make sure that the
07:22 - contact information exists inside the
07:24 - list or not so back to the class class i
07:26 - am going to call the get all context
07:28 - method and as a first step i want to
07:30 - verify that the list is not empty so
07:31 - this process of verifying our expected
07:33 - output with the actual output is called
07:35 - as assertions so and jane it provides an
07:38 - assertion class and inside the class i
07:40 - am going to make use of the assert false
07:42 - method so this method will take a
07:44 - boolean parameter as input and if the
07:46 - boolean is not false it will throw an
07:48 - exception and will fail the test so as
07:50 - we expect this list from get all
07:52 - contacts method should not be empty i
07:54 - use the assert faults method next i'm
07:56 - going to make sure that there is exactly
07:57 - one element inside this list i can
07:59 - perform this assertion by using the
08:01 - asset equals method from the assertions
08:03 - class this method takes the expected
08:05 - value as the first parameter and the
08:07 - actual value as this has the next
08:09 - parameter so i am going to call the size
08:11 - method of the list written by the get
08:14 - all contacts method so now it's time to
08:16 - run the tests i'm going to click on the
08:18 - green button to the left side of the
08:19 - class declaration and click on run test
08:22 - and you can see that the test is
08:24 - executed successfully
08:29 - so we saw how to test a happy path
08:30 - scenario we added a contact and the
08:32 - contact information is saved to the
08:34 - application now let's go ahead and test
08:36 - a negative scenario where the contact
08:38 - creation is failing so we can test this
08:40 - case by providing some invalid input to
08:42 - the add contact method if we open the
08:44 - validate contact method inside the
08:46 - contact manager class
08:48 - we are validating the first name last
08:50 - name and phone number fields so now
08:52 - let's go ahead and add a test where we
08:54 - are providing invalid values to all
08:56 - these fields so i'm going to open the
08:57 - contact manager test class and i'm going
09:00 - to create three methods
09:01 - inside the class to test the case of
09:03 - invalid input of first name last name
09:06 - and phone number fields if you provide
09:08 - an invalid input the application should
09:09 - throw a runtime exception
09:11 - so and here you may observe that i added
09:13 - a new annotation called display name
09:15 - this annotation as the name suggests
09:17 - provides a custom readable name to your
09:19 - test so instead of displaying the method
09:20 - name which is sometimes not so readable
09:23 - junit displays this custom name in the
09:25 - test results
09:27 - so inside the first test method we are
09:28 - verifying if the add contact method
09:30 - throws a runtime exception
09:32 - when the value of the first name fail is
09:34 - null
09:35 - for that of course we have to provide
09:36 - the first name as null and we are
09:38 - verifying whether the runtime exception
09:39 - is thrown or not with the help of assets
09:42 - throws method from the assertions class
09:44 - this method takes the type of the
09:46 - exception we are expecting so that in
09:48 - our case it is
09:49 - runtimeexception.class
09:51 - and as part of the second parameter we
09:53 - have to provide the supplier where we
09:54 - are calling the add contact method
09:57 - so when i run the test again you can see
09:59 - that all the three threads are executed
10:01 - successfully
10:02 - if i open the other tests you can see
10:03 - that i am passing the value null for
10:05 - last name and as well as four number
10:07 - fields
10:09 - so now that we wrote a few tests let's
10:11 - go to some theoretical aspects of junit
10:13 - and understand how the jv test life
10:15 - cycle works
10:17 - so each junit test when it is executed
10:19 - will create a new instance of the test
10:21 - class and it follows different phases as
10:23 - part of the execution
10:25 - each phase is also represented with an
10:27 - annotation in jnet5 the first phase is
10:30 - before all phase where the methods which
10:32 - are marked with this annotation will be
10:34 - executed before any of the test methods
10:36 - inside the test class
10:38 - the second phase is the before each
10:40 - phase where the methods marked with this
10:42 - annotation will be executed before each
10:44 - of the test methods inside the test
10:46 - class
10:47 - and the third phase is the after each
10:49 - phase where the method will be executed
10:51 - after each test method inside the test
10:53 - class and finally we have the after all
10:56 - phase where some logic will be executed
10:58 - after all the test methods inside the
11:00 - class are executed
11:02 - so the main use of these lifecycle
11:03 - phases is you may want to run some
11:05 - initialization tasks or some cleanup
11:07 - tasks when running the tests some
11:09 - general examples of this include setting
11:11 - setting up or creating test data inside
11:14 - the database
11:15 - at the start of the tests and cleaning
11:16 - them up after the test execution
11:19 - so now let's go ahead and see how we can
11:20 - implement these methods inside our
11:23 - contact manager test class the first one
11:25 - is the before all annotation as i said
11:27 - before the method marked with this
11:29 - annotation will be executed once for the
11:31 - entire test class
11:33 - and usually this occurs before creating
11:34 - the instance of the test for this reason
11:37 - we have to mark the method
11:39 - as static or else jnet cannot execute
11:41 - this method
11:43 - so inside this method i am going to
11:44 - print a message so which should print
11:47 - this message before all the tests are
11:48 - executed and now if i run this test
11:50 - class you should see that the message is
11:53 - printed before the tests are executed so
11:55 - i just created a method and added the
11:57 - before all annotation and this message
11:59 - is is printed when at the time of test
12:01 - execution now let's add the before each
12:02 - annotation i'm going to create a method
12:05 - called as setup and add the before each
12:07 - annotation to this method
12:09 - and inside this method we are going to
12:10 - initialize the contact manager class you
12:13 - can observe that inside all the test
12:14 - methods we are creating the object for
12:16 - test for contact manager class this is
12:18 - redundant so we can move this logic
12:20 - inside the setup setup method so i am
12:22 - going to remove the contact manager
12:23 - instantiation part from all the tests
12:26 - and i am going to create a class
12:27 - variable contact manager and assign the
12:29 - variable to the contact manager object
12:31 - inside the setup now you may think that
12:32 - we are using only one contact manager
12:34 - object for all the tests inside the
12:36 - class is not true janet will create a
12:38 - new instance of the class for each
12:40 - method so each test will work with its
12:42 - own copy of the test contact manager
12:44 - object so now if we try to run the tests
12:46 - again we can see that the tests are
12:47 - executed without any side effects the
12:50 - same applies also for the after reach
12:52 - and after all annotations so i quickly
12:54 - created a couple more methods and inside
12:56 - this method we are just printing some
12:58 - messages but if you are working with a
13:00 - more complex setup usually you will
13:01 - clean up the test data created as part
13:03 - of the part of the test inside either of
13:05 - these methods as i mentioned before jnet
13:08 - instantiates the tests for each test
13:09 - method but we can also change this
13:11 - behavior so that it will create only one
13:13 - instance of the class by adding the test
13:16 - instance annotation to the top of the
13:17 - class and to this annotation we can
13:20 - provide the value lifecycle dot per
13:22 - class
13:23 - by adding this annotation junit
13:25 - instantiates the test class only once in
13:27 - this case we can remove the static
13:30 - keyword for the after all and before all
13:32 - methods
13:42 - the next feature we are going to discuss
13:44 - is the conditional execution feature in
13:46 - jvnet
13:47 - we can execute the test methods in our
13:49 - class based on a specific condition
13:51 - for example imagine if you developed a
13:53 - specific functionality on linux machine
13:56 - for our contact manager application
13:59 - which is after saving the contact maybe
14:01 - we are performing some additional logic
14:02 - which is specific to the linux operating
14:04 - system then we have to make sure that
14:06 - the test should only run when it's
14:08 - running on the linux operating system or
14:10 - else it's pointless to run the test to
14:12 - enable this jnet provides us with
14:14 - annotations enabled on os and disabled
14:17 - noise and to this annotations we can
14:19 - pass on the operating system name as the
14:21 - annotation parameter
14:22 - so i copied one of the existing test
14:24 - methods and i'm going to add the enabled
14:27 - on os annotation on top of the method
14:30 - and i'm going to specify the value as
14:32 - mac from the os enum and we can specify
14:34 - a message by providing an input to the
14:36 - disabled reason field
14:38 - so let me copy the test again and this
14:41 - time i'm going to add the disabled on os
14:43 - annotation and specify the value as
14:45 - windows because i am using the windows
14:48 - operating system and if i try to run the
14:49 - test now you should see that both these
14:52 - tests are disabled and actually it's not
14:54 - clear which test is disabled so i am
14:55 - going to change the method name and
14:57 - display names and if you run the test
14:59 - again you can see that the both this
15:01 - tests are disabled and we are able to
15:03 - differentiate which one is actually
15:04 - disabled
15:10 - the next feature we are going to learn
15:12 - about is assumptions these are similar
15:14 - to conditional executions annotations
15:16 - but instead of executing the test
15:17 - conditionally we are going to perform
15:19 - the assertions inside the test
15:21 - conditionally that means if the
15:23 - assertion is not if the assertion is not
15:25 - successful then the test won't fail but
15:27 - it will be aborted and won't be executed
15:29 - further for example you may have some
15:31 - unit tests which you may have some tests
15:33 - which you want to run only on the
15:35 - developer machine but not on ci
15:37 - enronment or maybe some long running
15:38 - tests which you want to execute based on
15:40 - a condition so in this case the test
15:42 - execution will simply be aborted if the
15:45 - if the criteria for the condition is not
15:46 - met so let's see how to do this in
15:48 - practice so i'm again copying the
15:51 - existing test and i'm going to rename it
15:53 - as should test contact creation on dev
15:55 - machine and also change the display name
15:57 - and inside the test before executing the
15:59 - actual test i'm going to read the system
16:01 - property called env this is the property
16:03 - which i have set inside the run
16:06 - configurations for the test so inside
16:08 - intellij i am going to edit the run
16:10 - configuration and add the property to
16:13 - the vm options so you can see that i had
16:15 - a decision property with minus with
16:17 - prefix minus d so
16:19 - in the test i am going to read this
16:20 - property and after reading this i am
16:22 - passing it as a parameter to assume true
16:25 - method so this is the method from the
16:27 - assumptions class which takes in a
16:29 - boolean parameter there is also an
16:31 - assume false method which also takes a
16:33 - boolean parameter but in our case we
16:35 - will use the assume through method to
16:37 - perform some assumption and if you
16:39 - execute the test now you should see that
16:41 - the test is passing and now let's
16:42 - quickly change the property to another
16:44 - name so instead of checking whether the
16:46 - property is def let's change it to test
16:49 - and if you run the test again now you
16:51 - can see the message assumption failed
16:53 - but the test is not failing it is just
16:56 - aborted
16:58 - the next junit 5 feature we are going to
17:00 - learn about is the repeated tests
17:02 - so in some situations you may need to
17:04 - run a specific test case multiple times
17:07 - maybe because the functionality has a
17:09 - bit of randomness to it imagine you are
17:11 - generating a random number between range
17:13 - maybe 1 to 10 or 1 to 50 and in those
17:16 - cases you may you you can say to junit
17:18 - to repeat the test execution for a
17:20 - certain number of times
17:21 - we can do that by using the repeated
17:23 - test annotation so this is just like a
17:25 - substitution for the test annotation but
17:28 - the test method will be executed for
17:30 - multiple repetitions so in our contact
17:32 - manager test we are not dealing with any
17:34 - random functionality so this is not a
17:36 - very good example for this use case but
17:37 - we can still apply the repeated test
17:39 - annotation to check whether the test
17:42 - method is executed for multiple
17:43 - repetitions or not so let's take the
17:45 - contact creation test again and i'm
17:47 - going to rename it and add the repeated
17:49 - test annotation on top of the method by
17:51 - adding this annotation we can remove the
17:53 - test annotation and to to the repeated
17:55 - test annotation we can pass in the value
17:58 - for how many times we want to that we
18:00 - want the test to be repeated so i want
18:02 - this test to run for five times so i'm
18:03 - going to pass in this value and now if i
18:05 - run the test
18:06 - you can see that these uh you can see
18:08 - the custom name for the repeated test
18:10 - like repetition 105 205 and so on we can
18:13 - also provide a custom name for these
18:14 - repeating tests so instead of just
18:16 - displaying repetition 105 we can make it
18:19 - more descriptive by passing the name
18:20 - field to the repeated test annotation
18:22 - and here i'm going to pass the value for
18:24 - name as repeating contact test and we
18:26 - want to know what is the count of the
18:28 - current repetition so for that we have
18:30 - the current repetition and total
18:31 - repetition values if we specify these
18:33 - values inside the curly brackets junit
18:35 - automatically fills in this value for
18:37 - these fields at runtime so if we execute
18:39 - the test now you can see the value
18:40 - repeating contact creation test 105 to a
18:43 - 5 and so on
18:47 - so now let's learn about how to write
18:48 - parameterized tests in jnet
18:50 - parameterized tests are similar to
18:52 - repeated tests but the difference is you
18:54 - can run the test repeatedly by giving
18:56 - different set of inputs to our tests
18:58 - similar to repeated tests we can replace
19:00 - the test annotation about the test
19:02 - method with the parametrized test
19:04 - annotation after adding the annotation
19:06 - we need a way to submit different set of
19:08 - inputs to the test method we can do that
19:10 - with the help of some other annotations
19:12 - which is used together with the
19:14 - parameterized test annotation so the
19:16 - first one is the value source annotation
19:18 - by using this annotation we can provide
19:19 - the input directly as a parameter value
19:21 - to the annotation and the value source
19:23 - annotation support different types of
19:25 - literal values like strings hint double
19:28 - float etc so you can see the complete
19:30 - list of supported values on the screen
19:32 - in our case we need only random strings
19:34 - to test the contact creation and we want
19:36 - to see if the validation for phone
19:38 - number field is working or not by
19:40 - providing different range of inputs so
19:42 - remember that we are doing some specific
19:43 - validation for the phone number field
19:45 - first we are checking if the phone
19:46 - number is not null and not empty then we
19:49 - check the length is exactly 10
19:50 - characters long we are making sure that
19:52 - the given string contain only numbers
19:53 - and lastly we are checking whether the
19:55 - phone number is starting with zero so to
19:57 - test all these cases usually you have to
19:59 - write multiple tests to verify each
20:00 - criteria but using parameterized tests
20:03 - you can provide different set of inputs
20:05 - and test them in only one test case so
20:07 - back to the test class i copied the
20:08 - contact creation test again and changed
20:10 - the name and the text inside the display
20:12 - name annotation let's add the
20:13 - parameterized test and value source
20:15 - annotation to this test method and i'm
20:17 - going to provide some a list of strings
20:19 - which contain some random numbers as the
20:21 - input to be able to use these values
20:23 - inside our test we need to provide a
20:25 - string variable as a parameter to the
20:27 - method and j init then will
20:29 - automatically inject this value into the
20:31 - method while executing the test and
20:32 - lastly we have to make sure that instead
20:34 - of hard coding the value i am passing
20:36 - the phone number variable to the add
20:38 - contact method and now if i run the test
20:40 - you can see that the test is passing
20:42 - because i provided all the values which
20:44 - are valid so i'm going to change one of
20:46 - the values here and provide an invalid
20:47 - value so i'm going to add a plus symbol
20:49 - in front and run the test again
20:52 - this time the test is failed because
20:54 - it's failing the validation that the
20:55 - phone number should be exactly 10
20:57 - characters long
21:01 - the next way to provide input for the
21:02 - parametrized tests is by using the
21:04 - method source annotation
21:06 - now you may have already observed that
21:08 - we are a bit limited to what input we
21:10 - can pass to the test using the val value
21:12 - source annotation in the real world the
21:13 - test data requirements are not so
21:14 - straightforward and we may have to
21:16 - construct some complex objects as the
21:18 - test data and pass them to our test for
21:21 - that reason we can use the method source
21:22 - annotation where we can refer a method
21:24 - inside the test class which is
21:25 - responsible to create the test data and
21:27 - this data is then injected into a test
21:29 - let's see how to do that back inside the
21:31 - test class i am going to create another
21:33 - parameterized test this time with method
21:35 - source annotation and i am going to
21:36 - create a method called phone number list
21:39 - which is returning a list of four
21:40 - numbers inside the test class i am going
21:42 - to just copy the method name and pass it
21:44 - as an argument to the method source
21:46 - annotation and now if you run the test
21:48 - jnit will dynamically read the data
21:50 - returned from the method and will inject
21:52 - them into the tests so there is no need
21:53 - to change the test implementation and
21:55 - let's go ahead and run the test so you
21:57 - can see that all the tests are passing
21:58 - successfully and if you're wondering how
22:00 - the previous test is passing again i
22:02 - just change the inputs to some valid
22:04 - inputs inside the value source
22:06 - annotation
22:08 - so the next annotation we're going to
22:10 - use for the parameterized test is the
22:12 - csv source annotation using this we can
22:14 - declare the input data as csv literals
22:16 - in our tests so if you are not aware of
22:18 - what is csv its called as common comma
22:20 - separated values so as the name suggests
22:22 - we are going to pass the input as a list
22:24 - of comma separated strings so back to
22:26 - the test class i'm going to create
22:28 - another test called as should test phone
22:30 - number format using csv source and
22:32 - change the display name text and i'm
22:33 - going to add the csv source annotation
22:36 - and to this annotation i'm going to pass
22:37 - the valid list of phone numbers as comma
22:40 - of separated strings so it's a pretty
22:42 - straightforward and if i run this test
22:44 - you can see that the tests pass
22:45 - successfully without any errors
22:51 - and the last annotation we're going to
22:53 - talk about for the parameterized tests
22:55 - is the csv file source annotation
22:58 - this is very similar to csv source
23:00 - annotation the only difference is
23:01 - instead of referencing the list of comma
23:03 - separated strings directly inside the
23:05 - code we are going to provide the
23:07 - reference of the csv file directly to
23:09 - the csv file source annotation so this
23:11 - file is usually located inside the
23:12 - resources directory of the test folder
23:15 - in the maven folder structure so i'm
23:16 - going to create a file called as
23:18 - data.csv and inside the file i'm going
23:20 - to just copy and paste the data we pass
23:22 - to the csv source annotation and if i go
23:24 - back to the test i am going to create
23:26 - another test method for this case and
23:28 - inside the csv file source annotation i
23:30 - am going to assign the csv file name to
23:32 - the res to the resources field now let's
23:35 - run the tests again and they should be
23:36 - passing without any issues
23:46 - the next generate feature we are going
23:48 - to learn is the nested test so as the
23:50 - name suggests we can nest or group some
23:52 - tests inside our contact manager test
23:54 - class into an inner test class so in our
23:56 - example we have multiple test methods
23:58 - which can be grouped together this may
24:00 - be some repeated tests or the
24:02 - parameterized test because they belong
24:03 - to the same category and if we organize
24:05 - these tests into their own classes then
24:07 - the task class will look much more clean
24:09 - and well organized so this is the main
24:11 - reason for using the nested class to
24:13 - make the test more organized so i'm
24:14 - going to quickly create two classes
24:16 - repeated nest test and parameterizedness
24:19 - test inside the contact manager test
24:21 - class jnet understands these are nested
24:24 - test classes by the nested annotation so
24:26 - i'm going to add this annotation on top
24:28 - of both these classes so the life cycle
24:29 - of nested test class is a bit different
24:31 - than the normal test class in the nested
24:33 - classes we are allowed to only use the
24:35 - before each and after each annotations
24:37 - but not before all and after all because
24:39 - java won't allow static members inside
24:42 - the inner classes however if you want to
24:43 - use the before all and after all
24:45 - annotations you can change the instance
24:47 - life cycle by adding the test instance
24:49 - annotation with life cycle value as per
24:52 - class okay now back to the test class
24:54 - and i am going to simply cut and paste
24:56 - the parameterized tests into the
24:58 - parameterized nested test class and the
25:00 - repeater test into the repeated instead
25:02 - test class apart from the change in the
25:04 - structure of the test there is nothing
25:05 - changed in the code so this change
25:07 - should not introduce any side effects
25:09 - for the test execution so let's verify
25:11 - this behavior by running the test again
25:12 - and you can see the tests are passing
25:14 - without any errors
25:21 - now let's discuss the last junit
25:22 - annotation of this course that is the
25:24 - disabled test you can use this
25:26 - annotation to disable some tests from
25:28 - executing in our test suit so it's not
25:31 - generally encouraged to use this
25:32 - annotation until it's really necessary
25:34 - because there's a chance that you will
25:35 - forget to remove the annotation after
25:37 - adding it and the test will be disabled
25:38 - forever which is not so good so to
25:40 - demonstrate this i am going to add this
25:42 - annotation to the first contact creation
25:44 - test we added and if i run all the tests
25:46 - after that you can see that the first
25:49 - test should con should create contact
25:52 - is disabled so
25:58 - so this is the end of this tutorial
25:59 - thank you very much for watching this
26:00 - and i will see you in the next tutorial
26:02 - until then happy coding techies