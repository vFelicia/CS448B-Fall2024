00:00 - Welcome to this exciting video course brought to you by the renowned course creator Ania Kubow.
00:06 - In this comprehensive ChatGPT course, we'll dive deep into the world of the OpenAI API,
00:12 - exploring its diverse capabilities and potential applications.
00:16 - Throughout this journey, you'll master the ins and outs of the OpenAI API,
00:21 - starting with creating your very own ChatGPT clone, which is a powerful language model that
00:27 - can generate human-like text based on your specific needs.
00:30 - Next, we'll dive into the fascinating realm of DALL-E, an AI-driven image generator that
00:36 - can produce visually striking and imaginative images with just a few lines of code.
00:42 - Finally, you'll create a SQL generator, a game-changing tool that can help you generate
00:47 - and optimize complex SQL queries in no time. With Ania's engaging and hands-on teaching style,
00:54 - you'll find yourself immersed in the world of AI, learning not only the theory,
00:59 - but also practical techniques that can be applied to real-world projects.
01:04 - By the end of this course, you'll be equipped with the knowledge and skills to harness the power of
01:09 - the OpenAI API to revolutionize your work and open up a world of creativity and innovation.
01:16 - Welcome to this extensive ChatGPT course. If you're a developer looking to integrate
01:22 - natural language processing into your applications, you've come to the right place.
01:26 - ChatGPT is a powerful language model created by OpenAI,
01:30 - capable of generating human-like text responses to a wide range of prompts.
01:34 - With API that powers it, you can integrate cutting-edge technology into your applications
01:38 - and unlock a whole new world of possibilities.
01:41 - My name is Ania Kubow, and I'm a software developer, as well as course creator here on freeCodeCamp,
01:46 - as well as on my own channel. In this course, I'm going to walk you through
01:49 - each section of the OpenAI API documentation.
01:52 - I'm going to show you how to access the API, use its various endpoints,
01:56 - and use them in various real-life projects that we will be building together,
02:00 - including this ChatGPT clone in JavaScript, a version in React for comparison,
02:05 - an AI generator in JavaScript, as well as one in React utilizing the OpenAI Node.js library,
02:11 - as well as an AI SQL query generator that will generate SQL for you based on the prompts you give.
02:18 - By the end of this course, you'll be able to confidently take the OpenAI API and integrate
02:23 - it into any application that you build to fully utilize its powerful natural language processing capabilities.
02:30 - If you want to skip to a section, then please feel free. We've given timestamps in this course
02:35 - for you to be able to navigate from one to the other. Just be careful, as we will be building
02:39 - our knowledge from the previous sections and using it in the sections that follow.
02:44 - Okay, so what are we waiting for? A basic understanding of JavaScript and React is necessary
02:50 - for this course, but if you don't have it, please feel free to follow along anyway and then fill in
02:55 - the gaps later on. Just like most APIs, the OpenAI API uses API keys for authentication.
03:03 - In this section, I'm going to show you how to get your own API key for when it comes to communicating
03:08 - with the API from applications that we will be building. Remember, make sure not to share your
03:13 - API key or publish it somewhere public. This is because if someone takes it, they could potentially
03:18 - use up all your free credits or rack up loads and loads on your credit card. If you have a credit
03:23 - card attached to it, this also includes exposing any client side code. By this I mean building an
03:29 - app without a backend and deploying it onto the internet. The code in this case will be visible
03:34 - simply by inspecting it like so someone will then be able to go and take it from here for the
03:39 - road use. To use this key safely, requests must be routed through a backend server where your API
03:44 - key can be securely loaded from an environment variable or key management service. Okay, so let's
03:51 - look at how to get your own API key as well as generate new ones if you need. Okay, so let's do
03:58 - it. Let's start off by getting our API keys. So first off, just start off on OpenAI.com and make
04:05 - sure you're signed in and under menu, go ahead and click under the developer portal and just click
04:11 - overview. This should take you to platform.openai.com/overview. Perhaps the UI has changed,
04:18 - but essentially this is where you need to be. Next, just go ahead and click on your username. As you
04:24 - can see here, my username is freecodecamp-editorial. I'm just going to go ahead and click on that and
04:29 - view API keys. And there we go. So as you can see here, there is already one secret key. Let's get
04:37 - to creating a new one. So all I'd have to do is click on this gray button right here. And I can
04:44 - choose to name this if I wish. So let's go ahead and name this my demo key, and just create a
04:50 - secret key. And there we go. Now don't forget to copy this and save it somewhere safe. Why? I'm
04:58 - just going to go ahead and click done. We cannot view that API key anymore. So if you didn't save
05:04 - it, well, you're going to have to create a new key. So let's go ahead and delete that one because I
05:10 - didn't save it. So let's revoke it. And all you're going to have to do is click on this little button
05:15 - right here and revoke the key. And let's create a new one. So I'm just going to create a new key
05:20 - again. And let's call this my demo key again. And this time, let's create the secret key, copy this,
05:26 - save it somewhere safe, and click done. Now, if you are worried that someone has stolen your API
05:34 - key, or perhaps you might have published it out onto the internet, you can revoke it as we just saw.
05:42 - So you just click the revoke key, and then that API key will not work anymore. Okay. And why do we
05:49 - not want it to work anymore? Because if someone has indeed stolen your API key, they can potentially
05:55 - if you click under usage right here, use up all your free credits. So as you can see here,
06:01 - here are the free credits that we have used for the month, we don't want someone taking our tokens,
06:06 - right? Or worse, if we have a credit card attached to under billing, you can attach payment methods,
06:13 - they can also potentially rack up loads and loads on your credit card bills. So keep this API key
06:19 - safe. The OpenAI API is powered by diverse set of models with different capabilities and price
06:28 - points. At the time of writing, the newest we can use is GPT-4. It uses a set of models that improve
06:34 - on GPT 3.5 and can understand as well as generate natural language or code. We will be using this
06:41 - model as well as its previous versions the most as it's the most universal. Others of note are
06:45 - DALL-E, which is an AI system that can create realistic images and art from a description in
06:50 - natural language. We can make requests to create numerous images of a certain size, edit an existing
06:56 - image or create variations of a user provided image if we wish. We will be using this in our
07:02 - projects that are coming up soon. There is also WISPR, which is a general purpose speech recognition
07:07 - model. It is trained on a large data set of diverse audio and is also a multitask model that can
07:13 - perform multilingual speech recognition, as well as speech translation and language identification.
07:19 - In fact, here is a full list of models that are currently to our disposal. Let's get to understanding
07:24 - some of these better next. Now that we have our API key and have understood the models that are
07:30 - available to us, let's get to writing some requests. These two things are super necessary
07:36 - for this next part. So make sure you have both. First up, we're going to look at text completion.
07:40 - With text completion, we can generate or manipulate text. By this, I mean it was literally built to
07:46 - complete your sentences. So if you write Oscar Wilde, be yourself, everyone else is, it will return
07:53 - already taken with high probability. You can also ask it to complete from nothing based on text
07:58 - prompts. I can write something like come up with a name for my friend Darius's pizza shop, and I
08:04 - will come back with this. Now it is likely you'll get a different completion each time, even if
08:10 - your prompt does not change. This is because the API is non deterministic by default. By this, I
08:17 - mean it is not possible to guess what will happen. We can actually change this by setting a temperature
08:22 - to make it more deterministic. But we will cover that when the time is right. So let's try it out.
08:29 - Here's the endpoint we will be using for this. It is a POST request. For those of you who don't
08:35 - know what a POST request is, now will be the time to check out a tutorial on HTTP request methods
08:41 - to fully get the most out of the next steps. Or if you are feeling adventurous, please carry along
08:46 - anyway and fill in the gaps when you want to. Now there are a few things that we can put in our
08:50 - request body along with our POST request. And here they are. The only one that is not optional is the
08:57 - model that we are going to use. So let's whack that in. I'm going to go ahead and use text of
09:02 - Vinci 003 for this demo. As a reminder, here are some of the models we can use. Although keep in
09:09 - mind that not all of them can be used for text completion. Next, we are going to put in a prompt.
09:14 - This is essentially a string or an array that we are going to pass over to the API to generate
09:20 - completions for. In this case, I'm going to pass a string of Hello, how are you today? We can also
09:26 - choose to add a suffix which takes strings, which comes after a completion of inserted text. But
09:33 - I'm not going to do that for this demo. Next up, we can optionally add max tokens. This will take
09:39 - an integer that will represent the maximum number of tokens to generate in the completion.
09:44 - Tokens are what all the models use to process text. They are essentially common sequences
09:49 - of characters found in text. The models understand the statistical relationship between these tokens
09:55 - and Excel are producing the next token in a sequence of tokens. I know this is hard to
10:00 - comprehend. So let's look at an example to understand how the API would tokenize a piece
10:05 - of text as well as see the total count of tokens in that piece of text. So let's go ahead and put
10:11 - in the string of Hello, how are you today? You will see seven tokens are used here according
10:17 - to the API. Now let's try another one. Let's try what is the meaning of life and can you write
10:23 - an essay about it? Now this is of course a little bit more complex. So you will see the number of
10:27 - tokens that were used were a total of 15. As a general rule, one token generally corresponds to
10:33 - roughly four characters of text for common English text. This translates to roughly three quarters of
10:39 - a word. So in other words, 100 tokens equals roughly 75 words. The token count of your prompt
10:46 - plus max tokens cannot see the model's context length. Most models have a context length of
10:52 - 2048 tokens except for the newest models which can support 4069. Next we have the option to put in
10:59 - temperature as a number. We can write a value from zero to two. Higher values like 0.8 will make the
11:06 - output more random while lower values like 0.2 will make it more focused and deterministic. And
11:12 - as an alternative, we can also use top P, which will use nuclear sampling as opposed to sampling
11:18 - with temperature. It is recommended using this or temperature or not both. In this case, the model
11:24 - considers the result of the token with top P probability mass. So 0.1 means only the tokens
11:31 - comprising the top 10% probability mass are considered. Next we have n. n allows us to set
11:38 - how many completions to generate for each prompt by pausing an integer value. Doing this will
11:43 - understand we take more tokens. So just keep that in mind. We can also pass through a user which
11:48 - will represent our end user to help monitor and detect abuse. So these are the most popular ones
11:54 - used. I'm just going to show you the other ones briefly to show you they exist but not going into
11:59 - them in any detail. Okay, so all of these along with ones we just covered can go into the request
12:05 - body along with our post requests. And the only one that is required is the model that we're going
12:10 - to use. Got it? Good. Let's try it out. Okay, so what I've done is just set up a super simple project.
12:20 - I have done this in my code editor, I've just created an index HTML file with some boilerplate
12:26 - code. And then I've linked up the app js file using this script tag. So that's all I've done.
12:33 - Next, I've just created that app js file. And this is where I am going to write that request,
12:40 - it's going to be a post request to the endpoint that we saw passing through all the options.
12:47 - So let's do it, I'm going to do it this way first. And then I'm going to show you how to do this with
12:51 - a cowl command. So first off, well, let's actually do this all in a function. So I'm going to call
12:58 - this function fetch data, just like so. And this is going to be an async function, as we're going
13:06 - to be using the await keyword in here, because we're going to be dealing with the fetch API.
13:12 - So we're gonna have to wait for this to get resolved. So we're gonna have to await the response
13:16 - of this. Okay. And then we're going to save this to whatever we want, let's save it to the const
13:22 - response. Now, I'm just going to minimize this for us, we can see this a little bit better.
13:27 - Now, the URL that we need, or we can just take this from the documentation, it's going to be
13:35 - this, right? So just make sure yours looks the same, and you're not going to check completions,
13:40 - we're just going to the completions endpoint this time. Next, we're going to pass through our options.
13:45 - So my options, well, we're going to pass through the method, as we know, this is a post method.
13:51 - And now we're going to pass through some headers as well. So the headers that I am going to pass
13:56 - through, well, we're going to have to pass through our API key. And for that, I'm going to use
14:02 - authorization. And now because we are well, you can put in the string directly in here,
14:08 - but most of you will probably want to save your API key somewhere safe. So use back ticks so that
14:14 - we can use text essentially or a string and then put in some code and to put in code, we use this
14:21 - syntax. So you get your dollar sign and your curly braces. And then we're going to put in our API
14:27 - key here. So this is going to be a const. Let's define up here const API key. And just go ahead
14:37 - and paste your API key in here as a string. So that is my one that I will be revoking,
14:44 - and we're ready to carry on. Now, let's also define our content type. So content type,
14:51 - and we're going to be working with JSON. So we're going to do application,
14:55 - Jason, because we're going to have to pass through a body of stuff. And that stuff is well, it's the
15:02 - options that we saw. So here's our body, I'm going to wrap it in JSON stringify, just like so,
15:10 - and create an object, my object is going to hold everything we want to pass on to OpenAI. And that
15:16 - is the model. On this occasion, I'm going to use text dot Vinci 003. When we get to doing
15:24 - the chat completions, we will be using chat gt before and chat gt p 3.5. But for this one,
15:31 - we can just go ahead and use text eventually, because we can't use the others. Now I'm going
15:36 - to use prompt. And let's just go ahead and hard code a prompt. Hello, how are you today?
15:43 - Okay. Just like so. And we can also pass through the max tickets if we wish. Okay, I'm going to
15:50 - go ahead and do it as that's what we saw in the example. And I'm going to go with seven.
15:55 - So the only thing that is required are these two. And this one is optional. Just make sure that is
16:02 - max token seven. Okay, so those are all options. Okay. And now we're going to get the response.
16:10 - And we're going to get it to Jason. But oh, this is also an async method, which means we need to
16:16 - wait for that to come back. And let's save it as something I want to save as data. And now let's
16:21 - just console log data. Okay, that's all we're going to do. So let's call this function. So we
16:28 - just want this to be called when we open up the web page. So let's go ahead and copy the path,
16:36 - the absolute path to this is in like so. And now I'm just going to inspect this page and look on
16:42 - the console log. And today, that is essentially our data. That's what we're console logging out.
16:48 - And if you look under choices, so there's objects you use dot notation to get this, you'd go dot
16:54 - choices, and you go into the array. And you can see the text that has come back it says, I'm doing
17:01 - well. Great. So that is how you would do it in JavaScript. This is what we're going to be doing
17:08 - in one of the projects. We're also going to be doing this in the back end where we store API keys
17:13 - safely. However, for those of you who don't really want to build a project, you just want like a
17:18 - simple response in a matter of seconds, I'm going to show you how to do this with a call commands
17:22 - next. Okay, so maybe let's just get rid of that and get up my terminal. Okay, so here's our call
17:32 - command. As you can see, we've got the endpoint right here, make sure yours looks the same. So
17:38 - it's not going to force that chat or anything like that. We've got the content type, we've got the
17:43 - authorization. So let's go ahead and replace that API key right here. So I'm just going to delete
17:49 - all of this, including the dollar sign. And I'm just going to paste mine in like so. So that's what
17:55 - yours should look like. We've got a model here, we have say this is a test, let's go ahead and replace
18:01 - this with Hello, how are you question mark, we've got the max tokens that we also have a temperature.
18:11 - So let's go ahead and run this, I'm just going to hit enter. And there we go. So this is essentially
18:18 - what we saw coming back to us in the browser, we've got I'm doing well. So two ways to do this, please
18:25 - play around with these, have fun. And when you're ready, let's move on. OpenAI models can do pretty
18:34 - much anything from writing original stories to performing complex text analysis. Because they can
18:40 - do so many things, you have to be explicit in telling them what they need to do. Showing and
18:45 - not telling is often the key to writing a good prompt. Here are three basic guidelines to creating
18:52 - effective prompts. So first off, we have show and tell, make it clear what you want, either through
18:58 - instructions, examples or a combination of the two. If you want the model to rank a list of items in
19:04 - alphabetical order, or to classify a paragraph by sentiment, show it that's what you want. Next up,
19:11 - we have providing quality data. If you're trying to build a classifier or get the model to follow
19:16 - a pattern, make sure that there are enough examples. Also, make sure to proofread your examples. The
19:22 - model is usually smart enough to see through basic spelling mistakes and give you a response. But it
19:27 - also might assume that this is intentional and it can affect the response. And finally, check your
19:33 - settings, the temperature and top B settings that we covered earlier control had deterministic the
19:38 - model is in generating response. If you're asking it for response where there's only one right answer
19:44 - that you'd want to set these lower. If you're looking for more diverse responses, then you
19:50 - might want to set them higher. It is also worth knowing that the number one mistake people use
19:55 - with these settings is assuming that their cleverness or creativity controls. Okay, so those
20:02 - are the three guidelines you can use for writing effective prompts. Please have a go at trying them
20:08 - out and seeing if your prompts are actually getting better responses by applying these three
20:13 - basic guidelines to them. And once you're ready, let's carry on. Okay, so by now we would have
20:21 - looked at text completions as well as how to write effective prompts. So let's get to the media stuff,
20:28 - we're going to look at chat completions. Next, chat completions will essentially have a whole
20:33 - conversation with the OpenAI, we are going to do so by using the GPT 3.5 turbo model, or the GPT
20:41 - for model to a different endpoint, or specifically to the OpenAI chat API. With OpenAI chat API,
20:50 - we can do such things as write code, suggest text for an email, create AI chat agents,
20:56 - translate languages, suggest topics for talks, and so much more. We will be using this API for our
21:04 - upcoming projects. This is because it can do pretty much what the text completions can do,
21:09 - but of course, take it one step further by initializing a whole conversation and chat.
21:15 - So we're really covering all the bases by using this. And not only that GPT 3.5 turbo performs
21:21 - at a similar capacity to text DaVinci 003 that we use in the text completion part of this course,
21:27 - but a 10% of the price per token. So it makes sense for us to use it really. Luckily for us,
21:33 - a lot of what we learned in the text completion part of this course will be applied to you too.
21:38 - So as previously, we will need our API token and the model we want to use. For this, we will be
21:43 - using the following endpoint and making a post request to it. So as you will see this time,
21:49 - it's forward slash chat forward slash completions. Next, we put in our token as well as the model we
21:56 - want to use. So I would put in my token and the model of GPT 3.5 turbo or GPT for these two things
22:05 - are required. What is also required in this case is the messages. Messages take an array of objects
22:12 - in a specific chat format to generate chat completions. Here's an example of the array
22:18 - with an object of the specific format in it. It has a role and a space with a prompt content.
22:24 - Outside of these required fields, all the rest of these are optional. I will not go into them
22:29 - again as we already did this in the text completion part of the course. If you would like a refresher
22:35 - on what each of these mean in more detail and how they can be used, please go back to the text
22:39 - completion section not far behind this. Okay, so here we have our request. Let's give it a while.
22:46 - Okay, so once again, here is my project, I've just created two files, an index HTML file like so,
22:54 - with a script tag. And I've linked my app.js file right here, which is going to hold our JavaScript.
23:00 - And our JavaScript is how we are going to essentially make a fetch request, a post request
23:06 - to the OpenAI API. So let's do I'm just going to minimize this. And once again, let's write a
23:14 - function, I'm going to call the function fetch data just like so. And in here, we're going to use the
23:21 - fetch API, we're going to pass through two things. One is going to be the endpoint and the second
23:27 - is going to be our options that we're going to pass through with that request. So the fetch keyword
23:34 - will is an async method. So we're going to have to use the await keyword. But oh, we can't use
23:39 - await inside a function that is not async. So let's put that in right there. So two things we're
23:47 - going to have to put in, we're going to have to put the endpoint that's right. And the endpoint,
23:52 - as we know, is this right here. And the options that we're going to pass through, we're going to
23:58 - pass through the method. And that is a first method. The other thing we're going to pass through
24:04 - is the headers, because we're going to have to pass through our API key. So once again, let's put
24:09 - authorization, making sure to spell that correctly. And then I'm going to use backtick once more.
24:16 - So bearer, and I'm going to pass through some code. And that code is just going to be the
24:20 - const of our API key, which I'm just going to define up here. Because you know, if you're doing
24:25 - this on the back end, you probably want to keep that API key and a dot in the file, for example,
24:30 - like we will be doing in the project. Okay, so our API key, once again, I'm just going to paste
24:37 - that in, I'm just going to paste that in as a string for now. So that will now be essentially
24:43 - injected into here. So we've got a API key. Next, we need to define the content type we're going to
24:51 - be working with Jason. So I'm going to do application, Jason, just like so. Next, we're
24:59 - going to have to pass through the body and the body, well, we're going to pass through an object,
25:04 - we're going to wrap it in Jason, the string of files and Jason string file like that. So let's
25:09 - get that object, and just work it in like so. So what things we need to pass through to our API,
25:17 - where the first one is the model, let's go ahead and work with GPG for this time. And we're going
25:23 - to pass through the messages, the messages, this is different than the prompt that we saw before,
25:28 - it's going to be an array. And each message is essentially an object, it's going to take a role,
25:33 - the role in this case, it's going to be the user, it's going to be us. And then the content, which
25:39 - I'm going to just hardcore us. Hello, for now, we can pass through as many messages as we want.
25:44 - Remember, this is a chat. So if you want to pass through more messages, you can do just like so.
25:49 - So if I want to say hello, how are you in two separate messages that I can, that is an option,
25:58 - I'll be showing you how to do this in the project part of the section. For now, let's just pass
26:03 - through one message. So once again, that is my one message represented by this object, which has
26:08 - these two things in there. Okay. So just so this is more readable, I'm just gonna put it like so.
26:17 - And that is all we need to pass through. So those are all our options. So let's wait for this and
26:24 - save it under response, and then get the response. So right after this has done its thing. So down
26:31 - here, and let's get its JSON, well, oh, this is an async method. So we're going to use the await
26:38 - keyword and await that JSON, let's save it under data. And I'm just going to console log that data.
26:46 - So let's call this, right? I'm going to get this and away at the bottom, let's just call this and
26:51 - let's open this up in our browser. So I'm going to copy the path, copy the absolute path,
26:58 - paste that in, inspect the page, go to the console log, and there's our object. And those are our
27:04 - choices. So we get an array. And then we see the messages that come back. This time, the roll is
27:10 - from the assistant, okay, because we're the user. And this time, the assistant is saying, Hello,
27:18 - how can I help you today? Great. So we're already starting a chat. This is wonderful. And once again,
27:26 - for those of you who don't really care about, you know, building on app, you just want something
27:31 - quick, let's look at the call command to do so. So here is the call command. Once again,
27:38 - let's just go ahead and make sure that URL is good. That is correct. And let's replace this API key.
27:46 - So I'm just going to go ahead and delete all of this, including the dollar sign,
27:52 - let's paste in that API key. Let's also replace this, let's go ahead with gpt four. And then we
28:00 - can have hello, sure, let's go ahead and hit enter. And amazing. So here we have the same thing. Here's
28:08 - our content from the assistant. Remember, we're the user, this is the assistant. And it's saying
28:14 - Hello, how can I help you today? Great. Great. So now that we have understood how to use track
28:23 - completions, I'm going to use this API and our next two projects. The first project is going to
28:28 - be more painful beginners, where we build out a simple JavaScript project in JavaScript, HTML,
28:34 - and CSS. And we use the fetch API in order to fetch data from this API using the request that we just
28:42 - built. However, as we now know, this will not be secure. This is because this is a front end
28:48 - project. Okay, so if you do choose to build this, make sure to keep your API key safe and don't
28:53 - publish this code anywhere on GitHub or anywhere on the internet, it is for your personal use.
28:59 - Next up, we're going to graduate and build the same project but in react. Okay, and this will
29:04 - allow us to build out a back end more easily, which is why I'm choosing the react library to do this.
29:10 - And I'm going to take this project a step further by not only just storing the prompts on the left
29:16 - in the history, if we click on them, it will bring back the whole history of that chat and allow us
29:22 - to add more to it. So as you can see here, I am switching from each one, I can also add more text
29:28 - and switch back and so on. And that will be in there as well as create a new chat if I wish.
29:34 - Okay, so that's what we're going to be doing. Of course, I could have also built a project that has
29:40 - a JavaScript front end and a Node.js back end. But you know, you can't do everything. So these
29:45 - are the two directions I've chosen to take this project in for the course. Okay, so what are we
29:51 - waiting for? One last thing I'm going to say is that the react project does not use the OpenAI
29:56 - Node.js library, which does exist, because I wanted to take the exact same JavaScript project
30:03 - and recreate in react. However, we will be looking at the Node.js library later on in this course,
30:10 - when we build out an AI image generator. Hey, everyone, so great to have you here. And I'm
30:21 - going to be showing you the easiest way to make a ChatGPT clone using JavaScript. Okay, so
30:28 - JavaScript, HTML and CSS, this is a great project for those wanting to learn how to use API,
30:34 - specifically the ChatGPT API in a simple JavaScript project. Now this is just for demo
30:41 - purposes. Okay, we do not want to go and publish this code onto GitHub or deploy it. Because as we
30:48 - know, right in a simple JavaScript project without a back end or anything like that, you can't hide
30:53 - your API key. So you don't want anyone taking this API key, because if they do, they can rack up
30:58 - loads and loads of money on your account if you have a credit card or anything like that associated
31:03 - with it. So this is just for demo purposes. If you want to know how to build a ChatGPT clone
31:09 - with a back end, then I'm gonna be releasing the same video but building this in react with a Node.js
31:15 - back end. Okay, we can of course also have a JavaScript front end and a Node.js back end. But
31:21 - I think the React app will be way more fun to build. So what are we waiting for by the end,
31:26 - you will have this ChatGPT clone, which we will be able to build you in JavaScript, HTML and CSS,
31:32 - and then we'll be able to ask questions as well as have a history of all the things we answered
31:36 - before. So let's do it. Okay, so first off, we're just going to start a new project. I'm in WebStorm,
31:44 - so I'm simply going to select new project. And I'm going to select an empty project. So it's being
31:50 - saved in my WebStorm projects directory or folder on my computer. And I'm just going to call it
31:55 - JavaScript ChatGPT clone. And I'm going to create. So that's going to spin it up for me.
32:03 - And now I'm just going to add some files, I'm going to create a new file, it's an HTML file,
32:08 - let's call it index dot HTML, you don't really need to put that HTML extension in WebStorm,
32:13 - but I'm doing it here for those who are not using WebStorm. And then I have this boilerplate code
32:18 - set up. So if you don't have this boilerplate code set up, please copy it here. And I'm just
32:23 - going to do JavaScript ChatGPT, clone, clone, just like that. And of course, we also need to
32:32 - create some more files, I'm going to create a JavaScript file called app j s. And then also
32:38 - a style sheet. So I'm going to create a new style sheet. Let's call it styles, because it holds all
32:43 - our styles dot CSS. So there we go. That is what my project looks like at the moment. I'm just
32:49 - going to make that small. So what do we need to put in here? Well, first off, I'm going to create
32:56 - two sections, one for the sidebar and one for the main bit. This is actually not going to take much
33:01 - CSS and HTML at all. So I'm just going to create a section. There's my one section, I'm going to
33:09 - give it the class name of side bar. Okay, and another section, this one's going to be the main
33:19 - section. So I'm just going to give the class of main to differentiate me two sections, we can
33:24 - pick them out by their style. Okay, so what's going to go in our sidebar first? Well, in my
33:31 - sidebar, I'm actually going to have a button that says new chat, and it's going to clear our input,
33:37 - okay, our search input. After that, I'm also going to have a div. And this is going to hold my history.
33:44 - Okay, so all the previous commands that we wrote, and I'm just going to style up a bit. So I'm going
33:50 - to give it a class of history, like so, you don't have to use the same style names. But you know,
33:55 - for the sake of tutorial, maybe copy along, and you can change them later. Next, I'm going to
34:00 - create a div. And this is going to hold my nav items. So I'm going to give it a class of nav.
34:05 - And then for now, I'm just going to have a p element that says made by Ania, you can of course
34:11 - add as many elements in here as you want, you can put in links, and so on. But I'm just going to
34:15 - have this. And now in my main section, I'm going to have an h one element that says Ania
34:26 - GPT, because that's what I'm calling my clone. Then under here, I'm going to have a p element
34:32 - that is just gonna show the output of my search. So I'm going to give this the ID of output. So
34:37 - we can pick it out, just like so. So that's one tag and another tag. And after that, I'm going to
34:46 - have a div. And this div is going to hold a few things is going to hold the input and then a
34:51 - little button to submit our query, right? So I'm going to give this the class of bottom
34:58 - section, so we can pick it out. And in here, I'm going to have a div. And this is actually going
35:06 - to hold my input and my submit icon, essentially. So let's also give this the class of inputs
35:17 - container. And then in here, I'm just going to put in an input element as a self closing element,
35:24 - and a div. And this div is going to have the ID of submit. So just like that. Now under so
35:32 - this is a child of the main section, this is a child, this whole thing is a child, I'm going
35:38 - to also put a p element. And this is just gonna be some sub info. So let's give it a class of info
35:47 - so we can make the text smaller by picking out this element. And then I'm just going to put
35:51 - ChatGPT, this is just from the website itself, March 14 version. In fact, I'm just going to
36:01 - paste it so we don't have to write it all out. But of course, you can pause here if you want to
36:06 - have this full text right here. So that is what that text is going to say. Okay, so actually,
36:12 - now we are done with the HTML part, please pause here to have a look at it or slow it down. But
36:19 - essentially, that's it. Maybe if I zoom out for some of you, you can see everything that is
36:24 - everything. Okay, with the correct formatting. Wonderful. So at the moment, if we open this up
36:33 - and web storm, I can just click here. And that will bring everything up. And if I inspect the
36:39 - page, you will see that section that we made. So there's our section, there's the other section
36:44 - with all the stuff inside of it. Okay, so now let's get to styling up. The first thing we do
36:49 - is make sure the side bus on the left and the main section is on the right. And for that,
36:54 - we need to link up our style sheet. And I'm going to link up the JavaScript file while we're at it.
36:58 - For those of you who aren't using web storm, you can view this by getting the index HTML page,
37:04 - copying the path, copying the absolute path, and just pasting in here like so it's the same thing.
37:12 - Great. So let's carry on. So let's link up our style sheet. First, I'm just going to go link.
37:20 - And I'm going to use rel, I'm just going to minimize this style sheet, just like so. And
37:27 - then h ref, and I'm going to link this to the style CSS file, which is in the same place as this file.
37:36 - So we don't need to go into any folders or anything like that, we just get the file name.
37:40 - And like I said, let's also do the script tag at the bottom to link up our JavaScript.
37:49 - So make sure it's at the end. So after all these other elements have been read,
37:54 - then we want to read this script. And there we go. So great, let's get up our style sheet.
38:03 - So first off, I'm going to get the whole body. So the thing that everything is in. And I'm just
38:11 - going to get rid of the default styling by adding margin and padding zero, just like so. Next, I'm
38:18 - also going to give it a background color. Now this background color I actually picked out from the
38:23 - website itself. So there we go. That is it. That's our background color. And now so at the moment,
38:30 - it will look like this. But these two are still kind of on top of each other. I'm also going to
38:35 - change the font in the whole project. So by adding this star, like so that means everything,
38:42 - everything my whole entire project is going to have the font color of white, which is hash fff,
38:49 - okay, you could do three F's, but you know, this is a shorthand for six steps. So that's what I
38:55 - have done. So now the text will be white. And to make this section to the sidebar section and the
39:01 - main section appear left and right of each other, we're going to use display flex. So all I'm going
39:07 - to do is on the parent of both of those, which is the body, I'm going to just write display,
39:13 - flex and save this file. And there we go. So now the sidebar is there. And the main section is
39:22 - that wonderful, we still have a bunch more stuff to do. So let's carry on. I'm actually going to
39:28 - import a font while we hear that font is open sans. And for that, we're going to go here. And then
39:33 - we're going to go to Google fonts. Okay, and in Google fonts, I'm going to pick out the open sans
39:43 - font. So all I'm going to do is search open sans, click on it. And then I'm going to select a few
39:49 - we can select as many as we want. So let's go ahead. I'm going to select maybe all of these.
39:55 - So basically just not the italic ones, so that we have them to our disposal in the project.
40:01 - I'm going to choose to import them via the style sheet. So I'm just going to take this code in
40:05 - between these two style tags. And then in my project, I'm just going to paste in like so.
40:12 - Okay, so there we go. There's the semicolon at the end and all the weights to my disposal.
40:18 - And once that is done, that means I can now use the font family open sans. So font family
40:25 - open sans and then as a backup, I'm going to have sans Sarah. So if you didn't know which code to
40:32 - use, you can actually get it from here. Here's the CSS rule to apply that family. And you just
40:36 - get that one. Great. And that's it. So that just means that that font will now be applied to my
40:42 - project. Let's carry on. So now that we have done that, I'm also going to pick out any h1
40:50 - elements in my project and assign them a different font size because I don't like the default one.
40:55 - So I'm just going to go font size 33 pixels, and a font weight. So we just import loads of font
41:00 - weights, I want to go with 600. And I'm also going to pad it out. So I'm going to use the padding
41:06 - property. And I'm going to say 200 pixels from the top and bottom and zero from the left and right.
41:14 - So that's a shorthand, okay, this is top, bottom. And it's the same as me writing this. But because
41:22 - there's repetition, I can remove it. And that will now be applied to the top and bottom,
41:26 - and this to the left and right. So if we look at it now, that's what it would look like. There's
41:31 - my h1 element. Great. Now let's actually pick out the sidebar. So I'm picking out an element with
41:39 - a class of sidebar that dot means class. As you can see here, we're looking here going,
41:45 - here's an element with a class of sidebar. So let's pick out the whole thing. So that's what
41:50 - I have done. Now I'm going to give this a different background color. Again, I have picked this out
41:55 - from the project. So from the actual website itself, and I'm going to say the width of this
42:01 - is going to be 204 pixels. The height is going to be 100 of the viewport height, so VH, so whatever
42:08 - the browser size is the height, I'm getting it. And I'm also going to make sure that everything
42:13 - inside is going to be set on top of each other with equal spacing. So I'm going to use display
42:17 - flex for that. I'm initializing flex box. So then I can use flex direction, okay, without this,
42:25 - this will not work. And I'm going to make sure that everything in the sidebar is a column. So
42:30 - like stacked over each other. So that's what I would use. So if I look at this now, you will see,
42:36 - okay, there's a button, there's basically everything in the sidebar. So this, this, this
42:42 - is stacked on top of each other. But what if I want them to appear equally spaced, right? So
42:47 - the nav bar is all the way at the bottom, this is kind of in the middle spaced out equally between
42:51 - the button and the nav bar. Well, I can use justify content space between. So now if I refresh this,
43:04 - there's our p element. That's who lets me be gone here. So there's our div with the nav class,
43:11 - there's our div with the class of history. And there's our button. So the spacing between all
43:16 - three is equal. And no matter if I change this, that space will always be equal no matter how
43:22 - big the browser is. So I like that. Let's carry on. Let's also now maybe style the main section.
43:32 - So the other section, once again, I'm going to use display flex. And I'm going to use flex
43:38 - direction column just to make sure that all stacked over each other. But this time I want to align
43:43 - items to the center. So I'm actually aligning them from left to right, because we've changed
43:48 - axis of display flex. If none of this makes sense, please do check out my full stack developer course
43:54 - where I go into this in a lot more detail, as flex box can be quite confusing. So that just means
43:59 - I've centered everything from right to left by using align item center. And we're doing it from
44:05 - this axis as we've swapped the axis by actually making them a column. So whatever direction we're
44:10 - going in, if it's a column, align items will be on the opposite axis. Great. So this is looking
44:18 - good. So far, let's carry on. I'm also going to use text align center to make sure that the text
44:25 - is in the center, which it is, but now the bottom part is as well, because at the moment is being
44:32 - aligned to the left. And once again, I'm going to use justify quantum space between just to make
44:39 - sure that they are also spread out equally, no matter how I make the browser that will always be
44:46 - at the bottom, and this will be pushed to the top. So I'm spacing everything out equally on this axis.
44:52 - Great. So I'm happy with that. The other thing that we need to do is assign this a height. So
45:01 - I'm going to go with height 100 of the viewport height. So now that text will always be stuck to
45:10 - the bottom because we're taking the browser height into consideration. Next, let's style up this
45:17 - text. So it's a bit smaller and more transparent. So we gave this the class of info. So let's pick
45:24 - out this whole element, the whole p element by the class name. So I'm just going to grab the class
45:29 - name of info. And I'm going to make the color of this a transparent. So I'm going to use our GPA,
45:36 - I'm going to go with white. And then I'm going to put 0.5 opacity. So to make it consistent,
45:44 - you might want to consider changing these to be RGB two, just so that we don't have hex colors
45:49 - and RGB colors in the same project. So I might leave that as something I will do at the end.
45:54 - Next, I'm just going to also change the font size to be 11 pixels, because I want it to be a bit
46:01 - smaller. And I'm also going to pad it out. I'm going to do 10 pixels packaging all around.
46:05 - So now my text will look like that. That is much more like the website. Wonderful. Let's carry on.
46:14 - I think next is also maybe style, what should we style next? I think let's style the input itself.
46:22 - So this thing right here. So I'm just going to grab the input element. I'm going to get rid of
46:28 - its default border. So I'm going to go with border none. And let's go with background color. Again,
46:34 - I think let's just use this color. So like a transparent white, I'm going to make sure that
46:40 - the width is 100% of the pound container, the font size is going to be 20 pixels.
46:46 - Let's pad it out. I'm going to pad out 12 pixels from the top and bottom and 15 pixels from the
46:53 - left and right. And just round off the edges slightly. So I'm going to do border radius,
46:59 - five pixels. And now I'm going to do border radius five pixels just to round off the edges.
47:06 - Don't forget to have that syntax right there. Okay, and finally, I'm just going to add a box
47:13 - shadow because who doesn't love a box shadow. And this time, the color I'm going to go with
47:18 - this RGB black, so that's black, I want to make it transparent. So I'm going to go 0.05,
47:24 - and add a here to give it opacity, I'm going to go zero pixels, x axis, 54 pixels, y axis,
47:33 - 55 pixels blur, we don't need pixels here for zero. So we're just going to get rid of that.
47:38 - I'm going to overlay it with another color. So actually, I'm just going to maybe copy this, as
47:44 - we're going to have the same color. However, this time, I'm going to go minus 12 pixels here,
47:50 - and then 30 pixels blur. And then again, the same thing. So I'm going to paste again,
47:56 - and this time I have 046. So I'm just overlaying different box shadows to get a desired effect
48:03 - that I want and zero 1213. And maybe let's have one more. So 0.09 this time, and this time minus
48:17 - three pixels, y axis, five pixels. So that is my whole box shadow and effect will be this. And if
48:26 - I type in here, that will happen, we can get rid of this blue line. In fact, I'm going to do that
48:30 - because I really don't like it. So I'm going to say that when the input is focused, we're going
48:39 - to do outline none. So now if we look in here, I have gotten rid of that so much better. Great.
48:48 - Now this input is stretched out 100% of its parent, which is the input container or the
48:56 - input container, I also want to be stretched out want to make it bigger. So let's grab the input
49:02 - container. So the element by the class name input container, and I'm also going to make that 100%
49:09 - width of its parent, I'm also actually going to assign a max width. So it's going to try to be
49:14 - 100%. But then it's going to stop at 650 pixels. Okay, great. This also means that the parent of
49:24 - the input container needs to have some sort of width assigned to it. In fact, we can go and
49:31 - actually get main a width. So let's go make sure that the main element is 100%. And now the child
49:38 - of main is bottom section. So if this is 100%, next, I'm going to get the bottom section. And
49:56 - also make sure that width is 100%. Great. And now let's center everything. So main already has
50:07 - display flex on it. So we're going to have to get the bottom section and make sure that everything
50:12 - in the bottom section is also aligned in the center. So let's use display flex. So I'm going
50:18 - to do display flex, flex direction, column, justify content center, align items center. Again,
50:31 - if flex box is something you haven't covered before, please consider checking out my full
50:36 - site developer course where we go into this in a lot more detail. So great. So now everything
50:41 - in the bottom section is also centered. How good is that? And if we kind of make this as
50:46 - big or small as we want, it will always be in the center. Wonderful. So let's carry on
50:56 - just a few more styling things to do before we can continue.
50:59 - So next, I'm just going to style up the input container and submit button. So for this,
51:09 - I'm going to actually go in here and put in a text symbol. So it's this little arrow right here that
51:15 - I've taken off the internet, that's a text symbol, you want to get your own, I mean, I'm just going
51:20 - to Google it so you can see, you can get it from here. So just copy that that is the URL that you
51:27 - would need. So now if I refresh this, there's a little text symbol. However, I want it here,
51:32 - right? I want it to appear on the actual input itself, which is why I put them both in an input
51:37 - container so that I can position them thanks to position relative and absolute. So let's give the
51:43 - input a position relative relative to the whole page. So we can use position absolute on these
51:48 - two things to position them based on the parent. So let's do it. Again, this is something that you
51:55 - can learn in my course. So input container. Let's give it a position of relative so that we can give
52:06 - the children a position absolute to position them. And I'm going to get the input container,
52:12 - or the element by the class of input container. And say that if an element with the ID of submit
52:19 - lives inside of it, that is the syntax for doing so. I'm going to give it a position of absolute.
52:28 - Okay. So now if I refresh this, that shows up here, and I'm going to position it in relation
52:37 - to the input container. So I'm just going to go right zero, so it should appear on the right
52:46 - zero. So if I save that, there we go. And I'm going to move up from the bottom 15 pixels. Okay,
52:55 - so the from the bottom of the parent element. So let's go bottom 15 pixels. So now that should
53:03 - appear right there. And again, it will move based on the input container. So the parent,
53:10 - the other thing I want to do is change the cursor so that it's obvious I can click on it. So I'm
53:15 - just going to add cursor pointer, just like so and save that. And now my cursor will change so
53:25 - that will appear that I can click on this. Great, we are so nearly done. I'm just going to start
53:31 - these things a little bit more. So the button, the history, and the nav container. So let's do it.
53:38 - So the button itself, I'm just going to give it a border of solid 0.5 pixels, and transparent white,
53:48 - so we know that's 255, 255, 255, 0.5, I'm going to go with opacity, and then the background color.
53:58 - Let's go with transparent border radius, five pixels, padding, 10 pixels and margin 10 pixels
54:11 - to space it out from everything else. So with that styling, this is what my button will now look
54:17 - like that is much more like the actual website. And the nav, well, I just want to line up above
54:23 - it really and to space out a bit. So I'm going to get the element that has a class name of nav,
54:28 - we could have maybe used the nav element. But you know, that is up to you. Okay, maybe let's just
54:33 - switch it out. Semantically, that would probably make more sense. So if we go ahead and get rid of
54:40 - this whole class, and just use a nav element instead, that is also an option. Okay, and that
54:47 - just means I can pick up the whole nav element. And I'm going to give it a border top of solid
54:55 - 0.5 pixels. In fact, it's going to be the same color as this. So let's pick that out.
55:01 - Oops, just make sure that's a 0.5. So now that will look like this, I've just added a line,
55:07 - and I'm just going to space it out. So once again, let's just add the same padding and margin
55:11 - that we did for the button. And finally, let's grab the element that has the class name of history,
55:17 - also give it the same padding and margin. And I'm also going to use display flex to make sure that
55:23 - anything I put into it, because I'm going to be putting stuff into it with JavaScript,
55:27 - it's going to be stacked on top of each other. So I'm going to use flex direction column.
55:30 - And I'm also going to make sure that takes up 100% of the height that it can. Great. Next, I know
55:38 - that I'm going to be putting p elements into this history. So we're going to be using JavaScript,
55:44 - essentially put elements in here, we'll be injecting elements with JavaScript, and those
55:48 - are going to be p elements. So I'm going to say that any p element that I put that lives inside
55:53 - an element with a class of history, so that is the syntax for doing so, I'm just going to make
55:59 - sure that you can point on it. So I'm going to put cursor pointer. And there we go. So our CSS
56:05 - is now done now time for the part that I'm sure you've all been waiting for. And that's using the
56:10 - ChatGPT API. So let's do it. So I'm just going to head over to OpenAI.com. Of course, you have to
56:18 - sign up, this will be a free service, I believe up to a certain amount. And I've just opened this
56:25 - up in a new browser, so we can differentiate. So here is the URL that you need to be in. As you
56:32 - can see, I am logged in is platform.openai.com docs and introduction. And if you go to API
56:39 - reference, all you're going to need to do is get your open API key. So under authentication,
56:46 - if you actually visit your API keys here, you can create a new key. So this is one I made before,
56:52 - let's go ahead and create a new one. So this is the thing that you need to keep safe, okay,
56:56 - because if you attach a credit card to this, someone will be able to take it and rack up loads
57:01 - of money on your credit card. Or even if you don't, maybe someone will use it, and then you
57:05 - will be able to use any free generations anymore. So keep this safe. And of course, we are putting
57:10 - in this in our project, but please don't upload this on to GitHub or share it with anyone. This
57:15 - is just for demo purposes. If you want to learn how to actually deploy this app, and keep your
57:20 - API key safe, then we'll do that in the next video where I show you how to make the same thing,
57:26 - but in React, by building out a Node.js packet. Okay, again, as I said, you can build out a front
57:32 - end in JavaScript and use a Node.js backend too. So both options are viable. Okay, so let's carry on.
57:42 - So once we have that API key, well, we're actually going to go back to API references,
57:47 - and we're going to look at completions. So click on completions, because this is the URL that we're
57:52 - going to have to post to. So that's what we're going to do along with parsing or along our open
57:58 - API key, thanks to an authorization header, and then as well as the text or the prompt that we
58:04 - want to pass on to the OpenAI API. So let's do it. I'm going to show you how. So in your app.js
58:11 - file, I'm going to save this as API key, I will be disabling this. So don't try to use it because
58:17 - it won't work. I'm just showing you this for now. I'm just going to put in this texture. So it's
58:22 - super obvious to everyone not to deploy it or upload it on to GitHub. Next, I'm going to write
58:28 - a function, this is going to be an async function. Okay, so you can write it like this if you want.
58:37 - Or you can use const, it's totally up to you, you can make it a function declaration,
58:42 - or just a function expression. That choice is yours. And I'm going to use get message,
58:49 - I'm going to call it get message, because that's essentially what we are doing. And I'm going to
58:53 - use try and catch to try do something and catch any errors. So this is the syntax for this. If
59:01 - you haven't seen it before, this is how we can make calls. Now, I'm going to hook this up to the
59:09 - submit button. So if we click on this div with the idea of submit, I essentially want to make
59:16 - that call. So let's pick it out. So what I'm going to do is go const submit button. So we're saving
59:24 - it as submit buttons, we can use it in our JavaScript file, I'm going to look in my document,
59:29 - look at my whole document for an element. So I'm going to use query selector, I'm going to look
59:36 - for something by the ID of submit. So that's what this will do, look at my whole document,
59:42 - and look for an element that has the ID of submit. So we can use it in our JavaScript file.
59:48 - So I'm going to get that summit button, I'm going to add an event listener and say that if I click
59:53 - on it, then I'm going to call the function, the async function get message. Okay, so that's what
59:59 - that will do. So for now, if I just console log clicked, and then let's go back to this,
60:10 - and click on this little thing, check our console, it says clicked. If I click it again, two, three,
60:16 - four, you'll see how many times we are clicking it. So that's all I have done so far. Now let's
60:22 - get to actually passing stuff on to the API. So what I'm going to do is, well, we're going to use
60:33 - the fetch keyword, right? So I'm going to use await fetch as an async method, which is why this
60:40 - is an async function, and we need to await for its response. So we're going to await it and await
60:45 - an async keywords live together. If I use await, that means that that function needs to be an async
60:50 - function. So again, check out my course, if this doesn't make any sense. Now I'm going to fetch,
60:59 - well, this is what I want to fetch on we could post request to this URL. So let's grab this URL,
61:05 - because we want to create completions, we don't want to, you know, create images or anything like
61:10 - that, even though we can, but not in this project, that's not what we're going to do. So this is the
61:14 - URL that we're going to do is going to the chat and the completions. Okay, so make sure to have
61:19 - that one right there. Chat chat completions. This is the full URL. And it's a post request. And this
61:27 - we're going to use this, okay, in order to create our own post requests. So we're gonna have the
61:35 - content type, we're gonna have the authorization, the model and the messages. So let's go ahead
61:40 - and do it. Let's create that data, that information. And I'm going to define it under options.
61:47 - So let's define our options, const options, and we're just going to literally be taking that
61:52 - information. So what I'm going to do is pass the methods, we know it's a post method. As we just
62:01 - saw that making sure that is like this. And we're also going to pass through the headers, which we
62:07 - also just saw the headers are going to be authorization. So let's grab that, put it in
62:16 - here. And then we're going to do back six, we can write code in here, because we're going to use our
62:22 - API token. So dollar curly braces is how you put in code. And I'm just going to pass through this
62:28 - API key. So that's all I am doing. Next, what else we need, we need to pass through the content type.
62:37 - So content type, and that is going to be once again, I'm just going to paste it because I'm
62:41 - lazy, application, Jason. So that is how you would read what you are seeing here in order to create
62:49 - your own API core in your code. We're also going to have to pass through some more information.
62:58 - So essentially, what model we want to use and the message we want to send over.
63:03 - So I can just copy this, essentially, maybe let's do that. And let's do a comma here and
63:11 - do body. And then whoops, we don't need to these body, and then just paste it like so.
63:22 - So great, we have the model where you're going to use GPT 3.5 turbo, still awaiting GPT for access
63:30 - to it, we're going to have the messages. In fact, we don't need these, we can actually get rid of
63:34 - that. Just like that. Same for that. Same for the role. And same for the content. The content,
63:45 - though, we can pass through the string of hello, or we can pass whatever we put in our input.
63:50 - So we will do that. And we can also put the maximum number of token words the bot should
63:56 - return if we want. Or we don't have to. So you can put max token if you wish. But I think let's
64:07 - just leave it. Actually, maybe let's do it just so you know how to do it if you want to limit the
64:10 - tokens. So max tokens. I'm going to go with 100. Okay. And I think we just need to pass this through
64:22 - JSON string of five just to make sure it's JSON. So I'm going to pass through that whole object like
64:28 - so. Wonderful. So that is looking good. Okay, so we're making the API call pass through the
64:38 - option. So all the information it needs, which is all of this. Now let's get the data. So we're
64:44 - going to use await, I'm going to await the responses JSON. So just like so. And then once
64:50 - we have that, let's save it as the const data. Okay, so essentially, that's doing the fetch.
64:57 - And then we're waiting for the response. So let's say this under response.
65:05 - And then when we get the response, we're going to get the JSON from it. But oh, this is actually
65:08 - an async method, which you might not know, but it is, which is why we need to await it again.
65:13 - And once we have it, we can save it under data. And once we have data, I'm just going to console
65:19 - logout data for great. And now let's catch any errors. I'm just going to pass through error.
65:29 - And I'm just going to console error the error. Okay, let's test it out. Well, we can just do
65:37 - Hello. So that just means that let's refresh. If I click on this, it will make the call and we're
65:45 - just waiting for it. And amazing, we just pass you Hello. And then this whole object comes back,
65:51 - we're going to go into the object, get the choices, go into the first item in the array,
65:55 - and get the message. So the message is, Hello there, how may I assist you? So that's essentially
66:01 - what we want to show in the in the browser, right? So instead of just console logging out the data,
66:11 - what I'm going to do is pick out the output element. So this p right here by its ID.
66:22 - So let's look in the whole document again, document,
66:26 - query selector, this I'm going to look for the ID of output.
66:32 - Let's save it as output element. So I'm just going to get the output element. And I'm going to use
66:53 - text content to get the data, however, go into the object, get the choices, as I said,
67:01 - go into the first item of that array, get the message. So let's have a look here again. So we're
67:07 - getting this as data, right? That's what we saved as data, we then go into choices, get the first
67:12 - item of the array as that as an array. So go zero, and get the message dot content.
67:20 - So we're just going to get that first item back each time. So great, let's check it out,
67:27 - I'm going to try once more. So obviously, this is just sending the string Hello. And then we should
67:32 - see Hello there, how may assist you today. So this is looking good. Of course, we want to send
67:38 - our own messages, not just Hello, right? So let's carry on. One thing I also want to do is just save
67:46 - it as the history. So if this exists, right, because we don't want to save empty strings,
67:52 - we just want to make sure that if something exists, then what I'm going to do is create a P element,
67:58 - document, create element, and I'm going to create a P element, so a paragraph element,
68:04 - or maybe let's make it now let's make a P element that is fine. And that P element,
68:14 - I'm going to get the text content. And I'm just going to get whatever we actually wrote in the
68:20 - input. So actually, maybe we should do the input first, I'm just going to comment this out for now,
68:25 - I'm going to pick out this input. So document, query selector, input, we only have one, so it's
68:39 - fine for me just to pick out the whole input. And let's save it as input element. And instead of
68:49 - passing through Hello, I'm going to get an input element value. So whatever value that input has
68:54 - will be passed through. And also, I also want to pass it through to history. So if a message comes
69:01 - back to us, and it's successful, I want to get the input elements value, and just essentially add
69:09 - that text to the P element we just created. We're at the moment, this P elements just floating
69:14 - around, we can't see it, I need to append it to the history element. So let's pick out the element
69:22 - by the class of history. Document, query selector, class of history. So dot is class. And let's say
69:32 - this as history element. And I'm going to get the history element. And I'm going to use a method
69:42 - called append to put in that P element. Once again, if text comes back to us from the API, then we
69:50 - create a P element, we add some text to it, which is essentially whatever we put in the input. And
69:55 - then we get it and we put it into the history element. So that's all I have done for now.
70:02 - So if we have a look at this, let's put in something, what can I ask it? What day is it?
70:09 - Question mark and send this we wait. Okay, it does not have, I would have thought it would tell me
70:21 - what day it is, but it has not. And we get that in the history. Okay, so if we look in here, the
70:28 - history, the div with a class of history, which before had nothing in it, now has a P element
70:33 - with the text that we wrote in here, right? So that is pretty cool. And if we of course add more,
70:40 - that will be appended to that as well. So this is all looking wonderful. So far, we have done a lot
70:47 - with we have a few more things to do. If I click on this, I want to bring back the prompt. And if
70:52 - I click on here, I want to clear this input. So let's do that next. Let's pick out the button.
70:59 - So document, query selector, button, there's only one, so this should be fine.
71:07 - What should we call this, I think we should just call it button element as there is only one in
71:13 - this project. So I'm going to grab the button element, let's just do so down here. And I'm
71:19 - going to add event listener. And if I click on it, I want to clear the input. So let's write a
71:26 - function called clear input. Let's do so maybe up here, function, clear input. And I'm just going
71:41 - to grab the input element, get its value, and just override it with an empty string. So that should
71:48 - now work. One last thing I'm going to do is also add an event listener. So if we click on anything
71:58 - in here, it brings it essentially gets that text and puts it back in here. So let's do it. I think
72:05 - as soon as we create the p element, right, and we put in the text, I'm also gonna add an event
72:11 - listener to it that says if we click on it, all I want to do, I'm going to make this a callback. So
72:17 - just we can we so that we can essentially pass stuff through into a function that I'm going to
72:23 - call change input. So into here, I am well, let's actually maybe just pass through the p elements
72:33 - text content, as that's what we're going to want to change it to. And let's define our function.
72:38 - So let's define up here function change input. And then we're going to pass through a value that
72:44 - value is essentially what we want to change the input to. And what I'm going to do is use document
72:51 - query selector to look for the element of input again, so whatever the freshest value of it is.
73:00 - So I'm just going to save it as input element for now and get that input element
73:07 - value and just assign it the value. So there we go. I think we have done it. I think we built our
73:18 - own ChatGPT clone, let's give it a go. So let's ask it something else. How are you today? Send
73:29 - and wait for that to come back. Okay, so there we go, we are getting some text to come back to us,
73:44 - and it gets saved up here. And then if I go, what can I ask it now? What is four plus two and send
73:55 - that over. The answer is six. And then if I click on here, that will get back the same question. So
74:08 - I don't have to type it out again. As you will see that's updating. And if I click on here,
74:12 - that will or should clear the input. Why is that not working? Let's inspect here.
74:18 - Let's have a look in here. We've missed the value. While we're here, I'm just going to change the OPC
74:28 - or the input to be much more like the actual thing. And I should also check that the input
74:36 - value exists. And if the input value exists, and the message that comes back exists, then I only
74:43 - wanted to put it in the chat history. So there we go. Let's try that again. Let's refresh.
74:51 - What is six plus two? And that should give me the response.
75:01 - How are you question mark? And that should ask it the question. And then I can bring back the
75:10 - previous input as well as clear this so we can start again. Great. So I hope you've learned
75:16 - something new. I hope you've learned how to use the ChatGPT API or otherwise the OpenAI API
75:23 - that powers ChatGPT. As a beginner, it could be quite frustrating when you want to use this,
75:29 - but you haven't learned react yet. So that's how you would do it for your own personal projects.
75:33 - If you want to level up, check out my video on how we build the same thing, but in reacts next.
75:45 - Hey, everyone, and welcome to this video, which we're going to learn how to use the OpenAI API,
75:51 - or in other words, the thing that powers ChatGPT to build our own ChatGPT clone. And we're going
75:58 - to be doing this in react for the front end with a Node.js backend. So that's what we're going to be
76:03 - doing today. The final product will look like this, and it will allow us to write text prompts.
76:10 - And once we do that, we'll start a new chat automatically. And then we can carry on having
76:14 - a chat with the AI. Now, if we want to create a new chat, all we do is click on the button,
76:20 - and that will generate a new chat for us. And automatically, the first text prompt will be
76:25 - saved to the history. And the best part about it is that we can go back to the previous chat
76:30 - and add to again, go to the next one out of that, and that will be tracked accordingly. And of course,
76:36 - we can create new chats as well. So that is a cool feature that I'm going to show you how to do.
76:43 - And we're going to be saving that to six. Of course, we will also be keeping our API keys
76:48 - safe. And we're going to try to do it with not using all our free tokens. Okay, so I am super
76:55 - excited about this. What are we waiting for? Let's get to it. Okay, so first off, I'm just going to
77:02 - create a new project, I'm using WebStorm. So all I have to do is click here, and I can select react.
77:08 - And then I can call this whatever I want. So I'm going to call this react chat, gbt,
77:13 - G, okay, and that will get made in my WebStorm projects. And it's going to use this command,
77:19 - so NPX, and then the string create react app as one. So that is separated by a space here.
77:26 - And I'm just going to click Create. Now, for those of you who aren't using WebStorm,
77:32 - all you would do is use your terminal. So here is my terminal, I'm just going to make it bigger.
77:40 - And then you can gravitate wherever you want. So I'm going to go into WebStorm projects,
77:44 - and then you would use NPX, create react app, and then whatever you want to call your project. So
77:51 - react chat, gbt, clone, and hit enter. Okay, so that is what you do. Of course, I'm not going to
78:00 - do it this way, because I'm using WebStorm, which has done all that for me. So this is essentially
78:04 - spinning up all the files and configuration I need for this project. So we're just going to wait for
78:11 - that to do its thing. So when that is ready, it should say happy hacking. And there we go,
78:20 - happy hacking, as I will see all the folders and correct files are already in there for me.
78:28 - So let's just clean this up a little bit. We're not going to write any tests. So I'm just going
78:32 - to delete these two. I'm going to delete that. We also don't need a logo. So let's go ahead and
78:39 - delete the logo. I'm also going to delete the app test files, we're not writing any tests,
78:45 - as well as the CSS file, because I'm just gonna pull my CSS in one file because it's a small
78:51 - project. So that's it. So at the moment, you should just have these three files in the source
78:56 - directory, the app.js file looks like this, and I'm just going to delete everything in here,
79:04 - so that we can start fresh, that is what it should look like. I'm also going to change this to a
79:08 - functional expression, just because that is my preference. And we don't need these two inputs.
79:15 - So this is what your app.js file should look like. Your CSS file should just be empty. So we can
79:21 - start fresh. And your index.js, well, we're not writing any tests. So let's delete that.
79:26 - You don't need this. And delete the semi colons. Again, that is a personal preference. And we are
79:32 - ready to roll. So that is my index.js file. That's my index CSS file. And that's my app.js file. And
79:41 - that's all that we should have in here. Great. So again, like I said, this is a really small project.
79:48 - So we're actually not going to have any components or anything like that, because this is about
79:51 - learning how to use the OpenAI API. So I'm just going to start building up my app. So I'm going
79:58 - to set up by having two sections. So one section, that's going to be for the sidebar, and one
80:02 - section is going to be for the, I guess, main part of the app. So let's give this the class name of
80:10 - sidebar. And this the class name of main so we can differentiate between the two main. So what do
80:22 - we want to go in our sidebar? Well, I want to have a button. This is going to create a new chat. And
80:30 - I'm going to just put a little plus text icon here. If you want to know where I got the text icon from,
80:37 - I'm just going to search for it, you can simply just get it by searching for it. So if you visit
80:46 - this URL, you'll be able to get that plus sign as well. So I believe so. Anyway, let's just find.
80:53 - Yeah, so there it is. Great. So that is my text icon. Next up after the button, I'm going to
81:07 - actually have an ordered list. And this is going to be for the history of all our previous prompts.
81:13 - So I'm just going to pick it out by the class name of history as well, just to kind of make
81:18 - things more readable. And in here, we're actually going to map out onto list items, the first prompt
81:25 - that we wrote for the chat, the first text prompt. So we'll leave that for now. And lastly, I'm going
81:31 - to have a nav element. And in here, I'm just going to have the p element of made by Anya. So that is
81:39 - my whole section, my first section, it's got three children, which I want to space out evenly. So I'm
81:45 - going to use justify content space between to space them out evenly. So shall we do that? Yeah, let's
81:53 - do it. Okay, so let's get my index CSS file up, I'm going to say that everything so star means
82:00 - everything, everything in this, I guess project is going to have the font color of white and the
82:09 - font family of open sans. So open sans is something that I'm going to get from Google fonts. So please
82:18 - go ahead and just get it as well. So just go to Google fonts. And then all you're going to do
82:25 - is search for open sans. There it is. And then I'm going to select the appropriate ones, I'm going to
82:34 - actually select all the weights, so that we have all of them to our disposal. So I think that's it,
82:42 - I'm not getting the italic ones. So if you click here, we can then import them, you can do import
82:48 - them into the HTML or the CSS, I'm going to import them into the CSS, I'm going to grab that. And I'm
82:54 - just what I'm going to do is just paste it making sure that the semicons at the end, and you can
82:58 - see all the font weights that we have to ask disposal. So now if I want to use this, use the
83:04 - rule that I need to use, we can have anything as a backup, I'm happy having sans serve as a backup
83:09 - as they have kind of given us. So there we go. So yeah, everything in here is going to have
83:17 - essentially white text that is open sans and open sans doesn't work or revert to sans serve as the
83:22 - backup. Next, I'm going to grab the whole body and I'm just going to get rid of any default margin
83:28 - and padding. So margin and padding is set as zero to get rid of any weird funky white borders that
83:35 - we may have. And now let's make this bigger. I'm going to grab to the wrapping element. So the
83:43 - element with the class name of app. So let's grab it by the class name. And I'm just going to give
83:50 - the whole app a background color. So the background color I have picked out already directly from chat
83:57 - gvt. And it is this 343-541. Okay, I'm just going to make sure that the side bar. So let's style
84:10 - the sidebar, but also main. Let's give them both some styling first. So the sidebar, I want the
84:16 - background color of this to be darker. Again, I have picked this out as 202123. And I'm actually
84:25 - going to make sure that the height is 100 of the viewport height, but the width is only 244 pixels,
84:34 - and it's going to be stuck at 244 pixels. Okay, and while we're here, I'm also just going to make
84:39 - sure, well, let's just leave it at that for now. And the main, I'm also going to give it a height
84:46 - of 100 of the viewport height, but width, I'm just going to say 100%. So it's going to try to take up
84:52 - 100%. Obviously, we've got the sidebar there. At the moment, though, let's go ahead and start this
84:58 - project. So in WebStorm, I can just hit here and it will run the command npm start. So essentially
85:03 - look in here and run this command. But if you are not using WebStorm, I'm just going to show you how
85:10 - to do it. You would find the project first. So WebStorm projects, and this is what we call this
85:16 - React, try to be clear, you would do npm run start and hit enter. Okay, because you're literally just
85:23 - doing npm run and whatever we've called this, we call this start so that it runs this. So let's go
85:28 - ahead and do that on WebStorm. So I'm just going to go here and it should start up. So great. This
85:36 - is looking very cool. I'm just going to inspect it for now. So I want essentially this to be,
85:44 - you know, just spaced out evenly, right, I want it to appear this to be at the bottom, and then
85:49 - history, which at the moment doesn't know how much starting to be in the middle and the new chat
85:52 - button to be at the top, I can use so with display flex. So let's minimize this minimize that too.
85:59 - And on the sidebar, I'm going to initialize flex box. So that was initialized so I can use it.
86:06 - And we now want everything to be stacked on top of each other. Because if I save this, it will,
86:11 - you know, stuck next to each other, we don't want that we want it to be over each other. So flex
86:16 - direction, column. And now I'm going to do justify content space between. So now they are spaced out.
86:24 - And if I kind of move this, they'll always be at the bottom, the space between all the three
86:29 - children should be equal. So in here, the three children, there's one child, there's the second
86:38 - child, and the third child has equal spacing between them. Let's carry on. Maybe let's just
86:44 - make this a little bit smaller. Okay, maybe let's style the button and the now fast before moving
86:50 - on, let's just complete the sidebar. So there is my sidebar. I'm also going to grab the button,
87:02 - and just give it a border solid 0.5 pixels. And then make it kind of well, I'm going to do white,
87:11 - but then I'm going to make it 0.5 opacity. So A is for opacity. Make sure to spot button correctly,
87:17 - we shouldn't really use RGB and hex. So we can swap that out at the end. And then let's also
87:25 - give it a background color of transparent. So we've given it a border, you know, background color
87:30 - is round off the edges, border radius. Let's go with five pixels, and then padding 10 pixels margin
87:44 - 10 pixels. Okay, so that's what I have done. So now it looks like that. Very much like the real
87:53 - thing. Now let's do the navbar. So let's go back here and let's grab the nav element. And all I'm
88:02 - going to do is give it border at the top. So I'm going to do border again, but this time just border
88:06 - top, and literally just copy this line really. Okay, but that's going to apply it just at the top
88:15 - and let's also give it the same padding. So let's just copy this just to keep it consistent. Okay,
88:21 - so now it looks like this. Wonderful. This is looking great. Now, if I was to start adding
88:31 - elements into here, so into the history, so say we have a list item, or doesn't really matter what
88:39 - we do from now, it's going to look like this, I don't really want the dots here. So I'm going to
88:44 - show you how to get rid of that, as well as get some padding to the whole unordered list. So let's
88:50 - grab the unordered list first. Okay, I'm just going to grab by the element, because we don't
88:56 - really have any other unordered lists in here, right? I mean, you couldn't grab it by the history,
89:01 - I gave up class name to make it more readable. So maybe let's just do that. So dot history,
89:07 - dot is for class name, as hopefully you know. And let's apply the same padding and margin
89:12 - for consistency. And also just gonna maybe give make sure that it spaces out 100%. And now every
89:23 - list item that lives inside the element with the class of history, I'm just going to use list style
89:32 - type none. Okay, and that will remove that dot. Okay, now I'm also going to pad it out. However,
89:47 - I just want to pad it out 15 pixels from the top and bottom and zero from the left and right.
89:52 - So that is a shorthand for doing that I would apply to the top and bottom of this to the left
89:56 - and right. And I'm also wanting to give a cursor of pointer, because I'm going to want to be able
90:01 - to click on these, right. So I want it to be very obvious that we can click on them by changing the
90:06 - pointer like so. Alright, done. So we're now done with the sidebar. Maybe let's get rid of,
90:14 - but let's keep that for now. Okay, so let's move on to the main section. Now let's do it.
90:22 - Now my main section, well, I'm just going to give us the h1 element of ania and gb2 like so. And
90:29 - then I'm also going to, I guess, make a feed. So we're going to use another unordered list. So
90:35 - luckily, we gave that a class name, because I am going to use another unordered list. So let's
90:40 - give this a class name of feed, because it's going to be for our feed. And we're going to also map
90:47 - out onto here some list items, which is essentially going to be each chat. Do we want to do this?
90:55 - Now, maybe let's leave that for now. So we're going to map on to, of course, you know, list
91:02 - items, but we'll leave that. Let's then make a div. And let's give this the class name of
91:14 - bottom section, and it's going to basically hold everything that needs to be on the bottom section.
91:18 - And what goes in a bottom section, well, we're going to have an input, but I'm going to wrap
91:22 - it in an input container. So I'm going to make a div with a class name of input container,
91:30 - so that we can essentially position a little icon on top of the input. So let's put an input.
91:38 - There we go. And then I'm also going to add a div and give this the ID of submit.
91:44 - Okay, so that is it. And again, I'm just going to use some text symbol. If you want to Google it,
91:55 - that is it. And you can get it from Unicode characters. So that is the URL to do it.
92:01 - Great. So now let's go back here. Okay, so we've got an input container. And under the input
92:08 - container, so make sure it's after this closing tag that's linked to here, I'm going to put a p
92:14 - element. Let's give this the class name of info as I want to style this up a little bit smaller
92:21 - than a normal p element. And it's just going to have the text I've stolen from the ChatGPT website.
92:29 - Okay, wonderful. So we've now finished with all of this at the moment, you know, it's under here,
92:38 - because we have our sidebar here, and then our main is under here, we need to use two to appear
92:43 - next to each other. So the parent of the sidebar and the main element is the div class name of app.
92:50 - So let's go back into here. And just right here, I'm going to use display flex. And that should
92:58 - make both of these appear next to each other like so. Great. Let's style up the main element a bit
93:05 - more next. So the main element, well, I want everything I guess, to kind of be in the center,
93:15 - but also with space between. So once again, I'm going to initialize flex box. So display flex.
93:27 - And once that is done, of course, everything will appear from left to right, we want it to appear
93:32 - from top to bottom. So what I can do is use flex a direction column. And now I'm just going to justify
93:42 - content space between. Okay, so it looks like that another center the text, as well as everything
93:50 - else, actually, so we're going to use align item center, which again is part of flex box, you can't
93:56 - use a line items center. And you can't use this. In fact, you can't use any of these three without
94:01 - initializing flex box. So just keep that in mind. And now let's also center the text. So once again,
94:09 - I'm going to do text aligns time center. And I believe that's all we need to do. So that is what
94:16 - it looks like. Next, I am just going to make this smaller and more transparent. So the p element
94:22 - with the class name of info. So what I'm going to do is grab the class name of info. And the color
94:30 - of this text is, well, it's not going to be white. Let's override that. So I'm going to do RGB a
94:38 - 255, 255, 255, 0.5. Okay, so T is what I'm going to give it. Next, I'm just going to send the
94:46 - font size, font size 11 pixels, and pad it out just a little bit though by 10 pixels. So at the
94:54 - moment, it will look like this, okay, just much more, I guess, realistic. Let's tackle the input
95:01 - next. So the input, well, of course, the input and the icon are children of the input container,
95:11 - and we want to do some positioning, which is why we're going to use position relative on this,
95:16 - and then position this based on the parent by giving it position absolute, and then some values
95:23 - for top and left, I believe. Let's have a look. Okay, so let's grab the input container, actually
95:29 - the other side. So top, right or bottom, right, top or bottom, it's up to us. So let's yes, grab the
95:37 - input container. And like I said, we need to give a position of relative relative to everything else.
95:47 - So essentially, not much will change for that. But we need to do it in order to position the child.
95:56 - And one other thing that the input container lives in is the bottom section,
96:00 - which we're going to have to assign a width to. So the bottom section,
96:05 - let's just say we want this to have a width of 100%, just like so.
96:09 - Oops, there we go. I'm also going to use display flex on it and make sure that everything stacks
96:20 - on top of each other. So I'm going to use flex direction column. And then let's also center
96:26 - everything. So justify content center and align items center. So everything's going to be centered
96:32 - from top to bottom and then left and right. So that should be good. So yes, it is. And now let's
96:43 - so here is the I'm just going to show you exactly how big that bottom section is it stretches.
96:51 - And then if we go into the bottom section, I need the input container to stretch to.
96:55 - So the input container. Let's also give it a width of 100%. But then also stop it so cap it if it
97:11 - gets to 650 pixels. Okay, great. So again, that won't look like much because now we need to stretch
97:20 - the input that lives inside of it. So now let's grab the actual input itself. And the width is
97:28 - going to be 100%. Now I'm also going to get rid of the border of this. Let's give it a background
97:35 - color, which is going to be RGB a it's going to be white, and it's going to be super opacity 0.05
97:42 - I'm going to do. And let's also give it a padding at the top of 12 pixels and 15 pixels from the
97:50 - left and right. So this is applied to the top and bottom, and this to the left and right,
97:54 - and round it off. So I'm going to do border radius, five pixels. Okay, so one other thing that I
98:02 - should probably do is, well, let's have a look at what this looks like at the moment.
98:08 - And so actually, this looks good. I'm happy with that. I don't really want any focus on this. So
98:17 - that blue line. So what I'm also going to do is grab the input. Focus, I'm just gonna do outline
98:26 - now. Okay, so that will get rid of that. And one last thing, I'm just also going to add some box
98:30 - shadow, I'm essentially going to overlay lots of box shadows on top of each other. The first color
98:35 - is going to be black with 0.05 opacity, zero x axis, 54 pixels y axis, 55 pixels blur,
98:50 - and then overlay it with another one. So in fact, I'm just going to copy this,
98:54 - because I think we're going to keep the color the same, but just change the x and y and blurs.
99:01 - So we'll make this minus 12, and change this to 30. Do it again.
99:13 - And this time zero, let's put four pixels, and six pixels. And then again,
99:19 - zero, 12, three pixels, and a final one of zero, minus three, and five. So there we go. That's a
99:35 - lot. And we just need to change all of these to be commerce instead, because it's just one long
99:41 - box shadow. So the desired effect is now that let's position this next. So this time, what I'm
99:52 - going to do is grab the submit. Okay, so the deal with the ID of submit, and I'm going to use
100:03 - position absolute. So at the moment, that will appear here, but I wanted to appear here and
100:09 - wanted to position it from the parent from the bottom 15 and from the right zero. So let's go
100:18 - out and do that bottom 15 pixels and right zero. And I'm also going to change the cursor. So like
100:26 - we did before, to be pointed so that we know that we can click on this. And the end result is that
100:32 - you can probably move it a little bit down. That does seem kind of high up, or maybe let's make
100:37 - the font size bigger for here. Maybe let's do that. So again, on the input, I'm just going to
100:44 - change the font size to be 20 pixels if we write in the input. And great, that is so much better.
100:55 - I think we're now ready to actually cook this up a little bit to the API. And for this, we're going
101:02 - to go back. So let's do it. So back in here, what I'm going to do is on the same level as the package
101:10 - JSON, I'm just going to create a new file. So let's go ahead and add a new file, I'm going to
101:16 - call it index, or let's call it server j s, you can call it whatever you want, really. So that is
101:23 - now our server. So that's our back end. Okay, and we're gonna have to install a few things. So let's
101:29 - go ahead and do that first. So I'm going to install a package called cause Express. Know them on.
101:39 - And I think that's it. If you want a bit more information as to what these are, please do
101:44 - check out my full site developer course where I go into this in a bunch more detail. Okay,
101:49 - or you can do your own research, just research those packages. Otherwise, let's carry on. So you
101:54 - will see those packages happen as well here along with their version. So if something isn't working,
101:59 - make sure to revert back to these versions and install that version. Okay, if you are watching
102:04 - this in the future. So now that we've done that, let's write a script to start our back end,
102:09 - I'm going to call it start. But this time, I'm going to write back end. And let's differentiate
102:14 - it by writing front end for this one. Run and let's make that biggest you can meet it. And to start
102:21 - this, or we're literally going to use the package that we just installed to listen out for constant
102:26 - changes on my back end. So I'm going to do node of one. And then we're going to listen up changes
102:30 - on server j s. Great. So now let's start our front end again. So I'm just going to stop it from
102:37 - running here, and your NPM run, start front ends and hit enter. Okay, so that will just rerun that
102:45 - and I'm going to create another tab so I can run my back end. So keep both of those running NPM
102:50 - run, start back end and enter. So now our back end is running. So let's actually define a port,
103:00 - port to run on first, I'm going to minimize that. So we're done with the package JSON,
103:05 - let's get off our server j s file. So we're going to run our back end on port 8000. And let's also
103:15 - just go ahead and require those packages that we literally just installed. So we're going to use
103:23 - express, but also going to use core. So require course, to get rid of any calls and messages that
103:32 - we might come across. And now let's initialize it. So I'm going to essentially get express,
103:38 - we've got the package, we've saved and express, I'm going to release everything by doing that
103:43 - and save it on the app so we can use it in this project. So now I'm also I know I'm going to be
103:49 - working with JSON. So I'm just going to use up express JSON. Now allow us to work with JSON when
103:55 - we start sending stuff from the front end to the back end with our post requests. And I'm also
104:01 - going to do up use course because I know that I'm going to run into some course error messages.
104:06 - So that is the setup. Now I'm going to do app listen to listen out, essentially on port.
104:17 - So let's actually just write a message your server is running on ports, and then whatever the port
104:29 - is support 8000 is 8000 that we're using here. Okay, we actually need to make this a callback
104:40 - function, plus report as the first parameter, and this as the second parameter, and then console
104:46 - log this out to console log this whole thing. Great. So now if we look in here, it says your
104:54 - server is running on port 8000. And if I make any changes, so if I just do console log, hi,
105:01 - that will really run. Okay, and same if I visit localhost 8000 here.
105:09 - That is our port and it's running, of course, we haven't written in the express routes.
105:13 - So that is why it says cannot get anything when we visit the home route right here. But let's
105:19 - carry on. So I'm just going to minimize that. Okay, so now it's time for us to get our API key.
105:29 - So all I'm going to do is head over to OpenAI. And I'm going to go to developers API reference.
105:38 - Okay, of course, you have to be signed in. So just make sure you are I am currently signed in.
105:43 - And we are going to get our API key. So all you have to do is go here, view API keys. And I'm
105:50 - going to create a new secret key. So copy that it's really that easy. There it is. If you are
105:56 - got lost, just make sure to visit this URL when you are signed in. And you can create as many as
106:02 - you want. Of course, if yours gets taken, or you think it's compromised, you can delete it as well.
106:08 - So keep that in mind, I just created one. And all I'm going to do is essentially for now,
106:16 - I'm just going to put it here. Like so. So there we go. Right now it's in here, but we will be
106:24 - creating a dot uv file to keep it more safe. But you know, I just want to get the basics done first.
106:30 - And now let's write our route. So if we post to the route, let's say if we go to which we do local
106:40 - host 8000 forward slash completions, this could be whatever you want. Essentially, all I'm saying
106:46 - is that we visit forward slash completions, then we will get something back here. Okay.
106:56 - And then the syntax for this have a request and a response. So put those in parentheses,
107:06 - this is actually going to be an async function, because we're going to use the await keyword
107:10 - inside of here. But let's cross that when we get to it, we're going to do try and catch. So we're
107:17 - going to try something. And if it doesn't work, we're going to catch the errors. I'm just going
107:21 - to console error them out. So console error, error. Okay. Great. And what we're going to try,
107:32 - well, we're going to use the fetch keyword, make sure you are on the latest version of node in
107:38 - order to be able to use the fetch API keyword on the back end. So just keep that in mind as well.
107:44 - So all I'm going to do is use the fetch keyword, and we're going to fetch to the completions API.
107:55 - So once again, let's go back here, let's go to the documentation. And we're going to use the
108:03 - chat completions API from OpenAI. So the model we're going to use is I don't have access to
108:09 - GP chief GPT for yet. So I'm going to use GPT 3.5 turbo. So let's go here. And if you're going to
108:16 - chat, create chat completion, not completion, okay, chat completions, this is the URL that
108:23 - we're going to need. Okay, so I'm just going to make that smaller. Here we go. It's a post request
108:29 - to this URL. So I'm just going to grab that and paste it in like so. Next, we're going to have to
108:41 - pass through some options, like what kind of request is going to be so what methods some
108:46 - headers with our API key, as well as actually what model you want to use on the message we want to
108:52 - send over. So I'm going to define that here constant options. It's going to be a whole object.
109:00 - And like I said, it's going to take a method is going to be a post method, as we discussed.
109:05 - And next, we're going to pass through some headers. So the headers that it's going to take,
109:09 - well, we need to pass through some authorization. So make sure to spell this like so authorization.
109:16 - And the authorization is just going to be a string with our const. So that's what I put back
109:25 - to so we can use that code in here, you have to put bearer, and then that and then we're just
109:31 - going to put some curly braces so that we can pass through the API key. So that's how you'll
109:36 - put in variables, you'd use the dollar sign and the curly braces. Okay, next, we're also going to
109:42 - have to pass through the content type. So content type, and then we're going to put application
109:51 - JSON as we're going to be working with JSON. And now we can define the request body. So we're going
109:58 - to have to pass this through JSON stringify. Okay, and it's going to be an object that we're going
110:03 - to send through. And we're going to justify it Jasonify it thanks to Jason stringify. The model
110:08 - we're going to be working with, as I said, I don't have access to ChatGPT for but if you do,
110:13 - please go ahead and use that because the results will be better. I'm going to use this model right
110:18 - here. And the messages we're going to pass through are going to be so the role is going to be user
110:32 - and then content or the content for now, let's just put how are you okay, and we'll replace that
110:37 - we're just going to check this works. And I don't want to go over 20 tokens, I'm going to limit my
110:42 - tokens. So I can do max tokens 100. Okay, that will just mean basically every string text prompt
110:50 - is tokenized. If you want to check how many tokens your string is going to use, you can check it
110:55 - before using this on the OpenAI documentation. But I think just you know, put a max in here just
111:01 - so you don't go over usable free credits and whatever. So there we go. One thing that I will
111:07 - say is that we can't pass over Jason from the front end to the back end unless you have this
111:12 - right. So if you're having any issues when it comes to that, make sure you have this that's very
111:16 - important. Okay, great. So those are all my options that we're going to pass through with this URL.
111:26 - Like I said, this fetch API is an async method, which is why we're gonna have to await it. So
111:32 - we're literally going to wait for something to come back. And we're going to save it under
111:37 - response. And because we're using the await keyword in here, this whole function is an
111:43 - async function. Again, check out my full site developer course, if you want to learn more about
111:48 - this in more detail. So now once we get the response, we're going to wait for it. And then
111:53 - we get it back. I'm going to get it to Jason, but oh, Jason is another async method. So we're going
112:00 - to have to await this to we're going to wait it. And once we get it back, we're going to save it
112:05 - as data. Great. And let's just send this over to localhost 8004 slash completions by passing it
112:14 - through reset. So now let's check it out. So first off, after you've done this, let's hook this up to
112:24 - the front end, I'm going to do so with an on click. So on here, if we click this div,
112:32 - I want something to happen. And I just want to get message. Okay, that's all I'm going to do.
112:38 - In fact, maybe let's do messages as it could be plural. And let's define it up here. So right
112:44 - under here, we're going to define get messages. So const get messages, it's going to be an async
112:54 - function, because we're going to use the fetch keyword in here too. And once again, we're going
112:59 - to use try and catch so try. And we're going to catch any errors. And what are we going to do
113:09 - this time? Well, first off, we're just going to console error any errors. And in here,
113:22 - once again, we're going to use the fetch keywords that await fetch, we're going to pass in the URL
113:27 - this time that we're going to get it from our back end. So right here, that's what we're going
113:31 - to get it from. So paste that in like so. And again, we're going to have some options because
113:37 - we're going to have to pass through the some data, right? So exactly what we're writing into the
113:43 - input. So let's define our options again. Again, the method is going to be a host method. The body
113:51 - this time is, I'm just going to actually pass through a message. And it's going to have a value.
113:58 - But at the moment, well, yeah, we can we can pass it through, let's just put, hello, how are you so
114:05 - hard coding it. And we're gonna have to wrap this through JSON stringify again, so JSON stringify.
114:11 - And we're going to get that whole object and pass it through. Okay, great. And I'm just going to
114:18 - add headers as we are working with JSON. So I'm going to put content type application. Jason.
114:30 - Okay, wonderful. So once again, we're going to wait for the response.
114:38 - And once we get the response, we're going to get its JSON. And let's save it as data, just like so.
114:45 - And then for now, I'm just going to console log the data. So let's test it out. So at the moment,
114:53 - we're just hard coding. Hello, you that will be passed on to the server, but we're not doing much
114:58 - with it, because we're just going to send how I do from here anyway. So let's just try this out.
115:04 - So here, if I click on here, I don't need to put anything in. We're just going to wait.
115:12 - The promise is pending. Why is that?
115:21 - That's because we didn't wait to wait for that to come back. That's why we got a promise there.
115:29 - Let's try again.
115:30 - And great. So we get back this whole object. Okay, everything is working. And if we look in the
115:45 - object, and we look under choices, and we look under the first item in the array, we get a message
115:50 - from the assistant saying I'm an AI language model. So I don't have feelings like humans do,
115:56 - but I'm functioning properly and ready to assist. So we're getting back that message. Next thing we
116:01 - want to do is actually show that message in here. Instead of hard coding, how are you, we want to
116:05 - actually get the input, right? So let's do it. Well, first off, I'm just going to save that
116:11 - response. So the whole message to state and for that we need use state from react. So I'm going to
116:20 - import use state and I will add it use effect as I know I will need that from react. So now if I
116:30 - want to save that message, I can go const message, set message, use state and it's sort of with the
116:41 - game now. And so now at the moment, we get now go, we assign that the value of null to message.
116:48 - And if you want to say change, sorry, the value of message, we use set message to do it. So I do
116:54 - want to change the value. So I'm just going to use set message. And what I'm going to do is go into
117:00 - the data, get the choices. So just like we did before, go into that array, get the first item
117:07 - and get the message. Right? So once again, here's my whole object. So that's technically data,
117:16 - you go into choices, get the first item of that array. So zero, right, zero, and then we get the
117:23 - message. So the message will actually be an object that has the content and the role. Okay, I want to
117:28 - save both. So let's carry on. So we don't need to console log this out anymore, the message with the
117:36 - role and the content is being saved under the constant message. So it's not a string, it's an
117:41 - object. Okay, so what do we say we want to do next, right, we want to hook up the input. So let's
117:50 - save the value of up here to value, set value, use state, null, and we're going to override the value
118:00 - if we interact with the input. So let's find that input, here we go.
118:05 - We're going to display the value. So whatever the value is right now, we're just going to assign to
118:14 - the input at the moment, it's no, of course, but on change of this input. Well, I'm just gonna
118:21 - pass through the event. I'm going to set a value to wherever e target value is of that input.
118:39 - Right. So now up here, if I console log value, just anywhere just above the return. And I type
118:51 - something to get up our console log. See, that's what technically console logging value or console
118:58 - longer app line 27. And it will change. So that is how we are changing the value constant. Okay,
119:07 - and next, let's actually whatever state it's at, I want to send it over. So currently, I would send
119:13 - over this, let's hook that up. So what I would do, this is super simple, all I would do is get
119:20 - rid of the string and put the value instead. Okay, and now to pass it to our back end where we're
119:29 - passing it through with the body, we need this to be here in order for this to work. So don't forget
119:36 - that. And that just means that instead of having this here, I can get the request body message
119:45 - and pass that through like so and that will now be sent over to OpenAI. Okay. So again, if this
119:54 - doesn't make sense, check out my full site. So that of course, I don't want to keep banging on
119:57 - about it. But you know, there's a lot of stuff we're doing here that from beginner will be way
120:01 - too much. So do check it out. So now the one last thing I'm going to do, well, I'm just going to
120:08 - console log the message that we get back. So that saved on the message and try it out. So let's do
120:17 - what is two plus two, send that and great, we get four and it's from the assistant from the AI
120:28 - assistant. So let's now use this in order to create a chat response, okay, as a list item. So let's do
120:35 - it. So let's go back in here. And what I'm going to do is actually save all the previous chats.
120:48 - And you set previous chats in order to change that. And I'm going to start off with this being
120:54 - an empty array this time. Okay, so that's what I'm going to do. And I'm going to actually get
121:01 - this whole message. So whatever's coming back here right now, because back with the role and
121:05 - content, and I'm also just going to assign a title so that I can essentially say that, okay,
121:12 - this chat has this title, I'm going to lump it together. How is this chat is a new chat,
121:16 - I'm going to give it a new title. And it's just going to be the current the first prompt that we
121:22 - give our chat. So let's do it. Let's do this maybe in a use effect.
121:35 - Okay, so just like so. And I'm going to say that anytime the message changes, so whatever we get
121:44 - back from the open API, I want this to run. I'm also going to save the current title. So current
121:52 - title, set current title, use state, and start off as being an empty array as well. So I'm also
122:04 - actually going to change this if the current title changes. So whatever the prompt for the chat,
122:09 - whatever the start of the chat changes, then we run this again. So let's just console log the
122:16 - current title, the value, so the input value and the message that comes back to us. Okay,
122:23 - just so we can see a little bit more of what is going on. Great, that needs a comment.
122:29 - So what do I want to do? Well, if there's currently no current title, right? So if there's no new
122:40 - title, we don't have a chat. However, we do have a value in our input. And we do have a message
122:49 - that has come back to us, where then I want to set the current title to be whatever the value is.
122:56 - Right? So hopefully that makes sense. And once we save it, we can add it to the history. However,
123:04 - if there is a current title already that exists, and the value exists in an input, and we get the
123:12 - message back. So we're on the chat currently, we're still chatting away, we just want to set
123:18 - previous chats, and we're going to essentially get whatever's in that array already, right? And this
123:28 - is how you would update an array using use state. I would open up the array, I would get the previous
123:37 - chats and spill them out. But then I'd also add, I'm going to add an object, I'm actually going to
123:43 - add two objects. So just like so, maybe I'll put this on a new row, so it's more readable for you.
123:54 - There's one object. And here is a another object is going to have the title.
124:05 - And the title is going to be the current title. So whatever the first prompt was,
124:10 - the role is going to be the user. So essentially us and the content is going to be the value. So
124:22 - I'm using kind of what OpenAI gave me in terms of structure for the object, but I've added
124:28 - my own title, so we can save it to state. And then I'm literally just going to get what chat
124:34 - should be gave back to me. So roll will go into the message and get the role. And I'm going to
124:45 - get the content and get the message content. Okay, and I'm also just going to give this the title
124:52 - of the current title. So let's just talk this through. So every time we are saving previous
124:58 - chat, so a new chat, I'm saving whatever we asked the AI, and we're signing the role as
125:04 - asked the user. And I'm just going to save the current title to make sure that all the
125:10 - chats are lumped by the first prompt. And I'm also setting over the other object, which is the
125:15 - response from the AI, which we've saved under the const message, right? That was an object that had
125:21 - a role and content. And I'm literally just getting the role from that object and getting content from
125:26 - that object and assigning it to role and content for my previous chat state. I'm going to show you
125:34 - what this looks like. Okay, so there we go, we have a few more things to do. And that is actually set
125:44 - the history by the current titles. So let's go ahead and do that here. So here's my section
125:56 - of main. And actually, let's just show this if there's current if there's no current title,
126:03 - then we show this however, if there's a current title, then we get rid of that. And here we're
126:08 - going to map out onto list items. However, maybe let's just see what this looks like at the moment,
126:15 - I'm just going to console log out previous chats. Okay. So that's what we're going to do.
126:24 - So let's go back here. I'm just going to let's start a new chat. What is five plus five? Ask it.
126:38 - Okay, so that is essentially these are my previous chats, we've created
126:43 - an object that has the content of what we asked as the user. There we go.
126:48 - The title is an empty array that is strange, we need to essentially change that current title.
126:57 - And then our second object, the content is 10. Because that's the answer that we got back from
127:02 - the AI and the role of the AI is the system. So why is title saving as an empty array? That is
127:11 - because the current title, we did set this to be an empty array, this should actually be null,
127:16 - because we're just going to save a text prompt. And where do we set the current title? Well,
127:22 - essentially, this should have done it for me, because we're listening out for current title
127:27 - changes. And if there is no current title, which technique that is not, okay, because before is an
127:32 - array that didn't run, let's try that again. So what is five plus five? Click on that. Okay,
127:45 - and great. Now our title gets populated with the prompt itself. And both of them have that prompt,
127:51 - right? And now because current title exists, we will miss this because current title does exist.
127:59 - And we'll just keep adding to the chat. Right? So let's ask another question. Are you sure?
128:05 - Okay, now there's four, because I asked it a another question. So there's me asking,
128:18 - are you sure as the user, the title is still the same, the first initial prompt,
128:22 - and then we're getting the response, okay, from the assistant. So great. So this is good. However,
128:29 - what if I want to change it, I want a new chat. So if I click here, I essentially want to clear
128:34 - this title. So let's do it. So I'm going to make a handle click function that I'm going to attach,
128:46 - or maybe let's call it something else. So on the button on click, I'm going to create new
128:54 - chat. So let's define it. So up here, const create new chat. I'm going to set message,
129:12 - I'm just going to clear everything, set message. So whatever the message is from the AI, I'm going
129:20 - to set that to null, I'm going to set the value of the input to an empty string. So we're clearing
129:24 - that. And I'm going to set the current title to be null two. So I'm essentially completely
129:30 - clearing it so we can start fresh. Okay, so shall we have a go at this? Let's try it out.
129:42 - What is one plus one? Let's send that over. Okay, so we get that there. The title is assigned. But
129:53 - if I start a new chat, and go, how are you and send that over. Okay, the title has changed.
130:05 - So great. So now if we ask more questions, the title of that should be still attached to. How
130:17 - are you? And it is so great. Now I'm going to get the unique title. So we're going to get everything
130:31 - and we're going to filter by the unique title and show it in the history as well as show the chat
130:36 - up here. So all I'm going to do is get the previous chats and I'm going to use filter.
130:46 - And I'm going to look at each previous chat individual, you can call this whatever you
130:50 - want. It's essentially every item in my array. And I'm going to literally just look at the previous
130:55 - chat objects title. And if it equals the current title that we are currently on, well, then we know
131:02 - that we're on the current chat. So let's save these filtered items as current chat objects,
131:07 - any object that has the title that is the same will be lumped into current chats. And this just
131:14 - means that I can then get current chats with the feed. Okay, and map out each, let's call it maybe
131:25 - a chat message, we're gonna have to use an index as we are mapping. So let's put that index here
131:32 - like so. And then I'm just going to map onto a list item. We of course need to give it a key.
131:42 - So I'm just going to use the index for that for this demo. And then I'm just going to essentially
131:53 - turn this key correctly. Put that there, put in two things into my list item element, I'm going to
132:03 - put in two p tags. This one's going to show you who sent the message. So roll is the user or the
132:14 - area assistant. And here, I'm just going to show the content of that message. I'm going to go chat
132:18 - message, message, great. And let's just give this the class name of roll. So it's really obvious.
132:28 - Okay, and we can pick it out later. So this is looking good to me, let's just check that that
132:36 - current chat exists fast before mapping anything onto here. And while we are here, I'm also just
132:43 - going to get all the unique titles, I'm going to filter, I'm going to get all the messages and just
132:46 - get the unique titles. Because as we saw, there's some titles that have like numerous, right, we
132:53 - just want essentially to filter them all out and just gonna return this title and this title and
132:57 - put them in an array for us. So I'm going to show you the code to do that. Well, this time,
133:02 - I'm actually going to get the previous chat, I'm going to map. I'm going to get the previous chat
133:09 - individual. And we're just going to get the previous chat title. And now I can pass it through.
133:18 - So all of this, I'm going to pass that through into a new set and make an array from it. So array
133:26 - from just like so and this will give me the unique title. So that piece of code is super useful if
133:33 - you want to get unique items from an object. So if I console log this out now, unique titles on
133:44 - line 61. You will see I've just got those unique titles and put them in an array, great, because
133:51 - now we're gonna map them on into the history. So let's get those unique titles. And instead
133:57 - of having blur, I'm going to get the unique titles. And if they exist, I'm going to map each unique
134:06 - title. Let's also maybe get the index. So put that in parentheses like so. I'm just going to
134:18 - get that unique title and pass it through here as code like so. So wonderful. I believe that should
134:27 - be it, we just need to give this a key. And it should now look like this. So it doesn't look
134:35 - great at the moment, we still need to style stuff up. But now, let's actually maybe add an on click
134:44 - so that if we select a chat, then we essentially pass through that chat that we click on as the
134:52 - current title, right? Because we want to change the current title to the other chat. So I'm going
134:57 - to define a function for this const handle click. And if we click on any one of those, so
135:07 - handle click is assigned to the list item in history. So in here, so we'll do it on here on
135:19 - click, we're going to call the function handle click. And we just want to click on it. So if
135:26 - we click on the first unique title, I'm just going to pass through the unique title that we clicked
135:32 - on. So now we need to make this a callback function as we just call that again. So we're
135:37 - going to pass it through into here that unique title. And we're just going to set current title
135:42 - to be whatever title we clicked on. Right? So hopefully that makes sense. It will do in a bit.
135:49 - So that's what we're going to do. And we're also just going to set message to null and set value
135:54 - to null. Okay, so we're just starting fresh. Great. So let's just test it out. What is four plus four
136:05 - send. So that should now get assigned to here. Great. And we can click on it. And my why is
136:12 - my content not showing up? Let's have a look. Let's go down here.
136:19 - Our chat message message should be content, right? Because that's what we saved it as here
136:24 - role and content. And that's what we're mapping out. So now if we look in here, there we go user
136:29 - what is four plus four assistance is eight. And obviously press it twice because I'm getting it
136:33 - twice. So let's just try again. What is four plus four? Send. Great. Are you sure question mark?
136:54 - Okay, and that's my assistance answer. And then I'm just going to start a new chat. And this time,
136:58 - how are you? Okay, so that's my question. And that's the assistance answer. But if I want to
137:08 - swap back and carry on this conversation, you are great. Then I can and it will be assigned to here,
137:18 - it does not get added to here. So great. This is looking so good. And if I clear it, we just get
137:23 - on your GPT. This is wonderful. A few more styling things that just style up these messages next.
137:29 - So all I'm going to do is style up essentially this list item here. So let's do it.
137:38 - So down here, I'm going to first style up the feed, I'm just going to give it a scroll. So I'm
137:43 - going to go over for scroll so we can scroll through the messages if we get loads, I'm going
137:48 - to make sure that the width is 100%. And I'm also going to just give it a padding of zero. So it's
137:54 - really squashed up to the edges. Next, any list item that lives inside my feed. So just like that,
138:06 - I'm going to use display flex, I'm initializing flex box. So they appear next to each other rather
138:11 - than stacked. And the background color, I'm just going to go with 444654. The width I want it to be
138:21 - 100%. And I'm going to give it some padding of 20 pixels. And I'm going to space out each list
138:27 - item top and bottom my 20 pixels and zero from the left and right. Okay, so at the moment, it looks
138:34 - like this, this is looking good. Let's just assign the line the text a little bit better. So again,
138:40 - I'm just going to say that any p element that is inside of my feed is going to have the color of
138:47 - our GPA. So a bit more transparent, I'm going to go with white 0.8 opacity, when you get the font
138:55 - size of 14 pixels, and I'm going to text a line left. And if that p element also happens to have
139:07 - the class of roll, I'm just going to assign it a min width of 100 pixels. So there we go. This is
139:16 - looking so good. Right now, you can of course add images in here instead of just use an assistant
139:24 - like the actual app does. But I think this is looking fantastic. There are a few things you
139:29 - can do to clear this up. For example, I do use RGB and hex colors in here. So please go ahead and
139:35 - change that. But overall, now you know how to use the OpenAI API. And you know how to make this
139:41 - cool chat, GVZ clone that has a history that you can kind of move back and forth to and add to the
139:49 - history and create new chats with as well. Finally, we're just going to hide this, I'm just going to
139:56 - stop this from running and import a package called.env. So just like that. And we're just going to
140:03 - create a new file. So new file on the same level as the server JS. So E and V, just like that. And
140:11 - we're going to define our API key. So instead of having it here, I'm just going to take it, you
140:17 - don't have to put it as a string that is implied, just paste it in. And now that means that I can
140:23 - just use process ENV API key. And of course, we need to require that package. So require.env
140:33 - config, and just start this up again. Okay, so just do that. That should now be picked up from
140:40 - this.env file. Okay, so you don't upload this.env file onto GitHub. Great. So great, I hope you
140:51 - have a fun, please take this to the next level, you know, add new features, it's yours.
141:00 - Okay, so we have learned a lot, but I'm really excited about showing you this section. Because
141:05 - in this section, we're going to use OpenAI's DALL-E model to generate images for us based on text
141:12 - prompts, as well as create variations of images if we choose to upload an image and so much more.
141:19 - So with this image API, we can create images from scratch based on some text we provide,
141:25 - as mentioned, we can also create edits of an existing image based on some text we provide.
141:30 - And we can, of course, create variations of an existing image that we upload as well,
141:36 - as mentioned in the intro. So let's check it out. So once again, let's get our endpoint,
141:43 - we will start off using this endpoint right here, we will pass through our API key. And this time,
141:49 - we don't need a model, what we provide, however, that is required is a text prompt that is a string,
141:55 - this text prompt is passed through with the request body along with some optional things.
142:00 - However, this time, these optional things vary. So we can pass through n, and this will represent
142:07 - the number of images to generate. And this takes an integer, and we can do anything from one to
142:12 - 10. So we can essentially get 10 images back if we want. We can also pass through the size. And
142:18 - this will generate a specific size of image. And we have three options to our disposal. So three
142:24 - squares, 256, 512, or 1024 multiplied by itself, we can even have a response format, which will
142:33 - specify how our image is returned with the URL being default, if nothing is put in, as well as
142:39 - the user to identify our end user if we need. So let's run it. Okay, so let's do it. As always,
142:49 - here's my file structure, I've got an index HTML file that is linking my app.js file. And there's
142:54 - nothing in here at the moment, we are going to be making a request to the image generations endpoint.
143:01 - Okay, so that's what we've been talking about, we're going to be generating images from prompts.
143:06 - And to do that, we are going to have to, well, get the fetch keyword and pass through that
143:13 - input here along with the options. And first off, though, let's do this in a function that's going
143:19 - to be an async function. So I'm going to call it async function, fetch images, that's what it's
143:25 - going to be doing. So now let's also define our API key up here. So we can communicate with open
143:32 - AI, and I'm just going to paste that there's a string, I'm just going to move that in here. Now,
143:36 - the endpoint that we're going to be using is this one right here. So make sure yours looks the same
143:41 - and the options, well, the method is going to be a post method, the headers are going to hold
143:47 - our API key. So we're going to use authorization, right, station, and then we're going to pass
143:56 - through bearer, okay, so capital B, and then I'm going to just put some code in here. So we're just
144:03 - going to do API key like so make sure that those are backticks. Great. Now we're going to have the
144:10 - content type. And the content type, well, it's going to be application Jason as we are working
144:16 - with Jason. So just make sure to put that there. Next in the body is what we actually want to send
144:22 - to the API. And we're going to pass through a object, right? And the object is going to take
144:28 - a prompt as we saw that is required. I'm going to go with a hamburger singing in the rain, you can
144:37 - put whatever you want. We do have to wrap this in Jason stringify. So let's just put the whole
144:42 - object in here. Okay, so make sure you're grabbing the whole object and just pasting it in like so.
144:47 - So the prompt is required, we can also specify how many we want, I'm going to say I want two images
144:53 - and the size, this is going to be from the sizes that we saw. So there's a few options, right,
144:59 - as we saw from the previous slide, 1024 by 1024 was one of them. Great. So now let's await this,
145:07 - let's save this response, just like so. And now I'm going to get the response and get it Jason.
145:15 - And once we get that, we're going to wait for that to come back to us, and we're going to get the
145:20 - data. So now let's console of the data, I'm just going to do console log data. And now let's call
145:26 - this. So this gets called immediately when we open the page. So I'm just going to open this up in
145:31 - the browser. And let's inspect to see what has come back to us. So let's just inspect this page.
145:38 - And today we get an object, we get an array of two images. So now if I grab this URL right here,
145:45 - I'm just going to grab that whole thing, let's go ahead and make that a little bit bigger, maybe.
145:50 - So just copy it, and make sure not to have the quotation marks at the beginning and end,
145:56 - because we need this to be a URL. Tada, we get a hamburger singing in the rain. And we get two of
146:04 - them. Now, great for those of you who just want the hamburgers quickly, however, I'm just going
146:10 - to show you how to do this with a car command as always. So here's my car command, as you will see,
146:17 - that is the endpoints that we are going to, we're just going to have to put in a prompt. So once
146:22 - again, let's put hamburger singing in the rain. And then let's put in our API key. So once again,
146:36 - just as always, just make sure to get rid of that, including the dollar sign, and just hit enter,
146:41 - and wait for that one image to come back, we pass you one n right here and the size of the image
146:47 - here too. So we should get back one image of a hamburger singing in the rain. And there we go.
146:54 - So let's grab that URL, paste it in here like so. And another hamburger singing in the rain.
147:00 - Wonderful. Let's move on. Now, using the DALL-E model, we can also do image variation. The image
147:11 - variation endpoint looks like this. And it will allow us to get an existing image and get up to
147:17 - 10 variations of it. Here are what we can pass through with the body. As you can see, an existing
147:24 - image is required. And all the others are optional and will default to a value if nothing is provided.
147:30 - I'm not going to be showing you how to do that here, because we're going to be doing this in a
147:34 - project as it is a lot more involved and will involve us having to have existing images
147:39 - in our projects. So we'll do that when the time comes.
147:46 - Another thing we can do with the DALL-E model is make image edits. This would involve using this
147:52 - endpoint right here. We are not going to be doing this in this course. But I did want to just flag
147:58 - this as something you can do. It would involve using an existing image, a potential mask. So
148:04 - another image you want to place on top of it, along with a text prompt to tell the OpenAI what you
148:10 - want to do with these images to edit them. Okay, so that is just something you need to know exists.
148:17 - And if you're ready to learn how to use the image generation and image variation endpoints,
148:22 - we're going to be using them in two projects coming up next.
148:32 - Hey, everyone, and welcome to this video in which I'm going to show you how to use the
148:36 - DALL-E model from the OpenAI API. So essentially, what we're going to be doing is building an image
148:43 - generator kind of like DALL-E, that's going to take a text prompt. And then it's going to generate
148:49 - four images for us based on that text prompt. So super basic, super simple, we're going to be
148:55 - building this in JavaScript, HTML and CSS. So essentially, this is a beginner video for those
149:00 - wanting to learn how to build their own things using the OpenAI API that powers tools such as
149:07 - DALL-E. So what are we waiting for? Of course, this is a front end project. So please don't go and
149:12 - publish this code with the API key that we will be using onto GitHub or share or anything like
149:18 - that. Because if you do, so I'm going to take your API key and steal all your credits. Or you know,
149:24 - if you have a credit card attached, they could potentially rack up loads and loads on your credit
149:27 - card bill. So please keep that API key safe. This is just for demo purposes. If you want to learn
149:33 - how to build out a more secure project, we will be doing that in another video where I build
149:39 - a front end and a back end to keep our API key safe. So let's do it. Please do have the fundamentals
149:46 - of JavaScript down. But if you don't, please do carry along anyway, and just fill in your
149:51 - gaps of knowledge later on after you finish this video. Okay, so let's do it. We're going to build
149:56 - this cool AI generator in JavaScript, HTML and CSS. So this is what it's going to look like. And then
150:03 - we can write a prompt and generate four images from it. And it's going to have this cool background
150:08 - too. So I'm going to show you how to do that as well. So first off, let's just start a new project
150:12 - I'm using WebStorm. So I'm simply going to click here. And let's call this JavaScript AI image
150:20 - generator, just like so and create. So that is created a directory for me in a directory called
150:27 - the WebStorm projects. And now I could just create a new file, I'm going to call it index HTML. And
150:33 - then I'm just going to create another file and app.js file. And now I'm just going to create a final
150:39 - file, it's going to be styles CSS, just like so. So there we go. There's our three files all in
150:46 - the same folder. And now let's link them up. So here's some boilerplate code for you. I'm just
150:53 - going to go ahead and call this AI image, generate door just like so. Okay. And now in the body,
151:04 - well, that's where all my code is going to go. But I'm also going to link up the app.js file,
151:08 - thanks for script type, it's gonna be at the bottom. So after all our other elements get
151:13 - read, then we go to the script tag. And I'm just going to link up the app.js file that's going to
151:19 - read our JavaScript. So the script is going to read our JavaScript from this file. Next, let's
151:24 - also link up the style sheet. So I'm going to use the link tag for this. It's a self closing tag,
151:32 - we'll do rel style sheet. And as the href, we're also going to put the path to our styles CSS file,
151:39 - which is just that as we don't need to go any folders or anything like that. It's in the same
151:43 - location as this index HTML file. So great, that is looking good. Now the background,
151:50 - I'm just going to show people how to do this, as a lot of people are probably curious.
151:56 - I'm just going to go to up high key dot app. So that's all I'm doing. And now we can generate
152:02 - our own way, which is pretty cool. So I chose a layered wave. And then all I did was kind of,
152:08 - you know, play around with this, or you can just choose your own like that.
152:12 - Or you can change the balance, the wave count, the complexity, which will be like,
152:16 - the contrast, the overlap, and just so much more, there's so much to do. And then you just download
152:21 - the SVG. And once that is done, you can open it up. And then you inspect the page like so.
152:33 - And then I'm just going to copy the whole element. Okay, so that SVG right there. So that's all I
152:44 - have done. Okay. And now if we go back here, I'm just going to in the body, paste it. So it is very
152:56 - long. And that's what it looks like. Let's just open this up in our browser. So I can go ahead
153:02 - and click here if I want if I am using WebStorm. Or if you are not, you can just copy the path,
153:13 - copy the absolute path, and then paste it in like so. So both things are okay to do.
153:22 - Great, now let's get rid of the little like border around it and make the stretch, right?
153:27 - So let's do it. So actually on here, what I am going to do is the width and the height.
153:36 - I'm just going to go with using the width and height from here. And then as the width here,
153:43 - I'm just going to go 100 viewport width. And then there's going to be 100 viewport height,
153:50 - we could have picked this out and done in the CSS file. So that is totally fine too. And on here,
153:56 - I'm going to grab the body and just get rid of any default padding and margin just like so.
154:03 - So then it should look like that. So that is much better now. So there we go. That's how you would
154:09 - use it. So that is how I like it at the moment. I'm actually just going to take the one I previously
154:18 - generated because I think I prefer it. But that is how you will get your one once you're happy with
154:23 - it once you played around with it. I don't play around with this one that much. And I just thought
154:28 - the other one cooler. So I'm just going to replace mine with the previous one that I made. Okay.
154:37 - And great, like I said, it's super long. So yeah, I mean, not much difference. Well,
154:43 - I just think likes that looks better. Okay. And now as the background, I'm just going to make it
154:47 - the same color as this last color right here. So let's find out what that is. In fact, I'm just
154:54 - going to inspect this. So the color for this is that. And now I'm just going to assign that to
155:06 - the body as well, just so that in case, you know, someone kind of zooms out like I did,
155:12 - then it just looks much better. I prefer that a lot more. Okay, let's carry on. So what is the
155:22 - next thing that we're going to do, we're going to add some elements in here. So just going to make
155:27 - sure I format that correctly. I'm going to next add a header. And that header, well, I'm just
155:35 - going to put the h1 element of any AI image generator, of course, you can replace this with
155:41 - whatever title you would like. And then after the header, I'm going to have one section. And this is
155:48 - going to hold all my images. So I'm going to give it the class name of images section. And then let's
155:57 - have a another section. This one's going to have the class of input container. Just like so. And
156:15 - I'm actually going to put in the input here. Okay. And then a div and I'm going to overlap this div
156:25 - later on, which is why I put them both in an input container. And let's give this div the ID of
156:31 - submit icon, just like so. And I'm just going to put some text symbol in here. If you would like
156:40 - to use it, you can get it at this URL. It's just this little arrow that looks like this. So you can
156:46 - get it from here if you would wish. Okay, so at the moment, our input and our title are showing
156:53 - up here, that's because we need to position some stuff and use display flex to center everything
156:57 - in here in a much nicer way. So let's do it. So we are done with this for now, we are not going to
157:03 - put in any images, because we're going to use JavaScript in order to do that for us. So let's
157:09 - carry on. Now we are going to essentially on the body, well, I just want to make sure that everything
157:20 - is stacked on top of each other. So I'm going to initialize flex box so that I can use flex
157:24 - direction column, okay, without this, I won't be able to use this. Next, I'm just going to set
157:31 - the width and the height of the browser. So view width is going to be 100% of the viewport width,
157:37 - and the height is going to be 100% of the viewport height. Okay, and that means I can now use justify
157:45 - content center and align items center, okay, to center everything to the very center of my browser.
157:53 - Again, I need to assign a width and a height in order for these to work properly. So now everything
158:00 - should be in the center just like so. Okay, and we want to exclude the SVG from this. So I'm just
158:08 - going to grab the SVG. And I'm going to essentially just give it a position absolute top zero,
158:19 - left zero. Okay, I'm just going to make sure that it's always behind everything. So I just
158:24 - give it a Zendenix minus one, or minus 10 to be sure why not. Okay, great. So now that is in the
158:31 - center. Amazing. The other thing I want to do is just maybe in the header this time, I just want
158:39 - to make sure that all font in the header is going to be white. So let's go with color. Let's go to
158:46 - RGB 255 255 255. So that is something that I have done. Great. Let's also assign a height. So I'm
158:56 - just going to hardcode a height of 150. And I'm going to center everything in it by initializing
159:01 - flex books again. And now I'm just going to align items center. So this time is going to center it
159:10 - on the opposite axis, so from top to bottom. So at the moment, it will look like that. Wonderful.
159:18 - So this is looking great. Now, what other things I want to do? Well, I'd quite like to space out
159:25 - all the child elements of the body. So excluding the SVG, that would be the header and the two
159:31 - sections, and I would like them to the spacing to be even between them. So I'm going to use justify
159:39 - content space between. So on the body, I'm going to change this to be space between.
159:47 - So they are spaced out like so. Wonderful. This is looking great. The other thing I'm going to do is
160:01 - just change the font family on the whole body itself. And let's go with trebuchet. And as a
160:10 - backup, I'm going to have sans serif. So just one backup. So that will just change the text to be a
160:15 - little bit more like this. Next, let's start up so the images container maybe let's leave that for
160:23 - now. Let's do the input container next. Okay, so let's do it. In fact, I think the input container,
160:30 - let's wrap it in a another wrapper. So in fact, let's make a section. And I'm going to give this
160:39 - the class of bottom section, just so that we can center this whole input container inside of it.
160:51 - So maybe let's change this to be active instead. Okay, so there we go. So now if we look in here,
160:57 - the three child elements are the header, the section and this section as well. So let's pick
161:04 - out the bottom section, of course, we are discounting the SVG as we've positioned that separately to
161:09 - the rest. So here, I'm just going to minimize that I'm just going to grab the element with a class
161:17 - name of bottom section. And I'm just going to make sure that the width of it is 100% of the parent
161:24 - element. And let's also use display flex initialize flex box, so that we can then use justify content
161:34 - center to center everything from left to right. And I'm also going to assign this a height of 150
161:39 - pixels as well. So there we go. There's our bottom section. And there's our header. Again, header,
161:46 - bottom section. Wonderful. Let's work on signing the child of the bottom section next, which is
161:53 - the input container. So again, I'm just going to grab the input container by the class name. So the
161:59 - whole element that has the class name of input container, and I'm just going to make sure that
162:03 - the width is 100%. But I'm also going to give it a max width, so that it stops at 650 pixels,
162:11 - if we wanted to. Okay, I'm also going to give a position of relative. This is because I want to
162:18 - position the child inside of it, relative to the parent by using position absolute on it. So what
162:27 - I mean is, well, if we grab the item with the class of submit icon, and I give it a position of
162:36 - absolute, and I actually fix it. So let's go ahead and fix it to the parents or the input container
162:44 - top by 10 pixels and right 30 pixels. Where do you think it will go? Well, here's the parent,
162:53 - it will go 10 pixels from the top of that blue square and 30 pixels from the right of it.
162:59 - So there essentially, okay, great. Now let's also style the input itself. So let's grab the input.
163:11 - And I'm also going to give it a width of 100%. So just like so. Maybe let's change this to be a bit
163:19 - smaller. So 600 pixels. I'm also going to give this a border of none, as I don't want a border,
163:26 - I'm going to make sure that the font size in here is 20 pixels. So quite large, maybe, or larger,
163:34 - let's pad it out by 10 pixels. I'm also going to add a border radius to smooth off the edges. And
163:45 - that's going to be of five pixels. And I'm going to add some box shadow because why not? I'm going
163:51 - to RGB. Let's go with this kind of dark color. So 38, 57, 77, zero on the x axis, 20 pixels on the
164:01 - y axis, 30 pixels blur and minus 10 pixels spread. Okay, and at the moment, it will look like this.
164:09 - However, I want it to be on the inside rather than it's spilling over the parent. So for example,
164:17 - I'm just going to show you there's our bottom section, right the input container, which holds
164:23 - the input that's spilling over the bottom section. So I'm going to use box sizing border box to stop
164:34 - that from happening. Okay, so now it is in the parent and looks like this. So much better. Let's
164:43 - also make sure that the headers width is also 100% so that it takes up the whole space. And now we
164:52 - can also center that title. So let's do justify content center. Okay, and wonderful. So this is
165:03 - looking great. Let's get to hooking this up with JavaScript next. So let's do it. So all I'm going
165:12 - to do is in here, I'm going to show you how to get your API key. So we're going to need to go to open
165:20 - AI. So just make sure to go to OpenAI, and click on API reference, I've already got it up here.
165:26 - And now under here, I'm just going to view my API keys. Now I can create a new key, sure. So all I'm
165:36 - going to do is create a new key like this. And that will get created for me. Okay, great. And you're
165:45 - just going to copy it and keep it safe. Okay, you don't want anyone stealing this because they can
165:49 - use all your free credits, or rack up money on your credit card if you have a credit card attached to
165:54 - this. And you can of course delete them if you think yours is compromised, or you just don't want
166:00 - them anymore. So make sure to do that, I'm just going to save it here. So const API key.
166:11 - Like so, make sure it's your string. And I'm just going to remind you to
166:17 - not put this on GitHub, okay, do not deploy this API key or upload on to GitHub. Okay,
166:30 - this is just for personal use, because of the issues that I set before. So there's our API key,
166:37 - we've got it. Now let's get to using it. So what I'm going to do is, well, first off, I want to
166:44 - essentially get an image if I write something in the input and click on this button, right. So
166:51 - let's pick out this button by the ID, because we're going to attach an event listener to it.
166:56 - So I'm going to use document query selector, I'm going to look for anything with the ID of submit
167:03 - icon, just like so. And let's save it as submit icon, so that we can work with it in our JavaScript.
167:12 - Now, so I'm going to get that and I'm going to use add event listener. So listen out for clicks. And
167:19 - if we click on it, I want to get images. Okay, so now let's define the function get images.
167:26 - So const get images, I'm just using a function expression, you can write function if you want.
167:33 - And what we're going to do is try something and catch the errors if it doesn't work.
167:40 - Error. And we'll just console erroring the error. So that's all I'm going to do. So if we click on
167:50 - that submit icon, so if we click on it, that's the event, we're going to call this function.
167:56 - At the moment, it's not doing much because you know, we need to write this code.
168:00 - So what we're going to do is make a request. Okay, we're going to make a request to the
168:07 - DALL-E model. And that is to API references. And then we're going to find images. Okay,
168:15 - so this is what we need is a post request to this URL. So let's grab this URL.
168:21 - And now I'm going to use the fetch API keyword to fetch from this URL, I'm going to have to pass
168:27 - through some options in which we define the method, which is going to be post as we just saw.
168:32 - So const options, method, it's going to be a post method. And next, we're going to also have
168:43 - to pass through some headers, right? Because we're going to have to pass through that API key.
168:46 - And we're going to do so. So we're going to write authorization, make sure to spell that correctly,
168:53 - authorization. And then we're going to do back ticks, as we're going to use the word
168:58 - barrow. And then also pass through that API key. So to pass through code or variables, we use the
169:04 - dollar and these two curly braces, and then we're going to pass through the API key. So that will
169:09 - come back as barrow and this string with a space. Next, we're also going to have to define the
169:14 - content type because we're working with JSON. So content type, and then we're going to do
169:20 - a location. Okay, so that's what we have done. And then we're going to have to have the body.
169:31 - So the body, well, I'm just going to pass through an object, and it's going to have a few things,
169:35 - it's going to have the prompt itself. So the string that we want to send to the AI, so like
169:40 - generate a cat or something. So we're going to put that here. Next, we're going to have n,
169:45 - which is going to be the number of images we want, I'm going to put four, and then we're going to
169:49 - have to add the size and the size of this is going to be where there's three we can choose from. If
169:54 - you look here, here are the options, only the prompt is required, right? So the make us a cat,
170:01 - these are optional, but I divide n as four, because I want four images, and the size you
170:05 - can choose from these three, I'm just going to choose the biggest, you can have all these others,
170:09 - but you know, as a default, we are going to be returned the URL to the image. And I don't really
170:14 - care about the user being shown for that. So great. So let's put in this size, as that is the
170:21 - options we need. And I'm going to have to wrap this through JSON stringify. Okay, so there's a
170:28 - method called JSON stringify. And then we're going to pass through this whole object through it so
170:31 - that it kind of JSON buys this for us. So there we go. Now the prompt, of course, I can write some
170:38 - text, but that's not very fun. I want to get the value from this input, right? So let's go ahead
170:46 - and do that. There's only one input. So I'm just going to pick it up by the element self document
170:52 - query selector. And I'm going to look for an input. Okay, and let's save this as input element,
171:01 - just like so. So now I can grab that input element. And whenever we click on it, let's hope there's
171:09 - something there, right, this input element, and we're going to get its value. Okay, so when we
171:15 - click on the little arrow, we hopefully have something in the input element. Otherwise, you
171:19 - know, you're just sending an empty string. And then we're also sending through the amount of images
171:24 - you want and the size of those images. So great. So those are the options. So we're passing through
171:30 - the URL and the options as a second parameter fetch is an async function. So we need to use the
171:36 - await keyword for this, we need to await for it to come back. And as we're using the await keyword
171:41 - in here, this also needs to be an async function. So if you want to know more information on that,
171:46 - I do have some async await tutorials on my channel. So once that comes back, we're going to save this
171:54 - whatever comes back to us under the const response. Okay, so we're getting the response. And once we
172:01 - get that response, we're going to get the JSON from it. But oh, this is also an async method,
172:06 - we're going to have to await it. So we're going to await that JSON and save the return under data.
172:13 - And for now, let's just console log data. So there we go. Let's check it out. So all I'm going to do
172:22 - is back on here, let's go pictures of blue cats in the rain. And click console log as well.
172:38 - Okay, so that is done. And we get for URL, this is great. And if I get one of these URLs,
172:45 - and put them in here, we get a picture of a blue cat in the rain. It's so sad. Wonderful.
172:57 - So this was I'm also going to just add a cursor to this. So on the actual submit icon, I'm going
173:06 - to add a cursor pointer just so it's obvious that we can click on it. So that should show up.
173:12 - Wonderful. So now let's get to using these URLs and mapping them onto images here. So let's do it.
173:21 - So I think once we get that data, right, so data exists, we're going to get the data from it,
173:31 - because if we were to look in here, I'm just going to click on this again, a blue cat. Okay,
173:37 - and let's wait for that to do its thing, we want to just see what returns back to us. So we can
173:42 - work with it. This is data, we then need to go into dot data, right to get this whole array.
173:49 - So that's why I've gone data dot data, if data exists, we're going to go into data,
173:55 - and get that whole array. And for each item in that array, which we call each item, we can call
174:01 - it wherever we want, I'm going to call an image object, as that's essentially kind of what it is,
174:06 - right, it's a object that holds just the URL. So for each of those, I'm going to actually create
174:15 - an element, I'm going to use document create element, and I'm going to create a dip. That's
174:20 - right, that's what I've done. And let's say this is image container. Because each of my images,
174:26 - I'm going to put in a container so that we can kind of crop it out if it's too big. So now let's
174:32 - grab that image container, and I'm going to give it the class list. And I'm going to create a class
174:40 - that is called image container. Okay, so that's what I'm going to do. And once we have that image
174:49 - container, we're actually going to put a another element, a a image element inside of it. So let's
174:58 - create it document create element image. And let's call this image element. And now let's grab the
175:09 - image element. And I'm going to set attributes. So JavaScript methods called set attribute to set
175:16 - the source, and then whatever the image object URL is, okay, so I'm getting the URL. And I'm
175:25 - essentially getting image object and adding source equals the image URL. And now I'm going to get
175:31 - that image container. And I'm going to append I'm going to put in that image element into it. Okay,
175:39 - and once that is done, I'm actually just going to pick out the whole image section by its class
175:47 - name. So let's do that. I'm going to do so up here, const image section equals document query
175:56 - selector. And I'm going to look for something with the class of image section. So then I'm
176:01 - going to grab that image section. And I'm going to append the image container I just stuck the
176:08 - image into. Okay, so let's have a look at what this looks like before continuing, right? So maybe
176:14 - let's get rid of this console log now. Go in here. And a orange hot dog. Let's wait for that to do
176:28 - its thing. And great. So obviously, we haven't styled it at all. I'm just going to show you
176:34 - what happened. So this image is section which at the beginning had nothing in it now has four
176:40 - elements inside of it. It has a div, we created a div for every item in that array, right, we created
176:46 - the div, and we gave it the class list out of image containers, we added the class of image
176:51 - container to it. Next, we also created an image element. And we added the attributes, so set
176:58 - attribute of source and a URL that we were mapping over. So that's what we did. And then we put that
177:04 - image element in the element with the class of image container. And then we put that image
177:09 - container inside the image section. So we did all that with JavaScript, which is pretty cool.
177:14 - So now we have our four images. And let's just start this up. So what I'm going to do is perhaps
177:22 - grab the let's grab the images section. So let's go ahead and grab that. And I'm just going to say
177:35 - that the width of this whole section is going to be 100%. But also, I'm going to set a max width,
177:40 - and it's going to be 600 pixels. So just like our input. And now I'm going to use display flex to
177:45 - initialize flex box. And I want everything to wrap over each other. So I'm going to use flex wrap wrap
177:50 - in order for it to do that. And then I'm just going to space out everything evenly with space
177:54 - between and also just pass this out by 10 pixels. Okay, great. And finally, I'm just going to do a
178:04 - few more things. So I'm going to grab the image container. So the thing that holds our image,
178:09 - I'm just going to give it a width of 40% of the parents of the image section. So each one's only
178:14 - 40%. I'm going to round off the edges with border radius is round off by 15 pixels. Let's hide any
178:23 - overflow. So if it's a square image is a square that is inside of I want to hide off those edges.
178:28 - And let's just give it a box shadow, I'm going to go with RGB 385777 as the color, and then zero x
178:37 - axis 20 pixels y axis, 30 pixels blur and minus 10 pixels. And finally, I'm going to say that any
178:45 - image lives inside of the image container. And let's just give it a width of 100%. Okay, great.
178:54 - Maybe let's change this to be 48%. I think 40 is maybe too small. And let's test it out. Just make
179:01 - sure that you know, you are using the same quote marks anywhere, just before sharing this with
179:07 - anyone before you don't need them here. So let's get rid of those. So we can do that. Just clean
179:13 - this up a little bit. And this should be small. So let's just change that also. And then just make
179:25 - sure that if you're using hex and RGB, just try to make sure that it's the same approach you use
179:33 - each time. So great, that is looking so much better. I'm just going to change these out to
179:42 - just to make everything a bit more consistent, rather than just me speed coding this through
179:50 - for you. Okay. And wonderful. And let's test it out. Let's watch we do let's do a rainbow ice cream.
180:05 - And wonderful. So I hope you've had fun building this image generator. Of course,
180:10 - this is just for demo purposes, we are going to be building the same thing. But with added
180:15 - functionalities, we're going to be building a dirty clone that will do this, but also allow us to
180:20 - upload existing images for variation in reacts with a node.js backend, as well as using the
180:25 - OpenAI node.js library next. Hi, everyone, and welcome to this tutorial from Cape Town in South
180:38 - Africa. And in this video, I can be showing you how to build a daily clone essentially. So an AI
180:44 - image generator that will take prompts and generate images for you, we're going to be generating lots
180:50 - of images based on this text prompt. And we're also going to add a another feature that allows
180:54 - us to take an existing image and upload it and then create variations of that image format. Okay,
181:00 - so really excited about this, because we're going to be using the OpenAI API for this. So you're
181:06 - interested in learning how to use it. This is the perfect tutorial for you. We're going to be
181:10 - building this in react for the front end with a node.js backend so we can keep our API key safe.
181:16 - So what are we waiting for? Of course, if you don't have the fundamentals of react and node.js
181:20 - down, please do try this out anyway, and fill in your gaps of knowledge later on. I do have a course
181:25 - that covers all of this. So check out the link in the video description below if you wish. Right,
181:30 - so first off, I'm just going to start a new project, it's going to be a react project. So all
181:34 - I'm going to do is because I'm on WebStorm, just click react. And what should we call this, I'm
181:39 - just going to call it react, Darlie clone. Okay, and I'm essentially going to use this command
181:47 - to spin up my project. So in WebStorm, I don't need to do anything, I just need to click create.
181:53 - And then that will spin up my react app. Now, if you're not using WebStorm, just go ahead,
181:58 - I'm just going to make this bigger, and go to the directory of your choice. So for me,
182:02 - it's going to be with some projects, and then do npx space. So it's two commands, create,
182:08 - react app. So just like we saw, and then whatever you want to call your projects. So you can do
182:14 - react, Darlie, clone, or whatever you want, and hit enter. And that will do exactly the same as
182:21 - what is happening here. Okay, and then you'd have to go into that project. So cd into this project
182:27 - and open it up. So that is just for those who are not using WebStorm. Okay, but I am so I'm just
182:34 - going to continue and wait for all my files and configuration to populate in this directory for me
182:40 - so that I can spin up a react project. Okay, if this is a bit too much of your new to react,
182:46 - then please do check out my full site developer course where we go into this and a lot more
182:50 - detail than I'm going into now, of course, I'm just assuming that you have the fundamentals
182:54 - down for the act. But if you don't, then no worries, please watch along anyway and fill in
182:59 - the gaps of knowledge later on. So there we go. Happy hacking, we are done. And if we look in here,
183:05 - we see all the files and folders are ready for me to use. I'm just going to clean up and delete
183:11 - the ones I don't need. So let's just go ahead and delete these because we're not going to write any
183:17 - tests. So delete that delete the logo, delete, delete, delete any way, delete, let's go ahead.
183:24 - And yes, we don't want the test file so that can go. And I'm going to delete the app CSS file,
183:29 - because there's not going to be much styling, I'm just going to do it all in one file.
183:33 - So now your industry as file, I'm just going to, again, delete this because we don't need it when
183:39 - it deletes semicolons, because I don't like using them. And there we go. So that is your index.js
183:49 - file should look like at the moment, let's get rid of everything in the index CSS. And your app.js,
183:55 - again, I'm just going to delete most of this, like, so we don't have a logo, and we don't import the
184:00 - app CSS file. I'm also going to change this to be a functional expression, just because that is my
184:06 - personal preference. So this is what your app.js file should look like. This is where your index
184:15 - CSS file should look like. And this is what your index.js file should look like. You can change
184:19 - this to be JSX files as essentially we are going to be using JSX. This is JSX. That is totally up
184:24 - to you. I'm not going to because I just want to get the project done for you. So we can learn how
184:30 - to use OpenAI, but it's up to you. So there we go. That is what we have at the moment. Let's carry
184:38 - on. So first off, I'm just going to sell this up. Let's work on actually generating images first.
184:43 - So let's do it. So what I'm going to do is just essentially build a kind of input that looks kind
184:51 - of cool. And I'm going to do this by essentially creating a section. So we're going to have two
184:58 - sections. We're going to have this to be the search section. So I'm just going to give the class name
185:03 - of search section, just like so. And let's have another section. And there's going to be to show
185:09 - all our images. So I'm just going to give this the class name of, and let's go with image section
185:17 - as our images are going to be spilled out into here. Now in the search section, I'm also going
185:23 - just to put a P element that says start with a detailed description. And then I'm going to open
185:33 - up a span element that says surprise as well if we want to be surprised with a prompt instead.
185:43 - So there we go. Or maybe let's just have surprise me, surprise me. Okay, so that's what that is
185:53 - going to say. Let's also just pick this out. So I'm going to give this the class name of
186:04 - surprise. So we can pick it out. So we can style it surprise. I'm just going to put this on a new
186:11 - line for you like so. And also, we're going to have an on click on here. But let's maybe leave
186:16 - that or perhaps let's do it. Why not? Let's have some options to be surprised with. So I'm going
186:21 - to write surprise options just like so and make an array. And then in the surprise options,
186:32 - let's have a few commands that we can pass through. So I'm just going to have three strings
186:36 - in this array. A blue ostrich eating melon. Let's have a Matisse style shark on the telephone.
186:52 - Intrigue to see what that's going to look like. A pineapple sunbathing. I'm looking at the sun now.
186:59 - So I'm going to go with sunbathing on an island because I'm in Cape Town at the moment. And I've
187:04 - got the most amazing view of the sea. So I guess that's where that has come from.
187:09 - ostrich. Hopefully haven't made any sudden mistakes. So we have now have some surprise
187:14 - options. And what I want to do is on click of this, I want to essentially bring back one of
187:21 - these so we can populate it. But let's leave that for now. I just want to carry on building this
187:26 - out a little bit more first. So there we have our p element, that whole thing right here is going
187:33 - over three lines. And after p element, I'm actually going to create a div. And it's going to hold our
187:42 - input as well as the button to generate a new one. So I'm going to give this the class name of
187:49 - input container just like so. And in my input container, I'm going to have an input,
187:58 - which is going to take up the majority of the input container. But on the right of it,
188:02 - I'm also going to have a button that's going to say generate and it's going to generate whatever
188:09 - images we want based on the prompts we give. So those are my two things that I'm going to put in
188:15 - here. Maybe let's also have a placeholder for this. So just so you know what kind of inspiration I
188:21 - guess for the prompt, let's have an impressionist oil painting of a sunflower in a purple vase dot
188:37 - dot dot. Again, I'm just going to put this on a new line because I want you to be able to read
188:42 - everything. So that is one thing that we're going to have on the input and the button again, there's
188:48 - going to be an on click on here. But other than that, I think we are now done. We just need to
188:56 - start this up a little bit. So let's go ahead and first pick out the app. First off as well,
189:01 - I'm going to also just grab the whole body. So the whole body of the app that we are building,
189:07 - let's make it a bit bigger. And I just want to get rid of any default margin and padding. So I'm
189:13 - just going to go with margin zero, padding zero, that's actually very large, we don't need it that
189:19 - big. I'm also just going to make sure the whole body takes 100% of the viewport width and 100
189:29 - of the viewport height. And then let's also give a background color, I'm going to go with a slightly
189:36 - off white. So f a f a f c is what I've chosen, you can kind of see the preview here. And I'm
189:42 - just going to make sure that all the text is also the same color. So this kind of gray. There we go.
189:48 - I'm also just going to make sure that everything so star means everything, everything in here
189:53 - is going to have the font family of Sans Serif. You can have a backup, I can't be bothered.
190:01 - But if you want, you can of course have like a few more here as backups of Sans Serif. But Sans
190:06 - Serif is a pretty stable one. I think all browsers are compatible with it. So great. So that is my
190:13 - body. One other thing that I'm going to do is actually say, so at the moment, let's start this
190:20 - up, I could just go ahead and click here. And that will run the command NPM run start for me.
190:25 - So this command right here. But if you are not in WebStorm, of course, you need to go
190:30 - into WebStorm projects again and find react-darley-clone-open-ai. Okay, so just go ahead and do that,
190:39 - making sure to spell that correctly. And once you're in here, you will do NPM run start to start
190:45 - up that project. Again, I don't have to, I'm just going to click here. And that will open that up
190:50 - for me. So there we go. It's opening up on local host 3000. And there we go. That's what it looks
190:56 - like. I'm going to inspect the page so we can view the console and see what's up. So this is what it
191:01 - looks like at the moment, our elements are here. And if you move this down, you will see in the
191:07 - body, okay, we have the root and the app is injected into there. And then we've got the search
191:12 - section, and the image section, which doesn't have anything in it at the moment. But let's start
191:16 - these up a little bit more. So I'm just going to minimize that and keep that running. And now
191:21 - let's get the search section, just like so, it's going to minimize that. And the search section,
191:29 - I'm going to make sure that the width is 100%. And then I'm going to center everything in this,
191:35 - I'm going to initialize flex box. And now I'm going to do flex direction to make sure that
191:39 - everything sucks on top of each other. So like a column, and I'm going to center everything using
191:45 - justify content center. So at the moment, that is my search section, everything is centered from the
191:53 - top to bottom. And now what I'm also going to do is get the parents of the app and make sure that
191:59 - these two are kind of not going all the way to the sides, I actually want the app to be only 90
192:07 - to be only 90 of the viewport width. So let's grab the app itself. So the element with the class of
192:15 - app, and I'm going to sign the width of 90 viewport width to it. Okay. And now just center it in the
192:26 - body. So let's grab the body again. And use display flex, justify content center. So now that should
192:36 - be centered. So great, that is what it looks like at the moment. Let's get to styling the span with
192:44 - the class of surprise me next. So once again, I'm just going to find the element with a class of
192:51 - surprise. Because that was a class we are applied to that. And I'm just going to make sure that the
192:58 - background color is a color that I have picked out previously. So there we go. I'm going to make sure
193:07 - the font is black. I'm also just going to round it off. So it looks more like a pill by giving it
193:13 - five pixels border radius. So border radius, I'm going to make the font weight a lot heavier. So
193:24 - I'm going to pass through 600. And let's give it a padding. So I'm going to pad out four pixels
193:29 - from the top and bottom, and 12 pixels from the left and right. So that is a shorthand to do that.
193:34 - So at the moment, it looks like this. And I'm also just going to apply some margin to space it out.
193:43 - So I'm just going to use margin zero on the top zero on the right, but two pixels at the bottom
193:50 - and five pixels on the left. So that is what it looks like at the moment. This is looking pretty
193:56 - good. Now let's start the input container. So what I'm going to do is let's go back in here and have
194:02 - a look at this, let's grab the input container. So there we go, the element with the class name
194:10 - of input container. And I'm going to say that I want the width of it to be 100% of the parent
194:16 - that it's in. So the search container. Let's use display flex initialize flex box. And that just
194:25 - means that anything in the input container, so the input itself on the button will be next to each
194:31 - other. And now I just want to round it off. So give the whole thing a border radius of six pixels.
194:43 - However, it does have an input inside and a button inside. If those two elements go over
194:50 - the outline of the input container, I want anything that goes over to be hidden. So I'm
194:55 - going to do overflow hidden. So that just means that as you will see here, the little corners
195:01 - have been cut off because they go outside the input container itself. So here is my input container.
195:07 - And as you will see, that has been cut off. Now let's dial the input and the generate button next.
195:12 - So let's do it. One last thing, though, is I am going to add a box shadow to here, I'm going to
195:18 - go RGB a for transparency, we're going to go 0082 as the color, and then 0.15 of opacity. And I'm
195:28 - going to apply zero on the x axis, two pixels on the y axis, four pixels blur, and then zero
195:34 - spreads. So we can just leave that. And this cool box shadow will be applied. Now let's actually
195:40 - style the input. So let's grab the input. We can say that it's an input that lives inside the
195:48 - input container just in case we want to add different inputs later. And I'm just going to
195:53 - go with border non. Let's give a padding from the top 13 pixels and from each side, 14 pixels,
196:01 - making sure this will pan in correctly. And then the box size it I want this to happen on the inside.
196:07 - So I'm going to use border box, and the font size as well, I'm going to apply is 13 pixels, or maybe
196:13 - let's make it bigger 15 pixels with the outline of the actual input being none as well. So this
196:20 - just means that let's just comment this out for now. This just means at the moment, you will see
196:25 - a blue outline, I want to get rid of that if I interact with it, which means I can outline none,
196:31 - let's just make sure we spell outline correctly for that to be applied. So now no blue line will
196:36 - be applied. Great. So that is my input. The other thing I need to change is the width of it,
196:43 - I want to be 90% of the parent, which is the input container. And let's just change the
196:48 - font weight of this to be 200 as well. So there we go. So if this is width 90, let's make the
196:54 - button that lives inside the input container a width of you guessed it a width of 10. And let's
197:02 - style it up as well. So at the moment, it will look like this, but let's style it up further. So it
197:07 - looks less horrible. So one other thing, however, is on the input itself, I'm just going to change
197:14 - the placeholder text. So if you ever want to change the placeholder text, you can. So at the moment,
197:20 - obviously, let's just click off this, it looks like that, we can go further and just change the
197:26 - color to be a bit lighter. So I've gone ahead and picked out this color like so. And let's make the
197:32 - font weights. Well, 200, I think that's already applied, but it should just look like this now.
197:39 - Wonderful. Okay, so we have the button, I'm also going to just change the border of it
197:46 - to be none. Let's change it to have a border on the left, though. So we're going to override
197:53 - that none and give it border left of one pixels, the color that's kind of the same as the color,
197:59 - well, exactly the same as the text placeholder color and make it solid. The background color of
198:07 - the button, I want it to be white. Let's me give it a color. So the text should be this color.
198:16 - Let's make it bold. So let's give it a font weight of, well, you can go bold, or you can choose an
198:21 - exact font weight that's up to you. And I'm going to make sure that we it's obvious to someone that
198:26 - we can click on it by adding cast up points. So if we go over it, my cast changes. Okay, great.
198:35 - So that is cool. And let's just change that if the button is active. So let's grab all of this
198:40 - and say that if the button is active, I just want to maybe let's just change the background color.
198:46 - So background color, and let's go with this kind of color, like so. So if we click on it,
198:52 - it just does that. But this is good so far. I'm really enjoying it. Okay, some generic stuff I'm
198:58 - going to add is perhaps let's just change all the p elements in here to have a font weight that is
199:07 - applied as like a default. So font weight, I'm going to go with 200. And let's also change the
199:13 - font size to be 14 pixels. So that is just going to be applied a little bit to all of the fonts
199:20 - as a default. Wonderful. Okay. So I think this looks looking good for now. Let's carry on.
199:34 - So I think it's now time to actually generate an image so that we can see all the images showing
199:39 - up. So let's do that next. For this, I'm actually going to build out a backend. So in here,
199:45 - I'm just going to create a new file. So on the same level as the package JSON,
199:49 - I'm going to get a file and call it server j s. And our server is essentially going to go on here.
199:55 - So there we go. That is our file, there is where it lives, just make sure that it's not in the
200:00 - source directory, it's outside. Great. So let's minimize that. Now what's going to go in my server
200:06 - j s file, well, let's set it up, we're going to have to define a port. So I'm going to go with
200:10 - port 8000. We're now going to have to require some packages. So cons express equals, and then I'm
200:17 - going to get the package express. So we're going to do require express, as well as a bunch of other
200:25 - packages. So maybe now is a good time to actually install those packages. So if you get up your
200:29 - terminal, making sure that you're in the correct project, just do NPMI, and we're going to install
200:34 - the package express, we're also going to install cause so express is going to help us with rooting
200:39 - cause is going to help us with error messages that we get from cause, we're going to use the dot env
200:45 - file. So we need the dot interview package for this in order to hide our secret variables,
200:50 - so we don't upload them onto GitHub or anything like that. And we're of course going to use the
200:55 - OpenAI package that was helped us communicate with OpenAI better, as well as a package called
201:00 - FS and Malta, which will help us deal with actually storing images into our project. But we'll come
201:07 - onto that later. For those of you who need more of an explainer into these packages, and what we're
201:11 - doing here, please do check out my course, where again, I go into this in a lot more detail, but
201:16 - just not enough time for now. And it really is the kind of fundamentals of working with express
201:20 - and Node.js. So I'm going to hit enter for that to do its thing. And essentially, you should see
201:25 - those dependencies or those packages show up here, along with a version we are using. So if your
201:30 - version is different for any reason, please go ahead and change that. Make sure that they're the
201:34 - same if you're watching this in the future as this video, because something might not work. And then
201:38 - just right rerun it. So reinstall them again, if you've already changed the package. So if I change
201:44 - the package here to three, save that file and run NPM, that is the version that will get installed.
201:48 - But of course, we don't want that we want the latest versions. So great, we have now installed
201:54 - those packages. Now I'm going to write a script in order to start our back end. So here's our
201:59 - front end, but I'm going to change it to be start front end. So I'm just going to make that a bit
202:04 - bigger for you. We're also going to have to install one more package, which is no demand, which is
202:07 - going to listen out to constant changes on our back end. So please go ahead and install that
202:11 - package, which means we can now use it to start our back end and listening out to constant changes.
202:16 - So now I'm just going to do start back end. And I'm going to do no demand and no demand
202:25 - listen up for constant changes. And I'm going to see on which file I'm going to see on the server
202:30 - JS server JS. So that's what that piece of code is done. And there's the node amount package. So
202:35 - save that file. And now I'm actually going to stop this from running, because I'm going to run my
202:40 - front end from here. So I'm going to do NPM run, stop front end this time NPM run, stop front end
202:46 - and hit enter. So now our front end is running again. And you will see that is running and I'm
202:52 - going to create a new tab making sure again that I'm in the same project and do NPM run this time
202:58 - start back end and hit enter. So there we go. Now we have our back end running and our front end
203:05 - running. So now back in here, of course, we need the package express. Next, I'm also going to
203:13 - require the package core. So let's do require and then the package of course. And now I'm going to
203:21 - get express because essentially, I've got the package and I've saved it under this cons. And
203:25 - now I need to release all that wonderfulness. So whoop, that's me releasing it. And I want you to
203:30 - store all that wonderfulness under something else I've gone with app, which means we can now use all
203:35 - of expresses wonderfulness by using app. And now app will have lots of cool methods and properties
203:40 - attached to it. One of them being app use, which will allow us to grab the cause package and once
203:46 - again release all of its wonderfulness and we can use it in this project. Okay, so hopefully I've
203:51 - explained that well. The other thing we need to do is actually use app use. And we're going to get
203:56 - express and release Jason's use the method of Jason on it. So we can actually work with Jason
204:02 - where we're sending Jason from the front of our project to the back end of our project. If you
204:06 - don't have this, you won't be able to send stuff from the front end to the back end, specifically
204:10 - Jason. So great. The other thing we need to do is require the package.env. And this will allow us
204:22 - to essentially create.env files to store our variables secretly. And we're going to have to
204:28 - do that because we're going to store our OpenAI API key. Cool. So I think that should be it for
204:36 - now. We do have a few more to use, but I think let's cross that path when it gets to it. So now
204:43 - I can, of course, use app and it will come with a cool method called listen, which allows to listen
204:49 - out to a port. So that is one thing we're going to pass through. And the second thing is a callback.
204:53 - And we're just going to console log. Your server is running on port, and then the port number.
205:01 - Okay, so let's check it out. So now if I look at my terminal, that shows up. And if I make any
205:06 - changes here, it will rerun it. So I just saved the project again, and this will rerun it. So
205:11 - that's what nodeemon does. Nodeemon essentially listens out for constant changes on our back end.
205:16 - Cool. So now that we have done that, let's get to using the OpenAI API. So all I am going to do
205:25 - is essentially go to the OpenAI documentation, let's go to developers, let's go to API reference,
205:33 - of course, making sure that you are signed in, right, so I hope you're signed in. And all I'm
205:38 - going to do is essentially, this is the we're going to create images first. So this is going
205:45 - to help us we're going to use the node JS for this. And this is the endpoint we're going to use
205:51 - to create images, we want to create 10 images. So 10 is a number we can pass through, we can pass
205:56 - through the number of images to generate, we can get up to 10. So let's go get to it. The other
206:00 - thing we're going to pass through is the size of the image has to be one of these three. And then
206:04 - as a default response, we're going to get a URL to the image, that's fine, we're not going to pass
206:08 - that through. In fact, we're just going to pass through the prompt, which is required, the amount
206:11 - of images we want to get and the size of the image. So that's what we're going to do. It's
206:15 - already kind of done for us here. So all I'm going to do is take all of this, again, make sure you
206:19 - are logged in, because we are going to have to get our API key from here. But essentially, here is
206:25 - the URL you need to be at images, create image, and then under create image, make sure you're
206:31 - no JS and literally just copy all this code. And then we're just going to write a route.
206:37 - So what's the route going to be? I think if we were going to use posts, let's say that if we go
206:42 - to forward slash images, you can go to whatever you want, right? That's up to you. We're going to
206:49 - essentially do this. Okay, great. Of course, we have to pass through a request and response that
206:59 - is just part of the syntax for using express routes. And we have to make this an async function
207:03 - as we're using the await keyword here. And as we know, to use the await keyword, we have to make
207:08 - it in an async function because we need to await for this to come back. So again, if you don't know
207:13 - much about async JavaScript that is in my course, please do check it out. I'm not going to go into
207:18 - it in too much detail here as I'm assuming you already have that knowledge. Cool. So that is my
207:25 - post route at the moment, what we are actually going to do is move all of this out so we can
207:32 - reuse it. So I'm just going to paste up here. And of course, we are going to have to have an API key,
207:38 - just going to get rid of that. You know, we just need an API key, you can name it whatever you want
207:43 - again. So at the moment, this should be the only thing that's in our express route. And I'm going
207:50 - to stick it in a try and catch. We're going to try this, and we're going to catch any errors.
207:55 - And if there are errors, we're just going to console error, the error, right? So that is looking good.
208:03 - Of course, we don't really want this, we want to send this from the front end. But that will,
208:08 - we will do that when it comes to the right time. And once we get the response, all I'm going to
208:13 - do is use res send, and then send the response data, data, I'll show you why, just console log
208:22 - the data to see what comes back. Okay, so actually, let's just console log the response, sorry. But if
208:28 - you actually look in here, you can kind of see the response. Okay, we get the response data. And this
208:36 - was the objects that comes back, and we just want to get the data, which is this array, which holds
208:41 - objects which have URLs in them. But I will show you. So cool. That is what happens when we
208:47 - essentially make a post request to localhost forward slash localhost 8000 forward slash images.
208:55 - But don't believe me, I'm going to show you. So let's do it on the front end, what I'm going to
209:04 - do is actually add an on click to here. So on click, what do I want to happen? Well, on click,
209:14 - I'm just going to get the images, right? So let's define get images. I'm going to do so up here.
209:20 - So const get images is what I am going to call this function. And once again, I'm going to use try
209:30 - and catch, I'm going to catch any errors. And we're just going to console error, the errors that come
209:36 - back. And then in here, I'm going to again, use await, because the fetch API essentially is an
209:43 - async functions, we need to await for whatever comes back to us, I'm going to save the response.
209:49 - So we're going to save the response. And we're using await keyword here, which means this needs
209:52 - to be an async function as await cannot live in a function that is not async. And like I said,
209:58 - we're going to go to HTTP localhost as we defined 8000 forward slash images. So that is the route
210:10 - that we made, we could have called it whatever, if you change it here, then of course, you need
210:15 - to change it here too. And then we're just going to pass through some options. So let's define
210:20 - those options, const options, just like so. And we're going to pass through the method, it's a post
210:26 - method, right? Because it's a post method here, we're going to send some JSON, which we're going
210:30 - to replace here. So that is why it's a post request. And along with the method, I'm just going to pass
210:37 - through the body. It's going to be an object, okay, that's going to send a message, which is
210:43 - essentially going to be the value of our input, right? So at the moment, I'm just going to go with
210:50 - blur, make sure that is inside the object, I'm going to have to rice wrap this in JSON stringify
210:57 - in order to send this whole object as JSON. Okay, great. And outside of this, we also need to pass
211:06 - through some headers just to tell this that we are working with JSON. So I'm going to do content
211:15 - type, then application JSON. So just like so. Cool. And once we get that response,
211:27 - I'm just going to get it to JSON. But oh, this is also an ASIC method. So we have to await it.
211:32 - And we have to await the response. Let's say this as maybe data. And there we go. And I'm just going
211:37 - to console log the data. So that's a lot. Let's see if it works. Of course, we aren't passing
211:43 - anything through. We're not even passing blur to the backend. Well, technically, we are. But that's
211:48 - not all we're saying to the API. Acute baby C otter is what we're sending to the API. So let's do it.
211:55 - Let's try this out. I'm just going to go back to my project, let's get up our console log. And then
212:03 - let's also not forget to get our API key. So I'm going to show you where to get that is just under
212:09 - here, we're going to view the API keys, and we can create a new one. So I've just gone ahead and
212:14 - created that, of course, this will not be accessible to you, I will delete this, I don't know, you can
212:18 - go and use mine and use all my free credits. But that is how you'd create one, okay, just go to
212:23 - account API keys and create a new key, copy it. And then I'm just going to for now, paste it
212:32 - here. Or in fact, let's just make the env file, I'm just going to create a new file, let's call
212:39 - it dot env, and add and then I'm going to define API key equals and then put that string we don't
212:47 - need to put it in quotations as the string is implied. And it just means I can now use process
212:54 - env, thanks to this piece of code right here, in order to look into my env file and find API key.
213:02 - So we find it and get its value. So that's all I've done. Let's carry on. So yes, now if I go
213:09 - ahead and click Generate, we should be able to communicate with our API. And we're just going
213:17 - to pass through acute baby C otter. And then we should get back to images for us. So if we look
213:24 - in the terminal, this is the whole response. However, if we go dot data dot data, like I said,
213:34 - we're going into the data object, let's try again, I'm just going to click Generate again,
213:39 - and let's have a look. So we're waiting for changes that will wait a little bit longer.
213:44 - And there we go. So we've got the data data. And here's our array of two URLs. And they should be
213:53 - of two cute baby otters. Let's have a look. Okay, so here is one, it is a cute baby otter. Wonderful.
214:03 - So that is working. And that's what we are sending back to the front end. So that we can use it here.
214:08 - So we can now map these two images onto here. So let's do that next. Back on the front end,
214:14 - let's actually just make this a bit smaller now, or actually just get rid of that completely.
214:20 - I'm going to use states. So let's go ahead and import the use state hook,
214:25 - import, use state from react. So we can save ourselves to the state of this component.
214:32 - So I'm going to do const, let's maybe save the, what should we call this, I guess, images, right,
214:38 - that's what they are images, set images, use state, let's start off with null. And now once we get
214:47 - back that data, so the response is data data, which is what we're console logging out here,
214:53 - so it's an array of two objects, we're going to use set images to just set that data, right.
214:59 - So now we're going to have images. And we can now get the images to show up. So all I'm going to do
215:09 - is in the image section, let's open this up. And then if essentially images exist, I want to
215:17 - map each image, we're going to have to get the index as well, because we're going to have to
215:23 - essentially map that onto a key. So let's get each image. And let's get an index,
215:28 - we're not really going to use this, I'm just going to underscore it. And then I am going to
215:34 - create an image element. Like I said, this is very simple. So you know, if you want to build this out
215:39 - and create components, please do this is just to get us used to using the OpenAI API. Let's go
215:45 - ahead and add in keys, I'm going to use index. And now I'm going to add the source and the sources
215:51 - of this is going to be the image. Well, if we look at what's coming back to us, here is my first
215:56 - item is an object. So we're going to use dot notation to get the URL. So I'm going to do
216:01 - dot URL. And as an alternative text, I'm just going to do generated image of and then I guess
216:10 - whatever my prompt was, right. So actually, what we can do is just put in the value. So the value
216:18 - is going to be my prompt, which of course, we haven't written yet. But I think that's kind of
216:22 - a cool way to do it. Right, because we need this for the visually impaired. So now, maybe let's
216:30 - just get the value. So I'm just going to say the value of the input up here to const value set
216:36 - value. And then let's do use state null to start off with however, we can set the value on the
216:45 - input change. So on change of this, I'm just going to get the event and then set value e target
216:57 - value. So that is how you would change the value of the input, we can also display it in here just
217:02 - by passing through the value. Okay, so now if we have a look, in fact, I'm just going to console
217:08 - log this out to up here console log value. Right, so at the moment value is null. But if I change
217:19 - this, it changes here. And that's what we can send over when we make a request. Cool. So we are saving
217:28 - the value and then we're just showing here, we're also going to save it here of the generated image
217:33 - once we have the images back. So now that we are mapping that on, let's have a look. So let's have
217:42 - a look here. Why is it shouting at us? Okay, so we want to essentially map those images right onto
217:50 - images. And that's what we are doing. However, let's also make sure that each image that lives
217:57 - inside the element of the images section. So let's grab the images section again.
218:06 - Okay, and down here, I'm going to grab the image section, and just make sure that it's with does
218:12 - span 100% of the parent, I'm also just going to make sure that everything wraps over each other.
218:18 - So I'm going to initialize flexbox for that. I'm also then going to make sure that it wraps over
218:23 - right. So I'm going to do flex wrap wrap. And then I'm also going to align items.
218:32 - Stretch, so they stretch out, and I'm going to justify content space between so that the images
218:40 - kind of stretch. Okay, but of course, we won't really be able to see anything until we get the
218:45 - images. So let's just say that any image that lives inside the image section is going to let's
218:51 - give each one a margin of one pixel. So there's space out from each other. Let's also give them
218:55 - a min width of 250 pixels, but then also a max width of let's say 33% of the parent. I'm also
219:03 - going to use flex grow to make sure that they stretch out. Okay, cool. Well, I'm also going to
219:10 - do so at the moment, we really won't see much. Let's maybe generate this again and wait for those
219:16 - little orders to come back. So let's wait in there will be hard to see with two. So maybe let's just
219:21 - change the amount that come back. Sorry about that. Let's just change it to 10 baby orders.
219:27 - And let's try again. So generate. Okay, and now we're gonna have 10. We're going to see what it
219:32 - looks like when there's lots of images populating our app. Because it does take a while for this
219:37 - API to do its thing, we are working with images as well. So it will take some time in order for
219:43 - that to show up. Okay. So there we go. Here's our 10 images. And here's our 10 baby orders. How cute
219:52 - is that? We should probably space it out from the top. But we will deal with that later. I
219:58 - just want to show you that this is what it looks like. And then we can even add media queries. So
220:02 - I can add a media query. Let's go back here. And I'm just going to do at media max with let's go
220:12 - with 556 pixels. And then I'm just going to say that any image that lives inside the image section
220:20 - is actually just going to have a max width of 100%. So it's going to essentially take up the whole
220:26 - space if I get to a certain point. Cool, right? Okay. What else do I want to do? Maybe let's also
220:35 - get the search section and assign it a height. I don't know, 300 pixels, whatever you think will
220:43 - look nice. So I think that looks okay. We can make it smaller. Like honestly, this is just styling
220:50 - that you can get way too wrapped up in when we just want to learn how to use the OpenAI. But
220:55 - you know, I think that looks better. So now let's actually get to passing the value through so we
220:59 - don't just get authors. I'm going to show you how to do that next. So let's go back to the app.
221:04 - And we are setting the value here, right? So now all I'm going to do is get that value and replace
221:09 - it with blur. So there we go, making sure that is code. And that now that means that's going to be
221:15 - passed over with our option. So on the server, that gets sent over. And it's part of the body,
221:22 - right? So if we look at here, it's going to be part of the request body message. And this is an
221:27 - object. So we use dot notation. So I can just go with using request body message to get whatever
221:38 - that value is. So this right here, make sure to wrap it in Jason's string of five and make sure
221:44 - that is here in order for that to work. But essentially, now let's check this out. So let's
221:50 - go back here. What should we do this time? I'm just gonna refresh this for now. Let's go with
221:56 - or let's do surprise me, right? Let's hook up the surprise me. So let's go back here. And on
222:05 - click of the surprise me so on click, I'm going to write a function called surprise me. And let's
222:14 - define it. So let's grab this constant surprise me equals and then all I'm going to do is essentially
222:23 - set the value. So set value to be well, I'm going to get the surprise me options or let's maybe
222:34 - yeah, let's get the constant random value from the array. I'm going to get the surprise options.
222:42 - And I'm going to pass through into them to get back a random number from zero to two, as there
222:48 - is index 01 and two. And to do that, I'm going to essentially use math, run, done and call it but
222:58 - multiply it by the surprise options. length, okay, and then round that number down because that will
223:06 - give this gives me back a random number from zero to just under one. And if I multiply it by the
223:11 - length, it would be from zero to just under three. But of course, regions exist, we want to round it
223:16 - down to two. So that's why I pass it through math. Okay, so that is how you would get a random value
223:26 - and we just pass it through into set value. So now if I click on here, how cool is that let's go with
223:36 - a Matisse style shark on a telephone and generate and wait for that to do its thing.
223:41 - And we get our 10 sharks. This is cool. And here they are. Here are 10 randomly generated sharks.
223:49 - I love them. They're pretty awesome. Of course, it will take a while for the images to download.
223:55 - But I mean, this is like super arty. And I'm really into it. Of course, we can write our own thing.
224:01 - So we can do a cool ice cream and generates. You will see how that value is updating every time we
224:12 - type it, but that value will only be sent once we hit to generate as well. So that is something that
224:17 - you should know. Okay, and then that's replacing the images here of cool ice creams. Okay, of course,
224:26 - we have to wait a little bit for that to completely be replaced. One thing we can do is when we click
224:34 - the surprise me, we actually set the images to be null. First, as well as I think when we get the
224:43 - images again, let's just reset that. And actually also, let's say that if value equals null, right,
224:51 - so if we just click it, well, there's no value, then we're going to set an error message. And then
224:56 - set an error message. And that error message is going to say error must have a search term, right?
225:06 - Okay, and I'm going to return out of this because we don't want to do anything else. So let's set
225:10 - error messages, const, error, set, error, use state, we're going to have a null to start,
225:18 - I'm going to set the error. And if we do have an error, I'm just going to display it down here,
225:23 - I'm actually just going to maybe display it, I think, let's go with just outside of the input
225:30 - container down here, I'm just going to show the error if one exists. So maybe let's wrap it if
225:35 - error exists, then we show the p element with the error. So no p element exists unless there's an
225:40 - error present. Okay, so now let's check it out. A cool cat and generate and wait for that to do its
225:50 - thing. And we get some cool hats. And if we click surprise me, it'll clear those images so that we
225:57 - can start fresh, and we can generate our surprise me prompt. Okay. And again, same if we want to
226:04 - remove this, some more cool hats, and generate, it will clear those images so we can start fresh.
226:13 - So that is a much better approach. Right. So generate 10 images, they look pretty cool.
226:20 - I think now I'm really excited to show you this next part as this. Well, this took me a while to
226:24 - figure out. So I'm excited to share my result with you. And it's all about generating variations of
226:30 - an image that already exists. So this was interesting, because we're gonna have to figure
226:34 - out how to upload existing images onto here, not just write prompts, and use the images,
226:40 - create image variation endpoint for this part. So let's do it. So first off, I'm just going to go
226:47 - ahead and add an input that will allow us to do this. So I'm going to show you how I would
226:53 - personally solve this part, I would. So this is the input, we don't want to do it in the input
226:59 - container, let's perhaps do it outside of the input container. So what I'm going to do is actually
227:05 - create a p element outside of the input container. So just make sure that is finished here. And here,
227:11 - what I'm going to do, maybe let's just format this a little bit better while we are at it. Okay,
227:17 - so there we go. I'm going to use a p element. And I'm just going to write, or let's actually
227:26 - also give this a class name. So we can pick it out, I'm going to give the class name of extra info.
227:32 - So just like that, we'll have all and then I'm going to actually create a span. But this span,
227:43 - so maybe let's put this on a new line, this span is going to hold a bunch of stuff,
227:48 - it's going to hold a label. Okay, and the label is going to say upload an image.
227:53 - Okay, it's all part of one sentence. So that's going to say upload an image and this label is for
228:05 - so let's use HTML for this is for something with the idea of files, it's going to be an input.
228:16 - Okay, with the ID of file, so that's how you would link them up. So if we click on the label,
228:21 - it will affect this input, I'm going to show you what I mean. And here, this is going to have
228:27 - files, but it's also going to have an accept. And it's going to accept all types of image.
228:32 - So I'm just going to go with image like this. And it's going to take the type of file. So
228:40 - at the moment, if I look at this, it will look like that, or upload an image, but I want to hide
228:50 - this part. Okay, and I want what I want to happen is if I click on upload an image, then it chooses
228:56 - an image for me without actually showing this part. So let's add hidden to this to hide that.
229:06 - Okay. And so all upload an image, and then I'm just going to put some more text.
229:13 - And that is going to say to edit. Okay, so there we go. Maybe it just needs a space to edit here.
229:24 - So I'm going to put a space there. Put a space there, ID match, otherwise that will not work.
229:32 - And it just means that now if I go ahead and click on here, that should open that up. Okay.
229:39 - And now what I'm going to do is actually grab this class of extra info. And I'm just going
229:46 - to make sure that the text is centered. So extra info. And then I'm going to go with text align
229:52 - center. So that we go that is now done. However, why is this not centered? Let's have a look back
229:59 - here. Class name. And wonderful. So now we can upload new images. This is great. Part one is
230:09 - kind of done. Now let's move on. So I'm going to go back in here. And what do I want to do?
230:17 - Well, if we click on this, I essentially, so if we click on this whole thing,
230:22 - I want a modal to pop up and a bunch of other stuff. So I'm going to do on change of this
230:27 - input. So if we select something from the files, make sure to type file on this input in order for
230:33 - this input to look the way it does, I'm going to upload an image so we can view it.
230:37 - So let's define upload image. So I'm going to maybe do so here. So let's get rid of that
230:44 - const upload image equals, and then we're going to get whatever, we're going to hop
230:49 - off to E, because we're going to get the E target file. So the files we uploaded.
230:54 - So if I just console log E target files, I'm going to show you what happens. So back in here,
231:05 - let's upload this test image. Okay, this is what comes back, and we just want to get that first
231:12 - item. So this, it's a file called test dot png. So there it is. So we could just go into this and
231:21 - get the first item from it, because we just want one. So there will always just be one because we
231:26 - chose to get a singular file. So there we go. So now that we have that file, what I want to do is
231:34 - create a form. So we can send over the whole form. So I'm going to do const form data equals and I'm
231:39 - going to create a new form data constructor. So now to append to this existing form data,
231:47 - I'm going to use append. And we are going to essentially append a file, so the property file,
231:54 - along with the E target file. So we're sending that over with the form data, we need to send
231:58 - that over the form data in order for this to work. You can of course send other stuff too,
232:03 - that is totally up to you. Then what I'm going to do is set the selected image. So set selected
232:09 - image. And I'm just going to pass through this so we know what the selected image is. And of course,
232:17 - we need to save that to state. So let's do const selected image, set selected image. And then we're
232:28 - going to use state no, because it's going to be nothing at first, we are just essentially storing
232:34 - whatever image we select to this component. Okay, great. And now all I'm going to do is just send
232:43 - that image to my back end. So what I'm going to do is use try and catch, catch any errors.
232:52 - And I'm going to use the await fetch. So we use make this an async function, and we're going to
233:03 - define a root on the back end. So once again, let's do app, it's going to be a post. And we're
233:12 - going to post to let's go to upload. And essentially, what's going to happen here is I'm literally just
233:17 - going to send this image here and save it to my server. So it's essentially going to show up here,
233:25 - okay, or we can put it in the public folder, we can put it wherever that is up to us.
233:31 - So let's also pass through the request and the response.
233:37 - And what else do we need to pass through from the front end? So yes, let's go ahead and use
233:45 - this. However, we have to find this endpoint as upload this time. And let's also pass through the
233:53 - options. So just as above, and let's define our options. So whoops, this is meant to be up here,
233:59 - and we're just going to console error error. So let's define our options as I said, const
234:06 - options equals and it's going to be an object. Of course, we have to wait for this response.
234:10 - And the options that we're going to pass through where we're going to pass through the methods,
234:15 - which is a post method, we're also going to pass through the body, which is just going to be our
234:20 - form data that we have and we appended the file to. And then I'm just going to console log
234:30 - the response so we can see it. But of course, we need to get that response first and get it to Jason.
234:35 - Call it and await this. And let's save this as data. Okay, so then we just console log the data
234:47 - again. Cool. So let's see if we can send that image to the server. And on the server, there's
234:55 - a few things we need to do, we're actually going to now have to require those packages. So let's
235:01 - move that up here. And then up here, I'm going to const FS require FS. We're also going to require
235:13 - a package called Malta, which is going to help us save those files. So require Malta. So once we
235:21 - have those two, we are now ready to start essentially adding files to our repository by
235:27 - sending them to our backend. So all I'm going to do, I did get this code from the documentation.
235:32 - So we're going to use upload and upload, we're going to define up here. So maybe actually,
235:38 - let's define it here where we define a bunch of other stuff. I'm just going to make this smaller
235:45 - for now. I'm going to do const upload equals, I'm going to use a Malta, and we're just going to pass
235:54 - through storage, storage and storage, we're going to also define, and we're going to be working with
236:03 - single files, right? So we'll do file single. Okay, so let's define storage now, Quants storage,
236:09 - and here's where we're going to essentially define where we want to store those files. So
236:13 - Malta disk storage, we're going to open this up on a possible object, I'm going to define the
236:18 - destination. The destination here is the syntax again. So again, I've just taken this from the
236:24 - documentation. I'm going to do CB, and then we're going to save it to the public directory in this
236:35 - project. So they're going to be saved in here. Okay, so that's what I've written. If you want
236:40 - to just be saved, you know, like in the root of your project, you could do this, right? So that
236:46 - is what you can do as well. So I've just defined where I want to save these files. Next, I'm also
236:53 - going to define how I want the file name to look. So again, I could do request file CB. And now I'm
237:03 - going to do CB now, and then I'm just going to use today's date and call it so I get today's date,
237:11 - plus I'm going to use this little line, this dash plus the original file name. So file original
237:21 - name. Okay, because if we console log file here, you will see the whole file object. So console log
237:28 - file, I'm going to show you what this looks like. Let's go ahead and just put in a string of file
237:33 - as well. So you can see a book better. So I believe that's it. Here are the things you will need. So
237:42 - those two right here. So now we can use upload that we defined up there. And again, request
237:50 - response and this policy errors. And this code I literally just got from the documentation.
237:59 - So if there's an error, just send back the errors. Otherwise, I'm just going to console log the
238:05 - request file. Okay, great. So now let's check it out. I'm going to go back here. And let's upload
238:15 - an image, I'm going to just go with this test or taste. Okay, so that's the file, and that should
238:21 - have triggered my request. So if I look in here, and let's look at the terminal. Okay, I believe
238:30 - that should have worked, I can see that we here's the date, right? And here's the dash. And here's
238:36 - my original file name. So that as well, that's the whole file. And essentially, I did file dot
238:41 - original name to get the original name, right? So that's what we did. File original name. So I've
238:49 - console log the file, I've looked in the object and got the file name, and appended it with the
238:54 - date now to create, let's look in public, this file, right here. So how cool is that? We've just
239:03 - saved a PNG file into our project. Okay, really cool. And like I said, if I just did this, and
239:11 - then let's try again. So let's upload maybe let's just pick the same file, taste.com.png. And now
239:19 - if we look in here, and let's just wait a bit, you will see that file is now in here, not in the
239:25 - public directory. But I do want them to be saved in the public directory. So I'm just going to put
239:29 - that back. So I'm just going to delete these for now. So we can carry on. But essentially, we are
239:35 - saving files into our project. How cool is that? Wonderful. So something I didn't say, and this is
239:43 - kind of important is that the images must be a certain size. So the three sides that we saw at
239:48 - the beginning, one was 256 by 256. So make sure your image is that size in order for it to work
239:54 - correctly, or the other two that you saw. Now, of course, this is a very basic tutorial on how to
240:00 - use the OpenAI API, it would be cool for you to be able to crop images in here, but it's outside
240:05 - of the scope of this project. So just make sure to upload the correct files if you want to build
240:10 - this out correctly. But we can view a few stoppers. So for example, let's put our modal that only
240:15 - allows you to upload certain size images next. So again, I just did that. And here is my image,
240:22 - it's got the date, as well as what I call the image, which is 256 by 256 PNG, which is the size
240:28 - of that image. So we are saving these images back here, the next thing we need to do is actually send
240:33 - them over to our back end. But before we do that, I actually want to build a modal first, so we can
240:39 - see the image and its preview. So what I'm going to do is in the source directory, I'm going to
240:44 - create a new directory called components. And we're going to build a modal. So components. And in
240:53 - here, I'm going to create a new file, I'm going to call it modal j s. And we are just going to build
240:58 - out that component. Okay, so we're going to add that. So let's do it, I'm going to do const modal
241:06 - equals. And then we're going to return some JSX. So at the moment, it's going to be a div,
241:13 - I'm going to export default modal. So just like that. Okay. And what do we want our modal to look
241:24 - like? Well, I'm just going to give this the class name modal, like so. And in here, I'm going to
241:40 - have a div. And we're going to actually use state in order to open and close the modal. So let's
241:46 - import use state from react, because we're going to have to save the I guess, I guess a few things.
241:59 - Well, we're gonna have to save any error messages. So let's just do error, set error, these errors
242:04 - are contained to this component, unlike on the app, use state, we're going to start off with
242:12 - null. So just like so. And actually, do we want to control? Well, I'd actually like to
242:20 - control a few more things based on whether the modal is open or not on the app. So we're going
242:24 - to pass through the set modal from the app itself. So let's go ahead and do that const modal open
242:35 - set modal open, use state, I'm going to start off with being false, of course, and this is not open.
242:44 - So cool, I think maybe let's start off with just importing this modal. So import modal from
242:55 - components modal. So now I can just use that modal down here. And where shall we put it? I
243:02 - guess it doesn't really matter too much, because we're going to overlay it with an overlay. So by
243:08 - that, I mean, I'm going to create a div. And in here, I'm just going to put in the modal like so,
243:15 - and I'm going to give this the class name of overlay. But I only want to show this if open
243:22 - modal is true. So we're going to wrap all of that in open modal. So sorry, modal open, it was not
243:32 - open modal. So modal open, and I'm just going to have this to be true for now so we can see what
243:39 - it looks like. So at the moment, of course, it doesn't look like anything because we haven't
243:44 - solved up the modal. So let's do that next. So I'm going to go back in here. And what else do we
243:53 - want in our modal? Well, I'm just going to have a div that says x so we can close it by the x.
243:59 - And on a click of this, I essentially just want to close this modal. So I'm going to close modal,
244:05 - I'm going to define the function here. So let's do const close modal equals one of few things to
244:14 - happen, though. And what I want to happen is I want to use set modal to be false. So set modal
244:23 - open, sorry, to be false, right, which means we need to pass that through. So let's go back here,
244:32 - I'm going to use set modal open, I'm going to pass it through into the modal so we can use it,
244:38 - which means we need to destructure that prop here, destructure it, so we can use it there.
244:43 - One other thing I want to do is set selected image to null as well, right, because we have,
244:50 - if we have a selected image, we don't want any more if we close the modal. So that is something
244:55 - else that we're going to have to pass through into the modal here. So set selected image,
245:05 - and then let's destructure it so we can use it there. Great. So that is what happens if we click
245:11 - on the x. Next, I'm going to have a div. And this is going to be for my image. So I'm just going to
245:18 - use the image element. And let's give this the class name of image container, just like so. Okay.
245:31 - And the image container is going to hold our image, which should only really show if a selected
245:37 - image exists. So selected image exists, then we want to show this, right, and as the source of
245:44 - this, we want to get that selected image and show it. However, so selected image, not set selected
245:53 - image, there's a few things we need to do. First off, we need to pass this through into the modal,
245:57 - right? So whatever we set here as a selected image, we are passing through into the modal.
246:02 - And now we need to destructure it here. So actually, if I console log what this looks like,
246:08 - our selected image, and what is wrong here, so we need to wrap this, okay, so selected image exists,
246:17 - then we show the image with a selected image, as well as some alternative text. Let's go with
246:24 - uploaded image. However, it will not work because so let's go ahead and do this. Let's go with this
246:34 - image right here open. Our selected image will look like this, because at the moment, it looks
246:40 - like an object like this, we need to pass it through URL, I'm going to show you URL, create object
246:49 - URL, and then pass that through. Okay, so we're passing that whole thing into here. So now we can
246:55 - see it. And great. So once again, upload an image. And then here's our modal. Let's also put in a
247:04 - button so that we can generate from that selected image. So after the image container, I'm going to
247:12 - just put a button that says, generate, okay. And let's sell this up. So first off, what I'm going to
247:26 - do is just grab the well, actually, let's grab the overlay first. So let's grab the class name of
247:33 - overlay, just down here. And I'm going to position this. So I'm going to give this position
247:40 - absolute top zero, left zero, I'm going to make it take up the whole width. So 100, you put width
247:48 - and the whole height, so 100, you put height, and give it a background color, a background color
247:54 - that is transparent, so we can still kind of see everything behind it. So let's go with black and
247:58 - 0.150 paces. So that is what it's going to look like. I'm also going to make sure we can't scroll
248:04 - by giving overflow hidden. Okay, so there we go. That is what it looks like at the moment. And we
248:11 - can't scroll thanks to overflow hidden. Next, I'm just going to center everything. So first off,
248:18 - I think let's initialize flexbox. Now I'm going to use justify content center, and align items
248:27 - center as well. Okay, so there we go. And the last thing I'm going to do just make sure it's in front
248:32 - of everything by giving it zen index of 10. Okay, just making sure that it's 100% in front of
248:37 - everything. So that's what it looks like. And if we close the here, it shuts the modal. Let's try
248:42 - again, let's open up a new image. Okay, that does not work. I wonder why let's refresh, close that.
248:51 - We are overriding this. So let's make this back to be false again. So we start off with the modal
248:58 - being closed. So let's go back to here and scroll down. As soon as we save that form data, we're
249:06 - also going to set modal open to be true. Okay, great. So let's try again. Upload. Amazing. And
249:18 - now let's start this up a little bit further. So all I'm going to do is now back on the index CSS
249:25 - after the overlay, I'm going to get to the element with a class of modal. I'm going to position
249:32 - it relative. I'm also going to make sure that the z index is the highest. So let's just go with 100
249:38 - to be safe. Let's make the background color white. And now I'm going to give a padding of 10 pixels,
249:45 - a border radius to round it off of 10 pixels. Let's go with display flex. And I'm going to go with
249:56 - flex direction column to make sure that everything's stacked over each other. So at the moment, it
250:04 - should like this. And now let's style the button too. So let's grab the button that lives inside
250:12 - the button that lives inside the module. And I'm just going to make sure that the width is 100%.
250:23 - The padding is 20 pixels and border is going to be none. And now if we actually make it active,
250:31 - so if we click on it, I'm just going to change the background color. So let's go background color,
250:39 - and then f a f a f c. So that is much more, I think what it should look like I'm happier with
250:49 - that. Cool. I'm just going to change the x text icon. So choose one of these instead,
250:57 - just to make it look that little bit cooler. So let's go with maybe this one instead.
251:04 - And on the model, I'm just going to replace that like so. Okay, so that is better. Okay,
251:13 - so let's try again. Great. Let's also maybe make this background color white as well. So I'm happy
251:28 - with how this is looking, I'm just going to maybe go with cursor pointer for this to make obvious
251:36 - that we can click on this. The next thing we want to do is generate images based on this one, right?
251:42 - However, we want to set some error messages just to let us know that this image is not the right
251:48 - size. So let's do that next. So on the model itself, we are going to save the errors. And when do we
251:53 - want an error to happen? Well, I think let's also have another button here, as we want to check the
252:00 - size first. So when we click generate, we don't actually want to generate, we're going to add our
252:10 - click to check size. Okay, so let's define this check size, const check size equals. And then I
252:22 - am going to essentially use ref. So let's import use ref from react. So this means I need to
252:32 - initialize it const ref equals use ref. And then I'm just going to pass through null. And we're
252:38 - going to do so on the image itself. So ref equals ref, this is essentially the component that we
252:44 - care about, because we're going to get its size. Okay. And to do that, when we click check size,
252:50 - we're essentially going to say that if ref current width, we're getting its current width, and if it
252:57 - equals 256, and if ref current height equals 256, then we're fine, then we're good to go, then we can
253:10 - essentially write a function to generate variations. Okay, we're good to go on that. Otherwise,
253:18 - if it is not, well, then we've got an error. And I'm just going to use set error to set the error of
253:24 - error, choose 256 by 256 image just to be safe. Okay, so now we're setting an error and essentially
253:34 - when we want to display that error, right? So let's say that if error exists, then we want to
253:41 - or actually, let's have some text here anyway. So I'm just going to have as a default some text that
253:46 - says image must be 256 by 256. However, if an error exists, I want to override that. So if
253:59 - error exists, show that otherwise show that string. Okay, cool. Make sure it's in curly braces so it
254:11 - gets picked up as code. Okay, so now if there is essentially no error, then show this button,
254:20 - whether if there is an error, then we show this button instead. So and and that says, close this
254:35 - and try again. Okay, so and then on a click of this, we can just you guessed it close the modal.
254:42 - So we're reusing that function close modal. Wonderful. So now let's try upload something
254:50 - else, right? So upload an image, we're gonna go with this super long one. It's very large.
254:56 - Maybe let's actually control how these images are viewed, right? So I'm also going to say that the
255:07 - image container that holds our image is going to have a height of 256 pixels. Put that inside
255:17 - and a width of 256 pixels. And then I'm also just going to do overflow hidden. So it's really obvious
255:27 - that the image is too big, because it will look like this or look or cut off. And if I hit generate,
255:32 - it says error, choose 256 by 256 image, close this and try again. How cool is that? I'm pretty
255:39 - proud with what I built here. And then we can choose an image that is 256 by 256 pixels,
255:44 - and we can generate. Okay, so cool. Let's actually work on writing the generate function next.
255:52 - So we've defined the generate function here generate variations. However,
255:58 - we haven't actually done it here. So let's go ahead and do that. So for this, what I'm going to do
256:05 - is go back to the server and define a root. So let's do it. So as we saw that file console request
256:12 - file is being saved here, this is the whole file essentially, right, that's how we're getting
256:18 - the file name from it, we need to get its path. Okay, so I'm going to get its dot path. And I'm
256:26 - actually going to save this as something. So I'm going to save it up here, maybe, yep, sure.
256:33 - So let's go let file path at the moment would be nothing. But as soon as we have a value for it,
256:38 - so as soon as this runs, I want to get request file path and save it to file path, so that we
256:44 - can use it in our next route, which is going to be a post request. And let's define this,
256:50 - let's call this variations, you can call it whatever you want. And we're going to pass
256:56 - through the request and the response. And this, again, let's have a look at OpenAI for this.
257:02 - So let's look at the documentation. Well, we're obviously going to make a request to this URL.
257:09 - So we can just take all of this or copy it, make sure you'll know JS and copy all of this,
257:13 - this will create an image variation. Let's go back in here. And let's go ahead and use try and
257:20 - catch again. So try, I'm gonna paste that in like so we don't need this as we've already done that.
257:27 - And we've already defined OpenAI. So we just need the response, we have the await keyword
257:32 - there. So we need to make this an async function. And now let's catch any errors. So try, and then
257:38 - catch error. Console error, the error. Okay, so that's what we have done. And now we can get that
257:53 - response. And we're just going to send res send response, and the object so response data comes
258:03 - back as this, so we need to do dot data again. So response data data is what we need to write.
258:10 - Great. However, we know that we don't want to pass through this string, what we want to pass
258:18 - through is the file path that we saved up here, right? So the file path that we got here,
258:25 - when we upload the images, we got the file path was essentially the file path to any one of these
258:29 - files, the last one we uploaded. And then we're just going to pass that through like so. Okay,
258:37 - so wonderful. And we are hard coding this, let's get back 10 images all at this size. And once
258:44 - that comes back to us, so back in here, let's get the response. So let's actually
259:01 - hook this up to our front end next. So const generate variations equals
259:09 - and then all I'm going to do is try and catch again. So try and let's catch any errors. So catch
259:24 - error, console error, error. And we are going to try what we're going to use await fetch.
259:33 - And we're going to go to localhost 8004 slash variations this time, right? So make sure that
259:40 - is in a string. And then we're going to also pass through the options, which we are going to define.
259:46 - So const options, we know this is a post request. So options, method,
259:55 - it's a string of post. And we actually don't need anything else. So let's just get the response of
260:04 - this response. And then we're going to get the response. Don't forget to make this an async
260:12 - function. Let's get the response gets JSON. And this is, oh, again, async. So we use the await
260:20 - keyword. And let's get its data. And then I'm just going to essentially console log the data so we
260:25 - can see it. But I know it's going to be an array of images. So I can just set images to be the data.
260:32 - And once we are done, I'm just going to set error as null if there are any errors. And I'm also going
260:39 - to set modal open as false. So it shuts the modal. Okay, great. So when do we want to generate these
260:46 - variations? Well, we want to generate them after we check the size, right? So I'm going to go back
260:52 - to the modal here, I'm going to pass through generate variations, just like so, you know,
260:59 - let's maybe put these on a new line. So you can see everything that we're passing through into
261:04 - this wonderful modal. So generate a very shuns, I've obviously felt it generate very shuns.
261:15 - Okay, so that's better. And now on the modal, let's just copy it so I don't make any spelling
261:20 - mistakes. Let's pass it through here as well. And now let's essentially call it. Okay, before we
261:29 - move on, I am just going to also just set the images to null. So we can start fresh. And if
261:37 - selected image equals null, okay, when we try to generate the images, I just want a certain
261:44 - error message and just say that no image has been selected so that we can't generate anything,
261:50 - you can pass through whatever you want. This is the string that I am choosing to pass through
261:55 - so that it shows up. And finally, we're just going to close the modal. So I'm just going to use set
262:00 - modal and pass through false and return out of this so that we don't go to the next thing.
262:04 - And lastly, just so that we don't have any issues when uploading an image again, so the same image
262:11 - again, I'm just going to clear the files we selected. And we can do so. So right after we
262:17 - set the selected image, I'm just going to get a target value and set it to null. Great. So let's
262:26 - give it a whirl. So let's go back here, upload an image. Let's upload this image that meets the
262:35 - requirements and generate. And now let's wait. So once I've done this thing, it should shut this
262:41 - modal, it should get rid of any error messages. And it should show 10 variations of this image
262:46 - that I uploaded, which is pretty awesome. Let's be honest. And there we go. We can see those 10
262:53 - images and those 10 URLs and 10 variations of me. How cool is that? I mean, some of them are like
263:00 - super scary, but you know, at least we have managed to do it. I've really enjoyed showing
263:07 - you this tutorial. It was really fun to make. It's been the funnest one I made in a while.
263:11 - So I hope you had fun. Thanks so much again. And don't forget to clean up your code, get rid of,
263:16 - you know, like we use RGB and hex. And we also used variations of different quote marks,
263:21 - and we haven't formatted the code. So please go ahead and do that. And take this project,
263:26 - make your own your style up. There's so much to do. It is yours. And then we can clear again.
263:42 - Okay, everyone, in this project, we're going to be using ChatGPT for to the GPT for model,
263:49 - in order to create this SQL generator. So this is going to be cool, we're going to be able to save
263:54 - our messages up here in the chat. And then we're going to display the final outcome. So the SQL
264:01 - query, we asked it to write in the little code section below. So that's what we're going to be
264:07 - doing. As you can see here, we can scroll through all our previous chats. And we can also clear the
264:12 - chat. Okay, so I hope you're excited. We're going to be building this in TypeScript for the front
264:17 - end and node.js for the back end, as well as the OpenAI API using the chat completions endpoint.
264:27 - Okay, so let's do it. Let's create a SQL generator in TypeScript with a node.js backend.
264:35 - So what I'm going to do is select a new project. And this is going to be a TypeScript project.
264:41 - So I can go ahead and click here and make it a TypeScript project by selecting this right here.
264:47 - So that's all I'm going to do. And let's go ahead and call this TypeScript SQL generator and hit
264:56 - create. Okay, so that will essentially spin up a TypeScript project for me. So let's just go
265:04 - ahead and wait for that to do its thing. If you're not using WebStorm, all you'd have to do
265:09 - is get your terminal up, find a directory you want to work in. So I'm going to go into some projects
265:16 - and use npx create react app, then whatever you want to call your app, and then dash dash template
265:25 - TypeScript. So that's all you'd have to do and hit enter. Well, I'm not going to do that because
265:28 - I've done it this way. So there we go. Happy hacking. And now you will see all the files that
265:35 - I need. We've got the TS config, Jason, or the package Jason. And then we've got the source
265:40 - directory. I'm just going to go ahead and delete what we don't want. So we're not going to write
265:44 - any tests or anything like that. So I'm going to delete these two. So this app CSS and the test
265:50 - file, then I'm going to also delete the logo. So let's go ahead and delete that. So just go
265:59 - ahead and click Delete. And then we're going to also delete the report of vitals and setup tests,
266:04 - as we're not going to need those either. So delete those two. There we go. Okay, great.
266:11 - So let's now have a look in my app TSX. I'm just going to pretty much delete everything so that
266:20 - we can start fresh. So there we go. Just delete all that. We don't really even need to import
266:26 - react. Let's change this to a functional expression just because that is my preference. So just like
266:33 - so. And then I'm just going to change the class name. So an export default, that component. Great,
266:41 - I'm going to delete everything from the CSS file. And in here, I'm just going to delete anything to
266:46 - do with testing or reporting with vitals. And I'm also going to delete the semicolon just because I
266:52 - don't really like using them. Okay, great. So this is what my index TSX will look like. This is what
267:02 - my app TSX will look like. And this is what my index CSS will look like. The next thing I'm going
267:08 - to do is actually fast off, let's just create the UI fast, this shouldn't take too long, I'm just
267:14 - going to create a few components. So I'm going to create a directory to keep all my components in.
267:22 - And in here, the components I'm going to create are going to be a code display.
267:30 - Okay, so we can see our code. Don't forget to use the extension TSX, as this is going to be type
267:38 - script file with JSX. And then I'm also going to create a messages display, they'll hold all our
267:46 - messages and messages, plural dot TSX, again, because we're going to have JSX in here. So just
267:53 - add that. And then I'm going to create a new file, I'm going to do this going to be for one individual
267:58 - message, the message display dot TSX. Great. So there we go, we've got three components. And I'm
268:06 - literally just going to copy this. And I'm going to paste that in here like so. So into the code
268:11 - display, let's change this to say code display. And then let's export that code display. And I'm
268:18 - just going to change this to say code display. Okay, let's do the same for messages displacement,
268:24 - copy all that click on messages display. And this time, I'm just going to change this to be messages,
268:29 - plural, messages, plural. So that's what the component is called. And I'm going to call this
268:35 - message just plural display. And finally, for the message display, where this is easy, I'm just going
268:41 - to make it not plural. So just singular on those three things. Great. So we've just created our
268:48 - three components, let's go ahead and import them into the project. So on the app. Well, I'm going
268:58 - to have to have a messages display first, because we want all the messages to display up here. So
269:04 - that has been imported for me automatically. So thank you very much for going into the components
269:10 - directory and getting the messages display component, we're going to pass stuff through
269:14 - into here. But for now, let's move on. I'm also going to have an input, okay, because we're going
269:18 - to have to want to, you know, send queries over. So there is my input, it's going to take a value,
269:25 - and it's going to have an on change. But we'll do that when the time comes. Next, I'm just going
269:30 - to have the code display. So there we go. Let's see if that's automatically inserted. And it is
269:36 - great. And one last thing I'm going to have is just a div. And this is going to be for our buttons.
269:42 - So I'm going to give this the class name of button container. So we can hold up buttons,
269:50 - we're going to have two in here. So I'm going to have one button. Let's give this the ID of
269:55 - get query, because it's going to help us get queries and get query just like so. And then
270:03 - another button, this one's going to be for clearing the chat. So I'm just going to paste that in. And
270:08 - let's give this the ID of clear chat. So we can start it up differently. And let's just change
270:15 - the text here to be clear. Great. So that is what it should look like. Now the messages display,
270:23 - so the plural, we're going to actually have a message display in here. So we're going to import
270:29 - message display from message display is we're in the same place, we're here, right? So we just
270:35 - imported from here. So we don't need to go into the components or anything like that. And I'm
270:40 - actually going to map all the different messages onto one individual message display. Great. Now
270:47 - let's do a little bit of styling. So fast off, what I'm going to do is say that everything in here,
270:56 - so everything in my entire project is going to have the same font family, I'm going to go with
271:02 - Verdana. And then as a backup, let's just have to Homer. And then let's have sans serif, good old
271:09 - trusty sans serif. And the text is going to be RGB. This is a color I picked out just as you're
271:15 - very dark gray, you could almost mistake it for black. Next, I'm going to say that any P element
271:21 - as well as the input are going to have a specific font size. So I want the birds to have the font
271:27 - size of 16 pixels. So that's what I have done. Next, I'm going to grab the whole body. And I'm
271:36 - just going to get rid of any default margin and padding just to make sure that there's no lines
271:41 - around our document. So margin, zero, padding, zero. Okay, and now I'm going to center the app.
271:50 - So for this, I'm going to use display flex initialize flex box, which means that now I
271:55 - can use justify content center to center everything from left to right. And now I can also use align
272:01 - items center to center everything to top to bottom. So on the cross axis, but for this to work, I need
272:06 - to give this a height. So I'm going to go with 100 viewport height of the browser. And let's just go
272:12 - ahead and give us a background color as well. I'm going to go with far, far, far. And we should
272:18 - probably change this to be RGB, right? Because I think let's try keep everything consistent. So
272:25 - 250, 250, 250, RGB, 250, 250, 250. Great. And now let's actually grab the app itself.
272:39 - So we're going to use dot notation to get that class name. And that app is going to be 80 of the
272:50 - viewport height of the browser and 80 of the viewport width. I'm also going to give it a background
272:57 - color. This time, it's going to be white. So two by five, two by five, two by five. Okay,
273:02 - let's also round it off a little bit, just slightly, let's go 10 pixels, just to not make
273:07 - it a harsh square. And it's also add a box shadow. Now my box shadow, I'm going to start off with
273:14 - being black, but transparent. So as for transparency, there we go black, I'm going to put 01.6 for the
273:21 - transparency. And we're going to also put zero x axis, one pixel y axis and four pixels below.
273:29 - Okay, so there we go. So at the moment, let's see what this looks like. In fact,
273:35 - let's go ahead and look at our start script. So if I do npm and start, it will start this. However,
273:42 - I actually want to add another script to start a back end. So start back end, let's just make
273:49 - this a little bit bigger, which means that let's change this to be start front. Now to start my
273:55 - back end in a TypeScript project, if I want to use type modules, I'm going to have to do TS
274:07 - node, and then ESM. And then we're going to read the index TS file, which we haven't made is a TS
274:15 - file, because we're not going to have any JSX in there. Okay, so make sure to have this if you want
274:22 - to add types, which I am going to do up here. So all I'm going to do is write type module,
274:34 - so that we can import modules in our index TS file. And by import, I mean, we're not going to
274:42 - use require anymore. So that's two things you need to do, you need to do this. And you need to do
274:48 - that. And we also need to import this package. So I'm just going to go ahead and do that. Let's do
274:53 - so in here, making sure you are in the project and npm i ts-node. So that's going to go ahead and
275:00 - install. And while I'm here, I'm also going to install calls and express as I know I'm going to
275:06 - need those two. So great, that is now done. So now let's actually get to creating this index TS
275:15 - file, which is going to essentially be our back end. So all I'm going to do is create a new file
275:20 - called index TS. So there we go, just make sure it's there in your project, so on the same level
275:25 - as the package is. So now to start my front end, front end, I'm just going to grab this. And in
275:36 - the terminal, I'm going to npm run start:frontend. And that should start at my front end,
275:42 - localhost 3000. There we go. That's what we built so far. I'm just going to inspect this for now,
275:47 - just so we can see a little bit more of what is going on. Great, let's carry on styling a little
275:54 - bit before we start adding the actual Meteor code. So let's go back here, I'm just going to minimize
275:59 - this for now. Get rid of that, just get rid of that for now. Let's style our code display. So
276:07 - I'm just going to grab the code display, just down here like so. And I'm going to give it a width of
276:15 - 96% of the parent, a margin of 2% to make up for the 100 taken from there, and a height of let's
276:25 - just go 46%. Let's see how that looks. I'm also going to round it off. So let's give it a border
276:30 - radius of eight pixels this time. And let's give it a background color. So again, I picked out this
276:36 - background color, I'm going to do the RGB 343434. Okay, great. And I'm also just going to hide any
276:44 - overflow. So overflow. So at the moment, it will look like this. Let's also add that little,
276:51 - I guess, header with the three dots just to make it look more like a little code display.
276:57 - So for that, what I'm going to do is well, I'm going to go to the code display. So just here,
277:04 - and I'm going to add a div. And this is going to hold some buttons. So let's go ahead and
277:09 - give the class name of buttons, making sure just fill it correctly, of course. And let's
277:17 - add three buttons. So this div is going to have the class name of first button, or let's actually
277:25 - give them all the class name of button that only more sense. So this is a button, this is a button,
277:31 - this is a button, this is going to be the first. So that's a separate class name, right? This is
277:36 - going to be middle. And this is going to be the last you can do first, second, third, it's up to
277:41 - you. Great. So that's what we're going to have. So those are the buttons in my code display. And
277:49 - after the buttons, I'm also going to have another div. And this I'm going to actually style as well,
277:55 - I'm going to give this code output. And we're going to want to put our text essentially,
278:05 - it's going to be a string in here. Okay, so there we go. I think we are done with this for now,
278:11 - I'm just going to minimize this, let's pick out the buttons first, and then the buttons and so on.
278:18 - So let's just get rid of that. I'm going to minimize this too. And let's get the buttons class
278:25 - name. So just like so. Now my buttons, I want this to span the whole way. And what's going to hard
278:33 - code a height, right? Because we don't really want this to change. And let's give it a background
278:37 - color of a slightly lighter gray. So there we go. And I want to make sure that all the buttons
278:46 - inside of appear next to each other. And for that, I'm just going to use display flex. And I also
278:51 - want them to align in the center from top to bottom. So I'm going to use align items center,
278:58 - because we're going on the cross axis. Next, I also well, actually, let's just, I also want
279:04 - the buttons or anything inside the buttons display to start a little bit from the left. So I'm going
279:12 - to give padding left five pixels. Great. So now let's pick out each button, each button, I'm just
279:21 - going to actually make a button. So circle, essentially, I'm going to make sure it's 15
279:25 - pixels, which means that the width needs to be 15 pixels, because we're making a circle,
279:31 - let's go ahead and do border radius 50%. And then let's also space all these out. So margin,
279:38 - let's go four pixels. So this four pixel space around each one. Now, of course, if I was just
279:45 - to give this a background color of let's go with red, just like that, and have a look, we get three
279:53 - little buttons. But I've also given them all separate class names, as you will see here,
279:58 - first, middle, and last. So I'm going to now change the color by grabbing these class names.
280:03 - So I can actually grab the element with the class name button. And if it also has the class name of
280:10 - first, you'll see those are joined, I can choose different background color, I'm going to go to RGB
280:16 - 255 9686. And then let's do
280:22 - button middle it was and it's changed this to be 18945. And then let's do button
280:36 - last and change this to be 3820164. Okay, so there we go. This is looking great. Let's work on the
280:51 - messages display next. So all I'm going to do is get the messages, plural display. So let's grab
280:58 - that. And I'm going to make sure that essentially it's the same width as the code display. And let's
281:08 - also let's grab all that just so it's the same size exactly. And I'm also just going to add a
281:14 - scroll. So if there's more than messages that fit, I'm going to go overflow only on the y axis. And
281:21 - I'm going to do scroll. So the little scroll should appear. Okay, wonderful. Now let's style each
281:28 - actual message. So each message is essentially just going to be kind of a square with rounded
281:34 - off edges, I want to take up 100% of the parent. So 100%. I want everything inside of it to appear
281:42 - from left to right. Because I think we should have, you know, a p element in here that will show you
281:49 - the user, and then another p element that will actually show you the message itself. And actually
281:55 - maybe a third one too, that's just going to show some kind of icon. So I want these to appear next
282:00 - to each other, right? So let's also give this a closing p tag. There we go. So that's 123. And if
282:15 - I want them to appear next to each other, that's why we did display flex. Great. Let's also round
282:21 - this off a bit less your border radius five pixels. And I'm also going to do box sizing, border box,
282:31 - make sure everything's on the inside. And then I'm also just going to change the background color
282:37 - to be the same background color as I think the body, let's go ahead and do that.
282:45 - So I'm just going to paste in that like so. And now I'm also going to space out each message from
282:50 - each other. So each message block by five pixels from the top and bottom and zero from the left
282:55 - and right. So that is what that will do. Great. So if we look in here, now that's what a message
283:03 - will look like. And if I have many of these, so let's go. And here, let's just pretend that we have
283:10 - loads and loads of messages all of a sudden. Okay, that's enough. Okay, you will see it's scrolling,
283:18 - but I'd actually quite like the scroll to always be there, just because I want it to be really
283:22 - obvious that we can scroll. And to do that, what I'm going to do is back in here, I'm just going
283:29 - to add this little piece of code. So I've just taken this from the internet with the messages
283:34 - display. Okay, and that will allow me to do that, it will be exactly the same visually, apart from
283:42 - it will always be that now. Great. So let's carry on. I'm actually going to give the message display,
283:51 - let's give this the ID of icon, just so we can pad it out a little bit. So I'm going to grab this
283:57 - and look for essentially any p element that also has the ID of icon. And I'm going to give the
284:04 - padding of this zero from the top and bottom this time and seven pixels from the left and right,
284:10 - just to pad it out from everything else that is going on here. So I've padded that out. Okay,
284:17 - great. Now let's start the input. So once again, all I'm going to do is grab the input element.
284:25 - Okay, so the actual input, there's only one in our project. So I'm just going ahead and grab the
284:29 - whole thing. And essentially, let's kind of start it to look a little bit like a message. I'm going
284:37 - to go ahead and also use box sizing boarder box on the input. Let's give it a boarder of solids.
284:51 - RGBA transparent, and go black, and then 0.16. And make sure there's one pixels in width.
285:00 - Let's pad it out a little bit. So I'm going to be padding 16 pixels and a margin of 2%.
285:10 - Okay, so everything's got a margin of 2%. So that's what it looks like at the moment. Now,
285:16 - if I want this to kind of be centered, right, and fit exactly in the app itself, I'm going to have
285:23 - to use flex box on the app, which we didn't do. So let's go ahead and do that. I'm just going to
285:30 - initialize flex box. And then I'm going to send everything from left to right. And also make sure
285:39 - that everything's on top of each other by adding flex direction column. So that's what it looks like
285:43 - at the moment or fits in the app nicely. And we've got that scroll action going on. And now we also
285:48 - have an input. Let's just round off the edges and finish styling off that input a little bit more.
285:54 - So I'm just going to go border radius, five pixels. And that should be it. And finally,
286:01 - we're nearly done. And we can get to the meatier stuff. Let's also just start these buttons up a
286:06 - little bit. So all I am going to do is just grab the button container. So the class name of button
286:14 - container. Again, I'm just going to give a margin of 2%. I'm going to make sure that the buttons
286:22 - are next to each other. And I'm going to position them at the end by using justify content, flex
286:28 - and okay. And now I'm going to say that any button that lives inside the button container,
286:35 - so that's what I've written just now, I'm going to make sure that the text is upper case. So there
286:42 - we go. I'm going to pad each one out by seven pixels. And I'm also just going to give it a
286:48 - border of none. And now if that button also has the ID of get query, I'm just going to change its
287:00 - color. So I'm going to go with background color, RGB, 255, 9586 to get that red that we used before.
287:10 - And as the border radius, I'm actually going to round off the top left 10 pixels, zero on the
287:16 - top right zero on the bottom right and 10 pixels on the bottom left. And now let's do the same for
287:23 - the clear chat button. Okay, so we're grabbing a button by the ID of clear chat. And now I'm going
287:29 - to swap this round. So we're going to go zero 10 pixels, 10 pixels, zero. And let's make this
287:36 - yellow. So I'm just going to change these to be 18945. Okay, great. And there we have it,
287:46 - there is our app. Now let's get to hooking it up. So for this, let's set off with the back end
287:53 - first. So let's just go ahead and go in here and let's set up our back end. So not the TSX file,
287:59 - the index TS file, that's not going to have any JSX. First off, I'm just going to put in my API
288:06 - key up here, we can of course move it out to an ENV file. But let's just get this working for now.
288:15 - Okay, so that is my API key, just right there. I'm just gonna move that down. Now let's define
288:25 - the port we want to run our back end on, I'm going to say 8000. And this is a number as we
288:32 - are writing in TypeScript. So we're going to have to start working with types. Before we move on,
288:37 - let's just go ahead and check our package JSONs look the same. So yours should look like this.
288:42 - I think we have everything in here that we need. Please go ahead and check this slowly. Okay. And
288:49 - let's not also forget to import the OpenAI package as that is another one that we're going to need.
288:55 - So npm i openai. Great. So let that do its thing. And then it should show up in here,
289:03 - which it has now done. Great. Let's carry on. Next, I'm going to import. So now we're using
289:12 - import express, as well as two types. So application, request, and response from express.
289:25 - So those are two things that we're going to have to do. We're also going to have to import cors
289:31 - from "cors" as well as import two things from OpenAI and as configuration and OpenAI API. Okay,
289:47 - so there we go. Let's go ahead and reorder this to the top. So just like that. And I believe we
289:55 - need to also import the type cors. So let's go ahead and do that npm i save dev type cors.
290:04 - So once again, let's just get up our terminal and do npm i save dev type cors. Okay, so then we
290:10 - can work with course in TypeScript. And there we go. So if we now look in here, I'm just going to
290:16 - show you where that has gone. That's gone all the way down there. Great. Okay, so now it's actually
290:26 - you get to using express, I'm going to grab express, which is imported and call it to release all of
290:31 - its wonderfulness. And let's say that as the const app. And this is where we use the application type
290:38 - that we just imported from express. So we've got that now express now lives under the const app,
290:45 - which means that I can get up and use and pass course through and call it so that we don't get
290:51 - any cause error messages. I'm going to do the same for working with JSON. So I'm going to get
290:55 - express and call JSON. So there we go, we can now work with passing JSON from the front end to the
291:01 - back end in this project. Great. Now from OpenAI, I'm going to essentially use these in order for
291:09 - us to communicate with OpenAI. But first we need to pass through our API key. So I'm going to create
291:14 - a new configuration, pass through an object that simply can have our API key. And we're just going
291:20 - to literally pass through our API key. And let's save this as const configuration, just like that.
291:28 - So you can use it later on. Now I'm going to essentially create a new OpenAI API, and just
291:37 - pass through that configuration to just pass it through into here. And save this, you can save it
291:44 - as whatever you want, I'm going to save it as OpenAI, so that we can use it later on. So great,
291:49 - we should now be authenticated. Let's get to writing our route to an endpoint. First off,
291:57 - I'm going to listen out to any changes. So I'm going to pass report report is 8000. I'm going to
292:03 - put a callback function that's just going to console log out. Your server is running on port,
292:12 - and then the port. Okay, so that's all I'm going to do. So now let's write that route,
292:20 - it's going to be a post request, as we have been working with. And then I'm just going to,
292:26 - let's make an endpoint, let's just go ahead and make one up, you can call this whatever you want,
292:31 - essentially now who is it localhost 8004 slash completions, then we're going to want to do
292:36 - something. And that is an async function, I'm going to pass through the request and the response.
292:44 - And then these have types that we did import from Express. So that's the request type and the
292:50 - response type. And now I'm going to try something and catch any errors,
292:57 - so catch error. And if there are any errors, I'm just going to console error, the error,
293:06 - I'm also going to send something over. So rest status 500 error for error and just send the text
293:14 - of server error. Okay, you don't have to but that is what I have done. Great. So what do we want to
293:23 - try? Well, we're going to await the OpenAI, create completion, or create chat completion
293:32 - to be precise. Let's save this as const completion. And I'm going to pass through whatever we want to
293:44 - send to OpenAI. And that is the model that we want to use. In this case is GPT for and then the
293:52 - messages that we want to pass through as part of the chat. So the message is should look like this,
293:59 - you need to put an array, and each message is symbolized by this little object right here and
294:04 - you savvy role. So it's going to be the user so us, and then whatever we pass through,
294:11 - we're going to be passing this through from the front end, though, I'm going to pass that through
294:15 - the body as a message. So I'm just going to go ahead and do request body message. And because I
294:27 - want to only bring back stuff as SQL requests, or even if we type, name my dog, I'm actually going
294:34 - to append some text here that says create a SQL request to and then whatever we pass through,
294:46 - okay, so everything will be turned into an SQL request. So that is a little cool hack for you
294:53 - to essentially change every single request that we send, but on the back end. Okay, great. And that
295:00 - should be part of the content. So I'm just going to put this maybe on a new line, so it's easier
295:08 - to read for you. Okay, so that's my array. And here is one message that we're going to be sending
295:17 - over. And that's really it. So once we have the messages, so that's the whole object we are
295:24 - passing through, we're just going to send back whatever comes back as the completion.
295:34 - We're going to go into the data, we're going to get the choices. We're going to go into that
295:40 - array, get the first thing to come back and get its message. So that is just the format of the
295:46 - data coming back to us from the AI. I'm going to show you what this looks like as well. But first,
295:53 - let's get to hooking this up to the front end. So now here, let's just go ahead and make something
296:00 - happen on click of this. So on click, I'm just going to get query. And let's define our function
296:07 - get query. So cons, get query. And then I'm just going to define up here, I'm going to try something
296:17 - and catch any errors. So just like we did previously, match error, console, error, the
296:28 - error. And what shall we try? Well, we're going to actually use the fetch API from JavaScript.
296:37 - And we're going to fetch from HTTP, local host, 8000. So our back end that we just created for
296:46 - slash completion. So the endpoint that we just wrote. And of course, this is a POST request.
296:52 - So we're going to pass through some options. So let's define those options. We can do so here,
296:58 - const options equals. And then the method we're going to pass you is a POST method, the body.
297:10 - Well, we're going to pass it through JSON string files as an object. And I'm just going to use the
297:15 - message. And let's just maybe hard code something. For now, let's go ahead and create a table. Okay,
297:24 - so we're just hard coding it at the moment. Let's also pass through some headers though. So headers,
297:31 - as we are working with JSON, I'm just going to pass through content, type application.
297:39 - Jason. Okay, so those are all my options that I want to pass through. And this is an async method,
297:49 - which means we need to use the await keyword, which also means that await can't live inside
297:54 - a function can only live in inside async function. So we have the async keyword there. So we're
297:59 - going to wait for the response of this. And let's save this as something I'm just going to go ahead
298:04 - and save it as a response. And then I'm just going to for now, grab the response and get its JSON.
298:14 - So oh, that's also async, which means we need to await it. And once that comes back, let's just
298:20 - save this as data. So before we do much else, I'm just going to console log data just so we can see
298:26 - what's coming back to us. So there we go. Great. So we've now got the bare minimum to get this
298:31 - working. So let's go ahead and try this out. I'm just going to get the console log up to see any
298:38 - errors. So now if I click on the button, get query, we should essentially send this message. So with
298:45 - the request body message to here, right request body message. So once again, this is the whole
298:54 - request. We're getting the body dot notation because there's an object message. And then we're
299:01 - sending that through to the OpenAI API with this appended to the front. And then we should get that
299:11 - message back. So let's go let's click get query. There has been an error. Let's check why. So
299:19 - we have not run our backend. So let your npm run start:backend and hit enter. So the our serve is
299:33 - now running on port 8000. And let's try this again. I'm just going to do that to clear this.
299:38 - So we've clicked on it. We are now waiting for our message to come back. And great, that is the
299:46 - message that comes back. Its role is from the assistant and the content is below is the SQL
299:51 - request to create a table called and then we have the response. Great. So let's go ahead and show
299:57 - that in here, right? So let's go ahead and do that first. So now let's go ahead and go to the app TSX
300:05 - file. And let's use state in order to save to the state of the app. So I'm just going to
300:11 - import use state from react. Use state from react, just like so. And that means I can save this,
300:21 - let's save this chat, const chat, set chat. And I'm going to start off with this being actually
300:30 - an empty array, because we're gonna have to add to that array, I just want to save all the chats
300:34 - that we have. And we know that our chat is going to come back with a role and content, right? So
300:40 - I'm just going to do this again, so we can see. Okay, there's my object, it has a content and a
300:47 - role. So let's go ahead and define that interface up here. I'm going to go into interface, chat,
300:56 - data. So one individual chat is gonna have a role, and that's going to be a string. And then
301:02 - content is also going to be a string. Okay, so I'm just defining the types up here.
301:09 - So that means that I can now use this interface to say that this will only take things in the
301:16 - array that look essentially like this object, because you'll have those types. So that is what
301:24 - I am doing. This is some TypeScript for you chat data. And make sure that's in an array. So only
301:33 - objects that look like this can go into this array now. Great. So now let's set chat. So once we get
301:41 - that back with console log in the data, I actually just want to set the chat, but I also want to not
301:48 - override the array, I want to add to the array. So for tour this, I'm just going to get the previous
301:53 - state, I'm just going to go ahead and call it old chat, we can call it whatever you like, I'm going
301:58 - to get that array, I'm going to spill out the old chat back into it, I'm going to pass through the
302:03 - new data. But along with that, I also actually, so I'm just going to show you what happens,
302:10 - I also want to actually say what we have been typing. So for this, I'm going to also have to
302:15 - say to state the value of a input, because at the moment, we're just hard coding like here, right,
302:22 - I don't want that to happen. So let's go ahead and do const value of the input, we're going to
302:28 - change it with set value, let's do use state. And let's start off with being an empty string. So
302:35 - let's also define this as being a string, this should only be a string ever at all times.
302:42 - So the value, we want we want to actually see that change in the input. So I'm just going to
302:47 - pass through the value. And on a change of the value, I'm going to get the event. And I'm going
302:55 - to use set value to change it to wherever we are typing into the input. So that's how you would do
303:02 - that. Great. So now that means that instead of hard coding this, I could use the value of whatever
303:12 - we typed into the input to override that there. Okay, great. So I'm just going to show you if I
303:21 - console log value down here. So there we go. So I'm just going to type some stuff, and it will
303:29 - change. So that is value, as you can see on AppTSX lambda line 35. So whenever I essentially click
303:38 - to get a query, I get the response back from the assistant. But I also want to say what I've been
303:45 - typing. So I'm going to actually create a new object. I'm going to call this user message,
303:51 - and I'm just going to construct an object that looks exactly the same as the chat response. So
303:56 - when I have a role, and I'm also going to have content for my role, I'm going to hard code as
304:03 - user because it's me. And the content is just going to be the value of what I've sent over.
304:07 - So that is now my user message. And I also want to pass that through into the search chat array.
304:13 - Great. So now if I console log chats, I'm just going to show you what that looks like. Let's
304:19 - just refresh. So we clear that. Create a table for users. Get query. So it's empty at the moment.
304:29 - Our chat is empty. But what do we expect to happen? Well, I expect two objects to come back,
304:34 - one from the API with the role of assistant, and one that I added in the front end, right,
304:40 - with the role of user. And there we go. So indeed, we have the role from the assistant. And the
304:46 - assistant says, well, it's just giving us the text of how to create a table. And then me,
304:52 - I've hard go to user and the content is exactly what I wrote in here. Wonderful. So we're saving
304:57 - all of that. If I was to write another one, then those two more objects should be saved in here.
305:02 - Each time we're saving two objects. So now let's use this data to display it. So all I am going to
305:09 - do is actually go ahead and well, let's filter some of these messages, right? So I'm going to get
305:17 - the chat and I'm going to filter each message. So each object message. And I'm going to say if the
305:25 - message role equals user, then we know the my messages. So let's say this is const filtered
305:40 - user messages, just like so. And I'm just going to pass those filtered messages into the message
305:48 - display. So user messages is going to be the prop, I'm just going to pass your filter to do some
305:53 - messages, which means that now on message display, messages display, sorry, plural, I can pass that
306:01 - through. And as this is typed script, we're going to have to define those props. So interface
306:10 - messages, display props. And well, we can actually also go further and define the user messages
306:28 - interface. So interface, so just defining what the object really looks like user message has a role.
306:40 - That is a string interface. And also content, right? That is a string. So we know that the user
306:52 - message is going to be array of this. So user messages, the prop user messages, right? The
306:59 - prop user messages is going to be a user message, but it's going to be array of them. So that's
307:04 - what I've written there. So hopefully, that makes sense. And now we can just use this to define the
307:11 - props we are passing through. So this will essentially say what types all our props have,
307:16 - we only have one prop. Okay. And it's made up of this, those things in an array. Cool. So now we
307:25 - don't need to hard code this anymore. I'm actually going to get the user messages. Okay. And I'm
307:32 - going to map someone use dot map to map each user message, let's go with singular onto a message
307:41 - display. Cool. We should really have a key here too. So I'm just going to use the index for this
307:51 - just because we don't want any errors showing up. Maybe I'll just put this on a new line. So I'm
307:57 - going to have a key that's essentially the index. And then I'm just going to pass through the
308:03 - message itself as the user message, which means we now need to go to the message display and pass
308:14 - down the message. Okay, so let's do structure the message. The message is easy because we know what
308:22 - it's going to look like, we can essentially just define the message props for this easily. So
308:28 - interface message display props, and the props for this for the message looks like this is an
308:38 - object that has a role. In fact, what we can do is just grab this user message again,
308:50 - paste it up here. And then just use the user message. Okay, we're just defining that even
308:55 - further. interface. Great. So now let's grab those props. And just do that. Wonderful. So this is
309:08 - looking so so good. And now that we have each message, the message that has a role and content,
309:15 - I can grab the message. And I can use Kylie braces and get the messages, roll and display it,
309:22 - and also get the messages content on display. We are getting some Kylie lines here. Why is that?
309:29 - We seem to have missed a parenthesis. And there we go. So if we look in here, now, we get a user
309:38 - and create table for users. Perhaps I don't really want that user showing up. But if you do, you can,
309:44 - I'm just going to come at the output now. And there we go. I'm also just going to add in a text
309:51 - symbol for the icon itself. So here is my text symbol that I have chosen. If you want it to,
309:57 - I'm just going to show you where to get it from. You can essentially get it from here. So there is
310:03 - the URL if you want to get it. Great. So this is looking good. Create a table for users.
310:11 - Create a table for dogs. Don't really know. Let's just go ahead and do that. And that should be added
310:18 - up here. And we are only saving the messages that have the role of user as we filter them out.
310:25 - Wonderful. So that's what I have done. Now this is looking so, so good. The next thing I want to do
310:31 - is just get the last possible content of the message that has the role of assistant to show up here.
310:39 - So let's go ahead and do that. So back on the app itself, I am actually going to filter once more,
310:46 - because I'm going to have to filter out the chat. So I'm going to get the chat to use filter once
310:51 - more to filter out each message. And if the message role this time equals assistant to anything that
311:01 - comes back from OpenAI, I just want to get the very last one. So I'm just going to use pop the
311:09 - method of pop to get the very last one. And that's the latest that we can call it code. So latest
311:14 - code, even though technically it's a string. So once we have the latest thing that's come back to
311:18 - us from the AI, I'm simply going to pass that through. So the text that we're going to use for
311:24 - this is going to be the latest code. And we're not we don't need this role. We just want its content.
311:31 - Okay. So we're going to display that. Or if that doesn't exist, I'm just going to display an empty
311:40 - string. Cool. So now let's pass through the prop text on the code display. So let's get up our code
311:48 - display. And let's pass that through. Okay, so this time we are not passing through the whole
311:55 - object, we're literally just passing you the string that's attached to the content. Right,
312:00 - we're going in here, we're filtering out everything by the role of assistant. So there
312:04 - should only be two items in our array. And then literally just going dot notation content. So I'm
312:09 - passing through the last this one, right? We're passing through the last one that came back to us.
312:17 - So let's define that prop interface code display props text string. Okay, so now we can just
312:33 - use that to define the types of props. Wonderful. And now I could just get that text and display it
312:42 - in here. So there we go. latest code is possibly undefined. That is fine. Let's check if it exists.
312:51 - And then also this needs to be content. Great. So that should show up. However,
312:56 - I feel that we haven't changed the text of this. So let's just change the color of this text.
313:08 - So on the code display, let's actually get the code output as well. Where was the code
313:14 - related stuff, code display, I'm also just going to grab the code output, let's give it a margin
313:22 - of 20 pixels. And I'm also going to say that any P element that is inside
313:31 - the code output is going to have a different text color. And I'm just going to make it the
313:35 - yellow that we have been using. So 25518945. Great. So there we go. That is now showing up.
313:46 - We've nearly done it. The last thing we do is just clear the chat. So let's write a function
313:50 - for that. So let's go ahead and do that here. On click is going to be super easy. I'm just going to
313:57 - clear chat. And let's define that up here.
314:00 - Const clear chat. All I'm going to do is set the value to be an empty string again.
314:20 - So let's just put that in here and pass through an empty string. And I'm going to set the chat
314:25 - to be an empty area again, so we can start fresh. So let's check that out. Let's do this here.
314:34 - Let's get that query. And that should be saved up there as part of our history.
314:40 - Okay, that is wonderful. And we also get the query to do this.
314:44 - Let's do create a table called users and get that query. So once again, that should do its thing.
314:57 - And there we go. Let's go ahead and do a few more update the table to have
315:06 - phone numbers. Okay, so that hasn't done it. But it's given us some instructions
315:12 - and add a fake user to the table users. And there we go. And it's shown us how we can,
315:22 - of course, scroll through all of this. And if I click on clear chat, that has cleared our chat
315:26 - for us. Great. One final thing we're going to do, just to make sure that everything is safe,
315:33 - is just create a dot in the file. So we can keep our API key safe. So let's add that in here.
315:40 - Let's do API key equals, and let's get it from the back end. So index TS, there we go.
315:48 - I'm just going to grab this, it is a string. So that is implied. And when you process
315:56 - env to look in that dotenv file and get the API key. So that's what we have done. And then in
316:02 - the API key here, I'm just going to save that in here like so. So we're done with this. And we're
316:07 - just going to have to import the dotenv package. Okay. So once again, I'm just going to get on my
316:12 - terminal and do npm i dotenv, just like so. Okay. And great. And finally, we just need to
316:26 - import that up here. So import, like so. And then let's get dotenv and get config and call it.
316:35 - Okay, in order to use it. And great, that's it. I hope you've learned a lot. I really enjoyed
316:46 - showing you how to do this in TypeScript. So I hope you had fun. And I hope to see you again soon.
316:57 - Phew. So by the end of this course, you would have learned how to create completions using
317:04 - the text completion endpoint, create chats using the chat completion endpoint, and create images
317:10 - from prompts, as well as already existing images, thanks to the DALL-E model as well. So this really
317:18 - has been a lot. Hopefully you've managed to get through some of the projects too. And if you
317:23 - didn't, don't worry, you can always come back to this course whenever if you wish. If you did enjoy
317:28 - this course, I would like to contribute to freeCodeCamp as a thank you, please do check out the
317:33 - video description below. Okay, everyone, and that is it. Thank you so much for watching along with
317:41 - me. I hope you've learned something useful. And I hope you enjoy using the OpenAI API.