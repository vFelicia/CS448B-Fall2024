00:00 - hi i'm andrew from the youtube channel
00:02 - follow andrew you can check down in the
00:04 - description and there'll be links to my
00:06 - channel where i do video tutorials about
00:09 - web design web development technology
00:12 - css html photoshop ui ux and other
00:15 - related technologies i've been
00:17 - developing websites for over 20 years
00:20 - now
00:20 - and so go ahead and check out my channel
00:22 - if you like what you see here and and
00:24 - come see some other stuff
00:26 - now in this particular video tutorial
00:27 - we're going to be learning how to create
00:29 - an entire custom bootstrap theme
00:32 - for an admin style panel from scratch
00:34 - and it's sort of divided into three
00:36 - separate parts the first part we're
00:38 - going to be setting up npm and webpack
00:41 - so we can configure bootstrap's source
00:44 - files that are written in sas and kind
00:47 - of setting up some automatic workflows
00:49 - to help us when we develop it the second
00:51 - part second part of the tutorial we're
00:53 - going to be looking at creating just
00:55 - some basic bootstrap templates things
00:57 - that are common in admin forms like
00:59 - forms
01:01 - something will tables cards widgets
01:04 - things like that you may find inside of
01:06 - a typical admin style theme
01:08 - and then the third part of the tutorial
01:10 - we're going to be customizing the
01:12 - bootstrap
01:13 - uh experience by adding some custom css
01:17 - overriding some of the bootstrap
01:19 - javascript or rather the bootstrap sas
01:22 - files to have some sort of custom look
01:24 - and feel and layout and design to our
01:26 - bootstrap admin theme
01:28 - so that's kind of the three parts again
01:30 - check down in the description if you
01:31 - want to skip ahead to any particular
01:32 - section back and forth throughout this
01:34 - video i hope you learned something so
01:36 - come follow along
01:38 - now the first thing we need to do here
01:40 - is set up a project folder so i've just
01:43 - got a simple folder here set up in
01:44 - visual studio code is what i'll be using
01:46 - for the editor and it's just called
01:49 - hq-admin is my master folder and inside
01:52 - of this folder we're going to be
01:54 - creating several files
01:56 - configuration files to start off so what
01:58 - we're going to go ahead and do is we're
01:59 - going to open up our terminal window
02:01 - and we're going to make sure that we add
02:03 - a couple of files here so the first
02:05 - thing we're going to do is do git init
02:07 - and that is going to create a regular
02:10 - empty
02:11 - git repository so we can track changes
02:13 - here to our files and whatnot
02:15 - the next thing we're going to do is say
02:17 - npm init and that's going to
02:21 - pull in the node package manager into
02:23 - our folder so we can pull in various
02:25 - packages and import those into our
02:28 - project so the package name i'm just
02:29 - going to leave here at hq admin you can
02:31 - see i'm just going to follow the prompts
02:32 - here version 1 description we'll just
02:35 - call admin theme
02:38 - uh entry point we'll
02:40 - leave at
02:41 - we're actually going to call our entry
02:43 - point
02:44 - js
02:46 - slash
02:47 - app.js
02:51 - is where our entry point is
02:53 - going to be we're not going to leave any
02:55 - types of commands we're not going to
02:56 - have a git repository set up quite yet
02:59 - uh keywords we'll just say admin theme
03:02 - and the author will just say is andrew
03:04 - wilson
03:06 - and we'll leave the license at default
03:08 - and we'll hit yes
03:10 - for all of that
03:11 - and then that
03:13 - creates a couple of files for us now you
03:15 - can see it says i can update to a new
03:18 - version from five six to five six one so
03:20 - make sure you have the latest version
03:22 - probably want to run an npn and run this
03:23 - command right here
03:25 - before you start this tutorial to make
03:26 - sure you're on the latest version
03:28 - of node
03:30 - so you can see what that did for us is
03:32 - it created a file in here called
03:33 - package.json
03:35 - and this
03:36 - package has all those values that we're
03:39 - going to be using throughout this
03:41 - tutorial we're going to be adding quite
03:42 - a bit to this here in a minute but that
03:44 - gets the initial things set up nicely
03:46 - for us
03:47 - now the next thing we're going to do
03:48 - here is we're going to create just a
03:49 - file here
03:51 - and this file is going to be a dot get
03:54 - ignore file so dot git ignore
03:58 - and we want to add into this file
04:02 - the node
04:04 - underscore
04:06 - modules
04:07 - directory this way git won't track all
04:10 - of the scripts that we import into the
04:13 - node modules directory we don't want
04:15 - those as part of our repository so we'll
04:17 - just add that one in there for now and
04:19 - that's probably good enough in our get
04:21 - ignore file
04:23 - for right now
04:24 - next let's go ahead and
04:28 - uh we're gonna install webpack so we're
04:30 - gonna be using webpack as the
04:32 - package manager which is gonna
04:34 - automatically bundle up all of our
04:36 - javascript files into a single
04:38 - javascript file it's gonna compress it
04:40 - for us it's to automatically take our
04:42 - css and sas and convert it to css and
04:45 - write that and compress so it's going to
04:46 - do several things for us so we're going
04:48 - to be using the webpack package manager
04:51 - in this tutorial so let's go ahead and
04:54 - install that next so again down here in
04:57 - our terminal
04:59 - we'll run a couple of commands here so
05:01 - we're going to say np whoops make sure
05:03 - you're actually down in the terminal
05:05 - we're going to say npm
05:08 - and install
05:11 - webpack
05:14 - now we could
05:15 - run all these commands which dash dash
05:19 - save
05:20 - dev we could run all these commands on
05:22 - one single line however gonna do most of
05:24 - them i'm going to do most of them
05:26 - individually so you can kind of see what
05:28 - they're doing so this is going to
05:29 - install webpack for us this will take
05:31 - just a minute as it downloads here
05:36 - the next command we're going to be
05:38 - running after this webpack command is
05:40 - the webpack command line
05:43 - uh tool so in order to do that we say
05:47 - npm install
05:50 - webpack dash cli dash dash
05:54 - save dev that save dev command makes it
05:57 - so that this writes to the
05:59 - development dependencies in our
06:02 - package.json file so that they're not
06:05 - included as part of the production
06:07 - dependencies because this stuff is of
06:08 - course only used during development
06:11 - so we'll go ahead and add that one
06:15 - give a second for that guy to install
06:18 - next we're going to say npm install
06:21 - webpack dash dev dash server
06:25 - save dev and this is going to be the
06:28 - development server that automatically
06:30 - will spawn when we're creating our files
06:32 - it has supports like hot reloading and a
06:34 - few things like that so every time we
06:36 - hit command s and save a file
06:38 - it'll automatically recompress recompile
06:40 - our sas put out the files and refresh
06:42 - the browser for us so that's kind of a
06:44 - nice uh
06:46 - feature there that we're going to be
06:48 - using
06:49 - in that package
06:51 - uh next thing we're going to do is
06:53 - install npm
06:56 - install
06:58 - uh let's see here this one's going to be
07:02 - the font awesome
07:04 - so we're going to say
07:06 - at it's under the repository called
07:09 - fort
07:10 - awesome
07:11 - font
07:12 - awesome
07:15 - dash free there's a free and a pro
07:17 - version we're going to be using the free
07:19 - and then the save dev as well so font
07:22 - awesome
07:23 - is the icon font that is open source and
07:26 - free that we're going to be using i
07:28 - guess i don't know if it's open source
07:29 - but it's free we're going to be using
07:31 - that to generate all the icons for the
07:32 - various uh settings and switches and
07:35 - toggles inside of our admin theme
07:38 - so the command we use to sort of crunch
07:41 - and make webpack do its thing is npx
07:46 - webpack
07:48 - dash
07:49 - dash
07:50 - config and then it's just the default
07:52 - name there which is
07:54 - webpack.config.js this is actually
07:56 - optional
07:57 - it assumes that's the default name so
07:59 - you don't need to patch the dash config
08:02 - value
08:02 - unless you've changed your name for some
08:04 - reason but you run that command
08:07 - and this will go ahead and take all the
08:09 - configuration settings you have inside
08:10 - of your webpack
08:12 - run them all and then spit out the
08:14 - output
08:16 - stuff so of course we don't have
08:18 - anything in our webpack config.js file
08:20 - but i just wanted to show you that
08:23 - command that you can use
08:26 - okay
08:28 - next let's go ahead and
08:35 - run a couple more commands here so we're
08:36 - going to continue installing things
08:41 - uh next we need to install a thing
08:43 - called fibers
08:45 - now the next couple of things uh
08:48 - we're gonna be basing our theme off of
08:50 - bootstrap so we're gonna also be pulling
08:52 - in bootstrap
08:53 - so let's come down in here we're going
08:55 - to say npm
08:57 - install fibers dash save dev
09:01 - and we'll pull that one in
09:03 - and then we're going to be installing
09:06 - sas
09:07 - s-a-s-s
09:09 - so we'll grab it next as soon as this
09:12 - finishes up here
09:16 - okay then npm
09:19 - install
09:20 - sash
09:22 - and then same thing here into our dev
09:24 - environment
09:28 - and the next couple of things we're
09:29 - going to install are going to be dealing
09:31 - with live reloading our css pulling in
09:34 - css
09:35 - uh the post css loader a few of the
09:38 - things that basically are required for
09:40 - bootstrap in order to import and
09:42 - customize bootstrap we need these little
09:44 - uh files because we're going to be
09:46 - working with the raw sas files in
09:47 - bootstrap and these things required
09:50 - so in a pm
09:53 - let's see here install
09:56 - so we're going to be working with one
09:57 - called sas loader and here i'm going to
09:59 - do a couple at once we're going to be
10:01 - doing the node
10:03 - sas
10:05 - whoops and we're going to be doing the
10:07 - css css
10:10 - loader we're going to need the auto
10:12 - prefixer
10:13 - the post
10:15 - css
10:17 - loader if i can type this right it's
10:19 - post css
10:21 - dash loader
10:23 - and we'll save all those to dev as well
10:26 - see if i typed all that out right
10:30 - okay so this is going to pull in
10:32 - all these little different packages that
10:35 - kind of are required for working with
10:37 - bootstrap
10:41 - and the next plugin we're going to grab
10:43 - is one specifically used for pulling out
10:46 - your css file and writing it to an
10:49 - individual file
10:50 - so
10:51 - webpack by default when it configures
10:53 - and packages of your javascript files it
10:55 - also takes all of your css and it jams
10:58 - it inside of javascript and then
11:00 - hot loads that or pushes that into the
11:03 - browser via javascript
11:05 - with inline style tags so if you don't
11:07 - like all of your css jammed inside of
11:09 - javascript this next little plugin is a
11:11 - plugin that will take your css
11:14 - export it out and write it as a
11:16 - regular.css file which is how i like it
11:20 - so npm
11:23 - install
11:24 - mini dash
11:26 - css dash extract
11:29 - dash
11:31 - plug-in
11:33 - save dev
11:37 - okay we'll wait for a second for that
11:41 - and uh let's see we have one or two more
11:43 - here
11:44 - but that will probably do it for now
11:47 - so
11:48 - uh the
11:50 - most of our files are now
11:51 - in place and loaded up now let's go
11:53 - ahead and check the node modules and you
11:55 - can see just how many things came in
11:57 - from all those commands we have all
11:58 - sorts of stuff in here
12:00 - that is packaged
12:02 - as part of all those imports
12:05 - so the one thing here
12:08 - that we are missing
12:10 - is actual bootstrap itself
12:13 - so we're gonna ins uh pull in bootstrap
12:16 - next
12:19 - so we do that with npm install
12:24 - bootstrap
12:25 - and this will pull in all of the sas
12:27 - files css files
12:29 - and also all the javascript files
12:32 - that are required from bootstrap now you
12:34 - can see here when we install bootstrap
12:36 - it tells us that bootstrap requires a
12:39 - peer of jquery and popper in other words
12:42 - jquery and popper are both dependencies
12:45 - that are required for bootstrap to work
12:48 - uh if you're going to be working with
12:49 - javascript files so we need to add those
12:53 - files
12:54 - so let's go ahead and
12:57 - plug in those guys so in order to do
12:59 - that we can say
13:00 - npm
13:03 - install
13:04 - and then we're going to save
13:06 - dash dash save jquery and
13:09 - popper.js
13:11 - now we're not doing save dev here
13:15 - because these need to be these are
13:17 - actually production files that are not
13:18 - part of our development files so that's
13:21 - why we're
13:23 - not saying save dev
13:26 - same thing with the bootstrap
13:27 - dependency we just pre-installed we want
13:29 - that as a required package not a dev
13:31 - package
13:33 - okay so now we have bootstrap so let's
13:35 - go ahead and peek over here at our
13:37 - package.json file and we can see kind of
13:39 - what this
13:41 - uh is doing here
13:52 - uh we have a bit of a problem
13:55 - so it looks like our package.json file
14:00 - is not getting up to
14:04 - and the issue here
14:08 - um
14:10 - maybe i just have an old one so let's
14:11 - just
14:14 - yeah there we go i was just looking at
14:15 - an old file i was a little confused
14:16 - there
14:17 - so you can see now our package.json file
14:19 - is updated with quite a bit of things
14:21 - here so you can see here's all of our
14:23 - development dependencies with all these
14:24 - things we just barely added and then
14:26 - here's our required dependencies which
14:28 - are the bootstrap and those two files we
14:30 - just added there as well
14:31 - so that is mostly set for our
14:35 - webpack
14:37 - uh or sorry our package.json file
14:40 - and now we can go ahead and start the
14:42 - process of building out this theme
14:44 - importing our files setting up our
14:47 - webpack file so let's go ahead and do
14:49 - that next
14:51 - so
14:52 - uh let's jump over and create a few
14:55 - files we need so we need to come over
14:57 - here and set up a source file so we're
14:59 - going to set up a new folder and it's
15:00 - going to be source and this is going to
15:02 - be the folder that houses all of our raw
15:04 - assets
15:05 - and inside of
15:07 - source again you can really set this and
15:09 - configure this however you want
15:12 - i'm just going to set a folder called
15:13 - javascript i'm also going to do a new
15:16 - folder called
15:17 - sas which is going to hold all of our
15:19 - css and sas files we're going to be
15:21 - using to modify and build this theme out
15:23 - so that's really all we need there
15:26 - and then inside of our javascript folder
15:28 - we're going to create a new folder
15:30 - called app.js
15:33 - so that's going to serve as the main
15:36 - file that webpack looks for to run its
15:39 - commands
15:40 - and then we're going to do a new file in
15:42 - here
15:43 - also called
15:44 - custom.js
15:46 - and that's where we'll write any scripts
15:47 - or things like that we need to write
15:50 - for our application that we want to
15:52 - import into this main file
15:54 - so there's a couple of those boilerplate
15:56 - files
15:58 - now let's go ahead and set up our sas
16:00 - files so we're going to set up a new
16:02 - file here
16:03 - so the first file we're just going to
16:05 - call main.scss
16:08 - so this is going to be the main sas file
16:09 - that houses all of our imports where
16:11 - we're importing all sorts of different
16:13 - uh css sas files all over the place
16:16 - we're going to create a fairly modular
16:18 - layout so that it's easy to sort of find
16:20 - you know if we have a button element
16:21 - it's going to be in our button styles if
16:23 - we have a card element it'll be in our
16:24 - card styles so we're going to be setting
16:26 - up several components
16:28 - so let's go ahead and set up those
16:29 - folders for the components so we're
16:31 - going to set up a new folder here and
16:34 - we're just going to call this folder app
16:37 - as it's going to house all of the css
16:40 - files for our app
16:42 - we're going to set up another file here
16:44 - that is called
16:46 - underscore
16:48 - vars.scss so this file is going to hold
16:50 - all of our sas variables
16:53 - we'll set up another one here and this
16:55 - one specifically we're just going to
16:56 - call it
16:58 - customize dash
17:00 - bootstrap
17:02 - dot scss and this file in specifics is
17:05 - going to house
17:07 - the
17:08 - variables that we're going to use to
17:10 - override specific things inside of the
17:12 - bootstrap sas files so this variables is
17:15 - going to be our own variables that we do
17:18 - various things with various things with
17:20 - and the customized bootstrap will be
17:22 - bootstrap specific variables so we'll
17:24 - kind of separate those two out like so
17:28 - all right so we have our main we have
17:30 - those we have our app
17:32 - and we're gonna be creating inside of
17:34 - our app three folders
17:36 - so we're gonna be creating a folder
17:38 - called
17:39 - components that's where we're gonna
17:41 - house all of our various components
17:43 - we're gonna have another one called
17:45 - pages this will be a folder where we'll
17:47 - house
17:48 - a page specific css so like if we have a
17:51 - login page for our admin theme that
17:54 - really doesn't belong with all the other
17:56 - css so that's where we'll kind of house
17:57 - things like that login pages
18:00 - contact pages maybe things like that
18:03 - and then one more in here we'll do a new
18:05 - folder we're just going to call this guy
18:06 - vendor and this is where we'll store any
18:09 - css that's specifically created to
18:11 - override vendor packages
18:13 - so one example we're going to be using
18:15 - here in a minute is we're going to be
18:16 - using the pace
18:18 - javascript
18:19 - library
18:20 - which enables you to sort of have a
18:22 - loader to show the load progress of your
18:25 - page as it renders
18:26 - and it comes with its own sas files so
18:28 - we can use uh this vendor folder to sort
18:31 - of override and customize the look and
18:32 - feel and colors of those loading bars
18:35 - that are package based
18:37 - uh third-party packages so that's where
18:39 - we'll put that type of stuff
18:43 - okay so that's pretty much the setup for
18:45 - our uh
18:48 - sass folder so all that stuff's going
18:50 - inside of the sas folder
18:51 - and we'll be creating all those sas
18:53 - files of course here in just a minute
18:56 - next let's go ahead and create
18:59 - our front end so that's just going to be
19:01 - inside of our demo
19:02 - and we're just going to create a new
19:03 - folder here and literally
19:05 - call it demo i just i think i just said
19:07 - that wrong so this is going to be like
19:09 - our distribution a lot of times you'll
19:11 - see this called dist which is the files
19:12 - that are distributed i'm just going to
19:14 - call mine demo again you can set this up
19:16 - really however you want
19:18 - so inside of our demo we need a few
19:21 - things so we're going to create a couple
19:22 - of folders here we need a css folder
19:24 - which is going to house our outputted
19:26 - css
19:28 - we need a folder here for our fonts
19:31 - these are going to be extracted and
19:32 - output from
19:34 - fantasm
19:36 - and we need a new folder here for our
19:38 - javascript
19:39 - which is going to be whoops i think i
19:40 - created that as a subfolder i did
19:43 - cancel we want to move it up into
19:46 - demo
19:48 - yes
19:49 - and our javascript file will of course
19:52 - house all of our javascript files that
19:54 - we have
19:56 - and then we need one file here
19:58 - new file
20:00 - we need an actual
20:01 - index.html file
20:03 - and this file is going to be our
20:05 - our of course applications
20:07 - html
20:09 - will live here
20:11 - so in
20:12 - that's kind of the basic setup for our
20:14 - distribution or our demo folder that's
20:16 - really all we need inside of there
20:18 - um if we did have for example in our
20:22 - javascript file we could create a new
20:23 - folder here and we could call this like
20:26 - plugins or something and then all of the
20:28 - external javascript that comes from
20:30 - vendors we could stick inside of there
20:32 - if we wanted to to link to that
20:36 - and inside of our javascript folder we
20:39 - now need our output file which is going
20:42 - to be our app.js output file but
20:45 - webpack's going to create that for us
20:46 - and stick it in there so we actually
20:48 - don't need to create that file
20:51 - but that's eventually where it's going
20:52 - to go
20:53 - okay
20:54 - so all of those files are now in place
20:58 - and let's go ahead
21:00 - and build out our
21:02 - uh
21:03 - html file so that we can begin the
21:06 - process of running webpack first to see
21:08 - if it actually loads up
21:10 - so let's go ahead and jump over here now
21:14 - to our source folder
21:16 - we're going to come in our javascript
21:18 - folder here and into our
21:20 - app.js
21:22 - and the first thing we're going to do is
21:23 - run the import command because we need
21:26 - to bring in bootstrap that's one of our
21:28 - required dependencies oops
21:31 - and we need to import
21:33 - everything inside of our sas folder so
21:35 - right everything inside of here we
21:37 - basically want to bring in
21:39 - so we're going to say
21:40 - dot dot slash
21:42 - sas because it's back a directory from
21:45 - this javascript folder
21:47 - so hence the dot dot slash then we need
21:50 - to
21:52 - bring in
21:55 - our
21:56 - custom stuff so we're gonna import
22:00 - dot slash custom
22:03 - so that's gonna bring in anything
22:06 - you know that we write inside of our
22:07 - custom stuff and package all that into a
22:09 - single
22:10 - single javascript file
22:12 - so those are the three things we need
22:14 - inside of our app.js
22:18 - so that should be good there
22:22 - okay the next thing we need to do is
22:24 - configure our webpack javascript so
22:27 - we're going to come in here to
22:28 - webpack.js and add in all the
22:30 - configurations so we can finally run
22:32 - webpack it's going to do its thing
22:34 - import bootstrap and then create our
22:36 - file so let's go ahead and add this
22:38 - next
22:40 - okay now there's going to be quite a bit
22:42 - of code inside of this configuration
22:43 - file so we'll kind of go through it uh
22:46 - piece by piece so you can kind of
22:48 - understand this so the first thing we're
22:49 - going to do is
22:52 - add a constant of path equals require
22:57 - path and this is just what's required
22:59 - here for
23:00 - uh webpack and we actually need to add
23:02 - another constant
23:04 - for webpack itself
23:09 - and we'll hit require
23:12 - webpack
23:15 - and then we're going to add another one
23:18 - and this is going to be the mini
23:19 - css this is the plugin we added earlier
23:23 - uh
23:24 - extract plug-in
23:30 - whoops
23:30 - equals
23:32 - the chances i make a typo in any of this
23:34 - are very high
23:38 - just so you're aware so this is the
23:40 - plugin that we downloaded that's going
23:41 - to extract our css
23:46 - and then here we're going to do our
23:48 - module
23:50 - dot exports so this is all the
23:52 - configuration
23:53 - settings for all of the various modules
23:55 - and things like that
23:58 - okay so we're going to start with the
23:59 - one called dev
24:02 - server so this is basically just key
24:03 - value pairs here
24:05 - in this little
24:07 - uh
24:09 - i guess it's a json type of object
24:12 - so dev server
24:14 - is going to have the following
24:16 - configuration
24:18 - so it's going to have a content
24:20 - base
24:22 - and then we're going to say path.resolve
24:25 - and this is going to automatically find
24:26 - the path where this file exists
24:29 - so we're going to say directory name
24:32 - demo so it's going to look for its
24:34 - current directory and then into the demo
24:36 - folder
24:37 - that's where the dev server is going to
24:38 - be served from
24:40 - we're going to say compress
24:43 - true so it's going to compress our files
24:45 - whoops this one over here has to be a
24:47 - comma not a semicolon because these are
24:49 - all the
24:50 - values
24:52 - and then we're going to say public
24:55 - path is set to demo as well
24:59 - so again this is going to be whatever
25:00 - you set your right mind's being served
25:02 - from this demo folder right here if you
25:04 - call this dist or something you would of
25:06 - course update these for that
25:09 - and then right
25:11 - to disk is true now this one got me
25:14 - initially i was having some issues with
25:15 - webpack where it wasn't
25:18 - updating my sas files when i would save
25:22 - it kind of looked like it was but it
25:23 - actually wasn't working so i had to
25:24 - actually add this flag right to disk
25:25 - true and that solved that issue for me
25:29 - so that's pretty much it for the dev
25:31 - server values so that's gonna
25:33 - make it so that our dev server you know
25:35 - uses those values when it serves this
25:40 - um then we're gonna add in here
25:44 - the entry
25:46 - point for everything here is dot source
25:49 - slash js slash app dot js again this is
25:52 - not standard standard i think is just uh
25:57 - camera what standard is index.javascript
25:59 - or something like that
26:02 - uh the output
26:06 - output
26:08 - is going to be
26:11 - so the file name
26:13 - is just going to be app.js for me
26:16 - and the path where i want that guy
26:19 - output is going to be we can just say
26:21 - path.resolve again okay to fix that for
26:25 - me
26:27 - directory name
26:29 - and it's going to be under demo
26:31 - slash js
26:33 - so that's where mine is going to live
26:35 - and that's probably non-standard as well
26:38 - and the public path variable we can set
26:41 - to
26:42 - demo
26:44 - whoops demo
26:46 - i actually think the dev server might
26:48 - use this public path variable when it
26:52 - does this thing so i might not need to
26:53 - declare it twice but
26:56 - okay so that's good enough there
26:59 - next let's go ahead and
27:02 - work on the module
27:07 - so this is going to be some various
27:09 - rules we're setting up
27:11 - that's going to happen basically these
27:12 - are instructions we want webpack to use
27:15 - when we run it
27:17 - so we're going to be using this key
27:19 - called rules
27:21 - and it's made up of a bunch of
27:23 - configuration values
27:26 - so the first one is going to be
27:28 - test
27:30 - and it's going to be
27:36 - let's see if i type this correctly here
27:41 - again this is going to be a miracle if
27:43 - everything goes off
27:44 - perfectly in the first
27:46 - go by
27:47 - so scss
27:51 - and i don't need that one
27:54 - comma
27:57 - okay and
27:59 - then we are going to
28:03 - say use
28:07 - and use is going to be set up with a
28:11 - bunch of these as well
28:14 - so the first one will be
28:18 - this this first one we're going to be is
28:19 - the plug-in that's going to be used to
28:21 - extract the css into a separate
28:23 - uh file so we're going to say loader
28:28 - mini css extract plugin
28:34 - dot loader
28:36 - so that's what we need for that
28:40 - and then the next one
28:42 - is going to be the
28:45 - loader for the css loader
28:51 - which is going to load in our css
28:55 - the next one and again i'll have these
28:58 - files
28:59 - uh somewhere you can download so a copy
29:02 - paste here is really going to be your
29:03 - friend but i wanted to kind of go
29:04 - through this piece by piece by piece
29:07 - uh for i don't know because i'm crazy
29:10 - for sanity's sake uh this next one is
29:12 - going to be used to process our css with
29:15 - post css which i think is actually
29:16 - required for to make the bootstrap stuff
29:19 - work
29:20 - so we're going to say loader
29:23 - css
29:24 - loader uh whoops sorry this is the post
29:28 - css loader
29:30 - post css loader
29:33 - and we're going to be passing in a few
29:34 - options here
29:36 - so the options key
29:40 - and then the first thing is going to be
29:41 - our plugins and then we have a function
29:43 - here
29:45 - function if i can spell that correctly
29:48 - and i'm just going off my notes of
29:50 - course because i don't have all this
29:51 - memorized i've looked this stuff up
29:54 - uh return
29:58 - and then we're going to require
30:00 - auto prefixer
30:03 - and auto prefixer not sure where that's
30:05 - hyphenated there i think it's without a
30:07 - hyphen that's why my notes have it
30:09 - anyway
30:10 - auto prefixer is the
30:12 - plugin that's required for bootstrap sas
30:14 - files to compile correctly so that's why
30:16 - we need this
30:19 - all right uh that's it for
30:22 - the post css
30:25 - next we're going to load up our sas
30:27 - loader
30:28 - so we need
30:30 - one more here and this is going to be
30:34 - our loader and this is going to be our
30:36 - sass loader
30:39 - to process our sas files
30:42 - and that's pretty much
30:45 - most of the way done for webpack we just
30:47 - need a couple of little more things down
30:48 - here at the bottom
30:50 - we're going to set up
30:52 - some code that's going to make it so
30:55 - that our
30:56 - web fonts get extracted and
30:59 - saved to disk via the file loader
31:02 - and then set up um
31:05 - jquery with the provide plugin
31:09 - which is going to make it so that our
31:10 - jquery dollar sign is a global variable
31:13 - because webpack i don't think
31:15 - i don't know how it packages your
31:16 - javascript but it messes up with global
31:18 - variables so that is going to allow for
31:20 - that
31:21 - okay
31:22 - and that we're going to add
31:26 - it's getting so big i can't even see
31:28 - that's going to be added right after
31:34 - let's see the rules command i believe
31:36 - i'm just double checking here yeah
31:39 - so after all of our rules so this is
31:41 - where the
31:43 - this helps
31:44 - tremendously
31:49 - the bracket matching highlighting and vs
31:51 - code
31:52 - so after our rules we're going to set up
31:54 - a another section here and this is going
31:55 - to be called test
31:57 - so this is going to be the thing where
31:59 - we're testing for all the web fonts
32:01 - so this is going to be uh our little
32:07 - regex here
32:09 - slash
32:11 - dot
32:13 - a couple of these
32:15 - okay so we're going to look at the eot
32:17 - files
32:18 - we're going to be looking for woff files
32:21 - we're going to be looking for
32:24 - w o f f 2 files
32:26 - we're going to be looking at ttf files
32:28 - we're going to be looking at svg files
32:31 - and that's it for that
32:34 - and so all of those files are all of the
32:36 - different
32:38 - ways that font awesome packages its
32:40 - fonts because every single browser
32:42 - requires a different font format it's
32:43 - kind of ridiculous so they're sort of
32:45 - stored in a million different ways and
32:47 - then the browser will pick the correct
32:48 - font depending on its needs correct font
32:50 - files
32:52 - okay
32:53 - so that's why we need to
32:55 - have so many of those
32:57 - and i do not know what this regular
32:58 - expression means somebody else probably
33:01 - does
33:02 - i grabbed this from
33:06 - uh i can't remember where i grabbed this
33:07 - from
33:08 - somewhere and then dollar sign
33:12 - okay
33:14 - so that is supposedly
33:17 - the regex that will do that for us
33:20 - i'm just double checking my note here
33:21 - really quick to see if i see any obvious
33:23 - typos
33:25 - okay now we're going to say use
33:29 - and
33:32 - this is going to be
33:34 - so we have here
33:36 - um the loader is going to be the file
33:41 - loader
33:44 - and the options
33:53 - are going to be name
33:56 - will be set to
33:57 - [Music]
34:02 - whoops
34:03 - name like this
34:05 - will be set to
34:08 - the
34:09 - name
34:11 - and then the dot
34:14 - extension so this is how we want our
34:16 - file name so it's going to be the name
34:18 - of the extension will come in just how
34:19 - they're found essentially
34:22 - and then the output
34:25 - path
34:27 - is going to be dot slash fonts
34:29 - now this is kind of important because it
34:31 - depends on how you where you store your
34:33 - font files but for where i stored mine
34:35 - in my demo or distribution directory
34:38 - this is the correct
34:41 - path if you will and the public path
34:45 - is the same in my case so essentially
34:47 - one of these store one of these
34:50 - references where the files are and the
34:51 - other one is what actually gets listed
34:53 - in your css file when it references the
34:56 - font family that says where's the font
34:58 - family it's going to be say dot slash so
35:00 - it's a relative file path based on your
35:02 - css files location
35:04 - so that's very important to note
35:08 - okay
35:10 - so that's pretty much it for the
35:15 - test now we just need to add our last
35:17 - two things which is our
35:21 - um
35:24 - after our modules
35:26 - so clear up here
35:28 - so after this guy
35:31 - now we're going to load in the plugins
35:34 - that we
35:35 - so plugins
35:38 - and let's say new we're going to load
35:40 - the mini css extractor plug-in first
35:45 - and it's going to
35:47 - be passed in the following options
35:51 - file name and this is just dot dot slash
35:54 - css slash app dot css so that's the file
35:58 - name that it's going to create and save
36:01 - that to that location as well when it
36:02 - extracts the css
36:06 - and whoops one more plugin here
36:10 - we're going to say new
36:13 - webpack dot
36:17 - provide plugin
36:21 - and this guy is going to be past the
36:23 - options this is where we're going to
36:24 - make our global variable so we're going
36:26 - to say the dollar sign is for jquery
36:32 - and also jquery like this
36:36 - actually that doesn't need to be in
36:38 - quotes just
36:39 - this is just the key
36:41 - jquery like this is going to be for
36:43 - jquery as well
36:49 - okay
36:50 - so
36:52 - that i think pretty much does it for
37:00 - that plugin i'm just double checking
37:01 - here
37:04 - because i feel like i may have added
37:06 - that in the wrong spot
37:09 - yes i did
37:10 - so this plug-ins
37:14 - goes
37:14 - after the module not the mod
37:18 - which will export so i had it in the
37:20 - wrong spot so it goes right after this
37:21 - guy
37:24 - like so
37:29 - so then
37:33 - i think we are good and again the
37:36 - chances this all compiles correctly is
37:38 - going to be a miracle
37:40 - but uh of course i'll have this file
37:42 - list you can download if things don't go
37:44 - you know probably the easiest was to
37:45 - skip to this point in the video but i
37:47 - wanted to kind of go over that
37:49 - all right so we're going to save and the
37:51 - one thing i did notice is that i forgot
37:54 - we need the file loader plug-in
37:57 - and i don't know if i installed that
37:59 - with my last npm commands
38:02 - uh so we're gonna go ahead and do that
38:04 - right there npm install file
38:07 - loader
38:09 - whoops save dev
38:12 - if it's already there i'll just add it
38:14 - again so it really doesn't matter
38:16 - but i don't know if i did that before so
38:18 - heads up there
38:21 - okay
38:22 - uh now we have that webpack file all set
38:26 - we can actually run the command i showed
38:28 - you earlier
38:30 - to see if all of that stuff
38:33 - will compile
38:34 - now in order for this to work we need to
38:36 - set up an index file
38:38 - inside of our demo
38:40 - so we do have our index.html but let's
38:42 - go ahead and set up a little bit of
38:44 - boilerplate code here in this file
38:48 - first
38:49 - so we'll come into this
38:52 - index.html file and we're just gonna if
38:55 - we just in vs code if you just do talk
38:56 - and hit type it fills out all that
38:58 - boilerplate for you with the emit script
39:00 - super super nice
39:01 - so this is really all we need here
39:04 - um for this the only thing we want to do
39:07 - is we're going to create also a link
39:10 - so we'll say link rel equals stylesheet
39:15 - because we want to link to the style
39:17 - sheet that webpack's going to be
39:18 - creating for us
39:21 - href is going to be set to css slash
39:26 - app.css i'm actually going to put a
39:28 - slash in front of this because we're
39:30 - going to be using development server so
39:31 - i want that to be root
39:33 - relative
39:36 - and close that guy off
39:38 - and then also we want to add inside of
39:41 - here down in our footer
39:43 - not our footer really before our closing
39:45 - body tag i guess
39:46 - a link to the javascript file so script
39:50 - and we're going to set the source on
39:52 - this one
39:54 - is going to be
39:55 - again
39:56 - j
39:57 - slash app dot js that's the public path
40:00 - for our demo or our distribution folder
40:04 - and that should be
40:06 - good
40:07 - so we don't i don't think need anything
40:10 - else in here
40:11 - let's just throw ourselves a header one
40:13 - tag for a hello world finally
40:17 - and let's see if we can get this guy to
40:20 - run
40:21 - so what we need to do here is
40:26 - now
40:28 - execute that command so let's come i'm
40:30 - going to try to back up here in my
40:33 - history that's the one right there so
40:35 - npx webpack config so this is going to
40:37 - make web pack
40:39 - look at our webpack dot
40:42 - json or json however you want to say
40:44 - that file i like json personally
40:47 - and then execute all this stuff so when
40:48 - we hit return here
40:50 - my return there
40:52 - down here
40:54 - this is going to have webpack
40:57 - try to do this
40:58 - so we have an error it says
41:02 - uh can't resolve source.js app.js
41:07 - and i think i see the issue here
41:10 - so if we go to our webpack file you can
41:12 - see that i said dot source it's supposed
41:14 - to be dot slash source
41:17 - so i had a i was missing a slash there
41:19 - to go into that directory so let's go
41:21 - ahead and fix that and run it again
41:24 - so we'll hit return here see if we get
41:27 - some more errors
41:28 - so we've got another one can't resolve
41:30 - dot dot slash
41:32 - sas in our javascript file so in
41:36 - this guy
41:38 - so dot dot slash sas
41:41 - so
41:47 - maybe it's because we don't have any
41:50 - files anything inside here let's go
41:52 - ahead and try that let's add something
41:54 - to our
41:56 - actual
41:57 - sas file
41:59 - and see if that helps
42:04 - so let's just say
42:06 - body
42:08 - background color red
42:11 - so we'll save that
42:13 - and let's come down here i don't think
42:15 - this is going to
42:16 - solve this issue
42:22 - all right let's
42:23 - troubleshoot here
42:26 - okay the issue here is that we can't
42:28 - just
42:30 - go to a folder
42:32 - i need to specify a file
42:34 - so i'm going to come to slash slash main
42:38 - dot sc ss
42:40 - so this should come in and grab that
42:42 - main file so let's come down here and
42:43 - run webpack again
42:50 - okay we have some more
42:53 - errors
42:54 - let's track these down
42:58 - first one says cannot find module auto
43:02 - prefixer
43:03 - so
43:04 - uh
43:05 - we
43:07 - possibly spelled that wrong
43:10 - so earlier in the
43:11 - it came up with the auto prefix or
43:13 - hyphenated
43:15 - uh so let's try that and run this again
43:27 - all right i found the issue here uh so
43:29 - the thing is this does auto prefixer
43:31 - does need to be included without a
43:33 - hyphen like my notes the problem is
43:35 - earlier when we installed
43:38 - the npm apparently there's two packages
43:41 - one's auto dash prefixer and the other
43:43 - one's just auto prefixer i installed the
43:45 - one with the dash which is incorrect we
43:47 - need the one without the dash so you
43:49 - need to install auto prefixer without a
43:52 - dash back at save dev
43:55 - then once you have that guy installed
43:56 - let's just go ahead and run webpack here
43:58 - again one more time
44:00 - you can see now it runs through
44:01 - everything without a problem and it
44:03 - compiles out so let's go ahead and see
44:06 - what webpack did for us
44:08 - so we're going to come over here to our
44:12 - output so let's come into demo
44:14 - you can see that we have an app.js file
44:17 - that webpack has created for us with
44:19 - tons and tons of stuff so we have in
44:21 - here
44:22 - this is basically all the javascript
44:24 - that is from bootstrap you can see here
44:27 - sizzle there's all sorts of things in
44:29 - here but bootstraps javascript's in here
44:32 - we have our css
44:34 - so it compiled and minified our css body
44:37 - background color red
44:39 - and
44:40 - everything is good to go
44:43 - so
44:44 - inside of our source
44:45 - whoops our demo
44:48 - we have
44:49 - all of that stuff in place
44:51 - now the one thing we need to add inside
44:54 - of our output folder
44:57 - is a place
44:59 - for our
45:01 - uh web fonts
45:04 - so we're eventually going to be adding
45:06 - in here
45:08 - to our demo we'll just create a new
45:10 - folder right here we're just going to
45:11 - call this guy fonts
45:14 - because this will be housing
45:16 - all of the fonts so
45:19 - perfect that actually worked so now what
45:21 - we can do is we can
45:24 - use uh npm so instead of having to type
45:26 - this command every single time
45:29 - we can
45:30 - make it so that we can just say npm
45:34 - run build
45:36 - and everything will sort of flow for us
45:39 - so what we have to do is we're going to
45:40 - come back to our
45:41 - packages.json file now
45:44 - and we're going to come up here to our
45:48 - uh
45:48 - scripts
45:50 - section
45:51 - and we're gonna add a couple of things
45:53 - right here
45:54 - so we're going to add in the one called
45:58 - build
46:01 - and it's going to execute the command
46:06 - webpack
46:08 - and then if we have one called
46:10 - start
46:12 - dev
46:14 - will say
46:15 - this guy is going to execute the command
46:19 - webpack dev
46:21 - dash
46:22 - server
46:24 - for us
46:25 - okay so in other words we can come down
46:27 - here to our terminal
46:28 - and let's go ahead and clear this out
46:30 - whoops
46:32 - not there
46:35 - so we can say webpack because we
46:37 - installed this module earlier
46:40 - dev dash server and hit return
46:44 - oh
46:45 - we don't have
46:47 - did we install the webpack dev server
46:49 - i'm pretty sure we did i've installed so
46:51 - many things i can't remember
46:53 - um
46:55 - let's go ahead and just double check
46:56 - that really quick
46:57 - and okay we definitely did
47:00 - so uh what the problem was i was using
47:02 - the wrong command
47:03 - so the command we need is actually this
47:05 - it's node modules slash dot bin slash
47:08 - webpack dev server so we have to go to
47:09 - the right directory before we
47:11 - execute this command so when we do this
47:13 - command this will launch this
47:15 - dev server here
47:17 - so what the dev server does is it
47:19 - launches a server you can set up some of
47:20 - these things but notice how it's been
47:22 - served from my slash demo that's my
47:24 - distribution folder automatically for me
47:26 - and then it sets up a little dev server
47:28 - so i can just
47:29 - copy this
47:30 - and we'll pull up firefox here
47:33 - and just paste that in there
47:35 - and you can see that sure enough it's
47:38 - pulling up everything from my dev server
47:40 - so there's my index there's my css fonts
47:43 - javascript and it's all sitting right
47:45 - there as i would expect
47:47 - so that is pretty slick
47:50 - now typing that command over and over
47:52 - and over again right every single time
48:00 - now typing that command over and over
48:01 - and over gets a little bit cumbersome so
48:04 - what we can do is i'm just going to get
48:06 - out of that dev server that's why we
48:08 - added this command right here so we can
48:11 - say npm
48:14 - run
48:16 - or build
48:18 - and then we say start
48:20 - dev
48:21 - and now when we do that
48:24 - we get an error
48:31 - because i typed it wrong it's npm
48:35 - run
48:37 - not build start dev it's build on the
48:39 - other one
48:41 - okay so we can just run that command
48:43 - that will automatically execute the
48:45 - webpack dev server command up here
48:48 - start our dev server everything launches
48:50 - up
48:52 - creates all of our files
48:53 - and everything is good to go so now we
48:55 - can just
48:56 - again jump over here to the
48:58 - dev server and it should be up and
48:59 - running perfect so the one issue here is
49:02 - you can see in our route this should be
49:04 - bringing up my index.html file which
49:07 - it's not so we need to jump back here to
49:10 - vs code and just double check that we
49:13 - place that in the right spot
49:17 - and
49:18 - we did not
49:20 - in fact
49:21 - i have no idea where we put that because
49:25 - i don't see it anywhere
49:28 - i'm pretty sure there we did we created
49:30 - it in the wrong
49:32 - uh in the wrong area
49:35 - so inside of our source
49:42 - oh whoops i did it i did a bunch of that
49:44 - stuff
49:45 - wrong earlier
49:47 - so
49:48 - we uh we're just not paying attention to
49:50 - where i was creating those folders uh
49:52 - but our index our javascript our fonts
49:55 - all these guys should have been up
49:56 - inside of the css
49:59 - demo folder way up here
50:02 - so
50:04 - uh let's just
50:06 - how can we fix this easily
50:08 - um we can probably there's nothing in it
50:10 - any of this stuff is there
50:12 - no let's just delete this one altogether
50:15 - so we'll fix this by just deleting this
50:19 - demo
50:20 - and we're going to grab this demo and
50:22 - move it up
50:24 - up
50:26 - not into node modules
50:29 - maybe i can move it up i thought this
50:31 - would be easy
50:33 - right there move
50:37 - okay so now our demo is back at the root
50:41 - it has its css fonts javascript
50:44 - okay let's try this again
50:46 - so i'm going to
50:47 - get out of the web server here let's
50:48 - come down the bottom
50:50 - and let's just run that same command one
50:52 - more time
50:54 - so this should package everything up
50:56 - launch our dev server let's just double
50:58 - check that it created the files sure
50:59 - enough it created our css file
51:02 - it created our
51:04 - app
51:05 - there is that file of our js
51:08 - so that looks like it's working
51:09 - correctly there's our index file is
51:11 - sitting inside of there
51:13 - so now if we go over here and refresh
51:15 - there we go we're now finally seeing the
51:17 - root of our app with our hello world and
51:21 - our red background color
51:23 - so
51:24 - that was about an hour of just setting
51:26 - up and configuring everything to
51:28 - actually then begin the process of
51:30 - developing our custom theme
51:32 - so now we're going to be adding in a
51:35 - whole bunch of css and some boilerplate
51:37 - to build a fairly robust
51:40 - admin theme
51:41 - and the admin theme i'm using is i've
51:44 - taken a lot of the ideas off of another
51:46 - admin theme and used some of the css but
51:49 - i've also heavily customized it to kind
51:51 - of fit my needs so i'll link to that
51:53 - um down in the description for the base
51:55 - theme that i'm basing this off of
51:57 - but let's go ahead and get started with
51:59 - that next
52:00 - okay now that everything is working for
52:02 - us here in our dev server let's go ahead
52:04 - and now import
52:06 - uh into our sas file of the bootstrap
52:08 - files we'll set up a very basic page
52:11 - and then we'll be off to the races to
52:13 - create this full theme
52:15 - so back over here we're going to open up
52:17 - our main sas file
52:19 - in our source
52:21 - and do some imports
52:24 - so we can go ahead and delete this rule
52:25 - we added earlier
52:27 - we'll just
52:29 - add in our little
52:31 - doc block here with
52:33 - um
52:35 - i thought that would actually ps had a
52:39 - thing for that but it doesn't maybe it
52:40 - does
52:41 - uh so we'll just uh say this is going to
52:44 - be our
52:46 - hq admin theme
52:50 - and we can give ourselves an author
52:54 - andrew wilson
52:56 - and we can give ourselves a url
53:00 - colon slash youtube.com
53:02 - channel follow andrew
53:05 - anyway
53:06 - you get the idea right so we can add in
53:07 - here at the top
53:09 - um
53:10 - whoops
53:11 - some of that stuff
53:13 - okay so
53:16 - uh the first thing we're gonna need to
53:17 - import is bootstrap itself so we're
53:20 - gonna just gonna do a couple comments
53:21 - like this so we're gonna say at import
53:24 - this is the sas now
53:26 - um going to import our
53:29 - variable.scss file
53:31 - we're going to
53:34 - import the customize
53:40 - bootstrap.sc
53:42 - file
53:44 - and then we're going to at import
53:52 - the bootstrap itself so bootstrap
53:56 - s-c-s-s-s-c-s-s
54:01 - boots
54:02 - drop
54:03 - like that so basically this is going to
54:05 - look inside of the node module so if we
54:07 - come over here we can find the bootstrap
54:10 - files right here
54:12 - and you'll see inside of their
54:14 - scss file
54:16 - um
54:18 - this is what it's going to be you know
54:19 - it's going to import
54:20 - all of this jazz
54:22 - so they have a bootstrap file in here
54:23 - right this is the one we're importing
54:25 - and their file imports a million and a
54:27 - half other bootstrap files so we're
54:29 - importing right tons and tons and tons
54:31 - of sass files
54:33 - uh
54:35 - that is
54:36 - what that line does
54:38 - so
54:40 - that is getting us all the bootstrap
54:41 - files
54:42 - uh next thing we need to do is import
54:45 - font awesome
54:47 - so this is kind of a little bit
54:49 - strange here but it's very powerful so
54:51 - we're going to say fa we're creating a
54:52 - variable called fa
54:54 - font
54:56 - path and we're just going to set that to
54:58 - the path for font awesome's web fonts
55:02 - folder
55:04 - so we're gonna say at
55:08 - fort awesome slash font
55:11 - awesome dash free slash scss slash font
55:16 - awesome.scss
55:17 - okay
55:18 - so that is the
55:21 - uh that's not the right path
55:24 - s it is
55:27 - font awesome
55:30 - dash free slash web fonts i got too
55:33 - excited
55:35 - web fonts
55:36 - okay so that's the path there and now
55:38 - we're gonna at import
55:40 - uh essentially
55:42 - now we can
55:43 - copy this and kind of use part of it
55:45 - here
55:47 - so the scss
55:50 - slash
55:52 - font awesome dot css now font awesome
55:55 - five version five which is what we're
55:57 - using is quite a bit different than
55:59 - version four it splits off
56:01 - all of the different fonts into four or
56:03 - five different css files we need to
56:04 - import each one of those in addition to
56:06 - the main font awesome file
56:08 - so i'm just going to copy this and we're
56:10 - going to go one two three more times
56:13 - so they have one called regular they
56:16 - have one called
56:18 - uh
56:19 - brands which is things like facebook
56:21 - icons google icons brand icons and then
56:24 - they have things called solid which are
56:25 - solid icons
56:27 - and if you have notice how every time
56:29 - i'm hitting command s it's doing its
56:31 - thing right it's running this and it
56:33 - just recompiled everything
56:36 - from scratch so that's pretty cool
56:40 - uh
56:41 - now
56:42 - we are going to
56:45 - so just to prove this if we go over here
56:47 - and look at our
56:48 - demo file and now look at our app.css
56:51 - notice how it's much much larger now
56:53 - right this is all the bootstrap stuff
56:56 - we're seeing inside of here there's all
56:58 - the font awesome stuff we're seeing
56:59 - inside here so it's just importing and
57:01 - compiling everything down which is very
57:04 - very
57:05 - handy
57:07 - so that's it for font awesome
57:09 - and the next thing we want to do is
57:15 - just also to illustrate this if we look
57:17 - in our demo folder now if i open up my
57:19 - fonts now that i'm importing font
57:20 - awesome notice there is all of the
57:22 - various actual font files themselves
57:25 - that will be served
57:27 - with the font awesome so that's what
57:28 - that
57:30 - file extractor we did inside of our
57:33 - webpack
57:35 - right down here so we tested for all
57:36 - these different files and then extracted
57:38 - them with the file loader and then stuck
57:40 - them all right there
57:41 - so that's what that little configuration
57:43 - setting did for us
57:45 - which is really really cool
57:47 - font awesome five is actually a bit i
57:49 - think more trickier to customize and to
57:51 - use on your own like this but it's
57:53 - doable with some of these tricks
57:56 - all right next section here we're just
57:58 - going to call this section our app
58:00 - layout
58:01 - so here we're going to at import
58:04 - and this is the files that we'll be
58:06 - creating so we're going to say app
58:08 - slash components
58:10 - slash app
58:12 - so again this file doesn't exist yet but
58:14 - we'll be creating a master css file for
58:17 - our app and notice we got an error right
58:19 - there when it tried to compile because
58:21 - this does not exist
58:22 - so we will go create it so let's open up
58:25 - app
58:26 - and we will create
58:28 - this
58:29 - file inside of our components
58:32 - new file
58:34 - app.scss
58:36 - let's underscore that
58:39 - and
58:41 - let's try to
58:43 - let's just do a rule in here
58:45 - well
58:46 - it's probably gonna be overridden by all
58:47 - that other css let's try a body just to
58:50 - see if this is working
58:52 - background dash
58:53 - color
58:55 - green and we'll add an important on this
58:57 - to try to override everything and save
59:00 - so
59:03 - that looks correct
59:08 - and
59:10 - let's see if this is actually working
59:12 - now
59:17 - so it failed to compile
59:23 - so let's go ahead and let's run this dev
59:25 - server again and see if it
59:27 - compiles okay so it looks like it
59:29 - compiled okay that time
59:31 - and let's go back to our uh
59:33 - and refresh and you can see sure enough
59:35 - it's working just fine so now what i'm
59:37 - going to do is i'm going to go side by
59:39 - side because we have sort of live
59:42 - reloading enabled on this so i'm going
59:44 - to pull this
59:46 - instead of full screen here
59:48 - i'm going to pull visual studio
59:51 - instead of full screen now we're going
59:52 - to go to
59:54 - a partial screen as well so over here
59:57 - and then we'll make
59:58 - let's take over the other half of the
59:59 - screen so now we essentially can see our
60:01 - hot reloading
60:02 - in action so watch what happens if i
60:04 - change this to blue and just hit command
60:05 - s it's going to recompile everything and
60:08 - refresh the browser and poof
60:10 - we get blue so that is super super
60:12 - powerful
60:14 - okay so we don't need to have this in
60:16 - here let's just delete that and save
60:17 - that
60:19 - we'll go back to our main sas file here
60:22 - and we're going to add in
60:25 - a couple of more of these
60:29 - so there's our app layout
60:31 - um we will
60:34 - add three more here so i'm going to copy
60:36 - this
60:37 - and i'll say paste
60:39 - based paste so we're gonna have one
60:42 - called app we're gonna have one called
60:45 - app
60:46 - dash
60:47 - header whoops i just deleted that
60:49 - app header
60:50 - we're gonna have one called app
60:52 - dash sidebar
60:54 - we're gonna have one called app dash
60:56 - sidebar
60:59 - mini
61:02 - and then we're actually gonna have one
61:04 - more
61:06 - we're gonna have one called app
61:09 - dash
61:11 - tile
61:15 - like so
61:16 - all right so now
61:20 - let's go ahead and create all these
61:21 - files so we need that header app sidebar
61:23 - all these in here so let's come back to
61:25 - our components
61:26 - where these guys all live
61:29 - and we'll create them so
61:32 - new file
61:33 - app
61:36 - app dash header scss and a new file
61:44 - app dash oops
61:47 - forgot what i was typing in there
61:49 - sidebar next
61:54 - app dash sidebar.scss
61:57 - new file
62:00 - app
62:01 - dash
62:04 - title i think we had that as css i can't
62:07 - remember all these it keeps opening them
62:08 - up as i create them
62:10 - uh let's see we got header sidebar title
62:13 - now we need sidebar mini
62:15 - so underscore app dash sidebar dash mini
62:21 - dot scss
62:24 - okay so now we're going to come over
62:25 - here and save and it should try to
62:27 - recompile and hopefully we don't get any
62:28 - errors
62:30 - and it looks like
62:31 - that worked just fine
62:33 - so
62:34 - let's come into maybe our app.header
62:36 - file
62:38 - and just throw in a couple of
62:40 - customizations
62:41 - so we can kind of see how this is going
62:44 - to change
62:46 - so
62:47 - let's say
62:50 - again we're going to do this just to
62:52 - make sure everything is working
62:57 - when we save
62:58 - there we go it's working fine
63:00 - okay so
63:04 - let's go ahead and add now some code to
63:07 - our
63:08 - index.html file so that we can then
63:10 - begin to flesh out a little admin theme
63:12 - here
63:13 - so we're gonna jump over here to
63:19 - our demo whoops i was in the right spot
63:22 - and
63:23 - [Music]
63:24 - index.html
63:26 - and we're going to add some code
63:28 - to our body tag so we're going to get
63:30 - rid of this hello world
63:32 - and actually add in
63:34 - uh quite a bit of code here so this is
63:37 - where we're going to be integrating
63:38 - we're going to be using bootstrap so
63:41 - we're going to be using a lot of the
63:42 - bootstrap grid which is based off of
63:43 - flexbox and some other components and
63:45 - widgets and whatnot as we start to build
63:47 - our admin theme and we're going to
63:48 - heavily customize the app layout
63:51 - with some uh left with some sidebars
63:53 - things like that toggle menus
63:55 - etc etc
63:58 - so let's begin the process of setting up
64:00 - just a few html files that we can learn
64:02 - a bit about the basics of bootstrap
64:04 - before we start to customize some of
64:06 - these components so what we're going to
64:08 - do is we're going to come over here to
64:09 - our demo folder that we set up and let's
64:11 - just create a new file here for now
64:14 - we're going to call this file first
64:15 - forms dot html because forms are going
64:18 - to be the first aspect we'll tackle here
64:21 - so inside of this forms folder i'm just
64:24 - going to do a little bit of copy paste
64:25 - here i'll pause you can pause the video
64:27 - here in a second when i get this all set
64:28 - up here for you but basically all we
64:30 - want here
64:32 - is just our body tag
64:35 - and just our basic html here so you can
64:38 - kind of see we've just got our head tag
64:40 - we'll call this one the forms page we're
64:43 - linking out to our css sheet that we
64:45 - have set up that webpack is configuring
64:46 - for us
64:48 - and that's pretty much it so we're going
64:50 - to have a class on our body
64:52 - of app
64:54 - and that's pretty much all we actually
64:56 - don't even need the sidebar mini there
64:58 - and then we're going to write a little
64:59 - bit of bootstrap code so let's start out
65:02 - here and we're going to write just a
65:03 - little bit of code that will help us get
65:05 - a column or two so we're going to be
65:07 - adding two columns we're going to be
65:08 - we're going to be using the bootstrap
65:10 - grid system and then let's add two
65:12 - columns to our section here and then
65:14 - we'll add an inline form a horizontal
65:17 - form and then just a default
65:20 - vertical form so to kind of showcase
65:22 - three of the different forms you can use
65:23 - inside of bootstrap
65:25 - so the first thing let's go ahead and do
65:26 - is we're going to get a container so
65:28 - we're going to say div class equals
65:31 - container
65:33 - and the containers in bootstrap sort of
65:35 - act as you know kind of your main outer
65:38 - element that you can wrap things inside
65:39 - of rows and columns and things like that
65:41 - they have fixed width containers and
65:43 - they also have fluid stretchy containers
65:46 - and then inside of our container we're
65:47 - going to set up a
65:49 - two columns so here we're going to say
65:52 - div
65:53 - whoops
65:54 - class
65:55 - equals
65:56 - and here we can say row
65:59 - so we're going to be setting up
66:01 - an initial row
66:02 - and inside of this row we can say div
66:05 - class equals call
66:07 - and then you can see all the presets
66:09 - here inside of bootstrap so bootstrap is
66:10 - based on a 12 column grid by default and
66:13 - it uses flexbox to create this grid
66:15 - behind the scenes
66:16 - um
66:18 - but you can you can specify like if i
66:20 - want two columns that are equal width
66:22 - they would each take up six so you can
66:25 - think of like call dash six
66:27 - would basically be half width and then
66:30 - another call dash 6 would be another
66:32 - half width so let's go ahead and add
66:34 - this one first so we're going to say
66:35 - call dash 6
66:37 - and i'll just call this first column
66:40 - and then inside of this initial top row
66:42 - let's go ahead and add another one so
66:44 - we're going to say div class equals call
66:46 - dash six
66:48 - so we'll say second column
66:52 - okay so let's go ahead and save here
66:54 - and we're going to refresh here this
66:57 - page
66:59 - and make it go to our slash we call this
67:02 - forms.html
67:04 - and you can see here now on this basic
67:06 - page over here i have a first column
67:08 - over here and a second column over here
67:10 - and as i resize the page these columns
67:12 - are always staying equal width meaning
67:14 - this one is taking up 6 out of 12
67:16 - columns and this one's taking up 6 out
67:18 - of 12 columns so just to kind of
67:19 - illustrate this let's go ahead and
67:20 - switch this
67:22 - grid here i'm just going to rescale this
67:24 - a little bit
67:26 - let's change this to call dash 3 and
67:30 - call dash 9. it's always a good idea
67:32 - when you're working within a single row
67:34 - when you're working with columns they
67:36 - should add up to 12.
67:38 - so 9 plus 3 is 12 because 12 is means of
67:41 - full width so let's go ahead and save
67:43 - this
67:44 - and then we can come over here and
67:45 - refresh and now you can see that this
67:47 - first column is only taking up 3 12 of
67:49 - the space and the second column here is
67:51 - taking up
67:53 - 9 12 of the space so that's kind of how
67:56 - you work with the columns inside of a
67:57 - row if i want to add another row down
68:00 - below
68:01 - you simply can just copy this entire row
68:03 - code
68:04 - and drop it right down below and now
68:06 - essentially i'm going to have a 2x2 grid
68:10 - two rows and uh two columns in each row
68:14 - so let's save that we'll just call this
68:15 - one third
68:16 - and we'll call the last one fourth
68:20 - and let's go ahead and save and refresh
68:22 - and now you can see i've got that 2x2
68:24 - grid up there now the bootstrap columns
68:27 - are responsive
68:29 - by default so bootstrap has that built
68:31 - in so if we do an inspect element over
68:33 - here and just move into our responsive
68:35 - mode i'm just going to illustrate how we
68:37 - can
68:39 - change the width here and you'll watch
68:40 - those columns automatically resize so as
68:43 - my viewport gets down you can see those
68:45 - columns kind of jumping around resizing
68:46 - themselves
68:48 - and then eventually we get down here to
68:49 - the mobile
68:51 - and you know that's kind of what it
68:52 - looks like
68:54 - now if you don't specify a media
68:57 - breakpoint modifier the columns will
68:59 - always be three and nine you can see
69:01 - even all the way down on mobile view
69:04 - they're not splitting into a stacked
69:06 - view so if you want them to split we
69:08 - need to change and add some media
69:11 - responsive break points and that's
69:13 - really simple to do in bootstrap you
69:14 - just add
69:16 - small medium or large to your class
69:19 - names so for example on this first one
69:21 - let's call this call
69:22 - dash
69:24 - medium
69:25 - dash three md for medium
69:27 - and we'll call this one call dash medium
69:29 - dash nine
69:30 - now let's go ahead and save and refresh
69:31 - and first i just wanna illustrate this
69:33 - so you can watch what happens
69:35 - so you can see right now this is taking
69:37 - up
69:38 - their they're behaving correctly and
69:40 - then as soon as i get below the medium
69:42 - break point
69:44 - you can see now they stack on top of one
69:46 - another this first and second column
69:48 - so the way the break points work is
69:50 - column medium three means medium and
69:53 - above
69:54 - will behave in three columns once it
69:56 - gets below a medium then they stack
70:00 - so that's kind of what the way that
70:01 - works so let's change this second row
70:04 - down here to call dash
70:07 - large dash three
70:11 - and we'll call this one called as large
70:13 - let's actually make this one down here
70:14 - six and six just to illustrate that you
70:16 - don't have to have them be the same in
70:17 - each row each row can be completely
70:19 - different
70:20 - so you can see here on the large this
70:22 - one is taking up half and this one's
70:24 - taking a path that's a three and a nine
70:26 - as i come below large
70:29 - the second row now stacks because i got
70:31 - below that large break point and as i
70:33 - get below medium
70:35 - now the first row now stacks as well so
70:38 - that's just kind of a little primer into
70:39 - the way the grid works inside of
70:41 - bootstrap you can sort of customize the
70:44 - grid and you can move things all over
70:45 - the place but that's the basics of just
70:47 - working with rows and columns so fairly
70:50 - straightforward to do
70:52 - so what we're going to do now is we're
70:54 - just going to make all these six i'm
70:56 - just going to have four equal and i'm
70:58 - going to make them all medium so medium
71:00 - and above
71:02 - they will
71:03 - lay out horizontally medium and below
71:06 - they will all stack on top of one
71:08 - another
71:09 - so now we have those sort of grid
71:10 - elements in place there so instead of
71:12 - saying first column second column etc
71:14 - we're going to replace the first column
71:15 - over here with an actual form so let's
71:18 - start out and we'll just add in a form
71:21 - just we're just going to leave this
71:22 - whoops
71:24 - we're just going to leave this as a
71:25 - default form tag here
71:28 - and let's add in a simple form
71:30 - so a form we know has an input
71:33 - so let's give this input a type of text
71:37 - and we'll just give it a name of
71:40 - username
71:42 - and that should work just fine we'll
71:44 - give it an id let's pull this over just
71:46 - a little bit so we can see this
71:49 - an id of username as well
71:52 - okay now forms typically have labels so
71:54 - let's give this guy a label and we'll
71:56 - call it the username
71:59 - and we'll say
72:01 - for
72:02 - equals
72:03 - username so that this label is attached
72:06 - to its
72:08 - uh element whoops looks like i have an
72:10 - extra oh there we go
72:12 - extra bracket in there right there
72:14 - so you can see now i have this little
72:15 - element
72:16 - and that's looking fine now bootstrap
72:19 - has several classes for working with
72:21 - forms that make them line up and display
72:23 - a little bit easier
72:24 - and the first one is an option or an a
72:27 - class name that's cut called call group
72:30 - so let's take a look at that
72:33 - so we're going to come over here inside
72:34 - of our form and we're going to wrap this
72:35 - input inside of a div that has the class
72:38 - of
72:39 - form
72:40 - group i said call group but it's called
72:42 - form group
72:44 - okay so we create that div and then we
72:45 - can just cut this guy out
72:48 - and paste him right inside of there and
72:49 - we'll save and refresh
72:52 - so that will create the form group class
72:56 - whoops
72:58 - and we're going to do one more
73:00 - so let's go ahead and let's actually
73:01 - backtick these a little bit
73:03 - let's just copy this entire form group
73:06 - we're going to paste it right below
73:08 - but this one down here is going to be
73:10 - instead of a label for username let's
73:12 - just call this one password
73:14 - and we'll say 4 equals password here
73:17 - and then the text will just say is
73:19 - password password
73:23 - and we'll go ahead and save and refresh
73:25 - so now we have our username and we have
73:27 - our password
73:28 - and those are looking just fine
73:32 - now you'll notice that there's really
73:33 - not a lot of styling happening on these
73:35 - in fact they're not even lined up
73:37 - properly and that's because we still
73:39 - need to add one more class called form
73:41 - control to our actual inputs so let's
73:44 - come down here to the input we're going
73:45 - to give this guy a class of form
73:48 - control
73:50 - and the same thing down here
73:52 - class equals form
73:55 - control and we'll save and refresh and
73:57 - now you can see they get a little bit of
73:58 - styling built into them by default and
74:01 - they automatically line up nicely for us
74:04 - okay the last thing we're going to add
74:05 - here is we're just going to copy this
74:06 - entire bit one more time
74:09 - paste it down below
74:10 - and we're going to call this one will
74:13 - will delete the label because this one's
74:15 - just going to be a submit button
74:18 - we'll go ahead and delete the input
74:20 - and we'll replace it with just a button
74:23 - and it's going to have the class of btn
74:26 - and btn btn-primary
74:29 - and then we'll just call this submit
74:31 - and we'll save here and refresh you can
74:34 - see that now adds in a submit button
74:36 - right below our column there
74:38 - now these two options are also bootstrap
74:40 - classes so this is giving the class of
74:41 - button and then we have what style of
74:44 - button is a secondary one so we have
74:46 - button primary we have button secondary
74:49 - there's
74:50 - all sorts of different color classes
74:51 - that bootstrap has where you can change
74:53 - the buttons we can say
74:54 - button dash large whoops
74:57 - btn-small or btn-large to make small and
75:00 - large variants of these buttons
75:02 - we can do outlines and things like that
75:05 - so anyway we'll just leave this back
75:06 - here at our primary
75:08 - button for now oops let's change this to
75:10 - primary
75:12 - okay so that's just the basic form
75:14 - that's just a typical stacked horizontal
75:18 - form where the labels are above the
75:20 - inputs
75:21 - in our form over here we're going to do
75:22 - the exact same thing except our labels
75:24 - are going to be to the left of the
75:26 - inputs
75:28 - okay in order to do that we're going to
75:30 - copy all of this form we just barely
75:31 - built and paste it down into the second
75:34 - column here let's just save and refresh
75:36 - here so we can see that now in order to
75:38 - get our labels over on the left we
75:39 - essentially are going to be leveraging
75:41 - bootstrap's grid system to make our
75:42 - labels take up two columns and our
75:46 - value our input fields to take up 10
75:48 - columns so you can you can nest the
75:51 - bootstrap grid so i can have a container
75:52 - in a row and i can have a six column box
75:55 - and inside of that six column box i can
75:57 - create another full grid and you know do
75:58 - columns and rows inside of there so you
76:00 - can have nested grids inside of grids
76:02 - uh with the bootstrap grid just fine
76:04 - so let's go ahead and take a look at
76:07 - that
76:08 - so in order to get this to work the one
76:10 - thing we need to do is we give our label
76:13 - a class
76:14 - so we're going to say class equals
76:17 - and then we just call this guy
76:19 - we basically give it whatever column we
76:21 - want so we're going to say call dash
76:23 - small dash 2.
76:25 - okay so let's save and refresh here so
76:27 - you can see that that's going to take up
76:29 - two columns
76:31 - and then we need to wrap the input field
76:33 - here in another row so we're going to
76:35 - say div
76:37 - class equals
76:39 - call dash not not row a column call dash
76:42 - small dash 10
76:45 - okay and then we'll just close this guy
76:48 - off
76:49 - after
76:50 - whoops it's getting a little bit tricky
76:52 - to see there
76:53 - and then let's refresh here
76:56 - and let's
76:57 - pull this up so we can kind of see this
76:59 - okay
77:00 - and then we also need to give
77:03 - to our
77:04 - form group one extra class as well here
77:08 - because our form group is going to act
77:09 - as a row so we're going to also give it
77:12 - the class of row
77:13 - so now we can refresh here and you can
77:16 - see now those are laying out a side by
77:18 - side
77:19 - inside of that area
77:21 - so this of course is squished down too
77:24 - much you can't see that there we go you
77:25 - can kind of see that so now they're
77:27 - laying side by side now you can notice
77:29 - it's a little bit subtle but the
77:30 - username is actually at the top it's
77:31 - aligned at the top of the input we want
77:33 - this guy in the middle and in order to
77:35 - do that we have to give one more class
77:38 - to our label which is call dash form
77:41 - dash
77:42 - label
77:43 - now let's save and refresh here and you
77:45 - can see what that does it just centers
77:47 - it up so it's in the middle of that form
77:49 - over there so now we just need to apply
77:51 - all the same things
77:52 - to the second one so we'll just take
77:55 - this down here
77:56 - we'll take this entire class
77:59 - for the label we'll paste it down here
78:01 - as well
78:02 - and then we'll take this div
78:05 - and we'll wrap this input
78:08 - in a div as well just like we did before
78:12 - and
78:13 - save and refresh over here
78:17 - there we go so now those are laying out
78:19 - side by side and this one down here we
78:21 - probably want our submit button maybe
78:23 - over here right we want to kind of have
78:24 - a blank space right there
78:27 - what we're going to do is we're going to
78:28 - follow the same process we did before
78:30 - we're going to come down to this div we
78:32 - have our button inside of we're going to
78:34 - give it a row so it acts as a wrapper
78:36 - and then we're going to wrap this button
78:38 - in a div so we'll say div class equals
78:42 - call dash small dash 10 so it's going to
78:45 - be taking up
78:47 - 10 units there and again we'll cut this
78:50 - guy out paste him inside of there
78:54 - okay and what we can do now is we can
78:56 - use a property called offset so we can
78:58 - say offset
79:00 - dash small
79:02 - dash two
79:03 - and you'll see when i save and refresh
79:05 - here watch this guy jump right over here
79:07 - so offset what that means is it's going
79:09 - to offset those 10 columns over
79:12 - two columns so now we essentially have a
79:13 - blank column here and then this guy
79:15 - starts over there
79:17 - so that's pretty easy way of doing that
79:19 - so now we have the two methods we have
79:20 - the stacked one we have the with the one
79:23 - with the labels on the left and then
79:24 - down here let's just merge these two
79:26 - together and we're going to be doing an
79:27 - inline form
79:29 - so instead of having
79:31 - two columns down here
79:34 - on our row let's just delete this one
79:36 - and let's just make this one
79:39 - a call medium actually it's not really
79:41 - going to matter we can just say call 12
79:43 - and this one and it'll be full width
79:44 - column
79:46 - you can see like so
79:48 - so let's kind of pull this guy down a
79:50 - little bit because we're just going to
79:51 - be kind of paying attention to this
79:53 - third column here
79:55 - that looks pretty good
79:56 - okay so let's add the final inline form
80:02 - let's go ahead and copy pasta
80:05 - just like we did before copy paste
80:07 - so we're going to copy all that form
80:09 - code there and we're going to paste it
80:10 - down into this 12 column
80:13 - element and refresh so there we go
80:16 - and in order to create a form that's
80:18 - inline you come to your main
80:20 - form and you give it a class that's
80:22 - called form dash inline
80:25 - and we'll save and refresh here and you
80:27 - can see that just automatically converts
80:29 - things to be inline the one thing i do
80:31 - need to do is with the form inline we
80:33 - don't necessarily need all these form
80:36 - groups and rows because that was for our
80:38 - last sample
80:39 - so we can delete all of those guys
80:43 - let's see
80:45 - that guy that guy so we just have our
80:47 - labels
80:48 - save and refresh there
80:50 - oops i deleted too much
80:52 - oh i still need my form groups whoops
80:54 - let's undo that undo that undo undo undo
80:58 - so the thing i need to delete is the
80:59 - rows so we don't need separate rows for
81:02 - each one
81:03 - and then down here on this button we
81:05 - don't need to have this guy
81:07 - offset anymore as well
81:10 - so now let's save and refresh there
81:13 - okay
81:14 - something's still happening here oh yeah
81:16 - i still have these setups this is from
81:18 - the previous example so i've got to go
81:20 - remove all that stuff we just really
81:21 - added
81:22 - so we can delete
81:24 - uh we can delete that
81:26 - we can delete this because they're not
81:28 - they're not taking up
81:30 - columns 10 and 2 anymore
81:33 - so let's clean all that up and refresh
81:38 - okay
81:39 - so that's looking pretty close there
81:43 - so we can now go ahead and remove these
81:46 - form groups as before
81:49 - we don't need any of them
81:53 - so let's save and refresh all that you
81:55 - can see it's laying out the same
81:57 - and you can see there's a little bit of
81:58 - padding and whatnot issues in inline
82:00 - forms we could solve that by wrapping
82:01 - them in the grid but we don't want to do
82:03 - that i'm going to illustrate one other
82:05 - feature of bootstrap which is its
82:06 - ability to add padding and margins to
82:08 - any elements with just class names
82:10 - so we can come up for example to our
82:12 - username
82:13 - so let's actually back
82:16 - uh
82:17 - tick these a little bit so we can see
82:18 - this a little bit better
82:20 - so on the
82:23 - label itself in the class
82:25 - i can give this guy some you can say
82:28 - padding so p is for padding and you can
82:30 - see they have five levels p one through
82:32 - five so if i see if i say padding dash
82:36 - five and save and refresh
82:38 - you can see that adds five units of
82:41 - padding around that helmet
82:43 - so you can also say pr for padding dash
82:46 - right top bottom pb pr pl
82:49 - you can say px which means the x-axis
82:52 - you can say p-y which means the y-axis
82:54 - the top and bottom and the left and the
82:56 - right so you can add all sorts of
82:57 - modifier keys to adjust the padding
83:00 - so i'm going to say pr
83:01 - dash one and save and refresh here and
83:04 - you can see that just adds a little bit
83:05 - of padding there on the left
83:07 - um and you can sort of tweak padding
83:09 - tweak all those things to adjust your
83:11 - form elements
83:12 - just how you want
83:15 - the issues you see here is our submit
83:16 - buttons actually come down to another
83:17 - line and that's because we still have
83:20 - all these form labels
83:22 - that we added from our previous sample
83:24 - to
83:25 - so we can go ahead and delete those when
83:26 - you're working with inline forms you
83:28 - don't need a lot of additional classes
83:29 - you can just kind of almost have vanilla
83:31 - inputs and labels and they'll work sort
83:33 - of as you expect
83:35 - so there we go now that's sitting over
83:37 - where it's supposed to so i can come
83:38 - down here to my password and for this
83:40 - one let's give it a class of whoops
83:43 - p x so it's going to be on the left and
83:45 - right
83:46 - of one and we'll refresh that and you
83:48 - can see how that adds on the left and
83:49 - right
83:50 - and then on our submit button here too
83:53 - we'll do the same thing of
83:55 - uh px-1 or something
83:58 - so you could use
84:00 - all those different padding classes now
84:01 - you can also do margins so p is for
84:03 - padding m
84:05 - is for
84:06 - margins which is the outside right of
84:08 - the box model
84:09 - so
84:10 - uh and the same modifiers work for
84:12 - either one
84:13 - so there is our final form so we have
84:15 - three different forms we have our top
84:16 - one
84:17 - our left one and our bottom one all
84:19 - built three different ways and bootstrap
84:21 - and they're all fully responsive
84:23 - and behave and work really well so
84:26 - that's all we're going to do for our
84:27 - forms page let's jump now over and
84:29 - create our second page which is going to
84:31 - be for our tables
84:33 - so we're going to come back over here to
84:35 - vs code
84:36 - and we'll create a new file inside of
84:38 - our demo folder
84:40 - and this one's going to be
84:42 - tables.html
84:45 - and the same thing like we did before
84:47 - let's just actually come to our forms
84:48 - we'll say command a we'll come over here
84:50 - and command v to paste
84:51 - and let's go ahead and delete everything
84:54 - inside of our
84:56 - body
84:57 - we'll leave our container because we're
84:58 - going to need that so we'll kind of
85:00 - delete all this stuff
85:01 - there we go so we just have another
85:02 - container again inside of our
85:05 - body tag and this time let's come over
85:07 - here and change this to tables
85:10 - whoops
85:12 - and hit return so now i have a blank
85:14 - empty document to work with these tables
85:17 - now you may be wondering why did i show
85:19 - you all this bootstrap stuff if i
85:20 - haven't even shown you where you can get
85:22 - an install
85:23 - and work with the bootstrap
85:24 - documentation so let's take a look at
85:26 - that the website is bootstrap
85:29 - getbootstrap.com and i wanted you to
85:31 - just get your hands wet a little bit
85:32 - with bootstrap before you
85:35 - so you can kind of see how those classes
85:36 - and whatnot work before you dive deep
85:38 - into the documentation the documentation
85:40 - is a little bit overwhelming because
85:41 - there's just a lot to learn with
85:42 - bootstrap
85:44 - but you come over to getbootstrap.com
85:46 - and you can download the full source
85:48 - here and play around with it but what
85:50 - you really want to do is come over here
85:51 - to the documentation tab and it has
85:54 - fairly good search so if you want to
85:55 - work with tables you can just come over
85:57 - here and type tables and hit return
85:59 - there and it will just pull up all the
86:01 - various code for the tables
86:03 - all the different classes that modify
86:05 - tables
86:06 - and the different looks and fills of
86:07 - tables
86:08 - you can see here that bootstrap is a
86:11 - utility framework because almost
86:13 - everything in bootstrap is controlled
86:14 - and modified with css class names
86:17 - so
86:18 - adding table styles just like we added
86:20 - form styles it's all done with class
86:22 - names you rarely go in and edit the
86:24 - source of course we're going to be doing
86:25 - that in part three
86:26 - but most people will just use class
86:28 - names to sort of you know customize and
86:30 - tweak and move things around
86:32 - as they're needed
86:33 - so this is where you can come and read
86:36 - about how table code works and play
86:37 - around with all this various
86:39 - the various options so rather than
86:41 - typing all the table code out by hand
86:43 - we're actually going to use some copy
86:44 - paste here from the documentation so
86:46 - we're going to come down here and we're
86:47 - going to start with the option called
86:49 - table head options and we're going to
86:51 - copy all of this table code from this
86:53 - example here
86:55 - and the only reason we're doing this
86:56 - here is mainly so we can kind of see
87:00 - how they look by default and then if we
87:02 - decide to do any overrides later on we
87:04 - can kind of compare our overrides with
87:05 - the default bootstrap styles so i'm just
87:07 - copying this first table here let's come
87:09 - over to the container and we will paste
87:12 - and let's just save that and i'll back
87:13 - over here to our page and refresh
87:16 - so here we have a basic table i'll just
87:17 - go over a couple of these class names
87:19 - quick
87:20 - but you can see here that you just give
87:22 - it the class of table
87:25 - and if you have a t-head element you can
87:27 - give various classes so i can say t-head
87:29 - dark i can say t-head light let's save
87:32 - and refresh that
87:33 - and i can also use the various uh color
87:36 - classes so i can say like primary or
87:38 - secondary or blue or pink and all that
87:40 - sort of different stuff so you can color
87:42 - these guys um
87:44 - various ways oh i guess warning one
87:47 - doesn't work on that one so we'll go
87:48 - back to dark because that one was
87:50 - working fine there
87:52 - and you can see that this by default
87:54 - here the table is getting some lines and
87:57 - that's because we have the class of
87:59 - table on the main table element if i
88:00 - take that off and save and refresh here
88:02 - you can see we just get a default old
88:04 - html table
88:07 - so just a couple of properties here on
88:09 - this guy i'm going to leave this table
88:10 - as default and then i'm going to grab
88:12 - this table
88:15 - and i'm going to copy it and paste it
88:17 - down below to add just another exact
88:18 - copy of it so we're going to have two
88:20 - tables here
88:21 - now on this one here let's change
88:25 - the table we're going to call this table
88:27 - dash bordered
88:29 - and i'll save and refresh and you can
88:31 - see that that's going to add a border
88:32 - all the way around
88:34 - also i'm going to add an option called
88:36 - table dash striped
88:38 - and that's going to make every other row
88:40 - alternated down have alternating colors
88:43 - which is helpful to read if you have a
88:44 - lot of data right when you're scanning
88:45 - through a table
88:47 - and then lastly on this guy i'm going to
88:49 - show you one thing you can do you can
88:51 - add an extra div here as a wrapper
88:53 - element
88:54 - and on this wrapper you can give it the
88:55 - class of table dash
88:58 - responsive
88:59 - and what this means i'm going to make
89:01 - this closing tag close after the last
89:03 - table and save and refresh
89:06 - if your browser
89:08 - is smaller than the width of the table
89:10 - this is a common problem tables are
89:12 - tricky to deal with on
89:14 - mobile devices but if my browser is
89:16 - smaller so let's come down here and pull
89:18 - this under
89:20 - table dash responsive gives you this
89:22 - slider you can see my top table doesn't
89:24 - get that it's actually truncated the
89:25 - data i can't even see there's more table
89:27 - data over there unless i
89:28 - horizontal scroll the entire page but by
89:31 - adding that table dash responsive
89:33 - wrapper you allow the users to inline be
89:35 - able to scroll back and forth and see
89:37 - the additional table data
89:39 - which is kind of a nice little feature
89:41 - so that's a really easy way to make your
89:42 - tables responsive by just wrapping them
89:44 - with that single div
89:46 - so there's a couple of tables i'm just
89:47 - going to show you here in the
89:48 - documentation you can add colors you can
89:51 - add alternating row stripes this is one
89:53 - we just pretty looked at dark tables
89:55 - light tables down here at the very very
89:57 - bottom here
89:58 - you can see they have color variations
90:00 - for rows success danger warning you just
90:02 - add those on the table row class itself
90:04 - so if i want this table row here i can
90:07 - say class equals
90:09 - table dash success
90:12 - and now when i come back here and
90:13 - refresh my form that guy gets
90:15 - highlighted with the success which is
90:16 - green by default in bootstrap so there's
90:18 - all sorts of ways you can tweak and
90:19 - color tables
90:21 - and the documentation is really well
90:23 - done here so you can kind of read
90:24 - through that so that's really all we're
90:26 - going to do on our tables page
90:29 - our third and final page we're going to
90:31 - be setting up here before we jump into
90:32 - the third part of this tutorial
90:34 - is setting up a page we're going to call
90:36 - cards
90:37 - this could be used for like widgets or
90:39 - little elements but we're just going to
90:41 - call it cards
90:42 - so let's come over here and we're going
90:44 - to create one more page in our demo
90:46 - new file let's call this cards.html
90:50 - just like we did before let's copy all
90:51 - the code for tables and we'll just paste
90:53 - it in the cards here
90:54 - delete everything inside of our
90:56 - container
90:59 - and save
91:01 - okay
91:02 - so let's come over here and move over to
91:05 - cards
91:07 - so cards were a concept that was
91:08 - introduced in bootstrap 4. they didn't
91:11 - exist in bootstrap
91:13 - 3
91:14 - they're kind of like bootstrap threes
91:16 - wells they have this thing called well
91:18 - uh cards are kind of an uh fancier
91:20 - version of wells i suppose but they're
91:22 - really really nice you can do some
91:24 - really cool things with cards i actually
91:25 - like them a lot i use them quite often
91:27 - whenever i'm working with bootstrap
91:29 - so the card elements let's come over
91:31 - here to the documentation
91:33 - uh you can just hit cards here
91:35 - and you can really
91:37 - do a lot with cards so cards basically
91:40 - have three basic parts there's a top
91:42 - which they call a card header
91:44 - there's the body which is the card body
91:46 - and the bottom is called the card footer
91:49 - so you can add images you can do all
91:51 - sorts of things you can stack them do
91:52 - columns with them
91:54 - but i just want to show you a basic card
91:56 - here so i'm going to come down here we
91:57 - go
91:59 - so this one where's one with the footer
92:00 - here i'm just scrolling down there we go
92:02 - so here's one that has a header you can
92:04 - see this is the card header this is the
92:06 - card body and then this is the card
92:07 - footer
92:09 - so uh let's go ahead and just copy this
92:11 - code actually let's just type this out
92:13 - because cards i think are worthwhile to
92:14 - kind of see how they work
92:17 - so
92:18 - what's cool about cards is we can place
92:19 - them inside of a grid to create some
92:21 - interesting elements so the first thing
92:23 - is let's create a div
92:25 - which is class
92:26 - of row
92:28 - and then let's create two columns so
92:30 - we're going to say div
92:31 - class equals call dash six
92:34 - and then let's just go ahead and copy
92:36 - this
92:37 - and place it down below here
92:40 - and we'll just make sure this is working
92:42 - we'll call this one one we'll call this
92:43 - one two come over here and refresh
92:46 - okay so that's working fine
92:48 - whoops
92:50 - we have both of our columns our left and
92:52 - right columns here and now inside of
92:54 - these columns we can add some content
92:58 - so inside of our first column here
93:00 - let's add a card
93:02 - so for a card you say div class equals
93:05 - card
93:07 - and then for the header you can say div
93:09 - class equals card dash header
93:13 - like so
93:14 - and then you can add a header so maybe
93:16 - i'm going to add an h let's do an h2
93:18 - of
93:19 - card
93:20 - title
93:22 - okay below the header we have a div of
93:25 - class equals card dash body
93:28 - and this is the card body
93:31 - and then lastly we have the div class
93:34 - equals card dash footer
93:37 - whoops and this guy
93:42 - oops i missed the angle bracket there
93:46 - i think i just double added it yep
93:49 - is our footer
93:51 - okay so we're going to save and refresh
93:52 - here and you can kind of see how those
93:54 - guys lay out by default
93:56 - so they work
93:58 - pretty fancy there we just have our
94:00 - basic
94:02 - card
94:02 - so let's go ahead and just do a little
94:05 - bit of lorem ipsum here
94:08 - so we'll just save that so you can kind
94:10 - of see what that looks like with a bit
94:11 - more information there
94:13 - and then also
94:15 - let's copy all of this card code
94:19 - and paste it into our second column
94:22 - and save and refresh
94:23 - and you can see there's our next card
94:26 - now i'm going to duplicate both of these
94:27 - rows so i'm going to grab each of these
94:30 - rows
94:32 - and copy and paste
94:34 - so we're gonna have a two by two grid of
94:36 - cards you can kind of see all these
94:38 - different cards in there
94:40 - so that is looking fine here
94:43 - whoops i
94:44 - copied i didn't add a row
94:47 - so i'm actually going to undo that here
94:49 - i've got to add
94:51 - my row starts there
94:54 - so i need this guy as well so i need to
94:56 - add another row
94:58 - and this will fix that little margin and
95:00 - padding issue you just really saw in the
95:01 - preview
95:02 - so let's save that and refresh there we
95:04 - go so now they're the equal you can see
95:06 - they're equal widths before they were a
95:07 - little bit squampous
95:09 - okay so cards you can see they lay out
95:12 - fairly easily now with this sample here
95:15 - i'm actually going to change my
95:16 - container
95:17 - so i want this to be a fluid container
95:19 - just to illustrate kind of another
95:21 - feature here of bootstrap so instead of
95:22 - container i'm going to say container
95:24 - dash
95:26 - whoops
95:27 - container dash fluid watch what happens
95:30 - when i refresh here you can see now it
95:32 - stretches all the way to the edge of my
95:34 - viewport
95:36 - when i resize here
95:37 - like so
95:39 - now again we can use the responsive
95:41 - classes
95:42 - on bootstrap if i wanted to move these
95:44 - guys down or up these cards down here i
95:47 - could come down to this second
95:49 - row
95:50 - of cards
95:53 - and i could give this class a card of
95:56 - margin top dash
95:58 - uh three let's see what that looks like
96:01 - there we go and you can go all the way
96:03 - to four or five right if i want to try
96:04 - to make the gutter match the gutter here
96:06 - it's all the way up to five
96:08 - that way they're going to kind of look
96:09 - fairly similar but
96:12 - you can play with those guys how you
96:14 - want
96:16 - just lost my place there we are
96:17 - so i'll give that one a margin top of
96:19 - four i'll give this one down here a
96:20 - margin top of four as
96:22 - well oops i gave the wrong one a margin
96:25 - top of four
96:27 - that one
96:28 - and
96:33 - oops i gave this one the wrong one
96:35 - let's save and refresh and i'm getting
96:37 - myself confused here so i need my second
96:39 - row my two on my second row so they're
96:41 - down here there we go
96:43 - so that one and that one should each
96:45 - have a margin top there we go and now
96:46 - they're pushed down properly
96:49 - and you can add buttons you can add
96:51 - forms inside of cards you can really do
96:52 - anything you want with cards you can
96:54 - customize the colors with the sass files
96:57 - when we if you want to override those
96:59 - you can see in the documentation here
97:01 - you can even do colors clear down here
97:03 - at the bottom they have some info on
97:04 - colors so if you wanted to colorize them
97:06 - you can just use the bg properties
97:09 - so let's take a look at that really
97:10 - quick so maybe i want this card title to
97:13 - be a different one
97:17 - so we'll come up here to the header and
97:18 - say bg
97:19 - dash
97:20 - primary bg for background and we'll give
97:23 - it our primary color background
97:26 - anyway all sorts of things you can do
97:27 - with cards we can change the color of
97:29 - the text up there we can say text dash
97:31 - white
97:32 - that'll make the text white on that
97:34 - background that's a little of course
97:35 - hard to read you wouldn't want to do
97:36 - that
97:37 - you can see just how far you can
97:38 - customize and take these cards
97:40 - you can make them full width you can use
97:42 - the grid
97:43 - anyway really really cool
97:44 - so that's the card element in bootstrap
97:47 - really helpful for doing things
97:49 - as far as messages and whatnot
97:53 - so
97:54 - that is our three basic pages
97:57 - of bootstrap we have our forms we have
97:59 - our tables we have our cards i just want
98:02 - to illustrate two more things that are
98:04 - common in bootstrap things where we're
98:06 - not going to create dedicated pages for
98:07 - them i'm just going to show you in the
98:08 - bootstrap documentation
98:10 - and those are buttons the button element
98:13 - and the warning or dialog elements
98:16 - so i'm just going to come over here and
98:18 - show you the button group
98:20 - so buttons like we already used this
98:22 - button before but you just give the
98:23 - class of button
98:25 - followed by the modifier whether it's
98:27 - primary secondary success danger warning
98:29 - so those will give you all your
98:30 - different levels of buttons
98:34 - so you can make them big small you can
98:36 - do drop down buttons block buttons you
98:38 - can see you can really take buttons and
98:40 - do quite a bit with them you can do
98:42 - group buttons like this which are kind
98:43 - of like radios
98:45 - for different elements
98:47 - so buttons are very common thing
98:49 - the second one is the alerts
98:52 - so alerts also come in the standard
98:54 - colors so you can have your success
98:56 - warning danger info secondary primary
98:58 - alerts
99:00 - they even have dismissable alerts if you
99:02 - tailor them with javascript but by
99:04 - default you just give them a class of
99:06 - alert and then the color of the alert
99:08 - that automatically gives them a border a
99:10 - background color and it changes the text
99:13 - to match the text of the alert color as
99:15 - well so that's what you do with
99:18 - alerts
99:19 - down here you can see there's a couple
99:20 - options i believe they have yet here's a
99:22 - dismissible alert so you can click the x
99:24 - and it actually dismisses the alert
99:26 - which is helpful for an action that pops
99:28 - up if a user clicks you know save record
99:30 - you want to pop something up that says
99:31 - success and i can go ahead and just
99:33 - dismiss that alert
99:34 - as well
99:36 - so those are alerts
99:37 - kind of in conjunction with alerts are a
99:39 - thing that bootstrap calls modals modals
99:44 - so a modal is like an alert basically
99:46 - that's intrusive so it's going to pop up
99:48 - above everything on the page and require
99:51 - an action from the user
99:53 - that
99:54 - is dismissible so a modal down here you
99:57 - can see this is a modal right but it's
99:59 - going to pop up in front of your page so
100:01 - watch this so when you click a modal you
100:03 - can see it animates down the background
100:05 - gets a little bit of a dimming effect
100:07 - and then you can read the thing and you
100:08 - can dismiss it or you can you know do
100:10 - whatever you want here of course but
100:12 - that's what bootstrap calls a modal it's
100:14 - an intrusive alert basically is the way
100:17 - i like to think about them
100:19 - so those are just the last couple things
100:20 - i wanted to illustrate quickly on the
100:22 - bootstrap documentation we could have a
100:24 - 20 hour course just on bootstrap really
100:27 - because there's just a lot to learn but
100:29 - that's a few of the basics and setting
100:31 - up some bootstrap grids working with a
100:32 - few of the elements learning about those
100:34 - classes and the grid system
100:36 - and next in part three of this tutorial
100:38 - we're now going to build our custom
100:41 - wrapper or a custom admin theme around
100:43 - bootstrap
100:45 - bootstrap does have the ability to
100:46 - create nav bars so nav bars that
100:49 - automatically
100:50 - will respond and give you a drop down
100:52 - menu on mobile but they're a little bit
100:54 - limited and when most people create
100:56 - admin themes they actually don't use the
100:57 - built-in bootstrap nav system they kind
101:00 - of create their own one thing bootstrap
101:02 - doesn't have which we're going to build
101:03 - is what we call an off canvas menu where
101:05 - the menu slides in and out from the side
101:07 - on a mobile view
101:09 - that's not possible to do with native
101:10 - bootstrap
101:12 - so what you'll see is most people end up
101:14 - building those by hand and then sort of
101:17 - putting bootstrap in the middle of their
101:18 - app but the actual skeleton the menu the
101:22 - sidebars and whatnot are custom created
101:24 - and that's exactly the method we're
101:25 - gonna take as well so come join in in
101:28 - part three and let's take a look at that
101:32 - so let's go ahead and start with uh the
101:37 - code here so i'm going to pull up my
101:38 - notes
101:39 - there's quite a bit of html
101:42 - that we'll add but the good news is once
101:44 - we get all the html in here we kind of
101:46 - leave it alone we don't nearly touch it
101:50 - so we are going to add a couple of
101:52 - classes on our body so we're going to
101:54 - say class equals app
101:57 - and sidebar dash mini this is going to
102:00 - enable this mini sidebar you can either
102:03 - disable or enable this with this little
102:04 - toggle
102:06 - and then we're going to add in a header
102:10 - and then we're going to add in a
102:13 - unordered list
102:15 - so ul
102:16 - and it's going to have one
102:19 - two
102:20 - list items so we're gonna say
102:23 - li
102:24 - times two
102:28 - and the first one the ul is going to
102:30 - have a class
102:33 - of
102:35 - app dash nav
102:38 - and the list item
102:40 - is going to have a class
102:43 - of the first one anyway
102:46 - app dash
102:49 - search
102:51 - and the second one
102:53 - is going to have a class of
102:58 - drop down this is going to be a
102:59 - bootstrap drop down here in just a
103:01 - minute
103:03 - okay let's save and see what that looks
103:05 - like
103:12 - there we go so there's both of those i
103:14 - guess when you save the html because
103:15 - it's the distribution it's not hot
103:17 - reloading
103:18 - but that's fine
103:20 - okay and we're also going to be adding
103:22 - in here into our header element
103:25 - the
103:27 - anchor tag
103:28 - so we're going to have an anchor
103:31 - and it's going to have an href equals
103:35 - just
103:36 - the main this is going to be our hq
103:37 - admin this is going to be our title
103:39 - essentially
103:40 - in our nav bar
103:43 - and this guy is going to have a class
103:47 - of app dash header and then it's the
103:51 - logo element
103:53 - so we'll save that refresh that over
103:55 - there you can see that
104:01 - we're going to be adding our sidebar
104:02 - toggle in here in just a minute this guy
104:04 - actually needs to come back
104:06 - one space
104:11 - okay so that is it
104:14 - for those two
104:16 - inside of our drop down
104:19 - we need to add in a few links
104:22 - so our drop down item
104:25 - is going to have an icon so here we can
104:28 - finally test this out
104:31 - i'm just double checking my notes
104:34 - there's so much code i'm skipping over
104:35 - quite a bit of code because i don't just
104:36 - want to go start from finish i kind of
104:38 - want to build this in pieces so you can
104:39 - kind of see how it's built
104:41 - so i'm trying to skip back and forth a
104:43 - little bit
104:45 - uh so let's add an anchor tag
104:49 - so
104:50 - right here inside of our first drop down
104:54 - we're going to be adding an anchor tag
104:56 - and this anchor tag is going to have the
104:59 - class of
105:01 - app dash
105:03 - nav
105:06 - item
105:09 - like so
105:11 - and it's going to have an href that's
105:13 - just empty
105:14 - it's going to have a data dash toggle
105:18 - which is going to be set to drop down
105:21 - and we're going to do an aria label for
105:24 - accessibility here
105:25 - it's going to be set to open
105:29 - open uh
105:30 - open menu
105:32 - sure
105:34 - and then we're going to
105:37 - close off that anchor tag now inside of
105:39 - the anchor tag
105:40 - i'm going to turn on my line wrapping
105:42 - here because it's getting a little crazy
105:45 - oops wrong key inside of vs code here
105:49 - inside of this anchor tag we're going to
105:50 - add an icon so icon class now we're
105:52 - finally going to test out our font
105:54 - awesome so fa
105:56 - fa search
105:58 - and then close off whoops that icon
106:01 - and save and let's refresh
106:03 - oh sweet so fantasm is working correctly
106:06 - so there's our little uh search icon so
106:08 - when we click on this it's going to
106:10 - toggle
106:13 - the
106:14 - i actually don't want this one if they
106:15 - search i'd like we want this one as
106:18 - uh the person which is like f a
106:22 - dash user
106:25 - i think fa-large
106:27 - let's refresh that there we go so when
106:30 - we click on this guy it's going to drop
106:31 - down our drop-down menu
106:34 - for us
106:36 - so now let's add the drop down menu
106:38 - and that's going to be added as an
106:40 - unordered list
106:42 - right inside here let's actually
106:44 - do this
106:45 - ul
106:47 - um
106:49 - li times 3
106:52 - and each of those anchors is going to
106:55 - have an anchor tag
106:58 - okay whoops the ul didn't work
107:00 - don't know what i did
107:02 - oh well so let's just manually do that
107:04 - unordered list
107:06 - i'm going to move the terminal down here
107:07 - a little bit
107:09 - close the unordered list
107:12 - tab all these guys over so you can see
107:14 - those so our unordered list is gonna
107:16 - have the class of drop down dash menu
107:20 - and
107:21 - the
107:22 - it's going to be our settings menu and
107:24 - the drop down
107:29 - dash menu
107:31 - dash right
107:33 - because we on the right side of our page
107:36 - and then each of these list items have
107:38 - an anchor tag and these anchor tags are
107:40 - going to have the classes
107:43 - class equals
107:45 - drop down dash item
107:48 - and we'll just call this one like
107:51 - uh something
107:53 - we'll just give all these anchor tags
107:54 - some text for just a minute
107:57 - and refresh
108:00 - and it's working look at that so this is
108:02 - the bootstrap drop down so when i click
108:03 - this
108:04 - i'm getting my drop down menu to fly
108:06 - down inside of here
108:08 - now we need to add these classes in
108:13 - to these guys as well that styles them a
108:15 - bit prettier so they have the drop down
108:18 - items
108:19 - and refresh so there we can toggle out
108:21 - that little drop down let's add some
108:23 - font awesome icons in these anchor tags
108:25 - as well so icon class equals
108:29 - f a f a dash
108:32 - cog we'll say
108:35 - on this guy
108:37 - and then close the icon
108:39 - let's copy that and paste it into we're
108:43 - gonna do a space right there
108:45 - paste that one into there and that one
108:46 - into there so we'll have a cog
108:49 - we'll have a user or something and we'll
108:51 - have a
108:52 - this one's called sign dash out
108:56 - dash alt
108:58 - so now we can refresh and see these so
109:00 - there's our three icons some settings or
109:03 - something right sign out so maybe we'll
109:05 - call this one log out
109:08 - call that one a profile and we'll call
109:10 - this one the
109:12 - settings refresh over here
109:15 - and you can see our little drop down
109:18 - looking pretty lovely there
109:20 - so that's working fine now
109:24 - on our drop down menu
109:27 - so that's pretty much it for our header
109:29 - we have our title
109:31 - we have a search inside of this search
109:35 - we're going to actually add in an input
109:37 - because we actually want a search bar
109:39 - so an input type
109:41 - class this as app
109:43 - dash
109:44 - search
109:46 - and then it's going to be our input
109:49 - the type here
109:50 - whoops
109:52 - type is going to be set to the search
109:54 - type that's the html5 search type
109:57 - the new input type
109:59 - and href
110:01 - actually we don't need an href on this
110:04 - um we'll say data dash
110:07 - no let's see
110:09 - placeholder that's what i'm looking for
110:12 - placeholder text is going to be set to
110:15 - search
110:18 - and that should be fine for the input
110:23 - let's see what that looks like there's a
110:25 - little search bar perfect
110:26 - and then we'll add in a button
110:28 - and we'll give this the class of app
110:32 - dash
110:33 - search underscore
110:36 - button this is all these css rules i'm
110:39 - adding here are all our we're going to
110:40 - be using custom css so this is not
110:42 - bootstrap css we're going to be writing
110:44 - this css to sort of tailor this to our
110:46 - needs
110:47 - but we could easily use bootstrap code
110:49 - as well but we're going to use a lot of
110:50 - bootstrap code later
110:53 - so there's our button
110:56 - and we'll close the button off and we
110:58 - will add an icon here so another icon fa
111:02 - whoops
111:03 - class
111:06 - close the icon at
111:09 - class equals f a f a dash search
111:14 - uh and save and refresh
111:16 - there we go now we got our little
111:19 - search bar over there so in other words
111:22 - we can type in here and then click that
111:24 - search button and make something happen
111:26 - we'll of course style that on our own
111:28 - here in a minute
111:31 - and that's most of the code there for
111:34 - our header
111:36 - so quite a bit of code we'll be styling
111:38 - this a little bit later with some css
111:40 - and now let's just add a couple other
111:42 - little pieces here for our
111:46 - sidebar
111:48 - so we're going to have some css
111:52 - we're going to have our sidebar and
111:54 - we're going to have
111:56 - our content
111:58 - so let's go ahead and do the sidebar
112:00 - first
112:01 - so div
112:02 - class equals hap dash sidebar
112:08 - okay there's that it's going to have an
112:10 - unordered list ul
112:14 - li
112:16 - times i don't know however many links we
112:18 - want there five
112:24 - uh i guess they'll all have anchor tags
112:26 - as well
112:28 - so that looks pretty okay
112:30 - for that
112:34 - and this ul is going to have the class
112:38 - of app dash
112:40 - menu
112:43 - and we're going to have
112:50 - that that looks actually fine instead of
112:52 - a div we could use a side here because
112:54 - it's technically a sidebar so let's
112:56 - might as well use our html5 tags call
112:58 - that aside
113:00 - app sidebar app menu
113:02 - and then a whole bunch of leaks that
113:04 - we'll be doing
113:06 - with our menu items so we'll save and
113:07 - refresh that
113:09 - nothing in these for right now but we'll
113:10 - just say test a whole bunch of times
113:13 - test test test test test
113:16 - there we go
113:18 - and then
113:19 - now that we have that aside done we can
113:22 - come down here and add our main element
113:25 - so our main is going to have the class
113:27 - of app dash content
113:30 - oops i said min supposed to be main
113:35 - app content
113:37 - and it's going to have a div that has
113:40 - the class of app title
113:45 - and then underneath app title
113:49 - we are going to have
113:53 - any other content rows and stuff like
113:55 - that so we'll just say
113:57 - div class equals
114:00 - row so this is the bootstrap grid system
114:03 - uh here div class equals call
114:06 - dash medium
114:08 - 6
114:10 - so maybe we'll have a row with
114:14 - two columns this one will be a left
114:15 - column
114:17 - this one over here will be a right
114:19 - column
114:21 - let's save and refresh
114:23 - so you can see on medium there
114:26 - we're getting the left and right and
114:27 - when we go down to a mobile view it
114:29 - automatically stacks so the bootstrap
114:31 - grid is doing that for us
114:33 - so there's the grid system coming into
114:35 - play
114:37 - and that's uh that's pretty much it so
114:39 - you know we can flesh out our main area
114:42 - however we want
114:43 - now the css we're going to add is just
114:45 - going to be to take the header and make
114:47 - a header bar get our left sidebar over
114:49 - on the left and the other column over
114:51 - there on the right
114:52 - and when we'll be off to the races so
114:55 - let's go ahead and do that
114:57 - okay let's start off here in the header
114:59 - section so we can start to flush a
115:01 - little bit of this code out so we're
115:03 - going to move over into our app header
115:04 - as css file
115:06 - and let's go ahead and
115:10 - code a little bit of this we're going to
115:11 - say dot app header we're going to be
115:13 - writing some sas in here so this isn't
115:15 - just pure css this is sas and we're
115:18 - going to say position fixed because we
115:21 - want our header to stay at the top
115:23 - left 0
115:26 - right 0
115:30 - bottom 0 and width 100 so that's a bit
115:34 - of a trick that's going to make it so
115:36 - that our header
115:37 - stretches all the way across
115:40 - our html
115:42 - so the files we want to kind of have
115:44 - handy here
115:46 - um
115:49 - so we can kind of go back forth and
115:50 - double check
115:52 - we can turn this one off we can turn
115:53 - this one off for a minute
115:55 - we can turn that one off
115:57 - turn that one off we'll have our index
115:59 - there we go
116:00 - so this is going to be our app header
116:04 - now
116:06 - inside of our header tag itself
116:09 - we need to give this guy a class that i
116:11 - didn't give before so class equals app
116:14 - dash header
116:15 - and we can save that and refresh and you
116:17 - can see right away our header disappears
116:19 - because we added a bit of that css
116:21 - to it just over there so let's now come
116:23 - back to our
116:24 - app header
116:26 - and uh
116:28 - add some more
116:30 - sas code
116:31 - to this guy
116:35 - okay so with 100
116:38 - we're going to also say display flex
116:40 - because there's several items in our
116:41 - header and we want those guys to be
116:44 - displayed in using the flexbox
116:47 - model
116:48 - and
116:49 - we're going to give a background color
116:52 - here
116:53 - just using red for now just so we can
116:55 - kind of see that you can see our header
116:57 - is there it's just down there at the
116:59 - very bottom
117:01 - um and that's because
117:03 - bottom zero is supposed to be top zero
117:05 - i couldn't see that i was i wasn't even
117:07 - looking at the bottom of my screen
117:09 - there we go so you can see now with
117:10 - display flex
117:12 - my logo and my search bar and my
117:16 - uh this guy right here whatever we call
117:17 - that or drop down they're starting to
117:19 - lay out a little bit differently
117:20 - so that's working okay
117:23 - and we're going to give this guy a z
117:25 - dash index of 10.50 just because we're
117:28 - going to be pushing and pulling some
117:30 - things we want to make sure it stays in
117:31 - the front
117:32 - okay and let's go ahead and also give uh
117:35 - some padding right of 15 pixels
117:39 - so that's looking okay there
117:44 - alright so each of these three elements
117:46 - should be children of our app header
117:49 - so notice we have
117:51 - the app header so our anchor tag is the
117:53 - first child the unordered list
117:56 - is the second child
117:58 - and it's the thing that has those two
118:01 - two inside of it so we're eventually
118:02 - going to take these guys and also make
118:04 - those go side by side
118:06 - in our app nav in a minute but
118:09 - that will do it for that
118:11 - so instead of a background color here
118:13 - we're going to replace this with a
118:14 - variable we're going to call this our
118:16 - primary
118:17 - color our primary color in hex
118:20 - now that variable doesn't exist
118:23 - so we're going to have to open up our
118:24 - variables tab
118:26 - and create it so
118:29 - primary
118:30 - dash hex
118:32 - and we'll just set that to red for now
118:35 - just so we can make sure it's
118:38 - working properly
118:41 - and
118:43 - let's come back to our app header
118:45 - what did i call that primary dash hex
118:49 - is set to red
118:53 - and that's set to primary hex
118:56 - but it's not working there so something
118:59 - is not compiling down
119:02 - in our variables oh i think i know the
119:04 - issue
119:05 - so we have to come back to our main css
119:07 - file
119:09 - and
119:10 - make sure we're importing our app header
119:12 - oh we are
119:13 - we're importing our variables first
119:15 - which is what we want then we're
119:16 - importing our app header
119:18 - so that
119:20 - should be working
119:25 - um
119:26 - oh
119:28 - where is that app header go
119:31 - let's close the title there we go
119:36 - let's close the sidebar and the sidebar
119:38 - mini
119:40 - our variables
119:45 - there we go i put that inside of quotes
119:47 - i was treating as a string but you can't
119:49 - do that with sas variables
119:50 - so now we're back in business
119:53 - for our
119:54 - variable here so we're going to declare
119:56 - specific colors here for these
119:59 - so our primary
120:03 - hex color i'm going to look here in my
120:04 - notes and see what color i have set
120:09 - so 0 0 zero
120:12 - zero zero a zero ff
120:16 - and again you can use whatever colors
120:17 - you want this is just a color scheme i'm
120:19 - going with so this should give a bright
120:20 - blue yep there we go
120:22 - that works
120:25 - and
120:26 - that'll be fine for now
120:29 - okay back to our header
120:32 - so let's go ahead and add in a little
120:34 - bit more css we're gonna design up our
120:36 - logo so this is the app
120:39 - dash header
120:41 - logo
120:43 - and we're going to give this guy a flex
120:44 - of 1
120:46 - 0
120:47 - auto
120:49 - like so
120:51 - and we're going to say color is
120:56 - white
120:56 - so fff
121:00 - and
121:02 - that did not turn white so i must not
121:04 - have this class
121:06 - so app header underscore logo let's go
121:07 - to our index and make sure we do that
121:11 - app dash header
121:12 - underscore underscore logo
121:17 - oh whoops i did a
121:19 - uh i did an id instead of class we need
121:21 - to do a dot there
121:23 - there we go so now you can see that
121:25 - works out okay
121:29 - and let's see where were we so we're
121:31 - gonna change the
121:34 - uh font family
121:38 - so the font family is going to be set to
121:40 - whatever our font family is so i call
121:43 - this my app
121:44 - dash font dash serif now this doesn't
121:47 - exist yet so we gotta come over here we
121:50 - have to create that
121:52 - so we'll call this our app dash font
121:55 - dash serif
121:57 - and this is gonna be whatever you want
121:59 - your fonts to be so i create two fonts i
122:01 - have a serif font and a sans serif font
122:04 - so it's kind of up to you what you want
122:06 - to do there
122:07 - so this one's going to be
122:09 - we're just going to say this is
122:11 - not a serif font but
122:14 - well let's just just say times
122:17 - and then for the we're going to copy
122:19 - this and we're going to say sans dash
122:21 - serif so
122:23 - app font sans serif
122:26 - we'll call
122:27 - verdana just to set those two up
122:31 - okay so
122:33 - um
122:34 - now when we save this
122:36 - you can see our font there just updated
122:38 - to that new font which is times new
122:40 - roman but
122:42 - of course we would swap those out for
122:43 - whatever we want
122:45 - okay uh let's see next
122:48 - we are going to add in
122:52 - text align
122:56 - center and we're going to give a font
122:59 - size
123:01 - of 26 pixels
123:04 - we're going to give some padding of 0 on
123:06 - the top and bottom and 15 on the left
123:08 - and right
123:12 - make sure we have a colon there
123:15 - so that's looking okay
123:21 - line height
123:23 - this is going to really depend on your
123:25 - font as well
123:26 - but i'll just set it to 50 pixels
123:29 - on mine
123:32 - and
123:33 - that should be okay for now
123:40 - so
123:41 - there we have our
123:42 - logo or our
123:43 - title whatever you want to call that guy
123:48 - all right
123:50 - uh now let's work on
123:55 - the search and the search button up
123:58 - there
123:59 - so we're going to say dot
124:01 - app dash search
124:04 - we're going to set that position to
124:08 - relative relative
124:12 - display as flex
124:15 - align self
124:18 - center
124:19 - margin right
124:21 - margin right at 15 pixels
124:25 - uh padding
124:27 - we're just gonna leave that alone for a
124:28 - minute actually
124:30 - and
124:32 - that'll do fine there
124:37 - so the app search again is
124:40 - going to be
124:43 - up and where is that app search up
124:45 - inside here so that's the list item
124:47 - itself now we're going to be doing the
124:49 - input and the button
124:51 - so the app search
124:53 - input
124:54 - is going to be next
124:58 - and it's going to have a border so we're
125:01 - getting rid of all that default stuff of
125:03 - zero you can kind of watch this update
125:05 - over here as i'm saving
125:08 - and we're going to give it some padding
125:11 - 5 pixels
125:14 - 10 pixels
125:18 - and
125:22 - padding dash right we're going to get
125:25 - override and make 30 pixels
125:28 - border dash radius to round the corners
125:31 - of two pixels
125:34 - background dash color we're going to
125:36 - make
125:38 - uh
125:39 - rgba
125:41 - and we're going to make it
125:43 - 255 255
125:46 - 255.8 for our opacity or alpha value
125:51 - so now you can see it's kind of
125:52 - semi-transparent inside of here right
125:55 - and this blue background is glowing
125:57 - glowing through i don't know if that's
125:59 - shining through transparency through
126:03 - and that should do it uh for that we
126:06 - could change the placeholder color we
126:07 - can add some transitions we can do all
126:09 - sorts of stuff there but we'll call that
126:11 - good
126:12 - so next we're gonna be doing our app
126:15 - search
126:17 - app search
126:20 - button itself
126:22 - so for this guy we're going to say
126:24 - position
126:26 - absolute
126:28 - we want right zero
126:31 - and we want
126:33 - padding actually we want top
126:35 - 10 pixels
126:38 - we want the padding
126:41 - to
126:42 - be 0 on the top and then 10 on the left
126:46 - and right
126:48 - turn off all the borders all together
126:51 - let's save that and see what that does
126:54 - so that looks pretty good we're going to
126:55 - make
126:56 - the
126:58 - color
127:00 - the same as
127:03 - no actually we're not we're going to
127:04 - make the color another rgba
127:10 - 000.8 eight
127:13 - for the color
127:16 - and
127:18 - no background
127:20 - because we don't want that little see
127:21 - how there's a little
127:22 - background right there i'm gonna turn
127:24 - that off and there we go so you can type
127:27 - inside of here and then you can just
127:29 - click that search button and it kind of
127:30 - integrates right into that element with
127:32 - an icon fantastic icon pretty cool
127:34 - so that's pretty much all we need to do
127:36 - there we can also set the cursor
127:39 - cursor
127:40 - cursor
127:42 - to pointer
127:43 - and that way when we hover over this guy
127:45 - we get the pointer cursor instead of the
127:47 - default
127:49 - cursor
127:51 - all right that will do it for the search
127:56 - uh and the logo
127:58 - so we still have to lay these guys out a
128:00 - little bit
128:01 - uh better and we have to kind of fix
128:03 - this little drop down because we want
128:04 - this to kind of appear right over the
128:06 - side of there
128:08 - but that will
128:10 - mostly get us where we need to be
128:14 - so now let's work on the sidebar and
128:16 - then just a few final touches and then
128:18 - we'll finish up this tutorial
128:21 - we could of course wait i mean we could
128:22 - go for eons we could do this for 12
128:24 - hours straight so
128:26 - we're near the end
128:29 - so let's go ahead and do that
128:32 - okay so we're going to do the sidebar
128:35 - next so let's go ahead and open up our
128:38 - app you can see i've got my app sidebar
128:40 - a sass file ready to go
128:43 - and we will add in some stuff for this
128:46 - guy
128:48 - so
128:49 - first thing is first is we're going to
128:50 - add a rule here for the app dash sidebar
128:55 - and it's going to have a position of
128:58 - fixed
128:59 - that's going to be top
129:02 - zero
129:04 - left zero
129:06 - left zero
129:09 - bottom
129:11 - zero
129:13 - we're gonna give a little bit of padding
129:14 - on the top because we don't want
129:16 - elements running right up against the
129:17 - top of this
129:19 - and so we're going to give it 70 pixels
129:22 - now
129:23 - that's also going to make it so that our
129:24 - elements don't go underneath our
129:28 - header up there
129:30 - nav bar you can see that push down all
129:31 - of those elements right there
129:33 - so that's what that did for us
129:36 - and we're going to give this guy a width
129:38 - of 230 pixels or something
129:42 - now in an ideal world we'd also make
129:44 - this with the css variable that way we
129:46 - could easily change the width of our
129:48 - sidebar
129:50 - later on
129:52 - and we are going to set the overflow to
129:55 - auto
129:56 - we are going to
129:59 - let's give it some z index of something
130:01 - like 10 or something just so it gets
130:03 - pushed in front
130:05 - and we're going to give it a
130:07 - background color
130:09 - and this we are going to be using a css
130:11 - variable for so we're going to say
130:13 - sidebar dash color
130:16 - and that sidebar color we're going to
130:18 - declare in our variables
130:20 - file right here right now
130:23 - so the sidebar color
130:26 - that i have chosen
130:31 - uh is going to be
130:34 - well i'll just add right here
130:37 - sidebar dash color
130:39 - and that's going to equal
130:44 - to
130:47 - [Music]
130:49 - a
130:50 - 4
130:50 - f 6 9.
130:53 - it's kind of a dark blue
130:55 - so there we go now when we save this
130:58 - you can see now we've got our dark
131:00 - sidebar color over there which looks
131:02 - great
131:06 - and let's keep going here on this little
131:08 - guy
131:11 - pull back up my notes
131:18 - okay and we're gonna give this guy a
131:19 - bach shadow
131:22 - because it's gonna have a little shadow
131:23 - kind of poking out over there to the
131:24 - right so it's going to be 0 pixels and
131:26 - then 8 pixels
131:28 - and 17 pixels that's the amount of blur
131:31 - in rgba again
131:35 - and it's going to be
131:37 - well that's kind of weird i didn't know
131:38 - i was going to add
131:41 - all of those for me
131:43 - 0 0 0
131:46 - comma and then
131:50 - 0.2
131:56 - like so so that adds just a little bit
131:57 - you really can't see it but it has a
131:59 - little bit of shadow there over on the
132:00 - right side
132:01 - of the sidebar so that's what that did
132:03 - for us
132:06 - and that will be that
132:15 - next we're going to kind of tweak these
132:16 - menu items a little bit
132:19 - so let's go ahead and do those guys
132:21 - so we're gonna say app whoops dot app
132:25 - dash menu underscore underscore
132:28 - item now we actually i gotta double
132:30 - check to see
132:32 - if we have
132:35 - our menu items i can't remember if we
132:37 - added those
132:39 - on our
132:40 - navigation we did not
132:42 - so we need to come in to our
132:46 - actual sidebar items and on these anchor
132:48 - tags
132:49 - they need to be
132:52 - menu items
132:55 - so we need to add those
132:56 - so on each of these anchor tags
132:59 - they're going to have the class of
133:02 - app dash menu underscore underscore item
133:08 - like so
133:10 - our
133:11 - menu
133:13 - could support
133:15 - drop down so a secondary tier as well
133:17 - under the primary tier items
133:20 - so we'll just give these guys a app of a
133:21 - menu item like so
133:24 - okay now let's go ahead and style them
133:27 - so we want position to be relative in
133:30 - case we want sub items we can position
133:32 - them
133:33 - we're going to use flex to display them
133:36 - and we're going to align
133:38 - a line dash
133:40 - if we can hit dash items on the center
133:44 - so let's save that
133:46 - and
133:49 - that did not seem to work
133:52 - what did i do wrong there
134:11 - let's give some padding here
134:14 - padding of 12 pixels 15 pixels save
134:18 - oh it is updating there we go so now it
134:21 - gave some update about gave up
134:23 - um
134:24 - a
134:27 - border dash left of three pixels solid
134:30 - transparent this is going to be used for
134:32 - like an active item or something so we
134:34 - can make the little left of it
134:35 - active if we want there
134:39 - and that's pretty much it there
134:42 - for the
134:46 - uh that guy so we need to do one more
134:48 - rule here right above this for the app
134:49 - dash menu itself did we do a rule for
134:52 - this
134:52 - no we did not
134:55 - and we need to
134:56 - say margin dash
134:59 - bottom
135:00 - zero and list style
135:04 - none
135:05 - and actually we just want to set
135:08 - margin to zero
135:12 - and save that
135:14 - and also padding to zero so we get rid
135:17 - of all those guys
135:18 - there we go
135:20 - so there's our little uh tags right
135:22 - there
135:23 - and that's looking just fine and dandy
135:27 - now we could give these guys
135:30 - um some
135:31 - background colors
135:34 - and you know style these all sorts of
135:36 - different ways but we'll just kind of
135:38 - leave it at that for now
135:40 - so let's now go over to our app
135:44 - uh css so this guy right here
135:48 - and just quickly add in a little rule
135:50 - for the content so we're going to say
135:53 - app dash content
135:56 - and we will say the we're going to give
135:58 - it a min height in fact i'm just going
136:00 - to do an outline on this so you can see
136:01 - it outline outline
136:04 - one pixel solid red
136:08 - so
136:09 - we'll be able to see this guy
136:11 - let's make sure we have our app content
136:13 - as well
136:16 - let's close this down open up this yeah
136:18 - so there's our app content
136:21 - so that's what we're creating here
136:24 - so we're going to give it a min dash
136:26 - height
136:27 - of
136:30 - calculations we're going to calculate
136:32 - 100
136:34 - viewport height minus 50 pixels
136:40 - and save that
136:41 - and you can see it's kind of hard to see
136:43 - but there's it's now
136:45 - fully
136:47 - fully heighted
136:48 - that's a it's not a word clearly but
136:51 - and let's give this guy a margin dash
136:54 - top of 50 pixels
136:57 - whoops 50 pixels
136:59 - and save
137:02 - and let's also
137:07 - give some padding to this guy so 30
137:09 - pixels of padding
137:11 - and a background dash color of
137:17 - b5
137:19 - e5 e5 e5
137:23 - and save
137:25 - there we go
137:27 - so there is our
137:31 - uh
137:33 - content area there
137:37 - i don't know where my outline went
137:38 - where'd my outline
137:40 - go maybe that margin top is causing a
137:44 - problem with that guy
137:47 - okay and now we need to say we did that
137:49 - margin top so we're going to now give
137:51 - this guy a margin dash left of the same
137:54 - width as our sidebar which we did is 2
137:58 - 30 pixels
138:00 - i think
138:01 - we really need to set that up as a
138:02 - variable don't we
138:04 - um
138:05 - width is 230 yeah
138:08 - okay so in other words it shifts over
138:10 - that
138:11 - uh left and right
138:14 - columns there's for our sidebar
138:16 - so that's looking pretty good so you can
138:18 - see how those guys sort of behave when
138:20 - we
138:22 - get below certain break points
138:24 - and that is pretty much it
138:28 - so
138:29 - we again we could go forever on this but
138:31 - that pretty much gets the basic layout
138:33 - so now it's just a matter of finesse to
138:35 - where we add the break points to when we
138:36 - get certain break points our our sidebar
138:38 - collapses and grows we add a toggle so
138:40 - that we can click that button and shrink
138:42 - and grow the sidebar
138:44 - we rearrange this so we use flex to get
138:46 - this item and shift it over here to the
138:47 - right we start adding in filler content
138:51 - again we can use bootstrap for all of
138:52 - that stuff this theme is based on
138:54 - bootstrap so we can come into our index
138:56 - and inside one of these uh rows
138:59 - we can grab in fact i'm just going to
139:00 - jump over here to the browser and let's
139:03 - just go to get bootstrap
139:05 - just to grab some code here
139:08 - and uh we'll go to the documentation
139:10 - we'll just grab a little bit of code for
139:12 - a card
139:13 - so let's come down here and grab
139:16 - a card without a title without an image
139:20 - there's a basic card right there so
139:22 - we'll just grab a card and we can throw
139:23 - that inside of this column and throw it
139:25 - inside of this column
139:26 - and save there
139:30 - and refresh over here so you can you
139:31 - know we can start to add cards again we
139:33 - can customize all of this stuff
139:35 - we do have our folder that has our
139:38 - bootstrap overrides css file where we
139:41 - can go in and just redeclare any of the
139:43 - bootstrap variables that have bootstrap
139:44 - names you can just redeclare an override
139:47 - so if you come into your
139:49 - node modules
139:51 - and we come back into bootstrap
139:54 - so let's find this here
139:57 - so there's the there's the bootstrap
139:58 - variables file right here so for example
140:01 - if i want to change the primary color
140:03 - this is the button primary
140:06 - they have a variable in here called
140:08 - primary so if i redeclare this variable
140:10 - on my own css sheet so i'll come into my
140:13 - bootstrap override
140:15 - a css sheet
140:17 - so i'll come into my customize bootstrap
140:20 - right here and i'll say primary and i'll
140:22 - just say pink for now
140:25 - and watch what happens when i save boom
140:27 - all of everything with that class of
140:29 - primary is automatically overridden so
140:30 - i'm overriding bootstrap's variables
140:33 - because in my index.html
140:35 - that
140:36 - button down there had the class of
140:38 - button dash primary
140:41 - and i just changed the color of the
140:42 - primary color in bootstrap by
140:44 - overwriting their variable so you can do
140:46 - that with anything you can come into any
140:48 - of their variables and just pick a look
140:51 - at you know what the variable name is
140:52 - and just use the exact same variable
140:54 - name and you can override anything
140:56 - colors widths heights shadows
140:58 - transitions
141:00 - anything in bootstrap you can you know
141:02 - customize
141:03 - okay we're back here on day two i've
141:05 - obviously got a little bit shorter hair
141:06 - today and we're gonna finish things off
141:08 - in this tutorial by just fixing up the
141:10 - header and then making the site
141:12 - responsive with some automatic sidebar
141:15 - closing and opening so let's go ahead
141:17 - and start here with the header elements
141:18 - you'll remember that our header sort of
141:20 - stacked on top over here at the top
141:21 - right we're going to fix this guy so it
141:23 - lays out nice and horizontally
141:25 - and then we're going to push this little
141:27 - logo to make sure it's always on top of
141:29 - the sidebar when we're on our
141:31 - desktop view
141:33 - so let's come over here back to our app
141:36 - header.scss sheet and we're going to add
141:38 - a couple of rules here just to fix that
141:41 - so the first rule thing we're going to
141:43 - add is for the app dash nav
141:47 - so let's go ahead and add this rule and
141:49 - what we're going to do here is we're
141:50 - going to use a command called at include
141:53 - and we're gonna include the function
141:55 - that's called list
141:57 - uns styled now what this does in sas is
142:00 - it brings in
142:02 - all of the lists or rather all of the
142:04 - css that's defined inside of this and
142:06 - this is actually a bootstrap function
142:08 - this is defined in the bootstrap sas
142:10 - files this is what makes a regular
142:12 - ordered or unordered list unstyled
142:14 - meaning it doesn't have bullets and
142:15 - margins and things like that so we're
142:17 - going to include that for our app nav
142:20 - over here
142:21 - and then we're also just going to set a
142:23 - couple of properties on our own
142:25 - so we're going to set display to flex
142:27 - that's what's going to make it line out
142:29 - horizontally i'm going to set the margin
142:32 - bottom
142:33 - to 0 pixels because it has a bit of a
142:36 - margin
142:37 - included in it and then we're going to
142:39 - set the justify content property
142:42 - to flex end
142:44 - which is what's going to push that guy
142:46 - clear over to the right side of the
142:47 - screen so you can now see over here that
142:50 - lined that guy up like so and this guy's
142:52 - then lined up like so
142:54 - so that's what that did for us now
142:56 - that's lining up much much better so
142:58 - lastly let's go ahead and fix this
143:00 - little guy align him a little bit better
143:01 - so that he can properly sit where we
143:03 - want him
143:04 - so to do that
143:06 - that is going to be
143:08 - another rule here
143:10 - and that rule is going to be for our
143:13 - you'll recall if we come over here and
143:15 - look at our main
143:16 - oops not our main.css but rather our
143:19 - index file
143:22 - in the index.html
143:24 - the
143:25 - that guy is tucked away over here let's
143:28 - come up into our head section so we can
143:29 - see that
143:31 - so that is
143:34 - you can see we have this li class of
143:36 - drop down and that's got our anchor tag
143:38 - for the nav and then this ul class right
143:41 - here
143:42 - so this little ul which is called drop
143:45 - down menu right
143:46 - is responsible for
143:49 - this guy so we're going to do a couple
143:50 - of rules here to position him correctly
143:52 - as well
143:55 - rather than the
143:56 - menu right
143:58 - we're actually going to be targeting
143:59 - this one right here this is the anchor
144:00 - tag the anchor tag is actually the
144:02 - little icon right here so this one is
144:04 - called app dash nav item so i'm going to
144:07 - copy this we'll move back to our app
144:09 - header and let's just go ahead and paste
144:12 - that in here
144:14 - and for this guy we're going to set it
144:15 - to display block and we're going to give
144:17 - it some padding the padding here is
144:19 - going to be 18 pixels and you can see
144:21 - when i save and refresh here that just
144:23 - lines it up nice and evenly on the top
144:25 - and bottom
144:27 - we're also going to assign some line
144:29 - height here of
144:32 - 18 pixels and color
144:35 - we're just going to assign to white for
144:36 - now
144:38 - and then we're also going to add a
144:39 - transition on this guy
144:41 - because we want there to be a slight
144:43 - effect so we're going to transition the
144:44 - background color
144:46 - point
144:48 - 0.3 seconds
144:50 - and we're going to ease that so let's
144:52 - save and refresh over here and now you
144:54 - can see when i hover over this guy
144:57 - oops my background oh i haven't added a
144:59 - background color yet let's go ahead and
145:01 - do that
145:04 - so
145:05 - let's go ahead and add some extra rules
145:07 - for our so we're going to say and when
145:09 - this has the hover
145:11 - and this is also actually going to be
145:12 - for the focus
145:14 - so in both of these two states this is a
145:17 - group selector here that'll be nested
145:19 - inside of this rule in our sas rules
145:20 - here here's we're going to set our
145:22 - background
145:23 - and we're just going to do rgba
145:25 - and we're just going to go with
145:28 - instead of the default 0.8 we're going
145:30 - to set that to 0.1 percent opacity
145:32 - and let's save that and see if that does
145:34 - the trick for us
145:35 - so now you can see that little teeny bit
145:37 - of a hover effect on the background and
145:39 - the transition we're getting there
145:41 - on that element so now i can click that
145:43 - and those fly out nice and lovely for us
145:45 - so that is now organized properly so
145:48 - that's looking good
145:49 - let's go ahead and work on just a few
145:52 - items to make this a little bit more
145:54 - responsive
145:55 - so the first thing we want to do is when
145:58 - we reach a certain point we want this
146:00 - sidebar to disappear
146:02 - right now you can see that it's really
146:05 - not all that responsive these middle
146:07 - options here are responsive
146:09 - but as i drag this window down
146:11 - let's kind of pull this over a little
146:12 - bit you can see that the sidebar stays
146:15 - active no matter how small i get so what
146:18 - we want to do is when we get to our
146:20 - break point for our tablet and mobile
146:21 - size we want that sidebar to
146:22 - automatically hide itself so we need to
146:25 - set up a couple of media queries to make
146:27 - it slightly more responsive
146:29 - so the first one we're going to do
146:31 - is just add in
146:34 - our main one here
146:36 - let's pull this back over
146:39 - to our app
146:40 - so we're going to go back to our
146:42 - app file here just this main app
146:46 - and we're going to add the main media
146:47 - query here so we'll say at
146:50 - media and this is going to be set to a
146:52 - max
146:53 - width of 767
146:57 - pixels which is kind of a standard for
147:00 - tablet size
147:02 - and we're going to set the margin left
147:04 - to zero
147:05 - so in other words up to 768 pixels this
147:09 - is where these media queries will be in
147:11 - effect
147:12 - so let's go ahead and test that out
147:16 - so we'll come back over here and let's
147:18 - pull this guy down and you can see that
147:21 - right and we hit
147:23 - oh whoops
147:25 - doesn't seem like that's getting
147:26 - triggered there
147:28 - oh this media query needs to be nested
147:30 - that's the issue here so this media
147:32 - query right here needs to be nested
147:34 - inside of this app content rule
147:37 - because the app content is the one that
147:39 - we want the margin left to go to zero on
147:42 - remember by default we have our margin
147:44 - left set to the width of the sidebar
147:46 - which is what allows us to have our
147:48 - content over in the content area so
147:50 - let's fix that let's go ahead and try
147:51 - this again
147:53 - and
147:54 - there's that should be triggering there
147:57 - so whenever it's not working like so
148:00 - i'm just going to save and make sure
148:01 - that's recompiling okay
148:03 - you want to inspect the element and see
148:05 - what's happening here
148:07 - so we can right click anywhere here and
148:09 - just inspect the element and see if our
148:11 - rules are actually toggling like we
148:13 - expect
148:14 - so let's look at our app content which
148:16 - is this element you can see right now
148:18 - it's got the margin left of 230 pixels
148:21 - which is correct we want to set that to
148:23 - zero
148:24 - when we go below that break point
148:27 - so as we come down oh it is working
148:29 - so you can definitely see it's being set
148:31 - to zero the problem is now we have to
148:33 - set also set the sidebar one so the
148:35 - content is working fine now you can see
148:37 - that the content is clapping collapsing
148:39 - down properly
148:41 - underneath here and now we need to
148:42 - collapse down the sidebar
148:44 - so to do that let's move over to our
148:46 - sidebar
148:47 - and add that guy
148:50 - so here inside of our app sidebar we're
148:53 - going to be adding another media query
148:54 - to this app sidebar rule just like we
148:57 - did before so right here we're going to
148:59 - say at media
149:02 - and this one's going to be set to a max
149:04 - width
149:05 - of the same thing 767 pixels so that is
149:08 - triggered whoops at the same time there
149:12 - and for this rule it's going to set the
149:15 - left position to negative 230 pixels
149:19 - so now let's go ahead and save that
149:21 - and you can see right away that's
149:22 - actually working properly here
149:24 - so as i scale up
149:27 - this guy his margin gets set to 230 and
149:29 - this guy's left position gets set and
149:31 - then as i scale down
149:33 - our media query overrides both of those
149:35 - rules and now the sidebar automatically
149:36 - disappears
149:38 - for there so that's now working just as
149:40 - we expect so now let's go ahead and
149:43 - fix in this little content area here we
149:45 - just have one small issue with the way
149:47 - our header is working
149:49 - this issue is in our app css file it's
149:52 - an error we made earlier
149:53 - you can see that we have our app content
149:56 - has a margin top of 50 pixels that's
149:58 - what makes it so that our content
149:59 - doesn't slide underneath our nav bar
150:02 - there at the top and our nav bar
150:04 - uh you can see has will also has this
150:06 - minimum height set to the 100 viewport
150:10 - height units minus 40 pixels well this
150:13 - 40 pixels should be the same as this 50
150:15 - pixels so we need to switch this to 50
150:17 - pixels and then when we save
150:19 - notice that that
150:20 - is going to fix a few issues here
150:23 - over in our content area where we're
150:25 - just not having this one pixel or a few
150:27 - pixels slide up underneath there like we
150:28 - were going to be having before so here
150:31 - in our app header file let's come down
150:33 - to the app search
150:34 - and we're going to switch this guy out
150:37 - not switching out rather but we're going
150:38 - to add another media query here so we're
150:40 - going to say at media
150:42 - and this is going to be at a max
150:44 - width here of
150:48 - 480
150:49 - pixels so this would literally be our
150:52 - mobile size here
150:53 - and we just want to set display
150:56 - to none
150:57 - so in other words when we get down to
150:59 - the phone size we don't want this search
151:02 - bar to appear at all so you can see here
151:05 - on tablet size we still have it desktop
151:07 - we still have it but on mobile we get
151:09 - rid of that all together so we're left
151:11 - with just our logo and our drop down
151:13 - here like this
151:15 - okay
151:16 - so next let's go ahead and fix this hq
151:18 - admin so that it appears over here at
151:20 - the left by default and not kind of
151:22 - floating over here in the middle
151:25 - so for this one we're going to be in the
151:27 - app header logo
151:29 - and we're just going to come down here
151:30 - and add another media query
151:32 - so this one's going to be at media
151:35 - and we're going to have this one at a
151:36 - minimum width
151:38 - of 768
151:43 - we are going to change the flex
151:46 - so we're going to set flex whoops i uh
151:49 - let me fix this little mistake right
151:50 - here first
151:52 - before we do that and there we go so
151:54 - we're going to change the flex to 0 0
151:56 - auto
151:57 - we're going to change the display to
152:00 - block
152:01 - and then we're also going to set the
152:02 - width equal to our sidebar width which
152:04 - is 230 pixels so watch what happens here
152:07 - when we save
152:09 - you'll notice that then this first item
152:11 - gets that 230 pixels width and the other
152:14 - items follow suit accordingly notice
152:16 - that this rule right here is what's
152:18 - being applied on our mobile menu by
152:20 - default and then because we're doing
152:21 - sort of a mobile first approach here on
152:23 - this menu and then this media query
152:25 - kicks in as we get higher and higher in
152:27 - our widths
152:28 - so that fixes this issue you can see now
152:30 - we can scale this guy down
152:33 - and at this point it switches it breaks
152:35 - and now this flex rule is overriding
152:37 - here now these three rules are shorthand
152:40 - property for three separate flex
152:42 - properties here so you can see there's
152:44 - the flex grow the flex shrink and the
152:46 - flex basis properties so that's what
152:48 - this uh when you have whenever you see
152:50 - it like this flex that's a bit of a
152:52 - short hand
152:53 - so
152:54 - now we need to fix you can see here that
152:56 - on our desktop view
152:59 - this is lining up properly but now our
153:00 - nav element over here is all scrunched
153:02 - over to the left where we want that guy
153:04 - clear over to the right on a desktop
153:06 - view so let's go ahead and fix that
153:08 - that is going to be done down inside of
153:12 - our app nav
153:13 - so we'll scroll down here and same thing
153:16 - we're just going to be adding a media
153:17 - query here
153:18 - so we'll say at media
153:20 - this one when we hit a minimum width of
153:22 - 768 pixels
153:27 - so at least 768 so 768 and above this is
153:30 - our desktop media query
153:32 - then we're just going to change the flex
153:34 - so we'll say flex is 1 0 auto
153:38 - and we'll save there
153:40 - and that does that so now you can see on
153:42 - desktop these guys are sitting down over
153:44 - at the right whereas our
153:46 - item here is clear over to the left so
153:48 - let me just pull that up a little bit
153:50 - bigger now so you can see how that works
153:51 - so on our desktop our menu is laying out
153:53 - nice how we expect it to be we get down
153:55 - to our tablet
153:57 - we still have the search bar in the logo
153:59 - and then when we get down to our mobile
154:01 - the search disappears we have our logo
154:04 - and then our drop down menu so that's as
154:05 - far as we're going to take the header
154:07 - here as far as adding the responsive
154:09 - setup for that so let's do one more
154:11 - quick thing here when our sidebar
154:13 - appears we want this to sort of have a
154:15 - bit of animation so it doesn't just
154:17 - suddenly appear let's transition that in
154:18 - so it slides in so we're going to add
154:20 - that with a css transition
154:24 - we need to open up the app sidebar
154:27 - css file so let's open that guy up in
154:30 - here and we'll come up to the app
154:31 - sidebar rule and we're simply going to
154:33 - be adding a transition property here so
154:35 - it really doesn't matter where we add
154:36 - this i'll just kind of stick it above
154:38 - this media query here
154:39 - so we're going to say transition
154:42 - and we're going to transition the left
154:43 - property
154:44 - in
154:46 - 0.3
154:47 - i always have the habit of just doing
154:49 - 0.3 like that but it's actually correct
154:51 - syntax to do 0.3
154:53 - seconds and then we're going to ease
154:55 - that
154:56 - and then we're going to do one more here
154:58 - this one's going to be for the width
155:00 - we'll also transition the width same
155:02 - thing
155:03 - 0.3 seconds
155:05 - and e so we have two different
155:07 - transitions set on that
155:09 - the actual width and the left position
155:11 - so now when we come over here
155:14 - and our sidebar
155:16 - you can kind of see how that animates in
155:17 - and out so it kind of slides out when we
155:19 - get down to mobile and it sort of slides
155:21 - back in when we get to our
155:25 - desktop one extra thing we could do here
155:27 - you'll notice it's pretty quick but as
155:28 - soon as i move this this is gonna
155:29 - animate out but we still have our margin
155:32 - left that's sort of left over so watch
155:34 - here really closely kind of pay
155:35 - attention to this area right here
155:37 - so as we come down in
155:38 - watch what happens when i come up
155:40 - you can see the margin left appears
155:42 - first and then the animation slides over
155:44 - so we really want to change that margin
155:46 - left so that these things get pushed
155:48 - over in a nice smooth animation as well
155:50 - so let's add that next
155:53 - that is going to been over in our
155:55 - app.css file and on our app content rule
155:59 - you can see here we have a margin left
156:00 - property and that's the one we want to
156:02 - add a transition to
156:04 - so same thing here let's just go ahead
156:06 - and add a transition this one's going to
156:08 - be set to the margin dash left property
156:12 - 0.3 seconds with an ease
156:15 - and then let's go ahead and save that
156:16 - and let's test this out one more time
156:19 - so when we come down it hides and when
156:20 - we come up now you can see that we're
156:23 - getting this area animated as well
156:24 - meaning the content watch when it slides
156:26 - over it's also pushed in an animation
156:28 - so you can kind of see how that works
156:30 - there
156:31 - so that's nice and smooth so perfect
156:33 - next let's go ahead and remove the red
156:36 - border here from our little
156:38 - uh
156:39 - sort of that we added earlier so let's
156:41 - just get rid of this border rule all
156:42 - together we don't need that anymore as
156:44 - that was just when we were doing a bit
156:45 - of wire framing
156:48 - and now that's behaving really nicely so
156:51 - most of the work here is done the last
156:53 - little thing we're going to do in this
156:54 - tutorial is then when we're down on our
156:57 - mobile phone so we're at our mobile menu
156:59 - everything's hidden we need a way to
157:01 - toggle out that sidebar with a hamburger
157:03 - menu or a menu toggle up here in the in
157:06 - the header to where we can click that
157:07 - and slide that guy in and slide it out
157:09 - as we may need to access of course those
157:11 - menu links because right now the only
157:13 - way we can get that back is if we were
157:15 - to suddenly go above that break point
157:17 - and then our sidebar appears so let's go
157:19 - ahead and add that mobile navigation
157:21 - toggle next
157:24 - so we are in our index.html file here
157:27 - for this as we need to add
157:29 - the anchor tag that's going to serve as
157:31 - the little toggle for this
157:33 - so we're going to add this right after
157:35 - our hq admin
157:37 - logo
157:38 - or rather title site title so this is
157:41 - just going to be an anchor tag we're
157:42 - going to give it a class of
157:45 - app
157:46 - let me fix that really quick
157:50 - app
157:51 - dash
157:53 - sidebar underscore underscore
157:57 - toggle
157:59 - and the href here is just going to be
158:01 - blank this isn't a true anchor tag for a
158:04 - link i'm going to say data dash data
158:07 - toggle equals sidebar if we wanted to be
158:10 - setting up some javascript hooks for
158:11 - this we use this and then we'll also
158:13 - just give it an aria label
158:15 - which is going to be for our
158:17 - accessibility
158:19 - and we're just going to call this the
158:20 - hide sidebar
158:22 - so that screen readers and whatnot would
158:24 - be able to
158:27 - show that properly
158:29 - and then that's all we're gonna do there
158:31 - and then we'll just close off the anchor
158:32 - tag like so all right let's go ahead and
158:34 - save that
158:35 - i'm gonna turn on my wrapping here once
158:37 - more whoops
158:38 - so that wraps down so you can see that
158:40 - full entire rule there so there is the
158:42 - selector for our sidebar toggle now
158:44 - we're going to jump back into our css
158:47 - and we are going to add in some rules
158:49 - here to make our toggle appear
158:52 - so
158:53 - we're going to be using font awesome
158:55 - because we're already using that for a
158:56 - few things to add in the bars
158:59 - so we're going to have that little sort
159:00 - of hamburger menu
159:02 - so we can actually do it right inside of
159:04 - the anchor tag we could do that with a
159:05 - span tag or something like this we could
159:08 - open a span tag and say class equals
159:10 - f-a-f-a-bars
159:13 - and then that would make
159:15 - [Music]
159:16 - those bars appear like so so you can see
159:19 - this is going to be our little guy that
159:20 - we click and toggle that guy down with
159:22 - so let's jump over and add some of the
159:24 - css
159:25 - to our app header
159:28 - so inside of our app header scss file
159:32 - let's go ahead and add this rule so it's
159:33 - going to be dot app dash
159:38 - side bar underscore underscore toggle
159:41 - is what we named that and i'm just going
159:43 - to hit return a few times just to kind
159:44 - of move this up to the center of the
159:45 - screen there so it's easier to read
159:47 - so we're going to give this guy some
159:48 - padding we'll say 0
159:51 - 15 pixels
159:53 - and then
159:55 - let's whoops there we go let's go ahead
159:58 - and give it some color
159:59 - we'll just set it to white
160:03 - and we're going to give some line height
160:08 - and we are also going to transition so
160:11 - we want this guy to transition our
160:12 - background color just like we did on our
160:15 - item over there on the other side the
160:17 - little toggle for the drop down menu
160:19 - the background color 0.3 seconds and
160:23 - ease
160:26 - and that's looking good there
160:30 - then we're going to go ahead and add the
160:32 - the hover and the focus rules so let's
160:35 - say whoops
160:36 - ampersand
160:38 - so on focus and ampersand
160:42 - hover this is our grouped
160:44 - css selector here we're going to set
160:46 - color to just white again
160:48 - no change there
160:50 - but here's where we can set the
160:51 - background color
160:54 - to something else
160:55 - and rgba we can just do like we did
160:58 - before and just set it to 0.1
161:01 - or something like that
161:03 - we're going to set the text decoration
161:05 - to none so there's no weird underlines
161:08 - or anything like that when we hover
161:10 - and you can see now how that's working
161:12 - there so we'll come over here
161:14 - so you can see that when i hover over
161:16 - there i'm getting that nice little
161:17 - background
161:19 - effect there so now we need to position
161:21 - this little span tag a little bit better
161:23 - so we're going to write a little rule
161:24 - below this guy that's called
161:27 - app
161:28 - sidebar toggle uh
161:30 - child of span
161:33 - which is where actually fa bars reside
161:36 - and we'll just set that to display
161:37 - inline block
161:40 - and save
161:42 - and then we can add some padding to this
161:44 - too so we'll just say zero
161:46 - i don't know 15 pixels or something
161:48 - so we're just trying to move this guy
161:50 - whoops we don't want 15 there we'll just
161:51 - do 15 all together so we're just adding
161:53 - a little bit of padding to get this guy
161:55 - to sort of center itself
161:57 - in the bar there and that looks
161:59 - fine enough for me
162:00 - so there's our little toggle for the
162:02 - menu
162:03 - to be toggled in and out
162:06 - and that's looking pretty good so one
162:08 - issue you'll note is that when we come
162:10 - down to our mobile menu it'd be better
162:13 - if this little guy was on the opposite
162:15 - side of our logo we don't want him in
162:16 - the middle we sort of want him on the
162:18 - left edge so we can do that with flexbox
162:20 - by just switching the display order so
162:22 - let's go ahead and add a media query
162:25 - up in this sidebar toggle
162:28 - we'll just do this one
162:30 - before i guess we'll just do it right
162:32 - here where our cursor is
162:33 - so we'll say at
162:35 - media
162:37 - and this is going to be at a maximum
162:39 - width
162:40 - of
162:41 - 767
162:43 - pixels so in other words this is tablet
162:46 - and below
162:48 - we're going to change the
162:51 - order here
162:52 - so we want to say order
162:55 - negative one that's an easy way to just
162:57 - force it all the way to the left
163:01 - so let's test that out so on desktop you
163:03 - can see it's still order number two but
163:05 - when we get down to tablet it swaps over
163:09 - and it's now at order number
163:12 - zero essentially or negative one it sits
163:14 - over there for our
163:16 - tablet and mobile so the last thing we
163:19 - would do here is we need to set up a
163:20 - little bit of javascript so that when we
163:22 - click this guy
163:23 - we're either going to add or remove a
163:26 - class
163:27 - from our
163:29 - html
163:31 - we're going to move into javascript here
163:33 - you'll remember earlier that we set up
163:34 - inside of our javascript
163:37 - folder here not in the demo rather in
163:39 - our source
163:40 - we have our sas then we have our
163:42 - javascript and we have this one called
163:44 - custom
163:44 - and this custom javascript file is the
163:46 - one we're going to be using
163:48 - to write a little bit of jquery you
163:50 - could do this with vanilla javascript as
163:51 - well but since bootstrap 4 requires
163:53 - jquery we already have it we're just
163:55 - going to use it here
163:56 - so what we're going to do is we're just
163:58 - going to set a little bit of toggle
164:00 - javascript so that when we click our
164:02 - toggle menu we add or remove a css class
164:05 - to our app
164:06 - and then we're going to write a little
164:07 - bit of css that either hides and shows
164:09 - the menu based on that
164:11 - hook if you will so let's go ahead and
164:13 - write this little javascript first
164:15 - so this is just going to be here
164:16 - anonymous the jquery
164:18 - function here
164:20 - which looks like
164:22 - this
164:26 - and we are going to say
164:30 - use strict
164:32 - then we're just going to set up a little
164:34 - bit of jquery test here
164:36 - so we're going to go with
164:38 - we're going to be targeting that data
164:42 - toggle
164:44 - attribute we added
164:45 - so we're going to say data dash
164:48 - toggle
164:49 - equals
164:52 - sidebar
164:54 - remember this is right here we call this
164:56 - data toggle equal to sidebar so this is
164:58 - jquery targeting this specific anchor
165:01 - tag only
165:03 - that's what this little guy right here
165:05 - is doing
165:06 - and then we're going to say dot click
165:10 - and then we're going to write here in a
165:11 - function we'll add our event
165:14 - whoops i can type that out correctly
165:17 - keep
165:18 - typing that incorrectly
165:20 - just event there
165:23 - and then we'll write this function here
165:25 - i know this is kind of let's push this
165:26 - over so we can see this a bit better
165:29 - there we go
165:33 - okay and we're just going to do a little
165:35 - test here we're just going to say
165:37 - console.log
165:40 - sidebar toggle was clicked
165:43 - just to make sure this event is actually
165:45 - firing before we go pull our hair out
165:47 - trying to troubleshoot why it's not
165:48 - working
165:51 - so let's come over here and that should
165:53 - refresh automatically so when we click
165:55 - this
165:56 - i'm not getting anything in my console
165:58 - so something
166:01 - is working
166:02 - oh we have an error
166:06 - oh yeah here we go this is supposed to
166:07 - be a dollar sign there's a problem
166:09 - that's the shorthand for jquery
166:13 - so let's try that again and click
166:17 - that's still not working there
166:20 - oh
166:22 - i think we need this here
166:26 - there we go
166:27 - so this is the little piece i was
166:28 - missing there for the this is the jquery
166:31 - shorthand syntax or whatever for their
166:32 - on ready event
166:35 - okay so you can see it's working now
166:37 - every time i click this little button
166:38 - watch down here you can see that the
166:40 - sidebar toggle was clicked and this will
166:42 - increment over here to 678 every single
166:44 - time i click this so there it goes it's
166:46 - working so i know now that my hook is
166:48 - working
166:50 - so now
166:51 - what i can do here
166:53 - is let's delete this console log
166:55 - and we're just going to say event dot
166:57 - prevent defaults
166:59 - so that just prevents whatever the
167:01 - anchor tag wants to do by default for
167:03 - this specific event then we'll write
167:05 - another rule here so we're going to
167:06 - toggle the
167:08 - dot app
167:10 - and we're going to say toggle class now
167:12 - this is a jquery function that just adds
167:15 - or removes this class based on whether
167:17 - it's currently present or not currently
167:19 - present
167:20 - so we're going to call this our sidebar
167:23 - um
167:25 - dash
167:26 - toggled
167:27 - something like that
167:29 - okay so now if we come over here and
167:31 - look one more time
167:32 - so we should see on our inspector if we
167:35 - look up here at our app remember this is
167:37 - the
167:37 - this is where we're adding this to right
167:39 - to our body class of app it should add
167:41 - another class here called sidebar
167:43 - toggled if it doesn't exist so let's
167:45 - test it out
167:46 - and you can see sure enough it appeared
167:47 - right there sidebar toggled
167:49 - and if i click it again it should
167:50 - disappear
167:52 - and that's how that little jquery thing
167:54 - does so we're just adding or removing a
167:56 - simple css class here and you can kind
167:58 - of see where we're going with this
167:59 - we're going to add a little bit of css
168:01 - to this specific class name that sets
168:04 - the margin left and the left position of
168:06 - our elements to either be you know
168:09 - hidden or displayed just like we did
168:11 - manually with our media queries
168:14 - so let's do that
168:15 - so we will jump back and add that we're
168:17 - going to add that one on our since this
168:19 - is sort of sidebar related type of stuff
168:21 - we're going to add that in the sidebar
168:24 - dot css file
168:27 - and we'll add a little rule here called
168:31 - um
168:33 - uh would we call that sidebar
168:38 - and i've got a card i can't remember
168:39 - what we just called that thing
168:41 - we called it sidebar dash toggled
168:45 - so we'll just paste that in there
168:46 - sidebar toggled
168:49 - so this one we're going to write as a
168:50 - descendant selector so anytime we have
168:52 - the class of app
168:54 - and then somewhere along the line a
168:56 - child of sidebar toggled
168:59 - we want to override a few things so
169:02 - we're going to write we're just going to
169:03 - write this one in manual css
169:05 - so we need to change
169:07 - our
169:10 - sidebar itself so you'll see that that
169:12 - one's up here in this
169:14 - app dash sidebar
169:16 - it has the media query right here for
169:18 - left of negative 230.
169:20 - so we're going to change that
169:23 - so app dash sidebar
169:25 - we're going to set the
169:26 - left position to
169:30 - negative 230
169:34 - pixels
169:36 - except this is going to be left
169:38 - 0. pixels
169:42 - okay let's test this out
169:45 - so we'll come down to our mobile that
169:47 - disappears when we click this
169:50 - we are getting
169:53 - um
169:55 - let's see this one should have
169:56 - overridden that
169:58 - app sidebar toggled oh whoops
170:01 - this sidebar toggle is a class on the
170:03 - app so it should be app dot sidebar
170:06 - toggle because both of these are
170:07 - together right
170:09 - and then any child of app sidebar
170:12 - so that should be the way that works
170:16 - there we go so you can see that i can
170:18 - click that
170:19 - i either add the class it slides out the
170:21 - left menu i click it it removes the
170:23 - class which means the default left of
170:25 - negative 230 is taking over and that's
170:27 - how easy you can add the little toggle
170:29 - here
170:30 - so this is pretty much now complete
170:33 - we have we could do a little bit of
170:35 - extra i mean we could of course do tons
170:36 - and tons of css we could maybe hide this
170:38 - little toggle on desktop view maybe we
170:40 - only want it to appear on mobile or
170:42 - maybe we want to have the ability to
170:44 - slide in and out that sidebar on desktop
170:45 - it's kind of up to you
170:47 - but that is now fully functional to
170:49 - where we have our sidebar toggle
170:52 - we have all the mobile and
170:54 - responsiveness set up
170:55 - and we've essentially built the
170:56 - framework for a fully
170:58 - responsive admin style theme based on
171:02 - bootstrap 4.
171:04 - i hope you've enjoyed this tutorial and
171:06 - learned a few tips and tricks along the
171:08 - way i'd love for you to come over and
171:09 - join me on my channel and see a few
171:11 - other css html design photoshop related
171:14 - tutorials that i'm putting out over
171:15 - there
171:16 - so we will see you in the next one