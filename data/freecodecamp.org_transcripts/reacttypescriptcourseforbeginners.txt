00:00 - Learn how to use React and TypeScript in 
this excellent course from roadside coder.  
00:05 - This is the only video that you will need to 
start building react apps with TypeScript.  
00:10 - In this video, we will first learn the basics 
of TypeScript from absolute scratch and then  
00:14 - learn how to integrate them in our React js 
apps by building an awesome project. We will  
00:19 - see how we can use TypeScript with React hooks 
such as use state use ref and use reducers. How  
00:26 - to pass props from one component to another by 
defining prop types of the component and much,  
00:31 - much more. But wait, what is TypeScript? 
And how is it different from JavaScript?  
00:37 - So TypeScript is a superset of 
JavaScript and is built on top of that.  
00:41 - According to TypeScript website, TypeScript is 
JavaScript that scales, meaning it's perfect for  
00:47 - big projects and production grade apps. Plus it 
saves you from a lot and I mean, a lot of errors.  
00:53 - And most of the apps that you use today are most 
likely built using TypeScript. So here's the  
00:58 - project that we are going to build. It's called 
Task fi. So this is basically our to do list app,  
01:02 - but much more advanced. So if I go on 
and type learned, TypeScript, and choose  
01:11 - now we can see there are multiple icons over 
here. First one is for editing icon. So let's  
01:15 - say learn TypeScript now and press enter. 
So you can see the to do has been edited.  
01:20 - And we can also delete the to do by clicking on 
this button. For example, if I click on this, you  
01:24 - can see it has gotten deleted. And we can complete 
the to do by clicking on this tick mark. Or there  
01:30 - is another way to complete that to do to drag and 
drop it inside of this Completed Tasks section.  
01:36 - This is an awesome feature of this app that we can 
drag and drop between active tasks and completed  
01:41 - tasks, I included both of these ways to take mark 
the two dues and drag it to the completed to do  
01:46 - so that you can use whichever suits you the best. 
Also, you can notice if I go in and type anything  
01:51 - and press on Go button, you you're gonna see 
a button press animation, just like this.  
01:57 - And you can see I've included animations on 
these two dues as well when we hover on them.  
02:02 - So this is a really good app for beginners to 
learn react with TypeScript. Also, if you're  
02:07 - interested in more such tutorials on React js, 
be sure to check out my channel, which is called  
02:11 - roadside coder. Recently, I've uploaded a full 
fledged myrn stack chat app tutorial series on my  
02:16 - channel, link will be in the description below. 
So without any further ado, let's get started.  
02:25 - So I'll open VS code over here. And now 
let's quickly go to our terminal and  
02:29 - initialize a new React app 
with TypeScript. But wait,  
02:32 - we don't know how to do that. So let's go 
to our browser and search react, TypeScript.  
02:40 - And click on this link. Since we are going to use 
create react app, we're gonna go and click over  
02:46 - here. So it's similar to our normal react app 
installation, we are just supposed to add this  
02:52 - dash dash template TypeScript after it. So let's 
go ahead and do that. So MPX, create react app,  
03:00 - and the name of our app, let's say TypeScript 
tutorial, and dash dash, template TypeScript,  
03:11 - and press enter. Now, what this will do 
is it's going to go to NPM repository.  
03:18 - And it's going to initialize a new React app with 
all of the TypeScript dependencies. And all of the  
03:22 - files are instead of dot j, s going to be named 
at DOT TSX. So if we go back to our documentation,  
03:29 - this is for starting a new create react app 
project. But if you have already a project that  
03:34 - is up and running with React and JavaScript, you 
can add TypeScript by installing this npm install  
03:41 - TypeScript with all of the types. Here we go, 
our React app has initialized now let's quickly  
03:46 - switch to that folder by typing cd TypeScript 
tutorial. Or we can go to File Open folder.  
03:54 - And then open that folder. Here we go. Let's have 
a look at the folder structure. So in the src,  
03:59 - usually, we see we have app.js over here, but now 
we have app dot TSX and index dot TSX. So let's  
04:06 - go on and start our app by typing NPM. Start. Here 
we go. Our app has started successfully. Now let's  
04:15 - go back to our VS code. And I'm going to remove 
few of the files that we don't need. So report  
04:20 - five vitals setup, test logo, SVG app, dot test, 
and delete. Now it's going to complain, because  
04:28 - it was using those files somewhere. For example, 
inside of the app dot TSX. We were using logo.  
04:33 - So let's remove everything inside of here. 
And let's just type Hello World for now.  
04:40 - And inside of the index dot TSX, we were using 
this report web vitals. So let's remove that.  
04:46 - And let's see. There we go. We have hello world 
written over here. But you can see it's in the  
04:50 - center so that we remove all of the default 
styles from AB dot css. Now it's good. Now what  
04:56 - is this type in TypeScript? So let's go on and 
understand the types that TypeScript provides us.  
05:02 - So let's say right over here, if I go on and 
type let name equals viewshe. So in JavaScript,  
05:11 - what happened was JavaScript automatically decides 
what the type of this variable is. So if we go on  
05:17 - and hover on it, we can see that type is String. 
But in TypeScript, we are supposed to explicitly  
05:23 - define those types. So just go on over here and 
type colon, and string. So this is how you define  
05:30 - the type of the variable. So if I go on and 
remove this, and if I try to say name equals,  
05:36 - let's say, five, now you're going to see an error. 
type number is not assignable to type string.  
05:43 - So this is a strict type checking, which helps 
us in TypeScript. But if we go on and the abuse  
05:50 - See, no problem. No, let's go on and assign let h 
to be a number. So we can assign it a number type.  
06:01 - Similarly, we have a bunch of other types as well, 
such as Boolean object array, tuple, undefined,  
06:08 - null, and a lot of them. So just like that, let's 
go on how do we assign Boolean so let's say let is  
06:14 - student and type boolean. So this is how we assign 
it to be Boolean, Boolean can be true or false.  
06:21 - Now, what if we want to have a variable called 
hobbies, and we want it to contain an array of  
06:28 - hobbies, which are basically string, 
so we're going to type colon string.  
06:33 - And so it's going to be an array of string, 
right? So we're just gonna add these braces  
06:37 - in front of it. Now it says that this variable can 
only contain an array of strings, if it wanted to  
06:44 - be an array of numbers. So we can type number over 
here. Now next type is called tuple. Now what is  
06:51 - tuple? So let's say if I go on and say, roll. So 
what tuple does is tuple contains a fixed amount  
06:59 - of value and the types that are defined during the 
declaration. So let me just go in and type number  
07:05 - comma string. So now what this variable can 
contain, is it going to contain one number  
07:12 - and one string. So if I go on and say roll equals 
two, I read both of the numbers. So it's going to  
07:19 - have a problem type number is not assignable 
to type string. So this has to be a string.  
07:24 - So something Yeah, there we go. It's working 
absolutely fine. So this is called a tuple. Now  
07:31 - next is for objects. How do we define an object? 
So there are two ways to define an object first  
07:37 - is lead person our usual way we can type colon 
and object. But this is not a recommended way  
07:45 - to do this. Because an object can have a lot 
of properties inside of it, such as if I want  
07:50 - Person object to have a name, and age. So how do 
we know that this person object contains all of  
07:56 - these properties. So we use something called 
a type keyword or an interface keyword. Now,  
08:02 - don't worry, I'm going to discuss more about 
this type and interface later. But for now,  
08:06 - an introduction, I'm going to type type. And we're 
going to define the type of this person object. So  
08:12 - person, now it's a good practice to keep the 
first letter of the types as capital. So I'm  
08:18 - going to type type person. And instead of it, 
let me just add a name and age property. So name  
08:23 - is going to be a string, and age is going to be 
a number. So now let's go on and assign this type  
08:30 - person to this type variable. So now this object 
is going to contain all of the properties that  
08:36 - are inside of this person type. So if 
I go on and equals, let's say, name,  
08:43 - and give it a name, let's just give it just 
the name for now. Now you're going to see,  
08:48 - it's complaining towards that property age is 
missing in this type. So this, as you can see,  
08:53 - this type has name property and age property. 
So we are supposed to give it both of these  
08:57 - properties. So if I go in and give, let's say, 
age, and save it, you're gonna see it's working  
09:03 - absolutely fine. But what if we want to make 
this age property as optional? So we're just  
09:08 - going to go over here and add a question mark. 
So this means that this property is now optional.  
09:14 - Now if I go on and remove it from over here, no 
problem. The app is working absolutely fine. Now  
09:19 - what if we want to have another variable that 
is going to contain an array of Person object.  
09:25 - So if I go and create, let, let's have a look. 
So we want it to be an array of this object.  
09:32 - So we're just going to go over here and assign it 
the type of person and array. So just like we did  
09:39 - up over here, if we wanted to be an array of the 
person object, we can just assign it the type like  
09:44 - this. So you see how easy it is to assign types in 
TypeScript. Now, let me remove all of this stuff.  
09:51 - Let me comment it out for now. Now over here, 
what if we want our let's say age variable,  
09:58 - to be a number and string both of these, I 
want it to contain both number and string.  
10:04 - So we're just going to use something 
called union in TypeScript. So for union,  
10:09 - you're going to type the symbol and add another 
type to it. Let's go on and assign this. So let's  
10:16 - say age. If I'm assigning a string, no problem, 
it's working fine. If I go in and assign a number,  
10:21 - yep, it's working absolutely fine. All right. Now 
let's see if we want to define a function, print.  
10:28 - Name. And what this function does is it takes a 
name, and it just console logs it. So now we have  
10:35 - an error. So it says the name implicitly has any 
type. Okay, no problem. It says this name has an  
10:41 - any type. So it just provided a type of string. 
Now, if we go on and assign this print name,  
10:47 - name, then it's going to go and print that. Just 
like this. But what is the way to provide a type  
10:56 - to a function? How do we declare a function type? 
So there are two ways to define a function? One,  
11:02 - let's say if I go on and say, let print 
name, I can provide it the type of function.  
11:12 - This works absolutely fine. Okay, it says 
print time already been defined. Let me  
11:16 - just remove this for now. So this works 
absolutely fine. You can use this function  
11:21 - type, but just like objects, there is a better 
way to assign a function. So what we can do is,  
11:27 - we can properly define the function of how many 
things it's going to contain. So let's say it,  
11:32 - so it takes the name. So it's going to take a 
type of name, which is going to be a string,  
11:39 - and what is it going to return for in our case, it 
wasn't returning anything. So the return type was  
11:45 - void. So this is how you assign the type to a 
name. And don't worry, if you're having problems  
11:50 - understanding all of this stuff, when we go 
on and create a project, then you are going  
11:53 - to understand all of these things in much, much 
in depth. So just like this void return type,  
11:58 - this can have a number return type, a string 
return type, a custom return type, just like this  
12:03 - person over here. Now what if we want this any of 
these to have any value, let's say if I want the  
12:10 - name to have any value inside of it, not just 
restricted to a string, or number or anything,  
12:16 - we can give it the any type. So any type 
doesn't have any restriction, you can literally  
12:21 - keep anything inside of it. But but this 
is not recommended. Because obviously,  
12:25 - why would we need TypeScript if we just want 
to give this any type to anything. So it's  
12:30 - recommended to give type to each and every 
variable in TypeScript. But no, I said,  
12:34 - it's not recommended to use any. But instead of 
any, there's a much better type that you can use.  
12:41 - So that type is called unknown. So if I go on and 
say, person name, if we don't know what type it's  
12:48 - going to be, so we can go ahead and type unknown 
over here. And it can also take any type. So this  
12:54 - is recommended instead of any. So just like this, 
since we have defined a function over here, and  
12:59 - we don't know what this is going to return, if we 
don't even know if it's going to return anything  
13:03 - or not. So we're just going to go and type never. 
So what void does is what's the difference been  
13:09 - void and never is void returns undefined, 
but never doesn't return anything. So this  
13:14 - is the difference between void and never, I would 
highly recommend you to go and have a read on this  
13:19 - documentation. So if I if you go on and search 
TypeScript, oops, I made a typo. Yep. TypeScript  
13:25 - and just go on this website, TypeScript, Lang 
dot o RG and click on this Doc's over here,  
13:30 - and click on this the TypeScript handbook. Yep, 
there is this documentation. So in the basic is  
13:36 - going to go ahead and click on everyday types. So 
see any and functions and bunch of other types,  
13:41 - you can see over here, all of the type that is 
defined over here. So I would highly recommend you  
13:45 - to go and have a read on this page. I'm going to 
include the link to this page in the description.  
13:51 - All right, cool. Now let's get back to this thing 
I told you that we're going to go deep into this.  
13:55 - So what is this thing called type. So this type 
is something called as alias. So allies are of two  
14:02 - types. One is type, and other is interface. 
So let's go on and explore both of these.  
14:07 - So you've already seen this type called type 
person. So how do we define this by using  
14:12 - an interface? So let me just go on over here. 
And if we want to define a interface, just add  
14:19 - interface over here and just remove this equal 
sign. Now it's going to work absolutely same as  
14:26 - this type was working. So now Now, you might be 
thinking then what's the point of including both  
14:31 - of these? What's the difference between them? So 
let me tell you the difference between them. So in  
14:35 - type what happens is so let me just define a type. 
Let's say type x is going to have let's say a,  
14:45 - which is a string and B, which is number. Now if 
we have created another such type called type,  
14:56 - y, z, now what if we want to use these 
properties from type x inside of this type Y.  
15:04 - So what we can do is just go on over here and 
add x. And so what this will do is it's going  
15:12 - to contain all of these properties and all of this 
property as well. So if I go on and let Y equals,  
15:20 - and why and assign this, this y type, and instead 
of it, if I go on and add C, which is a string,  
15:29 - so something let me just add something for 
now. B, which is a number, so you're gonna see,  
15:35 - it's complaining that it is that it is missing 
some values, a comma b. But if I remove this,  
15:41 - then it's going to be working absolutely fine. 
See, so in this case, we are supposed to provide  
15:46 - it these values this A and B. So type can be 
extended like this. But how do we do this in the  
15:53 - case of an interface, so let me just go on over 
here and type in a face, like the guy profession,  
16:03 - which is going to be a string. Oops, I'm missing 
a t over here. Yep. So what if we want to extend  
16:09 - person in this guy interface, so it's easier 
than type, so we just going to type extends,  
16:17 - person. So what I personally do is I like to use 
interface a lot. So it makes things a lot easier,  
16:24 - it helps you extend it easily. So if you're aware 
of classes in JavaScript, so we have classes like  
16:30 - this, how you can provide the type to our classes 
by using the interface. So class name extends  
16:38 - this interface person, but let's just 
not get into it for now, it's not helpful  
16:42 - right now for us. So what if this person interface 
wants to extend that type, suddenly just remove  
16:51 - these now we can extend these both as well, 
if you want to have the properties of person  
16:56 - inside of the x, which is going to do person. 
And it's going to work absolutely fine. Now,  
17:02 - if we want to do vice versa, that if we want to 
have the properties of x inside of the person,  
17:10 - then we can do extends X. And it's going to 
work absolutely fine. So this is how this works.  
17:18 - So let me remove all of this now. Now all 
of the basics of TypeScript out of the way,  
17:23 - it's time to start building our React app and 
understand how we use TypeScript with React,  
17:28 - state react, hooks, props, etc. So one thing that 
I forgot to mention that this app is divided into  
17:34 - two parts. In this video, I will explain you 
whole react and TypeScript part of this app.  
17:39 - And in our next video, we are going to 
implement the drag and drop. In this video,  
17:43 - we are going to create this app. So let's say 
not added to something and some others as well.  
17:50 - Yeah, so in this video, we're gonna build this 
simplified version of this app, so that if you are  
17:55 - only here to understand the React App Script part, 
you're not going to have to waste your time. And  
18:00 - in our next video, we are going to implement that 
drag and drop feature that I showed you earlier  
18:04 - in the intro video. Other than drag and drop, 
it's absolutely same, you can edit them as well,  
18:09 - you can mark them as completed, and stuff like 
that. So let's go on and build this app. So I'm  
18:15 - going to dock it to the side. Now let me first 
convert this function into an arrow function.  
18:20 - So to define the type of this component, first, 
let me just hover on it, you can see it tells us  
18:27 - the type definition of this component that this 
is a function that returns us JSX dot element. So  
18:33 - this is JSX dot element that is returned by this 
function. But what is this function all about?  
18:38 - What is the exact type of this function, so this 
is a functional component, right? So we're just  
18:43 - gonna go over here and Colin react.fc. So this is 
a functional component. So we are providing it the  
18:49 - type of this react.fc. Now there are a bunch of 
other types as well. So if you go on and click CTL  
18:56 - space, and you're going to see there are 
loads of types. So one of those types is  
19:00 - react node. So this supports all of the types. 
So this can be Boolean, this can be react, dot,  
19:07 - react, child, react, fragment, react, Portal, 
null, undefined, and all of these stuff. But since  
19:14 - we want it to be a functional component, so we're 
going to type react FC. Now let's go inside of it.  
19:19 - Instead of this, I'm going to type span and give 
this a class name of heading. And inside of it,  
19:25 - I'm gonna write task E phi, which is going 
to be the name of our app. There we go.  
19:31 - Let's give this thing some basic styles. So if 
I go on app inside of app dot css, I'm going  
19:37 - to import a Google font called nucia. Let's go 
to google and type neutral font. Here it is.  
19:46 - And the script just click on select this 
style and click on Import and take this font  
19:54 - and paste it over here. So let's first give our 
app tag some styles So I'm just gonna bring the  
20:02 - styles in for app and heading because I don't 
want to waste time writing CSS because this is  
20:06 - a TypeScript tutorial not CSS tutorial. So there 
we go, what just just nothing. This is the generic  
20:11 - size, I'm just giving it some width and height 
of 100, viewport width and 100, viewport height,  
20:16 - some display flex and flex direction column 
so that all of the things inside of it are  
20:21 - aligned from top to bottom, align items to be the 
center. And background color is going to be this  
20:26 - bluish color font families the one that we have 
imported just a minute ago. For heading, we are  
20:31 - going to give transform text uppercase font size 
of 40 pixels, some margin, some color, and their  
20:37 - index is going to be one because we always wanted 
to be on the top. Now you're going to understand  
20:41 - why I provided it in just a minute. When I provide 
this, the animation so that this doesn't get faded  
20:48 - away in the back, it appears always on the top. 
So that's we're going to care about that later.  
20:52 - And some text aligned to be the center. And I'm 
just going to give it some media query as well.  
20:57 - That is when it's smaller than 800 pixels, what's 
going to happen is the margin of top and bottom is  
21:03 - going to be 15 pixels, instead of 30 pixels and 
font size is going to be 35 pixels, that's all.  
21:08 - So let's move forward. Nor do we have dot TSX 
and create our input field that is this thing,  
21:15 - this input field. So below this span, I'm going 
to create a new component called input field  
21:22 - input. Now, obviously, this component doesn't 
exist yet. So let's create a new folder called  
21:27 - components. And inside of it, I'm going to create 
a new component called input field, dot TSX. F, C.  
21:40 - Now, if you don't know how I did this, I'm 
using an extension called es seven react Redux,  
21:45 - something like that. Yep, this, this is the one 
so you can download it and you can type RFC and  
21:49 - it's going to generate this boilerplate. So I'm 
just going to type for now input over here and  
21:55 - import it by typing Ctr l space over here. And 
it's going to auto import this. Yeah, there we go.  
22:01 - Now let's start building this thing. So 
inside of this div, and you know what,  
22:06 - I'm just going to have a form over here, since 
it's going to be a form. So instead of form,  
22:10 - and let's say the form is going to have a class. 
And inside of this, I'm going to have an input tag  
22:19 - input, it's going to be of type input, 
placeholder is going to say enter  
22:26 - a task. And yep, just like that, it's beginning to 
take shape. And we're going to have a class name  
22:34 - of input box. So now if you don't know what this 
naming pattern that I'm following is, this is  
22:41 - called bem convention of writing CSS class names, 
you can just Google it and read more about it.  
22:46 - It's not important right now, but this is bem 
convention of writing CSS class, you can ignore  
22:51 - it if you want, and give your own class names. 
And now below this, I'm going to have a button,  
22:56 - which is going to say go, and 
it's going to have a class name  
23:02 - of what and type of submit. Yeah, there we 
go. Now let's style both of these real quick,  
23:12 - I'm going to create a CSS file over here called 
styles dot css, and import that file inside of it.  
23:20 - So import styles dot CSS. And inside 
of this styles dot css, I'm gonna add  
23:28 - the classes. So let me explain you one by 
one. So first of all, for the parent tag,  
23:33 - the input tag, I'm going to have a display 
flex and width is going to be 90. Currently,  
23:38 - I haven't given the weight to this input box. 
That's why this is not working. But I'm going  
23:43 - to give it real soon I'm giving it a position 
of relative because we are going to make this  
23:47 - button inside of this we are going to position 
this button inside of it, this input box right,  
23:52 - so we are going to give this an absolute 
positioning. That's why we are giving the parent  
23:56 - container as relative positioning and align items 
to be the center. Now for input box, just like  
24:03 - this with is going to be the 100% border radius, 
some border radius, some padding on top left, top  
24:09 - bottom and left right, some font size some border 
you can see this, these are just generic styles,  
24:15 - some transitions so that our animations looks 
smooth. Because we are adding the animation over  
24:20 - here, you can see the button animation. Now below 
this, we are going to add some focus classes. So  
24:26 - whenever we click on this whole screen goes dark 
and only this appears properly. So if I go and  
24:33 - click on this, you can see now what does this 
inset box shadow mean? So you can see over here,  
24:38 - this box shadow inside of this, this input box so 
this inset is for that. And when we focus on this,  
24:47 - what's going to happen is it's going to provide 
box shadow outside of all of the outside part of  
24:52 - this input box. So this is what it's happening. So 
focus is focusing on classes used when we click on  
24:58 - this input box. So this is Just basic CSS. 
Now for our button that is input dot submit,  
25:04 - we're going to provide this class. So position 
is going to be absolute oops, I think,  
25:10 - single colon, so yep, single colon. Yep, just 
like that. So currently, the animations are not  
25:16 - working, but I'm going to make them work in just 
a minute. So position is going to be absolute,  
25:20 - because if we don't do this, see what's going 
to happen, it's going to be outside of it. So  
25:23 - we want it to be positioned inside and right 
is going to be zero. So that it we want it to  
25:29 - be an absolute right side, some width and 
height, some margin, some border radius,  
25:34 - border is going to be none some font size, 
background color, and just generic style, some  
25:40 - little bit of box shadow that you can see over 
here below this. So that's all now let's provide  
25:45 - it the animation. So when we hover on it, first 
of all, what's gonna happen is, you can see it  
25:50 - glows up. So let's provide the hover class to 
it. There we go, you can see background color  
25:56 - gets a little bit brighter. And when it's active, 
that is when we click on it, we want an animation  
26:02 - to happen. So transform is going to be scale 0.8, 
we want it to become a little bit smaller. See,  
26:08 - just like this, and box shadow is going to be a 
little bit smaller as well from 10 pixels to five  
26:13 - pixels, so that it gives us some depth effect. Now 
let's come to our main functionality of our app,  
26:18 - that is creating the state for our to do so 
inside of app dot TSX. Let's create our first  
26:25 - state. So I'm going to type use state. And 
let's give this state the name have to do.  
26:33 - And it's going to have an initial value of empty. 
Let's import the user state. Yep, just like that.  
26:40 - Now, we are supposed to give this state a type 
since we are using TypeScript. So we are supposed  
26:45 - to give this a type right. So since we have given 
this an empty string, let's see what this type  
26:52 - is. This is the type of string so we are supposed 
to give this a type of string. If we remove this  
26:58 - and hover on this, you can see the type is now 
undefined because it doesn't know what the type  
27:02 - is. But we are supposed to give this the type of 
string because our to do will be of type string,  
27:08 - right? So type string, and let me just give it 
some initial value of empty. So this is how you  
27:12 - define the string by using these brackets, these 
pointed brackets over here. Now what if you want  
27:19 - to accept multiple types of value inside of it. So 
just like I explained earlier, we can use a union  
27:24 - over here and give this number. And just like 
this, it's going to be working absolutely fine.  
27:30 - So the rules that I explained you earlier in the 
video, all of the rules apply over here as well,  
27:34 - if you want to be array, you can add this 
like this really cool. Now let's just provide  
27:39 - this to do and set to do to our input field 
component. So just like normal react to do,  
27:49 - just like this, we are going to give it but now 
it's going to give us an error, because it says  
27:54 - property to do does not exist on this component. 
So we are supposed to make it exist on this  
28:01 - component. So let's go to over here. And let's try 
to accept it to do comma set to do still going to  
28:10 - give us a binding element to do implicitly has an 
any type. So it this thing has an any type. So we  
28:15 - are supposed to define the type to this. So we 
can just go on over here outside these brackets  
28:21 - and colon and provide these the types. So to do 
is going to have a type and set to do is going to  
28:28 - have a type. So let me just instead of writing it 
over here, I'm just going to create it right over  
28:33 - here. So I'm just going to create an interface 
that I explained you earlier. So interface,  
28:38 - let's say props. So props is going to have value 
have to do and set to do. So we know to do what  
28:45 - what is to do its string. Right? Easy. But what is 
set to do, because set to do is a function, right?  
28:53 - So how do we know what set two dues type is? So 
let's go back to app dot TSX. And it's easy to  
28:58 - know that if you go on and hover on this, you're 
gonna see this thing written over here react or  
29:04 - dispatch now you might not be able to understand 
what this exactly is just go on and copy this up  
29:10 - and paste it over here. And now you're going to 
see that we have been provided it this types. So  
29:18 - props. Yep, now it's going to work fine. Yep, 
there we go. Our app is working absolutely fine.  
29:24 - So this is this is just basically the type of 
this set to do, you don't need to understand  
29:28 - all of this. This is just basically the title. 
You can just take these from hovering onto this  
29:33 - awesome. So I hope you're having the gist of how 
we use this stuff. Now instead of defining the  
29:39 - props over here, what you can do is you can also 
give these like this. So as I told you already,  
29:45 - this is a functional component, so react.fc. 
And in front of it, we can provide these props  
29:55 - just like this. Whatever you find easier you can 
use it. So this thing is basically not that much  
30:01 - necessary, because it already knows that this is 
a functional component. Now let's simply go to  
30:06 - our input tag and give it a value of to do. And 
on change, it's going to change our to do state.  
30:17 - And when to take an event, e dot target dot value, 
now called, let's try to do console, log over here  
30:26 - and see if it's working to do anything. Yep, it's 
working fine. Great. Now that to do that, we are  
30:34 - going to create is going to have a few properties 
inside of it. First property is going to have a  
30:39 - unique ID. So if I go on over here and create a to 
do over here, so this to do has many properties,  
30:45 - it has first this to do property, which contains 
this text inside of it. Either one is going to  
30:51 - be a unique ID. And the third one is going to 
be is done variable. So is done means if it's  
30:57 - done or not, if it's completed or not. So this 
is going to be keeping the track of that thing.  
31:02 - So let's go and create a model for to do 
because we are going to use this to do  
31:07 - at a lot of places. So let's just create it 
separately. So I'm going to create a new file  
31:12 - called model.ts.ts, not TSX. Because this could 
be a normal TypeScript file. So inside of it, I'm  
31:19 - going to create an interface called to do and it's 
going to have the properties that I mentioned,  
31:26 - called ID, which is going to be number obviously, 
to do property, which is going to be a string,  
31:32 - and is done property, which is going to be 
Boolean. Great. Now we want to use it somewhere  
31:39 - else. So let's just export this thing. So export 
interface. Yep, great. Now we're going to create  
31:45 - another state, which will contain all of 
our to do so we are constantly entering  
31:50 - our two dues over here. So this has to be 
inside of a particular state, right? So use  
31:55 - state. And let's name is to dues. And it's going 
to be an empty array. Now you might be thinking,  
32:02 - how are we going to provide this that type. So 
What type is it going to be because it's going to  
32:07 - be an array of two dues. So we are going to import 
the model that we have created to do. Here we go,  
32:15 - it has been imported. So to do and it's going 
to be an array, so we're gonna make it an array.  
32:21 - So this is how you create an array of a type or 
an interface. Awesome. Now let's try to create a  
32:29 - handle add function, which will add the two dues 
to this state. So let's go back to our app. And  
32:34 - I'm going to create a new function over here 
const. And add, it's going to take something  
32:42 - inside of it, and it's going to return. So this 
is a function over here. Now it's going to take an  
32:49 - event from on submit. So right over here 
from whenever we submit the form, it should  
32:56 - add this inside of our handle add. Now let's take 
this function and pass this to our input field.  
33:04 - And it should give us an error because this 
function doesn't exist. Yep, there we go.  
33:09 - Now we what are we supposed to do? We are supposed 
to add this function over here in these props. So  
33:15 - handle add, what is this function going to be? So 
just like I taught you earlier, we are supposed  
33:21 - to define a function just like this. So since 
this function is not going to return anything,  
33:25 - so I'm just gonna write it like this function, 
and it returns nothing. So let's receive it  
33:31 - over here. Yep, just like that. Now, what are 
we going to do when whenever we click on this  
33:37 - Go button, so whenever we press submit, this, 
this function should fire off. So on submit,  
33:47 - we have to fire off this 
handle add function. Great.  
33:52 - Now one thing you will notice, whenever you press 
press on go, you can see the page refreshes,  
33:56 - too. So to avoid that, what we do is we go to an 
inner normal JavaScript, what we do is we just go  
34:02 - to this function, and we take an event variable 
over here, and just write event dot prevent  
34:11 - default. Right? But it's but it's gonna give us 
this error. He implicitly has an any type. So we  
34:18 - are supposed to provide this a type. So let's 
go on Google and type, event type and react.  
34:26 - TypeScript. So I'm just trying to show you over 
here what you need to do whenever you get stuck in  
34:31 - a particular thing in React TypeScript. So let's 
go on over here. And you can see it has given us  
34:38 - this type react change event HTML input element. 
So we can take this but there is a better type.  
34:44 - Instead of this, let's search it react dot 
synthetic event, or there's one more type  
34:50 - called react dot form event that we can use. 
Yep, there we go. React dot form event. So all  
34:56 - of these these are going to work. So what I'm just 
saying Spending you the best that you should use  
35:02 - React dot form event. Now it's not going to give 
us any error. Okay, so it's giving us an error,  
35:06 - because we haven't set this type over there 
over into our props right over here. So we  
35:11 - are supposed to define this over here as well, 
because we are supposed to define it everywhere  
35:15 - we are sending this variable. So great. That's 
awesome. Now whenever we click on this handler,  
35:20 - what should happen is it should set our state 
it should set our two dues. So set two dues  
35:27 - to be what first of all, we're gonna check 
if there's something inside of the to do,  
35:33 - then only just we are supposed to set that 
to do right. So set to do and take whatever  
35:40 - that is already inside of the two dues of this 
variable. And we are going to add another to do  
35:45 - so comma, what was the three fields first was ID, 
so we're going to generate 10 Random ID for that.  
35:53 - Let's just type date dot now. So this is going to 
generate a random ID for this. So now as you can  
35:59 - see, as soon as I save, it's going to complain 
is missing the following properties to do and  
36:04 - is done. So let's just add them. Comma to do to do 
is going to be to do and is done. Obviously, it's  
36:15 - just created, so it's not done. So I'm just gonna 
give this by default false. Oops, data over here.  
36:21 - So date dot now. Yep. So instead of writing this 
to do colon to do we can just write to do since  
36:27 - these both are same name, awesome. That's fine. 
It's working fine. And now what after this,  
36:32 - after the to do has been created what we're 
supposed to do, we are supposed to empty this  
36:36 - input field, right? So set to do is going to 
be empty. Alright, cool. Let's try this out.  
36:44 - We're gonna do console log, so I'm gonna 
console log to do Okay, let's go to inspect  
36:51 - console. If I click on go, Yep, there we go. 
It has generated this array and emptied that.  
36:58 - Yep, there we go. If we go on over here, yeah, it 
has created both of these to do with some random  
37:04 - ID is done and false. Awesome. Now let's go on 
and render all of these to do in form of this  
37:11 - component, this card type of component. So I'm 
going to go over here and create a new component  
37:18 - called to do list. Now, we are supposed to create 
this to do list component. But before we do this,  
37:26 - I forgot to do one thing. So if we go on inside 
of the input field, there's one problem over here.  
37:32 - So if we go on and type and press enter, so you 
can see, it maintains this shadow state. So if we  
37:40 - go on again, and press enter, so it's maintaining 
this shadow state. So what's the solution for  
37:44 - that, whenever we press Enter, it should get rid 
of this background shadow. So for that, we are  
37:50 - going to use a React hook called use ref. So let's 
see how we use use ref with TypeScript. First of  
37:56 - all, we are supposed to add in handle submit. 
So let me just write handle submit like this.  
38:02 - For now, let me just render all of those two dues 
over here, dot map so that we can see all of them.  
38:09 - So like, you can see all of these to do as 
to dues are beginning to appear over here.  
38:13 - Great. Now if we go on over here, we are going 
to create a use ref. So if you don't know what  
38:19 - user is, user ref is basically like when we 
use document dot get element by class name,  
38:24 - or document or get element by ID, we 
are hooking that particular components,  
38:29 - HTML. So just go on over here and type use a 
ref. And I'm going to name this ref as input ref,  
38:36 - and the initial value is going to 
be null. Let's import this ref.  
38:41 - Just like that. And we are going to 
provide this ref to our input tag. So ref  
38:47 - equals input ref. So this is how it works. But how 
are we supposed to give this ref a type, now what  
38:54 - is going to be the type of this input tag, so it's 
very easy. Just go on over here and hover on it.  
39:00 - And you're going to see some bunch of crap 
written over here, which no one understands.  
39:06 - So what we are going to do, we're 
just going to take this thing,  
39:10 - HTML input element. So this is what we need. So 
if we want to identify the type of this form,  
39:17 - this is the type of deform HTML form element. So 
this is a pattern actually. So if we are supposed  
39:22 - to write for div, it's HTML div element. So for 
input, it's HTML input element. So let's take this  
39:30 - and just like user if we are going to add it 
inside of these brackets over here. So HTML  
39:36 - input element, now it knows that this is an HTML 
input element. So what we are going to do to get  
39:41 - rid of this blur, whenever we press enter, so on 
submit, it's just going to perform this handle ad.  
39:49 - And what else it's going to do. It's going to take 
this input ref, input ref. Now I'm going to show  
39:54 - you what's the advantage of adding a type over 
here. So input ref dot it's just a object called  
40:00 - current. So it's showing us this current dot, now 
you're gonna see we have all of the function that  
40:05 - we can perform on this thing on this input object. 
So we have a function called blur over here.  
40:11 - So we're gonna use blur. So what blur does 
is it shifts the focus from this input box,  
40:17 - we have added the blur over here. And you can 
see it has already added automatically added this  
40:21 - question mark, because it's not sure if it's going 
to be optional, or if it's going to have be having  
40:26 - any value inside of it. So yep, let's go ahead and 
try it out. If we type anything in, press enter,  
40:32 - yeah, there we go. It has got rid of that blur. So 
this is how we use use Rev hook with TypeScript.  
40:39 - Let's go back to our app dot TSX. And we are 
going to create a to do list component, let's  
40:45 - go inside of our component and create a new file 
called To Do List dot TSX. AFC, just like that,  
40:54 - is going to be a React, oops, react dot functional 
component. And let's import this thing first.  
41:05 - There we go. It is important. Now let's go inside 
of this to do list component and create this. So  
41:10 - inside of this div, first of all, I'm going 
to give this div a class name of two dues.  
41:17 - And let's import our style 
sheet as well. So import  
41:22 - dot slash styles dot css inside of this two dues 
div, I'm going to map through it map through all  
41:30 - the two dues. But wait, we don't have the two dues 
over here. So we are supposed to bring them in. So  
41:35 - we are supposed to bring in two dues and set two 
dues as well. Because we are going to delete them  
41:41 - from this component. So we are going to delete 
them and mark them as complete. So we are going  
41:45 - to need set to dues as well. So set to do so it's 
going to obviously going to complain because we  
41:51 - haven't defined the, you know the type of these 
two dues and set two dues. So let's define this  
41:56 - over here. And face props to dues. So what to 
do is was it was an array of that type to do.  
42:04 - So let's import to do first. Yep, just like 
that. And it was an array of two dues. Great.  
42:11 - Now next thing was set to dues. Now, again, 
we don't know how do we define this thing.  
42:16 - So let's just go to app dot TSX and hover 
on this. And let's just take this thing  
42:24 - and bring it over here. 
Yep, that's absolutely fine.  
42:27 - Oh, okay. We haven't assigned it. I always forget 
to assign props. And let's refresh it. Yep,  
42:33 - it's fine. It just says we haven't imported 
it. Right. Okay. So it says that we haven't  
42:40 - provided this to dues and set to dues. So 
let's just provide it real quick to dues  
42:46 - to dues. See, this is what I like about 
TypeScript, it clearly tells you what is  
42:52 - going wrong. And JSU might be wondering Oh, okay, 
is what's going on why it's giving error. So set  
42:59 - to do, it's clearly showing you that what you are 
supposed to do next in your application. So let's  
43:04 - go back to our to do list up. Yeah, and let's 
start to map all of those to dues. Single two.  
43:16 - And let's inside of it, let's just create 
all of this, you know of the card component,  
43:21 - let's create a separate component for this 
card itself. So I'm going to create a separate  
43:26 - component called single to do. So for now, 
let me just let me just add a list over here  
43:33 - to see if it's working fine or not, to do.to do.  
43:38 - So if we just use remove it and see by having dot 
you can see we have three properties ID is done.  
43:44 - And to do. So we need to do from over here. Let 
me provide this to lose a little bit of styling.  
43:51 - So instead of styles dot css, I'm going to add 
this to do so it's going to be display flex just  
43:56 - like this. So it appears in a similar line. And 
when there are more than one to do, it's just  
44:01 - wrapped into another line. So it's not going to 
work now because we haven't created those card  
44:06 - component. So display flex justify content space 
evenly so that the space between them with 90% and  
44:12 - flex wrap of rep. So let's go in and create that 
single to do component of this. So let's create a  
44:19 - new component called single to do dot the SX AFC. 
Just like that. Now, if we go back to our app,  
44:31 - you can see we have few icons over here, for 
example, this edit icon, this Delete icon and  
44:35 - this tick mark or complete icon. So for this we 
are using a library called react. Oops, react  
44:44 - icons. So if you google search react icons, 
you're going to find this result over here. And  
44:50 - let's just install this library npm install react 
icons and open another terminal and install it.  
44:59 - Now meanwhile, Installing, let's go to react icons 
and search and edit icon. So you can see this  
45:06 - is the edit icon that we are going to use that 
search a delete icon. This is the delete icons  
45:12 - just like that a tick, or done, maybe, 
yeah, there we go, this is the done icon.  
45:18 - So this is what we are going to use. Here we go, 
the React icons have installed successfully. Let's  
45:24 - continue building our app. So what are the things 
that we are going to send to this single to do  
45:28 - component. So let's go to our to do list 
and first of all, import this over here.  
45:34 - Single to do, yep, just like that. So we're 
gonna send it this to do obviously, so to do.  
45:45 - And since we are mapping it, so 
we are going to provide it the key  
45:49 - to do.id. And we're gonna send it all of the two 
dues. So two dues. So all of the two dues are  
45:57 - going to be needed for deleting the stuff and 
getting the stuff, stuff like that. So to do.  
46:04 - Now, it's going to give us the error, 
because we haven't set the props yet,  
46:07 - obviously. So loose. Yep, just like that. And 
now we have to deal with some errors, I believe.  
46:13 - Yep, there we go, we're here. First, let 
me receive all of those things. So to do  
46:18 - comma, to dues comma set to dues. And over here, 
let's define an interface. Or you know what,  
46:27 - let's just define a type so that you can 
get the hang of both of these things, props.  
46:33 - And as you know, in the interface, we don't 
write this equal sign, but in type we do.  
46:39 - So first of all that to do, what's 
going to be the type of to do  
46:44 - the model that we created. Now second to dues 
that we are sending. So what is going to be  
46:49 - the type of to dues are going to be an array 
of to do's and then the third set to dues,  
46:58 - it's going to be the type that we 
copied over here, just like this.  
47:03 - There we go. Now it shouldn't be a 
problem. And let's define it over here.  
47:08 - Just like that. Yeah, it's working fine. Alright, 
let's start building our single two components.  
47:14 - So this is also going to be a form. Because 
we are going to add the added functionality,  
47:20 - you're going to know why I made this a 
form when I create the added functionality.  
47:27 - And instead of this, I have a span with the 
class name of to dues single text. So this  
47:36 - is basically going to display the to do to do.to 
do, let's see if this works or not. If I go ahead  
47:43 - and press enter, yep, it's displaying that to do. 
Now below this, below this, we're gonna have a div  
47:51 - inside of a div, we're gonna create all of this 
stuff. This, the all of these icons first icon,  
47:58 - and we're going to keep them inside of the span 
tag. So let's give them the class name of icon  
48:04 - to have three icons. So first one will be 
fill, edit text, AI, fill, edit. So how  
48:12 - do we use this? If I go on and click on this? 
Yeah, so if I go on over here and paste it. Now  
48:18 - I'm going to tell you how you can use a React 
icons. So you need to pay attention over here,  
48:23 - what is written at the first two letters. So this 
is a I type of icon. So there are many types of  
48:30 - icon. Let me show you import from icons. So 
if it go and press slash we are there are  
48:35 - a bunch of types of icon like AI, bi BS CG. So 
we need AI, right? So click on this, like that,  
48:42 - and just take this and import it from over there. 
See if this should work if I'm not wrong. He  
48:52 - Yeah, there we go. It has generated this edit 
icon. So just like that, what we need is AI fill,  
48:58 - delete, and AI. Third one was something else, 
I believe. Let's see. So let's take that and  
49:06 - comma. Yep, that's that. And the third one was 
MD done. So you can just go on and just search it  
49:14 - over here. And the one MD done. So I'm didn't and 
now you're supposed to import it from the MD. So  
49:24 - just replicated. MD done from the Yep. 
Oh, yep, it has all those three icons.  
49:34 - Awesome. Let's go on and style these. So I'm 
going to import our style sheet over here.  
49:41 - Go inside of the styles. First of all for our to 
dues dot single. That is this style, it's going  
49:47 - to have display of flex and with is going to be 
29.5 in a normal screen but when we make this  
49:53 - response so as you can see doesn't look good 
right now so it will make it better in the  
49:57 - responsive so when the screen size is less 
Then 800 pixels, I'm gonna make it full size.  
50:03 - So I'm just going to do that 
just in a minute. So after that  
50:07 - border radius is going to be five pixel padding 
is going to be 20 pixels inside of it. And margin  
50:12 - top is going to be having 15 pixel, as you can 
see, so that it maintains a little bit of gapping  
50:17 - and some background image. So you can take this 
background image from the Git repository. So we  
50:22 - are going to find the Git repository, just go 
to github.com/push-e O N, inside the repository.  
50:33 - Now search over here TypeScript. So you can 
see react TypeScript task, if I just go on  
50:38 - over here. And this is important, you just 
click on over here and click on this react  
50:42 - TypeScript tutorial branch. So all of the code 
that I'm teaching in this tutorial is going to  
50:47 - be inside of the React TypeScript tutorial 
branch. So as you go to src, components,  
50:54 - styles, and the link is right over here, you can 
take the link of this picture, or you can add your  
51:00 - own picture, just like you want. Yeah. So next, to 
do single dot txt, now we are styling our text a  
51:06 - little bit, this text. So flex one means that it's 
going to take all of the available space and it's  
51:12 - going to push all of the content to the other side 
of this box board is going to be none font size  
51:17 - going to be 20 pixels. And now this is going to be 
used when we make it an input box. So right now I  
51:23 - don't need to pay attention to this. So I can Yep, 
all of these icons are going to have margin left  
51:27 - of 10 pixels, font size of 25 pixels and cursor 
is going to be pointer steady, you can see our  
51:33 - cursor became becomes a pointer, let me quickly 
add the responsiveness to it for our input box  
51:40 - is going to be having weight of 95% when 
the screen size is less than 78 pixels  
51:45 - to dues are going to be having weight of 95%. That 
is this. And to do single is going to be having  
51:51 - with 100% that is the single component and to 
do is going to be the 100 I mean the whole list,  
51:56 - right. So if I save this, see, it looks good. 
Now in the bigger screens, the width is going  
52:01 - to be 40% for the single to do component. So 
yeah, that's all. Alright, now let's try to  
52:06 - enter more to dues. Awesome. So and if we go on 
smaller screen, yep, it's perfectly responsive.  
52:13 - But now, you can see this is not working. Because 
we haven't created the functionality for them  
52:18 - yet, for the Edit, Delete and done. So 
let's go on and do that. First of all,  
52:23 - I'm going to add the functionality for done. So 
on empty done span, I'm going to add an On Click  
52:29 - function. And what it's going to do, it's going to 
fire off handle, done function, and it's going to  
52:38 - send it it's ID to do ID. So this handle done 
doesn't exist set to let's go on and create it  
52:46 - const handle done, just like this. And you can 
see it says that you are sending this to do.id,  
52:53 - but you're not receiving it over there. So let's 
receive it over there. So we are going to receive  
52:57 - the ID over here and this ID is going to be 
of type number. So now what are we going to  
53:03 - do with this ID, we're going to manipulate our 
set to do the state with the help of this ID. So  
53:08 - to dues dot map. So what are we going to do, 
we're going to map through this array, and  
53:15 - whichever ID matches with this ID we're gonna make 
there is done property of that from false to true,  
53:22 - and vice versa. So we're going to take 
to do and we're gonna say if to do.id  
53:31 - matches with whoops, if to do.id is 
equal to the ID that we are sending,  
53:38 - then what are we supposed to do? We're gonna take 
that to do all of the properties, and we're gonna  
53:43 - change the is done property schema is done. And 
we're gonna invert the value that was already  
53:50 - there. So in what to do.is done. Otherwise, we're 
just gonna return the to do just like that. Oh,  
54:02 - I forgot to wrap all of this stuff in the map. So 
yeah, now it's working fine. The spelling mistake  
54:09 - over here is done. Yeah, now it's working fine. 
Now, if we go on and click over here, it's gonna  
54:16 - make it disabled. But obviously, you can't see it 
right now, because we haven't implemented it. So  
54:21 - what we are going to do, we are going to check 
it over here. If this is completed, then just  
54:25 - strike it off, go on over here. And we are going 
to check so to do the current to do.is. Done,  
54:32 - if it is done, then it's going to strike it off. 
Otherwise, it's going to render the normal one.  
54:40 - So it's going to enter the normal one over here. 
Otherwise, it's going to instead of span just  
54:46 - as that is strike tag, so you can see it 
has been done. If I click again over here,  
54:52 - it's not done. Yeah, just like that. Now let's 
go on and implement the Delete functionality.  
54:57 - So I'm gonna go over here And 
let's copy this up just like this,  
55:03 - I'm going to add it over here. And instead of 
handle done, we're going to add handle Delete.  
55:09 - Let's create the handle delete function 
right below this const, and delete.  
55:17 - And just like that, it's going to take the 
ID, which is going to be a number. Now it's  
55:24 - fairly simple, we're just going to do, what we are 
going to do is filter. So set to dues to dues dot  
55:31 - filter. To do if to do.id is not equal to id only 
then returned to that mean, if we click on this,  
55:45 - instead of this ID, all of them will be 
returned and this one will be deleted.  
55:49 - So if I click on this, yeah, there we go. This is 
how it works. Awesome. Now a little complex part,  
55:57 - we are going to implement the added functionality. 
So let's go on and do that. So for that,  
56:01 - we are going to create two states. First one will 
keep the track if the EDIT MODE is ON or not. And  
56:07 - the second one will keep the value of the editor 
to do so you state. First one will be for edit,  
56:15 - which will be true or false. So it's going to 
be Boolean. So let's add this type of Boolean.  
56:24 - Also import user state. Right? Yeah. So it 
is important that you state so other one,  
56:30 - it's going to keep the added to do text. 
So added to do so it's going to be string  
56:39 - string, it's going to be empty by default. 
Or you know, it's not going to be empty,  
56:45 - actually, it's going to contain 
this thing already. So to do.to.  
56:51 - Do, it's going to contain the to do.to do instead 
of it. So whenever you press the edit mode,  
56:57 - the input text input box appears with this to do 
value. Just go on over here for edit on click.  
57:08 - What are we going to do? We're gonna check if 
EDIT MODE is ON or not. So if edit if Edit Mode  
57:14 - is not on, and to do.is if it's not done. So if 
it's not done, so because if it's already done,  
57:25 - then what's the point of editing it. So if it's 
not, then only then we are going to edit it,  
57:30 - then set edit to be the value of then set 
edit to close, then we are not supposed to  
57:38 - edit it right? Oops, I forgot to do this, or to 
create a callback over here. So if it's not done,  
57:46 - then only we are supposed to edit it. Right, 
cool. So this will help us switch between the  
57:50 - Edit Modes. So if I go and do this, currently, 
it's not going to work. So we have to add an  
57:56 - input field over here and conditional over here. 
So let's add the conditional. So I'm gonna say  
58:03 - if EDIT MODE is ON EDIT MODE is ON, then it's 
going to display the input box. Other than that,  
58:10 - if it's not on, then it's going to display 
the normal that is this part. Okay, an input  
58:19 - like that. What's wrong? Oh, we 
are supposed to remove this thing?  
58:28 - Yep, it's fine. Yeah, there we go. If I click on 
this again, do this. Okay, we have not styled it  
58:36 - yet. So let's just first create it, then I'm going 
to style it. First of all, the value inside of it,  
58:42 - it's going to be this thing. This edit to 
do. So What value did you put inside of it?  
58:47 - To do.to? Do so you're gonna see, as I put this 
on? Yep, it appears. So let me refresh this page.  
58:55 - And if I click on it, you can see it appears. 
Second, we're going to add an On change  
59:00 - function. So on change, we're going to update 
this set edit to do this thing. Set Edit to  
59:09 - change, let's say event dot target dot 
value. So add the event over here. Yep.  
59:19 - And it's going to have a class name for 
us to style this thing of to dues single  
59:29 - text. Again, following the BIM convention 
over here. Yep. So there we go. Also,  
59:35 - whenever we press on this when so on change 
what onchange will do, it's going to update  
59:39 - the state but what I want whenever press 
whenever I press Enter, then it's going to  
59:44 - change the state or it's going to submit it 
and change the actual to do so I'm going to  
59:49 - create a handle edit over here and it's going to 
be firing off whenever it's submitted to submit.  
59:58 - Edit So it's going to take two things, first of 
all the event and the other thing is going to  
60:06 - be to do.id. So this hasn't been created yet. 
Let's create it first const and validate. And  
60:15 - we do things first the event, 
which will be of type react  
60:19 - dot form event. And other one will 
be ID, which will be of type number.  
60:27 - All right, cool. So after this has 
been submitted what it's going to do,  
60:31 - first of all, it's going to be preventing the 
default behavior so that the screen doesn't get  
60:36 - refreshed. And then we're going to set the to dues 
to dues dot map. Inside of it, if the to do.id  
60:48 - matches the ID that is sent by them. That is 
sent by the on submit there, what's going to do,  
60:54 - it's going to take all of that to dues. I mean, 
all of the to dues properties. And instead of  
61:00 - like, for example, but just just 
like we did it with is done,  
61:05 - which is going to update that to do so to do 
will be added to do. And if it doesn't match,  
61:13 - it's just going to return this to do that's all. 
And after this, it's going to set add it to false.  
61:24 - Just like that. So let's go on and try this. If 
I go into hello and press enter. Yep, you can  
61:29 - see it has been edited. Hello, world. Presenter 
Yep, it's the editing is working absolutely fine.  
61:37 - So let's first style this so that it doesn't look 
ugly. Also, if you remember, I set this over here.  
61:46 - This thing outline if I remove this, you're going 
to see if I click on this, you're going to see  
61:50 - this ugly outline over here. So if I remove this, 
you're not going to see this outline over here.  
61:55 - Oh, so it was text. And I have worked. Okay. 
I've written this test over here. Yep. Now it  
62:02 - should work. Yep, there we go. So yeah, I guess 
it's working absolutely fine. But you know,  
62:06 - there's one flaw that I just noticed, if we click 
on this Edit button, you can see the focus does  
62:12 - not go inside of this input component, we have 
to manually click over here, and then type it. So  
62:16 - let's just take care of that. So we're just going 
to again, use make the use of use ref hook. So  
62:25 - use ref. And I'm going to name it input ref. You 
can name it anything doesn't really matter. And  
62:33 - just like we did earlier, first of all, let 
me import this. And just like we did earlier,  
62:38 - let's take this thing. We need 
to go. Yeah. SGML input element.  
62:45 - Yeah, and provide this ref equals input ref. And 
we're gonna create a use effect over here, which,  
62:54 - whenever the edit changes, it's going to fire off 
this. That means it's going to wait good to do so  
63:00 - let me show you input ref. First Polycom input 
input ref above this one. Yeah, so input ref dot  
63:07 - current dot focus. So it's going to focus on that 
thing. Whenever this changes, so if I go and press  
63:15 - edit, you can see the focus is already inside 
of this. Yep, it's working fine. Cool. So our to  
63:22 - do list app has been successfully completed. But 
there's one more thing left that I need to explain  
63:27 - you. That is use reducer hook. So for explaining 
user user hook. You know, if you don't know what  
63:34 - use reducer hook is, I've created a full video on 
this. My previous video was on use reducer hook,  
63:39 - I've taught how you can create a shopping cart app 
by using use reducer hook. So you can go on and  
63:44 - watch that video link will be in the description 
or I button above. But if you already know,  
63:49 - let's go on and understand how we can use the 
TypeScript with user user hook. So inside of  
63:53 - this models dot TSX, I'm just going to explain 
you. So this is going to be a homework to you.  
63:58 - I'm going to explain you use reducer hook and 
your job will be to implement it inside of this  
64:03 - project. So let's say we have created a component 
over here, let me create a dummy component.  
64:10 - And inside of it, we're gonna 
create a reducer by using use  
64:14 - reducer. And as I told you in the previous 
video, what we do in user research,  
64:18 - we provided an initial value. So we provide this 
initial value. First of all, let me just import it  
64:24 - just like this. So let's bring it down over 
here. Yeah, we can import it like this.  
64:30 - And now we are going to provide it a 
reducer. So let's say to do reducer.  
64:38 - And it's going to return us the state and 
dispatch. Now let's create this to do reducer.  
64:44 - So const to do reducer. Now what do the reducer 
take? It takes a state and it takes the actions.  
64:52 - So we need to provide the types to our state 
and action. So let's just first write state  
64:57 - comma action. So what is the state going to be? 
So state is going to be the array of two dues,  
65:05 - right? So we can just take this interface, 
and right to do, and the array of to do. So  
65:13 - this is how we define the state, and what are 
we going to keep in our action. So our action  
65:18 - are going to have three things add, add 
the to do remove the to do and done. So  
65:24 - it's going to perform three actions. So let's 
create the type for our action. So type actions  
65:31 - and go to first action, what is going to be, so 
we want them to be one at a time, right? Either  
65:38 - ad can be performed, or remove or done can be 
performed. So we're just gonna write like this  
65:43 - side of the curly braces, we're gonna write type, 
because obviously, this action has two properties,  
65:48 - right? One is type and other is payload. So type 
is going to be ad, and the payload is going to be  
65:57 - a string, because we are sending something to add 
something, we are going to send the string from  
66:02 - the input box. So this, otherwise, what's going 
to happen is, so let me just write this over here.  
66:08 - Otherwise, let me copy this up. Otherwise, this is 
going to happen, it's going to have remove action.  
66:15 - And refer removing, we just need to send the 
ID. So we're going to type number over here.  
66:21 - Otherwise, we're gonna do done action. And it's 
going to be number as well. So this is how you  
66:29 - define your actions. Now we'll just take it and 
assign it to over here, just like that. Okay,  
66:34 - now let's create this to do reducer. So inside of 
it, we're gonna have a switch case. So let me just  
66:40 - bring it in. So this is our reducer. Look, if you 
have already worked on reuse reducer, then you're  
66:46 - going to understand how this works. It's just to 
understand how you can integrate TypeScript inside  
66:50 - of it. So this is just the Add Action, we're just 
adding this action like this, the Remove action,  
66:56 - that is just the things that I've already done in 
the project. This is how you create a use reducer  
67:01 - in our React apps. So I'm just gonna make it 
commented out. So basically, what I wanted to  
67:06 - explain to you is this action type and this state 
type, so yep. So now what I want you to do is I  
67:12 - want you to take this reducer, and I want you 
to integrate inside of our app. And if you don't  
67:17 - know, how do you do, sir, what just must watch my 
previous video, which is on user reducer. Awesome.  
67:23 - So we have successfully understood react with 
TypeScript. And let's start integrating the drag  
67:28 - and drop in our application. So let's make the 
suitable UI changes so that we can go ahead and  
67:33 - make it look like this. So whenever we enter the 
to do, it appears on active tasks. And we should  
67:40 - have a completed task section over here. So let's 
go and make the changes in this particular app.  
67:45 - So I'm going to go to to dues list component.  
67:50 - And let me remove this day. And I'm going 
to add another div called container.  
67:58 - And inside of this container div, we're 
going to have another div called to dues.  
68:05 - Now these two dues, they will be for this 
particular active tasks. And we're gonna create  
68:10 - another div for our completed tasks. So I'm gonna 
take this div and paste it and let's add another  
68:18 - class over here. Let's see remove. And instead 
of both of these, we're gonna add some code,  
68:24 - we're gonna first of all, add this span 
tag for the headings. So span.to dues  
68:33 - underscore underscore heading. Alright, and 
instead of this, I'm gonna write active tasks.  
68:41 - And below this, we're gonna take this to dues 
state that is being passed from AB dot TSX. And  
68:48 - we are going to render all of the to dues 
to do. And again, just like previously,  
68:57 - we are going to render our single to do 
component over here. So single to do.  
69:04 - And we are going to pass them pass it to do, 
and we need to send to dues. Also clarity.  
69:15 - Great, so they should work now. Okay, it doesn't 
look really good right now. So I'm going to fix  
69:22 - that later. So let's copy this up. And I'm going 
to paste this inside of our to do remove as well.  
69:30 - Yeah, that looks ugly. So instead of active tasks, 
I'm gonna write completed tasks. So right now I'm  
69:38 - just rendering this to dues roadmap inside of 
this, but later we are going to have a separate  
69:42 - state for completed to dues and we're going 
to render that particular state over here. Now  
69:46 - let's provide it some styling so that it doesn't 
look this ugly. So go to style dot CSS, and let's  
69:52 - start by changing this width to 95%. And come 
down over here I'm just below above this to do  
70:01 - I'm going to add a container class 
that we created the container.  
70:04 - And we're going to provide this container 
color display flex so that it appears  
70:09 - in one row. So display, flex, some width of 95%. 
And I'm going to bring in a few styles so that we  
70:20 - don't have to waste time writing CSS, we're going 
to add some margin top to create some spacing  
70:26 - justify content is going to be spaced between so 
that some, they have some space in between them,  
70:31 - just like this, some align items to flex start 
so that they are aligned to the very start of the  
70:36 - container. Cool. Now we're gonna make some changes 
to this to dues. So I'm going to remove this and  
70:43 - change the width to 47.5%, because they are 
taking the half of the screen, right, so 47.5%,  
70:51 - and I'm going to remove this flex wrap. And I'm 
going to add, I'm going to make them call them so  
70:56 - that they appear in one row. So right now if you 
see they appear side by side, so I'm going to make  
71:01 - them flex direction column, some Givens, give them 
some padding, some border radius of five pixel and  
71:07 - some background color. So let's see. Yep, that 
looks pretty good. And now we should make this  
71:12 - single to do to span the whole of this div. But 
first of all, let's provide some to do's heading,  
71:19 - style so.to Do is heading it's going 
to have some font size of 30 pixels  
71:30 - provided 30 pixels. Now next for to dues single, 
we need to provide it full width already, we don't  
71:35 - need to provide it any of it because the display 
is flex. So it's all automatically going to span  
71:39 - it. Yep, there we go. And we are going to add some 
transition to it so that when we hover on this,  
71:45 - it grows a little bit. So we are going to add 
that hover as well. But first, let me add just  
71:50 - transition of 0.2 seconds. And let's add those 
hover styles just like this. So when we hover on  
71:57 - this box shadow will appear of five pixels. And 
we are gonna scale it to 1.03. So it's gonna get  
72:03 - a little bit bigger. So see over here. Yep, this 
is the animation. Awesome. Now let's come down.  
72:11 - Now we need to remove insert a media query, I'm 
going to remove this we don't need this anymore,  
72:16 - because with automatically controlled, but for our 
to do is when it's when the screen is smaller than  
72:21 - 100 pixels, we're gonna have to do is with 
a width of 45%. So let's check it out. Yep,  
72:27 - just like that. Now next, inside of here, in 
order to do is I'm going to add some margin bottom  
72:33 - so that it looks a little bit neat in smaller 
screens. Also, we need to remove this with 100%.  
72:40 - So that it creates a little bit spacing, and 
we're gonna add some container styles to make them  
72:46 - from top to bottom. So we're gonna provide 
that container, some flex direction of column  
72:50 - width width of 95%. So currently, it's half of it 
around 50%. But we're gonna make flex direction to  
72:58 - be column. Yep, just like this. And also, this 
completed tasks should have a background color  
73:04 - of red. So let's add remove class that we added 
it. So background color is going to be red. Yep,  
73:12 - that looks much better. Cool. Now I think our UI 
is done. Now let's start implementing the React  
73:17 - beautiful DND package into our application. So 
I'm going to open a new tab and search react,  
73:23 - beautiful DND. Let's go to this NPM package. And 
here we go. We have the installation instructions  
73:29 - over here. And we have some documentation, if 
you want to go ahead and read this, you can do  
73:33 - that. So this is how the drag and drop will work. 
So we're going to wrap all of our app with this  
73:38 - drag drop context tag. And the place that is this 
place where all of our to dues will be rendered,  
73:43 - we're gonna wrap it with droppable. And one 
single to do will be wrapped with draggable  
73:48 - tag. If you're unable to understand this right 
now, don't worry, I'm gonna explain everything  
73:52 - as we go along. Let's go to our terminal 
and paste this. And PMI react beautiful DND  
73:59 - Oh, there we go. It's installed. Let me close this 
terminal. And let's go to our app dot TSX. And I'm  
74:05 - going to create a new state for our completed 
to do's. So use state comm pleted to dues  
74:15 - and it's going to be an empty array to begin 
with. And it's going to be of type the same to  
74:20 - dues type. Now if you're coding in JavaScript, 
you don't need to worry about all of this types  
74:24 - and stuff, you can directly just create use 
state like this. Now we need to send both  
74:29 - of these to our to do's list component over 
here. Set completed to dues also this thing.  
74:40 - Obviously, it's giving us an error because we 
because this doesn't exist in our to dues list.  
74:45 - So let's go ahead and add this. So completed. 
Again, you don't need to worry about all of  
74:50 - this if you're coding in JavaScript. So it was 
of type two dues array. So we're gonna take this  
74:58 - add it over here and Set completed  
75:04 - to dues. Now what? How did we added the type 
to this? We just hover on this and take this  
75:15 - okay, completed to dues? Yep, that's fine. All 
right, so our app is working fine till now. Now  
75:22 - how do we add react beautiful DND to our app. So 
we need to go to our app dot TSX, which we are  
75:28 - already in. So we need to wrap this with something 
called drag drop context. So drag, drop context.  
75:37 - And we're gonna wrap all of our app.  
75:41 - Inside of this, now we need to import it 
from react beautiful DND. So in port from  
75:50 - react, beautiful DND and just go over here, 
press Ctr l space ControlSpace whoops, okay,  
75:56 - it's not coming. Oh, I got it, we forgot to do 
one thing, we forgot to install the types for  
76:01 - this particular library. So whenever you 
install few dependencies in TypeScript,  
76:06 - they require you to install some types 
for them. So I'm going to click over here.  
76:11 - And it's going to take us over here, so we need 
to copy this line, or we can simply copy this over  
76:16 - here. And just go back and open another terminal 
and just install these types. Because these  
76:22 - types are important for this package to function 
properly. Or there we go. It has installed let me  
76:27 - close this terminal up. And now if I go and press 
Ctrl Space, and click on this, you can see it has  
76:33 - imported. Now it says an error. So it requires 
a prop called on drag end, which we are going to  
76:39 - worry about later, but don't need to worry about 
right now. So let's go to to do list. And instead  
76:44 - of our to do list component, we're gonna wrap 
it with something called droppable. Because this  
76:49 - area right here is a droppable. area, this area 
is also a tropical area. So if I type anything,  
76:54 - okay, so this is going to be a draggable thing. 
And this is going to be a tropical thing.  
76:59 - So let's wrap this inside of droppable. So 
right below this, I'm going to add droppable.  
77:06 - And I'm going to take hold of this div  
77:10 - and push it inside of it. Now this droppable 
is going to have an ID, obviously, it's still  
77:17 - giving that around dragon. So let me just add 
this on Dragon for now. Just like this. Yeah,  
77:23 - fine. So it's, it has stopped giving error for 
there, there, but over here, it's giving some  
77:28 - error, it requires droppable props. So first 
of all, we need to give this a droppable ID.  
77:34 - So droppable ID is nothing but to identify this 
droppable zone uniquely. So we're gonna provide  
77:40 - it, let's say to do's list, okay, and inside of 
it, we can, we can just put it just like this,  
77:47 - we need to pass a callback, and then we need 
to shift it inside of there. So I'm gonna open  
77:52 - a curly brace, and inside of a function, you 
can say we're gonna take this div and paste it.  
78:01 - Now inside of this function, it takes a few 
parameters. So first one will be provided.  
78:06 - And second one I'll talk about later. So first 
of all provided so what is provided going to do  
78:12 - so what did it take this provided and provide it 
to our parent div of this particular droppable  
78:17 - zone. So to the parent if we need to provide a 
rest, and ref will have provided.in a ref so that  
78:24 - react beautiful DND can control this as a drop 
zone. And also, we also need to spread provided  
78:31 - dot droppable props. So that is what it was asking 
provided. Dot droppable props. Yeah, that's fine.  
78:41 - Cool. So But still, if you go on over 
here and do anything, you're gonna see,  
78:46 - it's still not working, because we have to do a 
lot of things apart from this as well. So let's  
78:50 - make this droppable zone as well, just like we 
did with this thing. So I'm going to copy this up,  
78:55 - go right over here. And let's put this div inside 
of here. And instead of to do list, I'm going to  
79:02 - change its name to do is remove. Okay, now 
we need to provide it the function again,  
79:09 - just like we did with the previous one. So I'm 
going to shift hold of this div inside of there,  
79:19 - just like that. We're gonna take provided 
and we're going to take both of these things,  
79:24 - and we need to provide it to our parent div. Just 
like this. Alright, cool. No error, and still  
79:32 - not working. Nothing. Okay, yeah, I forgot 
one thing. We passed this completed to dues  
79:38 - so we need this as well. So let me keep them 
over here. Comma, set completed to dues.  
79:47 - Yep. So we're gonna take this completed to 
dues and replace it with these two dues.  
79:53 - So with this, this and instead of this, I'm gonna 
put set completed to dues Yep, so now you're gonna  
80:01 - see, it's not gonna show anything, even if we add 
a lot of things over here. Alright, cool. So one  
80:07 - more thing I forgot to do is we need to send the 
index to our single to dues component, because  
80:12 - it's going to track which of this particular 
to do is being dragged, don't worry, I'm  
80:17 - going to explain it in just a second. So for now, 
just follow along, on passing this index as index,  
80:24 - you're going to see how I'm going to use 
this. Again, it's giving error because  
80:27 - single to do does not exist, except index 
right now, but we're gonna make it accept it.  
80:34 - Alright, now let's go to single to dues and add 
the type for index, which is going to be a number.  
80:42 - And over here as well, I'm going to add index. 
Great, now we need to make this single to dues as  
80:49 - a draggable. thing. So outside of this, 
I'm going to add a tag called draggable.  
80:58 - And I'm gonna wrap all of this form in this 
draggable. Just like that, and similarly,  
81:05 - we're gonna add the function inside of this as 
well. But let's just provide it a draggable ID.  
81:11 - And we're gonna make this draggable ID, so that 
it should be unique, right, so I'm just going  
81:16 - to provide the ID of the two dues to this. So 
to do.id.to string, and I'm going to provide it  
81:25 - the index so that it keeps the trap of track of 
index. So this is the same index that we brought  
81:30 - from the to do list component. And now inside 
of it, let's add our function, take the form  
81:41 - and put it inside of it. Just like this, you 
can see, we put the form inside of this. Now,  
81:47 - again, we need to take provided. So you see, 
this is just a similar kind of stuff, we just  
81:52 - have to set up few things, and then you're good 
to go. So inside of this, we just need to provide  
81:58 - few things provided dot draggable props. So 
earlier, we put this thing droppable props,  
82:05 - but over here, we're gonna put the draggable 
props, and another things, we're gonna add drag  
82:11 - handle props. And of course, we need to provide 
the ref so that it can control it properly.  
82:17 - Yep, just like that. Now, if we go to our 
browser, and let's add something. And if I  
82:25 - grab it, you can see it's working. But there's 
some issue over here. So if I go on and grab this,  
82:31 - you can see this, this thing is levitating 
in the here. Why is this happening? Also see,  
82:38 - if we go over here, it rests over here, but then 
goes to its original position. So if I go on and  
82:42 - make this like this, it's not saving the state. So 
we need to add this logic. So we're gonna add this  
82:48 - logic later. But first, we need to take care of 
this thing. Why is this levitating in the air. So  
82:52 - to fix this, we're gonna go to our to dues list. 
And right over here, we're gonna add something  
82:59 - called provider, provided dot placeholder. And 
similarly, we're gonna add this over here as  
83:08 - just like that. Now, if I go on and 
grab this, yep, you can see it's,  
83:13 - it produces an empty placeholder for that 
item. So if I go on over here, you can see  
83:19 - it's providing us the space to be dropped on. 
Cool, but, but it's still not saving the state.  
83:25 - So let's go on and write the logic for that. So if 
I go on to app dot TSX, you might remember this on  
83:31 - drag function on drag and function. So I'm going 
to create this function now. So let's remove this.  
83:39 - And const on drag on drag and, and 
let's add this function right over here.  
83:47 - Now this on drag ends, sends this a parameter 
called result. So we're going to take result  
83:53 - parameter. And result parameter will be of type 
drop results. Now drop drop results. So if you're  
84:00 - coding in JavaScript, you don't need to do 
this obviously, but in TypeScript, you do.  
84:04 - So drop result. And you can see, and you can see 
it has imported that from react beautiful DND.  
84:13 - And now let's see what is inside of this result 
variable. So let's go and log this. So result.  
84:19 - And let's go to our browser, open the console. And 
if I go on and drag and drop it, yeah, you can see  
84:27 - we got something. So let's explore this. Inside 
of this we have two fields first for destination  
84:32 - and other for source. So what is source source 
is something where it came from, for example,  
84:38 - if it came from over here, so it's going to give 
this that okay, it has an index of zero in this  
84:44 - array. So it was an index of zero and destination 
has where where I dropped it, so I dropped it  
84:50 - over here. So it's going to have a index of one 
so it went to index of one in this particular  
84:56 - area. So how do we identify in which area So 
remember, we provided it droppable ID, so it's  
85:03 - gonna tell us, it was in the droppable, ID, it was 
dropped in the droppable ID and it was taken from  
85:09 - the two dues list. So if I go on and take this 
and drop this over here, you're gonna see, the  
85:14 - source is to dues list and the destination is to 
do is remove. So yeah, this is how we're going to  
85:21 - implement our logic. So let's find out. So we're 
gonna take out both of these things from result.  
85:27 - So result, and we're gonna take out source and 
destination. Now what are we going to do with it?  
85:36 - First of all, we're going to check if there is no 
destination, if the destination variable is empty,  
85:41 - how is that going to happen? If I, if we 
take this and wait, let me just first log it.  
85:49 - Yeah, so if I take this and just leave it over 
in the empty space, so we're going to see,  
85:55 - destination is null. So if the destination 
is null, we don't have to do anything.  
85:59 - So if the destination doesn't exist, so we're 
just gonna return it. Otherwise second use  
86:10 - case will be if we take this and we drop it 
in the same position. So if the source and  
86:15 - the destination are same, then also we're gonna 
do nothing. So if destination dot droppable ID  
86:26 - is equal to source dot droppable ID, and it's 
in the same index. So I'm going to copy this up,  
86:34 - paste this, and instead of Rockwell ID, right 
index, so if it's in the same index, as well,  
86:39 - so return. Great. So these were our base cases. 
So after this, we're going to declare a variable  
86:47 - called add. And we're gonna declare two more 
variables. First one will be active, which will  
86:54 - have all of the two dues in the to dues list state 
in this state. So we're going to add it over here,  
87:02 - and the other one will be complete, which is going 
to have all of the completed to dues inside of it.  
87:11 - Yeah, just like that. Now, why have I assigned 
it to this active, why can't we just directly  
87:16 - manipulate it. So again, when we have manipulated 
our active variable, we are going to provide it to  
87:20 - our set to do state. So that will be a more neat 
way to do this. So now we're going to check from  
87:25 - where it came from. So we're going to first check 
the source and we're going to take it from that  
87:29 - particular source. So if first of all we're going 
to check if it came from To Do List droppable ID,  
87:35 - so source dot droppable, ID, if it's equal to, to 
do is list, then what are we going to do inside  
87:43 - of this add variable, we're going to take that 
particular thing, so active, and it was in the  
87:50 - index of source dot index, right, so we're going 
to take source dot index, we're going to take  
87:55 - it from the source dot index, and then we are 
going to remove it from that particular place.  
88:00 - So active dot slice, I mean splice. So you can 
see what here is splice is used to manipulate  
88:07 - the arrays, remove or add inside of the array. 
So we're gonna go to source dot index, and we  
88:14 - are going to remove it, remove one item from that 
place, that is that item, which we have taken in  
88:19 - the Add. Now we're going to do this similarly for 
two dues remove as well. So else to do is remove.  
88:24 - So if it was in the complete, it came from over 
there, so we're going to take it from the complete  
88:30 - and when I remove it from there, okay, cool. So 
we have taken that particular to do now we need  
88:36 - to add it to the destination. So SILMO similarly, 
we're gonna check if so let me just copy this up.  
88:45 - So if the source dot droppable ID is to 
do list, then what are we going to do?  
88:51 - Active dot splice. So now we're going 
to add it inside of this array. Okay.  
88:58 - So where do we need to add it, we need 
to add it destination dot index. Now,  
89:02 - since we are not removing anything, so we're just 
gonna say zero, don't remove anything. But what  
89:06 - are we doing? We're adding it so we're gonna say 
add this add variable that we took from over here,  
89:12 - we're going to add it over here. Copy this up 
and paste it over here. And instead of active,  
89:17 - we're gonna write complete. And now that we 
have manipulated both of these variables,  
89:22 - now we're gonna add it to our state. So set, 
completed to dues we're gonna have is going to  
89:28 - have complete and set to deuce is going to have 
active. Now this should work if everything seems  
89:37 - fine. Yep, looks good. Let's go ahead and 
try it. If I take it and drop it over here,  
89:44 - okay, something went wrong clearly. Oh, for adding 
this we need to add this for over here. We need to  
89:50 - write destination, not the source, because we're 
checking for the destination, right? Go back and  
89:57 - try to drop it. Yep, it's working absolutely 
fine. See, you see how easy it is to implement  
90:03 - drag and drop in a React js applications. But 
wait, I need to do one more thing. So if I  
90:10 - pick it up, I should see some indicator that 
it's in that drag mode. Or if we hover on this,  
90:15 - they should glow up. And if I hover on 
this particular part should glow up. So  
90:20 - let's provide that, I'm going to go to my 
code and inside of my to do list component.  
90:25 - So I told you, there's one more parameter 
that it takes. And that is a snapshot.  
90:30 - So we're going to take this snapshot, and let's 
go to our class names. And I'm going to wrap this  
90:34 - in this curly braces and provide this template 
string so that we can write j s inside of it.  
90:41 - And I'm going to open this curly braces 
and write snapshot.is dragging over. So  
90:47 - if it's dragging over this, then provide it 
the class name of drag active. Otherwise,  
90:57 - don't provide it any class names. Similarly, 
we're gonna do this to complete it, as well. So  
91:06 - at backticks, and comma, snapshots snapshot 
snapshot is dragging over, then drag, remove,  
91:20 - or probably drag complete. Let's go ahead and add 
CSS for both of these, instead of our styles. I'm  
91:30 - just going to make their background color a little 
bit more intense. So if we go on, if I pick this  
91:35 - up, you can see if I hover on this, it's gonna 
glow. If I hover on this, this is going to glow  
91:41 - just like this. And I want to increase the shadow 
of this to do as well when it's grabbed by me. So  
91:48 - if I go on and go to our single to do again, 
we also have the snapshot here as well.  
91:56 - And with these to do single, 
I'm going to add another class.  
92:02 - So snapshot.is dragging. So over there it was, is 
dragging over, so and over here it is dragging.  
92:13 - So we're gonna provide it the class name of 
drag. Otherwise, we're not going to provide  
92:17 - any class name. And let's add these styles 
for it. I'm going to add some intense back  
92:23 - background Shadow DOM in box shadow. So in 20 
pixels earlier, it was 15 pixels if you remember.  
92:30 - So if I grab this, you're gonna see the 
shadow has gotten a little bit intense.  
92:36 - Awesome, so you see how easy it is to implement 
drag and drop in a React js applications. I  
92:41 - would love to see the projects that 
you guys make after learning this.  
92:44 - So thank you all for watching this video. If you 
like this video, just give this video a huge fat  
92:48 - thumbs up and don't forget to subscribe to the 
channel. Just go to youtube.com/roadside coder  
92:54 - and click on the subscribe button. It motivates me 
to create more such awesome videos for you guys.