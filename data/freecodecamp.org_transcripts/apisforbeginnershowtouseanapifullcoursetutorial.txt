00:00 - - Hello, I'm Craig, and I'm a developer.
00:02 - In this course we're
gonna be exploring a term
00:04 - that you've probably heard quite a bit.
00:06 - That term is API,
00:07 - or Application Programming Interface.
00:10 - In addition to being able to
recite what it stands for,
00:12 - when you complete this course,
00:14 - you'll be able to
discuss what an API does,
00:16 - you'll understand why they exist,
00:17 - and you'll be able to list
00:18 - the many benefits that they provide.
00:20 - You'll even get some hands on experience
00:22 - using a few popular web API's
00:24 - which will give you a taste
00:25 - of what all this excitement is about.
00:28 - We'll be starting from the very beginning
00:30 - so there really isn't too much
00:31 - I'm gonna be expecting you to know
00:32 - before starting this course.
00:34 - I would like to request
00:35 - that you have a touch of
experience with coding,
00:37 - and a wee bit of knowledge about the web.
00:39 - If you've written any program at all,
00:41 - even the typical first program,
00:43 - you know the one where you
write the words hello world?
00:45 - If you've done that in
any programming language,
00:48 - you'll be pretty much
ready for this course.
00:50 - It will be helpful for you
to have a basic understanding
00:52 - of how the web works with
web servers, and browsers,
00:55 - but don't sweat it.
00:56 - We'll touch on this too.
00:57 - Now, if you haven't yet
met these requirements,
01:00 - please check the notes
attached to this video
01:01 - for where to get started
with some beginning web,
01:03 - and programming concepts.
01:04 - Oh, that reminds me,
01:06 - you should probably take some time
01:07 - to get used to your learning environment.
01:09 - The notes that I just discussed
are attached to this video.
01:12 - I'll also drop more
information in that section
01:14 - to keep you updated on
what might've changed
01:15 - from the time I recorded this.
01:17 - Now I'll do my best to
remind you to look in there
01:19 - when there's something that
I think you just have to see,
01:22 - but you really should get in the habit
01:23 - of checking that area out.
01:24 - There'll be tons of
juicy information there.
01:27 - Now these videos have captions,
01:29 - so if you feel like you might
benefit from having those on,
01:31 - please use them.
01:32 - This space is all yours.
01:34 - If you want me to speak slower,
01:35 - use the speed controls to slow me down,
01:38 - and if you know, I'm
taking too long of a time,
01:40 - just speed me up!
01:41 - I make a pretty good chipmunk,
01:42 - and last, but certainly not least,
01:44 - take advantage of the fact
01:45 - that you are in a video based course.
01:48 - If you need me to repeat myself,
01:49 - use the video controls to rewind me.
01:51 - If you feel like you need a
break to let something sink in,
01:54 - by all means, please pause me.
01:56 - I'll be right here waiting for you.
01:59 - I know that I've gotten into
some bad video viewing habits
02:02 - with all the streaming media.
02:04 - Now, while binging might
be a great way to consume
02:06 - an entire season of your favorite show,
02:08 - it's not the best way
to learn something new.
02:10 - Education isn't meant to be binged,
02:12 - and because of this
02:13 - I'll probably remind you
quite a bit to take breaks,
02:16 - and encourage you to let what
you just learned marinate.
02:20 - Alright, let's get to it.
02:22 - API, those three little letters
02:25 - generate quite the buzz, don't they?
02:26 - Now, first, I'd like to
take some time upfront here
02:29 - to clearly break down what is meant
02:31 - by Application Programming Interface.
02:33 - By understanding its purpose,
and a touch of its history,
02:35 - I think you'll start
to see its importance,
02:38 - and begin to understand
02:39 - why this term keeps
popping up in your life.
02:42 - After we get a good grasp on the what,
02:44 - and the why of API's,
02:45 - we'll go, and learn how to
explore to existing ones.
02:48 - We'll get familiar with
a handy tool, Postman,
02:50 - which provides a nice way to
interact with web-based APIs.
02:53 - We'll use that tool to
hit an external web API
02:56 - to send actual text messages,
02:58 - and get some interesting data back
03:00 - from a streaming music service API.
03:02 - After some practice using the APIs,
03:04 - we'll insert them into a web application.
03:06 - The application we're going to be building
03:08 - is a web app called Complimenter.
03:10 - Our app will allow you to send compliments
03:12 - to your friends, your families,
03:13 - and your colleagues over text message,
03:15 - and then it encourages
them to visit your site,
03:17 - and do the same.
03:18 - Now I've included the final applications
03:20 - in both JavaScript, and Python,
03:22 - and together we'll walk through
how to use external web APIs
03:25 - to solve the missing pieces.
03:27 - We're going to be strictly
using APIs in this course.
03:30 - We won't be writing our own now.
03:31 - Well now you most likely
will end up learning
03:33 - some best practices in API design,
03:35 - we won't be covering that specifically.
03:37 - There are many great courses available
03:38 - that show the creation thought process,
03:41 - and I've linked to some of my faves
03:42 - in the notes attached to this video.
03:44 - In my opinion,
03:45 - the best way to start
learning about any acronym
03:47 - is to focus on each individual letter.
03:49 - For API, I think we should
start on the last character,
03:52 - the I, interface.
03:54 - Let's talk a bit about interfaces
that you've seen already.
03:57 - Interfaces are all around us.
04:00 - For instance, this radio here,
04:01 - it has a familiar interface.
04:03 - The interface allows me to do
things like change the volume,
04:06 - change the station,
04:07 - I can turn it off, and on.
04:08 - I literally have no idea
04:10 - how anything inside this thing works,
04:12 - but still the interface
allows me to control
04:14 - the way it works through the
options that are exposed.
04:18 - The magic that is happening
04:19 - is completely abstracted away from me,
04:21 - and I'm still in control
04:23 - of what has been determined,
that I, a user, can handle.
04:25 - Interfaces usually evolve over time,
04:28 - like an alarm clock radio for example.
04:29 - It has my familiar volume,
and station controls,
04:32 - and it also adds some new
features like changing the time,
04:35 - and setting the alarm.
04:36 - I still have no idea how this
works implementation-wise,
04:40 - but the interface is something
04:41 - that I can understand usually,
04:44 - and as technology evolves,
04:46 - and new options come into existence,
04:48 - they make their way into the
new versions of the interface.
04:50 - Still abstracting away things for us,
04:53 - but enabling us to be in
control of the new features.
04:57 - Sometimes these physical
interfaces get so recognizable
05:00 - that they even make their way into GUIs.
05:03 - Did you hear that?
05:04 - There it is again, gooey, or
GUI, Graphical User Interface.
05:08 - This is my streaming
music app on my phone,
05:11 - and there's my familiar play button
05:12 - in the User Interface, or UI,
05:15 - and I know what that play
button does when I press it,
05:18 - but I have no idea how it does it,
05:20 - and I'm okay with that
level of abstraction.
05:23 - I depend on it even.
05:24 - What would I do in public
transit without music?
05:26 - Like talk to people?
05:27 - Hi, how's it going?
05:31 - Now the developer who wrote
this streaming music application
05:34 - of course understands how
the play button works.
05:36 - She coded the button so
that when it gets clicked,
05:38 - the music starts playing.
05:40 - Here's the thing though.
05:41 - Our developer is also working with
05:43 - quite a few interfaces
that are abstracting away
05:45 - some of the details for her.
05:47 - For instance, she wrote code
05:48 - that happens when the button is clicked.
05:50 - She probably did that using an
Event Handler on the button.
05:54 - What she didn't have to do however,
05:55 - was write the code that
makes the button interact,
05:58 - and change with the press.
05:59 - She didn't have to write the code
06:00 - that makes that familiar clicking noise.
06:02 - It was already there for her.
06:04 - Buttons are in fact an interface.
06:06 - They provide the developer
06:07 - the means of controlling its interactions
06:09 - while abstracting away
06:11 - how that actually works,
implementation-wise.
06:14 - This button is part of the API,
06:16 - or Application Programming Interface,
06:18 - that's available from
the application framework
06:21 - that was used to create the app.
06:22 - Because most apps need buttons,
06:24 - this interface has been
created to help our developer,
06:27 - or application programmer to use.
06:30 - Now by implementing the button interface,
06:32 - our developer was able
to make her code run
06:34 - when the button was clicked.
06:36 - It's worth noting that the code probably
06:38 - also uses a media player API
06:40 - that's provided by the
operating system of the device
06:43 - like Android, or iOS.
06:45 - This media player API abstracts
away needing to understand
06:49 - the details of how to send
audio data to the hardware.
06:52 - The developer knows that
he just want to call
06:54 - the play method of the media player API,
06:57 - and I suppose too,
06:59 - the song isn't stored on the device.
07:01 - It's being streamed over the network,
07:02 - so a web based API call
07:04 - has been made over the
internet to get the data.
07:06 - It's actually APIs all
the way down to the ones,
07:09 - and zeros providing
abstractions at many levels.
07:12 - Let's take a look at
07:13 - what all these interfaces have in common.
07:15 - They all define ways for us to interact,
07:18 - or communicate with an object,
07:19 - whether that object be
physical, or software,
07:22 - and as a user of the interface,
07:24 - we don't need to understand
the implementation.
07:26 - We don't need to know how it works.
07:27 - We just need to know
07:28 - what we've been allowed to change, or see.
07:31 - Interfaces abstract
away the implementation.
07:34 - Now, while the UI,
07:36 - or User Interface is made for
the user of the application,
07:39 - the API is made for the
application programmer to use,
07:42 - and extend in their applications
07:45 - with the I covered in our API,
07:48 - let's take a deeper look at
the rest of the API acronym.
07:51 - An API is a contract of sorts,
07:53 - it defines how it's expected to be used,
07:55 - and it defines what you can
expect to receive by using it.
07:59 - Think of it as a set of tools
08:01 - designed for software
developers like yourself.
08:03 - An API is created to help
make your life easier
08:06 - by giving you access to
data, and by providing you
08:09 - with an abstraction of the implementation.
08:12 - You know, not needing to know
08:13 - how it's doing whatever it's doing.
08:15 - They save you from needing to
create everything yourself.
08:19 - When designed well,
08:20 - they make doing nearly
impossible things happen,
08:22 - in just a few lines of code.
08:24 - You're probably starting
to see why it's important
08:25 - to get familiar with them, right?
08:27 - I want to do a quick word of warning here
08:29 - about some naming issues that
you'll probably run into.
08:32 - These days, The term API
is almost always used
08:35 - as a way to explain web-based APIs.
08:37 - In fact, it's probably safe to assume
08:39 - that when you hear API in the wild,
08:41 - it's most likely that
people are talking about
08:43 - a web based API.
08:45 - Now we'll explore those here in a few.
08:46 - However, if we focus on all types of APIs
08:49 - instead of just the web based subset,
08:52 - we'll get a better look into
08:53 - why web-based is are so popular,
08:55 - so hang tight, we're getting there.
08:57 - APIs are everywhere in
your software journey,
08:59 - just about everywhere you look.
09:01 - Your programming language,
09:02 - whichever one it might
be provides many APIs.
09:05 - Let's take a look at one
that's common in all of them.
09:08 - They all provide some way
of working with strings,
09:11 - you know, like a series of characters.
09:13 - You want to make your textile upper case?
09:14 - Just call the API method, and voila,
09:17 - you could probably create
that uppercase string
09:19 - all by yourself by doing some sort of
09:21 - low level bit math on each character,
09:24 - but you don't need to,
09:25 - because your programming language
09:27 - has abstracted that away for you,
09:28 - and provided a handy string API.
09:31 - It exists because this is
a common enough problem
09:33 - that developers run into,
09:35 - because these programming
language specifications
09:37 - are just interfaces,
09:38 - different operating systems
09:40 - can supply their own implementations
09:42 - so that the code works
properly in their environment.
09:44 - I think an easy way of
picturing this is to think about
09:47 - how different operating
systems like Windows,
09:49 - or Mac OS maintain their files.
09:51 - They're totally different,
09:53 - yet your programming language
09:54 - provides a single API for
working with the file system.
09:58 - You can write one script,
09:59 - and it works in either Mac, or Windows.
10:02 - It's the implementation
10:03 - that takes care of all
the details for you.
10:05 - Pretty cool, right?
10:07 - Definitely something to be thankful for.
10:09 - It makes our life so much
easier not having to worry about
10:11 - what operating system is being used.
10:13 - The importance of an API
10:15 - to a language cannot be understated.
10:17 - There's been some fascinating legal cases
10:19 - where it's been questioned
if the language API itself,
10:21 - again, not the implementation
can be copyrighted.
10:24 - Check out the notes for more on that.
10:26 - Along similar lines, there
are different web browsers,
10:29 - you know like Google
Chrome, Microsoft Edge,
10:31 - Safari, Firefox, and Brave.
10:33 - Now you might not have
pondered this before,
10:35 - but isn't it amazing that you
can write code for the web,
10:38 - and it will work in any of them?
10:40 - Now this works because
there's a set of web APIs
10:43 - that web browsers all must implement
10:46 - in order to make that
magic happen for you.
10:48 - We're standing on the
shoulders of giants folks.
10:51 - We really should thank
those giants more often.
10:53 - There are authors,
10:54 - and maintainers of libraries
that package up code,
10:57 - and solve common problems
10:58 - so that you don't need to do it yourself.
11:00 - Like for instance,
11:01 - do you know how to programmatically
11:02 - make a photo black and white?
11:04 - Mean neither, but I can download
an important image package
11:07 - into my application, and suddenly I can.
11:09 - I just call a method, and boom,
11:11 - I wish real life skills worked this way.
11:14 - I'd import dancing so it
could be more fun at weddings,
11:16 - cha cha cha.
11:17 - Frameworks provide an API
11:19 - that allow you to extend
11:20 - what has been provided
to make it your own.
11:22 - Like for example,
11:23 - most web frameworks provide
you with the ability
11:26 - to add a new route to
your web application.
11:28 - It allows you to write out dynamic data
11:30 - to a template that you specify,
11:31 - and you do all of this with
just a handful of lines of code.
11:35 - You don't need to understand
how it's doing things,
11:37 - but you do need to know how
to write an implementation
11:39 - to what the framework is expecting.
11:41 - In this case, you're using the API,
11:43 - the contract to write
a valid implementation
11:45 - that meets the requirements.
11:47 - All of these APIs that
we just talked about,
11:49 - they're local to our code base.
11:51 - They exist within our code.
11:52 - We use them to avoid recreating the wheel.
11:54 - That is to say they assist
us in accomplishing tasks
11:58 - that we need to perform
11:59 - by abstracting away a ton of work for us.
12:02 - The stuff that we developers
shouldn't be worrying about.
12:04 - We should be focusing on the
business problem at hand,
12:07 - and that means a big part
of your job is figuring out
12:10 - how to leverage these
APIs to your advantage.
12:12 - Now I think it's an excellent
time to take a quick break.
12:16 - I just gave you a lot to think about,
12:18 - and I'd like you to take
a minute to breathe.
12:19 - Why don't you jot down some
APIs that you've used today,
12:23 - even if you weren't coding.
12:24 - I know that you've seen some in action.
12:26 - If you're having a hard
time thinking of some,
12:28 - I'll give you a hint.
12:29 - You're watching a video right
now inside of a web browser.
12:32 - When we return,
12:34 - we'll explore the concept of remote APIs,
12:36 - ones that aren't executing
locally in our code base,
12:38 - and why that's such a powerful concept.
12:41 - (calming electronic music)
12:56 - It took me a while to
find this remote control.
12:58 - It was in the couch.
12:59 - It's always in the couch.
13:00 - Anywho, this remote has
an interface on it, right?
13:03 - There's the power button,
13:04 - and there's a channel changer,
13:06 - and when I press the volume button,
13:07 - it sends my request to my device,
13:09 - and the volume changes as
if I turn the volume up
13:12 - using the interface on the device itself,
13:14 - and we know why that's important.
13:15 - I want to remotely control my device.
13:17 - I don't want to get up from the couch.
13:19 - There are of course more,
13:21 - or less lazy reasons as to why you might
13:23 - want to remotely control objects.
13:24 - This cute little robot, for
instance, has a remote API.
13:28 - You can send commands
to it, and it responds.
13:30 - It even sends back sensor information.
13:32 - These traffic signs can
change based on an API call.
13:35 - This drone here,
13:36 - it's actually remote controlled
by an app on my phone.
13:39 - See?
13:41 - It's not just physical objects
13:42 - that benefit from remote APIs.
13:44 - Oftentimes we don't have
space on our local machines
13:47 - for all the data that's available.
13:49 - Like for example, have you
ever used one of those apps
13:51 - that helps you figure out
what song is planning?
13:53 - You send up a snippet of a song
13:55 - you heard playing at a grocery
store using your microphone,
13:57 - and it sends back
exactly what the song is.
13:59 - It's usually Phil Collins.
14:01 - It turns out both grocery stores,
14:03 - and yours truly, loves Phil Collins.
14:05 - You don't have room
14:06 - for all the songs in
the world on your phone,
14:09 - and with this remote API,
14:10 - you don't need to have all of them.
14:12 - It does all the searching, and processing,
14:14 - and it's surprisingly quick.
14:16 - How can it possibly do that?
14:18 - I don't know, but I love the interface.
14:20 - It's so fast.
14:22 - There's another benefit of
remote APIs, computational power.
14:26 - Because an API removes the limitations
14:27 - of your local machine,
14:29 - you can gain access to seemingly
infinite amounts of power.
14:32 - A good example of that is the
AR app of Google Translate.
14:35 - You can use the camera on your phone,
14:37 - and in near real time,
it's able to translate
14:40 - directly to your screen,
like, instantaneously.
14:43 - It's using a ton of processing power
14:45 - to make this magic happen,
14:46 - and that processing is
happening elsewhere.
14:49 - (speaking foreign language)
14:51 - It took quite a bit of experimentation,
14:53 - and some evolution of ideas,
14:54 - but over time we finally turned
14:56 - this remote API dream into a reality.
14:59 - Now, I'm gonna drop some
history in the teacher's notes,
15:01 - but I just want you to
know that the struggle
15:03 - to achieve this concept of
remote APIs was very real,
15:07 - but most of the problem was that
15:09 - there wasn't a standard
that everyone loved.
15:11 - Things were pretty clunky for awhile
15:12 - as the ideas were sussed
out, but then it happened.
15:16 - A new architectural style
appeared that was clear,
15:19 - and allowed us developers to interact with
15:20 - specific resources over the web,
15:23 - and it quite literally changed everything.
15:26 - This style rapidly emerged as a winner,
15:28 - and just about everyone began offering,
15:30 - and consuming APIs over the internet,
15:33 - and what I'm talking about here is REST,
15:35 - or Representational State Transfer.
15:37 - It was the approach that we needed,
15:39 - and honestly it's the abstraction
15:41 - that we developers deserved.
15:43 - Like we talked about already,
15:44 - the popularity of REST spreads so rapidly.
15:47 - It nearly completely
overtook the term API.
15:50 - It's like how we use the
word Xerox to mean photocopy,
15:53 - even though Xerox is just
a brand of photocopier.
15:56 - Xerox does other stuff too, I think.
15:59 - That's how pervasive REST is.
16:01 - REST is for sure not the end
all be all of remote API's.
16:05 - There are definitely some limitations,
16:06 - which we'll discuss here in a bit.
16:08 - Technology is ever evolving,
16:09 - and of course there are movements
that are still advancing
16:12 - the concept of the best remote APIs,
16:14 - some terms you might've
even heard, like GraphQL.
16:17 - More on this in the teacher's notes.
16:19 - For the rest of this course,
16:20 - we're going to be doing
a deep dive into APIs
16:22 - that are written using the REST style.
16:25 - When APIs embrace the style
and constraints of REST,
16:28 - they're said to be RESTful.
16:30 - Cute, right?
16:31 - If you're feeling like you
need a little rest, go ahead,
16:34 - and pause me before we
do a deeper dive into
16:36 - what it means to be RESTful.
16:38 - Sorry, that was a bad, and obvious joke,
16:40 - and as a developer you
kind of have to make it,
16:41 - you don't really have an option,
16:43 - and because REST sits on
top of web technologies,
16:46 - we should probably do
a whirlwind refresher
16:48 - of how the web works.
16:50 - (calming electronic music)
17:05 - It might've been a while
since you thought about
17:07 - how the web works.
17:08 - There are a smattering of terms
17:09 - that I'd like to reload
into your working memory
17:12 - before we talk more
about how REST uses them.
17:15 - So let's use the web.
17:17 - I've got my computer here,
17:18 - and on it I have an internet browser.
17:20 - This browser is a web client,
17:22 - and I'm going to use it
to connect to a server.
17:25 - I'm going to do this
17:26 - by putting a location in the address bar,
17:28 - a universal resource locator,
17:30 - or URL to be exact.
17:32 - You might also hear this referred
to by a superset term URI,
17:36 - or Universal Resource Identifier.
17:38 - Now our URL here has a scheme portion,
17:41 - and this one happens to be HTTP.
17:44 - HTTP stands for Hypertext
Transfer Protocol.
17:48 - Let's break that down bit.
17:49 - Let's grab that last part, protocol.
17:51 - A protocol is also often
likened to a contract.
17:54 - It's a little lower level than an API,
17:56 - but it's similar in concept.
17:58 - You can think of it as
defining the expectations
18:00 - of how to communicate.
18:01 - An example that I find
really sticks with me
18:04 - is if you've ever been to a rally,
18:06 - and someone does one of
those chants where they go,
18:07 - when I say food,
18:09 - you say bar, food bar, food
bar, here, let's do one.
18:14 - When I say H-T-T, you say P!
18:16 - H-T-T, H-T-T.
18:20 - I just realized I might've
made you yell pee out loud.
18:22 - I hope you're in a coffee
shop, that'd be awkward.
18:26 - Anyways, we, you, and I,
18:29 - we just set up a real quick protocol.
18:31 - I told you how to respond
to my specific request,
18:34 - you would have been breaking
our agreed upon protocol
18:36 - if you yelled anything else, but P.
18:38 - So the browser creates
an HTTP request for you.
18:41 - Along with the URI,
18:42 - it also specifies a particular HTTP verb.
18:45 - In this case, it's using the GET verb,
18:48 - which is used to clarify
18:49 - that this request will only receive data.
18:52 - That is, it won't be making any changes.
18:54 - The server receives the request
18:56 - that was transferred from the client.
18:58 - There's that second T.
18:59 - The server then does the
work that it needs to do,
19:02 - and finally it generates
the resulting webpage,
19:04 - and sends back a response to the client,
19:07 - my browser in this case.
19:08 - Now, the most important part
of that response is the body.
19:12 - For a webpage that contains the HTML,
19:14 - or Hypertext Markup Language,
19:17 - which gives us the remaining parts,
19:18 - the HT of our acronym.
19:20 - Hypertext is text that
can link to other texts.
19:23 - In HTML, we perform that
linking with anchor tags.
19:26 - So with that response,
19:27 - the browser renders the page.
19:30 - When one of those links are clicked,
19:31 - they kick off a brand
new HTTP GET request,
19:34 - and the process repeats
itself over, and over.
19:38 - In between those clicks
though the protocol is done.
19:41 - We made the request, we got the response.
19:43 - HTTP as it was originally
designed is a Stateless protocol.
19:47 - Once that request receives a response,
19:50 - it's all done.
19:51 - If you want to keep some sort of state,
19:53 - your client will have
to manage that itself,
19:55 - and set it up with each new requests.
19:57 - Check the notes for more on this.
19:59 - There are more HTTP verbs,
20:00 - also known as request
methods, besides GET.
20:03 - Most common scenario you see
is when you encounter a form
20:06 - that is used to take information from you,
20:08 - typically you'll see the verb post
20:10 - used to explain that you are submitting,
20:11 - or posting data to the server.
20:13 - Okay, so our protocol that's
used to transfer this hypertext
20:17 - is admittedly a little more complex
20:19 - than our rally chant was.
20:20 - There's quite a bit of
important information
20:22 - that's included in both the
request and the response.
20:25 - You've probably seen query
string parameters, and URLs.
20:28 - You know, the stuff
after the question mark?
20:29 - This is one way to pass
information about the request.
20:32 - Another common way this information
20:34 - is passed around is through specific key,
20:36 - and value pairs, called headers.
20:38 - Both requests, and responses have headers,
20:41 - and they're used to
help further communicate
20:43 - what is wanted as well as
what has been sent back.
20:46 - Now, some of the popular request headers
20:48 - allow you to specify information
20:50 - about the content that you'd
expect back like the language,
20:53 - or the type of content.
20:54 - You can also state you only want a page
20:56 - if it has changed since a certain time.
20:59 - This technique allows for caching
21:00 - which is a powerful concept.
21:03 - Why get the whole page
21:04 - if you already have it
in your local cache?
21:06 - You can embed authentication information
21:07 - in each request using a header.
21:09 - This way you are essentially
21:11 - keeping your client
logged in across requests.
21:13 - The response also contains headers.
21:16 - A super important one is the status code.
21:18 - This lets you know what
happened on the server side,
21:21 - and it can convey things
like missing documents.
21:23 - I'm sure you've seen the old 404 error.
21:25 - The page has been moved,
21:26 - or hopefully everything is A, 200 OK.
21:29 - It can also explain the content type,
21:31 - how large the data return is,
21:33 - and many more things.
21:35 - Okay, got it?
21:36 - Feeling good about that
little whirlwind tour?
21:39 - Remember, feel free to
make me repeat myself
21:41 - if that was way too much.
21:42 - I totally get it.
21:43 - That was a lot of information.
21:45 - It's important to have
21:46 - a basic understanding of these things,
21:47 - because REST sits on top of them.
21:49 - It uses the concepts that were introduced
21:51 - with the web to expose resources
21:52 - that can be accessed, and manipulated.
21:55 - Let's take a look at how
21:56 - the RESTful approach takes
advantage of the web,
21:58 - and it's tooling for
your benefit, and profit.
22:01 - REST stands for
Representational State Transfer.
22:03 - APIs that meet the REST
architectural style constraints
22:06 - are considered to be RESTful.
22:08 - A typical way to teach about RESTful API's
22:10 - is to cover the constraints
that define it all up front.
22:13 - I don't know about you,
but personally I find
22:16 - approaching learning that
way pretty overwhelming,
22:18 - especially from the beginning.
22:19 - I mean we haven't even
looked at an API yet,
22:22 - and on top of that,
22:23 - most of the REST APIs
22:24 - that you use will meet
all of these constraints.
22:27 - So here's the thing,
22:29 - I promise that we'll go
over all the constraints,
22:32 - but let's do it on our own time.
22:33 - Like don't learn them
all, right this instant.
22:36 - We can even make it a fun journey
22:38 - like a RESTful constraint scavenger hunt,
22:41 - complete with prizes.
22:42 - Here are the guiding
architectural constraints
22:44 - required for an API to
be considered RESTful.
22:47 - We'll check them off when we discuss them,
22:49 - and then we'll loop back once
more at the end, and review.
22:52 - Got to collect them all.
22:53 - Sound fun?
22:54 - Good.
22:55 - Let's get started talking about
22:57 - how REST APIs sit on
top of web technology,
23:00 - like a little hat.
23:01 - Much like the web,
23:02 - the client makes a request to a server.
23:05 - The client in this case
23:06 - is typically going to be your program,
23:08 - and you'll probably be
using some sort of library
23:10 - to create the request to the server.
23:13 - The protocol used is, you guessed it,
23:16 - HTTP, and it's Stateless.
23:18 - The server won't remember
23:19 - anything about the particular client.
23:21 - If you want to maintain state
like your login details,
23:24 - you must send it with
each, and every request,
23:27 - and you'll do this using headers,
23:28 - and just like that,
23:29 - we've talked about two
of our REST constraints,
23:32 - Client-Server Architecture, and Stateless.
23:34 - You got two knocked off already.
23:36 - You're on a roll now.
23:38 - We should probably talk about
23:39 - what that request was requesting, right?
23:43 - Well, it most certainly was
requesting about a resource.
23:47 - A resource is a little abstract,
23:48 - and that's intentional.
23:50 - It's the R in the URL, or URI,
23:53 - we use the term resource
to reference an object,
23:56 - which also happens to be
pretty abstract, right?
23:59 - This is because we can use resources
24:01 - to describe just about
anything that we build.
24:04 - For instance, let's imagine
an ebook store website.
24:07 - On the homepage, maybe there's a list,
24:09 - or a collection of new books.
24:11 - Each of these books is a resource,
24:14 - and we click into that
to take a closer look
24:16 - at the book resource,
24:17 - and we see a link to the author,
24:18 - which is also a resource.
24:21 - We click into the Author Resource,
24:22 - and we see a collection
of all the other books
24:25 - that they've written.
24:26 - Maybe we even see a group of fans.
24:27 - Again, another collection,
24:29 - and each of those fans are a resource.
24:32 - Clicking into a fan resource,
24:33 - we can see the collection
24:34 - of their favorite authors, and books.
24:36 - Everything is a resource.
24:39 - Let's change gears.
24:40 - How about an image sharing
application on our phone?
24:43 - So we have user resources.
24:45 - Those users post photos,
24:47 - which are resources,
24:49 - and the photos can be loved.
24:50 - So there's like lover resource.
24:52 - Maybe there's an album
that could be created,
24:53 - and there's an album resource
24:54 - that contains photo resources,
24:56 - and albums have a collection
of contributor resources.
25:00 - Turns out almost everything
we ever want to build
25:03 - can be expressed in terms of
resources, and collections.
25:07 - Most of what we want our applications
25:08 - to be able to do to their
resources can be expressed through
25:11 - the unfortunate sounding acronym
CRUD, and that stands for
25:15 - Creating, Reading, Updating, and Deleting.
25:18 - Now as a user of the ebook site,
25:20 - all we did was a bunch of reading,
25:21 - no pun intended.
25:23 - Actually I did intend that one.
25:25 - We were reading, right?
25:26 - Just getting the information to display
25:28 - like we retrieved the author page.
25:31 - We made a read request for that page.
25:33 - The web browser used a GET request
25:35 - to that specific author page.
25:37 - Now the RESTful API
follows the same logic.
25:40 - Your program sends a GET request to a URI.
25:43 - Then the survey response with data,
25:46 - and of course all the HTTP headers
25:48 - that you've come to know, and love,
25:50 - and the body is typically
represented these days as JSON,
25:53 - or JavaScript Object Notation.
25:55 - Now, JSON provides a
great way to structure,
25:58 - and nest your data.
25:59 - Every programming language
that I can think of
26:02 - provide some means of
turning a JSON string
26:04 - into a native object.
26:07 - Content type is typically
something that you can specify
26:09 - on your request if JSON isn't your thing.
26:11 - Now, if you recall, there are
other HTTP verbs available.
26:15 - These verbs are used in REST APIs
26:17 - to clearly state the
intention of your request.
26:19 - Want to add an author?
26:21 - Post to the /authors,
26:22 - and send the data that you want to update
26:24 - in the body of your request.
26:25 - These fields will be
defined for you somewhere.
26:27 - Want to remove an author?
26:29 - Send a delete to that specific author.
26:31 - Updates typically support the patch verb,
26:33 - and you'll see we're
able to represent CRUD,
26:36 - the Create, Read, Update, and
Delete using HTTP methods.
26:40 - Pretty cool, right?
26:41 - What this means is that you can interact
26:43 - with any application out there
26:44 - that's exposed their REST API.
26:47 - You could grab data
remotely automate tasks,
26:49 - and even smush services together.
26:51 - This is called a mashup,
and here's the thing,
26:53 - there are tons of APIs available
26:55 - just about anything you could imagine,
26:57 - and if they're truly RESTful,
26:59 - they'll all feel pretty much the same.
27:01 - You can build anything.
27:02 - There are services that allow you
27:03 - to do incredible things
with a few simple API calls.
27:07 - So now the question becomes,
27:08 - what are you gonna build?
27:10 - Why don't you take a quick break,
27:12 - and when you come back,
27:13 - let's explore a RESTful API together?
27:15 - We'll take a peek at how to use
27:17 - the music streaming service, Spotify,
27:19 - and they're excellent RESTful API.
27:21 - (calming electronic music)
27:36 - You have some new found understanding
27:38 - of how web-based APIs work.
27:40 - I'll walked you quickly through
some imaginary REST APIs,
27:43 - and now I'm thinking it's time
27:44 - that we get a little more specific.
27:46 - Why don't we go exploring together?
27:48 - Now, some of these REST APIs
allow you to give it a try
27:50 - from the comfort of your
very own web browser,
27:52 - and one of my personal favorites
that allows for exploration
27:55 - is the streaming music service Spotify.
27:57 - So here I am at Spotify.com,
28:00 - and a quick word of warning,
28:01 - this for sure is going to look different.
28:03 - By the time you get here,
28:04 - there are teams of people
28:05 - working on the site to make it better,
28:07 - and you're gonna have the
benefit of a better website
28:09 - than I have right this instant.
28:11 - So just a reminder,
28:13 - you should check the notes
attached to this video
28:15 - for any breaking changes,
28:17 - and if you don't have a Spotify
account yet, don't sweat it.
28:20 - As you can see, it's free,
28:23 - and that same user that you can create,
28:24 - you can end up using for
development purposes.
28:27 - So let's assume that I didn't
know that Spotify had an API.
28:30 - Now, what I usually do is I look around.
28:32 - So typically most sites
store the nerdy stuff
28:36 - down here in the footer.
28:38 - There we go.
28:40 - Developers, that's what we're looking for.
28:43 - It's a community of developers.
28:44 - That's us, let's do it.
28:48 - Wow, I love a site that treats me well,
28:51 - even as a developer.
28:52 - This is really nice, right?
28:55 - So you can do a ton of
stuff since I was last here,
28:59 - let's take a look here from the front.
29:01 - So audio analysis,
29:04 - wow, you can learn about danceability,
29:06 - maybe I will be able to
install that skill after all.
29:09 - Oh, cool, audio playback.
29:11 - So you can kind of nice,
29:12 - you can embed a player right in there.
29:15 - You can put a player
into your application,
29:20 - an SDK here, that stands for
Software Development Kit,
29:23 - and we'll look at one
of those here in a bit,
29:25 - but basically what it does
is it gives you an API
29:27 - that wraps around other APIs,
29:29 - and it will feel native to
your programming language.
29:32 - Cool, and then let's take a
look here at recommendations.
29:36 - Oh, awesome.
29:37 - It will give you specific recommendations.
29:40 - Awesome, this is great.
29:42 - Target danceability, I'm
gonna be able to dance,
29:45 - and see this JavaScript here,
29:47 - it's doing a GET to one
of their end points.
29:51 - Awesome, this looks good.
29:53 - So let's take a look up at the top here.
29:57 - Let's go ahead,
29:58 - and discover that's
what we're trying to do.
30:01 - We're trying to discover
30:02 - what we're going to do with this API.
30:03 - So let's click into here,
30:04 - and this will give us some
ideas of what we can do.
30:07 - Let's see.
30:10 - Real apps that integrate
audio features in.
30:12 - This is awesome.
30:13 - I love when sites do this.
30:14 - I find that it's a great
way to get inspiration
30:16 - if you don't yet have an idea
of how you might use the API.
30:19 - You can see how other people have used it.
30:21 - Cool, so this is the audio
analysis that we had seen,
30:25 - a quick dashboard of
audio features of songs,
30:28 - and there's that danceability again.
30:31 - Here's playback, so you can get a player.
30:33 - This is super neat,
30:34 - and these are apps that use them.
30:36 - iPhone app, a listening room, Runkeeper.
30:39 - So you can see here, this is for iOS,
30:40 - and this is for Android based phones.
30:43 - So iOS being like Mac based products,
30:45 - and this is Android based products,
30:47 - and this is widgets.
30:49 - I'm not exactly sure what that is.
30:50 - I'm assuming that's the HTML
widgets that we had seen,
30:53 - and that's cool, right?
30:54 - Because it's a web based API,
30:56 - all we need to do is to
connect to it over HTTP.
30:59 - So any of these devices can connect to it.
31:01 - Pretty slick.
31:03 - Alright, let's keep going.
31:04 - So we've got recommendations.
31:06 - That's great.
31:07 - I always need music recommendations.
31:10 - Search, oh, that's nice.
31:13 - That actually feels like a good
place to get started, right?
31:15 - And like if we went,
31:16 - and we searched for different things,
31:18 - so there's six degrees of Kanye West,
31:21 - I guess a lot of people
are connected to him.
31:23 - Find other artists that are
like the artists you like,
31:25 - this is great.
31:26 - Why don't you say,
31:28 - we look at some of the
documentation for search?
31:31 - So I'm going to click this, read the docs.
31:32 - Let's read the docs.
31:35 - Oh, nice, now you might not see this,
31:37 - but there's a brand new
web API reference in beta,
31:40 - which means it's not
quite ready for everybody,
31:42 - but it's ready for people to try.
31:44 - I'm gonna go look at that.
31:45 - You might actually be there,
31:46 - and be out of the beta period
by the time you see this.
31:51 - Okay, so let's take a look,
31:52 - and let's see about this Search API.
31:56 - Let's see, Search API.
32:00 - So let's go ahead.
32:01 - Let's click into there.
32:02 - As you use more, and more APIs,
32:04 - you'll get super familiar
32:05 - with reference documentation like this.
32:07 - This is explaining the contract
32:09 - of what we need to do to use this API.
32:12 - So you'll see here that
there's different parts.
32:15 - So this is what the request is
32:16 - that we're gonna be sending,
32:18 - and it's saying here
that this is a header,
32:20 - and this says whether,
32:21 - or not things are required,
32:22 - and this indeed is required.
32:24 - So this is authorization here.
32:25 - There's a header that's required
32:27 - in the request for authorization.
32:30 - The authorization means it
knows what you're allowed to do,
32:33 - or authorized to do.
32:36 - Spotify, and many other APS
use the concept access tokens.
32:41 - So then, so that's a header,
32:42 - that's the header that's required,
32:43 - and so here we see this
query parameter, right?
32:45 - So query parameters,
32:46 - and you'll see that this
one's required this queue.
32:48 - So this is the search query,
32:50 - the keywords, right?
32:51 - So, and here's an example of what that is,
32:53 - and this is showing you that
it needs to be URL encoded.
32:57 - There's some more notes
on this here in the bit.
32:59 - So no, we have queue is required,
33:01 - and also type is required,
33:03 - and type is like album, artist, playlist,
33:05 - like the type of resource
33:06 - that is available in Spotify's API,
33:09 - and if we keep scrolling
down, there are more,
33:13 - there's more optional query
parameters that are available.
33:18 - Really help you specify your search,
33:20 - very rich API they have,
33:24 - and then it shows you this response.
33:26 - So this is what's gonna come back.
33:28 - So you'll see that you'll get a header,
33:30 - and the status code, very important.
33:32 - We'll say 200 okay.
33:33 - If it's good on success rate.
33:34 - On success I'll say 200 okay,
33:36 - and the response body contains an array.
33:39 - So like a list of artists,
objects, or album, artist,
33:43 - whatever it was the type
you were looking for,
33:44 - and it's going to be in JSON format,
33:46 - just like we talked about
JavaScript Object Notation.
33:51 - And so you'll see when there's an error,
33:53 - there'll be an error code,
33:54 - and the body will have the error message,
33:56 - and then there's some more notes here,
33:57 - and these are really thorough.
33:59 - This is great.
34:01 - So in code spaces, that's what we saw.
34:02 - We saw that %20.
34:03 - It's making sure that
you can't use a space,
34:06 - otherwise it breaks the URL.
34:07 - So this is how you do that.
34:09 - You'll see there's lots of
different information here.
34:14 - Yeah, you can use asterix,
34:17 - and show you in all sorts
of ways to do fun queries.
34:19 - Let's go ahead, and try
this out in the web console.
34:23 - It's pretty slick.
34:24 - So what this does is it
lets us search for an item,
34:27 - and it's showing us how it's doing.
34:28 - It's doing a GET,
34:30 - and it's does have some
authentication required.
34:32 - So we will need to build something here,
34:34 - but you'll see over here
it's showing what it's doing.
34:36 - It's doing a GET to this URL,
34:38 - and this is code here
that will actually run,
34:40 - and you'll see as we
change the fields here.
34:43 - So I'm gonna change this
34:44 - to a very popular artist
around my house, Lizzo,
34:48 - and you'll see that it updated over here.
34:50 - It updated my query, and the
type is set to artist already.
34:54 - So that's fine,
34:55 - and we have this OAuth
Token that we need to get.
34:59 - So we need to get this token.
35:00 - So again, this is the,
35:01 - what are they authorized to do?
35:04 - So we're going to go,
35:05 - and choose Get Token,
35:07 - and it's telling us that
this specific endpoint
35:10 - doesn't require any specific scopes.
35:12 - So these are scopes that you can do.
35:13 - So when you build this token,
35:15 - it's saying for using this key,
35:18 - these are the things that
the people are able to do,
35:19 - and we don't need to do
anything specific for this.
35:22 - So let's just go ahead,
35:23 - and let's not check any of these.
35:24 - We don't need to modify
a private playlist,
35:27 - we don't need to do that.
35:28 - So we're going to do Request Token,
35:31 - and here's it's gonna ask
us to log into Spotify,
35:33 - and if you have Spotify,
go ahead, and log in,
35:35 - and if you don't remember,
35:36 - it's free, you can
totally just come in here,
35:38 - and do a sign up.
35:42 - And we can put in our emails here.
35:46 - So I'm going to put in mine,
35:47 - and here's a little trick,
35:48 - if you don't know this yet,
35:49 - I'm gonna put in API course.
35:54 - Let's do API course like this@gmail.com.
35:58 - My email address is
CraigsDennis@gmail.com,
36:02 - but if you put a little plus here,
36:03 - you can kind of categorize
things your own.
36:05 - So just a little trick,
36:08 - and that way if you're worried
about emails coming in,
36:11 - you'll know that they're
coming in from that address.
36:15 - I'm gonna do the password to my luggage,
36:17 - which is one, two, three,
four, five, just kidding.
36:25 - What should we call you?
36:27 - I love it when you call me big papa.
36:30 - Alright, so my date of
birth is November 19th,
36:34 - and I was born in the wonderful
year of 2000, just kidding.
36:40 - This is awesome.
36:41 - I love this Spotify.
36:44 - Thank you for being inclusive,
inclusivity matters.
36:47 - I'm gonna choose Male.
36:49 - I don't want to share
my registration data,
36:51 - and I am not a robot.
36:53 - I promise.
36:54 - I think I'm not a robot.
36:56 - Identify the crosswalks.
37:00 - What is that?
37:01 - Alright, so there's one that's
definitely a cross walk.
37:04 - That's a crosswalk.
37:05 - I mean, I could walk across
the street here, I could.
37:07 - Alright, I passed.
37:11 - I'm not a robot.
37:13 - I'm gonna click Sign Up.
37:15 - Here we go.
37:16 - I'm gonna save that password.
37:19 - What if I turn on sync?
37:20 - All logged in as Big Papa.
37:22 - Here we go.
37:23 - So I'm going to click Agree.
37:24 - I'm going to pop back to the page,
37:26 - and you'll see now this is filled out.
37:28 - Now one thing I do want to point out here
37:31 - is that my token here,
my key is on the screen,
37:36 - and if a hacker were to pause my screen,
37:39 - and copy that down,
37:40 - they could essentially do things
to my account on my behalf,
37:44 - but I of course know that,
37:45 - and I'm gonna delete this token later.
37:47 - Remember this is like
leaving your car keys
37:49 - on your driver's seat.
37:50 - You probably don't do that.
37:52 - So treat these keys the same,
37:53 - and keep them safe, and with you.
37:56 - So I could just copy this whole command,
37:58 - and paste that into my terminal,
38:00 - and it would work.
38:01 - We'll do that in a bit,
38:03 - but what I want to show you
first is that you can do this,
38:07 - Try It button here,
38:09 - and what happens is what comes
back is this beautiful JSON.
38:12 - So you'll see that what's being
returned here is as artists,
38:16 - and it's an object that has
the search that we built,
38:19 - and then here is this items,
38:21 - and you'll see that it's an array,
38:22 - because there could be
multiple artists named Lizzo,
38:26 - and I guess looks like maybe there is.
38:30 - Yeah, it looks like there's actually
38:31 - another artist named Lizzo, popularity 88,
38:35 - and what's this Lizzo's popularity?
38:39 - Her genre is Escape Room?
38:43 - Man, I feel old.
38:46 - One thing we can do is we can look,
38:47 - and see if there's these external images
38:50 - so you can kind of take a look,
38:51 - and see if it's them.
38:53 - I'm going to click Go To Here,
38:54 - and we'll see what
happens, and there she is.
38:56 - Lizzo is on all the time at our house.
38:58 - Once my daughter has figured out that
39:00 - Alexa could play music,
39:02 - they're like play Lizzo,
Alexa, play Lizzo.
39:04 - Alexa, by the way is a
Voice User Interface, right?
39:08 - There's the I again.
39:09 - So I'm gonna get back to our tab.
39:17 - And we will go now,
39:19 - and we see here that she has an ID,
39:24 - because we're in this artist, right?
39:25 - So we see here that she has this ID.
39:26 - I'm gonna go ahead,
I'm going to copy this,
39:31 - and you also see that
there's another API call here
39:33 - that we can do.
39:33 - There's this HREF that will
get her specifically, right?
39:35 - So there's the /artist,
39:38 - and there's /herID.
39:39 - So if we call that it would
get information about her.
39:43 - Again, I'm gonna make sure
that I copied her ID here.
39:46 - I'm gonna scroll down a little bit more.
39:49 - Think there's the other Lizzo.
39:51 - Let's look.
39:52 - I think there was a thing
where we can look at the page.
39:54 - Yeah, here we go.
39:55 - So here's external URLs,
39:57 - and you'll see this as an API.
39:58 - This is the actual
Spotify page itself stuff.
40:00 - So if I'm gonna do this,
and I'm gonna right click.
40:03 - I'm gonna say, go to.
40:06 - This is Lizzo's actual page,
40:08 - and this is how it's displayed, right?
40:09 - As a web page on Spotify.
40:12 - If you scroll down here,
40:13 - we'll see that there's this popular,
40:14 - there's her popular songs,
40:16 - Good As Hell, great stuff.
40:19 - If you don't know her,
use this link, learn her.
40:23 - I happened to know that we can get a list
40:25 - similar to these popular
songs using the API.
40:29 - So let's go back to our reference.
40:31 - Okay, so we're back here in our reference.
40:35 - Let's look at the artist API.
40:37 - So we're gonna click on Artists,
40:39 - and again, I'm going to go into the beta,
40:41 - whether they be a reference
might be what's live for you,
40:44 - and I'm gonna click into
the Artists API over here.
40:49 - I'm gonna scroll down a little bit.
40:51 - So there's get an artist,
get an artist's albums,
40:53 - and what else do we have?
40:55 - Get an artist's top tracks.
40:57 - This is exactly what I wanted to do.
40:59 - Okay, so again, here's
the docs about that.
41:02 - I'm gonna try this out in the web console.
41:05 - Okay, so get an artist's top tracks.
41:07 - It's gonna do a GET,
41:09 - and this is the end point.
41:10 - So we're gonna just kind of,
41:11 - it needs that ID, right?
41:12 - So we're gonna put that ID in there.
41:14 - It's coming defaulted with somebody.
41:17 - So I'm gonna go ahead, and
paste Lizzo's in there.
41:19 - Okay, and the country is US,
41:22 - and you'll see that again, it's changing.
41:24 - So see how the her IDs here, country's US,
41:28 - and we're gonna pass
our private keys along.
41:33 - I'm gonna click Try It.
41:35 - Alright, so now we've
got a list of tracks,
41:38 - and each one of these tracks
has what album it showed up on.
41:42 - Okay, so again, this'll
be in the same list,
41:46 - their top tracks as we saw on that page,
41:48 - which is super neat, right?
41:51 - There's the, because I love you song,
41:54 - and let's keep going a little bit.
41:56 - You'll see how the URI's here,
41:58 - they use a different style URI
41:59 - with the colons to separate,
42:01 - but it's Spotify artist, and then the ID.
42:11 - And we'll see here that
there's this preview URL,
42:13 - which you could actually
just go ahead, and open,
42:16 - and it will start playing this song.
42:22 - Pretty cool, right?
42:23 - You can get access to all
of Spotify's music library,
42:26 - and you can build tools
that extend their platform.
42:28 - I highly recommend that you go,
42:30 - and take a look at what people
have built using these APIs.
42:32 - Super impressive.
42:33 - Did you notice how fast
those results came back?
42:36 - How could it do that search so quick?
42:38 - Oh, wait a second, does it even need to?
42:40 - The results don't change all the time.
42:42 - It's not like Lizzo is dropping
a new song every minute.
42:45 - Though, I wish she would.
42:46 - Those results are definitely cacheable.
42:48 - Ding, ding, ding,
42:49 - Casheability is also
available on the client,
42:52 - and we'll get to that here in a bit,
42:53 - but this is a great example
of a Layered System.
42:56 - I'm almost positive that
Spotify has set up things
42:58 - so that returns that same JSON
43:00 - from its own server
side caching mechanism.
43:02 - It's not on every request.
43:04 - Now as a user of the API,
43:06 - I don't know how it's doing that,
43:07 - and frankly I don't care.
43:09 - I want it to be available
43:10 - and fast when I hit that specific URL,
43:13 - and as Lizzo might ask,
baby, how you feeling?
43:15 - I'm feeling good as hell.
43:17 - That was fast.
43:17 - Spotify is just one REST API.
43:20 - There are tons, and tons
of services out there.
43:22 - There are even services
that exist only as APIs.
43:24 - Let's go ahead, and take a quick break.
43:27 - I'd love for you to take some time,
43:28 - and think about what you
might be able to build
43:31 - with the Spotify API.
43:32 - For instance, while I was using the API,
43:34 - I had this idea pop up.
43:36 - I'm often at festivals,
43:37 - and I'm having a hard time
43:38 - figuring out which band I should go see.
43:40 - There's so many.
43:41 - I love to have an app suggest me
43:44 - which of the bands that are playing
43:45 - that I would most likely enjoy
43:47 - based on my listening cabinets.
43:48 - I'm pretty sure you could do that
43:50 - just by using the Spotify API,
43:52 - and a list of the bands performing.
43:53 - If you end up building this app,
43:55 - please share it with me.
43:56 - What other interests do you have
43:58 - that provide an API that you can use?
43:59 - Check the notes for more ideas
44:01 - after you come back from your break,
44:03 - let's dive a little deeper,
44:04 - and make use of an API
using our own tools.
44:07 - See you soon.
44:11 - No, really take a quick break.
44:13 - Seriously, it'll do you good.
44:14 - No benching.
44:16 - (calming electronic music)
44:30 - While I realized that exploring an API
44:32 - on a website is informative.
44:34 - It might not feel like you're
actually using that API.
44:37 - I think the next logical step in exploring
44:39 - is actually making that request
yourself from your computer,
44:43 - not from a website.
44:44 - Let's use a different API,
44:45 - this time let's use Twilio.
44:47 - Twilio is a company that loves APIs.
44:49 - In fact, that's most
of what the company is.
44:51 - It's a company for developers
44:52 - that helps abstract away
telephone communications,
44:55 - well actually all kinds
of communication channels.
44:58 - It lets you bring communications
into your applications.
45:01 - It allows you to make, and
receive calls, and text messages,
45:04 - and a whole slew of other things.
45:05 - I need to be a little
upfront with you here.
45:08 - I love Twilio.
45:10 - I mean, I love it so much
45:11 - I even applied for a job with them,
45:13 - and I got it, but even if I didn't,
45:16 - I would still show you
how cool their APIs are.
45:18 - I mean with a single command
you can send a text message.
45:22 - I remember when I first did that,
45:23 - I was like, wow.
45:25 - That level of abstraction is amazing.
45:28 - How does that work with all
the different cell carriers,
45:30 - the varying standards, and networks?
45:32 - I have no idea, and I don't need to,
45:34 - that's the beauty of this API.
45:35 - Let's get started.
45:37 - So I'm here at Twilio.com,
and again a word of warning,
45:41 - this will most likely look different
45:42 - as Twilio is constantly
making improvements.
45:44 - So please check the notes
for any changes to this flow.
45:48 - So first things first, let's sign up.
45:51 - We'll be able to use a free trial account
45:53 - for the rest of this course.
45:56 - Let's sign up with my information.
45:58 - I am Greg Dennis, and again
I'm gonna use that trick.
46:01 - So I'm gonna say CraigsDennis+
let's say API course,
46:07 - in case I've already
done that one @gmail.com,
46:12 - and I will set my password too,
46:22 - and I am going to accept
the terms, and services,
46:24 - because I've read that.
46:27 - And I'm gonna start my free trial.
46:32 - Save my password.
46:35 - There we go, and it's
sent an email to my Gmail.
46:38 - I will go check that real quick.
46:41 - There we go.
46:42 - I've got a email, and I am
going to click on that link.
46:49 - Let's do this.
46:54 - And we'll paste it here.
46:56 - Verify my account, and I am logged in.
47:00 - Alright, so I'm gonna
put in my phone number,
47:02 - which is (503) 461-5537,
47:10 - and this phone number
you provide will be used
47:11 - for authentication for the Twilio Console.
47:13 - Somebody might contact
me of free onboarding.
47:15 - That sounds great.
47:16 - I'll check that.
47:17 - I'll click Verify.
47:18 - So 708655.
47:28 - So in trial mode
47:28 - we can only communicate with
numbers that we verified.
47:31 - So do you write code?
47:35 - I do.
47:36 - I write code, I write Python code.
47:39 - My goal today I'm gonna
use it in a student,
47:42 - or hackathon project for sure.
47:44 - I'm gonna send, or receive SMS.
47:47 - SMS is a Short Message Service,
47:50 - which is text messages.
47:51 - We're gonna send text message.
47:58 - So the way Twilio works is you
buy an actual phone number.
48:03 - Well, let's do it.
48:04 - So we'll get this trial number here.
48:10 - This number got automatically selected.
48:13 - It's fine by me.
48:14 - (201) 584-8089, and I'm gonna choose it.
48:18 - Let's say Choose This Number,
48:20 - and just like that the number is mine,
48:24 - and I can program it,
48:25 - and we'll do more with that later.
48:29 - So I'm gonna click Done.
48:31 - So there's some notes here, right?
48:33 - You can only send messages,
48:34 - and make calls to verify numbers.
48:36 - That's how our Twilio
trial account works right?
48:37 - Notice also, we have $15,
48:40 - which is more than enough money
48:41 - to do anything we're gonna do in here,
48:43 - and it's also says that messages,
48:45 - and calls include a note
about this coming from
48:48 - Twilio trial account.
48:50 - Okay, that's fine.
48:53 - What do you say we send a text message?
48:55 - Let's do it.
48:56 - So the way that things work is over here,
48:58 - there's a little menu, and
we have different things.
49:01 - As you can see, there's a
bunch of stuff available.
49:04 - We're gonna choose this
very first one here,
49:05 - this programmable SMS
short message service.
49:11 - I am also going to pin that to the dock
49:15 - so that I can get to it easier.
49:17 - So it'll always be there, okay?
49:21 - So, you'll see here, it's pinned.
49:25 - Well on this page, I'm
gonna choose, Get Started.
49:27 - Let's do it.
49:31 - Now, this step allows
us to explore the API
49:32 - like we saw on the Spotify site.
49:34 - You'll see as I change things here
49:37 - so let's change this body to say, ahoy,
49:40 - you'll see that it changes
the code that's over here.
49:44 - Fun note here,
49:44 - ahoy was the first word
ever spoken over the phone.
49:47 - So ahoy is kinda like
hello world of phones.
49:50 - So I'm gonna go ahead,
and click Make Request,
49:55 - and I got the text.
49:58 - Of course it's prefixed with
sent from your Twilio number,
50:01 - but whoa, right, I just sent
a text by pressing a button.
50:04 - Let's take this a step further.
50:06 - I'm gonna copy this code,
50:07 - and actually first before I do that,
50:09 - I'm gonna check this show your Auth Token.
50:12 - Just like Spotify,
Twilio uses Auth Tokens,
50:14 - and their private keys,
50:16 - but I trust you, and also
I'm gonna delete this later.
50:18 - I see you hackers.
50:20 - So now if I come over here,
50:22 - and I click this Copy icon here,
50:25 - it will be in my clipboard.
50:29 - Now I'm running on a Mac,
50:30 - so I'm gonna open up my
terminal and I'm going to paste.
50:42 - So see how this is the URL
50:44 - that we are going to post to, right?
50:46 - We're going to post,
50:48 - because we're gonna be
creating a new message.
50:50 - Notice here, this is my account
SID, or String Identifier,
50:54 - and because we have a JSON here,
50:57 - this .JSON, that tells the
Twilio API to return JSON,
51:02 - and we use form a URL, and coding here.
51:04 - This is what this data URL,
51:05 - and coding is, and this is the two.
51:06 - We're gonna send it to my phone number,
51:08 - and it's gonna be from our Twilio number,
51:11 - and the body's gonna be, ahoy.
51:13 - So I can come in here,
51:14 - and I can change this code, right?
51:15 - So I can, and instead of ahoy,
51:20 - I'm gonna make it say, ahoy from terminal,
51:24 - and this dash U here
51:26 - is setting up the authentication
of the account SID,
51:28 - and this is my Auth Token.
51:30 - So when I go ahead, and press Enter,
51:34 - we'll get some information back,
51:35 - and it tells me that it was successful.
51:38 - It will give an error if it didn't,
51:40 - I got my text message.
51:42 - So this command is sending
a post, which is great,
51:46 - but I can also use GET to receive
51:48 - the messages that have been sent.
51:50 - So kind of like a sent log.
51:53 - So what I'm gonna do is
I'm gonna use the up arrow,
51:55 - and get the information back.
51:56 - I'm gonna change to GET,
51:59 - and then I'm gonna get rid
of the rest of these lines,
52:03 - which I'm gonna do with GET in here,
52:07 - and do Control+K on the Mac.
52:09 - Look in the notes for how
to do this in Windows.
52:12 - So we're gonna say all of the messages
52:15 - that were sent to this,
52:18 - and if I go press Enter, that didn't work,
52:22 - because I left the trail
52:24 - at the end, have to press up again.
52:26 - So I'm gonna get rid
of this trailing slash,
52:28 - because that means like
continue on to the next line.
52:30 - So here we go.
52:33 - Now, I need to have my account SID.
52:36 - So let's do that again.
52:37 - Let's go press up a couple of times.
52:38 - So I forgot that I need,
52:40 - we're gonna need to keep
our information there.
52:44 - So let's just go ahead.
52:45 - I'm gonna get rid of all of these lines.
52:46 - So again, that's Control+K, Control+K,
52:50 - and this is dash U,
52:51 - and we're doing a GET to this account,
52:54 - and we're saying all of the messages
52:55 - that were ever sent from this account,
52:58 - let's take a look at that,
52:59 - and we're doing a GET, so
we're not doing a post.
53:01 - So we're gonna show a list.
53:03 - There we go.
53:04 - So again, you could format this,
53:05 - or make it prettier,
53:07 - but for now though, let's keep
exploring some more tools.
53:10 - Awesome job getting that
running on your local machine.
53:12 - It feels pretty good, doesn't it?
53:14 - What a cool skill you now have.
53:15 - You can send a text
message from your machine
53:17 - with just a single command.
53:19 - Now, believe me,
53:20 - this is just the tip of the
iceberg of what you can do.
53:22 - There are so many more
Twilio APIs available,
53:25 - but for now let's take
things a step deeper.
53:28 - I don't know about you,
53:29 - but I'm a little clumsy
53:30 - when it comes to long
commands on the terminal
53:31 - like we just did with Curl.
53:33 - When exploring API's,
53:34 - I really like to lean on
a tool called Postman,
53:36 - and I think you'll enjoy it too.
53:38 - Why don't you take a quick break,
53:39 - and then we'll check out Postman?
53:42 - (calming electronic music)
53:56 - Postman is a wonderful feature rich tool
53:59 - that I use all the time
to explore new APIs.
54:02 - It started out as a Chrome Extension,
54:03 - but recently became a
full fledged application.
54:06 - It's super handy.
54:07 - I love how it can help you
organize your learning,
54:09 - and I think it's an excellent
exploratory tool too.
54:12 - Let's dive in.
54:13 - Postman can be downloaded
at GetPostman.com.
54:17 - Go ahead and pause me
while you get an installed.
54:19 - This right here.
54:20 - Download the app, and I'll wait,
54:21 - and when you're done un-pause me,
54:23 - All set?
54:24 - Okay, so here it is.
54:25 - I've got an installed too,
54:27 - and when it comes up it
will have this Create New,
54:30 - and typically when I
end up using this tool,
54:33 - I'm working with a specific API,
54:34 - and what I'd like to do
is to create a collection
54:36 - to keep all of the requests
that I make grouped together.
54:39 - So I'm gonna choose Collection here.
54:41 - So Create New Collection.
54:43 - Let's recreate those calls that we made
54:45 - to the Twilio API using Curl.
54:47 - So let's do that right here.
54:48 - So we'll call this
54:49 - the collection name is gonna be Twilio,
54:54 - and then I'm just gonna click Create.
54:57 - Down here there's a little window thing,
54:59 - a little bar over here.
55:00 - You can see that you've got
your collections over here.
55:01 - So we have a new one here called Twilio
55:06 - and in here you'll see
that we can add requests.
55:10 - So I'm going to go ahead,
and click Add Requests.
55:13 - So let's build that message log.
55:14 - Remember that was the GET that
we did over in the terminal.
55:17 - So I'll name this request,
55:19 - that request name is message log,
55:22 - and I like to make a description here
55:24 - about what's going on here.
55:26 - So this is gonna be all
messages sent from my account.
55:33 - That's what we were looking at, right?
55:34 - That's what that message log was,
55:37 - and if I'm taking notes,
55:38 - usually what I do is I drop
a link to the documentation
55:40 - about what the resources
that I'm looking at.
55:43 - That way I have a quick way to
get back to it to look at it.
55:45 - So one way to do that is just
go find the documentation.
55:49 - So if we just do Twilio
message resource doc,
55:54 - that's what I had there before.
55:56 - So that's gonna find the
resource for the messages,
56:00 - and a resource reference.
56:01 - That's great.
56:04 - And the way that the code here works here
56:07 - is very similar to like we saw on Spotify,
56:10 - the different things that are available.
56:11 - There's the create message resource,
56:13 - and each one of these kind of
has its own little heading,
56:16 - and there's some code over
here that we can switch.
56:18 - So I want to look for list all messages.
56:21 - That's what we want with
the message list, right?
56:23 - So I've got this example,
56:28 - and I'm gonna grab the URL,
56:30 - and I'm gonna come back over to Postman,
56:32 - and just drop it in there,
56:33 - and a Postman uses,
56:34 - here, this is marked down.
56:36 - So I'm gonna use brackets,
and say Twilio documentation,
56:41 - and then if I put parens,
I can paste the link there,
56:44 - and that will make a
link inside of my notes.
56:48 - Let's scroll down a little bit here.
56:52 - Twilio offers a ton of different API,
56:54 - so I could break this down even further
56:57 - with this thing called a folder.
56:59 - So let's open this up actually,
57:01 - and let's make a new folder here,
57:05 - because you know, there's
so many different APIs,
57:06 - we might be playing
57:07 - with a bunch of different things.
57:08 - So what I like to do is
put these in folders.
57:10 - So let's make a folder.
57:11 - We'll make the folder called SMS.
57:13 - Okay, and we're gonna add
that to the SMS folder.
57:17 - Okay, so what does the saying is
57:19 - we're gonna make this new request.
57:20 - We're gonna create a
new folder called a SMS,
57:23 - and when we click Save,
57:27 - we'll see that here underneath
Twilio we have this SMS now,
57:30 - and there's our message log as it were.
57:39 - And so what's happened
here is it's created a tab
57:41 - for our new requests that we've made,
57:43 - and you'll notice that
there's a little twisty here,
57:45 - and there's a tab,
57:45 - and there's the link to my documentation,
57:47 - which is handy as you'll see
as we're going through this.
57:50 - So let's go grab that URL that we had.
57:52 - I'm gonna go back to my terminal,
57:55 - and I'm gonna press the up arrow,
57:58 - and I have that there.
57:59 - If you don't have this go ahead,
58:01 - and look in the notes,
58:03 - and I've got a copy for you.
58:04 - So I'm gonna copy that.
58:06 - I'm gonna come here,
58:07 - I'm gonna put the request in here.
58:09 - One thing to notice over here is
58:10 - there's this dropdown that says GET,
58:12 - and we can send different types of,
58:14 - here's the different verbs, right,
58:15 - that we can send across
HTTP verbs, a bunch of them,
58:19 - and we're gonna leave it at GET right now,
58:20 - because that's what we're gonna do.
58:21 - We're gonna get the messages,
58:24 - and I think we're all set.
58:25 - So let's go ahead, and click Send,
58:29 - and oh we got an error.
58:30 - You'll see that we got
back a 401 Unauthorized.
58:34 - So if I mouse over it,
58:35 - I see more information, which is nice,
58:37 - and if I scroll down here a little bit,
58:39 - here's the error message
that came back from Twilio.
58:42 - It says your account SID,
58:43 - or Auth Token was incorrect,
58:44 - and oh yeah, we didn't even pass them.
58:46 - So you can add that
authorization to your request
58:48 - by this little tab here.
58:50 - So next up param, this is authorizations,
58:52 - and here we'll say type
inherit Auth from parent.
58:54 - Oh, that's actually a great idea.
58:57 - We're gonna be using the same account SID,
58:59 - and Auth Token anyways,
59:00 - so we should just use it
from the parent, right?
59:02 - So I'm gonna open up my Twilio
collection, which is here.
59:06 - So if the screen ever gets closed,
59:07 - this little guy here pops out.
59:09 - So I'm gonna go to my Twilio collection,
59:12 - and right click on the buttons here,
59:14 - and I'm gonna choose Edit.
59:17 - Here we go, and we'll come
over here to authorization.
59:19 - So what this does is all requests,
59:20 - will share this if they have, you know,
59:22 - inherit from parents.
59:23 - So we'll get this authorization.
59:26 - It's used for every
request in the collection,
59:28 - which is what we want,
59:29 - and we're gonna change the
type to be a basic Auth,
59:31 - which is what we're using there.
59:33 - So we'll click Basic
Auth, and look at this.
59:37 - We were gonna put our super
secret information here,
59:40 - but it's saying heads up.
59:41 - These parameters hold sensitive data
59:42 - to keep this data secure
59:43 - while working in a
collaborative environment.
59:45 - We recommend using variables.
59:47 - I don't know about you,
59:48 - but whenever I see a security warnings,
59:50 - I like to follow that.
59:52 - So let's follow that.
59:52 - So let's, there's variables here.
59:54 - So it says, learn more about variables.
59:55 - If there's also this
Variables tab up here, right?
59:57 - So let's click into Variables.
59:59 - Okay, so what these do
is we create a new name,
60:01 - and it will have a value,
60:03 - and people can set on
their own machine there,
60:06 - these own values.
60:07 - So this is a good way
60:09 - of not accidentally sharing out your keys.
60:10 - So the things that we want is
60:12 - we want to have the account SID,
60:14 - which is a string identifier.
60:15 - So Twilio account SID,
60:19 - and the way these these work is,
60:21 - there's this initial value.
60:22 - This is what people will
see when they come in.
60:23 - So we want them to fill out their own.
60:25 - So we'll say your account SID.
60:28 - So if anybody is using this,
60:29 - you're gonna share it.
60:30 - That's what they'd see,
60:31 - and we'll get the current value.
60:33 - So that's over in my Twilio console.
60:37 - So if I go to Twilio/console,
60:40 - which is the main page, once you log in,
60:42 - you'll see here that
I have my account SID,
60:44 - here it is, and then there's
a little copy button.
60:46 - So I'm gonna copy my account SID,
60:52 - and we will paste that,
60:55 - and the current value is my account SID,
60:58 - and then we'll do another one.
61:00 - We need the Auth Token.
61:01 - We'll say Twilio Auth Token
61:06 - it will say your Auth Token,
61:11 - and again, what we want
is this Auth Token.
61:15 - I'm gonna copy that.
61:20 - And paste that here.
61:22 - Awesome,
61:27 - and I'm gonna click Update.
61:34 - So I'm gonna go again
again, and choose Edit,
61:37 - and I'm gonna go to Authorization,
61:39 - and now that we have it,
61:41 - Postman allows you to use those variables
61:43 - wherever you want to,
61:44 - and you can replace them
by using a curly brace.
61:47 - Sometimes those are called mustaches.
61:49 - If you look at that sideways.
61:50 - So we'll do Twilio account SID, right,
61:54 - so it's double mustaches, right?
61:55 - So mustache, mustache,
and then it does that.
61:58 - So mustache, oops, and for the password,
62:01 - we'll do Show Password
62:02 - just so we can see that
we're doing it right.
62:04 - We'll do mustache, mustache
Twilio, Auth Token,
62:08 - that's how this works.
62:09 - So there we go.
62:12 - So that is going to set the authorization
62:14 - for all of the collections
to these variables
62:16 - that are local to our machine.
62:18 - Make sense?
62:19 - There we go.
62:20 - So we'll click Okay.
62:21 - Update, and now let's go ahead.
62:25 - I'm gonna close this window here,
62:29 - this little nothing, and
I'm gonna click Send.
62:32 - Okay, so we've got the
authorization headers in place.
62:35 - We'll click send.
62:37 - There we go, beautiful.
62:39 - Much nicer formatted.
62:41 - See here we got our messages,
62:43 - we've got an array of
messages that came back,
62:45 - and we have ahoy from terminal,
62:49 - and we should have another one.
62:51 - Now, there's nice URIs that we
could go look at other things
62:53 - like feedback that came
62:55 - or the media that's attached to it,
62:58 - and here you'll see the original
that we did that was ahoy,
63:01 - and you'll see that the cost
of it was 0.07 of a cent.
63:07 - So awesome.
63:08 - Now that we've got all of
our foundations set up,
63:10 - we've got our collection,
63:11 - and we've got our variable setup,
63:13 - let's go ahead,
63:14 - and let's make it so that
we can send a post from this
63:16 - right after a quick break.
63:18 - (calming electronic music)
63:33 - So we've got our message
logs all set up in Postman.
63:37 - So now let's use it to
create a post request.
63:40 - Now since we want to use
that same authorization
63:42 - that we use in the message log,
63:44 - we should put it in the
collection, and folder.
63:46 - So let's go back over here.
63:48 - Again, if this is closed,
63:49 - you click this little like
I hit to pop this out.
63:52 - So we're gonna add a new request
63:53 - inside of the Twilio SMS here,
63:55 - and we're gonna make Add Request,
63:59 - and the request name is
going to be Create a Message.
64:07 - So we'll say creates a text message,
64:12 - and then I'll see if I have
the Twilio docs up still.
64:16 - I don't, so we'll have again,
64:18 - we'll search Twilio message.
64:21 - There it is filling it out for me.
64:22 - Message, resource reference.
64:27 - And over here on the left nav
64:29 - we can see that there's different bits.
64:31 - We want this create a message resource.
64:32 - This is definitely what we want.
64:34 - You see there's the URL.
64:37 - So we will copy that,
64:38 - and bring that back over to our Postman.
64:43 - It will say Twilio Documentation.
64:49 - Awesome.
64:51 - And it's in the SMS folder,
64:52 - because that's where I started it from.
64:57 - Let's bring this all the way up,
64:58 - and we'll say save to SMS.
65:00 - That's the folder.
65:02 - Awesome, so we have this Create a Message.
65:06 - So let's see in order to create a message,
65:08 - remember we're gonna do a post,
65:11 - and it's that same URL
65:14 - that we were using from
the get message log.
65:15 - So see how there's two tabs here?
65:16 - So I'm gonna switch back over to my GET.
65:19 - Oh, look at this.
65:22 - We see here that the
account SID is in there,
65:26 - and we don't necessarily want to put
65:28 - our accounts SID there for each one.
65:29 - We want anybody who uses
this to be able to use it.
65:32 - So let's change that to
use a Twilio account SID.
65:37 - So that way we'll use the
variable that we've created right?
65:39 - So that's gonna replace
that automatically here,
65:41 - and then you can see what
it is by mousing over it,
65:44 - and now let's click Send,
65:45 - and make sure that we got it.
65:47 - Cool, now this is a usable URL for anybody
65:51 - if we were ever to share this.
65:52 - I'll show you how to do
that here in a second.
65:54 - So we'll paste this here,
65:57 - and when we're creating a message,
65:58 - we're gonna need to
65:59 - send some additional information, right?
66:00 - So if we click over here,
66:02 - and we click on this body tab,
66:03 - so we're gonna send some values,
66:04 - and in the Curl command we sent that
66:06 - using a form URL encoded.
66:08 - So let's do that.
66:09 - What were those values though?
66:11 - Oh, you know, I should pop
over to the documentation.
66:13 - I am sure glad that I made
that link so I can click here.
66:17 - Open that up.
66:19 - Cool, so we definitely need a two.
66:21 - That's right, we need a two from,
66:23 - so you may also need to pass a body,
66:24 - or a media URL with a messages content.
66:28 - Media URL, does that
mean I can send pictures?
66:32 - Cool, we should do that, shouldn't we?
66:35 - Cool, so there is two,
66:37 - and there's from, body, and media URL.
66:48 - Okay, cool.
66:48 - Now I'm gonna set this to
the Curl and because you see
66:50 - these different
programming languages here,
66:51 - we're gonna set this to Curl.
66:52 - So it's in the right format here.
66:54 - So there's media URL,
66:56 - and the two in the front
half capital F's there.
67:00 - So that's the format that we want.
67:03 - So we'll say two,
67:07 - and that's my number that
we want to send this to.
67:09 - So this 1-503-461-5537.
67:16 - So let's add a body.
67:18 - So we'll do body again,
67:21 - need to make sure that it's checked.
67:22 - So body, and we'll say sent from Postman,
67:26 - and you can actually send,
67:28 - in these messages, you can send emojis,
67:30 - which who wants a text
manager without emojis?
67:33 - My frequent used one is the mussel taco.
67:35 - Frowny love rocket, sent
from Postman, awesome,
67:39 - and why don't we send a media URL?
67:41 - We saw that there in the notes.
67:43 - So we'll say media URL, and the URL,
67:46 - we can send any sort of a
GIF, or Jif, or a whatever,
67:52 - however, whatever you can
send here whenever you want.
67:55 - I'm gonna copy,
67:56 - and paste one of my
faves that we can send.
67:59 - Feel free to use your own image.
68:00 - I've left some fun
suggestions on the notes,
68:02 - if you want to copy.
68:04 - Giphy is a great site to find those.
68:07 - So let's see, we get to body media.
68:08 - Now, we need from, we need from,
68:10 - so that's our Twilio number.
68:12 - So I'm gonna click in here,
68:13 - and I'm gonna say from actually,
68:16 - this is something where,
68:17 - this is my personal number,
68:19 - so why don't we add a variable for that?
68:22 - So I'm gonna flip back over here
68:23 - to the Twilio variables.
68:27 - So we'll come back to edit,
68:29 - come in here to variables,
68:31 - and we'll add a new one for
let's call it Twilio number,
68:35 - and I'll say your Twilio number,
68:39 - and our Twilio number.
68:41 - Let's look at that, and
it's in the console.
68:43 - So Twilio/console,
here's our trial number,
68:47 - that's what we want.
68:49 - Copy, and paste that,
68:53 - and we'll paste that here.
68:54 - Here we go, say Update,
68:55 - and so the from value we
can use Twilio number.
69:01 - Awesome.
69:02 - Alright, this is feeling good to me.
69:05 - Here it goes, nothing.
69:05 - We're gonna click Send, and boom,
69:09 - 201 created awesome,
69:11 - and I just got my text
message, and there's my GIF.
69:16 - Pretty cool, right?
69:18 - So creating an MMS,
69:19 - or multi messaging service
message is a lot more difficult
69:23 - than this if you were to
attempt to do that by scratch,
69:25 - but the abstractions in place, right?
69:27 - So it was pretty much seamless for us.
69:29 - Now you'll notice here
that the message says
69:35 - maybe you won't notice the
status here says queued,
69:40 - but if we go, and we
look at our message log,
69:42 - and we run this thing again,
69:44 - we can see that they're sent
for Postman, there's our emoji.
69:47 - And here's some more information,
69:50 - and if we scroll down a little bit more,
69:52 - we'll see these sub resource URIs
69:54 - and now we can see this
media that was sent along.
69:56 - So let's go ahead, and I'm
gonna just click this link,
69:58 - and watch what it does.
70:00 - It's gonna make a new GET requests.
70:01 - Now there's a bit of a problem,
70:03 - because this GET request is
outside of our collection.
70:08 - So typically when I need
to do something like this,
70:10 - there's a little hack that you can do
70:12 - so I can get the
authentication information.
70:14 - So let's just click Save,
70:15 - and I just call it,
70:17 - you can just call it that if you want to,
70:19 - and then I'm just gonna call it temp,
70:22 - because we'll delete it
when we're done here.
70:23 - So we'll just call it Temp.
70:26 - Say that to SMS, and when we run this,
70:30 - we'll see that we got
back the list of medias,
70:33 - and because you can send multiple, right?
70:34 - You can send multiple pictures in a,
70:36 - and we'll see here that
there is an official one,
70:41 - and see how it is accounts,
and then messages,
70:45 - and then media there.
70:47 - There's sub resources.
70:48 - So I'm gonna go ahead, and
I'm gonna click on that.
70:52 - And if we wanted to, we
could run this request,
70:56 - and it would be,
70:58 - it would show information about the media,
70:59 - but if you actually remove this .JSON,
71:01 - it will show the form of
whatever the media was.
71:04 - So we'll make this request,
71:05 - and watch what happens.
71:09 - Let's see, we got back my GIF that I sent.
71:15 - And with a request of this size,
71:18 - we probably don't want to
be making that request again
71:20 - if we don't need to.
71:22 - So this sounds like the job
for client side caching.
71:25 - Well let's see if our API
supports caching tricks.
71:27 - So what I'm gonna do is I'm
gonna expect the headers
71:29 - that are on this response.
71:32 - Nice, so it has this last
modified header here,
71:35 - which is a good sign that
it does support caching.
71:37 - So let's go ahead, let's copy this value.
71:39 - So I'm gonna copy this date
here into the clipboard,
71:44 - and if I go up to where
my request was made,
71:46 - if I come into headers here,
71:48 - I can add a new header,
and I'm gonna say if,
71:50 - and you'll see that Postman
is doing a really good job
71:53 - of showing you what's available.
71:54 - So if it's been modified since that time,
71:58 - because this is basically what
your client would do, right?
72:00 - It says, if this thing has
been modified since this time,
72:02 - then show me anyone, otherwise don't.
72:04 - So that's what this does.
72:06 - So I go in, and go ahead,
and I'm gonna go ahead,
72:07 - and click Send,
72:10 - and you'll see that my API
returned this time not modified.
72:14 - So our API supports caching,
72:18 - which ding, ding, ding,
72:19 - means we covered another part
of RESTful API constraints
72:23 - using standard HTTP caching mechanisms
72:25 - like last modified, and etags,
72:28 - a RESTful API should support caching.
72:31 - It's up to you to maintain
the cache on your client,
72:33 - and decorate your request,
72:34 - but this can come in really handy
72:36 - to avoid making unneeded requests.
72:38 - Awesome, so let's make sure
that we've got these saved.
72:40 - Do you see these little orange dots here?
72:42 - Means that they haven't been saved.
72:43 - So I'm gonna click on it,
72:44 - and click Command+S, or Control+S,
72:47 - and I don't really care about the temp,
72:49 - and I don't really care about this one.
72:52 - That was just kind of exploring.
72:54 - So let's take a look here.
72:55 - We have this temp, we can
choose, and say Delete,
72:58 - and we'll delete it from temp,
72:59 - and now he has this, have our message,
73:00 - and our create message.
73:01 - One more quick thing before we wrap up.
73:03 - I wanted to show you,
73:04 - you can actually generate code from this.
73:09 - So if you click in here, you can see,
73:11 - here's an example of
generating a code snippet.
73:13 - It's gonna actually run through the code,
73:14 - and set up everything that
you need to run this code.
73:18 - Now there are things
called helper libraries
73:22 - that will do this,
73:22 - and Twilio has one,
73:23 - and we'll look at that here in a second,
73:25 - but this is pretty slick, right?
73:27 - Really, really powerful,
73:29 - and you just copy it to
the clipboard, and boom.
73:32 - Pretty powerful, huh?
73:33 - Awesome job diving into Postman.
73:35 - It's a super powerful tool,
73:37 - and it keeps getting better every day.
73:39 - There are so many features
that we didn't even cover.
73:40 - We barely scratched the surface.
73:42 - Check the notes for where to learn more.
73:44 - We saw how to organize
our requests together
73:46 - into collections as well as share common,
73:48 - and secure values by using variables.
73:50 - We learned how to add different
values to your requests,
73:52 - both in form, values, and headers,
73:54 - and we also saw how to navigate
73:56 - through various sub
resources by clicking URIs.
73:59 - We even saw how to create
74:00 - actual runnable code from your request.
74:02 - While we were in the Twilio documentation,
74:04 - you might have noticed
74:05 - the code examples on the screen.
74:07 - On that page, it's possible to tab between
74:09 - various language
implementations, and solutions.
74:12 - Many products offer
what is known as an SDK,
74:15 - or software development kit,
74:17 - or Helper Library that
allows you to interact
74:20 - with their product in
your native language.
74:22 - As you can see,
74:23 - it abstracts away the REST API completely.
74:26 - Let's take a look at the
Twilio Helper Library next.
74:29 - Before that though,
74:30 - just a quick reminder
74:31 - to make sure that you check
out the notes on this video.
74:34 - There's a link to a repository
of built out collections
74:36 - that are ready for you to use.
74:38 - There are lots of great
API's to practice with.
74:40 - Postman and Curl are both
great tools for accessing,
74:43 - and exploring APIs.
74:45 - However, when it comes time,
74:47 - most likely you're gonna
need to write some code.
74:49 - As we saw in Postman, you
can actually generate code.
74:53 - All programming languages
74:54 - come with some sort of
way of making requests,
74:57 - and as you know, HTTP requests
are all we really need
75:00 - to interact with REST APIs.
75:02 - Now writing that sort
of code is totally fine,
75:05 - but you'll find out
that you end up writing
75:07 - a lot of what is known
as boilerplate code.
75:09 - Now, by boilerplate, I mean
code that is repetitive,
75:12 - and almost always the same
just with a few tweaks.
75:15 - Many products, and services
have created a solution
75:17 - to help you avoid this problem.
75:19 - They're often called
helper libraries, or SDKs,
75:22 - Software Development Kits.
75:23 - They'll be specific to
your programming language.
75:25 - These libraries help to make your code
75:28 - more concise, and legible.
75:30 - They usually also provide
75:31 - additional documentation for your editor,
75:33 - which I find super handy.
75:35 - Let's go check out some
of these helper libraries.
75:37 - Let's explore both JavaScript,
and Python Helper Library.
75:40 - In order to do that,
75:41 - I'd like to make sure
that you have both Node,
75:43 - and Python installed under computer.
75:45 - I've put installation
instructions in the notes.
75:47 - Let's get started with Node.
75:49 - So I'm gonna open up
the terminal on my Mac,
75:51 - and I'm gonna make a
directory called scratch,
75:56 - and I'm gonna change into that directory,
75:58 - and in here I want to make a
directory called JavaScript,
76:02 - and I'm gonna CDN to that directory,
76:05 - and I'm gonna open my editor
in this directory here.
76:08 - So let's say code.
76:09 - I'm using Visual Studio Code.
76:11 - So we're gonna open up Visual Studio Code,
76:13 - and over here in our directory,
76:15 - I'm gonna add a new file,
76:16 - and I'm gonna just call it explore.js.
76:21 - Alright, now what I'm gonna do is
76:24 - I'm gonna install the library
76:26 - in Node land that is called NPM.
76:28 - So I'll open up a little terminal
76:30 - here in Visual Studio Code,
76:32 - and I'm gonna run NPM, install Twilio.
76:39 - And that's gonna go out,
76:41 - and it's gonna get the
library so that I can use it,
76:44 - and I can use it like so now,
76:46 - now I can say const Twilio
Goals require Twilio.
76:57 - And then we're gonna initialize it.
76:59 - So we'll say const
client equals new Twilio,
77:03 - and as you can see,
77:05 - it takes an account SID,
77:06 - and an Auth Token,
77:08 - and I have those available for us here.
77:11 - So here's my account
SID, I'm gonna copy that,
77:19 - and we will make the
Auth Token after that.
77:30 - Alright, so we'll put that, awesome.
77:38 - Now can you think of anything
wrong with doing that
77:40 - with putting my account
SID and Auth Token there?
77:43 - Well, right now this is
just sitting on my machine,
77:45 - but if I were to upload,
or share this with anyone,
77:47 - my credentials are sitting right there
77:49 - waiting for anyone to steal.
77:51 - Typical solution here is to
use environment variables,
77:53 - and we'll do that when
we build our application,
77:55 - but this is just a friendly reminder.
77:57 - Be careful with the keys.
78:02 - What we're gonna go over here
78:03 - might very well be overwhelming,
78:05 - but it will make sense
someday if you stick with it.
78:08 - I promise, oh, I've added notes,
78:10 - but really don't let this stress you out.
78:13 - The reason why I'm talking
about this behavior is,
78:15 - because the Twilio JavaScript client
78:17 - works like most JavaScript libraries.
78:19 - It's asynchronous, and it relies on
78:21 - a concept called promises.
78:24 - So the way the promises work
78:26 - is that you set up handlers
78:27 - for when your method
call actually completes.
78:30 - So to get our message
log, we use this method.
78:34 - There's a method called,
78:35 - so we do client.messages.list,
78:41 - and what that method returns
78:42 - is an object that is called a promise.
78:45 - It's a promise of a future value.
78:47 - The future value in this
case will be our messages.
78:50 - So promises have an
important method on them,
78:54 - and it's called then.
78:56 - So I'm gonna go ahead,
and chain on that message.
78:59 - I'll say .then, and this method
should be given a function
79:05 - that accepts of value.
79:07 - So I'm gonna pass it a function.
79:09 - Now in modern JavaScript
79:10 - you can use what are known
as fat arrow functions.
79:13 - So what I'll do is I'll
put the name of the value,
79:15 - and the value here is messages, right?
79:19 - Because this is what I'm
expecting to be returned,
79:20 - and then I'm gonna put a fat arrow,
79:21 - which is an equal sign of greater than,
79:25 - and then I'm gonna put the function body.
79:26 - So let's just log out
the most recent message.
79:32 - Okay, so we'll do a console.log,
79:35 - and I'm gonna use back ticks
79:37 - so that we can get a string interpolation,
79:42 - and I want it to be the
first one in the array.
79:45 - So we're gonna say
79:47 - the most recent message is dollar sign,
79:55 - curly brace messages, zero,
because it's in array.body,
80:01 - and that is a long line in,
80:04 - this happens quite a bit.
80:05 - So typically what we do is
80:07 - when we do this chain,
80:12 - is we press Enter here,
80:14 - and we put that on its own line,
80:15 - still pretty long still off the screen,
80:17 - and if I ask this to format with prayer,
80:21 - let's see what it does.
80:22 - There we go.
80:24 - Let's see, you know,
80:24 - it's done a pretty good job
of getting things close.
80:27 - So, and then again,
80:29 - just to show you that this
is running asynchronously,
80:32 - I'm gonna below making this call, right?
80:34 - So this is, looks like
it's after that calls made.
80:37 - Well it is after that
call is made is just,
80:38 - that call's gonna be asynchronous.
80:40 - I'm gonna say gathering your message log.
80:47 - So let's go over it real quick.
80:48 - What's going on here
80:49 - is that we are getting
a hold of the client,
80:53 - and we're setting up a new client
80:56 - so that all requests made
80:58 - against this client are
authenticated, right?
81:00 - So that's our account
SID, and our Auth Token.
81:03 - And then we're gonna use the client,
81:05 - we're gonna use the messages out there,
81:07 - we're gonna do a list, and that list
81:10 - is an asynchronous method.
81:12 - Now while this has been abstracting away,
81:14 - we know what this is doing.
81:16 - It's making that same GET
request that we did in Postman,
81:19 - and in Curl,
81:20 - and we know that it will
return a JSON response,
81:23 - but because this is asynchronous,
81:25 - immediately it's going to
move on to the next line.
81:28 - It's gonna say gathering your message log,
81:31 - and when that call to list returns,
81:34 - it's gonna run this function,
81:36 - and it's gonna pass in the return value
81:38 - of that response to here.
81:40 - Now you should note the return value here
81:42 - is an actual object.
81:44 - It's not a JSON response.
81:46 - That sneaky little Helper Library of ours
81:48 - has also abstracted that away for us.
81:50 - It took that HTTP response,
81:52 - which has a body of JSON in it
81:54 - automatically turned it
into an object for us,
81:57 - and you can see that here,
81:58 - it's an array of objects, right?
82:00 - So that's at the zeroth,
okay, so let's run it.
82:08 - So I'll do clear down here,
82:11 - and we're gonna say Node explore.js.
82:16 - So we should see
gathering, or message log,
82:18 - and then the most recent
message, fingers crossed.
82:20 - Here we go.
82:23 - Awesome.
82:24 - Yes.
82:25 - Okay.
82:26 - Now, one thing that we
should make sure to do here
82:28 - is to capture any errors
82:29 - that might have happened asynchronously,
82:31 - right now if an error happens,
82:33 - it'll be swallowed.
82:34 - Well actually, let me
demonstrate what that means.
82:37 - This bites me all the time,
82:38 - and I don't want it to bite you.
82:39 - Let's say that you accidentally
82:40 - trimmed the last character
off here, the seven of mine.
82:44 - Let's take the last one off here.
82:46 - So I'm just gonna do that.
82:47 - So it's an invalid SID,
82:49 - and I'm gonna save, and I'm gonna run it,
82:52 - and it's gonna say
gathering your message log,
82:53 - and then it's just gonna end
out no error, no nothing,
82:57 - but the results never came back.
82:59 - So what we need to do is
83:00 - we need to catch any
errors that might occur.
83:03 - Every promise has a method named catch,
83:06 - and what might not be clear here is that
83:08 - this then here, that's returning.
83:10 - This is actually also a promise.
83:12 - So I can just chain on here.
83:13 - So I can say .catch,
83:20 - and I'm gonna catch an error,
83:23 - and again, fat arrow function,
83:25 - and we'll just log that error.
83:26 - So I'll say console.error.E-R-R.
83:31 - Okay, so now we've got, it's gonna chain,
83:35 - and if anything happens,
it's gonna send the error.
83:38 - So let's try that again.
83:39 - Let's see what happens now
with our catch in place.
83:44 - Awesome.
83:45 - It tells us that it wasn't found,
83:46 - because that's wrong, right?
83:49 - Great.
83:49 - This is probably a good time to remind you
83:51 - if that was way too much
information that you can,
83:55 - and you probably should
scrub the video back,
83:57 - and watch me do it again.
83:59 - I guarantee that you'll catch some stuff
84:01 - you missed the first time,
84:02 - and at the very least,
84:03 - you'll spot a dad joke that I made
84:05 - at the very beginning of this video.
84:07 - I had said, this will
make sense eventually.
84:09 - I promise.
84:10 - I'm sorry.
84:11 - I'm kind of obligated to make that joke,
84:13 - and if that doesn't make
sense yet, that's also okay.
84:15 - Check the teacher's notes for
more information on promises.
84:18 - Let's change gears,
84:19 - and take a look at the Python version
84:21 - of the Helper Library
right after a quick break.
84:23 - I know I need one.
84:24 - See you soon.
84:26 - (calming electronic music)
84:40 - We just took a look at
84:41 - the Twilio JavaScript Helper Library,
84:43 - and now let's take the Python
Helper Library for a spin.
84:46 - Now, if you don't have
Python installed, pause me,
84:48 - and check the teacher's
notes for instructions.
84:50 - In my terminal, from my scratch directory,
84:53 - I'm gonna create a new Python directory.
84:55 - So mkdir Python, change into that,
85:01 - and while we're here, let's just check,
85:03 - and make sure that we have
the right version of Python.
85:05 - So I'm running Python 3.7.3.
85:08 - As long as this first three
here is a three, and not a two,
85:12 - we're good to go.
85:13 - Python uses the concept
of virtual environments.
85:15 - These allow you to install packages
85:17 - local to this application.
85:18 - So let's do that just to be safe.
85:20 - So, that's done with the dash -m,
85:25 - and then venv, for Virtual Environment,
85:27 - and I usually just call that .venv.
85:31 - So that will create a directory
85:32 - called .venv that is right there,
85:35 - and here we go,
85:40 - and what happens is now I'm on a Mac,
85:42 - so this might look a little
bit different on Windows.
85:44 - If you do .venv,
85:48 - there is a directory called bin activate,
85:50 - and I'm gonna source that file.
85:51 - I think that's a .bat file on Windows.
85:53 - Check the notes,
85:55 - and you'll see now that I am activated.
85:57 - So I've got this .venv here.
86:00 - I'm gonna go ahead, and open up my editor.
86:01 - So I'll do code doc, and here we are.
86:05 - There you can see my .venv directory,
86:07 - and I'm gonna add an explore.py.
86:15 - Alright, and I want to install
the Twilio Helper Library.
86:19 - So I'll do a Control+Tab,
86:21 - and you'll see that my
editor actually went ahead,
86:25 - and ran that argument for me.
86:28 - So I'd already, I'm activated
here, which is good,
86:31 - because I want to install
a package here using PIP,
86:33 - which stands for the
Acute Recursive Acronym
86:35 - of PIP installs of packages.
86:37 - So that's PIP install, and again, Twilio.
86:48 - Cool, so it's installed,
and we can start using it.
86:51 - So I'm gonna go up here,
86:54 - and we'll say from
Twilio.REST import Client,
87:03 - and we'll make a new client,
87:05 - and again, it can be instantiated using
87:09 - so here it's given us
this nice information
87:12 - that's available about the API.
87:13 - So we'll put a,
87:15 - I'll put in here again,
87:16 - this is our account SID,
87:20 - and boy, it really wants to
show us that account SID,
87:24 - and Auth Token.
87:25 - So let's get that.
87:27 - So again, account SID, and Auth Token.
87:45 - Let's get these on some of
the new lines by themselves.
87:50 - Again, really bad practice to
leave your keys out like this.
87:53 - We'll fix that in a bit.
87:54 - Now let's print out
the call log real quick
87:57 - just to show off the similarities,
87:59 - and differences between the libraries.
88:00 - So the Python version
is synchronous, right?
88:02 - So we can say, so we can just iterate
88:06 - through those lists, and messages.
88:07 - So we can say for message
in client.messages.list,
88:16 - and we will say print the message.body.
88:20 - Alright, let's see what that looks like.
88:23 - So we will do Python Explore.py
88:30 - and I didn't save it.
88:31 - So that's an important
part, Python Explore.py,
88:34 - and there we go.
88:36 - Sent from Postman,
88:37 - Ahoy from terminal.
88:41 - So awesome, So let's go ahead,
88:42 - and we'll comment that out for now,
88:44 - because we're gonna do something else.
88:46 - So those are commented out,
88:48 - and let's write some
code to send a new one.
88:51 - So we'll say message equals
client.messages.create,
88:59 - and in here we are going
to pass our variables.
89:04 - So we're gonna send this to me,
89:08 - or to you in this case, (503)461-5537.
89:13 - It's my number,
89:14 - and the from,
89:16 - now you'll notice that from is
a key word in Python, right?
89:21 - So see like from Twilio?
89:23 - So what's nice is the
Python library has made it
89:26 - from underscore here.
89:28 - It helps for the reserved words.
89:31 - So my number, my Twilio
number, what was that?
89:36 - Here it is.
89:38 - That's my Twilio number.
89:42 - Awesome,
89:47 - and let's do a body, and we'll
say body, hello from Python.
89:59 - Yeah, let's go ahead, and
let's print things out.
90:01 - So Python has a nice little
thing called F strings
90:05 - which will allow you to print
variables that are in scope.
90:10 - So we'll say if created a new message,
90:12 - and let's just show the message SID
90:14 - to make sure that we got it,
90:16 - and we can just do msg.sid.
90:20 - Hey, so it starts with an F,
90:22 - and it uses the mustaches
around this for message.sid.
90:25 - Very similar to those string
literals, and JavaScript.
90:30 - Let's go ahead, and create this one.
90:32 - So we will run Python Explore,
90:35 - and this should send
a message, and it did,
90:41 - and again, I want you to see
90:42 - we are abstracting away the fact that
90:45 - we're posting to the messages
sub resource under my account.
90:48 - It's just magically happening,
90:50 - because we've logged this
client in pretty cool, right?
90:54 - The other thing that this
abstraction gives us is
90:56 - we have instance variables
that represent our resources.
90:59 - Now, it might not have been clear up here
91:01 - when I looped over these objects,
91:03 - but they're actual objects.
91:06 - It's not just data.
91:06 - They actually have methods,
91:07 - and I can call the delete
method on this message,
91:10 - and it will get deleted.
91:11 - In fact, that's not a bad idea.
91:13 - We've been doing a lot of
test exploratory messages.
91:16 - Let's just delete them, okay?
91:17 - So what I'm gonna do is
I'm gonna come up here,
91:21 - and I am going to uncomment this code
91:28 - and I'm gonna comment out
our creation message code,
91:38 - and let's make this an F string here.
91:41 - So we'll say deleting message body.
91:49 - Here we are.
91:50 - We're gonna say message.delete.
91:53 - Cool.
91:54 - Now before we run this,
91:57 - I want you to make sure
91:58 - that you understand
that we're gonna delete
91:59 - all the messages in your account
92:01 - if you've been using a live account,
92:03 - and have things that you want to save,
92:04 - I highly recommend not running this.
92:07 - Okay, you've been warned.
92:10 - So here we go.
92:11 - I'm gonna update this.
92:13 - There we go.
92:14 - So we've just deleted all of our messages.
92:17 - So if we come, and try to run it again,
92:19 - you'll see there's no
messages to loop over.
92:22 - We've done it, clean slate.
92:23 - It's like the nothing never was.
92:25 - Pretty cool, right?
92:26 - That Helper Library was able to
92:27 - abstract away the HTTP delete call,
92:30 - and it used the information
that it had available
92:32 - in its object to make the call itself.
92:35 - Awesome.
92:35 - You see how the helper
libraries are similar
92:37 - yet match the development workflow,
92:39 - and style of each language?
92:41 - This is one of the key benefits
92:42 - of helper libraries in general.
92:43 - They abstract the way the
HTTP client connection
92:46 - of the REST API boilerplate.
92:48 - They also behave as you
expect them to behave.
92:51 - It feels natural.
92:52 - The way that we were able to
delete from the resource itself
92:55 - helps to unlock another
REST API constraint
92:58 - scavenger hunt item, and
that is uniform design.
93:01 - Now this constraint has four sub sections,
93:04 - one of which is what we just discussed.
93:06 - Resource manipulation
through representations,
93:08 - because there was enough
information included,
93:11 - it was clear how to modify,
93:13 - and delete this resource.
93:14 - Another sub section in here is
93:15 - resource identification in requests.
93:18 - Those are the URLs that are included,
93:20 - because of the URIs are included,
93:22 - we know that we can get,
93:23 - and manipulate specific resources.
93:25 - Uniform use of the HTTP
verbs is pretty powerful.
93:29 - We just wrote some scripts
93:30 - that make use of helper libraries.
93:32 - These libraries are super handy
for automation based tasks,
93:35 - or batch scripting,
93:36 - making a whole bunch of calls at once.
93:38 - When we're talking about this,
93:39 - we should cover another common tool
93:41 - for talking to external API's,
93:43 - and that is the C-L-I,
93:45 - or Command Line Interface.
93:47 - There's that I again.
93:48 - Command Line Interfaces can
be used to make API calls
93:51 - from an executable on your machine.
93:53 - More, and more these are showing up
93:55 - for all sorts of tools that
require authentication,
93:57 - and do a bunch of different services.
93:59 - This concept is popular
amongst cloud providers
94:02 - where setting something up
needs to be done quickly
94:04 - from the command line.
94:05 - Check the notes for more.
94:06 - Another commonplace where
you'll use helper libraries
94:08 - is from within applications
that you're building.
94:11 - Let's get to the final
unit of this course,
94:13 - and implement an external API
94:15 - into existing web applications.
94:17 - You've got this.
94:18 - By now, I hope you're starting to see
94:20 - that external APIs allow you
94:21 - to add pretty incredible
features to your applications.
94:24 - Want to send a Slack message
94:26 - when someone fills out
feedback on your website?
94:28 - There's an API for that.
94:29 - Want to change the color
94:30 - of your lights in your house
94:31 - when your favorite
sports ball team scores?
94:33 - There's an API for your team,
94:35 - and for your lights if you want it.
94:37 - Want to send yourself a text message
94:38 - 10 minutes before your bus shows up?
94:40 - APIs are there too.
94:41 - Heck, do you want to make a Furby dance?
94:44 - It's got an API.
94:45 - They're everywhere, and
give you lots of power.
94:47 - We've seen how to use them
from the command line,
94:49 - and we've seen them used in scripts,
94:51 - but now let's take a look at
94:53 - embedding them in a web application.
94:55 - I've gone ahead,
94:55 - and build the starts of web
application for us to play with.
94:58 - Now, one thing I know I don't do enough of
95:01 - is to compliment my friends,
and family, and even coworkers.
95:03 - Sometimes the web can be so negative.
95:06 - So I was thinking,
95:07 - what if we made a web app
that did the opposite of that?
95:10 - Introducing Complimenter.
95:11 - So the way it works is
you fill out a web form
95:13 - for who you're complimenting
along with their mobile number.
95:16 - You say why they're great,
95:18 - and they get a text message
telling them how great they are,
95:21 - and an encouragement to do the same,
95:23 - and of course they will,
and when they come,
95:25 - and see the messages that have
been sent by everyone else,
95:27 - they'll be pleasantly surprised.
95:28 - Pretty sure we have a viral success here.
95:31 - So if there happened to be any
venture capitalists watching,
95:33 - that's my phone number there.
95:35 - Now if building,
95:36 - and deploying a website
95:37 - feels a little too much
for your current skillset,
95:39 - have no fear,
95:40 - I've created a couple
of repositories of code
95:42 - that we'll be using.
95:43 - We're gonna use a fun,
95:44 - approachable tool called
Glitch to host our websites.
95:47 - The website is basically functioning
95:49 - minus our API that we're gonna add.
95:51 - If you haven't used Glitch before,
95:52 - it's a collaborative community
built around learning.
95:55 - You take existing projects,
95:56 - and you remix them.
95:57 - It has an online editor.
95:59 - So I want you to head over to Glitch.com,
96:01 - and create a user for yourself
96:02 - if you haven't done so already.
96:04 - After you're all set,
96:05 - let's get to adding our
API to the application.
96:08 - First, let's take a look
96:09 - at the Python based web application.
96:11 - We're gonna be using a web
framework called Flask.
96:13 - Flask provides an API that
lets you extend the framework
96:16 - to create your application.
96:17 - This example application
96:19 - is going to be doing
server side rendering.
96:21 - This means that the pages
96:22 - will only be created on the server side.
96:25 - Any change, or navigation will
require a full page reload.
96:29 - In the notes,
96:30 - I've included a link to the repository
96:31 - where I've got our starter code.
96:33 - So go ahead, and copy that.
96:34 - Now I'm gonna open up Glitch.com,
96:37 - and I'm gonna choose New Project.
96:40 - From here I'm gonna choose
Clone From Git Repo.
96:45 - In here, I'm gonna
paste what I pulled out,
96:46 - and I'm gonna do, this
is the one for Flask,
96:48 - so I make sure that's
the one that says Flask.
96:50 - I'm gonna click Okay.
96:52 - I've been having a couple
of problems with this.
96:54 - Sometimes this will just sit here,
96:55 - and say loading project.
96:56 - If it does, just try that
same thing a couple of times.
96:59 - Let's see what happens here.
97:02 - Sorta times out a little bit.
97:05 - I guess it's safe to say
that Glitch is Glitching.
97:10 - Now, that's not fair.
97:11 - There must be some sort of bug
that's happening right now.
97:13 - I'm experiencing it.
97:15 - I'm wanting to record this
97:16 - just in case you run into it
to just do it a couple times
97:19 - if that happens.
97:21 - I do want to point out
97:22 - that it is pretty amazing
what Glitch is doing.
97:24 - It's pulling us over.
97:25 - It's sending up a whole
new environment for us
97:27 - in a web server that can run,
97:29 - and I actually have one
that's up, and running.
97:31 - I did the same thing where
I made a new project,
97:33 - and you'll notice I'm not even signed in,
97:35 - so that's fine.
97:36 - They let you not even sign in,
97:37 - and create these things.
97:38 - Okay, cool.
97:39 - So here we are.
97:42 - Down here under tools,
97:43 - there's a thing called
logs that you can open up,
97:45 - and it will show you what happened.
97:46 - This is what happened though.
97:48 - It's set up our web server here,
97:49 - and you'll see that the
server's actually running,
97:52 - and if you come up here,
97:54 - you can, and click on Show,
97:56 - and the sunglasses here.
97:56 - Your future's so bright,
you've got to wear shades.
97:59 - So you can click View in a New Window,
98:02 - and you'll see that the
application is up, and running,
98:05 - which is awesome, right?
98:06 - And this URL here, this is all yours,
98:08 - you can use it to do whatever.
98:10 - So the application itself,
it's pretty simple.
98:12 - It's just a page with a form,
and this section in here,
98:16 - provides messages when
they eventually come in,
98:18 - but as of right now, we don't have any,
98:20 - because we just erased all those, right?
98:22 - But as of right now,
98:23 - we don't have any way
to send text messages.
98:25 - We don't yet have the
Twilio Helper Library
98:27 - installed in this application.
98:28 - So let's go back over here.
98:31 - So these are the files that
are available over here.
98:34 - So you can see here is app.py,
98:38 - and there's some settings
that you can do up here.
98:39 - You can come in here,
98:40 - you can actually change the name of this
98:41 - to be whatever you want to be.
98:43 - So I'm gonna call this Complimenter
98:48 - and we'll say compliment your friends.
98:55 - Cool, and this is another
nice thing you can do
98:58 - is you can change the theme.
98:59 - I'll put it on dark theme.
99:00 - I don't know when you're watching this,
99:01 - but this should be okay,
both in light, and dark.
99:04 - So there you go.
99:05 - You can also delete this
99:07 - if it's not something that you want,
99:08 - if you ended up creating something.
99:09 - So cool.
99:10 - Awesome.
99:12 - So this app.py, this is our program.
99:16 - Flask works by creating
an object called app.
99:20 - So you do this Flask name,
99:22 - and it creates this thing called app,
99:23 - and then what you can do is
99:25 - you can put different routes in here.
99:29 - So for instance when
we go to forward slash,
99:32 - which is the index page, right?
99:33 - It's gonna do a GET,
99:34 - and it's gonna render this
template of index.HTML,
99:38 - and that is in here under
static templates, index.HTML,
99:45 - and you'll see here, this
is how the page is laid out.
99:46 - There's some dynamic data here.
99:48 - We're using some if,
99:49 - and it's gonna loop through
messages should they exist,
99:52 - and we'll look at how that works here,
99:53 - and then we'll see there's a form
99:55 - that's doing a post to add compliment.
99:57 - Let's look back to app.py,
99:58 - and see how these two line up.
100:04 - So it's gonna come in,
and it's gonna call,
100:06 - get sent messages, and get some
messages is not implemented.
100:09 - I left this here as a to do
so we can fix that as it goes.
100:12 - So, and then it basically
pushes those messages,
100:14 - and sends us an empty list.
100:15 - It will just go.
100:17 - So in here we can see that
there's an add compliment,
100:20 - and it's a happening when a post happens.
100:23 - So it's gonna run this
function when a post happens,
100:26 - and again, that post was
happening from the form,
100:28 - and we'll see what's happening is
100:29 - it's just pulling off these variables is
100:30 - we've got sender receiver compliment
100:32 - that's pulling off a two,
100:35 - and if we take a look
at 'em back out here,
100:39 - if we look at our form, we
will see that we've got,
100:41 - there's the two, and
you'll see the name is two.
100:43 - So that's what's getting pushed across,
100:45 - and their sender, and
receiver, and compliment.
100:49 - So they're pulling us through.
100:50 - It's kind of building a message for you.
100:52 - So sender says,
100:54 - and she's using that F string right?
100:55 - Sender says receiver is compliment,
100:57 - see more at request.URL,
101:00 - and we'll send that message to body.
101:04 - So it's gonna call, send message,
101:05 - and right now send message
is needed to be filled out.
101:09 - So this to do here
101:10 - is actually a pretty good
place to start, right?
101:12 - We need to send the text message,
101:13 - otherwise there's no messages to show,
101:15 - and we know how to send text messages
101:17 - using a RESTful API, no sweat.
101:20 - We can do that.
101:21 - So I could use the Python HTTP client,
101:23 - and write my own messages.
101:25 - That seems like a lot
of extra work, right?
101:28 - So I'm gonna use the
Twilio Helper Library.
101:30 - So in Glitch you can access the terminal
101:33 - from your application by down here.
101:35 - If you go into this clip tools,
101:37 - and you come up here to logs,
101:38 - and then come over here to console,
101:44 - and see that I've now
got a terminal running,
101:46 - which is pretty powerful, right?
101:48 - So I'm gonna type source.
101:52 - and then it's .venv/bin/activate.
101:55 - And remember we had done that before.
101:57 - So we're gonna activate
script now we're activated,
102:01 - and you'll notice that I've
got this this year, this venv.
102:05 - So now I will go ahead,
102:06 - and I'll do a PIP install Twilio.
102:09 - So we'll get down that
Twilio Helper Library
102:11 - so that we can use it in this application.
102:16 - Awesome, so it's all installed.
102:17 - So we should be able to use that.
102:19 - I'll go ahead, and
close this, and it went,
102:22 - and it downloaded everything
that we needed, right?
102:25 - So it got it, but if someone
was to come along later,
102:28 - and use it the way that it
knows what to install is
102:31 - there is this requirements.txt file,
102:33 - and you'll notice the
Twilio stuff isn't in there.
102:35 - This is just got the stuff for Flask,
102:37 - Jinja's part of Flask,
102:38 - and Werkzeug is also part of Flask.
102:40 - It's got just the stuff that was needed
102:43 - so they won't have the Twilio Library.
102:44 - So we want to get the
Twilio Library in here.
102:46 - So the way to do that is
102:48 - let's get back in here into the console.
102:51 - So first again,
102:53 - we're gonna activate
source/venv/bin/activate.
102:59 - Okay, so we're gonna use PIP freeze
103:02 - to show all of the packages
that we have installed,
103:04 - and then we can store its output,
103:06 - and we can do that in
this requirements.txt.
103:09 - I'm gonna go ahead, and do that,
103:11 - and when you make a change in the console,
103:13 - you have to do refresh to
make sure that it shows up.
103:19 - So now if we look in here,
103:21 - we will see that we have
Twilio is now available
103:24 - for whoever comes to use this later.
103:27 - Cool, let's write some Python.
103:29 - Okay, so back in app.py.
103:31 - I'm going to come in here,
103:34 - and I'm gonna say from
Twilio.rest, import Client.
103:42 - So this line here,
103:43 - this load.env will load
environment variables
103:47 - from a secret Glitch file that
I have over here this .env.
103:51 - I started it for you.
103:53 - Now why don't you pause me,
103:55 - and go get your keys,
103:56 - and phone number,
103:57 - and fill this file out.
103:58 - This is kind of like the environments
103:59 - that we saw in Postman.
104:00 - So go get those.
104:02 - Do you know where they're at?
104:02 - Go ahead, pause me,
104:04 - and when you're already unpause me,
104:06 - and I'll show you how I did it.
104:07 - Ready?
104:09 - Okay.
104:11 - So here's how I did it.
104:12 - I wait till my Twilio console,
104:13 - and I copied my account SID,
104:18 - and then I went, and I
went to my Auth Token,
104:21 - and I copied that, and
I pasted that there,
104:24 - and then of course my TWILIO_PHONE_NUMBER
104:26 - is my trial phone number right here,
104:28 - and I'm gonna paste that
here, and save that,
104:32 - except I don't need that.
104:34 - There we go.
104:35 - Cool, so let's flip back to app.py.
104:41 - And if we take a look here,
104:42 - there's a thing called
TWILIO_PHONE_NUMBER,
104:44 - and it's using this os.getemv
104:46 - for a GET environment TWILIO_PHONE_NUMBER.
104:49 - So it's pulling that from here.
104:50 - So in our application,
104:52 - automatically this will be set up.
104:53 - Nobody else can see this.
104:54 - This is your personal information,
104:55 - but here I've got that
stored in a variable.
104:58 - Pretty cool, right?
104:59 - So let's go ahead,
105:00 - and let's create one of
those clients, right?
105:02 - So we'll say client equals client,
105:06 - and here's a little fun fact.
105:09 - If you don't pass any arguments
105:10 - to the client object on creation,
105:14 - it will look in your environment variables
105:15 - for those Twilio underscore values.
105:17 - So like the Twilio account SID,
105:19 - so environment variables
105:20 - are an excellent way to
keep your keys hidden,
105:22 - and not leave them
sitting in the front seat.
105:24 - Check the notes for how to do
that locally on your machine.
105:27 - So now we have an authenticated client
105:29 - that we can use to complete these to-dos.
105:32 - So the first one I think we
should do is tackling that,
105:35 - sending the message, right?
105:36 - That was down here.
105:37 - We're gonna send this message,
105:39 - I'm gonna come in here,
105:40 - and I'm gonna delete
this keyword called pass.
105:43 - And I'm gonna start with
actually, you know what?
105:47 - You got this.
105:48 - Go ahead, and write the
code to send a message.
105:51 - Now don't worry if you
didn't memorize the syntax,
105:53 - I've put links in the notes
105:54 - to the Twilio docs ready?
105:56 - Pause me and write the
code to send a message
105:59 - using the to, the body,
which is come here, right?
106:02 - So we've got the two
in the body coming in,
106:04 - and all you need to do is set the from,
106:05 - and you can set that from
your Twilio number here.
106:08 - If you do it right, and fill out the form,
106:11 - you should get a text
to your phone number.
106:12 - You've got to text your number.
106:14 - So a couple of gotchas in
Python spacing matters.
106:17 - So make sure that you're
indented under the function.
106:20 - See how this is indented here?
106:21 - Make sure you're there,
106:22 - and remember that from, F-R-O-M,
106:26 - from is a keyword in Python.
106:28 - So it's from underscore, right?
106:32 - You ready?
106:33 - Go ahead.
106:34 - Write some code to send
a message, pause me,
106:38 - and then I'll show you how I did it.
106:39 - Ready?
106:40 - You got this?
106:41 - Okay.
106:42 - How'd you do?
106:43 - So here's how I did it.
106:44 - So I use the client,
106:45 - and I use messages create,
and I passed in two,
106:51 - and that's the, what's coming
in from the function there,
106:54 - and the body is also what's coming
106:56 - in front of the function there,
106:57 - and then I had to use from underscore,
107:00 - and I'm gonna say the TWILIO_PHONE_NUMBER.
107:04 - Awesome.
107:07 - And I'm gonna click the
Show in a New Window.
107:11 - Cool, so we're gonna text my number here.
107:13 - So that's plus 1-053-461-5537
107:18 - and we're gonna compliment me.
107:21 - Person to compliment is Craig,
107:22 - we're gonna say Craig, Craig,
107:25 - is completing to-dos
107:30 - and we're gonna send the compliment,
107:32 - and I should get a text.
107:34 - It says that my message was
sent successfully, and awesome.
107:37 - I got it, and now I'm
gonna remove that to do,
107:41 - I'm gonna feel good.
107:43 - I love removing to-do's.
107:43 - There's nothing, nothing better than that.
107:45 - So what do you say we get the next one?
107:46 - Let's do it, we can do this.
107:48 - Make this return a collection of messages
107:50 - that were sent from the number.
107:52 - Should we do it?
107:53 - Let's do it.
107:54 - So get sent messages is used
in this index function, right?
107:58 - So that's what's pulling out the messages.
108:00 - So let's take a look again
real quick at that template.
108:06 - Yeah, so it's saying if messages,
108:07 - if there are any messages
for message in message,
108:09 - write out the message body.
108:11 - So that's gonna just loop
through those messages.
108:13 - So we are going to pass
through the message object,
108:18 - a list of those message objects.
108:22 - So in this GET sent messages,
108:23 - we see that it's an empty array,
108:25 - so that's why it's never showing up.
108:27 - So we want to replace this with a call
108:30 - to get the client call log, right?
108:32 - Do you remember how we did that?
108:34 - Okay, you have the link to the doc.
108:35 - So go ahead, give me a pause,
108:37 - and see if you can't get it.
108:39 - If you get it, and refresh the page,
108:41 - you should see the message,
and recent messages.
108:43 - Ready?
108:45 - Pause me.
108:46 - I'll show you how I did
it after you unpause.
108:47 - You've got this.
108:48 - Okay, this is how I did it.
108:50 - So I used client.messages.list,
108:58 - and remember we could be using an account
108:59 - that has multiple numbers.
109:01 - So we really only want to get the messages
109:03 - that were sent from our Twilio number.
109:05 - So again, that's from with an underscore,
109:09 - and we'll do TWILIO_PHONE_NUMBER.
109:12 - So that's a way of querying that, right?
109:13 - So we're saying we only want messages
109:16 - that were sent to the TWILIO_PHONE_NUMBER,
109:17 - and if I come over here,
and refresh, there it is.
109:21 - Craig says, Craig is completing to do's.
109:23 - See more compliments at HDP
complimentary.Glitch.me.
109:26 - So yours will be whatever yours is there.
109:29 - Pretty cool, right?
109:30 - Great job getting that
application up, and running,
109:32 - because it's actually running.
109:34 - You could totally share that out now
109:36 - by sending a text message
to someone you trust.
109:38 - Wait, well actually, maybe you can't.
109:40 - I seem to remember
something about our accounts
109:42 - being limited verified numbers
only while in trial mode.
109:46 - Now, API limits are probably something
109:48 - that we should look into really quick,
109:49 - since they're pretty common
109:50 - with every API that you might encounter.
109:53 - Let's take a quick detour,
109:54 - and explore some limits,
109:55 - and then we'll get right
back to implementing this app
109:57 - in a full stack JavaScript app.
110:00 - APIs are designed to have limits.
110:02 - As you can imagine,
110:03 - if you were the maintainer
of a web based API,
110:05 - you wouldn't want someone
making millions of requests
110:08 - in a short period of time.
110:09 - The chances are your API server
couldn't support the load.
110:12 - The typical solution to
this is the throttle,
110:15 - or limit the number of requests
110:16 - that you can make per second.
110:18 - Typically these limits are introduced
110:19 - when you get your API keys.
110:21 - If you'll recall on the Twilio console
110:23 - where we got that trial number,
110:25 - we were informed that
110:26 - not only will messages
we send during the trial
110:28 - have that trial text
that we'd been seeing,
110:30 - it also said that we can
only send a verified numbers.
110:33 - What do you say
110:34 - we see what happens if we try?
110:36 - Now, I don't know about you,
110:38 - but I find that having people
that support you in your life
110:41 - to be super important.
110:42 - Now for me, hands down,
that person's my mom.
110:45 - Like no matter what I'm doing,
110:47 - she's just there in the
sidelines cheering me on.
110:49 - Whenever I launch something new,
110:50 - you can pretty much guarantee
110:52 - that she's helped me test it out.
110:53 - So I'd like you to do this.
110:54 - I'd like you to think of
someone like that in your life,
110:58 - and I'd like you to send
111:00 - them a compliment using Complimenter.
111:01 - So I'm gonna add my mom here.
111:03 - So I'm gonna add her number,
111:04 - and that is 1-602-609-5813.
111:12 - So used to just pressing
mom on the phone, right?
111:14 - So I'm gonna say my name is Craig,
111:17 - and I'm complimenting mom,
111:19 - and mom is infinitely supportive
111:23 - as you'll soon see, I'm sure.
111:25 - So obviously you should
put in your friend,
111:28 - or family or colleague here.
111:29 - Here we go.
111:30 - Alright, so I'm gonna
click Send compliment,
111:32 - and ooh, no, internal server error, yuck.
111:36 - Let's go, and look at our logs,
111:38 - and see what happened.
111:42 - So I've got a pretty big stack trace here
111:46 - of what happened on add compliment,
111:48 - and if we come down here,
111:49 - it says the number is unverified.
111:51 - Trial accounts cannot send
messages to unverified numbers.
111:54 - Oh, right, verify.
111:56 - Oh, we can verify them
at Twilio.com/verify.
112:00 - Let's go ahead, and do that.
112:01 - Can I can do that?
112:03 - That's cool.
112:05 - Go to awesome.
112:08 - So now I need to get my
mom's number in here.
112:13 - I need to get her to be
verified so that she can see it.
112:15 - So you can actually do this pretty easily,
112:18 - and what this will allow me to do
112:20 - is to be able to have my trial
account be able to text her,
112:23 - which is all we need, right?
112:24 - So what I'm gonna do
is I'm gonna click Add,
112:28 - and they will call you
with a verification number,
112:31 - or I'm gonna make it text you instead.
112:33 - So what I'm gonna do
is I'm going to put in
112:35 - my mom's number here,
112:36 - put in (602) 609-5813.
112:41 - So what I'll do now before
I click the Text Me,
112:44 - is I'll say, hey mom,
112:46 - I'm texting her this it's me again.
112:48 - Hey, I'm going to verify your number.
112:50 - You're gonna get text from Twilio.
112:52 - Can you send it back to me?
112:53 - And she wrote back.
112:54 - Sure thing sweetie, aww.
112:56 - Okay, so now that I know she's ready,
112:58 - I'll now send that validation message,
113:01 - and so I'll click Text Me,
113:03 - and I will wait for my mom
to tell me what that was,
113:06 - and then she should be
able to send me the code.
113:10 - Okay, so she texted me,
113:12 - and that number is 946541,
113:17 - and then I click Submit.
113:18 - Awesome, so now my mom is verified.
113:20 - Here she is.
113:21 - She's in this verified numbers.
113:22 - Now I can text her now
let's go try that again.
113:25 - Let's get back to this
internal server error,
113:29 - and I'm gonna refresh.
113:30 - Reload that, and it's gonna say
113:33 - you're gonna submit the forming,
113:34 - and that's totally fine.
113:35 - That's what I want it to do.
113:36 - It's actually what I want it to do,
113:37 - and we say continue, and boom, we did it,
113:40 - and my mom should get
a message, and she did.
113:44 - She just sent me an emoji heart.
113:47 - I hope you're now able
to show off your app
113:49 - to your supportive person.
113:51 - It's really nice to have that
support as you're learning,
113:54 - and building things.
113:55 - If you don't have someone like this.
113:56 - My mom's pretty supportive.
113:59 - If you want to just text her,
114:00 - I bet she'll shoot you back
some words of encouragement.
114:03 - No, of course this app
isn't gonna go viral
114:05 - in this trial mood,
114:06 - but this is a great
prototype of the concept.
114:08 - Most of the time APS
will give you a chance
114:10 - to get your prototype together
114:12 - before they start charging you,
114:14 - but being aware of the limits
114:15 - will help you plan your efforts.
114:17 - Remember to carefully read the
limits, and error messages.
114:19 - Most API will guide you into
how to deal with limitations.
114:23 - Now let's get started with
114:24 - a JavaScript based
implementation of Complimenter.
114:27 - Now we're gonna implement
114:28 - that same Complimenter application,
114:30 - this time using JavaScript.
114:32 - I've got a full stack JavaScript
application mostly built,
114:35 - and ready for us to tweak.
114:36 - By full stack JavaScript,
114:37 - I mean the server is
written in JavaScript,
114:39 - and there's some front end code
114:40 - that's also written in JavaScript.
114:43 - On the server side,
114:44 - the application uses Node.js,
114:45 - and the web framework express.
114:47 - On the front end I've used the
client side framework view.
114:51 - The Python version that we saw
earlier was all server side.
114:54 - There is some things to
consider when implementing
114:56 - a client side application
when using an API.
114:58 - So let's explore those
115:00 - while we get this JavaScript
prototype up, and running.
115:03 - In the notes,
115:04 - I've supplied a link to the repo
115:06 - that you can use to create
the new Glitch project.
115:08 - Go ahead, and copy, and paste that.
115:10 - I'm gonna click Clone From GET Repo,
115:11 - and then I'm gonna paste the repo.
115:14 - Alright, so we're gonna
do the Node version.
115:17 - So this is Node,
115:18 - and again, if Glitch takes a
while to spin up, that's okay.
115:23 - It might eventually show up,
115:26 - or it might Glitch out,
115:28 - and if it does Glitch out like this,
115:30 - like sometimes I might
just say the assets folder,
115:32 - just go ahead, and do it again,
115:34 - and it'll eventually work for you.
115:36 - Awesome, here's mine working.
115:39 - The JavaScript version of
this project is implemented
115:42 - as a very simple Single
Page Application, or SPA,
115:45 - and what that means is that
once the page is rendered,
115:48 - the client will responsible for
rendering parts of the page.
115:51 - We won't rely on a full
page reload from the server
115:54 - to load new pages for us.
115:56 - Let's take a look at app.JS
115:59 - the server side of our application.
116:01 - So we're gonna look at app.JS.
116:04 - So let's see this first .env here.
116:07 - This will load up our
environment variables,
116:10 - which we'll take a look
out here in a second.
116:13 - Then it's using express,
116:14 - which is a web framework,
116:17 - and you'll note that it's
exposing static files
116:20 - in a public directory.
116:21 - So this is a single page application,
116:23 - and it's rendered in publicindex.HTML.
116:25 - Let's take a look there, Publicindex.HTML.
116:30 - So this here is the view dependency.
116:34 - If you haven't seen
view before, no worries.
116:35 - This is a pretty
straightforward way of using it.
116:38 - So what View does is it
uses these V dash, right?
116:42 - So it's these V dash attributes,
116:44 - and those are view specifics.
116:46 - So basically this is saying
116:46 - if the compliments that
length is greater than zero,
116:49 - and we'll see how compliments
is defined here in a bit,
116:52 - and as you can see if it does exist,
116:54 - it's gonna loop through
each one of the compliments,
116:56 - and then it's gonna write them out.
116:58 - So it's gonna write them out
117:00 - using that double mustache syntax here.
117:02 - So it's gonna write out
117:03 - the compliment that's in this loop.
117:05 - Okay, so that compliments variable
117:08 - is initialized in our application.
117:10 - Let's scroll down to it.
117:13 - I've put the whole application
in one single file here.
117:16 - So we don't need to worry
about packaging, or anything.
117:19 - So the way that you create a new view app
117:22 - is by saying new view,
117:24 - and you can see here
there's this data attribute,
117:27 - and as you'll see,
117:28 - compliments is initialized
as an empty array.
117:33 - You can add instance
methods to your application
117:35 - by adding a methods object
in the view constructor.
117:40 - So we have a method here
called refresh compliments.
117:43 - Now you might not have seen this before,
117:45 - but if you've had a hard time
117:47 - keeping track of promise
based codes in the past,
117:50 - this feature here is the one
that you've been waiting for.
117:55 - You'll see here that the keyword async
117:57 - is before the name of the function.
117:58 - So it says async refresh compliments.
118:01 - Once a function is
labeled as asynchronous,
118:03 - you can now cause functions
that return promises
118:06 - to behave synchronously.
118:07 - Meaning they don't move
on to the following line
118:09 - until it completes.
118:10 - So this line here makes a fetch, right?
118:14 - So fetch returns a promise,
118:16 - but there's a keyword here
of oh wait, right before it,
118:21 - and this code will wait for
the fetch call to complete,
118:25 - and then assign the future value of
118:27 - whatever this is into the response.
118:30 - In the same is true here
118:31 - response that JSON returns a promise,
118:33 - and this will wait until this is done.
118:36 - One thing to note is
that this async function
118:40 - makes it so that refresh
compliments now returns a promise.
118:44 - That is it's return value
will have a then method
118:47 - that returns this value.
118:49 - Now if that doesn't make sense just yet,
118:52 - just you await it will.
118:54 - Just try, and let it all async in.
118:58 - A dad joke, double whammy.
119:00 - Sorry, I'm kind of obligated
119:01 - to make all these jokes.
119:02 - Really though, most devs that I talked to
119:04 - find this async await
119:06 - more straightforward to use than promises
119:09 - for code that's actually
synchronous in nature.
119:11 - Alright, so what is this code doing?
119:15 - So it's making a GET request.
119:16 - Fetches default method is a GET
119:20 - to a URL of /API/Compliments.
119:24 - So that's in our server side code.
119:26 - Let's flip back to here to app.js,
119:29 - and you define routes with
express using this app.GET.
119:33 - So whatever the HTTP method name is.
119:35 - So app.GET/API/compliments,
119:37 - that's what we saw.
119:39 - So when that happens, this
function here will run,
119:43 - and we'll pass in the request,
119:44 - and the response,
119:45 - and here's our first to do
119:47 - so we want to get the message log.
119:49 - So first before we do that,
119:51 - we better install the Twilio
Helper Library using NPM.
119:56 - So I'll click on Tools,
119:58 - and then I'll click on this logs,
120:01 - and then I'll click on Console.
120:05 - Now I'm gonna run NPM
install, install Twilio,
120:11 - and I'm gonna do --save.
120:15 - What that will do is it
will update a file called
120:17 - Package.JSON after it installs,
120:22 - and this is much like we
saw in the Python library,
120:25 - we did the freeze, this
--save will update that file
120:28 - so that the Twilio dependency is there.
120:33 - We'll let this complete.
120:41 - Awesome, and so now when you
make a change from this side,
120:44 - we always need to say refresh
120:45 - so that we can refresh the project,
120:46 - and see the changes that we made,
120:48 - and so if we look in
here under package .JSON,
120:52 - you can see that there is
a dependency of Twilio.
120:57 - Great, so now that we
have things installed,
121:00 - let's go ahead and update
the in the .env file.
121:03 - So that's this key.
121:03 - See this little key.env here?
121:05 - This is gonna allow us to
put our information in here.
121:08 - So I'm gonna go ahead,
121:09 - I'm gonna grab my account SID.
121:12 - You should do the same with yours,
121:13 - and grab my Auth Token,
121:17 - and last, but definitely
not least my phone number.
121:27 - Alright, and now we can
use that in our code.
121:32 - Let's go right above this port.
121:34 - Right below this port here.
121:35 - We'll make a new Twilio client,
121:41 - and we'll require,
121:46 - actually that probably looks better
121:48 - up top a little bit more.
121:49 - Let's move that.
121:53 - Let's do that right.
121:56 - This is all out of
alphabetical order, isn't it?
121:59 - Let's do this right here.
122:01 - Here we go, and then
we can instantiate one
122:04 - that will look better down here.
122:06 - So I'll say const client
equals new Twilio client,
122:09 - and again, it's gonna pull
from the environment variables
122:12 - of the Twilio underscore,
122:14 - and just to show you how you do that here.
122:17 - So we'll say const the
TWILIO_PHONE_NUMBER.
122:20 - If you ever wanted to
122:22 - pull something else
out of the environment,
122:23 - you use process.env.thething.
122:27 - So the thing was called Twilio,
122:30 - I think it's called phone number.
122:31 - Let's double check TWILIO_PHONE_NUMBER
122:34 - and env.TWILIO_PHONE_NUMBER.
122:36 - Yeah, cool, awesome.
122:39 - So let's get that message log.
122:41 - So what I'm gonna do is
I'm gonna replace this.
122:45 - So we're getting the compliment.
122:46 - So we're getting sent messages.
122:48 - So this to do get a list of messages
122:50 - sent from a specific number,
122:53 - obviously Twilio number there.
122:55 - So what I'm gonna do is
122:56 - I'm gonna replace this array with my code,
123:01 - and actually you want to give this a spin?
123:04 - Well, one thing to note
123:05 - is that the function is marked async.
123:07 - So you can, and you probably should use
123:10 - the keyword await, right?
123:11 - So this is an async function.
123:12 - So make sure you use the await keyword.
123:14 - Are you ready?
123:15 - Just make the call to the messages API
123:17 - to get a list of messages
123:18 - that were sent to a specific number.
123:20 - Like the to-do says.
123:22 - Don't worry if you
don't have it memorized,
123:24 - I put a link to the docs in the notes.
123:26 - Go ahead, and pause
me, and give it a shot.
123:28 - When you unpause me, I'll
show you how I did it.
123:30 - Ready?
123:31 - How'd you do?
123:32 - So what I did was client.messages.list,
123:41 - and in the JavaScript
Client Helper Library,
123:43 - you pass in an object with the parameters.
123:47 - So we say from not a key word here,
123:50 - and we'll say TWILIO_PHONE_NUMBER,
123:54 - and like I said, we should
make this be a wait,
123:57 - because we're gonna
wait for that to happen,
123:59 - and boom, just like that of that to do,
124:02 - well, why don't we change?
124:05 - Why don't we take a look, let's go.
124:06 - I'm gonna change this to
be Complimenter of a mentor
124:13 - that's not very nice to Complimenter.js.
124:22 - Compliments, I'm gonna close
that, and let's go ahead,
124:26 - and we'll do show
124:27 - when we should see the
messages come through.
124:29 - Oh, we shouldn't see the
message come through yet, right?
124:32 - Because we aren't
passing anything through.
124:33 - We're passing down these compliments.
124:35 - Alright, let's see.
124:36 - Let's see if we can get
this next to do done them.
124:39 - Gather only the body of those messages
124:41 - for sending to the client.
124:42 - Okay, oh right, because
we don't want to send
124:45 - down the whole message
object to the client.
124:47 - So what we want to do,
124:48 - the API is called compliments, right?
124:52 - And we have an array of text messages.
124:54 - So more importantly though,
124:57 - if I were to send down this message,
124:59 - each one of those messages,
125:00 - it contains a bunch of informations
125:01 - that I don't think we want
to share with everybody.
125:03 - That message has the phone number
125:04 - of the people who sent the message.
125:06 - I should never send information
125:07 - that I want to keep
safe down to the client.
125:10 - So really we only want the body.
125:12 - So let's see, I have an array,
125:14 - and I want a new array
of just message bodies.
125:17 - Now to me, this sounds like a great use
125:19 - of the array.map function.
125:24 - So sent messages is an array.
125:25 - We'll say sent messages.map,
125:30 - and the map function,
125:32 - map takes a function that will receive
125:34 - each value in the array.
125:36 - So that will be a message,
125:39 - and it takes a function,
125:43 - and if it's on one line,
125:44 - we can skip the return keyword,
125:45 - and just put what we'd like to see.
125:47 - So this compliments array,
125:49 - we want to see the array
of message.body, right?
125:55 - So what this is saying is like
125:56 - for each of these messages in here,
125:58 - just return the message body,
125:59 - and put it in compliments.
126:01 - Makes sense, and then it's gonna send down
126:04 - the JSON representation of
that to our view client.
126:07 - Should we see if it works?
126:10 - Alright, we'll save this,
126:11 - and now, oh, there we go.
126:13 - It's working already.
126:14 - So we'll see.
126:15 - There's a new one from my mom,
126:18 - and it says, mom says,
126:20 - Craig is so proud of you, sweetie.
126:22 - Oops, it's nice, it's sweet.
126:24 - She wrote back, and
that's what I love about
126:26 - having someone use your applications.
126:27 - It looks like I still
have some UI work to do
126:29 - to make it more clear
about what's happening,
126:31 - because my mom wrote
126:32 - so proud of you sweetie in the compliment,
126:34 - and that doesn't make much
sense, but I feel nice,
126:38 - and again this is using the number,
126:40 - this was not sent from this app.
126:41 - You can see it was sent
from the Python app, right?
126:43 - This is Complimenter.js,
126:44 - but this is using a different data source,
126:47 - and you know what?
126:48 - While we're here,
126:49 - why don't we look at how easy it is to see
126:53 - what the data was that was
sent down from the server?
126:55 - So I'm gonna right click,
126:56 - and I'm gonna choose Inspect.
127:02 - I'm gonna click on this Network tab here,
127:06 - and I'm gonna refresh the page,
127:08 - and you'll see it make that request.
127:10 - So if I click on this Compliments here,
127:13 - you can see here is the message.
127:14 - Here's that array that
was sent down, right?
127:16 - You can imagine that if we sent
down all of those messages,
127:19 - we'd have that data very easy to get.
127:22 - So again, this is the developer toolbars
127:25 - if you say View,
Developer, Developer Tools,
127:28 - you'll be able to see this.
127:32 - I'm gonna take a quick break,
127:33 - and then I'm gonna swing right back,
127:34 - and finish up the remaining to do,
127:36 - creating a new compliment.
127:37 - (calming electronic music)
127:52 - We just finished displaying a
list of all the compliments,
127:55 - and now it's time to deal with
127:56 - how they get added on the JavaScript side.
127:59 - So let's keep the front end code,
128:01 - and see what happens.
128:02 - So that is in publicindex.HTML.
128:07 - So here's that form.
128:09 - Alright, so we have this it's
a form that goes to post.
128:12 - It goes to /add compliment,
128:14 - and it's got these V dash models.
128:17 - So here's like V dash, model
two, Videsh model sender,
128:20 - and that's how view does data binding.
128:23 - So anything in that field will
be bound to that variable,
128:27 - and if we come down to the button here,
128:34 - we will see that the
normal click, it won't,
128:37 - it will prevent, right?
128:38 - So that prevents it from being submitted,
128:40 - and it calls this send compliment method,
128:43 - which is defined in
the method stanza here,
128:46 - which is this send compliment.
128:51 - Okay, so it goes ahead,
128:52 - and it grabs the stuff from the form
128:54 - so it pulls them all off.
128:57 - They also happen to be the same,
128:58 - it's in a thing called
data, then it uses fetch,
129:02 - and it uses it synchronously, right?
129:04 - So it's got an a wait, it's
gonna wait for fetch to go,
129:06 - and it passes That as JSON,
129:11 - and were saying that it is JSON,
129:14 - and we're passing JSON up,
129:16 - and we're doing a post request,
129:19 - and let's go ahead, and
we'll take a look in app.js,
129:21 - and we'll see here that we're
using this body parts here,
129:23 - so any request that comes in
will automatically get parsed,
129:27 - and the way that that looks is a,
129:29 - so here's this post, right?
129:30 - So here's, we failed, we fixed this get,
129:33 - and we got to get rid of these two do's.
129:34 - Forgot to erase those.
129:35 - Those are to-done.
129:37 - Alright, so it comes in here,
129:39 - and it's posted to API compliments,
129:42 - again, an async method.
129:44 - So it's gonna pull off of
the request body too right?
129:49 - So, and because of the body was parsed,
129:51 - it's automatically inflated here.
129:53 - So body the two,
129:54 - it's gonna pull the two off of the field,
129:56 - and request that body sender,
129:57 - or Costa biosphere, very compliment,
129:59 - and it's using the Bactec
130:01 - so it's automatically filling those out.
130:05 - So here we are.
130:06 - Here's our to do.
130:07 - Why don't we just synchronously
create that message?
130:10 - Well, you want to give this to do a try?
130:12 - Go ahead, pause me.
130:13 - I put links in the notes,
130:15 - I'll await for you to unpause me,
130:18 - and then show me how you did it.
130:20 - How'd it go?
130:21 - Here's how I did it.
130:22 - So we want it to be synchronous.
130:23 - So I'm gonna go ahead, and use await,
130:25 - and I don't really need anything
from the create a message,
130:28 - so I'm not gonna assign a return value,
130:32 - and I'll use the fact that
the parameters are the same.
130:35 - So I'm gonna say
client.plant.messages.create,
130:43 - and in JavaScript you can do this.
130:45 - If you have a variable named two,
130:47 - it will just set 2:2 from embody, right?
130:53 - So this is just basically,
130:54 - because there is a variable called two,
130:56 - it knows to make a new one
called two in this array here.
130:59 - Alright, so let's give that a go.
131:01 - So I will go ahead, and click Show Here,
131:07 - and I'm gonna send another one to my mom.
131:11 - To mom, no, my name's not mom.
131:14 - Well my name's Craig,
131:15 - and I'm gonna compliment mom.
131:17 - Her compliment is a really patient tester.
131:24 - Mom is a really patient tester.
131:27 - So here we go.
131:29 - Yep, there it is.
131:30 - So see right away it came back,
131:31 - and you'll see that the forms cleared.
131:33 - So let's see how it did that.
131:38 - So back in the index.HTML we have this,
131:43 - we posted it, and it got back the data,
131:45 - and it awaited for the result,
131:47 - and then it wrote out the result,
131:49 - and we saw this information come down.
131:51 - So we could actually,
131:52 - if we wanted to,
131:53 - we could do View,
Developer, Develop Tools,
131:58 - and we should see in the console.
132:00 - Here's the object that got sent back.
132:02 - So it was a success of false.
132:05 - Now, we forgot to update that, didn't we?
132:08 - I'll have to look.
132:10 - I thought we looked at that.
132:11 - Now, if you're gonna say, yeah,
132:13 - that was a successful journey there.
132:15 - Good job.
132:17 - Glad we caught that.
132:18 - Speaking of catching stuff,
132:20 - what happens if things go wrong?
132:21 - So much like before when we
needed to capture the error
132:25 - using the catch method on promises,
132:27 - we need to do something similar
in this async await land.
132:31 - So we need to use a
standard try catch block.
132:34 - Now if you haven't seen that before it's,
132:37 - it's pretty straightforward.
132:38 - What you do is you say try,
132:40 - and if any error at all is thrown
132:45 - what will happen is it
will call this catch block,
132:48 - and it's a good way to handle errors.
132:52 - So we're gonna catch that error.
132:54 - So the error object has a status,
132:57 - and you can send that down to the client
132:59 - by saying response.status,
and we can do error.status.
133:03 - We'll just pass that
status straight through,
133:05 - and this is changeable.
133:07 - So we'll send JSON,
might as what happened.
133:10 - So we'll say success is
false for real this time,
133:13 - and we'll also send,
133:15 - why don't we send the message,
133:17 - we'll send that error error.message.
133:24 - There we go, and you know what?
133:26 - We can use prettier here too.
133:28 - So we're gonna click
this format, this file.
133:30 - Let's make this thing prettier.
133:31 - Ooh, nice.
133:35 - Okay, so we're going to try,
and if there is a failure,
133:38 - we're gonna send this back,
133:40 - and then otherwise we're gonna go ahead,
133:41 - and send down the success of true.
133:43 - So we got to break it somehow.
133:46 - How should we do that?
133:47 - Let's say instead of from,
let's make this be 42,
133:50 - the meaning of life, and everything.
133:52 - So that is obviously not a
valid TWILIO_PHONE_NUMBER.
133:56 - So let's go ahead,
133:57 - and let's bring up Complimenter,
133:59 - and I'm just gonna oh, it did refresh.
134:02 - I was gonna refresh it, and it did for me.
134:05 - So we'll send another message to my mom.
134:07 - My name is Craig to my mom,
134:09 - and the compliment is
good at catching errors.
134:19 - Okay, and I'm gonna
click Send a Compliment.
134:21 - Let's see what happens.
134:23 - Oh look, so here we got the error.
134:24 - It's a 400 that came back,
134:26 - and the from phone number 42 is not valid.
134:29 - CMS capable, or inbound number,
134:31 - or short cover from your account
is a better version of it.
134:34 - Cool, right?
134:36 - And let's make sure we don't
leave that in that state.
134:38 - So we'll undo that, and save it,
134:39 - because I want my mom to
give me another compliment.
134:42 - Again, we are good to go.
134:45 - Awesome job.
134:46 - You've now used an external API
134:48 - in two completely
different web frameworks,
134:50 - and paradigms even.
134:51 - you should be sending a
compliment to yourself.
134:54 - You're accomplishing great things.
134:55 - Way to stick with it.
134:56 - One other thing I'd like
to take a quick moment
134:58 - to point out is that the
server code that we wrote,
135:01 - you might've noticed it was prefixed
135:03 - with a /API server code
135:06 - that interfaced with a client.
135:08 - Now here's my question to you.
135:10 - Do you think that the API code
135:11 - that we wrote together
should be considered RESTful?
135:14 - Why don't we take a look at our
135:16 - weathered scavenger hunt card?
135:18 - So it's definitely a
Client-Server Architecture.
135:21 - Our client happens to be,
135:22 - in this case, a view application
running in the browser,
135:24 - and our server is a Node.js server,
135:27 - but any client could
connect, and use this.
135:30 - It's definitely Stateless, right?
135:31 - We aren't requiring any prior
knowledge about the client.
135:34 - Well, at the moment we aren't providing
135:36 - any caching information
so we could, right.
135:38 - We could fairly easily pay attention
135:41 - to those headers coming in,
and respond appropriately.
135:43 - It would require us writing
some additional code,
135:45 - and thinking through some edge cases,
135:47 - but we could do it.
135:48 - Let's put this in the maybe column.
135:50 - Yeah, for sure, right.
135:51 - In fact, it's a little layered already.
135:53 - Our API is calling another API,
135:56 - but our client doesn't need to know that.
135:58 - We could also add
additional functionality,
136:00 - and the contract wouldn't change.
136:02 - We haven't even talked about this one yet,
136:04 - and it's the only optional requirement.
136:07 - Now basically this means
your API returns code
136:09 - that is runnable,
136:10 - like maybe it returns
an embeddable widget,
136:12 - or some actual JavaScript code.
136:14 - This doesn't make sense
on our application,
136:15 - and that's okay.
136:17 - I'm gonna drop this one in the no,
136:19 - so we're looking good so far,
136:20 - but here comes the doozy.
136:22 - So remember this one has
four subsections, rut row.
136:25 - Currently we're just representing
136:27 - all the complements as strings,
136:29 - and absolutely no way to identify them.
136:31 - So we fail this sub requirement,
136:34 - and therefore this thing is a no,
136:37 - but let's keep going
through the rest of these.
136:40 - Pun intended, sorry.
136:41 - We definitely do not allow
136:43 - any sort of manipulation of compliments.
136:45 - So this is another fail.
136:47 - We haven't gone over this yet,
136:48 - but by using headers we
can tell that this is JSON.
136:51 - The message sent down has a type,
136:53 - and it is clear that it should
be JSON decoded to be used,
136:56 - and last, but certainly not least,
136:58 - Hateos, or Hate OS is an
often forgotten about part
137:05 - of the RESTful constraint,
and very hard to say.
137:08 - The idea here is that
there are links provided
137:10 - to show off what more
you could do with this,
137:13 - and where you could
find related resources.
137:15 - It provides URIs, or links.
137:17 - We did see this in both the
Spotify, and Twilio ones.
137:20 - However, ours doesn't
need to provide links
137:22 - to other resources.
137:24 - So we don't have a RESTful API,
137:26 - and that's okay.
137:27 - It works as is.
137:28 - It does look like we could
get there pretty quickly
137:30 - if we wanted to.
137:31 - One thing I want you to
gain from that exercise
137:33 - is that you now have the
ability to identify whether,
137:36 - or not an API is RESTful,
137:37 - and I hope that felt pretty good.
137:39 - We've now completed that scavenger hunt.
137:41 - We revealed all the constraints,
137:43 - and I hope that most of
those are pretty clear.
137:45 - Please don't feel like you
need to memorize those.
137:47 - You can find these same constraints
137:48 - littered all over the internet
137:50 - as a prize for finishing the
constraint scavenger hunt,
137:53 - I've dropped links to my favorite
137:54 - REST API constraint
documentation for you to lean on.
137:57 - I've also included links to
popular REST API frameworks
138:00 - that will help you design RESTful APIs.
138:02 - Make sure to check the notes.
138:04 - You did it.
138:05 - You just completed a whirlwind
introduction to APIs,
138:08 - and I hope you see how much power
138:10 - they can add to your programming journey
138:13 - by looking at interfaces in general.
138:15 - I hope you're more
comfortable with the idea
138:17 - of not fully understanding
exactly how something is working,
138:20 - but still leaning on that abstraction
138:22 - to build your tools, and applications.
138:24 - We do this all the time with
physical object interfaces,
138:26 - and APIs,
138:27 - or Application Programming Interfaces
138:29 - aren't all that different.
138:31 - I hope you enjoyed taking this course.
138:33 - I know I had a ton of fun making it.
138:35 - If you think someone you know
138:36 - might benefit from this
course, share it with them.
138:39 - I'd love to hear your feelings,
138:40 - your thoughts, and your dreams.
138:41 - So I threw together a little something
138:43 - using a smattering of API's
to capture your feedback.
138:46 - If you've got the time,
138:47 - I'd love to have you answer
a quick text based survey.
138:50 - Text feedback to 1-503-461-5537.
138:55 - Actually, you know what?
138:56 - If you want to, you can also just call,
138:58 - and leave me a message too.
138:59 - I used an API for that too.
139:01 - Please, please, please keep
me posted on your journey,
139:04 - and really I can't wait
to see what you build.
139:06 - Thanks for hanging out.
139:08 - (calming electronic music)