00:09 - hey everybody welcome to live-streaming
00:13 - with Jessie today we're gonna start new
00:16 - projects and we're gonna use react 16
00:20 - which just came out recently what was it
00:24 - last week it was pretty recently so
00:29 - there's some cool stuff in react 16 I
00:31 - haven't even gone through all the new
00:33 - stuff yet so we'll definitely be
00:35 - learning about that together we use
00:40 - create react app just like we did for
00:42 - the last project and we'll probably end
00:45 - up using Redux and react router as well
00:48 - so some new stuff definitely haven't
00:55 - done Redux before on the stream so
00:57 - that'll be cool and then some of the new
00:59 - react 16 stuff we'll be using I want to
01:04 - show you a kind of a preview of what the
01:06 - end result is going to be and and then
01:09 - we'll get started so this is definitely
01:11 - starting from scratch you can see my
01:15 - terminal here there's nothing I've done
01:17 - nothing - to set this up yet other than
01:21 - have node and NPM and yarn installed on
01:26 - my machine other than that it's pretty
01:30 - much from scratch so let me check I have
01:33 - some comments here in the live chat
01:36 - okay so Shay says congrats on your
01:39 - completing your Redux project I hope
01:41 - you're feeling better today how you
01:44 - doing okay so a few of your asking how
01:46 - how I'm doing so if you saw my tweet
01:49 - yesterday
01:51 - so yesterday I didn't stream so sorry
01:52 - about that I intended the stream but I
01:54 - saw a doctor in the morning who went
02:00 - over my MRI result so last we got an MRI
02:03 - dad to inject some fluid into my wrist
02:05 - and then do the MRI and basically they
02:09 - could tell that in my wrist
02:12 - there's the
02:13 - section of your wrist that has like this
02:15 - triangular formation of ligaments and it
02:19 - holds some bones in place and so those
02:22 - ligaments in my wrist are torn so that's
02:26 - what's been wrong with my wrist since
02:27 - what sometime in July I think I know
02:30 - I've complained about it several times
02:32 - on the strain so anyway so that's what's
02:36 - wrong with my wrist I went to go see a
02:38 - surgeon yesterday afternoon but
02:41 - unfortunately I drove up from where I am
02:46 - to place near Pittsburgh and drove all
02:51 - the way there and found out that they
02:53 - don't take my insurance so I have to
02:56 - wait now until November until that
02:57 - doctor is in Ohio because if that same
03:01 - doctor sees me in Ohio my insurance will
03:04 - work but if I see that doctor at another
03:07 - state it will not work so I don't know I
03:10 - guess that's just how it is but it was a
03:13 - waste of a trip and I missed my
03:15 - livestream so disappointed about that
03:19 - but so I'll probably end up having to
03:21 - have surgery on it at some point the
03:26 - doctor that I talked to yesterday
03:27 - morning said it should just be like
03:29 - really small incisions so hopefully that
03:34 - works out all right
03:34 - said if I decide not to get surgery
03:37 - it'll be okay it'll just hurt and then
03:39 - eventually I'll get arthritis so I
03:42 - figure surgery is probably the way to go
03:44 - especially if I plan on typing on a
03:47 - keyboard for the rest of my life all
03:51 - right so enough enough about the wrist
03:54 - but I appreciate all the concern that
03:56 - that you all have shown on Twitter and
03:59 - in here and everything so all right I
04:03 - got some new people in the live chat so
04:05 - welcome thanks for joining and all right
04:11 - Blake just submitted his first PR
04:14 - awesome congratulations okay
04:20 - all right so let's get started let me
04:28 - I'm gonna start this and we'll do we're
04:33 - gonna do 25 minutes of coding well we're
04:35 - not really gonna code that much at first
04:37 - we're gonna be doing some commands on
04:38 - the command line to get it set up we're
04:40 - going to do that for about 25 minutes
04:41 - that's going to include me going over
04:43 - what the the project requirements are
04:45 - and then we'll take a five-minute break
04:48 - do question-answer we're going to do at
04:50 - least two sessions of coding maybe three
04:52 - and we're going to work on this probably
04:57 - not everyday I got some other projects
04:59 - going on as well so we're gonna switch
05:01 - it up we're going to go back to project
05:02 - one do some updates but whenever I get a
05:05 - chance I do want to come back to this
05:07 - and do this project so there's not
05:09 - there's not a hard deadline on this
05:12 - project but it's something that I think
05:16 - that it does need updated so I'm just
05:18 - going to work on it as I as I can okay
05:22 - so this is the objective here last year
05:27 - so quite last summer so the summer of
05:30 - 2016 I spent working on this this
05:35 - bulletin so our old University bulletin
05:38 - was a Word document sent by email so
05:44 - this is definitely an upgrade from that
05:46 - it allows us to put in we put in videos
05:50 - a lot more pictures just a lot more
05:53 - content in general without having to
05:56 - have this really giant word document
05:59 - easier to handle attachments so it
06:01 - definitely benefits also there's now a
06:03 - record of everything that's ever been in
06:05 - the bulletin and it's all searchable so
06:08 - our project basically is going to pull
06:10 - from the WordPress API like we did with
06:13 - with project one so it's gonna pull
06:16 - posts from the WordPress API and display
06:19 - them we have two different display
06:22 - options well actually more than two so
06:24 - we have this grid view or the list view
06:27 - we also have a print view because a lot
06:31 - of people missed that they didn't
06:33 - the word document so I added the print
06:35 - UN basically vice-presidents this stuff
06:38 - are used to having their secretaries
06:40 - print out the bulletin forum and put it
06:42 - on their desk so I got some calls from
06:45 - secretaries administrative assistants
06:47 - that we're asking hey I want to be able
06:50 - to print this out so that's why I did
06:51 - the print view also we have the classic
06:54 - mode which was put in there for people
06:57 - who are nostalgic for the old style and
06:59 - this is pretty much as an exact replica
07:02 - as I could get of the old bulletin it's
07:05 - the same font and so you know the word
07:11 - doc mint style so basically those are
07:14 - the views so it's going to have four
07:15 - different views it's gonna have a place
07:18 - to submit announcements and that
07:20 - includes a file upload which we've done
07:23 - before so no big deal we can filter by
07:26 - date we have all the you know categories
07:28 - that we can filter by we're gonna have a
07:31 - Help section which right now just has
07:34 - some some text and some embedded YouTube
07:38 - videos that I made and that's that's
07:43 - about it it does have a an infinite
07:48 - scroll function so you keep scrolling
07:50 - down it just keeps loading new bulletin
07:54 - posts so anyway that's that those are
07:58 - the requirements things that will change
08:00 - will definitely go with a new look like
08:02 - we did with the Resource Center so we'll
08:06 - have the new logo you know the white
08:08 - header up here one thing that will be
08:11 - different is it you know the sidebar is
08:14 - always open on large screens so this
08:18 - school I do want to redo this once I
08:19 - redo this and react I think it would be
08:21 - really cool to also redo this in react
08:24 - native so that's a possibility
08:27 - not sure if I could convince my boss
08:30 - that that's really a priority but it
08:32 - would be cool if we could do it the
08:34 - other requirement is and this is the big
08:37 - deal that's been giving me kind of a
08:40 - headache right so it was decided that
08:43 - you would need to login to
08:46 - be able to see this but we did a survey
08:49 - and users so it's just this an internal
08:52 - site so users here at the University did
08:54 - not want to have to remember another
08:56 - password to login so I set up a password
08:59 - list login system where if they put in
09:02 - their University email address they will
09:05 - get an email they click the link in the
09:07 - email it logs them in and then it saves
09:09 - the login credentials and local storage
09:11 - and that will persist unless they choose
09:15 - to log out or empty you know their their
09:19 - local storage and their browser somehow
09:24 - for a year they'd stay logged in but the
09:28 - problem has been it for some reason some
09:32 - you know some users do empty out their
09:35 - local storage frequently and that's why
09:38 - they have to keep logging in but some
09:39 - users seem to have to log in way more
09:42 - frequently than once a year so it's been
09:45 - kind of annoying to them and I in some
09:48 - cases I've been able to find why it does
09:51 - that but it's kind of it's difficult I
09:53 - have to actually go around to each
09:55 - computer do troubleshooting that's and
09:59 - there's not really been one common issue
10:00 - so that's something that I'd really like
10:05 - to I'd like to find another way to have
10:09 - people log in without having to put in a
10:12 - password so some sort of password this
10:15 - log in the university is at the end of
10:18 - this month they're supposed to implement
10:19 - a single sign-on system it'd be great if
10:23 - I can integrate it with that and that's
10:25 - part of the reason why I want to
10:26 - redesign this because if I'm gonna go
10:28 - into this right now this is just jQuery
10:30 - it's not react if I'm gonna go in and
10:31 - make major changes to how the login
10:33 - system works then I don't want to mess
10:35 - around with all that jQuery which I'm
10:38 - sure is probably a mess I mean I I made
10:41 - it all so it's my own fault but I don't
10:44 - want to go back in and mess with it I'd
10:45 - rather just redo it now as react with
10:48 - react and then that way when we
10:52 - implement the system I can try to
10:54 - integrate it into there I still I need
10:57 - to talk to the people in the ITB
10:59 - Department that are in charge of that
11:01 - and and see what's possible or I'm not
11:04 - even sure how they're doing their their
11:06 - single sign-on I don't know if it's like
11:08 - LDAP system or Active Directory so I
11:12 - have to I still have to find out some
11:14 - more things so we may not have to do our
11:17 - own login system hopefully we can just
11:20 - use that system but for now we don't
11:23 - really have to worry about that we'll
11:25 - just build out the UI pull in the the
11:27 - posts from the WordPress API and it
11:33 - shouldn't be too hard all the big
11:35 - decisions are pretty are made already
11:36 - right all you know how the UI works all
11:39 - the views so I usually when I start a
11:43 - project I don't think it'll be too hard
11:45 - but we'll see we'll see how it goes all
11:50 - right so first things first and also
11:54 - once we get to the end I want to go over
11:56 - a few pull requests I've got in so try
11:58 - not to let me forget that when we do our
12:00 - final question and answer session at the
12:02 - end I'll start out by going over some of
12:04 - the pool requests so let's go into my
12:08 - projects folder that's where I keep
12:11 - everything and let's uh we have create
12:20 - react app installed right let's bring up
12:25 - the documentation first so that everyone
12:29 - can see what we're doing and can follow
12:30 - along
12:31 - so let's fine there we go react up
12:42 - okay
12:54 - I wonder if I need to update create
12:58 - react that I don't know so I'm gonna do
13:07 - oops
13:13 - I don't know if I've ever done this with
13:15 - your anthea is it update now I can't
13:21 - remember
13:22 - well back and forth from NPM and yarn
13:31 - it's
13:35 - coffee in pace whoops I didn't need the
13:41 - coffee and taste that part okay all
13:49 - right this is what I wanted to copy I
13:53 - think I have this maybe I didn't have it
13:58 - installed globally
14:02 - all right good thing I did that
14:09 - okay cool all right so now we'll run
14:16 - create react app let me make this a
14:18 - little bit bigger so everybody can see
14:26 - it and it's call this bulletun react
14:41 - okay so that's step one well really step
14:45 - two step one was install create react
14:47 - app globally we do it globally right
14:50 - because we haven't even made the project
14:52 - right so we want to be able to use this
14:54 - to create you know even the project
14:56 - folder and everything so now it's gonna
15:01 - do its thing so create react app is now
15:04 - installing obviously react web pack you
15:08 - know all the dependencies that it needs
15:10 - and there go done not bad under 30
15:13 - seconds so you can see there's a lot of
15:15 - stuff here so it's pretty awesome all
15:17 - this stuff gets installed and it's ready
15:20 - to go it's ready for us to write you can
15:22 - see the instructions here not that hard
15:25 - like right now if we type the orange
15:29 - start we have an app so actually let's
15:33 - do that I'm sorry whoops I got a seat
15:40 - all right we got to go into our project
15:42 - folder it's amazing how many times I do
15:49 - that when I start a project like this I
15:51 - forget to CD into the actual project
15:55 - folder so let's type in yarn start and
16:01 - this should start up so I have a lot of
16:04 - other stuff running right now so it's
16:07 - not gonna run on the default local hosts
16:09 - I did not want it to run in that window
16:14 - Olo if you can see right now it's it's
16:18 - running right so we're using react so
16:22 - it's that easy that I mean technically
16:24 - we have reacts up and running it's
16:27 - working it's just a default but I mean
16:29 - that was pretty pretty fast alright so
16:32 - let me go back back over to where we
16:34 - were let's get this running
16:37 - was that 3001 yeah okay all right so
16:42 - obviously we're gonna remove a lot of
16:45 - this stuff but let's find our there we
16:51 - go so we want to I'm using I turn to and
16:55 - I'm gonna duplicate the tab so I have
16:57 - this other tab now since I'm running the
16:59 - server on this tab I can't really do
17:01 - anything there so I have another tab
17:03 - that's in the same folder and now in
17:06 - this tab this is where we're gonna run
17:10 - everything so I think we'll probably
17:15 - let's do a little bit before I actually
17:17 - make this a git repo I really don't like
17:20 - to make something to get repo right off
17:22 - the back cuz some of the early steps to
17:23 - set things up or just so basic I I don't
17:26 - know for me it's just like white clutter
17:29 - up my repo with some of that that stuff
17:31 - alright so I do want to open up Adam so
17:37 - I'm going to use Adam for this project
17:38 - as my editor in it open on the wrong
17:42 - screen so let me pull this over it's my
17:48 - other screen I hope that my machine can
17:57 - handle all this I just have so many
17:59 - projects open right now let's see
18:06 - there we go and make this fool screamed
18:10 - for now all right so here's our project
18:14 - you can see in our package.json we have
18:17 - react 16 okay really basic right now
18:25 - we're gonna pull in a lot of things we
18:26 - have some basic you have set up things
18:29 - that we do that we've been doing for all
18:31 - of our projects on the stream so our
18:35 - basic linting you Auto formatting with
18:37 - prettier standard jazz we're definitely
18:39 - going to bring that on we're gonna bring
18:42 - in react router we're gonna bring in
18:44 - Redux yeah so what you know why don't we
18:50 - we bring in all that stuff now and we'll
18:53 - set that stuff up before we even work at
18:56 - all on on any of the UI so I actually
19:07 - think I think I remember most of these
19:11 - most cities commands so I don't think I
19:14 - have to look up the documentation for
19:15 - some of these since I've been using
19:17 - using these and my my other side
19:21 - projects lately so they should be able
19:23 - to just do yarn add react router Dom
19:32 - okay so if we're using it for the web
19:36 - we won't react router Dom there's other
19:38 - versions of react router for react
19:40 - native so I'm gonna make sure we get the
19:43 - right version and then also we want
19:46 - redux actually I pretty sure it is Redux
19:50 - but I do want to double check to make
19:52 - sure that that is the correct thing so
20:00 - we had I don't know like a month or so
20:04 - ago there were NPM packages that were
20:08 - named like slightly different than the
20:11 - the normal package sisters posted on
20:13 - load and actually had malicious code in
20:15 - it so now I know I had double check
20:23 - there we go
20:25 - Redux on my other screen house trying to
20:28 - look up Redux yep
20:30 - it is Redux okay alright alright so this
20:36 - is gonna install that alright awesome so
20:44 - that was really fast that's confirmed
20:48 - right we now have Redux
20:51 - we have react router dawn great while
20:55 - we're at it let's bring in prettier and
20:59 - standard Jas right we don't really have
21:01 - that much by way of code but we may as
21:03 - well bring it in right off the bat and I
21:06 - found before if I work on a project for
21:09 - a while and then bring in standard Jas
21:12 - and prettier and we in husky and we auto
21:16 - format then I get a lot of errors and it
21:20 - takes it's a lot harder to work through
21:22 - that so if I bring it in right off the
21:23 - bat then I make little changes and tests
21:26 - so it's a lot easier to catch the errors
21:28 - and work through them so and the code is
21:32 - just cleaner right off the bat otherwise
21:35 - it ends up being a mess after a while so
21:38 - let's bring that in and for that I'm
21:40 - just gonna go to let me find the project
21:44 - where I'm already using it so this is
21:47 - resource center okay so yep we're using
21:49 - this in the resource center already
21:51 - let's check out our package.json and we
21:56 - will need this part of it so we're gonna
21:59 - need I'm gonna copy as much of this as I
22:03 - can
22:03 - let's copy this this copy goodness
22:09 - alright so we have a lot of stuff here
22:11 - we're not gonna copy everything I should
22:15 - say we're not gonna keep everything will
22:20 - be our
22:22 - we'll copy it and then take out what we
22:24 - don't need just copy this for now and
22:32 - put this down here so right now we don't
22:37 - need I made all of these right we're
22:43 - gonna leave State in there
22:54 - we're gonna need that eventually so
22:56 - we'll probably need these at some point
22:58 - so I'm just gonna leave them in here
22:59 - this is gonna make sure we don't get
23:01 - errors from using these oops copied one
23:07 - extra curly oops I forgot a comma
23:16 - okay there we go I love syntax
23:22 - highlighting helps to find errors so
23:25 - quickly you know immediately I saw red
23:27 - there and I knew like I never see red in
23:30 - the package.json with with the color
23:31 - scheme that I have so I just knew a use
23:36 - never I just don't realize how much it
23:39 - helps until I try to do something
23:40 - without it and then it's just like just
23:45 - so hard to look at code with without
23:47 - highlighting okay so we have this you
23:52 - don't need see we're not gonna run
24:00 - and there's do we need node fetch
24:04 - probably at some point we'll need it I'm
24:08 - gonna take that nightmare for now we may
24:10 - end up using this for testing at some
24:13 - point but right now I'm gonna leave it
24:17 - off probably need this okay we need okay
24:30 - that looks good I'm not sure about all
24:33 - of these that we need but that's close
24:36 - enough we'll probably want to do as well
24:39 - is update these so we'll do that too
24:44 - now we don't have ships let's find a
24:52 - project with
24:55 - [Music]
25:01 - that's let's look we have a lot more
25:04 - going on here with our scripts but at
25:09 - least we can find the lint and
25:12 - pre-commit and
25:24 - let's see that might be enough just to
25:26 - get us started
25:28 - so lint is gonna run all of this then we
25:34 - commit I actually need to grab
25:58 - actually may be good with that to start
26:05 - test without watch we're not gonna run
26:07 - I'm not gonna run the test because we
26:13 - didn't bring that in yet so okay that
26:16 - should be good enough there may be some
26:18 - other stuff in here that we'll want to
26:20 - bring out bring in after a while but
26:24 - this is quite enough right now all right
26:27 - so I'm gonna save that and then we're
26:29 - gonna run yarn and that's going to
26:34 - install whoa I got an error unexpected
26:40 - token so have something in here that
26:45 - should not be here
27:21 - mm-hmm
27:38 - I think it's that one you can't have a
27:42 - trailing comma yep that was it
27:53 - so that'll run if you didn't catch that
27:56 - I've had this happen to me several times
27:59 - the last item in an array or in an
28:05 - object can't have a comma or else you
28:08 - get an error okay cool
28:16 - so that looks like it works but what I
28:19 - also want to do since it's possible that
28:23 - some of these packages have received
28:25 - upgrades since we started the last
28:27 - project I just want to upgrade them
28:29 - right now before we get too involved it
28:32 - should be easier to find any any issues
28:36 - with them before we have other things
28:40 - going on so I think it's a yarn upgrade
28:48 - it's either yarn upgrade or yarn updates
28:51 - all of your dependencies are up-to-date
28:54 - okay cool
29:02 - I'm actually really surprised by that is
29:05 - that the right way okay that's not it
29:10 - that must be it must be the command I
29:13 - just really thought that there would
29:15 - have been some newer versions of these
29:21 - okay it's possible that I did update
29:24 - that project recently and I just don't
29:26 - remember okay so let's see what we have
29:31 - all right we have we do have some
29:33 - JavaScript files in here already that we
29:35 - can try to run the lint on and see if it
29:40 - changes anything so to run lint
29:53 - URL is not defined in this Service
29:57 - Worker all right so let's add that so
30:00 - this is why we have this down here this
30:02 - global so you can pull this out into a
30:04 - separate file which I've done some times
30:07 - but our package JSON is really not that
30:10 - big so I don't mind putting it in here
30:13 - for now if it got huge I would
30:15 - definitely pull it out though okay
30:25 - all right great so it ran through it see
30:30 - if it moved anything around I don't
30:33 - really remember what that looked like
30:34 - well enough to know if it moved anything
30:36 - around but we'll see an action later on
30:39 - as we as we do more okay so that's the
30:42 - end of the first Pomodoro session we
30:44 - have react we're an create react apps we
30:46 - have react installed with all the cool
30:48 - stuff that comes along with create react
30:50 - app we have installed Redux and react
31:01 - router we have Auto formatting and
31:06 - linting of our code with prettier
31:09 - standard j/s husky so every time we go
31:13 - to commit right we have this pre-commit
31:16 - hook now that will run our linter so it
31:24 - will run lint stage down here in lint
31:26 - stays on any javascript file it will run
31:32 - prettier
31:33 - right we have some some parameters here
31:36 - some flags here for what we want no
31:38 - semicolons we want single quotes and
31:41 - this will actually fix it it's not just
31:44 - gonna get less warnings it'll it'll
31:45 - change our code which is awesome so
31:47 - we'll have a standard style even if you
31:50 - you know get once we make this a get
31:53 - repo if you were to clone this and
31:55 - commit it would all be formatted the
31:56 - same and and then we'll do a git add so
32:01 - let me make sure components all right
32:05 - this should all work all right awesome
32:07 - so let's do our five-minute
32:09 - question-and-answer session and then
32:13 - we'll come back in we do a little bit
32:16 - more and we'll make this a we'll put
32:20 - this on github
32:21 - before we end as well and then that way
32:23 - if you want to review it or if you want
32:27 - to just kind of copy it when it's at
32:28 - this early stage and use it as like a
32:31 - boilerplate that would that would work
32:33 - too okay
32:36 - well I have quite a lot in the live chat
32:39 - already well we have a we have a lot of
32:42 - viewers so awesome so imagine there's
32:45 - probably some new viewers welcome I'm
32:48 - going five minutes a question and answer
32:49 - now but if I don't get to your question
32:51 - don't worry about it I'll get to them
32:52 - later on so at the end whatever I
32:55 - haven't got to I'll go through at all
32:57 - and I'll answer all the questions so if
32:59 - you have a question to stick around and
33:01 - I will get to it okay so right now I'm
33:07 - just scanning through the live chat
33:08 - looking for any questions
33:21 - okay so also some helpful comments I'll
33:24 - read out as well I see a lot of you
33:25 - you're saying hi and what's up so hey
33:27 - everyone so James says I believe that
33:32 - single sign-on is going to be the best
33:34 - bet
33:35 - I agree I agree I'm hoping that I'm
33:38 - gonna have a meeting about it on Friday
33:39 - and I'm gonna ask more about the
33:41 - possibility of linking up the bulletin
33:43 - to the single sign-on system I hope that
33:46 - goes through I want to get out of the
33:49 - business of handling login issues
33:51 - because I've gotten quite a few calls
33:53 - and emails about this and it just takes
33:55 - up a lot of my time so I think the IT
33:58 - department is more well suited to handle
34:00 - that they have a help desk and a
34:02 - ticketing system and you know actual
34:05 - like employees whose job it is to take
34:07 - calls like that and so that's not really
34:10 - what my job is although I've been doing
34:12 - that because I I want my stuff to work
34:14 - and I'm upset when it doesn't work but
34:18 - yeah definitely
34:20 - definitely think the single sign-on will
34:23 - be the best way to go
34:25 - let's see Fernando says are you using
34:27 - JSON P what do you use to fetch JSON P
34:30 - data now it's just it's regular JSON
34:32 - it's not JSON P so I use fetch so
34:37 - currently in the current jQuery version
34:40 - of this it's all client-side so
34:43 - client-side fetch in this version that
34:46 - we're gonna make with react I'd like to
34:48 - do everything server-side or at least I
34:51 - should say this I don't know that I need
34:54 - to do everything server-side potentially
34:56 - we could do some calls client-side I
34:58 - don't need this to be rendered
35:00 - server-side at all so we'll see how it
35:04 - goes
35:15 - I see dentist that said you just
35:18 - installed it again to update so awesome
35:20 - thanks I didn't look up to see you so
35:21 - that but that was definitely the what I
35:24 - was what I was wondering about Kevin
35:30 - says in response to the JMP question is
35:35 - that Jason fees will work around four
35:38 - cores so the cross origin request if you
35:44 - use your own API or one with cores
35:47 - header like the WordPress API then you
35:49 - don't need to worry about JSON T yeah
35:51 - that's that's spot-on right there yeah
35:54 - so since we have we are going to use the
35:56 - WordPress API we don't have to worry
35:59 - about that let's see okay Kevin also
36:07 - said Jesse will probably use native
36:09 - fetch with the polyfill fallback yep
36:11 - exactly
36:17 - Harshit says try using password list npm
36:20 - module for password this authentication
36:22 - okay cool I'll have to check that out I
36:27 - was I have been checking out some
36:29 - different options right now I'm using
36:31 - auth0
36:33 - to handle the password this stuff but I
36:38 - think I do want to switch to something
36:40 - else I mean all 0 is nice
36:43 - but the plan there their level of their
36:50 - plan right now I'm using the free
36:51 - version of of--there because there's not
36:53 - that many users but to get integration
36:56 - with the single sign-on I'd have to jump
36:58 - up to their business plan and it's just
37:01 - not worth it for that much money every
37:03 - month for an internal bulletin so I
37:07 - think you know we're going to try to go
37:09 - with something else let's see
37:19 - all right so I'm gonna mark down where I
37:24 - left off at the live chat okay so I did
37:38 - look up on my other screen the password
37:41 - list NPM package so I'm going to leave
37:43 - that on my screen so I don't forget and
37:44 - check that out after the stream so
37:47 - thanks for that
37:48 - Harshit and okay so let's get back to
37:52 - coding
37:53 - I just never the less comment I just
37:55 - noticed was just joined and while
38:03 - insurance in the US isn't that case so
38:06 - yeah I don't really know how it's like
38:07 - what it's like in other countries but
38:09 - here
38:10 - yeah insurance is weird in terms of
38:14 - which where you can go basically you're
38:19 - kind of limited so depending on what
38:21 - surance you have insurance you have you
38:22 - may not be able to go to a certain
38:24 - doctor that you want to go to or
38:26 - hospital and I mean you could always go
38:30 - there and just pay on your own but
38:32 - that's a lot of money so yeah but I mean
38:37 - the good news is I will go to see the
38:38 - doctor that I want to go see I just have
38:40 - to wait a little bit longer so and it's
38:44 - not I mean I'm not gonna be in serious
38:48 - trouble by waiting another month
38:49 - I've already been waiting I've already
38:52 - been dealing with this for several
38:54 - months not that big of a deal okay so
38:59 - the next step so yeah this will running
39:04 - what's our next step oh let's let's hook
39:08 - up Redux into our app and also react
39:16 - router right we don't really have
39:18 - anything set up for routes but let's
39:21 - just get this all hooked up now
39:24 - and so we're gonna want to go to our app
39:29 - I'm actually gonna bring up I'm gonna
39:35 - bring up on my other screen and oh I'm
39:38 - going to github right now and I'm gonna
39:41 - check out that last Redux project that I
39:44 - did on github that I showed everyone was
39:48 - it this I guess last week I showed
39:49 - everyone and that is the Udacity react
40:00 - and the readable projects said it yeah
40:06 - okay so if you if you want to check out
40:10 - where I'm getting the code from since I
40:12 - just implemented Redux with react router
40:15 - um I'm not going to try to go through
40:17 - documentation again I'm just gonna look
40:19 - at what I did and so this is it and this
40:23 - will be probably the last project that I
40:26 - worked on from my own github account so
40:30 - let's check out our source folder and I
40:37 - think it's an abscess yep this is it
40:44 - alright so I'm gonna move this over so I
40:46 - can copy and paste more easily but like
40:52 - I said you can check that out if you
40:54 - want okay so in our app dot J s that's
41:01 - in our source folder and I'll make this
41:05 - a little bigger for you all
41:06 - so in our source folder we are going to
41:10 - bring in a bunch of stuff so I'm gonna
41:16 - copy and paste a bunch and then I'll go
41:17 - through about what all these things are
41:25 - and we'll end up taking out some stuff
41:28 - eventually like you know logo dot SVG
41:31 - things like that
41:32 - but for right now it's fun to keep it in
41:34 - so here's what we brought in browsing
41:38 - router route and switch from reactor
41:41 - outer dome okay may or may not use all
41:45 - these we can remove the stuff we don't
41:47 - need
41:47 - we're gonna import create store apply
41:50 - middleware and compose from redux all
41:54 - right obviously and if you've done this
41:56 - before this is kind of basic but for
41:58 - those of you who are new to react it
42:02 - might be helpful if I kind of go through
42:04 - these we're importing now right now we
42:07 - don't have reducers right so we're gonna
42:11 - have to make that but we're gonna want
42:13 - to bring that in and we're gonna import
42:15 - provider from react redux and are
42:21 - we gonna actually I don't know if when
42:23 - you dunk or not you think yeah we might
42:32 - end up needing so I should bring that in
42:35 - so probably what I'll need to do is is
42:37 - pull these in so I don't get errors so
42:44 - let me check the package.json for this
42:47 - project see what else I need what I
42:52 - forgot to bring in and I did I forgot to
42:58 - bring in a few packages so let's do that
43:02 - right now so the yarn and we need react
43:10 - redux
43:11 - and redux thunk
43:21 - there we go okay
43:33 - make sure didn't miss anything else
43:38 - okay
43:42 - so now those will load well yeah we'll
43:47 - let that do its thing yep coming in so
43:53 - let's go back over here and continue to
43:59 - add these and and right now normally we
44:03 - would import our views so I'm just gonna
44:05 - put some of this here so we don't forget
44:07 - to import our views and just see what we
44:10 - would what we do here so you don't have
44:12 - to do this in your app dutchess if you
44:15 - don't have that many views I think it's
44:17 - fine but otherwise you could have like a
44:19 - routes component where you put all your
44:22 - routes in so we may move it into another
44:24 - component at some point but for now it's
44:26 - it's easier to see it all at once like
44:28 - this so we would bring in for each like
44:31 - page or each you we wanted we would
44:33 - import it so we've imported that
44:36 - component for now we don't have any of
44:41 - these created so I'm gonna comment all
44:43 - of them out and then let's bring in
44:53 - this alright so we're gonna use this
44:57 - logger okay so we want okay we want more
45:02 - than just the basic redux right we want
45:04 - to bring in some tools to help us figure
45:07 - out what's going on with our store so
45:09 - that's where is this some of this comes
45:11 - in so this is optional but very helpful
45:14 - I don't I wouldn't really want to work
45:17 - with redux without some of these tools
45:18 - to help I'm pretty new with redux maybe
45:21 - you know if someone's more advanced with
45:23 - it they wouldn't need it but I
45:25 - definitely need some of this stuff so
45:27 - this this logger we're gonna get a bunch
45:30 - of stuff in our console also let's bring
45:36 - in let's let me bring in a few things
45:41 - here okay so this is going to be our dev
45:50 - tools extension and I think I showed you
45:55 - all that extension last week and we'll
45:57 - definitely see it again as we work on
45:59 - this project but this is very helpful
46:01 - it's gonna add another another tab onto
46:04 - our dev tools window and we're gonna be
46:09 - able to see a lot of information about
46:10 - our store right so while this is
46:14 - definitely useful this is more user
46:17 - friendly so probably not necessary to
46:21 - have both maybe one or the other I think
46:25 - especially in development more
46:26 - information is better but I could
46:30 - definitely see especially with this your
46:32 - console can get quite cluttered so may
46:35 - not be a bad idea to get rid of this if
46:38 - you're trying to hunt out like other
46:39 - errors and it's just too cluttered but
46:42 - definitely keep this one okay and then
46:46 - here we're actually creating our store
46:49 - now here's the thing we are not bringing
46:52 - in that reducer yet so we're gonna at
46:55 - least need to create the file and I'm
46:59 - not sure if it'll be enough just to
47:01 - create the file or if we'll still get
47:03 - errors but I mean we're definitely gonna
47:04 - get in an error
47:06 - nothing there at all and then this is
47:12 - where we pull in our middleware so we're
47:15 - bringing in right
47:18 - our logger thunk our Redux dev tools
47:23 - right so ringing thunk from here bring
47:26 - in our logger from here ok let's go down
47:32 - a little bit further so we need to wrap
47:34 - everything in provider so that way our
47:43 - application has access to the store
47:49 - right so now everything is wrapped in
47:52 - that now since we're also using react
47:58 - router we're gonna wrap everything in
48:01 - browser router as well
48:15 - okay so right now we don't have routes
48:20 - but potentially we could have a setup
48:23 - something like this where inside of here
48:27 - we don't actually have you know whereas
48:30 - right now we have markup for our
48:33 - homepage we would get rid of all the
48:35 - markup there and inside of this would
48:38 - just be our browser router and then
48:40 - switch in and all arouse you can see our
48:42 - home page becomes a component our home
48:45 - component right and here's our other
48:47 - views so we'll probably end up building
48:50 - something like this for now it's not
48:52 - necessary we'll have to take a look and
48:56 - just think about all the different
48:58 - routes that we want and then we'll set
49:01 - those up okay so I'm just gonna look
49:07 - through here quickly just to make sure I
49:09 - haven't missed anything oh we need to
49:12 - make our our reducers right so let's do
49:17 - that now or at least make our reducer
49:23 - folder so we're just gonna make on a
49:29 - command line we're gonna make directory
49:31 - so mkdir to make directory I haven't
49:37 - done this on Windows for a while is it
49:38 - the same on Windows I'm on a Mac right
49:41 - now it's the same one Linux I know there
49:43 - are some differences in command line
49:46 - commands on Windows but having done most
49:51 - development on Windows so it's actually
49:54 - been at least two years now so don't
49:57 - remember all the differences so anyway
49:59 - our gonna make directory we're gonna
50:00 - call it reducers oops we want it to be
50:04 - in our source folder and then and then
50:08 - reducers okay now we're also going to
50:11 - make a file so we're gonna do touch is
50:15 - how you make a file we're going to
50:17 - source reducers and then we want to call
50:22 - this index
50:25 - oops index dot J us not a CMO okay so
50:31 - now we should be able to see reducers
50:34 - index all right so let's save that see
50:38 - if we get any errors yep we got an error
50:41 - what's going on here expected the
50:46 - reducer to the function okay so I'm not
50:49 - I do need to do a little bit more than I
50:52 - have done with the reducers so let's see
50:59 - what's this what's the least I can do
51:01 - and every reducer
51:08 - let's see
51:24 - let's see dishes
51:45 - so I'm look at my other screams Jennifer
51:48 - yeah what's the minimum I could write in
51:50 - my reducer at this point
52:08 - oh let's just do this let's find a
52:13 - producer and let's see if we can get
52:18 - away with doing okay so at first we
52:23 - definitely want to export when we're
52:29 - gonna want to bring in combined reducers
52:31 - some of us will just do it right now
52:46 - okay so we're bringing that in so we can
52:48 - have more than one reducer we don't have
52:52 - any actions set up right now so normally
52:54 - you would import your actions as well
52:56 - but I don't have that set up this is the
52:59 - thing about Redux that's was frustrating
53:01 - to me when I first did it is that it
53:03 - doesn't really work unless you have
53:04 - reducers your store your actions all in
53:08 - place so we'll see I'm not even sure if
53:11 - this will work unless I put in some
53:12 - actions but let's see basically we're
53:17 - definitely going to need posts so let's
53:22 - see if we can get posed let me make sure
53:34 - I didn't miss something up here okay a
53:41 - function and we want this to be say
53:56 - she posts uh name at that for now we
53:59 - could always change it we're gonna make
54:00 - this state
54:05 - so just by default we'll have just an
54:09 - empty object for the state and then you
54:12 - know what I think I am gonna have to
54:13 - pull in the action we'll see we might
54:17 - not so anyway here's our action so we'll
54:21 - pull in here is our state as a default
54:24 - so this is a default parameter so if
54:29 - there is no state passed in it will
54:31 - default to this otherwise it will take
54:33 - whatever state we pass in and then
54:36 - inside of here we want a switch
54:38 - statement and we want action type okay
54:44 - so if you haven't worked with Redux
54:46 - before this probably doesn't make very
54:47 - much sense but what we're gonna have is
54:49 - another file called actions we're going
54:51 - to import that into there based on what
54:54 - the type of action is we're gonna want
54:56 - to do something different in this
54:58 - function so that's what we're that's
55:00 - we're pulling in so if let's say if the
55:09 - case is I don't know get posts and I'm
55:18 - open to suggestions for naming because
55:20 - I'm just trying to name what whatever I
55:23 - can hear based on what I think we'll
55:25 - need we don't need this break so if the
55:28 - case is get posts let's return and we're
55:36 - gonna run a return state and then we're
55:43 - gonna run to turn this house
55:51 - those see
56:03 - see how I'm not really sure what I'm
56:07 - naming everything right now so we'll
56:08 - just put that in there for now I think
56:11 - that should work
56:11 - we'll see we'll get an error if it
56:13 - doesn't and then we're just going to
56:15 - return state by default so for right now
56:24 - we shouldn't get anything because we're
56:25 - not actually passing in anything so it
56:28 - should just return nothing for the state
56:32 - and then down here actually since we're
56:37 - combining reducers let's do this and
56:43 - we're gonna do is I am gonna want to
56:48 - have sorting maybe a sort function or
57:01 - filter
57:06 - let's have some sort of sorting and for
57:12 - now I'm just gonna leave that sorting
57:26 - okay that'll probably make sense later
57:30 - but I want to keep basically information
57:37 - about how we're gonna sort the the posts
57:41 - I'm gonna keep that in our store and
57:44 - then that way it can persist across
57:49 - across components across use more easily
57:57 - okay now let's export for defaults
58:11 - combined so this is where that combined
58:13 - reducers comes in combined reducers and
58:18 - [Music]
58:19 - now we can put together our receive
58:23 - posts and our sorting
58:31 - okay
58:34 - let's save that and see what kind of
58:36 - errors we get get post or not to find so
58:39 - sorting okay let's define those then we
58:43 - I think we are gonna have to make our
58:46 - actions as well but that's not a big
58:49 - deal we may as well set the whole thing
58:50 - up now and it'll be kind of a more
58:53 - complete explanation of everything
58:55 - so let's import when we say get post and
59:03 - [Music]
59:06 - what else do we wanna get those and set
59:10 - sorting from we're going to say actions
59:22 - okay so yeah right so we don't have
59:26 - actions so now let's make a folder
59:28 - called actions so let's go back here
59:33 - actions and also I'm going to make file
59:45 - our actions and
59:48 - [Music]
59:52 - now let's make some actions and let's
59:59 - put it over here put them side-by-side
60:03 - so we can remember what's going on here
60:14 - okay so we're going to eventually we may
60:20 - have some API calls happening for now
60:25 - I'm not gonna worry about that but what
60:28 - we do want to do is export so we want to
60:33 - exports okay and so now we're going to
61:02 - use these constants instead of the
61:03 - strings down here also obviously here
61:08 - right so let's go
61:23 - so this is going to be good Oh schools
61:35 - oh s--- and in here we're gonna make an
61:48 - object and we're gonna send out it so
61:49 - this is where the type comes in so you
61:51 - can see over here we want to get action
61:54 - type here's the type so this is where we
61:58 - want to put get posts all right so
62:02 - that'll let this reduce or know what we
62:05 - want to do and then we're gonna pass in
62:10 - our posts okay and we want to do the
62:18 - same thing for a sorting
62:26 - so sorter that we called it was it
62:32 - sorting set sorting set sorting and
62:40 - let's go sort by and sort okay let's see
63:00 - I caught it sorter huh let's just
63:03 - changes here loser okay so you can see
63:10 - in both cases what's gonna get sent from
63:14 - here now this is not everything right we
63:20 - actually I wonder if I can make it work
63:23 - just like that normally I would do more
63:26 - it might actually work let's just see if
63:30 - this works enough to get this to load
63:32 - awesome so it actually did load so now
63:35 - at least I can show you in dev tools a
63:41 - Redux panel okay so obviously our state
63:46 - right so we have two parts to our state
63:48 - we have that received posts and we have
63:51 - sorting right and that corresponds to
63:54 - what we've done here receive posts and
63:57 - sorting right now they're just empty
64:02 - arrays or I'm sorry empty objects if
64:05 - I've been saying arrays that was on
64:07 - accident these are objects apologize for
64:09 - that right so right now that's the end
64:14 - of a 25-minute session so I'm gonna do
64:16 - five minutes of questions but just to
64:17 - summarize we've got Redux connected here
64:24 - at the root of our our app here we have
64:28 - Redux connected we've added some
64:30 - middleware so we have some console
64:31 - logging going on with our store we have
64:35 - our extension for depth
64:38 - and we have thunk which we aren't using
64:40 - yet but we probably will use later on we
64:45 - also brought in react router although we
64:48 - haven't done anything with routes yet
64:50 - it's all ready to do we've set up our
64:54 - reducers and we set up some actions ok
64:59 - now we're not entirely finished with our
65:02 - actions but it's set up enough so that
65:04 - we don't get errors and we're able to
65:07 - see our state so not bad we've come a
65:13 - long way and in our two 25-minute
65:17 - Pomodoro sessions so let me start my
65:23 - five-minute timer and I'm gonna go to
65:27 - the live chat and answer some more
65:29 - questions all right so I'm pretty behind
65:34 - on the questions thanks for your
65:36 - patience if you're waiting for me to
65:38 - answer your question
65:48 - okay Harsha said if you are using yarn
65:50 - for everything try using yarn Global for
65:53 - global packages actually I should do
65:56 - that I don't know why I used NPM and
66:02 - didn't think about using yarn globally
66:03 - anyway see John Hansen says yarn start
66:10 - is the easy part
66:11 - yes yeah this is all kind of the easy
66:15 - part for right now okay Harshit sis
66:36 - saying you forgot react Redux so thanks
66:39 - for that I didn't see that beforehand
66:41 - eventually I did figure it out though
66:42 - but thank you for for putting that in
66:45 - the left shot for me Ishmael says how
66:51 - can I get what he's copying I don't have
66:52 - the project actually here let me put
66:59 - this on the screen again because this
67:00 - was a different project so let's let me
67:04 - let me copy I'm gonna put this link in
67:11 - the live chat right now and maybe I'll
67:17 - put it it I'm gonna try my best to
67:20 - remember afterwards to put it in the
67:21 - description so that the link I just
67:24 - paste it in is where I was copying a lot
67:26 - of this from this is a redux project
67:29 - that I did for my Udacity nano degree I
67:31 - just finished it up last week actually I
67:37 - did I just finished it up over the
67:38 - weekend I think so Saturday I finished
67:41 - it sorry if there is just a noise my mic
67:47 - fell over so hopefully it's alright now
68:01 - okay Kevin asks if I've used atoms get
68:04 - integration no I haven't used it yet
68:06 - I'll have to try it out this so if
68:10 - anybody does use atoms get integration
68:12 - what do you think about it is it is it
68:15 - better than using you know a separate
68:19 - like terminal to handle all your get
68:21 - stuff I wonder so you get how
68:33 - interesting you can create a repo right
68:35 - from here cool
68:37 - I'll have to play around with that later
68:40 - on
68:50 - Patrick caught that trailing comma
68:52 - before I did too so thanks Patrick good
68:55 - eye on that one
68:57 - let's see Blake asked how long does it
69:00 - take to run create react app I think
69:03 - what it took almost 30 seconds to do it
69:07 - I'm sure it depends on your computer but
69:11 - it was pretty pretty fast
69:21 - oh okay thank you so harsh it says use
69:27 - yarn upgrade with a flag latest so I'm
69:31 - gonna do that now
69:41 - it's always interesting when this
69:43 - happens to see if anything breaks we try
69:47 - to use latest but at the beginning of
69:49 - the project is definitely the time to do
69:51 - something like that so it looks like
69:54 - only one what wood has been updated is
70:01 - in Craig food it looks like a lot of
70:03 - warnings and so I guess a lot did not
70:09 - need to be updated
70:17 - hmm
70:20 - okay
70:36 - bread says I typically just watched
70:39 - Jesse's live streams and don't try to
70:40 - follow along maybe make some notes on
70:42 - paper when I do create the project I
70:44 - watch the video and pause if I get stuck
70:46 - ok cool I actually like hearing how how
70:49 - people watch these I know some people
70:52 - have said that they go back and like
70:55 - they watched the recording on like 2
70:58 - times speed somebody even said they
71:00 - watched it on four times speed before
71:02 - and then I know some of you work on
71:06 - other projects and just kind of listen
71:07 - in the background and joining the live
71:09 - chat you know if you hear something that
71:11 - you know you're interested in so that's
71:14 - kind of cool
71:15 - I mean I know these it's not like the
71:17 - normal coding tutorial video or anything
71:20 - like that so I think it's cool that
71:23 - there's different ways to handle this
71:27 - live stream alright so my 5 minutes is
71:30 - up and let's see ok so I marked down
71:44 - where I stopped in the live chat and now
71:46 - let's do we've done two Pomodoro
71:50 - sessions which that's usually the
71:52 - minimum I think I'm going to do one more
71:55 - Pomodoro session and in this session we
71:58 - would definitely commit this would make
72:03 - it a repo we'll commit it put it on
72:05 - github that way you all will have access
72:07 - to all of this and then we'll see so
72:12 - probably what I'm gonna start with is
72:16 - making it a repo actually let's just to
72:22 - continue with what we were doing let's
72:23 - finish off this actions file here this
72:29 - is we need a little bit more before
72:32 - it'll really be functional then we'll
72:34 - commit everything if we have extra time
72:37 - after that then we'll move on and see
72:39 - what else we can do ok
73:05 - so what we want to do you find
73:12 - trying to find my other projects the
73:15 - simplest example for now most of my
73:20 - actions involve making a call to an API
73:28 - rather find a better example
74:11 - maybe I
74:19 - actually maybe this is fine let me let
74:23 - me pull over what I've been doing so
74:28 - I've been doing things like this so oh
74:38 - yeah so I've been doing things like this
74:42 - where I wouldn't directly call this I
74:47 - would call like let's imagine this is
74:50 - fetch post into the category so I would
74:52 - call fetch post then it would from from
74:58 - another file which would be this API
75:01 - utility then it would pull in from the
75:06 - API the posts then it would call let's
75:12 - say get posts and pass that in but I
75:15 - guess since I'm not doing that right now
75:17 - this should work and in this case
75:19 - directly from a component I would just
75:22 - dispatch this action and then pass in
75:25 - whatever I want so for now I think we'll
75:27 - be fine
75:28 - but just know that if we wanted to call
75:30 - an API where we would do it is probably
75:32 - in here I would put all the API stuff in
75:36 - another file and then from the component
75:40 - we would call the action that would then
75:43 - make the API call and then what gets
75:46 - returned from that call would get passed
75:49 - to another action this action would only
75:53 - be called from inside of the actions
75:56 - folder anyway and then that data would
76:00 - get passed to the reducer and then the
76:04 - reducer is what takes that information
76:08 - and basically let's see where deucer is
76:14 - so the reducer would then take that
76:16 - information and do whatever we tell it
76:18 - to do with that in this case it's it's
76:21 - combining it with the previous state so
76:24 - what we wanted to do is only update the
76:27 - things that have changed okay and then
76:30 - that gets
76:33 - that's what ends up getting into the
76:35 - store and then it becomes available to
76:37 - our components to use so that's kind of
76:40 - the flow I am NOT an expert in Redux
76:42 - I've developed one thing that has
76:45 - successfully worked with Redux so just
76:49 - keep that in mind whenever going through
76:51 - my explanation of redux this is a way to
76:53 - do Redux that has worked for me one time
76:55 - so I don't want to give you the wrong
76:59 - impression that this is the way to do it
77:01 - but it is a way that does work probably
77:06 - not the best way but I don't really know
77:10 - okay so now having realized that this is
77:14 - sufficient for now let's just turn this
77:17 - into a git repo so let's run git move
77:23 - this up a bit I just now I realized that
77:28 - my timer I never started it and also
77:30 - it's being blocked by my face so now you
77:36 - can see it nothing that matters for to
77:38 - give you an idea how much time we have
77:40 - left so let's get in it get in it okay
77:48 - so we've initialized this and let's go
77:53 - with so now we can see this is what we
77:59 - have that would be being our git
78:05 - repository so we'll see so when we do
78:08 - create react app it already came with
78:10 - the get ignore file so we don't have to
78:13 - worry about that now if you were doing a
78:14 - project and you weren't really strapping
78:16 - it with anything you would want to have
78:17 - your own gate ignore file or maybe you
78:19 - have a global file but anyway so all
78:24 - this stuff doesn't get included right so
78:26 - that's why our node modules aren't
78:27 - included when we get we did status so
78:30 - we're gonna do a git add write kit add
78:37 - also we need to put the dot for all now
78:40 - let's check the status again right so
78:42 - everything now is
78:44 - and is ready to be committed so now
78:45 - we'll do a git commit I'm gonna use the
78:48 - EM flag right to burn a commit message
78:50 - right there in line and I'm just gonna
78:53 - say an it for initial our initial commit
78:57 - right now if we check our status we're
79:02 - all good right nothing needs to be
79:04 - committed but we're not actually linked
79:07 - up with github yet right there's nothing
79:08 - on there so that's our next step let's
79:11 - go to github and let me bring this over
79:21 - so here we have github and let's make a
79:26 - new repo I want
79:32 - FUS mark on so that's Franciscan
79:35 - University still the marketing
79:36 - communications department where I work
79:38 - and we're gonna call this bulletin react
80:00 - okay it's just a little description we
80:02 - are gonna make this public and yeah we
80:08 - have a readme so we're not gonna
80:11 - initialize with the readme doing how to
80:13 - license let's add a license and we'll
80:16 - just go with this that should be fine
80:19 - I'm not really super knowledgeable about
80:21 - the difference in licenses I usually
80:23 - look them up every time but I'm pretty
80:26 - sure that this will be okay for what
80:28 - we're doing and we we don't want to add
80:31 - get ignored we already have one so let's
80:36 - create this okay so now let's
81:07 - wait a second
81:12 - sorry usually I'm losing my mind here I
81:17 - could have sworn that usually another
81:20 - screen pops up initially that has some
81:23 - other some other options did I mess this
81:30 - up let me check the live chat see if I
81:34 - messed it up maybe I hit the wrong thing
81:40 - no nobody said I hit the wrong thing I
81:45 - need to pull in an existing repository
81:48 - is that enough it's possible that I just
81:55 - messed this up hola
82:20 - oh okay so thank you Jake Jake said it's
82:25 - because I added the license
82:27 - so the first commit was the license okay
82:35 - what's gonna be faster it may be faster
82:39 - to just delete this and do it again
82:45 - because now I have let's just delete it
82:51 - and do it again honestly supposed to
82:54 - already exists yeah I didn't want to hit
82:57 - back
82:57 - I just wanted to delete all right okay
83:02 - see there's there's some commands I can
83:04 - just came out at origin all right I
83:09 - won't delete it let's just work with
83:11 - this all right so let's go get remote
83:30 - okay I think this is it
83:36 - okay
83:38 - all right so
83:49 - great there's no tracking information
83:55 - set upstream
84:12 - should be
84:25 - okay
84:30 - using to merge unrelated histories so
84:34 - it's just push them get close
84:38 - nope dang it
84:50 - is there some way you can force okay
85:02 - no refusing diversion really issues
85:04 - again alright let me check the latch out
85:07 - again
85:18 - maybe I should just delete the license
85:21 - and then the fish organized yeah so I I
85:30 - tried to do a git push origin master
85:31 - already and I'm getting maybe doing a
85:40 - pool rebase let's let's just see okay
85:52 - awesome okay so thank you thank you Matt
85:59 - I got the flag now where's my there it
86:04 - is okay
86:10 - yes
86:15 - it's
86:30 - this is whoa all right
86:44 - so it popped up on my other screen to
86:47 - have me put in a merge message there we
86:58 - go
86:58 - okay cool
87:10 - all right now let's check it make sure
87:14 - it went through everything works looks
87:17 - like it works okay great so yeah it was
87:22 - actually kind of cool that that happened
87:23 - I've never had that happen to me before
87:25 - but it's good to know so if you're
87:28 - trying to initialize a new repository
87:30 - probably better just to not add the
87:32 - license that readme get ignore with
87:36 - github because then you're gonna have to
87:41 - merge like we did here so this is what
87:44 - ended up working so thanks again Matt
87:47 - for that get pool with a flag allow
87:51 - unrelated histories ok so there might
87:56 - have been other ways to do it probably
87:57 - usually with get there's definitely like
87:59 - more than one way to do a thing but
88:01 - that's what works but we ended up with
88:04 - two different initial commits so a
88:07 - little bit sloppy here at the beginning
88:09 - that's okay but now we have it so now
88:16 - basically everything that we've just
88:18 - done is available in github if I hadn't
88:24 - have added this license what would have
88:26 - happened is that it would have taken me
88:28 - to a screen that would have had I think
88:31 - like three different sets of
88:32 - instructions depending on what I wanted
88:34 - to do one of those sets I believe it's
88:36 - the middle one would have had
88:38 - instructions for how to bring in the
88:40 - repository that I had locally into into
88:44 - here so would have just had me add you
88:46 - know like the remote so pretty much the
88:52 - same steps only when we did the push it
88:55 - would have just worked we wouldn't have
88:57 - to have done the pool merge and then
89:00 - push okay
89:07 - and CEO Samuel okay that's for 13
89:10 - minutes let's see let me just take a
89:16 - quick look at where we're at with this
89:18 - project to see if it's worth it to
89:20 - finish out this Pomodoro session or just
89:24 - wait for the next session so we have our
89:32 - linting
89:39 - we could probably set up a few routes
89:41 - for our views I just saw on the live
89:45 - chat Jimmy says does he reply to his
89:47 - viewers yes I do reply to the viewers
89:49 - but I go back and forth between coding
89:52 - and replying so after I finish up this
89:56 - session of coding I'm gonna reply to
89:58 - everything so just hang in there for a
90:02 - little while longer if you can
90:03 - and I'll answer any questions that you
90:05 - have okay so yeah let's go through and
90:12 - just add a few routes that we know that
90:15 - we need so let's get rid of this logo I
90:21 - don't need that anymore we're going to
90:22 - take it out and let me take all of this
90:26 - out we're gonna add in a switch
90:31 - nope not that kind of switch
90:40 - and then we're gonna add in some routes
90:42 - and I think I have some routes that I
90:45 - can copy and paste
90:56 - yeah let's copy and paste a few routes
90:59 - in here just to save us some time so
91:04 - obviously we're gonna want a home route
91:07 - so let's just we'll stick with that
91:09 - we'll make a component called home and
91:13 - then we're going to uncomment that and
91:18 - then let's see what else do we want we
91:21 - don't need to create post actually I
91:29 - think these two can stay what else what
91:38 - else would we have
91:42 - yeah let's just stick with these three
91:45 - for now we may want to add some more I'm
91:49 - gonna have to give this some more
91:50 - thought kind of look look over what we
91:51 - have now and just see what the best way
91:54 - would be to set these up but these three
92:01 - I know for sure we'll need so we have
92:04 - these now when I save this I'm gonna get
92:06 - an error because these files don't
92:10 - actually exist yet get rid of this one
92:12 - and uncomment these so we need to make a
92:17 - folder called views and then we need to
92:19 - add these these files so let's go back
92:27 - to our command line and see we obviously
92:32 - we have the error let me get rid of some
92:34 - of this as well okay
92:41 - so skill I think directory use source
92:49 - views let's actually want to go into it
93:03 - it'll just be easier to make multiple
93:06 - files so we want to make a home is hey
93:16 - let's see we want when we want
93:20 - category dot J s and post detail Dodge
93:30 - ass okay so that should have just made
93:36 - all three of those and we'll check it
93:39 - out
93:39 - yep so now we have all three of these I
93:44 - yeah so that does not not actually done
93:48 - anything because we don't have anything
93:50 - in those files you get so let's let's
93:55 - just make something in these files so we
93:58 - can get rid of yours so that's what
94:01 - would be the quickest thing we could do
94:06 - let me see if I can just copy and paste
94:09 - some you know boilerplate stuff in here
94:23 - hmm
94:29 - a lot of stuff that I'm saying is is way
94:32 - more advanced than boilerplate let's see
94:35 - if I can find something really simple
95:06 - so I can't find anything really simple
95:08 - right now I'm just gonna have to copy
95:10 - and paste something a little bit more
95:12 - complex and then get rid of a lot but
95:16 - it's actually not bad because we can see
95:18 - how we hook up some of these things from
95:22 - redux so let me just go over this for
95:26 - now so up at the top we've imported
95:29 - connect and we're putting in so we have
95:37 - our map state two props this is going to
95:39 - make the state whatever we want from our
95:41 - store available as props in this
95:43 - component so in this case we have our
95:45 - categories available we also are
95:51 - bringing in our dispatch so if you
95:54 - remember in our actions this is how we
96:00 - can pull in and call those those actions
96:02 - right so for one thing we now have
96:05 - dispatch available to use but we can
96:08 - also use fetch we use Fest data within
96:12 - our component and that calls this that
96:17 - dispatches this fetch categories and we
96:21 - could pass in things if we need it to
96:23 - here and then so we're not just normally
96:27 - exporting our component which in this
96:29 - case I just copy side nav from another
96:31 - project but we're using connect first
96:35 - and then we have the side nav of there
96:38 - which there's a name for this it's
96:41 - called currying so when you when you do
96:44 - it like this it's called currying I'm
96:46 - not gonna attempt to explain currying
96:48 - because it's a new concept for me that I
96:50 - just learned within the last month but
96:53 - that's what it's called if you want to
96:55 - look it up and figure out more about
96:57 - what's going on here so for now I'm
97:01 - gonna get rid of this because we don't
97:06 - you'll need it see if I can
97:12 - shouldn't see if I could leave something
97:15 - in here and it wouldn't mess anything up
97:17 - I guess state we could pull in something
97:21 - so let's pull something in here we have
97:25 - get posts yeah so let's pull in posts I
97:31 - know there's nothing right now but since
97:35 - we're going to have this stuff at some
97:37 - point we may as well just bring it in so
97:39 - state ok and for a dispatch let's just
97:51 - get rid of this for now
98:00 - whoops get rid of the wrong one
98:06 - you'll probably end up pulling that map
98:09 - dispatch the props back in at some point
98:12 - when we set up our API calls but for now
98:15 - we don't have those set up so I don't
98:17 - want to include them let's get rid of a
98:20 - lot of this stuff so pretty much
98:26 - everything let's just keep actually
98:33 - let's do something cool
98:35 - that's react 16 let's put in let me
98:41 - remember the syntax for this
98:43 - I think it's we're gonna return an array
98:53 - so let's return an array let's do h1 key
98:59 - one and then
99:10 - to CP
99:26 - okay we are gonna have to rename this
99:37 - and also we don't need this
99:46 - and let's pull out meat connects though
99:52 - but so this is where we would bring in
100:00 - import some of our actions that we
100:04 - wanted to use that we wanted to dispatch
100:07 - so for now we're not gonna use any of
100:10 - those but I guess we could just comment
100:12 - it out since we will be pulling some in
100:14 - when we're not gonna use link right now
100:17 - but we probably will end up having some
100:20 - links probably in we'll probably have a
100:22 - separate side knife component at some
100:24 - point so may not use the link here
100:28 - because each post love its own component
100:30 - but import status I don't think we have
100:35 - that yeah we don't have styles yet so
100:37 - we'll comment it out but we will have
100:39 - styles we may end up doing some styling
100:42 - a different way we may do our Styles try
100:45 - to do everything inside the component
100:48 - we'll see I like to try out different
100:50 - things styling wise especially with
100:53 - react because there's so many different
100:54 - ways of doing styling but we'll see will
100:59 - this work maybe this should work for
101:03 - this one and we can just copy and paste
101:05 - this for all our other views that was
101:09 - category of you know all right let me
101:12 - change this
101:23 - category all right let's save that now
101:26 - let's go to the home view and put that
101:29 - in there great okay save that and then
101:33 - finally post let's call this
101:50 - alright now let's see if this works no I
101:54 - must use the wrong syntax
102:04 - alright I'm gonna have to look up the
102:06 - syntax then I thought I had it yeah I do
102:11 - that all the way already up on a screen
102:12 - alright so let me bring this over she
102:15 - could see what I'm talking about so this
102:18 - is a is react version 16 it goes through
102:21 - some of the new stuff and first thing on
102:24 - here is okay so you returned it like
102:28 - that that's what I was going for
102:31 - initially let's see this will work now
102:40 - and my timer just went up so this will
102:44 - be the last thing that we do so if it
102:48 - works
102:48 - did it not work what am I doing wrong
103:05 - I should be able to return that
103:24 - is it only for for elements that are
103:28 - alike oh do I need to put maybe I need
103:30 - to do this because it's an array right
103:38 - that makes sense see if this works now
103:53 - it's not showing it
103:59 - oh well I guess I'm doing it wrong I
104:02 - didn't read it wrong it's possible yeah
104:09 - it's possible that maybe you can't do
104:13 - elements that aren't alike
104:37 - hmm yeah the only example on here does
104:40 - show all the elements to the same
104:41 - elements so maybe that's maybe that's
104:45 - the issue so actually let's know I don't
104:55 - I don't see why that would be an issue
105:01 - okay I could just I got it I got to
105:08 - figure this out I'm like this will be
105:11 - the last thing that we do let's see
105:22 - all right so I would like to know before
105:25 - we end this dream what what the issue is
105:29 - with this and why it's not working if
105:34 - I'm misunderstanding this
105:47 - all right let's see
106:34 - by this asagi love this other component
106:39 - so maybe I am misunderstanding how this
106:43 - is supposed to work
107:16 - alright I'm gonna try one more thing see
107:18 - if it works and then if it doesn't work
107:20 - I'm just gonna wrap these in another
107:22 - element and so I'm gonna try to make
107:25 - these both paragraph tags that was
107:41 - and see those
107:49 - and just
108:13 - let me fix this page so it looks like
108:16 - this
108:17 - I think the error I'm getting is
108:19 - unrelated to this so it looks like maybe
108:22 - that this would actually work as long as
108:24 - you're using the same the same tags so
108:29 - now what is going on here
108:43 - okay so the root component is wrapped in
108:45 - provider so that should work so what's
108:50 - going on here Connect
109:09 - let's check out
109:19 - see art we're bringing in provider we
109:23 - have wrap this in provider and then this
109:28 - is inside of that okay that's weird
109:38 - all right let me
110:04 - it's preferring this tourism
110:08 - ok so I got something going on with
110:27 - oh you're okay Harshit you're right I'd
110:30 - never passed the store so okay thank you
110:40 - for catching that okay awesome okay so
110:46 - home this is the home page let's go to
110:50 - category
110:52 - this is category page awesome and if we
110:54 - do category slash whatever it should
110:58 - give us the post detail page great okay
111:00 - so this works we already saw that our
111:06 - store was working now we were actually
111:12 - are passing the store down react router
111:17 - is working we have our routes and we've
111:22 - done some cool react 16 stuff and that
111:28 - we've returned to elements without them
111:32 - being in a containing element so pretty
111:37 - cool so so far we've we use one of the
111:41 - new react 16 cool things that it can do
111:45 - alright so I definitely went over my 25
111:49 - minute session there so I'm going to go
111:51 - to the live chat now it's been a long
111:56 - stream already so I totally understand
111:58 - if you can't stick around for the live
111:59 - chat if that's the case then thank you
112:02 - so much for watching and join us again
112:05 - sometime please but if you can stick
112:08 - around even if you don't have a question
112:10 - it would be awesome if you could stick
112:11 - around and help to add your expertise to
112:15 - our answers to the questions if you do
112:18 - have a question go and put it in the
112:20 - live chat now I'm gonna do my best to
112:22 - get to all the questions and if I have
112:26 - an answer I will give an answer and a
112:29 - lot of the other people in the live chat
112:30 - are very knowledgeable and can
112:32 - can add to the answers okay so I'm going
112:38 - to scroll back up to where I left off
112:39 - and just go down through the list
112:55 - ahman says Redux versus mob x your views
113:00 - so I have not used mob X yet
113:05 - I have watched some YouTube videos on
113:07 - mob X and seen a presentation at a
113:10 - conference on mob X based on that it
113:14 - seems like mob X is easier to use but as
113:19 - I said I haven't used it yet i've only
113:21 - used redux so i don't know for sure you
113:25 - know from personal experience I'm also
113:28 - I'm not 100% sure which situations would
113:31 - be better in terms of you know it is is
113:36 - mob X a perfect replacement for redux
113:40 - you know could it be used in every
113:42 - situation I don't know so I don't have
113:44 - enough experience with it so at this
113:46 - point I'm using redux because I've
113:48 - learned Redux that's what I know I'm
113:51 - definitely open to using mob X in the
113:53 - future but I would like to get a little
113:56 - bit better with redux first so that I
113:58 - could make a more informed you know
114:02 - comparison when I switch and try out my
114:05 - bags rohan asked what single sign-on
114:11 - provider will you guys be using actually
114:14 - I don't I don't know what they're going
114:16 - with right now so I'll have an answer
114:23 - for you later on so they said on Friday
114:25 - I'm gonna have a meeting the meeting is
114:28 - actually related to how we're gonna
114:31 - brand the single sign-on there's going
114:34 - to be some discussion about rebranding
114:35 - some of the applications that the
114:38 - university uses so maybe like a
114:41 - different look different naming I'm in
114:44 - favor of just being really simple and
114:46 - straightforward with the naming so we'll
114:48 - see how that meeting goes but I am gonna
114:51 - bring up tying in this project into the
114:54 - single sign-on system so I don't know if
114:56 - there'll be anybody at the meeting
114:58 - that's directly working on the technical
115:00 - side of this but at least I'll be able
115:02 - to figure out who I should talk to
115:04 - that's that can give me the answers
115:07 - about you know technically how are we
115:08 - gonna tie this in so maybe for Friday's
115:13 - stream I'll have an answer okay so James
115:18 - Henderson says it is a pain let me know
115:20 - if you have any questions on the single
115:21 - sign-on oh I definitely I appreciate you
115:24 - offering offering the help so yeah I
115:30 - mean I guess it it has to be somewhat
115:32 - complicated they've been working on it
115:33 - for a while so must not be the easiest
115:37 - of things to do
115:42 - q the dev says what level of coding is
115:44 - this I'm fairly new to coding should I
115:46 - stay or view your earlier videos did get
115:51 - some answers to that already
115:53 - Blake Thomas says I'm a beginner but
115:55 - this is still neat to listen and to pick
115:57 - up a few things Brett says I'd stay on
116:01 - but if you go back to Jesse's first
116:03 - react project using next jsut be in good
116:06 - shape that one is simpler to start with
116:10 - yeah yeah basically I would agree with
116:14 - that assessment so occasionally we do
116:18 - things that are more simple more
116:21 - beginner friendly usually when we do
116:23 - some of the like just building out the
116:25 - UI using CSS and things that's somewhat
116:29 - more beginner friendly but sometimes we
116:33 - do get into some back-end things DevOps
116:36 - and so those are more advanced but I do
116:42 - I think that there are some things some
116:47 - useful things I try my best to explain
116:49 - things as I go through so I think even a
116:51 - beginner could get some useful things
116:52 - out of this if you can make it through
116:55 - all the other parts also the question
116:58 - and answer session is always open to
116:59 - anything so if you do have a question
117:02 - about something you know you need a
117:04 - little bit more explanation or you have
117:05 - a question that's just entirely
117:06 - unrelated to that project we're working
117:08 - on that's fine too so then you can still
117:11 - get something out of the livestreams but
117:15 - certainly understand if you know maybe
117:18 - at this point you're not getting
117:20 - out of it you know totally
117:22 - understandable but definitely ask
117:25 - questions if you can I'm open to that
117:42 - okay kevin says Jesse just a reminder to
117:47 - check the last few comments whenever
117:48 - there is a bug thanks thanks for that
117:50 - Kevin I you would think that I would
117:52 - remember automatically from now on but
117:54 - sometimes I remember sometimes I don't
117:56 - so I'm sure I'll get better at that as I
117:59 - as I scream more okay harsh it says
118:06 - Redux saga is also great for async calls
118:09 - and Redux instead of Redux thunks okay I
118:11 - have I haven't used saga yet but I have
118:16 - heard about it so maybe I'll maybe I'll
118:19 - try that out we'll see I mean we haven't
118:22 - really done anything yet with thunks so
118:23 - it's possible that we could just switch
118:25 - over to saga at some point so let me
118:30 - know what you all think which one do you
118:32 - think is easier to implement is one
118:34 - clearly better than the other one
118:36 - so at this point you know we're just
118:38 - starting out so now's the time to to
118:40 - switch if I'm going to switch I'll
118:44 - definitely have to do a little bit of
118:45 - learning to figure out how to do it but
118:51 - yeah if one's clearly better then let me
118:55 - know I'll definitely switch to be asked
118:59 - what is a thunk okay so probably be good
119:05 - to look up Redux thunks because I don't
119:08 - know that my explanation is gonna be the
119:10 - best but Redux thunks are good when
119:15 - you're doing things like API calls
119:20 - basically the handle try trying to
119:25 - remember how this was explained
119:28 - initially to me I've used them and I
119:31 - know they're helpful but how do I
119:32 - explain it if anybody has to get
119:34 - explanation please put it in I don't see
119:37 - anything right now but basically let me
119:42 - see it's a it's a way to handle
119:44 - asynchronous things in Redux so someone
119:48 - please correct me if I'm if I'm the
119:50 - this handle in this room but I think the
119:56 - best way it's a way to handle things
119:58 - that would be asynchronous with in redux
120:05 - like trying to think I should just I
120:10 - should look up you know quickly what the
120:12 - correct terminology is I don't want to
120:16 - lead anyone astray here
120:34 - okay
120:38 - so here's the official explanation this
120:42 - may or may not help for those of you who
120:45 - can't see the screen right now I will
120:47 - read it out Redux thunk middleware
120:49 - allows you to write action creators that
120:52 - return a function instead of an action
120:55 - the thunk can be used to delay the
120:57 - dispatch of an action or to dispatch
121:00 - only if certain conditions are met the
121:03 - inner function receives the store
121:04 - methods dispatch and get state as
121:08 - parameters an action creator that
121:10 - returns a function to perform an
121:13 - asynchronous dispatch okay so here's
121:17 - some code example to do the asynchronous
121:22 - dispatch here's one to do the
121:25 - conditional dispatch okay so I think in
121:29 - my case how we'd be using thunks is more
121:34 - like we're gonna return basically the
121:39 - idea that we can return a function
121:40 - instead of an action is what's useful to
121:45 - to my case so you can check out as well
121:48 - the repo was that yeah so this is the
121:55 - repo that I was using before to to get
122:01 - some examples when I was copy and
122:03 - pasting things so we can see reserve
122:07 - reducers actions okay so here's what I'm
122:10 - doing with some of the actions then like
122:14 - I'm using let's see where I'm pulling
122:18 - this init
122:24 - yes you've seen some of my dispatches
122:27 - and let me actually show you the API as
122:30 - well I'm kind of flying through this I
122:33 - know but you can look at this more
122:36 - slowly if you want to if you go to my
122:40 - github profile that's or misc is opposed
122:49 - you to okay so here's how I'm calling
122:54 - these and then I'm returning the data in
123:01 - JSON format so plays it obviously I'm
123:05 - not like completely an expert on thunks
123:08 - I just know how to use them and I know
123:11 - that they they work but I can't give a
123:15 - great explanation for it but anyway it
123:21 - looks like there's an in-depth
123:22 - introduction to thunks here so I'm not
123:24 - gonna go through it but here's what it
123:27 - is what it looks like so yeah that's
123:31 - that's pretty long that might be one of
123:32 - the longest Stack Overflow answers I've
123:34 - ever seen
123:36 - so anyway I guess check check out the
123:41 - github repo for for Redux thunk sorry I
123:49 - couldn't give you a great explanation
123:50 - but hopefully I gave you some resources
123:52 - they can explain it better than I can
124:09 - okay cool earlier I was mentioning that
124:12 - Windows command line commands are are
124:15 - different so in the case I was talking
124:18 - about the make directory so mkdir for
124:20 - Linux and Mac makes a new directory in
124:22 - windows it's MD so but har should also
124:29 - said you can get the bash commands for
124:31 - Windows pretty easily and you can run
124:34 - Linux subsystem for Windows as well so
124:36 - that's really cool
124:38 - if I start developing on Windows again
124:40 - I'm definitely enough to set that up oh
124:46 - cool har should also typed in the bare
124:50 - minimum function that I needed when I
124:52 - was looking for to set up the reducers
124:55 - so thanks horseshit I'm sorry I didn't
124:58 - look over at that that would have been
124:59 - faster but it's not too bad we have some
125:02 - you know basic stuff set up that I know
125:04 - we'll use later on so I guess it worked
125:08 - out
125:19 - is Slee ninja says why switch if if can
125:25 - do the same job
125:26 - Harshit responded saying it is the
125:29 - common practice in the read up community
125:31 - do you switch to handle action type so
125:35 - also says I feel it's more readable
125:37 - personally so yeah basically I mean
125:39 - that's how I learned to do it I've never
125:41 - seen it done otherwise it doesn't seem
125:44 - like it's very useful right now since we
125:47 - only have one case but usually I have a
125:50 - lot more cases than that so you can see
125:53 - I think one of these is my yeah so you
126:05 - can see all right select for this one
126:10 - I'm like 7 cases here so this is
126:13 - definitely better than than an if
126:16 - statement ok harsh it says Jessie please
126:22 - setup and grub for this project - I'd
126:24 - love to see the action live last time
126:26 - alright awesome thank you for suggesting
126:28 - that I had completely forgotten about it
126:30 - so I'm definitely going to try to get
126:33 - that set up as soon as I can
126:35 - and probably for some of the other
126:37 - projects I can do it as well so I had
126:40 - idea for an idea for project 3 so we've
126:43 - been worked out was the project where we
126:44 - were working with dotnet framework so my
126:47 - idea is since we're basically just
126:49 - working on UI stuff now and then at some
126:52 - point we're going to hook it up to the
126:55 - content management system the first
126:58 - stage where we're just working on the UI
127:00 - we don't really need it to be in dotnet
127:04 - framework what we can do is just pull
127:07 - that out and make it a git repo and just
127:10 - set it up and run I don't know maybe
127:12 - we'll just run it with gulp as our as
127:16 - our task runner and I'll have that on
127:20 - github and then that way you all can
127:23 - check out all the code easily on github
127:25 - I can run the project with an grok you
127:28 - can see that we don't have to deal with
127:29 - like manually refreshing things or the
127:32 - slowness in general of the website so I
127:34 - think that's what I'm gonna do
127:37 - so we'll see I have some other project
127:40 - coming up so hopefully at some point
127:42 - this week I can get all that set up and
127:44 - then you all can I mean you all can even
127:46 - submit pull requests if you want so I
127:48 - think it'll be a much better way to do
127:49 - it we can build out everything we want
127:51 - for all the different templates in there
127:53 - and then when the time comes we'll just
127:56 - copy and paste everything in and maybe
128:00 - pull it out into different components
128:02 - and try to hook it all up then but it
128:05 - would be nice to do it like that and
128:07 - then we can even I can show it to other
128:09 - people in my department and get feedback
128:10 - I think it'll be a much tighter like
128:13 - feedback loop in general if we can do it
128:18 - like that so that's coming to I'll set
128:20 - up and drop for that one as well
128:30 - and that says so you're good with Redux
128:33 - now let's use the term good loosely and
128:37 - say that I'm good with Redux right to be
128:41 - more accurate I have successfully
128:44 - completed one project with Redux and
128:48 - that was the the kind of blog projects
128:55 - that allowed you to do comments and vote
128:59 - so yeah that was that was my one project
129:04 - so yes I'd say good in the very very
129:08 - loose use of the term get shine says
129:15 - hello sir what does it do redux thunk
129:19 - and what is reselect library I don't I
129:25 - don't know what Reis elect libraries
129:28 - referring to I guess I'm missing that so
129:32 - if you could clarify more about that
129:35 - then maybe I can answer you as far as
129:38 - redux thunk so I just answered a similar
129:41 - question of that so go ahead and I just
129:46 - go with what I had what I said there and
129:48 - that is basically check out the redux
129:50 - thunk github page and there's some
129:53 - examples there and a link to more
129:55 - information so I don't want to I did a
129:59 - terrible job of trying to explain it a
130:00 - few minutes ago so I don't want to
130:02 - attempt it again and throw you off
130:05 - giving you an explanation that's not
130:07 - accurate so I just go I'd recommend go
130:10 - right to the source and that's probably
130:15 - where you're gonna get the best
130:16 - information
130:20 - Kiyoshi says this is my first time here
130:23 - interesting to see how you do everything
130:24 - in real time thanks you're welcome
130:27 - thanks for watching yeah hopefully you
130:30 - can join us again sometime
130:32 - Rohan says what youtube 4 times speed is
130:36 - that extension what extension I don't
130:38 - know I I don't know how they did it four
130:40 - times speed but someone
130:41 - some point said that they watched my
130:43 - videos in for time speed so yeah I know
130:46 - YouTube only lets you go to what like to
130:48 - time speed so it must have been some
130:51 - sort of extension but I I never asked
130:53 - what the extension was so if anybody
130:55 - knows put it in the live chat please or
130:59 - later on if you're watching the
131:00 - recording in in the comments all right
131:05 - Dule says off the topic where can I find
131:08 - how to use things from materialize in my
131:11 - code pen projects encode pen you can
131:16 - import materialize so if you click on
131:20 - you have to click on where you import
131:22 - CSS and JavaScript until you want to
131:25 - import from the from a CDN materialized
131:31 - JavaScript and their CSS so if you go on
131:34 - the materialized site under the getting
131:36 - started tab they should have the the
131:39 - URLs that you'll need to bring in and
131:42 - that's how you want to do it so let me
131:45 - know if if if you're having trouble with
131:47 - that send me a direct message on Twitter
131:49 - my Twitter a link to my Twitter account
131:52 - is in the description this video and I
131:55 - can I can help you out more but just
131:58 - from memory I haven't actually used
132:00 - codepen in a little while but at least
132:02 - that used to be the way that you would
132:04 - do it I don't think the UI has changed
132:06 - or anything so that's just still work ok
132:11 - so Matt says redux thunk allows you to
132:14 - dispatch multiple readout to actions
132:16 - without returning a Taipan value ok
132:19 - awesome thank you Matt that's that's a
132:21 - very concise way to explain that so
132:24 - definitely better than my explanation so
132:31 - shine again asks then what is reselect
132:34 - library and making react projects so
132:37 - again I yeah I don't really know what
132:40 - reselect is Jake says there's a pretty
132:46 - good flowchart that everyone recommends
132:48 - for react redux but can't post links ok
132:52 - so evidently is a good flowchart out
132:54 - there
132:55 - so we don't have the link but maybe it's
132:57 - hopefully it's not too hard to find so I
133:00 - know I've seen several different
133:03 - pictures of it just to get a visual of
133:06 - the flow which will probably be easier
133:07 - than my explanation at least for me a
133:10 - visual is always pretty easy to grasp so
133:14 - there's I know there's a bunch of them
133:16 - out there so if you want to kind of dig
133:18 - deeper and get a better understanding of
133:20 - redux then you know probably probably
133:24 - shouldn't take too long to search for
133:26 - that Harshit says Jessie I have a great
133:29 - suggestion for you if you are using
133:31 - prettier use its atom package it has
133:33 - linting integration and enable format on
133:35 - submit that is a good suggestion Thanks
133:39 - you know what I somebody suggested that
133:40 - before and I just I just never got
133:43 - around to doing it and just kind of
133:44 - forgot about it so I'm gonna have to do
133:46 - that yeah that'll probably be good and
133:51 - then that way I'll automatically get the
133:54 - formatting and I won't have to wait for
133:56 - a commit so that will definitely be
133:57 - useful so thanks for that
134:00 - let's see okay so it looks like Matt is
134:07 - commenting on this reselect library so
134:11 - this has never used it but it looks like
134:13 - it aims to reduce redux actions and
134:16 - Redux reducers into one function oh
134:17 - that's interesting
134:23 - okay that's kind of cool I might like to
134:26 - see that I mean right now I'm just
134:27 - learning so maybe it's better if I keep
134:30 - everything separate you know and it'll
134:33 - be easier to understand based on
134:35 - tutorials but at some point it it might
134:37 - clean things up actually to have them
134:39 - combined
135:00 - okay so uh Blake says so I ran NPM start
135:04 - and I can't stop it okay and Matt
135:07 - respond to just use control-c and that
135:12 - that works everywhere well at least it
135:16 - works in linic and max I'm pretty sure
135:18 - it's the same on Windows but yeah
135:20 - control see you'll get you out of it
135:33 - all right Madison use a stateless
135:36 - function yeah I'll probably I'll go
135:38 - through and use stateless functions at
135:41 - some point right now probably gonna end
135:47 - up having to use stateful functions or I
135:52 - should say basically using like the
135:54 - class method if that's what it's called
135:57 - but you all know what I'm talking about
136:01 - and react so you know using the class
136:04 - here so for a lot of these components
136:07 - I'm going to end up needing this so
136:10 - later on I can go back through then and
136:13 - change them into functional components
136:18 - but at this point I'm thinking that I'll
136:23 - probably end up needing it like this
136:34 - okay so control see does work on Windows
136:38 - we got verification of that alex says
136:43 - another react project you should do
136:44 - angular typescript and rxjs or some
136:48 - serious stuff you know I honestly didn't
136:52 - even think about that really I since I'm
136:55 - doing the course on react right now I'm
136:57 - just kind of like trying to do like I'll
137:00 - react all the time and just multiply my
137:02 - gains here on on learning so I'm not
137:06 - opposed to other things to be honest
137:08 - with you if I'm gonna do something else
137:10 - right now I probably try out view I just
137:14 - a lot of people that I follow on Twitter
137:16 - seem to be talking about view so I think
137:20 - I tried that out over angular but I'm
137:23 - not opposed to it we'll see for for my
137:27 - work here at the University I would
137:28 - actually like to use the same thing for
137:32 - everything just to make it easier to
137:34 - keep up with and then potentially if we
137:36 - need to hire more developers just to be
137:38 - able to like say like this is the skill
137:41 - set we need and you know instead of
137:45 - saying like we need somebody that can do
137:46 - all these different things that are
137:48 - familiar with all these different
137:49 - frameworks so probably won't use things
137:55 - that are too different from react for
137:58 - these streams but potentially I don't
138:04 - know it could happen but I can't make
138:07 - any guarantees about it right now
138:14 - oh it looks like a few of you also said
138:17 - view get try view harsh that says what
138:23 - headphones ease I don't know let me see
138:34 - I don't really know it doesn't say it
138:36 - just says the logo it's a SteelSeries so
138:38 - I got these so long ago I can't remember
138:42 - I can't remember what they are I could
138:46 - maybe look back at my Amazon history and
138:50 - see so I come from Amazon I think they
138:52 - were around $50 60 L or something like
138:55 - that I really can't remember because
138:58 - it's been so long but I like these
139:02 - headphones they're comfortable I can't
139:04 - wear these all day and you know my ears
139:07 - maybe we'll get a little bit sore but
139:10 - generally like they're they're pretty
139:12 - good if you're like all about sound
139:17 - probably you want to get better ones it
139:20 - does have a retractable mic so I can use
139:26 - this but it doesn't work with with Mac
139:30 - so it's just a regular like headphone
139:33 - jack it doesn't work with a Mac it works
139:35 - with my android phone as a mic so I
139:40 - guess keep that in mind I I had kind of
139:43 - got these before I really started
139:44 - working with max but so I probably go
139:47 - with something different I mean I have
139:50 - another mic for this Mac but it'd be
139:52 - good to have it maybe like for my laptop
139:56 - but anyway if anybody's really
139:58 - interested in what these headphones are
140:00 - let me know because I'll look it up in
140:02 - my Amazon purchase history and then I
140:04 - can get you exactly what information
140:07 - about exactly what these are now that
140:12 - I'm actually showing my face on youtube
140:15 - I was thinking about getting one of
140:16 - those like ridiculous like gamer
140:18 - headphones that lights up different
140:20 - colors and things just so it's a little
140:23 - bit more interesting I don't know what
140:25 - do you think do you have any suggestions
140:27 - let me know huh
140:41 - all right I'm getting almost to the
140:44 - bottom here of the live chat okay
140:55 - somebody mentioned semicolons and Rowan
140:58 - says they're entirely optional in jazz
141:00 - yeah so if it looks weird that I'm not
141:02 - using semicolons it it is weird I mean
141:05 - it it's definitely weird if you're not
141:07 - used to seeing it like that but yeah
141:09 - something you don't need semicolons I
141:11 - don't want to start any trouble here
141:13 - because sometimes people get strong
141:14 - opinions about this whether or not you
141:16 - should use semicolons I like it I like
141:20 - not using semicolons to me it's like as
141:23 - long as the code is still readable and
141:25 - it works then typing less is better than
141:29 - typing more so that's how I feel about
141:32 - it I have heard and I can't remember
141:35 - exactly when but there are some use
141:38 - cases where you want the semicolon in
141:41 - because it doesn't work how do you think
141:43 - it would but it's been my experience
141:45 - that's that's rare so I don't know it
141:50 - just depend on what you're using it for
141:51 - so if you're thinking about quitting
141:55 - semicolons then I would check it out
142:00 - first to see in what cases you shouldn't
142:02 - do it and then see if those cases ever
142:05 - come up for you and if they don't then
142:08 - you know they'd get rid of the
142:11 - semicolons but yeah I don't for my
142:17 - projects I don't like semicolons but it
142:19 - doesn't bother me if other people use
142:20 - semicolons
142:38 - see
142:45 - okay so James Henderson had a follow-up
142:49 - before he had mentioned to let him know
142:53 - if you need I needed help with the
142:55 - single sign-on stuff so he said it's
142:57 - somewhat easy it depends on the product
143:01 - I've also tested SSO single sign-on that
143:07 - is where there are some fun times as a
143:11 - service for the dev team so alright so
143:18 - evidently it does that makes a lot of
143:20 - sense of defense on the product I mean
143:21 - that's okay that's what I my experience
143:26 - with let's several other things as well
143:29 - James also says the only dumb question
143:32 - is the question you don't ask and that
143:33 - is sometimes the only way you learn
143:35 - please don't take that as being rude I
143:37 - always learn from the videos yeah it
143:42 - definitely that's so if anybody's right
143:45 - now watching and you got a question you
143:49 - know I'm sure if you should ask it ask
143:50 - it don't worry about it just ask the
143:53 - question and as long as it's not like
143:58 - something really offensive I'm gonna
144:00 - answer it
144:02 - so certainly anything developer related
144:05 - ah-ho-ho answer for sure so yeah but any
144:10 - don't think the questions to like
144:12 - beginner or anything like that like I'm
144:15 - not gonna make fun of anybody for any
144:17 - questions although if you've been on
144:20 - watching for a long time and I I might
144:24 - be able to get away with making fun of
144:25 - you let me know if you don't like that
144:27 - though but there's some of you that have
144:30 - been watching for so long on a live
144:31 - stream I feel like we have enough of a
144:36 - relationship that we could joke but if
144:38 - you're new I will not nobody's gonna
144:41 - make fun of you and if they do I will
144:42 - tell them not to Blake says what is here
144:49 - he asked what is the best free course on
144:51 - react and or inexpensive courses hmm
145:00 - about courses code Academy has react
145:07 - stuff that's free I think it's pretty
145:10 - good for basics for starting out I think
145:16 - other than that I pretty much just
145:18 - watched YouTube videos for react stuff
145:22 - and just read I didn't really do a
145:24 - course and the Udacity course I'm
145:27 - obviously doing but it's not inexpensive
145:29 - I guess it depends on what would you
145:32 - consider inexpensive - yes I don't know
145:38 - that I have any other suggestions that
145:39 - I've used personally
145:48 - kevin says Jesse what is your opinion on
145:50 - functional programming JavaScript is
145:53 - somewhat compatible with this paradigm
145:54 - and react Redux are based on functional
145:56 - programming principles I think you also
145:59 - mentioned currying yeah yes I mentioned
146:02 - currying we were talking about like this
146:04 - stuff down here as currying so and I
146:07 - think I said I'm not going to attempt to
146:09 - explain currying right now because I
146:15 - don't think I could do a great job at it
146:16 - so you could check out you know search
146:20 - currying and it's not really a complex
146:24 - thing I just would rather not mess up
146:26 - your understanding if this is the first
146:28 - time you heard about it so yeah in terms
146:34 - of functional programming from what I've
146:38 - read about it I guess I like it
146:45 - that's weird to say as compared to like
146:52 - object-oriented programming I honestly
146:54 - do think it makes sense with JavaScript
146:56 - all right I don't really think that I'm
147:00 - at a point where I can have really a
147:02 - really informed opinion about it so I
147:07 - guess I can't I don't feel like I have
147:11 - enough knowledge about things to really
147:13 - make a call like one way or another all
147:15 - I can say is that from what I understand
147:18 - I think I would prefer it to
147:21 - object-oriented stuff with JavaScript so
147:25 - let's see I just got a message from my
147:28 - boss so I'm gonna have to wrap this up
147:30 - quickly because he wants me to go to his
147:33 - office
147:34 - so Kevin so we're at authorization
147:41 - whatever you want yeah that that was the
147:43 - actual example for the projects I just
147:44 - stuck with it
147:46 - Harshit says any plans on graph QL yeah
147:49 - I'd love to use graph QL at some point
147:51 - not sure when but I would definitely
147:54 - want to
148:00 - Rowland says the SteelSeries Siberia 100
148:03 - yeah I think that's it for the
148:05 - headphones
148:06 - Blake's has thoughts on react license
148:08 - change I was pleasantly surprised by it
148:11 - so I wasn't that worried about the old
148:13 - license for me personally but I I do I
148:17 - like the move I think I think it's good
148:21 - for react and it's definitely good for
148:23 - developers not a legal expert though so
148:26 - that's my my uneducated opinion let's
148:31 - see
148:39 - see
148:48 - all right let me alright so if I missed
148:53 - your your question I'm really sorry
148:55 - about that you can ask me on Twitter or
148:56 - in the comments but my boss is messaging
148:59 - me on slack several times now so I need
149:03 - to go in there and see what's up
149:05 - and anyway thank you so much for
149:08 - watching
149:08 - she'd be back tomorrow around 2 p.m.
149:10 - Eastern Time and until then have a great
149:15 - day