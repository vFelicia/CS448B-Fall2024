00:00 - In this course you will improve your command
line skills, your Linux skills and your hacker
00:04 - skills. This course is a walkthrough of the
abandoned war game from over the wire.
00:10 - It's very similar to a CTF, which is a type
of security competition where participants
00:14 - attempt to solve challenges on their computers
to earn points. sabia Sachi will guide you
00:19 - through a series of security challenges involving
the Linux shell remote connections, and SSH,
00:26 - consider trying to solve each challenge yourself
first. Today, we are going to see the walkthrough
00:31 - of this bandit over the wire wargame. So in
the internet, I came across this particular
00:36 - website that is over the wire and they were
having certain challenges out there. So if
00:41 - I take you to this over the wire, main website,
so we have got several WarGames that we will
00:47 - surely for in the next video that we'll be
covering. So today, I'll be covering about
00:53 - this bandit and what I found in this particular
challenge is on or in the particular game,
00:59 - it's the kind of a CTF thing that we will
be receiving flags in each and every stages
01:04 - of this game and this particular game or this
particular war game is very good for the newbies
01:12 - or for the people who are just starting out
and are not so much familiar with the Linux
01:18 - terminal. So, if you actually play this game,
you will be much more efficient or your skills
01:24 - in using the Linux terminal will increase.
So, today we are going to learn Linux by solving
01:30 - this particular challenges and this particular
challenge wargames. So I am assuming that
01:37 - you are having some basic ideas and basic
knowledge of the Linux terminal commands like
01:41 - what is MK dir, what is Ls, what is Rm what
is what is cat? What is Nano, all these things.
01:50 - So let's go ahead and let's start solving
the challenges one by one. So, first, what
01:56 - I'll do is I'm inside my folder, or TW and
I'm gonna make a directory known as bandit.
02:06 - So let me get inside it. And level zero says
that the goal for this level is for you to
02:13 - login into game using SSH. So we are going
to use SSH but I will be using SSH paths minus
02:20 - p and here goes the password and SSH. And
they have said that the host to which you
02:26 - need to connect is bandit dot labs over the
wire.org. So bandit dot lab dot over the wire.org.
02:37 - And the user name is bandit zero, so the username
is banded zero. And the port is the password
02:49 - is valid zero. And once you log in go to level
one, the port is default to zero, so minus
02:55 - p triple to zero because SSH runs by default
on port 22. So this is all about it. And before
03:03 - that they have said that the password is branded
zero. So what I'm gonna do is I'm going to
03:09 - write bandit zero and save it on a file named
zero. And I'm going to do some command substitution
03:18 - over here. And I'm going to write CAD zero.
So basically what I'm doing is I'm making
03:25 - a file called as zero and inside that file,
the password of every level will be stored.
03:32 - Like I'll be making different files and on
different files, level the hospital restored
03:37 - and I'm using SSH pass I'm providing the password
using command substitution. So cat zero will
03:44 - give us output as band zero and band zero
will be supplied to the switch minus V which
03:48 - stands for password in SSH pass and then we
are telling SSH to connect to this particular
03:55 - host. As the user bandits zero in the port
triple to zero. So let's hit enter and let's
04:02 - solve bandit. So let's go to the next level.
They say that the parser for the next level
04:08 - is stored in a file called readme. So clear
LS we got a readme file over here. And if
04:16 - I do get read me hit enter we get the password
for the next level out there. They say use
04:24 - this password to log into Bennett one is the
SSH whenever you find a password for a level
04:28 - use SSH to log into that level and continue
the game. So for them, it is that in each
04:35 - level we will be getting the password as the
flag and that password will help us log into
04:41 - the next level. So this is a password of bandit
one. So let's exit and though the password
04:55 - to one. Let's use SSH pass Get one and let's
switch the user to one. In Level One we have
05:12 - got the passer for the next level is stored
in a file called minus let's go ahead and
05:20 - let's see, we have got a file called as minus,
so it's a special character file. So, to see
05:27 - the special character file, we have to use
a filter that is dot slash minus and hit enter
05:32 - and we will be able to see this particular
file if I do not use this dot slash thing
05:39 - and if I simply give minus this means that
Bash is taking this that I will be given some
05:45 - character which will be treated as some kind
of switch for cat command. But this is not
05:50 - the case, we want to specify that minus is
my file name. So for that, we are giving the
05:56 - slash and hence we have received the password
for the next level
06:01 - level two, let's save that. And let's switch
to band two they say that the parser for the
06:20 - next level is stored in the file spaces in
the file name located in the home directory.
06:24 - So, if you wonder that these are four separate
files, then you are probably wrong because
06:31 - if I do ls minus L A, you can see it's a continuous
file like it is a single file having spaces
06:38 - in its file name. So, the way we can write
is that is Cat spaces backslash space in this
06:51 - file and this is the actual way how we write
or how we include space in the script this
07:02 - is known as escape sequence and we will simply
copy it and if I do not give this backslash
07:09 - what will happen is if I give it like this,
this will be treated as four separate file
07:17 - names. So cat spaces CAT and CAT this and
cat file and this will be treated like this
07:23 - manner, but we do not want that we want to
specify or we want to say the bash script
07:30 - that include this particular spaces into a
single file. So the way we say that by including
07:37 - this backslash
07:40 - and it's of level three. So level three, the
password for the next level is stored in a
08:00 - hidden file in the inherit directory. So,
we have quartered directory over here CD in
08:08 - here. So, if I do ls we have we can see nothing
over here. So LS minus L a will show us that
08:19 - there is a file called as hidden or we can
also do ls minus a which will list all the
08:26 - files minus S stands for all probably I use
them all. So dot hidden so I will be using
08:34 - CAT dot hidden and simply we will be receiving
the file or receiving the flag which is a
08:41 - password for the next level ups let's switch
to level four 
09:11 - level four stage that the password for the
next level is stored in your human readable
09:17 - file in the in her directory okay. So CD in
here LS we have got several files. So, cat
09:28 - minus 500 Okay, I did a mistake, I have to
specify dot slash minus 500 Because it is
09:38 - starting with a special character which I
said in my first challenge. So, we have got
09:45 - some content which I do not need to see. They
say it is present in a human readable file.
09:52 - So we have to check for the file type and
the way we do it using the file command. So
09:56 - file, then dot slash minus file 00 They will
say that it's an open PGP public key, we can
10:04 - say is 01 It's a data file 02 It's a data
file. And likewise, we can go till 09 To see
10:13 - which type of file all the files are. But
this is the kind of monotonous work so what
10:18 - I'm gonna do is I'm going to use a bash script
by using a for loop. So for i n, they're using
10:25 - a command substitution LS do file dot slash
dollar i 10. So, what this is going to do
10:37 - is I is a variable so I in LS LS will list
all these files and on each iteration, on
10:46 - each iteration, every file name will be stored
inside this variable i and I am saying that
10:52 - on each iteration, do file dot slash file
names so this will result in giving us all
11:02 - the file types for each and every file present
in the current directory. So we can see that
11:08 - file seven is an ASCII text. If you don't
know what S stands for ASCII stands for American
11:13 - Standard Code for Information Interchange.
Let me get it out while I'm in minus 507 and
11:26 - we have received the password for our next
level
11:30 - that's a bit as five let's log in into planet
five this game is easy till now let's see
11:55 - what we can see in the next level. When it
level five says the password for the next
12:00 - level is stored somewhere under the inherit
directory. So let's go to inherited a tree
12:06 - we have got several folders out here. So let
me do ls minus R to get a recursive view of
12:13 - what files are present inside each folder
are means recursive. So I'm going to list
12:19 - all the files recursively. So, there are tons
of piles over here I want to do ls minus R
12:27 - L. Hopefully that will work. And yes, this
is showing us the data of each and every file.
12:37 - And the more better way if I do ls minus l
a r l or l r whatsoever you write s answer
12:44 - all L stands for a detailed list and R stands
for recursively I will get to see all the
12:51 - hidden files all the folders each and everything
and say that we have to find the file which
12:56 - is human readable 1233 Bytes inside that it
is not executable at all. So one thing we
13:02 - can do is this is the file size these are
the file size. So we can manually go and search
13:07 - for the file size 1033 wide and manually go
ahead and run the file command to see whether
13:12 - it is human readable or not. But we do not
have to do so much of things what there is
13:18 - a tool called as fine so find dot dot min
search in the current directory so find the
13:23 - command I'm telling find a search in the current
directory which is human readable those The
13:31 - size is 1033 Bytes C is suffix that we need
to give in find a command which says that
13:39 - C stands for bytes. So 1033 bytes and it is
not executable so not operator and executable
13:47 - kill the bow. So this is the whole command.
Let me explain you the thing find dot find
13:56 - dot will search in the current directory and
search for a file which is human readable
14:01 - post size is 1033 C. C is a suffix that we
use represent byte and which is not executable
14:09 - so not as an operator and we are stating executable
so so it is not executable. And if I hit Enter,
14:17 - I'll be getting the file name right over here.
If I simply do cat we can see a we will be
14:25 - getting the password for our next level. Let's
go to level six. level six says the parser
14:54 - for the next level is stored somewhere on
the server. So find slash because it is stored
15:00 - somewhere on the server slash main search
on the parent directory or in the root directory,
15:05 - and has all the following properties. Let's
see what are the following properties first
15:09 - property is owned by user band seven. So minus
user bandit seven, owned by group bandit six.
15:16 - So minus group. Mandate six. And it is 33
wide insights. So minus size 33. See, if I
15:32 - hit enter, we get to see lots of permission
denied messages. Interesting. We shouldn't
15:45 - be seeing these messages. Right over here,
we can see that there's a file which is not
15:53 - showing us permission denied. These are some
messages that are been shown to us. But this
15:58 - file is not showing us any message and it
is stating when seven not passwords, so what
16:02 - we can do is we can redirect all these messages
into the garbage bin. So the way we do it
16:09 - is if I just write over here, too, and redirect
all the problematic messages to a test when
16:21 - present in Linux call as dev null to represent
all the problems all the messages that are
16:27 - not our usage, all the errors and all. So
it will be redirected in this dev slash null.
16:32 - And we can see the only file that is not shown
any error, or so we'll be covering it, get
16:41 - the file name, and we will be receiving the
password for the next level. And that's great.
16:54 - Let's switch to Android seven. And I'm storing
my passwords locally in my local machine so
17:01 - that in case my connection breaks, I can log
in directly. So level seven says that the
17:08 - parser for the next level is stored in a file,
or TXT next to the word million. So l s, we
17:14 - have got data dot txt, wc minus l. There are
txt gives us that there there are 98,005 minutes
17:22 - and seven lines if you're wondering what this
means, word, WC stands for word count and
17:28 - minus L is a switch which stands for the count
the number of lines present in this particular
17:33 - file. So data dot txt is having 98,507 line
and out of those lines, I have to find the
17:40 - word million next to which my password for
the next level is present. So I'll be doing
17:46 - CAD data dot txt, and I will be redirecting
its output or I'll be sending its output to
17:52 - a tool called as grep, which is pre pre installed
in Linux shell. So grep and search for the
18:00 - word millionth. So if I do so grep will take
the output of cat data dot txt and we'll search
18:09 - for the word million in that output. And we
have received the password as stated it is
18:15 - next to the word million. So let's exit out
of it. And let's to go eight and 
18:26 - let's switch to user eight. grep is actually
used to search a word and let's see what's
18:37 - level eight. As for us, the possible The next
level is stored in a file or txt and is the
18:42 - only line of text that occurs only once. All
right. So probably there's the vertex D and
18:47 - mu c minus l that will take C there are only
1001 line. So if I dare to do cat data dot
18:57 - txt, my whole terminal will be full of text.
And these are all the random passwords which
19:02 - they have said that has been repeated several
number of times. So beforehand, what I'll
19:08 - do is I'll be sorting them in ascending order.
So salt, so this is sorted and we can see
19:14 - that each password or each string has been
repeated several number of times. So I do
19:19 - not want repeated text I want unique texts
so unique. So only these text will be shown
19:28 - to me that are unique and they're repeated
strings will not be shown. But I want to know
19:34 - how many times these are how many times each
string has been repeated. So for that I will
19:41 - be using unique minus C minus C stands for
count. So each line has been repeated 10 times
19:47 - and they have said that it is the only line
that occurs only once. So we have got a line
19:53 - that occurs only once. So this is the probable
password that we are searching for. And one
20:03 - more thing we can do is we can use grep minus
v 10 minus v is stands for actually grep is
20:10 - used to search for a particular word from
a file minus v is used to tell grep that do
20:17 - not search for that word and give us the output
except that word. So I will be getting the
20:22 - output except the word 10. That is not present.
So, if I do not use this grep command, so
20:29 - what are we getting that all the files or
all the strings having the number or the string
20:36 - 10 in them, but if I use minus V, I'll not
be getting all this and I'll be getting only
20:41 - the line that is not containing any 10. So,
this is the line. So, that's great. Let's
20:52 - save it in nine. Let's log in to band ID nine
and let's see, what do we have in Level Nine
21:09 - the pastor for the next level is stored in
a file erotics T in one of the few human readable
21:14 - strings preceded by several equal two characters.
So it seems that it is not a human readable
21:22 - string, or human readable file is a data file.
So if I dare to print the file, so we have
21:30 - got a we have received a binary file. That's
great. Let's do clear, I will be using the
21:38 - strings command strings is used to show us
the human readable strings out of a binary
21:43 - or our gibberish file. So cat data dot txt
so whichever file has any readable strings
21:52 - or human readable strings are present that
will be shown to us. And they have said that
21:56 - the password is preceded by several equal
tools. So the password is starting with several
22:02 - equal to So grep equals. So we can find that
this is the password because it is starting
22:10 - with several equal tools every line has equal
to but not starting with several equal to
22:16 - but these lines are starting with several
equal to and stating that the password is
22:20 - this and like this is the password out of
intuition. So let's save it as 10 Let's use
22:38 - SSH first once again, let's switch the user
from bandit nine to band 10 and quickly see
22:44 - what's present for us in band aid level 10.
The password for the next level is stored
22:49 - in the file dot txt which contains base 64
encoded data. Okay, so it's encoded data that
22:55 - we have received that is base 64. I have done
a mistake that there are no tapes D so it
23:06 - is a very sensitive West 64 encoded data and
the way you can recognize that it is ending
23:11 - with two equal twos. So normally you get data
or txt and we will be sending the output to
23:19 - a tool we'll call as basics default is installed
by default and minus d for D chord. And we
23:25 - will be receiving the password VEC SR four
is already installed in the nutshell especially
23:30 - in Ubuntu you can already get it and don't
know about other Linux distros. So let's save
23:37 - it, paste it in 11 And if you're wondering
how I know all these commands now of course
23:46 - I'll be I've been using Linux for so many
years but the way you can remember all the
23:51 - switch is number one practice and number two
by visiting their manual and by seeing what
23:57 - are the switches and what else you can do
with the command. If you are not aware how
24:02 - to do that, let me show you. So let's first
go to bench 11 and let us see what is there.
24:12 - The parser for the next level is stored in
a file dot txt where all lowercase and uppercase
24:16 - letters have been rotated by touching position.
Okay, so, ls the txt Now you might have seen
24:24 - me to use switches like ls minus L LS minus
A L A LS minus A LS minus r how can I do so,
24:35 - right? Because I have been using a command
that is mad man stands for manual and manual
24:40 - LS man ls this will show me all the things
all the commands all the switches that I can
24:47 - actually use or that is actually present for
a particular command. So if I use the arrow
24:53 - keys to navigate around the manual, you can
go ahead and read all the switches and use
24:59 - it and practice it in your day to day life.
So you can see that I've been using capital
25:04 - R in my previous challenges it was for recursive,
there has been many, several different things
25:12 - as well, you can see L for long listing format.
So this is how we use it. And you can use
25:19 - minus q to quit it with the manual. And this
is how I remember all the switches. So no
25:25 - worries, if you actually forgot some switch,
you can go ahead and type man stem the following
25:31 - command that we're not aware of. And then
you can go ahead and read about that particular
25:39 - command. So enough of talk we have guarded
or TXT Get Data txt, it is Rod 13 encoded.
25:48 - So it has, so each alphabet has been rotated
13th 13th number of times, not 14 times I
25:54 - would say it has been rotated at the 13th
number. What I'm actually trying to mean that
25:59 - if I say Rod 13 algo. Hopefully by seeing
the image you can understand this is Ratan
26:06 - algo. A is represented NBSO cspd, sq and vice
versa. So G you are. So G for t, u for h and
26:19 - r for E. So it's T H E, so it's a de and probably
it will be password is and there is a random
26:27 - password. So I'll be copying it. And let's
go to all Rod 13. And as we go into this web
26:39 - site, also on website rot.com, you can select
your rod algorithms rotation and Gordon strat
26:46 - self rotation, so they have used rock 13 I'll
be pasting it and they will be showing us
26:50 - the correct that record a string will be shown
to us decode is the correct word that I can
26:56 - use. So exit and let me save the password
and 12. Let's go and mess with level 12. Level
27:13 - 12 says that the password for the next level
is stored in a file data dot txt. Let's go
27:22 - ahead and switch to band 12. Until then, I'll
be having some water. So level 12 stays that
27:32 - is the parser for the next level that is stored
in the file dot txt, which is a hex dump of
27:37 - a file that has been repeatedly compressed.
For this level, it may be useful to create
27:41 - a directory on the temp in which you can work
using MDR for example within that role, okay,
27:47 - so we have to a lot of what is the extraction
and decompression all those things. So if
27:55 - I do ls zero dot txt and cat data dot txt,
okay, this is a hex dump if you're seeing
28:05 - a hex dump for the first time so welcome or
Congratulations, you have seen a hex dump
28:14 - for the first time so let's see what we can
do with that. Before that let me make a directory
28:20 - in the temp folder because I don't think that
I'm having permission over here to make a
28:24 - directory MK DIR for example what to say?
No permission denied Very good. CD tmp. Can
28:35 - I make a folder over here am Korea Serbia
Oh file exist seriously? Who made it? Service
28:46 - Archie great I mean of course many people
are using the same server and I'm not the
28:52 - only person having the the only names Versace.
28:58 - Okay
28:59 - MK dir what to say? Game. Okay, so gammas
does not exist. Let's see the game. Let's
29:13 - copy the data dot txt into that game folder.
29:25 - Let's go to game. And great. So we are having
this file over here. Now let's get data or
29:36 - TX D and give it to x x D minus rx x d is
a tool that is used to generate as well as
29:44 - reverse a hex dump. So minus R stands for
reverse. So if I hit enter, we can see all
29:50 - those of stuff some binary stuff probably.
Let's do clear and let's save this file into
29:58 - another file for this Simple hex dump. If
I clear it out if I do ls we can see two files
30:08 - that are a txt in hex dump and if I do file
hex dump you can see it's G zip compressed
30:15 - data. If you're not aware what Jesus is, in
Windows we are having rar In Windows we are
30:20 - having zip file similarly in Linux we are
having GZ. So I will be renaming this hex
30:28 - dump into hex dot g said which is the extension
of gz file, and I will be using Jesup to decompress
30:38 - this gz file. So remember, I have renamed
or changed the, the name of the file hexdump
30:47 - to hence them tar gz. And now hexdump doesn't
exist. So if I just show you LS, you can see
30:55 - hex dump.gz exist now i will be doing GZ minus
d G zip is a tool that is used to decompress
31:03 - or compress files, so just zip minus d and
then had some tar gz ID. If I do ls we can
31:11 - see that this file has extracted another file
called as hex dump. And let's see what is
31:17 - the file type of that particular hex dump
file. So it's B zip to compress data, which
31:23 - is kind of similar to G zip as well. So I'll
be renaming it to be set to pi two because
31:34 - there used to be zip two, so it's extension
is BZ two. If I do ls you can see hexdump
31:41 - dot visit to exist. So be that into B zip
to minus d hexdump dot visa two. So they have
31:51 - produced hexdump it has produced Hensen file
hexdump again, a gz file. So MVX dam x dot
32:06 - g Zed again, GS F minus d, oops, sorry, GS
F minus minus d, the extracted hex dump again.
32:17 - Now it's a tar archive you can see it's POSIX
tar archive. I'll be using star minus x B
32:27 - x VF as we have actually means or you can
write is x VF like this as well X stands for
32:35 - extract V stands for verbose and F stands
for File. So what I've got I've got probably
32:41 - hex then forgot the final exam. So tar minus
x VF then hex dump. So verbose will actually
32:56 - tell me that what file or files this tar archive
has been has extracted for us. So it has extracted
33:03 - data five dot bin for us. So let's see by
data of five dot when it's at archive again.
33:12 - So this time data by dot bin, it has extracted
data six dot well let's see what is the file
33:22 - type of data saves dot when it's a visit to
so MB data six dot when into data six dot
33:33 - PennDOT does that too. If you can understand
what I'm doing, I am actually renaming the
33:41 - extractor output since it's a visit to compress
data, I have just changed the extension and
33:47 - visit to minus d and then it has extracted
for us data six stored pain once again. And
33:57 - how did I know that because I have already
changed the name data sector well into data
34:02 - six or winner visit to so let's see what our
what type of file it is it is a tar archive
34:09 - again. So let's go data set stored when right?
It has extracted data a dot when read data
34:21 - eight, not well. It's a gz file again. So
MB data 8.12 to data.when.gz and GS F minus
34:38 - D data a dot window cheese and we have received
data a dot bin once again. So file data a
34:45 - dot well it's an ASCII text. So let's write
cat data a dot bin and here is the password.
34:53 - The password is this for our next level. So
there's 13 in level 13 We have got the the
35:24 - password for the next level is stored in Etsy
when it passed when it 14 And can only read
35:29 - by user manual put in for this level you do
not get the next password but you get a private
35:33 - SSH key that will be used to log in the next
level red let's see. So we have got SSH key
35:43 - dot private. Okay so we are going to use this
private key to login into SSH or login into
35:50 - bandit 14 using SSH so I'll be using SSH mandat
14 And since we are logging in using like
36:01 - inside the bandits server itself, so we will
be using local hosts and also they have noted
36:06 - that local host is the host name minus p is
tripled to zero for sure and we are giving
36:11 - an identifier that we do not have the password
but we do have a private key so use this private
36:17 - key to identify me as mandatory so it's asking
for permission and giving it yes and we are
36:25 - inside mandate 14 A quick Who am I you can
see when it 14 And I will be navigating into
36:33 - the et Cie folder where there is a folder
called as when it passed and I will be extracting
36:38 - the password for granite 14 So I have done
so let's open another shell over here real
36:48 - quick or DW banded. Over here present all
the passwords echoed as 214 Let's see what
37:01 - challenges we have in 14 the parser for the
next level can we retrieve where somebody
37:06 - in the past so the current level on port 30,000
on localhost Okay, so the password for the
37:14 - next level can be retrieved by submitting
the password the current level. So we have
37:18 - to submit the password or the current level
on the post localhost and on the port 30,000.
37:26 - So, we will be using Netcat for that Netcat
is a Swiss Army Knife Swiss Army tool sorry,
37:34 - Swiss Army tool which is used to make a TCP
UDP connection between systems which are also
37:40 - used to listen for boats. So you will understand
what I'm trying to say or rather it will go
37:46 - to man and see. You can see it's an arbitrary
TCP UDP connection that listens, you can see
37:52 - all the descriptions you can pause the video
and read it. So NC and connecting on localhost
38:03 - on port 30,000 and it is asking me for the
password of the current level. So if I provide
38:11 - the password and hit Enter, I will be getting
the password of the next level. And let me
38:20 - close it for the next level. So if I hit Exit
and exit echo, store it as 15 and let's go
38:34 - to bandit 15. The straight away from 14th
From 13th we have we are going to bend the
38:43 - 15th That's a great let's go to Manage 15
The password for the next level can we retreat
38:49 - with someone in the past with the current
level of to portrait trees is the one on localhost
38:53 - using SSL encryption. So in Netcat, we were
using HTTP or normal connection, clear text
39:03 - protocol but here we will be using HTTPS that
is SSL encryption SSL stands for secure socket
39:10 - layer.
39:13 - So for that we'll be using a tool called as
open SSL. Actually, I haven't been using a
39:19 - tool for so long so I kind of forgot was the
format so probably it's open SSL as kind minus
39:28 - connect local host is the host name and I
think I have to give the port name like this
39:35 - 30,001 And then I have to give the password
so before that, let me are right path is equals
39:53 - to believe save the password. Yeah So saying
read our blog like this is the output of the
40:05 - thing, if you're confused what actually happened,
let me close the connection, let me clear
40:10 - it. But we save the password in a particular
variable so that I don't forget, I'd be using
40:19 - open SSL, I will be telling that my client
is with whom I want to connect is localhost.
40:32 - And the port I want to connect is 3000 30,001.
If I hit enter, it will show me all the messages
40:40 - that connected can't use a cell get server
name whatsoever, some headers, some certificates,
40:46 - some more information, some handshakes and
all some hex terms again, so we're not really
40:53 - interested. And you can see there's a prompt
that is waiting for us to give the password.
40:58 - So we pasted the password over here. And if
I hit Enter, it says correct and gives us
41:03 - a new password if we could see this block
right over here. So I have given the password
41:09 - of this level that is binded 15. And we have
received the password of valid 16. So let's
41:17 - stop it great. Let's connect to bandage 16
Real quick. The credentials for the next level
41:38 - can be retrieved by submitting the password
the current level to a port on localhost in
41:42 - the range D 1000. To 2,001st Find out which
of these ports have a server listening on
41:47 - them, then find out which of this fix SSL
and which don't. So there is only one server
41:51 - that will give you an exponential the other
will simply send back to you whatever you
41:56 - send it to it. So we have to do some port
scan and some network enumeration. So we're
42:01 - here's the best tool I can only find that
in my arsenal or in my toolkit that is Nmap.
42:08 - So Nmap scan the local host from the port
range 31,000 to 32,000. So NMAP has said that
42:21 - these are the ports that are open. So I'll
be telling and maps Okay, and web do one more
42:27 - favor scan the local host in the given port
of mine only scan local host on the given
42:35 - port that is 31046315183169131790 and 31960.
So do not search anything beyond this mentioned
42:52 - port because you will be taking much more
time. So I have specified only the port that
42:57 - you want to scan for and I want to know the
service versions of each and every port each
43:05 - and every port is running some services. So
I want to know all the service versions and
43:09 - the time that you are going to use is four
so the greater the number the greater speed
43:15 - it is going to reach. So it is like in NMAP
I'm probably not sure the t value is ranging
43:23 - from zero to five. So zero is slow and five
is fastest. So I use T four. So I'm telling
43:33 - NMAP the scan the local host for these ports
and tell me what are the service versions
43:38 - are running hopefully from the explanation
you have understood. And of course it is going
43:44 - to take a lot amount of time. So let's see.
So out of all the given ports we will be we
43:52 - have to find which port speaks SSL or which
word has SSL service running on. So we have
44:00 - to work to save separate those and there is
only one server that will give us the next
44:09 - credential and other will sell back to you
whatever you send to it. Okay, so probably
44:17 - I have to give the password Okay, here they
say that can be achieved by submitting the
44:22 - password or the current level. So you have
to submit the password of level 16 to one
44:27 - of those ports using open SSL because they
have said that it is using open SSL now if
44:35 - I use the up arrow key in the terminal right
here so I'll be able to understand that. Only
44:43 - 80% done and 14 seconds remaining. So let
it do the scan. Okay, we have got that lots
44:52 - of data 100% done okay. Nmap scan report.
These are the posts that are Oh Pattern these
45:00 - are some what are some responses? So the ports
that are open are this 131518 and 31790. So,
45:19 - I will be doing open SSL s client minus connect
we had before that, that et Cie valid pass,
45:36 - when it's 16, let me save the password real
quick, let me copy the password. Rather, what
45:45 - I can do is simply I can do X clip over here,
not installed. Not a problem, what x clip
45:53 - does is clip will basically take this particular
output and it will save it in my clipboard,
46:00 - so I do not have to copy it once again, no
problem. I have copied it and let's use open
46:08 - SSL. So open SSL s underscore client minus
connect localhost on the port, the first port
46:19 - is 31518. And it says echo. So let's say 31518.
That feeling says that it will probably gives
46:29 - us the output that we are providing it. If
I say the password Yeah, this was that server,
46:41 - which they say that others will simply send
back to you whatever you send it. So if I
46:45 - say hello, or are you I am fine. Subscribe
to my channel, all sorts of things. Channel.
47:07 - So this is not the code that we are interested
in. There was one more port that is 31790,
47:16 - let's say. So instead of this 31790, let's
hit enter. And let's paste in the password.
47:29 - And okay, so we have received correct and
we have received a RSA private key file. So
47:37 - let's copy it Ctrl, Shift C. Let's go to temp
folder and make a directory called game it
47:50 - exist. One, two, okay, CD game, one, two.
And let me make a copy of it. So nano RSF
48:02 - file. And I'll be pasting the certificate
over here, or the survey the private key.
48:08 - And I'll save it. So there's my RSA file.
And it is currently having permissions that
48:16 - all people can at least read it the user who
has created the file can actually read write
48:22 - it doesn't matter. Groups can read write it
which matters and other people the whole world
48:28 - can read it. Private Key needs to be very,
very secret. Private Key is not for everyone
48:35 - to share. So we have to change the permissions
so I will be using ch mod this change mod
48:44 - maybe 600. What does 600 means that four stands
for read. Two stands for write and one stands
48:54 - for execute. So six means that for this user
for user, six means read and write only so
49:04 - like it's for and to read right? Zero means
nothing for groups and zero means nothing
49:10 - for us for the people. Hopefully that makes
sense.
49:17 - So if I do ls minus ln right now you can see
that only I am having read write permissions
49:25 - Read Write, as I said, Read stands for four
and write is two. So four plus two is six.
49:32 - So that's why six and everybody's having zero.
And now I will be using SSH. So SSH minus
49:40 - i RSA file bandit 17 At the rate local host
minus b 2220. Yes, and we are inside bandit
49:57 - 17 Who Am I? We are when 17 Let's go to band
17 and I've been a big mistake by removing
50:09 - that thing I would have saved the band 17
Password anyways not the password at least
50:15 - or other what I can do is get at sea band
pass and bandit 17 All right this is a password
50:32 - in case the connection is lost I can actually
login into Windows seven is in this password
50:39 - when layer level 17 says there are two files
in the home directory passwords not old let's
50:51 - see LS password a new password at all yes
and the password for the next level is impossible
50:56 - dot new and in the only line that has been
changed within password at all impossible
51:00 - dot new okay so what this says that there
are two files password dot old so there's
51:05 - the old password file and a new password file
the or the content of old password file has
51:09 - been duplicated into password dot new file
except one particular line and we have to
51:14 - find that line which actually contains a password
of the validating user. So for that we will
51:20 - be using a command called as def def then
password dot bold pass word dot new diff command
51:34 - will give us the difference between password
old password as new and which line has been
51:38 - changed and which line has been added. So
this line has been removed and this line has
51:44 - been added so I will be copying this line
which is the password for bandit 18
51:54 - Let's exit and go but bandit only 18 And did
I do a mistake oh we're in minus 16 Sorry
52:11 - I thought I was in my root
52:14 - directory let's save it Thank God I cook I
cross checked it anyways invalid 18 We have
52:24 - got on manage 17 We have what Okay, so we
have solved it let's go to bandit 18 First
52:44 - of all okay, so whenever we're trying to log
in, it says by connection to band aid that
52:56 - last over the wire at org is closed. And they
have given an oath if you solve this level
53:02 - and see by by even trying to log into an ID
18 This is related to next level that is when
53:07 - 19 So of course we're gonna go to level 18.
The parser for the next level is stored in
53:12 - a file readme in the home directory. Unfortunately,
someone has modified the dot bash RC file
53:19 - to log you out when you log in with SSH not
an issue bandit. What I want to do is probably
53:29 - we can inject command in SSH now let's see
let's go to man SSH I'm not aware man command
53:38 - not found. Let's go to ssh that help. And
here we can see command argument it is specified
53:48 - inside this braces not residence this brackets.
So probably what I can do is SSH paths and
53:59 - then I can simply right over here LS and that
would probably do the job Yes, it has showed
54:11 - readme if I do get reduced over here. So if
we give commands like this, we have received
54:23 - the password over here. That's great. So this
is how we can inject command not inject command
54:30 - this is this is not a vulnerability anyways,
this is a intentionally feature that has been
54:36 - added that whenever connection is made, we
can run the commands real quick. So LS gave
54:42 - us the content and cat readme and gave us
this. Let's do some more fun. There's like
54:50 - this let's do ls LS
54:53 - LS minus L A We'll be getting all those things.
Anyway so this is for level 19 So echo this
55:15 - Never 19 But let's move ahead to level maintain
right now. And let's see what we have for
55:25 - us wedding
55:26 - so level 19 To gain access to the next level
you should be you should use the Set UID binary
55:34 - because we have to tackle with the set UID
binary file in the home directory executed
55:39 - without arguments to find out how to use it
the parser for the for this level we found
55:44 - in the usual place this after you have used
the set UID binary file have, by mistake use
55:51 - this command over here for which I'm not being
able to go inside Okay, so we're inside When
55:59 - did 90 There's a set UID binary file what
the set UID binary file how to recognize that
56:05 - if you see the file permissions real quick
there is s present S stands for set UID binary
56:09 - file what that means is that this file is
having the privilege of bandit 20 But this
56:16 - file is can be executed or can this file can
be run like bandit 19 can run this file and
56:26 - this file has the permission of any 20 So
for the time being bandit 90 will be getting
56:33 - the access of bandit 20s privilege. So the
time taken to run this particular set UID
56:41 - binary file for that amount of time when did
19 will have the privilege of Vandy 20. So
56:46 - we will be using or we will be taking the
taking the advantage of this particular good
56:52 - news or good feature so it's a binary file
so I'll be using dot slash bandit 20 do hit
57:01 - enter and it says run a command as another
user and it says ID so if I say Id it will
57:08 - of course show my ID because I am running
it but of course it will show or give me leverage
57:17 - of bandit 20 So if I do get it see 
bandit pass bandit 20 Now since bandit 19
57:34 - is actually seeing the content of bandit 20
So this is not actually permitted. But when
57:40 - since I'm watching the content or seeing the
content of valid 20 using the binary file
57:47 - so I will be getting the privilege of Monday
20 and hence I can what Oh, it's a spelling
57:56 - mistake and hence I can actually view the
content of bandit 20 So this is the password
58:05 - what I've done is I've given an underscore
over here rather I have to give a slash so
58:11 - this is a password of Vandy 20.
58:23 - Let's go and solve when the 20 Let's see what
do we get SSH paths switch to bandit 20 There
58:36 - is a set UID binary file in the home directory
that does the following it makes a connection
58:41 - to localhost and the port you specify as a
command line argument it then reads a line
58:46 - of text from the connection and composite
the possible previous level with the possible
58:50 - scope it will transmit the path to the next
level when 21 Okay so I have understood what
58:54 - I have to do let me make you understand what
I have to do but before that I have to open
58:59 - another terminal over here another instance
of my Linux shell and I have to SSH into bandit
59:09 - 20 once again
59:20 - so let me go inside when the 29 inside went
20 Let me just get out the password of bent
59:32 - 20 This is the password and let me copy the
password and keep it in my clipboard because
59:41 - I need it. What this challenge is saying that
there will be let me first go over here and
59:49 - clear this terminal out ls there is a binary
file known as su Connect. What this will do
59:54 - is if I execute it, it will tell me that usage
dot slash has to kind of and then a port number.
60:02 - So, it will establish a connection into that
port. And what we need to do we have to establish
60:08 - or we have to connect to that same port and
through the second shell we have to send the
60:14 - password of the current user and and this
final file will compare the password of bandit
60:20 - 20 with the password that we have supplied.
If that matches then only it will send me
60:25 - the password of bandit 21. So, the way we
will do it, I will first establish a Netcat
60:34 - listener over here. So NC minus L V P L stands
for listen V stands for verbose, verbose will
60:43 - give me all the output all back and output
out P stands for board support let it be triple
60:50 - I went for twos or triple to four twos. And
over here, first let me start the connection.
60:58 - Let me start the instance. So it says listening
on port 222 Double Double two. So that as
61:06 - you collect so it will establish a connection
on tu tu tu tu or whatever will happen on
61:11 - this particular port. We can see this on this
Netcat listener just over here. If I hit enter
61:20 - you can see the visit prompt right over here.
And there is it says connection received on
61:27 - localhost 44064. Now I have to paste the password
over here. And if I hit Enter, it gives us
61:36 - a new password. But over here, it says read
the password that we have supplied. Let me
61:48 - okay, the password you have supplied. And
it says we have read the password that we
61:55 - have supplied and password matches sending
next password and we have got the next password
62:00 - over here. So I'll be copying the password.
Let's hit ad set because that's not our use.
62:11 - Let's save the password of bandit 21. And
let me close it from here as well. And let's
62:24 - go ahead and switch the user to bandit 21.
A program is running automatically at regular
62:37 - intervals from Cron. Okay, so we are having
or we have to deal with cron jobs. Again,
62:42 - if we're not sure what kinds of means Cron
is a time scheduler kind of thing. That means
62:46 - if we have something to do at this amount
of time, and you want to do it automatically,
62:52 - you can set a cron job, which I have a trigger
and say it's a time based Job Scheduler, look
62:59 - into Etsy cron dot d for the configuration
and see what command is being executed. Okay,
63:04 - we will be having fun with cron jobs. Let's
see. ls Of course, they find nothing. So let's
63:09 - go to et Cie. And cron dot d folder LS we
find lots of jobs over here. But we are interested
63:18 - in bandit 22. That is running right over here.
So if I do ls minus L a cron job bandit 22
63:29 - is a file which I can understand by seeing
that it is preceded with a minus or a hyphen,
63:37 - which states that it's a file. So I'll look
at then cron job bandit 22. Hit enter. It
63:48 - says add read reboot bandit 22 this particular
file actually this particular shell file is
63:58 - getting executed and it is getting executed
at each and every our minute today's month
64:06 - like that. So star mints wildcard if you don't
know So let's let us go ahead into this deep
64:19 - directory real quick just to see what is actually
happening rather what we can do is we can
64:27 - cat out the content probably Ctrl Shift C
It does a bash file it says ch mod 644 temp
64:40 - and this file, cat Etsy banded past Monday
22 and redirect it to this file. So what we
64:48 - can understand is first it is changing the
permission of this particular folder and then
64:55 - it is saving the password into this particular
folder. So We can go ahead and we can go inside
65:02 - this particular folder hit enter. It says
it's not a direct, okay, it's, it is a file,
65:15 - I guess. Is it a file? Yes, it's a file and
look at get this file and we have got the
65:32 - password over here. So this is a file inside
temp folder, which it has created if you are
65:40 - confused what I have actually done, let me
solve the solution for you once again. So
65:51 - there is a cron job when they 22. We are interested
in getting the password of bandit 22. And
65:56 - let's ignore this 2324 And all those things.
So since these are files, so let's see what
66:03 - these are doing, what are the scripts written.
So there is a script that is getting executed,
66:11 - which is over here. So let's see what is the
content of that particular script. So that
66:20 - is a shell script, which you can see over
here that hashtag our shebang, and then exclamation
66:24 - mark, then slash bin slash bash, CH mod, it's
sending the permission of this particular
66:31 - file and CAD it is getting out or taking the
password Vandy 22. And setting it or redirecting
66:39 - or rather, saving the password or storing
the password in this particular file. So what
66:44 - we have done, we have copied the file name
we have simply wet cat. And we have hit enter
66:50 - and read it. How can we like how did we get
to understand that we can actually read the
66:57 - file because of the permissions 644 I said,
four means read. So everybody can read at
67:05 - six means there is two permissions read and
write that is four and two. So the user that
67:12 - has created this particular file can both
read and write and rest of the world and the
67:16 - groups can read it so we are having the read
permission. So we can read the file and we
67:23 - can copy it we can exit out of it. fo this
is for level 22 Let's go ahead and let's go
67:38 - and solve bandit 22. It says that a program
is running automatically at regular intervals
67:52 - from cron, the time based Job Scheduler looking
at security for the configuration and see
67:58 - what command is been executed look at the
shell script written by other people is a
68:02 - very useful skill the script for this level
is intentionally made easy to read. If you
68:07 - are having problem understanding what it does
try executing it see the debug information
68:12 - it prints so let's go to first et Cie brown
dot d and since we are logged in as bandit
68:22 - 22 So we are interested in bandit 23 So cat
cron job bandit 23 And we can see the shell
68:32 - script that is being executed as this so let's
go up it let's get it it says hashtag dollar
68:44 - hashtag Islam question mark when bash my name
and then this nonsense that is being run by
68:52 - user Vandy 23. So who am I will give us 123
So my name because 223 My target is equals
68:59 - to echo I am user when the 23 taking it giving
it as MD five some
69:07 - Okay, copying the parser file it's a valid
password My name that is manly 23 So copying
69:16 - at Symantec pass manly 23 So to temp and then
the file name over here my target cat at see
69:26 - when the 23 it is Echo okay the cat at Savannah
23 to my target okay. So what this is actually
69:35 - doing is My name is equals to who am I? So,
in this case where am I will be banded 23
69:48 - My target is equals to echo I am user my name
so echo I am user or mandate 23 and it is
70:04 - being passed to MD five some so it is being
encrypted into MD five algorithm and then
70:13 - there is a cut command so what will actually
happen is if I do not get like this so there
70:21 - is a minus sign right over here so to remove
this minus sign they're using this command
70:27 - command
70:29 - if I also give okay
70:34 - MD fives if I also give this and hit enter
I will be getting this file name over here
70:43 - this MD five some if I copy it, and they are
storing this thing into a variable called
70:51 - my target and that's what they're saying that
cat at sea when did When did 23 The parser
70:59 - of when the 23 is installed into temp my target
so if I go to CD slash temp slash my target
71:10 - not CD since they're getting it so it's file
it will be cat and here is the password 
71:27 - so let's save the password real quick and
this is for 23 great let's go to level 23
71:46 - Let's see what do we have waiting for us normal
cron, please I'm tired of it. Oh again some
71:56 - cron jobs okay. So a program is running automatically
at regular intervals from from the time this
72:03 - job scheduler look in this for configuration
and server command has been executed same
72:07 - thing. This level requires you to create your
own first shell script Okay, so this is a
72:11 - very big step and you should be proud of yourself
when you beat this level. know to keep in
72:16 - mind that your shell script is removed once
executed, so you may want to keep a copy around.
72:22 - All right. Let's see. CD et Cie slash cron
dot d this is the folder where all the cron
72:35 - jobs are listed and we are interested in bandit
24. Since we are logged in as Vandy 23. So
72:41 - get cron jobs bandit 24 and the shell script
that is being executed is this let's read
72:52 - the shell script and it says again bandit
24 It is going inside Where's spool my name
73:02 - and foo my name will be of course their mandate
24 It is doing for i n star dot star so whatsoever
73:14 - file name with whatsoever extension do if
filename not equals to dot and file name not
73:24 - equals to dot.so if the file name is not a
hidden file or not a hidden directory then
73:32 - I'm not sure what this is doing. Stat minus
owners format wasn't viewed or slash. So basically
73:44 - what I can understand is it is kind of executing
the file after 60 seconds because timeout
73:57 - you can see minus four seconds I don't know
what nine means but 60 seconds and dot slash
74:03 - alright so whatever file is present inside
where spool to end where many 24 Fu the files
74:11 - present inside there are once executed, it's
six second and then they are being removed.
74:19 - And it is being executed by bandits 24. So
we can actually see the password of Vandy
74:26 - 24. Great, so I'm having a very fishy idea.
And I think that's what they want us to do
74:34 - to create our own first shell script. So I'll
be going inside CD where spool there's a bandaid
74:43 - 24 by two Ls I get to see full over here.
I don't know whether you can see or not. Let's
74:51 - go to full. Not full sorry, full. Of course
I cannot do ls I need to make a file. So let's
75:05 - do Nano. And suppose the file is give me pass.sh.
And inside that I've arrived at hashtag shebang,
75:22 - dollar slash bin slash bash as to know that
we are writing a bash file and I will be redirecting
75:30 - cat at sea when that boss slash bandit 24
password to them I might have trouble doing
75:47 - this because I'm not having any folder created
by default. So what can happen is if I close
75:58 - it right now, and before actually making the
file, let me go to the temp folder and make
76:05 - a directory so that I can receive the password.
So MK dir gay game 255 CD game to buy five
76:19 - whatsoever and now I'll be going to this where
spool bandit 24 Who and then I'll be making
76:31 - a script over here past.sh And then I'll be
writing slash bin slash bash, get et Cie.
76:48 - Then when that boss and I do not have so much
of time because it is going to execute every
76:56 - 60 seconds mandate 24 and save it inside a
temp folder inside game 255 as a file name
77:08 - pass underscore received, and the spelling
is wrong which we shouldn't be careful about
77:16 - caring about Ctrl X Y and before hitting Enter
the file name is pas.sh so ch mod 777 fast.sh
77:27 - At least they were this time sorry date it's
55 So after five seconds so we should be getting
77:43 - our file if I do ls and before that, that
we do that and of course 60 has been passed
77:55 - or not passed in the past so if I go to El
Sol real quick demo
78:05 - game 255 We have got nothing that's weird
probably we were late and when you I having
78:20 - the past.sh again it's for the six over here.
Are we having this file
78:31 - passed on sh no we don't rather we have I
don't know man no boss.sh We do not have that.
78:47 - So I have to make it once again. And with
that let's see slash bandit underscore paths
79:00 - slash bandit 24 redirect it to them. Game
255 under name paths received and Ctrl X Y
79:20 - enter ch more 7772 paths.sh two paths dot
s h and let me see the time that's 53 Let's
79:32 - wait for seven seconds. Till then let's go
to them and game 255 We have nothing current
79:40 - over here. So we have not attained that's
pretty strange. We are 
80:02 - having nothing According to it, which should
be executed and we have given execution permission
80:11 - as 777 this should have been deleted after
executing but I don't know why it is not getting
80:19 - executed. Rather if I go to get at see bended
pass bandit 23 cyl, we're getting the password.
80:39 - So let me keep a copy of it real quick. So
what I can do is I can make a file over here
80:50 - before that let me copy the whole thing. Nano
start sh bin bash this one 24/7 TMP slash
81:05 - game 25. Slash password by default ls pas.sh
Is their LS minus L A. We have to give readwrite
81:28 - permission. So, as far as La it is having
readwrite permission now I'm going to
81:55 - have lots of times so I'm going to copy this
path.sh into where spool ban the 24. Who.
82:13 - And its check date. It's 42. If I do ls slash
var slash spool
82:24 - and then mandate foo, and then pass.sh, it's
present over here.
82:36 - And it has already been executed. But for
some reason, we are not getting the file.
82:45 - And that's a very strange, I don't know what's
wrong with this. If I send the password file
82:56 - the shell file once again. And if I do ls
minus l, it is having read write permissions
83:04 - by due date, we're having much more time right
now. So this should have been working. I'm
83:22 - not sure why it isn't. And it should be working.
Come on these work. And it is not working.
83:43 - That's great. And it has been deleted as well.
So let's see, what wrong am I actually doing?
83:52 - Let's go and read the source file once again.
But I realized real quick over here that one
83:59 - thing that I was doing wrong that my this
particular folder that is game 25 is not actually
84:12 - having the permission to receive any kind
of files because it is not having that permission
84:19 - to receive files or to modify the like due
to the file permission issues. We are actually
84:25 - facing this problem. So what I want to do
is CH mod 777 I'm giving readwrite execute
84:34 - permission to this particular folder it is
game 255 And then if I CD game 255 And then
84:45 - if I send this What is it time? I don't know
where that thing is. There it is. copy for
85:02 - that, let me say, Okay, we have already passed
the time, CP past.sh to spool manager in the
85:12 - port pool if I send it over there and if I
do ls minus L A, inside that pile that is
85:21 - present in that spool folder spool when it
into portfolio, so it's having read write,
85:27 - execute, and probably this time, we will be
getting the file, and it's 37. Let's wait
85:35 - for this to become 60 then we might receive
our password file. So if I give dead it's
85:47 - 54 Let's do ls obtain nothing, nothing. And
here we received our password by default file.
85:59 - That's great. So due to those file permission
issues, we were not being able to get the
86:09 - content that means that script was actually
sending the password 24 file, but we were
86:15 - not being able to receive it due to some file
permission issues. So silly me, I was not
86:22 - aware of it. Ctrl Shift C. Exit it and echo.
Save it to 24 Let's go to 24 a daemon is listening
86:41 - on port 30,002 and will give you the password
for when 25 If given the password for Vandy,
86:48 - 24, and a secret memory four digit PIN code
there is no way to retrieve the PIN code especially
86:53 - except by going through all of the total commission
called brute forcing.
86:58 - What does that even mean? Let's see. 2424
ls anything? Nope. Shall we go to Etsy, pronto,
87:18 - D anything, they say 25 underscore route.
87:27 - Daman is listening on port 30,002 Okay. All
right. This is not related to cron that I
87:40 - have understood. Let me clear it out. If I
do NC and local post and try to connect on
87:54 - 30,002 I am a PIN code checker for using a
band 25 Please enter the password for us for
88:03 - user when it 24 and secret PIN code or single
line separated by a space that means if the
88:10 - password is a rather if I give the password
and 1111 Oops, it is having a timing as well.
88:22 - What the hell 1111 It says wrong presented
the correct PIN code 1234 Wrong again. Okay.
88:34 - So we need to do a brute force. That's great.
So the way we can do it of course by using
88:41 - for loop so for i n 0000 It's a for combination
29999. And do what I'm trying to do is do
88:57 - echo dollar I done and I am not a code alright
I will be saying echo the password and then
89:12 - Dolerite done and whenever you will make the
combinations send it to NC on localhost at
89:23 - Port 30,002 And do not encode this thing it
is much more hazardous ekomi dollar this and
89:37 - actually perform this particular operations
with dollar eyes. So what I have done is let
89:43 - me make you understand real quick for i n
000 to 99994 zeros 249 So it will make combination
89:53 - of 000000010002 and so on till 9999 And on
each iteration is the value of But the value
90:01 - will be stored in this variable i so i have
said do during each iterations it will show
90:07 - me the value of it that is on first iteration
to so mysterious 0001 On second question like
90:13 - that and it needs to perform an operation
give this the password and then dollar is
90:21 - $1 I will the value will be stored and I'll
be taking the whole output and since I'm using
90:27 - a pipe operator I'll be taking the whole output
and sending it to and see localhost this so
90:35 - what this will happen now is a magic if I
hit ENTER
90:42 - did not supply enough data did we fail we
shouldn't What the hell is that? Well what
90:59 - command not found great that was that what
I was expecting I can do echo and then can
91:18 - I do is it that 2002
91:23 - a daemon is listening localhost Let's hit
Enter Oh we got it fairly did not supply enough
91:32 - data whatsoever the parser for the user bandit
25 Is this great. So, let me just copy it
91:46 - and why it was showing please You did not
supply enough data because this was being
91:54 - sent dollarized only the PIN code was been
sent but this Damon needed two parameters
92:01 - that is the password of the current level
and then the port and then the PIN code. So
92:06 - if I remove this thing if I remove this dollar
echo from URL if I simply do like this it
92:21 - will say Please enter the correct PIN code
try again and then the and then the password
92:25 - there is a 25 is this
92:26 - great let's copy it perfectly echo and store
it on 25 Let's go and have a look on challenge
92:46 - 25 was waiting for us logging into band 26
from 25 should be fairly easy the shelf of
92:58 - any 26 is not been bashed with something else.
Find out what is it and how it works and how
93:04 - to break out of it.
93:08 - So we're in When did 25 ls bend it to Anderson's
dot SSH key so SSH minus i the identifier
93:17 - name they use it user name is bandit 26. Add
the rate local host minus P two to zero. Hit
93:29 - Enter click on yes I mean it says connection
to local host closed it says the shell for
93:39 - user Vanitha innocence is not bash. What shell
is being used with Vandy 25 bin bash let's
93:48 - go and see cat et Cie pass WD file spool of
gibberish written rep bandit 26 It is using
94:09 - using short text. So what we can do is user
been short text and I see cat user been short
94:28 - text now Okay, looks like a shell command
export term because to Linux execute more
94:43 - parent tech dot txt I don't know what that
means. txt dot txt is it the banner that they're
94:52 - printing? Probably I have no idea is it this
banner because it is different from what we
95:00 - have, like, it is different from this banner?
Probably I don't know. So what we can do is
95:11 - there is a more. Can we do anything with more?
I haven't used more since long time. Let's
95:17 - see what we get over here. Can we execute
commands in more? Oh, we have got something
95:26 - by the way. Vi is used to start up an editor,
specifically VI or Vim. Okay, so environment
95:38 - shell. Okay, let's do one thing, what more
actually does it if I could give you a good
95:47 - example. If I go CD over here, we have some
time. Let's make a file touch by file dot
95:58 - txt, and let's run a loop for i n 0002 For
example, five by five 
96:17 - to echo dollar AI and file dot txt If I just
get by Allah txt, you can see all the numbers
96:40 - are over here. But what more will do is if
I show it to you like this, and if I write
96:50 - more and then file dot txt, it will give us
a prompt till here and we can use the down
96:58 - arrow key to navigate you can see I'm using
the down arrow key
97:03 - to see the content and then it says And so
it is giving us a prompt over here and that's
97:13 - what we will be using right now. So if I do
this thing once again if I give vs. Forever
97:28 - The I have to make the screen much bigger
or the text much bigger whatsoever I do doesn't
97:37 - matter.
97:38 - That's it. That's the vs I have to make the
screen much smaller I have understood can
97:50 - exploit it. Okay, so you can see we have got
something like this. Oops. Again, we have
97:59 - got to stop and then I will be pressing V.
So I am inside the VIM shell. That will keep
98:09 - it like this. And let me minimize it. I'm
inside them. Now throughout right how to exit
98:20 - vim I'll be showing you not worry for that
probably it's, it's to set if I could zoom
98:32 - it for you.
98:34 - Shell is equals to bin bash and like the unknown
option shell okay
98:56 - I have forgot vim as well. I mean this was
can you write like that? No we cannot Yes,
99:11 - I know that I'm in insert mode as to oh, we
have some are entered into insert mode and
99:24 - I don't want that how to 
exit when or how to not exit them how to take
99:43 - them out of insert mode. Hit escape, okay.
Escaped. Okay, so it is and if I hit i It
99:59 - doesn't exist. mode if I hit escape it is
a normal mode.
100:03 - Great.
100:04 - Actually not vim it was vi to set variables
in VI Yeah, it was it's to set was still said.
100:33 - So, the gods to bin bash and then again is
to Shell roughly let's see this to let go.
101:00 - Alright, so I believe we are facing certain
problems. Guess what? Let me try that once
101:13 - again. If I do like this, since it is using
more, so we should we stopped over here, hit
101:22 - V. So we are in vim right now
101:25 - to customize that maximize at least let's
set it over here in a proper size is to our
101:38 - to read a file that is et Cie slash banded
underscore path slash bandit 26. Is to R stands
101:54 - for reading a file. Warning changing read
only file please enter a try command to continue
102:02 - enter. And yes, over here we have received
the fire the password Ctrl Shift C of level
102:11 - 26. And how to quit is to Q. Underscore
102:19 - hopefully. Nope. Yeah, but Is that Yeah. Epstein.
Hopefully it's done. I don't know. But it's
102:30 - to underscore to maybe.
102:34 - Let's see how to do it is to underscore Q
oops, sorry. It's still underscore Q or is
102:47 - still Q Yeah, it's Tokyo whatsoever. Doesn't
matter. Let's exit out of it. And Echo is
102:56 - the password that we have got and this is
off 26 That was an interesting thing. I didn't
103:04 - use Vim or vi for so long I actually don't
use so often since I've got Visual Studio
103:12 - Sublime Text and many other cool text editors
but that connection demanded less or closed
103:17 - what and why is that so let's go to level
26 And let's see what challenges we have them
103:25 - good job getting a shell Now hurry up and
grab the password for bandit 27 Oh I forgot
103:32 - the value two and six is not using bash it
is using short text or something like that.
103:38 - Can I use commando here like ls but what is
that that is none of our use. Go good job
104:00 - getting a shell now hurry and grab the password
for bandit 27 commodity we need to solve this
104:05 - level is Ls Interesting thing is how to get
inside is when 20 sets. What we can do is
104:12 - if I go inside bandit 25 let's clear it out
let's search for the word command. So there
104:34 - are various ways we can use command in Vim.
Is there any word for Shell so what we can
104:46 - do is we then do the same stuff. We have got
this key and I don't think that it is present
105:02 - over here. are red SSH minus I this that is
that key bandit 26 at the red local host minus
105:14 - p 220. And since it is using more it should
stop and I'm using V over here and now it
105:27 - should be fine and now I'll be using is to
set shell is equals to bin slash bash and
105:41 - once it is said hello okay so this set not
everything is to shell and we have got real
106:01 - shell over red so, if I do which bash you
can see we're using user bin bash. So, we
106:11 - have actually set the variables and like previously
I was giving capital letter variable but over
106:19 - here we had to give small letters so that
was working if I do ls we got band 27 do so
106:28 - dot slash when the 27 do run command as another
user so simply get Etsy bandit for us and
106:39 - bandit 27 and we will be getting the password
for bandit level 27 That's great. Let's exit
106:47 - out of it.
106:49 - Let's close it is still Q it's closed or closed
was that exit echo as 27 Now let's go to bandit
107:09 - 27 user let's see what do we have in level
27 There is a git repository at this location
107:22 - the password for the bandit 27 kit is same
as the user manager 27 clone the repository
107:26 - and find the parser for the next level.
107:29 - clone the repository that means I have to
go inside temp make dir game 123 CD game 123
107:50 - Let's do a git clone of this repo and hopefully
this replay existed and have it enter yes
108:11 - What permission denied we're trying to login
into server on port 22 What that means even
108:22 - just if I do ch mod 777 And then game 123
Is that fine what the hell please make sure
108:49 - you have the correct access rights and the
repository exist what the hell that even means
108:55 - permission denied could not read from remote
repository 
109:05 - that's one big issue and I don't know what
the to what I can do one thing is since I'm
109:16 - not getting the permission to do is I'm using
another command that is make temp so it will
109:26 - make a temporary folder in the temp directory
109:29 - hopefully it was this I don't remember so
this folder has been created for me. So if
109:48 - I go inside this folder and then if I do get
clone and then
109:54 - SSH kill repo Then hit Enter oops, sorry this
says problem again and we're trying to log
110:17 - into the server on port 22 which is not intended
and it says please make sure that you have
110:24 - built access right which I do have but also
the repository exists which I'm not sure what
110:30 - I don't know what why this is being shown
to me. Good ad thread local host Shall I do
110:41 - something like localhost is to zero Yes, finally,
we have solved this. So local those other
110:57 - two to zero valid 20 sevens password for the
password valid 27 at
111:08 - RTW bandit. 27. So let's face it, hit enter.
And we have received CD Ribault so CD raphoe
111:25 - ls gridway. Get read me the password to the
next level is this.
111:36 - Okay, so exit. Go this next level that is
28. Great. Let's go to level 28. And I think
111:51 - this has been changed recently because I have
seen many write ups and many other solutions
111:57 - and walkthroughs in nowhere. I have actually
got the solution that I was facing, but private
112:05 - regret corrected and I'm happy for that. Let's
go to level 28. It says there's a git repository
112:13 - at this. So let me copy kaput before that
make them minus d CD slash temp slash DMP.
112:36 - dot j UGVNGO G proabably and inside that git
clone this and after localhost just add the
112:54 - port number 2220 and hit enter. Click on yes
113:01 - it asks for the password of level 28 Let's
see. This password pasted over here. We have
113:18 - worked report CD repo. ls that readme.md We
have got Catherine Minard. MD It says as the
113:39 - source for level 29 credentials and password
is hidden. We have Git installed red.
113:46 - And are we having the Git folder? Target Yes.
So that means we can see the comments that
113:58 - has been made. So Git commit sorry I mean
114:04 - commits I believe I don't know what was the
command let's see the Git what to say those
114:15 - are cheat sheet let's open that okay, so I
was finding for logs. So git log. So it says
114:57 - add missing data. So here's a commit Okay,
115:01 - so copy and get checkout probably, let's go
ahead and see was that yeah great checkout
115:16 - and then the COVID name, hit enter and then
if I do get read we probably get in the password.
115:29 - So you can see what I've done is a rather
I would suggest you to go ahead and learn
115:35 - it basically I have searched for the logs.
So the user has get first of all is a version
115:43 - control system okay. So, you get logs gives
me the logs that number of time the particular
115:49 - file has been changed or the readme.md file
has been changed and these are the some tokens
115:55 - you can say some identifiers and I have used
this and I said that show me what changes
116:02 - we have done on this particular identifier
and at that point of time, they have removed
116:08 - this text and I've entered xx and all those
things. So this is the password so it exit
116:16 - there go this and save it to level 29 Now
let's go to level 29 Real quick level 29 stage
116:36 - there is a good report repository at this
the parser for the 2019 same clone the repository
116:45 - and find the password for the next level.
Let me clear all these things. Make them minus
116:53 - d and I'm not going to copy this and I know
that when I'll be copying this my repository
116:59 - clipboard will be replaced so CD law inside
this and the simply clone the stain Ctrl Shift
117:19 - C oops Ctrl C and Ctrl Shift V over here it
will ask me for the password for sure and
117:26 - it's doing teen mine
117:33 - click on yes
117:36 - oh sorry. What I have done a mistake that
I did not add the port on Yes. The password
117:51 - I've pasted received. See the repo. We have
got we have got a readme.md no password in
118:07 - production. Tell me what are the branches
present is master and what are the branches
118:16 - present? It's dev master and slides Dev. Good.
Love the pics user name. initial commit of
118:31 - readme no password in production 
open the cheat sheet Okay. Check out dev readme
119:00 - and here we have got the password of mandatory.
So what I've done is they said that no password
119:22 - in production. So it was in the master rank.
That means you can see it as the main branch.
119:26 - But when I did virus R it showed me the several
branches as well there was the Masters plus
119:33 - Dev. So dev stands for development. So if
it is not in production, it is in development
119:38 - phase. So I said that a git checkout and then
dev so I want to visit that dev branch that
119:46 - development branch and they said that switch
switch to a new branch Dev and then I did
119:51 - ls to see what other folders present in that
branch folders and files. So when I did get
119:57 - rid we I got the file this
120:00 - So that was interesting echo this 230 Let's
switch from user 29 to user 30. There's a
120:20 - git repository clone the repository and find
the password of text level
120:29 - make them minus d go to this particular folder
and git clone this particular repo Ctrl C
120:51 - Ctrl Shift V and in local host press 2220
121:02 - that we copied over here give the permission
give the password hit enter clear LS and CD
121:13 - repo LS good
121:24 - readme.md just an empty file okay that law
of part logs log initial commit this which
121:47 - is actually this get branch there's a head
branch and a master branch What can I do so,
122:02 - what we can do is if I see over here will
not get any other things if I do ls minus
122:22 - L A and PE go to see the dot get we get many
things and if I do ls minus r probably we
122:38 - will be saying many many things 
is kind of confusing if I get out description
122:57 - nothing get config with a good index index
it's 
123:12 - not taking good head nothing as well if we
go to CD info exclude Of course not tank and
123:38 - if we go inside CD logs good heard nothing
Wickard CD refs do we get anything if I go
124:02 - to box obtain we get over here do we have
tags and get I don't know if I if we are actually
124:20 - having tags or something like that good. Can
you tag someone because when I was having
124:32 - your Tober fest when I participated in that
hack Tober fest over there there's something
124:37 - called a stag but in the cheat sheet there
is a table of stairs. So, yeah, so good tag
124:45 - will list all the tags out there. So, good
tag so there's a tag called a secret. Okay,
124:55 - that's fine. How to see tag and get Show and
then tag. Okay, good show. Secret. And hopefully
125:07 - that's the password for the next level which
is 31. So let's see let's go to level 31 This
125:38 - says is a git repository at this okay Mac,
temporary directory and this directory take
125:54 - me and I want to do a git clone. But before
that
126:01 - give me the password of this one great and
localhost is 208, enter. Yes, I have copied
126:32 - the password already.
126:34 - Instead CD repo that ready, we that's that
readme May I come in master file and the time
126:48 - your task is to push a file in a remote repository.
Okay, monster so let's make a file echo where
127:08 - I come in and keep it in key dot txt there's
a key dot txt out there. And there's a Git
127:28 - ignore file as well. So let's go ahead and
read that. Git ignore file. So it says any
127:36 - file that comes in dot txt will be ignored.
So I have to remove this otherwise, if I push
127:43 - this key dot txt into the master branch, this
will be deleted. So nano dot Git ignore and
127:54 - I have to remove this Ctrl X Y enter. So now
if I do care, the Git ignore that thing is
128:04 - there. Or I could have just removed the Git
ignore file as well. Our Git ignore simply
128:13 - remove it. And then I think git commit ad
really good ad Okay, so good. Ad key dot txt
128:31 - good. Let me see the status. Yes, new file
has been asked. Added it is in unstaged manner,
128:47 - so we have to stage it. So let's comment.
Git commit minus m let's give a message. I
128:55 - don't know what to do. Let's simply get commit.
What is that I have to give a message right?
129:07 - Okay. That key dot txt one file change create
more key dot txt and now git push remote branch
129:35 - Okay, so what if I do only git push? It requires
the branded 31 local host password. We Yeah,
129:52 - I am already having it. Let's face the password.
It failed as well. Learn here is the password
130:01 - for the next level. Okay, we have done it
130:04 - so let's copy it exit and echo is probably
the password of level 32 How long it was 31
130:20 - right level 32 So let's get ahead and let's
solve when did level 32
130:32 - Let's see what is there in level 32 After
all this good stuff it's time for another
130:38 - escape Good luck Welcome to uppercase shell
that means ls what the hell's that LS Hello
130:51 - not found ls not found what the hell bad okay,
so it is using Bourne shell over here probably
131:12 - it is not a normal bash shell it's born shells
it's bill you are the wall shell I don't know
131:26 - what right once these are only two things
one shell manual
131:44 - and it is taking two arguments okay so after
reading this manual, what I can find is that
132:00 - if I press Ctrl C, of course the connection
will be closed. And what I've understood there
132:06 - whatever commands I'll be writing it is getting
converted to uppercase. That means it is somewhat
132:15 - related to positional arguments which I found
somewhere over here regarding all this you
132:33 - can see parameter substitution and command
substitution. So in this parameter substitution,
132:38 - if I give dollar zero let's see what we get.
We get a shell over here if I do ls we get
132:51 - a PowerShell you can see and if I say which
bash rather which bash it says we are in usual
133:02 - user bin bash so we have got a shell over
here a bash shell and now we can do an apt
133:10 - see when that underscore pass and there's
not an interactive shell resists the normal
133:19 - shell and banded it is I think 32 And we need
a password for 3333 probably 43 it also yes
133:37 - so here is the password for bandit 33 So let's
go ahead and go that's 233 let's write and
133:57 - said and to sit over here and Ctrl C
134:08 - 33 No such file seriously no such file oh
oh TW when that and then 33 and remove 33
134:31 - from here
134:35 - and remove file or txt from her which I have
made to show you how to mess with the more
134:42 - command. Let's go to level 33 which is the
last one. At this moment level 34 doesn't
134:51 - exist. ls I don't know what to say. ls readme
dot txt cat To readme dot txt it says congratulations
135:03 - on solving the last level of this game at
this moment there are no more levels to play
135:07 - in this game however we are constantly working
on new levels and will most likely test one
135:12 - scheme with more levels soon keep an eye out
keep an eye out for announcement on our usual
135:17 - communication channels in this meantime, you
could play some other war games if you have
135:21 - an idea or some medieval please let us know.
All right. So this is the official end of
135:26 - the bandit war game and posted or hosted by
over the wire a big big shout out and thank
135:37 - you for over the wire to launch such a great
wargame which has taught many of you including
135:45 - me, even after solving learn letter after
solving or after being in cybersecurity still
135:51 - good band it has been proven very helpful
for me in refreshing on all those in revising
135:57 - my basics and of course I believe it has helped
you in getting your feet wet and giving you
136:04 - a very good and what to say a very good glance
of how tall you should be with your basics.
136:11 - So this was a beginner friendly room and hopefully
you have learned a lot from this rule and
136:19 - see you guys on the next one with another
video and till then have a great day and goodbye