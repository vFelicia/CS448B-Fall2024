00:00 - so thanks for having me it's great being
00:02 - here thanks to robert and daniel for
00:04 - giving me the opportunity to speak
00:06 - what we're going to discuss today is
00:07 - just the general overview to testing i'm
00:09 - going to talk about what is testing why
00:12 - do you need testing um it's not going to
00:14 - be too technical all right so if you
00:16 - already have some experience
00:18 - uh i hope it's not too boring okay
00:21 - um
00:22 - i was planning on doing like a quick
00:24 - live demo at the end where i can
00:26 - actually show off how you can test some
00:28 - small web application which
00:30 - unfortunately since
00:32 - technical issues we can't do today
00:34 - but i'll just walk you through the code
00:36 - on github real quick and see to make the
00:38 - the best out of it i guess
00:40 - right
00:42 - quick bit about myself where am i well
00:44 - my name's hans like i said already i'm
00:46 - not a front-end dev okay
00:48 - yeah full stack of front-end devs i am
00:51 - not i actually have a java and c-sharp
00:52 - background and just recently got started
00:54 - with ruby so if you see any code that
00:56 - looks like garbage
00:58 - [Music]
00:59 - is not my natural habitat okay
01:02 - i
01:03 - am tutoring at the technical university
01:05 - so i'm helping out with teaching there
01:09 - coincidentally in the subjects testing
01:11 - and software quality assurance so you
01:14 - see how this how this works yeah and i
01:16 - myself am a big fan of testing why do i
01:18 - like testing my first job was in a
01:21 - testing firm
01:22 - um
01:24 - and yeah i like testing because it like
01:27 - protects us from the code from the evil
01:30 - that is code okay what do i mean by that
01:32 - um
01:34 - no program is kind of hard a lot of
01:36 - people have written about how software
01:37 - today is kind of sucks i remember an
01:39 - article i read that was titled the
01:41 - coming software apocalypse it was really
01:43 - like oh my god we're all gonna die
01:46 - um
01:47 - problem is
01:48 - software's really complex today and that
01:50 - causes a lot of issues okay
01:52 - um what i mean by software is very
01:55 - complex
01:56 - quick guessing game for you all
01:58 - what do you reckon an average car like
02:01 - not average but luxury car today like
02:04 - smart car uh how many lines of code does
02:07 - the software in that car just the
02:09 - software stirs the car and everything
02:10 - how many lines of code are in there you
02:12 - reckon it's going to be 1 million is it
02:14 - going to be 10 million or 100 million
02:16 - give me a show of hands so i know you're
02:18 - not asleep
02:19 - who thinks it's 1 million
02:21 - okay
02:22 - one all right who thinks it's 10 million
02:24 - 10 million lines of code in the car
02:27 - a bunch of people who thinks it's a
02:28 - hundred million
02:30 - just one okay was a trick questions
02:33 - actually 600 million lines of code okay
02:35 - 600 million lines of code for a freaking
02:37 - car
02:38 - that's what we've come to complex code
02:40 - means a lot of
02:43 - errors
02:44 - all right
02:45 - um
02:46 - you know it's like you touch some piece
02:48 - of software and basically breaks as soon
02:50 - as you're like poked it
02:52 - an example i always give for critical
02:54 - software errors is the story of the
02:57 - ariana
02:58 - anyone has a clue of what ariana what
03:00 - the ariana is
03:02 - exactly yeah it was a rocket that was
03:04 - built in 1996
03:07 - by european space agency
03:09 - and the story about ariana's rather sad
03:11 - one they built this thing they developed
03:13 - it for 10 years cost about 400 million
03:15 - bucks then i launched it and it went up
03:17 - like four kilometers and then it blew up
03:20 - because someone
03:21 - didn't convert some floatings into ins
03:23 - properly and the rocket did like a flip
03:25 - and then went bang okay 500 million
03:27 - lines of code because of a teeny whiny
03:29 - era that was almost no more than 20
03:32 - years ago uh a more recent story um
03:35 - maybe you followed uber self-driving
03:37 - cars
03:38 - um there has been
03:40 - an issue with one car in the beginning
03:43 - of august the car basically ran over
03:46 - pedestrian like full stop just went
03:48 - through
03:50 - and
03:51 - they found out well it registered her
03:52 - well no problem with the sensor sensors
03:54 - but for some reason the car decided not
03:57 - to stop
03:58 - okay so i just went um which is very sad
04:01 - so
04:02 - we have some issues with software
04:04 - there's a bunch of problems
04:05 - what can we do to avoid these issues
04:10 - obviously we do testing okay so
04:14 - it doesn't matter if you talk about
04:16 - cars
04:17 - or
04:18 - web applications or just small functions
04:22 - the concept's always the same you have
04:24 - some components some system and it's
04:26 - supposed to do something
04:28 - in a way of like a car is supposed to
04:30 - start properly your web application is
04:32 - supposed to display some values properly
04:34 - this function right here
04:36 - is supposed to
04:38 - divide some numbers calculate the
04:39 - division easy peasy how do you know if
04:41 - it works
04:43 - well
04:44 - how do you check if your calculator
04:46 - works you try it out type in some
04:48 - numbers
04:49 - does it display the correct result if it
04:51 - does so good if not you found an issue
04:53 - this is what testing does you take your
04:56 - system in some state precondition
04:59 - you chuck some values in there
05:02 - and you check if what it puts out is
05:04 - correct that's basically it this is a
05:06 - test okay
05:07 - um
05:09 - what's the issue with this piece of code
05:13 - yeah so what input would make that fail
05:17 - uh yeah if b0 exactly in any other
05:20 - language if this was not javascript
05:22 - it would be an issue this javascript so
05:25 - it just puts out infinity so if you want
05:27 - your code to behave that way then it's
05:30 - actually correct um
05:32 - might be a bug in the javascript
05:33 - language i don't know
05:35 - might
05:36 - or feature we might argue that yeah
05:39 - so we got covered what the test is it's
05:40 - always the same input output
05:43 - on some system okay
05:45 - what does testing mean now i said you
05:48 - check if it works by putting some stuff
05:50 - into it actually
05:52 - man it's kind of
05:53 - kind of wrong actually testing is the
05:55 - process it says here actually of
05:58 - executing a program or system with the
06:00 - intent of finding errors and that's the
06:02 - important part you don't test to check
06:05 - if it works you test to check it doesn't
06:08 - work you reveal errors
06:12 - basically there's this comic that says
06:14 - compares programmers or developers to
06:16 - testers and
06:18 - programmers like
06:19 - i'm making something at the test is like
06:21 - i'm breaking something and that's really
06:23 - what this is about
06:25 - why do you want to break your stuff
06:27 - because if you break it someone else
06:29 - doesn't have the opportunity to
06:31 - right
06:32 - so you find an error you hopefully will
06:34 - fix it
06:36 - not let it
06:37 - go to production and then it won't fail
06:39 - in production that's
06:41 - good we want that why do we want that
06:44 - why do you actually care if you produce
06:45 - working software i personally think
06:49 - it's
06:50 - a bit of our responsibility personal
06:53 - responsibility as developers we build
06:55 - stuff for the world to run on okay we
06:58 - want that stuff to
06:59 - work we don't want to contribute to the
07:01 - health scape that is programming today
07:03 - okay we want to build nice things and i
07:05 - hope you all kind of want to do that
07:08 - if that noble goal doesn't cut it for
07:10 - you
07:12 - want to save your dignity and money
07:13 - because errors that live in the wild are
07:17 - pretty expensive like a rocket blowing
07:19 - up that costs 400 million pretty
07:21 - expensive if you find that issue spend
07:24 - my half an hour testing something
07:26 - finding the issue fixing that bit
07:28 - cheaper yeah and also
07:31 - especially in the security scene
07:33 - where you have
07:35 - issues with security that can cause a
07:37 - lot of embarrassment if you have
07:39 - problems security issues or bugs
07:42 - stuff like that yeah so in reality
07:44 - combination of both i think this should
07:46 - make it clear why you want to test
07:49 - good i got the motivation covered
07:51 - hopefully
07:52 - now we're going to talk about the types
07:54 - of errors that you can reveal with tests
07:57 - thing is
07:58 - i said testing
08:00 - is the process of
08:02 - finding errors okay which errors there's
08:04 - a bunch of errors that can happen many
08:06 - diff different errors
08:07 - we don't have time to cover them all
08:10 - so we're just gonna talk about
08:11 - regression tests or regression errors
08:14 - what's a regression it's something that
08:15 - you've all if you've developed for more
08:17 - than a week
08:19 - you've already seen that it's this
08:21 - situation you develop some wonderful
08:23 - feature you build
08:24 - it and let's say you test it you make
08:27 - sure it works so you
08:29 - try it out try to break it and it
08:31 - doesn't break all good you say you push
08:33 - it to production it's fine let it run
08:34 - there you work on some other stuff three
08:36 - months later
08:38 - you decide to let's try my old feature
08:40 - again like just coincidentally you touch
08:42 - it it breaks like what the actual
08:45 - that's a regression you have something
08:46 - that used to work no it doesn't and
08:48 - everyone's like
08:50 - what happened that yeah
08:53 - to avoid these kind of errors you have
08:54 - regression tests
08:56 - okay
08:56 - so
08:58 - what do people do in reality to avoid
09:01 - regressions
09:02 - um
09:03 - i've actually worked with places or seen
09:06 - places where each time they have a
09:08 - release let's say you have
09:09 - a release of some big piece of spanking
09:12 - software every
09:14 - six months
09:15 - they would spend they had had a manual
09:18 - test suite with several thousand tests
09:20 - and they would before each release they
09:22 - would take a month
09:24 - with something like between 15 and 20
09:27 - testers
09:28 - and those testers would run a manual
09:30 - regression test suite for a month
09:34 - out of six months development time okay
09:36 - so if you have lots of features lots of
09:38 - stuff to test regression testing is
09:40 - going to take a lot of time
09:43 - we're developers we're lazy we don't
09:45 - want to spend a month
09:47 - testing something each time we release
09:50 - it especially in today's world we have
09:52 - to release fast we can't really do that
09:55 - and the automation
09:57 - luckily smart people have developed a
09:59 - bunch of tools to allow us to automate
10:01 - this process
10:03 - so you don't have to each time you
10:05 - change something manually see if it
10:07 - still works you can instead write your
10:09 - tests by coding so you see it here
10:12 - there's some
10:13 - i don't even know what the framework is
10:15 - basically you write the um the test
10:18 - code and that will do this process of
10:21 - putting stuff in checking if it works
10:23 - automatically and the good thing is well
10:24 - you spent some time
10:26 - developing the test beforehand
10:29 - but now you can rerun those tests at the
10:32 - press of a button and you see that here
10:34 - you don't even have to press something
10:36 - like the framework just detects if
10:38 - anything changed if you change your code
10:40 - it's going to rerun your test and it
10:42 - goes like this
10:43 - okay
10:44 - so
10:46 - test automation can really help you
10:48 - avoid these
10:51 - doing the same thing with testing over
10:52 - and over again
10:56 - what in an application
10:59 - can you test so we get covered okay what
11:01 - kind of errors do we check where are we
11:03 - going to check them
11:04 - if you have some application
11:06 - um there's
11:08 - very many ways to
11:10 - many things to actually test the most
11:12 - intuitive thing would be
11:14 - um let's assume you have an application
11:16 - that
11:19 - has this email input field where people
11:21 - enter the email and they say okay and
11:22 - then at some point they're gonna get
11:24 - sent on registration mail or something
11:26 - like that okay
11:29 - the intuitive thing maybe would be to
11:31 - have your automation system really
11:33 - interact with the application you'd have
11:35 - the web
11:36 - web thing with the input field and
11:38 - button and your framework would interact
11:40 - with that input field type something and
11:42 - automatically press a button and at some
11:45 - point it would check some mail server if
11:47 - an email with the correct content has
11:49 - arrived right would work but there's
11:51 - other ways to
11:52 - test the application you don't always
11:54 - have to test the whole thing together
11:57 - that's why i say the whole system end to
12:00 - end
12:01 - you can also simply
12:04 - take some components out of that system
12:06 - and
12:07 - test those like in isolation that's for
12:10 - example an integration test
12:13 - where test components together or unit
12:15 - tests where you test a single component
12:19 - for example just
12:21 - to make the class that sends mails it
12:23 - gets a string and it sends a mail you
12:25 - test that
12:26 - why do you do that
12:29 - two things first of all each of those
12:32 - levels so to speak reveals different
12:34 - errors again if you have a unit test
12:36 - that's very good at uncovering issues
12:38 - that are related to functionality some
12:40 - small issue with the component
12:43 - integration tests much better with
12:45 - finding issues that
12:47 - occur when different components don't
12:49 - quite work together as well as this
12:51 - should right or end-to-end tests imagine
12:55 - these really do basically what a user
12:57 - does so they're often called acceptance
12:59 - tests
13:00 - um
13:01 - that would detect like
13:03 - stuff like is a button actually visible
13:05 - because it will actually try to click
13:06 - the button and it isn't there well you
13:09 - found that so good at different things
13:12 - that's the fury part
13:14 - oh no it's not quite sorry um the other
13:17 - thing
13:18 - with these levels is
13:20 - that they
13:21 - have equal cos not equal they have
13:23 - different costs associated with them
13:26 - unit tests are very easy to write and
13:28 - they're very quick to run
13:31 - and to end tests not so much they're
13:34 - harder to write
13:35 - take longer to execute
13:37 - and this is where the testing pyramid is
13:39 - going to come in who has already seen
13:41 - that before today
13:44 - okay
13:45 - how many times like daniel how many
13:47 - times have you seen this in the talk
13:49 - exactly you're all gonna i'm happy that
13:52 - i'm the first one to actually show this
13:54 - to you if you attend any test about
13:56 - talking at all ever again you're gonna
13:58 - see this
13:58 - it's very very popular because it's true
14:00 - of tells you how should you automate
14:02 - your how should your automation test
14:04 - suite look lots of unit tests bunch of
14:07 - integration tests not too many
14:08 - end-to-end tests so the balance between
14:10 - cost and risk what kind of issues can
14:13 - you find
14:14 - how much money do you want to spend
14:16 - that's it with fury but
14:19 - alas
14:20 - there's no
14:21 - uh live demo instead
14:24 - i whipped up a quick application
14:26 - that i would normally
14:30 - how do i get all full screen
14:33 - no no it doesn't work
14:36 - something ctrl p
14:42 - shift f
14:43 - command shifter yeah we got it
14:46 - i'm not a mac user
14:49 - in case you haven't noticed
14:51 - all right so
14:53 - i whipped up a quick application that i
14:55 - would normally i prefer a test suite and
14:57 - would normally run that we quite can't
14:59 - do that so instead i'm going to show you
15:01 - the application i will show you the
15:02 - tests i wrote and you just have to
15:05 - imagine that they actually run okay if
15:08 - you can do that
15:09 - use your fantasy
15:13 - so let's look at the application first
15:15 - fair word of warning
15:19 - i had to come up with an idea what am i
15:21 - going to build that's easily testable
15:22 - and demonstrate some concepts of testing
15:24 - and the only thing my brain could come
15:26 - up with was let's make an application
15:28 - where you manage kittens that fight each
15:30 - other to death kind of thing i don't
15:32 - know
15:33 - so this is
15:35 - not it because that doesn't work sorry
15:37 - about
15:38 - that oh come on
15:48 - enter right
15:51 - why doesn't it go oh my god did i
15:54 - mention i'm not a mecca user jesus
15:58 - what do i need to do
16:02 - don't do that all right what
16:06 - yeah yep okay how do i copy it command c
16:14 - no
16:15 - no no not enter i'm not gonna hit enter
16:19 - command
16:21 - and now
16:28 - um
16:34 - okay can i paste something here
16:46 - caps lock maybe like that
16:50 - [Laughter]
16:52 - maybe we found a bug through testing
16:57 - [Music]
17:04 - that
17:08 - i've never witnessed something like this
17:15 - maybe does it need does
17:18 - [Music]
17:21 - does it need like an http in front maybe
17:25 - i don't know
17:28 - just
17:35 - can i press enter now
17:59 - all right so
18:00 - um
18:02 - right so i made this a monstrosity um
18:06 - you can see you have a list of kittens
18:07 - all right and it's fairly simple you can
18:09 - also edit and delete them let's have a
18:11 - look at some
18:12 - kittens i i don't like that one
18:16 - i please
18:20 - didn't test it
18:24 - no what's actually happening
18:26 - i didn't test it on safari that's
18:27 - exactly right
18:29 - okay we'll just have to do it that way
18:31 - so um as you can see you you can put in
18:34 - some stuff and it should hopefully yeah
18:36 - so it will update this score that tells
18:38 - you how murderous this kitten is okay
18:41 - and um so
18:43 - what can you test you can do unit tests
18:45 - or end-to-end tests let's look at oh my
18:47 - god not the same thing again with github
18:49 - how can i
18:51 - get to a new tag
18:56 - jesus christ okay
18:58 - github.com
19:05 - so i'm gonna just quickly show you what
19:07 - the unit tests could look like all right
19:09 - for that and like i said you will have
19:12 - to imagine that they just work
19:17 - let's see
19:20 - right
19:21 - so this is an angular application
19:23 - doesn't really matter that it is
19:25 - um
19:25 - [Music]
19:27 - just gonna have a look so this what i
19:29 - showed you that the score that's
19:30 - calculated that's a perfect example for
19:33 - a thing you can unit test okay because
19:35 - it's fairly simple just take some values
19:37 - and puts out the number so let's look at
19:41 - what the code look looks like
19:44 - so
19:45 - that's it doesn't really matter what the
19:47 - syntax like you have this component the
19:50 - battle score service well has a method
19:53 - calculate battle points
19:55 - that takes a kitten and returns a number
19:58 - okay
19:59 - and what does it do then well if the
20:01 - kitten's null there's nothing to return
20:02 - returns zero otherwise it takes the
20:04 - attributes of the kitten cuteness speed
20:07 - blah blah and calculates your battle
20:09 - points easy peasy
20:11 - so very clear what the function is very
20:14 - easy to test
20:17 - unit test right this is a unit a simple
20:20 - simple component simple function to test
20:24 - now let's have a look at the test bit
20:26 - more stuff
20:28 - um
20:29 - still can't move so
20:31 - i have to imagine me pointing
20:33 - so this is a test file
20:35 - and remember what a test looks like just
20:37 - number back you have a component you
20:39 - have some input and you have some
20:40 - expected result we're gonna use that
20:42 - here first of all you can see in like
20:43 - the line six line nine we create a
20:46 - system the thing that we want to test
20:49 - in this case it's a battle score so it's
20:51 - the component we want to test our
20:53 - calculator whatever
20:54 - and then we have actual test cases that
20:56 - start with it in line 12 20.
20:59 - okay
21:00 - let's look at the first one line 12.
21:02 - um
21:03 - first of all has a name what does it do
21:05 - it should return a correct battle score
21:06 - and then you set up your input remember
21:09 - the input of the battle service
21:11 - function
21:12 - was a kitten so we create one with its
21:15 - attributes strength and so forth
21:18 - next line after that is the actual
21:20 - execution of the test
21:22 - where we take the function and we put
21:24 - stuff in this is our actual let's do it
21:27 - part and then we record the result
21:29 - now
21:30 - the last thing we have to do we compare
21:32 - the actual result with what we get back
21:34 - and that's the expect expect the result
21:36 - that what we actually get with what we
21:39 - want should be 10.
21:41 - and similarly we test if it works for
21:43 - now easy peasy right normally
21:46 - it's a an issue of just executing
21:49 - command in this case ng-test and
21:52 - this will run all your tests
21:53 - automatically and will also watch your
21:55 - files for changes and if you break your
21:58 - application you refactor it and you do
22:00 - something bad it will show you well you
22:02 - have an issue easy peasy let's have a
22:05 - look at the end to end tests so this is
22:07 - the component
22:09 - a single component that we can test
22:11 - and go back to the application
22:14 - something that
22:16 - is lends itself to an end-to-end test
22:18 - would be scenarios like
22:21 - does it display the list in the index
22:23 - correctly or when i press delete is it
22:27 - actually removed from the list or if i
22:29 - edit it in the edit field is it actually
22:32 - updated in the index
22:33 - things like that so multiple views needs
22:36 - the whole application that will be an
22:37 - end to end test
22:39 - and we're going to have a look at what
22:41 - an end-to-end test
22:43 - looks like
22:45 - angular luckily makes it
22:47 - fairly easy to set this kind of stuff up
22:50 - like i said another front-end dev so i'm
22:52 - pretty happy and you'll already notice
22:55 - when we look at this
22:56 - uh ab spec
22:58 - end-to-end
22:59 - test file it's a bit more involved right
23:02 - you have stuff like page that navigate
23:03 - to i mean the concept is the same you do
23:05 - something and then you have an
23:06 - expectation an expected result
23:10 - um
23:10 - but you see
23:12 - gets longer involves more pages for
23:14 - example in line 25 we just check if we
23:17 - click the button remove it from the list
23:20 - and you see it's already getting a bit
23:22 - like longer and needs more syntax
23:25 - also uh maintenance is harder
23:27 - you see that we calc we
23:30 - get items by selecting the links in the
23:33 - actual html all right um imagine if you
23:36 - change that up if you give it if you use
23:38 - css selectors and you change your css
23:41 - your tests are going to break that won't
23:43 - happen with your unit test
23:46 - good how the hell am i going to get to
23:48 - my presentation chrome
23:52 - where was it there it is okay so
23:55 - that was the practical part sorry again
23:58 - it didn't work out
24:00 - let's summarize what we've learned today
24:02 - first of all programming is its own kind
24:04 - of healthscape which i hope you don't
24:06 - have to learn
24:08 - too much
24:09 - but testing can help you with that
24:12 - okay
24:13 - we learned about regression tests
24:15 - why use them
24:16 - and we also talked about what test
24:18 - automation and test levels is so i hope
24:20 - i didn't
24:22 - give you too much stuff like
24:24 - okay
24:26 - very risky show of hands uh who's kinda
24:29 - like
24:30 - this was a bit too much for me like i
24:33 - did
24:34 - who's like that show of hands
24:36 - okay one two all right too fast
24:39 - who could follow along
24:41 - nicely and understood most of stuff
24:44 - wow okay thank you and who's like i
24:46 - don't give up
24:48 - okay never mind
24:50 - um
24:51 - so that's for the summary if you're
24:52 - interested to learn more about testing
24:54 - first of all just send me a message um
24:56 - i'm always happy to help people out like
24:58 - i said i'm very passionate about testing
25:00 - let me know what you think let me know
25:02 - if you have some problems with testing
25:03 - something specific
25:05 - talk over that and there's some great
25:07 - books out of software testing or the art
25:09 - of unit testing and you can also visit
25:11 - the ministry of testing website they
25:12 - have great resources so that's
25:15 - it from my side you can check out the
25:16 - slides hosted them with reveal jess
25:19 - gonna have a look at the other
25:21 - thing what was it
25:23 - we mark jess gotta check that out and
25:26 - yeah do we have time for questions sure
25:28 - but thank you for the talk yeah thanks