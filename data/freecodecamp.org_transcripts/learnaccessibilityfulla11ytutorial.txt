00:00 - learn how to make the web a better place
00:01 - for everyone in this course you'll dive
00:04 - into what it truly means to build
00:06 - accessible websites and why it's
00:07 - important instructor and web developer
00:10 - Frederick ritfolk will teach you the
00:12 - fundamentals of accessible development
00:15 - like understanding contrast ratios
00:17 - exploring the accessibility tree getting
00:19 - familiar with wcag levels and much
00:25 - more Hello amazing coders and welcome to
00:28 - this course on accessible development
00:31 - when we are developing anything we are
00:33 - creating content and we say that content
00:36 - is accessible when it is available and
00:39 - its functionality can be operated by
00:41 - anyone therefore accessible development
00:44 - means to develop with everyone in mind
00:46 - including all the users who have some
00:48 - sort of disability developing accessibly
00:51 - isn't just the right thing to do but any
00:53 - future employer will want to know that
00:55 - you have all their users in mind when
00:57 - making decisions and it's also the law
01:00 - in some countries here's a website which
01:02 - is currently suffering a lot of
01:04 - accessibility issues in this course
01:06 - it'll be your job to save this website
01:09 - you will of course not be alone my name
01:11 - is Frederick and I will be your teacher
01:13 - together we will learn how to get some
01:16 - easy wins to help improve accessibility
01:18 - with minimal effort you will also find
01:20 - that many of these techniques will help
01:22 - you create interfaces that are more
01:24 - pleasant and easy to use for all users
01:27 - by the end of this course you will have
01:29 - the skills to to help build a more
01:31 - inclusive digital
01:34 - world before we get coding I want to
01:37 - show you some of the various types of
01:39 - assistive Technologies and how our
01:41 - accessibility improvements work we'll
01:43 - also touch on accessibility testing
01:46 - methods there are various types of
01:48 - assessive technologies that benefit from
01:50 - accessible web content these include but
01:54 - are not limited to screen readers speech
01:57 - recognition software screen magnifiers
02:01 - and alternative input devices designed
02:03 - for people with motor skill impairments
02:05 - screen readers are one of the most
02:08 - common types and they rely heavily on
02:10 - headings links and form labels for
02:13 - navigation at the heart of web
02:15 - accessability is the accessibility tree
02:18 - a key part of how browsers interact with
02:21 - assisted Technologies this tree is a
02:24 - simplified representation of the page
02:26 - focusing on elements important for
02:28 - accessibility like headings links and
02:30 - form
02:31 - labels this could be our code and the
02:34 - browser translates that into a visual UI
02:38 - but at the same time it also translates
02:41 - our code into an object called the
02:43 - accessibility tree which contains a lot
02:45 - of important information and context in
02:48 - text form the improvements we are going
02:50 - to make in this course will make our
02:52 - components available inside this
02:54 - accessibility tree and provide assistive
02:56 - Technologies with this important context
02:59 - here are two buttons that look the same
03:02 - in the visual UI because we style them
03:04 - the same but in the accessibility tree
03:06 - the button made using a div tag lacks
03:10 - information and context when you use
03:13 - semantic HTML that is the right element
03:15 - for the right purpose the browser
03:17 - automatically feeds the correct
03:19 - information into the accessibility tree
03:22 - this helps assistive Technologies to
03:24 - navigate and interpret the content
03:26 - accurately keyboard accessibility is
03:28 - another Cor Corner Stone of web
03:31 - accessibility and by using correct HTML
03:34 - elements like button tags a tags and
03:37 - form elements you sort of get keyboard
03:39 - accessibility for free this means these
03:42 - elements are naturally focusable and
03:44 - operable with a keyboard no extra coding
03:46 - required we will get some hands-on
03:49 - experience with this later in the course
03:51 - here is how we can access the
03:52 - accessibility tree in our web app in my
03:55 - example I'm using Chrome as my browser
03:57 - and if we open up our developer tools
04:00 - there will be a tab called accessibility
04:03 - click on that and click on enable full
04:06 - page accessibility tree your developer
04:08 - tools will ask you to reload and when
04:11 - you do that you will see an
04:13 - accessibility button popping up if you
04:16 - click on it you will see the
04:18 - accessibility
04:20 - tree this is not exclusive to Chrome
04:22 - other browsers like Firefox also gives
04:25 - us access to viewing the accessibility
04:27 - tree I'll leave you with a link to a
04:28 - complete guide on how to work with the
04:30 - accessibility Tree in Chrome dep tools
04:33 - so how do we test our accessibility well
04:36 - the first way is quite straightforward
04:38 - we can experience our own site using for
04:41 - example a screen reader to understand
04:43 - how our content is presented there are
04:45 - tools like contrast Checkers that help
04:48 - ensure our text is readable against its
04:50 - background we also have automated tools
04:52 - at our disposal like lighthouse in
04:55 - Chrome accessibility inspector in
04:57 - Firefox or a software called called axe
05:00 - these softwares can help identify common
05:03 - accessibility issues and we can also use
05:06 - AI assistants to test our code in terms
05:08 - of accessibility for example we can
05:10 - supply our code to the AI and ask if it
05:14 - detects any poor color contrasts or
05:17 - missing labels or if we have used the
05:19 - wrong native HTML element for the job I
05:23 - myself use chat GPT daily for this and
05:25 - much else if you are using Chrome as
05:28 - your browser you can find Lighthouse by
05:31 - opening up your Dev tools and going to
05:33 - the lighthouse tab up here there you can
05:37 - select what you want Lighthouse to do
05:39 - for example to test your s's
05:42 - accessibility on desktop then you just
05:45 - press analyze page load when Lighthouse
05:48 - is done analyzing we will get a score of
05:50 - 0 to 100 on how accessible our ctis not
05:54 - shown here is also a detailed walk
05:56 - through of any accessibility issues that
05:59 - light house found so that we can
06:01 - identify them and fix them it's time for
06:03 - some Hands-On learning let's head into
06:05 - some code and learn about accessible
06:07 - color contrast see you in the next
06:11 - lesson before we start we need to know
06:14 - what is considered accessible there are
06:16 - well-defined requirements on things like
06:19 - text images the HTML code and so on
06:22 - these are called the web content
06:24 - accessibility guidelines these
06:27 - guidelines have different levels called
06:29 - a able a and AA a the a level means it's
06:33 - not accessible the able a level is
06:37 - considered accessible but what we really
06:40 - want to achieve is the highest grade AAA
06:44 - whenever possible let's look at our
06:46 - first specific example color contrast
06:49 - for text as in the contrast that text
06:52 - has against its background black text
06:55 - against the black background has a
06:57 - contrast ratio value of one 1: one it's
07:00 - the same color the highest contrast
07:03 - ratio is black and white that has a
07:06 - ratio of
07:08 - 1:21 this light gray text against the
07:10 - bronze background has a value of a bit
07:13 - over two the dark gray text against the
07:16 - silver background has a value of a bit
07:18 - over four and the black text against the
07:21 - gold background has a value of almost 19
07:24 - to demonstrate further here's a rainbow
07:27 - with dark blue text inside each strip
07:29 - and similar to what we just saw the
07:31 - contrast values are written in each
07:33 - stripe this dark blue text on this red
07:36 - background has a ratio of 3.32 it's not
07:40 - very good and difficult to read we can
07:42 - easily check the contrast value of text
07:44 - against its Background by visiting an
07:46 - online contrast Checker like this one
07:49 - and this is a link you can click on or
07:52 - if we for example are using Chrome as
07:54 - our browser we can check such a value by
07:57 - pressing control shift C on PC or
08:00 - command shift C on Mac and then hovering
08:03 - over the text under accessibility you
08:07 - will see the contrast value similar
08:09 - functionality exists in other browsers
08:11 - like Firefox and Edge if you using
08:14 - something else than Chrome I recommend
08:16 - looking up if and how your browser can
08:18 - analyze color contrasts I want you to
08:21 - pause here and give this a go and check
08:23 - that the contrast values are indeed what
08:26 - I have written here by hovering over
08:28 - each and every
08:33 - text great so now you might be wondering
08:36 - what color contrast values are good to
08:39 - be accessible normal text should at
08:41 - least have the value of 4.5 and at least
08:46 - three for large text but what we really
08:49 - want to achieve are these AAA
08:52 - requirements it's time for your first
08:54 - challenge I want you to change the color
08:57 - of each text so that they they all
08:59 - fulfill the wca's ablea requirements
09:03 - which is a contrast ratio of 4.5 pause
09:07 - now and try this
09:10 - out okay hopefully you gained some
09:13 - insights if you tried black in white
09:15 - text you probably noticed how they had
09:18 - good contrast on different backgrounds
09:21 - in fact you probably managed to achieve
09:23 - a contrast value of over seven for most
09:26 - backgrounds which is the best possible
09:28 - achievement but no no matter which text
09:30 - color we use white or black or anything
09:33 - else the contrast values can't reach
09:35 - seven for the red and green backgrounds
09:38 - pause quickly here and think about how
09:41 - you would solve
09:44 - this so in this case you would need to
09:47 - either change the background color or
09:49 - make the text bigger I have a challenge
09:51 - waiting for you on this but while on the
09:54 - topic of colors I want to show a brief
09:56 - example of another aspect to think about
09:58 - when using color in an accessible manner
10:01 - follow me into the next
10:04 - lesson I want to give you a little heads
10:07 - up on using colors in your apps because
10:09 - while colors are a super way to
10:11 - communicate information we should not
10:13 - rely solely on color instead we should
10:17 - combine color with shapes or with text
10:20 - or ideally both here we have two simple
10:23 - user cards quite similar to what we
10:25 - often see in chat applications they have
10:28 - a profile picture a name and an
10:30 - indicator to communicate if the user is
10:32 - online or offline indicated with either
10:34 - green or red color I want you to have a
10:37 - think about how you could improve this
10:39 - indicator using shape and text pause
10:46 - here did you cheat and looked up a chat
10:48 - app you use to see how they do it if so
10:52 - perfect that's exactly what I would have
10:54 - done a simple way to make this more
10:56 - accessible is to pair the color
10:58 - indicator with an icon as well as to add
11:01 - the status text so that it looks
11:04 - something like this there might
11:07 - sometimes be cultural differences as
11:09 - well in how colors are interpreted but
11:11 - with these changes alone the over 300
11:14 - million people with some degree of color
11:16 - blindness in the world will thank you
11:18 - for this consideration now it's time to
11:20 - test our knowledge of accessible color
11:26 - contrasts now let's apply what we just
11:29 - learned on this website's
11:32 - homepage the website belongs to a
11:34 - company that delivers groceries to your
11:37 - window by drones quite futuristic
11:41 - sounding but perhaps how we will get our
11:43 - onions and soy sauce one day soon but as
11:47 - you can probably already tell some big
11:50 - mistakes with color contrast are
11:53 - currently being made here's your
11:57 - challenge
11:59 - identify any parts of the page where the
12:02 - text contrast is poor and then change
12:07 - those parts so that they fulfill the AAA
12:11 - requirements and just so you remember
12:14 - you have your AAA requirements right
12:17 - here there are actually multiple ways to
12:20 - solve this accessibility issue I leave
12:23 - it to you to choose how to do it pause
12:27 - now and give this a sh
12:33 - I am really curious to know how you went
12:36 - about making these text contrast
12:39 - improvements the first part of the
12:41 - challenge was to identify any parts of
12:45 - the page where the text contrast isn't
12:48 - good enough this is obviously the case
12:52 - here with the word eats which is green
12:55 - and it sort of Blends into the
12:57 - background of of the Green in the image
13:01 - behind it and it doesn't really solve
13:04 - anything to change the color of this
13:06 - word to uh black color uh because the
13:10 - contrast will will still be poor on top
13:13 - of the image and if we change it to
13:16 - White well it will be uh impossible to
13:19 - see outside the image one way you might
13:23 - have gone about solving this challenge
13:26 - is to find the the selector for that
13:30 - specific word which
13:33 - is right here and then added
13:38 - display block and look at that what that
13:42 - does is it forces the word to be on its
13:47 - own separate line it takes up the
13:50 - maximum width and that solves our text
13:53 - contrast issue another way to solve this
13:56 - and perhaps my own preferred way is to
14:00 - instead
14:01 - of making the title of our homepage two
14:06 - lines I would simply focus on the hero
14:09 - image and maybe make that a little bit
14:12 - smaller something like that and that
14:15 - does it although it looks a little bit
14:18 - awkward so I'm going to push it down a
14:21 - little bit from the
14:23 - top something like that that's one part
14:26 - the other part of the page you probably
14:29 - immediately recognized as having poor
14:31 - text contrast is the footer dark green
14:35 - on dark gray is going to be hard for
14:37 - just about anyone to
14:40 - read so we go down to the footer in our
14:44 - CSS and this is where our icons and text
14:48 - get their color and if we change this to
14:52 - white or FFF
14:55 - FFF that looks so much better so much
14:58 - much easier to read and I think we are
15:02 - ready for a new section on our homepage
15:06 - now we have an about section where we
15:09 - are told the background story of the
15:12 - company and how the higher of AI and
15:16 - Robotics Ariana Grande founded the
15:19 - company but once again there's a huge
15:22 - issue in seeing what the text actually
15:24 - reads so one more time we need to make
15:27 - the text much much more readable by
15:29 - improving the text contrast this is a
15:32 - bit tricky because it's a background
15:34 - image but tricky is the word and we have
15:37 - a trick up Our Sleeve I want to
15:39 - introduce to you a CSS property that you
15:42 - may or may not be familiar with here's
15:45 - your challenge I want you to practice
15:48 - your Google Fu and search for background
15:52 - blend mode it's a CSS property and see
15:56 - if you can figure out how to make make
15:58 - the background image in our about
16:01 - section brighter so that the text is
16:05 - much more readable pause here and give
16:07 - this your best
16:12 - chot if you figured out how that is
16:16 - amazing now let's do it
16:18 - together we go up
16:21 - to where we find the background image
16:25 - being
16:27 - stated and we are going to add two CSS
16:33 - properties round
16:38 - color I'm going to make this white and
16:42 - then a stands for Alpha and here you can
16:45 - set a value of 0 to 1 and we're going to
16:48 - do a high number
16:51 - 0.85 so far nothing has changed now we
16:55 - use
16:57 - background blend mode and we write
17:02 - lighten and did you see that all of a
17:04 - sudden it got lighter so it Blends the
17:07 - background color with the background
17:10 - image cool right maybe this seems
17:13 - limiting at first maybe you love the
17:15 - colors pink and white and wanted to
17:19 - build a website with those colors and
17:21 - then I come along and ask you to rethink
17:23 - that well Einstein famously talked about
17:28 - how how he limited his wardrobe to just
17:31 - a few select options so that he wouldn't
17:34 - get overwhelmed by all the options which
17:36 - he called option paralysis so much like
17:40 - Einstein may have omitted pink and white
17:43 - outfits in his wardrobe we can omit pink
17:46 - text on white background or vice versa
17:49 - in web development next up we will move
17:53 - on to making images accessible to
17:56 - everyone see you there
18:01 - when we add images to a web page we
18:04 - should consider the fact that some users
18:07 - cannot see images they need a text
18:10 - alternative and as we will see this text
18:14 - is simply added inside the images HTML
18:18 - tags as attributes the text given here
18:22 - is not visually displayed on the page
18:24 - but is hidden in the code to be accessed
18:27 - by screen readers and search engines
18:30 - like Google so what is best practice
18:34 - when writing alternative text for
18:39 - images this first example is way too
18:42 - wordy we want to be as concise as
18:46 - possible we also shouldn't start by
18:48 - writing an image off because the screen
18:51 - reader will say it's an image
18:54 - anyway the second example here is great
18:59 - but you may wonder do we have to add
19:02 - alternative text to all images well yes
19:06 - and no we need to add the alt tag to all
19:10 - the images in our HTML but if an image
19:14 - is purely decorative we don't need to
19:17 - write any descriptive text the reason we
19:20 - do this is because without it a screen
19:23 - reader May read out the image file name
19:27 - instead and that can be quite
19:29 - annoying alternative texts mainly help
19:34 - people with little or no vision people
19:38 - who have turned off images to save data
19:43 - and it also helps search engines like
19:45 - Google to find appropriate content to
19:48 - practice this we have a website
19:50 - displaying a collection of strange
19:53 - digital art which currently isn't very
19:57 - accessible
19:59 - okay time for a
20:02 - challenge I want you to add appropriate
20:05 - alternative text to all the images on
20:09 - this web
20:10 - page have a look at the Batman duck
20:15 - example the uh second one when trying to
20:19 - write descriptive text the text needs to
20:21 - be concise but still communicate the
20:24 - important parts of what the image shows
20:27 - so
20:28 - pause here and give this a
20:36 - try okay I hope you had a good time
20:39 - trying to uh describe these very strange
20:43 - images we have on our page I know I had
20:46 - so let me show you what I came up
20:49 - with I will look at the first image here
20:53 - the astronaut and then go to our HTML
20:58 - and here we find it what I'm going to do
21:01 - is add the alt
21:05 - attribute and I came up with the text an
21:09 - astronaut suspended in midair by a dark
21:12 - cloud over a field of purple
21:15 - grass I'm not sure that's an astronaut
21:18 - but it looks like it to
21:20 - me and for the second
21:25 - image down here
21:30 - I came up with a chair with a small
21:33 - Cloud hovering over it in the desert
21:36 - next to a dark
21:38 - Rock and
21:40 - finally this image
21:45 - here I
21:47 - wrote dark cubes and cylinders floating
21:51 - in the air along with two glowing
21:53 - orbs but if you noticed we skipped an
21:57 - image
21:59 - this right here is an image as
22:01 - well and we find that up here in the
22:05 - hero
22:06 - section so this was also a challenge to
22:11 - try to describe it's very
22:15 - strange my best take on it was a hand
22:19 - made of metallic liquid dripping
22:22 - upwards again you might have described
22:25 - these very differently but the important
22:28 - part is that you got practice in
22:30 - applying an ALT tag in your HTML to
22:33 - every image and writing a concise or as
22:38 - concise description as possible and
22:42 - finally one thing I tend to do when
22:45 - writing alternative text is to end with
22:47 - a period as you can see this is not
22:51 - something you need to do but it makes a
22:54 - screen reader do a brief pause which can
22:59 - be helpful when listening to it describe
23:03 - all the content on a page I have one
23:06 - last question for you which is what if
23:09 - this hero section had a background image
23:12 - like this one should we add an
23:15 - alternative text to this image the
23:17 - answer is no not all images should have
23:20 - an alternative text if the image for
23:22 - example has a label or an adherent text
23:25 - that describes the image an alternative
23:27 - text becomes redundant we also shouldn't
23:30 - give decorative images like this one an
23:32 - alternative text decorative images don't
23:35 - add informational content but are purely
23:37 - for Aesthetics examples include
23:40 - stylistic flourishes background images
23:43 - or images used for spacing for such
23:46 - images it's best practice to use an
23:48 - empty alt
23:51 - attribute like we see here having an
23:54 - empty alt attribute tells the screen
23:56 - readers to skip the image in the absence
23:58 - of an old attribute some screen readers
24:01 - May default to reading out the file name
24:03 - of the image in our case here the screen
24:06 - reader might read out
24:08 - background.jpg this can be confusing for
24:10 - users who rely on screen readers as file
24:14 - names often don't provide meaningful
24:16 - information about the image this is just
24:18 - one example but another very common type
24:20 - of decorative image that should have an
24:22 - empty alt attribute are icons combined
24:25 - with text think for example of the magn
24:28 - glass in a search field finally we
24:30 - should understand that alternative text
24:32 - is important for everyone not just those
24:35 - using assestive Technologies firstly
24:37 - alternative text enhances the user
24:40 - experience in situations where images
24:42 - don't load due to slow internet or other
24:44 - technical issues so let's break our own
24:52 - image this is how it will look like if
24:54 - our image here fails to load for
24:57 - whatever reason luckily we have an
24:58 - alternative text that describes the
25:00 - content so that we don't miss out on any
25:02 - information the image conveys if we
25:04 - remove it we are left with merely a
25:07 - broken image link before moving on from
25:09 - this website we will also look at how we
25:11 - can make the links in here more
25:13 - accessible see you in the next
25:17 - lesson labels for control elements like
25:21 - links and buttons are very useful to all
25:25 - users but getting them right is
25:28 - particularly important to users with
25:32 - disabilities for links you should use
25:37 - the a tag in your
25:40 - HTML and your links should be
25:43 - recognizable as links and easy to find
25:48 - and finally they should have
25:50 - nonambiguous
25:52 - textt what I mean by that is that anyone
25:56 - should be able to understand understand
25:58 - where the link will take them even out
26:00 - of context the links are in so don't
26:05 - just use click here or more for your
26:10 - labels as screen reader users sometimes
26:14 - navigate through links without reading
26:16 - the context let's look at a few examples
26:20 - the first link is not very accessible
26:24 - why because color alone is not
26:27 - sufficient to indicate the presence of a
26:31 - link underlines are a popular commonly
26:35 - understood way to communicate the
26:37 - presence of Link
26:39 - content however the text here is still
26:45 - ambiguous uh we don't understand it
26:47 - outside of its context so this is much
26:51 - better we can clearly see it's a link
26:55 - and we understand where the link will
26:58 - take us even out of context now I have a
27:01 - challenge for you I want you to update
27:05 - all the links in the website so that
27:08 - they meet the following requirements one
27:11 - they can be identified as links by more
27:14 - than just color alone and secondly the
27:18 - link text is not ambiguous as in we
27:22 - understand where the link will take us
27:25 - even out of context pause here give this
27:28 - your breath shot and afterwards I will
27:30 - show you how I would do
27:35 - it okay I hope that went
27:38 - well so we have a link in each paragraph
27:44 - here's
27:45 - one here's
27:48 - one and here is
27:50 - one so we have three links to identify
27:54 - and the eight tags are currently only
27:56 - wrapping the he word what I would do is
28:01 - to make sure that the a tag is wrapping
28:05 - this whole last sentence
28:08 - actually like
28:10 - that now this whole sentence is a link
28:15 - that can be understood outside of
28:18 - context next up I'm going to apply the
28:21 - same principle to the second paragraph
28:25 - and make the whole last sent sentence a
28:29 - link and for the third
28:35 - link we do the very same
28:40 - thing we transform the full sentences
28:43 - into links but it's still only
28:45 - communicated by color so we have to go
28:48 - into our CSS and there are actually
28:51 - multiple ways of making the links more
28:54 - accessible one could be to make the text
28:57 - more bold than the text around it but in
29:00 - another way as we saw in our example
29:04 - here giving it an underline is a
29:08 - commonly understood uh way to
29:11 - communicate that something is a
29:14 - link
29:16 - so if we change text decoration none to
29:25 - underline we Achi an appearance that
29:28 - definitely to me looks like a clickable
29:33 - link in fact text decoration underline
29:36 - is the default for a elements so we
29:39 - could actually just remove this and the
29:42 - default styling is still there let's
29:45 - have a quick look at some less
29:47 - traditional links let me show you an
29:51 - example here I've turned our section
29:54 - into a card and now the whole card is
29:57 - link to more work from the artist when
30:00 - making an advanced link like this we
30:02 - need to do a bit more to make sure the
30:03 - link is accessible because quite often
30:06 - accessibility issues arise from how
30:08 - they're built commonly using the a tag
30:11 - to wrap the whole component like we have
30:14 - done
30:17 - here this is totally understandable as
30:20 - an approach because it succeeds in
30:22 - making the whole thing clickable but it
30:25 - negatively affects the screen reading
30:27 - your experience if we move to the card
30:29 - using a screen reader a very long string
30:32 - of text content will be read out and
30:34 - only after this and I told the card is
30:36 - linked which is a bit slow and maybe a
30:39 - bit confusing plus elements like images
30:41 - included in the card might not be
30:43 - specifically announced as image either
30:46 - any nested structure is lost within the
30:49 - link instead the link should be
30:51 - positioned inside the card without
30:53 - wrapping any text now I'll will show you
30:56 - how to do this
31:14 - we just improved accessibility greatly
31:17 - and by cheating using either CSS or
31:19 - JavaScript we can make the whole card
31:21 - clickable just like it was before feel
31:24 - free to pause and check out my CSS
31:26 - solution which you uses absolute
31:28 - positioning and a pseudo selector the
31:29 - CSS is a bit Advanced and out of scope
31:32 - for this lesson but as you develop your
31:33 - skills it's important for you to know
31:36 - what the correct approach is it could
31:38 - also be a good idea to add a hover
31:40 - effect to the whole card like we did
31:42 - here to make sure the cursor is a
31:45 - pointer and also to modify the call to
31:47 - action text so that the user understands
31:50 - that the whole card is now clickable the
31:52 - card should also be focusable if we tab
31:55 - through the page since I mentioned
31:57 - modifying the call to action text we
32:00 - should also make that
32:05 - update this is much better communication
32:08 - additionally I added something called an
32:10 - ARA label and I added it to the link
32:13 - inside the card this will be read out by
32:15 - screen reader and it's an accessible
32:18 - feature to use when the link lacks a
32:20 - descriptive text as in our example here
32:22 - we will cover area labels in their own
32:25 - scrim later on in the course at this
32:27 - point you have already learned some of
32:29 - the most important ways to make a
32:30 - website accessible in the next lesson we
32:33 - are going to return to our Skynet eats
32:35 - website and apply our new skills see you
32:40 - there we are back with our drone food
32:44 - delivery app and we have introduced a
32:46 - news section with some general info and
32:49 - statistics about the company but the
32:52 - website lacks alternative text for its
32:55 - images and some of its links are not
32:59 - accessible enough this is where you will
33:03 - swoop in to save the day your task is
33:06 - simple update our images so that they
33:10 - have appropriate alternative texts and
33:14 - update any links that are either not
33:18 - recognizable as links or they have
33:22 - ambiguous texts this requires you to
33:26 - have a look around
33:27 - and work both in our HTML and CSS pause
33:33 - here and give this Your Best
33:38 - Shot okay I hope that went well if you
33:41 - were still unsure about anything I will
33:44 - now show you exactly how I would do this
33:48 - let's start with updating our images
33:51 - with alternative
33:53 - text the first image is this
33:58 - one here we find the hero image which is
34:01 - where I will add the alt tag and the
34:04 - text that I chose to write reads food
34:07 - delivery Dron saying I come with peace
34:10 - and remember when text is part of an
34:13 - image a screen reader won't be able to
34:17 - read it therefore if it conveys
34:20 - important information which I think in
34:22 - this case it does because it
34:24 - communicates humor we should add it to
34:27 - our alternative text that's image one
34:31 - for our new section we have this image
34:33 - here of a
34:35 - drone we find it right here I'll add the
34:39 - all tag and I decided to Simply and
34:43 - concisely call this a flying Skynet
34:45 - drone maybe you just wrote a flying
34:47 - drone and that's okay my thought was
34:51 - that this might be skynet's own unique
34:55 - design of a drone that this is an image
34:57 - of and therefore it makes sense to be
34:59 - specific did you notice that I left out
35:02 - one thing I didn't add any period to the
35:05 - end of the sentence which I am a fan of
35:09 - so I'm going to do that here and also up
35:13 - here I'm adding a period by the end to
35:15 - give the screen reader some pause when
35:18 - reading the alternative text amazing now
35:22 - to the second part of the challenge
35:25 - which involved our links
35:27 - this link here isn't very accessible so
35:33 - first I'm going to take this a tag and
35:36 - wrap it
35:38 - around that's better we still haven't
35:41 - done anything to the CSS and we will get
35:43 - there but first this is another link and
35:47 - while it does a pretty good job
35:50 - communicating that it's a clickable link
35:53 - the text is still ambiguous so let's
35:56 - change that
35:57 - we go down here and then here we have to
36:00 - change it to something else it will take
36:03 - us to their about page so how about we
36:07 - just write about
36:10 - Skynet I think that makes a lot of sense
36:13 - now we head to into our
36:15 - CSS to update this link right here I
36:19 - want it to be underlined so I'm going to
36:23 - go up to the info section and this
36:27 - selects the link giving it a green color
36:31 - let's do text decoration
36:36 - underline and there we have it
36:39 - immediately recognizable as a link but
36:42 - there's one more thing we can do
36:44 - remember everything we learned about
36:46 - text contrast well these small headlines
36:50 - drones customers and Cat conflicts their
36:54 - text contrast is not great we would love
36:57 - them to have a contrast value of seven
37:00 - or above so let's see if we can identify
37:03 - these selectors in the
37:06 - HTML we see that they have the class
37:08 - stat heading which is right here in our
37:12 - CSS and this is the color if we change
37:15 - that to a lighter
37:18 - gray then immediately it became much
37:21 - more readable and the contrast value is
37:24 - now 7.86 and you can check that yourself
37:28 - by going into the dev tools as we talked
37:32 - about in a previous lessons and hovering
37:35 - over these
37:37 - headlines give yourself a huge pad on
37:40 - the back for all the work that you've
37:42 - done you know so much already and I'm
37:45 - really excited about our next lesson
37:47 - together see you
37:51 - there labels in all forms are a hugely
37:55 - important part of EX accessible
37:57 - development unfortunately elements like
38:01 - input Fields often lack labels and are
38:04 - replaced by placeholder text let's look
38:08 - at two common designs of input
38:11 - Fields this first example has a
38:14 - placeholder but has no label and the
38:17 - second example has a label but is
38:19 - missing the placeholder text according
38:22 - to the
38:23 - wcag the accessibility guidelines
38:26 - placeholder text is not an accessible
38:30 - replacement for the label element the
38:33 - placeholder should only be used as a
38:35 - brief example of the text to be entered
38:39 - mainly because of inconsistent support
38:41 - for screen readers best case scenario an
38:45 - input field has both a label and an
38:49 - exemplary placeholder let's have a look
38:52 - at the signup page for our Skynet eats
38:56 - app seeing this you might think that
38:59 - this looks like a very standard signup
39:03 - form and you're right unfortunately it's
39:07 - common place to see forms like this out
39:10 - there that lacks labels so your
39:14 - challenge should you choose to accept it
39:17 - is to First add an ID attribute to each
39:22 - input
39:23 - field secondly add labels for each input
39:27 - field in the form I want you to search
39:31 - yourself how to associate a label with
39:35 - an input field so that when clicking the
39:37 - label the input field gets focused
39:41 - alternatively you could head over to our
39:45 - HTML and look at our input radio buttons
39:50 - because they actually have
39:54 - labels finally I want want you to change
39:57 - the placeholder names to be exemplary
40:00 - user inputs for example Obama for a
40:04 - surname field pause now and make this
40:07 - sign up page accessible to
40:15 - everyone okay if you manage to do this
40:18 - all on your own I am super impressed
40:21 - either way let's do it together we
40:24 - solved this challenge in our
40:27 - HTML and the first thing that I want to
40:29 - do is add an ID attribute to each input
40:34 - field like
40:40 - this beautiful nothing has changed yet
40:44 - now let's add our label elements and I
40:46 - want them to be on top of their
40:49 - Associated input
40:52 - fields and hopefully you manag to figure
40:55 - out that the way to associate it with an
40:59 - input field is to use the four attribute
41:02 - and then write the ID of that specific
41:05 - input field as the for
41:08 - name like
41:15 - that there we have the label and if you
41:18 - click on it make sure that it focuses
41:21 - the input field that you had in mind
41:24 - let's apply a label to all the input
41:28 - field let's save and have a
41:32 - look beautiful every single input field
41:35 - now has a label and it's associated with
41:39 - the correct input field now for the
41:41 - final part of the challenge it makes no
41:44 - sense to have the placeholder name be
41:47 - the exact copy of the label so what we
41:50 - want instead is to write an example of a
41:55 - full name here and here an example of an
41:57 - address and so on so we are going to be
42:02 - Sherlock
42:04 - Holmes let's try this and voila we have
42:09 - an accessible signup page and if you
42:12 - noticed we also have an image and the
42:16 - image has an ALT text a woman seeing a
42:19 - drone approaching better yet our button
42:22 - says send message which is very
42:25 - non-ambiguous and clear this form
42:28 - featured input Fields as well as radio
42:30 - buttons another common element you will
42:32 - see in forms are drop- down selection
42:35 - lists but do not fret because we make
42:38 - them accessible the same way we do input
42:41 - Fields now the city input is a selection
42:44 - menu instead and we work with labels the
42:46 - same way here as with input Fields the
42:49 - four attribute matching the ID attribute
42:53 - on the select tag finally I want to
42:56 - mentioned that the text inside links and
42:58 - buttons actually acts as labels
43:01 - providing an accessible name in the
43:03 - browser's accessibility layer if for
43:07 - whatever reason we want to create a
43:08 - custom button without using the button
43:11 - element we would need to add a so-called
43:14 - Ariel label attribute that substitutes
43:16 - the regular button label I will show you
43:19 - the difference in code here quickly this
43:22 - button is using the native HTML element
43:26 - while this button is our custom widget
43:30 - making custom button widget accessible
43:33 - includes not only providing an
43:35 - accessible name through Arial
43:37 - labels but also implementing keyboard
43:40 - accessibility and JavaScript
43:43 - functionality it's often simpler and
43:46 - more accessible to use the standard
43:48 - button element when possible as it
43:51 - inherently comes with many accessibility
43:53 - features built in we will stop here
43:56 - because we will dedicate a whole lesson
43:58 - on Ara labels later on in the course for
44:01 - now awesome work as always see you in
44:04 - the next
44:06 - lesson before we move on from this form
44:09 - here you should know that the radio
44:11 - buttons could have even more
44:13 - semantically correct HTML than they
44:15 - currently have we should use the field
44:18 - set and Legend tags to group The set and
44:22 - provide a context for screen reader
44:25 - users when a screen reader encounters a
44:28 - field set tag it typically announces
44:30 - that the user has entered a new group or
44:33 - field set this helps users understand
44:35 - that the following elements are related
44:37 - and should be considered as part of a
44:39 - group and when a screen reader
44:41 - encounters a legend tag it usually reads
44:44 - it out as title or description of the
44:46 - group time for a quick challenge pause
44:49 - here and look up how to apply the field
44:52 - set and Legend tag then come back back
44:56 - here and try to make the appropriate
44:58 - update to our code you don't need to add
45:00 - any new elements you just need to update
45:03 - the tags we already have in place give
45:05 - this a
45:09 - try okay if you manage to do this you
45:11 - might have noticed that the styling of
45:13 - our form changed that's because the
45:15 - field set and Legend tags come with
45:17 - inherent styling let me catch up to
45:24 - you
45:27 - there and this styling isn't very
45:29 - consistent with the rest of our form if
45:31 - you want take a moment to play around
45:34 - with styling the field set element and
45:35 - then I'll do it
45:39 - too I hope that was a fun little break
45:42 - from the accessibility work we've been
45:44 - doing I myself came up with
45:50 - this that's much more consistent now
45:53 - let's get excited cuz it's time to
45:55 - return to our sky eats app see you
45:59 - soon here we go we have the final
46:02 - section of our futuristic food delivery
46:05 - app in place it's a sign up form to get
46:09 - notified when the Skynet drones start
46:12 - delivering pizza to your window I myself
46:15 - want to be notified when that day comes
46:17 - cuz I can't wait for such Airborne
46:20 - glutenous Delight you probably already
46:24 - predicted what your challenge will be
46:26 - I want you to make this form accessible
46:29 - in the same manner as you did in the
46:32 - previous lesson we want to add labels
46:35 - for each input field in the
46:38 - form then we want to change the
46:41 - placeholder names to be as accessible
46:44 - and helpful as possible and finally we
46:48 - want to update the button text to be
46:51 - less ambiguous currently it's just a
46:55 - check mark symbol which is quite poor
46:59 - communication pause here and make this
47:01 - notification form
47:08 - accessible okay I hope that went well
47:11 - now let's do it together first we will
47:14 - go to our HTML and add the labels on top
47:18 - like
47:24 - this we need the four attribute but what
47:27 - do we need to put in the four attribute
47:32 - well we need the ID of the input field
47:36 - that we're going to associate it to
47:39 - which we don't have yet so make an
47:42 - ID call it name and then write name up
47:50 - there it full
47:54 - name
48:03 - that should be it and we have the labels
48:06 - but now the placeholders need updating
48:09 - as well so let's write an example
48:22 - here okay much better now we need to
48:25 - make the button much less ambiguous than
48:28 - this so we remove this symbol I'm going
48:32 - to
48:33 - write notify me because that's exactly
48:36 - what I want to happen when I press the
48:39 - button great finally I hope you also
48:43 - went into our CSS and found this
48:47 - selector for the
48:48 - placeholder and updated this color
48:51 - because currently it's light gray and
48:54 - difficult to see so let's make it a
48:57 - darker gray beautiful wasn't that easy
49:01 - and pretty effortless join me in our
49:04 - next lesson where we will have a recap
49:07 - of semantic
49:08 - HTML see you
49:12 - there want to know an awesome fact
49:17 - 96.5% of websites have accessibility
49:21 - issues that you can prevent by just
49:24 - knowing the fundamental
49:26 - the very same fundamentals that you're
49:28 - learning here in this course next we
49:31 - will have a brief recap of semantic HTML
49:36 - which is the use of descriptive tags in
49:39 - our HTML you might wonder why
49:42 - descriptive tags are so important after
49:46 - all you can use a combination of CSS and
49:49 - JavaScript to make just about any HTML
49:53 - element behave in what whatever way you
49:56 - want but it makes sense to use the
49:59 - correct element for the job the major
50:02 - benefit is that certain assisted
50:05 - technologies will use different HTML
50:08 - tags to navigate through a website
50:12 - semantic HTML doesn't take any longer to
50:15 - write than non-semantic markup if you do
50:19 - it consistently from the start of your
50:22 - project even better semantic mark markup
50:26 - has another benefit Beyond accessibility
50:29 - in that search engines like Google give
50:32 - more importance to keywords inside
50:36 - headings links Etc than keywords
50:40 - included in non-semantic
50:42 - divs so your content will be more
50:46 - findable by potential users we have tags
50:50 - that are so-called Landmark regions and
50:54 - they can be a nav a header main a
50:59 - section and footer and they help
51:02 - communicate the layout and important
51:05 - areas of a page and can allow quick
51:08 - access to these different regions
51:11 - because this is a bit of a recap for you
51:14 - I will challenge you to apply what you
51:17 - know about semantic HDML straight on our
51:21 - homepage your task is to update our code
51:25 - with descriptive tags using the landmark
51:29 - regions nav main section and footer
51:34 - secondly your task is to update our
51:37 - submit button to be a button element and
51:42 - I'm talking about this submit button in
51:45 - our form right
51:46 - here pause here and show off your
51:49 - descriptive tag
51:54 - skills
51:57 - welcome back I hope that semantic HTML
52:00 - is starting to make sense to you let's
52:03 - do the challenge together
52:06 - now this is our nav currently coded as a
52:11 - div tag so let's change that very
52:15 - simply we write nav next we have the
52:19 - main content which is always positioned
52:21 - between the nav and the footer so we
52:24 - changed this to
52:26 - Main and this is the end
52:28 - tag beautiful finally here's our
52:34 - footer closing tag
52:38 - excellent remember that our challenge
52:41 - was to also use sections so this is a
52:45 - good start but in our main content we
52:48 - have several different sections here's
52:52 - one place where it makes sense to use
52:55 - The Landmark region
52:58 - section and
53:03 - here here as
53:12 - well amazing nothing changed on the
53:16 - surface but behind the curtains it's
53:19 - much more
53:20 - accessible finally we have a submit
53:23 - button here but it's coded as a div tag
53:28 - it should be a
53:30 - button like
53:33 - this fantastic that's all we need to do
53:36 - for now are changes manifest in easier
53:39 - navigation using assistive Technologies
53:42 - like screen readers because they can
53:44 - quickly identify these landmarks and
53:46 - provide shortcuts or navigation commands
53:49 - to jump directly to these sections for
53:52 - example a user can skip directly to the
53:54 - main main content or quickly access the
53:57 - navigation menu this reduces time and
54:00 - effort required to navigate through
54:02 - unnecessary content enhancing the
54:04 - efficiency of the user experience
54:07 - Landmark regions also help users
54:09 - understand the layout and organization
54:11 - of a page so when a screen reader enters
54:14 - a new section it can announce the type
54:17 - of landmark like navigation or main
54:21 - content this contextual information is
54:24 - crucial for users who cannot visually
54:27 - perceive the page layout using standard
54:30 - landmarks across websites creates a
54:32 - predictable browsing experience users
54:35 - become familiar with common landmarks
54:38 - knowing where to expect certain types of
54:40 - content like a footer for contact
54:42 - information I suggest looking up screen
54:45 - reader demos online to get a better
54:47 - sense of the user experience with and
54:49 - without semantic HTML onwards and
54:52 - upwards coders you are doing amazing ly
54:55 - see you in the next lesson where we will
54:57 - write accessible
55:01 - lists this is a continuation of applying
55:04 - descriptive tags to our HTML and here we
55:08 - are going to focus on lists any
55:11 - consecutive items in our code should be
55:13 - either an ordered or unordered list with
55:18 - list items not just a bunch of repeating
55:21 - divs your challenge is pretty
55:24 - straightforward
55:26 - identify any connected consecutive items
55:30 - secondly update the sections to be
55:33 - unordered lists thirdly wrap each item
55:37 - with a list item tag and finally add the
55:41 - necessary CSS to maintain the style of
55:45 - the sections there are several places on
55:48 - our homepage where we have connected
55:51 - consecutive items that need to be turned
55:53 - into lists so so pause here and give it
55:56 - a
56:01 - go okay I hope that went well now you
56:05 - can watch me do the same the first place
56:07 - we have consecutive items is in our nav
56:11 - bar with our nav links so let's go to
56:14 - our
56:15 - HTML and find our
56:19 - Navar and this container right here
56:22 - should be made into an un ordered list
56:26 - now I'm just going to Sidetrack briefly
56:28 - and tell you about a neat little trick
56:30 - if you press contrl D on a PC or command
56:33 - D on Mac after highlighting any text in
56:36 - your code it will additionally highlight
56:40 - the very next place in your code where
56:43 - you have the same text so I highlighted
56:46 - both the opening and the closing tag of
56:49 - the div now I can just write the
56:51 - unordered list tag another neat trick is
56:55 - to hold down the ALT key on PC or the
57:00 - option key on Mac and press in multiple
57:05 - locations this allows you to type in
57:08 - multiple locations at once like this
57:12 - it's a really handy time
57:15 - saer and here the closing
57:18 - tags now if we save we see that we have
57:22 - made the naar into an unordered list and
57:26 - we see that by these markers now we
57:29 - don't want these markers to be there but
57:32 - they are default styling of list items
57:36 - we will remove them later first we will
57:38 - focus on adding all of our lists in this
57:42 - section we have our next set of
57:45 - connected consecutive items these stats
57:48 - right
57:50 - here and we find them
57:53 - here
58:04 - and finally our footer has connected
58:08 - consecutive
58:10 - items so this should also be a
58:15 - list and we wrap each link in a list
58:19 - item
58:23 - tag
58:30 - now if we save we see that the list
58:33 - applied but we want to remove these
58:36 - markers so we head into our CSS and up
58:42 - at the top where we Define our general
58:45 - selectors I will add a new one this is
58:49 - for all unordered lists and there is a
58:53 - property called list style type and if
58:56 - we add
58:59 - none the markers disappear of course it
59:02 - would have been possible to Simply use a
59:04 - series of div elements but remember how
59:07 - we in the previous lesson talked about
59:08 - semantic HTML and how it involves using
59:11 - HTML elements for their given purpose
59:14 - this practice is key in making content
59:16 - accessible for all users including those
59:19 - using assisted Technologies when
59:21 - encountering a list screen readers
59:23 - announce the start and end of lists as
59:26 - well as information about the number of
59:27 - items helping users grasp the content
59:30 - structure however when using div tags
59:33 - for listing items we lose this semantic
59:36 - Clarity and that's why we should love
59:38 - using list tags instead amazing work as
59:41 - always and I'm really excited to talk
59:43 - about font size in the next
59:48 - lesson I don't know about you but I
59:50 - actually have pretty bad eyesight
59:53 - nothing that lenses or glasses can't fix
59:55 - which makes me very fortunate but at my
59:58 - normal viewing distance when sitting in
60:00 - front of my
60:01 - computer this is how our homepage looks
60:04 - to me without lenses or glasses but this
60:07 - is how our website would look for some
60:09 - people even with visual aids okay let's
60:12 - go back to normal for people that prefer
60:15 - it they can change the default text size
60:17 - setting in their browser to make all
60:19 - text bigger and easier to read without
60:21 - needing to use the browser Zoom tool the
60:24 - problem is that the pixel unit we
60:25 - commonly use is a fixed unit of
60:27 - measurement and it does not scale with
60:30 - changes in the browser's default font
60:32 - size to reiterate using the pixel unit
60:36 - is compatible with zooming in and out
60:38 - but in order to accommodate user
60:40 - settings we can instead use a unit in
60:42 - CSS called
60:45 - REM spelled out like this as you may
60:49 - know by now the default font size is 16
60:52 - pixels that's the font size of our
60:54 - paragraphs even before we added a font
60:57 - size property one Rim is equal to our
60:59 - default font size in this case 16 pixels
61:02 - the reason we want to write for example
61:04 - one Rim instead of 16 pixels is so that
61:07 - users can change the default size to be
61:10 - say 32 pixels instead of 16 pixels when
61:14 - they do that our text with one R all of
61:17 - a sudden becomes 32 pixels large
61:19 - alleviating our users from manually
61:22 - having to use the zoom tool in the
61:24 - Brower
61:25 - and with that I have a task for you
61:27 - simply change all font size properties
61:30 - from Pixel to REM units right here in
61:33 - the CSS and you'll need to do some
61:35 - simple calculations here if you need a
61:37 - calculator divide the pixel size with 16
61:40 - and you'll get how many Rim it should be
61:43 - see you in a
61:48 - bit okay I hope that it didn't cause too
61:51 - much headache to do the calculations
61:53 - working with units is definitely
61:55 - something that comes natural over time
61:58 - let's do it together from the top
62:02 - down okay I think we have our first font
62:05 - size here to change this is 16 pixels so
62:08 - that translates to one
62:14 - R then we have 80 pixels that should
62:17 - translate to five
62:22 - R here's 1.20 five
62:31 - R three
62:36 - Ram
62:40 - 1.25
62:46 - 2.5 three
62:50 - RAM and finally one r
62:54 - and if we go back to our website and
62:57 - have a
62:58 - look the font sizes remain unchanged if
63:02 - you want you could change the default
63:04 - text size in your browser and see how it
63:06 - affects our text amazing work as always
63:09 - I'll see you in the next
63:12 - lesson when I was starting to code
63:15 - something stuck with me and something
63:17 - sadly didn't headings was one of these
63:21 - things I skipped headings I used
63:25 - paragraph tags instead of heading tags
63:27 - you name it this graph shows how screen
63:31 - reader users mainly navigate websites
63:35 - and headings is by far the most common
63:38 - way therefore it's super important that
63:41 - we apply them properly fortunately it's
63:44 - really simple we just need to be mindful
63:46 - of three main rules heading numbers
63:50 - should be consecutive 1 2 3 4 and so on
63:54 - we should only use one H1 per page and
63:59 - finally we should apply them for
64:01 - structure not style the style we can
64:05 - change however we like in our CSS our
64:09 - homepage is currently not following
64:11 - these
64:12 - rules your challenge is to apply
64:15 - headings correctly throughout our HTML
64:19 - make sure of the following first there's
64:22 - one H1 heading no more no less secondly
64:27 - heading levels are not skipped they are
64:30 - consecutive and finally headings always
64:34 - introduce new content sections pause
64:37 - here and update the
64:44 - homepage okay I hope you managed now I
64:47 - will do what you just
64:51 - did luckily as you probably noticed list
64:54 - there is really only one section that we
64:57 - need to make changes to and it's the
65:00 - info section right
65:01 - here remember how we should only have
65:04 - one H1 heading per page well in this
65:09 - section we already have one for our
65:13 - Skynet eats text so this should not be
65:17 - another H1 change that to
65:20 - H2 and then in our list down here we
65:24 - have H4 tags and H2 straight into H4 is
65:29 - not a consecutive pattern so we want to
65:32 - change all of these
65:36 - h3s we apply headings for structure and
65:39 - never style that's it and because we
65:43 - style our headings in our CSS nothing
65:46 - has changed by changing the heading tags
65:50 - in our
65:51 - HTML really fantastic work you are the
65:55 - superhero of the hour and that's all you
65:57 - need to know on descriptive tags we're
66:00 - really getting close to the end now next
66:02 - we will have a look at something called
66:04 - Arya so see you
66:07 - there in earlier lessons I briefly
66:10 - mentioned something called Arya Arya
66:13 - stands for accessible Rich internet
66:15 - applications Arya is a set of attributes
66:18 - that you can add to HTML elements to
66:20 - provide more context and information to
66:23 - assist Technologies it helps fill in the
66:26 - gaps where html's Native semantics fall
66:29 - short let me show you an example these
66:32 - two buttons look identical right well I
66:36 - made one of them using the semantic HTML
66:39 - button
66:43 - element and the other is just a regular
66:46 - div element that I style to look exactly
66:49 - the same but here is where they
66:50 - currently
66:52 - differ the but Buton element is
66:55 - inherently keyboard accessible and
66:57 - focusable when users navigate the web
66:59 - page using a keyboard they can reach an
67:01 - activate the button using the Tab Key
67:03 - and Enter space key respectively screen
67:06 - readers inherently recognize button
67:09 - elements as interactive controls along
67:11 - with the button label and the button
67:13 - element does not require additional ARA
67:16 - attributes to be recognized as a button
67:19 - since it has built-in semantics when we
67:22 - use the button element we get all this
67:24 - accessible functionality for free but
67:26 - when we decide to make a custom button
67:28 - like
67:31 - this we lose out on that functionality
67:34 - so we need to use ARA to reintroduce
67:36 - some of its functionality you can
67:38 - already tell that in most cases it is
67:41 - way easier for us to just use the
67:43 - semantic HTML tags this is known as the
67:46 - first rule of ARA is don't use ARA well
67:50 - that's a bit contradictory isn't it what
67:52 - it means is that if you can use a native
67:56 - HTML element or attribute with the
67:58 - semantics and behavior you require
68:01 - already built in instead of repurposing
68:04 - an element and adding an ARA Ro state or
68:08 - property to make it accessible then do
68:10 - so to make this div accessible it would
68:13 - need additional attributes such
68:16 - as roll button to Define its Ro as a
68:20 - button and tab index zero to make it
68:24 - keyboard focusable even with these
68:26 - attributes it might still lack some of
68:28 - the built-in accessibility features of a
68:30 - native button in this case an Arial
68:33 - label attribute would probably be
68:35 - redundant because the sign up label is
68:39 - explanatory enough but what's a typical
68:42 - use case then for ARA well they include
68:45 - elements like toggle switches sliders
68:48 - and non-standard labels I just added a
68:51 - common type of toggle switch to our
68:53 - website a dark theme
69:02 - toggle these elements sometimes lack
69:05 - native semantics making it challenging
69:07 - for assisted Technologies to interpret
69:09 - them correctly which is true for our
69:11 - toggle right now so here's a challenge
69:13 - for you I want you to add the three ARA
69:17 - attributes that do the following first
69:19 - define the role of the toggle switch
69:22 - then make the toggle switch keyboard
69:24 - focusable and lastly communicate the
69:27 - state to assisted Technologies in some
69:29 - way in our case that the toggle is on or
69:32 - off you might need to look up what value
69:34 - to use for the role attribute here and
69:36 - that gives us a chance to practice
69:37 - searching for information which is a big
69:39 - part of any developer's job pause here
69:42 - and give this a
69:46 - go did you figure it out no worries if
69:49 - you didn't that's why we're doing this
69:52 - together
69:56 - here the role attribute defines the role
69:58 - of an element to assist of Technologies
70:01 - in the context of this custom toggle
70:03 - switch roll switch indicates that the
70:05 - element is intended to be used as a
70:07 - switch similar to a checkbox but
70:09 - typically used for onoff States if we
70:12 - omit the role attribute here assisted
70:14 - Technologies may not recognize it as an
70:17 - interactive element the ARA checked
70:20 - attribute here tells the screen reader
70:22 - whether the switch dis activated or not
70:25 - without area checked there's no
70:26 - accessible way for assestive
70:28 - Technologies to determine the state of
70:30 - the custom switch and tab index
70:33 - introduces keyboard
70:35 - accessibility to summarize we want to
70:38 - use ARA when we're creating a UI
70:40 - component that doesn't exist in HTML we
70:43 - need to provide additional information
70:45 - or context to assistive Technologies
70:48 - which can't be achieved with HTML alone
70:51 - however avoid using ARA if the same
70:55 - functionality can be achieved with
70:57 - Native HTML elements as we wrap up
71:00 - remember that ARA is a powerful tool for
71:03 - enhancing accessibility but it should be
71:05 - used judiciously and thoughtfully its
71:07 - role is to complement HTML and not
71:09 - replace it great job and see you in the
71:11 - next
71:14 - lesson ARA live regions are part of a
71:17 - web page marked to be dynamically
71:19 - updated when content changes in these
71:21 - regions it is announced by screen
71:23 - readers without the need for the user to
71:25 - navigate to the changed content common
71:28 - use cases for ARA live regions include
71:31 - realtime notifications like
71:34 - these or such as status messages after
71:38 - form submissions and updates resulting
71:41 - from on page filtering or
71:44 - searches we use an attribute called ARA
71:47 - controls to connect the cause element
71:50 - with the effect element and we can also
71:53 - choose between different settings for
71:55 - how these changes are announced for this
71:58 - we use an attribute called ARA live when
72:01 - it has the value off that is the assumed
72:04 - default for elements so it should not be
72:07 - necessary to set this explicitly ARA
72:10 - live polite is by far the most common
72:13 - one to use any region which receives
72:15 - updates that are important for the user
72:17 - to receive but not so rapid as to be
72:20 - annoying should receive this attribute
72:22 - the screen reader will announce this
72:24 - change when there is a natural pause in
72:26 - their speech are alive with the value of
72:29 - assertive should only be used for time
72:32 - sensitive or critical notifications that
72:34 - absolutely required the user's immediate
72:36 - attention generally a change to an
72:39 - assertive live region will interrupt any
72:42 - announcement a screen reader is
72:43 - currently making as such it can be both
72:46 - annoying and disruptive and should only
72:48 - be used sparingly let's look at an
72:51 - example once the submit button here is
72:54 - clicked we have a JavaScript function
72:57 - that replaces it with this
73:00 - paragraph originating from right
73:08 - here thanks to using the ARA controls
73:11 - attribute here we point assistive
73:13 - Technologies towards an ARA live region
73:16 - the element with the ID of submit
73:20 - message match in the ID here a screen
73:23 - reader for example would thereby detect
73:26 - the change in the content of the ARA
73:28 - live region and read its content but we
73:30 - want to do so politely as in we want the
73:33 - screen reader to announce the new
73:35 - content when it has time in between
73:37 - reading other content so I have a
73:40 - challenge for you update the code so
73:43 - that pressing the submit button politely
73:45 - announces the new revealed submit
73:47 - message pause here and do this
73:52 - now okay so we should use the attribute
73:55 - Ariel live we should put it in this
73:58 - element that we create when we press the
74:00 - submit button let's do it right here and
74:03 - it should have the value
74:05 - polite great job now there's one more
74:08 - thing we could do to make life easier
74:10 - especially for users with assistive
74:13 - Technologies there's a concept called
74:15 - programmatic Focus management this
74:18 - technique involves controlling the
74:20 - browser's focus in response to certain
74:22 - user actions like opening a menu or
74:25 - dialogue programmatic Focus management
74:28 - should be used when opening models or
74:30 - menus to direct the user's attention
74:33 - after completing actions like form
74:36 - submissions to bring Focus to relevant
74:38 - content or controls or to maintain a
74:41 - logical flow of navigation especially
74:43 - for keyboard users notice how number two
74:46 - here describes exactly what we are doing
74:48 - in our web page because of that I want
74:51 - you to try to do this for our web page
74:53 - all on your own so I want you to add
74:57 - Focus to the home link when the user
74:59 - submits a message by selecting the
75:01 - correct element and adding the focus
75:03 - function call to it you will add a line
75:06 - of code up here in the function and you
75:09 - will need to add something to the HTML
75:12 - as well and I want you to try to figure
75:14 - out what that is but it involves somehow
75:18 - getting the home link element in the
75:21 - same way as we get the submit button
75:24 - pause here and give this a
75:28 - go did you figure it out regardless I
75:31 - will do it with you
75:33 - now I will start by adding an ID to the
75:37 - link tag here let's call it home
75:43 - link then I will get access to the home
75:46 - link in the same way I get access to the
75:49 - submit button up here let me actually
75:51 - just copy this
75:55 - and then we want to call the focus
75:58 - function on the home link like
76:01 - so now if you try it out it works
76:04 - beautifully when we press the submit
76:06 - button not only do we get this message
76:08 - informing us that the form was submitted
76:10 - successfully but screen readers are
76:12 - informed of this too without having to
76:14 - navigate to this new informational
76:16 - element first focus is also placed on a
76:20 - link to the homepage which makes sense
76:22 - since we are probably done here on the
76:24 - form page and this helps users with
76:26 - assist of Technologies a lot it's
76:29 - important to note that we should only
76:31 - use live regions for essential updates
76:34 - and avoid overuse of focus management as
76:38 - it can easily disorient users if not
76:40 - done logically so in summary ARA live
76:43 - regions and programmatic focus
76:45 - management are Advanced Tools in your
76:47 - accessibility tool kit used effectively
76:50 - they can greatly enhance the user
76:52 - experience for screen readers and
76:54 - keyboard users alike keep these
76:56 - techniques in mind as you develop more
76:58 - interactive and accessible web
77:00 - applications and I will see you in the
77:02 - next
77:05 - lesson functions are red for Loops are
77:08 - blue scrim by is great and so are you I
77:12 - wanted to end on something fun and this
77:15 - is something that you can impress anyone
77:17 - with and hopefully helps you think more
77:21 - creatively about accessibility
77:23 - we will make a hidden link for skipping
77:26 - straight to the main content of our
77:28 - homepage have you ever looked up a
77:30 - recipe on a recipe site and because of
77:33 - the long introduction there's a link
77:35 - saying something like go to recipe and
77:38 - when you click on it you get to skip all
77:41 - the stuff you weren't interested in
77:43 - that's exactly what a skip navigation
77:46 - link does for users that navigate by
77:49 - tabbing through focusable items on a
77:51 - site it can be frustrating to tab
77:54 - through all the navigation links before
77:57 - arriving to the main content therefore
78:01 - we will offer a link that skips straight
78:03 - to the main
78:05 - content this is a website for coding
78:08 - poetry and it has a long list of
78:11 - navigation links try pressing your tab
78:14 - key now and notice what happens you may
78:17 - need to refresh your little browser
78:19 - window I'll
78:21 - wait did you see that our skip
78:24 - navigation link suddenly appeared from
78:26 - the side and if we click the link it
78:28 - takes us down to the main content and
78:31 - disappears
78:33 - again I think this is super cool by now
78:36 - you are well aware how links work but
78:39 - how are we making it appear and
78:42 - disappear there are several ways to hide
78:46 - an element and in this case some of them
78:49 - are not accessible and some of them are
78:54 - the reason these
78:55 - approaches are not accessible is because
78:58 - we can't focus the elements but with one
79:02 - of these on our right we can I have a
79:06 - couple tasks for you the first one is to
79:09 - make this into an accessible link and
79:12 - you'll need to apply the knowledge
79:14 - you've learned about links from our
79:16 - previous lessons there are more than one
79:19 - way to make it into an accessible link
79:22 - so use your creativity pause now and
79:25 - give this a
79:31 - go I hope that went well now let's do it
79:34 - together it would be enough to Simply
79:36 - make the link blue and uh say apply an
79:40 - underline but I will do something
79:42 - slightly different I will add a
79:50 - border and some padding
80:00 - and Border
80:04 - radius now if we take a look we see that
80:07 - something is sticking out here and I
80:10 - styled it with the intent to shift it a
80:12 - bit more to the
80:15 - left just like this and then we also
80:19 - need to change it here and now if we
80:23 - have a look I think that looks pretty
80:25 - good excellent work feel free to play
80:29 - around with it some more when you're
80:31 - ready to move on we will look at one
80:34 - potential issue with our link see you in
80:37 - the next
80:40 - lesson while our skip navigation link
80:43 - looks great there is still a problem if
80:46 - we decide to hide it like this it's not
80:49 - great if it just jumps in and out of you
80:52 - like this since a user may not expect it
80:55 - they might quickly tap past it not
80:58 - knowing it was ever there one solution
81:01 - to this is to apply a transition period
81:05 - this is your challenge look up the
81:08 - transition CSS property and make it so
81:12 - that our skip navigation link takes 1
81:15 - second to appear when focused and 3
81:18 - seconds to disappear when no longer
81:21 - focused pause now and try to figure out
81:24 - how to do
81:29 - this if you managed to do this I am
81:32 - beyond impressed if not don't worry I'll
81:35 - show you so that you can do it with ease
81:38 - in the future all we have to do is add
81:41 - the transition property to our skip
81:45 - navigation link and add one second like
81:49 - that with second being represented by an
81:52 - s
81:53 - this means that it will take 1 second to
81:56 - transition from this state to the state
82:01 - we Define in our pseudo class and
82:04 - because we want the transition to be
82:06 - slightly different when we no longer
82:09 - focus on the element we add it here as
82:12 - well with 3 seconds instead of one pause
82:16 - quickly here and see what this did now
82:18 - you see that even if we tap quickly past
82:21 - our skip navigation link it won't
82:23 - immediately disappear and users will
82:26 - therefore know that it is there this is
82:29 - not the most important accessibility
82:31 - feature to have on a website but it can
82:34 - definitely be fun awesome work when you
82:38 - feel ready I will see you back at our
82:43 - homepage welcome back I will send you
82:46 - off on a quest straight away your
82:50 - challenge is to build your very own skip
82:54 - navigation link for our homepage there
82:57 - are two requirements its default State
83:00 - should be visually hidden yet accessible
83:03 - to all keyboard users and secondly it
83:07 - should utilize the transition property
83:10 - pause now and follow these five steps
83:13 - good luck and I'll be waiting for you on
83:15 - the other
83:20 - side you are incredible and I hope this
83:24 - got your creative juices flowing the
83:27 - first step was to add the skip
83:29 - navigation Link in our
83:32 - HTML and we put it here right above the
83:40 - logo then we want to add an hre
83:45 - attribute and we want to point it to our
83:48 - main content which is here to connect
83:52 - them this needs the
83:54 - ID same name as we put up
83:59 - here great but right now it's displacing
84:03 - our whole navbar so let's apply some
84:10 - CSS I simply added the same CSS as we
84:13 - did in the previous lesson in fact you
84:16 - have now learned the essentials of
84:19 - accessible development and we have
84:21 - finally ared at your last big challenge
84:26 - when you feel ready I will see you
84:30 - there in this final challenge we are
84:33 - presented with a brand new contact page
84:36 - of our drone food delivery site that on
84:39 - the surface might look good for many
84:42 - however there are several accessibility
84:45 - violations hiding in the code of this
84:48 - page and it's up to you to identify them
84:52 - write them out as a comment right here
84:56 - to make sure that you have identified
84:58 - everything there is when you can't find
85:01 - any more accessibility violations we
85:04 - will go through this together pause here
85:07 - and happy
85:13 - searching I am sure you found a lot of
85:15 - them let's have a
85:17 - look you may have noticed that the
85:20 - placeholder text is kind of difficult to
85:23 - read with this light gray color on a
85:26 - white
85:28 - background so we should add that
85:35 - here furthermore we see we have an image
85:39 - here and when we have an image it needs
85:42 - to have an ALT tag if we go into our
85:44 - HTML we find our image down there and it
85:49 - does not have an ALT tag currently
85:52 - so we add this to our
85:56 - list that's hugely
85:58 - important now we have a look again and
86:01 - not only are the placeholder names
86:04 - difficult to read but this form has
86:07 - several accessibility issues another
86:10 - being the complete lack of
86:18 - labels and what about this button a
86:21 - button that just says done is a little
86:24 - bit ambiguous
86:27 - so that's also something we would prefer
86:34 - changing I think that's it from what we
86:37 - can see by just looking at a page but we
86:41 - need to head into our HTML to see how
86:44 - the code is
86:45 - structured we have the body tag here but
86:49 - while this div has an IDE of main it
86:54 - lacks the main tag on top of that the
86:57 - page starts with an H2 instead of an H1
87:01 - heading finally if we head to our CSS
87:05 - file we notice that font sizes are
87:10 - defined in pixels and not R so we will
87:13 - first
87:16 - add that semantic HTML is lacking and
87:21 - finally
87:24 - that the font sizes are defined in
87:26 - pixels rather than R okay that should be
87:30 - all of them let's start
87:35 - fixing this is the moment we've been
87:37 - waiting for apply your amazing coding
87:40 - skills and knowledge of accessible
87:42 - development to make this page delightful
87:45 - for everyone to use by fixing each and
87:49 - every one of these accessibility issues
87:52 - issues pause now and I will see you very
88:00 - soon okay I hope most of that was now
88:04 - effortless for you let's fix these
88:06 - issues one by one in order first we need
88:10 - to update the placeholder text color so
88:14 - that the contrast has a AAA level
88:19 - accessibility here's the color for the
88:21 - placeholder text and I checked in
88:24 - advance and this color on a white
88:28 - background will give us a great contrast
88:30 - value and as we see it's so much easier
88:33 - to read next up the alternative text for
88:37 - our image is missing so let's go into
88:40 - our HTML and we have our image down here
88:43 - and we'll just add the alt
88:46 - tag that description makes sense to me
88:51 - beautiful next next we do not currently
88:54 - have labels for our input Fields so
88:57 - let's add
89:03 - those and this is connected to the ID of
89:08 - our input field which it doesn't
89:10 - currently have so we need to add the ID
89:14 - and name it whatever we put
89:17 - here let's write full
89:20 - name
89:26 - that works let's add the labels for the
89:28 - other input
89:37 - fields and this text area should have a
89:41 - label
89:50 - to
89:52 - now here's a part that I intentionally
89:54 - left out do you notice how the
89:57 - placeholder name and the label are
90:00 - currently the same when you thought
90:03 - about what to name your labels your
90:06 - ideal solution would have been to name
90:10 - the labels like this and then change the
90:13 - placeholder names to be a appropriate
90:17 - examples for
90:20 - instance
90:26 - and if we do that we don't have any
90:29 - repeating text moving on the button text
90:34 - was definitely a little bit ambiguous so
90:37 - instead of just saying done let's
90:39 - describe the
90:42 - action like this that's
90:45 - better now we need to look at our
90:47 - semantic
90:49 - HTML and make sure that we are using
90:52 - descriptive tags the first issue we saw
90:55 - was that this was just a div when it
90:58 - should be a main
91:01 - tag secondly the main heading of our new
91:05 - page should be an H1 not H2 we should
91:09 - not skip heading
91:12 - numbers and finally font sizes should
91:17 - not be defined in pixels but rather we
91:20 - should Define them in REM here we have
91:23 - the first one and this is
91:26 - PR this is 1.25
91:31 - REM and this is one
91:35 - Rim that's it you're done you made both
91:39 - the homepage and the contact page of
91:42 - Skynet eats website accessible to all
91:46 - users phenomenal
91:50 - work you did it you were able to step by
91:55 - step take a website and make it much
91:58 - more accessible let's do a brief recap
92:01 - of what we have learned so far we
92:05 - learned the importance of text contrast
92:08 - and the different accessibility grades
92:11 - AAA being the best we learned to always
92:16 - include an ALT tag for images in our
92:19 - HTML and how to write descriptive
92:22 - alternative texts we learned how to code
92:26 - accessible links form fields we got a
92:30 - recap on semantic HTML and even got to
92:34 - code a link that skips straight to the
92:37 - main content of a page being able to
92:41 - develop accessibly is such a superpower
92:45 - and something that will make you and
92:48 - your future project stand out from the
92:50 - rest I'll leave you with a little rhyme
92:54 - accessibility is important that much is
92:57 - true the scrimba community is great and
93:01 - you're part of it too best of luck in
93:03 - your next endeavor