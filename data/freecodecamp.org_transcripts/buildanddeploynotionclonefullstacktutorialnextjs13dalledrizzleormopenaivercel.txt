00:00 - learn how to build and deploy a full
00:02 - stack notion clone using nexs 13 Dolly
00:06 - and versel you'll style the app using
00:09 - Shad Cen and Tailwind CSS you'll also
00:12 - learn how to interact with databases
00:14 - with the efficiency of orms Elliot Chong
00:17 - created this course he specializes in
00:20 - creating comprehensive tutorials on how
00:22 - to build AI powered
00:26 - applications hi what's Poppin I'm Elliot
00:28 - a web developer from Singapore and today
00:31 - here I have a build for you that is a
00:33 - notion plus AI clone so basically what I
00:35 - does is a AI note taking assistant so
00:37 - it's kind of like notion where you have
00:39 - a buin editor where you can type your
00:41 - text and there will be an AI integration
00:43 - with it so let's just show you what I
00:45 - mean so here we can see that it's
00:46 - deployed to versel right using nextjs
00:49 - and you can press get started and
00:50 - basically will'll be using click uh
00:52 - click authentication for this app so we
00:54 - can either sign in with Google or GitHub
00:56 - and we'll press authorize so I'm going
00:58 - to show you how to build this entire
00:59 - thing and deploy it from scratch so you
01:01 - can see we land in this beautiful
01:02 - dashboard right we're able to see all
01:04 - notebooks and all these images today
01:06 - we'll be using learning how to use the
01:08 - open AI di API so if you're not sure do
01:11 - is a uh di is an image generation is a
01:15 - text to image model developed by open AI
01:18 - so we I'll be teaching you how to use
01:19 - your API to actually generate these
01:21 - images that's relevant to uh the links
01:23 - okay so let me just show you an example
01:25 - of how it looks like so we can here we
01:27 - can create a new notebook so you can
01:28 - name anything you want like let's say
01:30 - cats all right so basically what this
01:32 - does it will hit the verel API and this
01:34 - API will be running on the edge so I
01:36 - explain what the edge is but basically
01:38 - this age uh run time will allow you to
01:40 - run uh AI functions for much longer and
01:42 - it's much faster also so the reason why
01:45 - it's taking a little while is because
01:46 - it's trying to generate the image so
01:47 - that takes about a few seconds after
01:49 - you've generated it brings you to this
01:50 - really nice what you see is what you get
01:52 - editor where you can start typing your
01:53 - notes like uh hello and you can even
01:56 - like have functions like italicize it or
01:58 - strike through it or you can make make
01:59 - it into a code block right here's
02:01 - another code block you can type in like
02:03 - JavaScript functions or anything right
02:05 - just to take notes okay but what's
02:08 - really cool about this and what I'm
02:09 - really happy to show you today is you
02:11 - can write you can have ai auto complete
02:13 - so here I can write like uh cats R right
02:18 - and let's say I'm trying to think of
02:19 - something I can press shift a right and
02:21 - it's going to have a AI generated you
02:23 - can see the AI is going to be uh
02:24 - basically trying to complete my sentence
02:26 - so here it generate that cats are
02:28 - mysterious creatures with eyes the same
02:30 - whole world of Secrets right we can
02:32 - basically it just uh it's a very nice AI
02:34 - functionality and be using the versal AI
02:37 - SDK right to actually uh make this
02:39 - streaming feature so you can see that as
02:41 - we type like let's say we can say that
02:43 - uh what else uh cats and docs R and
02:47 - let's try the auto complete are not just
02:50 - pets but also Guardians Of Secrets right
02:52 - so it's a very nice uh cool feature that
02:54 - you can help uh in your writing
02:56 - assistant yeah so be building everything
02:58 - from scratch deploying it I'll teach you
02:59 - how to how to make all this uh what you
03:01 - see is what you get editor you can have
03:02 - like list and stuff so you can really
03:04 - make uh make this into like your daily
03:06 - editor where you can just type notes and
03:07 - have ai to assist you and you can see
03:09 - there auto save feature so all of these
03:11 - notes are saved to the database so you
03:13 - can see that even if you refresh right
03:15 - the the the the data is being persisted
03:17 - and we'll be using a database called
03:19 - neon DB which is a serverless postgress
03:22 - database yeah so if you come back here
03:25 - right if you come back to uh the
03:26 - dashboard right and we refresh the page
03:29 - we can see that the cats has been
03:31 - generated so there's a image that's
03:32 - using Dar API to generate a notebook uh
03:36 - profile thumbnail image to fit whatever
03:38 - name that we have G given it so all this
03:40 - will be using prompt engineering yeah so
03:43 - it's quite a simple short build but I
03:45 - just want to go through how we can build
03:46 - this out
03:48 - today all right so after looking at the
03:50 - demo I'm going to go through a little of
03:51 - what we'll be learning today an overview
03:54 - so we'll be using next gs13 with the app
03:56 - directory for this app we'll be using
03:57 - shat CN which is a tailn CSS Library uh
04:00 - that is very accessible and comes with a
04:02 - lot of nice user interfaces components
04:04 - of the box for us to use and be
04:07 - obviously using open AI for the dly text
04:10 - image generation and also the auto
04:11 - complete uh note feature and number four
04:15 - we learning about the versal H run time
04:17 - so because normally versel free tier
04:20 - allows your your apis to actually run
04:22 - for only 5 Seconds right but then the
04:24 - API like the open ai ai image
04:26 - Generations will take about 8 to 10
04:29 - seconds so if we use a normal uh versal
04:32 - runtime without the age run time it's
04:33 - going to basically uh time out and then
04:36 - it won't allow your function to run it
04:37 - won't allow the AI to generate the image
04:39 - before expiring the API therefore if you
04:41 - run the versel on this a special age run
04:43 - time it allows us to run the function
04:45 - for much longer and make it much faster
04:48 - okay for our orm we'll be using dzo RM
04:50 - so this is a new orm that is um in
04:53 - competition with Prisma right it's a
04:56 - it's a typescript object relational
04:57 - mapper that allows uh interacting with
04:59 - your SQL databas is much easier and give
05:02 - you type safety and we'll be using neon
05:04 - database as I said just now and for
05:06 - number seven we'll be using Firebase
05:08 - storage to save all the files right so
05:09 - you can see that here all these images
05:11 - that's generated it'll be stored in our
05:13 - filebase app so then we can access the
05:15 - URL through there then we'll be using
05:17 - this for the node editor we'll be using
05:19 - this Library called tip tab uh tip tab
05:22 - node editor right which is another
05:24 - library to basically help you make this
05:26 - kind of very full flet uh very full flet
05:29 - what you see is what you get editor and
05:31 - lastly the versel AI SDK will help us
05:33 - tie the uh front end to the AI back end
05:36 - all right so uh let us get started so
05:39 - here I'm going to open up my terminal
05:41 - and let us do uh let us do to create the
05:44 - next GS project let's do MPX create-x
05:47 - app at latest with the typescript flag
05:49 - so press that it's going to ask us for
05:51 - the project name right it's going to ask
05:53 - us to install the latest version first
05:55 - and then it's going to ask us the for
05:56 - the project name in this case I'm going
05:58 - to do ideation D YouTube so it's just a
06:01 - nice P like AI idation D YouTube so
06:04 - let's just press enter we'll be using ES
06:06 - lint to in CSS we'll be using the source
06:08 - directory and the app router so this is
06:10 - new within xjs the3 and also we'll be uh
06:13 - just leave everything on default and
06:15 - then when it's done I'm going to come
06:16 - back to you okay so now that the next sh
06:19 - project has finished initializing I'm
06:20 - going to do CD adiation Das YouTube then
06:24 - let us do code dot to open up this
06:26 - folder in our vs code editor okay
06:29 - excellent
06:30 - I'm close down this terminal first let's
06:32 - expand the code and what I'm going to do
06:34 - here now first is I'm going to run uh
06:36 - mpm run death right to make sure that
06:38 - the next sh project is up and running so
06:41 - I'm going to come back to my uh browser
06:43 - here I'm going to open up Local Host
06:45 - 3,000 okay and what I'm going to do here
06:48 - is I'm just going to open this up to the
06:50 - right and then the code on the left so
06:53 - that we can see what's happening all
06:55 - right so here we have the next project
06:57 - next project that running and that's
06:59 - good that means everything is working
07:01 - all right so let me just uh walk you
07:03 - through about how the project structure
07:04 - is going to look like so here you can
07:06 - see that it's running on XS
07:08 - 13.5.3 right and so there's this new app
07:10 - directory so you see if you go into the
07:12 - source folder you can see there's this
07:13 - new app directory so how the layout how
07:16 - the navigation is done in Nexus 13.4 is
07:19 - through this special page. TSX so this
07:22 - page. TSX is a special F name right and
07:24 - is is basically doing file based routing
07:26 - so any folder uh inside this app
07:28 - directory that contains this page. TSX
07:31 - will be mapped to the file to the to the
07:33 - route name so because this page. TSX
07:35 - live in the root of this app we can see
07:38 - that it maps to this uh root uh root URL
07:40 - so this basically this file here in this
07:43 - page of TSX map to whatever is shown
07:45 - here in this page so what I'm going to
07:47 - do here is I'm going to uh just return a
07:50 - normal H1 that have a class name of text
07:54 - rate 600 right and say hello world so
07:57 - I'm going to test out TN CSS so because
08:00 - next J didn't really comes with TN CSS
08:02 - when we initialize it and we can see
08:04 - that it works so we know that tawin CSS
08:06 - is working okay so now that we have set
08:08 - up TN CSS and nextjs let's not install
08:11 - shet yet so if you're unfamiliar with
08:13 - shetsen Shen is this very beautiful
08:15 - component Library uh with beautifully
08:17 - designed components that we can copy and
08:19 - paste into our apps and is fully
08:21 - accessible and customizable and this is
08:23 - all built on rtics UI and PN CSS so you
08:26 - can see it really give us very nice
08:28 - beautiful user interfaces
08:29 - right which we can just use directly
08:31 - into our app so to set up Shen right
08:34 - come come back down to your terminal and
08:36 - what you got to do is going to run this
08:37 - command MPX shed uh cn- UI at latest in
08:41 - it so to initialize the shed CN
08:44 - application right then it's going to ask
08:46 - us if you're using typescript we press
08:48 - yes then it ask us which St we can leave
08:50 - as default and leave the color Bas color
08:52 - as default it's going to ask us where
08:54 - our global. CSS is right right now we
08:56 - can see that there this s/ appg global.
08:58 - CS s right this is this comes with the
09:00 - in like the default default nextg
09:03 - project what I want to do is delete this
09:05 - Global s CSS I'm going override it in
09:07 - this uh in the shn file so because we
09:10 - want shn to handle all selling for us so
09:12 - we can tell the global sour CSS lives in
09:15 - sourcea global. CSS okay Enter and it's
09:20 - going ask us if you want to use CSS
09:21 - variables press yes and it us where our
09:24 - Tailwind config is so in this case we we
09:26 - using typescript so the tailn config
09:28 - actually lives in T.C
09:32 - config.inc
09:35 - config.sys as default and the import
09:38 - alas for utilities as default and lastly
09:40 - we're using react s components press yes
09:43 - it ask us if want to write the
09:44 - configuration to components. Json so
09:46 - it's just writing the configurations to
09:47 - a file to be saved by shm okay perfect
09:51 - so now we can see that uh there this new
09:54 - components. Json file here and basically
09:56 - it contains all the it contains all the
09:58 - configuration that we just entered in
09:59 - the terminal all right so how do we
10:02 - actually start using shs yet so imagine
10:04 - I to use like a button component right
10:06 - so for now I'm just going to uh I'm
10:08 - going to restart the server right and
10:10 - then let's see what's what's happening
10:11 - so let's come back to page. TSX all
10:14 - right so right now it's uh it's it's Bri
10:17 - color so everything is been reseted but
10:19 - let's say I want to install uh the
10:20 - shetan button so whenever you want to
10:22 - use a new component within Shen you have
10:24 - to manually install it and this is a
10:25 - good thing because you only install the
10:27 - components you need and the components
10:28 - you don't need will not be built into
10:30 - your app as a final production okay so
10:33 - you want to install a new button you do
10:34 - MPX sh uh sh cn- UI at latest add button
10:39 - so you can add the button component it's
10:41 - going to ask you if you want to confirm
10:42 - so just uh just install the button it's
10:45 - automatically going to install it and
10:47 - let's see where it installs it in so we
10:49 - can see that under Source app we can now
10:51 - see there's a new components folder if
10:53 - you go into components right we can see
10:55 - that this is uh there's this UI folder
10:57 - and within the UI folder is this button
10:59 - TSX so this button. TSX is basically
11:02 - what is generated by Shen right it uses
11:04 - this like called class variance auality
11:07 - authority to basically give us the
11:08 - styling for using TN CSS to give us the
11:11 - styling for uh different variants of the
11:13 - pre-art button so you never really need
11:16 - to go into this file to touch the
11:17 - buttons right all you need to do is know
11:19 - that this file exists and you can use it
11:21 - so I'm going to close it out and how do
11:23 - you actually use it so instead of
11:24 - returning a H1 I'm going to just in
11:26 - return a button and we can see that this
11:28 - is automate imported from ui/ button so
11:31 - let me just press enter Auto Import and
11:34 - going to say click me so let me save
11:36 - that and now you can see that the button
11:38 - is showing up so we have successfully
11:40 - installed sh
11:42 - CN all right so now that we have set up
11:44 - shat CN let's now go on to next step of
11:46 - uh installing our cler so cler we'll be
11:49 - using clerk.com uh for this for the
11:51 - authentication part right cler is a
11:53 - really it's a beautiful framework it's a
11:54 - beautiful library that makes
11:55 - authentication so easy and simple so I'm
11:57 - going to teach you how to use it so come
11:59 - down to cl.com and you have to log in to
12:01 - the account or sign up and after that
12:03 - you can come down to your dashboard so
12:05 - in the dashboard you're able to see all
12:06 - the different apps that you have made
12:08 - all right so in this case I'm going to
12:09 - add a new application and I'm going to
12:11 - zoom in here and we're going to
12:12 - basically name it uh ai ai dation all
12:16 - right YouTube okay and then it's asking
12:19 - us how will user sign in so you can
12:21 - choose email as default I'm going to
12:22 - turn it off because I only want to let
12:24 - them sign in using Google and also uh
12:27 - GitHub so YouTube uh Google and GitHub
12:30 - for now and you can choose and T Go on
12:32 - whatever methods you want them to sign
12:33 - in so then after you have chosen just
12:35 - press create application and you will
12:37 - create a it'll create the secret keys
12:38 - for you to use in your application so
12:41 - what I'm going to do is I'm going to
12:42 - come down here and I'm going to press
12:43 - continue IND dos CU we're using next 1
12:46 - right so continue Indo so let's follow
12:48 - the instructions on how to actually use
12:50 - this uh use this Library so the first
12:52 - step is to install cl/ nexts so I'm
12:55 - going to install it I'm going to follow
12:56 - the instructions so come down to my
12:58 - terminal I'm going to do mpm install at
13:00 - clerk / nextjs okay so now that we've
13:04 - installed it let us actually put out
13:06 - environmental keys so come down to your
13:08 - file directory in the root file folder
13:10 - all right on the root folder create a
13:12 - newv file and one more thing to know is
13:15 - come down to your gor and I want to add
13:17 - the EnV extension to the gor so that
13:20 - this is so that the environmental file
13:22 - does not get committed into your git
13:24 - repository and does not get pushed up to
13:25 - GitHub later on right so because you
13:27 - don't want people to see your secret
13:29 - keys because they can easily abuse it
13:31 - therefore we're adding this.v into the G
13:33 - ignore okay so let us now continue
13:36 - pasting in this uh these two keys into
13:39 - the EnV so we'll place it in and save it
13:42 - so now we have this uh next public uh
13:44 - next cler public cler publishable key
13:47 - and the secret key now let's go on to
13:49 - the third step which is to mount the
13:50 - cler provider right so we need this cler
13:52 - provider to wrap our entire application
13:54 - to give the entire application the
13:56 - context of who's the currently loog in
13:57 - user and whether they even Lo Lo in so
14:00 - come down to layout. TSX right so this
14:03 - layout. TS is basically what WS the
14:05 - entire application and what I'm going to
14:07 - do is here I'm going to just import
14:10 - import uh from at cl/ next year so this
14:14 - is a li a library we just mpm installed
14:18 - just now and I want to uh import this CL
14:21 - provider right then I'm going to come
14:22 - down to this return I'm going to just
14:24 - wrap the entire application in the CL
14:27 - provider just wrap it here and save it
14:30 - all right so that's good and now uh
14:33 - since we're in layout let me talk about
14:35 - this metadata so this metadata is just
14:37 - uh what DET takes what is shown on this
14:39 - uh you can see that there is this the
14:41 - tab is create next app right so this is
14:43 - what corresponds to the title tab the
14:45 - tab title so you can just change it to
14:47 - let's say
14:47 - iation or YouTube then you can just
14:50 - delete the description so if we save it
14:52 - now we can see the tab name has changed
14:54 - to match the idation YouTube
14:56 - here okay that's good so so now let's
14:59 - continue following on the cler
15:00 - documentation there's a few more things
15:01 - that we need to do okay so number four
15:06 - is protect our application so now we
15:08 - this protect our application we need to
15:10 - create a new middleware dots so this
15:11 - middleware dots is a special file within
15:14 - nextjs that basically allows code to run
15:17 - before every request so before you
15:18 - navigate to any page or you try to hit
15:20 - any end point right it will run this
15:22 - middleware TS a code simple first right
15:25 - so we can use this middleware TS to
15:27 - basically control a whether these users
15:29 - locked in and if they locked in we want
15:31 - to protect certain pages so what I'm
15:33 - going to come down to do is come down to
15:35 - your Source folder inside the source
15:36 - folder create a middle middleware TS
15:40 - file right and going just copy in the
15:42 - code from the CL documentation in here
15:45 - so basically what it does is import this
15:46 - off middleware from the library and then
15:48 - export a default function here so this
15:51 - basically protects all the routes right
15:53 - it protects all the route so that anyone
15:54 - who's um how say uh are not not loged in
15:58 - they cannot access any routes and they
15:59 - are forced to sign in right so we
16:02 - actually do not want that to happen
16:03 - because we want to basically allow this
16:05 - public routs we want to allow a
16:08 - non-login user to to access this uh SL
16:11 - drop so this SL drop is like the
16:12 - homepage so if you can see the in the
16:14 - deploy application right we can see that
16:16 - this is a SL the homepage right where
16:19 - want all everyone can access therefore
16:21 - we're going to basically add this slash
16:23 - to the public routes array okay so now
16:26 - that we have set up middleware dots let
16:28 - us move on so okay so for this sign up
16:32 - sign sign up Pages I'm going to come
16:34 - down to my source directory come down to
16:36 - app and create a new folder called sign-
16:38 - up then within the sign- up let's create
16:41 - a two angle brackets dot dot do sign- up
16:45 - right then within this folder we can
16:47 - finally create a page.
16:49 - TSX okay so for this page. TSX I'm going
16:52 - to import this uh import this default
16:54 - sign up component so they already
16:55 - pre-art a UI for us so I'm going to save
16:58 - it
16:59 - okay so we have copied in the default
17:01 - sign up component and now let's do the
17:02 - signin page so come down to your app uh
17:05 - app folder again and create a sign sign
17:07 - Das in folder within that do bracket
17:10 - bracket do do do sign Dash in right then
17:13 - under that we can just actually this
17:14 - should be a folder not a file so let's
17:17 - do that so it be a folder called d uh
17:20 - bracket
17:21 - bracket sign Dash in right then inside
17:24 - here we can do a page. TSX and let's
17:27 - create a copy in the default signin
17:29 - component from cl/
17:32 - nextjs okay then now we need to update
17:34 - our environmental variables right let me
17:36 - just zoom in here a little right so we
17:39 - need this environmental variables to
17:40 - basically tell cler which is our sign in
17:42 - and sign up pages so come down to your
17:44 - EnV file again and now under the CL uh
17:47 - secret key let us do let us copy this
17:50 - four variables in right so these four
17:52 - variables basically tell cler which is
17:54 - your sign in and sign up URL so we have
17:56 - ma the signin URL to/ sign up sign in
17:58 - and sign up right following the folder
17:59 - structure here so we leave that as
18:01 - default but here we can also configure
18:03 - uh what happens after we sign in and
18:05 - what happens after we sign up so after
18:07 - we have signed in let's redirect them to
18:09 - the/ dashboard page and after they have
18:11 - signed up we so let us lead them to the/
18:13 - dashboard page so let's save that and
18:16 - now uh if you come back to our Local
18:18 - Host 3000 right so Local Host 3000 right
18:22 - here is our default page but now if you
18:24 - go to slash uh SL sign Das up right we
18:28 - can see that it BR brings us to this
18:31 - custom component here so this maps to
18:33 - the sign up page uh here that we have
18:36 - this a sign up component here okay so
18:39 - that's good so one more thing here I'm
18:40 - just going to Center I'm just going to
18:42 - try to Center this component in the
18:43 - middle of the screen right so I'm going
18:45 - to just return a a diff that just have a
18:49 - class name of position absolute top of
18:53 - half left of half negative translates X
18:56 - of half and negative Translate it
18:59 - Translate Y of half and then let me just
19:03 - return this component so if we do that
19:05 - now we can see that if you remove that
19:08 - semicolon right we can see that the
19:10 - component is centered in the screen
19:11 - right and then we can also sign up and
19:13 - just continue with GitHub so I'm going
19:14 - to do the same with the sign in
19:16 - component so I'm going copy this come
19:18 - back down to my sign in
19:20 - component right and then I'm me just do
19:23 - the same return
19:24 - this okay but this time will be the sign
19:27 - in component so let's say this and now
19:29 - you can see that if you come down to
19:30 - sign in page it's also properly centered
19:32 - in the screen so I'm going to come and
19:33 - sign up and basically come down to
19:35 - continue with my GitHub or Google
19:38 - account okay so then it's going to just
19:40 - redirect me to the GitHub o page and
19:43 - since and now you can see we can see
19:45 - that after we have signed in it brought
19:47 - us to/ dashboard exactly what we asked
19:49 - cler to
19:50 - do okay so now that it has redirect us
19:53 - to the dashboard let us actually not do
19:55 - that first I want to actually finish up
19:57 - my Landing page right so you can see in
19:59 - the deploy application there's this very
20:01 - nice uh big title with this typewriter
20:03 - effect so I'm going to build out this
20:05 - page first for us okay so I'm going to
20:08 - just close down all my tabs here come
20:10 - down to our page. TSX so this is where
20:12 - we rendered this button so I'm going to
20:14 - basically make that into the landing
20:16 - page so the first thing here is I'm
20:18 - going to do is uh I'm going to just uh
20:20 - delete this and want to return a a diff
20:25 - right sorry this will be a diff so this
20:28 - diff let us give you a class name of a b
20:32 - gradient from to right right so it goes
20:35 - to the right and let us give you a mean
20:37 - height of screen from rows 100 to T to
20:44 - T 100 right so this is from like this
20:48 - Dash right so if you save it right now
20:50 - you can see there this nice gradient
20:52 - from this rose color to this K color
20:55 - okay and one more thing I add here is
20:56 - you can see that this a very greeny R
20:58 - slight greeny effect that I really love
21:00 - right so I'm going to try I'm going to
21:02 - show you how to actually add this greeny
21:03 - effect so if you come down to your uh
21:05 - Global s CSS Global CSS right underneath
21:09 - close on this layer base right so these
21:11 - are all basically shed CN and TN CSS
21:14 - configuration right so what want to do
21:16 - is um come down to this create a new
21:18 - class called greeny it's a custom class
21:20 - and we have a background image of of
21:23 - this uh this URL so let me just copy
21:26 - from down here right so don't worry I'll
21:28 - give you the link I'll give you uh a
21:30 - page bin to this background image but
21:32 - basically this background image is just
21:33 - a a green effect right so this
21:36 - background image if you like if you
21:38 - inspect it it's going to be greeny
21:39 - effect so uh we can just use this greeny
21:43 - and in our app so let me just save this
21:45 - come down to our page here right so
21:47 - right now we can see that it's not
21:48 - grainy right so if you add one more
21:50 - class here that says grainy and let's
21:53 - save it now you can see there's this new
21:54 - greeny effect on our app yeah so that's
21:57 - a very simple and nice touch to make the
21:59 - UI a lot nicer okay so within this diff
22:02 - let us have another diff that wraps to
22:04 - make everything centered so let me have
22:08 - a diff here and the class name will be
22:11 - position absolute top of half left of
22:13 - half negative translate X of half and
22:16 - negative Translate Y of half right then
22:19 - this will Center everything here and
22:21 - within it let me just put a H1 that has
22:23 - a class name of uh let's give it font
22:27 - semi B Tex 7 XL to make it huge and
22:31 - let's Center by doing Tex center with h
22:34 - the H1 let's just do AI uh note taking
22:39 - assistant right then if you see that now
22:41 - we can see there this AI note taking
22:43 - assistant in the middle of the screen so
22:45 - let me just put uh this green color in
22:47 - the note taking right so make this note
22:48 - taking green color to do that I'm going
22:50 - to wrap uh this note taking in a span
22:54 - right so I'm going to just take this
22:56 - note taking here and put it in the span
23:00 - okay and within this span let us give
23:02 - you a class name of uh text green 600
23:06 - and font
23:07 - Bol font Bool okay so now we can see
23:11 - this AI take note taking assistant much
23:14 - nicer now okay right we can see that
23:17 - this looks looks nicer and let me just
23:19 - give you some space so in front of this
23:21 - assistant let us put this space block
23:24 - here so that it shows up nicely okay so
23:27 - underneath the H1 uh let's have a spacer
23:30 - so just do mt4 sorry mt-4 so this is
23:35 - just a MTD element with a margin top of
23:37 - four so then we can put our a typewriter
23:40 - title here so for this typewriter title
23:42 - let me just put a H2 here and give a
23:44 - class name of font semi board text
23:48 - 3XL text of Center and text slit of
23:53 - sorry text- slit of 700 and here I just
23:56 - put AI uh forward save it so right now
24:01 - we can see that it's just a normal text
24:02 - right but we want this we want this like
24:04 - a nice type rer effect so let's create a
24:06 - separate component for the typewriter
24:08 - effect come down to your directory come
24:11 - down to your components right right so
24:13 - we can see the component has a UI folder
24:14 - but we don't to create it within the UI
24:16 - folder because whatever in the UI folder
24:18 - is handled by shn we want to create I
24:20 - would think within the component folder
24:22 - itself so inside components let us
24:24 - create a new uh file let's just call it
24:27 - typ writer title.
24:31 - TSX okay then for this type riter title
24:34 - let's actually do tsfc so this tsfc is a
24:39 - is a extension snipper in vs code that
24:41 - give me the typescript react Arrow
24:42 - function exper component right so is
24:45 - under this extension called I think
24:47 - es7 snippers or something yeah uh sniper
24:52 - yeah simple extension Snippets you can
24:54 - install that for yourself so it will
24:56 - give me this uh command right and then
24:59 - with here let's actually make the
25:00 - typewriter effect and we have a library
25:02 - for that right like everything in
25:03 - JavaScript there's always library for
25:05 - whatever things you want so let's
25:08 - install the library for the typew
25:09 - writing effect so do mpm install
25:12 - typewriter D
25:14 - effect okay so once we have installed
25:16 - that let's actually import it to use it
25:18 - so uh import type Rider from type Rider
25:24 - effect okay so then with here I'm just
25:28 - return the type
25:29 - Rider okay let's pass in the op some
25:32 - options right so we want it to Loop to
25:34 - Loop indefinitely forever and then here
25:37 - we can actually uh basically tell it
25:40 - what kind of things to type out so on in
25:42 - it we can just um destructure out this
25:45 - typew
25:46 - riter uh we can actually Dru we can just
25:49 - take the type typew
25:51 - riter right and what you want to do with
25:54 - this typew riter right so we have a lot
25:56 - of different things we can just do
25:58 - typewriter do type string so the first
26:00 - string we want to type is um basically
26:03 - we can just choose a emoji and a tag
26:05 - line so in this case I'm just going to
26:08 - just copy this TCH line in right so you
26:11 - can write whever you want right I'm just
26:13 - going to put this here so the first
26:14 - thing is it's going to type out this
26:16 - supercharge productivity right so I'm
26:18 - going to save it first and then come
26:19 - back to our page. DSX and I'm going to
26:21 - import the typewriter title uh component
26:25 - here so if you save it right now we can
26:27 - see that
26:28 - okay must be either now so one more
26:29 - thing we need to do here is come back to
26:31 - your typewriter title we need to make
26:33 - this into a client component so because
26:36 - this next Yer every component is by
26:38 - default server component right so now we
26:41 - can see that if you refresh it should uh
26:43 - type type it out right but we haven't
26:45 - started it so to actually start typing
26:47 - we have to do do start so if we save it
26:50 - now we can see that you should start
26:52 - typing let us refresh the page and let's
26:55 - see what it does and now we can see it
26:57 - starts typing
26:58 - and then because it we put loop as true
27:00 - it's going to basically loop back delete
27:02 - all the words and just loop back right
27:04 - so let's actually add more stuff let's
27:06 - say we can do so after he has typed let
27:08 - us just pause for maybe uh pause for
27:12 - 1,000 milliseconds which is 1 second so
27:15 - after pausing let us delete all and then
27:17 - we can do the next type so we type
27:19 - string again so then we can type out
27:21 - another thing like let's say uh copy
27:23 - this in type out AI power insight okay
27:28 - so let's save it and yeah that's pretty
27:31 - much it so you can add however more like
27:33 - imperative uh typing you want so we can
27:35 - type then pause and delete then type
27:37 - then basically you just have this right
27:39 - cool typewriter effect where you're just
27:40 - typing out the different tag lines you
27:42 - have for your application yeah so that's
27:46 - pretty much it it's quite simple for the
27:48 - the homepage so let me see if there's
27:50 - anything else that we need for the
27:51 - homepage okay so now let's actually add
27:54 - the button to go to the dashboard so
27:57 - underneath the H2 let's have another
27:59 - spacer called mt-8 so it's another empty
28:02 - diff with the margin top of eight right
28:04 - to give you some a margin here and let
28:06 - us have a diff here uh that has a let me
28:11 - see let us just remove that diff
28:14 - actually so below the spacer right so I
28:17 - messed it up here so let us actually
28:19 - have the link so this link come from
28:21 - next Das link right we want to basically
28:24 - link it to the SL dashboard and inside
28:27 - the link
28:28 - let's show a button so this button will
28:30 - have a class name of BG D green- 600
28:35 - then within it let us just do get
28:40 - started right and then let save it and
28:42 - so now we can see there a new button
28:44 - here okay so let's Center this let's
28:46 - Center this in the middle of the screen
28:49 - right so what I'm going to do here is
28:50 - I'm going to just wrap this in another
28:52 - diff and this div will have a class name
28:54 - of flex and justify Center so this will
28:57 - just Center the button in the middle of
28:58 - the screen and let me just add the icon
29:02 - right you can see there's icon nice icon
29:03 - here so for icons for the icons will'll
29:06 - be using this package called Lucid react
29:08 - mkm install Lucid D react so it's a icon
29:12 - Library if you have not seen before
29:13 - Lucid if you go to Lucid def it just
29:15 - provides us with Rand nice UI uh icons
29:18 - for us to use within our
29:20 - application okay so inside this button
29:24 - like just beside this get started let us
29:25 - have a a call Arrow right so let's
29:29 - import this Arrow right icon from L
29:31 - react so import from Lu D react so what
29:37 - try import the arrow right icon okay so
29:42 - this Arrow right let's give you some
29:43 - styling of margin left of two width of
29:47 - five and height of five and we give a
29:50 - stroke width of short WID of let's
29:53 - say sorry three three so now it looks
29:57 - much nicer here with a button so if you
29:59 - click on this we can see that it will
30:00 - lead us to the dashboard right which we
30:02 - have not created yet so that's good we
30:04 - have created the uh landing page so
30:07 - that's
30:09 - good all right so now that we have
30:12 - completed the homepage let's actually
30:13 - work on the dashboard page so come down
30:16 - to your directory sorry come down to
30:18 - your folder here and come down to your
30:20 - app and let's actually create a new
30:21 - folder called dashboard then within the
30:24 - dashboard let's create the special page.
30:25 - TSX so then this will map to whatever
30:27 - shown here so let's do TS R FC to create
30:31 - the react component and let's just name
30:33 - it to dashboard page so if you save it
30:35 - now we can see the dashboard page
30:37 - showing up here okay so let's actually
30:39 - build out the user interface for the
30:41 - dashboard so I'm going to come down here
30:43 - I'm going to delete this I'm going to
30:44 - return a uh react fragment and within
30:46 - here let us have a a diff that have a
30:49 - class name of grainy so we have the
30:51 - grainy background again just now and a
30:53 - minimum height of screen and if you save
30:56 - it right now you can see the greeny
30:57 - background showing up here all right
31:00 - within the within this diff let's
31:02 - actually have another diff uh sorry diff
31:05 - they have a class name of a Max width of
31:09 - 7 XL and margin X of Auto and also
31:12 - padding of 10 within this second inner
31:15 - diff let's have a basically uh a empty
31:19 - diff with a height of 14 so here just
31:22 - another spacer empty D with a space of
31:24 - uh height of 14 just to space out the
31:26 - element a little right and then let's
31:29 - have another diff in here and this diff
31:31 - is going to what is going to be showing
31:32 - the let me go to the deploy app it's
31:34 - going to show us the this my notes the
31:37 - back button and our user profile here
31:39 - okay so for this diff let's give you a
31:42 - class name of um Flex justify between
31:46 - items items Das center right then when
31:50 - we on the medium screen we want it to be
31:52 - Flex Dash row but on the small screen
31:54 - like mobile we want to be Flex column so
31:56 - we can see that this a responsive
31:58 - element to it so we can see that it's
32:00 - responsive like this okay so come back
32:03 - down to your local host uh let me just
32:06 - move this here
32:08 - okay so within this uh within this Flex
32:12 - uh container let have another diff that
32:14 - have just uh with a class name
32:17 - of class name of flex and items Das
32:21 - Center and within this item Center diff
32:24 - let us have a link right this link come
32:26 - from uh come from next SL link not Lucid
32:29 - D react right come from next SL link
32:32 - let's have a HRA to the slash so this is
32:35 - the back button so let's import the
32:37 - button and let's just do back so let's
32:40 - save it and now we have this back button
32:42 - showing up here okay let's give you some
32:44 - styling uh I'm going to just have a uh
32:47 - within this button let's have a arrow
32:50 - left icon from lucd D react right he has
32:53 - a class name of margin right of one
32:55 - width of four and height of four
32:57 - so now we can see that it just adds
32:59 - arrow to the button and then for the
33:01 - button let us give a class name of BG
33:03 - green of 600 all right to match the
33:05 - theme of our
33:07 - application okay then below this link
33:09 - right below this link let us have a
33:12 - another diff right this has a diff of
33:14 - it's empty diff of with D4 so it's just
33:16 - not spacer element right and then here
33:19 - we have a H1 that says my notes so give
33:22 - let's say give this H1 some class names
33:24 - of text- 3XL font Bo and text- g- 900 so
33:29 - we save it now we have this uh it just
33:31 - put it side by
33:33 - side the H1 let's have another another
33:35 - spacer diff of with das4 so it's not
33:37 - empty diff and let's here let's put a
33:40 - user button so this user button you can
33:42 - see is imported from cl/ nextjs so there
33:44 - is a pre uh pre-built button component
33:46 - for us right that shows us that allows
33:49 - us to see our profile image and manage
33:51 - accounts and even lock us out if you
33:53 - want to here okay so that's pretty much
33:55 - it for like you see this top top bar
33:57 - here right so you can see this on here
34:00 - the button is a little smaller so we can
34:01 - do that here by coming into the button
34:03 - and let's pass a sizing of SM here so we
34:06 - just make the button a little
34:08 - smaller okay that's good so now that we
34:11 - have that let's actually build the
34:12 - spacer and the The Notebook list all
34:15 - right
34:16 - so underneath the underneath the user
34:19 - button we have this diff right and then
34:21 - we come down to this diff again right so
34:25 - basically above the two closing diff we
34:27 - have another spacer uh height d8 spacer
34:30 - and then here we have a uh separator so
34:33 - we this separator comes from Shen so
34:36 - let's add that component so MPX Shen at
34:38 - UI at latest at separator so you just
34:42 - add the component into our project then
34:44 - we can import it import it in here so
34:46 - let's just do after you finished
34:48 - installing let us do separator and now
34:51 - we can see that it imports from ui/
34:54 - separator and then we'll just have
34:55 - another spacer of -8 so right now we can
34:58 - see that there this very F line I'm not
35:00 - sure if you can see on camera but uh
35:02 - there's a F line of the separator and
35:04 - then underne the separator here is where
35:06 - we will uh list all the notes and the
35:09 - images of course so it's all this list
35:11 - all right so here is I'm just going to
35:15 - uh just show here so I'm going to show a
35:18 - diff with a class name of diff with the
35:21 - class name of text Center and inside
35:24 - here inside the diff let's have a H2
35:26 - that says you have no notes yet so this
35:31 - H2 will have a class name of text just
35:33 - Excel text Gray of
35:36 - 500 so if we have no if we have don't
35:39 - have any notes yet we'll show this so
35:41 - later on this will have to be uh
35:44 - conditionally rendered condition
35:48 - conditionally rendered I spell it right
35:52 - conditionally okay whatever yeah so
35:55 - later we'll get the notes and we'll just
35:56 - conditionally render this okay so we
35:59 - have set up the simple dashboard and now
36:00 - I'm going to try to move on to help
36:02 - setting up the database so that we can
36:03 - actually start creating notes and
36:04 - fetching the
36:06 - nodes right so for the database we'll be
36:08 - using a neon DB so and we'll be also
36:11 - using drizzel to interact with this neon
36:13 - database so come down to Neon dotech
36:16 - right this is a domain and you might
36:18 - need to sign up or log in if you have
36:19 - not done so so you have to sign up into
36:21 - the the database so by default it
36:24 - creates gives us a free database to work
36:26 - with right so you can then create a new
36:28 - project for like a free free database so
36:30 - for the name let me just do uh ideation
36:34 - Das ideation D YouTube then just choose
36:38 - default postr version and choose a
36:39 - region that's closest to you in this
36:41 - case I'm closest to Singapore so I'm
36:43 - going to put Singapore and then just
36:44 - leave the rest as default and just
36:46 - create a project so then this will give
36:48 - us a database connection string right
36:50 - then we can copy this in so let me just
36:52 - copy in this URL right then we can
36:54 - actually close down the console actually
36:56 - we don't need that anymore so come down
36:58 - to your EnV file right and we need the
37:00 - database URL so let me just do datab
37:04 - base underscore URL and just paste this
37:06 - in right so make sure there's no white
37:08 - space right right and one more thing you
37:10 - need to add here is at the end right at
37:12 - the end of this string right I want to
37:13 - help add this uh question mark SSL mode
37:17 - equals require so we need this SSL mode
37:20 - equal required because we're going to be
37:22 - connecting to our DZ RM and we need to
37:24 - be secure so we add this here so make
37:26 - sure you have that added in then now we
37:28 - can actually start making the drizzle
37:29 - orm uh to actually interact with this
37:32 - database so drizzle orm so if you're not
37:35 - sure this is just a object relational
37:36 - mapper which allows us to interact with
37:38 - our SQL databases to very nice
37:40 - typescript objects okay so how what we
37:44 - do is first come down and just actually
37:46 - close this close this tab I'll show you
37:47 - I walk you show how to actually install
37:49 - result so come down here and just do mkm
37:52 - install drizzle dorm right drizzle dorm
37:57 - come down to your folder okay and we'll
37:58 - create a new Under lip right so lip is
38:01 - for Library so basically any any files
38:03 - that is like any utility files any
38:06 - folders that we need to prepare to use
38:07 - beforee put in the lip so create a new
38:10 - folder under called DB so it's going
38:12 - going to store our database so inside
38:14 - here we have two files one is called
38:15 - index.ts and one is called schema. TS so
38:19 - this index.ts is going to contain the
38:22 - drizzle configuration so initialize our
38:24 - drizzle U drizzle object and the schema.
38:27 - TS is where we Define our database
38:28 - schema like all the tables and the
38:30 - columns so come down to your index.ts
38:33 - for the table and DB and let us actually
38:35 - do it start configuration so one more
38:39 - thing you to install is mpm install at
38:41 - neon database SL serverless right so
38:46 - sorry ignore the rest we just need this
38:49 - at neon database serverless because we
38:51 - need basically this is a how say is is
38:54 - to help us connect the neon database to
38:56 - our result orm so after installing that
38:59 - let's import a few things so the first
39:00 - thing we import from the at neon
39:02 - database serverless is we import the
39:05 - neon object itself and also the neon
39:08 - config okay and the other thing is we
39:10 - need to install import drizzle right
39:12 - actual drizzle so we import from drizzle
39:15 - RM import from drizzle rm/ neon d
39:20 - HTTP okay so let's import the dzo object
39:24 - here so then now we can do neon config
39:28 - do fetch connection cache sorry fetch
39:30 - connection cache equals to true so
39:32 - basically we just want to cach all the
39:34 - connection so that it doesn't like
39:35 - repeat uh creating new con connection
39:37 - every time we reload the page okay so
39:40 - then we're going to check if not
39:42 - process. env. database URL right we got
39:46 - then throw a new throw a new error
39:51 - saying that database URL is not defined
39:53 - so we need this EnV variable that we
39:55 - have defined in here so if there isn't
39:57 - this variable it's going to True an
39:58 - error all right so then lastly we can
40:01 - just do cons SQL equals to Neon invoke
40:04 - the neon function and we can invoke it
40:06 - on the process. env. database URL okay
40:09 - then lastly we can just export a DB
40:11 - object which is the drizzle right then
40:14 - we just passing the SQL uh SQL object
40:16 - into the drizzle function here so this
40:18 - DB is how we got interact with the thing
40:20 - so we can do things like uh db. select
40:24 - from from
40:27 - where something like that so this is how
40:29 - we build the SQL connection strings to
40:30 - get back results from our database so
40:33 - now that we have this let's actually
40:34 - Define the schema so what kind of tables
40:36 - will we really need it's a really
40:38 - actually really simple project we only
40:39 - need in this schema. TS we only need to
40:42 - Define one table okay so before that
40:45 - let's import some utility functions to
40:47 - help us Define the table so be importing
40:50 - from drizzo
40:52 - or/ PG dcore so PG is for postgress
40:55 - postgress core core and we import a few
40:57 - things like PG table so we need this PG
40:59 - table to Define our table so let me just
41:02 - do export cons uh dollar sign
41:05 - notes okay equals to PG table and then
41:09 - basically we giving a name of notes so
41:11 - this notes uh name is going to be what
41:13 - save between within the post database
41:15 - this the table name right and then we'll
41:17 - pass in the configuration object so this
41:19 - is where we actually pass in all the
41:21 - columns so first we have ID column it's
41:23 - going to be a Serial right so we this
41:25 - serial we imported from PG core right
41:28 - can see it's Auto imported so with zero
41:30 - and basically the inside the name right
41:32 - this is basically the name the column
41:34 - name within the database right it's
41:36 - going to make it into a primary key so
41:39 - then we also have a name field which is
41:40 - a text field also from PG dcore uh PG PG
41:44 - core and will give you a internal table
41:47 - name of name I'll make sure that this is
41:49 - not
41:51 - now lastly we have a created uh not
41:53 - lastly but one more thing is created at
41:55 - so we have a typ time stamp right will
41:57 - be time stamp so import this from PG
41:59 - core Also let's just name it to the same
42:01 - thing created at do not now so make sure
42:04 - it's not now and by default we want to
42:06 - basically default it to now yeah that's
42:09 - pretty much it so whenever the a new
42:11 - road gets created this created at fuel
42:14 - will default to this uh to the current
42:16 - time span time
42:17 - stamp then lastly not lastly again sorry
42:20 - so image URL so this is where we store
42:23 - the open the D image right the Firebase
42:25 - image so this will be a text that just
42:27 - maps to image
42:29 - URL yeah and then for this we have a
42:32 - user ID course we want to know which
42:34 - user created the note right so this is a
42:35 - one to many relationship so let's do
42:38 - text is a user ID and make sure this not
42:41 - now so this user ID will come from the
42:43 - cler user ID and then lastly we have the
42:46 - editor state which is just a text of
42:49 - editor
42:50 - State yeah that's pretty much it so this
42:53 - editor state is basically what I start
42:54 - like whenever we create a new note right
42:56 - we we save the state of the whatever
42:58 - state of the content here of what we
43:00 - have written yeah so like let's say we
43:02 - come into our cat right so everything
43:05 - here is saved into the database into
43:06 - this table called editor State yeah so
43:10 - now that we have defined this schema
43:12 - right let's actually one just last line
43:14 - let's just export a type called notes
43:16 - type so we might need the types script
43:18 - type for this PG table right so we can
43:20 - just do it by doing type of uh dollar
43:23 - sign notes so these dollar sign notes
43:25 - come from this PG table and we just do
43:27 - infer select so if we do that if you
43:29 - hover over this note type now we can see
43:30 - the types script type so we can inspect
43:32 - the name user ID and all the ID so this
43:34 - is very useful later on when we are
43:36 - actually doing the uh UI and the
43:38 - typescript
43:39 - definitions so let's save that so now
43:41 - that we have defined the schema how do
43:42 - we actually make sure that the schema is
43:44 - synced with the database in the neon DB
43:46 - Cloud so for that there's one more tool
43:48 - called uh mpm install uh drizzle Das kit
43:53 - so let me just uh tell you the
43:54 - difference what's the difference between
43:55 - drizzle RM and drizzo dkit so uh drizzo
43:59 - orm is what we use to interact with the
44:02 - with to the database right basically
44:04 - like within our app we can
44:06 - programmatically in use the drizz RM to
44:08 - interact and fetch data but drizzle uh
44:11 - drizzle kit is not uh it's not necessary
44:13 - but it's a developer tool to basically
44:15 - help you migrate your changes let's say
44:17 - you added a new table or you add a new
44:19 - column you have to make sure that the
44:20 - column is synced up with the neon
44:22 - database then you can use DZ kit to
44:24 - actually inspect like uh push your
44:26 - migrations up to the database and also
44:28 - it gives you a studio like a web Studio
44:30 - to view all your database and all your
44:32 - rades okay so now that we have installed
44:35 - DRZ kit let's actually uh create a
44:37 - configuration object to actually make
44:39 - sure that uh we know where this
44:41 - configuration file lives in so come down
44:43 - to your uh to your file directory again
44:47 - okay and we have to create a in the root
44:49 - file like in the root folder everything
44:50 - outside of the source create a new uh f
44:53 - file called drizzle. config dots so it
44:57 - has to be drizzle.
45:00 - config.yml
45:09 - the type of config
45:13 - from drizzo dkit so this config object
45:16 - will tell us like what kind of
45:17 - configuration is
45:19 - needed and now let's actually uh do
45:22 - export
45:24 - default right and this object is going
45:26 - to satisfy the config object so now we
45:29 - can get some very nice like type
45:32 - annotation right right here we can do
45:35 - control space and we can see all the all
45:37 - the different things we need for this uh
45:38 - configuration object so for the driver
45:41 - right we can see we we using postgress
45:43 - and then for the schema right this
45:45 - schema is basically telling where where
45:47 - does the schema F livt in so right now
45:49 - we can see that it lives in uh relative
45:52 - to this file it lives in Source slash
45:55 - Source SL lip ddb schema. TS so let us
46:00 - do that so we'll do/ Source
46:04 - /p/ DB schema. TS okay and then lastly
46:09 - for the DB credentials we pass in the
46:11 - connection string to be the process.
46:13 - env. database URL right and make sure
46:16 - that this exists so one issue you're
46:19 - going to face is that this is not going
46:20 - to exist right why because next y thing
46:23 - right it automat loads in your EnV but
46:25 - it only loads the EnV file for any file
46:27 - that's accessing it within the source
46:29 - directory so any folder that's trying to
46:31 - access the EnV outside of the source
46:33 - directory next just does not handle that
46:35 - so this D.C
46:55 - config object and we can pass in the
46:58 - path equals to do EnV so it's just
47:01 - basically telling this file where the
47:03 - the the EnV file lives in so that it's
47:06 - able to Lo load in this database URL for
47:08 - this uh variable to make sense okay so
47:11 - now that we have that last thing we need
47:13 - to do is come down to your TS config.js
47:15 - and we have to change the target to es6
47:18 - so just some weird issue within dzo but
47:21 - you just have to change it to es6 for
47:22 - this to work so now that you have done
47:24 - that everything is going to work
47:26 - perfectly so now you can come back to
47:28 - your terminal and push your your schema
47:30 - up to the
47:31 - database so to do that we do MX drizzle
47:34 - dkit push PG so colon PG so if you enter
47:39 - this it's going to rein the schema right
47:41 - so it's going to see that it's going to
47:42 - rein the configuration file this drizo
47:44 - config.txt
47:56 - a studio right so if you run this
47:59 - there's going to be one error it's going
48:00 - to say that actually one we need to
48:01 - install one more module which is the PG
48:04 - package right so to actually interact
48:05 - with the database so we do mpm install
48:08 - PG postgress so after installing that we
48:11 - can actually run the MPX studio right d
48:13 - kit studio and now we can see that is it
48:15 - will show us all our different tables so
48:18 - let me just pull this up sorry let me
48:21 - just pull this up
48:24 - here okay so now we can see that we have
48:27 - this notes object notes table so we able
48:29 - to inspect all our different tables and
48:31 - right now we can see this notes is ID
48:33 - name created at image URL user ID and
48:36 - this all maps correctly to the uh schema
48:39 - schema that we have defined here so now
48:41 - we have ensure that the database is set
48:43 - up and we have pushed our schema up to
48:44 - the neon database so that's perfect
48:47 - you're doing
48:48 - well okay so the next step after setting
48:51 - up the database is I'm going to
48:54 - basically create this uh
48:56 - this basically uh this notes to
48:58 - basically allow you to add create add a
49:00 - new notes so the UI to add a new note so
49:03 - I'm going to show you how to make this a
49:05 - uh this new notebook so when you click
49:07 - on it there's a a dialogue a popup that
49:10 - allows you to enter the name and you can
49:12 - press create to actually do the back end
49:14 - call so for now let us just go back to
49:16 - our dashboard page dashboard page and
49:20 - then let us actually do put the
49:22 - dashboard the add component here okay so
49:26 - let me just see how to actually start
49:28 - all right so here just below the below
49:31 - the diff right for the you see this
49:34 - conditionally rendered you have no notes
49:35 - just below here this is where we display
49:38 - all the notes okay so here I'm going to
49:40 - create a new diff a new diff sorry a new
49:45 - diff they have a class name of so it's
49:47 - going to be a display grid so it's going
49:49 - to have a grid layout so we have let's
49:51 - do grid then when it's small screen
49:54 - above we do grid calls D3 then when it's
49:57 - medium we'll do gr- call-
50:00 - five then when it's just on a small
50:02 - screen like on the mobile screen we just
50:04 - do g c of one and lastly we have gap of
50:07 - three and then within here is where we
50:09 - display all the notes but before all the
50:11 - notes right we actually can add a create
50:14 - a note
50:16 - dialog dialog so this is actually what
50:19 - isown here like this you see this borded
50:21 - new notebook button here where you can
50:23 - click to add this to have this popup so
50:25 - let's create that component so come down
50:27 - to your folder under components that us
50:29 - to create sorry not under UI make sure
50:32 - it's under components okay so let's do
50:36 - create note dialogue dialog.
50:41 - TSX do TSR fce okay so for the create
50:47 - note dialogue let's actually make it
50:48 - into a cent component use client all
50:52 - right and then and then and then let
50:54 - actually let Let's do let's see okay so
50:58 - to actually make the dialogue we'll be
50:59 - using the shn dialogue so uh to do that
51:02 - let's do MP MPX Shen install sorry npx
51:07 - shnu latest at dialog so this dialogue
51:11 - is like the popup thing when you click
51:13 - on the button okay so while it's
51:15 - installing the dialogue let's actually
51:17 - do the styling so we won't be returning
51:19 - the div but be returning a dialogue so
51:22 - we import the dialog from ui/ dialog and
51:25 - then within this we have a dialog
51:27 - trigger trigger so this dialog trigger
51:31 - is what basically what triggers the
51:32 - popup right so let us have a div here
51:35 - sorry div let's have class name of
51:38 - Border Dash dashed border dashed a
51:42 - border two border green 600 height of
51:47 - full rounded of
51:49 - large okay and then we'll have items
51:53 - Center just def F Center and on the
51:58 - small screen we'll have make it Flex uh
52:01 - column right then when it's hover will
52:04 - give you a shadow of Xcel and then
52:07 - transition sorry
52:09 - transition then on Hover we have a
52:11 - negative
52:13 - translat y of one and then Flex row and
52:18 - padding of four so it's a very long
52:20 - class name it's very long class name but
52:22 - let's just do the stying now I'll show
52:24 - you how it looks like and explain more
52:25 - to you within the diff here let's have a
52:29 - a hit to that says new
52:32 - notesbook let's give you a style name
52:34 - class name of font semi bolt uh Tex
52:38 - green
52:39 - 600 there 600 and when it's small give
52:43 - you a margin top of two and then above
52:45 - here let's have a plus icon a plus icon
52:48 - right with the class name of width six
52:52 - height six Tex green of 600 and and give
52:55 - a stroke width of three so if you save
52:59 - it and then let's actually import it so
53:01 - come back to your dashboard page so me
53:03 - close it all
53:05 - out uh dashboard let's actually import
53:07 - this create note dialogue import and
53:10 - let's save it and then now we can see
53:11 - that this uh there this thing that's
53:13 - showing up here so I think that's a
53:15 - mistake in my styling right so here uh
53:18 - items D Center justify the
53:22 - center okay Flex call
53:27 - right and the reason why is
53:31 - because yeah I forget to add a flex so
53:33 - let me just add a flex
53:35 - here okay yeah so you need add a flex so
53:38 - it's just border Das tool and just
53:40 - basically give you the border and just
53:41 - align the two uh elements within inside
53:44 - so when it's small screen you can see
53:45 - that is uh when it's big screen stack on
53:47 - top when it's a small screen it's stack
53:49 - like
53:50 - horizontally okay that's perfect okay so
53:52 - then when we click on this right there
53:54 - that's supposed supposed to be the popup
53:56 - right so this is the dialog trigger is
53:58 - what triggers the popup so let's
53:59 - actually make the popup so we have the
54:02 - dialog uh content so this dialog Conta
54:05 - come comes from the/ UI dialogue and
54:09 - then inside the dialog contenter have a
54:12 - dialog
54:12 - header right this dialog header uh
54:15 - should have let's put in you can create
54:19 - a new note by clicking the button below
54:25 - so if we save that and we click on it
54:26 - now we can see that there's this
54:28 - dialogue that's popping up right now so
54:30 - looks very nice okay so let's actually
54:32 - continue so underneath the dialog header
54:35 - so wait so within the dialog header this
54:37 - should actually be wrapped in the dialog
54:40 - title okay here so the create new note
54:43 - should be inside the dialog title and
54:45 - then within it the below the dialog
54:47 - title we have a dialog um description
54:51 - okay this dialog description will have
54:53 - uh we can put like uh you can create a
54:55 - new note so this should be down here and
54:57 - the dialog title should have a new
54:58 - notesbook so let me show you how it
55:00 - looks like so that it makes more sense
55:02 - yeah so here new notebook is the title
55:03 - and then the description is the create
55:05 - notebook by clicking the button below
55:07 - okay so that's good and then underneath
55:10 - the dialogue heer right so this is where
55:12 - we put our input FS like here we can see
55:14 - that this is input F
55:17 - sorry we can see this input
55:20 - F so you can see there's this input Feld
55:23 - the for the name and the the buttons to
55:25 - create or cancel okay so under the
55:28 - dialogue header we have a normal form
55:30 - element okay inside the form element let
55:33 - us uh uh let us just put
55:36 - a um a spacer with a height of four and
55:40 - then for this form let give you some
55:41 - class names of uh sorry not the form the
55:44 - form doesn't need any So Below uh above
55:47 - the spacer right below the form right we
55:50 - have input fi so this input comes from
55:52 - shat again so let's do MPX shn at UI
55:56 - latest at input so this is the input
55:58 - Field St by shn so let's wait for that
56:01 - to install and then we can imported
56:03 - input from the/ uiinput and let us
56:07 - actually give it a placeholder of name
56:10 - dot do dot so we save it right now we
56:12 - can see there's a form that has a name f
56:14 - here okay that's
56:16 - nice then underneath the spacer right
56:19 - underneath the spacer let's actually put
56:20 - the two buttons right so have a flex.
56:23 - item Center so this where we got put the
56:25 - two buttons so the first button right
56:28 - sorry this first button will come from
56:31 - the this first button will say cancel
56:34 - and then the second button will
56:37 - say uh submit uh create here and for the
56:42 - first button here we have a type of
56:45 - reset and a variance of secondary okay
56:49 - and then yeah and then for the create
56:52 - button right we'll just have a
56:55 - just put a just save it first so right
56:57 - now we can see this is create and cancel
56:59 - here let's give this button down here
57:01 - styling of VG green
57:03 - 600 all right so it looks more on brand
57:06 - and for this uh items Center so just
57:09 - between let's give it a gap of two so
57:11 - that it's space out a little more okay
57:14 - that's perfect that's perfect so
57:16 - basically what we want to to happen is
57:17 - whenever we uh let's add type of submit
57:20 - so whenever we submit we want to
57:21 - actually create a back end right so
57:23 - let's actually create the state to
57:24 - actually hold the input element here so
57:27 - we have already made this a use CL so
57:28 - then now we can do a create a new state
57:31 - called input and set input to be a
57:35 - react. new state okay so then we going
57:39 - bind it into the input field so let's
57:41 - have a value of input and on change let
57:45 - us do e we'll do sets input e. target.
57:51 - value so we have we make it a control
57:54 - component so that right now we can just
57:55 - uh enter and then it just uh it will be
57:57 - bounded to this input variable here
58:00 - input state that we can access all right
58:02 - so uh I think that's it for now for the
58:05 - front end so now I'm going to try to
58:06 - show you how to create the back end uh
58:08 - to actually create a new note whenever
58:09 - we click on this create
58:12 - button all right so let's actually
58:14 - create the back end uh end point to
58:16 - actually generate the images and the uh
58:18 - the basically the thumbnail for the
58:19 - image when we submit this name to the
58:21 - new notebook so I'm going to clear out
58:23 - all my tabs and then actually create
58:25 - come down to app create a new folder
58:27 - called API and then create a new folder
58:30 - within it again let's call it um let's
58:33 - see what do we want to call it let's
58:34 - just create create
58:38 - notebook right and then within it we can
58:40 - create a ro. TS so this root. TS is a
58:43 - special file right so this root. TS it
58:45 - will look at the F folder structure and
58:47 - map to a rest end point so we can
58:49 - basically this this file will map to/
58:52 - API SLC creat notes book right so this
58:55 - is the end point that this file
58:57 - represents so then we can export a async
59:00 - function called post right and then this
59:03 - post will will have uh a request a
59:06 - standard web API request object where we
59:09 - can actually get the request body all
59:11 - right so I'm basically I'm going to do
59:13 - is I'm going to just take the uh cons
59:15 - body uh cons body so the request body is
59:18 - going to be await request. Json all
59:21 - right so this will convert the request
59:23 - into Json and we can access the request
59:24 - body from there okay so then we'll get
59:27 - out a name from the body name equals to
59:30 - body right so later on we'll be passing
59:32 - this new notebook name into this
59:34 - endpoint here so we get back the name so
59:36 - before that let me actually check
59:38 - whether the user is authenticated
59:39 - because if the user is not authenticated
59:41 - we don't want them to be creating a new
59:42 - notebook so let's just get get back the
59:44 - cons equals to off so this off comes
59:48 - from click slj is a server side function
59:51 - that will return us with the uh user ID
59:53 - here okay okay then we'll check if not
59:56 - user ID right that means they're not
59:58 - authenticated some we will just return a
59:59 - new next response right sorry new next
60:04 - response that says
60:06 - unauthorized pass in a status of 401
60:10 - okay so now let's actually create the
60:14 - image the D image right so before that
60:16 - let's actually create a new a new
60:18 - library so come down to your Source SL
60:21 - lip within the lip let's create a new
60:23 - file called open ai. TS so this is going
60:26 - to hold two functions mainly so the
60:29 - first function is going to be the first
60:31 - function is going to be a a a sync it's
60:35 - going to be basically get image uh
60:37 - generate image prompt okay so and the
60:41 - second function is going to be obviously
60:43 - export async uh this second uh Endo is
60:47 - going to be for the actual image
60:49 - Generation by the DI API generate image
60:54 - Okay so so let me just commment this out
60:55 - first uh sorry this will be asyn
60:59 - function and this will be also an asyn
61:02 - function okay so for this generate image
61:05 - prompt it's going to take in the the
61:07 - name the prompt which is a string it's
61:10 - going to basically take a name like
61:11 - let's say we put in a name like a math
61:13 - right so we run a new math notebook what
61:16 - it's going to do this function is going
61:17 - to be uh responsible for using the open
61:19 - AI API to generate a very descriptive
61:21 - text for the math notebook so it will
61:24 - generate like
61:25 - uh oh a a thumbnail a thumbnail that uh
61:29 - has a bunch of color
61:33 - colorful numbers and
61:36 - circles things like that basically it
61:38 - gives a very nice uh very detailed
61:40 - description and basically take this
61:42 - description this uh this prompt this
61:44 - description and will then feed it into
61:46 - this general image because for the dly
61:48 - API the more specific and the more
61:50 - detailed your description the better the
61:52 - image result is going to get back so
61:53 - therefore we need this image prompt
61:55 - function to actually generate a very
61:56 - detailed description from a simple name
61:59 - all right so to do that let's actually
62:01 - uh configure the open open AI so come
62:03 - down to your terminal and let's install
62:04 - the open AI package so open ai- so this
62:08 - open a-h is a special uh version of open
62:12 - that allows you to run on the versal H
62:14 - end point uh versal H run time to make
62:16 - it faster and there U allows your
62:18 - function to run for longer okay so yeah
62:21 - so then let's close out the terminal and
62:23 - let's uh
62:25 - initialized open API so we need a few
62:27 - things import two things from open a-h
62:31 - so we need uh the first thing is
62:33 - configuration and the second thing is
62:35 - the open AI
62:36 - Epi okay so for the first thing we'll do
62:39 - is Con config will configur uh
62:41 - configurate to be new
62:43 - configuration new configuration and we
62:46 - pass in the open AI API key so how do we
62:49 - get the open EI API key so come down to
62:51 - your browser and just search for open EI
62:54 - API
62:55 - key okay come down to the first link
62:58 - here and then just come down to menu and
63:01 - then your API so first you need to
63:03 - obviously register for the open a
63:05 - account yeah so come down to I think
63:08 - overview and let's actually get started
63:10 - for developers and sign up if you have
63:13 - not already and or sign in if you have
63:15 - an account okay so after you have uh
63:18 - sign in to the dashboard I want you to
63:20 - come down to your personal like this uh
63:22 - that manual dashboard and then come to
63:23 - view API
63:25 - and then here you can then create a new
63:27 - secret key and you can name it adiation
63:29 - D YouTube so create the secret key right
63:32 - then it will create a secret API key for
63:34 - you and copy the key so after you've
63:36 - copied the key you can just close it out
63:37 - we don't need this anymore so come back
63:39 - here come down to your EnV and let us
63:42 - call open eore API key and let us just
63:47 - place the in so there's a secret key so
63:50 - let's save it and then now come here and
63:52 - passing the API key to be process. env.
63:54 - open EI open ei- ai- key so make sure
63:59 - this matches whatever you have here
64:00 - spell it correctly so this one spell it
64:03 - correctly okay so then after this we can
64:06 - actually initialize the cons open AI
64:08 - equal to new open AI API passing in the
64:12 - configuration object so now this open AI
64:14 - we can call different functions on it
64:15 - like let's say create check completion
64:18 - or we can create image here so this
64:21 - create image is what is going to be used
64:23 - for the D image gener
64:25 - okay so then come down here for the
64:28 - generate image prompt for the generate
64:31 - image prompt so we take in the name
64:33 - right so rename it to name so this name
64:34 - is The Notebook name right so let's
64:36 - actually create the uh description so
64:38 - put in the TR catch block and then
64:40 - basically what we're going to do is we
64:42 - do cons response equals to await open EI
64:47 - do create chat compl completion we're
64:50 - passing the model to be a GPT -3.5
64:55 - dturbo
64:56 - and then for the messages we have an
64:59 - array so the first message will be a
65:01 - system message basically from the AI to
65:04 - tell you what what is meaning to do what
65:06 - it's supposed to do right so we tell you
65:08 - that uh you are a
65:11 - creative and helpful AI
65:15 - assistant assistant capable capable of
65:19 - generating interesting thumbnail
65:23 - descriptions for my
65:26 - notes okay then we tell it that your
65:29 - output will be fed into the
65:33 - D
65:35 - API to generate a thumb
65:40 - nail okay then we just tell I want uh
65:45 - the
65:46 - description should be
65:49 - minimalistic and flat stop so you can
65:52 - just basically prompt the different like
65:54 - and prompt the AI to give whatever you
65:56 - want so we're just telling it that it's
65:58 - able to uh output a description of a
66:00 - interesting thumbnail and then for the
66:02 - second message here is where we actually
66:04 - pass in the promt so we have a row of
66:06 - user and then for the content we can
66:08 - just say that uh please generate a
66:13 - thumbnail description for my Note book
66:17 - titled and Fe the name so this names
66:21 - come from this parameter which come from
66:23 - this uh frontend U that will pass back
66:24 - to the back end later okay then once we
66:28 - got this response we can just do uh let
66:31 - us do uh cons data equ goes to await
66:34 - response. Json so convert the response
66:37 - to Json then we do cons image
66:40 - description equals to data do choices
66:43 - sorry do choices index zero. message.
66:47 - content all right then last you can just
66:50 - return the image description as a string
66:53 - so to tell type script that this
66:54 - function returns a string and if there
66:57 - are any errors let's just do console do
66:59 - uh log error and just return the error
67:01 - so let's save that okay so actually
67:04 - instead of return let's actually just
67:05 - throw the error okay that's cool so
67:09 - that's good so now we got the image
67:11 - description so let's actually try this
67:12 - out so I'm going to come back to my
67:14 - root. ts and we can actually test out
67:16 - the image description function that we
67:18 - just written so let's do cons image
67:21 - description equals to await General
67:24 - image promt pass in passing in the name
67:26 - from the body and for now let's do
67:29 - console. loock image
67:31 - description okay and then we just return
67:33 - a new next
67:35 - response response that sorry response
67:39 - that says
67:40 - Okay okay so I'm going to conso the log
67:43 - and we're going to try to link it up to
67:45 - the front end right now okay so for the
67:47 - front end to actually hit the back end
67:49 - and point I'll be using a library called
67:51 - react query so it's just a a library to
67:54 - manage a client and server State and
67:56 - actually mutations to the server that
67:57 - mean like hitting the end points or like
67:59 - quaring something from the backend API
68:01 - so to install that we'll just do npm
68:03 - install at 10 stack right/ react D query
68:07 - right so this react query will help us
68:09 - just manage the state within our
68:11 - application right to hit the end points
68:13 - to actually mutate mutate and get back
68:15 - the results so to actually use that
68:18 - let's come down to our directory come
68:19 - down to our components and let's
68:22 - actually create a new component called
68:24 - providers provider. TSX so let's just to
68:28 - TSR FC this is going to be a client
68:33 - component all right so we have this
68:35 - client providers component it's going to
68:37 - WP our entire application so we're going
68:39 - to import a few things so we'll import
68:42 - uh from at 10stack react query so we'll
68:46 - import two
68:47 - things the query client and so the query
68:51 - client provider so the first step here
68:54 - is in the props we receive the children
68:56 - that means it's the application that we
68:57 - are wrapping around it will be a react
68:59 - Noe so let's destructure the children
69:01 - from the props and let's actually just
69:03 - rep the uh query client
69:06 - provider uh we'll rep the query client
69:11 - provider here and then we'll just put
69:13 - the children here children okay so this
69:17 - qu client provider requires one thing
69:18 - requires this client so how do we get
69:20 - this client we get it by just doing cons
69:22 - quy clients equal
69:24 - to it goes to New query
69:28 - client like this and just have to pass
69:30 - in the query client
69:32 - here yeah quy client okay yep that's
69:37 - pretty much it uh let me just spell this
69:40 - correctly query client
69:43 - oops query Cent okay come on okay so let
69:47 - me just copy this here all right so
69:50 - basically we just wrap the entire
69:51 - application in this children so the the
69:53 - reason why we need this provider is
69:55 - because let's let's imagine right you
69:57 - have one page that is fetching a list of
69:58 - notes so you fetch all the notes from
70:00 - this one page and you display on the
70:02 - front end here but let's say you
70:03 - navigate to another page and you are
70:04 - fetching the same end point you're
70:06 - hitting the same end point and getting
70:07 - back the same notes right instead of
70:09 - basically uh doing the same request
70:11 - twice and hitting the end point twice
70:13 - react query will notice that hey I
70:15 - actually just fet this query about like
70:17 - 5 seconds ago right I I can just save
70:19 - the request by just reusing the same
70:22 - result from the first uh query so
70:24 - basically it will just store this uh
70:26 - result in a cache and then it will just
70:28 - use this cach instead of hitting the end
70:30 - point again so that's why we need this
70:31 - query Clan provider such that every
70:33 - component within our react Tre is able
70:35 - to have access to this cach so I hope
70:37 - you understand uh this concept in react
70:40 - query okay and then we can just come
70:42 - down to our layout. TSX that wraps our
70:44 - entire file and we can just uh wrap our
70:48 - let's wrap our body right with the
70:50 - provider
70:52 - provider Provider from our components
70:55 - wrap this body and let's save it then
70:57 - now we can use the react
70:58 - query so let's actually hit the Endo
71:01 - right so come back to our uh create
71:04 - notes dialogue here so basically let us
71:07 - do a let us have a cons handle submit
71:12 - here so this handle submit uh is going
71:15 - to have a a type of uh it's going to
71:20 - have a type of e this e will be a uh
71:24 - react. form event right it's going to be
71:26 - HTML form event so it's going to give us
71:28 - a type annotation uh for what this event
71:31 - is so the first thing here we going to
71:34 - do is we'll just do e. prevent default
71:36 - so we don't want to submit the actual
71:37 - form right so then we're going to come
71:39 - down here to this form component here
71:41 - and just do onsubmit so we're just
71:44 - passing the handle submit function here
71:47 - okay that's pretty pretty cool and then
71:50 - let's actually continue coding out so
71:52 - what we want to actually had hit the end
71:54 - point to actually create this remember
71:56 - this create notebook endpoint so let's
71:57 - create a mutation for that so cons uh
72:00 - create
72:02 - notesbook uh equals
72:04 - to uh use mutation so this use mutation
72:08 - a mutation is basically like a a
72:10 - function that hits an end point okay so
72:12 - this mutation will take in a mutation
72:14 - function which is going to be Asing
72:16 - function uh and we need one more package
72:19 - to actually hit the end point we'll just
72:20 - mpm install AOS so AOS is uh just a HTTP
72:24 - client to actually help us hit the end
72:25 - point at the back end so we'll just do
72:28 - uh cons response cons response equals to
72:33 - await exos poost sorry exos so when you
72:37 - import
72:38 - exos uh let's import exos from
72:42 - ex so ex. post so we'll be hitting the
72:46 - end point right so be SL API SL
72:49 - create uh sorry
72:51 - slash API slash
72:54 - create notebook so make sure that this
72:57 - matches whatever you have here right
72:59 - create notebook right so is uh mapping
73:02 - to the file this create notebook file
73:04 - folder I mean okay and then we'll just
73:07 - return response do data okay so remember
73:12 - we also need this like uh remember when
73:14 - we hit this end point we are expecting a
73:16 - name in the body request body so you
73:18 - have to pass in this name into the
73:20 - request body so this name will just be
73:22 - the input field
73:24 - so this input is basically what we pass
73:26 - in we write in this text box here so now
73:29 - we got this create notebook function
73:30 - this mutation we can actually call it so
73:32 - before we call it let's actually check
73:34 - if input equals to uh empty string let
73:37 - us just do uh window. alert say please
73:42 - enter a name for your notes for your
73:46 - notesbook and then we just
73:49 - return okay so if the input is not now
73:52 - then I actually do create note. mutate
73:54 - so create this create note uh book
73:56 - function has a mutate uh function on it
73:59 - where we can just pass in the variables
74:01 - so in this case we don't have any
74:02 - variables that need to pass in here so
74:04 - pass in undefined but then the second
74:06 - variable is an object that will give us
74:08 - some callbacks so on success so if it
74:11 - succeeds we're going to just do
74:13 - console.log yay uh notes
74:16 - created then if it fails on error we'll
74:20 - just uh just do console do error error
74:24 - so we just log out the error so let's
74:26 - save it first and let's actually try it
74:28 - out right now so I'm going to do here is
74:31 - basically when I just when I by write
74:33 - when I enter something like a cat and
74:36 - press create it's going to call this
74:37 - handle submit function it's going to B
74:40 - then going to call this mutate function
74:41 - this mutate is whatever is here this
74:43 - mutation function so it's going to hit
74:45 - this endpoint create notebook it's going
74:47 - to pass in the input as a name it can
74:49 - return response or data and remember if
74:51 - you remember just now we are just trying
74:52 - to lock the image description to make
74:54 - sure the open AI is working so let me
74:57 - just open up the terminal here so that
74:58 - we can see the image description being
75:00 - locked out if everything works correctly
75:02 - so I'm going to just press create and
75:04 - then we can see that it's compiling the
75:06 - create notebook route and then if
75:08 - everything works perfectly okay perfect
75:10 - see now we can see that this image
75:12 - description so this is the response from
75:14 - open AI is it will say that oh
75:17 - minimalistic and flx flat start
75:19 - thumbnail description playful feline
75:21 - with cous eyes right
75:23 - uh yeah so we can see this description
75:25 - is what we this image description we can
75:27 - fit this description into the D API
75:31 - right so let's create continue creating
75:33 - the backend all right so come back to
75:35 - your open a
75:37 - file right so now that we have this
75:39 - let's actually make the generate image
75:40 - so this image will have the obviously
75:42 - the prompt right so this promt comes
75:45 - from this uh the function up here this
75:46 - image description so we have image
75:50 - description which is a string and let
75:53 - actually call the open a function so
75:54 - we'll do a TR catch block so we'll do
75:57 - cons response equals to await open a DOT
76:02 - uh uh create image passing in the prompt
76:07 - is the prompt being the image
76:08 - description we passing Nal one so how
76:11 - many image you want to generate we want
76:12 - to generate one image only and will tell
76:14 - you the size of the image you want to
76:15 - generate is 256 by 256
76:18 - pixels yeah 256 by 256 so yeah like this
76:22 - and then lastly we can just do cons data
76:24 - equals to await response. Json so want
76:27 - to convert this response into a Json
76:28 - format then we can access the image we
76:31 - can get cons image URL equals to data.
76:33 - data at index zero right. URL and then
76:38 - lastly we can just return image URL as a
76:41 - string then if there's any error let's
76:43 - just console. error the error so let's
76:47 - save it and by right this function will
76:48 - give us back a image URL pertaining to
76:51 - the image description generated by open
76:53 - itself so come back to your root. TS so
76:56 - after we have generated the image
76:58 - description all right so let's actually
77:00 - now tra generate the the image so we're
77:03 - going to first check if not image uh so
77:05 - if not image description right that mean
77:08 - something R wrong so I'm going to just
77:09 - return a new next response response
77:13 - saying that uh fil to generate image
77:18 - description as in in a status of 500 all
77:23 - right then if so if there's image
77:26 - description let's actually generate the
77:27 - image so we do count image URL equals to
77:31 - await generate image here so we get it
77:34 - from the open AI uh passing the image
77:38 - description so now this image URL will
77:40 - hopefully return us with the image URL
77:42 - that's
77:42 - generated then we'll check if not image
77:45 - URL that means something R wrong so I'm
77:47 - going to copy this
77:49 - here and we'll just say that failed to
77:51 - generate image
77:53 - let's save it all
77:55 - right then Lastly lastly let's actually
77:58 - create the new notes okay so uh con
78:02 - notes equals to await DB so we're going
78:04 - to try to insert a new note within the
78:06 - table create a new row so this DB
78:08 - remember we import it from at lip DB so
78:11 - this is the if you come back to your lip
78:13 - DB file this drizz RM this DB is what we
78:16 - accessing so you can call AWA DB do
78:19 - inserts into the dollar sign notes which
78:21 - is from the schema
78:23 - dot uh values so want to insert insert
78:26 - the name so if you press control space
78:29 - you're able to see the different
78:30 - attributes that we need to pass in to
78:32 - create the rle so the name will
78:35 - obviously be uh the name that comes from
78:37 - this request body so we can just
78:39 - short-and it and then for the user ID
78:42 - right we get it from this user ID up
78:44 - here and then lastly we need the image
78:47 - URL which is from this image URL from
78:50 - this open AI here okay effect and then
78:53 - we want to return the new inserted node
78:55 - ID right so like which what's the new
78:57 - create newly created ID so we can do
79:00 - returning uh what what do we want to
79:02 - return you want to return the inserted
79:04 - ID to be uh dollar sign notes.
79:09 - ID and then finally we can access it by
79:12 - doing here we can just do notes IDs
79:16 - right and then we can just return a next
79:19 - response uh return a next response
79:25 - Json passing in the want to want to
79:28 - return the new ID that's has been
79:29 - created right so just do notes IDs at
79:32 - index zero. insert. ID so because this
79:35 - uh insert statement is going to return
79:37 - us with an array of with a list of all
79:39 - the inserted statements but because we
79:41 - only inserted one so we going access the
79:43 - first one and we access this inserted ID
79:45 - which comes from this returning
79:46 - statement here so then finally this no
79:49 - ID will give us back to the inserted
79:50 - newly inserted uh row row ID okay so
79:54 - that's pretty much it so let's save it
79:56 - and let's actually try it out so come
79:59 - back to your create note dialogue so we
80:01 - can see that it's on success right if we
80:03 - succeed right we know that it's going to
80:05 - return us with this object with this
80:06 - attribute called note ID so let's
80:08 - actually destructure this notes ID and
80:10 - then we can just console.log a notes ID
80:15 - so I can say that uh created new
80:20 - note okay so let's actually try out so
80:23 - I'm going to open up the console
80:26 - here and save it so we going to hit the
80:29 - end point right it's going to hit the
80:31 - endpoint then it's going to call the
80:34 - it's going to call the image URL it's
80:35 - going to generate the image and then you
80:37 - going to create a new R the database and
80:38 - return us with the note ID which will
80:40 - then console. log out here if it
80:42 - succeeds so let's actually try that so
80:44 - press create so right now it's hitting
80:46 - the end point although you can't see it
80:48 - so you can see that it's trying to hit
80:49 - the end point so let's wait for 8 to 10
80:51 - seconds and hopefully y hopefully it
80:53 - will create a new row and console to
80:55 - lock out the newly created ID all right
80:57 - so perfect it works so here in the
80:59 - console you can see that it says created
81:01 - new note with this object of note ID so
81:03 - let's actually inspect this note okay so
81:05 - come down here so let's come down to the
81:09 - new Prisma not Prisma Studio sorry the
81:11 - drizzle Studio we do MPX drizzle kit
81:14 - Studio let's inspect the note that we
81:16 - have created here okay here so you can
81:20 - see that there's a new note with ID of
81:22 - one that name is Cat created now and
81:25 - have a new image URL so this new image
81:27 - URL is the open AI dly image so let me
81:29 - copy this and let me just inspect it on
81:31 - the URL so we can see okay so that is a
81:35 - cute very very nice minimalistic cat
81:38 - image that's been generated for our
81:39 - notebook so now that we know that it
81:41 - works so that's really really good okay
81:44 - so let's close this down and uh now we
81:46 - can move on so let me just close this
81:48 - visual studio and exit it
81:50 - out all right perfect perfect perfect so
81:54 - if it successfully generated it we going
81:57 - to then redirect them to a new page uh
82:00 - we got directly redirect them to like
82:01 - the uh to this page for the uh note ID
82:05 - for them to actually edit their new
82:06 - notebook okay so here we're going to
82:09 - redirect them to this page so here on
82:12 - success let's actually redirect them so
82:13 - we'll just get the router so cons router
82:17 - equals to use router so this use router
82:20 - comes from not NEX router but
82:23 - from sorry import from Nex SL
82:28 - navigation here is use
82:31 - router okay so invoke this and we get
82:34 - the router object so if it succeeds
82:37 - right we can just do router. push
82:42 - slote book slash note ID like this okay
82:49 - perfect yeah then that's pretty much it
82:53 - yes yes yes okay so then if there's an
82:55 - error let me just uh do window.
82:58 - alert uh fil to create a new notebook
83:01 - okay so let me actually try it out let
83:04 - me just try it out so uh one more thing
83:06 - to add is when we come down to this
83:08 - button when it's loading when it's
83:09 - creating we actually want to disable the
83:11 - button right for a nicer user experience
83:14 - so for this button we'll just do disable
83:16 - so we disabled it when the create
83:18 - notebook is is loading so this create
83:21 - notebook has a attribute called is
83:22 - loading to tell whatever the request is
83:24 - still loading and then we'll have a
83:26 - loader so if create notebook do is
83:29 - loading right so if it's loading let's
83:32 - display a loader so we'll have Loader 2
83:34 - from lucd D react we'll give you a class
83:37 - name of with of four height of four
83:39 - margin R of two and animate spin so
83:42 - let's save it so let's actually create a
83:45 - new notebook now so click on here and
83:46 - let us create a a doc notebook so when I
83:50 - press create you can see this is loading
83:52 - to indicate that's a that is actually
83:54 - doing the API call and then if
83:56 - everything works it's going to Jetpack
83:58 - the note ID and it will redirect us to
84:01 - uh sorry it's going to redirect us to
84:03 - this/ notebook note ID that we got back
84:05 - from the new uh created Ro so let wait
84:08 - for a while and then if everything goes
84:10 - well and yep that's perfect so now we
84:12 - can see that it redirects us to/
84:14 - notebook SL2 so this is the ID yeah okay
84:18 - so that is excellent that's excellent we
84:20 - have created a new notebook we can
84:21 - create a new r and we have generated the
84:23 - image for the
84:25 - thumbnail okay so now that we have
84:27 - redirected this notebook page let's
84:28 - actually start working on the notebook
84:30 - page okay so come on to your app
84:32 - directory let's create a new uh folder
84:33 - called notebook right cuz this is trying
84:36 - to correspond to notebook right and then
84:37 - inside the notebook folder let's create
84:39 - another folder called angle brackets
84:40 - notes ID right and then within this
84:43 - folder let's create a page. TSX so this
84:46 - uh angle brackets is a wild card it's a
84:48 - wild card to access this like uh ID
84:50 - variable here so let's do TS r f
84:54 - c right to get the react uh react
84:56 - component and just let's do notebook
84:59 - page all right so we got the notebook
85:01 - page how do we actually get the notes ID
85:03 - from the URL though so uh next J
85:06 - actually provides us with the with the
85:08 - note ID in the props itself so within
85:11 - the props you can access the perms
85:12 - object within the perms do have a note
85:14 - ID which is a which is a string so this
85:17 - note ID is going to correspond to like
85:19 - whatever you have put in the angle
85:20 - brackets not not angle brackets square
85:22 - brackets so then we can destructure the
85:25 - perms and we can destructure the note ID
85:27 - within the perms so for now actually
85:30 - just display the note ID to make sure
85:32 - that everything is working so in this
85:33 - case yeah it's showing the two the two
85:35 - is showing which represents the notebook
85:36 - SL2 here okay so now that we got the no
85:40 - ID let's actually retrieve it right so
85:42 - I'm going to make this into a server
85:43 - component so we can fetch it directly in
85:45 - the component so this component is going
85:47 - to run once in the server it's going to
85:49 - fetch the database for the ID and going
85:51 - to return the HTML to the client so
85:53 - let's do let's actually check if the
85:55 - users authenticated here first so cons
85:57 - user ID equals to awaits off so this off
86:01 - comes from cler nextjs and then now we
86:03 - can just do um let's do cons notes
86:07 - equals to await uh sorry await U DB so
86:13 - the database from dzo do select from the
86:17 - dollar sign
86:18 - notes where equals right with can just
86:22 - put it in the sense right so actually
86:25 - there'll be an end Clause right so end
86:27 - so there'll be two Clause the first is
86:29 - the notes the dollar sign. notes. ID has
86:32 - to equal to par in notes ID and the uh
86:39 - dollar sign notes. user ID should equals
86:42 - to the user ID here so this will be this
86:46 - will be also yeah so let's see the
86:49 - reason why because this not user ID
86:50 - might not exist so if not user ID right
86:54 - so if it's unauthentic unauthenticated
86:56 - let's just return um uh return
87:01 - redirect from next SL navigator to
87:05 - slash dashboard so let's save it so
87:09 - basically what we did here is we get the
87:10 - user ID right if there's no user that
87:13 - means they're not loog in we got to kick
87:14 - them back to the dashboard right if they
87:16 - are if they're in we're going to try to
87:18 - get all their notes right so the note
87:20 - will be where the ID the note ID equals
87:22 - to the PM's note ID the URL perm well
87:25 - and also the user the user ID of that
87:27 - note must match the user ID that's lock
87:29 - in CU we don't want uh other people to
87:32 - view your notes right so we have this
87:34 - end clause and then this notes will have
87:37 - just check we're going to check if not
87:39 - notes do length equals to one so
87:43 - basically if if notes length not equals
87:45 - to one that means if there's not exactly
87:47 - one note that means uh we didn't find
87:49 - the proper note then we going to just do
87:50 - return re
87:52 - direct to/ dashbo so if we have found a
87:57 - note we are ensure that the note will
87:58 - leave in notes index zero all right so
88:02 - now they got this note and I can
88:04 - actually display it by doing just
88:06 - putting in here so let just do like
88:09 - this this on the stringify notes now and
88:14 - two and now we can see that here it
88:16 - shows we able to see the ID the name the
88:18 - Creator at image okay so that's good
88:20 - that's good so now let's actually build
88:22 - out the UI for the for this note page
88:25 - here so instead of returning the Json
88:28 - let us actually just return a diff this
88:31 - diff will have a class name of mean
88:33 - height of screen greeny ping of eight Y
88:38 - and then here we'll have another diff
88:41 - with a class name of Max width of 4 XL
88:44 - and margin X of AO within this uh second
88:47 - diff we have a link here this link comes
88:50 - from next SL link here let's actually
88:52 - just link it back
88:53 - to/
88:56 - dashboard all right uh yeah so actually
89:00 - I'm sorry above this link wrapping this
89:02 - link that's actually another diff that
89:04 - wraps this link so this diff is going to
89:06 - be what is going to be wrapping like
89:08 - this back button my name and the delete
89:10 - button here okay so obviously because
89:12 - you want to put it in a row let's
89:14 - actually give it a flex right so let's
89:16 - actually not do that first let's do
89:18 - bother
89:19 - Shadow XL border Dash Stone DH 200
89:24 - rounded large padding of four flx and
89:28 - items sorry flex and items of Center so
89:34 - this is rounded here so let me save that
89:38 - first and now we can see that it shows
89:40 - up here okay that's good so then this
89:44 - link here let's actually show the button
89:45 - to go back so we have a
89:48 - button that says uh
89:50 - back so like give you a class name of uh
89:54 - BG green 600 and a a variance of small
90:01 - SM yeah so this is size of small okay so
90:06 - now we got this back button here all
90:08 - right that is perfect that's perfect uh
90:11 - one more thing Let me see what is the
90:14 - issue here uh okay yeah let me just
90:18 - refresh the page here okay so beside
90:21 - this a button beside this link right I
90:23 - also have the link let us have the the
90:25 - user's name right we have to display the
90:27 - name and basically which notebook they
90:29 - on so to get the name of the user we
90:32 - need one more package which is the uh
90:34 - mpm install uh at cl/ backend so this
90:39 - cl/ backend will give us some backend
90:40 - utilities to get the user from the
90:42 - actual user ID okay so let me just uh
90:47 - get the CL user right so come back come
90:50 - down to your lip folder
90:52 - and let's create a f f just called click
90:55 - server. TS so this only runs on the
90:57 - server right so this click Das server.
91:00 - CS will import from at cl/ backend we
91:04 - import the actual CL object and we can
91:07 - just is just one line export a new cons
91:09 - CL CLI it goes to
91:12 - cler right passing in the API key uh
91:15 - sorry so for this API key we pass in
91:17 - process. env. C API key so if you come
91:22 - back Tov file we can see there's this CL
91:24 - secret key so copy this secret key and
91:27 - actually paste it here so we are trying
91:29 - to access this secret key so just save
91:31 - it and now we got this clck instance
91:33 - that we can use so come back to the
91:34 - page. TSX here we can actually get the
91:37 - cons
91:38 - user equals to cler uh sorry cons user
91:41 - equals to cler so this cler comes from
91:44 - our cler server do users. get user
91:48 - passing in the user ID so then this will
91:51 - contain like uh all the stuff like uh
91:54 - this will awaited so we get back like
91:56 - the first name and the last name all
91:57 - right so let us actually put it in the
92:00 - the UI itself okay so uh underneath here
92:03 - this uh this link underneath this link
92:06 - let's actually have another spacer that
92:08 - just put w-3 so it's just a width of
92:11 - three just a empty diff and we have a
92:13 - span this span will have a class name of
92:17 - font semi board and then inside this bam
92:21 - will have user. first name and then
92:23 - user. last name so if we save it here we
92:26 - can see that my name shows up here right
92:28 - so it's my first name combined with my
92:29 - last name here okay that's good so then
92:33 - lastly for this underneath here let us
92:36 - have a uh span and we have a class name
92:40 - of inline block with margin X of one and
92:44 - we just have a slash and after this ban
92:46 - after this ban we have another span that
92:48 - have a class name of text- stone- 500
92:52 - font semi B and here we'll put the
92:54 - notes. name okay so now we can see
92:57 - there's a nice flash slash here followed
93:00 - by the name of the notes so this is uh
93:02 - this combination of these three spans
93:04 - here okay all right so then basically
93:07 - after this pen we'll have a delete
93:09 - button here okay so we'll do the delete
93:11 - button uh later on but just know that uh
93:13 - the delete button will go here so let me
93:16 - just put uh ml AO and we'll put a delete
93:20 - button to do here so we can see that we
93:23 - put a margin left of Auto so that this
93:25 - gets pushed all the way to the left to
93:27 - the right side here so later implement
93:29 - this this delete button okay that's good
93:32 - then finally finally finally underneath
93:35 - uh this underneath this diff so
93:37 - underneath the we can collapse the
93:41 - Border here here and then we'll just do
93:44 - underne so above the two closing diff we
93:46 - have a another diff of height four so
93:48 - it's a empty spacer diff a spacer diff
93:51 - of height D4 and then underneath here is
93:54 - where we're going to put our editor so
93:56 - here is going to where our editor goes
93:58 - so this editor is going to be this thing
94:00 - that you see here that has all the
94:01 - functionalities built in so that's the
94:03 - main part of the application so for now
94:05 - I'm going to build a a container around
94:08 - it right so I have a diff here and this
94:11 - diff is going to wrap this editor later
94:12 - on let's give you a class name of Border
94:17 - Stone of 200 Shadow XL uh border rounded
94:22 - large padding X of 16 padding uh y of
94:26 - eight and then lastly width of four so
94:29 - let's save it and right now here is
94:32 - where our editor will go yeah so you're
94:34 - doing great so now the next part is
94:36 - going to be actually configuring the
94:37 - editor and I'll show you how to actually
94:39 - build out this very customized editor
94:41 - from
94:42 - scratch okay so now let's actually begin
94:45 - building the editor component which is
94:46 - the main BL of this project so be using
94:49 - a editor uh Library called tip tab
94:51 - editor so it's a it basically giv you a
94:55 - lot of functionality for building a very
94:56 - customized and full fles editor
94:58 - application so let me walk you through
95:00 - how you do that so so come down to your
95:02 - app and let's actually under our
95:04 - components let's create a new component
95:05 - and let's just call it Tip Tap editor.
95:09 - TSX so let's do tsrf c okay so we need a
95:14 - few dependencies for this tip tab so the
95:16 - first thing we need is um M install
95:19 - sorry at tip
95:22 - t/ react then we need tip t/ PM so this
95:26 - is PM stand for proos mirror so proos
95:29 - mirror is a primitive which tipt is
95:31 - built on so we need that for certain
95:32 - apis and
95:33 - functionalities and last thing we need
95:35 - tip t/ uh stter starter kit so this
95:39 - starter kit will give us a certain
95:41 - default configuration for like text or
95:43 - like paragraph or headings for us to
95:44 - start playing around with so we need
95:46 - these three things so we'll wait for the
95:48 - mkm install to be finished all right so
95:50 - uh my mistake here here it should be tip
95:52 - tab not tip tab so make sure you spell
95:54 - it right so then we going wait for the
95:55 - mpm to
95:57 - install Okay so once it install let's
96:00 - come to this editor the first thing is
96:02 - let's actually make it into a client
96:04 - component because of using state so uh
96:08 - I'm going to just configure the editor
96:09 - so what we going to do is here is we
96:11 - need something called use editor so
96:13 - let's import the use use editor Hook
96:15 - from the tip tab so import from at tip
96:19 - t/ react and we will need the
96:22 - a use
96:24 - editor okay so let's come down here and
96:26 - let's actually initialize the editor so
96:28 - we'll take the cons editor equals to use
96:31 - editor we're passing several things so
96:33 - the first thing is autofocus to be true
96:35 - so whenever the page loads we want it to
96:37 - automatically focus on the text box so
96:40 - it's a good user experience and then
96:42 - we'll have a extensions so these
96:44 - extensions are the remember the starter
96:46 - kit we install so we need the starter
96:47 - kit so let's import uh starter starter
96:52 - kit from at tip t/ starter kit yeah that
96:56 - we're passing the starter kit into the
96:59 - uh extensions array and then uh lastly
97:03 - we have a Content so this is a is a what
97:05 - is actual content that's going to be
97:06 - displayed in the editor so we'll bind it
97:10 - to a state called uh editor State and
97:13 - we'll do set editor State equals to be a
97:15 - it's going to be a string okay so then
97:18 - the content here is going to just be the
97:19 - editor State all right
97:21 - so then uh lastly on update so whenever
97:26 - whenever we change the like we make a
97:28 - change in the editor right we're going
97:29 - to just call this function it's going to
97:32 - do set editor state to be editor. get
97:35 - HTML so we can see there's a lot of APs
97:37 - I get Json and things like that right so
97:39 - you can read all of this in the
97:40 - documentation I spent about a few hours
97:42 - reading to the documentation so just
97:44 - dist it down to the most essential
97:46 - things that if you're interested in
97:47 - exploring further and expanding on this
97:49 - editor then of course you can read the
97:50 - document ation but anyways this editor
97:53 - basically allow allows us to use this
97:55 - method to get back the HTML which will
97:57 - then bind it to the state this internal
97:59 - local state okay then lastly for the the
98:02 - UI let's actually return a a diff this
98:05 - diff is going to have a uh have a in
98:10 - another diff call just for the editor
98:12 - content so this editor content we can
98:14 - import from tip t/ react and we just
98:17 - have to pass in the editor to be the
98:18 - editor instance that we have
98:20 - instantiated inst
98:21 - here so let's save it and let's actually
98:24 - import the tip tab editor here so let's
98:26 - just do tip tab editor and let's see if
98:29 - it works so I'm going to just refresh
98:31 - the page and let's see if everything
98:34 - works okay and it's good it's working so
98:35 - now we got this editor and we can like
98:37 - it's a multi-line thing yeah so you can
98:39 - see that tiip tab actually comes with
98:40 - like a very it's quite basic for now
98:42 - right but I'm going to teach you how to
98:43 - customize it so I guess the first step
98:45 - here is actually to uh remove this
98:48 - outline border cuz it looks very very
98:49 - annoying doesn't look nice so if you
98:52 - inspect in here we can see that there's
98:54 - this uh this class name that's wrapping
98:56 - everything called the uh tip tab proos
98:59 - mirror class so we're going to Target
99:01 - the class in our CSS file and remove the
99:02 - outline for now so come down to your
99:05 - global. CSS scroll all the way down here
99:09 - and we going to add a custom stying to
99:11 - the tip tab uh tip tab do Pros mirror
99:16 - Pros mirror class so we're just going to
99:20 - remove the outline that's all that need
99:21 - to do and if you come back here right
99:23 - now we can see that uh there's no longer
99:25 - a outline here and it looks much cleaner
99:28 - in my in this case all right so that's
99:31 - good that's good so let's actually
99:32 - continue uh defining it so uh let's see
99:36 - what I want to add here so let me now
99:38 - teach you how to add this like a det bar
99:40 - so like you see if you scroll up here
99:42 - like this and you press Bol uh if you
99:44 - press Bol you can actually bold it
99:46 - yeah so I'm not sure why you can bold it
99:48 - in this case b yeah you can see that if
99:50 - I press uh command B it BS it or I can
99:53 - command you to like underline it and
99:54 - stuff like that so I'm going to teach
99:56 - you how to get make this editor work all
99:58 - right so uh come down to here let's
100:01 - actually create a new menu bar so this
100:04 - menu bar will be a separate component
100:06 - that's going to leave on top of the
100:07 - editor so uh come down to your
100:10 - components actually create a tip uh Tap
100:13 - menu
100:14 - bar TSX we do TSR
100:19 - fce okay so for this menu bar we will
100:21 - need to accept the editor so remember
100:23 - this editor that we have defined uh in
100:25 - the tip T editor here so this editor we
100:28 - need to pass into this uh menu bar later
100:30 - on so let's actually just import the uh
100:32 - menu bar into the editor first so I'm
100:35 - going to come up here and just for this
100:37 - outo diff let's give you a class name of
100:39 - a flex uh yes a flex and then underneath
100:43 - here let us just do a uh sorry actually
100:46 - this should be a react fragment I'm
100:48 - sorry uh cuz I was thinking of something
100:50 - else uh let's move this react fragment
100:52 - down and then move this diff content
100:54 - down here so I'm going to explain what
100:57 - this is so this Flex is going to contain
100:59 - uh the you see this menu bar is one
101:01 - component and this save button is
101:02 - another component so we have the tip T
101:05 - editor menu bar as well as a
101:09 - button uh that says saved okay so then
101:13 - it's going to be then uh it's going to
101:14 - line up side by side and then inside
101:17 - this edited content here we add more
101:19 - content down here so it's just minus
101:21 - stying thing so we're going to pass in
101:23 - the editor right it's going to pass in
101:25 - the editor from here so I want to make
101:27 - sure this editor exist first so we'll do
101:30 - if editor exists then I'll put the T the
101:32 - menu bar here so let's actually
101:34 - configure the props to get it in so let
101:36 - me just uh put the tip tab here so in
101:40 - the props we expect the editor to be a
101:43 - editor from tip t/ react then now we can
101:47 - uh destructure it from here okay so now
101:49 - the menu bar is showing up here and we
101:51 - can continue on okay perfect so for the
101:54 - menu bar I'm going to just do uh let's
101:58 - see uh I'm going to return a diff right
102:03 - this diff is going to have a class name
102:04 - of flex Flex D rep and gap of two so
102:08 - this diff is just basically contain all
102:09 - of these buttons so all these buttons
102:11 - are differently sty like uh it's a
102:13 - custom buttons like each button like uh
102:16 - an individual button so then we got to
102:17 - just wrap it into all this Flex con a
102:19 - flex container
102:21 - so let me just demonstrate some uh some
102:24 - let me demonstrate something about the
102:26 - how I say the tip T menu bar so we have
102:29 - a just a normal button here so this is
102:31 - not from Shen because we want to style
102:33 - it a certain way first so for this
102:35 - button let's have a
102:38 - uh Bol so we import this Bol uh icon
102:42 - from Lucy D react let's give you a class
102:44 - name of width of six and height of
102:47 - six so let's save it and right now we
102:50 - can see that this is both icon here as a
102:52 - button okay so uh so so so so so for
102:55 - this button we'll pass in a few things
102:56 - so on click right so let me explain how
102:59 - this works so we're going to do editor.
103:01 - chain so this chain is basically saying
103:04 - that the editor we can chain a lot of
103:06 - commands on it so the first thing here
103:07 - we want to do is we want to focus back
103:09 - on the editor so after we focus on the
103:12 - editor we want to toggle both so we can
103:14 - toggle whatever selection we have it on
103:16 - right now so imagine I have this
103:18 - selected here and I press this B button
103:21 - it's going to focus on the editor and
103:22 - they toggle toggle board on the
103:25 - selection here okay so after toggle uh
103:28 - toggling the bo we can actually run the
103:30 - command here so I just basically found
103:32 - this API from their documentation I'm
103:35 - just briefly explaining it here to you
103:37 - so just need to know about how it works
103:38 - like this and then for here we want to
103:41 - disable this button right we will
103:43 - disable it when edit when the not editor
103:47 - do can. chin. Focus
103:51 - tole sorry
103:54 - tole run sorry here do uh run okay so
104:02 - what it does is we want to disable it if
104:04 - the editor cannot toggle B so in some
104:07 - cases like it just doesn't it's not able
104:09 - to tole it B then we just want to
104:11 - disable this button here so you can see
104:13 - that this is command this this can uh
104:15 - can function here okay and then we'll
104:18 - have a class name of we got to check
104:19 - Okay so if editor sorry we're going to
104:22 - check uh for a
104:25 - condition so if editor dot is active so
104:28 - if it's already bought right we want to
104:30 - show an active class right so we're
104:31 - going to show a is active right
104:34 - otherwise we're going to show empty
104:36 - class
104:37 - name okay so right now we can actually
104:39 - see in acity so if you come down to this
104:41 - thing it's right now it's invisible so I
104:43 - can type a few things and I I highlight
104:45 - this right highlight this button I press
104:47 - on this button and we can see that it's
104:48 - B up right so why does is is it just
104:51 - change the thing it focus on the editor
104:52 - and it toggles the B so right now we can
104:54 - we have like this b b functionality
104:56 - working at it so all we need now to do
104:58 - is we have to fill in the rest of these
105:00 - functionalities for like the iism and
105:03 - the hings and stuff like that so let me
105:06 - just run through it uh really quickly
105:08 - I'll run through the first field then
105:09 - I'm going to copy in the rest so that we
105:10 - can have better understanding okay so
105:13 - underneath this button let's actually do
105:14 - the do the next part so we have another
105:16 - button so you know actually I can just
105:19 - copy this button down here and right
105:21 - instead of tole both this to
105:25 - tole italics italic and then here will
105:28 - be toggle italic here and then here be
105:32 - instead of checking for B we want to
105:33 - check for
105:34 - italic here
105:37 - italic all right then for this instead
105:40 - of this B icon I'm going to just put it
105:42 - as italic icon italic icon from Lu DH
105:45 - react so if we save it right now we can
105:46 - see that there's not italic thing so if
105:48 - we highlight this and we can italicize
105:50 - it yeah so the rest of the concept is
105:53 - going to be very very similar so what
105:55 - I'm going to do is instead of wasting
105:57 - your time and just doing the same thing
105:58 - over and over again I'm going to just
106:00 - copy in this uh copy in the code here
106:04 - from my code up here and let me just
106:07 - clean up a few things and explain what
106:09 - I've just did so Tip Tap
106:12 - menu okay so basically it was the same
106:15 - thing right I'm receiving the editor
106:17 - right then I'm basically returning the
106:19 - buttons that buttons like the Bol
106:21 - buttons and things like that right
106:23 - except that I just went through the
106:24 - documentation I found everything that is
106:26 - available to us so we have this itze
106:29 - button we got this strike true button
106:31 - for the toggle strike toggle code so we
106:33 - can like toggle it whether we want to
106:35 - make it a code block or not okay then we
106:38 - have Hing so the all the Hing level one
106:40 - to five to six so can have like a
106:42 - different hings but right now let me
106:44 - show you why it's not working because
106:45 - even though I toggled the hings right we
106:47 - can see the text but the text size stays
106:49 - the same even though right even though
106:51 - it's H3 right let me show you if I
106:53 - toggle it H1 H2 H3 right the thing is
106:56 - being toggled is being changed but the
106:58 - Tex SI is not changing this is a
107:00 - Tailwind issue so we actually need to
107:02 - install a Tailwind a Pros utility so
107:06 - this tailn typography allows us to uh
107:09 - give back the markdown the in terms of
107:11 - like the H1 it will allow ta to respect
107:13 - our H1 H2 H3 sizing so to install this
107:17 - let's actually install the typography
107:19 - extension right so come down to your
107:21 - terminal and just do mpm install at TN
107:24 - CSS typography and then underneath here
107:27 - come back to your TN config file okay
107:30 - and we we need to add this typography
107:33 - into our plugin so scroll all the way
107:34 - down here for this plugin we add one
107:37 - more thing called the the require which
107:39 - is the typography library that we just
107:40 - install this extension so after we have
107:43 - this we can come down to our uh tip tab
107:47 - editor right remember this div that's
107:48 - wrapping it let give you a class name of
107:50 - of Pros so now this Pros will allow us
107:52 - to like uh respect the H1 and H2S so if
107:56 - we save the pros now and we wrap it now
107:58 - we can see that now it respects the H1
108:00 - H2 H3 H4 and H6 yeah so that is
108:04 - basically what the pros of ta win
108:06 - utility does for us yes so coming back
108:10 - here so it's just a different heading
108:11 - levels things like that then we have
108:13 - obviously the bullet list for the like
108:15 - you want to make a list of something you
108:17 - can do that here you can have order list
108:20 - code blocks block Cotes and and undo and
108:24 - redo basically so this supports undo
108:26 - like I can press contrl Z to undo yeah
108:29 - so I hope you understand this it's quite
108:30 - simple API once you understand how to
108:32 - use it then all this list order is show
108:34 - basically icons that I found from Lucid
108:37 - D react so yeah there's not much nothing
108:40 - too complicated about it yeah so one
108:43 - more thing here is right right now we
108:44 - can see that when we when we click on it
108:47 - when we click on the button right it
108:49 - when though it's active if is active we
108:51 - don't have a way of showing whether it's
108:52 - active so come down to your global. CSS
108:55 - file okay we can do do is active right
108:59 - we give a background color of let's say
109:02 - # da d a DA and have a border radius of
109:07 - two pixel so if we save it right now we
109:09 - should able to see it in action right we
109:12 - can see that when we B it right there's
109:14 - a background to it I tell the size we
109:15 - can see there's a nice background to
109:16 - integrate which which modes are uh which
109:19 - modes are basically active here so this
109:21 - H4 H3 H5 yeah so that's pretty much very
109:24 - simple styling so these all uh read from
109:28 - the documentation so you don't have to
109:29 - worry about me too much if you're
109:31 - interested you can always read more into
109:33 - into it yeah so I'm just here to like
109:35 - save you some time and show you the
109:37 - basics of how to actually get started
109:38 - with this a powerful editor uh
109:45 - Library okay so now that we have uh the
109:47 - editor up and working so now let's
109:49 - actually work on uh doing the saving
109:51 - functionality so the auto save so um
109:54 - every time you type right so we're going
109:55 - to have a debounce so after the debounce
109:57 - we're going to basically save it to a
109:58 - database so if you're not sure what
110:00 - debounce is I'm going to show you in a
110:02 - while so don't worry about it so I guess
110:04 - the first step here is actually let's
110:05 - close off the menu bar and let's come up
110:07 - here and let's actually have a u react.
110:11 - use effect and let's actually just toggo
110:13 - it on every time the editor State
110:15 - changes okay so let's just do
110:18 - console.log editor state
110:21 - okay so let us actually see what the
110:23 - editor is going to look like so every
110:26 - time I I click on it we can see that the
110:28 - paragraph is form and if I have a
110:30 - heading right we can see there's a h one
110:31 - and the paragraph right so let me just
110:34 - move myself out the way so we can see
110:35 - how the how the editor looks like so
110:38 - basically want to save this piece of
110:39 - information to the database and then
110:41 - every time we look into our notes uh
110:43 - this note page we're going to just uh so
110:46 - that we can load it in and display
110:47 - whatever we have in the database okay so
110:51 - to do that so let's actually do the
110:52 - debounce so the thing is the reason why
110:55 - we want to debounce it is basically
110:56 - imagine we are typing in every time
110:58 - right so we can see that I'm typing in
111:00 - like let's say uh a few tens of tens of
111:04 - like let's I'm typing in like maybe 20
111:06 - or like 30 characters per second okay 20
111:09 - or 30 characters per second like let's
111:11 - say I'm typing fast right we do not want
111:13 - to basically hit the database endpoint
111:15 - and and try to save the save the whole
111:17 - text every time we type a character it's
111:20 - going to be very wasteful of resources
111:22 - right it's also going to be very like uh
111:23 - slow right cuz you're hitting the
111:24 - database like imagine 20 times a second
111:26 - that's not very optimal so what
111:28 - debouncing is is debounce is basically
111:30 - it will just uh wait for a while after
111:32 - you have finished typing then you wait
111:34 - for maybe like 500 millisecs to make
111:36 - sure you have finished typing then it
111:38 - will trigger the save right so that's
111:39 - what debounce means so to Rite the
111:42 - debounce function let's actually come
111:43 - down to lip and let's write a use
111:46 - debounce hook. TS okay so it's a custom
111:50 - hook for us to implement the debound
111:52 - functionality okay so I'm going to just
111:55 - import uh react from react we're going
111:58 - to be using use State and let's export a
112:00 - function called uh use debounce okay so
112:05 - this debounce is going to take in two
112:06 - things going take in the value which is
112:07 - going to be a string and the delay which
112:09 - is a number so this value is basically
112:12 - what is we passing the editor State and
112:14 - this delay is basically how many
112:15 - milliseconds do we want to wait after I
112:17 - finish typing to trigger the save okay
112:20 - so the first thing we going to do is
112:22 - going to take cons uh debounce value and
112:26 - set debounce value it's going to be a
112:27 - state right passing the initial value
112:30 - here okay and then what I'm going to do
112:32 - is I'm going to have a react do do do
112:35 - use
112:38 - effect uh here and I'm going to just do
112:40 - con Handler equals to set time
112:44 - out okay and basically what want to do
112:46 - is set the bounce value to be the value
112:49 - every time time the value changes okay
112:52 - so I'm going to set a time out for let's
112:53 - say delay seconds delay seconds okay I'm
112:56 - going to put the delay in here also and
112:59 - then I'm going to return a uh clean up
113:00 - function to clear a timeout so let me
113:02 - explain what I'm going to do doing first
113:04 - after I call it out I'm going to return
113:06 - debound value debound value okay so
113:10 - what's happening here is okay let's see
113:12 - this value right it changes every 20
113:14 - characters per second right it changes
113:16 - 20 times per second what it's going to
113:18 - do is every time it changes right it's
113:19 - going to call this it's going to call
113:21 - this use effect is going to be called
113:23 - okay so when it calls it's going to try
113:24 - to set the debounce value to the change
113:26 - value right but it's going to change it
113:28 - it's going to only set it after let's
113:30 - say 500 milliseconds right but if I
113:33 - change it again within 500 milliseconds
113:35 - it's going to call this function a
113:36 - cleanup function to clear the timeout so
113:38 - it never actually gets set so basically
113:41 - what what it happens is only if I stop
113:44 - typing after 500 milliseconds then does
113:46 - this debounce value this function gets C
113:48 - and then my debounce value will be set
113:51 - so let me show you in actions to have to
113:53 - show you then it's going to be much
113:54 - easier to understand so here I'm going
113:56 - to have a uh cons
114:00 - debound State uh debounce at deter State
114:05 - equal to use debounce we can pass in the
114:08 - editor State and pass in a uh delay off
114:12 - let's say 300 seconds would that be
114:14 - enough actually let's just do 500
114:16 - milliseconds 500 milliseconds so now I'm
114:19 - going to try to conso to lock out the
114:20 - debounce editor state every time it
114:22 - changes okay so let's try it again right
114:25 - so now let's I type look as I type you
114:28 - see nothing gets locked out but watch as
114:30 - I if I stop typing and after 500
114:32 - milliseconds see it gets locked out so I
114:34 - can keep typing and if I stop for 500
114:36 - milliseconds it gets CAU it gets caught
114:37 - again so that's what the debounce this
114:39 - so we can basically like type and then
114:41 - we can type and only if you stop typing
114:43 - then will the function be called and
114:45 - then we can call we can call the save
114:46 - function here so here we can then save
114:49 - to D B okay so I hope you understand the
114:51 - debound thing so now let's actually
114:53 - write the function the API end point to
114:55 - actually uh do the saving so come down
114:58 - to your uh folder and let's under our
115:00 - API let's create a new folder called
115:01 - save
115:02 - not within this folder let's do a root.
115:05 - TS and let's do export a Asing
115:09 - function called post and the request
115:12 - will be a standard request object okay
115:16 - here all right and then here we can
115:18 - actually do the uh function to actually
115:20 - save the
115:21 - note so the first thing here is let me
115:23 - just wrap it in a try catch block and
115:26 - we'll just destructure we'll get the
115:27 - body out of AIT request. Json so get the
115:30 - request body so uh within the request
115:33 - body I will need two things right we
115:35 - will need uh the sorry we need the sorry
115:40 - let me see we need the notes ID and the
115:42 - editor
115:44 - state so this editor state will be what
115:46 - is shown here this uh debounce console
115:49 - loock and then this note ID is basically
115:51 - we are trying to see which note which
115:52 - note are we actually trying to update
115:54 - okay so we need to this we need T this
115:57 - so we need these two pieces of
115:59 - information so we got to just check if
116:02 - not editor state or not note ID so if
116:05 - neither of these are if one of these are
116:07 - not passed in we want to return a new
116:10 - new uh new next GS new sorry next
116:15 - response right passing in uh Missing
116:18 - edit State on no ID in a state of 400
116:21 - okay so if there's there's a note ID
116:23 - we'll just set the uh note ID equals to
116:26 - pass in notes ID so let's actually
116:29 - change this to a let so that we can
116:30 - reassign it here okay
116:33 - awesome so now let's actually get the
116:35 - notes right so cons notes we're going to
116:38 - try to find the note with that note ID
116:40 - so we do await DB dot
116:44 - select from dollar sign notes from the
116:47 - schema sorry here
116:50 - from notes dollar sign from the schema
116:52 - right where right where uh the notes. ID
116:56 - equals to the note ID pass in from the
116:58 - request body so if notes do length not
117:03 - equals to one so if that means there's
117:04 - not exactly one note that means
117:06 - something went wrong so let's just
117:07 - return a new next response saying that
117:11 - uh failed to update passing the status
117:13 - of
117:15 - 500
117:17 - okay so now that we got the note let
117:19 - actually get the note equals to notes
117:21 - index zero so it's the first notes out
117:23 - of this
117:24 - array okay then now let's actually check
117:27 - okay so uh let's just
117:29 - do uh if notes but editor State not
117:34 - equals to editor state so this is the
117:37 - Old State right this is whatever is in
117:38 - the database and this is the new state
117:40 - so we can check if is different because
117:42 - if it's the same then it doesn't make
117:43 - sense updating it we're just wasting
117:45 - resources so only if it's different then
117:48 - let's actually set set right so let's
117:50 - just do await db.
117:53 - update uh update notes we want to set
117:57 - the editor state to be the new editor
117:59 - state that we got up here right where uh
118:03 - where the note ID equals to the note ID
118:06 - pass in from the body yeah so I hope you
118:08 - understand it's just we're just updating
118:09 - the editor State based on the Note ID
118:12 - and then if everything goes well let's
118:13 - return a next response do uh Json saying
118:18 - that success equals to true and a status
118:21 - of 200 if there's any errors let's
118:24 - actually console do out console. error
118:26 - the error and let's return a new next
118:29 - responsejson right asking the success
118:33 - success to be false and the status
118:38 - of sorry St sorry this is
118:42 - response let passing a status of
118:45 - 500 internal server
118:47 - error okay so now we got this Point
118:49 - Let's actually try using it on the front
118:51 - end so remember you want to save to DB
118:54 - every time the debounce editor State
118:55 - changes right so let's actually do that
118:58 - so first let's actually get the mutation
119:00 - function so cons save notes equals to
119:03 - use mutation from uh 10 St query passing
119:07 - the mutation function to be an async
119:10 - function to hit the end point so we want
119:11 - to hit this a safe not end point here so
119:15 - let's just do cons response equals to
119:17 - await exos
119:20 - host SL API saave note so this is what
119:23 - is uh What uh end point we have just
119:25 - written here then we need to pass in two
119:27 - things right we need to pass in the
119:28 - notes ID which is uh the notes so how do
119:32 - we actually get access to this note we
119:33 - can actually get it from the notes uh
119:36 - you can get it from the notes which is a
119:38 - notes type so remember this note type we
119:41 - got it from our our schema here right so
119:43 - we can actually get this notes type here
119:46 - and can destructure the
119:48 - notes
119:49 - and let actually passing the note ID to
119:51 - be note ID and then of course we want to
119:53 - have the editor state to be whatever we
119:57 - have this editor State here so this note
120:00 - ID and this editor state will be passed
120:02 - back into this function no ID and editor
120:04 - State and then we do the corresponding
120:06 - update so we actually need to pass in
120:08 - this notes right if not we do have
120:10 - access to this notes so come down to
120:12 - your uh notes ID page for this tip tip
120:15 - tab editor TP script is yelling at us
120:17 - because we need the notes we need to
120:19 - pass in this notes object that we've got
120:20 - fetch from the database so now we have
120:23 - this we got access to the note we can
120:24 - have access to the note ID and stuff
120:26 - like that then let's just return
120:27 - response.
120:30 - data okay pretty cool pretty cool so now
120:33 - we got this function to actually update
120:35 - the update the database so let me just
120:38 - do if we could just check if the bounce
120:41 - editor State equals to an empty string
120:43 - let's just return course it doesn't make
120:45 - sense if you want to like uh update an
120:48 - empty string so if not let's actually
120:50 - just save note mutate so call the mutate
120:54 - function which will in turn call this uh
120:57 - in hit this end point okay so we'll do
121:00 - mutate uh passing in undefined so course
121:04 - we're not passing in anything to this
121:06 - like to this function here right and
121:08 - then on the second argument here we can
121:10 - just do on success so if there's a
121:13 - success let's actually console. loock
121:15 - success update and let's passing
121:20 - Thea
121:22 - then uh on error so if there's an error
121:26 - that's console do error error and let's
121:30 - just do yeah that's pretty much it okay
121:33 - so then let's actually have a saving
121:35 - State also so right now we can see
121:37 - there's this save button so we can see
121:39 - that in a deploy app when it save is a
121:41 - save disable save and then as we like
121:43 - type around we can see that it changes
121:45 - to a saving state so we can actually do
121:47 - that here by creating a new local
121:50 - state so let's have another state called
121:52 - cons is
121:54 - saving and we do set is saving uh
121:57 - actually we don't need a local state we
121:59 - can just use this save note
122:01 - function so underneath this button here
122:05 - right so this button here we can
122:06 - actually put uh here so we do uh save
122:10 - notes dot is loading so if it's Saving
122:14 - right I'm going to do saving if not I'm
122:16 - just put saved and that's actually this
122:19 - able this button and give you a variant
122:20 - of
122:22 - outline so right now it will be safe and
122:24 - then basically when I hit end point so
122:26 - let's actually try out okay so I'm going
122:28 - to open the console I'm going to start
122:31 - typing so it's going to hit the endpoint
122:34 - right then you can see that it it flash
122:35 - for a second and it successfully updated
122:38 - that means our database has been updated
122:40 - and we written with a success of true so
122:42 - that's good so now we can see that as we
122:43 - type and stuff it will hit the end point
122:45 - and it will save it I can bold it if I
122:47 - bold it it will also trigger the save
122:49 - so let me just remove this console lock
122:51 - cuz it's getting kind of annoying so let
122:53 - me just remove this and yeah everything
122:56 - is working perfectly so we're a to save
122:58 - it so let me just right now if I refresh
123:01 - the page right we can see that uh if I
123:03 - refresh the page right now nothing
123:05 - appears right so we need to load in the
123:08 - the Save Editor State on initial render
123:11 - so what we can do here is come down here
123:13 - to this remember here this we have this
123:15 - uh editor State instead of setting to MD
123:18 - string we going set it to the note.
123:19 - editor State yeah and then yeah so if
123:23 - there's no editor State we can just set
123:24 - it to empty string yeah so in the case
123:27 - that uh en state is now right we'll set
123:30 - it empty string if not you can see that
123:31 - it's showing up here so I can like type
123:33 - like Hello World right so we can see
123:36 - that it's saved if I refresh the page
123:38 - right it saved to the database okay
123:40 - that's perfect so uh we have learned how
123:42 - to use a debounce hook to debounce our
123:45 - change and then once the debounce has
123:47 - been triggered we I've taught you how to
123:49 - actually hit the endpoint to save the
123:50 - editor state within the database so
123:53 - you're doing amazing then the next St
123:54 - we're going to teach you how to
123:55 - integrate the the AI into the chat
123:58 - completion all right so just one thing I
124:00 - want to change is if there's no editor
124:02 - state that means like it's a new Fresh
124:04 - notebook right so instead of putting MD
124:06 - string I'm going to put a h one that
124:08 - that basically has the notes notes name
124:11 - in it so that it's like a better user
124:12 - experience so I'm just going Toc
124:14 - capsulate the notes. name and just put
124:16 - in the H1 tag all right so this a very
124:18 - simple UI fix all right so let's
124:21 - actually now start working on the AI
124:23 - completion part so in here in the
124:24 - original app you can see that when I
124:26 - press on let's say control I press shift
124:28 - a right when I press shift a it
124:31 - activates the AI and then it will just
124:32 - uh help me aut to complete all this
124:34 - stuff right uh and to do that we
124:36 - actually need to bind a custom key bind
124:38 - like a custom keyboard shortcut so that
124:40 - when we press shift a it's able to
124:42 - detect that we want to start Auto
124:43 - completing so to actually do the custom
124:46 - custom keyboard we actually need to
124:47 - create a new custom text so right now we
124:50 - can see there this u in the use editor
124:53 - we got this extensions on this start kit
124:55 - right so we're going to add another
124:57 - custom extension uh and this custom
124:59 - extension will contain the keyboard
125:00 - shortcut so to get that we need to
125:02 - import one thing from up here which
125:05 - which is uh import from uh let me see
125:09 - where is it from okay at tip
125:12 - tab tip tab SL extens text extension
125:16 - extension SL text uh all right and we
125:18 - need import the sorry uh the text so
125:21 - just default import so we can pass this
125:24 - text into the extensions here right but
125:27 - we want we want to customize it a little
125:29 - so let's actually do this we're going to
125:30 - do a cons custom text okay custom text
125:35 - equals to text do extend so we're going
125:37 - to extend this text I want to pass in
125:39 - the add keyboard
125:41 - shortcuts okay this add keyboard
125:42 - shortcut will be a function and what it
125:44 - returns is a it will return a a keyboard
125:48 - sh cut and then a function that will be
125:50 - CAU whenever the keyboard shortcut is uh
125:52 - triggered so in this case you want to be
125:55 - CAU whenever we have a shift a so when
125:57 - we press shift a we can to call this
125:58 - function and I'm going to do is just
126:00 - going just return true for now I'm going
126:03 - to say control. l activate EI okay and
126:07 - passing this custom text into the
126:09 - extensions list custom text and that's
126:12 - save it so now let's see if it works so
126:14 - I'm going to come open up this editor
126:16 - and the console so by right if I press
126:18 - shift a
126:19 - right I press shift a we can see that uh
126:22 - let's see if it works okay uh
126:25 - shift- a let's see if it works press
126:28 - shift a ah okay it works now so you see
126:30 - activate AI is being called so when we
126:31 - press shift a we can see that the
126:33 - activate AI function is being call so
126:35 - that's good so now here we know that
126:37 - within this function is where we can
126:38 - call the auto complete right so for the
126:42 - AI part we could be using a a versel AI
126:46 - SDK so it's a pretty new uh um package
126:49 - from versel right that give us a very
126:52 - nice library to interact with backend
126:54 - LMS and also give us that very nice a
126:56 - streaming effect so you see when we
126:58 - press like shift a right here there like
127:01 - the text will slowly come in one by one
127:02 - so we have to do that using the
127:04 - streaming effect so verel SDK give us
127:06 - that opportunity so let's actually set
127:09 - up the back end first for the completion
127:12 - so come down to your / API come down to
127:14 - your app folder come down to your API
127:16 - folder let's create a folder called
127:18 - complete
127:19 - with this completion let's do root. TS
127:22 - so this root. TS will map to a/ API
127:26 - completion so this file here will map to
127:28 - this uh will map to this URL so let's
127:31 - export a async uh function called host
127:35 - which will get in the request which a
127:36 - request object so let's actually import
127:39 - install the E from Vel so is mpm install
127:43 - AI so just two characters AI this will
127:46 - give us a lot of power in the completion
127:49 - so I'm going to close this down and
127:51 - we're going to import a few things from
127:53 - uh verel so the first thing is let's
127:55 - import the uh import from open EI H so
127:59 - it's the same configuration we did just
128:00 - now so we need the open EI API as well
128:03 - as the configuration object and now we
128:05 - want to import uh a few things import
128:08 - from AI so this AI is what is what we
128:11 - just installed so uh let's actually in
128:14 - uh initialize the opening a first so
128:16 - let's do config to new configuration
128:20 - passing in the API key to be process.
128:24 - env. open AI API key which is what we
128:26 - have from the EnV file here okay and
128:29 - then let's actually initialize the cons
128:31 - open AI equals to new open a API passing
128:35 - in the configuration object so now we
128:37 - can actually play around with this openi
128:40 - object so the first thing here is
128:42 - actually let's uh extract the prompt
128:44 - from the body so to that we'll do cons
128:48 - uh
128:49 - prompt equals to await sorry await
128:54 - request of Json so later on what we
128:57 - going to do is when we press shift a
128:59 - here we can to take the latest like May
129:01 - 30 characters and we can to pass into
129:02 - this prom here prom object from variable
129:05 - here so now we can actually request for
129:08 - the response right so we do cons
129:10 - response it goes to open away open ai.
129:13 - create chat completion we'll see the
129:16 - model will be uh gbd d3.5 dturbo
129:21 - for the messages right so we're going to
129:24 - have the first message being the system
129:26 - message to promp the system what his R
129:28 - is supposed to be so we'll tell it that
129:31 - hey uh you are a helpful
129:35 - AI actually I'm just going to copy in
129:37 - and just going to uh just tell you what
129:39 - is because it's quite a long
129:41 - prompt okay so here let me just copy
129:45 - here can I just copy this
129:47 - content all right so let's see here okay
129:51 - so I basically tell you that you're an
129:52 - helpful AI EMB bettered in a notion text
129:54 - editor app that's used to autocomplete
129:57 - sentences so the trait of AI include
129:59 - expert knowledge helpfulness cleverness
130:01 - and articulateness is a well behaved and
130:03 - well-mannered individual and it's always
130:05 - friendly kind and inspiring and is eager
130:08 - to provide Vivid and thoughtful
130:09 - responses so we're just basically
130:11 - prompting the AI on what we expect for
130:13 - the responses to be like so after that
130:16 - we can create another message and this
130:17 - time will be the the user to the user
130:20 - right so the content of the user will be
130:24 - uh let me just copy this in so leave all
130:26 - this in a paste bin down below so you
130:28 - can just copy from there so you have to
130:30 - like type it out manually so for the
130:32 - user will be saying I'm writing a piece
130:34 - of text in the notion text editor app
130:36 - help me complete my train of thought
130:37 - here and we pass in the promt so this
130:39 - promt comes from this request body and
130:41 - then we want to keep the tone of the
130:43 - text consistent with the rest of the
130:44 - text and keep the response short and
130:46 - sweet so this is some prompt engineer
130:48 - ing to make sure that the W output is uh
130:50 - is good and last want to pass in the
130:53 - stream stream passing the stream to true
130:55 - so this stream will then basically allow
130:57 - the open a API to pass in like tokens
131:00 - like one by one instead of like waiting
131:01 - for the entire response to finish before
131:04 - passing us back so better user
131:06 - experience and lastly we want to do cons
131:09 - stream equals to open eii Stream So this
131:12 - open AI stream comes from this AI
131:14 - library right and we'll pass in the
131:17 - response
131:19 - okay and then we'll do return a new
131:22 - streaming text response from o from AI
131:26 - so so this streaming text response
131:28 - function passing in the
131:30 - Stream uh stream okay so this will
131:35 - basically return us with a a streaming
131:37 - uh streaming content type that we can
131:40 - injust in the front end to basically uh
131:41 - mimic the streaming response when we
131:43 - press shift a all right so that's go we
131:46 - have finished the backend end point it's
131:47 - pretty simple po just Heating and some
131:49 - prom engineering so let's close this
131:51 - down so come back to our tip tab editor
131:54 - okay uh we can have a we're going to use
131:56 - a new a hook from we going to import
131:58 - this hook so let me show you what Hook
132:00 - is
132:02 - from SL from AI SL react so under the
132:06 - react library from from AI has a used
132:08 - completion hook so this used completion
132:11 - hook will allow us to interact with the
132:12 - backend API that we have just written is
132:14 - able to return us with the streaming
132:15 - tokens as we like uh manual trigger the
132:18 - AI completion so the first thing here
132:21 - what I'm going to do is I'm going to
132:22 - just take a
132:25 - cons equals to use completion I'll
132:29 - passing the API to be/ API
132:32 - completion
132:34 - completion okay so this API is the roots
132:38 - to whatever whatever back end here and
132:41 - it has to return a it has to return a uh
132:43 - streaming text response so this is ma to
132:46 - the root that we just done for this comp
132:48 - completion here okay because it Maps to/
132:50 - API completion so it has to match here
132:53 - so we're telling you what API root it is
132:55 - and we can destructure a few things we
132:57 - can destructure the complete and the
132:59 - completion so this complete is a
133:01 - function that we call to trigger the
133:02 - completion to basically trigger the end
133:04 - point and this completion is a bunch of
133:07 - is just like a a react state to get back
133:10 - all the tokens okay so what I'm going to
133:12 - do here is
133:14 - a uh underneath here underneath here uh
133:18 - because here we know that we want to
133:20 - activate the eii right I'm going to Do
133:21 - complete so I'm going to call the
133:23 - complete uh function and pass in the
133:25 - prom so this promt is basically uh let's
133:28 - get the last 30 characters so let's do
133:32 - uh take the last 30 words so we'll just
133:35 - do cons prompt equals to this.
133:38 - editor do uh
133:41 - get
133:43 - text so this will get all the pl text do
133:46 - splits do slice uh sorry dot uh sorry
133:50 - split on the empty empty space right
133:53 - space and slice it by
133:56 - 30-3 and we just join it back with a
133:59 - empty space so let me just console lock
134:02 - out the prom so we see what is happening
134:05 - here so whenever press shift a we should
134:08 - get the latest 30 words right so let me
134:10 - just show you so let me like type in a
134:12 - bunch of stuff if I press shift a we can
134:15 - see that it gets back this uh this of 30
134:17 - 30 words right okay so now we to fit
134:20 - this 30 words into the completion uh end
134:23 - point so that's called complete on the
134:26 - promt itself okay and what I'm going to
134:28 - do here is I'm going to show you the I'm
134:30 - going to use effect use effect to
134:32 - basically uh console lock out the
134:35 - completion so remember here it also
134:37 - returns us with this completion variable
134:39 - so I'm going to show you what it looks
134:40 - like console
134:41 - completion I'm going to save it so for
134:45 - now I'm going to delete everything else
134:46 - and let's just type some something
134:48 - serious like let's
134:49 - say uh I like cats okay I'm going to
134:52 - press shift a it's going to trigger the
134:54 - thing and watch what happen soon right
134:57 - yeah so you can see this completion is
134:59 - coming back do you see
135:02 - this yeah so you can see that cats with
135:05 - their charming and things like that so
135:06 - this is the the completion variable so
135:08 - the issue you can see is that every time
135:10 - this completion it just like streams in
135:12 - token by token right so into then into
135:14 - the world then becomes into the world
135:16 - com uh full stop
135:18 - so how do we actually get that
135:20 - individual word so because right we want
135:22 - to get the individual word uh get in the
135:26 - vual word so that we can insert into the
135:32 - editor right the issue right now is
135:34 - because I have this function let me show
135:36 - you here so I'm going to do uh editor
135:41 - dot commands do uh insert content I can
135:47 - insert the completion right but I'm
135:49 - going to show you the issue here so let
135:50 - me just do editor
135:53 - so uh if not
135:57 - editor
136:00 - return so let's actually move this down
136:02 - below the
136:03 - editor so let me show you the issue
136:05 - right now so basically every time the
136:09 - completion changes I'm going to insert
136:11 - this new completion into whatever text
136:13 - editor I have here so let me show you
136:15 - the issue right now okay so
136:18 - I like head okay Watch What Happens
136:22 - press shift a and look it's going to
136:25 - give us a bunch of JB look at this this
136:27 - is not right this is not right why
136:29 - because every time this completion
136:30 - changes this completion is a whole
136:32 - another paragraph So if you keep like
136:34 - basically uh if you keep inserting
136:36 - content it's going to insert like all
136:38 - this junk paragraph because it's
136:39 - duplicated the completion is duplicated
136:42 - right we can see that uh uh here is
136:45 - duplicated it comes like token by token
136:48 - so we actually want to get the
136:49 - individual token that comes back from
136:50 - the completion and to do that we can
136:53 - actually have a we can save we can use a
136:55 - clever trick we can just do uh cons last
136:59 - completion equals to react. use ref
137:02 - passing empty string okay so then what
137:05 - we can do is here we can have a react
137:07 - cons uh token equals to react. use memo
137:13 - so this used memo is a is to memorize
137:15 - the function to memorize the calculation
137:17 - right so every time the completion comes
137:19 - back in we're going to do
137:22 - uh uh we're going to basically take the
137:25 - difference between the completion and
137:26 - the last completion so let us do uh let
137:31 - us actually get the memo let me just
137:33 - check okay so so if not completion we're
137:38 - going to return but then if there's a
137:40 - completion we got to just do cons div
137:42 - equals to completion slice so we get the
137:46 - whole paragraph and then just want to
137:48 - like uh take the difference between the
137:49 - whole paragraph and the last completion
137:52 - so that we can get the individual token
137:53 - that was actually returned from the back
137:54 - end so we'll slice by
137:58 - the uh pre uh last completion do
138:02 - currents do
138:03 - length Okay and then we can just return
138:06 - the diff so this will return us with the
138:08 - individual tokens and I can prove it by
138:10 - instead of this completion let me just
138:12 - delete this I'll put in token and let me
138:14 - just put in this token and actually
138:19 - console. loock
138:22 - token so if it's not not token we return
138:26 - okay so let me prove to you why this
138:28 - will work right now so let me just save
138:30 - it here again
138:32 - so if I delete the whole thing again I
138:35 - WR I like cat and this time if I press
138:38 - shift a we can see the tokens start
138:40 - coming back in see it's in addition
138:42 - right
138:44 - yeah so right now it's still uh it's
138:46 - still not working and the reason why is
138:48 - because let me show you uh if not
138:52 - completion right because after we have
138:54 - set the after we have set the diff we
138:56 - will still need to set the last
138:58 - completion current to be completion so
139:02 - after we have already take the
139:03 - difference we want to set the last
139:04 - completion so that it finishes the loop
139:06 - and then we can uh get the latest token
139:07 - again so let me try again so I like cats
139:12 - okay so let me open up the console here
139:15 - okay so I was debugging something but um
139:18 - I'm actually not really sure why it
139:20 - doesn't work or why it works but anyways
139:22 - we were talking about how we're trying
139:24 - to get back the individual tokens from
139:26 - the uh completion string right so what
139:29 - we did was we did a react use effect so
139:31 - whenever the completion came back we
139:33 - basically keep track of a last
139:34 - completion which is a ref right so this
139:36 - ref will not change will not rerender
139:38 - the whole component whatever it changes
139:40 - so it's very good to like just keep
139:41 - track of what the last completion was so
139:44 - uh every time this completion changes we
139:46 - got to basically take the last comp
139:47 - completion and we got to take the
139:48 - difference between the last completion
139:49 - and the completion so then we got to get
139:52 - back the individual individual token so
139:54 - this diff represent the individual token
139:57 - and then uh we can just set the last
139:59 - completion to be the current completion
140:01 - and we just take the editor and we
140:03 - insert the diff the token into the
140:05 - editor so right now it can't it works
140:07 - right now so I can just do like um cats
140:10 - and docks R right so if I zoom in I can
140:14 - press shift a and it should just give me
140:16 - back a nice a streaming effect where it
140:18 - just automat adds it into the text
140:21 - editor and it saves it automatically
140:23 - yeah so we refresh it and it saves yeah
140:25 - so that's how the completion Works uh
140:28 - yes yes yes so I hope you understand
140:30 - that part so it's just about
140:31 - manipulating and using the use
140:33 - completion Hook from versal Ai and then
140:35 - trying to get the difference and to get
140:37 - the actual individual token to then
140:39 - insert the individual tokens into the
140:40 - editor y okay so we have completed U
140:44 - pretty much the bo of the application we
140:46 - get to like edit it with b and like
140:48 - things like that and we also did like
140:49 - the auto complete by pressing shift a so
140:52 - let me just the last step here is just
140:53 - to help me uh add like the the UI change
140:56 - for this like a tip press shift a for
140:58 - the auto compete so let's add that part
141:01 - in here okay so uh come down to this uh
141:06 - inside the under the editor content here
141:09 - right so we got remember we got this
141:10 - Pros right uh for this proos actually
141:13 - let's add one more class name for it let
141:16 - us add this
141:18 - pr-sm uh with full and margin top of
141:20 - four then underne this diff let have a
141:23 - height of four so it's a spacer diff
141:25 - empty div and here we can add a keyboard
141:27 - uh command so we'll give it a span of
141:30 - text SM and then let's give it a tip
141:34 - press uh so let's give you a kbd so it's
141:38 - a special keyboard element in HTML shift
141:42 - plus a and let's give it a styling so
141:45 - class name of
141:49 - padding X of two padding y of 1 padding
141:52 - y of
141:54 - 1.5 uh Tex super small XS font of semi
141:59 - bolt Tex gray of 900 sorry tax of 800 um
142:05 - BG gray of 100 border border Dash gray
142:09 - of 200 and rounded Dash
142:13 - large and then underneath here shift a
142:16 - let's do for AI auto complete so if we
142:21 - save that right now here we got this so
142:23 - let me add one more spacing some spacing
142:25 - in front of it here so like this and
142:27 - then here we can also add a spacing like
142:29 - this okay so now it looks good so we got
142:32 - command to like tell people what to do
142:34 - to actually uh do the auto complete so
142:38 - that's perfect that's
142:40 - perfect okay so uh now that we have
142:42 - finished it let's actually go back to
142:43 - build our uh dashboard page so right now
142:47 - the the dashboard has only this new uh
142:48 - this notebook so now let's actually
142:50 - fetch all the notebooks and display in a
142:52 - grid layout here so I'm just going to
142:54 - come down and let me just close out all
142:56 - my tabs so we are more organized so come
142:59 - down here close my tabs and let's come
143:00 - back to our dashboard page okay so let's
143:03 - dis all the notes but first let's
143:05 - actually get all the notes okay so for
143:07 - the dashboard page what we need to do is
143:10 - uh since let's Mak it into a server
143:11 - component and then let's actually fetch
143:13 - it okay so let's do cons user ID equals
143:17 - to off right so make sure that uh the
143:20 - user is log in then we do cons notes
143:23 - equals to await db.
143:26 - select from dollar sign notes
143:29 - where uh
143:31 - where
143:33 - equals uh notes. user ID equals to user
143:36 - ID so add exclamation mark So that we
143:38 - ensure that the user will always be here
143:40 - so now we get back a list of all the
143:42 - notes that belongs to this user that is
143:43 - log in so now let's actually look
143:45 - through it right so below here inside
143:47 - this grid layout so remember here uh
143:49 - this conditionally render so let's
143:51 - actually do the thing so uh if no not
143:54 - display this so let's do uh notes.
143:58 - length equals to zero if so basically if
144:01 - there's no notes then it Mak sense to
144:03 - display this uh uh text string that we
144:05 - have no
144:06 - notes okay so if you have notes let's
144:08 - come down here so underneath the create
144:10 - note dialogue so let's do notes. map so
144:13 - for each note Let Us return a uh normal
144:18 - a tech so a normal anchor tag so we have
144:22 - H ref equals to SL notes slash not sorry
144:27 - slash notes
144:30 - uh notes. ID okay so let's give you a
144:33 - key
144:34 - of notes. ID all right within the the
144:38 - anchor tech let's actually add a uh diff
144:41 - so this diff will be the card so we have
144:43 - a overflow of hidden Flex Flex of column
144:47 - when it's when we hover over it let's
144:48 - have a shadow of XL
144:51 - transition when we when we hover over
144:54 - again we negative Translate Y of one so
144:58 - within the card here let us show an uh
145:01 - image so let me show an image first let
145:03 - me give you a width of 400 and a height
145:07 - of height of 200 and we'll give it out
145:11 - of notes. name and finally a
145:15 - source note. name and the source Pro
145:18 - will be notes. image URL all right so
145:21 - some it might be now so let us do empty
145:23 - string if it doesn't
145:25 - exist okay then underneath here let's
145:28 - actually save it first so now we are
145:30 - able to see okay we got the cat and the
145:32 - dog right let me let me let me show you
145:35 - why the image is not showing up first so
145:36 - let's come down below inside the diff
145:39 - below the image let's have another diff
145:41 - they have a class name of padding of
145:43 - four and then have a H3 so this H will
145:46 - have a class name of text XL font
145:50 - semi B text grade of 900 then within the
145:54 - H Tre let us put notes. name underneath
145:57 - the H Tre let's have a spacer of H1
146:00 - height of one so it's empty diff and
146:03 - we'll finally have a paragraph tag that
146:06 - have a class name
146:07 - of text smm text Gray of 500 within the
146:12 - paragraph tag that us show new date
146:15 - notes. created at
146:17 - right dot to local date
146:21 - string okay let's save it and right now
146:23 - it should show up nicely okay the date
146:25 - does not exist so it's a capital D so
146:27 - let's save it and okay showing so now we
146:30 - got this uh date here and stuff so uh
146:34 - the reason why is not uh there's one
146:36 - more thing I'm missing let me see what
146:37 - I'm missing okay
146:40 - overflow things like
146:42 - that okay so uh one more thing for this
146:44 - diff on this overflow hidden let's just
146:46 - add round rounded large so that is a
146:48 - little more
146:49 - rounded okay so it shows up nicely here
146:52 - and if you go back to like refer back to
146:54 - our thing uh let's hope that it looks
147:00 - similar okay perfect so there's actually
147:03 - another a border around it so let's
147:05 - actually add a border so we'll do
147:08 - uh border border
147:14 - stone stone of 200
147:18 - okay so it looks nicer now perfect
147:20 - perfect yeah okay so uh the issue right
147:24 - now is why is the image is not showing
147:26 - up is let actually go inspect into our
147:29 - uh our drizzle kit I'm going to show you
147:32 - what is the issue so we just do MPX
147:34 - drizzle kit Studio to open up your
147:36 - database client in the
147:38 - website all right so open this up okay
147:42 - look at this image URL I'm going to copy
147:44 - this image URL I'm going to paste it in
147:45 - the URL right is going to tell us that
147:47 - he has he has expired so the the reason
147:51 - is because open AI open AI uh D open AI
147:54 - d uh
147:56 - to
147:57 - expiry right so uh by default d 2 gives
148:01 - you about I think two hour after an hour
148:04 - so the URL that's generated like this
148:06 - URL is only valid for an hour so after
148:09 - an hour this URL will no longer be valid
148:11 - so it's actually up to us the developers
148:13 - to save this temporary URL to another uh
148:16 - per perent storage in this case this
148:18 - permanent storage I'll be using Firebase
148:20 - so to actually uh store this let's
148:22 - actually go to Firebase console so
148:25 - search for the Firebase console and you
148:27 - have to log in or register for an
148:28 - account so Firebase is like a is a back
148:31 - end as a service to give you that uh
148:33 - give you a lot of functionalities like
148:34 - authentication and storage so once you
148:37 - log into the dashboard come down to add
148:39 - a project so create a new project and
148:41 - for the project let's call it uh uh
148:44 - ideation D YouTube
148:47 - then press continue and uh we don't to
148:49 - enable Google analytics just press
148:51 - create project and it's going to wait
148:53 - for it to create the project okay so now
148:55 - that the project is ready let's press
148:58 - continue okay so we'll be brought to the
149:01 - uh ideation YouTube plan uh to the
149:03 - dashboard in this case we want to uh
149:06 - activate the storage right so come down
149:07 - to the sidebar and you should be able to
149:10 - find let's see if I'm able to activate
149:11 - it if I zoom out a little okay uh come
149:14 - down to the the sidebar and I want to
149:18 - search for the storage so storage here
149:22 - so retrieve user generated content so
149:24 - here is where we going to store our our
149:25 - images P the the jpex so let's press get
149:29 - started in the storage and start in test
149:30 - mode so that um we able to access it so
149:34 - then press on next and then lastly it's
149:37 - saying that this is where our default go
149:39 - storage bucket is set so let's choose a
149:41 - location that's near us so in this case
149:43 - I will choose uh Asia South is one so CH
149:47 - somewh that's closer to you okay and
149:50 - then after done let me actually then
149:52 - just come and press done on the bottom
149:54 - right corner my head is blocking but
149:56 - yeah so we are creating a bucket meaning
149:58 - that we are choosing a location nearest
150:00 - to us to store all our uh D images so
150:04 - we're going wait for you to create the
150:05 - default bucket and then I'm I'm going to
150:07 - teach you how to actually set up the
150:08 - Firebase to connect to the
150:11 - storage okay so when the bucket has
150:13 - finished in initializing we have to
150:15 - create a new web project so uh is a
150:17 - create a new website that can is able to
150:19 - consume these images so come down to the
150:21 - project and just press web right so
150:23 - we're going to create a new web app so
150:25 - you can name it whatever you want I'm
150:26 - going to create just name it my web app
150:28 - and we don't want to we just disable
150:30 - Firebase hosting and I'll Press Register
150:32 - App and it should be able to give us uh
150:34 - all API keys to connect from our web
150:36 - application onto this Firebase okay so
150:39 - let's follow it so we need to install
150:41 - this Firebase package so it's okay so
150:44 - let's come down to our terminal and
150:46 - let's just stop the dzo studio and do
150:48 - mpm install Firebase all
150:51 - right so once we have installed Firebase
150:54 - let's see what is next uh sorry uh what
150:57 - happened to our thing one app my web
151:02 - app okay so after we have installed
151:05 - Firebase right we need to copy this uh
151:07 - code into our Firebase uhts so come down
151:10 - here and close the terminal come down to
151:13 - our uh lip so under our library we got
151:15 - to create a new file called
151:17 - Firebase TTS and we'll basically just
151:20 - copy in whatever code is here so press
151:23 - copy and just copy here so I'm going to
151:26 - you have to blank out your uh API key
151:29 - here okay blank out your API key so what
151:31 - you going to do is going to copy
151:33 - whatever you have here cut it out and go
151:35 - into your EnV and let us do uh actually
151:39 - let me see yes we have to
151:42 - do
151:43 - Firebase API key and just paste it in
151:47 - here okay then with this you can then
151:49 - come back here and just
151:50 - do process. env. Firebase API key cuz we
151:56 - do not want to upload this into our like
151:58 - how say we don't want to upload this
151:59 - into our G repository for everyone to
152:01 - see all right so after you have this you
152:04 - can then close the Firebase tab all
152:07 - right so the next step for the Firebase
152:10 - is want to initialize the storage right
152:11 - so uh underneath here we'll do export
152:14 - cons storage equals to get storage so
152:18 - this get storage will come from uh
152:20 - Firebase storage so import get
152:24 - storage from Firebase SL
152:27 - storage so get storage and passing the
152:29 - app instance here so this storage is
152:32 - what we will be using to interact and
152:33 - upload all our files onto um a 5way
152:37 - storage basically so let's save that
152:40 - okay so let us now talk about the flow
152:42 - so right now if you come back to your uh
152:45 - create a uh create notebook rout create
152:49 - notebook rout here right we can see that
152:53 - uh we're returning this note ID and then
152:55 - after we have created it so we create
152:57 - note dialogue right remember that after
152:59 - we have um created this new note we are
153:01 - directly navigating to this notebook so
153:04 - before we navigate it right we actually
153:06 - want to hit another endpoint hit another
153:08 - endpoint to upload the temporary uh di
153:13 - URL to permanent uh fire base URL okay
153:17 - so let's set up the endpoint to upload
153:19 - the image the temporary D image to the
153:22 - permanent permanent Firebase uh storage
153:25 - so come down to your app directory come
153:26 - down to your API folder and then let's
153:29 - do upload to
153:32 - Firebase let's create roots. TS within
153:34 - this
153:36 - Firebase okay and now let's actually
153:38 - work on this okay so uh let me see if I
153:42 - can find it all right so let me just
153:45 - export a async function called post
153:48 - which will take in the request object
153:51 - and let's actually do the uh try catch
153:54 - so we're going to accept a a note ID
153:57 - from the request. Json await request.
154:02 - Json uh Asing function export Asing
154:06 - function await request. Json so we'll be
154:10 - expecting a notes ID from
154:13 - this so what we going to do is after we
154:16 - we have uh got created a new node here
154:17 - right we're going to basically hit this
154:19 - Endo hit the end point passing in the
154:21 - node ID then from this note ID we uh
154:24 - will then extract out the extract out
154:27 - the DI image URL then save it to
154:30 - Firebase okay so hope you understand
154:33 - that part so let's get the image URL so
154:36 - we'll just do cons note equals to await
154:39 - DB do select from dollar sign noes where
154:45 - equals uh so you want to equal to the
154:47 - par in uh sorry the do sign notes. ID
154:50 - and the par in notes ID
154:55 - okay so this will be notes so then we're
154:57 - going to check if not notes uh notes
155:00 - index zero. image URL so if the D to uh
155:04 - image URL doesn't exist that means
155:06 - something went wrong so let's return a
155:08 - new uh next next response saying that no
155:13 - image URL passing in a status of 400
155:17 - okay now we will try to uh upload the
155:20 - file to Firebase so let's actually
155:22 - create a new uh how say underneath the
155:27 - come down to your fire base. TS right
155:30 - write a function below here to actually
155:32 - upload the
155:33 - file okay okay so uh so we're going to
155:38 - write a function export e sync function
155:42 - right which will uh which will be called
155:45 - upload file to
155:48 - Firebase so it's going to take in the
155:50 - image URL which is a string and a prompt
155:53 - which is also a string so this prom is
155:55 - just to name the file just to give the
155:57 - file a name so let me just name it as
155:59 - name here okay so the first step is
156:01 - actually let's do a try catch block so
156:04 - we'll try to get the
156:05 - response equals await fetch so this is
156:08 - the native fetch URL a fetch API and we
156:11 - fetch the image URL so this image URL
156:13 - remember this is the D 2 AP the D 2
156:16 - temporary temporary image URL okay so we
156:20 - await it and then we'll get the the
156:21 - buffer equals to await uh response.
156:25 - array buffer so this will convert the uh
156:28 - image into array buffer and now we can
156:30 - just do uh cons file name equals to
156:33 - name. replace want to replace all uh uh
156:38 - space characters with just an empty
156:40 - string and we'll just add uh uh dates do
156:44 - now
156:46 - plus jpeg so we're just renaming the
156:50 - file to add a custom ID and then make
156:52 - sure it's a JPEG
156:53 - format now we can do cons storage ref so
156:57 - we want to get the reference in the
156:58 - Firebase storage equals to ref so this
157:01 - ref is from the Firebase storage we pass
157:04 - in the storage object from this uh get
157:06 - storage here right and then we pass in
157:09 - the uh file name okay so then after we
157:14 - got the storage ref so now we got a
157:15 - reference to that actual file we can
157:17 - then upload the image to that file so we
157:19 - do await upload bytes so this upload BYT
157:22 - is also from Firebase storage we pass in
157:25 - the which reference we want to upload to
157:27 - we pass in the buffer okay so this
157:29 - buffer contains the actual image right
157:32 - and then uh we want to finally tell it
157:34 - that the content type is a image/ JPEG
157:38 - cuz we're trying to upload a JPEG image
157:40 - up to the storage okay and then finally
157:43 - at the end we can just do cons Firebase
157:46 - URL it goes to await gets download URL
157:51 - from Firebase storage passing in the
157:53 - storage ref so these are all just uh I
157:55 - read documentation and figure it out
157:57 - myself right so I'm just stealing it
157:59 - down for you in this simple code snippet
158:01 - telling you how to get the image URL and
158:03 - uploading it to
158:04 - Firebase in the end we just want to
158:06 - return the Firebase URL so we're going
158:09 - this is the permanent Ur URL now and
158:11 - then if there's an error any error let's
158:13 - just console.log console. error out the
158:15 - error
158:16 - okay so now we got this function
158:18 - actually call it so come down to your
158:20 - create not uh come down to your uh uh
158:24 - upload to Firebase route again and this
158:27 - time we're going to then call um let me
158:30 - see so after we got the image URL let us
158:33 - do cons
158:34 - Firebase URL equals to await upload a
158:38 - file to Firebase pass in passing in the
158:41 - notes notes. image URL okay and then we
158:45 - pass in the name here okay so does this
158:48 - make sense so because this upload file
158:50 - to Firebase remember it takes the image
158:52 - DRL and the name so you're just passing
158:54 - in the D URL and the the name of it so
158:58 - it's going to basically take the d URL
158:59 - it's going to put it into Firebase
159:01 - storage and return us with this Firebase
159:03 - URL so then finally we want to save this
159:05 - Firebase URL to the permanent database
159:08 - okay so let us do await db. update
159:12 - dollar sign notes do set
159:16 - uh image URL to be the filebase URL and
159:19 - then where equals notes. ID equals to
159:23 - pass in node ID so we're just updating
159:26 - the image URL to the the permanent
159:28 - Firebase URL when the note ID equals to
159:30 - the passin node ID from the body and
159:33 - then lastly we can just return a new
159:37 - next response of true and the status of
159:40 - 200 then if there's any
159:43 - error uh sorry okay okay and if there's
159:46 - any error we just return a uh error and
159:49 - a internal server error code okay
159:52 - perfect so now we've got this uh
159:53 - endpoint that's actually call it so come
159:56 - back to your uh come back to your how
159:59 - say create uh create note dialogue right
160:04 - got this create notebook mutation let's
160:06 - create another mutation for the
160:07 - uploading of the Firebase so we do
160:11 - uh let us actually get the Firebase root
160:15 - so let me just do this uh cons upload to
160:19 - fire base this is going to be use
160:22 - mutation the mutation function this time
160:24 - will be async right cons response
160:28 - response equals to
160:30 - await
160:31 - exos post SL API SL upload to
160:36 - Firebase right and passing in the notes
160:38 - ID so let me just delete this okay so
160:42 - this API SL upload to Firebase this is
160:44 - the roots that we created just now right
160:47 - this this roote this uh upload to
160:49 - filebase root right so remember it needs
160:52 - two things right it needs no sorry it
160:53 - needs one thing we need a note ID so the
160:55 - note ID will be uh how do we actually
160:58 - get the note ID we can get it from the
161:00 - props itself right so let's get the note
161:02 - so uh so to get the note ID we can get
161:05 - it from the parameters parameter so we
161:08 - can just pass in the notes
161:10 - ID okay and then we can just return
161:12 - response. data so let me just walk you
161:15 - through what we're doing first I'll
161:17 - write out the code then I'll explain so
161:19 - after we have uh created a new note
161:22 - let's actually also do upload to
161:24 - Firebase
161:25 - mutate uh passing in the note ID so
161:29 - after we have created the note right we
161:30 - got the note ID the newly created Noe ID
161:33 - then we got to call this upload to
161:34 - filebase mutate passing this Noe ID this
161:37 - no ID will then be propagated up here to
161:39 - this new ID this mutation function and
161:42 - you going to be hitting this upload
161:43 - filebase API with this new ID ID and
161:46 - then we going to just take the temporary
161:48 - D API and then convert it into the
161:49 - Firebase URL and then we can just return
161:52 - response. data and just save it so then
161:55 - it's going to basically convert our di
161:57 - image into the Firebase uh storage so
162:00 - let's actually try out so I'm going to
162:01 - refresh the page and let's see if it
162:03 - actually works okay so I'm going to just
162:07 - uh create a new notebook and this time
162:08 - I'm going to call it let's say uh type
162:12 - script and let's create so let's look
162:14 - into the cont cons for any errors so
162:17 - it's going to basically start creating
162:18 - the notebook so the first create
162:20 - notebook route is going to handle uh the
162:22 - creation of the images uh the D image
162:25 - and then here we can see that there's an
162:26 - error right it says that uh this
162:30 - encoding library is not found so we
162:31 - actually need to install this encoding
162:33 - library for it to work so just do mpm
162:35 - install encoding okay and lastly let's
162:39 - go back here and let's see if it still
162:41 - won't work for now course we need to try
162:44 - again actually it works so we can see
162:46 - that this uh URL is now uploaded to the
162:48 - Firebase storage so you come down to the
162:50 - resz studio right so let's do MPX
162:53 - drizzle kit
162:55 - studio right so if we refresh this we
162:57 - can now see the typescript has a
162:59 - Firebase URL so this Firebase storage
163:01 - this Firebase URL is permanent for else
163:03 - this is temporarily okay so everything
163:06 - works fine everything is perfect
163:07 - everything is working good so the last
163:10 - thing here is uh instead of using this
163:13 - um instead of using the default image
163:16 - we're going to use the next next uh SL
163:18 - image so import this next SL image
163:21 - component so it will help us optimize
163:23 - our image further if you save it right
163:25 - now it's going to throw an error right
163:27 - because let me show you why it's going
163:29 - to say that this uh host name is not
163:32 - configured so we actually need to add
163:34 - this a Firebase storage host name to our
163:37 - configuration so let me just copy this
163:39 - uh this Firebase storage. uh Firebase
163:42 - storage. googleapis.com let's copy this
163:45 - this and let me just come down to my
163:48 - next config.js so inside this config I
163:52 - need to basically allow and white list
163:54 - this image a domain so we do
163:57 - images right passing in the domains to
164:00 - be an array and it's going to basically
164:02 - allow any images from the Firebase
164:03 - storage so let's save it and let's
164:05 - actually delete the previous two records
164:08 - so I'm going to choose these two records
164:10 - and delete it delete and now I'm going
164:13 - to refresh the the I'm going to refresh
164:15 - the server so do mpm so right now it's
164:18 - it stopped right
164:20 - so let's do
164:23 - refresh sorry let us see if we able to
164:26 - get it up and running
164:28 - again and now it works okay so now we're
164:31 - using the the we're using the how to say
164:34 - we're using the next SL image component
164:37 - and let's actually try it again so let's
164:38 - create a new notebook and this time
164:40 - let's call it uh something creative like
164:43 - let's
164:44 - say computer Graphics let's see what
164:47 - kind of Graphics is able to generate so
164:49 - you hit the API it will generate the D
164:51 - to image and then you will redirect us
164:53 - to the uh notes note page right and then
164:57 - you will then in the meantime in the
164:58 - background you will upload that di API
165:00 - into our Firebase storage so we can see
165:03 - that configur Graphics is Right written
165:04 - here I can press shift a and it's able
165:07 - to generate uh the auto complete for us
165:10 - so that's beautiful everything is
165:11 - working perfectly okay then it's
165:14 - automatically it to the database and
165:17 - then when we press back it then we can
165:19 - refresh the page and it's able to see
165:20 - the computer graphics and this image is
165:22 - then uploaded into Firebase so yeah I
165:26 - think that's it for the for everything
165:29 - actually one more thing
165:34 - is so right now if you press like if you
165:36 - press here it brings you to SL notes
165:38 - which is incorrect so it should bring
165:40 - you to SL notebook instead so let me
165:42 - come down here to this so instead of
165:44 - leading to sln notes SL notes book so
165:48 - let's save it and let's try again so if
165:50 - I press this then it correctly brings me
165:52 - to the typescript page all right that's
165:54 - perfect that's
165:57 - perfect and last but not least let's
165:59 - actually do the delete button okay it's
166:01 - a pretty simple component so come down
166:03 - to your components let us do components
166:05 - create a delete button. TSX so TS r f c
166:13 - okay so for the delete button let us you
166:16 - try to accept the notes ID right which
166:19 - is a
166:20 - number so let us destructure the note ID
166:22 - so this is will tell uh our database
166:24 - which note to delete so then we're going
166:27 - to do uh let us actually render the
166:29 - button so return a
166:34 - button that have uh variance of
166:38 - destructive so it's red color and then
166:40 - we'll here have a trash icon so this
166:43 - trash is from Luc react and then
166:46 - basically let us give it a size of small
166:48 - and then onclick so when we click on it
166:51 - let us actually confirm to the user
166:53 - first so cons confirm equals to window.
166:58 - confirm are you are you sure you want to
167:03 - delete this notes question mark So if
167:06 - not confirm we want to return so they're
167:08 - trying to delete the operation but if
167:11 - they confirm it that means we actually
167:12 - want to call the API function so let let
167:15 - us create a new endpoint in apepi let's
167:18 - create a folder called delete noes and
167:21 - let's create a root. TS so it's the same
167:24 - thing let us do export
167:26 - async function post taking the request
167:30 - to be
167:32 - request and now let's actually get the
167:35 - cons notes ID equals to await request.
167:38 - Json so we get the no ID from the
167:40 - request body and then we can do await DB
167:44 - do
167:45 - delete uh delete from so delete uh
167:52 - notes where equals uh dollar sign notes.
167:56 - ID equals to par in notes ID okay so
168:00 - then we got to just return new next
168:03 - response of sorry new next response
168:07 - of
168:09 - uh okay and passing a status of
168:13 - 200 okay
168:15 - so yeah it's just a simple function to
168:17 - take in the Noe ID and just return it so
168:20 - let me just save it and come back to the
168:22 - button and we can then take the mutation
168:24 - so let's actually convert this into a
168:26 - client component first and we can just
168:29 - take the mutation function so cons
168:31 - delete noes equals to news
168:34 - mutation passing in the mutate function
168:36 - to be async we are going to hit and
168:38 - point right so we do cons response
168:40 - equals to A W exos post post slash API
168:46 - SL sorry SL API
168:49 - SL delete notes right so this is the
168:52 - rout that we created just now right
168:54 - passing in the notes
168:57 - id id right which we receive from props
169:00 - and then we just want to
169:04 - return response. data okay so then if
169:09 - confirm we going do delete uh notes.
169:11 - mutate we could passing undefined
169:13 - because it's not accepting any
169:15 - parameters and then on success we just
169:18 - going to just uh do we going basically
169:22 - route them back to the dashboard so
169:24 - let's get the router so we just do cons
169:26 - router equals to use router from make
169:31 - sure it's from next SL navigation not
169:33 - next
169:35 - router okay and then we're going to do
169:38 - uh router. push
169:41 - dashboard yeah then if there are any
169:43 - errors on error
169:45 - we're just going to console. error error
169:49 - so let's save it and then let's actually
169:51 - import this delete button so come down
169:53 - to your uh notes ID uh to your note page
169:58 - so remember where we put
169:59 - our where do we put our delete button
170:02 - here okay so let's just import the
170:04 - delete button so do delete button right
170:09 - need to pass in the notes ID which will
170:11 - be notes. ID so now let's save it and
170:14 - now have a delete button showing up here
170:17 - so if you press delete you ask us for
170:19 - the confirmation then let's actually add
170:21 - one more thing so we want to disable the
170:24 - button when the delete notes dot is
170:27 - loading so while it's loading we want to
170:29 - disable the button so let's try again so
170:32 - it's going to ask me to confirm when I
170:33 - press okay it's going to try to delete
170:35 - and it will just come back and we can
170:37 - see the note has been deleted so yeah
170:39 - everything works perfectly and yeah I
170:41 - think that's good yeah everything looks
170:43 - exactly the same and I'm pretty happy
170:46 - with what we have completed so far so I
170:49 - think if I'm not wrong that's everything
170:52 - everything you need to know uh about the
170:54 - application all right so um I'm glad I'm
170:57 - very happy that you did this with me
170:59 - it's a very quick and simple build this
171:00 - time not very long but it showcase a lot
171:03 - of the power of artificial intelligence
171:04 - and the open a API so the last step here
171:07 - is I'm going to teach you how to deploy
171:08 - to uh versel right it's going to be very
171:10 - simple so the first step here is come
171:12 - down to github.com New we going to
171:15 - basically push this repository to a new
171:16 - GitHub repo all right so uh I can do is
171:20 - I'm going to expand the screen move the
171:22 - screen here so the repository name you
171:24 - can name it whever you want and going
171:25 - just put ideation D YouTube and you can
171:29 - put it as public or private up to you
171:30 - and just press create
171:32 - repository so after you have created
171:34 - repository you have to follow the the
171:36 - commands here so come back to your vs
171:38 - code come back to your terminal I'm
171:39 - going to stop everything running okay
171:42 - stop everything running here uh yes and
171:46 - then I'm going to do git status to make
171:48 - sure that everything here is added so
171:50 - let's do git at all then get commit D am
171:54 - initial commit so we commit our all
171:57 - changes now we can do git Branch DM so
172:01 - to rename our Branch to main if you have
172:02 - not done so already and then we can add
172:04 - the origin right so basically linking
172:06 - our local repo to the remote repo and
172:09 - lastly we can just run git push d u
172:11 - origin mean to then push our code up to
172:13 - the the the
172:15 - repo so now let if we refresh the page
172:18 - we can see that all changes is up here
172:20 - so that's perfect okay so now let's
172:23 - actually deploy it so there's one more
172:25 - there I think there's uh two more things
172:27 - I to do so come down to your uh create a
172:31 - note rout create notebook root right so
172:34 - to make this into a run on H the H run
172:36 - time right remember the benefits of H
172:38 - runtime it allows your function to run
172:39 - longer and faster so you have to export
172:42 - a runtime export cons run runtime equals
172:45 - to H so if you export this runtime
172:47 - variable uh next year versel will detect
172:49 - it automatically and you will deploy
172:51 - this function on the H runtime instead
172:52 - of the normal nodejs run time okay and
172:55 - one more thing is come down to your uh
172:58 - next config.js and just add the
173:01 - typescript flag right to ignore during
173:03 - ignore the build errors and for the es
173:05 - link to ignore uh during builds to be
173:08 - true so yeah this just for the versal
173:11 - deployment then after that you can just
173:13 - commit it again so I'm going to use the
173:15 - graphic user interface so I'm just going
173:17 - to move H function so just commit it and
173:19 - push it out so this is the last two
173:22 - things I think yeah so if you come back
173:25 - back up here we can refresh and we're
173:26 - able to see our changes uh hopefully
173:29 - let's refresh one more time and yeah so
173:31 - we can see that our fun our comits being
173:33 - done now Edge comit Edge function so to
173:36 - deploy versel is really simple come down
173:38 - to ver.com
173:40 - and come back to the dashboard and add a
173:42 - new project so add new project project
173:45 - and choose your uh report that you have
173:47 - just linked up so just press import and
173:49 - can just name it whatever you want here
173:51 - and then choose the build setting so for
173:54 - the not sorry build the environmental
173:56 - variables so come down to your EnV here
173:59 - so a neat trick for you is press command
174:01 - a or control a if you're on Windows to
174:03 - select everything and then copy it come
174:06 - back to verel and can just paste it in
174:07 - here it's able to copy and detect all
174:09 - your enval variables in here with that
174:12 - you can just press deploy and then
174:15 - everything should be well and in a few
174:16 - minutes uh it should be building and
174:18 - just Deploy on that easily so I'll see
174:21 - you when it's finished building okay so
174:23 - wait one more thing I want to do is uh
174:25 - come back to your come back to your
174:27 - dashboard here come back into your
174:29 - application come on to your settings and
174:32 - for the functions right I want you to
174:33 - choose one that is nearest to you in
174:35 - this case I CH live in Singapore so I'm
174:37 - going to choose Singapore and save it
174:39 - all right so this is just to make sure
174:41 - that the the function the apis uh will
174:43 - be very near you so that the user
174:45 - experience be very fast yeah so that's
174:47 - pretty much it so come back to your
174:49 - deployments and we're just waiting for
174:50 - it to build yeah so I'll see you on the
174:52 - other
174:54 - side okay so it has been deployed
174:56 - successfully so now let us just visit
174:58 - the domain that have he has given us so
175:01 - let's actually try out and see and hope
175:02 - that it works so we can see that yeah
175:04 - not taking assistant or typ is working
175:07 - so let's press get started and it should
175:09 - promise to log in so just log in with
175:11 - your uh
175:13 - account and hopefully it will bring us
175:15 - to the dashboard where we're able to see
175:16 - all notes that we have done okay uh and
175:20 - then we can see the images will show up
175:22 - soon right let's try creating a new
175:24 - notebook let's create cats let's create
175:28 - and hopefully hopefully the age run time
175:31 - will work and does not time out on
175:37 - me okay so it works it works okay that's
175:41 - amazing so we can see that it brings us
175:43 - to the new notebook and we can type
175:44 - whatever you want here like uh press
175:46 - shift a and we can see the AI Auto
175:48 - completion still works perfectly it's
175:50 - deployed up here and yeah we can see
175:52 - that uh it automatically saves it right
175:55 - wait for it to save I can itze it and do
175:58 - everything like that and yeah I think
176:00 - that that looks perfect and if you come
176:03 - back to the homepage and refresh we can
176:06 - see that the DI 2 API should have
176:08 - generated image for us yeah and it's a
176:10 - cute little kidden pause things like
176:12 - that yeah so I'm glad that you are here
176:14 - with this journey so today we learned a
176:16 - lot so let me just recap what we have
176:18 - learned so we learn about next 13 how to
176:21 - style it properly with SH CN how to use
176:23 - the open AI with the di uh generator
176:26 - verel AG runtime I told you how to use
176:28 - drizzo RM to interact with neon DB how
176:31 - to use Firebase storage to actually
176:33 - store your files uh and also the tip tab
176:35 - uh Editor to actually give you the power
176:37 - to create the notion like editor and the
176:39 - versel AI is a ke for all the streaming
176:42 - AI large language model need so um I'm
176:46 - happy that you stay with me so if you
176:47 - enjoy and learn something from the video
176:48 - please like comment and subscribe I put
176:50 - in a lot of effort for this kind of
176:51 - videos and I hope you'll really learn
176:53 - something new and with that thank you
176:55 - for so much for watching and have a good
176:57 - day