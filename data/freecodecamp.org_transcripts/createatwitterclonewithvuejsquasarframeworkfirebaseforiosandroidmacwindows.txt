00:01 - in this video i'm going to show you how
00:02 - to create this beautiful
00:04 - responsive cross-platform twitter app
00:06 - from scratch
00:07 - and get it running and working on five
00:10 - different platforms
00:11 - so we're going to create an ios app that
00:13 - you see here going to create an android
00:17 - app
00:19 - we're going to create a mac version of
00:21 - our app
00:25 - a windows version and we're going to get
00:28 - this running
00:29 - in a web browser as well as a responsive
00:32 - single page application using viewjs
00:35 - quasar framework and firebase this
00:38 - course requires a basic understanding of
00:40 - html css and javascript
00:42 - and knowledge of vue.js would be
00:44 - beneficial and before we get started i
00:46 - just want to give a huge shout out to
00:48 - free code camp for hosting this video my
00:51 - name is danny i'm an indie app developer
00:53 - and creator of a popular cross-platform
00:55 - app called budget
00:56 - and i teach vue.js web development and
00:59 - cross-platform app development
01:01 - on my youtube channel which you can find
01:03 - at danny's dot link slash youtube and
01:05 - the link will be in the description
01:12 - what we're going to do here is create
01:13 - this simple beautiful and responsive
01:15 - twitter clone using vue.js quasar and
01:18 - firebase
01:19 - and it's going to have a simple twitter
01:21 - style layout with a draw on the left
01:23 - hand side
01:24 - and this drawer can be toggled with this
01:26 - button and we have links to our two
01:28 - pages
01:29 - the about page which is just a simple
01:31 - content page
01:32 - and then the home page we can enter a
01:35 - tweet here with a 280
01:37 - character limit so if we try and type
01:40 - beyond that then it will stop us
01:42 - so we can enter a tweet
01:45 - and when we click this button it'll be
01:47 - added to the top of our feed here
01:50 - and we can also delete our tweets and
01:52 - they'll disappear with this
01:53 - nice animation and we can like our
01:55 - tweets as well by clicking this button
01:57 - and it's going to be responsive and have
01:59 - a different layout for mobile
02:01 - you can see the draw disappears and can
02:04 - be toggled again with this button
02:05 - i'm going to be using a firebase cloud
02:08 - firestore database to
02:10 - store all of our tweet data once we've
02:12 - got this
02:13 - running and working in the web browser
02:15 - we're going to generate hybrid apps
02:17 - which can be deployed to
02:18 - all of the different app stores for ios
02:21 - android
02:22 - mac and windows and thanks to the
02:24 - firebase cloud firestore database it's
02:26 - going to have live data sync across all
02:28 - of our devices
02:30 - so if i add a tweet here on the web
02:32 - browser
02:33 - version and we look over here on the ios
02:35 - version
02:37 - we can see that new tweet pop up on the
02:39 - ios version as well
02:40 - and likewise if i delete a tweet on the
02:42 - ios version
02:44 - we see that tweet instantly deleted on
02:46 - the web version
02:47 - as well so how is it possible to create
02:50 - this app for all of these different
02:52 - platforms
02:53 - well it's made possible by quasar
02:55 - framework
02:56 - [Music]
03:00 - so what the flip is quasar framework
03:03 - well it's an incredible new framework
03:04 - which allows you to create a view gis
03:07 - app with a single code base and deploy
03:09 - it to
03:10 - many different platforms so we can
03:12 - deploy it to the web as a single page
03:14 - application
03:15 - a progressive web app or a server-side
03:17 - rendered app we can deploy it to a
03:19 - hybrid mobile app which can be deployed
03:21 - to
03:22 - the different app stores using cordova
03:24 - for both ios and android
03:26 - and we can deploy it to a desktop app
03:28 - using electron
03:29 - for mac windows and linux and it also
03:32 - has
03:33 - a huge material design component library
03:35 - with hundreds of different components
03:37 - such as buttons
03:41 - lists
03:44 - and tables and tons of different form
03:48 - components
03:51 - and you can just click on this button
03:53 - for any component and grab the code
03:55 - and just paste it into your app and
03:56 - start using it and it also has tons of
03:59 - different
04:00 - utilities and plugins such as inbuilt
04:03 - date formatting
04:05 - the ability to store and retrieve data
04:08 - using local storage and also dialog
04:12 - loading and notification plugins which
04:14 - make it really easy to
04:16 - create dialogues and notifications and
04:19 - stuff like that
04:20 - it also has hot reloading on all devices
04:23 - so when you change your work you see the
04:25 - change instantly
04:26 - even when you're developing mobile and
04:28 - desktop apps
04:29 - and it also has platform detection built
04:32 - in
04:33 - which means that you can for example
04:36 - display a particular element or
04:37 - component only on desktop and then
04:39 - display a different element only on
04:41 - mobile
04:42 - or you can fire a particular block of
04:44 - javascript code
04:45 - only on mobile and then a different
04:47 - block of javascript
04:48 - on desktop so quasar is one of the most
04:51 - versatile
04:51 - frameworks out there at the moment
04:53 - especially if your goal is to create an
04:55 - app on multiple platforms
04:58 - [Music]
05:02 - let's get started by creating a new
05:04 - quasar project
05:05 - using the quasar cli so you want to go
05:08 - to the quasar site
05:09 - at quasar.dev and then get started
05:12 - i'm just going to stretch this out a bit
05:15 - and you want to go to quasar cli
05:18 - and install quasar cli and you need to
05:21 - have node installed
05:23 - so you can get that at nodejs.org and
05:26 - you might want the one on the left here
05:28 - once that's installed you can then
05:30 - install the quasar cli with this command
05:33 - so i'm just going to copy that and jump
05:34 - to my terminal which is just running
05:36 - within
05:36 - vs code which is the editor i'm going to
05:38 - be using and you just want to run
05:40 - npm install g at quasar cli
05:44 - and if you have any trouble installing
05:46 - that then you might need to add
05:47 - sudo at the start and i already have
05:49 - this installed so i'm not going to
05:51 - install
05:52 - it but once the quasar cli is installed
05:54 - we can then create a new quasar project
05:56 - with the quasar create command
05:59 - so i'm just going to jump back to my
06:00 - terminal in vs code
06:02 - so you want to make sure you're in the
06:03 - folder where you keep all your projects
06:05 - and then just run quasar create
06:07 - and you want to give it a name i'm going
06:09 - to call it quitter
06:11 - it's going to ask us for some options
06:13 - here i'm going to leave the default
06:15 - project name
06:16 - i'm going to change the product name to
06:17 - quitter
06:19 - i'm going to leave the description and
06:21 - i'll just enter my name as the author
06:23 - and i'm going to choose sas with
06:25 - indented syntax for the
06:27 - css preprocessor and it's asking us for
06:30 - our components and directives import
06:31 - strategy
06:32 - and i'm going to choose auto import
06:34 - because this means that whenever we
06:36 - use a new quasar component in our app it
06:38 - will be
06:39 - imported automatically which makes our
06:41 - life a lot easier
06:42 - and for the purposes of this video i'm
06:44 - going to disable eslint
06:46 - although you might want to consider
06:47 - using that in your own projects
06:49 - especially if you're working in teams
06:50 - i'm not going to enable any other
06:52 - options so i'm just going to hit enter
06:54 - here
06:54 - i'm going to choose yes use npm to
06:57 - install the dependencies
06:58 - okay it's finished creating our project
07:00 - and if we scroll up a bit it tells us
07:02 - how to launch it we just need to
07:04 - cd into the folder and run quasar dev
07:07 - and i can see the folder it's created
07:09 - here
07:09 - quitter so i'm just going to drag that
07:11 - into vs code
07:14 - then open up the terminal and just run
07:16 - quasar
07:17 - dev and we can now see our basic quasar
07:21 - starter app running in the browser
07:23 - and so by default we just have a simple
07:24 - app with a simple layout we have a draw
07:26 - along the side which can be toggled with
07:28 - this button
07:29 - we have a header along the top and we
07:31 - just have a simple page with this image
07:34 - and we have some basic responsiveness
07:36 - out of the box so if i scale this down
07:38 - you can see the left draw disappears and
07:40 - again can be toggled with this button
07:47 - let's take a quick look at the folder
07:49 - structure of this quasar project
07:51 - so in the root of our project we have
07:52 - this quasar.com.js file
07:55 - and this is the configuration file for
07:57 - our project
07:58 - and this allows us to do things like
08:00 - install icon libraries
08:02 - and set the view router history mode to
08:05 - hash or history
08:06 - and we can also install animations here
08:09 - and plugins
08:11 - and also configure our different modes
08:12 - such as ssr
08:14 - pwa electron code over etc
08:17 - and the main folder we're concerned with
08:18 - is this source folder
08:20 - so in the root of that we have this
08:22 - index.template.html
08:24 - so this is our html page and we don't
08:26 - typically need to change this much
08:28 - and it just has this one div in the body
08:31 - and this is where our main view
08:32 - component will be loaded which is this
08:34 - app.view file so this is our root view
08:37 - component
08:38 - and this will load the layout component
08:40 - of our app here
08:42 - which brings me to the layouts folder so
08:44 - this is where the layout of our app can
08:46 - be found this main layout.view file
08:49 - and the layout is basically all of the
08:51 - elements that surround the pages of our
08:53 - app
08:53 - so in this case this is the drawer along
08:55 - the side and the header along the top
08:57 - and within our layout we load
08:59 - our pages and right now we just have
09:01 - this one page with this
09:02 - image in the middle and if i scroll down
09:05 - to this
09:06 - q page container component we have this
09:08 - root of view component here
09:10 - and that's where our pages will be
09:11 - loaded which brings me to the pages
09:13 - folder
09:14 - so we'll place all of our pages in here
09:16 - and right now we just have an error page
09:18 - and this index.view page
09:20 - which is this page here with just this
09:22 - one image on it and we also have this
09:24 - public folder where we can place images
09:27 - and css files and things like that
09:29 - and when we build our app anything in
09:31 - this folder will be available
09:32 - at the root so for example this favicon
09:34 - will be available
09:35 - at slash favicon.ico and then back to
09:38 - our source folder we also have an assets
09:40 - folder where we can also place images
09:42 - and stuff like that
09:43 - however everything in this folder will
09:44 - be processed by webpack so you might
09:46 - find that images
09:47 - are converted to base64 and stuff like
09:50 - that then we have this boot folder where
09:52 - we place boot files
09:53 - and a boot file basically allows us to
09:55 - initialize a plugin or a package
09:58 - before our app starts up and we will be
10:00 - adding a boot file later on for
10:02 - firebase then we have a components
10:05 - folder where we can place all of our
10:06 - view components
10:07 - and a css folder where we have a global
10:10 - css file
10:11 - or sas file and we also have this
10:14 - quasar.variables.sas file as well which
10:16 - we can use to customize the colours of
10:19 - our theme
10:19 - and we will change our theme a little
10:21 - bit later on
10:22 - finally we have a router folder where we
10:25 - configure our router
10:26 - and if we open up this routes.js we can
10:28 - see this routes array where we're
10:30 - configuring all of our routes
10:32 - so you can see it loads our layout file
10:34 - at the root and we configure all of our
10:36 - pages within this
10:37 - children array and right now we just
10:39 - have one path
10:40 - to our index.view file which is this
10:43 - page that we see here with just this one
10:45 - image on it
10:47 - [Music]
10:50 - let's work on the layout of our app and
10:52 - if we look at the twitter site
10:54 - it has this two draw kind of layout with
10:57 - one on the left and one on the right and
10:58 - all of our tweaks and stuff
11:00 - in the middle and quasar has a layout
11:02 - builder that we can use to
11:03 - generate a layout so let's see if we can
11:05 - use that to generate a layout that's
11:07 - similar to the twitter site so i'm going
11:09 - to jump to the quasar site
11:11 - and then layout and grid and then layout
11:15 - builder
11:16 - and it opens up this layout builder for
11:18 - us and we basically just have to choose
11:20 - all of the options we want
11:21 - so we do want a cue header so we're
11:24 - going to leave that enabled
11:25 - we don't need a footer so i'll disable
11:27 - that we want a left side drawer
11:30 - and we want a right side drawer and we
11:32 - don't need these navigation tabs so i'll
11:33 - disable this option
11:35 - and i'll click on continue and if we
11:38 - look at the twitter site
11:39 - the header doesn't go all the way along
11:41 - the top it's just at the top of this
11:42 - middle content column so if i jump back
11:45 - to layout builder
11:46 - we can play around with these options
11:48 - here to generate a similar layout
11:50 - so these options on the left are related
11:52 - to the left
11:53 - draw and the options on the right for
11:55 - the right draw so if i click on this
11:57 - l option here we can see that the left
11:59 - drawer now goes all the way up to the
12:01 - top
12:02 - just like the twitter site and if we
12:05 - choose this little
12:06 - r option on the right we see the right
12:08 - draw do the same thing so this is the
12:10 - kind of layout we want with
12:11 - our header just at the top of the middle
12:13 - column and i don't really like this drop
12:15 - shadow
12:15 - on the header so under this header bit
12:18 - i'm going to change this
12:19 - separator type to bordered so we just
12:21 - have a
12:22 - bordered header then i'm just going to
12:23 - scroll down and click on continue
12:26 - i'm just going to disable this visible
12:28 - footer option because we're not going to
12:30 - have
12:30 - footer then we can just click on export
12:33 - layout
12:34 - and it gives us an entire layout file
12:37 - so i'm just going to copy this and i'm
12:39 - going to jump to our layout file which
12:41 - is in source
12:42 - layouts and main layout.view i'm just
12:45 - going to select everything here
12:46 - and paste over our new layout and if we
12:49 - hit save
12:50 - we can see our app now has the kind of
12:51 - layout that we're looking for
12:54 - [Music]
12:57 - let's make our header look a bit more
12:59 - like the twitter header
13:01 - and the first thing i'm going to do is
13:02 - change our primary color to the
13:04 - twitter blue color and our current
13:07 - primary color is this blue color we see
13:09 - in the background of the header here so
13:11 - i'm going to jump to source
13:13 - css and quasar.variables.sas
13:16 - and we can use this file to customize
13:19 - our theme colors
13:20 - and we can see our primary color here so
13:22 - i'm going to paste in the twitter color
13:24 - which i have in my clipboard which is
13:26 - just 1da
13:28 - 1 f2 and i'll save that and we now see
13:31 - our header change
13:32 - to the twitter blue color uh let's work
13:35 - on this header a little bit
13:36 - so i'm going to jump back to main
13:38 - layout.view um we can see our header
13:40 - here it's this cue header
13:42 - component and i'm going to remove this
13:44 - quasar image which is this
13:45 - q avatar component so i'll get rid of
13:48 - that and i'm going to change this title
13:49 - which is in this queue
13:51 - toolbar title component to quitter
13:55 - save that and i don't want this right
13:57 - hand sidebar to be
13:58 - toggleable so i'm going to remove this
14:00 - button here which is this
14:02 - cue button component here so i'll get
14:04 - rid of that and save that
14:05 - and i want this header to have a white
14:07 - background with black text
14:09 - like the twitter header and if we jump
14:11 - to the quasar site and then style on
14:14 - identity and then color palette
14:16 - then we have all of these different
14:18 - colors that we can use in our app
14:21 - and so if we want to set our text or our
14:23 - foreground to a particular color then we
14:25 - can just use a class such as text
14:27 - dash and then the name of the color up
14:29 - here
14:30 - or if you want to set a background color
14:32 - we can just use a class such as
14:33 - bg dash and then the name of the color
14:37 - and we see all of these different colors
14:39 - and we don't see them here but we also
14:41 - have
14:41 - equivalent classes for black and white
14:44 - as well
14:44 - and if we look at our cue header
14:46 - component here this currently has a
14:48 - class of bg-primary
14:50 - which is giving this header a background
14:52 - colour of our primary colour which we
14:54 - set in our theme file before and a class
14:56 - of text
14:57 - dash white which is giving it this white
14:59 - text color
15:00 - so i'm going to change this background
15:02 - class to bg dash
15:03 - white to give it a white background
15:06 - color
15:07 - and i'll change this other class to text
15:09 - black
15:10 - to give the text a black color and i
15:13 - also want to make this title bold
15:14 - because it's bold in the twitter header
15:17 - and if we jump to the quasar site
15:19 - and then style an identity and
15:22 - typography
15:23 - then we have all of these different
15:24 - classes we can use to style our text
15:27 - and if we want to make our text bold we
15:29 - can use this text
15:30 - weight bold class so i'm going to jump
15:34 - to this q
15:35 - toolbar title component which has our
15:37 - title
15:38 - i'll add a class of text dash weight
15:42 - dash bold and save that and our heading
15:44 - is now bold
15:46 - so this header is now looking pretty
15:47 - similar to the twitter header
15:54 - let's make this left draw look like the
15:57 - twitter left draw
15:58 - with a nice logo at the top and then
16:00 - links to all of our pages
16:02 - so let's add a logo to the top first and
16:04 - there's an icon component that we can
16:06 - use for that so i'm going to jump to the
16:08 - quasar site
16:09 - and then a few components and icon
16:14 - and so we can use this icon component so
16:17 - i'm just going to click on view source
16:18 - and grab the first one
16:22 - and we'll add it to this left draw and
16:24 - this is our left draw here this q
16:26 - draw component so i'll get rid of this
16:28 - comment and just paste in that icon
16:30 - save that and we can now see that icon
16:33 - on the page
16:34 - and if i jump back to this icon page on
16:36 - quasar
16:37 - we can use all of these different icon
16:39 - libraries material icons font awesome
16:41 - ionicons and all of the rest and we can
16:44 - use the material icons out of the box
16:47 - so if i click on this link takes us to
16:49 - the material icons page
16:51 - and so we can use any of these icons and
16:54 - all we need to do
16:55 - is replace this name prop
16:58 - with the icon name that we see here so
17:01 - if we want to use this
17:02 - accessibility icon we can just change
17:04 - this name prop to
17:05 - accessibility and save that
17:09 - and we can see the icon update so we can
17:12 - use all of the material icons out of the
17:14 - box
17:14 - but the other icon libraries need to be
17:16 - enabled in our config file
17:18 - and i want to use font awesome for our
17:21 - logo
17:21 - so i'm going to jump to our config file
17:23 - and this is just in the root of our
17:25 - project
17:25 - it says quasar.com.js and i'm just going
17:28 - to search for icons
17:29 - and we can see in this extras array here
17:32 - all of these different icon libraries so
17:35 - to add the
17:36 - font awesome icon library we just need
17:38 - to uncomment this line
17:39 - and save it and we can now use the font
17:41 - awesome icons as well
17:43 - so i'm going to jump to the font awesome
17:45 - page
17:46 - i'm going to search for bird and scroll
17:49 - down
17:50 - and this dove icon looks pretty good so
17:52 - i'm going to click on that
17:54 - and if we look at this example markup
17:56 - here these classes that we see here
17:58 - are what we need to use in this name
18:00 - prop so i'm just going to copy this
18:02 - jump back to our app and i'm just going
18:05 - to paste in that
18:07 - markup i just copied underneath this
18:08 - icon then i'm going to copy these two
18:11 - classes and paste them into this name
18:13 - prop and then just get rid of this
18:15 - i tag and save that and we can now see
18:19 - our dove icon
18:20 - on the page however i want this icon to
18:22 - be much bigger and i want it to be
18:24 - our primary blue color as well and if we
18:26 - jump back to the icon page on quasar
18:29 - and we jump down to this q icon api
18:33 - all of the components in quasar have
18:35 - this api section
18:37 - which tells us which props slots and
18:39 - events we can add
18:40 - to each component so if i jump to style
18:44 - then we have this size prop and we can
18:47 - set this to
18:47 - a pixel value or a rem value
18:51 - or a generic name such as xs for extra
18:53 - small
18:54 - or md for medium so let's use this size
18:57 - prop on our icon
18:58 - i'm going to split the attributes on
19:00 - this icon by using the
19:02 - split html attributes extension which
19:04 - you can get from the
19:05 - extensions page in vs code i'm going to
19:08 - add this
19:09 - size prop and i'm going to set it to lg
19:11 - for large
19:13 - and if i save that our icon is now nice
19:16 - and large
19:17 - and i also want it to be our primary
19:18 - color so i'll jump back to the
19:20 - api section here and we have this color
19:23 - prop
19:24 - and we can just set it to any of the
19:25 - colors which i showed you before on the
19:27 - color palette page
19:28 - we want to set it to our primary color
19:31 - so i'm going to add this color prop
19:33 - i'll just set that to primary and save
19:36 - that
19:37 - and the icon now has our primary color
19:40 - okay let's add some padding around this
19:41 - icon because it's currently squished up
19:43 - into the corner
19:44 - and if we go to the quasar site and
19:48 - style on identity and spacing
19:51 - then we have these really handy classes
19:53 - that we can use to add
19:55 - padding and margin to our elements and
19:57 - we have some examples down below
19:59 - so if we wanted to add a small amount of
20:01 - padding in all directions we could just
20:03 - add q
20:04 - dash p for padding a for all directions
20:07 - dash sm for small or if we just wanted
20:09 - to add padding on the left we could add
20:11 - q dash p l for padding left and then
20:14 - dash
20:14 - sm or dash lg so i'm just going to add a
20:17 - medium amount of padding around this
20:19 - icon so our icon is here so i'll add a
20:22 - class
20:23 - of q p for padding a for all directions
20:27 - dash md for medium and i'll save that
20:29 - and that's looking a lot better
20:31 - and we also have equivalent classes for
20:33 - margin so if we wanted to add margin all
20:35 - around we would just change this p
20:37 - to an m but i'm going to leave this as
20:40 - padding
20:40 - okay let's add some navigation items so
20:43 - i'm going to jump back to the quasar
20:44 - site
20:45 - uh view components and list
20:49 - and list items i'm going to scroll down
20:51 - a bit
20:53 - and i want our navigation items to look
20:55 - something like this this top item here
20:57 - with an icon on the left and some text
21:00 - because this is what the
21:01 - navigation links on twitter kind of look
21:03 - like so
21:04 - i'm going to click on view source here
21:07 - and i'm just going to copy all of this
21:09 - cue list component
21:15 - i'm going to paste it under our icon
21:17 - here i'll just fix
21:18 - the indentation and i'll save that and
21:21 - we now see
21:21 - this list on the page so each of these
21:24 - list items
21:25 - is in a queue item component and i'm
21:28 - only interested in this top
21:30 - one here this one here so i'm just going
21:32 - to remove all of the other
21:34 - cue item components and also all of
21:36 - these cue separators as well
21:38 - so i'll get rid of all of those and save
21:41 - that and we now just have this
21:42 - one item and this list currently has a
21:45 - border around it
21:46 - and that's being added by this bordered
21:48 - prop on the cue list so i'll get rid of
21:50 - that prop
21:51 - save that and we see the border
21:53 - disappear and i'm going to change the
21:54 - label on this item
21:56 - to home because i'm going to make this a
21:57 - link to our home page
21:59 - so i'll change this text here icon as
22:02 - avatar to
22:03 - home save that and i want to change this
22:05 - icon to a little house icon or something
22:09 - so i'm going to jump to the material
22:10 - icons page we opened before
22:12 - search for home and this icon looks
22:15 - pretty good so we just need to use the
22:16 - class
22:17 - home and if we look inside this cue item
22:20 - here we have this
22:22 - cue icon with the name set to bluetooth
22:26 - so i'm just going to change that to home
22:28 - and save that
22:29 - and this is looking pretty good i just
22:30 - want to increase the size of this icon a
22:32 - little bit
22:33 - so again i'll add a size prop uh let's
22:36 - try setting this to medium so
22:37 - md save that and that looks pretty good
22:40 - and i also want to make this text here
22:41 - big and bold
22:42 - just like the navigation items on the
22:44 - twitter site
22:46 - so i'm going to jump back to the
22:48 - typography page in style and identity
22:51 - and typography
22:53 - let's try this h6 class so we just need
22:56 - to add a class of text
22:58 - h6 to use this style so we'll add that
23:01 - to this cue
23:02 - item section here where our text is
23:05 - so just add class text h6
23:10 - and i'll save that and that's looking
23:12 - pretty good and i also want it to be a
23:14 - bit bolder
23:15 - so we can just use the class we used
23:16 - before text dash weight
23:19 - dash bold save that and this is looking
23:21 - pretty nice now
23:22 - pretty similar to the twitter navigation
23:25 - items
23:26 - so i want this to link to our home page
23:29 - so i'm going to jump back to
23:30 - the list and list items component page
23:34 - and jump down to the queue item api
23:37 - and in this behavior section we can add
23:39 - this to prop
23:40 - to give our item a link so i'm going to
23:42 - add that to
23:43 - this cue item here i'm going to split
23:46 - the attributes again
23:48 - and add this to prop i'm just going to
23:50 - set this to
23:51 - forward slash which is the root of our
23:53 - app the home page
23:55 - so i'll save that and this should now
23:57 - link to our home page
23:58 - and the text has changed to blue because
24:01 - this is now currently the active link
24:03 - because we're on the home
24:04 - page so let's duplicate this cue item
24:06 - and create a link for our about page
24:08 - which we're going to create later on
24:10 - so i'm just going to duplicate this cue
24:12 - item and i'll set the path
24:14 - to slash about and i'll change the text
24:17 - here
24:17 - to about and save that
24:20 - and i want to use a different icon here
24:22 - so i'll jump to the material icons page
24:25 - let's just search for help and we can
24:29 - just use this icon here so we just need
24:30 - to use the name help
24:32 - so this cue icon here i'm going to
24:33 - change the name to help
24:35 - and save that and that's looking pretty
24:38 - decent
24:38 - and now that these queue items are links
24:40 - because of this to prop
24:42 - we should now be able to remove this
24:44 - color prop from our icons and they
24:46 - should be
24:47 - colored automatically because i'd like
24:49 - the icon to be black when it's not
24:51 - currently the active link
24:52 - just like the text is black when it's
24:54 - not the current active link
24:56 - so i'm going to remove both of these
24:57 - color props from both of these
25:00 - cue icons and save that and this
25:03 - inactive icon now changes to black later
25:06 - on when we create the about page and we
25:08 - jump to
25:09 - the about page we should see this icon
25:11 - and this text changed to blue
25:13 - and this home icon and text change to
25:15 - black and finally let's make this draw a
25:17 - little bit less wide because it's quite
25:19 - a bit wider than
25:20 - the left draw on the twitter site and if
25:23 - we jump to the quasar site
25:25 - and layout and grid
25:28 - and layout draw and jump down to the
25:32 - draw
25:32 - api and then jump to style
25:35 - then we have this width prop that we can
25:37 - use to set the width
25:39 - of the draw so let's add this to our
25:41 - draw
25:43 - i'm just going to split the attributes
25:44 - on this q drawer
25:46 - and add this with prop and this is
25:49 - expecting a number not a string so i'm
25:51 - going to bind to
25:52 - this width prop by adding a colon
25:56 - at the start and i'm going to set this
25:57 - to 283
26:00 - and i'll save that and our draw is now a
26:03 - little bit narrower
26:05 - [Music]
26:09 - let's put some stuff in this right
26:10 - drawer now because it's looking a little
26:12 - bit sad so if you look at the twitter
26:13 - site
26:14 - over on the right here we have a search
26:16 - bar and then a kind of a news feed
26:18 - so let's add a search bar first so i'm
26:21 - going to jump to the quasar site
26:24 - view components and form components and
26:27 - input text field
26:29 - i'm going to scroll down
26:33 - and i'd like something like this with an
26:34 - icon over on the left
26:36 - although we're going to use a search
26:38 - icon so i'm going to click on
26:40 - view source and just grab this first
26:43 - queue input component copy that
26:47 - and we'll paste it to the top of our
26:48 - right drawer
26:50 - and the right drawer is here this q draw
26:52 - component
26:53 - so i'll paste that q input there and
26:55 - save that and i'm going to add a bit of
26:57 - margin around this
26:58 - so i'm going to split the attributes on
27:00 - this q input
27:02 - and i'll remove this v model because
27:03 - we're not going to connect this to
27:05 - anything and a lot of class
27:07 - of q dash m a for margin all
27:11 - dash md for medium we now have a little
27:14 - bit of margin around it
27:16 - and i would like this to be rounded and
27:19 - outlined
27:20 - instead of square and filled and if we
27:22 - jump back to the quasar site
27:24 - and jump down to the api section
27:27 - and style scroll down a bit
27:31 - so we have an outline prop we can use
27:33 - for an outline design
27:35 - and a rounded prop we can use to give
27:38 - our input a bit of border radius
27:40 - so i'm going to replace these filled and
27:42 - square props
27:44 - with outlined and rounded save that
27:48 - and that's looking pretty good i'm going
27:50 - to add a placeholder to this
27:53 - which just says search quitter
27:56 - save that and i'd like this to be a
27:58 - little bit smaller
27:59 - and if we jump back to the api then we
28:02 - have this dense prop which we can use
28:04 - which makes certain components a little
28:06 - bit smaller so i'll add this dense prop
28:08 - as well
28:09 - and it's now a little bit smaller and we
28:11 - need to replace this
28:12 - icon and the icon is here so i'll change
28:16 - this name to
28:17 - search which is a material icon we can
28:20 - use
28:21 - and this is looking pretty good now so
28:23 - let's add a little news feed here
28:25 - so i'll jump back to the quasar site
28:28 - and list and list items and i'll scroll
28:32 - down and look for something that looks
28:33 - like
28:33 - a news feed so this looks pretty good
28:36 - this top item here so i'm going to click
28:38 - on view source
28:40 - and i'll just copy this first queue item
28:43 - and this opening
28:44 - cue list tag and we'll paste that under
28:47 - our input fix the indentation
28:49 - we need to add the closing cue list tag
28:52 - so i'll add that down here
28:54 - save that and i don't want this border
28:56 - on the list so let's remove this
28:57 - bordered prop
28:58 - uh let's change the text of these
29:00 - headings here
29:01 - this first line could be like a category
29:04 - such as
29:05 - politics so i'll change the text in
29:08 - there to let's say
29:09 - education and this second item i'll just
29:12 - put some text in there something amazing
29:16 - happened save that and i'd like this
29:18 - education text to be
29:20 - kind of a gray color like we see here
29:23 - so a lot of class to this education
29:25 - label
29:27 - of text gray which is one of those
29:29 - colors you can find on the color palette
29:31 - page we looked at before
29:32 - save that and i want this second heading
29:35 - to be bold
29:36 - so a lot of class to that as well of
29:39 - text
29:40 - weight dash bold same one we used before
29:43 - okay this is looking pretty good so i'll
29:44 - duplicate this cue item a couple of
29:46 - times
29:47 - so we have a few items save that
29:50 - and i'd like to have a little line
29:52 - between each item
29:53 - and if we jump back to the list and list
29:55 - items page and down to the cue list api
29:59 - and style no it's in content actually
30:03 - we have this separator prop we can use
30:04 - to add a separator between
30:06 - each item so we want to add that to the
30:09 - cue list component
30:12 - so i'll add that here separator
30:15 - save that and we now see a little line
30:17 - between each item
30:19 - and i'd like to have a little bit more
30:20 - padding within each of these
30:22 - cue items so i'm going to select each of
30:25 - these queue items
30:26 - do a multiple selection and add a class
30:29 - to each one
30:30 - of q pa for padding all dash
30:33 - md for medium and we now have a little
30:37 - bit more space
30:38 - within each of these items okay i'm
30:40 - pretty happy with this layout for now
30:42 - let's see how it looks on mobile i'll
30:44 - scale this down
30:45 - and yeah it's looking pretty good
30:47 - however on the twitter mobile app
30:49 - we actually see the twitter logo here at
30:51 - the top in the middle
30:53 - instead of some text here so let's do
30:56 - the same thing on our app
30:57 - so on desktop we'll see some text here
31:01 - and on mobile we'll hide the text and
31:04 - display
31:05 - our logo at the top instead
31:08 - [Music]
31:12 - okay let's make this title here in our
31:14 - header only appear on larger displays
31:17 - and quasar has some responsive classes
31:19 - that we can use
31:21 - to show our hide different elements on
31:24 - different
31:24 - screen sizes so i'll jump to the quasar
31:26 - site
31:28 - and style an identity
31:32 - and visibility and i'll scroll down to
31:35 - window width related so in quasar we
31:38 - have five different breakpoints
31:40 - xs sm md lg and xl
31:44 - and it tells you the width thresholds of
31:47 - these
31:48 - break points here and you can override
31:50 - these default thresholds
31:52 - and it tells you how to do that on this
31:54 - sas scss
31:55 - variables page well anyway we have some
31:57 - classes that we can use with these break
31:59 - points
32:00 - so if we want something to only display
32:02 - on extra small
32:03 - windows then we can just add this xs
32:06 - class to the element
32:07 - and the same for all the other
32:09 - breakpoints and if we scroll down a
32:11 - little bit
32:11 - says here you can also show some dom
32:14 - element or component
32:15 - if it's lower than one of these sizes
32:18 - same for
32:18 - greater than one of these sizes just
32:20 - attach lt dash or gt
32:23 - prefixes so if we use a class such as
32:26 - lt-md
32:28 - to an element then that element will
32:29 - only be displayed on
32:31 - windows which are smaller than the
32:33 - medium breakpoint
32:34 - so only on xs and sm screen sizes
32:38 - so i'm going to jump back to our app
32:40 - let's find this
32:41 - title that's in our header so our q
32:44 - header is here and here's our title
32:47 - so i'm going to wrap this text in a span
32:51 - and i'll add a class of gt-sm
32:56 - i only want this text to appear if the
32:58 - window is greater than the
33:00 - small break point so in other words only
33:03 - show this text on medium
33:04 - large and extra large displays so i'll
33:07 - save that
33:08 - and if we scale down our browser then we
33:11 - see that text disappear
33:13 - scale it back up and it reappears again
33:16 - okay so let's add our logo up here but
33:19 - only on
33:19 - mobile devices so i'm going to grab the
33:23 - icon that's already in our left drawer
33:25 - up here
33:27 - and that icon is here so i'll copy that
33:29 - and i'll paste it after this span
33:31 - indent that i'll add a visibility class
33:34 - here
33:34 - so we only want to show this on screen
33:36 - sizes that are less than medium
33:39 - so i'm going to add lt-md and save that
33:42 - and if we scale this down yeah we can
33:44 - see that logo appear
33:46 - scale it back up and it disappears again
33:48 - so i'll just scale this back down again
33:50 - i want this to be a little bit smaller
33:52 - up here so this size prop i'm going to
33:55 - set that to
33:56 - sm for small and i also want this to be
33:59 - in the center of the header
34:01 - quasar does have some positioning
34:03 - classes that we can use stretch this out
34:05 - a bit if we go
34:06 - to style and identity positioning
34:09 - so we have classes such as this absolute
34:11 - center class
34:13 - which we could use so i'll just add that
34:15 - to this icon
34:16 - absolute dash center save that and this
34:19 - looks great
34:20 - here however for devices such as the
34:23 - iphone 10
34:24 - 11 and 12 the header is actually a lot
34:26 - taller than this
34:27 - because it adds extra space for the
34:30 - notches on those devices
34:32 - and if we use this class it will also
34:34 - put this icon in the vertical center as
34:35 - well
34:36 - so it ends up being up in the middle of
34:38 - the
34:39 - header somewhere up here so instead of
34:41 - using this class
34:42 - i'm gonna add a custom class to this
34:46 - icon
34:46 - we could call it header dash icon
34:50 - and we'll just add some custom css to
34:52 - put this in the center
34:54 - so i'm going to jump down to the bottom
34:55 - of this file
34:57 - and add a style section with the line
35:00 - set to sas
35:02 - and we'll target this header icon class
35:05 - and i'm going to set the position to
35:07 - absolute
35:09 - i'm going to set the bottom to zero
35:13 - to put it right at the bottom then i'm
35:14 - going to set the left to
35:16 - 50 percent and then to pull it back
35:19 - into the center i'm going to use
35:21 - transform
35:23 - and i'm going to set translate x to
35:26 - minus 50
35:27 - and save that and the icon is now in the
35:30 - middle
35:31 - so we now have a different header for
35:33 - mobile
35:34 - and desktop okay so i'm pretty happy
35:37 - with this layout now so we're almost
35:38 - ready to start working on our pages
35:40 - but before we do that let's set up some
35:42 - pages and routes
35:45 - [Music]
35:48 - let's set up some pages and routes for
35:51 - our home
35:52 - and about pages because right now if we
35:54 - look at our
35:56 - two items in our left draw here this
35:59 - home item is linking to the path
36:01 - slash which is working well this about
36:04 - item is linking to the path
36:05 - slash about and we haven't set up a
36:08 - route for that yet so if we click on
36:09 - about we just get this
36:10 - error page which by the way is just this
36:14 - error 404.view file in the pages folder
36:18 - and this isn't much fun and first of all
36:21 - i'm just going to open up this page we
36:23 - see here
36:23 - which is in source pages index.view
36:27 - and i'm going to remove these flex
36:28 - classes here because i don't want
36:30 - everything to be in the center
36:31 - on this page and then i'm just going to
36:33 - remove this image as well
36:36 - and for now i'm just going to put h5 in
36:38 - here which says home
36:40 - and i'll change the name of this
36:41 - component as well to
36:43 - page home to make it a bit more clear
36:46 - what this is
36:47 - and i'll save that and i'll also rename
36:50 - this page
36:52 - so i'll change it from index.view to
36:56 - pagehome.view to make it a bit more
36:59 - clear what it is
37:00 - and this now breaks our app because if
37:02 - we go to our roots
37:04 - file in source router roots.js
37:08 - we can see our root here and it's
37:10 - currently looking for a component called
37:12 - index.view so we need to change this to
37:15 - page
37:15 - home.view because we just renamed it
37:18 - save that
37:19 - and that's now working again and let's
37:22 - duplicate this route
37:24 - and set up a route for our about page so
37:26 - the path
37:27 - is going to be slash about uh let's
37:30 - point this to a page called
37:32 - pageabout.view so i'll change this to
37:34 - page
37:35 - about.view and save that and this breaks
37:38 - our app again because this page doesn't
37:39 - exist yet
37:41 - so i'm going to duplicate pagehome.view
37:44 - and if you don't see this option here
37:46 - this duplicate file or directory option
37:48 - this is being added by the duplicate
37:50 - action extension which you can find in
37:52 - the extension store
37:55 - and i'm going to duplicate this and call
37:57 - it page
37:58 - about dot view
38:01 - i'll open that up and change the text in
38:04 - here to about
38:05 - and i'll change the component name to
38:07 - page about and save that
38:10 - let's see if this is working yep we can
38:12 - now navigate between both of our pages
38:16 - however we have a little issue with our
38:18 - active classes
38:19 - on these navigation items here when
38:21 - we're on the home page
38:22 - the home link is active which is okay
38:25 - but if we jump to the about page
38:27 - the about link becomes active but the
38:29 - home link stays
38:30 - active as well and we can't fix this if
38:33 - we go to the quasar site
38:36 - view components and list and list items
38:40 - and jump down to the queue item api then
38:44 - we have this
38:44 - exact prop which we can add to our queue
38:47 - items
38:48 - which is an equivalent to view routers
38:50 - exact property
38:52 - which means that the active classes will
38:55 - only be added to these
38:56 - links when we're on the exact route that
39:00 - they
39:00 - refer to so i'll jump to main
39:03 - layout.view
39:05 - and add this exact prop to both of these
39:08 - queue items
39:10 - and i'll save that and this seems to be
39:13 - fixed now
39:15 - okay our pages are set up however on the
39:18 - twitter site
39:19 - if we look at the header it doesn't
39:21 - actually display twitter up here
39:23 - it displays the name of the current page
39:25 - so if we're on the homepage it says home
39:27 - and if we're on the notifications page
39:29 - it says
39:30 - notifications so let's do the same thing
39:33 - here
39:33 - instead of displaying quitter and what
39:36 - we can do is we can jump to our roots
39:38 - file
39:39 - and in fact i'm just going to split this
39:42 - up onto multiple lines
39:44 - so it doesn't get too messy and what we
39:46 - can do is add a name property
39:48 - to each of these like this
39:52 - and we can set the homepage route to
39:55 - home
39:56 - on the about page root we can set this
39:58 - name property to about
40:00 - i'll save that and we can now access
40:04 - these properties
40:05 - anywhere within our app by using the
40:07 - dollar root object
40:09 - so if we now jump to main layout.view
40:11 - and our header
40:12 - which is here and here's where we're
40:15 - spitting out that quitter
40:17 - text what we can do is replace this with
40:20 - double curly braces
40:22 - and then dollar root and then doc name
40:25 - so i'll save that and we now see home in
40:28 - the header and if we jump to the about
40:29 - page
40:30 - we see about okay so we're ready to
40:33 - start working on our pages now
40:34 - uh let's work on the about page first
40:36 - because this is going to be
40:38 - nice and easy
40:40 - [Music]
40:44 - okay let's set up our about page so we
40:47 - want to go to source pages and page
40:49 - about.view
40:51 - i'm just going to add a heading and some
40:53 - text so i'm going to get rid of this h5
40:56 - and i'm going to add a h4 with the text
40:58 - about
40:59 - quitter and then i'm just going to add a
41:02 - paragraph
41:03 - with some lorem ipsum and i'll duplicate
41:06 - that paragraph so we've got two
41:07 - and we could do is some padding on this
41:09 - page
41:11 - so we can use the same classes we used
41:12 - before so i'll add a class to the q
41:14 - page component and set this to q
41:17 - p a dash l g so we have a large padding
41:21 - on this page
41:23 - i'm going to remove the top margin from
41:26 - this heading because we have quite a lot
41:27 - of space up here
41:29 - so this h4 i'll add a class of
41:32 - q mt for margin top dash none
41:35 - for zero margin and i'll also reduce the
41:39 - bottom margin a little bit
41:41 - so i'll add a class of q dash m b for
41:43 - margin bottom
41:44 - dash md for medium and i also want this
41:47 - heading to
41:48 - be bold so i'll add a class of text dash
41:51 - weight dash
41:52 - bold save that and i'd like this
41:54 - paragraph text to be a little bit bigger
41:57 - so i'm going to jump to the quasar site
41:59 - and
42:00 - style an identity and typography and
42:03 - this text
42:04 - body one class should do the job so i'll
42:06 - copy that class
42:08 - and i'll surround these paragraphs in a
42:10 - div with that class
42:12 - and i'll just move those in there and
42:14 - save that okay this is looking pretty
42:16 - good we're now ready to
42:17 - start working on our homepage and start
42:20 - adding the real guts of our app
42:23 - [Music]
42:27 - let's start working on our home page so
42:29 - we need some kind of input at the top
42:31 - here where we can add a tweet
42:33 - and if we look at the twitter site we
42:35 - have an input here with a placeholder
42:37 - that says what's happening
42:38 - we have an avatar over on the left and
42:41 - we have a character counter thing which
42:43 - stops us
42:44 - typing too many characters and we have a
42:46 - submit button here as well
42:48 - so let's see if we can find something
42:50 - similar on the quasar site
42:52 - so i'm going to go to view components
42:55 - form components and input text field
42:58 - and i'm going to scroll down and see if
42:59 - i can find something nice
43:01 - so this is kind of what we want this
43:04 - input has an avatar on the left
43:06 - it has a character counter here which
43:08 - stops us typing too many characters
43:10 - and it has a submit button over on the
43:12 - right here so this is
43:14 - number one two three four five six
43:17 - seven eight nine ten the tenth one down
43:20 - so i'll click on
43:21 - view source and grab the tenth one down
43:25 - so one two three four five six seven
43:28 - eight nine and ten
43:32 - so i'll grab this q input here copy that
43:36 - and paste it to the top of our home page
43:39 - which is in source pages page home.view
43:43 - and i'll just paste it over this h5
43:47 - fix the indentation and save that we
43:49 - could do with a bit of space around this
43:52 - so i'm going to surround this cue input
43:54 - in a div and i'll add some padding
43:56 - classes to this
43:58 - and we can actually specify vertical
44:01 - padding and
44:02 - horizontal padding independently so i'd
44:05 - like quite a lot of vertical padding
44:06 - and a little bit less horizontal padding
44:09 - and so to add vertical padding we can
44:11 - just add q
44:12 - dash p for padding and then y for
44:15 - padding on the y
44:16 - axis then a dash and then i'll add lg
44:19 - for large
44:20 - save that and we need to put this q
44:22 - input inside that div
44:23 - so i'll just move that up save that and
44:25 - then to add some padding on the x axis
44:28 - i'll add q dash p x for padding on the x
44:32 - axis dash md for a medium padding save
44:36 - that
44:37 - let's customize this input a little bit
44:39 - i'm going to split the attributes on
44:40 - this q
44:41 - input i'm going to remove this dense
44:43 - prop and i'll set this label to
44:46 - what's happening like on the twitter
44:49 - site
44:49 - and if we use this label prop then when
44:52 - we click into the field
44:53 - we see the label pop up to the top there
44:56 - but i prefer using a placeholder where
44:58 - the
44:58 - text just disappears when you click into
45:00 - the field so i'll change this label to a
45:02 - placeholder
45:04 - save that and that text now disappears
45:09 - um we want the maximum length of this
45:11 - field to be 280 characters and not 12.
45:14 - so i'll set this max length to 280 and
45:17 - save that
45:19 - and we can see that update there let's
45:21 - see if that's working
45:23 - i'll just paste loads of text in there
45:27 - and that doesn't seem to be working and
45:29 - that's because we need to bind this to a
45:31 - data property
45:32 - so this v model here i'll change this to
45:37 - new quit
45:40 - content and i'll set up a data property
45:43 - for that
45:44 - so in our script section i'll add our
45:46 - data method
45:48 - that returns an object and add this
45:50 - property new
45:52 - tweet content and i'll just set it to an
45:55 - empty string
45:56 - and save that let's see if this
45:58 - character counter is working now
46:00 - yeah we can see the characters counting
46:01 - up and when we get to 280 it stops us
46:04 - from typing anymore
46:05 - and i'll remove this clear button on
46:07 - this clock button which is in this
46:10 - template tag here so i'll get rid of
46:12 - that i'll get rid of this
46:14 - field hint slot as well
46:18 - save that and i'm going to replace this
46:20 - avatar image with
46:21 - my image and that's this image tag here
46:25 - and i have the link in my clipboard but
46:28 - you can use
46:28 - your own avatar if you want i'll save
46:31 - that
46:31 - and i want to increase the size of this
46:33 - avatar and this cute avatar component
46:36 - like the q icon component has a size
46:39 - prop that we can use
46:40 - so i'll set the size to excel for extra
46:43 - large
46:44 - and i'm going to replace this submit
46:46 - button here with a text
46:48 - style button like this one here so i'll
46:50 - jump to
46:51 - quasar site view components buttons
46:55 - button scroll down and i'd like
46:58 - something like this
46:59 - a rounded solid button and this is on
47:02 - the fourth line so i'll click on view
47:04 - source
47:06 - so one two three four and i think it's
47:09 - this one here
47:10 - with the rounded prop so i'll copy that
47:15 - paste it over this send button here and
47:17 - save that
47:18 - let's customize this button i'm going to
47:20 - split the attributes on that
47:22 - and change the label to quit
47:26 - save that and i don't want the text on
47:28 - this button to be capitalized and if we
47:30 - jump back to the button page and the api
47:32 - section
47:33 - and style maybe i'll scroll down
47:38 - no it's not in there maybe general
47:41 - maybe content we have this no caps prop
47:44 - that we can use
47:45 - to disable those uppercase characters
47:48 - so i'll add that prop to this q button
47:51 - no caps
47:52 - and if we look at the twitter site if we
47:55 - have nothing in this field
47:56 - then this button is disabled so let's do
47:59 - the same thing with r button
48:01 - and if we jump back to the button page
48:04 - and
48:05 - behavior or maybe it's general
48:08 - no maybe style or it could be in state
48:11 - we have this disable prop that we can
48:13 - use to disable a
48:14 - button so we'll bind to the disable
48:18 - prop and we want to disable this button
48:21 - if there's nothing in this
48:23 - new quick content property so we can
48:25 - just set this disable prop to
48:27 - not new quick content and save that
48:30 - and the button is now disabled but if we
48:32 - type something it's now
48:34 - enabled again now i want this input to
48:37 - automatically grow vertically as we add
48:40 - more content
48:40 - because right now it just goes from left
48:42 - to right like that
48:44 - but if we look at the twitter site we
48:47 - can actually add new lines here
48:48 - and the input keeps on growing so i'm
48:51 - going to jump back to the quasar site
48:53 - and back to
48:54 - form components and input text field
48:57 - jump down to the queue input api
49:00 - and if we jump to the content section
49:02 - and scroll down
49:04 - we have this auto grow prop which will
49:07 - make this field
49:08 - grow automatically so let's add this
49:10 - prop as well
49:12 - auto grow save that and now if we add
49:17 - tons of content in here it's not working
49:19 - because i added it to
49:21 - the button instead of this input so i'll
49:24 - cut that auto grow prop
49:25 - uh we'll add it to this q input instead
49:27 - save that
49:29 - let's try that again
49:32 - yep it's now auto growing and all the
49:35 - content is added to
49:37 - new lines and i'd like the font size in
49:40 - this input to be quite a bit bigger i'm
49:44 - actually zoomed out of the twitter page
49:46 - here but if i set the zoom to normal
49:49 - then you can see the text in this field
49:51 - is quite a lot bigger
49:53 - and unfortunately there's no size prop
49:56 - or text size prop
49:58 - available for the queue input so what
50:01 - we'll do
50:01 - is add a class to our queue input and
50:04 - add some
50:05 - custom styles so i'll add a class to
50:07 - this q
50:08 - input of new dash quit save that
50:11 - jump down to the style section which
50:13 - doesn't exist yet
50:14 - so we'll add that style with sass and
50:17 - we'll target this new
50:18 - quit class we'll set the font size
50:22 - to the same as it is on the twitter page
50:24 - which i think is 19 pixels
50:27 - and save that and the text is now nice
50:29 - and big
50:31 - however we could do with a bit more line
50:33 - height here so allow the line height
50:35 - property as well
50:37 - and set that to 1.4 that doesn't seem to
50:40 - be working let's try adding important
50:43 - save that just reload the page
50:49 - and that line height is still not
50:50 - working i'm just going to inspect this
50:53 - let's drag this out a bit and i'll just
50:56 - drag this down
50:57 - so our class is being added on this
50:59 - label element here you can see it there
51:01 - new quick
51:02 - but we're trying to style this text area
51:04 - and the line height writing
51:06 - isn't cascading down so let's make this
51:10 - more specific instead of just targeting
51:12 - this new quick class
51:13 - we'll target the text area within that
51:15 - so i'll add text area
51:17 - and indent these styles close the
51:20 - inspector and see if that works
51:24 - yeah it seems to have worked i'll just
51:25 - reload that
51:27 - yeah we now have a nice amount of line
51:30 - height on this field
51:31 - so as this input grows down vertically
51:34 - this quick button stays right up here
51:37 - and i think it'd be better if it stayed
51:38 - docked down here next to the bottom of
51:41 - this
51:42 - input and quasar has a grid system that
51:44 - we can use to have more control
51:46 - over how things are laid out so if we go
51:49 - to the quasar site
51:51 - then layout and grid then flex grid and
51:53 - introduction to
51:55 - flexbox then it tells us all about this
51:58 - grid system that we can use and if we
52:00 - jump to grid row
52:02 - so we can set up rows with columns
52:04 - inside
52:05 - and if i just click on view source to
52:08 - create a row we can just
52:09 - use the class row and then inside that
52:11 - we can add some divs
52:13 - with a class of call to create columns
52:16 - so what we could do is put all of this
52:19 - inside
52:20 - a row and then put the input and the
52:22 - avatar
52:23 - in a column inside the row and then put
52:26 - the button
52:27 - inside another column because when we
52:29 - use the grid system and these rows and
52:31 - columns we have more control over the
52:33 - positions of things within the
52:35 - columns so for example we can tell
52:37 - everything to force itself down to the
52:39 - bottom of the column
52:41 - so i'm going to jump to this input and
52:43 - we already have a div
52:45 - around this input so we could just make
52:46 - this a row by adding a class of row
52:49 - and i'll save that and then inside this
52:51 - row i'm going to add two columns so i'll
52:53 - add a div with the class of call
52:55 - and then another div with a class of
52:57 - call i'll just break these up
52:59 - i'm going to select the input and cut
53:01 - that
53:02 - and paste it inside this first column
53:04 - and then our button which is currently
53:06 - in this after slot i'll cut that and get
53:09 - rid of this
53:10 - slot and paste this button in this
53:12 - second column
53:13 - let's fix the indentation
53:16 - and save that i'll just reload the page
53:20 - and currently these columns are 50 50
53:23 - they're both the same width because by
53:26 - default columns will just take up
53:28 - an equal amount of space so if there's
53:30 - two columns they take up 50
53:32 - each or if there are three columns they
53:34 - take up a third of the available width
53:35 - but we can add a class to this second
53:37 - column
53:38 - to force it to shrink so we can just add
53:41 - a class of call
53:42 - dash shrink and all of these classes are
53:45 - explained
53:46 - in this flex grid section on the quasar
53:48 - site
53:49 - so we'll save that and this column is
53:52 - now shrinking
53:54 - but we still want this button to be
53:56 - pushed down to the bottom
53:58 - of the column and if we jump back to
54:00 - this grid row page
54:02 - and scroll down to alignment
54:05 - there's some classes we can use here so
54:07 - for vertical alignment
54:09 - we can use this items end class on the
54:11 - row
54:12 - to force the content of the columns down
54:15 - to the bottom of the column
54:17 - so let's add this items n class to our
54:19 - row
54:21 - so our row is here so we'll just add
54:24 - items
54:25 - dash end and save that
54:28 - and this button is now right at the
54:29 - bottom however this button is now
54:31 - touching the input and we need a bit of
54:33 - space between these columns
54:34 - so we need a gutter so if we jump back
54:37 - to the quasar site
54:39 - and grid gutter and if we scroll down
54:42 - we can use these cue call gutter classes
54:45 - to add a gutter between our columns
54:47 - so we just need to add a class to the
54:49 - row such as cue call gutter sm
54:51 - so i'll copy this class we'll add it to
54:54 - our row here and i'll save that and i'd
54:58 - like a little bit more space than that
54:59 - so i'll change this to
55:00 - cue call gutter dash md for medium
55:04 - and that's looking pretty good now and
55:06 - this button is a little bit too low down
55:08 - at the moment i'd like it to be
55:09 - sort of in line with this line here so
55:12 - i'm just gonna add a bit of bottom
55:13 - margin to that button
55:14 - so a lot of class to this button of
55:17 - q dash and b for margin bottom dash
55:21 - let's try md save that maybe a little
55:24 - bit more
55:24 - i'll change this to lg and yeah that
55:26 - looks pretty good
55:28 - let's see if it follows the input down
55:30 - the page
55:31 - and yeah it does so i think that's much
55:34 - better now
55:34 - and there's one more thing i want to do
55:36 - here if we look at the twitter site
55:38 - after this input section we have this
55:40 - little divider here
55:42 - with a gray background and a little gray
55:44 - top and bottom border
55:45 - so let's add something similar under our
55:47 - input
55:48 - maybe we could use the q separator
55:50 - component so i'm going to jump to the
55:52 - quasar site and then
55:53 - view components and separator
55:56 - scroll down and by default this is just
55:59 - a single line
56:00 - but maybe we can customize it a little
56:02 - bit so i'm just going to click on view
56:03 - source
56:04 - and grab one of these cue separators
56:08 - and we'll paste it after our div with
56:11 - the row class
56:12 - so i'll paste that here and save that
56:15 - right now it's just a single line not
56:18 - quite like the twitter one
56:20 - but if we jump to the separator api
56:23 - and style then we have a size prop we
56:26 - can use to set the thickness of it
56:28 - in pixels or rems so i'll add a size
56:30 - prop to this
56:32 - cue separator and i think the one on
56:34 - twitter is about 10 pixels so i'll set
56:36 - this to
56:37 - 10 pixels and that's looking pretty good
56:41 - however it's a little bit dark compared
56:43 - to this twitter one
56:45 - and if we jump back to the api section
56:48 - we also have a color prop we can use to
56:50 - set the color
56:52 - so i'll add that as well and then i'm
56:54 - going to jump to the color palette page
56:56 - so styling identity and color palette uh
56:59 - let's look for some grays
57:03 - uh maybe this gray two color will work
57:05 - so i'll set this color prop to
57:07 - gray dash two i'll save that
57:11 - um we're almost there with this
57:12 - separator but the one on twitter has
57:14 - these little
57:15 - top and bottom borders and i don't think
57:19 - there's a
57:19 - border prop for the cue separator so
57:22 - what we can do
57:23 - is add a class to this in fact i'll
57:26 - split the attributes here
57:27 - add a class of let's say divider
57:31 - we'll add some custom css to add a top
57:35 - and bottom border
57:36 - so we'll target this divider class and
57:40 - i'll set the border
57:41 - top to one pixel solid and the border
57:45 - bottom to one pixel solid and then we'll
57:48 - set the border color
57:51 - and if i jump back to the color palette
57:54 - page
57:55 - maybe we could use a darker color here
57:58 - because we can actually use these colors
58:00 - in our css because we have css variables
58:03 - for all of these colors
58:05 - so maybe something like gray-5 so what
58:08 - we can do here is set this border color
58:10 - to dollar
58:11 - and then gray dash five and i'll save
58:15 - that
58:16 - and they look a little bit too dark
58:18 - let's try gray four
58:21 - so i'll change this to grade four and
58:23 - yeah that's looking pretty decent now
58:25 - okay so i think we're done with our new
58:26 - quit form let's move on to our list of
58:29 - quiz
58:31 - [Music]
58:35 - let's add a list of tweets down here and
58:37 - tweets
58:38 - have the avatar over on the left then
58:40 - they have the user's name and then the
58:42 - handle
58:43 - and then the date the tweet was posted
58:45 - and then we have the tweet underneath
58:47 - and some buttons underneath that so
58:49 - let's see if we can find something we
58:51 - can use
58:52 - on the quasar site so i'll go to list
58:55 - and list items
58:56 - and i'm going to jump down to more
58:58 - involved examples
59:00 - and scroll down a bit and these email
59:03 - list items
59:04 - look pretty good we've got the avatar
59:06 - title at the top
59:08 - and then a time over on the right so
59:10 - i'll click on view source
59:11 - and i'll just copy all of this cue list
59:14 - and
59:15 - paste it after our cue separator and
59:18 - i'll get rid of all except the first
59:20 - queue item so i'll get rid of this cue
59:23 - separator
59:24 - and this cue item here and save that
59:28 - and let's customize this a bit so i'll
59:31 - split the attributes on the cue list
59:34 - i'll remove this style property which is
59:36 - restricting the width
59:38 - and i'll remove this rounded borders
59:39 - class
59:41 - and i'll remove this bordered prop as
59:43 - well
59:44 - and i'll remove this friends label at
59:47 - the top
59:48 - and i'll replace this avatar with the
59:50 - avatar that's
59:51 - next to our input so i'll scroll up
59:54 - and grab this q avatar copy that and
59:57 - paste it over this
59:58 - q avatar save that
60:01 - and these lines props on these labels
60:05 - here are restricting the number of lines
60:07 - that can be displayed
60:09 - and i don't want this to be restricted
60:10 - so i'll remove this lines prop
60:13 - from both of these cue item labels
60:16 - and i'll remove this caption prop which
60:18 - i think is making the text
60:20 - a bit smaller and i'll change the text
60:22 - in here so i'll put
60:24 - my name in here this first cue item
60:27 - label
60:28 - and i'll just split this up actually
60:30 - i'll save that
60:31 - and i want this to be bold so i'll wrap
60:34 - this
60:34 - in a strong tag and i want to display
60:38 - my handle next to this in gray so i'll
60:41 - add a spam
60:42 - and i'll use one of quasars color
60:43 - classes i'm going to use
60:45 - text gray dash 7 and i'll put my handle
60:48 - in there
60:50 - save that and on the queue item here
60:52 - this clickable prop and this be
60:54 - ripple prop uh making this clickable
60:57 - um adding this ripple effect and i don't
60:59 - want those so i'll remove these props
61:02 - and i think we need a bit more vertical
61:05 - padding on these
61:06 - items so a lot of class to this cue item
61:10 - of q dash p y dash
61:13 - md save that and i'll replace the text
61:17 - in this
61:18 - second cue item label where our tweet is
61:21 - going to go
61:22 - so i'll just select everything inside
61:23 - this cue item label and
61:26 - put some laura mipsum and we want to
61:28 - make sure this can handle
61:29 - new lines so i'll stick a new line in
61:32 - here
61:33 - and save that and we can't see the new
61:36 - lines being added
61:37 - so what i'm going to do i'll add a class
61:39 - to this queue item label
61:41 - of queat content
61:44 - we'll add some css at the bottom so
61:46 - we'll target the queet
61:48 - content class and to make sure those new
61:51 - lines are preserved
61:52 - and shown we can just set the white
61:54 - space
61:55 - property to pre dash line save that
61:59 - and we can now see those lines and this
62:01 - avatar is currently
62:03 - vertically centered but i want it to be
62:05 - always at the top
62:07 - and if we scroll up here this q avatar
62:10 - is inside
62:10 - a q item section so let's see if we can
62:14 - find the
62:14 - api for that and it's down here cue item
62:18 - section api
62:20 - so i'll jump to that and we have this
62:22 - top prop that we can add which will
62:24 - align content to the top so we'll add
62:27 - that to
62:28 - this cue item section here save that and
62:31 - i want the text to be a little bit
62:32 - bigger
62:33 - both here at the top and the content
62:36 - text as well
62:37 - so i'm going to jump to the typography
62:39 - page so styling identity typography
62:42 - maybe we could use this subtitle one on
62:45 - the heading
62:46 - of the tweet so text subtitle one
62:49 - so i'll add that to this first cue item
62:52 - label
62:53 - with the username and handle in it
62:56 - so text dash subtitle one save that
63:00 - and i want this body text to be a bit
63:01 - bigger as well
63:03 - so maybe we could use this body one
63:06 - style
63:07 - with the class text dash body one so
63:10 - i'll add that class to
63:11 - the second cue item label text dash body
63:15 - one
63:15 - save that and this is looking pretty
63:17 - good now pretty similar to
63:19 - the way tweets appear on twitter and now
63:22 - we just need this action bar at the
63:23 - bottom with some buttons
63:26 - uh let's add these to the bottom of this
63:28 - cue item section underneath our
63:30 - tweet so after this q item label
63:34 - i'll add a row and we'll stick some
63:36 - buttons in here
63:37 - so i'll jump to the quasar site go to
63:40 - view components buttons button
63:43 - and scroll down and we just want some
63:45 - icon buttons
63:47 - something like this a bit like these
63:50 - buttons on
63:50 - twitter
63:54 - so i'll grab the code for that which is
63:57 - this one here
63:59 - copy that paste it into this row
64:02 - and i'll split the attributes and save
64:05 - that
64:06 - and i don't want this to be blue i want
64:07 - it to be gray
64:09 - so i'm going to change this color prop
64:10 - to gray save that
64:12 - i want it to be a bit smaller so i'll
64:14 - add a size prop as well
64:16 - set that to sm for small and i want to
64:18 - use some font awesome
64:20 - icons here so i'll jump to the font
64:21 - awesome page
64:23 - and i'm going to search for comment
64:25 - because we'll add a button for comments
64:27 - and this one looks pretty good so i'll
64:29 - click on that
64:31 - and copy this example here
64:34 - i'll just paste it after this q button
64:36 - for now
64:38 - so i'll replace this icon prop here with
64:40 - these classes here
64:41 - so i'll copy that paste that in there
64:44 - i'll get rid of this save that uh let's
64:47 - add three more buttons so i'll duplicate
64:49 - this
64:49 - three times i'm going to use some other
64:52 - font awesome buttons which i found on
64:54 - the font awesome page here
64:55 - so i'm going to use a retweet icon with
64:57 - the classes fas
64:59 - and then fa retweet and then i'm going
65:02 - to use the heart icon with the classes
65:04 - f a r and then f a dash heart
65:07 - and then i'm going to use a delete icon
65:09 - with the classes f
65:10 - a s f a dash trash save that
65:14 - and we can see all of those icons
65:17 - and i want these icons to spread out and
65:20 - there's a bunch of
65:21 - flex classes we can use and they're all
65:23 - on the
65:24 - flex pages on the quasar site
65:27 - so i'm going to add a class to this row
65:29 - with our buttons
65:30 - of justify between to add
65:34 - space between all of our items here and
65:36 - i'll also add a top margin to this
65:38 - button to make a bit of space
65:40 - at the top so i'll add q mt
65:43 - sm save that and lastly i just want to
65:46 - nudge these icons
65:47 - back over to the left a bit because if
65:49 - you look at the twitter
65:50 - tweets this left icon aligns perfectly
65:53 - with the
65:54 - text over on the left
65:57 - so i'm going to add a class to this row
65:59 - of queet
66:01 - icons and then in the style section
66:05 - we'll target this class quite icons
66:09 - and we'll add a negative left margin so
66:11 - i'll set margin
66:12 - left to minus 5 pixels save that
66:16 - and this icon is now lined up with this
66:18 - text
66:20 - okay i'm pretty happy with the design of
66:22 - this tweet now
66:24 - [Music]
66:28 - let's set up some data for our quiz so
66:31 - i'm going to jump down to the data
66:32 - section
66:33 - and i'm going to add an array called
66:36 - queets
66:38 - and we'll stick each queen inside an
66:40 - object
66:42 - so we'll add a content property and i'll
66:45 - just put some
66:46 - lorem ipsum in there and we'll add a
66:48 - date property
66:49 - and i'm just going to use the timestamp
66:51 - format for this
66:53 - so i'm going to jump to the console in
66:55 - chrome just run date.now
66:57 - to get the current date i'll copy that
67:00 - and paste that here
67:01 - i'll duplicate this object and just
67:04 - change the date
67:05 - so i'll just run date dot now again copy
67:07 - this date
67:09 - uh paste that in there i'll save that
67:12 - and we'll spit these out on the page
67:15 - using a v4 loop so i'll jump up to
67:19 - this quee which is here this q item
67:23 - i'll split the attributes and add a v4
67:27 - and we want to loop through this quits
67:30 - array
67:32 - so i'll do v4 quit in
67:36 - quits and we also need a key property
67:41 - and for now i'm just going to use the
67:43 - date as a key
67:45 - although later on when we set up
67:46 - firebase we will add some ids
67:49 - to our quits which we'll also use as the
67:51 - key later on
67:52 - but for now i'm just going to set the
67:53 - key to quit
67:55 - date and save that
67:58 - and we now see two quits on the page so
68:02 - let's hook up the content and the
68:04 - date so i'm going to select everything
68:07 - inside this cue item label
68:11 - and instead output quet
68:14 - dot content and save that
68:18 - i'll do the same for the date which is
68:20 - here
68:21 - so double curly braces and quits
68:25 - dot date and i'll save that and i want
68:27 - to have a separator between each tweet
68:29 - so we can use the
68:31 - separator prop on the cue list which we
68:34 - used
68:35 - over here so i'll add separator
68:38 - and save that and this date doesn't look
68:41 - too hot so let's format this using the
68:43 - date
68:44 - fns package so i'm going to search for
68:46 - date fns
68:47 - in fact i'm just going to go straight to
68:49 - date fns.org
68:52 - i'm going to jump to documentation and
68:55 - getting started
68:56 - and i'll jump down to installation so we
68:59 - can install this with
69:00 - npm install date fns so i'm going to
69:02 - copy that
69:04 - jump to my terminal and kill the dev
69:06 - process
69:07 - and just run that command and that's
69:10 - installed so i'm going to launch the dev
69:12 - process again with quasar dev
69:14 - and that's running again so i'm going to
69:16 - jump back to date fns
69:18 - and if we look down at the bottom here
69:20 - we can use this format distance method
69:22 - to output a date in a relative format
69:25 - such as
69:26 - three days ago like this so i'm going to
69:28 - copy this import line
69:29 - and add it to the top of our script
69:31 - section
69:33 - so i'll paste that here and we don't
69:36 - need this
69:36 - sub days method so i'll get rid of that
69:39 - let's set up a filter
69:41 - which will use this method to format the
69:43 - date
69:44 - so it's going to collapse the data
69:47 - object
69:48 - out of filters object and we'll create a
69:51 - filter called
69:52 - relative date and this is going to
69:54 - expect a value
69:56 - and we need to return a value so i'm
69:59 - just going to copy this line from this
70:00 - example i'll paste that there and i'll
70:04 - just stretch this out a sec
70:06 - so this is going to expect two dates two
70:09 - parameters
70:10 - and it's going to return the distance
70:11 - between those two dates
70:13 - in a relative form such as three days
70:16 - ago
70:17 - so in the second parameter here we have
70:19 - the current date
70:20 - and this first parameter we want to pass
70:22 - in our date
70:23 - so i'm going to replace all of this with
70:25 - value and save that
70:27 - and now let's use this filter on our
70:30 - date here so
70:31 - i want to scroll up to our date which is
70:33 - here
70:34 - and then just add a pipe and the name of
70:36 - our filter
70:37 - relative date save that and we can now
70:40 - see some nice relative dates here
70:47 - after the user types in some text here
70:49 - and clicks on the quit button
70:51 - then we want to add the new quick to our
70:53 - quits array so that it's displayed here
70:55 - so i'm going to add a click handler to
70:56 - this quick button which is here
70:59 - so i'll add a click and we'll trigger a
71:01 - method called
71:02 - add new quit i'll jump down to the
71:06 - script section and add a methods object
71:09 - and add this method
71:10 - add new quit and for now i'll just log
71:13 - out
71:14 - add new quee and make sure that
71:17 - click handler is working so i'll clear
71:19 - the console
71:20 - click on the button and we see that
71:22 - being logged out so what do we want to
71:24 - do here
71:25 - well we want to set up an object such as
71:28 - this
71:29 - and we want to set the content to the
71:31 - content that the user entered
71:33 - and we want to set the date to the
71:34 - current date then we just want to push
71:36 - that object to this quits array so we'll
71:38 - set up that object first
71:41 - so we'll call this new quet
71:44 - set that equal to an object and we need
71:47 - a content property
71:48 - which we're going to grab from this new
71:50 - quick content
71:51 - property which is hooked up to this
71:54 - input
71:55 - so we'll set this to this dot new quick
71:58 - content
71:59 - and then we need a date property with
72:01 - the current date so we can just fire
72:03 - date dot now
72:04 - to get that and now we just want to push
72:07 - this quick to our
72:09 - array of quits so we can just do
72:12 - this.quits
72:14 - dot push and then pass in this you quit
72:17 - object
72:18 - save that let's see if that's working
72:26 - and it's worked it's added our quick to
72:28 - the list
72:29 - and the relative date is working however
72:31 - this is right at the bottom
72:32 - and really we want our new quits to be
72:35 - at the top
72:37 - so instead of pushing it to the quakes
72:39 - array we'll unshift it instead
72:41 - so i'll just change push to on shift
72:44 - save that and reload
72:48 - let's try that again
72:52 - and yeah that's working how we want it
72:54 - to now
72:55 - [Music]
72:59 - let's add the ability to delete a tweet
73:01 - when someone clicks on one of these
73:03 - delete buttons
73:04 - so i'll add a click handler to this
73:06 - button so
73:07 - i'll scroll up to these buttons and this
73:10 - is
73:11 - the delete button so we'll add a click
73:14 - and we'll trigger a method called delete
73:17 - queet
73:19 - and we'll just pass in the whole of the
73:21 - quit object
73:23 - so i'll pass quit in here and we'll set
73:26 - up this method
73:28 - so i'll add that here so delete queet
73:32 - pass in the quit object and for now
73:35 - we'll just log out
73:36 - this quit object and i'll just change
73:40 - this
73:40 - string here to delete queet and save
73:43 - that
73:44 - and i'll open up the console
73:47 - uh click on one of these delete buttons
73:51 - um we can see that log being fired and
73:53 - we can see the data
73:55 - from the queen whose delete button was
73:57 - clicked so now we just want to remove
73:59 - the correct
74:00 - quet from our quits array and i'm just
74:03 - going to do this based on the
74:04 - date for now although later on when we
74:06 - set up firebase we'll do all this stuff
74:08 - based on ids
74:10 - instead but in this deletequick method
74:12 - i'm just going to grab the
74:14 - date to delete from this quit so i'll
74:16 - put this in a variable
74:18 - called date to delete
74:21 - so quite date so we want to delete the
74:25 - quit in the array which has this date
74:28 - here
74:29 - which will be in this variable so we
74:31 - could use the find index method
74:33 - to find the index the position of the q
74:36 - in the array which has this date
74:38 - so we can do let's index and then we can
74:41 - do this.quits
74:43 - dot find index and this is going to loop
74:46 - through each item
74:47 - in our array so we need a placeholder
74:49 - and i'll just use quit as a placeholder
74:52 - then we want to fire a method with our
74:54 - criteria
74:55 - i'm just going to stretch this out a bit
74:57 - and we just want to see if quite
75:00 - date is equal to this date here
75:04 - so equal to date to delete
75:08 - and that should give us the index of the
75:11 - tweet that we want to delete
75:12 - so i'll just log out the index for now
75:14 - save that
75:15 - so click on this first delete button and
75:18 - yeah we see index zero
75:19 - click on the next one you see index one
75:22 - so now we just want to remove
75:24 - the item in the array at the position of
75:26 - this index
75:28 - so we can now just do this dot quits
75:32 - dot splice
75:37 - and pass in the index as the first
75:40 - parameter and then just pass in one as
75:42 - the second parameter
75:43 - so that we only delete one item uh i'll
75:45 - just remove these
75:46 - console logs and save that now let's see
75:49 - if it's working
75:51 - i'll just reload click on delete
75:54 - and yeah it seems to be working and just
75:57 - to make sure it's deleting the right
75:58 - quits because these are both identical
76:01 - i'm just going to put some different
76:02 - text in one of these tweaks
76:04 - and i have this little chrome extension
76:06 - called quotes
76:07 - which will generate a quote so
76:10 - i'm just going to use that just so i
76:12 - don't have to keep typing loads of
76:14 - tweets i'll just paste that in here and
76:17 - i'll just get rid of that single quote
76:19 - and save that okay so i'll try and
76:22 - delete this one
76:23 - yeah it seems to be deleting the correct
76:25 - tweet if you found this video useful so
76:27 - far
76:28 - make sure you smash the like button and
76:30 - leave a comment telling us what you
76:31 - think about quasar
76:34 - [Music]
76:37 - let's add some nice animations for when
76:40 - our tweets
76:41 - disappear or appear in our list here
76:45 - before we do that i just realized that
76:47 - after we add a quick this input remains
76:49 - populated
76:50 - with whatever we just typed so i'm just
76:52 - going to quickly fix that
76:54 - so what we can do in this add new quick
76:56 - method at the end
76:57 - is just set this new quick content
76:59 - property
77:00 - which is bound to this input back to an
77:03 - empty string
77:04 - so we can just do this dot new quick
77:06 - content equals
77:08 - empty string save that let's try that
77:11 - again
77:14 - yep the field is now cleared okay back
77:16 - to animations
77:18 - uh quasar has a built-in animation
77:20 - helper
77:21 - which makes it really easy for us to add
77:23 - animations to our elements and
77:25 - components
77:26 - when they appear or disappear on the
77:28 - page so i want to jump to the quasar
77:30 - site
77:31 - and we want to go to quasar options and
77:33 - helpers
77:35 - and animations so we can use any of the
77:38 - animations from animate.css
77:41 - so i'm just going to click this link and
77:42 - open that so we have all of these
77:44 - different animations we can use
77:46 - and i'm just going to use a nice and
77:48 - simple fade in
77:49 - and fade out animation but feel free to
77:53 - use some of the more fancy animations if
77:55 - you want
77:56 - and we do need to note these class names
77:58 - here fade in and fade out
78:00 - because if we jump back to this
78:01 - animations page on quasar
78:03 - we do need to add these animations to
78:05 - our quasar.conf
78:07 - dot js file to this animations array
78:10 - like this so i'm just going to open up
78:13 - the quasar config file quasar.com.js
78:17 - and i'll search for animations
78:21 - i'm just going to add fade in and fade
78:24 - out
78:25 - to this array and save that
78:28 - and if we scroll down here it shows us
78:30 - how to use these
78:31 - so if you want to add an animation to a
78:34 - single component
78:35 - such as a button then we can just
78:37 - surround it in a
78:38 - transition element with these props
78:42 - and replace this fade in and fade out
78:45 - with
78:45 - whichever animation that we want to use
78:47 - but if we want to wrap multiple elements
78:50 - which we're going to do because we're
78:51 - going to be doing this on a list which
78:53 - is being split
78:54 - out with a v4 loop then we want to use
78:56 - this transition group
78:58 - component instead so i'm just going to
79:00 - copy the opening tag of this
79:02 - transition group component jump back to
79:05 - page home
79:06 - dot view and find our quits
79:10 - this is the queue item here and i'll
79:12 - just collapse that
79:13 - so we want to surround this in this
79:16 - transition group component
79:18 - so i'll paste the opening tag here and
79:21 - indent that
79:22 - and then i'll add the closing tag at the
79:24 - bottom
79:26 - and i'll just indent the cue item and
79:28 - save that
79:29 - and we don't need to change these
79:31 - classes here because i am using the fade
79:33 - in
79:33 - and fade out animations but if you're
79:36 - using a different animation then you
79:38 - need to
79:38 - update these so let's see if that's
79:41 - working
79:43 - i'll just reload the page and add a new
79:46 - quit
79:49 - and yeah it did have a brief fade in
79:51 - animation there and if we delete one
79:54 - we do see it fade out and i'd like to
79:56 - slow this down a little bit
79:57 - and so what we can do is just add
79:59 - another class
80:00 - to each of these props here of slow
80:03 - and you can also use slower as well well
80:06 - that's a bit too slow so i'm just going
80:07 - to use
80:08 - slow and this should slow down the
80:09 - animation a little bit
80:11 - so i'll add a new tweet here and i'm
80:13 - just going to start using this
80:14 - quote generator thing and yeah i think
80:17 - that's a little bit nicer
80:18 - and if we delete it yeah it's looking
80:20 - pretty good and we do have an issue now
80:22 - with our quits
80:24 - can you tell what it is we've lost our
80:25 - separator
80:27 - between each of our tweets so why has
80:29 - that happened
80:30 - well if we just inspect our cue items
80:32 - here
80:33 - and have a look at what's going on
80:35 - here's our cue list
80:36 - and here's our queue item and the reason
80:38 - we've lost that separator
80:40 - is because adding this transition group
80:42 - component
80:43 - has added this span around all of our
80:46 - cue items
80:47 - so if i just temporarily comment out
80:49 - this transition group
80:52 - both the opening and closing tags and
80:55 - save that
80:57 - now we see the separator again and that
80:59 - span that we saw has disappeared
81:01 - so if i click on a cue item and take a
81:04 - look at the styles
81:05 - actually i don't think there's a
81:06 - separator on the first queue item so
81:09 - i'll look at the
81:10 - second cue item and we can see the style
81:13 - here which is adding that border
81:14 - and the reason we lose the style when we
81:16 - add that transition group
81:18 - which adds that span is because this
81:20 - selector is looking for
81:22 - direct children of the containing
81:25 - component
81:25 - so what i'm going to do is copy this
81:28 - border top property here
81:30 - and put this transition group back in
81:32 - then i'm going to add a class
81:34 - to our queue item of queet
81:37 - and we'll just set up some custom css to
81:39 - put the separator back in
81:41 - so i'll scroll down to the style section
81:44 - and i'll add that here
81:46 - so we'll target the quit class
81:49 - and i'll paste in that style rule and
81:52 - get rid of the
81:52 - semicolon because you don't need that in
81:54 - sas save that
81:57 - and we can now see the separator again
81:59 - however it's also added it to the
82:02 - first quit as well which is making this
82:04 - line
82:05 - at the bottom of the divider thing look
82:07 - a bit too thick
82:08 - so what we can do is change this
82:09 - selector here
82:11 - and add a not selector to it so that it
82:14 - ignores the first child
82:16 - so the first cue item within the cue
82:19 - list
82:20 - so we can just add colon not
82:23 - then parentheses and then colon first
82:25 - child
82:27 - and if we save that we now see the
82:30 - separator disappear from the first child
82:33 - but we'll still see it on all of the
82:36 - tweaks which are below
82:37 - the first child
82:39 - [Music]
82:44 - okay we're almost done with the front
82:45 - end for this app but there's a couple of
82:47 - final design tweaks
82:48 - i want to make and the first one is i
82:50 - don't like the fact that this column
82:52 - with our relative date is squishing the
82:55 - tweet content over here and also this
82:58 - column is changing width
83:00 - depending on the text so if we scroll
83:02 - down to this one with two minutes
83:04 - the column is a lot less wide and also
83:07 - these icons
83:08 - are sometimes right over here and
83:10 - sometimes over here
83:12 - so instead i'm going to move this
83:14 - relative date
83:15 - next to the handle which is how it looks
83:19 - on
83:19 - twitter anyway so we just have the name
83:22 - the handle
83:22 - a bullet and then the relative date and
83:25 - the other thing is
83:26 - i don't like the fact that when we have
83:28 - a long list of quits and we scroll down
83:31 - this left draw disappears
83:34 - like that i think it would be better if
83:36 - these navigation links stayed up here
83:39 - which is how it works on the twitter
83:40 - site if we scroll down
83:43 - all of this stuff stays in place so
83:46 - let's do the same thing on our app so
83:49 - let's start by moving this
83:50 - relative date next to this handle
83:54 - so i'm going to jump to our cue item
83:57 - with the queet and our relative date is
84:01 - here
84:02 - so i'm going to cut that and get rid of
84:04 - this cue item section
84:06 - and scroll up to our handle and i'll add
84:09 - a space after that and then a new line
84:11 - then i'll add a bullet by using and b u
84:14 - l
84:14 - l and semicolon and then we'll just spit
84:17 - out the relative date there
84:19 - so i'll save that and that's looking a
84:21 - lot better
84:22 - i'll just add a load of new creates and
84:25 - yeah that's looking a lot better now
84:27 - and let's see if it looks okay on mobile
84:32 - so this relative date is sometimes being
84:35 - spread across
84:36 - multiple lines so what might do is just
84:39 - add a break tag
84:40 - before this relative date that only gets
84:43 - added on mobile
84:44 - so that this relative date gets pushed
84:46 - down to the next line
84:48 - so what i'll do is add a break tag here
84:52 - um we only want this break tag to be
84:54 - displayed on devices which are less than
84:56 - medium
84:57 - so i'm going to add a class of lt-md
85:01 - and save that and on mobile we see the
85:05 - relative date
85:06 - is pushed down to a new line
85:09 - but on desktop we see it side by side
85:11 - with
85:12 - the name and the handle okay now let's
85:15 - fix this issue
85:16 - of the left draw scrolling up the page
85:18 - when we
85:19 - scroll down a longer list of quits and
85:21 - quasar has
85:22 - a scroll area component which we can use
85:25 - to make
85:26 - a particular part of our app scrollable
85:30 - so what we could do is put everything in
85:32 - our home page
85:33 - within a scroll area so that when we
85:35 - scroll down our list of quits
85:37 - we're just scrolling down the scroll
85:39 - area that's surrounding everything on
85:41 - the home page
85:42 - so i'm going to jump to the quasar site
85:46 - and a few components
85:50 - and scroll area we see a basic scroll
85:53 - area here
85:54 - so i'm going to click on view source uh
85:56 - i'll just copy the
85:57 - opening tag for this cue scroll area
86:00 - component
86:02 - and i'll place that at the top of our q
86:04 - page
86:05 - just here i'm just going to collapse
86:08 - everything else for now
86:10 - and put the closing tag at the bottom
86:12 - here
86:13 - and then just indent everything save
86:16 - that
86:17 - and this is working except this scroll
86:20 - area is currently way too small
86:22 - and we do need to specify the width and
86:25 - height of these
86:26 - scroll area components in order for them
86:29 - to work
86:30 - so what we could do is make our page our
86:32 - q page
86:33 - component relatively positioned then we
86:36 - could make this
86:37 - scroll area component absolutely
86:39 - positioned and set its width and height
86:41 - to 100
86:42 - so it fills up all of the available
86:44 - space on our page
86:46 - and quasar has some positioning classes
86:48 - we can use to do this so i'm going to
86:50 - jump to the quasar
86:51 - site and then style and identity
86:56 - and positioning so we can use this
87:00 - relative position class to make an
87:03 - element
87:04 - relatively positioned so let's add that
87:06 - to our q page
87:08 - so class relative
87:11 - dash position save that and then to make
87:14 - this
87:15 - q scroll area component absolutely
87:17 - position
87:18 - we can use this absolute class so i'm
87:20 - going to remove this
87:21 - style attribute here and add a class
87:24 - of absolute and we also want to give
87:27 - this
87:28 - component 100 width and 100 height uh
87:32 - maybe we could use this full screen
87:33 - class for that which says
87:35 - fixed position covering all window real
87:37 - estate
87:38 - so i'll add that class as well to the
87:40 - cue scroll area
87:43 - and save that let's see how that's
87:45 - looking
87:47 - and yeah it's looking pretty good so now
87:49 - when we scroll down our tweets
87:51 - we only scroll down this scroll area and
87:54 - everything in our layout is
87:55 - staying fixed in place let's just make
87:58 - sure it looks okay on mobile
88:00 - yeah looks okay
88:08 - okay so i think we're done with all of
88:09 - the front end for our app
88:11 - let's set up a simple real-time back-end
88:13 - for our app
88:14 - using a firebase cloud firestore
88:16 - database
88:18 - [Music]
88:23 - let's set up a firebase cloud firestore
88:25 - database
88:26 - to store all of our quit data and give
88:29 - us real-time data sync
88:30 - across all of our devices and everything
88:33 - we're going to be using here from
88:34 - firebase
88:34 - is going to be free for reasonable
88:37 - amounts of use
88:38 - but just bear in mind that if you create
88:40 - an app with a firebase database
88:42 - and millions of people download it then
88:44 - you will be expected to
88:46 - start paying so you might want to check
88:48 - out the pricing page at
88:50 - firebase.google.com
88:51 - pricing where you can see all of the
88:53 - limits that are available on the free
88:55 - plan
88:56 - and then you just want to go to
88:59 - firebase.google.com
89:01 - and click on go to console and if you've
89:04 - not already signed up it'll probably ask
89:05 - you to sign up and sign in with your
89:07 - google account
89:09 - but i'm just going to click on go to
89:10 - console and then i'm just going to click
89:12 - on add project
89:13 - and we need to enter a name and i'll
89:15 - call it quitter
89:17 - click on continue i'm going to disable
89:21 - google analytics i'll click on create
89:23 - project
89:25 - it's finished creating the project so
89:26 - i'm going to click on continue
89:28 - and we're going to be creating a cloud
89:30 - firestore database so i'm going to click
89:32 - on
89:32 - cloud firestore on the left here click
89:34 - on create database
89:36 - and i'm going to click on start in test
89:38 - mode
89:40 - just to make it easy for us to start
89:42 - working with our database
89:43 - but just bear in mind that anybody with
89:45 - your database reference
89:47 - will be able to view edit and delete
89:49 - data in your database
89:50 - when you have it set to test mode and
89:53 - i'll click on next
89:55 - and then it asks us to choose a location
89:57 - i'm not sure what difference this makes
89:59 - but i'm just going to click on enable
90:02 - okay it's created our database and we
90:04 - can see it here
90:05 - and it's empty right now and cloud
90:07 - firestore databases are made up of
90:09 - collections
90:10 - and collections contain documents and
90:13 - each document is basically just a
90:14 - javascript style
90:15 - object so let's start a collection for
90:18 - our quits
90:19 - so i'm going to click on start
90:20 - collection and i'm going to call this
90:22 - quits
90:23 - click on next and it's asking us to
90:26 - add our first document and each document
90:29 - needs to have an id
90:31 - so i'm just going to click on auto id so
90:33 - that firebase will generate an id for us
90:37 - let's add a quick here and our quets
90:39 - have a content field
90:40 - and a date field so let's add a content
90:43 - field
90:45 - and i'm just going to use that quotes
90:46 - extension to
90:49 - paste in a quote here and then i'm going
90:51 - to click on add field
90:52 - and add a date field and this is going
90:54 - to be a number
90:56 - i'm just going to use date dot now in
90:59 - the console to generate a date for us
91:03 - so date dot now
91:06 - then i'm going to copy this
91:09 - paste that in here and click on save
91:13 - so we can see our quits collection here
91:16 - and all of our documents will be
91:17 - displayed here
91:19 - and this is the document id here and if
91:22 - we click on that we can see
91:23 - all of the fields in that document so
91:26 - let's add a few more i'm going to click
91:27 - on add document
91:29 - click on auto id and add a content
91:32 - field and again i'm just going to use
91:34 - this little extension
91:38 - click on add field and we'll set a date
91:41 - set it to type number and again i'll
91:44 - just use
91:45 - the console to generate
91:48 - a timestamp copy that
91:53 - paste it in here click save and we'll
91:56 - add another document
91:58 - auto id content
92:02 - and i'll paste in some content
92:06 - add a date field set it to number
92:10 - and again grab the current
92:13 - date with date dot now and actually for
92:15 - this one i'm gonna
92:16 - set this date to an hour ago so we can
92:19 - make sure uh ordering and stuff like
92:20 - that is working
92:21 - and there are three million six hundred
92:23 - thousand milliseconds
92:25 - in an hour so i'm just gonna copy this
92:29 - and do that timestamp minus
92:32 - three million six hundred thousand
92:35 - and i'll copy this timestamp
92:39 - and add it here and i'll just add one
92:42 - more document
92:46 - add the date
92:49 - and grab the current timestamp date.now
92:59 - paste that in there click save okay so
93:01 - we now have a decent amount of data in
93:03 - our database
93:05 - but to get access to our database we
93:07 - need to set up an
93:08 - app so i'm just going to stretch this
93:10 - out
93:12 - and open up this sidebar we want to go
93:15 - to project overview
93:16 - and here's where we can add it up we
93:18 - want to add a web app so i'm going to
93:20 - click on this
93:20 - web icon give it a name i'm just going
93:23 - to give it the same name
93:24 - quitter and click on register app
93:28 - and it tells us how to initialize our
93:30 - database with
93:32 - some script tags but i'm not going to do
93:34 - it this way because the correct
93:36 - way to initialize a package like this in
93:38 - quasar
93:39 - is to import the modules we need and use
93:42 - a boot file so i'm going to leave this
93:44 - open though because we're going to need
93:45 - this
93:46 - config object later on but i'm just
93:49 - going to click on this
93:50 - get started link down here and open that
93:52 - in a new tab
93:55 - and it tells us how to get started here
93:57 - i'm going to scroll down
93:58 - so we've already created a firebase
94:00 - project and we've already registered our
94:02 - app with firebase
94:04 - so step three add firebase sdks and
94:07 - initialize firebase
94:08 - we want to click on using module
94:10 - bundlers here
94:12 - and so first of all we need to install
94:15 - firebase to our project
94:16 - so i'm going to copy this and jump to
94:19 - our terminal
94:20 - kill the dev process and run that
94:22 - command to install firebase
94:24 - okay that's finished installing we jump
94:26 - back to this firebase page
94:28 - it tells us how to initialize firebase
94:31 - with these two
94:34 - code samples here and we're going to add
94:36 - these to a boot file
94:37 - and again a boot file allows us to run
94:40 - code
94:41 - before our app starts so i'm going to
94:43 - jump to the quasar site
94:45 - on quasar cli and boot files
94:48 - and i'll jump down to when to use boot
94:50 - files so boot files
94:52 - fulfill one special purpose they run
94:54 - code before the apps
94:55 - view root component is instantiated
94:58 - while giving you access to certain
94:59 - variables
95:00 - which is required if you need to
95:02 - initialize a library interfere with view
95:04 - router
95:04 - inject view prototype or inject the root
95:08 - instance of the view app
95:09 - we don't need to do anything with view
95:11 - router or the view prototype or anything
95:13 - but we do want to initialize our
95:15 - connection to firebase before our app
95:17 - starts
95:18 - so that we have immediate access to our
95:20 - database when our app is ready and if we
95:22 - scroll down to
95:23 - usage of boot files it shows us how to
95:25 - generate a boot file we can just run
95:27 - quasar new boot and then the name
95:30 - so i'm going to jump back to the
95:31 - terminal and run quasar
95:34 - new boots and we'll call this firebase
95:37 - and it says it's generated a boot file
95:40 - in the source
95:40 - boot folder and we can see it there and
95:43 - it also says make sure to reference it
95:45 - in quasar.com.js
95:48 - and the boot section so i'm going to
95:49 - open up quasar.com.js
95:51 - and search for boot um we just need to
95:54 - add firebase
95:56 - to this array here and save that and now
95:58 - let's open up this
96:00 - firebase.js boot file and in a boot file
96:03 - we can't access the
96:05 - app the router and the view prototype
96:08 - but we're not going to need any of that
96:09 - stuff here so i'm just going to delete
96:10 - all of this
96:11 - and i'm going to jump back to that
96:12 - firebase page
96:15 - and copy this first example here
96:18 - and paste that in here and i'll get rid
96:20 - of all of these comments
96:22 - and we only need to import the modules
96:24 - that we need and we do need
96:25 - firebase from firebase app but we don't
96:28 - need analytics so i'll get rid of this
96:30 - line
96:30 - and we don't need auth we're not going
96:32 - to be doing any authentication
96:34 - but we do need firestore so i'll leave
96:36 - that there
96:38 - and i'll just get rid of these
96:38 - semicolons because i've not been
96:41 - generally using them and i'll jump back
96:43 - to this firebase page
96:44 - and it tells us how to initialize
96:46 - firebase in our app
96:47 - after we've imported all the modules we
96:50 - need so i'll copy
96:51 - this example and paste it into
96:54 - our boot file and i'll get rid of these
96:57 - comments
96:58 - and that config object that we saw
97:00 - before we need to put that in here
97:03 - so i'm going to jump back to this other
97:05 - page
97:06 - which was displayed after we created the
97:08 - web app
97:10 - i'm going to copy everything inside this
97:12 - config object
97:14 - i'll just paste that in here there's one
97:16 - more thing we need to do
97:18 - if we jump back to that firebase page
97:20 - and scroll down to
97:22 - step five and if we jump to cloud
97:24 - firestore which is what we're going to
97:25 - be using and scroll down
97:27 - to initialize cloud firestore so we just
97:30 - need to fire this
97:31 - firebase.firestore method and assign it
97:34 - to a variable
97:35 - so i'll just copy this line and paste
97:39 - that to the bottom and i'll change
97:40 - var to let and get rid of these
97:43 - semicolons
97:45 - and this db variable will give us access
97:47 - to our firestore database
97:49 - so we want to export that so that we can
97:52 - use it anywhere within our app
97:54 - so i'm just going to add export default
97:57 - and then db
97:58 - and save that and this boot file should
98:01 - be ready to go now
98:02 - and we should now have access to our
98:04 - firestore database with this db variable
98:08 - so i'm just going to launch our app with
98:09 - quasar dev make sure we don't have any
98:11 - errors
98:12 - and it's launched our app and we don't
98:13 - have any errors so let's grab the queets
98:16 - that we created in our database and
98:18 - display them in our app
98:21 - [Music]
98:25 - let's grab our queets from our quits
98:27 - collection in our database
98:29 - and display them within our app so i'm
98:31 - going to jump to the firebase docs page
98:34 - and over on the left here under cloud
98:36 - firestore i'm going to go to
98:38 - read data i'm going to jump to listen
98:41 - for real time updates
98:43 - i'm going to scroll down to view changes
98:46 - between
98:46 - snapshots and this code sample here
98:49 - will allow us to add real-time data sync
98:51 - to our app across our devices because
98:54 - this
98:54 - on snapshot here is a hook and this hook
98:58 - will be fired every time the data in the
99:00 - collection that we specify here
99:02 - changes and we can determine exactly
99:05 - what happened
99:06 - whether a document was added or modified
99:09 - or removed and then we can fire code
99:13 - to update our view accordingly so let's
99:16 - say we're using our app
99:17 - and somebody else say jim is also using
99:21 - our app
99:22 - and they add a new quite well this on
99:24 - snapshot hook will be fired
99:26 - on our device and we can determine that
99:28 - a quit was added
99:30 - and we can then add that quit that was
99:32 - added by jim
99:33 - to our view and likewise if jim modifies
99:37 - or removes a quit
99:38 - this hook will be fired and we can
99:40 - update our view on our device
99:42 - accordingly
99:43 - so it's using hooks like this in
99:45 - firebase which makes real-time data sync
99:47 - across devices
99:48 - possible so i'm going to copy this
99:50 - example
99:52 - and i'm going to jump back to our code
99:54 - and first we need to get access to this
99:56 - db variable in our home page so i'm
99:59 - going to jump to pagehome.view and then
100:01 - at the top of the script section
100:03 - i'm going to import db from and then the
100:06 - path
100:07 - to our boot file which is source slash
100:09 - boot
100:10 - slash firebase and we don't need to put
100:13 - in the
100:14 - dot js and then we want to trigger this
100:16 - hook that we just copied
100:18 - and we could do this in a mounted hook
100:20 - i'm just going to collapse the data
100:22 - and the methods and the filters we'll
100:25 - add a mounted hook at the bottom here
100:28 - before we paste in this hook i'm just
100:29 - going to clear out the hard-coded quets
100:32 - that we added
100:34 - so i'll just comment out these quits
100:36 - here
100:37 - and save that so that we know that any
100:40 - quets that appear here are coming from
100:42 - our database and i'm going to jump back
100:43 - down to this
100:45 - mounted hook and paste in this code
100:48 - sample
100:48 - i'm just going to fix the indentation a
100:50 - bit so this is going to access our
100:53 - database
100:53 - and it's going to grab the collection
100:55 - that we specify here
100:57 - and our collection is called quits
101:00 - so we want to put quits in here i'm just
101:03 - going to change these double quotes into
101:05 - single quotes and this dot where method
101:08 - is going to
101:09 - filter our results by some criteria
101:12 - and we don't need to do that we just
101:13 - want to grab all of our quits so i'll
101:15 - get rid of this
101:16 - where method i'm just going to move this
101:18 - on snapshot
101:20 - up to this line and nudge everything
101:22 - back
101:23 - so we're going to grab our quits
101:24 - collection and then every time that
101:27 - quits collection changes
101:29 - this on snapshot method will be fired
101:32 - which will return a snapshot of all of
101:34 - our data and then we can get an array of
101:36 - all of our changes by firing this
101:39 - dot changes method on the snapshot and
101:42 - then we're basically just
101:43 - looping through each of those changes
101:45 - and each of those changes will be an
101:47 - object
101:48 - which will have a type property which
101:50 - will tell us
101:51 - the type of change so whether a document
101:53 - was added
101:54 - modified or removed and we can also get
101:58 - access to the data which was
102:00 - added modified or removed so i'm just
102:02 - going to do a little bit of formatting
102:03 - here
102:04 - i'm going to select all these double
102:06 - quotes and replace them with
102:08 - single quotes because that's generally
102:10 - what i've been using
102:11 - and i'm going to get rid of any
102:13 - semicolons because i've not been using
102:15 - them
102:17 - i'm going to update the text in these
102:19 - console logs
102:20 - so instead of new city i'm going to put
102:22 - new quit
102:23 - and modified quit and removed queet
102:27 - so let's save this and see what gets
102:30 - logged out
102:31 - so i'll reload the page and open up the
102:34 - console
102:35 - and we can see new quick being logged
102:37 - out four times
102:39 - for each of our tweets because we have
102:41 - four in our database
102:43 - because this if statement here will be
102:45 - fired in real time whenever a document
102:48 - is added to our database
102:49 - but it will also be fired once for each
102:52 - document in our database
102:53 - when we first connect to the database
102:55 - which is why we're seeing these logs
102:57 - here
102:57 - and we have the data for each of our
102:59 - quits so what we can do here in this
103:02 - if statement is just push the data
103:04 - object for each of our quits
103:06 - to our quits array in our data and so
103:09 - our data is in here
103:11 - in change.data so instead of firing this
103:14 - out
103:15 - three times like that i'm going to put
103:17 - that in a variable
103:18 - at the top of this for each so i'll set
103:21 - up a variable
103:22 - called quit change set that equal to
103:26 - this
103:27 - change.data and i'll replace all of
103:30 - these
103:31 - with this variable so quit change
103:34 - and so what we can do now in this added
103:36 - if statement
103:38 - is just add this quick change object to
103:41 - our quits array and we should then see
103:44 - each of the tweets appear on the page
103:47 - so what we can do here is this dot quits
103:51 - on shift and pass in
103:54 - quit change uh let's save that and see
103:57 - if it's working
103:58 - i'll just reload that uh it doesn't seem
104:00 - to be working cannot read property quits
104:02 - of undefined
104:03 - and that's because these functions here
104:06 - are normal
104:06 - javascript functions so when we use the
104:09 - this
104:10 - keyword it will refer to this function
104:12 - here
104:13 - instead of our view instance so we can
104:16 - just change these functions to arrow
104:18 - functions
104:19 - so i'm just going to get rid of function
104:21 - and the first
104:22 - parentheses and get rid of this
104:25 - parentheses
104:26 - and i'll just add an arrow there and
104:28 - i'll do the same on this
104:30 - function as well let's save that and try
104:33 - it again
104:34 - uh we can now see our tweets on the page
104:37 - however these tweets are not in the
104:39 - correct order because this one at the
104:40 - top here
104:41 - is from two hours ago and these other
104:43 - ones are from one hour ago
104:45 - so we want to order these by date and if
104:48 - we jump back to the firebase page
104:50 - and jump to order and limit data we can
104:53 - use this
104:54 - order by method to order our data by a
104:56 - particular field
104:57 - so after db.collection quits i'm going
105:00 - to add
105:01 - dot order by uh we can just pass in date
105:04 - i'll save that and our quits are now in
105:06 - the correct order we see that all this
105:08 - one
105:08 - down at the bottom and this if statement
105:10 - here will now be fired
105:12 - whenever a quit is added to our
105:14 - collection in the database
105:16 - and so just to demonstrate that i'm
105:17 - going to jump to the database
105:19 - and drag it over here and just drag this
105:22 - over a little bit
105:23 - and i'll add a new quit here i'll use
105:26 - auto id
105:28 - add the content field i'll just grab a
105:31 - quote from that
105:32 - extension paste that in there add the
105:36 - date field
105:37 - set that to a number and i'm just going
105:39 - to use date dot now
105:41 - to grab the current date
105:44 - and paste that in here and hopefully
105:47 - when i click save we should see this new
105:49 - quit
105:50 - appear in our list of quits at the top
105:53 - there
105:53 - so i'll click on save and we see that
105:56 - new quit appear
105:59 - [Music]
106:03 - let's add the ability to add a tweet to
106:06 - our database to our quick collection
106:09 - when the user clicks this button
106:11 - because right now it's just adding the
106:13 - quick to our local
106:15 - quits array and so we do see it here but
106:18 - if we
106:18 - refresh the page then that data is gone
106:21 - so i'm going to jump to the
106:22 - add new quick method which is fired when
106:24 - we click this button
106:26 - and that's here so we still want to set
106:30 - up a new
106:31 - object like this and we still want to
106:34 - clear out this new quick content
106:37 - property which
106:38 - clears out this input but we no longer
106:41 - want to add this new object
106:44 - directly to our local quits array here
106:48 - what we want to do instead is add this
106:50 - nucle object
106:52 - straight to our firebase database to our
106:54 - quick collection
106:56 - because when we do that this on snapshot
106:59 - hook will be fired
107:00 - because we made a change to our
107:02 - collection and change.type will be equal
107:05 - to
107:06 - added so this if statement will fire and
107:09 - at that point the new quick will be
107:11 - added
107:11 - to our local quits array and then
107:14 - displayed on the page
107:15 - so we'll jump back up to this add new
107:18 - creep method and i'll comment out this
107:20 - line
107:20 - and what we want to do at this point is
107:22 - add this new quee object
107:25 - straight to our quits collection in the
107:27 - database so i'm going to jump back to
107:28 - the firebase docs page
107:30 - and i'm going to go to add and manage
107:32 - data and add data
107:35 - i'm going to scroll down to add a
107:37 - document
107:38 - and there are two ways we can add a
107:40 - document to a collection
107:42 - we can use this set method but if we use
107:45 - that method then we need to
107:46 - specify the id where that document
107:49 - should be stored
107:50 - but if you want to add a document and
107:51 - let firebase generate the id
107:53 - for us then we can use this add method
107:56 - so i'm just going to copy this
107:57 - code sample here and we'll paste it here
108:01 - in our add new creep method and i'll
108:03 - just fix the indentation
108:07 - i'm going to replace all the double
108:08 - quotes with single quotes
108:11 - and i'm going to remove the semicolons
108:15 - we want to access the quits collection
108:17 - so i'll change this here to quits
108:19 - and the data that we want to add is just
108:21 - this new quit
108:22 - object so we can just select this object
108:25 - in here
108:27 - i'll just paste in new quite
108:30 - and i'm just going to format this a
108:32 - little bit i'm going to move the then
108:34 - block
108:34 - up here then i'm going to move this
108:36 - catch block up here
108:37 - okay so let's save that and see if it's
108:39 - working so i'll add a new
108:41 - quit i'll
108:44 - click the button uh yeah we see it
108:47 - appear on the page
108:49 - uh let's just make sure it's been added
108:50 - to the database
108:52 - and yeah we can see it there uh let's
108:54 - make sure we can still see it if we
108:56 - reload and yeah we do
109:03 - let's add the ability to delete a quick
109:05 - from our quits collection
109:06 - in our database and before we handle
109:10 - actually removing a quick from the
109:11 - database when this delete button
109:14 - is clicked let's handle removing a quick
109:16 - from our local
109:17 - quits array in this on snapshot hook
109:20 - in this if statement here and we want to
109:23 - make all of our local
109:24 - state changes or all of our local data
109:27 - changes
109:28 - inside this hook the reason being again
109:30 - just to remind you
109:32 - this on snapshot hook will be fired
109:34 - every time the database changes
109:36 - so even if somebody on a completely
109:38 - different device adds modifies or
109:40 - deletes equate
109:42 - this on snapshot hook will be fired on
109:44 - our device
109:45 - and so we can add modify or remove the
109:48 - appropriate
109:49 - quet from our local state and update our
109:52 - view
109:52 - accordingly so it's making local state
109:55 - changes in this hook
109:56 - and only in this hook which makes live
109:58 - data sync
109:59 - across devices possible and so if equate
110:02 - is removed from our database then this
110:05 - if statement should be fired
110:07 - and we should see this console log being
110:09 - fired out
110:10 - so let's manually remove a quick from
110:12 - our database
110:13 - and see what we see so i'm going to drag
110:16 - the
110:16 - database over here and open up the
110:19 - console
110:20 - in our app i'll just clear the console
110:24 - uh let's delete one of these quits so we
110:27 - can just click on these buttons here and
110:28 - click on delete document
110:31 - and click on start delete uh we can see
110:33 - that log being fired out
110:35 - and we can see the data for that quick
110:37 - we can see the content property and the
110:39 - date property
110:40 - so now what we want to do at this point
110:43 - here
110:44 - is remove the same quick from our local
110:47 - quits array
110:48 - thus removing it from the view and we
110:50 - could remove it from our local
110:51 - quits array based on the date property
110:54 - however there's always the chance
110:56 - that multiple tweets could have the same
110:58 - date
110:59 - so it would be better if we could delete
111:01 - the tweet
111:02 - based on these ids which have been
111:05 - generated by firebase instead because
111:08 - these ids will always be
111:09 - unique but we don't currently have
111:11 - access to these ids right now we only
111:14 - have access to the content property
111:16 - and the date property however if we jump
111:19 - back to our
111:20 - on snapshot hook then we can actually
111:22 - get access to the id
111:23 - at change.doc.id like this
111:28 - change.id so let's add this id
111:31 - to our quick change object here which
111:34 - currently just contains
111:35 - the content and date properties so what
111:38 - we can do
111:39 - is add a new property to this quick
111:41 - change object
111:42 - and id property and set it to this id
111:46 - so we can just do quit change
111:50 - dot id equals change dot dot dot id
111:53 - so i'll save that and hopefully now when
111:56 - equate is removed from the database
111:58 - we should see the id in this
112:02 - quick change object as well
112:05 - so let's delete a document from our
112:07 - quits collection
112:08 - and see if we can see the id being
112:10 - logged out
112:12 - so i'll click on this and click on
112:13 - delete document
112:15 - and start delete we can see the quit
112:18 - object being logged out
112:20 - and we can now see the id as well in
112:23 - this new
112:24 - id property and we should see the ids in
112:26 - our local quits array as well
112:28 - so if i go to view devtools and
112:32 - try and find this page q page container
112:35 - and page home
112:37 - we can see our quits array here we do
112:40 - have the ids
112:41 - and currently if i jump back to page
112:44 - home dot view
112:45 - on our list of quits we're still using
112:47 - the date property as the key
112:49 - and it would be better to use these ids
112:51 - instead because we know they're always
112:53 - going to be unique
112:54 - so i'm just going to change the key to
112:56 - quit id
112:57 - instead and save that okay so now that
113:00 - we have the id
113:01 - of the quit that was deleted we can use
113:03 - that id to
113:05 - remove the same quet from our local
113:07 - quits array
113:08 - so i'm going to jump back down to uh on
113:10 - snapshot hook
113:12 - and this if statement here uh let's
113:14 - start by
113:15 - finding the index of the same queen in
113:18 - our local array
113:20 - so i'll add let index and then we can do
113:23 - this dot quits
113:26 - dot find index pass in a placeholder
113:30 - and a callback and we want to find the
113:32 - index of the queen where the quit
113:36 - dot id is equal to the id in this
113:39 - quick change object so i'll just put
113:43 - quit change dot id
113:46 - so that should give us the index and we
113:48 - can then just
113:49 - use the splice method to remove the quit
113:52 - at this position from the array so we
113:56 - can just do this.quits
113:58 - dot splice pass in the index
114:01 - and pass in one so that we only remove
114:04 - one item
114:04 - and let's save that and see if it's
114:06 - working i'll just reload the page
114:09 - and then clear the console and open up
114:11 - the
114:12 - firebase console let's delete a tweet
114:15 - so we'll delete this top one here so
114:17 - i'll delete that
114:19 - and hopefully we should see it disappear
114:20 - from the view
114:22 - and now we also want to delete a tweet
114:24 - from our database
114:25 - when this delete button is clicked as
114:27 - well because right now it's just
114:29 - deleting a quick from our local quits
114:31 - array but not from the database
114:33 - so let's jump to our delete quite method
114:37 - which is here and i'm just going to
114:38 - remove everything inside
114:40 - this method and let's find out on the
114:42 - firebase docs page
114:44 - how we can delete a document from our
114:46 - collection so
114:47 - over on the left here i'm going to jump
114:49 - to add and manage data and then delete
114:51 - data
114:52 - and so to delete a document we just need
114:55 - to
114:55 - specify the collection as usual and
114:58 - specify
114:59 - the document that we want to delete so
115:01 - we pass the
115:02 - document id into here and then we just
115:04 - fire this delete method
115:06 - so let's copy this example and paste it
115:09 - into this deletequit method
115:11 - i'm just going to fix the indentation
115:14 - remove the semicolons
115:15 - and replace the double quotes with
115:17 - single quotes
115:18 - and so we want to access the quits
115:20 - collection now we need to pass the
115:23 - document id that we want to delete in
115:24 - here and we're passing in the quit
115:26 - object of the quit that was clicked
115:29 - in here and so we have access to the id
115:33 - of the quick that was clicked at
115:35 - queet.id
115:36 - so we can just pass quit.id in here
115:40 - and so hopefully this should work now so
115:42 - i'll save that
115:44 - reload clear the console and i'll click
115:46 - on this delete button
115:48 - yeah it looks like it worked we saw it
115:49 - removed from the view and we see
115:51 - document successfully deleted which is
115:53 - coming from the
115:54 - then block on this delete method uh
115:57 - let's make sure it was removed from the
115:58 - database
116:00 - and yeah we only have one document in
116:01 - the database now okay so we've almost
116:03 - finished our app now there's just one
116:05 - more thing that i want to do
116:07 - [Music]
116:11 - so we can create read and delete our
116:14 - quits
116:15 - but we can't currently update them so
116:17 - let's complete our crud set up by adding
116:19 - the ability to
116:20 - update a quite one thing we could do is
116:23 - add the ability to
116:24 - like a quet when this heart button is
116:27 - clicked
116:28 - here so first let's just set up the
116:30 - front end for this
116:31 - because if a quit is light then we
116:33 - probably want this heart icon to be
116:36 - filled i'll maybe give it a color as
116:38 - well so i'm going to delete all of the
116:40 - tweets that are on firebase i'm just
116:42 - going to drag this
116:44 - back over here we only have one document
116:47 - left
116:47 - i'm going to delete this quick because
116:49 - we're going to need to add a new
116:51 - field to our quits so i'm going to
116:53 - delete this
116:56 - and jump back to our app and i'm going
116:58 - to uncomment these
117:00 - hard-coded tweets that we added before
117:03 - i'm going to add a new property to each
117:05 - of these
117:06 - called liked and i'll set one of these
117:09 - to false
117:10 - and then the other one to true and we're
117:12 - also going to need to add some id
117:14 - properties now
117:15 - because our v4 loop is now using
117:18 - an id property as the key so let's just
117:21 - add some
117:21 - dummy ids here so i'll just set these to
117:24 - id1
117:25 - and id2 and i'll save that
117:29 - and so this quit here is the one that's
117:32 - light
117:32 - one where light is set to true so we
117:35 - want this heart icon to
117:36 - look a bit different i would like it to
117:38 - be a filled icon if possible
117:40 - and a different color as well so we got
117:43 - this
117:43 - icon from font awesome so i'm going to
117:46 - jump to the quasar site
117:49 - and then the icon page
117:53 - and then i'll jump through to font
117:55 - awesome
117:56 - search for heart and scroll down so this
118:00 - is the one we're currently using
118:01 - but when a tweet is liked we could use
118:03 - this filled version
118:05 - so i'll click on that and i'll copy this
118:07 - example here
118:09 - let's jump up to this heart icon
118:12 - which is here and for now i'm just going
118:14 - to paste out this
118:16 - html that we copied down here
118:19 - so if the liked property is set to true
118:23 - then we want to set this icon prop to
118:26 - these classes here
118:27 - otherwise we want to set them to these
118:29 - classes so what we could do here
118:31 - is bind to the icon prop and add a
118:34 - ternary if statement here
118:36 - so if quit dot liked
118:39 - is true then we can spit out these
118:41 - classes
118:42 - so i'll paste that in these quotes here
118:44 - otherwise
118:45 - stretch this out a bit we can spit out
118:48 - these classes here
118:49 - and i'll just get rid of this icon prop
118:53 - i'll get rid of this i tag as well
118:56 - let's save that and see if it's working
118:59 - yeah this second one
119:01 - has a filled heart and the other one
119:03 - still has the outline heart and i'd also
119:05 - like to
119:06 - change the color as well so what we
119:07 - could do is bind to this color prop
119:10 - so colon colour and again if quetz.liked
119:13 - is true then we could try out putting
119:16 - pink as the color
119:17 - otherwise we'll just output gray and
119:20 - i'll get rid of this
119:21 - color prop and save that and yeah it
119:24 - seems to be working we now have this
119:25 - lovely pink heart okay so our front end
119:28 - is now ready to display quits which are
119:30 - liked
119:31 - so let's comment out these hard-coded
119:34 - quits
119:35 - in this quick array and save that and
119:38 - when we add a new quit
119:39 - now we're going to have to make sure
119:41 - that tweet object that we pushed to
119:43 - the database has this new light property
119:47 - so i'm going to jump to add new quick
119:49 - this method and when we
119:50 - set up the new quit object here we also
119:53 - need to add this
119:54 - light property and that should be set to
119:57 - false by default
119:59 - so i'll save that and reload
120:02 - uh let's just add some quits here and
120:04 - make sure
120:05 - that the quits in the database have this
120:08 - new
120:08 - light property so i'm just going to use
120:10 - this quotes extension to
120:12 - add a load of quotes
120:16 - uh let's jump to the database you can
120:18 - see our new documents here
120:20 - and yeah they all have this light field
120:24 - so let's change one of them to true
120:28 - and update that and reload the page
120:33 - and yeah we can see this one has our
120:35 - pink and filled heart
120:37 - so before we handle the click event on
120:39 - this button
120:40 - let's just make sure our view gets
120:43 - updated
120:44 - when this on snapshot hook is fired when
120:47 - a quit
120:47 - has been modified so let's first of all
120:50 - grab the
120:50 - index of the tweet that was modified in
120:54 - our local quits array
120:56 - so i'm just going to copy this line here
120:57 - from the removed
120:59 - if statement and paste that here so this
121:02 - will give us the index
121:03 - of the quick that was modified and the
121:05 - modified data will be in this
121:07 - quick change object so what we could do
121:10 - is use
121:10 - object assign to copy the data from this
121:14 - object
121:14 - which has come from the database to the
121:17 - quit
121:18 - object in our local quits array
121:21 - at the position of index
121:24 - thus updating the appropriate quite in
121:27 - the view
121:27 - so what we can do here is object dot
121:30 - assign
121:31 - and first we want to pass in the object
121:32 - that we want to assign to
121:34 - which is the object in our local quits
121:36 - array at the position of index
121:38 - so we can just do this dot quits square
121:40 - brackets
121:41 - index and the second parameter we pass
121:44 - in the data that we want to copy
121:46 - here so we can just pass in quick change
121:50 - i'll save that and reload the page
121:54 - and if we jump to the database let's
121:56 - drag it over here
121:58 - and this document where light is set to
122:00 - true this one here
122:02 - let's change this back to false and we
122:04 - should hopefully see
122:06 - this heart change back to the
122:09 - deactivated version so i'll set this to
122:12 - false then click
122:12 - update and yeah it seems to be working
122:16 - i'll just change it back to true again
122:21 - and yeah that all seems to be working so
122:24 - i'll set this back to
122:26 - false okay so now all we need to do
122:29 - is handle the click on this heart icon
122:32 - so when the user clicks this button
122:34 - then we want to update the appropriate
122:37 - tweet
122:38 - in our quits collection on firebase so
122:41 - i'm going to jump to
122:42 - this heart button which is here and add
122:45 - a click handler
122:46 - so at click and this is going to be a
122:48 - toggle because we're going to be able to
122:50 - toggle between
122:51 - light and not light so we'll trigger a
122:53 - method called
122:55 - toggle light and we'll pass in our qui
122:58 - object so that we have access to the id
123:01 - in this method because we're going to
123:03 - need that to update the appropriate quit
123:05 - on firebase and we'll create this method
123:08 - in our methods object
123:10 - so toggle quet pass in the queet
123:16 - and for now let's just log out toggled
123:18 - actually i've spelt that wrong that
123:19 - should be toggle
123:20 - quick so we'll just log out toggle quit
123:23 - here
123:24 - we'll log out the tweet as well so save
123:26 - that
123:27 - uh reload uh click on one of these heart
123:29 - buttons
123:30 - toggle light is not a function let me
123:33 - just jump back to that click handler
123:35 - uh this should be toggle light so save
123:38 - that
123:38 - i'm still seeing an error here why is
123:42 - that
123:42 - oh this should be toggle lights not
123:44 - toggle queen so i'll just update that
123:46 - okay save that let's reload uh click on
123:50 - one of these
123:50 - like buttons yeah we can see toggle
123:53 - light
123:53 - we can see the tweet that was clicked
123:57 - we have the id there so we can use that
124:00 - to
124:00 - update the appropriate tweet in our
124:02 - quick collection
124:03 - on firebase so i'm going to jump back to
124:05 - the firebase docs
124:07 - i'm going to jump to add data and update
124:10 - a document so again we just do
124:12 - db.collection and the name of the
124:14 - collection
124:16 - then we fire the doc method and pass in
124:18 - the id
124:19 - of the document we want to update let me
124:22 - just fire this
124:23 - update method and pass in an object with
124:26 - the new
124:26 - data so i'm just going to copy all of
124:29 - this
124:30 - and paste it into this toggle light
124:32 - method and instead of having this ref in
124:34 - a variable i'm just going to copy
124:36 - this ref and paste it here
124:40 - get rid of this comment and get rid of
124:41 - that var i'm just going to
124:43 - fix the indentation get rid of these
124:46 - semicolons
124:48 - and replace the double quotes so we want
124:51 - to do db.collection
124:53 - and we want to pass quits in here and
124:54 - then we want to pass the id
124:56 - of the document that we want to update
124:57 - in here and that's going to be our quit
125:01 - dot id so we can just put queen.id in
125:03 - here
125:04 - what do we want to update we want to
125:06 - update the light
125:07 - property and we want to set it to the
125:09 - opposite of this quite's
125:11 - current liked property so if that's
125:13 - currently false we want to set
125:14 - it to true and if it's currently true we
125:16 - want to set it to false
125:18 - so we can just set liked to the opposite
125:20 - of
125:21 - queet.liked okay so let's save that and
125:24 - see if it's working
125:25 - i'm gonna reload the page uh right now
125:28 - none of our tweets are liked
125:29 - let's click on a like button and it
125:31 - seems to have worked we see it change
125:33 - in the view and we see documents
125:35 - successfully updated
125:36 - which means this then block is being
125:38 - fired and let's make sure it worked on
125:40 - firebase
125:43 - so it was this tweet here and yeah light
125:45 - is set to true
125:46 - let's make sure we can toggle it back
125:48 - again
125:49 - oh yeah we saw that change on firebase
125:51 - there okay we're almost ready to start
125:53 - deploying this up to
125:55 - different platforms we just have a
125:56 - couple of tiny little issues that we
125:58 - need to fix
126:04 - okay we just have a couple of final
126:06 - issues to fix
126:07 - and the first one is when we're looking
126:09 - at this in the mobile view
126:11 - when we click on this button our left
126:13 - draw is all
126:14 - messed up and this is being caused by
126:17 - this
126:18 - full screen class which we added to this
126:20 - cue scroll area
126:22 - which is surrounding everything that's
126:24 - on our home page because if we
126:26 - inspect this element and look for this
126:31 - scroll area which is here and we look at
126:34 - this
126:35 - full screen class it's adding a z index
126:37 - of 6000
126:38 - which is placing this q scroll area
126:42 - above the left draw however there's some
126:45 - other classes that we can use instead of
126:47 - this
126:47 - full screen class if you go to this
126:50 - other css helper classes page
126:52 - on the quasar site we can use this
126:56 - full height class and this full width
126:58 - class instead
127:00 - to make the cue scroll area full width
127:02 - and full height
127:03 - without adding that z index so i'm just
127:06 - going to replace this
127:07 - full screen class on the cue scroll area
127:09 - with full width
127:10 - and full height and save that
127:13 - let's reload the app and that's now
127:16 - fixed
127:17 - let's just make sure this cue scroll
127:18 - area is still okay if we have a load of
127:20 - tweets
127:22 - so i'll just add a load of new
127:25 - and it still looks okay
127:28 - and it looks okay on desktop as well and
127:31 - the other issue we need to fix
127:33 - is to do with our on snapshot hook
127:36 - this hook is currently being initialized
127:39 - every time we hit the home page
127:42 - so if i reload the page we see all these
127:45 - new logs from firebase or if we clear
127:48 - the console
127:49 - and jump to the about page and jump back
127:52 - to the home page
127:54 - we see them all being logged out again
127:56 - and also if i clear the console
127:57 - and click on a like button you can see
127:59 - this modified quit
128:01 - log being logged out twice and that's
128:03 - because we visited this home page
128:05 - twice so this hook has been set up
128:08 - two times and we only want to set this
128:10 - hook up once
128:12 - and never again after that and we can
128:14 - fix this quite easily
128:15 - by just making the pages of our app keep
128:18 - alive
128:19 - in the background so that when we
128:21 - navigate from page to page the page that
128:23 - we just left
128:23 - keeps alive keeps running but we just
128:25 - don't see it and to do this we want to
128:27 - go to main layout.view
128:29 - on this cue page container component and
128:31 - this router view component here
128:34 - is where our pages are rendered and if
128:36 - we want to make this router view
128:37 - keep alive thus making our pages keep
128:40 - alive
128:42 - then we can just surround this in keep
128:44 - alive tags
128:45 - like this so i'll save that and i'll
128:48 - reload the app
128:49 - so we see all of our new create logs and
128:52 - if i jump to
128:53 - the about page i'll just clear the
128:55 - console and then back to the home page
128:58 - then we don't see those logs again and
129:00 - if i click on a like button
129:02 - we only see one log from our on snapshot
129:05 - hook so let's just make sure everything
129:07 - is working
129:07 - in both desktop view and mobile view
129:10 - so we'll do desktop first so i'll reload
129:13 - the app
129:15 - and we can navigate our pages we can
129:18 - toggle
129:18 - the left draw and our quick button is
129:20 - disabled when there's no text in here
129:23 - let's just make sure the character limit
129:25 - is working
129:29 - yeah that's working we can add a quick
129:33 - uh we can like a quit we can delete a
129:36 - quit
129:37 - if we reload the quick that we just
129:39 - deleted has been removed
129:41 - let's just check everything in mobile
129:43 - view i'm going to use the device
129:45 - toolbar and set this to iphone 678 plus
129:49 - so i'll reload the app okay so we can
129:53 - toggle the left draw and we can navigate
129:56 - our pages
129:57 - uh let's make sure the character count
129:59 - is working
130:02 - yeah that's working um we can add a
130:05 - quick
130:06 - uh we can like a quit uh we can delete
130:10 - a create as well okay so quitter is now
130:13 - complete and it's working great in the
130:15 - browser
130:15 - in both desktop layouts and mobile
130:18 - layouts
130:18 - so it's finally time to create some real
130:21 - apps out of this sucker
130:22 - for ios android mac and windows
130:30 - let's get quitter running as a mac up
130:33 - and you do need to have a mac in order
130:35 - to do this
130:35 - and if you're on a mac this is super
130:37 - simple you just need to jump to your
130:39 - terminal
130:40 - i'm going to open up a new terminal
130:41 - because i want to keep the web version
130:43 - running
130:44 - and then we just need to run quasar dev
130:47 - dash
130:47 - m for mode electron because quasar
130:50 - desktop apps use the
130:52 - electron framework and i'll just fire
130:54 - that
130:55 - and we can now see quitter running as a
130:57 - markup and by the way if you're on
130:59 - windows and you run the command that we
131:01 - just ran
131:01 - you should see the windows version of
131:03 - the app launching in development mode
131:05 - and if we go to view and toggle
131:08 - developer tools
131:10 - we can even open up some developer tools
131:12 - for the mac version of our app
131:13 - and one thing that's really great is
131:15 - that we now even have
131:17 - view dev tools integrated and this
131:20 - wasn't here the last time i checked
131:22 - so this is pretty badass and we're
131:24 - seeing the mobile layout by default
131:26 - because this window is a little bit
131:28 - small by default
131:29 - although we can resize it up but what we
131:32 - can do to fix that
131:33 - is set a width for this browser window
131:37 - and set a minimum width as well
131:39 - so i'm going to jump to the code and if
131:42 - we look in our project
131:45 - we can see quasar has generated a new
131:47 - folder source electron
131:49 - and if we go to main process on electron
131:52 - dash main
131:53 - we can use this file to customize all of
131:55 - the stuff that happens in the main
131:57 - process
131:58 - so the native app side of the process
132:01 - and we can do
132:02 - all sorts of stuff here so we can
132:03 - customize these menus
132:05 - at the top add our own menus and options
132:08 - and trigger code when those options are
132:11 - clicked on
132:12 - we can set up a menu bar icon for our
132:15 - app up here
132:16 - we can interact with the user's file
132:18 - system and all sorts of stuff but for
132:20 - now i'm just going to give this
132:21 - browser window a width and a minimum
132:24 - width as well
132:25 - so i'm going to scroll down this file
132:27 - and here's where it's
132:28 - initializing our browser window and you
132:30 - can see these width and height
132:32 - properties here and if you want to see
132:34 - all of the available options
132:36 - then just google electron browser window
132:40 - and jump to this page and you can find
132:43 - all of the different options here
132:46 - so there's tons of stuff we can do and
132:48 - we do have a
132:50 - min width property and a min height
132:52 - property
132:54 - so i'm just going to set this width
132:55 - property to 1024
132:58 - which i think is the starting width of
133:00 - our desktop layout
133:02 - i'll also add a min width property and
133:04 - set it to the same 1024
133:07 - if i save that it will relaunch our app
133:10 - and it's made our window a little bit
133:11 - bigger and we now see the desktop layout
133:14 - and we can resize it up but we can't
133:16 - resize it any smaller than 1.024
133:19 - okay so let's make sure everything is
133:20 - working so we can get to
133:23 - our two pages we can toggle the left
133:26 - draw
133:27 - we can display all of our quits and
133:29 - scroll down them
133:30 - let's see if the character limit and
133:33 - counter are working
133:34 - and yeah they're working and we can add
133:36 - a new quit
133:38 - we can like a quit and we can delete a
133:41 - quit
133:41 - as well i'll just demonstrate the live
133:44 - data sync across
133:45 - devices and when i launched the mac
133:47 - version it did kill
133:48 - my browser version so i just had to jump
133:52 - back to the terminal
133:53 - with the browser version running and
133:55 - kill the process and run
133:57 - quasar dev again but if i just get the
134:00 - electron version on the left and the
134:02 - browser on the right
134:04 - and if i add a new tweet here hey
134:07 - what's going on i'll click on quit
134:11 - we see the same tweak pop up instantly
134:13 - on the mac version
134:15 - and likewise if i like equate on the mac
134:17 - version
134:19 - we see it update instantly on the web
134:21 - version and if i delete equate on the
134:24 - map version we see it deleted instantly
134:27 - on the browser version so we now know
134:29 - for sure that all of our cross device
134:31 - live data sync is working
134:34 - [Music]
134:38 - let's get this running as a windows app
134:41 - and if you're on windows then you can
134:42 - just run the command that i ran before
134:44 - quasar dev dash m electron but i'm on a
134:47 - mac here
134:48 - so i'm going to build the windows
134:50 - version for production
134:52 - and then i'm going to launch it in a
134:53 - windows 10 virtual machine
134:55 - and to get quasar to build the windows
134:58 - version we need to make a change to our
134:59 - config file
135:01 - so i'm going to open up quasar.com.js
135:03 - and i'm going to search for electron
135:06 - uh in this packager option here we need
135:08 - to add an option
135:09 - of platform and we need to set that to
135:12 - win 32 and save that and now we just
135:16 - need to go to the terminal and instead
135:18 - of running quasar dev
135:19 - dash m electron we run quasar build
135:23 - m electron so i'll fire that
135:29 - okay it says build succeeded and by the
135:31 - way if it doesn't succeed
135:32 - then you might be able to fix this by
135:34 - just deleting your node modules folder
135:37 - and running npm install and then running
135:39 - the build command again
135:41 - and it says it's i'll put it to the dist
135:43 - slash
135:44 - electron folder and we can see that disk
135:46 - folder here
135:48 - and this electron folder and our windows
135:51 - app is in here
135:53 - stretch this out a bit and we can see
135:56 - our exe file here
135:57 - and i'm going to launch this exe in a
136:00 - windows 10 virtual machine
136:01 - i'm going to use virtualbox to do this
136:04 - and there is a little bit of setup
136:05 - involved here
136:06 - you need to download virtualbox from
136:14 - virtualbox.org so you need to download
136:17 - and install
136:18 - that and then you need to download a
136:20 - windows 10 virtual machine
136:22 - so if you just google windows 10
136:24 - virtualbox
136:27 - and jump to this page on the microsoft
136:30 - site
136:32 - then you can download a windows 10
136:34 - virtual machine for virtualbox here
136:36 - once that's downloaded and unzipped
136:40 - you should see a couple of files like
136:42 - this a vmdk
136:44 - file and an ovf file and if there's a
136:46 - third file
136:47 - with the file extension mf then you want
136:50 - to delete that file
136:51 - because it can stop you from importing
136:53 - the virtual machine
136:55 - properly and then you just want to
136:56 - double click this ovf file
136:58 - and it should add the virtual machine to
137:00 - virtualbox
137:01 - and you also want to go to settings and
137:04 - then shared folders
137:06 - and you want to share the folder on your
137:07 - mac where you keep all your projects by
137:09 - clicking on this button here
137:11 - so that you can get access to the
137:13 - generated exe file
137:16 - and then you can just launch your
137:17 - virtual machine by double clicking on it
137:19 - okay it's launched my virtual machine so
137:21 - i'm going to go to
137:22 - windows explorer then i'm going to go to
137:25 - network
137:26 - and we see this vbox server computer
137:29 - if we go in there i can see the folder
137:31 - that's on my mac
137:32 - that i've shared with this virtual
137:34 - machine so i'm going to go in there
137:36 - and jump down to the quitter folder
137:41 - uh dist and electron and
137:44 - i'm going to copy this folder with our
137:46 - app and paste it on the desktop
137:49 - and then i'm going to jump into that
137:51 - folder
137:53 - and we can see the exe file there and
137:55 - i'm going to launch that
137:57 - and we now see quitter running as a
137:59 - windows app
138:00 - and this is going to be a little bit
138:01 - slow because we're in a virtual machine
138:03 - here
138:03 - but on a real windows device the
138:05 - performance would be much better
138:07 - and let's just see if it's obeying our
138:09 - minimum
138:10 - width which we set in the process file
138:12 - and it is
138:13 - i can't resize it down any more than
138:15 - that uh let's make sure everything is
138:17 - working
138:19 - so we can get to both of our pages we
138:22 - can toggle
138:22 - our sidebar and we don't have a line
138:25 - along the top here
138:27 - however quasar has some classes which
138:29 - get added to the body
138:30 - that you can use to target particular
138:32 - platforms so what you could do is
138:34 - add a border to the top of the app but
138:37 - only on windows
138:38 - just to make this look a little bit
138:40 - better so we can display our quits
138:43 - and we can scroll down them uh let's see
138:46 - if we can add one let's check the
138:50 - character counter as well and yeah that
138:53 - seems to be working
138:54 - i'll click on queen and it's added our
138:57 - queen
138:58 - and we can like equate and we can delete
139:01 - a queet as well
139:07 - let's create an ios version of quitter
139:10 - and you do need to have a mac
139:12 - to do this although as a side note a
139:14 - couple of my students have told me that
139:16 - they managed to create
139:17 - ios and mac apps using a windows
139:20 - computer
139:21 - and i believe they used vmware and it's
139:23 - not something that i've tried
139:25 - so i can't confirm if it's possible but
139:27 - it might be worth investigating
139:29 - if you are on windows and you're
139:31 - interested in creating ios and mac apps
139:33 - but generally speaking you need a mac
139:35 - and you also need to have xcode
139:38 - installed
139:39 - and you can download this from the mac
139:40 - app store
139:42 - although i recommend downloading it from
139:44 - the apple developer site at
139:46 - developer.apple.com
139:48 - download more and you also need to have
139:51 - cordova installed globally
139:53 - because quasar mobile apps use the
139:55 - cordova framework
139:56 - and if you go to the quasar site and
139:58 - quasar cli
140:00 - and developing chord over apps and
140:03 - preparation
140:05 - shows you how to install code over there
140:07 - so you just need to fire this command
140:09 - and if you have trouble installing that
140:11 - you might need to add sudo to the start
140:14 - um once that's all set up we can then
140:16 - launch our app in the ios simulator so
140:18 - we just need to jump to our terminal
140:20 - and run quasar dev dash m for mode
140:24 - cordova dash capital t and
140:27 - ios and it's asking for a call over
140:31 - app id here and this id will be used by
140:34 - the app stores if you decide to deploy
140:37 - your app to
140:37 - the app stores so you need to be 100
140:40 - sure that this
140:41 - id is unique and one way that you can
140:44 - make sure it's unique is by using
140:45 - a reverse domain style id such as
140:51 - com.dannyconnell.quitter
140:53 - it's pretty unlikely that somebody else
140:55 - would have used this id
140:58 - and it started up the ios simulator and
141:01 - it's launched our app
141:02 - as an ios app and shortly after it
141:04 - started up
141:06 - we can see the elements from our app but
141:08 - then they disappear
141:09 - and this might be because we're using
141:11 - the ui webview
141:13 - to basically display our app within this
141:16 - native app that's been created by quasar
141:18 - and it's highly recommended that you
141:20 - install the wk webview plugin because
141:23 - the older ui webview is now
141:25 - deprecated and apple will soon begin
141:28 - rejecting
141:28 - apps which use the older webview
141:32 - [Music]
141:35 - and if you go to the quasar site and
141:38 - search for wk
141:39 - webview and jump to switching to ios wk
141:43 - webview
141:45 - tells us how to install this so
141:47 - hopefully installing this will
141:49 - fix this issue although weirdly if we go
141:51 - to the about page
141:53 - and back to the home page then it works
141:55 - again
141:56 - but anyway i'm just going to install
141:57 - this plugin so i'm going to copy this
142:00 - command
142:01 - jump to the terminal we need to cd
142:04 - into this source card over folder that
142:07 - it's created
142:09 - so cd source card over
142:12 - i'll run that command i just copied and
142:14 - that's installed
142:16 - and we also need to add this preference
142:19 - to the ios section of the cordova
142:22 - config file and that's just in the root
142:24 - of this
142:25 - source code over file and that's here
142:27 - config.xml
142:30 - so i'm going to scroll down to this
142:32 - platform
142:33 - ios section i'm going to copy this
142:36 - preference tag here
142:38 - and paste that here and i'll save that
142:41 - i'll cd back up to our project folder
142:45 - and try running the dev command again so
142:48 - quasar dev dash m cardover
142:50 - t ios and while we're waiting i'm just
142:54 - gonna
142:55 - delete the app that it's already
142:56 - installed
142:58 - just to avoid any caching issues
143:02 - now we'll just wait for this app to
143:03 - start up so i've not been able to figure
143:05 - out what's going on here
143:06 - but i have just noticed that this
143:08 - simulator is running a really old
143:10 - version of ios
143:11 - 12.2 and the current version is 14
143:14 - something
143:15 - so let's try and launch this up on ios
143:18 - 14 and see if it works
143:20 - so i'm just going to close this
143:21 - simulator and kill this process
143:25 - and to get a list of the available
143:27 - simulators we can cd
143:28 - into the source code over folder and run
143:32 - cordova
143:33 - run ios dash list
143:36 - and it will give us a list of all of the
143:38 - available simulators
143:40 - so let's try the iphone 12 on ios
143:43 - 14.3 so what we can do here is copy this
143:48 - device name and jump back up to our
143:51 - project folder
143:52 - and we can run the same command again
143:54 - quasar dev dash m card over dash capital
143:57 - t
143:57 - ios but then we add an extra flag dash e
144:01 - for emulator and then in quotes we can
144:04 - just paste
144:05 - this device name that we just copied
144:07 - let's give that a try
144:11 - and this time it started up the iphone
144:13 - 12 on ios 14.3
144:16 - so fingers crossed it'll work on this
144:18 - simulator uh great it seems to have
144:20 - started up no problem
144:21 - on the ios 14 simulator and just to
144:25 - confirm that i'm just going to close the
144:26 - app
144:27 - and launch it again and yeah starting up
144:30 - okay
144:31 - and let's make sure everything is
144:33 - working
144:34 - so the left drawer is working and we can
144:38 - get to our pages
144:39 - you can see all of our quits and we can
144:42 - scroll down them
144:43 - no problem uh let's just make sure this
144:45 - input is working
144:50 - and yeah it's counting the characters
144:52 - and just to check the character limit
144:54 - i'm just gonna
144:56 - copy the text from one of these other
144:57 - tweets
144:59 - and paste that in here
145:05 - paste it again
145:08 - and just type a few more characters
145:11 - and yeah stopping us at 280 characters
145:15 - and let's see if we can actually add the
145:16 - tweet
145:19 - yeah it seems to have added it no
145:20 - problem and we can like
145:23 - quits and we can delete them as well
145:27 - [Music]
145:31 - okay finally let's create an android
145:34 - version of our app and there's a little
145:35 - bit more setup involved
145:37 - for android but if you go back to this
145:40 - preparation for called overwrap
145:41 - page on the quasar site which you can
145:44 - find at
145:45 - quasar cli developing chord overlaps and
145:48 - preparation
145:49 - it tells you everything you need to do
145:51 - here so after installing card over
145:54 - you need to download android studio and
145:57 - follow some
145:58 - installation steps and then after that's
146:00 - installed you need to use this
146:02 - sdk manager tool which comes with the
146:04 - android sdk and use that to
146:06 - accept some licenses and then you need
146:09 - to add
146:10 - the android installation to your path
146:12 - and it gives you some instructions on
146:14 - how to do this
146:16 - on mac linux and windows
146:19 - on windows you also need to install some
146:22 - other software as well
146:23 - but just read through all these steps
146:24 - and follow them very carefully but i'm
146:26 - just going to
146:27 - launch android studio
146:31 - then i'm going to click on this
146:33 - configure button and go to the avd
146:35 - manager
146:36 - android virtual device manager and i
146:39 - have an android virtual device set up
146:41 - here
146:42 - pixel 2 xl so i'm going to click on this
146:44 - play button
146:45 - to launch this emulator and now that the
146:49 - emulator has fully started up
146:51 - we can now launch our app on it so we
146:53 - just need to go to our terminal
146:55 - and instead of running quasar dev dash m
146:58 - card over dash t
146:59 - ios we want to run the same command but
147:01 - with android after the capital t
147:03 - flag
147:08 - and we now have an android version of
147:09 - our app and it seems to have launched
147:11 - okay
147:12 - let's make sure it's working so we can
147:15 - get
147:16 - to our different pages you can see all
147:19 - of our tweets
147:20 - we can scroll down them
147:23 - let's see if we can add a quet
147:32 - click the button and yeah it's added it
147:35 - uh let's see if we can light them yep
147:38 - seems to work
147:39 - and delete yeah seems to be working as
147:42 - well
147:42 - so we created an app with a beautiful
147:44 - front end
147:45 - a nice simple back end and live data
147:49 - sync across
147:49 - all the different devices and we
147:51 - deployed it to all these different
147:52 - platforms
147:53 - all thanks to the amazing quasar
147:55 - framework as well as vue.js and
147:58 - firebase and there's a lot more that you
147:59 - would probably want to add to this app
148:02 - such as adding a custom icon and splash
148:04 - screen
148:05 - and customizing the menus for the
148:08 - electron app
148:09 - handling errors and adding loading
148:11 - screens
148:12 - adding a settings page setting up some
148:14 - kind of state management for the app
148:16 - using something like
148:17 - vue x and breaking up your app into
148:20 - child components to make it more
148:21 - manageable
148:22 - and you can learn about many of these
148:23 - things and more at my youtube channel
148:26 - so please check it out at danny's dot
148:28 - link slash youtube
148:29 - and the link will be in the description
148:31 - and huge thanks to free code camp for
148:33 - hosting this video
148:34 - and thanks to you for watching
148:41 - [Music]
148:47 - [Music]
148:50 - you