00:00 - hi everybody my name is Logan Huskins
00:02 - and I guess just a little bit about me
00:03 - before we get started I am a software
00:07 - developer I work at love's travel stops
00:09 - I've been writing node at work pretty
00:12 - much exclusively for the last nearly
00:14 - three years married my wife showed up
00:17 - that's pretty exciting
00:18 - glad she gets to see me talk I also
00:22 - helped run oklahoma city in oklahoma
00:24 - city mechanical keyboard user group so
00:26 - if you're into my kind of keywords hit
00:27 - me up and we can I can show you where
00:29 - all that stuff's at it's pretty it's
00:30 - pretty pretty dorky but I have so my
00:35 - plan with this talk is basically I'm
00:37 - gonna give some height as I'm really
00:38 - like high level concepts on some stuff
00:39 - and if it's complete another nonsense as
00:41 - most of it will be initially I will
00:44 - circle back to pretty much every bullet
00:45 - point I have and kind of explain more in
00:46 - depth what those things are but if you
00:51 - have questions before that if you have
00:52 - questions after that just kind of wave
00:54 - at me get my intention I'm be happy to
00:56 - answer as many questions as I can so I
01:02 - let's start off with what nodejs is and
01:04 - this is pretty much right off the bat
01:06 - gonna sound like nonsense and like I
01:07 - said I'll circle back on everything no
01:09 - js' is a JavaScript runtime built on top
01:11 - of Chrome's v8 engine it is scalable
01:15 - event-driven has fast asynchronous IO
01:17 - which is input/output it's generally
01:20 - used to make web servers and developer
01:22 - tools so first thing right off the bat
01:28 - is talking about v8 if you have no
01:31 - before you've probably not really heard
01:33 - much about V a v8 is the JavaScript
01:35 - engine inside of chrome that is used to
01:37 - execute execute the JavaScript you have
01:40 - on your website so if you ever have
01:41 - built a website with JavaScript whether
01:44 - using just plain JavaScript using
01:45 - angular react Jas anything like that
01:49 - when you run that application inside of
01:52 - a web browser the part that actually
01:53 - executes the JavaScript is v8 if you're
01:56 - using Chrome the cool thing about v8 is
01:59 - it's not actually tied to chrome itself
02:01 - it can be embedded into any C++
02:04 - application it's cross-platform
02:06 - so it runs on basically any operating
02:10 - system
02:11 - you would expect a user to have Windows
02:14 - Mac OS which be Chen's BSD stuff like
02:16 - that the C++ application that it is used
02:20 - in that we're talking about is note so
02:21 - it is basically VA outside of the
02:24 - browser and embedded into a separate
02:27 - runtime for JavaScript on top of that
02:29 - note provides a lot of libraries that
02:31 - aren't initially available in v8 and
02:33 - we'll run through a couple of those so
02:37 - I'm going to go through some quick
02:39 - examples to show exactly what that means
02:41 - up until this point what questions you
02:43 - guys have anything all right
02:47 - first example we're just gonna do a
02:53 - simple hello world application if you
02:56 - guys have ever programmed anything I've
02:58 - sure you seen this before but this is
03:00 - just who all in here doesn't have
03:03 - experience in JavaScript before I get
03:05 - started in this they didn't have to be a
03:06 - lot of experience just like any
03:07 - experience okay good so I won't explain
03:11 - what console.log is but
03:23 - and right there it's printed out hello
03:25 - world so how we ran this application is
03:26 - we just call the node executable and
03:29 - told out what script we wanted to run
03:30 - and then it'll run through that script
03:32 - and without a browser it will execute
03:34 - all the JavaScript in it I know this is
03:36 - a super exciting example but it goes to
03:39 - show just the ability to run JavaScript
03:41 - without at web browser so we'll go to a
03:45 - little bit more in-depth example that
03:46 - show some stuff that you couldn't
03:47 - necessarily do in Chrome
03:56 - and I'll go ahead and run through what
03:58 - this code does before I run it the first
04:00 - thing it does is it prints hello world
04:01 - for you guys again
04:02 - then it accesses a global variable
04:04 - that's a part of know called process
04:06 - which is something that's note specific
04:08 - and you don't you don't really do in the
04:09 - browser and it's a lot of metadata about
04:13 - what application you're running and a
04:14 - lot of global thing you're gonna paddle
04:15 - things to it so if you have variables
04:18 - that you set outside of the application
04:19 - or something like that and we're
04:21 - accessing the arguments on it so
04:22 - basically I want to call this
04:23 - application and pass arguments and then
04:25 - it's going to iterate through all those
04:27 - arguments and print out what the values
04:30 - of them all are and then it'll print
04:31 - we're done when we're done
04:42 - so what it's done is it rated through
04:45 - all those arguments it actually took the
04:47 - executable of no that's the first one
04:49 - it took the script that we gave it as a
04:51 - second one and then all the things that
04:53 - I passed it from there on this shows
04:57 - that we can basically use things from
05:01 - our operating system that aren't that
05:03 - don't have to do with our browser so I
05:04 - can pass it anything I want to a lot of
05:06 - people will use us to do environment
05:09 - variables so if you have things like
05:11 - secrets that you don't want to actually
05:13 - store in your code passwords to services
05:16 - database keys stuff like that they'll
05:18 - get passed in and sort of a similar
05:20 - fashion depending on how you set up your
05:21 - application what questions do you guys
05:26 - have about those before I go back to the
05:27 - slides well so you you can pass a third
05:34 - argument to 4h or it returns a third
05:37 - argument that is the actual array itself
05:38 - and if you wanted to you could check the
05:39 - length of that array but what 4-h does
05:41 - is it iterates over the array and it
05:43 - stops up the last element of it so you
05:45 - won't go over however many there are so
05:47 - if it takes all those arguments as an
05:50 - array and goes through each single one
05:51 - of those and performs this bit on each
05:55 - single one of those so you're not gonna
05:57 - go out of the bounds of that array or
05:58 - anything because of that is that kind of
06:00 - answer what you looking for okay
06:13 - you can write developer tools with
06:15 - nodejs and there are lots of those we'll
06:16 - cover probably the biggest one a little
06:18 - bit in a little bit called NPM but
06:20 - beyond those notice primarily used to
06:22 - write web servers web servers for those
06:25 - of you that aren't familiar are
06:27 - basically how content is stored and
06:28 - served on the Internet it's where users
06:30 - data tweets posts and all their
06:32 - information are stored so kind of an
06:35 - example of this is when you're say
06:36 - you're on Twitter and you tweet
06:38 - something when you when you hit tweet it
06:40 - doesn't just stay on your computer it
06:42 - has to go somewhere that way when other
06:44 - people who are using Twitter and are
06:46 - following you on Twitter want to see
06:48 - your tweets they can get them from
06:49 - somewhere so you send to it you hit
06:51 - tweet it sends it up to a web server in
06:53 - this case the Twitter's web servers and
06:55 - the information is stored there for
06:57 - anybody later to come back and request
07:00 - so we're gonna kind of cover what
07:05 - something called the client-server model
07:07 - is so I'm gonna go in through a couple
07:09 - examples of that two web servers
07:11 - communicate with databases with file
07:13 - systems they communicate with other web
07:16 - servers so if you have if you've ever
07:20 - heard of like sequel server or my sequel
07:21 - or anything like that they're running
07:23 - they're not running on your computer
07:24 - when you're running web applications are
07:25 - running on a web server somewhere say
07:28 - you have a for instance say you have a
07:30 - tweet that has a picture in it I don't
07:33 - know how exactly Twitter handles our
07:35 - images but how you could handle it is
07:36 - you could save it locally on to that web
07:38 - server which you can't which means that
07:42 - like anybody who makes a request to that
07:43 - web server that web server will then
07:44 - access the file system on the web server
07:46 - instant that image down so it has a
07:47 - centralized place for all of your tweets
07:48 - all the images you send up basically any
07:52 - information that is stored on Twitter is
07:53 - on their web server it can also web
07:57 - servers also communicates to other web
07:58 - servers through networking protocols
08:00 - like HTTP which is mostly what we'll
08:02 - discuss today an example of that would
08:04 - be you send a tweet that has a link to a
08:07 - free code camp blog post and when you
08:09 - see that tweet on Twitter you'll see
08:11 - like usually see like a little image
08:12 - that has to do with it the link a couple
08:14 - sentences about the link what happens is
08:16 - you seen that sweet it goes from your
08:18 - browser to a web server to Twitter's web
08:20 - servers then Twitter's web servers see
08:22 - there's a link in it and then they make
08:23 - a network request to free code camps web
08:24 - servers
08:25 - so now that happens on your computer it
08:27 - all happens on their server web web
08:29 - servers can be written to know and if
08:30 - they can be written in Java Ruby c-sharp
08:32 - and a host of other languages today
08:35 - we're gonna be focusing on node what I
08:39 - just described to you guys though is has
08:41 - a specific name it's called the
08:42 - client-server model and it's a way to
08:44 - split responsibility between your web
08:46 - server and the users browser where the
08:50 - web server handles databases inter
08:51 - client communication and authentication
08:53 - the client handles view logic requests
08:57 - info from other servers stores data in a
08:59 - database for instance with something
09:02 - like Facebook if you are on facebook
09:04 - messenger you send a message to somebody
09:06 - on Facebook it wouldn't go directly to
09:07 - their phone it will go to Facebook
09:09 - servers and then their phone would
09:11 - request that or it would push it down to
09:12 - their phone depending on how they set
09:14 - that up do you does anybody have any
09:17 - questions about web servers are kind of
09:19 - what the client-server model is I can
09:21 - show you after this I'm going to show
09:22 - you some code of like what a web server
09:24 - like looks like no questions all right
09:32 - before we get into that actually I'm
09:34 - gonna talk about why you would and
09:35 - wouldn't use no Jass and once again this
09:36 - is gonna be nonsense since I kind of
09:37 - break it down and explain it step by
09:38 - step but no js' is good for asynchronous
09:41 - not a sink into the applications that
09:43 - require non-blocking input/output and
09:46 - our event driven doesn't mean much I'll
09:48 - show you examples no Jess is not good
09:51 - for CPU intensive tasks so anything that
09:54 - requires a lot of math machine learning
09:57 - AI stuff like that note isn't very good
10:00 - at that because it doesn't have a way to
10:01 - handle it in a non-blocking way and it's
10:05 - also good for non server applications
10:06 - it's also not good for non server
10:08 - applications like game engines mobile
10:10 - applications stuff like that so like I
10:12 - mentioned earlier when I mentioned non
10:15 - blocking events and asynchronous i/o
10:18 - what that means is so say you had a web
10:23 - server that read a file from the file
10:25 - system and sent it back down to a
10:27 - clients browser who was requesting at
10:28 - that say it was an image sometimes
10:31 - reading files from file server takes
10:32 - time so you could have a very slow disk
10:36 - and it could take a couple seconds so
10:38 - person a with
10:39 - web browser makes the request for that
10:40 - image person be with another web browser
10:43 - then makes a request to the same web
10:45 - server but they request something and
10:46 - that's a lot quicker
10:47 - for instance they want to get the
10:49 - information about a user they want to
10:51 - look at their profile on Twitter and for
10:54 - some reason that takes longer than
10:55 - reading that image from the disk does
10:57 - for person a so person a makes the
11:00 - request and because the input output and
11:02 - note is non-blocking it basically pushes
11:05 - that off to the background by itself and
11:06 - continues that that disk read while
11:09 - person B can freely make a request for
11:12 - that user information and pull it back
11:13 - down and it gets pushed back down to
11:15 - their computer just fine then when
11:17 - person a when the image is done loading
11:20 - from the disk it gets sent back down to
11:21 - person a well what happened in something
11:23 - that was not was not non-blocking her
11:25 - was blocking is when person a made the
11:27 - request for that image the server would
11:29 - stop everything until that image was
11:31 - read in from the disk in person B would
11:33 - be stuck waiting to see their profile
11:34 - information even though that's a lot
11:36 - quicker than what person a is trying to
11:38 - do so they'd have to wait for person a
11:39 - to get done before they could do
11:41 - anything in that isn't good because
11:43 - these things are running on your servers
11:45 - and their clients on completely separate
11:47 - computers completely different parts of
11:48 - the world you don't want them to have to
11:50 - think oh this is going slow because
11:51 - person over here is doing something else
11:53 - like that that's not gonna not gonna fly
11:56 - with them really do we have any
12:03 - questions about non-blocking i/o or when
12:05 - you would or wouldn't want to use node
12:15 - was an example of something that would
12:17 - be secret Ness okay the question was
12:19 - what's an example of something that
12:20 - would be synchronous versus what I just
12:21 - mentioned that something that was
12:22 - asynchronous so reading that image from
12:27 - your disk on your computer could be
12:29 - synchronous but no does it in an
12:32 - asynchronous way so what that what I
12:34 - mean by that is when you when you make
12:36 - that request for that image
12:37 - like I said node pushes it off into the
12:39 - background it continues doing other
12:41 - things if it was synchronous and you
12:43 - could read that you can note you can
12:45 - actually read it you can read stuff from
12:46 - the file system in a synchronous way but
12:48 - a lot of but it's like default
12:50 - asynchronous if it was synchronous it
12:53 - would stop everything else down the
12:55 - chain from happening so all their users
12:56 - so the things that are asynchronous
12:59 - could also be synchronous it just
13:01 - depends on what you what you want it to
13:03 - do and with no the synchronous stuff is
13:05 - kind of the default so anything that is
13:08 - asynchronous could also be synchronous
13:12 - what other questions do we have all
13:17 - right I have more code examples these
13:19 - are actual web servers this time
13:30 - so the first one is going to listen for
13:32 - I'm going to show you two applications
13:33 - they're both pretty similar the second
13:35 - one's just a little more in-depth the
13:36 - first one just listens for and events on
13:38 - the server the second one listens for
13:40 - specific types of events and does
13:41 - specific things for those alright so I
13:47 - will run through this code first the
13:49 - first line of this code is requiring in
13:51 - the HTTP module bits of code in node
13:54 - that are provided by something other
13:56 - than your applicator than the script
13:58 - you're in or called modules so you can
14:01 - write a module and store it in your
14:02 - application node provides a set of built
14:05 - in modules HTTP being one of them there
14:08 - are third-party modules that you can
14:09 - install through tools that we'll discuss
14:11 - later called in a tool we will discuss
14:12 - later called NPM but this is how you
14:14 - require them and it basically gives you
14:16 - access to everything that's in and
14:18 - exported from this HTTP module in the
14:21 - variable that I call HTTP so the first
14:25 - thing we'll do is create a new server
14:28 - HTTP has a function on it called create
14:31 - server and you give that function a
14:34 - callback
14:36 - and what that means is anytime anybody
14:38 - is make makes requests to the server
14:40 - this highlighted code will execute and
14:42 - I'll show you in a second what this
14:43 - highlighted code actually does we assign
14:47 - that server to the variable server
14:49 - because we do stuff with it down here
14:53 - here we are creating a port and I'm
14:56 - going to be running this this locally
14:58 - with nothing else on my computer so the
15:01 - example supports won't you have to
15:03 - define a port but a port it doesn't
15:04 - matter that much in this situation but
15:06 - what a port is is it's basically a way
15:09 - to tell specifically what you're talking
15:11 - to on a computer so there's a bunch of
15:13 - there's a bunch of networking ports open
15:15 - on my computer right now for different
15:16 - reasons say I had five node applications
15:18 - running on my computer they can't all
15:20 - run on the same port so one one around
15:22 - on eight thousand one on a run on eight
15:23 - thousand and one one eight thousand two
15:25 - and so on and you make requests to that
15:27 - specific port that way when you make a
15:28 - request it's you know what what you're
15:31 - talking to and the node applications
15:33 - know which which of your services needs
15:34 - to respond
15:38 - so the server variable I defined up here
15:40 - when I created that server I'm calling
15:43 - it the dot listen function on it and
15:44 - what that tells you is it tells the
15:47 - server to begin listening for network
15:49 - requests against it I passed the port
15:52 - and then I pass it a callback so this
15:56 - code is executed when the server begins
15:57 - listening so the first thing they should
15:59 - run when I run this is this console log
16:01 - right here saying the server started to
16:03 - listen on port and then the port number
16:05 - so let's go ahead and run it we're gonna
16:10 - write in the same way no and then the
16:12 - name of the file which is event server
16:13 - about yes and there we go the first
16:22 - thing I did it says server started on
16:23 - port 8000 and then nothing the
16:25 - application didn't finish it's still
16:26 - just sitting there open well what's
16:28 - going on what it's doing is it's waiting
16:30 - for me to make Network requests to the
16:32 - server and when I do make network
16:35 - requests this bit of code is going to be
16:37 - executed so let's go ahead and make a
16:40 - network request to do this I'm going to
16:43 - use a tool called postman everybody kind
16:45 - of see that light theme okay
16:57 - is that better
16:59 - I don't you can't I haven't seen a way
17:04 - to zoom in postman I will very
17:06 - explicitly talk about what everything is
17:07 - happening it so I'm gonna type localhost
17:10 - localhost it is my computer so this is
17:15 - where you would type the like the
17:16 - website you're talking to like
17:17 - google.com or whatever and just
17:19 - localhost is my machine and then the
17:21 - port so I know what application to talk
17:23 - to I'm making a get request which is an
17:26 - HTTP method we'll talk a little bit
17:28 - about HTTP as we go through these
17:31 - examples get is one of the requests you
17:34 - can make through HTTP which is a
17:36 - networking protocol there's a bunch of
17:37 - other ones you don't use most of them
17:39 - most of the time use a couple of them
17:41 - and I'm going to go ahead and send that
17:43 - request the response is a JSON object
17:48 - which if you're familiar with JavaScript
17:49 - you're probably familiar JSON but does
17:51 - anybody not know know know what JSON
17:53 - JSON is and would like me to go into
17:54 - that awesome
17:56 - so what JSON is is a way to basically
17:59 - collect and organize data so say you
18:01 - have a bunch of information that you
18:03 - want to send around between applications
18:05 - or send to a user you would send it in
18:08 - Jason's a good form to send that in JSON
18:10 - has a series of keys and values and the
18:12 - values can be more JSON so the key in
18:14 - this instance is message and the value
18:16 - is hello world you can have as many keys
18:19 - and values as you want so if you were
18:21 - making a request for like your profile
18:23 - on Twitter it would have your username
18:25 - and then the value would be your
18:27 - username and then it would have your
18:30 - profile picture and the value would be
18:32 - where you get your profile picture from
18:33 - and stuff like that
18:39 - just status I'll go to the status in a
18:41 - second I'll show you the code first so
18:44 - what happened when we made the request
18:48 - of this server this like I said this
18:50 - code is what's being executed anytime a
18:52 - request is made in a node application
18:54 - you Jenner you're gonna have access to
18:56 - two variables request in response the
18:59 - request is to the data that the client
19:00 - sends you and their responses the data
19:02 - you're sending back to the client the
19:04 - first line of code we're taking this
19:07 - response and calling a function called
19:08 - right head and what that does is it
19:09 - writes essentially metadata to the
19:12 - content that you're sitting back to the
19:13 - client I'm sitting back at 200 which is
19:16 - an HTTP status code 200 is the universal
19:19 - way in HTTP to say that went great
19:21 - everything did exactly what it's
19:23 - supposed to do here's your information
19:24 - and I'm writing a content type of
19:28 - application JSON and all this is doing
19:30 - is it's telling postman or the browser
19:32 - or the users mobile phone or whoever is
19:34 - making this request that this is the
19:36 - type of data I'm sending back I'm
19:37 - sending back JSON then I'm writing the
19:41 - actual data I'm sending back to the
19:43 - response called by calling response not
19:45 - right I am call I'm sending back that
19:48 - message helloworld back down to postman
19:50 - and then I'm calling response not end
19:53 - which sends the response back down to
19:54 - the client so we'll go back to postman
19:57 - and I'll show you where all of these
19:58 - things are showing up at so this is the
20:01 - data that got sent back that I explained
20:03 - earlier the message helloworld this is
20:10 - that application JSON that I showed you
20:11 - being sent back the rest of it is stuff
20:13 - that note is adding itself and here's
20:15 - where it shows that 200 okay there's
20:16 - lots of HTTP status codes you've
20:18 - probably seen 404 before means the
20:20 - resource isn't found you might have seen
20:21 - 500 it means their server their server
20:24 - threw up basically I mean something
20:25 - happened on their end and you just need
20:27 - to keep going about your business what
20:32 - questions do you guys have about this
20:34 - little web server
20:38 - anything specific all right so I'm going
20:44 - to show you the more in-depth example
20:48 - now
21:01 - so that server what it did was it listen
21:04 - for any requests and I responded to it
21:06 - the exact same way
21:07 - this one will handle different requests
21:09 - a little bit differently so here's the
21:14 - main file in the application it probably
21:16 - looks pretty familiar except I require
21:18 - in an additional file so the first thing
21:20 - I require in is HTTP which is nodes HTTP
21:23 - module that we've discussed a little bit
21:24 - the second thing I require in is a file
21:27 - called a router router is a file that is
21:28 - actually inside my application so it's
21:32 - something that I've written made a
21:34 - module and then I am exporting to be
21:37 - imported elsewhere that router file
21:41 - could be used in thousands of other
21:43 - files but we're only really gonna be
21:45 - using it for this one same thing here
21:49 - I'm calling HTTP dot create server it's
21:51 - doing something a little bit different
21:52 - on the requests but I'll go into that in
21:53 - a second port 8000 same deal and I'm
21:56 - calling server dot listen and I'm saying
21:58 - the server started and is listening on
21:59 - port 8000 so let's go ahead and start it
22:01 - up starting it the same way node and
22:07 - then the file name server started on
22:09 - port 8000 so what is this doing
22:13 - different this on a request is calling
22:18 - my router function and giving it a
22:21 - variable that is on the request that the
22:23 - user sends in so I spoke a little bit
22:27 - earlier about this get up here
22:30 - there's also post put delete it's taking
22:34 - this and it's performing a different
22:35 - action based on what kind of HTTP
22:37 - request is being made and then I'm
22:42 - passing that function that's being
22:43 - called their request in the response so
22:44 - it can perform operations on it the over
22:48 - to my router file the only two things
22:50 - that I'm actually going to perform
22:52 - anything on just for sake of brevity is
22:53 - a get request in a post request so to
22:56 - explain the difference a little bit a
22:57 - get request is is a client being phone
23:00 - web browser mobile app saying can I get
23:05 - this information a post request is a
23:08 - little bit different a post request is
23:10 - you as a client saying go ahead and
23:12 - create this information on the store
23:14 - so back to the Twitter example when you
23:16 - tweet something and you you click tweet
23:19 - or you click send it posts it to the
23:20 - server and it says hey here's a tweet
23:22 - save this stuff or when you new users
23:25 - created in your application using hey
23:26 - here's a new user save this stuff and
23:29 - that's what a post request is so let's
23:34 - go ahead and do the get the get request
23:36 - I'm gonna do it a little bit different
23:37 - this time just to show some different
23:39 - examples I'm going to add something to
23:41 - it called a query parameter so at the
23:46 - end of the URL I'm going to add some
23:48 - data I'm gonna add name I'm gonna say
23:51 - name is Logan because that's my name
23:53 - this could be any information but it's
23:56 - the it's it's it's going to it's there
24:00 - basically to narrow down the stuff you
24:01 - get back we're not going into all that
24:03 - logic right now I just kind of want to
24:05 - show you an example of there being more
24:07 - information in the URL on the server
24:09 - handling that information responding
24:10 - that information in a specific way so
24:13 - I'm going to go ahead and send it and
24:17 - here we've got a JSON response back in
24:20 - the same way it says message thank you
24:22 - for getting its a different message than
24:23 - it was last time because it's a
24:24 - different server doing different logic
24:25 - and it returns the query arguments I
24:28 - sent name equals Logan normally you
24:31 - wouldn't just have a server that sent
24:33 - back the data that the client sent up to
24:34 - it that doesn't make a lot of sense I
24:36 - just kind of want to show how the
24:38 - plumbing of node works and how a web
24:41 - server has access to this information
24:42 - and what you said all is and once again
24:46 - status is 200 what questions do you guys
24:52 - have up into this point
24:58 - all right don't hesitate to ask
25:01 - questions guys I like questions
25:02 - questions are good because if you're not
25:05 - asking questions that makes me think I
25:06 - said everything perfect and explained
25:07 - everything perfect and I know that's not
25:09 - true all right so here's the get request
25:16 - because we are over here router not
25:21 - method method is going to be get so it's
25:23 - going to execute this code it's being
25:25 - passed the requests in response the only
25:27 - thing we're doing a little bit
25:28 - differently here is we're taking we're
25:30 - trying to discover what that those query
25:32 - values are we're using a module called
25:34 - URL which is a built in module in the
25:36 - node that's being required up here oh
25:41 - cool using a laptop mouse stuff gets
25:46 - dragged around sometimes
25:47 - so URL has a method on it called parse
25:50 - you pass parse the URL you want to parse
25:53 - and what parse does is it breaks apart
25:55 - the URL into usable chunks of
25:57 - information so you don't have to take
25:59 - that big long string of data and and
26:01 - take it and find the information you
26:04 - want on it this will give it to you in a
26:07 - way that's a lot easier to consume and a
26:09 - lot easier to handle requests has a
26:12 - method on it or has a property on the
26:13 - called URL
26:14 - remember that request is what the client
26:16 - is sending you the web server so it
26:19 - takes this URL parses it and then
26:21 - there's a parameter on it called query
26:22 - being those query arguments and I'm
26:24 - getting that parameter off and assigning
26:25 - it to query and this is gonna be a
26:28 - little bit more of the same response all
26:30 - right head I'm writing a 200 saying
26:32 - everything was successful and that app
26:33 - with that JSON is the type of data I'm
26:35 - sending back to the client and then I'm
26:38 - writing the message which I'm saying
26:40 - thanks for getting and then I'm putting
26:42 - that query back in that thing that I'm
26:43 - sending back down to the client I'm
26:46 - calling end which sends it back down
26:51 - what's up the question is is the mod is
26:58 - the module that I'm exporting right here
27:00 - a dictionary of functions and that's
27:01 - exactly what it is it's basically a
27:03 - dictionary or if you use other languages
27:05 - or called associated arrays dictionaries
27:08 - are using what they're called in Python
27:09 - and a couple other languages because
27:14 - JavaScript has was called first-class
27:16 - functions they've values and these
27:17 - dictionaries are functions so when you
27:19 - when you access things in addition air
27:21 - you can pass it stuff and then perform
27:23 - the logic on it I guess I let's cut back
27:28 - a little bit this like I said this is a
27:30 - module modules dot module to exports is
27:33 - how you export the code as a module to
27:34 - be consumed by other stuff so how wanted
27:37 - information to not be available to
27:40 - anybody else but I wanted some of it to
27:42 - be available I could do code here and
27:45 - it's not being exported it's one of the
27:51 - few ways that JavaScript offers
27:52 - encapsulation if anybody knows what that
27:55 - is so now we are going to talk about the
27:59 - post request which is a little bit more
28:01 - complicated luckily you probably won't
28:03 - ever actually do this there's a lot of
28:05 - there's a lot of node libraries that's
28:08 - that abstract this for you so you don't
28:10 - have to get down and dirty reading this
28:12 - data in like this but I'm going to kind
28:13 - of show you what it looks like and if
28:14 - you don't understand how some of the
28:15 - data is being read in it's not a huge
28:17 - deal you like I said you're not gonna do
28:18 - this right off the bat so I want to go
28:22 - ahead and make that post
28:23 - I've actually got alright here so I
28:24 - don't have to type it all out
28:31 - so I've got it set to post here which
28:33 - means hay which means the client saying
28:35 - hey server go ahead and create this data
28:36 - and save it however you need to save it
28:39 - I'm telling the server right here in a
28:41 - header that the content type is gonna be
28:43 - a basically a form this is the content
28:48 - type you'll usually use if you're
28:49 - filling out a form on a website
28:51 - remember this content type header is the
28:53 - same thing that the server used to tell
28:55 - the client that they're sending back
28:56 - down JSON so you're telling it you're
28:59 - sending you're sending up this form and
29:01 - it will probably send back down JSON
29:03 - this isn't gonna send down to a slum but
29:05 - the other examples did and then I'm
29:07 - sending it a body and what that body is
29:10 - is the data that I wanted to create so I
29:11 - gave it a name and I gave it an address
29:14 - the server could require any any
29:17 - combination of information in this body
29:18 - but this is just for the example what
29:21 - what we're sending name being Logan an
29:23 - address being one two three no Delaine
29:26 - any questions about this post I'm about
29:30 - to make to the server all right it is it
29:36 - is not in JSON
29:38 - you can't send data up in JSON how I
29:42 - don't do a ton of front-end work how I
29:43 - think the form URL encoded content type
29:46 - works is I think it's gonna append it to
29:47 - the URL but you could send a post JSON
29:51 - you can set up was XML you could send up
29:53 - a bunch of different stuff I'm sorry if
29:56 - that information was wrong so we've got
30:01 - the post right here so how this data is
30:04 - gonna come in is it's gonna come in and
30:05 - chumps basically so as the client is
30:08 - making the HTTP HTTP request to your
30:11 - server it's coming in not as one big
30:13 - chunk of data over the network that
30:15 - would make a lot of sense would not make
30:16 - a lot of sense because it could be a
30:17 - huge request it's coming in a little
30:19 - tiny bits so it's coming in Part A Part
30:21 - B Part C and then will let my server
30:23 - know in the last chunk of data that it's
30:25 - the last one so I am creating an array
30:29 - called body and this is where I'm going
30:31 - to be putting the data that's being sent
30:32 - up to the server
30:35 - here is where I'm registering events on
30:37 - the request object what this is saying
30:40 - is anytime this event happens on this
30:43 - request I mean have this thing happen
30:44 - execute the code that's given so the
30:48 - first one is data the data event is when
30:50 - one of those chunks arrives from the
30:52 - client to the server so this will happen
30:53 - could be hundreds of times depending on
30:55 - how big the request is and this is end
30:58 - this is saying execute this code when
31:01 - the last chunk of data has arrived to
31:03 - the server so all we're doing when this
31:07 - chunks come in is we are pushing them
31:09 - into the body array now this data in the
31:12 - body array isn't exactly usable for us
31:13 - yet because of the way the HTTP request
31:15 - comes in but we will clean this data up
31:17 - and make it make it usable for our
31:20 - purposes so here's where things get a
31:25 - little bit hairy and if you don't don't
31:26 - get all of this it's not it's not a huge
31:27 - deal because you probably won't actually
31:29 - do this this is just I want to show that
31:33 - note is kind of a JavaScript so
31:36 - higher-level language but node provides
31:38 - some lower level doesn't provide
31:41 - high-level abstractions as you might be
31:43 - used to there's stuff built on top of
31:45 - node that provides those distractions
31:46 - but no one has some kind of lower level
31:48 - stuff in it
31:50 - so here's query string I required it up
31:54 - here it's another module note provides
31:56 - and I'm telling it to parse this data so
32:01 - what that array is from the data that's
32:03 - coming from the client it's called a
32:04 - buffer which is the type of data or type
32:06 - of a datatype basically so basically I'm
32:09 - telling the buffer to do is take that
32:10 - big array concatenate it into one long
32:13 - buffer and then change it to a string
32:16 - there's lots of good information on
32:18 - nodes in notes documentation about what
32:20 - a buffer is and how buffers work with
32:21 - HTTP requests this kind of outside the
32:23 - scope of this but if you want to get
32:24 - into that it's pretty interesting so
32:28 - that's gonna be the kind of data that
32:30 - query should enforce when it's all
32:31 - string so it puts it tooks that big
32:32 - buffer makes it one long buffer and
32:35 - makes up buffer into a string and then
32:37 - the query string library parses it and
32:39 - then I signed that to a variable called
32:41 - parsed post data all right down here
32:46 - because generally when you post up to a
32:49 - date this post up to a server is gonna
32:50 - get saved in a database of some sort I
32:53 - made a little a little file called
32:55 - repository it doesn't actually do much
32:57 - because I don't need to set up a
32:59 - database to make this example but we're
33:00 - gonna pretend that be save but the safe
33:03 - function here saves the data but right
33:04 - now all it does is say that it's been
33:06 - saved to a database in the real world
33:08 - this module could there could be errors
33:10 - for instance if you're saving something
33:12 - to a database and you don't have you
33:14 - don't have you can't make a connection
33:15 - to that database for some reason or the
33:17 - database is down or there's something
33:20 - wrong with the data this could throw
33:22 - what's called an error we're gonna this
33:25 - won't actually throw an error cuz I
33:26 - don't have a set up to but we're gonna
33:28 - pretend it could which is one of the
33:30 - good thing about modules modules in this
33:33 - situation allow you to not know what's
33:36 - going on inside of a module but still
33:38 - call the stuff in the module so I don't
33:41 - know that this isn't throwing an error I
33:42 - just know that is that it should be
33:45 - saving the data so if there was an error
33:48 - I need to wrap it in what's called a
33:49 - try-catch block try it means X you all
33:53 - of the code in the try and if the code
33:56 - in a try has an error
33:58 - stop executing it and perform what's in
34:00 - the catch this code will never get never
34:02 - get accessed but if it did here's how it
34:06 - works I said when I create a variable
34:08 - called response code I want to send back
34:10 - a 201 down to the client the save is
34:12 - successful what a 201 is like a 200 it's
34:15 - basically saying everything is ok but in
34:17 - the constants of creating data in the
34:18 - context of creating data it basically
34:20 - just means data's been created or if
34:23 - there's an error I want to log it out
34:24 - and I want to say 500 there's been a
34:26 - server here so as calls repository about
34:30 - save and passes at the data because that
34:32 - thing doesn't actually do anything it
34:34 - succeeds and I set the response code to
34:35 - 200 it writes the response code to the
34:41 - response and then it ends a request
34:42 - which means it sends it back down to the
34:44 - client so let's go ahead and do this
34:50 - and here we go response code is 201
34:54 - created and I don't send any data back
34:57 - because there's no reason to really with
34:59 - a post you're just creating the data you
35:01 - don't need the data back you've already
35:02 - got the data all you need to know is if
35:04 - it was successful or if it wasn't and
35:07 - down here we said we saved this data to
35:10 - the database all right what questions do
35:13 - you guys have about these no questions
35:19 - all right so let's talk a little bit
35:22 - about NPM once again this give me all
35:26 - the situations where I say bunch of
35:28 - nonsense and then I circle back to what
35:29 - each of them mean when I'm done
35:30 - NPM is a package manager in a registry
35:33 - for node NPM is also a CLI tool to
35:37 - manage the packages on your machine
35:38 - which is that package manager it allows
35:42 - users and enterprises to share and use
35:44 - over 600,000 packages so there's a lot
35:46 - of code on NPM that's not yours you have
35:48 - access to a lot of it not all that's
35:49 - great a lot of it's very very very very
35:51 - good and pretty much indispensable to
35:54 - the node ecosystem so let's talk about
35:59 - what a package manager and a registry
36:00 - are a package manager is a way of
36:02 - managing code your project depends on it
36:05 - makes it easy to incorporate new code
36:07 - into a project and helps maintain
36:09 - consistency between installations of
36:11 - your project so say you have a
36:13 - dependency on a library that somebody
36:16 - else wrote a package manager makes it
36:19 - easy to incorporate that library and
36:21 - bring that library into your project it
36:23 - creates a way for other people who are
36:25 - using the project to know what libraries
36:27 - your code is using so that way when
36:30 - you're developing something and then
36:31 - your friend takes over and starts
36:32 - developing it or your coworker takes
36:33 - over and starts developing it they have
36:35 - a way to reinstall all those packages
36:37 - that you are using when your code is
36:38 - done and you're ready to deploy it the
36:40 - server knows where to get all those
36:42 - packages from and all that is because of
36:43 - NPM a package registry makes it trivial
36:48 - to share the code you've written and
36:49 - easy to access other's code others have
36:52 - shared so the package manager lets you
36:55 - handle those packages on your computer
36:57 - download them install them everything
36:58 - package registry is a place where you
37:00 - can upload code for other people to use
37:02 - so you use the manager to access the
37:04 - registry basically does anybody have any
37:09 - questions about NPM I'm gonna go into
37:11 - some examples of how this all works and
37:12 - set up a project using NPM in just a
37:14 - moment all right
37:29 - so we're gonna create a new directory
37:30 - here and call it test NPM
37:40 - I did not create a very place
37:50 - so how you create a new project and say
37:53 - this is a project that's gonna be that's
37:55 - gonna use NPM either to be uploaded to
37:58 - NPM website later for other people to
38:00 - use or for you to download other
38:02 - people's packages to use on your
38:04 - application you type in NPM and Nitz and
38:07 - this is an example of a developer tool
38:09 - that was written a note so it's gonna
38:14 - ask me a couple questions for how I want
38:16 - to set up the code how I want to set up
38:17 - the project and then I'll show you where
38:18 - these settings are stored it's gonna ask
38:20 - me the package name I'm gonna leave it
38:21 - default it's called test NPM version 1.0
38:25 - description a little test
38:28 - NPM thing the entry point is the main
38:31 - application the main domain file in your
38:33 - application I'm gonna create an index
38:35 - js4 this a test command this is if you
38:39 - have automated software tests we won't
38:41 - for this example a git repository
38:44 - there's none for this but if there was
38:46 - you put the github URL here if you're
38:48 - familiar with github keywords this is
38:52 - where you could type it this is like a
38:53 - library that handled managing dates or
38:57 - something managing like date time
38:58 - strings you put dates here but this
39:02 - isn't gonna do anything so we're gonna
39:04 - put anything here either author Huskins
39:07 - license is gonna be in my see cuz I
39:09 - don't care what anybody does with it oh
39:10 - that's okay
39:12 - so what this did was it created a file
39:14 - called package JSON this basically has
39:18 - all the settings that I just specified
39:21 - name version description the main file
39:24 - scripts which we will go into in depth
39:26 - author and then the license we actually
39:30 - don't have a test script for this so
39:33 - we're going to make another common
39:35 - script you'll see which is start and I'm
39:37 - gonna call node index is remember
39:42 - earlier how I whenever I ran the project
39:44 - I was typing in node and then the name
39:45 - of the file now I'll be able to type in
39:47 - NPM start and it will do that for me so
39:51 - let's do a new file call it index ajs
39:58 - and I'll show you why that's useful
40:08 - so we're gonna go ahead and run NPM
40:10 - start and I ran hello just as we'd
40:14 - expect by writing hello and a console so
40:17 - why this is useful is I want to take
40:22 - that longer example with all the
40:23 - command-line arguments and copy it into
40:25 - this file and remember how before I had
40:28 - to type in node and in the name of the
40:30 - file and then typed hello and then my
40:31 - name and then free code camp I can do
40:34 - all that in my scripts so now when I run
40:43 - it it executes all of them just like we
40:47 - had before but I don't have to type in
40:48 - everything every single time I do this
40:51 - is useful because this make this part
40:53 - when you have a big production
40:54 - application can get really complicated
40:56 - you can have scripts that run before
40:58 - your application starts up you can make
41:00 - sure your database is in a good state
41:01 - you can have lots of variables that your
41:03 - application needs that are provided from
41:05 - here a lot you can do lots of stuff you
41:08 - can also have scripts that generate
41:10 - documentation for your application
41:11 - scripts that run database migrations
41:17 - anything of that nature so now I'm going
41:20 - to show an example of us installing a
41:22 - package through NPM then we'll wrap it
41:24 - up and I'll take questions
41:25 - so to install a package from NPM you can
41:28 - actually let me show you in PM's website
41:30 - where all the packages are so this is
41:32 - the NPM website and there are 600,000
41:36 - packages give or take on here a popular
41:39 - example is a package called low - low -
41:41 - provides a lot of little utilities for
41:43 - you to use in your code it's kind of a
41:45 - generic set of functions that do stuff
41:47 - that you don't want to have to implement
41:48 - yourself because they can be kind of
41:50 - complicated and miserable so we're going
41:52 - to install low - in our application how
41:57 - we're gonna do that this example is it
41:59 - they have an example over right here for
42:01 - instance if you uh see how popular this
42:02 - stuff is how many people use it low -
42:03 - has been downloaded almost 15 million
42:05 - times this week that's a lot that's just
42:09 - this week I'm probably responsible for
42:12 - five or six thousand of those
42:17 - we run a lot of continuous integration
42:20 - that might not have been an exaggeration
42:22 - it might actually be a couple thousand
42:24 - so we're gonna salt npm install - - save
42:29 - low - make sure you spell what you're
42:32 - installing right because their stuff on
42:33 - NPM that looks like other stuff so make
42:35 - sure you're actually looking at what
42:36 - you're installing when you install it so
42:37 - you don't sell somebody else's code that
42:39 - acts like low - but isn't actually low -
42:41 - so we'll install it it's gonna contact
42:45 - NPM registry to get that get that data
42:47 - look we now have a dependency list and
42:49 - it tells us low - and what version of
42:51 - low - we're using so now in our
42:54 - application I'm not going to show you
42:56 - how to use low - for what low - is but
43:00 - it's just a popular example so here
43:06 - we've required it in like we have
43:08 - everything else everything else that we
43:10 - had from the node standard library stuff
43:12 - the stuff that I've written myself a lot
43:14 - of people will name the variable low -
43:16 - and underscore you can name this
43:19 - anything you can name is low - or
43:21 - whatever else you wanted to but most
43:23 - people just call it underscore so if you
43:24 - ever seen anybody using underscore dot
43:25 - something in JavaScript they're either
43:27 - using low - or underscore probably to do
43:28 - stuff and there's like I said there's
43:33 - there's tons of other packages on NPM
43:34 - that abstract away a lot of the nasty
43:36 - stuff that I was doing in that post
43:37 - request and one popular one is called
43:39 - Express I use Express every single day
43:42 - it's got about 5 million downloads on
43:44 - NPM this week Express makes it super
43:48 - easy to do those gits and those posts
43:50 - without having to get down and dirty
43:52 - with that data all right what questions
43:57 - you guys have about NPM
44:06 - yes yes so what the question was was in
44:10 - my package.json I have a script I'll
44:15 - start can I have more scripts here yes
44:17 - you can have tons of scripts here
44:18 - for instance we could have a script
44:20 - called doc and what that does is
44:24 - generates Doc's
44:26 - you got your documentation for your API
44:29 - isn't it actually gonna do that because
44:30 - generate doc doesn't do anything but you
44:32 - could and for that you would type in NPM
44:37 - doc and it would pretend it does
44:38 - something it would generate your
44:40 - documentation for you you can do
44:41 - probably the most popular one you'll see
44:44 - other than this is test and if you had
44:46 - automated software tests you would type
44:48 - an NPM test and it would do all the
44:50 - things to orchestrate those software
44:51 - tests for you so you can put as many
44:53 - scripts there as you want these scripts
44:55 - can be so this this stuff can be other
45:00 - files so you can have a file you can
45:01 - have a directory in your project called
45:03 - scripts that does a bunch of really
45:05 - complicated stuff and just call it with
45:07 - NPM test or whatever that's pretty much
45:09 - what NPM test does can I run multiple
45:13 - scripts at once
45:14 - yeah there's let me I'll just do the
45:21 - same thing twice I'll run it once with
45:26 - all the arguments and ones one once
45:28 - without though you can the way I would
45:33 - do this though is I would do a make a
45:35 - script called start and test and do note
45:41 - or do n pm start MPM test it would run
45:47 - both of them for you or you could do
45:49 - that from your command line but if it's
45:50 - something that you did frequently you
45:52 - could make a script for it which is the
45:54 - good thing about NPM is anything you do
45:55 - a lot you can do through it in script
45:59 - all right are there any other questions
46:03 - one more question
46:04 - come on guys
46:08 - your question
46:20 - Am I am I responsible for any of the
46:22 - downloads of it he asked why am i if I
46:25 - am responsible for any of the downloads
46:27 - of the Express thing yes for every
46:29 - download of lodash I probably also
46:30 - downloaded Express the same amount of
46:32 - times so all of the projects we run in
46:34 - production at love's use both lodash and
46:36 - Express so anytime we we publish those
46:38 - which is it could be a hundred times a
46:41 - day
46:42 - those get downloaded so we do it all the
46:44 - time and having NPM do that automated
46:46 - for us is great I'm not responsible he
46:53 - asked if I was responsible for all of
46:54 - those weekly things I'm not responsible
46:55 - for all of them but I'm responsible for
46:57 - a non-trivial amount of them alright are
47:01 - there any other questions before we wrap
47:03 - up good question the question was do I
47:14 - have any resources for how to learn more
47:15 - about note or MPN this is knows website
47:20 - they have on their documentation page
47:23 - they have guides and there's a lots of
47:26 - interesting guides and knowed a lot of
47:27 - them aren't super beginner focused but
47:30 - if you have a little bit of programming
47:31 - background they're a great place to look
47:33 - at it explains some more advanced
47:35 - concepts of node like the event loop and
47:36 - how buffers work and how blocking and
47:38 - non-blocking and put output work free
47:41 - code camp is a great resource I'm sure
47:42 - they have tons of know stuff on there
47:43 - I've seen some of it in there I've used
47:45 - some of it personally and it's been
47:46 - pretty solid and then there's tons of
47:51 - just like people posting stuff on medium
47:52 - that are like node articles and not all
47:56 - of them are great quality but there are
47:58 - at least a good place to start any other
48:01 - questions
48:06 - mmm yep they were supposed to eat - he
48:10 - asked if they're supposed to be - Ann's
48:11 - and an NPM script and the answer is yes
48:17 - yes for all HTTP code specifically oh
48:21 - yeah there actually are so a great the
48:28 - question was are there any like cheat
48:29 - sheets for the HTTP status codes that I
48:31 - was discussing earlier and there are mdn
48:34 - is Mozilla developer Network Mozilla
48:36 - makes Firefox they have great
48:38 - documentation for proven to anything
48:39 - internet or JavaScript related they have
48:42 - every single response code here you
48:44 - won't use most of these you will use a
48:46 - lot of them no it also has documentation
48:50 - for their api's it's kind of hard to get
48:53 - to go Docs and then you go to Doc's
48:55 - again and then you click the first link
48:56 - but here's all nodes documentation for
48:59 - all their libraries for instance we use
49:00 - the HTTP library here's all the stuff in
49:02 - that HTTP library it's kind of hard to
49:04 - read if you're not used to it that's
49:06 - mine I wouldn't recommend just like
49:08 - sitting down and reading this unless you
49:09 - like have been developing stuff for a
49:11 - while but it's there if you want it any
49:14 - other questions before I wrap up all
49:18 - right thanks everybody