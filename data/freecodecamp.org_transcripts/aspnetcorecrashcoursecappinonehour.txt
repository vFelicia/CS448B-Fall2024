00:00 - hey welcome to an asp.net crash course
00:03 - in this video in about an hour we're
00:05 - going to build a complete website that
00:07 - has a database application written in
00:09 - the c-sharp language
00:13 - [Music]
00:18 - so here's what the application is going
00:20 - to look like we're going to build a
00:22 - jokes app and this will allow you to
00:24 - enter in jokes and their answers so that
00:27 - you can keep a record of all your best
00:28 - humor this application is a basic crud
00:32 - application so crud refers to create
00:35 - read update and delete from a database
00:37 - so we'll create all the forms the
00:39 - website and the database that makes it
00:41 - all happen
00:42 - in the database we'll be able to search
00:44 - for the jokes that we create and we'll
00:46 - see the tables and all of the forms that
00:48 - go with them my name is chad sluter i'm
00:50 - a professor of computer science and
00:51 - software development at grand canyon
00:53 - university in phoenix i'm really glad to
00:56 - be here at free code camp and provide
00:58 - another resource for you i endorse free
01:01 - code camp i've used it in my classroom
01:03 - i've used it personally it's a great way
01:06 - to become smarter in many things so the
01:09 - goal of my career is to make you a
01:11 - software developer
01:12 - and free code camp is a great resource
01:14 - so let's get started here with the next
01:16 - lesson let's talk about this course and
01:18 - see what's in it for you we'll talk
01:20 - about what is asp.net core we're going
01:24 - to talk about what
01:25 - means the model view controller design
01:28 - pattern we'll set up a database we'll do
01:30 - registration login and page security and
01:34 - then do some database querying so all of
01:36 - these things are what's ahead so let's
01:38 - talk about whether this course is right
01:40 - for you it's going to take you about an
01:42 - hour of video time but it is really an
01:45 - intermediate level course there are some
01:46 - things that you should know beforehand
01:49 - when i teach this course it's usually
01:51 - the third one in a series on the c-sharp
01:53 - language
01:54 - previous experience with object-oriented
01:57 - programming is probably something that
01:59 - you should already have we're working
02:01 - with a framework asp.net is a framework
02:04 - using c sharp so you should understand
02:07 - the language before you try to build a
02:09 - framework frameworks are somewhat
02:10 - complex you should have experience in
02:13 - setting up databases you should know
02:14 - what a table is you should look at some
02:17 - sql queries and know what they are and
02:19 - be able to design them
02:21 - lastly we're going to work with html and
02:24 - css and javascript so you should know
02:26 - something about building web pages
02:28 - already so if this looks good for you
02:30 - let's continue on
02:31 - so what is asp.net core and why would
02:33 - you want to use it well microsoft
02:36 - developed c-sharp and this framework to
02:38 - build web applications and so if you
02:40 - want to build a website with a database
02:42 - then this is a good tool to use there
02:44 - are competitors out there of course you
02:46 - can build framework applications in java
02:49 - using spring php laravel python the
02:53 - language python with flask you could
02:55 - work with javascript with nodejs and
02:57 - express so all of these are similar
03:00 - solutions and this is a popular one
03:02 - asp.net will get you a real job at
03:05 - corporations that create enterprise
03:07 - level applications many students that
03:10 - i've taught before have well-paying jobs
03:13 - in large companies using this exact
03:15 - technology
03:16 - dot net is microsoft's solution to
03:19 - develop software of all kinds since
03:22 - about 2001. it's very similar to what
03:25 - you would know if you work with java in
03:27 - the java virtual machine it's a runtime
03:29 - environment that you can create
03:31 - applications for on multiple platforms
03:35 - asp stands for active
03:37 - server pages
03:39 - it's kind of a leftover term from
03:41 - earlier technologies in the early 2000s
03:43 - but they still keep asp in the name the
03:46 - word core is somewhat new to microsoft
03:49 - core is the open source version of their
03:51 - web development kit it's cross-platform
03:54 - you can run your applications now on any
03:57 - server whether it's linux you can write
03:59 - your applications in linux or mac or
04:02 - or windows so core is microsoft's open
04:05 - source cross-platform solution to
04:08 - developing software
04:10 - dot net is their unified platform to
04:12 - build almost anything in software land
04:15 - desktop applications web applications
04:18 - hosting on the cloud creating apps in
04:20 - mobile
04:21 - gaming internet of things artificial
04:24 - intelligence microsoft is a very
04:26 - powerful player in software development
04:28 - and net is their solution
04:31 - so in this course we're going to focus
04:32 - on asp.net which is used for building
04:35 - web applications
04:36 - how does c-sharp fit into this well net
04:39 - is not the language that we're talking
04:41 - about c sharp is one language that is
04:43 - used in this platform so the net
04:46 - framework consists of a runtime engine
04:48 - and libraries for executing programs in
04:51 - a compliant language so c sharp is one
04:53 - language it is by far the most popular
04:55 - language but you could write it in other
04:57 - things as well but we're going to use
04:59 - c-sharp because that is microsoft's
05:01 - premier tool and their language of
05:03 - preference for this kind of work so why
05:05 - do we need asp.net and why did microsoft
05:08 - invent it well about 97 there was this
05:11 - change from desktop-centric computing to
05:14 - web-centric computing
05:16 - so microsoft was firmly in control with
05:19 - their win forms and clients on their pcs
05:22 - and then the internet happened and so we
05:24 - went from building form-based
05:26 - applications to web-based applications
05:29 - and asp was their solution so net is
05:32 - very similar to java in many ways as you
05:35 - might know java was written as a
05:37 - language that could be written on one
05:39 - platform
05:40 - and executed on any platform and so they
05:44 - had a java virtual machine well
05:46 - microsoft created.net pretty much an
05:48 - answer to that so asp was somewhat
05:51 - similar to what you would see today in
05:53 - php it's an it's a language that runs a
05:56 - dynamic website the net part is similar
05:59 - to java that it's compiled on one
06:02 - platform and can run on many platforms
06:04 - so you combine the two and you have an
06:06 - active server pages
06:08 - and net as the compiled environment and
06:11 - so asp.net is their answer to making web
06:14 - pages on a web server so here's what an
06:17 - asp page looks like you can see that
06:20 - there's some code here that is a mixture
06:22 - of html and something that looks like c
06:25 - sharp and so we would call this razor
06:28 - this is their markup language that is
06:30 - able to create something that is dynamic
06:33 - so every time you click on an item in a
06:35 - web page you get a custom version just
06:38 - for that user so probably hooking up to
06:40 - a database and showing information in a
06:43 - dynamic option so this platform is a
06:45 - end-to-end solution it runs the back end
06:48 - and the front end and so we'll call it a
06:50 - full stack environment so you have a
06:52 - database management system you have
06:54 - business logic in the middle and the
06:56 - front end with html it also can be
06:59 - combined with popular front-end services
07:02 - so if you're into javascript programming
07:04 - such as react angular or vue or mobile
07:07 - applications that could be your front
07:09 - end and you could learn your asp.net
07:12 - tools to manage the database in the back
07:15 - end so it's your choice
07:17 - you can choose the front end and the
07:19 - back end you can use them all together
07:21 - or separately so it's a very flexible
07:24 - programming environment let's go ahead
07:26 - and start building an application in
07:28 - asp.net core
07:31 - all right well let's get started on the
07:32 - next section in our course outline we're
07:34 - going to focus on this line here called
07:36 - model views and controllers or mvc and
07:39 - so we'll actually build an application
07:41 - that you can test
07:43 - what you see in front of you is the
07:45 - finished application it's called the
07:47 - jokes app let's go ahead and look at
07:49 - some of the features so first of all i
07:51 - click the link called jokes and you can
07:53 - see that all the jokes that i've put
07:54 - into my database appear let's try the
07:56 - first one why did the chicken cross the
07:58 - road let's click the details link and of
08:01 - course the answer is to get to the other
08:03 - side if we want to change this we can
08:06 - click the edit button
08:07 - and then we're asked to log in so i put
08:09 - in my username and password i can log in
08:12 - so instead of cross the road let's try
08:15 - the word playground have you heard this
08:16 - one why did the chicken cross the
08:18 - playground well the answer is to get to
08:21 - the other slide instead of side let's
08:24 - save that and now you can see the
08:26 - results should show up in the list so
08:28 - now you can see the question is now why
08:30 - did the chicken cross the playground so
08:32 - if you wanted to see the answer you
08:33 - could click details or if you wanted to
08:35 - delete or edit it you could do that
08:37 - let's try the search function and so if
08:39 - i wanted to put in a joke here about
08:41 - jump let's see if we get anything search
08:43 - comes up
08:44 - so now you can see one joke in the
08:46 - search results can a kangaroo jump
08:48 - higher than the empire state building
08:50 - and wait for it the answer is of course
08:53 - the empire state building can't jump
08:56 - let's go ahead and back to the list and
08:58 - that one's so bad i'm going to just
09:00 - delete it right now and yes it is gone
09:03 - all right so that's the application
09:05 - we're going to build let's get started
09:07 - with a new project and i'll show you how
09:08 - to create these forms in an automatic
09:11 - fashion
09:12 - so you have to have your computer set up
09:13 - to work properly to run this stuff i'm
09:16 - using visual studio on a windows 10
09:19 - computer now there are other ways that
09:20 - you can set this up but this is by far
09:23 - the simplest i'm going to go ahead and
09:25 - create a new project and and choose from
09:28 - the list
09:29 - so there are lots of things that you can
09:30 - develop with visual studio i'm going to
09:34 - select some things like c sharp all
09:37 - platforms such as windows and i'm going
09:40 - to choose web as my choice that narrows
09:42 - down some of the things that i can build
09:45 - the item that i'm searching for is
09:46 - called asp.net core web application
09:50 - as you can see there are dozens of
09:52 - different types of projects that you can
09:54 - build and so what you're learning here
09:57 - is just a crash course of what visual
09:59 - studio can do but let's get started with
10:02 - this version right here and choose next
10:04 - so i'm going to name mine as jokes web
10:06 - app you can see the location is set to a
10:09 - directory on my hard drive you can
10:12 - change this if you want or leave it as
10:14 - the default and click create
10:17 - once you choose the web application you
10:19 - can see there are many different choices
10:21 - on how you're going to build it so i'm
10:23 - going to select the traditional right
10:25 - here it's called web application
10:27 - model view controller and that is the
10:30 - full stack solution you can see there
10:32 - are other options such as if you want to
10:34 - use angular or react for your front end
10:36 - and if you want to choose an empty thing
10:38 - that you can just build from scratch you
10:40 - can choose that i'm choosing this one
10:43 - here because
10:44 - a lot of code is automatically generated
10:47 - for me it's the fastest way to get
10:50 - started
10:51 - now over here i'm going to change the
10:52 - authentication option right now there is
10:55 - no authentication which means there are
10:57 - no databases no user accounts i'm going
11:00 - to switch that because i want the
11:02 - computer to generate as much as it can
11:04 - for me and so that i can get started
11:06 - quickly
11:07 - now i'm going to also select individual
11:10 - user accounts so that will create the
11:13 - database and it will set up tables for
11:15 - me now if you work with an enterprise
11:18 - authentication system you might want to
11:20 - select one of these other ones but the
11:23 - individual accounts is very very common
11:25 - let's go ahead and choose ok now you
11:28 - should see that this option is checked
11:30 - we have configured like this on the
11:33 - other side and let's go ahead and choose
11:36 - create now
11:38 - now what we're creating is a predefined
11:41 - system that's going to have a lot of
11:43 - code generated for us so let's take a
11:46 - look around and see what asp.net
11:48 - generated for us
11:50 - first of all if you're familiar with
11:52 - visual studio this will be similar to
11:54 - projects that you've done before we have
11:57 - a solution explorer it shows us all of
11:59 - the code that's been generated for us
12:02 - and don't worry we're going to look in
12:03 - each of these folders as we go through
12:05 - the tutorial and you'll learn what they
12:07 - do you can see on the other side here we
12:09 - have a sql server object explorer and it
12:12 - says we have a sql server up and running
12:14 - so that's all built into visual studio
12:17 - when you get started
12:19 - now if you don't see any of these things
12:20 - you can go to the view menu and you can
12:22 - find all of these things on the choices
12:25 - here so you can show them or hide them
12:29 - under the view menu
12:31 - at the center you can see that there's a
12:32 - welcome page and the dotnet core
12:35 - documentation is something we're going
12:37 - to be looking at so this will bring you
12:39 - to microsoft's official website
12:41 - if you're done with your application you
12:43 - can connect it and host this application
12:46 - on azure which is microsoft's cloud
12:48 - platform we're not going to get to that
12:50 - but if you wanted to you could extend
12:52 - your application to run online ours is
12:55 - going to be a local solution so we will
12:57 - be serving it on a local host or a local
13:00 - web server which will only be used by
13:02 - you the programmer for right now
13:05 - i'm going to close this
13:08 - and then i'm just going to start by
13:10 - clicking the green button that says iis
13:14 - express that stands for information
13:16 - internet server it's microsoft's web
13:19 - server and it will automatically launch
13:21 - and compile everything that we see in
13:24 - the solution explorer
13:26 - so you can see that my application
13:28 - already launched a web browser pops up
13:31 - i'm using chrome as my default browser
13:33 - and so that's why you see chrome here
13:35 - and you can see the web service is now
13:37 - starting at localhost so there's a web
13:40 - server installed on this windows machine
13:42 - and it tells me i'm running on this port
13:44 - number and then i have joke's web app
13:47 - open
13:48 - so there are two pages that are
13:50 - automatically designed for you the home
13:52 - page and the privacy page there's a
13:55 - registration and login page that is
13:57 - already set up for you now we're going
14:00 - to close the app because it really
14:01 - doesn't do much more than show two pages
14:04 - let's look around and see where those
14:06 - things are coming from
14:08 - so let's look in the folders here on the
14:10 - jokes web app solution
14:12 - so we have important parts here called
14:15 - controllers
14:16 - and views
14:18 - now if you look inside of the home view
14:20 - you're going to see an index page let's
14:22 - open that
14:23 - and you can see that we have the welcome
14:26 - message that appears on our website
14:29 - let's look at privacy and you can see
14:32 - that there is another web page so the
14:35 - views area is probably the easiest to
14:38 - understand for a new programmer these
14:40 - are html pages
14:42 - however they are labeled as
14:44 - cs html so that is c sharp html it's the
14:50 - combination of two languages blended
14:52 - into one page
14:54 - let's start off by modifying the privacy
14:56 - page
14:57 - so it says use this page to detail your
15:01 - site's privacy
15:03 - let's also modify the index page here
15:06 - which is the welcome screen
15:08 - so i'm going to modify the h1 tag which
15:11 - is the big welcome sign and then inside
15:14 - the paragraph tag i'm going to change
15:16 - the sentence to something
15:18 - that makes sense for my application
15:21 - so let's see if those two changes will
15:22 - occur on our website
15:27 - so i click the green arrow for run and
15:29 - you should see new pages appear
15:32 - so you can see the new page shows up the
15:34 - jokes application and i click privacy
15:36 - and i get the next message that i just
15:38 - created so that's what a view is it's a
15:40 - website and it's the html code that you
15:42 - can modify
15:44 - so now we're going to get into this
15:45 - concept of mvc models views and
15:48 - controllers we've just looked at what a
15:50 - view is a view is a web page using html
15:53 - or in this syntax we're going to call it
15:56 - razer
15:57 - we're going to next look at what a model
15:58 - is and what a controller is and how they
16:01 - run
16:02 - so mvc is really a design pattern it's
16:05 - not a language
16:06 - the point here is to create applications
16:09 - that have separations of concerns that
16:12 - means your file sizes are smaller your
16:14 - code is modular and it can be run and
16:17 - managed by multiple people
16:19 - so there are three parts to an mvc first
16:22 - of all there's a model that's a class
16:24 - and so we'll be creating a model for our
16:26 - joke a joke will have a question an
16:29 - answer and an id number we're also going
16:31 - to create views we just looked at what a
16:33 - view is it's a web page and then the
16:36 - most important part perhaps is the
16:38 - central controller so the control the
16:40 - controller handles the logic of a of the
16:43 - computer code it tells the pages when to
16:46 - appear it gives them data that they can
16:48 - show and so that's what a model view
16:51 - controller is let's talk about what a
16:53 - website looks like using this system so
16:56 - the user first of all has a request it
16:59 - says give me all the orders of today's
17:02 - date and the
17:04 - system that you see here this asp.net
17:07 - would interpret that through a router so
17:10 - a router would look at the url and say
17:12 - hey today we're going to look at our
17:14 - date and we are looking for the orders
17:17 - it would send this information then to
17:19 - the controller of your program the
17:21 - controller says hey i'm going to see
17:24 - that you're looking at the route called
17:26 - orders and it has a specific url
17:29 - well then it says i'm going to create a
17:32 - list of all the orders and so it would
17:35 - have a c sharp language that says let's
17:38 - create a list and let's go to the store
17:40 - and get the orders for today well that
17:43 - would have to hit the database and so
17:45 - we're going to see sql statements then
17:48 - that says hey let's get all of the
17:49 - orders where the date equals today
17:52 - it will return that to the model the
17:54 - model will send it to the controller the
17:56 - controller now has a list of data what's
18:00 - the controller going to do with that
18:01 - data well it's going to then send it off
18:03 - to a view and to say hey show me the
18:06 - show orders.html page and here is a list
18:09 - of data that goes with it well then it's
18:12 - going to generate a list that is going
18:14 - to be an html format and send it to the
18:17 - browser and so when it gets back to the
18:19 - user you have a fully formed web page so
18:22 - all of these things in the background
18:25 - are called every time you click
18:26 - something on a website generating a
18:30 - dynamically produced page that would
18:32 - show you today's orders
18:35 - so let's return into our program and see
18:37 - where those things are so we've already
18:39 - looked at views let's look at the
18:40 - controller next so if i go into
18:42 - controllers there's a page called home
18:45 - controller
18:46 - you can see that there are functions in
18:48 - this controller that says things like
18:50 - index
18:51 - so index says return me a view
18:54 - and there's nothing in here to tell us
18:56 - which view it is and so the index page
19:00 - is assumed here
19:02 - scrolling down a little bit further we
19:04 - come to another event called privacy so
19:07 - if the controller says the person
19:09 - clicked on the privacy link send them
19:11 - the link called view which is also
19:13 - privacy
19:15 - here is another event called error and
19:17 - if the error occurs that means the user
19:19 - clicked on some link that doesn't exist
19:22 - so let's go ahead and start creating
19:24 - some views
19:25 - and we'll see how this controller then
19:27 - is able to work
19:29 - hi in this section of the tutorial we're
19:31 - going to create some views so remember
19:33 - that a view is a piece of html code or
19:36 - something similar it usually gets its
19:39 - information from a list of data from the
19:42 - controller we're going to dynamically
19:44 - create this page in using c-sharp and
19:47 - the html language that language we're
19:50 - going to call razer
19:52 - the other part of the page is going to
19:54 - be a model and so we're going to be
19:56 - creating a model for our joke a model is
19:59 - always data related it consists of
20:01 - classes or objects with properties
20:04 - the model will usually be supplied by
20:06 - the controller and sent to the view with
20:09 - a list of objects and so let's see what
20:11 - that looks like in code
20:14 - so returning again to our project here
20:16 - let's open the project called
20:18 - models now there is something called an
20:20 - error view model but we're not going to
20:22 - look at that because i just want to
20:23 - start with the simplest model we can
20:26 - so let's do a right click on this folder
20:29 - and let's choose add
20:31 - and i'm going down to the
20:33 - option called class so inside the model
20:36 - folder add
20:38 - class
20:39 - now i'm going to remain selected with
20:41 - the item called class and then for the
20:44 - name i'm going to call it joke
20:47 - so a joke
20:48 - is the class and it's going to be the
20:50 - central part of our application go ahead
20:52 - and click add
20:54 - so this is the object oriented part of
20:56 - the code
20:57 - so a class or an object is going to have
21:00 - properties now in c-sharp you can create
21:03 - a property with this shortcut prop
21:06 - press the tab key twice
21:09 - and you will get a piece of code that's
21:10 - automatically generated
21:12 - so the class is going to be this
21:14 - property is going to have a public
21:17 - accessibility
21:18 - and the integer is the data type i'm
21:20 - going to press tab one more
21:22 - and i'm going to use id as the property
21:24 - number in c sharp for a getter and
21:27 - setter you just put in the parentheses
21:29 - here and the word get and set so that is
21:32 - the default type of project property
21:36 - for our joke let's create two more items
21:39 - i'm going to have a joke question
21:41 - and a joke
21:42 - answer so this is a very simple version
21:45 - of a class or an object let's save it
21:48 - and now we're going to create some
21:49 - things to go with it
21:52 - the last property that i'm going to
21:53 - create is actually a method it's going
21:55 - to be a constructor so there's a
21:57 - shortcut in c sharp where you can type
21:58 - in ctor
22:00 - type tab tab and it will automatically
22:02 - generate the function called the
22:03 - constructor
22:06 - now for right now i'm just going to
22:07 - leave the constructor empty because it's
22:09 - going to be used by other pieces of the
22:11 - code and it needs to be empty like this
22:15 - the next thing we're going to do is
22:16 - create some pages dynamically the system
22:19 - is going to generate them for us but we
22:21 - need to know that there is a file here
22:23 - that was already in the system it's
22:25 - called the application
22:27 - db context so you don't have to worry
22:29 - about what is in it for right now but
22:31 - you do need to know it's there because
22:33 - it's going to ask for this in just a
22:34 - moment
22:36 - the next step is going to generate a lot
22:38 - of code for us let's right click on the
22:40 - controllers area choose add
22:43 - and controller
22:45 - now the controller is going to be the
22:48 - heart of this thing but it's going to
22:50 - create a lot of other pieces as well so
22:52 - we need to select the right kind of
22:54 - controller so i'm going to choose the
22:56 - third one down i think it is that has
22:58 - all of the options such as we're going
23:00 - to create all of the things to do create
23:02 - add delete and edit
23:04 - then we're going to select the model the
23:07 - model that we're choosing is this jokes
23:10 - class and so it'll create these pages
23:13 - based on the properties of our joke
23:16 - the other part that i've warned you
23:17 - about it's going to ask you for this
23:18 - application db context we'll get to what
23:21 - that is in a minute but we just need to
23:22 - supply it here make sure that your check
23:24 - marks at the bottom match mine that will
23:26 - generate the html code as a partial page
23:28 - so that it'll fit into the website very
23:30 - nicely
23:31 - finally click the create button now this
23:34 - is going to take a while you'll see
23:35 - things that will install automatically
23:38 - and if all goes well we will see several
23:40 - new pages that will be shown on our
23:43 - website automatically
23:45 - okay finally this is done it took me
23:47 - several minutes for the generation to
23:49 - occur but we now have this jokes
23:51 - controller here
23:53 - and we should also see that in the views
23:55 - folder we have a new folder called jokes
23:58 - and so you can see that there are five
24:00 - new web pages that were created
24:02 - there is create delete details edit and
24:06 - index
24:07 - so hours of programming have just been
24:10 - done for you with a single click of the
24:12 - mouse
24:13 - now we're interested to see if this
24:14 - works so let's go ahead and run the
24:16 - application
24:18 - well it looks like the application's up
24:19 - and running we still have home and
24:21 - privacy as our two links but what about
24:24 - the jokes controller we just created it
24:27 - well you can see that the url is about
24:29 - home right now well that's the home
24:31 - controller that's in action so let's
24:33 - delete the home privacy part and just
24:36 - type in the word jokes what do we get
24:38 - we should see a new page that shows all
24:41 - of the jokes in our database
24:43 - well we have a problem because we don't
24:45 - have a database yet so
24:47 - it says uh the database operation failed
24:50 - and so we have some work to do with the
24:52 - database but the pages should be there
24:55 - so in the next section of the tutorial
24:57 - we're going to create the database so
24:59 - that those jokes pages will come to life
25:02 - in this section of the tutorial we're
25:04 - going to take our model that we've built
25:06 - and we're actually going to create the
25:07 - database that goes behind it and so
25:10 - we'll use something called migrations to
25:12 - create our tables
25:14 - let's look at our project to see a new
25:17 - section that we haven't done anything
25:18 - with yet there's a folder called data
25:21 - and you can see that there is another
25:22 - folder called migrations in here let's
25:25 - go see what this is all about so if i
25:27 - click on here you're going to see some
25:29 - code that is about databases you can see
25:32 - that we're generating a table called
25:35 - asp.net roles
25:37 - you can see that there's going to be
25:38 - another table called users
25:41 - there's also a class in our project
25:43 - called joke and i don't see anything
25:45 - about jokes tables so we're going to fix
25:47 - that right now
25:49 - now down at the bottom of the screen
25:50 - here there's an area that is called the
25:52 - output and i'm going to switch to the
25:54 - package manager console
25:58 - now the goal of the package manager
26:00 - console is usually to install new
26:02 - dependencies however we're going to use
26:05 - it for some database management
26:08 - so in this console i'm going to attempt
26:10 - to type enable
26:12 - hyphen migrations
26:14 - and you can see that there's a message
26:16 - that says hey you're looking at an older
26:17 - version of this so old guys have to
26:20 - learn new tricks we're going to now type
26:22 - in the word add migration so add hyphen
26:25 - migration and then we have to give it a
26:27 - name and so the first migration is the
26:29 - initial setup of our database so that's
26:31 - what i'll call it you can name it any
26:33 - string you want but it has to be
26:34 - something descriptive
26:36 - okay so something happens after i type
26:38 - this in let's see what the computer
26:40 - generated
26:41 - back into the migrations folder you'll
26:43 - see a new file called initial setup
26:46 - exactly named as what i just created
26:48 - let's see what's inside here
26:50 - so there is a command called create
26:52 - table joke
26:54 - and let's see what else there is it
26:56 - looks to me like that's the only item so
26:58 - we're going to create a new table you
27:00 - can see that the joke is supposed to
27:02 - have a joke question
27:04 - and a joke answer so what we've just
27:06 - started is something called an object
27:09 - relation mapper
27:11 - you can see that the
27:12 - mapping here is between a class
27:15 - and a table
27:17 - so in this example the class on the
27:19 - right is a person
27:21 - it has an id name phone and age for
27:24 - properties
27:25 - and the orm is creating a table for us
27:29 - which is going to match exactly to that
27:32 - class an orm then is an object relation
27:35 - mapper
27:37 - now there are two options for creating
27:38 - databases with a system like this the
27:41 - object relational map or orm is a
27:44 - popular tool but it's not the only way
27:46 - to do it the more traditional way is
27:48 - called a dao where you create your
27:50 - tables manually and then you are more
27:53 - traditionally managing your database
27:55 - access you write your own sql statements
27:58 - with this and here's the catch that most
28:00 - people that manage databases like the
28:02 - dbas in your company they usually prefer
28:05 - the old-fashioned method the reason why
28:07 - is because they can get more visibility
28:10 - on what's happening in the database not
28:13 - so automated however the orms on the
28:15 - other hand are sometimes preferred by
28:18 - programmers that are trying to save some
28:20 - time
28:21 - it allows the computers to generate data
28:23 - tables without you having to actually
28:25 - write any sql statements so an orm has
28:28 - been called a way for people to write
28:31 - sql statements without writing sql
28:33 - statements it's a shortcut you can use
28:36 - your database tools to be updated using
28:39 - what's called migrations which is right
28:41 - is where we're in the process right now
28:43 - of coding
28:44 - so entity is the name of the orm that
28:47 - we're using right now it's microsoft's
28:50 - orm
28:51 - orms are very good for simple
28:53 - applications such as our jokes app
28:56 - however another version of this tutorial
28:58 - should include how to make daos or data
29:01 - access objects because a lot of
29:03 - companies would prefer you to use that
29:05 - kind of a system when you build your app
29:08 - so now let's return to visual studio and
29:10 - maybe we can understand what this is
29:12 - doing now so this folder called
29:14 - migrations is the language of creating
29:17 - tables
29:18 - now all we have to do to make this
29:20 - happen is type in the word update
29:22 - hyphen database
29:24 - and i'll press enter and i'll let the
29:27 - orm do the magic of creating all the
29:29 - tables for us so it's going to create
29:31 - two tables one is for the user accounts
29:34 - the second is for our jokes it'll
29:36 - probably have more tables than that but
29:38 - that's the basic idea okay i see a
29:40 - message that says done
29:42 - let's go look in our folders to see what
29:44 - happened so i'm going over to the left
29:46 - side that says the sql object explorer
29:49 - if you can't see that you can go to the
29:50 - view menu and get it
29:52 - now i'm going to open up the sql server
29:54 - and it has two different projects here
29:57 - two different databases let's see what
29:58 - they are i'm going to open the first one
30:00 - and i search for databases and it looks
30:03 - to me like we have several of them so
30:06 - i'm going to choose the jokes web app is
30:09 - what i'm interested in let's open that
30:11 - up and then finally tables
30:14 - so inside the tables area you can see
30:16 - that there are several tables that are
30:18 - all about users and then one about jokes
30:21 - well i think we could understand the one
30:22 - about jokes the best so let's double
30:23 - click joke and see what it looks like
30:27 - so as i open up the definition you can
30:28 - see that the table has been created
30:30 - according to the properties of my joke
30:32 - so it has id joke question and joke
30:34 - answer integer string and string and all
30:38 - of that was created for me without me
30:40 - knowing anything about sql
30:42 - so the application is apparently got a
30:44 - database
30:45 - let's see if it'll work now so i'm going
30:47 - to push the green arrow again to run the
30:49 - application
30:50 - all right so we got the app up and
30:52 - running and
30:53 - if i click on one of these things you
30:54 - can see it'll still work on these pages
30:57 - now we don't have any links that are
30:58 - automatically taking us to the jokes
31:00 - controller so i'll have to type in jokes
31:02 - as my url and press enter
31:06 - now earlier we had a message that says
31:09 - your database was not configured however
31:10 - now we have an index page so this shows
31:13 - me all of the jokes that are in my
31:15 - database obviously i don't have any yet
31:17 - so let's click the create new button and
31:19 - it says
31:20 - make me a new joke well let's see it
31:22 - looks to me like i've put some in before
31:24 - so let's try why the chicken cross the
31:25 - road and the answer is to get to the
31:28 - other side
31:29 - so those are typed in let's click the
31:31 - create button
31:32 - and now we've got ourselves an index
31:35 - page so do we want to delete the joke
31:37 - edit or show the details we can do all
31:40 - of those things so each one of these
31:41 - pages has already been created for us
31:44 - automatically the database is in the
31:46 - background so you could say hey we're
31:48 - done with our jokes app not so fast
31:50 - there's a bunch of more features that
31:52 - we're going to add but you have reached
31:54 - the point where you have a functioning
31:56 - application
31:57 - that you created with just a few mouse
31:59 - clicks
32:00 - now some of the features that i'd like
32:02 - to add such as details i would like to
32:04 - show who the owner was we're going to
32:06 - log in and register and link those
32:08 - together we're also going to not give
32:11 - away the answers so right now we've got
32:14 - the joke question here and the joke
32:16 - answer on the same page that's kind of a
32:18 - giveaway so we'll fix that we're also
32:20 - going to limit the access so if i click
32:23 - the create button and i'm not logged in
32:25 - it will not allow me to click a create
32:27 - button
32:28 - so those are some of the things that
32:29 - we're going to improve in the next few
32:31 - videos
32:32 - hey so now let's take a look toward the
32:34 - end of the course here what i have on
32:35 - the screen is a finished product of all
32:38 - the features that we're going to add so
32:40 - you can see that i've created a couple
32:42 - of menu items up here first of all the
32:43 - jokes choice so now we see a list of all
32:46 - the jokes that are in the database
32:48 - also we have a search function so if we
32:50 - want to find something such as the word
32:52 - jump and search
32:54 - we would find an answer it looks like i
32:56 - don't have that jokes question anymore
32:58 - also if i try the create new button you
33:00 - can see that now we are forced to log in
33:04 - so no anonymous jokes are allowed here
33:06 - if i choose log in then i can add a new
33:09 - joke and you can see it's associated
33:11 - with a user id when i create it okay
33:13 - back to our current progress here i've
33:15 - kind of rewound now my application to
33:17 - where we left off just a minute ago the
33:20 - first thing i want to do is add the link
33:21 - at the top of our menu so we want to
33:24 - show the jokes list
33:26 - as a item that we can click on to do
33:28 - that we need to go into this folder here
33:30 - inside of views called shared and then
33:33 - we have a item called layout let's go
33:35 - check that out and see what's in there
33:37 - so as you look through the layout code
33:39 - you'll see that it looks like a bunch of
33:41 - html
33:42 - now this item here is the nav bar that's
33:45 - what we're going to add a item to now if
33:48 - you were to know bootstrap then you're
33:50 - all set to go because bootstrap classes
33:53 - are what you see all the way through
33:55 - here so this is css programming if you
33:58 - haven't done a tutorial on that probably
34:00 - this is going to look strange but anyway
34:02 - let's take a look at the code right here
34:05 - in this section so this is one of the
34:07 - items in the nav bar you can see that it
34:10 - is the privacy link and there's another
34:12 - link above it called the home link so we
34:15 - don't have to understand all of the
34:17 - classes and all of the items in here but
34:19 - we can just modify one so i'm going to
34:21 - copy this
34:23 - and then press enter and paste so now i
34:25 - have three links
34:27 - and the link called privacy is
34:29 - duplicated
34:31 - so let's see if we can modify this to
34:33 - work correctly
34:34 - so first of all a link has an a tag and
34:37 - the item in between is the text so let's
34:40 - just put in jokes
34:42 - now the other item here are some of
34:45 - these asp tags so it says asp controller
34:49 - so the controller name
34:51 - well the home controller is what the
34:53 - first two links are
34:54 - we created a jokes controller either
34:57 - earlier so let's type in the word jokes
35:00 - and then it says what's the action the
35:02 - action on this guy is index now how did
35:04 - i know how to do those things let's go
35:07 - look at the controller and see where
35:08 - that information comes from so i scroll
35:11 - to the top of the screen and i find the
35:12 - jokes controller so we'll look at this
35:14 - and then come back to our nav bar in a
35:16 - second
35:17 - so the jokes controller
35:19 - the joke's controller is going to have a
35:22 - few methods in it first of all the index
35:25 - method here is the item that is going to
35:27 - show all jokes
35:29 - and you can see that it is already got
35:31 - some code inside here
35:33 - so this is database code that was
35:36 - created using the entity framework
35:40 - so let's go back to our uh
35:42 - our code here in the layout
35:45 - so what did i put in here i put in the
35:47 - word jokes why didn't i put the whole
35:49 - word jokes controller
35:51 - well the word controller is assumed so
35:54 - if you type in joke's controller that
35:56 - would probably make more sense at least
35:59 - in my mind but that's not the way that
36:01 - microsoft designed it so jokes is the
36:03 - only thing we need to put
36:05 - then the index is the action so let's
36:08 - save this and run it and test it out
36:12 - okay looks like the app is up and
36:13 - running and you can see that in the menu
36:16 - we have now a jokes item so if i click
36:18 - here we should bring up the jokes list
36:21 - and sure enough there it is so this is
36:23 - the index page for the jokes controller
36:26 - and if we want we can go to the other
36:27 - items from here so now instead of having
36:30 - to learn how to type in the url up there
36:32 - with the jokes we have a link to it in
36:34 - our nav bar so there's one nice feature
36:37 - done
36:38 - let's now add the search function and
36:40 - then we'll add the new list in our in
36:42 - our page
36:43 - all right so here's the next item so i'm
36:46 - going to copy and paste
36:48 - another link
36:49 - so let's change the text here to the
36:51 - word search
36:53 - and i'm going to then change the action
36:56 - to something else so we're still in the
36:58 - jokes controller but now the action i'm
37:00 - going to call it show
37:02 - search form how about and that doesn't
37:05 - exist yet in the controller so we need
37:07 - to go fix that
37:09 - just to show you how this works let's
37:10 - run it and see what happens
37:13 - so the app is up and running we can go
37:14 - ahead and look at the jokes list
37:16 - and we should see the one item in our
37:18 - search now let's click the search item
37:21 - and you can see that we have a not found
37:24 - error so the jokes method called show
37:28 - search form does not yet exist the jokes
37:31 - controller does
37:33 - so we need to create this method and
37:35 - then make it search for our jokes
37:37 - so where are we going to put that method
37:39 - well it has to be in the jokes
37:40 - controller so let's double click on
37:42 - jokes controller and take a look at our
37:44 - index
37:45 - this is our model that we're going to
37:47 - copy and paste so i'm going to copy our
37:49 - index page
37:51 - and paste it
37:52 - and let's uh do this let's do
37:55 - show search form so that's just in the
37:57 - comments that says if somebody types in
38:00 - this url this is the command that's
38:02 - going to happen
38:03 - now the key difference here that instead
38:05 - of the index method we're going to type
38:07 - in show
38:08 - search form
38:10 - now all this is going to do is show a
38:12 - form and then we'll have to put in some
38:14 - information there
38:15 - so now we're ready for the next part it
38:17 - says return a view
38:19 - now i'm not going to send this view any
38:21 - information so it's just an empty view
38:24 - now you have two options here
38:26 - now inside these parentheses we could
38:28 - put in this string called show search
38:30 - form that would mean go find the form
38:32 - with that name but since the method name
38:34 - up here is already that title we can
38:37 - just
38:38 - have nothing in the view item so that is
38:40 - an optional parameter
38:42 - alright so does that solve our problem i
38:44 - doubt it but let's run the application
38:46 - and see what happens
38:47 - so we're going to get a different error
38:49 - this time when i click search we're
38:51 - going to have a problem now that says no
38:53 - longer is it not found but we have a
38:55 - different problem
38:57 - it says here the view show search form
39:01 - was not found
39:03 - so we did get to the controller and it
39:05 - says hey you wanted to show this form
39:07 - there is no form yet by that name
39:09 - so it says i tried to look in all of
39:11 - these folders and didn't find it
39:13 - anywhere
39:14 - so obviously we haven't created it yet
39:16 - so that's why we have this error so i
39:18 - ran it here just to show you that this
39:20 - is a common thing if you're building an
39:22 - app and you forget to put in a piece
39:24 - okay so how we're going to create this
39:26 - new form well we could go down to the
39:28 - views folder and create a folder or
39:30 - create an item called show search form
39:32 - that would work
39:34 - so since i'm lazy i'm going to let the
39:36 - computer do some of the coding for me so
39:38 - i'm going to right click on show search
39:40 - form
39:41 - and the first item that comes up is add
39:43 - view well that sounds handy let's try
39:45 - that
39:46 - then the next screen asks a question
39:48 - what kind of view do you want do you
39:49 - want an empty one or do you want to take
39:51 - one that's pre-programmed i like the
39:53 - pre-programmed idea because it will make
39:55 - a lot of code for us
39:58 - so what's the form name well they
40:00 - already provided is a suggestion show
40:02 - search form that sounds like it now
40:04 - there's a template it says what kind of
40:06 - template do you want
40:08 - so we could have a template that says do
40:10 - you want to create something
40:12 - delete an item show the details edit
40:15 - empty or show a list
40:17 - well
40:18 - we just want a data input form somewhere
40:20 - where we can put in a search term and
40:22 - then click the button so the closest one
40:25 - to that is create so even though we're
40:27 - not creating an item we are creating a
40:29 - data entry form so i'm choosing create
40:31 - now what are we going to create well i
40:33 - want to show the joke
40:36 - model here as my basis for creating an
40:39 - item
40:40 - i'm going to check partial view because
40:42 - i want it to be part of the main
40:43 - template and then click add
40:46 - now isn't that nice we just generated an
40:48 - entire data input form and it's based on
40:51 - the joke answer and joke question so we
40:54 - could probably run the app now and get
40:56 - something
41:00 - all right so we got the app up and
41:01 - running let's try the search button and
41:03 - hopefully get something
41:05 - there it is we have the create form here
41:07 - so we have id joe question joke answer
41:10 - as the input form that's not exactly the
41:12 - way i want it but at least we have a
41:14 - form that is up and running
41:16 - now we're going to go back and modify
41:18 - several things here so i only want one
41:21 - box for my data entry so i can knock out
41:24 - the first two items that are form groups
41:27 - where it says we have an input and a
41:28 - label and a span so let's just take
41:31 - those and delete them so now we just
41:33 - have something called joke answer and
41:35 - then we have a submit button the submit
41:38 - button says create so i'm just going to
41:40 - change that right now to the word search
41:42 - and i'm going to change a few of these
41:43 - items
41:45 - so actually i don't care about jokes at
41:47 - all i just use this as a template so i'm
41:49 - going to knock out this item on number
41:51 - one called model because we are not
41:54 - creating a new joke we are just having a
41:56 - data entry form so that goes out and
41:59 - then for the title i'm going to say
42:00 - search for a joke
42:02 - at the bottom here's some more code that
42:04 - is for data validation to see if you
42:06 - typed in the joke in the correct format
42:08 - well that's no longer needed either so
42:10 - that goes away
42:11 - so as soon as we take out the line for
42:13 - model you can see we start getting
42:15 - errors in the center of our form that
42:17 - says hey you wanted to associate this
42:19 - input with a joke answer i have no idea
42:22 - what a joke answer is anymore because
42:24 - that line on the top of the form told me
42:27 - that the model on this page was a joke
42:30 - and there's no jokes anymore
42:32 - now i'm going to modify the two lines
42:34 - that are input and label
42:36 - so no longer are we going to worry about
42:38 - the
42:39 - the the joke model so we're just going
42:42 - to say that this input has a name
42:44 - so the name of this input is called
42:46 - search phrase see how we're modifying an
42:48 - existing form and modifying it to a
42:50 - regular html form the label then has to
42:53 - match it as well so the label is for the
42:56 - search phrase now there's also a line
42:58 - here that says validation which we don't
43:00 - have to worry about so that goes away
43:03 - looks like here's a line about
43:04 - validation as well so we're knocking
43:06 - that out okay our form is getting really
43:08 - simple now
43:10 - now there is one item here that makes
43:12 - something completely wrong it says the
43:15 - form action the form action right now is
43:18 - to show the search form well we don't
43:20 - want the search form to show itself we
43:23 - want it to go to another item
43:25 - so now i'm going to refer to another
43:27 - method that doesn't exist yet and we're
43:29 - going to call it show search results
43:32 - so show the form brings us to this form
43:35 - when we enter a item into the form we
43:37 - should show the results as the next step
43:39 - so that's why i called that thing the
43:41 - asp action
43:43 - all right it's time to test it out let's
43:45 - run it and see what it looks like
43:48 - alright the app is up and running let's
43:50 - click the search button and we have a
43:52 - simple form now it says search for a
43:54 - joke so let's search for a joke and
43:56 - let's look for chicken and choose search
43:59 - now we have another issue that says show
44:02 - search results doesn't exist so guess
44:04 - what we're going to have to do next
44:06 - we're going to have to go into the
44:07 - controller and create that method so
44:09 - we're looking for the jokes controller
44:12 - and then the method called show search
44:14 - results that's the pattern that we're
44:16 - following here so let's create that next
44:19 - so to make this method occur we have to
44:21 - go find the controller so we come up
44:23 - here to the top and i'm going to open up
44:25 - the jokes controller again
44:27 - so we did show search form as our last
44:29 - guy let's take a copy and paste on this
44:32 - and we're going to use him as a model
44:35 - now this is going to be using a post
44:39 - submit method
44:40 - and then this is called show search
44:42 - results so this is just comments to let
44:44 - me know what i'm supposed to be making
44:46 - so show search results is my method
44:49 - now the data input form that we put
44:51 - together just a second ago has some
44:53 - values that we want to receive here so
44:56 - string
44:57 - i think it was called search term
44:59 - and that should come directly from the
45:01 - form now i'm going to verify that i
45:03 - spelled that right so i'm going to go
45:04 - back to the form here
45:06 - and check it out so it's called
45:08 - search phrase i think i spelled that
45:10 - wrong so let's copy this
45:12 - and come back into the jokes controller
45:15 - and instead of search term we make sure
45:18 - that it matches with search phrase okay
45:20 - so that's a common mistake that i make
45:22 - as i don't match up the input values
45:24 - that come from our forms and that just
45:28 - causes all kinds of problems when you
45:29 - run the app
45:30 - so at this point it should capture the
45:32 - search phrase and then we're going to
45:34 - have to create another view now i want
45:36 - to test this out and i'm going to change
45:38 - a few things around here so that it'll
45:40 - just print a message to the screen
45:42 - without trying to create an entire form
45:44 - so what i'd like to try next is instead
45:47 - of returning an entire view like an
45:49 - entire web page i'm just going to return
45:51 - a string so let's erase this part and
45:53 - say you entered and then the search
45:55 - phrase is what we're going to put in
45:57 - there so it's just going to echo it back
45:58 - to the user now as soon as i do that you
46:01 - see you have a red line that says you're
46:03 - trying to convert a string which is what
46:06 - i just typed into something called an i
46:09 - action result
46:10 - now up until this time we've just been
46:12 - glossing over this section here so this
46:14 - method returns an item called task and i
46:18 - action result
46:19 - so there's a whole bunch of things that
46:21 - can be returned when you create these
46:24 - views up until now we've just created
46:26 - html pages to show to the screen in more
46:29 - advanced versions of this application we
46:31 - could create a rest api a service that
46:34 - would create json data and that would be
46:37 - also one of these i action results but
46:39 - for right now i'm just trying to return
46:41 - a string for testing purposes so i'm
46:43 - going to knock out all of this stuff
46:44 - here and just type in the word string so
46:47 - that's the data type that should be
46:48 - returned and that's what i returned just
46:50 - below here so this is just for testing
46:52 - purposes as you'll see it's just a very
46:54 - simple message
46:59 - okay let's see what it looks like let's
47:00 - run the app we'll do a search and i'm
47:02 - going to type in something here let's
47:04 - try chicken again and search
47:06 - and now i get the message a string only
47:09 - that says you entered chicken so
47:12 - obviously strings are returnable and
47:14 - they can be displayed in a browser but
47:16 - that's not really very pretty but it
47:18 - does tell me this one thing that the
47:19 - form data was entered and received by
47:22 - the controller and then sent to the next
47:24 - item on the page so i must have spelled
47:26 - all the things correctly in my form
47:28 - okay so i stopped the program and i
47:30 - returned back to here so i'm going to
47:31 - press ctrl z to undo this first item
47:35 - control z to enter
47:37 - back to where i was before let's see i
47:38 - don't want that one i want search phrase
47:41 - okay so i want to get back to the stage
47:42 - where i was before so now instead of
47:45 - doing a view for
47:48 - just a string i want to return a list of
47:50 - filtered results
47:52 - now if i wanted to return the entire
47:54 - list i have a pattern of code that i
47:56 - could use for that that was the original
47:59 - index method so i'm going up to copy the
48:02 - entire list
48:03 - and put it into my search results so
48:06 - this is not really good search results
48:08 - it shows every joke in my database but
48:10 - we can modify this in just a jiffy here
48:13 - so the await
48:15 - command says that we're going to do some
48:17 - asynchronous programming and then the
48:19 - view says we're going to show something
48:21 - called
48:22 - search results that won't work we need
48:25 - to tell it as different view
48:27 - so you can put in an optional parameter
48:29 - at the beginning and tell it we're
48:31 - looking for the index view and the
48:34 - following data to go with it so let's
48:37 - see if that does anything let's run it
48:40 - okay here we are yet again let's run the
48:42 - app let's do search and let's search for
48:44 - a joke so if i typed in chicken and
48:46 - search i should get just chicken right
48:48 - so many anything with chicken in it
48:50 - let's see if it works
48:52 - so it appears that i get search results
48:54 - i got an answer that says chicken let's
48:56 - go back and search for something else is
48:58 - there any joke with the word frog in it
49:00 - let's try that search
49:02 - and i got the same exact results that
49:05 - means that every item in my database is
49:07 - being shown well i only have one item
49:09 - but anyway frog is not here so i have a
49:13 - list that is returned but i need to
49:15 - filter that list so that i could only
49:17 - show chicken or frog as a keyword
49:21 - so to turn this into a search function
49:23 - we're going to go to this item where it
49:26 - has the context dot joke
49:28 - and the place where we're getting our
49:31 - data so we're inserting the word
49:34 - where
49:35 - so this is like a sql filter you know
49:37 - where you can specify a condition about
49:40 - how you want to select items
49:42 - so the where is going to be a
49:44 - parenthesis now inside the parentheses
49:46 - we are going to use an anonymous
49:48 - functions or an arrow function so that's
49:52 - a whole subject in itself of how these
49:54 - work so don't have time here in a crash
49:56 - course to look at it but if you want to
49:58 - look for arrow functions or anonymous
50:00 - functions this will give you the idea
50:02 - but you can see what's happening it says
50:04 - here for every j
50:06 - that has a joke question that contains
50:09 - the search phrase such as frog we will
50:12 - put it in the list so obviously we don't
50:14 - frog to be our search all the time so
50:16 - i'm going to change that to the word
50:18 - search phrase
50:19 - and so this will filter the list
50:22 - and limit it to only the items that
50:24 - contain
50:25 - the search term
50:28 - so let's test it out let's run the app
50:30 - and search so i'm going to search for
50:32 - chicken and see what comes up
50:34 - and hopefully we get results so we did
50:36 - find a chicken let's search again and
50:39 - this time i'm going to search for frogs
50:41 - and no frogs so if you want to create
50:44 - more jokes and test out the search app i
50:46 - think it'll work so that brings us to
50:48 - the end of searching which was a kind of
50:50 - a more advanced topic now we're going to
50:52 - work with let login and registration and
50:54 - then we will assign each joke and owner
50:58 - hey let's do another feature for this
50:59 - application so you can see that i have a
51:01 - few more jokes in my database what i'd
51:03 - like to do now is to hide this column
51:05 - here so joke answer is given in column
51:08 - two and to me that gives the item away
51:11 - so we need to have the user click on the
51:13 - details to see the joke punch line
51:16 - so this part of the tutorial will teach
51:18 - you a bit about the razer syntax and
51:19 - building these views
51:21 - so the view that i'm looking for is the
51:24 - one that shows all of the jokes so i'm
51:26 - going into the jokes folder and the
51:28 - index page is the one i want now let's
51:31 - diagnose how this page is built and
51:33 - learn about the details
51:35 - so at the very first line of a view you
51:38 - get something called a model normally
51:41 - that's what you see
51:42 - and what is this model
51:44 - it says here we have the class called
51:47 - joke so we know that this page deals
51:49 - with jokes however there's one more
51:51 - thing it has a item on the outside that
51:54 - says i innumerable or in other words
51:57 - it's a list so we have a list of jokes
52:00 - so this here tells me what the page is
52:03 - all about now when we come down into the
52:06 - code you're going to see items that say
52:09 - things like model
52:10 - and you're going to have another
52:13 - property there called joke answer
52:15 - so what we're trying to do is just get
52:17 - rid of the joke answer so you can see
52:19 - that the html code is in the format of a
52:22 - table
52:23 - so the table header includes the joke
52:25 - answer
52:26 - well i'm going to take that headline out
52:28 - so th stands for table head and then the
52:31 - content inside is now deleted
52:34 - so also down in the for each section so
52:37 - this is what generates each row in the
52:40 - table
52:40 - and it says here we're going to have a
52:43 - joke answer let's take that out and he's
52:46 - gone
52:47 - and then the last part shows the edit
52:50 - details and delete
52:52 - so let's see if that affects any changes
52:54 - to our screen
52:56 - okay so let's take a look here at the
52:58 - jokes page and you can see pretty quick
53:00 - here
53:01 - that we have just the joke question so
53:04 - now if i want to know the answer to any
53:06 - one of these things i have to click on
53:07 - the details and then i have the full
53:09 - joke answer on this page so it's a
53:12 - design decision if you like your app to
53:13 - work that way that's how you modify it
53:16 - so a good way then to learn how this
53:18 - code is supposed to work you look at the
53:20 - models that are generated by the
53:22 - computer and you can see all of the
53:24 - different codes and classes and all the
53:27 - html that's all done already for you
53:30 - so that's a pretty quick feature that
53:31 - we've just added we hid one of the
53:33 - columns in our table
53:35 - hey let's add another feature to this
53:36 - application you can see that i have the
53:38 - list of all the jokes on here when i
53:40 - click create new i have now a option
53:42 - that says you have to log in actually
53:44 - it's a requirement not really an option
53:46 - so how do we do that well let's see in
53:48 - just a second well this is going to be
53:50 - incredibly easy you'll you'll see that
53:52 - this is just one line of code really so
53:54 - i'm looking for the jokes controller and
53:56 - i'm going for the action called create
53:59 - so let's go down and find create looks
54:01 - to me like about line 61 is where it's
54:03 - at
54:04 - so create says simply show me the view
54:07 - create we don't even want to show that
54:09 - part until they've been logged in
54:12 - so we're going to put in a decorator or
54:14 - one of these indicators in square
54:16 - brackets and the word that we're looking
54:18 - for is authorize now there is no type
54:21 - ahead command here it doesn't recognize
54:23 - authorize so i'm just going to click
54:26 - away from it and now i have a red line
54:28 - error it says authorize attribute is not
54:31 - recognized we have potential fixes
54:34 - available and it says i will recommend
54:37 - that you import this library called
54:39 - asp.net core
54:42 - authorization
54:43 - let's try that
54:45 - so
54:46 - the line should go back it's clear now
54:49 - now what happened what did we change
54:50 - well up at the top of the screen we've
54:52 - just imported this line on line 10. so
54:56 - it says we're going to use this library
54:58 - is that all there is to it i think there
55:00 - is let's run it
55:02 - okay we got the app up and running let's
55:04 - go ahead and choose our jokes and we
55:06 - should get the list of everybody i'll
55:08 - try creating a new one now and there it
55:10 - is so now the login screen says it's
55:13 - it's pointed to me because as you can
55:15 - see up here the registration and login
55:17 - links are there i have not logged in yet
55:19 - so i've already registered an account
55:21 - here under email so i'll put in shad at
55:23 - jokes at app.com that's what i
55:25 - registered earlier and the password i
55:27 - think i put in probably was just
55:29 - password1 something like that and let's
55:32 - go ahead and log in
55:33 - so now the login is there and we have a
55:37 - registration or create page so up at the
55:40 - top you can say hello i see your name is
55:43 - here and you can now create a new joke
55:45 - question if you want and then go back to
55:47 - the list so if i choose create new
55:50 - go straight to the create let's go back
55:52 - to the list
55:53 - let's log out and now let's go back and
55:55 - try to create another one and it says
55:58 - nobody gets to create a joke unless
56:00 - you've already logged in so that is a
56:02 - security so the page can't be seen by
56:05 - unauthorized users
56:07 - so this line here line 62 was a
56:11 - just a notation that says
56:14 - we're not going to do any creating form
56:15 - unless you've been logged in
56:17 - now the form itself has obviously
56:20 - security but the process
56:23 - post is following it so we need to also
56:26 - put authorization here because
56:29 - this is going to actually put the data
56:31 - in the database this is actually more
56:34 - important for the security than the
56:36 - entry form
56:38 - so this this method here create is going
56:41 - to be called whenever there's a new joke
56:43 - to be entered all right what else is
56:45 - there let's go down to the edit form i
56:47 - think we don't want to let anyone edit a
56:49 - joke unless they've been authorized is
56:51 - there any more
56:53 - so here is another one that is the
56:55 - processing function for an edit edit
56:58 - method let's go and add authorize there
57:01 - it looks to me like delete is a good
57:03 - candidate for authorization so we will
57:05 - take that one
57:06 - and then there is a delete confirmed i
57:09 - think that probably sounds like one and
57:12 - then
57:12 - the rest the rest one uh nothing else
57:15 - okay so that looks to me like
57:16 - authorization is now in place
57:19 - hey let's add another feature to our app
57:21 - let's talk about css and how you can
57:23 - style your page so looking in the
57:25 - solution explorer i go find this folder
57:27 - called www root and expand it and you
57:31 - can see that there are html things here
57:33 - so we have a css folder that has the
57:35 - word site we have a javascript folder
57:38 - which is also site these two files are
57:41 - where you can customize your website now
57:43 - in the library folder you can see that
57:45 - there are already things that are built
57:46 - in here so bootstrap by default is the
57:49 - styling system that we're using that
57:51 - requires jquery as well and so let's go
57:54 - look at site css and see what it looks
57:57 - like
57:58 - so you can see that there's a few css
57:59 - styling commands let's pick one of them
58:02 - just to illustrate that it actually
58:03 - works i'm going to scroll down until i
58:06 - come to body let's just change that to a
58:08 - different color so let's try background
58:11 - color as an option
58:13 - and then i'm going to pick something
58:14 - that is just a light gray so how about a
58:17 - triple e
58:18 - and i'll save that and run it okay so i
58:20 - got it up and running and it looks like
58:22 - i have a light gray background i didn't
58:24 - have before now if you don't see that
58:26 - change it's because your browser has a
58:28 - style cached in there so if you press
58:30 - your shift key
58:32 - and then load again
58:33 - it will force the web browser or the web
58:36 - server to regenerate the page it'll get
58:39 - the copy from the server without using
58:41 - the cache and so if you didn't see the
58:43 - change that should affect it
58:45 - okay so you can see that we have a css
58:47 - styling change now css is a whole
58:50 - subject of its own so this is just a
58:51 - crash course on asp.net core
58:54 - but if you were to go and modify things
58:56 - you do not go in to modify the bootstrap
58:59 - css that is all predefined for you
59:03 - what they want you to do is to just work
59:05 - with the site css file which will
59:08 - override any of the default bootstrap
59:10 - settings the same thing goes with the
59:12 - javascript you can program any page you
59:14 - want using the js file here and write
59:17 - your custom code so those are your web
59:20 - development front end areas that you're
59:22 - going to work on so go for it if you
59:24 - know all that stuff already
59:26 - so there's another feature that i would
59:28 - like to show you but i'm afraid we won't
59:29 - have time to implement you can see that
59:31 - i have added the user column to the joke
59:34 - question so you can see who the author
59:35 - was for these great jokes however i
59:38 - think that's going to be best left for a
59:39 - more advanced video this is pretty much
59:41 - a crash course on how to build a very
59:43 - simple application and we've certainly
59:45 - done that so we've created a custom
59:48 - nav bar we've created a table we've
59:50 - created classes we've created a search
59:52 - function we've integrated security we've
59:54 - done some css work there's a lot of
59:56 - things that we've built here custom
59:58 - controllers views and models so all of
60:02 - these things are what jobs are about
60:05 - these days you're going to see
60:06 - interviews where this kind of technology
60:08 - is a popular subject just go in on
60:10 - indeed.com and check to see how many
60:12 - people are working with aspnet or dot
60:15 - core net those are the key terms that
60:17 - you're looking for great jobs now many
60:20 - of my students that have graduated with
60:21 - me have already gone on and done some
60:23 - jobs with this kind of development
60:25 - experience so it's a great study and
60:28 - congratulations for reaching the end of
60:29 - this crash course my name is shad
60:31 - slooter and i hope to see you again in
60:33 - the future
60:43 - you