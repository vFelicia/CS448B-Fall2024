00:00 - learn how to use react hook form which
00:02 - makes it simple to add forms to react
00:05 - with authentication in this course from
00:07 - code genix you'll learn how to handle
00:10 - the most complex crud form scenarios and
00:12 - react and completely integrate it with
00:15 - Zod and material UI this is the most
00:18 - complete Zero to Hero tutorial you can
00:20 - find for free on YouTube for react hook
00:23 - 4 I spent a large amount of time on this
00:25 - tutorial so liking and subscribing means
00:27 - the word to me in this tutorial you
00:30 - learn how to handle the most complex CR
00:32 - form scenarios and completely integrate
00:35 - with Zod and material UI or mui if you
00:38 - only want to learn react hook form and
00:40 - not zot or mui or if you want to change
00:43 - your validation library for example to y
00:46 - or UI library for example to and design
00:49 - you can still follow along with the
00:50 - tutorial the video is mostly about react
00:53 - hook form the tutorial is Project based
00:56 - but you will learn Concepts section by
00:58 - section so you can navigate through the
01:00 - video to the section you want using the
01:02 - timeline
01:04 - [Music]
01:06 - below we are going to create a user crow
01:09 - form that covers the most possible form
01:11 - scenarios as you can see here our user
01:14 - is going to have a name email address
01:16 - the states languages gender skills
01:19 - registration date and time former
01:21 - employment period which is a date range
01:24 - his salary range and also Dynamic form
01:27 - Fields like this as you can see here I
01:30 - can add new form fields to my form
01:33 - dynamically each field is going to have
01:36 - its unique validation for example for
01:38 - email if I put wrong input this throws
01:42 - this validation error that email is not
01:44 - valid and if I make it a valid email
01:46 - like this for example test sign
01:48 - gmail.com their error will be gone or
01:50 - for example if I select more than two
01:53 - scales for my user the error will be
01:55 - raised which I have put in my validation
01:58 - SCH schema like this for for each of
02:00 - these fields we create reusable
02:02 - components that connect the mui
02:04 - component to the react hook form we can
02:07 - later use these components in your other
02:09 - react projects all of this is handled in
02:12 - the most type safe way with the least
02:14 - amount of code we can also find all of
02:16 - the codes in the description below of
02:19 - this video you will also learn how to
02:21 - populate your form Fields by calling
02:24 - external API like this for example if I
02:27 - switch between different users here you
02:29 - can see the form Fields will be filled
02:31 - according to the data that I'm getting
02:34 - from the server and for example if I
02:36 - change the James name Tod for example
02:39 - David here and if I go down and hit on
02:42 - edit user you see that user edited
02:44 - successfully and the James changed to
02:47 - David and if I again switch to this user
02:50 - here you see that the new data is
02:52 - populated in the user form so you will
02:55 - learn how to create read and update an
02:58 - entity with the real for example using
03:01 - the best form validation strategy best
03:03 - practices architecture and much much
03:05 - more so let's get it started before we
03:08 - start setting up the project I need you
03:10 - to know that you can find all of the
03:12 - links of the source codes in the
03:14 - description below also if you have
03:16 - already set up your project you can
03:18 - always change the timeline below and
03:20 - head over to the section that you want
03:22 - another thing that I want you to know is
03:24 - that more than 92% of my viewers are not
03:28 - subscribed to my channel so subscribing
03:30 - and liking this video can really help me
03:33 - to stay motivated and it helps me grow
03:36 - my YouTube channel sooner so thank you
03:38 - very much so let's start a tutorial open
03:41 - up your preferred ID in this tutorial
03:43 - I'm going to use vs code then open up
03:46 - your terminal and create a very simple
03:49 - VI application like this mpm create V
03:53 - and Dot to create the project the same
03:56 - folder and hit enter I'm going to select
03:58 - react here type es Plus swc for better
04:02 - performance and that's it then let me
04:05 - just clear my terminal here then then
04:07 - type npm run sorry npm install to
04:10 - install all the packages after that all
04:13 - of the packages have installed we need
04:15 - to also install all of the requirements
04:18 - for our project these are all of the
04:20 - packages and dependencies that we need
04:22 - to install for our tutorial first we
04:24 - have mui packages here these three are
04:27 - always required in every mui project
04:30 - this is for our icons our date Piers
04:32 - here for this tutorial being complete we
04:34 - need to also install the date Piers pro
04:37 - version of mui B if you don't have this
04:39 - installed or if you don't have the
04:41 - license you can also follow the tutorial
04:44 - 100% there's nothing different if you
04:46 - don't have it installed because you can
04:49 - install it easily and after that if you
04:51 - have preferred to use the extra features
04:54 - of date Pickers which are not a lot you
04:57 - can buy the licensed profit to use but
05:00 - in this tutorial the date Pickers the
05:02 - simple date Pickers will satisfy our
05:04 - needs there's only one or two features
05:07 - that we need to have the date Piers Pro
05:10 - installed but there's nothing very
05:12 - special can follow along we have also we
05:15 - also going to use the data fness there
05:17 - are many libraries for managing data and
05:19 - time in JavaScript but for example
05:23 - moment and data fness but the reason
05:26 - that I prefer data fness over all of the
05:29 - similar packages is that it supports
05:32 - many different calendars and you can
05:34 - always convert between all those
05:36 - calendars between each other which is
05:39 - pretty awesome after that we have our
05:41 - form logic here the main dependency the
05:44 - react form is here use Zod for our esas
05:47 - and validations we also need to create a
05:51 - connection between the react form and
05:53 - the Zod here and because of that we need
05:55 - to install this hook form resolvers
05:58 - because by default the react hook form
06:00 - doesn't know anything about Z so we need
06:02 - to create a connection between these two
06:05 - libraries with this third Library which
06:07 - we are going to install it as a third as
06:09 - a death dependency and lastly we have
06:12 - our utils here we need a simple HTTP
06:15 - client we are going to use axus here
06:17 - because we're going to fetch our data
06:21 - outside of our project for simulating
06:23 - the real Bo we're going to use a March
06:27 - back end in this tutorial which we're
06:29 - going to set it up later after that we
06:31 - are going to install the lad dash for a
06:33 - very simple task which is not very
06:35 - requir in this tutorial and also we are
06:38 - going to install the react query to
06:40 - manage our serate which is not required
06:43 - in this tutorial and if you have other
06:46 - ways to handle your queries you can
06:48 - follow along and it's just for the
06:51 - Simplicity that it provides and if you
06:53 - want to learn it you can check the
06:55 - description below to check my other free
06:58 - video on YouTube about react query which
07:01 - is the complete course of this package
07:03 - but you can see follow along if you
07:06 - don't want to use this package or you
07:08 - haven't learned it yet now we head over
07:10 - to the vs code then open up the terminal
07:13 - and install all of the dependencies that
07:15 - I just told you about but a very
07:18 - important thing to do here is that to
07:20 - just install the version 3.2 of the date
07:25 - FNS Library here because there's some
07:28 - conflicts between this Library here and
07:30 - the mui datee Piers Library so if you
07:34 - install this version of it everything is
07:36 - going to be all right now hit enter
07:37 - after that they are installed you need
07:39 - to also install a very simple dependency
07:42 - the hook form def tools as a def
07:44 - dependency here which is helpful for
07:46 - debugging our form so hit enter also
07:50 - then if we head over to our package.json
07:52 - file let me just make it a little bit
07:54 - smaller these are all of the versions
07:56 - that I'm using in this project so if if
07:59 - you want to exactly follow along you can
08:01 - install these exact versions so you
08:04 - don't have any conflicts or other
08:06 - problems also I'm using the note version
08:09 - 20 in this
08:14 - tutorial now close your package adjacent
08:17 - file open your file explorer here then
08:20 - delete the assets folder app to CSS and
08:23 - index a CSS file here because I always
08:26 - want to keep everything very simple and
08:29 - in this tutorial we are not going to use
08:31 - any CSS at all and styling because we
08:33 - don't need them so remove all of these
08:35 - then head over to your app. TSX file
08:38 - then remove all of these Imports then
08:41 - remove everything between the curly
08:43 - braces here to the bottom and for
08:46 - Simplicity I'm going to return return a
08:49 - simple div like this you're going to
08:51 - change it later and I will prefer the
08:55 - name export instead of default exports
08:58 - it's just a personal preference so use
09:00 - whatever you want now I need to do a
09:03 - little bit folder structure here in the
09:05 - SRC folder I'm going to create a
09:08 - components folder a types folder and
09:11 - also a users folder which is mainly the
09:14 - thing that we are going to develop in
09:16 - this tutorial is in this folder as I
09:19 - talked before and I'll show you we're
09:20 - going to create a CR user for this
09:24 - tutorial also in this feature in the
09:26 - users feature I again create the
09:29 - components folder the services folder
09:32 - the types folder and also the U folder
09:36 - to do some simple task for us in the
09:38 - components folder I'm going to create
09:40 - the users. TSX component itself which is
09:44 - the main component of this feature then
09:47 - the services folder is for communicating
09:50 - to the outside world for that I'm going
09:52 - to create one file called queries. TS
09:56 - because if you have follow along my
09:58 - react query or query tutorial you know
10:01 - what is this going to be but if you
10:03 - don't know it or if you don't know react
10:05 - query you can also follow along pretty
10:06 - easily and also we need to create
10:09 - another file called
10:11 - mutations. TS this is responsible for
10:14 - for example our post request delete
10:16 - request put request and this is for only
10:19 - getting data from the server which is
10:21 - not related to this tutorial but I have
10:23 - to do because it makes the project much
10:26 - simpler for you to follow along let me
10:28 - just collapse it
10:29 - and we don't need to create anything
10:32 - inside the Su folders for now then we
10:34 - need to head over to the main. TSX file
10:37 - let me just close the Explorer here I
10:39 - need to remove these two Imports here
10:42 - sorry I need to just remove the index at
10:45 - CSS file here and change this import to
10:48 - named import like this now we need to
10:51 - wrap our project inside our react query
10:55 - like this I'm going to Simply create a
10:57 - new query client client is equal to new
11:01 - query client I don't know why sometimes
11:04 - my vs code intelligence for imports do
11:07 - not work so I'm going to import all of
11:09 - the packages manually so I'm going to
11:11 - import from 10 stack react query the
11:15 - query client itself and also I need to
11:18 - import query client provider here like
11:22 - this and I'm going to wrap my project
11:24 - inside this provider here so like this
11:27 - I'm going to use Query CL client
11:29 - provider and I'm going to wrap my app
11:32 - file inside it then for the property
11:35 - client property I'm going to use this
11:37 - query client that we just defined
11:39 - earlier so like this query client then I
11:43 - need to go to the users component here
11:47 - then I'm going to export a very simple
11:49 - function component like this return div
11:52 - for example users and after that I'm
11:55 - going to import the user component
11:57 - inside our app. TSX file here like this
12:00 - I'm going to remove this return again
12:02 - I'm going to type return and then I'm
12:04 - going to use users here like this and
12:07 - now if we run our application like this
12:09 - andp run Dev if you head over to this
12:11 - address here we see that everything is
12:13 - working as expected excuse me that if
12:16 - the tutorial is very slow paced but I
12:18 - want you go through everything in detail
12:21 - and this tutorial is very beginner
12:24 - friendly so anyone can follow now that
12:26 - project is perfectly set up we can start
12:29 - the main project so for that we head
12:31 - over to our users. TSX file and for you
12:34 - to better understand the concept of
12:37 - react hook for the controllers and Zod I
12:41 - need you to create the old way of
12:44 - creating form fields in react which is
12:46 - pretty simple just follow along but it's
12:49 - necessary for you to learn the react
12:51 - hook form and the controllers of react
12:54 - form so it's necessary to follow line in
12:57 - the return of our component
12:59 - I need to create a simple HTML input as
13:03 - you can see here the input is here but
13:05 - it doesn't have any special
13:07 - functionality for now for this input to
13:10 - have some meaning I need to create a
13:13 - simple State like this for example input
13:16 - and set input I'm going to import from
13:19 - react the user State and the initial
13:22 - value is a simple string now I need to
13:25 - somehow create a connection between this
13:28 - and this input for that for the value
13:30 - property of my input field I'm going to
13:33 - put for example input the input and now
13:36 - for example if I change the initial
13:38 - value of this input for example to
13:40 - something and if I refresh the page you
13:43 - see that this value is bind it here just
13:45 - let me remove it and as you can see if I
13:48 - type anything here you see that nothing
13:51 - is changing because I need to also do
13:54 - something but the input is changing so
13:56 - for that I'm going to use the unclick
13:59 - Handler for react then I'm going to get
14:03 - the event from this and after that I'm
14:06 - going to set the input to e. target.
14:10 - value sorry for my mistake instead of
14:12 - unclick I need to use unchange Handler
14:15 - and now if I type something on this
14:17 - input you see that the value changes and
14:20 - now I can access this value inside of a
14:23 - component because this value is exactly
14:26 - this for other things to handle for
14:29 - example I need to specify the unur when
14:32 - the user leaves the field what should
14:35 - happen I need to specify a name for my
14:37 - input for example the user name by hand
14:41 - then I need to pass the ref I need to
14:44 - handle the disa state if the field is
14:46 - required what is the max length of my
14:49 - input field and much much more as you
14:52 - can see this is too much code for only a
14:55 - very simple text field or input in our
14:59 - project and it's going to be a spaghetti
15:01 - code as our project grows which is not
15:05 - very developer friendly and it's going
15:07 - to become very very hard to maintain for
15:11 - Enterprise our larger scale applications
15:14 - and that's the old way of using or or
15:17 - creating form fields in react now I need
15:20 - to replace this implementation with the
15:23 - modern react hook for implementation let
15:25 - me just remove all of this only I need
15:28 - to keep the input like this then I'm
15:30 - going to remove the state and also the
15:32 - user import then from the react hook
15:36 - form from react hook 4 I need to import
15:39 - the main hook of this amazing Library
15:42 - like this then inside my component here
15:45 - I'm going to use it I'm going to Define
15:47 - const is equal to use form like this and
15:51 - from our use form hook I can access all
15:54 - of the properties of the react hook form
15:56 - for example I can get the values of my
15:59 - form I can register my Fields I can
16:02 - reset my form I can set value of any
16:04 - fields and much much more you can also
16:07 - use the functions or values of use form
16:10 - hook like this for example instead of
16:13 - opening and closing CR braces here I can
16:16 - remove it and for example I can save
16:18 - form and below it for example I can
16:20 - access all those properties and
16:22 - attributes like this for example I can
16:24 - say form. register or I can say form.
16:27 - set value but it's too much boilerplate
16:30 - code and hard to read and also the use
16:33 - for recommends us to initialize the
16:36 - values from use for hook like this for
16:37 - example for now I need to get the
16:39 - register for now and you're going to
16:41 - know what is it in a second also this
16:43 - hook here is generic what does it mean
16:46 - it means that I can pass a type for my
16:49 - form like this for example my form is a
16:52 - single email input like this which is of
16:55 - Type S string here this going to help us
16:58 - with intelligent
16:59 - very very much you're going to know in a
17:01 - second inside the return section I'm
17:04 - going to open and close curly basis here
17:07 - and I'm going to use a spread operator
17:09 - then I'm going to put the register here
17:13 - like this so and for its value I'm going
17:16 - to place single quotations here and as
17:18 - you can see here the intelligence is
17:21 - helping me here this is the email the
17:23 - react hook form got from the generate
17:25 - that we passed here so the Intel sense
17:28 - is crucial here so I select email here
17:31 - and as you can see my input field is
17:33 - registered with my hook for but what is
17:36 - this register here let me just remind
17:38 - you instead of passing unchange ref name
17:41 - the unblur max length of our field is it
17:45 - required or not and so much board
17:48 - instead of this we're going to pass this
17:50 - which if I show you register and if I
17:53 - place a DOT here you can see all of the
17:55 - things that is going to do for us with
17:57 - this sprad operation Ator here it has
17:59 - name un blur unchange ref required
18:02 - disabled Max mean and so much so much
18:04 - more let me just remove all of these
18:06 - this is the most simple form that you
18:08 - can create with react hook form and if
18:10 - you compare it with previous
18:12 - implementation you can see that it's so
18:14 - much cleaner code and easy to maintain
18:17 - and it does for us very much now if you
18:19 - open your browser you can see that
18:21 - everything is working as previously just
18:23 - let me put a simple placeholder for my
18:26 - input for you to know that it's an email
18:28 - field
18:29 - and now you see that there is no
18:31 - validation on this input field for
18:33 - example I don't want to let the user
18:35 - enter invalid email for example this is
18:38 - not a valid email so I need to show the
18:40 - user a very simple error below it that
18:43 - your email is not valid or it is too
18:46 - many characters or this field is
18:47 - required and for example you cannot
18:49 - leave it alone the thing that I'm going
18:51 - to show you is the default
18:52 - implementation of feied validation in
18:54 - react H formb it's for you to better
18:57 - understand the concept of react C form
18:59 - and it's not the way that we want to
19:01 - implement the validation in our tutorial
19:04 - and for that we are going to use Zod in
19:06 - a few
19:07 - minutes imagine that my email field in
19:10 - my form is required and it cannot have
19:13 - more than 10 characters to make this
19:15 - type of validation I'm going to put a
19:18 - comma here then I'm going to open an
19:21 - object here inside that for example I
19:23 - can type required these are all Native
19:26 - HTML Fields validation
19:29 - and I again open another C basis here
19:32 - and for the value I can say I can put
19:35 - the true here because my email field is
19:38 - required and for the message I'm going
19:40 - to put for example the email is required
19:44 - I can add other validations here for
19:46 - example I can add max length is going to
19:49 - be 10 for example and for the message
19:52 - I'm going to put too many characters
19:56 - characters sorry character erors that's
19:59 - it for now but how to show these errors
20:02 - to the users I need to put my input
20:05 - inside a react fragment here and below
20:07 - the input I'm going to open a paragraph
20:10 - here then I can show the errors to the
20:13 - user but how very simple in the use form
20:16 - hook we have our form estate like this
20:19 - and if I show you this form estate here
20:22 - form State you can see that there is
20:24 - errors here disable the fields that are
20:26 - dirty or for example if our form is
20:29 - submitting and much more but it's not a
20:31 - good practice to use for example if I
20:35 - want to show you show the user the
20:37 - errors like this form mistake. errors
20:39 - it's too much go down it's not very nice
20:42 - for that in my use form hook I'm going
20:44 - to put colum then from it I'm going to
20:47 - import the errors or other thing that
20:50 - you want for now the errors is enough
20:52 - between these two paragraphs here I can
20:54 - put errors. email this is for the
20:57 - generic that we pass here in our use
20:59 - form Hook and the intelligence is
21:01 - amazingly helping us out and we put
21:04 - another dot here I can then I can get
21:07 - the email. message here then we can show
21:09 - it to the user and now if I head over to
21:11 - my application and if I for example put
21:15 - more than 10 characters here as you can
21:17 - see there is no error shown to the user
21:20 - but what is the problem here by default
21:22 - the react hook form shows the user the
21:26 - fields errors the form errors when the
21:28 - user hit on submit or create or anything
21:32 - else button below the form but for now
21:34 - we don't have any submit button inside
21:37 - our form for that inside the options of
21:41 - the use form hook I can open an object
21:44 - here and I can also apply many many
21:49 - default settings for my use form here I
21:51 - can set for example default values for
21:53 - my form I can set initial errors I can
21:57 - use the resolver which is the thing that
22:00 - is going to connect the Z to the reactor
22:02 - form in a moment for now I need only the
22:05 - mode field here then I put call in here
22:07 - and as you can see here this is when
22:10 - form validation occurs by default it's
22:12 - on submit by default and if I again
22:15 - refresh the page and if I type more than
22:17 - 10 characters you can see that there is
22:19 - no error here because it waits for us
22:21 - for for us to submit the form then show
22:24 - the errors to the user but if I put it
22:26 - on all and if I refresh the the page you
22:29 - can see if I type more than 10
22:31 - characters it immediately shows me this
22:33 - error because the validation is set on
22:35 - all I can also change it to many other
22:39 - conditions for example I can put it on
22:41 - blur here and if I refresh the page if I
22:44 - type more than 10 characters and unfocus
22:47 - from this input you can see that on blur
22:49 - this error is going to shown to us but
22:52 - for this tutorial I'm going to put it on
22:54 - all for you to see better all the errors
22:57 - I'm thinking there here and to your
22:59 - preference you can change it later for
23:01 - example if I type something and remove
23:03 - it you see that the email is required
23:05 - let me just make it a little bit smaller
23:07 - the email is required is shown to us
23:09 - from here which is very powerful thing
23:12 - to do in use form with a few lines of
23:15 - code which is handled for us
23:16 - automatically every form needs to be
23:18 - able to submit its data to something for
23:21 - example your backend it's pretty simple
23:24 - in react hook form I'm going to change
23:26 - this react fragment here for example to
23:28 - form then this form has a property
23:31 - called unsubmit this is all HTML and
23:34 - inside it I need to pass something first
23:36 - what I'm going to do on submit if the
23:38 - user clicks on submit button or if he
23:42 - clicks on the enter button on his
23:44 - keyboard it's going to run this function
23:46 - here for example I can name it whatever
23:48 - I want for example I call it un submit
23:50 - for Simplicity then I'm going to create
23:53 - a simple function that likes the submit
23:56 - V here and I can pass the onsubmit here
24:00 - the problem is that whenever the user
24:03 - clicks on submit or hits enter on his
24:05 - keyboard the form is going to be
24:07 - submitted to the server which is not the
24:08 - behavior that we want because there
24:11 - might be some fields that they are not
24:14 - validated or they are required but they
24:16 - are not filled by the user so we do not
24:19 - want that behavior to overcome that also
24:21 - react form provides us with another
24:24 - utility called handle Summit for us it's
24:26 - pretty easy to use it you just need to
24:29 - wrap your submit function here around it
24:32 - handle submit and I put ons submit here
24:35 - inside what does this do is that let me
24:38 - just show you side by side if I go over
24:40 - it and hit on enter which Summits our
24:43 - form and runs this function here if I
24:46 - hit enter you see that it's going to
24:49 - raise us all the form Fields errors and
24:51 - also if you check the console here if I
24:55 - refresh again and hit on enter this
24:57 - function didn't run which is exactly the
24:59 - behavior that we want we want this on
25:01 - Summit function to only run when all
25:04 - fields are valid this handle Summit does
25:06 - this for us so if I make this email form
25:09 - valid for example like this and if I hit
25:11 - on enter you see that Summit is run
25:14 - collect now if I make this form not
25:16 - valid and if I hit on enter you see that
25:19 - there is no Summit here which is exactly
25:20 - the behavior that we want so this was
25:23 - the most simple form that we can create
25:26 - using react F form this way of
25:28 - implementing a form in react to form is
25:31 - totally all right and 100% correct but
25:35 - the problem is that when our forms
25:37 - become more complex this way of handling
25:40 - for ES schemas here and the validations
25:43 - like this here is not very maintainable
25:46 - and it can become unmaintainable after a
25:49 - while imagine that your application has
25:52 - 15 20 or 30 forms inside it and each of
25:56 - them has 20 or 30 fields in it and you
26:00 - need to handle all of the validations
26:02 - the schema the summit and so much more
26:05 - this way of implementing is not
26:07 - recommended for Enterprise applications
26:09 - in react the Zod is here to rescue Us in
26:13 - this tutorial we're going to create this
26:15 - form here as you can see there is so
26:17 - much into it if I for example click on
26:20 - the summit the new user button you see
26:22 - that all of the validations are causing
26:24 - error which is correct if I hit the
26:27 - reset button here the form has been
26:29 - reset if I click on for example David a
26:32 - user the fields are loaded if I click on
26:34 - John Robert and so much more I have auto
26:36 - complete here the toggle button and for
26:39 - example these checkboxes have validation
26:41 - to for example if I select more than two
26:43 - items the validation is causing this
26:45 - error that at most two elements must be
26:47 - selected which all of these errors and
26:50 - for example all of these errors are
26:52 - caused by zot for example if I put no
26:56 - email here it says that email is
26:58 - required if I put invalid email it says
27:01 - that email is not valid and so much more
27:03 - and if you want to handle this type of
27:05 - forms with this way it's not pury
27:09 - recommended so we need to use Zod this
27:13 - is Zod Zod is a type script first scheme
27:15 - of validation VI static type inference
27:18 - which is pretty complicated here and in
27:21 - the documentation also Z is a type
27:23 - Escape first schema declaration and
27:25 - validation library and and so much more
27:27 - but we are going to learn what is it in
27:29 - real world example for you to learn
27:32 - better in practice this is the form that
27:34 - we have created so far and this is the
27:36 - form that we are going to create before
27:38 - we assort anything about implementing
27:41 - this structure in our project we need to
27:44 - create a skeleton for our form by
27:47 - skeleton I mean the schema for our form
27:51 - the fields names their types their
27:53 - validations for example this field is
27:56 - going to be of type a string this going
27:58 - to be of type bullan this going to be of
28:01 - type date these are going to be of type
28:04 - A String arrays and much much more
28:06 - during the SCH schema creation I'm going
28:08 - to compare the result and the schema
28:11 - itself side by side for you to better
28:14 - understand what are we doing and
28:15 - creating at the moment so in your vs
28:18 - code just open the file explorer then
28:21 - inside the users folder inside the types
28:24 - I'm going to create the es schema. TS
28:27 - file which is the schema for the users
28:29 - form which is I mean this schema is
28:32 - exactly going to be here when it has
28:35 - been implemented so now if I head over
28:37 - to the SCH schema I need to start
28:39 - implementing my form SCH schema to
28:42 - create a schema in Zod first we need to
28:44 - import Zed from zot and inside my es
28:48 - schema. TS file here I'm going to export
28:51 - cons es schema you can name it whatever
28:54 - you want which is going to be equal to
28:56 - z. object and inside it I'm going to put
29:00 - all of my form Fields what do I mean as
29:02 - you can see here my form has a name
29:05 - field then inside my schema for example
29:08 - I can put the name field here which is
29:10 - going to be of type z. string and that's
29:14 - it for our first field schema VI Z the
29:17 - syntax is very explanatory and very very
29:20 - easy to implement for example if I had
29:23 - another field called for example age I
29:25 - can do something like z. number if I had
29:28 - a date field for example I can do set.
29:31 - date we can do for example custom field
29:34 - with Z like this imagine that you have a
29:37 - type that is not in results default
29:40 - types and you can Define it here and so
29:43 - much more that we are going to learn
29:45 - them one by one let me just remove the
29:47 - age also also if you remember you see
29:50 - that my name field is a required field
29:53 - and if I remove and clear the field you
29:56 - see that it says that a string must
29:58 - contain at least one character to
30:00 - implement something like this in Zod
30:02 - which is pretty simple I can put another
30:05 - dot here mean and one it means that the
30:08 - field cannot be less than one at least I
30:11 - need to put one character for error to
30:14 - be gone also this error that is shown
30:17 - here is handled by Zod also and you can
30:21 - also overwrite this default error pretty
30:24 - simple uh in your SCH schema right here
30:27 - for example I can open an object here
30:30 - put message here then I can put
30:32 - something like required here and you're
30:34 - going to see this required exactly here
30:37 - in the error field which we haven't
30:39 - implemented our form yet so bear with me
30:41 - the other field is email which the
30:44 - concepts are the same but the problem is
30:46 - that we cannot put the zot doesn't have
30:50 - anything like the email validation here
30:52 - and we must put this kind of validation
30:55 - manually which is pretty simple and
30:57 - normal below the name here I'm going to
30:59 - create the email which as I told you
31:02 - before the names here can be different
31:04 - and can be anything in front of email
31:07 - I'm going to put z. string as before and
31:10 - then I'm going to put mean of one which
31:13 - means that the FI is required and also
31:16 - if the email is not filled yet the
31:19 - validation error cause this error to be
31:21 - raised email is required let me just
31:24 - make it a little bit smaller it's too
31:26 - much and that's it for now but it only
31:29 - validates if the email is not filled or
31:32 - if this input is empty like this but how
31:35 - can I do something like this if the user
31:37 - enters invalid email where does this
31:39 - come from this is the power of Zod here
31:42 - I can put dot dot refine here then what
31:46 - does this do is that it's going to
31:49 - create different or custom validation
31:52 - for our Fields after all of this here by
31:55 - now my email is going to be a type of
31:58 - string with the minimum character of one
32:01 - and now I have access to the email input
32:04 - like this for example email but it can
32:06 - be item with text anything else the name
32:09 - doesn't matter here but the thing you
32:11 - need to know is that this is going to be
32:15 - exactly the thing that the user has
32:17 - typed now for example if I put a here
32:20 - it's going to be a i to if I type fa
32:23 - here the email or for example item or
32:26 - text field is going to be fa now I need
32:29 - to do something here in the refine
32:31 - function of Zod I need to validate the
32:35 - the text to be image and if it is true
32:39 - then the validation is correct and else
32:42 - if it is not a valid email it causes
32:47 - this error to be traced so it's pretty
32:50 - simple to do let me just remove this
32:52 - here inside your file exp I need to
32:54 - create for example a new file called
32:57 - cont constants TS here then I'm going to
33:00 - paste this custom rejects here which
33:03 - will validate any email pattern here you
33:06 - can copy it from the source code or you
33:09 - can do any other different Rex pattern
33:11 - that you want just I only want you I
33:14 - only want to show you how we can
33:16 - Implement different types of custom
33:18 - validations in zot so we Define these
33:21 - patterns. email here if I want to access
33:23 - it from other components I can access it
33:26 - like this patterns. email which is
33:27 - JavaScript 101 now if I head over to the
33:30 - users component here sorry the es schema
33:33 - function here I can do something like
33:35 - this this refined function expects us to
33:38 - return a bullant statement it must be
33:40 - either true or false so I need to
33:44 - validate if this text the text that the
33:46 - user has filled Now by now is an email
33:49 - or not it's pretty simple using reject
33:51 - so I'm going to return
33:54 - patterns. email this exactly the thing
33:57 - that we just paste it here then I'm
33:59 - going to test this reject with the value
34:02 - of this now this is going to return a
34:05 - true false statement if this text
34:07 - validates the email rejects that we just
34:09 - paste it's going to return true
34:11 - otherwise it's going to return false and
34:14 - then our form field is going to return
34:17 - is going to show us an error and also I
34:20 - can make this code a little bit simpler
34:22 - I remove this carrace here this one and
34:25 - also this one then I'm going to return
34:28 - the return here and that's so much
34:29 - simpler after the function we can pass
34:32 - another argument here which I can pass
34:35 - custom validation errors like this for
34:37 - example I can say email not valid which
34:40 - you are going to see it in our
34:42 - application in a moment we are going to
34:45 - do the next fields in a moment just I
34:48 - need to implement these two Fields
34:50 - schemas inside my users component for
34:53 - you to see what are we doing right now
34:56 - now we need to start implementing our
34:58 - form Fields one by one in our users
35:01 - component here using material UI or muui
35:05 - and I expect you to know a little bit of
35:07 - material UI because uh our usage of
35:10 - material UI or muui in this tutorial is
35:13 - not pretty complex and it's very easy to
35:16 - follow if you don't know anything about
35:18 - mui you can also follow along the usage
35:20 - of mui in this tutorial is something
35:23 - like for example this input field here
35:26 - and in the mui for this input field is
35:28 - going to be for example be text field
35:30 - instead of input so I remove all of this
35:34 - I just put a simple react fragment here
35:36 - I'm going to remove this also I need
35:39 - only the register here then I need to
35:41 - remove this generic here but I need the
35:44 - mode to be all for now then I'm going to
35:46 - remove this on Sumit also now I can
35:48 - start adding my M components here if we
35:52 - head over to our schema here again we
35:54 - see that we defined a name and an email
35:56 - here so I need to create two text Fields
35:59 - using mui the first one I'm going to
36:01 - import text field which my intence is
36:04 - not working I'm going to import text
36:07 - field from assign mui and material then
36:11 - I'm going to pass a register register as
36:15 - before but as you can see here I cannot
36:17 - see any intelligence at all it is
36:20 - because that we remove the generic that
36:23 - we passed here so I need to pass
36:25 - something here this is our esema and
36:27 - this is our form here we need to create
36:30 - some kind of connection between this
36:32 - esema here and this generic here because
36:35 - I expect that here I can see the name or
36:39 - email by vco intelligence for example
36:42 - name or email here which is recommended
36:45 - to me by vscode but now I cannot see
36:48 - anything because this form here doesn't
36:50 - know anything about this schema here to
36:53 - do that I cannot simply pass this schema
36:56 - here schema here because this isn't a
36:59 - type but this generic here accepts only
37:02 - types the has an amazing utility type
37:06 - that you can easily convert your SCH
37:08 - schema into types like this below my
37:11 - schema or anywhere else I can export a
37:14 - type called for example es schema or
37:17 - anything else which is going to be equal
37:19 - to z. infer and I'm going to pass this
37:23 - esema as a generic to this z. infer here
37:26 - I'm going to pass this type of our
37:29 - schema and now if you hover over the
37:31 - schema you see that we have name and
37:33 - email and we converted our schema here
37:36 - to a type which now I can simply put
37:39 - this es schema in here es schema and I'm
37:42 - going to import it from types schema and
37:45 - if we control and space here we see that
37:48 - we have email and name pretty easily and
37:50 - the intelligence is working as we
37:52 - expected but by now our form doesn't
37:55 - know anything about the Zod here you
37:58 - only pass the name this is used for only
38:01 - for intelligence and nothing much more
38:04 - but we need to somehow create a
38:05 - connection between the form the react
38:08 - hook form and Z which is pretty simple
38:11 - here inside this object here I can pass
38:14 - the resolver like this and for resolver
38:17 - I'm going to use Zod resolver then I
38:19 - need to import the Zod resolver Zod
38:23 - resolver from which form the resolvers
38:26 - slz then this Z resolver here expect
38:29 - expects us to provide it with an
38:31 - argument which this argument is going to
38:34 - be exactly the schema that we just
38:36 - defined earlier so I'm going to put
38:38 - schema here and that's it by now our
38:41 - form is completely connected to the
38:43 - schema here by using the Zod resolver
38:46 - for the logic and the SCH schema generic
38:48 - that we have inferred from Zod for the
38:51 - Intellis to work better now I have
38:54 - intellisense for my name field and also
38:56 - I'm going to put put another field for
38:58 - my email but as you can see by now they
39:01 - don't have any labels I'm going to add a
39:03 - label for name for example called name
39:06 - and also another for email called email
39:09 - for you to see better understand what is
39:10 - what then I'm going to put them in a
39:13 - simple stack if you don't know what a
39:15 - stack is in mui it's a display Flex with
39:18 - the direction of column and now I can
39:20 - add a gap of two between these two
39:23 - Fields here the six is exactly
39:26 - equivalent to the a style prop on any
39:29 - HTML tag for example instead of doing
39:32 - this in mui I'm going to do something
39:35 - like for example div St style display is
39:39 - off of type Flex Flex direction is
39:42 - column and also the Gap is going to be
39:45 - two which is exactly this stack here but
39:48 - we do not need it the stack is pretty
39:51 - much simpler because we are using M now
39:54 - everything is correct now but as you can
39:56 - see here if I do anything the
39:59 - validations that we Define in our schema
40:01 - these validations the SCH schema the
40:03 - email is required imaage is not valid or
40:06 - the required message of our name field
40:08 - are not shown to us because we need to
40:11 - tell the mui about these errors which is
40:14 - pretty simple and self-explanatory the
40:17 - mui text field provides us with an error
40:20 - Boolean what is it if it's true the
40:23 - field is going to be of type of color
40:25 - red and else is going to to be normal so
40:28 - we need to somehow tell the mui that if
40:31 - there's an error on this field change
40:32 - your color to red or error or whatever
40:35 - else to do that as before from the form
40:39 - State object I'm going to get the errors
40:41 - of my form and for the error I want to
40:45 - make it true when we have an error
40:47 - otherwise false
40:50 - errors. but we need to convert this
40:53 - value to a Boolean it's pretty simple in
40:56 - type Escape we are going to to use
40:57 - double exclamation marks here and this
41:00 - is going to convert this value to a
41:03 - Boolean and now sorry I use wrong field
41:06 - here I'm going to put name here instead
41:08 - of email because it's email it's a name
41:10 - field and now if I uh don't fill it you
41:13 - see that we have an error because the
41:15 - fill is required and we haven't filled
41:17 - it yet and if I again fill it we see
41:20 - that the error is gone but we need to
41:21 - also show the user the error the mui
41:25 - provides us with the helper text prop if
41:28 - you want to use it we can simply put
41:30 - helper text here in our text field then
41:33 - inside it we can provide for example I
41:35 - can provide it here test as you can see
41:37 - here the helper text is exactly below
41:40 - our text field here and for example if I
41:42 - if our form field has an error the error
41:45 - is going to be here and we somehow need
41:47 - to substitute this text here with the
41:50 - error validation that we provided in the
41:53 - Zod schema if you head over to our
41:55 - schema here then I put it here side by
41:58 - side we need to somehow show the user
42:00 - the validation errors in our schema in
42:03 - our component so it's very simple can be
42:06 - done with the react form on our errors
42:08 - object errors. email not email the name
42:12 - do message I can get I can get the
42:15 - validation message from my ER schema as
42:17 - you can see here this error message is
42:19 - automatically provided by the we can
42:22 - overwrite it here like this I can put
42:24 - for example message is equal to required
42:26 - and now if I refresh my page then you
42:29 - can see the validation here this
42:31 - required exactly here and if I resolve
42:34 - this issue here you can see that error
42:36 - is gone I can simply do this scenario
42:39 - also for the email text field for error
42:41 - I can pass the errors. email exactly
42:45 - like the name text field and also for
42:47 - the error message I can do exactly
42:49 - something that be done for the name
42:52 - errors. email. message and if I enter
42:55 - invalid email we can see see that this
42:58 - error message here exactly is shown to
43:00 - the user if I make this field empty you
43:02 - can see that email is required which is
43:04 - exactly this message that we have passed
43:06 - for our email in our schema this is
43:09 - enough for now so let's just add new
43:12 - fields to our schema so I close the
43:14 - users component here make this bigger
43:16 - and if I head over to our final project
43:19 - here we can see that here we have an
43:21 - auto complate component from mui which
43:24 - we can select the states in the drop
43:26 - down here and also I added another
43:29 - validation that if we select more than
43:31 - two items here it will cause this error
43:33 - to be raised in comparison to text
43:36 - Fields implementing this Auto complate
43:39 - component and connecting it with react
43:42 - hook form and Zod is something that we
43:44 - need to handle it manually let me just
43:47 - give you an example if I head over to my
43:49 - users's component I create for you the
43:52 - most simplet form of AO complate here
43:54 - the complate I'm going to import it from
43:56 - mu y then it's going to need an options
44:00 - property which is responsible for
44:01 - showing these options here for example
44:04 - for demonstrating only I'm going to for
44:06 - example put the ID to one and for the
44:09 - value I'm going to use for example Texas
44:12 - here also we need to put the render
44:15 - input prop here we're going to get the
44:17 - params from the this render input then
44:20 - for the return of it I'm going to render
44:22 - a simple text field like this I'm going
44:24 - to pass the prams here with the label of
44:27 - for example something like States if you
44:30 - head over to the mui documentation of a
44:33 - the complete this is exactly the
44:35 - implementation that we just did in our
44:37 - users component here now if I head over
44:39 - to my application we see that an error
44:41 - will be raised because instead of value
44:44 - I forgot to put label instead because a
44:46 - complete needs an array of options with
44:49 - the key ID and key label here instead of
44:51 - value and if I click on my auto compete
44:53 - here I can see that the Texas is here
44:55 - this is the implementation of the
44:57 - complete component in AI but the problem
44:59 - is that this component doesn't know
45:02 - anything about our for here and we
45:04 - cannot do something simply like our text
45:07 - field here we cannot pass something as
45:09 - simply as a register to this auto
45:11 - complete and we cannot expect that it
45:13 - works so let me just remove it from here
45:16 - because of that I need to create a
45:19 - custom controller for the mui or the
45:21 - complete component and I want to make it
45:23 - reusable so we can use this component
45:26 - that we just created anywhere that we
45:28 - want because of that I'm going to open
45:30 - the file explorer here then in the
45:32 - components inside the SRC folder I'm
45:34 - going to put the custom controllers that
45:37 - we create for the react hook form and
45:39 - mui so inside this folder I'm going to
45:41 - create a custom component for example
45:44 - called rhf AO complete AO complete. TSX
45:49 - the rhf it stands for react hook form so
45:51 - I always want to create my custom
45:53 - controllers like this so I know that
45:55 - it's a controller for the react hook
45:58 - form library inside this component I'm
46:00 - going to export function rhf Auto
46:02 - Complete auto complete like this then
46:05 - I'm going to return a simple something
46:07 - here for now implementing this
46:09 - controller here the component that we
46:11 - are just going to create here is pretty
46:14 - much tricky but very sensible and it
46:16 - requires to to follow along the
46:18 - instructions carefully and if you
46:20 - implement this custom controller in our
46:22 - project the rest of the tutorial will be
46:25 - very easy we're going to create custom
46:27 - controllers for aut complete for Target
46:29 - group for radio buttons for checkboxes
46:32 - and much more let me just remove the
46:34 - return value here then I'm going to
46:36 - return controller and I'm going to
46:38 - import it from react form let me just
46:40 - make the ID full screen to consent
46:43 - concentrate then I'm going to close it
46:45 - here this controller from react hook
46:47 - form provides us and render property
46:50 - that from this we can get the prams that
46:52 - the react provides us then we can pass
46:54 - it to something that we want to this
46:57 - controller to control for example here
47:00 - I'm going to use the auto complete
47:02 - component from mui and we need to fill
47:05 - in the value here the unchange method
47:08 - unchange method options and much more
47:11 - but we need to somehow get all of these
47:13 - values from our controller here our
47:15 - controller also wants a property called
47:17 - control which I'm going to pass the
47:19 - control here which I did not defined it
47:21 - yet and also a name here after that we
47:24 - implemented this custom component which
47:27 - we didn't yet if I head over to my users
47:29 - I cannot simply use it for example like
47:31 - this rhf or the complete in my users
47:34 - component then I'm going to pass the
47:36 - name for example something which is
47:38 - exactly something like this register
47:40 - here I'm going to pass the options which
47:43 - for example in this example let me just
47:45 - change it to state in this example is
47:47 - going to be our list of states here and
47:50 - also for example a label to show the
47:51 - user what is this field stand for for
47:54 - example I put the state label here like
47:56 - this but what should be put for this
47:59 - control and name here this control here
48:01 - is exactly going to be the control that
48:04 - we get from our use form hook we need to
48:07 - somehow pass this control to our rhf or
48:10 - the complete component here also we need
48:13 - to pass the name the errors the error
48:16 - message and much more related to our
48:19 - form here which is not a good practice
48:21 - to pass all of these values from our
48:24 - form to our CH component because we want
48:26 - to make this component reusable
48:28 - everywhere that we want but we cannot
48:30 - pass from our parent form to our chart
48:33 - component in here RF a the complete
48:35 - every time that we want to use for
48:37 - example in here if you want to use the
48:39 - RF a the complete in this component here
48:41 - I need to pass five or six at least
48:44 - properties from our parent to this
48:46 - component here which is not very good
48:48 - practice the react hook form provides us
48:51 - with a very powerful API called use for
48:55 - context what does it mean it means that
48:58 - I can define a form here this form then
49:01 - inside another child component of this
49:03 - parent component I can use instead of
49:06 - using use form here I can use use form
49:09 - context as you can see our nested input
49:12 - this component is wrapped around this
49:14 - form provider this is all related to
49:17 - react context and if you don't know
49:19 - about the react context you must learn
49:22 - it for this tutorial to make sense for
49:24 - you so if you don't know it I recommend
49:26 - you to just put 10 or 15 minutes of your
49:29 - time to learn it and after you have
49:31 - learned it then come back to this
49:33 - tutorial then we can do the rest of the
49:35 - tutorial if I want to recap this nested
49:37 - component here is wrapped around this
49:39 - form this form provider or form context
49:42 - here and I can simply access the
49:44 - register of this use form who here
49:47 - exactly Inside My Child component other
49:50 - than register I can access control
49:52 - errors and much more anything that we
49:55 - have in our form instead of passing all
49:57 - of our form properties this nested input
50:00 - here we can simply use use form context
50:02 - here which is going to be very helpful
50:05 - for much complex components and will be
50:07 - make it easier for us to handle these
50:10 - complex scenarios and it will solve us
50:12 - for us the problem of passing all of
50:14 - these properties into our Char Char
50:17 - component so the first thing that we
50:19 - need to do is to wrap our users's
50:22 - component inside a form provider here to
50:24 - do that I just remove this component
50:27 - here for now then inside the file
50:29 - explorer I'm going to create another
50:31 - file called for example users provider.
50:34 - TSX inside it I'm going to export
50:37 - function users provider then inside it
50:41 - I'm going to return a form provider
50:44 - which is going to be imported from the
50:45 - react form then inside it I'm going to
50:48 - put my users component exactly this
50:51 - component here for our context to be
50:53 - recognized from this users component
50:55 - here as you can see in the the react
50:57 - hook form documentation we need to also
50:59 - pass this this methods that we have got
51:01 - it from the use form for our form
51:03 - provider very simple inside it I'm going
51:05 - to initialize my form exactly the thing
51:08 - that we have here I'm going to cut all
51:10 - of it here then I'm going to head over
51:13 - to the users provider then I'm going to
51:14 - paste it here I'm going to import this
51:16 - use form here the schema of our form
51:18 - that we just defined it here also the
51:21 - skema itself and I need to import again
51:23 - the Zod resolver like this from hook
51:26 - forms resolvers and Z we do not need
51:29 - this we just need to initialize the use
51:32 - form properties like this I'm going to
51:34 - put methods here and then I'm going to
51:37 - pass the methods like this for our form
51:39 - provider here the other thing that we
51:42 - need to do is that we need to head over
51:43 - to the app. TSX file and instead of
51:46 - directly using the users component here
51:48 - which is wrong we need to use the users
51:51 - provider instead of users so I'm going
51:53 - to delete this and instead of this I'm
51:55 - going to use users provider
51:57 - here now that our provider is set up
51:59 - inside our users instead of using the
52:02 - use for we can simply use use for
52:05 - context here this use form context is
52:08 - exactly the users provider here this
52:10 - form and then we can also use this use
52:13 - form context in our for example rhf auto
52:16 - complete here which is going to be a
52:19 - child of this users component here like
52:21 - this I need to get the register from it
52:24 - exactly how we do it with use form hook
52:27 - and also the form State errors but the
52:30 - problem is that the typescript is
52:33 - throwing us this error that it cannot
52:35 - access the name or email because it
52:38 - doesn't recognize our es schema here
52:40 - because we need to pass as before our
52:43 - generic here I'm going to pass our SCH
52:45 - schema that we just defined earlier then
52:48 - the errors are gone now we need to head
52:50 - over to our rhf auto complete component
52:53 - for the control I'm going to Simply you
52:56 - get it from our use form context control
52:59 - equal to use for context here as simply
53:02 - as this but this component is not aware
53:04 - of what this name can be so I need to
53:07 - pass it from my parent component the
53:09 - users component here so if I Define my
53:12 - RF autoc complete here I the property
53:14 - for example like this that I can simply
53:16 - pass the states here so if I head over
53:19 - to the autocomplete component we need to
53:21 - use the power of generics in types
53:23 - script which if you don't know anything
53:25 - about generic in typ a script I
53:28 - recommend you to learn it then come back
53:30 - to this tutorial because it's outside
53:32 - the scope of this tutorial ball you can
53:34 - also follow along if you don't know
53:36 - anything about it but if you know it it
53:38 - would help you a lot inside my RF
53:40 - automate I need to get the props for my
53:43 - parent component I'm going to define the
53:46 - interface for type props which is going
53:49 - to be equal to name a string and I'm
53:51 - going to get this name here as you can
53:54 - see here the error is gone but it's it's
53:56 - not complete yet because if we head over
53:58 - to our users we see that if I remove
54:01 - this Estates here the intelligence of
54:03 - types script is not helping me out
54:06 - because the typ script does not know
54:08 - anything about this schema here and what
54:11 - it contains to help me out with the
54:13 - items that I can put here before we go
54:15 - any further with our other compil
54:17 - component let me just head over to our
54:20 - schema file here and create the states
54:23 - field schema here like this if you
54:25 - recall States is an auto compete here
54:28 - that it can hold multiple value or other
54:31 - words is it's an array of Str strings
54:33 - that it cannot hold more than two items
54:36 - and it's also required so what does it
54:38 - mean it means that it's an array of a
54:41 - string which is required and also it has
54:44 - a maximum capacity of two items at most
54:47 - then open your users component and by
54:50 - now we expect that type script helps us
54:53 - with estate name here but as we can see
54:56 - the type is not helping us at all so we
54:58 - need the help of typ script here if I
55:00 - head over to my custom RF automate
55:03 - component here I need to do something
55:05 - with this string here simply putting a
55:08 - string for the type of this name here is
55:10 - not correct because the type script
55:12 - won't help us with this intelligence
55:15 - here the thing that we are going to do
55:17 - is that typ script knows that we can put
55:20 - Estates here so inside our aut compilate
55:22 - component instead of a string I need to
55:24 - pass something else the thing thing that
55:26 - we need to pass here instead of this is
55:29 - path which is going to be imported from
55:30 - react form which is a type and also we
55:33 - need to provide something to it which I
55:35 - call it t we need to get this T from our
55:38 - parent how you can see generics as
55:41 - inputs of your type for example if I
55:44 - give you an example for example I have
55:46 - function function test here which is
55:49 - going to have parameters for example
55:51 - test which is of type A String here as
55:54 - you can see here we can pass Valu to our
55:57 - function like this we open and close the
56:00 - the parenthesis here and pass our values
56:03 - here but for type we can simply use the
56:05 - Syntax for example my type instead of
56:08 - round parentheses I can use this type of
56:11 - parentheses bigger than less than signs
56:13 - and we can simply pass our type here let
56:16 - me just remove it and for our props I
56:18 - need to pass the T which is going to
56:21 - extend the field values from the react
56:24 - cook for all of these are necessary for
56:26 - creating custom controllers for our
56:28 - project so bear with me now also this
56:30 - prop is throwing us this error that it
56:33 - needs a generic parameter that we need
56:35 - to pass to it I need to pass the T it
56:38 - again is throwing us this error that
56:40 - couldn't find name t so we need to also
56:43 - get it from our parents like this T also
56:45 - extends field values like this exactly
56:48 - and then we can simply pass the name
56:51 - here the thing that we just did is
56:53 - pretty amazing if I head over to my
56:54 - users component by now again the typ
56:57 - Escape doesn't know anything about the
56:59 - thing that that must be filled here but
57:02 - if you pass our form SCH schema here we
57:05 - see that the intelligence is is working
57:08 - amazingly this SCH schema that we just
57:10 - passed here is going to be this T here
57:13 - this T here and then the typescript is
57:15 - intelligent enough to know that this
57:18 - name can hold the values of our schema
57:20 - email name States so far I put States
57:23 - here for now we handled the complex
57:25 - section of the tutorial the generics
57:27 - here but we have done something amazing
57:30 - here now our custom component has
57:32 - Intelligence for the name property so
57:35 - what about our autoc complete itself the
57:37 - first thing that our autoc complete
57:40 - wants is the options property options is
57:43 - going to be the thing that we are going
57:45 - to get from our parents here because as
57:48 - I told you before our custom controller
57:51 - here doesn't know about doesn't know
57:53 - anything about our parent so we must
57:55 - pass all of these properties from our
57:57 - parent to this component So Below this
57:59 - name here I'm going to Define options
58:02 - here which is going to be of type option
58:04 - which which I didn't Define it yet so
58:07 - head over to your file explorer then
58:09 - inside our types folder create a very
58:12 - simple type called option. TS which is
58:14 - going to be export type option here it's
58:17 - equal to ID which is of type a string
58:20 - and label which is also a type of a
58:22 - string then close this component here
58:24 - close this then import it here again my
58:27 - intelligence is not working import
58:29 - option from types here and option then I
58:33 - need to get it from my props interface
58:35 - type sorry options here then the error
58:38 - Here Is Gone also we need to handle
58:40 - value unchange render input and so much
58:44 - more one by one for the value and
58:46 - unchange as we talked as we talked
58:48 - before we need to let the react hook
58:50 - form to take care of it this prams here
58:53 - inside the render property of our
58:55 - controller we can destruct it here like
58:57 - this from it I can get the field here
59:00 - and inside the field I can get value
59:03 - unchange and the ri here for now inside
59:06 - it for the value I'm going to pass the
59:08 - value which is here which is going to
59:11 - hold the selected options in this value
59:14 - what do I mean is that if I for example
59:16 - s California here this value by now is
59:19 - an array of options which the option is
59:22 - ID of one and the label of California if
59:24 - I select Texas for example the ID is
59:27 - going to be let me just show you like
59:29 - this the value is going to be for
59:30 - example by now is of is ID one and the
59:34 - label is California for this one and for
59:37 - the second one is going to be ID for
59:39 - example two and the label is going to be
59:42 - Texas here so I need to create a
59:44 - connection between this value that book
59:46 - for provides us with this autocomplete
59:48 - property value here and then I'm going
59:51 - to need to map over them let me just
59:53 - remove it and for each iteration um this
59:56 - value is going to return ID here if you
59:59 - recall the SCH schema of our states here
60:01 - we see that it's an area of strings in
60:04 - here the value I want it to be also an
60:07 - arraya of IDs an area of strings so in
60:10 - each iteration over value here I will
60:12 - get ID here which is of type A String
60:14 - then then I need to make a comparison
60:17 - between this ID and my options here how
60:20 - to it's pretty simple me just remove
60:23 - this parenthesis here over the options
60:25 - I'm going to find find which item. ID is
60:28 - equal to this ID what does this do is
60:31 - that it converts this value here which
60:33 - is going to be this for example one and
60:36 - two these are the IDS of selected items
60:39 - and we'll convert them to for example ID
60:42 - of one label California fornia and the
60:46 - ID of two with the label of for example
60:49 - Texas Texas so by now we mapped the
60:53 - value here to the aut complete data here
60:55 - which is exact that we want for the
60:57 - unchange method of this auto complete
60:59 - here unchange the mui unchange property
61:02 - auto complete provides us with two
61:04 - parameters here the first one that we
61:06 - don't that we don't want it and the
61:08 - second value is the new value of our
61:10 - changing item if I open the call back
61:13 - here inside it I'm going to put I'm
61:15 - going to pass this unchange here that we
61:17 - have that we get it from our controller
61:19 - here so I'm going to pass unchange here
61:21 - the new value that the mure provides us
61:24 - I can pass it here new new value then
61:27 - I'm going to map over these values if I
61:29 - show you what this new value holds it's
61:32 - something like this ID one with the
61:35 - label of California and much more then
61:39 - we need to convert it to this data here
61:42 - one two we need to somehow convert this
61:46 - to this exactly the opposite the thing
61:48 - that we just do we just did for the
61:51 - value here so inside this I'm going to
61:53 - map over each new value then for each of
61:56 - them I'm going to return item. ID for
61:59 - now the intelligence is not smart enough
62:01 - to know what the type of this item is
62:03 - but in a few moments later we're going
62:05 - to solve this issue also the problem is
62:07 - that our auto complete is single select
62:10 - but we need to somehow tell the
62:12 - typoscript tell the mui that I want a
62:15 - multiple select or a complate like this
62:17 - one here I can select multiple items
62:19 - here but by default the auto complate of
62:22 - mui is single select and it's because of
62:24 - that that we cannot map over the new
62:26 - value because it's a single item not an
62:28 - array to overcome this we simply put the
62:30 - multiple Boolean here and by now our
62:33 - error is gone and now our new value is
62:35 - an array that we can map over them and
62:37 - get the IDS of them this get option
62:40 - label here that I just put it a little
62:42 - bit sooner let me just create it for you
62:44 - get option label is used for to get the
62:48 - label of each ID with our options here
62:51 - so if I recall it by now our aut
62:55 - compilate hold holds the value like this
62:57 - this is the value that our aut complete
62:59 - provides Us by now so by this here I
63:02 - need to get the label of these
63:04 - corresponding labels for example if we
63:06 - recall one is California and two is
63:08 - Texas and to get the label for each of
63:11 - these IDs I need to Simply pass another
63:13 - callback function like this for example
63:15 - I call it option here then I'm going to
63:17 - map over the options here the options
63:20 - that we pass from our parent to our
63:21 - child then I'm going to find then for
63:24 - each item I'm going to I'm going to
63:26 - check if it is if the item. ID is equal
63:29 - to option. ID here and if you found
63:33 - anything I'm going to put do Lael here
63:36 - otherwise if it didn't find anything I'm
63:38 - going to Simply pass an empty a string
63:41 - here so this line exactly is going to
63:44 - convert this to this for example
63:47 - California and Texas if you don't do it
63:50 - it will throw us an error and it won't
63:53 - show the corresponding labels of the IDS
63:55 - correctly so it's also required the
63:58 - other thing that we need to add is that
64:00 - we need to tell our aut comple component
64:04 - that which option is equal to which
64:06 - value like this if I select this it
64:08 - knows that this option is selected and
64:11 - it must highlight it and check the
64:13 - checkbox here to implement this I can
64:15 - simply use another property of the mui
64:18 - Library here I don't know why I pasted
64:20 - them earlier but as you know the is
64:23 - option equal to value is responsible to
64:25 - to map between our options and the
64:28 - values of our auto complete we can do
64:31 - other miscellaneous things for the auto
64:34 - complete for example I don't want my
64:36 - auto complete to be closed when when the
64:38 - new item is Select so I'm going to
64:40 - disable close on select by now we have
64:43 - passed the most things that we want but
64:45 - we forgot to put the render input here
64:48 - which is required by the aut complete
64:50 - mui component this render input provides
64:53 - us with that with the params then inside
64:56 - it I'm going to return a very simple
64:58 - text field and this text field first we
65:01 - need to destruct this params here then
65:04 - I'm going to make it full wids I need to
65:06 - pass a simple input rev so the mui will
65:09 - connect this text field here to the auto
65:12 - compilate here by passing this ref that
65:14 - we get it from the react Hook from
65:16 - controller so I'm need to pass the ref
65:18 - here for the error I simply need to get
65:22 - the error from the controller here so
65:25 - after this object the field object I can
65:28 - get the form State sorry instead of form
65:31 - State I need to get the field estate I
65:33 - need a single error only error here and
65:36 - then I'm going to pass it here like this
65:38 - as before for the error message for my
65:40 - auto complete I simply put error.
65:43 - message here and for the label of an
65:46 - autocomplete I'm going to get it from
65:48 - the parent which is a simple string here
65:50 - label string I'm going to get it and
65:53 - then pass it here the last thing to to
65:55 - do I need to make these checkboxes here
65:59 - to make it more beautiful and user
66:01 - friendly it's just it's not something
66:03 - very special but it can helps the user
66:05 - or maybe it's the something that most of
66:07 - you want exactly below the render input
66:10 - here I'm going to render option here
66:13 - this option provides us with props
66:15 - option and the selected item here then I
66:19 - use the arrow function here and I'm
66:21 - going to return a simple gxs here box
66:24 - which is of type list item you can
66:27 - simply not pass it here it's not it's
66:29 - recommended but don't do it for this
66:30 - tutorial then I'm going to distract the
66:33 - props here then inside this box I'm
66:35 - going to render a simple check box from
66:37 - Material UI for the icon of it I'm going
66:40 - to pass this icon here this icon here
66:44 - and I simply pass it here and for the
66:47 - checked icon I'm going to pass this icon
66:51 - here this icon I'm going to copy it then
66:53 - paste it in here and to tell the mui
66:56 - checkbox here that whether this checkbox
66:59 - is checked or not to switch between
67:01 - these two icons I can simply put checked
67:04 - property here and give the selected
67:06 - value this value to it inside this box
67:09 - I'm going to render the option. label
67:13 - here the typ script is throwing us this
67:15 - error we can simply I did a mistake I
67:17 - remove the component Li here and now the
67:20 - typ es eror is gone that's it that's for
67:22 - our the most complex controller that we
67:25 - we going to create in this tutorial it
67:27 - Wass so much into it but I promise you
67:30 - it's the most intelligent way to handle
67:33 - this custom controller for auto complete
67:35 - here so it was pretty complex we use
67:38 - generics here we did something with mui
67:41 - we got value options unchange we did
67:44 - something with the auto compete itself
67:46 - we rendered custom input here and also
67:49 - we added checkboxes to each list item of
67:52 - our aut complete now close this
67:54 - component the rhf or the complete then
67:57 - inside our users we have passed the
68:00 - States before we need to pass the label
68:02 - I'm going to call it states or whatever
68:04 - and for the options for now I simply
68:07 - hard cot the values the ID is going to
68:09 - be one and the label is going to be for
68:12 - example California and another option
68:15 - for example two the label is going to be
68:17 - off Top Texas for now it's enough now if
68:21 - you head over to our application here we
68:23 - see that we have so many errors the most
68:25 - of one is can't access property map
68:28 - value is undefined if you head over to
68:30 - our aut compete component it's it's
68:32 - exactly this part value. map when we
68:35 - start at first render we don't have any
68:39 - value here this value is going to be
68:41 - undefined but instead we expect that it
68:44 - holds an empty array instead of
68:47 - undefined so this error will be gone but
68:50 - I do not recommend using the optional
68:53 - operator here sorry the undefined
68:55 - operator here so what we can do is that
68:58 - if we head over to our schema here below
69:01 - it I always recommend create a constant
69:05 - called default values and you're going
69:07 - to know what is it in a second this
69:09 - default values is going to be of type
69:12 - the schema here schema is going to be
69:15 - equal to email what is the most basic
69:17 - email that user can provide is an empty
69:20 - string also for name we have empty
69:22 - string and estate which is going to be
69:25 - an empty array because we have defined
69:27 - it in the es schema that it's going to
69:28 - be an array of strings and the most
69:31 - basic variation of it is empty array for
69:34 - name we have empty string and for email
69:36 - we have also empty string now if you
69:39 - head over to our users provider here
69:41 - which we defined our form here below the
69:43 - resolver we can pass the default values
69:46 - to the default values that we just
69:48 - defined in our schema here but for
69:50 - Simplicity I remove this here and now
69:53 - it's the same it's always recommend it
69:55 - to always pass the default values to
69:57 - your form initialization because the
70:00 - errors will be handled perfectly it's
70:02 - better for performance and now the use
70:05 - form can distinguish between the empty
70:08 - form which we defined it in our default
70:10 - values and the current form value so
70:13 - it's always recommended to pass default
70:15 - values to your form initialization and
70:18 - now you see that errors are gone our the
70:20 - complete is working perfectly here and
70:23 - everything is correct and sync with the
70:25 - react hook form if I refresh the page
70:27 - you see that we do not have any errors
70:29 - in the console here which is perfect and
70:32 - that's it for our or the complete here
70:34 - but how to know that what values does
70:37 - our form house by now there's a simple
70:40 - tool called def tools for react hook 4
70:43 - we install it earlier and I can import
70:46 - it like this import def tool from hook
70:49 - for def tools and we need to pass a
70:52 - simple prop to control which we're going
70:54 - to get from this and pass it to the dev
70:57 - tools methods. control here as you can
70:59 - see here on the top right corner of our
71:02 - project we see that this icon is added
71:05 - here if I now click on it let me just
71:06 - make it a little bit bigger if I click
71:08 - on it and if I type something on name
71:10 - and if I open it we see that this value
71:13 - is exactly the same like this if I for
71:15 - example enter something for my email we
71:17 - see that the value is exactly here we
71:20 - see the validation here exactly in here
71:23 - and also we now see that our EST of the
71:26 - complate is empty by now and if I select
71:28 - something here and open it again you see
71:30 - that it holds the ID of one which is
71:32 - California and if I also select Texas
71:35 - here you see that the two is added here
71:37 - it's not pretty powerful tool but it can
71:41 - help you in some situations another way
71:43 - to see and look the current estate and
71:45 - values of your form is a simple trick
71:48 - you just need to Simply go ahead to your
71:50 - user component here then after we
71:52 - initialize our form context here you
71:54 - need to to use this simple code snippet
71:57 - here I'm going to use the use effect by
71:59 - react then put the mt4 dependency array
72:02 - for now and as a call back I'm going to
72:05 - create a simple subscription here is
72:07 - equal to watch but what is this watch
72:09 - here we simply get this watch from our
72:12 - use form context or use form it doesn't
72:14 - matter the react hook form provides us
72:16 - with this really powerful hook here
72:18 - called watch what does this do is that
72:21 - it Returns the current estate of my form
72:24 - like this and if I like this value here
72:26 - or use it anywhere I can see the current
72:29 - estate of my form as an object but
72:31 - another P powerful thing to see here is
72:34 - that we can specify what field do we
72:36 - need to see for example if I put name
72:40 - here always I see the current estate of
72:43 - name field here or I can use the states
72:46 - here or I can use another watch here for
72:48 - example imagine that you have a
72:50 - component and you need to show the email
72:52 - that user has entered another place like
72:55 - this if I copy this line here then I
72:58 - head over here I can simply use this
73:00 - value like this here and whenever the
73:03 - user changes the email field here this
73:06 - value will be updated and user can see
73:08 - the current state of email field but as
73:11 - a developers of react hook for they
73:13 - don't recommend us to always use watch
73:17 - here because we have another
73:18 - Alternatives that we are going to learn
73:20 - them um it's a b l for performance and
73:24 - in some situations it can cause extra
73:26 - renders but you need to use it carefully
73:29 - and this usage here is completely safe
73:31 - for the call back of watch H I can pass
73:35 - the value here then as a function I'm
73:38 - going to lck the console.log the value
73:41 - that this hook returns us then after the
73:44 - user effect is done I'm going to return
73:46 - the sub. unsubscribe here for memory
73:49 - management and performance best
73:51 - practices and as dependency array I'm
73:53 - going to use I'm going to put all so
73:55 - watch here and now if I open the console
73:58 - of my browser here and type something in
74:00 - any field you can see on each key stroke
74:04 - or each estate changes the whole estate
74:06 - of my form is locked here for example if
74:08 - I type something in the email field you
74:10 - see that email f is something and this
74:12 - can be very helpful in some situations
74:15 - this way of loging the current estate of
74:17 - your form by now we have learned so many
74:19 - new things about react hook forms out
74:22 - and implementing them with material UI
74:25 - but if I again open the users component
74:27 - here and head over the auto complete
74:29 - here that we just created we see that
74:31 - this scenario that we pass the current
74:34 - value or current options of these aut
74:37 - compy is not applicable in real vce
74:40 - scenarios and 99% of scenarios these
74:44 - values are going to be fetched from the
74:46 - server and for the sake of this tutorial
74:49 - to be uh complete we need to also get
74:52 - these values from this server here but
74:55 - we need to create a very simple server
74:57 - on another Port of our system to
74:59 - simulate a marck backend for our project
75:02 - if you check the description below you
75:04 - see that there's also another repo
75:06 - called backend react hook form MBI zot
75:08 - that you can simply clone it on your
75:11 - system this is nothing very special it
75:14 - just it has only two simple dependency
75:16 - Json server and cross origin here we
75:18 - have an index.js file here that is going
75:21 - to provide us with this dp. Json file
75:24 - here let me just make it a little bit
75:26 - smaller here as you can see here this
75:29 - Json file contains the states the
75:32 - languages the genders skills users and
75:35 - so much more this is kind of a backend
75:38 - server that provides us with the simple
75:41 - crow operations in our project and if
75:44 - you take a look at the outcome of this
75:47 - tutorial you see that all of these
75:49 - values are going to be pitched from the
75:51 - server the skills here are exactly the
75:55 - skills here that you see in the dp. Json
75:58 - file of our MK backend here and many
76:00 - other fields for example if I click on
76:02 - Robert here we see that the user with
76:06 - the name of Robert is going to be
76:08 - fetched from the server and we are going
76:10 - to implement them in our project to run
76:12 - the server we simply let me justop the
76:15 - server clear the terminal here to just
76:18 - use this server you need to clone it
76:20 - from the description below and type npm
76:23 - npm Run start here as you can see the
76:26 - port is going to be exposed on the port
76:28 - of ADA you can access this backend API
76:31 - end points on your local house point
76:34 - ad80 if now we head over to our project
76:37 - I need to Simply use those API endpoints
76:40 - that we just saw earlier and use that in
76:43 - our application for that I need to go to
76:46 - the services folder and queries script
76:49 - here that we just defined it earlier and
76:51 - by now it's completely empty the goal
76:54 - here here is to load these options here
76:58 - from the server it's pretty simple you
77:00 - just need to open the queries file here
77:02 - then inside it I'm going to export
77:06 - export a simple H called for example use
77:08 - States here which is going to return a
77:11 - use Query hook as a result I simply
77:14 - going to use tack query here for the
77:17 - sake of this tutorial if you haven't
77:19 - learned it yet please check my other
77:21 - video that I thoroughly explain this
77:24 - amazing Library and in modern react
77:26 - development it's a must to put this
77:29 - library in use if you want to develop
77:32 - Enterprise level applications and it's
77:35 - pretty simple to use but if you don't
77:37 - want to know this library and if you
77:40 - haven't already Lear it yet it's not a
77:42 - big deal and you can simply follow along
77:44 - the tutorial just imagine that this US
77:47 - states is going to return the Estates
77:49 - from the server and you can get the
77:53 - Estates from our backend server with any
77:55 - way that you want simply here I'm going
77:58 - to use the react query here for the
78:00 - query key I'm going to pass the states
78:02 - here then for the query function I'm
78:04 - going to pass a very simple function
78:08 - that will resolve to the states of my
78:11 - backend server how to get them is pretty
78:13 - simple by using the axus library let me
78:16 - just import it my intelligence doesn't
78:18 - work import axus from axus here then I'm
78:22 - going to dot get it something from this
78:26 - address HTTP Local Host ad ad s/ which
78:31 - is going to return the states on the
78:35 - back end and because we are using typc
78:37 - I'm going to specify the return of this
78:39 - query here which is going to be option
78:43 - an array of option that we defined
78:45 - earlier in the types folder here you see
78:48 - that we defined option as an object of
78:50 - ID and label and if you head over to our
78:53 - dp. Json file here on back end we see
78:56 - that our estate is an areay of Aid and
78:58 - label and we know that our back end is
79:00 - going to return this area of objects
79:03 - here but I need to import it manually
79:05 - like this import option from from types.
79:10 - option here as you can see I forgot to
79:13 - put WR I use the con here wrong I need
79:15 - to put the function here and you see the
79:18 - errors are gone by now now if I head
79:20 - over to the users
79:23 - component see simply I can use the hook
79:26 - that I just created here for example at
79:28 - the top of my component here as simply
79:31 - as this cons States query is equal to
79:34 - use States hook that we just created use
79:37 - states to use this here I'm going to
79:39 - head over down and as the options array
79:42 - I'm going to Simply pass the states
79:45 - query. data as you can see here the type
79:48 - script is throwing us this error that
79:50 - this s query. data might be undefined
79:52 - which is correct and we need to handle
79:55 - this situation also so I head over to
79:57 - the controller for aut compy that we
79:59 - just created before and put this
80:02 - optional operator here and we need to
80:04 - also resolve these problems that just
80:06 - occurred here the options cannot be null
80:08 - on the autoc complete component of
80:10 - material y so I need to put the empty
80:12 - array if options is undefined also I
80:15 - need to put the optional operator here
80:18 - and also here for erors to be gone then
80:21 - but I forgot to put something else in my
80:23 - query function let me just head over to
80:26 - the queries component after that the
80:28 - quer is resolved I need to then as my
80:31 - response here I need to get the res.
80:34 - data here and now you see that errors
80:36 - are gone and now you see that the new
80:38 - Estates are going to be fetched from the
80:40 - server the validations are working
80:43 - correctly and that's it for now also I
80:45 - just implement the other queries that we
80:48 - need in our application here they're
80:50 - pretty simple I copy all the user States
80:53 - hook here then paste it here for other
80:55 - query I'm going to put the use languages
80:58 - here for the query function I'm going to
81:00 - pass languages and for the endp point
81:02 - I'm going to put languages here another
81:06 - hook we need the genders that we need to
81:08 - get them from the server genders here
81:11 - put the genders for the query key and
81:13 - also get them by the gender Endo the
81:16 - last one is skills query here use
81:19 - escales here put escales here and also
81:23 - get them from the skills endpoint for
81:26 - now and I can use all of these four
81:28 - hooks in my application like this the
81:31 - next controller that we are going to
81:33 - create is a simple toggle button group
81:36 - that is much much simpler than this
81:39 - other compy that we just Implement
81:40 - implemented earlier so we need to create
81:43 - something like this the values are going
81:44 - to be fetched from the server and the
81:47 - current estate of this field is always
81:49 - going to be present on the form state so
81:52 - let's create our new controller in our
81:55 - application in your SRC components
81:57 - folder create another file called rhaf
82:01 - hugel button group. TSX here then export
82:06 - a simple function let me just close the
82:08 - file explorer export function RF TL
82:11 - button group here and simply return
82:15 - something for now as a return of this
82:17 - function like our other complete that we
82:20 - just created earlier let me just put
82:21 - them side by side I simply need to copy
82:24 - all of these props from the auto
82:26 - complete then paste it here because from
82:29 - this point of tutorial to the end most
82:31 - of the concepts are the same with a
82:33 - little bit of TW in some places let me
82:36 - just close this here we here only need
82:39 - the options and name do not need the
82:41 - label because our Target button group
82:43 - doesn't contain any label at any point
82:45 - then import the missing dependencies
82:48 - here I'm going to import this from react
82:50 - hook form also this and import it up
82:53 - manually from types SL option then I'm
82:57 - going to use the props type here props
83:00 - and get the values from the props but I
83:03 - need to pass the generic here as before
83:06 - the T extends field values then I can
83:09 - use the name and options value inside my
83:12 - component this is very similar to the RF
83:15 - or the compete component I'm going to
83:17 - Simply get the control Hook from my use
83:21 - form context then pass the T here for
83:24 - type safety for now then I'm going to
83:27 - use the controller from react H form
83:30 - pass the sorry pass the control here
83:33 - control control as before also pass the
83:37 - name and return this render function
83:40 - here return something which is going to
83:44 - be the Tuggle button group that we are
83:46 - going to import it from Material UI for
83:50 - now and from the call back pass
83:52 - parameters I'm going to get the field
83:54 - from Fields I'm going to get the
83:56 - unchange method the value and also the
83:59 - rest of the fields rest field inside the
84:02 - props of the toggle button group here
84:05 - I'm going to use the unchange method on
84:08 - this material UI component here then
84:10 - connected it with the react hook Form
84:13 - controller and my form context here the
84:15 - first argument we don't need it here I'm
84:17 - going to get the second argument and
84:19 - call it as new value then I'm going to
84:21 - do something here for example if the new
84:24 - value do length is bigger than zero I'm
84:27 - going to pass the unchange this unchange
84:31 - with the new value because this
84:33 - component is going to always return us
84:35 - with an area of strings so we know that
84:38 - our new value is always going to be an
84:40 - array which if it has any length or any
84:44 - item in it I'm going to call this
84:46 - unchange method on the react hook form
84:48 - for the value I pass if value. length
84:52 - was bigger than zero I'm going to return
84:54 - the value itself otherwise I'm going to
84:57 - return the options if it present then
85:00 - the first element of it because the
85:02 - button group that we are going to create
85:04 - is exclusive and always one element is
85:08 - selected if you don't want this if you
85:09 - don't want this behavior and you want
85:11 - your Tuggle button group at some point
85:13 - be completely empty and user can
85:15 - unselect all of them you can modify this
85:17 - section for the render for the children
85:20 - of this Tuggle button group I'm going to
85:22 - map over the options let me just Factor
85:24 - code do map over the options we get the
85:28 - option on each iteration then for each
85:31 - iteration I'm going to Simply render a
85:33 - toggle button instead of toggle button
85:35 - group and inside the toggle button for
85:38 - the text of it I'm going to render the
85:40 - option. label here for the value of the
85:43 - cycle button I'm going to return option.
85:46 - ID and for the key also I'm going to
85:48 - return option. ID here we forgot to use
85:51 - this rest field here so simply pass them
85:54 - here to use this custom controller in
85:56 - our project simply head over to the
85:58 - users component like this below the a
86:01 - complete just put the arch toggle button
86:04 - group and pass the es schema as a
86:07 - generic here and pass the field that we
86:11 - want that we just need to Define it in
86:13 - our es schema just head over to the
86:15 - types and schema here and below the
86:17 - Estates just put the languages spoken
86:22 - which is going to be an array of strings
86:25 - also put the languages spoken default
86:28 - array here for initial value and in our
86:31 - users component just pass the language
86:33 - spoken as the name of it and for the
86:35 - options simply put empty array here then
86:39 - go to the top of your file initializing
86:41 - initialize the languages cons languages
86:44 - query is equal to use languages this is
86:47 - the hook that we just created earlier
86:49 - and I simply need to use this for the
86:52 - options of my toggle button group here
86:54 - so languages query. data here perfect if
86:58 - you now head over to your application
87:00 - here if I for example click on Germany
87:03 - you see that the ID one and two are
87:05 - selected if I click on Spanish and check
87:08 - the console you see that the current
87:10 - sayate the languag is spoken of one two
87:12 - and three and in real world application
87:14 - you can send these IDs to your backend
87:17 - server which is per to Common after this
87:20 - we are going to create this radio group
87:22 - here which is pretty simple and forward
87:24 - just head over to your SRC components
87:27 - folder and create a new component called
87:30 - rhf radio group here. TSX and just head
87:34 - over to your rhf tole button group here
87:37 - and copy all of this file here then past
87:40 - it in your RF radio group component here
87:43 - because a part of all of these
87:45 - controllers are the same for example the
87:47 - prop sections for example a radio group
87:50 - you're going to have a title so we are
87:52 - going to have a label field as an string
87:54 - we need to change this name to RF radio
87:58 - group here the generics are the same
88:01 - also we need to get this label from the
88:03 - props here label the control is the same
88:06 - the controllers are the same we just
88:08 - need to remove all of these because we
88:10 - only need all of the fields the same
88:13 - that they are also I need to get the
88:15 - field State the error from the field
88:18 - estate and you're going to see what
88:20 - remove all the things inside the render
88:22 - function here one way to hand
88:24 - this radio group controller in our
88:26 - application is to use the radio group
88:30 - itself from the material UI and passy
88:33 - props to it but this way of using it is
88:36 - not in my opinion very recommended
88:39 - because uh you don't have control over
88:42 - the error state of your material UI
88:45 - component your form doesn't have any
88:47 - label by now and it's not very
88:50 - accessible for the users to do that to
88:52 - overcome that I just need to Simply
88:54 - first put the form control from Material
88:58 - UI here inside it I'm going to put form
89:00 - label here and inside it I'm going to
89:02 - pass the label here and below this label
89:05 - and inside this form control I simply
89:07 - pass the radio group here like this this
89:11 - way of creating these types of custom
89:13 - components is pretty common in material
89:15 - UI world because uh we know because we
89:18 - have wrapped our radio button group
89:20 - inside a form control it has a form form
89:23 - control label it automatically does so
89:26 - many things for us for example if there
89:28 - is an error as a par up for this form
89:31 - control here for example the form label
89:33 - will become red and so much more and
89:35 - it's pretty readable for other
89:37 - developers too inside your radio group
89:40 - here just map over the options do map
89:43 - and in each iteration we also going to
89:45 - get the option itself and inside the
89:47 - render of each iteration I'm going to
89:49 - pass the form control label here like
89:53 - this that's it for the key I'm going to
89:55 - pass the option. ID for the value I'm
89:59 - going to pass the option. ID for the
90:02 - control itself I'm going to pass the a
90:05 - radio a simple radio from the material
90:08 - UI for the checked state I'm going to
90:11 - pass the if field. value is equal to
90:14 - option. ID I'm going to explain it in a
90:17 - second and also for the label of each
90:20 - radio buttons I'm going to pass the
90:22 - option. label here so this value is the
90:25 - current estate of each radio buttons
90:29 - this control is the thing that this form
90:31 - control label is going to render for us
90:33 - as you can see it's pretty read readable
90:36 - and accessible for the users this way of
90:38 - handling these types of custom
90:40 - components for the control of this form
90:42 - control label I'm going to pass a simple
90:44 - radio I'm going to pass the check
90:46 - property as if the field value here the
90:49 - field that we are going to get from our
90:51 - controller value is equal to option ID
90:54 - and if this statement is true then our
90:57 - radio button is going to be checked also
91:00 - I need to pass the field like this here
91:03 - and also there is another error property
91:06 - on the form control here that I can pass
91:08 - if there is an error in my form state
91:11 - I'm going to put all of these in error
91:14 - State now if I head over to my users
91:17 - component here below the rhf target
91:20 - button group I'm going to pass the rhf
91:22 - radio group as before we pass the SCH
91:25 - schema generic here we pass the name as
91:27 - a gender but we don't have the gender on
91:30 - our SCH schema here so I'm going to head
91:32 - over to our types schema here and for
91:35 - the gender I'm simply going to pass the
91:37 - gender zit. s string which is a simple a
91:41 - string but it's required so the value
91:45 - that this gender field will be will be
91:46 - holding is for example something like
91:48 - this the ID of the gender that we're
91:50 - going to get from server or two or three
91:53 - uh if there's no value there result we
91:55 - throw us an error that this field is
91:58 - required let me just remove these
91:59 - redundant comments here and for the
92:01 - default values I simply pass the empty
92:04 - array here empty a string here and also
92:06 - we need to pass the options here and
92:09 - also the label which I'm going to call
92:11 - it the gender here and for this options
92:14 - property here I simply go the top of my
92:17 - component and get the const gender
92:21 - gender query is go call to use genders
92:25 - like this and if I put over down here
92:28 - instead of this empty areay I simply
92:29 - pass gender sarey do data as you can see
92:33 - here we have this beautiful radio group
92:36 - here if I open my console here and if I
92:39 - select the mail here you see that our
92:40 - gender is one and if I again hit on the
92:43 - female button you see that the state of
92:46 - gender becomes two but where does this
92:49 - two come from if we head over to our
92:51 - back end here we see that in our G
92:53 - genders array the male is one and the
92:56 - female is two and if I change it for
92:58 - example to male again we see that the
92:59 - gender is one so that's it for our radio
93:02 - group the next component that we are
93:03 - going to implement is this checkbox
93:05 - group here after that we also will
93:07 - create controllers for date and time
93:10 - pees date range pees range pees also the
93:14 - complex field array scenarios here that
93:16 - you can add a new custom fields to your
93:20 - Dynamic field and each of these fields
93:22 - are going to have their unique
93:24 - validation so let's implement this again
93:27 - head over to your components folder here
93:29 - create a new file called RF no don't do
93:32 - it just copy for example your radio
93:34 - group again here change your name to rhf
93:37 - check box check box like this the
93:39 - generics are the props and generics are
93:41 - the same just change name to rhf
93:44 - checkbox here this line is the same the
93:47 - control the name are the same just I
93:49 - need to change this object instruction
93:51 - here I'm going to get the value and
93:55 - unchange Method from the field itself
93:57 - and nothing else and also I'm going to
93:59 - get the error from the field State
94:01 - object here we do not need to pass the
94:03 - field here just the error itself the
94:06 - label is as before and instead of this
94:09 - radio group I'm going to remove it and
94:11 - passive form group from the material UI
94:15 - open it and inside it map over the
94:17 - options. map for each option I'm going
94:20 - to render a simple checkbox form control
94:23 - label here close it as solo tag here for
94:26 - the control of this material UI
94:28 - component just pass the control like
94:31 - this the control is also the same as our
94:34 - radio group it's going to render it is
94:36 - going to be what will it be rendered for
94:39 - each iteration of our options for each
94:41 - for each iteration I'm going to render a
94:43 - simple check box here like this for the
94:46 - key I'm going to pass the option. ID
94:49 - here for the label no and for the
94:51 - checked property check I just realized
94:54 - that I did a mistake I accidentally
94:56 - imported the checkbox icon from Material
94:59 - material UI not the checkbox itself so
95:02 - let me import it like this checkbox from
95:04 - the mui material like this and change
95:07 - this B into the lowercase b here for the
95:10 - checked property here I want to specify
95:13 - it when value do includes includes
95:17 - option do ID here for the unchange here
95:21 - I simply pass this function here to
95:23 - handle the unchange of my checkbox group
95:26 - if value do includes the option. ID then
95:31 - I'm going to call this unchange here
95:34 - inside this if statement unchange value.
95:38 - filter and in each iteration I'm going
95:40 - to Simply get the item itself which is
95:43 - going to be the ID of the checkbox that
95:46 - is selected for example if I select this
95:48 - this item is going to be this if I
95:50 - select this it's also the same so I'm
95:52 - going to get the item in iteration then
95:55 - check this statement here like this
95:57 - option. ID simply I'm telling the react
96:00 - Qui form that only return the values
96:03 - that are not equal to the item which is
96:06 - going to be the selected IDs by the user
96:09 - but the type of script is throwing us
96:11 - this error that you cannot guess the
96:13 - type of this item here so I simply do
96:16 - this trick here I'm going to cast the
96:19 - value as an array of strings here and as
96:21 - you can see the error is gone now and
96:23 - for the else Clause of this is of this
96:26 - if statement I simply pass the unchange
96:29 - to distruct the values thems and also
96:33 - the current option. ID here also for the
96:36 - label also for the label of my form
96:39 - group I simply pass the option. label
96:43 - here let me just zoom out a little bit
96:45 - that's our simple controller here for
96:47 - our checkbox group then we need to use
96:50 - this checkbox controller in our
96:52 - application so I had over to the users
96:54 - component here just head over to the top
96:57 - of your file here and get the skilles
97:00 - query like this scales skilles query is
97:03 - equal to use skilles here then below
97:06 - here just put rhf rhf checkbox pass the
97:11 - SCH schema here as before pass the name
97:13 - as scales just head over to your schema
97:16 - here as before Define the scales field
97:19 - like this z. array each array item is
97:22 - going to be a string and and for the
97:24 - maximum selected skills for example I
97:26 - want the user to only select not more
97:29 - than two items for the scills default
97:31 - value pass the Mt array also pass the
97:34 - options from the query itself skills.
97:37 - data here and for the label simply pass
97:40 - the scales name and as you can see here
97:43 - but I realized that I forgot to put the
97:46 - key for each form control label simply
97:49 - pass the option. ID and now if I head
97:51 - over to my application here we see if I
97:53 - select each of these skills the
97:55 - corresponding fields in my form state
97:58 - will be selected and if I Des select any
98:00 - of them you see that the skilles array
98:02 - is empty but as you can see here if I
98:04 - select more than two items for the
98:06 - skilles field like this we see that the
98:09 - user has selected more than two items
98:12 - and as we defined it in our schema here
98:14 - we want to raise an error but we also
98:17 - need to show the user the eror itself so
98:19 - I will head over to the checkbox
98:21 - component here and below this form group
98:25 - here I simply pass the form help eror
98:27 - text here and inside it I simply pass
98:29 - the error. message here and as you can
98:32 - see here if I select more than two items
98:34 - it says that array must contain at most
98:36 - two elements but as you told before you
98:38 - can also simply change the message for
98:41 - example to test here I refresh it and
98:44 - select more than two items instead of
98:46 - that default error message this error
98:48 - will be going to sh but for the sake of
98:49 - this tutorial I'm going to return it
98:51 - that keep everything much simpler and
98:53 - that's it for our checkbox component the
98:56 - beautiful thing about this current stack
98:59 - the mui Zod and react hook for is that
99:02 - it's very much simple to handle date
99:04 - pies time pies date time pies and also
99:07 - date range pies with a few lines of code
99:10 - we can achieve a pretty powerful custom
99:13 - controller for each of these elements
99:15 - here so let's get started now head over
99:18 - to your users types schema here and for
99:22 - example create a new field called
99:25 - registration date and time for the name
99:28 - of my field which is going to be a
99:30 - simple date here and also for the
99:32 - default value registration registration
99:36 - I'm going to Simply return the current
99:38 - state of the user system now just simply
99:41 - again head over to your components and
99:43 - create a new file called rhf date and
99:46 - time perer but remove this ant here for
99:49 - shorter name and I move to put the TSX
99:53 - file here and just head over to your
99:55 - puggle button here and select all of
99:58 - this and paste it in your data Pier here
100:02 - because most of them are the same these
100:04 - properties are the same and I just need
100:06 - to change the name to rhf date time peer
100:10 - controller is the same remove all of
100:12 - these redundant custom Imports here
100:15 - remove anything inside this render
100:17 - function here and for the material UI
100:20 - component dat Pier component and
100:22 - anything else else related to date Piers
100:25 - we need to Simply pass our localization
100:27 - provider
100:29 - localization provider which are going to
100:32 - import it manually remove this redundant
100:34 - Imports here import localization
100:39 - localization Provider from mui ex dat
100:42 - pies that's it like this but the best
100:45 - practice is to wrap all of your projects
100:48 - inside this local localization provider
100:50 - in your for example main. TSX file here
100:53 - at this level I can pass the
100:54 - localization provider here but for the
100:56 - sake of this tutorial I'm not going to
100:58 - do that inside the localization provider
101:01 - I simply import the datetime Peak eror
101:04 - from the xate PE eror from Material UI
101:06 - Library like this and for the label I
101:09 - simply pass the label here but I realize
101:12 - that this options is IR redundant here
101:15 - and instead of option I need simply pass
101:17 - the label as a string also change it to
101:20 - string no not a string the label and and
101:23 - just destruct the field here and this
101:27 - pretty much it this is all the things
101:29 - that we need to handle for our custom
101:31 - dayon Pier components which you can do
101:34 - other things other custom things this
101:36 - controller and you have all the power
101:39 - here but the thing that is bothering me
101:41 - here is that I need to use this self
101:42 - closing tag here for my controller not
101:46 - like this and this is much better and
101:48 - now if I head over to my users component
101:50 - here and below the check box I simply
101:53 - pass the rhf date time Pier custom
101:56 - component again pass the schema here for
102:00 - the name I simply pass the registration
102:01 - date and time and for the label anything
102:04 - you want for example
102:07 - registration date and time but now if
102:09 - you open up your browser here see that
102:12 - we have so much errors because we forgot
102:14 - to pass the our adapter to our
102:16 - localization provider here so for the
102:19 - localization provider or date adapter
102:21 - date adapter I simply pass adapter date
102:25 - FNS here which I'm going to import it
102:27 - again manually import adapter date FNS
102:31 - from mui mui X dat CES adapter V3 that's
102:37 - it and now open your browser and you can
102:39 - see that we can simply select any date
102:42 - and time that we want and the
102:44 - corresponding registration date and time
102:46 - will be filled here and everything is
102:48 - working correctly and simply select and
102:51 - time and everything is handled for me
102:53 - and that's it for our date and time
102:55 - controller the next component is going
102:57 - to be this date range picker here it's
102:59 - pretty much the same as data and time P
103:02 - here that we just implemented just
103:04 - duplicate this rhf data P here like this
103:07 - change the name of it to RF date range
103:11 - peer like this for this component I'm
103:13 - not going to use any label remove all
103:15 - the label here change the name of the
103:18 - component to RF date range peer here for
103:21 - the controller I'm going to get the
103:23 - value and rest field from the render
103:27 - method here the localization provider is
103:29 - the same as before instead of this
103:31 - component I'm going to use date range
103:34 - Pier here I'm going to destruct the rest
103:37 - Fields here and for the value I'm going
103:40 - to Simply pass this here array. is array
103:44 - value firstly I'm going to check that if
103:46 - the value is an array then return the
103:48 - value here otherwise I'm going to return
103:51 - null and null this is necessary for this
103:53 - component for this controlled component
103:56 - to work correctly and for the T typ
103:58 - script and the runtime to not throw any
104:02 - errors then head over to your SCH schema
104:04 - file here and Below registration date
104:06 - and time just put former employment
104:10 - employment period for example or
104:13 - anything else this is going to be sorry
104:16 - I have an typo here for M and for the
104:18 - top I'm going to return an array of
104:21 - dates here which at much maximum is
104:23 - going to be two because a range has a
104:26 - minimum and maximum for its values and I
104:29 - can also put a mean of two here for
104:33 - better type safety for my form like this
104:35 - for the default values I simply going to
104:38 - return an array with two dates new date
104:41 - and for the second one also I'm going to
104:43 - return the new date also then head over
104:46 - to the user's components here and below
104:49 - it for example I simply put the
104:51 - typography of material value right here
104:53 - and then for example I put the former
104:57 - former
104:59 - employment period and I'm going to
105:01 - import the date range peer I'm going to
105:04 - pass the esema here and the name is
105:06 - going to be former employment period you
105:09 - could also put this typography inside
105:11 - these ARF date range Pier as a label but
105:15 - I prefer to show all the possible
105:17 - scenarios and you are free to handle
105:20 - anything related to your application
105:22 - freely there is no strict ways of
105:24 - handling things this is the results by
105:26 - now as you can see I can select a date
105:29 - range between the start and end dat as
105:31 - you can see everything is handled by
105:33 - react H4 the next component is going to
105:35 - be this range slider here just open the
105:38 - components again and for example again
105:41 - copy the datetime peer here change the
105:44 - name of the component to for example RF
105:46 - slider change the name of the component
105:49 - to rhf slider the props are okay here
105:53 - everything is the same remove all of
105:55 - these localization providers here open
105:58 - an empty react fragment for the label I
106:01 - simply going to use a Topography of
106:04 - material UI and for the slider I simply
106:07 - use the slider component provided by
106:10 - material UI simply I distruct the field
106:13 - here and for example I want to TW a
106:16 - little bit of its properties for example
106:19 - I'm going to use value label display as
106:22 - Auto to see the current value while the
106:25 - user is sliding the range and for the
106:27 - schema itself not this types folder here
106:30 - inside the users inside the types inside
106:32 - the schema file I simply add another
106:35 - field for example called salary range
106:38 - which is going to be an array of numbers
106:41 - with the minimum of two and the maximum
106:44 - of again two values and I simply
106:47 - initialize it as an M array and let me
106:50 - just close of the components here then
106:52 - open your users component and below the
106:55 - date range speaker just simply add your
106:58 - custom slider here I have an typo here
107:01 - in the name of this component let me
107:04 - just hit F2 on the title of the function
107:07 - then Chang it to RF slider and
107:10 - everything is correct I going to put the
107:13 - schema here and the name of field as
107:15 - salary range and for the label I'm going
107:18 - to put the salary range Here and Now if
107:23 - you open your application here you see
107:25 - that we have an error because by default
107:27 - our salary range must have a minimum and
107:29 - maximum but in default values we forgot
107:32 - to put the for example me and Max of our
107:35 - range here for example I put 0 and 2,000
107:38 - here and if I refresh my page we see
107:40 - that everything working as expected for
107:42 - the last custom controller we are going
107:44 - to create a simple controller for these
107:46 - switch element here just head over to
107:49 - your components folder for example
107:51 - duplicate this RF slider that we just
107:53 - created and change the name to rhf
107:57 - switch and change also the name of the
107:59 - component to rhf switch just remove the
108:02 - render function here and just simply
108:05 - return a simple form control label here
108:08 - for the control just pass the switch
108:11 - element from the material UI destruct
108:13 - the field object here and for the
108:16 - checked property just return the field.
108:19 - value here also don't forget to put the
108:21 - label here and that's it for our custom
108:24 - RF switch and for the schema just add a
108:27 - simple field called is teacher which is
108:30 - going to be of type z. Boolean for now
108:34 - but we are going to change it later in
108:35 - the tutorial for some other scenarios
108:38 - now for the default values put the
108:39 - ischer for example as true and go to
108:42 - your users component here below the
108:44 - slider just add the rhf switch here pass
108:47 - the schema here and for the name ad is
108:51 - teacher and for the label just simply
108:53 - add are you a teacher and as you can see
108:56 - here we have simply have our switch
108:58 - component also here control that is it
109:01 - for all of our custom controllers but
109:04 - the thing that we can do here and I just
109:06 - realized is that we can also make our
109:08 - text field component here control as you
109:11 - can see here each time that I want to
109:13 - use the text field I need to pass also
109:16 - the helper takes and the error here but
109:19 - I just realize that we can handle this
109:21 - duplication for all of our our text
109:23 - fields in our project by simply adding
109:25 - another custume controller called rhf
109:28 - text field which is pretty simple and
109:31 - you can also do it yourself but for the
109:33 - sake of the tutorial we're going to
109:35 - implement it together also just create
109:38 - another custom component called for
109:40 - example rhf T fields. TSX here go to
109:43 - your switch for example and copy all of
109:46 - its content then paste it in the rhf
109:48 - text field here we do not need any label
109:51 - for this custom text field and I'm also
109:54 - remove this label from here and change
109:56 - the name to rhf Tes field and then
109:59 - remove all of these render function here
110:02 - we need the field here and also we are
110:04 - going to get the field L State the error
110:07 - from the field State because we're going
110:09 - to show the user the error itself and
110:12 - also we going to make the component red
110:15 - or whatever if there's something wrong
110:17 - with the user's input inside the render
110:19 - function we simply need to pass the Tex
110:22 - field material UI and for the props
110:25 - first I'm going to destruct the field
110:27 - here for the error state I'm going to
110:29 - Simply pass the error like this and for
110:32 - the helper text or the error text itself
110:35 - I'm going to pass the error. message
110:38 - here and that's pretty much it for our
110:40 - custom controller for our text field and
110:42 - inside our application the user
110:44 - component I simply change this text
110:46 - field to rhf text field like this also
110:49 - I'm going to change it to RF text field
110:51 - simply I remove all of this here I'm
110:53 - going to pass the es schema as before
110:55 - and for the name I simply pass the name
110:58 - which is also the name and for this I'm
111:00 - going to pass also the schema itself and
111:03 - the name which is going to be email I
111:05 - want I want to show you a simple trick
111:08 - but it's powerful in this type of
111:11 - scenarios imagine that I want to pass
111:13 - the label property of material UI TT
111:16 - field itself for example I want to
111:18 - change the VD for example to full VDS
111:20 - and also I want to pass the S6 fr which
111:23 - is equal to a style and also much more
111:26 - related property of the material UI text
111:29 - field but as you know we only get you
111:31 - only defined the name as a props of this
111:34 - custom RF text field here to do that I
111:37 - simply go to the rhf text field
111:40 - component here and for the props itself
111:42 - let me just change it interface to type
111:45 - here for better results we do not need
111:48 - to change the previous prop field that
111:50 - we just defined earlier I just need to
111:52 - end this type with another type like
111:55 - this first I'm going to use the type
111:57 - utility of type script called Peak here
111:59 - what I'm going to Peak is here that
112:02 - first I'm going to import the text field
112:04 - props and I'm going to import it from
112:06 - Material UI here then here for example I
112:09 - can specify what properties of text
112:12 - field of material U text field I want
112:15 - for this custom component to have you
112:17 - can for example I can select the label
112:19 - here and can select the disabled
112:22 - property the size of the text field and
112:25 - as you can see the intelligence is
112:27 - guiding us perfectly but for the sake of
112:29 - this tutorial I simply get the label for
112:32 - the text field component and you can do
112:34 - this trick for almost all of the
112:36 - material UI components you can import
112:38 - first import the props of that component
112:41 - whether it's a button it's a text field
112:44 - and much more and here I need to pass
112:47 - and destruct the remaining props like
112:49 - this and beside the field here I simply
112:52 - pass the props like this and as you can
112:54 - see here if I head over to my users
112:56 - component I can pass the label to name
113:00 - and for the email field also to email
113:02 - perfectly if you head over to your
113:03 - application here you see that the error
113:06 - States and the helper takes are handled
113:08 - automatically without us without us to
113:11 - pass the helper Tes and error Fields
113:14 - anytime that we want to use a simple
113:16 - texted in our project from now on in
113:19 - this tutorial the next sections are
113:21 - going to be more practical in complex
113:24 - scenarios if I head over to my completed
113:27 - project here you see that we have a
113:29 - switch here called are you teacher which
113:32 - we have implemented H here but it
113:34 - doesn't do anything special it only
113:37 - changes this is teacher value to true or
113:40 - false here which is not an amazing an
113:42 - amazing thing to do but here in the
113:44 - completed project you can see if I check
113:47 - the aru a teacher switch to True
113:51 - something else happens now I can add new
113:54 - student here also if I click on this
113:57 - button again I can add another field
113:59 - another field and so much more this case
114:02 - of scenario is pretty common in complex
114:05 - scenarios in Enterprise applications
114:09 - where you have a dynamic list of fields
114:11 - that you can that the user can add or
114:14 - remove to them or it can be dynamic
114:16 - depending on the response that you get
114:18 - from your server the amazing thing about
114:20 - this is that each of the these Dynamic
114:23 - fields that we just added here has have
114:25 - their custom validation here custom
114:28 - validation here for example like this if
114:31 - I don't put more than four characters
114:33 - here it throws me this air for this and
114:35 - not for this is pretty amazing I can
114:37 - remove them and for more complex
114:39 - scenarios you can also add switch here
114:42 - to change the order of these Dynamic
114:45 - Fields here the thing that I recommend
114:47 - you to do is that go ahead to the react
114:50 - hook form documentations especially
114:52 - for the use field array hook here and I
114:56 - just need you to take a brief look at
114:58 - this documentation here and read the
115:00 - headings and the code Snippets which is
115:03 - pretty much simple but yet very powerful
115:06 - and in my opinion it is one of the most
115:09 - advanced features of react hook form
115:11 - which will make the life of the
115:13 - developer pretty much easier it's an
115:15 - amazing hook let me just again refresh
115:17 - the completed project page the thing
115:19 - that we are going to implement is that
115:21 - if the switch is false nothing will
115:23 - happen if the switch is true the new
115:25 - Dynamic fields are going to be add to
115:27 - the schema so we need to distinguish
115:29 - between the false estate and true state
115:32 - of the switch here if it is false a new
115:35 - type of validation for our schema is
115:37 - going to be implemented and if it is
115:39 - true it's going to be changed if it is
115:42 - false we don't have Dynamic Fields if it
115:44 - is true we can add Dynamic Fields like
115:47 - this and if one of them is not valid
115:50 - then you see that I cannot Summit my
115:52 - form and the react hook form doesn't
115:54 - allow me to do it all of these criteria
115:56 - must be met to create this type of
115:58 - effect in Zod and react hook form that
116:01 - we can dynamically change the fields of
116:04 - our schema here we just need to learn a
116:06 - very simple yet powerful thing in typ of
116:10 - script called unions and discriminative
116:13 - unions which is very practical in many
116:16 - use cases so let's learn it just head
116:19 - over to anywhere in your project you
116:21 - don't need to do it I just need to show
116:23 - you something then we delete this file
116:26 - that we just created here I'm going to
116:28 - create a file called tests here we're
116:30 - going to remove it later imagine that
116:32 - we're creating a type for our products
116:35 - in our application I'm going to create a
116:37 - type called Product our product is going
116:39 - to have a name of type a string and a
116:41 - price of type number here and then I'm
116:44 - going to create for example a laptop
116:47 - from this product for example laptop XYZ
116:50 - is going to be of type product here for
116:52 - the name I'm going to pass the for
116:54 - example the XYZ itself and for the price
116:57 - I'm going to pass the 200 also I'm going
116:59 - to add another field for example called
117:02 - the screen size here which is going to
117:05 - be up type number then I'm going to pass
117:07 - the screen size for example to 14 here
117:09 - this is correct so far imagine that we
117:12 - are going to create another product
117:14 - called for example cons
117:16 - airpods Pro here which is of type also
117:20 - the product here the name is for example
117:22 - airpods Pro 2020 airpods Pro the price
117:26 - is for example I don't know 100 but the
117:30 - screen size here doesn't have any
117:32 - meaning for the airpods pro because
117:34 - doesn't have any stren let me just make
117:36 - it cam case here so we need to
117:38 - distinguish between our laptop here and
117:42 - airpods which both of them are product
117:45 - but laptop may have other fields that is
117:48 - not common with airpods and vice versa
117:51 - to overcome this issue in types script I
117:53 - just simply remove this screen size from
117:56 - the product itself and only mention the
117:58 - common fields that are shared between
118:00 - all products here this is it above the
118:02 - type of product I simply add another
118:05 - type for example called Laptop here the
118:08 - laptop is going to have a type which is
118:10 - going to be laptop and the fields that
118:13 - are only unique to the laptops for
118:15 - example a laptop might have a screen
118:17 - size here which is of type number the
118:19 - graphics also string and much more also
118:23 - we have another category for example in
118:25 - our shop called headphones headphone not
118:27 - headphones which it has a shared key
118:30 - like laptop called for example headphone
118:33 - here and it has another custom field
118:35 - called for example active noise
118:37 - cancelling here which is of type for
118:39 - example Boolean it has ANC or not and
118:43 - this is it for now we call it
118:44 - discriminative Union in types script
118:47 - because the only thing is common between
118:50 - the type of laptop and type of headphone
118:53 - is this type field here it can be
118:55 - anything you can call it variant product
118:58 - type and much more but it must be
119:00 - something unique between each of these
119:03 - types here why do we need them for your
119:05 - product type here I'm going to put an
119:08 - and operator here then I'm going to or
119:11 - the laptop and headphone together with
119:13 - this simple trick I can now distinguish
119:16 - between a laptop and airpods pro for my
119:19 - product type here what do I mean is that
119:22 - if I hit control space here and as you
119:24 - can see here we have a new field called
119:27 - type which is going to be get from here
119:29 - and here which we added it to our
119:32 - product type here like this my laptop is
119:34 - going to be of type laptop which is
119:36 - obvious and if I put laptop here as you
119:39 - can see if I hit on control and space
119:42 - here you see that the fields only
119:44 - specific to the laptop I can pass the
119:46 - graphics for example to Nvidia and also
119:49 - the screen size for example to 40 but
119:51 - for example imag that I use the
119:53 - headphone type for my product here the
119:56 - type script is throw me this error that
119:58 - graphics and screen size is not present
120:01 - on the product in this situation with
120:03 - this discriminated type here but if I
120:05 - change it to the laptop itself you see
120:08 - that the type Escape is satisfied itself
120:10 - now the type Escape for the airpods pro
120:12 - is throwing me this error that you need
120:14 - first firstly you need to pass the type
120:16 - here I know that my airpods Pro is of
120:18 - type headphone here and now if I hit on
120:21 - control space here you see that you have
120:23 - only see the ANC here not screen size or
120:26 - Graphics only ANC which is specific to
120:30 - headphones which is for example two with
120:31 - this simple concept here we can handle
120:34 - the most complex scenarios in handling
120:38 - forms and dynamic fields and states
120:41 - which is a must to know which most of
120:43 - you may have known it for a while now
120:45 - now let me just remove this extra
120:47 - component that we just created now we
120:49 - need to bring this typoscript cont
120:52 - concept into our Zod SCH schema here how
120:55 - to do it we want to do something that is
120:57 - pretty common in complex scenarios so
121:00 - what is it imagine that we are creating
121:03 - a new user with this information here
121:05 - for example with the name of James and
121:07 - with the age of 30 depending on your
121:09 - server or back end most commonly we call
121:13 - an API endpoint with this information as
121:16 - body here as body of the request and the
121:19 - new user will be created on our server
121:22 - so for example we call an endpoint like/
121:26 - API SL create new user and the method is
121:29 - just not important here so keep that in
121:31 - mind that we create the user with this
121:34 - information by calling one of our
121:36 - backend apis inputs but what if we want
121:39 - to edit the user that we just created in
121:43 - most cases you need to identify for your
121:46 - back end that which user you want to
121:49 - make some edits on it we need to
121:51 - distinguish between the users between
121:53 - the one the the user that we want how to
121:56 - we simply add another field for example
121:59 - like the ID of the user to our body of
122:02 - the request for example I want to change
122:05 - the James to Leo the 30 to 20 but my
122:09 - backend needs to distinguish between the
122:11 - users so I need to pass the ID of that
122:14 - user so I send the new name the new age
122:17 - alongside with the ID of the user that I
122:20 - want to edit here and for example call
122:23 - another endpoint on my server here this
122:26 - concept is pretty common in many
122:28 - scenarios where you have a single
122:31 - operation in your application but with
122:34 - different Dynamic schemas imagine that
122:37 - you have one schema that when you are
122:39 - creating the user has this SCH schema
122:41 - here and while you are editing that user
122:44 - it has this schema with added ID Fields
122:47 - here and you can extend this concept
122:49 - into new things for example when you you
122:51 - are creating your user you cannot
122:54 - specify for example the profile image
122:56 - for it but when you are editing that
122:58 - user you can simply add the profile
123:01 - image to the user so you can also add
123:03 - for example the image profile field
123:07 - alongside with others and so much more
123:10 - so let's implement this concept this
123:12 - useful concept into our Zod esema which
123:17 - you can extend it to your needs to do
123:19 - that just open your SCH schema. TS file
123:22 - and wrap all of the schema into another
123:26 - zot utility called zot do
123:29 - intersection like this and don't forget
123:33 - to remove this semicolon at the end
123:34 - which is perfect this is equal to this
123:37 - concept in type es skip for example I
123:39 - have the type one equals to something
123:42 - and the type two is equal to something
123:45 - and I want to create the intersection of
123:48 - these types for example to new type here
123:51 - and and I'm going to and I would use
123:54 - something like this type one intersect
123:56 - with type two here this is exactly the
123:58 - same and now if I add another Z for
124:01 - example object here I can merge these
124:04 - two objects together so let me just
124:06 - remove all of them but as we talked
124:08 - before we all we need the and operator
124:11 - and also the or operator so imagine that
124:15 - I want to create a new type like this
124:18 - type type for example type one is equal
124:21 - to something type type 2 is equal to
124:24 - something else and type type three
124:28 - something else I want to create the new
124:30 - for example Type 4 which which will be
124:33 - equal to type one intersect with type
124:36 - two or type three just remember the
124:39 - laptop and headphone example that we
124:42 - just talked about you want to implement
124:43 - something something like this with the
124:46 - Zod which is pretty simple yet very
124:48 - powerful so we have the intersection
124:50 - part here just at the end of this object
124:53 - here at a new comma and we need to use
124:56 - another Zod utility called z.
124:59 - discriminated Union here like this for
125:02 - the first argument of this utility
125:04 - function I need to pass the thing that
125:07 - will be common between our Dynamic
125:11 - schema Fields remember the type field
125:13 - from the typ script version example of
125:15 - this the laptop and headphone example I
125:18 - want to call it the variant here like
125:21 - this and it will make sense in a moment
125:23 - add comma here and for the second
125:25 - argument open the brackets here and we
125:29 - need to pass two variation of our es
125:32 - schema what are they for the first
125:34 - object I'm going to use the variant as
125:38 - z.
125:39 - literal. create what do I mean by create
125:42 - it means that my current state of form
125:45 - is in creation mode I'm creating a new
125:48 - user and here at another z. object here
125:52 - with the variant of z. literal edit here
125:57 - what is this z. literal here for example
126:00 - imagine that I'm going to create a new
126:02 - const for example something which is
126:05 - equal to not something for example if
126:08 - for example product type here which will
126:10 - for example equal to laptop as con here
126:14 - like this this is something this is
126:15 - exactly like this so nothing very
126:17 - special if you remember in our example
126:20 - that when we are in create a state
126:22 - create variant creation variant we don't
126:25 - need any extra field but when we are in
126:27 - editing a state we need this ID field
126:29 - here so in this variant the create
126:32 - variant we do not need any extra field
126:35 - but when we are in edit mode we need
126:37 - something we need to Simply add the ID
126:41 - of our SCH schema like this z. string
126:44 - with the minimum of one so with this way
126:47 - we are sure that we're we are sending
126:50 - the right the correct data the correct
126:52 - SCH schema with the ID when we are
126:54 - sending the data to our server and now
126:57 - for default values the typ script is
126:59 - throwing us this error that we need to
127:01 - also specify the variant of our form
127:04 - which by start we are in creation mode
127:06 - and I need to pass the variant create
127:09 - but if I change it to for example edit
127:11 - here you see you see that typ of script
127:13 - is not happy here because if you are in
127:16 - edit mode we need also to pass the ID so
127:19 - if I hit control space here we see that
127:21 - the intelligence is guiding me through
127:23 - and if I pass the ID for example to
127:25 - something the error will be gone but for
127:27 - the initial estate of my form I need to
127:29 - use the create State not edit state so
127:33 - that was the use of intersection and
127:35 - discriminated Union in Zod which is
127:38 - pretty powerful tool that you can use in
127:41 - complex scenarios in your application by
127:44 - the help of the concept that we just
127:46 - implemented into our schema we can also
127:49 - add these Dynamic field build into our
127:52 - scheme also and implement it into our
127:54 - application so if I check the are a
127:57 - teacher switch here now I can add new
128:00 - fields and also I can remove them all of
128:02 - these Dynamic Fields have their unique
128:05 - validation here like this and as you can
128:08 - see we have two Estates here for our SCH
128:10 - schema one if the is teacher here is
128:13 - false another estate is that wheny is
128:16 - teacher is true so let's implement it we
128:19 - have another way to implement this
128:21 - concept with Zod which has simpler
128:24 - syntax but it might remove some of the
128:27 - useful features of Zod but in this
128:31 - situation it won't bother us at all so
128:33 - let's learn that way of doing it also to
128:36 - do that at the end of your schema here
128:39 - at the end of the Z do intersection here
128:41 - call and on it open the parenthesis here
128:45 - inside it use z. Union again inside it
128:50 - open the brackets and put the z. object
128:54 - that you want to use here for example
128:56 - let's just remove this is teacher here
128:59 - and put it exactly here is teacher I'm
129:02 - going to use Z do literal false and also
129:06 - another z. object when the is teacher Z
129:10 - do sorry is teacher z. literal is true
129:15 - and as you saw if the teacher if the is
129:17 - teacher switch is true I'm going to have
129:20 - dynamic students field so I simply add a
129:24 - students which is z. array here each
129:28 - array item will be be simply another Z
129:32 - object and each student is going to have
129:34 - simple name with the minimum characters
129:38 - of four for example and as you can see
129:41 - here the top script is throwing us the
129:43 - error that is that when the is teacher
129:47 - field is true we also need to have the
129:50 - students field by you'll be going an
129:53 - empty array and if I change it to false
129:57 - you see that typescript is not happy and
129:59 - telling is telling me that I must remove
130:01 - this students here because when the is
130:03 - teacher switch is false you have nothing
130:06 - when it is true you have the student
130:08 - array here so by default I'm going to
130:11 - use the is teacher to false perfect now
130:14 - let's just implement this schema in our
130:17 - application just head over to your users
130:19 - component and to to implement this kind
130:22 - of behavior where we have Dynamic fields
130:25 - that we can add or remove we can use one
130:28 - of the most powerful tools of a react
130:31 - hook form Library which is the field the
130:34 - use field array hook which is perfect
130:37 - for these kinds of scenarios to use it
130:40 - do like this Con distract the object and
130:43 - use the use field array Hook from react
130:47 - hook for and inside the options here the
130:50 - first thing that we need to pass is the
130:53 - control itself which will get from the
130:56 - use form hook here in this case use form
130:59 - context control and we must pass it here
131:03 - like this control or with simpler syntax
131:07 - like this and also we need to tell the
131:10 - react hook form that which field we need
131:13 - to take the control of it so we need to
131:15 - pass also another option here the name
131:18 - option and for this value as you can see
131:21 - here here we have a students by default
131:23 - from the intelligence why only a
131:26 - students is recommended here if you head
131:28 - over to our schema here you see that the
131:31 - only array of this schema this is a
131:35 - string a string and array of a string
131:38 - and array of a string also also this is
131:40 - array but the only array that it has
131:43 - another object inside as a schema is a
131:46 - student field here which is exactly what
131:49 - we want as a type for for this hook to
131:52 - work the react hook form type system is
131:55 - very smart enough so it can recommend me
131:57 - the correct field that I can use for the
132:01 - name here perfect now from the
132:03 - destructured object I can get many many
132:06 - useful utility functions here and
132:10 - methods like append Fields insert move
132:12 - prepend remove replace Swap and update
132:15 - here which the names are pretty
132:18 - self-explanatory ien adds a new item to
132:21 - the end of the list with Fields you can
132:23 - get the array itself and map over them
132:26 - to show the corresponding inputs with
132:28 - insert you can pass a new element at a
132:31 - specific location at a specific index
132:34 - with move you can move an element up or
132:36 - down the array prepend add to the start
132:39 - of list remove add deletes an element
132:42 - from the array at a specific index
132:44 - replace replace the holes the whole
132:46 - array Swap and update are also
132:49 - explanatory with update you can pass the
132:51 - index that you want to change and also
132:54 - the new element that you want to change
132:56 - with for a starter we are going to use
132:58 - only the append method for now just let
133:02 - me hide the browser here like this and
133:05 - the thing that we also need is the let
133:08 - me just open the esema here we need to
133:10 - have access this is teacher switch so we
133:13 - want to know when show the user just
133:16 - bring it back show the user let me just
133:18 - refresh the page we want to know when to
133:20 - show the the user this button for
133:22 - example here which user can add or
133:24 - remove Fields so I need to have access
133:27 - to this switch here which is here and in
133:30 - react H form I can simply access it like
133:33 - this const is teacher for example I call
133:36 - it e teacher because in our ESO we call
133:38 - it iser ischer is equal to use watch
133:41 - from react form as always we need to
133:43 - pass the control here and for the name
133:47 - I'm going to use the eer also now head
133:50 - over to your end of the component here
133:53 - and below this switch here which is is
133:55 - teacher field here put the is teacher
133:58 - here and if his teer is true we're going
134:00 - to render our button here like this for
134:04 - the text add add new student here on
134:09 - click we want to add a new student into
134:13 - our fi so what we are going to use is
134:15 - the append that we get from here you're
134:18 - going to use the
134:19 - append and what we are going to append
134:22 - here a simple object with an empty name
134:26 - which is the name of the students and it
134:28 - can be anything else and for the type of
134:31 - this component I'm going to use button
134:33 - instead of submit if you don't do it if
134:36 - you click on this button the react whe
134:38 - Summit our form instead of doing the
134:40 - unclick here perfect now we also need to
134:44 - map over our field array here so we need
134:47 - to get another thing from this use field
134:49 - array called field Fields here and down
134:53 - here I'm going to use I'm going to map
134:56 - over the fields here fields. map and for
135:00 - each field and also I'm going to get the
135:02 - index of each field I'm going to return
135:05 - a simple text field sorry not text field
135:09 - the RF text field that we just created
135:12 - for the name I'm going to
135:14 - pass this string here we need to give it
135:18 - the address of our field inside that SCH
135:21 - schema so let me just open the es schema
135:23 - side by side here so we need to pass
135:26 - this name here inside this name here so
135:29 - we need to address it here where is it
135:31 - it's inside the students and because
135:35 - this is an array and we need to have the
135:38 - index of the name that we want here so
135:40 - how to pass it it's pretty simple a
135:43 - students dot this index here that we get
135:46 - for each iteration and pass the index
135:48 - here and Dot the name of the field that
135:51 - we want which is here is the name also
135:53 - do name here which is perfect for our
135:56 - name here just close it here for the
136:00 - label I'm going to pass simply pass the
136:02 - for example name and also don't forget
136:05 - to pass the key with the value of
136:08 - fields. ID here this ID will be
136:11 - autogenerated for us when we are using
136:13 - the fields from our use field array
136:16 - which is perfect and for each iteration
136:19 - I also want to add a remove button so
136:23 - simply we need to pass this rhf text
136:25 - field inside a react fragment here just
136:29 - put it here and copy the key here in the
136:32 - fragment perfect and below our text
136:34 - field I need to pass the button itself
136:38 - button not button base button with the
136:40 - text of remove the color of error or red
136:45 - for the unclick I'm going to pass the
136:48 - remove the index that we want here we
136:51 - also need to get the remove from use
136:53 - field array here remove go again here
136:57 - perfect and for the type also as before
136:59 - I need to pass the button here instead
137:01 - of summit also another thing that I
137:05 - think it's better practice to do is that
137:07 - I want when the is teacher switch is
137:10 - targ off or false I simply need to empty
137:14 - the student array which is the correct
137:16 - Behavior so below here I'm going to add
137:20 - another us
137:21 - and empty dependency for now and I need
137:25 - to check if the stitcher is false or is
137:29 - not active I simply replace my whole
137:34 - field array with an empty array so I
137:36 - also need to get the replace from use
137:38 - field array which is perfect and also I
137:41 - need to Simply unregister my students
137:45 - array from the react hook form if you
137:49 - don't do it and change pick the form
137:51 - value after the replace is done we have
137:55 - something like this inside our form data
137:58 - the students will equal to undefined
138:02 - which is not that we want we also do not
138:04 - want to see the students at all when the
138:07 - switch is false inside our form logic
138:10 - which is also another good practice and
138:13 - it's not necessary to do this unregister
138:16 - part but for the sake of this tutorial
138:18 - I'm going to put it here and also I need
138:20 - to get the unregister from our use form
138:23 - context here like this and for the
138:26 - dependencies here I simply use the Quick
138:29 - Fix here and pass iser replace and
138:33 - unregister here perfect and now if you
138:36 - head over to our application and refresh
138:37 - the page itself if I change it to true
138:40 - this switch the button is here because
138:43 - we specified that if the E teacher is
138:45 - through I'm going to see a new button
138:47 - with it takes off add new student here
138:50 - if I click on it you see that a new
138:52 - field here is added to my Fields here
138:55 - which will going to have the validation
138:57 - that they specified inside our schema
139:00 - here we specified that at least the name
139:03 - of the student must be at least four
139:06 - characters which is exactly that we have
139:08 - here perfect I can add new students here
139:12 - like this each of them going to have
139:15 - it's their specific validation and I can
139:17 - also remove them V by one and I can also
139:21 - again make the switch false let me just
139:23 - add a few fake students here and if I
139:27 - check the console like here you see that
139:30 - for the students field we have exactly
139:32 - the fields here and if I make the switch
139:35 - false you see that there is no students
139:38 - inside our form here the form values
139:40 - here which is exactly the behavior that
139:42 - we want here which is perfect for our
139:44 - Dynamic field array here perfect now
139:47 - that we have implemented our whole
139:49 - fields for our application
139:51 - now also we need to have the submit
139:54 - button for example reset form button
139:57 - like this the editing capabilities and
139:59 - totally the crow capabilities of our
140:02 - simple project so let's get it started
140:05 - open your users component and at the end
140:09 - of your function here but before do
140:11 - anything extra here first I simply wrap
140:15 - all of my application inside the mui
140:18 - container like this and copy all of the
140:20 - this here and paste it here for the max
140:22 - fits of my container I'm going to use SM
140:25 - also for the component I simply use the
140:29 - form HTML form here so this all of these
140:33 - container will be considered as a form
140:35 - HTML element and that's it for now and
140:38 - now if I check the application here you
140:41 - see that there is a nice padding between
140:43 - the edge of the browser and my
140:46 - application content itself just for now
140:48 - consider using it now again head over to
140:51 - the end of your application here and
140:53 - here above the last stack here you need
140:56 - to add another stack for the containers
140:59 - for the container for our buttons for
141:03 - the direction I'm going to use Felix
141:06 - direction of row and I need to justify
141:09 - the content space between so the buttons
141:11 - are separated by each other inside this
141:14 - s stag I simply need to pass two button
141:17 - one for creating new user for now P it
141:20 - type of submit here submit and another
141:25 - button just for resetting our form just
141:28 - to show you the capabilities of re from
141:30 - library on unclick I simply need to pass
141:33 - a simple handle for example reset
141:35 - function here and at the top of our
141:38 - component here I simply Define it it's
141:41 - pretty simple just create a simple
141:43 - handle function which is equal to reset
141:48 - sorry reset with did default values that
141:52 - we defined it inside our schema here so
141:55 - whenever the user clicks on the reset
141:57 - button just let me bring it from the use
142:00 - form hook here reset like this and
142:03 - whenever the user clicks on the reset
142:04 - button the form values will be reset to
142:07 - these values these default values that
142:09 - defined in our application this is one
142:12 - of another use cases of the default
142:14 - values for our form so now if you check
142:17 - our application here like this if I put
142:20 - something here in my field select
142:22 - anything that I want and if I hit on
142:25 - reset button here you see that the form
142:27 - state is the initial state of my form if
142:30 - I click on new user nothing will be
142:32 - happen because we haven't implement this
142:34 - new user button here so by implementing
142:38 - it in the next section of video we can
142:40 - mutate our database our server and add a
142:43 - new user on it so let's get it started
142:46 - now the thing that is needed here is
142:48 - that when the user clicks on this new
142:50 - user button it submits our form data to
142:53 - our fake back end here which is running
142:56 - on our local port to implement the new
142:59 - user button functionalities just close
143:02 - everything here then open your file
143:04 - explorer and go to the services folder
143:07 - then the mutations. TS file here open it
143:10 - just for your information it doesn't
143:12 - matter how you handle your form
143:15 - submissions and your Communications with
143:17 - your backend server it doesn't matter at
143:20 - all for for the sake of this tutorial
143:22 - I'm just showing you one of the ways
143:24 - that you can post your data to the
143:27 - server and API endpoints it doesn't
143:29 - matter how you handle them and in in
143:31 - this tutorial we're going to do it with
143:34 - react query we're going to do our
143:36 - mutations with react query which is very
143:39 - powerful very easy to use and maintain
143:42 - to create a mutation with react query we
143:45 - do something like this I'm going to
143:46 - export a function a hook called use
143:50 - create user inside this hook I'm going
143:53 - to return another hook called use
143:56 - mutation and I'm going to import it from
143:59 - tac react query here like this in inside
144:02 - it as a query sorry as a mutation
144:05 - options I simply need to pass a mutation
144:08 - function which is responsible for
144:10 - communicating with the server it's going
144:12 - to be of type an asynchronous function
144:15 - this async function is going to get some
144:18 - data which is of type our es schema
144:22 - which we defined earlier in the tutorial
144:24 - here and for the function itself we
144:26 - simply need to create a simple axus
144:29 - dopost let me just import the axis here
144:32 - ax of post to the end point of our API
144:36 - which is HTTP Local Host on our at8 port
144:40 - at the route of users with the data here
144:44 - which we're going to pass to this
144:45 - mutation function in a moment when the
144:47 - mutation function is done I remind you
144:50 - again that all of these are related to
144:52 - react query and it's not react hook form
144:55 - specific when this mutation function is
144:57 - done or resulted on the unsuccess event
145:01 - of this use mutation book here I'm going
145:04 - to do something I'm going to pass an
145:07 - asnc function after that our user is
145:11 - created then we need to update the list
145:14 - of the users in our application which
145:17 - technically this process is called
145:19 - invalidation it's pretty simple with the
145:22 - help of react query So Below the use
145:25 - create user hook here I need to create a
145:29 - cons here called query client which will
145:31 - going to be the query client itself and
145:35 - on our un success method here I simply
145:38 - need to await query client. invalidate
145:41 - queries and I want to invalidate one of
145:44 - my queries by providing its key so what
145:48 - should I pass here as a key it must be
145:51 - an array what is it going to be I simply
145:53 - go to my queries file here then search
145:56 - for the query which is responsible for
145:59 - fetching the users itself which I didn't
146:02 - implement it yet so let us implement it
146:05 - here in my queries. ts file here at the
146:07 - end of the file I'm going to export
146:10 - another simple query hook like this use
146:12 - users which this feel going to return a
146:15 - list of users return use Query here for
146:19 - the query I'm going to pass the users
146:22 - key for the query function also I'm
146:24 - going to pass the a function like this
146:27 - ause do get and for the endpoint itself
146:30 - I simply pass the HTTP Local Host on the
146:33 - port of ad8 and endpoint of users here
146:36 - by now this query function will return
146:38 - the list of the users but it's not
146:41 - pretty functional in typescript because
146:43 - we don't have any intelligence here to
146:45 - get around this I simply need to provide
146:48 - the return of this function with type so
146:51 - this function will be of type promise
146:53 - and it will be going to return a list of
146:56 - option like this then I simply need to
146:59 - get the response of my query function
147:02 - then I simply need to map over the data
147:06 - but also the return of this axis. get
147:10 - method here is not obvious for
147:13 - typescript here so we need to pass
147:15 - another type here as a generic imagine
147:19 - that this end point Point Returns the
147:21 - list of users with another shape and
147:24 - your application will going to consume
147:27 - the result of this API call with another
147:29 - shape so we need to convert our API
147:32 - response to a shape or type that it can
147:36 - be consumable for our front end
147:38 - application which is pretty common in
147:41 - communicating between client side and
147:43 - back inside of any project so this
147:46 - endpoint will return the list of users
147:49 - here and if I head over to my fake
147:51 - backend here and go to the db. Json file
147:55 - here if I go down here for the sake of
147:58 - this tutorial I have created a few users
148:01 - here for you to see the shape of each
148:04 - user in our database so by now I know
148:07 - that my fake back end my M back end will
148:10 - return the shape of the user like this
148:13 - and I simply need to make it a type in
148:15 - my application for each user that my
148:18 - back end will return for better
148:20 - organization of our code I create
148:23 - another file type in my types folder
148:25 - called API types here.s if you remember
148:29 - we talked about the discriminated unions
148:31 - in typescript and my application needs
148:34 - to create an edit the created user by
148:38 - our client so our API types will going
148:42 - to have a type for example create and
148:45 - the type of edit here which the variant
148:48 - will be edit and on our on the edit
148:51 - variation of our API post
148:54 - call I also need to pass the ID here
148:58 - because when we are creating there's no
149:00 - need to provide the ID of the user
149:03 - itself because the back end will
149:04 - generate it automatically but when we
149:06 - are editing a user or an entity on our
149:10 - server we always need to pass the ID of
149:13 - the desired user some of the fields are
149:16 - common between the create and edit phas
149:20 - of our API call in a few moments you
149:22 - will understand why are these going to
149:24 - be very useful in the future I will
149:26 - create another type called for example
149:28 - type common here and I simply pass the
149:32 - shape of the user that the back end will
149:35 - return we have email field name Estates
149:38 - gender language spoken which are exactly
149:40 - the fields that exist on my database
149:43 - here so by now I know that my user
149:46 - returning from the server is going to
149:48 - have these fields and the depending on
149:50 - the situation that I'm creating or
149:53 - editing the user I'm going to pass the
149:55 - ID or not pass it depending on the
149:58 - situation so I need to export it for now
150:02 - for the future and below here I simply
150:06 - need to export another type called API
150:09 - create edit which will be going the
150:12 - intersection of common with the unions
150:15 - of create and edit here create or edit
150:18 - here and also so and also the get user
150:23 - API call type will be going to this edit
150:27 - here and the common type here like this
150:31 - these types that we implemented here are
150:34 - pretty useful if you want to maintain
150:37 - your application and extend the scale of
150:40 - your application very easily and these
150:43 - scenarios will happen so much in real
150:45 - world cases for example first you need
150:48 - to create a type of shape of the
150:50 - response of your backend for example the
150:54 - put request the post request the get
150:56 - request all of it are going to be
150:58 - handled by you for better tie safety and
151:01 - better maintainability so now the thing
151:03 - that I want from this file here for now
151:06 - is this API get here so if I head over
151:09 - to my queries. ts file again I can
151:12 - simply pass the API get here as a
151:15 - generic like this and I'm going to
151:17 - import it then it's going to be a list
151:19 - of API get or a list of users here then
151:23 - I can simply easily let me just remove
151:26 - this map here I can simply map over the
151:29 - response returning from this API call
151:32 - and I simply call each iteration user
151:36 - and for each iteration I simply hit
151:39 - control space here which the
151:41 - intellisense is not working I don't know
151:43 - why I need to return a list of option
151:46 - here which will going to have ID and
151:48 - label and I'm going to use this use
151:51 - users query to show our client the list
151:54 - of users to manage it to manage them ID
151:57 - is going to be user user. ID and the
152:01 - label also is going to be user. name but
152:04 - I realize that I can pass anything here
152:07 - and the type safety is not working in
152:10 - these situations you need to Simply
152:12 - Force type a script to get the types and
152:15 - help you in the future so I'm going to
152:17 - use satisfies option here and if I for
152:21 - example put another field which is not
152:23 - exist on the option type it's going to
152:26 - return us an error and if I for example
152:28 - don't provide the required field it's
152:31 - also going to return me the error we can
152:33 - also use the as here but I most of the
152:36 - time prefer satisfies in most situations
152:40 - now that I implemented this use queries
152:43 - hook here I can simply use it in my
152:45 - application so I simply head over to the
152:48 - users component onent here then I'm
152:51 - going to initialize the created query
152:54 - earlier cons users query use users here
152:59 - now I need to render the users query
153:01 - data in my application so exactly below
153:03 - the container of our form I simply
153:07 - create a list for the subheader let me
153:10 - just import it from Material UI for the
153:12 - subheader of this I simply put the Leist
153:16 - subheader with the name of the users
153:19 - inside the list itself I'm going to map
153:21 - over the use query. dat map for each
153:25 - iteration I simply return a list item
153:29 - with the key of user. ID and I simply
153:33 - disable the padding of my list for
153:35 - better appearance then inside each list
153:38 - item I simply return a list item button
153:41 - so when the user clicks on each item of
153:45 - my list it will going to do something in
153:47 - the future open it here
153:50 - and on click of it just put the handle
153:54 - user click Handler here let me just make
153:57 - it uppercase then for each iteration I
154:00 - simply pass the user. ID here but I have
154:04 - not implemented this hand the user click
154:06 - here so let me just implement it here
154:09 - the thing that this function is going to
154:10 - do is that do something so that my
154:14 - application knows that this user is
154:16 - clicked so at the top of my component
154:19 - here I simply create a constant called
154:22 - ID and I'm going to use the use Hook
154:26 - from rhf I'm going to pass control and
154:28 - also the name will be going to be ID
154:31 - this is the this constant will be the ID
154:34 - which is presented on my form object why
154:37 - do I need this is that I simply will be
154:40 - going to pass this to my user query
154:44 - which I did not implement it yet it's
154:46 - not users's query it's user query it
154:48 - will be going the complete user
154:51 - returning by our server not the list of
154:53 - it so I simply pass the users no sorry
154:57 - the use user here and for the argument
155:00 - of it I simply pass the ID here so let's
155:03 - go and implement this query also in the
155:06 - queries. TS file here below the file
155:10 - here just export another query hook
155:13 - called use user which will going to
155:16 - return a user from the server it's going
155:19 - to get the ID of the user that we want
155:23 - and we simply return a use Query as
155:26 - before query key will be going to be for
155:28 - example the user as a main key and also
155:31 - the ID as a dynamic key for the query
155:34 - function I simply pass an async function
155:37 - this function will be of type promise
155:40 - and returning the schema of our user
155:44 - which we defined it earlier in our
155:46 - application so I simply create a res
155:50 - constant which we going to be the
155:52 - response of our API call to the server
155:54 - evate axio doget API get as a result of
155:59 - this query it's not an array of API get
156:03 - it's only an API get because we're going
156:05 - to get only a user not a list of users
156:08 - and for the Endo here I simply put two
156:12 - pactic here HTP Local Host adad users
156:17 - and I simply pass the ID here for the
156:20 - argument of my API this is how the Json
156:23 - server much backend Works in njs but it
156:27 - might be different with your case and
156:30 - instead of doing like this I simply
156:33 - distract the result and simply return
156:35 - the data from it then I simply need to
156:39 - return an object with the shape of my
156:41 - SCH schema as you can see the intense is
156:44 - working because we provided the result
156:46 - of
156:47 - our API call function so inside our
156:51 - return here for the variant I simply
156:54 - pass the edit so my application now
156:57 - knows that we are in editing mode and
156:59 - when the variant is on edit here I can
157:02 - simply pass the ID which will be going
157:04 - to be res dot sorry the data. ID here
157:09 - but for example if I put it as create
157:12 - you see that the ID is not available
157:14 - when the variant is create which we
157:17 - discussed thoroughly earlier before
157:19 - before edit here for the name I simply
157:22 - pass the res. name not res sorry the
157:25 - data. name email you be going to be
157:28 - data. email former employment period
157:32 - will be going to going to be new date
157:35 - press do not sorry again data. formare
157:39 - employment period for the first index of
157:42 - this array here and for the second also
157:44 - I simply pass the new date data. form
157:47 - employment with the index of one for the
157:49 - gender I simply pass the rest of gender
157:52 - Purity spread straightforward languages
157:55 - is spoken will be going to be languages
157:57 - spoken registration date and time will
157:59 - be new date R data. registration date
158:03 - and time salary range will be going to
158:06 - be data. salary range first index and
158:09 - the second index salary range also scals
158:12 - are going to be the data do skills
158:15 - States data do states here students data
158:19 - dot students is teacher also going to be
158:22 - data do is teacher here sorry there's an
158:26 - typo here put it states here as you can
158:28 - see here that everything is working just
158:31 - fine the type of scpt is very happy and
158:33 - by now I have created a use user hook
158:36 - that it will return the desired user by
158:39 - providing the ID of the user that I want
158:42 - here so let's use this use user hook in
158:45 - our application let me just import this
158:48 - use user hook here and also we're going
158:51 - to pass the ID available on our ID form
158:54 - field to this user query but we never
158:58 - change the ID on our form to the desired
159:02 - ID so if you remember we put the handle
159:05 - user click whenever I whenever our user
159:09 - clicks on each list item in our form so
159:13 - wherever you want in the application
159:14 - create this function cons handle user
159:18 - click here is going to pass the ID and
159:23 - of Type S string and we're going to set
159:26 - the value let me just get it from our
159:29 - form here set value value from our use
159:33 - form hook here this utility will change
159:36 - any of your form fields to whatever you
159:39 - want so I need to change the ID field of
159:42 - my form to the passing ID to the handle
159:46 - user click Handler function so head over
159:49 - down here perfect and I want to make
159:52 - this button selected on a certain
159:55 - condition so I'm going to pass the
159:57 - selected then the ID of my form the ID
160:01 - here then it's equal to the user. ID
160:05 - here and for the text of each list item
160:08 - I simply pass the list item text here
160:12 - with the label of
160:14 - user. label here and now if we head over
160:18 - to our application here we see that we
160:20 - have the list of the user you might not
160:23 - see them because your backend server is
160:25 - empty but we're going to create some
160:28 - other users in a few moment just let me
160:31 - just make this app a little bit more
160:33 - beautiful so put all of the things
160:36 - inside the main container for
160:38 - application inside a stack select all
160:41 - the things here except the ending
160:44 - container here put it inside this stack
160:47 - here for the direction of this tag I
160:50 - simply put the flex direction of row and
160:53 - for The Gap I simply pass the two as you
160:55 - can see here the list of users is left
160:58 - and our form is on the right and you can
161:01 - see that whenever I click on one of
161:04 - these list items here nothing happens
161:06 - but as you can see it will be going to
161:09 - be selected because this it is now equal
161:13 - to user. ID so if I now like this ID
161:17 - here for example below the list here for
161:20 - example I simply pass the ID here you
161:22 - see that whenever I click on each list
161:25 - item you see that the ID of that user is
161:28 - now saved on the ID constant here and
161:31 - this ID is also the ID presenting on my
161:36 - form field now that we have this ID by
161:39 - clicking on one of the list items here I
161:42 - can simply get the
161:45 - corresponding user entity from the serer
161:48 - and populate my entire form with the
161:51 - fetched data so let's implement this
161:53 - Behavior also but I forgot something to
161:56 - do in the queries. TS file here we have
162:00 - provided the query key the query
162:02 - function also exactly after the query
162:05 - function method here I simply pass the
162:09 - enabled to this here this will
162:13 - only call this query function here
162:17 - whenever the ID is is not a falsey value
162:21 - for example if I not provide this this
162:23 - function this query function might run
162:25 - even when the ID is not provided and it
162:28 - might cause some problems in our
162:30 - application so whenever the ID is
162:33 - provided whenever I'm I'm sure that we
162:35 - have valid ID and not falsy ID here I
162:39 - can simply can get the call the call
162:42 - this endpoint to fetch the user with the
162:44 - corresponding ID here it's react query
162:47 - specific not react to form spef let me
162:49 - just close this to populate the form
162:52 - with the user query data fish from
162:55 - server we simply need to create another
162:58 - use effect here whenever you want use
163:01 - effect and for dependency don't pass
163:04 - anything for now and if the user query.
163:08 - data is defined I just want to Simply
163:11 - reset my form with the user query. data
163:15 - here and I use es to provide the
163:19 - dependencies for the use effect
163:20 - dependencies array now if I refresh my
163:23 - page and for example if I click on David
163:25 - you see that my form is perfectly
163:28 - populated with the David data fetched
163:30 - from the server if I click on Robert we
163:32 - see that the values are fetched from the
163:34 - server if I click for example on John
163:36 - you see that everything is working
163:38 - perfectly if I hit on reset you see that
163:41 - the David is now selected is now not
163:43 - selected and all of the fields are have
163:45 - been reset to their initial State and
163:48 - again if I click on Robert John and
163:51 - anything else you see that everything is
163:53 - working perfectly and now it's the time
163:57 - to make this new user button to work we
164:00 - just need to head over to the mutations.
164:03 - TS file and we are going to complete
164:06 - this use create user hook here that we
164:09 - were just creating it if you recall we
164:12 - provided the mutation function here and
164:15 - on success we were needed to provide the
164:19 - query key of our users list on our
164:21 - invalidate queries function here so if I
164:24 - head over to our queries here and if I
164:27 - go to the use users you see that the
164:29 - query key is users here as I simply pass
164:33 - the users here and whenever a new user
164:36 - is created the query with the users key
164:40 - which is corresponding to this query
164:42 - here will be invalidated and also this
164:45 - list is going to be refreshed from the
164:47 - server and for for the sake of this
164:49 - tutorial I'm simply put the put an alert
164:52 - for example call the user created like
164:55 - this now if I head over to the users.
164:58 - TSX file here I simply need to do
165:01 - something when the form is submitted to
165:03 - the server so on our form component here
165:07 - I simply on the unsubmit event I simply
165:10 - pass the handle submit here which is not
165:14 - defined as simply we can get it from our
165:16 - use form hook here like this it will do
165:20 - anything related to checking the form
165:23 - validations before submitting it
165:25 - prevents the page to reload and many
165:28 - other useful features and also whenever
165:31 - we submit our form it will pass the
165:35 - current data on our form to the function
165:38 - that we provide here in the handle
165:40 - Summit argument I simply need to pass a
165:43 - unsubmit function here which I will
165:45 - create it here cons onsubmit for the r
165:49 - arguments I'm going to use the submit
165:51 - Handler type on the react hook form and
165:54 - pass the SCH schema of my form as a
165:57 - generic here is equal to this function
166:01 - data data here I simply do something
166:05 - when the handle Summit function is
166:08 - called and now for example I want to do
166:11 - something depending on the situation if
166:14 - variant is equal to create or edit which
166:17 - the variant is not defined yet so for
166:20 - example here here I simply Define it
166:23 - here comes variant of my form we be
166:26 - going to be going to pass the control
166:29 - here and also get the variant from the
166:33 - form and also here for the onsubmit
166:36 - function if the variant is create then
166:39 - we know that we are creating a new user
166:42 - else we know that the variant is for
166:44 - example of type edit here but for the
166:48 - simplicity I simply pass the else class
166:50 - here because we know that by now the
166:53 - variant is of type edit so I can edit
166:56 - the user here sorry the user and if the
167:00 - variant is create I can create my user
167:04 - we defined our create user mutation
167:07 - earlier so I simply need to initialize
167:10 - it create user mutation we're going to
167:13 - be create use create user here and
167:17 - whenever we submit R4 with the variation
167:21 - of create I simply call the use user
167:24 - mutation do mutate like this and also I
167:28 - simply pass the data to my create user
167:32 - mutation here and we need to test
167:34 - whether it works or not so if I refresh
167:38 - my application for example put something
167:40 - here if you check it now you see that if
167:42 - I click on new user nothing works and
167:44 - the form won't be submitted it's only
167:46 - because of these handle submit function
167:48 - function will be which will which we get
167:51 - it from our use form here which is
167:54 - pretty useful in the react hook form I
167:56 - pass an email here fake State gender and
168:00 - if I click on new user you see that
168:02 - nothing is working what is the problem
168:04 - here the problem was because of the typo
168:07 - here the mutations. TS file here instead
168:10 - of Local H Local Host I provideed Local
168:13 - Host without L here and now if you test
168:16 - our application here let me just refresh
168:19 - the page you see that I created this
168:21 - user just now let me just revert it to
168:24 - the previous previous state and now is
168:26 - everything is reverted to its initial
168:28 - and if I for example put test here sorry
168:31 - I accidentally clicked on John here let
168:33 - me just refresh the page again test test
168:36 - at sign test.com for example for States
168:39 - I simply select all of them mail I going
168:42 - to take all of it where I must contain
168:44 - at most two elements because of my
168:45 - validation here and for this also and I
168:49 - simply click on the new user here and as
168:51 - we can see here the user has been
168:53 - created and also the user leas has been
168:57 - invalidated because of this line here so
169:01 - when we create our user and this
169:03 - mutation function on use create user
169:06 - Hook is done this unsuccess will run and
169:09 - will invalidate the user's query like
169:12 - this so if I create another user with
169:14 - the name of test two for example and
169:16 - click on test two if I okay on the alert
169:19 - here which is the success alert you see
169:21 - that test here for example I can switch
169:23 - between all of these data here which is
169:26 - perfect you have done something very
169:28 - amazing here it's working pretty amazing
169:31 - we can simply switch between the created
169:34 - users the form will be populated with
169:36 - the fetch data from this server and now
169:39 - the only thing that is remaining is that
169:41 - we need to somehow also edit the users
169:45 - from the list for example if I click on
169:47 - Robert and change your rubber to for
169:50 - example Max and click on for example an
169:53 - edit user button here the list the user
169:55 - will be updated on the server to
169:58 - implement the editing capabilities we
170:00 - just need to Simply go to the mutations
170:03 - script again because we're going to
170:05 - script something on the server we're
170:07 - going to create another hook called use
170:11 - edit sorry use edit user here like this
170:15 - return use mutation here for the
170:18 - mutation function just pass the async
170:22 - data which is of type El schema and
170:25 - simply pass the data to the put put
170:28 - method of ause on the end point of HTTP
170:32 - Local Host ad ad users and with the ID
170:37 - of data. ID which is not presented on
170:41 - our data but if you recall we have the
170:44 - ID on our form but because of this
170:47 - variant field that we just defined
170:49 - earlier we have don't access to this ID
170:52 - on the data object to work around this
170:55 - simply put the if data. variant is equal
170:59 - to edit like this and wrap this ev. A.P
171:03 - put here in our if statement here we see
171:06 - that the type of script error is gone
171:08 - which is perfect for now and for the
171:11 - data also we need to pass the data to
171:14 - update our user for better organization
171:17 - and maintainability
171:19 - instead of passing the object like this
171:21 - for example the server accepts ID which
171:24 - is going to be of type id data. id the
171:28 - name is going to be name do for example
171:30 - the name and also on some fields we need
171:33 - to map and convert the shapes of our
171:35 - form data into the server data and it's
171:38 - to TS to pass all of them here and it's
171:41 - not very readable for this scenarios
171:43 - just let me remove the data argument of
171:45 - axis here and inside the SRC folder in
171:50 - the users feature let me just close all
171:52 - of the things in the utils here just
171:55 - create a file called for example map
171:59 - datts which is responsible for
172:01 - converting the user form data into the
172:05 - accepting shape of our server or any
172:08 - other server it doesn't matter but this
172:11 - scenario is pretty common so from this
172:14 - file we simply export a function called
172:17 - map data
172:19 - which will get the data with the type of
172:21 - our form schema and this we going to
172:25 - return this type that we defined earlier
172:27 - API create edit type here if you recall
172:31 - it's going to be the shape accepted by
172:34 - the back end of our back end so we
172:36 - simply want this function to be
172:38 - responsible for both converting the form
172:41 - data on both create and edit variations
172:46 - which is pretty doable by using using
172:48 - the typ script capabilities so there is
172:52 - if you recall and if I open the API
172:55 - types file here if you recall that there
172:57 - was there were so many common fields
172:59 - between the create and edit variation of
173:03 - our form submitting in other scenarios
173:05 - it might be much different but in our
173:08 - situation just for learning purposes the
173:10 - only field that is not common between
173:14 - the creation and edit is this simple id.
173:17 - string ID field here but it's very
173:20 - important and if you recall we have
173:22 - exported this commment type from this
173:24 - file here so inside our map data
173:27 - function here I simply create a common
173:30 - constant common of the type common just
173:34 - let me just rename this common to for
173:37 - example API common for better
173:40 - readability of the code and now I simply
173:43 - map the data of my form to the API
173:47 - common shape I just copied and paste the
173:50 - common constant here for the speed of
173:53 - the tutorial and also I simply put a
173:56 - switch case a statement here data
173:59 - variant here and in the case that if
174:02 - data. variant is create I'm going to
174:05 - return the common constant itself and
174:09 - also the variant of data. variant and
174:13 - then on edit variant I simply return the
174:17 - common itself
174:18 - also the ID itself data. ID of my form
174:23 - and with the variant of data do variant
174:27 - here and perfect for now this is our
174:30 - mapper function which is pretty useful
174:33 - so if I head over to the application
174:35 - before we continue to finish the use
174:38 - user use edit user hook here I just go
174:41 - to the use create user that we just
174:44 - created before and I simply put the map
174:48 - dat data and pass the data to this
174:50 - function which is not be needed in this
174:53 - case but it might be needed in real word
174:56 - case scenarios and also if you recall
174:59 - that this mapper function will also
175:02 - return another extra variant field here
175:05 - we only needed this variant field for
175:09 - demonstration for better type safety and
175:12 - better maint maintainability of our code
175:15 - but when we are submitting the form to
175:18 - the the server we don't need that
175:20 - variant I think might cause many
175:22 - problems so we need to somehow remove
175:24 - the variant field from the this map data
175:28 - it's pretty simple I just need to get
175:30 - the Amit utility function from the low
175:32 - Dash let me just import like this omit
175:35 - from low Dash omit and like this I can
175:39 - simply put the object and also the field
175:43 - that I want to remove it from the object
175:45 - itself like this and I just need to also
175:48 - so copy this from here and paste it in
175:51 - the data argument of A.P put here and
175:55 - after that the user has been edited I
175:58 - simply alert the user that user edited
176:01 - successfully for example and on success
176:05 - here I simply put another asnc function
176:09 - these are all react query
176:11 - related the first argument of unsuccess
176:14 - method is the data returned on the
176:17 - mutation function and also the second
176:19 - one which for example I call it
176:21 - variables here is exactly the thing that
176:24 - we provided as an argument to our
176:26 - mutation function why do I need this for
176:29 - cach invalidation in react query when
176:31 - the user has been edited first of all I
176:33 - need to invalidate the yeast of users
176:35 - because the name of the user might have
176:38 - been changed and the user is edited so
176:41 - the users list also might be changed
176:45 - also so first of all I need to
176:47 - invalidate the users key so first I need
176:50 - to import the initialize the query
176:53 - client by query client like this query
176:56 - clients. invalidate queries the query
176:59 - key will be going to be users here why
177:02 - do I needed this variables because of
177:04 - this if variables. variant is equal to
177:08 - edit I'm going to invalidate query
177:11 - client. invalidate queries query key
177:15 - will be user and the ID will be
177:19 - variables. ID here uh where this come
177:23 - from if you head over to our queries
177:25 - here we see that for our user we simply
177:29 - pass the user as the head key and also
177:32 - the ID so whenever one of these changes
177:35 - the query key the query itself will be
177:37 - refreshed from the server so we need to
177:39 - somehow tell the query client that
177:42 - invalidate the list of users and also
177:45 - the single user that have been edited
177:47 - like this so perfect now we need to use
177:50 - this use edit user hook in our
177:53 - application so we need to head over to
177:54 - our users component here and instead of
177:58 - passing the new user for the submitting
178:01 - button form I make it conditionally so
178:03 - if the variant of my form is on create I
178:07 - simply return the new user like this
178:10 - else I know that the variant is on edit
178:13 - mode so I return the edit user here and
178:16 - just let me just make this button of the
178:19 - contain for you to see better and now if
178:22 - we head over to our application for
178:23 - example I click on Robert here and if I
178:27 - for example uncheck this and change a
178:29 - Robert for example to Max and if I hit
178:31 - on edit user we see that something is
178:35 - wrong with our application so let me
178:37 - just check it out the problem was that
178:39 - we forgot to implement the else Clause
178:43 - of our onsubmit function which is pretty
178:46 - simple we just need to initialize the
178:48 - edit user mutation like this use edit
178:52 - user from our mutations file and I
178:55 - simply use the mutate method on edit
178:58 - user mutation and I'm going to pass the
179:00 - data itself now if I refresh my
179:02 - application here and for example click
179:04 - on rubber change it to Max here and edit
179:07 - on click on edit in this situations that
179:09 - we see that our form is not working
179:12 - correctly we simply need to know why
179:15 - it's not submitting our data to the
179:17 - server because I know that when I click
179:19 - on edit user the edit user mutation must
179:23 - be called and when the user is created
179:26 - it must show me an alert but by now I
179:29 - know that even this function won't be
179:31 - run because this handle submit here does
179:34 - not allow the unsubmit function to be
179:37 - run why because there might be something
179:40 - wrong with the validation on my form but
179:43 - I don't maybe I don't see it on my form
179:46 - here because to solve that for example I
179:48 - need to parse the form value on the Zoda
179:52 - it's pretty simple yet very powerful in
179:54 - these situations so I simply create a
179:58 - test button here like I'm going to call
180:01 - it parse here unclick I simply pass the
180:05 - pass a function which is going to be a
180:08 - schema this is the schema that we just
180:11 - defined earlier esia esa. pars method on
180:14 - it with the current value of R4 get
180:18 - values which we are going to get this
180:20 - from also from our use for context here
180:24 - like this get values here now if I click
180:28 - on the parts button and open the browser
180:31 - console you see that the Z is throwing
180:34 - me this error that for the ID field we
180:37 - expected a string but received a number
180:41 - and if we head over to our backend
180:44 - server here we see that the ID of each
180:47 - user is save on the database on the fake
180:51 - database as a number but we defined the
180:54 - ID returning from the database as s
180:58 - string which is causing us this
181:00 - validation error which is one of the
181:02 - amazing features of Zod which will
181:05 - prevent these types of mistakes in our
181:07 - application so now that now that I Chang
181:10 - the string to number here we see that
181:13 - other files are throwing me the error if
181:15 - I head over to the queries we see that
181:17 - the ID this line has an error it says
181:20 - that the type number is not assignable
181:22 - to type a string so we must convert this
181:25 - right side of the equation to from
181:28 - number to a string we have another error
181:31 - here what is this so also we need to
181:34 - change the right side to a string also a
181:37 - string like
181:39 - this and also here just change the ID to
181:42 - a string also and remove this satisfies
181:45 - option here because we don't need it and
181:48 - now if I refresh my page if I click on
181:50 - Robert and finally if I change the
181:53 - Robert to Max and if I create click on
181:57 - edit here you see that the Robert has
181:59 - been changed to Max for example I can
182:02 - also change the email to Max and click
182:05 - on enter you see that the accessibility
182:08 - is correct also and everything is
182:10 - correct if the form is not valid and if
182:13 - I click on edit you see that we the for
182:15 - the field has been focused automattic Al
182:18 - so we need to solve the validation here
182:21 - for example I can remove these
182:23 - here and click on the edit user and if I
182:27 - refresh the page we see that the Max has
182:29 - been edited successfully I also check
182:32 - the salary for example the slider here
182:35 - we see that everything has been fored
182:37 - perfectly if I refresh again we see that
182:39 - the slider is on the previous state so
182:42 - this is the end of the tutorial itself
182:44 - we have learned almost anything related
182:46 - to react hook for and also it's
182:49 - combination with material UI library and
182:52 - also the validation library and you can
182:55 - use your knowledge now in the real world
182:58 - applications because you know all the
183:00 - basic and advanced things related to
183:04 - this face famous stack for managing the
183:07 - forms in client side front end
183:10 - applications if you enjoy don't forget
183:12 - to like And subscribe and leave a
183:14 - comment below if you have any question
183:16 - related to this tutorial here