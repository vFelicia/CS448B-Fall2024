00:01 - no not another javascript framework
00:03 - please don't we have enough of those
00:06 - but what if i told you that this isn't
00:08 - actually a framework it's a compiler
00:11 - mind blow
00:13 - all right hello class and welcome to
00:15 - this video where we learn about what's
00:17 - felt is and then use it to create an app
00:20 - that implements full credit
00:21 - functionality by using an api that i
00:23 - created a while ago for a video to which
00:26 - a link is in the description and the
00:28 - link for that api as well will be in the
00:30 - description more on that later so what
00:33 - is felt and what makes it different to
00:35 - the other ones so like angular react and
00:37 - view svelte is a ui framework for
00:40 - creating component based single page
00:41 - applications the catch is that svelt
00:44 - takes a different approach in that it
00:46 - doesn't have framework code that's
00:49 - actually
00:49 - bundled with your application it
00:52 - actually goes over your code in build
00:54 - time and then compiles all of your code
00:56 - into instructions in written in purely
00:59 - javascript leading to a very lean bundle
01:02 - size because later your bundle wouldn't
01:04 - have any code that's relevant to svelte
01:06 - itself it's just your own code that you
01:09 - have and svelte as well takes a reactive
01:12 - approach when re-rendering your uh dom
01:14 - and it doesn't have a virtual dom so it
01:16 - doesn't work by com
01:19 - rather comparing a virtual dom to an
01:22 - actual dom and then seeing the
01:23 - difference and then re-rendering the
01:25 - difference instead it watches over a
01:27 - couple of variables that you define and
01:29 - then whenever any of those change it
01:31 - actually re-renders the dom
01:34 - so they take great pride in that it
01:36 - takes less code
01:38 - doing the same thing you could do the
01:40 - same thing in react and do it in felt
01:42 - and you will
01:43 - be less code when you write it ins felt
01:45 - you can actually go here to learn more
01:46 - and write less code and you will see a
01:48 - couple of examples they show that for
01:50 - example this is
01:52 - with these two fields and calculating
01:53 - the sum between them this is what it
01:55 - would look like if you would write it in
01:56 - react uh using hooks and then this is
01:59 - what it would look like if you write it
02:01 - in svelte and uh i've i've played the
02:04 - round with svelte and it's actually
02:06 - pretty cool how how less code you get to
02:08 - write and even like the template syntax
02:10 - itself is very minimal and it's got some
02:12 - really cool features now this doesn't
02:14 - mean it's gonna replace react or
02:16 - anything uh react still has a lot of
02:19 - like improvements during the runtime and
02:21 - some other cool features that are in the
02:23 - bundle itself uh so yeah i guess it's up
02:26 - to your preference now if you are saying
02:29 - now i want to learn more about uh svelte
02:32 - you can go to svel.dev
02:34 - rather and learn more about it and if
02:36 - you want to like understand like this
02:38 - the idea behind it and the philosophy
02:40 - behind it i highly recommend this talk
02:42 - by rich harris the guy that made the
02:45 - framework himself uh this talk is called
02:47 - rethink and reactivity i'll put a link
02:49 - to this as well in the description it's
02:51 - a really cool talk that kind of explains
02:53 - why it's felt was made all right so this
02:56 - is the application that we're going to
02:57 - build
02:58 - in this video
02:59 - so it's got these posts it's pulling
03:02 - them from the api so it's fetching these
03:04 - posts and showing them here and we can
03:06 - add some more new posts so we can click
03:08 - add here using that form and we'll
03:10 - actually submit it to to a server and
03:12 - fetch the um the response back and if we
03:15 - reload it's still there because of the
03:16 - way the api works we can as well edit
03:19 - these like just type some other
03:20 - gibberish here and click update and it
03:22 - will be edited and we can delete these
03:25 - posts
03:26 - we can limit the number of posts and we
03:28 - have the snapbar right here and we have
03:30 - like two pages that we can navigate
03:32 - between just to show you like how to do
03:34 - a routing in svelte so the idea behind
03:36 - uh this app is that you get to learn
03:38 - some of the core things that you would
03:40 - do in a in most front-end applications
03:43 - like handling forms uh consuming a full
03:46 - credit api and routing as well so let's
03:49 - actually jump into the code
03:51 - all right so on the is felt main page
03:54 - let's go down and get this mpx command
03:56 - from here let's copy this
03:58 - and i'll go to my desktop and open up a
04:00 - terminal window and paste this command
04:04 - and we don't have to name it my spell
04:06 - project we can name it anything i'll
04:07 - just name it felt for now
04:09 - and hit enter and then now we need to
04:11 - see the internet also i'll say cds felt
04:14 - and here we need to run npm install
04:15 - because it hasn't installed the
04:17 - dependencies yet and i'll open it using
04:19 - vs code and let it install
04:22 - so if we look at the package.json we
04:24 - notice that we have a couple of scripts
04:26 - and we're going to use the dev script to
04:28 - build and run the app on a
04:31 - development server and if you notice
04:33 - here there isn't any dependencies it's
04:34 - just dev dependencies because it doesn't
04:36 - need any dependencies in production it
04:38 - only needs them in build time to compile
04:40 - the app so here i think it's done
04:43 - installing
04:45 - it has let's run mpm run dev and see
04:48 - what our application looks like
04:50 - all right it started already so let's go
04:53 - to port 5000
04:55 - yeah
04:56 - and there we go we just get a purple
04:58 - hello world so let's look at our app so
05:01 - we go to the source folder and we have
05:03 - this main js that instantiates the new
05:05 - uh sfelt app and passes some props to
05:08 - the apps felt just to show you how props
05:10 - work they did that and here we get the
05:12 - prop and here we put the prop inside the
05:15 - markup saying hello name if you notice
05:17 - we if you change this name to hello
05:20 - youtube
05:21 - or just youtube it will now say hello
05:23 - youtube all right so let's get rid of
05:26 - these props because we're not going to
05:28 - use them
05:29 - and let's get rid of this export let
05:31 - name and this style as well and by the
05:33 - way ins felt um if you've worked with
05:36 - vue you're familiar with this um with
05:38 - this uh kind of syntax you have a script
05:41 - tag where you put your logic you have a
05:42 - style tag where you put your styling and
05:44 - you have your markup the only difference
05:46 - here you don't have a template tag you
05:48 - just put your markup down here and the
05:51 - cool thing is if you're um using
05:52 - prettier and by the way uh i recommend
05:55 - you get the svelt where is it
05:57 - right here the svelt vs code extension
06:00 - to have syntax highlighting inside of
06:02 - your app or i mean inside of your dots
06:05 - felt files all right let me close that
06:07 - close this now before we write any
06:09 - markup i want to grab a materialized css
06:12 - which is a cool css
06:15 - implementation of google material
06:17 - material design standards let's go to
06:19 - get started and here it tells us to
06:21 - install materialize css at next so let's
06:24 - do that so here i'll stop the
06:26 - development server and say npm install
06:29 - materialize
06:32 - css at next like
06:35 - [Music]
06:37 - this
06:38 - okay now we need to link the css uh we
06:40 - could link it here we will but by
06:43 - default the build tool for the bundling
06:46 - tool for svelte is roll up instead of
06:49 - webpack and it comes with very minimal
06:51 - uh setup so we need to actually install
06:53 - a
06:54 - plugin for this for it to actually
06:56 - recognize css files inside of the sveld
06:58 - files and bundle them into a css file in
07:01 - production so here i'm going to install
07:02 - the roller plug-in so here i'll say npm
07:05 - install
07:07 - rollup
07:08 - plug-in
07:10 - css
07:12 - only and say dash capital d for it to be
07:16 - a dev dependency
07:18 - all right now in the rollup config i'm
07:20 - going to add this import let's import
07:22 - that plugin so let's say import css from
07:26 - rollup
07:28 - plugin css only
07:30 - and then here underneath this svelt uh
07:33 - call we're gonna say css we call that uh
07:37 - namespace that we imported that function
07:39 - and here for the options we just pass
07:42 - output
07:43 - and here we will pass a css file that
07:46 - would be all the bundled css that we
07:49 - passed to our app so here i'll say
07:51 - public slash
07:53 - extra
07:54 - dot css
07:55 - so what this plugin now will do it will
07:58 - find any css that we inject into sveld
08:00 - files and unbundle all of it into this
08:03 - extra.css file and it will be in the
08:05 - public right here so we need to link it
08:07 - in our index html so here let's uh link
08:10 - it before our actual css so here we'll
08:13 - say link
08:15 - and we say the href will be extra
08:17 - dot css even though it doesn't exist yet
08:19 - but it will
08:20 - let's change the title here so it says
08:22 - felt tutorial
08:25 - and let's save this
08:26 - and let's go back to our apps felt now
08:28 - we can actually import css into this
08:31 - spelled file so here we'll say import
08:33 - now that we have
08:34 - materialized installed we can say import
08:37 - we go back one level to node modules
08:41 - oops
08:42 - node modules
08:44 - slash materialize
08:47 - css slash dist
08:50 - slash css slash materialize
08:54 - css dot
08:56 - min
08:57 - actually materialize
09:00 - dot min dot css like this and we can
09:03 - just copy this to get the the javascript
09:06 - and here we'll say slash js and here
09:08 - will be dot min dot js like this
09:11 - now let's let's save everything
09:14 - and let's run our app again let's say
09:15 - npm run dev
09:18 - and now we see that it created this
09:20 - extra css and it's got materialized
09:22 - stuff as you see here and it's actually
09:24 - linked materialize and if we would look
09:26 - at our app where is it
09:28 - right here if we reload we get that it's
09:32 - the header is now styled with
09:33 - materialized
09:35 - css header 1 styling cool so we have
09:38 - materialized linked
09:40 - i want to start by
09:41 - putting a navbar at the top of the page
09:43 - to link to different pages now of course
09:45 - the about page is empty i'm just using
09:47 - it to show you how to do routing in
09:48 - svelt so we're going to use this as felt
09:51 - routing library because by default the
09:53 - routing library doesn't come with felt
09:55 - so this is how to use it we need to run
09:58 - this command right here so let's copy
10:00 - that
10:01 - and let's open up a new window terminal
10:03 - window and paste that
10:05 - command
10:06 - so if we look at the library here it
10:09 - tells us how to use it it tells us to
10:11 - import these things from routing so we
10:13 - can
10:15 - we can copy this and let's go to our app
10:18 - uh app.felt we can close these we don't
10:21 - need them anymore
10:23 - so here we will import
10:25 - these um router and link and route from
10:27 - svelt routing
10:29 - and now we can set up our router here so
10:31 - here we'll say
10:33 - router
10:35 - and then here we will start to put our
10:37 - routes but the way i want to do it i
10:39 - want to put them in a nav but i don't
10:40 - want to put them right here i want to
10:41 - put the navbar in its own component so
10:43 - let's go to actually close that let's go
10:45 - to materialize css go to components and
10:50 - right here navbar let's grab this nav
10:53 - tag
10:54 - and let's go back copy that and let's
10:56 - click uh here let's create rather a new
10:59 - component and i'm going to put this in a
11:00 - folder called layout so i'll say layout
11:02 - slash navbar
11:04 - dot svelt
11:07 - and here we'll just paste that
11:09 - let's change logo to
11:11 - say spelled
11:13 - tutorial
11:14 - and
11:16 - let's change these let's just have two
11:18 - pages so one would be the home page and
11:21 - one would be the about page and we need
11:23 - to create these components as well
11:25 - and now these shouldn't be a tags they
11:28 - need to be links for our spell router to
11:31 - work so here we'll change this anchor
11:33 - tag to link like this
11:37 - link
11:38 - of course we need to import it so here
11:40 - we need to put our script tag
11:42 - and here we will say
11:44 - import
11:45 - link
11:46 - from
11:48 - svelte
11:50 - dash routing like this now we can use
11:53 - that so we can change as well the the
11:55 - brand to link like this
11:58 - we need to add a to attribute instead of
12:01 - href and this is the home so we'll say
12:04 - to slash and now we have this home link
12:06 - here as well so we'll say to slash like
12:09 - this and we will change this to a link
12:12 - and this is the about page so we'll say
12:14 - two
12:15 - slash about
12:17 - and change this here to a
12:19 - link as well
12:21 - now let's go back to our app
12:23 - here we need to put our navbar so we
12:26 - need to import it so let's go here and
12:28 - say import
12:29 - navbar
12:31 - from
12:33 - and on the same level we go to the
12:34 - layout folder and we get this nav bar
12:37 - and here of course we have to add svelte
12:39 - because um it's not a javascript file
12:42 - we need to explicitly say what the
12:44 - extension is now that we have navbar we
12:46 - can actually use it in our markup so
12:48 - let's put it inside the router so let's
12:50 - say like this nav navbar oops apparently
12:52 - i didn't copy that so i can just say now
12:54 - bar like this
12:56 - and underneath here i want to put a
12:58 - container to push everything into the
13:00 - middle this is by the way just
13:01 - materialize stuff and here we need to
13:03 - put our routes and if we would look at
13:06 - the
13:07 - page for the package
13:08 - our routes are like this
13:10 - and by the way you can ignore this url
13:13 - uh thing this is only if you're using
13:14 - server side rendering so don't worry
13:16 - about that and let's copy one of these
13:19 - routes let's copy the second one
13:20 - actually
13:21 - and let's go back here we need to put
13:24 - routes so let's put the home route the
13:26 - path will be just slash and the
13:28 - component will be home
13:30 - and by the way you can use the syntax
13:32 - but you can as well emit these um
13:35 - quotation marks they're not important
13:37 - so they're not necessary so let's put
13:39 - another one here and say slash about and
13:41 - this will be to the about component
13:43 - let's create these two pages i'll create
13:46 - another folder call it pages
13:48 - this is what a convention that i like to
13:50 - separate pages from components
13:53 - this is not a svelte com
13:55 - convention so here i'll say home that's
13:57 - felt
13:58 - and i'll create another one as well call
14:01 - it about dot svelt
14:04 - and in the about i'm just going to put a
14:05 - header one saying about page just to
14:07 - differentiate between them and here for
14:10 - now let's put a home page and we'll come
14:12 - back to it of course and populate it
14:14 - more
14:15 - and
14:16 - here we don't need links so we can
14:17 - remove it because the links are in the
14:19 - nav bar and we need to import these two
14:21 - components so here let's say import
14:24 - home from
14:26 - same level pages slash home home.felt
14:32 - and then we can copy that
14:34 - paste it one more time select home and
14:36 - ctrl d and say about all right let's
14:39 - save all files and
14:41 - let's look at our terminal everything is
14:43 - running fine if we look at our app right
14:46 - where is it right here for reload cool
14:48 - we get this now bar
14:50 - and uh it's linking between the pages
14:52 - but it looks kind of weird
14:54 - let's look at our app
14:56 - i think it's got to do with the uh the
14:58 - global styles
15:00 - yeah there are some global styles here
15:01 - i'm just going to delete all of them
15:03 - and let's look back to our app because
15:05 - we're going to use the materialized
15:06 - styling all right let's put a container
15:08 - actually to push these buttons in and
15:10 - for some reason this brand isn't
15:13 - the font size is tiny on that so
15:16 - actually let me check that
15:18 - to inspect
15:20 - it's actually not applying the class to
15:22 - it so
15:24 - and let's go back here to the navbar
15:28 - the brand logo class is not being
15:29 - applied so what we can do we can just
15:31 - wrap this as full tutorial with a span
15:34 - with this class so we'll give that class
15:36 - brand logo and then take that
15:38 - put it inside of here
15:40 - and then wrap everything here so let's
15:42 - cut everything inside of this
15:44 - nav wrapper and put a dot container tab
15:48 - and then paste back those links and
15:50 - let's save
15:52 - and there we go now the the the navbar
15:54 - logo class is applied so the text is
15:56 - bigger there and the links are pushed in
15:58 - inside so the routing is working now we
16:01 - can start to work on the content on the
16:02 - home page let's start to uh hit our api
16:06 - and fetch the posts and show them here
16:07 - so let's go to our app let's go to the
16:10 - home.feld file and we can close this
16:13 - close the global css and app
16:16 - and everything else
16:18 - and here i'll put a row and inside of
16:20 - here we want to show our posts but of
16:22 - course we need to hit the api first and
16:24 - fetch these posts so here i'll open the
16:26 - script tag let me close this terminal
16:29 - here inside the script tag what we want
16:31 - to do we want to fetch these posts when
16:34 - the component loads or mounts so we need
16:36 - to import this lifecycle method called
16:38 - on mount so let's say import
16:41 - on mount this is in the documentation of
16:43 - course
16:44 - from svelt
16:47 - and here let's
16:49 - let's bring our api base url so here
16:52 - i'll say const api base url because
16:55 - we'll need this to call the api this is
16:57 - in the description um in the video
16:59 - description and here let's initialize
17:02 - our posts
17:03 - object as an empty array at the
17:06 - beginning so now let's call this on
17:08 - mount method and say on mount and this
17:11 - takes a callback that happens when the
17:13 - component is mounted and this is going
17:16 - to reach for for
17:18 - this is going to hit the api so i'm
17:19 - going to make it an async callback so
17:21 - here i'll say
17:22 - async oops
17:24 - and here it's going to be an arrow
17:25 - function
17:27 - and inside of here i'll say const result
17:29 - or rest equals
17:30 - a weight await
17:32 - fetch i'm going to use fetch api
17:35 - and i'm going to give it the api base
17:37 - url
17:39 - plus slash
17:40 - posts like this this is the route that
17:43 - gives us all the posts and here we'll
17:45 - say posts our so this variable right
17:47 - here equals um a weight
17:53 - a weight
17:54 - res dot
17:55 - oops
17:56 - dot json like this so the way fetch
17:59 - works is that you need to as well return
18:02 - response.json and this returns a promise
18:05 - with the data that's got from that uh
18:08 - request and now when we assign a value
18:10 - to post our component will actually
18:12 - re-render now let's use these posts to
18:15 - display them on the template here i want
18:17 - to loop through these posts so first i
18:20 - want to do a conditional because if
18:22 - we're still fetching the post i want to
18:23 - show um loading posts so here we'll open
18:26 - curly braces and do hash if
18:30 - and this is felt
18:31 - template syntax and we'll say posts dot
18:34 - length
18:36 - equals
18:37 - zero so if the length of post equals
18:39 - zero that means we haven't got post yet
18:41 - so i'll do a header three and say
18:43 - loading posts dot dot dot so you can put
18:47 - a spinner here if you want and here
18:49 - we'll say
18:50 - colon else so else if we have any posts
18:53 - if it's not zero the length we want to
18:56 - loop through them so we'll open another
18:58 - javascript expression and say hash each
19:02 - or just an expression and say posts as
19:04 - post like this
19:06 - the this is kind of similar to php if
19:08 - you've worked with it this syntax post
19:10 - as post so here we'll say
19:12 - div dot call
19:15 - dot
19:16 - s6 this is materialized stuff i want
19:18 - each post to take half the width of the
19:21 - um the viewport of or like the width of
19:23 - the container and here i'm going to put
19:25 - a card so dot card
19:28 - and inside the card uh we need card
19:31 - content
19:33 - so dot card content
19:35 - and inside that div i'm going to start
19:38 - with the title so that will say
19:40 - paragraph p dot card
19:42 - title and inside of here we'll do curly
19:44 - braces to put
19:46 - dynamic values and now that we have
19:48 - access to this post we can use what
19:50 - comes inside of the post by the way you
19:52 - can um call credit this api on postman
19:55 - or something and you'll find that posts
19:57 - have a body a created ad a user id and
20:01 - and a title so here we'll need to say
20:03 - the title because this is the card title
20:05 - so we'll say post dot title like this
20:09 - i want to show as well the created ad so
20:11 - here we'll say p
20:13 - and i'll say
20:15 - curly brace post dot created
20:18 - at like this and let's put the body of
20:21 - the post so here paragraph another one
20:23 - and say post dot body like this
20:27 - here we need to close the each tag so
20:29 - here we'll say we open curly braces and
20:31 - we say slash each and this will close
20:34 - that tag and here we need to close as
20:36 - well this if uh statement so he'll he
20:38 - will say curly brace slash if like this
20:41 - all right let's save this and see what
20:43 - this looks like let's go to our app and
20:45 - there we go we're getting three posts
20:47 - which are all the posts are in the
20:49 - database right now if we reload we'll
20:51 - see loading posts for like a brief
20:52 - second before the actual posts load
20:55 - all right so let's add the two buttons
20:58 - for editing and deleting and i want to
21:00 - style this a bit to make it look better
21:02 - than that all right let's go back
21:04 - so underneath this div this card content
21:06 - div i'm going to add dot card
21:09 - action
21:10 - and here we'll have two links so one
21:12 - anchor tag with doesn't go anywhere and
21:16 - this is going to be the edit post so
21:17 - here we'll say edit
21:19 - and i'm just going to copy this and add
21:22 - another one which is going to be delete
21:24 - and i'll give this a class to later
21:26 - style it so i'll give it a class of
21:28 - delete
21:31 - btn
21:32 - let's save let's see what these look
21:34 - like all right they look okay
21:36 - and i want to style this the delete
21:38 - button so here let's open up a style tag
21:41 - and
21:42 - by the way these styles are scoped to
21:44 - these components so any style i write
21:46 - here will not go to any other component
21:48 - even if the component is inside of here
21:51 - so here we'll
21:53 - style the um the delete button so i'll
21:55 - say dot
21:57 - delete
21:59 - btn i just want to give it like a
22:02 - a color of
22:04 - red
22:05 - and i'm going to give this
22:08 - important
22:09 - for it to apply
22:11 - and i want to style the cards title so
22:13 - i'll say dot card dot card
22:15 - content
22:17 - dot card
22:19 - title to target that and i just want to
22:22 - there's this
22:24 - syntax completion is a bit weird with
22:26 - this uh
22:27 - extension right now but i guess that
22:29 - will be fixed in the near future because
22:31 - this is fairly new so here we'll say uh
22:33 - margin bottom i want to give it a margin
22:35 - bottom with zero
22:37 - and i want to style as well the uh
22:39 - this date the creator that so i'm gonna
22:41 - give it a class where is this right here
22:43 - and give it a class of time stamp
22:47 - and here we'll say
22:49 - so we can just copy this
22:52 - instead of card title this will be p
22:54 - dot uh time
22:56 - stamp
22:58 - and i'll just oops i'll just give this a
23:01 - color
23:02 - of like a gray like hash 999 and i'll
23:07 - give it some margin bottom so it
23:08 - separates itself from the body so margin
23:11 - bottom of 10
23:13 - pixels all right let's see what this
23:15 - looks like all right it looks better so
23:18 - let's go back now we can make these into
23:20 - a component by itself but we're going to
23:23 - make some other components so i'll show
23:25 - you how to make components anyways
23:27 - here let's give these two buttons a call
23:29 - back like
23:30 - like a function that will be triggered
23:32 - when they're clicked and for this we're
23:33 - going to use the on directive so here
23:36 - we'll say on colon and now we give the
23:38 - type of the event so here we're going to
23:40 - give the event click and then say equal
23:42 - and open an expression and here we can
23:44 - pass
23:46 - a function that will be triggered once
23:48 - this button is clicked so here i'll pass
23:49 - a callback because otherwise it will uh
23:52 - trigger it right when the
23:54 - the component is rendered and here i'll
23:56 - say edit post and pass it this post
24:00 - and here as well we're going to give a
24:02 - delete another event so here i'll say on
24:05 - colon click
24:07 - equals and here i'll give a callback to
24:11 - delete
24:13 - post and i'm going to pass the post id
24:17 - and we're going to implement these later
24:19 - but for now i'm just going to have them
24:20 - print something to the console okay
24:22 - there's a mistake here all right like
24:24 - this
24:25 - let's go up here in the script tag let's
24:27 - create these two functions so here we'll
24:29 - have edit oops
24:30 - edit post we'll take a post
24:34 - and for now it's just going to
24:35 - console.log it so we'll just console.log
24:37 - post like this
24:38 - actually i need to
24:40 - use the keyword function let's create
24:42 - the uh the delete post as well so
24:44 - function delete post will take an id and
24:47 - for now i'm just going to say
24:50 - deleting
24:52 - post with id
24:54 - and just concatenate that id
24:56 - let's save let's see if these are
24:58 - running properly so let's open the
25:01 - developer tools the console
25:03 - and i'm going to put this side by side
25:05 - and here if i press edit on this
25:08 - actually it doesn't do anything
25:10 - let's go back
25:11 - okay i made a mistake here let's save
25:14 - that
25:15 - let's go back to our app refresh
25:18 - and here if i click edit there we go
25:20 - it's printing that post that we clicked
25:22 - on edit and if i click delete it says
25:24 - deleting post with id something
25:26 - something which is the idea of this post
25:28 - all right cool so let's go back to our
25:30 - app
25:31 - let's uh create the form that we will
25:33 - use to submit a post to the server so on
25:35 - top of the uh this row i'm gonna add
25:37 - another row at the top here and say dot
25:39 - row and here i'm to have it take half
25:42 - the width so i'll say
25:43 - call dot s6 tab
25:46 - and inside of here don't worry about
25:48 - that prettier formatter
25:50 - i'm going to put the form but i'm not
25:52 - going to put the whole form here i'm
25:53 - going to just put the component and make
25:55 - it into into its own component so here
25:56 - i'll say post
25:58 - form
25:59 - and then
26:00 - just leave it like this
26:02 - and let's
26:03 - import that and then create it so here
26:05 - i'll say import post form from i'm going
26:09 - to create a folder called components
26:12 - and actually here we're inside pages so
26:13 - we have to go back one level and then
26:15 - say component
26:17 - slash post form
26:19 - dot svelt
26:21 - like this and here let's create this uh
26:24 - folder components
26:26 - and inside of components i'm going to
26:28 - create the post form dot svelt
26:33 - so here we'll write our form we'll say
26:35 - oops we'll say form
26:38 - i don't know why form doesn't work i'll
26:40 - just say form like this
26:41 - and this will have an uh submit event so
26:44 - we'll say on and the uh the event will
26:47 - be submit
26:48 - submit oops mint equals and we will call
26:52 - a function that will call on submit like
26:55 - this
26:56 - and let's close this form and inside the
26:59 - form we'll have
27:00 - a div with the class input field and
27:02 - this is
27:04 - materialized stuff just to style it with
27:06 - materialize here we'll have two fields
27:08 - one field for the title and one for the
27:10 - body so here we'll put a label for a
27:13 - title
27:14 - and it will say title like this and here
27:16 - we'll put the input for that title of
27:18 - type text and
27:21 - this here what we need to do is we need
27:24 - to bind the value of this input
27:26 - with a value in our component with a
27:28 - variable so
27:30 - svelt has two-way binding meaning that
27:33 - we can use the directive called bind and
27:36 - then give say colon value equals now we
27:39 - want to give
27:40 - the name of the value that we're going
27:42 - to use which we'll call title which we
27:44 - haven't created yet but we will
27:46 - so now whenever title
27:49 - this input changes it will change title
27:51 - in our component and if title as well
27:53 - changes the value of the input will
27:55 - change this is what two-way binding
27:57 - means so let's copy this entire input
28:00 - field and paste it here and here we'll
28:02 - change this is the
28:03 - label for body and this will say body
28:06 - and this variable here as well will be
28:08 - called body
28:10 - let's add a submit button so say button
28:14 - type submit so call and submit and click
28:17 - tab and we'll give it some classes to
28:19 - style it with materialized css styling
28:22 - we'll say waves effect
28:25 - waves
28:26 - light and btn as well and this button
28:29 - will say add because it adds a post and
28:32 - here let's open a script tag
28:34 - and i don't know if it's the felt
28:36 - extension or if it's prettier
28:38 - it's probably this felt extension but
28:40 - you can put the script tag underneath
28:42 - the the the markup and if you save the
28:44 - script tag will go up to the top which
28:46 - is pretty cool and the same thing with
28:48 - style because
28:50 - logically styles should be before
28:52 - before the html because that's how
28:54 - cascading style sheets work and if i
28:56 - save the style tag will go up
28:59 - above the template which is pretty cool
29:01 - all right so let's go to the script so
29:03 - here we'll declare these two variables
29:05 - the title and the body so we'll say let
29:09 - title equals
29:11 - an empty string
29:12 - and let body
29:14 - equals an empty string all right now we
29:16 - don't have any red squiggly lines but we
29:18 - have this green squiggly line telling us
29:19 - that it's not the on submit is not
29:21 - defined so let's fix that
29:23 - here we'll say function
29:25 - on submit
29:27 - and we'll say
29:29 - it takes an event and of course first
29:31 - thing we do we say event dot prevent
29:34 - default
29:35 - like this
29:37 - i don't know why i added that underscore
29:39 - prevent default like that
29:42 - and here i'll do like a very basic uh
29:44 - validation and say if
29:46 - title
29:47 - dot trim equals i don't know why it's
29:50 - replacing these functions
29:52 - equals an empty string
29:54 - or
29:55 - body
29:56 - dot trim
29:59 - i don't know why it's changing this trim
30:00 - is a
30:01 - javascript function this is a bit weird
30:03 - but let's bear with it
30:05 - if if any of these two is an empty
30:07 - string then we just return because we
30:09 - don't want to submit this because this
30:10 - is invalid data uh you can of course
30:13 - show some validation errors but uh
30:14 - that's kind of javascript i want to
30:16 - focus on svelt more for this tutorial so
30:18 - if not we have these fields then let's
30:20 - form this post and send it to our server
30:22 - so here we'll say const new post
30:25 - is a an object which will have a title
30:27 - of the value of title so we can just say
30:29 - title like this and body like this
30:32 - now let's bring our
30:34 - base url from here let's copy this
30:37 - and put it right here
30:39 - and now we need to send a request a post
30:42 - request to our database to persist this
30:43 - post so we'll say
30:46 - actually we'll use async await so here
30:48 - we can make this an async function we
30:50 - add the async keyword and here we'll say
30:53 - const
30:55 - response equals
30:57 - await
30:58 - fetch
31:00 - and we do backticks and here we'll say
31:03 - dollar sign curly brace api
31:06 - base
31:06 - url
31:08 - and we concatenate slash post because
31:11 - this is the router that we post to
31:14 - here we'll say comma and we pass some
31:16 - options
31:17 - including the method so the method will
31:19 - be a post so method post like this
31:22 - and the body of the request will be
31:25 - json.stringify
31:27 - or actually string of stringify like
31:30 - this stringify and we pass it the new
31:33 - post that we just created so now when we
31:36 - get that data now we need to get the
31:38 - post from that data so we'll say
31:40 - const post equals
31:43 - await
31:45 - res.json oops i don't know why it's
31:48 - changing this variable is a bit annoying
31:51 - it's very strange
31:53 - okay let's save all files
31:55 - and let's look at our app
31:58 - and we broke it
32:00 - onsubmit is not defined okay
32:03 - okay because he this is a capital s
32:07 - i want to submit like this
32:09 - all right so we get our form
32:11 - and if we type anything here so let's
32:13 - say post from svelt
32:16 - if we leave this empty it shouldn't
32:18 - submit anything and it doesn't and if we
32:20 - type some gibberish here we click add
32:23 - i think it does send a request if we
32:25 - look at network post
32:27 - all right so it sends a request and the
32:28 - status code is 201 so it's been created
32:31 - of course we're not adding any codes to
32:33 - show it here but if we refresh we see
32:35 - that that post has indeed been posted uh
32:38 - i want to do something here i want to
32:40 - have a loading boolean and when we send
32:42 - a post it will actually show us a
32:43 - spinner bar that
32:45 - that indicates that we're actually
32:46 - communicating to a backend so here i'll
32:49 - create another variable call it loading
32:51 - so let loading equals initially it will
32:53 - be false
32:54 - and here when we submit the form if it's
32:57 - valid then first thing we want to do we
32:59 - want to set the loading to true so we'll
33:01 - say loading equals true
33:03 - this is as simple as that just the fact
33:05 - that we change this variable
33:07 - and this variable is used in the markup
33:10 - just the fact that we reassign it to a
33:11 - different value it's actually going to
33:13 - re-render our
33:15 - our markup so we set the loading to true
33:17 - and then we communicate to our server
33:19 - and once everything is done we set the
33:21 - loading back to false so we say loading
33:24 - equals false false like this
33:28 - now in our markup we let's cut this form
33:31 - and here let's do curly braces
33:34 - hash
33:35 - if
33:36 - and we'll say if not loading then we
33:39 - want to show this form
33:41 - and then here let's say else so colon
33:43 - else
33:44 - and here else if we're loading let's do
33:47 - dot
33:48 - progress
33:50 - and this is materialize
33:52 - css stuff and here we'll say dot in
33:55 - determinate
33:57 - and this will give us like um an
33:58 - indeterminate
34:01 - uh loading bar
34:03 - or progress bar so here we'll
34:05 - finish close that if statement we'll say
34:07 - slash if like this and let's save let's
34:10 - go back to our app
34:12 - now if we put some stuff here and we hit
34:15 - add there we go we see that loading bar
34:17 - for a second and then it goes away once
34:19 - the loading stops
34:20 - uh let's actually make that loading bar
34:22 - go a bit in the middle and give this
34:24 - some padding so that it looks a bit
34:26 - better so let's go back here and what's
34:28 - cool about this felt is that we don't
34:30 - have to give this a class and style it
34:32 - just because this is in just in this
34:33 - component we can just say form and then
34:36 - style uh style this form and none of the
34:39 - other forms in any other page will get
34:41 - the style because this is scoped this
34:42 - component so here i'm just going to give
34:44 - it some margin on all sides of 50 pixels
34:48 - and here we'll say i want to start the
34:50 - progress bar so i'll say progress and
34:52 - i'll give this a margin top and bottom
34:54 - of a hundred pixels and left and right
34:57 - of zero so let's save this
35:00 - let's look at our app so all right cool
35:02 - the form looks much better now and if we
35:04 - submit something else
35:06 - that bar is in the middle here all right
35:10 - let's work on actually adding this post
35:12 - to our uh post list now if
35:15 - by the way of course i'm getting all of
35:16 - this from the documentation uh svelt has
35:18 - some really cool documentation we go to
35:20 - examples you can even fiddle with the
35:22 - code and change uh the examples and how
35:24 - they work and there's this thing right
35:26 - here called event forwarding which is
35:28 - what we're going to use to communicate
35:30 - between the inner and the outer
35:32 - components that we have so if you see
35:34 - here it actually dispatches an event
35:36 - from inside of a component that's nested
35:38 - inside this component and then based on
35:40 - that event the outer
35:42 - component will perform some action so
35:45 - let's copy this import from here this
35:47 - create event dispatcher
35:49 - let's copy that actually let's copy both
35:51 - of these because we need that let's go
35:53 - here
35:54 - let's paste this at the top
35:57 - and
35:59 - yeah i can keep that there and then
36:01 - after we get the post we want to
36:03 - dispatch this event so let's dispatch
36:06 - an event
36:08 - and we just say dispatch like this and
36:11 - let's call this event post created
36:14 - and we can pass a payload so the payload
36:16 - will actually be this post now we can
36:19 - listen to this event on any other
36:21 - component and then catch that and then
36:23 - get this payload and do whatever we want
36:25 - with it so where we want it we want it
36:27 - in the home page so here in the home
36:29 - page i'm going to go down here where we
36:31 - uh add our form and i'm going to listen
36:33 - to that event so i'll say on and here
36:35 - put the name of our custom event and say
36:37 - post created so on this event we're
36:40 - going to call a function i'm going to
36:42 - call this add post simple as that let's
36:45 - go up here and create this add post now
36:47 - we want to create a function that adds
36:49 - that post that we got to this post array
36:51 - that we have so here i'll say function
36:53 - add post
36:55 - and if you look at the documentation you
36:58 - will see that the event
37:00 - right here
37:02 - actually if we look at app.felt the
37:04 - event has this property detail which
37:06 - holds our payload so here in our add
37:10 - post we will we can destructure it
37:12 - straight away so we will destructure
37:14 - detail and we can do colon and give it
37:17 - another name because it's
37:19 - because it makes more sense to call it
37:20 - post here instead of detail because it's
37:22 - actually a post so here now that we have
37:24 - that data we just want to add it to our
37:26 - post so we can simply say posts equals
37:29 - and we do an array and we want to put it
37:32 - at the top so we'll say post comma and
37:34 - then we spread our existing posts like
37:37 - this now
37:38 - be careful with this you don't want to
37:40 - do a post dot push or unshift because
37:43 - when you do that you're not assigning a
37:45 - new value you're changing the variable
37:46 - but you're not assigning a new value so
37:48 - that wouldn't actually cause a re-render
37:50 - you want to do post equal and then you
37:52 - actually add your data so let's save all
37:55 - files
37:56 - and let's look at our app and see if
37:57 - this is working so it's right here let's
38:00 - refresh just in case and we can say post
38:03 - to be added
38:06 - add
38:07 - this post and we click enter and there
38:10 - we go our post is actually added to our
38:12 - front end but our form is not resetting
38:14 - so let's fix that let's go here
38:17 - so in our form uh when we submit that
38:20 - and we dispatch the event we can simply
38:22 - say um title
38:25 - equals an empty string and body as well
38:28 - or we can say title equals body
38:31 - equals empty string so we reset both of
38:33 - them
38:34 - all right let's look at our app reload
38:36 - just in case and let's put some
38:37 - gibberish
38:39 - that gets added and the fields are reset
38:41 - sweet let's now implement this delete
38:44 - button i mean give it some actual
38:46 - functionality so let's go here in the
38:48 - home
38:50 - so we have or we already
38:52 - created this delete post function but it
38:55 - doesn't do anything so here we'll say
38:58 - fetch
38:59 - and the way our api works we want to
39:01 - send uh to the url slash post slash uh
39:05 - the id of that post and we want to send
39:06 - it as a delete request so here we'll
39:08 - want to concatenate or we'll say a curly
39:11 - brace
39:12 - dollar sign curly brace api base
39:15 - url and close that curly braces
39:18 - slash post slash and then concatenate
39:21 - the id as well
39:23 - and then here we want to pass some
39:24 - options and in the options we only want
39:26 - to say that the method is a delete
39:29 - method
39:30 - and here we can use the the
39:33 - dot then syntax
39:34 - and then here we say response and by the
39:36 - way just because i'm using async there
39:39 - and the dot then here i wouldn't do it
39:41 - in a project i'm just showing you that
39:42 - there are multiple ways of doing this in
39:44 - one of my projects i'll still stick to
39:46 - one way of doing things to maintain
39:48 - readability so here with the response i
39:51 - want to return rest.json
39:54 - like this and then chain another dot
39:56 - then
39:57 - where we get uh actually we don't need
39:59 - any of the result that's returned
40:00 - nothing gets returned so
40:03 - we we just want to actually remove that
40:05 - post from our front end so here we'll
40:07 - say posts equals and we'll say
40:09 - post.filter
40:11 - to remove that post and our filter will
40:13 - be post where post
40:16 - dot
40:17 - actually post
40:19 - dot id
40:20 - does not equal this id which will now
40:23 - remove all the posts that don't have
40:25 - this id
40:26 - i mean keep just the posts that don't
40:27 - have this id meaning that it will only
40:29 - remove that post so let's save that
40:32 - let's look at our app it's really low
40:34 - just in case if we delete this
40:36 - it actually goes away if we delete this
40:39 - it goes away let's add a uh a pop-up
40:41 - like a confirm pop-up that you know just
40:43 - in case people don't delete everything
40:45 - by mistake so let's copy all of this
40:48 - here we'll say uh if
40:51 - confirm
40:53 - and the confirm will say are you sure
40:56 - so if they click ok on that we actually
40:58 - want to send that post that i mean that
41:01 - request
41:02 - and now if you click delete it asks us
41:04 - are you sure if we click ok it actually
41:06 - deletes it
41:07 - all right let's now work on the edit
41:09 - button so let's go here
41:12 - so this is called from the post form
41:14 - or actually no from the home
41:17 - so what we want to do now is that we
41:19 - want to when we click on edit we want to
41:21 - pass the details of that post down to
41:24 - this form and then populate the fields
41:26 - of that form with those details so here
41:28 - when we um edit a post we're going to
41:31 - set a new property here i'll call it um
41:34 - editing
41:35 - post
41:36 - and initially this will be
41:39 - we will have a body
41:41 - that's an empty string
41:42 - a title
41:44 - that's an empty string
41:46 - and an id that's null because the way
41:48 - our api works when we want to edit a
41:50 - post we want to send the body and the
41:52 - title and the id as well to know which
41:55 - post to edit on the database so now we
41:58 - want to when we edit post we want to set
42:01 - this editing post to this post that we
42:03 - clicked to edit so we will say
42:05 - editing
42:07 - post
42:09 - equals this post that we got here simple
42:13 - as that but we want to pass this editing
42:15 - post to the to the post form as a prop
42:18 - we can do
42:20 - post
42:21 - editing
42:24 - post equals
42:26 - editing
42:28 - post like this
42:29 - but when we save it's going to change it
42:31 - to like some really nice minimal syntax
42:34 - that i've been wishing that it would
42:35 - happen on react a while ago which is
42:37 - just doing curly braces editing post
42:39 - which was which is going to give that
42:40 - prop with that name and that value to
42:42 - our post form as well now we want to use
42:44 - that in this
42:46 - component and display those details so
42:48 - let's go up here now what we can do we
42:51 - can say
42:52 - um title equals
42:54 - editing post.title up here so we can say
42:57 - let title equals editing
43:01 - post
43:02 - dot title
43:04 - and do the same thing for body
43:08 - actually i haven't tested this i don't
43:09 - think it will update once we yeah we
43:11 - won't update actually there's a problem
43:15 - it says editing post is not defined okay
43:17 - i know why because i we need to declare
43:19 - editing post as a prop that we can that
43:22 - we can get from outside so we need to
43:24 - say export
43:25 - let remember like that that was on the
43:28 - the app as well for the property name so
43:30 - we need to say the same thing for
43:32 - editing post when i say export let
43:34 - editing post this will tell this
43:36 - component that we can receive this as a
43:38 - prop so let's save
43:40 - now if we look at our app so that's fine
43:42 - but the problem now they're set to
43:45 - an empty string but if we click edit it
43:48 - will not change because it's not
43:49 - tracking any changes the way we fix that
43:52 - we can just use this syntax we can say
43:55 - dollar colon
43:56 - and we can do the same thing for body
43:59 - here and this what we will tell our
44:02 - component will be like look we will
44:04 - assign this value but whenever editing
44:06 - post post.title changes then assign that
44:09 - value again to title so this is reactive
44:12 - to editing post so if we save this
44:16 - now that should fix it so here if we
44:18 - click edit there we go we get the
44:19 - details from this component i mean from
44:22 - this post to our form right here so if
44:24 - click here we get those and we click
44:26 - here we get those that's pretty cool uh
44:29 - i wanna as well change the button from
44:31 - add to update once we are in actually
44:34 - editing mode so there's a simple trick
44:37 - so right here once our editing post has
44:40 - some value when we click here it will
44:42 - also have an id because by default it's
44:44 - null so we can use that as a conditional
44:47 - so down here instead of just add we will
44:49 - put an expression so we'll do curly
44:51 - braces and we'll say editing post dot id
44:55 - question mark so if this is not null uh
44:58 - we will say update
45:01 - else if this is null that means we're an
45:02 - ad or we're in creating mode we'll say
45:05 - add let's save that
45:06 - let's look at our app so by default it
45:08 - says add when the id is null but when we
45:11 - click on edit it becomes update cool
45:14 - let's now add the logic for actually
45:16 - reaching to our server and updating this
45:18 - post
45:19 - all right let's go back so this will
45:20 - happen through the on submit as well of
45:23 - course but now what we need to do we
45:25 - need to add a new thing here we will say
45:29 - because if we have an id we'll actually
45:32 - send the post request to api slash post
45:35 - slash that id and then it will be a put
45:38 - request to edit that post with that id
45:41 - so here we can just say uh condition
45:44 - and
45:44 - we'll say if editing
45:47 - post dot id so if it's not null then
45:50 - we're gonna actually update a post we're
45:52 - gonna form a url let's say uh actually
45:56 - uh here we can say actually we need to
45:58 - declare these outside because we will
45:59 - need them later so we'll say let we'll
46:02 - create these two variables url and
46:04 - method as well because the method could
46:06 - be either a post or a put so here we'll
46:08 - say url equals let's do backticks and
46:12 - form our url would be api base
46:15 - url
46:17 - like this slash post slash
46:21 - this id so we can do dollar sign curly
46:23 - brace and we can just copy and paste
46:25 - that inside so that's our url and of
46:27 - course now the method will be put
46:30 - because we're in edit mode so we'll say
46:32 - put like this
46:33 - else if the id is null that means we're
46:35 - trying to create a post so the url will
46:38 - be
46:39 - backticks and we'll say
46:41 - curly brace and we'll say api
46:44 - base
46:48 - url
46:49 - slash post
46:51 - and the method
46:53 - will be post
46:55 - and now we can say
46:56 - we can send the same request but instead
46:59 - we can send it to url because this could
47:03 - be different and the method is just
47:05 - method so we can just omit this
47:08 - and send the same body so here let's
47:10 - save and this should work so let's look
47:13 - at our app let's put these side by side
47:16 - and let's look at our network tab let's
47:18 - clear that
47:19 - and now if we just i'm going to refresh
47:22 - just in case now if we just submit a
47:24 - post i'll put
47:26 - i can't type in these fields uh
47:29 - okay i can't type in these fields
47:30 - because i didn't change these values now
47:32 - these values should actually be editing
47:34 - from editing posts so here i'll say
47:36 - editing post dot title and dot body this
47:39 - should fix that let's go back
47:41 - all right now i can post i mean i can
47:43 - type all right so here if i just send
47:46 - this this should be a post request okay
47:49 - here it says url is not defined see that
47:54 - okay this is url i don't know why the
47:56 - autocorrect is changing my variable
47:58 - names that's very weird i hope they fix
48:01 - this um extension all right now it
48:03 - should work if i put some gibberish and
48:05 - click add
48:06 - and if i look at the network tab
48:08 - it sent a post request to slash post but
48:12 - now if i click on edit the same one
48:15 - and give it just like a bunch of v's
48:17 - like this
48:18 - and click update
48:20 - and if we go back it's right
48:24 - uh right here okay so this is the a put
48:27 - request and it's gone successfully but
48:29 - of course the problem now it's actually
48:31 - added it because we didn't change the
48:33 - logic to add post in the home component
48:35 - so let's do that so let's go to the home
48:37 - component
48:38 - so here in add post we want to check if
48:40 - we already have that post then we just
48:43 - want to edit it we just want to replace
48:45 - it so we'll do if
48:46 - posts dot find
48:48 - post where post dot id
48:52 - equals
48:53 - this post that we got the id
48:56 - so if this is truthy that means we
48:58 - already have this post that means this
48:59 - post was probably being edited so we
49:01 - just want to find the index of it and
49:02 - replace it in our existing posts so
49:04 - we'll say const index
49:06 - equals posts dot
49:09 - find index
49:11 - and we want to find the index of post
49:13 - where postal id is the same condition
49:16 - that equals this poster id now that we
49:18 - have this index we need to declare a new
49:20 - array and say let posts updated
49:24 - equal posts so we're just making a copy
49:26 - of it right now that we will assign
49:29 - later and now we want to edit this post
49:31 - updated so post updated dot splice
49:35 - and we remove starting from the index we
49:38 - remove only one and then we replace it
49:40 - with this post
49:42 - now we can simply say posts so our post
49:45 - equals posts updated which will uh
49:48 - re-render
49:49 - else
49:50 - else we just do this
49:53 - all right let's save and let's see what
49:55 - this looks like
49:56 - so now i want to edit all i want to edit
49:59 - this one as well and change it to like
50:01 - like all x's like this
50:04 - click update there we go it changes to
50:06 - all x's and it doesn't add a new one
50:08 - let's reset the form now the form should
50:10 - be reset from here we can't reset it
50:12 - from inside and this title and body
50:14 - don't exist anymore so we can remove
50:16 - that
50:16 - and here we can just assign it again to
50:19 - this so we can just copy that and after
50:21 - either of these happen we'll just do
50:24 - this paste this here all right let's go
50:26 - back
50:27 - now let's edit these from v's to w's
50:31 - like this and we click update and the
50:33 - form resets cool
50:35 - let's add the post limiter that limits
50:37 - the number of posts right here so let's
50:40 - go back here
50:41 - let's go down to the markup and after
50:43 - the form here i'm going to add a
50:46 - column with the width s3
50:50 - and here i'll put some text say limit
50:52 - number of posts
50:55 - and after this i'll put an input input
50:58 - of type number
51:00 - and this will have no name
51:03 - i'll bind it to some value
51:06 - and i'll call this value
51:08 - post limit
51:10 - and it won't have any id
51:12 - close that tag
51:14 - and after this we'll have a button
51:17 - and this will have a click event so on
51:19 - colon click
51:21 - i want to call this set limit
51:24 - and let's give it some
51:26 - materialized classes waves
51:29 - effect
51:30 - and waves
51:32 - light and btn
51:34 - let's close that button
51:36 - and it will say set
51:39 - all right let's create this method uh
51:41 - this function and this
51:43 - post limit and the set limit so we go up
51:45 - here
51:47 - say let post limit and we'll create that
51:51 - function set limit let's go down here
51:53 - and say function
51:56 - set limit
51:58 - we'll
51:59 - send a fetch
52:01 - we'll say fetch to send a request and we
52:04 - can just copy this
52:06 - so to the base url or url slash post
52:09 - slash that number so we'll put the post
52:12 - limit right here and it's a get request
52:14 - and we don't need to say anything we
52:16 - just change then and when we get a
52:18 - result
52:19 - uh we wanna
52:21 - return
52:22 - res.json
52:24 - and here we chain another then
52:27 - and we will get to the posts
52:30 - and here we'll say actually again i want
52:32 - to give it a different name to not
52:33 - conflict with the posts that we already
52:35 - have and we'll say post equal
52:37 - equals posts uh data like this all right
52:40 - let's save everything
52:42 - let's look at our app
52:45 - let's give it a default value so it
52:46 - doesn't look empty like that and let's
52:48 - give it like some margin on all sides
52:50 - i'm just going to give it some inline
52:52 - styling
52:53 - right where is it
52:55 - so it's this
52:56 - i'm just going to say
52:57 - style
52:58 - equals margin
53:01 - 50 pixels like that
53:03 - and we want to give this post limit a
53:06 - default value of 6.
53:08 - all right let's save
53:11 - all right it looks much better now if i
53:12 - want only two posts we click set
53:15 - it doesn't work
53:17 - it's curse reference posts oh i made a
53:20 - typo my bad
53:22 - so right
53:24 - here this is post snap sorts
53:27 - let's save
53:29 - let's go here i want to get two we set
53:31 - we get two three we get three if we put
53:34 - a massive number we get all of them all
53:36 - right cool actually i forgot to show you
53:38 - something let's actually build this app
53:40 - to see the bundle size of it so here
53:42 - we're going to stop this development
53:44 - server
53:44 - what does it mpm run build yeah it's npm
53:47 - run build so let's say npm run build
53:50 - hit enter okay it's built let's open
53:53 - this
53:54 - open revealing explorer
53:57 - so look at the public the bundle is 196.
54:01 - okay that's unfair
54:04 - because that's most of it is coming from
54:05 - this materialized js all right i'm going
54:07 - to just comment that for now and build
54:08 - it so npm run build just to show you the
54:11 - actual bundle size of svelt itself
54:14 - all right cool
54:15 - so if we look at public now it's 21
54:17 - kilobytes which is absurdly low and 10
54:20 - kilobytes or 11 kilobytes of this is
54:22 - actually coming from spell routing so
54:24 - svelte itself is only 10 kilobytes um i
54:27 - mean this app itself of course there's
54:30 - no spelled code inside of this bundle
54:32 - it's just some javascript instructions
54:34 - with our own code which is
54:36 - this is insanely small and very
54:39 - efficient so yeah i hope this gave you
54:41 - uh like a good start with felt um i hope
54:44 - that you're excited about this felt and
54:46 - you want to use it and learn more about
54:48 - it thank you very much and i hope to see
54:50 - you soon bye