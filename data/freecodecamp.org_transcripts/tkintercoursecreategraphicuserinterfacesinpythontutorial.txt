00:00 - All right, welcome to the video. My name is
john elder from coding Comm. And in this video,
00:04 - we're going to start to talk about graphical
user interfaces with Python specifically using
00:08 - kinter, or t kinter. As it's, I guess, called.
And that's a module that comes built in with
00:14 - Python that allows you to create gooeys graphical
user interfaces, relatively easy and very,
00:19 - very quickly. So we're going to start to look
into that in this video, I'll show you the
00:24 - very very basics This is going to be a series
of videos so you can follow along and, and
00:29 - learn all about it. So before we get started,
if you like this video and want to see more,
00:33 - be sure to smash the like button below, subscribe
to the channel. And be sure to check out Cody
00:38 - comm where I have dozens of courses with hundreds
of videos that teach you to code, Use coupon
00:42 - code YOUTUBE to get $20 off membership. That's
all my courses, videos and books for a one
00:48 - time fee of just $27, which is pretty insane.
But check that out if you're interested. So
00:55 - let's get right into it. Like I said, Python
comes built in with T kinter or kinter, as
01:01 - some people call it, I'm probably going to
call it kinter I kind of dropped the T it's
01:05 - silent. If I call it T canter you know what
I'm talking about. So I'm gonna assume you
01:09 - already have Python installed on your machine.
Now this should work on Windows, Linux or
01:13 - Mac, I'm on a Windows computer. So just sort
of keep that in mind. But I'm going to assume
01:19 - you already have Python installed. If you
don't, you can go find another video to install
01:22 - it. I'm going to assume you already sort of
know how to use Python. So you can run a script
01:27 - and make it work without me having to show
you how to do that. So let's just jump right
01:32 - in here. Here. I have the Sublime Text Editor,
you can use absolutely any text editor that
01:36 - you want. I like sublime, it's free. It's
pretty cool. So I've just got an unsaved file
01:42 - open right now. So to start, we need to import
kinter. And it's really easy. We just go from
01:47 - lowercase t k i n t r t Kenter. And then we
want to import everything. Alright, so right
01:57 - away, let's go ahead and save this file. Let's
first view, I want to say syntax, we want
02:03 - this to be Python. Okay, so bops up. Let's
go ahead and save this.
02:09 - And
02:10 - I'm going to navigate to my C directory, you
can save this anywhere you want, wherever
02:15 - you just, you'll remember it, I created this
GUI, graphical user interface directory. And
02:20 - this is where I'm going to save all this stuff.
So let's just call this one Hello. And go
02:24 - ahead and save it. Okay, so says hello.py
is the py file, Python file. Okay, so pretty
02:32 - straightforward. We're just going to import
this module TK, enter, import everything.
02:36 - Now, this allows us to use everything in TK,
enter. There's some other ways you can import
02:40 - this. But this is sort of the main way that
you do it. And I'm not going to talk about
02:44 - any other ways, because this is what you're
gonna want to use 99.9% of the time. So in
02:49 - kinter, everything is a widget. There's button
widgets, text widgets, frame widgets, everything's
02:55 - a widget. And the first thing you create is
sort of the root widget. It's Think of it
03:01 - like the window. Any graphical user interface
program on your computer has like a window,
03:07 - if you're on a Windows machine, it's the windows
window. If you're on a Mac or Linux, it's
03:11 - the same kind of, you know, boxy window thing.
So we need to create that before we do anything
03:15 - else. So we call it the root. It's the root
widget, and we just set this equal to a T
03:22 - k. And that's it. So this has to go first,
this has to happen before anything else in
03:27 - your program. When you're working with TK,
enter. So just right off the bat, just make
03:31 - it the first thing that you always do. So
for the rest of this video, we're going to
03:34 - create just a very, very simple window, sort
of a Hello World window, and, and run it.
03:40 - So we want it to like say some text, right.
And the text will just be whenever we want
03:46 - hello world or whatever. So we need to create
a label widget. Now throughout the course
03:51 - of this series, I'm going to talk about all
the different widgets, we're going to talk
03:55 - about them all in great detail. And we'll
get into that in the future. For this video,
03:59 - we're just gonna use the label widget, I'm
not going to talk about it in great depth,
04:02 - because it's very simple. I might talk about
it in more detail a little bit later on. But
04:06 - to create anything is in kinter is really
a two step process, you have to define the
04:12 - thing and created and then you have to put
it up on the screen. So it's two steps always.
04:17 - So the first step, we're just going to create
a label widget. So I'm just going to call
04:21 - this my label,
04:23 - labor.
04:25 - And then set this equal to it's a label widget.
So we have this label function, right. And
04:32 - then we want this to go in our root widget,
right? And then for the text, we want it to
04:39 - go Hello world. I can type correctly. Alright,
and that's it. So we've now created a label
04:47 - a label widget. Now we have to put that widget
into our root widget into our root window,
04:53 - right. So that's a two step process I was
talking about. Now there's a couple of different
04:56 - ways that you can put things on the screen
with TK enter The first one we're going to
05:00 - look at is pack, we're just gonna pack it
in there. And when you think of pack, think
05:05 - of just like packing, you're just shoving
it in there at the first available spot, right?
05:11 - It's just sort of, it'll be the size that
it is. It's very unsophisticated, we're just
05:15 - shoving it in there. And that's what I'm going
to use it for this video, because we haven't
05:19 - learned anything else. Primarily, you're gonna
use the other method to put stuff on the screen.
05:23 - And we'll talk about that later, probably
in the next couple of videos. But for right
05:28 - now, we're just going to pack this thing in
there. So what we do is we take our widget,
05:32 - which is my label, and then dot pack. That's
it. So here, we're creating a, let's just
05:44 - call it a text. It's a label called a label,
widget. And then here, we are shoving it onto
05:55 - the screen. Right. So that's it. So now the
last thing we need to do is create an event
06:02 - loop. And what an event loop is, when you
have a graphical user interface, when you
06:09 - have a program running, it's always looping
constantly. And that's how it figures out
06:14 - what's going on. So as it's looping, you might
move your mouse cursor, right, since it's
06:21 - looping, it notices, oh, the mouse is here.
Now it's here. Now it's here. Now it's here,
06:25 - because it's continually looping. If you go
to click a button, you know, it loops sees
06:30 - you moving towards that button as it's looping,
looping, looping. So it's a constant loop.
06:35 - So you have to create that loop. And normally
when a program ends, is when that loop ends.
06:40 - Now, if you're familiar with programming of
any time, you're familiar with loops, they
06:43 - keep going until something happens, right.
And in this case, they keep going until the
06:47 - program is and then the end. So to do that,
we want to create a route. This is our root
06:52 - widget. And then we want to call it main loop,
because this is the main loop of the program.
06:58 - Right? And that's it. So let's go ahead and
save this. Now, this is ridiculously simple.
07:03 - We've just created a graphical user interface,
actually actual program that will run and
07:10 - visually, you know, Cool, well, it's not that
cool. We'll see in a second here, but it works.
07:15 - And it's like, what is this 12345 lines of
code? That's ridiculous. That's very, very
07:21 - simple. Now, granted, this is a very unsophisticated,
easy program. But I think you can see right
07:26 - away how simple it is to use this key Cantor
is no more complicated than this.
07:31 - Right? If you have a bigger program that you
want to create Sure, there's going to be more
07:35 - lines of code. But everything is a widget.
And this is how easy it is to create a widget,
07:40 - you just define it, and then pack it in there
somehow. That's it. So it's not that hard
07:45 - to use this d kinders, which is really cool.
So let's go ahead and run this and see what
07:49 - we got. I'm pulling up, I have this Git Bash
terminal, I downloaded this, you can just
07:54 - google Git Bash, if you want to use this when
you absolutely don't, you can use any terminal
07:58 - that's on your computer or any way that you
already use in the past to run Python programs.
08:03 - Windows has a command prompt, it has the PowerShell
installed, you can use either of those, if
08:08 - you're on a Mac or Linux, you could use your
regular terminal, whatever. So I'm going to
08:11 - change directory into C. gooey. And just to
make sure our Hello file is there. It sure
08:20 - is. So let's just run this file. So I type
in Python. And then Hello dot p
08:26 - y.
08:30 - And oh, something happened. object has no
attribute main loop. What did we do? Oh, the
08:39 - l must be lowercase joy. Alright, so go ahead
and save this. pull this back up again. Run
08:46 - it again. And here we have it's on my other
monitor. So let me drag it over. And there
08:53 - we have it. Put it up here. So this is it.
So let's pull our code back up as well. Okay,
09:02 - so here it says hello world, because we typed
right here, hello world. And this is the little
09:08 - t kinter icon is a fav icon. We can change
that. And we'll talk about that later. You
09:13 - can see this program has a minimize button
that works. It has a maximize button that
09:19 - works and an X button that works so when we
click that it ended automatically so we can
09:27 - run this again, just for fun. Let's pull this
over. Now we can resize this and it kind of
09:35 - resizes things automatically. In a future
video, I'm going to show you how to explicitly
09:41 - resize it. So when you started it doesn't
start small like this. But in this case, we
09:46 - use pack and pack says you know pack this
in just as as big as the stuff inside is in
09:55 - our text widget is only you know what is this
1012 characters so it's only That big hole
10:00 - widget is only that big. So the window is
only that big. Pretty cool. So that's it.
10:06 - That's how easy it is. And check it out. I
mean, this is a full on Windows window, right?
10:11 - has all the things you would expect, minimize
maximize a little x. Very cool. And see this
10:18 - x, right here. What you're doing when you're
closing this window is you're disrupting this
10:23 - main loop, this root loop. And that causes
the program to end. So we'll look at all this
10:29 - in more detail in the next few videos. Alright,
in the last video, we did our Hello World
10:38 - program. And we position the stuff on the
screen using Pac, which is a very, very simple
10:42 - and easy way to position things, but doesn't
give you a whole lot of control. In this video,
10:47 - I want to talk about the grid system, it's
a better way to position things on the screen.
10:51 - And it's the way you're going to use most
of the time. So let's take a look at our code
10:55 - from last time. And remember, we use this
pack now first thing I'm going to do is I'm
11:00 - just going to save as let's save this as a
different file, I'm going to call this grid.py.
11:06 - And let's pull up our terminal real quick
and just run this program grid dot p y. And
11:14 - remember, I'm in C for slash GUI, the director
and created for all of our files here. And
11:20 - we can pull this over. And you can see here
it is just a very basic program hello world.
11:24 - Now the thing to remember about this is, look
what happens when we resize this, it stays
11:29 - in the middle. And we can play around with
this all we want. And this stays right where
11:35 - it is. That's one of the nice things about
Pac, it keeps it exactly where it's supposed
11:40 - to be. But it doesn't give you a whole lot
of control. So going further in this video,
11:44 - we're going to go ahead and look at the grid
system. Now, the grid system is exactly like
11:50 - it sounds, it's a grid. So think of all of
your programs as a grid grids have columns
11:55 - up and down. And they have rows left to right.
And just visualize that in your head. And
12:02 - you pretty much understand the grid system.
Now, we we deal with the grid system using
12:06 - numbers. So you would say row zero to put
it in the very top row, row one to put in
12:12 - the next row row two, row three, row four.
Same thing with columns, column zero, it all
12:17 - starts with zero. Computers always start with
zero, right, so column zero, column one, column
12:22 - two, column three. That's really all there
is to it. Now, there's a couple of little
12:25 - tricky things you have to know. And we're
going to talk about those in this video. But
12:28 - really, it's not too bad. So let's come over
here and let's modify this code. So we have
12:33 - my label, I'm just going to copy and paste
these. And let's call this one my label one.
12:37 - And this one, my label two. And we'll keep
this one the same. And then for this one,
12:41 - let's just change it to my name is john elder,
right. So instead of packing these things
12:50 - in, we want to use the grid system. And it's
really very simple. We just type in my label
12:58 - my label one, and then dot grid, right. So
instead of dot pack, it's dot grid. And same
13:07 - thing here. Let's go my
13:09 - label to dot grid. Now, inside of this parentheses
inside of this function, we need to just tell
13:20 - the program where we want these things. So
let's go row equals zero and column equals
13:25 - zero. So I'm just going to copy these down
to here. And let's change this to row one
13:33 - and column zero. So they're going to be in
the same column, one will be on top and one
13:38 - will be on bottom. Right? Pretty simple. So
go ahead and save this. And let's run this
13:44 - and see if it does what we expect. Pull this
over, it's hard to get a grasp on it. There
13:53 - we go. So here we go. Hello world. And directly
below it is My name is john elder. Now you'll
13:57 - notice that the program itself is still just
as big as the text. So it hasn't expanded
14:04 - any. We'll talk about that later. But here's
the thing to see, check this out. If we resize
14:09 - this, this stuff doesn't automatically resize,
it stays right where it is row one column
14:16 - a row zero, column zero, row one, column zero.
So that's one sort of thing to keep in mind.
14:23 - Let's go ahead and close this. Now let's play
around with this a little bit more code backup.
14:28 - So let's say we want let's just change this
to column one. See what this looks like. So
14:34 - if we save this back here, and I'm just pressing
up on my keyboard, it pastes in the last command.
14:40 - Okay, so now if we pull this over, we can
see and let's pull up our code to
14:45 - There we go. So,
14:50 - row zero column and row one. So this is row
zero left to right. This is row one. Remember
14:57 - the rows and the columns all start at zero
and Column zero. So right here, up and down.
15:02 - And this is column one right here, up and
down. So pretty straightforward. And one thing
15:10 - you have to realize about this, that kind
of stinks is that this is all relative, their
15:16 - relative to each other. And what I mean by
that is look at this, if we change this from
15:19 - column one, my name is john elder, let's change
it to column five. Now, if we save this, and
15:27 - pull this back up, first, we need to close
this now rerun it again. Pull it over, and
15:37 - Oh, look at that, it's the same as the last
time, even though we put column five, oops,
15:43 - come back, come back, it's still just, it
looks like it's in column one, the second
15:49 - column over why we're telling it column five?
Well, because it's relative, there is nothing
15:54 - in column 123, or four. So kintra just ignores
it, right. So if you wanted something there,
16:02 - you would have to go something like, let's
go, let's just copy this, and call it my label
16:08 - three.
16:12 - And
16:14 - we might just put like nothing, right. And
then we could come down here, and let's just
16:18 - copy and paste. Level three, and we could
go, you know, to one doesn't matter, if we
16:28 - save this, and let's close this. And now,
not gonna be a whole lot better. You can't,
16:39 - you can't really tell because it's just nothing
there. So there's, there is another column
16:44 - in between these two, it's kind of hard to
tell. But there's nothing in it. If we went,
16:49 - you know, something like this, and saved this
and ran it. Well,
16:58 - now you can really see the difference, right.
So that's sort of a hacky way to do it. And
17:06 - there's lots of other ways to do this. And
as we go forward. throughout this series of
17:09 - courses are the series of videos, I'm going
to show you all kinds of tips and tricks on
17:13 - how to position things around using the grid
system. In this video, I just wanted to show
17:17 - that sort of like a talk, sort of show you
that the grid system exists, give you the
17:23 - very basic fundamentals of it, so you can
start playing around with it. Now one last
17:28 - thing I want to talk about before we end this
video, let's just close this. And let's get
17:33 - rid of this and get rid of this. Now, Python
is object oriented. And you can do object
17:40 - D type things with Python. And even though
this is kinter, it's still just Python, right?
17:45 - So we don't have to write our code like this.
I always do because it's easier to sort of
17:52 - keep track of things. Remember, in the last
video, I said, doing everything in kinter
17:56 - is a two step process. First, you create the
thing, then you put the thing on the screen.
18:01 - So here, we're creating the things. And here
we're putting them onto the screen, right?
18:08 - Sure. That's really what you're going to want
to do. But you don't have to since Python
18:12 - is object oriented. This dot grid is basically
just an object II sort of thing you can do.
18:18 - So instead of this, you can just slap this
on the end.
18:24 - Same thing here. Right?
18:28 - If you're familiar with Ruby programming,
we do a lot of stuff like this in Ruby. But
18:33 - you can do in Python, too, because it's object
oriented. So you can just slap this on the
18:38 - end, put a dot grid. Now if we save this,
Come back to our terminal. run this again,
18:47 - we get the exact same thing as we would expect.
It's just we don't have to do it in two steps.
18:52 - We can do it in one step. That's great, right?
But you know, this is a very, very basic widget
18:58 - we're creating right here. And it's already
pretty big, right? You really want to make
19:03 - it even bigger, even harder to read by doing
stuff at the end. Probably not, maybe sometimes
19:10 - you do. I like cleaner code. And to me doing
it in two steps like this just seems cleaner.
19:17 - It's really a personal preference. But I would
recommend you doing it this way. In the future.
19:22 - I just wanted to show you that that's possible
just to kind of blow your minds a little bit
19:26 - and give you a little something to think about.
Doesn't really matter what kind of program
19:34 - you're building what kind of graphical user
interface chances are, you're going to need
19:37 - a button for something probably lots of buttons.
So that's what we're going to look at in this
19:41 - video. So in the last video, we looked at
the grid system, how to position things around.
19:46 - So I'm going to come up here to our grid.py
file. I'm just going to rename this, and let's
19:50 - just call this buttons.hi. Okay, so let's
play around with this a little bit. Let's
19:58 - just get rid of all of this. Let's get rid
of this to you. Okay, so to create a button
20:05 - in kinter is pretty simple a button like everything
in Cantor is a widget. So we want to create
20:10 - a button widget. So let's just call this one
my button, I guess. And we just call a button.
20:19 - And this function right now, inside of here,
we need to tell it, you know, where we want
20:24 - this. So we want it in root, and then what
text right, so let's say, click me, right,
20:31 - so like everything, in kinter, once we define
the thing, now we have to actually put it
20:36 - up on the screen. So let's just go my button,
that pack but just pack it in there, just
20:41 - for example purposes. So go ahead and save
this. And let's head over here to our terminal.
20:45 - And remember, I'm in C forward slash gooey.
It's just the directory I created, you can,
20:50 - you know, save these anywhere you want. So
let's go Python. And then buttons, dot p y,
20:56 - pull this over my other monitor. And we see
there it is click me now when we click on
21:03 - this thing, it doesn't do anything because
we haven't told it to do anything yet. So
21:07 - before we do that, I want to show you one
more kind of cool thing. Right up here, when
21:11 - you're defining this thing, you can put a
state, so state equals, let's call this disabled,
21:17 - right. So if we save this, come back here
and hit reload, and drag this guy over, you
21:23 - can see now the button is disabled, it won't
even click right, it's sort of grayed out
21:28 - a little bit. So that's kind of cool. One
other thing we can look at, before we learn
21:33 - how to actually have these things, do something,
let's get rid of this, we can sort of change
21:37 - the size of these. So we can pad x, and we
can pad y First let's look at pad x. So let's
21:45 - say 50. Right, sort of an arbitrary thing,
come back here and reload this guy. Let's
21:52 - pull this over. And you can see now the button
is wider, right? x, think of like an X Y axis,
22:02 - right? So the X is sort of horizontal and
the Y is vertical. Y is up and down. And x
22:08 - is left and right. Right. So that's cool.
So we could change this to any size we want.
22:12 - I just put 50. Next, let's go had y equals
50. Just to see what this looks like, save
22:23 - this, and run it. Pull this over. And so you
see now we have a big square button. And hard
22:31 - to tell. See, if I click it, there we go.
Right. So that's kind of neat, right? Um,
22:38 - let's see, just for fun, let's get rid of
the pad x, see what this looks like, save
22:42 - it
22:46 - and run it.
22:47 - So okay, so it's a tall skinny button, I don't
know why you would ever want to do this, say
22:52 - the truth, you're probably never going to
want to resize the button anyway. But you
22:55 - may just for you know, aesthetic reasons sometimes
need to make your button a little bigger or
23:00 - smaller. So that's how you do that. So we
can change the size with pad x and pad y we
23:04 - can disable and enable with the state. Now
we need this to actually do something how
23:11 - do we get a button to do something in kinter?
Well, let's close this, it's actually very,
23:15 - very easy. What we do is create a function,
any old function to do anything you want.
23:21 - So let's say we're creating a function here.
So we go define my click. And then it's just
23:27 - a function like any other function in Python.
And inside of here, you can have a do absolutely
23:32 - anything you want. So let's create, remember
my label. And let's call this label. Whoops,
23:38 - there we go. And we want it to be in root.
And we want the text to say, oops, if I could
23:48 - type, there we go. Look, I clicked 
a button. Okay, so we've created a label,
23:58 - now we need to put it on the screen. So let's
just go my my label dot pack. And I know grid
24:03 - system is better. But this is just for example,
we just want to throw this up on the screen
24:07 - anyway. So that's good to go. So as you know,
with a function, it doesn't get executed until
24:13 - it gets called. And that's not a kinter thing.
That's just a Python thing. It's really just
24:18 - an object oriented programming thing. So you
know, the program starts here executes this
24:24 - line, it executes this line, it sees this
and it doesn't actually execute it, it reads
24:28 - it into memory. So then later on, if you want
to run it, you can call it and it'll run,
24:33 - but it doesn't actually do anything. And we
can prove that by saving this real quick and
24:38 - we can run this and let's pull this guy back
over. And so you know, when we click here,
24:45 - nothing actually happens because we're not
telling it to execute yet. So to actually
24:49 - tell us execute is really, really simple.
We just go let's go command equals and then
24:56 - name the function my click So if we save this,
come back here and run this guy one more time.
25:04 - You click this, oh, look, I clicked a button,
it appears actually, if we keep clicking,
25:11 - it keeps putting it up on the screen. That's
a discussion for another time. But yeah, it
25:16 - really doesn't matter what you want the button
to do. Right? If you're, if you build a form,
25:22 - right, and you've got a submit button to submit
the form via email or something, right, same
25:27 - thing, we're just going to create a function.
And then in the function, you'll write different
25:32 - code to do whatever you want to do. But just
that simple. So it's this command. And now
25:39 - here's something to sort of keep in mind.
Also, let's pull this guy back up again real
25:42 - quick, and close it. Now normally, when you
call a function with Python, you call it with
25:49 - those things like right here, we're calling
this pack function, right? And we put the
25:54 - parentheses when we did the grid stuff, we
were going my button dot grid. And then given
26:04 - that, right, so anytime in Python, when you
call a function, and you call the parentheses
26:08 - like that, it's just normal. But here, you
don't if we save this and run it, I don't
26:13 - think this is gonna work. My, No, it doesn't.
Let's pull us over. When the program starts,
26:20 - it ran it automatically. So it already has
it up there. And we're going to click the
26:25 - button, it doesn't execute it again, like
it did in the last little bit we did. So you're
26:32 - gonna forget and do that. Because what you're
doing here is calling this function. And whenever
26:36 - you call a function as a programmer, as a
Python programmer, especially, you know, you
26:40 - need to put these little parentheses. So if
you do, you'll get an error, well, you won't
26:44 - get an error just won't work, right, as we
just saw. So just remember to keep those off
26:49 - of there when you're using the command buttons.
And that's pretty much it. Now, I think you
26:53 - can also change the color of buttons. It's
been a while since I've done this, because
26:58 - who changes the colors? But I think it's fg
foreground color. I could be wrong. So let's
27:04 - try. Let's change this to blue. I'm not even
sure this is going to work. I don't even remember.
27:09 - But since we're playing with buttons here,
no. So let's see, what we need to do is put
27:14 - this in parentheses, maybe. Let's save this
and run it should have been more prepared
27:21 - and actually tried this. Yes. So here we have
now the text is blue. Right? So that's kind
27:27 - of cool. Now that's f g for foreground color.
We can also do I guess BG for background color.
27:35 - And let's go red. It's gonna be pretty ugly,
I
27:40 - think. Yeah. Pull this over now. So now the
button itself becomes red. And I don't know
27:48 - why you would want to do that.
27:52 - But if you did, you could do that. And and
the colors. You can use just you know any
27:56 - old color.
27:58 - I'm not sure.
27:59 - Let's see. Let's play around here. I don't
know if we can do like hex color codes. See
28:09 - this? That is, so we got to close this program
first. And then run it again. Yeah, it looks
28:22 - like that worked. Is that a white button that
looks white to you? The background color?
28:27 - I think that's why Yeah. It's the only hex
color code I can remember off. What's another
28:34 - one? fff. fff.
28:36 - Whoa, boy, I don't know.
28:39 - What is 000000? Is
28:42 - that black?
28:44 - I can't remember. I think I might be black.
Yeah. That answers that. Yeah, you can use
28:51 - hex color codes in there. So that's handy.
So if you're a web developer, and you're,
28:57 - you know, doing CSS and you're used to using
hex color codes, or whatever that is, it's
29:03 - hex color codes, those color codes right there
with a little hashtag in front of them. You
29:07 - can use those in this fg and bg. So that's
pretty much all I want to talk about with
29:12 - buttons buttons are pretty simple and straightforward.
As we you know, continue on with this tutorial,
29:16 - we'll use buttons a lot in the coming videos.
And we'll use a lot more complicated functions
29:22 - than this my click function that we use right
here. Obviously, this is just for example
29:25 - purposes, to show you how to call a function
from a button. But yeah, pretty simple. In
29:33 - this video, we're going to talk about input
boxes, how to input data into your program.
29:38 - Let's just run this real quick to refresh
our memories. And just pull this over. So
29:45 - we get this little button If we click it,
it puts some text up on the screen. So that's
29:50 - kind of cool, but we want to expand on this
and put a little like input box, sort of like
29:55 - a webform you know where a box you can type
stuff into and then we want to do stuff with
30:00 - Whatever we type into that thing, so that's
what we're going to do in this video. So let's
30:04 - go ahead and close this, pull our text our
stuff back up. And to do an input box and
30:12 - kinter, we use not an input widget, which
is what you would think they would call it.
30:16 - But it's called an entry widget, we're entering
data, right, so let's go up here to file and
30:21 - let's save this as entry.pi. So we want to
create a entry widget, right? So I'm just
30:32 - going to call this E, E for entry. So E equals
entry. This is the entry widget. And we want
30:39 - this to be in route. Now there's a whole bunch
of other stuff we can put in here, parameters
30:43 - and things. And we'll talk about that in just
a minute. So instead of doing that, let's
30:47 - just e pack this guy in here. And go ahead
and save this. So this is entry.py. So I'm
30:54 - gonna pull up my thing here, and let's run
entry.py. Remember, this is just the terminal
31:01 - that I use, you can use any terminal, I'm
in C forward slash gooey, which is the directory
31:05 - where I'm saving all of these files for this
course. Okay, so pull this over. And we see,
31:11 - you know, we've got this box, we can type
stuff in. If we click here, it doesn't do
31:17 - anything with this. This is from the last
episode, the last video we did. So okay, we've
31:22 - got an input box, that's kind of cool. Before
we go on, let's talk about some of these parameters.
31:28 - So we can immediately change the size of this
thing. So we can go with equals, we've seen
31:33 - with before, I think, and I'm just going to
call this 50. So if we save this, come back
31:37 - and run it. You can see now our input box
is quite a bit bigger. So whatever size you
31:45 - want, you can do that. Pretty simple. Let's
see what else we can do. We can change the
31:50 - color in the same way that we change the button
color. Remember fg and bg. So if we want to
31:56 - go BG equals, you know, I don't know, blue,
right? Save this, come back here and hit reload.
32:04 - Now the boxes blue, and stuff we type is black,
it's kind of ugly, but you know, whatever
32:09 - floats your boat, we can also do foreground
color. And let's change this to white, for
32:16 - instance. There we go. Save this, run it.
And we get the same ugly blue, but now the
32:26 - text inside is white. Okay, that's kind of
cool, I guess. Still a little goofy. So let's
32:31 - get rid of that. Because that is just ugly.
We can also change the border
32:36 - width. So let's say I don't know, five. So
if we save this and run it as a big enough,
32:45 - can you tell if you see the border as sort
of a raised kind of thing to it? I don't know
32:51 - why you would want to do that. But if you
did, you could do that. That's kind of cool.
32:56 - So those are sort of the there's other parameters
you can play around with. And I'm not gonna
33:00 - really talk about them because they're, they're
not as cool. All right. But I guess you could
33:06 - Google if you're really interested. But now
we want to talk about Alright, what, what
33:11 - can we do with text that's been entered into
this form, or into this input box into this
33:17 - entry widget? How do we actually do stuff
with it? Well, what we want to do is, we can
33:23 - pull an E dot get, and this get function gets
whatever you've typed into that, that thing.
33:30 - So let's, let's use this with our button.
So we've got this button that says Click me.
33:36 - Instead, let's change this to enter your name,
right? And we want when this runs, we want
33:44 - this my click function to fire. So we've got
the command right here, command equals my
33:48 - click. And now so when we click the button,
it'll execute. So what do we want to happen?
33:54 - When we click the button? Well, let's go.
Let's just change this my label instead of
34:02 - the text. Let's just type in that e dot get
function. Alright, so let's save this and
34:09 - run it and see if that works. This over. Alright,
enter your name, john. Boom, john. Right.
34:21 - So it's kind of cool that we can do sort of
pythonic things with this if we want. If we
34:26 - want to get crazy, we can type in you know,
hello. And then a plus sign to concatenate
34:34 - it. And this is just pure Python. This is
not a kinter thing, right? We know how to
34:38 - concatenate concatenate, you know, smush,
two things together with Python. So we can
34:42 - do that. So let's run this. Somebody is texting
me like crazy. So type in john. Hello, john.
34:53 - Right. So that's kind of cool. We can also
sort of looking at This, this area right here
35:01 - is getting a little crazy, right? So right
up here, we're really anywhere in center function,
35:07 - if we want, we can say, we can call a Hello
variable, right. And we can say hello equals,
35:14 - then the text Hello. And then we can concatenate
II dot get, just like that.
35:22 - And then down here,
35:23 - we don't really talk to this about this in
the past, but you can type in variables for
35:30 - your text fields, as long as they're not.
Let's see in quotation marks, or if you put
35:36 - them in quotation marks, it's just a string,
and it's going to treat it as a text string.
35:40 - But if you're like this, it's a variable.
So now if we save this, and run it, see, enter
35:48 - your name, john. Older, fancy, let's do the
last name. Hello, john elder, right. And if
35:57 - we keep doing this, cool. So pretty simple,
pretty straightforward. That is how you do
36:05 - that. Now, one last little thing that I didn't
talk about. We can go, he dot insert. And
36:16 - then now we want to give us an index number
zero, we'll need to talk about that. There's
36:22 - only one, there's only one box, it's the zero
with box. And we can now give this a default
36:29 - value, we can say, enter your name. Right.
So we save this, what this will do is this
36:37 - will put some default text inside of the text
box, right? So you know, a lot of times if
36:43 - you go to like a web form, it'll say, you
know, email inside the little box where you're
36:47 - supposed to type in your email, or whatever
it'll say username inside the box. If you
36:51 - want to do something like that. You can run
this. And then here it says, enter your name,
36:56 - right? So then you would want to
36:59 - do that.
37:00 - Hello, john. So pretty, pretty simple, pretty
straightforward. Pretty easy. As everything
37:07 - has been so far in TK, enter. So now, all
right, we can create a program, we can have
37:13 - input boxes, we can enter data in, we can
click a button, we can now do stuff with that,
37:19 - you know, programmatically behind the scenes,
we can then output based on what we typed
37:25 - in. So we've got really the basis, the fundamentals
of almost any program, like what does any
37:33 - program do except for taking data, do stuff
with it, and then output it. And here we have
37:37 - everything you need to know to do that with
kinter and a graphical user interface using
37:42 - Python. So very, very simple, very straightforward,
is less than 20 lines of code. And we've got
37:47 - a fully functioning program that actually
does something now it does something stupid,
37:52 - it just enters a name onto the screen. But
hey, you know, you can take just this and
37:57 - really make any kind of program you want,
right? So you want to create a stock quote,
38:04 - program, well enter the stock quote, right,
we could just change this to enter your stock
38:11 - quote, right, we save it, run it again. Enter
your stock quote. So if I type in, you know,
38:19 - Facebook, and then click the button, it says,
Hello, Facebook. But how easy would it be
38:26 - programmatically behind the scenes to instead
of just print hello, Facebook on the screen
38:30 - to take that Facebook stock, quote, connect
to a third party API, get the stock quote,
38:35 - bring it back in put, put the current stock
price on the screen, it'd be pretty simple
38:40 - to do that. In fact, we're going to start
doing things like that in the next few videos,
38:42 - we play around with this. That's really, really
cool. And just so just that easy to create
38:48 - really cool
38:49 - programs with this.
38:52 - In this video, we're going to put everything
we've learned so far, sort of together and
38:58 - create a very, very simple calculator. This
is the calculator we're going to create in
39:02 - this video. And you can see all it does is
add so we can go four plus two equals six.
39:08 - It doesn't subtract, multiply divide yet,
we'll do that in the future. In this video,
39:12 - I just want to do the very basics, get the
graphical user interface, this stuff here
39:16 - going on, just do a simple addition, and things
like that. So we may finish this whole thing
39:22 - in this video, we may have to break it up
into a couple which we'll have to see. And
39:26 - you can see this is just a very, very basic,
we're using buttons here. Like we've learned
39:32 - a couple of videos ago, it's not fancy looking.
We've got an input box with some raised borders,
39:37 - like we learned how to do in the last video,
you know, just very simple but it's it's a
39:42 - program we can build it and should be cool.
So I'm going to go to the program we made
39:47 - yesterday and let's just save this as calculate
tour. Okay, so right off the bat. We haven't
39:56 - looked at this yet, but you see up here As
simple calculator, that's the title. Let's
40:02 - go ahead and close this. And to change that
on any program, we just type in root, and
40:09 - then dot title. And then just type in whatever
we want. So we go simple calc later, right?
40:15 - let it work. Okay, so right off the bat, we
can start to use some of this stuff we've
40:22 - already used in the past, to get rid of this
pack stuff, we're not going to be packing
40:26 - anything anymore, we're going to be using
a grid system. So let's just use this this
40:30 - entry text box that we used in the last video,
and just sort of expand a little bit. Now,
40:35 - I want to make this with 35. And let's give
this a border with with equal to five. Okay,
40:47 - so now we want to slap that up on the screen.
So let's go e dot grid, we already know how
40:53 - to do. And we want this in the very first
row, and
40:57 - column.
41:00 - The very first column, and now we're gonna
do a couple of things, we want to give this
41:06 - a column
41:08 - all span of three. And that's because underneath
this input field, there's gonna be three buttons,
41:16 - and each button will be in a column. So we
want this column, or we want this text field,
41:23 - this entry field to span all three of those,
right? And I'm not sure if we talked about
41:28 - that in the last video or not. But you can,
you can do that like that. Now let's give
41:32 - this some padding, we want to go pad x equals,
let's go 10. And let's go pad y equals 10.
41:42 - Okay, so let's save this. And let's just run
this real quick.
41:47 - Just to see if it worked Python calc, you
later.pi pull it up. And so far, so good.
41:55 - It says simple calculator. It says enter your
name. That's from the last video, we'll we'll
42:00 - take that off here. Alright, so so so far,
so good. Let's look at this. Let's just get
42:07 - rid of this. There we go. In fact, we can
probably just comment this out, we really
42:12 - don't need that. Okay, so now, we need 12345678,
at least nine buttons, right? So let's get
42:22 - rid of this. Okay, so let's go, let's call
them button, underscore one. And each button
42:32 - will be button to button three, button four
is easy way for us to keep track of that.
42:37 - And so we want this to be a button. And we
want it to go in route. And we want the text
42:43 - of the button to say one. All right, now we
want to make the button bigger. So let's go
42:49 - pad x. And let's give this a 40. And let's
go pad y and give this a 20. You can make
42:57 - these any size you want. Now, we're going
to have to give this a command. And let's
43:02 - call this
43:06 - button ad. Right. So we need to create a button
ad so let's go deaf button underscore ad.
43:15 - JOHN.
43:16 - Let's just put that for now. Okay, so that
will work. So let's just we need nine of these
43:28 - right? Well, 10 actually, because we need
a zero, so 234-567-8910. Okay, so we'll just
43:37 - come through here and this will be button
to button three, button four, button five,
43:41 - and six button seven. Very exciting, right,
but Nate and buttons zero. And same thing,
43:49 - go through here and change them 23456789 and
zero. Okay, so we've created our buttons.
44:00 - Pretty simple. We also need, let's see, we
need a plus button and an equal to button
44:07 - and it clear the screen button. But we'll
work on those in just a bit. First, let's
44:11 - start slapping these up onto the screen. Now,
I'm going to pull up just a regular calculator
44:18 - that comes with the computer. And you can
see regular calculator start with 789456 and
44:23 - then end with 123. So we want to do sort of
the same thing.
44:29 - So
44:30 - and let's come out here and say, put the buttons
on the screen. Right? And up here. Maybe we'll
44:41 - go define buttons. So it's good to comment
your code. I'm very lazy at it as you can
44:49 - see. Okay, so let's go button underscore whoops,
two, two T's button underscore one dot grid.
44:59 - And now We want this to go row equals column
equals, and we'll fill these in in a bit.
45:10 - So button 123456789.
45:13 - All right, so
45:16 - let's just go 23456789. And I guess we need
one more.
45:29 - Zero.
45:31 - Okay, so where do we want these to go in the
road grid system, right? Well, button 123.
45:39 - Those go on the bottom. Let's start at the
top here. So the very top row is button Seven,
45:43 - eight, and nine. So 789, that'll be a row
one, row one and row one, right on the same
45:51 - row, and then column, column zero, column
one, column two. In fact, all of these can
45:57 - go 012012. Okay, so four, or five, six, those
are in the middle, the next row down. So that's
46:08 - row two, two, and two. And finally, the last
row is button one, two, and three. So that's
46:14 - 433, and three, finally, then we want row
four, and then column zero. So let's save
46:23 - this and run this guy and see how that looks.
We got an error. My click, that's something
46:34 - from the old. Let's pull this back up. Where
does it say Mike? Oh, this old button, get
46:43 - rid of that. Alright, save this. And run this
guy again. Okay, so it's looking pretty good.
46:55 - The buttons don't actually do anything yet,
but they look like buttons, starting to look
47:00 - like a calculator, right? Not bad.
47:03 - So
47:05 - what we want now is to, let's say, We want
a clear the screen button. And we want a equals
47:15 - to button. And we also need an addition button.
So let's go ahead and create those real quick.
47:22 - Let's go back up here. And let's create button
underscore add, then I'm just gonna copy all
47:31 - this. And so we want this to have an addition
sign in it.
47:38 - And
47:39 - actually, we need to change the padding because
it's a symbol, the width is a little bit different.
47:43 - So it's 39 instead of 40. So that works. Let's
see. Next, we need a button, underscore equal.
47:55 - And I'm going to do the same thing. But for
the text, I'm going to put an equal to sign.
48:02 - And we want to make this long button. So we're
gonna go 91. And we'll take a look and see
48:07 - what that means in just a second. So we have
an addition button, we've got an equal to
48:11 - button. Now we need a button underscore clear.
And paste this in to equal two signs. And
48:21 - we want this to say clear. And we want this
to be long as well. But 79 will do the trick
48:32 - there instead of 91. Because when it was 91,
we just had one thing now we've got all of
48:37 - these characters. So taking that into account.
We'll put this at 79. You can put this any
48:43 - size you want. Make it look however you want.
So let's head back down here. And let's go.
48:49 - So we want LET'S GO button Clear button. Add
48:56 - button.
48:58 - dot what was the other one add clear oh and
equal? Right? dot grid. Actually, copy this.
49:08 - Boom, boom. Okay, so now where do we want
these to go? Well, we can go. Let's see the
49:14 - button dot add. We want this on row equals
five column equals zero. And then right next
49:28 - to it. We want what? button equal maybe. So
let's go row equals five, column equals one.
49:41 - And then here below, we want row. What are
we on row three? row four. Want to clear in
49:51 - row four, I guess. And then column equals
one. All right. I think that's right, sir,
49:58 - I'm starting to lose track here. Let's close
this and run it again. Oh, that absolutely
50:08 - is not what we want is gone wrong here. So
zero, clear. Plus and equal are on the same.
50:15 - So let's see what I did here in the code.
So zero, and what do we say zero and equal
50:21 - are on the same? Let's run it again. I've
lost track. So zero and clear go together.
50:34 - Let's just do that right now. So zero and
clear. are both on row four, that seems right.
50:40 - And then add an equal or both on row five.
That seems right. Add an equal at an equal
50:48 - Hmm, what has gone wrong here? Oh, I know.
Since these buttons are spanning two columns,
50:58 - we need to put call spans of two into each
one. So where are we up here, we use this
51:08 - column span we need to do the same thing for
the see the clear and the equal to so clear,
51:20 - needs a paste the same columns man to and
what was the other one equal to an equal equals
51:30 - cost of entry as well. So okay, save this.
Let's run this again. And hopefully, that
51:37 - will do the trick. Boom, awesome. So now,
we've got this thing, it looks okay. But none
51:46 - of these buttons actually do anything. So
let's go ahead, close this. And let's look
51:56 - through here, here we have button add, let's
change this from button add, we want this
52:01 - to be a button click right, that makes more
sense to me, or what I was thinking. So just
52:07 - oops, go through here, change these real quick.
52:15 - Um, um, um, um, um, um, okay, so and then
up here, we need to change this button, add
52:27 - button, click. Okay, so when this gets clicked,
we want something to happen. Now, let's pass
52:34 - a parameter through here. And let's, let's
just call this number. Now to pass a null,
52:40 - pass a parameter into a function. Normally,
you would just go like this, and then you
52:46 - know, and then and do that, right. But you
can't because we can't use these parentheses.
52:54 - If you remember back, when we first learned
about buttons, you can't pass parameters with
53:00 - these buttons like that, but you can't do
it, it just takes another sort of thing. So
53:05 - what we need to do is something called a lambda,
we use a lambda, so it's a lm, B, da, and
53:11 - then lambda and then a colon. And then you
can do your thing, right? Like that. So let's
53:19 - go through here, and change each of these
to that. Little bit new here, but
53:28 - more.
53:32 - Now what we want to pass into each one of
these is what the button number is, right?
53:42 - So for button one, we want to pass in one
for button, 223456789 and then zero. And then
53:54 - these will deal with later. So now, let's
just take what we've passed through here.
54:05 - And then just First things first, we want
to delete what's already in the box. Right?
54:16 - And then we want to insert so he dot insert,
and I had to do this the other day, whatever
54:25 - that number was on to the thing, right? And
I think that's all we want to do. So let's
54:31 - save this and run it and see if that worked.
So we have 78922135. So now if we want to
54:44 - do like a bigger number 55
54:48 - that becomes a problem, right?
54:54 - We can only sort of enter one thing at a time
this way. So we need to take that into account
55:01 - with our code here. So it's pretty simple.
Instead of deleting what was already in there,
55:10 - we can just go. We could just leave it like
this, save this and run it. It's not ideal
55:19 - may not even work, I'm not sure. Let's see.
So 587, see what's going on here. Say I want
55:28 - to put in the number. Let's close this and
run it again. Say I want to put in the number
55:35 - 108 108. Well, it says 801. Right. So we need
to fix that, hit back over to our code. And
55:44 - we want to look at button click, and, oops,
come back. And what we have here is, we need
55:54 - to insert the number plus whatever's already
in there. So let's create a variable. And
56:03 - let's put, let's call it current, the current
thing that's in there. And we'll put that
56:07 - equal to e dot get. Remember, we learned how
to do this few videos ago. All right, so now,
56:13 - we can kind of combine these. So we want the
current one to be listed first. So we'll go
56:20 - current, and then plus number. Now, this gets
tricky, because the plus will concatenate,
56:27 - but it also adds right, so if we're talking
about numbers here, we need to make sure that
56:32 - these are strings and not integers. So I'm
just gonna go I'm going to call a string function.
56:38 - And we can make sure that this is a string
probably already is, but this one, we want
56:43 - to absolutely make sure as a string, because
we're passing it in as an integer. If you
56:47 - come down here, you can see these numbers,
these are numbers. If we were passing it like
56:51 - this, we can leave it like this. And we wouldn't
have to convert it to a string because that
56:56 - is a string. So however you want to do this,
I'm going to leave it like this, and just
57:01 - put it like this. So let's go ahead and do
this. Now. Let's save this and run it, but
57:06 - there's going to be a problem. And you'll
see what that is right away. So if we go,
57:13 - say we want 15, one, five, it becomes 151.
If we do seven, now it's 1517151. Because
57:23 - it's not deleting what's in there first, which
we need to do that before we then put the
57:29 - new number on. That makes sense. So to do
that, what we want to do is after we make
57:37 - this current variable, and we don't really
need to create a variable for this, we could
57:43 - have just put a dot get right here. And that
would have worked. But I like to do it this
57:48 - way. Before we do that, we need to sort of
do a delete thing. So let's go e dot delete.
57:54 - Oops, we want to delete if I could type. There
we go. We want to delete everything that's
58:00 - in there. So we've done this before we just
go zero and then call it end. So this should
58:05 - work. Let's run this again.
58:08 - Let's run it.
58:11 - Hopefully this will do it. So 105. Right,
105875. Okay, so that seems to work. So what
58:22 - do we want to do next? Well, let's clear button.
It would be nice if that works. So let's just
58:26 - knock that out real quick. This is really
simple. And in fact, we already did this right
58:32 - here, right? So we just need to put this in
a function. So let's come down here to our
58:39 - Clear button. And right now it's calling button
clicks. Let's change this to button. Clear,
58:47 - right. Now we need to create this function.
Let's just do this up here. Let's go
58:54 - define
58:55 - button clear. You don't need to pass anything
into it. Let's make some space here. And all
59:01 - we need to do is e dot delete. So let's save
this and run it just to make sure that worked.
59:11 - So we're getting 555896 clear. I didn't work
at all
59:17 - huh?
59:20 - Your button object is not callable. Oh, you
know what? We really don't need lamda this
59:34 - thing. We can just go command equals player.
Let's try this. See if that works. zoop
59:48 - pull this over. 5058
59:52 - clear 666985 there. Okay, so that seems to
be working well Let's clear the screen. Okay.
60:03 - So what do we want to do next? Well, let's
I guess the only thing left to do is really
60:10 - dive into these two. Now this gets a little
bit tricky. It's not bad. But there's a lot
60:15 - of different ways you could do this. And,
to tell you the truth, I didn't put a whole
60:19 - lot of thought into it, I just did with the
very first thing that I could think of. So
60:25 - you could probably do it more elegantly. But
we'll do it this way, just to see. So what
60:30 - we need to do is come down to our Add button.
And right now we're doing button clicks. So
60:39 - let's change this to button dot
60:41 - add.
60:42 - Alright, so we need to define button underscore,
like you call it dot underscore, add, and
60:52 - write that. Now. Here's the process, like,
let's run this thing again. Just to sort of
61:05 - talk about my logic here. So let's say we
want to add two plus two, right? Well, when
61:15 - we do that, when we click the two, it needs
to read that into a memory of some sort. So
61:21 - it needs to remember that we put two in there,
right. And when we click this, it needs to
61:26 - clear this so that we can type in the next
number, right. And then when we hit equal,
61:32 - it has to take whatever we've written in the
second time, and add it to that thing that
61:37 - it remembered from the first time. That makes
sense. So if we enter a two and click here,
61:42 - it has to remember to, because then when we
add four to it, then it has to take the four
61:48 - and add it to that first thing. And since
we're dealing with functions here, variables
61:55 - can't really be passed from function to function,
we're calling two different functions, the
62:00 - add function and the equal function. So how
do we pass those numbers? Well, we can use
62:05 - a global variable. So that's what I'm going
to do. So to do that, we would just come on
62:12 - over to our source code, go come back.
62:15 - There we go. So our button add.
62:20 - One thing we need to do is pass a number,
let's call this the first number is the first
62:25 - number somebody types in, right. So over here,
in button add, we need to pass e dot get right.
62:37 - Or
62:40 - we could
62:41 - come up here and instead of passing that number,
we could just pull it ourselves. He
62:48 - get so
62:49 - I think instead, yeah, let's do that. We'll
be a little simpler. I'm just making this
62:53 - up as I go. Okay, so instead of this whole
thing, we don't even need the lamda anymore,
63:01 - because we're not going to pass anything.
We're just going to call the button add function.
63:06 - Okay, so let's call this first underscore
number and set that equal to e dot get.
63:14 - And then we need to make sure that it's a
number, right? So Well, we can do that in
63:20 - a bit. Right? Now, we need to create a global
variable, so we call global. And let's instead
63:28 - of first number, I'm just going to call this
f num first known for first name, right? And
63:38 - we need to then assign something oops, changed.
I mean, f underscore num. Stop doing that.
63:46 - Okay, so now we need to assign that something.
So let's go f, num equals, and let's call,
63:54 - we need to make sure this is an integer, and
it's called first number. All right, so now,
63:59 - f num is a global, we can use it outside of
this function. And that'll work right. So
64:09 - let's go ahead and then clear that text box.
Remember, we need to do that. So we'll do
64:15 - the same thing we've done before he delete
and then zero and end. Okay, so let's save
64:23 - this and run it. We won't be able to see if
it works, but we'll be able to see if it's
64:28 - working. Let's see, at least so if we go five
plus, okay, it disappears. Okay, so that's
64:35 - working. So now, the only thing that's left
to do is to do our equal to one right. So
64:46 - let's come down here to our lambda section.
So button equal right here and change this
64:58 - from button. Click to Buttons equal. And same
thing, I don't think we need to send anything
65:06 - through a lambda, we just call the button
equal function. So let's come over here and
65:11 - define button underscore
65:13 - equal.
65:16 - Okay, so what do we want to do? Well, first
things first, we want to grab a variable.
65:26 - And let's call this second underscore number,
and set that equal to e dot and get, right.
65:33 - So this is going to whoops, this is going
to pull in whatever's sitting in that thing
65:38 - in the text box, right? So now we need to
do we need to, let's go ahead and delete just
65:45 - to make sure. And that there's nothing sitting
in that box. Now we need to let's create a
65:53 - variable called answer. Well, we don't even
really need to do that Dewey. We can just
65:58 - sort of E insert, let's go e dot insert. We've
done this before. So same things zero. And
66:07 - now
66:10 - what
66:11 - do we want to insert? Well, we want to insert
the answer. And the answer is our F underscore
66:16 - num plus. Let's say make sure this is a variable.
Or an integer. Second number. Look, right?
66:30 - So if num is our global, from our button,
add, yep. And then second number is that now
66:39 - again, we could just do this he can get, instead
of putting into a variable by like, put it
66:44 - in a variable, it's easier to read, come back
later, we can figure it out easier if we forgotten.
66:50 - Okay, so let's save this and run it. I have
no idea if this is going to work,
66:54 - but it should.
66:56 - So let's go five plus two, it should be seven,
right? Let's, let's keep going plus three
67:09 - equals 10
67:11 - plus eight
67:14 - equals 18. Clear? eight plus two equals 10.
Pretty cool. So again, this is a very, very
67:24 - simple calculators, just doing one stupid
thing, adding, if we want to multiply, divide,
67:29 - do all the other things subtract, it becomes
a little trickier because we have the same
67:33 - equal to button. And if we look at our code,
the equal to how does the equal to button
67:39 - know if you're subtracting or adding or multiplying?
How does
67:44 - it know?
67:45 - So now, when we go say five plus two, we hit
the equal to sign it as well, the equal to
67:53 - sign knows to add, because that's the only
thing to do. So we're saying just add, but
67:58 - we're going to build out different buttons
for division, subtraction, multiplication,
68:02 - and when that happens, so if we go two, times
five, for instance, and then hit equal, how
68:08 - will the equal to button No, we want to actually
multiply or divide or subtract or add or whatever.
68:15 - That's the real big thing we need to look
at in this video. And it's pretty easy. We've
68:19 - already sort of seen the solution. When we
use these Global's we're going to do the same
68:23 - thing, we're going to create a new global,
and we're going to pass addition, we're gonna
68:27 - pass multiplication, we're gonna pass whatever
is we're doing for each one. And then we'll
68:33 - do an if statement just to go through the
equal to button. And also, if it's addition,
68:37 - do this, if it's subtraction, do that, etc.
So before we do that, we need to build a bunch
68:44 - of more buttons. So I'm just going to copy
this ad. And let's just come down here and
68:51 - we need three more. So let's call one of them.
Subtract, and then more to apply. I can Lord
69:05 - what happened there, multiply and then divide.
And then up here, we need a new command, we
69:13 - need button, let's call it button, subtract,
and call this button multiply and call this
69:23 - button. Divide, right. Okay, so we need to
also change these so instead of the addition
69:31 - sign, we need subtraction. Let's use this
star for multiply and for divide that now
69:39 - let's go that that's the sort of divide sign
right. So Okay, that looks pretty good. So
69:46 - now we need to come down here to our grid
system. And let's see where were we button
69:52 - equal to that's row five. So it looks like
we need button underscore y Subtract maybe
70:04 - dot grid, and then we want row one, row six,
I guess. And then column equals zero, no column
70:15 - span. So I'm just going to copy this two times.
And instead of subtract, we have what? The
70:22 - next one, let's go. Multiply. And this one
will be divide. So row six, column one and
70:32 - column two. Okay, so let's save this. Oh,
wait, first we need to get an error. Otherwise,
70:37 - we need to create these button, subtract,
one multiply and button divide. functions.
70:45 - Let's just go button subtract. For now let's
just go return. And same thing here. Well,
70:54 - actually, we can just copy this whole thing.
Two more times, instead of subtract, we want
71:00 - multiply and hear what divide sounds about.
Right? Okay, so let's save this. Give this
71:10 - a run, just to see that, you know, oops, actually,
we need to close the old one ere we go. Run
71:17 - it again. Oops, button, subtract invalid syntax.
But it
71:21 - got the Define. It's Friday people. That's
how we that's how we do Friday here in Vegas.
71:31 - Alright, save. Now let's run this. All right.
So okay, this doesn't look great. This needs
71:41 - to be a bit bigger. Let's just do that. So
the subtract one needs to be a little bigger.
71:45 - So subtract, or we add, subtract padding,
let's go 40. Save this. It's just sort of
71:54 - what you do with kinter. You kind of mess
around. Okay, it's still not quite. So let's
72:00 - go 41. There we go. Save this. So
72:06 - run.
72:09 - Okay, so
72:12 - not great. And there's a lot of space there.
So let's add one and one to each of these.
72:22 - So instead of 39, let's go 40. And let's go
40 for this one to save this. Run it again.
72:30 - All right, that's looking much better. Things
are lining up mostly. Let's go one more for
72:41 - the divide one just to see, or anyone. lucky
number 41. So pull this up.
72:50 - Okay,
72:52 - that's looking pretty good. I think we'll
just leave it like this. Now these buttons
72:55 - don't do anything yet. We need to actually
build that functionality into it. So first,
73:01 - let's go up here to our button add right.
So here, let's create our new global we want
73:11 - to global, and we want to call it math. And
for button add we want math to equal, say
73:16 - addition. Right? So everything else pretty
much stays the same, right? So let's come
73:24 - up here. And let's just copy all of this to
our subtract. And here. Instead of addition,
73:31 - let's call this subtraction. But everything
else is gonna stay the same, right? I think
73:38 - so. Finally, not finally. But for multiply.
Let's go mall duplication. Right? And then
73:48 - for division. Let's call this division. Okay,
so I think that will work. Now, we need to
74:01 - sort of play around with our, what do we call
it? slick here button click. What do we got?
74:11 - What's the equal to button equal? So where
is our button equal? Err, it is. So here,
74:22 - this is what it used to be right? We just
take this number, which probably will stay
74:30 - the same. And then we delete,
74:33 - which
74:34 - probably will stay the same. And then we insert
the two numbers together f num, which is the
74:41 - first number and then whatever the second
number is, and before we just had this ad,
74:46 - right? Obviously, we can't do that anymore.
Because depending on which button is clicked
74:53 - division, multiplication, subtraction, or
addition, it will do those things. So how
74:57 - do we do that? Well, we need a basic if statement.
So very simple just if math equals Remember
75:04 - to equal to signs for conditional statements,
and then what's the first one? Let's call
75:09 - addition. And then, if that's the case, we
want to do what we did before, right? Just
75:21 - add the two together and then pop it up on
the screen. Right? So that seems to work.
75:26 - So let's just copy this a few more times.
Oops, there we go. 1234. Does that seem right?
75:37 - So addition? Let's call this one subtract.
subtraction, if I can type.
75:46 - More
75:47 - duplication, you can see how the text editors
filling this in, and vision. And we don't
75:55 - need this one too many. Okay, so subtraction,
we're going to subtract for multiplication,
76:03 - we're going
76:04 - to
76:05 - multiply, and for division, we're going to
divide. Alright, so is that gonna work? I
76:12 - think that'll work. Let's fire this thing
up and take a look. See what I did wrong.
76:17 - Almost certainly something. So let's go two
plus three equals five. Yes. Let's go two
76:26 - times five equals 10. Yes, that works. Let's
go 10 minus three equals seven. That seems
76:37 - to work. And let's go 10. pips, clear 10 divided
by two equals five. And notice it's 5.0. It's
76:46 - converting this to a float, which is kind
of weird, but necessary, because look, if
76:54 - you clear this and go 10 divided by three,
right? The answer is 3.33335. It's definitionally.
77:00 - a decimal number, so it converts it to a float
for us, which is kind of cool. So all right.
77:06 - I think that works. Right. Now, this is ugly,
right? I understand that we didn't put a lot
77:10 - of thought into making it look good. But you
can do that go through here, make the buttons,
77:15 - different sizes, different colors, you know,
I like to pull up the calculator that comes
77:19 - with Windows. Right? So maybe, as we haven't
talked about how to make menu stuff, and he
77:26 - will talk about that in the coming up videos
here. But maybe try and make it look like
77:30 - this if you can, for the most part, right?
See if you can do it. There. Look, there's
77:35 - other things here. There's square root, there's
percentage looks like fractions, all kinds
77:45 - of stuff. So maybe, as an exercise, see if
you can make yours look like this and act
77:49 - like this. That'd be kind of cool. All right.
So I'll leave that to you. I'm more of a coder
77:54 - guy, and not really a design guy. So mine
looks kind of stupid. But I think you understand
77:59 - the functionality, how to do these things
with the code. And this is a really simple
78:04 - way, there's probably lots of different ways
you can tweak this equal to button to work.
78:08 - But just off the top of my head, I was like,
Oh, just do an if statement. That'd be quick
78:12 - and easy, right? So that's what we did, created
our global and just kind of works. We're gonna
78:20 - look at icons, images and exit buttons using
kinter and Python. Okay, so we finished up
78:27 - our calculator app, let's create a new file.
And I just put the basic, you know, kinter
78:32 - startup code that we've always used. And let's
go ahead and save this. As What do we want
78:38 - to save this as doesn't really matter? Let's
just call it images. Okay, so first thing,
78:44 - you'll notice I put the title as learn to
code academy.com. put whatever you want. So
78:49 - now the first thing we want to do is add an
icon. And by icon, let's see, can we just
78:54 - run this real quick. So let's go Python will
recall this images.pi. So, right now, this
79:04 - little feather, that's an icon, right? That's
a little little image that's up at the top
79:08 - of every program you've ever seen. So here's
our GUI or terminal thing, there's a little
79:13 - icon up there. Here's our Sublime Text Editor.
There's a little icon up there, all windows
79:19 - type programs have little icons at the top.
So how do we do that? Well, I've taken an
79:24 - icon, which is an Ico file dot Ico, it's basically
a PNG file. That's usually like 16 by 16,
79:31 - and width and height, or 32 by 32 or 64. By
64. It's you know, it's a square thing. And
79:39 - usually you create them using Photoshop or
whatever, I'm not gonna talk about how to
79:43 - create them. In this video. I'm gonna assume
you have one and you're ready to use it. So
79:47 - how do you use it? Well, it's pretty easy.
Just right up here at the top. I like to put
79:51 - it right underneath the title. Let's just
go route dot, icon, bitmap, be it ma p So
80:00 - that's what we're calling an icon bitmap.
And then you just pass into the parameters,
80:05 - the location of the file. Now I'm going to
put this mine is in c, c, forward slash
80:11 - gooey, I
80:12 - put it in the same directory. And I called
it kotomi dot Ico. Remember, these are icon
80:17 - files. So if we save this, and run it, let's
pull it over. You can see now we have a little
80:29 - kotomi icon, this is the same icon that I
use on my Kodi website, on the website is
80:34 - called a fav icon. In real life using programs
like this, it's called just an icon. So very,
80:40 - very simple. Very, very easy to do. And that's
that. So what else do we want to do? Let's
80:47 - now very quickly talk about an exit button.
I'm not sure if we looked at this earlier.
80:53 - But it's really easy. Let's just create a
button like we've always done, I'm going to
80:57 - call a button quit. And it's going to be a
button, and we want to see where we go. And
81:02 - we want to put it on our route thing. And
then the text for this, I'm just going to
81:09 - type exit program. Alright, and now the command
is root dot quit. So root is obviously this
81:19 - root instance of this TK class that we've
created. Anytime we do anything we call root,
81:26 - right? You just throw a root dot quit Python
is an object oriented language. So we can
81:30 - do object oriented things like putting a dot
and then some other thing on it. That's how
81:35 - you do that. So now we can just go button,
quit dot, let's just pack it in there. Alright,
81:42 - so let's save this and run it.
81:44 - Boom,
81:45 - grab it and pull it over. So he says have,
you know just this one little button, and
81:51 - if we click it, boom, the program ends. Very,
very simple, very straightforward. So that's
81:57 - all I'll say about that. Let's push this down
to the bottom here. Now, I want to talk about
82:02 - using images and using images. At first, it's
a little tricky because you have to import
82:07 - some things, and you have to do some stuff.
So kinter has a built in system for using
82:13 - images. And you don't have to import anything,
you could just do it. But it only supports
82:18 - two image types. gif, gi F, which nobody uses
anymore. And some other thing that I don't
82:25 - even remember p n m or something like that
doesn't matter. It's an obsolete image, you're
82:30 - never going to use it. So to use real images
like JPEGs or PNG files, we have to import
82:36 - a whole other module, and then do some a little
bit of Voodoo. So the thing we need is called
82:42 - pi L and pi L stands for Python image library.
And it's old, and it doesn't really work anymore.
82:50 - So there's a new one called pillow, it's a
fork of pill that they improved upon. So we're
82:54 - going to use pillow, and we need to install
pillow, but we'll reference it here as pi
83:00 - L. I'm not sure why that is kind of weird.
So you would think it would be from pillow
83:04 - import. And then the thing but it's not. It
is from capital P capital I capital L. And
83:13 - we want to import image t k, capital T, lowercase
K, and also image image. Okay, so that's how
83:25 - we reference it. But we have to still now
install this on our system. So we do that
83:31 - on the command line. And we install this like
we install anything I'm gonna go pip install
83:35 - PIP is the Python package manager thing, right
comes with Python. And if this doesn't work,
83:42 - it means you didn't install Python correctly.
When you install Python. When you install
83:46 - Python, there's a little screen that pops
up right at the beginning that says Add Python
83:50 - to path and you need to check that box. If
you didn't, Pip won't work. If you did, Pip
83:57 - will work. So if this doesn't work for you,
you're gonna have to uninstall Python, go
84:00 - back and re install it and check that box.
Or you can google how to add Python to path
84:05 - windows. And you'll see a tutorial on how
to do it manually. So pip install and we want
84:11 - to install pillow p i
84:13 - ll o w capital
84:14 - P,
84:15 - I think
84:16 - Yeah, so I've already installed it. So I'm
getting a thing that says it's already been
84:19 - installed, you will get something else that
shows it installing a little thing will pop
84:25 - up on the screen like you know downloading
type deal. So we can make sure this has been
84:29 - installed by running Pip. Pip freeze if our
EEZ and if we look through here, all those
84:37 - things I have installed, there is pillow right
there. So okay, that seems to work. Let's
84:42 - clear the screen here. So now we've installed
it. We're referencing it from our
84:49 - program here.
84:50 - How do we actually use this thing? Well, it's
a little bit more complicated than normal,
84:54 - but just this is like one extra step. It's
pretty simple. So I'm going to create an image
84:58 - I'm going to call it image IMG Or let's just
call it my IMG, right. And it's going to be
85:06 - an image, TK, dot photo image, right. So that's
sort of similar things we've seen before.
85:17 - Like with button, we call the button. Here
we're calling the image TK, because that's
85:22 - this thing here. And then inside of that we're
calling dot photo image, right. So in here,
85:27 - we want to go image dot open, because we're
gonna open the image, and then just pass in,
85:34 - whatever your thing is. Now, I have a picture
called aspin dot png, and I copied it to our
85:42 - GUI directory. So if we pull this up, so this
is the directory, we've been saving all our
85:50 - kintra files and right, so here's that icon
that I saved, I saved it into this folder,
85:55 - and here's aspin, I saved it into this folder.
So since it's in this folder, I don't have
85:59 - to put this stuff on there. In fact, I really
don't need to put this stuff there either,
86:04 - I just did it to show you. So since it's in
the same file, or in the same folder as the
86:10 - program, we could just leave it like this.
So right? Usually, everything in kinter is
86:17 - a two step process, we define the thing, and
then we put the thing on the screen. So this
86:21 - is a three step three step process, we define
the image, and then we put the image in something
86:27 - else. And then we put that something else
on the screen. So you can add images to just
86:32 - about every widget in kinter, I think I think
you can add them like the buttons, make them
86:37 - the background of a button of a text box,
text box of anything. So I'm just going to
86:42 - use, I'm just gonna call this my label, create
a little label,
86:47 - and set this equal to a label, we've done
this before. And then inside of here, it's
86:53 - a little
86:54 - bit different. We're just gonna go image equals,
and then my oops, my image, right. So now
87:03 - we've sort of defined this label, now we need
to just put this label up on the screen, so
87:07 - we can go my, my label dot pack, pack it up
there. Okay, and that should work. So let's
87:17 - go ahead and run this guy. There we go. Now,
and it worked. Here, we, this is a picture
87:27 - of me and my Husky aspirin, she is hurricane.
That's pretty cool. So you, it's just that
87:38 - easy to add images to your In this video,
we're going to create this cool Image Viewer.
87:47 - And it's just it's a pretty simple Image Viewer.
But you can see we got buttons, we can scroll
87:52 - around through different pictures, we can
go forwards, we can go back, that button disables
87:58 - when we get towards the end. And it's pretty
cool. Okay, so I've created a new file. And
88:02 - this is basically just the code that we worked
on in the last video that shows one image
88:06 - up on the screen, the big change I made was
I created this images directory inside of
88:11 - our gooey directory. And the reason why I
did that is because we're gonna have a lot
88:14 - of images in this program. So when you have
more than one image, it's always a good idea
88:19 - to create a separate folder for those images.
And if we pull this up, we can see here it
88:23 - is just images. And I've put a bunch of images,
just random pictures in there, it looks like
88:27 - I've got five of them. And we'll take a look
at that in just a bit. So I come up here and
88:32 - let's save this new file as what viewer that
py. Sounds good. And let's run Python viewer.pi
88:41 - and see what we have. We just have it looks
like just that image. Looks like I forgot
88:47 - even to put the exit button there. So let's
go ahead and do that real quick. Well, we'll
88:53 - do that in just a minute.
88:54 - So
88:55 - in the last video, we just had one image,
right, so it's pretty simple to work with
89:02 - one image. And that's just this image right
here. Now we want a whole bunch of images.
89:10 - So I'm just going to copy this, and let's
go to three, four, or five. And I'm going
89:16 - to name them image 12345, just to make it
easier. And so the images are aspirin and
89:23 - aspirin one, aspirin two, and then
89:27 - me one.
89:30 - Me too.
89:33 - And me three, if I can type three. Alright,
so there's lots of different ways to sort
89:39 - of scroll through things. But in Python, a
really easy way is just to use a list. So
89:44 - that's what I thought we would do here. And
I'm just going to call this an image list.
89:50 - And then set this equal to and it's just going
to be a basic Python list. And let's go my
89:56 - underscore image one and I'm just going to
copy this and paste it 2345 times. Okay, so
90:06 - then we need to change this to 234, and five.
And you're probably familiar with Python lists.
90:18 - If we want to access an item in the list from
now on, we can just call image underscore
90:24 - list. And then the number of the thing and
remember, lists start at zero. So this is
90:30 - the zero with item. This is the first item,
second, third, fourth. So if we want, say,
90:35 - for instance, this one, that would be 012,
we would call image list two, right? So very
90:43 - easy way to sort of scroll through any sort
of list of things. That's why it's called
90:48 - a list. And this will make it a lot easier
for us to cycle through those, as we click
90:52 - the buttons, we'll just, we'll just access
the next item in the list. That'll be pretty
90:57 - easy. So okay, so we've got this my label
and it's my image is start out with my image
91:03 - one, since we changed the name of this. And
instead of pack we don't want to pack anymore.
91:08 - Since we're doing more than one thing, let's
create a grid. And let's go row equals zero,
91:15 - column equals zero. So we want this to be
the very first thing. And we want this to
91:20 - go columns span equals three. And the reason
why we're going to do that is because below
91:26 - the image, we're gonna have three buttons,
a back button, a quit button, and a forward
91:30 - button. And each of those buttons will be
on its own column. And we want the image to
91:34 - span all of those columns. So okay, that's
pretty good. Now let's create our buttons
91:39 - as well. We want to create our buttons right
here. Now, let's do the buttons. Down here,
91:48 - we'll see why in just a minute here. So what
do we need, we need a back button,
91:56 - and a forward button and an exit button. So
let's go button underscore back and set that
92:05 - equal to a button. We want it in route and
we want the text to equal what two backers
92:14 - think. Now we're gonna have a command for
this, but we're gonna put that in just a minute.
92:20 - So let's go this and this. So this, let's
call this middle one button, exit. And let's
92:27 - call exit program. And for here, we want the
command to be what route dot quit, we'll learn
92:37 - how to do this in a previous video. And then
for the last one, we want buttons change enabled
92:43 - us to forward.
92:46 - And we want
92:47 - this to have arrows going forward. And like
I said, these are going to have commands.
92:52 - But we'll mess with those in a minute. Now
let's put these on the screen. Let's go button
92:57 - back dot grid. And then what row equals one,
column equals zero, because our image is row
93:10 - zero, so below that is row one. And so button
underscore exit dot grid, that will be a row
93:19 - one column equals one. And then finally, button
underscore forward dot grid. We want this
93:29 - to be row equals one and column equals to
look right. Let's save this and give it a
93:38 - quick run. Make sure we didn't mess anything
up. We probably did. Because it's Friday here
93:42 - in Vegas. Okay, so we got exit program. I
don't really like that capitalized, we'll
93:48 - change that. Right now. Nothing happens, the
exit button works. So that's cool. So let's
93:53 - change this real quick to
93:54 - exit. Oops,
93:57 - maybe spelled right exit program lowercase.
So okay, we've got the framework here. Now
94:04 - we need to start kind of building in the functionality
of the buttons. So what we're going to do
94:11 - is we're going to create a couple of functions
to handle the buttons have forward function
94:16 - and a back function. And actually, let's just
come up here. Where do you think we want these
94:23 - right under the label grid, let's say we want
these to go right at the top. So let's go
94:28 - define forward. If I could type, and let's
just return something and define back and
94:42 - call this return something. Okay, so we've
got these things. Now let's head over to our
94:48 - button. And let's add these commands. Man
equals now we're going to need to pass something
94:57 - through these buttons because every time we
click the Buy We needed to know that it's
95:01 - the next one. So we're going to start out
with, you know, a specific one, then every
95:06 - time we click the button, we need to add one,
and then pass that through. So let's go, we
95:11 - need to do a lambda, lamb da, we've learned
in the past, anytime you want to pass something
95:17 - through a button command, you have to do a
lambda. And this is the back buttons. So let's
95:21 - call this back. And we're going to pass something
or other we don't know what yet. And for the
95:26 - forward button, let's go command equals lamb,
lamb da, and then we're going to call forward,
95:36 - and then something. Okay, so what do we want
to pass through these things? Well, actually,
95:47 - the first time, we don't need to pass anything
in the back. So let's take out the lambda.
95:53 - And let's just call back. Why is that, because
when we fire up the program for the first
95:58 - time, it'll already be on the first image.
And we don't want to be able to click back.
96:02 - So we don't need to pass anything in that
first time. So we can just leave that like
96:06 - this. But the forward one, we want to pass
two, and we'll see why two and not y one in
96:14 - just a minute. But think it through like the
first one, the first image is image one, right?
96:19 - So we want to the back button, or we want
the four button to go to the second image.
96:24 - So we're just gonna pass two, right? So up
here in our function for four, let's start
96:33 - to build this out. So what do we want to call
this image? image number doesn't really matter
96:41 - what we call it. Now, we need to do things
in this function that work outside of the
96:49 - function. And we've done this in the past
using global variables. So we're going to
96:52 - do that again this time. So let's call it
global. All of our three things, we basically
96:57 - have three things my label, global, button,
forward, and global button, back, and we're
97:07 - going to do the same thing in our back functions.
So I'm just going to copy these in right away,
97:14 - right. So you'll see exactly why we do this
in just a second. So I want to explain it
97:20 - now the first thing we want to do when this
thing gets called is we want to take the image
97:25 - that's already there and get rid of it, right.
So when we click forward, the next image will
97:31 - show up. But right now, the last image is
still there. So they'll overlap, and we don't
97:37 - want that we want the first image to disappear.
And to get rid of that we use this grid underscore,
97:42 - forget, it's just an internal function that
the grid system can use to sort of get rid
97:47 - of something. So our images in my label, so
we're just going to sort of delete that from
97:53 - the screen. So let's save this and just see
if that worked
97:56 - real quick.
97:57 - So let's pull this up. So here's the first
image. If we click the button, boom, it disappears.
98:02 - So so far, so good. That seems to work. Now,
we need to tell the program what the new image
98:12 - should be. So that's my underscore
98:14 - label.
98:17 - And it's going to be we're just going to define
the whole thing all over again, right? So
98:21 - it's image equals now What image do we want?
Well, we need to reference something from
98:29 - our list of images, or image list list. So
that's this. But now which one do we want?
98:37 - Well,
98:38 - when we first click the button, we're passing
in the number two. So this image number is
98:46 - number two. But we don't want the next number
to be the same. We want it to be the next
98:55 - number. So that's plus oops, plus one. So
the image we want to show is the current image
99:04 - plus one, which in this case, is going to
be no it's going to be minus one, right? Yeah.
99:14 - Okay, so we passed into you would think we
want the second image, but don't forget that
99:24 - list, start at zero. So the second item in
the list, this thing is actually called the
99:32 - first item. So since we passed two in here,
we need to subtract one to get the one one
99:38 - if item, which is the second is very confusing,
but think it through it'll it'll make sense,
99:46 - right? Okay, so that works. Now. We need to,
strictly speaking, that should put the next
99:54 - image on the screen. So let's see if it does.
Let's call this Click the button. Boom did
100:02 - not work. Why not? Oh, because we defined
the label. But we didn't actually put it up
100:10 - on the screen yet, right? So we can just come
over here and copy this. It's going to it's
100:16 - going to always be the same, right? So okay,
so let's save that that should work. Let's
100:22 - run it and see why I like to run things as
we're coding. So you catch these little things.
100:27 - Boom. All right, that works. Okay, so far,
so good. Now, you'll notice when I click the
100:35 - Next button, again, it didn't go forward,
why not? Because we now need to update it,
100:42 - it's got the old one on there, the two, right,
so we need to update that. So let's do that
100:47 - right here. Let's call spacer button, underscore
forward.
100:55 - And that, oops,
100:56 - that equals what a button just redefined the
whole thing all over again, root. And we want
101:03 - the text to equal to put two forward arrows,
and we want the command to equal lamb. I can
101:14 - type lamb, da, there we go. Lambda, we want
to call the forward function. And we want
101:24 - it to be whatever this number was.
101:31 - plus one,
101:32 - why because it's the four button. And every
time we click it, we want the Next button
101:36 - to the next image to be sort of ready to go.
And then when you click it, boom, the next
101:41 - image will be ready to go in the button itself.
So okay, that seems to work. Now, we also
101:46 - need to do button underscore back,
101:49 - we need to
101:50 - update the Back button as well. So that's
route, the text is going to be two back arrows.
102:01 - And the command is going to be lambda MBDA.
For some reason, I can never remember how
102:08 - to spell lambda back. And then here, it's
going to be again, the image number.
102:15 - But we want the previous one, right. So instead
of plus one, it's minus one. Okay, that should
102:24 - work. Now, oops, we need to actually put those
guys on the screen. So I'm going to come down
102:31 - to see button back button forward. Just copy
these, because their position never changes.
102:41 - Right? back and button forward. Alright, so
let's save this and see if that worked. So
102:52 - Boom, boom, boom, boom, up. Last one, it disappeared.
So one thing we need to also do is, we need
103:05 - to do something to see Hey, is it the last
button is it the last image, if so disable
103:10 - it right, so that you can't click to the sixth
damage, because there isn't a sixth damage.
103:15 - So we're going to need to do that. Let's just
put this right in here don't really matter.
103:20 - Let's go if and then image underscore number
equals five. Image number is this image number
103:30 - that we're passing in the image number, right?
If that's the case, then we need our button,
103:36 - underscore forward to equal let's just define
this as route. And a text equals to forward
103:47 - things, and the state equals disabled. Alright,
so let's save this and run it. See if that
103:54 - worked. Boom, over, so first image, second
image, third image, fourth image, fifth image.
104:03 - And sure enough, it's been disabled. And we
can't click forward. So that works. So now
104:09 - we need to work on this button. We haven't
done anything for it yet. But it looks like
104:14 - our forward button is completely done. So
let's come over here and I'm just going to
104:20 - grab this grid forget because the same thing
with the Back button, we're going to want
104:25 - to delete whatever image is there before we
put in the new one. And I think we can just
104:31 - grab all the stuff from up here.
104:34 - And paste.
104:37 - We just need to make a few changes. So my
label that will stay the same right? I think
104:49 - yes. The button forward will stay the same
and the button back will stay the same and
104:59 - that Because
105:00 - let's see, let's look at our defined forward
what we're doing here with the Back button.
105:11 - We're taking whatever image number and subtracting
one. So when this starts, it's already subtracted
105:19 - one. Now, if we click it again, we need to
just subtract another one. But all that stays
105:24 - the same, I think. Yeah. All right. So then
we need to just put those things up on the
105:34 - screen like we've done before. So I can copy
this exact same stuff. Alright, let's save
105:41 - this and run it. See if that worked.
105:44 - We went through that fast, but
105:50 - right off the bat, this is not disabled, we
need to disable that off the bat. So we'll
105:53 - do that a second. So forward, back up, that
doesn't work. forward, back. Okay, so what
106:01 - has gone wrong here.
106:03 - Back image number nine. Back
106:08 - takes zero positional arguments, but one was
given. Oh, we forgot to put our image number
106:18 - in there, okay. And pass that that variable.
So let's run this again. So forward, back,
106:27 - forward, forward, forward, forward, back,
back, back. Okay, it seems to work. But when
106:38 - we do that, it starts at the end. So we need
to right off the bat, figure out how to disable
106:45 - that. So let's come down here to the very
beginning, when we very first created that
106:52 - back button. Let's just go state equals disabled.
Save this, run it again.
107:02 - So now,
107:03 - right off the bat, it's disabled, so it won't
go any further. And now this one's disabled.
107:16 - Now, if we come back here, back Back, back,
oh, if we scroll and go back, it's still enabled.
107:24 - So what we need to do is the same thing we
did up here, we just need to do it down here.
107:32 - So let's pull it right in here. And go if
image underscore number equals and remember,
107:40 - double equal to sign is what you use for a
conditional statement. And so if that number
107:46 - is one, which is the first one, then our button
back,
107:54 - equals,
107:55 - just find this thing again, root, the text
equals to fact things and the state equals
108:04 - disabled. Okay, so save this. Give it one
more run. This should do it. We hope. So it's
108:14 - disabled. Here we go. All whoops, where'd
you go? Come back. We got all the way to the
108:20 - end that wants to say, Well, if we go back,
boom, that one's now disabled. forward, back.
108:29 - Okay, well, that seems to be working. And
that's it. So we went through that very, very
108:37 - quickly, you might have to go back and watch
the video again, posit a bunch of times. But
108:41 - the the main things to sort of keep in mind
is we created all of our images into a Python
108:48 - list. And if you're familiar with lists, it's
just a normal Python list. There's nothing
108:52 - t kinter. about this. And every time we click
a button, we're just going to reference we're
108:57 - going to create a little counter and just
reference the next item in that list. Show
109:03 - it up on the screen. Forget the one that was
there. Previous we haven't looked at this
109:07 - before this is new. Everything else we've
done in this video is pretty much stuff we've
109:12 - already learned except for that little thing
right there. And then every time we click
109:16 - that button, we just need to update the buttons,
which is why we created these Global's so
109:21 - that these updated buttons will work outside
of the function. And that's it. Pretty simple.
109:28 - Pretty straightforward. Granted, this is a
pretty cheesy little app, but I think it's
109:33 - a nice little exercise, and
109:34 - yeah, pretty fun.
109:35 - And 
this video, we're going to create this status
109:42 - bar here at the bottom that sort of updates
dynamically as we click the buttons. So the
109:47 - status bar is actually fairly simple. We're
just going to use a label. We've already used
109:51 - labels in the past lots of times we know how
to do that. But we're going to take a little
109:56 - twist to it. We're going to add a few new
things that you haven't seen before in order
109:59 - to sort of Make it look like a status label
in order to update it dynamically. And in
110:05 - order to sort of stick it to the bottom of
the screen like this. So to get started, let's
110:12 - just create a new label, I'm going to call
it status and set this equal to label. And
110:20 - then we want this to be in route and we want
the text to equal what image one of five.
110:28 - Okay, so let's go ahead and save this. And
what I've done here is I've just created a
110:33 - new file, and I just copied all the text from
our last video. If you didn't watch that video,
110:38 - go back and watch it to see where all this
code came from. So now we can save this. And
110:43 - we're just going to save it in our GUI directory,
and I'm going to call it status dot hot. Okay,
110:50 - so right off the bat looking at this, this
is not great, right? We're putting image one
110:56 - of five, how do we know there's five images?
Well, we know because we just built this.
111:00 - And we know there's five of them. But it's
conceivable that you won't know how many images
111:05 - there are, if your program has hundreds of
images or millions of images, you're not going
111:09 - to go through and count them all by hand.
That would be crazy. If it's dynamic, and
111:13 - you're adding more images as you go, you're
not going to know how many images so we need
111:18 - to figure out a way to do this programmatically
without just hard coding in there like this.
111:22 - So what we can do is we can call the Len function
le n, and that'll give us the length of a
111:28 - thing. And what thing Well, we can just take
our list here or image list and run a Len
111:33 - on it. So let's just do that, let's concatenate
and let's call the Len function. And then
111:38 - we just pass in image underscore list. Right?
Now, this will almost work but not quite,
111:47 - because this returns a number, because it's
counting how many images or how many, you
111:53 - know, items are in this list. And there are
five, well, five is a number and you can add
111:58 - a number to a string. And this is what that
is right there is the string. So we need to
112:04 - convert this to a string. So we can call the
str function, the string function, and just
112:13 - pass that in. Okay, so that should work. Yeah,
so let's throw this up on the screen and see
112:19 - if it worked correctly. I'm gonna go down
to the very bottom, and let's call status
112:25 - dot grid. And we want this to be in row one,
row two,
112:30 - and column
112:33 - equals zero. And we want this to span all
three of our columns. Okay, so let's save
112:40 - this and run it, make sure it worked correctly.
Close the old one. clear the screen. Okay,
112:47 - so python status.pi. pull this up. And okay,
so it's correctly calculated that there are
112:55 - five images. But you know, nothing happens
yet, because we haven't programmed it to.
113:00 - Also it's down here at the bottom, but it's
right in the middle. And it doesn't have a
113:04 - border or anything like that. So we need to
kind of fix that. So let's close this. And
113:12 - come back up here to the top where we've defined
this thing. And let's do some things. First,
113:19 - we want to create a background or a background
a border. So to do that, we can call the BD
113:25 - function of the widget and set this equal
to one, right. We also want it to sort of
113:32 - look like it's sunken down a little bit, because
status bars usually are sort of sunk in a
113:36 - little bit. So we can call relief, R e, l,
I E, F i before E, except after C, and we
113:44 - want this to be sunken. Right. So let's save
this and just give it a quick run and see
113:49 - if it worked. Okay, it's definitely got a
border and is definitely sunken. And one thing
113:58 - you'll notice it is there's some space between
these buttons. I forgot I did that. And I
114:02 - didn't tell you about it. So to get that I
just came down here to the very bottom of
114:07 - our program. And I found the last button button
forward and I added a pad y of 10 just to
114:14 - give it that little 10 pixels or whatever,
of space between there because otherwise we
114:20 - close this. And let's see, let's just take
this off real quick. Save it and run it again.
114:31 - You can see it scrunched right up there. So
we don't like that too much. So I'm going
114:36 - to add this back and save it. So okay, so
far, so good, but it's very small, and it's
114:43 - right in the middle. So how do we stretch
it all the way across the bottom?
114:47 - Well,
114:48 - we need to add something called sticky and
I'm not sure if I've talked about this in
114:53 - other videos yet, but the grid system impact
you for that matter has a kind of a navigational
114:59 - system them. And it's based on sort of a compass
north, south, east and west, right? So north
115:06 - is up South is down, East would be to the
right and West would be to the left. And so
115:13 - we can, we could tell this to stretch in any
direction. So we want to stretch left to right.
115:20 - So that's from west
115:21 - to east.
115:22 - So to do that, we go w plus
115:25 - e, right?
115:27 - Let's save this and run it. See what that
115:29 - did.
115:31 - Okay, so very cool. It's stretched all the
way across, but it's still in the middle.
115:37 - So how do we change that? Well, we come up
here to the label. And we can add a couple
115:45 - of things here, we can anchor this, underscore,
or lowercase a and CH, O r, we can anchor
115:54 - this in a direction, so we want it to be on
the right side. So we would anchor that east.
116:02 - So if we save this
116:04 - and run it,
116:05 - we can see, sure enough, now it's over here.
Very cool. If we wanted it over here, we could
116:13 - just change this to W for West, save it and
run it. Boom, now it's over here. Very cool.
116:25 - And pretty simple. So let's go ahead and exit
this. And I'm going to change this back. I
116:31 - like it the other way. So I put it on East.
Save it. Okay, so it looks good. It's where
116:38 - we want it to be, it's anchored in the right
spot. Excuse me. Now we need to create some
116:43 - functionality. So I'm going to copy this.
And what we need to do is whenever we click
116:49 - a button, either the forward button or the
back button, we need to update our label.
116:55 - So I'm going to paste this in here. I'm also
going to come down here to the bottom and
117:00 - grab this because we want this to update whenever
clicked button wanted to update on the screen.
117:05 - So we need to paste that in here. Okay, so
now we need to fix this thing right here.
117:11 - It's showing image one of whatever. Now this
part updates dynamically that already works.
117:17 - But this part does not. So I'm going to delete
this. And I'm going to put a quotation marks.
117:22 - And we want to concatenate a couple of things.
So what do we want to output? Well, we want
117:28 - to output whatever number that we're currently
on. And luckily for us, we already have that
117:34 - number, we passed it into this function at
the beginning. So whenever we click this button,
117:37 - we're already passing that number in. So I
can just copy this, and come down here and
117:43 - just paste that in here. But remember, again,
this is going to return a number an integer,
117:49 - and you can't concatenate and an integer with
a string. So once again, we need to convert
117:55 - this to a string using the str function. We
just passed that into that. Okay, so that
118:02 - should work. Let's save this and run it just
to make sure that it did. I make a lot of
118:07 - mistakes. So I like to run things often. So
okay, 25354555, and then we go back, it doesn't
118:16 - update.
118:19 - So we need to fix that, obviously. And to
do that, we just need to make the same change
118:27 - we just made to the forward button, just need
to make it on the back button. So I'm just
118:32 - going to copy this come down to the back function,
paste that in there. Give some space here.
118:38 - And if I was a good coder, I'd put some comments,
you know, update status bar or something,
118:45 - right. But I'm not particularly a good coder
when it comes to that sort of thing. So okay,
118:49 - let's save this and run it.
118:52 - And hopefully.
118:55 - So if we go forward,
118:57 - we're on image two, if we go back back to
image one, if we go all the way to the end,
119:03 - or on image five of five, if we then go back
4321. Alright, so seems to work. So that's
119:12 - at least one way to create a status bar. It's
probably not the only way. But it works really,
119:18 - really simply and really easily. The programming
to create the functionality of it is really
119:25 - straightforward. Really, the big thing that
we learned is this sticky, W and he and what
119:32 - else
119:35 - this
119:36 - border thing and the relief thing and the
anchor thing I guess those are sort of knew,
119:40 - but those are just basic label things really.
So
119:43 - very cool. I
119:46 - want to show you how to use frames with kinter
119:50 - and Python. Okay, so I've got a new file open
and I've just got the same sort of standard
119:56 - code that all of our projects start with and
let's go up here and save it. As What about
120:02 - frame.pi? Just frame. Okay, so frame.pi. Now,
what we want to do is create a frame. And
120:12 - a frame is just what it sounds like it's a
little like box has a border, you can have
120:16 - a label on it or not. And it's just sort of
used to just keep things organized in your
120:22 - app. So you might have different sections
that you want to sort of put together visually.
120:28 - And a frame is a good way to do that. So frames
are really easy to create. It's just a widget
120:33 - like all the other widgets, and we create
it mostly the same way that we create other
120:37 - widgets. So I'm just going to call this frame,
you can call it anything you want. And it's
120:41 - called the actual term is a label frame. Right?
So we want this in root. And let's say we
120:49 - want the text to equal. This is my frame,
I don't know, right? Now, we can also give
120:58 - this some padding, let's go pad x equals five,
and had y equals five. And we'll play around
121:06 - with these patterns in a minute to show you
exactly what they do. So now we want to put
121:11 - this on the screen. So let's go frame. And
let's just pack this in real quick here. And
121:18 - let's give this some padding. So pad x equals
let's say 10. And had y equals 10. And we'll
121:27 - see sort of exactly what this does, with the
padding. Why this is 10. And this is five
121:34 - in a little bit, once we get this thing built,
we play around with it a little bit. So let's
121:38 - see if we save this, I don't think this will
actually do anything, because we haven't put
121:42 - anything in the frame yet. But we can run
this to see, let's go Python. Notice I'm in
121:46 - my C four slash gooey directory where we've
been saving all our files so far, as call
121:51 - this frame.py. Run it. Yeah, so we pull this
over. It doesn't really do anything yet, because
122:00 - we haven't put anything in the frame. So that's
the next thing that we want to do. So we can
122:04 - do anything we want. Whenever we put anything
inside of this, we want just for purposes
122:08 - of showing you how to do this, I'm just going
to create a simple button. I'm gonna call
122:12 - it B. So button. This is a button widget.
We've done this a zillion times already. So
122:19 - we want not now normally, we would say put
this in root, right, our root container. But
122:24 - now we don't want it in route, we want it
in frame, which is this thing right here,
122:29 - we were saying put this in the frame, right.
So other other than that, it's basically the
122:35 - same, we could just go text equals, don't
click here, right. And then like anytime we
122:43 - want to add this to a thing, we could just
pack this in there. Okay, so let's save this,
122:50 - come back here and run this guy. And here
we go. Oops, drag this over. Here, we see
122:59 - this is my frame. And inside of it is a button
that says don't click here, the button doesn't
123:03 - do anything, because we didn't tell it to
do anything. But yeah, that's pretty much
123:07 - it. So notice this frame. That's kind of cool.
Let's close this and run it one more time.
123:16 - Now let's play around with this. Remember,
we had different paddings pad x and pad y
123:21 - for the frame itself. And then when we packed
it, we we gave it some padding. So look at
123:28 - this.
123:29 - Let's pull up the code again.
123:33 - pull this up here.
123:36 - You'll notice
123:37 - when we packed it, when we pack the frame
whoops, disappeared. We gave it 10 and 10
123:45 - for pad x and pad wide. And we've done pad
x and pad y before it pads on the x axis and
123:50 - the y axis. And you notice that's on the outside
here, because this is 10. On the inside, we
123:56 - put five and you can see that's like that.
So let's let's play around with this. Let's
124:01 - go head x 100 and pad y 100 really make this
dramatic. So let's save this. I'm back here
124:13 - and run it again. And you notice, boom. You
have padding x and y as 100. So this, you
124:22 - know packs it inside of the the outside container
here, right? That's interesting. Or we could
124:30 - do the opposite. But that back and let's say
oh had x and pad y inside of let's just say
124:38 - 50 run this again. That's a little better.
Now we've put some padding inside of the frame.
124:46 - So that's really all you have to keep in mind
with this padding when you create it. Right
124:52 - when we create any widgets. It's always a
two step process. We create the widget and
124:56 - then we put it on the screen. So in this one
we created the widget. And when we do that,
125:02 - when we give that thing padding that goes
inside of the frame, and then here, we put
125:07 - it on the screen, and that pad x and pad y
goes outside of the frame. So just sort of
125:12 - keep that in mind. Now the last thing I want
to talk about when it comes to this, and this
125:16 - is kind of weird, right? So check this out.
Normally, we just pack things when, you know,
125:27 - we don't care, right? Otherwise, we use a
grid, and then we've positioned things. The
125:32 - thing about pack and grid is you can't do
them both, you can either do pack and pack
125:36 - or grid and grid. So you notice here, we did
pack here and pack here. Well with a frame,
125:43 - that's not necessarily true anymore, you can
do a grid inside the frame. So for instance,
125:49 - we can go grid, row equals zero column equals
zero, we save this. Now normally, we would
125:58 - get an error if we did this.
125:59 - But now we pull this
126:02 - over, and boom, it works. Now it's positioned
in the same spot, because there isn't another
126:06 - thing in there. But we can create another
button to show you just to prove one last
126:11 - time, so we could go, I don't know be too.
I'm just gonna copy this whole thing.
126:18 - And
126:19 - write, or here, don't click here or here.
Okay, so B to dot grid, we want rho equals
126:31 - one and column equals one. So we want down
and over, right. So if we save this, run it,
126:41 - boom, you see, sure enough, we can play around
with the grid system inside this frame. Even
126:48 - though for the frame itself, we packed it.
Very cool, very interesting, something to
126:52 - definitely keep in mind. Now, one last thing,
I said that that was the last thing, but we
126:56 - have one actual other last thing. And that's
this little label right here, this is my frame,
127:02 - we can actually get rid of that as well,
127:05 - just right here. remove it completely. And
if we do that and save it, we get this kind
127:17 - of a cleaner look, right? Very cool. So think
of frames, use them all that you're probably
127:25 - going to use them all the time. I mean, there's
always times when you have different sections
127:30 - of your screen that you want to sort of keep
separate, you might have all the buttons on
127:34 - this side and a frame and all the form things
on this side and a frame. And then you might
127:39 - have another frame where there's images or
who knows what, but sort of separating things
127:44 - out visually is always a good idea. And that's
how you do it with frames. In this video,
127:52 - I'm going to talk about radio buttons, which
are just these sort of round buttons with
127:56 - text next to them. They're used for forms
and all kinds of other things very useful.
128:00 - And they're a little bit trickier than some
of the other widgets we've looked at in the
128:03 - past. So we'll go ahead and take a look at
that in this video. And I've created a new
128:06 - file, I call it radio.pi, I saved it into
our GUI directory where we've saved all of
128:11 - our code in the past. And this is just the
basic sort of starter texts that we've used
128:16 - in all the other courses to create just a
basic, you know, framework with kinter. So
128:22 - what we're gonna use is a radio button widget.
And to do that we just call radio button.
128:30 - And then much like some of the other ones
we've done in the past, we will go route.
128:37 - And then for the text, we go equals. Let's
go option one. And here's where it gets a
128:46 - little bit different. We're going to create
a variable. And kinter has sort of its own
128:52 - variables, hinter variables, they're slightly
different than Python variables. And I'll
128:55 - show you exactly what the difference is in
just a minute. But we're going to assign a
128:59 - variable to each of these buttons, so that
we know
129:03 - if somebody clicks
129:04 - on the button that gets put into the variable.
So then we could take that variable and do
129:09 - stuff, you know with it in the future based
on which button or which radio button was
129:13 - clicked. So this will make sense in just a
bit. So let's call this our, let's call it
129:20 - our right, you can call it anything you want.
And the value. Let's put this as one. So this
129:28 - is option one. So when somebody clicks on
that we want the value to be one because it's
129:33 - option one, you can put anything you want,
but we'll just do one. So we're also going
129:38 - to need to do some other stuff to this, but
this is work just for now. Now I'm just going
129:43 - to pack this on the screen. Usually we do
two sentences or two lines of code one to
129:48 - create the thing and then one to put it on
the screen. But we've seen in the past that
129:51 - we can do this all in one line just by going
calling dot pack on the thing, and that should
129:59 - work Alright, so I'm going to just copy this
and create a second one. And we'll call this
130:07 - one, option two, and the value from this will
be two. And we're just going to pack this
130:11 - onto the screen. So let's see, I think that
is pretty much it. Now we need to sort of
130:19 - define this variable. So like I said, this
is going to be a kinter variable and kinter
130:23 - variables are a little bit different. They
look the same as that you just call them like
130:27 - you would a Python variable. But here, we
want this to be an integer, because the value
130:33 - we've assigned to it is either a one or a
two, and a one or two is an integer, right?
130:38 - So the variable needs to be an integer variable,
because we want to do number things to it,
130:44 - if we want to do number of things. So we're
going to call int variable. And then this
130:49 - function, and this function allows kinter
to keep track of changes over time to this
130:56 - variable. So when we click on a thing, it'll
know that, and I think we've looked at this
131:01 - in the past with other things, in order to
use this, we don't just call the our variable,
131:05 - we call our dot get,
131:07 - remember, we want to get whatever the variable
is at the moment. So if somebody clicks on
131:12 - a different radio button, we want to be able
to get that right. So that's why we're using
131:18 - these instead of just regular Python variables.
That's just sort of a function of radio buttons.
131:23 - So let's see, we have one, we have two this,
now we've done a one and a two here, right?
131:29 - If we wanted to pass a string into this, we
could call like this, right? And then instead
131:35 - of integer, it's str variable. It's a string
variable, right. But in this case, we want
131:43 - to do integers. And after I do this one, I'll
show you another way to do this, because there's
131:48 - a couple of ways to do it. And we'll see this.
So let's save this as radio.pi. Let's open
131:54 - up our thing here. And let's run radio.pi.
Oops, what have we done, name radio button
132:03 - is not defined that I spoke button wrong.
Oh, I did to be lowercase b. Alright, so save
132:12 - this, come back here and run it again. Okay,
hold this over. So you see, we have option
132:20 - one and option two. And this works, but it
doesn't actually do anything. And we can't
132:24 - really tell if we've done anything, right.
So we need to have this actually do something
132:30 - so that we confirm, confirm that we did this
correctly. So I'm going to create a quick
132:36 - label, let's just call it my label, and set
this equal to a label. And we want this on
132:49 - route. And we want the text to equal what
our dot get, oops, our dot get. Now we want
133:00 - to go my label dot pack. Okay, so let's save
this. And this shouldn't work yet. For a specific
133:11 - reason. And we'll see. Right off the bat,
we have zero, because we haven't actually
133:17 - set this yet. And we can if we want, so we
can close this, come back here. And we can
133:23 - go our dot set. And inside here we could say
to For instance, if we save this
133:31 - and run it,
133:35 - you remember
133:39 - these Python or these kinter variables, you
can set and you can get I think we looked
133:43 - at that in a prior video. Because see, now
it's two and two has been selected automatically.
133:49 - That's what happens when you set it. Alright,
so if we go here, this doesn't yet change
133:53 - because we haven't created a function to update
this thing if it changes, so we can close
133:59 - that and do that right now. So let's create
a function we'll define and let's call this
134:06 - clicked, I don't know,
134:10 - doesn't really matter. And now here, we want
to change this. Just paste this in here. And
134:20 - we want to pass no value. And now this will
be value. So what we need to do is when one
134:32 - of these is clicked, we need to pass that
into this function and then update our label.
134:37 - And we've seen this already in the past by
using the command. We use this when we create
134:42 - buttons and do that so we can go command and
we can go Alam
134:48 - de
134:50 - we've done this in the past. And so what do
we want here? We want to call clicked and
134:56 - we want to pass in here are our back Are you
but we need to get
135:01 - it.
135:02 - Right. So instead of here we go our dot get
and pass that. So then I think we could just
135:09 - copy this whole thing
135:12 - and paste it onto the other radio button as
well. Okay, so if we save this, hopefully
135:16 - I did that right? Certainly all get jumbled
together. Alright, so we see it's already
135:23 - on two, because we've set it to be two. If
we click on one, boom, one appears, we click
135:28 - on two, again, two appears. Very cool, pretty
easy. And we could do the same thing with
135:33 - a button real quick. Let's just throw a button
up here. And let's go, my button equals a
135:41 - button. It's in root, and the text equals
click me. And the command equals Actually,
135:51 - I'm just going to copy this whole thing. It's
exactly command that we want.
135:57 - That is, right. Yep, I'm just counting parentheses.
And then if we put this on the screen, my
136:08 - ups, button, hack parts, save this and run
it real quick. We see option one, if we click
136:25 - it, boom, it goes to one, two, we click it
to, okay, so either way this works. And that's
136:31 - how you do that. Now, in the future, anytime
we want to use that value of the radio button,
136:36 - we can by either calling our dot get, or if
it's inside of a function using, you know,
136:43 - whatever value we passed in whatever keyword
for that. So that's cool. So that's one way
136:48 - to do it. And this works, right. But these
are just two buttons, you may have like 10.
136:53 - And you may not want to do all 10 of these,
right. So in that case, we can sort of use
137:00 - a loop in order to do this. And so that's
what I'm going to do now very quickly, maybe
137:06 - not so quickly, it might take a bit. So I'm
going to go ahead, well, let's just comment
137:12 - out those. And leave this for now. So what
we can do now is create a Python list. And
137:25 - I'm gonna call this modes. And inside here,
this is just a Python list, I'm going to create
137:32 - some topples for the radio buttons that we
want to create. Alright, so let's create,
137:40 - oh, I don't know four of them. Okay, now inside
of here, we need to values on to, and I'm
137:54 - just gonna copy these and paste, paste. So
let's say we're creating a menu for a pizza
138:02 - place online or something. And we want to
select which type of pizza
138:08 - we want on
138:09 - which type of topping we want on our pizza.
So we might have pepperoni. We might have
138:17 - what cheese, mushroom. What's another type
of piece of pizza, onion, that a pizza. And
138:25 - then. So this is the thing that's going to
show up on the screen. This is the actual
138:33 - value that we're going to pass in here it
was this value right here, when we had one
138:38 - and two. And instead of numbers, that's this
time since we did numbers last time integers.
138:43 - Let's do strings this time. So I'm just going
to copy this, we want the value to be the
138:46 - same thing as the thing. Oops, copy, paste,
copy, paste, copy, paste, and modes. I called
138:59 - it modes because it's the it's a mode of a
radio button. You can call this anything you
139:02 - want. If you wanted to call it toppings you
could. I would call it something plural. And
139:08 - we'll see why in just a second. So now let's
get rid of this. And this from the old thing.
139:16 - Now, just like in the last time, we need to
set up a Python a kinter variable. So instead
139:22 - of calling it our What should we call, it's
called pizza. And this time, it's a string
139:28 - variable. str. think that'll work. Actually,
I think it's string variable string bar. Oops,
139:38 - pizza. Yeah, let's do that. And we want to
set the first one. That set we'll set that
139:45 - to what let's make the first one pepperoni.
Okay, so now we need to loop through all these
139:55 - things and put them on the screen. So I'm
going to go for it. text and mode. In modes,
140:04 - it's just a basic loop, right. And we want
to create a radio button. So let's go radio
140:14 - like we did last time. And then we want this
enroute, of course. Now remember last time
140:20 - we created a text, a variable and a value,
we need to do the same thing. So this time
140:25 - the text will equal
140:26 - text, because we're calling text. In our loop
we're calling on Well, this needs to be all
140:35 - capitalized modes. So we're going to loop
through modes, which is this, and we're going
140:39 - to take each of these values. So this will
be text and this will be our did we call this
140:45 - one text and mode. So this will be text and
this will be mode, this will be text and this
140:50 - will be mode, this will be text, and this
will be mode. So we want the first value.
140:56 - Right here, text equals to text, right? And
we want the variable to always be pizza. That's
141:05 - this thing right here, right?
141:08 - And we want the value in that variable to
equal mode, which is this thing, this thing,
141:14 - this thing in this thing, right? So okay,
now we can dot pack this. If I could type,
141:26 - there we go. And that should work. Right?
So let's just save this real quick. To see
141:35 - actually, we need to change this also. This
pizza, we did not get. Okay, so let's save
141:45 - this and see if this works. Oh, we got an
error. What did we do? A self option bubble
141:53 - blah. Oh, I misspelled a variable. What line?
I don't know. Let's look at this. area's very
142:05 - eligible. variable. There we go. Cannot type
today it's Friday here in Vegas. Can't type
142:11 - on a Friday. You kidding me? Okay, so now
142:18 - we see.
142:20 - We've got pepperoni, cheese, mushroom, and
onion. And the first thing is parrot pepperoni.
142:24 - Because we set that when we started, if we
click on this, it goes pepperoni. If we go
142:31 - cheese, I click boom, she's notice it's not
doing it when I click on this, because this
142:35 - time around, we didn't put a command. Like
here we did a command when you click on the
142:40 - actual button, we're not doing that this time,
just just to save time since we've already
142:44 - done it once. Now we're just doing it when
you click the actual button, right? So let's
142:49 - see. Let's just take this and go anchor equals
w.
142:53 - Let's close actually.
142:57 - See, these are all centered, right? We close
close this and run it again. All right, now
143:08 - they're all anchored to the west to the left,
looks better. And in fact, we can get rid
143:15 - of this pepperoni too, because we don't really
need it at the moment. So down here on our
143:20 - label. Like we can just get rid of this if
we want to right. That's the button label.
143:27 - Label. Alright, so save this, run it one last
time. So pepperoni cheese, click cheese mushroom,
143:39 - click mushroom, onion, click onion. So this
last time is just sort of a fancier way to
143:47 - do it. Just doing a simple loop. It's easier
than you know, creating four of these radio
143:54 - button things. We could have done that too,
that would work. This is just sort of a little
143:58 - bit easier. And like I said, I call this modes,
we could call this toppings. We just change
144:07 - this to toppings. Right? And instead of mode,
maybe we call it what topping topping in toppings.
144:18 - And we change it here to topping. Save this.
Give it a run to make sure I didn't screw
144:28 - something up there. Cheese, boom cheese mushroom,
mushroom, pepperoni, pepperoni. Pretty simple,
144:38 - pretty straightforward. on talking about creating
message boxes, okay, so I've created a new
144:42 - file, I call it message.py. And I've just
pasted it in the same starter code that we
144:46 - always have. So a message box is just a little
like a pop up box, right? And usually has
144:52 - a couple of buttons Yes or No? Okay, cancel
all that sort of thing. And, you know, you're
144:58 - gonna use these a lot for a lot. Different
things. So to get started, we have to actually
145:02 - import a module to use this. So we're going
to go from t kinter. Import, probably good
145:09 - idea to spell import correctly. And we want
to import message. Box, all one word. All
145:16 - right. So to do this, there's actually several
different ways we can do this. So first, let's
145:25 - just create a button. Let's go button. And
we want this in route and we want the text
145:31 - to be I don't know, pop up. And then let's
just pack this onto the screen. Okay, now,
145:40 - we actually want to call a command. So when
we click this, we want it to do something.
145:45 - And let's call this pop up.
145:47 - Right? So now
145:51 - we need to create a pop up function. So let's
go define pop up. Okay, so inside of this,
145:59 - we want to create a message box. Now, there
are several different types of message boxes
146:06 - you can create. And I'm going to go through
all of them. But for right now, the very first
146:10 - basic one is show info. And this one is an
interactive, I don't think it just, you know,
146:20 - puts up some text on the screen. So the first
parameter, this takes two or three parameters,
146:25 - and the first one is the title bar that you
want to show up. So I'm just going to type
146:31 - this is my pop up. Right. And then the next
one is the message that we want to show in
146:38 - the actual pop up. So let's just type hello
world. Right? And I think that will do it.
146:45 - So let's save this, head over to our C forward
slash gooey directory where we're saving all
146:50 - these files. And let's run this message dot
p y. o, invalid syntax. Oh, I'm in a big hurry
147:03 - today. forgot our parentheses. Okay, so save
this. I'm back here and run this again. That's
147:09 - clear the screen because he wants to look
at error messages. Oh, no. Okay, so what are
147:15 - we done here?
147:18 - button.
147:20 - Text, man.
147:23 - All kinds of errors this morning. Alright,
lowercase t in text. So let's save this. Try
147:28 - it one more time, clear this screen. It actually
finally worked. Okay, so we just have our
147:35 - little app here. Oops, it disappeared on me.
And it has a button pop up window and click
147:43 - this boom, here's our little pop up. And you
can see here's the title, this is my pop up.
147:48 - And then the actual thing itself says hello
world. And it's got this little icon next
147:52 - to it, because this is an info, showing info.
And if we click this, it disappears. Right?
147:57 - So that's pretty much it. And it's pretty
simple. So if we close this. Now, I mentioned
148:04 - there are several different types of boxes
that we can create. So I'm just going to paste
148:11 - in this comment. And these are the different
message boxes. There's the show info on the
148:15 - show warning, show error, ask question asked,
OK, cancel and ask yes or no. And to use each
148:21 - of these, we just changed this a little bit
right here. So instead of show info, we want
148:26 - to do a show warning. We can save this and
paste. So save this and run it we get a pop
148:35 - up. And then it says hello world. But now
we get this little ok message or we get this
148:43 - little warning thing.
148:45 - Now I'm going to turn up my volume. And if
we hit this again, did you hear that? We got
148:55 - that sort of error sound?
148:58 - here that that comes with a warning that didn't
happen with the show info on so Okay, let's
149:04 - close this. Take a look at the next one. So
show error. Copy this, paste it in, save it
149:12 - and run this again.
149:14 - Pull it over.
149:16 - Did you hear that? Brown? That's the error
warning and you get this big angry x right?
149:24 - So that's the error one. Close this. And let's
see ask question copy, paste, Save and Run.
149:34 - Boom. Pull this over. Okay, so now it just
says hello world. But we have now yes or no.
149:44 - Right? So if we click Yes, nothing happens.
If we click No nothing happens. I'll show
149:49 - you in a little bit what how to do things
based on whether they click yes or no or okay
149:54 - or cancel or, or any of that stuff just as
soon as we go through all of these. So that
149:59 - was asked question. And so now let's try ask
Okay, cancel,
150:05 - save, run.
150:07 - Oh, okay or cancel, right? And again, we'll
look at how to play with these buttons in
150:18 - a bit.
150:19 - Was that
150:22 - and what's less lat left finally asked Yes,
no. If we save this pace, Save and Run,
150:29 - we get
150:32 - yes or no. Okay, so that's cool. But now how
do we deal with these buttons? Close this.
150:45 - So what we can do here is take this whole
thing and just shove it into a variable. So
150:52 - we can call this variable, anything I'm going
to call response. And then we just set that
150:56 - equal to that. Now, we can actually print
out the response and see exactly what it is.
151:03 - And once we know what it is, we can do an
if else statement in order to you know, do
151:08 - stuff depending on that. So let's create a
quick label. And we want this and route. And
151:13 - we want the text to equal response. Now let's
just pack this on the screen. Okay, so we
151:21 - say this. And we've got the Ask Yes, or no
guy on there right now. So we can run this.
151:29 - Pull this over, see a pop up? Yes or no? So
let's click Yes. Boom, it returns one. That's
151:37 - kind of interesting, right? If we click No,
it returns zero. So what we could do is close
151:45 - this and pull up our thing. Now we know what
returns a one for yes or no, or zero for No.
151:52 - So we can go if response equals and you need
the double equal to sign to compare. We're
152:00 - not assigning we're comparing, then we can
just let's pull this. And for the response,
152:08 - let's click there. Let's type in. you clicked.
Yes. All right. We can go else. you clicked
152:20 - No. Let's save this and run it.
152:26 - And pull this over. So hello, world. Yes.
No. Oh, one you click Yes. Try it again. No,
152:36 - zero, you click No. So let's pull this back
up. This we can get rid of. Okay. So that's
152:45 - interesting. Now, that's for ask ask Yes,
no. All right. So I'm going to can't or I'm
152:55 - going to comment that out this stuff and undo
this. And let's just go through these all
153:01 - very quickly. So ask, OK, cancel.
153:07 - Save this. Run it again.
153:10 - pop up,
153:12 - okay, or cancel. So if we click OK, we get
one. We click Cancel, we get zero. So, okay,
153:20 - cancel also returns a one or a zero. Right?
What do we have asked question. Let's take
153:27 - a look at this one. Save it.
153:34 - pop up. Yes. No. If we click Yes, it returns
Yes. If we click No, it returns No. Right.
153:42 - So that's kind of cool. So now, if we want
to play with that one, down here, we have
153:47 - to change this to
153:48 - Yes.
153:49 - Right. In fact, let's just run this to make
sure that works.
153:57 - Save this, run it again.
154:00 - Zoom pop up. Yes. you clicked Yes. pop up.
No, you click No. Very cool. Okay. So very
154:12 - quickly, again, let's comment this out. comment,
comment, comment. And then let's look at the
154:23 - rest of the show air. Save and Run. I could
just tell you what each of these do. But I
154:32 - think this is a better way. Because in the
future. If you can't find documentation on
154:37 - this, you need to be able to figure out how
to determine what these things are returning
154:41 - on your own. And this is how you do it. So
if we click OK, it returns okay. So that's
154:46 - interesting. What else do we have? Show error
show warning.
154:55 - Save
154:57 - and Run
155:01 - This over hello world, okay, it returns Okay.
And then finally, we have show info, save
155:11 - it and run it, bring it over, pop up, okay,
it returns, okay as well. So very cool, very
155:21 - easy to create message boxes. And there's
like a zillion different reasons why you might
155:25 - want to create a message box for any number
of reasons. And that's how you do it.
155:32 - In this video, I
155:34 - want to show you how to create new windows
in your program. You know, up until now, we've
155:38 - just basically had one big window, we've had
message boxes and little things like that.
155:43 - But as far as like creating a whole new window,
we haven't looked at that yet. And likely,
155:47 - you're going to need to do that, in some point
in your careers, I created a new file called
155:52 - base.pi. And it just has the same, you know,
starter text starter code that we've used
155:57 - throughout this series. And so what we want
to do here is just create a new window. So
156:04 - how do we do that? Well, you notice up until
now, we've been using this root window, it
156:08 - just shows one big window on the screen. And
that's it. So you know, likely you're going
156:13 - to want to add a different type of window
or different window. If you click a button,
156:18 - if you do a drop down thing, whatever. How
do you do that? Well, you start just by defining
156:23 - it, I'm going to call it top and set that
equal to top level. And it's just this top
156:30 - level function. So if we save this and run
it, we get right off the bat pull us over,
156:39 - this is our main window, there's nothing in
it. And then also this second window. And
156:44 - you can tell the difference because the icon
is different up here, right? This is just
156:47 - the kinter default icon, whereas this one
has our little kotomi icon right. So okay,
156:53 - that's not that great. There we go.
156:55 - Come back.
156:58 - Close this. Now, anytime you want to do something
in here, you just do it inside, you just do
157:04 - it after this. So you know, if we wanted a
label, let's just call this label equals label.
157:11 - Now normally, we would put this in root right?
Well, now we have this top, we can put an
157:16 - ad so we can designate different windows that
way. And we can set the text equal to hello
157:22 - world, whatever. And then let's just pack
this on the screen. So let's run on this real
157:28 - quick. head back over here and run it. Oh,
no, ah typo already. There we go lowercase
157:40 - t i do that a lot, I think seems like at least
the second time in this series. I've done
157:45 - that. Okay, so now we have our main thing.
And then our second window. And the second
157:51 - window says hello world. So you can you can
put anything in there you want. For instance,
157:57 - we could put an image in there. Remember a
few videos ago, we use this image.tk thing.
158:04 - So we could go let's get rid of this. And
let's just say my underscore image set that
158:11 - equal to image TK dot photo, image. And then
image dot open, and then call the image now
158:22 - I think we had, we had a directory called
images that we set up and inside of there
158:27 - I had this assmann dot png picture. So we
could do that. And then create let's create
158:33 - a my underscore label e L and just set this
equal to a
158:40 - label
158:43 - want this to be in top and we want the image
to equal my image. And we need to pack this
158:50 - on the screen. Okay, so that should work.
So if we save this and run it real quick.
158:56 - Boom, we get our first normal window with
nothing in it. And then we have the second
159:02 - window. Man Aspen little yawning here. So
you notice it says learn to code academy.com
159:10 - which is the same title as this one, we can
change that to pretty simple. In fact, we
159:15 - can just copy these two things for the title
and the icon. And I'm just going to put this
159:21 - right under here. And instead of root here,
obviously we want top. Same thing here. Top.
159:28 - So if we save this, come back over here, run
it again.
159:33 - We get our main window
159:35 - and we get our second window and it has the
icon and it says learn to code Academy which
159:40 - is what it said before so let's change that
real quick to what we want. My second window
159:50 - All right. Very creative. Alright, so now
now we get this my second window. Right okay.
160:00 - So that's
160:01 - kind of cool, I guess. But chances are, you
don't want all these windows just fly open
160:06 - every time you open your program, you want
it to only open if you click a button or do
160:10 - a drop down or click a link or do something
you want to be able to control when they appear.
160:14 - Right. So how do we do that? Well, let's create
a button. I'm gonna call it button. And let's
160:20 - call button, we want this in route, we want
the text to say, open second
160:26 - window.
160:29 - And then we want the command to be
160:31 - what open.
160:34 - Okay, so now we need an open function, method,
whatever you want to call them open, fine,
160:40 - open
160:41 - that file.
160:44 - Now inside of here is where we want all this
stuff, right. So now, we have all this stuff
160:52 - over. Oops, go. That seems like it should
work, right? So it actually sort of will and
161:01 - sort of won't. I'll show you just now what
I'm talking about. So if we save this, come
161:04 - back over here and run it again. Oh, you know
what, once again, forgot to pack the button.
161:11 - Back, it's, we're having a day here in Vegas,
it's cloudy, kind of cooler than normal. My
161:18 - brain is just not woken up yet today. So save
this. Now we'll run it. Okay. So we get this
161:26 - main window. It has a button, I misspelled
window. All right, so we click this. Now the
161:34 - second window opens. But check this out the
image didn't load What's going on here? Well,
161:40 - what actually happened here is all of our
code. Right here, we're calling this my IMG
161:46 - variable. And we're setting it equal to this
image. But this is a local variable, right?
161:52 - We need this to be a global variable, because
for some reason, when you're in a function
161:55 - like this, with a second window, Python sees
this local variable, and it thinks it's garbage,
162:04 - it gets swept up in the Python garbage collection,
and it doesn't get displayed. So all we need
162:08 - to do is called Global for my image. And now
this should work. We save this, run it again,
162:16 - we get this guy, if we click it, boom, sure
enough, it opens. Very cool. And it's just
162:23 - one of those weird things. I'm not even exactly
sure why the mechanics of why it does that.
162:29 - You just, it just does. Notice when we did
this earlier, we had all of this stuff outside
162:34 - of this function, it worked just fine. Because
it's in the root, it's in the main window.
162:40 - So the local variable works in the main window,
it just doesn't work in the next one that
162:45 - you open this top level window. Alright, so
we can play around with this some more, we
162:51 - can go button to equals button. And we want
this to be in top. And let's go text equals
162:58 - close window. How do we do that? Well, we
want the command to equal top that destroy,
163:08 - I think we looked at destroy a few videos
ago. That's how you can close things. We just
163:12 - have to make sure and designate that we want
to destroy top not root. So save this, come
163:18 - back over here and run it. Oops, drag this
over. Alright, so open second window, ah,
163:27 - a third time, I've got to pack the button.
All right, that pack. I'm telling you, it's
163:34 - one of those days here in Vegas, cloudy Vegas
today. Alright, so now we have open second
163:39 - window. When we do that, we get the second
window, says my second window has the icon
163:47 - as our image as this button, we close it,
boom, it closes, we're gonna open it again.
163:52 - There it is, again, close it, like an open
it, he can close it, and on and on. And there
163:59 - we go. So that's pretty much it pretty simple.
You know, you don't want to run two versions
164:05 - of this TK function at the same time. Instead,
you want to call this top level. It's just
164:10 - what TK enter calls the second window that
you want to open and pretty straightforward.
164:15 - The only thing to really worry about is this
global thing. If you try something inside
164:20 - of here, and it doesn't work, try adding whatever
you're trying to do as a global variable,
164:25 - they'll likely fix it. But pretty simple.
In this video, I want to show you how to use
164:35 - the file dialog box to open files, no matter
what the file is anywhere on your computer.
164:40 - Okay, so you've got your program, you want
to open a file, maybe an image, maybe a PDF
164:46 - file, anything at all. How do you do that
with kinter? Well, it's really really easy.
164:50 - You just use something called a file dialog.
And we need to import this It comes with kinter
164:54 - but we need to import it. So from TK enter,
import file die Okay. And to use this, we
165:03 - just call route dot file name. Now I should
say this won't actually open a file, it'll
165:09 - just return the name of the file and the location
of the file. So let's say, you know, we've
165:13 - got these images in our gooi slash images
directory. So it'll return c, colon, GUI,
165:21 - colon, slash images slash Aspen, one dot png,
then when you have that location, then you
165:28 - can then open that file in your program programmatically.
So we'll look at how to do that. But first
165:33 - things first, let's just look at this dialog
box. So we go File dialog, and then dot ask
165:41 - open file name, right. And then inside of
here, we got to pass a whole bunch of different
165:47 - things. First, we need to tell it what directory
to start in. So when the box pops up, what
165:52 - directory Do you want to be showing, so you
go initial dir, and set that equal to whatever
165:59 - you want. So if you just want the C directory,
just do that, if we, for us, we want GUI for
166:06 - slash images.
166:07 - We do that
166:08 - right? So then we want title. And now this
is just the title of the box that pops up,
166:13 - it'll have a little caption title at the top,
and you can put anything you want. Let's go
166:16 - select a file. That's good. And now, we need
to tell it, which types of files to show.
166:26 - So, you know, you could just put all the files,
or you could specifically say just show the
166:31 - PNG files because we want to open a PNG file,
you may have PNG files, you might have JPEG
166:36 - images, you might have GIF images, GIF images,
or you pronounce that you might have bitmap
166:42 - images, whatever, you can designate that here.
So to do that, we just recall the C file types,
166:51 - plural, I spell it right file types, there
we go. And then set that equal to whatever
166:58 - you want. And inside of here, we can designate
a bunch of different file types if we want
167:03 - by putting them in parentheses, and then separating
them by print or by a comma. Right. So let's
167:12 - see, is that the right number of parentheses?
I think so. So let's just start out with we
167:17 - want, I don't know, PNG files. Yeah, PNG files.
And this first bit, is just a little description,
167:30 - and that'll pop up in a drop down box. And
we'll see that in just a second. So then we
167:34 - need to tell it, what type of file and PNGs
are started with Star dot png in the store
167:41 - is basically saying open any files with that
have a name of any kind star dot png, right?
167:49 - So that's it for PNG, if we want to then designate
say, for instance, all the files, we can go
167:55 - see, again, just type in a little description,
all files, and then a comma. And then the
168:05 - type of file. This is this just wildcard we
want all the files of all the different types.
168:10 - So we would go any name, dot, any extension,
right? Star dot star, and then that closes,
168:18 - and then Okay, I think that's right. I get
a little messed up with all the different
168:23 - parentheses, but I think we close them all.
So let's just save this real quick and run
168:25 - it. I should mention I named this file file.pi.
And I just started out with a basic starter
168:32 - code that we always start out with. You're
familiar with that already. So let's head
168:35 - back over here and run this guy. Oops, what
did I do? file? Diallo. I misspelled something.
168:44 - Of course I did. File dialog. There we go.
That looks better. Save it, run it. Pull it
168:53 - over. And when I did, it just automatically
popped up this box. And you'll notice we're
169:01 - in C four slash gooey, forward slash images,
because that's what we designated. And then
169:07 - we have all these PNG files. These are the
the images that we did when we made that image
169:13 - viewer several videos ago. So I'm just going
to reuse these. And now you look see it says
169:18 - PNG files, or all files that comes from this
little thing right here. png files and all
169:27 - files and we can type anything at all we want,
right? Let's see if we come back here.
169:33 - Your code. I'm back.
169:37 - Actually, there we go. If we click here for
all files, it doesn't really change because
169:45 - the only thing we have here are PNG files.
Right? So let's close this real quick. And
169:50 - let's change this to JPG and then let's change
the description to JPG files. Okay, so let's
170:01 - save this and run it again. And boom, it pops
up. And now there's nothing listed, because
170:11 - it's calling the default is the first one
he lists, and it's calling for the JPEG files.
170:15 - And when there are no JPEG files in this directory,
so if we click all files, boom, now they all
170:21 - pop up, right? So if we click this, it closes,
and nothing happens. So let's take a look
170:28 - real quick and see what what happens when
you click a thing what it returns. So we could
170:33 - just return this root file name thing in a
label. So let's just go I don't know my label,
170:39 - equals set it as a label, we want it in route.
And we want the text to equal just that. And
170:47 - let's just pack this on the screen real quick.
Save this guy, run it again. And okay, JPEG
170:57 - files, we want all files, let's call Aspen
two, when we do that, here's our main program,
171:04 - it just returns the location Aspen two, right.
So if you actually want to do something with
171:10 - that, if you want to, for instance, open that,
then you need to do that separately. But that's
171:17 - okay, because we know the location. And now
we can just open that location, we learned
171:21 - how to open images. several videos ago when
we looked at that image viewer app that we
171:28 - built. So we use proper code here is this
image thing here. So let's go all the way
171:37 - want my underscore, image equals image TK
dot photo image, I spell that right image
171:47 - TK dot photo image. There we go turn blue
there. And we want image dot open.
171:54 - And we want what do we want to open we want
to open this thing, whatever it is, root file
172:03 - name, right? So now we go my image label,
set that equal to a label. And we don't have
172:16 - to put it in route, we could just go image
equals my image, which is this thing. And
172:24 - we want to pack this on the screen real quick.
So let's save that. Run it. See if this works.
172:34 - And we get JPG all files. Let's open Aspen
two. Oh, image TK is not defined.
172:49 - thoughts that look weird? Oh,
173:04 - lowercase. Okay. All right. So let's save
this. One more time. Hold this over. Alright,
173:12 - so we want all files, we want to ask bend.
And when we do our main screen, pulls up this
173:19 - thing. It's also listed that because we have
that on there, and it's it works. So very
173:23 - cool. Now, one thing that you'll notice is
whenever I run this thing, it just pops up
173:28 - the file dialog box right away. And that's
probably not really practical. So let's play
173:35 - around with that a little bit. Let's create
a button. Let's go my button and set it equal
173:41 - to a button. And we want this in route. And
we want the text to equal open file. And we
173:49 - want the command to equal open. Now we need
to, we need to define an open method here
173:58 - function. And inside of here, I'm just gonna
put all this stuff right. And have all this
174:08 - over. Okay, so remember, when we open an image
in a function like this, we need to create
174:16 - a global for its variable. So my underscore
image that should work and our button we need
174:27 - to hack this guy. Okay, so let's save this
and run it. I almost certainly screwed that
174:34 - up somehow. Let's see how I did it.
174:36 - Your object has no idea. What do we do? Let's
see my button. Oh, we left it all out. All
174:50 - right, get rid of that. Save it. See I told
you. I screwed that up. All right, this is
174:54 - getting crazy. Let's clear this screen. Run
it one more time. All right, that looks good.
174:59 - So we pulled This over, we got the button
that says open file, we do that, and the little
175:05 - box pops up. We call all files here, open
Aspen and boom, it opens, it also puts this
175:13 - on the screen here, we don't necessarily have
to have that.
175:16 - That's pretty cool. So
175:18 - very easy, very simple to open any kind of
file. And in this video, we did images, because
175:24 - we've already worked with images before. So
we're already familiar. But you know, you
175:28 - can do a PDF file, you can do an HTML file,
you can do a Python file, if you wanted to
175:33 - open it and put its contents on the screen,
whatever you want to do, you can do with this
175:39 - open dialog, this file dialog thing. And it's
pretty simple. The main thing you have to
175:44 - remember is just that it's not opening the
file, the file dialog box is just returning
175:49 - the location, it's allowing you to click a
file and select it and then it just returns
175:53 - the location. Once you have that location,
you can open it in any of the ways that we've
175:58 - already learned how in the past for is opening
images or or whatever you could, you know,
176:03 - paste out the contents in a big label. If
you wanted whatever you want. You can do so
176:09 - pretty cool. Okay, so sliders, what am I talking
about? You know what a slider is a little
176:15 - slider that goes down at the bottom or on
the side of a program or something like on
176:19 - a web page, or like right here, you know,
you slide up and down. How do we do this when
176:24 - kinter and graphical user interfaces. So that's
how we're going to look at so I've created
176:28 - a file called slider.py, I have just the basic
starter text that we've used pretty much throughout
176:34 - this entire series. And so let's create our
first slider. It's very, very simple. We're
176:39 - going to use the scale widget, which is weird,
why don't they just call it the slider widget,
176:44 - I have no idea. But they've called it scale.
So you can designate vertical, up and down
176:50 - or horizontal, left and right and the default
is up and down for some reason. So we're just
176:55 - gonna do that one. First, I'm gonna call it
vertical. And we just create a scale widget.
177:02 - And we do it like we've done all the widgets
we designate, we want it in root. And now
177:06 - the only real thing you need to tell it is
where to start and where to stop. So you want
177:11 - your slider to go from zero to 100, from 50
to 1000, from 250 to 230, whatever you want
177:18 - whatever range, you have to designate that
right here. And we just use a from and to
177:22 - but the from needs a forum and an underscore,
and then you set it equal to whatever. Now,
177:28 - if we leave off the underscore, you can see
it gets really angry. And it realizes that's
177:32 - an error right away. So I have no idea why
you need an underscore, but you do. And then
177:37 - you need to designate the two. And notice
there's no underscore for the two which doesn't
177:42 - make sense. I mean, let's be consistent here,
people who built this. So let's, I don't know,
177:47 - let's go what 200,
177:49 - I don't know.
177:50 - And now we just go vertical dot pack to put
this guy on the screen. Now it's important
177:57 - that you pack it on its own line. You don't
want to come up here and go dot Pac like we
178:04 - have so often in the past, for some reason
that screws things up later on. And I'll show
178:08 - you why in just a second. Okay, so slider
dot pilot, save this, head over to our terminal
178:15 - and run it. And when we do that, we get this
slider, it goes from zero to 200 is not much
178:23 - to look at, but you can change the graphical
properties of it, change the color foreground
178:29 - border, all the stuff we looked at how to
do that for like labels and things. So you
178:34 - can do that in the same way. Okay, so that's
something I guess. So that's vertical up and
178:41 - down. That's the default, we can also go horizontal.
So let's do that real quick. Let's go horizontal.
178:48 - And that's going to be a scale. You know what,
let's just copy this whole thing.
178:55 - And
178:56 - right here, we just add another attribute,
we go orient, we're going to orient it on
179:00 - the screen. And we want this to be horizontal.
If I could spell horizontal, there we go.
179:07 - And likewise, we want to pack this guy on
the screen. So if we save this, come back
179:13 - over here. Run this guy again.
179:18 - Zoom, whoo,
179:21 - we get this horizontal widget. All right,
not that great. One thing I want to show you
179:26 - really quickly. We haven't I think we looked
at this once and it really talk about it.
179:31 - But up here we can designate how big we want
our original window to be. We just call route
179:37 - dot geometry. And then say if we want 400
by 400. We can do that. If we save this, come
179:46 - back here and run it again. You can see now
that the whole box is 400 by 400. It's a little
179:54 - bit bigger, gives us some room. I'll just
show you that real quick. Okay, so we've Got
180:00 - these sliders, they slide they return numbers.
But what do we do with them? Well, that's
180:06 - exactly what they're going to do, they're
going to return a number based on where they're
180:10 - slid to. And we can get that number. By calling
the dot get method. We've looked at that for
180:16 - labels, I believe in the past. So we would
go horizontal dot get, right. And if we wanted
180:22 - to slap this into a label, we could go I don't
know mine, or score label equals a label.
180:29 - splat, right LA, b, e, l, there we go. And
we wanted to route and we want the text to
180:38 - equal this. And we want to pack this on the
screen. So if we save this and run it, we
180:48 - see this zero label right here. Now if we
change this, it doesn't change automatically.
180:53 - So if we want to do that, we need to kind
of use a function or something. So instead
180:57 - of a label, let's create a button and let's
call it my underscore btn wants to be a button
181:03 - and root and the text is click me. And the
command equals what slide.
181:14 - And we want to pack this
181:17 - up here, let's create this slide function.
Boom. And inside of here, let's just copy
181:25 - this. Okay, so every time we press the button,
it'll update this. So let's look at that real
181:33 - quick. Just to make sure this is working.
Zoom, pull it over Zhou. So let's move this
181:42 - to 103. If we click me, boom, 103 188, boom,
188. And that's pretty much it. Now, whatever
181:50 - you want to do with that, that is up to you,
if you want to say, I don't know, let's say
181:56 - we want to resize this, right? We could do
that. It's kind of weird. Let's pull this
182:04 - up. Because we got this root geometry right
here, we could just bring this over here to
182:11 - our thing here. And instead of, say, 400,
we could just put in, let's see, horizontal
182:22 - dot get. This is an integer, and this needs
to be a string. So we need to wrap this whole
182:28 - thing in a string function. And that'll allow
us to then concatenate that into this. Okay,
182:37 - so that almost works. But we need to change
this, we need to tell we need to send this
182:46 - into our function here. So if we save this
and run it, this won't work. I don't think
182:51 - they pull it up and see here. So if we bring
this over here, if we click this, oh, it doesn't
183:01 - work like that. So it's changed the 138. horizontally,
vertically, it's still 400. Right? So if we
183:11 - go 179. And that works 200. All right. Cool.
So we can change this to let's see, 400. If
183:25 - we want to save this and run it, come back
here. Alright, we're at 400 by 400. If we
183:33 - change this to 200, boom, we can go back to
400. Boom. Right? That's kind of cool. We
183:41 - could do the same thing for this if we wanted
to, right? We haven't yet. But we could. Now
183:47 - what about just moving the slider and having
it update based on the slider, we can do that
183:53 - too. It's a little trickier. But let's take
a look at that. So instead of using the button,
183:58 - we want to just use the slider. So we'll stick
with this horizontal guy, we can send a command
184:04 - into that. And we could send that command
equal to say, slide.
184:12 - And then
184:13 - Okay, so that should work. Now, this will
not work. This is what I was thinking earlier.
184:18 - We need to pass something from here. We need
to pass whatever this is into here for some
184:25 - reason. So let's save this and run it just
to make sure but I don't think this is going
184:28 - to work. Like I said earlier. Yeah, we get
boom slide is not defined. Oh, that's not
184:33 - the problem. I was thinking I've the reason
why this isn't working now is because this
184:38 - function is below this. So if we copy this,
bring it up here. Okay, so now that error
184:45 - will go away, but it will get a different
error. I think this time, let's check and
184:50 - see. Yeah, so we got all these errors. So
whenever we're sliding this, it's sending
184:59 - the commission And, but it, it's not sending
what this is 147. And for some reason that
185:06 - our slide function won't pick up with the
dot get thing. So we need to be explicit when
185:11 - we do that, for some reason, just a weird
little thing I discovered. So how do we do
185:15 - that? We just come over to slide and let's
just call this
185:18 - Well, I don't know.
185:23 - Far very variable. I don't know, save this.
I think that's all we really need to do. Well,
185:28 - maybe not.
185:30 - run it and see. Um,
185:34 - yeah. See, look what happens when we're at
zero. is 
185:45 - very touchy, right? Now, if we go 300, it's
okay. So as soon as we move it to something,
185:55 - it starts to resize. And that resizing makes
everything a little wonky. So this is not
186:00 - the best way to do things, right. Unless you
wanted to click it, and then use your arrow,
186:06 - you can't even use your arrow. So yeah, that's
not a great way to do it. I much rather use
186:12 - a button. But if you want to do that that
way, for some reason, you could by passing
186:18 - in, var value or any just any variable at
all, then this whole thing, the slider, output,
186:27 - I guess you would call it gets passed into
slide function. And that work. So I don't
186:33 - really like doing that. But you could now
we could, let's see, change our button to
186:42 - use both of the sliders. So we could go here
instead of 400. We could concatenate again
186:50 - call the string function. And inside of here
pass, what do we call it? vertical?
186:58 - dot get?
186:59 - Okay, I think that should work. We got to
close our program. Loop blows. Clear? Oops.
187:12 - There we go. Oh, on 18 horizontal dot pack.
What has gone wrong line 18 horizontal dot
187:28 - pack. Recall that pack. missing a lot that
got deleted. All right. So this should work.
187:36 - Now. I'm just playing at this point. This
is a hot mess this video but you know, so
187:41 - let's move this to 118 and 147. Boom, now
the whole thing gets resized, we could go
187:48 - back to 400. By 118, we could change this
to 200.
187:56 - And that works.
188:02 - need to change this to 400 I think so that
we could go back. But yeah, so that's how
188:05 - you do that. So sliders pretty simple. All
things to the contrary. You know, you can
188:10 - use these for all kinds of different things
are kind of fun play with, like I said, you
188:13 - can change the display of this, make them
bigger, make them different color, change
188:18 - the length of them. And all that stuff in
the same way we've done with labels and stuff
188:23 - in the past pretty simple. Okay, so checkboxes,
we've already looked at radio buttons, those
188:32 - are those like round buttons that like lets
us select from different things. checkboxes
188:37 - are square boxes, and they're more just like,
on or off, right. So very similar to radio
188:45 - buttons. But there's a couple of little tricky
things involved. And it's kind of a little
188:50 - bit weird. So we're going to take a look at
that in this video. So I've created a file,
188:53 - just call it check.py. I'm going to save it
in our GUI directory. And this is just the
188:57 - basic starter code that we've been using forever.
So first things first is we need to create
189:02 - a counter variable, just like we did with
the radio buttons and kinter variables are
189:07 - a little bit different. In order to get their
value. You don't just call the variable you
189:12 - call like the variable name dot get, if you
want to set the thing usually say the variable
189:17 - name dot set, you know, we've looked at these
before, so we're just gonna create one called
189:21 - var. And it's we just go var equals and then
just
189:26 - declare the kind of
189:29 - variable that you want. So we want this to
be oops, int var, right? So, you know, Kinjo
189:36 - variables, you could have integer variables,
or you could have, for instance, string variables,
189:42 - but in this case we want and we're going to
actually change this in a minute. But the
189:46 - reason why we want int is because when you
check box when you check a box, the value
189:51 - that you're assigning to it behind the scenes
is either a zero or a one and one I think
189:56 - means you've checked it and zero means you
haven't checked it. So those are one and zero
190:01 - are numbers. They're integers. So we use int
var here. So to actually build a checkbox,
190:07 - I'm just going to call it C for checkbox,
we just go check
190:10 - box button,
190:13 - I can spell. And the same thing as always,
we want to put it in route. And you know,
190:21 - put the text as anything you want. check this
box, I dare you. Right, now, we need to assign
190:31 - the value of the variable name that we're
going to use for this. And we're going to
190:35 - use our var variable, so we just type in a
variable equals and then set that equal to
190:40 - var. Now there's a couple other things you
can put on here. And we'll take a look at
190:43 - those in just a second. But just for right
now, let's go see dot pack, pack this guy
190:49 - on the screen. Now. I mean, we can save this
and run it. So let's go Python, check that
190:57 - high. Pull this over. And you know, we can
check this and that does stuff but it's not
191:03 - actually doing anything, right. So to actually
see what's going on behind the scenes, let's
191:08 - just create a little variable real quick here.
And what we call it, my are labeled and I
191:18 - said variable, label one label, and I set
that equal to label. And then what route as
191:24 - a text we want set equal to var dot get want
to get what's in that variable. And then we
191:31 - could just pack it on the screen. And I think
that will work. Okay, so if we save this,
191:37 - and come back here and run it, this is not
a great solution. But we can see right away
191:45 - it's unchecked, and it's zero. If we check
this, it won't update, we need to actually
191:49 - create some sort of function in order to do
that. So let's go ahead and do that real quick.
191:53 - Just to see. Let's back up. And what let's
just create a button, my button equals button
192:03 - and route and the text equals show selection.
Yes. All right. And then what we want this
192:15 - to have a command equals to show, let's just
come up here real quick and create a show
192:22 - function. And we can just change this to this.
Alright, so we click this button in a run
192:36 - this function, and it'll show this and update
it. So I think that will work. We need to
192:41 - pack this guy on the screen. always forget
that. All right, so let's run this and see.
192:47 - So check this box, I dare you show selections
zero if we check the box 11110. Okay, so that
192:56 - works. And that's how you do that. So that's
basically the functionality of the checkbox.
193:02 - Now we can get into some other weird little
things. And we will just now because why not,
193:07 - we're having fun here. But I mentioned at
the beginning, that we're using this int var,
193:13 - we can change this to string var. And if we
do, we can, the default is zero or one, we
193:20 - can change that if we want, we can have the
output be anything we want, we can change
193:24 - it to pizza, if you check the box, right?
It doesn't have to be one. If you don't check
193:29 - the box, it could be you know, john, like
whatever you want, you can assign. And you
193:35 - do that down here, when you create your checkbox,
or check button, whatever you want to call
193:40 - it, just by defining the on value. And then
let's just call it on or the off
193:49 - value
193:51 - equals off, right. So
193:56 - if we check the box, now, instead of it being
one, it'll be on. If we don't check the box.
194:01 - Now instead of it being zero, it'll be off.
Now on its face. This seems pretty simple,
194:06 - but we can't run into some problems. And let's
just see by running this. So we save this.
194:10 - Remember, we've up here we've changed this
now to a string variable. Why? Because this
194:16 - is no longer zero or one it's on or off. And
the words on and off are strings. So we need
194:22 - to change our variable to a string variable.
So let's go ahead and run this and see. We're
194:26 - going to get some problems here. First thing
right off the bat, you'll notice the box is
194:30 - checked by default. And before it wasn't checked
by default, I'm not sure why that is. Now
194:36 - if we click this, nothing happens. Right?
That's weird. Now, but if we uncheck it, and
194:45 - then click it now it says off. If we check
it again, now it says on so what in the world
194:50 - is going on here? Well,
194:53 - I don't know.
194:54 - This is a little glitch. I've discovered I
did a little research I couldn't figure out
194:58 - what what in the world is going on here. It's
all Printing something on the screen because
195:01 - there's space here, right? But I have no idea
why. And also this is and this is checked
195:07 - by default. And we don't really want that.
So the way that I find, as a workaround is
195:13 - to right up here at the top, when you first
define this thing, before you even pack it
195:18 - on this screen, we can use something called
the D select function, and it's just D select.
195:23 - Right, and that does exactly what it sounds
like it D selects it by default. So if we
195:28 - save this and run it, this over the first
thing, you notice that it's not selected by
195:36 - default, which is good. Now, if we click this,
it says off right away. So that works. Now,
195:41 - if we uncheck it, and click it is on right
away, there's no big space in here. So nothing
195:45 - weird is going on. And that works. And now
we can test it again, one more time. And this
195:52 - time, start off the bat by checking it. And
that works. So I have no idea why that is.
195:59 - But just is one of those weird little kinter
things you just got to sort of remember. So
196:04 - on off, that's pretty cool. Like I said earlier,
we could totally mess around with this and
196:11 - call the on value.
196:14 - Pizza.
196:16 - And the off value. hamburger? I don't know.
Great. Let's run this again. check this box,
196:25 - I dare you pizza amberger. You know, like,
Why in the world? Would you want to do that?
196:32 - Well, you know, come back over here. And let's
go. supersize. And then here, let's go. regular
196:44 - size. Right. So and then here are string are
redefined. check this box, I dare you. You
196:51 - could say, Would you like to Super Size your
order? Right? Check here? I don't know. All
197:03 - right. So have you got an app where you're
ordering food online, and you'd like to supersize
197:09 - your order, you could check this and boom,
now it's you know, it's supersize. It's not
197:14 - like that. So those are checkboxes, an awful
lot like radio buttons, but you know, with
197:18 - some little bit of differences, specifically
this D select thing and that weirdness around
197:23 - that. I have no idea why that's the case.
But it is. And it's a pretty simple workaround.
197:28 - So Alright, drop down boxes, what am I talking
about? Well think of like a webform, where
197:35 - you click the little drop down box box opens,
there's a menu you can select from, you pick
197:41 - the thing, and that's that, well, basically
the same thing, but with kinter. So a drop
197:46 - down box is basically something called an
options menu, an option menu singular. So
197:52 - to do that, let's go create a variable. And
this acts an awful lot like the checkboxes
197:57 - we looked at in the last video. So there's
a lot of things that are similar. So you'll
198:00 - notice that so it's just option, we need to
set this equal to option menu. And we want
198:07 - this in route. And just like with the checkboxes,
we need to assign a variable to this. So that
198:13 - you know, whatever we check in the boxes,
whichever box we select, which whichever item
198:19 - in the box we select, that will be assigned
to a variable. And we could call it var if
198:23 - we want, or we can call it clicked, whatever
you want. And that's that. So now, inside
198:29 - of here, the next thing is to sort of designate
the items in the menu. So we could go Monday,
198:36 - Tuesday. And you just separate these with
commas thurs day, and the most important day
198:48 - Friday. All right, so now we just dropped
dot hack onto the screen. Now, we've created
198:55 - this clicked variable, we need to actually
define this because just like with the checkboxes,
199:00 - this is a kinter variable. So it's a little
different. You set it and get it and you define
199:05 - whether it's a string variable or an integer
variable. In this case, our menu items are
199:11 - strings. So we're going to use a string variable.
So we just call clicked equals string var.
199:18 - And that's it. All right, so this will work.
And I should mention, I just use the same
199:22 - starter code we've been using. And I'm saving
this as drop down.pi. So this will work but
199:28 - it won't show a default value, as you'll see
here. And let's just run this and see. So
199:32 - right off the bat, pull this over, you can
see here's our menu, but there's no default
199:37 - items, but if you click on it, and then select
an item, it'll update, but that's not great.
199:42 - We need an actual default item. So how do
we do that? Well, it's pretty simple. You
199:47 - know, we've played with these variables, these
Kinjo variables before, and we can get and
199:55 - set. So in this case we want to set and then
we just pick which one we want to set So let's
200:00 - just call Monday here. So if we save this,
come back here and run
200:03 - it. Now,
200:04 - pull this over, boom, it says Monday right
at the beginning. Very cool, right? So, okay,
200:11 - so how do we get the selection and use it
to do stuff with? Well, just like the check
200:18 - boxes in the last video, we can just access
this clicked variable. So let's create a button,
200:24 - my button. And that's a button and it's in
route. And we want the text to say, Show selection.
200:36 - And let's give this a command equals show
just like we did in the last video. And then
200:40 - up here at the top, we can define show.
200:48 - And then let's go my label equals label. And
we want this and route and we want the text
200:56 - to equal. Now we're gonna want this clicked,
not in quotation marks clicked, dot get, right?
201:06 - And then we want to pack this on the screen.
And here our button, we need to pack that
201:11 - one too. And I'll always forget that. Okay,
so if we save this, this should work, I think.
201:18 - Okay, so show selection, boom, Monday, Thursday,
201:24 - Friday, wow. Okay.
201:28 - So that's how you do that. Now, once you've
done that, obviously, you can do anything
201:32 - you want with it, right? one little thing
I do want to show you down here, here, we're
201:37 - sort of designating what options we want to
show up in the menu, what items we want to
201:41 - show up in the menu. And that's okay, it works.
But like, you might have 100 things in your,
201:45 - your drop down that you want. And this is
already starting to get unruly. So instead
201:50 - of doing it like this, we can actually just
use a Python list. So let's create a list.
201:58 - It's called options. And it's just a regular
Python list. Alright, and I'm just going to
202:04 - print in and paste in these items. So here,
you know, I'm gonna put these one on each
202:09 - line, because that's what we like to do with
lists makes it easier to read. So here, we
202:16 - can, instead of putting all of these guys
in here, we can just pass in this list options.
202:21 - Now, one thing we have to do that's a little
different than not really intuitive, need
202:26 - to put a star in front of it. So all right
here, this looks good. Now here, when we set
202:31 - this, we set it equal to Monday, we can now
if we wanted to get really fancy, set the
202:36 - sequel to options, and then just pick an item,
right? We want the zeroeth item in our list.
202:40 - That's just a Python list, the zeroeth item
is Monday. So we'll just pass it in. Like
202:46 - that's a little nicer way to do that. So sort
of eyeballing this, everything looks good.
202:51 - So if we save this, back here and run it again,
it works the same exact way, right? It's just
202:59 - now it's been created as a list. Why would
you want to do this was just easier. So like
203:04 - later on, if we wanted to add Saturday, right?
Boom, we just do it like that. It's easy,
203:10 - you just go right to the list, it's easier
to read, it's easier to edit in the future.
203:14 - And then everything just works. So if we save
this and run it just to make sure we get boom,
203:22 - Saturday's there Saturday. So pretty simple,
pretty straightforward. This is very similar.
203:29 - Like I said to the checkboxes, we're using
the same hinter variables and the same sort
203:35 - of way. And we're showing them in the same
sort of way with the show function that we
203:39 - created and click get. This is a little different,
because this time, we're also setting it to
203:45 - begin with. So that's kind of fun. And that's
pretty much all there is to it. Okay, databases
203:54 - up until now, we've been having some fun with
kinter. But adding a database to any type
203:59 - of program vastly improves the sort of power
of that program, you can do a lot of stuff
204:04 - with databases we just can't do without. So
you know, likely whatever you build ever,
204:10 - you're going to need a database. So we're
going to start looking at how to use a database
204:14 - with kinter. So we're gonna use the sequel
lite three database, which comes with Python.
204:18 - So it's super easy to use, most people don't
even realize it comes with Python. And it's
204:22 - not very powerful. It's not like MySQL or
Postgres. But it's great for small projects,
204:27 - test projects, hobby projects, things like
that. And if you learn how to use it, it's
204:32 - really easy to learn how to use MySQL and
Postgres after that, so it'd be easy to sort
204:36 - of switch over if you need something more
powerful. So to use SQL lite with our counter
204:42 - program, all we have to do is import it. And
it's almost ridiculous how easy it is. To
204:49 - import this, all we have to do is type in
import, SQL lite three and boom, we now have
204:54 - SQL lite database in our program. Very cool.
All we have to do now is connect to it and
204:59 - start using it. So I've created a new file
called database.py, I have the same basic
205:03 - starter code that we've been using forever.
So the first thing we need to do is create
205:10 - a database or connect to one that already
exists. And the commands for both are the
205:14 - same. So let's go create a database or connect
to one. And to do that, we create a connection
205:22 - to the database. And so we just create a variable
called anything you want. But I'm going to
205:26 - call it con short for connection. And we're
going to set it equal to SQL lite three dot
205:31 - Connect. And then inside of here, we just
pass in the name of the database we want to
205:36 - connect to or create. So I think in the next
few videos, we're going to create a basic
205:41 - sort of address book app. Right? So let's
create a database called address underscore
205:47 - book. That dB. So this doesn't exist exist
yet, right? We haven't created it yet. Oops.
205:56 - But like I said, if it doesn't already exist,
This command will create it for us. And it'll
206:02 - actually save it in whatever directory we're
currently in. So we've been saving all of
206:06 - our code in these videos in the GUI directory,
so it will save address underscore book.db
206:12 - in the GUI directory, super easy, super cool.
So the next thing we need to do is create
206:20 - a cursor. And a cursor is sort of like the
little thing you send off to do stuff with
206:24 - the database. So anytime we want to execute
any sort of command, the cursor does that
206:29 - we send it off, and it does, it comes back
with the result. That's the cursor. And same
206:33 - thing we just create a variable I'm going
to call C for cursor, is tend to type it a
206:37 - lot. So I don't want to type out cursor every
time. So just call it C easy to type for all
206:43 - of you lazy people that are just as lazy as
me. So cursor. Okay, so this is a cursor instance,
206:49 - I guess. So let's go create cursor. Okay.
And anytime we make a change to our database,
207:00 - we want to commit those changes to the database.
That's just a common database thing. So to
207:04 - do that, we just go con dot commit. So let's
go commit changes. And then finally, whenever
207:17 - we're done, we always want to close our connection.
And we don't really have to, whenever the
207:23 - program ends, our connection closes automatically.
But it's sort of just the polite thing to
207:28 - do to explicitly close your database connection.
So we just go con dot close. And that is that.
207:37 - Okay, so we've got our cursor, we've got our
database created. Now we need a table, if
207:43 - you know anything about databases, you know,
a database isn't really anything, it's the
207:47 - tables inside that do all the work hold all
the data. And it's the table that we're always
207:53 - interacting with. And think of a table as
a spreadsheet, it has columns and rows, and
207:58 - we just need to designate what those columns
are. And then every time we add an entry,
208:03 - that becomes a new row, right. So things like
first name, last name, address, zip code,
208:08 - those are all columns in the database table.
So we need to create that table and designate
208:13 - those columns. And so that's what we're going
to do. Now, let's go create a table. Okay,
208:20 - so to do that, we use our cursor, we always
use our cursor. And usually when we do stuff
208:25 - to the database, we're executing some sort
of commands. So we always, almost always want
208:29 - to go execute here. And then inside of here,
we need to, you know, do some SQL, Structured
208:37 - Query Language, SQL commands to do whatever
we want to do. And in this case, we want to
208:42 - create a table now, usually, you just put
quotation marks, and then you type in your
208:46 - commands. But since we're creating a table
tables are kind of big, there's gonna be a
208:50 - lot of stuff for us to type here, I'm gonna
use these doc type, string things. And it's
208:55 - just six quotation marks instead, open and
close quotation marks. And like I said, this
209:00 - allows us to do stuff on multiple lines. Otherwise,
you could use single quotes and do it all
209:04 - on one line. So what we want to do is create
a table, right, and now we need to name it.
209:11 - So let's call our table addresses. Right.
Now, inside of these parentheses, we need
209:16 - to just designate the different columns that
we want. So let's go we want to first name.
209:24 - And now we need to designate the data type.
And so this is going to be text. Now, the
209:29 - cool thing about SQL lite is it only has five
data types. And those are text, which is just
209:35 - text, integers, which are whole numbers 1015
108, real, which are decimal numbers, 1995
209:43 - 2795, that sort of thing? No, which means
does it exist or does it not exist? And blob
209:50 - and blobs are like image files, video files,
things like that. So pretty simple. Databases
209:55 - usually have a lot more data types and it's
always kind of complicated, but you only ever
209:59 - use Here's a few write text and numbers basically.
So that's one of the cool things about SQL
210:04 - is we have first name, we want last underscore
name as well. And that'll be text, we want
210:11 - the address, and that's text. And you notice
I'm separating each one with a comma. And
210:17 - that's pretty simple address. Let's go city,
that's a text. Let's go state. That's text.
210:24 - And let's go zip code. And that's going to
be an integer. Okay, so that's the last one,
210:31 - we want to put a comma at the end of that.
I just sort of do this to make this look good.
210:36 - And boom, there we go. Now we could have used
single quotes and put all of those on one
210:40 - long line, it's really hard to read, this
is much easier to read. So that's why we use
210:44 - those triple quotation marks. Okay, so I misspelled
execute looks like xx, huge Toohey. And that
210:51 - was hard. Execute. There we go. Okay, so we
only need to run this, once we need to create
210:58 - our table one time, we need to commit those
changes, close our connection. So I'm just
211:03 - gonna save this, head over to our terminal
here. And we want python database.pi. If we
211:10 - run it, this box pops up. There's nothing
in here because we haven't done anything yet.
211:14 - So we can just go ahead and close it. And
now if I pull up a little thing here and go
211:20 - into my C drive and look at gooey, you see
now this address book, that DB database file
211:26 - exists it created for us inside of it, presumably
it has the table that we just created as well,
211:32 - we won't really know till the next video when
we start putting data in and see whether or
211:37 - not it worked to find out if it did work,
but I think it worked. That's pretty simple
211:41 - code right there. So in the next video, we'll
start to build out our kinter app with fields
211:45 - and stuff. So we can type in people and their
addresses to add to the database. And that
211:50 - should be cool. I should mention very quickly,
on my website, I've got an entire course on
211:55 - sequel lite with Python. So if you really
want to get into the nitty gritty of this,
212:00 - check that out is $29 for the course. But
of course, if you sign up for total membership,
212:04 - using that coupon code, YouTube, you get all
of my courses for just $27 In which case,
212:09 - you'll get this one for free. And it has it's
an hour and a half long, 22 videos, and it
212:14 - has all the stuff and in much greater detail,
we're not going to go into great detail in
212:18 - these videos right here, I'm just going to
show you some basic stuff. And you can learn
212:22 - more later if you want. But definitely worth
checking out if you're interested in all this
212:26 - database stuff. In this video, we want to
start to build out the graphical user interface,
212:34 - the things that allow us to type in entries
and save them into the database and all that
212:39 - good stuff. We got our database.py file from
the last video we've connected to our database
212:43 - created the database, we have our cursor,
we've created our table. Now we can comment
212:50 - out the table because we don't want to recreate
the table. Every time we run the program,
212:54 - we just need to do it one time. So now we
can add stuff to the table. And that's what
212:58 - we want to look at in this video. So the first
thing we want to do is create some text boxes
213:04 - that we can type information into. So we want
one for first name, last name, address, city,
213:08 - state and zip code. And we're gonna use entry
boxes entry widgets with TK, enter, enter.
213:14 - We've done this in previous videos, so you
should remember how to do it. If not take
213:18 - a look back at the older videos. So I'm going
to create one called first name. And let's
213:23 - call it's an entry widget. And we want it
in route and we want the width to be what
213:28 - say 30 ish, it's probably good. And we need
to now put this on the screen. So F underscore
213:34 - name dot grid. And we don't want to pack this
because we're gonna have a whole bunch of
213:38 - stuff here. So we don't want to really just
pack everything, we want to have a little
213:42 - bit more sort of options to place them exactly
where we want. So of course, we're gonna use
213:47 - the grid system. So we want this to be in
a row equals zero and column equals zero.
213:55 - And for this one, oh, first, let me just copy
this. And then for the first one here, I'm
214:04 - also going to put excuse me a pad x of say
20 just to patent a little bit. So now we
214:10 - need one for last name, address, city, state
and zip. So I'm just gonna copy and paste.
214:15 - So last name, address, city state zip. And
then just come through here and change these
214:21 - to L name. This one will change to address
and address. This is very glamorous work here.
214:32 - City,
214:35 - city
214:37 - and state and state. And finally, zip code
and zip code. Okay, so we probably want them
214:49 - in column one because we need to put text
next to them a little label to describe which
214:54 - you know boxes which so it's probably changed
this to one for each of these Now that I think
215:01 - about it, it's a good thing to think these
things through for our session of really.
215:06 - Alright, so the first one is in row zero,
the next one we want on the next line down.
215:10 - So that's row one, row two, row three, row
four, five. And that looks like yeah, so all
215:20 - right, we can put these all back together
here. And let's make a little comment, let's
215:25 - say create text boxes. Alright, so like I
said, we also want to create text box labels.
215:34 - And, let's see, let's just go let's call him
first name underscore label. And that's, of
215:43 - course, going to be a label. And we want it
in root. And we want the text to equal first
215:48 - name. And that should work. Now we want to
first underscore name underscore label dot
215:56 - grid. And we want this to be row equals zero,
and column equals zero. Okay, so same deal,
216:09 - we just need one now for last name, address,
city state, zip. And just come through here
216:18 - and change these again. So address label and
address label. City label, city label,
216:32 - state label,
216:33 - very exciting label as zip code, label, and
zip code label. And again, we want row 123
216:47 - or, and five, and up here, we just need to
change these to last. And then again, address
217:01 - bear with me, city. The joys of Kansas State.
And finally, zip code. All right. These all
217:14 - together, I just put line spaces just so it's
a little easier to make sense of it as we're
217:19 - typing them. Okay, so now, we also need buttons,
right? So let's create, we want to create
217:30 - a submit button. Right? Okay. So let's call
this submit underscore button. And that's
217:42 - going to be a button. And it's going to be
on Route and the text is going to be what?
217:48 - Add record to database
217:51 - works.
217:54 - And we want this to have a command and let's
just call this what Submit. Good. Alright,
218:00 - so we want Submit button dot grid. And where
do we want this? We want this in row equals
218:08 - six, because under underneath there, and column
equals probably zero, right? And we'll probably
218:16 - want this to span across both columns. So
let's go column span equals two. And what
218:22 - else do we want, I probably want to put some
padding so pad y equals 10, let's say, and
218:30 - that'll put it down a little. And I want pad
X to equal probably another 10. That'll put
218:37 - it over a little bit. And I want iPad X to
equal 100. So want to stretch it out a little
218:45 - bit. Okay, so I think that will work. Now
we need to create this submit function. So
218:50 - let's kind of head up here,
218:52 - somewhere up here.
218:54 - Looks good. And let's go create submit function,
or database, I guess. So define Submit. And
219:06 - let's just return it for now. Actually, let's
clear the text boxes. So every time we enter
219:18 - stuff into the text boxes, and click the button
to submit it into the database, we want those
219:23 - text boxes then to clear so then we can afterwards
type in another record if we want. We don't
219:28 - want that information to just be sitting there.
So we can do that with F underscore name.
219:32 - Call the actual name of the entry widget dot
delete, and then give it a zero and n and
219:39 - we just do this for each one first name, last
name, address, city state zip. And one more
219:44 - time. Fun work of typing these and over and
over address. City. State and finally is zip
220:00 - code. Alright, so let's save this and run
it, pull up our thing here and we want database.pi.
220:06 - Pull it over, and it's looking pretty good.
So now if we type some stuff in here, and
220:15 - then click this button, boom, it disappears.
Alright, so far, so good. Not bad. So now,
220:22 - what do we want to do, we need to actually
create some code to submit the stuff that
220:29 - we type into the database itself. So the first
thing that's kind of weird, is you gotta connect
220:34 - to your database and create a cursor inside
of your function. When you use functions.
220:39 - I'm not really sure why that is, but it is
the case. So make sure these tabs over. And
220:47 - let's head down to the bottom here and grab
these two lines, we want to commit our stuff
220:51 - and close our connection, we need to do that
inside of our function as well have those
220:58 - over. Okay, so now, how do we actually submit
the stuff
221:05 - from our form? Right? Okay, so
221:07 - let's go insert into table. Right. And just
like before, when we had our C, ad execute,
221:18 - to add to create a table, we're going to again,
see that execute. And we almost always execute
221:26 - our cursors, just what we do. So we're going
to use SQL now to insert into, and we named
221:31 - the table that we want address says, right,
and the values of something, right. So before
221:43 - we use this doc type, string, thing, Doc string
doc type, whatever it's called. This time,
221:48 - I want to use placeholder variables, just
a different way to do it. And you do that
221:52 - by just creating sort of dummy variables,
and you start with a colon, each one starts
221:57 - with a colon. So I'm going to name these the
same as our text boxes, you can name them
222:01 - anything you want, but it makes sense to name
them what they're going to be. So first name,
222:05 - underscore last name, apps, we need a colon,
separate them each with commas, and then colon
222:12 - address, comma, colon, city, period, a co
comma, colon state, colon, zip code, okay.
222:28 - Now, at the end of this, we need to, oops,
there we go. Stick a comma, and then
222:37 - come down.
222:41 - Now inside of here, we need to create a almost
at Ruby dictionary, a Python dictionary. And
222:47 - it's just this. And Python dictionaries have
key value pairs, and the key will be this
222:53 - dummy variable. and the value will be whatever's
in our textbox. Right. That's how that works.
222:59 - Pretty simple. So let's go.
223:02 - f underscore name,
223:04 - and you separate them with colons. And then
remember kinter variables, we can get them
223:10 - and set them well entry widgets are like kinter
variables, we can get or set them. So that's
223:17 - what we're going to do. So let's go f underscore
name, dot, get, and then comma. And then just
223:23 - on the next line, we just go through and do
one for each of these last name, colon, l
223:29 - underscore name dot get very exciting work
here. Address, colon, address dot get. And
223:41 - then what city colon, city dot
223:47 - get.
223:48 - And then state, colon, State DOT get. And
then finally, zip code, colon, zip code dot
224:02 - get. And this is the last one. So we don't
have to put a comma. And remember, these things
224:09 - are these. So if you named these up here,
ABCD F, this column here would be ABCD. F,
224:17 - we just happen to name them the same as we
named our widgets, our entry widgets, just
224:23 - because that kind of makes sense. All right,
so now we can do some stuff here to
224:31 - make this look better. Okay, so if we save
this, and we can run this just to make sure
224:38 - it worked.
224:40 - Now, we're not going to be able to see if
it worked yet because we haven't created any
224:45 - functionality to output the stuff from the
database onto the screen, but at least we
224:51 - can see if we get an error. So let's go john,
Elder 10 West Elm. He's live on Tim West Elm
224:59 - in Chicago years and years ago, live in Vegas
now, but he's living very cold Chicago downtown.
225:06 - Pretty cool. So add record, boom, it disappeared.
And if we end it, we didn't get any errors
225:13 - up here. So we can assume that it added the
thing in, and we're good to go. Okay, so now
225:19 - we need to create a button to actually pull
whatever's in the database out and then put
225:23 - it on the screen. So we can see whether or
not this first part worked yet. So let's go
225:30 - down here. And let's just create a query button.
And we want to call this white query underscore
225:38 - button. And this is a
225:40 - button,
225:41 - we want it in root and we want the text to
equal what show records maybe that's probably
225:49 - good. And we want to give this a command of
what let's call this query, create a query
225:55 - function. And we want to query underscore
button dot grid this thing. And so we're on
226:02 - row seven now, column equals zero. And again,
we want to column span this guy to two. And
226:13 - let's go pad y equals 10. And pad x equals
10. And let's stretch this with an iPad. x
226:25 - equals 137, which I happen to know is, is
a very nice size. So if we save this real
226:32 - quick and just look at this, we can see up
name query is not defined, we got to create
226:39 - that function real quick. So whatever we call
it, query, let's head up here. And let's say
226:45 - underneath our submit guy, submit function,
let's go create query function. And let's
226:53 - go define query, qu, er y. And let's just
return for now. Alright, save this, to cancel
227:01 - that. run this again. Boom, now, what did
I, oh, I misspelled column span, I do that
227:10 - sometimes. Column span. That's ugly typo.
Alright, so save this, run it again. Third
227:19 - time's the charm, and boom, so that button
looks pretty good size compared to the other
227:24 - one. And of course, it doesn't do anything
yet. So we can close this, clear the screen.
227:29 - Okay, so
227:32 - querying the database, we haven't really talked
about this yet. But it's, it's fairly simple.
227:38 - Again, let's come up to our submit guy. And
let's copy, we still need to connect to the
227:44 - database again. And we still need to commit
and close. So grab that.
227:54 - There we go.
227:57 - Okay, so to query the database, it's pretty
simple. We just, again, use our cursor and
228:09 - execute like always, so it's that C dot execute,
as a function. So inside of here, we want
228:15 - to run some SQL SQL command, we want to execute
our SQL command. And the command we want is
228:21 - select. So we want to select and what do we
want to select want to select everything.
228:26 - So the star means everything. And we want
to select it from our addresses table. Right.
228:34 - So one more thing we want to do is, in most
databases, you have to designate and create
228:40 - a primary key for each record. And a primary
key is a unique record a unique number. So
228:46 - you know, every single entry you make, it's
a unique sort of ID number. And in SQL lite
228:52 - three, it creates it for you. So we don't
even need to do that ourselves, which is really,
228:55 - really cool. But it kind of ignores it, since
it creates it for you and ignores it, unless
229:01 - you specifically tell it to print that number.
And we kind of want to see what that number
229:05 - is. So we want to select everything. And the
O ID and o ID I'm not sure what that stands
229:11 - for. I don't even remember at this point,
original ID maybe? I don't know, but it's
229:16 - the primary key, right? So primary keys are
useful for a lot of different things. Specifically,
229:21 - later on. If you want to delete a record,
you don't want to delete john elder because
229:26 - there might be 20 records of somebody named
john elder, but each record has a unique ID.
229:32 - So you can delete record number 87, for instance,
and there are no other records that have the
229:38 - ID of 87. So that's what that's used for.
So, okay, so we can we create this this command
229:44 - here, want to select everything and our IDs
from addresses. We also need to then do something
229:50 - called fetch also see, fetch all and fetch
all does just what it sounds like it fetches
229:59 - all of the records. Now you can do fetch one,
and it will just bring back one record, the
230:05 - first record, you can do fetch many. And then
in here, say, designate how many records you
230:11 - want to fetch 50. For instance, we don't want
to do that we just want to fetch all. Okay?
230:19 - So normally, you could just print out, see,
well just print out this thing, right. But
230:31 - this is kinter. And print doesn't really work
with kinter. So we need to create a label
230:36 - and kind of print that onto the screen. But
first, let's just run this by actually doing
230:43 - that, well, actually, instead of using CDF
fetch all let's smash that into a variable
230:49 - so that we can then put that variable into
a label, as we've done so many times. So let's
230:54 - call this records and set that equal to that.
Now we can print out records, and it won't
231:00 - print it to the screen in our app, but it
will print it to the terminal after we close
231:05 - the app. So let's run this real quick just
to see what this record looks like that we've
231:09 - already put in and back over, run
231:11 - it again.
231:14 - And if we click Show records, nothing happens.
But if we then close it, we see boom, this
231:19 - record appears. And you'll notice these brackets,
that means that means that this is returning
231:24 - a Python list. And inside of that list, there
is a python tupple. And then inside of the
231:31 - tupple, you can access each of these things
by their index number. So john is zero if
231:36 - item in list and the tupple, 12345, and then
six. So that's the way it's returned. We can
231:47 - of course, do anything we want with this information,
this data, we can sort it out and put it on
231:52 - the screen however we want. So what exactly
do we want to do?
231:57 - Well,
231:58 - instead of only that print there for now,
in case we need to troubleshoot.
232:01 - But
232:03 - since we just have one record, let's go. Let's
create a for loop. Right, so let's go for
232:09 - what do we want to call this. So we've called
this one records. So let's call this for record,
232:17 - and records. Right. And then we want to let's
create a variable called print records. And
232:27 - we want that to plus equal out whatever is
in records. And since since it's a list with
232:36 - a tupple, inside of it, the zeroeth item of
the list is our tupple. So we can actually
232:40 - call the zeroeth item will change this in
a minute, you'll see why. But for the very
232:45 - first time we do this, since there's only
one record, we can do it like this. Now I
232:49 - want to sort of
232:52 - print out record,
232:54 - right, which is the item in the loop that
we're going to loop through. And we also want
232:59 - to concatenate and then
233:02 - put a line
233:05 - break. And the reason why I want to do this
is because we're going to create a label here.
233:09 - And we want each item that gets printed out
to be on its own line. So we have to put a
233:13 - line break in here. Now, this is a problem
because record the thing we printing out,
233:18 - you can see one of these a couple of these
things are integers. And you can't concatenate
233:22 - a string with an integer. So we actually need
to convert this whole thing to a string, which
233:28 - is not too hard, we can just wrap this whole
thing in the string function. Okay, so now,
233:38 - outside of this loop, we want to create a
label. So let's call this the query label.
233:43 - So we're making a query and set that equal
to
233:45 - label.
233:47 - And then it's in route and the text we want
to be print underscore records. Right. Now,
233:56 - we actually need to before we start looping,
we need to create that variable and set it
234:01 - equal to nothing since we're not function
here. And that's how that works. So let's
234:08 - go loop through results. So finally, we need
to query underscore label dot grid this thing
234:20 - out, and I think we're in row eight. Now,
234:24 - down here and look.
234:27 - So row seven is the last thing we did. So
now we're in row eight, and we want column
234:33 - equals zero, and we need to column span this
thing out to be equal to, and I think that
234:39 - will work. So if we save this and run it again.
Pull this over, click Show records, boom.
234:49 - On each line, we get an item in that tupple
john elder, and we could do whatever we want
234:56 - with these things. Okay, so that works with
one record, but we're going
234:59 - have more than one record. So let's create
another one real quick.
235:03 - Let's go Bob
235:04 - Smith. He lives at 20.
235:09 - East, cedar,
235:11 - cedar street? I don't know. St.
235:16 - Louis,
235:17 - MO, Missouri. What's the zip code? Is there
six to 901? Who knows? Okay, so now we add
235:25 - this to the record, boom, it disappears. If
we click here, nothing happens. Why? Well,
235:30 - let's close this. And we can see, whoops,
it looks like this has been added twice. What's
235:35 - going on there?
235:37 - Oh,
235:38 - that's from the first time we click the button.
disregard that. Okay, so look, when we call
235:44 - this loop, we're calling the zeroeth item
in our list, which if we pull this back up,
235:50 - here's our list. And there are two items in
it. Item one is this tupple.
235:58 - And then there's a comma.
235:59 - And then here's item two. So we're calling
item one, or item zero, which is this item
236:04 - zero with item. So that's the only thing it
prints to the screen. We don't really want
236:08 - to do that. So let's just take this off, and
just print out everything. Alright, so if
236:14 - we save this, and run it, let's clear the
screen, run it again, pull this over show
236:21 - records, boom, now we get each tupple printed
on its own line. And it has, you know, everything
236:29 - inside of there. That's in our records. Then
we see the last thing is the ID the primary
236:34 - key the O ID. So there's one, there's two.
Very cool. So now this is tumbles, we know
236:41 - from just regular Python, how to do stuff
with tupple. So we can format this any way
236:46 - we want. And it's still printing this out
on the screen. So I think now we can get rid
236:51 - of this print thing right here. I'll just
comment it out. And in case you want to reference
236:58 - this code later, but down here, let's see
in our for loop, we can tell this to print
237:03 - out anything we want. So each record is an
item now is a tupple. And inside of that it
237:08 - has item numbers tupple numbers, right. So
the zeroeth item of each of these records
237:14 - is the first name. So if we just do that,
and save this and run it now, we will get
237:21 - first names printed. JOHN and Bob. Right.
Very cool. So you know, we can do anything
237:28 - we want. With this, we can concatenate some
more, let's put in a space, and then concatenate
237:34 - again. And then let's
237:35 - just
237:38 - grab this whole thing
237:41 - and paste it and then concatenate the line
break again. This guy needs a quotation mark.
237:49 - Okay, instead of record, the zeroeth item,
let's call the first item, which is this the
237:55 - last name, excuse me, save this,
237:58 - run it again.
237:59 - Hold on over show records. JOHN elder Bob
Smith. Very, very
238:06 - cool.
238:07 - If we add another person, Tina Miller, I don't
know. She lives at 89. Apple Street.
238:17 - And
238:18 - I don't know what's a good town, New York,
New York 1092. I have no idea what the zip
238:28 - code is there. If we add this boom, that disappears.
If we click this button again, boom, Tina
238:33 - Miller pops right on up. So like I said, you
could format this any way you want. I'm going
238:38 - to leave that to you. I'm just showing you
the basic functionality of how to do these
238:41 - things. There's 1000 ways you can create reports
and things and output data however you want.
238:46 - That's the beauty of Python and kinter. So
I'll leave that to you. I think in the next
238:51 - video, we need to build a thing in here to
delete a record, if we want to remove Bob
238:57 - Smith. There's no way to do that yet. So we'll
do that in the next video. In the meantime,
239:01 - if you're interested in this database stuffs,
specifically the sequel lite database, head
239:04 - over to my website, coding me calm, I just
released a course not long ago. And SQL Lite.
239:09 - This is just pure SQL lite and Python. And
it's 20 videos hour and a half long, and cost
239:15 - $29. Of course, you can sign up for total
membership using that YouTube coupon code
239:20 - I'm always going on about and you'll pay just
$27 for all of my courses, including this
239:24 - one, which is better than one course for 29.
So if you're interested, definitely use that
239:29 - coupon code. Some people don't understand
it. And you'll learn all of this stuff in
239:34 - great detail really go in in more detail than
I'm going to go into in this series. I'm just
239:39 - going to show you some basic stuff right now.
Like I said, if you're interested take a look
239:42 - at that course to learn, you know in depth
stuff about sequel light. In this video, we're
239:51 - going to take a look at how to delete a record
from our database. Let's just run this real
239:56 - quick and show you what we have so far. So
here Our database, we can add things in here,
240:02 - click the Add button, it adds it, we can show
them. And we have john elder Bob Smith and
240:06 - Miller, we can, you know, configure this to
output any of this stuff that we want. But
240:12 - just to make it easier, we've just put the
first and last name, I think right now let's
240:16 - go ahead and add the user ID number, that
o ID number that we talked about earlier,
240:21 - because we're going to need that in a minute
to delete records. And I'll go into why that
240:25 - is. So let's pull our code back up. And go
to the C query section here. And down here,
240:35 - where we're outputting. The result on the
screen, we have first name, which is this
240:39 - record, the zeroeth item of the list, I guess,
the tupple. And then the first item is last
240:46 - name, I believe the the ID is the sixth or
the fifth. So let's just go ahead and continue
240:53 - concatenating. And let's add another space,
and it got catenate again, and here, we just
240:59 - want to copy all of this. In between these,
just paste this in. And I'm not sure if it's
241:06 - the fifth or the sixth. Let's try the sixth
and see. So let's save this, run it again,
241:11 - real quick.
241:12 - Hold on this over
241:14 - show records. Okay, that was right. So now
we're getting this number next to these. And
241:21 - that's cool. That works. Let's see, we can
get a little crazy if we want. And this might
241:27 - not work, but let's add another plus. And
then inside of here, we can put a Backspace,
241:35 - a backslash T stands for tab, if we want to
tab that over a little bit. So let's save
241:41 - that. And give it a look. This may or may
not work, it'll definitely work. But yeah,
241:47 - okay, because sometimes if these don't line
up correctly, the tabs go over a little bit
241:52 - too much or not enough. So okay, so we now
we have the first names, last names and the
241:57 - ID at the top here, we could put a little,
you know, a thing that said first name, last
242:02 - name, or a little field that says name, and
then a little field that says ID number or
242:08 - something, we'll just leave it like this for
now. Um, let's see, I'm seeing this right
242:11 - up here. This is bothering me, it's shoved
right up to the top, let's push this down
242:15 - a little bit, we can add some padding to this.
So we just want to do this first name in this
242:19 - text box here real quick. I'm just going to
scroll down to the text box section. So here
242:26 - we have, here we go text boxes. So first name,
here, I'm just going to add a pad y and set
242:35 - that equal to no we haven't done this before,
you can add a tupple here, if you only want
242:39 - to add padding to one side. So I just want
padding on the top. So that's I'm going to
242:43 - add 10 to the top. And then I can go comma
zero, and I want to put no padding below.
242:48 - So we'll do that. And we could just copy this
whole thing. come down here to the label,
242:54 - I want to do the same thing to the label.
That's right there. There we go. So let's
243:03 - save this and run it just to see what we have
here. Playing around at this point, because
243:09 - it's fun. Okay, that looks a little better.
It's pushed down a little bit, and they still
243:12 - all line up. So okay, now we want to talk
about how to delete records. So if we click
243:19 - the Show records, we have these records, right,
john elder Bob Smith and Tina Miller. And
243:24 - we want to delete them. Now there's a couple
of ways to delete things you can say, you
243:28 - can look for a specific record, and then say
delete this record. But what we search for
243:35 - is important. So if we said search for john
elder and delete that record, that will work.
243:41 - But there may be four or five john elders
in our database, common name, right John's
243:45 - a common name elders, fairly common, you know,
Bob Smith, there might be 50 Bob Smith's in
243:49 - your database. So if you say delete Bob Smith,
that command will go through and delete every
243:54 - single Bob Smith in your database. And you
probably don't want that. So we need to search
243:58 - by this o ID, this primary key number is user
number to delete things because each record
244:06 - in our database only has one specific unique
ID number. So if we say, you know, get rid
244:12 - of Tina Miller, she's number three. If we
say delete number three, we'll just lose Tina
244:18 - Miller, which is what we want. So how do we
actually go about deleting things from a SQL
244:22 - database? Well, it's pretty simple. And we
can come up here and let's just come somewhere
244:28 - up here to the top of our thing, and let's
go create function to delete a record. Alright,
244:41 - so let's define our function and let's call
it What? Delete?
244:45 - probably good.
244:47 - Now inside of here, we want to do all the
same things that we've done in the past, which
244:53 - is connect to our database and create a cursor.
We can do that and then commit our changes
244:59 - and close We can just paste these in here.
And inside of here, let's go delete a record.
245:09 - So how do we do this? Well, it's pretty simple.
It's just like everything we've done, we use
245:12 - our cursor, and we execute a command, as we've
always done. And the command that we want
245:18 - is delete from and then name the table that
we want to delete from. And if you remember
245:25 - our table, his address is right. And then
now we want to use something called the where
245:32 - clause, and it's just a sequel clause. So
DELETE FROM addresses, where, and here you
245:39 - designate the column that you want to search.
And so we want the O ID column, where the
245:45 - O ID equals and then what? What do we want?
Well, let's put placeholder here, for now.
245:54 - All right. Now I'm seeing this does not look
right. So we need to wrap all of this in quotation
246:02 - marks. Okay. That's right, delete from your
database table addresses, where ID equals
246:10 - placeholder. Now we can do the same thing.
We could go where f underscore name equals,
246:15 - and then put quotes. Well, we need single
quotes.
246:23 - JOHN, right,
246:25 - we could do that. But like I said, that'll
give us the problem where it will go through
246:28 - and delete every single john in our database.
So we don't want that. Of course, what we
246:32 - want is Oh, ID equals place, holder. Now we'll
create we'll change that placeholder in just
246:39 - a bit. So what we need now is in our app,
we need a box where you can type in the number
246:47 - of the ID number that we want to delete, and
we need a button to actually delete. Let's
246:51 - go do that real quick. And let's just come
down here, create text boxes. underneath here,
246:57 - let's go
246:58 - create.
246:59 - Well, see, we
247:02 - have some more down here. Yeah, let's just
go down right here. And let's go create a
247:08 - delete button. And let's just copy all of
this. And paste it in. Instead of query button.
247:18 - Let's call it delete button. Anything here,
delete button. And this is not row seven.
247:23 - This is what we're on. There was a row eight
here. So I think we're on row nine, maybe,
247:29 - let's try that we're in row nine column span
is to add extra pedway. I have no idea what
247:36 - this is going to be. But the command we want
here is delete, right? Because that's the
247:41 - funk function we created. All the way up here,
just now this delete function, right? Okay.
247:52 - So let's change this to delete. Record. So
let's save this and just run it real quick
248:02 - to see if the formatting is correct. It's
probably not. Okay, so this buttons a little
248:12 - bit bigger, so I'll probably knock off what?
Let's go 135 on the iPad. x, save this, run
248:24 - it again. This is just for show basically.
Okay, that's pretty close. Let's add back
248:35 - one more. So 136, save that.
248:38 - Run it.
248:40 - Okay, that's pretty, pretty good. Now we need
probably what above this. We need a little
248:54 - label and a box that says, you know, ID number
or whatever. So okay, let's do that. So I'm
249:04 - gonna add these think right here. So let's
go delete. Let's start with the box itself.
249:15 - Right here. Let's go delete. underscore box.
I don't know name it whatever you want. And
249:23 - it's an entry box and it's in root and the
width equals 30. Like all the rest, and then
249:30 - we can go delete underscore box dot grid.
And we want this in row.
249:37 - Let's go.
249:39 - Row equals nine, column equals one. Okay,
I think that will do. Yep, and then for a
249:53 - label for the same guy. Let's go delete underscore
box underscore label
249:59 - equals Label. And that's in route and the
text equals ID number, I guess. Or we can
250:11 - do it out like that ID number. work. And again,
we want to read this onto the screen. So delete
250:21 - underscore box label, dot grid equals row
equals 10. column. I could type column equals
250:34 - one, no, zero, right. So now we have to, let's
put this back up here. Now we also have to
250:41 - change since we put these two rows above,
we need to change our button to row a lab
250:47 - n. Okay, I think that worked. Let's save this
and run it just to make sure everything looks
250:53 - okay. And it is not everything's all sort
of messed up. Oh, we need it to be the same
251:01 - row, obviously, doi. Alright, so this should
be row nine. And then we need to change our
251:06 - button to row 10. All right, it's Monday morning,
you got to bear with me.
251:13 - Monday morning in Vegas.
251:14 - Alright, that's better. IDs, sort of, kind
of weird. So let's go back and change it to
251:23 - what do we want? What do we have it before
it was? Id let's go delete ID. So we're really
251:32 - explicit in what's going on here.
251:36 - Okay,
251:39 - our good. So now we want to be able to, you
know, if we show the records that's showing
251:47 - up, we're probably going to want to change
that to put it underneath it. So let's do
251:50 - that right now. The fun with Cantor. So that
would be the query. And here the query label.
251:59 - So instead of row a, we want row 11. Now,
so let's save this and run it make sure this
252:04 - is working. Okay, the good stuff in this video.
Alright, so show records, boom, that pops
252:10 - down below there, you might want to play with
the padding here, this is kind of close this
252:14 - there's more space in between these two than
there is in between this. So just you know,
252:19 - you might want to do that. I'll just leave
that for now. You can play around with the
252:23 - padding in this stuff if you like, right,
just add a pad wide to these two. Well, let's
252:31 - do that right now. Why not doing all the things
this morning. Alright, so back down here to
252:36 - our delete. And here, we'll just go what pad
y equals, let's add this five, delete box
252:44 - label. Where's the actual delete box right
here had y equals give that a five, save this,
252:53 - run it again. Okay, it's looking a little
better. I like that. Okay, so now we need
253:02 - to fix our delete record button to actually
delete a record. So let's say well, we'll
253:09 - do that later. actually delete one later,
after we fix it, let's clear the screen starting
253:13 - to get a little crazy. Alright, so when we
click this delete button, it calls the Delete
253:20 - command, or the Delete function, which is
up here we did at the beginning of this video.
253:25 - And we want to get rid of this placeholder.
And this is kind of a strange thing we don't
253:31 - want to what we're going to do is come down
here and get our
253:35 - let's say
253:38 - delete box entry. And we're going to get that
like we've done before, but your instinct
253:47 - is going to be to go delete box dot get like
that. But that doesn't work. What you have
253:54 - to actually do is concatenate that on afterwards.
So if we save this, now come back here and
254:03 - run it and pull this over, we can show our
records Bob Smith. Let's delete number two.
254:13 - If we show the records, again, some weird
formatting here, but it goes from one to three.
254:20 - Now if we close this and run it again. Sure
our records we see. Number two, Bob Smith
254:27 - is gone. And it was just that easy. So pretty
simple delete from your table where o ID,
254:37 - which is the primary key that we've talked
about before equals and then concatenate this
254:42 - on here. Now this is a string. Now this is
weird because it's an integer in the database.
254:47 - So you would think it would need to be an
integer. But you can't concatenate an integer
254:52 - on here. So for some reason, with the kinter,
you can pass an integer like this as a string
254:59 - and it will still deleted even though the
database has it as an integer. So that's how
255:04 - you delete from a table. Not too bad. And
in the next video, I think we'll learn how
255:09 - to update a record. So we have these things
here. What if we misspelled Miller? How do
255:14 - we change that, we'll look at how to do that
in the next video. In this video, we're gonna
255:22 - look at how to edit or update a record. And
I thought we create a whole new window that
255:26 - pops up that has all of the updating editing
stuff in it, as opposed to trying to cram
255:32 - more stuff onto this screen, which is starting
to already get kind of full. Or we can do
255:36 - it all on the screen have the record update
right in these boxes, but that seems a little
255:41 - complicated. Plus, it allows us to create
a new window. And that's kind of fun, we learn
255:44 - how to do that several videos ago. So if you
need a refresher, go take a look at that in
255:48 - the playlist. So first things first, I'm going
to change this delete ID to select ID. So
255:53 - from now on, if we want to delete a thing,
we select it, and then click the Delete button.
255:58 - If we want to edit it, we select it and click
the Select button. So I'm just going to change
256:03 - that, that word right there from Delete to
select. So let's find the delete button. Here
256:08 - it is right here. And let's go select
256:13 - I guess.
256:15 - Okay, and if this is the first time you're
watching, this is the code we've been working
256:19 - on on all the videos up until now. So you're
going to want to go back and look and see
256:23 - how we made all this stuff.
256:25 - So now
256:26 - let's create another button right below this
one. And let's call it let's go create an
256:33 - update button. I think update would be a good
thing, as opposed to edit doesn't really matter.
256:40 - And let's change this from delete button to
edit button or update button whenever you
256:45 - like. And it's going to be row 11. Now, in
our query field or query function, it puts
256:53 - the output on row 11. So we need to probably
change this to 12. Put it below this button.
256:58 - That will work. Alright, so instead of select
record, we want this to say update, record
257:04 - or edit record. and edit is smaller than delete.
So the button itself needs to be a little
257:12 - bigger 145 ish. Probably will work. Alright,
let's save this and just give it a quick look
257:18 - to see if if that worked. Close it, run it
again. Hold on over. It's pretty close. Maybe
257:30 - a smidge smaller maybe. And if we click Show
records, the stuff still shows up below. So
257:35 - that that's looking good.
257:37 - So yeah, let's
257:38 - change that from what was that? 145 to 144.
Just piggy at this point. Still a little bit
257:48 - too big maybe? on 43. I don't know I'm just
playing I kind of like doing this stuff. Alright,
257:56 - that looks better. So now that changes delete
ID to select ID.
258:05 - Where's that?
258:06 - That is the delete it right here. Select ID
forgot to do that. Alright, save this. Give
258:14 - it a quick look one more time. Okay, so now
it says select the ID there we get select.
258:21 - Oh, that's why this should still say delete
record, not select record. That's weird stuff
258:27 - going on this morning. Alright, so delete
record, not select record. Okay, so save this,
258:34 - run it one more time. Hopefully we got it
right this time. Alright, so select ID, we
258:39 - could select whatever. If we wanted to delete
it, we click that button. If we want to edit
258:45 - it, we click this button, we haven't actually
created an edit or update function. So let's
258:49 - go ahead and do that right now. Or at least
start to do that. Alright, so notice where
258:55 - we created this update button. I just copied
this code. So the command is delete. We don't
259:00 - want that. Let's go. Edit. Yeah, that sounds
good. So now I'm going to come up to the top
259:06 - of our program. And any old were really let's
go define, edit. And let's give this a comment.
259:16 - Let's say create. Edit function to up date.
259:22 - A record.
259:23 - Okay. So, like I said earlier, we want to
create a whole new window for this. So I'm
259:32 - just going to come to the top of our program.
And I'm going to grab all of this stuff. And
259:38 - we can just paste it right in here and make
sure it's tabbed over. And instead of root
259:43 - What do we want to call this? Let's call it
editor. So we need to change each of these
259:49 - route guys, editor and the title let's say
update. A record I guess should really pick,
260:01 - edit or update I keep using both of those
words, whenever I so let's save this and run
260:07 - it to make sure that worked. After the day
I've been having so far who can tell if it'll
260:13 - work or not. Okay, so here we go, new window
pops up update, a record says up here, it's
260:18 - the same size as our old one. So that's good.
Okay, cool. So now, inside of that new window,
260:24 - we want the same boxes and labels to show
up as that's in our main window, so that we
260:31 - can, you know, edit those if we like. So I'm
just gonna come down to where we've listed
260:34 - those boxes here, we're just going to copy
all this stuff. And let's come back up to
260:42 - our editor function. I'm just going to paste
it all in, highlighted all again, like this,
260:50 - and make sure it's all tabbed over. And since
these are in different windows, we can probably
260:57 - keep the name the same. But I'm always kind
of leery of that just because it's kind of
261:02 - confusing. So I'm going to go underscore editor
and just rename each of these things underscore
261:07 - editor. Oh, I'm just gonna use the mouse,
click and paste and click and paste and click
261:14 - and paste every single thing. And we could
do the same to the labels, but we're not going
261:24 - to be changing the labels or anything, so
I'll just leave those the way they are. We
261:28 - don't need the Delete box, we can get rid
of that. And that. So that's looking good.
261:35 - Okay, now, these, we want them to show up
in the editor window, right. So whenever we
261:43 - create a thing, we always specify right here
where it goes. And these are all root by default.
261:48 - So we need to change each of these editor,
editor editor, the editor, editor editor,
261:54 - same thing with the labels.
261:57 - Um,
261:59 - okay, so that looks pretty good. Let's go
ahead and save this and run it just to make
262:03 - sure everything's coming along correctly.
So edit record. Alright, that's looking Okay,
262:11 - now we want a button underneath that says
save. So whenever we change these things,
262:18 - we can click the button to save those changes.
Alright, so let's do that right now. And we're
262:26 - going to come down here to all of our other
buttons. I'm just going to copy one of those
262:33 - and bring it back up to our
262:37 - edit function. Now,
262:38 - we don't necessarily have to do all these
things in the Edit function. But I like to
262:42 - keep all my code sorted together. And we want
to create a Save button to save record. Save
262:54 - edited record. Okay, so we want to save record.
And let's see, we're in row five. So now this
263:06 - needs to be six. And let's give that let's
give it a 145 and see how that looks. All
263:12 - right. So let's save this and run it just
to make sure that
263:14 - worked.
263:18 - Edit record did not work. Alright, what do
we do? Ah, put it in root. This needs to be
263:29 - in editor, of course. So save
263:34 - that,
263:35 - run it again. See that worked. Edit record.
Alright, save records, decent size. All right,
263:44 - coming right along. Now. Next, we need to
sort of propagate or whatever you want to
263:52 - call it these fields, with whatever record
we have selected, right. So when we click
263:58 - Edit, this will pop up. And it will have record
number three, Tina Miller already filled in
264:04 - each of these boxes, right? So how do we do
that? Well, same thing,
264:09 - we've done
264:10 - many, many things in the past, we want to
come down to our C query function, and just
264:20 - copy this stuff, basically. Yeah, copy all
of this. So and come up here. And right at
264:30 - the top of our function here, I'm going to
paste all the sense. So we need to, of course,
264:34 - as always connect to our database, create
a cursor, and execute it. Now we want to select
264:40 - everything. We don't necessarily need the
O ID, we're already going to know what that
264:43 - is from addresses. But now we need to designate
the specific field. But before we do that,
264:51 - let's create a variable for that field. Let's
call it record underscore ID, and set that
264:56 - equal to what? Well when we run this thing
The select box used to be the Delete box,
265:04 - they come down here and get the name of that
is let's see, where's that delete button now
265:11 - delete box, right where it says select ID,
we want that box itself, the Delete box, which
265:20 - I guess is this guy. Let's copy this back
up to our editor. And we just want to slap
265:29 - that into a variable. And so we get that remember,
we get, we get things from boxes all the time.
265:35 - And now we can take this and reference it.
So we want to select everything from addresses,
265:42 - where Oh, ID equals, and then let's just concatenate
that on there. That should work.
265:49 - Yeah. Okay. So now,
265:53 - we want to sort of cycle through the result,
the Select result, and then put each of those
266:03 - things in one of those in each of those boxes,
right. So we've already kind of done this
266:07 - before, we use the for loop. So we went, let's
see, we go for elements, make comments, let's
266:14 - go loop through results. So here, we can go
for record in records, right. And then remember,
266:29 - each item that comes out of here is a list
item, right? So the zeroeth item is the first
266:36 - name, the first item is the second name, the
third second item is the address, city state
266:44 - zip code, right? So we can print out each
of those things. And we can do that just by
266:50 - using an insert command for our boxes, right.
So we have F underscore name, underscore editor,
266:58 - dot insert, right, and then we have to put
a zero in front of it, we looked at insert
267:05 - when we learned how to do entry boxes, right,
those input boxes, and then we just put that
267:11 - thing, right. So we could just do this for
each item in our database. So first name,
267:16 - last name, address, city state zip code. So
here, we just change this to L name. And that
267:25 - address,
267:27 - city, state
267:31 - zip code, right. And then we need to change
each of these ones. So 12345. Alright, so
267:42 - actually, we don't need this code, I just,
I just rewrote it. But remember it from our
267:50 - query, we're just pulling out each of these
things. Remember, just like we've done right
267:55 - here, here and here. Okay, so we can get rid
of this. Now, there's one more thing we need
268:02 - to do, we've got these boxes created. And
they're below this for loop. So we kind of
268:10 - need to put this underneath. Whoops, get the
comment. So I'm going to copy this. And let's
268:22 - put that underneath these boxes. Okay, so
that should work. So let's save this and go
268:30 - ahead and run it. See how we did. So we need
to show our records. And let's say we want
268:38 - to edit Tina Miller, she is number three,
we type her in there and click Edit record,
268:45 - the new box pops up and her stuff is all listed
in there. And we click this save record, we
268:51 - haven't actually built it to do anything yet.
Now, we just need to fix this button to actually
268:56 - record when we press it. So let's come down
to our edit function here. And at the bottom
269:02 - of this, we have our actual button here. And
we've got it pointed to the Edit function,
269:07 - that's no good, we need to create a new function
to actually save this stuff. So let's call
269:11 - this update. And that should be okay. And
I'm just going to come up here above here.
269:17 - And let's just define update. And we don't
need to pass anything in here. So like everything
269:24 - we've done, always we need to do a database
connection and a cursor. So I'm just going
269:31 - to paste that in here. And like always, we
need to
269:34 - say,
269:37 - close our connection, commit any changes we
make. And we also want to delete the stuff
269:44 - that's in those those fields. So well first,
let's just do this. And we go alright, in
269:55 - our update guy, and like I said, we want to
delete all those things. So let's look at
269:59 - the I think it's the query, know the submit
button at the bottom of this, we have all
270:05 - this code to clear the boxes on the original
windows screen. So let's just copy this, and
270:11 - paste that in here. Because we definitely
want to do that. Actually, let's do it after
270:20 - we've closed our connection. Now these boxes
aren't named correctly. So let's go down to
270:26 - our edit field. And our boxes are f name,
dash editor. Last Name dash editor, city,
270:36 - dash editor, agile everything dash editor.
So you just come up here and kind of paste
270:41 - all this in. Oh, you know what, we don't really
want to edit these, or we don't want to actually
270:50 - do that. Anyway, we just want to close the
whole thing. So we'll just close this whole
270:54 - window, and we're done. And that should be
a lot easier. So okay, so now let's just worry
271:00 - about what code we need to actually update
our database record. And we've sort of I don't
271:08 - know if we looked at this before, but we want
to see that execute. And then the command,
271:13 - we want to use these triple quotes, so that
we can do this on multiple lines, those are
271:19 - doc strings, or doc types I can ever remember
doc string, dot doc type string, maybe I don't
271:24 - know, you can look it up doesn't matter, three,
three quotation marks to open and three quotation
271:28 - marks to close is what we're looking at. So
what we want to do is we want to update, and
271:33 - we want to update our table, which is addresses
SSE s address says, Yeah, that's right. And
271:42 - then we want to set. And now we need to designate
what we want to set. So remember, when we
271:47 - first created our table, we named these columns,
these things. So that's what we're going to
271:53 - use down here. So we're gonna go first underscore
name, equals, and then call this first. And
272:01 - you'll see what this colon first is in just
a second. Last underscore name equals, last,
272:09 - separating each of these with a comma, address
equals address, I would have got city equals
272:17 - city, state equals colon state. And finally,
zip code equals zip
272:28 - code.
272:29 - Right? Okay, now, we don't need a comma for
that last bit. I'm going to come down here,
272:39 - and we need to continue on with our SQL statement.
So when you update SQL, you update the table,
272:45 - and then you set certain columns, where certain
things equal certain things. So we need to
272:53 - put a where clause in here, where now Oh,
Id This is our primary key, where Oh, ID equals
273:01 - colon o ID. And then the three ending quotes.
Oh, actually get rid of those. Okay. So what
273:13 - we're saying is, the record we pulled up has
a specific primary key. In our case, it's
273:18 - three, right? So we're saying update these
things, these columns. With this information
273:28 - for each one, where our primary key or row
ID equals some o ID, that will designate in
273:36 - a second here. In our case, it'll be three
because we're updating record number three,
273:39 - but if you were updating, updating record
number 27, you would, you know, it would be
273:44 - 27. But it'll, it'll find that out on its
own. So all right here, this is all the SQL
273:49 - command. That's, that does the things. But
now we need to sort of designate what these
273:54 - things are. Right? We have to tell our code,
what is colon city, what is colon state, and
273:59 - we do that just right after the comma here,
and we just create a Python dictionary, bring
274:06 - this up. And inside of this dictionary, we
just designate each of these things as the
274:15 - key value pair of the dictionary, this, these
things are the key. So we're gonna go calm
274:21 - or a quote, first. You don't put the colon
in front of it, you just use first and then
274:29 - a colon afterward because it's a dictionary.
That's how you separate key value pairs in
274:33 - a dictionary. Now, we need to just say, what
is the data we want to put in there, and this
274:39 - will be if we go down to our
274:41 - edit
274:42 - would be this
274:49 - right and we need to
274:56 - dot get that
274:58 - now We also need to make a quick change to
our edit function. Because these guys are
275:07 - being used inside this function, if we want
to use them in another function, we need to
275:13 - make these global. So let's go create global
variables for text box names. And then I'm
275:24 - just going to for each of these, we just type
in global, and then the name, right, that's
275:31 - all we have to do. So let me just copy and
paste this a few times. So last name, address,
275:38 - city state zip code. And then we can just
pop each of these in address underscore, editor,
275:49 - city underscore, editor, state, underscore
editor, and zip code underscore editor. Okay,
275:56 - so save that, that will work. Now we can use
these, each of these up here. So
276:02 - now all we have to do is just kind of go through
here. And for each of these go, last. And
276:09 - again, that's this guy right here. colon,
and then it's l underscore name, editor, dot
276:18 - get. As we've gotten things a lot, we get
things all the time. See, the next one is
276:24 - address. And that's address underscore editor
dot get. This is the boring part, city, colon
276:38 - city underscore editor dot get.
276:43 - And state
276:44 - colon state underscore editor dot get.
276:52 - And zip code,
276:54 - which is zip code underscore editor dot get.
And then one more we also have to have and
277:03 - that is O ID, colon. Let's call this record
underscore ID. All right.
277:14 - Now this
277:17 - we need to designate up here. So let's go
record. underscore ID equals delete underscore
277:30 - box dot
277:31 - get.
277:33 - And that is if you think way back in the first
bit of our code here, when we let's see, let's
277:42 - just run this real quick and see here. So
it's this box right here. So when we show
277:50 - records, and we type a thing in here, this
is the Delete. Delete box right here. And
277:57 - so we need to get three which is the primary
ID, right? So if we go back to our code here,
278:05 - that's going to be all the way down here with
our buttons. Create a delete button, delete
278:13 - button, it's going to be the box. So it's
delete box. label,
278:18 - not right here, delete box. All right. Copy
that. Come back up here to our update function.
278:29 - And that's just this right here. Delete box.
Okay, so now Now the reason why we have to
278:36 - tack this on here is because we're Oh ID is
oh ID, this this thing right here, we need
278:42 - to define that. And that's where we do that
right here. And notice, these are just an
278:47 - order. So we have first last address, city
state zip and oh, oh, ID. So same. Same thing
278:52 - here. First, last address, city state zip
ID. I'm not sure that's necessary. Absolutely.
278:58 - But that's what you sort of do. So okay, so
I think that looks good. We're, this is our
279:06 - SQL statement, update addresses set each of
these things were our primary key equals equals
279:14 - the primary key. And then down here, you just
sort of designate them. And this is just the
279:18 - way you do it. When you have multiple things
that you want to update. You know, in the
279:22 - past, I don't know if we looked at update
in this specific set of series, a video video
279:28 - series, but you don't have to do all of this
stuff if you're just updating one column,
279:33 - but in this case, we're updating many columns.
So we have to sort of make this Python dictionary.
279:38 - So Alright, let's save this. And let's give
this a run real quick. Let's clear the screen.
279:47 - And we have show records, Tina Miller three.
So let's go edit record. So let's go It's
279:55 - not 21 Tina Avenue. It's 121 Tina Street.
All right. So now if we save this record,
280:03 - we can close this. Now if we want to edit
records again, this thing pops up. And now
280:09 - it's 21 teen Street.
280:12 - All right,
280:13 - so it actually did it now, it doesn't actually,
once we click this, you know, this thing should
280:21 - disappear. So how do we do that? We can just
give this up our code. After we commit and
280:32 - close, we can just go What did we call this
other window? Let's go down to the buttons.
280:38 - So much code going on, I'm losing track of
things here. Alright, so edit, we run the
280:44 - Edit command or edit function, which is this
guy. And we're creating this editor window.
280:56 - Okay,
280:58 - so that's the name of it. So in our update
function afterwards, we can just go editor
281:02 - dot destroy, is that the command we want?
Let's see, I think it is. We need that. I
281:12 - think maybe, alright, let's save this and
run it.
281:18 - Alright, so three, edit record. change this
back to Avenue.
281:28 - Save it, that did not work.
281:33 - editor is not defined. Well, let's make this
global
281:36 - mobile editor that do it.
281:42 - Try to get.
281:44 - Alright, so select ID three, edit record.
Avenue, changes us to 22 Tina Avenue,
281:54 - save it,
281:55 - boom, it disappears, we're going to open it
back up again. It's 22 teen Avenue changes
282:02 - back to street, save the record, boom, it
disappears. You can edit it again,
282:08 - it's back to
282:09 - St. Alright, so that is looking better. looking
pretty good. We don't need this entire extra
282:16 - stuff, we could just change this to this if
we want. Let's do that real quick.
282:22 - So when we edit,
282:23 - instead of 400 by 600, let's try 400 by 400.
282:30 - Let's run this again.
282:34 - Three at record. That's a little bit better.
Let's try what 300 maybe, is playing at this
282:46 - point, three edit record. And that's a little
better. Leave it like that for now. guys,
283:00 - in this video, we're going to build this very
basic little weather, Air Quality Monitoring
283:06 - app with kinter and Python. And in the next
few videos, we'll make this maybe a little
283:11 - bit more interesting. In this video, we're
just going to start out with the basics, connect
283:14 - to a third party API, grab some weather data,
bring it back do stuff to it, put it out on
283:19 - the screen, think air quality, think like
smog, Paul and stuff like that I live in Vegas,
283:23 - I love to hike in the mountains around here,
we're pretty high up above sea level. So a
283:28 - bad ozone day could really sort of affect
you more at these higher altitude. So I always
283:33 - want to check the smog and the air quality
before I go hiking. And there's this cool
283:39 - website, let me see if I can pull it up here,
air now.gov. And you can punch in your zip
283:44 - code and get the current, you know air quality
level in your area. So you know good is green,
283:50 - we have moderate this unhealthy for sensitive
groups unhealthy for everyone very unhealthy,
283:57 - and you know, Run for your lives. So we're
going to build this app. And you can see right
284:03 - now it's green 38. If it was moderate, this
would be yellow, right? If it was unhealthy,
284:10 - this would be red, etc. So we're going to
build out all this functionality in the next
284:13 - few videos. Now, there's an API that comes
with this you can connect to to get this data.
284:18 - So that's really what we're going to be learning
here, how to connect to an API out on the
284:23 - internet with a kinter project. So you know,
there are millions of API's out there. And
284:28 - if you learn how to connect to them from kinter,
you can use all of them. So you know, if you're
284:33 - not interested in air quality, that's no big
deal. You still want to watch this video just
284:37 - to learn how to connect to API's, and stuff
like that. So
284:40 - check out air now.gov.
284:44 - And I should mention as we build this thing
out in the next few videos, we'll make this
284:47 - a little bit more interesting. We'll make
it bigger and we'll put maybe a search bar
284:52 - where you can look up specific zip codes and
things like that for just for now in this
284:56 - video. We're just going to connect to this
thing and do the very, very basic stuff. So
285:00 - first thing you want to do is head over to
Doc's dot air now api.org. And this is their
285:06 - website where they have the API stuff, and
just go over to the login page, and see request
285:12 - an air now API account, click this link, and
fill out this form, it's completely free,
285:17 - you just have to fill it out with your email
address, they'll email you some a little link
285:21 - that you can click to, you know, prove your
who you are, or whatever, just go ahead and
285:27 - do that. Once you've done that, come back
here and just log in.
285:30 - Go,
285:34 - and you'll see this page. So go to the web
services. And there's all kinds of stuff,
285:39 - we can see the forecast or we can see the
current data. And you can do it by zip code.
285:43 - You can do it by lonneke, longitude and latitude.
If you happen to know your current latitude
285:49 - and longitude. Let's see you can do it by
I think there's something Yeah, bounding box,
285:54 - I'm not really sure what that is. We just
want zip code. So if you want to quick, take
286:00 - a look at the documentation here. This is
the stuff it's going to returns, if you want
286:06 - to read through here, it'll return that our
you know, the local time the area. So you
286:13 - know, in Rs, here, it says Las Vegas, it returns
us Las Vegas, so we know where the data is
286:20 - coming from. It also returns the state, you
can put Nevada on there, if you want to do
286:24 - I don't really care. So I didn't put that
on there. It returns the latitude and longitude.
286:28 - That's interesting, right? If you need to
look up latitude and longitude for some other
286:33 - project, and you just don't want to mess with
it, it's really hard. Use this, it will, you
286:38 - can enter a zip code into this thing, it will
return that latitude longitude that might
286:42 - be a good lookup tool for you in the future.
Keep an eye keep that in mind. parameter name,
286:47 - the Aqa This is the actual number. Now this
thing will return several numbers, it will
286:53 - return the aq II which is this, which is an
average of I guess, these three, so it returns
286:58 - ozone level particles, pm 10, and particles,
pm 2.5, and pm 10. And 2.5. Those are just
287:05 - the size of the particles. So these are particles
under 10. I don't know millimeters whatever
287:13 - unit of measure they use, and this is 2.5.
I'm going to say millimeters you can click
287:18 - on here, there's a frequently asked questions,
somewhere. Yeah, Fact Sheet maybe. All right
287:26 - here fact, your frequently asked questions,
it'll go into all that if you're interested.
287:32 - We don't really care what else category number,
and category name, these are the good, moderate,
287:39 - unhealthy, you know, Run for your life numbers
that sort of correspond to these things down
287:44 - here. So that's cool. Okay, so that's the
documentation. Now, to use this thing, we
287:50 - have to create a query, so they have a little
Query Tool, it's very cool. You can just enter
287:54 - your zip code, put the radius you want, I'm
gonna put five miles. And then here, it lets
288:00 - you select what kind of data you want to receive.
Now we want JSON, you almost always want to
288:05 - use JSON, when you're getting API data. So
now you click Build. And this is your URL,
288:11 - you can grab this and use it, you can also
run it just to see this is the stuff it's
288:16 - going to return if you're interested in that.
So okay,
288:20 - we're good to go now.
288:21 - So I'm gonna head back over, I've just created
a new file called weather.pi. This is the
288:25 - same sort of starter code that we've always
used. I'm gonna change this really quickly,
288:30 - though, to 400 by 50. So it's smaller, right?
And I just want to I'm just gonna paste in
288:41 - our URL just for future reference. Okay, so
288:44 - now we want to talk about how exactly do you
connect to a third party API out in the World
288:52 - Wide Web, the wild wild web, and then bring
the data back into your, your program and
288:57 - your project? Well, there's lots of different
ways you can do it, I always use something
289:01 - called requests. And it is. Let's just import
it here, import requests. And notice it's
289:10 - plural, we also need to decode the stuff that
it brings back. Now it's bringing it back
289:13 - as JSON. So we need to use and we need to
import JSON, JSON, JavaScript Object Notation
289:20 - comes with Python. But requests does not so
head over to your terminal. And I'm just in
289:28 - our C gooey directory where we've been doing
all this stuff throughout this playlist. And
289:32 - we just want to pip install requests. Now
I've already done this. So it says, hey, you've
289:38 - already got this.
289:39 - But
289:40 - you probably don't, it will download and install
it for you and you're ready to go. So that's
289:45 - really all we need in order to start using
this request. And I think you're gonna be
289:51 - surprised just how easy this is. So what we
want to do is, let's just create a variable,
289:59 - I'm going to call it a pri request is that's
what we're going to do. And this is going
290:03 - to be a requests
290:06 - dot get. And then
290:08 - oops, we want to spell request right requests,
right. And that's just this guy right up here,
290:14 - right? We're going to get, and then we just
want to paste in our all our whole query URL
290:21 - that we created just a minute ago. And you
notice it has my API key, and I don't use
290:26 - my API key. I'm going to delete it as soon
as I finish recording this video, so it won't
290:31 - work for you go ahead and sign up for your
own. And where do we get that API key?
290:36 - Well,
290:37 - it put it in it. See, it's right here. But
it it added it for us automatically, because
290:43 - we're logged in here. So it knows who we are.
It knows what our API key, and then it just
290:47 - puts it in there for us. So that's very cool.
290:49 - All right, pull this back up.
290:51 - Okay, so we're almost there. Now, we want
to create a new variable that's called API.
290:56 - You call it anything you want and set it equal
to JSON dot loads. And we just want to pass
291:03 - in whatever content we got from this. So we
go that content, right. And that's pretty
291:10 - much it. Right? Actually, I'm gonna change
this back to 400. For now,
291:17 - now,
291:18 - we need to do something else, we need to set
up a little bit error handling. So let's go
291:21 - try we want to put this in a try block, right?
So if it doesn't work, we want to throw an
291:28 - exception. So let's go accept. Call an exception,
Shawn, as he and oops.
291:36 - There we go.
291:39 - And inside of here, let's say API to just
error for now. Right? So basically, what we're
291:46 - gonna do is we're gonna say, hey, go back,
go
291:50 - get this.
291:51 - Actually, we should probably just put all
of this in the there we go inside of here.
291:59 - Right. So basically, we're gonna say, hey,
try to go get this information from this URL.
292:05 - Once you get it, try and parse it, you know,
strip it out of its JSON and make it into
292:10 - a Python usable thing. If there's a problem,
if you can't connect to the website, if something
292:15 - goes wrong, throw an error, where instead
of our output being API, the output is error.
292:22 - So then when we put API onto the screen, it'll
say error instead of the stuff right? So okay,
292:29 - now let's just create a label, let's call
it my label, call it whatever you want. And
292:34 - so to see this just kinter label, and so we
want to put it in a route, we want the text
292:39 - to equal a p i. And that's pretty much it
for now, I think. And now we just want to
292:48 - pack that onto the screen. So let's just go
my label dot pack. Okay, so let's go ahead
292:56 - and save this. And I think that will do for
now. So let's head over to our terminal. And
293:04 - let's run this Python weather app by invalid
syntax. Oh, yes, it is. We need a colon. Right?
293:16 - Obviously. Alright, so save that. Let's try
this again. Alright, so here, we have our
293:24 - box, right? And let's make this bigger as
we can. You can see there's all kinds of stuff
293:33 - in here. It's just kind of spewed up onto
the screen, right. So what is all that stuff?
293:38 - Well, it's just this exact stuff, right? It's
returned, it looks like a Python list, right.
293:47 - And we know that because it has square brackets
on the outside. So it's a list. But inside
293:51 - of the list is a Python dictionary. And we
could tell that by the squiggly brackets.
293:55 - So I'm just going to copy this real quick.
And instead of looking at it in the GUI, I'm
294:03 - just going to create a new file real quick
and paste this in here. So okay, notice these
294:13 - square brackets on the outside. So that's
a list. And then notice the squiggly brackets
294:18 - on the inside. But let's look through here
we've got looks like up. Here is one list
294:24 - item, right? So we have an opening squiggly
bracket and closing squiggly bracket. Here
294:30 - is the second list item. So let's go through
here. Opening squiggly bracket, closing squiggly
294:38 - bracket. And here's the third list item. Now,
this is what you're always going to do with
294:42 - API data. You're going to see how it gets
returned. And then you're going to just figure
294:45 - it out. Because no two API's return data in
the same way some API's return them as dictionaries,
294:51 - some return them as lists, some return them
as lists with dictionaries in them like we're
294:56 - seeing here. You just have to look through
here and figure it out to figure out What
295:00 - it is, so we're seeing a list with three items
in it. Right? So how do we sort of grab the
295:06 - first item? Well, remember Python lists start
at zero, they're numbered, right? So 012.
295:12 - So there's three items, but they start at
012. So this is the second item right here.
295:19 - Oops. Right here, right? This is the first
item. And this is the zero with item. If we
295:28 - look through these things, they're all the
same except for this. The first one is just
295:32 - returning the aq II the average of all three
of those things. Ozone? No, actually, the
295:39 - first one here is just returning ozone. The
second one is returning that PMI 10, maybe
295:45 - no PMI 2.5, you see right here, and the third
one is returning PMI. 10, if we can find it
295:50 - yet, right there. So for me, I don't really
care about the PMI is that sort of like pollen
295:56 - count, you know, little bits, little particles
of pollen, I just want the ozone. If you wanted
296:02 - those, you can grab those. So we just want
this first thing, which is the zero thing,
296:06 - right? So to get that scrubber code here.
And what we want is instead of putting on
296:15 - our label API, just the whole API, we can
call the specific item. So if we want the
296:20 - zeroeth item, we can save this, and let's
run this guy again, real quick.
296:26 - No, no fix that.
296:30 - I must have
296:33 - accidentally deleted it. Okay, so save that
put the colon there for sure.
296:36 - Alright, let's try this again.
296:39 - Now, it's kind of hard to tell. But we only
have, we could see one thing, the date observed
296:46 - hours observed, we don't care reporting area
Las Vegas. aq 38 in the category number, now
296:55 - notice the category number itself is another
dictionary, because it has two items in it.
297:01 - So we'll have to play with that a little bit.
So okay, we're getting there. So what do we
297:05 - want, we actually just want? Well, we want
three things, we want this reporting area,
297:13 - we want the actual aq II, and we're gonna
want this category. So one thing at a time,
297:18 - let's grab the reporting area. How do we just
make that up here? Well, pretty simple. We
297:24 - just drill down even further, and inside of
parentheses, recording area. Alright, so if
297:33 - we save this,
297:35 - let's run this guy.
297:40 - Boom, we have just Las Vegas, right? If we
want just the aq II, instead of reporting
297:48 - area, we go aq II. Now aq II is the actual
number, right? The air quality indicator or
297:56 - index or whatever. And right now we can see
it's 38. Very cool. What was the other one?
298:04 - Look at our code here. The other one was category.
So if we go category,
298:13 - back,
298:16 - you
298:18 - remember, this one was a little different,
right? It returns a dictionary with the number
298:26 - and the name. We don't know, we don't care
about the number we want the name we wanted
298:29 - to say good air quality. If we return one,
what would that mean? Now we want the name.
298:35 - So how do we get the name? Well, let's see.
Code back up. We once again. Just keep stringing
298:45 - these guys along, right. And boom, we get
good. So Alright, that's how you do that.
298:55 - But now, this is all we don't want to keep
doing this inside of our label, because that's
299:00 - just kind of weird. So let's come up here.
And let's create some variables. So let's
299:04 - go city equals and let's go eight. Let's go
quality. Well let t equals and let's go, what
299:15 - do we call this category? equals, and we'll
put this one as category. Paste in all of
299:22 - these actually. So the city was what was that
reporting area? I think hoarding area. Your
299:34 - that and the quality was just a cue, I believe.
Um, there's no space there. Reporting area.
299:42 - Let me check to make sure. Yeah, recording
area. Back, we could just copy and paste that.
299:48 - Okay, aq II and category name. Okay, so we've
got our three variables here. Instead of doing
299:54 - it like this, let's just sort of What how
do we want to do this? Let's go. Well, the
300:02 - first one we want is city. And then let's
concatenate and let's type in air
300:08 - quality.
300:14 - And concatenate again, and we want the quality.
But this is a number, quality, returns a number.
300:24 - And this needs to be a string because we're
putting these all in strings. So let's real
300:28 - quick wrap this in a string function. We could
have done that up here, I guess. But
300:40 - this is fine, too. So air quality. And what
else let's go put a space. And then let's
300:50 - just finally put the category
300:52 - for now, just to make sure we got it right
cat to Ori. Alright, so let's save this. Run
300:59 - it see what errors I made? Because I always
make errors, as you know. Okay, so Las Vegas
301:06 - air quality. 38. Good. Alright, so we're getting
there. All right. So let's play around with
301:11 - this a little bit more. Now, I'm going to
change this from 400 to 50. And we can actually
301:20 - change the font size of our label, just by
coming up here. And at the end of our label
301:26 - stuff, you just type in font. And now we can
pass in. Let's go I want this hell vac ticker.
301:34 - That's all right. I think so I want font size
20. So let's save this, run it.
301:40 - See how that looks.
301:43 - Okay, so Las Vegas air quality 38. Good. This
might be a little bit smaller. So let's play
301:52 - around with this just a little bit. As I like
to play around with these things. So instead
301:57 - of 50, let's try 40.
301:59 - I don't know.
302:01 - All right, that looks better. I think now,
we have good as the air quality. And so we
302:14 - want this thing to change color based on that.
And this video is getting a little bit long.
302:19 - So I'll just start to do that in this video.
We'll pick that up in the next video. But
302:23 - for now, just at the end of this in our label,
I'm just gonna put another comma, and we can
302:28 - just type in background and set that equal
to green. Now we'll do some logic later on
302:33 - to decide what color to put in there based
on what they actually aq number is, but for
302:38 - now, I'm just going to put green, just to
sort of wrap this up for today and make it
302:43 - look nice. Okay, so that's starting to look
good. But now the rest of it. Oops, there
302:49 - we go. There's white around the edges and
stuff. So the background of our thing needs
302:54 - to be changed as well. So we could do that
a bunch of different ways. Probably the easiest
303:01 - for right now is just to come up here to our
configuration of the actual project. And I
303:07 - can go route dot configure, and then just
set the background to I don't know, green
303:17 - For now, we use hex color codes in the future.
So save this. And oops, come back here. Run
303:25 - it one more
303:26 - time.
303:30 - All right, so now we have Las Vegas air quality
38. Good. And we can put hyphens in the middle
303:34 - of this if we wanted to, or like right here
or something. But we're going to change this
303:38 - later anyway. So we'll just leave like this
for now. So okay, that's pretty much it for
303:43 - this video. Now, let's look at this one more
time very quickly, because this was insanely
303:47 - easy, right? We're connecting to a third party
API by doing nothing more than calling this
303:52 - requests, which we PIP installed. Right telling
you, hey, go out and get this URL, bring it
304:00 - back here and, you know, convert it from JSON
into a Python list, which then we just broke
304:07 - apart and slapped it into a label just that
easy. And that's one of the really nice things
304:14 - about Python. You know, if you do use like
node, for instance, running out and getting
304:19 - stuff from an API with node can be kind of
a hassle because it's a synchronous and it
304:25 - gets crazy. This is just as easy as can be.
And I think you'll probably see that from
304:30 - giving us a shot. Alright guys, in the last
video, we started to build out our air quality
304:38 - app here we can look up the air quality in
our area flashing onto the screen In this
304:43 - video, we want to expand on that and change
the color based on that number. We've got
304:47 - this very basic app built right now and it
looks up the air quality right now we can
304:52 - see in Vegas, it's 36 and that's good. And
so we're showing green, but what do we do
304:57 - if this is a different color? If we Go back
to the website here you can see there's yellow,
305:02 - orange, red looks like purple and Maroon maybe.
And you know, for 50 to 100, your moderate,
305:09 - if you're 101 to 150, or orange,
305:12 - if you're 151 to 200, you're unhealthy. If
you're to a one to 300, you're very unhealthy
305:18 - and above that your, you know, Run for your
lives hazardous. So we want our little app
305:24 - to change colors. And based on what these
are. So pretty simple to do, we should be
305:28 - able to knock this out in just a couple of
minutes. So let's just kind of dive in and
305:33 - do this. So head back over to our code. And
it's just the code from the last video, if
305:37 - you didn't see that video, look in the playlist
for the one before this and check it out.
305:42 - So one thing I'm going to do very quickly,
we've got our label here, I'm going to copy
305:47 - this and put it inside of our trial loop because
I started thinking about it. And I'm like,
305:52 - Well, you know, if it tries to find this data,
and it can, it's gonna throw an error, but
305:57 - then it's gonna throw another error down here,
when it tries to put this, these see these
306:01 - variables in there and they don't exist. So
we should really put this in our trial. Oops,
306:06 - okay, go ahead and do that. Next, we need
a basic if statement, right? So if the color
306:11 - is, you know, if the category is good, show
green, if it's moderate, show yellow, if it's,
306:17 - you know, etc, etc. So let's just go ahead
and do that. So let's go if now what is the
306:22 - thing we're, we're looking at here, we're
looking at this category variable, this is
306:26 - going to return the category name, which is
good, moderate, unhealthy, very unhealthy,
306:32 - etc. So if category equals and make sure you
got the double equal to sign that we're comparing
306:38 - here, right? So if it equals good, and what
we're searching for this good is pull up our
306:47 - app here is this right here, good, whatever
this word is. And we get that just from the
306:53 - website, good, moderate USG. The only difference
is this USG doesn't return USG, it returns
307:00 - the whole string of unhealthy for sensitive
groups. So we'll have to make that little
307:03 - change here. But otherwise, we're just going
to copy and paste each of these names, each
307:07 - of these category names into our little if
statement. So, alright, so if category equals
307:15 - good, we need our colon, then let's create
a variable, let's call it weather color. And
307:21 - set that equal to some color, right? So we
don't know the colors yet. We'll get to that
307:26 - in just a minute. But this is going to be
you know, something like green, I'm not gonna
307:30 - use the word green, we're gonna use color
hex codes, HTML codes, to make the colors,
307:35 - but we'll just leave it as green for now.
Okay, so that's that now we need to do another
307:41 - if statement. And another if statement for
each of these category names. So says just
307:46 - creating a bunch of if statements, we're going
to do an lF Python lF statement instead. So
307:52 - lF category equals, what's the next one's
website here,
308:00 - moderate,
308:01 - V equals moderate, be sure to capitalize it.
It's case sensitive here,
308:06 - then,
308:07 - let's just grab this. And I'm just going to
leave these blank. Alright, so let's just
308:12 - copy and paste there are we've got two so
far. And if we look at the website, so one,
308:18 - two, so we got 1234 more to go. So I'm just
gonna copy and paste this in four times. And
308:25 - make sure your tabs are lined up. I'll show
you what I mean in just a second three. There
308:34 - we go. Four. I think that's right. Notice
how all of these if and elipse line up with
308:39 - tabs. Notice these are not spaces, like if
I hit my space key goes like that. That's
308:43 - not what we want. We want tabs, everything
needs to be tabbed. And the same thing down
308:47 - here. This is a tab as well. Notice it's not
a space. It's an actual tab Python is tab
308:54 - sensitives. Very important. So okay, so now,
so let's fill these out. And so instead of
309:00 - moderate, what's the next one,
309:02 - USG, so
309:03 - this is unhealthy for sensitive groups. So
this is what we need to pay Stan right there.
309:08 - Was that copy that and paste that in? Alright,
the next one is unhealthy. type that one in
309:20 - unhealthy. Okay. Then the next one
309:26 - is very unhealthy.
309:27 - Notice the capitalizations, very unhealthy.
And then finally, the last one is hazard us.
309:38 - cod spell that I'm just gonna copy. This one
has a dress is a hard word to spell. Alright,
309:44 - let's pull this up. Boom, hazardous no space
there. Okay, so now What colors do we want?
309:50 - Well, there's an easy way to pick the colors.
You can just come back over here. And for
309:55 - instance, I'm just going to pick this one
because I'm not really sure exactly what color.
309:59 - Let's do hazard. I don't know exactly what
color this is. So if you hover your mouse
310:04 - here, and then drag and click this Now right
click, and at least in Firefox, you can do
310:10 - this, I don't know about Chrome, you can view
the selection source. And when you do, it
310:14 - shows you the color that it is right here,
the background color. So we can just kind
310:19 - of copy this. And write in there, paste that
in. Okay, so I actually went through and copied
310:28 - and pasted all those little things in here.
So I'm just gonna come through here and grab
310:33 - each of these. So this one's good. Good is
green. This one is moderate, moderate is.
310:42 - You can see there's two colors here, the background
color and the color, we want the background
310:48 - color, because the colors are all the same,
that's white. Well, not quite the same. So
310:53 - okay, this one is moderate.
310:56 - Oops, come back, come back.
311:01 - Where's our moderate right there. So unhealthy
for sensitive groups?
311:06 - Go
311:07 - there we go.
311:10 - And the next one is this guy, which is unhealthy.
Find our unhealthy boom. And then a very unhealthy
311:23 - which is right here. Copy, Paste, copy, paste,
and finally hazardous, which is this color,
311:34 - apparently, I don't know what all these colors
are. Oh, we already did hazardous. There we
311:40 - go. Alright, so let's save this now. We're
getting there, we've got our if statement
311:45 - done, but now we need to come through here
and change our label. So remember, when we
311:51 - did our label in the last video, we put the
background color as green? Well, instead of
311:56 - that, we need to do this new weather color
variable we created in our if statement. So
312:04 - make sure not to do it inside the quotation
marks, you just want to put it like this.
312:08 - So okay, that's almost done. Now, we also
have this up here route configuration, the
312:13 - background of the actual app itself, we need
to change as well. So we'll put that in here.
312:19 - But now we need to move this because Python
starts at the beginning of the program at
312:23 - the top and it comes down. And when it gets
to here, it's looking for this weather color
312:28 - variable. We haven't created it yet. Above
here. Alright, it's down here. So we need
312:32 - to change this actually need to just move
this entire line. And let's put it inside
312:38 - of our try loop. Because again, if it tries
to get this data from the API, and there's
312:45 - an error, it won't, they won't throw up this
or it'll throw an exception, right. So in
312:51 - which case, this won't throw an error. So
okay, that's looking good. So let's go ahead
312:55 - and save this. Now. I don't know if this is
going to work or not. I think that's all the
313:00 - moving parts. Well, let's give it a try. Let's
run this again. Okay, So sure enough, and
313:06 - you can see that you probably can't tell,
but that's a slightly different color green
313:08 - than just calling green. And that's great.
But their quality in Vegas right now is good.
313:15 - So let's go hunting for another town or city
or something. Ooh, there's some orange. Check
313:22 - this out. Click on here. We're at Cincinnati.
313:28 - Um,
313:29 - doesn't help us any. Let's try up here. what's
what's us? Looks like Idaho, some sore. Looking
313:42 - through here. Salmon. All right. So good.
Core doline. Let's see what is that?
313:53 - Copy this,
313:54 - go to Google and type in zip codes because
the zip code for core delene whatever that
314:00 - is. Alright, so that is 83814. So let's put
this in our lookup thing here. And right now,
314:09 - this is hard coded into our URL here, which
is not optimal. In the next video, we'll make
314:14 - a little search function, a little search
bar that we can type in a zip code, but for
314:17 - now, we just hard code that in. And let's
come back over here and run this guy one more
314:23 - time and see if it changes to says 32. Hmm,
that's no good. What's going on here? Well
314:32 - try that again.
314:36 - says it's 60 Oh, that's the forecast current.
Okay, so we need the current aq I so let's
314:45 - go to grangeville. I don't know if that is.
Alright, so let's go grangeville zip code
314:55 - 8353. Zero.
314:58 - All right, so let's try this guy. Just copy
and paste. Save this. Run it one more time.
315:11 - Still good.
315:12 - Thing lies. I think the different The problem
here is I've put in a five mile radius and
315:18 - this is doing some other different radius.
It's not quite the same. All right, well,
315:22 - let's keep looking. We
315:23 - got nothing but time on our hands. Right?
Let's see Louisiana, maybe. Louisiana look
315:30 - and oh, a bunch of once yellow, Baton Rouge,
all the way across. Once yellows. All right.
315:39 - So let's try Baton Rouge.
315:43 - zip code.
315:45 - punches, zip codes, let's pick one. Fingers
crossed, this will be one.
315:56 - Like.
315:57 - And yes, we have moderate, which if we look
at our website, here, moderate is yellow.
316:03 - Our app is yellow. And all right, pretty good.
So very, very easy. It's just a basic, you
316:11 - know, Python, if statement, right? We're gonna
have to do anything complicated. But you know,
316:16 - kind of cool. We look through here again,
we can see, you know, just a basic if loop
316:22 - or if statement.
316:23 - Very cool.
316:25 - The only thing is we change this, we move
this inside of our try. Block, we moved our
316:30 - labels and to our try block as well. Other
than that, nothing to it. In this video, we're
316:39 - going to add a search functionality. So we
can look up a specific zip code instead of
316:43 - having the zip code hard coded in. What we
want to do now is add just a basic form that
316:52 - we can enter in a zip code, press a button
and it will look up whatever zip code we entered
316:57 - in. So pretty easy to do that. And we've looked
at how to use entry boxes, text boxes, form
317:06 - boxes, whatever you want to call them in previous
videos. So if you haven't seen that, go back
317:09 - and look through the playlist. That's in the
comments below this video. And you can look
317:14 - up that video. So let's just come down here
and below or this is a code that we worked
317:20 - on the last couple of videos, our weather.py
file, and I'm just going to come down here,
317:24 - I'm just going to create a label. And we can
really call this anything we want. I'm gonna
317:30 - call it I don't know, let's call zip. And
that's going to be an entry box. And it's
317:35 - going to be in route, right. So that's really
all we need right now. So let's go zip dot
317:40 - pack. To just pack this on the screen. And
maybe a little bit later, we'll get a little
317:44 - bit more interesting with the layout. Right
now we're just going to pack everything up
317:48 - on the screen just to get the functionality
built in. So we also need a button. So let's
317:52 - go Submit button or zip button. And that's
going to be a button. And we're going to put
318:01 - that in route. And the text, probably spot
route, right. And the text for the button.
318:09 - Let's go look up zip code, I guess. And it
needs a command. So let's send this to these
318:19 - zip lookup function. Now we don't have a zip
lookup function just yet. We'll do that in
318:24 - a second. So let's go zip button dot pack.
And Okay, so let's go ahead and save this.
318:31 - Now we need to create this zip lookup functions.
Let's do that up here at the top. And let's
318:39 - go create zip code lookup function. So we
want to define, and we call it zip lookup.
318:50 - I don't need to really pass anything. So what
are we want to do here for now let's just
318:57 - go zip. So let's just inside of here, let's
just go zip dot get. And just to see if this
319:05 - looks right. So let's save this come over
to our terminal. And let's run our app again.
319:12 - And you can see
319:15 - we need to do some resizing here. So all right,
let's close this and resize a little bit.
319:22 - So I'm just gonna come up here and let's just
make this I don't know 600 by 100. Let's save
319:30 - this
319:32 - comeback runner app again.
319:35 - Alright, so we've got the current that's hard
coded right in. And now we've got a form we
319:43 - type stuffs stuff and it doesn't actually
do anything yet. We could create a label underneath
319:49 - here just to make sure this is working. So
let's do that real quick. So let's go inside
319:53 - here. Let's call zip
319:59 - label
320:00 - AB equals, this is going to be a label. And
it's going to be a route. And that text is
320:10 - going to equal. Let's just go zip dot get.
Let's go zip label and pack this onto the
320:18 - screen. Okay, so let's save this and run it
just to see that this form is working correctly.
320:26 - So we can type in 90210. Boom, it pops up.
Now it doesn't change color. We haven't done
320:36 - that. Yeah, but we can click keep clicking
this, and it just keeps popping up. Now that's
320:40 - because we've packed everything right. So
maybe we don't want to pack everything.
320:45 - So instead of that,
320:47 - let's really quickly just change everything
over to a grid system. So we could just go
320:53 - grid. And then well, let's start here are
first the entry box, let's go grid, and we
321:02 - want this to be rho equals zero ups, no quotation
marks, zero, column equals zero. And I'm just
321:14 - gonna copy this and then our button, let's
put this on the same line. So row zero, column
321:19 - one. And inside of our thing here, we want
this to be a grid. And we want this to be
321:30 - row
321:31 - one,
321:34 - column zero, let's give this a column span
of two. So it at least spans
321:40 - both of those. Well.
321:44 - Yeah, let's,
321:46 - let's give that a try. Now, all of this stuff,
we want to put this inside this zip lookup,
321:53 - right? Because we don't want to hard code
the same, or we just want this to, to show
321:58 - up whenever we press the button to look up
a certain zip code. So I'm just gonna kind
322:03 - of look through here and scrap all of this,
try and accept stuff. Copy this. And let's
322:15 - put it inside of here. So let's say we need
to work on our indentation. So and then everything
322:27 - over so Okay, so try and accept or lined up.
The stuff inside the trial is all lined up.
322:35 - Okay, that's looking good. So now, down here,
we need to grid this too. So we want this
322:41 - to be row equals.
322:44 - What are we on now?
322:45 - One, well, actually, we just want this right
here. Right? Okay, and we don't want this
322:56 - anymore. or this or this. We just did this
in order to, you know, make sure that the
323:05 - form thing was working. Now, this is what's
going to pop up this thing right here. Okay,
323:12 - so now we need to change our API call, right?
So find the zip code area here and put a quotation
323:20 - mark. Now we need to concatenate and we want
this to be zip dot get
323:26 - whatever we put in the form, right? And we
need to get rid of that hard coded zip code
323:32 - and then quotation marks so that looks good.
Okay, so let's save this and run it. See if
323:37 - I screwed this up at all, or very well might
have. Okay, so now we have just a very basic
323:45 - gray because there is no color because we
haven't added the zip code yet. So let's look
323:50 - up 90210 Beverly Hills, north northwest coastal
la air quality is currently good. And you
323:59 - notice everything changed to green, which
is what we'd expect. Now let's go to 89129.
324:05 - North Las Vegas airport, I don't know why
saying North Oh, that's the Northwest from
324:13 - the you can see it just put it on top of it.
But it didn't clear what was already there.
324:18 - That's very interesting. We can mess with
that later. Okay, but at least the functionality
324:22 - is working now. And that's what we want. So,
okay, this whole thing doesn't look great.
324:28 - It's not lined up, right. This looks kind
of goofy. Right? We can play with this a little
324:33 - bit right now. I'm not going to get into it
that much in this video. We'll work on that
324:37 - in the next video. But for now, just a quick
thing we could probably do. Let's see. Let's
324:43 - go back and find our button and our entry.
And let's just give this a sticky of what.
324:49 - Let's go west, plus East plus North plus south.
And one do the same thing for the button.
324:59 - If we save this, let's run this guy again,
see what this looks like. And when we start
325:06 - out, it looks the same. But if we get 90210
it at least now there's not that gap between
325:15 - it and it sort of going the length of whatever
has been returned, right. So if we change
325:22 - this to 89129, still stays the same. Let's
run it again. With an 89129 to start with.
325:34 - Okay, so it's this size. Now, if we change
this to 90210, everything kind of changes
325:45 - a little bit, because this got bigger. And
since the first one was smaller, the bigger
325:51 - one overlaps at all. So it looks like it's
disappeared, but we'll need to work on that.
325:54 - Like I said, In the next video, okay, so coming
right along. Not too bad. Again, I realize
326:01 - this doesn't look great, but we'll work on
making it look pretty, you know, in the next
326:05 - video, or so, all we really want now is just
the functionality to make sure this thing
326:09 - works correctly. So 60610, my old Chicago
air quality, everything's good this morning,
326:20 - apparently. So alright. In this video, I want
to talk just a little bit about charts and
326:29 - graphs, right? Python for data analysis is
super popular data science, machine learning
326:35 - all that stuff. And you always want to create
charts and graphs. And I'm not going to get
326:39 - into Python for data analysis. In this video,
I mean, we're going to use NumPy. And we're
326:44 - gonna use matplotlib, but I'm not really going
to talk about them. For this video, I'm just
326:49 - going to sort of assume you already know what
those libraries are, how to use them, what
326:53 - we're doing with them. And in this video,
I'm just going to focus on taking data that
326:57 - we have, manipulating it with those libraries,
and then specifically throwing it up on the
327:02 - screen with a graph or a chart or something
that we can visualize and see. And I'm going
327:07 - to show you how to do that in kinter. Right.
So it's very, very easy, and it shouldn't
327:11 - take very long at all. So first things, first,
we need to install NumPy and matplotlib NumPy
327:17 - is what we're going to use to mess with the
data. matplotlib is what we're going to use
327:20 - to throw up the graph on the screen. So we
need to install these into our terminal. So
327:24 - let's head back over to our terminal. And
I'm just in my C slash gooey directory, the
327:27 - same directory we've been in throughout this
whole video series. And I'm just gonna really
327:32 - quickly pip install NumPy. And it downloads
and takes just a second here. And then we
327:39 - want to pip install mat plot lib. That's doing
its thing. Okay, so that's done with clear
327:51 - the screen. Now let's head back over to our
code here. And I've created this file called
327:55 - plots.py. It's just the same starter code
we've been using, I change the size to 400
328:01 - by 200. If we save this,
328:03 - there's nothing really
328:04 - to see we can run this one go Python plots.pi,
it will pop up. It's just a blank window 400
328:12 - by 200, or whatever. I designated that as
yeah 400 by 200. So first, we need to import
328:22 - NumPy and matplotlib into our program here.
So really simple, we just import NumPy. And
328:27 - let's just call us as NP. This allows us to
access NumPy by referencing in p instantiating
328:34 - it that way. And we also want import mat plot
lib dot high plot, we're going to use some
328:42 - plots as PLT. So that's all we have to do
to kind of install these things and start
328:47 - using them. So let's come down here. And let's
just create a little function. Let's go define
328:52 - graph, or graph. And let's do this. And inside
of here, we want to create some fake data
329:00 - really quickly that we can use to make a graph
out of we can import something from like a
329:04 - CVS CSV file or something if you have data,
you can import that I don't have any handy.
329:09 - So I'm just going to make some up. And let's
call this house prices. Right and we're going
329:17 - to set this equal, we're just gonna make some
random data. So we're gonna go in p, we're
329:23 - gonna call numpy.random.we want a normal distribution.
And again, if you don't know what this is,
329:27 - comment below, I'll make some videos on NumPy
NumPy arrays and stuff like that. But here
329:32 - we want to say, Alright, let's create some
fake data about house prices in our area.
329:36 - Let's say the average price of a house is
I don't know 200,000. And the standard deviation
329:42 - is I don't know 25,000. And then we want to
create a bunch of data plots of this data.
329:48 - Let's say we want, I don't know 5000 data
plots, data type data points of this and we
329:56 - want a normal distribution. We want to generate
this randomly so that should work. Now, in
330:02 - order to actually graph this, let's say we
want to do a histogram, just you know, bar
330:06 - charts that go up and down, that show a distribution,
we can just call PLT, which is matplotlib.
330:14 - You know, we, we call it as PLT, so we can
reference PLT, and we want a histogram. So
330:20 - dot hist, right. And what we want is house
prices, right? So let's take this data that
330:26 - we just created. And let's just plot it right.
And we can, we can specify how many bars how
330:32 - many bins we want. So let's say we want 50
bins doesn't really matter. And that's pretty
330:38 - much it. So we've created this thing. Now
we need to show it right. So let's just go
330:44 - PLT dot show, right? So if we save this and
run it, of course, nothing's going to happen,
330:51 - right?
330:52 - We run it
330:53 - on the server, nothing has happened. Because
we created a function, but we didn't actually
330:59 - call the function, right. So we need to create
a little button, throw it up on the screen.
331:04 - So if we hit the button, the thing pops up,
right, so we can go what my underscore button
331:11 - equals, let's call this a button. And it's
going to be in root, which is just our root
331:19 - thing here. Right. And let's say the text
should be graphic, I don't know. And then
331:27 - we want to call the command equals graph.
Probably should spell graph, right? still
331:36 - does not spell right gra p, h. Okay, there
we go. So that's just calling this function,
331:42 - right. And we don't have to pass anything
in here, we're just calling the function,
331:45 - and it's going to generate this thing. So
now we just need to my underscore button,
331:51 - dot pack this guy onto the screen. And that
should do. So let's save this. And let's head
331:57 - back over here and run this. Oh, my button,
oh, spell button. I cannot type this morning,
332:07 - my batoon my button. Alright, save this. Try
it again. Second time's a charm, boom. So
332:16 - we've got a thing, if we click graph it, it
runs. And this whole window pops up. And we
332:21 - have this histogram, which is very cool. And
you can see it's sort of interactive, as I
332:27 - move my mouse around, the x and y axis is
down here at the bottom of the corner, they're
332:33 - down here, change to tell me exactly where
I'm at. So you can see our data, we created
332:39 - houses that were average of $200,000. So you
can see right here, that's right in the middle.
332:45 - So that makes sense. And the standard deviation
was 25,000. So it goes up 25, it goes down
332:51 - 25, down another 25, down, another 25 up another
25, etc. And it's normally distributed because
332:59 - our code called for a normal distribution,
right? All this backup, every call, and we
333:08 - can kind of zoom in here, right? We can do
this. And that's not that interesting, we
333:13 - can click home to go back. See, we can pan
the accesses moving around and go back, we
333:22 - can click this button and we get these sliders
that come up. And let us kind of play with
333:28 - this if we want to. I don't know why you would
want to do this. But it's kind of cool, right?
333:33 - And just that easy. Right? Click Reset goes
away. We can save this, right? If we click
333:39 - this boom, a whole save dialog box pops up.
And it works for us. It does everything. We
333:45 - don't have to write any save code or anything.
Right? It will create a PNG of this. Very,
333:51 - very cool. And yeah, so you know, we can change
this if we want no bins at all. We run this
334:00 - again. Oops, close this first. Boom. Right
again. You can see now it's blockier. Because
334:10 - there's only 12345678. Well, 910 I guess,
bins, we can likewise, you know, really define
334:23 - it. We could say 200 bands, right? save this
and run it again. This over and graphic. Now
334:33 - we get all kinds of like much finer detail.
And you can see it looks a little different.
334:38 - Even though we're changing the bend size.
The shape of it is slightly different each
334:41 - time because every time we run this we're
generating new random numbers, so it's gonna
334:45 - be slightly different, obviously. But yeah,
just that easy. So it really is just that
334:51 - easy to use graphs with kinter out. There's
all kinds of ones you could try. We could
334:56 - try pie. Let's get rid of this. Just I'm not
sure This is gonna work. I didn't test this
335:02 - beforehand, but it might work. Let's try this
again and graph it. Okay, so we're asking
335:09 - it to create some data. So it's taken a little
while. And you can see, here's a pie chart.
335:14 - There's so many points, though, that it's,
it's kind of hard to make anything out. Let's
335:20 - close this. So we can head over to Google
real quick and just type in mat, plot lib
335:27 - charts, maybe. And here's some sample plots,
we can click on here, different ones you can
335:33 - do. Here's the one we did histogram dot hist,
right? Let's see what else is there. That's
335:41 - fun. bar charts, and you can click on each
one. So let's click on pie chart real quick.
335:46 - And it will tell you exactly the dot pie inside
the parentheses. What stuff to kind of you
335:55 - want to
335:56 - put in your pie chart, and you can customize
it and stuff like that. For instance, if we
336:00 - go back and look at the histogram, where did
that go?
336:03 - We'll see.
336:05 - x, that's the data that was our house prices,
bins
336:10 - equal.
336:12 - We didn't put Ben Zico we just put the number
because you know, you can do it like that
336:15 - to the density and all these different things
you can change on here. Very cool. See, if
336:20 - we can't find one other one that will work
quickly. Without a whole lot of customization.
336:24 - I don't know if there is one. Polar let's
see what this one is. Ours in Cork, so maybe
336:32 - let's try polar. I don't know what that is
or what it will do. But let's try it anyway.
336:38 - So save this. Come back over here. Renee again.
Alright, so I don't know what this is. But
336:50 - it looks cool, right? So I just that easy
right to do this. So like I said, I'm not
336:55 - gonna get into the data science of this the
Python, for data analysis or anything, I'm
337:00 - just gonna assume you kind of already know
NumPy NumPy a little bit, you already know
337:04 - matplotlib and you can do the same thing with
seaborne and other libraries for graphical
337:09 - stuff. And that's cool. So that's all for
this video. If you liked it, be sure to smash
337:14 - the like button below subscribe to the channel
and check out Academy comm or you can use
337:17 - coupon code YOUTUBE to get $20 off membership
you pay just $27 to access all my courses,
337:22 - hundreds of videos and the PDFs of all my
best selling coding books. Join over 60,000
337:26 - students learning to code just like you. My
name is john elder from coding me.com we'll
337:29 - see in the next video.