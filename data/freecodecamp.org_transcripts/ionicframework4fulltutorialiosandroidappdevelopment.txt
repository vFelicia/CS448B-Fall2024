00:02 - welcome back everybody this is waze back
00:04 - with another video on the channel which
00:06 - is about mobile application development
00:09 - so we're going to be using ionic
00:11 - framework so one code base can be used
00:14 - to build mobile application for ios
00:16 - android and also the windows platform
00:20 - so this is a website of the framework
00:23 - ionic framework.com
00:25 - so this is what i'm gonna use so yeah
00:27 - let's get started and i'm using a mac os
00:31 - even if you're on the windows or linux
00:33 - uh that doesn't really matter this is a
00:35 - cross platform framework use node.js and
00:40 - uh yeah so first thing we're gonna do is
00:43 - we are going to open a terminal so if
00:45 - you are windows please open command
00:47 - prompt and i'm just going to make this a
00:50 - bit bigger and a bit bigger so first
00:54 - thing we need to have two things
00:56 - installed first of all we want to make
00:58 - sure we have installed node.js let me
01:01 - take you to the browser and this is the
01:04 - website for node.js so that's
01:07 - nodejs.org
01:09 - now it doesn't really matter which
01:11 - version of node you guys use either
01:13 - using 8.12.0
01:15 - or 10.11 that should not make any
01:18 - difference but i will use long term
01:21 - supported version so lts stands for long
01:23 - term supported so i'm gonna be using
01:25 - eight point twelve point zero so
01:28 - basically you wanna install node.js by
01:30 - simply click on that it will start
01:32 - downloading the
01:33 - in installer file on markets.pkg
01:37 - file on windows that's gonna be exe file
01:40 - so just download the version of node and
01:43 - let's go back to
01:44 - terminal i'm going to change node dash
01:47 - wii it'll tell me what version of node
01:49 - i'm using so as you can see i'm using
01:52 - 8.12.0 let me check the npn version npn
01:56 - is 614.1
01:59 - so we have successfully installed two
02:02 - things node.js and also npn npin stands
02:07 - for node packet manager which is a
02:09 - package manager use for node to install
02:13 - a bunch of packages that you want to use
02:15 - in your application so the next thing
02:17 - what we want to do is we want to make
02:19 - sure we install ionic cli so ionic
02:23 - command line interface
02:25 - it's really helpful to build mobile apps
02:28 - with ionic by just typing some commands
02:31 - on your terminal and it will do a lot of
02:34 - things for you
02:35 - so i'm going to go to
02:37 - developer and going to go to framework
02:40 - docs
02:41 - and here we're going to go to ionic 4.
02:44 - so ionic 4 is in beta right now but i'm
02:47 - still using ionic 4 because that's the
02:49 - future
02:50 - installation tab and i'm going to click
02:52 - on cli installation and here it's
02:54 - telling me install npn install dash g
02:58 - ionic so basically npn is a node packet
03:00 - manager install is a command dash g is a
03:04 - flag which tells note package and
03:06 - manager that please install this
03:09 - globally in your pc or in your mac
03:13 - next you want to go and start your
03:15 - application so if you want to use ionic
03:17 - 4 application you have to type this flag
03:20 - dash type is equal to angular so there
03:23 - is a lot of things that has been changed
03:26 - from ionic 3 to ionic 4.
03:28 - next we have a command to run
03:31 - application once you type this command
03:33 - in
03:34 - in cli it will create angular project
03:36 - using angular
03:38 - 6 and ionic 4 and you can run this same
03:44 - and you can run the application by using
03:46 - this command ionic serve
03:50 - next i want you to install
03:53 - one more thing called apache cordova
03:57 - so the command to install this is simply
04:00 - as npn install
04:03 - dash g cordova and if you're on a mac
04:06 - you're gonna have to type sudo
04:09 - so let's go back to the terminal and
04:11 - here i'll type sudo npn install g
04:15 - cordova
04:17 - and i'm gonna have to type
04:20 - password to install that in my mac the
04:24 - reason for that is because i'm
04:26 - installing this globally that's why it
04:29 - required the password so as you can see
04:32 - cordova is installed as well so now we
04:34 - want to check the version of ionic cli
04:37 - and the cordova so top ionic dash we
04:41 - will tell me okay i've got 4.1.2
04:44 - cli installed
04:46 - and i'm going to check for cordova and i
04:49 - say cordova dash wii
04:51 - and that gives me the version of cordova
04:54 - i have installed which is
04:56 - 8.1.1 so at this point we have
05:00 - successfully installed everything we
05:02 - need to start building our hybrid mobile
05:06 - app
05:07 - now how do we start a new project so
05:10 - being in a terminal i'm gonna go to a
05:13 - folder
05:14 - which i will be using to create a new
05:17 - project so i'll do cd
05:19 - document and i'll say
05:22 - let me just see that's going to be
05:24 - hybrid mobile apps and here i've got one
05:28 - project i'm going to create another one
05:30 - so i'll simply type ionic start
05:34 - and now if i want to check what kind of
05:37 - project or what kind of template i want
05:39 - to use then i will to check how many
05:42 - projects are available so i'll type
05:45 - space dash dash list and that gives me
05:48 - all the templates available which i can
05:51 - use so i have a angular blank template
05:55 - angular side menu angular tabs menu
05:58 - ionic angular ionic angular which used
06:01 - the older version of ionic which was
06:04 - free so we want to use ionic 4 so i'll
06:07 - type ionic start and i'll say i want to
06:11 - use a tabs template and i'll
06:14 - flag it with type is equal to
06:17 - angular so press enter and it's going to
06:21 - start asking me what kind of
06:23 - template so i'll just say
06:25 - tabs
06:27 - and then
06:29 - i'm going to say okay it's asking me
06:32 - that integrate your new app with cordova
06:35 - to target native ios and android so
06:38 - first we remember that we installed
06:40 - corolla successfully now i want to type
06:44 - y and press enter and it's going to
06:46 - integrate cordova with my project so i
06:49 - can build those app
06:51 - for ios and android so ios basically
06:55 - don't understand javascript or let's say
06:58 - angular i was only understand objective
07:01 - c or swift so cordova is the is the guy
07:05 - let's say which will take your angular
07:07 - code and convert that to objective c so
07:11 - that can be run on ios or iphone or ipad
07:16 - devices
07:17 - and on other side angular understand
07:20 - java or kotlin so cordova support java
07:24 - it will take your angular base code and
07:26 - it will convert that code into java so
07:29 - you can run the same application on
07:32 - android as well and it's it's it goes
07:35 - similar to windows platform as well so
07:38 - now it says okay dependency is installed
07:41 - and it's asking me uh install the free
07:44 - ionic pro sdk and connect wrap so i
07:46 - don't have a paid ionic program so i
07:49 - will press n and press enter and there
07:52 - you go our project has been created so
07:55 - i'm going to type ls
07:57 - and i can see i have another project
07:59 - called tabs
08:00 - so to start the application i want to
08:02 - have to go inside that folder so i'll
08:05 - say cd
08:06 - tabs
08:07 - and one thing i want to mention here
08:09 - that everything is possible in windows
08:12 - and linux as well it's just basically
08:14 - i'm using
08:15 - terminal because i am on a mac and if
08:18 - you're using windows you use command
08:20 - prompt or powershell
08:22 - so we are in the tabs folder so i'm
08:24 - going to type ls dash l which give me a
08:27 - list of the files and folder that i have
08:30 - in the solar so i can see i have a
08:32 - source folder i have a config.xml we
08:35 - will go through all of these files
08:38 - in
08:39 - the next video but first let's
08:42 - start our application so i'm gonna type
08:44 - a command called ionic
08:46 - serve
08:48 - press enter and now it's going to open a
08:51 - browser which will bring us a new app
08:54 - and we can actually take this
08:58 - to
09:00 - to this uh virtual desktop so we could
09:03 - see that so now it looks like it's a web
09:07 - page but actually it's not a webpage
09:09 - it's a mobile app so i'm going to click
09:11 - on these three dots and i want to change
09:14 - this to developer tools and then we will
09:19 - change from here to let's say ipad pro
09:24 - or we can use this for ionic
09:26 - iphone 678 so now i'm going to close
09:29 - these oops i'll have to go back guys
09:32 - sorry my bad
09:33 - and i want to put this
09:36 - on the side so now you can see our app
09:40 - is running so we have a contact tab
09:43 - about home tab
09:45 - and so far we have this application now
09:48 - as i've shown you that you have to go to
09:50 - developer mode and then
09:52 - you will
09:54 - basically make your app look like a
09:57 - mobile app but there's another way that
09:59 - is possible so we're gonna go to
10:01 - terminal and i'm gonna press ctrl
10:04 - c
10:05 - to stop the server uh which run our
10:08 - application which was localhost 8100
10:12 - so first let me clear the console and
10:14 - i'm going to type ionic serv
10:17 - [Music]
10:19 - press enter
10:20 - now it's going to start the server but
10:23 - dash l is basically is going to
10:27 - uh
10:27 - start our application in a lab mode so
10:30 - i'll type yes it's going to install
10:32 - ionic lab and then it will open up our
10:36 - server
10:38 - so right now it basically didn't open up
10:40 - properly
10:42 - because it hasn't installed
10:44 - okay so next page it's opening now
10:47 - 8200 now there we go so now when you
10:51 - type a lab which is basically a flag
10:54 - that make your app look like a mobile
10:57 - app so here i'm using ios and if i go
11:00 - right i can see the same app how it's
11:03 - going to look like in android so you can
11:06 - change or you can check
11:09 - apps
11:10 - uh side by side for ios and android so
11:13 - this is how you can see how my app is
11:15 - going to look like in android and how
11:18 - it's going to look like on is and
11:21 - believe it or not they have a support
11:23 - for windows mobile as well so now this
11:26 - is a windows mobile
11:28 - and which basically it's really poor
11:32 - it does not really uh
11:34 - show
11:35 - anything nice here so we'll just turn up
11:38 - because windows mobile are dying there's
11:40 - no more windows operating system for
11:42 - mobile anymore so we just target irs and
11:45 - android platform so now if you want to
11:47 - kill the server go back to terminal and
11:49 - then you press con control c to start
11:52 - the search to stop the server so there
11:55 - you go guys this is how
11:57 - you uh set up your environment for
12:00 - building hybrid mobile apps using ionic
12:02 - and cordova and also this is how you
12:05 - create a project and start your project
12:07 - and trust me it's really easy to build
12:10 - mobile application right now using ionic
12:13 - uh all you got to do is
12:15 - type some commands on the cli and that
12:18 - will do a lot of things for you
12:24 - we are going to take a look at how the
12:27 - file structure in our project is how to
12:31 - create a project
12:33 - also what are the templates available
12:36 - and a bit of about the ionix cli
12:39 - so i am in terminal i'm using mac that's
12:42 - why i'm using terminal here and if
12:44 - you're on windows you can use uh command
12:48 - prompt or you can use powershell
12:52 - this course i'll be using webstrom as an
12:55 - ide
12:56 - i think this is the best ide for web
12:59 - development and also for anything
13:02 - javascript related this is the web best
13:04 - id and also this is not a sponsored
13:06 - video
13:07 - uh so let's go and create a new project
13:10 - so in the last video you remember that
13:13 - we installed node.js we set up our imx
13:16 - cli
13:17 - we set up our cordova we create a
13:20 - project now let's go into details about
13:23 - ionic cli also the projects
13:27 - so when you type this command ionic
13:30 - start
13:32 - you are basically prompt with some of
13:35 - the options so you said okay what is
13:37 - your project name and then it's gonna
13:40 - ask you what kind of template do you
13:42 - want to use
13:43 - now there is a flag with ionic start and
13:48 - i'm gonna type space space
13:50 - dash dash list and then i'm gonna press
13:53 - enter now this is going to show me all
13:56 - the templates available
13:58 - uh for us to use so right now i'm gonna
14:00 - expand the terminal
14:03 - so you can see we have a blank side menu
14:06 - and tab template
14:08 - and the type for them is angular so
14:10 - whenever you see a type is equal to
14:12 - angular that means you are using that
14:16 - template with ionic 4 framework and
14:19 - angular 6. now we have older ionic
14:22 - framework as well which was ionic 3
14:25 - which has the type set as ionic angular
14:29 - so if you select your project and you
14:32 - want to select template from ionic 3 and
14:36 - use the same structure which was in
14:38 - ionic 3 then you will use a type is
14:42 - equal to ionic angular
14:44 - now this is the latest ionic framework
14:47 - tutorial series which is ionic four so
14:50 - we're going to be using a type as
14:52 - angular so let's go and create a new
14:53 - project
14:54 - all right so now let's go and create a
14:57 - new ioniq 4 project using angular 6
15:01 - so let's go to the terminal and i'm
15:02 - going to type ionic start dash dash list
15:06 - it's going to be it's going to give me
15:08 - the list of all the projects so i'm
15:10 - going to say ironic start and then next
15:13 - we are going to type the project name
15:16 - which i'm going to call it ionic
15:19 - for
15:20 - tute
15:21 - and then we need to define
15:24 - the uh the template that we want to use
15:27 - so let's say if i don't define a
15:28 - template and i just say dash dash
15:31 - type is equal to angular press enter and
15:35 - it's going to give me three options to
15:37 - choose from so there's only three
15:39 - options available right now the reason
15:41 - for that is because we already
15:44 - asked it to create ionic 4 project and
15:48 - ionic 4 only has 3 template blank side
15:51 - menu and tabs so let me prove my point
15:54 - by pressing ctrl c and getting out of
15:57 - this command i'm going to type ionic
16:00 - start
16:02 - and then we say ionic
16:04 - for
16:05 - tute and then
16:07 - ty we said that is we go to ionic dash
16:09 - angular press enter now this time it's
16:12 - going to give me option of about 6
16:15 - template because this ionic dash angular
16:19 - basically creates an ionic 3 project
16:22 - which has about 6 templates to choose
16:24 - from so let me go back and press ctrl c
16:28 - let's clear the terminal and i'm going
16:30 - to type ionic
16:31 - start
16:33 - and i will name it ionic for two
16:36 - dash dash
16:39 - type is equal to
16:41 - angular
16:42 - and then i'm going to choose the blank
16:43 - template
16:45 - and next question is asking me is about
16:49 - by targeting ios and android so if we
16:52 - are creating an application to publish
16:54 - on iphone or android we need a cordova
16:59 - so it's saying basically integrate a new
17:01 - app with cordova to target native ios
17:04 - and android so let's press y and press
17:08 - enter now it's going to go and download
17:10 - and integrate cordova into our
17:12 - application
17:14 - and it's going to take a few seconds i'm
17:16 - going to pause the video once the
17:17 - project is created or if there's any
17:20 - question that come up i will let you
17:22 - guys know
17:24 - during the product creation
17:26 - uh the last question it would ask you is
17:29 - about ionic pro sdk
17:31 - ionic is the open source project which
17:34 - basically great to build your mobile
17:37 - application using angular
17:40 - uh it's fast but also they provide some
17:43 - sort of pro services so i'm going to
17:45 - take you to documentation
17:47 - and here it says products so basically
17:51 - ionic 4 or overall ionic has the pro
17:55 - version which basically gives you some
17:57 - extra
17:58 - features that you can use for example
18:00 - live deploy
18:02 - we will have a separate video for each
18:04 - of these functions as i have a
18:06 - pro account with ionic but for now just
18:10 - quickly a brief introduction to pro
18:13 - link is basically it generates your
18:15 - native packages in the cloud it can do
18:18 - live deploy without going to app store
18:21 - or play store it can monitor your apps
18:24 - for example if your app crashes white
18:26 - crashes it will monitor all those bugs
18:29 - so these cool things about ionic pro
18:31 - which we'll talk about later let's go
18:33 - back and i'm gonna press n
18:36 - and then i'm going to press enter
18:38 - now at this stage our project is created
18:42 - and i'm going to use a webstrom to open
18:44 - this project so let's click on open
18:47 - and i'm going to go and target that
18:49 - folder which was in documents
18:52 - test project only fortune and i'm gonna
18:55 - click on open so through this tutorial
18:58 - series i'll be using uh webstrom which i
19:01 - think is a great
19:02 - ide by jetpaints and it's not a
19:05 - sponsored video guys it's just webstrom
19:08 - or any overall jetpack product is great
19:11 - so here is a folder for iot
19:14 - for project and i'm gonna go through to
19:16 - these all these files
19:18 - all right guys so now let's go over to
19:20 - the folder structure and the file
19:22 - structure of our ioniq 4 project
19:25 - so first of all let's take a look at
19:27 - this resources folder basically all your
19:31 - assets your icon
19:33 - your splash screen images or whatever
19:35 - image that you're going to be using in
19:37 - your application that will go into your
19:39 - resources folder
19:41 - the reason why ionic has this setup
19:44 - separately is because
19:46 - the angular
19:48 - require sorry the android required
19:51 - different kind of resolution for your
19:53 - assets ios required different kind of
19:56 - resolution
19:57 - uh
19:58 - for your assets
20:00 - so ioniq and cordova basically handle
20:03 - that automatically for us so if you want
20:06 - to build a project for ios you type a
20:08 - command on your ionix cli and it will
20:11 - prepare your
20:12 - resources
20:14 - uh
20:15 - required resources for ios or require
20:18 - resources for your android that's very
20:21 - simple now let's go to some files
20:24 - outside our source folder the git if
20:27 - you're familiar with kit you know what
20:28 - this git ignore file does you will list
20:31 - out all the folders which you don't want
20:33 - to be included in your git repository
20:37 - angular.json this is some configuration
20:40 - for your angular
20:43 - so we can go through this later whenever
20:46 - we need something from this file during
20:48 - the course
20:49 - let's move on
20:50 - config.xml is a really important file in
20:53 - your ionic project so basically it will
20:56 - list out your
20:58 - ionic id a version of your application
21:01 - a description
21:03 - a title of your application
21:06 - also it will list out all the platforms
21:10 - and then it will list out all the
21:13 - resources linked for that particular
21:15 - platform
21:16 - in this file also all the plugins used
21:20 - from cordova in your application will be
21:23 - here
21:24 - we have a package.json file which is
21:27 - important as well it lists out all our
21:29 - dependencies here you can see we're
21:31 - using angular we're using ionic it lists
21:35 - out all the dependency dev dependencies
21:38 - uh we can define scripts as well for our
21:41 - custom
21:42 - builds uh there's not much to look into
21:46 - these files these are just default files
21:48 - getting generated from ionic i will go
21:51 - through these files whenever we need to
21:54 - understand any property or any
21:56 - configuration from these files
21:58 - let's go to the source folder the first
22:00 - folder inside the source folder is the
22:03 - app folder which will have all your
22:06 - angular code so all your components your
22:09 - services your pages
22:11 - directives will be
22:13 - inside this app folder
22:16 - next we have assets folder assets folder
22:19 - will list out your one icon image that
22:22 - will be used by
22:24 - cordova or let's say ionic to basically
22:27 - generate all your resources from this
22:30 - one file
22:32 - these are some environment
22:34 - uh variables we have a theme we have a
22:37 - variable
22:38 - dot sas file which is a global
22:40 - file and you can use these uh
22:44 - these some of the color schemes are
22:46 - defined by ionic throughout your
22:48 - application
22:49 - and this is just a global sas file for
22:52 - you to use with global sas file here we
22:55 - can list out all your
22:57 - uh all your
22:59 - basically css and here we require this
23:03 - variable.sas file as well
23:06 - next we have index.html file basically
23:08 - this is the entry point for your iot app
23:12 - we have some testing files karma is used
23:15 - to test your application
23:17 - we have some polyfills main
23:19 - so main.ts is the entry file for your
23:22 - angular project or let's say ionic
23:25 - project this is like a startup file uh
23:28 - which basically lists out this is a
23:30 - module that we want to use and we have
23:33 - defined that module in app.module that's
23:35 - our app component
23:37 - so here we have a ts config which leads
23:40 - out some more configuration let's talk
23:42 - about this later
23:48 - in this video we are going to learn
23:50 - ionic cli
23:52 - so first of all
23:53 - we will add ios platform to our project
23:58 - so let me just uh bring my cli
24:02 - to the right
24:05 - so we can look at the commands that are
24:07 - right
24:08 - so have a look at this folder structure
24:09 - right now we have a source folder
24:12 - resources folder
24:13 - e2c folder node modules folder
24:17 - so now i'm going to type a command here
24:19 - ionic
24:21 - cordova
24:22 - platform add ios
24:25 - i'm going to press enter
24:27 - now it's adding ios to our project
24:30 - using credoa fetch or cordova irs
24:34 - version 4.5.0
24:39 - all right so as you guys can see
24:42 - the platform is being added so if i go
24:46 - to
24:46 - our project
24:48 - our viewer we can see there's a platform
24:51 - that named ios
24:53 - so when i click on that i can see
24:57 - the file structure that can be opened in
25:00 - xcode
25:02 - so if you are familiar with
25:04 - apple's xcode which is an ide for
25:08 - ios mac
25:10 - ipad app development
25:13 - that project can be opened directly
25:15 - there
25:16 - so now most of you will be familiar with
25:18 - java
25:20 - android uh projects
25:23 - so here we can add android project as
25:25 - well so i'm gonna type ionic
25:28 - core
25:30 - let me just make this bigger if i'm able
25:32 - to no i'm not so i need cordova
25:35 - i will keep my mouse cursor here
25:38 - uh
25:39 - platform add
25:41 - android
25:43 - now it's going to go and download the
25:45 - android cordova version of
25:47 - 7.1.1 it's going to take a few minutes
25:50 - or a few seconds depending on your
25:52 - computer and your internet connection
25:55 - once it adds the android uh platform
25:58 - then we'll go and talk about these
26:01 - okay so the android project is there as
26:04 - well so here you can see we have an
26:06 - android project
26:08 - and ios project now
26:11 - just to get you
26:12 - uh familiar with
26:14 - cli commands you can remove project as
26:17 - well so if i go ionic
26:20 - cordova
26:22 - platform
26:23 - remove
26:25 - android
26:26 - it will go and remove the platform
26:29 - from our project so here you can see
26:31 - removing platform android
26:33 - from
26:34 - config.xml file
26:37 - and a cordova.platform array in
26:41 - package.json file
26:43 - so let's take a look at here in the
26:45 - platform folder we don't see android
26:47 - folder anymore so if i go and open
26:51 - package.json file
26:53 - here
26:55 - we can see
26:57 - that we have a platform listed
26:59 - ios but we don't see android so let's go
27:03 - back to terminal and we can add
27:06 - ios platform sorry the platform is
27:08 - already there it says platform ios
27:11 - already exists so we can add
27:13 - android platform
27:15 - so i'm going to click on ionic adobe
27:18 - platform at android
27:20 - now it's going to go and download
27:21 - cordoba android again
27:23 - and then it's going to
27:28 - it's going to uh basically create a
27:30 - platform for us
27:32 - now these are the basic commands in
27:34 - ionic cli to remove and add a project
27:39 - once the android project gets added to
27:42 - our project we'll add another type of
27:45 - project called a browser so we could run
27:48 - our application in the browser while
27:51 - developing and to test our application
27:55 - we can use actual device
27:58 - so i'm just waiting for this platform to
28:00 - add
28:06 - all right so right now you can see it's
28:08 - generating resources 18 resources
28:10 - generated now platform is added
28:14 - there we can see platform ios and
28:16 - android is
28:17 - listed in package.json file
28:20 - also we can take a look at config and
28:23 - config we have a platform ios
28:26 - with a platform android now i'm going to
28:29 - add
28:30 - let's go and
28:32 - clear the terminal i'm going to add
28:34 - ionic
28:35 - cordura
28:38 - platform
28:40 - add
28:41 - browser so we're going to add a browser
28:44 - platform to our project as well
28:47 - so we can do all the development tests
28:50 - of replication
28:51 - in terms of functionality in our browser
28:54 - and then we can run this application to
28:57 - the actual
28:59 - device whether it's ios or android
29:02 - device or even a windows device guys
29:05 - so once this uh gets added
29:08 - the first thing we want to do is we want
29:10 - to emulate this project
29:13 - so let me go and open the chrome browser
29:16 - first
29:18 - okay so the browser project has been
29:20 - added we can like look at a platform
29:22 - folder
29:23 - and we can look at our package.json file
29:28 - which should have
29:30 - browser as a platform as well i'm going
29:32 - to take my terminal back to the bottom
29:35 - so we could
29:36 - look at the
29:38 - project and the files
29:40 - i'm going to clear the terminal and the
29:43 - next what we want to do is we want to
29:45 - run our application
29:46 - onto a browser so i'll say ionic
29:50 - cordova
29:52 - emulate
29:56 - browser
29:58 - okay
29:59 - now it's gonna go
30:01 - and build our project
30:03 - and right now we can see www folder is
30:06 - empty but when the first time we build
30:09 - our project
30:11 - it will
30:12 - not be empty anymore it will have all
30:14 - the json and a production version of our
30:18 - code listed into www folder so the first
30:22 - time we're building this project that's
30:24 - why it's taking a bit longer
30:27 - all right so as you can see it took few
30:30 - seconds or few minutes depending on your
30:32 - computer and now our application is up
30:36 - and running now this is how you emulate
30:39 - your
30:41 - application to your browser now the
30:43 - reason why i've shown you the first is
30:45 - because when you emulate your project to
30:49 - your browser using cordova it will put
30:52 - all your
30:54 - native
30:54 - functionality to the browser as well
30:58 - but for just development purpose we
31:00 - don't have to emulate
31:02 - uh our project your browser but what we
31:04 - can do is i'm going to press control c
31:09 - and let's clear the terminal
31:11 - and instead of using iony cordova amulet
31:14 - browser
31:15 - i'm going to use a simple command which
31:17 - is ionic
31:19 - serve
31:20 - now this is going to do the same thing
31:22 - it's going to build our project as you
31:24 - can see this wwe folder is not empty
31:27 - anymore and now it clearly says
31:31 - our project is running on localhost
31:33 - called 8100
31:35 - also the external
31:37 - ip that we can target 192.168.1.7
31:42 - column 8100
31:44 - so it's going to build a project and
31:46 - it's going to show
31:47 - that into the browser
31:49 - now there are pros and cons using
31:52 - ionic cordova amulet browser
31:54 - but we will talk about these later in
31:57 - the course
31:59 - now as you can see our project's running
32:02 - now the last command i want to show you
32:04 - is ionic serve dash l
32:08 - the dash l is basically ionic a library
32:12 - you have to install
32:14 - in your project will which will
32:16 - basically make our application look like
32:19 - it's running on a mobile so right now
32:21 - it's asking me it's ironic lab is not
32:24 - installed you want to install it i'll
32:26 - type y and then i'll press enter now
32:29 - it's gonna go and download ionic lab for
32:31 - me and start my server using ionic lab
32:36 - now the once our server starts as you
32:38 - can see here we have ios version
32:41 - and we have an android version of our
32:43 - application
32:44 - which is great so you can take a look at
32:46 - the ui of ios and also the android
32:50 - version
32:51 - so i don't really run this in
32:54 - development
32:55 - but as just to let you guys know this is
32:58 - available for you so if you do ionic
33:00 - serve dash l it's gonna run your server
33:04 - on ionic lab which will show your app as
33:08 - it's running on your native device
33:14 - i'm going to show you how you can
33:16 - emulate your project to ios simulator
33:19 - i'm using mac
33:21 - one thing to mention here you will have
33:22 - to have a mac to develop application for
33:26 - uh ios platform
33:28 - so let's get started so this is an app
33:30 - in the last video we've seen how we can
33:32 - do ionic serve
33:34 - and then that will open a browser and it
33:36 - will launch our application now also we
33:39 - want to emulate this project to an
33:41 - actual
33:42 - ios simulator for that you need to make
33:46 - sure that you have few uh free software
33:48 - installed for example i'm gonna go and
33:52 - open xcode now xcode is an ide developed
33:56 - by apple and it's basically used to
33:59 - develop native ios applications now to
34:02 - install xcode you want to go to app
34:05 - store on your mac and simply search for
34:08 - xcode here
34:10 - now here you will see an xcode and you
34:13 - will click on
34:14 - download it will you will see get click
34:17 - on get and then you download that
34:19 - now
34:20 - we are using xcode version 10 which is
34:24 - the latest version of xcode so here i'll
34:27 - type ionic cordova
34:30 - emulate
34:32 - ios
34:33 - and here first of all i want to check
34:35 - how many devices do we have in our
34:38 - system we could use to emulate so say
34:41 - dash dash
34:43 - list and i press enter it will go read
34:47 - xcode and it will give me the list back
34:49 - so i'm going to move my terminal to the
34:52 - right so we can see
34:54 - so these are the devices that i can
34:56 - emulate to
34:58 - and it
34:59 - basically shows us the ios version as
35:03 - well i could use ios 12 or ios 11.2
35:08 - so now let's clear the console or
35:10 - terminal so i'm going to type here
35:13 - ionic
35:14 - cordura emulate ios dash dash
35:18 - target so target is the flag which lets
35:21 - you specify
35:23 - a device that you want to emulate to so
35:25 - let's say that's the target is equal to
35:28 - let's emulate this project to ios
35:30 - 12 with iphone 8 so i'll say i
35:34 - phone
35:35 - dash 8
35:36 - and then i'll press enter or return on a
35:40 - mac so it's doing all its stuff so i can
35:43 - see my letter now on the screen and also
35:46 - i can see this ionic blank template
35:50 - okay so this is how you
35:52 - start your emulator and upload your
35:55 - project to ir simulator now another
35:59 - platform that we want to build an
36:00 - application for is android
36:03 - now
36:04 - it is pretty straightforward to emulate
36:07 - your project to android as well so
36:10 - basically instead of writing this
36:12 - command any cordova amulet ios you will
36:15 - just simply say
36:17 - only cordova amulet android and i use
36:20 - the same flag dash target is equal to
36:23 - iphone 8.
36:27 - welcome to my windows pc
36:30 - so to emulate your ionic project to
36:33 - android simulators
36:35 - you're gonna need to install android
36:37 - studios if you go to
36:38 - developer.android.com
36:41 - studio here you can download android
36:43 - studio which is about 923 megabytes i've
36:47 - already downloaded and install android
36:50 - studio as you can see at the bottom and
36:52 - it's already up and running now what i
36:54 - did basically i just created a new
36:57 - project so if i go
36:59 - and close this project you will see this
37:01 - screen
37:02 - all you have to do is create a new
37:03 - project
37:05 - so let's go create a project here type
37:07 - the name go to next next next and then
37:10 - eventually
37:11 - you will see this kind of a
37:14 - folder
37:15 - and you will see stuff like this now
37:17 - once you open a project you want to go
37:19 - to tools menu and want to go to avd
37:21 - manager now let me explain what is avd
37:24 - manager so basically it lists out all
37:26 - your virtual devices
37:29 - now let's go to webstorm and let's try
37:32 - loading these devices so we close this
37:34 - close android studio as well
37:36 - let's open up webstorm and this is the
37:39 - project that i'm working on right now
37:41 - called expenses is the expense logger
37:43 - app with a lot more functionality that
37:46 - you find in usual application which does
37:48 - this job so let's uh get back to work so
37:52 - i'm going to type ionic go to
37:55 - emulate
37:58 - android
37:59 - list
38:00 - now it's going to give me the list of
38:02 - emulators so here i have nexus 5x nexus
38:05 - 6 and pixel now to run this project to
38:08 - pixel or any of the devices i can
38:11 - specifically type hashtag target is
38:14 - equal to the device name
38:16 - let's run our application on nexus 6.
38:20 - type ionic
38:21 - pertova amulet
38:23 - android target is equal to
38:27 - nexus 6. now one thing to mention here
38:31 - the name of the device is case sensitive
38:34 - so if it's if that if it has a capital
38:37 - letter you must have a capital letter so
38:39 - i'm gonna press enter now and now it's
38:42 - gonna go and build a project and now
38:44 - it's going to run on an emulator using
38:47 - nexus 6 device
38:49 - and
38:49 - the android version that you would see
38:52 - in android studio
38:54 - when we open that so i'm not sure what
38:56 - version it's running right now but it's
38:58 - some something's running
39:00 - so let's take a look at how and how long
39:03 - it takes
39:04 - to run the emulator it's building the
39:06 - project
39:08 - okay it says build successful in six
39:11 - seconds as you can see our amolera is uh
39:15 - getting
39:15 - online
39:17 - now
39:18 - this is an application that it actually
39:21 - rain
39:22 - so
39:23 - yeah that that's pretty much it is guys
39:25 - for this video and this is how you use
39:28 - and emulate your project into ionic
39:32 - using ionic cli to ios and android
39:39 - we're going to take a look at the code
39:40 - itself we've learned so far how to
39:43 - emulate projects through android devices
39:45 - and ios devices we also learn how we can
39:48 - add platforms like android ios and
39:51 - browser and we have covered the basics
39:53 - of ionic basically the workflow and the
39:56 - tools you need to
39:58 - set up uh to basically start developing
40:00 - an ionic or we can say hybrid mobile app
40:04 - so
40:04 - right now i'm going to go and show you
40:07 - guys
40:08 - what
40:09 - is the product structure what each file
40:11 - does so first of all i have created a
40:15 - blank project so if you create a new
40:17 - project and you will use the template
40:20 - blank this is what you're going to get
40:21 - so there's pretty much nothing's changed
40:24 - so you go ionic start
40:27 - blank and name of the product so i've
40:28 - shown you how to create a project right
40:30 - so i'm starting with the blank template
40:32 - now this is the template that we're
40:33 - going to be using the source code is
40:35 - going to be available on my github
40:37 - accounts i'll link to that as well so
40:39 - i'll do ionic
40:41 - dash l so dash i'll flag basically will
40:45 - help us to reload our application will
40:47 - show our application into native looking
40:50 - uh devices but at the end of the day you
40:52 - still want to test on the actual
40:54 - simulator whether it's ios or android
40:57 - now this is our application is running
40:59 - i'm just gonna
41:01 - make this a little bit like this and
41:04 - then we don't need to keep the terminal
41:06 - up and running now that's it
41:09 - so the first of all let's go through the
41:12 - product structure so we have seen some
41:13 - of the project structure uh in the
41:16 - previous video but let's go something
41:17 - let's go into details now the first
41:20 - thing you will see a source folder which
41:22 - will have everything related to your app
41:25 - i'm going to go to main.ts so the main
41:27 - tells ts file is an entry point it's an
41:31 - entry point for the whole application
41:36 - here you can see that we basically
41:38 - import
41:40 - uh enable product mode
41:43 - which is right now it's not true because
41:44 - we are developing so we have a platform
41:47 - browser dynamic bootstrap module app
41:50 - module
41:51 - and then that's what we imported so here
41:54 - we have an app a module so we go to app
41:57 - and this is the approach so basically
41:59 - the main.ts file is telling the compiler
42:02 - that okay this is our main entry module
42:05 - start our application from here
42:08 - now once you start your application it
42:11 - will go and then do all its processing
42:14 - related to angular stuff so this is
42:16 - nothing more than angular module with
42:19 - some ionic uh
42:21 - ionic modification
42:23 - so right now if you are familiar with
42:26 - angular you feel at home so we have ng
42:29 - module we have a declarations we define
42:31 - all the components here with the entry
42:33 - components which is basically uh empty
42:36 - right now we imported browser module
42:38 - ionic module for root and app routing
42:41 - module so in ionic 4 it basically we
42:46 - have
42:47 - a different
42:48 - uh lazy loading concept so we let's load
42:51 - a different module so here we basically
42:54 - create the module this is a entry point
42:56 - entry module for our app next we have
42:59 - approach module which is imported by app
43:02 - module so we go to app running module
43:04 - let's take a look at app routing module
43:07 - so basically what's happening here
43:11 - we have a two routes defined in routes
43:14 - variable which has a type of routes
43:18 - now we downloaded we actually imported a
43:20 - router module and we passed in this
43:23 - routes variable
43:24 - now what i want to do is i want to
43:27 - explain what is lazy loading
43:30 - basically let's say that you have your
43:33 - application of about 500 pages or 1000
43:38 - pages
43:39 - now when you start your application if
43:42 - you are willing to
43:44 - load those 10 000 1000 pages your
43:48 - application is going to be loaded uh
43:52 - it's going to take a lot of time to load
43:54 - that application
43:56 - so this is where lazy loading comes into
43:59 - play
44:00 - basically you load an application you
44:02 - load just one specific main module and
44:06 - then you load the rest of the modules
44:09 - depending on
44:11 - the browser url or depending on which
44:13 - one you requested
44:15 - so what i want to do here i want to go
44:18 - and create a couple of uh modules
44:22 - separate pages with separate modules and
44:24 - then we will link to those
44:26 - so here we can see we have lazy loaded
44:30 - this page home so basically it says go
44:35 - to this route if there is no route
44:37 - defined and it redirects to home which
44:40 - again
44:41 - matches with this path and it says path
44:45 - match it's set to full now it's going to
44:47 - go to this module by default so let's go
44:51 - to terminal and i'm going to create a
44:53 - new terminal here
44:55 - and here i'm going to type a command
44:56 - ionic g
44:58 - now it tells me which
45:00 - which uh what kind of uh
45:03 - stuff i want to generate so i'll say i
45:05 - want to generate a page and i would say
45:08 - okay let's say about us page i'm going
45:11 - to press enter now it's going to
45:14 - generate a module for us it's going to
45:16 - generate the page for us and it's going
45:18 - to automatically load that to our app a
45:22 - routing module as you can see now we
45:24 - have about us
45:26 - which basically links to about us about
45:29 - a start module which is here and then we
45:32 - have this uh
45:34 - about us page module which is basically
45:37 - the name of the module nothing more than
45:40 - that so i'm just going to close this now
45:43 - we want to create another
45:45 - page
45:46 - let's just say
45:49 - contact
45:51 - you press enter and now it's going to
45:53 - create
45:54 - a page of
45:57 - contact also it's going to create a
45:59 - module so basically when you go inside a
46:02 - module you see
46:04 - it has a route part set to empty and it
46:07 - defines the component it imports the
46:09 - component as well
46:11 - so let's close this as well now let's
46:13 - say that we don't see these
46:15 - automatically loaded
46:16 - but we want to write our own so
46:18 - basically you simply go
46:21 - and define a path you type it in the
46:24 - path you want to match according to the
46:26 - url in your browser and then you type a
46:30 - key load children and then you specify
46:33 - path to the folder which is basically
46:36 - here about us and then next you say go
46:40 - inside this folder look for this file
46:43 - about a stopmodule.ts file which is
46:46 - defined here
46:48 - and then you define a hash and i'm
46:51 - saying basically go inside this folder
46:54 - go to this about a start module file and
46:57 - then
46:58 - go inside this file and then look for
47:00 - about us page module and if i look at
47:03 - about us page module here you can see
47:07 - it basically has a routing implemented
47:10 - so it has this about us page component
47:13 - implemented in this module
47:15 - so how do i link to this now this
47:18 - various
47:19 - ways that you can do navigation using
47:22 - angular in ionic 4 but let's take a look
47:25 - at so we want to go to the home which is
47:27 - basically a simple
47:29 - uh route which basically if there is no
47:32 - route it will go to the home which we
47:34 - actually defined here abroad models
47:36 - right on the top to go to redirect your
47:39 - home if there is no url there
47:41 - okay
47:42 - so now i'm just going to get rid of
47:46 - this
47:47 - okay i'm going to save this
47:49 - now there's nothing here so i'll just go
47:52 - and
47:53 - create let's just say use ion
47:56 - button
47:57 - we do
47:59 - let's just say
48:01 - then we want to go to let's just do
48:04 - anchor tag i'll do href and here i
48:06 - defined simply i want to go to let's go
48:10 - back to our product module so i want to
48:12 - go to
48:13 - about let's copy this
48:15 - and paste that here and say
48:19 - about us let's save it and you will see
48:22 - a button i don't see the name here so
48:25 - maybe
48:26 - about us here we type it in
48:29 - that's fine and we just want to get rid
48:31 - of
48:32 - this as well all we can define
48:35 - we can do href here slash
48:38 - about us
48:40 - let me just
48:42 - remove that okay
48:44 - so now if i click on about us that will
48:46 - take me to the about us module and loads
48:49 - that component
48:51 - so if i go to about us
48:53 - module
48:55 - and he'll take us to here and they will
48:58 - load this about us page
49:01 - now let's go to
49:03 - uh
49:03 - contact
49:05 - and here we have this component there
49:07 - i'm going to go back to home uh not home
49:10 - sorry sorry home yes so home page
49:13 - and then here i want to
49:17 - add another button
49:22 - and then here i'll do
49:25 - and find
49:27 - approach model that's just a contact we
49:30 - copy that and we go to
49:33 - let's just close
49:35 - with stuff here
49:36 - and let's just do contact here i'm going
49:39 - to save this
49:41 - now we have two buttons
49:43 - about us and then
49:45 - we can say
49:47 - contact
49:48 - now let's go to
49:51 - a
49:51 - contact page and here
49:54 - i would like to define
49:56 - a button oops not that one let's make it
50:00 - bigger so button
50:03 - sorry ion dash button
50:07 - oops not a badge what i'm doing
50:11 - button and we do edge ref and say dash
50:16 - home
50:17 - save it
50:19 - similar we will copy this we want to go
50:21 - to about us page
50:24 - and we'll paste it here as well
50:27 - let's save this now we can navigate
50:30 - between these files so let me just say
50:33 - home here
50:34 - and then we have a content page i want
50:37 - to say
50:39 - home page here
50:40 - okay so now if i click on at home it
50:43 - will take me back to the home module and
50:46 - will load this home page and if i go to
50:49 - contact it takes me to contact page and
50:52 - then i have another button here to the
50:54 - contact page and i can go back to home
50:57 - so
50:58 - as you can see we basically
51:01 - can do a lazy loading
51:03 - here so routing with the lazy loading
51:06 - right so that's about this video guys in
51:09 - the next video we're gonna take a look
51:11 - at
51:12 - how we can
51:14 - use some of the components uh
51:17 - provided by ionic library
51:23 - we're gonna take a look at how we can
51:26 - use
51:27 - action sheet in your application
51:29 - now action sheets are great when you
51:31 - have to have some sort of a pop-up which
51:34 - will get the user to type in an option
51:36 - so this is actual sheet so for example
51:38 - if i want to delete some component i
51:39 - delete some value i can say hey you want
51:42 - to delete click on delete you want to
51:44 - share you should click on share play
51:46 - model favorite and
51:48 - cancel
51:49 - so we're gonna create this model in this
51:52 - video
51:53 - uh but you might be thinking what am i
51:56 - doing here there's a lot of things
51:58 - happening here already so for that i'm
52:01 - actually going to create a new project
52:04 - and then in that project so let me just
52:07 - open the terminal first and then here in
52:09 - the terminal let me just make it bigger
52:11 - for you guys
52:13 - and let's do this now in the terminal
52:15 - i'm going to create a new ionic 4
52:17 - project and then we will add action
52:20 - sheets to it type and i'm going to make
52:23 - that to angular we'll press enter now
52:26 - it's going to ask me what will be your
52:28 - project name so i'll say ionic
52:30 - tutorial and then what template do i
52:33 - want to use so if you are creating your
52:36 - application with the tabs ui you can
52:39 - select tabs which will automatically
52:41 - generate a code for you where you will
52:44 - have some tabs already placed for you to
52:47 - use we want to work on side menu then
52:50 - you will use side mini template which
52:52 - will already have some sort of code
52:54 - which will generate a side menu for you
52:57 - but what we want to do here is we want
52:59 - to create a blank template and then
53:01 - using that blind template we want to
53:03 - learn how to implement some components
53:06 - and after that we will learn how we can
53:09 - create a ui including tabs in the side
53:12 - menu so one bolt into place so let's uh
53:16 - let's get started with bank templates
53:19 - i'm going to select that and it's going
53:20 - to go and download now it's asking me
53:22 - introduce your new app with cordova to
53:24 - target native ios and android i would
53:28 - say yeah why not i'll just integrate
53:31 - cordova to my application
53:33 - right so the project is nearly done now
53:36 - basically it's asking me
53:38 - whether i want to integrate my ionic
53:41 - project to ionic pro sdk well i don't
53:44 - have an account as of yet now
53:47 - for ionic pro so that's why i'm going to
53:49 - say and and press enter all right so our
53:52 - project is
53:54 - created now i'm going to open that
53:56 - project in webstrom so let's me open
53:58 - webstrom
54:00 - and here let's uh let's take it to that
54:03 - window there
54:04 - okay so now i'm going to go and click on
54:07 - open
54:08 - we're going to navigate to that
54:10 - folder ironic tutorial and i'm going to
54:13 - open that now this is a similar project
54:16 - that we just created in the last video
54:18 - it's a blank project it's got nothing
54:21 - more than just a boilerplate code to run
54:24 - our application so we're going to go
54:26 - inside these and i'm going to go to
54:28 - terminal and i'm going to simply type
54:32 - the command ionic
54:33 - server dash l
54:36 - and when to click on this browser so it
54:39 - will go and open that
54:41 - up so now before we can
54:43 - open this project into a lab we need to
54:45 - install ionic lab say ui press enter and
54:49 - it's going to install ionic lab now and
54:51 - then it will open our application
54:54 - as you can see after installing ionic
54:56 - lab it automatically open up so right
54:59 - now we're looking at ios version of our
55:01 - application but we can take a look
55:02 - android and also windows i'm just gonna
55:04 - scroll down this is android guys and
55:06 - that's windows down there
55:09 - so we continue with android and windows
55:12 - so let's take a look at code now in the
55:15 - source folder as i explained in the last
55:17 - few videos about this blank project so
55:20 - we're going to go to app and here we
55:22 - have this app a module
55:24 - app module is the main module of your
55:27 - application
55:29 - we have a app a routing module which
55:32 - i've already explained to you guys how
55:34 - the routing and the lazy routing works
55:37 - in angular 4. so here we have this app
55:40 - writing module
55:41 - app module we have a app component we
55:45 - have app component.html file where we
55:48 - have this ionic app with ion router
55:51 - outlet basically let's take a look at
55:54 - the outer outlet what it does if you are
55:56 - familiar with angular it will tell the
55:58 - application this is where i want to
56:00 - start my routing
56:02 - so this is the main entry point for your
56:04 - routing
56:05 - so now what we want to do here we want
56:08 - to learn how we can create an action
56:11 - sheet
56:12 - so i'm going to go
56:14 - to app component
56:17 - or we can simply go to our home page and
56:21 - do our action sheet because
56:24 - app component is nothing more than a
56:26 - just a placeholder for routing it does
56:28 - not really have anything so basically
56:30 - when the application starts it looks at
56:32 - this on router and it goes to the
56:34 - routing module and looks at what it's
56:36 - supposed to load we go to app routing
56:38 - module and here we can say if there is
56:40 - no path it will redirect to home
56:43 - so we're going to do all our
56:45 - logic home
56:47 - so let's go to home page and here if i'm
56:50 - just going to go and remove
56:52 - all these and i'll say hey
56:55 - i want to have
56:56 - ion button
57:01 - okay
57:02 - and then inside this i'll say hello
57:06 - action sheet we press
57:09 - command s it will save the project and
57:11 - we'll open that
57:13 - into our app so here we can see
57:16 - we have this hello action sheet button
57:18 - which does not do anything as of now
57:21 - so we want to do we want to create an
57:23 - action sheet but i'm going to take you
57:24 - to
57:25 - an uh
57:26 - a documentation for this so you can go
57:29 - and continue learning after you learn
57:31 - how to implement these kind of ui
57:34 - components so here we have action sheets
57:36 - light up from the bottom edge of the
57:38 - device and display the set of options
57:41 - with ability to confirm or action
57:44 - or cancel action
57:46 - so action sheet can sometimes be used as
57:48 - an alternative to menus however they
57:50 - should not be used for navigation
57:53 - so we go to api
57:55 - and in api it'll give us some sort of
57:57 - code snippet which we can use
58:00 - so now i'm going to go back to the code
58:02 - and here we'll just open
58:04 - home
58:05 - dot ts file we're going to do logic
58:09 - and then here i'm going to create a
58:11 - constructor function
58:13 - constructor i'll say public and i'll say
58:16 - action
58:17 - [Music]
58:27 - okay so i've fast forwarded the the
58:30 - function
58:31 - so basically let me go and explain the
58:34 - function what we've done so far so in
58:36 - the constructor we added this action
58:39 - sheet controller service
58:42 - and i stored that service into the
58:44 - variable name called actionsheet and
58:46 - then we created a function which is
58:48 - async function and i named it present
58:51 - action sheet
58:52 - and then inside that function we create
58:55 - a const variable
58:57 - which basically have this async and a
58:59 - weight
59:01 - now we are using this action sheet which
59:03 - i injected into this constructor
59:06 - function and then we call the method dot
59:08 - create and then we got some few
59:10 - properties to define
59:13 - uh so we could show the action sheet so
59:15 - we have a header what would be the
59:16 - header of the actual sheet what is the
59:18 - mode of our action
59:21 - sheet
59:22 - any buttons available in action sheets
59:24 - so we can define as many buttons as we
59:26 - want and then after that we have this
59:29 - await action
59:30 - sheet.present method which will
59:32 - basically create an action sheet and
59:35 - then make it appear
59:37 - right so now we have this function i'm
59:40 - going to put this function and call it
59:42 - when i click on this button so we go to
59:44 - the home dot
59:46 - uh homepage.html and here
59:49 - i'll use a click
59:51 - and then i'll just call it present
59:54 - action sheet
59:56 - i'll save the project and now our
59:59 - compiling should be done in like five
60:01 - seconds yes it's done i'm gonna click on
60:04 - hello action sheet and there we go so we
60:06 - have an action sheet so i can click on
60:08 - it and then it will just disappear
60:11 - so now if i go to
60:13 - let's just say homepage.ts and here i
60:16 - have
60:16 - had a handler
60:18 - on the button basically it's a function
60:21 - that will be called once you click that
60:23 - button so let me go to the console here
60:26 - in the browser and i want to show you
60:28 - that when i click on that button we'll
60:30 - see you click me on the console so i
60:32 - click on that
60:34 - and
60:35 - then i'll just go down and i click on
60:37 - that cancel button and there you go we
60:39 - see you clicked me so you can see that
60:42 - we can call any functions from anywhere
60:45 - in our application on this button so
60:48 - this is very useful if you want to
60:50 - perform any action and also just to
60:52 - mention that you can add a multiple
60:54 - buttons here so for example this is one
60:57 - button in an array we have i'm just
60:59 - gonna move this right down so it's
61:02 - better and cleaner to look at so here
61:05 - i'm just gonna
61:06 - copy this i'm gonna add a comma here i'm
61:08 - to add another button
61:10 - and i'll just say roll would be let's
61:13 - just say
61:14 - this drop tip
61:17 - all right and then the text would be
61:19 - hello
61:20 - icon we can say add
61:23 - i'm gonna save the file and i'm gonna
61:25 - here say you
61:27 - added me okay i'm gonna save the file
61:29 - again and let's take a look at do we get
61:32 - two buttons now so if i click on this
61:35 - button to close the console i click on
61:37 - this and we get this button hello and i
61:39 - cancel
61:41 - so
61:42 - here we defined a roll
61:45 - that has this cancel so it will go
61:48 - down
61:49 - but if we have another button we define
61:51 - a role to destructive that means it will
61:53 - go into the list so we can have like a
61:55 - multiple buttons here with a destructive
61:58 - role so i'll just go
62:00 - make another one
62:02 - comma
62:03 - make another one and i save the project
62:06 - and this time when i click on that hello
62:08 - action sheet you'll see multiple buttons
62:10 - appearing so click on this and here we
62:13 - have multiple buttons i'm going to go to
62:15 - console
62:16 - and just clear this thing out
62:19 - now we're going to go to action sheet
62:21 - when i click on one of the button it
62:23 - says you added me if i click on that i
62:25 - click on cancel button you see that you
62:27 - clicked me so you can perform any kind
62:29 - of action onto one of these buttons all
62:33 - right so this was a quick introduction
62:34 - to how you can use the components using
62:37 - their
62:38 - their classes
62:43 - we will be learning how we can use a
62:46 - component a library provided by ionic so
62:49 - ionic apps are made of high-level
62:52 - building blocks called components and
62:54 - components allow you to quickly
62:56 - construct an interface for your app and
62:59 - ionic comes with a number of components
63:01 - including models pop-up and cards we're
63:04 - gonna take a look at what's available in
63:07 - ionic and i'm gonna show you how you can
63:09 - use it
63:10 - now before we start i would like to give
63:13 - you a demo why do you even bother using
63:16 - components or ui provided by ionic
63:19 - now here we have a same application
63:22 - running for ios android and a windows
63:25 - platform and i know
63:27 - windows platform is dying and ionic is
63:29 - not really supporting anymore
63:32 - but
63:32 - we have a third option here when you
63:35 - start your application with the flag
63:37 - dash al you get this lab so here you can
63:41 - see how your application is going to
63:43 - look like on ios and android and windows
63:47 - so now if i click on this button which
63:50 - basically it's a fab so let's see i
63:52 - click on that i get this action sheet so
63:56 - you probably use a lot of mobile
63:58 - application on iphone so you see this uh
64:01 - action sheet a lot in your iphone
64:04 - application and similar to android we're
64:06 - going to take a look at if i tap here it
64:09 - shows you the actual sheet but look at
64:11 - the ui ui is pretty much uh android
64:14 - looking ui so you see this kind of ui in
64:17 - a stock android phones for example nexus
64:20 - series from google so this is a stock
64:22 - android ui now we have this
64:25 - windows which is going to make you laugh
64:27 - so if i click here you get this sort of
64:30 - things here because windows platform is
64:31 - not supported anymore and i don't know
64:34 - why they kept that in ionic
64:37 - but
64:38 - so you got the idea the benefits of
64:40 - using ionic components is that you write
64:43 - one html you write uh one html with a
64:47 - couple of css classes and i only take
64:50 - the responsibility of making your app
64:53 - look uh look native to the pacific
64:56 - platform for example if they they're
64:58 - running on ios then app is going to look
65:00 - like it's a native app on ios even
65:03 - though the whole app is running on
65:05 - is it's running on platforms a web
65:09 - component we'll talk about that web ui
65:12 - kit that provided by different platforms
65:15 - so now let's take a look at the
65:17 - documentation of ionic so here we have
65:20 - ionic action shades we have alerts so
65:24 - here if i click on action sheets it says
65:27 - show actually it's a bit slow but it's
65:29 - going to show you this is the action
65:30 - sheet that you can use
65:32 - now
65:33 - what you can do here you can basically
65:35 - use this
65:36 - one code and just put that in an
65:38 - application and when you build a code
65:40 - for a specific platform that will
65:42 - automatically be converted to make it
65:44 - look like native so we have alert we
65:47 - have a badges
65:49 - uh we have
65:51 - uh buttons
65:52 - so let's take a look at the buttons so
65:54 - these are the buttons available that you
65:55 - can use and it's going to look like
65:57 - these in your ios so you see cards
66:01 - everywhere on iphone
66:03 - applications we have a checkbox
66:06 - and that's gonna
66:07 - be a checkbox for your both platforms we
66:09 - have data and time so now you see a lot
66:12 - of applications have this date picker
66:14 - that you can choose date from that seems
66:16 - very complicated to create but i only
66:19 - provide this nice uh little code snippet
66:22 - of code which you can use in your
66:24 - application and will show a date picker
66:27 - so if i just take this
66:30 - and i copy this and i just paste that
66:33 - into my application
66:36 - so let me put that into somewhere
66:40 - let's just go to
66:43 - home tab i know you guys can see it but
66:45 - i'll show you these later so i'm just
66:48 - going to put that simple ui
66:51 - into one of the applications we are
66:53 - running
66:54 - so when i paste this here let's save it
66:56 - and let's go back to our application
66:58 - guys and here we have this date because
67:01 - if i click on that there you go i can
67:03 - you know pick the date for iphone now if
67:06 - i click here i can pick the date here as
67:08 - well it didn't actually work on iphone
67:11 - but we can customize it we can do it how
67:14 - we can customize the
67:15 - specific platform
67:17 - we have a fab fab is really cool that
67:20 - basically gets you
67:22 - a button which has some z index so it
67:25 - stays on the top of all the other
67:27 - components in your application
67:30 - example i have created this button the
67:32 - plus button
67:34 - with the help of fab so if there was no
67:36 - fab that would be very hard to create
67:38 - this kind of a button that basically
67:41 - stays on the top of all the components
67:44 - you have if a great grid is basically
67:47 - used
67:48 - to create a layout in your application
67:50 - for example you want to customize the
67:53 - layout of your page and you want to have
67:55 - some smaller cards bigger cards so use a
67:58 - grid
67:59 - the grid is great
68:01 - infinite scroll so a lot of applications
68:04 - have this kind of infinite scroll guys
68:06 - so you can just keep scrolling and the
68:08 - data will be loading uh according to
68:11 - your scroll so what happens is if you
68:13 - wanna like if you're working on an
68:15 - application where you have a lot of data
68:17 - sets and it's not you're not able to fit
68:20 - those data set in just a small screen so
68:23 - what you can do is you can use this
68:25 - infinite scroll and basically the amount
68:27 - of data you can load and at that screen
68:30 - that will only be loaded but when you go
68:33 - scroll down it will load the next data
68:35 - into an array or an object i'll show you
68:38 - how you can use it later but let's go
68:40 - through quickly what are available so we
68:42 - have our input fields available we can
68:44 - still customize that list is there
68:47 - loading loading is one of the cool thing
68:49 - that ionic right it's really easy to
68:51 - create as well so if i click on show
68:53 - loading that'll show you this kind of
68:54 - loading please wait so a lot of
68:56 - applications use these kind of loadings
68:58 - when they want to load the data
69:00 - basically they make an api call to some
69:03 - server running in the wall and then they
69:04 - wait for data to be received and during
69:07 - that time you don't want your user to
69:09 - just stare at your application without
69:11 - knowing anything so what do you do you
69:14 - create a loading uh so that user knows
69:17 - that something is coming so they gotta
69:19 - wait
69:20 - we have a menu menu is really great it's
69:23 - easy to use so if i tap here and then i
69:26 - can see the menu bar
69:27 - we have a model model is one of the
69:29 - other
69:30 - great ui component provided by ionic so
69:34 - if i click on one of these you'll pop
69:36 - the model up and i can have that
69:39 - i can have the page it's basically a
69:41 - model not an exact page
69:44 - and i can use that for all the
69:46 - components that i want to put in this
69:47 - basically is used mostly for sign up and
69:51 - login page which don't really require to
69:54 - be there all the time so you create
69:56 - those on the go by maybe creating a
69:59 - button pressing on that and you
70:01 - create a model
70:03 - now let's go to nav
70:05 - so now basically
70:08 - you see in iphone applications there
70:10 - were there's a lot of
70:12 - child
70:13 - component that you want to show then use
70:16 - now so
70:17 - one nav can create a model or another
70:20 - nav inside this and then that knife can
70:22 - have another lab inside this so you can
70:24 - just continue
70:27 - doing
70:28 - basically child to child and child to
70:31 - child components
70:32 - pop over let's take a little pop over
70:35 - so pop power is like you have some sort
70:38 - of uh text going at the back and you see
70:41 - when you i scroll down you see the pop
70:43 - over and you see the text just a little
70:45 - bit blur
70:46 - that means pop over now let's take a
70:48 - little range there's a lot of time you
70:50 - want to
70:52 - maybe increase decrease some sort of ui
70:56 - or css or something in your application
70:59 - then you can use this kind of component
71:00 - that's really really great sometimes you
71:03 - want to change the data you want to have
71:04 - some sort of ui which helps you to do
71:06 - that and this is great refresher a lot
71:10 - of times people go to one of the page in
71:12 - your application and then they want to
71:16 - refresh the data for example the data is
71:18 - coming from the backend and you go to
71:20 - the page and during
71:23 - while you were on the page the data
71:25 - updated in the back end and your api
71:27 - basically doesn't trigger any event or
71:30 - doesn't really emit the data to the
71:32 - front end so what do you do you create a
71:34 - refresher and you get the user to tap
71:37 - and swipe down and that makes
71:40 - that makes the refresher now on that
71:43 - event you can call the api and load some
71:46 - more data and
71:48 - obviously you're going to be using
71:50 - angular with ionic to create all this
71:52 - logic this is just a ui component which
71:55 - is great and very easy to
71:58 - implement in our application but
72:00 - obviously the backend logic the backend
72:02 - code in angular will be done by us we
72:05 - have a search bar we will select so a
72:08 - lot of ways you can select we have this
72:11 - female gender selection game
72:13 - selection there you go we have
72:15 - notification selection and there's
72:17 - different types of selection that you
72:19 - can customize
72:20 - uh slides
72:22 - now a lot of time when your application
72:25 - loads
72:26 - for the first time you see some sort of
72:28 - introduction
72:30 - of your application
72:31 - so that means they basically create
72:34 - slides slides are very easy
72:36 - to create with ionic all you do is just
72:38 - copy paste this and fill the data in and
72:41 - that's what goes into your slides really
72:43 - good stuff if you want to create the
72:45 - same kind of slide in your native
72:48 - android or iphone or windows code
72:50 - uh you i think you're gonna take much
72:53 - longer it's not like much longer to
72:55 - implement and make it look like that
72:56 - nice spinners a lot of times you wanna
72:59 - have spinners there yep we have spinners
73:02 - tabs tabs are really
73:04 - a core component that is required for
73:06 - any application you go to iphone or
73:08 - android
73:09 - now all the bigger enterprise level
73:11 - applications have some sort of tabs ui
73:14 - that you have the tabs at the bottom so
73:16 - i can show you this this is the tab as
73:18 - well now we will learn how we can create
73:21 - an interface
73:23 - including tabs
73:26 - also with a menu bar so right now i
73:29 - don't see them anywhere here but we will
73:31 - implement that
73:33 - later so toast
73:35 - toast a great way to show
73:37 - uh show some sort of a message on an
73:40 - event to the user for example if they
73:43 - are going to sign in and once the sign
73:47 - in there should be a message that you
73:49 - successfully logged in so if i tap here
73:51 - you see the toast here and it stays for
73:53 - a few milliseconds or
73:55 - one second two seconds you can define
73:57 - the time there as well but click here
74:01 - and there you go so we got different
74:02 - sort of sorts toast available ritual
74:05 - scroll
74:06 - so we have
74:07 - a virtual scroll so it says your
74:10 - followers successfully now it's gonna go
74:12 - all the way to 500 entries that's called
74:16 - a virtual scroll now these are the
74:19 - components that are provided by ionic
74:22 - framework now
74:24 - as i uh as we are learning angular sorry
74:28 - not angular 4 by ionic
74:30 - 4
74:32 - which means this documentation is not a
74:35 - stable documentation this is a beta
74:37 - documentation and they will be adding a
74:39 - lot more
74:40 - components a lot more information to
74:42 - these document now if i take you to the
74:45 - documentation of the older version
74:48 - which will give you
74:50 - some more
74:52 - ui components so let's go here we're
74:54 - going to go to ionic
74:57 - framework
74:59 - and then here i'm gonna go to developer
75:00 - and i'm gonna go to framework docs now
75:03 - this is ionic three docs here you can
75:06 - see island four is coming but we already
75:09 - started learning ionic 4 because it's
75:10 - it's pretty much
75:12 - done we we basically got what we need to
75:15 - build application with ionic 4 but
75:17 - there's going to be a lot of
75:18 - improvements will be coming in but the
75:20 - structure and the core uh core
75:23 - technology is there already so if i go
75:25 - to components you'll see a lot more
75:27 - options here compared to i think there's
75:30 - not much more but maybe a toolbar
75:33 - is a is another one that you have here
75:36 - so you see this footer toolbar
75:38 - stuff like that so
75:40 - yeah that's that's about it guys and
75:42 - thank you so much for watching this
75:43 - video that was just a quick overview of
75:47 - what's available in ionic 4 what are the
75:50 - ui components and in the next video we
75:52 - will learn how we can implement some of
75:54 - the nice components ui components into
75:57 - our application
76:02 - we're going to take a look at some more
76:04 - ui components available in ionic
76:07 - 4. so the first component that i want to
76:09 - show you is alert alert are great ways
76:12 - to offer the user the ability to choose
76:14 - a specific action or list of actions
76:17 - alert can include text input
76:20 - buttons they can provide the user with
76:22 - important information or require them to
76:24 - make a decision so what is an alert
76:27 - alert is a dialog that presents users
76:30 - with information or collects information
76:33 - from the user using inputs
76:35 - an alert appears on the top of your app
76:38 - content and must be manually dismissed
76:41 - by the user before they can resume
76:43 - interaction with the app it can also
76:46 - optionally have headers sub headers and
76:48 - messages
76:50 - also you can add buttons you can have
76:52 - inputs you can do a lot more stuff in
76:55 - alerts but they're not recommended if
76:57 - you have
76:58 - some sort of functionality that you want
77:00 - to perform so basically if you need a
77:03 - signup form and it's got a lot of
77:05 - impression i would recommend you guys
77:07 - use a model in setup alert we'll take a
77:09 - look at what is a model later in the
77:11 - course so let's get started with
77:13 - creating an alert let's go to
77:16 - home.page.ts file and here you can see i
77:18 - have imported
77:20 - alert controller and also i've injected
77:22 - that into a construction function so we
77:24 - could use that in our class so now let's
77:27 - get started with creating a simple alert
77:30 - i'm going to start with defining async
77:32 - function which i'll call it present
77:35 - alert
77:37 - and then we create a constant so just do
77:41 - a const and i'll say this is an alert
77:44 - that i'm creating and then i do await
77:47 - this dot alert
77:51 - uh
77:51 - actually i forgot to change the name of
77:53 - this action sheet to alert controller so
77:57 - alert
77:58 - controller
78:01 - i was
78:02 - using the same file in the last video so
78:04 - this is why i had that so so this dot
78:08 - alert controller dot create
78:11 - we're passing in an object and that's
78:13 - going to take a header which will pass
78:15 - in
78:16 - alert
78:19 - and then another value you can take a
78:21 - sub header as well so do
78:24 - sub alert
78:27 - i'm going to put that into
78:29 - single quotes
78:30 - so
78:31 - sub
78:32 - alert
78:34 - now we can say what is the message of
78:36 - that alert
78:37 - so do
78:38 - message and then inside that i'll say
78:41 - hey this is the
78:43 - alert
78:44 - message
78:47 - and then also we're gonna put that
78:49 - semicolon sorry comma there
78:52 - and then
78:53 - we can have
78:54 - a button so do
78:56 - buttons
78:57 - and then that will should take a button
79:00 - okay
79:02 - and then we can simply go and
79:05 - present it so just a weight
79:09 - dot sorry alert
79:11 - dot present
79:14 - okay i'm gonna save the file and let's
79:16 - go and wait for it to compile so it's
79:19 - compiled now i'm gonna click here that
79:21 - should present an alert so it's not so
79:24 - we're going to go back to home.page
79:26 - and then we type in
79:29 - click event which will take present
79:32 - alert save it wait for it to compile the
79:35 - project
79:36 - and then when you click on it you should
79:38 - be able to see a low so here we have
79:40 - alert subheading and a message and a
79:42 - button which will dismiss the alert
79:46 - all right let's go to ionic
79:47 - documentation
79:49 - and here i'm going to take you to alert
79:52 - and let's click on api
79:54 - which will tell us what's available for
79:56 - us to use from alert
79:58 - so here you can see we have a buttons we
80:01 - have inputs we have the usage and code
80:05 - snippet as well that you can use so here
80:07 - you can see we have a simple alert which
80:09 - we just created your long message alert
80:11 - that's what we can create
80:14 - multiple button uh cancel open model a
80:17 - delay so you can perform an action
80:20 - depending on what you want to do so
80:22 - let's take a look at that
80:24 - so here i would like to go and create an
80:27 - action
80:28 - sheet when i click on present alert so
80:31 - let's go back and here we want to go and
80:34 - i'm just going to make it a bit smaller
80:36 - so we can see it first of all let me
80:38 - just import
80:41 - action
80:42 - sheet
80:44 - controller
80:45 - that would be from
80:51 - ion
80:53 - angular
80:55 - and then i'm just going to inject that
80:56 - as well so i'll just do
80:58 - prior rate
81:00 - action
81:01 - sheet
81:03 - action sheet controller that's fine so
81:06 - now here i'm going to do a handler for a
81:09 - button
81:11 - i'm going to remove okay
81:14 - instead of
81:16 - passing a string we pass in an object
81:18 - now here we define
81:20 - a text and i'll say
81:23 - cancel
81:26 - role would be cancel as well
81:31 - that goes into string
81:36 - and then here we do handler
81:39 - and i'm gonna pass in an event here so
81:44 - not even basically a function when you
81:45 - get click it's what you want to do so do
81:48 - console.log and say
81:50 - you clicked me
81:52 - so
81:53 - you
81:54 - click me
81:57 - okay so now i can pass in another button
82:00 - so we can have a multiple button here so
82:03 - we just do
82:04 - a comma and then i'm gonna pass in text
82:08 - okay
82:10 - and then we don't define a role now we
82:12 - just simply say
82:14 - uh let's just do css class we can do
82:17 - secondary
82:20 - and then we can pass in another handler
82:24 - so
82:25 - do a handler
82:28 - then we do
82:32 - okay so here what i want to do i'll do
82:34 - console.log
82:35 - let's say
82:36 - a second handler
82:40 - all right and i'm going to save the
82:42 - project there's an error it's basically
82:44 - a tslin error not an actual coding error
82:48 - so let's go and take a look at what
82:50 - happens when we have this so here we
82:52 - have action button action alert
82:55 - and i'll
82:57 - okay action alert i can see okay button
83:00 - and then cancel button i'm gonna add
83:03 - another button here guys and i'm just
83:05 - gonna name it
83:06 - open model
83:08 - so let's just do
83:11 - open
83:12 - sorry action sheet not a model action
83:15 - sheet right
83:17 - and then i'm just gonna make it let's
83:19 - just say
83:21 - primary
83:25 - all right so i've removed contour log so
83:27 - here in handler we want to start with
83:30 - typing
83:31 - async and then we'll do an error
83:33 - function here
83:35 - and then inside this we are going to
83:37 - create an action sheet so here we can
83:41 - you can see i've already imported action
83:42 - sheet controller and injected that in a
83:45 - constructor as well so let's go down and
83:48 - here
83:49 - we want to start writing our action
83:51 - sheet so here i'll just create a const
83:54 - and
83:56 - i'll do
83:57 - action is equal to
83:59 - then we'll do a weight this
84:02 - this.actionsheet.create and that also
84:05 - takes an object and takes some
84:06 - properties that can be used so do some
84:10 - sort of header
84:13 - so we'll define some buttons here as
84:14 - well
84:15 - so i'm gonna do header and i'll just say
84:19 - testing
84:21 - action
84:23 - then also we can define a role as well
84:25 - but let's not define a role let's define
84:28 - an icon
84:30 - and let's do
84:31 - trash
84:34 - and then we all can also define a
84:36 - handler to this
84:38 - uh
84:39 - so that's not going to go there so we
84:40 - need to define a button guys so as i've
84:42 - shown you how you can do it
84:45 - so let's just do a button here and then
84:47 - the first button text is going to be
84:51 - terraced
84:52 - and then we'll do
84:54 - roll we can define a role to cancel then
84:58 - we have handler again
85:00 - and then inside the handle we use error
85:02 - function syntax and we do console.log
85:07 - a hello
85:09 - okay i'm gonna save the project and now
85:11 - we should see an action sheet but before
85:14 - we can see that we need to present that
85:18 - so here i'll find this action sheet and
85:21 - i find this uh
85:23 - this curly brace and after this we want
85:26 - to do
85:27 - weight
85:28 - this dot
85:30 - action
85:32 - dot present
85:34 - okay now while we're here so we don't
85:36 - need this we just simply use a weight
85:39 - action.present
85:41 - and that's pretty much it is so we're
85:43 - just gonna decrease the text size and
85:45 - let's take a look at so we click on this
85:48 - we get an action i'm gonna click on open
85:50 - action sheet click on this and you see
85:53 - them actually cheat as well
85:54 - so that's cool isn't it so you can
85:56 - define alert or you can define action
85:58 - sheet and you can perform any kind of
86:00 - action
86:01 - while a user clicking on that so that's
86:04 - really cool now i'm going to take you
86:05 - some of the documentation of ionic and
86:08 - let's take a look at some of the things
86:10 - that we need to know
86:12 - about this documentation how to use this
86:16 - documentation and how you can improve
86:18 - your knowledge of ionic and improve your
86:22 - workflow plus creativity plus
86:24 - productivity using these documentation
86:26 - so now
86:27 - you can see we have a lot more options
86:30 - here we can create these kind of alerts
86:33 - so here we have a long
86:35 - message alert we have a multiple button
86:37 - alert which we created alert no message
86:40 - we have a confirm and cancel button
86:44 - also we have some sort of a form that
86:47 - can take data from user and perform an
86:50 - action on okay or dismiss the alert on
86:54 - cancel
86:56 - so let's take a look at we have creating
86:59 - so this is how you create a
87:01 - alert using alert
87:02 - controller then we can define the
87:04 - buttons we can define inputs using
87:07 - inputs this is a
87:09 - so
87:10 - code snipper that you can use
87:12 - all the way down we can see we have a
87:14 - properties
87:15 - now the properties are basically
87:19 - uh a value that you can use to do some
87:23 - stuff for example here it says animated
87:26 - so it says if
87:28 - true
87:28 - alert will animate and it's default to
87:32 - true so if i click on this
87:35 - and then you see the animation happening
87:37 - so click here you see that animation so
87:39 - if i go
87:41 - and right on the top
87:43 - i can say i don't want to uh
87:47 - i want i don't want it to animate so
87:49 - i'll change
87:51 - the value animate it to false and i save
87:54 - the project and i see if i click on that
87:57 - normal animation should happen so here i
87:59 - click
88:00 - it pops up straight away so there's no
88:02 - animation happening now so you can see
88:05 - you can read about these properties and
88:08 - you know customize your alerts or you
88:12 - can customize
88:13 - any other ui component so every time you
88:16 - want to use a button an action sheet
88:19 - alert or card or
88:22 - card title anything
88:24 - the documentation of that
88:27 - technology is the best list to enhance
88:29 - your knowledge so here we have a
88:30 - backdrop i'm just going to copy that
88:32 - let's go back and then here we define
88:35 - let's just say backdrop dismiss is this
88:38 - the right key so here it says backdrop
88:40 - dash dismissed
88:42 - so
88:43 - we will do
88:46 - actually let's not do that we do
88:47 - something else here
88:49 - okay back to the truth alert will
88:51 - dismiss when the backdrop is clicked
88:54 - defaults to true it's already true
88:57 - we want to find
88:59 - uh overlay now that's gonna be basically
89:02 - uh it's gonna
89:04 - make the background a bit a bit
89:06 - darker so you can see the overlay there
89:10 - now these are all the properties that
89:12 - you can use
89:14 - to customize your uh your alert
89:17 - also if i will show you guys few other
89:20 - things for example here we have
89:23 - uh icon ion button so if you want to use
89:26 - a button in your
89:27 - application you can simply use this iron
89:30 - button
89:31 - so let's take a look at how we can use
89:33 - that here we have a code snippet so here
89:35 - i'll use
89:37 - iron button with the color primary let
89:39 - me just do
89:41 - uh success
89:43 - let's copy this and then here we have
89:46 - some issues here so i'm just going to
89:47 - remove this
89:48 - let's save the project and let's close
89:50 - some files here we go to
89:52 - home.page.html file and here i want to
89:55 - use ion button with color success i'll
89:59 - save the project and you'll see our
90:01 - server results automatically and
90:03 - compiles our app and show that this
90:05 - stuff gets better right now this button
90:07 - doesn't do anything
90:10 - let's take a look how we can improve
90:11 - this here we have a button type we can
90:14 - define that as a button or bar the color
90:16 - property we've already used here and we
90:19 - define its value success this is how we
90:21 - can see this color success there
90:24 - all the way down we have all the options
90:27 - for example we have the size if you want
90:30 - to make your button larger
90:32 - or small
90:34 - then you can define that so here if i
90:37 - say size which is a property and i say
90:40 - large and i press command s to save the
90:44 - project and it will recompile it and
90:47 - we'll see if change so here we have a
90:48 - larger button now so you can you you can
90:50 - use this documentation and then improve
90:53 - your knowledge about ionic
90:55 - so yeah let's uh that's about it for
90:58 - this button or maybe last thing we look
91:00 - at shape you might like the shape so
91:02 - here we have a property shape and then
91:06 - that can only take this properly the
91:08 - possible values are round let's give it
91:13 - a round
91:14 - and let's save it let's see if we get
91:17 - something
91:18 - different so yeah we have the round
91:21 - value there
91:23 - so similar to this we have a badges we
91:26 - can use this html
91:29 - also
91:30 - all the time please go inside api and
91:32 - which will give you a list of properties
91:35 - you can use for that ui component you
91:37 - can look at what are the methods you can
91:40 - call on that
91:41 - for example we will do some uh
91:44 - method
91:46 - so i'll go to
91:47 - alert and we go all the way down after
91:50 - the properties we have events which
91:51 - we'll talk about later so here we can
91:53 - call the methods as well we have these
91:56 - methods like dismiss
91:58 - or we have this on we'll dismiss
92:02 - basically you can read that this is
92:04 - what's going to happen when you apply
92:06 - this to a button or any which can act
92:09 - upon it this will dismiss the alert
92:12 - overlay
92:16 - we're gonna continue our ionic adventure
92:20 - uh of components so you've seen action
92:23 - sheet i've explained to you how you can
92:24 - use alert badge a button
92:28 - now we're going to go and complete our
92:30 - knowledge about ui components and some
92:33 - things that i want to talk to you guys
92:35 - about
92:36 - so let's just say some of the components
92:38 - you see we have
92:40 - html for that so you can use these
92:43 - components they are basically static
92:45 - components that can be used
92:48 - in your application but some of the
92:50 - components are dynamically created for
92:53 - example if you want to create a check
92:56 - box then you use this ion checkbox and
92:59 - you define the properties which are
93:01 - available and then you can do that so
93:03 - here we can see we got all the tech
93:05 - check boxes here that can be used so if
93:08 - i go to api
93:10 - and then i will see all the properties
93:13 - for checkbox i can use so these are some
93:16 - of the some of the
93:18 - code snippet that can be used and it
93:20 - gives you some of the idea that how you
93:22 - can use this ui components in your
93:25 - application for example this one is
93:27 - dynamically done here so here we have
93:29 - ion list which is another ui company we
93:32 - have an ion item we use the angular ng4
93:37 - array and then we loop through to all of
93:40 - these check boxes then you can see
93:42 - a bunch of check boxes using this ng4
93:46 - that's fine so now let's uh take a look
93:50 - at our components back so we have a date
93:53 - and time picker so if i go did entire
93:56 - picker you can see
93:57 - uh in a lot of application that you have
93:59 - this kind of a date and time picker as
94:02 - well so here we have a time picker
94:04 - nicely done and it will automatically
94:07 - adjust its joy according to the platform
94:10 - you're using so we have a and fab 20
94:13 - 1990
94:15 - so this is how you can use date and time
94:17 - picker now let me take you to the api
94:19 - we'll take a look at some of the
94:21 - properties for date and time picker
94:23 - available
94:24 - which is actually an important one
94:27 - because a lot of application pretty much
94:28 - every application has to work around
94:32 - date and time
94:33 - so here we can see we can format our
94:37 - date and time by defining these values
94:41 - so let's go and use this date and time
94:44 - picker and let's take a look at how we
94:46 - can use it so i'm going to take you back
94:48 - to the code let's just remove some of
94:50 - the button here let's save this project
94:53 - and now let's learn from here so
94:55 - basically we can do a date and time
94:58 - picker i'm gonna go and find
95:00 - uh basically this chord snippet here
95:03 - let's copy this
95:05 - and i'm going to paste that
95:08 - here i'm gonna save the project
95:12 - and let's see if we are able to see that
95:15 - in time so if i click on this i see this
95:18 - you know january 1 18 and then time as
95:20 - well so here you can see we have a
95:23 - property called display dash format
95:27 - let's go back and we take a look at what
95:29 - are the properties available so here we
95:31 - have ion date
95:33 - and then we have a formatter
95:35 - that can be used
95:37 - so here we have a format and then
95:40 - basically for four y defines
95:42 - ear in four digit
95:45 - two yy defined here in two digits
95:49 - one m define a month
95:52 - and in one digit
95:54 - so let's go and take a look at
95:57 - and use this so here we have a 4y i'm
96:00 - going to change that to 2y and then
96:02 - control
96:03 - on the windows and command on a mac
96:06 - press s to save the project let me go
96:11 - and just
96:12 - hire
96:13 - our project so we could see the whole
96:15 - code if i click on this now this time i
96:17 - should see a year in two digits
96:20 - so you can format your date and time
96:23 - using all these values
96:25 - so let's just say if i don't want to
96:27 - show the time here
96:29 - i'll simply go and remove h column m and
96:33 - i'll save the project by pressing
96:35 - command s
96:36 - and that should update our app and
96:39 - should only show me
96:41 - date with
96:42 - month
96:43 - and then the day and then year in two
96:46 - digits so as you can see here you can
96:49 - use these values and customize them into
96:52 - a date
96:53 - formatter so here it tells you how to
96:57 - use it so you can see this property now
97:00 - we can even format the picker as well so
97:04 - here if i change this
97:06 - format picker and i'll just copy this
97:09 - properly
97:11 - and then let's just paste it here let's
97:13 - just save it and let's see what happens
97:15 - now here we got an error
97:19 - we if we closing to
97:21 - a semicolons
97:23 - let's just save the project again and
97:25 - let's see
97:26 - what happens now
97:30 - let's
97:32 - refresh and let's see if we can see the
97:35 - changes
97:36 - okay i'm going to click here and then
97:38 - now we have
97:40 - the pickup formatter we have a month and
97:43 - then we have this four yyyy now if i
97:46 - change this to 2y and then save this now
97:50 - this year should be in two digits
97:53 - so let's take a look
97:55 - now here you can see we have a january a
97:57 - month and then we have this 18. so you
98:01 - can format your date picker using this
98:04 - picker format property
98:07 - also we have this
98:10 - date time data which can be used
98:14 - to basically handling daytime values
98:17 - within javascript or in html so
98:20 - basically go to these uh
98:22 - sample and you can see what's available
98:25 - to you and what you can do
98:28 - if i go all the way down we have some
98:30 - minion max date times
98:33 - for example you want to define what's
98:36 - the minimum date here
98:39 - what's the maximum
98:40 - so if i go here and i'll just do let's
98:43 - just say min
98:45 - is equal to let's just say two zero one
98:47 - five and before i save it i wanna test
98:50 - it so i'll just uh do three
98:53 - yy
98:54 - two more y so we could see that here in
98:57 - uh basically four
99:00 - digits so i'll save it and wait for it
99:03 - to restart
99:04 - and i click on this and now i can see
99:08 - i can only pick from 2015
99:11 - not
99:12 - before 2015 because i've defined this
99:15 - property min
99:16 - and similarly i can define the property
99:20 - max as well so right now max is 2018 but
99:23 - i can define
99:24 - max is equal to let me go and find so
99:27 - that's the date we can do copy
99:31 - and we can paste it
99:33 - and here i want to say okay let's just
99:36 - do 2 2 2
99:38 - 20. it's compiling
99:41 - and let's uh go to the next century guys
99:44 - so here that's the max
99:46 - and we can go all the way to
99:49 - 2015 as well
99:51 - that's a date and time picker if you go
99:54 - down you will see a lot of
99:56 - usage how you can use it and sample
99:59 - codes you have some properties the
100:01 - cancel tags
100:03 - they names so you can customize this
100:05 - this is a really cool stuff here going
100:07 - on i can't make uh everything available
100:10 - to you guys in just one video i'll do a
100:13 - separate video just covering date and
100:15 - time
100:16 - i'm gonna close this and let's go to the
100:19 - fab fab is another company which needs
100:22 - a separate video so go to grid if you
100:24 - are coming from bootstrap background you
100:26 - understand how you can define the grid
100:29 - so i'm not going to go into details
100:31 - infinite scroll is one of the
100:34 - nice component that it can be used for a
100:36 - lot of data processing so you have like
100:38 - 100 entries you can't show your 100
100:42 - entries in small screen so what do you
100:45 - do you create an infinite scroll so when
100:48 - people go all the way down
100:50 - they can basically load more data right
100:55 - we have a
100:56 - generic input fields as well so let me
100:59 - take you to
101:01 - documentation of input can we use this
101:04 - so let's go here
101:06 - and now i can show you the code snippets
101:09 - so for example we have
101:12 - this
101:13 - let's just do something like
101:15 - a floating label
101:17 - let's just do
101:20 - copy this
101:21 - and then just
101:22 - paste it
101:24 - so we're here
101:26 - let's save it and let's see what comes
101:28 - up so here we have define a label
101:31 - on label and we have input so this says
101:35 - a floating label so if i click on that
101:37 - that's the nice animation you see this
101:39 - is what
101:40 - happens so if i do
101:42 - like you know remove this
101:45 - and i save this again now i'm pretty
101:47 - sure you're not going to see that
101:49 - animation there
101:50 - so let's just go click
101:53 - and you can't click anymore because it's
101:54 - not going up so you cannot have an input
101:58 - field there so now you can see and read
102:02 - about this as well
102:04 - uh ionic
102:05 - input fields can allow text password
102:08 - number search tell
102:10 - so let's do
102:12 - a number so i'm going to change
102:16 - this to back to floating
102:19 - position and inside this ionic
102:23 - input
102:24 - i'm going to type
102:26 - type is equal to we'll do a number
102:30 - i'm going to save
102:32 - and now once i start
102:34 - tapping
102:35 - i should see
102:37 - a number picker here so you see this i
102:39 - can do
102:40 - i can pick the number from here
102:42 - that's not really natively showing you
102:46 - uh how you can type the number but once
102:48 - you open that in your mobile application
102:50 - in your mobile it will show you the
102:52 - numpad so we can do something like a
102:56 - tell
102:57 - let's just change this to
102:59 - tell and save it let's see what happens
103:02 - now
103:06 - so here i see
103:08 - i can define
103:10 - the uh alphabets also i can define a
103:13 - telephone number
103:15 - so
103:16 - yeah that's uh that's that's
103:18 - you can use all this text password email
103:21 - url and you can do a validation of that
103:23 - which i'll have a separate video right
103:26 - so i'm going to cancel out and we go to
103:28 - the next ui component
103:30 - now one of the component loading which
103:32 - is great
103:34 - so when you move around your
103:37 - applications from one page to another
103:39 - page sometimes what happens is when you
103:42 - go to the next page you have to make an
103:44 - api call which will wait for the data to
103:47 - come back
103:48 - now during the time if you don't let
103:50 - user know anything that what's happening
103:53 - if the data is coming up or not then
103:55 - that's really a bad
103:57 - uh bad thing to do to user so what do we
104:00 - do we create a loading that's we tell
104:03 - the user wait hang on a second it's
104:05 - loading the data and it's going to show
104:07 - that so click on show loading and that
104:10 - should show something like this and also
104:12 - if we go to api we can change the design
104:15 - of it as well
104:17 - so let me go
104:18 - and let's create a loading actually
104:21 - so we'll do a loading by using
104:24 - loadingcontroller
104:25 - we create that similarly an async
104:28 - function and wait and then we define a
104:32 - property duration and a message we can
104:35 - also define what kind of spin i want to
104:38 - use so let me just copy this code from
104:41 - here
104:42 - and i will go and paste it in our
104:46 - home
104:47 - page dot tst file
104:50 - let's just uh sorry ts file so here we
104:54 - don't have a loading so we're gonna go
104:55 - up there and i'm just gonna press enter
104:58 - and i'll do private
105:00 - now what was the name of that variable
105:02 - so just do a copy
105:04 - and i'll just do a paste here
105:06 - and then i'll do loading
105:11 - l o a
105:13 - link
105:15 - controller
105:16 - and that's gonna come from
105:19 - ionic
105:20 - uh
105:21 - angular as well so just paste it here
105:24 - let's save this project and also there's
105:26 - something wrong here guys so we to do is
105:29 - comma here
105:31 - when we define it
105:32 - more than one
105:35 - uh we're injecting a service
105:38 - all right let's save the project and now
105:40 - we're going to call this function
105:43 - present loading without options so let's
105:45 - copy this
105:46 - we go here we create another button
105:50 - so let me just make this
105:52 - smaller
105:54 - and just copy
105:55 - this we paste this button let's just say
105:59 - loading
106:00 - action
106:01 - and we paste that oops no we need to go
106:03 - back i'm just going to copy
106:06 - this let's go back here
106:09 - and paste it here let's save the project
106:12 - and let's call this function and let's
106:14 - see if we see the loading or not so if i
106:16 - click on loading that should give me
106:18 - this loading here it says
106:23 - loading we have a spinner hide duration
106:26 - five seconds message please wait it's a
106:29 - transplant true if there's any css
106:31 - custom box i'm just gonna remove the css
106:33 - custom class
106:34 - and i'm gonna remove this
106:36 - as well but let's try to find out what
106:39 - are the nice
106:40 - uh
106:41 - what is nice loading available for us
106:45 - so we'll go here we have this uh
106:48 - something like
106:50 - okay here goes we have a spinner
106:52 - property and we can do lines
106:55 - align small
106:56 - dot
106:57 - circle bubbles let's do a bubble
107:00 - and then we do
107:02 - paste a bubble here
107:04 - and let's just compile
107:07 - and then refresh the page let's click
107:10 - here and then there you go that's the
107:12 - bubble now we see the bubbles here
107:14 - so if we want to change this to let's
107:16 - just say
107:18 - dots let's copy this
107:21 - and let's just paste it
107:24 - here and save it
107:26 - and we should see a reload on the page
107:30 - and i'm going to click on that and we
107:32 - have dots now so you see how cool
107:35 - animation that can be done using loading
107:38 - let's close this you understand how to
107:40 - use it there are some methods that you
107:42 - can call on this like we did call this
107:45 - present method on the loading we can
107:47 - call a dismiss method on the loading
107:49 - which will dismiss the current unloading
107:52 - happening and the transport property was
107:54 - there by default so i say if true the
107:56 - loading indicator will be transco uh
107:59 - translucent
108:00 - uh defaults to false yeah so that's
108:03 - makes sense
108:04 - we have a mode we can define if it's a
108:06 - ios motor
108:08 - md mode let's try that so do
108:12 - more i do md
108:14 - and add a comma here
108:16 - let's save it and let's take a look if
108:19 - the mod makes any change to our ui of
108:22 - loading let's click on that now we are
108:25 - we're seeing a rectangular loading box
108:28 - which is good now it's not transcoded so
108:31 - we do something like
108:33 - transferred and then we do
108:35 - to true
108:38 - true let's just do comma here
108:41 - let's save it
108:42 - and then we should see a reload
108:46 - let's just click on that and now we have
108:48 - some sort of transco and
108:50 - translucent
108:52 - so let's go back i'm gonna close loading
108:55 - let's go and let's skip menu and let's
108:58 - skip the model as well and also let's
109:01 - skip the navigation because that's a bit
109:03 - of lengthy process
109:05 - lengthy uh compliment to explain
109:07 - we will pop over that's just like a top
109:10 - header which basically sees
109:13 - what's happening underneath so if i go
109:16 - down you see this uh text underneath
109:19 - we have a range sometimes you want to
109:21 - increase or decrease the brightness of
109:24 - your iphone or application you can do
109:26 - this range as well and change the values
109:29 - dynamically
109:31 - refresher as i said with loader you can
109:34 - do a refresher so you tap and slide down
109:37 - and then it will load more data to it so
109:40 - you can call an event so let's go to the
109:42 - api let's take a look at what we can do
109:45 - so in the refresher refresher provides
109:48 - pull to free fresh functionality on a
109:51 - content
109:52 - component the pull to refresh pattern
109:55 - lets the user pull down on the list of
109:57 - data using touch in other in order to
110:00 - retrieve more data so we have this
110:03 - complete
110:04 - so let's take a look at the usage now so
110:07 - we will do
110:09 - all copy and paste this and definitely
110:11 - you can tell that this is going to work
110:12 - so this is what's happening ion refresh
110:16 - and then we do to refresh and pass in an
110:18 - event
110:19 - in our uh ts file we have this function
110:23 - do refresh and then set timer to 2000 so
110:27 - this is how you can do a refresh and
110:29 - then do your logic in this
110:32 - refresh function
110:34 - okay so there are some
110:36 - properties available for that as well
110:38 - you can play with them we have something
110:41 - called cancel complete and get process
110:44 - function and they actually all makes
110:47 - sense by the name of the function for
110:49 - example cancel it changes the refreshes
110:52 - state from refreshing to cancelling
110:54 - that's okay
110:55 - complete call complete when your async
110:58 - operation has completed for example the
111:00 - refreshing state
111:02 - is while the app is performing an x
111:04 - increase function so you can call this
111:06 - function
111:07 - as well get process makes really sense
111:10 - straightforward sense so let's uh cancel
111:13 - out and then we go to search bar pretty
111:16 - simple guys search but it's just you
111:18 - know
111:19 - search bar which can do some filtering
111:21 - as well and ionic basically provides an
111:23 - api for that as well
111:25 - a select a select is something that you
111:28 - click and then you have an option to
111:30 - select right so we have a december we
111:33 - have two options to select it's
111:35 - basically a selection of two you can
111:38 - define more than two as well
111:42 - slides now slides are great when you
111:44 - have an application uh starting for the
111:47 - first time in your phone you want to be
111:49 - able to show some message or some
111:51 - tutorial to the user of that app
111:54 - so slides are great way to show that and
111:56 - a lot of application do that as well
111:59 - once you start your application for the
112:01 - first time it will show you some slides
112:03 - with nice information
112:05 - spinner we can see the screen already we
112:07 - have different types of spinner tabs we
112:10 - skip the tab because we're gonna be
112:12 - creating a separate video for tabs toast
112:15 - toss is something that will pop the
112:17 - message out for temp for uh for a
112:20 - specific amount of time
112:23 - so similar on a click event it just
112:25 - shows you some of the tools that you can
112:27 - see you can put the messages in that
112:30 - that's very straightforward
112:32 - a visual scroll same thing that you just
112:35 - go and scroll down keep scrolling up to
112:38 - where you want it
112:39 - where you want to allow uh user to
112:42 - scroll to that's good as well so i'm
112:44 - going to show you a toast api
112:46 - let's go here
112:48 - and here we can find really cool stuff
112:50 - so we have a toast here which comes from
112:52 - top to
112:53 - bottom
112:54 - we can see the properties so here we
112:57 - have a property of animated if you want
113:00 - to animate that or not so we spend we
113:02 - specify
113:04 - a property name animated and then we put
113:06 - the value it's a boolean so either it
113:09 - takes true or false
113:11 - duration we can specify the duration and
113:13 - after distribution
113:15 - the
113:16 - uh
113:18 - what you call this uh
113:20 - yeah
113:21 - iron toast will be dismissed okay remote
113:24 - oval index position that you can define
113:27 - top middle bottom if we have this
113:29 - it's in the middle we have a top we have
113:31 - a bottom so you can define those
113:33 - positions by defining a position
113:35 - property and giving a value either top
113:38 - middle or bottom
113:40 - the show close button if you have a
113:42 - close button there then you can
113:44 - basically show a close button
113:47 - it doesn't show here but you can define
113:49 - a show button so by default default
113:51 - because you won't see a close button
113:53 - here uh right that's we have some events
113:56 - as well we got method similar to other
113:59 - ui company the president will present
114:01 - this
114:02 - uh toast
114:03 - on will dismiss a return the promise
114:05 - that resolves when the toast will
114:07 - dismiss this piece actually dismisses
114:09 - the toes
114:10 - and we have some custom proper cs
114:12 - properties as well which we can use to
114:13 - customize the layout or
114:16 - look off that toast
114:18 - so we pretty much covered all the basic
114:21 - ui components and you understand how to
114:23 - use them by going and reading about the
114:26 - documentation in i api page that can
114:30 - help you how you can customize those
114:32 - components
114:33 - all right so in the next video we are
114:35 - going to create
114:37 - a
114:37 - layout with tabs and also with a sidebar
114:45 - so so far we have done about nine videos
114:48 - of ionic so i think this is the right
114:51 - time we will use all that knowledge and
114:55 - create a ui for our project
114:58 - so let me show you what we're going to
115:00 - be creating in this video we're going to
115:02 - be creating this tab bar and also this
115:06 - tab bar
115:08 - ui has
115:09 - a sidebar as well so
115:12 - type and sidebar is implemented in this
115:15 - ui so we click here we see the sidebar
115:19 - we can go and click on that menu and go
115:21 - to the next page or we can switch
115:24 - between these pages as well also we have
115:27 - this nice action
115:29 - uh sheet implemented here so
115:33 - having tab bar and a side menu side by
115:35 - side it's quite complicated in ionic 4.
115:39 - so before we start a video guys i want
115:41 - to show you guys my javascript course
115:44 - which is available on udemy i'll drop a
115:48 - link of that course in the description
115:50 - below with the coupon which will give
115:52 - you about 70
115:53 - off so please have a look if you're
115:56 - interested in learning javascript let's
115:58 - get started building this ui using ionic
116:01 - 4 which includes a tab bar and a sidebar
116:04 - side by side all right guys let's go and
116:07 - create a new project we'll use a blank
116:10 - template and we'll work from blank
116:12 - templates so we know everything which it
116:14 - takes to build that user interface
116:17 - so let me just increase the font size
116:19 - here so i'll do ionic start and i'll do
116:23 - dash dash type would be
116:25 - angular and let's name our project ionic
116:29 - tutorial
116:30 - and then we're gonna use a blank
116:32 - template
116:34 - let's integrate cordova
116:36 - and that's about it it's gonna take two
116:38 - seconds before it generates a project
116:40 - and after that we're gonna open that
116:42 - product in webstorm
116:44 - so now let's take a look at the blank
116:47 - project
116:48 - so we've already seen that a few times
116:51 - but this tutorial is gonna be i'm gonna
116:52 - just you know be quick as possible to
116:55 - create this ui
116:57 - so let's go to the app and here we have
117:00 - a main component app and also we have a
117:03 - home component
117:04 - let's go to the terminal and start our
117:07 - application so ionic
117:09 - serve dash l it's gonna ask me if i want
117:12 - to install ionic lab which i'll say yes
117:15 - please install
117:16 - and then it's gonna open the app in the
117:19 - browser right so we have this app up and
117:21 - running so first of all we're gonna go
117:23 - and implement
117:25 - a sidebar
117:26 - so to implement sidebar we're gonna go
117:29 - to app component
117:31 - and i'm just gonna decrease the size
117:33 - here
117:34 - and let's just do
117:36 - okay so in app component
117:39 - we're going to define the list of
117:42 - the side menu we need
117:45 - so i will create
117:48 - a variable here
117:50 - and i'll name it public and i'll say app
117:54 - menu
117:59 - so we create a variable
118:01 - which is an array and it lists out three
118:04 - objects which we'll use to generate our
118:07 - side menu all right so let's go to app
118:09 - component html file
118:12 - and inside this file
118:14 - i'm going to start writing
118:16 - ionic
118:18 - split
118:20 - pane
118:22 - so we have a ionic split pane which will
118:24 - have like a split pane there if you are
118:28 - a developer or you have worked on that
118:30 - you should be able to familiar with that
118:33 - so we have ionic split pane
118:35 - and also inside this we want to create
118:37 - ion
118:39 - menu and inside the menu we will have a
118:42 - toolbar
118:43 - so ion uh menu let's go ion header first
118:49 - so we have
118:50 - header
118:52 - inside
118:53 - this we'll have
118:55 - toolbar
118:57 - and inside the toolbar we'll have
119:00 - ion title which will have
119:04 - tile as a menu bar so inside this we got
119:06 - the ion menu we got this ion header we
119:11 - got our toolbar and inside our toolbar
119:14 - we wrote ion menu
119:16 - let's get out from the header and then
119:19 - we do ion content
119:22 - so we do ion content and inside this we
119:26 - want to create ion list
119:28 - and inside the list we'll do i on dot
119:32 - menu
119:34 - uh dash
119:36 - toggle
119:37 - we do auto hide here yep let's do auto
119:41 - hide we set that to false and then we do
119:45 - ng
119:47 - 4
119:48 - let's do a stir here in g4
119:52 - is equal to let p
119:54 - of
119:56 - let's what is the name of the variable
119:58 - that we created that was app menu
120:01 - let's go back to app component and here
120:04 - we do
120:06 - add menu
120:08 - and then
120:09 - we'll just
120:10 - uh let's just uh
120:13 - do
120:14 - something let's just use something here
120:16 - now to do ion
120:19 - item
120:20 - and then we want to have this uh
120:23 - router
120:25 - direction
120:26 - implemented
120:28 - that we set is equal to
120:30 - root
120:32 - also
120:33 - the router link
120:34 - so the router
120:37 - link
120:40 - is equal to
120:42 - and here we want to use
120:44 - this as p dot url that's gonna be
120:48 - our uh url link
120:51 - so that's uh
120:53 - that's our ion item
120:55 - inside this ion item
120:59 - we want to have
121:00 - a label so ion
121:03 - label
121:04 - that can be
121:06 - p dot label or title actually
121:10 - yes that's the one
121:12 - let's save everything and also the last
121:14 - thing we want to do is we want to move
121:16 - this ion router
121:18 - outlet to
121:19 - inside
121:21 - this ion split plane and here we want to
121:24 - type main we set that on router outlet
121:27 - main so we'll save
121:30 - this and now let's go through so
121:32 - basically we have an ion app
121:34 - we have an ion split
121:37 - pane
121:38 - we have ion
121:40 - menu
121:41 - and then
121:42 - inside our iron menu we have ion header
121:45 - inside iron header we have our iron
121:47 - toolbar and then the title and then we
121:50 - did on content we created eye on list
121:53 - menu toggle and then inside the many
121:56 - toggle we created an ion item and then
121:59 - we defined the router direction to root
122:02 - and also write a link to
122:04 - p dot url
122:06 - and then we close this we close the list
122:09 - we got this ion router module inside uh
122:13 - ion split pane and then we define this
122:16 - property main to our router module let's
122:19 - go and save this
122:21 - and once we save this you see there's
122:23 - nothing happened
122:25 - the reason why we define all this in
122:28 - app.component but we have not defined
122:32 - this into home page because when the
122:34 - application start
122:36 - through lazy loading it automatically
122:38 - goes to the home module and it opened up
122:40 - this home component if you look at the
122:43 - routing module you see that if there's
122:45 - no part it'll go to the home so let's go
122:47 - and use this
122:49 - menu to the home
122:51 - so let's go in ion title
122:54 - we do something like
122:57 - our ion header and ion
122:59 - toolbar we will use
123:02 - say ion dash
123:05 - buttons
123:06 - we do a slot of let's just say start so
123:09 - we're going to push the button to the
123:11 - left right
123:12 - so let's uh close this and inside this
123:15 - we just use iron
123:17 - menu
123:18 - button that's it we save
123:21 - and let's see what we have
123:24 - so bo
123:25 - not bo we actually have a bu there let's
123:29 - save it again let's
123:31 - uh let it compile and we should see on
123:35 - menu so here you can see we have this we
123:37 - click on this and it opens up and we
123:39 - have this title
123:40 - we have this text 2 we have this test 3.
123:45 - there we go so we created our uh menu
123:48 - successfully now we can do some
123:51 - menu customization here i want to go
123:53 - back to app component and here
123:56 - we can say
123:57 - that type
123:59 - would be
124:00 - overlay so let's save this and let's
124:03 - take a look at
124:04 - one it gets compiled
124:07 - and here we'll click and you see this
124:09 - overlay here now so we're getting like
124:11 - uh basically a backdrop side of effect
124:14 - when your menu opens also we can define
124:17 - icons here as well so in ion item we can
124:21 - have uh let's just say inside
124:25 - this iron item i want to do ion dot icon
124:28 - and then
124:29 - the icon would be
124:33 - uh let me just square that so icon can
124:35 - be
124:36 - uh from
124:38 - the object as well so we'll do
124:42 - a slot first
124:43 - we set that to start and then
124:46 - name of that
124:48 - let's just do
124:50 - from p dot icon
124:53 - let's save it
124:55 - and now let's take a look at what do we
124:57 - get so i'm just going to make it smaller
124:59 - now guys i think it's already very big
125:02 - so let's click here and then here we can
125:04 - see we can we are loading icons
125:07 - dynamically from our object
125:11 - all right so now we have successfully
125:13 - done our sidebar menu let's work on a
125:16 - tab bar
125:18 - so for that i'm going to generate
125:21 - a new module so i'll do ionic
125:24 - generate and i'll use this as let's just
125:28 - say a module should be fine okay and
125:31 - then we'll name as tabs it's going to go
125:34 - and generate a module in the tab there
125:37 - you go we have a module there now inside
125:40 - this we're going to create another
125:43 - uh routing module so i'll do
125:46 - ionic
125:47 - g
125:48 - module dash dash
125:50 - routing
125:52 - and then we do
125:54 - tabs
125:55 - and let's take a look at if it generates
125:57 - a tabs a routing module it says could
125:59 - not generate module it already exists
126:03 - okay that's fine
126:04 - but let me just get rid of this
126:08 - okay
126:09 - we will look at our routing module
126:11 - that's not there that's cool
126:13 - app module that in there as well that is
126:16 - cool as well so we do
126:18 - unit generate module dash dash routing
126:20 - so what it will do it will basically
126:24 - uh
126:25 - generate
126:26 - a module
126:27 - with routing as well so here you can see
126:30 - we have a module
126:32 - okay and then it automatically imports
126:35 - tabs around your module
126:37 - which we have here and most of the work
126:40 - we're going to be doing in this tab a
126:42 - routing module but for that we're going
126:45 - to need another uh ts file that is
126:49 - basically is going to help us to you
126:51 - know
126:52 - do all the ui stuff and also
126:55 - we can generate a fab module as well
126:58 - so what i'm going to do here i'm going
127:01 - to create
127:02 - a
127:03 - file so we'll do do generate and dash
127:06 - dash flat
127:09 - and then i'll do
127:11 - a component
127:14 - and then we do tabs slash tabs
127:18 - now let's take a look so now we got a
127:21 - module let's take a look at the routing
127:22 - module let's look at the module that's
127:24 - cool we got
127:27 - tabs.component file as well
127:29 - we have a tabs component file there as
127:32 - well
127:33 - so that's cool guys now we can start
127:35 - working on our tabs so first of all
127:38 - let's just go in the writing module and
127:40 - here we want to define some sort of
127:43 - routing
127:44 - [Music]
127:54 - after that we want to make sure that our
127:57 - tab
127:59 - component is available in tabs.module
128:02 - file
128:03 - so in the declaration we're going to
128:05 - have to have
128:07 - component
128:09 - injected
128:10 - so i'm going to save the file and now
128:12 - we're going to go to
128:13 - tabs that component html file and right
128:17 - over ion tabs
128:20 - here i'm just going to make the size
128:21 - bigger first of all we'll do ion
128:24 - tabs
128:26 - and then ion dot tab
128:29 - now in the tab we're going to have some
128:32 - properties of let's say attributes first
128:35 - of all what would be the label so we'll
128:37 - do a label let's just say
128:40 - dashboard
128:42 - right
128:43 - and then we're gonna do an icon as well
128:46 - so here we'll do let's just say home
128:48 - icon for now now here we're going to do
128:51 - an href is equal to
128:53 - that would be tabs slash
128:57 - home column home
128:59 - okay now inside the tabs we want to have
129:03 - a router as well so if you remember in
129:06 - the tab so in the tab writing module we
129:08 - defined
129:10 - outlet so name was home
129:13 - so we simply go and say
129:15 - ion
129:17 - router dash outlet
129:20 - and then in there
129:22 - we want to have a name which set to the
129:25 - same name where we want to go to
129:27 - i'm going to save the tab file and after
129:30 - compiling the project you should be able
129:33 - to see the tab so here we have a home
129:36 - dashboard tab
129:38 - so let's go and generate some more
129:41 - modules so we're going to go to the
129:42 - terminal here
129:44 - and i'm going to
129:45 - generate
129:47 - a page
129:49 - so
129:50 - we'll do
129:51 - let's just say a page
129:56 - select the page and we'll do
129:58 - about us page
130:01 - right it'll generate all the things that
130:03 - we need then we do we generate another
130:06 - page uh
130:08 - let's just say
130:09 - contact
130:11 - okay as you can see we have two page
130:13 - about and contact
130:15 - and now we're gonna inject that to
130:18 - routing module
130:19 - so here we have
130:21 - two pages
130:23 - uh
130:24 - about us and contact
130:26 - so we basically don't want to do that
130:29 - here because we're not going to
130:31 - target them from our product module so
130:34 - we just want to
130:36 - control x sorry we just want to
130:39 - move
130:40 - both
130:43 - and then paste them into tabs
130:46 - rounding module
130:47 - and now here
130:49 - we are going to define some more part
130:52 - here so let's just uh take a look at a
130:54 - couple more things the home page
130:57 - is basically coming from this part let's
131:00 - go to app module and then first of all
131:03 - let's import those module here
131:06 - so we do about
131:09 - let's just say
131:10 - about us
131:12 - module
131:14 - and then we have our contact
131:17 - page module
131:19 - so we got two modules there
131:22 - now we go app routing
131:24 - so now let's uh copy paste
131:27 - this copy
131:29 - and then paste this
131:31 - twice
131:32 - and that would be let's just say about
131:37 - and then we have
131:38 - about
131:40 - that would be about page as well
131:43 - okay so basically we're saying part is
131:46 - about
131:47 - and outlet is about and the company
131:49 - we're gonna target
131:50 - is about us page as we imported
131:53 - our module into the tab module so we can
131:56 - target that now here we can say
131:59 - contact
132:01 - and then
132:02 - contact
132:04 - and that would be
132:05 - a contact
132:06 - page
132:08 - right
132:09 - i'm going to go to
132:11 - uh
132:12 - tab.component and here i want to make a
132:15 - copy of these
132:17 - so let's just do a copy of these this is
132:20 - going to be
132:22 - about
132:23 - icon is going to be about
132:25 - this is going to be about the time and
132:28 - now here we're going to go to tabs so
132:31 - here in the routing tabs running modules
132:33 - we have this wedding the part is tabs
132:36 - and then that's the tab component which
132:39 - we basically having that the same folder
132:42 - the children of those is this
132:44 - we have children about us page and a
132:47 - children is a contact page and the
132:49 - reason why we can access this here is
132:52 - because we have imported both modules in
132:56 - our tab
132:57 - module so here we want to go to
133:00 - let's go back to here and here we want
133:03 - to do
133:04 - tab slash
133:05 - about
133:07 - about here want to do
133:10 - contact
133:12 - and
133:14 - contact
133:15 - let me make it a bit smaller
133:17 - let's just do
133:19 - contact
133:20 - icon let's just do a contact
133:23 - and then
133:25 - contact as
133:27 - a router model so i'm going to save the
133:28 - project now
133:30 - and you will notice after getting
133:32 - compiled that you will have
133:34 - about and above so if i click on about
133:37 - it will take me to contact page i'm
133:39 - going to go change this to
133:43 - con
133:43 - tagged
133:45 - and now the icon is not available there
133:47 - so i'll just do
133:49 - uh chart
133:51 - okay i want to do the pie here
133:54 - that's just this random thing
133:56 - okay i'm going to save the project
133:59 - and now we can see we have about
134:02 - click here it takes us to about us page
134:04 - click here it takes us to contact page
134:07 - click here it takes us to dashboard page
134:10 - now within those pages if we want to see
134:14 - uh a menu bar so we go to about page
134:18 - and in the tool bar we do ion dash
134:24 - buttons
134:26 - and then we do ion dash menu
134:30 - uh
134:34 - button okay let me just make it bigger
134:37 - so see we have an ion menu button and
134:40 - inside ion button so save it
134:43 - and now let's go to about page and we
134:46 - should see
134:48 - this sidebar there as well so you have
134:50 - the sidebar there we should be able to
134:52 - see the same sidebar here now the same
134:55 - thing we're going to copy
134:57 - this and we're going to go to contact
134:59 - page
135:00 - and let's just do a paste here
135:04 - in the toolbar
135:05 - let's just save it
135:07 - and now
135:08 - our tabs
135:10 - and
135:11 - sidebar menu is working so here we go
135:13 - contact page we have a sidebar menu if
135:17 - we go to a bonus page we have a sidebar
135:19 - menu so just to show you guys that this
135:21 - is right so here we are at uh contact
135:24 - page
135:25 - i'll do
135:27 - h5 and say
135:29 - this
135:30 - this is the
135:32 - contact
135:33 - page
135:34 - and then i'm going to
135:37 - just copy these we're going to go to
135:40 - about page i'm going to paste that
135:43 - here as well i'm going to say
135:46 - about page let's save the project and
135:48 - let's take a look if we're actually
135:51 - moving to different pages now so here we
135:54 - are in the about page
135:56 - we can go to dashboard
135:58 - we can go to contact page here you can
136:00 - see we have this menu bar as well so
136:03 - this is how you can create
136:06 - uh an application using uh an
136:09 - application with tabs and also the
136:11 - sidebar menu now if you want to start
136:14 - your application
136:15 - with this kind of uh layout then you can
136:19 - download this from my github it's just
136:22 - gonna be you're gonna clone
136:24 - the repository and there you go you
136:26 - don't have to worry about adding all
136:29 - this boilerplate code so you got this on
136:33 - my github account and i'll share the
136:35 - link with you guys as well
136:37 - all right so this is how you can create
136:39 - a tab
136:40 - plus a sidebar menu using ionic 4.
136:47 - i'm going to be showing you a cool trick
136:49 - in ionic
136:50 - so i started building an application
136:52 - using ionic framework recently
136:55 - and i really liked it but there were a
136:57 - few things that i wanted to to enable
137:01 - for me to build up faster in ionic
137:04 - so the first thing
137:06 - i would like to show you that how you
137:08 - can debug your application right in your
137:12 - ide whether it's a webstorm or it's a vs
137:15 - code we'll look at a webstorm in this
137:17 - video
137:18 - also i would like to show you that how
137:21 - you enable cordova in your browser so
137:24 - you can start debugging
137:26 - while having her
137:28 - enabled
137:30 - there were few things that was not
137:32 - really working
137:34 - so i had to find a trick or a way to fix
137:37 - that let's take a look at the problem
137:39 - first so if i will go and start this out
137:42 - with ionic serve
137:44 - that will uh open my browser which you
137:47 - can see on the right and it will start
137:49 - the application
137:52 - so new application incident has been
137:53 - started so i'm going to login
137:56 - with one of the email address that i
137:58 - signed up with before and i'm going to
138:01 - say the password would be whatever the
138:04 - password i typed in now if i click on
138:06 - login it's not logging in so let's take
138:08 - a look at the browser
138:10 - developer tools and i'm just going to
138:12 - push that
138:14 - a little bit to the left
138:16 - and now the error we're getting is it
138:18 - says cordova not enabled
138:21 - uh error in sign in going to tabs page
138:24 - okay so what happening is when you use
138:27 - ionix and native api basically ionic has
138:31 - an api which lets you access the device
138:34 - hardware for example if you want to
138:37 - access the camera on your iphone using
138:39 - ionic framework you're going to have to
138:41 - have a cordova plugin installed so you
138:43 - could access that hardware so if you
138:46 - don't have a kudova enabled in your
138:49 - browser you can't do that so this this
138:52 - is the one problem another thing
138:54 - that to fix it you could emulate with
138:56 - the browser so for example i will go and
139:00 - i stop this i'll say ionic
139:02 - cordova
139:06 - amulet
139:07 - browser
139:09 - now emulating on a browser will fix this
139:12 - cordova problem but there is another
139:14 - problem with emulating browser
139:17 - which is you cannot live reload so
139:20 - whenever i change my code it should
139:23 - reload the browser automatically and let
139:26 - me see the changes
139:28 - that doesn't happen when you do ionic
139:30 - cordova emulate browser
139:33 - it does not really provide that
139:36 - so
139:36 - that's the problem
139:39 - so right now if you look at the terminal
139:41 - it's actually adding cordova plugins to
139:44 - the build so you can start the browser
139:46 - with cordova installed
139:49 - it's taking a bit of time at the when
139:51 - you start the first time
139:53 - so i'm just going to pause the video and
139:54 - come back when it's done
139:57 - okay so ammo loading is started now i
140:00 - can see in the console
140:03 - i can log in so if i go to for example
140:06 - always at gmail.com
140:09 - i'll go
140:10 - type the password and i enter
140:13 - and now i can log into the app and here
140:15 - i can see there's no cordova issue
140:18 - anywhere i can use uh firebase plugin i
140:21 - can use any external plugin which is
140:24 - required
140:25 - cordova so let me go and sign out and
140:28 - let's go back so right now if i would
140:31 - like to debug this page which is running
140:33 - on localhost 8000 i'm going to copy this
140:37 - and i'm going to go and edit the
140:38 - debugging configuration here so i'll
140:40 - just go and paste it here apply okay now
140:44 - if i start the debugger
140:48 - and i try to sign in
140:50 - and here i want to do a breakpoint so if
140:53 - i click here this is very init app and
140:56 - i'll refresh this you can see i can have
140:59 - this debugging enabled right
141:03 - because our server was running 8 000
141:06 - so
141:06 - this is good but i won't be able to live
141:09 - reload my application for example if i
141:12 - let it go and if i go to any of the page
141:16 - for example login page and i change the
141:18 - name here from login to let's just abc
141:22 - and i save
141:23 - and now you can see it actually broke
141:26 - the application it did not reload
141:29 - automatically so i'm gonna stop the
141:30 - debugger guys and well let's go back to
141:33 - this ionic serve and let's go to the
141:36 - terminal uh let's go here i'm gonna stop
141:39 - the server i'm going to simply say ionic
141:42 - serve
141:43 - and that should open the browser again
141:45 - and it should give me a cordova error
141:48 - but i will be able to live reload my
141:51 - application let's take a look
141:53 - uh so
141:54 - i'm just gonna
141:56 - close these tabs and here you can see i
141:58 - have abc now so if i go change this back
142:02 - to
142:03 - login and i
142:04 - hit command s on a mac and i can see
142:07 - it's building and it's reloading uh the
142:10 - application now i want to have a cordova
142:12 - enabled here so how do we do that
142:15 - is
142:16 - uh is applying this trick so what i'll
142:18 - do i'll go to this platform
142:20 - where i actually build
142:22 - uh if you do ionic cordova
142:25 - platform add browser and also you do
142:28 - ionic cordova build browser you'll get
142:31 - this folder in the platform so what i'll
142:34 - do i'll just copy this www folder
142:38 - and i go back and i just right click on
142:40 - the the parent folder which is xp logo
142:43 - right now and i'll do just paste here
142:46 - and i'm going to click ok and it'll tell
142:48 - me okay you have the same names uh in
142:50 - the folder which is basically having the
142:53 - same numbers in the in the next folder
142:55 - where you're copying so i'm just gonna
142:56 - do override for all
142:59 - now once i override everything uh i
143:01 - would see
143:03 - that in our
143:05 - www folder which is used to to launch
143:09 - your application when you do ionix serve
143:11 - i'm gonna just
143:13 - expand that and here now i have a
143:15 - cordova
143:17 - before i did not have a cordova because
143:20 - when you do ionix sub it does not really
143:22 - add cordova stuff into www folder so
143:25 - what i did was i applied
143:27 - a trick here where i emulated or build a
143:31 - browser project and i copied over this
143:34 - ionic
143:35 - i copied over to www folder
143:38 - so now if i go and start our application
143:43 - with ionic serve
143:45 - and i should not see a cordova error
143:48 - anymore let me just uh hang in a second
143:51 - it will start the browser one once it
143:54 - saw let's go to the console and take a
143:55 - look at the app
143:58 - okay so now this is running through
144:00 - ionic serve and it's live reload is
144:03 - enabled because it's from ionic so so
144:06 - let's take a little console
144:07 - yeah right i don't have any errors
144:09 - anymore can i log in using this firebase
144:12 - so i'll just do
144:14 - at
144:15 - gmail.com i'll do password
144:18 - press enter and there you go the cordova
144:21 - is enabled and it's working now anytime
144:24 - i make any change so let me go log out
144:28 - and let's close this
144:31 - and we have a cordova enabled and i can
144:33 - do
144:34 - a live reload as well so do
144:36 - command s and there you go it's updating
144:39 - the application
144:40 - on the fly with live reload feature and
144:44 - also you have a cordova enabled so the
144:46 - only time you will have to copy this
144:50 - platform www folder and override the
144:52 - outdoor w folder when you have another
144:56 - new plugin installed from cordova for
144:58 - example you go and install a camera
145:00 - plugin which were not available before
145:03 - in your application then you will have
145:05 - to build a browser project and copy the
145:07 - cordova or wwe folder into the outer wl
145:11 - folders right now if i just go and
145:13 - delete this folder lastly we check
145:16 - okay so i'm just gonna go and let's just
145:18 - delete this folder
145:20 - right you can see that it was it had a
145:23 - cordova there but now if i do ionic
145:26 - serve it will build this www folder for
145:29 - me but it will not have that cordova
145:32 - stuff in it let's take a look so it's
145:34 - building
145:35 - uh there you go so right now we can see
145:39 - we have
145:40 - uh assets bill index.html
145:44 - and our indexed html is actually
145:46 - expecting this
145:48 - cordova.js which is not available there
145:51 - right
145:52 - so what i'll do i'll just go to platform
145:55 - and take a look at what we have in this
145:57 - folder so the difference between this
145:59 - folder and this wallet had this
146:01 - cordova.js source files a plugin folder
146:05 - also js
146:06 - credible.js file and then cordova
146:08 - plugin.js
146:09 - so if you copy over these three folders
146:12 - and files then it will start working
146:14 - with cordova enabled in application and
146:16 - that was a cool trick i tried to
146:18 - research online a lot how to enable
146:21 - a live reload in browser emulation but i
146:24 - couldn't find any and i came to know
146:26 - that this is not enabled by ionic team
146:29 - so i figured out this trick that you
146:31 - could apply and you can this is just a
146:33 - workaround
146:37 - we're going to talk about ionic native
146:39 - so ionic native is uh is basically a
146:42 - wrapper for cordova plug-in that makes
146:45 - adding native functionality to ionic app
146:48 - easy
146:49 - so you can use
146:51 - a lot of
146:52 - native stuff by using ionic native
146:56 - for example you might want to access the
146:59 - camera on your device so you can go and
147:02 - use a camera plug-in
147:04 - you want to maybe use uh for example you
147:08 - want to use a date picker you can do
147:10 - that
147:11 - so there's a lot of things available
147:13 - here pretty much everything you require
147:15 - to build a new app
147:17 - now today we're going to be using native
147:20 - swords a lot of times you will need to
147:22 - store some information to your local
147:25 - device so if you are running your
147:27 - application on iphone you might want to
147:30 - store something to iphone so for that
147:32 - we're going to be using a native
147:35 - storage api it's a native storage api
147:38 - variable uh stores are variables in
147:41 - android and ios
147:43 - so i'm going to take you to webstorm and
147:46 - app that we have it's a blank template
147:48 - and we're going to install a native
147:50 - storage uh
147:52 - plugin
147:54 - so here this is an app running so we
147:56 - have a input field save we have a get
148:00 - button
148:01 - so we can basically save something to
148:03 - native storage and then get it back
148:06 - so what i want to do is i want to stop
148:09 - the browser and i want to emulate these
148:12 - uh to the iphone emulators so we're
148:15 - going to go and type in a terminal ionic
148:18 - emulate or we can say ionic cordova
148:21 - emulate ios dash
148:24 - target and i'm going to define
148:27 - iphone
148:29 - let's just say iphone 8
148:31 - okay now it's going to take some time
148:33 - and build my project let me take you
148:35 - back to ionic native and we can look at
148:38 - the documentation here
148:40 - so here you can see you can install
148:42 - clever plugin by just typing this
148:43 - command into terminal which will go and
148:45 - grab cordova plug-in for you and then
148:48 - you can install npn install ionic native
148:51 - native storage
148:52 - at beta
148:55 - now i give you an example how you can
148:57 - use this uh native plugin
149:00 - which basically makes your life very
149:02 - very easy
149:04 - i'm gonna be making couple of videos
149:07 - just to show you guys some
149:09 - some tricky native plugins that require
149:12 - some instruction but
149:15 - pretty much all of these you can use by
149:17 - just going to their api
149:20 - documentation and look at this usage
149:24 - section which will pretty much explain
149:26 - to you how you can use this api and how
149:30 - uh you can customize it it'll tell you
149:31 - everything about this basically so we'll
149:34 - go to
149:35 - native storage where it was here and
149:38 - let's take a look at our emulator hasn't
149:42 - started yet so i'll do i'll just copy
149:45 - this line of code here
149:48 - and i'm just going to go and paste this
149:50 - into a terminal let me just copy this
149:52 - i'm going to wait for terminal uh wait
149:54 - for emulator to start
149:57 - whatever has started i can see the same
149:59 - app running in the emulator now
150:02 - so you're going to have to use
150:05 - cordova of if you want to uh use native
150:09 - plugins in your browser and you might
150:11 - have to do ionic cordova amoled browser
150:14 - instead of using just ionic serve so now
150:17 - i have these two functions
150:19 - save to native and get from native so
150:22 - what i'm going to do i'm going to type
150:24 - something here and i'm going to save
150:26 - that
150:26 - to a native storage and i'm going to
150:29 - click on get button and i want to get it
150:31 - back and just show that here
150:33 - the next thing you want to do is you
150:35 - want to grab these two commands and
150:38 - paste them into terminal and install
150:40 - code over plugin and also install ionic
150:43 - native native storage i want to install
150:46 - those so i'm going to go to a usage
150:48 - section now
150:49 - here you can use this function to set
150:53 - items and you can use this function to
150:56 - get items i've already written those i
150:59 - paste them and configure them so we'll
151:01 - go to home.ts file and here you can see
151:05 - we have imported first of all this
151:07 - native storage from native storage ngrx
151:11 - as this usage said
151:13 - and also i've added that constructor
151:15 - function here and implement the native
151:17 - storage into the constructor function
151:19 - then we have a title and then save to
151:21 - native and get from native so this is
151:23 - the function that you write and also
151:25 - what i want to do is when i save this a
151:27 - title key when i'm getting back i want
151:30 - to get back data.title
151:33 - also the app won't work because you have
151:35 - to inject this
151:37 - native storage into your module so we're
151:40 - going to go to
151:41 - app.module.ts file and in the providers
151:44 - i'm just going to type a native storage
151:47 - so we'll just do
151:50 - native
151:51 - storage
151:53 - and add a comma here let's save it now
151:56 - here it's causing an issue because it's
151:58 - coming from native storage uh net soils
152:01 - one on ng
152:02 - and ngx as well
152:05 - and now once type ngx let's save the
152:07 - project and you will see our lab app
152:11 - will be back
152:13 - on so here
152:14 - now i want to type
152:16 - hello
152:18 - what are you doing and i'm going to save
152:21 - this and this time i'm going to just
152:23 - remove
152:24 - this
152:25 - uh text with an input field and i want
152:27 - to say gibberish and when i click on
152:30 - this a get
152:32 - and then this method will be executed so
152:35 - it will go and get me a title key from a
152:37 - native storage so if i click on it i
152:39 - should get back to what's going on click
152:41 - on that there you go so you have a hello
152:43 - what's going on all right guys so this
152:45 - is how you store
152:47 - a values into your native storage
152:49 - whether it's iphone or it's android all
152:51 - you got to do is just use native storage
152:53 - and it's just an object that gets stored
152:55 - in ios and android and even the windows
152:57 - as well
153:01 - today i'm going to be showing you how
153:03 - you can debug your ios emulator
153:05 - running your ionic 4 application so i've
153:08 - been doing ionic 4 series so this is
153:10 - where i would like to show you guys how
153:12 - you can debug your app running on an ios
153:15 - emulator
153:16 - also you can do the same thing when
153:18 - you're running your app on your device
153:20 - using a usb
153:22 - so let's take a look at how you can
153:24 - debug it's a little bit different than
153:26 - ionic 3 debugging so first thing you
153:29 - want to do is you want to start your
153:30 - emulator you can do that by going to the
153:33 - terminal and going to your folder where
153:35 - your app is and typing command ionic
153:38 - cordova emulate ios and dash dash live
153:42 - reload if you want to live reload the
153:43 - server so for example if i hear say hey
153:46 - and then i command s
153:49 - and it will reload
153:50 - the emulator and we'll have things
153:53 - applied
153:54 - so i'm going to go back and change this
153:56 - this is what just i wanted to show you
153:57 - that you can reload your server so now
154:00 - i'm going to go and open safari so here
154:03 - i have a safari and here i'll see
154:06 - there's a menu called develop
154:08 - so if you don't see that what you want
154:10 - to do is go to safari go to preference
154:12 - and go to advanced and then here make
154:15 - sure you have enabled show develop menu
154:17 - in the menu bar and once you have that
154:20 - you close this out and then click on
154:22 - this develop tool and then click on this
154:24 - simulator and here you will see if you
154:27 - have any emulator running currently so
154:30 - you'll go to
154:31 - uh
154:32 - you will go to
154:34 - develop and go to simulator and then
154:36 - click on this 192168
154:38 - 3.192 it will open up this safari window
154:42 - and here you have everything which is
154:44 - running on your emulator so here if you
154:46 - go to the sources tab you will see a lot
154:50 - of files here and these files seems like
154:54 - that files but they have subfolder
154:56 - inside them for example right now i am
154:59 - in tabs module then i will find in the
155:02 - source app there is something called
155:04 - tabs tabs dash motor.js
155:07 - now in the code if you take a look at i
155:10 - have this app folder and i have this tab
155:13 - modules and here i'm lazy loading in the
155:17 - tab module similar to that if i look at
155:19 - here i'll go inside the tab and then
155:22 - it's inside the tab i have all the pages
155:25 - related to tabs module of all the models
155:28 - related to tabs module and now the tabs
155:31 - related to uh tabs folder which has some
155:35 - tabs files for example tabs.ts
155:38 - and also tabs of module so basically in
155:42 - ionic 3 you have to go to main.js and
155:46 - you go to next folder and then source
155:48 - and then add and here you will see every
155:50 - single thing but in ionic 4 because we
155:53 - use ionic
155:55 - lazy loading from angular now
155:57 - so angular 6 has a different kind of
156:00 - laser loading uh so we use that in ionic
156:03 - 4. that's why we have to basically load
156:06 - the module before we can see them in the
156:09 - sources tab so here you don't see a
156:10 - login nash login module so if i go to
156:13 - user tab in emulator i'll sign out and
156:16 - that will log me in log me out and show
156:19 - me this login module which is totally
156:21 - different thing so now if i look at the
156:23 - sources tab i see this login dash login
156:26 - dash module.js and here i will have all
156:29 - the files related to this so for example
156:32 - in my
156:33 - login.page.html file i should be able to
156:36 - see this sign in
156:38 - button and the text should be signed in
156:40 - so here if i go and change this let's
156:43 - just say i can't change this here
156:46 - but anyway you can see the html right
156:49 - here so if i go to
156:51 - loginpage.ts and i do a breakpoint here
156:54 - so let me just do a breakpoint here and
156:56 - also do a breakpoint here i'm going to
156:59 - go to emulator i'm going to start typing
157:02 - some email address and then try to log
157:04 - into this app and i click on sign in and
157:07 - you will see a breakpoint getting
157:09 - enabled so here i can see i'm at this
157:12 - break right now so it says this router
157:16 - dot navigate by urls it's going to take
157:18 - tabs module now so if i let it run it'll
157:21 - take me to the tabs module so you can
157:22 - see that you can uh do
157:26 - you can basically do a break find but
157:28 - you have to load that specific module to
157:31 - be able to see that in the sources
157:35 - so here i can see login now i can see
157:38 - tabs module and everything related to
157:40 - tabs modules are available
157:42 - here so let's go back
157:44 - and here i will show you some of the
157:46 - folder structure here for example in the
157:48 - tab module if i click on this routing
157:50 - file and i go okay if i go to charts
157:54 - page on the breakpoint here if you click
157:57 - on chart it should break one but it
157:59 - wouldn't because it's not calling this
158:01 - uh object again and again it's already
158:03 - called for the first time let me just
158:06 - get out and go to
158:08 - file
158:09 - and yet they go so here we have a logic
158:11 - function if i tap on this and if i click
158:14 - on click me that would just log in here
158:16 - so this is the function it calls when i
158:18 - click on clicking so here you can see
158:19 - you can log in and you can see what's
158:21 - happening here
158:26 - i'm gonna be showing you how you can
158:28 - debug your ionic 4 application
158:30 - using a webstorm websome has a great
158:34 - debugging tools this is what i'm going
158:36 - to show you in this video it's basically
158:38 - simple javascript debugging tool okay so
158:41 - i'm in the project and i have my app
158:43 - running here let me go and start the
158:45 - server i'm going to go to
158:46 - terminal and i'll say ionic
158:49 - serves
158:50 - and it's going to start the server on
158:52 - port 8100 on localhost and i can see
158:55 - there you go i have app static localhost
158:58 - 8100 now once that start i want to go
159:01 - and configure my debugger in ionic so i
159:04 - can go to tools
159:06 - and here i will have actually we can go
159:09 - from outside so here we have a debugging
159:11 - tools so i'm going to go to click here
159:14 - and click on edit configuration i'm
159:16 - going to delete one of them i have
159:18 - already so click on class and then i go
159:21 - to javascript debug
159:23 - and here i'll name it
159:25 - ionic for
159:27 - debug and i want to target the url which
159:30 - is basically login sorry localhost 8100
159:35 - so that's localhost
159:38 - colon
159:39 - 8100
159:41 - and that's it i'm going to apply that
159:42 - when i click ok and then go back to this
159:44 - edit configuration one more time and you
159:46 - can see it automatically apply this http
159:49 - colon slash slash that's fine click ok
159:53 - now here i want to click on this green
159:55 - button
159:56 - and it will start the debugger another
159:59 - thing we want to make sure that we have
160:01 - is called jetbrains ide support
160:03 - extension in chrome so if i go to new
160:06 - tab let me show you
160:08 - uh
160:08 - here
160:09 - as you can see here it says waiting for
160:11 - connection from jetpens ide support
160:14 - okay that's not an install so what i'll
160:16 - do is i'll go to
160:19 - chrome
160:20 - web store
160:22 - and here i will search for
160:25 - jetbrains
160:29 - and that's going to be this
160:31 - extension jetpens ide support click on
160:34 - add to chrome and you will be adding
160:36 - this to it so i have actually already
160:38 - installed that but i will have to enable
160:40 - it so go to more tools and go to
160:42 - extensions
160:43 - and here at the bottom i can see this is
160:46 - adjacent id support is installed but
160:48 - it's not enabled so i'm going to click
160:49 - on enable button i'll it will start my
160:53 - application
160:54 - in
160:55 - uh
160:56 - in chrome browser with jetpens ide
160:58 - support right now i can see the debugger
161:00 - has started i can see the console which
161:02 - i used to see in browser i can have this
161:05 - debugger
161:07 - tools where i could do to break points
161:09 - enable and disable breakpoints also i
161:12 - could just have like a
161:14 - next button here so let me go and first
161:17 - of all log in here so i'll do
161:19 - always at
161:23 - gmail.com this is my not my real id guys
161:26 - so don't try to message me here i'm
161:28 - gonna click on sign in and it will sign
161:30 - me in
161:32 - and
161:33 - after i log into application
161:37 - what it's not signing in let me check i
161:40 - think i have a wrong email id and
161:42 - password so i'll click on sign in again
161:44 - and there you go i'm in my app now so
161:47 - here i want to go to this click button
161:49 - where i could log
161:51 - record log something and also i could do
161:53 - a break one day so i'll go to this uh
161:56 - where is it home.page to ts and you hit
161:58 - the button called console.log hello this
162:01 - is what this button does so click on
162:03 - this and once i click on that i can see
162:05 - it's it's basically using this
162:07 - breakpoint in my ide so this is gonna
162:10 - save you tons of time because you're
162:12 - going to save a lot of time by going to
162:13 - the browser going to the source and
162:15 - going to do all the break one so you're
162:17 - writing a code you can do a break one
162:19 - right being in your ide
162:21 - now let me give you a quick
162:23 - tour of this debugger tools first of all
162:26 - we have this button here which basically
162:29 - says
162:30 - resume program the shortcut key is alt
162:33 - command r and click on that and it will
162:35 - resume my application
162:37 - now let's go to another page where i
162:40 - sign in so i'll go to login page and
162:43 - here this is the function that gets
162:44 - called when i click on the sign in
162:46 - button here so i'm going to click login
162:48 - here and i want to click
162:51 - uh here to breakpoint not login actually
162:54 - breakpoint so i'll just type in my email
162:56 - address
162:58 - and i'll do hello one two three
163:02 - and that should break point here so here
163:03 - i can see i'm breaking point and right
163:05 - now i can see what's in my email so if i
163:08 - click on this that show me how i said
163:11 - gmail was passed into this function what
163:13 - is the password that's hello123
163:16 - that is okay and also if i go and resume
163:20 - my application by clicking on this
163:22 - button and that will go and lock uh i'll
163:25 - it will breakpoint here so now it will
163:27 - take me to this router dot navigate by
163:30 - url
163:31 - and i can see if i just let it go by
163:34 - clicking on this button that will take
163:36 - me here okay so now i have a lot of
163:38 - buttons here i have this current user so
163:41 - let me find this current user function
163:44 - which should be in our users page
163:47 - and that will show me what is the
163:48 - current user so here i'll do a
163:50 - breakpoint and then i'll do click on
163:52 - current user and that should break one
163:55 - here okay let's go so in the user
163:57 - response
163:58 - from this function if i hold over it
164:02 - says cordova not available that's fine
164:04 - because i'm not running this on angular
164:05 - that's rule it will basically show me so
164:08 - if you go to a debugger you have this
164:10 - overview of local variables whatever the
164:12 - values are currently they're holding
164:14 - which is great also you can do right
164:17 - click and you can say add to watcher
164:21 - add to watches so every time this
164:23 - application runs and pass through this
164:24 - function you will see this variable
164:27 - getting filled in with the current value
164:29 - of that variable all right that was a
164:32 - quick introduction to debugging in
164:34 - webstorm
164:38 - i'm going to be showing you how to use
164:40 - this http
164:41 - plugin from ionic4 library
164:44 - so i'm in right now a native api section
164:48 - and here we have this http
164:50 - uh also i want to mention that you could
164:54 - use angular http client module to do
164:57 - your http calls but by using these
165:00 - you're going to get some benefit for
165:01 - example you're going to get this ssl
165:03 - pinning also we have this background
165:06 - threading all requests are done in a
165:07 - background thread so there are some
165:09 - benefits using this native plugin
165:13 - so yeah let's go and take a look how we
165:15 - can use this
165:16 - i'm gonna take you to webstorm and here
165:18 - i have the application ionic2 which we
165:21 - were using in the last video
165:23 - so first thing we're gonna do is we want
165:26 - to import this plug-in to our module
165:30 - so we can do that by
165:32 - importing that plug-in but remember to
165:35 - install it as well so here we have two
165:38 - commands you have to just copy this line
165:40 - of code i'm just going to copy this i'm
165:42 - going to go to terminal i'm going to
165:44 - paste that and press enter and it's
165:46 - going to install this ani cordova plugin
165:48 - and also it's going to install ionic
165:51 - plugin advanced http
165:54 - also we want to install this ins uh
165:56 - ionic native http beta i'm just going to
165:59 - copy that and i'm going to paste that
166:01 - here i'm going to press enter and it's
166:03 - going to install
166:04 - that plugin as well
166:07 - so the next thing we want to go to
166:09 - take a look at our applications right
166:11 - now in home dot page dot html file i
166:14 - have this get button
166:16 - which calls this function get request
166:20 - right and then we have this another
166:22 - request object
166:23 - so we go to home.page.ts file and here
166:26 - you guys can see we have this request
166:28 - object and also we have a get request
166:30 - which doesn't have anything yet
166:33 - so first thing let's import our http so
166:37 - do import
166:38 - and undo http
166:41 - will import from
166:43 - ionic native and also wanna you know add
166:46 - this
166:47 - slash ngx
166:49 - so if you take a look at we have this
166:53 - usage section which tells me it is slash
166:55 - ngx
166:57 - so
166:58 - i've got that here and now i need to
167:02 - add this http module into a product or
167:06 - you can call it the service so we can
167:08 - directly inject that into home.module.ts
167:12 - or
167:13 - you could add that into app.module as
167:16 - well so it's it's okay to you know add
167:19 - in home.module.ts
167:21 - and if you want to use this http
167:23 - throughout your application you're
167:25 - better off adding that app.module.ts
167:27 - because you can use this into any module
167:30 - later on because that's the payment
167:32 - module so if you inject that into a pair
167:34 - module you'll be able to use that in any
167:36 - child module so we're going to go and
167:39 - add that to
167:40 - home.module.ts file i'm going to press
167:42 - enter here and i'm going to say
167:44 - providers
167:45 - and provider takes an array we do http
167:49 - and then also from http
167:52 - then we're going to add a comma here and
167:53 - also i want to add this slash ng x now
167:58 - it's all good now guys so let's go and
168:02 - write a function here which will help us
168:04 - to you know do a get request using that
168:06 - plugin so we have this http here i want
168:08 - to inject that into a constructor so
168:10 - we'll do private http and then
168:14 - http now inside this function i want to
168:17 - use this dot
168:19 - http dot get method so get method
168:23 - requires three things url parameters if
168:25 - there's any and header if there's any so
168:28 - we'll do just a simple url
168:30 - now
168:31 - i needed to have a server running to do
168:34 - a api call so instead of running my own
168:37 - server i actually found this json
168:39 - placeholder it's a fake online rest api
168:42 - for testing and prototyping so that
168:45 - means i could just use this so it allows
168:48 - to do post requests and get requests so
168:51 - put requests and a delete request so
168:53 - this is basically if we can test over
168:56 - front end it will test if our http
168:59 - methods are working or not so let's take
169:01 - a look at the first one this is a url
169:04 - that we can call using http module so i
169:07 - could use this fetch but we're using
169:09 - http advanced plugin from ionic or
169:11 - cordova so here i want to type a url
169:15 - i'll paste that here and then comma and
169:17 - i'll just pass in an empty update it
169:19 - requires two parameters we can just do
169:21 - an empty one now it's a promise so we're
169:23 - gonna go to next line and we're gonna
169:24 - handle that but then and then i'll say
169:27 - if i get the response back
169:30 - then i want to set that response to
169:32 - request object so this does request
169:35 - update is equal to
169:37 - response.data so if we take a look at
169:40 - the documentation of ionic so when we
169:43 - get back we get the data back so we get
169:46 - the response and we have it three things
169:48 - status data and has we can take a look
169:51 - at later on but let's take a look at
169:53 - what data we get back
169:55 - i want to
169:56 - handle uh the errors so i'll go to the
169:59 - next line i'll say dot catch and if
170:01 - there is an error then i can just you
170:03 - know set that distort request
170:06 - object and we can just set that to error
170:08 - as well so we'll see errors there as
170:10 - well so now when we get the response
170:12 - back from this
170:13 - call we save
170:16 - uh the data into request object and
170:19 - request object is injected in our html
170:22 - file which you will see what is the
170:24 - request object you're getting so let's
170:27 - go to terminal and let's start our uh
170:31 - emulator so i want to do this ionic
170:33 - crypto amoled iris that's just targeted
170:36 - is equal to ionic iphone 8 and then
170:38 - dashboards live reload so i'm gonna just
170:40 - press enter here and we will wait for
170:42 - our emulator to start
170:45 - okay so our application is started i'm
170:47 - going to go and click on this get button
170:50 - okay cool so we got this user one id one
170:54 - a title
170:56 - delete us
170:57 - aut it's just a fake data okay i'm gonna
171:00 - go to this json placeholder and i'm
171:03 - going to do a same call here i'm going
171:04 - to click on try and let's see what we
171:06 - get so we've got user1 id1 okay so that
171:09 - means we're actually getting the same
171:11 - data we're getting the data from here so
171:13 - if i go to for example in to do's let me
171:18 - see if i can have any other
171:21 - uh
171:22 - other call so we'll just
171:24 - maybe let's go to
171:26 - post
171:28 - and then
171:28 - we can do
171:30 - a request for a post as well okay so
171:33 - i'll do a post for
171:35 - ah that's a lot of polls that's like a
171:37 - hundred posts that i wanna i don't wanna
171:39 - do that so if i go like you know get
171:42 - post one which will return me these so
171:45 - let's go and change this we'll go to
171:47 - home.page.ts and i'm going to go back
171:50 - and copy this url
171:52 - and i'm going to paste that here
171:56 - i'm going to save it
171:58 - and now we'll just get our emulator up
172:00 - and i'm going to click on to get again
172:02 - and this time i get this user id titled
172:06 - sun oh right so we're getting the post
172:08 - now another thing to notice here guys
172:10 - this is coming from
172:12 - https which means that we are actually
172:17 - doing this through ssl so it's a secure
172:21 - uh secure uh api call so this is good so
172:25 - if you use the http client which is in
172:28 - angular you will have to write some code
172:30 - or you will have to enable ssl manually
172:33 - so this is how you can use http module
172:36 - to do your calls i also want to show you
172:39 - that you can do this uh post request you
172:43 - could do this
172:44 - delete request or you could do this put
172:47 - requests as well so if we go to
172:49 - jsonplaceholder
172:51 - we go back and i'm going to go and find
172:55 - any post request so here i have a post
172:57 - request
172:58 - that's post
172:59 - um
173:00 - yeah so you could do basically post
173:02 - requests uh that's gonna be very long
173:05 - video but you're gonna give a try and
173:07 - basically what you wanna do is you want
173:09 - to provide
173:11 - these
173:12 - parameters so we do
173:14 - a url
173:15 - which would be this slash post
173:19 - and then
173:20 - that body if you want to add anything
173:23 - into your body for the post then we have
173:25 - to define the headers as well and that
173:28 - will just make a post request
173:33 - i'm going to be showing you how to use
173:35 - this sms
173:36 - plugin from ionic 4 library so let's say
173:40 - in your application sometimes you want
173:42 - to send a sms message to a particular
173:45 - number
173:46 - and you don't want a user to go and open
173:48 - the sms application and then type the
173:51 - number and then type the message there
173:54 - so instead what you want to do is you
173:56 - want to create a button which will take
173:59 - them to sms application also type the
174:02 - message there and also add the number
174:04 - there as well so we're going to learn
174:06 - how to achieve that using this sms
174:09 - plugin and this plugin is
174:11 - supported for android ios windows
174:14 - windows 8 phone as well
174:16 - so first thing we want to do is we want
174:18 - to install this ioniq sms plugin i'm
174:21 - going to go take you to
174:22 - my terminal i'm going to paste this here
174:25 - and press enter on the terminal that
174:27 - will be installed then we go install npn
174:30 - install sms beta
174:32 - then we go paste that as well
174:36 - okay so
174:37 - next thing i want to inject this sms
174:40 - plugin to
174:42 - home.module.ts file
174:44 - so this is a module
174:46 - for my
174:47 - home.page.html and home.page.ps
174:50 - so i'll just inject that here
174:53 - so let's go top i'm going to type import
174:56 - and then we'll do sms
174:59 - and then we want to add this slash
175:02 - ngx
175:04 - okay so that's been imported let's
175:07 - inject that into the providers
175:10 - sold to here sms
175:13 - i'm going to save this module file in
175:17 - home.page.html file and here i want to
175:19 - create an ion button
175:22 - and that button will say
175:23 - send
175:25 - sms and when i click on that
175:28 - i want to call send
175:31 - sms
175:32 - that's it
175:34 - and now let's go to our
175:36 - home dot page that here's file and here
175:38 - i have done a few things so i've
175:40 - imported that plugin there and i've
175:42 - added that into a constructor so that's
175:45 - just there so now we're going to create
175:47 - the function so i'll just say send
175:50 - sms
175:52 - and then
175:53 - inside this
175:56 - i'll simply call this.sms.send
175:59 - method and that send method will require
176:02 - two parameters
176:04 - first one is a phone number and the
176:05 - second one is
176:07 - a second one is a message
176:11 - okay so let's type the phone number okay
176:13 - so i'm going to
176:15 - save this file as well
176:17 - now i have run this application with
176:19 - ionic
176:21 - serve.c and i'm going to show you guys
176:24 - that application running on ionic dev
176:26 - app
176:27 - so let me just bring up my
176:29 - screen
176:31 - with this is an application running so
176:33 - we're going to tap on send sms now so if
176:36 - i tap on send sms it will open imessage
176:39 - app and it will add the number there and
176:42 - also it will have this message already
176:44 - written for me so this is cool if you
176:47 - want to provide this functionality so
176:49 - you don't want to your customer or app
176:52 - users you don't want them to type this
176:54 - long message and type your number so you
176:56 - can get them to you know send you a
176:59 - message directly by just simply tapping
177:01 - on this send button now and you do the
177:04 - hard work
177:08 - i'm going to be showing you guys how you
177:10 - can use native api
177:13 - from ionic 4 library now i've i've given
177:16 - a tutorial of a couple of api in our
177:20 - tutorial series for ionic four
177:22 - but also there's a lot of apis that are
177:26 - available you could use from ionic for
177:29 - for example you have a 3d touch so if
177:31 - you want to write an application for ios
177:34 - and you want to do something with 3d
177:35 - touch you can go to 3d touch
177:38 - documentation and read about it usually
177:41 - ionic documentation is really really
177:43 - great for every api for every native
177:46 - plugin for example here in 3d touch it
177:49 - tells you how to use this plugin so it's
177:52 - basically
177:54 - now up to you to improve your knowledge
177:56 - in ionic 4. so if you want to go and
178:00 - study further about native api you can
178:03 - go to any of this
178:05 - api and then go and read the
178:07 - documentation and so far whatever we
178:10 - have learned in ionic 4 you will be able
178:13 - to use any of this api by just going to
178:16 - the
178:17 - to the um
178:19 - this page and then just clicking on that
178:21 - for example the device api is pretty
178:23 - simple as well all you got to do is just
178:26 - install the plugins and then import in
178:28 - your module and also import in your ts
178:31 - file wherever you want to use it and
178:33 - then you can call all of these instance
178:35 - members so you want to use model
178:37 - platform serial uid a version whatever
178:41 - you want to get from it you can use this
178:43 - device plugin to do that so that's it
178:45 - for ionic 4 tutorial series guys this is
178:47 - the last video for ionic 4 and i hope
178:50 - you liked the tutorial series and yeah
178:52 - i'll talk to you guys in the next series
178:55 - thanks for watching subscribe to the
178:56 - channel and i'll talk to you guys later