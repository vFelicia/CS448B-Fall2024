00:00 - hey this is henry and welcome to today's
00:02 - tutorial what we're going to be doing
00:04 - today is building a simple to-do list
00:07 - with the pern stack and in case you
00:09 - don't know what the pern stack stands
00:10 - for it is p for postgres e for express r
00:14 - for react gs as our friend framework and
00:16 - an n for node.js as our backend language
00:19 - now by the end of this video you'll have
00:21 - a better understanding of how all these
00:23 - different types of technologies interact
00:24 - with each other and go on to building
00:26 - more complicated applications
00:29 - now let me give you guys a quick demo
00:31 - so let's say i
00:33 - need to clean my room
00:35 - which i really need to do so i can add
00:37 - that i can even edit the information so
00:40 - let's change this to car
00:42 - uh yeah i'll just keep it like that and
00:44 - then i can also delete the information
00:47 - so even though this is just a simple
00:49 - credit application and it is trivial
00:52 - there's a lot of things that's happening
00:53 - between the front and back end so in the
00:56 - next section we're going to go over a
00:57 - diagram overview of how this application
00:59 - is going to work and give you guys the
01:01 - big picture
01:02 - now before i move on there is going to
01:04 - be some prerequisites or more like
01:06 - pre-setup like the first thing you
01:08 - already need is to have node.js
01:10 - installed
01:11 - second you also need to have postgres
01:13 - installed and if you don't i'm just
01:15 - going to give you guys a video that's
01:17 - well i'm going to look at the bottom of
01:18 - my video that's going to show you guys
01:20 - how to properly install it
01:22 - besides that you guys need to have a
01:24 - basic understanding with javascript
01:26 - react.js and if you understand restful
01:28 - apis that's going to also help you guys
01:30 - a lot throughout the whole process but
01:32 - besides that i'll see you guys in the
01:34 - next section
01:40 - okay so let's just quickly go over this
01:42 - diagram to get the big picture so you
01:44 - can see that this is going to be our
01:45 - front end so right here you can see the
01:47 - submit button along with the
01:50 - data that's going to be able to get edit
01:52 - and deleted so anytime i click the
01:54 - submit edit or delete button within my
01:56 - react application what i'm really am
01:58 - doing is sending an http request to my
02:01 - restful api and depending on the http
02:04 - request and the route that's being hit
02:06 - it is going to tell my database or it's
02:08 - going to instruct my database and what
02:10 - type of credit operation needs to get
02:12 - done
02:13 - okay so anytime i click the submit
02:16 - button i'm sending a post request to
02:18 - create a to-do anytime i want to edit
02:20 - something i'm sending a put request to
02:23 - update to do delete delete
02:25 - and then when i want to read it to do
02:27 - i'm going to use a get request
02:29 - so i think one of the hardest part about
02:31 - learning how full stack application work
02:33 - is really understanding restful apis
02:36 - so i'm going to really oversimplify the
02:38 - definitions but this is really all you
02:39 - need to know a restful api uses transfer
02:42 - protocol in order to run cred operations
02:45 - so
02:46 - what i mean by that is that our transfer
02:48 - protocol is going to be http requests so
02:51 - we have access to post put delete get
02:54 - and a lot more but these are the four
02:55 - main ones but essentially we're going to
02:57 - be using these http requests and then
02:59 - our restful api is going to take them
03:01 - and then it's going to instruct the
03:03 - keyword it is instruct our database of
03:06 - what type of crowd operation needs to
03:07 - get done
03:08 - okay so a lot of the misconception that
03:11 - a lot of people have is that credit
03:12 - operations occur within the restful api
03:15 - but that's not true at all rather the
03:17 - cred operations only occur within the
03:20 - database whether that's postgres or
03:22 - mongodb or mysql it only occurs within
03:25 - our database so i'm just going to say
03:28 - this our restful api is just going to
03:30 - take our http requests and then it's
03:31 - going to instruct okay so hopefully that
03:34 - makes a lot more sense and in the next
03:35 - section we're going to start building a
03:37 - restful api
03:44 - okay so let's start building our restful
03:46 - api
03:48 - so the first thing i did was created a
03:49 - simple print to do folder and you can
03:52 - name this whatever you want but really
03:54 - the big idea is that it's going to hold
03:56 - our client and server folder
03:58 - so i'm going to first do my gear server
04:00 - and then i'm going to cd into that
04:02 - server so you can see here it's popping
04:04 - up right there and immediately i'm going
04:06 - to run npm in it
04:08 - so npm edit is going to keep track of
04:10 - all our packages inside our application
04:12 - and we're going to answer a few more
04:13 - questions to give more details so entry
04:16 - point is what's going to glue
04:18 - our application together
04:20 - so after that i'm going to do npm
04:22 - install express
04:24 - pg and coors
04:26 - so what are these libraries
04:28 - well express allows us to quickly create
04:30 - a server
04:32 - in node.js and then we have course which
04:34 - allows different domain applications to
04:36 - interact with each other so for example
04:38 - our server is going to be running on
04:40 - localhost 5000 and our react
04:41 - applications
04:43 - application is going to be running on
04:45 - localhost 3000 and then finally pg is
04:47 - there to connect our database with our
04:50 - server in order to run some postgre
04:52 - queries okay
04:54 - so once we set this thing up i'm going
04:57 - to say touch index.js which is going to
04:59 - again be the glue
05:01 - i'm going to go over here
05:02 - and record the libraries
05:06 - so i'm going to require express
05:08 - and then i'm going to create a variable
05:09 - called app which is going to take my
05:11 - express library and then it's going to
05:13 - run it
05:14 - now i pause all these cool methods in
05:17 - order to create a server so anytime we
05:19 - want our server to start we have to
05:21 - listen to your part number so app.listen
05:24 - for 5000 is what we're going to be
05:25 - listening it to and then i'm going to
05:27 - have a callback function that's going to
05:28 - indicate it has started so server has
05:31 - started
05:32 - on port
05:35 - let's kind of test this out really quick
05:37 - to see if it works
05:38 - i'm going to say
05:39 - node index
05:42 - and indeed it does work but the thing is
05:44 - is that i don't want to use node i
05:46 - highly recommend that you npm install
05:47 - globally nodemon because every time we
05:49 - want to see changes we have to restart
05:51 - terminal and turn it back on so by using
05:54 - no man
05:55 - or no mod you're going to watch a single
05:58 - file and then every time there's a
06:00 - change that's going to be done it's
06:01 - going to on instantly restart it
06:04 - so nodemon
06:08 - okay and you can see it's going to be
06:10 - watching a file and then the next thing
06:12 - i want to do is create some middleware
06:14 - so
06:15 - middleware
06:17 - i'm going to use app.use so anytime
06:19 - you're going to create a middleware you
06:20 - have to use app.use and i'm going to put
06:22 - course
06:23 - and i totally forgot to require that so
06:25 - const course
06:28 - okay so now that's set up that's all we
06:30 - have to do and i just kind of want to
06:32 - jump ahead as well that anytime we're
06:34 - building a full stack application you
06:37 - need to get data from the client side
06:38 - and the only way to get data from the
06:40 - client side is that we have to get it
06:42 - from the request.body object so let me
06:45 - show you how we can do that so by using
06:47 - this
06:49 - oops let me go back inside here
06:52 - so this right here
06:53 - essentially is allowing us to give us
06:55 - access to request that body and then we
06:58 - can get json data okay so this is still
07:00 - a little bit confusing we're going to
07:02 - build and i'm going to reference this a
07:04 - lot okay so i'll see in the next section
07:06 - and we're going to create a database and
07:08 - a table for postgres
07:15 - all right so let's get started building
07:16 - our database and table
07:18 - so i'm going to first show you guys this
07:19 - diagram to give you guys a big overview
07:21 - of the commands we're going to be using
07:23 - so you can see those are postgres inside
07:25 - there there's going to be a lot of other
07:27 - databases like to do databases or hotel
07:29 - database
07:30 - now inside these databases we're going
07:32 - to have a table
07:34 - so in this case i'm going to create a
07:36 - table or i'm going to create a database
07:38 - called to do database and then inside
07:40 - there i'm going to create a table called
07:41 - to do
07:43 - another purpose of having a table is
07:45 - that if there's anything that's related
07:47 - to room for example in this database
07:49 - then it's going to be placed inside the
07:50 - room table anything that's related to
07:52 - guests is going to be placed inside the
07:54 - guest table
07:55 - okay
07:57 - and writing a database or creating a
07:59 - database is as easy as saying create
08:01 - database and then specifying the name
08:03 - along with the semicolon and then after
08:06 - that we have to move inside that
08:07 - database and then we have to run create
08:09 - table to do we don't stop there we also
08:12 - have to define a schema and the reason
08:14 - why a schema is so important is because
08:17 - we don't want to put anything inside our
08:19 - database you want to be specific on what
08:21 - we're going to be putting inside there
08:24 - and then finally as you can see here we
08:26 - have all these different commands that
08:27 - we can run within our postgrad terminal
08:30 - in order to make it easy for us to move
08:31 - around so let's get started so i'm going
08:34 - to go back to my visual studio code
08:37 - and right off the bat i'm going to
08:38 - create a file called database
08:40 - dot sql
08:42 - and the reason i created this is because
08:44 - it's going to make it more visually
08:46 - pleasing when we write our commands so
08:48 - let's create a database so create
08:50 - database
08:51 - and we're going to name it as pern to do
08:54 - all right semicolon and then next we're
08:56 - going to say create table
08:58 - and then to do
09:00 - now i have to specify what it's going to
09:02 - look like so let me just set this little
09:04 - preferences up
09:06 - the first thing i'm going to do is to do
09:08 - id
09:09 - and the reason why i have to do id is
09:11 - because i want to ensure that this to do
09:14 - is going to be unique so for example
09:17 - anytime i'm trying to delete i'm trying
09:19 - to update or get a specific to do i just
09:22 - want to reference this to do id because
09:24 - it's what's going to make it
09:25 - distinguishable from the other to-do's
09:27 - and then i'm going to say serial primary
09:30 - key
09:32 - so what is this so primary key is
09:34 - exactly what i just said last time
09:36 - essentially indicates that this value
09:38 - right here or this column is going to
09:40 - make this entire to do unique from the
09:42 - other to do's and then we have serial
09:44 - which is going to be this function
09:46 - that's going to increase our primary key
09:48 - to ensure uniqueness so if you're still
09:50 - a little bit confused
09:52 - don't worry about it we're just going to
09:53 - go over that while we code this thing
09:56 - and then finally i'm just going to have
09:57 - description inside here
09:59 - and i'm going to say
10:01 - a give a far char of 255
10:04 - which means i'm setting a max character
10:06 - of 255.
10:08 - we just wrote our commands and now you
10:10 - should already have installed postgres
10:12 - so let me just put this aside
10:15 - so i'm going to open this command line
10:16 - right here so you should already
10:18 - installed it and then what you're going
10:19 - to run is
10:21 - psql-u representing as user and we're
10:24 - going to be using the user postgres so
10:27 - anytime you install postgres you
10:28 - automatically have a user by default
10:30 - called postgres which is a super admin
10:32 - and a super admin has full access to
10:35 - everything and then it's going to tell
10:36 - me what's my password
10:38 - and that's what you wrote inside your
10:40 - installation process so when you install
10:42 - postgres it told you to put a password
10:45 - inside there so we're going to put
10:47 - inside here
10:50 - okay so i'm inside my database so let's
10:53 - kind of run through the commands that i
10:54 - was talking about when i do slash l
10:58 - it is going to show me all of my
10:59 - databases
11:01 - so for example if it's still a little
11:02 - confusing essentially all of these
11:04 - little things that you see over here on
11:05 - the side is representing each of these
11:08 - databases okay
11:11 - so once i have this thing down i could
11:13 - do ctrl c to get out of this really
11:15 - quick
11:18 - okay
11:19 - and then inside here i'm going to
11:22 - see that i have jwt off so i'm going to
11:24 - move inside that database so i'm going
11:26 - to say c
11:27 - jwt off
11:29 - okay so now as you can see here it's
11:31 - saying that you're connected to the
11:32 - database jwt off as user postgres okay
11:36 - and then i can look at all the tables
11:38 - that's inside there by simply saying
11:39 - slash dt so in this case this has a
11:42 - single user table okay awesome
11:45 - so now
11:46 - we're going to make our own database so
11:48 - i'm going to go inside here i'm going to
11:50 - grab this command and i'm going to put
11:52 - it right there
11:53 - and check this out it's going to say
11:56 - database created or great database
11:59 - and then once we have that down we can
12:01 - do slash l i can see right there that we
12:05 - have indeed added it to our database or
12:08 - added to our postgres i'm going to do
12:10 - ctrl c again to get out of here and then
12:13 - i'm going to move inside there so slash
12:15 - c into print to do
12:19 - so you can see it does the same exact
12:21 - process and now i'm going to run slash
12:23 - dt to see whether or not we have any
12:25 - tables you can see here it says did not
12:27 - find any relations so now we take this
12:30 - thing right here
12:31 - and then we put it right there
12:34 - okay so awesome so we created a table
12:36 - and now if i do slash dt you can see
12:39 - that indeed we have created a table
12:41 - called to do
12:43 - now i think it's also worth mentioning
12:44 - that you don't have to call this to do
12:46 - id you can also call this t id as wall
12:49 - so i'm just going to show you this
12:51 - command later but essentially it's going
12:53 - to get all of my to do
12:57 - you can see that right here is what we
12:58 - define our schema as to do id and
13:00 - description and like i said again
13:02 - doesn't have to be to do id i'm just
13:03 - being explicit some people just like to
13:05 - say tid
13:06 - or you can do whatever you want with
13:08 - that
13:09 - okay so in the next section we're going
13:11 - to connect our database with our server
13:19 - okay so let's start connecting
13:20 - everything together
13:22 - so connecting like our database with our
13:24 - server is really easy when we use the pg
13:26 - library so what i'm going to go is
13:28 - create a file called db.js and this is
13:31 - going to configured how we're going to
13:33 - connect to our database so i'm going to
13:36 - say cons pull
13:38 - require
13:39 - pg library so remember we installed that
13:41 - pg library and dot pool
13:43 - and now we can instance this poll by
13:45 - saying const pool
13:47 - equals to new pool
13:50 - and now we can set up our configurations
13:52 - inside here so what's inside we have to
13:54 - first specify our user
13:56 - so in this case we're going to be using
13:57 - the postgres user
14:00 - and then we have to define the password
14:02 - as well so kthl 822 is mine
14:05 - we also have to say what the host is
14:07 - which is going to be localhost
14:10 - and then we are also going to specify
14:12 - our port which is going to automatically
14:14 - run on port 5432
14:16 - and then which is also very important we
14:18 - also have to specify the database which
14:21 - is going to be perm to do because as you
14:23 - can see here we created this database
14:25 - called perm to do and that's the
14:26 - database we're going to be using
14:28 - so awesome that's all it takes to
14:30 - connect to your database so i'm just
14:32 - going to export this guy so at
14:34 - module.exports
14:35 - and then pull
14:38 - okay so since that's all set up for us
14:40 - i'm going to go back into our index.js
14:43 - and i'm going to require that
14:45 - so by using the pool
14:46 - we can run queries with postgres
14:52 - oh my god what's happening dot slash db
14:55 - there you go
14:56 - okay
14:57 - and just to kind of give us a heads up
14:59 - i'm just going to start writing the
15:01 - routes that we're going to be working
15:02 - with with this query stuff
15:05 - so the first one is that we want to
15:08 - create a to do
15:10 - next one i want to get all to do is
15:14 - get a to do
15:17 - update a to do and then finally i want
15:19 - to delete
15:21 - a to do
15:22 - so we're going to work on each of these
15:23 - routes and we're going to be using this
15:25 - new connection that we have over here to
15:27 - run queries with our postgres so i'll
15:29 - see you then
15:35 - all right so let's start building some
15:36 - routes so right off the bat we're going
15:37 - to start with create a to-do and to do
15:40 - this we're going to say app that posts
15:42 - the reason it's going to be post is
15:43 - because we're adding data and i'm going
15:45 - to
15:46 - name as well as to do's
15:48 - okay
15:49 - and i'm going to run
15:50 - rec.res which represents requests from
15:53 - the client side and response we're going
15:54 - to send back to the client
15:56 - and then i'm going to use async now the
15:59 - great thing about async by using this
16:01 - we're allowed to get these really cool
16:03 - tools that makes asynchronous requests
16:05 - easy so for example anytime we're
16:08 - creating data over trying to get data
16:10 - it's going to take some time so async
16:12 - provides us something called a wait
16:14 - which waits for the function to complete
16:15 - before it continues
16:17 - okay
16:18 - so you'll see that pretty soon so then
16:20 - we also have try catch which makes our
16:22 - error handling so much more easier
16:24 - the reason for that is because it's
16:25 - going to run a regular code and anytime
16:27 - it finds the error it's going to catch
16:29 - it and it's going to throw it out
16:32 - and this is how our basic error handling
16:34 - is going to be done
16:35 - okay so now that's done inside here
16:39 - i need to be able to get data from the
16:42 - client side to determine what exactly
16:44 - i'm wanting to add
16:45 - so remember how i said we need to do
16:47 - something called express.json so i just
16:49 - kind of added a comment over here that's
16:51 - going to let us add request that body so
16:54 - by using this we can access this object
16:56 - right there and if you don't know what
16:57 - it is i can just console.log that thing
17:00 - i should give you guys a heads up but i
17:02 - am going to be using postman
17:04 - postman is great when it comes to
17:05 - wanting to test your applications or
17:07 - your restful apis
17:09 - so in this case i'm going to create
17:10 - something new and you can see right off
17:12 - here that we have all these different
17:14 - types of http that we can use so in this
17:17 - case we're going to be using posts and i
17:19 - also need to specify that i want to hit
17:21 - the slash deduce routes so let me do
17:24 - this really quick
17:25 - so i'm going to say http
17:28 - localhost
17:29 - 5000 and then slash to do's okay
17:33 - and now remember how we can access this
17:36 - request.body so i'm gonna go inside to
17:38 - body right here i'm gonna say raw
17:40 - and i'm gonna specify it's gonna be json
17:43 - and then i'm gonna create a json data so
17:45 - in this case remember we're working with
17:46 - description so i'm just going to say
17:48 - description is i need to clean my room
17:52 - so now if i click send
17:55 - we look inside here you can see indeed
17:58 - it pops up right there description i
18:00 - need to clean my room and this is
18:01 - exactly the data that we're going to use
18:03 - to save it within our database okay
18:08 - so hopefully that clears things up
18:11 - so remember we have the subscription
18:12 - that i'm going to be using so i'm going
18:14 - to destructure that so i'm going to say
18:16 - cons description
18:19 - and i request that bottom
18:21 - okay so time for some actual queries
18:24 - so i'm going to say const new to do
18:27 - and then i'm going to say await
18:30 - pool
18:31 - dot query so remember that pulls what we
18:33 - just created right there and now we're
18:34 - going to start writing some queries
18:37 - so in order for this thing to work in
18:38 - order to add data we have to use the
18:40 - insert into command so insert n2
18:44 - and then after that we have to specify
18:46 - which table we're trying to insert into
18:48 - which is going to be to do
18:50 - and then we have to specify what type of
18:52 - column we're trying to add data into so
18:54 - in this case we have a simple
18:55 - description
18:57 - and then we have to specify the values
18:59 - of that and this is going to look a
19:00 - little bit weird at first but we're
19:02 - going to have something called dollar
19:03 - sign one so what is this this is going
19:05 - to be a placeholder
19:07 - or essentially going to be a variable
19:09 - that's going to specify this description
19:11 - so we're going to have the second
19:12 - argument inside this query which is
19:14 - going to define this dollar sign one so
19:16 - remember how we have the description
19:18 - which is coming from our client side i'm
19:20 - going to put it right inside here
19:24 - now
19:24 - our description is going to be the value
19:27 - of this dollar sign one
19:29 - okay
19:30 - so if it's still a little bit confusing
19:31 - don't worry about it let me just wrist
19:33 - out jason this and i'll explain it again
19:36 - okay
19:38 - so i'm going to do this really quick and
19:41 - now i'm going to open my postman one
19:43 - more time and i'm going to try to hit it
19:48 - you can see we had a status of 200 and
19:51 - don't be scared but you're going to see
19:52 - a lot of gibberish
19:55 - so you see all of these things but this
19:57 - indicates that we have done something
19:58 - successful so we look inside our
20:00 - database and i say select
20:03 - all from to do like i said again you
20:05 - don't have to know this command yet i'm
20:07 - going to explain it later
20:08 - but you can see that indeed that we have
20:10 - added that data inside our database so
20:13 - pretty cool and look you don't have to
20:15 - set it as dollar sign one that's just
20:17 - the pg library allowing us to add
20:18 - dynamic data we can actually just do it
20:21 - straight inside here so for example i
20:23 - can just say like insert into
20:26 - to do
20:28 - description because i'm trying to hit
20:30 - this column right there
20:31 - i also have to specify the values of
20:33 - this guy
20:34 - and i'm going to say single quotes
20:38 - like let's just say hello for example
20:40 - and then that's all i have to do
20:42 - so you can see i inserted the data and
20:44 - if i decided to see what's inside there
20:46 - again you can see that i have added
20:48 - hello
20:49 - it's nice and you also see that we are
20:51 - incrementing this thing one two we
20:53 - didn't do that but because remember we
20:55 - set serial primary key it's going to
20:57 - automatically increase it to ensure that
20:59 - we have uniqueness all right so
21:01 - hopefully that made more sense as you
21:03 - can see here that this dollar sign one
21:05 - is just going to allow us to put in some
21:07 - variables of what we're trying to add
21:09 - inside our database
21:10 - so you can see that we have all of this
21:13 - ugly thing over here so we want to make
21:15 - sure we're returning back the data
21:17 - so what we have to do is say returning
21:20 - returning star
21:23 - so returning star is used whenever
21:25 - you're inserting data or you're updating
21:26 - or deleting so anytime
21:28 - you're doing these type of actions
21:30 - you're going to return back the data
21:33 - so let me show you again i go inside
21:35 - here
21:36 - and i try to hit this route you'll see
21:38 - we'll get something different
21:41 - so you see this we have now all of this
21:43 - data and you can see that this is the
21:44 - data that we just added inside there i
21:46 - need to clean my room to do id three
21:49 - and we want to just hit this rows right
21:51 - there because we don't want to see all
21:52 - these other things so inside i'm just
21:54 - going to say new to do that rows and
21:57 - then i'm going to hit the first item
21:59 - so now i'm going to hit it one more time
22:01 - i guess i should change it up a little
22:03 - bit and this is good for us because we
22:05 - are really
22:06 - we're going to in the next round we're
22:07 - just going to try to get these to do's
22:10 - so now we go to the bottom you can see
22:12 - we have something that's a lot more
22:14 - easier to read
22:15 - so awesome
22:17 - okay so we created our to-do next we
22:20 - want to see all our to-do's and this
22:22 - one's really easy
22:23 - and if you're going to memorize it right
22:25 - off the bat
22:27 - so i'm going to say app.get because
22:29 - we're just simply wanting to get theta
22:31 - i'm going to say slash to do's and then
22:33 - i'm going to do the same process request
22:35 - a res
22:36 - i'm going to use this async
22:38 - stuff try catch so this is really my
22:41 - regular convention that i like doing
22:43 - console.error enter that message
22:46 - and then
22:48 - inside here what we're going to do is
22:50 - we're going to be saying const
22:53 - all to do is
22:55 - a wait is going to take some time hold
22:57 - that query
22:58 - and guess this select so remember we use
23:01 - select
23:02 - oh my god i can spell it select all from
23:05 - to do
23:06 - and that's all we have to do really so
23:09 - remember how i kept writing this command
23:11 - just to see my to-do's this is exactly
23:13 - the same as that command so now i can
23:16 - say res.json multi-deuce remember it's
23:19 - going to be in this real stuff the only
23:21 - reason why i don't have to say returning
23:22 - stars because the purpose of select is
23:25 - to even give us the data back so we
23:27 - don't have to say returning star
23:29 - so let's check this thing out
23:31 - [Music]
23:32 - so i'm going to go inside here
23:34 - and i want to see all of my to-do's so
23:37 - i'm going to make a get request and
23:38 - check this out
23:40 - how cool is that so now we have all
23:42 - these different to-do's that we just
23:43 - created and we can we can just spit it
23:45 - out by simply running this command all
23:47 - right so pretty simple
23:49 - so in the next step we are now wanting
23:51 - to still get it to do so it's still
23:53 - going to have this thing but we want to
23:54 - get a specific to do
23:56 - so it's still going to be at that get
23:58 - because we're getting data now i'm going
24:00 - to say seduce and i'm going to also do
24:02 - colon id so what is that
24:06 - let me just finish this really quick
24:08 - just the basic setup
24:11 - okay try catch error
24:13 - console.error error.message
24:16 - okay so what is this thing essentially
24:19 - this allows our our url to be dot is
24:22 - it's going to allow our url to be
24:23 - dynamic so we have access now to
24:26 - something called console.log
24:29 - to request that params so whatever the
24:31 - client specifies in the url
24:34 - it's going to spit this out with the
24:35 - variable id so it's a little confusing
24:37 - so let me show you what i mean so i'm
24:39 - going to go back inside here and you can
24:41 - see that we're going to try to hit this
24:42 - route so i can say slash seduce and then
24:45 - i can just write something random so
24:48 - indeed that's what i'm going to write
24:50 - and look inside here
24:51 - if i click enter
24:53 - you can see that we have an id of random
24:56 - and this is actually coming from this
24:57 - area right here you can see we specify
24:59 - id i don't have to call it this
25:01 - i can just name it whatever i want and
25:03 - if i save this and i enter it again
25:07 - it's going to do the same exact process
25:09 - so subject random
25:11 - okay so hopefully that makes sense
25:13 - because that's what we're going to be
25:14 - using to specify what type of to do we
25:16 - want to get so you're going to see later
25:17 - on we're going to specify it as one two
25:20 - three
25:20 - you name it
25:22 - so let me just change this back to its
25:24 - regular form
25:29 - and uh
25:30 - yeah okay so now what i'm going to do is
25:33 - i'm going to destructure this so const
25:35 - id
25:36 - from request.programs
25:39 - and then
25:40 - now i'm going to try to get this id so
25:42 - const to do
25:43 - and i'm going to say wait because it's
25:45 - going to take some time hold that query
25:48 - now select
25:50 - all from to do
25:52 - okay and now i'm going to introduce a
25:54 - new player which is called the where
25:56 - clause
25:57 - and the where clause specifies what type
25:59 - of to-do we actually
26:00 - we actually want sorry about that
26:03 - what exactly we want
26:05 - so in this case i'm going to specify the
26:07 - column to do id
26:08 - because remember we named it inside
26:10 - database.sql
26:12 - i'm going to say where the to do id
26:14 - equals two dollar sign one and i'm going
26:16 - to specify it with the id
26:20 - the reason why this is important
26:22 - is because
26:23 - i can specify this as seduce and i want
26:25 - to get the one so it's going to say
26:27 - select all to do is where the to do id
26:29 - equals to one two or three so you'll see
26:32 - this in action real soon
26:34 - and then i'm going to simply say
26:35 - res.json to do that rows and i'm going
26:38 - to get the first item because we're just
26:40 - getting one to do
26:41 - all right so let's see that really quick
26:44 - so in this case you can see that we have
26:46 - all our to do's right here
26:50 - and i want to get number three so i or
26:52 - you know what let's do number four
26:57 - so if i stick click
27:00 - enter you can see that we get our
27:01 - specific data so nice so by using the
27:03 - web class we can be specific on what
27:06 - we're trying to get
27:07 - okay
27:09 - pretty simple and we're going to work on
27:10 - the next route which is going to update
27:12 - a to do this one is probably a little
27:15 - bit more complex from the rest but still
27:17 - not as bad so since we're updating
27:19 - information i'm going to say app.put
27:22 - i'm going to specify it as studios
27:24 - and it's going to be id
27:27 - so the reason i need to specify id
27:29 - because i want to know what exactly or
27:31 - what should do i need to update then i'm
27:33 - going to run async
27:35 - so the regular stuff
27:38 - and then what i'm going to be doing
27:40 - inside here
27:46 - okay so what i'm going to be doing
27:47 - inside here is i need to have two things
27:50 - remember we have access to the
27:51 - request.body to get information
27:54 - about the description that we're trying
27:55 - to add to the database and we also have
27:57 - request params to specify what type of
28:00 - to do we want so we're going to need
28:02 - both of them in order to update
28:04 - and i'll explain why
28:06 - so we have id over here request.params
28:09 - and then we're going to have const over
28:11 - here which is going to be uh what is it
28:13 - yeah description
28:18 - request dot body
28:20 - it's awesome we're going to be using
28:21 - these tools to update our information so
28:24 - here's how the query works i'm going to
28:25 - say cons update to do
28:27 - and then i'm going to do a weight again
28:29 - pull that query
28:31 - and now this is the query i'm going to
28:33 - run i'm going to say update
28:36 - update i'll have to do i have to run
28:38 - update and i have to specify the table
28:41 - so update and to do's table
28:44 - and then i have to run set
28:46 - so what do i set i have to set the
28:47 - description column
28:49 - to whatever i specified right there
28:51 - so i want to actually set the
28:53 - description to the description that's
28:54 - specified
28:55 - side
28:56 - and then i also have to specify where
28:58 - it's located at so i had to say where
29:02 - the to-do id
29:04 - equals to dollar sign two
29:07 - okay so this may look a little confusing
29:10 - but remember how i said these represent
29:11 - variables so we don't have to just do
29:14 - dollar sign one we can do unlimited
29:15 - amounts like you could even go up to
29:17 - like dollar sign 100 if you need to
29:19 - right but basically these are just
29:20 - variable holders so all i have to do is
29:23 - go inside my second argument array
29:25 - specify the first value which is going
29:27 - to be description
29:29 - so this is representing this one right
29:31 - there and then i have to create a comma
29:33 - right here and specify id so this id is
29:36 - coming from here and it's going to
29:37 - represent this dollar sign too okay
29:42 - and now
29:43 - i can just do res.json
29:45 - and i'm just going to keep this simple
29:47 - i'm just going to say
29:48 - to do
29:50 - was updated
29:52 - okay so let's see how this is going to
29:54 - work
29:55 - so i'm going to go inside here
29:57 - i'm going to try to change i need to
29:58 - clean my car
30:00 - so let's go up here really quick
30:02 - and let's say let's
30:03 - i need to clean my floor
30:07 - so now i have to change this to put
30:09 - because i'm trying to update this and
30:10 - now if i click enter hopefully it works
30:13 - you can see i have a status of 200
30:15 - and indeed to do was updated so let's
30:17 - just double check to make sure it did
30:19 - so if i go inside slash four
30:22 - and i look into the bottom
30:25 - oops i have to make this to a get
30:26 - request
30:29 - it did change so it says i need to clean
30:31 - my floor so cool we're able to update
30:33 - our information
30:36 - and if you're still confused like i said
30:38 - again i'm going to do a quick review
30:39 - over all the queries we just did
30:41 - and finally we have deleted to do which
30:43 - is really easy it's exactly kind of like
30:45 - the get request so what we're going to
30:47 - be doing is app that delete because
30:50 - we're deleting data
30:51 - seduce and all we have to do is specify
30:53 - the id
30:55 - in the regular process request.res
30:58 - try catch
31:05 - since that's all done and ready to go we
31:07 - don't have to add data to a delete so
31:10 - all we have to do is specify what
31:12 - exactly we want to delete
31:16 - okay
31:17 - and inside there we're going to say
31:18 - const delete to do
31:21 - and we're going to do the same process
31:23 - away pull
31:24 - that query
31:25 - and i'm going to say delete
31:28 - from so i'm going to run this command
31:29 - delete from and we to specify in the
31:32 - today's table and then all you have to
31:33 - do left is say where it's located at so
31:36 - where the to-do id
31:38 - equals
31:39 - to dollar sign one and that is just
31:41 - going to be as you guessed it id
31:45 - and then we're just going to do another
31:47 - res.json and just say
31:50 - to do
31:51 - was delete it
31:53 - so congratulations uh well actually no
31:56 - we can't say that yet until we test this
31:57 - out so let's make sure that we can
31:59 - actually delete this one right here so
32:01 - in this case i want to delete that fake
32:03 - sample that i created over here so hello
32:06 - so i'm going to say slash 2. specify
32:08 - it's going to be a delete request
32:09 - because remember i specified as delete
32:12 - and now if i click enter
32:14 - to do what's deleted and let's make sure
32:16 - it does get deleted
32:19 - oops
32:20 - make a get request
32:23 - check this out it was deleted okay so
32:26 - congratulations you officially created a
32:28 - restful api of postgres so in the next
32:30 - section i'm just going to do a quick
32:31 - overview of the queries we did so you
32:33 - can have a better picture of what
32:35 - happened so i'll see you then
32:42 - all right so congratulations for
32:43 - building a restful api with postgres so
32:46 - i'm just going to give you guys a quick
32:47 - review because i want this to really
32:49 - ingrain in your mind
32:50 - so as you can see inside here we had a
32:52 - basic server that we set up and then we
32:54 - did something called database.sql so
32:57 - this made it more visually pleasing for
32:58 - us to write our commands again you don't
33:00 - have to do it this way you can just put
33:02 - it directly inside the command line so
33:04 - what we did was create table learn to do
33:06 - and then we created a well sorry not
33:08 - create table we created a database
33:09 - called print to do and then we created a
33:11 - table within that database called to do
33:14 - and we had to find two things inside
33:16 - there the first one we defined was the
33:18 - description which was given a max
33:20 - character of 255
33:24 - and then we set something called to do
33:25 - id with the primary key and the reason
33:28 - why it's so important is because we want
33:30 - to ensure uniqueness between all our
33:31 - other to-do's because if we want to
33:33 - delete update or get a specific to-do we
33:36 - will have to reference something that
33:38 - distinguishes the rest of the other
33:39 - to-do's which in this case to do id and
33:42 - then you can see primary key indicates
33:43 - that this to-do id is what makes it
33:45 - unique and then we have the serial
33:47 - function which automatically increases
33:49 - the primary key to ensure that's unique
33:52 - as you can see inside here that's what
33:54 - happened one to two
33:56 - now in order to connect to it it was as
33:58 - easy as taking the library so require pg
34:01 - that pool and then we just had to
34:03 - configure where and how we were going to
34:04 - connect to it in this case we have to
34:06 - specify the user the password the host
34:09 - which is localhost because it's running
34:10 - on our local machine our port by default
34:13 - postcard runs on 4432 and then our
34:16 - database which was perm to do
34:18 - so as you can see the reason we
34:19 - connected to parent to do is because
34:21 - that's what we specified
34:22 - okay so now when we go to index.js we
34:25 - start to create some routes
34:27 - so whenever you're creating something
34:28 - inside postgres you have to use the
34:30 - insert into command okay so the insert
34:33 - into command specifies the table that
34:36 - you want to insert something in and the
34:38 - column which is going to be description
34:40 - and then you have to enter in what that
34:42 - value of the subscription is going to be
34:44 - in this case we had dollar sign one
34:46 - which was really strange for a lot of
34:47 - people who just started but essentially
34:49 - this is just a simple placeholder and
34:52 - this value is going to be specified in
34:54 - the second argument array which is going
34:56 - to be description so this description is
34:58 - going to represent this dollar sign one
35:00 - over there okay
35:03 - and then uh and also it's worth
35:04 - mentioning that all of these different
35:06 - commands that you see here these queries
35:08 - that i'm having over here can just
35:10 - simply be run inside the command line
35:11 - themselves
35:12 - and also we have returning start because
35:14 - we were adding data
35:16 - so we want to get back that data again
35:19 - so anytime you're trying to insert or
35:21 - you're trying to update or delete you
35:22 - have to use returning star to show what
35:24 - exactly you're using
35:27 - and then we had to do res.json.roast
35:29 - because that's where the data is located
35:31 - at
35:32 - and finally
35:34 - inside here we just had to do select all
35:36 - from studios and this allows us to get
35:38 - all the to do from that table right
35:40 - there
35:41 - and as you can see here you don't have
35:43 - to specify stars i don't know if i was
35:46 - specific on this but it doesn't have to
35:48 - always be select star star is just
35:50 - simply there to say that we want to get
35:51 - everything so if i go into my command
35:53 - line and i say select
35:56 - instead of star i can say description
35:58 - from
35:59 - to do
36:01 - i just get the description so i can be
36:03 - specific on what i'm trying to get so
36:05 - instead of actually trying to pass
36:06 - everything to the client side i can just
36:08 - minimize that and just pass what i
36:09 - really need to pass over to the client
36:11 - side and then we just press that json
36:13 - that data
36:15 - and inside here we introduce a new
36:17 - player called the where clause and the
36:18 - word clause allows us to be more
36:20 - specific on what we're trying to do so
36:23 - in this case remember we were trying to
36:25 - get all to do's but only were the the to
36:27 - do id equals to what we specified in the
36:29 - client side so we're gonna say where
36:31 - specified the column and then the number
36:34 - the equals two
36:36 - then we worked on update which was a
36:37 - tiny bit more complex but it was still
36:39 - nice and easy to work with so we have to
36:41 - use the update command specify the table
36:44 - and then we have to use set
36:46 - describe the column that we were trying
36:48 - to change
36:49 - so we set that equal to the description
36:50 - define and the client side and then we
36:53 - have to specify where
36:55 - that to do we want to update it was
36:57 - going to be located at so we have to say
36:59 - where to do id equals to whatever you
37:01 - specified inside there okay and already
37:04 - you can see we had dollar sign one
37:06 - dollar sign two
37:07 - you can go up to any dollar signs you
37:09 - want to it's just that inside your array
37:11 - you just have to specify it inside there
37:13 - so if i added a dollar sign three i will
37:15 - have to add it inside this array as well
37:17 - of what that equals to
37:19 - and then finally delete which was really
37:21 - easy all we had to do was specify delete
37:23 - from the command specify the table and
37:26 - see where it was located at
37:29 - okay so we use that where clause again
37:31 - so pretty simple stuff so
37:32 - congratulations so in the next section
37:35 - we are going to start creating our
37:36 - client side
37:38 - so uh just so you guys can see i'm just
37:40 - going to create a
37:42 - new terminal over here and then i'm
37:44 - going to say mpx create react app and
37:47 - i'm going to find it as client okay so
37:50 - after this thing finished loading we'll
37:51 - just start building our application
37:59 - all right so as you can see my client
38:01 - side has finished loading
38:03 - so before i even like jump into cleaning
38:06 - this thing up i just want to show you
38:08 - guys quickly of this diagram again and
38:10 - the different components that we're
38:11 - going to be working with
38:13 - so let me just kind of zoom in a little
38:14 - bit
38:15 - so remember we're going to be having
38:17 - three components to this front end so
38:19 - we're going to have first a input
38:21 - component then we're going to have a
38:23 - component that's going to show all the
38:25 - to-do's and then last we're going to
38:27 - have a component that's going to open
38:29 - our edit model okay so let's get started
38:32 - so i'm gonna go back inside here and i'm
38:33 - just gonna clean some things up so we
38:36 - don't really need these anymore oh we're
38:38 - gonna need them eventually but let's
38:39 - just focus on the client side
38:41 - so i'm gonna go inside here and i'm just
38:44 - going to clean some things that we don't
38:45 - need so in this case we don't need this
38:50 - we also don't need this logo svg
38:54 - i'm also going to get rid of the service
38:55 - work here
38:58 - set up tests all right and then we're
39:01 - going to go to index.js clean all these
39:03 - things out really quick
39:05 - right along the server worker we don't
39:07 - need that anymore
39:09 - and then i'm going to go to app.js and
39:11 - i'm just going to
39:13 - get rid of this logo stuff so we don't
39:14 - have any errors and i'm just going to
39:17 - take in the fragment
39:22 - and i'm just going to clean this all out
39:25 - we don't need these things anymore all
39:27 - right
39:28 - i'm going to put fragment inside there
39:31 - and here we go and just to make it even
39:33 - better we're just going to create a new
39:35 - folder called components so we're going
39:37 - to talk about those three components we
39:38 - just did so we're going to do new file
39:41 - remember we're going to have a search
39:42 - input so input to do djs
39:46 - then i'm going to make another component
39:48 - which is going to list
39:49 - all of our to-do's.js
39:52 - and then finally i'm going to make a new
39:54 - file that's going to have the edit to do
39:57 - okay
39:59 - and that's pretty much the setup for
40:01 - components right now and also we are
40:04 - going to be using bootstrap for so let
40:06 - me kind of get that set up for you guys
40:07 - as well
40:09 - so go inside here
40:11 - bootstrap 4
40:13 - then we're just going to open this thing
40:14 - up
40:18 - and just go down here
40:19 - take the css
40:22 - and we're going to put it inside our
40:24 - public index.html so i'm going to just
40:27 - put my
40:29 - link probably right here and if you want
40:32 - to you can just get rid of all these
40:33 - comments they're not going to help us
40:34 - really and finally we are going to be
40:37 - using a model so i'm going to take this
40:40 - all this data right here
40:43 - and then i'm going to put it right there
40:45 - which
40:46 - oh yeah right there i'm going to put it
40:48 - near the body
40:51 - okay
40:52 - so pretty neat okay so uh that's pretty
40:54 - much your setup so the next section
40:56 - we're gonna start building the input
40:58 - view
41:04 - alrighty so let's get started
41:06 - so i already went to my client folder
41:08 - and i did npm start to get everything
41:10 - ready so let's go inside our input to do
41:12 - and let's start setting some things up
41:14 - so i'm going to start saying import
41:18 - react from react
41:21 - and then i'm going to make a simple
41:22 - component just to get enough on the
41:24 - board
41:26 - i'm going to return a simple h1 that's
41:28 - going to be input to do
41:31 - and i'm going to export default this
41:36 - and i'm going to require it within
41:38 - myapp.js so let's go inside here
41:41 - and i'm just going to add a comment
41:42 - that's going to save components
41:44 - and it's going to say
41:46 - import input to do
41:50 - from dot slash components slash input to
41:53 - do
41:54 - all right
41:55 - and now i'm just going to put it right
41:57 - there
42:00 - all right and now if i look in over here
42:03 - you'll see that i have input to do and
42:04 - it's a little bit too close on the side
42:06 - so i'm going to make sure that i space
42:08 - this thing out with my container
42:15 - i'm gonna take this okay over here and
42:16 - i'm gonna put it oh no not there
42:19 - i'm gonna put it right there and it
42:20 - should be a lot more spacious
42:22 - so yeah that's a little bit better and i
42:24 - kind of want to make that to the middle
42:26 - so let's go into input to do and now we
42:27 - can start doing some real things
42:31 - i'm going to make a fragment
42:34 - and i'm going to put my fragment right
42:35 - here
42:37 - and then i'm going to put my h1 as pern
42:40 - to do less okay
42:44 - and i'm going to add a class name
42:47 - of text center
42:49 - and i'm also going to add a margin top
42:52 - of five because it as you can see it was
42:54 - a little bit too close
42:56 - so that looks nice for us
42:58 - and the last thing we need to do next is
43:00 - that we need to create a form because we
43:02 - are going to submit something new so i'm
43:05 - going to create a form over here we
43:06 - don't need this action
43:09 - and i'm going to have input right here
43:15 - type of text
43:16 - i'm going to keep it like that
43:19 - and then i'm going to have a button
43:20 - that's going to say add
43:22 - so let's see how that looks like
43:25 - pretty ugly so we can make that look a
43:27 - little bit better
43:29 - so class name
43:30 - i'm going to add a btn well not btn
43:33 - there but i'm going to say form control
43:34 - for here
43:36 - that should make it a little bit better
43:39 - okay and right on the back you see it's
43:41 - kind of knocking the ad out so let's
43:43 - just kind of decorate that as well
43:45 - so i'm just going to say class name
43:49 - btn btn success and then after that i'm
43:52 - going to add a d flex because this thing
43:54 - goes hundred percent so i want them to
43:56 - be together
43:59 - now as you can see now it's going to be
44:02 - put together it's awesome
44:04 - and it's still a little bit tight so i
44:06 - guess i'm going gonna add a margin top
44:08 - five there as well
44:10 - i'm just really abusing this margin top
44:12 - five
44:13 - yeah it looks a lot better okay so now
44:16 - it's time for us to reactify this thing
44:19 - we want to start containing our state
44:20 - within this so i am going to be using
44:22 - react hooks so i'm going to use use
44:24 - state
44:26 - and inside here i'm going to put on the
44:28 - top
44:29 - so i'm going to say cons
44:31 - and i'm going to say um let's see let's
44:34 - call it description
44:36 - and then we're going to say set
44:37 - description
44:39 - and i'm going to set it to use state and
44:41 - add a default value of an empty string
44:43 - now if you don't understand this
44:45 - basically this is our state and this
44:47 - right here is the only way to change the
44:49 - state and then we have use date
44:51 - to show our default value
44:53 - so now i'm going to go to my input i'm
44:56 - going to set the value to that state
44:57 - that i have over there just description
45:02 - so just to prove my point that this is
45:04 - our default over there i'm just going to
45:06 - add something like for example hello
45:10 - so now if we look inside there you'll
45:11 - see by default we have a hello inside
45:13 - there okay we can't change it because we
45:16 - don't have an on change yet so i'm going
45:18 - to open this thing up
45:21 - and what i'm going to do next is that i
45:23 - want to
45:24 - change or update the description so i'm
45:26 - going to say unchange
45:28 - and i'm going to use e for event
45:31 - and it's going to do set description
45:34 - to e that target so it's going to target
45:36 - whatever's in that input and it's going
45:38 - to get as a result
45:41 - the value of it
45:42 - okay
45:43 - either target.value
45:46 - so now if i just type inside this thing
45:48 - i can just add random values and it's
45:49 - going to update and we want to get rid
45:51 - of that hello because we won't start
45:52 - that
45:56 - okay so pretty neat so we have this
45:58 - react stuff set up next we want to be
46:00 - able to submit our form to send data out
46:03 - so how do we do this let's create a
46:05 - function that's going to call unsubmit
46:07 - form
46:08 - so i'm just going to you know yeah i'll
46:10 - just make this error function
46:12 - and
46:15 - inside there i'm going to use my try
46:17 - catch again so i got to use the async
46:19 - stuff
46:22 - and i'm going to set this to error so
46:24 - console
46:25 - dot error
46:27 - error that message
46:29 - and i'm going to put an e inside here
46:31 - because it's going to send an event and
46:33 - we don't want this thing to refresh
46:35 - so i'm going to say e that prevent
46:37 - default
46:40 - now inside here is where we're going to
46:41 - start
46:42 - like sending a request so i'm going to
46:44 - package this description over here so
46:46 - i'm going to say const body
46:49 - equals to description i'm packaging it
46:52 - all up so normally you'll have a lot
46:54 - more than just a simple description if
46:55 - you're building a complex application in
46:57 - this case i'm just going to keep it like
46:58 - this
46:59 - and then i'm going to say const response
47:02 - and i'm going to start sending a request
47:05 - to add data so i'm going to say
47:08 - fetch so i'm going to use the fetch i'm
47:10 - going to specify http
47:13 - localhost
47:14 - so i'm trying to add data so remember i
47:16 - have to go slash studios so by default
47:18 - fetch makes a get request so we have to
47:20 - add some more configurations
47:23 - so i'm going to set inside here that our
47:25 - method is actually going to be a pulse
47:27 - request
47:28 - okay
47:29 - and what i'm going to be sending inside
47:31 - of there is going to be json data so i
47:33 - just have to set the headers to
47:36 - type and the content type is going to be
47:39 - a result of application slash oops let
47:42 - me get rid of that slash json
47:44 - okay and then finally i have to
47:48 - what am i going to be sending over there
47:49 - so i have to have a bot
47:51 - i'm gonna have to stringify this
47:53 - package it all up
47:55 - string the five
47:56 - and then i have to stringify that body
47:58 - over there
48:01 - all right
48:03 - looks pretty solid so let's kind of test
48:05 - to see where this works and i'm just
48:06 - going to go console.log
48:09 - response to see if everything works well
48:12 - now you should have your server on
48:14 - because we're going to start interacting
48:15 - with it right now
48:17 - so let's go over here
48:19 - and i'm going to say
48:20 - okay so let me open my
48:22 - little console
48:27 - i'm going to clear all this so it can be
48:29 - a little easier to read let's say i
48:32 - need to wash the dishes
48:35 - so now if i click add
48:36 - let's hope it works
48:39 - wait i just noticed this thing just
48:40 - refreshed okay so that's a problem
48:42 - because oh yeah because i didn't connect
48:44 - to my form yet okay so yeah we have to
48:47 - do that first
48:49 - so let's say on submit
48:50 - so this is going to be triggered when
48:52 - it's submitted
48:53 - and then i'm going to run on submit form
48:57 - and now it should be
49:00 - working now i'm going to go over here
49:03 - and i'm just going to write in my data
49:05 - like now i need to wash the dishes
49:14 - and that's what i totally forgot
49:16 - so remember when you're making a fetch
49:18 - request it's going to take some time so
49:19 - we need to wait
49:21 - we need to wait for this thing to finish
49:23 - and then we can console.log that
49:24 - response
49:26 - so now
49:27 - and i hope finally this thing is going
49:28 - to start working
49:31 - and again it's just a working progress
49:33 - so no problem at all
49:35 - and i'm just going to write i you know
49:37 - i'm just going to say hello
49:39 - clear this up and i'm just going to add
49:41 - it and cool we had a status of 200 so
49:44 - let's make sure we really did get that
49:46 - data so open up your command line over
49:48 - here psql
49:51 - dash u so the regular process again
49:54 - pthl822
49:56 - and then i'm going to go into that learn
49:58 - to do stuff that we created and i'm
49:59 - going to say select all from to do i'm
50:02 - going to determine whether or not i
50:03 - actually have it
50:05 - and look at that
50:07 - i have the data over here and i wasn't
50:09 - able to add the other one so that's neat
50:12 - so you can see how it was added over
50:14 - there if i decide to add
50:16 - another data
50:19 - let's check this out really quick
50:21 - cool it works so we're able to add data
50:24 - okay so since that's all set up in the
50:26 - next section we're going to start
50:28 - working on the list to do so we can
50:29 - display all our information
50:37 - so i just realized i wasn't complete of
50:38 - this component instead of saying
50:40 - console.log response i actually want to
50:42 - do window.location
50:44 - so once the response has been sent it's
50:46 - going to refresh and show the changes
50:48 - okay so make sure you change it to this
50:51 - next i'm going to go inside let's seduce
50:53 - and create that component
50:56 - i'm going to import react
50:58 - from react
51:00 - and then i'm going to say cons list
51:02 - seduce
51:04 - and i'm just going to be returning
51:06 - something really simple just get us
51:08 - started i'm going to call it lists
51:11 - to do's
51:13 - and then i'm just going to export
51:15 - default this guy
51:19 - okay so that should be all set up and
51:21 - now i'm going to go to my app.js again
51:23 - and i'm going to import that
51:29 - that slash component slash
51:31 - what is it called again list to do this
51:34 - and i'm just going to put it right under
51:36 - here and we'll see whether or not it
51:38 - does pop up
51:41 - all right so let's go inside here let's
51:43 - see if it pops up over there
51:46 - less to do should be right there awesome
51:50 - so now we can do some real damage or
51:52 - sorry no not real damage we can do some
51:54 - real stuff
51:55 - so i'm going to take in some fragments
52:01 - and i'm going to go inside here say
52:03 - fragment
52:05 - and now i'm going to take in a table so
52:08 - i'm going to use bootstrap 4's tables so
52:10 - i'm just going to go into w3schools so i
52:13 - already have it set up right here if you
52:14 - want to get to where i'm at simply what
52:16 - i did was i just wrote w3school which
52:19 - bootstrap four tables and the first
52:21 - thing that's going to pop up is this
52:23 - basic table
52:24 - so what i'm going to do is i'm just
52:25 - going to grab
52:27 - this table
52:29 - tag over here to the end of the other
52:31 - table tag i'm going to copy that
52:34 - and i'm going to take it and i'm going
52:35 - to put it right inside there
52:37 - okay
52:39 - and i can see there might be some
52:41 - confusion so just to double check around
52:42 - the same page right
52:44 - w3school bootstrap 4
52:47 - for table okay and then you should be at
52:49 - the same location as i am and then you
52:51 - can just click on this thing right here
52:53 - and you'll be led to
52:56 - so i'm going to start using w3schools
52:58 - and i'm just going to copy their codes
52:59 - and just put it directly into here to
53:01 - make our process a lot faster
53:04 - so now if we look into a react
53:06 - application you can see that we have our
53:08 - table
53:08 - and we're just going to clean this up a
53:10 - little bit more
53:12 - so first of all you can see it was a
53:14 - little bit too close so again we're
53:15 - going to do a margin top five
53:17 - and i kind of want to do text center
53:20 - as well
53:21 - and we don't want to have first name
53:22 - last name or email we want to first
53:24 - display the description
53:28 - and then i want to display the edit
53:30 - button
53:33 - and finally i want to display the delete
53:35 - button
53:38 - now we don't need these other datas but
53:40 - i am going to keep one for reference so
53:41 - when i map each of the data once i fetch
53:44 - it i want to be able to know how i
53:46 - should structure it so i'm going to take
53:47 - john doe put him inside there and i'm
53:50 - just going to delete the rest
53:53 - all right so let's see how that looks
53:54 - like that should be a lot more cleaner
53:58 - okay so let's get started
54:01 - so i am going to be using a few banks
54:03 - i'm going to be using use effect
54:06 - and i'm also going to be using new state
54:08 - so these stuff are going to help us with
54:11 - a process so use effect is going to
54:14 - make a fetch request to our restful apis
54:16 - every time this component is rendered
54:18 - okay so i'm going to go inside here i'm
54:21 - going to write use
54:22 - effect and i'm going to write a function
54:25 - that's going to hit this one so it's
54:27 - going to say ket to dose
54:29 - hasn't been created yet so i'm going to
54:31 - create it at the top so i'm going to get
54:33 - error
54:34 - and
54:35 - yeah i'll just do an error function
54:36 - again so get to use
54:38 - async sorry
54:40 - now i have to write async
54:43 - and this is going to equal to
54:48 - try catch
54:50 - and i'm going to console.log
54:53 - error.message
54:56 - and let me just change the error to the
54:58 - better
54:59 - all right
55:01 - and then inside here we're going to make
55:03 - another fetch request so i'm going to
55:05 - say const response equals to a weight so
55:09 - remember we're going to make a fetch
55:10 - request right here
55:12 - to http
55:14 - slash localhost
55:16 - 5000 slash to do's and by default fetch
55:19 - makes a get request so that's we can
55:22 - just keep it like this
55:24 - and next
55:25 - i'm going to get some data back but i
55:27 - can't just simply console.log it i need
55:29 - to parse it so we're going to be getting
55:31 - json data back so i have to say const
55:35 - let's say
55:36 - json data
55:39 - and then i'm going to say response
55:41 - dot json
55:43 - so i'm going to have to parse it first
55:45 - because we're getting json data and then
55:47 - now i can console.log
55:50 - json data so let's see what we get as
55:52 - results
55:53 - so let's go inside here
55:56 - and let's check this out oops i almost
55:58 - forgot as well that it does take some
56:01 - time to parse data so we have to say
56:02 - wait for this as well
56:05 - so things should start working once
56:07 - again so cool look at that we get all
56:09 - our data from there
56:11 - so now we can utilize this array and we
56:13 - can put it
56:14 - inside our use date so
56:17 - we're going to create a state right here
56:19 - we're going to say
56:20 - cons
56:21 - and let's just call these to do's and
56:23 - i'm going to say set to do's
56:25 - and i'm going to give it a default value
56:27 - of just an empty array
56:30 - and after that i'm going to set that
56:32 - json data into there
56:34 - so i'm going to say set to dose because
56:36 - that's the only way to change the state
56:38 - and then i'm going to put inside json
56:41 - data
56:42 - okay so in case you don't know what's
56:45 - going to be inside there we can double
56:47 - check
56:48 - and i could just run
56:50 - console.log
56:52 - to do's so this is our state
56:55 - so let's see what we get from there
57:00 - so as you can see we're making a lot of
57:02 - requests and that's because the thing
57:05 - about use effect is that it just keeps
57:07 - on like making requests
57:09 - once the render happens so and ensure
57:12 - that we only make one request i'm going
57:13 - to go inside here and i'm just going to
57:15 - put it like this
57:18 - so this is going to only make it do one
57:20 - request and now you can see that
57:23 - our state that we just console.log has
57:25 - all the data so now we can start mapping
57:27 - all of these things and just spit it out
57:30 - so i'm going to
57:32 - open this thing right here i'm going to
57:34 - get rid of this console.log
57:38 - and we're going to start mapping so
57:39 - remember how i had to reference this
57:41 - thing so i'm going to use the same exact
57:42 - structure so i'm going to say
57:46 - to do's dot map so we're going to have a
57:48 - to do and i am going to structure it as
57:52 - tr because remember it's like this
57:55 - and then the first td
57:57 - is going to be
57:59 - results of to do dot description
58:03 - how did i get this because if you look
58:04 - inside here remember
58:08 - if i open my console and i look at the
58:10 - data that we have
58:13 - so i have to refresh this
58:17 - oh oops
58:19 - sorry let me console.log this again so
58:21 - at least you guys can understand how i'm
58:22 - getting these data
58:25 - so i'm just going to console.log to do's
58:29 - and then if we look inside here
58:31 - you can see that we are going to be able
58:33 - to get
58:34 - access to the description
58:37 - so let's do that really quick
58:40 - so i'm going to say to do that
58:41 - description and finally i'm just going
58:43 - to add a td that's going to have edit
58:45 - and then i'm also going to have a td
58:47 - that's going to say delete these are
58:49 - going to eventually be buttons but at
58:51 - the meantime we're just going to be
58:52 - focusing on mapping the data
58:54 - and now if we look into here
58:57 - check that out we're able to list all
58:59 - our descriptions and then we have
59:01 - potentially our buttons that we're going
59:02 - to be using to edit information and to
59:04 - delete so in the next section we're
59:06 - going to start focusing on deleting and
59:08 - then later on editing
59:16 - okay so let's start focusing on our
59:17 - delete button over here so i'm going to
59:19 - start opening this thing up
59:21 - and i'm going to go to the bottom of
59:23 - this delete button right here
59:24 - and i'm going to try to make it to a
59:27 - real button so i'm going to say button
59:30 - button and it's going to say delete
59:33 - and i'm going to add a class name
59:36 - of btn and btndanger so it looks like a
59:39 - real danger button
59:42 - okay so that should make it look a
59:44 - little bit better there we go oops okay
59:47 - let me get rid of that little
59:49 - sign over there
59:51 - okay so now things should get a little
59:52 - bit better
59:53 - so the thing about delete button is that
59:55 - i want to have it happy on click
59:58 - so when i click on this thing it's going
60:00 - to specify the id that i'm trying to
60:03 - delete from this specific to do and then
60:05 - it's going to make a fetch request to
60:06 - delete that data so let me explain
60:09 - really what you're seeing here is that i
60:11 - need to list all my unique keys and the
60:13 - reason this is happening is because it
60:15 - wants to make sure all my to-do's are
60:16 - unique
60:17 - so if i go inside here i can simply say
60:20 - key
60:21 - and remember my to-do
60:24 - dot to do id is what makes my deduce
60:26 - unique
60:27 - so in the same concepts i can use this
60:29 - to do id and put it inside here
60:33 - so what i'm going to do
60:35 - is that i'm going to say on click
60:37 - and i'm going to create a function
60:39 - that's going to
60:41 - oops
60:43 - i'm going to create a function that's
60:44 - going to be called delete to do
60:47 - and it is going to take an argument of
60:49 - that to do id so we can specify what a
60:51 - cycle we want to delete so i'm going to
60:54 - put inside here to do that to do id
60:57 - okay
60:58 - and now i'm going to start defining it
60:59 - so you see we already have error that's
61:01 - been spit out so let's go to the top
61:04 - things are starting to get a tiny bit
61:05 - messy so i'll just kind of
61:07 - add a comment here that this is going to
61:08 - be the delete function
61:13 - i'm going to say constellate
61:17 - it's going to also make an asynchronous
61:19 - request
61:23 - and i'm going to do try catch
61:25 - error
61:26 - console.here error.message
61:30 - okay
61:30 - and inside here we're going to make a
61:32 - fetch request specifically a delete
61:34 - fetch request in order to uh delete that
61:37 - specific to do in our restful api
61:39 - so what i'm going to do is say cons
61:41 - delete
61:43 - to do
61:44 - and remember we're having an argument
61:46 - site here so i'm going to put id inside
61:48 - here
61:49 - so i'm going to say delete to do and i'm
61:51 - going to say await
61:54 - and it's going to be a fetch request
61:56 - to http
61:57 - localhost
61:59 - 5000
62:00 - to do's and then we have to specify the
62:02 - id over here so in this case i'm going
62:06 - to make some template strings and
62:08 - essentially type of strings allows you
62:10 - to put variables within your
62:14 - your strings so i'm going to add dollar
62:16 - sign and i'm going to add that id over
62:18 - there so remember i'm going to go to
62:21 - to-do's and i'm going to delete the id
62:23 - that's specified as the argument that i
62:25 - passed inside there okay
62:28 - so now uh to make sure that we are truly
62:31 - doing this oh i almost forgot that i
62:34 - also have to configure this as a delete
62:36 - so i'm going to add an object over here
62:38 - and i'm going to say the method is going
62:40 - to be delete
62:42 - okay
62:43 - and that's all i'm going to be doing
62:46 - to ensure that everything is working all
62:47 - right let's just do console.log delete
62:50 - to do
62:53 - to see that whether or not it was
62:54 - successful
62:56 - let's go inside here
62:58 - let's go for let's say for example this
63:01 - one
63:02 - so let's say i click delete
63:04 - and you can see that we have a status of
63:06 - 200 so this was i need to clean my room
63:08 - so let's make sure we deleted that
63:11 - it should delete this one right there
63:14 - so cool we deleted the information
63:16 - so that's all we need to do to delete
63:18 - information
63:19 - and in the next section oh sorry no not
63:22 - in the next section the thing is is that
63:24 - i want to be able to uh
63:26 - instantly get rid of this i don't want
63:27 - to keep refreshing because you can see
63:29 - it's still there
63:31 - and after i refresh it then it's going
63:33 - to go away right there's one less clean
63:35 - my room
63:36 - so
63:37 - to ensure that we don't have to do this
63:39 - i prefer to use a filter
63:41 - so what i'm going to be setting is i'm
63:42 - going to say set to do's
63:45 - and i'm going to grab that to do state
63:47 - that i have over there i'm going to say
63:49 - to dose
63:51 - and then i'm going to do a filter
63:53 - so filter essentially sets up a
63:55 - condition and if the to-do is
63:58 - like fit that condition then it's only
63:59 - going to return those that qualified
64:02 - so i'm going to say to do
64:05 - and i'm going to say if the to do
64:08 - that to do ids so i'm getting all the
64:10 - introduced studio ids does not equal
64:13 - to that to do or to the id that i
64:15 - specified inside my argument
64:18 - then spit those out so it's going to
64:20 - spit every other to do except the ones
64:22 - that i'm trying to delete so you'll see
64:25 - what i'm going to do pretty soon
64:27 - so let's go inside here
64:28 - and check this out
64:30 - so i have all these data i could just
64:32 - delete
64:34 - okay look at that so i could delete all
64:36 - these information and it's going to
64:38 - shorten my array
64:39 - and we can look inside here that
64:42 - the information was deleted
64:44 - so cool
64:45 - so in the next section we're going to
64:47 - start editing your information
64:54 - all right so let's start working on
64:55 - editing information so i decided to just
64:57 - have a clean start so let's say i need
65:00 - to clean my room again
65:02 - and i'm just going to add that really
65:03 - quick so we can edit something at least
65:06 - and i'll just add a second item
65:08 - between my floor
65:12 - very creative
65:13 - okay so now that's all set up so i'm
65:16 - just going to go inside my edit to do
65:20 - and i'm just going to make a simple
65:22 - component
65:25 - and then i'm just going to say cons edit
65:27 - to do
65:30 - i'm just going to return a simple h1
65:32 - that's going to say edit to do
65:35 - and then i'm just going to export
65:36 - default that
65:38 - and instead of putting it inside the
65:40 - app.js i'm going to be putting it inside
65:42 - list to do's
65:45 - so what i'm going to do is i'm going to
65:47 - go to the top of this
65:48 - and then i'm going to
65:50 - import that
65:52 - so i'm going to say import edit to do
65:55 - from
65:57 - edit to do
65:58 - and now i can go to the bottom right
66:00 - here and instead of having that edit
66:02 - button or that edit text being displayed
66:04 - i can put it inside that
66:06 - component
66:08 - so now let's see what this looks like
66:11 - okay so we have two very big ones but at
66:14 - least we know it's going to be working
66:16 - so now we can do some real things with
66:17 - this edit to do component so i'm going
66:20 - to open this fragments
66:23 - and
66:24 - we're just going to put it right here
66:29 - all right so let's go back into
66:31 - w3schools
66:33 - and then we're going to so if you can
66:35 - join me you can write w3schools
66:39 - bootstrap 4 and modal so i already have
66:42 - it all set up and then you can click on
66:44 - this
66:45 - and the first thing you're going to see
66:46 - is this blue button which is exactly
66:48 - what we need because if we click on it
66:50 - we want to display a modal
66:52 - so i'm going to take all of this data
66:54 - right here
66:57 - and then i'm going to go to my edit to
66:59 - do and i am going to spit it in here
67:03 - and you're going to get an error so we
67:04 - just get rid of all these comments
67:08 - all right
67:09 - a modal header needs to go away too and
67:12 - i think nope there's one more
67:15 - all right so now if i refresh this or if
67:18 - i save it
67:21 - data should be different
67:23 - so if we look inside here you'll see
67:24 - that we have a button so right here we
67:27 - can like open things up so i'm going to
67:29 - change this to edit button and i'm just
67:31 - going to modify this by having another
67:33 - edit button here along with the input so
67:36 - we can edit our information
67:37 - let's do that
67:39 - so instead of open model
67:41 - i'm going to say edit
67:44 - and then i'm going to go down here
67:46 - and say
67:51 - all right
67:52 - and then instead of modal body i'm going
67:54 - to have a simple input
67:59 - input type of text we'll just keep it
68:00 - like that for now
68:03 - and then
68:04 - and also i think i should add a class
68:06 - name
68:08 - control
68:09 - to make it look a little bit better
68:11 - and then remember i want to have a edit
68:13 - button besides the close button so i'm
68:15 - going to take that and i'm going to put
68:17 - it right there
68:18 - call it edit
68:20 - and this is going to be red so i want to
68:22 - make this warning
68:26 - keep it consistent i'm also going to
68:28 - make this warning as well
68:32 - so let's see how this looks like
68:36 - so we go inside here you'll see that
68:38 - this looks so much a little it looks a
68:40 - little bit better than our last one so
68:41 - now we can put in some data and then we
68:43 - can click edit to edit the information
68:46 - so currently at the moment
68:47 - this description doesn't have any
68:49 - correlation with this edit model so we
68:51 - need to pass that props inside this edit
68:53 - component
68:54 - so remember in list seduce we are just
68:56 - mapping all those different types of to
68:58 - do's so we can add that as a prop for
69:00 - edit to do component
69:03 - so i'm just going to add to do inside
69:04 - here
69:05 - now we have this for disposal so go to
69:07 - edit to do
69:09 - and let's add inside here to do because
69:11 - there's a prop i'm going to structure it
69:13 - and to ensure that we're on the same
69:15 - page console.log to do to see what i'm
69:18 - talking
69:18 - about so if i open my
69:22 - my inspect
69:23 - so you see what i'm talking about
69:26 - see now
69:27 - each of these items
69:29 - have access each of these to do's have
69:31 - access to these things so you can see
69:33 - that this one goes with i need to clean
69:35 - my room and then this one right here
69:37 - goes with that
69:38 - second item right there
69:41 - all right so i'm going to open this back
69:44 - up and now i want to be able to display
69:46 - it so i'm going to have to keep track of
69:48 - it
69:49 - so i'm going to take a new state
69:53 - and now i'm going to say kant's
69:55 - description
69:57 - and then i'm going to say set
69:58 - description because i want to set a new
70:00 - description later on and a new state
70:02 - so i'm not going to set it to empty
70:04 - string but rather since i already have
70:06 - this to do i'm going to set it by
70:07 - default to do to do description
70:13 - the reason for this because i want to
70:14 - edit the information so i really need to
70:16 - know what's already there
70:19 - and then what i'm going to do next is
70:20 - i'm going to set the value to that
70:26 - it's going to be description
70:29 - so let's check this out really quick
70:33 - if you look inside here you'll see that
70:34 - i need to clean my room but you're also
70:36 - going to notice something really strange
70:38 - is that if i click on this
70:41 - it's going to say i need to clean my
70:43 - room as well it's not i need to clean my
70:44 - floor
70:45 - now the reason for that is because the
70:47 - correlations are wrong
70:49 - so a modal works this way when you click
70:51 - on a button it's going to target a
70:53 - specific id
70:54 - and then in this case this id is my
70:56 - modal so it's always going to be opening
70:58 - this model so we need to ensure that
71:00 - each of these buttons and each of these
71:02 - models are unique
71:04 - so let's make sure that these things are
71:05 - different and the best way to make sure
71:07 - it's unique is we can use that to do to
71:09 - do id
71:11 - so let's do that really quick so i'm
71:12 - just going to use the numbers now you
71:14 - can't just use numbers with your ids so
71:17 - you also need to put like a string on
71:19 - top of that so i'll do that really quick
71:22 - so i'm going to say template strings and
71:24 - i'm going to say id and then i'm going
71:26 - to add that to do
71:27 - that to do id
71:30 - so this is what it's going to look like
71:31 - in case you're still a little confused
71:33 - of what's happening
71:36 - all right like do it like this
71:38 - essentially what i'm writing is going to
71:40 - be id is going to equal to id
71:43 - and then it's going to be whatever
71:45 - number we specified so it's going to
71:46 - look like that and then we're going to
71:48 - target that so i'm going to go inside
71:50 - here
71:51 - and i'm going to say dollar sign
71:53 - this
71:54 - and i'm going to say oops sorry not
71:56 - dollar sign yet
71:58 - let me get rid of this
72:00 - i'm going to run a template string and
72:02 - i'm going to do the hashtag because
72:03 - we're targeting that id
72:05 - and then i'm going to say
72:07 - id
72:08 - and then i'm going to specify that
72:09 - number
72:12 - all right so now they're all unique and
72:14 - they'll present each other's when we
72:15 - click on their individual buttons
72:18 - now if i click on i need to clean my
72:20 - room you'll see it's right there and now
72:22 - if i click on this one it should say i
72:24 - need to clean my floor so cool so the
72:26 - next step is is that i want to edit this
72:28 - information and then click edit to
72:30 - transform it
72:32 - or to update it
72:33 - so i'm going to go down here
72:36 - and i'm just going to go over to my
72:39 - input and i'm going to run the unchanged
72:41 - because i want to change the information
72:44 - so inside here i'm going to say
72:46 - e is going to equal to set description
72:50 - i'm going to say either target that
72:52 - value
72:53 - so now i can change this thing
72:55 - oops i also have to add this as well
73:00 - don't forget that
73:02 - and now if i click edit i can start
73:03 - adding some information into this thing
73:06 - okay so next
73:08 - what's going to happen after that is
73:10 - that when i click this edit button right
73:12 - here
73:13 - i want to be able to send that data so
73:16 - this one right here is going to be
73:17 - changing the description state and this
73:19 - one is going to ch is going to send that
73:22 - description state to update it
73:24 - so i'm going to set unchange this
73:28 - on change and on click
73:30 - and it's going to send a request
73:33 - to
73:34 - let's set it to
73:36 - update description so this is a function
73:37 - that we're going to be using
73:40 - and i'm going to put inside there
73:43 - all right so we haven't set this up yet
73:44 - so let's do that right now
73:48 - and i'm just going to add comments
73:49 - because it might be a little bit
73:51 - clustered so edit
73:53 - description
73:54 - function
73:57 - and what i'm going to be doing inside
73:59 - there is that i'm going to make that
74:01 - function so i'm just going to air
74:02 - function so it was called
74:05 - what i call the dash i think was edit
74:07 - description
74:09 - oh it's update description sure i'll
74:10 - just do that
74:11 - so
74:12 - update description
74:14 - your function
74:16 - and i also want to make this
74:17 - asynchronous so i'll just add that right
74:19 - there
74:21 - a regular try catch
74:24 - here console
74:26 - dot here
74:28 - that message
74:29 - and i'm going to pass that e because i
74:31 - don't want this thing to refresh yet i
74:32 - want to run my code so either prevent
74:36 - default
74:37 - okay so that looks pretty solid so now
74:40 - it's time for us to send a request so
74:42 - remember anytime we're going to be
74:43 - adding data we have to package this
74:45 - thing so i'm going to say const body
74:49 - is going to equal to that description
74:52 - okay so i'm packaging it all up and then
74:54 - now i'm going to send a response
74:56 - to my restful api
74:59 - oh if i can spell response
75:01 - and i'm going to say await
75:03 - fetch
75:04 - and i have to specify that route so http
75:07 - localhost
75:08 - 5000 slash deduce and then remember we
75:10 - have to also specify the id
75:14 - so let's make this template screen again
75:18 - and we're just going to say to do
75:21 - that to do id right because each one has
75:23 - their own unique id over there so once
75:26 - we specify this we also have to
75:27 - configure it a little bit more because
75:30 - like like i said again this is
75:31 - automatically going to make a get
75:33 - request
75:34 - so i have to make an object to say that
75:36 - the method is actually going to be a put
75:38 - request because we're updating then the
75:40 - headers
75:41 - that's going to be a
75:43 - content type
75:44 - make sure you put that strings so it's
75:46 - going to be a content type and inside
75:48 - here it's going to be application
75:50 - json and then i have to add that body
75:53 - over there so again i'm going to package
75:55 - it all up json.stringify
75:58 - and then i'm going to put in that body
76:01 - over there
76:03 - so if all works well and i guess just to
76:07 - double check on this
76:09 - let's just console.log the response to
76:10 - make sure that everything is working
76:14 - so let's do this really quick let's go
76:15 - out here
76:17 - i'm going to inspect
76:20 - so i'm going to go to my console and i'm
76:22 - going to see if i can actually edit this
76:24 - information
76:25 - so i'm going to say
76:27 - let's actually change this up a little
76:28 - bit so i'm going to edit this and say
76:31 - wash the
76:33 - dishes
76:34 - so i'm going to edit this
76:36 - so it says that it was a status of 200
76:39 - that's a great sign and now what we can
76:41 - do is we can check inside our
76:43 - command line to see whether or not that
76:45 - actually did work
76:47 - and it says wash the dishes so cool so
76:49 - we're able to update our information so
76:52 - the only thing that we need to do left
76:53 - is just do window
76:56 - location
76:57 - slash so we're just going to start
76:59 - refreshing it so we can see the changes
77:01 - being done okay so now if you look at
77:03 - that you can see that changes has been
77:05 - done i can even change this back to car
77:11 - and you can see the data has been
77:13 - updated
77:15 - okay cool
77:17 - okay so what's next well there's also
77:19 - there's something a little bit weird
77:21 - with this is that if i see wash the
77:22 - dishes and let's say that i want to wash
77:26 - the clothes
77:27 - and let's say i don't actually want to
77:28 - change it this way so if i x out of this
77:31 - and i go back it doesn't change it back
77:33 - to wash the dishes i don't want that
77:36 - i want to be able to make sure that this
77:38 - thing changes back to its original
77:40 - description so let's go back into our
77:42 - coding editor and let's do that
77:45 - so i'm going to open this thing right
77:46 - here
77:49 - okay so since that thing is set up right
77:51 - there what else okay so
77:54 - whenever we click on this x button right
77:56 - here so where does it this x button we
77:58 - want to make sure that we set it back to
78:00 - its original form so i'm going to set
78:02 - unclick to this
78:04 - and i'm going to be running
78:06 - set description
78:08 - i'm going to set it back to its original
78:10 - form
78:12 - so let me show you that really quick
78:14 - so if we go inside here
78:16 - and we go back to our to-do list and i
78:18 - edit this
78:20 - and i want to change this to close and i
78:22 - don't want to actually edit it and i
78:24 - click x
78:25 - it should change it right back to it so
78:27 - nice
78:28 - so we just need to apply this to the
78:29 - close button and when we click outside
78:31 - so let's go back inside here
78:35 - there it is i'm going to take this on
78:37 - click right there and i'm going to apply
78:40 - it to all the other ones
78:42 - so remember we had a close button so i'm
78:44 - going to apply it to here
78:46 - and when we click outside the model
78:47 - button i want to make sure it resets it
78:49 - itself again as well so i'm going to be
78:51 - putting that inside
78:53 - where is it i'm gonna put it right there
78:57 - okay cool so now let's just go back to
79:00 - this again so if i decide to edit
79:03 - dishes now and i click outside
79:06 - i'll change it back to its original form
79:08 - and if i want to edit the information
79:12 - and i click edit
79:14 - oops okay sorry i accidentally clicked
79:17 - out so
79:17 - let's say i want to uh
79:20 - clean
79:22 - the floor
79:23 - and then i click edit
79:26 - you'll see that it edits the information
79:28 - i can also add data as well
79:34 - add that and then finally i could delete
79:37 - it
79:38 - so congratulations you have officially
79:40 - worked on the pern stack
79:42 - so in the next section what i'm going to
79:44 - do is give you guys a quick overview of
79:46 - what you guys did
79:52 - okay so do you guys remember this graph
79:54 - so this is exactly what we did we
79:56 - created our react application we click
79:58 - submit edit delete and it sent an http
80:01 - request to our restful api to instruct
80:03 - our database what needs to get done now
80:05 - i feel like a great way to review is
80:07 - just kind of going over how they
80:09 - interact with each other so i'll just go
80:11 - inside here and i'll just show you guys
80:13 - what's happening
80:14 - so as you can see this is our input to
80:16 - do and right there we sent an http
80:19 - request to todos made a post request and
80:22 - we were sending a description as our
80:24 - body so if you look inside here this is
80:26 - exactly what we're going to be taking so
80:28 - let me align it together
80:29 - so when you make that request it's going
80:31 - to hit this route it's going to take
80:33 - that description that we just specified
80:35 - and then it's going to insert that
80:37 - description to that value that we
80:39 - specified and it's going to return it
80:41 - nice now if we were to go to list to
80:44 - do's
80:45 - so remember what we did here is that we
80:47 - made a request to http localhost 5000
80:50 - slash to do's so if you go down here you
80:53 - can see all we did is hit that route we
80:55 - selected all the need to do and then we
80:57 - returned it back to here
80:59 - then we set that as our state
81:02 - and then if you look over to our edit
81:05 - and delete so we actually didn't do get
81:07 - a to do but don't worry it's not much
81:10 - different so we go to update a to do
81:14 - where is it at oh yeah there it is
81:16 - so whenever we were going to update
81:18 - something we had to specify exactly like
81:21 - what need to do was going to be so i had
81:24 - to hit slash to do specify the ids
81:27 - also say it's a put request and i have
81:29 - to send the data that i want to replace
81:30 - it with so in this case it was going to
81:32 - be description
81:34 - right there so
81:35 - after that it updated it set the
81:37 - description to what i specified and i
81:39 - told it where it was going to be located
81:41 - at which was to do id
81:44 - and then finally when we deleted
81:45 - something all we had to do and i think
81:48 - it's inside here
81:50 - yeah so anytime we delete it all we had
81:52 - to do was specify the method was delete
81:54 - and hit this route and specify also the
81:56 - id of it so if you look down here you
81:59 - can see that we put inside
82:02 - we passed this id and then we took that
82:04 - id over there and then we deleted from
82:06 - that deduce table where that to do id
82:08 - equals to that okay so i think you're
82:11 - starting to understand of how these
82:13 - things are being put together and how
82:15 - like full stack applications are being
82:17 - built with the print stack
82:19 - so again congratulations uh from here on
82:22 - i think of best ways to really kind of
82:24 - help you build applications is really
82:26 - just kind of start building your own
82:28 - applications uh maybe try building the
82:31 - to-do list without watching this
82:32 - tutorial and really test yourself of
82:34 - whether or not you really mastered of
82:36 - just working with the postgrad database
82:38 - okay but besides then uh congratulations
82:41 - and i wish you best of luck in building
82:42 - your other applications