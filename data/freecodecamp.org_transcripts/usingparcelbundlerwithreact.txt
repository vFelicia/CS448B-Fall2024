00:00 - hi this is nick karnick
00:02 - today we're going to talk about using
00:04 - parcel which is a web application
00:06 - bundler that offers blazing fast
00:08 - performance with zero configuration
00:12 - let's talk about some of the features
00:14 - parcel provides
00:16 - parcels blazing fast bundle times are
00:19 - accomplished via worker processes that
00:22 - use multiple cpu cores during builds
00:26 - rebuilds on the other hand are even
00:28 - faster because it uses the file system
00:30 - cache
00:33 - it can automatically bundle all your
00:35 - assets and has support for javascript
00:38 - css html
00:41 - file assets and more
00:43 - all without the need for plugins
00:47 - it also supports automatic code
00:48 - transformation using babel post css and
00:52 - post html
00:55 - parcel can split your code without any
00:57 - configuration
00:59 - it uses the dynamic import syntax to
01:02 - split the output bundles and you end up
01:05 - loading only files that are needed
01:07 - during the initial load
01:11 - it also supports hot module replacement
01:14 - without any configuration
01:17 - parcel will automatically update the
01:18 - modules in the browser as you make
01:21 - changes to your code
01:24 - another useful feature it provides is
01:26 - friendly error logging
01:28 - parcel prints syntax highlighted code
01:30 - frames when it encounters errors so you
01:33 - can pinpoint the problem
01:36 - let's dive into some code
01:38 - first let's create a new npm project
01:44 - then we're going to install the react in
01:46 - react dom
01:48 - packages
01:50 - followed by
01:51 - parcel bundler
01:53 - notice that
01:55 - the name of the library is
01:57 - parcel-bundler we need to install it as
01:59 - a dev dependency
02:01 - in addition you also should consider
02:04 - installing it as a global dependency
02:08 - with the dash g
02:10 - attribute
02:11 - so that you can run the parcel command
02:14 - from the command line
02:16 - i'm not going to do it on my machine
02:17 - because it's already installed globally
02:20 - but once that's ready
02:23 - what we could do is
02:25 - create
02:26 - a source folder with an app.js file
02:30 - and create a functional
02:33 - react component here
02:34 - first i need to import react from react
02:39 - followed by the react dom
02:42 - module
02:45 - then i'm going to create my app
02:47 - component
02:50 - as a functional component
02:53 - and return
02:55 - a div with an h1 tag
02:58 - with
02:59 - hello world
03:03 - as part of the text there i use the
03:05 - emmet syntax to generate this
03:09 - next we're going to render the app in
03:11 - the dom using react dom
03:14 - dot render
03:16 - and we're going to pass it app
03:18 - followed by
03:21 - a link to the
03:22 - root element which we will create next
03:27 - in
03:28 - the index.html file
03:32 - i'm gonna give this a title real quick
03:35 - and then let's create a div element with
03:38 - the root tag
03:40 - again i'm using the emmet syntax
03:42 - and
03:43 - we're going to create a script element
03:45 - with the source
03:47 - attribute that points to
03:50 - app.js
03:54 - all right let's go ahead and run this
03:57 - i'm going to clear the console
03:58 - and type in parcel
04:01 - and point it to my index.html file
04:05 - notice that it starts building
04:07 - some of the internal dependencies and
04:09 - packaging it
04:11 - and it's done in about three and a half
04:12 - seconds
04:14 - it runs on the default port one two
04:16 - three four
04:18 - on localhost
04:19 - so i'm going to
04:21 - open that
04:22 - link in the browser
04:26 - and there you go we have our hello world
04:28 - react application running in a matter of
04:31 - minutes using parcel
04:33 - with no configuration
04:36 - now
04:37 - let's go back to the app.js file and
04:39 - update our title here
04:41 - and call it hello parcel world and i'm
04:43 - going to save this
04:45 - and the moment i save it the application
04:48 - gets rebuilt
04:49 - much faster this time
04:51 - and
04:53 - hello parcel world shows up on the right
04:55 - as well that's using the hot module
04:57 - replacement feature in parcel
04:59 - now notice a couple of folders that have
05:01 - been created here there is a cache
05:03 - folder with a bunch of files that parcel
05:06 - uses internally
05:08 - so that it can rebuild much quicker
05:11 - in addition it creates a dist folder by
05:14 - default which contains everything that
05:17 - is public facing
05:19 - so
05:20 - our index.html file is present there
05:24 - with a slight modification parcel
05:26 - replaced the pointer to app.js
05:30 - with
05:30 - the bundled app.js file
05:33 - in addition there's also a map file
05:36 - which is useful for debugging purposes
05:39 - and as used by the browser so parcel has
05:42 - done all that work for us with zero
05:44 - configuration next
05:46 - let's go ahead and
05:48 - add an app.css file in our source folder
05:55 - and we'll
05:57 - give our h1 tag
05:59 - a color
06:01 - gray
06:03 - i'm going to save that go back to app.js
06:06 - i simply need to import
06:09 - app.css
06:12 - and when i save
06:13 - notice that parcel built it
06:15 - and if i were to refresh the project
06:18 - here i don't see my changes here and
06:20 - that's because
06:21 - when you add new files you need to
06:23 - restart parcel
06:25 - so i'm going to kill this and then rerun
06:27 - parcel source index html
06:30 - and it rebuilds everything
06:32 - and it doesn't connect to the browser
06:34 - automatically so you have to go back and
06:36 - hit refresh but the moment i hit refresh
06:38 - notice that
06:40 - the text shows up in gray
06:43 - let's go ahead and add an
06:46 - app.scss file
06:50 - i'm going to define a variable called
06:53 - color
06:54 - and give it a value black
06:56 - then we are going to set this value on
06:59 - the body background color
07:02 - by referencing dollar color
07:06 - and i'm going to save this
07:08 - followed by
07:09 - referencing it
07:11 - under
07:15 - the app.js file and notice that
07:18 - parcel is installing node sas
07:20 - and it's pulling in all the dependencies
07:22 - that it needs automatically
07:24 - and it's going to build that scss file
07:26 - for us
07:28 - and since it's set up to integrate with
07:31 - css
07:33 - we should see the
07:35 - background color change on on the right
07:39 - and that worked this time without a
07:41 - restart because internally parcel had
07:44 - integrated with the css loader now let's
07:47 - add a reference to a logo
07:51 - real quick i'm going to pull in a logo
07:53 - file from my other screen
07:58 - all right we're going to copy it under
08:00 - source
08:02 - and let's reference that file
08:04 - as logo
08:08 - from dot slash parcel logo svg
08:13 - now
08:14 - the moment i save it
08:16 - project rebuilds and nothing happens
08:17 - that's because we haven't added a
08:19 - reference here i'm going to add the
08:20 - image tag
08:22 - and point the source
08:24 - to the logo
08:27 - file that was referenced above
08:30 - and hit
08:31 - save here and voila
08:33 - we have the svg logo loading
08:37 - without any configuration
08:39 - we have created a very basic react
08:42 - application with a reference to a css
08:45 - file an scss file
08:48 - an svg logo
08:49 - and we're using the es6 syntax and we
08:52 - did all of that within a matter of
08:54 - minutes without any configuration
08:57 - that's the power of parcel
08:59 - and it's going to make webpack obsolete
09:02 - before we wrap up here i want to show
09:05 - you one more thing let's say we wanted
09:07 - to use the destructuring operator
09:10 - for
09:11 - props that are passed in
09:14 - and we assign it to rest
09:16 - if i were to save this
09:19 - notice a couple of things are going on
09:21 - here first we have an error message to
09:23 - the right where parcel is telling us
09:25 - that it does not understand what those
09:28 - three dots represent
09:30 - that's because babel does not support
09:32 - the spread operator by default so we
09:36 - need to import
09:37 - one of the
09:39 - plugins for babel
09:41 - so i'm going to install as a dev
09:43 - dependency
09:45 - babel
09:46 - plugin spable dash plugin
09:48 - transform dash object
09:51 - dash rest that spread that's pretty long
09:54 - for
09:56 - a package name
09:59 - so let's hope that works now that's
10:00 - going to import the package and the next
10:02 - thing we need to do is we're going to
10:04 - create a dot babel rc file
10:09 - parcel will read that file
10:12 - if it's available
10:14 - and we want to set the plugin
10:18 - plugins
10:20 - property to
10:22 - utilize the transform
10:25 - object
10:27 - rest
10:28 - spread
10:31 - plugin so i'm going to go ahead and save
10:32 - that let me clear the console here and
10:35 - we're going to restart
10:36 - parcel
10:41 - and notice that it's built now because
10:43 - we stopped parcel we need to refresh the
10:46 - page here
10:47 - and voila
10:48 - now we have the ability to use the
10:51 - destructuring operator so that's how you
10:53 - would
10:54 - introduce configurations as needed
10:57 - all right that brings us to the end of
10:59 - the video hope you enjoyed it if you
11:02 - have any questions or comments write
11:04 - them below and subscribe to my channel
11:07 - to be notified of future videos thank
11:10 - you