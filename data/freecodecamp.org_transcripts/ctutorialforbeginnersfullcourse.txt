00:00 - Hey, welcome to draft Academy. My name is
Mike in this course, I'm going to be teaching
00:03 - you guys everything you need to know to get
started writing c++, c++ is one of the most
00:09 - popular programming languages around. And
for good reason. It's an awesome programming
00:14 - language, it's actually a language that is
closely related to the C programming language.
00:18 - In fact, c++ is essentially just like the
next level of the C programming language.
00:23 - So if you're already familiar with the C programming
language, then you're gonna have no problem
00:27 - picking up c++. But even if you're not c++
is a great first programming language to learn.
00:34 - And in this course, I'm going to teach you
guys all of the core concepts. For c++, we're
00:39 - gonna start off just with the basics, we're
going to, you know, get everything set up,
00:42 - we'll install c++, we'll get you guys set
up with a text editor, and I'll show you guys
00:46 - how to write your first program, then we're
going to get a little bit more advanced. So
00:50 - we'll start looking at things like variables.
And we'll work with data, we'll even write
00:54 - a couple of different programs and some little
games. And then we're really going to get
00:58 - into the thick of it, we're going to learn
all sorts of different programming structures,
01:01 - things like loops, and if statements and classes
and objects, it's going to be awesome, we're
01:05 - going to cover all of the core concepts, not
just in c++, but all the core concepts for
01:11 - programming in general. So the knowledge you
learn in this course will actually be able
01:15 - to carry over to potentially other programming
languages as well. I'm really excited to be
01:20 - able to bring you guys tutorials on c++, it's
an awesome language, it's super fun to develop
01:25 - in. And it's a good first language to learn
if you're just getting into programming. So
01:29 - stick around for this course, you can kind
of work through the videos at your own pace.
01:33 - And hopefully you guys can learn something
about this awesome language c++. In this tutorial,
01:42 - I'm going to show you guys how to get everything
set up to start working with c++. So in order
01:47 - to start working with c++, and started writing
programs, and doing all that fun stuff, we
01:51 - actually have to do a little bit of setup,
we're actually going to need two things on
01:56 - our computer. The first thing we're going
to need is a text editor. And we're basically
01:59 - just going to use this text editor in order
to write our c++ programs, any text editor
02:04 - is going to work. Generally you don't want
to use a text editor like Microsoft Word or
02:08 - Google Docs, you're gonna want to use just
like a basic text editor, it could be something
02:11 - like Notepad, I'm going to show you guys a
special text editor called an ID, which stands
02:17 - for integrated development environment. And
we can use that text editor. It's basically
02:22 - just a an environment that's really awesome
for writing c++ code. And then we're also
02:27 - going to need in addition to a text editor,
we're going to need a program called a compiler,
02:32 - specifically a c++ compiler. And this is a
program that will basically take the c++ code
02:38 - that we write, and it will translate it or
transform it into a language that the computer
02:44 - is going to be able to understand. So as long
as we have a text editor, and we have our
02:47 - c++ compiler, then we're ready to start programming
in c++. So I'm going to show you guys how
02:52 - to get all that set up. First thing we're
gonna do is head over to our browser, and
02:56 - I'm over here on this website called codeblocks.
It's just www.codeblocks.org. And code blocks
03:03 - is what's called an ID. So it's an integrated
development environment, it's essentially
03:07 - just a special environment, special text editor
that can be used to write a c++ code. So this
03:14 - is going to be exactly what we need. I'm just
gonna click downloads over here. And you'll
03:17 - see there's a few options one says download
the binary release, download the source code,
03:22 - we're going to click download the binary release.
And this is going to bring us to this page,
03:27 - you can see there's a link over here for Windows
XP, Vista, seven, eight, etc. There's also
03:32 - links for Linux and Mac, let's click on this
windows option. And over here, you'll see
03:36 - there's a bunch of these different options.
So what we're gonna do is we're going to download
03:40 - this one over here that says codeblocks 1601
min GW setup. And actually, what's cool about
03:48 - this is it's going to include not only the
codeblocks text editor, but this is also going
03:53 - to include that c++ compiler that I was talking
about. So we can download both of those things
03:59 - in this one download for code blocks. So this
is the easiest way to do this as a beginner.
04:04 - So let's go ahead and download this, I'm just
going to come over here and click on this
04:07 - link for SourceForge. And this should start
downloading the file onto our computer. When
04:12 - codeblocks has finished downloading, let's
go ahead and open that up. So I'm just going
04:15 - to head over to my downloads folder. And we
can open that guy up. You can see over here
04:20 - it says codeblocks 1601 m i n GW setup. Let's
open this, and this should open up into an
04:27 - installer window. So let's click through this
installer window, and we can just select all
04:32 - the default options. And they should start
installing code blocks on our computer. So
04:38 - once code blocks has finished downloading,
then we have everything we need on our computer
04:42 - to start writing in c++. And you can see over
here I just opened up code blocks and the
04:47 - next tutorial we're going to talk about how
to set up your first code blocks project and
04:51 - get started writing c++. In this tutorial,
I'm going to show you guys how to get everything
04:59 - set up. To start working with and start writing
programs in c++, in order to set this up,
05:05 - we're actually going to need two different
things. The first thing we're going to need
05:09 - is a text editor where we can write our c++
programs. And really, for c++, you can use
05:15 - any text editor that you want. So a lot of
people might use like something like TextEdit,
05:19 - or maybe a different text editor. In our case,
we're going to be using something called an
05:23 - ID, which stands for integrated development
environment. And there's an ID, which is called
05:29 - codeblocks. That is specially designed for
writing c++ program. So I'm gonna show you
05:34 - guys how to download that, we're also going
to need one more thing, which is going to
05:38 - be a c++ compiler. And basically, this is
just a program that takes our c++ code that
05:44 - we write, and it translates it into a language
that the computer can understand. So when
05:49 - we want to run our programs, we want to, you
know, execute the programs with the computer,
05:54 - we can use this compiler to translate the
c++ that we write into computer code. So the
06:00 - first thing I want to do is show you guys
how to get that compiler. And it's possible
06:03 - that if you're on Mac, you might already have
it. But we want to do is go up here to this
06:08 - search bar. And we're just going to type in
Terminal. And we're going to click Enter.
06:13 - And this should open up the terminal. This
is basically just a window or a program that
06:18 - we can use to interact with the computer using
text commands. So down here, we want to check
06:23 - to see if we already have the c++ compiler
installed. So you just want to type in GCC
06:28 - hyphen, V. And just click enter. If you have
GCC, which is the C compiler we're going to
06:36 - be using installed and all this stuff should
come up with like a version number and, and
06:41 - everything. If this doesn't come up. In other
words, if you know it says that you don't
06:44 - have it, all you need to do to get this is
just say Xcode, select hyphen, hyphen, install,
06:53 - and this is going to go off and install everything
that we need for c++. So I'm just gonna click
06:58 - Enter. And I already have these installed.
So these are like command line tools, you
07:03 - can see I already have them installed. But
if you don't already have them installed,
07:07 - then this will basically just prompt you to
install them. Once that installer is done
07:11 - running, then you can just check to make sure
that you got GCC. So you can just say GCC
07:17 - hyphen, V. And make sure that you have it.
So once we have this c++ compiler installed,
07:23 - and we've run this Xcode, select Install command.
Now what we want to do is get a text editor.
07:29 - So like I said, we're going to be using a
special text editor called codeblocks. But
07:33 - really, you can use any text editor that you
want. So I'm going to go down here into my
07:37 - browser, and I'm over here on this website
codeblocks.org. And this is the website where
07:43 - we can download this program code blocks,
I'm just gonna click downloads. And over here,
07:47 - there's a couple options, you want to click
on the option that says download the binary
07:51 - release. So I'm going to click this. And you'll
see there's this little like list here, just
07:56 - click on Mac OSX. And this will bring us down
here. So it's basically just a zip file that
08:01 - contains the codeblocks application. Over
here, we can download it from SourceForge,
08:06 - I'm just gonna click this. And this should
redirect us to SourceForge and download the
08:09 - file for us. When codeblocks is done downloading,
I'm just going to go over to my downloads
08:14 - folder, and we'll see what we got. So we just
got the zip folder, I'm just going to double
08:20 - click it. And you'll see over here we get
the code blocks application. So what you should
08:24 - do is take this and drag it over to your Applications
folder. That way OSX knows that this is an
08:29 - application we want to use, then you have
everything that you need to start writing
08:33 - c++. So in the next tutorial, we're going
to set up a project in code blocks, we're
08:38 - going to set up our first c++ file, and then
we're going to run it and we'll just get everything
08:42 - set up and ready to go. In this tutorial,
I'm gonna show you guys how to get your first
08:50 - c++ project up and running in code blocks.
So over here, I just opened up code blocks.
08:56 - And this is sort of like the welcome screen
that we get when we first open it. And see
09:00 - over here, there's a couple options. One says
Create new projects. And that's actually what
09:05 - we're going to do. So before we're gonna start
writing our c++, I'm just gonna show you guys
09:09 - how to get a c++ project up and running and
ready to go in code blocks. So let's click
09:16 - Create new project. And this should open up
this little window over here. So you'll see
09:21 - there's all these different options. And these
are essentially just different types of c++
09:25 - applications that we can create. We're going
to just do the bare basics. So you want to
09:30 - come over here and click console application.
And then just click Go. And we're just going
09:36 - to click Next. And over here, you'll see we
can select between a couple different languages,
09:40 - we want to click c plus plus. So I'm going
to click Next. And we're just going to give
09:44 - this project a title. So I'm just going to
call it draft. And you'll see down here I'm
09:49 - storing it inside of my desktop if you want
to change it, you can come over here and you
09:53 - can put it wherever you want. Let's click
Next. And you'll see over here we just have
09:58 - a bunch of options. You can just leave these
as the Default, and we're going to click Finish.
10:01 - Once we click finish, then our c++ projects
should have been created. So over here, in
10:07 - our little Tree Viewer, you'll see that we
have our c++ projects. And down here inside
10:12 - of the sources folder, we have this file main
dot cpp, and CPP is a file extension that
10:18 - stands for c++. So I'm just going to right
click this and I'm just going to open it.
10:22 - And you'll see over here we have a bunch of
code that's already been included in this
10:28 - file. So this is essentially just like the
most basic c++ file that you can write. I
10:33 - mean, this is what we call like a Hello World
program. So you'll see down here, it's just
10:37 - printing out hello world onto the screen.
And don't really worry too much about what
10:43 - this stuff up here is, really, let's just
focus on this line down here, this line is
10:47 - actually going to print something out for
us. So if I was to come over here, and I'm
10:52 - actually going to come up here in my editor,
and I'm going to click on this build and run
10:56 - option, when I click this, a window should
pop up. And it should basically just say,
11:01 - like, Hello World, you'll see down here, this
little black window popped up and it says
11:06 - hello world. So let's just go over some basic
terminology. Generally, whenever we're going
11:11 - to run a program in c++, we're going to build
the program. And then we're going to run the
11:17 - program. Building the program basically means
that we're taking all this code over here,
11:22 - and we're converting it down into a language
that the computer can understand. So the first
11:27 - thing we always have to do is build the file,
then what we want to do is run the file, which
11:31 - basically means we're telling our computer
to execute all of the instructions that we
11:35 - wrote in our program. And there's a bunch
of different ways we can do that here in code
11:39 - blocks, you can click this little cog wheel
up here, and that'll build your program. And
11:44 - then you can click this play button over here,
that's going to run your program. But a lot
11:48 - of times, if you just wrote some new code,
and you want to test it out, you can just
11:51 - click this build and run option. And for the
most part in this course, we're always just
11:55 - going to be whenever I say we're running the
program, I'm just going to click this button,
11:59 - and we'll build it and run it at the same
time. So like I said, this is a very basic
12:04 - c++ file. In next tutorial, we're going to
talk about like, what all this stuff is, we're
12:09 - going to look at writing some of our own instructions,
maybe modifying these instructions. And we'll
12:13 - kind of dive a little bit deeper into you
know, just sort of the bare basics. But for
12:18 - now, we have everything set up. So we have
our c++ project set up, we have our first
12:22 - c++ file called main dot cpp, and we're ready
to start programming. In this tutorial, I'm
12:32 - going to talk to you guys about the basics
of writing a c++ program, we're just going
12:37 - to talk generally about what programs are
and how we can write them. And we're going
12:41 - to write a little program, which is going
to print out a shape onto the screens, this
12:45 - is going to be pretty fun. Down here, I just
have this basic program. And when I first
12:50 - created my c++ project, in the last tutorial,
we sort of got this basic program. And this
12:56 - was kind of given to us. And this is, you
know, essentially just a very simple c++ program.
13:01 - So I'm going to walk you guys through essentially
what we have here, we're gonna talk about
13:05 - a couple different things, and then we'll
start writing some code. So up here, we have
13:09 - these two lines of code. This is like hashtag
include iostream. And this one says using
13:15 - named scape STD. Essentially, what this does
is it's kind of like configuration options
13:22 - for our c++ file. As a beginner, like, you
know, don't really worry too much about what
13:27 - this stuff is or what it's doing. We're going
to talk more about all this stuff later in
13:31 - the course. But for now, just know that you
need to have it there in order for us to write
13:34 - our programs. Down here we have this line,
it says int main. And there's an open and
13:39 - close parentheses. This is actually what's
called a function in c++, again, don't worry
13:45 - too much about what a function is, I'm just
kind of throwing out these words. So you kind
13:50 - of familiar with hearing them. But essentially,
what this is, is, it's a container for us
13:55 - to put the code inside of our c++ programs.
So this function called main is a very special
14:01 - function because any lines of code that we
put inside of here, in other words, any lines
14:07 - of code that we put in between these open
and closed curly brackets, is actually going
14:12 - to get executed when we run our program. So
down here, I just have this thing it says
14:17 - return zero. And again, don't worry too much
about what this is, just know that you need
14:21 - to have this in this main function. Over here,
though, we have an actual line of code. So
14:27 - this says c out. And then it says hello world,
then it says end L and this is a basic line
14:36 - of code in our program. So again, any lines
of code that we put in between these curly
14:41 - brackets for this main function is going to
get executed when we run our program. So if
14:46 - I was to come up here and run my program,
and I'm just going to click this build and
14:50 - run option right here, you'll see when the
program runs, it prints out hello world. And
14:56 - you'll see this little window that opened
up here. This is what we would call The console.
15:00 - And the console is basically just a little
window that will output information. So whenever
15:06 - we run our c++ code, this console window is
going to open up. And sometimes we can tell
15:12 - c++ that we want to print things out onto
this console window. So if you ever hear me
15:17 - referring to the console, I'm just referring
to this window right here. Now let's get down
15:21 - and start talking about programming. So again,
any of the code inside this main function
15:26 - is going to get executed. And here, we just
have one line of code. So what I can actually
15:30 - do is I can copy this and down below here,
I can say something else. So I could say just
15:35 - like my name, Mike. And now when I run this
program, you'll see it's going to print out
15:39 - both of these things. So here on the first
line, it prints out hello world. And then
15:44 - over here on the second line, it prints out
Mike. And this is just sort of like basically
15:49 - how we could print something out to the console.
You'll see over here it says c out and that
15:54 - stands for console out. And then over here,
you'll see we have this little line, it says
15:59 - end L and this stands for end line. And basically,
what this means is we're ending the line where
16:05 - we're going to print out text. So you'll notice
that we printed out hello world. And then
16:09 - on the next line, we printed out Mike. So
using these little print statements, I'm actually
16:14 - going to show you guys how we can write a
little program that's going to draw a shape
16:18 - out onto the screen. So I'm actually going
to go ahead and get rid of this text. And
16:22 - I'm just going to copy this guy here a couple
times. So we'll make like four of these. And
16:27 - I'm going to print out a triangle onto the
screen. So I'm just going to print a forward
16:31 - slash, and then we'll do a space and a forward
slash. And I'm just going to keep doing this.
16:35 - And you'll see we're kind of drawing this
little diagonal shape upwards. Now I'm going
16:39 - to use vertical bars, and we're going to go
all the way down. So I'm just going to keep
16:43 - going like this. And down here, why don't
we put some underscores, and then we'll put
16:48 - the last vertical bar, you'll see over here,
I'm actually writing out a bunch of instructions.
16:55 - And each of these instructions is telling
c++ that we want to print out a different
16:59 - line onto the console. So now when I run my
program, you'll see we're actually printing
17:06 - out this little triangle. This is a very basic
program. But you'll see just by using those
17:11 - four simple instructions, we were able to
actually draw something out onto the screen.
17:16 - So let's talk about this. Essentially, what's
happening when we click that run button is
17:21 - c++ is going and it's looking inside of our
program. And the first thing it's going to
17:25 - do is it's going to look for this main function
right here. So it's going to look for this
17:29 - block of code. And that's basically just what
a function is, it's going to look for this
17:34 - block of code called main and inside of these
open and closed curly brackets, it's going
17:38 - to execute all of the instructions inside
of there. And basically, when we're writing
17:43 - a program, all we're doing is we're just telling
the computer a bunch of instructions. So we're
17:48 - giving the computer a bunch of instructions
that we want it to carry out. So imagine that,
17:54 - for example, in real life, like you were using
a recipe or something, a recipe is a lot like
17:58 - a program, a recipe has a list of instructions.
And if you follow those instructions correctly,
18:03 - then you end up with like something delicious.
That's basically what a program is a program
18:08 - is just a collection of instructions that
we're giving to the computer. And we can give
18:13 - the computer simple instructions like this.
And we can do something simple, like draw
18:17 - out a shape. But as we go through this course,
and we learn more and more complex instructions,
18:23 - and we learn how to use them together in unison
with each other, we're going to be able to
18:27 - tell the computer to do a bunch of complex
things. So the next thing I want to talk to
18:33 - you guys about is the order that these instructions
get executed. So just like if you were following
18:38 - the recipe, and you would start with the first
instruction, and you'd go down to the last
18:41 - instruction, the computer is going to execute
these instructions in order. So it's going
18:46 - to start with this instruction. And basically
here we're just telling the computer over
18:51 - telling c++ that we want to print this line
of text out onto the screen. So c++ is going
18:57 - to do this. And then once it's done with that,
it's going to move on to this instruction,
19:01 - it's going to print this out to the screen
onto the screen, etc. It's going to keep doing
19:05 - that. So actually, let me show you guys if
I was to get rid of this line, and I was to
19:09 - put it up here. Now you'll see when we run
our program that we're going to print out
19:14 - a funky looking shape. So instead of this
base being down at the bottom here, we're
19:18 - going to print it out on the top. And that's
because we change the order of the instructions.
19:24 - So again, all a program is it's just a set
of instructions that we give to the computer.
19:30 - That's it, it's very simple, the more complex
instructions that we can give the computer
19:35 - and the more ways that we're able to combine
those instructions in different ways, the
19:40 - more complex Our programs are going to be.
So as we go through this course, I'm going
19:43 - to be teaching you guys all sorts of more
complex instructions. We're going to learn
19:47 - different ways to do different things and
will use real world examples to build little
19:51 - applications. And you'll end up learning a
bunch along the way. And this tutorial, I'm
19:58 - going to talk to you guys about using variables
in c++. A lot of times when we're writing
20:04 - programs in c++, we're going to be dealing
with all different types of data and information.
20:10 - And a lot of times when we're dealing with
that data and information, it can be kind
20:13 - of hard to keep track of. and a variable is
basically just a container where we can store
20:19 - different pieces of information or different
data values in our programs. And it makes
20:24 - it a lot easier for us to manage and maintain
and use that data. So I'm going to show you
20:30 - guys an example. And we'll show you guys basically
how variables are useful and how we can use
20:35 - them in c++. So down here, I have a very basic
program that I've written out, you'll see
20:41 - down here, I'm basically just printing out
a bunch of lines of text, it says, There once
20:45 - was a man named George, he was 70 years old,
he liked the name George, but did not like
20:50 - being 70. So this is basically like my little
story here. And you'll see I can run my program.
20:56 - And this is a valid program in c++, it basically
just prints out the story. And we have all
21:01 - of our information. So you know, this is a
pretty nice c++ program. It serves its purposes.
21:08 - But let's say that I'm looking at my story.
And I'm thinking, Hmm, maybe I want to change
21:13 - the character's name, right. So maybe I don't
like the name, George, maybe I want to change
21:17 - it to a different name. So what I could do
is I could go through and I can manually change
21:21 - it in each line of code. So I could come here
where it says George, and I could change it.
21:26 - Let's say we want to change the character's
name to john, right, so I can change it to
21:29 - john. I'll keep looking through the story
down here. It also says George, so I'll change
21:33 - it to john. And there we go. We've changed
the character's name, we've officially updated
21:38 - it. Let's say maybe now I'm thinking to myself,
I think I want to make the character a little
21:42 - bit younger, instead of 70. Why don't we make
john 35. So I can do the same thing, I can
21:47 - go in and manually change the value of 70
to 35. So we can come over here, and we can
21:52 - say he was 70, which changes to 35. And we'll
say did not like being 17. Okay, so we'll
21:59 - change that to 35 as well. So now we've officially
updated our store, we've changed the character's
22:04 - name, and we've changed the character's age.
Here's the problem though. In order to make
22:09 - those changes, I had to manually go through
and individually edit each one of the places
22:15 - where the characters name showed up or the
characters age showed up. And imagine that
22:20 - instead of having a story that was only four
lines long, I had a story that was like hundreds
22:25 - of lines. And we mentioned the character's
name hundreds of times, and we mentioned their
22:30 - age hundreds of times, well, all of a sudden,
it becomes a lot more difficult for me to
22:36 - manage those pieces of information. So it's
difficult for me to manage the character's
22:40 - name and the character's age. Right, if I
had a story that was hundreds of lines long,
22:45 - and we mentioned the character's name 100
times having to you know, go and modify and
22:49 - update that name would be a very tedious task,
because I'd have to go through and essentially
22:53 - just do it manually. This is where something
like variables come in. A lot of times in
22:58 - our programs, we're going to have different
pieces of information, different data values
23:02 - that we want to keep track of, and we want
to be able to manage. So what we can do is
23:06 - we can take those pieces of information, and
we can put them inside of containers called
23:11 - variables. And variable. Like I said, it's
just a container where we can store a piece
23:16 - of data. And we'll make it a lot easier for
us to use and manage that piece of data in
23:21 - our programs. So I'm gonna show you guys how
we could create a variable that can store
23:25 - the characters name and the character's age.
And you'll see why this can be useful in something
23:30 - like this. So over here, I'm going to create
a couple of variables. When we create a variable
23:37 - in c++, we actually have to tell c++ a couple
things. The first thing we have to tell c++
23:42 - is what type of information we want to store
inside of the variable. Now, in the next video,
23:49 - I'm going to talk to you guys all about the
different types of data that we can use in
23:53 - c++. But for now, I'm just gonna show you
guys two types of data. The first type of
23:57 - data that we can store inside of a variable
is called a string. And that basically means
24:03 - it's a string of characters. So it's like
plain text. So this down here, where it's
24:08 - saying There once was a man named john, this
is a string, right? It's plain text in our
24:12 - program, a lot of times we're going to be
dealing with strings. So I'm going to create
24:15 - a string variable. In other words, I'm going
to create a container that can store a string
24:21 - value. So I'm just going to say string. And
that's the first thing that we have to tell
24:25 - c++. The next thing we have to do is give
this container give this variable a name.
24:31 - So what we want to do is give this a descriptive
name, which will basically tell us what is
24:37 - inside of the variable. So I'm just going
to call this character name just like that.
24:43 - And what I can do now is I can give this a
value so I could say character name is equal
24:48 - to and now we can type in the character's
name so I could say, john, just like that.
24:53 - Alright, so once we've created this character
name value variable now this value, john,
24:59 - this string value is now stored inside of
this character named variable. The next thing
25:04 - we're going to do is create another variable
to store the character's age. In addition
25:09 - to storing data in the form of a string, we
can also store numbers. Now age is a whole
25:16 - number. So what I can do is I can store it
inside of something called an integer. And
25:20 - an integer is basically just a whole number.
So I can just say int, and I can just call
25:25 - this character age. Now I want to show you
guys another thing that we can do. So up here,
25:31 - what we did is we said string character name,
and we set it equal to a value right away.
25:37 - But what I could also do is put a semicolon
here. And also I do want to point out, whenever
25:43 - we're writing lines of code in c++, every
time you finish writing a line of code, you
25:48 - want to put in this semi colon. I'm not sure
if I mentioned that in the last video. But
25:52 - the semicolon basically tells c that we're
done with that line of code. So this separates
25:57 - one line of code from another. So you need
to always make sure you put these semicolons.
26:02 - But with a variable, what I could do is I
could say int character name, I could do the
26:05 - same thing for string. And then I could go
on to a new line. And I could give this a
26:10 - value. So I could say like, character age
is equal to and now I'm just going to type
26:15 - in a number. So we said that john was going
to be equal to 35. And you'll notice when
26:19 - we use numbers, we don't have to surround
these with quotation marks, we just can type
26:24 - out the number. So now we have two variables,
and I showed you two different ways that we
26:28 - can create them. And what we can do is we
can use these variables inside of our story.
26:34 - And you'll see how this makes it a lot easier
for us to maintain this program. So what we
26:39 - want to do is we want to replace every instance
of the characters name and the characters
26:44 - age with the variable. So instead of just
printing out john here, I want to refer to
26:50 - this variable. And the way that we need to
do that is we basically need to include this
26:55 - variable. So over here, I'm printing out this
string of text, I'm printing out a bunch of
27:01 - plain text, right. But let's say instead of
just printing out john here as plain text,
27:06 - I want to instead print out the value that
was stored inside of the character name variable,
27:12 - what I can do is I can just get rid of john.
And I can say less than sign less than sign.
27:18 - And what this is basically going to tell c++
is that we want to take the value that we're
27:23 - going to type out here, so I'm just going
to type out character name. And it's basically
27:29 - telling c++ that we want to take this value,
and we want to insert it right here, inside
27:34 - of this line of text. So when I go ahead and
run my program, now, you'll see that we're
27:41 - still printing out there once was a man named
john. Except now I didn't actually type out
27:46 - john, all I did was include this variable
right here. And I basically just said that
27:53 - we want to put the variable right in there.
So that's how we can include a variable inside
27:58 - of one of these print statements. So over
here, I'm going to do the same thing. So I'm
28:02 - just going to say less than less than character
name. And now this is going to insert the
28:08 - character name. In other words, it's going
to insert the value stored inside of the character
28:13 - name variable. at this position, we can do
the same for the age. So over here, we have
28:18 - the characters age, I'm going to get rid of
that. And I'm going to say less than less
28:21 - than, and now, character age. And so the value
inside of the character age variable is going
28:27 - to get placed right in there. And we have
one more place where we have the characters
28:32 - age. So over here, I'm going to get rid of
this. And now this is going to be special.
28:38 - So you'll see over here, we want to insert
the value inside of the character age variable,
28:42 - right in between all of this text. So I want
to put it right here, what I can do is I can
28:47 - make two quotation marks. And essentially
what this is doing is it's saying this is
28:52 - going to be its own string of text. And this
is going to be its own string of text. And
28:56 - I can make to less than signs, I can type
out the character age variable. And then I'm
29:03 - going to make two more or less than signs.
And this is essentially just going to string
29:07 - all of these together. So it's gonna say,
print out this text, then print out the value
29:13 - inside of the character age variable, then
print out this text. So I've now replaced
29:19 - every instance of the characters age, and
every instance of the character's name with
29:23 - those variables. Let's run our program and
see what happens. Over here, you'll see we
29:29 - have the same exact story as we did before,
there was a man named john, he was 35 years
29:34 - old john 35. So without having to manually
do anything, we were able to include those
29:40 - values. And now what's cool about variables
is if I wanted to update the character's name,
29:46 - or update the character's age, all I have
to do is change it up here in one spot. So
29:51 - if I wanted to change the character's name
to Tom, and I wanted to make Tom let's say
29:55 - 50 years old, I only have to modify the values
that Getting stored in the variables in, they'll
30:02 - automatically update down in our story. So
now when I run my program, you'll see it's
30:07 - using the name Tom. And it's saying that he's
50 years old. So that's kind of an awesome
30:13 - way that we can use these variables. Another
cool thing that these variables allow us to
30:18 - do is modify the value. So let's say that
halfway through our story, I wanted to change
30:23 - the character's name. So halfway through,
I wanted to make the name be a different name,
30:29 - all I have to do is say, character name. And
I can actually assign this a different value.
30:34 - So I could give this the value of Mike. And
again, I'm going to need a semicolon here
30:38 - at the end of this line of code. And now you'll
see halfway through the story, the character's
30:43 - name is going to change. So it says There
once was a man named Tom. And down here, it's
30:48 - using the name, Mike. So not only was I able
to just use those variables to insert these
30:54 - values, but I can actually modify those variables
at different places in my program. So that's
31:00 - pretty awesome. Now, this is just sort of
like the bare basics of variables, variables
31:05 - are containers, they allow us to maintain
and keep track of the data and the values
31:11 - in our programs a lot better. And they also
give us the advantage of only having to assign
31:16 - a value once so I can assign a value once
up here. And then I can use it and refer to
31:21 - it in different places down here. I can also
modify those values in different places in
31:26 - my programs. So in this tutorial, we talked
about storing values as strings of text, and
31:32 - as integers, which are whole numbers. In the
next tutorial, I'm going to show you guys
31:36 - all of the different types of information
and the different types of variables that
31:40 - we can create in our programs. In this tutorial,
I want to talk to you guys about the different
31:48 - data types in c++. a data type basically just
means a type of data or a type of information
31:56 - that we can use and work with inside of our
c++ programs. So there's all different types
32:01 - of information, we can store like text, different
types of numbers, decimal numbers, true false
32:06 - values, all sorts of stuff. And I'm gonna
kind of walk you guys through what all of
32:10 - those are and how we can use them. So the
easiest way for me to demonstrate this is
32:14 - just going to be to create a bunch of different
variables. So any of the different types of
32:19 - data that we can work with in c++, we can
actually store inside of variables. So I'm
32:25 - just going to create a couple of different
variables and kind of show you guys exactly
32:30 - how this is going to work. So the first data
type I want to talk to you guys about is called
32:34 - a character. And a character basically allows
us to represent one single character. So the
32:40 - way we can create a character variable is
just by saying CH, ar. And now I want to give
32:45 - this a name. So let's just call it like grade
or something. And whenever we create a character,
32:49 - we're going to use these single quotation
marks. So I can store any like regular character
32:55 - that I would want inside of here. So you know,
essentially any character that you can think
32:59 - of, you could store in here, and then we're
going to include this semicolon. So that's
33:03 - basically like the character data type. And
in addition to just storing one single character,
33:09 - there's going to be a lot of situations where
we're going to want to store like more than
33:12 - one. And what we can actually do is use something
called a string. And a string is basically
33:18 - just a string of characters. So it's, instead
of just being one single character, it's like
33:23 - a bunch of different characters. So this would
be like, essentially just plain text that
33:26 - we would see in a program. So I could just
say string. And we could just call this like
33:31 - phrase. And when I create a string, I can
use these double quotation marks. So I can
33:37 - say, like, draft Academy or something. And
now we're going to be able to store instead
33:43 - of just one character, a bunch of different
characters. So there's different situations
33:47 - where you might want to use either like a
char or a string. But for the most part, I
33:52 - think strings are probably a little bit more
commonly used than chars. So instead of just
33:57 - plain text, we can also store and work with
numbers. So essentially, there's two different
34:04 - types of numbers are two basic types of numbers.
There's whole numbers, and then there's decimal
34:08 - numbers. Some people will also call those
floating point numbers, a whole number is
34:13 - like a counting number. So think like 12345,
right? There's just whole number of solid
34:17 - numbers, there's no decimal points, right?
Then we have decimal numbers, so it'd be like
34:21 - 0.5, or 1.267, or 10. Point 11. You know,
basically a number that has a decimal point
34:29 - after it. When we work with these different
numbers, c++ is actually going to distinguish
34:34 - between them. So the first type a number we
can work with is an integer. So I could just
34:38 - say int, and this could be like an age or
something. So whenever we're creating a number,
34:43 - we can just type out the number so I could
say like 15. And you'll notice I don't need
34:47 - any quotation marks. I don't need anything
special surrounding this, I can just type
34:51 - out the number. In addition to positive numbers.
You can also use negative numbers, but anytime
34:57 - we're using an integer, you can't have a decimal
points, he can't do anything with decimals,
35:02 - these are just going to be solid whole numbers.
If you want to work with a decimal, you have
35:08 - two basic options. So there's two data types
that represent decimals in our programs. The
35:14 - first is called float. And this basically
just stands for like floating point number.
35:19 - The second one is called double. Now you'll
hear different people talk about these different
35:25 - data types, the main difference is just how
many decimal points they can store. So a double
35:30 - can store more decimal points than a float.
So if you need a number to be very specific,
35:35 - as far as like how many decimal points you
can take it to, then you definitely want to
35:39 - use a double. And I would say for the most
part, as a beginner, just only worried about
35:44 - doubles, floats will be used more in specific
circumstances. But you know, as you're just
35:49 - learning this language, really just worry
about double. So we can just say double like
35:53 - GPA. And I can set this equal to like 4.5,
or like 2.3. Basically, I can make this any
36:00 - decimal number that I wanted. Keep in mind,
you could also do like 2.0. So it doesn't
36:05 - have to be like a different number decimal.
And again, you can make these negative, that's
36:11 - no problem. So ants are going to be what we're
going to use for whole numbers, for the most
36:15 - part doubles are going to be what we're going
to use for decimal numbers. So that covers
36:20 - text and numbers. And just with those two
data types. With text, we can use characters
36:25 - and strings and an instant doubles. You can
represent like just about any type of information
36:30 - in your programs. But c++ is awesome. So they're
actually going to give us another data type,
36:35 - which is called a Boolean. And a Boolean is
maybe not as intuitive as, like text and numbers.
36:43 - A Boolean is actually what we would call a
true false value. So when we're writing our
36:48 - programs, there's actually going to be a lot
of situations and circumstances where we want
36:52 - to represent true or false data. And a Boolean
is just a special word for true or false.
36:58 - Right. So I could say B o L stands for Boolean,
and we could create a variable like is male,
37:04 - right, so this variable is male is going to
store a true or a false value inside of it.
37:09 - And this will basically tell us whether or
not someone is male. So in my case, I could
37:13 - say true, because I am a male, right. So you'll
see how this can kind of come in handy for
37:18 - different things like, we could say something
is true, or we could say something is false.
37:23 - And that allows us to represent a certain
type of information, I could also say false
37:27 - over here. And that's going to be the opposite.
So these are going to come in handy a lot
37:31 - these true false values. And we can use Boolean
to represent them. So for the most part, these
37:37 - are the basic data types. Now there's a couple
other data types that we could also get into.
37:42 - But I think 99% of the time, as a beginner,
as somebody who's learning c++, you know,
37:48 - don't concern yourself with anything that
you don't have to so Boolean doubles, which
37:53 - are just decimal numbers, and which are whole
numbers, strings, which is plain text, and
37:58 - chars, which are just single characters. That's
what we're going to be working with. So as
38:03 - we go forward in the course, we're going to
be working with all this different type of
38:06 - information. Now, I want to point out one
more things, I'm actually just going to make
38:10 - a little print statement here. And you know,
this is the basic statement. So if I wanted
38:18 - to, I could print out any one of these variables,
like if I could print out a grade, for example.
38:23 - And this is going to go ahead and print that
out onto the screen. You see over here, we're
38:29 - just printing out a, but we don't have to
store this information inside a variable.
38:34 - So if I wanted, I could just type in a string
down here, right, I don't have to store in
38:39 - a variable. And this is what we would call
a constant. So I don't need to store it inside
38:43 - of a variable, I could also you know, type
out like false. Or I can type out a number
38:48 - like 4.5. Or I could type out an integer.
Or I could type out a character like, you
38:53 - don't have to put these things inside of variables,
a lot of times you can just use like straight
38:59 - up like that. And this is what we would call
a constant. But a lot of times you're going
39:04 - to want to store information in variables
because it's really useful. And obviously
39:07 - when you do that, you have to declare the
data type and you have to tell c++ what type
39:13 - of data you want to work with. In this tutorial,
I'm going to talk to you guys about the ins
39:20 - and outs of working with strings in c++. And
the c++ programming language, one of the most
39:26 - common types of data that you're going to
be working with are going to be strings and
39:30 - strings are basically just plain text. So
any type of plain text we want to represent
39:35 - or work with in our program is going to be
considered a string. So down here, you'll
39:41 - see I have this little program set up basically
just printing out a couple lines. So the way
39:46 - I can create a string is just by using an
open and closed quotation marks like this.
39:50 - So I can basically type out whatever I want.
If I wanted to, I could type out draft Academy.
39:53 - You'll see now I'm printing out draft Academy
and Hello. If I was to run my program, you'll
39:59 - see that we Drop Academy and Hello. First
thing I want to show you guys is doing has
40:05 - to do with this see our line of code over
here. So you'll notice here it says end l
40:10 - right here. And basically when we put end
l right there, it tells c++ that we want to
40:14 - print a new line after we print whatever is
in here. So if I was to get rid of this, and
40:19 - I just said, See our draft Academy. Now, what
you'll see is that Hello is going to get printed
40:24 - on the same line as draft Academy, because
we didn't put an L. So we didn't put a new
40:31 - line. If I wanted to, though, I could actually
manually come in here and specify a new line
40:36 - by saying a backslash n. So backslash n basically
means that we want to print out a new line.
40:42 - So this inside of a string represents the
new line character. So now when I run this
40:46 - program, you'll see that Hello gets printed
out on a new line. So that's how we can use
40:51 - that backslash n inside of our string in order
to do essentially the same thing as and L
40:57 - is doing. And if I wanted, I could put this
like in between these two words, and it would
41:01 - put them on a new line. So in addition to
just printing out a string, like we did over
41:06 - here, I could also store a string inside of
a variable. So in order to create a string
41:11 - variable, I can just say string, we'll give
it a name. So we could just call this phrase,
41:15 - and I could set it equal to whatever I want.
So let's set it equal to draft Academy. And
41:20 - then I can do exactly what I did down here.
So here, I can just print out phrase. And
41:26 - now it'll be printing out draft Academy onto
the screen, just like that. So in addition
41:31 - to just printing out strings, and kind of
working with them that way, storing them inside
41:35 - of variables, we can also use what's called
string functions. Now, a function is something
41:42 - that we're going to get into more later in
the course, we're going to write our own functions.
41:45 - But for now, just know that a function is
basically like a little block of code that
41:49 - we can call, which will perform a specific
task for us. So these functions do all sorts
41:56 - of things. And there's a lot of functions
that we can use with these strings. And they're
42:01 - called string functions. So these functions
will either like modify the string, or they'll
42:05 - give us information about the strings. So
I'm going to show you guys a couple. So the
42:10 - first string function that I want to show
you guys is the length function. And all I
42:14 - have to do to use this is I can just come
down here. And I'm actually just going to
42:16 - print out the result of using these functions.
So I'm going to put it down here, I'm going
42:21 - to say phrase dot length. And I can make an
open and close parentheses. And generally
42:26 - when we're calling a function and see, we're
going to use this dot, and then we're going
42:30 - to type the name of the function. So this
is the length function. And we're going to
42:33 - make an open and close parentheses like that.
So now if I was to run this program, you'll
42:39 - see we're getting 15. So this is basically
just telling us how many characters are inside
42:44 - of this phrase, strings, how many characters
are inside draft Academy. Now, if I wanted
42:49 - to, I could actually access individual characters
inside of here. So let's say that I wanted
42:54 - to access just this G. So I wanted to print
out the first character in this string, we
42:59 - can make an open and closed square brackets
just like this. And inside of here, I can
43:04 - put zero and zero is going to refer to this
first character in the string. So now when
43:09 - I run my program, you'll see we're just printing
out this capital G. If I wanted to access
43:15 - this R, for example, I could say two, and
two is going to refer to this R. So now when
43:22 - I run my program, we're printing out our as
you can see over here. So if you haven't caught
43:26 - on yet, whenever we're indexing a string,
we're starting at zero. So if I was to assign
43:32 - index positions to each one of these characters
in the string, I would say that g is an index
43:37 - position zero, I is an index position one,
R is an index position two, a three, four,
43:43 - etc. So whenever c++ is indexing a string,
it always starts indexing it at zero, so it'll
43:51 - start counting basically 01234. Even though
g is the first character in draf Academy,
43:57 - it's technically at index position zero. So
whenever we're using something like this,
44:03 - we're referring to like a specific character,
we want to refer to the index position, which
44:08 - is going to start at zero. Another thing I
could do is I could actually, like modify
44:12 - a specific character in a string. So I could
say like phrase, and I can refer to an individual
44:17 - character inside of this string. So we could
say like phrase zero, I could assign this
44:21 - a new value. So I can assign this the value
of a new character. So you'll notice I'm using
44:26 - these single quotes, so I could say like,
B. And so now, instead of saying, gee, Ira
44:32 - FFP, it's going to say, Be IRA FFV because
I'm essentially changing one of the characters
44:37 - in this string. So now when we print this
out, you'll see it says burapha Academy instead
44:43 - of draft Academy, so that can be kind of handy
just to modify a specific character inside
44:48 - of a string. We could also find out information
about this string. So I showed you guys how
44:52 - we can find out the length of the string But
imagine if we wanted to find out whether or
44:56 - not a specific string or a specific character
was inside of this string, I could say phrase
45:02 - dot find. And I can make an open and close
parentheses. And actually, inside of these
45:07 - open and close parentheses, I'm going to give
this find function a couple of different pieces
45:12 - of information. So I'm going to give it some
information for it to perform its task with.
45:17 - And these are called parameter. So anytime
I give a function, different pieces of information,
45:23 - we call it passing parameters. Or you also
hear people call them arguments. So passing
45:27 - arguments, or passing parameters, basically,
it's just information that we give to this
45:32 - function. So this fine function, I need to
give a couple pieces of information, the first
45:35 - thing I can do is give it a string or a character
that I wanted to find. So let's say I want
45:41 - it to find Academy. So basically, I want to
check to see if the word Academy is inside
45:48 - of this phrase string up here. The next argument,
I want to give this an X parameter is going
45:54 - to be an integer. And it's going to be the
index where I want to start looking. So if
45:59 - I wanted to just check to see if it was in
the string, I could say zero, if I wanted
46:02 - to check to see if Academy occurred after
the third index, then I could say three, let's
46:08 - just say zero. So now, this is actually going
to give us back in number and it'll tell me
46:13 - at what index position inside of this string
Academy occurs. So now I'm going to run my
46:19 - program, you'll see over here, it's giving
us an eight back. That's because academies
46:24 - starts at index position 012345678. So Academy
starts at index position eight. And that's
46:31 - why it gave that back to us. So I could do
this with anything I could say, like FFP,
46:35 - or something. And now this will tell me where
FF II starts inside of this string. So it
46:40 - starts at index position four. So that can
be pretty useful. And it's a really useful
46:44 - way to find the figure out of different things,
or different strings show up in this string
46:49 - you're working with. There's one more string
function that I want to show you guys, which
46:53 - is called substring. So it's just phrase.su.
b str. And this is also going to take two
46:59 - parameter. So we're going to give this two
pieces of information. The first piece of
47:04 - information we're going to give this is a
starting index. Now substring allows us to
47:08 - take, you know just part of this string, so
I could specify that I want to take like all
47:14 - the characters after this a or I can specify
that I wanted to take like, from index position
47:20 - zero from index position one all the way to
the end, basically, it'll allow me to take
47:25 - like just a subsection of this string. So
the first parameter, I want to give this as
47:29 - a starting index, so I could say like eight.
And so basically, this is going to start grabbing
47:34 - a new string at index position eight, then
I can give this a link. And this is basically
47:38 - going to tell substring, how many characters
I want to grab. So if I said like three, this
47:44 - is basically going to start at index position
eight. So it's going to start up here at this
47:47 - a, and it's going to grab three characters.
So it's going to grab this A, this c and this
47:53 - a. So now when I print this out, you'll see
we get a CA just like that. And that's basically
48:00 - what we do. So this is the starting index,
and this is the link. And one of the cool
48:04 - things we could do is we could actually take
this and store this substring in another string.
48:09 - So I could say like, string, phrase sub, just
like that. And then I could come down here
48:16 - and I could say phrase sub is equal to, and
then what we just had before, so phrase dot
48:22 - substring. And now if we print it out phrase
sub, it'll print out ACA. So I'm essentially
48:29 - storing the value of the substring in another
string. So that can be pretty useful. And
48:36 - that's really the basics of working with strings.
I mean, obviously, there's certain things
48:39 - that I left out, you know, I could spend an
hour just talking about all the different
48:42 - things we could do with strings. But I think
that kind of covers the basics kind of shows
48:46 - you all the basic things that you can do,
we looked at some basic functions, we talked
48:50 - about grabbing individual characters, we talked
about string indexes. So I think for now,
48:55 - that should be a good introduction into working
with strings in c++. In this tutorial, I want
49:03 - to talk to you guys about working with numbers
in C. Now whenever you're writing programs,
49:08 - and C, one of the most common types of data
that you're going to be dealing with are going
49:12 - to be numbers. So these can be things like
whole numbers or decimal numbers. Basically,
49:17 - I'm gonna give you guys a full overview of
how to work with numbers, we'll talk about
49:21 - the basics, we'll look at how we can use different
mathematical functions in order to do different
49:26 - mathematical operations with our numbers.
So this is gonna be a pretty cool tutorial.
49:30 - Now, down here, I'm just going to talk to
you guys about the basics. There's really
49:34 - two types of numbers and see that we deal
with whole numbers and decimal numbers. And
49:40 - whole numbers are basically referred to as
integers. And decimal numbers can be referred
49:45 - to as two things either floats or doubles.
And essentially, the only thing you need to
49:50 - know about that as a beginner is that doubles
allow you to store more specific decimal points.
49:56 - So the double you can store you know, potentially
more decimal points and you In a float, and
50:00 - there's more differences. But if you want
to get more into that you can kind of look
50:04 - it up. But the basics of using numbers as
you just type them out. So if I wanted to,
50:08 - for example, print out the number 14, you
see I have this C out here, I can just type
50:12 - it in and we can print it out, we can work
with it. In addition to positive numbers,
50:17 - we could use negative numbers, if I wanted,
I can make this a decimal. So really, numbers
50:21 - are very simple, you just kind of type out
the number. But we can also do things like
50:26 - math. So for example, I could say like five
plus seven. And in addition to printing out
50:30 - five and seven, this is actually going to
do this math operation. So this will actually
50:35 - print out the result of five plus seven. So
you can see we get 12 over here. So we can
50:40 - use addition, we can also use subtraction,
we could use division, which is going to be
50:45 - this forward slash, and we can use multiplication,
which is going to be this Asterix, so if I
50:49 - was to multiply these two numbers, now you'll
see over here we get 35. So those are the
50:55 - four basic math, you know operations. So that's
going to work really well. Also, one other
51:00 - thing I want to show you guys, which is called
the modulus operator, and the modulus operator
51:04 - will basically give us the remainder of dividing
two numbers. So if I said like 10, and then
51:10 - I made this percent sign, and actually this
is read 10 mod, and then I said three, so
51:15 - we would read this 10 mod three, what this
is going to do is it's going to take 10 divided
51:19 - by three, and then it's going to give us the
remainder, so this module is operator will
51:24 - give us the remainder, so 10 divided by three
is going to be three with a remainder of one.
51:28 - So now we just we should just get one. And
you can see over here we get one. So sometimes
51:33 - that modules operator can come in handy, you
can also represent order of operations in
51:39 - C. So C is going to adhere to like the normal
or reparations, like p DMS, I think it is
51:45 - Please Excuse My Dear Aunt Sally, basically
like multiplication and division are going
51:51 - to come before addition and subtraction. So
if I said for example, like four plus five
51:59 - times 10, this is going to do five times 10
first, so it's going to be 50 plus four, so
52:06 - we get 54. But if I wanted to do the addition,
first, I could just put parentheses around
52:11 - this. So now it's going to do five plus four,
nine times 10. So now we should get 90. And
52:19 - you can see we do so if you need to separate
order of operations. I mean, it's essentially
52:22 - just following basic math order of operations
rules. But you could represent those like
52:27 - that. So in addition to doing all that stuff,
and just printing out numbers, we can store
52:31 - numbers inside of variables. So I can make
an N, we'll just call it like w nom for whole
52:36 - number. And we'll just make this five. I could
also use like a double. And this will be like
52:41 - de nom for decimal number. And this would
be like 5.5, right? I mean, now we're storing
52:47 - these numbers inside of variables. If I wanted,
I could just, you know, print them out. Naturally,
52:51 - like we did down here, I want to show you
guys one cool thing we can do though, which
52:55 - is incrementing, a number that's stored in
a variable. So I could say like w num. And
53:00 - I could say plus plus. And what this is going
to do is it's going to add one on to W num.
53:05 - So now when we print out w num instead of
just being five, it's going to be six because
53:09 - we're adding one to it. So you can see we
get six. And that's a shorthand that'll come
53:13 - in handy a lot. There's a lot of situations
where you want to increment a value. You could
53:18 - also do like minus minus, and that will subtract
one from it. You could also do like w plus
53:24 - equals, and we could say like 80. And so what
this is going to do is it's going to take
53:27 - w nom and it's going to add 80 to it. So now
we should get 85. And you see we do, you can
53:34 - do plus equals multiplication equals minus
equals, I think you can do division equals,
53:41 - and all of that will it's just basically shorthand
so you don't have to type out all that stuff.
53:45 - So now that we kind of looked at all the different
operators, let's talk about how decimal numbers
53:49 - and integers work together. So here's a little
experiment. Let's say I came down here and
53:54 - I added 5.5 plus nine, so I'm adding a decimal
number. And I'm adding it to a integer number,
54:02 - right, so let's see what happens over here,
you'll see that we're going to get a decimal
54:07 - number back. So anytime we're doing math between
a decimal number like a double or a float,
54:12 - and an integer, a whole number, we're always
going to get a decimal number back. So it's
54:17 - always going to give us the decimal back.
But it's important to note though, if I did
54:22 - math with two integers, so for example, let
me show you guys if I was to say like 10 divided
54:29 - by three, and these are both integers. Keep
in mind, I'm actually going to get an integer
54:34 - number back. So we're going to get like three
back because that's technically the answer.
54:40 - But here's the thing. This isn't actually
the answer. Really what it is, is it's three
54:44 - with a remainder of one. But because we did
the math with two integers, we're going to
54:50 - get an integer value back. If I was to make
one of these a decimal number or even if I
54:56 - made both of them a decimal, a decimal number.
Now we're going to get back The actual like
55:01 - full answer. So it's going to be three with
three repeated just like that. So you can
55:06 - see if we do math between just two integers,
we're always getting an integer back, even
55:11 - if that's not like fully the correct answer.
And different circumstances, you're going
55:15 - to want to do that in other circumstances
you're not, but just keep that in mind. So
55:18 - that's kind of how integers and decimal numbers
interact with each other. So now what I want
55:22 - to do is show you guys how we can use different
math operations. So it generally just with
55:29 - math, there's all sorts of different, like,
I guess, operations, you can do like square
55:34 - root, you can take a number to a power, we
can round a number. And in C, there's actually
55:39 - these things called functions, which can do
all that stuff. For us. A function is basically
55:43 - just a collection of code that we can call
that will perform a specific task. And we're
55:48 - going to talk more about functions later.
But for now, I'm going to show you some basic
55:52 - math functions that we can use. In order to
use these math functions, I actually have
55:56 - to do something called importing them. And
essentially, when we import something, we're
56:01 - basically going we're telling c++ that we
need to go out and grab code from other files.
56:08 - So up here, you can see we're using this include
statement, and we're grabbing something called
56:12 - iostream, I'm going to add another line here,
we're just going to put a hashtag, we're basically
56:16 - just going to copy this guy up here. And we
can open and closed greater than less than
56:22 - sign. And in here, I just want to type in
C math. And basically, what this is going
56:26 - to do is it's going to tell our c++ program
that we want to use some math functions, that's
56:31 - kind of all you need to know at this point,
just know that you need to put this up here
56:35 - in order to follow along with what I'm going
to be doing. So down here, we can now use
56:40 - a bunch of different math functions, essentially
just math operations. So for example, I could
56:45 - say like POW. And what this will do is it'll
take two arguments. So in here, I could pass
56:52 - two numbers, like I could pass a two, and
I could pass a five. And what this will do
56:57 - is it'll take two raised to the power of five,
and it's just going to print that out. So
57:01 - when I run my program, you'll see we're getting
32. So 32 is two raised to the fifth power.
57:08 - And you can kind of do that with any number.
So I could also say like three raised to the
57:12 - third power, so three cubed, and now we should
get 27, which we do. So that POW function
57:19 - can be pretty useful. There's another one
square root Sq RT essentially doing the opposite.
57:25 - So we can say like square root 36. And now
this is going to give us the square root of
57:30 - 36 back, which is going to be six. So that
can be pretty useful. And inside of these
57:35 - functions, we you can put a decimal numbers
too. So I can put both integers like whole
57:41 - numbers and also decimal numbers. There's
another one which is called round, which is
57:46 - going to round a number. So if I put like
4.3 inside of here, this will return the rounded
57:53 - number. So you see, we just get four and this
will follow normal rounding rules. So if I
57:57 - change this to 4.6, now we should get five
back. There's a couple other these functions,
58:03 - which will similarly like round decimal numbers,
I can say CIO, and what this will do is it'll
58:08 - automatically just round the number up. So
even if this was like 4.1, this will round
58:13 - the number up to the next highest whole number.
So you'll see here we get five, you can do
58:18 - the opposite, which is floor. So if I just
say floor here, if I put a 4.8 in here, normally,
58:25 - it's supposed to round up, but now it's going
to round down because we're using that seal
58:30 - or that floor function. So those can be pretty
useful. And there's one more I want to show
58:34 - you guys, which is called f max. And f Max
is going to take two numbers. So I can pass
58:40 - in like a three and a 10. And this will tell
me which one's bigger. So this will return
58:45 - back to us the bigger of the two numbers.
So now when I run this program, you'll see
58:49 - it's giving us a 10 back because 10 was the
bigger number and a lot of circumstances,
58:55 - in C, you're going to have two numbers, you
might not know which one is bigger. So this
58:59 - can be really useful to tell us. And you could
also use f min, which will do the opposite.
59:03 - So this will tell us what the smallest number
that we passed in was. And you can see we
59:07 - get three over here. So those are some basic
math functions. There's a lot more if you
59:13 - just go online and search c++ math functions,
like you'll find a huge listing of all them
59:19 - that you can use. There's things to do like
sine, cosine, tangent, you can do like logarithmic
59:25 - stuff you can do, you can use like exponentials
all different stuff like that can be really
59:29 - useful. But that's kind of the basics of how
you can use that. And you know, really, numbers
59:34 - are extremely useful. And that's kind of been
like a broad overview of sort of all the stuff
59:40 - you can do with them. In this tutorial, I'm
gonna show you guys how to get input from
59:46 - a user in c++. A lot of times in our programs,
we're going to be working with all different
59:51 - types of information. But one of the most
important types of information is going to
59:55 - be information that the user inputs. So a
lot of times in our programs where Want to
60:00 - allow the user to input information. And then
we're going to want to use that information
60:04 - in order to do different things. So in this
tutorial, we'll just give a broad overview
60:09 - of how that's done, we'll talk about how to
get different types of information. And you
60:14 - know, you'll kind of learn everything you
need to learn. So down here, whenever we're
60:17 - getting information from the user, the first
thing we always want to do is store that information
60:23 - somewhere. So whenever I'm asking the user
to give me a piece of information, if they
60:27 - give me that information, and I don't put
it anywhere, like it's kind of useless, right,
60:31 - so we usually what we want to do is create
a variable. And I'm actually going to write
60:35 - a little program that will allow the user
to enter in their age. So I'm going to create
60:39 - a integer just called age. And I'm not going
to give it a value. So I'm just going to put
60:43 - a semicolon there, we're essentially declaring
the integer. So we're telling c++ that we
60:48 - want to use this integer, but we're not giving
it a value, we're going to let the user give
60:52 - this variable a value. The next thing I want
to do is I want to prompt the user to enter
60:57 - in something right. So if I don't give them
a prompt, if I don't tell them what information
61:01 - I want, then they're not going to know what
they should input. So I'm just going to say
61:05 - C out. And I'll just print out a little prompt,
so we'll just say, enter your age. And we're
61:13 - basically just prompting them to enter in
their age. Alright, so once we've created
61:18 - the variable, and once we've prompted them
to enter in the information, now what we can
61:22 - do is we can actually get the information
from them. So the way that we get information
61:27 - is actually the opposite of the way that we
print out information. So instead of saying
61:31 - c out, I'm just gonna say C n, and I'm gonna
make two greater than signs. So when we use
61:37 - C out, we use these lesson signs, when we
use C, and we use greater than signs, and
61:42 - that's really important. So over here, I'm
just going to type in the name of the variable
61:47 - that I want to store what they enter inside
of. So I'm just going to put age here, because
61:51 - I want to store whatever they input into this
age variable. So we're assuming that they're
61:56 - going to enter in an integer number, and I'm
going to store that integer number inside
62:00 - of this integer that we created. Now, what
we can do is we can just print out something.
62:06 - So we'll print out a little message to them,
basically saying like you are, and then we'll
62:13 - say like age, or we can say like, years. Old.
Cool. So now we're basically just asking them
62:22 - to enter in their name, we're taking whatever
they input, and we're storing it inside of
62:26 - this age variable, we can do that using the
C in command here. And then we're just printing
62:32 - out You are the age years old. So let's go
ahead and run our program. And we'll see how
62:36 - we did. So I'm going to build and run. And
you'll see here it says enter your age. So
62:41 - we can just put like 30. And now when I click
enter, it's going to take that integer that
62:45 - we entered in 30, it's going to store it inside
of the age variable, it's going to print out
62:50 - the prompt. So when I click enter, you'll
see it says you are 30 years old. So that's
62:55 - awesome. So we can do that and we can get
an integer, I could also get a double. So
63:00 - if I made this a double, it would be the same
thing. So here, I can run the program. And
63:07 - I can enter in like 4.5. So maybe someone's
like four and a half years old. And here they're
63:12 - entering in 4.5. So it's gonna work the same
exact way, you could also do the same thing
63:16 - for characters. So if I made this a sharp,
here, it'll be the same. So we'll be able
63:23 - to get a character from them as well. So now
when I run the program, I could just enter
63:28 - in like a G, for example, whatever, obviously,
that's not the age, but it does the same thing.
63:33 - So it's able to take in that character, and
it's able to use it. Now, here's the thing,
63:39 - that's how we can get characters in numbers.
But if we want to get a string of text, we're
63:43 - actually going to do something different.
So if I wanted to get a string, I'm actually
63:47 - not going to use this C in command. So I'm
gonna show you guys how we can get a string.
63:52 - So instead of entering in the age, why don't
we have them enter in their name. So over
63:56 - here, I'm going to make a string, and I'm
just going to call it name, instead of using
64:01 - C and I'm going to use another command, which
is called get line. And get line will basically
64:07 - allow us to get an entire line of text. So
instead of just getting like one number or
64:12 - one character, we're going to get like the
entire line that the user enters. And in here,
64:16 - we need to pass this a couple of different
parameters. The first is going to be c n.
64:21 - And c n is basically just that little like
command prompt. So like whenever we enter
64:26 - stuff into that command prompt, that's basically
what this is saying. And then we want to enter
64:31 - in the name of the variable where we want
to store the line of text that we get. So
64:34 - I'm just going to store inside of name. So
over here, we can just say hello to the user.
64:40 - So I could say hello. And it's going to be
name. So now we'll be able to get the name
64:47 - from the user. So we're basically get the
entire line. So for example, I can come over
64:52 - here I can say like john smith, and now when
I click enter, it says hello, john smith.
64:58 - So that's how we can get strings of text.
And that's really the difference is if I wanted
65:02 - to get like an integer and store it inside
of an integer variable, if I wanted to get
65:06 - a char and store it inside of a char variable,
I have to use C in. But if I want to just
65:12 - get like a string of text, then I can use
this get line function, and they're both going
65:17 - to be useful. So that's kind of an overview
of how we can get input from the user. And
65:20 - you can get as many values as you want. And
so you know, you can essentially like copy
65:24 - this whole line, paste it a bunch of times
below there, and get, you know a bunch of
65:28 - different pieces of information and use them.
In this tutorial, I'm going to show you guys
65:36 - how to build a basic calculator in c++. Essentially,
we're going to build a calculator where the
65:41 - user can enter in two numbers. And then we'll
add those numbers together and will spit out
65:46 - the answer. So this is going to be kind of
cool. And it'll show you guys a little bit
65:49 - more about getting input from users. So down
here, the first thing we want to do before
65:54 - we do anything is create two variables, where
we can store the two numbers that we want
65:59 - to add together. So I'm going to create an
integer. And I'm just going to call it num
66:03 - one. And I'm not going to give this a value
because we're actually going to let the user
66:08 - give this variable a value, I'm going to create
another one called num two. And same thing,
66:13 - actually, let me show you guys something cool,
we can do it, we're creating two variables
66:17 - like this. And they're the same data type,
I can actually put them on the same line.
66:22 - So I could say num, one, comma, num, two.
And a lot of people find this to be really
66:27 - useful. So for example, I could do like as
many as I wanted. In our case, we're just
66:31 - going to have two numbers, though. So now
that we've declared our two number variables,
66:36 - the next thing we want to do is prompt the
user and get some information. So I'm going
66:40 - to say C out. And the first thing we'll do
is prompt them for the first number. So I'll
66:44 - say enter first number. And now we want to
actually get the first number from the user.
66:51 - So I'm going to say cn, and over here, I'm
just going to specify num one. So we're going
66:56 - to store the number that they enter inside
of this num, one variable, I can actually
67:01 - just copy this. And we're going to do the
same thing down here. So I'm just going to
67:05 - say enter second number. And now instead of
num, one, it's going to be num two. So at
67:12 - this point in our program, we should have
both of those numbers, we should have gotten
67:17 - both of those numbers from the user, the last
thing we want to do is just print out the
67:21 - answer. So we can actually just say, C out.
And I'm just going to add number one and num
67:28 - two together. So we should be printing out
the result of adding those two numbers together.
67:34 - So let's go ahead and run this program. And
we'll see how we did. So I'm going to build
67:39 - and run. And actually Whoops, I put the wrong
direction for these arrows here. So this is
67:44 - probably a really common mistake with C and
we want to make to greater than signs not
67:49 - to less than signs. So that's something that
could easily trip up a new user. And it tripped
67:53 - me up. So when we're using C and we're using
these two greater than signs when we're using
67:58 - C out we're using these two less than sign.
So that's my mistake. But I guess that does
68:02 - kind of highlight a common mistake for beginners
in c++. And even for someone like me who's
68:08 - programmed in c++ a lot before. Alright, so
now let's run our program. And it says enter
68:12 - first number, so enter in a five, enter second
number entered and a 10. And now when I click
68:18 - enter, it should add both these numbers together.
So it does and we get 15. So that's pretty
68:23 - cool. Another thing we could do is instead
of using integers, we could also just use
68:28 - doubles. And that's as easy as just changing
these variable declarations. So now when we
68:33 - run the program, we can work with double.
So I could enter in like a four, I could also
68:37 - enter in like a 9.8. And now we'll be able
to add those guys together. So that's kind
68:42 - of cool. And really, that's a basic calculator.
So essentially, we're declaring the variables
68:46 - up here, we're using C out. And with C out
remember, we're using these less than signs,
68:52 - then we're using cn with the greater than
signs. And this line is basically getting
68:56 - the use the input from the user. And it's
storing it inside of this variable. We're
69:01 - doing that twice. And because we store these
as doubles or before integers, we're able
69:07 - to add them together and print out the answer.
So that is the basics of building a calculator.
69:12 - Actually, later in the course, I'm going to
show you guys how we can build an even cooler
69:15 - calculator that will be able to add, subtract,
multiply and divide, and the user will get
69:20 - to decide in order to build something like
that. We're gonna have to learn some more
69:23 - stuff. So stick around, and we'll learn how
to do something like that later in the course.
69:30 - In this tutorial, I'm gonna show you guys
how to build a little mad libs game in c++.
69:36 - So a Mad Libs is basically a little game where
you enter in a bunch of random words could
69:40 - be like nouns, verbs, adjectives, and then
all those words get taken and get sprinkled
69:45 - into a story. And generally since you entered
in random words, the story ends up being pretty
69:50 - funny. So let me show you guys over here in
my browser, I just have an example of a Madlib
69:54 - you know, essentially there's this story and
then you would sprinkle in all those random
69:58 - words that the person entered into the story.
So we're going to build something like this
70:02 - in our c++ program. Down here, I have my little
program set up. It's just this little poem,
70:08 - it says Roses are red, violets are blue. I
love you. So this is a, you know, sort of
70:14 - a classic poem. But I think this could be
a lot better if we turn it into a Madlib.
70:19 - So let's say instead of saying Roses are red,
why don't we let the user enter in a color,
70:24 - instead of saying violets are blue, we'll
let them enter in a plural noun. And instead
70:32 - of saying, I love you, let's say I love celebrity,
so some random celebrity they can enter in.
70:38 - So basically, we're going to ask the user
to enter in all these different values, we'll
70:42 - store them in variables, and then we can print
them out inside of our story. So let's get
70:47 - started, this should be kind of cool. The
first thing we want to do is actually create
70:50 - variables for all these things. So I'm just
going to say string. And we'll create a variable
70:55 - for the color for the plural noun and for
the celebrity. Alright, so now we've basically
71:02 - told c++ that we're going to use all these
variables, but we need to give them values.
71:06 - And we're actually going to let the user give
them values when they enter in all those things.
71:12 - The first thing we want to do when we want
to get input from the user is we're just gonna
71:15 - say C out and we're gonna print out a prompt,
so I'm basically just gonna say, enter a color.
71:21 - So we're gonna have them enter in a color,
now we want to actually get the color that
71:25 - they input, so I'm just going to say, Get
line. And in here, we're just gonna say ci,
71:30 - N. And that's basically just standing for
like that console input. So whenever we like,
71:36 - input text into the console, so it's gonna
get whatever gets inputted into there. And
71:41 - then we're gonna store it inside of this color
variable. So this will get the line of text
71:46 - that they enter. And I'm actually just going
to copy this, and we'll do the same thing
71:49 - for all the other values. So we're gonna say
enter a plural noun. And we'll store that
71:57 - inside of the plural noun variable. And then
down here, we're going to do the same thing
72:04 - for the celebrity. So we'll store that in
the celebrity variable. Alright, so we're
72:09 - declaring the very most, we're printing out
our prompts. And then we're getting the input
72:14 - from the user using this get line function.
Last thing we need to do is modify this part
72:20 - of the program. So instead of saying roses,
our color, we're actually going to put the
72:25 - color that they entered into the story, same
thing for this plural noun. So I'm just going
72:32 - to say, plural noun, and you can see how that
gets placed in between these lessons. And
72:39 - then I love celebrity, we're going to actually
put in the celebrity variable. Cool. Alright,
72:45 - so now our program should be set up, everything's
wired up, we're getting values into all these
72:50 - variables, and we're printing them out, down
here in our story. So let's run this program
72:55 - and we should be able to play our madlibs
enter a color, why don't we enter in magenta?
73:00 - Enter a plural noun, let's do microwaves.
And enter a celebrity. Why don't we do Tom
73:07 - Hanks. So now when I click enter, all of the
values are going to show up in our story.
73:13 - So it says roses are magenta, microwaves are
blue. I love Tom Hanks. Awesome. So our Madlib
73:20 - worked, and we are ready to go. So that's
essentially how you can build a Madlib I mean,
73:24 - it's it's as easy as getting different inputs
from the user and printing them out inside
73:28 - the story. But this is a very simple madlibs.
I mean, I'm sure you guys can see that you
73:33 - could ask the user for like 20 different words
and print them out into some huge long story.
73:37 - And it's going to work out the same way. So
this is an awesome way to create our Mad Libs
73:44 - game. In this tutorial, I want to talk to
you guys about using arrays in c++. A lot
73:53 - of times when we're writing programs in c++,
we're going to be dealing with large amounts
73:57 - of data. And one way that we can keep track
of and manage that data is by using something
74:02 - called a variable. But the one thing about
variables is that generally you can only store
74:07 - one value inside of a variable. So if I create
like a character valid variable, I can only
74:12 - store one character in there. If I create
an integer variable, I can only store one
74:16 - integer in there. A lot of times though, in
c++, we're gonna be dealing with huge amounts
74:21 - of data. And that's where arrays can come
in array is basically a container a lot like
74:28 - a variable. But unlike a variable arrays can
hold multiple data values. So an array could
74:35 - hold like a list of you know, 1000s, or millions
of pieces of information. And generally, we
74:40 - could put, you know, pieces of information
that are related to each other in some way
74:44 - inside of the same array. So I'm going to
show you guys how we can create arrays and
74:50 - how we can work with them. You create an array,
a lot like you create a normal variable. So
74:55 - the first thing we have to do is tell c++
of what type of data We want to store inside
75:01 - of the array. So I'm just gonna make an array
of integers. So I can just say int. And again,
75:05 - just like a variable, we're going to give
this a name. So I could say like lucky nums,
75:09 - right, and this would be an array of lucky
numbers. Now, here's where this gets different
75:14 - from a variable. When we're creating an array,
we always want to put an open and close square
75:19 - brackets after the name. So after lucky nums,
we're gonna put this open and close square
75:24 - bracket. And that basically tells c++, okay,
they want to create an array, so they want
75:29 - to be able to store multiple pieces of information
inside of this container. Now, I'm just going
75:34 - to say equals, and one, the easiest way to
create an array is just to assign it some
75:39 - default information right off the bat. And
I can just make an open and close curly bracket
75:43 - and inside of here, I can just start typing
out the information that I want to store.
75:48 - So let's say I want to store like a list of
numbers, I could say like for a 1516 2342,
75:53 - right, so I'm storing all of these numbers
inside of this single container. So unlike
76:02 - a variable where we can only store one number,
now I'm sorting a whole list of numbers. And
76:06 - we will refer to these as elements in the
list. So four would be the first element in
76:10 - the list. And then we would delineate the
next element using this comma. So now we have
76:15 - the second element, 815 16, excetera. So these
are all going to be elements inside of our
76:20 - array. Now down here, I'm going to show you
guys how we can access individual elements.
76:25 - So I'm just gonna say C out. And let's say
that I wanted to access one of these particular
76:31 - elements, let's say I wanted to access like
this first element here inside the array,
76:35 - because what good is the array, if we can't
access the information inside of it, right,
76:39 - I can just say, Lucky nums. And I can make
an open and close square bracket. Now inside
76:45 - of this open and close square bracket, I can
put the index of the element inside the array
76:51 - that I want to access. So if I want to access
this first element in the array, I just need
76:57 - to put an index in here, that's going to be
zero. So now when I run my program, you'll
77:02 - see we're printing out four, we're printing
out that first element in the array, if I
77:07 - wanted to get access to this 15, it's going
to be 012, it's going to be at index position
77:12 - two inside of this array. So now whenever
my program, we get that 15. So if you haven't
77:19 - caught on by now when we index these arrays,
we start with index positions zero. So I would
77:25 - say that four is an index position. 08 is
an index position. 115 is an expedition 216,
77:32 - three excetera. So we would always say that
the first element in the array is actually
77:38 - an index position zero. And if you're familiar
with how strings are indexed in c++, it's
77:44 - the same exact thing. So that's how we can
access an individual element in the array,
77:49 - we can also modify an element in the array.
So I can say like, Lucky nums. And like, let's
77:56 - say I wanted to change the first element,
I could say lucky num, zero, and I could give
78:00 - this a different value. So I could set this
equal to 19. For example, Now down here, when
78:05 - I print out lucky numbers, zero, I'm actually
going to be printing out and actually typo
78:11 - whoops, I'm actually going to be printing
out 19. So you can see we're able to modify
78:16 - one of the indexes inside of that array. Another
thing we can do with these arrays is I can
78:22 - give them a size. So normally, if I just create
the array like this, or just say, Lucky nums
78:27 - and an empty square brackets, the array is
only going to be able to store the elements
78:34 - that I declare over here. But a lot of times
when you're making these arrays, you might
78:38 - not know what all the elements should be.
So over here, I could put in a number like
78:43 - I could say, like 20. And essentially what
I'm doing here is I'm telling c++, that I
78:49 - want to be able to store 20 elements inside
of this lucky nums array. So over here, I
78:54 - don't have 20 elements, yet I only have elements
012345. So what I can actually do is I can
79:02 - add more elements into here. So I could say
like lucky numbers six or lucky numbers 10.
79:06 - And I could give this a value. So I could
give lucky numbers 10 the value of 100. And
79:11 - now down here, if we printed out lucky numbers
10 it's going to be printing out 100. As you
79:17 - can see, another thing you can do is just
not give this any info right up front so I
79:21 - can get rid of all of these. And I can just
put a semicolon here. And then down here,
79:29 - I can give all these different values. So
I can say lucky number zero is equal to 100.
79:34 - And now I can you know essentially just assign
all the elements after we declare it so like
79:39 - I said, a lot of times you might not know
exactly what's going to go in the array when
79:44 - you declare it and so you can just basically
tell, see how many items you want to hold
79:50 - in there and then you can just you know, fill
the the array up as you go. But that's really
79:54 - the basics of arrays and arrays are very simple.
So this is a very simple way To store multiple
80:00 - pieces of information. In this tutorial, I
want to talk to you guys about using functions
80:09 - in c++. A function is basically just a little
collection of code that performs a specific
80:16 - task. So a lot of times in c++, when you're
writing much code out, you have code that's
80:22 - designed to do a certain thing. So you might
have like four or five lines of code that's
80:26 - supposed to do something. And a function is
basically a container where you can put that
80:32 - code, and then you can reuse it throughout
your entire program. So I'm going to show
80:36 - you guys how we can create a function in this
tutorial. So down here in my program, you'll
80:42 - see I have this little block of code here,
it says int main, there's an open and closed
80:46 - parentheses. And then there's these open and
closed curly brackets. This is actually a
80:50 - function. This is a little block of code.
And this block of code performs a specific
80:56 - task. And the purpose of this main function
is it's the function that gets executed when
81:03 - we run our program. So any code that we put
inside of this main function is going to get
81:08 - executed when our program runs, I'm gonna
show you guys how we can create another function.
81:12 - So up here above this main function, I'm going
to create another function. And the task that
81:19 - this function will be performing is it's going
to say hi to the user. So whenever we're creating
81:24 - a function in c++, we need to give c++ a couple
pieces of information, the first piece of
81:30 - information we need to give is called a return
type. Now whenever we create these functions,
81:36 - a lot of times the functions will go off,
they'll perform a specific task, and then
81:40 - they'll return a value back to the caller.
And we're actually going to talk more about
81:45 - returns and return types in the next video.
But for the purposes of this video, you can
81:49 - kind of just follow along. And I'm just going
to go ahead and put void here. And when we
81:53 - put void here, it basically means that this
function is not going to return anything.
81:57 - So this is kind of like the most basic type
of function. And after we put void, now we
82:01 - need to give this function a name. Remember,
a function is a block of code that performs
82:06 - a task. So generally, when we're naming a
function, you're going to want to name it
82:10 - according to the task that is performing or
according to the purpose of the function.
82:14 - So I'm just going to call mine Say hi, because
our function is going to say hi to the user.
82:20 - Now I'm going to make an open and closed parentheses.
And after this, I'm going to make an open
82:24 - and closed curly bracket. Any code that I
put inside of this open and close curly bracket
82:30 - is going to be considered inside of the function.
So inside of here, why don't we just say like
82:36 - C out, and we'll just print out like Hello,
user. And that's basically all we'll do. So
82:42 - this is a very simple function, I just have
one line of code in here, I can have as many
82:47 - lines as I want. This is a simple function.
But I can have, you know, a dozen lines or
82:51 - 100 lines, if I wanted to, you can put as
many lines of code in the function as you
82:55 - want. Now, let's run our program. And we'll
see what happens. So I'm going to go ahead
83:01 - and run my program. And you'll see over here,
nothing's getting printed out. So hello, user
83:09 - isn't actually getting printed out when we
run our program. Here's the problem, when
83:13 - we want to execute the code that's inside
of these functions. In other words, when we
83:17 - want to execute a function, we have to do
something called calling it. So if I want
83:23 - this code inside of here to be executed, I
have to call the function. Now remember, the
83:27 - code inside this main function gets executed
by default, right, so no matter what this
83:31 - is going to get executed. So inside of here,
I can call this Say hi function, I can just
83:37 - type out say hi. And I can type an open close
parentheses. And when I do this, when I type
83:43 - this out, this tells c++ that I want to execute
all of the code that's inside of this, say
83:50 - hi function. So when c++ sees this, it's going
to jump up to this Say hi function is going
83:55 - to execute all the code inside of there, and
then it's going to come back down. So let's
83:59 - go ahead and run our program. And we'll see
what happens. So you can see over here, now
84:04 - we're printing out Hello, user. And real quick,
real quick, I just want to show you guys the
84:08 - flow of the so if I said like C out over here,
and I said top. And then I did the same thing
84:14 - over here, and I said bottom. When I run my
program, you'll see that we're printing out
84:21 - top, hello, user and then bottom. And actually,
this probably would have been better if I
84:26 - put new lines in there. But the point is that
when this program executes, c++ is going to
84:32 - execute this line of code, it's going to see
that we want to call this Say hi function.
84:36 - And it's actually going to leave this main
function, it's going to jump up here to the
84:40 - Say hi function, it'll execute all of the
code inside of here. Then when it runs out
84:45 - of code to execute inside of the say, Hi function
is going to jump back to the main function
84:50 - and execute this line. So that's basically
like the flow of what's happening. So this
84:56 - is a very basic function, but we can make
this more complex and one thing you can do
85:00 - With these functions, you can actually give
them information called parameters. So this
85:05 - Say hi function, I can give this a piece of
information. And the Say hi function can use
85:10 - that piece of information to, you know, performance
task differently or better or whatever. So
85:16 - these are called parameters. And if I want
to specify that this Say hi function should
85:20 - be given a piece of information, I can just
come over here and specify what piece of information
85:25 - it should take. So, in our case, instead of
saying hello user, why don't we say hello,
85:30 - hello to someone specific. So up here, I could
say like string name. And now this functions
85:36 - going to accept one parameter a name. And
down here, instead of saying hello, user,
85:42 - we can just say hello name. Now, whenever
I call this, say hi function now, because
85:48 - it's specifying that it needs to take a parameter,
I need to pass it a parameter, I need to pass
85:54 - it a value. So in here, I can just pass it
like Mike. And now it's going to print out
85:59 - Hello, Mike, because the value Mike is going
to get stored inside of this name variable.
86:06 - Alright, let's go ahead and run our program.
And now you'll see it's printing out Hello,
86:11 - Mike. So that's kind of cool. And you can
take any piece of information as a parameter,
86:16 - and you can also take multiple parameters.
So why don't we specify another parameter
86:20 - like age, so now the caller is going to have
to pass in their name and their age. So now
86:27 - we can say hello name, will say like you are.
And then we'll just say how old they are.
86:34 - So we'll say like age. So now we're passing
in two pieces of information inside of this
86:40 - function. And down here, when I call the function,
I have to give it two pieces of information.
86:45 - So now I could just say, like, Mike, and let's
say that I'm 60. So now, when we call this
86:51 - function, it's going to be able to take in
both of those pieces of information, and use
86:55 - them to perform the task differently. And
what's cool about these functions is I can
86:59 - call this as many times as I want. In other
words, I can reuse all of the code that's
87:05 - up here. So I can come down here, I can copy
this and why don't we do this a bunch. So
87:09 - we'll say like, Tom is going to be 45. And
let's say Steve, is going to be 19. And so
87:19 - now, I'm actually going to run this code three
different times. And actually, over here,
87:24 - I'm just going to put a and line so that gets
printed out on new lines. Alright, let's run
87:31 - the program. And you'll see it says hello,
Mike, you're 60 times 45 and Steve's 19. So
87:37 - functions are great, because we can reuse
the code that we write inside the function.
87:42 - So basically, like I wrote this function one
time, and I can reuse it as many times as
87:48 - I want inside of my program. So anytime you
have code that's going to be reused a lot,
87:52 - that's a good candidate for a function. Alright,
so I want to show you guys one more thing,
87:56 - you'll notice that I'm creating this function
up here above my main function, right. But
88:01 - if I was to take this and move it down here,
so for example, I moved it below the main
88:05 - function. Now when I run my program, we're
going to get an error, you can see we're getting
88:10 - a little red block here. This is the problem,
when we create this function below the main
88:16 - function, it doesn't actually know about it.
So like all this code up here, is getting
88:21 - executed. So c++ is trying to execute the
Say hi function, but it has no idea like what
88:27 - that is because we created it down here. So
what we can do is we can actually create what's
88:33 - called a function stub. So up here, we're
basically just going to write out the functions
88:38 - signature, and we're going to tell c++ about
it. So you guys remember, like, if I created
88:43 - a variable, like if I created an int, and
we just call it num, I don't have to give
88:48 - this a value right away, I could then come
down here and say, like num is equal to four
88:52 - or something. This is basically what we're
gonna do with this function, we're gonna essentially
88:56 - just declare the function and then somewhere
else in our program, we can define it. So
89:01 - over here, I'm just gonna say, void, say hi.
And it needs a string name, and it needs an
89:09 - int age. So now, when I create this little
function stub up here, or this function signature,
89:17 - I'm basically declaring the function and I
can give it a value down here. And now c++
89:23 - is going to be able to call it because it's
going to have some information about it. So
89:26 - when I run my program, now, we're able to
call it No problem. So that's kind of just
89:30 - how we can do that with functions. And really,
you can create as many functions as you want.
89:35 - In fact, a good program will have lots and
lots and lots of functions. And the next tutorial,
89:41 - I'm going to show you guys how we can actually
get information back from functions using
89:44 - the return keyword. In this tutorial, I want
to talk to you guys about returns in c++.
89:54 - So when I'm talking about returns, I'm talking
about returns from functions. So in c++, we
90:00 - can write functions which are basically like
little containers that store a bunch of code
90:04 - that performs a specific task. And with those
functions, we can call them and we can also
90:09 - pass them information. So I can give them
all sorts of like parameters and different
90:12 - information that they can use to perform their
task better. But in addition to giving functions,
90:19 - information functions can actually give us
back some information. So when I call a function,
90:25 - not only can I give it parameters, but that
function can give information back to me.
90:29 - Now I'm going to show you guys how we can
use this and how we can use the return keyword
90:34 - in c++. So why don't we create a function
up here, and I actually want to create a function
90:39 - that's going to cube a number. So when I cube
a number, I'm basically taking it to the third
90:43 - power. So if I was to say like, two cubed,
it's basically just two raised to the third
90:48 - power, or it's just going to be two times
two times two, right? That's what cubing a
90:53 - number does. So why don't we create a c++
function that's going to cube a number. Now
90:58 - when we create a function in c++, the first
thing that we have to do is declare something
91:03 - called a return type. And a return type basically
tells c++ what type of value or what data
91:11 - type, this function is going to return. Now
in the last tutorial, if you're following
91:15 - along with the course, we just put void here.
And void basically meant that our function
91:20 - wasn't going to return any information. In
this tutorial, though, we definitely want
91:24 - to return some information. So you can put
any of the generic c++ types here, you can
91:30 - put like int, double, you put character, you
put string, essentially, any of those values
91:35 - can go here. In our case, we're going to cube
a number. So why don't we just make it a double.
91:41 - And I'm going to say double. And now we need
to give this a name. So I'm just going to
91:43 - call it cube. And we're going to take one
parameter into this function. So why don't
91:48 - we take a double, and we'll just call it num.
Now, inside of this function, all we want
91:54 - to do is cube the number and then return the
result that we get. So I'm actually going
92:00 - to create a double, I'm going to call it result.
And I'm going to set this equal to the cube
92:05 - value of num, so I'm just gonna set it equal
to num times num, times num. So this is basically
92:12 - me cubing num. So now result has inside of
it, the result of cubing all these numbers,
92:19 - okay, down here, I want to return the value
that's stored inside of results. So I can
92:26 - just say return result. And now this is going
to tell c++ that we want to return this value
92:32 - stored inside result back to the caller. Now
down here in my main function, I can actually
92:38 - call this function so I could say cube and
I could pass as a double, let's say like 5.0.
92:43 - Right? Now, actually, what's going to happen
is when we call cube and we pass it this information,
92:50 - it's actually going to get a value back. So
if I wanted, I could basically say like, double
92:57 - answer is equal to cube 5.0. And now the value
that gets returned back from this cube function
93:05 - is going to get stored inside of this answer
variable. So let me show you guys, I can say
93:10 - C out, and I'm just gonna print out answer.
And so now when I run my program, what you'll
93:16 - see is, we're going to be printing out the
result of cubing, five. And you'll see over
93:22 - here, we get 125. So five times five is 2525,
times five 125. So we are able to cube the
93:29 - number. And you can see here, this is getting
a value back. So I'm able to store the value
93:35 - that gets returned from this function inside
of this variable. If I wanted, I could also
93:39 - cut out the middleman and I could just print
out cube 5.0. So let's just paste this bad
93:47 - boy down here. And now it's going to do the
same exact thing. So we should get 125. Cool.
93:53 - And actually up here, if we wanted, instead
of storing num times num times num inside
93:58 - of this result variable, I could instead just
return these guys up here. So we again, we
94:05 - cut out the middleman. And we'll just return
that and we should get the same exact answer.
94:10 - So there's also one more thing I want to talk
to you guys about, which is this return statement,
94:15 - this returned keyword right here. This is
a very special word in c++. And basically
94:22 - whenever we type out this return keyword,
it's essentially telling c++ that we're done
94:26 - executing the code inside of this function.
So if I was to put like a C out here, and
94:32 - I just printed out like hello. When I run
my program Now, you'll notice that it's not
94:38 - printing out Hello, even though we're executing
that cube function, even though we're executing
94:44 - all that code, it's never printing out Hello.
That's because whenever we use this return
94:49 - keyword, it's going to break us out of the
function. So this line of code is actually
94:54 - never going to get executed because it's never
going to get reached. When c++ sees this line
94:59 - is is going to break out and we'll head back
down to the main method. So that's essentially
95:04 - what this is doing. And that's sort of the
basics of using returns. So like I said, if
95:09 - you didn't want to return a double, you could
return any type of date, I mean a string,
95:14 - you can even return something like an array.
So really, you can return anything you want.
95:18 - And then that value will get stored over here.
In this tutorial, I'm going to talk to you
95:27 - guys about if statements in c++, an if statement
is basically a structure that we can use in
95:33 - our code, which will allow our program to
respond to different situations. So when one
95:39 - situation occurs, we can do one thing. And
when another situation occurs, we can do another
95:44 - thing, essentially, we're able to check different
conditions. And when those conditions are
95:48 - true, we can do certain things. And when those
conditions are false, we can do other things.
95:53 - So I'm going to show you guys exactly how
this works down here in our main function,
95:57 - I'm just going to create a couple of different
things. So the first thing I'm going to do
96:01 - is create a variable, it's going to be a boolean
variable. Remember, a boolean variable stores
96:06 - a true or a false value, so I'm going to create
a Boolean called is male. And I'm going to
96:13 - give this a value initially of true. So we're
basically creating this variable izmail, it's
96:19 - storing whether or not someone is male, and
I'm giving it a value of true. Now I want
96:23 - to show you guys how we can use an if statement.
And an if statement, like I said, allows us
96:27 - to respond to different situations. So what
I'm going to do is I'm going to be able to
96:33 - write an if statement that will respond to
the situation where the user is a male, and
96:38 - the situation where the user is not a male.
So what I can do is I can actually say F,
96:43 - I'm going to make an open and close parentheses,
and then I'm going to make an open and closed
96:46 - curly bracket. Now, inside of this open and
close parentheses, I can specify a condition.
96:54 - So I can actually check a condition. And if
the condition that I put inside of those open
96:59 - and close parentheses is true, then we're
going to execute the code inside of here.
97:04 - If it's false, then we're going to move on.
So over here, we're essentially putting a
97:08 - true or a false value. And that's basically
a condition right? It's a true or false value.
97:14 - So I'm gonna come down here, I'll say if and
I'm just going to type out his mail. And essentially,
97:20 - what this is saying is if the value stored
inside of his mail is true, in other words,
97:26 - if the value in here is true, then we're going
to execute the code that's inside of these
97:31 - curly brackets. So I could say, like C out,
and I'm just going to type out like you are
97:38 - a male. And now when I run my program, you
guys, we'll see what happens. So run the program.
97:45 - And you'll see over here, it says you are
a male. And that's because the Boolean is
97:51 - male was true. So the value that was inside
of this condition, the value inside of the
97:56 - parentheses, which was true, and we executed
this code, if I made this false, now, you'll
98:02 - see that this code isn't going to get executed,
so we're not going to be printing anything
98:06 - out. So because the value inside of this parentheses,
because the condition was false, we're actually
98:13 - not going to execute this code. But let's
say that if the person wasn't male, we also
98:19 - wanted to handle that situation, I can use
another keyword in C called else so I can
98:24 - type out else just like that. And we're gonna
make an open and closed curly bracket. Now,
98:30 - inside of this open and close curly bracket,
I can put a message that's going to be displayed
98:35 - when this is false. So I'm going to show you
this a C out. And I'll say, you are not male,
98:43 - right, so I'm responding to this situation.
So now, even though is male is false, when
98:49 - I run my program, it's going to be able to
respond to that. So it's just gonna say you
98:54 - are not male. Essentially, what's happening
here is, my program is now smart enough to
99:00 - respond to this variable. So if this variable
is male is true, it can handle that. If it's
99:07 - not true, it can also handle that. And so
basically, inside of these parentheses, I
99:12 - specified a condition in our case, it was
a true or false value that was stored inside
99:16 - of this is male variable. So that's kind of
cool. Now let's up the ante a little bit,
99:21 - I want to show you guys how we can make these
more complex. This is a very simple example.
99:26 - But let's say I added in another Boolean,
so I had another Boolean called is tall. And
99:32 - I'm going to set this equal to true and actually,
I'm gonna set this equal to true as well.
99:36 - So now in addition to izmail, I also have
is tall. So let's say that we wanted to check
99:42 - to see if the person was both male. And if
they were tall, so down here, what I can do
99:49 - is I can use something called the AND operator
I could say is male, and is tall. And basically
99:57 - what's happening now is c++ is saying If the
person is male, and the person is tall, then
100:04 - we're going to print this out. So I'll just
say you are a tall male. So this code, this
100:10 - line of code down here, and any of the code
inside of these open and closed curly brackets
100:15 - is only going to get executed when is male
is true, and is tall is true. Essentially,
100:20 - this and operator is allowing me to check
two separate conditions. And both of them
100:26 - have to be true, in order for this line to
get printed out. So you'll see is male is
100:31 - true and is tall is also true. So now, when
I run my program, you'll see that it says
100:37 - you are a tall male. Here's the thing, though,
if I set one of these to false, so if I set
100:43 - his tall to false, this whole condition is
no longer going to be true. So then we're
100:48 - going to go down here to this else block.
And this should probably say, like, you are
100:52 - not male, or not tall, but we'll just leave
it like that just for demonstration purposes.
100:57 - Alright, so now it says you are not male,
right. And obviously, like I said, that message
101:01 - should be different. But the point is that
this condition was false, because one of these
101:06 - values up here was false. And that's how we
can use this and operator, there's another
101:11 - operator called the OR operator. And that
is similar to and except only one of these
101:17 - conditions has to be true, in order for the
whole thing to be true. So even though his
101:24 - tall is set to false, and his male is set
to true, this is still going to execute, so
101:30 - it's still gonna say you are a tall male,
because one of them is true. So let's go ahead
101:36 - and run this program. Now, you'll see it says
you are a tall male, so it executed the code
101:42 - that was inside this initial if block. And
that's because one of them is true. If I set
101:48 - both of these to false now, because we're
using the or now it's going to go down to
101:52 - you are not male. So you'll see down here
it says you are not male. So that's basically
101:58 - how we can use and and how we can use or with
the AND operator, we can put two conditions
102:03 - in both of them have to be true for the whole
thing to be true with the OR operator, only
102:09 - one of the conditions has to be true for the
whole thing to be true. And they can both
102:12 - be true as well. And it'll be true. But if
both of them are false, then it's going to
102:16 - be false. All right, let's make this even
more complex. So so I want to show you guys,
102:21 - another thing we can do, I'm going to bring
this back to and so I'm gonna say is male,
102:26 - and is tall. But let's say that we wanted
to check to see if they were male, and they
102:32 - weren't tall. So if they were like a short
male, well, I can actually check another condition.
102:38 - So I can use another keyword. In c++, it's
called else if, and I'm going to make an open
102:44 - and close parentheses and open and close curly
bracket. And I'm just going to bring this
102:47 - down to a new line. So else if is basically
saying, if this condition up here is false,
102:56 - then we're going to come down here, and we're
going to execute this condition. So if this
103:00 - condition appears false, instead of just going
to else, we're going to come over here, and
103:04 - we're going to check another separate condition.
So over here, I want to check to see if they're
103:09 - male, and they're not tall, so they're not
tall. So I can say, is male, just like before,
103:16 - so I'm saying elsif is male, and is tall.
But remember, I want to check to see if they're
103:22 - not tall. And here, I want to introduce you
guys to another operator, it's called the
103:27 - negation operator, it's basically an exclamation
point. And whenever you put this exclamation
103:32 - point before a condition like is tall, it's
going to actually negate that entire condition.
103:38 - So if is tall is true, and we put this negation
operator over here, it's going to set it equal
103:42 - to false, and vice versa. So essentially,
what I'm saying here is else if is male, and
103:50 - is not tall. That's basically what this is
saying. So now, over here, we can just print
103:57 - out, you are a short male, right? Because
if this code, in other words, if this condition
104:03 - is true, that means they're male, and they're
not tall, so they're short male. And there's
104:09 - one more that we can check. So I'm going to
say another LSF over here. And there's one
104:14 - more possible scenario with these two variables
up here, that's when they're tall, but they're
104:20 - not male. So I can say not, is male, and is
tall. So this would be like, you know, it
104:27 - could be like a tall female or something.
Right. And so down here, I'm going to go ahead
104:31 - and say C out, and I'll just say you are tall,
but not male. Right. So essentially, I'm just
104:40 - printing that out onto the screen. So now
we have all of these different situations
104:45 - covered. So over here in this if else block
which is what we would call this and actually
104:51 - down here in this else block, we would want
to change this. So this is going to be you
104:54 - are not male and not tall. So that's just
you know semantically going to Correct. All
105:00 - right, so we're able to respond to every possible
combination of these two variables up here.
105:06 - So let's try this out, I'm going to set both
of these equal to true. And now I'm going
105:11 - to run my program. So they're both equal to
true. So our program will be able to respond
105:16 - to that situation, who see it says you are
a tall male, awesome, that was able to respond
105:21 - to that, let's set his male equal to false.
So now we have izmail false and is tall, true,
105:28 - our program, once again, is going to be able
to handle that. So it's gonna say you are
105:31 - tall, but not male. So the program is smart
enough now to be able to tell us what we are
105:36 - depending on the value of these variables.
Let's try another one. So we'll set is male
105:41 - to true and is tall to false. And again, it's
going to be able to respond. So it will say
105:47 - you are a short male. And then finally, we'll
set them both false. And we should get the
105:53 - answer which is going to be you're not male,
and not tall. Awesome. So we were able to
106:01 - figure this out just by using all this stuff.
So let me walk you guys through this one more
106:05 - time, we have this if statement, and it's
checking if they're male. And if they're tall.
106:10 - Now, these are both conditions, right? So
I'm checking this is Gmail, this is a condition,
106:15 - essentially, it's a true or false value, right?
And then I'm checking is tall. And if both
106:21 - of these are true, then we'll execute the
code inside of here. If this is false, then
106:25 - we'll come down here and we'll check this
other condition. And we're going to keep doing
106:28 - that. And so we get down here, and we figured
out okay, they're not male, and they're not
106:32 - tall. So that's the basics of if statements.
And really, this is just scratching the surface
106:37 - of if statements, I talk to you guys about
a lot of the different things we can do. But
106:41 - there's one more thing I want to talk to you
guys about in the next tutorial, which are
106:44 - called comparisons. And down here, we're using
these Boolean variables in order to get our
106:50 - conditions right, so I'm using these, and
these are either going to be true or false,
106:54 - right. But we can also use something called
comparisons. And with comparisons, we can
106:59 - check to see if different values relate to
each other in different ways. So I could check
107:03 - to see if like a number is greater than another
number or something. And we can use those
107:07 - comparisons as our conditions. And that's
been pretty cool. So stick around for the
107:11 - next tutorial. And I'll talk to you guys more
about these if statements. In this tutorial,
107:19 - I'm going to talk to you guys some more about
if statements more specifically, we're going
107:23 - to be looking at using comparisons inside
of our if statement condition. So this would
107:28 - be kind of cool. In this tutorial, I want
to create a function, so we're going to write
107:34 - a function, and it's going to basically tell
us the max of two numbers. So this function
107:39 - will take as parameters, two numbers, and
then will basically return whichever number
107:44 - is the largest. And this is a great example
of how we can use comparisons with if statements.
107:49 - So over here, I have my main function. And
up here, I'm going to create another function.
107:54 - And let's just say it's going to return an
integer, and I'm just going to call it get
107:57 - max. And we'll make an open and close parentheses
and open and close curly bracket. So inside
108:03 - of this function, we're going to take two
parameters, one is going to be an integer,
108:06 - and we'll get another integer. So essentially,
we're going to take two integers as parameters
108:11 - as input. And the goal will be to figure out
which of the integers is the biggest, and
108:17 - return that back to the caller. First thing
I want to do is just create a variable called
108:23 - result. And I'm not going to give this value
right away. But eventually, at the end of
108:28 - this function, we're going to return results.
So whatever we do in here, we have to store
108:36 - whichever of these is bigger inside of this
result variable. So this should be kind of
108:40 - interesting. Now, we need to figure out which
is bigger. So we can use an if statement to
108:45 - do that. So I'm just going to say F, open
and close parentheses and an open and close
108:50 - curly bracket. Now, inside of this parentheses,
we need to put a condition. In other words,
108:56 - we need to put a true or false value, right?
If the value is true, then we'll execute whatever's
109:00 - down here. If the value is false, then we'll
just move on. Here's the thing though. In
109:05 - the last tutorial, when we were learning about
if statements, we were using Boolean, right,
109:09 - and a Boolean is a true or false value. So
it's really easy, right? You just throw it
109:13 - in there, and it's true, or its false. And
you can just kind of do the if statement.
109:18 - But in a lot of cases, we're not going to
have any Boolean information available to
109:22 - us. So it's not going to be as easy as just
like throwing a Boolean in there. All the
109:26 - only information that we have are these two
numbers. So how can we create like a true
109:31 - or a false value using just those two numbers?
Well, what we can do is we can use a comparison.
109:38 - So if I want to figure out which of these
numbers is bigger, I can just compare them
109:42 - right so over here inside of this if condition
I can basically just say if num one is greater
109:49 - than num two, if num one is greater than num
two, then we can just set result equal to
109:56 - num one. And the reason I'm doing that is
because we know for a fact That if this condition,
110:01 - if this comparison is true, the num one is
the bigger. So you can see this comparison
110:08 - num, one greater than num two, it's actually
going to get resolved down to a true or a
110:12 - false value. Right? num. One is either greater
than num two, or it's not technically, this
110:18 - is going to be a boolean value, right? Once
you evaluate the comparison, once we figured
110:23 - out if it's true or not, it's going to be
a true or false value, right? So I can basically
110:27 - check to see if num one is greater than num
two, and if it is, was that result equal to
110:32 - num one. And we can just say else, and we'll
set result equal to num two, right. And the
110:41 - reason we're saying this down here is because
of this condition is false. If num one isn't
110:45 - bigger than num two, then we know that num
two is the bigger of the two numbers, or in
110:50 - certain circumstances, the numbers might be
equal, but it's still going to work anyway.
110:54 - So down here, we're going to return the result.
So let's go ahead and test this function.
110:59 - I'm just gonna come down here. And why don't
we print out the answer. So I'm just gonna
111:04 - say get max. And we'll throw like a two and
a five in there, right? So pass in a two and
111:10 - a five. And now when we run this program,
hopefully we should get that five back. So
111:15 - I'm gonna run the program. And Yep, over here,
we get our five. So that's working perfectly.
111:21 - So this is basically how we can use comparisons
inside of these if statement conditions, right?
111:27 - Technically, this comparison is going to get
resolved down to a boolean value, it's going
111:32 - to get resolved down to a true or false, like
either the comparisons true or it's not right.
111:37 - And that's kind of interesting. So that's
sort of the basics. And in addition to using
111:41 - greater than we could also use less than,
we could use less than or equal to, we could
111:46 - use greater than or equal to, we can use equal
to and equal to is a double equal. So when
111:53 - we use the equal sign down here, we're using
it for assignment. So I'm assigning the variable
111:58 - result the value stored inside num one. When
I use this double equals, it's a comparison
112:04 - operator. So I'm comparing the value of num
one with the value of num two. And again,
112:09 - that's either going to be true or false, right?
They're either going to have the same value
112:12 - or they're not. And then the last one we can
use is a not equals and not equals does exactly
112:18 - what you think it does. This whole thing is
going to be true if num one is not equal to
112:21 - num, two. So those are sort of the basics.
Now let's make this a little bit more complex.
112:27 - So this get max function takes two integers.
What if we had it take three, so let's say
112:34 - int, num, three. Now all the sudden, instead
of just comparing two numbers, we have to
112:39 - figure out which is bigger among the three
numbers. And this is going to make our if
112:44 - statement a lot more complicated. So why don't
we just start over. And I'll show you guys
112:48 - how we can do this. So inside of this comparison,
I need to check to see if num one is bigger
112:54 - than num two, just like we did last time.
But I also need to check and see if num one
113:00 - is bigger than num three. If no one's bigger
than num two, and it's bigger than num three,
113:06 - then we know it's the biggest. So let's start
there. I'm just gonna say if num one. And
113:11 - instead of just saying greater than I'm gonna
use a greater than equals right, because there
113:14 - is that chance where they're all the same
number in which case this will cover that.
113:18 - So we can say if num one is greater than or
equal to num two. And so I'm going to use
113:24 - this and operator and this is going to allow
me to check another condition. So I can say
113:29 - num one is greater than or equal to num three.
So now if num one is greater than or equal
113:35 - to num two and is greater than or equal to
num, three, than we know num, that one's the
113:39 - biggest. So I'm going to set result equal
to num one. Now down here, we need to check
113:45 - another condition. So I'm gonna say else if
and we basically want to check to see if num
113:51 - two is greater than or equal to num one. And
num two is greater than or equal to num three.
113:59 - And if this is the case, in other words, we're
going to check this condition if this condition
114:04 - of here is false. So this condition is false.
We know that num one's not the biggest, right.
114:09 - But if this condition is true down here, then
we know number two is the biggest. So we'll
114:13 - say result is equal to num two. Now all we
have to do is just say else. And down here
114:20 - we can just say result is equal to num three.
Because if this condition is false, that means
114:27 - num one's not the biggest. If this condition
is also false, that means num twos not the
114:32 - biggest. So if num one's not the biggest and
num twos, not the biggest, then num three
114:38 - must be the biggest. So we're going to default
to this value. Alright, so that is the if
114:43 - else block that we need. And you see I'm using
a bunch of different stuff here. So not only
114:47 - am I using this and operator, I'm also using
these comparison operators and that's what
114:52 - these guys are called. So let's go ahead and
test our little function out. So now instead
114:56 - of saying two parameters, we need to pass
in three So in the past one to five and 10,
115:01 - and we should get 10 back, which we do, if
we wanted, we could test out each of the positions.
115:08 - So for example, I could test out, we'll make
this one the biggest now the second one. And
115:13 - we'll see if it works. And it does. And we'll
make this one the biggest now, and we'll see
115:18 - if it works. And it does cool. And then also
there was that condition where like two of
115:26 - them were the same. So let's try this were
two of these guys are going to be the same.
115:31 - And we're on the program. And yeah, so it's
still going to be able to return 200. So there
115:36 - is our max function. And hopefully this gives
you guys a little introduction into using
115:40 - comparisons. Now we can compare all different
types of data. So using these comparison operators,
115:45 - we can compare integers, we can also compare
like doubles and floats, and we can compare
115:50 - characters. So you can compare all those guys
just by using all that stuff in there. In
116:01 - this tutorial, I'm going to show you guys
how to build a four function calculator in
116:05 - c++. Now, if you've been following along with
this course, you'll know that in the beginning
116:09 - of the course, we created a very simple calculator.
And basically, that calculator was able to
116:13 - take in two numbers as input, and added them
together and printed out the answer. But in
116:19 - this tutorial, now we've learned a little
bit more in the c++ language, we're going
116:23 - to build a more complex calculator. So this
calculator is going to allow the user to enter
116:28 - in two numbers, but it's also going to allow
the user to specify which operation they want
116:33 - to perform. So they can specify that they
want to add the numbers and multiply the numbers,
116:37 - divide them, multiply them, whatever. So it's
essentially going to be a more powerful calculator.
116:42 - So down here, inside of my main function,
I want to start writing the code for this.
116:47 - And the first thing I'm going to do is create
a few variables. So I want to create a couple
116:52 - variables. And why don't we just create these
as and you could also make these doubles,
116:55 - if you wanted. We'll just call them num one
and node two. And these are going to represent
116:59 - the two numbers that we want to perform the
operation on. And then down here, we're also
117:04 - going to want to create a character. And I'm
going to call it Opie for operators. So we're
117:09 - going to throw the two numbers here. And we're
going to sort of the operator here. So it's
117:12 - either going to be plus or minus division,
or multiplication. Alright, so now that we've
117:17 - created those two variables, we want to start
writing the code to get the input from the
117:22 - user. The first thing that we want to do is
print out a prompt, so I'm just going to say
117:25 - C out. And I'll basically just print out enter
first number, so we'll prompt them to enter
117:33 - in the first number. And then down here, we're
going to use C in and remember you want to
117:37 - these, these two greater than signs. And we
want to store the user's input inside of num
117:43 - one, just like that. Okay, cool. So now that
we got num, one, I'm actually just going to
117:48 - copy this code, and then down here, we can
paste it two more times. So down here, we're
117:54 - going to ask them for the operator. So I'll
say enter, operator, and we're going to store
118:00 - the operator inside of that Opie variable
just like that. And then finally, we're going
118:05 - to enter in the second number, and we'll store
it inside of num two. So basically, what I'm
118:09 - doing is I'm prompting the user for all of
the information that we need. So we're going
118:13 - to get that first number, we're going to get
the operator and then we're going to get the
118:16 - second number. So they'd give me like five
plus two, or six divided by seven or something
118:21 - like that. Alright, so now that we have all
of that information, we have one more thing
118:26 - that we need to do, which is we need to figure
out what the user wants to do. Right over
118:31 - here, we have the operator. So ideally, they
would have entered in like a plus sign a minus
118:35 - sign, whatever, but we don't know what exactly
they entered in like we don't we have no idea
118:40 - what what they were going to enter in. So
we need to figure that out. And this is a
118:44 - perfect scenario for an if statement. So I'm
going to use an if statement. And I'll show
118:47 - you guys how we can check this. So I'm just
gonna say if. And we need to put a condition
118:54 - in here. So basically, what we want to do
is want to figure out what that operator is.
118:58 - So the first thing I'm gonna do is just check
to see if the operator is equal to a plus
119:04 - sign. Right? So if the operator is equal to
a plus sign, then we're basically just going
119:09 - to print out the result of adding the two
numbers together. So why don't we come up
119:13 - here, and I'm going to create an integer called
result. And then down here, we'll set result
119:19 - equal to num, one plus num, two. And we know
that we want to add them because if this condition
119:26 - is true, then we're going to execute this
code. So now let's do an ls F. And down here,
119:32 - I basically just want to check to see if it's
a minus sign. So I'll say if Opie is equal
119:37 - to a minus sign, and if it is equal to a minus
sign, then we can do exactly what we did up
119:42 - there. But we can subtract the two numbers.
So I'll say num, one minus num, two. Alright,
119:48 - so we can do the same thing for multiplication
and division. So I'm actually just going to
119:52 - copy this else if, and I'll paste it down
here. And now we'll say okay, is equal to
120:01 - forward slash, that means division. And then
one more time, we're going to do this for
120:06 - multiplication. So use this Asterix, and then
here we're going to multiply the two numbers.
120:13 - So now we're basically covering all of the
operators. So they enter in a plus sign, and
120:17 - we got that covered minus sign, division sign
and multiplication sign, right, we can cover
120:22 - all of those standard scenarios, but there's
always the chance that the user entered in
120:27 - an invalid operator. So instead of entering
in one of these, they just entered in some
120:31 - like, you know, random character, in which
case, I'm going to use an else block over
120:35 - here. And this LS block is going to get executed
whenever none of these conditions are true.
120:41 - So if none of the conditions are true, then
we know they entered an invalid operator.
120:45 - So I'm just going to go ahead and print that
out, I'm going to say C out. And we'll just
120:49 - print out invalid operator. Alright, so basically,
by the end of this, if block, we should have
120:57 - a value stored inside of result. So down here,
we'll just going to print it out. So I'll
121:01 - just say C out, and we'll print out result.
Alright, so let's see if our program works.
121:10 - I'm going to go ahead and run the program.
And it says enter first numbers, why don't
121:14 - we insert a five? Enter operator, let's enter
a plus sign and second number. Why don't we
121:19 - do 30. So now when I click enter, hopefully
our if statements going to execute, we'll
121:25 - be able to figure out which operation I was
trying to do, and then we'll be able to perform
121:29 - it correctly. So you see down here, we printed
out 35. So it looks like everything worked.
121:34 - So why don't we try a couple other ones. Let's
do like 50 divided by five. So down here,
121:42 - we get 10. Yes, it looks like that's working.
Alright, let's check one more thing, let's
121:46 - check to see if we enter an invalid operator.
So I'm gonna put like a five, we'll enter
121:51 - the operator, let's make it like a capital
G, and then put a nine for the second number.
121:56 - And you'll see down here it prints out invalid
operator. And then we're also getting this
122:00 - other little printout here. And actually,
that's just because we didn't give results
122:04 - we didn't give result in initial value. Alright,
so that's basically our four function calculator,
122:09 - you guys can see how we can combine getting
input from the user, then we can use these
122:14 - if statements to basically figure out what
the user input and that can be extremely powerful.
122:21 - And this tutorial, I'm going to talk to you
guys about using switch statements in c++.
122:28 - Now a switch statement is basically a special
type of if statement, which allows us to check
122:34 - one particular value against a bunch of other
values. So this is a very special use case,
122:40 - when we're trying to compare different things.
So I'm gonna talk to you guys about what switch
122:44 - statements are. And we'll do an example which
are kind of illustrate what they're doing.
122:49 - So in my program, In this tutorial, I actually
want to create a little function, which is
122:54 - going to be able to convert a number into
the day of a week. So basically, if the user
123:00 - passed in a zero to this function, I'd want
to be able to print out like Sunday, or if
123:06 - the user passed in a one, I'd want to be able
to print out Monday, etc. So I want the function
123:11 - to be able to convert an integer number to
a day of the week, just like that. So I'm
123:16 - gonna show you guys how we can do this inside
of our c++ program. So I'm going to create
123:21 - my function, and we're basically just going
to have it return a string. And I'm just going
123:26 - to call it get day of a week, just like that.
And I'm going to make an open and close parentheses.
123:33 - And this is going to take one parameter, which
is going to be an integer. And we'll just
123:38 - call it day num. So this is going to be the
number of the day of the week. So like zero
123:43 - through six, basically. Alright, so inside
of our little function, now, we need to figure
123:49 - out how we can do this. So depending on the
day of the week, in other words, depending
123:53 - on the day num, that they give us, we want
to be able to return a different value. So
123:59 - the first thing I'll do is I'm going to create
a variable. And it's just going to be a string,
124:04 - and I'm just going to call it day name. So
this will be like this will end up storing
124:08 - the name of the day that they requested. And
then down here to the end of this function,
124:13 - we're going to return it. So I'm just going
to say return day name. So now we know what
124:19 - we're going to end up returning. So our goal
inside of this function now is to populate
124:23 - this day name variable with the correct day
of the week. So let's think about this. I
124:29 - mean, one way that we can build this function
is by using an if statement. So I can say
124:33 - like, if day num is equal to zero, and if
day num is equal to zero, then I can say day
124:40 - name is equal to Sunday, right? That works.
And then I can just keep doing this for every
124:46 - day of the week. So I can say like, else if
and again, I have to check to see if day num
124:53 - is equal to something else. So day num is
equal to one and then down here we'll do the
124:58 - same exact thing. So we Ad name is equal to
Monday, right? I can keep doing this for every
125:04 - single day of the week. Here's the problem,
though, I'm gonna have to do this like seven
125:08 - times, right? Potentially eight times, if
we want to check for an invalid input. So
125:13 - I'm going to have to create eight of these
different if else structures in order to figure
125:18 - this out. And that is extremely inefficient.
And actually, this is a perfect circumstance
125:23 - for us to use something called a switch statement.
Now a switch statement essentially takes what
125:28 - we're doing over here with these if else statements,
and it makes it a lot easier. So one thing
125:34 - I want you guys to notice is in every single
one of these conditions, in other words, in
125:39 - every single one of these, if conditions,
we're checking to see if the same value, day
125:44 - num is equal to a different value. So in here,
we're saying Dana is equal to zero. Here,
125:49 - we're saying Dana equal to one and the next
one, it would be Dana equal to two, then Dana
125:53 - equal to three, all of those conditions are
checking to see if daenam is equal to something
125:58 - else. And when you have a situation like that,
it's a perfect candidate for a switch statement.
126:04 - So I'm going to show you guys how we can use
a switch statement to make this a lot easier.
126:07 - So I'm just going to write out switch and
open and close parentheses and an open and
126:12 - close curly brackets. So so far, it looks
a lot like an if statement, up here in these
126:16 - opening, close parentheses, I'm going to put
in a value. And we're basically going to put
126:20 - the value in here that we want to compare
to all those different values. So in my case,
126:25 - it's going to be daenam. Right, I'm comparing
daenam to 0123456, excetera, right? daenam
126:33 - is the value that I want to compare to all
the different values. Now inside of this switch
126:37 - statement, I can write cases. And basically
I can say case, and then I can just put a
126:42 - value in here. So I can say zero and a colon.
And then down here, I can basically type out
126:48 - what I want to happen. So I could say day
name is equal to Sunday. Now essentially,
126:54 - what this is doing is it's saying in the case,
that day, num is equal to zero, we want to
127:00 - set day name equal to Sunday. And then right
below here, I'm just going to say break. And
127:05 - I'll explain what break does in a second.
But I can basically make one of these cases
127:09 - for every single number. So I could say like,
case one. So in the case, the day num is equal
127:18 - to one, I'm going to set day name equal to
Monday. And then again, I'm just going to
127:25 - say break. And then I can keep doing this
for 23456, etc. Right. So what this break
127:32 - is doing down here, this break statement is
essentially breaking us out of the switch
127:37 - statement. So if I don't put this break statement
here, c++ is actually just going to keep looking
127:42 - through all these cases. So even if daenam
is equal to zero, and it sets it equal to
127:47 - Sunday, it's still going to keep going and
checking all these different values and less
127:51 - I say break right here. And generally, it's
a good idea to say break unless you want to
127:56 - be able to check for more than one condition,
we're basically saying in the case, the day
128:00 - num is equal to zero, we're going to do all
the code down here. And I'm actually going
128:05 - to make one of these for each day of the week.
So I'm going to go off and do that. And then
128:08 - we'll meet back here, and I'll kind of show
you guys what I have. Alright, so I went ahead
128:12 - and made one of these little case blocks for
every day of the week. So you can see down
128:17 - here we have zero through six. And they're
all corresponding with the appropriate day.
128:24 - So in case three, day name is Wednesday, etc,
right, so everything seems to be working.
128:29 - Now there's one more thing that we have to
do in this switch statement. So down here,
128:33 - there's always the chance that the user enters
in an invalid day of the week. So in other
128:38 - words, if the user doesn't enter zero through
six, then we want to be able to handle that.
128:43 - In other words, I want to be able to handle
the situation where the number that they entered
128:47 - isn't in here. And inside of a switch statement,
we have a special little block, which is called
128:50 - default. So we can just say default, a colon,
and then down here, this code is going to
128:56 - get executed, if none of the cases up here
are true. So if the number isn't equal to
129:02 - any of these numbers up here, then this code
inside the default block will get executed.
129:07 - So down here, I could just say, day name is
equal to invalid day number. Alright, so now
129:14 - we have our switch statement set up. And you
can see how this is a lot cleaner than something
129:18 - like an if statement. So this is a lot clearer
what's going on, we don't have to type out
129:23 - LSF like 1000 times, we don't need all those
parentheses and all that stuff. Basically,
129:28 - it's just really clear, it's really easy to
visualize what's going on. Alright, so let's
129:32 - see if our get day the week function is working.
I'm going to go in here and we're actually
129:38 - going to print out the value. So I'll say
C out. And we'll call this so I'll say get
129:42 - day of week and we need to pass this an integer.
So why don't we pass it zero. And hopefully
129:50 - we should get printed out here Monday. Or
Sunday. Whoops. Yeah. So over here Sunday,
129:57 - so Sunday would be the first day of the week.
Let's try. Let's see if we can get Monday.
130:01 - So I'm going to put one here instead of zero.
And now we should get Monday. Yeah. Awesome.
130:06 - All right, let's try one more, we'll try six.
So six is going to be Saturday. And let's
130:13 - see if it works. Cool. So Saturday worked
as well. Alright, there's one more situation,
130:17 - which is where we pass in an invalid number.
So if I pass in like a 10 here, now we'll
130:22 - be able to see that this isn't going to work.
So it should tell us invalid day number. Awesome.
130:27 - So this is a pretty cool function. And it's
working. And you can see how we can use these
130:32 - case statements. In order to make this a lot
easier. Now, here's the thing, I could have
130:36 - easily done this with an if statement, nothing
is stopping me from doing that. But it's a
130:40 - lot easier to use something like a switch
statement. And that's why c++ included it
130:45 - in the language. In this tutorial, I'm going
to show you guys how to use while loops in
130:54 - c++. Now a while loop is basically just a
programming structure that allows us to loop
130:59 - through a block of code, while a certain condition
is true. So with this tutorial, we're starting
131:07 - into something called loops. And loops are
extremely useful. And there's a lot of situations
131:12 - in our programs, specifically in c++, where
we're going to want to be able to loop over
131:16 - code and do things a bunch of times. So I'm
gonna introduce you guys to the most basic
131:21 - type of loop, which is a while loop. And we'll
sort of see what it does and see how it works.
131:25 - Alright, so down here, the first thing I'm
going to do before I create my while loop
131:29 - is I'm actually just going to create an integer.
And I'm just going to call it index, and I'm
131:33 - going to set it equal to one. So this isn't
100% necessary when you're creating while
131:37 - loops. We're just going to use this in our
example in this tutorial. Now, when I want
131:41 - to create a while loop, I can basically just
say, while I can make an open and close parentheses,
131:46 - and an open and closed, curly bracket, and
this is sort of like the main structure, the
131:52 - main outline for a while loop. Now here's
what's going to happen. Okay, over here, inside
131:57 - of these parentheses, I'm going to specify
a condition. Now, if you remember, learning
132:02 - about if statements in c++, this is essentially
what we're doing here. So in here, we're putting
132:07 - a condition just like we would an if statement.
And as long as this condition is true, I'm
132:14 - going to loop over and continually execute
all of the code that's inside of these curly
132:20 - brackets, as you'll see in a second, we're
going to put a bunch of code inside of these
132:23 - curly brackets. And as long as the condition
up here is true, we're going to keep looping
132:29 - through that code. And every single time we
loop through that code, we're going to check
132:33 - this condition. So let me just show you guys
this, and we can kind of get a feel for what's
132:37 - going on. So up here in these parentheses,
I can basically just write a condition. So
132:42 - what I want to do is I'm going to say while
index is less than or equal to five, so this
132:50 - is now my condition, while index is less than
or equal to five, I'm going to execute the
132:54 - code inside of this loop. So I'm going to
execute the code inside of these curly brackets.
132:59 - So down here, what I want to do is I basically
want to print out the value of index. So I'm
133:05 - just going to say, C out index. And then I'm
also going to say and so we print out a new
133:11 - line. And then down here, I'm going to increment
the index, so I'm just gonna say index plus
133:16 - plus. So you remember index plus, plus just
add one two, index essentially. Alright, so
133:22 - what I'm doing is I'm specifying my condition,
while index is less than or equal to five,
133:26 - I want to execute all of this code. So I'm
going to run my program. And maybe you can
133:32 - sort of see already what this is going to
do. But if not, we're going to run it and
133:35 - we're going to take a look at what's happening.
So you see over here, when I ran my program,
133:40 - we basically got 12345. Here's what's happening
over here, I created this variable called
133:48 - index, I set it equal to one and I basically
told c++ that while index is less than or
133:54 - equal to five, I want to keep looping over
this code. So basically, what happened was
133:59 - the first time we went through, we checked
this condition, so we check to see if index
134:03 - is less than or equal to five. Since that
was true. In other words, since index was
134:08 - one on the first iteration of the loop, we
executed this code, so we printed out one,
134:13 - and then we incremented index, so index was
now equal to two, then we came all the way
134:18 - back up here and we check this condition again.
So we check to see if index is less than or
134:24 - equal to five. In this case, index is equal
to so the conditions true index is less than
134:29 - or equal to five. So we're going to execute
all of the code inside of here again, so we
134:33 - printed out two, and then we incremented to
up to three, and then we came back up, we
134:39 - checked the condition again, every single
time we go through the loop, we check that
134:44 - condition. So before we execute the loop,
we execute that condition, we go back and
134:49 - check it again and execute the code again.
Eventually, we got to the point where index
134:54 - was equal to six. So we came up here to check
this condition and six is not less than or
134:59 - equal to five. So Then we just came down,
we broke out of the while loop, and everyone
135:03 - was happy. So that's essentially what we did.
And that's what a loop is basically you specify
135:09 - a condition, as long as that condition is
true, then you're good to go. And we can pretty
135:14 - much just keep looping through all the code
in there. And there are tons of situations
135:18 - where using loops is gonna come in handy.
And in the next tutorial, we're actually going
135:22 - to build a little game where we can use a
while loop. But before we do that, I want
135:26 - to talk to you guys about a couple more things
with these loops. The first thing you need
135:29 - to watch out for when you're using these loops
is something called an infinite loop. an infinite
135:35 - loop is a situation where this condition up
here never becomes false. So in certain circumstances,
135:42 - like the condition that you specify up here
won't become false ever. And then your loop
135:47 - will just continually loop through. So for
example, if I was to get rid of this line
135:51 - of code right here, where we're incrementing
index, now the index is always going to be
135:56 - one. And so this condition up here is never
going to be false. So when I run my code,
136:02 - you'll see over here that we're just continually
printing out one, you can see the screen keeps
136:06 - flashing, really what's happening is we're
just looping, looping, looping, looping through
136:10 - that while loop, and it's never going to stop
me I can leave this on for years. And it's
136:14 - never going to stop, right because that condition
is never going to be false. So you always
136:19 - want to make sure that any conditions that
you write with these, while loops at some
136:23 - point are going to become false. Now, there
are certain circumstances where you're going
136:27 - to want a while loop. But I would say for
the most part, while loops aren't going to
136:32 - be necessary. And they can actually be dangerous,
especially if you're doing something where
136:36 - you're like creating variables or allocating
memory, like you can end up crashing your
136:40 - program or even crashing your computer if
you're not careful. So that's just a little
136:45 - tip about infinite loops. There's one more
type of loop that I can show you in this tutorial.
136:51 - And it's a different type of while loops,
kind of like a different flavor of while loop.
136:54 - But before I show you that, I just want to
show you a demonstration. So if I make this
136:58 - int index equal to six, when I run my program,
the code inside of the while loop is never
137:06 - going to execute. And that's because before
we loop through all of this code, we check
137:11 - this condition first. So before I'm allowed
to execute any of this code, I check the condition
137:17 - up here in these parentheses. So I check to
see if index is less than or equal to five,
137:20 - since index is starting out at six. We're
never ever going to execute this code, right.
137:24 - So if I ran my program, you guys will see
nothing gets printed out, right. So we didn't
137:30 - do anything. But there's another type of loop,
which is called a do while loop. And I want
137:34 - to show you guys how we can make one, I'm
just going to cut this and I'm going to paste
137:38 - it down here. And I need to include a semi
colon. And then up here where that while used
137:43 - to be I'm just gonna say do and this is what's
called a do while loop. And a while loop is
137:47 - essentially just a normal while loop, but
it's reversed. So instead of checking the
137:52 - condition, and then executing the code, we're
going to execute the code, and then we're
137:57 - going to check the condition. So it's just
sort of like the while loop reversed. So now
138:01 - even though index is equal to six, I'm still
going to be able to execute this code first,
138:07 - then we're going to check the condition and
it's not going to let me do it again. So let
138:11 - me show you guys what happens when I run this.
And you'll see over here, we're able to print
138:15 - out that six. That's because with the do while
loop, you execute the code in the loop before
138:20 - you check the condition. And there's a bunch
of different situations where you can use
138:25 - while loops or do while loops. And to be honest
with you everything that you can do with a
138:29 - do while loop you can do with a normal while
loop. So do our loops aren't technically necessary.
138:36 - But in a lot of circumstances, they are useful.
So that's why they're included in the language
138:41 - B I mean, that's a basic overview of loops.
There's actually another type of loop that
138:44 - we can talk about in a future tutorial called
for loops. But for now, you know, practice
138:49 - with these wild loops, you can kind of see
like how they work. In this tutorial, I'm
138:56 - going to show you how to build a little guessing
game in c++. And this is going to be cool
139:01 - because we're actually going to be able to
use some of the stuff that we've been learning
139:04 - up to this point in the course. So we'll use
things like while loops, if statements, we'll
139:08 - use variables, we use all sorts of stuff in
order to build this game. So essentially,
139:14 - how this is going to go is the user is going
to try to guess a secret number, right? So
139:19 - I'm gonna have a secret number stored here
in my program. And the user's job will be
139:24 - to try and guess what that number is. So the
concept of the game is pretty simple. And
139:28 - as you'll see in a second, it's actually pretty
simple to program something like this. But
139:33 - here's the one caveat is if the user doesn't
get the guests right on the first try, I want
139:37 - to keep asking them keep prompting them to
enter in another guest. So I'm going to show
139:42 - you guys how we can do this. So the first
thing I want to do is create our secret number.
139:47 - So I'm just going to make an integer and I'm
just going to call it secret num. I'm just
139:51 - going to set this equal to I don't know, let's
say seven. So seven is going to be our secret
139:56 - number. And then the next thing I want to
do is create another integer which we're gonna
140:00 - call guests, and we're not going to give guests
a value right up front. So now we have our
140:05 - secret number, and we have our guests. And
we want to be able to keep asking the user
140:09 - to guess what the secret number is until they
get it right. So whenever something needs
140:14 - to be done continually, that's usually a good
sign that we want to use a while loop. So
140:19 - I'm going to go ahead and say, while when
make an open and close parentheses, and I'm
140:23 - gonna make an open and close curly bracket.
So inside of this while loop, we want to continually
140:27 - ask the user to enter in the number until
they get it right. So what I want to do here
140:32 - is specify a condition. In other words, I
want to keep looping Wow, the secret num is
140:38 - not equal to the guests. So as long as the
guests is not equal to the secret nom, in
140:44 - other words, as long as the user hasn't guessed
correctly, I want to keep going through this
140:49 - loop. Now, every time through the loop, I
want to prompt the user to input a number.
140:55 - So I'm just going to say C out. And we'll
basically just say, enter guests, so they're
141:01 - going to enter the number that they want to
guess. And then down here, we want to be able
141:06 - to get that answer, we want to store it in
a variable. So I'm just gonna say C n, two
141:11 - greater than signs. And I'm just gonna put
guests here. So basically, what we're telling
141:15 - see is that we want to take whatever the user
enters, store it inside of the guest. So basically,
141:20 - every time we go through this loop, the user
is going to be guessing, and then we're going
141:23 - to check their guests against the secret num.
If they got the secret num, right, then we'll
141:29 - just break out of the loop. So down here,
if they end up getting out of the loop, that
141:33 - means they got the guest right, so I can just
print out, you win, so we'll give them a success
141:39 - message. Alright, so this is essentially all
we need to build our guessing game. So I'm
141:43 - going to go ahead and run this program, and
we'll see how we did. Alright, so it says
141:47 - enter guests, so I'm just going to enter in
some numbers. So you can see I entered in
141:50 - a three, that wasn't the secret number, so
I can keep entering in different guesses.
141:55 - And no matter how many times I guess, it's
gonna keep asking me to guess until I get
142:00 - it right. Now let's try to get the guests
Right, so the secret number was a seven. So
142:05 - when I enter a seven in now, all the sudden
the condition that was in that while loop
142:10 - is going to be false. So the secret num is
going to be equal to the user's guess. And
142:16 - we'll break out of the while loop. And it's
going to say you win. So that's essentially
142:20 - how we can build our little guessing game.
Now I will say down here, I created this game
142:25 - using a while loop, right. But there's actually
another way that we can build this using a
142:30 - do while loop. So your homework for this tutorial
is to go off and see if you can do this using
142:35 - a do while loop instead of just a normal while
loop. Alright, so here's the thing, this is
142:40 - actually a pretty fun game, and it works out
we were able to program it really easily.
142:44 - But the game is a little bit unfair. It's
unfair in the sense that the user gets essentially
142:48 - unlimited guesses. So they can guess as many
times as they want. And honestly, that doesn't
142:53 - seem fair. So what we could do is we can impose
some sort of a guess limit. So I can say,
142:59 - hey, the user is only able to guess like three
times and then they lose the game, right.
143:03 - So I'm going to go ahead and show you guys
how we can actually program something like
143:07 - that, we're going to need to add in a couple
extra variables, the first variable I'm going
143:12 - to add in is going to be called guest count.
And this variable is basically just going
143:17 - to keep track of how many times the user has
tried to guess the secret numbers. So every
143:22 - time the user guesses the secret number, we
want to increment the guest count. And I'm
143:27 - actually going to set this equal to zero initially,
because the user will have guessed zero times,
143:33 - then down here, every time the user guesses,
I'm going to increment the guest count. So
143:38 - I'm just gonna say, guest count, plus plus.
So now we're basically able to keep track
143:44 - of how many times the user has tried to guess
the secret number. All right, we're gonna
143:49 - make another variable over here. And I basically
just want to call this gas limit. And guess
143:55 - limit is going to specify how many times the
user is able to guess until they lose. So
144:01 - why don't we set this equal to 30. So we'll
say that the user gets three guesses, they
144:05 - can't get the word and three guesses, then
they're going to lose the game. Alright. And
144:09 - then one more thing, we want to create another
variable, which is going to be a Boolean,
144:13 - and this is going to be called out of guesses.
And I'm going to set this equal to false initially.
144:20 - So out of guesses will tell us whether or
not the user has any guesses left. If out
144:24 - of guesses is false. That means the user has
guesses left, right? Because they're not out
144:29 - of guesses. If it's true, it means they don't
have any guesses left, because they ran out
144:34 - of guesses. Alright, so now that we have these
variables, I want to show you guys how we
144:38 - can modify this a while loop. So down here,
every time we go through this while loop,
144:43 - you'll see that we're letting the user guessed
the number. But here's the problem. If the
144:46 - user doesn't have any guesses left, then we
don't want them to be able to guess the number.
144:51 - Right? In other words, if they've reached
the guessed limit, we don't want to give them
144:54 - another guess. So what I can do here is I
can actually use an if statement and what
145:00 - I'm going to say is if guest count is less
than guest limit. So if the guest count is
145:07 - less than the guest limit, then I'm going
to let them guess, right? Because if this
145:12 - condition is true up here, that means that
they still have some guesses left, right?
145:16 - They haven't reached the guests limit. So
then they're going to be able to guess what
145:21 - increment the guest count, etc. Otherwise,
though, if the guest count isn't less than
145:26 - the guest limit, that means that they ran
out of guesses, right, so what I want to do
145:31 - is I want to toggle this Boolean. So basically,
I want to say out of guesses is equal to true.
145:37 - So I'm telling my program that they ran out
of guesses. Alright, so once we've set this
145:43 - equal to true now, we're basically done inside
of this while loop, right? So every time we
145:48 - go through, we're checking to see if they
have any guesses left. If they do, then we
145:53 - let them guess. Otherwise, we tell our program
that they're out of guesses. There's one more
145:58 - thing that we have to do to this while loop
which is modify the condition. And up here
146:02 - in this while loop condition, we can use this
and operator. And this and operator will allow
146:07 - me to put two conditions inside of there.
So I could say while secret num is not equal
146:12 - to guests, and we can check another condition.
So what I want to do is I want to check to
146:17 - see if they're out of guesses. So I want to
check to see if out of guesses. And I want
146:23 - to check to see if they're not out of guesses.
So we're going to keep looping as long as
146:26 - they haven't guessed the secret word. And
they're not out of guesses, right if one of
146:31 - those becomes false, so if they run out of
guesses, or if they guessed the secret word,
146:35 - then we're going to break out of the loop.
So that's essentially what's happening here.
146:39 - Alright, so one more thing down here below
the while loop, we have this C out, and we're
146:44 - just printing out you win. But this isn't
technically correct, because if the user runs
146:50 - out of guesses, then they're going to break
out of the loop. But they didn't win. So we
146:55 - shouldn't tell them that they won, we should
tell them that they lost. So what I'm going
146:58 - to do is make another if statement. And I'm
going to check to see if out of guesses. So
147:04 - if out of guesses is equal to true, then I
just want to print out a you lose message.
147:13 - And otherwise, if it's not equal to true in
other words, if they had guesses left, that
147:20 - means that they want so that means they guess
the secret word. Alright, so let's go ahead
147:25 - and run this program. And we'll see how we
did. Alright, so down here, it says enter
147:29 - a guest. So why don't we try to lose the game.
So I'm just gonna say three, four, and two.
147:34 - So this is our last guest. If we don't get
it on this try, that means that we lose. So
147:38 - you lose, right? So we lost the game. Alright,
so looks like it's working. So now instead
147:43 - of being able to guess infinite times, we
can only guess three times. Let's see if we
147:48 - can win the game now. So we're gonna guess
like a three, a two. Now we're on our last
147:54 - guests, I'm gonna say seven. And when I enter
this, it says you win. So we were able to
148:00 - win the game, as well. So this is sort of
how we can use all of these different programming
148:05 - structures together. So you'll see down here,
not only that, I use this while loop. And
148:09 - not only did I use all these variables, but
I also use if and else in combination with
148:15 - all that stuff. And really, this is what real
programming is going to look like, you know,
148:19 - it's not just going to be like little simple
examples, it's going to be a little bit messy
148:23 - just like this. Not that this is messy code.
But we want to be able to use all of these
148:28 - different programming structures in combination.
There's also one more thing I want to tell
148:32 - you guys, which is the way that I wrote this
little algorithm, this little function here,
148:38 - we could have written this like a dozen different
ways. So I could have programmed this game.
148:42 - And you know, I can think of like at least
two or three other ways that I could have
148:46 - done this. And this is another lesson in programming
is that generally there's going to be like
148:50 - five or six different ways to do the same
thing. So I could have done this with a do
148:55 - while loop, I could have used different things
I could have used like a break statement or
148:59 - something else. And so that's one of the cool
things about being a programmer is it's going
149:02 - in and trying different ways to do the same
thing. But that's basically how we can build
149:08 - this guessing game. Hopefully, you guys learned
a little bit about seeing all those different
149:11 - structures like ifs and Wiles, and variables
and all that stuff used together. In this
149:21 - tutorial, I want to talk to you guys about
for loops in c++. a for loop is a special
149:26 - type of loop, which actually allows us to
keep track of how many times we've gone through
149:32 - the loop. So in a for loop, we can use something
called an indexing variable. Basically, that
149:37 - indexing variable will allow us to keep track
of how many times we've gone through the loop.
149:41 - And you can also use the indexing variable
to do a bunch of other stuff too. So I'm going
149:45 - to show you guys how for loops work, we're
going to look at why they're useful and in
149:49 - what situations you're going to want to use
them. So over here, you'll see that I have
149:53 - this basic program set up and essentially
I just have a while loop over here. So I have
149:58 - this a integer called index and I just set
it equal to one. And then while index is less
150:04 - than or equal to five, I'm just printing out
the value of index. And then I'm incrementing
150:08 - it. So I'm gonna go ahead and run this program,
you guys can kind of see what's happening.
150:12 - So you'll see, we're basically just printing
out 125. So this is a very simple while loop.
150:17 - And if you've been following along with this
course, and you've you know, hopefully you're
150:20 - familiar with what while loops do at this
point. But I want you guys to notice a couple
150:25 - things. So this while loop is special, because
every time we go through the loop, this variable
150:32 - index tells us what iteration of the loop
we're on. So when I run this program, you'll
150:38 - see over here, like the first time we go through
the loop, index represents one right index
150:44 - has the value one, the second time we go through
the loop index has the value of 2/3, time
150:49 - has the value of three, etc. Right? So this
index variable is essentially telling us what
150:54 - iteration of the loop we're currently on.
Right. In other words, on every iteration
150:59 - of the loop, the value inside of this index
variable is changing. So it's in our case,
151:04 - it's incrementing, by one, but the point is,
is that we have this variable, this index
151:08 - variable, and it's essentially just keeping
track of how many times we've gone through
151:12 - the loop. Now, in c++, and in just about every
major programming language, this is a very,
151:18 - very powerful looping structure. In other
words, there's a lot of situations where keeping
151:24 - track of you know how many times we've gone
through the loop, or even just having a variable
151:29 - that's going to change every time we go through
the loop is very useful. And in fact, this
151:33 - is such a useful situation, that there's actually
a special loop just to do something like this.
151:39 - So there's a special type of loop whose sole
purpose is to provide us with a structure
151:44 - very similar to this, where we have this indexing
variable that is going to change every time
151:49 - we go through the loop. And in a lot of circumstances,
it's actually going to represent what iteration
151:53 - of the loop we're currently on. And that's
called a for loop. So I'm going to show you
151:56 - guys how we can build a for loop. And essentially
a for loop is just going to be exactly what
152:01 - we have up here, it's just going to be a lot
more compact and a lot easier for us to use.
152:06 - So it's great if we're live, we can just say
for making open and close parentheses and
152:11 - open and close curly bracket. So so far, it
looks exactly like the while loop. Now the
152:16 - one difference with the for loop is instead
of only having one thing up here in the parentheses.
152:22 - So in this while loop, we just have our looping
condition write, a lot of people call this
152:26 - like a loop guard. Down here in this for loop
parentheses, we're actually going to have
152:30 - three different things that we want to include.
So the first thing that we want to put inside
152:36 - of this for loop parentheses is a variable
declaration variable instantiation. So up
152:42 - here, you'll notice that I'm creating this
indexing variable called index, and I'm giving
152:47 - it a value of one. So I'm declaring the variable
and I'm assigning it an initial value, right,
152:52 - I'm initializing the variable. inside of this
for loop parentheses, we can do exactly that.
152:58 - So I could actually just copy this line, and
then down here, I can just paste this in here.
153:03 - And instead of calling it index, why don't
we just call it AI. So AI is gonna stand for
153:07 - index, we'll set it equal to one, then you'll
notice I have this semicolon here, after I
153:11 - put this semi colon, we can actually put another
line. So another thing that we have in this
153:17 - wild looping structure is our loop guard,
right, this loop condition, it's essentially
153:21 - telling us when we should loop so if this
condition up here is true, then we want to
153:26 - keep looping. So that's the next thing that
we want to put inside of this for loop parentheses.
153:30 - So we're putting this variable declaration
and initialization and then down here, we're
153:36 - also going to put the looping condition. So
this is going to tell the loop when it should
153:40 - stop and when it should go. Alright, so then
what I'm also going to put another semicolon
153:45 - here. So you'll notice I have a semicolon
here, after we create this variable. And I
153:49 - have another semicolon here, after we specify
the looping guard. The next thing I want to
153:55 - do is put in a line of code that's going to
get executed after each iteration of the loop.
154:02 - Up here in this while loop, you'll notice
that we have this line of code over here,
154:06 - index plus plus, this line of code is going
to get executed at the end of every single
154:11 - loop iteration. So the last thing that we're
going to do, when we go through this while
154:15 - loop is increment the index variable, right.
So that's essentially what we're going to
154:19 - put over here, we're going to put a line of
code, which is going to get executed after
154:23 - every iteration of this loop. And in our case,
we're just going to increment this variable
154:29 - i so I'm just going to say i plus plus, we're
adding one tie. Now again, I can put essentially,
154:35 - any line of code here that I want, I mean,
I can put like i minus minus, I could do,
154:39 - you know, basically whatever I want, but in
our case, we're just going to increment i
154:44 - just like we did up here with index. So now
inside of this for loop body inside of these
154:51 - open and close curly brackets, we can just
put whatever we want to do on each iteration
154:56 - of the loop. So that's going to be this line
up here. So I can actually just paste this
155:01 - guy in right here. And now we have a completed
for loop. So believe it or not, this loop
155:08 - down here is actually equivalent to this loop
up here, you'll notice this took 1234 lines
155:15 - of code, whereas this only takes two lines
of code. So like I said, this is such a common
155:20 - scenario where we want to have a variable
like index, which is, you know, essentially
155:25 - changing every time we go through the loop
and can allow us to keep track of things like
155:29 - the current loop iteration, such a common
situation that there's a special loop called
155:34 - a for loop for that. And the for loop, the
first thing we do is create the variable just
155:38 - like I did up there. So I'm initializing this
variable. The next thing we do is specify
155:42 - the looping guard the looping conditions,
that's what I did here. And then we specify
155:47 - a line of code that's going to get executed
after every iteration of the loop, which is
155:51 - going to be this i plus plus. And you'll notice
that these are all separated with semi colons.
155:56 - And you'll notice also that I don't need a
semicolon over here. So let's actually get
156:00 - rid of this while loop. And I'm going to go
ahead and show you guys what happens when
156:04 - we run the for loop. And actually, I need
to change these to eyes. So instead of this
156:08 - being index, I'm just gonna leave it as i
and this is also going to be I, so we have
156:12 - int is equal to one, we're going to keep looping
as long as i is less than or equal to five.
156:18 - And then at the end, we're just going to increment
it. So we're gonna say i plus plus. And every
156:22 - time through the loop, we are printing out,
I so let's go ahead and run this code. And
156:27 - you'll see we get the same exact output as
we did with the while loop. So it's just still
156:31 - just 12345. So what's cool about these four
loops is we can essentially, like keep track
156:38 - of a value every time we go through. And in
our case, we're basically just keeping track
156:42 - of how many times we've gone through the loop,
I want to show you guys how we can use these
156:46 - for loops to actually iterate through the
contents of an array. So let's say I created
156:51 - an array of integers, so we'll just call it
like nums. And I'm just going to give this
156:56 - an initial value. So why don't we just say
12573. So I have this array of integers. And
157:04 - it just has a bunch of numbers in it. And
if you recall, with integers, if we wanted
157:08 - to access a specific element inside of this
list, I could just say like nums, and then
157:13 - put the index in here. So if I said num zero,
this is going to give us access to this one,
157:18 - if I said nums, four, it's going to give us
access to 01234, it's going to give us access
157:24 - to this three, what I can actually do is I
can modify my for loop down here in order
157:30 - to actually loop through and print out all
the contents of this array. So array indexes
157:36 - start at zero, so I'm going to start this
I variable at zero. And what I'm going to
157:42 - do is I'm basically going to say i is less
than the number of elements inside of the
157:48 - array. So inside of this array, we have 12345
elements. So I'm going to say while i is less
157:55 - than five, we want to keep looping and then
I'm just going to say i plus plus. And down
158:00 - here, instead of printing out, I could actually
just print out nums ai. And what this is going
158:05 - to do is on the first iteration of the loop,
it's going to print out nums zero, on the
158:11 - second iteration of the loop, it's going to
print out nums one, on the third iteration
158:15 - of the loop, it's going to print out nums,
two, etc. And it's going to do that all the
158:20 - way up to number four, which as we saw is
going to be this three. So that's going to
158:25 - be the last element in the array. So we can
actually use this for loop to loop through
158:31 - all the elements in the nums array. So let's
go ahead and do that. And you'll see over
158:35 - here, we're printing out all the elements.
So we're printing out 12573. So that is a
158:42 - very common situation, we can use for loops
to iterate over the elements inside of an
158:47 - array. And it can be really useful. So play
around with these for loops, these are extremely
158:52 - useful. And one more time, I just want to
go over the structure. So the first thing
158:56 - we're doing over here is we're creating a
variable or we're initializing a variable,
159:01 - so I'm saying int is equal to zero. And then
I'm specifying my looping guard. So my loop
159:07 - condition, I'm saying we're gonna keep looping
as long as i is less than five. And then this
159:11 - is a line of code that will get run after
every iteration of the loop. So every time
159:16 - we go through this loop, we'll come up here,
run this line of code, and then we'll check
159:19 - the condition. Again, that is the basics of
a for loop. This is a very useful loop, I
159:24 - would say this is almost even more widely
used than a while loop and a lot of situations.
159:28 - So you definitely want to practice and play
around with these four loops. In this tutorial,
159:36 - I'm gonna show you guys how to build an exponent
function in c++. an exponent function is basically
159:42 - a function that will take a number to a specific
power. So I could write a function that I
159:47 - could pass in two numbers, like if I passed
in three and four. This would basically give
159:52 - me back three race to the fourth power. So
I'm gonna show you guys how we can build this
159:57 - and we'll actually get a chance to use four
loops. So we can use a for loop in order to
160:02 - build this function, that's going to be pretty
cool. So, up here, I'm going to create my
160:06 - exponent function. So we're going to have
this use a integer, so I'm just gonna say
160:12 - int. And why don't we just call this power
because it's taking a number to a specific
160:17 - power, and make an open and close parentheses
and open and close curly bracket. Now our
160:22 - power function is going to take two arguments.
So it's going to take a base number, and it's
160:27 - going to take a power number. And we're basically
going to take the base number to the power
160:32 - of the power number. So I'm just going to
say int, and then and power num. Now down
160:38 - here in our power function, we need to figure
out how we can do this. So I basically need
160:44 - to take bass num to power num. And we can
use something called a for loop in order to
160:50 - do that. So the first thing I want to do is
just create an a variable, so I'm just going
160:54 - to call it result. And I'm just going to set
this equal to one. And then down here, I'm
160:59 - basically just going to return results. So
essentially, our goal inside of this function
161:05 - is to get rid the result variable equal to
the value of the base num raised to the power
161:11 - number, right, that's kind of our goal. Throughout
this function, let's just say for the purposes
161:16 - of simplicity, and the purposes just for this
tutorial, that we're only going to be able
161:19 - to handle positive number exponents. So we're
just going to go ahead and assume that pounamu
161:24 - is going to be positive. And now let's just
make it a lot simpler and kind of help me
161:28 - to drive home the point a little bit better,
what we're going to need is a for loop, and
161:32 - I'm going to go ahead and write out this for
loop. Now up here in the parentheses, we need
161:37 - to specify three things, the first thing I
need to specify is a variable. So I'm just
161:41 - gonna say int i is equal to zero, I'll start
this out at zero. Now what I need to do is
161:47 - specify a looping a condition or a loop guard.
So I want to keep looping, as long as i is
161:54 - less than the power num. Essentially, what
I'm saying here is I want to go through this
161:59 - loop power num times. So as many times as
the power num specifies I want to go through
162:04 - this loop. So if power num is three, I want
to loop through three times, if panamas five,
162:09 - I want to loop through five times. That's
basically what this is saying. And then over
162:13 - here, we can just specify something that we
want to do after each iteration of the loop.
162:18 - So I'm just gonna say i plus plus. And basically
we'll just be incrementing, the value of i
162:23 - every time we go through the loop. Alright,
so down here inside of our for loop, we need
162:27 - to think about what we can do. So where are
we already know that we're going to be looping
162:31 - through here, power num times, right? So what
I think we should do is, we should multiply
162:38 - result times the base num, every time we go
through this loop. So what I'm going to say
162:43 - is result is equal to result times base num.
And the reason that this is going to work
162:51 - is because let's just kind of break this down,
the first time we go through this loop, right?
162:57 - result is going to be equal to one. So the
first time we go through this loop, we're
163:00 - multiplying base num by one, so we just get
based on the second time we go through the
163:05 - loop result is equal to based on right, in
other words, result has the value of base
163:11 - num. So the second time we go through, we're
essentially multiplying base num times based
163:15 - on based on squared, right, the third time
we go through this loop result has the value
163:20 - of base num squared. So for molting multiplying
base num squared times base num, that'll give
163:27 - us base num cubed. So that's kind of why this
is going to work, right. So we're looping
163:32 - through this for loop power num times. And
every time through the loop, we're multiplying
163:37 - result times the base num. And you can see
this for loop is very useful, because it allows
163:43 - us to only loop through the loop a specified
number of times, right? It makes it really
163:47 - easy for us to only loop through, you know,
power num times essentially. Alright, so this
163:53 - is the basic function. And this looks pretty
good to me. So again, we're only going to
163:57 - this is only going to be able to handle positive
number, exponent, so positive number power
164:02 - nums. Okay, so let's go ahead and call this.
So I'm just going to say, actually, why don't
164:07 - we print out the result. So I'm going to see
out power. And I'm going to pass in two numbers.
164:14 - So why don't we pass in two, and three, so
we're going to go ahead and do two cubed.
164:19 - So now let's run this function. And you'll
see we're getting eight. So two cubed is eight.
164:24 - Two times two is four, four times two is eight.
Let's try another one. Why don't we do four
164:29 - squared. So now we should get 16. And you
can see over there we get 16. So it looks
164:36 - like our little function is working. And basically
the point of this tutorial was just to kind
164:41 - of demonstrate to you another way that we
can use these for loops. So I'm using this
164:46 - for loop in order to essentially specify how
many times I want to loop through something.
164:50 - And four leaves are really useful for that
because we're keeping this count. So I is
164:55 - representing how many times we've gone through
the loop. So on the third iteration of the
164:59 - loop I can tell us that we've gone through
three times, essentially. And that's why this
165:04 - is useful. And so you can see, it's actually
really easy to do something like that it only
165:08 - takes up like two lines of code. So that's
the basics of building something like a power
165:14 - function. And actually, this is kind of useful,
because you can kind of see how a function
165:18 - like this might get put together. In this
tutorial, I want to talk to you guys about
165:26 - two separate subjects in c++, the first subject
we're going to talk about are going to be
165:30 - two dimensional arrays. And a two dimensional
array is a situation where we have an array,
165:35 - where every single element inside the array
is another array. So this is a pretty cool
165:42 - situation. And I want to talk to you guys
about one other thing which are nested for
165:46 - loops. And a nested for loop is a situation
where we have a for loop inside of another
165:52 - for loop. So this is gonna be kind of cool.
And you'll see we can actually use these two
165:56 - subjects together two dimensional arrays,
and nested for loops in order to build a kind
166:01 - of a cool program. So I'm gonna show you guys
the basics of doing that stuff. First thing
166:05 - I want to show you is a two dimensional array.
So I'm going to go ahead and create an array
166:09 - of numbers. And I'm just going to call it
number grid. And normally, when we create
166:14 - a regular array, we're just going to make
an open and close square bracket. But since
166:18 - we're making a two dimensional array, I want
to make another open close square bracket
166:22 - after this. Now remember, a two dimensional
array is a situation where we have an array,
166:28 - where every element inside of the array is
another array. And I'm going to show you guys
166:33 - how we can go ahead and set something like
this up. So I'm going to give this an initial
166:37 - value. So I'm just gonna initialize this.
And I'm basically just going to put a bunch
166:41 - of array elements inside of here. So the first
thing we're going to do is create the first
166:46 - element in the array. Now normally, if I was
creating an array, I could just kind of type
166:50 - out elements like this, right? You know, I
can kind of type them out delineate them with
166:54 - a comma, and then we have our array. But with
a two dimensional array, remember, each individual
167:00 - element is actually another array. So if I
want to create one element inside of this
167:06 - two dimensional array, I can basically go
like this, right, so I can make another sort
167:11 - of mini array inside of here. And I'm actually
just going to format this a little bit. And
167:16 - so now the first element in this number grid
array is going to be an array with elements
167:21 - one and two. So number grid, first element
is this array. And this array has two elements
167:29 - of its own. So I'm going to copy this, and
we're going to make another element. So I'm
167:33 - going to put a comma here, because remember,
we need a comma to delineate the different
167:37 - elements. And then down here, I'm just going
to paste. So now we're going to do three and
167:43 - four. So we have 1234. And why don't we do
one more, and we'll just do five, six. Alright,
167:53 - so essentially, what's happening here is we
have our overall array, right, so these two
167:58 - curly brackets represent the number grid array.
And inside of the number grid array, we have
168:02 - three elements. So this is the first element,
this is the second element. And this is the
168:07 - third element, all of which are arrays. And
each one of these arrays has one, two elements
168:15 - inside of them. So whenever we're creating
two dimensional arrays, we always want to
168:19 - specify the numbers over here. So inside of
this first open and closed square bracket,
168:25 - we want to tell c++, how many total elements
are in the number grid array. So in our case,
168:31 - we have three, because again, there's 123
elements. Then over here, we want to specify
168:38 - how many elements are inside of each array
element. So you'll notice we have 121212,
168:45 - etc. So there's going to be two elements in
each one of these arrays. And it's very important,
168:51 - especially when you're dealing with two dimensional
arrays, that you specify these numbers, because
168:56 - otherwise you can get really confused, you
know, and so by specifying Three, two, I know
169:01 - the basic layout, like I know that this array
has three rows, like you can call these rows,
169:07 - and then it has two columns. So these would
be like columns, essentially, we're building
169:11 - a matrix. Alright, so that is a two dimensional
array. And let's talk about how we can actually
169:16 - access some of these elements. So if I want
to access some of these elements, I'm actually
169:21 - just gonna go ahead and print some of these
out. So over here, I can just say number grid,
169:26 - and what I can do is I can make two open and
closed square brackets, so I can go just like
169:30 - just like this. And inside of these open and
closed square brackets, these first ones I
169:35 - want to specify the row. In other words, I
want to specify the element inside of number
169:40 - grid that I want to access. So this would
be the element at position zero, this would
169:45 - be the element at position one, and this would
be the element at position two. So let's say
169:49 - we want to access this element right here.
I can put zero here because it's inside of
169:54 - element zero. And then over here, I want to
put the index of that element inside of the
169:59 - array, so it's going to be an index position
01. So zero again is corresponding to this
170:06 - overall element, and one is corresponding
to this element inside of that array. Alright,
170:12 - so now when we print this out, we should get
a two. And you'll see over here, we get that
170:17 - two. Let's try one more, why don't we try
to get this five over here. So five is going
170:22 - to be an element 012. So we're going to put
a two over here, and it's going to be element
170:28 - zero, so we're just going to put a zero and
now we should get that five, which we do.
170:33 - Alright, so that kind of shows you a little
bit about how we can create a two dimensional
170:38 - array. And actually, this same concept can
apply to like n dimensional arrays. So you
170:44 - could have a three or four or five dimensional
array. And all these same concepts are going
170:48 - to apply. Obviously, the more dimensions you
add, the more complex it becomes. But you
170:53 - can get pretty complex with arrays, just by
using this technique. So that was the first
170:58 - thing I wanted to show you guys. And now I
want to introduce another topic, which is
171:02 - a nested for loop. And nested for loop is
a situation where we have a for loop inside
171:07 - of another for loop. And actually nested for
loops can be extremely useful, because we
171:13 - can use them to print out all of the elements
inside of this two dimensional array. So basically,
171:19 - we could iterate through all the elements
inside of here using a nested for loop, but
171:23 - I'm going to show you guys how that's going
to work. So down here, I want to create a
171:27 - basic for loop. So I'm just gonna say for,
and I'm just gonna say int i is equal to zero.
171:32 - Again, our goal here is to be able to loop
through all of the elements in this array.
171:37 - And, you know, as I sort of create this for
loop, just kind of stick with me, eventually,
171:42 - this is all gonna make sense. But what I want
to do is I want to keep looping, while i is
171:47 - less than three. And I'm using three here,
because I want this for loop to loop through
171:55 - all of these individual elements. So all of
the arrays inside of the number grid array,
172:00 - and over here, I'm just gonna say i plus plus.
So this for loop is responsible for iterating
172:06 - over all of these elements. So this first
element, the second element in this third
172:11 - element, but remember, each of these elements
is another array. So what I want to do is
172:17 - for each of these arrays, I want to iterate
over each of the elements inside of those
172:23 - arrays. So I can create another for loop to
do that. So I can say, int, and I'm just going
172:27 - to call this J. And a lot of times when we're
using nested for loops, people will name these
172:31 - ij, that's kind of a convention, I'm gonna
set this equal to zero, and I'm going to keep
172:36 - looping as long as j is less than two. And
remember, two is a how many elements are inside
172:43 - each of these arrays, right? So this loop
over here is responsible for iterating through
172:48 - all of these elements, and this one down here
is responsible for iterating through all of
172:53 - these elements. So I'm gonna say j less than
two, and then I'm just gonna say j plus plus.
172:58 - So now we have our basic structure setup.
For every iteration of this I loop, this j
173:04 - loop is going to fully iterate. So it's going
to go through all the way. And down here,
173:09 - I'm just going to see out. And I'm basically
just going to print out all these different
173:13 - elements. So I'm going to print out number
grid, i j, and you guys will see in a second,
173:19 - basically how this is going to work. And then
real quick down here, I'm just going to see
173:24 - out a new line. So I'm just going to say C
out and L and that'll print kind of a new
173:29 - line. So let's go ahead and run this. And
then I'll give you guys more of an explanation
173:33 - as far as what it's doing. So when I run this,
you'll notice that we're actually printing
173:38 - out all of these elements. So we're printing
out 123456. So I'm actually able to go through
173:47 - and iterate over every single element inside
of this two dimensional array. And basically
173:53 - what's happening is, every time we go through
this top loop up here, this AI loop, we're
173:58 - fully iterating through the J loop. So this
I loop is responsible for iterating over each
174:04 - individual element. So it's responsible for
iterating over this, this and then this, this
174:09 - j loop is responsible for iterating over each
of the elements inside of those elements,
174:14 - which are arrays. So the J loop is going to
loop over this and this. So the first time
174:18 - we go through this loop is going to be equal
to zero and j is going to be equal to zero.
174:23 - So we're going to print this out, then we're
going to go through this j loop again, I is
174:27 - still going to be equal to zero, but j is
going to be equal to one. So we're going to
174:31 - print this element out. And then AI is going
to be equal to one. So it's going to be one
174:35 - zero, we'll print this out and then it's going
to be one one. So we'll print this out. And
174:41 - that's essentially what's happening here.
So nested for loops and even like nested while
174:46 - loops, I mean, any sort of nested loop can
be very useful. And it can be useful for looping
174:50 - through like I said, complex structures like
that. And this tutorial on talk to you guys
174:59 - By using comments in c++, or comments are
a little special blocks of code, which aren't
175:06 - actually going to get executed or rendered
by c++. So a lot of times in your programs,
175:12 - you're going to want to, you know, basically
write things that are meant for human beings.
175:16 - So whenever we're writing programs, like whenever
we're writing code or instructions, those
175:21 - instructions are meant for the computer. So
I can tell the computer to print something
175:24 - out, or I can tell the computer to loop over
a block of code or something like that. But
175:29 - a lot of times, we're going to want to write
out messages just for human beings, so either
175:33 - for yourself or for someone else. And we can
do that using something called a comment.
175:38 - And I'm gonna show you guys what comments
are essentially, a comment is just a, you
175:41 - know, a little line of code or a block of
code that c++ is going to ignore. And therefore
175:47 - we can use it to write little messages for
ourselves. So in order to create a comment
175:51 - in c++, there's actually a couple of ways
we can do it. The first way is just to make
175:55 - two forward slashes. So when I make two forward
slashes, you'll notice that when I start typing,
176:00 - all of this text is actually colored different
than the text over here. That's because this
176:05 - is a comment. So any text that I put after
these two forward slashes is going to be considered
176:11 - a comment. And it's not actually going to
get rendered by c++. So even though I have
176:16 - a bunch of nonsense up here, I can still run
my program, and it's still going to be able
176:20 - to execute. So you'll see I can run the program.
And there's no errors, it's just printing
176:24 - out comments are fun. So this is a really
great way to kind of write a little note,
176:29 - a lot of people will use this to write notes
to themselves, or maybe write notes to other
176:34 - developers. You can also use this to like
describe a line of code. So I could like describe
176:38 - this line of code over here, I can say like,
print out text, right? Obviously, you know,
176:45 - you probably wouldn't need to describe this
line. But if you had like a complex function,
176:49 - or you know, complex loop or something like
that a comment can come in handy. You can
176:53 - also put these comments like after a line
of code, so I can just cut this out and paste
176:58 - it down here. And you'll see that everything
that comes after these two forward slashes
177:03 - is going to be considered a comment. But I
can still put code over here. And again, you
177:07 - can use this to like describe what the line
of code is doing or something like that. The
177:13 - one downside to this type of comment, though,
is that it only works on one single line.
177:17 - So if I come down here to the new line, all
of a sudden, this goes back to normal text.
177:21 - So this is no longer a comment. If you want
to have a long block of comments, though,
177:26 - you can use something called an opening and
closing tags. So if I make a forward slash,
177:30 - and an Asterix, then everything that comes
after this, even if it's on a different line
177:35 - is going to be considered a comments, you
can see all of this stuff is now a comment.
177:39 - But I can close this off by saying an Asterix
and another forward slash. But now everything
177:44 - that's in between these two tags is going
to be considered a comment. And these two
177:50 - types of comments are very common. And you
know, pretty much either one you use is going
177:54 - to be correct. And it's going to work out.
So that's basically how the you know the two
177:58 - types of comments and how you can use them.
Another way that comments are useful is for
178:02 - commenting out lines of code. So a lot of
times when you're working with your programs,
178:08 - maybe you want to try to run your program
without a certain line of code. And you might
178:12 - be running into a problem and you think a
certain line of code is the culprit? Well,
178:16 - one option would be to just remove the line
of code. So for example, let's say that this
178:21 - line of code was potentially like messing
up my program. And I wanted to see how the
178:26 - program would act without that line of code.
Well, I could just delete it, save the file,
178:32 - and then run the program. And now we're running
the program without that line of code. The
178:36 - problem with that, though, is I have to physically
delete the line of code, right? If I wanted,
178:41 - though, I could just put a comment in front
of it. And now this entire line is going to
178:45 - get ignored by c++. So it's essentially the
same as removing it, but we don't actually
178:51 - have to physically remove it from the file,
it's still gonna be there, we can still see
178:56 - it, we still know that it's there. It's just
not going to get executed. So that's another
179:00 - useful way that comments can come in handy.
So yeah, I think a lot of developers use comments,
179:06 - you definitely want to take advantage of them
in your programs when they're appropriate.
179:11 - In this tutorial, I want to talk to you guys
about pointers in c++. Our pointer is basically
179:20 - just a type of information that we can work
with in our programs. If you follow along
179:24 - with this course up to this point, we've been
working with all different types of data.
179:27 - So we were working with things like integers,
which are whole numbers, we've been working
179:31 - with like doubles, which are decimal numbers
when working with strings and chars which
179:35 - are like plain text. And this is where I want
to introduce you guys to another type of information
179:40 - we can deal with which are called pointers.
And pointers are basically just memory addresses.
179:45 - So we're going to have get into what that
means. What is a memory address, we're gonna
179:48 - talk about all that stuff. And I'll give you
a full introduction into pointers. So over
179:53 - here in my program, I have a few different
variables that I created. I have an integer
179:57 - called age and I gave it you know, a value
Double college GPA and a string called name.
180:02 - Now all of these are variables in my program,
right. So in other words, all of these are
180:07 - essentially just containers where I'm storing
specific information. For my purposes, when
180:13 - I'm writing this program, I'm storing the
value 19, inside of this age variable, right,
180:18 - I'm storing 2.7 inside of this GPA variable.
But let's kind of, you know, go underneath
180:24 - the hood a little bit and talk about what's
actually going on here. So in everyone's computer,
180:30 - you have something called your memory. And
another word for this would be Ram. So you
180:34 - might have heard people talk about ram stands
for random access memory, it's essentially
180:38 - just the active memory that your computer's
using when it's running programs. So whenever
180:43 - your computer runs a program, it's using Ram.
So it's storing information inside of this
180:49 - memory, let's just say our program, for example.
So in the case of this program, if I was to
180:54 - run this program, my computer would actually
be using Ram. In other words, my computer
180:59 - is going to use its memory in order to store
and keep track of information. In fact, it's
181:05 - going to be storing all of these values inside
of its memory. So when I create this variable
181:11 - age, and I give it a value, what's actually
happening is my program is going to take this
181:16 - value 19. And it's going to store it inside
the physical memory of my computer. When I
181:23 - create this double GPA, my computer is going
to take this number and it's going to store
181:28 - it physically inside of the memory in my computer.
Same goes for that string. And so for all
181:33 - of these different pieces of data that are
all actually getting stored inside of the
181:39 - memory of my computer, so when I write the
program, like for my purposes, I just know
181:43 - that 19 is stored inside the age variable.
But when we go underneath the hood 19 is actually
181:49 - stored in side of the computer's memory, so
it's physically stored in the memory. Now
181:54 - one of the cool things about the memory of
our computer is there's a bunch of these little
181:58 - containers, right, each one of these variables,
each one of these values is essentially just
182:02 - like inside of one of those containers, right?
That's kind of a broad strokes explanation,
182:07 - but you can basically think of it as like
this number 19 is stored inside of a container
182:13 - in memory, this value 2.7 is stored inside
of a container in memory. And each of the
182:19 - containers inside the memory of my computer
where these values are stored has an address.
182:24 - So it has an address, which uniquely identifies
it. So for example, this value 19 is stored
182:30 - inside the physical memory of my computer,
and it's stored at a specific memory address.
182:36 - This value 2.7 is stored in the memory of
my computer, and it's stored at a physical
182:40 - memory address. And so when my program wants
to access this value, it can access it by
182:46 - using that memory address. When I want to
access the variable, I can just access it
182:51 - using like age or GPA. But when my computer
wants to access it, my computer has to access
182:56 - it using the physical memory address. So that's
kind of like what's going on. And I want to
183:02 - show you guys how we can go ahead and access
that physical memory address. So I can actually
183:07 - print it out, I get to say C out. And if I
wanted, I could basically print out the memory
183:14 - address where each of these variables are
stored. In other words, I could print out
183:17 - the memory address where this value 19 is
stored, I can print out the memory address
183:22 - where this value 2.7 is stored. All I have
to do is just make an ampersand and then I
183:27 - can type in the name of a variable. So I could
type in like age for example. And what this
183:32 - is going to do is when I put this ampersand
here, it's essentially going to tell c++ that
183:37 - I want to print out the memory address where
the age variable is stored. In other words,
183:42 - I want to print out the memory address where
this value of 19 is stored. So when I run
183:46 - my program, you'll notice over here that I'm
getting this kind of crazy number. So 0x,
183:52 - six, a FPS zero. This is a hexadecimal number,
basically, it's just some long number. That
183:58 - will be very difficult for a human being to
remember. But the computer is able to remember
184:03 - it just fine. So if you were to go to this
physical memory address inside of my computer,
184:09 - you would find the value 19. I mean, that's
essentially what this is doing. Right? So
184:14 - that's basically like where that value 19
lives inside of our memory. Right. So if I
184:18 - wanted to access or change it or modify it,
my program can do it using that address. And
184:24 - that's essentially what we're talking about.
And in c++, we have a word for these addresses.
184:29 - So we have like a special word that we use
when we're talking about addresses. It's called
184:32 - a pointer. So generally, if I'm working in
c++, and I want to talk about a memory address,
184:38 - I'm going to talk about pointers. So I would
say that this is a pointer, right. So over
184:43 - here, we can say that I'm printing out a pointer.
And a pointer is just a type of information.
184:47 - It's just a memory address. So any memory
address that we're working with, or that we're
184:52 - using inside of our programs is going to be
considered a pointer. And the way that we
184:56 - can access the pointer of these variables
or in other words, the way We can access the
185:00 - memory addresses where these variables are
stored is by using this ampersand. So I have
185:06 - a little demonstration I want to show you
guys, this is just a block of code that I
185:10 - wrote out before the tutorial. And it's essentially
just printing out all of the memory addresses
185:15 - for all of these variables. So I'm going to
go ahead and run this. So you can see over
185:20 - here, I'm essentially just printing out all
the individual memory addresses for all of
185:25 - these variables. So we have age, and it's
located at this memory address, we have GPA
185:29 - at this memory address and name at this memory
address. So all of these memory addresses,
185:34 - if we were to go to them in our like physical
RAM and the physical memory of our computer,
185:39 - we would see those values. And again, we would
call these pointers. So this is a pointer,
185:44 - this is a pointer pointer is just a memory
address that is just a type of data, we're
185:49 - just giving it another name. So that's kind
of cool. And that kind of shows you guys how
185:54 - we can access like the memory addresses of
these different variables. But we can actually
185:59 - take this a step further. So I want to show
you guys another thing that I can do. So I
186:04 - can actually create a variable where I can
store the pointer. So over here, like I'm
186:09 - creating an integer variable, and inside of
it, I'm storing an integer right over here,
186:14 - I'm creating a double variable, and I'm storing
a double over here, I'm creating a string
186:18 - variable, I'm storing a string. And actually,
if we want to manage and keep track of the
186:24 - memory addresses or the pointers inside of
our programs, we can create a pointer variable.
186:28 - So I'm going to show you guys how we can do
that. And a pointer variable will basically
186:31 - be just a container where we can store a pointer,
right, it's a container where we can store
186:36 - a memory address. Generally, when we're working
with memory addresses in our programs, we're
186:41 - not just going to work with random addresses,
right. In other words, like I don't know,
186:46 - any, like meaningful memory addresses off
the top of my head. So generally, when we're
186:50 - using memory addresses, we're going to be
using the memory addresses of the different
186:54 - variables in our programs. So therefore, when
we create an actual pointer variable, in other
186:59 - words, when I create a container, what I'm
going to store a pointer, I'm generally going
187:04 - to create it based off of one of these variables.
So let's go ahead and create a pointer variable
187:10 - that will store the pointer. For this age
variable, I'm just going to say int. And whenever
187:16 - we create a pointer variable, you always want
to use this special character, which is going
187:19 - to be the Asterix, and then you want to type
in the name of the variable. So I'm just going
187:23 - to call this P age. And a lot of times when
you're creating pointer variables, you'll
187:28 - use this lowercase P. And then you'll type
out the name of the variable whose memory
187:33 - address you're storing. So I could say int
p age is equal to and now I can just say ampersand
187:40 - age. So remember when we use this ampersand,
and then we type out the name of the variable
187:44 - that gives us the pointer. In other words,
that gives us the memory address where the
187:47 - value is stored. So I'm essentially storing
this pointer inside of this variable over
187:54 - here called p age, I could do the same thing
down here for this double, I could just say
187:57 - double Asterix, and I'm just gonna say p GPA.
And I'm going to set this equal to ampersand
188:05 - GPA. So now this pgpa pointer variable is
storing inside of it a pointer. In other words,
188:13 - that storing inside of it a memory address,
and it just happens to be the memory address
188:16 - of this GPA variable. I can do the same thing
for this string down here. So I can say string
188:21 - p name. And actually don't forget to put the
Asterix and I can just set this equal to ampersand
188:29 - name. And now this pointer variable p name
is storing the pointer. In other words, it's
188:35 - storing the memory address have this name
variable. So now, I can actually work with
188:40 - these different pointer values using these
pointer variables. So if I was to come down
188:44 - here, I could say C out. And I could just
print out like p age. And now this is going
188:49 - to go ahead and print out the value that's
stored inside of that pointer variable, which
188:53 - is going to be a pointer, which should be
the memory address of Ph. So you can see down
188:59 - there, that's exactly what we get. So that's
kind of useful. And, you know, really, I think
189:03 - a lot of times people get a little intimidated
or maybe confused with pointers. But pointers
189:08 - are really simple. A pointer is just another
type of data that we can work with in c++.
189:13 - So you know, you can work with things like
integers, which are whole numbers, you can
189:16 - work with doubles, which are decimal numbers,
you could work with strings, which are just
189:21 - a bunch of characters, you could also work
with pointers, which are memory addresses,
189:25 - you know, that's all it is. It's just a different
type of data. And we when we create a pointer
189:30 - variable, it's just a container where we can
store a pointer. That's kind of all it is.
189:35 - Now I want to point out to you guys, whenever
I created this pointer variable, you'll notice
189:39 - that I use the data type of the variable that
I was pointing to. So this pointer variable
189:46 - is storing the memory address of an integer.
Therefore I said int over here, this pointer
189:51 - variable is storing the address of a double.
So I said double over here. Same thing down
189:55 - here. This is storing the memory does have
a string. So I said string over here. That's
190:00 - basically just what you have to do when we're
making pointer variables. This kind of brings
190:04 - me to another point I want to show you guys
one more thing we can do, which is called
190:07 - dereferencing, a pointer. And dereferencing.
a pointer basically means that we're going
190:13 - to grab the value that's inside of the memory
address. So remember, a pointer is a memory
190:18 - address. So if I have a pointer, that is a
the address of a physical, you know, slot
190:24 - or a physical location, in my computer's RAM,
and my computer's memory, that's all it is,
190:29 - it's just an address, right? Like you have
an address for your house. That's kind of
190:32 - what this is, it's an address. But instead
of for a house, it's for a memory location.
190:37 - And when we dereference a pointer, we're basically
telling c++ that instead of using the actual
190:43 - pointer, we now want to go to that physical
memory address, grab the value out of there
190:47 - and use it in our program. And the way that
I can do that is by dereferencing. it. So
190:52 - you'll notice, like when I print out p h,
right, this is a pointer. So when I, when
190:56 - I run this program, and I print it out, we
get a memory address. But if I was to dereference,
191:01 - this pointer, we would actually end up getting
the value that was stored at that memory address.
191:07 - So if I put an Asterix here, this is what's
called dereferencing, a pointer. So I could
191:12 - say Asterix p age, and now we'll be dereferencing,
the P age pointer. So now instead of getting
191:19 - that memory address, when I run this program,
we're going to get the value 19 because that
191:23 - is the value at the memory address that the
pointer was storing, and the pointer was representing.
191:29 - So I'm here in my program, and you'll see
down here we get 19. So when I get rid of
191:34 - this Asterix, we get the memory address, when
I put the Asterix here, we're dereferencing
191:39 - the pointer. So we just get 19. And that's
kind of how that works. So hopefully that
191:44 - makes sense. I'm gonna show you guys one more
thing. So dereferencing is really useful.
191:48 - And if I just said, for example, like ampersand
GPA, right? GPA is this variable up here,
191:56 - it's storing the value of 2.7. This is a pointer,
right, so this is going to give me the memory
192:01 - address. So over here, when I run this, we
get this memory address. But I could just
192:06 - dereference this, and hopefully this kind
of shows you guys what we're doing. So I can
192:09 - just put an Asterix here, and this is going
to dereference, this entire thing. So now
192:15 - this Asterix is dereferencing, this pointer,
and we should end up getting the actual value,
192:21 - which is 2.7. So you can see we get this value.
And you can I mean you can kind of chain these
192:26 - together. Not that you'd want to but I could
say like ampersand, and now we'll get the
192:32 - memory address again. So that's kind of how
that works. And, you know, pointers. And,
192:36 - you know, working with pointers, doing stuff
with pointers can be really useful in c++.
192:42 - This is also a very useful concept in another
language, which is called C. And C is actually
192:48 - the programming language that c++ is based
on. You use pointers a lot in that ceiling
192:54 - which but they're also important in c++. And
if you're going to be a c++ developer programmer,
192:59 - you need to have at least a baseline understanding
of what pointers are and how they work. So
193:03 - hopefully that gives you a little bit of an
idea of what they are. Remember, essentially,
193:07 - pointers are just types of information. It's
just another type of data that we can use
193:12 - in our programs, we can print them out, we
can use them, we can store them inside of
193:15 - variables, we can also dereference them, as
you saw earlier in the tutorial. So hopefully
193:21 - that helps. And hopefully now you can kind
of play around with pointers. In this tutorial,
193:30 - I'm gonna teach you guys about classes and
objects in c++ classes and objects are extremely
193:37 - useful. And this is a very important topic
in c++. So I'm gonna give you guys a full
193:42 - overview of what these are. And we'll kind
of get an idea of how to create classes and
193:47 - objects. So down here in my little program
just created a few different variables. And
193:52 - basically, what I'm doing here is I'm just
storing different pieces of information, right,
193:55 - I'm storing my name, inside of this name variable,
and we're storing it inside of a string. I'm
194:02 - storing pi, the first three digits of Pi in
this double variable. And then I'm storing
194:07 - my favorite letter G inside of this character
variable. So just using these variables, were
194:13 - able to store a bunch of different types of
information. And actually, if you know anything
194:18 - about c++ data types, you'll know that by
default, c++ allows us to store a bunch of
194:23 - different types of data. So we can store like
text. We can store numbers, we can store like
194:27 - whole numbers, decimal numbers, we can store
characters, we can store all of these different
194:32 - types of information. But here's the problem
though. And this is kind of a limitation to
194:38 - this is that there's a lot of types of information.
In other words, there's a lot of things there's
194:43 - a lot of real world entities that can't just
be represented using a string or a number
194:49 - or a character. Like there's a lot of things
that we just can't represent with a string
194:53 - or a number or a character like, like a phone
for example, like I can't really like represent
194:58 - a phone In my program using like a string
or using just a number, or think of something
195:04 - like a computer, or a keyboard, or an animal
or a person, like there's all these, like
195:09 - real world entities, that it can't necessarily
just be represented using the limited data
195:16 - types that we have, or we only have like,
a certain number of data types that we can
195:21 - use. And those data types really aren't enough
for us to necessarily model everything in
195:26 - the real world. So imagine I was creating
a program, for example, where I wanted to
195:32 - work with books, like maybe I was creating
a program for a library. And inside of that
195:36 - program, we needed to represent book like,
I wanted to be able to work with books and
195:41 - store books and use books inside of my program.
Well, there's no book data type, right? There's
195:47 - no, like, I can't just come over here and
say, like, book, you know, my book, whatever,
195:52 - like, there's no book data type for me to
use. So this is kind of a problem. And, you
195:57 - know, forget, forget about books for a second
imagine any other, you know, real world object,
196:02 - like a person or a location, or a musical
instrument, or really any type of like object
196:08 - in the real world that I'd want to represent
in my program. And so you know, really, the
196:12 - problem is we only have a limited data types,
right, there's only certain types of data
196:16 - we can represent. And this is where classes
and objects come in. So what we can do is
196:20 - we can actually create a class. And a class
is essentially a new data type. So when I
196:27 - create a class, I'm basically creating a new
data type in c++. And that's really why classes
196:33 - are useful, because we can kind of create
a blueprint for a new type of data in our
196:39 - program. So like I said, before, you know,
I can't just come down and down here and create
196:43 - like a book data type, right. But what I can
do is I can create a class that will specify
196:49 - what a book data type is. And then I can actually
use that book data type that I created inside
196:55 - of my program. So I'm going to show you guys
how we can do this, let's write a program
196:59 - that will allow us to store and work with
and represent books inside of our program.
197:04 - So we're essentially going to be creating
a book data type. In order for me to do this,
197:08 - I am just going to come up here. And I can
do this in the same file as this main function.
197:13 - And I'm going to create a class and a class
is essentially just a specification or a blueprint
197:20 - for a new data type in our program. So when
I create a class, I'm basically creating a
197:25 - new data type, I'm creating a new type of
data that we can work with, and we can use
197:30 - in our programs, it's pretty cool. So over
here to create a class, I'm just gonna say
197:34 - class, and then I'm going to give this a name.
And generally when we're naming classes, we
197:39 - are going to name them with capital letter.
So I'm just going to make call this book.
197:43 - So we're going to create a book class. So
this book class is going to act as a blueprint
197:48 - or a template for the book data type. Okay,
so this is just a specification, right? We're
197:55 - basically specifying what a book is, inside
of our program. So what I want to do down
198:00 - here is I want to actually define the book
data type. And we can do that by giving it
198:04 - attributes. So we can basically say that a
book is going to have like two or three or
198:10 - five different attributes that will describe
it. And we're going to use all those other
198:15 - data types like strings, integers, doubles,
characters, etc, in order to represent those
198:20 - attributes. So essentially, this book class
is going to be a collection of attributes,
198:26 - which are going to be things like numbers
and strings, etc. So I'm just going to say
198:29 - public, and I'm going to make a colon here.
And then we're going to come down here, and
198:34 - I'm actually going to end up this. So it's
a little bit easier to see down here, right
198:38 - below where I said public, I want to specify
some attributes. So essentially, I'm mapping
198:43 - out what a book is going to be and what it's
going to have. So let's think about what are
198:47 - the different attributes of a book? Well,
the first and probably the most obvious is
198:52 - going to be the title. And we can represent
the title as a string. So I can just say string
198:56 - title. And I'm just declaring these variables,
I'm not going to give them values. So what's
199:02 - another walnuts thing? Probably the author,
right. So another attribute of a book would
199:07 - be the book's author. And let's try to think
of one more. So I think another good one might
199:12 - be maybe let's do pages. So like this would
be the number of pages in the book. And I'm
199:17 - sure you can think of a lot more we could
think of like publishing date, like a publishing
199:21 - company, you know, you could think of, you
know, a version number. There's a lot of different
199:25 - attributes we could store for a book. But
let's keep it simple for now. Essentially,
199:29 - what I'm doing here, as I'm mapping out a
blueprint, so I'm saying this is the blueprint
199:33 - for the book, data type. And a book in our
program can have a title can have an author
199:39 - and can have a number of pages associated
to it. So this is a more of a complex data
199:44 - type. Really, it's a it's a class. So this
is basically all we need. So we're essentially
199:50 - just specifying what a book is. We're telling
c++ what a book is in our program. So now
199:55 - I'm going to come down here and I'm actually
going to create a book. So remember, this
199:59 - is just a blueprint. This is a template, it's
a specification. But this isn't like a physical
200:04 - book, if I want to actually, like have a physical
book that I'm going to work with, in my program,
200:09 - I need to create it down here. And we're actually
going to be creating something called an object.
200:15 - So here's a little terminology lesson, a class
is the specification, it's the blueprint,
200:20 - it's the template of a data type. So this
book class is the specification, it's the
200:25 - blueprint of a book inside of our program,
an object is an actual instance of that blueprint,
200:32 - or it's an actual instance of that class.
So an object is an actual book. So I'm going
200:38 - to create an object down here, we'll call
it a book object. And that means it's, it's
200:42 - an actual book that's going to have an actual
title, and actual author and an actual number
200:47 - of pages associated to it. And we can create,
you know, hundreds of these different objects,
200:52 - but just know that a class is the template,
it's the specification. And an object is an
200:58 - actual instance of that specification. So
it's an actual book with an actual title,
201:03 - author, and page. So let's go ahead and do
that. I'm just going to say book. And again,
201:08 - I'm basically just telling c++, what type
of data I want to create or what type of data
201:15 - I want to store. And then I'm going to give
this a name. So I'm just going to call it
201:18 - book one. So now we have this book inside
of our program, it's called book one. And
201:23 - what we want to do is start giving it some
attributes. So I want to say, book, one dot
201:29 - title. And we can actually give this a title.
So I can assign a value to book one for the
201:35 - title. So why don't we just say the title
is like Harry Potter. So this is going to
201:40 - be a Harry Potter book. And I can do the same
thing for author and four pages. So I can
201:45 - say book, one dot author, and I can just give
this an author. So it's JK Rowling. And we're
201:53 - going to give this a number of pages. So I
could say book, one dot pages, and this is
201:56 - going to be an integer. So let's say it has
like 500 pages. And so now I'm actually able
202:02 - to represent, and I'm able to work with a
book inside of my program. So again, this
202:08 - up here is a class. It's a template for what
a book is, this down here is an object, it's
202:14 - a physical book in our program that has actual
attributes. So it has this is the Harry Potter
202:20 - book, with the JK Rowling author and 500 pages.
So I'll show you guys what we can do, we can
202:25 - actually print out this information. So I
could say C out. And why don't we print out
202:30 - book one dot title. And so now I'm able to
store all of this information inside of this
202:36 - book, one object. So I'm basically able to
represent a book in my program, when I run
202:40 - this program, now, you'll see we're printing
out the title of the book, which is Harry
202:43 - Potter, I can do the same thing for like pages.
So we could print out the number of pages
202:49 - in book one, which is going to be 500. So
this is a really cool way for us to actually
202:55 - model a real world entity like a book inside
of our program. So remember, before, we didn't
203:01 - have a book data type, right, I had nothing
I could use to represent a book in my program.
203:06 - Now all of a sudden, I have one. So I can
actually represent a physical book in my program.
203:12 - And we can make as many of these as we wanted.
So I'm actually just going to copy this. And
203:16 - let's make another book. So let's say in addition
to this Harry Potter book, maybe we want to
203:20 - make another one. And I'm just going to call
this book two. So I'm going to change all
203:25 - of these. So now all of these are sets of
Book Two, and I'm going to change all these
203:28 - attributes. Instead of it being a Harry Potter
book. Why don't we make it a Lord of the Rings
203:34 - book, and the author is going to be token.
And let's say that this is like 700 pages.
203:41 - So now I have two books in my program, I have
book one. And I have Book Two, book one has
203:47 - all of these attributes associated to it,
Book Two, has all of these attributes associated
203:52 - to it. But both of these books are using this
same book template, right? They're using the
203:58 - same book class, this is just a specification
for what a book is. And down here, I was able
204:04 - to create individual instances of that specification.
In other words, I was able to create individual
204:09 - book objects. So I could also print out stuff
about book two. So now I could say like Book
204:15 - Two dot author, and this is going to print
out book twos author. So now it's token. So
204:24 - just like before, when we have like integers,
and you know, strings, and stuff like that.
204:30 - Now, in addition to those data types, we also
have a book. So I can represent a book, I
204:35 - can use a book, I can store it, I can, you
know, modify all its values and stuff like
204:40 - that. And, you know, down here, basically,
we're just defining the book and then we're
204:44 - giving it value. So I can say like, book one
title, and I can also change these so if I
204:49 - said book to title down here, I could change
it so I could change it to like Hunger Games
204:54 - or something. And now, Book Two title is going
to be updated. So these work just like normal
205:01 - variables would work. And you can see now
we're getting Hunger Games. So that's pretty
205:05 - cool. And honestly, this is just a, an introduction
into classes and objects. There's a lot more
205:12 - to learn about, there's a lot more to talk
about. But hopefully this makes sense, what
205:16 - you want to do is just play around with modeling
real world object. So in here, I modeled a
205:20 - book. So I created a book data type, but you
could create like a phone data type. If you
205:25 - create a like a keyboard data type, you can
create anything, you know, essentially, you're
205:30 - just taking a real world entity, breaking
it up into individual attributes like title,
205:35 - author, and pages, and then you can represent
it in your program. In this tutorial, I'm
205:43 - going to teach you guys how to use constructors
inside of c++ classes. Now, a constructor
205:50 - is a basically a special function that is
going to get called whenever we create a an
205:56 - object of a class. So let me show you guys,
basically how this works. So down here, or
206:01 - actually up here, I have this class, it's
called book. And if you follow along with
206:04 - the course, we created this class in the last
tutorial, and basically this book class is
206:09 - just sort of a blueprint or a specification
for what a book is inside of our program.
206:14 - So you know, a book has a title, has an author
and has pages awesome. So then down here,
206:19 - we actually created some book objects. And
an object is just an instance of a class.
206:25 - So we have book one, and book one has a title.
It's a Harry Potter book, and an author in
206:30 - pages, and all that stuff. So I'm going to
show you guys where constructors come into
206:35 - play. So a constructor, like I said, it's
essentially just a function that's going to
206:40 - get called whenever we create one of these
book objects. So up here, I'm actually going
206:45 - to go ahead and create a constructor. And
the way we can create we can create a constructor
206:49 - is just by essentially creating a function
for this program. So I'm just gonna say book.
206:56 - And I'm gonna make an open and close parentheses
and an open and close curly bracket. And essentially,
207:00 - what we have here is a constructor. So this
is a special function now, which is going
207:05 - to get called whenever we create a book object.
So let me prove that to you guys, I'm just
207:11 - going to print something out. And I'll just
say, creating objects. And then we also want
207:17 - to print a new line. So down here, I'm creating
two objects, I'm creating book one, and I'm
207:24 - creating Book Two, whenever I create a new
object, you guys are going to see that this
207:30 - function up here is going to get called. So
let me run this program. And you'll see over
207:35 - here, it says, creating object twice. So it
says creating objects. And that was when we
207:42 - made this line of code. And then down here,
it also says creating object. And that was
207:45 - when we created this second object. So we
created two objects. And this method, or this
207:51 - function got called twice. Hopefully that
makes sense. Now another cool thing about
207:56 - this book function is that it can accept parameters.
So I can come over here and we can say that
208:01 - this is going to accept a parameter like name.
And over here, I can just print out like,
208:07 - whatever the user passed it. And so now down
here, when we create these objects, we can
208:12 - pass values in so I could pass in like Harry
Potter, that's the name of this book. And
208:19 - we could pass in like, Lord of the Rings.
That's the name of this book, right? So now
208:25 - when I run my program, it's going to actually
be able to use those parameters. So instead
208:30 - of printing out like, creating object, it's
printing out the value that we passed into
208:36 - the constructor. Pretty cool, right? And constructors
are awesome, because we can use them when
208:42 - we create objects. So let me point something
out to you guys. And I'm actually just going
208:46 - to get rid of this stuff up here. So only
point something out when we wanted to create
208:53 - these objects, right. And when I wanted to
give them a bunch of initial information,
208:57 - so when I created book one, and Book Two,
I had to manually specify what the title was
209:03 - going to be, what the author was going to
be and what the pages were going to be. And
209:08 - it kind of took up a lot of time, right, it
takes a lot of time to have to manually type
209:12 - out book one dot title, book, one dot author.
And I have to do that for every single object
209:16 - that I create. Well, that gets really, really
tedious. And imagine if instead of just creating
209:20 - two objects, I wanted to create like 100 or
1000 objects like that would take up so many
209:25 - lines of code, I mean, just to create one
of these objects, took up four lines of code.
209:30 - We can actually use these constructors in
order to initialize our objects with information.
209:37 - So like when I create this book, one instead
of having to manually specify the title, the
209:41 - author and the pages. Instead, I could just
pass those values into the constructor, and
209:48 - the constructor could initialize the values
for us. So let me show you guys how we can
209:52 - do that up here. In our constructor, I'm going
to specify that this constructor is going
209:57 - to take three values. So this book constructor
is going to take a string title. And actually,
210:04 - we're just going to call this a title, it's
going to take a string, and we're going to
210:08 - call it a author. And it's going to take an
integer, we're just going to call it a pages.
210:14 - And I'm putting this a here, you don't have
to do that, I'm just doing it. So it's kind
210:18 - of easy for us to see what's going on, a is
just going to stand for arguments. So this
210:21 - will be like the title, that's an argument.
Alright, so down here, what I can do is I
210:26 - can actually assign the values of title, author
and pages to the values that we passed in.
210:33 - So down here, we're assigning the values of
title, author and pages two, all of this information.
210:38 - But instead of having to do it down here,
I could just do that up here in the constructor.
210:43 - So I could say that the title is going to
be equal to a title. So in other words, the
210:50 - title of the object, the title that we want
to store for this specific book, is going
210:55 - to be equal to the title that gets passed
in, I can do the same thing for the author.
210:59 - So I could say, author is going to be equal
to A author, and pages is going to be equal
211:06 - to A pages. And again, you don't have to name
these a title, a author a pages, you can name
211:12 - whatever you want. I'm just kind of doing
this. So it's more obvious as far as what's
211:17 - going on. So down here, what I can do now
whenever I create this object, I need to pass
211:24 - it a title and author and a number of pages.
So if I tried to run my program, right, now,
211:30 - you'll see we're getting an error, we're basically
getting an error, because we didn't pass in
211:35 - these values. So what I can do is I can actually
take the title, I can take the author, and
211:43 - I can take the number of pages, so 500, and
I can pass them into this constructor, then
211:49 - I can just get rid of all this code, because
we don't need it anymore. And I'll do the
211:52 - same thing for the Lord of the Rings book.
So I can, and we can pass in the number of
211:56 - pages. And so now we can get rid of all this
stuff. So we went from having eight lines
212:01 - of code to create two objects. So now we just
have two lines of code. And now when I run
212:05 - my program, we should be able to essentially
just give this object a bunch of initial information.
212:12 - So let's go ahead and print out this stuff.
So you can kind of see what happened. So I'm
212:17 - just going to see out while we see our book,
one dot title, and let's see what we get.
212:23 - So we should get Harry Potter, which we do.
So we did exactly what we were doing before,
212:29 - except we're able to do it a lot easier and
a lot cleaner now, by using this constructor.
212:35 - So this was a very, very powerful tool for
us to use. Now, I also do want to point out,
212:40 - we can still modify these. So I could still
say like book one title. And I could change
212:45 - the title. So I can change the title to whatever
I want. And it'll be updated. really all we're
212:50 - doing with this constructor here is we're
just making it a lot easier. So we're essentially
212:55 - just making it easier for us to initialize
a object with different values. So that's
213:01 - sort of the basics of using constructors.
And I'll show you guys one more thing we can
213:04 - do, you can actually create multiple constructors.
So I can create this constructor that will
213:10 - essentially just allow us to take in a title
and author and a number of pages. But let's
213:16 - say that for some books, we wouldn't want
to include one of those attributes, I can
213:21 - make another constructor over here. And this
constructor, for example, won't take in any
213:27 - parameters. And I can just give these values
like initial value. So I can basically just
213:32 - say like title is equal to no title. Author
is equal to no author. And we could also say
213:42 - like pages is equal to zero. So this is basically
just giving this object like some initial
213:47 - information if we don't pass anything it and
so now, what I could do is I can come down
213:52 - here and I can create another book. So I can
say, like book, and we'll call this book three.
213:58 - And I now I don't have to pass in this information.
So if I want, I can just do that. And we can
214:03 - print out like Book Three dot title, and it's
going to be that title that we gave it and
214:08 - this needs to be capital whoops. So now you
see we get no title. So a lot of times, people
214:15 - will create multiple constructors, you're
basically giving the user multiple ways that
214:20 - they can create your objects. But I'd say
the most common scenario is going to be this
214:27 - where you pass in all of the attributes, and
then they basically just get assigned. So
214:32 - that's the basics of constructors. Hopefully
that makes sense. constructors are very useful,
214:36 - so you're definitely going to want to use
them in your c++ classes. In this tutorial,
214:44 - I'm going to talk to you guys about object
functions in c++. You'll also hear people
214:49 - refer to these sometimes as like instance
functions. And essentially what this is, is
214:54 - it's a function that we can put inside of
one of our classes and then And the different
215:00 - objects of that class can use that function
in order to either you know, find out information
215:05 - about themselves, or modify information about
themselves. So I'm just gonna give you guys
215:09 - a sort of introduction into how to do this.
Over here, you'll see that I actually set
215:14 - up a class. And this class is called student.
And this is essentially just a template for
215:20 - like what a student is going to be in our
program. And I've said down here that a student
215:25 - is going to have a name, a student is going
to have a major, and a student is also going
215:29 - to have a GPA. So that information is sort
of like what defines a student in our program.
215:36 - And then down here, I created a constructor,
which basically just allows whoever's creating
215:41 - these objects owner to pass in some initial
information. And we're passing in the name
215:45 - of major and then also the GPA. So I'm essentially
just using this constructor as I normally
215:51 - would any other constructor. So this is our
student class. And then down here, in my main
215:55 - method, you'll see that I actually have a
couple students. So I created a student called
215:59 - student one, his name is Jim, he's a business
major, and his GPA is 2.4. And then I have
216:06 - another student student two, her name is Pam.
She's an art major, and she has a GPA of 3.6.
216:13 - So these are now two students that I'm working
with. And I'm sort of representing inside
216:18 - of my programs. That's awesome. So let me
show you guys, how we can use these different
216:23 - object functions. Let's say that we wanted
a way to figure out whether or not one of
216:29 - these students was on the honor roll. Right.
So let's say that at the school that these
216:33 - students attend, there's an honor roll, right,
and let's say that the rules are being on
216:37 - the honor roll as you need to have a GPA of
3.5 or above. So if you have a GPA of 3.5
216:44 - or greater, that means that you're on the
honor roll. And let's say that we wanted to
216:49 - have an easy way to figure out whether or
not a specific student was on the honor roll.
216:54 - Well, what I could do is I could actually
create a function up here in my student class,
216:59 - which each of the objects can use to tell
if they were on the honor roll or not. So
217:03 - what I'm going to do is I'm going to go down
here below the constructor, and I can basically
217:08 - just create a function like I normally would,
so we can give this a return type. And I'm
217:13 - going to give this a Boolean return type.
And I'm going to name this function has honors,
217:18 - and this function is basically going to return
a true or a false value, it will return true
217:24 - if the student has honors right? No return
true, if the student has a GPA of 3.5 or greater.
217:29 - If they don't, it's going to return false.
So over here, we're not going to have to take
217:33 - in any information, we don't need any parameters,
I'm going to make an open and closed curly
217:38 - bracket. Now down here inside of this function,
we need to figure out if the object has honors.
217:44 - So I can just use an if statement, I'm just
gonna say if, and I'm basically just gonna
217:47 - say if GPA is greater than 3.5. Or actually,
if GPA is greater than or equal to 3.5, then
217:55 - we're gonna come down here, and we can just
return true, because if this code gets executed,
218:01 - that means that they have a GPA of 3.5 or
greater. And then otherwise, if that's not
218:05 - the case, we can just return false. So that's
essentially all this little function is going
218:11 - to do. It's very simple if they have a GPA
3.5 or greater, turn true, otherwise, return
218:15 - false. Now, what's cool about this function
is each of the objects that I create can call
218:22 - this function, and depending on their specific
GPA, it's going to return a different answer.
218:27 - So for example, let's go ahead and call this
on our first student gym. So I can just say,
218:33 - C out I just want to print out the answer.
And I can just say, student, one dot has honors.
218:41 - So now if I want to figure out whether or
not Jim has honors, I can just call this function,
218:46 - I can say student one dot has honors. And
now this is going to print out whether or
218:51 - not Jim has honors. So you'll see over here,
we're printing out a zero. And just a tidbit.
218:57 - Whenever you print out Boolean values, if
it's a false, it's going to get printed out
219:01 - as a zero. If it's a true, it's going to get
printed out as a one. So the fact that we're
219:05 - seeing a zero here means that student one
doesn't have honors. And we can do the same
219:11 - thing for Pam. So we can do the same thing
with our other students. I could say student
219:15 - to dot has honors. And now this should be
true because Pam has a GPA of 3.6. So Pam
219:24 - is going to have honors. What's cool about
doing this is that this function is going
219:29 - to be using different information depending
on which object is calling it. So when the
219:33 - gym object calls it, the GPA is Jim's GPA.
When the PAM object calls it, the GPA is Pam's
219:41 - GPA. So we can define a general function over
here in our class. And depending on the object
219:48 - that calls it, it's going to be giving or
doing different things. So the GPA is going
219:52 - to be different, depending on if Jim's calling
it or if Pam is calling it and that's kind
219:57 - of why these are cool so you can make awesome
These little functions. And generally people
220:01 - will make these to get information about the
object. So for example, figure out whether
220:06 - or not they have honors, or modify values.
And in future tutorials, we're going to look
220:11 - at functions which are going to be modifying
the values in our classes. But hopefully that
220:16 - kind of gives you an idea of what you can
do with these. So you know, I did a lot of
220:21 - cases, you're going to want to have different
functions inside of your classes that are
220:25 - going to do stuff. Now I do want to just point
out one more reason why these are cool. So
220:30 - let's say that I have this program written.
And, you know, I'm using all these different
220:35 - students. And maybe I have a program that
like, calculates who's on the honor roll or
220:38 - something. Well, let's say that one day, the
Dean of the School comes to me and he's like,
220:43 - Hey, Mike, we're going to change the qualification
for honors. So now, instead of everybody with
220:49 - a 3.5, and greater is going to have honors,
we're just going to say everybody with a 2.0
220:53 - and greater is going to have honors, in order
for me to make that change in my program.
220:57 - In other words, in order for me to update
that information, all I have to do is go over
221:02 - here and change this to 2.0. And now all of
the code in my program is still going to work.
221:09 - And these has honors are still going to work.
But now the bar for having honors is going
221:13 - to be lowered. So I can say student one has
honors. And now this is going to be true,
221:19 - because we changed the qualification. So now
we get a one. And that's kind of why these
221:23 - are powerful, you can kind of adjust different
information and you know, control different
221:29 - things about the overall class and about every
instance of the class using these functions.
221:35 - So hopefully that is clear. Hopefully, you
have an idea now of what you can do with these
221:40 - different objects functions. In this tutorial,
I'm going to talk to you guys about getters
221:48 - and setters in c++ classes. Now, getters and
setters are extremely useful. And basically,
221:55 - they allow you to control the access to the
different attributes and different elements
222:00 - inside of your c++ classes. So I'm going to
show you guys the basics of using c++. In
222:07 - order to do that, we're going to use a little
example. So up here, I have a class that I
222:12 - created, it's called movie. And this is basically
just like allowing us to represent a movie
222:16 - inside of our program. So I have a few different
attributes, the movie is going to have a title,
222:21 - it's going to have a director, it's also going
to have a rating. So those are three different
222:25 - attributes of a movie, right, we can basically
say like, this is our movie, this is what
222:29 - it's going to be, that's what it's going to
have. And down here we have a constructor.
222:32 - So I'm just passing in the title, the director,
and then also the rating. And then over here,
222:37 - we're assigning those values to the values
inside of the object. This is all pretty standard
222:42 - stuff. And if you've been following along
with the course up to this point, this should
222:46 - kind of make sense. You know what I'm doing
over here, I'm essentially just defining a
222:49 - class, movie data type. And down here, I actually
created a movie. So I created a movie, and
222:55 - it's called Avengers and the title is The
Avengers director is Joss Whedon. And the
223:01 - rating is pG 13. So um, I'm creating an actual
movie. And you'll see down here, I can print
223:06 - out the rating. So why don't we run our program,
we'll just sort of get on the same level.
223:11 - So over here, I have pG 13. So it's printing
out the rating, everything works, everything
223:15 - looks good. Now, here's the thing, a lot of
times in c++, when we're creating something
223:21 - like a class up here, like this movie, we're
going to want to be able to control what information
223:28 - can be stored for a particular movie. And
let me give you an example. So down here,
223:33 - I have this rating as pG 13. Right. And generally
for movies, there's, you know, a certain number
223:41 - of ratings that you can have, so it'd be like
g PG, PG, 13, R, and then nr, right, so not
223:49 - rated. So just for our purposes, let's say
that these are all the ratings that you can
223:53 - give to move PG, PG, PG, 13, Rn, nr, right?
I'm sure there's some more that we could think
223:58 - of. But let's just say that those are the
ratings that we're going to say are valid
224:02 - for a movie, those are the ratings that are
going to be allowed for a particular movie.
224:07 - Well, over here, I'm inserting pG 13. But
let's say I wanted to instead enter in something
224:14 - else. There's nothing stopping me from just
entering in nonsense like dog, but there's
224:19 - nothing that's stopping me from just typing
in some nonsense rating there. And then running
224:24 - the program and being able to store it inside
of my movie, right I In other words, I can
224:28 - set the rating equal to dog, even though that's
not technically like one of the official ratings
224:34 - that we can have. And there's a lot of circumstances
where there's going to be things like this,
224:38 - for example, you know, valid ratings that
you're going to want to enforce. In other
224:43 - words, like when you're writing this program,
you might not want an object, you might not
224:47 - want a movie object to be created. That's
not using a valid rating. Like you wouldn't
224:52 - want this to be able to happen down here.
You wouldn't want them to be able to put a
224:56 - rating in as dogs. So I'm gonna show you guys
how we can And essentially just enforce that
225:02 - how we could make it so that the user can
only create an object a movie object with
225:07 - a valid rating. And to do that, we can use
something called getters and setters. Now,
225:13 - the first thing that I'm going to do, after
I turn that back, is I'm going to head up
225:16 - here into my class. So up here in my movie
class, and I want to show you guys, one thing
225:21 - you'll see up here, I have this keyword public.
And essentially, when I say public, and I
225:26 - put all this stuff underneath public, what
that means is that all of this stuff is public.
225:33 - And basically, when something's public, it
means that any other program any other code
225:37 - can access it. So essentially, any code outside
of this class is able to access the title
225:44 - of the movie, the director of the rating and
the constructor. So down here, I'm able to
225:49 - print out Avengers dot rating, because rating
is public, right? So I can print this out,
225:56 - because it's underneath this little public
keyword. But there's another keyword that
226:00 - we can use in c++, which is called private.
And I can do the same thing as I did with
226:06 - public, I can just say private, and any attributes,
any variables, any functions, anything that
226:11 - I put underneath this private keyword, is
actually going to be private. So for example,
226:16 - if I was to take this string rating, and I
was to put this under here, under this private,
226:23 - what this means is now only code inside of
this movie class is able to access the rating
226:30 - attribute, only code that's inside the movie
can access the rating. So if I was to come
226:36 - down here now and try to print out Avengers
dot rating, I'm not going to be able to do
226:41 - that anymore. And you're going to see that
we're going to get an error. So you can see
226:44 - this highlights in red basically telling us
that you can't print out Avengers dot rating,
226:51 - because it's private, so I no longer have
access to the rating inside of my main function.
226:57 - Now one thing I will point out is I have access
to the rating here in the constructor. That's
227:02 - because the rating variable, the rating attribute
is in the same class as this constructor,
227:08 - so it's able to access it. But this main function
isn't able to access it in any code inside
227:14 - the main function can't, because it's not
inside of that class. So that's basically
227:19 - the difference between public and private.
And we can leverage public and private in
227:23 - order to control what ratings are able to
get set for this movie. So let me show you
227:28 - guys how we can do this, the first thing I
want to do is, underneath this public block,
227:31 - I'm going to create a public function, and
I'm going to call it set rating. So actually,
227:39 - this is going to be void. And I'm just going
to call it set rating. And this is going to
227:43 - take as a parameter, it's going to take one
value, it's going to be a string, a rating.
227:49 - So this is going to take a rating as a parameter
down here, inside of this set rating function,
227:56 - I'm basically going to say rating is equal
to A rating. So now whenever I want to give
228:02 - a value to the rating, I'm going to make it
so we have to go through this set rating function.
228:09 - So over here, instead of saying rating is
equal to A rating, on set, I'm just going
228:14 - to say, set rating, and I'm going to pass
in a rating. And so now whenever we set the
228:21 - rating, it's going to go through this set
rating function. And for example, if I wanted
228:26 - to modify the rating down here, so if I wanted
to say like Avengers dot rating is equal to
228:32 - dog, I'm not going to be able to do this again,
because rating is private, so I can't access
228:37 - it over here. But if I want to modify the
rating, I can just go through this set rating
228:42 - function, because it's public. So over here,
if I wanted to modify the rating, instead
228:47 - of saying Avengers dot rating, I could say
Avengers dot set rating, and I can pass into
228:52 - this as a parameter, dog. Alright, so now
anytime we're setting the rating, either up
229:00 - here in the constructor, or down here in the
actual program, we have to go through this
229:05 - set rating function. And that's going to be
really useful. So essentially, what we can
229:11 - do now is we can set up some rules. So I can
set up some rules inside of this set rating
229:17 - function for what ratings are going to be
valid. So I'm going to go ahead and do that.
229:22 - Essentially, what I'll do is I'll create an
if statement. And if the rating that gets
229:26 - passed in is one of the valid ratings like
g PG, PG, 13, r nr, then we'll let them set
229:33 - it. Otherwise, we'll be able to essentially
like throw an error or we'll be able to say
229:37 - like, Hey, this is an invalid rating. So down
here, I'm just going to create an if statement.
229:42 - And I'm just gonna say if. And I'm basically
just going to check to see if the rating is
229:47 - one of the valid rating so we can check to
see if a rating is equal to G or a rating
229:58 - is equal to P And I can keep doing this for
each of the valid ratings. So I'll keep doing
230:05 - this over here. And I'm just gonna say, or
a rating is equal to pG 13. Or a rating is
230:17 - equal to R. And then there's one more, which
is going to be or a rating is equal to nr.
230:26 - So basically, what I'm doing is I'm creating
this long winded if statement. And it's checking
230:31 - all of these conditions. So it's checking
to see if a rating is G, or if it's equal
230:36 - to PG, or if it's equal to pG 13, or R or
Finally, nr. Now, if it's equal to one of
230:43 - those, right, if it's equal to one of those
valid ratings, then we can just go ahead and
230:48 - set it normally. So I could say like rating
is equal to A rating, right? Because they
230:54 - entered in a valid rating, so it's going to
be fine. But here's the thing, if they didn't
230:59 - enter in a valid rating, that means that we're
not going to be able to set it as the rating
231:04 - that they entered, so I can say else. And
otherwise, why don't we just go ahead and
231:08 - set rating equal to an R. So we'll say that
if they entered in an invalid rating, like
231:14 - they tried to set an invalid rating, for the
rating for the movie, we're just going to
231:18 - go ahead and set it to nr because they didn't
enter in a valid rating. So it's just going
231:22 - to be not rated. So here's the thing. Now
whenever we want to set the rating, we have
231:28 - to go through this set rating function. So
for example, I can come over here and I can
231:33 - say Avengers, set rating and dog. And then
if I printed out the rating, it's actually
231:38 - gonna say nr, because they entered in an invalid
rating, it's just going to default to nr.
231:44 - But here's the other problem is when I can't
actually print out the rating. So I can't
231:49 - Access Avengers dot rating, because it's private,
remember, so what we can do is we can create
231:54 - another function up here, and this one is
going to be a string, so it's going to return
231:59 - a string. And I'm just going to call it get
rating. And it's not going to take any parameters,
232:03 - it's just going to return rating, so it'll
just return the rating. And so now if I wanted
232:12 - to print this out, I could say Avengers dot
get rating, and I'll be able to print it out.
232:16 - So let's go ahead and see what happens. So
down here, I set Avengers rating equal to
232:22 - dog. That's an invalid rating. So now when
I get the rating, and I print it out, we should
232:27 - just print out nr. And actually looks like
I have a typo here. So I forgot to put a double
232:31 - equals in there. Let me see if I did that
over here, too. Nope. Okay, so we should be
232:35 - able to run this now. Yeah, so down here,
you'll see that we're printing out an R. So
232:42 - I tried to set the rating u equal to dog,
that was an invalid rating. So when I went
232:47 - to get it, it's just giving me an R. And that's
going to work for anything. So for example,
232:52 - over here, when I just first created this,
I set pG 13. That's a valid rating, right,
232:58 - that is one of the official ratings that we
can use. So when I run this, it's going to
233:02 - have that it'll have a rating of pG 13. But
if I tried to set this to like pG 15, or something,
233:08 - that's not a valid rating, right. So when
I run the program, it's going to basically
233:13 - say that it's not rated because we didn't
enter in a valid rating. And you know, you
233:17 - can essentially do whatever you wanted there.
The point that I'm trying to make though,
233:21 - is that there's going to be certain times
where you want to control what values are,
233:25 - you know how the user can interact with the
attributes of a class or of an object. In
233:31 - our case, we wanted to be able to restrict
what types of ratings were able to be stored
233:36 - inside of a movie. So I was able to set the
attribute equal to private, which meant nobody
233:42 - could access it directly. They couldn't just
say like, hey, the rating is equal to this,
233:47 - or the ratings equal to that. Instead, if
they wanted to set a rating, they had to go
233:51 - through the set rating function. And they
had to go through our little if statement
233:55 - here. And that is an awesome way to control
access to the individual elements, or the
234:00 - individual attributes in a specific object.
In this tutorial, I'm going to talk to you
234:08 - guys about inheritance in c++. inheritance
is basically where we can define a class.
234:16 - And then we can define other classes. And
those classes can extend the functionality
234:20 - or they can inherit all the functionality,
all the attributes of that original class.
234:26 - So the easiest way for me to explain this
is just to kind of show you guys an example.
234:29 - So over here in my program, I created a class
and it's called the chef class. Basically,
234:35 - this class is like modeling like a chef in
our program. And there's a couple different
234:40 - functions that the chef class can perform.
The chef can make chicken, the chef can make
234:44 - salad and the chef can make a special dish.
Basically each of these functions just prints
234:48 - out like what it's doing. So this one says
the chef makes chicken the chef makes salad.
234:53 - Chef makes barbecue ribs. Very simple class.
And down here you'll see I'm actually creating
234:59 - an instance of this Chef class, and called
chef and down here I'm telling the chef to
235:04 - make chicken. So let's run the program. And
we'll see what happens. So when I run the
235:08 - program, you'll see, it prints out the chef
makes chicken. Awesome. So we have this chef
235:13 - class. And let's say that I'm running my program.
And I'm thinking to myself, like, Hmm, I think
235:18 - in addition to representing just a normal
generic chef, I also want to represent an
235:23 - Italian chef. So what I'm going to do is I'm
going to go over and I'll actually just create
235:28 - another class. So I'm just going to say class.
And instead of creating a chef class, I'm
235:33 - going to create an Italian chef class. So
I'll say, Italian chef. And let's say for
235:40 - our purposes, when we're creating this Italian
chef class, we want the Italian chef to be
235:46 - able to do everything that the normal chef
can do. So this Italian chef can make chicken
235:52 - can also make salad and can also make a special
dish. But in addition to that, the Italian
235:57 - chef will be able to do a bunch of other stuff,
well, we can actually use inheritance in order
236:02 - to build this Italian chef. Because the Italian
chef is going to be able to do everything
236:08 - that the normal chef could do, like make chicken,
make salad and make a special dish, I can
236:13 - actually inherit all of these functions. From
the chef class in my new Italian chef class,
236:20 - I'll show you guys how to do that, it's actually
super easy. All we have to do is come down
236:24 - here. And I'm just going to make a colon.
And then I can just say public and chef. So
236:31 - this is referring to the class that I want
to inherit from. And now what's cool about
236:36 - this is this Italian chef is going to have
access to all of the functionality up here
236:42 - in this chef class. So it's basically going
to inherit all of those functions. So I'll
236:48 - show you if I was to come down here and create
an Italian chef. So if I just said, Italian
236:52 - chef, we'll just call it Italian chef. I could
then say Italian chef dot make chicken. And
237:03 - even though I didn't specify anything up here,
even though this class is technically empty,
237:09 - even though I didn't specify a make chicken
function, or make salad or make special dish
237:14 - function up here, I'm still able to call make
chicken on Italian chef. So if I was to run
237:21 - this program, now, you'll see it says the
chef makes chicken. So I'm able to call that
237:28 - function on the normal chef and the Italian
chef, essentially what's happening is the
237:33 - Italian chef down here is inheriting all of
this functionality. So actually, just to sort
237:39 - of demonstrate this even further, if I came
down here and I change this to chef makes
237:44 - yummy chicken. Now when I run my program,
again, you'll see that the Italian chef is
237:49 - also going to be able to make yummy chicken.
So it's basically inheriting this function
237:55 - from the chef class. And what's cool about
inheritance is that not only can we inherit
238:00 - all that in functionality, but we could extend
on it. So the Italian chef isn't just going
238:04 - to be able to do everything the chef does.
Italian chef can also do other stuff. So the
238:08 - Italian chef could also like make pasta. And
down here, we can just basically print out
238:15 - like the chef makes pasta. So in addition
to being able to make everything that the
238:23 - normal chef can make, this Italian chef can
also make pasta. So I can come down here and
238:27 - say make pasta. But it's important to note
that this normal chef can't make pasta. So
238:34 - if I tried to call pop make pasta on the normal
chef, you'll see we're going to get an error.
238:39 - So you'll see over here, it's not going to
be able to run the program. And actually,
238:43 - it looks like I had an error up here. So this
should be a lesson sign. Alright, so now we'll
238:48 - get an error down by the other chef. Yeah,
so now we're getting this error, which is
238:52 - basically saying this, this chef can't make
pasta, but the chef could make chicken. And
238:58 - now that you'll see the Italian chef is gonna
make pasta and the normal chefs gonna make
239:02 - chicken. And actually one more thing I forgot,
we need to put public over here. I keep forgetting
239:08 - to do that. So I'm gonna say public. And then
this is basically going to specify that this
239:13 - function is going to be public. So now we
should be able to run our program. And you'll
239:18 - see it says the chef makes yummy chicken and
the chef makes pasta. So both of our chefs
239:23 - are able to do different things. And that's
pretty cool. And the other cool thing I can
239:27 - do with inheritance is I can actually override
certain functions. So you'll notice up here,
239:33 - the normal chef has this make special dish
function. And this chef is making barbecue
239:38 - ribs as a special dish. But let's say that
the Italian chef was going to have a different
239:43 - special dish. Well, I can do something called
overriding a function. So I can actually copy
239:48 - this function from up here. And I can paste
it down here into my Italian chef. And essentially
239:54 - now this is going to override the function
from up here. So instead I'm making barbecue
240:00 - ribs we could have him make like chicken parm.
So now this Italian chef is going to be making
240:07 - chicken parm while the normal chef will make
barbecue ribs. So if I came down here and
240:12 - I said make special dish on the normal chef
and I said, Make spicy special dish on the
240:20 - Italian chef. Now these are going to be two
different things because the Italian chef
240:26 - overrode that original function. So chef makes
chicken parm and the chef makes barbecue ribs.
240:32 - So that's kind of how overriding can be useful.
Like if you're inheriting a function and you
240:37 - want to change, like what it's doing, or modify
what it's doing in the other class, you can
240:42 - do that. Now, just a quick terminology. So
we would call this chef class, a superclass.
240:48 - And then we would call this Italian chef class
a subclass, because the Italian chef is inheriting
240:55 - from the chef class, which is the superclass
and that is essentially, the basics of inheritance
241:02 - is you're essentially creating a class and
you're inheriting all the functionality from
241:05 - another class inside of it. And then you can
do things like add extra functions, you can
241:10 - add on to it, or you can override the functions
that you inherit. Hey, thanks for watching.
241:16 - If you enjoyed the video, please leave a like
and subscribe.