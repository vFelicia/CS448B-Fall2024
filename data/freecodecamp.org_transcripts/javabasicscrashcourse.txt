00:00 - Welcome to this Java course for beginners. This course will help you acquire essential
00:04 - Java programming skills quickly and effectively. Starting from absolute scratch, you'll learn
00:09 - everything you need to know from setting up your tools to mastering the core components
00:13 - of Java 17. Whether you're aspiring to land your first programming job, or just adding
00:18 - another language to your coding repertoire. This course promises value at every step.
00:24 - Alex is an experienced course creator and he does a great job teaching the basics of
00:28 - Java in this course. Hello, my name is Alex and I will be an instructor in this course.
00:34 - In this course you'll learn Java, which is one of the most popular programming languages
00:37 - in the world, used by many big companies. So if you want to get a job or to build an
00:43 - app, Java should be your choice. For who is this course? This course is for complete beginners
00:49 - and also for experienced programmers who want to add a new language to their skills. So
00:54 - let's get started.
00:55 - Now it's time to download and install an IDE and for this course I'll use an IDE called
00:59 - IntelliJ IDE, which is an IDE made by a company called JetBrains. Now you may be wondering
01:04 - what is an IDE? An IDE stands for an Integrated Development Environment and is basically the
01:10 - tool that you're going to use to write our code in. An IntelliJ IDE is like a text editor
01:14 - but a very sophisticated one because it has a lot of features like highlighting our code,
01:19 - showing real-time errors and suggestions. You can run and compile your code just by
01:23 - a few clicks. In other words, it's making the process of writing code easier and better.
01:28 - Therefore, let's download IntelliJ IDE. So I'm going to open my browser, you should
01:32 - open your browser. And in the search tab I will type IntelliJ IDE, press enter. We click
01:41 - here on this link, download IntelliJ IDE because this is going to take us on the downloading
01:45 - page. And here you'll see two options, Ultimate, which is paid but has more features and Community
01:53 - which is free but has less features. And this is enough for our purposes. Also, you may
01:58 - have noticed that Windows is highlighted here. This is because the IntelliJ that we are
02:06 - going to download here is for Windows. But if you have Mac or Linux, you should download
02:11 - the particular version for your system. Now, I want you to pay attention at the latest
02:16 - version when I'm currently recording this video is. So it's 22.2.3. And if you look
02:24 - at the system requirements for this version, you need to have a 64-bit version of Windows
02:29 - in order for this version of IntelliJ IDE to work. Otherwise, it will not work. Now,
02:35 - let's download IntelliJ IDE. And now the downloading is starting on the top right-hand
02:40 - side. And if you have a different browser, you will see the downloading starting in a
02:43 - different place.
02:56 - Once the downloading is finished, just open this file. I'm going to close the browser.
03:00 - And now the installation will start. Now it's asking us if you already have to make changes
03:08 - to our device. Click on Yes. Here we need to click on Next. And this is the folder location
03:14 - where IntelliJ is going to be installed. You can change this location by clicking on Browse.
03:19 - And it will show you the folders where you can put IntelliJ ID. But I'm going to keep
03:25 - the default location. So I'm going to click on Next. Here I can create a desktop shortcut.
03:30 - So I'm going to check this to create a desktop shortcut. And I'm going to click on Next.
03:34 - And then I'm going to click on Install. And now IntelliJ ID is going to be installed.
03:37 - And as you can see on the left-hand side here, it already appeared.
03:42 - All right. Now the installation is finished. Just click on this box to run IntelliJ ID
03:51 - Comment Edition and click on Finish. And now if you see this window popping up, this is
03:59 - because it wants to import the previous settings of the previous installation of IntelliJ ID.
04:04 - But most of you will not have a previous installation of IntelliJ ID. This will be the first time
04:09 - when you install IntelliJ ID. So you need to click Do Not Import Settings and click
04:14 - on OK. And now IntelliJ ID is going to start.
04:18 - All right. So this is the welcome window of IntelliJ ID. And this is the place from which
04:24 - you're going to create all of our projects. Now let's go on the left-hand side where it
04:29 - says Customize, click. And we click here where it says Color Team. And we click on this drop-up menu.
04:35 - And from here, I'm going to select IntelliJ light because this is better for tutorials.
04:39 - But you can keep the dark team if you want. Also, I'll show you in a separate video how
04:42 - to add more teams, not just the teams provided by IntelliJ ID. Let's go back on the left-hand
04:49 - side, click on Projects. Let's click on New Project because we need to configure now the JDK.
04:56 - All right. As you can see here, it says that there is no SDK. And what that means is that,
05:02 - first, what is the SDK? SDK stands for Software Development Kit. And as you can see here,
05:08 - it says JDK. And JDK stands for Java Development Kit. And the SDK is basically the Java Development
05:18 - Kit, however you want to call it. What this thing is, this contains the tools that we need
05:25 - to, for our app to be able to run and compile our code. And this JDK contains those tools.
05:34 - So you need to click here where it says Download JDK. And the latest version, when you click on the
05:40 - Download JDK, it opens this window and you have version, vendor, and location. And for the version,
05:46 - we're going to choose version 17. And you now may be wondering why version 17 because the latest
05:52 - version is 19. This is because the version 17 is the version which has long-term support. And that
06:00 - means that it will receive bug fixes and updates for several lists to come without you needing to
06:06 - switch to any new version whenever it's released. Next, we have the vendor. And this is the company
06:14 - which provides the SDK. And I'm going to choose Amazon Coretto because it's a good vendor. Next,
06:20 - we have the location where the JDK is going to be installed. And you're going to remember this
06:25 - location. And then I'm going to click on Download and it's going to add the JDK. Because without
06:30 - the JDK, the IntelliJ ID, it's like an empty text editor. It doesn't have the tools to write our
06:39 - code and to compile our code or to run our code. So this is what the JDK is. It's like a packet
06:46 - with all the tools that IntelliJ ID needs in order to be able to write code and to run our code.
06:53 - Now I'm going to click on Download. And as you can see, it will download and it will be added
06:59 - automatically here. All right, so we have the JDK set up here. It's Amazon Coretto 17. And now
07:07 - we're ready to create our first project. But we're going to create our first project in the next
07:11 - video. So I'm going to click on Cancel here. And see you in the next video. All right, now it's
07:16 - time to create our first program. And there is a tradition in programming that our first program
07:20 - should be to output the text hello world in the console. And this is what you're going to do in
07:24 - this video. Therefore, I'm going to open IntelliJ ID. You should open your ID.
07:28 - Click on Create New Project on the plus button. And first to have the name and the name of the
07:48 - project, if it has multiple words, every word should start with a capital letter and you should
07:53 - not have white spaces. This way of naming is called Pascal case. So I'm going to type hello
08:00 - and with an upper case letter world because we have two words. For the language, you select
08:06 - Java for the build system IntelliJ. And as you can see here, it says there is no SDK. But if I
08:11 - click here, as you can see down here, it says detected SDK. So it detected the JDK that we
08:17 - installed in our previous video. And this will probably be the same for you. And if for whatever
08:25 - reason, it's not saying detect the SDKs, just go to our JDK and go to the folder where the JDK is
08:33 - and add the JDK here. But probably it will detect the JDK and you'll have the JDK down here,
08:40 - like I have. So I'm going to click there to have the JDK added. Then I'm going to click on create
08:49 - and our project is going to be created. Let's increase this. And as you can see, our project
09:00 - is creating, we have something on the left hand side down here, it's working. So we wait a little
09:06 - bit to set up the things. Alright, now our project is ready. And I want to focus on the left hand
09:17 - side. And this thing on the left hand side is called project pane. And here, what we are
09:24 - particularly interested is this src folder. So click on this greater arrow in front of src. And
09:30 - here we have this thing main. This is a class, we'll see what classes are in the future videos,
09:36 - not now. What you need to do here is double click on this main. And that is going to open this and
09:43 - you'll see some code here have this thing public class main then have this probably start to avoid
09:49 - main strings. We're going to talk about what is that and as you can see it also has this system
09:55 - that how that print line hello world. And if you run now this code that is going to be out within
10:01 - the console, but let's do it ourselves. So to output something in the console, we simply type
10:08 - here system that out that print line. And while we are typing IntelliJ ID is given us suggestions
10:21 - and saying system when I put that is saying Do you mean print line saying that? Yes. So yes, if
10:29 - you want to fill in that for you, so if we press enter, it will fill in that for you. And inside
10:35 - the parenthesis of the print line, I'm going to put double quotation, double or double pair of
10:42 - quotation marks. And the text that I want to be output in the console hello, in this case world.
10:50 - And very important is to have a semicolon at the end of the code because you don't put a if you
10:55 - don't put a semicolon, as you can see here, you have an underlying and it says that expect a
11:03 - semicolon. So you need to put a semicolon. So put semicolon. Now to run our program to see the
11:09 - output in the console, we can do it in two ways. We can right click inside the class,
11:15 - we're going to see what classes are. And we can click here run main, or you can click on this
11:21 - run button, which is up here on the top right hand side corner. So let's run it from here.
11:28 - Now it will open the console and it will output the text hello world.
11:33 - All right, so it opened the console and have hello world. Let's put an exclamation mark there.
11:38 - Let's run it again. And we have hello world. So what this thing does is takes the input that is
11:46 - passed here, and it will output in the console. And if I remove one of the quotation marks,
11:51 - look what happens. I have an error, because we need to put double quotation marks in order
11:55 - to work. So if I put here a single quotation mark, again, it will not work. You need to have
12:00 - double quotation marks around the text that you want to be outputting in the console.
12:05 - And this entire line of code, it's only job is to output whatever you pass
12:11 - inside the parentheses of it. In this case, hello world, but you can change this text.
12:15 - We can put here hello Alex, or type your name there. So if you run this, as you can see,
12:24 - it will say, wait, it will say hello Alex. So now it's printing hello Alex. And this whole thing
12:30 - that we have here, it's called a function. And we'll see what functions are in the future video.
12:39 - But a function simply is a collection of code grouped together, which can do a specific task.
12:48 - In this case, our function can do the specific task to output in the console this takes hello
12:56 - world. You type system dot out dot print line parentheses. Inside the parentheses, you put
13:04 - a double pair of quotation marks and the text that you want to be out with. And it's going to output
13:09 - that in the console. And in the future videos, because as you can see, we have this public
13:14 - started void, man, we have these strings, we have those square brackets, we're going to see what all
13:20 - of those are in the next videos. But for now, we create our first program, we output in the console
13:26 - hello world, and everything works fine. So now I'm going to end the video and see you in the next
13:33 - video. So as I said in the previous video, in this video, I will explain to you what all these
13:37 - code means. So first to have as you can see those public class and have again public and have static
13:44 - and void and all of those as you can see, they are colored in blue. And they are colored in blue,
13:50 - because this is the way in which IntelliJ is telling us to us that they are keywords.
13:57 - And a keyword is a reserve word which has a very specific meaning, which can not be used in other
14:04 - contexts than the context of a keyword. So first we have public and this is called an access
14:11 - modifier. So what this public is going to do, whatever comes after the public, it will be
14:18 - publicly accessible what this is what this public means. Next, we have class and we'll see what
14:24 - classes are in the future. But for now we need to know that every function because down here we
14:33 - have a function, every function that we use in Java has to be part of a class. So we have public
14:41 - the access modifier. So other parts of the code can access this class because it's public.
14:49 - Then we have the keyword class, which creates a class. And then we have the name of the class,
14:54 - the name of the class is main. Next, we have curly braces, as you can see, and the curly braces are
15:01 - used to create a block of code. And a block of code is as the name says, a block which contains
15:11 - lines of code. And the block of code begins here and it ends here. It begins with an opening curly
15:20 - brace and with a closing curly brace. And next down here we have again public but now we have
15:28 - public and we have static and void. And I'm not going to explain to you what static is for now
15:33 - because I will explain to you this in a future video because now I can't because it will make
15:41 - things too complicated. So we have public again for the function. And what this means is that
15:46 - we can access this function from other parts of the code because it's publicly so it's public.
15:52 - So this is also an access modifier. Then we have static. I'm going to explain to you in
15:56 - the future videos what this is. And then we have void. And this signifies the return type of this
16:04 - function that we have here, the main function. So what we're saying here is that we have a function
16:09 - which returns nothing. This is what void means. And this function main, as you can see,
16:18 - it's inside the class because all the code that you create in Java has to be part of a class.
16:25 - So this is why we have main curly braces and inside the block of the main we have the function.
16:31 - So the function is inside the block of the main. Now, next we have the name of the function. And
16:39 - the name of the function is main. And this function main, as you'll see, you can create your own
16:45 - function. But this is a special function because this is the entry point of your app. So every
16:52 - program that you create has to have a main function. Otherwise, the program will not work.
16:57 - So look what happens if I change the name of the function from main to A. And look what happens
17:03 - with the play button here and with the play button here, which we can use to run our code.
17:08 - So if I put main A, they both disappeared. So this is disabled and now this disappeared.
17:14 - Why? Because now we don't have an entry point. And when the Java compiler tries to run our code,
17:22 - it looks specifically for the main function to execute our code. And next we have parenthesis
17:33 - and we have the string, we have square brackets and arcs. And what we have here is called the
17:38 - parameter. Again, all of this is going to be explained in different chapters at the correct
17:46 - time, but not now. And then we have again curly braces. So we define now again a block of code.
17:52 - And inside this block of code, we have our simple statement. A statement is basically a complete
18:02 - unit of execution. So it's something which can be executed. This is what a statement is.
18:08 - So we have the statement to output this text in the console. And this is part, as you can see,
18:13 - it's inside the block of the main. So the block of the main starts here with the opening curly
18:19 - brace and ends with the closing curly brace. But this function, as you can see, it's part of the
18:25 - class, of the block of the main class. Because if I put this outside, let me show you actually,
18:31 - if I put this outside of the main, look what happens. So let's take it. Let's go outside
18:36 - the block of the main. So outside the curly brace, let's put it here. Now we have an error. And it
18:41 - says public start avoid main and have this class main. So it's telling us that we should put this
18:49 - inside the class. So if I copy this now, and if I paste it here, now everything was fine because
18:59 - all the code, all the functions, as you'll see, have to be in a class in Java. And then we have
19:06 - our simple line of code, which outputs Hello Alex in the console. So this is how all of this works.
19:15 - Again, if you feel confused by this, don't be because at the appropriate time you'll,
19:20 - I will explain each individual thing in great detail. For now, all we need to know is that
19:27 - you need to have this class main, you need to have this function main in order for your programs to
19:32 - work because all the code that you're going to write is going to be called from the main function,
19:37 - from the main function that we have here. And I didn't talk about this, this is called a parameter
19:44 - because functions can take input and can work with it. But more on that later when you're going
19:50 - to talk about function, function specifically. So this our discussion about what all of this
19:56 - code means. And again, don't, don't be, if you feel confused, it's normal. And if you have
20:05 - questions, just ask me and I will happy answer you. And I will end the video now and see you
20:11 - in the next video. So in the last video, we create our first program and it was a simple program.
20:16 - We just outputted the text Hello Word in the console. And if you want to make your program
20:21 - to do something useful, you need to store data. And to store data, you need to use variables.
20:25 - Therefore, let's create a new project. Let's call it variables.
20:34 - For the link, we select Java for the build system IntelliJ. Make sure to have the JDK selected here.
20:40 - And also make sure to make sure to have this add sample code. And this is going to add the
20:46 - class main and the main function for us. So let's click on create.
20:49 - All right, so now our project is created. If I double click on the class main,
20:56 - it will open the file for me. Now, let's pull this on the next line.
21:03 - Now, what we have here is the code that we had previously. And that is to output the
21:10 - text Hello Word in the console. And if you run this, you'll see outputted Hello Word in the console.
21:21 - All right, so the console opened and we have Hello Word. And of course,
21:24 - you can change this text to print something else. Let's say Hello Alex or type your name there.
21:31 - So if you run this, now it will output Hello Alex. Right, so we have Hello Alex. Now,
21:42 - the problem with this is let's say that I duplicate this line of code a few times.
21:47 - And I run this code now. Now it will output Hello Alex multiple times.
21:54 - So as you can see, it outputs in the console Hello Alex multiple times. And let's say that
22:00 - I want to change the value of Alex to a different name to put here Christian, let's say. In that
22:07 - case, we have to go in the parentheses of all the systems that are that print line.
22:16 - And we have to change the Alex in all the places. And a better way to do this will be to have
22:22 - something in which you can store Alex. And to call that in all the places where you want to
22:29 - use Alex, and when you want to change this value changes value once where the value is declared.
22:36 - And it's going to be reflected in all the places where it's called. And that is a variable. And
22:41 - we're going to look at the first type of variable, which is a string. And a string is a variable
22:46 - which can store text. So I'll type here string. Let's call it name equals, and we put double
22:59 - pair of quotation marks, Alex, and semicolon, of course. Now what I will do, I'll delete Alex from
23:07 - here. And I will, I will put hero plus, and I will I now I will call the variable name here. So I
23:16 - will type here name. And as I was while I am typing, you have a suggestion. And say it's saying, do you
23:25 - mean this V for variable name, which is of type string, which means that is storing text? And I'm
23:32 - going to say yes, press enter. So now if I delete those lines of code, not not all of them, if I
23:40 - delete only those lines of code, and if I press Ctrl D multiple times, now if you run this, we get
23:55 - hello, Alex, hello, Alex, hello, Alex, hello, Alex. And now we found to change the value of because
24:01 - because you know what we're doing here, we are outputting something in the console and we're
24:06 - saying hello, plus, so we are concatenating. This is this is what this this is how it is called, we
24:15 - are concatenating some string to some to some to some other string. So we're adding this this
24:23 - variable, which has the text Alex in it to the to the text hello. Now, if you want to change the
24:29 - value of Alex, you can go where to declare the variable and decide the double pair of quotation
24:37 - marks, I will type, let's say Christian. And now when I run this, it will be reflected in all the
24:46 - places where the variable is used, as you can see. So so now we're saying Hello, Christian, and all
24:53 - the places where where where the variable is used. So this is and this this type of variable string
25:01 - can only store text. So if I try to put here a number, let's say so let's delete the quotation
25:08 - marks, and I put three here, I can't because because so if I put even if I put semi colonist
25:19 - underlining and read and saying, require type string meaning text, and you provide it in which
25:27 - is a number. So this this string is a data type and data type means simply what type of data you
25:36 - can store what this is what data types data type mean means. So this string variable is so so or
25:45 - this variable name is of type string. And that means that you can put only text in it, you cannot
25:50 - put numbers to put numbers, we need to use another type of variable. So let's put here again, Alex,
25:56 - or let's put Christian. Now, let's say that I want to also output the age of this person.
26:05 - To do that, as you saw, we cannot put the variable inside the the the variable name because this
26:12 - of type string, what you need to do is to go to the next line, and we need to type here int.
26:18 - So now we are declaring a different type of variable. So now we're creating a different
26:23 - container, if you want, if you want to think about this like this, we create a different
26:29 - container in which we can put now num numbers. So with string, you can put only text in your
26:36 - variable, as you can see here. And now with int, you can put only numbers, whole numbers, and I
26:42 - will type here a number for the name of the variable. So first, we first we define the type
26:49 - int, the name of the variable number, and I'm going to put here equals, let's say 23.
26:56 - And now we have no errors, let's just put semicolon here. Now, let's also put here
27:01 - some more text. So let's put plus quotation marks, let's put a dot and let's say your
27:12 - your age is. And now let's call our variable. So let's, so inside the parenthesis, but outside
27:22 - the quotation marks, I will put plus, and I'll type here number. And let's delete those lines,
27:29 - of course, to duplicate this code again. So let's, so let's let it let you like this for now. So now
27:34 - if you run this, we have Hello, Christian, your age is 23. And let's put a space here to make it
27:47 - look more beautiful. So get Hello, Christian, your age is 23. So now we are concatenating this
27:58 - number to our string here that we have here. So this is what this plus is doing is taking this
28:03 - value and it's adding that value to in a way in what it is actually doing is converting this
28:10 - number in a text. And it's printing your age is 23. And then and then we have Hello, Alex, your age
28:16 - is 23. And we did this by using different types of variables. And as you'll see, there are other
28:25 - data types of variables that we can use to store data. But this these are the most common use
28:32 - variables, the most common use type of variables that you're going to use. So we have string for
28:37 - text. And we have int, which is the abbreviation for integer. And we have the name number and
28:46 - input the value 23. So this is our this is our introduction discussion about variables and see
28:53 - you in the next videos, we're going to look at other types of variables or other types of data
28:58 - that you can put in variables. So see you in the next video. Now it's time to look at the next data
29:03 - types that you can use in Java. And by data types, I mean, different type of data that can be stored
29:08 - in variables. And we're going to look specifically at two more data types for storing whole numbers.
29:14 - And we also want to look more closely at the int data type. So let's delete this code. Let's also
29:21 - delete the string variable. Now, what is an int? We know that an int is a type of variable which
29:29 - can store whole numbers, but how big the whole numbers can be so we can put anything here,
29:35 - actually, that we cannot put any number you want, there is a minimum and maximum value which can be
29:41 - stored in an integer data type. Again, integer data type is used for storing whole numbers. So
29:46 - if you put here 22.2, you will have an underline because now we no longer have a whole number,
29:54 - you have a number with a fractional part. So let's delete that. And now, to get the maximum value
30:00 - which can be stored in an int, we type integer with uppercase i, dot, and we type max value.
30:12 - And this line of code that is here, integer dot max value, we're going to talk about in the future
30:17 - video what is this. But for now, this is going to give us the maximum value which can be stored
30:25 - specifically in an int, in an integer data type. So I'll type here int max.
30:33 - And there is also a minimum value which can be stored in an int. So I'll type int min
30:38 - equals, I'll type again integer, dot, and I'll type min value and semicolon. Now, down here,
30:51 - I will add a print and system dot out dot print line. And I will print the minimum value and the
31:04 - maximum value. So I'll type here, but let's say that I type here simply, I put double
31:09 - quotation marks and I type max. What do you think will be the output? So if you run this,
31:20 - we get the text max because whatever you put inside the double quotation mark is considered
31:28 - as text as string. So it's not a variable which contains a value. So let's delete this.
31:35 - Let's put again double quotation marks and let's type the maximum value for an int
31:48 - equals and we're going to type plus and we're going to type our max, our max variable from above.
31:58 - Next, I'll press Ctrl D and I'll type here the minimum value.
32:04 - And here, I will change it to min. So I'll put here min. Now, if you run this,
32:24 - you get the maximum value for an int is you have this big number 2,147,000,000 and so on.
32:32 - And then we have the minimum value is minus 2,147,000,000 and so on. So those are the minimum
32:39 - and maximum values can be stored in an integer. If you try to put a number which is bigger than
32:44 - that, you'll end up with an error. So if I try to put here, let's put parenthesis here to make
32:53 - it more clear and I put max plus one. Look what happens. We get the minimum value output now
33:07 - because it's trying to fit, it's trying to put this number which is the maximum number plus plus
33:13 - one. It's trying to output that in the console and it couldn't and because of that, it outputted the
33:21 - minimum value. So let me show you more specifically how this error is called. So let's delete this,
33:27 - let's delete also. So let's put here plus one. So now we have a number bigger than the maximum
33:34 - value because you had to move on to it. And now if you hover over here and every time you see
33:40 - something gray out or it's color, that means the IntelliJ ID wants to tell you something.
33:47 - And here it's saying numeric overflow in expression. So it's saying in other words,
33:52 - hey, you cannot put a number bigger than the maximum value which can be stored in an integer.
33:59 - And if you do that, I will overflow and by overflow means that it will try to put that
34:07 - value in an integer but it's not going to be able and it's going to output the minimum value.
34:14 - So let's delete the one from it, from there. And now let's go down here and let's create another
34:21 - type of variable. Let's create now a byte. So we type byte and let's call this byte max
34:31 - value. I am calling byte max value because if I type here max, we'll have two variables which
34:44 - have the same name. And you can't have this because if you want to call one of the variables,
34:50 - the compiler or the IntelliJ ID does not know about which variable you're talking about.
34:57 - So let's call this max byte value. And now we'll get the maximum which the value which
35:06 - can be stored in a byte. So we're going to type here byte that max value, then I will press
35:14 - control, I'm going to put semicolon, I will press control D, control D. And I will change this to
35:22 - min byte value. So min byte value. Let's put min and let's change this to min.
35:33 - Min byte, min byte value. And this is again is going to return us the maximum value which can
35:38 - be stored in a byte and the minimum value which can be stored in a byte. So if you run this,
35:47 - actually we get nothing because you need to put something in the console. So let's
35:51 - copy those two that we have here. Let's paste it below. And let's change the maximum value
36:01 - for a byte. And here for a byte also.
36:12 - Let's call all variables. And as you can see, they are gray out now because this is,
36:17 - if you hover over, it says that variable max byte value is never used. So
36:26 - whenever you see something colored or gray out, that means that IntelliJ is telling you something.
36:32 - So let's call our variable here. So let's type max byte value and min byte value,
36:39 - so min byte value. Now if you run this, we get the maximum byte value is 127 and the minimum
36:54 - byte value is minus 128. And this is considered, those min and max for byte are considerably
37:04 - smaller than the Int. So the Int data type is much bigger than the byte. And there is another
37:15 - data type which is bigger than the integer data type. And we're going to look at that now.
37:19 - So let's look at the next data type which is bigger than an integer and that is called a long.
37:24 - So let's go down here. I will type long, so this is how we declare it, long.
37:30 - And next I'll give it a name. Let's say my max long value equals, and I will type here long
37:43 - that max value semicolon. And I'll type again long min long value equals long that min value
38:04 - semicolon. Now let's output in the console the minimum and the maximum value which can be
38:10 - stored in a long. So I'll type here system dot out dot print line. And I will type here
38:21 - or simply long or let's type long max value equals and put a space plus max long value.
38:39 - Control D and let's change to here should be long not log. Long long and let's change this to min.
38:53 - Now if you run this,
38:59 - as you can see the maximum value which can be stored in a long is much bigger than the
39:04 - integer and I don't know how to read this number. And this is the maximum number which can be
39:12 - stored in a long and this is the minimum value which can be stored in a long. But let me show
39:18 - you something interesting. So look what happens if I go down here. So I'll go down here with the
39:27 - code and I will create a variable also long called let's call it my number. And let's say
39:40 - that I try to put here a number which is let's put the maximum value which can be stored in an
39:48 - int. Let's put it inside the my long variable. So let's put semicolon. Okay so everything works
39:55 - fine now. But now if I increase this by one, look what happens. I get an error. And now you may be
40:04 - wondering hey but this number that we have here is much smaller than the number that can be stored
40:12 - in a long. So why you get an error? And this is the important part. This happens because the assume
40:21 - type which when you type literally a value when you type a number is an int. So this is considered
40:29 - to be an integer. This is why you have an error because if you have a rubber it says integer
40:34 - number too large. In order for this literal value because this is called a literal. And it's a
40:40 - literal because we type this ourselves directly here. And it will treat this as an integer. So
40:48 - no matter what we try to do it will always be an integer. To be treated as a long and to fit
40:56 - in a long we need to put L suffix at the end. So I put L. Now everything works fine. But can also
41:05 - put uppercase L. And sometimes it's good to use uppercase L to not be mistaken for the lower case
41:17 - L to not be mistaken with one. So this way you should use uppercase L. And now if you run this
41:26 - actually as you can see the error is appeared. And now everything works fine.
41:35 - All right. So those are the data types for storing whole numbers. In the next video we're going to
41:40 - look at the other data types called floating point data types. And with those floating data types
41:47 - we're going to store fraction numbers which have a fractional part. So see you in the next video.
41:54 - Now it's time to look at the next data type that you can use for storing whole numbers. And that
41:58 - is a short. And to declare a short variable just type short. I'm going to call it max. I'm going to
42:04 - put equals and then I'm going to type here short uppercase letter that marks value semicolon.
42:13 - Then I'll type short mean equals and here we're going to type short that mean value semicolon.
42:24 - Now I'll type here max that and look what I can do. I can put max.sout and it's going to
42:31 - print in the console the maximum values and it will generate the system that out the
42:36 - print line for us. And it will put the variable as parameter for our function. So if I press now
42:44 - enter as you can see it added sout. It's added our max variable inside the print line.
42:52 - Okay then I'll type here mean again that out sout sorry and now we're going to print the
43:02 - minimum value. And let's put a text before. So let's put some text here. Let's say max
43:09 - max short value equals plus max then mean short value plus and here we will put question mark
43:35 - plus mean. So let's put an equals here. So now if I run this.
43:51 - If the maximum short value is 32,07767
43:56 - and the minimum for value is minus 32,07768. So those are the minimum maximum value that
44:06 - can be stored in a short. And depending on what you want to do you will use short value if you
44:14 - need a specific scenario. So now I'm going to end this video and see you in the next video.
44:20 - Now it's time to look at the next two data types for storing numbers more specifically for storing
44:24 - numbers with a fractional part. And those are called floating point numbers. And we have two
44:30 - types here float and double. And they differ in the first they differ in the size the float has
44:38 - a size of 32 bits and double has a size of 64 bits and and consequently a length of 64.
44:47 - And they differ in the precision. Double has a bigger precision than a float. And but first
44:55 - let me show you a problem with the code that I typed in the previous video. And the problem
45:01 - is that I forgot to call the mean long value in our code. What I did is that I called my log
45:08 - long value my max long value two times. So let's change this to mean long value. And now now
45:17 - everything will be fine. So now if you run this code. Now we have our minimum long value.
45:25 - All right, let's close this. And let's delete this code because you don't need this code.
45:29 - Now, to create a floating floating point now a number, we're going to use further float,
45:38 - we're going to type float. This is the keyword. Let's call it number equals and here I'm going
45:46 - to put 3.14, 3.14. Now if I put semi colon, I have an error. I have an underline and it says
45:55 - the required type float provided double. So we have a similar problem with the whole numbers
46:06 - where the assumed type is an int. Here with the floating point number, the assumed number is a
46:15 - double. So if you don't put an F to treat this as a float, it will think that it's a double.
46:22 - So if I delete the F, as you can see, it's thinking that it's a double. But if I put an F
46:28 - at the end, it will, it will treat it as it will treat it and it will be a float because you have
46:35 - a number as you can see it says float. Now let's create a double. And I will type here double
46:42 - number two, let's say, in a real app, you should give more discrete names. And generally, you
46:49 - should give a more descriptive name for your variables. And I will type here 2.0. That's all
46:56 - and semi colon. And everything will work fine. Now let's see what is the minimum and maximum
47:01 - values. And let's also, by doing this, see the precision of our floating and point of our float
47:08 - and double types. So I will type here first float. Let's delete the code that we have above. Let's
47:20 - call it max, max float value equals float again, that max value, semi colon. Let's press Ctrl D,
47:38 - let's change this to min. And let's change here to min. Let's add the system that out that print
47:51 - so S, the uppercase dot out dot print line. And I'm going to type maximum float number
48:13 - equals, and I'm going to put a space plus. And I'm going to type here when I refer our variable
48:27 - max float. Now I'm going to press Ctrl D. But now we need to be careful here to call our variables,
48:35 - not like in the previous example where I forgot. Let's type here minimum float number. And let's
48:45 - type here min. Now let's do the same thing for the double. So I'll type here double
48:53 - max double value equals again, we type double dot max value, I'm going to press Ctrl D,
49:11 - change this to min. And let's change this to min.
49:15 - And let's copy this code. Let's paste it here below. And let's change this to double.
49:29 - Here to double. And let's change this to the max double. And min double here.
49:46 - Now if you run this code, you get an output maximum float number. And we have this precision,
49:58 - this is the precision of the floating point number. And this is the precision of the double
50:06 - floating point type, for the type of double. As you can see, the precision for the double
50:13 - is much bigger than the precision of a float. And when to use one or the other, it depends on
50:22 - the scenario. If you need more precision, use double. If you don't need a lot of precision,
50:28 - you can use float. So this is our discussion about floating point numbers, about float and double,
50:36 - and see you in the next video. So far in our videos, we've only dealt with data types,
50:40 - which are store numbers, whole numbers, or floating point numbers. And now it's time to
50:45 - look at two different data types, and that is the char and the boolean data type. So I'll delete
50:50 - this code because I don't need this code. And the char data type, we're going to start with
50:55 - the char data type. You create it by typing char. You give a name like all variables.
51:04 - I'm going to call it letter. And in a char data type, you can store only one element,
51:10 - only one character. So I can put here, and we don't put double quotation marks, you put
51:16 - a single quotation marks, and you put our character that we want to store in our char
51:25 - letter. So we put A. Now if I add here a system.out.print, I'm going to type letter.
51:36 - Now this is going to print the letter A. So if you run this, as you can see,
51:48 - we have output in the console letter A. So this is the char data type. And you may be wondering,
51:54 - where is this useful? This can be useful in scenarios we say that you want to get the last
52:00 - key that was pressed by a user. You can use, in that case, char data type because it's good for
52:07 - that scenario. And next, let's look at the char data type. You cannot put multiple characters
52:17 - here. So if I put multiple characters, I have immediately an underlying says too many characters
52:22 - in a character literal convert to a string. So this is very important to have only one character
52:29 - in a char. In a char, you can store only one character. Next, the next data type that you
52:36 - can use is Boolean. And a Boolean data type can have only two values, true or false. And you're
52:44 - going to see Boolean data types used everywhere in your code. And usually you declare the name of
52:52 - the variable which is of type Boolean with ease. So ease active or ease playing or ease raining.
53:00 - So this is how it declared the Boolean variable. This is how it declared the names for the Boolean
53:06 - variables. So I'll type here ease active. And this I will type in camel case. And camel case means
53:12 - that the first word starts with a lowercase letter. And the next word starts with capital
53:21 - letter. So I'm going to type here is active. And I'm going to put equals. And now in this
53:27 - Boolean data type, you can put either true or false. Now if I put true and I go down here,
53:36 - let's put semicolon because it's expecting us to put a semicolon there. So if I type here system
53:42 - dot out dot print line, and the print is active, it's going to output in the console true because
53:52 - our Boolean variable has the value true. As you can see, you have a intro, if I put false,
54:02 - if I run the code now,
54:03 - we get false because now our variable itself has the value false. So this is the Boolean data type.
54:14 - And this is very, very useful in your code, as you'll see, you will use it in almost any type,
54:22 - any piece of code that you're going to write, you are going to deal with Boolean data types.
54:26 - So these are the data types that you can use in Java. And except in string, those,
54:35 - the other data types that we looked at, that we looked at, except in the string data type,
54:41 - are called primitive data types. And this has to do with how they are stored in memory. So
54:48 - I'm going to end this video now and see you in the next video. Now it's time to look at operations.
54:53 - And in Java, we have some operations that you can perform. And for that, I will create two
54:59 - variables. The first one is going to be an int is going to be called num one, and I will assign
55:03 - five to it semicolon. And then the next one is also going to be an int. And this is going to be
55:11 - going to have the value num two, and it's going to have the value three. Now, the first operation
55:18 - that we can do, we can type here print system. I wonder if there is not a shortcut to types,
55:26 - let me see, see, oh, no. So system dot out dot print line. So now we can first add those numbers.
55:40 - So I can add num one plus num two. So I can add those numbers. This is the first operation that
55:48 - we can do. So we get eight, because five was reset. Next, we can subtract. So I can put here num one
56:04 - minus num two. So we have two. Next, we can multiply. So I'm going to press Ctrl D.
56:19 - And to multiply with the asterisk sign. So now if I run this, you'll see five times three.
56:26 - And you're going to see 15. Okay, I'm going to press Ctrl D, we can also divide. So we can divide
56:33 - the input slash and can divide five by three. And it gave us five divided by three gave us one. So
56:49 - it's not showing the fractional part in order to show the fractional part, you need to declare
56:54 - one of the variables as a float key point number. So let's change this to float. Let's put on f here.
57:06 - Let's change this also to float to see how the result of the division looks. So if you look now,
57:16 - now I have 1.66. And now we're using float. So for our, for our, let me see if I put only
57:27 - in here and float there, see if we still get the decimal part. So we still get the decimal part
57:36 - because one of the number is float and the entire expression. So the expression or expression is
57:41 - something which returns a value. In this case, num divided by two is an expression because it
57:48 - returns the result, which is 1.666. And you can also check to see what if something is
57:59 - an expression by typing, I think shift Ctrl P, and if you click on this, so you have two options
58:07 - here. You can select num one or num one divided by num two. And this shift Ctrl P, this shortcut
58:18 - allows you to see what num one divided by num two is, what is a float, is an in. So if you press
58:24 - enter, as you can see, we have this pop up, which says float. So this entire expression is a float.
58:31 - It's returning a floating point number, which is this number down here, 1.666. Okay, but let's
58:38 - change it to a double to see because I said that a double has a bigger precision. So let's change
58:44 - it to a double. So let's delete that and let's run our code now. All right, so now we have 1.666.
58:58 - So it's much, the precision is bigger than the precision of the float. So this is good to have
59:04 - in mind. Let's change this back to int. Now one operator, which is because those are operators,
59:13 - and the thing which does the operation is called operator. The ones on each of the operation,
59:23 - it's applied respectively, num one, num two, are called operands. So this is simply their name.
59:31 - So the operands are the ones on which the operation is performed. The thing which performs the
59:37 - operation is called the operator. So I'm going to type down here, system.out, dot print line.
59:43 - And I will type here, and now I'm going to introduce, I will introduce an operator which
59:52 - is not so well known, known as outside the programming context. So I'm going to type modulus.
59:58 - This is how it's called modulus. And it's a per certain sign, per certain sign,
60:03 - three. And what this five modulus three is going to give us is the remainder. So it's going to,
60:10 - it's going to, it was going to give us the remainder of five divided by three. So if you run this,
60:22 - as you can see, we have two. So this is the remainder, five divided by three,
60:28 - and we have the remainder two. So this, this per certain sign is given as the remainder. So
60:35 - for, for the, but why I type five divided by three, let's type num one divided by num two.
60:43 - I don't know why I typed that, but it's okay. It's still the same thing.
60:48 - Only that previously I was typing the value, values literally there. Now, another thing that
60:56 - you can do is let's, let's press control D. And let's change this to, let's say plus.
61:02 - And let's put here times, let's say, or instead of time, actually let's put times four, four.
61:16 - So we have num one plus num two times four. So now if you run this,
61:21 - we get 17 because it first is doing the multiplication, which is three times four,
61:35 - which is 12. And then it adds five to it. And, and that is 17. And as you can see,
61:43 - the multiplication is done for the first because multiplication has precedence over the addition,
61:50 - but you can put, you can change the order of operation by putting parenthesis around the
61:55 - expression that you want, that you want to have it evaluated first. So I'm going to put parenthesis
62:01 - around num one and num two. So now we have five plus three, which is eight times four.
62:08 - So now if you run this, we get 32 now because now it's doing first operation inside the parenthesis.
62:18 - And then there is multi, multiply the result by four. All right, so those are the operations
62:24 - that you can do in, in Java, there is also something which is called abbreviation. So
62:31 - what you can do, let's say I can declare another variable here. So I'll type here and
62:36 - let's actually declare it down here. And let's call it my number equals to zero.
62:49 - What we can do here, I can type here my number equals my number plus one.
63:00 - And this, this will add basically to our number. This mathematically, this is not correct because
63:08 - you say my number is equal to my number plus one. But what we're saying here is what we are adding
63:14 - to my number one, and then we store the value in my number. And there is a short over way of
63:20 - writing this, we can write this in the following way. So we can delete this. And we can put here
63:26 - num, num my number plus equals one. And it's the same thing. Let's put semicolon. And we can do
63:33 - the same thing for the, for the other operation as well. So and we can put whatever number you
63:39 - want here. So you can put here four or so whatever number you want, you can put here. And those are
63:46 - abbreviation. So let's change this to, let's say, here multiplication, division, let's press Ctrl D.
64:01 - And let's also use modulus. And let's add a system dot o dot print between all of them to
64:08 - output the value in the console system dot o dot print my number.
64:13 - And let's do the same thing for the next one. So I'm going to copy this line of code.
64:17 - So let's copy this, Ctrl C, let's put a space, paste, space, spaced, again, a space,
64:31 - and paste. All right, so now if you run this,
64:47 - all right, so get in the output for and then get zero, zero, zero and zero. And we are getting
64:52 - this because first we declare this variable my number and assign zero to it. After that,
64:58 - we add to my number to the value zero, four. So I have now in my number the value four.
65:05 - On the next line, we are subtracting from my number, which has the value four,
65:10 - four, and that is going to give us zero. Then we're going to multiply four by zero and it's
65:15 - going to give us zero. So my number now also has the value zero, then we're going to divide by four
65:20 - and we're going to divide my number, which has zero. So we're going to return zero. And then
65:25 - we're going to take modulus four. So we take zero modulus four, and that is going to give us zero.
65:32 - So this is why we get four, zero, zero, zero in the output. Now, you can also increment your
65:38 - variable just by one using what is called postfix and prefix incrementation. And to show you how
65:46 - that works, I'm going to type here my number. Let's type down here and then let's assign it.
65:53 - Let's put a value of zero. Actually, it already has zero, but anyway, let's reassign zero to it.
66:01 - And now if I add a print line here, so if I add system.out.print, and let's say that I want to
66:09 - increment my number by one, what I can do is I can type my number. And this is called postfix
66:16 - incrementation, because we are incrementing at the end of the variable. So we are we're typing here
66:23 - plus plus. So now if you run this, we get zero. And now you may be wondering why we get zero,
66:34 - because as I said, I said previously that this is it's incrementing the value by one. Yes,
66:40 - this is incrementing the value by one, but it's incrementing with first outputs in the
66:45 - console, the value of my number, and then it increments the value of my number. This is why
66:50 - you get four. So if I add another system down here that out that print line, my number now is
66:59 - going to output one. So if I run this, now, as you'll see, we have one, but because because this is
67:08 - this is how postfix incrementation works, because I put here plus plus plus at the end of the my
67:15 - number, when system that out that into line, this would line of how this is executed, it first
67:21 - outputs the value of my number in the console, which is zero, and then it increments the value
67:26 - of my number by one. So this is postfix incrementation, you also will also have prefix
67:34 - incrementation. And this has a different effect. This first increments the the the value of my
67:41 - number, and then it returns the value of my number. So it's going to increment it by one,
67:47 - and it is going to return the value one. So it will be display one in the console. So now if I run
67:53 - this, I actually let me put some text to make it clear about what we are doing here. So let's put
68:01 - here prefix incrementation plus plus plus my number is okay, even though it's looking weird
68:18 - this. And let's add up here system that out that actually let's just do it like that. So this is
68:28 - prefix incrementation. Let's run this. As you can see, you have prefix incrementation, we have one.
68:39 - So this time, we didn't get like in the previous, like the like with the postfix incrementation
68:45 - zero, and then we need to go on the next line to add the system that out that print and to print
68:50 - the value because this increments the value of my number. And it also returns the value of my
68:56 - number directly here. And you can do the same thing using the subtraction operator. So you can
69:03 - type here minus minus, sorry, minus minus. So this is also prefix decrementation now. So let's put
69:12 - here four. So now if you run this, you'll see in the output, prefix incrementation and three.
69:20 - So we have prefix and incrementation and have three. And if I use postfix incrementation,
69:25 - so if I put here plus plus, you'll see in the output four, because that only increments the
69:34 - value, it prints the value and then it increments the value. So that's why I get here four.
69:40 - All right, so this is our discussion about operators. And there are other operators that
69:45 - you can use in Java. But in order to use those operators that are next, we need to first learn
69:54 - about if statements because they are used in conjunction with the if statements. And we're
70:01 - going to see what if statements are in the next videos. So before I end the video, let's clarify
70:06 - something because I did a mistake when I typed this code. And the mistake is that I, and also
70:13 - this is also a mistake because here it says prefix incrementation. But here we have postfix,
70:18 - we have the incrementation at the end. To be prefix, it should be at the start. So
70:25 - this is the first mistake. And the second mistake is that when I introduce the prefix decrementation,
70:32 - I didn't change the text to prefix decrementation, I kept the text incrementation,
70:39 - not decrementation, so decrementation. So this is what we should say. So let's press
70:48 - control D actually to type here prefix, also decrementation, but not prefix, but postfix,
71:01 - postfix decrementation. And let's change this to
71:15 - minus, minus, minus. And let's duplicate this line of code two times.
71:22 - And let's put here plus plus my number, and here
71:36 - plus plus. And I will change the text now to first to postfix. And this here, I'm going to
71:43 - change it to prefix. So this is what I should have typed for the first time, prefix. But now
71:51 - we should say incrementation here, incrementation, and here also incrementation.
72:09 - Right, so this is what I should have typed first, because in this way,
72:13 - this is the code, we have prefix decrementation, we have postfix decrementation, when at the end
72:20 - postfix incrementation, when it's at the end, and prefix incrementation when it's at the start.
72:26 - So now if you run this code, you'll get the corresponding answer. So you get prefix
72:33 - decrementation three, postfix decrementation three, postfix incrementation two, prefix
72:39 - incrementation and get four. So I'm going to end this video now and see you in the next video.
72:44 - So now it's time to look at the next operator that you can use in Java. But in order to use
72:49 - those operators, we need to first learn about the if statement. Therefore, I'm going to create
72:53 - a new project. And I will call this project control flow, you'll see immediately why.
73:01 - Java for the language for the build system IntelliJ, make sure to have jdk here. And last
73:07 - let this add sample code check because that is going to generate the main class and the main
73:12 - function. So click on create. We go inside the main class, we double click here, and we can
73:23 - delete this system data.print line. Hello world. Now, what is an if statement? Let's first talk
73:31 - about the flow of the program. So the flow of the program, let's press Ctrl Z actually, to show you.
73:43 - All right, so the flow of the flow of the program is linear. What that means is that the
73:49 - quantity executed line after line. So if I have multiple print lines here, all of them are going
73:57 - to be executed one after another. So if I run this, as you can see, all of them are executed
74:07 - one after another. And if you have more code here, thousands, hundreds of thousands of lines
74:14 - of code, if you put them in this way, so you don't use if statements, you don't use, as you'll see,
74:21 - loops and all of that, that code is going to be all the code is going to be executed line by line.
74:29 - But we, as programmers, we want to make the computer to make decisions. And with an if
74:35 - statement, what you can do is that you can break the flow of the program, which is linear,
74:40 - which is line by line. And you can say to the computer, hey, execute this particular section
74:47 - of code only if this condition is true. Otherwise, skip this particular section of code. So this is
74:54 - what you can do with any statement, you can impose a condition and based on that condition,
75:02 - some particular section of code is going to be either executed, or it's going to be skipped.
75:06 - So let's see how we can do that. So let's delete all of those systems that we have here.
75:11 - Let's declare a variable int, number, and let's assign 10 to it, semicolon. Now to use an if
75:24 - statement, we simply type here if, so we have if and put a space. And now it's expecting us to put
75:32 - opening parenthesis and closing parenthesis. But when you when you put opening parenthesis,
75:37 - the closing parenthesis is going to be is going to be added automatically. So if I
75:42 - press, if I put the opening parenthesis, the right parenthesis, as you can see,
75:47 - was automatically now inside the parenthesis, we define our condition. So what what condition
75:55 - we want to evaluate here. So I'm going to type here if number, so the variable that we define
76:00 - above, and now we're going to use an operator called equal to so when I put equals equals, so two
76:07 - equals. So this first equal is called the assignment operator, because what he's doing is assigning
76:15 - what is on the right to the variable on the left. And this is called equal the equal to operator
76:23 - because this what he's doing is checking what is let me put here, let's say 10. What this equals
76:30 - to operator is doing is checking to see if the content of the if the content on the left is the
76:39 - same as the content on the right. So it's checking to see if this is equal to this, this is what it's
76:45 - basically doing. And if that is correct, I'm going to put curly braces. And when I when I put left
76:51 - curly brace, and I press center, the right curly brace is going to be added automatically. So if
76:57 - I press enter, as you can see on the line seven, I think, yes, on the line seven, let me check.
77:05 - Yes, on the line seven, this right curly brace was at the automatically because I press enter.
77:11 - And now what we can do here, we can say we can and I discovered what is the shortcut for
77:18 - system dot out dot print line. So you don't need to type that all the time, you can simply types
77:23 - s o t. And you select this one, as you can see, you have s o t and select this one, which says
77:31 - print a string to system dot out. So let's select that. And we are going to see, we are going to say
77:39 - they are equal. So let's run this code. So we have the condition if the condition is true,
77:51 - the code which is inside the curly braces is going to be executed. So we have they are equal.
77:57 - But let's change this variable to something else. Let's change it to age. So let's go three factor
78:03 - age. Let's change the variable. And as you can see, it's changed every everywhere where it's used.
78:10 - So I'm gonna type here, age, and I'm going to press enter. Now I'm going to put for the age,
78:16 - let's say 18. And now I'm going to use another operator, which is greater than or equal to some
78:25 - amount greater than or equal to. So if age is greater than or yes, if age is greater than or
78:34 - equal to than 80, I'm going to output in the console, you can vote, you can vote. And let's
78:45 - add another print line down here. Please put an x in the bar lot. All right. Now, what we are
79:02 - doing here again, we check in to see if this condition inside the parenthesis it's true,
79:08 - if it's true, the code which is inside the curly braces of the wave. So all of this code is going
79:14 - to be executed. So if I run this now, because we are checking to see if age is greater than
79:20 - or equal to, we get true back. And we get true because the variable age has the value 18.
79:33 - And we also get true because here we are checking if is greater than or equal to 18. So it's not
79:41 - greater than 18, our age, because it has 18, but it's equal to 18. So this is what this operator
79:47 - is checking. So let's change the condition to let's change the value of the variable to 17 to
79:54 - see what happens. So now if I run this code, now our code is not executed because the condition is
80:03 - false. And the code of the if, the block of the if, if you want, the block of code of the if,
80:11 - which is represented by the curly braces, it's kept, it's not executed. But what we can do,
80:18 - we can add another thing called else. So I can type here else curly braces, left curly brace and
80:27 - press enter. And it's going to add the right curly brace on the line 10. And I can type here s o s o
80:34 - s o t. So the shortcut, let's say you can't vote, please come. Let's put it on the next line and
80:49 - to put something on the next slide, you put backslash n. And I will type here, please come in. And
80:58 - I'm going to put plus. And I will say 18. Let's put in parentheses, 18 minus age, and that is going
81:17 - to give us what, what age this person which tried to vote has. So if you run this, it says we can,
81:29 - you can vote. And then it says, please come back in. And let's put here's here's a lot to put the
81:35 - plus. And let's put years. And let's also put here, please with an upper case letter. So let's
81:45 - run this again. So we get you can vote, please come in one years. And let's put here a space
81:55 - one because I don't like how it looks here. So let's run this again. Okay, so we get we can you
82:06 - can vote, please come back in one years. And if I change this to, let's say 12. And if I run this,
82:14 - now the condition of the if is going to be again, false, and it's going to execute the else part,
82:20 - the else part is always executed when the if condition is false. And as you'll see,
82:26 - when the if conditions are false, because, as you'll see in the next video, we can chain more than
82:33 - one if in, you know, our program. So you get we can you can vote, please come back in six years.
82:41 - And this is correct, because he has 12 years and it needs another six years to wait in order to be
82:50 - able to vote. So this is what a new statement is, you can break the flow of the program. And now we
82:57 - can make the computer to make decisions based on conditions based on if something is true or
83:04 - something is not true. And this is inherently very powerful. So I will end this video here. And in
83:12 - the next video, we're gonna see how we can chain more ifs in our program. So see you in the next
83:18 - video. Now it's time to see how we can add else if statements to check for more than one condition.
83:24 - And first, I will delete this code because I don't need this code. I will declare another
83:28 - variable of type int is going to be called the year. And it's going to have the value of 2019.
83:35 - I'm going to put semicolon. And down here, I will type if parenthesis year, so our variable equals
83:44 - equals. So you never check if it's equal to 2019. We put left curly brace and press enter and the
83:53 - right curly brace was automatically. Next, I will type so it so the shortcut for system.out.printline
84:02 - is oot. And I will type here, the year is I'm going to put equals. And here I will type plus
84:15 - plus. And our variable here, which is declared above. And now I will use an else if to check
84:23 - for another condition. So I'll type here else if and you can type, you can type yourself else if
84:30 - or you can press this and it will add the else if with the curly braces and with the parenthesis.
84:36 - So if I press on that, as you can see it added the parenthesis, we're going to put our condition
84:42 - inside the parenthesis and also added the curly braces, the block of the else if. And here we're
84:50 - going to check for year equals equals to 2020. So 2020, we're going to check there.
85:00 - And if that is true, I'm going to output in the console the year is equals
85:09 - and I'm going to put plus year. Else we're going to type sot also and we're going to say
85:22 - all conditions failed because the else is going to be called only if all the conditions from above
85:30 - are going to fail. So I'm going to type all conditions failed. We're going to type here
85:35 - failed. Now if you run this, we get the year is 2019 because it first checked here if the year
85:47 - it's equal to 2019 and it's true because we put it to 2019 and it executed the block of code of
85:56 - the if which is this block of code and it outputted in the console this text by the
86:03 - system that output print line. If I change now the value to 2020, look what happens.
86:10 - 20 let's put there. Now if I run this,
86:20 - we get the year is 2019 2020 because now this condition or the condition of the else if
86:28 - it's evaluated to true and consequently the code of the block of the else if is
86:33 - executed, which is to print the output in the console. The year is 2020 and let's put a space
86:40 - here also here. And we can add another else if so I can go here. I can type else if
86:54 - and we put parenthesis and we push that down. So I'm going to press enter. Actually let's put curly
87:03 - braces and now I'm going to put that down there and I'll put here curly braces and you can put
87:13 - the else up here and now you can put another condition. So I can type here year equals equals
87:21 - let's say 2020 and if that is correct I'm going to type sout and the year the year is
87:35 - let's say equals space plus year and now if you run this
87:43 - we get in the output the year is to 2020 because this condition is evaluated to true
87:53 - and the code inside the block of the else of this of this else if is executed.
87:59 - But if I change this to 2020, if I run this now this will evaluate to true this condition
88:08 - and the condition of the second else if and it's going to output the code which is inside
88:14 - the curly braces of the else if of this particular else if that is here and we can go even further
88:22 - and you can put another else if and another else if there is not a limit to how many else if you
88:29 - can put and we can also check if a value is not equal to something. So we can check if year let's
88:37 - say that I want to check if year and now I'll introduce another parameter called the logical
88:47 - not operator and what the logical not operator is doing is switching the value of a variable from
88:54 - false to true and from true to false and when you want to check if something is not equal to
89:01 - something we put exclamation mark and equals. So now we're checking here if year is not equal
89:09 - to 2019 and that is going to be true because the year is 2022. So all right so we get in the output
89:16 - the year is 2022 and we get this because this condition evaluates to true our year is not equal
89:24 - to 2022 is not equal to 2019 and it's outputting the which is now the value of the year is 22 and
89:34 - it's outputting in the console the it's executing the block of code of the if and it's outputting
89:42 - in the console the year is 2022. This is why we get here 2022 because this condition it's true
89:50 - it's true our two operands year and 2019 are not equal and this is true and now with this I'm
89:58 - going to end our discussion about else if and you can put as many else if you wish and let me show
90:07 - you first now how we can use the logical not operator to switch a value from true to false
90:12 - and from false to true. So I'll declare here a variable called it's going to be a boolean so
90:18 - I type boolean and it's going to be called is active and I'm going to assign true to it
90:27 - I'm going to put semicolon and down down here I will type if is active
90:33 - I'm going to type S-O-T I'm going to say the user is active else I'm going to say the user is not
90:47 - active so I'm going to say S-O-T again quotation marks the user is not active now if you run this
91:02 - this will evaluate to true because this is equivalent to typing is active equals equals true
91:10 - and it's redundant you don't need to put it's active equals equal true because it's active
91:16 - already has the value true in it so it's implicit you don't need to type this in this explicit
91:21 - expanded form so because if you have a rover I think it's saying that it's
91:28 - equal to equal active it's saying it can be simplified to its active so let's simplify to
91:33 - its active and now if you run this you will get the user is active but look what what can I do
91:43 - I can put here if the user is not active and now the value of the is active is going to be switched
91:50 - from true now we have true is going to be switched from true to false now so now if I run this we get
91:59 - the user is not active because now it changed the value from true to false and generally you can
92:05 - put the logical not operator in front of any expression you want so if you have here a variable
92:12 - let's type here int let's say int my number let's say equals to 10 semicolon and if you put the
92:23 - logical not operator in front of any any expression and an expression as I said is something which
92:31 - returns a thing and if you put the logical not operator in front of any expression it will switch
92:37 - the value from true to false so if I type here if my number so if my number let's say is greater
92:47 - than or equal to 10 and it's true it's 10 let's actually put a bigger number to make it more clear
92:53 - so we're going to put 20 and because I put the logical not operator in front and I will put
92:59 - parentheses around the expression now this this condition is true so let's first let's first
93:09 - output the code without the without the logical not operator so let's run this
93:18 - and we get the user is active so let's put the user here because this condition is true
93:24 - but look what happens if I put this in parentheses so we surround our expression with parentheses
93:32 - to treat it like a single unit and we put a logical not operator in front of the parentheses
93:39 - of the my number but inside the parentheses of the if so I'm going to put the logical not operator
93:44 - and now I will run this and now if you run this as you'll see it will say the user is not active
93:51 - even though my number is greater than 10 is true but it's converted from true to false so this
94:01 - is what the logical not operator is doing so I think I'm going to end this video now and see you
94:07 - in the next video now it's time to see how we can nest an if inside an if or an if inside an else
94:13 - and I am particularly interested now in the else part because I want to have the output if the age
94:20 - is let's say 17 and 18 minus 17 is going to be one to say please come back in one year not one
94:27 - year and to do that I'm going to add another if here so I'm going to put if parentheses now the
94:33 - condition if 18 minus age equals equals one so if 18 minus age equals equals one then it's going
94:46 - to say please come back in one year all right so let's put the curly bases and now we have this
94:53 - inside the curly brace of date and let's change this from years to year else it is going to output
95:00 - like the previous like previously with the text years so let's copy this and let's paste it here
95:08 - now if you run this code now age is 12 so it will say please come back in and let's put here years
95:15 - because this will be executed if the age is if it if it is not one year until it can vote
95:25 - so it says please come back in six years and if I put 17 here and if I run this code
95:32 - it says please come let's let's put here back please come
95:49 - okay let's run this again but now our logic is working and you nested now as you can see and
95:56 - inside the else we nested another if and then else so this is how you can nest if analysis
96:03 - inside the elses or ifs so I'm going to end this video and see you in the next video and let's put
96:08 - a space here so let's run this okay so now it looks more bitter please come back in one year
96:20 - is saying now so now this condition is true it's executing the else part and we have our output so
96:27 - I'm going to end this video now and see you in the next video now it's time to look at the logical
96:31 - and and the logical or operator but first let me show you the less than or equal to operator so
96:36 - I will delete the logical not operator from here and I will delete the parenthesis around the
96:41 - expression and I will change now the value here to nine for my number variable and now I'm going
96:48 - to change the operator here to less than or equal to so we put here less than or equal to
96:54 - so now if you run this
96:58 - we get in the output user's octave because my number has a value nine which is less than 10
97:03 - but if I put 10 it will also be true because we're checking if it's less than or equal to
97:09 - so we get the user is octave but if I put 12 here and I run this
97:20 - now we get the user is not actually because my number is not less than or equal to 10
97:25 - now let's delete this and let's keep our variables the only thing I'm going to
97:29 - change the name of this variable to score all type score here I'll put equal to 100
97:35 - now we will start with the logical end operator and let's say that I want to check two things
97:44 - I want to check if a user is active and I want to check also if the user has the score
97:49 - greater than or equal to 100 and if that is the case so if those conditions are true
97:56 - I want to have the entire expression to return true and I will open the next level in a game
98:02 - let's say so I'll type here if parenthesis and the first condition score is greater than or equal to
98:11 - 100 now to use the logical end operator we put 2 m percent science and then put our second
98:19 - condition if it's active equals equal true but you know that this is redundant from our previous
98:25 - video now what the logical end operator is doing so let's put the curly braces so I'm going to go
98:32 - left curly brace and enter to other right curly brace now what the logical end operator is doing
98:40 - is checking to see if what you have on the left the condition that we have on the left is true
98:46 - if and if the condition that is on the right is true only then the entire expression is going to
98:53 - return true so again the logical end operator will will only return true if both conditions
99:01 - are true respectively if the score is greater than 100 and this activity equals true and this
99:08 - can be typed like this because it's redundant so now I will add the sout and I will say you opened
99:17 - the next level now if I run this you get you get you I should say opened here you opened
99:35 - so now if I run this you get you open the next level because both conditions are true but if
99:48 - one of the condition is false it will the entire expression is going to return false so if I type
99:53 - for the it's active false let's now add an else here let's put curly brace press enter sout
99:59 - so let's type sout and I will type you are at the same level so now if you run this
100:20 - now the else part is executed because both conditions have to be true in order for the
100:26 - entire expression to return true this is how the logical end operator works and because
100:33 - its active is false it executed the else part and output in the console you are at the same level
100:40 - and if you want to make more clear which condition where is which expression is
100:49 - what are the expressions who can put parenthesis around the expressions like this
100:52 - but I think it's better to not have them in this case in this particular case
101:00 - now I will end the video and in the next video I'll introduce the logical or operator
101:08 - now it's time to look at the logical or operator and the logical or operator returns true if at
101:13 - least one of the expression is true so let's delete this code because I don't need this code
101:19 - I'll declare two new variables int num1 in a real app you should use more
101:24 - descriptive names I'm going to sign in five I'm going to put semicolon enter int num2
101:31 - and I'll put equals to 204 semicolon then I will type here if num1 is greater than zero
101:50 - now we're going to use the logical or operator and to use the logical operator
101:55 - we put two vertical lines or in our second condition num2 also greater than zero
102:07 - curly braces left curly brace and press enter and the right curly brace is going to be added
102:11 - automatically I will I will type sout the shortcut for system.out.print line and I will say
102:20 - the condition is true I will also add an else here
102:32 - let curly brace opening curly brace and enter it and to add the right curly brace on line 10
102:38 - and I'll type sout here and I'll say all conditions failed
102:46 - now if around this
102:52 - as I said the logical or operator returns true as if at least one of the expression is true
102:57 - and no and we have two expressions num1 greater than zero and num2 greater than zero
103:04 - and we get the condition is true the condition is true so if I change this to minus four now
103:11 - so now num1 it's not greater than zero but num2 is greater than zero because it has a
103:16 - value five the entire expression is going to return true so if I run this
103:26 - we get the condition is true even though our second expression num2 greater than zero
103:32 - it's false because the left expression num1 greater than zero is true the entire expression
103:38 - is evaluated to true but if both expressions or in maybe you have more than one more than two
103:46 - expressions if all the expressions are false then the entire expression is going to be false so now
103:55 - because I put here minus five and minus four and now we are checking if num1 is greater than zero
104:01 - and num2 which also checking that if is greater than zero because both now are having the value
104:08 - smaller than zero that is going to return false and it's going to execute the else part
104:15 - so we get all conditions failed so this is how you can use the logical or
104:19 - operator so now if I reverse this to five and if I run this
104:24 - we get the condition is true because at least one of the expression is true so again with the
104:33 - logical or operator if at least one of the expressions no matter how many expressions
104:38 - you have in order using the or operator if at least one is true the entire expression
104:44 - is going to be true and for the for the entire expression to be false it needs to be all the
104:52 - conditions have to be false so I'm going to end this video now see you in the next video
104:58 - now it's time to look at the next control flow statement that you can use in java and that is
105:01 - a switch statement and first I'll declare a variable called time and I will assign 10 to it
105:09 - then I'm going to type here the down here I'll type switch and in the parenthesis we're going
105:14 - to put our variable that you want to test that you want to test so I'm going to put time here
105:19 - here we put curly braces press enter to add the right curly brace on line seven
105:25 - and now we're going to we're going to test our case so switch time I'm going to type here case
105:31 - and now the condition let's say time 10 and then then we put a colon and after colon we
105:38 - put the code that you want to have executed so I'm going to put sout and we're going to say
105:43 - the time is plus time and we can also post something else here let's put let's say
106:02 - plus quotation marks backslash n I'm going to say
106:10 - time for coffee all right
106:22 - all right so after we we put our code we put break so we put break because if you don't put
106:29 - break let me show you so I'm going to go back I'm going to put another another case here let's
106:37 - say case let's say 12 and we're going to add also sout and we're going to say the
106:51 - time is plus time plus time and plus backslash n
107:01 - time for a run all right if I don't put break here look what happens so what this switch
107:14 - system will do will test this value against the branches that we have here so it will test to see
107:20 - if the value of time is equal either to 10 or to 12 if it's if it's equal to 10 then it's going
107:27 - to execute the code which comes below of the colon here so if I run this but without break
107:34 - look what happens without break without break the code is executed all the code is executed
107:47 - this is this is why you need to use break because when you said when you say break you basically
107:52 - stop the switch at one branch so put break and here also put break as you saw because if you
108:01 - don't put break it will execute all the branches so put break and it will only execute one branch
108:07 - so now if you run this
108:14 - just the time is 10 time for a coffee so now it's not executed also the second branch like
108:20 - it did previously so let me delete me let me delete this to show you so now without the break
108:29 - all the all the cases are executed one after another so we need to put break here
108:36 - in order for that to not happen break and here also break
108:41 - break all right let's press ctrl i'll tell format the code and you can have as many cases as you
108:53 - want so let's put another case here let's say case let's say eight let's put seven case seven
109:05 - one when i put sout sout the time is plus time
109:20 - plus quotation marks forward slash n is time to wake up
109:28 - up so now if you run this
109:38 - we get the time is 10 time for a coffee because it tested our variable here against this branch
109:44 - and it found to be true but if i change this now to seven if you run this
109:51 - you get the time is seven it's time to wake up and you can also have a default
110:00 - case so i can go here and the default is going to be executed all the cases from above are not
110:06 - true so you put default i'm going to type sout i'm going to say time to relax time to relax
110:16 - so if i put here let's say two and i run this now all the cases are going to be
110:30 - not one one one not not one of them is going to be true so it's going to execute the default
110:35 - and you can also put here a break too so this is how you can use the switch statement
110:40 - so let's make our switch states more flexible by getting the input from the user instead of
110:46 - typing here the literal the number literally typing the number here and to do that we need to
110:52 - use a scanner so i will type here private static actually i'm uh private is also an access
111:04 - modifier but we didn't talked about access modifier so let's let's use public because
111:08 - at least we talked a little bit about public so private sorry public static
111:17 - and we will see what static is in the future videos scanner we type here scanner
111:24 - scanner we will see what this in the future videos but basically with this we can get the
111:29 - input from the user we're going to put equals new scanner and inside the parameter we're going to
111:35 - type system dot in now what i will do here instead of putting two i will put here
111:46 - scanner dot next int and now dot this line of code that we have here let's put semicolon here
111:55 - semicolon all right so now this line of code that we have here is going to
112:01 - wait now for the input in the console here and it's going to take that input which is going to
112:07 - be an integer and it's going to put it inside our variable time and then we're going to test
112:12 - that that value against our branches that we have here all right so let's run our code
112:19 - to see what happens so let's run this code
112:21 - and to make it more interesting let's put also some some some text to say to the user to introduce
112:37 - to to input some to input a number
112:41 - all right so let's stop this let's close the actually let's put a sld here
112:50 - please or we're going to say what time is or it is what time it is so now if you run this
113:12 - this is what time it is and now we can pass something here so if i put here too
113:16 - it says time to relax so it's executing the default branch and if i run this again
113:28 - and again it's asking us what time it is and now we can pass input from the keyboard as you can
113:33 - see using this scanner that we have here scanner.next hint and by declaring here above this thing
113:39 - we're going to see what all of this is in future videos so i'm going to talk about classes and
113:43 - objects so now here we're going to say let's say 10 or let's put seven because we have seven here
113:51 - for the case but i didn't put a break there sorry let's put break otherwise it'll break so now if
113:59 - you run this again let's run this again what time it is let's put seven and again the time is seven
114:11 - it's time to to wake up and i don't know why it opened the console again so let's run this again
114:25 - what time it is let's put seven and again the time is seven it's time to wake up and
114:29 - then it says process finish with x equals zero and that means that the program successfully
114:36 - finished all the execution so this is how you can use a switch statement you can have as many
114:42 - switches you can have as many cases as you want here and it's important not to forget to put the
114:48 - break after you put the code that you because here we can have you can have a function which
114:54 - can do something so we can call a function here and so on but i keep it simple i just outputted
114:59 - something in the console so now i'm going to end this video and and i'll see you in the next video
115:07 - and you also see in this video you also saw in this video how you can get input from the user
115:12 - using the scanner and the scanner that next int to get integers so i'll end the video now and see
115:19 - you in the next video all right so there is one more thing that you can do with the switch statement
115:23 - that is that you can replace this switch statement with an enhanced switch statement so if you hover
115:30 - over the switch as you can see it's colored in this yellow color and if you hover over it says
115:34 - switch statement can be replaced with an enhanced switch so click here or it says replace with
115:39 - enhanced switch statement to see what happens so now we have our code written like this so we have
115:45 - case and i have the case then i have this arrow and the code which is going to be executed now
115:51 - if you run this code everything will work the same what time it is let's put seven
116:01 - the time is seven it's time to wake up as you can see everything works fine and you can also
116:04 - put curly braces around the code that you want to have so you can put opening curly brace here
116:12 - and closing curly brace and you don't need to put the break the break keyword and by this way
116:20 - by using the enhanced switch statement so this is very interesting let's put curly braces here also
116:37 - and here you can also put curly braces and with the enhanced enhanced switch statement you should
116:43 - use curly braces when you have multiple lines of code in our case we only have one line of code
116:48 - but if you have more lines of code here more code here if you have then you should use curly braces
116:55 - so this is how you can use the switch statement and as you can see it's similar to the classic
117:01 - switch statements the only difference is that you have case and it helps the case so you have the
117:07 - condition and then we have this arrow which basically says hey if this case if the case is
117:13 - 10 this arrow is saying hey execute the code inside the curly braces here so now i'm going
117:19 - to end this video and see you in the next video now it's time to start a discussion about loops
117:24 - and loops are used when you want to execute a particular section of code repeatedly and we're
117:29 - going to start with the first loop and that is the for loop so i'll go down here i'll type for
117:35 - and while i'm typing intelligence giving us some suggestions and we choose the first one
117:39 - and if you press enter it will add the parenthesis automatically for you but if you want to type
117:44 - yourself the parenthesis just put opening parenthesis and the closing parent is going
117:47 - to be added automatically so i'm going to put opening parenthesis now inside the parenthesis
117:53 - i'm going to type int i so we declare a variable now and we're going to assign zero to it so this
118:01 - is going to be the starting value of i it's going to be zero then we're going to put our condition
118:07 - we're going to put i less than or equal to 10 so this loop is going to be executed 10 times
118:14 - one is going to reach 10 one is going to reach 11 is going to be is going to stop so i'm going
118:20 - to put again semicolon and i'm going to put here because if you hover over it says condition i less
118:28 - than equal to 10 is always true and in order for that condition to be to be false we need to
118:33 - increment the i so i'm going to type here i plus plus so we need to increment the i i teach
118:40 - iterations so we want to put left curly brace and right curly brace now inside the curly braces
118:46 - we're going to put our code that we want to have executed 10 times so i'm going to type here
118:53 - s saut so and i'm going to put here i equals and we're going to refer our i for from our loop plus
119:03 - i'm going to put i here now if you run this we get in the in the console output that i is zero i
119:14 - or equals to one i equal to three because this now is executing the code inside the curly braces 10
119:21 - times when it reaches 10 when it reaches when the value is incremented to 11 this condition is going
119:28 - to be false and the loop is going to stop so this loop will execute for a specific number of times
119:35 - so if i change here the condition to let's say 100 it will execute the code inside the curly
119:42 - braces 100 times so if i run this now we get 100 times our loop so this is what we can do so you
119:51 - have for the declaration the starting value then we have the condition and i plus plus and we can
119:57 - go even in the opposite order so i can put here i equals to 100 while i is less than or in here
120:05 - i can put while i is greater than or equal to let's say zero or let's put one or actually let's
120:17 - put zero and now we can decrement i so i can put here my i minus minus so now if you run this
120:29 - now you will see backwards the output so get
120:34 - 199 because we're starting with 100 we put the condition while i is greater than or equal to zero
120:42 - i minus minus so i teach iteration is going to uh subtract one for from i so it's going to be 99
120:48 - 99 98 97 96 and so on until it reaches until it reaches zero and then it decrements again
120:56 - and the i is going to be probably minus one and it will this condition is going to be false
121:02 - and it's going to exit the loop also you can use let's press ctrl alt l you can use if statements
121:11 - here so because i introduced now something called break so instead let's say that for whatever
121:16 - reason if let's say if i equals equals 50 i want to stop this loop how how how could i stop this
121:26 - loop so to stop the loop you just simply put here break and break is gonna as the name implies
121:34 - it's gonna stop the loop so when i is gonna be equal to 50 we're gonna put break and our
121:44 - our loop is gonna stop so if we run this get 51 and then it stop because when it reaches
121:52 - it reaches it reaches 50 it stops and you have 51 because this is a you have decrementation
121:59 - here let's change it to let's change it to zero let's change the condition to less than
122:10 - or equal to zero and i plus plus so if you run this
122:18 - oh sorry it should be so sorry it should be here let's say 50
122:36 - so if you run this
122:40 - we get 49 and 50 is not pretty because when it reaches 50 it incremented the i to 50 but
122:46 - uh in i it will be 50 but it will not execute this sout to output i in the console so this
122:55 - how you can use the break keyword in our loop to stop the loop it can also use continue
123:00 - and continue is going to skip the code which comes after the continue so if i put here continue
123:07 - look what happens if i run this we have the same output because continue what it's going to do
123:14 - is going to skip all the code which which comes after the so whatever code comes after the
123:21 - continue keyword so the code that is down here is not going to be executed this what continue does
123:27 - and to show you more clearly how continue keyword works in comparison with the break keyword i'm
123:32 - going to change the condition if i equals equals to 50 because now if you look at the output is
123:37 - the same output like like when you had the break here so if i put break here and if you run this
123:47 - we have the same output so it's not illustrating correctly what is the difference between
123:53 - continuing keyword continue keyword and the break here so i'm going to change this condition now
123:58 - from i equals equals to 50 to i greater than equal to 30 and i less than or equal to 50
124:10 - and i want to change this to 100 so now if i run this
124:15 - we get we get our numbers and when it reaches 30 as you can see it's skipping all the numbers
124:28 - and then it continues from the 50 because this is the condition that we're going to put here
124:32 - and now this illustrates better how continue works so continue continue is skipping the code
124:38 - it's not stopping the loop like break the lucky like break does so i'm going to end this video
124:46 - now and see you in the next video now it's time to look at the next loop that you can use in
124:51 - java and that is the while loop so i'll delete the for loop because i don't need the for loop
124:56 - and the while loop is used in situations where you don't know for how many times you want to loop
125:03 - but you know that you want to loop until a certain condition is true for example let's say that you
125:07 - want to display a dialogue while the user is typing something in an input so in those scenarios
125:16 - you use the while loop now to use a while loop just type while so we can press enter or you can
125:24 - type the word yourself and you put parenthesis and inside the parenthesis we put our condition
125:31 - and then put curly braces and decide the curly braces we're going to put the code which is
125:36 - going to be executed while the condition is true so as long as this condition is true inside the
125:45 - parenthesis the code inside the curly brace is going to be executed so let's say that i declare
125:52 - here a variable called let's call it in let's it's going to be of type p and it's going to be called
126:01 - number i'm going to put equals and i'm going to put zero there semicolon and here we can
126:10 - we can put the condition while number is less than or equal to to 10 when i execute the code
126:20 - and coincide inside the curly braces but now we need to increment the the number because otherwise
126:27 - this will be generate an infinite loop because this condition is always will always be true
126:32 - because you have zero and here we check to see if number is less than 10 and we are not
126:37 - incrementing the number at each iteration so now if you run this like this
126:48 - you get you get not nothing in the output but the the console is still running because
126:55 - now we have an infinite loop so let's let's close this by by clicking on the square
127:04 - red button so i'm going to hide the console now so it's very important to make the condition false
127:11 - and to make the condition false we're going to put number plus plus number plus plus here
127:16 - semicolon so now if you run this we get nothing because you don't output nothing but now we don't
127:28 - get the infinite loop so down here i'll type sout and i'm going to print our number so now if i run
127:35 - this we get one two three four five six seven nine ten and get also 11 now you may be wondering why
127:43 - you get 11 because the condition says that the number has to be less than or equal to 10 but
127:49 - we've also gotten the output 11 this is because when when the number have has the the value 10
127:56 - you check to see if 10 is less than or equal to 10 and that was true and because of that now the
128:04 - value as i said is 10 it incremented the value so it incremented and now the value is 11 and then
128:12 - it output the value in the console this we get here 11 then it goes to the condition again it
128:18 - checks to see if 11 is less or less than or equal to 10 then that was false and because of that
128:24 - you don't see after 11 nothing the application is finished so this is the while loop and we're going
128:31 - to use the while loop a lot in our code there is also another loop called the do while loop and
128:38 - the do while loop is going to execute a particular section of code even though the first
128:48 - even though if let's say the the condition is false it will execute the code at least once
128:53 - and it will execute the code at least once even though if the condition is false so
129:01 - what i can do i can delete the while loop let's delete the while loop and let's type
129:05 - do we put do and we have curly braces and here we put while and here we put our condition let's say
129:16 - while number is greater than or equal to two let's say one or zero let's say
129:30 - let's put one and now this this here is false but but because now we're using the do while
129:40 - loop the code inside the do so let's put s out with here and let's print number now
129:47 - because you're using the do while loop the code is going to be executed at least once and then
129:53 - it's going to check the condition and if the condition is true it will execute again but
129:58 - you have this particular option with the do while that the code is executed at least once irrespective
130:07 - of the condition that is here so if i run this normally i should be able to output nothing but
130:14 - because you're using the do while loop we get zero in the output because if you press ctrl z
130:19 - and we we put the while loop and put here while loop is let's say
130:32 - less than or equal to okay so let's say while the the number is greater than or equal to one let's
130:43 - say greater than or equal to one now because this the value of the number is zero and here we check
130:50 - in the series if number is greater or equal to one this is not going to be executed so if you run
130:56 - this you don't get nothing in the output but with a do while loop so if i type here do and here
131:05 - at the end of the right curly brace we type while and we put number greater than or equal to one
131:14 - and put s o t here number now this is going to output at least once the the value of the
131:21 - number because i forgot the semicolon there so let's put the semicolon
131:25 - so let's put semicolon and let's run our code again
131:39 - let's close this and let's run our code again all right so we have
131:43 - let's run it again because i click on this debug so we get zero because the do while loop it all
131:49 - executes what is inside the block of the do at least once irrespective of the condition but what
131:57 - what we can do is we can we can also make the condition to be true by incrementing our number
132:04 - so we can put here while and i can put here number plus plus semicolon and now
132:12 - uh let's put while number is greater than equal to or let's put less than or let's put greater
132:21 - than or equal to um let's put less than or equal to let's say 10 so now if i run this
132:35 - now we get our 10 numbers out within console but again previously when i had this
132:39 - so let's let's control z a few times even though the condition is false the code is going to be
132:46 - executed at least once so those are the while and the do while loops that you can use in uh
132:51 - java and you also you can use the do while and with the while the continue and break keywords
132:59 - in the same way you use them uh inside the the for loop so you can use the break and continue
133:05 - keywords also in the while and do while loop the break to stop the loop and the continue to skip
133:11 - a particular section of code so now i'm going to end this video and see you in the next video
133:17 - now it's time to start a discussion about functions but first let's create a new project
133:21 - i'm going to call it functions it will be in pascal case without spaces for the language
133:27 - select java for the build system select intelj make sure to have the jdk selected here the version
133:33 - 17 and also check this box which says add simple code because that is going to generate the main
133:38 - class and the main function for us so i'm going to click on create now to create the project
133:44 - all right now our project was created now let's open the main class so double click on the
133:48 - main here inside of src folder then let's bring this down and now let's talk about functions
133:57 - so what are functions functions are a line or lines of code which are grouped together to do
134:05 - a specific task and so far in our videos we already dealt with functions the main functions
134:12 - as i said in a previous video is a function for which the java compiler when it tries to run our
134:21 - code it's looking to for this function in order to be able to run our code the print line function
134:26 - that is outputting something in the console it's also a function which takes some input and it
134:31 - outputs the input in the console so we've already dealt with functions now let's see how we can
134:39 - create our own functions and to create our own functions i'm going to go outside the parenthesis
134:45 - of the main function and i will type public so first we type this public this is an access modifier
134:52 - here next we type static i'll i will explain to you what static is in the future videos next we
135:01 - type void and void is the return type of the functions because as you'll see functions can
135:07 - return something and void means that you don't return nothing next we need to give a name to
135:12 - our function so let's call it say hello and this function is going to say hello next we need to put
135:20 - parenthesis as you can see on on the top both our functions have parenthesis and when you declare a
135:28 - function we need to put parenthesis we need to parenthesis because inside the parenthesis
135:33 - you can define parameters which can receive a value when you call the function but now we're
135:39 - not we're going to declare any parameter for now and then we put curly braces so put opening curly
135:45 - brace and the right curly brace so that did automatically and i press enter now what i can
135:50 - do inside the no have a function and it's called say hello what i can do now i can type here
135:58 - sout so our shortcut and i can type here say hello let's say hello alex
136:08 - so let's delete now this code because you don't need this code and let's run our code to see what
136:13 - happens
136:23 - all right so the console open but you don't have nothing in the output that is because if you look
136:27 - at our function say hello as you can see it's gray out and if you hover over it says
136:33 - method because functions in java are also called methods and the reason is because
136:40 - uh they are part of our class but we're gonna see we're gonna talk about this when we're gonna talk
136:46 - about classes and objects now it says the method or the function say hello is never used in order
136:52 - for our program to execute this hey this say hello function we need to call the say hello function
137:01 - from our main function because as i said the main function is the entry point so when the java
137:07 - compiler runs our code it's executing the main function and if the main function has code in it
137:13 - which needs to be executed it which needs to be executed it will execute that code if not it will
137:19 - just out it will just finish the program without doing anything without doing nothing because
137:26 - we didn't call we didn't type any code here so now what i can do here i can type say hello
137:31 - and while i am typing as you can see we have suggestions we have first sout our shortcut
137:38 - and we have then m and m stands for method or or let's call it methods from now on so our method
137:47 - say hello so you can you can click on this one and now it's going to be called from our main
137:53 - function so let's let's select that and let's press enter now what we're doing is we are calling the
138:01 - say hello function inside the main function so now when the compiler is going to run our code
138:07 - it will execute the code inside the main function which is to call the say hello function that is
138:12 - defined here and you also have this one usage and what this basically means is that it's only
138:19 - you it's only used here this way i think this this is what one usage is saying now if you run this
138:34 - get hello alex and we can change this text you can change to hello you wanna so now if you run this
138:43 - because now when this code is executed the main function is called and the code inside
138:49 - the main function is called and inside the main function we have another function say hello
138:54 - and this function is called and the code inside the say hello function is executed which is say
139:00 - you wanna so let's change this back to say hello alex now what we can also do we can call our
139:08 - function multiple times so i can type here control d a few times now if i run this
139:13 - we get hello alex multiple times so as you can see what functions allows us to do is to divide
139:24 - our code into chunks of code which are reusable so they can be called in many places in different
139:32 - places and in different scenarios so this this this is how this is basically how you can write
139:40 - a program because if you will just type all your code here do not make any sense you have you have
139:46 - to have some kind of structure and we have that structure using functions and if statements and
139:51 - so on now let's run this again now the problem now with the say hello function is that it's
140:01 - already saying hello alex it will never output anything else only if we we change this text
140:08 - it will display something else but as i said function like you can see here this function
140:15 - has a parameter this is a parameter defined here and you can also define parameters for our own
140:21 - functions so i can type here string so the type of the parameter let's call it name now when as
140:32 - you can see it immediately have added this underline here we will see immediately why now what we did
140:38 - here we define a parameter name so when we call this function we need to pass a value to this
140:44 - function for the name we need to pass an actual value and we're going to use this value inside
140:50 - our system.out.print line so instead of uh instead of say hello alex is going to say
140:57 - plus and i'm going to type name i'm going to put another plus quotation marks and the exclamation
141:05 - mark now what this is going to do when you call the say hello function it will it will receive
141:13 - a value for the parameter name and then it's going to say hello and the value which is passed
141:18 - to the parameter name so if i put here now now if you hover over the parentheses it says
141:25 - expecting one arguments so it's saying that it's expecting one argument a value but found zero so
141:32 - it's another word is saying hey you defined below here a parameter name now give me a value for that
141:41 - parameter so so i will be able to use it in your code so to use it in the in the here so i will
141:47 - type here let's say john so now if you run this it says it's saying hello john so now it's using
142:00 - the value that is passed here and as you can see you have also this name that it's saying it's
142:06 - saying the name of the variable which is name and we can call our function again so we can press
142:13 - control d and you can change it to let's say uh anna so now if you run this it will say first hello
142:22 - john and then hello anna because now for our second function when you call it the value is passed
142:29 - anna and when this system.out.print says execute it's using the value anna here so this is how
142:37 - functions or this how you can define a parameter for a function and you can define more parameters
142:42 - here you can put another parameter here and to define another parameter you put a comma
142:50 - to our first parameter and we type another parameter let's say age so we type int age and
142:57 - now we have those underlines because now it's a spacing value for the age that is defined here
143:02 - so we're going to say hello alex let's put plus quotation marks i'm going to type your age is
143:16 - and plus quotation marks not quotation marks sorry plus age so now this will receive a value for the
143:24 - name and for the age and it's going to use that value inside the head inside the print line and
143:29 - it's going to say hello the value which just passed for the name and it's going to say your age is and
143:34 - the value which is passed for the age so let's pass here let's say 23 and for anna let's say
143:41 - that we pass here 26 or 25 let's say now when you run this code
143:50 - get hello john your age is 23 hello anna your age is 25 so what it's doing here now it's using
143:57 - the values that are passed here these are also called arguments the value that you pass to the
144:02 - parameters so to the parameter name for our for our first call of the function we pass john
144:10 - and for the age you pass 23 and we got in the output hello john your age is 23
144:15 - for our second function because because functions are reusable chunks of code you can call it again
144:21 - when we pass different values here we passed anna for the name and for the age 25 all right now i'm
144:29 - going to end the video and see you in the next video we're going to look at other things that
144:34 - we can do with functions so see you in the next video now it's time to see how we can return a
144:39 - value from our functions so i'll go down here i'll create another function so type public
144:47 - static
144:52 - now to make the function to return something we need first to say what you want to return
144:58 - so after the static keyword we put our type so what type of data we want to return in this case
145:06 - i'm going to return an integer so i'm going to put public starting int so compare this with
145:12 - the function that we have above above we have void that means nothing we don't return anything
145:18 - now we're having public starting int so this function is going to return an integer next
145:23 - we put a name let's call it getmax and this function is going to have two parameters int
145:31 - num1 comma int num2 and it's going to return the big the number which is the bigger number
145:42 - now as you can see we have another line our here and it's a missing return statement because now
145:48 - we need to return something but first let's check to see which number is bigger so check
145:53 - we type if num1 is greater than num2 then it means that num1 is the number which
146:04 - which is the bigger number so now we need to return that number back to the to the calling
146:10 - function and to return we type the return keyword and the value that we want to return in this case
146:17 - you want to return num1 which is the bigger number num1 else i'm going to put here else
146:25 - that means that the num2 is bigger so i'm going to return here num2
146:31 - let's press ctrl alt l to format the code and let's delete those calls for our say hello function
146:38 - also let's put a semicolon here now if i call the getmax function here so i type getmax function
146:47 - and i put two numbers so let's say 10 and 5 put semicolon now if i run this code
146:58 - we get nothing this is because this function it's returning a value and you need to capture you
147:05 - need to get that value to put that value into a variable into a variable because it's returning
147:11 - a number so you need to get somehow that number in a variable here and then output it because if
147:18 - you press shift control p on this function so we select the function as you can see the whole
147:26 - function returns the whole function is considered to be an int because it's returning a number
147:32 - this way you have that pop up which says int now i'm going to type here int max equals so you put
147:41 - int max equals getmax and this is going to return the maximum value down we type s our ot and i'm
147:48 - going to type i'm going to output max and let's press ctrl alt l to format the code and let's run
147:54 - our code now now we get 10 so our function returns to be a number and if you pass a different value
148:03 - here let's say you put here one now and if you run this now we get five because what he's doing is
148:15 - taking whatever value are passed here for the parameters here and here then it's doing the
148:23 - checking it's checking if num1 greater num2 then it's returning that number and if that number
148:29 - is the number which is greater it's going to return going to be returned here by the getmax
148:34 - and it's going to be stored in the max variable then we're going to output that variable in the
148:38 - console another important thing to know about the return is that after the return the after you
148:46 - return from a function either by returning something or simply typing just return the
148:53 - function or the structure in which we are currently in is going to be left it's going to be stopped so
149:02 - if i try to put some code below our return let's say s our ot let's say
149:09 - uh this is some text we have this underlined and it says
149:19 - unreachable code delete a readable statement because when when you sell to the function
149:24 - return something at that point it it leaves the function and it's not executing any line of code
149:31 - which comes below of the return statement so this is very important to have in mind and if you just
149:36 - type return without returning something it will have the same effect
149:41 - and missing return value so let me change this to void to show you how even if you
149:49 - just type return so no no so let's put here all right so now we have it so if we just type
149:58 - just type return again it's saying unreachable code because after we type the return keyword
150:05 - either by returning a value or simply do just the return it's gonna it's gonna stop the execution
150:11 - of the function the function is not going to execute any line of code below of that
150:17 - so let's press ctrl z a few times here to undo the changes and let's also delete this because
150:23 - you don't need this and if you want to return something else simply just change the return
150:30 - type here so you want if you want to return a boolean type you just type boolean here you type
150:34 - boolean and now we have an error because it now it's wants to return a boolean if you want to
150:39 - return a char you just type here char so if you want to return a string you put here string
150:48 - and you will return a string value but now returning integer so this is why you have the
150:52 - those in red so it's up to you what you want to return depending on what you're trying to
150:58 - want to do so this is our discussion about return types and see you in the next video
151:04 - now it's time to start a discussion about arrays but first let's create a new project i'm going
151:08 - to call it arrays for the language select java for the build system intellij make sure to have
151:15 - the jdk version 17 here selected and i'm going to keep this checked add simple code to have the main
151:21 - class and the main function generated for us so click on create
151:29 - all right now our project is created let's open our main class
151:36 - let's push this on the next line and let's delete this code because you don't need this
151:40 - system.out.print line now what are arrays? arrays allows you to store multiple values
151:47 - in a variable without declaring separate variables for each volume so and to declare an array we
151:55 - type first the type so what kind of data you want to store in this array let's say that i want to
152:00 - store numbers so i'll type int and after the int you put square brackets and then you give a name
152:07 - to our array let's say that i'm going to call it numbers then i'm going to put equals and when i
152:14 - put curly braces and inside the curly braces we put our our elements of type int separated
152:22 - by comma so i'll put here one two three four five six actually let's use other numbers so i'm going
152:31 - to put 12 15 60 100 200 30 50 all right so now we have an array of integers stored in this
152:53 - variable numbers now how we can print those values in the console we can use a for each in this case
153:03 - but i'm going to show you also how to use the classic form later but let's first print the for
153:09 - each so we type for you put parenthesis and we type here int number colon in numbers so for every
153:21 - number in numbers you know numbers array from above i'm going to add s o t i'm going to type
153:29 - i'm going to print the number so now if you run this
153:41 - we have our numbers displayed in the console so everything works fine now one very important
153:47 - thing to know is that the index of the so our elements our integers so or our elements more
153:57 - generally are stored at indexes and the index of the elements is starting at zero so 12 is at the
154:04 - index zero so if i want to print the value let's say 15 i need to type here s o t and i will type
154:15 - numbers then square brackets and now we need to use the index where that specific number is and
154:23 - the index of 15 is one so if i run this
154:33 - we get 15 because it's it's this line of code is getting the value which is stored at the index one
154:40 - and you want another value put here let's say three so if you run this
154:48 - we get in the output 100 also another thing that you can do with with arrays is that you can
154:55 - get the length of the array so i can type here a classical for loop so type four and you can
155:01 - create you can create this for i you have this suggestion and it's going to generate for you the
155:08 - all the necessary code so if i press enter as you can see it generated all the necessary code so for
155:13 - i int if i press tab it moves to the condition and i'm going to put the condition numbers and
155:21 - you can get the length of this array so if i put the length and press again tab and here i will
155:30 - type sout and i will print i in the console not i we don't print numbers that i so get we're going
155:41 - to get the numbers at the index i but probably as you'll see we'll have a problem with this code
155:47 - so now if i run this we don't have any problem but if i put less than or equal to numbers that
155:57 - length so now if i run that now we get an exception it says index seven out of bounds
156:08 - for length seven so he's saying that because our elements are stored i indexes we have here
156:15 - one two three four five six seven elements but they are the last index is six and when we put
156:24 - here for i is less than equal to number that length we get with we try to get the index which
156:31 - is we try to get here the index seven here in this line of code and index seven does not exist so
156:38 - this i get this index seven out of bounds for length seven what we can do in this case we can
156:44 - put less less than without equal and the code it will work because it will it will get to the last
156:52 - element and it's not to go to it will not go for the last index or you can you can put here
157:02 - less than or equal to numbers but you can put here minus one so we're going to subtract one
157:07 - from the length so so so in instead of having number that line let's say which is seven the
157:14 - length when i have six which is the index the last in the index of the last element so now if i run
157:21 - this we get on the output our numbers and we can create another array so i can go down here and
157:31 - i can type string square brackets to declare an array i'm going to call it names or let's call
157:40 - it friends and i'm going to put equals again curly braces and here i'm going to define some names so
157:46 - let's say maria alex
157:55 - bita
158:00 - anna
158:04 - john
158:08 - steve
158:10 - all right let's put semi colon so now we have another array of friends now if i want to loop
158:15 - through this array i can use a for each so i can use a for each i'm going to press enter
158:20 - as you can see actually let's press ctrl because i don't like the formatting so for parenthesis
158:27 - for here i'm going to type the type string for string so type here string i'm going to type
158:36 - friend colon so for friend in free ends curly brace left curly brace and press enter to add
158:46 - the right curly base or the closing curly brace and i'm going to type here sout friend and now
158:54 - it's going to display all of all of our names using the for each so we get all of our names so let's
159:02 - put actually a space between our code here so let's put here print line not print line sout ut
159:10 - and let's put question mark and let's put backslash n that's going to add the space between our
159:18 - two outputs because we have two different outputs here one from the numbers array one one from the
159:25 - from the numbers integers array and one from the friends strings array so as you can see now we
159:29 - have a space which was added by this line of code and you can you can output the the values in the
159:38 - friends array using a classical for so i can type here for and we have the suggestion choose this
159:43 - one it will generate the for for you and i'm going to put for i equals zero i less than uh
159:50 - let's say friends dot length and that is going to return us the length of the array
159:56 - so for friends that length i plus plus i'm going to put type again then i'm going to type here
160:03 - sout and i will type friends and i will get the index out of each iteration so i'm going to put
160:13 - square brackets i and that is going to return us the element at this specific index so first the
160:21 - i is going to be zero we'll get the element maria then i is going to be incremented to one and we
160:26 - get alex then i is going to be incremented again and we will get bits and so on until
160:33 - it reaches the last element the condition fails and the loop stops execution so now if you run this
160:44 - so we get our numbers and then we get our names output and console so this is our discussion
160:49 - about arrays and you can use arrays with all the primitive types that we talked about and also with
160:57 - the string as you as you saw here so i'm going to end this video now and see you in the next video
161:03 - but let me tell you one more thing about arrays what you can also do with an array is that you
161:09 - can create here let's say another array let's call it let's also need and you can we can put
161:19 - square brackets let's call it numbers two and what you can do here you can type new int and
161:30 - you can define here a size of let's say seven elements or five elements and now if you want
161:36 - to add elements in this array you cannot only five elements but you can you cannot them using
161:42 - indexes so you type numbers two index zero equals and here we define an element let's say one
161:51 - and put semicolon and if i press control the a few times now let's change this to
161:59 - one two and three and let's change this to let's say four five sorry seven and let's say
162:10 - ten so this is another way to assign value to our array and here i passed five this is the size of
162:19 - the array so if i try to put let's say another i'll type numbers here again actually let's press
162:25 - control d again control d again control d and if you hover over it says it says the overwritten
162:36 - array element variable is already assigned to this value so let's delete this and let's change
162:44 - now the index to four and let's put here 24 let's type again numbers two and let's put square
162:55 - brackets and i'm going to put five and i'll put equals to 100 semicolon and now we're going to type
163:04 - the next index which is six we'll see what happens i'm going to put index six equals let's say
163:14 - 45
163:17 - all right so if you hover over the five it says so let's hover over all right so it says array
163:26 - index out of bounds and is saying that because here we define only that you're going to create
163:32 - an array of with five elements and we added more than five elements so this way is saying array
163:41 - index out of bounds so we cannot do that so because we already have five elements here so
163:47 - we have one two three four and five so when we try to add here let's press tab numbers two
163:55 - and array five equals to let's say nine immediately shows this warning and it says
164:04 - array index is out of bounds because we define that we're going to put five elements and if you
164:11 - count what the number of elements we have here we have six elements we have one two three four
164:20 - five and six and because the size is five and we put six elements we get this warning so
164:28 - this is good to know and usually you will not assign values to arrays in this way you'll use
164:36 - you'll lose the curly braces because this is better and you can also replace an element
164:41 - without an index so you can use the index and you can put a different value in that index
164:47 - also another important thing to mention is is that after you created an array so after
164:54 - let's say i created our numbers array we cannot add new numbers in our array our array has a fixed
165:01 - size so if i try to put here numbers let's say actually let me i will not type the code but
165:11 - if you try to put another element inside this array it will not work because if i type here
165:16 - numbers and let's say that let's say let's say that i want to put let's say like i said i want
165:22 - to add something and i call add there is no add function for our array our array our arrays
165:29 - have fixed size and the size is it's uh the size is is given by the number of elements that you
165:37 - passed you when you first created the array and as you'll see in the future videos we're going
165:43 - to learn about arrays which can grow and shrink as you add elements to it so that for now we're
165:51 - going to look we're going to use only those so now i'm going to end this video and see you in the next
165:56 - video now it's time to do a challenge using the knowledge that we have accumulated so far
166:03 - therefore i'm going to create a new project i'm going to call it challenge
166:06 - challenge for the language java build system intellij make sure to have the jdk reverse
166:13 - transcending selected here and also make sure to check this box we have the main
166:19 - class and main function generated for us so now i clicked on creator and all projects are going to
166:25 - be created now let's go on the left hand side on the project pane in the front of this src click
166:33 - on this greater arrow in this greater sign and double click on the main class to open the main
166:39 - class and let's uh pull this on the next line now the challenge is to create a function which
166:47 - receives as a parameter an array and the function should an array of numbers and the function should
166:55 - return the the biggest number from that array of numbers that is the challenge so try to do it and
167:01 - then come and watch my solution so with this is my solution so i'll delete this i'll create a
167:08 - function public static and i'm going to put int because it's going to return an integer
167:16 - i'm going to call it get marks and it's going to receive an array so i'm going to declare here
167:23 - an array of numbers then i'm going to put curly braces and first here i'll declare another
167:30 - variable called marks and i will assign the first element from our from the array in this variable
167:39 - mark so i'll type here numbers square brackets zero so we'll put our first element there
167:47 - then i will loop through our array so i'll type for and i will use the for each loop for
167:53 - uh let's type int number in numbers and here we're going to check if
168:05 - if number so the number at this at this iteration is greater than our marks then that means that
168:19 - we need to switch you need to put our max i need to put this number in our max variable then i'm
168:24 - going to put max equals number semicolon and outside of the for loop we're going to return
168:34 - this number so we're going to type here return max semicolon now if i go up here
168:41 - here i'll type get marks and i'll uh i'll provide some numbers here let's say
168:49 - four five actually we need to provide an array so let's create directly an array here so
168:56 - we put uh we put uh curly braces inside the so double curly brace and inside the
169:07 - curly brace i'm going to put one two three four actually i can do that so let's create the array
169:15 - first so let's type here int numbers equals and i'm going to put here one
169:27 - two five seven eight nine
169:30 - nine twenty two it should be an array here
169:39 - and semicolon now let's pass those numbers here
169:44 - let's put a semicolon here let's store this variable let's store what let's store what
169:51 - the function is returning in a variable so i'll type int marks found if you want equals
169:59 - to get marks and i'm going to press control i'll tell the form of the code and down i will type
170:05 - s o t max found so we're going to output the maximum found so now if you run this
170:13 - the biggest number is 22
170:18 - so we get 22 as the biggest numbers and if put here are other numbers like 77 100
170:25 - 150 zero if you run this
170:36 - our program works it returns 150 which is the biggest number from our array
170:41 - so this is the solution to the challenge if you have other solution that is okay because in
170:47 - programming you can find many solutions which can do the same thing so i'm going to end this
170:54 - video now and see you in the next video now it's time to start a discussion about object-oriented
170:59 - programming but first let's create a new project i'm going to call it op for the language select
171:05 - java for the build system in telegay make sure to have the jdk version 17 selected there and
171:10 - also check this as simple code to generate the code for us so click on create now project is
171:15 - going to be created and it was already created now let's double click on main and let's start
171:21 - a discussion about object-oriented programming so what is object-oriented programming
171:26 - object-oriented programming is a way of writing code in the way think about the real world
171:31 - so in the real world more specifically we have objects and those objects have two major
171:36 - characteristics the first is the state let's take for example a car the state of the state
171:42 - of our car is represented by the name of the car by the color of that car by the number
171:47 - of doors of that car and this is this is called the state next what what direct in real life have
171:55 - is functionality so a car is an example using the car example you know a car can move can stop can
172:03 - switch gears and so on so when you're trying to write code you will try to first create the state
172:11 - of an object that you're going to create and the functionality that that particular object has and
172:19 - in the real world if you want to build an object you first need to create a template a plan
172:24 - and the template and the plan is used to create objects with that plan but the plan is not an
172:31 - object it's just a plan for creating objects and in the plan you define the general characteristics
172:37 - you define the state and the functionality that a car will have and using this example with the
172:43 - car we're going to create a class and in programming for creating for the template
172:49 - the equivalent of a plan in real world to a plan in programming a plan in programming
172:55 - or template in programming is a class so we right click on src go to new and we go to new and select
173:03 - java class and i'm going to call this class car i'll press enter and as you can see it added this
173:10 - public class car and curly braces so now we have now we have the template of a car but
173:19 - with an empty template now you don't have anything written on this plan now to add some
173:26 - first to add first the state of a car i'm going to type a few fields a few variables they are
173:33 - called fields in the context of object-oriented programming so i'm going to type private
173:40 - string name then private string color
173:48 - or private string or private let's put here
174:01 - private string model so now we're creating the plan for creating a car and now we're creating
174:09 - first the state representation of of a car color and private string doors but this should be an
174:19 - integer the number of doors so doors all right so now we have the state of a car but now if you
174:26 - know how how how to we're going to use this this this thing that we have here to create an actual
174:32 - object we first need to create a constructor and as the name implies the constructor is used to
174:39 - construct an object and to create a constructor just type public the name of your of your class
174:49 - so car parenthesis and inside the parenthesis we define parameters first is going to be a string
174:56 - name second is going to be a string model third is going to be a string color so with this as
175:08 - you'll see with this constructor we're going to construct an actual object of type car so string
175:15 - color and the int doors now we put curly braces and press enter so now those are parameters which
175:26 - are going to receive a value they are not storing this they are not fields like the ones which are
175:32 - above here those are fields those are the ones which are going to store the state of a car
175:37 - those are simply parameters which their only job is to take whatever value pass here and assign it
175:44 - to the field of the of the of the class so what you need to do here now is to type this and this
175:52 - is used to refer the current the current instance and an instance is an actual object created with
176:00 - the model with the template car so you're saying here hey assign to this dot name so
176:09 - so assign to this name as you can see it's or it has this one usage because now we are using this
176:15 - in one we are using this on line eight so now using the field name and the field name is the
176:21 - one which stores the state i'm going to put equals name so the name that is going to be passed to the
176:27 - parameter here name is going to be assigned to the to the field name as you can as you can see here
176:34 - it's it has also a different color it has this this color because it's it's it's an intelligent
176:43 - way of telling you that this is a field so let's put semicolon and do the same thing for the next
176:50 - one so we have this that's the model equals model this that color equals color and as you can see
177:03 - the fields are colored this is this is how we can identify that this dot doors equals doors
177:13 - all right so now we have a template we have we have the state next we need to and this is the
177:21 - constructor as you see we're going to use this to to pass some values to the fields which are
177:27 - defined here which are defined which are taking the value from the so here we're gonna we're gonna
177:33 - create an object we're gonna the call this constructor and we're gonna pass some values
177:38 - to those to the name to the model to the color and the doors and after that the name the model
177:45 - and the color is going to be assigned to this dot name so it's going to be assigned to the field
177:49 - name to the field model and to the field color and to the field doors now now we created the state
177:56 - so now we have a template and we have the state next we need to add some
178:00 - functionality so I'll type here fun sorry not fun I'll type public and this
178:06 - is a method because it's part of a class so methods are part of a class not
178:12 - functions so I'll start public void I'm gonna call it let's say move I'm gonna
178:21 - have we're gonna put parentheses and curly braces and we're gonna put here
178:26 - sout and we'll say the car I'm gonna put plus when I use this dot car so this
178:36 - current this this dot name we're gonna type here so the current name which was
178:43 - which is for this particular instance when this function is gonna be
178:47 - called we're gonna say is moving so we're gonna put plus quotation marks is
178:53 - moving and you put down there then I'm gonna create another function public
179:01 - also void is gonna return anything stop and this is gonna stop the car and we're
179:07 - gonna have curly braces sout and it's gonna say the car has stopped and let's
179:17 - put also the car let's delete this the car and the name of the car plus this
179:29 - that's let's delete this and type it again so let's parenthesis and I'm gonna
179:37 - type the car plus this dot name plus has stopped so the car has stopped and this
179:52 - those functions are gonna be attached to all the objects that are gonna create
179:56 - using this template that we have now so let's put semicolon at the end so now we
180:01 - have a template we have the state we have the constructor and we have the
180:06 - functionality what this car can do now we need to create an actual object using
180:12 - the template and to create an actual object we go inside the main class the
180:17 - main is also a class as you can see and has a function we have but it's a
180:20 - function with each thing static we'll see what static is in future videos now
180:26 - to create an actual object with our template card that we created we're gonna
180:31 - type here car and while I'm dumping it'll just give a suggestion and do you
180:36 - mean car the car class that you created that template I'm gonna say yes so car
180:42 - I'm gonna call it this law and I'm gonna put equals and here to create a new
180:49 - instance we type and an instance is an actual object created with the with the
180:55 - car template we're gonna type new car so we create a new a new object now now we
181:01 - need to put parenthesis and now as you can see we have we have it's expecting
181:07 - us to pass some values for the name for the model for the color and for the
181:11 - doors and it's expecting us to do that because now we are calling the
181:16 - constructor those parenthesis are calling the constructor that is defined
181:20 - here so now this constructor it's expecting some values for its prop for
181:26 - its parameters to because it wants to assign those values to the fields name
181:31 - model color color indoors so here I will type but let's change this to car and
181:39 - here I will type first for the name Tesla which is a very nice car for the
181:46 - model and we're gonna put and now we're gonna put a comma and then on we pass
181:51 - a value for the next parameter for the model let's say s played and for the
182:00 - color let's say block and for the doors let's say for format three and put a
182:15 - semicolon now what we did is we created first a template this is the template for
182:22 - creating a car which has states and functionality and we also now created an
182:30 - actual object using that state we're using that template using that plan we
182:36 - created an actual object which has some specific values for its for its fields
182:41 - we has the has the name Tesla the model is played the color of black and the
182:46 - number of those four and we can create another car so I can type here car car
182:52 - too you can give a different name if you want here but I'm gonna call it car to
182:57 - gonna put equals new because with our plan we can create as many as cars as
183:01 - you want so I'm gonna put car and for the name let's say type Ford and for the
183:10 - model Mustang and for the color let's say red the number of doors too now
183:22 - what you having now is two objects two actual instances and this process of
183:29 - when when you create a new object is called instantiation because you are
183:33 - creating a new object and now we're having two instances two objects created
183:40 - created with our plan and car with our with our class car that is defined here
183:46 - so with the template we build it to to actual objects now I'm gonna end this
183:53 - video now and I'm gonna continue our discussion in the next video now it's
183:57 - time to start a discussion about getters and setters so what are getters and
184:00 - setters getters are used to get the value of our fields and the setters are
184:07 - used to set the value of our fields and we use getters and setters because we
184:12 - made our fields respectively the name the model and the call private so they
184:17 - cannot be accessed from outside in order to be able to interact with them you
184:24 - need to provide getters and setters and provide getters and setters we go down
184:28 - here and we go to code we go to generate and as you can see it's given us some
184:37 - suggestion is any saying do you mean do you want to generate constructor getter
184:42 - setter getter and setter so let's choose getter and setter let's use and let's
184:46 - choose getters and setters for all of our of our fields but first let me show
184:54 - you something so now if I want to print let's say the name of the first car
185:00 - which is Tesla I need to use what is called the dot notation so I need to
185:05 - type car dot but I don't have any any name here as a suggestion when I press
185:12 - that because that name is private so it cannot be accessed from outside of the
185:18 - class because the name is made here private you cannot access it from
185:22 - outside but if we generate getters and setters so let's press ctrl o or we go
185:28 - to generate go to code and generate so ctrl o actually let's go to generate
185:34 - we go to generate I'll let the insert this shortcut and we choose getter and
185:40 - setter and which is getters and setters for all of our fields and if you click
185:45 - on OK now we generated all this code and first you have the you have you
185:51 - have a getter we have a setter we have a getter we have a setter we have now
185:55 - getters and setters for our fields so now if I go here and I type car one dot
186:02 - and now I have get color get doors get model get name and those functions are
186:08 - called on this specific order that is created here so if I want to output
186:14 - something in the console now I can type here SROT and I can type car one not
186:21 - car one not not called car one car dot let's say get name let's see what you
186:27 - get in the output so now if you run this we get in the output Tesla because card
186:31 - the card that we created here as you can see is also as you can see the second
186:37 - car is gray out and that is because this variable car is never used so this very
186:43 - the interrogator is helping us now we got the name Tesla and if I want to get
186:50 - something else let's say the model color and doors I'm gonna press ctrl D
186:55 - and I'll type here get and instead of name model get color and get doors get
187:10 - doors let's delete the last system not out so now if run this this will display
187:18 - the the value for the fields of the first object which is this Tesla is
187:22 - played black and four doors so now if I run this get Tesla is played black and
187:35 - four so the car that get name is returning the name car that get model is
187:39 - returning the model car that get color is returning the value of the color
187:44 - because if you look inside the getters let's look at the get doors as you can
187:49 - see this is a function which returns the doors and which returns the number of
187:53 - doors for this specific object because the function get doors is called on this
188:01 - specific object that we create above we created here and we can call getters and
188:06 - setters for our now for our second object so let's print let's have the
188:10 - line between our two prints so let's put backslash n and let's simply copy this
188:20 - code ctrl C ctrl V and let's change car now to car 2 so car 2 because now we're
188:31 - getting the fill up value for the fields of the car 2 so now if run this as you
188:41 - can see we have first Tesla is played black for so this is coming from our
188:45 - first object that were that we created above and second to get Ford Mustang
188:53 - red into and this is the values for our second object which is stored in the
188:58 - variable car 2 so these are the getters you can also use setters you can use
189:03 - setters to change the values so we can type here a car so our first object that
189:08 - said and we can set a different name now so I can type here let's say I don't know
189:15 - let's say simply put here car now if I go down here and I add here car let me
189:25 - show you show you a shortcut to output something car that get name that is how
189:33 - to look what happens if I press enter as you can see it put it that it puts it
189:38 - that in it's added to our car like a name inside the print line without us
189:43 - needing to tie that so now if you run this we get Tesla is played black for
189:55 - then I get for Mustang red 2 and I get car so oh the value for our car what the
190:01 - value for our field the name of our first car object was changed to car so
190:06 - you can use the setters to change all the values but again you're not changing
190:10 - the value directly you're not calling the the property the property you're not
190:15 - calling the field directly and you change its value because that will break
190:18 - what is called the rules of encapsulation which basically means to
190:22 - not make to not let your code to be accessed from outside with the setter you
190:28 - just only you pass the of value let's say for the name you pass a value as a
190:34 - as a parameter as an argument and then that value is set to the to the to the
190:41 - field and in this way we don't you don't pass directly values and here you can
190:47 - also add some some checking here some verification but you can put some code
190:54 - here if the name starts with a specific letter to not add it and so on so as you
190:58 - can see you you don't access the the values directly from here because you're
191:04 - using the setters to set the values and the getters to get the value so you
191:08 - never access them directly but if you make you made you make them for public
191:13 - you give the LBI you're gonna be able to access them directly all right now I'm
191:20 - gonna go inside that main and I'm gonna end this video now and see you in the
191:25 - next video now it's time to take a closer look at constructors and Java but
191:29 - first let me show you how we can call the move and stuff function on our
191:32 - objects that we created so we can type here car one car not car one car that
191:40 - move so now we're calling the move function on the car object and car that
191:46 - stop stop and we can also do the same thing for our second car car to that
191:55 - move and car to that stop so now if you run this without that stop so now if
192:06 - you run this now get first we get the car tesla is moving the car tesla has
192:19 - stopped and let's change a little bit here to have a space so let's run this
192:26 - again so we have the car tesla is moving the car tesla has stopped so those
192:36 - functions are called on the on this specific object and then we get you get
192:43 - s lies played black and four for the fields and then get the car for this
192:49 - moving so heck if we have our second object the car for this moving the car
192:53 - for the stop and we get the value for our fields using the getters so you get
192:58 - for the most unread to and car now let's take a closer look at constructors and
193:04 - let's say that whatever reason the person which creates this object doesn't
193:12 - want to provide a value values to all of our parameters so here when you
193:19 - construct or object when you construct your object you using the
193:24 - constructor I cannot say let's say I cannot let the last parameter unfilled
193:32 - because it will show an earning so it expects a parameter so what you can do
193:37 - is that you can create a first let's say an empty constructor and for that I'm
193:43 - gonna type here public car and I'm gonna put only parenthesis and curly braces
193:50 - and now this empty constructor is gonna call the the the parent or the first
193:57 - constructor the constructor which does all the initialization and we're gonna
194:02 - pass for the name do we default we're gonna pass for the parameter default
194:06 - values we're gonna pass name for the model model for the caller caller for
194:15 - the doors for the doors are gonna put zero so if somebody from outside the
194:23 - class creates an object and is doesn't provide any value for our for our for
194:31 - our constructor those values are gonna be used for the constructor so this what
194:35 - is doing this and is calling the constructor which is here this is what
194:41 - this is doing this parenthesis default values is calling this constructor so
194:47 - now if I go here and I create another car so but let me delete this this code
194:54 - because it will make things confusing so let delete this code and if I go down
195:00 - here and now if I delete all the values for our car too as you can see everything
195:08 - is fine let's press ctrl G because I need the to output and the console the
195:13 - values for car to select the list those they delete as it is so now let's
195:21 - delete the values inside the constructor all right so now if you run this as
195:27 - you can see you don't have an ordering now because now it's using this
195:31 - constructor that we have here which is an empty constructor which is calling
195:35 - the constructor from above and it's passing the default values because now
195:39 - here not passing any values for the constructor so now if you run this
195:49 - we get the car name is moving the car name has stopped and get name model
195:52 - course so we get our default values because the empty constructor is called
195:57 - and then the constructor is calling the constructor that is defined here so we
196:02 - can also go and we can create another constructor here so I can type here
196:06 - public and provide the value only for the name public car and I will type
196:12 - string name I'm going to put curly braces and now I will type this and I
196:20 - will pass the name which is going to be pass here and for the next value I'm
196:24 - going to provide provide we're going to provide default values when I type
196:27 - color sorry model should be model color and number of those zero and I can do
196:39 - the same thing for with another constructor so I can provide another
196:42 - constructor and provide values only for the model model and color so
196:48 - model sorry string model and here instead of passing this default value
196:56 - we're going to pass model and I'm going to show you how all of this works
196:59 - immediately model semicolon semicolon here and here and here we have name it
197:06 - should be this one name all right and now let's press ctrl D no it's not
197:15 - working so let's copy this and let's pay let's paste it here so now I'm going to
197:26 - provide the value for the model and a value for the color so I'm going to type
197:36 - here string color so I'm going to type here color and model
197:52 - semicolon and now I can copy this and I will call the first constructor which is
198:02 - gonna but I don't need to do that because that we already have a
198:06 - constructor which provides the values for all the world of all the fields so
198:11 - if you create your object and you want to provide only the name you provide the
198:15 - name and the name is going to be assigned and the rest of the field is
198:18 - going to have going to have those three field values if you provide only the
198:24 - name and the model then in the color in zero is going to be the color in the
198:30 - number number of dollars going to be is going to be color and zero is going to
198:33 - have those default values and if you provide the name the model and the color
198:39 - but not the number of doors is going to have the number of doors is zero so if I
198:44 - go here and with look if I put here Ford now if I run this now it's using the
198:53 - constructor with so we have we have for the model color so it's using this
199:00 - constructor what is that constructor so it's using this constructor here because
199:09 - now we're passing a value name name for our for our class and the next ones are
199:15 - a defaulted and you can do the you can do here provide another value you say
199:21 - the model Mustang and now it's gonna use this constructor which is here this
199:26 - constructor and it's gonna get the name that we type the model that we type is
199:32 - gonna pass them to the primary constructor for to the parent
199:37 - constructor if one and for the color and doors is gonna have those default values
199:41 - and so on you can provide name could model and color and for the doors you're
199:46 - gonna be zero so this is how you can use multiple constructors with your with
199:53 - your classes and I will see you on the next video now it's time to start a
199:57 - discussion about inheritance so what is inheritance inheritance basically means
200:02 - creating a class using another class you know maybe wondering why is this
200:06 - useful this is useful let's say that you want to create a class B which is a
200:11 - slightly different from a class A and let's say that the class A has a lot of
200:17 - fields and functions which are particular to that class A because it's
200:22 - representing some something and instead of creating a class B and adding all the
200:29 - fields and functions and metals that the class A has you can inherit all of that
200:35 - and on top of that on top of that you can add the new functions and new new
200:41 - fields which are specific to the class B but they are not specific to the class A
200:46 - so this is what inheritance is therefore let's go down here and as you can see
200:52 - here I deleted the car class because I cleared the car class inside this file
200:56 - so I type class car and it's gonna have a few fields private string name private
201:09 - string model private string caller and private int doors now let's generate a
201:24 - constructor I'm not going to generate getters and setters because we're not
201:28 - going to use them so let's generate the constructor for all the fields now down
201:33 - here let's create but let's add two functions here let's say fun not fun
201:38 - let's type public void move and it's gonna say sout it's gonna say the v
201:52 - equal let's put here plus this dot name it's moving and now we're gonna get
202:11 - another function public void stop it's not gonna take any parameters it's not
202:20 - going to find any parameter and it's gonna say sout the vehicle has let's
202:31 - put here vehicle plus the name this that name the vehicle has stopped now let's
202:44 - create another class called plane so I'm gonna type class plane and type here
202:51 - private string name private string model private string caller private int doors
203:14 - and private int engines because the plane has more than only engine let's
203:20 - generate let's generate the constructor so let's go to code generate
203:29 - constructor for all the fields and let's copy those two methods that we have here
203:33 - and let's define for the plane to for the plane also now what we have now is
203:42 - first is that we have code repetition so we have both in both both classes we
203:48 - have the function move and the function stop and we also have fields which are
203:53 - common to those to the classes both classes have a name and both classes have
203:59 - a call or both classes have a model and it doesn't make sense to put all of this
204:05 - code inside of each class it makes sense to create another class called let's
204:12 - type here class and this could be gonna be called vehicle which is gonna
204:16 - represent a general generic vehicle this is what is gonna represent and here I'm
204:21 - gonna define some fields which are common to all the vehicles so I'm gonna
204:27 - type here private first name all the all the vehicles have a name so private
204:33 - string name and let's say private string caller so those are fields which are
204:43 - common to all of the vehicles which are common to also to the car and also are
204:47 - common to a plane so let's generate the constructor for our vehicle so let's
204:53 - generate constructor and all the vehicles are gonna move so they are gonna
205:04 - move in specific ways but you know that's all all vehicles gonna move so
205:09 - we can put here the move and stuff method and what I can do now here is I
205:16 - can delete those so I can delete those I can delete those here also and now what
205:24 - I can do I can type here extends so to inherit from a class we type the
205:29 - extends keyword and we type here vehicle so you put vehicle and now as you can
205:35 - see we have an underline because it's expecting to pass the values to the
205:38 - constructor of the class from which we are inheriting so it's expected to pass
205:44 - down some values here and because the name and the color are defined as fields
205:51 - inside the vehicle class we're gonna delete them from our so the name and the
205:58 - color is gonna be deleted from our from our class because they are gonna be
206:03 - used by the super class so I'm gonna delete that we're gonna name and so I'm
206:09 - gonna type here super and now we're gonna call the constructor of this class
206:13 - from which we are inheriting and we're gonna pass the name and the color so
206:19 - look now how how small our class has become because we inheriting all of that
206:24 - and you can do the same thing to the plane class you can we can inherit from
206:29 - the vehicle extends vehicle and again it's expecting some values too so let's
206:38 - delete the name because all vehicles have a name and all vehicles have a color
206:42 - unless let's just let the model and doors and engines because not all
206:47 - vehicles have not all vehicles have doors not all vehicles have engines with
206:53 - the butter plane has the doors and a model and engines now let's delete those
206:58 - from here let's do it from here so super means calling the constructor from the
207:06 - parent class from which we are inheriting from the super class if you
207:10 - want so I'm gonna I'm gonna pass to the super class the name which is pass here
207:14 - as a parameter and the color as you can see put semicolon now we'll look at this
207:21 - code how beautiful it is so we inherited the the state and functionality which a
207:29 - vehicle has and we inherited that in our car vehicle in an hour and in our plane
207:36 - vehicle and now what I can do up here I can go up here and I can type car let's
207:44 - call it car we're gonna be equal to new car and now we're gonna respect some
207:49 - values first gonna be the name again Tesla and let's put for the model as
207:59 - played and for the color let's say red and for the doors let's put for let's
208:10 - create another class and now let's create a plain class so plain plain equals new
208:16 - to create a new instance plain and I'm gonna pass some values here let's say
208:21 - boring and for the model I don't know what model okay I'm gonna type here
208:30 - simply model and there's gonna be let's say white and and let's say white and
208:41 - blue and for the doors let's put I don't know nine and the number of engines let's
208:50 - say four I don't know if this is a correct number but I'm just passing some
208:53 - values now if you go down here and you type car dot look what we have we have
209:00 - the function move and stop so we can call the function move and stop even
209:06 - though they are not declared inside the car class but because they are declared
209:10 - inside the super class we can use them inside our own class and we can do the
209:14 - same thing for plain I can type here plain so let's actually call them so car
209:18 - that let's pass move first car dot stop and let's say plain dot move and plain
209:31 - dot stop so now if you run this we get the vehicle Tesla is moving then the
209:49 - vehicle Tesla has stopped so as you can see it's using the functions defined in
209:53 - the parent class in the class vehicle and saying the vehicle Tesla is moving
209:58 - and the vehicle Tesla has stopped and then it's then it says the vehicle
210:01 - bearing is moving and the vehicle bearing has stopped now what we can do is
210:05 - that you can override those functions so we can we can override those functions
210:10 - inside our let's say like I want to override the fun the move function
210:16 - inside the the plain class because the plane is moving in a specific way what I
210:21 - can type here or let's press ctrl or and I can as you can see override move and
210:27 - stop so let's override the move and super that move means call the super
210:34 - method from the class from which we are inheriting and I'm gonna add here a
210:40 - saut which is gonna say moving by flying so what we did here is we we took the
210:56 - generic behavior which a vehicle has which is simply moving and we add the
211:02 - some new functionality some new behavior which is particular to a plane because
211:07 - the plane is moving by it's moving by by flying so now if you run this look what
211:13 - you're gonna see in the output we have the vehicle Tesla is moving the vehicle
211:19 - Tesla has stopped then get moving by fly flying so get this call and then it's
211:26 - using super that muscles it's calling the function from the parent class from
211:30 - the class from which we are inheriting and as you can see we have this
211:33 - override here so we're overriding that behavior and on top of the moving
211:38 - behavior that the generic class provides we add so new behavior and in in a
211:44 - practical case imagine that you have you have a view in Android and they want to
211:49 - to build let's say a round button we can inherit all the functions and fields and
211:56 - all that logic which makes a view to appear on the screen and we can add some
212:02 - new lines of course some new logic some new fields some new behavior some new
212:07 - methods which are gonna take that view and on top of that view is gonna change
212:12 - it in a particular way to make it a button so this is the power of
212:16 - inheritance and it's very very very used in in Android particularly in Android
212:22 - programming so now I'm gonna end this video and see you in the next video now
212:27 - it's time to start a discussion about the static keyword so I'm gonna go
212:31 - inside the car class and what I will do now is I will create a function public
212:39 - static void it's gonna be called display data but let's first remove the static
212:53 - to show you how how the static keyword works and we go back inside main now in
213:00 - order to call the display data function need to use an instance you need to use
213:04 - an object or create it with our class in order to call it so to call the
213:11 - function so if I type here card to that display data I can use it but without an
213:18 - instance I can't call that function so let's actually delete this code this
213:24 - code also let's delete this object so now if I type here car that display
213:32 - data as you can see I can call it because I have an object and the
213:38 - functions are the methods are attached to do with this object what you can do
213:42 - with the static the static here so if you declare this function as public
213:47 - static is that you can call this function without without an instance
213:53 - without need that you need needing to create a new object I'm gonna call I'm
213:58 - gonna say display data so now if I go inside main now if I type car dot and I
214:10 - have the stop or move functions and the getters and zettles but the the display
214:16 - data is not not it's not here so I am to to use the the display data function
214:25 - what I can do is I can type here car so the class and now I have the function
214:32 - display data because what the starting keyword does is it's making the
214:39 - function of it it's making the function to belong to the class and not enough to
214:45 - an instance of a class so it will belong to the class itself and not to an object
214:50 - created with the class as you can see here we just type the name of the class
214:54 - and display data and you can do the same thing with variables so I can type here
215:01 - public static let's say string text equals text and now if I go here what I
215:14 - can do here is I can type car dot text so now I can access those without without
215:24 - creating an instance of how car we just call them on the class because they they
215:29 - belong to the class and not to an instance of the class they are also
215:32 - called class variables and class functions and those which we don't have
215:39 - the the static keyword are called instance variables and instance for
215:46 - instance methods so this is how you can use the static keyword and scenarios
215:53 - where you can use it's let's say that you want to have some constants so you
215:58 - can create a class again you define your constants and in that class using the
216:03 - static keyword and then you call the class and the the constants that you want to use so
216:09 - now I'm gonna end this video and see you in the next video