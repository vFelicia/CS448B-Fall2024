00:00 - in this course you will learn how to
00:01 - build a weather application using react
00:04 - and the open weather api
00:07 - with locations that autocomplete you
00:09 - will learn how to use two apis to get
00:12 - and display the weather for anywhere in
00:15 - the world slobodan teaches this course
00:17 - he is a senior front-end developer and
00:20 - experienced course creator make sure to
00:22 - leave a comment with something you learn
00:24 - in this course let's jump right in let
00:27 - me share my screen
00:30 - okay first uh i want to explain where
00:32 - you can get the api keys for both of
00:35 - these apis and what you need to install
00:37 - what you need to register first for
00:39 - because under my previous tutorials
00:40 - there were a couple of apis tutorials
00:42 - where you guys were struggling to find
00:44 - api keys so the first one that we want
00:46 - to use is on the rapid api website the
00:50 - links will be in the description so
00:51 - don't worry about that
00:53 - you need to to create account here
00:55 - on this website and
00:57 - go to the
00:58 - to this uh specific api the link is
01:01 - going to be in the description again and
01:03 - you need to subscribe to
01:05 - to this api in order to test it once you
01:07 - subscribe to it
01:09 - you can choose what what you want to
01:11 - test so you can click on the cities
01:13 - because we will need the series for our
01:15 - web application
01:16 - then you can choose what code you want
01:18 - to be generated for you you can i i
01:21 - choose javascript and fetch
01:23 - so you get the fetch method here and you
01:25 - get the options uh parameters which are
01:27 - required so the first one is the key and
01:30 - here you get the generated key which is
01:32 - for your account and the host
01:34 - and then the the full url and how you
01:36 - retrieve and map the data so it's really
01:39 - useful here are all the parameters that
01:41 - you can use optional ones and the
01:43 - required ones
01:44 - so yeah it's very useful so this is the
01:46 - first api the second one is the the
01:48 - actual uh weather api so you need to go
01:51 - open weather website link again in the
01:54 - description you need to sign up here
01:56 - everything is free you don't have to pay
01:57 - for anything so just go to your account
01:59 - you can click on your account here and
02:00 - you can go to my services to check what
02:03 - apis you have available for free
02:06 - and you can go and open api keys
02:08 - and here you can get your api key please
02:10 - register for your account and use my
02:13 - mine probably i'm going to blur this
02:14 - anyways but yeah you should use your api
02:17 - key now that now we can go and create
02:20 - our application so these are the things
02:22 - that you need to do beforehand
02:24 - so i open up the d drive and here i'm
02:27 - going to create our react application so
02:29 - run the command mpx
02:31 - create
02:32 - react
02:34 - react
02:35 - app and name of the application
02:37 - uh let's name it
02:39 - react
02:40 - weather app
02:43 - weather app and this is going to take a
02:45 - couple of minutes to finish so
02:47 - uh stay around with me
02:55 - and finally our application has been
02:58 - installed and created so we can open
03:00 - that in your editor of choice for me
03:02 - it's visual studio code
03:04 - it's in on drive d
03:06 - dev folder react feather app that one
03:08 - select formula
03:10 - uh first i want to install two packages
03:12 - that will need in order to create this
03:14 - application the first one is the
03:17 - accordion that we need for the days
03:19 - forecast so
03:21 - npm install
03:24 - react uh accessible
03:28 - accord accordion that's the name of it
03:38 - okay added one package there are some
03:40 - warnings but you can ignore that
03:42 - the second one is
03:45 - npm install react
03:48 - uh select
03:50 - async
03:52 - paginate uh this one
03:54 - this one has some warning issues or
03:56 - compatibility issues actually because
03:58 - it's optimized for the older version of
04:00 - react it's going to be updated
04:02 - eventually i try this library it works
04:05 - uh as expected so but don't worry if you
04:07 - get the warnings and you will most
04:09 - likely if you if you're installing this
04:10 - on your new versions of react just use
04:13 - the force flag in order to be able to
04:14 - install it
04:17 - but don't worry yeah you can use other
04:19 - this is like a wrapper library for react
04:22 - react select
04:24 - package
04:25 - it gives you some additional options so
04:27 - that's why i'm using this
04:29 - and that's it now we can npm
04:32 - run start
04:34 - and start
04:34 - start our application
04:44 - it starts the development server
04:49 - localhost 3000
04:53 - and we have our application up and
04:54 - running that's nice
04:57 - okay
04:58 - so
04:59 - the first thing is first to explain you
05:01 - what we are going to have on this
05:02 - website on these applications we will
05:04 - have three components the first one is
05:06 - going to be search on very top and we
05:08 - have two widgets one is for the current
05:11 - weather and the second one or the third
05:14 - one is for the forecast so let's create
05:16 - a new folder here new folder and name it
05:19 - components
05:21 - components cool and the first one let's
05:24 - build the search
05:26 - new folder
05:28 - call it
05:29 - search
05:30 - okay
05:32 - and in the search let's add new file
05:36 - search.js okay
05:41 - so this is going to be a component that
05:43 - is going to be using the async paginate
05:46 - [Music]
05:48 - package that we just installed okay
05:51 - so create
05:52 - const
05:55 - search
05:58 - and let's just create a dummy component
06:00 - to integrate it so return
06:05 - hello
06:07 - and export
06:09 - default
06:11 - search
06:12 - okay
06:15 - and we can use this component inside of
06:17 - our address
06:20 - component let's remove this boilerplate
06:22 - code
06:26 - and we need to import
06:28 - our search component let's remove the
06:30 - logo
06:33 - so
06:34 - import
06:37 - search component here okay
06:41 - and we have our hello
06:42 - okay nice
06:44 - so i want to add some of the global
06:47 - styles to
06:48 - to our application so let's create a
06:50 - container
06:51 - here for the class name
06:53 - container and i just want to
06:55 - add some maximum width so it's not full
06:58 - width of the of the window so i can go
07:01 - to app.css remove all this boilerplate
07:04 - code and just add the container
07:08 - container and add max width
07:11 - of
07:14 - 1080. and add a margin so it's centered
07:19 - so margin is
07:20 - uh
07:21 - 20 pixels and auto so
07:24 - top and bottom 20 pixels left and right
07:26 - auto so it centers the the container
07:30 - okay nice
07:32 - now i want to add couple of global files
07:35 - so global styles so that we don't have
07:37 - to worry about that later
07:39 - so for the font family i want to remove
07:41 - this default one and let's add roboto
07:46 - and there's a fallback ariel
07:49 - and set that as important also i want to
07:51 - add a background color i don't want i
07:52 - don't like
07:54 - the white one so use the uh d
07:57 - d5
07:58 - uh
07:59 - d4
08:02 - d4
08:03 - yes that's the one
08:07 - let's just preview that
08:10 - nice
08:10 - okay
08:12 - this looks like it's cloudy okay so we
08:14 - can proceed to build our search
08:17 - component
08:18 - so let's close the app index everything
08:22 - so inside of the of this
08:25 - search let's
08:26 - import
08:28 - the only component that we're going to
08:29 - use which is asympaginate so
08:33 - async page this is the name of the
08:35 - component
08:36 - and this component is going to have
08:37 - couple parameters so first one let's put
08:40 - the placeholder the placeholder is going
08:42 - to be search for city because we want to
08:46 - search for cities to show
08:48 - to display the weather for it
08:50 - now
08:51 - the second parameter is the bounce time
08:53 - uh we don't want to fetch the api uh and
08:56 - call the back and every time that we
08:58 - press the key so we want
09:00 - i mean we want but you know if
09:01 - somebody's pressing very fast
09:03 - it's gonna send a bunch of requests so
09:06 - here we are adding some d bounds for 600
09:09 - milliseconds
09:11 - then for the value we're gonna add
09:13 - search
09:14 - but
09:15 - we will create the search
09:18 - variable using geostate hook so const
09:21 - search
09:24 - and set search this is for updating that
09:27 - variable set
09:30 - search okay
09:32 - and we'll use use statehook for it okay
09:36 - and the initial state of this variable
09:38 - is going to be null
09:39 - okay
09:41 - then on on change method we want to
09:44 - update this value and we want to emit
09:46 - that
09:47 - to the parent
09:48 - to the app.js where we will fetch
09:52 - you know the weather
09:54 - weather data and pass that to two other
09:56 - two widgets
09:57 - so on change
09:59 - we'll call
10:00 - candle
10:03 - on change
10:05 - okay let's create that one
10:08 - okay
10:10 - console on change
10:12 - this will retrieve search data the data
10:14 - that we entered into as inpaginate
10:17 - component
10:19 - and
10:20 - what we want to do this is going to be
10:22 - very simple we will use the set search
10:26 - method to update our search and we will
10:28 - use
10:31 - search data for it
10:34 - and then we will we will have
10:37 - the the event
10:39 - the function actually which which is
10:41 - passed from the parent component
10:43 - let's call it uh on search
10:47 - change
10:50 - and we will just call that
10:53 - and pass the data that we got from the
10:55 - input
10:58 - okay
11:00 - cool
11:02 - now what we need to do is we need to go
11:04 - and to
11:05 - add that
11:07 - that event so go to
11:09 - app.js and on the search
11:12 - add the
11:13 - on search change and add the handle
11:17 - on
11:18 - search
11:20 - change
11:22 - okay
11:23 - so
11:24 - this can be static right now so we don't
11:27 - we can implement that later so just add
11:29 - const
11:30 - candle on search change
11:33 - and it will receive search
11:36 - data
11:40 - it needs to be fed error function okay
11:46 - and just we can just close a log that
11:48 - for now okay
11:50 - search data okay cool we can continue
11:52 - implementing the things that
11:54 - yeah so as you can see we have built
11:57 - already
11:58 - uh
11:59 - this
12:01 - uh this autocomplete search but it
12:03 - doesn't work because we haven't
12:04 - implemented anything yet
12:06 - so what you need to do
12:08 - is
12:09 - when we start searching we need to fetch
12:12 - the fetch the data
12:14 - and
12:14 - how we can do that
12:17 - is uh we first
12:22 - okay so how we do that is
12:24 - let me see uh we need to call uh the
12:27 - method
12:29 - for
12:31 - loading the options so here we have an
12:34 - additional load options property and
12:38 - because we are adding because we are
12:41 - loading the the properties for the input
12:43 - uh
12:44 - through async request so we don't have
12:47 - anything downloaded uh previously and we
12:50 - when we type in some some characters
12:52 - like for example we are searching for
12:53 - london we type in lond and then it's
12:56 - searching this api to find all the
12:58 - cities with that prefix so we need to
13:00 - code that so the name of the
13:03 - of the method is going to be load
13:04 - options and now let's create a
13:09 - const the name of the method is load
13:11 - options and this one
13:15 - it will
13:15 - retrieve the input value so this is the
13:17 - value
13:19 - that we are typing into the input
13:22 - and we will use that value to pass into
13:24 - the to the fetch method to the url and
13:27 - to get the data okay
13:30 - uh so
13:32 - this is the this is the
13:35 - uh
13:36 - this is the api that we use to search
13:38 - the cities so here what we can do is we
13:40 - can go and copy copy all this
13:44 - uh code and paste into our application
13:46 - but let's create a additional file for
13:48 - this we don't want to store it inside of
13:50 - this search component so let's place it
13:53 - in the source folder new file and call
13:56 - it api.js
13:59 - like like so okay
14:03 - so what we can do is we can just
14:06 - copy the options
14:08 - and the fetch method and we will extract
14:10 - the url
14:12 - so inside of the api
14:14 - let's export the options
14:16 - and call the options as
14:18 - geo
14:20 - api
14:22 - api
14:23 - options so what is inside of these
14:25 - options is the method that we use for
14:27 - the fetch and like i said uh in the
14:30 - headers there is a key and host so the
14:32 - key is the one that you need to get into
14:33 - your account
14:35 - and the host is uh same for for for this
14:38 - api for everybody
14:40 - now we can what we can do is we can
14:42 - create a constant
14:44 - export
14:46 - const geo
14:48 - api url
14:50 - and
14:52 - use this one
14:54 - schwann geo
14:58 - and
14:59 - paste it here
15:00 - okay
15:01 - now we can use this fetch
15:04 - we can save this file go to search
15:08 - and now we can use that to fetch
15:11 - so what we need to do is we need to
15:13 - return new fetch
15:15 - and we can import now the url so this
15:18 - url and we can import the geoapi options
15:22 - so
15:24 - import
15:28 - from
15:32 - from api
15:34 - okay from api and we need to import uh
15:38 - url and geoapi options
15:41 - so these are the parameters that we need
15:43 - to pass into the fetch method
15:46 - okay so here
15:48 - i can add the
15:50 - backticks so it's easier to
15:53 - to implement the variables so first is
15:55 - the
15:56 - api url then we use cities
16:00 - and then what i want to do is if you go
16:02 - to
16:03 - to the api itself and if you check the
16:05 - parameters
16:07 - you have the mean population parameter
16:09 - which is optional but with this
16:11 - parameter we can limit and filter out
16:14 - the small places if you're going to
16:15 - search for bigger cities you can enter
16:18 - like a million uh
16:20 - people in in the city and it will give
16:22 - us much better search so that's
16:24 - something which i'm which i'm which i
16:25 - want to do so set the mean
16:27 - population to a million users
16:31 - 90 users million uh
16:35 - million
16:36 - population okay
16:38 - and then we want to add a name prefix
16:41 - so for this one we want to enter
16:44 - whatever we get from this search change
16:48 - so
16:50 - okay actually from this input value
16:56 - let me format
16:57 - document so it's nice and
17:00 - okay so that's it series we get the mean
17:02 - population the name prefix okay
17:04 - and once we get the fetch then we want
17:07 - to map our response to the json because
17:09 - we get the
17:11 - uh we don't get the mapped when we're
17:13 - using fetch we don't get mapped right
17:14 - away using the json and then we're just
17:16 - logging out response and we can see what
17:19 - we get
17:21 - uh later on we can map this uh to to
17:25 - to match the format that we need for the
17:27 - async paginate
17:29 - component
17:31 - so let's test it out
17:32 - if i open up our app
17:34 - okay let's see option is not defined yes
17:37 - because we haven't
17:40 - implemented the options here
17:42 - okay these are the options
17:45 - again these are the options for the
17:47 - fetch method
17:48 - cool
17:50 - and now if i open up the console
17:55 - okay
17:57 - if i type in
18:00 - belgrade let's say
18:02 - uh we get the data but we also get some
18:05 - errors let me just see one one at a time
18:08 - so we get the data the actual data
18:11 - uh yeah
18:12 - okay this is the initial data
18:15 - uh let me see what is the error a load
18:17 - option
18:18 - should be an object with an options prop
18:20 - okay yeah the issue with this is
18:24 - uh that we are not providing the correct
18:26 - format to the to this input so that's
18:28 - why it's giving the error and it's
18:29 - giving us this loader but if i check the
18:32 - network
18:34 - i can see that the fetch is actually
18:36 - actually successful so we fetch let's
18:38 - see the headers in the headers we said
18:40 - we said uh this is the url prefix is
18:44 - belgrade and for the pale for the
18:46 - preview
18:48 - if i open the data we got two results
18:50 - and the first one is belgrade serbia and
18:52 - the second one is belgrade district so
18:53 - it works but the format for this input
18:56 - is not correct so let let us fix that
19:02 - the format that it requires is an object
19:06 - array array of objects with the value
19:08 - and label properties
19:11 - so inside of this second
19:14 - then
19:15 - we can format that so
19:17 - return
19:20 - an object which actually has an options
19:24 - parameter and this options parameter
19:29 - needs to have a array of objects so we
19:32 - will use response.data
19:34 - and we can map that
19:36 - okay we don't need a semicolon so what
19:39 - we get here is name of the location or
19:41 - city however you want to call it
19:44 - city
19:45 - and then we will return an object here
19:47 - we will have a value
19:50 - and a label
19:55 - and for the value what we need we need
19:57 - latitude and longitude in order to
20:00 - implement the weather api let me show
20:01 - you so if i go to
20:04 - to the services and for the apis let me
20:06 - just show you what is the required
20:08 - uh for the current feather let's say
20:11 - if we check the api call we need to pass
20:14 - in the api key the one that we got when
20:15 - we registered and we need to pass the
20:17 - latitude and long longitude so these two
20:20 - parameters we get from the geo api
20:24 - so that's why we need to store
20:26 - let me close that so that's why we need
20:29 - to store the value of latitude and
20:30 - longitude
20:32 - and we get that
20:33 - if i open up the console
20:36 - again
20:37 - and open up the network tab
20:39 - again let's type in belgrade
20:45 - let me open up uh
20:46 - you have exceeded the limit per second
20:48 - okay
20:50 - i have basic plans so you need sometimes
20:52 - to type in
20:53 - slower
20:54 - build grade let's let's type in again
21:02 - okay let me refresh
21:09 - now let me open up the network
21:13 - okay now we got it
21:14 - because i'm on free plan so it's limited
21:16 - you cannot send unlimited number of
21:18 - requests per minute
21:20 - but if we open up
21:21 - uh this data we can see that
21:24 - latitude and long longitude we have
21:26 - these parameters so
21:28 - let's let's copy them
21:34 - so for the value we got the
21:37 - we can use backticks
21:40 - and we will use city
21:42 - dot latitude
21:46 - and add a space
21:48 - and
21:49 - the second one is
21:51 - city
21:54 - city dot
21:56 - longitude
21:58 - it's hard to pronounce for me
22:00 - okay
22:01 - so and later on we can extract this from
22:04 - this value and the label is something
22:06 - that user can see or you whoever is
22:08 - using the application so again use the
22:09 - backticks
22:11 - and
22:12 - use the city let's use the city dot
22:16 - we can use the name of the city so
22:19 - here belgrade and the country code
22:23 - city dot
22:24 - name comma
22:28 - city.country
22:30 - code
22:32 - okay
22:34 - see and that should be now correct
22:36 - format let me format the document
22:42 - okay let's try now
22:44 - let me clear the console if i type in
22:46 - belgrade
22:53 - it's searching
22:54 - let me refresh again
23:00 - and as you can see finally we get the
23:02 - name of the city and the code of the
23:04 - country so if we select that
23:07 - uh we have selected the first value and
23:10 - as you can see on our in our code
23:13 - we are calling the on change
23:16 - unchanged we are calling the handle on
23:18 - change we are passing the data we are
23:20 - setting the new value and then we are
23:22 - calling the answer change which has been
23:24 - passed from the app.js file
23:27 - and that
23:28 - method is just logging out the the the
23:32 - value that we're getting here
23:34 - so that's pretty much what we wanted to
23:36 - to get from from the search
23:38 - just to get the latitude and long
23:40 - longitude from uh from the cities that
23:42 - we want now we can create new applica a
23:45 - new component
23:47 - and the first one can be the current
23:49 - feather so we'll have like i said two
23:51 - two components two widgets the first one
23:53 - is gonna show the current feather and
23:55 - the second one is gonna show uh the
23:57 - forecast for uh seven days if available
24:02 - so let's create new components so add
24:05 - new folder name it
24:08 - current
24:10 - current dash
24:12 - weather okay
24:14 - cool
24:15 - and then add a new file
24:19 - current
24:21 - weather
24:22 - dot js
24:24 - and we will have a style file here as
24:26 - well new file
24:28 - current
24:30 - dot css
24:32 - okay
24:35 - now let's import this the style first
24:38 - import
24:42 - current
24:44 - feather.css
24:46 - okay and let's create a dummy component
24:49 - so that we can integrate that into
24:51 - import that inside of the app.js file
24:53 - and start building so const
24:56 - currents
24:57 - rather
24:59 - equals
25:02 - header function and then just export we
25:04 - need to return something here
25:07 - return just hello
25:09 - and then export default export
25:12 - default current weather
25:18 - okay
25:19 - now we can import that into app.js file
25:24 - import current weather from
25:28 - from the components current weather and
25:30 - then just
25:35 - place that component in the return
25:38 - okay
25:39 - so we should get hello yes here it is
25:45 - so here uh we will use a little bit of
25:47 - css in order to style this nicely but
25:50 - stick around with me if you if you hate
25:52 - styling you you probably shouldn't be
25:55 - doing a front end so yeah there's going
25:57 - to be more a little bit more of css so
25:59 - let's remove uh hello so this is
26:02 - basically going to be like a box small
26:04 - box and it will just display uh
26:07 - the
26:08 - you know the details for the current uh
26:10 - weather
26:11 - so let's add
26:13 - let it div which is going to be a
26:15 - wrapper
26:17 - and add a class name of weather
26:21 - right there okay
26:23 - and here uh we'll have two sections the
26:25 - first one with the temperature and the
26:27 - second one the bottom one uh with other
26:29 - details so add a div on top
26:33 - and that one will have class name
26:35 - exactly like that top
26:37 - okay
26:39 - so here on top you will have
26:41 - uh
26:43 - two paragraphs actually
26:45 - two paragraphs the first one you'll have
26:47 - the name of the city let's call it let's
26:50 - build now static
26:52 - and then we can implement the api
26:54 - belgrade
26:55 - and description
26:58 - sunny
26:59 - and let's add the classes as well
27:02 - so let's have the class name for city
27:06 - and a class name
27:08 - for
27:09 - weather
27:11 - description okay
27:14 - and then on the right side we will have
27:16 - an image
27:17 - that will represent what is the
27:19 - uh the weather like so it's nice and it
27:22 - has nice graphical representation
27:25 - so let's
27:26 - place an image and
27:28 - let's add an alt
27:31 - weather you need to to be careful about
27:34 - the accessibility
27:36 - add a class name
27:37 - of weather
27:39 - weather icon and for the source
27:42 - uh we need actually
27:45 - uh i have downloaded of
27:47 - icons for for this open weather api and
27:50 - this will be available in the folder
27:53 - along with uh on github with the
27:56 - complete code base so you can download
27:58 - there and follow along with me so and
28:01 - this needs to be included into the
28:02 - public folder so let me do that
28:05 - so for me that's in downloads
28:09 - let me show you it's in downloads so i
28:11 - will copy this folder
28:13 - and go to the public folder open that in
28:16 - file explorer
28:18 - and just paste
28:20 - so this folder contains all the
28:23 - all the states that we have for the
28:25 - weather so it will be available in the
28:29 - github repository so you can download
28:31 - and use this exactly the same ones but
28:32 - you can use different ones as long as
28:34 - you follow the naming convention here
28:37 - you know when when it's sunny it's 0 1 d
28:39 - dot png and so on so we can use that one
28:42 - for a static one
28:46 - okay so the source is
28:49 - icon
28:51 - icons slash
28:54 - 01d dot png
28:56 - okay okay let me see and yes we got that
29:01 - cool
29:03 - and i think i think that's it so
29:08 - we get we have the name of the city
29:10 - description we have the weather
29:12 - yeah now let's apply some styles to it
29:15 - so let me close
29:16 - all others
29:19 - and let me open up the css so the first
29:22 - one let's add some styles to the weather
29:25 - this is a this is a wrapper so
29:30 - let me just make sure it's spelled
29:31 - correctly okay so add a width of 300
29:34 - pixels
29:37 - and let me just see if it's connected
29:39 - properly i always like to you know
29:43 - uh to make sure that everything works
29:45 - correctly before i get
29:47 - too far into developing right
29:50 - uh border radius
29:52 - set the border radius to 6 pixels so
29:54 - this should be
29:55 - a nice dark box so set the box let's add
29:58 - a little bit of box shadow so set
30:02 - 10 pixels this is uh these are the
30:05 - parameters for the box shadow minus 2
30:07 - pixels
30:09 - 20 pixels
30:11 - set here to 2 pixels
30:13 - and set the rgb we want it to be
30:16 - transparent black so
30:19 - 0 0 0
30:21 - and 30
30:24 - this is a standard
30:26 - value for the box shadow
30:30 - and you can see it adds a little bit of
30:31 - separation
30:34 - add a color this is going to be a dark
30:37 - dark box so add a color which is white
30:41 - and the background color
30:43 - 333
30:45 - [Applause]
30:47 - okay
30:48 - nice let's add a little bit of margin so
30:52 - it's centered
30:53 - margin 20 pixels on top so it's
30:56 - separated from the input
30:58 - and auto on the right side zero on the
31:00 - bottom and the auto on the left side
31:04 - yeah so now it's on the center of the
31:05 - page okay
31:08 - now let's style the
31:11 - the top
31:13 - top of the of the
31:16 - um oh let me just see if like
31:20 - this top actually needs to image needs
31:22 - to be inside of the top so yeah
31:24 - okay
31:26 - and we need to have
31:27 - a div around the paragraphs because i
31:30 - want to use the flexbox in order to
31:34 - you know to align them
31:36 - so use a div
31:38 - or you can use a span whatever you want
31:40 - okay let's format the document
31:42 - cool
31:43 - okay so for top i want to display that
31:46 - as flex
31:49 - display
31:51 - flex
31:52 - justify content
31:54 - space
31:55 - between so they are on the edges
31:58 - and align them in center
32:01 - line center okay
32:05 - okay nice we'll add a little bit of
32:06 - padding here uh
32:11 - on the weather so it's not like that so
32:13 - add a padding
32:17 - and a padding uh zero on top 20 pixels
32:21 - 20 pixels and 20 pixels okay
32:25 - that's more like it
32:27 - okay
32:29 - now let's try style the city
32:33 - that's the name of the class
32:36 - city
32:38 - so for the city let's leave it
32:43 - let's leave it white everything should
32:45 - be white on this dark background so font
32:47 - weight
32:48 - 600 so it's it's bold one size 18 pixels
32:54 - line height set it to one so it's really
32:57 - close to the bottom
32:59 - the bottom description
33:01 - and uh
33:03 - margin reset
33:05 - to zero so it's one next to each other
33:07 - letter spacing
33:09 - set the layer spacing to one pixel
33:12 - okay
33:14 - let's see the result okay
33:16 - that's nice
33:18 - now for the description
33:20 - let me copy paste
33:22 - the class name
33:28 - okay
33:29 - now set the font weight here to be
33:32 - a little bit slimmer so 400 one size
33:35 - this should be smaller supporting pixels
33:39 - 40 pixels line height
33:41 - to be
33:42 - one same as the city and for the margin
33:45 - against that reset it to zero so there
33:47 - is no space
33:48 - on top or the bottom
33:50 - okay so they are next to each other
33:53 - okay
33:56 - uh now let's
33:58 - style the weather icon
34:00 - we just need to set the height
34:02 - i mean the size here so set the width to
34:06 - be 100 pixels
34:08 - 100 pixels
34:12 - and yeah that should do it
34:15 - okay
34:16 - let's now continue on building so let's
34:20 - build now so this is the top part let's
34:23 - build the bottom part
34:25 - bottom
34:27 - actually
34:29 - add a class name of bottom
34:33 - and here
34:34 - add a paragraph with a class name of
34:36 - temperature
34:40 - so this one will uh will be showing the
34:42 - actual temperature so
34:44 - 18
34:45 - degrees of celsius so i don't have
34:48 - i don't know how to write a degree so
34:51 - degree
34:53 - celsius so so use so let me just google
34:56 - that and copy paste
34:59 - okay i can copy the symbol here
35:04 - okay
35:06 - nice
35:08 - temperature uh then below the
35:10 - temperature i mean next to the
35:12 - temperature on the left side is going to
35:13 - be temperature on the right side
35:15 - there are going to be details so add a
35:17 - div with a
35:19 - class name of
35:20 - details
35:22 - and here
35:24 - let's add div
35:27 - and we will have rows so we will have
35:29 - label and then the value so add a class
35:32 - name of
35:33 - parameter
35:35 - row and inside of the row you will have
35:39 - a label and then we'll have a value
35:43 - so for the first one the very top one we
35:45 - will just have uh the label so span
35:48 - class name
35:50 - parameter label
35:53 - parameter
35:54 - dash label and here we will say say
35:57 - details
35:59 - then
36:00 - create another row
36:02 - in the second row
36:04 - for the label
36:06 - i'm going to create fields
36:08 - like
36:10 - and for the fields like we want to add a
36:13 - value to it so parameter label and the
36:16 - second one is parameter value
36:19 - value and the feels like could be
36:21 - anything like
36:23 - 22 degrees
36:25 - of celsius so let's
36:28 - copy this
36:29 - because i know how you write this
36:32 - character
36:34 - okay let me let me preview that
36:36 - okay nice
36:39 - feels like we need uh
36:43 - we actually uh
36:45 - we will actually separate this this will
36:48 - be styled using the flex so it will be
36:51 - separate right now it looks like it's uh
36:54 - it needs spacing so but let's leave it
36:55 - until we use the css to fix this
36:58 - so
36:59 - now we'll we will just copy paste
37:01 - uh this exact row and add additional
37:04 - fields so what i want to display next so
37:06 - i want to display basically almost all
37:08 - the fields that are necessary that we
37:10 - have available on the open weather api
37:13 - so
37:14 - add a wind
37:16 - and
37:17 - i mean wind can be anything i don't know
37:21 - two meters per second
37:27 - then add another one
37:29 - uh the humidity
37:33 - humidity goes in percentages so i don't
37:35 - know 15
37:37 - percent
37:42 - add another row
37:44 - and for this one let's add the pressure
37:48 - pressure
37:51 - at a value
37:52 - it goes in pascals i think yeah
37:57 - now what you want to do is we want to
37:59 - style this
38:00 - so let me just see what we have
38:03 - yeah this looks solid but we need to
38:05 - style it looks more much more nicer okay
38:10 - okay so let me first before i proceed
38:13 - for my document i like everything to be
38:15 - nice and nicely formatted
38:17 - okay so here the first one is the uh
38:20 - actually
38:22 - i think we can use the bottom one
38:25 - sorry
38:26 - i i think we can use the bottom styling
38:27 - to apply that to top top styling to
38:30 - apply that to bottom as well because i
38:32 - want it also to be display flex to
38:34 - justify content space between and to
38:36 - line them
38:37 - centrally so yeah
38:40 - and as you can see it looks better so i
38:42 - just want to make this much bigger and
38:44 - this a little bit smaller and separated
38:46 - so let's do that
38:49 - okay the first one is temperature
38:57 - temperature
38:59 - so
39:00 - set the font weight
39:02 - to be bolder 600
39:06 - font size to be real really large so 7
39:10 - not 707
39:13 - to the auto
39:16 - okay a letter spacing
39:19 - minus 5 pixels i want this to be really
39:22 - really dense
39:23 - and margin 10 pixels
39:25 - on top and bottom and the left right to
39:27 - be zero
39:29 - and this is uh
39:31 - this is very noticeable so
39:34 - that's something that you want the first
39:35 - the first thing that that everybody
39:37 - who's looking for the temperature
39:38 - details is looking for uh temperature
39:40 - that's the most important thing so
39:41 - that's why it's the largest here
39:46 - and it's most noticeable
39:48 - okay so for the details i think
39:52 - yeah it's name details
39:56 - set the width to be a hundred percent so
39:58 - to take the rest the rest of the
40:02 - uh the rest of the space and add a
40:05 - little bit of padding to the left side
40:07 - to 20 pixels
40:11 - okay
40:12 - nice
40:14 - now let's start style the rows so the
40:17 - class name is parameter row
40:22 - so we want to display that as well flex
40:26 - and to justify content
40:29 - space between
40:33 - so that we have separation between the
40:34 - labels and the values
40:36 - like that
40:37 - okay
40:40 - now let's style the labels and the
40:42 - values
40:45 - parameter label
40:51 - and for the label align them to left
40:57 - font weight to 400 this is a default
41:02 - just reset that and font size
41:05 - to be a little bit smaller to 12 pixels
41:08 - okay
41:12 - that's much more nicer
41:14 - then for the
41:16 - parameter value
41:23 - okay
41:24 - align them to right
41:27 - right okay
41:28 - font way this one this needs to be a
41:30 - little bit bolder so it's more
41:32 - noticeable the value
41:35 - and the font size to 12 pixels
41:40 - okay
41:46 - that's nice and the last thing is which
41:48 - i want to do is i want to add a little
41:51 - uh border
41:53 - border on the details so
41:55 - on the top one so
42:00 - what about what i can do is i can go to
42:03 - details on top
42:05 - add a class here for this one
42:08 - save that and then what i can do
42:12 - is i can go and add a border bottom two
42:18 - parameter what is the name of it
42:21 - parameter label okay
42:25 - parameter label dot top
42:29 - and border
42:30 - bottom so it's separated one pixel solid
42:34 - white let's see how that looks
42:38 - uh yeah
42:39 - i mean we can remove it we can leave it
42:42 - however we want it
42:43 - but maybe i don't like it so let's
42:45 - remove that
42:47 - let's remove the top
42:50 - i think without the border is much nicer
42:53 - like like so
42:54 - okay so now we have static uh
42:58 - current weather widget now what we want
43:00 - to do is we want to implement the real
43:02 - data and once we select something from
43:05 - this
43:06 - input search we want to see that
43:09 - so let's do that
43:11 - so what we want to do is we want to go
43:13 - into adjacent file
43:15 - and
43:18 - on the address file and
43:21 - start searching here for the data that
43:23 - we have
43:24 - so what we need to do first is we
43:28 - we need to use the search data but
43:30 - if you if you check the console let me
43:33 - see
43:35 - if you check the console we get the
43:37 - object and here we get the label and we
43:39 - get the value so we need to split the
43:41 - value and get the uh
43:43 - we need to get these two values in order
43:45 - to search this is the location value yes
43:47 - let
43:48 - latitude and longitude
43:51 - so
43:53 - what we can do is we can search data dot
43:56 - value
43:59 - and we can split that
44:03 - so split that with the space character
44:07 - and store that
44:10 - in two variables the first one
44:14 - is let me see what we are
44:16 - storing the first one is the latitude
44:18 - and the second one is the long longitude
44:21 - so first one is it's going to be a lat
44:24 - uh latitude and second longitude okay
44:27 - so now we have the values
44:30 - for the location
44:31 - and we need to fetch it so
44:33 - let's check the api to see what is the
44:35 - url
44:38 - so we need to go to
44:41 - open weather api
44:43 - we can go to the current feather
44:46 - and we can just
44:49 - copy the url
44:51 - let me open the app here
44:54 - so
44:58 - because we are gonna fetch the two uh
45:01 - two api calls the first one is going to
45:03 - be for the current feather and the
45:04 - second one is going to be for the
45:05 - forecast we're going to use the promisol
45:07 - in order to fetch the both of these so
45:10 - how we're going to do that so let's
45:12 - create just two fetches and store them
45:14 - into variables and pass that to the
45:16 - array of the promise at all so first one
45:19 - call the current
45:21 - weather
45:23 - patch
45:24 - and use the fetch method
45:27 - and here we need to pass
45:29 - we need to pass the url that we just
45:31 - created
45:32 - so but
45:33 - i think the smarter thing would be to
45:35 - create
45:36 - a constant
45:40 - in our folder for the api
45:43 - and export this
45:45 - so go to api
45:48 - and
45:49 - export
45:51 - const
45:55 - weather
45:57 - api
45:59 - url
46:02 - okay
46:05 - and we will need key as well so let's go
46:07 - take the key
46:11 - go to
46:12 - my api keys and take the key
46:17 - so x
46:19 - export const
46:22 - weather
46:25 - api key
46:28 - okay
46:29 - nice
46:31 - you can save that and now we can use
46:35 - here so
46:37 - we can
46:38 - we need to import that first on top
46:42 - import
46:44 - the driver url from
46:47 - api
46:48 - let me just see
46:51 - oh actually it's in the same folder so
46:53 - it's from api
46:55 - and we need to import the
47:00 - api key
47:03 - api key here
47:08 - okay then instead of this
47:11 - api key we can replace
47:14 - and put our api key
47:18 - weather api key
47:22 - and then instead of this
47:24 - latitude we can put our actual uh
47:27 - variables that we got latitude and
47:30 - longitude
47:33 - and that should form
47:35 - our fetch so first we have the base url
47:38 - then we have the weather
47:40 - then we have latitude longitude and the
47:42 - a uh ape app id actually this is a
47:45 - shorthand work app id
47:49 - and that's the first uh
47:51 - fetch the second one needs to be for the
47:53 - forecast so let's go and take that one
47:56 - so let me open up
47:58 - uh
48:00 - my plan my plans and the second one is
48:02 - the forecast
48:04 - and we can take api call here as well
48:07 - can close this we don't need it anymore
48:11 - and
48:12 - okay let me see
48:14 - and i can paste it here
48:16 - i can use this one to create another
48:18 - variable and this one is going to be
48:21 - uh for
48:22 - forecast fetch
48:24 - and we're fetching the same url uh
48:27 - different is that we are using forecast
48:29 - now instead of the weather
48:32 - everything else is the same
48:34 - okay
48:36 - and now what we can do is we can use
48:38 - promise
48:40 - promise dot all and pass an array of
48:43 - these two so let's pass the first
48:46 - current weather
48:48 - the order is important here because in
48:51 - order that we are sending the promises
48:52 - uh the return is going to be in that
48:54 - same order because we are going to get
48:56 - back the array as well
48:57 - and the second one is going to be a
48:59 - forecast fetch
49:01 - and
49:02 - then inside of then we we need to call
49:05 - async function
49:07 - we will get response
49:09 - here we need to map
49:11 - what you're getting
49:13 - and we'll get
49:15 - in the first one we will get
49:18 - response
49:20 - zero
49:21 - dot json we need to call the json method
49:24 - in order to to map the
49:27 - response so we need to use a weight
49:30 - and store it inside of the variable so
49:32 - use whether
49:34 - no but the response
49:37 - name of the of the constant and we can
49:40 - copy paste that to create a second one
49:43 - but we will use the
49:45 - thus the second or the index one
49:48 - and for that one is going to be forecast
49:50 - response
49:51 - for cast response okay that's cool
49:56 - now what i want to do is uh i want to
49:58 - create
49:59 - uh hooks two hooks
50:01 - to store
50:03 - these two so get a hook named
50:06 - current
50:07 - weather
50:11 - okay i see that i have a typo current
50:13 - widow fat it needs to be fetch
50:16 - fetch and current feather fetch here
50:18 - okay this is the right one
50:21 - okay
50:22 - so current feather
50:24 - and the set current weather set
50:27 - current
50:28 - weather this is the first hook
50:31 - you state
50:33 - okay
50:34 - and that imports use state let me see
50:36 - yeah it implied here
50:38 - and the value of the initial value is
50:39 - going to be now
50:41 - and let's copy paste that the second one
50:43 - is going to be
50:44 - the forecast
50:46 - and the method for updating that
50:48 - variable is going to be set forecast
50:51 - forecast okay
50:54 - now what we can do
50:56 - is we can update
50:58 - once we get the responses and once they
51:00 - are mapped to a json we can update them
51:03 - so set current weather
51:10 - set current weather to the weather
51:12 - response
51:16 - okay
51:19 - and
51:23 - set the forecast
51:27 - to the forecast response
51:32 - the only thing which i want to add i
51:34 - want to extend the data that we're that
51:36 - we are sending and saving here because
51:39 - uh
51:40 - the data that we're getting from the api
51:43 - doesn't contain the label that we're
51:45 - displaying displaying displaying here
51:48 - like abu dhabi ae so we are just getting
51:51 - like the city uh the country sorry so
51:53 - but i want to display exactly the same
51:55 - as it's here so in order to do that we
51:57 - can use the information that we got from
51:59 - geo uh api uh database so and extend our
52:05 - our objects to pass that so what we can
52:07 - do is we can just add a city parameter
52:09 - and
52:11 - use the search data
52:15 - search data
52:17 - dot label and this label
52:20 - is coming from this search here
52:23 - so here we are creating this label
52:25 - where we add a city name and city
52:26 - country code actually country code not
52:29 - city country code but country code code
52:32 - of the country
52:33 - so let's extend it
52:35 - like like so and
52:37 - here just
52:40 - let me use a spread operator
52:42 - to create a new object from from these
52:45 - two
52:46 - and now we have the city for both of
52:48 - these
52:49 - okay
52:51 - and we want to at the end if this fails
52:53 - we want to catch
52:56 - and we want to cancel log
53:03 - okay
53:04 - and that's it uh
53:06 - in order to test if this works let's
53:08 - just log
53:09 - these two variables to see do we get the
53:11 - information that we need so we need to
53:12 - get the current weather and the forecast
53:15 - console.log
53:18 - current weather
53:24 - and console.log
53:26 - forecast okay
53:28 - and let's go and search
53:31 - okay for now it's now let me refresh
53:35 - okay let's type in again belgrade
53:40 - let's select belgrade
53:42 - and as you can see uh we get to
53:45 - get back
53:46 - the first one is from the line 28 which
53:49 - is the current weather
53:51 - so we get the current weather as you can
53:52 - see we get all this feels like feels
53:54 - like humidity temperature and all that
53:56 - and the second one contains the list
53:59 - which is the
54:00 - which is the forecast for the future
54:02 - days
54:04 - so it works correctly
54:06 - okay
54:09 - now what i want to do is i want to pass
54:11 - the data to
54:13 - to our current weather and then display
54:15 - that instead of
54:17 - this dummy data
54:19 - okay
54:21 - so here we can add uh
54:24 - data
54:25 - and pass in
54:27 - for the current feather is going to be
54:29 - this current feather
54:33 - variable
54:34 - and we can check if that exists then
54:37 - show the the widget it doesn't exist
54:38 - don't show anything
54:40 - so so that we are
54:42 - sure that
54:43 - if we are inside of the component that
54:45 - we don't have any errors
54:47 - so
54:48 - we can do this like this
54:50 - so inside of the current feather we need
54:52 - to
54:53 - huh we need to get a data
54:56 - like like so
54:59 - you can save this you can save this and
55:01 - now we can
55:02 - now we should go and uh replace
55:06 - replace the things that we have there so
55:08 - okay
55:09 - let me just format the document before
55:12 - proceed
55:15 - and yeah
55:17 - now we can work so let's first do the
55:19 - top part
55:21 - okay
55:24 - uh for the top part we actually are
55:26 - adding
55:27 - this city uh label which which could be
55:31 - a location but yeah
55:33 - so call it data.city
55:37 - and for the weather
55:39 - description
55:41 - let's check the api
55:46 - we can check the network as well
55:49 - and actually network has been
55:52 - clear cleaned off so
55:54 - for the description
55:57 - let me see
55:58 - it's inside of the weather
56:00 - zero and description broken clouds okay
56:02 - that's the current weather
56:04 - here
56:07 - so
56:10 - go to data
56:12 - dot weather
56:15 - zero
56:16 - dot description
56:19 - okay let's save that up
56:22 - and let's see we have broken clouds even
56:24 - though
56:24 - uh the image is not
56:26 - changed yet so let's change that as well
56:29 - so we get the icon as you can see here
56:32 - which we can use to load
56:34 - the image so
56:36 - here
56:38 - let's add the expression
56:40 - let's add
56:41 - the backticks
56:43 - remove the double
56:46 - double quotes
56:47 - and then instead of this name we want to
56:49 - have this dynamic
56:51 - and this is going to be data dot same as
56:53 - here just
56:55 - the last property is going to be
56:58 - uh
57:00 - icon
57:01 - yeah
57:04 - and now as you can see we get the cloud
57:06 - as well so if we type a different city
57:08 - like london
57:15 - london okay it took some time to you can
57:18 - see that actually london is the same
57:19 - weather as well so
57:21 - let's see
57:23 - miami
57:29 - it's it's nicer there so yeah
57:31 - cool
57:33 - so
57:34 - yeah let's back to belgrade let's
57:37 - implement
57:38 - the rest of the
57:40 - properties
57:41 - so
57:42 - that's
57:43 - uh that completes the top part now we go
57:46 - to details let's open up the bottom part
57:50 - okay
57:51 - for the bottom part first one and most
57:53 - important one is the temperature
57:55 - so what we
57:57 - need to do is go to data dot let me see
58:00 - what was the name of it
58:02 - name and the temperature
58:06 - okay uh i think that one thing
58:11 - so one thing i forgot as you can see uh
58:14 - the units here are not in celsius are in
58:17 - fahrenheit so how you can do that is you
58:19 - can
58:20 - you you can go to the urls
58:23 - and here
58:26 - after the api you can add the units that
58:28 - you want to have so
58:30 - you just you would just add units equals
58:33 - metric
58:34 - and here also
58:36 - units equal metric okay
58:40 - now we should get
58:44 - uh the units in different formats so
58:46 - let's see
58:48 - open up here
58:50 - main temperature
58:52 - okay let me refresh everything
58:55 - okay
58:58 - upgrade
59:00 - open up
59:04 - as you can see it's 21 now
59:06 - we need to round this because we don't
59:08 - want to show it like that so but yeah
59:10 - it's so it's in main and temperature
59:15 - go to data
59:16 - dot
59:17 - main dot temp
59:19 - and i want to use
59:21 - the method round in order to
59:24 - to round that value so use the
59:27 - math.round
59:31 - okay
59:34 - let's see okay that's 21 now
59:37 - and for the details feels like
59:40 - so it's in the same
59:42 - main
59:45 - so basically the same as we did here
59:49 - math.round
59:52 - okay
59:53 - data.main dot feels like
59:56 - just replace the temperature it feels
59:58 - like
60:01 - and that's feels like it's 22.
60:05 - the next one is the wind
60:10 - so data dot let me see where is the data
60:13 - for wind
60:14 - it's here wind.speed
60:19 - data.wind.speed
60:22 - okay
60:25 - it's nice
60:28 - uh for community
60:34 - data dot
60:35 - i think the community is on the main as
60:37 - well yes main humidity
60:42 - the
60:43 - main dot humidity
60:45 - and the last one is pressure
60:47 - i think it's also under domain beta dot
60:50 - mean dot
60:51 - pressure probably
60:53 - pressure that's that's right
60:58 - and if i say that
61:00 - it should give me all the informations
61:02 - okay nice so let's let's test it out so
61:05 - if i go and search for paris
61:08 - i recently been into paris so
61:10 - unfortunately it's broken clouds so
61:12 - let's try
61:13 - barcelona
61:17 - okay i'm trying to find something where
61:19 - is uh sunny but yeah it looks like it's
61:23 - it's cloudy everywhere in europe yeah
61:25 - but you can see
61:26 - it feels like it's 30 so it's updating
61:28 - everything and this looks correctly
61:31 - this looks nice so what we want to do
61:32 - next is we want to uh
61:35 - we want to build the second widget uh if
61:38 - i go to the app.js file here we are we
61:41 - build the search bar
61:42 - we build the current weather and the
61:44 - next thing which which i want to do is i
61:46 - want to build the forecast okay
61:49 - so let's do that
61:50 - let's create new components
61:53 - inside of the components folder
61:55 - new folder name that
61:57 - forecast
62:00 - and add a new file
62:03 - forecast okay
62:06 - actually the file needs to have the js
62:08 - extension
62:10 - shares and i think for this one we will
62:12 - also have a little bit of styles so add
62:15 - new file
62:17 - forecast dot css
62:20 - cool
62:21 - so let's build
62:24 - the dummy component so that we can
62:25 - implement that into
62:27 - api
62:28 - into the app uh component sorry
62:30 - a const
62:31 - forecast
62:34 - and it's
62:36 - just export default
62:39 - for default forecast
62:42 - and just return something
62:45 - like
62:46 - hello okay
62:51 - now import that in the abjs file
62:54 - below the current weather
62:56 - so just call the forecast
63:00 - and import forecast
63:02 - next to the search
63:04 - so import
63:05 - forecast like so
63:08 - let's test if it works yes it works it's
63:11 - here
63:12 - so here
63:14 - in this component we will have a days
63:17 - like
63:18 - and uh accordions and you can click on
63:21 - the accordion on the on the box and it
63:23 - expands and show you the more
63:25 - information more details about a
63:27 - specific date and what are the details
63:30 - of the weather
63:31 - so let me close all the
63:33 - all the other components all the other
63:35 - files and open up a forecast.js file
63:38 - okay
63:40 - so
63:41 - let me remove the hello
63:44 - and here we will use that
63:46 - that
63:47 - accordion component that we installed
63:51 - oops
63:52 - let's remove that at an empty
63:58 - tabs and
63:59 - first thing on top i want to add a label
64:03 - which will say uh daily so daily
64:06 - forecast placement either add a class
64:08 - name of title and
64:12 - add a
64:13 - daily label
64:14 - okay i forgot to add here
64:16 - parentheses
64:20 - okay
64:25 - so and then below that add accordion
64:29 - accordion it auto imports it for me from
64:32 - react accessible accordion
64:34 - on top
64:36 - and
64:39 - uh i want to pass a property which is
64:41 - called
64:42 - allow zero expanded so this one uh
64:45 - allows
64:46 - allows uh
64:48 - all the accordion to be closed if you
64:50 - allow zero expanded so it means
64:52 - basically all according can be closed
64:54 - otherwise one of the accordion needs to
64:55 - be opened up
64:58 - okay
64:59 - uh so for the forecast uh we are already
65:02 - getting the data we can pass that in so
65:05 - here we get the forecast data and we can
65:08 - implement right data right away so we
65:09 - don't have to do the dummy data so what
65:12 - we can do is we can check if the
65:13 - forecast data is there we can pass in
65:16 - the data
65:18 - otherwise don't display that that
65:20 - component and inside of the forecast we
65:23 - will receive
65:24 - the data okay
65:28 - cool
65:29 - now inside of the accordion
65:31 - uh
65:32 - we need to loop through that data to the
65:34 - through the list that we are getting so
65:41 - let me just open up so we are getting
65:42 - the list and these are the days of the
65:45 - forecast and we need to look through
65:46 - these uh days and get
65:50 - the details similar like we are doing
65:52 - here
65:53 - but this is just the forecast you know
65:55 - okay so on the top
65:59 - uh
66:00 - open up the accordion
66:02 - korean item
66:06 - okay
66:08 - so and we want to
66:10 - use the data
66:11 - that we got
66:13 - and loop through the list
66:16 - data.list dot and we want to just
66:19 - display the seven days that's it so use
66:22 - the splice zero
66:24 - seven okay
66:25 - nothing else and we want to map that
66:28 - here we will have
66:30 - item and index because we don't have
66:31 - index for the list and we need to use
66:34 - the index for the keys
66:36 - okay
66:40 - okay
66:42 - so here
66:43 - we need first to add
66:47 - item heading so it's called accordion
66:50 - item heading
66:51 - let me see if it's
66:53 - yeah it's or imports it so the first one
66:55 - we need we need to have the two items
66:57 - inside of the accordion the first one is
66:59 - according item heading and the second
67:00 - one is accordion item panel so this is
67:03 - something that you see
67:05 - when the recording is not collapsed when
67:07 - it's collapsed uh when you click on it
67:09 - you get the expanded part which is uh
67:11 - according item panel
67:13 - so the second one is
67:16 - accordion item panel let me see
67:18 - this one
67:20 - okay
67:22 - heading
67:28 - but we need to have one parent that's
67:29 - what it says so
67:31 - one parent item so we can use the
67:34 - according item as a parent
67:36 - okay here
67:39 - and then we can place these two
67:41 - inside of it okay nice
67:44 - coding item
67:45 - uh but we don't have coding item
67:47 - imported
67:48 - so let me import that uh it should be up
67:51 - imported from the
67:54 - from this one imports so it doesn't have
67:56 - to be separated
67:58 - separately imported so according item is
68:00 - here
68:01 - actually it's not
68:04 - accordion has been imported according
68:06 - item heading according item and
68:08 - according
68:09 - accordion item panel as well okay cool
68:13 - here let me format that
68:15 - okay nice
68:17 - now
68:18 - for the according item we need to add a
68:20 - key
68:21 - and again i'm gonna use the index
68:26 - idx
68:28 - and for the heading we need to place
68:31 - accordion item button that is the name
68:33 - this is required to do you cannot do it
68:34 - without it
68:36 - accordion item button
68:39 - uh
68:41 - item
68:43 - button
68:46 - let me just see
68:49 - okay let me import that
68:50 - as well
68:53 - including item button
68:55 - and then here
68:56 - you can just add a hello
68:59 - just for
69:00 - testing so let me just test it if i have
69:02 - imported everything correctly and
69:04 - there's no errors yes as you can see
69:06 - it's uh it gives us this daily okay i
69:09 - have a typo here used to be daily
69:12 - we have this label and we have
69:15 - uh
69:16 - seven hellos for seven days one two
69:19 - three four five six seven okay nice
69:23 - uh now what what i want to do is i want
69:25 - to create here
69:26 - uh
69:27 - the title basically the the day name
69:30 - and uh the show the the image of a day
69:34 - and show the weather the the temperature
69:36 - the max and minimum temperature and once
69:37 - you expand the accordion you we will
69:39 - show the deplete uh details like like
69:42 - pressure uh and you know wind uh and all
69:45 - the humidity you know and all other
69:47 - properties
69:48 - so here create a div
69:51 - add a class name
69:53 - of daily
69:55 - item
69:56 - okay
69:57 - and then on the left side we'll have an
69:59 - image
70:01 - again
70:02 - add an else
70:03 - with a
70:06 - weather string
70:08 - add a class name
70:10 - icon
70:11 - small
70:12 - and add a source
70:15 - which is the most important one right
70:17 - so
70:18 - uh and the source is going to be again
70:21 - in the icons
70:22 - and it's going to be the same as we did
70:24 - there as we did in the in the current
70:27 - weather so
70:28 - but here we are
70:31 - accessing that from item
70:35 - item
70:37 - let me just open up
70:40 - we can we can reuse some of the code
70:47 - weather
70:50 - zero icon.png okay we can reuse this one
70:54 - so item dot
70:59 - dot weather
71:02 - okay
71:04 - let's save that
71:06 - okay we get the broken image
71:10 - let me just check again
71:14 - icons
71:16 - item icons
71:18 - weather zero and here is the icon
71:21 - okay
71:23 - let me just log to see if we get
71:27 - if you are getting the right data so
71:29 - inside of the
71:31 - weather forecast we have the weather
71:35 - i'm going to actually have the main
71:40 - main
71:40 - and no it's inside of the weather
71:43 - weather
71:44 - and inside of the icon
71:46 - okay and what we are getting see it's 10
71:49 - and okay maybe you don't have that icon
71:53 - for barcelona
71:54 - let me see 10n uh let me open up the
71:58 - icons
72:01 - we have that actually
72:02 - oh let me see what's happening
72:06 - and let's see what is the url maybe the
72:08 - url is wrong icon stand png
72:19 - okay yeah we have these curly braces
72:21 - curly brace actually so
72:24 - this one
72:26 - that's broken our url
72:28 - okay
72:30 - let's try now again
72:33 - belgrade inside belgrade
72:37 - because belgrade never let us down nice
72:40 - we get the images
72:43 - okay
72:44 - i'll open up the console so we can
72:45 - reference to it
72:48 - the second thing which i want to add i
72:51 - want to add the forecast
72:53 - you know which is the days so
72:56 - add a label
72:59 - and a class name so it it will say
73:01 - friday saturday sunday and so on
73:04 - last class name
73:06 - day
73:08 - and i want to create a
73:10 - array of days so here let's create an
73:13 - array
73:14 - call it a week
73:16 - days and add
73:18 - an array
73:21 - and let's
73:23 - call first monday
73:25 - it is tuesday
73:29 - with
73:31 - wednesday
73:34 - third thursday
73:37 - friday
73:41 - saturday
73:42 - and sunday
73:45 - okay
73:46 - that's nice
73:48 - now we need to first determine what is
73:50 - the day in a week so if we are on
73:52 - wednesday if today is wednesday we want
73:54 - to get the forecast for thursday friday
73:56 - saturday sunday and so on so first
73:59 - create a variable day in
74:03 - a week
74:05 - and we get that by new date dot get
74:09 - day
74:10 - method okay
74:12 - that's cool
74:13 - and then what we want to do is we want
74:15 - to
74:17 - determine day in a week so
74:19 - and get a number so this returns a
74:21 - number so if it's a wednesday it will
74:23 - return like three and then we want to
74:25 - cut off this part
74:27 - the first part
74:28 - and append it concatenate on the on here
74:31 - so we will have uh array with thursday
74:34 - friday saturday sunday monday tuesday
74:36 - wednesday
74:38 - that's what we want to do so how to
74:39 - achieve that is we use weekdays dot
74:43 - slice
74:44 - slice doesn't uh
74:46 - doesn't change the original array
74:49 - and we want to take uh the first the
74:51 - starting point is date
74:54 - we have a typo here day in a week
74:59 - the in a week okay
75:04 - so first uh the starting point is day a
75:06 - week and the second one is the length of
75:09 - this array
75:10 - so weekdays
75:13 - dot land
75:15 - and then we want to concatenate that
75:17 - and use the
75:19 - again weekdays
75:23 - so concatenate the first part
75:26 - weekdays dot slice
75:29 - zero
75:32 - day in a week
75:34 - okay
75:35 - and that that should do it
75:41 - for my document
75:43 - and we can log in
75:44 - you can log that to see if it works so
75:47 - console. but we haven't created
75:49 - variables so create a variable cost of
75:52 - forecast
75:53 - days let's say
75:57 - and assign there and let's log the
75:59 - forecast days so today is
76:02 - thursday
76:04 - so let's see if if it works correctly
76:08 - so friday saturday sunday monday
76:11 - tuesday wednesday thursday so it works
76:13 - correctly so the next day tomorrow is
76:14 - friday
76:15 - yeah
76:17 - happy day
76:19 - okay
76:20 - so
76:21 - now we can implement the days here label
76:25 - day and we can call the
76:28 - array
76:29 - user rate that we just created one that
76:31 - we just created so forecast days
76:35 - and oops
76:37 - forecast days and add the index
76:42 - the index from the from the map
76:47 - okay cool
76:49 - here
76:50 - then
76:51 - let me see how it works how it looks
76:53 - okay friday saturday
76:55 - nice
76:55 - the next one we want to add a
76:57 - description
76:58 - so
77:00 - add another label add a class name of
77:04 - description
77:06 - and here
77:08 - we are accessing that via item dot
77:12 - oh let me see here
77:13 - uh weather description okay
77:18 - here
77:20 - save that
77:23 - okay let's try again
77:28 - let's try abu dhabi okay
77:30 - clear sky we don't have any space
77:32 - separation but this will be style
77:34 - using css so don't worry about that and
77:37 - we will have another
77:39 - label call it min max
77:42 - so it will show the minimum and the
77:44 - maximum temperature for that day
77:46 - and uh let me see
77:48 - how we
77:50 - get the temperature so main.temp
77:53 - this is how we get the temperature so
77:57 - uh so item
78:00 - i mean temp but
78:02 - we need we don't want the temperature
78:04 - just we want minimum and the maximum so
78:06 - let's open the main and we have the
78:09 - minimum is here
78:15 - and let's copy the
78:17 - celsius
78:22 - okay
78:23 - and we want to round that
78:27 - round
78:30 - okay
78:31 - and we want to
78:33 - display
78:34 - maximum as well
78:43 - maximum should be max i think
78:47 - temp max okay
78:52 - okay and again
78:54 - add the celsius
78:58 - here
79:01 - and let's format that again
79:03 - and let's preview that
79:06 - okay yeah now we get the values uh for
79:08 - some reason i see that maximum and
79:10 - minimum are the same values so
79:13 - yeah something is wrong with the api but
79:15 - i guess
79:16 - they will fix that or not but yeah we
79:18 - use the data that we got it's not our
79:20 - fault but yeah you know this is these
79:22 - are the maximum and the minimum values
79:25 - so we get the
79:27 - the icon we get the day we get the
79:29 - description we get the minimum and the
79:30 - maximum value
79:32 - so what i want to do now is i want to
79:34 - style
79:35 - apply some styles so i make this a
79:36 - little bit nicer
79:38 - let open up the forecast.css
79:42 - now let's start first from the style
79:44 - from the title
79:45 - uh
79:47 - how we get pedal
79:50 - close the other files
79:52 - for the title i just want to increase
79:55 - font size set it to 23 pixels
79:58 - and
79:59 - a little bit bolder so font
80:02 - font weight to 700
80:05 - okay
80:09 - uh it doesn't work because probably we
80:11 - haven't imported the css
80:14 - yes we haven't so
80:16 - import
80:18 - import
80:20 - forecast
80:22 - for
80:23 - cast.css okay
80:28 - okay now it should work
80:34 - oh actually
80:35 - it's in the same directory so
80:38 - okay
80:40 - okay now daily works
80:42 - okay what i want to do next is i want to
80:45 - style uh the first one is
80:49 - the title the second one is daily item
80:51 - okay
80:54 - so let me copy paste that
80:57 - here
80:58 - okay
81:01 - daily item so set the background color
81:04 - to
81:05 - f5 f5 f5 so
81:09 - uh
81:10 - the daily item is going to be
81:12 - uh is going to be like i said the panel
81:15 - uh which shows you
81:17 - the state when it's not clicked when
81:19 - it's not expanded so it's gonna be white
81:22 - almost white but once you expand it's
81:23 - gonna be it's gonna have the same uh
81:26 - it's gonna have transparent background
81:28 - you will see
81:30 - set the border radius
81:32 - to 15
81:34 - pixels i like border radius set the
81:36 - height of 40 pixels
81:40 - height to 40 pixels margin to 5 pixels
81:43 - so we separate the panels
81:47 - okay much nicer yeah the image is
81:49 - breaking the layout but yeah you can see
81:51 - how the panels are going to be
81:53 - uh
81:54 - displayed align item center
81:58 - yeah but before that we need to create
82:00 - it uh to add a display flags
82:03 - okay
82:05 - uh create a course add a cursor as a
82:07 - pointer so so that the user knows that
82:09 - they need to click
82:11 - set the font size
82:14 - so 14 pixels
82:16 - and add a little bit of padding
82:18 - 5 pixels on top and bottom and 20 pixels
82:22 - on left and right
82:26 - yeah that looks much better okay
82:31 - i don't want to save anything so
82:33 - let me
82:34 - style the icons now so that
82:38 - it's inside of the box
82:40 - so use the icon
82:43 - and set the width to be 40 pixels
82:48 - okay
82:48 - as you can see now it's much better
82:52 - okay so now let me see what's next
82:55 - next is the day so
82:58 - the day in a week
83:03 - so set
83:04 - the color
83:07 - two
83:08 - two one two one
83:10 - two one okay the dark one
83:13 - uh
83:14 - for flex set the one one so what i want
83:17 - uh
83:18 - i want the the name
83:21 - of the day and the description to take
83:23 - the
83:24 - uh the equal amount of uh the space and
83:27 - for the icon and for the temperature to
83:29 - go on the sides so that's why i'm gonna
83:31 - uh set the friday day and the
83:34 - description to one in one flex
83:36 - so it you know spreads around
83:41 - set the font weight to
83:43 - 600
83:46 - and the margin left to 15 pixels
83:48 - so it's separated from the icon
83:51 - like so so you can see
83:53 - right now it takes
83:54 - all the space but once we set that to
83:56 - the description it will split
84:00 - okay
84:03 - so let's take the description
84:10 - description
84:12 - okay set the flex
84:14 - to
84:15 - 1 1 and let's see
84:18 - and now you can see it takes uh it takes
84:20 - the weight of it
84:22 - flex 1 1
84:24 - margin right
84:25 - 15
84:27 - so it's moved
84:28 - on the right and text align to the right
84:32 - okay
84:34 - that's more like it yeah
84:40 - let me just format the document
84:42 - and let's proceed so now let's style the
84:45 - mini max the temperatures i just want to
84:47 - change the color so it's a little bit
84:49 - different nothing else
84:51 - uh color two seven five
84:55 - seven five seven five five
84:59 - okay
85:00 - and this will give this gray color okay
85:04 - cool
85:06 - that's already much nicer
85:10 - okay and let's see i think that
85:13 - completes that now we need to create the
85:15 - accordion panel so this is the part
85:17 - uh
85:18 - once we click on the panel
85:20 - it will expand and show show us the more
85:22 - details
85:25 - so inside of the accordion panel
85:27 - uh let's add a grid so we'll have again
85:31 - like rows and the labels
85:33 - so add a div
85:36 - and call it
85:38 - daily
85:39 - actually give it a class name first
85:42 - class name
85:43 - daily
85:45 - details
85:46 - grid okay cool
85:48 - and inside of it add another deal
85:52 - and this div
85:53 - is gonna have a class name
85:56 - uh daily
85:59 - details uh grid
86:01 - item let's call it like that
86:04 - and here we have two labels one is going
86:06 - to be
86:07 - uh
86:08 - the actual label in the second one is
86:09 - going to be the value so label
86:13 - and this one is going to be
86:15 - the first one is going to be pressure
86:20 - and
86:21 - second one we're gonna display the
86:22 - pressure so
86:24 - we're getting that from item dot uh
86:27 - let me just see
86:30 - item.name.pressure
86:32 - okay
86:36 - main dot pressure
86:38 - okay
86:41 - let me just test this
86:44 - so
86:45 - we're going to re reload
86:47 - page if it doesn't let's
86:50 - click something else
86:52 - so in right now you can see if we expand
86:55 - any of the these collapsible sidebars
86:58 - now sidebars but accordion sorry we get
87:00 - the pressure so let's enter all the rest
87:02 - of the details and let's style them
87:04 - so what i want to add is i can just
87:08 - copy paste discrete items and just
87:10 - change the
87:11 - the labels and the properties so the
87:13 - second one humidity
87:15 - and it's i think it's in the same
87:19 - object okay it's community yes
87:22 - just change the community
87:26 - okay let's copy paste again
87:29 - the next one is clouds
87:34 - so the clouds are in
87:36 - let me see
87:39 - okay
87:42 - they have separate
87:43 - property clouds at all cool
87:47 - okay
87:58 - then the next one is wind speed
88:03 - speed
88:06 - and we can take the wind speed from wind
88:09 - dot speed okay
88:12 - cool
88:13 - items.wind
88:15 - [Music]
88:17 - dot speed and it's meter per second
88:21 - is the unit
88:24 - there
88:26 - then the next one is the sea level
88:31 - c
88:32 - level
88:34 - [Applause]
88:37 - and the sea level is inside of
88:43 - main sea level okay
88:50 - mean dot
88:51 - c level and the units is in in meters so
88:55 - okay
88:57 - meters
89:00 - and let's
89:01 - add another one
89:03 - feels like
89:05 - this one is most important i think so
89:07 - feels like how you feel
89:09 - so it's from maine i think
89:12 - i think it's from
89:14 - maine
89:15 - uh feels like yes
89:20 - and i want to round this
89:23 - round
89:24 - [Applause]
89:26 - and this one is in celsius so
89:31 - we can remove this
89:34 - we can remove this yeah i don't need
89:36 - that
89:37 - okay
89:40 - let's try now so we can get the pressure
89:42 - humidity the clouds
89:46 - okay clouds yeah clouds going percentage
89:52 - nine dollars percent percentages
89:57 - um
89:58 - pressure also goes goes in
90:01 - past calls i think
90:02 - i'm not sure
90:04 - what is dna for pressure but yeah
90:06 - um pressure
90:09 - here and the humidity
90:12 - uh in percentage as well
90:15 - okay
90:19 - okay
90:21 - now we have all the information that i
90:23 - want but
90:24 - we need we need just to style it so
90:26 - let's again let's
90:29 - let's type in belgrade why not
90:32 - okay all the information feels like sea
90:34 - level wind speed clouds
90:36 - humidity and the pressure
90:39 - okay
90:40 - now let's open up the styles
90:44 - so
90:46 - what is the name of the class that we
90:48 - added a daily detail script let me just
90:50 - copy paste that why not
90:52 - that is the easiest way to do though to
90:54 - do so without making any errors so
90:57 - add a grid
90:58 - row gap
91:00 - zero
91:02 - okay
91:04 - and uh
91:05 - grid column this is the gap obviously
91:07 - between the columns column grid column
91:10 - gap 15 pixels okay
91:13 - so the gap between the the rows is going
91:15 - to be zero and between the columns is
91:17 - going to be you know 15 pixels
91:21 - okay so
91:23 - add a column gap 15.
91:26 - cool
91:27 - display as grid in order this to work
91:30 - right
91:31 - add a flex
91:32 - 1 1
91:35 - grid template
91:37 - columns to auto auto
91:41 - okay
91:42 - let me see how that looks
91:45 - okay so we have the grid right now
91:48 - and add a little bit of padding
91:50 - padding to five pieces on top and bottom
91:53 - and 15 pixels left and right and add a
91:56 - little bit of
91:58 - uh no
91:59 - for the roll gap
92:01 - that's it
92:04 - row gap should be
92:06 - zero yeah okay
92:09 - now the next one should i think it
92:11 - should be item oh yes daily
92:14 - item
92:17 - so let's copy paste that one
92:20 - and align
92:21 - items to center
92:24 - display as flex
92:29 - set the height to 30 pixels
92:34 - high to 30 pixels and justify content
92:38 - space between
92:41 - space between okay
92:43 - cool
92:46 - let me check how it looks
92:49 - okay we have some separation much nicer
92:54 - and i think that's pretty much it we
92:56 - just want to apply some of the
92:58 - some of these styles uh yeah
93:01 - to the labels so i want
93:04 - this one to be a little bit
93:06 - lighter and this one to be a little bit
93:07 - darker so the labels should be you know
93:10 - lighter and the values should be a
93:11 - little bit darker and that should you
93:13 - know that should do it so how we can do
93:15 - it is
93:16 - we can target it using the first child
93:20 - selector so we're targeting the class
93:23 - name the first child is this label the
93:26 - the last child
93:27 - is this one so
93:31 - so first child
93:34 - and the last child
93:39 - but
93:40 - i mean for the label okay
93:45 - label and for the first child set the
93:48 - color to be again seven five seven five
93:51 - seven five seven five
93:55 - and for this one should be a little bit
93:57 - darker two one two one two one
94:00 - color okay
94:04 - let's add a semicolon there as well
94:07 - and yeah here we have a little bit
94:10 - uh
94:11 - little
94:12 - oh here we go a little bit darker and
94:14 - here a little bit lighter so
94:16 - and i think that completes let me just a
94:18 - formatted document
94:19 - format
94:21 - this one as well and let's review what
94:22 - we got
94:24 - and what we built so if i refresh the
94:26 - application let me close the console
94:28 - what you can do is obviously remove the
94:31 - all the console logs you don't want to
94:32 - to leave that so right now we can search
94:35 - for the city once we load the page you
94:37 - don't you don't get any of the widgets
94:38 - because we don't have any information
94:41 - uh if you search
94:42 - belgrade
94:43 - because belgrade
94:45 - is the closest city to me
94:47 - we get details on very top like we like
94:51 - we built on the first
94:52 - component and the second one we get the
94:54 - forecast for the friday saturday for the
94:56 - seven days ahead and if you click on the
94:58 - on the accordion it gets expanded and we
95:02 - get the additional information so we can
95:03 - open up all the accordions depending on
95:05 - the day which we want to see the
95:07 - information
95:08 - then if you want to check for another
95:10 - city let's say we want to fly to the
95:11 - paris and we want to see what's where
95:13 - they're going to be like there and boom
95:16 - it gets up updated right away so we can
95:18 - see that he's going to be very cloudy in
95:20 - next day for the paris
95:22 - and that's it that sums up we built this
95:25 - awesome application i hope you guys
95:27 - enjoy it it took quite some time to
95:29 - develop this
95:30 - and i hope you enjoyed it like i said
95:32 - and you learned a couple of things here
95:34 - and there
95:34 - so yeah that's it
95:37 - well that's all for this react video
95:40 - thanks for stopping by and don't forget
95:42 - to subscribe
95:45 - code with slova
95:48 - thank you for watching the entire video
95:50 - to see more react tutorials click here
95:55 - [Music]
95:58 - you