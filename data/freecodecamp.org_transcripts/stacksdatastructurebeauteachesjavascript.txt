00:00 - a stack of books is a great example of
00:02 - the stack data structure if you make a
00:05 - stack of books the topmost book in the
00:07 - stack was the one that you put there
00:09 - last if you remove that book from your
00:11 - Stacks top you would expose the book
00:13 - that was put there before the last book
00:16 - Stacks are a first in first out type of
00:18 - service the last book you put on top of
00:20 - a stack would be the first book you take
00:22 - off the stack another example of a stack
00:25 - is your browser's back button if you
00:27 - look up here we just opened up
00:29 - facebook.com
00:30 - so we add it to the top of the stack of
00:33 - sites that we've already visited
00:34 - previously which is stack. push push is
00:37 - one of the stack methods you push
00:38 - Facebook on top of the stack this middle
00:41 - is what it looks like when we are
00:43 - visiting Facebook and then this bottom
00:46 - image is where we press the back button
00:48 - to navigate back to Twitter so we pop
00:51 - off the most recent URL and we just
00:53 - leave Twitter at the top of it the
00:56 - functions traditionally provided in the
00:57 - stack are push for placing data onto a
01:01 - stack pop for removing the top element
01:05 - of a stack Peak for displaying the top
01:09 - element of a stack and length or size
01:14 - for determining how many elements are on
01:16 - a stack a nice feature of JavaScript is
01:19 - that the array object already has all
01:22 - the functions we need in order to use it
01:25 - as a stack so you could just use an
01:27 - array as a stack I will show you how to
01:29 - do this us using an array but then I
01:31 - will actually create a stack class and
01:32 - show you how that works too I'm going to
01:34 - use an array stack to find words that
01:36 - are palindromes a palindrome is a word
01:38 - that is spelled the same forwards and
01:40 - backwards such as Bob b o b or race car
01:43 - r a c e c a r okay so we have VAR
01:48 - letters equals an empty array and that's
01:51 - the stack because remember I said arrays
01:54 - are have all the functions of a stack so
01:56 - look at how this program works first
01:58 - we're going to set a word to be anywhere
02:00 - we want and we're going to choose race
02:02 - car which is a
02:04 - palindrome and then we are going to have
02:07 - a variable which is just a a empty
02:10 - string for RW or reverse word we're
02:13 - going to use the stack to fill up the RW
02:17 - variable with the reverse of the word
02:19 - variable the first thing we're going to
02:21 - do is put the letters of the word into
02:22 - the stack so we have a for Loop here and
02:25 - we're going to start at index zero and
02:28 - go to the last IND index of the word
02:30 - length so an index in a string is just
02:34 - which character we're looking at so
02:36 - we're going to do letters which remember
02:37 - is our stack. push the stack function
02:40 - where you push something on top of the
02:42 - stack and we're going to push word index
02:46 - I so that's just going to take this for
02:49 - Loop is just going to take each letter
02:51 - of our word because we have index zero
02:54 - index one index two each letter is a new
02:56 - index and push it onto the letter stack
03:00 - now we are going to pop off the stack in
03:03 - reverse order so we can create the RW
03:06 - variable which is the the reverse of the
03:08 - word variable another for Loop and now
03:11 - we are going to have the RW and we're
03:14 - going to add one letter at a time from
03:16 - the stack by popping off the top letter
03:21 - and because they were put in order
03:23 - they're going to be popped off in
03:24 - reversed order now we have a string that
03:27 - should be the reverse of the the the
03:30 - first word so word and r word should be
03:32 - reverse of each other now to check if
03:34 - it's a paland Drome we just say if RW
03:37 - equal equals equals worked it is a pal
03:39 - Drome or else it's not a pal Drome so
03:43 - let's run that and see what happens and
03:46 - race car is a palr but if we change that
03:50 - to free code camp and run
03:54 - that nope it's not a paland Drome okay
03:58 - that was just a basic use usage of a
04:00 - stack using an array now I will show you
04:02 - how to implement a stack in JavaScript
04:05 - so you can understand Stacks a little
04:07 - more you probably would never do that
04:10 - because you can use an array as a stack
04:12 - but this should possibly help you
04:13 - understand how Stacks work a little
04:15 - better so here's where we're going to
04:17 - create the stack which is going to be
04:20 - this function here we're going to have
04:22 - two variables this St count and this.
04:25 - storage now this. storage is an empty
04:28 - object and count is going to keep track
04:30 - of how many items are in the stack so
04:33 - here are all the different methods we
04:35 - have push this. push is going to add a
04:38 - value to the end of the stack you're
04:39 - going to pass in the value this. storage
04:43 - remember storage is the empty object at
04:45 - the index this. count we are going to
04:48 - add the value so we're going to put the
04:50 - value on the top of the stack or the end
04:53 - of the stack and then we're just going
04:55 - to increment count up one so now it's
04:59 - showing that we have another item in the
05:00 - stack the next function we're going to
05:02 - remove and return the value at the end
05:04 - of the stack or at the top of the stack
05:06 - which is this. pop this is going to pop
05:08 - an item off so if this. count equals
05:11 - equals zero that means there's nothing
05:12 - in the stack and we're going to return
05:14 - undefined because there is nothing in
05:16 - the stack once we return undefined we're
05:19 - not going to do anything the rest of
05:20 - this code here because we've already
05:22 - returned from this function if we're
05:24 - popping off something we're going to
05:26 - have to decrement the count so it's a
05:28 - count minus one so one less we're going
05:31 - to set the result to this. storage which
05:33 - is the object for our stack and at index
05:35 - this. count which is the last item in
05:37 - the stack and then we're going to delete
05:40 - that item and we're going to return
05:42 - result so you get the last item back but
05:45 - it will be deleted off of the stack and
05:48 - there's just a few more methods this.
05:51 - size is going to return this. count
05:54 - which is the number of items in the
05:56 - stack and then the last function is
06:01 - this. Peak which is going to return the
06:03 - value at the end of the stack but it
06:05 - will not remove it like pop so Peak and
06:08 - pop are kind of similar but pop removes
06:10 - the item and Peak does not remove the
06:12 - item so return this. storage and then
06:16 - this. count minus one um this. count
06:19 - would actually be the index one after
06:22 - the final item because what that's where
06:23 - you would add a new item but you would
06:25 - have to do minus one to get the last
06:28 - item and if you're peaking you do not
06:30 - want to pass in a value so let me take
06:32 - that that off there so you only pass in
06:35 - the value when you're pushing in
06:37 - something let's see how this would work
06:40 - down
06:49 - here okay we are going to create a
06:51 - variable called my stack which is a new
06:54 - stack which is what we just defined
06:55 - updator we're going to push one onto it
06:58 - to the top then we're push two on the
07:00 - top so it's just a stack with one and
07:01 - then two we're going to Peak and we're
07:04 - going to have to console.log this
07:06 - because it's going to just return the
07:09 - top number of the stack which should be
07:10 - two now we're going to pop off two so
07:14 - it's going to return two again but it's
07:16 - going to remove it and then if we Peak
07:18 - we should be back to one and before we
07:21 - run that I forgot these extra
07:22 - parentheses here because these are
07:24 - functions and you need the parentheses
07:26 - at the end of all functions so let's try
07:28 - that
07:30 - okay see we peaked at two we popped off
07:34 - two and then when we peaked again it was
07:37 - one because two was was removed now you
07:40 - can also add other things to the
07:49 - stack now we're going to push a string
07:51 - onto the stack and we're going to check
07:53 - the size then we're going to peek and
07:56 - we're going to pop it off and we're
07:57 - going to peek again so let's let's see
07:59 - what that does so we pushed one we
08:02 - pushed two we peaked which showed two we
08:05 - popped which popped off two we peaked
08:08 - again which showed one so there's only
08:10 - one thing in the stack then we pushed
08:13 - free code Camp the string and we
08:16 - console.log the size and now the size is
08:19 - two the stack is just one on the bottom
08:22 - and then free code camp on the top we're
08:24 - going to Peak which is going to show
08:26 - free code camp now we're going to pop
08:28 - which is going to pop off and show free
08:31 - camp and we're going to peek again and
08:33 - we'll see that it's just one on the
08:36 - bottom well those are the basics of
08:38 - Stack thanks for watching my name is Bo
08:41 - KS don't forget to subscribe and
08:43 - remember use your code for good