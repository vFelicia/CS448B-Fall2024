00:00 - chrome developer tools are extremely
00:02 - helpful for web developers and i think
00:04 - all web developers should have an
00:05 - understanding of what they can do
00:07 - nabhit who teaches this course is very
00:10 - experienced and he will teach you
00:12 - everything you need to know about them
00:13 - in this course we will have a look at uh
00:17 - chrome developer tools
00:19 - which you can go from
00:21 - zeros more tools and developer tools so
00:24 - so once you click on it the developer
00:26 - tools open
00:28 - right
00:28 - and so in this
00:32 - course we will talk about a look at each
00:34 - of these tabs what does what do we do
00:36 - with it and elements one what do we do
00:38 - in source one what do we do in network
00:40 - one console memory performance and write
00:44 - our security so all of these steps and
00:47 - then we'll try to make sure that we
00:49 - understand their basics
00:51 - and uh once you're done with the course
00:54 - so that you are very pretty much
00:56 - comfortable with it so without wasting
00:58 - for the most time let's get going and
01:00 - let's start with the basics
01:04 - so in this uh
01:05 - first lesson
01:07 - let's try to get comfortable of how do
01:10 - we
01:11 - move around the chrome developer tool
01:13 - how do we you know what lies where and
01:15 - few other things
01:17 - so
01:18 - how do you how can you open this is
01:21 - you what you can do is you can click on
01:22 - this three
01:24 - dots more tools and developer tools
01:27 - that's one of the way which is ctrl
01:28 - shift i also the shortcut
01:31 - in mac you can have command shift i or
01:33 - um it depends for us f12 also works
01:37 - right so once you click on it
01:39 - the
01:40 - the
01:42 - developer console opens
01:44 - and if you look at
01:47 - the
01:48 - the overall getup of this it is as of
01:50 - now dark
01:51 - what you can do is you click on this
01:53 - icon gear one okay let me make it bigger
01:57 - yes
01:58 - and you can change the theme from dark
02:00 - to light right for example if i
02:03 - make it light it
02:05 - needs a reload okay so what i will do is
02:09 - let me just uh maybe reload it again
02:14 - and
02:15 - then i just press ctrl shift i
02:18 - and now it is
02:20 - a
02:20 - light theme right
02:22 - and then
02:23 - you can have a layout also clover format
02:27 - you can also have some default settings
02:30 - for your record network log whether you
02:32 - want to whatever the activity is going
02:34 - on in the network you want to record
02:36 - that so or you want to enable javascript
02:39 - auto completion so these are the few of
02:42 - the settings which you can do right how
02:44 - much indentation you want and then
02:47 - workspace is something you can add the
02:49 - folders for example whichever project
02:51 - you are working in you can add it here
02:53 - and you can change the code in the
02:56 - chrome developer console only this tool
02:59 - also i will show that in
03:01 - in the relevant section and then there
03:04 - are some experimental features
03:06 - which are always there because they are
03:07 - not finalized and they are not really
03:09 - but you can still
03:11 - uh they can you know work on them
03:13 - and then you have ignore list anything
03:15 - which you want to speak from let's say
03:17 - whenever a website load you want to
03:20 - skip some scripts so you can add those
03:23 - and accordingly you have devices because
03:26 - you can also
03:27 - you know
03:28 - customize that you can also check how
03:31 - your
03:32 - website how do your
03:34 - the application will look and feel like
03:36 - on different devices this is where you
03:38 - can set right
03:40 - throttling is like
03:43 - for example uh let's say your app or
03:46 - website is going to be open on a on some
03:50 - locations where your download and upload
03:52 - speed will be less so you can have a
03:54 - profile name you can you know you can
03:56 - provide the download speed upload speed
03:59 - latency and you can check how does your
04:02 - application will behave so you can
04:03 - accordingly you know find in your
04:06 - applications then you have the shortcuts
04:09 - which will talk about you know we have
04:10 - every shortcut here so if you want you
04:14 - can you know people who are more fond of
04:16 - using a
04:17 - keyboard and they can
04:20 - these use check the shortcuts
04:22 - and uh
04:23 - full lists will be found here okay
04:26 - so so that's that's bit about it's it's
04:30 - it's color settings and all right
04:33 - and uh
04:34 - now if you look at this screen right
04:37 - this is these are the different view
04:40 - areas or different tabs which are
04:41 - available
04:42 - for example
04:43 - under elements tab you can have
04:46 - your
04:47 - html right
04:48 - then under source code it will load the
04:51 - different source codes of the file okay
04:54 - console where you can do some stuff
04:56 - where you can write your own javascript
04:58 - code
04:59 - network is like whatever
05:01 - files were loaded whatever
05:04 - ajax requests were sent
05:06 - all those things can be recorded here
05:09 - performance is basically you want to
05:11 - check how your overall
05:14 - website is doing
05:16 - memory
05:17 - and then applications this is something
05:19 - this browser also comes up with its
05:21 - local storage so local storage is it
05:24 - will remain only till the time the
05:26 - browser is open
05:27 - session storage will be released you
05:29 - know there even if you close and reload
05:31 - again and indexeddb are not we'll cover
05:34 - these in detail
05:35 - then you see this security lighthouse
05:38 - and these are other customers okay
05:41 - and and
05:42 - on the right hand side based on
05:43 - different tabs you can have different
05:45 - views for example elements you can have
05:47 - your css right for source you can have
05:50 - your source controller this is your
05:52 - console you can close it also
05:55 - right
05:56 - and so every tab every view has its own
05:59 - corresponding
06:01 - things which will help you in
06:03 - troubleshooting
06:04 - right so that's how you normally
06:06 - basically
06:07 - uh not troubleshoot things not basically
06:11 - this is a this is a single stop shop for
06:13 - you to troubleshoot your website related
06:16 - issues so i think
06:18 - at least we now understand okay
06:20 - what it is okay one more thing i forgot
06:23 - is if you click here
06:25 - as of now i have kept it as a separate
06:28 - one i can add it directly inside the
06:31 - window so for example if i say dock to
06:32 - the right so it will automatically open
06:36 - right and if i say
06:38 - dock below so it goes to the bottom and
06:41 - if i say dock left depends on individual
06:44 - to individual how you are comfortable
06:46 - with right and then
06:49 - also you can change your
06:51 - device tool
06:52 - this is like how this view will look on
06:55 - a mobile moto g4
06:58 - galaxy so these devices i hope you
07:00 - remember these are coming from
07:05 - this devices
07:06 - okay
07:07 - so you can check here only that how will
07:10 - your
07:11 - web app will behave
07:13 - in under different devices okay and you
07:16 - can click here
07:17 - and then if you click again these three
07:19 - dots
07:20 - you can you can have a
07:22 - kind of uh
07:24 - more tools for example apart from these
07:26 - tabs you can have these different types
07:28 - which is like something related to
07:30 - sensors network conditions you know
07:33 - right and then you can also open the
07:35 - shortcuts from here the same thing
07:37 - happens right
07:38 - and
07:39 - and you can have a run command which is
07:42 - like
07:43 - whatever operations you will see we are
07:45 - performing here we can do it
07:48 - do i just shortcut that let's say you
07:50 - want to show the network so you click
07:52 - here so it'll automatically go to the
07:54 - network
07:55 - right so this is like um you know
07:57 - terminal type kind of a thing
07:59 - console drawer is like this one where
08:01 - you can write your own code right
08:04 - and uh search as if in case you want to
08:06 - find something that's a global source
08:09 - okay
08:10 - so that's bit about uh our our console
08:13 - that
08:14 - at a very high level what how it is
08:16 - briefly organized
08:18 - now what we will do is we will create a
08:20 - small project which is like which will
08:22 - have a small html file a very basic one
08:26 - and a
08:27 - javascript file and a style
08:30 - because we will
08:32 - make we'll see how do we troubleshoot
08:34 - different things using this chrome
08:36 - developer
08:37 - so moving on let's first now create our
08:40 - small website not a website small page
08:43 - which includes all three different types
08:45 - of files
08:48 - okay so
08:50 - we have created a very simple page
08:53 - which is uh
08:54 - which is loading two files one is a
08:57 - style sheet style dot css now there is a
09:00 - my file js
09:02 - all it does is it has an h1 element some
09:04 - list basic one
09:06 - then
09:07 - click below to begin your journey
09:10 - and
09:10 - then it has a button right and button we
09:13 - have this event
09:15 - okay so this is pretty straightforward
09:17 - one there's nothing in frenzy right and
09:21 - when we say that okay
09:23 - they said for what we have in our css
09:26 - first is uh
09:28 - uh we have is a once
09:30 - we have as a body
09:33 - body tag always we have to find that
09:35 - this has to be the color let me just
09:38 - bring it here
09:39 - so now you can see that for body we are
09:42 - saying background is this s1 has to be
09:44 - of this color
09:45 - paragraph has to be this
09:48 - if i hover over the list over over the
09:50 - list the background color should become
09:53 - red for this
09:55 - right
09:56 - and
09:57 - in javascript all i'm saying is on click
10:00 - you do alert your update uh
10:04 - right
10:06 - what i am using to run this local server
10:09 - is basically
10:12 - what we call it as a live server you can
10:14 - add it as an extension as a
10:17 - add-on to your vs code right
10:20 - and then you can also run it so if you
10:23 - look here
10:24 - so here you can go to live server
10:28 - this is the library which i have
10:30 - installed and in case you want to run it
10:33 - all you need to do is ctrl shift e
10:36 - and do a live server also okay so now
10:40 - maybe let's look at this so this is how
10:42 - our
10:44 - website not a very great one right
10:48 - it's a very uh basic one
10:51 - and but this will help us and and in
10:54 - understanding how do we troubleshoot
10:56 - things how do we debug things and if we
10:58 - look at this the hover is also taking
11:00 - effect
11:01 - right to our website which we want to
11:03 - troubleshoot as set so let's now
11:07 - open our console
11:09 - okay
11:10 - and
11:11 - let me just reload it so that everything
11:14 - becomes clear so if i just reload it
11:17 - so now if you look here
11:20 - it network it shows what all files are
11:22 - loaded these two are others are web
11:24 - server let's just ignore it so our focus
11:27 - right now is this elements okay
11:29 - so what this does is it shows the
11:31 - complete html file
11:33 - for uh whatever is displayed for example
11:36 - body whichever
11:38 - whichever tag you will click on that
11:41 - will get selected for example body
11:43 - this is h1
11:44 - this is ul
11:46 - under this we have list right so it's
11:48 - basically this is m
11:50 - and if you look at on the right side
11:53 - it it automatically selects what all
11:56 - what all css is applicable for example
11:59 - style css one background color is this
12:02 - text line is centered
12:04 - there can be many multiple css but some
12:07 - of it will be applied to your element
12:09 - how do we find out that so what you can
12:11 - do is go to this computed one right and
12:14 - now you can see that
12:16 - for this body
12:18 - the pending is this
12:20 - border margin and then you can see
12:22 - clearly the color right what is the
12:24 - background color and you can also see
12:26 - from where it is coming right because
12:28 - there can be multiple side sheets from
12:30 - where they are coming and some are
12:33 - inherited for example if i just click
12:35 - here these are all the inherited one
12:38 - okay and these are all
12:41 - coming from
12:42 - the style sheets the basic one which is
12:45 - inserted okay
12:46 - and so we now
12:49 - and then we also have
12:52 - something like
12:54 - the rendered fonts and all the details
12:56 - now for example what if you want to
12:58 - select any of it so what you can do is
13:01 - you click here
13:02 - and let's say i want to see what is
13:04 - happening with learn so learn is getting
13:07 - selected which is a lie right
13:09 - and the style is here is
13:12 - there's only text line which is center
13:14 - and that is coming from body
13:17 - not from every time
13:19 - right and for example if i want to see
13:23 - a
13:24 - h1
13:25 - so for h1 the color is coming from
13:28 - set
13:29 - right and what i can do is
13:32 - if i go here and if i click here if i
13:35 - want to see
13:36 - how it will look like if i change it so
13:39 - for example i can make it red
13:41 - this
13:42 - and i can you know
13:45 - increase degrees gradients colors
13:48 - everything so whatever you want to do
13:49 - you can do that from there
13:51 - if you want to change the
13:54 - change of alignment right you can let me
13:57 - make it like this so that
13:59 - i want to make it as left line
14:02 - right so you can see how it looks right
14:05 - let's just keep it centered let's say i
14:08 - want to have a font size as
14:14 - size of
14:17 - 30 pixels so now it is increase
14:20 - 46 and then also it is increased
14:23 - so you can play around with its style
14:27 - right
14:27 - and
14:29 - then for example if i go to
14:31 - accessibility i can also see this
14:33 - another key from where it is coming
14:35 - and what others are here
14:38 - okay
14:39 - so
14:40 - that's how basically you can check
14:43 - what all styles are assigned to it and
14:46 - and how you can modify and try changing
14:49 - them now let's say that this one i want
14:51 - to modify the text also so what you can
14:53 - do is do a right click
14:56 - go to edit as html i say
15:00 - let me just slide it in a bit
15:02 - right
15:03 - and i can just see how it looks like
15:05 - right what if i want to see that how do
15:08 - this this node i can select it
15:12 - go to copy
15:14 - and copy
15:16 - js path
15:17 - and then if you go to console and you
15:19 - can write here this control v
15:21 - you can see it is already selecting this
15:24 - right
15:25 - and uh
15:26 - we will cover console in detail but this
15:29 - is how you select this element okay
15:31 - now
15:32 - going back again to elements and if i
15:35 - select this
15:36 - right
15:37 - and
15:38 - if i right click this again and i say
15:40 - copy
15:41 - copy styles then all the css which is
15:45 - applied to
15:46 - uh
15:47 - this h1 element
15:50 - will be shown copied you can see here
15:52 - this caller is this text line everything
15:54 - is copied right
15:56 - and
15:57 - let me just close it and for example if
15:59 - you have to you know inspect this
16:01 - element how you can do is do a right
16:03 - click
16:04 - and say
16:05 - inspect element which is like ctrl shift
16:08 - i
16:09 - right and it again open the same thing
16:12 - right it is already selected
16:14 - so
16:15 - now let's let's so we now understood
16:17 - okay this is how you can because the
16:19 - overall this is nothing but everything
16:21 - is at the end is an html
16:24 - tag so that's how you work with them now
16:27 - for example let's let's look at uh
16:30 - this
16:31 - unordered list which has these elements
16:33 - right so what i can do is let's say if i
16:35 - want to add one more list
16:38 - so i can do a copy or i can delete
16:40 - directly do a duplicate so you can see
16:42 - there is one more at it
16:44 - right
16:45 - i can also
16:47 - do a
16:48 - height element and this is hidden
16:52 - right you can see this is hidden but the
16:54 - space is this is it right
16:56 - and uh
16:58 - what if uh
17:00 - now if you must be noticing that
17:03 - if i
17:04 - hover over this
17:06 - it is it is turning into red right and
17:09 - if i go here and look into style of css
17:12 - and resource but we'll go into source
17:17 - once into the next lesson but for time
17:19 - being
17:20 - why it becomes red is because i have i
17:22 - have a css ally
17:26 - to colon power as background
17:29 - right and how do we trigger this is what
17:32 - you can do is for example
17:35 - this is
17:36 - the element which is selected i don't
17:37 - need to cover it right i need to over it
17:39 - to trigger this but another way out is
17:42 - you can click here
17:43 - right with this as selected you can
17:45 - trigger this element straight over and
17:47 - now
17:48 - when that state is reached you can see
17:50 - that how it is becoming red background
17:53 - color is a line
17:55 - and if i go here
17:56 - this also you will see that okay this is
18:00 - the reason
18:01 - the style daughter says that it is
18:03 - becoming red
18:05 - correct so that's how basically uh
18:08 - you are able to
18:10 - uh
18:10 - trigger different uh
18:12 - stuff right
18:16 - so now
18:17 - so we see how do we
18:19 - trigger this how do we edit an element
18:21 - and in fact you can add also once you
18:23 - say if i just say add it as html right
18:27 - so you can add whatever you feel like
18:30 - correct and now
18:32 - let's say that
18:34 - you want to add a
18:35 - you want to suppose let me first
18:38 - select this right so you can
18:41 - filter these properties also you can say
18:43 - that
18:44 - where is textview so you can filter
18:46 - those so text align you can clearly see
18:49 - those those those filters you can apply
18:51 - right
18:52 - and same goes for computed one also here
18:55 - also you can have a list
18:57 - and it will already filter place one
18:59 - list
19:00 - right
19:01 - and
19:02 - then you can also kind of uh you can add
19:04 - your class also for example if i want to
19:07 - add a new class here i can add any new
19:10 - class here so that is it right so so
19:14 - that's how basically and you can see the
19:16 - color is also change
19:18 - right
19:19 - so
19:20 - you can
19:21 - play around with the styles
19:23 - you can debug it you can check from
19:25 - where it is coming
19:27 - you can edit it
19:29 - right
19:30 - and
19:31 - you can also
19:33 - what you can do is you can also delete
19:35 - stuff you can hide stuff also
19:39 - okay one more thing what you can do is
19:41 - for example
19:42 - i want to see what part of my
19:45 - css and all those stuff is being used
19:48 - right so for that what you can do is you
19:51 - can have
19:52 - a click on control shift e
19:55 - you can open uh coverage show coverage
19:59 - okay
20:00 - and if i just click on reload
20:03 - right
20:04 - then it tells me that okay in my style
20:08 - these these parts are covered let me
20:10 - just uh maybe what i will do is let me
20:14 - modify something maybe i can have
20:17 - something like uh not this we cannot
20:21 - be one let's add something like p1
20:24 - right
20:25 - and just save and then we see
20:28 - in
20:29 - style.css right
20:34 - me just
20:37 - do it again this is from the command
20:39 - palette also you can go from here also
20:41 - run command ctrl shift e and i use it
20:44 - should be concept right you can then
20:47 - here if i double click this
20:49 - right
21:02 - yes if i
21:04 - i don't know what this
21:05 - does not work but if i double click this
21:07 - file i can see that my body these all
21:10 - parts have been used but li has
21:13 - has not been as well as p1 hasn't been
21:16 - but if i just say
21:17 - move here this turns its blue right why
21:20 - it has been used
21:22 - so
21:24 - in our elements tab as of now
21:26 - what we learned about was that how do we
21:30 - select an element how do we add up
21:33 - different classes right
21:35 - how do we kind of
21:40 - filter them
21:41 - how do we see which
21:43 - which which style is added to which
21:44 - element
21:45 - how can we
21:47 - basically
21:48 - copy that id where which that elements
21:52 - refers to
21:53 - we can copy the styles
21:55 - as well as you can
21:57 - so that's that's bit about our elements
22:01 - now
22:01 - in our next chapter or video
22:04 - we will move towards our sources tab
22:07 - where we will understand about how
22:10 - how do we handle the code how do we you
22:12 - know let's say if i click here
22:14 - and
22:15 - how do we this this message is getting
22:17 - triggered for example if i just say okay
22:20 - now you need to troubleshoot it we'll
22:21 - look at that
22:22 - okay
22:25 - so now
22:26 - in this uh listen we will look at uh
22:29 - this source tab
22:32 - and before that uh let us just look at
22:34 - quickly at the core changes which i have
22:36 - done
22:38 - rather than just simply having a you
22:40 - know when you click on this file button
22:43 - right
22:44 - rather than just showing alert message
22:46 - about format i have defined a function
22:49 - nested call
22:50 - to which i am
22:51 - for passing a variable my account and it
22:54 - is returning its count
22:56 - right and then again i am showing
22:57 - another message
22:59 - right so
23:01 - idea is to showcase you the different
23:03 - features of debugging
23:05 - using this
23:07 - and for the timing let's just say that
23:10 - uh let me just close this and if i just
23:12 - click here you complete one extra you
23:14 - complete seven exercises now let's just
23:17 - try to troubleshoot it that i want to
23:19 - see how it is happening
23:21 - okay so for that what we will do is
23:23 - first if you press ctrl shift i you this
23:26 - panel is opened
23:28 - and
23:30 - it has three parts
23:32 - one is on left hand side is
23:34 - a kind of a hierarchy of your files
23:37 - how they are placed
23:39 - then you have in the center is the
23:41 - window where different files will be
23:42 - opened right
23:44 - it'll be like this and on right side you
23:46 - see there is a different kind of
23:48 - breakpoints breakfast look at them we
23:50 - look at this
23:52 - so this is how it is things are
23:53 - organized right
23:55 - now
23:56 - let's see that when i click on this
23:58 - button
23:59 - it automatically run this code and i
24:01 - know that this function is being called
24:03 - right so so how do i stop the code in
24:06 - the debugger so the first thing which i
24:08 - can do is i can simply put a breakpoint
24:12 - by clicking here if it turns blue it is
24:14 - a the breakpoint is active if you click
24:17 - again it gets the bug it's it get
24:19 - deleted or you can create a breakpoint
24:22 - using right click and add breakpoint
24:24 - for the timing we'll just say add
24:26 - breakpoint right and if i click here
24:30 - what does it say pause then develop
24:32 - right and the code has stopped okay
24:35 - now let's just first look at these three
24:37 - these these some of these buttons this
24:40 - one means you just i want to execute it
24:42 - you don't want to debug
24:44 - this means you want to debug it but you
24:47 - will you want to step over each call for
24:49 - example if i click here
24:51 - it goes to next one
24:52 - it calls alert okay now here
24:56 - yes here it is a function called nested
24:58 - call where this my account is being
25:02 - passed so one thing which i can do is
25:04 - either i want to go inside debug this
25:06 - function
25:07 - or i just want to skip over so for
25:09 - example i want to skip over so that's
25:11 - what this step over function does
25:13 - and you are able to see this message all
25:16 - right and if i just say process
25:18 - that's okay
25:20 - now
25:23 - let's again look at it and let's see how
25:26 - does this step in support work so if i
25:28 - now click here
25:30 - and it goes again here and i just want
25:32 - to step over this
25:34 - okay
25:35 - now i want to debug this so i go inside
25:38 - this one f11 so it goes here right for
25:41 - example now i feel that everything looks
25:43 - okay i don't want to debug it i want to
25:45 - come out of this so that's where you
25:47 - have stepped
25:48 - right so that's how you basically
25:51 - do this step by step and then you can
25:53 - just simply say
25:55 - click click on resume and everything is
25:57 - done so these are the buttons basically
25:59 - which you use to
26:00 - you know move to towards different codes
26:04 - okay so now since we have seen how
26:08 - how these different uh
26:10 - options are there right and now what you
26:13 - can do is that for example you can place
26:16 - multiple breakpoint i can place a
26:17 - breakpoint here
26:19 - here and here
26:21 - okay so
26:23 - for example if i do this
26:25 - right now it stops here i say resume
26:28 - message is coming and again it goes to
26:30 - here right and then again step by step
26:33 - it will start it will stop at every
26:35 - point every break point and it will show
26:37 - me everything right but let's say you
26:40 - don't you said that okay this breakpoint
26:42 - is okay rest i think a lot okay i just
26:44 - want to proceed i don't want to stop
26:47 - right so what you can do is you you see
26:49 - this there's a down arrow
26:51 - the
26:52 - you just click on it
26:54 - and you hold the mouse button right and
26:57 - then you click on the second option
26:59 - so it basically goes through everything
27:02 - so what it does is it basically uh skips
27:06 - through rest of the break points right
27:09 - so another option is for example you
27:11 - don't have these breakpoint you just
27:12 - surface breakpoint and you say i want to
27:14 - debug
27:15 - so
27:16 - it comes here but you don't want you
27:17 - want to skip everything and you want to
27:19 - directly in the code to directly go here
27:23 - just click here
27:24 - and
27:25 - do a
27:27 - continue here that's it
27:29 - and first message come line number three
27:32 - and it stops
27:33 - so that's how you can basically
27:36 - skips through
27:37 - the the few lines and the codes and you
27:40 - can directly go there okay sometimes
27:42 - what you need to do is for example you
27:44 - have executed everything and you are at
27:47 - these somewhere in between but you want
27:50 - to restart it right you want to go to
27:52 - the beginning and start again this whole
27:54 - function so what you can do is
27:57 - uh
27:57 - go here on the call set to a restart
28:00 - frame right this is one way you can do
28:03 - it so all i need to do is restart frame
28:05 - and goes to the beginning right and it
28:07 - starts again that's how you basically
28:12 - the starts execution of this function
28:15 - and what you see here is let's just
28:16 - focus on as of now on call stack so this
28:19 - is like in what order
28:21 - this this function is being called for
28:23 - example first is you see
28:25 - there's a button in our index.html which
28:28 - has on click event which call this and
28:30 - that's where it comes right
28:32 - and
28:33 - this this is called as uh the trace and
28:36 - you can also do a right click copy stack
28:38 - trace
28:39 - so it basically what it does is you can
28:42 - see there's a staff trace is copied
28:45 - right
28:46 - and
28:47 - then you can basically
28:49 - uh kind of uh
28:52 - move through your
28:53 - you know check through troubleshoot your
28:55 - issues using calls check that how the
28:57 - calls have happened and where probably
29:00 - an issue can lie right
29:02 - so let me just
29:04 - step over to the next function and just
29:05 - show you how do you check the variable
29:06 - value one is you can see there is
29:08 - already available variable value coming
29:10 - my count is equal to 1 another way is
29:13 - you can just hover over it you will see
29:15 - this value or
29:17 - you can just copy this variable you can
29:20 - go here it shows that another way is
29:23 - if you look at this scope there is a
29:25 - local scope
29:26 - where you see this my account variable
29:28 - one and you can modify it from here also
29:31 - right
29:32 - if you just double click you can modify
29:34 - it
29:35 - very simple right so let me just say
29:37 - okay okay that's fine that's that's okay
29:40 - okay
29:41 - so now we see one type of a break point
29:43 - there are multiple type of break points
29:45 - which we will see
29:46 - so one is the
29:49 - this is simple breakpoint right and
29:51 - there is if you do a right click for
29:52 - example if i do a right click here
29:55 - there's a conditional breakpoint so this
29:57 - breakpoint will be triggered based on
29:58 - certain condition it will not be
30:01 - triggered like
30:03 - always so why what i can do is
30:06 - if my count is equal to seven
30:10 - right double seven then only trigger it
30:13 - and i know that one is
30:14 - it will be one here then it will call
30:16 - this method nested calls one plus six is
30:18 - seven it will get triggered and now you
30:20 - can see this that is yellow orange right
30:23 - orange is kind of yellow
30:24 - that it will be like conditional so if i
30:27 - just click here
30:28 - and let me just remove this
30:32 - so now it stops here because my account
30:35 - value is 7
30:36 - right
30:37 - now if i
30:38 - edit it right click edit i say
30:42 - this value is 6 then only stop
30:44 - and now if i click here
30:47 - it doesn't stop so which is the way we
30:49 - want them to be
30:50 - right so that's how these are
30:52 - conditional breakpoints one is a simple
30:53 - breakpoint
30:54 - another is a breakpoint is
30:57 - a dom break point right for example
31:00 - let me just first do one thing
31:05 - just
31:06 - move this let me just uh
31:10 - this is a list under which we have this
31:12 - element i'm just copying it right and
31:15 - copying the path
31:16 - okay
31:17 - and what i will do is
31:20 - if you click on this button
31:22 - i will remove this entry the the first
31:25 - one right so what i will do is
31:28 - i will have something like this
31:31 - dot
31:32 - remove method
31:36 - okay so i'm selecting it and then remove
31:39 - method is there if you look at this
31:40 - source
31:41 - this is a
31:42 - document.queryselector select this path
31:44 - this element and then remove it if i
31:46 - click this button right but before that
31:49 - i want that in case anything happens to
31:51 - this list
31:52 - [Music]
31:53 - i should have a breakpoint triggered so
31:55 - what i can do is first let me delete
31:56 - this or i can disable also i click
31:59 - disable it is disabled right and this is
32:01 - a different one
32:02 - and if i can disable blue one it will be
32:05 - light blue so these are all disabled
32:07 - points if i enable it right
32:09 - then they become enabled and i can i can
32:12 - see these two breakpoints under this i
32:14 - can also enable disable from h
32:17 - okay
32:18 - so now let me disable them what i will
32:20 - do is i say that in case this unordered
32:23 - list which is this complete
32:25 - break on subtree modification so if in
32:28 - case anything under this tree modifies
32:31 - you break you stop or in case any
32:34 - attribute modifies then you stop in case
32:36 - there is a node removal then also you
32:37 - stop so i say substring modification so
32:39 - it becomes blue right dom break point
32:42 - right so if you go here
32:44 - you can see there's a dom break point in
32:46 - everyone now if i click here
32:48 - you completed one exercise now it stops
32:51 - automatically and you can see that
32:53 - paused on subtree modification you will
32:56 - descendant li removed
32:59 - automatically okay so this is the dom
33:01 - break point if i just say okay
33:03 - you can see this
33:05 - this is already deleted
33:08 - okay now sometimes you want that
33:11 - whenever you click this button
33:14 - what is happening which event what is
33:16 - mouse click event what is happening can
33:18 - i listen to this event and
33:20 - can i have trigger a breakpoint yes so
33:22 - if you look here there's an even
33:23 - listener breakpoint
33:25 - and under it you have different things
33:27 - different events any mission canvas for
33:29 - us it is we'll take mouse we'll say
33:32 - click so whenever i click
33:34 - let it trigger a breakpoint so if i just
33:36 - click here
33:37 - so it triggers a breakpoint
33:38 - automatically it says this button type
33:40 - on click event and if i just
33:44 - execute it then it also automatically
33:46 - trigger my other breakpoints right so
33:48 - that's how it basically triggers it let
33:51 - me just first
33:53 - delete all these
33:56 - and show you one more thing
34:03 - break on and subtree okay so another
34:06 - thing is basically is for example
34:09 - um
34:10 - what you want is that you want to
34:12 - trigger a breakpoint when this function
34:13 - is called nested
34:15 - and you don't know when it will be
34:17 - called but it is globally available
34:18 - because i have
34:19 - upload unloaded this file by index.html
34:22 - so what i can do in control is you can
34:24 - say debug
34:26 - nested call
34:28 - okay whenever this is called you debug
34:30 - it so i just click here
34:32 - and
34:41 - you see it automatically gets triggered
34:43 - nested call i did not put any breakpoint
34:45 - it got triggered automatically right
34:48 - paused on debug function it
34:50 - automatically tells you that okay this
34:52 - is how
34:53 - things are right
34:54 - okay good
34:56 - let me just reload it because the
34:57 - entries are deleted right
34:59 - and now
35:01 - let's see that
35:02 - another thing which i really have not
35:04 - seen is
35:05 - you can also modify these code for
35:07 - example i can say
35:08 - my account is equal to two and press
35:10 - save simple press save
35:12 - and if i click here
35:14 - you can see
35:17 - you completed two exercise the value
35:19 - gets modified right
35:21 - but if i just do a refresh
35:25 - and you see this value is lost
35:27 - right so there are
35:29 - two ways around it right how do you
35:31 - preserve these changes okay so what you
35:34 - can do is
35:35 - one way is you say that you click on
35:38 - this file system right and you add your
35:42 - chrome folder right this one from
35:45 - developer tools folder
35:47 - to the workspace you see allow
35:51 - and now
35:52 - whatever changes you will make here so
35:54 - let me just close all
35:57 - in whatever changes you make for example
35:59 - i make it to two
36:01 - i make it completed one two three
36:04 - right and uh here also i write something
36:07 - and i press save so whatever changes you
36:10 - make here right you can see them that
36:13 - they will automatically are let me just
36:16 - read this breakpoint
36:20 - that one two three eight everything is
36:21 - getting reflected right and if you look
36:24 - at if you just press the refresh also
36:27 - still the changes are still right why
36:30 - because the code is it is directly
36:32 - modifying your file system if you look
36:34 - at this
36:35 - does this here so you can actually in
36:37 - fact modify everything
36:40 - the developer console
36:42 - so anything everything you can modify
36:44 - right
36:45 - and uh
36:46 - one important other thing which i wanted
36:48 - to showcase is
36:50 - uh one is this not one
36:54 - let's look at this snippet right so in
36:57 - case you want to store this
36:59 - code in the browser right so what you
37:02 - can do is you click here you know you go
37:04 - to here snippets okay let me go back
37:07 - again
37:08 - snippets and then you click on new
37:10 - snippet and
37:11 - you paste your code or press save right
37:14 - or you can do a right click
37:16 - rename my samples
37:18 - right
37:20 - and uh
37:21 - maybe we just want to
37:23 - store this for example
37:25 - console.log
37:29 - hello
37:30 - right and now you want to run it so what
37:33 - you can do is
37:35 - either you can press ctrl enter right
37:38 - or
37:39 - it will console log hello right or you
37:43 - can come here and run this
37:45 - so these are like
37:46 - multiple snippets
37:48 - you can store
37:50 - for uh
37:52 - for your reference in the browsers
37:54 - okay
37:55 - then for example if i go back again to
37:58 - file system right and if i go here
38:02 - let me close this and let's say if i
38:04 - change this
38:06 - right
38:07 - and i have changed this also
38:11 - right or
38:12 - in fact i added another function also
38:15 - let's just assume
38:17 - right i want to see what all changes i
38:18 - have done right now without before
38:20 - saving so what you can do is you can go
38:22 - from here
38:24 - more tools
38:26 - and changes
38:28 - you can clearly see in function
38:30 - there is you have added this then you
38:33 - added this then you add
38:35 - so it also tracks those also right so
38:38 - basically at any point of time
38:41 - you are
38:43 - you are
38:45 - checking you know making some changes
38:47 - trying to check what have you done so
38:49 - you can use this changes tab also right
38:52 - now
38:53 - let's say that i want to remove it let
38:55 - me remove this folder from workspace
39:00 - so let's say that
39:03 - rather than having the whole workspace
39:06 - here i just want to make some changes
39:08 - try out things and
39:10 - let those changes persist also when i
39:13 - reload and if i later want it to merge
39:15 - with my changes i'll do it so what you
39:17 - can do is
39:18 - for example if i just go to page
39:22 - and i want to see what happens if my
39:25 - account is three
39:26 - and i just press save and if i just
39:29 - refresh
39:32 - my account is again two right how do i
39:34 - make sure those my temporary changes
39:36 - persist so for that what you can do is
39:38 - go to our rights
39:40 - select the folder
39:43 - if i select chrome developer tools
39:46 - and i say allow
39:48 - right
39:48 - now if i just say
39:53 - maybe
39:55 - three
39:56 - right
39:57 - and uh
39:59 - now
40:00 - because now it is done with violet so
40:03 - right now if i just press refresh
40:07 - right
40:08 - so it is now three if i just change it
40:10 - to five
40:12 - right
40:12 - and
40:13 - you know hold on
40:15 - and i press save
40:17 - and uh
40:19 - if i just press refresh my count is five
40:21 - but if you look at the back end code it
40:24 - is still two
40:25 - so how it is doing is it is a override
40:28 - folder which it creates
40:30 - inside this right where you can see my
40:33 - account file
40:35 - okay so that is normally which you can
40:37 - use to
40:39 - to sometimes check your chummy changes
40:41 - and then uh
40:44 - kind of uh if you think they are okay
40:46 - then you can immerse them
40:49 - so so this is we have come to this
40:52 - source tab and of the things right end
40:55 - of the lesson
40:56 - where we have looked at trace probes
40:58 - breakpoint listeners
41:01 - source codes how do we debug and operate
41:04 - so now without wasting for the most time
41:07 - let's move on to the next lesson
41:09 - which is related to the next tab which
41:11 - is console and then you might look into
41:14 - network performance certification also
41:19 - hello everyone in our previous lessons
41:22 - we have
41:22 - covered elements
41:24 - sources
41:26 - and now in this we will plan to cover
41:28 - console
41:29 - so like sources console is also very
41:32 - important so this is like uh
41:35 - you know
41:36 - apple where you can write your
41:38 - javascript code you can
41:40 - run it you can
41:41 - you can make you can check how it looks
41:44 - right and primarily in console normally
41:47 - for example uh let's look at our code
41:50 - so so normally developers what they do
41:53 - is they
41:54 - they kind of log some stuff when
41:56 - something is done right for example here
41:58 - it is console.log is being used right
42:01 - let's just look at it what it does so
42:03 - for example if in sources you go you
42:05 - will see
42:07 - console.log is being logged
42:10 - in in nested call which is being called
42:13 - an on click event
42:14 - let me just click here
42:17 - okay okay and
42:19 - this is done so but what happens so
42:21 - anything which a developer wants to
42:22 - process is or wants to log is logged in
42:25 - if you look at here there are four
42:27 - messages
42:28 - so this is the one which was which came
42:31 - from our fees completed one two three
42:33 - nested call if we look at here
42:36 - this is the same right
42:38 - and so that these you know developers
42:40 - can have different kind of login
42:41 - messages
42:42 - and on left hand side what you see is
42:45 - this four messages is like for
42:47 - everything
42:48 - then in case you want to see only errors
42:51 - you can use this filter warnings info
42:54 - right whatever we have logged
42:56 - and user messages if
42:59 - right and in user messages these are
43:02 - these are like uh
43:03 - the locations from where those messages
43:05 - are coming for example my file dot ds
43:08 - is one message which is coming from here
43:10 - and another message is coming from live
43:12 - load so these are the five different
43:14 - ways to see the message right
43:17 - and
43:18 - you can if you want to clear it you can
43:19 - clear it using clear console and if you
43:22 - want to increase the size just control
43:25 - okay and in case you want to filter it
43:27 - you can filter that also for example if
43:29 - i just refresh
43:30 - right
43:31 - and i click here
43:35 - so you see there are two messages and if
43:37 - i want to filter for a click only click
43:40 - will come if i just say rdea then those
43:43 - will get filtered all right
43:46 - and then
43:47 - then
43:48 - that that's how basically the whole uh
43:51 - logging happens and you can view those
43:53 - logs now you can also
43:56 - preserve the logs in which there is a
43:58 - reload or something right if i just hit
44:00 - reserve log
44:02 - and if i do an f5
44:04 - right you will see that this log is
44:06 - still there it's the previous one
44:09 - and similarly there are other options
44:11 - while for example you can log stm
44:14 - in the the
44:16 - those xhr hx request also right and you
44:19 - can do enable auto complete from history
44:21 - also right so let's just try to
44:26 - while we are in console let's try to
44:27 - look at how does
44:29 - this console
44:30 - okay so for example if you just want to
44:33 - log any messages
44:34 - you just press console and you will see
44:36 - what all different methods are available
44:38 - for example i just press enter
44:41 - so there is error
44:43 - info log one in count there and number
44:46 - of error in the method which are
44:48 - available that's how you can which you
44:49 - can use
44:50 - in your code to put kind of a breakpoint
44:55 - not breakpoints the log checkpoints in
44:56 - your case for example if you just want
44:58 - to log a message to the console you can
45:00 - just say
45:02 - arrow one two three and it is locked
45:04 - hello one two three simple
45:06 - and uh for example let's say there's a
45:09 - error there's an array not error
45:13 - area of salary
45:14 - right
45:15 - and uh
45:16 - which is like which has
45:18 - objects so it's like
45:20 - month
45:22 - as uh exact
45:24 - and uh salary
45:28 - and the thousands okay let's say there
45:32 - is this one object
45:36 - and then there is another then there is
45:37 - another so there are this area of three
45:40 - objects now you want to log them so one
45:42 - way you just say
45:43 - console.log
45:46 - celery
45:47 - right it will just lock this very object
45:50 - and you have to
45:51 - drill down to right another way is to
45:53 - make it more meaningful and
45:57 - you know beautiful is
45:58 - console.table and you just say salary
46:03 - so you see it has index is one column
46:06 - month and salary so it's just much
46:08 - better readable and all right and now
46:11 - for example um so so you want some let's
46:15 - say let me just clear it so one way of
46:17 - clearing is this
46:18 - ctrl l
46:20 - another way is
46:21 - console
46:26 - dot clear
46:27 - so it clears it
46:29 - uh
46:30 - due to preserve block okay yeah so once
46:33 - again let me just do this
46:35 - and now we run this console.clear so it
46:38 - clears it right now let's see that okay
46:41 - in case we want to log a message which
46:42 - is an error how would it look like we
46:44 - want it to stand out so what i will do
46:46 - is say console.log console.error
46:51 - test error
46:55 - it gets shown in red if you say console
46:58 - dot
47:00 - warning
47:03 - just
47:04 - maybe let's say
47:07 - test walking
47:17 - you have it in yellow so in case if you
47:19 - click here it will show that test
47:21 - running you click here it shows testers
47:24 - if you click here it shows everything in
47:26 - the file using the file right it is
47:29 - mentioning it as others because we are
47:30 - using this
47:32 - right
47:33 - and then what you can do is uh
47:36 - once you have an error let's say
47:37 - sometimes
47:38 - uh
47:39 - you want to
47:40 - log a certain set of messages in a group
47:43 - let's say you have one function call you
47:45 - want to log that messages under one
47:47 - function group and then there's another
47:49 - function then you want to lock those
47:50 - messages
47:52 - how do you do that so what you do is you
47:54 - say control dot
47:57 - group
48:00 - group was let's say g1
48:03 - right
48:04 - and then you say
48:06 - console dot
48:08 - log
48:10 - hello
48:11 - i'm
48:12 - imagining i'm inside a function so
48:14 - console.error
48:21 - [Music]
48:27 - [Music]
48:33 - these are thrown from one function
48:35 - okay and i'm logging it as under g1
48:38 - function name let's say there is another
48:40 - one which is like
48:42 - g2
48:44 - right
48:46 - and
48:47 - that's how those are drawn so whatever
48:49 - you press enter you see this
48:52 - so there are two groups g1 g1 has yellow
48:55 - hello and error right so you can use
48:58 - these what if i let's say let me do that
49:01 - what if i just use this right
49:04 - and
49:05 - i want to log that let me close this
49:08 - style
49:09 - that
49:12 - will just
49:14 - so it will say
49:17 - on click event right
49:19 - and
49:21 - i just say group end
49:24 - right and let's not have it as console
49:26 - we say console.log
49:29 - and we say
49:30 - console dot
49:33 - error so we are logging two messages
49:35 - just for our tracking
49:36 - and now
49:37 - what i will do is in case this function
49:40 - is also call
49:41 - we will log that also
49:43 - right and then we say
49:50 - and this key right
49:53 - and i just press save and because it is
49:55 - live server so now
49:57 - as of now the clear everything is clear
49:59 - right if i click here
50:03 - why there is alert
50:06 - console also let me
50:11 - yeah you remember why there is an alert
50:14 - because the changes are coming from this
50:18 - right so let's just remove it
50:21 - and delete all our rights because there
50:23 - is an override and now if i just press
50:26 - this button
50:30 - and now you see this red one shows one
50:33 - error one warning and one
50:35 - okay so we're going to go to this you
50:37 - see on click event then you have
50:40 - you completed one x one two three
50:42 - exercise and then you say nested call
50:45 - then there is this
50:46 - right and if you look here
50:50 - why it is
50:51 - you know kind of not closed here is
50:53 - because
50:54 - if you look in the code
50:58 - this call is before this call so what i
51:00 - can do is maybe
51:02 - i can say
51:04 - it like this
51:06 - right you call it let's just see it as a
51:09 - group complete one so if i now click
51:10 - here so you see there are two groups
51:13 - so that's how we use this okay
51:16 - i think uh
51:18 - one thing is remaining related to
51:19 - controller which is console. assert okay
51:23 - so that's like
51:26 - how do we do is let's say we have
51:29 - let's
51:31 - let's say we have variable a is equal to
51:34 - 10
51:34 - and where b is equal to 20
51:38 - right
51:40 - so now
51:41 - what you see is like
51:43 - that
51:44 - we want to say that
51:48 - c is equal to
51:51 - b is
51:53 - a is less than 10
51:56 - a is less than b
51:58 - right it has these messages
52:00 - so now how you can use console dot
52:05 - basically you want to pass the condition
52:07 - first condition is
52:10 - b a is less than b
52:13 - okay and then what do you say is
52:16 - that
52:17 - what is the data you say my data is a
52:19 - comma b
52:21 - right
52:23 - comma
52:25 - c
52:27 - right and if this and you just execute
52:30 - it right
52:31 - and if
52:33 - a is less than b this result condition
52:34 - is true which is okay and if it relates
52:36 - this
52:37 - assertion field because a is not greater
52:39 - than b so it logs the data also
52:42 - clear so it's like
52:44 - you are making some version is less than
52:47 - b with this data if this assertion fails
52:50 - which in this case it has failed so now
52:52 - you can have little option so you can
52:54 - use this console as a rebel you can code
52:57 - anything even if let's say i want to
53:00 - remove this for example this one
53:03 - right what i will do is i'll say copy js
53:06 - path i can try it here only
53:08 - i can say
53:10 - dot
53:14 - right same way if you want to
53:19 - copy this path
53:21 - and you want to see what all methods are
53:23 - there you just press start
53:25 - and you can see whether it is click and
53:27 - all and everything in here also you can
53:29 - have
53:30 - i'm just taking an example so that is
53:32 - also one so that's what we learn in this
53:35 - lesson so maybe now we have understood
53:38 - fairly well elements sources console
53:41 - and it's like a playground for us and we
53:43 - can interact with the
53:45 - on
53:45 - the code also in fact we can modify the
53:47 - values also during debugging
53:50 - now next we'll look at networks
53:52 - then we'll look at
53:54 - applications and the other tabs
54:00 - so now we have understood about elements
54:02 - source console time now to understand
54:04 - and talk about
54:05 - networks
54:08 - so normally what happened is so let me
54:10 - just clear everything and just do a
54:12 - refresh
54:14 - and now if you look at this when i when
54:16 - any website anything which loads there
54:18 - are set of files which are uploaded so
54:20 - you can see there is a style.css my file
54:22 - there is a web socket because of live
54:24 - server there is a ui file on this you
54:27 - can ignore so these are the different
54:28 - files which are loaded and
54:31 - so you can look at them for example if
54:33 - you look at click on this
54:35 - it tells you what is the request it is
54:37 - loading this what is the method get
54:40 - method status is green okay what was the
54:43 - response header this was a header and
54:46 - then you can check in response also
54:48 - those code
54:49 - right and it can tell you what initiated
54:51 - it right and it also shows you how much
54:54 - time it took to load for example which
54:56 - you can see here also in the waterfall
54:57 - model right and the status also tells us
55:00 - that what is the status that is like 200
55:02 - means everything is working fine right
55:05 - in case you want to filter certain
55:07 - queries or certain files you want to see
55:09 - whether they are loaded or not you can
55:11 - for example filter it here using my or
55:13 - whatever filter you define for example
55:15 - if i say
55:16 - i want gs files or js files another way
55:19 - of js file to be filtered is this one
55:22 - you see all js
55:23 - cs1 css1 xhr is where you mix ajax since
55:28 - we don't have any so that's why you
55:29 - don't see it but otherwise you know you
55:32 - can have these filters and if you want
55:34 - you can write data url also
55:36 - as well as if you want you can block
55:38 - certain requests also for example if you
55:40 - right click here you say block request
55:42 - then it will come on the block
55:45 - okay
55:46 - and then if if you do a right click you
55:48 - can
55:49 - save these requests also
55:51 - there's another function which is to
55:53 - which is like a
55:54 - recording network log stop and start for
55:57 - example if i just stop it and i just say
55:59 - refresh right
56:01 - then it will not uh
56:03 - log let me just clear it so if i just
56:05 - say refresh you can see there is no log
56:08 - coming because i have stopped network
56:10 - logging
56:11 - and if i just enable it and do a refresh
56:13 - you can see this
56:15 - so where it is used is when normally
56:18 - what happen is your front end interacts
56:20 - with the back end
56:21 - then you make those xhr requests
56:24 - and
56:25 - those requests are normally you can
56:27 - track them here
56:28 - what requests are made for example let's
56:30 - just uh maybe
56:32 - let's open the site name or to our
56:36 - rd right and if i open this right and i
56:39 - do a reload
56:41 - let me do a reload
56:43 - and
56:45 - now you can see there are so many
56:47 - requests being sent right so how do i
56:49 - filter so let's say i want to see what
56:51 - are the ajax requests and so in this
56:53 - case i don't see any what are the
56:54 - javascript files these are the
56:56 - javascript files because i need to debug
56:58 - and i might need to choose them right
57:00 - what are the css files you can see that
57:02 - the bootstrap so clearly it is using
57:04 - bootstrap you know are there any images
57:08 - yes there are many images anything media
57:10 - no
57:11 - phones yes these are talk anything yes
57:14 - this is a one
57:16 - web socket sending there are no web
57:17 - servers and and similarly and you see
57:20 - this console also
57:22 - these error messages
57:23 - shows you something that okay there is
57:25 - some error some some file is missing or
57:27 - some font is missing right let's say if
57:30 - i just click here and i say
57:35 - reference library okay
57:38 - and if i just say
57:40 - let me just keep it all and let me just
57:42 - clear it okay and let's see what if i
57:45 - want to
57:46 - click this
57:47 - so now
57:48 - we can see there is a request which is
57:50 - being sent
57:51 - and if i just do an x hr there's nothing
57:54 - there is if you just open it
57:57 - it will tell you what kind of requests
57:58 - have gone for example this css one which
58:00 - responds
58:02 - anything javascript rated and all those
58:04 - stuff so basically you can drag and in
58:06 - case if you look at this request
58:08 - this request was sent to
58:11 - this place
58:12 - okay
58:13 - and what was the response the same thing
58:15 - whatever you see here
58:17 - is you can see those values so that's
58:20 - how normally
58:21 - we use networks is to check whatever is
58:24 - being ordered
58:25 - is there any file which is missing is
58:27 - there
58:28 - is there any call which is not going
58:31 - through that's how which he uses for
58:33 - troubleshooting
58:35 - so now
58:36 - in our next lesson what we'll do is
58:38 - we'll we'll go through first as
58:40 - applications and then we'll go through
58:43 - other tabs
58:46 - so we have seen
58:49 - element source console tab
58:52 - and network tab so far
58:54 - i think now to talk about application
58:56 - tab so this is uh the place where you
58:59 - actually see what
59:01 - local data is stored by the page for
59:04 - example local storage is like uh if you
59:07 - open one
59:08 - session here and i open the same thing
59:12 - in next tab
59:13 - then the data has the data needs to be
59:15 - shared that is the local storage
59:17 - but as soon as you open the tab a
59:19 - session is open and any data you want to
59:20 - just save for that session is stored in
59:23 - session storage
59:25 - this web sql db are typically in browser
59:28 - databases right
59:30 - the light one
59:31 - cookies is what all any cookies which
59:33 - are stored by the website you see that
59:36 - then you have cash you know so what we
59:38 - will see is how do we create this local
59:39 - storage or how do we read it
59:42 - and uh
59:43 - one way for this is that
59:45 - i write it here but since we now
59:48 - understood what is console so we will
59:51 - actually you know do it interactively in
59:53 - console for example if i click here
59:57 - i go to console
59:59 - and we have a global upgrade local
60:01 - storage
60:02 - and we will say local storage or set
60:05 - item
60:06 - uh name let's say i want to store the
60:09 - name right
60:10 - name is the browser
60:12 - okay
60:15 - and i let's say i want to store the same
60:17 - name
60:19 - in session storage
60:26 - okay
60:27 - so now if you go to
60:30 - the application tab you will see there
60:33 - is a name in a feed and there is name
60:36 - evaluates is stored like a key value and
60:38 - good thing is you can filter also you
60:40 - can delete a value also you can delete
60:42 - all right and in case you want to read
60:46 - it that is also not very that's also
60:49 - very straightforward
60:51 - right so all you need to do is
60:53 - do get item then in the name in the
60:57 - in the
60:58 - value you pass the p
61:00 - [Music]
61:02 - so i want to see what is the name of it
61:04 - right and same you will go for this and
61:06 - you can delete also by using
61:11 - the move item so local storage remove
61:13 - right on the bead and if you see here
61:16 - this is born but session is still there
61:18 - right so let me just store again the
61:21 - local one because
61:23 - i want to show you something
61:28 - okay so now we have
61:30 - both named here as well as here let's
61:33 - see what happens if i just copy this
61:36 - open a
61:38 - new one
61:39 - right
61:40 - and if i open uh
61:42 - the window you will see here this local
61:45 - storage is there
61:46 - but session storage is not
61:49 - all right and in case you want for
61:51 - example you can clear it from here if i
61:53 - say
61:54 - local storage clear all and if you see
61:57 - here and you go to local storage it is
61:59 - like a data which is shared across
62:01 - multiple tabs and session is local to it
62:09 - so maybe let me open one
62:11 - one more
62:16 - one more application so that you can see
62:18 - if we have any cookie or not let me just
62:21 - say
62:22 - ctrl shift i
62:26 - okay
62:28 - and
62:30 - you will see here in under application
62:33 - there are cookies
62:35 - right which is nothing but name value
62:36 - here right and youtube this is like
62:39 - another one from where which we are
62:40 - getting the cookies right
62:42 - does it have any local storage yes it
62:45 - has these keyboard values
62:47 - storing locally like this one frequency
62:50 - and youtube also locally some data
62:52 - electrical youtube
62:54 - and then there is session storage
62:56 - nothing in related to session storage
62:57 - yes in youtube it has some session
62:59 - storage data
63:01 - so so that's how normally
63:04 - when you want to understand is there any
63:06 - data which is locally stored or anything
63:10 - what value in it and you can interact
63:12 - with that using it so i hope it makes
63:15 - sense and in our next video we'll cover
63:18 - the next tab
63:21 - okay
63:22 - so
63:23 - in our previous uh
63:26 - previous lessons
63:29 - whatever you call them we have
63:30 - understood elements sources console
63:34 - network as well as applications
63:37 - now i think it makes sense to club
63:39 - performance as well as lighthouse so the
63:42 - overall intention is to you know study
63:45 - your website in all the specific
63:47 - perspectives whether it is from
63:49 - accessibility
63:51 - uh performance wise or how it will be to
63:54 - the user so first let's start with
63:56 - lighthouse and all you need to do is
63:59 - what categories you want to check where
64:01 - i want to check its performance
64:03 - progressive web web it is not there but
64:04 - let it
64:05 - be able to run those text also seo so i
64:08 - want accessibility i want and device i
64:11 - want to check is let's say mobile and
64:14 - all you need to do is just generate
64:15 - report so it will kind of do an audit of
64:17 - this
64:18 - report right so you can see on the left
64:20 - hand side uh
64:22 - there is uh
64:24 - there is a
64:26 - mobile it is trying to
64:28 - load on that
64:29 - mobile console mobile the
64:32 - demo one it is trying to load on that
64:34 - and now hopefully we will get our report
64:37 - in terms of these
64:38 - categories you can see our website is
64:41 - following 100 best practices although
64:43 - one page
64:45 - performance wise there is 62 percent
64:47 - and uh okay
64:49 - very good what i forgot to mention
64:51 - since we have not used in cognitive mode
64:54 - the chrome extension which we have have
64:56 - impacted it right so let's do this one
64:58 - more time
65:00 - yes
65:01 - so maybe we go to this
65:04 - and then i open again the same way
65:09 - the lighthouse and i say generator board
65:11 - everything same options
65:29 - ah because now you can see
65:32 - because it is a very simple single page
65:34 - i was like why in performance it is bad
65:36 - because there were extensions there but
65:39 - now it is hundred which is what best
65:40 - practice is under one facebook as cos we
65:43 - are down accessibility also not good now
65:45 - if you scroll down
65:46 - you will see matrix wise time to
65:48 - interactive and everything is green
65:49 - green green there is a trace
65:51 - and there is a accessibility issues
65:54 - right bathroom and forward london do not
65:56 - have a
65:58 - sufficient contrast ratio then it tells
66:00 - you
66:01 - the different options of how do we fix
66:04 - it right or maybe on seo also it tells
66:07 - you there is no meta tag yes we had not
66:08 - provided it all these things so that is
66:11 - one aspect it tells you talks about how
66:13 - your website is
66:15 - what is how does what are its how does
66:17 - it rate from different parameters
66:19 - now let's say i want to
66:21 - measure this performance if i do some
66:23 - actions right so if i just say
66:25 - record and i just say start
66:28 - i just want to click on these things
66:30 - three four times right
66:32 - and then i say stop
66:35 - so it will also record during that time
66:37 - however website is behaving
66:40 - good thing is you can set the the
66:42 - network also whether it is 3g 4g we have
66:45 - not set any you can set what kind of a
66:47 - cpu also and if you look at it there are
66:49 - three parts to it one is fps frame per
66:52 - second and it is all good which is very
66:54 - good because there is no
66:56 - less of a frames there is no frame drop
66:58 - cpu utilization is also good not much
67:01 - and it was also so if you look at here
67:03 - the frames there's almost it's just one
67:06 - frame per second item frame it's all
67:08 - green right it's good so nothing bad and
67:10 - if you just scroll up you will see
67:13 - where your time is being most of the
67:14 - time it's applies in scripting
67:17 - rendering printing primarily it is
67:18 - scripting
67:19 - because uh we are clicking this button
67:22 - there are logics being run right and you
67:24 - can have this uh
67:27 - um
67:28 - there's not much here put them up not
67:31 - much here
67:32 - even also is empty okay good because our
67:35 - website is a very basic one so it
67:36 - doesn't have that let's do one more
67:38 - thing let's let's open google.com
67:41 - okay
67:42 - and uh
67:43 - what we'll do is we'll delete this and
67:45 - we'll declase
67:49 - and then we say generator report on
67:51 - google.com and we'll see
67:53 - do we have any issues or anything issue
67:55 - related to google.com you can access any
67:58 - site
67:59 - across these parameters
68:00 - and let's see how it behaves with google
68:06 - and it also provides you
68:08 - some tips also how you can increase your
68:11 - little low time and you know can improve
68:13 - your performance so let's see what score
68:16 - does google gets actually
68:19 - wow
68:20 - performance wise amazing so i will say
68:24 - time to interact total blocking time
68:26 - what you can do is because it might have
68:29 - i have already labeled a site here so
68:31 - you can do multiple
68:34 - you can generate this report multiple
68:35 - time and to come up at a certain
68:37 - decision
68:38 - and i think uh removable news so it
68:41 - tells you where there is someone new
68:42 - javascript
68:44 - accessibility-wise it is very good
68:45 - whatever is small changes it tells you
68:48 - and then best practices there is some
68:50 - form size or register those you can do
68:53 - pw it's not a pwa search engine
68:56 - so so there is always a room for
68:58 - improvement that's that's very important
69:01 - so lighthouse and performance is what
69:03 - will be useful
69:05 - so in our next one we will i like to
69:09 - look at security
69:11 - and memory and then that will be like
69:13 - our end of the
69:14 - course
69:18 - so in this last lesson we'll talk about
69:21 - briefly about memory and security and in
69:24 - case you see don't see these tabs you
69:26 - can click here and go to more tools and
69:29 - you can choose from here
69:31 - so typically security is like what kind
69:33 - of certificates
69:35 - our
69:36 - site has since it is not secured it
69:38 - doesn't use https it is http that's why
69:42 - you see this right for example if i open
69:46 - google.com right
69:48 - and uh
69:51 - then i see
69:53 - this security tab
69:55 - let's just uh let it open
69:59 - yeah
69:59 - so now you will see here is a little
70:02 - lower little bit slower so it is a
70:04 - security green and you can also see the
70:07 - certificate also what certificate is
70:08 - using right and you can download it so
70:11 - and all the details are there
70:13 - so that's the importance of this site
70:16 - right that's important this secure data
70:17 - you can view the certificates settings
70:20 - resources everything is secured or not
70:22 - right and here it clearly shows it is
70:25 - non-secure
70:26 - right
70:28 - so now uh
70:31 - so we understand what happens in secure
70:33 - freedom let's maybe go to memory so
70:36 - there what happens is because this whole
70:39 - website contains so many javascript
70:41 - objects right so those objections things
70:44 - how much memory they are occupying how
70:46 - much this storm actually is occupying
70:48 - your memory
70:49 - what what are the tasks of deck so those
70:52 - things we can look here so what you can
70:53 - do is you click here you go to this
70:56 - memory tab you click here on take
70:57 - snapshot
70:59 - and then you just press refresh
71:03 - this number is increasing right
71:06 - so this increase is actually basically
71:09 - building the snapshots
71:11 - and okay so here you now see all the
71:14 - relevant objects window document time
71:16 - saying shadow size is the current
71:19 - of memory size which has been occupied
71:21 - by the
71:22 - object series and strings and retained
71:25 - is in case they're released how much of
71:26 - it can be recovered
71:28 - and distance is typically more from like
71:31 - you know you store different memory
71:33 - areas one is linked to two two is linked
71:35 - to two so how far those nodes are
71:36 - distant
71:38 - and if i search of this in daw
71:41 - so here i don't see any uh detached node
71:44 - that anodes are like for example if you
71:46 - have a tree and then that
71:49 - tree has its leave nodes and if you
71:51 - delete the leaf nodes i are referenced
71:53 - to the tree but you delete the tree so
71:56 - but your leaf nodes reference still to
71:58 - the tree so that's said
72:00 - they're like they exist but they're not
72:01 - part of that dome but they are complying
72:03 - the memory they are detached so in this
72:05 - case we can see
72:07 - we don't have those detached node at
72:09 - least so which is good right and here
72:12 - once you click on it you can get the
72:13 - details right for example for google if
72:16 - we
72:18 - run such snapshot
72:20 - okay
72:21 - and i just refresh it i can click here
72:23 - around on the things
72:25 - and same with this the other options
72:27 - also kind of uh this one is also like it
72:30 - draws a timeline also
72:32 - let it let it run
72:37 - and plus you can filter from here
72:39 - you can see the objects are located this
72:41 - summary is like you can see statistics
72:44 - for example how much of it is chords
72:46 - strings areas so typically system
72:49 - objects how much of each memory is being
72:51 - used
72:53 - let it run
73:03 - so now let's see
73:06 - uh dom that has dom docker list you see
73:08 - this so we have
73:10 - there around we see
73:13 - that there is some
73:15 - there are some iframe elements for which
73:17 - we can have a detached option which
73:19 - exists right
73:21 - and you can click and find
73:22 - it
73:24 - so i believe we have covered most of
73:27 - these uh important very important tabs
73:31 - and rest all for example uh
73:33 - you can
73:35 - keep using them right whenever you you
73:38 - know you can
73:39 - refer them whenever you need whatever
73:41 - network relations rendering
73:43 - right
73:44 - so so that's how normally uh
73:47 - our
73:48 - our journey of uh com developer tools or
73:52 - console comes to an end before that one
73:54 - more thing is if you want to run some
73:56 - commands for example you want to show
73:59 - console so you can directly
74:01 - show console and it moves forward so
74:03 - this is like a command from which you
74:05 - can use
74:06 - thank you so much for watching
74:13 - thank you everyone for making to the end
74:15 - of this course and i hope you learned
74:17 - something new something more out of this
74:20 - course feel free to provide your
74:21 - feedback ratings and happy to share it
74:24 - with your friends
74:25 - uh what is the next so the what is next
74:27 - is that
74:29 - this is like a chrome we are into prompt
74:31 - so we might actually
74:33 - look into how do we develop an extension
74:36 - or is it possible to develop extra tab
74:38 - our own one for example you see these
74:40 - right you might have a course on it so
74:43 - maybe you can also explore and once
74:45 - again thanks for watching keep sharing
74:48 - keep learning bye bye take care stay
74:49 - safe