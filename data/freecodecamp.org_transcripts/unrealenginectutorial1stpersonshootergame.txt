00:00 - in this game dev tutorial you will learn
00:01 - how to create a first person shooter
00:03 - game using unreal engine and c plus fah
00:06 - here teaches this course he has created
00:08 - a ton of game development tutorials and
00:11 - he is an excellent teacher what is up
00:13 - guys fire here but you already know that
00:16 - do you
00:17 - anyways welcome to another unreal engine
00:19 - tutorial this time we have a first
00:20 - person shooter c plus plus game yes c
00:22 - plus plus yeah i i gave me it uh i have
00:25 - a lot of things to say but i know you
00:27 - don't want to hear
00:29 - so let's just take a look at the game
00:31 - that we are going to create so this is
00:33 - the layout of the game as you can see we
00:35 - have this huge level huge level it is a
00:37 - big level and we have all of these
00:39 - enemies here that are waiting for us
00:41 - where we need to pass by so that we can
00:43 - get all the way through here and i'm
00:45 - going to speed it up and then here and
00:47 - then here till this door and this is the
00:49 - end of the game we of course have a
00:52 - timer and we also you know have the
00:54 - enemies who are attacking us so if i
00:56 - preview the game if i hit the play
00:57 - button you will see the timer here i
00:59 - also have my player held at the bottom
01:00 - left and the enemies have their own
01:02 - health i can shoot the enemies and you
01:03 - can also hear all of them look at that
01:06 - so there you go shoot
01:07 - and one more time and the enemy is dead
01:10 - and this is too loud so i think i think
01:12 - i need to you know lower the volume just
01:15 - a little bit there you go but anyways
01:17 - this is you know basically the game so
01:19 - we need to pass by here shoot these
01:21 - enemies of course you will have
01:23 - assignments in this you know mini course
01:26 - where you will have to create your own
01:28 - system for having you know a limited
01:31 - number of weapons actually bullets and
01:33 - so on and so forth and the enemies when
01:35 - they get close to me look at that so
01:36 - they are going to deal damage you see
01:38 - and this is too much damage as you can
01:39 - see too much damage i'm going to kill
01:41 - this bad boy
01:44 - i don't know what this thinking
01:45 - was but anyways this is our game as you
01:48 - can see and all of this is created in c
01:50 - plus plus of course with combinations
01:52 - with blueprints but five percent
01:53 - blueprints because we simply cannot
01:56 - avoid blueprints when you create
01:57 - something in c plus plus you need to
01:59 - convert that into a blueprint to use it
02:01 - right here in the editor or in your game
02:03 - but the important part is that we will
02:06 - learn a lot of cool things such as ai
02:08 - perception which is basically giving
02:10 - your enemies the ability to have sight
02:12 - hearing and stuff like that so yeah that
02:15 - would be it as you can see the game
02:17 - looks simple but we're going to learn a
02:19 - lot of cool and complicated things such
02:22 - as the ai perception and the site
02:24 - component of it and how to use that in
02:27 - order to detect the player and so on and
02:29 - so forth so a lot of useful info is
02:31 - inside of this
02:33 - mini course and yeah i don't have
02:36 - anything else to say except you know
02:38 - subscribe like and all of that stuff and
02:41 - let's get into the game and create this
02:42 - really cool game what up peoples we are
02:45 - back again with unreal engine and again
02:47 - this time we are going to as always
02:49 - create a game with c plus plus an unreal
02:51 - engine so this is a new project as you
02:53 - can see i have the project browser and
02:55 - over here we are going to create a game
02:56 - because we are not a tv producers and
02:58 - architectures and automotive people so
03:01 - we're going to click here next and we
03:03 - are going to select the first person so
03:05 - not blank project not the puzzle flying
03:08 - whatever we want the first person and go
03:10 - here and again when i say go here i mean
03:13 - next and over here we have the blueprint
03:16 - so we're going to change the c plus plus
03:17 - everything else can stay the same with
03:19 - starter content because we need it i
03:21 - need the starter content so badly and
03:24 - over here i am going to name this one
03:26 - monster
03:28 - shooter there you go because we shoot
03:29 - monsters okay vampires or whatever and
03:31 - we are going to click here to create a
03:33 - project now of course you know that you
03:35 - know it's tedious with unreal engine all
03:37 - that stuff it takes you know probably a
03:39 - year or two for it to load and compile
03:42 - unity is getting closer you know takes a
03:43 - lot of time also to create and compile
03:45 - and whatnot so i am probably going to
03:48 - you know cut out the video right here
03:50 - and i will see you back hopefully if
03:53 - this you know finishes up until tomorrow
03:56 - so yeah
03:58 - let's wait and i will see you when this
03:59 - you know the project loads finally
04:02 - unreal engine showed mercy and decided
04:04 - to create the project and here we are
04:07 - now of course before we proceed because
04:08 - we are going to first cover the player
04:10 - and all of that stuff we are also going
04:13 - to import our own mesh because over here
04:15 - we have the meshes folder and this is
04:17 - not what we want instead we want this
04:19 - let me just go back here content and i'm
04:22 - going to right click over here a new
04:24 - folder and create the meshes folder over
04:26 - here at the top you see content
04:29 - and over here we're going to import our
04:30 - own mesh which is basically the vampire
04:34 - or the 3d model that we are going to use
04:35 - now you will be able to download it link
04:38 - will be down below this video so just
04:40 - click on the link it will start
04:41 - downloading and
04:43 - also you will have a complete project so
04:44 - this finished project that we are
04:46 - currently doing you can also download it
04:48 - this is for reference purposes that you
04:50 - can download maybe copy and paste some
04:52 - code that you don't want to type out or
04:54 - compare your code to mine and so on and
04:56 - so forth so i'm going to simply drag and
04:57 - drop the vampire over here we do need to
04:59 - make sure to import all and wait for the
05:02 - vampire to import now hopefully this is
05:04 - not going to take too long because in
05:06 - the meantime i can sing to you or
05:08 - whatnot don't worry about whatever
05:10 - warning you've got so don't worry about
05:12 - that next i'm going to import his idle
05:14 - animation over here import all and last
05:16 - but not least i'm going to import the
05:18 - vampire running animation there you go
05:21 - let's go over here and import and there
05:23 - you go
05:24 - so now
05:26 - i am not going to do anything with the
05:28 - monster with the vampire and whatnot we
05:30 - are going to do that later on so don't
05:32 - worry about that this is just for you
05:33 - know saving purposes so the first step
05:37 - that we are going to do is we are going
05:39 - to create our game character so we are
05:41 - going to go here inside of our c plus
05:43 - plus classes and monster shooter and
05:45 - over here we have the monster shooter
05:47 - character and all of that stuff we don't
05:49 - want all of this we simply want to click
05:50 - here new c plus plus class that will
05:53 - inherit from the character itself and
05:56 - i'm going to click on next and i am
05:58 - going to call this one monster so
06:01 - monster shooter character this is the
06:04 - name of our class and i'm going to hit
06:06 - here click create class and i have
06:08 - issues when i talk you know as you
06:10 - probably noticed anyways it is not
06:12 - important by the way i have a new blog
06:15 - that is hopefully out i mean the day i'm
06:17 - recording this video the blog is still
06:19 - being made but the day this video will
06:22 - be published the blog will probably be
06:24 - up so you will see a link down below if
06:27 - you like written tutorials you don't
06:29 - want to listen to my voice and whatnot
06:31 - maybe you hate it or whatever so i'm
06:33 - just going to double click this and open
06:34 - it here reload all you can also follow
06:37 - along maybe i will have this tutorial in
06:39 - a written form as well i don't know just
06:41 - you know comment down below if you like
06:43 - written tutorials and if you like me to
06:45 - create more written tutorials on my blog
06:47 - so over here right below the player
06:50 - setup player
06:51 - input component i am going to create a
06:53 - public
06:55 - properties so the first one is going to
06:56 - be property or u property and this is
06:59 - going to be visible defaults
07:02 - only and from here we're going to say
07:04 - category is equal to mesh and also well
07:08 - over here closing the parentheses and
07:10 - i'm going to declare it as a class use
07:12 - skeletal mesh
07:15 - component with a star because it's a
07:17 - pointer and i'm going to call this one
07:19 - hand mesh which is going to be our hands
07:22 - that you know we're going to use to
07:23 - shoot
07:24 - now moving forward i'm also going to
07:26 - copy this over here and we already know
07:28 - what this visible defaults only is what
07:30 - the category is the category will put it
07:32 - under the category mesh when we try to
07:34 - search it inside of the blueprint
07:36 - visible defaults only will make the
07:38 - properties visible of the skeletal
07:40 - default or skeletal mesh component next
07:43 - we are also going to have another
07:46 - skeletal mesh component so i'm simply
07:48 - going to paste all of this here but this
07:49 - time we're not going to call it hand
07:51 - mesh but i'm going to call it guns
07:53 - or gun mesh
07:54 - because you know we have hands that you
07:57 - know our hands and we also have guns
07:59 - that those hands are holding so next we
08:02 - are going to have your property but let
08:04 - me just go over here and copy this so
08:05 - that we don't have to every single time
08:08 - time type it out so we have the visible
08:10 - defaults only category mesh but this one
08:12 - is going to be class u
08:14 - scene component
08:17 - there you go and this one is going to be
08:18 - the muzzle location or basically the the
08:21 - location from where we are going to
08:22 - shoot
08:23 - paste again the u property and this one
08:26 - is not going to be visible defaults but
08:28 - this one is going to be visible anywhere
08:31 - so it's anywhere there we go the
08:33 - category i'm going to say here is equal
08:36 - to camera and i'm also going to make it
08:38 - blueprint so blueprint read only so we
08:42 - can also read it in the blueprint and
08:44 - over here class you camera it's not
08:47 - condur it's camera component there you
08:51 - go and i'm going to call this one first
08:53 - person camera or fps camera however you
08:56 - want to call it
08:59 - now next we're going to have a few more
09:01 - variables for the movement and over here
09:03 - i'm going to say you property
09:06 - and this one is going to be visible
09:08 - anywhere and blueprint so blueprint
09:13 - read only category is going to be equal
09:16 - to camera so camera there you go close
09:19 - the parentheses and this one is going to
09:21 - be our float turn rate
09:24 - i am also going to copy this right here
09:26 - and paste it over here because it's also
09:28 - going to be or this variable is going to
09:30 - be a u property visible anywhere
09:32 - blueprint rings only category camera and
09:35 - instead of turn rate this is going to be
09:37 - our
09:38 - look up rate there you go
09:41 - and we're also going to have the gun
09:43 - offset and this one is going to be you
09:46 - property and i'm going to say edit
09:49 - anywhere and over here it's going to be
09:52 - blue
09:53 - so blue print read right and the
09:56 - category is going to be equal to
09:58 - gameplay like that and this one is going
10:01 - to be our f vector
10:03 - gun offset there you go and we're going
10:06 - to use this gun offset to offset the gun
10:09 - and we're going to see that don't worry
10:11 - next we are going to have protected
10:13 - variables or basically protected
10:15 - functions
10:16 - the first one is going to be void on
10:19 - fire this
10:21 - tutorial is on fire
10:23 - there you go i'm also singing so over
10:25 - here we're also going to avoid move
10:28 - forward there it goes for word like that
10:32 - and takes a float value as a parameter
10:34 - we're also going to have void
10:37 - move right and takes a float
10:40 - value as a parameter
10:43 - void
10:44 - turn at rate having a float rate
10:48 - parameter and void look at rate having a
10:53 - float rate parameter now you can of
10:56 - course pause the video and copy all of
10:57 - these because these are the default
10:59 - functions that we every single time we
11:01 - need to create because you know
11:04 - it's simple we need we need those in
11:06 - order for you know everything to work
11:09 - i mean move forward move right look
11:11 - return at rate look at the rates over
11:14 - here for the fire i'm going to right
11:15 - click on it and quick actions and
11:17 - refactoring and over here we're going to
11:18 - create that declaration inside of the c
11:21 - plus plus class because we know that in
11:23 - the dot h file we only declare things
11:25 - and then we need to implement them
11:27 - inside of the c plus file so over here
11:31 - do the same thing for all of these it
11:33 - will save us time instead of us going
11:35 - out there in the class and typing all of
11:38 - this out so right click quick actions
11:40 - refactoring and there you go so you can
11:43 - now go over here and see that all of
11:45 - these are created so move forward move
11:47 - right look at rate turn at rate and all
11:50 - of that stuff and over here we are first
11:53 - going to have some includes and i'm
11:55 - simply going to paste them so we have
11:57 - the includes for the camera for the
11:58 - capsule and for the input component now
12:01 - what's important for you to you know
12:04 - do is do these includes right away so
12:07 - don't you know don't wait for
12:09 - whatever just do the includes pause the
12:11 - video and do that
12:13 - i have a practice of doing these
12:15 - includes you know right when we start
12:17 - with the tutorial or when we start with
12:19 - a certain part of the tutorial so that i
12:21 - don't go back and forth every single
12:23 - time we need a certain component in the
12:25 - code and oh i need to include this as
12:27 - well oh i forgot to include this you get
12:30 - the point so do the includes right here
12:32 - right now otherwise
12:35 - i will kidnap you in teacher game
12:38 - development okay so moving forward over
12:41 - here inside of the constructor is where
12:43 - we are going to construct everything so
12:45 - the first step is to get the capsule
12:48 - component and from it i am going to init
12:51 - capsule size and set the size to 40
12:54 - f and
12:57 - 95.0 f this is the default value of the
13:00 - capsule and of course we can change that
13:02 - in the editor but i like to do things
13:04 - you know like this when we do c plus
13:06 - plus goes i cause code i don't know
13:09 - about you but i really like typing out
13:10 - code so maybe somebody doesn't like it
13:12 - so there you go so turn rate is going to
13:14 - be equal to
13:15 - 45.0 f there you go look up rate is
13:19 - going to be equal to also 45.0 f
13:24 - now the first thing that we are going to
13:25 - do is we are going to create the camera
13:29 - component and
13:31 - well in order to create a camera we
13:32 - simply need to say first person camera
13:35 - is equal to create default sub object
13:38 - type of view camera component and text
13:42 - over here which is going to be the name
13:44 - so inside of text we're going to give
13:45 - the camera the name first person camera
13:48 - simple as that what do you expect am i
13:49 - going to give it the name carl it's not
13:51 - my child okay
13:53 - first person camera and from here we're
13:55 - going to say set up attachment and we're
13:58 - going to attach it on the capsule
13:59 - component so get capsule component there
14:03 - you go this is where we are going to
14:05 - attach the first person camera i'm also
14:07 - going to add relative location so first
14:11 - person camera and i'm going to say add
14:14 - relative location
14:16 - and the relative location is going to be
14:18 - f vector
14:20 - and the location is going to be minus
14:22 - 39.56
14:25 - f for the x for the y
14:27 - 1.75 f and last but not least 64.
14:31 - point 0 f on the z axis now relative
14:34 - location if i hover over does it have an
14:36 - explanation no but the relative location
14:38 - is basically location relative to the
14:40 - parent of this component
14:42 - so the first person camera's position
14:44 - will be relative to the get capsule or
14:47 - the capsule component i'm also going to
14:49 - say here first person camera and b use
14:52 - pawn control rotation equal to true
14:55 - we talked about this in our previous
14:58 - videos in i don't i cannot remember
15:00 - exactly which tutorial that was but i
15:02 - demonstrated like when we don't use the
15:04 - pawn control rotation when we use the
15:07 - pawn control rotation so basically this
15:09 - is the
15:10 - this gives the control over the rotation
15:12 - of the pawn so that is it
15:14 - next we are going to create a mesh
15:16 - component that will be used
15:18 - that we are going to view from the first
15:20 - person and that is the hands mesh so
15:23 - hands mesh is going to be equal to
15:26 - create default
15:29 - so default sub object type is going to
15:31 - be use skeletal
15:33 - mesh component so mesh
15:36 - component there you go and over here
15:39 - it's going to have texts in the
15:41 - parentheses and for the text over here
15:43 - we're going to say character mesh
15:46 - so moving forward after that we're going
15:48 - to only make the owner see those hands
15:51 - what does that mean that means the
15:53 - following so hands mesh from here set
15:56 - only owner c
15:58 - and from there we are going to set that
16:00 - to be equal to true this will make only
16:02 - the owner or us having this component
16:05 - see those hands and this is without this
16:08 - access it's only set only owner c now of
16:11 - course this is not mandatory it will not
16:13 - change the game at all but i'm just
16:14 - showing you different options that we
16:16 - have because maybe you're creating a
16:17 - game on your own and you want some of
16:19 - these options well
16:21 - here they are so next i'm going to call
16:24 - the hands mesh and we're going to set up
16:27 - attachment and we're going to set it up
16:28 - on the first person camera
16:30 - so this is where we are going to attach
16:33 - these hands on the first person camera
16:34 - that is attached on the capsule
16:36 - component that we already saw next we
16:39 - are going to say hands mesh and from
16:41 - here i'm going to say cast dynamic
16:43 - shadow so cast dynamic shadow is equal
16:46 - to false this is self-explanatory it
16:48 - will not cast any dynamic shadows it
16:51 - will also over here so hands mesh cast
16:53 - shadow it's also going to be false
16:56 - because why we don't need all of this
16:58 - you know
16:58 - again this is these are just options
17:00 - that i'm showing you so next i'm going
17:02 - to say here hands mesh i'm going to add
17:05 - relative low rotation excuse me i almost
17:08 - i wanted to say rotation and location at
17:10 - once so relation or something like that
17:13 - f rotator
17:15 - and over here i am going to set the
17:18 - value 1.9 f for the x minus
17:22 - 19.19 f for the y and 5.2 for the z axis
17:27 - there you go so this is the relative
17:29 - rotation
17:30 - i'm also going to say hand mesh and add
17:33 - the relative location and this time f
17:37 - vector
17:38 - it's vector like that
17:40 - and over here i am going to add minus
17:45 - 0.5
17:46 - f and i add it in quotes we don't want
17:49 - to do that in quotes okay
17:51 - next we are going to say minus 4.4 f and
17:55 - minus
17:56 - 55.7 f and there you go so this is the
18:00 - relative location
18:03 - we are almost done we only need to
18:04 - create the gun so gun mesh
18:07 - gun mesh is going to be equal to create
18:10 - default sub object of you skeletal mesh
18:14 - component there you go text over here to
18:17 - give it a name so the name is going to
18:20 - be gun you know like
18:22 - i don't know like some
18:24 - hood gangster gun okay so gun mesh from
18:27 - here we're going to say set
18:29 - only owner c
18:32 - here it is true
18:34 - and only the owner will see the gun same
18:36 - as what we did with the hands our gun
18:39 - mesh so it's gun mesh gun mesh there you
18:43 - go
18:44 - cast
18:45 - dynamic shadow is equal to false then
18:48 - our gun mesh
18:50 - from here
18:52 - cast shadow is also going to be equal to
18:54 - false there you go
18:56 - and our muzzle location and gun offset
18:58 - that's the only thing that we need to
19:00 - also create so gun mesh
19:02 - actually the muzzle location not the gun
19:04 - measures so muzzle location is going to
19:06 - be equal to create
19:08 - default sub object you seen component
19:11 - and text over here
19:13 - and for this one i'm going to say muzzle
19:16 - location or basically the location from
19:18 - where the bullet is going to come out
19:21 - our muzzle location set up attachment
19:24 - we're going to attach it on the gun mesh
19:26 - there you go and our muzzle location
19:30 - from here set relative location is going
19:33 - to be f vector so f
19:36 - vector and one more parentheses so the f
19:40 - vector 0.2 f
19:43 - 48.4 f and minus 10.6
19:47 - f there you go
19:49 - argon offset
19:50 - is going to be equal to f vector
19:54 - and the value is going to be 100 f for
19:56 - the x 0.0 for the y and 10.0 f for the z
20:01 - axis now notice over here we did the set
20:04 - up attachment for all these components
20:07 - except for the gun mesh now for the gun
20:09 - mesh we didn't do the
20:11 - for the gun mesh we didn't do the
20:14 - setup attachment over here inside of the
20:17 - constructor instead we are going to do
20:19 - it here in the begin play so over here
20:22 - we're going to say gun mesh and from
20:25 - here attach to component and we're going
20:28 - to attach it to the hands mesh
20:30 - and we're going to say over here f
20:33 - attachment
20:35 - transform rules and over here we're
20:38 - going to say snap to target not
20:40 - including scale and last but not least
20:43 - text and over here we are going to say
20:47 - grip point now the reason why i did it
20:50 - in the begin play is because doing it in
20:54 - begin play
20:56 - is safer because the skeletal mesh is
20:58 - not yet created here in the constructor
21:00 - so it can happen that this will not work
21:02 - but when we do in the in the begin play
21:04 - it will work now i will talk about this
21:06 - f attachment transform rules what is
21:08 - this grip point and all of that stuff in
21:10 - the next video because this video is
21:12 - already getting long not
21:14 - what i planned to do but i just want to
21:16 - compile everything make sure that we
21:17 - don't have any errors because you know i
21:19 - want to make sure that everything that
21:20 - we typed is okay and it's not okay so i
21:23 - have an a problem over here
21:25 - on line 40 in the dot h i'm missing
21:28 - comma in the variable declarations let
21:30 - me just quickly go here 40
21:34 - okay here it is after our blueprint read
21:36 - only i need to add comma
21:39 - and you know you can forget things
21:41 - because you type too fast you are a
21:43 - perfect programmer like i am and all
21:45 - that stuff just kidding but anyways you
21:47 - get the point so this is basically it
21:49 - for this video in the next video i will
21:51 - explain what this is we will create a
21:53 - blueprint out of this we will continue
21:55 - to code and all of that stuff if
21:56 - something is not clear just make sure
21:58 - that you ask in the comment down below
21:59 - but all of this that we did so far is
22:02 - nothing new we already know how to
22:04 - create components if you went through
22:05 - any of my tutorials and all of that
22:07 - stuff so uh yep fire here from
22:11 - you already know that you're on the
22:12 - channel you're on the website or
22:14 - whatever make sure to check out the blog
22:16 - and i will see you guys in the next
22:17 - video what is up my game dev gangster
22:20 - ronios in the previous video we stopped
22:22 - over here with the attaching the gun
22:23 - mesh and i said that i will explain what
22:25 - this is so basically what does this mean
22:27 - is that we are going to attach the gun
22:29 - mesh on the hands mesh and these are the
22:32 - rules that we are going to use for that
22:34 - attachment so snap to the target not
22:36 - including scale so the scale is not is
22:38 - going to be untouched for the gun so if
22:40 - we set the scale 100 by 100 for the gun
22:42 - it's not going to be touched no matter
22:44 - what the scale of the hand's mesh is now
22:47 - what is this grip point well basically
22:49 - the grip point is where we are going to
22:52 - attach the gun mesh on the hands mesh
22:54 - what does that even mean well that means
22:56 - if i go over here and this is where the
22:59 - hands are located so in the first person
23:01 - folder character and then mesh and these
23:03 - are the hands so if i double click these
23:05 - hands
23:06 - we are going to open them right here now
23:08 - if we go into the skeleton of these
23:11 - hands you will notice over here that we
23:13 - have something called a grip point look
23:15 - at that so this is that grip point and
23:17 - if i come closer to the hands where the
23:20 - grip point is you see this is where it
23:23 - is going to be attached now in one of my
23:25 - previous tutorials
23:26 - i have
23:28 - shown you how we can create our own
23:30 - custom
23:31 - snapping socket name or whatever
23:33 - basically you just you know choose where
23:35 - you want to create it then you right
23:36 - click and then you add a socket and you
23:38 - give it a name the name is important
23:39 - because here in the code you're going to
23:42 - reference that name so that you attach
23:44 - your desired component on that
23:47 - on that socket so this is what we are
23:50 - doing and this is where this grip point
23:52 - is so this is where the
23:54 - weapon or the gun mesh is going to be
23:57 - attached now in order for us to
23:58 - demonstrate that we do need to
24:01 - create a blueprint so over here inside
24:03 - of the content we can right click and
24:05 - create a new folder for blueprints
24:08 - and for this bad boy i'm going to go
24:10 - inside create a blueprint class that is
24:12 - going to inherit so here all classes we
24:15 - are going to say monster shooter
24:17 - character so this is the one that we are
24:19 - going to inherit and i'm going to say bp
24:21 - underscore
24:22 - monster shooter character there you go
24:26 - and double click this bad boy open him
24:29 - you know in visual studio i in visual
24:31 - studio in the editor not the visual
24:33 - studio so we need to open him in the
24:35 - editor so over here there you go so we
24:37 - have the
24:39 - character mesh this is the mesh the the
24:42 - one that comes by default these are our
24:44 - hands that we are going to use and
24:45 - attach so basically over here for our
24:48 - hands i am going to choose the hands let
24:52 - me just find them mannequin hands or
24:54 - arms here they are this is what we want
24:57 - now i'm also going to attach the i'm
25:00 - going to attach the blueprint for the
25:02 - animation for these and this is going to
25:04 - be first person anim there you go which
25:06 - is automatically going to position them
25:08 - right here as you can see
25:11 - now when it comes to the gun we also
25:14 - need to go over here let me just compile
25:16 - and save that so go over here for the
25:17 - gun and we need to search the gun so let
25:21 - me just find it here is the gunny gunny
25:24 - and you know compile and save that so
25:27 - there you go so this is where my gun is
25:30 - going to be and i believe the gun should
25:32 - be a little bit more behind
25:36 - i think
25:38 - i'm not sure 100 but let's go over here
25:40 - inside of our map and what i'm going to
25:42 - do also here in the c plus plus class
25:44 - i'm going to right click and create a
25:46 - new c plus plus class and click here to
25:48 - show all classes and filter for the game
25:52 - mode
25:53 - and i want to inherit from the game not
25:55 - the game mode base but the game mode and
25:57 - i'm going to click here next and i'm
25:59 - going to call this one monster
26:02 - shooter game mode
26:05 - simple as that or monster shooter
26:07 - underscore game mode
26:08 - this i'm going to call monster shutter
26:10 - game mode and i am going to click here
26:13 - create class
26:14 - which is of course going to do you know
26:16 - all of the heavy lifting and whatnot and
26:19 - yada yada yada you get the point and all
26:21 - of that stuff
26:23 - so let us just wait for it and i can
26:25 - sing to you all this time
26:31 - reload everything
26:33 - now the reason why i have you know the
26:36 - reason why i
26:39 - created our own game mode is because we
26:41 - need to create a blueprint out of it so
26:44 - let's go here into the blueprints and
26:45 - right click blueprint class and filter
26:48 - for my
26:51 - monster
26:52 - shooter game mode here it is and i'm
26:54 - going to say bp underscore monster
26:57 - shooter underscore game mode
27:01 - so that we can go here inside of our
27:05 - project settings and then maps and modes
27:08 - and change the default game mode to our
27:11 - own so bp monster shooter game mode so
27:14 - that we can also change the default pawn
27:16 - class to our bp
27:18 - monster shooter character now the reason
27:20 - for that is now when we hit the play
27:22 - button to actually run the game our game
27:25 - character is going to be the one that's
27:26 - going to be spawned but let me just
27:27 - click on this character over here for
27:29 - whatever reason where is the character
27:32 - so first person character here he is i
27:34 - can delete this we don't need him
27:36 - over here
27:38 - i can have this one over here for
27:40 - spawning the character this is the start
27:42 - of the character right so yeah basically
27:45 - as i said when we run the game our own
27:46 - character is going to be spawned
27:49 - and we can test that out by hitting the
27:50 - play button and there you go so if i
27:52 - eject myself we are going to see that we
27:56 - have spawned the character look at that
27:58 - he is being spawned and look at where he
28:00 - is where the weapon is being spawned
28:03 - it's right in the socket that i showed
28:05 - you a moment ago so let me just find it
28:08 - it was in the first person not ppp fps
28:12 - actually let me just go here in the
28:13 - content and then first person and then
28:17 - fps weapon and then meshes and here it
28:20 - is actually this is the gun you know i
28:21 - forget where this is so excuse me for
28:23 - that one so it's
28:25 - first person
28:27 - and character and then mesh and here it
28:30 - is finally finally i know where it is
28:33 - and when we go into skeleton again
28:35 - having the grip point if i zoom in on
28:37 - the grip point and i press f to go
28:39 - directly to the grip point you see it's
28:40 - in the hand and if i go here in the map
28:43 - voila there you go he is already
28:46 - spawned here in the map so this video is
28:50 - more about explaining what you know is
28:53 - happening and all of that stuff so in
28:54 - the next video we're going to start to
28:56 - code the movement of our character then
28:59 - we're going to start creating the level
29:00 - and all of that part or that stuff and
29:03 - yada yada if something was not clear
29:04 - when it comes to this video and the
29:05 - explanations that we did and what is you
29:08 - know a socket and all of that stuff just
29:10 - make sure you ask in the comment down
29:12 - below and i will see you guys
29:14 - in the next video where else i'm going
29:16 - to see i'm going to see in jail because
29:17 - you know i i don't go to jail you go
29:20 - and uh yeah so we cannot see each other
29:22 - i will see you in the next video
29:24 - alrighty then my game dev gangsta roni
29:26 - oh now we are going to create the
29:28 - movement for the player because even if
29:29 - i hit the play button try to move
29:31 - nothing is happening you get the point
29:32 - so we are going to go into the project
29:34 - settings in here for the input we have
29:36 - everything already predefined but we
29:38 - don't need all of this so over here i am
29:42 - going to have jump and fire but reset vr
29:45 - no no i don't need that so over here for
29:47 - the fire i'm also going to remove all of
29:49 - this here we only need the left mouse
29:51 - button nothing else for the jump we also
29:53 - need the space nothing else so all of
29:56 - this right here can be safely deleted we
29:59 - are going to have move forward but for
30:01 - the move forward we are going to have ws
30:04 - up and down
30:05 - all of these others you know we don't
30:07 - need them why should we
30:09 - for the move right we need the a and the
30:12 - d
30:13 - that's all so let's go over here
30:16 - remove all of this remove remove
30:18 - for the turn and turn rate so basically
30:22 - this over here
30:24 - we don't need the turn rate like this so
30:27 - we can simply delete it here we have the
30:29 - lookup rate and the lookup so lookup
30:31 - rate i'm also going to delete we need to
30:33 - turn and look up so the turn has the
30:35 - mouse x and the look up has the mouse y
30:38 - and all of this right here this is what
30:40 - we need of course i can also delete the
30:42 - up and down or add here left and right
30:45 - arrow key that is totally up to you but
30:48 - what is the next step is to go inside of
30:50 - our script inside of our cpp and over
30:54 - here set up player attachment so setup
30:56 - player input component basically to bind
30:59 - the functionality to input so what we
31:01 - need to do over here is we need to call
31:04 - the player input component so component
31:07 - like that
31:08 - and we are going to bind the action
31:11 - jump is the first one that we are going
31:13 - to do ie pressed so when we press the
31:16 - jump button inside of this i am going to
31:19 - call let me just see over here
31:21 - i almost tried to search for the jump
31:23 - functionality but we have the a
31:24 - character that colon colon i almost said
31:27 - dash jump there you go so this is
31:29 - already built into our character i can
31:31 - copy this
31:33 - and paste it here so now i'm going to do
31:34 - that for the e do that do it for the e
31:37 - released
31:38 - and over here i'm going to say stop
31:40 - jumping so when you release the button
31:42 - we're going to stop the jumping simple
31:44 - as that next i'm also going to take our
31:47 - player input component and bind the
31:50 - action and the action is going to be
31:53 - over here fire so fire the section is on
31:57 - fire anyways when we press the i when ie
32:00 - is pressed inside of this we want to
32:03 - call the fire functionality which is
32:05 - this one over here we're not going to
32:07 - code it right now but as i said when we
32:10 - go through things that we want to do i
32:12 - don't want to you know just skip this
32:14 - and then later on when we actually want
32:16 - to shoot i come back oh we also need to
32:17 - bind the component no i might forget and
32:20 - stuff like that so i'm going to do it
32:21 - right now
32:22 - you can do some ue log for example
32:26 - just to print out to see if this
32:28 - actually works but we know that it is
32:30 - going to work i'm also going to take the
32:32 - player input component and we are going
32:34 - to bind
32:35 - bind the axis so bind axes and this time
32:38 - is going to be move forward axis inside
32:41 - of this and we're going to set here our
32:44 - move forward so simply copy this here
32:47 - and add the and sign there you go
32:50 - next i'm going to copy this and paste it
32:53 - down below because this time we have the
32:56 - move right so move right and also
32:59 - calling the move right function
33:02 - last but not least we have two more so
33:04 - i'm simply going to copy these and paste
33:07 - them over here so one is going to be the
33:09 - turn the other one is going to be look
33:12 - up there you go and over here we are
33:15 - going to call the turn at rate and over
33:18 - here we're going to call look at rate
33:21 - simple as that so this is how we bind
33:23 - and this is not the first time that
33:25 - we're doing this so we already know how
33:27 - to do it now here inside of move forward
33:30 - we are going to test if the value which
33:33 - is this parameter over here so if the
33:36 - value is not equal to
33:38 - 0.0 f meaning we are actually pressing
33:41 - the button then we are going to say add
33:44 - movement input and we are going to say
33:47 - over here get actor
33:49 - forward vector and comma here and pass
33:53 - the value so that we know where we are
33:55 - going
33:56 - you can assume what we're going to do
33:58 - for the move right the same thing so
34:00 - copy over here but this time we're not
34:02 - going to say get actor forward vector
34:04 - instead over here we're going to say get
34:06 - actor
34:07 - right vector because we are always right
34:11 - now over here
34:14 - we are going to calculate delta for the
34:17 - frame of the turn so what we are going
34:19 - to do over here is we are going to say
34:21 - add controller
34:23 - yaw input
34:24 - and we are going to use the rate that is
34:27 - the parameter over here so using the
34:30 - rate multiplied with the turn rate
34:33 - and then we're going to multiply that
34:34 - with the get world and from the world
34:37 - we're going to get the delta seconds
34:39 - like this
34:41 - and as i said this is going to calculate
34:43 - the delta for this frame from the rate
34:45 - information which is going to make it a
34:46 - little bit smoother and going back over
34:49 - here pasting this the look rate but this
34:52 - time it's not going to be add controller
34:54 - yaw input it's going to be the pitch
34:56 - input so over here i'm going to say
34:58 - pitch input and again we're going to use
35:01 - the rate over here the parameter but
35:03 - this time it's not the turn rate it's
35:05 - the look up rate that we are going to
35:08 - use and multiply that with the world and
35:10 - delta second so ctrl shift b to compile
35:13 - all of this and make sure that we didn't
35:15 - do any oopsies which is the case there
35:17 - you go let me just turn off my volume
35:19 - because i don't want you to hear this
35:22 - it's embarrassing and whatnot just
35:23 - kidding but you get the point so over
35:25 - here we bound the functionality we know
35:28 - already what this is and in case some
35:29 - beginner is watching this what is this
35:31 - jump what is this fire this move forward
35:34 - well it's basically this functionality
35:36 - over here so this is the jump this is
35:37 - the fire move forward move right turn
35:40 - and all of that stuff so we are binding
35:43 - these functions
35:45 - to those you know to those axes and
35:48 - inputs which means when we press the
35:50 - space bar you see over here for the
35:52 - jumper let's do it for the move forward
35:55 - so when we press the w or s key then we
35:57 - are going to execute the move forward
36:00 - the move forward function which is this
36:02 - one right here
36:03 - and we can go inside of our editor and
36:07 - we can test it out so if i hit the play
36:08 - button you see
36:10 - i can rotate now look up and down and i
36:13 - can move forward look at that i can also
36:15 - jump you see i have i'm jumping look at
36:17 - that jumpy jumpy jumpy jumpy jumpy jumpy
36:20 - jumpy jumpy jump you get the point i'm
36:22 - jumping
36:22 - so there you go so look or we can turn
36:25 - we can look up we can look down i can
36:27 - move backwards forward left and right
36:30 - and there you go so basically this is
36:33 - how easy it is to set up the moon this
36:36 - is for you who are beginners and
36:37 - watching this and i know this is not a
36:39 - complete beginner tutorial but i cannot
36:41 - prevent beginners from watching it for
36:43 - whatever reason
36:44 - you know i cannot put some wall
36:46 - internet wall that doesn't allow you to
36:48 - do that but you get the point anyways if
36:50 - something is not clear what we did over
36:52 - here as i said and already explained so
36:54 - we only bound the axes that we have over
36:58 - here inside of our project setting so
37:01 - move forward that is the name if here
37:03 - the name is movement so if we change
37:04 - from move forward to movement over here
37:08 - we will also change from move forward to
37:10 - movement so those names need to match up
37:12 - and then over here this is just the
37:13 - function that is bound to that axis or
37:16 - action that's all there is to it so when
37:18 - we press the appropriate buttons that we
37:20 - have designated for move forward move
37:22 - right turn look up
37:24 - these appropriate functions that are
37:26 - bound to those axes or actions will
37:29 - execute will execute so there you go if
37:32 - something is not clear ask in the
37:34 - comment down below i will not help you
37:35 - out i will just ignore your comment i'm
37:37 - just kidding i will try to help you out
37:38 - as best as i can and i will see you guys
37:40 - in the next video moving forward now
37:42 - that we have our character and he is
37:44 - moving let us create the projectile
37:45 - before we can start shooting and in
37:47 - order for us to do that we need to go
37:49 - over here inside of our c plus plus
37:52 - files and all that stuff so we are going
37:54 - to right click and go here new c plus
37:56 - plus class that is going to inherit from
37:58 - the actor and from there we're going to
38:00 - click on next and from here instead of
38:02 - my actor i'm simply going to call it
38:04 - projectile and this is going to be the
38:06 - projectile you can also call it bullet
38:08 - or however you want to call it okay that
38:10 - is up to you you can call it carl kenny
38:13 - i don't know but anyways i'm going to
38:15 - call it projectile so let me just lower
38:18 - my volume so that we don't hear all of
38:20 - those noises when you know something has
38:22 - compiled and all of that stuff let's go
38:24 - over here reload everything inside of
38:27 - our cpp file or actually in the visual
38:29 - studio and right here below our tick so
38:32 - this is where we are going to create our
38:34 - own properties and we are going to
38:36 - create a new property and this one is
38:39 - going to be visible
38:41 - defaults only
38:44 - and from there we are also going to set
38:46 - it into the category which is going to
38:48 - be equal to projectile and this is again
38:51 - when you want to locate it inside of a
38:53 - blueprint you can find it under the
38:54 - projectile category so over here i'm
38:56 - going to say class u sphere component
39:00 - and from there i'm going to call it
39:02 - collision sphere which is going to and
39:04 - it's not cp it's collision sphere and
39:07 - this one is going to be the sphere that
39:09 - we are going to use to detect collision
39:10 - with the player and other components in
39:13 - the game so next we have the u property
39:16 - and this one is going to be visible
39:18 - anywhere and this one's going to be
39:20 - blueprint
39:22 - read only and it's going to be category
39:25 - equal to movement and this one is going
39:28 - to be class
39:30 - u projectile movement component so we
39:34 - are going to use the projectile movement
39:36 - component to propel the projectile to
39:38 - move and i'm going to call it projectile
39:40 - movement there you go
39:42 - next we are going to create a u function
39:45 - and this one is going to be our
39:47 - detection for the hit and over here i'm
39:50 - going to call it void on hit and it
39:52 - takes a lot of these parameters as you
39:54 - already know so you primitive
39:58 - component which is a pointer hit
40:00 - component it also takes an actor which
40:04 - is you know also a pointer other actor
40:07 - that we are going to test if we you know
40:09 - hit or who is the other actor that we
40:11 - hit
40:12 - you
40:13 - primitive component which also is a
40:16 - pointer other component
40:19 - and then in 32
40:21 - other body index and bool b
40:26 - from
40:26 - sweep and last but not least constant f
40:30 - hit result
40:32 - which we are going to call hit now of
40:34 - course we don't need all of these
40:36 - parameters but they are mandatory for us
40:38 - to
40:39 - well create or to declare this function
40:42 - so we need to do it
40:44 - and also the last step we are going to
40:46 - have a u property
40:48 - not proper two its property and this one
40:50 - is going to be edit anywhere and it's
40:53 - going to be a float
40:55 - damage value by default it is going to
40:58 - be equal to 20. now this damage value is
41:00 - going to be the damage that we are going
41:02 - to deal to the enemy
41:04 - when we hit it and over here i'm going
41:06 - to go and click on so right click on on
41:09 - hit and from here create declaration
41:12 - inside of the c plus plus file so over
41:15 - here inside of the c plus plus
41:17 - automatically this will be created so we
41:19 - don't have to you know type this out on
41:22 - our own now when it comes to the cpp
41:25 - file we know that over here we are going
41:27 - to implement everything so right below i
41:30 - am going to include everything that we
41:33 - need to include i'm also going to
41:34 - include over here so i'm going to say
41:36 - include and this one is going to be
41:39 - enemy.h now we still didn't create the
41:41 - enemy so i am going to simply comment
41:43 - this out otherwise we will have issues
41:46 - but i'm going to leave it there so that
41:47 - later on when we actually create the
41:50 - enemy we know that we need to include it
41:52 - because again
41:53 - i don't like to go back and forth every
41:55 - single time oh we created enemy let's go
41:57 - and include it and all of that stuff
42:00 - so over here inside of the constructor
42:02 - for the projectile we are going to say
42:04 - our collision so collision sphere is
42:08 - going to be equal to create default sub
42:11 - object of u
42:13 - sphere component and that's your
42:16 - component we are going to give it a name
42:18 - with a text over here so the name is
42:20 - going to be sphere
42:22 - collision
42:24 - and the sphere component we are going to
42:25 - set the initial radius to 20 so i'm
42:27 - going to say
42:28 - collision sphere and from here in it
42:32 - radius or in its sphere radius we're
42:34 - going to set that to 20 as i already
42:37 - said it's 20 f not 20 point f0
42:41 - i'm also going to set the sphere to be
42:43 - the root component so i'm going to say
42:46 - root component is equal to the collision
42:49 - sphere there you go which is going to
42:52 - set the sphere as the root of all other
42:54 - components that we are going to add to
42:55 - the projectile
42:57 - now for the projectile movement so
42:58 - projectile movement is going to be equal
43:01 - to
43:02 - create default sub-object of you
43:05 - projectile movement and from there give
43:09 - it a text or basically a name
43:12 - which is inside of a text and i'm going
43:14 - to call it projectile
43:16 - movement
43:17 - now right here below over here i'm going
43:20 - to say projectile movement and we are
43:22 - going to say update it component is
43:25 - going to be equal to collision sphere or
43:27 - basically what does this mean so it's
43:30 - collision
43:31 - sphere
43:32 - not let me just take it from here and
43:34 - copy and paste it so the updated
43:36 - component basically means who is the
43:38 - projectile movement moving so who is he
43:41 - moving he's moving the collision sphere
43:43 - which is the root component which is
43:44 - going to move all other components that
43:46 - are below it
43:48 - also over here our projectile movement
43:50 - we are going to set initial speed to be
43:53 - equal to 3 000 because we want our
43:56 - projectile to be fast as a you know
43:59 - something that's fast projectile
44:01 - movement from here max speed is also
44:03 - going to be equal to 3 000 because this
44:06 - is power level over 2000 it's not over
44:09 - 3000 because it is you know
44:12 - you get the point projectile movement we
44:14 - are going to say b rotation follows
44:16 - velocity is going to be equal to true so
44:19 - rotation follows velocity this is
44:21 - self-explanatory the projectile will
44:23 - rotate according to the velocity and our
44:26 - projectile movement
44:28 - from here we're going to say b
44:31 - should bounce is going to be equal to
44:33 - true so we are going to be able to
44:35 - bounce now i'm also going to set the
44:37 - initial life span of the projectile
44:40 - which is going to be here so initial
44:42 - life span that's going to be equal to
44:44 - three seconds which means if we don't
44:46 - hit anything
44:47 - after three seconds the projectile will
44:49 - be destroyed
44:51 - simply after three seconds that's all
44:53 - there is to it now over here inside of
44:55 - begin play this is where we need to
44:57 - connect so our collision sphere and from
45:01 - here we need to say on component begin
45:03 - overlap
45:04 - add dynamic
45:06 - and over here is where we are going to
45:09 - connect this function so i'm simply
45:10 - going to copy it
45:12 - and from here i'm going to say this and
45:15 - then and sign and paste the function
45:17 - that we want to provide over here so
45:19 - again we need to do this in on the
45:20 - gameplay because if we do it inside of
45:22 - the constructor it is not going to work
45:24 - if i don't forget when we create the
45:26 - enemy
45:27 - i will test it out by simply you know
45:30 - just to demonstrate what happens if we
45:32 - call it inside of the constructor as
45:34 - opposed what happens when we call it in
45:36 - ambiguity play but we also did this
45:38 - numerous of times in my other tutorial
45:40 - so it's not something new that we didn't
45:42 - do so far so ctrl shift b
45:44 - for this to compile so let us just wait
45:48 - for this to compile let's see if i have
45:50 - any oopsies and i don't so build one
45:53 - succeeded there you go
45:56 - so what i'm going to do now is go and
45:58 - create a blueprint from this because in
46:01 - the next video we are going to start to
46:02 - shoot it so inside of blueprints i'm
46:03 - going to right click and blueprint class
46:06 - and i'm going to filter for projectile
46:09 - and here it is and from there i'm going
46:11 - to say bp
46:12 - project
46:14 - and
46:15 - go inside of the blueprint so that we
46:18 - can you know add everything what we need
46:21 - are we in the viewport yes we are what
46:23 - i'm doing so i'm in the viewport so here
46:26 - we have the collision sphere what i'm
46:27 - also going to do is attach the
46:30 - i'm going to attach a static mesh
46:32 - component so over here i'm going to say
46:34 - static mesh there you go it's simple as
46:36 - that and it's going to be our projectile
46:39 - mesh now of course i can also create
46:40 - this from the blueprint but you know
46:44 - actually from the code but i'm also
46:45 - going to demonstrate how you're going to
46:47 - mix blueprints in code because this is
46:48 - what happens all the time with unreal
46:51 - engine so you need to mix blueprints in
46:53 - code it's simple as that now over here
46:55 - for the static mesh i'm going to filter
46:57 - for projectile first person projectile
46:59 - it's a huge sphere so over here i'm
47:02 - going to click on the lock icon and set
47:04 - the scale for or for all three axis to
47:07 - 0.1.1
47:09 - and 0.1 so there you go now this is it
47:13 - when it comes to creating the projectile
47:15 - we still cannot test it out because i
47:16 - don't want to make this video too big
47:19 - and stuff like that
47:20 - it's already 10 minutes and so on and so
47:23 - forth so starting from the next video we
47:25 - are going to
47:26 - see how this projectile is going to work
47:28 - how we are going to propel it and all of
47:30 - that stuff but if something is not clear
47:32 - when it comes to creating the projectile
47:34 - just make sure that you ask in the
47:36 - comment down below now all of this here
47:38 - that we did it's nothing new maybe the
47:40 - projectile movement but you can you know
47:42 - just read from the functions or what we
47:44 - did
47:46 - they are self-explanatory but again if
47:48 - something's not clear make sure that you
47:49 - ask and i will also help you out in the
47:50 - next video we're going to start shooting
47:52 - the projectile i will see you guys then
47:55 - now that we have the projectile we can
47:57 - put it or add it to the monster
47:59 - character and use it for our shooting so
48:01 - over here inside of our dot h file right
48:05 - after we create all of this look at rate
48:07 - and all of this stuff we are going to
48:09 - create new variables and they are going
48:11 - to be public so one is going to be you
48:13 - property and this one is going to be
48:15 - edit defaults only and i'm going to say
48:19 - category
48:20 - is equal to not gotta go rule category
48:22 - is equal to projectile
48:25 - now what i'm also going to do or how am
48:27 - i going to declare this this is going to
48:29 - be rt sub class so sub class not sub
48:33 - case subclass of
48:36 - and over here i'm going to say class a
48:39 - projectile and i'm going to call it
48:41 - projectile simple as that and it's with
48:43 - one r and they are both lower case or
48:46 - basically one r and it's lowercase not
48:48 - both
48:49 - so moving forward we are also going to
48:52 - add the sound that we are going to play
48:53 - when we shoot so over here i'm going to
48:54 - say your property and this one is going
48:56 - to be added
48:58 - anywhere and i'm going to call it or set
49:01 - here blueprint read write i'm also going
49:05 - to set the category to be equal to
49:07 - gameplay and this was going to be our
49:09 - class u
49:11 - sound base which we're going to call
49:14 - fire
49:15 - sound or shoot sound or however you want
49:17 - to call it
49:18 - and moving forward we are going to
49:20 - create another you property
49:23 - and this one is going to be edit
49:26 - anywhere blueprint read writes a
49:28 - blueprint
49:30 - read write category so category is going
49:33 - to be equal to gameplay and this one is
49:35 - going to be our class u anim montage
49:39 - which is a pointer and we are going to
49:41 - call it fire animation which is
49:43 - basically the animation that we are
49:44 - going to use to preview when we shoot so
49:47 - when we shoot this is the animation
49:49 - that's going to be played now over here
49:51 - we're going to say class u anim instance
49:54 - which is a pointer and i'm going to call
49:57 - anim instance this i'm going to call it
50:00 - next we are going to have a class
50:02 - u
50:03 - world and i'm going to call it world and
50:05 - it's a pointer so not the parentheses
50:07 - world like that
50:10 - f rotator spawn rotation for the
50:14 - projectile and f vector is going to be
50:17 - the spawn location
50:19 - for the projectile so these are the
50:21 - variables that we currently need now
50:24 - over here inside of our monster.cpp at
50:27 - the top we are going to add the includes
50:30 - so you can just pause the game and add
50:32 - all the includes as i already said i
50:34 - mentioned i do this so that we you know
50:37 - don't have to do it over and over again
50:39 - or every single time we basically
50:42 - every single time we
50:43 - add something new i don't have to go
50:45 - back oh include this include that so
50:47 - include the projectile animation enemy
50:49 - instead kismet gameplay static statics
50:52 - and the monster shooter game mode i'm
50:54 - going to ctrl shift b just to compile
50:56 - this see if i you know made a typo
50:58 - anywhere but i'm also going to attach
51:00 - the shooting sound and i'm also going to
51:02 - attach the projectile and i'm going to
51:04 - attach the montage or the animation
51:07 - now for whatever reason it is taking a
51:10 - little bit too long for this to compile
51:12 - so i'm simply going to wait or now okay
51:15 - now it is compiling okay there you go it
51:18 - has compiled so let's go back here
51:20 - inside of our first person shooter or
51:23 - monster character here he is open the
51:25 - blueprint
51:27 - and click on the top
51:29 - object over here you see the top one
51:31 - this one so that now over here we are
51:33 - going to have the fire sound the fire
51:35 - animation and the projectile
51:38 - so the fire sound is going to be weapon
51:41 - fire so weapon
51:44 - fire 2 this is the fire sound the fire
51:46 - animation is going to be again fire and
51:49 - over here first person fire montage and
51:53 - the projectile over here is going to be
51:55 - the bp projectile simple as that so
51:57 - compile and save that so now we can go
52:00 - back inside of our script and do you
52:03 - know the rest what we need to do now
52:05 - inside of begin play where we are is
52:08 - where we are going to get some
52:09 - references so we're going to say world
52:12 - is going to be equal to get world so
52:14 - we're going to get that we are also
52:16 - going to say our annum instance and
52:18 - we're going to get that from the hands
52:20 - mesh so our hands mesh and from there
52:22 - we're going to say get anim instance
52:25 - there you go
52:26 - so this is dynamic instance that we're
52:28 - going to get and did we add anime
52:30 - instance yes anime instance why is this
52:33 - in
52:34 - stance okay i didn't type it correctly
52:36 - so anime instance there you go
52:40 - so now inside of our on fire this is
52:44 - where we are going to do the fire or
52:46 - whatever i wanted to sing like that you
52:48 - know whatever at some point anyways
52:51 - we're going to test if the world is not
52:54 - equal to null so if we have the world
52:57 - because the world is important to us you
52:59 - are my world i'm your world and we are
53:01 - important to each other so next over
53:03 - here i'm going to say spawn rotation is
53:06 - going to be equal to get
53:08 - control rotation and this is going to be
53:10 - the control rotation from the
53:13 - pawn character or our own character now
53:16 - why am i testing if the world is not
53:17 - equal to null just so that we have a
53:19 - reference to the world because the world
53:21 - is the one who is going to spawn
53:23 - the
53:24 - projectile so we need to have the world
53:26 - if we don't have it we will not spawn
53:27 - the projectile our spawn location
53:31 - is going to be equal to and over here
53:33 - we're going to perform some tests so
53:35 - first we are going to say if our muzzle
53:38 - so if the muzzle location is not equal
53:42 - to null ptr and this is what we are
53:44 - testing and if if this allows me to test
53:47 - it out so i believe this was okay there
53:50 - you go so null ptr if muzzle location is
53:54 - not equal to null ptr with a question
53:57 - mark we're asking this then we're going
53:59 - to say over here
54:01 - muzzle location from there we're going
54:04 - to say get component location
54:08 - otherwise colon over here we're going to
54:10 - say get actor
54:12 - location and there you go plus the spawn
54:16 - rotation dot rotate vector and we're
54:20 - going to rotate by the gun
54:22 - off set and there you go and why is this
54:26 - giving me if muzzle location not equal
54:28 - to null ptr
54:31 - so it's no p t r there you go why is
54:36 - why was it giving me weird anyways over
54:39 - here we're testing or we're setting the
54:41 - spawn location to be equal to we're
54:43 - first testing if the muzzle location is
54:45 - not equal to null pointer meaning we
54:47 - have the muzzle location we have created
54:49 - it because i told you we are going to
54:50 - use the muzzle location
54:52 - to shoot so that is the location from
54:55 - where the from where the projectile is
54:57 - going to fire so that's why we need it
54:59 - so if it's not equal to null pointer
55:01 - then we are going to get the location of
55:04 - the muzzle so if it's not equal to
55:06 - pointer but this is just in case if we
55:08 - forget for example or this is a way to
55:11 - secure your code let's say like that so
55:14 - that you make it error proof so if it is
55:17 - so with the question mark essentially
55:19 - what we are asking is this so we're
55:20 - asking if the muzzle location if it's
55:24 - not equal to null ptr like that then
55:27 - over here we're going to do this we're
55:29 - going to say our spawn location so spawn
55:32 - location is equal to and we're going to
55:35 - get that from the muzzle location
55:37 - else so else over here if that is not
55:41 - the case so the muzzle location is equal
55:44 - to null ptr then we're saying this spawn
55:47 - location is equal to all of this so
55:50 - essentially this line of code so from
55:53 - here up to here
55:55 - is equal to all of this
55:57 - so this is how you do it i don't believe
55:59 - this is called a ternary operator i
56:01 - don't you know i forget the names and i
56:02 - don't even bother to remember these
56:04 - names because the important thing is
56:06 - that you know what it is maybe for a job
56:09 - interview you should know what it is if
56:10 - they ask you what is a ternary operator
56:12 - you should know the attorney operator is
56:13 - this but for your own development you
56:15 - just need to know how to use it so don't
56:17 - bother that much
56:19 - my advice maybe i'm wrong maybe i'm not
56:21 - comment down below what you think but
56:22 - anyways
56:23 - you denote it with a question mark so
56:25 - you have a condition then you add a
56:27 - question mark and after that is the
56:29 - first condition so if it's true this
56:30 - will be executed call on if it's not
56:32 - true then this will be executed so again
56:34 - this right here is equivalent to this
56:37 - right here so this is what we are doing
56:39 - now moving forward we are going to set
56:42 - spawn collision handling override so
56:45 - over here i'm going to say f actor
56:47 - spawn parameters and i'm going to call
56:50 - it actor spawn params
56:53 - and i'm going to say actor
56:55 - spawn params is or dot spawn collision
57:00 - handling overwrite is going to be equal
57:02 - to e spawn actor
57:06 - collision handling method column colon
57:09 - adjust
57:10 - possible but don't spawn if colliding
57:14 - what the hell is this teacher you are
57:16 - confusing me i don't know what it is
57:18 - well
57:19 - don't you know just calm down i'm going
57:21 - to explain so this f actor spawn
57:23 - parameters defines available strategies
57:27 - for handling the case where an actor is
57:29 - spawned in such a way that it penetrates
57:32 - blocking collision basically when there
57:34 - is a danger that when you spawn an actor
57:36 - that will collide
57:37 - right away with something at that point
57:40 - where you are going to spawn it well
57:42 - this defines how you're going to or how
57:44 - that actor is going to handle that
57:46 - collision now this adjusts if possible
57:49 - but don't spawn if colliding
57:51 - this means that the actor will try to
57:53 - find a nearby non-colliding location
57:56 - based on the shape component of course
57:58 - so it's going to try to find a nearby
58:00 - non-colliding location but will not
58:02 - spawn unless one is found so if it's you
58:06 - know if it sees that something is there
58:08 - and it can collide with it it will not
58:10 - spawn it will try to find nearly so near
58:13 - it something you know some location
58:16 - where
58:16 - it will not collide and then it will
58:18 - spawn there essentially this is what we
58:20 - are doing
58:21 - and last but not least we are simply
58:23 - going to say over here world
58:25 - spawn actor
58:27 - and the actor that we are going to spawn
58:30 - from here we are going to say
58:32 - a projectile this is the actor that we
58:35 - are going to spawn and who are we going
58:36 - to use as a reference well our own
58:38 - projectile that we attached in the
58:40 - beginning of this video at the spawn
58:43 - location using the spawn rotation and
58:47 - actor spawn
58:49 - params and there you go so that's why we
58:53 - need to know if the world is not equal
58:55 - to null so that we can use it to spawn
58:57 - the projectile and i can control shift b
58:59 - just to make sure that i didn't do any
59:01 - oopsies you see the build has succeeded
59:03 - now i'm not sure if the sound is going
59:06 - to be heard because you know i have the
59:08 - mic at the low input
59:11 - volume or low input level which means i
59:14 - have my mic near my mouth so this is why
59:16 - the sound is now crispy you know
59:18 - and this is me bragging but anyways that
59:21 - is the reason why we cannot hear the
59:23 - shooting but i will hope that it will be
59:25 - heard from the desktop because i'm
59:27 - recording desktop and audio at the same
59:29 - time anyways
59:31 - moving forward
59:32 - let's go here and test it out so if i go
59:35 - here in the first person example map
59:37 - there you go look at that so we are
59:40 - shooting and it is shooting but we are
59:42 - not animating and displaying the sounds
59:45 - so there you go we are shooting and
59:46 - doing all of that stuff there you go
59:48 - there you go there you go there you go
59:50 - we can you see destroy everything and it
59:52 - is working yada yada yada yada yada yada
59:55 - but we don't have the shooting sound and
59:57 - that's and the animation so we need to
59:59 - go here right below
60:01 - and we need to test so basically outside
60:04 - of our so outside of this over here so
60:07 - outside of the if statement for testing
60:09 - but we can actually do it inside because
60:11 - it makes more sense to do it inside
60:13 - we're going to test if our fire sound is
60:16 - not equal to null meaning we have
60:18 - attached our fire sound so we're going
60:20 - to call you
60:22 - game
60:23 - play statics
60:25 - so game play
60:27 - statics
60:28 - hopefully it will you know give it to me
60:31 - there you go play sound at location
60:35 - there you go this and the fire sound is
60:38 - the one that we are going to play at the
60:40 - get actor location there you go so it's
60:43 - a good idea to actually call the code to
60:46 - play the sound if you want the sound to
60:47 - be played and over here if our fire
60:50 - animation is not equal to null
60:53 - and our anim instance is not equal to
60:57 - null then we are going to call the anim
61:01 - instance from here to montage play so
61:04 - montage montage underscore play not
61:08 - player
61:09 - and it's montage what is it with me
61:12 - montage underscore play there you go
61:15 - passing the fire animation and 1.0 f
61:20 - which is the playback rate so if you
61:21 - hover over that's the in play rate
61:24 - basically we're going to play the
61:25 - animation from the beginning this is
61:26 - what it means so ctrl shift b and make
61:29 - sure that this compiles and let me just
61:30 - lower my volume because i think it is
61:32 - too loud well not it's a 30 but i think
61:34 - you will hear it if not you will hear it
61:36 - guaranteed on your own computer but i
61:38 - will try to you know at least get the
61:41 - audio from the desktop there we go
61:45 - you can hear that we are
61:48 - shooting and we can also
61:50 - hit all of these here now of course let
61:52 - me just
61:52 - go and you know
61:55 - lower the volume just a little bit so
61:56 - that we can actually hear what
61:59 - i'm talking about
62:02 - projectiles and all of that stuff so
62:05 - this is how you can use the same code
62:07 - for your own game to shoot the
62:09 - projectiles and yada yada yada if
62:12 - something is not clear when it comes to
62:13 - this video for the code that we did over
62:15 - here for everything that we typed out
62:18 - just make sure that you ask in the
62:19 - comment down below spawn rotation we get
62:21 - it from the control rotation i explained
62:23 - this over here with a very cool visual
62:25 - example by using if else statements i've
62:28 - explained the actor parameters using the
62:30 - world to spawn the projectile over here
62:32 - if we have the sound and the animation
62:34 - just play them and that would be it
62:36 - anyways
62:37 - as down below suddenly it's not clear i
62:39 - will help you out and i will see you
62:40 - guys in the next video what is up people
62:43 - so now we are going to create our enemy
62:45 - because we already have the player he's
62:47 - shooting so let's go over here into c
62:48 - plus plus and
62:50 - see section or folder and create a new
62:54 - class that will inherit from the
62:55 - character and from here i'm simply going
62:57 - to call it anime very clever very
63:00 - creative i'm the most creative person in
63:02 - the whole world i'm just going to lower
63:03 - my volume or basically mute my computer
63:06 - so that we you know don't get some
63:09 - i don't know how's it called
63:11 - hearing disability hearing
63:14 - problems whatever because my you know
63:17 - speakers destroyed your ears we don't
63:19 - want that okay we want you to follow the
63:20 - tutorial so let's go over here and
63:23 - double click the enemy open it inside of
63:25 - our visual studio and reload everything
63:27 - and yada yada yada so in this video i'm
63:29 - just going to prepare the basic stuff
63:31 - such as animation and some components so
63:33 - over here after we create our setup
63:35 - player input component we are going to
63:37 - create a new property and this one is
63:39 - going to be edit
63:41 - anywhere so anywhere and it's going to
63:43 - be class u-box component which is a
63:47 - pointer and this is going to be our
63:48 - damage collision which is basically
63:50 - going to be the component that we are
63:52 - going to use to detect damage dealt to
63:54 - the player so when the player collides
63:55 - with this component we will deal damage
63:57 - to him over here i'm just going to paste
63:59 - this function you can go and basically
64:01 - copy and paste it from the player
64:02 - himself so you can go here inside of the
64:05 - monster shader character dot h
64:07 - and you can where is it
64:09 - monster shooter character where do
64:12 - actually it's in the projectile so in
64:13 - the projectile you can just copy this
64:15 - and you can go over here and you can
64:17 - paste it and from here i'm going to
64:19 - quick actions and refactoring create the
64:22 - you know declaration and whatnot so it
64:24 - is going to create it hopefully did it
64:27 - create it or did it block there you go
64:30 - it blocked for a second but it also
64:32 - created it so over here at the top
64:35 - we are going to have a few includes
64:37 - you're going to have more includes later
64:38 - on don't worry about that so over here
64:40 - we have the box component a monster
64:42 - shooter character we will need that to
64:44 - detect if we have collided with the
64:46 - monster shooter character so what's
64:48 - gonna happen inside of our constructor
64:51 - we're going to say damage collision is
64:54 - going to be equal to create default so
64:57 - it's default not defy
64:59 - default i need to do it again so create
65:01 - default default sub object and it's
65:05 - going to be a u box component and we're
65:08 - going to give it a name here inside of a
65:11 - text the name is going to be damage
65:13 - collision voila there you go we are
65:16 - going to
65:17 - set it up or attach it on the root
65:19 - component so setup attachment on the
65:22 - root component that would be pretty much
65:25 - it and inside of our begin play we are
65:28 - going to bind the function to the on
65:31 - component begin overlap so damage
65:33 - collision
65:34 - on component begin overlap that
65:38 - add dynamic dynamic there you go this
65:41 - and the name of the function which is
65:43 - going to be our a enemy on hit
65:46 - of course adding the and signed and
65:48 - there you go
65:50 - now we can ctrl shift b to compile this
65:53 - because now we are going to go inside of
65:56 - our
65:57 - editor and create a blueprint for it so
65:59 - the build has succeeded let's go in the
66:01 - editor
66:02 - and inside of our blueprints we are
66:05 - going to right click and go blueprint
66:07 - class that's going to inherit the enemy
66:09 - class
66:10 - and this one is simply going to be bp
66:12 - enemy
66:13 - very simple we did this numerous of
66:16 - times and this is the damage collision
66:18 - that we already have so what i'm going
66:20 - to do with the damage collision is i'm
66:22 - going to set the x to 41
66:24 - that is the position of it and over here
66:27 - i'm going to set the box extend on the y
66:29 - to 60 and on the z to one one two so 102
66:34 - also for our mesh we are going to select
66:38 - over here our character or the vampire
66:41 - there you go he is translucent or
66:44 - transparent not translucent let me just
66:45 - first do this so on the z axis i'm going
66:48 - to say minus 85 and rotate him minus 90
66:52 - degrees and this is how the character is
66:54 - going to well look like
66:57 - when it comes to the capsule component
66:59 - we are going to leave as is compile and
67:01 - save and why is he you know why can we
67:04 - see through him well because he's a
67:06 - vampire first things first and the
67:08 - second is if we go here in the meshes
67:11 - and let me just find the material
67:12 - vampire matte this is what we need so
67:14 - this material we need to click on this
67:16 - matte over here and this is not the
67:18 - first time we are doing this so over
67:19 - here for the material
67:21 - we have this blend mode which is
67:23 - currently set to translucent we need to
67:26 - set it to mask and apply that and save
67:29 - it when we do that it will change the
67:31 - appearance of that material
67:33 - i don't know that much about materials
67:35 - and what is going on here but basically
67:37 - when we do this now we have the we have
67:40 - the
67:41 - vampire visible so i can research a
67:44 - little bit more and explain that in a
67:45 - separate video if you want me to but you
67:47 - can also i encourage you to research
67:49 - that on your own because that's the best
67:50 - way to learn
67:52 - now over here i'm going to inside of the
67:54 - meshes so in the measure i'm thinking
67:56 - about creating a separate folder yeah a
67:59 - separate folder new folder and i'm going
68:00 - to call it enemy or simply yeah enemy
68:02 - animations
68:04 - so enemy animations because we are only
68:06 - going to have enemy animation so why not
68:08 - put it in a separate folder right click
68:11 - over here and we're going to go under
68:12 - animation and we're going to use blend
68:14 - space 1d
68:16 - and select the vampire skeleton and this
68:18 - one is going to be our vampire
68:22 - idol underscore running there you go
68:25 - so let's go inside and drag the idle
68:29 - animation over here this is not the
68:30 - first time we're doing this by the way
68:32 - and drag the running animation here i'm
68:35 - going to change here the horizontal axis
68:37 - name to speed not spare its speed and
68:41 - the maximum value can be three seven
68:44 - five so now for example if it's over
68:46 - here the value then he is in the idle if
68:49 - it's over here he is running you get the
68:51 - point so this is not the first time that
68:53 - we are doing this as i already mentioned
68:56 - so yeah that would be it
68:58 - we can also go now inside here and
69:02 - create an animation blueprint so this is
69:05 - what we want and it will take the
69:07 - vampire skeleton okay this is going to
69:09 - be our bp
69:11 - nme
69:12 - enemy underscore animation
69:15 - and for this one what i'm going to do is
69:19 - i'm going to add a variable
69:21 - and that one is going to be the speed
69:22 - variable which is going to be a float
69:25 - there you go compile and save that
69:27 - i'm also going to right click over here
69:29 - and create a state machine so state
69:32 - machine it's going to be my new state
69:34 - machine and i'm going to call this state
69:36 - machine vampire
69:39 - movement we can also call it simply
69:41 - movement that can do i'm going to plug
69:43 - this in even though we don't have
69:45 - anything but we can go over here and now
69:47 - we can right click and create a new
69:49 - state this is going to be idle
69:51 - underscore walk or
69:53 - basically backslash walk or underscore
69:56 - or
69:56 - what's with me and the underscore idle
69:59 - walk or idle running this is what i
70:00 - wanted to say this whole time
70:02 - so going back over here
70:04 - for the result i'm going to use the idle
70:07 - running which is our blend space 1d plug
70:10 - it in over here and plug in the speed
70:13 - over here now the speed variable we are
70:15 - going to change that so i'm going to
70:17 - compile and save that so that now
70:18 - automatically we see that the vampire
70:21 - has changed his state from the t pose to
70:23 - the animation pose but we are later on
70:25 - when we add later on in the next video
70:27 - when we start to add more variables to
70:29 - our enemy we are going to code the speed
70:33 - movement inside of our event graph over
70:37 - here so we're going to do that and we're
70:38 - going to get that from the script we're
70:40 - going to see all that don't worry about
70:42 - it just over here for the enemy and the
70:44 - mesh character for the anim class we are
70:46 - going to search for the
70:49 - bp enemy animation so that now if i
70:52 - compile and save
70:53 - and take the enemy so i need to find his
70:57 - blueprint which is inside of the
70:59 - blueprints an enemy and there you go
71:01 - so now we have the enemy who is right
71:04 - here i can move a little bit down
71:07 - just take this here the snap sizes
71:10 - something like this
71:12 - and there you go so if i hit the play
71:15 - button we will see the enemy who is
71:17 - behind us and he is being animated of
71:20 - course he is not doing anything to us
71:22 - because he's not detecting us he's not
71:24 - doing you know yada yada what not we're
71:27 - going to start to code that from the
71:29 - next video at his ai site so that he can
71:32 - see us and then run towards us and all
71:34 - of that stuff if something was not clear
71:36 - when it comes to this video make sure
71:37 - that you ask in the comment down below
71:39 - but basic things over here just creating
71:41 - the damage collision over here also
71:44 - adding or binding the function to the on
71:47 - component begin overlap and then
71:48 - creating animations it's not the first
71:50 - time if you followed any of my unreal
71:52 - engine tutorials i covered this a lot
71:54 - so yeah but of course if something's not
71:56 - clear ask i will answer i will see you
71:58 - in the next video
72:00 - what it up guys in the previous video we
72:02 - created the enemy this is enemy look at
72:04 - the enemy this is the enemy and we
72:05 - created his animation so now we can
72:07 - continue coding the enemy to add some ai
72:10 - functionality now so far in a lot of the
72:12 - videos that i did when it comes to the
72:14 - enemy
72:15 - ai
72:17 - i have used these colliders like a
72:20 - sphere color collider or a box collider
72:22 - or collision that is so that we can
72:24 - detect when the player gets or touches
72:27 - that collider then we know that the
72:29 - player is closed we can attack him and
72:30 - so on and so forth this time i'm going
72:31 - to use ui perception component which is
72:34 - going to allow the enemy to simulate
72:37 - senses such as sight and hearing and so
72:40 - on and so forth so let's go here inside
72:44 - of our enemy.h file and right here below
72:47 - this right here you function on it and
72:50 - yada yada we are going to add all the
72:52 - components that we need but before we do
72:54 - that we do need to go over here inside
72:58 - of our
72:59 - dot build file here it is monster
73:02 - shooter dot build file so this is the
73:03 - one that we want so it's under source
73:05 - over here and then monster shooter like
73:07 - that you need to find the dot build file
73:10 - for your project and over here inside of
73:12 - this public dependency module names
73:15 - click here enter to separate them on the
73:17 - second line and over here after the last
73:20 - one that you have so my is head mounted
73:22 - display you're going to add comma and
73:24 - then you are going to paste here this ai
73:27 - module so paste it like this if you
73:29 - don't do it it will not work no matter
73:32 - what other code we put in so you need to
73:34 - in quotes paste this ai module so now
73:38 - that we have that out of the way we can
73:40 - go back over here inside of the
73:43 - enemy.h file and i can start typing so
73:46 - first i want to add the u property and
73:48 - this one is going to be visible
73:51 - so it's visible
73:53 - defaults only and this one's going to be
73:56 - category
73:57 - enemy there you go and this one is going
74:00 - to be class u
74:03 - a i perception component which is a
74:07 - pointer and i'm going to call it ai per
74:09 - comp there you go
74:11 - so what the hell is this teacher what is
74:13 - this ui perception component well ui
74:15 - perception component is used as i said
74:17 - to implement senses for an actor for
74:19 - example
74:20 - site so that it can see or hear so that
74:24 - it can hear and that kind of stuff so
74:27 - this is used as an ai component
74:30 - so next we are going to create another
74:32 - ui property or u property now ui but u
74:35 - property we're going to have it visible
74:37 - defaults only category enemy this one is
74:39 - going to be class u a i sense config
74:45 - underscore site which is a pointer and
74:48 - i'm going to call it site config
74:51 - it's config there you go so what is this
74:54 - uai sense config site whatever well
74:59 - this conflict is used to configure the
75:01 - ai perception component for site
75:03 - detection so this particular one is used
75:06 - to configure the site detection for the
75:09 - uai perception component
75:11 - next we are going to create a u function
75:15 - so you function like that and this one
75:17 - is going to be void unsensed and it
75:20 - takes a constant t
75:22 - array of actors so a
75:25 - actor which is a pointer by the way and
75:28 - over here close the curly bracket and
75:32 - have here and sign update actors this or
75:35 - updated not update excuse me updated
75:38 - actors this is a function
75:41 - that will inform us if any actors are
75:44 - detected by the uai perception component
75:48 - or by ai perception component so this is
75:50 - the one and i'm going to go here quick
75:52 - actions and refactoring create the
75:54 - definition inside of our dot cpp file so
75:58 - that you know yada yada yada we don't
76:00 - have to go and type it out ourselves
76:04 - so next what do we need for our
76:07 - functionality well next we need you
76:09 - property and over here this one is going
76:12 - to be visible so visible anywhere and
76:16 - the category so category is going to be
76:19 - movement
76:20 - and for this one i'm going to call f or
76:23 - we're going to declare f rotator and
76:26 - enemy rotation is the name for the f
76:29 - rotator next i'm going to just copy this
76:32 - over here because we're going to do the
76:33 - exact same thing but this time we're
76:35 - going to have an f vector and this one
76:37 - is going to be our base location because
76:40 - the enemy is going to be able to go
76:44 - and try to attack the player
76:47 - but if he doesn't find the player then
76:50 - he is going to go back to the base
76:52 - location basically when he detects the
76:53 - player he will run towards him when the
76:55 - player runs away from his site then he
76:58 - is going to go back to his to his
77:01 - location this is essentially what we are
77:03 - doing
77:05 - so this is for the base location next we
77:08 - are going to have another u property so
77:10 - i'm just going to copy this and paste it
77:13 - over here so we're going to have another
77:14 - visible anywhere but this one we're also
77:17 - going to use it as a blueprint read only
77:20 - we will see why basically i can tell you
77:22 - right now for the animation and we will
77:24 - see how this is going to work f vector
77:26 - and this one is going to be the current
77:28 - velocity of the movement so the current
77:32 - velocity of the enemy
77:34 - another u property that is going to be
77:36 - visible anywhere category is going to be
77:39 - equal to movement this is going to be
77:40 - float movement speed
77:43 - self-explanatory for what we are going
77:44 - to use it another function that we are
77:47 - going to have is a void set new
77:49 - rotation which takes an f vector
77:53 - target position and an f vector current
77:58 - so current position has two parameters
78:01 - to determine the new rotation we're also
78:04 - going to have a boolean back to
78:06 - base location to determine if we should
78:09 - go back to the base location or not
78:11 - another f vector which is going to be
78:12 - our new location to determine what is
78:15 - the new location where we should move to
78:17 - and our float distance so distance
78:21 - squared there you go
78:24 - another over here you property so pro
78:28 - property there you go which is going to
78:30 - be edit anywhere not anywhere but
78:33 - anywhere and this is going to be
78:35 - blueprint so
78:37 - blueprint
78:39 - read
78:40 - only this one is going to be our health
78:42 - so float
78:44 - health which is going to be equal to
78:46 - 100.0
78:47 - f
78:48 - and last but not least we are also going
78:50 - to have another u property i'm going to
78:53 - copy this over here paste it over here
78:55 - this is edit anywhere this is going to
78:57 - be float damage
78:59 - value by default it's going to be equal
79:01 - to 5 f and last but not least we're
79:04 - going to have a public function and this
79:06 - one is going to be void deal damage so
79:08 - that we can deal damage to the player
79:10 - float damage amount as the parameter or
79:14 - basically not to deal damage to the
79:15 - player this is for us to be dealt with
79:18 - damage so the enemy will be dealt with
79:19 - the damage and over here we have the
79:21 - damage amount parameter don't worry
79:22 - about these right now because we will
79:24 - you know code them later on use them
79:26 - later on for the moment what did i tell
79:28 - you what did i click over here
79:30 - cancel cancel okay there you go so quick
79:33 - actions and refactoring create there you
79:36 - go
79:37 - and last but not least for the deal
79:39 - damage as well quick actions refactoring
79:41 - create you know signature whatnot and
79:44 - hopefully come on hurry it up and it
79:47 - will create the definition for us
79:51 - i don't know why is it taking so long so
79:54 - i will have to sing well i wanted to
79:56 - sing but you see what happened anyways
79:58 - you get the point so
80:00 - we are pretty much done with setting
80:02 - things up we do need to go now inside
80:05 - the dot cpp file here at the top right
80:08 - below all of these other includes we
80:11 - need to include perception ai perception
80:14 - component and perception ai site config
80:18 - or a i sense config excuse me so make
80:21 - sure that you
80:23 - include these two or otherwise it is not
80:25 - going to work so over here right below
80:28 - the damage collision is where we are
80:30 - going to call our ai per component or
80:33 - perception component that's going to be
80:34 - equal to create default sub object of
80:39 - u
80:40 - a i perception component and we're going
80:44 - to call it here so it pass a text to
80:46 - give it a name and the name is going to
80:48 - be ai perception
80:50 - component there you go
80:53 - next we are going to have our site
80:55 - config which is again going to be equal
80:57 - to create default sub object of type of
81:01 - u a i
81:03 - sense
81:04 - config
81:05 - so sense config underscore
81:08 - site there you go
81:10 - and over here pass a text parameter and
81:13 - inside of the text parameter we do need
81:16 - to pass the
81:17 - site
81:18 - config name so that we know what it is
81:22 - now we need to configure this site
81:25 - config so that the perception component
81:27 - knows
81:28 - what to do
81:30 - so our site config and from here we're
81:32 - going to say site radius so the radius
81:35 - where the enemy will be able to see the
81:38 - player it's going to be 1250
81:42 - f so floats and our site conflict from
81:45 - here lose sight radius so
81:49 - where the player needs to go or how far
81:51 - away he needs to go so that the ai
81:54 - perception will lose sight of him well
81:56 - that value is going to be equal to i'm
81:58 - just going to copy this and from here
82:00 - it's going to be equal to one thousand
82:03 - what what i thought pounds one thousand
82:05 - two hundred and eighty
82:07 - also we are going to add to the site so
82:11 - our site config and the
82:14 - peripheral or peripheral
82:17 - you get the point peripheral vision
82:19 - angle degrees that's going to be 90
82:21 - degrees so
82:22 - the peripheral i i don't know how to
82:24 - pronounce it
82:25 - peripheral vision you get the point it's
82:28 - 90 degrees
82:30 - and again site config
82:33 - are detection by affiliation of the tech
82:36 - it's the detection by affiliation and we
82:40 - are going to say dot b detect enemies is
82:43 - going to be equal to true
82:45 - our site conflict so sight config and
82:48 - from here detect by affiliation.be
82:53 - detect friendlies that is also going to
82:56 - be true and last but not least site
82:58 - config and from here detection by
83:02 - affiliation
83:03 - so same thing if it allows me now to
83:06 - complete so detection by affiliation dot
83:10 - detect neutrals
83:12 - is also going to be true
83:14 - this is a self-explanatory it is going
83:17 - to allow the side coughing to detect the
83:19 - enemies the friendlies and the neutrals
83:22 - but since we only have our player we are
83:25 - going to you know detect the player
83:28 - next over here i'm going to say site
83:30 - config and from here set max h to be
83:34 - equal to 0.1 f what the hell is the
83:36 - maximum age well age specifies the time
83:39 - by which the stimuli
83:41 - or what has been detected so the
83:44 - detected actor by this site conflict
83:48 - when he will be forgotten so how much
83:51 - time will take for him to be forgotten
83:54 - zero means never so zero means never and
83:56 - he will never be forgotten just like my
83:59 - you know
84:01 - your girlfriend my
84:02 - never mind uh
84:04 - moving forward so he will never be
84:06 - forgotten if it's zero zero point one
84:08 - after point one of a second he will be
84:10 - forgotten which means then the enemy
84:12 - will go back towards his base location
84:14 - and all of that stuff
84:16 - next we need to call the ai perception
84:18 - component and we need to configure
84:21 - census or configure the sense and we are
84:23 - going to pass over here the site config
84:26 - the one that we have just created over
84:29 - here next i am also going to call a i
84:33 - perception component so it's actually
84:36 - per comp there you go
84:38 - and we are going to set the dominant
84:41 - sense
84:42 - to be the site config and here we're
84:45 - going to get the sense implementation so
84:49 - this is going to be the dominant sense
84:50 - basically the only sense that we have
84:52 - configured which is the site sense and
84:54 - this is how you set if you have multiple
84:55 - of these maybe you have the hearing
84:57 - sense and so on and so forth this is how
84:59 - you can set set the dominant one so is
85:01 - it site
85:03 - here or whatever
85:05 - over here i am going to say ai
85:07 - perception component on perception
85:11 - it and for that i'm going to say add
85:14 - dynamic so
85:15 - dynamic and from here we're going to say
85:18 - this passing here and and we are going
85:21 - to attach this function on sensed and
85:25 - this is how we are binding our function
85:28 - to be informed from the ai perception
85:31 - component when something has been
85:33 - detected over here we are going to say
85:36 - current velocity by default is going to
85:38 - be equal to f vector column column zero
85:42 - vector this by default so when we start
85:44 - the velocity by default to zero
85:46 - movement speed
85:47 - so over here movement speed is going to
85:51 - be equal to
85:52 - 375.0 f
85:54 - and the distance squared is going to be
85:57 - equal to big number
86:00 - we're going to see for what we are going
86:01 - to use this and the big number expands
86:03 - to it's it's a big number so it's just a
86:06 - big number and it expands to you know
86:12 - as i said to a big number but we are
86:13 - going to use this to detect or to test
86:16 - for the distance between the enemy and
86:18 - the player we will see that don't worry
86:20 - that will come over here inside of our
86:22 - begin play we are going to say base
86:23 - location is going to be equal to this
86:26 - and get the actor so get actor location
86:30 - now i'm going to ctrl shift b just to
86:33 - make sure that we didn't do any oopsies
86:35 - and yadda yadda yadda and all of this
86:37 - stuff because we still cannot and we
86:41 - have something okay i type visibili
86:44 - anywhere which line of code is that so
86:48 - shoot enemy line 40 okay let's go over
86:51 - here
86:52 - let's go over here where did i type that
86:55 - out
86:56 - it's visible it's not like this visible
86:59 - over here visible anywhere there you go
87:03 - visible anywhere
87:04 - visible visible i don't know how to
87:07 - spell so you know don't judge me anyways
87:11 - ctrl shift b just to make sure that we
87:12 - didn't do any oopsies we are going to
87:15 - call it a stop for this video because
87:17 - there is a few more things that we need
87:19 - to code before we can actually test this
87:22 - out and i don't want to make the videos
87:24 - overwhelming overwhelming some videos
87:27 - need to be large but those that don't
87:29 - have to we have everything prepared next
87:31 - inside of our tick functionality we are
87:33 - going to
87:35 - we are going to create the functionality
87:37 - to move back to our base inside of our
87:40 - sensed we are also going to detect if we
87:43 - collide with something and so on and so
87:45 - forth and set the new rotational of that
87:47 - stuff if something was not clear what we
87:48 - did so far when it comes to the
87:50 - ai
87:53 - perception component and the site config
87:55 - just make sure that you ask in the
87:56 - comment down below and i will see you
87:58 - guys in the next video moving forward
88:00 - with our enemy ai system we are going to
88:02 - code this function called set new
88:04 - rotation because all other ones the
88:06 - onsens and here what we are going to put
88:08 - in the tick depend on it so over here i
88:11 - am going to create a new f vector and
88:14 - i'm going to call this one new direction
88:16 - and i am going to calculate that by
88:18 - taking the target position and
88:20 - subtracting from it the current position
88:22 - which are these two parameters that we
88:24 - have so simply subtracting this from
88:26 - this so this is going to give us the new
88:28 - direction where we need to face and i am
88:31 - also going to take the new direction and
88:33 - set the z axis of it to be 0.0 f because
88:38 - again
88:39 - we care about the x and the y and next
88:42 - i'm going to take the enemy rotation and
88:46 - set that to be equal to new direction
88:48 - rotation so now we have the rotation
88:51 - from the new direction that we have
88:52 - calculated by passing the target
88:54 - position in the current position
88:56 - so now we can safely call set actor
88:59 - rotation passing the enemy rotation and
89:04 - this is going to rotate our this is
89:06 - going to rotate our actor so over here
89:09 - inside of our onsen
89:12 - what is going to happen well we're going
89:14 - to loop through this updated actors
89:16 - array and we are going to see if we have
89:19 - any info or if something has been
89:21 - detected so we're going to say for int i
89:23 - which is equal to zero as long as i is
89:27 - less than the updated actors
89:30 - that count or actually excuse me num i'm
89:32 - you so used to unity count and length
89:35 - and so on and so forth so yeah you get
89:37 - the point so over here four in i which
89:40 - is equal to zero as long as i is less
89:42 - than the updated actors number which is
89:45 - well this bad boy over here and this
89:47 - array will contain
89:49 - information about every actor that's
89:51 - that's been sensed by the ai perception
89:55 - component that would be it now over here
89:57 - we are going to create f actor
90:00 - perception blueprint info and i'm simply
90:03 - going to call it info now this parameter
90:07 - this parameter is going to get
90:09 - information about the sensed actor so
90:12 - whoever we have sensed inside of our ai
90:15 - perception component this actor or
90:17 - excuse me this this parameter is going
90:19 - to get that information so from here
90:22 - what i'm going to do i'm going to say ai
90:24 - perception component so ai per comp and
90:27 - from here i'm going to say get actors
90:29 - perception there we go and we need to
90:32 - pass here updated actors and the element
90:36 - that's at the eye index and passing here
90:39 - the info there you go
90:41 - so this retrieves whatever has been
90:44 - sensed by the given
90:47 - whatever has been sensed about the given
90:49 - actor so over here we are looping
90:52 - through the updated actors and every
90:53 - actor that we have sensed
90:56 - this will return information inside of
90:58 - this info so it will return the
91:00 - information about that actor desk that
91:03 - has been sensed in our case we're using
91:06 - the site so if we have seen i almost
91:09 - almost want to say saw
91:11 - scene so i don't know if we saw yeah so
91:14 - it's more natural so if we saw that
91:16 - actor we will have information about him
91:18 - inside of this info
91:20 - info parameter so over here we can say
91:22 - if info dot last sensed stimuli and this
91:26 - is the last sensed actor and the element
91:29 - that's at index zero so the one that we
91:32 - have sensed was successfully sensed so
91:36 - if that is the case then we're going to
91:39 - do one thing else if he was not
91:41 - successfully sensed we're going to do
91:44 - another thing so again going over here
91:46 - if he was successfully sensed we are
91:49 - going to say f vector and i'm going to
91:51 - call it the ir not doer the direction
91:54 - and that's going to be equal to updated
91:56 - actors
91:57 - and the element that's at i index and
92:00 - from here we're going to say get actor
92:02 - location and we're going to subtract
92:04 - from it get actor location which is our
92:08 - own location and of course the ir it's
92:10 - not vector why back here every single
92:12 - time we're going to say dot z is going
92:14 - to be equal to 0.0 f
92:17 - and
92:18 - what are we doing here so if we
92:20 - successfully sensed
92:22 - the last simile so basically the last
92:25 - actor inside of this information
92:29 - basically the actor that we are trying
92:31 - to get from here so if we have
92:33 - successfully sensed him in our case if
92:35 - we seen him then we are going to get his
92:38 - location and we are going to subtract
92:41 - from it the current location of the
92:43 - enemy which is going to give us the
92:44 - direction so next we are going to take
92:48 - the current velocity and we are going to
92:51 - set that to be equal to direction get
92:55 - safe normal
92:56 - and we're going to multiply that with
92:58 - the movement speed
93:01 - what this get safe normal is going to do
93:04 - it's going checking if it's
93:07 - it's basically going to get the length
93:09 - of this vector but at the same time
93:11 - checking if it's safe to do so based on
93:14 - the length of that vector so essentially
93:17 - getting this direction and multiplying
93:19 - that with the movement speed so the
93:21 - direction is where should we face
93:23 - basically so way where should we face
93:27 - and let me just get my drawing tool
93:28 - there you go i have it now
93:31 - so if the enemy is here and it senses us
93:34 - over here this direction over here is
93:37 - going to have a vector that's pointing
93:39 - towards us like that so when we say the
93:42 - current velocity is equal to the
93:43 - direction multiplied with the movement
93:45 - speed it's going to make sure that that
93:47 - velocity is facing that direction and
93:50 - it's going to propel it towards it by
93:53 - multiplying it with the movement speed
93:55 - and now over here we can call set new
93:58 - rotation and we can pass over here
94:00 - updated updated actors and the element
94:04 - that's at i index and we can get the
94:07 - actor location not actor label actor
94:10 - location and we can pass our own get
94:14 - actor location again not label but
94:16 - location
94:19 - and there you go so this is going to set
94:22 - the new this is going to set the new
94:24 - rotation based on the and again over
94:27 - here you will see that it is going to
94:28 - rotate the actor by getting the target
94:31 - position which in this case is the
94:33 - sensed actor so the one that we saw with
94:35 - the ai perception and getting our own
94:38 - current position over here subtracting
94:40 - these two it's going to get the new
94:41 - direction and then from there it is
94:43 - going to rotate our enemy so this is
94:46 - what it is doing else over here if we
94:49 - don't have any info about the
94:52 - that we successfully sensed an actor so
94:55 - what we are going to do over here is we
94:57 - are going to say f vector that i'm going
94:59 - to call direction is equal to base
95:02 - location subtracting from it the get
95:04 - actor location so get actor location
95:09 - there you go so if we didn't sense
95:12 - an actor meaning we didn't see the
95:14 - player we're going to go back to the
95:16 - base location and in order for us to do
95:18 - that again we need to say the z to be
95:20 - equal to zero and we're getting the base
95:23 - or the direction subtracting from the
95:25 - base location the current direction or
95:27 - the current location excuse me from the
95:29 - enemy and over here i'm going to test if
95:32 - the direction dot
95:34 - size squared 2d if that value and open
95:38 - close parenthesis if it's greater than
95:40 - 1.0 f
95:42 - so essentially what i'm doing here this
95:44 - will get the squared length of this
95:46 - vector basically
95:48 - that is the meaning so it will get the
95:50 - length
95:52 - gets the squared distance between two
95:53 - points so that is what what does that
95:56 - mean so it is going to get this squared
95:59 - length
96:00 - and if that value is greater than
96:03 - 1.0 then i'm going to say current
96:06 - velocity is going to be equal to dri so
96:10 - direction get safe normal so again i'm
96:12 - going to get the safe normal multiplied
96:14 - with the move speed
96:16 - and then i'm going to say back to base
96:19 - location to be equal to true and from
96:21 - here set new rotation passing here the
96:24 - base location passing get the actor
96:27 - location like that
96:30 - and this over here needs to have equal
96:33 - so set equals to true that means that we
96:36 - are now going to go back to the base
96:38 - location
96:40 - because we didn't sense any new actor
96:42 - and the base location we get its
96:45 - location over here so the base location
96:47 - is the initial position where dynami is
96:50 - and over here inside of our tick
96:52 - functionality basically the update
96:54 - function we are going to check if our
96:57 - current velocity is not zero so is zero
97:01 - like that notice the exclamation mark
97:03 - that we have so we are testing if it's
97:05 - not equal to zero if that is the case we
97:09 - are moving and over here we're going to
97:11 - say new location is equal to get actor
97:15 - location so location
97:18 - and from that we are going to add to it
97:21 - the current velocity
97:23 - multiplied with delta time so this is
97:26 - going to be the new location our own
97:29 - location of the enemy plus the current
97:31 - velocity by which we are going to move
97:33 - multiplied with the delta time
97:35 - if we should go to base location so if
97:39 - back to
97:40 - back to base location meaning we should
97:44 - go back to the base location if that is
97:47 - the case we are going to first test if
97:49 - inside of parentheses if the new
97:52 - location
97:54 - minus the base location
97:56 - that size squared so again we're getting
98:00 - the size squared if that is less than
98:02 - the distance squared
98:06 - if that is the case we're going to say
98:08 - distance
98:09 - squared is going to be equal to
98:12 - new location subtracting from at the
98:14 - base location
98:16 - that
98:18 - size
98:19 - squared there you go so this is going to
98:22 - set the distance squared to this and its
98:25 - size squared with open close parenthesis
98:27 - there you go
98:28 - actually do i need to
98:30 - yeah only only one there you go
98:33 - else if it's not
98:35 - else if it's not and let me just go here
98:39 - there you go if it's not then we're
98:40 - going to say current velocity is going
98:43 - to be equal to f vector column column
98:47 - zero vector
98:48 - and then we're going to say distance
98:51 - squared is equal to a big number again
98:54 - setting it to the big number and back
98:57 - to base location is going to be equal to
99:00 - false
99:01 - and over here we're also going to set
99:03 - the new
99:04 - rotation to the get
99:06 - actor forward vector
99:10 - and over here we're going to say
99:12 - get actor location
99:15 - so this is going to set the new rotation
99:18 - outside of all of this so within this if
99:21 - statement over here we're simply going
99:23 - to say
99:24 - set actor location and passing here the
99:29 - new
99:30 - location and there you go so this is
99:33 - going to move us back to the base
99:36 - location
99:37 - and basically this right here is going
99:39 - to move us to the current location that
99:41 - we are calculating and we are
99:43 - calculating that well with this over
99:46 - here so if the new rotation as you can
99:48 - see all of this here
99:50 - as long as we're following the player
99:53 - the current velocity is going to be this
99:54 - value and as long as we need to go back
99:57 - to the current location the current
99:59 - velocity is going to be this value so
100:01 - over here essentially what we are
100:02 - testing if our new location
100:05 - minus from the base location if we are
100:07 - going back of course so if we should go
100:09 - back to base location
100:11 - subtracting from the new location and
100:13 - testing the size squared is less than
100:15 - the distance squared then we're going to
100:18 - set the distance squared to this value
100:20 - otherwise we are waiting until
100:23 - else over here so until this value is
100:26 - less than this value then we are or
100:29 - actually until it's greater than this
100:31 - value that means we have reached the
100:34 - we have reached our new location which
100:36 - in this case is the base location
100:38 - because this all happens inside of the
100:41 - this all happens over here in the if
100:44 - statement if we are going back to the
100:45 - base location
100:47 - because we need to make sure that we
100:49 - reached the base location so that
100:52 - eventually our current velocity will get
100:55 - to zero because if it doesn't get to
100:57 - zero we will run forever only if we are
101:00 - chasing the player we are going to run
101:01 - forever towards the player trying to get
101:04 - him and stuff like that but if this is
101:06 - our base location we chase the player up
101:08 - to here we need to go back here and this
101:10 - is where we need to stop and this is how
101:12 - we are going to calculate so if the new
101:15 - location minus the base location size
101:17 - squared is less than the distance
101:19 - squared then we are going to set the
101:22 - distance squared to the
101:25 - new location minus base location psi
101:27 - squared
101:28 - up until the value where this right here
101:32 - is going to be greater than the distance
101:34 - squared meaning not lower but it's going
101:36 - to be greater
101:37 - and then we are going to set the current
101:40 - velocity to zero
101:42 - again set the distance square to big
101:44 - number that's why we need it to be a big
101:45 - numbers because when we start to go back
101:48 - then every single time this is going to
101:51 - for the first initial check this is
101:53 - going to be less than the distance
101:55 - squared and back to base location is
101:56 - false and over here we're going to
101:58 - rotate so ctrl shift b just to make sure
102:00 - that we didn't do any oopsies and
102:03 - everything you know compiles and
102:06 - it is how it needs to be so build has
102:09 - succeeded as you can see
102:11 - now we can go and we can test it out so
102:13 - if i open my unity editor we will be
102:17 - able to if i hit the play button
102:19 - where is the enemy here he is if i get
102:22 - close to him and he sees me there we go
102:24 - so he now he saw me and he's rotating to
102:27 - where i am if i go away and run away
102:30 - from his sight and he cannot see me
102:32 - anymore then he is not going to follow
102:34 - me but you know since
102:36 - there you go and we finally run away
102:39 - from him and there you go he goes back
102:41 - to his base location again if we come
102:42 - over here his perception is 90 degrees
102:45 - so he can see us and you saw what
102:47 - happened so this is his base location if
102:49 - i run away look at that so now he's
102:51 - going back to his base location so
102:53 - essentially this is how it works just
102:55 - imagine that he has some invisible
102:58 - web over here and he can see everything
103:01 - in this line and basically how i know
103:04 - that is over here we have determined
103:05 - that so his sight radius up to which
103:08 - where he can see is 1250
103:12 - the lose sight radius
103:14 - that is the radius where we need to run
103:15 - away so that the ai perception component
103:18 - doesn't see us is 1012 280.
103:22 - and the peripheral vision is 90 degrees
103:25 - which means and you saw that that the
103:27 - enemy can even see us if we get over
103:30 - here so if we get to him like this he
103:32 - can still see us because he can see 90
103:36 - degrees that means you know you can see
103:38 - here and here as well so that is what we
103:42 - have set up and over here
103:45 - while we attach that science conflict we
103:47 - explain all of that essentially what's
103:49 - happening or where we are detecting all
103:51 - that it's right here so if we sensed the
103:54 - player which just happened then we're
103:56 - going to get the direction based on his
103:59 - location and our current location and
104:01 - then we're going to set the current
104:02 - velocity to that value
104:04 - you get the point if something is not
104:06 - clear when it comes to this video make
104:07 - sure that you ask in the comment down
104:09 - below and also by the way i've explained
104:12 - this here when we are going back to the
104:14 - base location when we you know lose
104:16 - sight
104:17 - so yeah that happens over here as well
104:19 - so when we don't or we cannot sense
104:21 - anything we set here back to base
104:23 - location to over here and then we start
104:27 - running back which i already explained
104:29 - but if something is not clear make sure
104:30 - to ask in the comment down below and i
104:32 - will help you out and i will see you
104:33 - guys in the next video
104:35 - what is crackings people so now we have
104:37 - the enemy who has the sight perception
104:40 - or basically he can see
104:42 - he is a bat that can see we are doomed
104:44 - just kidding but now we are going to
104:45 - animate him because if you remember when
104:48 - we got close to him so let me just get
104:50 - here look at that he's like a you know
104:53 - silver surfer he's sliding on the ground
104:55 - which is not something that we want so
104:56 - we are going to go here inside of the
104:58 - meshes and actually not in the enemy
105:00 - animations and enemy animation here it
105:03 - is if you remember we have over here the
105:05 - speed value that is set over here on the
105:09 - blend space for the vampire idol running
105:11 - now where can we set that well we need
105:13 - to set that over here inside of our
105:15 - event graph and that's going to happen
105:17 - over here at the top i am going to get
105:20 - the initialize
105:22 - so this is the one that i want blueprint
105:24 - or event blueprint initialize animation
105:28 - first what i'm going to do is i'm going
105:29 - to get this try get pawn owner and from
105:33 - here i'm going to cast to bp enemy
105:37 - and there you go and who am i casting
105:38 - well i'm going to cast over here the try
105:41 - to get pawn owner if i hover over this
105:44 - function does
105:45 - what the name says it is going to try
105:48 - and get the owner of this
105:51 - of this pawn basically getting the owner
105:53 - of this animation
105:55 - there we go and
105:57 - who is owning this animation well the bp
105:59 - enemy we're casting him to the bp enemy
106:00 - so from here what i can do is i can
106:02 - promote this into a variable and over
106:06 - here as bp enemy simply i'm going to say
106:08 - bp enemy so again i need to go here
106:11 - remove this as bp enemy so remove that
106:14 - part and over here bp enemy ref so ref
106:19 - is short for reference so next what we
106:22 - are going to do well from here we are
106:24 - going to get rbp enemy
106:27 - and this is going to happen here in the
106:28 - update animation so what i'm going to do
106:30 - here is i am going to get the current
106:33 - velocity look at that and it's right
106:36 - here under movement look at this over
106:39 - here so under movement
106:41 - we have something called get current
106:43 - velocity what is this if you remember
106:46 - i'm quickly going to go back over here
106:47 - inside of the enemy.h the current
106:49 - velocity look at this we set or created
106:52 - a property called current velocity we
106:54 - set it to be blueprint read only so we
106:56 - can read it into the blueprint we just
106:58 - see and we set the category to be
107:00 - movement this is what it means when you
107:02 - set the category over here in the code
107:04 - so when you're searching it inside of
107:06 - the blueprint so from here current
107:09 - velocity look at that it's under
107:12 - movement which we set inside of the code
107:16 - so now we can from the current velocity
107:18 - we can get the vector
107:20 - so vector length
107:23 - here it is and now that we have the
107:25 - vector length we can set the speed so
107:27 - from here i can set the speed this goes
107:30 - over here voila there you go
107:32 - and this should be plugged in over here
107:34 - so i need to compile and save that and
107:37 - now when the enemy starts moving because
107:40 - in the code we already know that the
107:42 - current velocity which is over here we
107:44 - are changing that value as you can see
107:48 - so if we have the player in sight we're
107:50 - setting the current velocity to the
107:52 - direction get saved normal multiplied
107:54 - with the movement speed that we already
107:55 - explained over here if we don't have the
107:57 - player we are setting the current
107:59 - velocity
108:00 - to the safe normal of the direction that
108:02 - we have over here multiplied with the
108:04 - movement speed which means now if i go
108:07 - over here again compile and say make
108:09 - sure that it is compiled and saved
108:12 - so if i hit the play button right now
108:15 - and the enemy sees me and he starts
108:17 - running look at that he is being
108:19 - animated and he is running towards me if
108:22 - he goes back you're going to notice
108:23 - right now if he loses the sight of me he
108:26 - goes back
108:28 - and look at the funny
108:30 - the funny walk
108:31 - anyways you get the point and you saw
108:34 - how now the enemy is being animated if
108:38 - you have any questions in regards to
108:40 - this and how we can access
108:42 - our variables inside of the blueprint
108:45 - and what does the category mean i mean
108:47 - again if
108:49 - how to use it and stuff like that just
108:51 - ask but we saw a really cool example so
108:53 - blueprint read only will make the you
108:55 - know velocity current velocity or any
108:57 - other variable accessible inside the
108:59 - blueprint category is where we can find
109:01 - it inside of the blueprint
109:02 - and that would be pretty much it i will
109:04 - see you guys in the next video moving
109:06 - forward now that we have animated enemy
109:08 - the enemy can move let us make the enemy
109:10 - attack the player and vice versa the
109:12 - player will be able to attack the enemy
109:13 - so over here inside of our monster
109:15 - shooter character dot h right here below
109:18 - our spawn location we're going to create
109:20 - a new property and this is going to be
109:23 - edit
109:24 - anywhere and it's going to be blue
109:27 - print
109:28 - read only because we will be or we will
109:31 - need to get a reference to this value in
109:33 - the blueprint but we'll see later why so
109:35 - over here we have a float health that is
109:37 - going to be equal to 100.0 f and last
109:41 - but not least we have a public function
109:43 - that is going to allow us to you know
109:45 - receive damage so void deal damage and
109:50 - it is going to be float damage amount
109:54 - same as what we did with our enemy so
109:56 - i'm going to right click on this one and
109:58 - i'm going to create the definition
110:01 - inside of the dot cpp file but
110:07 - waiting for the you see so i'm singing
110:12 - i wanted to charge you five bucks for
110:13 - that okay
110:15 - so
110:16 - here we are inside of our deal damage
110:19 - and what's gonna happen over here is
110:21 - that we are simply going to subtract
110:23 - from the health the damage amount that
110:26 - we have over here so this one over here
110:28 - so we're simply going to say health
110:30 - minus equals the damage amount and the
110:32 - health is the value that we you know
110:34 - just added over here there you go this
110:36 - one over here so we are subtracting from
110:39 - it the damage amount and i'm also going
110:40 - to test over here if our health
110:43 - so if our
110:46 - health is less than or equal to 0.0 f
110:50 - that means that the player is basically
110:53 - dead
110:54 - so what we are going to do is we are
110:57 - going to
110:59 - restart the game when the player dies so
111:01 - over here restart game but we can just
111:03 - for the sake of example call here
111:05 - destroy so destroy after that of course
111:08 - so after we restart
111:10 - first things first we will simply
111:14 - restart the game when the player dies
111:15 - but just for the sake of example and
111:17 - testing later on to see if the enemy is
111:19 - actually dealing damage to the player we
111:22 - can call destroy over here now same
111:24 - thing for the enemy we need to go and do
111:27 - the same thing same thing for enemy we
111:29 - need to go do the same thing so over
111:30 - here at the bottom we have already
111:32 - defined the deal damage functionality so
111:35 - we are going to say health
111:38 - minus equals the damage amount so damage
111:41 - amount that we pass over here and if you
111:43 - don't remember we already created here
111:45 - the health and we created here the
111:48 - damage amount so we're subtracting from
111:51 - it and if the health gets to the value
111:53 - so if our health gets to the value that
111:56 - is less than or equal to our well zero
111:59 - value then we are going to call destroy
112:02 - so it's actually destroyed and there you
112:05 - go this is going to destroy the enemy
112:09 - now where is this going to happen well
112:11 - first things first when it comes to the
112:13 - enemy over here inside of our on hit as
112:17 - you can see there you go this is where
112:19 - we are going to detect if we are
112:20 - colliding with the player and if you
112:22 - don't remember over here in the damage
112:24 - collision we have already attached that
112:26 - functionality so essentially what we are
112:29 - going to do over here is we are going to
112:30 - try and cast the other actor so we are
112:33 - going to say a monster shooter character
112:36 - who is a pointer and we are going to
112:38 - call him char and we are going to try
112:40 - and cast
112:42 - into the a
112:43 - monster shooter character and we are
112:46 - casting the other actor so this is the
112:48 - one who we are trying to cast which is
112:51 - the other actor that we have collided
112:53 - with if that succeeds so if char
112:57 - that means the cast has succeeded we
112:59 - casted the other actor into the monster
113:02 - shooter character that means we collided
113:04 - with the player then from there we can
113:07 - call the deal damage to apply damage to
113:11 - the player passing here the damage value
113:14 - which currently has a value of five so
113:16 - it will take a lot of hits if the player
113:19 - assuming that the player has 100 health
113:21 - it will take a lot of hits
113:24 - to
113:24 - you know deal any damage to or actually
113:27 - to to kill the player but you know it is
113:29 - what it is you can change that value
113:32 - because we set it over here i believe we
113:33 - set it to a b edit anywhere so that
113:35 - means we can go inside of the blueprint
113:37 - and just you know edit this value for
113:39 - testing purposes which is really cool
113:41 - and when it comes here for the
113:42 - projectile
113:44 - over here as you can see i've already
113:46 - included the enemy.h but i have
113:49 - commented out because at that point of
113:51 - time where we you know typed out this
113:53 - include the enemy script was not created
113:56 - so now we already have over here the on
113:59 - hit which we have bound over here inside
114:02 - of the collision sphere of the
114:04 - projectile and we're going to do the
114:06 - same thing so we're going to try and
114:07 - cast into the a enemy who is a pointer
114:10 - and i'm going to call him enemy and i'm
114:12 - going to say over here cast into the a
114:15 - enemy
114:16 - enemy and i'm casting the other actor
114:20 - and if that succeeds same as with the
114:22 - players so if that succeeds if we do
114:24 - have the enemy meaning that the
114:26 - projectile has collided with the enemy
114:28 - then we're going to say enemy and from
114:31 - here we're going to say deal damage
114:33 - passing the damage value that we already
114:37 - set for the projectile
114:39 - well let me see where it is so where did
114:41 - i set the damage value
114:45 - here it is damage value so i set it here
114:48 - and to be equal to 20. and of course
114:50 - after we destroy the enemy actually
114:53 - after we deal damage to the enemy we're
114:55 - going to call destroy so
114:57 - if it allows me if i can type correctly
115:00 - you know so we are going to call destroy
115:03 - to destroy the projectile so because the
115:05 - projectile when it touches the enemy it
115:07 - deals one time damage and then it is
115:09 - destroyed and removed from the game so
115:11 - control shift b to make sure that this
115:14 - you know compiles and it is you know
115:17 - error free
115:19 - and there you go build has succeeded so
115:22 - we can go back inside of the editor
115:25 - and from here let me just take the enemy
115:29 - and let's see over here do we have here
115:31 - it is the damage value just for the
115:32 - testing purposes i'm going to set the
115:34 - damage roller to 100 so that it deals
115:36 - damage automatically and kills me so as
115:38 - soon as the enemy touches me we are
115:41 - hopefully going to die there you go and
115:45 - bam you see we're dead
115:46 - we are dead
115:48 - if i go here see the enemy doesn't exist
115:51 - actually not that i mean the enemy has
115:53 - fallen down and we don't care about that
115:55 - because we're going to restart the game
115:56 - when we die but the important thing is
115:57 - that our player is dead because you know
116:00 - the enemy's damage value was 100 so
116:03 - we're going to set it back to 5
116:05 - because it's not you know we cannot play
116:07 - so let's try to kill the enemy there we
116:09 - go and let me just lower my volume so
116:13 - going back over here lowering the volume
116:15 - even more to 10 because i don't care
116:18 - about the volume there you go one two
116:19 - three hopefully i think there you go
116:22 - there you go i i want to say hopefully
116:24 - it will i will kill him soon i didn't
116:26 - count how many shots but since we have
116:29 - the damage value of 20 we need to shot
116:32 - him or shoot him five times in order to
116:34 - kill him and there you go you saw that
116:36 - and i can repeat it
116:37 - just for the you know testing purpose
116:39 - one two three four and fifth bam and
116:42 - there you go the enemy is dead basic
116:45 - math just subtracting from the health
116:48 - inside of the deal damage so for enemy
116:50 - and for the player just subtracting from
116:52 - the hell the damage amount that we pass
116:54 - here when that value gets to zero or
116:56 - lower zero destroy it and that will be
116:58 - pretty much it and over here for the
117:00 - player we're going to restart the game
117:01 - we're not going to kill the player but
117:03 - we will restart the game and we will see
117:06 - how that works and how we're going to
117:08 - you know implement that but at the
117:09 - moment we don't need it starting from
117:11 - the next video we're going to create the
117:13 - ui and display visually
117:16 - the health value of the enemy and the
117:18 - player and from there we're going to
117:19 - proceed and wrap up our game if
117:21 - something's not clear ask down below i
117:23 - will ignore and just kidding i will
117:24 - answer and i will help you out and i
117:26 - will see you guys in the next video whoa
117:28 - whoa whoa what it is now moving forward
117:31 - what we are going to do inside of the
117:33 - blueprints this is where i'm going to
117:34 - add
117:35 - the ui i'm not going to create separate
117:37 - folders because you know we're only
117:38 - going to have one ui widget so i'm going
117:40 - to right click in user interface and
117:42 - we're going to create a widget blueprint
117:43 - now i'm going to call it bp underscore
117:45 - ui and this is going to hold so i'm
117:47 - going to double click it and this ui is
117:49 - going to hold the player health and it
117:52 - is also going to hold the timer so first
117:54 - things first i'm going to take the text
117:56 - and put it over here which is going to
117:57 - be the timer the anchor is going to be
117:59 - at the bottom middle so the x position
118:02 - is going to be minus 2
118:04 - 48 32 on the y position i think yeah
118:09 - that is pretty much it size x 5 2 2 size
118:13 - y 1 4 2 there we go
118:16 - over here i'm simply going to write
118:18 - not text block but time call on and zero
118:22 - this is it for now now i can of course
118:25 - go over here for the font rubato and
118:27 - size is going to be 55 there you go is
118:30 - it 55 or 85 yeah 85 because 55 is very
118:33 - small and probably we are also going to
118:36 - align it in the center and that would be
118:39 - it when it comes to the time
118:41 - so next what i'm going to do is take
118:43 - another text and position it here at the
118:45 - bottom and this text i am going to set
118:49 - the anchor at the bottom left corner
118:53 - and for this text i'm going to set the
118:56 - position x to 28 position y to negative
119:00 - 181
119:02 - the size x is going to be 4 3 7 and the
119:05 - size y is going to be 73
119:08 - over here we are going to instead of
119:10 - text block we are going to say player
119:13 - health there you go
119:15 - the
119:17 - font size is going to be 54 and i
119:19 - believe that would be it
119:22 - so next step is to take the progress bar
119:24 - and the progress bar is also going to
119:26 - have the anchor at the bottom left
119:28 - corner the position x for the progress
119:31 - bar is going to be 28 the position y is
119:34 - going to be minus 89
119:37 - i'm going to set the size of the
119:38 - progress bar on the x to 477
119:42 - and 60 on the y and that would be it and
119:45 - over here you can fill it out but for
119:47 - the color i am going to choose let's go
119:51 - over here
119:52 - something like this red color and i'm
119:54 - going to click ok
119:56 - and there you go that would be pretty
119:58 - much it so safe
120:00 - so now how can we display players health
120:03 - if you remember inside of our player
120:05 - health let me just go over here i set
120:07 - the health value to be blueprint read
120:10 - only which means that we can read it
120:12 - from the blueprint but in order for us
120:14 - to do that we need to get a reference to
120:16 - it so let's quickly go inside of our
120:20 - widget back and over here on the graph
120:23 - i'm going to set this event construct so
120:26 - i'm going to leave that this i'm going
120:28 - to remove tick i'm going to remove so
120:30 - what i'm going to do here for the event
120:32 - construct i am going to right click over
120:35 - here and i'm going to get the player
120:37 - character so this is the one that i want
120:40 - and from here i'm going to cast to
120:43 - bp monster shooter character
120:46 - to the blueprint that our character is
120:48 - using and i'm going to cast the player
120:50 - character this bad boy over here so when
120:54 - the cast succeeds from here i'm going to
120:57 - promote that to a variable which is
120:59 - going to give me a reference to the
121:01 - player character so i'm simply going to
121:02 - call this one monster shooter character
121:06 - ref
121:07 - ref is short for reference this is my
121:10 - own you know naming convention or
121:12 - however you know you can call it or what
121:14 - not anyways this is how we are going to
121:17 - get the reference of the player so now
121:19 - that we have the reference of the player
121:21 - i can click on the progress bar and over
121:24 - here we already know that for the
121:25 - percentage we can click on this bind
121:28 - so i can bind and i can create a new
121:30 - binding or from here i can also just try
121:34 - to find the health but i'm going to do
121:36 - it like this go over here and i am going
121:39 - to call this one
121:41 - display so display player
121:45 - health there you go
121:48 - and
121:49 - for this one what we are going to do is
121:52 - getting the reference of the player
121:54 - character
121:55 - and the next from here i am going to
121:57 - drag a note and i'm going to get the
121:59 - health so here is our health and what i
122:02 - also need to do is divide the health by
122:05 - the float as you can see and that value
122:07 - is going to be 100 and then plug it in
122:10 - over here why am i dividing the health
122:13 - value by 100 well it's very simple
122:15 - because over here the percentage so the
122:18 - percent value
122:19 - of the slider goes from 0.0 as you can
122:23 - see
122:24 - up to
122:26 - 1.0 so if the health of the player is
122:29 - for example 90
122:31 - currently so it has 90 we dealt damage
122:34 - or you know we were damaged
122:38 - when we divide 90 by 100 that's 0.9 so
122:42 - that means over here if i set it to 0.9
122:46 - you see this is how the health will be
122:48 - displayed and we can test that out so
122:50 - i'm simply going to put it back to 1 and
122:52 - compile and save but
122:54 - first things first i'm going to remove
122:55 - this and remove this there is one more
122:58 - thing that we need to do i'm like steve
123:00 - jobs but there is one more thing we need
123:02 - to go inside of the bp
123:05 - so our game mode
123:07 - and inside of our event begin play
123:10 - we need to create that widget so from
123:14 - here i need to say create widget here it
123:17 - is
123:18 - and the widget that we want to create is
123:20 - the bp ui
123:22 - and after we create the widget from here
123:25 - we need to drag a node and we need to
123:27 - add to viewport
123:30 - so add the widget to the viewport if we
123:32 - don't do this then the widget that we
123:34 - have just created which is this one over
123:36 - here it will not be displayed in our
123:38 - game at all so now if i go back over
123:40 - here and hit the play button we will see
123:42 - there you go the widget is being you
123:44 - know displayed and when the enemy starts
123:46 - chasing me and when he comes close look
123:48 - at the health value so help look at that
123:51 - so there you go health value he dealt
123:53 - damage a little bit we can probably
123:56 - there you go he needs to get too close
123:58 - so what i'm going to do is go here into
124:00 - the enemy since the enemy needs to get
124:02 - too close i'm going to just move the
124:04 - damage collision just a little bit in
124:06 - front of the enemy so the enemy doesn't
124:07 - have to get that close to the player to
124:09 - deal damage of course
124:11 - this is your own preference if you want
124:13 - to you know move it a little bit further
124:15 - or you know put it close that is up to
124:18 - you if i hit the play button let's try
124:19 - it out again
124:21 - so now
124:22 - what the enemy gets look at that so now
124:24 - he's dealing damage and you can see i'm
124:26 - running away and he's dealing damage and
124:29 - all of that stuff and yada yada yata
124:34 - anyways you get the point if something
124:36 - is not clear when it comes to this and
124:38 - what we did inside of this blueprint
124:40 - well basically over here
124:42 - for our health make sure that you ask
124:44 - otherwise if you don't have any
124:46 - questions good for you you have learned
124:48 - how to create games now go go and create
124:50 - your own grand theft auto go my pupil i
124:53 - cannot wait to see it and i will see you
124:54 - guys in the next video moving forward
124:57 - now that we are displaying players help
124:59 - let us also display the countdown timer
125:04 - so essentially what's going to happen
125:05 - here is inside of our dot h for the
125:09 - monster shooter game mode right below
125:11 - the generated body we are going to have
125:13 - a few variables one is going to be
125:15 - public and functions as well so first
125:16 - one is going to be public this is going
125:18 - to be void
125:19 - restart so re
125:21 - restart game
125:23 - play which will take a boolean
125:26 - one to determine if we want or if we
125:28 - have lost we are also going to have a
125:30 - private function and this one is going
125:31 - to be void resets level like that
125:36 - next we are going to have another public
125:38 - and this one is going to be a variable
125:41 - so it's going to be u property
125:44 - and this u property is going to be
125:46 - blueprint read only so we will be able
125:49 - to read it inside of our blueprint and
125:52 - it's going to be our integer timer count
125:54 - by default i'm going to set that value
125:56 - to be 300 below we are also going to
125:59 - have private variables and this one is
126:01 - going to be f timer handle and i'm going
126:04 - to call this one countdown timer handle
126:08 - and that's going to be equal to f timer
126:10 - handle like that we're also going to
126:12 - have a void
126:13 - countdown timer function
126:16 - and last but not least we are going to
126:19 - have a public overriding the begin play
126:22 - so we're going to say void begin
126:25 - play over right there you go so these
126:29 - are the functionalities that we have one
126:31 - for restarting the game resetting the
126:33 - level and all of that stuff so what i'm
126:34 - going to do is go here quick actions and
126:37 - refactoring you know that stuff create
126:39 - you know definition and all of that
126:42 - while i'm doing this
126:43 - finally i'm going to take your five
126:45 - dollars
126:50 - i don't know what this is don't give me
126:52 - your five dollars okay
126:54 - just you know quit watching this video
126:56 - and then unsubscribe from the channel
126:58 - just kidding be subscribed and give me
127:00 - your five bucks man anyways
127:02 - here you go so we created everything and
127:05 - if we go over here i'm just going to
127:06 - move the begin play at the top because
127:09 - this is
127:10 - i simply love the begin play to be at
127:13 - the top
127:14 - i know it sounds weird but you know
127:16 - that's my favorite pose anyways
127:18 - so include kismet gameplay statics over
127:21 - here we have the begin play i'm quickly
127:23 - going to call the super begin play there
127:26 - you go
127:27 - and what's gonna happen over here is
127:29 - that we are going to get the world timer
127:32 - manager so get world timer get world
127:36 - timer manager and from him we are going
127:39 - to set the timer
127:41 - and this is going to be the countdown
127:42 - timer handle because we need to use the
127:45 - handle to know which timer we are
127:46 - setting inside of this
127:48 - and what is the function that we want to
127:51 - be called well we want this one over
127:53 - here
127:54 - the countdown timer so over here i'm
127:57 - going to say and sign passing the
127:58 - countdown timer
128:00 - i'm going to call it after one second
128:02 - and i am going to set it to repeat
128:05 - forever after every
128:07 - second
128:08 - so essentially what is this well this is
128:11 - going to call the world timer manager to
128:13 - set the timer basically this is like a
128:15 - co-routine inside of unity and this is
128:18 - how we know which
128:21 - timer handle we have started so when we
128:23 - want to cancel it we're going to call
128:24 - this timer handle over here to cancel it
128:27 - this is the function that i want to be
128:29 - called which is the countdown timer call
128:31 - it after one second
128:33 - and then call it true meaning forever so
128:37 - call it forever after
128:40 - every single second so first call it
128:42 - after one second then after every single
128:44 - second and that is going to last
128:47 - forever ever ever ever ever
128:50 - and what's gonna happen in the countdown
128:52 - timer well in the countdown timer we are
128:55 - and i think i forgot to
128:58 - restart gameplay i believe
129:00 - did i create the definition i did but
129:02 - where is it begin play reset level
129:06 - countdown timer
129:08 - where is the restart gameplay
129:11 - void for whatever reason create
129:13 - definition the variation cannot be
129:15 - complete following the selected text
129:16 - does not contain function signature what
129:20 - we will create it right now so i'm
129:22 - simply going to copy it and go over here
129:24 - we have the reset level
129:26 - and we are also going to have here avoid
129:30 - a
129:31 - monster shooter game mode column call on
129:34 - restart gameplay and over here i'm going
129:36 - to say bull one as the parameter for
129:39 - whatever reason i don't know why you saw
129:42 - it was not you know giving me that
129:45 - anyways what's gonna happen in the
129:47 - countdown timer is that we are going to
129:49 - say timer
129:51 - count subtract from that minus minus
129:54 - and if our timer count gets to the point
129:57 - where it is equal to zero then we are
130:01 - going to call the get
130:04 - world
130:05 - timer manager and from here we are going
130:08 - to clear the timer and now we are going
130:11 - to pass the countdown timer handle
130:13 - because he is the one who is responsible
130:15 - essentially he is the one who is
130:18 - responsible for
130:21 - for
130:23 - keeping up with the timer handle and
130:26 - canceling the timer handle when there is
130:29 - a need you know to cancel it basically
130:31 - so that's all there is to it
130:34 - so if you want to cancel the timer
130:36 - handle you need to have the timer handle
130:38 - that you started which is our countdown
130:40 - timer handle when we want to cancel it
130:42 - so it will not run anymore then simply
130:45 - call on the world timer manager clear
130:47 - timer and simply count down timer handle
130:52 - and there you go so
130:54 - the name of the handle and it's going to
130:55 - start or or stop counting next i'm going
130:59 - to call restart level
131:01 - so not the game but restart level this
131:04 - is the one that i want there you go or
131:07 - reset level excuse me i said restart but
131:09 - reset
131:10 - here the reset level is very simple we
131:13 - are going to have you game
131:15 - play statics and from here we're going
131:18 - to call open level passing the world
131:22 - and passing the name of the level which
131:23 - is gameplay we still didn't create that
131:27 - level so we will create it very soon and
131:32 - well when that happens we are going to
131:34 - reload that you know gameplay
131:37 - and it's simple as that now just so
131:40 - actually
131:41 - right now i'm going to do it right now
131:43 - i'm going to create it because i don't
131:44 - want to forget about it so
131:47 - over here i can create a new folder for
131:49 - maps and let's go quickly over here file
131:52 - and new level this is the one with the
131:55 - default here is where i'm going to you
131:56 - know add the player and enemy so i just
132:00 - need to call it gameplay and there you
132:03 - go so from here let me go into the
132:05 - blueprints this is the enemy i don't
132:08 - care this is very small we don't care
132:09 - about that here we have the monster
132:12 - shooter character
132:13 - the or actually we don't need the
132:15 - monster shooter character here we just
132:17 - need the player start which is going to
132:19 - be over here of course after this we are
132:22 - going to start creating our level don't
132:23 - worry about that let me just hit the
132:24 - play button and there you go this runs
132:27 - this is just for testing purposes so
132:28 - that you know the code that we have here
132:30 - calling the gameplay if it doesn't exist
132:32 - we will have problems and all that stuff
132:35 - here when it comes to restarting the
132:37 - game we are going to test if we won
132:39 - so did we win the game if we
132:43 - well win the game we are simply going to
132:44 - call here reset level there you go else
132:48 - if we didn't
132:50 - win the game then we're going to call
132:53 - our f timer handle that i'm going to
132:56 - call timer handle like that or restart
132:58 - timer handle
133:00 - get world timer manager from here we're
133:04 - going to set the timer timer handle and
133:07 - we're going to call it inside of this
133:09 - and this is the function that we are
133:10 - going to call reset level so this one
133:13 - over here so i'm going to copy it add
133:16 - the and sign this is the name of the
133:19 - function and i'm going to call it after
133:21 - three seconds
133:22 - so basically if we want we're going to
133:24 - restart the level immediately
133:26 - if we didn't win we lost so if one is
133:30 - false and we're going to denote that
133:32 - over here so if one is false then we are
133:35 - going to reset the level after three
133:38 - seconds and that is going to be pretty
133:41 - much it now while i am at it over here
133:44 - inside the monster character cpp let me
133:46 - just see if everything is yes everything
133:48 - is imported here at the top so over here
133:50 - when we die look at that so restart game
133:53 - when we die i'm simply going to get a
133:55 - reference to the game mode and do i have
133:57 - over here my game mode monster shutter
133:59 - game mode yes i have so i have my game
134:01 - mode because inside of the game mode
134:03 - is this function to restart you know the
134:07 - the game simple as that so over here i'm
134:10 - simply going to say a
134:11 - monster shooter game mode and it's a
134:15 - pointer so i'm going to say my game mode
134:18 - and that's going to be equal to from
134:19 - here cast and i'm going to cast a
134:22 - into the a monster shooter game mode and
134:25 - who am i casting from you gameplay
134:28 - statics i am going to get the game mode
134:32 - like that but we also need to pass here
134:35 - the world so get the world and there you
134:38 - go
134:39 - so now we are trying to get the game
134:41 - mode if we do have the game mode so if
134:45 - my game mode so we got a reference to
134:49 - the game mode we are going to simply say
134:50 - my game mode
134:52 - restart game
134:55 - play that is so restart gameplay and
134:57 - passing here false why passing false
135:00 - well passing falls because we died you
135:02 - see over here if we get killed then you
135:05 - know we simply need to restart the game
135:07 - we died and
135:10 - that's pretty much it so after three
135:12 - seconds we are going to you know restart
135:14 - the game so let me just compile this so
135:17 - ctrl shift b we need to compile this
135:19 - and the reason why we need to compile it
135:22 - because now going back inside of our
135:24 - blueprints there you go everything has
135:26 - succeeded we are the best coders in the
135:28 - world so now we can go inside of our
135:31 - gameplay and we can test it out so we
135:34 - can see right away if the enemy can kill
135:36 - us so let me just go here for the enemy
135:38 - and set the value 100 for the damage
135:40 - just so that we can see that the enemy
135:42 - can kill us right away and when it does
135:44 - okay i have shot when it does bam look
135:47 - at that it's going to restart the game
135:49 - and voila there you go the game has been
135:52 - restarted if i you know
135:55 - you see this
135:56 - whatever this is
135:58 - well over here if we take a look at it's
136:00 - trying to get the display held for the
136:02 - player and all of that stuff we can fix
136:05 - this and we destroy the player it's
136:06 - trying to access the player to display
136:08 - the help but we destroyed the player we
136:10 - can fix this by going over here in the
136:11 - player bpui and before we actually
136:15 - display the health what we can do is we
136:17 - can break this pin and over here we can
136:19 - test is valid
136:21 - so it will test if the game object or
136:24 - actually the actor in this case if it's
136:25 - valid and if that is the case then we
136:28 - are going to display that health value
136:30 - otherwise we will not do that so this is
136:33 - one of the ways how we can protect
136:35 - ourselves basically the character has
136:37 - been destroyed it's trying to access a
136:39 - character or an actor that has been
136:41 - destroyed it doesn't have access to a
136:42 - destroyed actor so that's why we saw
136:44 - that problem so if we try that right now
136:48 - and if the enemy kills us there you go
136:50 - we are dead the game will restart there
136:52 - you go if i you know turn it off now we
136:54 - don't have that problem that is pretty
136:56 - much it now over here for the damage
136:58 - value i'm going to set that to 5 back
137:01 - for the enemy and what we need to do is
137:03 - display the countdown timer because
137:06 - inside of our you know if you remember
137:09 - in the game mode over here we are start
137:12 - starting the countdown but we need to
137:13 - display that in order to display it it's
137:15 - very simple over here in the ui in the
137:18 - event graph
137:19 - after we get a reference to the you know
137:21 - player
137:22 - we need to right click over here we need
137:24 - to say get game
137:26 - mode and we are going to cast to
137:30 - bp monster shooter game mode and who are
137:34 - we casting well we are casting the game
137:36 - mode that we got over here so returns
137:38 - the current game mode base null if it
137:40 - cannot be retrieved but if it can
137:41 - retrieve it it will return it so we're
137:43 - going to try and cast that one into the
137:46 - monster shooter game mode and if that
137:48 - succeeds i'm simply going to promote it
137:51 - into a variable and from here
137:54 - i'm simply going to see monster shooter
137:57 - game mode ref
138:00 - so this is the monster shooter game mode
138:03 - reference
138:04 - and over here inside of our designer for
138:07 - the time i am going to bind over here so
138:10 - i'm going to create the binding
138:12 - and this binding i am going to call
138:15 - display
138:16 - countdown timer or display yeah
138:20 - time countdown actually so time count
138:24 - down
138:25 - and what's going to happen over here is
138:27 - that i am going to get the game mode so
138:29 - the reference that we have for the game
138:31 - mode here it is
138:33 - from the reference i'm going to get the
138:34 - timer count so timer count because we
138:37 - set inside of our class over here that
138:41 - we can get a reference to it so it is
138:44 - blueprint read only
138:46 - so now what we can do is i can create
138:50 - here a string so i can say here append
138:54 - and this is for the string not for the
138:56 - array but for the string and i'm going
138:58 - to say here time and then call on and
139:01 - then space
139:02 - and i'm going to append the timer count
139:04 - over here and all of that i'm going to
139:08 - put over here inside of this returning
139:11 - node for the time so what this is going
139:14 - to do it's going to create a string time
139:18 - then colon then space then it is going
139:20 - to append to it the value of the timer
139:24 - count and that whole value is going to
139:27 - be put over here inside of that text so
139:30 - that text is going to be like this time
139:33 - call on space and the value of the timer
139:36 - and we can simply test that out if i hit
139:38 - the play button look at that 300 299 297
139:42 - so on and so forth and all of that stuff
139:45 - when it comes down to zero i'm not going
139:46 - to wait for five minutes for that but
139:48 - when it comes down to zero we are going
139:49 - to die and restart the game and all of
139:52 - that stuff if something is not clear
139:54 - when it comes to this lecture make sure
139:55 - that you ask in the comments down below
140:00 - i don't know what this was and
140:02 - yeah i will see you guys in the next
140:04 - video what up game dev shooters so now
140:07 - we are going to create the health ui for
140:09 - the enemy because we have one for the
140:11 - player why shouldn't we have one for the
140:12 - enemy so i'm going to right click user
140:14 - interface and widget blueprint and this
140:16 - one is going to be bp
140:18 - enemy underscore health there you go you
140:21 - can add ui if you want to i'm not going
140:23 - to add i'm going to add here a progress
140:26 - bar and i'm going to set his anchor at
140:28 - the center so i'm also going to set the
140:32 - position of this progress bar so for the
140:34 - x position it is going to be minus 650
140:38 - and the y actually minus not plus it set
140:42 - it on the plus so minus 650
140:45 - and over here the position y is going to
140:48 - be minus
140:49 - 100 or actually 72 so minus 72 over here
140:54 - the size is going to be
140:56 - one two
140:57 - let's say one two
140:59 - two two there you go or one two two zero
141:02 - to one thousand two hundred and twenty
141:04 - there you go over here 136 for the size
141:08 - y i am also going to change here the
141:11 - color to the red color so something like
141:13 - this
141:14 - and let's go over here fill out this
141:18 - fill out the
141:19 - the progress bar i'm also going to
141:21 - rename the progress bar to i don't know
141:24 - health progress bar something like that
141:27 - and you need to make sure that this
141:29 - check box over here it's checked so is
141:32 - variable that's neat this right here
141:34 - needs to be checked so make sure by
141:35 - default it is for the progress bar but
141:37 - if it's not for whatever reason make
141:39 - sure that you check it
141:41 - so now we can go inside of the enemy
141:43 - blueprint and we can go here under add
141:46 - component and we can filter for the
141:48 - widget and yes we can also attach these
141:50 - widgets as components
141:52 - on our actors so this one is going to be
141:56 - the enemy health so enemy health there
141:59 - you go and compile and save and if i go
142:01 - here we don't see it i mean we do it's
142:04 - here but it's empty but if i go here in
142:06 - the user interface and widget class and
142:09 - if i click here to select the widget
142:11 - class and i select the enemy one there
142:13 - you go it's right there
142:16 - so what do we need to do in order well
142:19 - to make this work we need to resize it
142:20 - first of course so size or the position
142:23 - z is going to be 134
142:26 - the size x is going to be 0.4 actually
142:28 - the scale x 0.4 scale y 0.5 and scale z
142:33 - point 16. so this is going to be the
142:35 - health progress bar for the enemy
142:38 - now
142:39 - we need to get a reference to this so
142:42 - that we can use it and display the
142:45 - health value of the enemy when the enemy
142:47 - you know
142:48 - is dealt with damage so we can get here
142:50 - now you would think that you can do
142:51 - something like this get the enemy health
142:54 - from here and from here get the progress
142:57 - bar or health progress bar let me just
143:00 - try to find it health
143:03 - progress bar you cannot find it even
143:05 - though over here if you go in the bp
143:07 - enemy health you see that we have the
143:09 - health progress bar so what's the issue
143:13 - well the issue is that we first need to
143:14 - cast this so we need to say over here
143:16 - this enemy held goes here
143:19 - and from it we need to get the user
143:22 - widget
143:23 - so here it is we need to get the user
143:24 - widget and we need to cast to bp enemy
143:28 - health
143:29 - so now the widget and this user widget
143:32 - is basically the widget this one right
143:35 - here the widget class so that's the user
143:37 - widget and we're casting that to enemy
143:39 - health and when the cast succeeds we are
143:42 - going to promote it into a variable
143:44 - which is this one right here
143:46 - and we can rename this variable so not
143:49 - as bp enemy held but instead i'm going
143:53 - to say enemy health ui ref so reference
143:56 - to the enemy ui
143:58 - and then from here i am going to get
144:01 - that reference and from there i can get
144:04 - the held progress bar and there you go
144:06 - so now we have the health progress bar
144:08 - and we can set the percentage so set
144:11 - percent
144:13 - and this goes so tick goes here and
144:15 - we're going to check that every single
144:17 - frame to set the percent if we lose any
144:20 - health and we are going to right click
144:23 - over here and get health
144:25 - and if you remember inside of our class
144:28 - if i go here we see that we have our
144:30 - health as a u property that is blueprint
144:33 - read which means the blueprints can read
144:36 - this value
144:37 - and that is the reason why i can get it
144:40 - over here but we know that the
144:41 - percentage here goes from 0.0 up to 1.0
144:45 - so we need to divide this by float and
144:48 - that float value is going to be 100 and
144:51 - then we're going to plug this in so now
144:54 - we can simply compile and save this and
144:56 - again because the percentage goes from
144:59 - 0.0 up to 1.0 we need to divide this
145:03 - value by 100 this is in case if the
145:05 - health value goes maximally up to 100
145:08 - because now if the health is 100 and we
145:11 - divide that by 100 we're going to set
145:13 - the value here for the percent to 1. if
145:16 - it's 90 90 divided by 100 is 0.9 and you
145:20 - get the point
145:21 - so now i can go over here and i can save
145:24 - everything hit the play button and we
145:26 - are going to see now that we have the
145:28 - enemy the enemy has the health bar and
145:31 - there you go you see when we you know
145:33 - shoot the enemy look at that the health
145:34 - bar is you know displaying and there you
145:37 - go and we you know kill the enemy
145:39 - there you go this is it's this simple to
145:42 - create a health bar in unreal engine now
145:45 - for if you don't see the health bar
145:46 - being like this we don't see it for a
145:48 - reason i'm not going to cover that i
145:51 - covered it i believe in one of the
145:53 - previous
145:54 - mini courses but that is your assignment
145:57 - find a way
145:58 - to make sure that this health bar is
146:00 - always rotated towards the player so
146:02 - that we can see it
146:04 - that is the way how you can see this so
146:06 - make sure it is rotated towards the
146:10 - player and that can be easily done by
146:12 - getting the player rotation calculating
146:13 - you know the direction all of that stuff
146:15 - google it it will be your practice if
146:18 - something else is not clear in this
146:19 - video make sure that you ask and i will
146:20 - see you guys in the next one the before
146:23 - last step is to create a door that is
146:25 - going to serve as you know the winning
146:27 - door so over here i'm going to right
146:29 - click and create a new c sharp script
146:31 - that
146:32 - c c plus plus what am i talking about
146:34 - inherits from the actor and over here
146:36 - we're going to call it door very
146:38 - creative i'm the most creative person in
146:41 - the world
146:42 - nobody can top my creativity and i'm
146:44 - just talking like this because we see
146:46 - that it takes a little bit of time for
146:48 - unreal engine to do its thing
146:51 - so i'm going to sing and said
146:55 - you owe me 50 bucks for this one it's
146:56 - not five anymore i'm not i'm not singing
146:59 - cheaply anymore so i want 50. my paypal
147:02 - is in the link down below send me 50
147:05 - bucks for this song
147:08 - hopefully this is going to work
147:09 - eventually so i'm going to probably
147:11 - pause the video over here and wait until
147:14 - this compiled thank you finally
147:18 - so let's go in the you know see
147:21 - in the visual studio and here it is we
147:23 - have our door so what's going to happen
147:25 - over here below our tick is that we are
147:28 - going to create a few variables so one
147:31 - is going to be a u property edit
147:34 - anywhere and this is going to be our
147:36 - class u static mesh component
147:41 - component and it's a pointer and it's
147:44 - capital s
147:46 - there you go it's a pointer i'm going to
147:47 - call it door mesh that you know
147:50 - this is going to represent the door
147:52 - also you property this one is going to
147:55 - be added anywhere and over here class u
147:59 - box component component and this one is
148:03 - going to be the collision component or
148:06 - basically
148:07 - we are when we touch this box then we
148:10 - are going to you know detect collision
148:12 - with the player and there you go
148:14 - and over here we have our on hit you can
148:17 - just copy and paste this from the player
148:19 - from the projectile so over here just go
148:21 - and copy and paste this it's the same
148:23 - function
148:24 - basically we do this over and over again
148:26 - because that's the only way how we can
148:28 - detect collision between objects or
148:31 - actors so there you go so just copy it
148:33 - and over here the first thing that we
148:35 - are going to do at the top of the door
148:37 - is import or include all components so
148:39 - make sure that you include all of these
148:41 - components
148:43 - and then we can continue pause the video
148:45 - include these and now inside of here so
148:49 - inside of the constructor
148:51 - we are going to create the door mesh so
148:54 - that's going to be equal to create
148:56 - default sub object of you static mesh
149:00 - component and we're going to give it a
149:02 - name over here with the text so the text
149:05 - is going to say
149:07 - mesh or you know whatever you want to
149:10 - call it
149:11 - our root component is going to be the
149:13 - door mesh
149:15 - we are also going to set the collision
149:17 - component or create it so create default
149:20 - sub object actually it's this right here
149:23 - so create and the sub object is going to
149:25 - be you box component
149:28 - and text over here give it a name so the
149:32 - name is going to be collision
149:35 - component so component there you go but
149:38 - just with the space over here so why not
149:41 - and over here i need to add
149:44 - it inside of a parenthesis
149:47 - next i'm going to attach this collision
149:50 - component so i'm going to say collision
149:52 - component set up attachment and i'm
149:55 - going to attach it on the door mesh
149:58 - there you go
150:00 - and there is one other thing that we
150:01 - need to do but it's going to be here in
150:03 - begin play we are going to take the
150:05 - collision component and on component
150:09 - begin overlap dot add dynamic
150:13 - not internal dynamic dynamic like this
150:16 - inside
150:17 - so this and from there oh actually i did
150:20 - not create this so i need to go here
150:23 - right click and create the declaration
150:27 - as we just saw
150:29 - and take it from here
150:31 - and add the and sign and there you go
150:36 - so this is basically everything we need
150:37 - to do
150:39 - inside of our on hit we're simply going
150:41 - to test if we collide with the player so
150:43 - we're going to test a monster character
150:46 - shooter or shooter character this is
150:48 - going to be the char we are going to say
150:51 - if that is equal to casting into the a
150:55 - monster character shooter or monster
150:57 - shooter character casting the other
151:00 - actor
151:01 - if this succeeds and we have the
151:04 - char
151:05 - char if we have the
151:06 - well char character so if this succeeds
151:10 - we have the character what we are going
151:12 - to do is we are going to get the game
151:13 - mode so we're going to say a
151:16 - monster shooter game mode which you know
151:20 - is a pointer and i'm going to call it my
151:22 - game mode and i'm going to cast the so
151:25 - i'm going to say cast into a monster
151:29 - shooter
151:30 - game mode and i'm casting
151:33 - getting from the game play so gameplay
151:36 - statics
151:38 - get
151:39 - game
151:40 - mode passing here get the world as the
151:43 - parameter and i need to close the
151:45 - parentheses one more time this is not
151:46 - the first time we did this so we are
151:48 - getting the game mode from the gameplay
151:50 - statics and if we have the game mode if
151:52 - my
151:53 - game mode so the cast was successful
151:56 - this worked we're simply going to say my
151:59 - game mode and from here restart
152:03 - game or actually restart game play
152:06 - passing through because we won
152:08 - so when we win we are going to pass
152:11 - through over here we talked about this
152:13 - we saw this in action ctrl shift b so
152:16 - that we can make sure that we don't have
152:17 - any oopsies but these are basic things
152:20 - so we're just detecting collision with
152:22 - the player if you know we collide with
152:24 - the player then we are going to simply
152:27 - restart the game nothing complicated for
152:30 - this game of course you can add more
152:32 - things if you want to but that would be
152:34 - it i have plenty other tutorials where
152:36 - you can see
152:37 - i don't know whatever you want to add
152:38 - more components
152:40 - more logic or whatever so over here i'm
152:42 - going to create a new blueprint class
152:44 - that's going to inherit from the door
152:47 - and i'm going to call it bp door
152:50 - i know creative i cannot be more
152:52 - creative than this i i really can't
152:55 - so for the door mesh over here just
152:58 - filter for the door and there you go sm
153:01 - door this is the one that we want
153:04 - and for the door
153:06 - it's going to stay as is but i'm going
153:08 - to take the collision component from the
153:10 - door
153:11 - and the collision component i'm going to
153:13 - set the x at minus 18 y is minus 48 z
153:18 - 102. and from there i'm also going to
153:22 - set here the box extent x to 15.
153:25 - the y is going to be 45
153:28 - and the z is going to be 100
153:32 - and that's basically it so compile and
153:35 - save
153:36 - and we can just take the door now place
153:38 - it here and this is where we need to
153:41 - touch so when we touch here
153:43 - we should restart the game and let's
153:46 - test that out so when i get here
153:49 - there you go i've restarted the game and
153:51 - everything works again there you go i'm
153:53 - traveling through time shooting this bad
153:55 - boy and there you go look at that
153:57 - so yeah and you see that the timer
153:59 - restarts every single time look at that
154:01 - so now it's at 300 again
154:04 - and that would be it of course you can
154:06 - and i have mini courses for that
154:09 - published before this one so you can
154:11 - look that up
154:12 - and
154:14 - you can add some you know
154:16 - sign you won congratulations blah blah
154:18 - blah stuff like that do you want to play
154:20 - again again add buttons yes no and so on
154:24 - and so forth you get the point if
154:25 - something was not clear what we did in
154:27 - this video make sure that you ask and
154:28 - the last step is to create the level and
154:31 - put this
154:32 - put this door at the last you know part
154:34 - of the level where we need to get after
154:36 - passing all through all of the enemies
154:38 - and stuff like that in order to win so i
154:41 - will see you in the next video when we
154:43 - create that now when it comes to the
154:45 - level design for this particular game
154:48 - what you can do is take the simple box
154:50 - brush and then position them to form a
154:53 - level i don't want to stall and gain
154:55 - time on this mini course and this course
154:58 - is five hours or whatnot and creating
155:00 - the level is you know last 20 30 minutes
155:02 - because these are all basic things what
155:05 - i did is over here in the geometry i
155:07 - just took this box and then simply you
155:10 - know resized it so if i go over here
155:12 - first delete this box if i go here into
155:14 - the level folder and area one if i take
155:17 - the first floor and i simply deactivated
155:20 - see it's simple box brush that's resized
155:23 - that's all there is to it this is the
155:25 - first wall that's also a box brush
155:27 - that's resized and it will take a lot of
155:30 - time for you to watch me create all of
155:33 - this and basically what i would do is
155:35 - only change here the locations location
155:38 - here location here change the scale or
155:41 - actually change here the brush settings
155:43 - for x y and z that's everything
155:45 - literally everything what i would do and
155:47 - of course attach a material as you can
155:49 - see we have this material and that's all
155:51 - there is to it so you can see we have a
155:53 - hall that we can pass and over here
155:55 - another hall that we can pass and over
155:58 - here you can see the third hole and
156:00 - there you go this is the door where we
156:02 - win the game when we pass the door of
156:04 - course
156:04 - on this whole level you are going to
156:06 - create these enemies i only have one as
156:08 - an example but of course you can
156:10 - duplicate it just hold you know control
156:13 - and then you know duplicate it there is
156:14 - another enemy position this enemy here
156:17 - then position another enemy here maybe
156:19 - you can spice things up by adding here
156:22 - so you can search for a cube maybe add a
156:25 - few cubes here in your level resize them
156:27 - of course jus
156:29 - use them as shields to hide from the
156:32 - enemies that can be your assignment or
156:34 - you can download this complete project
156:36 - link will be down below in the
156:38 - description depending on you know where
156:40 - you're watching this on youtube it's you
156:42 - know in description of video on my
156:43 - website it's right below the first video
156:45 - i believe so you can download this
156:47 - complete project where you can exactly
156:50 - see the whole position of these box
156:52 - brushes and you can copy this but i
156:55 - highly encourage you to create a level
156:57 - on your own and if you're on my website
156:59 - watching this make sure that you post
157:00 - down below to see for us to see
157:03 - me and the people who are in the course
157:05 - so that we can see the level that you
157:07 - have created because i you know it's not
157:10 - the point of this course is not just for
157:12 - you to copy paste what i'm doing the
157:13 - point is for you to learn
157:15 - so yeah you can do that and i highly
157:18 - encourage that and i didn't want to
157:20 - waste your time by you watching me you
157:22 - know just positioning all of these
157:24 - because you will not learn anything
157:26 - basically there is nothing to learn by
157:28 - you know watching me positioning these
157:30 - cubes left and right and resizing them
157:32 - and so on and so forth there is nothing
157:35 - to learn
157:37 - there
157:38 - so that would be it thank you for
157:39 - watching this tutorial series and i
157:43 - hope that you enjoyed because i enjoy
157:45 - creating these and i will see you in the
157:47 - next tutorial series take care