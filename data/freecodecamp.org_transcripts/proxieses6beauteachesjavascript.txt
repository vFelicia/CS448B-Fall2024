00:00 - proxies the proxy object is used to
00:02 - define custom behavior when the
00:04 - properties of a target object are
00:05 - accessed this will make more sense once
00:07 - i give you an example but before i give
00:09 - you an example let me just show you the
00:10 - syntax we got var p equals new proxy and
00:14 - then you pass in the target and the
00:15 - handler a target is just an object
00:17 - you're passing in any object and the
00:19 - handler explains how it's going to be
00:22 - different than usual when you access the
00:24 - object
00:25 - so you can make things a little
00:26 - different than than what would normally
00:27 - happen when you try to do things with
00:29 - the object with the handler and the
00:31 - methods that are in the handler are
00:33 - called traps let me give you an example
00:36 - in this example i'm going to explain the
00:38 - handler first
00:40 - and in this handler we're going to
00:42 - define a new get method now normally the
00:45 - get method um is just a normal method
00:47 - it's part of any object like if you look
00:48 - at this example if we um if our p was
00:51 - just a normal object and then we tried
00:53 - to
00:55 - did p dot a equals one the a is is the
00:59 - key and then the one is the value so
01:02 - then if you just console that log p a
01:04 - it's just going to print one because
01:06 - we've assigned one to two a
01:09 - so now instead of doing just giving you
01:12 - the normal value out normally if you did
01:14 - p to a there'll be a get to get one
01:16 - we're going to find something else
01:18 - to happen when you try to access
01:21 - that that val that key within the object
01:24 - so it says return key so it's going to
01:27 - say if key is in the target so if we're
01:31 - searching for a key that's actually part
01:32 - of the object
01:34 - if that's true this is a ternary
01:36 - operator so
01:38 - it's it's if it's true this is going to
01:40 - happen if it's false this is going to
01:43 - happen so if the key isn't the target we
01:45 - are going to return that key
01:48 - else we are going to return 37.
01:51 - so look down here we have the the
01:54 - variable p and then we're going to make
01:56 - it a proxy we're going to pass in this
01:58 - empty object and then we're going to put
02:00 - in this handler
02:01 - so we can now assign things to just like
02:03 - a normal object p a equals 1 p b equals
02:07 - undefined
02:09 - and now if we consult dot log this
02:10 - things p to a and p that b well p a is
02:14 - one so it should give us one p that b is
02:16 - undefined so it should give us undefined
02:18 - but then look at this next section
02:21 - of the log c and p
02:23 - well there is no c and p
02:25 - so and then we're going to do p dot c
02:27 - there is no c so let's see what happens
02:28 - let's run them
02:30 - and you can see um it is get for p to a
02:32 - it's giving the one and then p b is
02:34 - giving the undefined
02:36 - and
02:37 - c is c
02:38 - it's checking to see if c is in p there
02:40 - is no cmp so we get false but then when
02:42 - we try to access c dot p
02:44 - uh it's going to give us 37 because of
02:48 - the the proxy handler up here now just
02:51 - to kind of make this just to show you
02:53 - one more thing if i um
02:56 - comment that out and i'm going to put
02:58 - bar p equals and now i'm just going to
03:00 - make an object without the proxy and if
03:03 - i run that
03:04 - so it's going to give you undefined so
03:06 - without
03:08 - without the proxy when i do p.c it gives
03:11 - you undefined but with the proxy
03:14 - instead of giving you undefined it's
03:15 - going to give you 37
03:18 - so proxies just allow you to
03:20 - to
03:21 - make it so other things can happen
03:23 - instead of what would normally happen
03:25 - when you're working with objects
03:27 - let me give you just one more example
03:30 - i'm going to scroll down here to example
03:32 - two and
03:34 - proxies can be used to help validate
03:36 - data that you're passing in to the
03:38 - object
03:40 - so before i
03:41 - look at this validator which is the
03:44 - equivalent of the handler up here
03:47 - let's look at how we're creating the the
03:48 - object let person equal new proxy with
03:51 - an empty object validator and let's see
03:53 - how it validates because we're actually
03:55 - trying to
03:57 - make an object called a person
04:00 - so and we're trying to set the age of
04:02 - the person so
04:03 - before we were using the method the
04:07 - get method now it's the set method so
04:09 - when you try to set a value of the
04:11 - object first it's going to see if the
04:13 - property you're trying to set is the age
04:15 - and then if the type of
04:18 - the the value that means if the what
04:20 - you're
04:21 - pushing into the age property is not a
04:23 - number or if it's not a value
04:26 - console.log age must be a number and if
04:29 - the value is less than or equal to zero
04:32 - console.log h must be a positive number
04:34 - let's just make that
04:36 - less than zero because we'll your age
04:38 - can equal zero and then after that
04:40 - happens it's going to assign um
04:44 - the object which is person the property
04:47 - which would be age the value of what you
04:49 - set that and that's going to return true
04:51 - so let me um put in some more code and
04:53 - give you this example
05:00 - so if we try to assign person.age to
05:02 - equal yang let's see what happens
05:05 - it says age must be a number because
05:07 - that's not a number
05:12 - if we try to make it negative 30
05:15 - let's see what happens
05:17 - we just look at the bottom age must be a
05:19 - positive number because that's a
05:21 - negative number however if we do
05:23 - person.age equals 100
05:27 - which is something that that it can be
05:29 - um it's going to say agency a number h
05:32 - must be a positive number but it doesn't
05:33 - give you any extra
05:35 - warning when you put h
05:37 - equals 100 and then i'm just going to do
05:39 - console.log
05:45 - person.age i'm going to clear the
05:47 - console really quick and run that
05:50 - and then it's going to console.log the
05:51 - 100. now in this specific example even
05:55 - it's still assigning the the proper to
05:57 - the value so like for instance if right
06:00 - under it says personal age if i say
06:02 - console.log
06:06 - person.age
06:08 - and i run that
06:10 - see it's still going to log the word
06:12 - young but instead of in an actual
06:14 - program you wouldn't put console.log
06:16 - here you would make this an error and
06:18 - then it would never get to the line down
06:20 - here where it assigns the value but i
06:22 - just did consult along so you can see
06:24 - what i was doing here
06:25 - thanks for watching my name is beau
06:27 - carnes check the description for links
06:29 - more information please subscribe and
06:31 - remember use your code for good