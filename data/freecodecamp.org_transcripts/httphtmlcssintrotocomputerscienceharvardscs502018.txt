00:00 - [MUSIC PLAYING]
00:50 - DAVID J. MALAN: This is CS50.
00:52 - And today, we transition from the
world of C and, with it, pointers
00:56 - and some of the struggles that you
might have felt over the past few weeks
01:00 - to a more familiar world,
that of web programming.
01:02 - I'm using web browsers and mobile
devices and laptops and desktops
01:05 - and creating more graphical
and more interactive experience
01:08 - than our traditional command-line
terminals have allowed.
01:10 - And we'll see, though, along the way
that a lot of the ideas that we've
01:13 - been exploring over the past few weeks
are still going to remain with us.
01:16 - And we're going to see
them in different ways.
01:18 - We're going to see them in the form
of other languages and other syntax.
01:21 - But the ideas will remain
quite reminiscent of what
01:24 - we did back in week 0.
01:26 - So TCP/IP is perhaps
the most technical way
01:29 - and the most low-level way we can
quickly make the web uninteresting.
01:34 - But you've probably, at least,
seen this acronym somewhere, maybe
01:37 - on your Mac, your PC, some
setting maybe once upon a time.
01:40 - And this, actually, just
refers to a protocol
01:44 - or, really, a pair of
protocols, languages of sorts
01:47 - that computers speak in
order to transmit information
01:50 - from one computer to another.
01:51 - And this is what makes most
of the internet today work.
01:55 - The fact that you can pull
up your laptop and desktop
01:57 - and talk to any computer on the
internet is because of these protocols,
02:01 - conventions that humans decided
shall exist some years ago.
02:04 - And they just dictate how
computers intercommunicate.
02:07 - But let's make it a lot more familiar.
02:09 - In our human world, you've probably, at
some point, sent or received a letter.
02:14 - These days, it's
perhaps more electronic.
02:16 - But, at least, you've
gotten one such letter
02:17 - from probably a human, maybe
a grandparent or the liked,
02:20 - or sent something yourself.
02:22 - But before you can actually send
that message to the recipient
02:26 - and put it through the US mail or
the international mail services,
02:30 - what needs to go on the envelope?
02:31 - AUDIENCE: Address.
02:32 - DAVID J. MALAN: Yeah--
so some kind of address.
02:34 - And what does an address consist of?
02:36 - AUDIENCE: Name.
02:37 - DAVID J. MALAN: Name.
02:37 - AUDIENCE: Where they are.
02:38 - DAVID J. MALAN: Where they are.
02:40 - AUDIENCE: [INAUDIBLE]
02:41 - DAVID J. MALAN: So where they are might
include a street address and a city,
02:44 - a state, a ZIP code in the US,
or a postal code, more generally,
02:48 - and the country, if you
really want to be specific.
02:50 - And so all of that goes on
the front of the envelope,
02:52 - generally in the center of the envelope.
02:54 - And then what often goes on the top
left-hand corner in most countries?
02:58 - AUDIENCE: The return.
02:59 - DAVID J. MALAN: Yeah.
02:59 - So the return address-- so
that if something goes wrong,
03:02 - albeit infrequently, that letter
can get-- make its way back to you,
03:05 - and also the recipient knows just
immediately who actually sent them
03:08 - the no.
03:09 - So that is enough information
to get a letter from point A
03:12 - to point B because these
addresses, these postal addresses
03:14 - in our human world, uniquely identify
houses or buildings or people,
03:19 - in some sense, in the world.
03:21 - So right now, we're at 45 Quincy Street,
Cambridge, Massachusetts, 02138, USA.
03:27 - That is probably enough
specificity for anyone in the world
03:30 - to mail us a postcard saying
"Hello world" in written form
03:33 - and get it to this building.
03:34 - Meanwhile, if we wanted to send
something to the Science Center,
03:37 - 1 Oxford Street, Cambridge, Mass,
02138, USA, that's its unique address.
03:42 - So it stands to reason that computers,
including our own Macs and PCs
03:45 - and Android phones and
iPhones and the like,
03:47 - all have unique addresses, as
well, because, after all, they
03:50 - want to communicate.
03:51 - And they need to get bits, zeros
and ones, from point A to point B.
03:54 - But they're not quite as verbose
as those kinds of addresses.
03:58 - Computers have what you
probably know as IP addresses,
04:01 - Internet Protocol addresses.
04:03 - And this just means that
humans decided years ago
04:06 - that every computer in
the internet is going
04:08 - to have a unique number identifying it.
04:10 - And that number is generally of the form
something dot something dot something
04:15 - dot something.
04:16 - And, as it turns out, each of
these somethings between the dots
04:21 - is a number from 0 to 255.
04:24 - And now, after all these
weeks of CS50, your mind
04:26 - can probably jump to a quick answer.
04:28 - How many bits must each of
these numbers be taking up
04:33 - if the range is from 0 to 255?
04:35 - Eight.
04:36 - So eight-- and why is that eight?
04:37 - So 256 has been a recurring theme.
04:40 - And if you don't recall, that's fine.
04:41 - But yes, this is eight bits, eight
bits, eight bits, eight bits,
04:44 - which means the numbers that we humans
use to uniquely identify our computers
04:48 - on the internet are 32 bits in total.
04:50 - Well, there's probably another
number that can roughly come to mind.
04:53 - If you've got 32 bits, how high can you
count, roughly speaking, from 0 to--
05:01 - I heard a murmur--
05:03 - AUDIENCE: Four billion.
05:03 - DAVID J. MALAN: Four billion.
05:05 - So it's roughly four billion.
05:06 - And we brought that up in week 0
with a four billion-page phone book,
05:10 - imagining that.
05:11 - So four billion is roughly what
you can count up to with 32 bits.
05:14 - So that means there can be four
billion computers, devices, or anything
05:19 - on the internet, uniquely
identified-- small white
05:21 - lie because that's actually not quite
enough these days with all the devices
05:24 - and all the humans in the world.
05:26 - But we found workarounds for that.
05:27 - Question?
05:28 - AUDIENCE: [INAUDIBLE]
05:40 - DAVID J. MALAN: But only
half of them at the time.
05:42 - No.
05:42 - So yes, if by 2023 or whatever
year humans are projected
05:45 - to be almost entirely
online, and there's
05:47 - some-- billions and billions
of people, eight billion or so,
05:50 - then that's a problem for this system.
05:53 - Thankfully, as long ago as 20
years ago did people realized,
05:55 - mathematically, this was
going to be a problem.
05:57 - And so there's actually a newer
version of IP, Internet Protocol.
06:00 - This is version 4 we're
talking about, which is still
06:03 - pretty omnipresent in the world.
06:04 - Version 6 actually uses not 32 bits,
but 128 bits, which is massive.
06:10 - And I can't even pronounce
how big of a number that is.
06:13 - So we're thinking about it.
06:14 - And the biggest companies
of the world have already
06:16 - transitioned to using bigger addresses
rather than these 32-bit addresses.
06:19 - But these are still pretty common in
almost any device you might own or see
06:22 - on campus or elsewhere.
06:24 - So if you have a unique
address, that's enough to put
06:27 - on the front of the envelope.
06:28 - And it turns out that if you're
sending an email or a chat message
06:32 - or whatever, you, too-- your Mac,
PC, or phone-- has an IP address.
06:35 - So that's enough to put in the top
left-hand corner, conceptually.
06:39 - But you need one more
piece of information.
06:41 - It turns out that on the internet,
there are servers, computers,
06:47 - that are just constantly
listening for people to connect
06:49 - to them, like us, checking our
email and visiting Facebook
06:53 - and Gmail and other such websites.
06:55 - And those servers, though,
can do multiple things.
06:57 - Google has lots of businesses.
06:58 - They give you email and web
services and video conferencing
07:02 - and lots of other
internet-based services.
07:04 - And so humans also decided,
years ago, to identify
07:08 - all of these possible internet
services with just unique numbers--
07:12 - names also, but also unique numbers.
07:15 - And it turns out that
humans decided years ago
07:17 - that when you visit a website, there's
one more piece of information that's
07:20 - got to go on this envelope, not
just the server's IP address
07:23 - that you're trying to connect
to, but also the number 80
07:26 - because 80 equals HTTP, acronym
you're surely familiar with by now.
07:31 - And that just denotes
this is a web request.
07:33 - If, instead, it said something like
25, that's SMTP, which is email.
07:37 - So that might mean inside
of this virtual envelope
07:40 - is actually an email message
going to Gmail or the like.
07:42 - And there's bunches more numbers.
07:44 - But the point is that there are
numbers that uniquely identify.
07:46 - So when Google gets a virtual envelope,
just a whole bunch of bits, zeros
07:50 - and ones, that, in some way, has an
IP address on it as the destination,
07:56 - it also knows, oh, is this an email
or is this a video conference message
07:59 - or is this a chat message
or something else.
08:02 - So just to make this
more real then, if I'm
08:04 - going to go ahead and write
this down, my IP address to whom
08:07 - I'm sending something might be 1.2.3.4.
08:11 - Generally, then, I'm going
to send it to, say, port 80.
08:14 - Maybe my IP address is 5.6.7.8.
08:20 - And so an envelope--
08:22 - I'll be at [INAUDIBLE]---- and it's
really just going to have those pieces
08:25 - of information-- the
destination address, colon,
08:27 - and then the number of the service
you care about, HTTP or whatever,
08:30 - and then your own IP address,
and more information.
08:33 - But the point is both sender
and recipient in dresses--
08:36 - that's enough to get data from one
computer in the world to another.
08:40 - And there's so much more complexity.
08:42 - This is a whole field in
computer science of networking,
08:44 - if you like this kind of stuff.
08:45 - But that's how, in a nutshell, the
internet gets data from point A
08:49 - to point B. And this
envelope just represents
08:51 - a whole bunch of zeros and ones.
08:53 - But what's inside of that envelope?
08:55 - And that's where we'll focus
today and in the weeks to come.
08:57 - It's actually content.
09:00 - It's the email you care about
or the web page you care about.
09:03 - And how do we actually decide
what server we're connecting to?
09:06 - Well, typically, you might go to
a so-called URL, Uniform Resource
09:10 - Locator.
09:11 - A URL is just the address of a server.
09:14 - And that's going to be the-- really,
the ultimate recipient of that envelope
09:18 - that we're trying to send.
09:20 - But this, of course,
is not an IP address.
09:22 - This does not follow the
pattern something dot
09:24 - something dot something dot something.
09:25 - So if all of us humans are
constantly typing stuff like this
09:28 - into our browsers, yet
the whole story just
09:31 - told is about numbers and port
numbers and low-level stuff,
09:35 - where's the connection?
09:37 - Does anyone already know
how you get from typing this
09:40 - to a bunch of zeros and ones that
are somehow addressed with numbers?
09:46 - DNS, I heard.
09:47 - What's DNS?
09:48 - Yeah.
09:48 - So it turns out there's a technology
in the world-- domain name system,
09:52 - in fact.
09:53 - And DNS, Domain Name System, is just
a type of service on the internet
09:56 - that Harvard maintains
and Yale maintains,
09:58 - and Comcast and Verizon and
a lot of the big players
10:01 - in the world, whose
purpose in life is to run
10:03 - servers that convert what are
called domain names to IP addresses,
10:07 - and vice versa, so that when we humans
type in www.example.com into a browser,
10:12 - it's our Mac or PC or phone that
contacts a local server, a DNS server,
10:17 - on the local campus or university
or apartment or whatever,
10:20 - asks what is the IP address
for www.example.com.
10:24 - And then what your Mac
or PC or phone does
10:26 - is it writes that
address on the envelope.
10:29 - But it puts a request for specific
web page inside of the envelope.
10:32 - And when you get back a
response from that server,
10:35 - it's going to be your address
that's on the front of the envelope.
10:38 - And inside of the
envelope is going to be
10:39 - the web page or the
email or the chat message
10:41 - or whatever it is you were
trying to actually access.
10:45 - So let's tease this apart
into some of its components.
10:47 - First of all, this thing
here highlighted in yellow
10:50 - is officially the domain name.
10:51 - You've probably all
used this term before.
10:53 - It's usually something dot something.
10:55 - "Com" typically refers to commerce
or commercial, although anyone,
10:59 - for any purpose, can use .com.
11:01 - Back in the day, very popular were
.com, .net, .org, .edu, .gov, .mil.
11:07 - And these were all very
US-centric because it
11:09 - tended to be the United
States that really kicked off
11:12 - this use of the internet and DNS.
11:14 - But now it's certainly spread globally.
11:16 - And so there's hundreds now of what
are called TLDs, Top-Level Domains.
11:22 - They tend to be three or more
characters if they denote a word.
11:26 - And they tend to be two characters
if they denote a country,
11:28 - like US is United
States, JP is Japan, UK--
11:32 - United Kingdom, and so forth.
11:33 - Those are just country codes
that do the same thing.
11:37 - But what's this at the front?
11:39 - Worldwide web, or www, here, more
generally, is an example of what,
11:44 - technically speaking?
11:48 - What is this?
11:52 - What does this mean?
11:53 - Yeah?
11:54 - AUDIENCE: Subdomain.
11:55 - DAVID J. MALAN: It's a subdomain--
is one way of thinking about it.
11:57 - In fact, all of you, many
of you here, probably
11:59 - have email addresses of the form
college.harvard.edu or g.harvard.edu
12:03 - or the like.
12:04 - Those are subdomains.
12:05 - Harvard's such a big
place that they actually
12:07 - put everyone in different categories of
domains, otherwise known as subdomains.
12:11 - And that might be a word or a phrase
that comes before the domain name here.
12:16 - But it can also just mean
the name of a server.
12:18 - So if example.com is the company or
business whose website you're trying
12:21 - to visit, their domain is example.com.
12:23 - And they bought that
domain name some years ago.
12:26 - And they spent a few dollars every year,
probably, renewing the fee for that.
12:29 - And they have at least one
server whose name is www.
12:33 - And that exists within their domain.
12:34 - They might have dozens or
hundreds or just one server.
12:37 - Each of them can have a name.
12:38 - So this is generally
called the hostname.
12:40 - So when it's an email address,
it often implies a subdomain,
12:43 - like a category of addresses.
12:45 - But when it's in a URL like this,
it means probably a specific machine
12:49 - or a specific set of
machines-- conventionally,
12:51 - the web servers that the company runs--
12:53 - doesn't have to be called www.
12:55 - For historical purposes, MIT
tends to use web.mit.edu.
12:59 - But almost everyone else in the
world uses www or nothing at all.
13:03 - It's not required.
13:04 - You can actually just visit many
websites without visiting any hostname.
13:09 - And it just works, as well, thanks
to DNS giving you the IP address.
13:13 - But what about the file
you're actually requesting?
13:17 - What does it actually
mean to visit this URL?
13:19 - Well, on many servers, this
implicitly means, hey, web server,
13:23 - give me a file, just a text
file, called index.html.
13:27 - That's the name of
the file, a text file,
13:30 - that you could create with CS50
IDE or even Notepad or TextEdit
13:33 - on your own Mac or PC that
contains a language called HTML.
13:36 - And we'll take a look at
that language in just a bit.
13:38 - And some of you might
have seen it before.
13:40 - But the language in which web
pages are written is HTML.
13:43 - And we'll give you the building
blocks, conceptually and practically,
13:46 - for that today.
13:47 - You'll use it over the coming
weeks in many different contexts.
13:50 - But we'll use it, ultimately, to
create the contents of websites.
13:53 - But today, we'll focus
first on this, HTTP.
13:56 - Anyone know what that stands for?
13:59 - Yeah?
13:59 - AUDIENCE: HyperText.
14:00 - DAVID J. MALAN: Yeah.
14:01 - HyperText Transfer Protocol.
14:03 - And honestly, in most
of technology, it's
14:04 - not so much what the acronyms
represent that's all that important,
14:09 - but, really, what the technology does.
14:10 - And in this case, HyperText
Transfer Protocol--
14:13 - we'll see hypertext in a moment.
14:14 - That's another way of saying HTML.
14:16 - Transfer Protocol-- P for
Protocol-- that's another buzzword.
14:20 - So protocols are not
programming languages, per se.
14:23 - They are conventions.
14:24 - And we humans have conventions, too.
14:26 - For instance, if I were to meet
someone for the first time,
14:28 - I probably wouldn't stand on stage
and lean down like this to do it.
14:31 - But I might say, hi, I'm David.
14:32 - AUDIENCE: Hi.
14:33 - I'm Stephan.
14:33 - DAVID J. MALAN: Stephan,
nice to meet you.
14:34 - And we have this weird handshake
that was aborted prematurely there--
14:38 - that we have this weird convention--
us humans, at least in the US,
14:41 - of greeting someone with a handshake.
14:42 - And Stephan just knew to
do that, however awkwardly.
14:46 - And then he disengaged because
the transaction was complete.
14:50 - And that's not unlike
what a web server does.
14:51 - When you request a web page,
you're sending a request to someone
14:54 - as though you're extending your hand.
14:56 - You're expecting something in return.
14:58 - But in the case of a
computer, of course,
14:59 - it's like the web page itself coming
back in an envelope from point B
15:03 - to point A.
15:04 - So that's what a protocol is.
15:05 - We just have been
programmed to know what
15:07 - to do when we want to request
a greeting or information
15:10 - and get something back in return.
15:11 - It's like a client-server
relationship in a restaurant.
15:15 - A customer requests
something off the menu.
15:17 - The server, the waiter or
waitress, brings it to them
15:20 - and, thus, completes
that transaction as well.
15:22 - And that's what the internet is, too--
15:23 - clients and servers, browsers
and servers, computers
15:27 - and other computers, ultimately.
15:29 - So with that relationship
in mind, let's take a look
15:32 - at what's actually
inside of this envelope.
15:35 - In the case of Stephan's and my
greeting, it was more visual.
15:39 - But in the case of a computer, it's
going to be more textual, literally.
15:42 - So inside of the envelope
the, virtual envelopes,
15:45 - so to speak, that your
browser sends to a server
15:47 - when trying to request
a web page, is actually
15:49 - a message that looks like this.
15:51 - Thankfully, it's not terribly
cryptic, although the dot, dot, dot
15:54 - implies there's more contents
inside of the envelope.
15:57 - But the keyword here
literally is gets, a verb.
16:00 - And there's other verbs
that the browser can use.
16:02 - And this one literally means,
get me the following home page.
16:05 - What home page you want to get?
16:06 - Well, the default one.
16:07 - This forward slash, as it's called,
just represents the default web page
16:11 - on a website.
16:12 - And in many cases, that implicitly means
an actual file called index.html, just
16:18 - a convention.
16:19 - It can be called other
things and not exist at all.
16:21 - But in many cases,
that means, implicitly,
16:23 - get me a file called index.html.
16:25 - And we'll see what that
looks like in a moment.
16:27 - Http/1.1 just means, hey,
Stephan, I speak HTTP version 1.1.
16:32 - Hopefully, you do as well.
16:34 - There can be other and newer and
older versions of the same thing.
16:37 - Notice down here, though--
whoops-- notice now here, though,
16:40 - that the hostname is
also in this envelope
16:42 - because it turns out that web servers
can do multiple things at once.
16:46 - And they can serve multiple domains.
16:48 - You don't need your own personal
unique server to serve a website.
16:52 - You can have tens, hundreds,
thousands of different websites
16:55 - all on the same server.
16:56 - And if any of you ever paid for your own
domain name or your own personal home
17:00 - page or the like, you are
probably paying someone
17:02 - for shared space on one
server or more servers,
17:06 - not for your own personal dedicated one.
17:08 - But again, this might implicitly
mean the same thing as this.
17:11 - Give me index.html.
17:14 - So what is it that actually
comes back from the server?
17:16 - The server, hopefully, responds
with a message that looks like this.
17:20 - It responds with confirmation of the
version of the protocol it speaks.
17:23 - That's like Stephan saying,
yes, I speak HTTP 1.1 as well.
17:27 - 200 is a numeric code that
signifies literally OK.
17:32 - All is well.
17:33 - I understood you.
17:34 - Here is the information you requested.
17:36 - And Content-Type, below it, is
a more technical way of saying,
17:39 - the type of content I'm handing
back to you in my own envelope
17:43 - from point B to point A,
or from Stephan to me,
17:46 - is in a language called HTML
that happens to be text.
17:49 - Why does it look like this?
17:51 - Humans, years ago,
just decided that this
17:52 - would be the sequence of
characters that computers literally
17:55 - send to communicate that information.
17:58 - So let's actually try this in one case,
maybe, for instance, with harvard.edu,
18:02 - and see what actually happens
to see what else we might see.
18:06 - So let me go ahead and open
up Chrome, or any browser,
18:09 - for that matter, that supports some
kind of debugging and diagnostics.
18:12 - And I'm going to do this.
18:13 - And you can access this
in different places.
18:15 - I'm going to go up to View,
Developer, and View Developer Tools.
18:20 - This is something that
comes with Chrome.
18:21 - You sometimes have to enable it
in Safari and other browsers.
18:24 - But almost every browser these
days has this capability.
18:27 - And you'll notice that this just
opened up a whole bunch of tabs
18:30 - at the bottom of my
screen here that I'm going
18:32 - to be able to use to
actually explore what is--
18:40 - did I kick something else?
18:42 - Apologies.
18:44 - It's back-- won't step on there.
18:47 - So what is this going to allow us to do?
18:49 - Well, notice there's a
lot of features here.
18:51 - It's overwhelming at first glance.
18:52 - But there's a tab here called Network.
18:55 - And it turns out that one of the
features Chrome gives to developers,
18:58 - which you now all are--
is software developers--
19:00 - is the ability to see what's going
on underneath the hood of a browser,
19:04 - to see what is inside of
these virtual envelopes
19:08 - that your browser has all
those years been sending
19:10 - from itself to servers elsewhere.
19:13 - So I'm going to go ahead and do this.
19:15 - I'm going to go ahead and actually
visit http://harvard.edu and hit Enter.
19:21 - And you'll see a whole
bunch of stuff happens,
19:23 - including the web page appearing
at the top of the screen.
19:26 - I'm going to ignore all of
this stuff at the bottom
19:28 - except for the very, very first request.
19:31 - If I zoom in on this, notice
that highlighted in blue
19:33 - here is the very first
request, harvard.edu.
19:36 - And if I click on that, I'm going to
see a little more information at right.
19:40 - And if I go scroll
down to what are called
19:42 - request headers, the lines of
text that were inside the message
19:46 - that my browser sent,
this is literally what
19:49 - my browser sent inside the
envelope, unbeknownst to me,
19:52 - when I visited harvard.edu.
19:54 - Thankfully, it confirms my
prediction earlier, get/http/1.1,
19:59 - because I requested
harvard.edu's home page.
20:01 - Host is harvard.edu.
20:02 - Then there's the dot, dot, dot, the
stuff that we don't particularly
20:05 - care about today.
20:06 - But let me go ahead and
look at the response.
20:10 - So this was my request.
20:11 - This was my hand going out to Stephan.
20:13 - Let's see what his or
the server's response
20:15 - is by scrolling up to this,
which is called response headers.
20:20 - Harvard's server, fortunately,
does speak the same protocol
20:24 - as me, 1.1 of HTTP.
20:26 - But apparently, Harvard
moved permanently.
20:29 - What does that mean?
20:31 - I went to http://harvard.edu, not there.
20:37 - Where is it?
20:38 - Well, there's a little
more information here.
20:39 - There's a lot of dot, dot, dot,
things we don't care about.
20:42 - But if we focus on one
that-- oh, location--
20:46 - where is Harvard now, apparently?
20:49 - Yeah, say--
20:50 - AUDIENCE: [INAUDIBLE]
20:57 - DAVID J. MALAN: Yeah.
20:58 - It looks like Harvard "moved"
permanently from http://harvard.edu to,
21:05 - and let me highlight it,
https://www.harvard.edu,
21:11 - with two notable changes.
21:13 - One, there's the www.
21:15 - And two, there's also what
that might catch your eye?
21:18 - S, which most of you probably
know these days means secure,
21:20 - and which implies encryption in
the spirit of Caesar and Vigenere,
21:24 - but much more secure than
those simple ciphers.
21:26 - The information is somehow
scrambled now when I'm communicating
21:29 - between myself and harvard.edu.
21:31 - So there's two decisions there.
21:32 - Harvard has decided that they
want to allow and, indeed, require
21:36 - users to visit their website
securely so that no one--
21:39 - no company, no government,
no family members--
21:41 - can necessarily see what is being
requested of Harvard's website
21:46 - because that is scrambled
information, much like using something
21:49 - like Caesar or Vigenere.
21:50 - And Harvard also, probably
for branding reasons,
21:53 - but also partly for
technical reasons, decided,
21:56 - we want you to think of our
website as www.harvard.edu.
22:00 - And it's a mix of marketing and
technical for a few different reasons,
22:04 - one of which is www we humans
just all know means website.
22:07 - And if you see harvard.edu--
22:09 - this is less true these days--
22:11 - might not necessarily imply as
obviously that this is a websites URL.
22:15 - Frankly, not too many years ago, even
advertisements and TV ads and printed
22:19 - ads and the like would even show http://
to really make clear to viewers that
22:24 - this is a web address.
22:25 - But gradually, as more and
more people get on the internet
22:27 - and understand technology
and URLs and the like,
22:30 - we can just start dropping the stuff
that is unnecessary clutter because all
22:33 - of us now know intuitively,
oh, harvard.edu-- it's
22:35 - probably a web address that I
can just type into a browser.
22:38 - And the browser or the server
will finish my thought for me
22:42 - and actually prepend the secure
URL or the www or the like.
22:47 - So we still haven't actually
found Harvard, it seems.
22:49 - So let's do this instead.
22:51 - Let me go ahead and zoom out
and visit a different URL.
22:54 - Let me go ahead and, again, go
to View, Developer, Developer
22:58 - Tools, Network Tab.
23:00 - And now let me visit that more verbose
URL, more precise URL, and hit Enter.
23:05 - Again, a whole bunch of
stuff gets requested--
23:07 - more on that some other time.
23:09 - But now, if I click on
the first such request
23:11 - and look at my response
headers, you'll actually
23:14 - see, albeit in a different format now,
that the status of this request is 200,
23:20 - which, recall, meant--
23:22 - AUDIENCE: OK.
23:22 - DAVID J. MALAN: OK.
23:23 - OK.
23:23 - So now these are two numbers
that, honestly, you've
23:26 - probably not really seen or cared
all that much about, 200 and 301.
23:29 - But odds are you've seen at least
one other number when visiting URLs.
23:33 - For instance, besides actually seeing
200 and 301, you've probably seen 404.
23:39 - Now, it apparently refers to Not Found.
23:41 - But more in real terms,
what does that mean?
23:44 - How do you induce that error?
23:46 - AUDIENCE: The site doesn't exist.
23:48 - DAVID J. MALAN: The site doesn't exist.
23:49 - You mistyped a URL.
23:50 - The web page doesn't exist.
23:51 - A system administrator just changed the
name on something or it's an old URL.
23:54 - Any number of reasons can mean
that the file was not found.
23:58 - That file might have been
index.html or any other URL.
24:02 - But all this time when you visited
a website and you've seen 404,
24:06 - it's not clear, frankly, why servers
have been bothering to tell us 404.
24:09 - Most people don't need
that level of information.
24:13 - But it derives from that HTTP
response, that first line
24:16 - of text inside the envelope coming
back from Stephan or the web server,
24:19 - more generally, that
says 404, Not Found.
24:23 - And that means the user
probably did something wrong
24:25 - or if the data has simply
disappeared from the server.
24:28 - And there's so many more
of these things as well.
24:30 - And in fact, you might get
responses, like we just
24:33 - did from Harvard, supporting not
just 1.1, but version 2 of HTTP.
24:37 - So just realize if you tinker
with your own Mac or PC,
24:39 - the messages might
look a little different
24:41 - based on your browser and the website.
24:42 - And that's just because
things are evolving over time.
24:44 - And versions are changing.
24:47 - But there's so many others of these.
24:48 - And this is just a
short, abbreviated list.
24:50 - 200 and 301 we saw.
24:52 - 404 you yourselves have probably seen.
24:55 - 401 and 403 generally refer
to you haven't logged in
24:59 - or you're just not authorized
to access information
25:02 - because it doesn't belong
to you, for instance.
25:05 - 500 you're all going to
experience before long--
25:08 - that 500 is Internal
Server Error, which is not
25:11 - so much the server's error
as your fault and my fault
25:14 - when we've written buggy code.
25:15 - So in the weeks to come,
not this week, but when
25:17 - we start writing Python code
and SQL to talk to databases,
25:21 - we're all going to
screw up at some point.
25:23 - And a browser will often see
a 500 error from a server
25:26 - if, indeed, there's a problem with code.
25:29 - 418 doesn't actually exist.
25:30 - This was a April Fools' joke,
I think, in, like, 1988,
25:35 - where some people with
a lot of free time
25:36 - wrote up a whole formal specification
for an HTTP status code, a 418,
25:40 - I am a teapot.
25:41 - And it's still kind of exists
in lore, internet lore.
25:46 - So those are just some of
the numbers you might see.
25:48 - But they're not all that technical if
you just know where to look for them
25:51 - and you know, as a developer
now, what they signify for you.
25:55 - Yeah?
25:56 - AUDIENCE: [INAUDIBLE]
26:00 - DAVID J. MALAN: Good question.
26:01 - What's the difference
between 200 OK and 302 Found?
26:04 - So 302, if you read
into the documentation,
26:06 - would actually tell you
that this also induces
26:08 - a redirect, whereby, just like 301,
when the browser gets a 301 or a 302,
26:14 - the browser should be redirected to
the new URL that we saw in the header,
26:18 - so to speak, called location,
colon, whatever it was.
26:22 - The difference is that
Moved Permanently means
26:25 - that the browser should remember
that this redirection is happening
26:28 - and stop bothering the server
with the same original quest.
26:31 - Just remember what the new URL is.
26:33 - 302 means found it,
but don't rely on this.
26:36 - Keep asking me again and again.
26:37 - So it's just a performance
optimization so you
26:39 - don't annoy the server unnecessarily
in the case of 301s, which just
26:43 - costs time and money, in some sense.
26:46 - So you might have heard
about this before--
26:50 - can only get away with this
Cambridge, not so much New Haven.
26:53 - Has anyone ever visited
safetyschool.org?
26:56 - AUDIENCE: Hey.
26:56 - DAVID J. MALAN: You're welcome
to on your laptop or your phone.
26:59 - So some very clever Harvard students,
I think, years ago bought this domain.
27:02 - Frankly, they've probably
been paying, like, $10 or more
27:05 - per year ever since just
to keep this joke alive.
27:08 - But it's wonderfully illustrative
because if we go back
27:11 - to Chrome or any browser--
27:13 - and let me go ahead and open up a
browser tab and go to safetyschool.org,
27:19 - Enter.
27:20 - Oh, interesting.
27:22 - Where did I get redirected?
27:24 - AUDIENCE: Hey.
27:24 - DAVID J. MALAN: Hey.
27:25 - So the more interesting question
for us is, how are they doing that?
27:29 - Well, let me go back
into the IDE for a--
27:31 - or actually, let me go into my
browser and open up a new tab--
27:35 - View, Developer, Developer Tools.
27:38 - Look at the Network tab.
27:39 - And now let me go ahead--
27:41 - whoops-- let me go ahead and
visit http://safetyschool.org.
27:45 - Enter.
27:46 - Scroll back up to the top,
where I see the first request.
27:49 - And you can see, more technically,
if this doesn't take the fun out
27:53 - of the joke, all these
Harvard students did
27:55 - years ago was configure this
domain name to return a 301,
27:59 - Moved Permanently to Yale University.
28:02 - Now, it's only fair, especially
since the Yale students are watching
28:05 - this live right now from New Haven--
28:06 - let's take a look at one other
site called harvardsucks.org.
28:10 - So this domain, too, does exist.
28:12 - Let me clear that screen and
go to http://harvardsucks.org.
28:19 - Enter.
28:20 - And this is an actual website.
28:22 - So not only did these enterprising
Yale students buy the domain name,
28:25 - they've also been hosting
the website for years since.
28:29 - There's a wonderful YouTube video there
that actually speaks to a very fun hack
28:32 - that they did some years ago at
Harvard-Yale, the football game.
28:35 - But you can see here, oh, that--
28:38 - so there's a minor one.
28:39 - So harvardsucks.org actually now
lives at www.harvardsucks.org.
28:44 - But then you actually stay there.
28:45 - And so I encourage you to go to this
site, as well as the other, for all
28:49 - your Harvard and Yale shopping needs.
28:52 - So that is HTTP.
28:55 - HTTP is the protocol, the set
of conventions, that browsers
29:00 - use when talking to web servers.
29:03 - And it's the protocol
that governs how those web
29:05 - servers respond to the browsers.
29:07 - We've quantized this in the form of
these virtual envelopes, which is just
29:11 - a physical incarnation of the zeros
and ones that are technically going
29:14 - back and forth across the internet.
29:15 - But it's embodied in my handshake
with Stephan, what's really happening.
29:19 - I initiate.
29:20 - He responds.
29:20 - And it's like a client-server
type relationship.
29:23 - So how do you actually
now do creative work?
29:26 - How do you make yale.edu?
29:28 - How do you make harvardsucks.org?
29:29 - How do you make CS50's own
website or Google or Facebook?
29:33 - Well, what really matters now what's--
29:34 - is what's deeper inside
of that envelope.
29:37 - In addition to these headers,
this textual information,
29:40 - like 200 OK or 301 Moved
Permanently, there's
29:43 - another language embedded inside
of that envelope, deeper down,
29:47 - called HTML, HyperText Markup Language.
29:50 - This is the language, which is also
text, in which web pages are written.
29:54 - And so if you've ever visited
a website on the internet,
29:57 - and I just noticed that Erin is doing
that on repeat, isn't she, what's--
30:01 - you're looking at is a
browser's rendering of HTML.
30:06 - So HTML is just text.
30:07 - And we're going to see it in a moment.
30:09 - The browser reads that text top to
bottom, left to right, much like Clang
30:12 - reads your C code top to
bottom, left to right.
30:14 - But rather than convert your text to
zeros and ones, what a browser does
30:18 - is interpret it line by line by line.
30:21 - And it does what you say.
30:23 - So if you say, hey, browser,
put Erin's photo on the screen,
30:26 - it is going to do that.
30:27 - If you say, hey, browser, write the
words "staff" in big black text,
30:31 - the browser's going to do that.
30:33 - If you tell the browser to lay out
a whole menu, it's going to do that.
30:36 - And we'll see, in just a moment,
how you convey those terms.
30:39 - HTML is not a programming language.
30:40 - It is, indeed, a markup language,
which means it just lays things
30:44 - out structurally and aesthetically.
30:46 - So the website here that we're looking
at has a bunch of images, all of which
30:51 - are what are called
animated GIFs, which are
30:53 - very much in vogue these days on Reddit
and phones and iMessage and the like.
30:58 - But those are just images, files,
that are actually being transferred
31:01 - from CS50 server to your browser.
31:03 - But if I go up to View, Developer,
and now View Source, and you can--
31:08 - could have been doing
this all these years--
31:10 - you can actually see the so-called
HTML that drives CD50's website.
31:15 - So this is all of the
HTML, and I'm deliberately
31:17 - scrolling fast through it, that
implements that CS50 staff page.
31:21 - And if we scroll all
the way to the bottom,
31:23 - you'll see that 1,008 lines
later is the web page done.
31:27 - But it's just text.
31:28 - And, in fact, let me scroll back
up to the top and just point
31:31 - out a few salient details.
31:33 - You'll see familiar
patterns in the examples
31:35 - we're about to start looking at.
31:36 - The very first line probably
is that, DOCTYPE HTML, which
31:40 - is like a little hint to
the browser that says,
31:42 - quite explicitly, hey, browser, the
document type you're about to see
31:45 - is indeed HTML.
31:47 - But the rest of the web page
follows a structural pattern.
31:50 - And you'll see that it's
already nicely indented,
31:52 - even though some of these lines
are a little long and are wrapping.
31:55 - But you'll see this convention, an open
bracket, which is an angled bracket,
31:59 - like a less than sign, the keyword
html, maybe some pattern like this,
32:04 - lang equals en-us--
32:05 - this sounds like language--
a US English, maybe--
32:08 - more on that in a bit-- and then this
close bracket, or a greater than sign,
32:13 - that completes the thought.
32:14 - Then inside of that HTML tag, so
to speak, indented beneath it,
32:18 - is this, the head of the web page.
32:20 - The head of the web page something
that you mostly can't see.
32:22 - It generally refers to the tab
at the top of the page and just
32:25 - invisible information.
32:27 - And if I scroll down further, we'll
see, really, the guts of the web page,
32:30 - which are in the so-called
body of the web page.
32:33 - So these things that I've
just been highlighting,
32:35 - albeit in a very big context
of a big, 1,000-line web page,
32:40 - are just called HTML tags.
32:41 - HTML is a tag-based language,
a markup-based language,
32:45 - where you just say what you want to
appear where you want it to appear.
32:50 - So what does that actually mean?
32:52 - Well, let's take a look
at a simpler example
32:53 - in the form of this slide, which
is perhaps the simplest web page
32:57 - that you can make, this one here.
33:00 - This is perhaps the simplest
correct, syntactically correct, web
33:04 - page you can write that's saying, hey,
browser, the type of document is HTML.
33:08 - Hey, browser, here's the
start of my HTML page.
33:10 - Hey, browser, here's
the head of my web page.
33:12 - Hey, browser, here comes
the title of my web page.
33:14 - Hey, browser, the title of this page
shall be, for the sake of discussion,
33:18 - "hello, title."
33:19 - But you could say literally
anything there that you want.
33:21 - But now things get interesting.
33:23 - And some of you have certainly seen
HTML before, and some of you haven't.
33:26 - But you can probably
just infer, even if you
33:28 - haven't seen HTML, what this tag
is doing because it looks the same,
33:32 - but yet a little different.
33:33 - So if this is saying, hey,
browser, here comes the title,
33:35 - what is this probably
saying, intuitively?
33:38 - AUDIENCE: Just ends.
33:38 - DAVID J. MALAN: Yeah.
33:39 - That's it for the title.
33:40 - Hey, browser, that's it for the title.
33:42 - So you might call this a
start tag and this an end tag,
33:45 - or an open tag and a close tag.
33:47 - Think about it however you want.
33:48 - But in HTML, there's
generally this nice symmetry.
33:51 - Once you start something,
you eventually finish it.
33:53 - And you do it in the right order.
33:55 - So you do-- you start tags in one order.
33:58 - And then you close them in reverse order
so that everything is nicely symmetric.
34:02 - And indeed, the
indentation, just like in C,
34:04 - technically doesn't matter at all.
34:06 - You could have a really, really ugly
web page with no whitespaces whatsoever.
34:09 - And it would still work fine for the
browser because it doesn't care--
34:12 - just much harder for us humans to read.
34:14 - So this convention is to
indent, just like in C,
34:17 - just so it's more clear what
the hierarchy or the nesting
34:20 - is, so to speak.
34:21 - This line here means, hey,
browser, that's it for the head.
34:23 - It's another close tag.
34:25 - Hey, browser, here comes
the body of the page.
34:27 - So much like head here, body
here, most of the page's content
34:30 - is, indeed, in the body of the web page.
34:32 - That's what you, the
humans, actually see.
34:34 - And mostly in the head, we'll
just see things like the title
34:37 - and just a couple of other
things in a little bit.
34:39 - The message inside this web page
is apparently, "hello, body,"
34:42 - then close body, close html.
34:44 - And that's it.
34:45 - So when I said earlier that
inside of these envelopes
34:47 - is just a whole bunch of
text, all I meant was this.
34:51 - This is what's inside of
this envelope just below
34:54 - the protocol information, the HTTP
information, that just said 200 OK
34:59 - or any of those other messages.
35:01 - So when the browser receives
this envelope, it opens it up.
35:03 - It reads it top to
bottom, left to right.
35:05 - And then it literally interprets
that file top to bottom,
35:08 - doing exactly what you tell it to do.
35:10 - So how do we go about
actually doing this?
35:12 - You can write HTML on any text program.
35:16 - You can write it in TextEdit,
on a Mac, on Notepad, on a PC.
35:19 - You can, technically, use
Microsoft Word or Google Docs.
35:21 - But that's out of context and bad.
35:23 - Those give you features you don't want.
35:25 - But you generally want a text editor.
35:27 - And we, of course, have a
text editor in CS50 IDE.
35:29 - So let me actually go there.
35:31 - I'm going to go into CS50 IDE.
35:33 - And I'm going to go up to File, New.
35:36 - And I'm going to go and preemptively
just save the file with the only file
35:39 - name I remember from earlier,
which was index.html.
35:42 - Just like C programs end in
files called something .c,
35:46 - HTML files often end in .html,
sometimes .htm, but often .html.
35:52 - So let me go ahead and click Save there.
35:54 - And now I'm going to go ahead and
do a-- type exactly that same code--
35:58 - so open bracket, exclamation point.
36:00 - And that's the only
exclamation point we'll expect.
36:02 - The first line is, unfortunately, a
little different from all the others.
36:06 - Then I'm going to do open
bracket, html, close bracket.
36:08 - And you'll notice that, just like with
C, the IDE tries to be a little helpful
36:12 - and finish your thought.
36:13 - So it already closed the tag for me.
36:15 - Now it's just on me to hit
Enter to move it into place.
36:18 - Now I'm going to-- what
came next inside the--
36:22 - uh-oh.
36:24 - What came next?
36:26 - The head-- so open bracket,
head, close bracket.
36:29 - Inside of head was--
36:31 - yeah, title.
36:32 - And then I think it just
said, "hello, title,"
36:34 - though I could call
that anything I want.
36:36 - Then below the head, but inside
the html tag still, was my body.
36:40 - So let me type that here.
36:41 - And I think I said, "hello, body."
36:43 - So-- bdoy, boday.
36:46 - OK, body-- save.
36:48 - So now I have a text file in the IDE.
36:52 - It seems to match up with what we
showed as a canonical page before.
36:56 - Now we need to load it in a browser.
36:58 - And this is a little
paradoxical because I'm,
37:00 - obviously, writing
this text in a browser,
37:02 - and yet I need the browser to read it.
37:04 - So this is just because the IDE,
Integrated Development Environment,
37:08 - that we've been using
is, itself, web-based.
37:10 - That's just an incidental detail.
37:12 - The fact that I have written this code
in a file now is what's important.
37:17 - It could be in the cloud as it is.
37:19 - It could be on my Mac.
37:19 - It could be on my PC.
37:20 - It could be on any other
server on the internet.
37:22 - The point is I need to
access this file somehow.
37:26 - And so it turns out that
we're not going to compile it.
37:29 - There are no zeros and
ones involved anymore.
37:31 - There is no machine code.
37:32 - We're going to leave it just like this.
37:33 - HTML is interpreted, literally,
line by line, top to bottom--
37:37 - no zeros and ones needed.
37:39 - But I am going to need to run my
own web server, not the IDE itself.
37:43 - I want to run, as the
developer, my own web server.
37:46 - What is a web server?
37:47 - It's like Stephan.
37:48 - It's just a program sitting
there, waiting and waiting
37:51 - and waiting for something to happen.
37:53 - And that's something is, presumably, a
request from a browser, at which point
37:56 - it will respond with a handshake or,
more specifically, with this file.
38:00 - So how do I do this?
38:01 - Well, in the IDE, we actually include
a free program called http-server.
38:07 - All of the software in CS50
IDE is free and open source.
38:10 - So we've simply chosen some of the
most popular packages, one of which
38:13 - is called, literally, http-server.
38:15 - And if I go ahead and hit Enter,
you'll see somewhat cryptic information
38:19 - at first.
38:19 - But let's see.
38:20 - It's starting up the http-server.
38:22 - It's serving dot slash.
38:23 - Well, what does dot mean?
38:26 - This folder.
38:27 - So just serve up the contents of
this current folder that I'm in.
38:31 - Now it's saying it's
available on this URL.
38:33 - And this URL's going to
vary by who is running this.
38:35 - If you're running it, you're
going to see a different URL.
38:37 - But what is interesting is the number--
38:39 - turns out that, because this is
my little own personal web server,
38:43 - it's not using port 80, which I
claimed earlier was the default.
38:46 - It's using a different convention, 8080.
38:48 - 8080 is just a human convention.
38:50 - It's not standardized in the same way.
38:52 - But this way, I can serve
files separate from the IDE
38:57 - because the IDE itself is
actually listening on port 80,
38:59 - or, technically, 443,
because it's using HTTPS.
39:02 - And I don't want to confuse my
files with CS50 IDE's own files,
39:07 - the actual user interface
that you're all familiar with.
39:09 - So, just like Stephan can hear from--
39:13 - say hello to multiple people and Google
servers can handle multiple services,
39:17 - so can my own IDE listen on
multiple ports, as they're called--
39:23 - 80, 25, 443, or, in this case, 8080.
39:26 - So what does this all mean?
39:27 - I'm going to go ahead and
literally click on this URL,
39:30 - open it in another tab on my browser,
and you'll see somewhat cryptic output.
39:33 - But this is just a succinct way of
saying, here is the index, the listing,
39:38 - of slash, which is now the
default area of my website.
39:41 - I've got two folders, source 5,
which is on the course's website--
39:44 - it's all of today's files in case we
want to look them up without writing
39:47 - them from scratch--
39:48 - and then the file I just
created, index.html.
39:51 - So if I go ahead now and click on
index.html, there we have it-- hello,
39:57 - body.
39:58 - And we don't see the tab just
because I full-screened Chrome.
40:00 - But if I actually remove
that full screening
40:03 - and zoom up to the top of the
tab, you see "hello, title" there.
40:06 - And if I go back into this
file, meanwhile, and I say,
40:10 - "hello, body, nice to meet
you"-- this one got weird--
40:15 - now I'm going to go
ahead and click reload.
40:19 - And now you see this.
40:20 - Let's go ahead and take
a five-minute break
40:22 - sooner, rather than later, so that
we can address the projector issue.
40:25 - And we'll be right back.
40:26 - So to recap, there are more tags than
just html and head and title and body.
40:30 - There's things that give us
images and sounds, certainly,
40:33 - and many, many, many other things.
40:35 - So let's take a look more manually
at just one or two other examples
40:38 - and then get a sense of the whole
menu of tags that might be available.
40:41 - Let me go ahead and
create a new file now.
40:43 - And I'll go ahead and
call this image.html.
40:45 - And in anticipation of
making a demonstration now
40:47 - that has an image, to
save time, I'm just
40:49 - going to go ahead and paste the
contents of the previous file.
40:52 - But I'm going to go ahead and
get rid of the body this time
40:55 - and start to actually
embed an image in here.
40:58 - Now, in advance, I've downloaded an
image of Yale's own bulldog, Handsome
41:02 - Dan, in a file called dan.jpeg.
41:05 - And I've uploaded it to
the IDE in the same folder
41:07 - that index.html is in and
now that image.html is in.
41:11 - And you can include an
image by using an img tag.
41:14 - But you have to specify to the
browser what the image you actually
41:18 - want to embed is.
41:19 - And so to do this, as you
may know, we have attributes.
41:23 - So just like the html tag, as we saw
earlier and can now see in the example
41:28 - here, has a language attribute
specifying English as the default
41:31 - language for this page to help things
like Google Translate and the like,
41:34 - so does the image tag get modified
by this attribute called source.
41:38 - It's just src and img because
those are more succinct
41:41 - representations of "image" and
"source"-- saves us some keystrokes.
41:45 - And now I can type in here dan.jpeg.
41:48 - And then, just for good measure--
41:51 - well, rather, I can then close the
tag using the corresponding angle
41:54 - bracket, the greater than sign.
41:56 - But whereas all of the
other tags thus far
41:59 - have a notion of starting and
stopping or opening and closing,
42:02 - the image tag doesn't because the
image is either there or it's not.
42:06 - There's really no conceptual
notion of starting an image
42:08 - and then eventually stopping an image.
42:11 - But let's add one other detail.
42:12 - It turns out that there's
yet other attributes.
42:14 - So you can have zero or more on any tag.
42:17 - For folks who have trouble
seeing content on web pages
42:21 - and, indeed, rely on
tools like screen readers,
42:23 - there's actually attributes that
can help in cases like that--
42:25 - turns out there's an alternative tag,
or alt, where you can actually say,
42:29 - "photo of Handsome Dan," which is a
textual description of whatever it
42:34 - is you're embedding in the web page.
42:35 - This way, someone who's
not sighted but who
42:37 - has a screen reader that
can read that to them
42:39 - can actually understand what
it is that's on the web page.
42:42 - So most folks wouldn't see that
unless you actually hover over it
42:45 - or have it spoken to you.
42:46 - So let me go ahead and save this file,
go back to the index of the web server
42:51 - that I ran earlier with
http-server, and now click on image.
42:54 - And voila.
42:55 - You'll see dan.jpeg
embedded in the web page.
42:58 - Of course, this web page doesn't
actually do all that much yet.
43:02 - And so suppose we actually wanted
to link to one page or another.
43:06 - Well, we can do that as well.
43:07 - Let me go back to the IDE, copy this
same code, just as a starting point,
43:11 - create a new file called link.html.
43:14 - And then in this file, we'll
start with the same contents.
43:17 - But let me get rid of
that body and simply say,
43:19 - for instance-- let's have
people visit Harvard.
43:22 - So I could say visit https,
for secure, www.harvard.edu/,
43:29 - or maybe even without the slash-- it
doesn't matter for the default page--
43:32 - period.
43:33 - Let me save this.
43:34 - Let me go back to the
index of the web server,
43:37 - reload so that I can see the new
file, link.html, that I created,
43:41 - and now click link.html.
43:43 - And voila.
43:45 - So it's a URL visually.
43:48 - But it's not actually clickable.
43:49 - But that's because the browser's only
going to do what you told it to do.
43:52 - And all I've implicitly told it to
do is display this black text here.
43:56 - If I actually want to make it
interactive, I need another tag.
43:59 - Well, it turns out in HTML, there's an
anchor tag, somewhat cryptically named.
44:04 - And it's also succinctly
written as a, for anchor.
44:06 - And with the anchor tag can you
anchor at this point in the page
44:09 - a link, or a hyper-reference, as it
was once called, to that specific URL.
44:14 - So that attribute, by convention,
is called href, hyper-reference.
44:18 - That is the destination
to which you want to link.
44:20 - I can now close that tag.
44:21 - But I now need to tell the
user where they're going.
44:25 - So I could just say Harvard, for
instance, and put my period out there.
44:28 - Save the file.
44:30 - Go back to the tab here.
44:31 - Click Reload.
44:32 - And now you'll see the dichotomy.
44:35 - I'm seeing one thing, Harvard.
44:36 - But if you hover over it,
and it's super small here,
44:39 - you can actually see, as a safety
check, in the bottom left-hand corner,
44:42 - typically, the URL that
you'll actually be led to.
44:46 - Now, as an aside, with this very,
very simple feature of HTML,
44:50 - you can actually
socially engineer people,
44:53 - as is commonly done with phishing
attacks, P-H-I-S-H-I-N-G.
44:57 - If you've ever gotten some spam, either
in your inbox or your spam folder,
45:00 - odds are someone's tried to ask
you for your username and password
45:04 - or for your money or
for your PayPal account.
45:06 - PayPal is especially
a common target here.
45:10 - But you can see how you can
very easily, unfortunately,
45:12 - trick and mislead people,
especially if they don't necessarily
45:15 - understand some of these fundamentals.
45:17 - Let me go back here, for
instance, and say here--
45:21 - well, there's nothing stopping me from
doing this little mischievous trick.
45:24 - I can change the href to
Yale, but the text to Harvard,
45:27 - thereby tricking someone.
45:28 - Ha ha.
45:29 - You're actually going to
Yale's website instead.
45:32 - But more maliciously, and in
these phishing emails or spams
45:36 - that you might have been getting
over the past several years,
45:38 - you could imagine typing anything
you want here, like paypal.com.
45:43 - And then here could be
www.SomeMaliciousWeb
45:47 - siteThatWantsYourMoney--
45:53 - hopefully, that does not exist-- .com.
45:55 - Save.
45:56 - Reload the page.
45:57 - And honestly, most
people, myself included,
46:01 - are not going to always paranoically
check where I'm actually going.
46:06 - I'm just going to click on a link.
46:07 - And voila.
46:08 - You might not notice the URL
bar changing because you're
46:10 - being whisked away to some website.
46:12 - And honestly, it's not all
that hard to recreate websites.
46:14 - In fact, just to really hammer this
point home, let me go to paypal.com.
46:20 - And using today's
primitives, notice that you
46:22 - can go to View, Developer, View Source.
46:25 - This is the HTML implementing
PayPal's website--
46:28 - looks good.
46:28 - Let me copy and paste that into,
say, a new file called paypal.html.
46:36 - Let me save that here.
46:38 - Now let me go back to my web
server, reload, open paypal.html.
46:42 - And voila.
46:43 - I have made PayPal.
46:44 - So it's not even that hard to mimic
where people think they are going.
46:49 - Now, intellectual property issues
aside, that I just copied and pasted
46:52 - someone else's website,
this is clearly not
46:54 - fully operational because what I
don't have access to their database
46:58 - and their code on the server and all of
the intellectual property and business
47:02 - logic, so to speak, that
actually makes PayPal what it is.
47:04 - But HTML, the point is, is purely
openly accessible by anyone.
47:09 - It's not encrypted.
47:10 - It's not zeros and ones.
47:11 - But it tends to be so aesthetic and
structural in nature that that's not
47:15 - really the juicy stuff in a business.
47:16 - But this technique can
certainly be abused in this way.
47:19 - So moving forward, just be more
mindful of this because most emails
47:22 - you get these days by
a Gmail or any tool
47:24 - are themselves implemented in HTML.
47:26 - Even when you're typing
out a Gmail message
47:28 - and have never even thought
about HTML, that email
47:31 - is actually being sent
underneath the hood as HTML.
47:34 - Why-- well, if you've ever used a
bulleted list or a numbered list,
47:37 - if you do boldfacing or italics or any
of those aesthetic features in Gmail
47:42 - or other programs, those
are implemented as HTML,
47:45 - but just using nice,
user-friendly interfaces.
47:47 - So you can just click icons.
47:49 - You don't have to think about open
bracket, something, close bracket.
47:52 - But we could do that.
47:53 - For instance, if we go ahead and
look at a few other examples--
47:56 - let me go ahead here and actually go
back to our very first one, index.html.
48:01 - And suppose I just want to
really draw attention to "hello."
48:05 - I can actually use the strong tag,
which implies bold, typically.
48:09 - Save that.
48:10 - Let me go back to the web server
that I had open a moment ago.
48:14 - Click on index.html after reloading it.
48:16 - And now it's a little
subtle because it's small.
48:18 - But you can probably see that
"hello" is indeed boldfaced now.
48:22 - So if you've ever clicked the B icon
in Gmail, that's all it's doing.
48:26 - Underneath the hood, Gmail is
taking your word, hello, and
48:29 - secretly putting open bracket, strong,
close bracket, and then the opposite,
48:33 - the close tag, after it.
48:35 - And that's what it's sending to
the recipient of that message.
48:38 - So what else can you do?
48:39 - Well, let me go ahead and do this.
48:41 - Let me go ahead and open up, say, a
few files that I created in advance.
48:45 - One is called paragraphs.html.
48:48 - And let me point this out first.
48:50 - So in paragraphs, I just have
three paragraphs of Latin text.
48:55 - And they are rendered,
for instance, as follows.
48:57 - If I go into source 5 and
I go into paragraphs.html--
49:01 - looks nice-- don't know what it says.
49:03 - And, in fact, it's
pretty much gibberish.
49:04 - But it's nice, three nice paragraphs.
49:07 - But notice how pedantic HTML is.
49:10 - I actually had to use another tag
to achieve those paragraphs, even.
49:14 - If I only had, very reasonably,
written these three paragraphs
49:18 - like you might in Google
Docs or Microsoft Word,
49:21 - it's just three paragraphs.
49:23 - Indent each.
49:23 - Hit Enter, Enter in
between them-- looks good.
49:25 - It's wrapping because it's a really
long paragraph off to the right.
49:28 - But that's fine.
49:29 - And I save this.
49:30 - And I go to paragraphs and reload.
49:33 - Notice that it all bunches together.
49:36 - Intuitively, why is
that happening, though?
49:40 - What's the logic behind this bug
now, albeit an aesthetic bug?
49:47 - Yeah?
49:48 - AUDIENCE: [INAUDIBLE]
49:51 - DAVID J. MALAN: Yeah.
49:52 - Those additional spaces are
not being accounted for.
49:54 - They're just being
pushed together because
49:55 - even though HTML does
respect one space--
49:58 - otherwise, everything would
be completely smushed--
50:00 - it ignores multiple spaces,
whether it's new lines or tabs
50:04 - or multiple hits of the space bar.
50:05 - And it only does, ultimately,
what you tell it to do.
50:08 - So unless you explicitly, with tags
in HTML, say, give me a new paragraph,
50:12 - that's it for this paragraph,
give me a new paragraph,
50:14 - else that's-- now that's
it for the paragraph,
50:16 - it's just going to
clump them all together,
50:18 - maybe separating with a single space,
which is clearly not the effect we
50:21 - want.
50:22 - So just remember that HTML is really
nit-picky when it comes to that.
50:25 - And much like in C, your code won't
compile if it's not quite right.
50:28 - In HTML, it will display.
50:31 - But it's not going to
display quite right--
50:33 - is the key there.
50:34 - Well, what other features
does this HTML have?
50:36 - The reality is-- we'll give you a
general conceptual overview of HTML
50:40 - today.
50:40 - We'll give you a taste
of some of the tags.
50:42 - But the reality is this,
too, is the sort of language
50:44 - that you can really learn
by doing and by looking
50:46 - at online references or texts that
actually summarize the various tags.
50:50 - But let's look at least a few more.
50:52 - Let me go into now headings.html.
50:56 - And you'll see this--
50:57 - turns out that there are tags
called h1, h2, h3, h4, h5, h6.
51:02 - These are very commonly
used on websites that
51:04 - have different headings, like big
and bold, a little smaller and bold,
51:07 - a little smaller and bold to do,
like, chapter and section headings.
51:11 - CS50's website is very hierarchical.
51:13 - If you look through the syllabus,
you'll see lots of different font sizes
51:16 - and boldfacing and the like.
51:18 - That derives from our using
these built-in heading tags.
51:21 - If I go ahead and open this in my
browser, we will see the effect.
51:25 - By default, h1 is big and bold.
51:28 - H2 is big, but not as big and bold.
51:30 - H3 is a little smaller.
51:31 - H4, 5, and 6--
51:33 - and this follows the paradigm
in academic papers and books
51:36 - that have chapters and sections
and subsections and the like.
51:39 - You just get this feature
for free from HTML.
51:42 - Well, what else is there?
51:43 - Well, if you actually
have tabular data, things
51:45 - you want to lay out in
rows and columns, well, it
51:47 - turns out that HTML supports tables.
51:49 - Let's glimpse at this, too.
51:51 - And if I go into table.html, in
my browser, we'll see this effect.
51:55 - It's not all that interesting.
51:57 - I kind of mimic the idea of a phone
pad, where these numbers are lining up
52:00 - in columns and in rows.
52:02 - But invisibly, this thing is
actually laid out with tags.
52:06 - If I go to the IDE
and look down in here,
52:10 - you'll see some copy-paste of before--
52:12 - html, head, and body.
52:14 - But then notice here.
52:16 - Hey, browser, here comes a table.
52:18 - And you see, albeit surrounded by
unfamiliar tags, probably, 1, 2, 3, 4,
52:21 - 5, 6, 7, 8, 9, and then
the symbols down there.
52:25 - So let's just infer, because the
reality is much of your learning of HTML
52:29 - and soon another language, we'll
see-- it will just be indirectly.
52:32 - If you're curious as to how some web
page is implementing some feature,
52:35 - you actually look at its source code.
52:36 - And you infer, by example,
how you could do the same.
52:38 - So take a guess.
52:39 - If this tag, effectively, says,
hey, browser here comes the table,
52:42 - this tag here, even if you've never
seen HTML, probably means table row.
52:47 - Hey, browser, here
comes a row in my table.
52:49 - This one's less obvious.
52:51 - But td, td, td stands for
table data or table cell.
52:54 - So, hey, browser, here comes a
cell, another cell, another cell,
52:57 - three of them in total.
52:59 - Hey, browser, that's it for this row.
53:01 - And then repeat the pattern.
53:02 - So here's where HTML just gets
a little mundane after a while.
53:05 - Once you see the name of the tag
and once you know what attributes,
53:08 - if any, it supports, you
just follow this pattern.
53:10 - That's it for HTML.
53:11 - There's start tags.
53:12 - There's end tags.
53:13 - And sometimes, they're not even
end tags, if they're not needed.
53:16 - And there's attributes.
53:17 - And that's HTML.
53:18 - Now, if you want to be sure
that your code is correct,
53:21 - you have a few options.
53:22 - Let me actually go ahead and open up,
for instance, hello.html from earlier,
53:28 - just so I have a simple example--
53:29 - or index.html from earlier.
53:31 - Let me go to validator.w3.org--
53:36 - turns out there's tools out there that
will just help give you feedback on
53:39 - whether or not your HTML
is valid, is correct.
53:42 - And this is useful because sometimes,
it might look OK to you on Chrome.
53:46 - But honestly, if your friend or family
member visits the exact same page
53:49 - on Edge or IE or Safari
or Firefox, it might not
53:52 - look the same because the companies
that make those browsers sometimes
53:56 - disagree on how to render HTML.
53:58 - And so if it's not 100%
correct, you're only
54:00 - incurring more risk that something
might render incorrectly.
54:04 - I went ahead and clicked Check
after pasting my code in.
54:06 - And this is good--
document checking complete,
54:08 - no errors or warnings to show.
54:10 - So when it comes time for Pset5
and you're dabbling with HTML,
54:12 - know that there are tools
out there, this one included,
54:14 - and we'll point you at it in the
spec, that just helps give you
54:17 - feedback on whether something is broken
so that you can, with more confidence,
54:20 - know that it's going to work OK.
54:24 - Well, let's make something a
little more interesting now.
54:26 - Let's re-implement Google, and not
by this little copy-paste trick,
54:30 - where we just copy their
HTML and use it ourselves.
54:33 - Let's actually now make a user
interface that uses Google, in some way.
54:37 - So Google, of course,
in all of its forms,
54:39 - ultimately has a text box into
which you can type information.
54:42 - And if I go ahead and
do this, it turns out
54:45 - that Google is generally going
to redirect me to a certain URL.
54:48 - If I search for "cats"
and hit Enter, notice
54:51 - I got redirected to a
pretty cryptic-looking URL.
54:55 - There's a lot of metadata in there.
54:56 - There's a lot of advertising
information these days and all that.
54:59 - But it turns out, and I know
this just from experience,
55:02 - I could distill this URL into this.
55:06 - And it will still work.
55:07 - So let me go ahead and hit Enter.
55:09 - Whoops.
55:09 - Let me go ahead and hit Enter after
simplifying this to question mark q
55:14 - equals cats.
55:15 - Enter.
55:15 - And indeed, I get the
same page of cats back.
55:19 - So what's going on?
55:20 - So the URL itself is
not all that remarkable.
55:23 - We've seen ww before.
55:24 - You've certainly used google.com before.
55:26 - This means it's secure.
55:27 - It's speaking HTTPS.
55:29 - All of this now is old hat.
55:30 - It's not requesting index.html
because Google is dynamic.
55:34 - The content is constantly changing.
55:36 - There's not some human whose job it is
to update Google's home page every day
55:39 - with HTML.
55:40 - So they, instead, have a
piece of software running,
55:42 - written in Python or C++ or Java or who
knows underneath the hood that is just
55:48 - listening at this address.
55:50 - So it doesn't have to be text
files that humans created.
55:52 - It can actually be a program.
55:54 - This one is called Search.
55:55 - And in just a week or
two's time, you, too,
55:57 - will write programs in a language called
Python that can do the same thing.
56:00 - But for now, we'll let
Google do the heavy lifting.
56:02 - And notice the question mark.
56:04 - If you ever see a question mark in
a URL, this means to the browser,
56:07 - here comes some user input,
something that the user probably
56:11 - typed into the form, just like
I did "cats" a moment ago.
56:14 - And then you're going
to see something equals
56:16 - something, which indicates
what the human typed in.
56:19 - Now, just because Larry and
Sergey, some 20 years ago,
56:21 - decided with google.com that this
text box that we saw a moment ago,
56:25 - the big box that's now positioned here--
56:28 - they decided years ago that
the name for that text box
56:30 - is going to be q for query--
56:32 - but you can call it anything you want.
56:34 - "Cats" is, obviously, what I typed in.
56:36 - The equal sign is just
associating the two together.
56:38 - So this URL just means to Google,
hey, Google, run the search program,
56:42 - passing in a user input name of
q whose value shall be "cats."
56:47 - And that is how Google knows what
to search for, for any of us.
56:51 - And frankly, I can search
for "dogs," not even just
56:53 - by typing the word "dogs" in here.
56:54 - I can be a little more precise
and type it into this query
56:57 - because I now know Google's URL format.
56:59 - And voila.
57:00 - Now I get search results
for "dogs" instead.
57:03 - But that's it.
57:04 - That's the basic building block
that's been happening all this time.
57:06 - And even though the URL a moment
ago was longer and uglier,
57:09 - that was just uninteresting detail.
57:10 - It's not the core business that
the search is actually providing.
57:14 - So what does this mean?
57:16 - I can actually now make my
own user interface for Google
57:19 - by using a few new tags as well.
57:21 - Let me go ahead and copy
this, as a starting point.
57:23 - Let me go ahead and create a
new file called search.html.
57:27 - Just to save time, I'll
type that in there.
57:29 - And I'll call this search.
57:30 - And I'm going to get
rid of the "hello" body.
57:32 - So I just have a starting point.
57:34 - That's just the same HTML I'm
copying and pasting every time.
57:37 - Well, it turns out in
HTML, there is a tag
57:39 - called form that will give
you a form for user input.
57:43 - And it turns out that inside of a form,
you can have different tags as well--
57:47 - specifically, an input.
57:49 - And inputs have names.
57:50 - So I can say name equals "q" to mimic
Larry and Sergey's decision years ago,
57:55 - the founders of Google.
57:56 - The type of this input is text.
57:58 - So it's not a button or a check
box or something like that.
58:01 - Those exist, too.
58:02 - It's just text.
58:03 - And then I want a Submit button.
58:04 - And I just know, from
having done this before,
58:06 - that I can get a Submit button
by doing type equals submit.
58:10 - And then the value of that
is going to be Search,
58:12 - which is the word I'm
going to see on the screen.
58:14 - You would only know
this by having seen it
58:16 - by someone else doing it,
looking at someone's source code,
58:18 - reading an online tutorial.
58:19 - It's not necessarily obvious.
58:20 - But the pattern is the same-- tag
name, attribute equals something,
58:24 - attribute equals
something, and so forth.
58:27 - Well, now let me go ahead and
save this, go into the web server,
58:30 - and reload the index.
58:33 - So there's my search.html.
58:35 - And it's not quite as
pretty as Google's.
58:37 - Let me zoom in so it's bigger.
58:39 - But I do have a text box.
58:40 - And I have a button
whose label is Search.
58:43 - But I don't know yet where to send it.
58:45 - I need one more attribute or two here.
58:48 - It turns out that I want this form
to take the action of sending this
58:52 - information to www.google.com/search,
the search program on Google's server.
58:58 - But I want it to use that
special verb we saw a moment ago.
59:01 - And again, this was
deeper in the envelope.
59:03 - The method I wanted to use is
get, in lowercase in this case--
59:08 - so a little low-level and technical now.
59:10 - But this just means that's the verb
you should use inside the envelope
59:12 - to get the web page.
59:14 - But that's it.
59:15 - I've told the web page
the action you should take
59:18 - is submit this form to this URL
using get, the method we saw earlier.
59:22 - Submit a parameter,
as it's called, called
59:24 - q, with whatever the human typed in.
59:26 - And then have it give
us a Search button here.
59:28 - So let me save this, go
back to my page, reload.
59:31 - And now let's go ahead and search for
"mice" this time and click Search.
59:36 - And voila.
59:37 - There we have a whole lot
of mice search results.
59:40 - But why, is the question?
59:41 - Well, all I've done is,
using HTML and an HTML form,
59:45 - is I've generated the
prescribed format of a URL,
59:48 - calling Google's Search program
with a input of q equals mice.
59:53 - And now, as an aside, if
I did take more inputs,
59:56 - they would be something like this--
59:57 - something equals value ampersand
something equals value.
60:01 - Ampersands just separate
these key-value pairs
60:03 - if you have multiple inputs on the page.
60:05 - But the principle is
ultimately the same.
60:08 - So it's pretty powerful.
60:09 - I've not implemented Google, per se.
60:11 - I've implemented the front
end, the user interface.
60:15 - And in future, we can we maybe start
to work on the logic behind the scenes.
60:18 - So any questions then on HTTP and
now the convergence with HTML?
60:25 - You feel comfy with HTML, because we're
about to move on to another language?
60:30 - Yeah?
60:31 - So all of my examples have looked
ugly thus far, except for PayPal.
60:34 - That looked pretty nice.
60:35 - But I just copied and pasted it.
60:36 - So how do we begin to style our
websites in a more compelling way?
60:41 - HTML, at the end of the day, is mostly
used for structure of a web page,
60:44 - just laying out the data that you care
about, the words that you care about,
60:48 - the images that you care about.
60:49 - But the aesthetics that
last miles, so to speak,
60:51 - of the really pretty colors and the
right font sizes and positioning
60:54 - things exactly where you want them--
60:56 - that is the job of another language
called CSS, Cascading Style Sheets.
61:00 - This, too-- not a programming language.
61:02 - It's entirely aesthetic in its nature.
61:05 - So let's go ahead and
take a look at an example.
61:08 - Let me go ahead and open up
the same web server as before,
61:11 - open up an example I saw early--
61:13 - that I made earlier called css0.html.
61:16 - Suppose that this is the home page
that I want to create for John Harvard.
61:20 - And notice I've got his name,
big and bold, at the top.
61:22 - And I've got a slightly smaller font in
the middle and a slightly smaller font
61:25 - below it.
61:26 - But these are just minor
font size differences.
61:28 - It's all centered in the page here.
61:30 - How would I actually make this website?
61:33 - Well, let me go ahead and
go into a new file here.
61:37 - I'll call it css0.html.
61:40 - Let me go ahead and paste my
starting point, as before.
61:42 - And I'll call this css0.
61:44 - And then in the body
of this page is where
61:46 - I'm going to go ahead
and lay out that content.
61:48 - So as I recall, I had John Harvard.
61:51 - And then below that, it was
"Welcome to my home page!
61:56 - Copyright," and funky symbol--
so I'll just do that for now--
62:00 - "John Harvard."
62:02 - Save.
62:03 - So that's css0.html.
62:05 - Let me go ahead and reload
it back from my server.
62:09 - And voila.
62:11 - So what's wrong, aesthetically?
62:15 - It's, obviously, all on one line.
62:16 - But why?
62:17 - How do I fix this, as before?
62:19 - Yeah?
62:19 - AUDIENCE: [INAUDIBLE]
62:21 - DAVID J. MALAN: Yeah.
62:21 - So I could add the paragraph
tags, just to put these
62:24 - all on individual paragraphs.
62:25 - And the IDE sometimes
can be a little annoying
62:27 - because now I'm going in
retroactively and adding this stuff.
62:30 - So it's trying to be helpful.
62:31 - But then I have to delete it.
62:32 - So sometimes, this autocomplete
can get in the way.
62:35 - But it's an easy enough fix-- open p.
62:38 - Let me move this over here
and move this over here.
62:42 - Save.
62:43 - Go back to the browser.
62:44 - It's not going to change on its own.
62:45 - I need to click Reload.
62:47 - And now-- better.
62:48 - It's a little ugly-- more
whitespace than I want.
62:50 - But it's closer, certainly.
62:52 - Let's clean up that copyright symbol.
62:54 - It turns out there's some keys you
just can't type on your keyboard.
62:57 - You could certainly
copy-paste it from elsewhere.
62:59 - But HTML, as an aside, supports
what are called entities.
63:02 - And these are numeric
codes that are sometimes
63:05 - written in hexadecimal, sometimes
written in decimal, depending
63:08 - on your preference.
63:09 - And it's just a weird number
that represents a symbol.
63:12 - You couldn't, otherwise, type.
63:14 - Watch as I reload now.
63:15 - So what happens to
that copyright symbol?
63:17 - Now it's the one you might expect--
63:18 - so minor detail.
63:19 - It's not all that interesting.
63:20 - But those do exist, as
well, for aesthetics.
63:22 - But this isn't quite what I want.
63:24 - And here is where CSS comes in.
63:25 - I can lay out the
structure of this page.
63:27 - Yes, I have my three
separate paragraphs.
63:29 - But they're not centered.
63:30 - Their font sizes are all the same.
63:32 - And there's weird gaps there.
63:34 - This is where CSS can help.
63:36 - So let me introduce a
few new tags instead.
63:38 - These aren't strictly paragraphs.
63:40 - It's not sentences
and sentences of text.
63:43 - This is kind of like
the header of my page.
63:45 - So let me actually
rename this to header.
63:47 - This is maybe the main part of my page.
63:49 - So let me rename this to main.
63:51 - And this is like the footer
of my page, I would claim.
63:53 - Now, it's a super simple website.
63:55 - But these tags exist.
63:56 - And in the most recent
version of HTML called HTML5,
63:59 - the world has started moving away from
generic tags, like p for paragraph,
64:04 - to more semantic tags that are a
little more descriptive that say,
64:08 - hey, browser, here's the
header of my page, annoyingly,
64:11 - not to be confused with the head of
your page, which is, like, the title.
64:14 - And, hey, browser, here's
the main part of my page.
64:16 - Here's the footer of my page.
64:17 - And we'll see why this
is useful, if only
64:19 - because it describes my page
a little more compellingly.
64:22 - But it turns out that any
HTML tag can have a style
64:25 - attribute, which we've not seen before.
64:27 - And if I want to alter the font size of
this tag, I can say, make this large.
64:33 - And down here, I can say, style
equals font-size, let's say, medium.
64:39 - And then down here, I can say
style equals font-size small.
64:44 - And let me save that, go
back to the browser, reload.
64:49 - And it's not centered yet.
64:50 - But now it's kind of big, medium--
64:52 - large, medium, and small, which
is what I intended the first time.
64:55 - So how can I actually add centering?
64:57 - Well, it turns out
inside of these quotes,
65:00 - you can use semicolons to
separate multiple ideas.
65:02 - If I put a semicolon here, I
can now say, text-align center.
65:07 - And let me go ahead and copy
and paste that here and here.
65:12 - Save.
65:12 - And notice the pattern.
65:14 - There's a keyword, a
colon, and then a value.
65:17 - A semicolon separates it.
65:19 - Then there's a keyword,
a colon, and a value.
65:22 - That's the same pattern
we're going to see.
65:24 - If I go back to the browser,
reload now, now we're on our way.
65:28 - Now it looks more like what
I intended it to look like.
65:31 - It took a little more effort.
65:32 - But thanks to CSS, I was able to do it.
65:35 - So what I've highlighted here and
what the IDE has highlighted in green
65:38 - is what are called CSS properties,
Cascading Style Sheets.
65:42 - CSS lets you deal with things
like centering and font sizes
65:46 - and colors and positioning and all
the aesthetics I alluded to earlier.
65:49 - And you just have to know
what these key values are.
65:51 - Honestly, I don't know
all of them, certainly.
65:53 - I always Google when I
want to know how could I
65:55 - do something with this type of tag.
65:56 - That's because there's a lot
of online free references
65:58 - that just shows you this.
65:59 - But they all follow the same pattern--
66:01 - key, colon, value-- maybe semicolon--
key, colon, value, and so forth.
66:06 - But even if you've never
written HTML before,
66:08 - you could probably argue
that I am not making--
66:12 - designing this very well.
66:14 - In C, too, you might have found fault
any time my instinct was to copy-paste.
66:20 - What is redundant in this example?
66:22 - AUDIENCE: [INAUDIBLE]
66:23 - DAVID J. MALAN: Yeah.
66:24 - I'm centering all three, which
honestly, it just looks a little stupid.
66:27 - It literally was copied and pasted.
66:29 - And that should always
rub you the wrong way.
66:31 - So Cascading Style Sheets--
66:33 - the first C in Cascading
Style Sheets, or the only C
66:37 - in Cascading Style Sheets,
stands for Cascading,
66:39 - which implies a hierarchy to it, too.
66:42 - So let me, actually, make a new example.
66:44 - Let me call this css1.html.
66:47 - Let me paste that same exact code.
66:49 - But it occurs to me that header and main
and footer are all children of body,
66:55 - if you will.
66:56 - They're indented inside.
66:57 - And you can-- you actually
can use family tree references
66:59 - in the context of HTML,
where header is a child
67:02 - of body insofar as it's inside of
her, tucked, indented, inside of it.
67:07 - So if these all have the
same parent, so to speak,
67:10 - let me actually erase
this from all three tags.
67:13 - And let me actually apply it
to the parent tag, saying,
67:17 - style equals text-align
center because cascading
67:22 - style sheets, indeed, cascade.
67:24 - So if you apply one property, like
aligning in the center, to the parent,
67:28 - it's going to cascade down on all
of the children nested inside.
67:32 - So let me go ahead and save
this, go back to the listing,
67:34 - and open up css1.html.
67:37 - And voila-- no aesthetic difference.
67:40 - But it's just better designed,
like 5 out of 5 for design
67:43 - now, but not necessarily because
this is a little ugly, honestly.
67:49 - And we've not had occasion
to do this yet in C
67:51 - because we only had one
language in C. It, generally,
67:53 - is frowned upon to combine one language,
like CSS, with another, like HTML.
67:59 - And they might look very similar.
68:00 - And they're all in the same context.
68:01 - But this gets annoying.
68:02 - And especially in the
real world, some people
68:04 - might be better with
aesthetics than others.
68:05 - Clearly, from my examples,
I'm not among those people.
68:08 - And so I might want to work with
a colleague or a friend who's
68:10 - much better at design and
colors and fonts than I am.
68:13 - And so I might want them to
work independently of me.
68:16 - I'll work on the structure of the web
page or, if you will, my final project,
68:19 - and let them actually contribute
more of the aesthetics.
68:22 - So how can we begin to
decouple these things?
68:24 - Much like in C, we, at
least, had header files.
68:26 - We could factor out commonalities.
68:29 - Well, it turns out we can do this
a little differently from before.
68:32 - Let me go ahead and open up an example
2 that I made earlier called css2.html.
68:39 - And let's scroll through
this for just a moment.
68:42 - Notice now that in the body of this web
page, I've introduced a different tag--
68:47 - rather, a different
attribute called "class."
68:51 - So it turns out that you don't have
to just copy and paste or type out
68:54 - manually all of these nit-picky
font size changes and text alignment
68:58 - changes.
68:58 - You can give them more
descriptive names.
69:01 - And arguably, it's a lot more
readable to me and my partner
69:04 - to read the word "centered" and
"large" and "medium" and "small"
69:08 - and not see all the stupid colons and
the semicolons and the distractions.
69:11 - That's the stuff that's not interesting
when writing any sort of code.
69:15 - So where did these words come from--
centered, large, medium, and small?
69:19 - Well, notice that they're all
values of a class attribute, which
69:23 - is-- allows for customization.
69:25 - Let me scroll up to the
head of my web page.
69:28 - And you'll see, and it's mostly
whitespace because I just
69:31 - kept hitting Enter to clean it up--
69:32 - notice that inside of my html
tag is, as before, my head tag.
69:36 - If I scroll down, there's
also still a title tag.
69:39 - But there's a new tag that I
alluded to earlier among the few
69:42 - you can put up there called "style."
69:45 - You can factor out to
the top of your page
69:47 - all of the stylizations
that you care about.
69:50 - And you can do it as follows.
69:51 - Notice here that I've literally written
the word "centered" with a dot in front
69:55 - of it, the word "large"
with a dot in front of it,
69:57 - the word "medium" with a
dot, "small" with a dot.
69:59 - Those define classes.
70:02 - So CSS lets you define
your own collections
70:05 - of configuration properties.
70:06 - And you can give them names,
just so it's a little more
70:09 - descriptive and user-friendly.
70:10 - So you can define class,
class, class, class.
70:12 - And then inside the curly braces, which
I've lined up here, just like in C,
70:16 - you can have one property, two
properties, 100 properties.
70:20 - But you can keep them nice and
orderly, away from all of your HTML, so
70:24 - that someone else can work on them
or just you can keep the aesthetics
70:27 - separate from the contents of your page.
70:28 - It's the notion of
separation of concerns.
70:30 - Keep the data separate from
the presentation thereof.
70:33 - AUDIENCE: [INAUDIBLE]
70:35 - DAVID J. MALAN: Is there a library
you can use that's done this for you?
70:38 - Yes.
70:39 - And we'll see a little teaser
for that in just a bit.
70:41 - So where are I using
these words, to be clear?
70:44 - Here, I'm saying give me
a class called centered,
70:46 - a class called large, medium,
and small, each of which
70:49 - have these respective
properties associated with them.
70:52 - And then down here, I
can just use those words.
70:54 - And I don't have to
get into the business
70:55 - of the semicolons, curly braces,
and all of that in my actual HTML.
71:01 - But it turns out I can do
this even more fancily.
71:05 - Let me open up css3.html,
another example.
71:10 - In this case, notice what I've done.
71:11 - Now my code is really getting
pretty, relatively speaking,
71:16 - or from one person's perspective.
71:18 - Now I don't have any attributes.
71:20 - This is just tighter.
71:21 - I'm using fewer characters,
fewer words, fewer lines of code.
71:24 - This is just, generally, a good thing.
71:26 - It's less work.
71:27 - It's less to maintain, fewer
opportunities for mistakes.
71:30 - But I've gotten rid of, it
seems, all of the aesthetics,
71:33 - but not necessarily, because
CSS, this second language,
71:37 - also lets you apply properties
not to tags by way of classes,
71:41 - but to the actual tags themselves.
71:44 - So if you only have one body, it is safe
to say, OK, CSS, apply to the body tag
71:50 - this or these properties.
71:51 - Hey, browser, apply to the header
tag this or these properties--
71:55 - to the main tag, the
footer tag, and so forth.
71:57 - So I don't even need to complicate
my world with small, medium, large,
72:00 - and so forth.
72:01 - I can just apply those
properties at the top of my file
72:04 - to the respective tag
names, whatever they are.
72:06 - And I could use the p tag.
72:07 - I could use the image tag,
the a tag, any of those.
72:10 - I can style them in different ways.
72:12 - In fact, if you wondered or started to
wonder how could you resize an image,
72:15 - you can apply CSS to
the image tag and say,
72:18 - make it this many pixels or this
many pixels, or something like that.
72:22 - Yeah?
72:25 - AUDIENCE: Is it bad design to
then keep pushing [INAUDIBLE]
72:34 - DAVID J. MALAN: Yes.
72:35 - Is it not bad design to just
keep adding more stuff to the top
72:38 - and pushing your actual
content down and down
72:40 - and down and just bloating the file?
72:42 - Yes-- which is a wonderful segue to our
fourth and final example here, which
72:46 - is css4.html.
72:48 - This example-- let me just zoom out.
72:50 - That's it.
72:51 - This css4.html has even fewer lines
of code and, indeed, no CSS in it
72:58 - whatsoever.
72:58 - This is just the website I care about,
the words and the data I care about.
73:02 - All of the aesthetic
stuff, while important,
73:05 - is relegated to a separate file that you
can probably infer is called css4.css.
73:13 - Unfortunately, and this was a stupid
design decision by humans years ago,
73:17 - the way you include CSS
from a separate file
73:21 - is, paradoxically, to use
a link tag, not the a tag,
73:26 - which probably should have
been called the link tag.
73:28 - But you have a relationship
of style sheet.
73:30 - So sometimes, humans
make poor decisions.
73:33 - This is one of them, I would say.
73:34 - But if you just copy-paste and
trust that this means, hey, browser,
73:38 - open up this file and use those
features from the file in this file,
73:42 - it's similar, in spirit, to
C's hash include mechanism.
73:46 - It just looks a little different.
73:47 - So what's in that file?
73:48 - Well, you can probably
guess, if I go into css4.css,
73:52 - it's just that same content.
73:53 - But I factored it out, as you notes--
wasn't the best design to keep it
73:57 - all together.
73:58 - So I can simply put it there instead.
74:02 - Any questions?
74:03 - Yeah?
74:06 - AUDIENCE: In the other one, the
fourth perfect one, the best one,
74:10 - what does "stylesheet" do?
74:13 - DAVID J. MALAN: Good question.
74:14 - What does stylesheet do in this example?
74:15 - Short answer is that just
makes clear to the browser
74:18 - that the relationship between this
file, css4.css, and this file,
74:24 - which is the HTML file, is
that of a "style sheet."
74:27 - So CSS, Cascading Style
Sheets-- it's a lot of words
74:30 - just to convey the idea of aesthetics.
74:32 - But that is your style sheet, literally.
74:34 - It's an actual file that ends in .css
that should be applied to this HTML.
74:39 - Yeah?
74:40 - AUDIENCE: [INAUDIBLE]
74:45 - DAVID J. MALAN: Better design why?
74:46 - AUDIENCE: [INAUDIBLE]
74:52 - DAVID J. MALAN: It's
really good question.
74:54 - So to summarize, is it-- isn't it--
74:56 - wouldn't that be better design, to have
one file with your HTML and your CSS,
74:59 - rather than two because
things can get misplaced?
75:01 - Now they're decoupled.
75:02 - There's not the same inherent link.
75:03 - Maybe, honestly.
75:04 - That is a reasonable concern.
75:06 - Reasonable people will disagree.
75:07 - Generally, I would say
that the programming
75:10 - world has decided that separation
of concerns is a good thing.
75:13 - So keep your HTML in one file,
your CSS in another file.
75:16 - Keep them in the same folder.
75:17 - And, frankly, if you go losing your
files in a folder all the time,
75:20 - the problem is probably a--
75:21 - is human problem, not a technical one.
75:23 - But you make a good point, too.
75:25 - And you could argue, quite credibly,
that you're just over-engineering this
75:29 - now.
75:29 - I like it better altogether.
75:31 - And you'll see in CS50's website
and Facebook and Google and others--
75:34 - sometimes, you do see
CSS together with HTML
75:36 - because humans decided
this does make more sense.
75:39 - But there are these mechanisms in
place to facilitate collaboration,
75:43 - to facilitate separation, so that you
can keep things a little more organized
75:47 - in separate files.
75:49 - Any questions then?
75:52 - So to recap where we're at,
because this is a lot quickly,
75:56 - HTTP is this protocol via which
you can just exchange information
75:59 - from A to B and B to A. HTML is
the language in which web pages are
76:03 - written, that structure of the web
page, and actually have your data.
76:06 - And CSS lets you fine-tune it.
76:08 - Now, I didn't fine-tune
it all that much.
76:10 - I just centered it and
changed the font size.
76:12 - But honestly, we can very quickly
get into the weeds of colors
76:15 - and positioning and all of that.
76:16 - But that we'll do in sections and
in Psets and in googling and looking
76:20 - at online references
that we'll point you
76:21 - to because it just all follows the
same patterns of tags with attributes
76:27 - and then CSS properties.
76:28 - So even though you've not seen the
whole vocabulary of CSS and HTML,
76:31 - you have seen the entire structure,
the fundamental concepts.
76:35 - So let's introduce then one
final piece of the puzzle
76:39 - and bring back to bear
some of our programming
76:41 - capabilities of the past several weeks.
76:44 - So it turns out that in
the world of HTML and CSS,
76:49 - you can actually introduce a
programming language, as well,
76:53 - to make your websites even more dynamic
using something called JavaScript.
76:57 - Many of you have taken
APCS and know Java--
77:00 - no relation.
77:01 - JavaScript was just a
marketing decision to them--
77:03 - call it something similar to
an already popular language.
77:06 - So JavaScript is a language
used in browsers, typically,
77:11 - to give you more control
over the users' experience.
77:14 - For instance, when you visit Gmail
these days and you get a new mail,
77:18 - it just appears magically
as a new row in your inbox.
77:21 - You don't have to reload or keep
clicking Refresh to see your new mail.
77:24 - It just appears magically.
77:26 - When you're using Google
Maps or something,
77:28 - you can just click and drag
and see more of the map.
77:31 - Back in my day, you have
to click a right arrow
77:33 - to go this way, a left
arrow to go that way.
77:35 - And the whole web page
would actually reload.
77:37 - But JavaScript gives you logic
and programming capabilities
77:41 - in your users' Macs and PCs and phones
that gets executed not on your server,
77:46 - but on their browser, which means you
can do many more things by running code
77:51 - on their computers.
77:52 - So what does this actually mean?
77:54 - Well, in JavaScript,
fortunately, we have
77:56 - a language that's super similar
to C. But it's interpreted top
78:00 - to bottom, left to right.
78:01 - The browser just reads the instructions
in JavaScript and just does them.
78:04 - There's no compilation for you.
78:06 - There's no zeros and ones.
78:07 - And so in that sense,
it's just easier than C.
78:09 - Also, it has no pointers, which
also makes it easier than C.
78:15 - But it gives us the
ability to alter a web page
78:19 - once it's been delivered to a user.
78:20 - And we'll see what we can
actually do with that capability.
78:23 - But first, let's compare and contrast.
78:24 - You'll recall a few weeks ago,
in week 1, when we introduced C,
78:27 - we pulled up some Scratch we
pulled up some C, just to show
78:29 - that the ideas are still the same.
78:31 - Let's do the same real quick here.
78:33 - So we went from Scratch to C. Let's
now go to JavaScript with variables.
78:37 - So in C, if you wanted to set
a counter to 0 a la Scratch,
78:41 - you would literally say
counter equals 0, semicolon.
78:43 - But you would have the
data type to the left.
78:46 - In JavaScript, the code
is almost the same.
78:48 - But you actually don't
specify data types.
78:50 - You, the programmer, don't worry
about ints or floats or strings
78:54 - or all of that.
78:55 - You do define the variable.
78:57 - And the keyword to use, though
there's several options that
78:59 - do slightly different things, is let.
79:01 - Add the thinking is let the counter
equal 0, please, if you will.
79:06 - But you don't specify the type,
even though JavaScript supports
79:09 - numbers and strings, and so forth.
79:11 - You just don't have to care
about them as much anymore.
79:14 - Suppose you want to update a variable.
79:15 - In Scratch, you would just
change the counter by one.
79:18 - In C, you would do counter
equals counter plus 1, semicolon.
79:22 - In JavaScript, you would
do the exact same thing.
79:25 - Code is identical.
79:27 - In C, you could also
write this more succinctly
79:29 - as counter plus equals 1,
semicolon, if you recall.
79:32 - If you don't, that's fine.
79:33 - This is just shorthand notation.
79:35 - In JavaScript-- same exact thing.
79:37 - In C, you could also
do counter plus, plus,
79:39 - semicolon to increment the value--
79:41 - in JavaScript, same.
79:43 - So this is what's nice about JavaScript.
79:45 - You already know much
of it just by nature
79:47 - of having spent so many
weeks in the weeds with C.
79:50 - Suppose you had an if condition,
like this-- is if x is less than y.
79:54 - In C, we would write
it like this at right.
79:56 - JavaScript syntax is the same.
79:59 - If you had an if-else,
syntax is the same.
80:02 - If else, if else--
80:03 - syntax is the same.
80:05 - If you want a forever loop,
syntax is the same, while true.
80:09 - If you want a for loop,
syntax is almost the same.
80:15 - Let needs to be used instead.
80:16 - So this is C because it says
int i equals 0, and so forth.
80:20 - That's a data type.
80:21 - JavaScript-- I just
claim doesn't worry--
80:24 - you don't need to worry
about those data types.
80:26 - So in JavaScript, you would
instead say "let" instead.
80:29 - But otherwise, the syntax is the same.
80:32 - So that's a nice starting
point because there's
80:34 - nothing new to learn syntactically.
80:36 - We just need to apply the same
logic that we saw in week 0 and 1
80:39 - since to HTML.
80:41 - So if this is a representative
web page, albeit super simple--
80:45 - this is the one I brought up earlier--
80:46 - how can we now start
thinking about this web page
80:49 - in a way that is conducive
to programming it
80:52 - and actually changing it dynamically?
80:54 - Well, let me propose that you think
of this same web page as just a tree.
80:59 - And we introduced trees just a week
ago, albeit in the context of C.
81:03 - And frankly, in C, they're
a headache because you
81:05 - have to wire things together using
pointers and nodes and all of that.
81:09 - Don't worry about that now.
81:10 - It's the browser's job to build
this in memory or RAM for you.
81:14 - And indeed, when I keep saying
that a browser, upon receiving
81:16 - an envelope with HTML, reads it
top to bottom, left to right,
81:19 - I haven't said what it does with it.
81:21 - What it essentially does with it
is it creates this data structure
81:24 - in memory for you.
81:26 - And it is Chrome or Edge or Firefox
or whatever browser you're using that
81:30 - itself is written in probably C
or C++ or some other language.
81:34 - Some other human at those
companies wrote the code
81:37 - that builds all of the
pointers and/or whatever is
81:40 - used to build this structure in memory.
81:42 - But this is what the browser has
in mind once it's read your HTML.
81:46 - And now that it's a data
structure in memory,
81:49 - you can make changes to
it, just like last week,
81:51 - we were inserting humans into our linked
list, changing the data structure.
81:54 - The browser can add more nodes or
more tags to the page, dynamically.
81:59 - So if you run with
this in your mind, when
82:01 - you get a new email in
Gmail, what is happening?
82:05 - Well, the web page, when
you first load it in Gmail,
82:07 - has a whole bunch of td tags, probably,
or tr tags, rather, for table row--
82:12 - table row, table row-- each of
which represents an email, perhaps.
82:15 - When you get a new email, the browser
is probably just adding another tr node
82:21 - to this tree because
notice the words here.
82:24 - Html lines up with this tag.
82:25 - Head lines up with this tag.
82:27 - Body lines up with this tag.
82:29 - So it stands to reason that when
you get another row in your inbox
82:32 - with another email, someone is
just adding a node to that tree.
82:36 - And that someone is
JavaScript, the language
82:39 - in which you can control the users'
browser even after they've loaded
82:44 - your web page for the first time.
82:45 - So what can we actually do with this?
82:47 - Let's start simple, as follows.
82:49 - Let me go ahead and just whip up, really
quickly, a file called hello0.html.
82:57 - And we'll do it, as before,
with our DOCTYPE html--
83:01 - my html tag here, my head tag here.
83:03 - My title here will be hello0.
83:06 - And notice I've been moving
these to separate lines.
83:08 - You don't strictly need to do
that-- just to keep the hierarchy.
83:11 - The whitespace, again doesn't matter.
83:13 - But I'll be consistent there.
83:14 - And in my body here, I'll say this
time just "hello, world" by default.
83:18 - So that's a pretty
simple web page as well.
83:20 - Let's, actually, now
make it interactive.
83:22 - All of my web pages thus far
have been static content,
83:25 - except for the Google one.
83:26 - But even that wasn't so much interactive
as it was the moment I hit Submit,
83:29 - it made the problem Google's
problem to deal with.
83:32 - Let's keep the user with me this time.
83:34 - Let me go ahead and do this.
83:36 - Let me get rid of this form here.
83:38 - Let me create a new file now
called hello1 as my next version.
83:43 - And let me go ahead and
paste that same code.
83:45 - But this time, let me have the
browser be a little interactive.
83:49 - Let me go ahead and have a form here
because what I want is a text box--
83:54 - type equals text.
83:56 - I'm not going to bother
giving it a name yet.
83:58 - And let me have another one
called type equals submit.
84:01 - Save.
84:02 - And let me go ahead and open up
my server so I can see this file.
84:07 - This, I said, was what-- hello1.html.
84:11 - So it's just a simple form.
84:12 - But there's no connection
to Google this time.
84:14 - Let me start to use
this form interactively
84:16 - because if I have the
ability to program,
84:18 - I bet I could take the users'
input and do something with it.
84:21 - So how do I do this?
84:23 - Well, let me propose first
that I want the human to type
84:27 - their name into this form.
84:28 - And then when they
click Submit, I want it
84:30 - to say "hello, David" or "hello,
Veronica" or "hello, Brian,"
84:32 - whatever the name actually is,
like some of our C examples.
84:35 - So you know what?
84:37 - Let me write that function first.
84:39 - It turns out that in the
head of your web page,
84:41 - you can have not just the
title and not just style,
84:44 - but also a tag called script
for JavaScript, for instance.
84:48 - And in this tag, I can
actually write code.
84:50 - And there's something a little
different in JavaScript.
84:53 - Instead of writing void greet
as the name of my function
84:57 - and then writing the body
of my function here and then
85:00 - saying void here, for instance,
JavaScript's a little looser.
85:03 - If you don't want to
take any arguments, just
85:05 - don't mention them-- no mention of void.
85:07 - If you don't have a--
85:08 - and actually, don't even
mention a return type.
85:10 - Just call it a function--
so slight difference
85:12 - from C. It's a little lazier.
85:14 - You don't worry about input types.
85:15 - You don't worry about output types.
85:17 - You just say, give me a
function called greet.
85:19 - Well, what do I want
this function to do?
85:21 - Turns out in JavaScript,
there's a function called alert
85:24 - that's just going to pop up a
window that says something in it.
85:27 - And I can pass, as an argument
to this JavaScript function,
85:30 - whatever it is I want it to say.
85:31 - So let's go ahead and say
"hello, world," semicolon.
85:36 - It's almost identical to C,
again, except that I'm saying
85:40 - function instead of a return type.
85:41 - And alert, apparently, exists.
85:43 - And there's no sharp include or any
of that that we typically had in C.
85:46 - It's just literally in
my browser right now.
85:49 - So let me go ahead and save that
and go down to the form tag here.
85:53 - And it turns out, on
the form tag, there's
85:55 - a special attribute called onsubmit.
85:58 - And as the word implies,
it says when the form
86:01 - is submitted, on the submission of this
form, go ahead and execute this, greet.
86:08 - So I can actually tell the browser,
on submission of this form,
86:11 - to call a function that I wrote.
86:14 - And now let me just
preemptively write return
86:16 - false for reasons we'll
come back to in a moment,
86:18 - just to make sure this actually works.
86:20 - Now let me go ahead and save this,
go to hello1.html, open that up.
86:27 - And let me just change the
title, for consistency--
86:31 - so hello1.html.
86:32 - And let me go ahead
and say David, Submit--
86:35 - hello, world-- not really sure what
the point of typing my name was.
86:39 - But it, at least, seems
to work as programmed.
86:42 - But obviously, where I'm going with
this is I want to display my name.
86:46 - So when the human has typed in their
name to the box and clicked Submit,
86:49 - that's triggering a
submission of the form.
86:51 - But wait.
86:52 - When the form is submitted,
I'm calling greet.
86:54 - So it sounds like it's
greet's job to figure out what
86:57 - the word is that the human typed in.
87:00 - So how can I do this?
87:01 - It's a little cryptic.
87:02 - And this is where now it
becomes JavaScript-specific
87:04 - and not C. Let me go ahead and
define a variable called name.
87:08 - And let me use this fancy
technique, document.querySelector.
87:15 - And then in here, I'm
going to need to specify
87:18 - what node in the tree I want to select.
87:21 - So I'm actually getting ahead of myself.
87:23 - Let's look at the HTML.
87:25 - At the moment, I've got a form tag
and two input tags, neither of which
87:30 - has a name.
87:30 - And I could fix that.
87:31 - But let me actually do
a different technique.
87:33 - HTML also supports unique identifiers.
87:36 - And you can give them
literally that, unique IDs.
87:39 - You can call it whatever
you want-- foobar, baz, xyz.
87:41 - I'm going to make it more
descriptive and call it
87:43 - ID equals name because
what I can now do up here
87:47 - in querySelector is
actually specify what
87:51 - it is I want to select from the tree.
87:54 - That tree is called a DOM, or
Document Object Model, verbosely.
87:59 - And I need to do one
last thing-- turns out,
88:01 - and you would only know
this from experience,
88:03 - that if "name" is the unique
identifier of an element
88:06 - and not the name of a tag, I actually
need to prefix it with a hash,
88:11 - unrelated to C's hash.
88:12 - But otherwise, this
function, querySelector,
88:16 - is going to think that
there's a tag called "name."
88:18 - So this means an ID
whose value is "name."
88:22 - It's a bit of a mouthful.
88:23 - But here we go.
88:24 - Once I select that node from the tree,
I want to get its value and set it--
88:29 - I want to get its value, semicolon.
88:32 - What is going on?
88:33 - First, recall from this tree here
that whenever the browser loads HTML,
88:38 - it has some HTML.
88:39 - It builds a tree structure therein.
88:41 - Each of those nodes is selectable via
this function called querySelector.
88:47 - What is document?
88:48 - Well, it turns out in
JavaScript, there's
88:49 - this special global
variable called document
88:51 - that refers to the whole
document, the whole web page.
88:54 - Built into that is a function
called querySelector.
88:58 - That dot notation is reminiscent
of C's struct syntax.
89:02 - So you can think of document as a
struct that represents the whole page.
89:06 - Inside of it is a
function, not just data,
89:09 - but a function, called querySelector.
89:11 - You're going to see this all over
the place in JavaScript, dots,
89:13 - because people-- the JavaScript
world is much more voluminous than C.
89:17 - So there's lots of functions inside
of other containers or structures.
89:21 - So with that said, this is
just saying, hey, browser,
89:24 - let me have a variable
called name and store
89:26 - the value of the node that has
a unique identifier of name
89:31 - and get that by using
this function, select it.
89:34 - That grabs the rectangle
from the picture
89:37 - and gives me access to the
value that the human typed in.
89:40 - Now, I'm not done with this.
89:41 - I need to actually display that value.
89:43 - And it's not going to
be correct to do this.
89:45 - Otherwise, I'm just going
to see "hello, name."
89:48 - So there's not this convention,
which we had in C. There's
89:51 - another way to do this.
89:52 - But I'm going to go ahead
and do it as follows.
89:54 - I'm just going to use concatenation.
89:57 - So this is not possible
in C. But in JavaScript,
90:01 - if you have a string on the
left and a string on the right,
90:04 - using plus will not add them
together, which would make no sense.
90:07 - It will concatenate them,
like glue one to the other.
90:12 - In C, how would you do this?
90:14 - It is an utter nightmare.
90:15 - In C, how would you do this?
90:16 - This would be an array of
characters on the left that
90:20 - has a null character at the end.
90:22 - This would be another
array of characters
90:23 - on the right with a null
character at the end.
90:26 - Neither is big enough to
fit the other as well.
90:28 - So you'd have to allocate
a new array of characters,
90:31 - copy these in, get rid of the backslash
0, copy these in, keep the backslash 0,
90:36 - throw those away.
90:38 - And then you have concatenated strings.
90:40 - That is so many damn
steps in C. And this
90:42 - is why no one likes programming in C.
And you don't have to do it anymore.
90:46 - In JavaScript, just
use the plus operator.
90:49 - That does all of that for you.
90:50 - But hopefully, you do have an
underlying appreciation of what the plus
90:54 - operator is actually
doing underneath the hood
90:56 - because the computer is
still doing the same work.
90:58 - The difference is this week onward,
we, the human, do less of that work
91:02 - ourselves.
91:03 - So plus is an abstraction
for all of that complexity.
91:06 - So if I didn't mess this up,
let me go ahead and save now.
91:09 - I'll go to the browser, reload,
and type in my name, David.
91:13 - Submit.
91:14 - And there we have it--
91:15 - hello, David.
91:16 - Let's do one more test.
91:17 - We'll try, say, Veronica.
91:19 - Submit.
91:20 - And voila.
91:21 - You'll notice that it's trying
to be helpful now, my browser.
91:24 - If I start D, then it
sees autocomplete, or V--
91:27 - well, forgot about Veronica, apparently.
91:29 - Veronica-- let's see if we reload.
91:32 - V-- that's weird.
91:34 - Don't tell Veronica Chrome
doesn't remember her.
91:37 - But we can turn that
feature off-- is the point--
91:41 - by actually doing things like this.
91:43 - And you would know this
from the online manual.
91:44 - Autocomplete equals off
turns off that feature.
91:47 - Autofocus also does something handy.
91:49 - If you've ever been to a web page
and you can just start typing,
91:52 - Chrome and macOS highlights it in blue.
91:54 - That just means give focus.
91:55 - Put the cursor there.
91:56 - If you don't have that, the
web page starts like this.
91:59 - And we've all visited websites, and
I think my.hardvard's among them,
92:01 - where you have to
stupidly click there just
92:03 - to start interacting with the page.
92:05 - That is not necessary.
92:06 - That's bad programming.
92:07 - Just using the tags can
fix that kind of thing.
92:11 - Questions?
92:12 - AUDIENCE: What if we have
two IDs with the same name?
92:15 - DAVID J. MALAN: What if we have
two IDs with the same name?
92:17 - You should not.
92:18 - That is human error.
92:19 - An ID, by definition, must be unique.
92:21 - And if you have two by the
same name, the human messed up.
92:26 - And what it does--
92:27 - I don't know what the behavior is.
92:28 - It's probably unofficially not
documented or maybe it picks the first.
92:32 - Maybe it picks the last.
92:33 - I don't know.
92:33 - But you shouldn't rely on it, anyway.
92:35 - Good question.
92:36 - Good corner case.
92:36 - Other questions?
92:40 - Let me jump ahead to one example.
92:42 - And then we'll come back to
a fancier version of this.
92:45 - Let me open up a program
that's in today's source 5
92:49 - directory called background.html.
92:51 - It's got some familiar letters, which
probably stand for red, green, blue,
92:56 - probably.
92:57 - These are three buttons.
92:58 - And we've seen buttons.
92:59 - We saw the Search button and the Submit
buttons that I've created before.
93:02 - But using JavaScript, I can
do fun things like this.
93:05 - If I click on R, the
web page just changed.
93:09 - G, B, R, G, B-- this is now interactive.
93:13 - If you were just writing HTML and CSS,
you'd have to pick one of those colors
93:16 - and stick with it.
93:17 - But with JavaScript, you can respond.
93:19 - And that's because a
browser has lots and lots
93:21 - of events happening all the time.
93:24 - Events include clicks or mice moving
or dragging or, in a mobile device,
93:30 - touching.
93:31 - So there's lots of things that a
human can be doing with a web browser.
93:34 - And you can write code that responds
to all of those kinds of events.
93:38 - And so let me actually go ahead
and open up background.html
93:43 - and show how this is working.
93:45 - So for the most part,
it's just HTML at first.
93:47 - Here's the html tag, the head tag,
the body tag, and three new tags.
93:52 - This is another way of creating buttons.
93:53 - And again, this isn't interesting.
93:55 - You learn this in the
online reference or manual.
93:57 - And it just tells you,
here's how to use a button.
93:59 - It follows the same paradigm--
tag name, attribute equals value.
94:02 - The label is just going
to be R, G, and B.
94:04 - And now this is where things get
a little scary-looking at first.
94:08 - But that's it.
94:09 - There's just lines of code
here inside of the web page.
94:13 - Now, let's walk through
this line by line,
94:15 - even though it's a
little verbose at first.
94:17 - So this first line here
says, hey, browser,
94:20 - give me a variable called body.
94:22 - And store, in that variable, the node--
94:24 - the rectangle, so to speak--
94:27 - that has the name body.
94:28 - So that is, pluck that
rectangle out of the picture
94:30 - so that I have direct access to it.
94:32 - Why-- because I'm going to
manipulate it in just a moment.
94:34 - This is the scariest the
JavaScript will look for now.
94:37 - Document.querySelector
hash red-- could someone
94:41 - translate that into just English?
94:44 - What's that doing for me?
94:47 - AUDIENCE: Giving the ID
of red that you just--
94:49 - DAVID J. MALAN: Yeah.
94:50 - Be a little more verbose.
94:53 - Someone else?
94:56 - Hey, browser, select for me the
node whose unique ID is red.
95:02 - That's fine.
95:02 - Give me access to that node,
the structure in memory.
95:06 - And this is where it's a little weird.
95:08 - So it turns out that every tag
in a web page or node in a tree--
95:14 - the DOM tree, so to speak--
95:15 - Document Object Model-- can have
event listeners associated with it.
95:20 - And you would only know
this from the documentation.
95:22 - But if you literally say,
go into this structure,
95:24 - this node, that
represents the red button
95:28 - and get its on-click value,
what's cool with JavaScript,
95:33 - even though the syntax is
a little scary-looking,
95:35 - is you can associate a
function with that event.
95:38 - So this is saying, hey, browser,
when the red button is clicked on,
95:42 - call the following function.
95:45 - And what's new in JavaScript here is
that this function, at the moment,
95:48 - has no name, which is weird.
95:50 - You could technically do this in C.
But we always gave our functions names.
95:53 - But you don't really need
to give a function a name
95:56 - if you don't need to
mention it ever again.
95:59 - And the detail that's
happening here for us is this.
96:01 - This says, hey, browser, on
click, call this function.
96:05 - What does that mean in real terms?
96:06 - Hey, browser, call all
of the lines of code
96:09 - in between this open curly brace
and this close curly brace.
96:12 - So even if you're not
comfy with the syntax,
96:14 - it just literally means execute
the following lines of code
96:16 - when this button is clicked.
96:18 - This is what's known as an anonymous
function insofar as it has no name.
96:22 - It's just function,
open paren, close paren.
96:24 - So you can probably infer what
it's doing on this line here.
96:28 - Let me highlight this line in blue.
96:30 - It's a little cryptic.
96:31 - And again, I promise that you're
going to see lots of these dots.
96:34 - But this is saying, hey,
browser, modify the body,
96:38 - or specifically, the style of
the body, and specifically,
96:42 - the background color of the style
of the body, to be, of course, red.
96:48 - And the rest of the code is copy-paste
for now for green and blue as well.
96:52 - So what is happening?
96:53 - Every time you click on
one of those buttons--
96:55 - R or G or B--
96:57 - literally, this line of code is getting
executed that I've just highlighted
97:02 - or this line of code is getting
executed or this line of code
97:05 - is getting executed.
97:06 - So even though the syntax
is, yes, admittedly, way
97:09 - more complicated than we've seen thus
far, the idea is relatively simple.
97:13 - Select the button.
97:14 - Tell it, on clicking,
to call this function.
97:17 - And it's fine early on if
you just copy and paste this.
97:19 - And for Pset5, you won't
have to use any of this code.
97:22 - This is in-- preemptive
look at what you can
97:25 - do with an eye toward fancier features,
like final projects and beyond.
97:31 - Any questions then on
this background example?
97:34 - Yeah?
97:34 - AUDIENCE: Why did we use the pound
symbol for red, green, blue, and not
97:40 - for body?
97:41 - DAVID J. MALAN: Good question.
97:41 - Why do we use the pound symbol for
red, green, and blue, but not for body?
97:44 - If you look at the HTML,
you'll see the following.
97:47 - Body is, apparently, the name of a tag.
97:49 - So that's why we just selected "body"
with that line of code around here.
97:53 - However, red, green, and blue
are not the names of tags.
97:56 - They are the unique identifiers,
values that I just came up with.
97:59 - I could have called it x, y, z.
98:00 - But I chose more descriptive terms.
98:02 - So whenever you want
to reference or select
98:04 - a node who-- that has an identifier,
you use the hash instead.
98:08 - That's all.
98:09 - These are just human conventions
that are non-obvious unless you
98:12 - were told what they all mean.
98:14 - Let's try one other
example with JavaScript.
98:16 - It's not uncommon on news
websites to have the ability
98:19 - to change the font size,
which you can, actually,
98:21 - do on your Mac and PC sometimes
using keyboard shortcuts.
98:24 - But sometimes, it's built
into the web page itself.
98:26 - Let me go into, for instance, size.html.
98:30 - And here's some Latin
text or Latin-like text.
98:32 - And notice that it has
a little select menu.
98:34 - Normally, when you have a select
menu, you select something.
98:37 - And then you click Submit.
98:38 - And then the server deals with it.
98:39 - The information goes somewhere.
98:41 - But you don't need to do that.
98:42 - You can actually make little menus
interactive, just like text boxes.
98:46 - Suppose I want to make
this text a little smaller.
98:48 - I can do that.
98:49 - I can choose extra small.
98:51 - I can do extra-extra small or
I can do extra-extra large.
98:55 - And so what's going on here?
98:57 - Well, just like there are
click events in a browser,
98:59 - there are also change
events or selection events.
99:02 - Just anything that can happen on
the web page you can listen for.
99:06 - So let's take a look at
this code, for instance.
99:08 - We've not seen this tag before.
99:10 - But we have seen paragraph.
99:11 - And there's a paragraph of Latin.
99:13 - And then there's a select tag,
which gives you a select menu.
99:16 - A dropdown menu is called
a select menu in HTML.
99:18 - And here's how you have
all of the options.
99:20 - Now, there is a bit of duality here.
99:22 - There's what the human sees, which is
between the open tag and close tag.
99:26 - And then there's this value, which
the computer sees-- but more on that
99:29 - another time, when we get to Python.
99:31 - But this just gives me that
whole menu of size options.
99:34 - And if I scroll down now, notice
I have a script tag down here.
99:37 - And in this script tag, I have
document.querySelector "select"
99:41 - because I want to select the name,
the tag whose name is select.
99:45 - And then there's this event, onchange.
99:47 - And you'd only know this
from the documentation.
99:49 - But like onsubmit, onchange is
called any time you change that menu.
99:51 - What function should get called?
99:53 - Well, this one here, which
is an anonymous in the sense
99:56 - that it has no name.
99:57 - And go ahead and do this.
99:59 - Select from the document the body tag.
100:01 - Get access to its style.
100:03 - And change its font size to, and
this is funky here, this.value.
100:09 - So what did I do here?
100:11 - Let me do this, no pun intended.
100:19 - This refers to whatever
element in the web page
100:24 - induced this function to be called.
100:28 - So this is-- you can think of as a
variable, a special variable, that
100:31 - always refers to whatever
element you are listening to.
100:34 - And so this.value just saves me some
keystrokes because I don't-- you need
100:37 - to use document.querySelector
to get at this select menu.
100:42 - But we'll see this again,
perhaps, down the road.
100:47 - Questions?
100:48 - And let me point out
one thing that's stupid.
100:51 - This here, fontSize,
looks different from CSS.
100:54 - In CSS, what did we call this?
100:59 - Do you remember?
101:01 - We did font size small, medium, large.
101:05 - It was font-size.
101:08 - So this was left hand
not talking to right hand
101:10 - when these things were invented.
101:11 - It turns out that dash is
JavaScript means what, maybe?
101:16 - Minus or subtraction.
101:17 - And so this syntax just breaks
in the context of JavaScript.
101:20 - So what did humans do?
101:21 - They decided that any time you
have a CSS property that's word,
101:25 - dash, something, get rid of the dash.
101:27 - Capitalize the next word.
101:29 - And that's now the mapping in
JavaScript-- so just a simple heuristic
101:31 - there that you can perhaps keep in mind.
101:34 - Let's take a look, perhaps,
at one final value--
101:38 - oh, how about two final values?
101:40 - Let's go ahead and do
this with blink.html.
101:44 - So back in the day, when the
web was first being invented
101:47 - and HTML was in its infancy,
there was a wonderful tag
101:51 - that was probably on my
own personal home page
101:53 - called blink that literally did that.
101:55 - You could have a tag that was open
bracket, B-L-I-N-K, close bracket,
101:59 - put some words, then close the tag, and
then your web page would just do this
102:03 - to all visitors, which humans
eventually realized, well,
102:05 - this is dumb and really annoying to
look at-- bad user experience, or UX.
102:10 - And so they took it away.
102:11 - It's one of the few tags, I think,
from HTML that was actually removed
102:14 - by committee, as opposed to added.
102:16 - There was also marquee at the time, too,
that-- like a theater sign would just
102:20 - scroll words across your page.
102:22 - So you've probably seen websites like
this that recreate them in some way.
102:26 - But you can do this with JavaScript.
102:27 - Think about this logically.
102:31 - We know how, in code, we can
change the style of an element.
102:33 - We've not seen how to do this yet.
102:35 - But you can make an element
show or hide, show or hide.
102:39 - Turns out in JavaScript,
you can use a timer.
102:41 - You have access to a clock.
102:42 - And you could actually write
code that says, you know what?
102:45 - Every half-second, call this function.
102:46 - Call this function.
102:47 - Call this function.
102:48 - Call this function.
102:49 - And what that function does is
it changes the style of the page
102:53 - to hide or show, hide or show.
102:56 - Now, this used to be
built into browsers.
102:57 - But now you can recreate it
with something like that.
103:00 - And I'll wave my hand
at what the code is.
103:02 - But that's just one feature there.
103:04 - Let's look at one final example,
though, that's a little creepy.
103:08 - Here's the code first.
103:10 - And this is called geolocation.
103:12 - This is all the rage now
with apps like Uber and Waze
103:15 - and Find My Friends on
iPhone and the like.
103:18 - Here is relatively little
code that will figure out
103:20 - where your user is in the world.
103:22 - Now, it's a bit of a mouthful here.
103:24 - But it's mostly this file,
html with a script tag.
103:28 - But there's this other
special global variable.
103:30 - And we won't use this much.
103:31 - And indeed, you might not ever use it
if you don't care about this feature.
103:34 - But it's called navigator,
for historical reasons.
103:36 - And navigator has a
feature called geolocation.
103:39 - And geolocation, which stands
for locate people geographically,
103:42 - has a function called
getCurrentPosition.
103:45 - And for reasons we
won't really get into,
103:46 - it takes a function as an argument.
103:48 - This is a very common
JavaScript paradigm,
103:49 - but more on this toward
final projects, perhaps.
103:52 - This line of code is going to
write to the document the user's
103:56 - latitude and, if we scroll to
the right, their longitude.
104:00 - So this is where it gets creepy.
104:01 - So if you were to use this code in
your websites and a user were to visit,
104:06 - like I will now, and they click
the link, they will be prompted,
104:09 - do you want the website
to know your location?
104:12 - Sometimes, you might say yes.
104:13 - Sometimes, you might say no.
104:14 - Frankly, most of us probably
just click Allow instinctively
104:16 - without really thinking about this.
104:17 - But there's where I am, apparently.
104:20 - Let me go ahead and highlight that.
104:22 - Let me go to maps.google.com because
whatever website you just visited,
104:26 - whether it's Facebook or CNN or--
104:28 - a lot of news websites
want to know where you are.
104:30 - If you go to like, what, fandango.com
or the like for movie tickets,
104:33 - they might want to know where you are.
104:35 - Well, you're giving them
very precise information.
104:37 - If I go ahead and search for
these GPS coordinates on Google,
104:40 - that's not where I am.
104:43 - What the hell?
104:45 - [LAUGHTER]
104:48 - Why are we in Oklahoma?
104:50 - [LAUGHTER]
105:00 - I don't understand what's going on.
105:03 - This was not part of the demonstration.
105:04 - This was going to be the big climax.
105:06 - Let's turn off the
wired internet in here.
105:08 - And apparently, we're going
through Oklahoma today.
105:11 - Let's turn on the Wi-Fi,
which will just give me
105:14 - a different IP address, which
is a wonderful way to tie
105:16 - the start of the lecture together.
105:18 - If I wait a second, it should go green.
105:21 - Come on-- no IP address.
105:22 - Now these words might
make a little more sense.
105:24 - Come on.
105:25 - Give me an IP address.
105:26 - Come on.
105:28 - Harvard-- there we go.
105:30 - There's my IP address.
105:31 - Let's reload.
105:36 - [LAUGHTER]
105:40 - We'll email the IT
people about this later.
105:43 - But all of my internet--
105:45 - what this means is my--
105:47 - no, this is really weird.
105:49 - We have a lot of footage to
cut out of today's video.
105:51 - So what this does is,
with low probability,
105:56 - tell you where your users are in
terms of latitude and longitude
105:59 - so that you could geolocate them, figure
out what the local movie theaters are
106:02 - or what the starting
times of stores are,
106:04 - give them directions to
places, and the like.
106:06 - And while that was supposed to
be the big climactic finish,
106:08 - apparently, none of this works.
106:10 - Today was completely wrong.
106:11 - We're in Oklahoma.
106:12 - But let's end here today.
106:13 - I'll stick around for questions.
106:14 - We'll see you next time.