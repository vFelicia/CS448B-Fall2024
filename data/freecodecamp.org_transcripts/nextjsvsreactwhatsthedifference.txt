00:00 - what's the difference between nextjs and
00:01 - react well that's what you'll learn in
00:04 - this course from ANA Kari she helps
00:07 - developers level up their careers and
00:09 - she'll help you level up in this course
00:11 - nexs is a framework versus react is a
00:14 - library you can't necessarily compare
00:16 - the two as it's not Apples to Apples
00:18 - comparison but you may always wonder
00:20 - what would life look like without a
00:22 - framework what does a framework provide
00:24 - and should you go with a framework or
00:26 - not so in this specific course you will
00:28 - learn next year and the power that it
00:31 - provides us as it is a framework and
00:33 - compare that to react alongside vat and
00:36 - vat is a really powerful front end tool
00:39 - towards the end of this course you will
00:40 - learn what the difference between a
00:42 - framework and a library is you will
00:44 - learn different data fetching mechanisms
00:46 - and knowing which one to pick for your
00:48 - project and for your page you will learn
00:50 - different rendering strategies you will
00:52 - learn how to build a performance app and
00:54 - what goes behind the scenes of building
00:56 - a performant app you will also learn
00:58 - search engine optimization which is CEO
01:00 - and also how should you get started with
01:02 - learning react all of this will be
01:04 - covered in this specific video along the
01:07 - way you will also pick up skills with
01:09 - taen CSS and also Shad CN UI Library
01:12 - which is getting really popular these
01:14 - days alongside learning complex topics
01:17 - in depth in react wheat and nextjs
01:21 - everything that you need is right here
01:23 - and I will be walking you through each
01:24 - step one by one so what are we waiting
01:27 - for let's get started now if you are
01:29 - interested in following along in getting
01:31 - all the visuals as well as all the links
01:34 - that I have shared in this specific
01:35 - course then check out this specific link
01:38 - this is essentially a cheat sheet and a
01:40 - visual explanation of all the key next
01:42 - year's react and readed Concepts that
01:44 - I'm sharing in this specific course so
01:46 - if you are interested check out the link
01:48 - in the description or as a pin comment
01:50 - for downloading the specific cheat sheet
01:52 - now this cheat sheet is really good it
01:54 - has all the visuals and links that I've
01:57 - shared in the specific course alongside
01:59 - GitHub so you can follow along as I
02:02 - teach this course so check out if you're
02:03 - interested now whenever you are ready to
02:05 - level up your next year skills I have
02:07 - some good news I'm running a exclusive
02:10 - Hands-On workshop for you to take your
02:12 - next year's knowledge to the next level
02:14 - it will teach you everything that you
02:15 - need to know to design build and deploy
02:17 - a fullstack app with nextjs it is a live
02:20 - Workshop so you will get direct access
02:22 - to me and I will answer any questions
02:24 - that you may have as well Plus at the
02:26 - same time you will get lots of exercises
02:28 - to learn different Topics in next year s
02:30 - you will be divided into breakout rooms
02:32 - so you can learn from your Workshop
02:34 - peers as well and learn complex topics
02:36 - together and if you get stuck don't
02:38 - worry because I'm there to help guide
02:39 - you as well Additionally you can show
02:42 - off your certificate of completion at
02:44 - your workplace or on LinkedIn to
02:46 - Showcase that are a certified next
02:48 - year's developer at the same time I will
02:50 - be sharing a lot that I couldn't
02:52 - necessarily share in this specific crash
02:54 - course in that Workshop so if you're
02:56 - interested please sign up to the weight
02:58 - list as the weight list folks get
03:00 - exclusive launch discounts and special
03:02 - bonuses as well so sign up to the weight
03:04 - list and I will see you in the workshop
03:06 - so first let's try to understand the
03:07 - difference between a library and a
03:09 - framework now what exactly is a library
03:11 - versus a framework this specific visual
03:13 - really does a great job at describing
03:16 - what a library does and so does a
03:18 - framework now library and framework both
03:20 - are reusable pieces of code a framework
03:22 - will provide the overall structure a
03:24 - skeleton for your application versus a
03:26 - library is going to provide you reusable
03:28 - pieces that you can utilize and use your
03:30 - creativity to do whatever you want using
03:33 - the analogy of luggers on the left hand
03:36 - side a library is like a box of assorted
03:38 - Lego pieces without any Specific
03:40 - Instructions so as you can see here
03:42 - they're trying to figure out what
03:44 - exactly they can do using the creativity
03:46 - they have the full freedom to use the
03:48 - Lego pieces to create whatever model
03:50 - they like they can use whatever custom
03:52 - designs as per their needs but on the
03:54 - right hand side where say a framework is
03:56 - like a Lego set with a predefined model
03:59 - of instructions you follow the
04:01 - instructions what's on the box and
04:03 - create whatever you want to create now
04:05 - there is little customizations in a
04:07 - framework but because the instructions
04:09 - are so clear you know exactly what you
04:11 - need to do on the right hand side in the
04:12 - framework you're going to think less
04:14 - about a lot of the details in your
04:17 - application on the right hand side in
04:18 - the framework a lot of the hard
04:20 - decisions are made for you so you don't
04:22 - have to worry about making those
04:24 - decisions yourself versus on the left
04:26 - hand side in the library you do have to
04:28 - make those decisions yourself which can
04:29 - be harder depending on your application
04:31 - so in our case nextjs is a framework
04:34 - versus react is a library so nextjs
04:37 - gives you a lot out of the box such as
04:40 - built-in routing different data fetching
04:42 - mechanisms really rich metadata API for
04:45 - search engine optimization and a lot
04:47 - more so you you just use those specific
04:49 - apis and customize and build your
04:51 - application versus react is a library so
04:53 - we need something called as wheat
04:56 - alongside react so that we can compare
04:59 - the two that is react creating a react
05:01 - application with wheed versus with
05:03 - nextjs which is a framework and we will
05:05 - talk about that in depth a bit later as
05:08 - well but this is what a difference
05:09 - between a library and a framework is so
05:12 - what exactly is react versus nextjs well
05:15 - react is a really popular Library built
05:17 - by Facebook it is a library for not just
05:20 - the web but also for building native
05:22 - user interfaces if you want to build a
05:24 - mobile app you can definitely do that
05:25 - with react using react native react has
05:28 - definitely onboarded many many
05:30 - developers because the development is so
05:33 - much easier and faster because of react
05:35 - with react you can create UI that is
05:38 - user interfaces if you are familiar with
05:40 - other programming languages then you can
05:42 - think of react as a view layer Whatever
05:44 - Gets displayed to the user is what we'll
05:47 - be using react for you can create
05:48 - different user interfaces from a concept
05:51 - called as components and components are
05:53 - essentially individual repeatable pieces
05:55 - that combine together and are known as
05:58 - components for example in in this case
06:00 - thumbnail is a component like button is
06:02 - a component but a component can also
06:05 - comprise of different components and we
06:07 - can combine them all together to form
06:09 - different screens and pages and so on
06:11 - now react lets you build seamless
06:14 - applications and that is also a reason
06:16 - why NEX GS is in fact built on top of
06:18 - react now you can write components with
06:21 - different code and react has a special
06:23 - rendering mechanism to know when exactly
06:25 - to update what part of the UI so react
06:28 - is pretty amazing on the on the other
06:29 - hand nextjs is in fact a react framework
06:32 - for the web it is a framework that is
06:34 - built on top of react I also like to say
06:36 - it's the production framework for react
06:38 - and you will learn why in a bit now next
06:41 - GS is a full stack framework so just
06:43 - like we talked about how react is the
06:45 - view layer nextjs not just allows us to
06:48 - build the front end but it also allows
06:50 - us to build the back end and that is why
06:51 - it is a full stack framework in nextjs
06:54 - you can do a lot for example for example
06:57 - you in order for you to add routing
06:59 - between Pages next yes provides us with
07:01 - a file system based router that we can
07:04 - definitely use and we will learn all
07:06 - about that later next yes also gives us
07:08 - the ability to fetch data in different
07:11 - ways so it also gives us allows us to do
07:13 - client side rendering as well as server
07:15 - side rendering which we'll talk about in
07:16 - a second Now search engine optimization
07:18 - is really important in your application
07:20 - if that specific app needs to rank
07:22 - higher on search engines just Google
07:24 - then in that case nexs also offers us
07:27 - with a really powerful metad data API so
07:30 - that you can get improved SEO and web
07:33 - sharability as well now nextjs does a
07:35 - lot for us nextjs also has a few special
07:39 - components that we can use that the fact
07:41 - that we use them means that we get
07:43 - additional performance benefits so this
07:45 - is what a framework does a framework
07:47 - does give you a lot of magic out of the
07:50 - box so you can focus on building
07:52 - seamless applications now one topic we
07:54 - should definitely talk about in nextjs
07:56 - is the difference between a spa work and
08:00 - a static side generation workflow Spa
08:02 - means single page application whenever
08:04 - you think of react you would think of
08:06 - single page application this means that
08:08 - the page is only rendered on the browser
08:11 - and the browser just displays it on the
08:13 - page now it's not great for search
08:14 - engine optimization because if you defin
08:17 - if you do inspect the browser elements
08:19 - for example the page Source then you
08:22 - will not necessarily see anything in
08:24 - there so when Bots are going to crawl
08:26 - your website it's not going to discover
08:28 - any cont content on the page so browsers
08:31 - on demand serve the page to the user so
08:33 - if you take a look at this specific
08:35 - diagram let's say this is a developer
08:37 - writing his blog on cookies because they
08:39 - really love cookies and they ship the
08:41 - blog code to the server on I love
08:43 - cookies.com now in a single page
08:45 - application for example they will ship
08:47 - the website blog to the server and then
08:49 - every time the user asks for I love
08:51 - cookies.com either through search
08:53 - engines or by going to I love
08:56 - cookies.com directly the server is going
08:58 - to say hey hey sure let me produce the
09:01 - HTML on demand and give it to you let me
09:03 - produce the HTML JavaScript on demand
09:05 - and give it to you now let's say there's
09:07 - one more user that comes up and asks for
09:09 - I love cookies.com the server is going
09:11 - to repeat the process and regenerate
09:14 - again the HTML on demand and give it to
09:16 - the browser the browser can render it on
09:18 - the page now this process can be really
09:20 - slow because browser is doing things on
09:22 - Demand versus in a static side
09:24 - generation workflow which is what nextjs
09:26 - is really powerful for or you would also
09:28 - call that as pre PR rendering where we
09:30 - are pre-rendering the pages in this case
09:32 - if a developer writes his blog on
09:34 - cookies builds his code and ship those
09:36 - blog files to the server on I love
09:38 - cookies.com and shares that code and
09:41 - shares the HTML to the CDN which is a
09:44 - Content delivery Network so what this
09:46 - developer is going to do or what next
09:48 - year is going to help this developer do
09:51 - is that they're going to say hey I've
09:53 - written these 10 block post let's just
09:54 - pre-download them and let's just store
09:57 - them on our nearest server this way
10:00 - let's say you are asking for data from
10:02 - let's say Hong Kong or United States and
10:05 - the server closest to you is going to
10:07 - get called and going to they are going
10:09 - to give you the HTML that's already
10:11 - pregenerated for that specific block on
10:13 - top in in a spa workflow this is done on
10:16 - Demand versus in an SSG workflow the
10:19 - work is already done for you all the CDN
10:21 - does is that it returns that predefined
10:24 - work so when the user asks for I love
10:25 - cookies.com the server is already going
10:28 - to send you the pre-built files and
10:30 - they're just like here you go this means
10:32 - the response time the initial page load
10:34 - is going to be really fast and when
10:37 - search engines look for I love
10:39 - cookies.com they're going to get all the
10:41 - HTML code embedded of the blog this
10:44 - means that I love cookies.com is going
10:46 - to get discovered on different search
10:48 - engines and it's going to make the site
10:50 - really fast as well so that is the
10:52 - difference between a spa workflow and a
10:54 - static side generation workflow also
10:56 - known as pre-rendering now react is
10:58 - popularly know known for spa versus
11:00 - nextjs is popularly known for
11:02 - pre-rendering so we cannot necessarily
11:04 - compare react with nextjs because we
11:07 - cannot compare a library with a
11:09 - framework when in fact next year's
11:10 - leverages react as a library but what we
11:13 - are going to do in this specific course
11:15 - is we are going to compare something
11:17 - called as wheat with react which gives
11:20 - you the tooling necessary that whenever
11:22 - we cannot pick a framework we know how
11:24 - to configure our application and
11:26 - depending on your use case you can
11:28 - decide hey should I go with the
11:29 - framework or not and also you will learn
11:31 - the differences so even if you do go
11:33 - with the framework you will know what
11:35 - the other route is as well so weed is a
11:38 - really powerful Next Generation front
11:41 - end tooling it does provide you with
11:43 - lightning fast HMR which means that
11:46 - anytime you make changes in your files
11:48 - in your local file system those changes
11:50 - are immediately available to you on the
11:53 - browser you don't need to refresh the
11:55 - page or do anything of that sort now V
11:58 - also has support for typescript jsx CSS
12:01 - and a lot more but at the same time V
12:04 - also uses a rollup build which makes our
12:07 - development a lot faster and rollup is
12:09 - essentially a JavaScript module bundler
12:11 - that will compile all your code and make
12:14 - it really fast as you ship it to the
12:16 - browser for production and also during
12:18 - development as it already has a really
12:21 - powerful bundler which will bundle all
12:23 - your specific code now Ved with rollup
12:25 - gives you a plug-in system so we can
12:28 - basically plug in play exactly all the
12:30 - things we want in our application now
12:32 - one disadvantage of using a framework
12:35 - like nextjs is that a lot of the
12:36 - decisions are made for us so if we want
12:38 - to opt out of those decisions we can't
12:41 - really because it's going to be a lot
12:42 - harder for us to do that so wheat is
12:44 - really powerful so that's what we would
12:46 - be doing throughout this course we would
12:48 - be essentially comparing and trying to
12:50 - see hey if a framework does provide us
12:52 - this then what does wheat with react
12:55 - give us at the same time we will also be
12:57 - checking hey what features do we really
13:00 - want in our app and what can a framework
13:02 - provide versus what a non-framework
13:05 - versus what Feed plus react will provide
13:07 - us as well this way we can compare and
13:09 - have a little bit of fun while building
13:11 - our application as well my goal with
13:13 - this specific course is to help you
13:14 - decide and give you a solid
13:16 - understanding for how all of this works
13:19 - together now to understand and learn the
13:21 - difference between the two next year and
13:23 - also react plus wheat we will be
13:25 - building an app a recipe planner called
13:28 - as tasty NEX and tasty react so let me
13:32 - quickly give you a demo now these two
13:34 - apps are identical except minor design
13:36 - tweaks now on this specific page you
13:39 - will see a list of recipes of from
13:41 - different Cuisines so on the page you
13:42 - will see a list of different recipes
13:44 - that we pull from an API now when we
13:47 - click on any specific recipe you will
13:50 - read more details about the recipe as
13:52 - the name what is a prep time and cook
13:54 - time difficulty level ingredients and
13:56 - instructions alongside an image if you
13:59 - go back to all recipes then you should
14:00 - see all the different recipes on the
14:03 - page as well you will also be able to
14:05 - filter based on quisine such as Asian
14:08 - American Greek Italian Indian and so on
14:12 - so these are all the different recipes
14:14 - that you see on the page that we are
14:15 - retrieving from the API so now let's say
14:18 - we were to shrink the size of the
14:19 - viewport then this app is fully
14:21 - responsive and we change from four
14:25 - columns to three columns two columns and
14:27 - one columns based on the viewport size
14:29 - now the app is fully responsive on the
14:31 - recipe page as well so it's easily
14:34 - readable on mobile and also on different
14:37 - device sizes now if you go back to all
14:39 - recipes this is an identical app with
14:42 - the tasty react app wherein we will be
14:45 - building these cool gradients as well
14:47 - all of this in t CSS and all the
14:49 - different components that you see on the
14:51 - page are using the Shad CN UI Library so
14:54 - you will be learning Shad CN UI as well
15:02 - and also we will be using the latest and
15:04 - greatest next year's features such as
15:06 - client and server components and so on
15:08 - so this app is fully server rendered
15:10 - versus this app is not and we will learn
15:12 - the differences of the between the two
15:15 - in this course as well and you will be
15:16 - learning all about building a really
15:18 - performant app in this specific course
15:21 - so I'm really excited to get started so
15:23 - let's dive in so now let's take a look
15:25 - at how we can start a new project in
15:28 - react now the docs definitely recommend
15:31 - to use Frameworks in fact they recommend
15:33 - a few Frameworks that you can use with
15:35 - react one is nextjs other one is remix
15:38 - Gatsby you want to use Expo for react
15:40 - native applications and so on now the
15:42 - docs they highly recommend using a
15:44 - framework because they say that you by
15:47 - starting with the framework you can get
15:48 - started with react quickly and avoid
15:50 - essentially building your own framework
15:52 - later which is a valid point so if we
15:54 - take a look at this specific section
15:56 - where the question is can I use react
15:58 - without a framework they say you can
16:00 - definitely use react without a framework
16:02 - however if you're building a new app
16:04 - they recommend using a framework because
16:06 - even if you don't need routing or data
16:08 - fetching at first you will likely want
16:10 - to add some libraries for them as the
16:12 - JavaScript bundle grows with every new
16:14 - feature you might have to figure out how
16:15 - to split the code for every route
16:17 - individually now just to summarize all
16:19 - of this for you what they're saying is
16:22 - react Frameworks they do a lot for you
16:24 - so as a beginner react Dev or as you're
16:26 - starting a new project you don't need to
16:28 - worry about all the bells and whistles
16:30 - that a framework provides you so they
16:31 - highly recommend just going for a
16:33 - framework when when it comes to react
16:35 - but let's say we still don't want a user
16:37 - framework and we have a specific use
16:39 - case or we don't want to TI be tied to a
16:41 - specific Cloud platform and so on then
16:44 - in that case they basically recommend
16:46 - that hey you can roll up your own setup
16:48 - with react grab react and react Dom from
16:51 - npm set up your custom build process
16:54 - with a bundler like wheat and or parcel
16:57 - and add other tools as you need need
16:59 - them for routing static generation or
17:01 - service side rendering and more so
17:03 - that's exactly what they tell us and
17:04 - that's what we are going to do in this
17:06 - specific course we going to grab readed
17:08 - as a bundler with react and add any
17:11 - specific capabilities as we want as we
17:13 - build our app further let's talk about
17:15 - the text tack that we going to use we
17:17 - going to definitely use wheat with react
17:19 - for example to start a project to create
17:21 - a project we obviously going to use
17:23 - nextjs to as a framework option with
17:25 - react and then for styling our
17:28 - application we are going to use a
17:30 - specific Library called as Shad CN
17:32 - Shaden UI has become so popular it's
17:35 - because it allows you to build your
17:36 - component library now Shaden Library
17:39 - uses tailin CSS underneath it so we will
17:42 - be using tailin CSS to style our
17:44 - application so you will be learning a
17:45 - bit of Tailwind along the way as well
17:47 - but let me quickly talk about why we
17:50 - using Shard CM now as we build our
17:52 - application we don't want to start from
17:54 - scratch because we mainly want to focus
17:56 - on the specific crash course and the
17:57 - learnings of that so what we are going
17:59 - to do is let's say for this spe this
18:01 - specific batch component this card
18:03 - component or anything else that we need
18:06 - in our app we are mainly going to stick
18:09 - with using components from Shaden now
18:11 - keep this in mind take a look at the
18:13 - docs it says it right here Shad CN is
18:16 - not a component Library it is a
18:18 - collection of reusable components that
18:20 - you can copy paste in your apps this
18:22 - means these are beautifully designed
18:23 - components that you can mainly just copy
18:25 - paste in your application so you only
18:27 - you will only add that specific
18:29 - component and it will create a folder
18:31 - for you with that specific component
18:33 - code in it so if you look at your
18:34 - package Json there won't be any card in
18:37 - of Shad CN from it because the motive
18:39 - with shad CN UI is that it's going to
18:42 - give you all these reusable components
18:44 - that you can just copy paste in your
18:46 - code and just right away use it it's not
18:48 - going to be installed as a dependency so
18:50 - we can make whatever changes we want and
18:52 - we we can customize it however we like
18:55 - because the base is already provided to
18:57 - us plus it's open source and accessible
18:59 - so it's really awesome so for example
19:01 - from this list we're going to use the
19:02 - card component and all we're going to do
19:05 - is use this command to add card and we
19:07 - also going to use the badge component to
19:09 - display all the different Cuisines as
19:11 - well at the same time because it uses
19:13 - Tailwind we are going to build our
19:15 - application further with Tailwind so the
19:17 - rest of our page whatever we see on this
19:20 - specific page or this page all of it is
19:22 - going to be built using taen CSS now
19:25 - let's go ahead and create our react
19:27 - application with wheat now now if you
19:29 - head over to the getting started section
19:30 - and if you scroll down there are there's
19:32 - an option for scaffolding your first
19:35 - read project here let's just copy this
19:37 - specific command and we have two options
19:39 - we could just copy this command and
19:40 - follow the prompts or we could also just
19:43 - select the react as a template for
19:45 - example but let's just do this and see
19:48 - what the prompts are so if you head over
19:49 - to our terminal I've kind of divided a
19:51 - terminal into two halves the first one
19:53 - we are going to set up a react with
19:55 - wheat and the bottom one we'll set up
19:56 - our nextjs so here let's just paste what
19:59 - we copied and now we're going to call
20:00 - this tasty react because this is the
20:03 - application that we are building where
20:05 - we display the list of recipes and have
20:07 - the ability to filter them and view more
20:09 - information and follow the instructions
20:11 - of those recipes now you can call this
20:12 - whatever you like but I'm going to call
20:14 - this tasty react now here let's just go
20:16 - with react as an option I'm going to
20:18 - expand this a little bit but let's just
20:20 - go with react as an option here when it
20:22 - comes to selecting a framework at the
20:24 - same time we are going to select
20:25 - typescript plus S swc as an option so we
20:28 - definitely want typescript in our
20:29 - project but we also also need s swc now
20:32 - s swc is a extensible rust based
20:34 - platform so it will help us in compiling
20:38 - and bundling and it's 20 times faster
20:40 - than Babble so we can we can basically
20:42 - compile and bundle our JavaScript code
20:44 - in in a much faster manner so since it's
20:46 - built on top of rust it's really fast as
20:49 - well so that's what that's the option we
20:50 - going to select and now let's just
20:52 - change the directory npm install that
20:55 - will install all the packages for us to
20:58 - get get started and once it's done we
21:00 - are going to run the development server
21:03 - now our V plus react application is
21:05 - ready to go and now look at that you can
21:07 - see that there is a counter example with
21:09 - V plus react ready to go which is pretty
21:12 - awesome now let's see what the process
21:14 - looks like for next CHS now if you head
21:15 - over to the docs and head over to the
21:17 - getting started section here make sure
21:19 - you follow the system requirements
21:21 - making sure you have the latest nodejs
21:23 - version and any of these operating
21:24 - systems so let's just go here and copy
21:27 - this specific command now create next
21:29 - stab is a CLI tool that gives you a
21:31 - bunch of prompts just like we saw with
21:33 - beat to bootst our application so now
21:35 - here again if we go to the bottom
21:38 - section of the terminal just going to
21:40 - paste what we copied and here let's just
21:42 - call this tasty next we're going to use
21:45 - typescript we're going to use es lent we
21:48 - are going to use tailin CSS we're just
21:50 - going with the defaults at this point
21:52 - and we will talk about app router later
21:54 - a bit later but let just for now say yes
21:57 - and we don't want to customize anything
21:59 - again this is going to reinstall the
22:01 - dependency now one difference here is
22:03 - that with wheat we had to go ahead and
22:05 - run npm install versus with next this
22:08 - create next app already installs it for
22:10 - us so all we can do is just go to Tasty
22:13 - next and then just run our development
22:15 - server it starts off our project on
22:19 - Local Host 3001 now there you go we have
22:22 - our next GS application also ready to go
22:25 - what we need to do is add Shad CN in our
22:27 - application now now if we go to the
22:29 - installation section we can pick to
22:31 - these two Frameworks we could go with
22:33 - Ved or we could go with nextjs now let's
22:35 - just go ahead and add shat C and to be
22:37 - now remember we have already created a
22:39 - react project so we are going to only
22:41 - add Tailwind with all these different
22:43 - configurations to our project but before
22:46 - we do that let me just give you a quick
22:48 - walkth through of the projects that we
22:50 - have already set up so now let's just
22:52 - stop the server on in both cases and
22:55 - open up the application in Visual Studio
22:57 - code now Visual Studio code is going to
22:59 - be the editor of my choice but feel free
23:01 - to use whatever you like and here let's
23:03 - just open up vs code so now let's just
23:05 - go ahead and check out our Ved with
23:08 - react application now this project is
23:10 - tasty react which is configured with Ved
23:12 - plus react so here we have a public
23:14 - folder where we will sto be storing all
23:16 - our assets node modules has all our
23:19 - packages needed to bootstrap the
23:21 - specific application then we have a
23:22 - source directory now again there's a
23:24 - specific assets folder which you can add
23:26 - any of your assets to as well alongside
23:28 - the public now if we go to the app. TSX
23:32 - this is the main page of our application
23:34 - remember we saw the counter example this
23:36 - is exactly where it is created so app.
23:39 - TSX is the main file is the main page of
23:41 - our app and it also has a app. CSS with
23:45 - all the specific CSS code as well and
23:47 - then we have a index. CSS file which
23:50 - right now does not have anything
23:52 - configured but has a overall look and
23:55 - feel this is where we would be adding
23:56 - tailin CSS then we have the main. DSX
23:59 - file now the difference between an xjs
24:02 - application versus a single page
24:04 - application as this specific one is that
24:06 - it is always going to create the react
24:09 - Dom on the specific root element over
24:12 - here and it's going to render the app
24:14 - now app is the main page of application
24:17 - but this is how usually it works and
24:19 - this specific root element is in fact
24:22 - declared over here so you have the div
24:24 - ID so all your JavaScript code all your
24:26 - HTML code essentially is going going to
24:28 - be mounted here is what it's saying over
24:30 - there right here then we have the
24:32 - index.html file which has our HTML page
24:35 - itself so you can modify it later if you
24:38 - want and then this is where our
24:40 - JavaScript code that's going to get
24:42 - bundled and minified and shown here then
24:45 - we have the TS config file with with
24:47 - configuration for a project and then we
24:49 - also have a Ved config file so now weed
24:52 - config file works really well with the
24:54 - plug-in system from rollup now if we
24:56 - click on this specific option you you
24:58 - can see all the different ways we can
25:00 - configure this specific V config file
25:02 - now remember I said that V uses rollup
25:06 - to power the plug-in system this is why
25:09 - we have react as a plug-in now let's say
25:11 - we want to add some other plug-in here
25:14 - for example then we could just do that
25:16 - in the plugins array and V has a bunch
25:19 - of different plugins that we can use
25:21 - which gives us the plugin play
25:22 - optionality that we want now again we
25:24 - are importing react from plugin react s
25:27 - swc and and then Define config which is
25:30 - this spef function right here that's
25:31 - getting exported from the Ved package
25:33 - itself so this is how the tasty react
25:36 - project works now let's go ahead and
25:38 - take a look at the next year's project
25:41 - now if you take a look at next tasty
25:42 - next we have a directory here called as
25:46 - the directory now directory will have
25:49 - all our build files there so whenever
25:52 - nextjs runs our development server all
25:55 - the files that get built are right here
25:57 - and nextjs us different Json files to
25:59 - map all the different individual files
26:01 - then we have the app directory the app
26:03 - directory is basically the app router
26:06 - that we talked about in nextjs and
26:08 - that's why we have the app directory now
26:10 - the nextjs has one more router that we
26:12 - will talk about in the routing section
26:13 - as well but for now in the app directory
26:15 - we have the page. TSX file now this
26:18 - page. TSX file is essentially the page
26:21 - that we see on our Local Host 3001 so
26:25 - this specific page will have all the
26:27 - code for it so next G uses spe specific
26:31 - file names as special files for example
26:34 - page. TSX would mean that this is the
26:37 - index page in our application similarly
26:39 - we have layout that basically surrounds
26:42 - our entire application it wraps our
26:44 - entire application and here we have the
26:47 - HTML document for example and the
26:50 - children would be all the individual
26:52 - pages that we would declare in our app
26:54 - because layout is in fact the root
26:56 - layout now we also have a specific font
26:59 - setup here called as inter again we will
27:01 - take a look at fonts a bit later and we
27:03 - also have the metadata API which where
27:05 - we can configure our specific title and
27:07 - description for SEO purposes later but
27:09 - layout is essentially the root layout
27:11 - that wraps our entire application then
27:13 - we have the global CSS file which has
27:15 - our Global CSS configuration and this is
27:18 - where we are setting up Tailwind now
27:20 - keep this in mind in V with react we
27:22 - still need to add Tailwind but setting
27:24 - up this specific project in the create
27:26 - next T prompt we already set yes for
27:28 - tailin that's why tailin is already
27:30 - preconfigured which is pretty awesome so
27:32 - one last step for us to configure but
27:34 - these are the three things that we need
27:36 - for tailin this the code for Global CSS
27:39 - then in the public folder is where all
27:41 - the public assets would live for example
27:44 - then at the same time we have a next
27:45 - config file which where we will
27:47 - configure specific values for our next
27:50 - year's project that we will take a look
27:52 - at later then we have the post CSS
27:54 - config file so that we can basically add
27:56 - CSS code inside JavaScript it's for
27:59 - compiling CSS code with JavaScript and
28:01 - this is mainly used for tailin then we
28:03 - have the tailin config file which is a
28:05 - global tailin configuration whenever you
28:07 - want to extend the existing design
28:09 - system of tailin then you can definitely
28:12 - use this specific file as well now I do
28:15 - have a course on tailin that you may
28:17 - want to check out right here which is a
28:19 - tailin CSS crash course if you're
28:22 - interested this specific crash course
28:24 - will give you a in-depth overview of how
28:26 - Tailwind works so if you're if you're
28:28 - interested definitely check that out but
28:29 - going back to our project this is where
28:31 - all our Tailwind styles are set up and
28:34 - how where we would extend the existing
28:36 - design system or even replace it if you
28:38 - like then we have the TS config file
28:40 - which has our configuration for our
28:42 - project now this is how all the project
28:43 - files are set up whenever we
28:45 - bootstrapped our Ved plus react
28:47 - application alongside our nextjs
28:49 - application now as we saw earlier the
28:51 - app router comes with taen CSS as a CSS
28:55 - framework by default as we chose in
28:57 - while setting up our project so let me
29:00 - quickly give you a walkthr of tvin CSS
29:03 - so you know exactly how to style our
29:04 - application and we'll be able to follow
29:06 - along as well so for example here tvin
29:09 - CSS is essentially a utility first CSS
29:12 - framework now if you want to learn
29:14 - tailin in depth then I also have a free
29:17 - crash course for you on tailin CSS that
29:19 - you should also check out on my channel
29:21 - right here if you want to Lear in dep
29:23 - then definitely check out the tillin
29:24 - crash course on my channel now tillin is
29:27 - a utility first CSS framework so for
29:30 - example instead of typing display Flex
29:32 - in a CSS file all you're going to do is
29:35 - write Flex instead of writing padding
29:39 - top is 4 pixel or 16 pixel or one r or
29:43 - two r or so on you are going to write PT
29:47 - hyphen 4 so that is the beauty of tailin
29:50 - it these are all different utilities now
29:52 - you can think of these utilities as
29:54 - essentially JavaScript functions that
29:56 - return the specific CSS for us for
29:59 - example essentially that's what they are
30:02 - now the reason why delin has gained so
30:04 - much popularity because you don't need
30:06 - to create a separate file Al together
30:08 - you can just inline the CSS here so for
30:11 - example if you hover over this then you
30:13 - have display Flex here now if you want
30:15 - to install the specific plug-in that I
30:17 - do have then you can go to extensions in
30:21 - Visual Studio code and then look for
30:24 - tailin CSS intelligence and you will be
30:27 - able to get the intence needed to style
30:29 - your application now heading back to
30:32 - page. TSX if you see Minh screen then
30:36 - it's 100 VH which is 100 viewport so it
30:39 - sets the Min height as well so these are
30:41 - different utilities that tilin provides
30:43 - us so if you head to getting
30:45 - started you can see the utility first
30:48 - fundamentals here and why they're
30:50 - important but if we take a look at
30:53 - responsive design then dilin does
30:56 - provide us a break Point prefix as well
30:59 - so that we can style our application for
31:01 - different viewports so for example by
31:04 - default tailin focuses on mobile and
31:07 - then we go to desktop for
31:10 - example over here p24 applies to all
31:13 - viewports but if I'll specifically say I
31:16 - want p24 to apply to mobile but let's
31:20 - say I want p64 to apply to let's say
31:24 - desktop then I can just add large as a
31:27 - prefix pin also provides us with a
31:29 - design system out of the box so it gives
31:31 - us a bunch of colors already all these
31:35 - different swatches that we can just use
31:37 - so for example if I want to change the
31:39 - background color of the page to BG I
31:42 - don't know gray 800 then I could easily
31:46 - do that thanks to tailin but at the same
31:48 - time I can change this to Pink as well
31:51 - if I want but it provides us on a scale
31:54 - from of 50 to 900 or 950 these are all
31:58 - the different colors that tailin
32:00 - provides us and it goes all the way to
32:03 - 950 now it also provides as a spacing
32:06 - scale if you want to learn anything
32:08 - about getting good at building really
32:11 - good design then you need to make sure
32:13 - that you have a really good spacing
32:15 - scale now we don't need to worry about
32:16 - it because tailin automatically provides
32:18 - us for us which is this default spacing
32:21 - scale for example if you use
32:24 - PX4 then it means it's 16 pixel or one
32:27 - ram and so on so as you saw over here
32:30 - p24 is adding a padding of six Ram here
32:34 - but if I add say PX then it will only
32:37 - add padding left and padding right and
32:40 - if I want only on the y axis then I can
32:42 - just say py so all these utilities are
32:45 - really cool and really great and you
32:47 - will learn more tillin as we build our
32:49 - application further but keep this in
32:51 - mind that I will be providing you all
32:52 - the tailin Sal so you know exactly how
32:54 - they work but I won't be necessarily
32:56 - going in depth in tail so now let's go
32:59 - ahead and set up shat CN in our projects
33:01 - now again we have already created this
33:04 - specific react project with v but now
33:06 - let's go ahead and add Tailwind to our V
33:09 - plus react project let's just copy this
33:11 - and paste it right here similarly
33:13 - there's one more command that we need to
33:15 - initialize Tailwind let's copy that as
33:17 - well now let's initialize tailwind and
33:20 - next let's just add the following code
33:22 - that they recommend us in our TS config
33:25 - file where we are configuring all how
33:28 - our project we are configuring our
33:30 - project so in the TS config file let's
33:33 - go ahead and add the base URL and paths
33:36 - here you're basically saying that the
33:38 - paths anytime that we import it's going
33:41 - anytime we import using at at the rate
33:44 - it's going to resolve it to Source slash
33:46 - whatever now next we need to install the
33:50 - types for node to the Ved types for node
33:53 - and also we need to configure the Alias
33:56 - and the Ved config file as well so just
33:58 - copy this and then paste it now let's
34:00 - also just go ahead and copy how how we
34:03 - can resolve the aliases because we
34:06 - already have everything we also need to
34:08 - import path from path now let's just go
34:10 - to Ved config file and here let's just
34:12 - paste it and we need path so path is
34:14 - going to come from path we can just
34:16 - import path from path there you go now
34:19 - that we have the path added let's just
34:21 - go ahead and run the Shad CN UI init
34:24 - command to set up our project just copy
34:26 - this and now let's just go go here and
34:28 - paste it now this is going to initialize
34:30 - our shat CN UI components that we want
34:34 - and the global configuration for how
34:36 - components would be managed so would you
34:38 - like to use scripes script yes we're
34:40 - going to go with the default style we're
34:42 - going to use the base color now if you
34:44 - take a look at here they also tell us
34:47 - how to answer these questions too so for
34:49 - the global CSS file we're just going to
34:51 - copy this then we will be using CSS
34:53 - variables and the answer is yes then we
34:57 - are going to use no where is your tailin
34:59 - config file let's just copy what they
35:01 - have here where is your located it's
35:04 - right here then the aliases for
35:06 - components are going to be at at theate
35:09 - SL components so let's just paste that
35:11 - similarly the utils are just going to be
35:14 - these utils and then are you going to
35:16 - use react server components the answer
35:18 - is no and write configurations to
35:21 - components or Json now this is the Json
35:23 - file which will manage all our
35:24 - components so we're going to just say
35:26 - yes now again it's writing components.
35:28 - Json file and initializing our project
35:30 - now let's go ahead and check our project
35:33 - so now we have the components folder as
35:35 - you see here but we also have the
35:36 - components or Json file with the
35:38 - different aliases at the same time we
35:41 - have a rough schema for how where all
35:43 - the files are for shard CN to manage now
35:46 - let's just go and test it out by adding
35:48 - a button component so let's just copy
35:50 - this let's head over to the terminal and
35:52 - add shat CN button now that we add this
35:55 - Watch What Happens now here in the
35:57 - components folder now we have a UI
35:59 - folder and it has a button. TSX now
36:01 - remember in package so we not going to
36:04 - see a like an import for button but in
36:06 - fact we have the entire code for button
36:08 - literally pasted right here this means
36:11 - we can modify this button however we
36:13 - like now this specific button has
36:15 - different VAR variants such as default
36:17 - destructive outline secondary and so on
36:20 - so if you want to use that we can as
36:22 - well now let's just go and use this
36:24 - button in app. TSX now again honestly we
36:26 - don't even need need all of this so we
36:28 - can just pretty much get rid of it and
36:30 - these as well and similarly in index.ts
36:34 - we can CSS we can give everything as is
36:36 - but in app. CSS we don't need any of
36:38 - this so let's just get rid of that as
36:40 - well and now what we can do is just add
36:43 - the button from UI components button
36:46 - from shat cm and I'll just say hi hi
36:49 - there so this specific button is added
36:51 - so now let's just go ahead and check out
36:53 - our app so now here if we refresh the
36:56 - page nothing happens because our app is
36:58 - not running yet so let's just run the
37:00 - app now now let's just go ahead and
37:03 - refresh the page and look at that hi
37:05 - there is right there that means Shad CN
37:07 - components have been installed
37:09 - successfully now alongside button we
37:11 - also want badge and card so let's just
37:13 - add that as well so let's just copy this
37:15 - and add card same time let's add badge
37:18 - as well now you can see card and badge
37:21 - are already added here so we we are good
37:24 - to go now let's just go ahead and
37:26 - install shat CN with nextjs so if we go
37:29 - to the dogs and in the installation
37:30 - section this time let's select nextjs as
37:32 - a framework and again we already have
37:34 - the project so all we need to do is
37:36 - initialize shat CN UI in nextjs now here
37:40 - let's just copy what we pasted
37:42 - initialize the UI let's go with the
37:44 - default style let's go with slate would
37:46 - you like to use CSS variables yes and
37:49 - it's going to write components. Json now
37:51 - let's just go ahead and also add card as
37:54 - well as badge here as well at the same
37:58 - time we also need button so now let's
38:00 - just go ahead and check out chat CN
38:02 - right here so we have the components
38:04 - directory we have badge button and card
38:06 - ready to go and we also have a
38:08 - components. Json file which is pretty
38:10 - awesome and now if we go to page. TSX
38:14 - again we can just pretty much get rid of
38:16 - all of this so we don't even need it and
38:18 - now what we're going to do is just use
38:20 - button just to test out that shat CN is
38:23 - configured you can just call this hi
38:25 - there get rid of image import unused now
38:27 - let's just go ahead and restart the
38:29 - server now let's just refresh this page
38:32 - really quickly and look at that hi there
38:34 - sh CN button is also configured here
38:37 - that's exactly how you would configure
38:39 - Shard CN in nextjs versus Wii specific
38:42 - setup it was pretty much the same except
38:44 - that we had to install Tailwind in V
38:47 - plus react versus with nextjs it was
38:49 - already preconfigured at the same time
38:51 - the setup was a little bit simpler with
38:53 - nextjs than it was with beat plus react
38:56 - but more or less it was pretty pretty
38:57 - much the same so it felt like the almost
38:59 - like the same experience so no
39:01 - complaints here let's go ahead and add
39:03 - routes inside of our application so for
39:05 - example whenever we click on any of the
39:07 - recipe card then we definitely need to
39:09 - route to another route called as/ recipe
39:12 - SL1 and remember tasty react as well as
39:15 - tasty next are identical applications
39:17 - with maybe little minor CSS changes but
39:20 - majority of the functionality is pretty
39:21 - much the same so the same routing is
39:24 - also needed inside of next year as well
39:26 - when we route to/ res /1 at the same
39:28 - time when we click on back to all
39:30 - recipes then get taken back to the
39:32 - homepage similarly if we go to the
39:34 - recipe page and if you click on the nav
39:36 - bar and click on tasty next then we also
39:39 - get taken back to the homepage that's
39:40 - pretty much the functionality that we
39:42 - have here so routing is something that's
39:44 - really important and one of the most
39:45 - fundamental things that you need inside
39:48 - of any application so when it comes to
39:50 - routing with react and weat we have a
39:52 - few options so first we can go with a
39:54 - really popular Library called as react
39:56 - router now react router is one of my
39:59 - favorite libraries and something that I
40:01 - have used for many many projects and I
40:03 - have really used that in production
40:05 - applications and this specific library
40:06 - has scaled really well so there's
40:08 - definitely react router as an option
40:10 - then we also have another option called
40:13 - as wi now W is essentially a do one
40:16 - thing do it well Ved plug-in where it
40:19 - also offers us routing capabilities so
40:22 - for example it also uses a file system
40:24 - based routing that that nextjs offers as
40:27 - well as well so we can definitely use W
40:30 - with be to configure application and get
40:33 - routing to now W doesn't just give us
40:34 - routing it also gives us and basically
40:38 - is identical to what a framework
40:39 - provides us different data fetching
40:41 - capabilities and so on we won't be using
40:43 - white but know that this is a viable
40:45 - option that you can use alongside we
40:47 - with react as well we will be sticking
40:48 - to using react router now when it comes
40:51 - to react router we have a few different
40:53 - options and few different routers for
40:55 - different scenarios that we could use in
40:57 - application for example these are the
40:59 - four different types of routers that
41:01 - react router offers us one is the create
41:03 - browser router then we have the create
41:05 - memory router create hash router and
41:07 - create static router create browser
41:09 - routers is what we would use and is the
41:11 - recommended router for all react router
41:13 - projects so this is what we would be
41:15 - using but you would use create memory
41:17 - router for testing and component
41:19 - development essentially like for example
41:21 - when you're using story book you would
41:23 - use something called as create hash
41:25 - router for example when you're
41:26 - configuring a web server and then you
41:28 - would use something called as create
41:30 - static router but again you are
41:32 - rendering things on your server for
41:33 - example nodejs and so on again this is
41:35 - more for server side but we will be
41:37 - using something called as create browser
41:39 - router so if we go to the documentation
41:41 - for browser router what it does it
41:43 - stores the current location in the
41:44 - browser's address bar with using clean
41:46 - URLs and navigates using browser's
41:48 - built-in history stack because browser
41:50 - has a history stack already that's what
41:52 - it utilizes to route between pages so
41:55 - that's what we would be using in this
41:56 - specific project but now on the other
41:58 - hand but when it comes to using nextjs
42:01 - nextjs uses a file system based router
42:04 - this means that whenever you create a
42:07 - new file with that specific name then
42:09 - you will be able to route to it so you
42:11 - can Define different routes inside of
42:14 - next GS and those routes are also called
42:15 - as route segments so if we take a look
42:18 - at this specific diagram whenever you
42:20 - want to route to the index page it's
42:22 - called as the index route then you would
42:24 - just create a new file called as page.
42:26 - TSX which is already what we saw as well
42:28 - for example we have a page. TSX inside
42:31 - the app directory but then whenever you
42:32 - want to create a dynamic route which
42:34 - means the slug is going to be different
42:37 - what I mean by that is let's say we go
42:39 - from one card to the other then this
42:41 - value is going to change right now it's
42:43 - one but if you go to some other card
42:44 - it's two and so on so that specific
42:46 - value is different and that's what a
42:48 - dynamic route is wherein this specific
42:51 - ID which which would be the recipe ID
42:53 - would be different so what we would need
42:54 - to do is create a page. DSX file by
42:57 - creating box brackets inside of recipes
43:00 - and then creating a folder with box
43:02 - brackets so that's what a file system
43:04 - based router does all you need to do is
43:07 - create new files and then you you would
43:09 - be able to route to them so there is no
43:12 - there are no multiple options for
43:13 - creating different routers in xjs but in
43:15 - xjs there are two different types of
43:18 - routers one is the app router and the
43:20 - other one is the pages router now
43:22 - remember when we bootstrapped our next
43:24 - year's project we selected the app
43:25 - router because app router is the default
43:28 - router right now inside of nextjs but
43:30 - before app router came along we had
43:32 - something called as the pages router in
43:34 - the pages router it's it was still a
43:36 - file system based router but the
43:38 - functionality that you get in this that
43:40 - specific router was quite different with
43:42 - app router we get capabilities like
43:44 - react server components and client
43:46 - components the apis are slightly
43:48 - different with the app router and all
43:50 - the new features are now available
43:52 - inside app router this does not mean
43:54 - that pag router is outdated or
43:56 - deprecated or Legacy in any way Pages
43:59 - router is still used by many many
44:01 - companies all across the world this is
44:03 - really important that if you are using
44:05 - Pages router it's completely fine cuz
44:08 - many applications are built using nextjs
44:11 - with the pages router but as the react
44:13 - team partnered with the nextjs team and
44:15 - we had special capabilities for react
44:18 - server components and client components
44:19 - exclusively available in nextjs and the
44:22 - way you create components changes inside
44:24 - of nextjs with app router that is why a
44:26 - new router was born called as app router
44:29 - so if you want to look for into
44:30 - transitioning from Pages router to app
44:33 - router do it slowly and do it one route
44:35 - at a time because you can still have app
44:38 - pages router working alongside app
44:40 - router as you migrate those different
44:42 - routes but that's how routing Works
44:43 - inside of next year in our specific
44:45 - project we will be definitely sticking
44:47 - with AB router as it is the latest one
44:49 - and it has all the recommended features
44:51 - that we're looking for so if you're
44:52 - starting a new project I highly
44:53 - recommend using the app router itself
44:55 - now let's go ahead and set up a browser
44:57 - router again we want one route which is
45:00 - called as the index route this is more
45:02 - of index.js Convention of using page.
45:04 - TSX we'll still be using the same terms
45:06 - for index route and dynamic route and
45:08 - react router as well so what we are
45:09 - going to do is again we already have
45:12 - create route but we are going already
45:14 - have create route here but we are going
45:16 - to create a browser router and wrap it
45:18 - where we Mount our application so let's
45:21 - just copy this and now let's just close
45:23 - all of this cuz we don't need it and now
45:25 - inside of our main.ts X let's just wrap
45:28 - app with browser router now in order for
45:30 - us to use browser router we need to
45:33 - install it so let's just go to so here
45:36 - again we can just install these things
45:38 - to get the route react router just copy
45:41 - this head over to the terminal and add
45:44 - react router inside of tasty react and
45:46 - also let's just restart the server now
45:48 - what we can do is just go ahead and
45:50 - import browser router just go ahead to
45:54 - our documentation and import browser
45:56 - router from react router Dom all right
45:58 - so now we have browser router ready to
46:00 - go but now if we go inside app right now
46:02 - we have a button there but let's just
46:04 - make sure that now app is the central
46:07 - place where we Define all our routes
46:09 - means if you take a look here we have
46:11 - these specific routes so what we are
46:13 - going to do is instead of button let's
46:15 - just get rid of it let's just Define
46:17 - routes here now we are going to import
46:20 - routes from react router same route as
46:22 - well from react router now this means
46:25 - that this is the default route but what
46:28 - we want to do is we want to use the
46:29 - element property inside of react router
46:32 - and let's create a new page called as
46:34 - the home page now even though app is
46:36 - hosting all the routes let's just
46:38 - separate the pages out so what we can do
46:40 - is inside of source whoops inside of
46:42 - source directory let's just go ahead and
46:44 - create a new pages folder and here let's
46:46 - just create a homepage now this is where
46:49 - our code for recipes will be located so
46:52 - let's just call this homepage now again
46:55 - what we can do is we can just use the
46:58 - button that we had over here and let's
47:00 - just say hi I am home from Shad CN so
47:04 - everything works as expected but here
47:05 - let's just import homepage as well but
47:07 - now this is needs this needs to be a
47:09 - react we need to declare it here so this
47:12 - needs to be a react node so let's just
47:14 - declare it here as well so if everything
47:16 - works as expected then we should see hi
47:18 - I'm home here which is amazing but we
47:20 - don't just need one route we actually
47:22 - need two so whenever we go to another
47:24 - route we need SL recipes SL one so what
47:27 - we can so what we can do over here is
47:29 - let's just create a dynamic route and
47:31 - the way you would do that is by saying
47:33 - recipe SL colon recipe ID and this
47:36 - recipe ID is the dynamic segment inside
47:38 - the specific URL inside a specific route
47:41 - and now instead of homepage we're just
47:42 - going to create a new page called as the
47:44 - recipe page now here inside of homepage
47:46 - let's just call this recipe page. DSX
47:49 - again let's just create a new functional
47:51 - component let's just call this recipe
47:54 - page and now let's just say hi I am a
47:58 - recipe beautiful now we have a recipe
48:01 - page as well as we have a homepage so
48:03 - let's just go ahead and import recipe
48:05 - page here this where we saying the
48:07 - recipe Pages go here so let's just go
48:09 - ahead and try it out so now if we go
48:11 - back to our app if we let's say go to
48:13 - slash recipes slash one you can see we
48:16 - get hi I'm a recipe let's say I just go
48:19 - to whatever ID it should still take us
48:21 - to SL High a recipe page because this
48:25 - specific value is dynamic let's say I go
48:27 - to/ recipes page let's see what happens
48:29 - nothing happens it's a blank page so
48:31 - what we can do is there's one more route
48:33 - in next year as well as react router
48:35 - which is called as a catchall route so
48:37 - instead of following this specific
48:38 - convention what we need to do is we're
48:41 - going to say hey if the route PA is
48:43 - going to be asteris that means all of
48:45 - them let's just render a element now
48:47 - we're just going to say over here to
48:49 - keep it simple that this page does not
48:53 - exist for example right just to make
48:56 - sure that that we are catching all the
48:57 - routes so right now if we head over to
49:00 - our app you can see we get this page
49:02 - does not exist which which would be an
49:04 - indication for us that hey we need to
49:06 - create this page if you like but for now
49:08 - let's just keep it as is we don't need
49:09 - to worry about it this is how you can
49:11 - basically create different routes with
49:12 - react router but let's say you want to
49:14 - do the same thing with nexs we want to
49:16 - create a index route a dynamic route and
49:18 - a catch all route that we just talked
49:19 - about but we can do here is inside of
49:22 - our app we have the page. TSX which is
49:25 - our index page so we we can keep it as
49:27 - is so let's just create a recipes folder
49:30 - and let's create another folder called
49:33 - as recipe ID and because nextjs has all
49:36 - these special files where the way we
49:38 - need to Define these Pages we need to
49:40 - create a new file called as page. DSX
49:43 - that means this becomes a default page
49:45 - inside a recipe ID so if you create a
49:47 - page for example here let's just say hi
49:50 - I am a recipe I am a recipe page for
49:54 - example so now if we head over to the
49:57 - browser and go to our create next app
49:59 - and let's say we go to/ recipe slash
50:01 - whatever value we do get high am a
50:04 - recipe page let's say we go to/ recipes
50:06 - page which does not exist at this point
50:09 - let's see what happen the next JS
50:10 - automatically gives us a four or four
50:12 - page this page could not be found which
50:14 - is exactly what we Tred to do inside of
50:16 - a react router as well so we can keep
50:18 - this as is we don't need to create a
50:20 - specific special route for this one but
50:22 - this is good to know that in next year
50:24 - it automatically handles it already but
50:26 - speak speaking of special files like we
50:28 - talked about page. DSX and layout. DSX
50:31 - let's review what are the different
50:32 - special files inside of nextjs now we
50:35 - have a few special files inside of
50:37 - nextjs these are all the different files
50:39 - we have layout page loading error and so
50:42 - on and we will take a look at few of
50:44 - these in this specific course but for
50:46 - now let's just focus on layout and page
50:48 - now the layout page the special thing
50:49 - about this page is that whenever you
50:51 - whatever you add in this specific page
50:53 - will not render and this is where you
50:55 - would typically add your header and
50:56 - footer so whenever we are ready to add
50:58 - our navigation bar we would be adding it
51:01 - here in the layout file similarly we
51:02 - could also add it in the footer as well
51:04 - and then page. TSX is essentially a page
51:08 - itself so whatever gets rendered inside
51:10 - of layout is in fact the page file
51:12 - itself so anytime you want to create a
51:14 - new page a new route then you need to
51:16 - call it page. DSX let's say you want the
51:19 - loading functionality need to create a
51:21 - page called as loading dtsx and so on
51:23 - these are different special files and
51:24 - soed on xjs now by the way if you
51:26 - interested in checking out and
51:28 - downloading all the visuals that I'm
51:30 - sharing in this specific course and
51:32 - definitely take a look in the
51:33 - description below where you can download
51:35 - all the visual assets alongside all the
51:37 - links that I've offered in this specific
51:39 - course so definitely check that out so
51:40 - now if you were to compare routing with
51:42 - nextjs compared to react router or react
51:46 - with weed you can see a few differences
51:48 - it was really simple and easy in nextjs
51:51 - because nextjs already had the router
51:54 - set up so we did not need to set up any
51:56 - additional all we needed to do was
51:58 - create new files and make sure those
52:00 - files match the naming conventions that
52:02 - we talked about in the special files
52:04 - visuals versus in react router we had to
52:06 - set up the router we had to follow the
52:08 - docs and make sure all the routes are
52:10 - properly configured now if you don't
52:12 - follow the right conventions especially
52:14 - in a react router world the routes are
52:16 - not going to reender and you may wonder
52:18 - why at the same time there are different
52:19 - specific routers as well just the
52:21 - browser router hash router static router
52:23 - and so on that we took a look at so you
52:25 - need to know which router is best for
52:27 - each scenario the good thing about next
52:28 - CHS is that all these decisions are made
52:31 - for us so like all we need to do is just
52:33 - create new files in a file system and
52:35 - the routes will be created provided we
52:36 - follow the naming conventions so you can
52:38 - definitely see how a framework is
52:41 - definitely powerful when it comes to
52:43 - creating a router as a beginner react
52:45 - Dev this might be daunting for you where
52:47 - you have to set up your own router but
52:48 - as an experienced react Dev you might or
52:51 - as someone who's maybe architecting the
52:53 - app in your company maybe they can make
52:55 - those choices to decide hey like should
52:57 - I go for file system based router that
53:00 - nextjs offers us or should I just create
53:02 - my own router with react plus weed or
53:05 - even like use something like w that we
53:06 - looked at earlier as well so these are
53:08 - different ways you can create routing
53:10 - options inside of our applications and
53:13 - you can then decide which one is best
53:14 - for your specific use depending on your
53:16 - use case you might you may prefer one
53:18 - over the other so one quick tip I want
53:20 - to share when you're navigating docks
53:22 - inside of nextjs make sure that whenever
53:25 - you search any anything in the
53:27 - documentation you are selecting the
53:29 - appropriate router because we are using
53:31 - the app router make sure that is
53:32 - selected but if you want to search
53:34 - something in Pages router then select
53:35 - that instead because the apis are
53:38 - slightly different and that's why it's
53:39 - important that you get pointed to the
53:41 - right apis when you search for it in
53:43 - your documentation now let's go ahead
53:45 - and add our navigation bar inside of our
53:47 - application for example right now if we
53:50 - look at Tasty react and also if we take
53:53 - a look at Tasty next this is essentially
53:55 - your navigation bar now Shad CN also has
53:58 - a navigation bar but we won't be
53:59 - necessarily using that because our
54:01 - navigation bar is quite simple it
54:03 - literally has one text with a specific
54:05 - font and then we whenever you click on
54:08 - any card you click on the navigation bar
54:10 - it takes you back to home so basically
54:11 - it routes you back to home so what we
54:13 - need is we just we can just create like
54:14 - a custom simple component with
54:16 - navigation and then that would be it so
54:19 - let's just go ahead and create it so now
54:21 - here in components let's create a new
54:24 - component called as now. yes now what we
54:27 - can do is let's just create a functional
54:28 - component and in here let's just call
54:30 - this Navar and now what we can do is
54:34 - just copy what I'm going to give you
54:36 - just going to and what we're going to do
54:37 - is just replace this code with
54:39 - navigation bar now this is the code I've
54:41 - already prepared so you can take a look
54:43 - at the GitHub Link in the cheat sheet to
54:45 - check it out if you like but here this
54:47 - is what we would be calling tasty react
54:49 - now the best spot for us to place this
54:52 - would be in the app. TSX right above
54:54 - routes because this is sort of the entry
54:56 - point for our app the main page so let's
54:58 - just add this here and then save it now
55:01 - if you go to our application you can see
55:04 - tasty react is already on the page but
55:06 - there's one more thing we obviously need
55:08 - to also make sure that we are able to
55:09 - route to homepage as well we can just
55:12 - use anchor link for that and let's just
55:15 - wrap it up inside of each one now you
55:17 - can see that tasty react is right here
55:20 - and then if we go to we are on the
55:22 - recipes route but if I go back to Tasty
55:25 - react then I'm on the home route around
55:26 - now which is which is what we want
55:28 - similarly let's do the same inside of
55:30 - next CHS as well so now again instead of
55:32 - next CH we want tasty next here so let's
55:35 - just go ahead and do the same so what we
55:37 - can do is just copy this nav bar go
55:39 - inside our UI folder and paste it
55:42 - because it's pretty much the same but
55:44 - now inside of nextjs instead of using
55:46 - the anchor tag we will be learning a
55:48 - special component inside of nextjs for
55:50 - example we will be learning about the
55:52 - link component the link component is
55:54 - essentially a react component that
55:56 - extends the HTML anchor element to
55:59 - provide prefetching and glans and
56:01 - navigation between Nots this might sound
56:02 - really hard but what it's essentially
56:04 - saying is that link is a special
56:06 - component it's a special react component
56:08 - what it's going to do it's extend it's
56:09 - still uses the anchor tag underneath it
56:11 - but it also has additional capabilities
56:14 - such as prefetching so if we take a look
56:15 - at what prefetching is pre fetching is a
56:18 - way to preload a route in background
56:20 - before the user visits in so for example
56:22 - if we take a look at this specific app
56:24 - I'm going to let's just refresh the page
56:26 - clear it for example completely now this
56:29 - is an app that we are building inside of
56:31 - my next year's course so you should
56:33 - definitely check it out if you're
56:34 - interested this course will teach you
56:36 - everything that you need to know to
56:38 - master nexts and build production ready
56:41 - modern application so definitely check
56:44 - this out if you're interested it is a
56:46 - really comprehensive course and it also
56:48 - comes with a cheat sheet that you can
56:50 - download so you can follow along as I
56:52 - build the course as well this is the
56:54 - easy cell app that we buil inside of
56:56 - that course now this is an e-commerce
56:58 - app for example NOW Watch What Happens
57:00 - and how the link component performs here
57:02 - we are using the link component to wrap
57:04 - these cards now as I scroll down more
57:06 - images get downloaded for example we
57:08 - have the Nike shoe which is not in the
57:10 - viewport yet but it's about to come in
57:12 - the viewport and that's what prefetching
57:14 - is link component is going to prefetch
57:16 - Pages as it's about to appear in the
57:19 - viewport so you get that additional
57:20 - performance benefit plus you're not just
57:22 - downloading pages that the user may not
57:25 - even see because from for example in a
57:27 - site like Amazon there might be way too
57:30 - many pages now imagine if Amazon were to
57:32 - use nextjs then or were to use the next
57:36 - link component from nextjs then in that
57:38 - case because it's such an image heavy
57:40 - site you will see a huge performance
57:42 - benefit because next GS is only going to
57:44 - load the things that are in the viewport
57:47 - or what's about to come in the viewport
57:48 - this will make it make the initial load
57:50 - really fast and make your website really
57:52 - fast so for example if you head over to
57:55 - the easy sell app the Nike shoe is about
57:58 - to come but you can see how as we're
58:00 - about to scroll down this is the dog
58:02 - photo and that's what shows up here how
58:04 - refreshing Works inside of Link
58:05 - component so that's what we are going to
58:06 - use one to wrap each each of our cards
58:09 - inside of Link component so only the
58:11 - ones that are needed will show up in the
58:13 - viewport but also in our tasty next nav
58:16 - bar we also going to use Link component
58:18 - now even though prefetching inside of
58:20 - test tasty NE n Bar might not have that
58:23 - much of an advantage because just
58:24 - routing to the main page but if you
58:26 - think about it when you want to use the
58:28 - link component whenever you're routing
58:30 - between internal outs because of that
58:32 - addition because of those additional
58:33 - capabilities of performance and
58:35 - prefetching and all of that that we took
58:37 - a look at but let's say instead of let's
58:39 - say we want a route tasty next to my
58:41 - website this is an external Link at
58:43 - kara.com so in that case you don't
58:46 - necessarily want to use the link
58:48 - component you just want to use the Pure
58:50 - Old anchor tag that we took a look at in
58:52 - tasty react while building a tasty react
58:54 - nabar so let's just go ahead and add
58:57 - link component inside of our application
58:59 - we can just copy this line of code and
59:02 - now let's just instead of tasty react it
59:05 - should be tasty next and let's just wrap
59:07 - it with link component now let's just
59:09 - import link from next link instead of
59:12 - dashboard it should go to homepage and
59:14 - then instead of tasty react it should be
59:16 - tasty next now make sure to close the
59:18 - link tag as well so now we need to make
59:21 - sure that we add the nav bar inside of
59:23 - layout because remember that's where we
59:25 - discussed that that all our routes all
59:28 - our headers and footer will be in the
59:30 - layout cuz one they do not reender and
59:32 - second it wraps our entire application
59:34 - so here right above children we can just
59:37 - add nav bar see nav bar is going to be
59:39 - imported from there and just save it so
59:41 - now if we go back and see you can see
59:45 - tasty next is right here but we have
59:46 - also added the link component so this is
59:48 - on recipes page so if we click on tasty
59:51 - next it should take us back to home if
59:52 - you click that look at that we are also
59:54 - redirected back to home which is which
59:56 - is exactly what we want let's talk about
59:57 - the different rendering mechanisms in
59:59 - modern applications so you may have
60:01 - heard of client and server rendering and
60:03 - we definitely took a look at the single
60:05 - page application workflow and the static
60:08 - side generation or pre-rendering
60:10 - application workflow before but let's
60:12 - talk a little bit more about client and
60:14 - server rendering and the different
60:15 - mechanisms needed in the modern
60:17 - applications today again this diagram
60:19 - really does a great job I've asked AI to
60:21 - generate this for me to use the analogy
60:23 - of someone cooking in the kitchen like a
60:26 - person cooking in the kitchen so on the
60:27 - left hand side we have client rendering
60:29 - and the right hand side we have server
60:31 - rendering on the left hand side with
60:32 - client rendering you can think of it as
60:34 - the chef giving you a bunch of
60:36 - ingredients such as the dough the
60:38 - vegetables the bread the sauces and
60:41 - everything and this person right here is
60:43 - putting together all the ingredients and
60:45 - then baking it and putting it on the
60:47 - pizza dough for example definitely take
60:49 - some time as they collect all the
60:51 - ingredients together and place it and
60:54 - form this beautiful pizza for example
60:56 - now you can literally think of this as
60:58 - client rendering when you visit a
61:00 - specific website it's like the browser
61:02 - putting together everything that you
61:04 - need on the page that's your headers
61:07 - your images assets JavaScript files and
61:10 - so on on the page to give you a fully
61:13 - cooked pizza to give you a fully baked
61:15 - website the browser is basically going
61:17 - to act like this person who's going to
61:20 - put together all these ingredients
61:22 - together and making sure your website is
61:23 - functional and exactly how you want
61:25 - definitely take a bit of time if the
61:27 - website is complex enough right because
61:29 - the person is going to take a lot longer
61:31 - the browser is going to take some time
61:33 - to put together that web page for the
61:35 - user so this means that the initial load
61:38 - of your web page depending on the
61:39 - complexity of your website the number of
61:41 - assets on it and so on and will be
61:43 - really slow if you have a lot going on
61:46 - on your web page so what's exactly
61:48 - server rendering then well this time the
61:50 - chef Cooks the entire Pizza it's the
61:53 - pizza is ready made and ready to go all
61:56 - the assets are all there all the
61:58 - ingredients in the pizza are all there
62:00 - it's basically a ready to eat pizza you
62:02 - get to enjoy your meal right away
62:04 - without doing any extra work when you
62:05 - visit a specific website the server a
62:08 - powerful computer somewhere else for
62:10 - example is going to prepare the whole
62:13 - web page and give you the ready to eat
62:15 - pizza for example it sends the browser a
62:17 - complete ready to view page and all the
62:20 - browser needs to do is just show it onto
62:22 - the page that is hydrate onto the page
62:25 - so you see the web page immediately just
62:27 - like you can eat a fully cooked pizza
62:30 - because you get a ready to eat pizza
62:32 - that's what server side server rendering
62:33 - is because that powerful computer is
62:35 - really powerful all the resources are
62:37 - ready to go and the in server rendering
62:40 - you're just going to get the page ready
62:41 - to go so that's the difference between
62:43 - client rendering and server rendering so
62:45 - now if you think of react with wheat for
62:48 - example this it react mainly is known
62:51 - for building single page applications
62:54 - like we just saw what react does is what
62:57 - we described here as client rendering
62:59 - versus what nexs does is that it gives
63:02 - you the option of server rendering by
63:04 - default creting the HTML page in advance
63:06 - and showing it to the user so this is
63:09 - why many many folks opt for Frameworks
63:12 - like nextjs or even remix Gatsby and so
63:15 - on because of the server rendering
63:16 - capabilities over to Tasty react which
63:19 - is our spa application if we go to
63:21 - inspect and go to network Tab and then
63:25 - disable JavaScript and refresh the page
63:27 - you will see a blank application and if
63:29 - we head over to page Source then we what
63:32 - we see here is literally all the assets
63:35 - that are ready to download and then
63:37 - there's a script tag with a div ID root
63:39 - tag now all this JavaScript still needs
63:41 - to be downloaded and that's how the page
63:44 - will get functional but we don't see any
63:46 - HTML that was there on the page now
63:48 - let's say this is not great for search
63:50 - engines because when Bots search engine
63:52 - Bots go to check out your website
63:55 - they're now going to care about which
63:57 - fancy technology your site is using all
63:59 - they're going to look at is the source
64:01 - and see what's on your page and and
64:04 - basically decide where it should rank on
64:06 - Google now because all they're going to
64:08 - see is Dev ID route and until JavaScript
64:11 - gets downloaded then that's when they
64:13 - will see the page the initial load time
64:15 - is going to be really slow and it's not
64:17 - what you want at all let's say we go to
64:19 - an xjs website now this is my blog and
64:22 - it is fully built in xjs now let's say
64:25 - we do this the same thing here we go to
64:27 - sources and then just say disable
64:29 - JavaScript minute we do that and let me
64:31 - just refresh the page the page is fully
64:33 - functional you know why because the HTML
64:35 - is already generated thanks to server
64:37 - rendering and pre-rendering so if we
64:39 - take a look at view page Source I'm just
64:42 - going to enable line wrap here it's a
64:44 - special plugin I've installed in my
64:46 - browser if we do that you can see that
64:49 - all the HTML code is right here in fact
64:52 - let's just take a better example if you
64:53 - go to a specific blog post and go to the
64:55 - page source and again enable line wrap
64:58 - then you should see the entire block
64:59 - post here so when a bot visits the
65:01 - website they can exactly see what's on
65:03 - my page and are able to then rank my
65:06 - website higher because my initial load
65:08 - time is going to be really fast and they
65:10 - are going to recognize everything that's
65:11 - on the page that's what I mean by client
65:13 - rendering and server rendering why you
65:15 - may want to opt in more for Server
65:17 - rendering versus client rendering which
65:19 - is our single page applications in
65:21 - general react is in fact client rendered
65:23 - versus nextjs is in fact server rendered
65:25 - and not just that it has a few other
65:27 - options that we will take a look at next
65:29 - but this is why you may want to opt into
65:31 - server rendering versus client rendering
65:33 - let's add these badges as well as let's
65:36 - add these cards as well so in order for
65:38 - us to do that we have already installed
65:40 - the component from shaten it's time for
65:43 - us to start using it so let's just go
65:46 - ahead and Implement that now so let's do
65:48 - it in react first so if you go to our
65:51 - homepage and it says hi I'm home for
65:54 - example we don't don't need the button
65:56 - because we're not going to use it but we
65:58 - definitely need a badge component for
66:00 - sure so what we're going to do is here
66:03 - we will have a list
66:06 - of Cuisines so we're going to say
66:11 - Cuisines and then here this is going to
66:13 - have our list of Cuisines which we'll
66:15 - take a look at what we need is we're
66:17 - going to map through those list of
66:19 - Cuisines and here we're just going to
66:21 - add the batch component from
66:24 - chatan and we're going to map
66:26 - them we're also going to return them
66:29 - here or
66:33 - rather let's just do this because this
66:36 - is just going to act as a return anyway
66:39 - this then the second parameter of map is
66:42 - an ID so we can use that ID and the name
66:44 - of the cuisine as a way to create a
66:47 - unique key for our badge
66:51 - component so this is what we can do now
66:54 - this cu are just going to be an array of
67:01 - strings so now I already have a list of
67:05 - Cuisines I'm just going to add that so
67:08 - badge we're going to override a few
67:10 - Styles here now the variant for badge is
67:13 - going to be
67:17 - outline but there are several different
67:19 - variants as well you saw here it could
67:21 - be default destructive outline and
67:23 - secondary
67:25 - so let's just say CU Cuisine is going to
67:30 - be badge all right so so now if you go
67:34 - back here you can see that we have all
67:37 - the list of
67:39 - elements now we also want to render a
67:41 - list of cards here
67:44 - too so for that let's just basically use
67:48 - the card component here so we can just
67:49 - say card
67:51 - component so the card component let's
67:53 - just see the API for the card component
67:56 - itself so if we take a look at the shat
67:58 - CN UI Library we have the card component
68:02 - and there are two tabs here the preview
68:04 - Tab and the code tab so we can always
68:06 - review the code that we want
68:08 - here so what we can do is we really want
68:11 - a really simple
68:12 - card so we can just pretty much just
68:15 - copy
68:18 - this and then let's just paste what we
68:21 - copied and save it again we need to make
68:25 - sure we importing all of this
68:28 - from shat
68:30 - CN components UI folder that we
68:34 - have there you
68:36 - go so now if you look at it look at our
68:39 - card component we have an image we have
68:42 - a title we have a footer for example so
68:46 - we could literally make it this could be
68:47 - the header this could be the body the
68:49 - content and then this could be the
68:51 - footer that's ex that's exactly how we
68:54 - can configure this so for that we need
68:56 - an array of items so before we go and
68:59 - call our API which gives us a list of
69:02 - items we need to First make sure we can
69:04 - just add some dummy data so we can just
69:07 - say recipes I
69:10 - guess and then here this these this
69:12 - literally could be the array of recipes
69:14 - so here we can say ID is going to be
69:17 - zero or maybe let's just say start with
69:20 - one and then we will have a name which
69:23 - is going to be something like
69:26 - like chicken
69:30 - sandwich and the cuisine is going to
69:34 - be
69:36 - American something like that this way we
69:39 - can just map through it so we can just
69:42 - say recipes. map recipe again same thing
69:47 - use the second parameter in the map
69:50 - function to
69:56 - use it for the key so again we can just
69:59 - say key is going to
70:02 - be
70:04 - recipe. name and then it could be idx
70:09 - for
70:10 - example at the same time we can also use
70:12 - recipe. ID as well if you like but again
70:15 - let's just keep it as is so now instead
70:17 - of title we can just have recipe.
70:21 - name and then we don't really need a
70:23 - description so let's just get rid of it
70:25 - similarly instead of card content we can
70:29 - have ideally this would be an image but
70:32 - I just replace this so we can just say
70:35 - this is going to be the name this is
70:37 - going to be the footer and this will be
70:39 - some image that we want so now if we go
70:43 - back to our app we can see that the card
70:45 - component is already ready here we have
70:48 - the chicken sandwich and we have the
70:50 - footer which is what we Define in an
70:52 - array of elements so now so now that
70:55 - let's just let's just get rid of all of
70:59 - this and then paste what I just copied
71:02 - right here because again like I
71:05 - mentioned I'm going to give you the
71:06 - structure and the CSS for
71:08 - it so now we can just get rid of header
71:11 - alog together or header could have the
71:14 - image here
71:17 - eventually but for now we don't need to
71:19 - worry about it at the same time we need
71:21 - the key
71:23 - back so we can say recipe.
71:28 - name hyphen and then we can just say
71:31 - recipe.
71:34 - idx
71:38 - oops here here all right or just
71:44 - idx so now we have our basic card ready
71:48 - to go we don't have servings prep
71:50 - minutes or cook time minutes just add it
71:52 - here inside of our
71:55 - servings is going to be
71:57 - four prep time minutes is going to be
72:02 - four and then cook time minutes is
72:06 - probably going to be
72:08 - five okay so now we have our basic card
72:11 - component ready to go with the hover and
72:14 - all that but obviously we need to make
72:16 - sure that only shows one card so we will
72:19 - add a div around it too so that we have
72:22 - like four
72:24 - columns initially on desktop and then
72:27 - three columns and two columns and so
72:29 - on just like we have here where if we
72:33 - switch to for
72:38 - example different devices then our
72:41 - columns increase just like that so we
72:45 - want something like this so definitely
72:46 - let's configure that too again let's
72:48 - just add the necessary styling for
72:52 - that now if we go back look at that we
72:55 - do have our card ready to go let's give
72:58 - it some page styling too so that it
73:00 - looks how we want it
73:02 - to here let's
73:04 - just replace this with these two
73:07 - elements and add another
73:11 - div so now we have our card ready we our
73:15 - card is looking pretty good and
73:17 - obviously this is zoomed in so this is
73:20 - how our card looks like we definitely
73:21 - need an image but our P structure looks
73:24 - pretty identical iCal to what we want in
73:27 - this specific application now obviously
73:30 - we do want gradients as well which we'll
73:33 - configure that a bit later but for now
73:35 - let's focus on getting real data for
73:38 - tasty
73:39 - react so let's talk about data fetching
73:42 - inside of react with wheat alongside
73:45 - nextjs now we will be using this dummy
73:48 - Json data to get the list of recipes so
73:51 - if we take a look at our docs there are
73:54 - a bunch of different different recipes
73:55 - here and this is what we'll be focusing
73:57 - on it will give us a list of recipes for
74:00 - example and then we have it has
74:02 - everything that we need now let's say we
74:04 - go to two a specific ID then this gives
74:06 - us a specific recipe as well that we can
74:09 - get when we go to the individual recipe
74:11 - page for example that's what we would be
74:13 - using for data fetching now in order for
74:15 - us to fetch data inside of a react wheat
74:18 - application what we could do is use the
74:21 - fetch API now this is a very common
74:23 - fetch function that we could use at
74:25 - returns a promise and then we can use
74:27 - fetch to basically fetch any specific
74:29 - resource that we want so we could fetch
74:32 - use the fetch API to fetch the list of
74:33 - recipes and then individual recipes as
74:36 - well but in react and weed like I
74:38 - mentioned we have W which already has
74:41 - different data fetching mechanisms that
74:43 - we can use if we were to use W to
74:45 - basically get the list of items now this
74:47 - would mean that we don't necessarily
74:49 - need to client render we could in fact
74:51 - server render and opt into different
74:53 - data fetching mechanisms as we like as
74:55 - well so for example inside of data
74:57 - fetching we have different modes such as
75:00 - SSR server side rendering Spa that means
75:03 - if you want if you want spa for some
75:05 - reason then we could do that as well SSG
75:08 - which is static site generation HTML
75:10 - only so the page is only rendered to
75:12 - HTML with no zero or minimal JavaScript
75:16 - and so on so this is totally a doable
75:18 - option but in our case we're not using
75:19 - Wes but I wanted to definitely tell you
75:22 - that this is an option that we could use
75:23 - with with beat with beat and react but
75:26 - in that case we're just going to go with
75:27 - fetch we're going to use fetch to fetch
75:30 - the list of recipes but this is great
75:32 - for beat and wheat plus react and we can
75:35 - just use fetch in one of the react hooks
75:38 - basically fetch the data and manage
75:39 - State locally but when it comes to
75:41 - fetching data in nextjs there are a few
75:44 - different ways we could approach this
75:46 - the nextjs also offers us a fetch API
75:50 - but a special fetch API next GS extends
75:53 - the native fetch API and it allows us to
75:56 - configure the caching Behavior inside of
75:59 - our application so remember how I said
76:02 - that we could server render an app or a
76:04 - client render an app and so on in next
76:06 - years in fact there are a few different
76:08 - ways you could fetch data itself so one
76:10 - is called a static side generation what
76:12 - this means is that we still use the
76:14 - browser fetch but next year will extend
76:16 - the specific fetch function and add a
76:19 - property called as cash Force cash this
76:21 - means that whenever you use this
76:23 - specific function by by default your
76:25 - request data is just going to be cached
76:28 - and unless you purge that specific cache
76:30 - that data is going to stay this means
76:32 - that anytime the user accesses the data
76:35 - it's in fact cached on the server and
76:37 - you're getting that cached data over and
76:39 - over again on the other hand your data
76:41 - does get stale after a bit for example
76:43 - in our application if we were to go
76:46 - ahead and cash all of this data but
76:48 - let's say that our title we change our
76:51 - title for example then in that case now
76:53 - the data is still so what we could do in
76:55 - nextjs is we we can use something called
76:58 - as incremental static regeneration which
77:01 - would mean that every hour the data is
77:04 - going to get revalidated that we going
77:06 - to get fresh data you're going to
77:08 - request for fresh data every hour the
77:10 - first user that requests for this
77:12 - specific data the first time is going to
77:14 - still get stale data but but the next
77:16 - time the user any new user is going to
77:19 - get fresh data because that's going to
77:20 - be a signal for next year that hey go
77:22 - fetch new data and lastly we have
77:24 - servers rendering which where we can add
77:26 - a cach no store which means that there's
77:28 - going to be no caching caching and we
77:30 - are going to have fresh data every
77:32 - single time but still we will have the
77:34 - capabilities where HTML is pre-rendered
77:36 - and then we show the data after as well
77:40 - so these are different ways we could
77:41 - fetch data inside of nextjs and all
77:43 - within the fetch function but you need
77:45 - to be careful when you use the fetch
77:47 - because nextjs does cash a lot and this
77:49 - is something you need to be really aware
77:50 - of let's just go ahead and use that in
77:52 - our application let's just use
77:55 - fetch to fetch these
77:58 - recipes so now in our app we have
78:01 - recipes that are coming from a
78:04 - array we don't need this we can do is we
78:07 - can just create a local state call this
78:10 - recipes set recipes once we do get the
78:13 - data from the API we can set the recipes
78:16 - so for that let's just use a life cycle
78:18 - hook called use effect this we want this
78:21 - hook to only run the first time that
78:24 - means we we need to give it an empty
78:25 - array so we we're going to say that hey
78:29 - let's just use fetch so we can just
78:32 - say again in we cannot call a async
78:36 - function directly inside of a use effect
78:39 - so what we could do is we could just say
78:42 - get
78:43 - recipes and make this an Asing
78:46 - function and I's just say response and
78:49 - let's just say fetch and then here call
78:51 - the
78:52 - recipes and then now again let's just
78:55 - get the data so we can just say await
78:58 - response.
79:00 - Json and this gives us the response Json
79:03 - data itself and now if there is
79:08 - data then we can just set the
79:11 - recipes now we just call get recipes
79:15 - right here outside in the function this
79:18 - way we can call it inside use effect now
79:20 - keep this in mind we don't need these
79:22 - recipes anymore we can just do directly
79:25 - call them let's just set the recipes and
79:28 - set with set it with data so now let's
79:31 - just refresh the page and you can see
79:33 - that we do have an error the recipes.
79:35 - map is not a function so let's just see
79:38 - what happens so for
79:40 - example we can just console log
79:46 - data and if we open up browser developer
79:49 - tools and go to
79:51 - console then we have an object and data
79:55 - has recipes as an array so what we need
79:58 - to do is we can just say
80:01 - recipes so if that's the case then let's
80:03 - just call data
80:05 - recipes and now if everything works as
80:08 - expected then we should see a list of
80:10 - cards with all the data isn't that
80:13 - amazing so we have our list of cards
80:14 - ready to go and obviously this card does
80:17 - not look like the card that we want
80:19 - because it does not have an image now
80:22 - here where we had the placehold for
80:25 - image inside of a header let's just add
80:27 - an image so we can say image
80:31 - source and recipe.
80:34 - image and then an all tag we can just
80:37 - say recipe do
80:41 - name width is going to be
80:44 - 500 height is going to be
80:49 - 500 and let's just make it a background
80:52 - cover rounded and then let's just also
80:55 - give it a shadow and these are all
80:56 - different tailin utilities it makes it a
80:59 - background cover makes the corner
81:01 - rounded and also adds some Shadow so now
81:04 - if you do that oh my God look at that
81:07 - this our application looks exactly what
81:10 - we want it almost look like the
81:12 - application that we trying to build here
81:14 - which is awesome so this app is already
81:17 - looking pretty good so now we have all
81:19 - our images from our application right
81:23 - away so now this looks pretty great and
81:25 - this is how you could fetch data inside
81:27 - of react plus wheed but if you're
81:29 - already familiar with how data fetching
81:32 - Works in react and it's exactly that but
81:35 - now let's say we want to fetch data
81:37 - inside of nextjs then how would we do
81:39 - the same well if you want to fetch data
81:41 - inside of nextjs then again we would use
81:44 - the exact same we would do the exact
81:47 - same thing so what we are going to do is
81:50 - we literally going to copy all of this
81:54 - because everything stays the same
81:57 - there's nothing in here that should not
81:59 - be in the other page so if we go to our
82:03 - we go back here we should just basically
82:06 - replace the whole thing now if you take
82:09 - a look we get an error saying that you
82:13 - are importing a component that needs use
82:15 - effect this means it only works in a
82:17 - client component and none of its parent
82:19 - are marked with used client so they are
82:21 - server components by
82:22 - default so this just brings to the next
82:25 - topic which is client and server
82:26 - components which we'll talk about in a
82:28 - second but let's just fix this error for
82:30 - now so now we're just going to call this
82:33 - a client
82:35 - component and by calling this a client
82:37 - component we basically saying that hey
82:40 - just do perform the fetch on the in the
82:43 - browser
82:44 - itself so now if we do that you can see
82:48 - that literally
82:49 - nextjs also has the same code and
82:53 - everything works as EXP Ed which is what
82:55 - we want so you might wonder well why did
82:58 - we add that client again well let's take
83:01 - a look at that next so let's talk about
83:03 - client and server components well
83:05 - remember we had to add the use client on
83:08 - top to fix it but let's talk about what
83:11 - that is to begin with so for example in
83:14 - nextjs by default with the app router
83:16 - remember I said that a lot of things
83:20 - changed with app router this is exactly
83:22 - it with app router
83:25 - we get new client and server components
83:28 - and as of this point it's only available
83:30 - inside of
83:32 - nextjs with client
83:35 - components what happens is when a
83:37 - browser requests data for asking to
83:40 - fetch the data what we typically do is
83:43 - make an API request and that's exactly
83:45 - what we're doing right we're basically
83:46 - calling the recipes API and then the
83:49 - server is going to do the work and it's
83:50 - going to return the data the recipe data
83:53 - and then we're going to display that on
83:54 - the page which is our client on the
83:55 - browser this is fine with client
83:57 - components this is exactly what we did
83:59 - just now but but by default in nextjs
84:03 - all the components are server components
84:05 - so if you want to say that hey this
84:08 - needs to be on the client then we need
84:10 - to make it a client component and that's
84:12 - why we had to add the use client
84:15 - directive which is what we did here the
84:17 - use client directive inside our
84:19 - components inside our page so what
84:22 - exactly are server compon components
84:24 - done well what happens in a server
84:27 - component is whenever we the browser
84:31 - that is the client asked to fetch
84:34 - data we now have the ability to make
84:37 - those components themselves as server
84:40 - components what this means is we can
84:43 - just say that hey if this is a server
84:44 - component instead of browser doing the
84:46 - work of calling the API fetching the
84:50 - data and so on whenever we make an API
84:53 - request we make a call to the server the
84:56 - server then returns it back to the
84:57 - browser and the browser then passes the
85:00 - data and shows it onto the page but
85:02 - unless there's an actual need for a
85:04 - browser that means we are calling we are
85:07 - basically calling the window API or we
85:10 - are calling something that specifically
85:13 - needs a browser and we don't need a
85:16 - browser at all we can just make it a
85:18 - server and that's why and that's where
85:20 - server components were born we could
85:23 - just make components as server
85:24 - components this means the server is
85:26 - going to handle everything this means we
85:28 - can make our backend calls on the server
85:30 - itself and then it will get returned not
85:33 - in the form of Json but in the form of a
85:35 - special stream and then the browser is
85:38 - just going to show it onto the page to
85:40 - the
85:40 - user that's why server components are
85:43 - Bor when would you make components as
85:45 - client components let's say you do need
85:47 - a browser then you would make them as
85:49 - client components now in nextjs there is
85:52 - a really good
85:54 - post when should you use server versus
85:56 - client components well if you are
85:58 - fetching data accessing backend
86:00 - resources keeping sensitive information
86:03 - keeping large dependencies and all of
86:05 - that can be on the server but let's say
86:08 - you have onclick handlers onchange
86:10 - handlers you're using any of the react
86:12 - life cycle hooks such as use State use
86:15 - effect and so on and you're using any
86:17 - browser specific API such as the window
86:20 - object or you want to get users location
86:23 - then all of this can only happen on the
86:25 - browser and that is when you need to
86:27 - make it a client component otherwise by
86:29 - default everything else is just going to
86:30 - be a server
86:31 - component so this is
86:34 - why in our case we decided to make it a
86:38 - client component which we'll get to in a
86:39 - second but one of the other pros of
86:42 - server components are that you don't you
86:44 - now don't need to you don't need to
86:45 - create an a brand new API because
86:49 - everything is within the component so
86:51 - you can just get the back call the
86:53 - backend API
86:55 - whatever data response that you get back
86:57 - you show it onto the component so you
86:59 - can call the back end in the same
87:00 - component and now your client bundle is
87:02 - going to be really small because this
87:06 - because there's less stuff to
87:08 - download for the browser because server
87:11 - is performing majority of the operations
87:14 - and this is why you get a performance
87:15 - boost as well with server components
87:18 - which is pretty amazing if you were to
87:20 - take a look at a component do we want to
87:22 - use use client not really even though we
87:26 - definitely use use State because we just
87:29 - copy pasted the code from our client
87:31 - from our V plus react application we
87:34 - could just get rid of
87:36 - this and what we could do is pretty
87:41 - much extract this function out keep it
87:44 - here get rid of this also and instead of
87:47 - set recipes we can just return data.
87:51 - recipes
87:54 - now what we can do here is we can just
87:57 - directly call because this is a server
87:58 - component now because we don't have the
88:00 - used client directive so we can just say
88:03 - recipes is going to be
88:06 - await get
88:08 - recipes and this means we need to make
88:11 - this a async function now everything
88:14 - should work as expected because there is
88:16 - no client functionality at all so this
88:18 - is the beauty of using a server
88:20 - component so now if everything works as
88:22 - expected at applic application should
88:24 - perform as as it should look at that now
88:28 - we have our application identical but
88:32 - the difference is that we are this is
88:34 - going to be way faster than our V plus
88:36 - react application because the server is
88:38 - doing a lot for us but let's say you do
88:40 - want to make it a client component then
88:42 - you definitely need to add the directive
88:44 - on top called use
88:46 - client but in our case we don't need to
88:49 - worry about it because we don't need to
88:51 - add
88:52 - it now let's implement filtering so for
88:55 - example the minute we click on Asian or
88:57 - American or any of these different
88:59 - amazing usines we want to make sure that
89:02 - the cards Al also filter accordingly
89:04 - when we click on American only American
89:06 - dishes show up when we click on Italian
89:08 - only Italian Indian then only Indian and
89:11 - so on the minute we click on all then we
89:13 - want all the Cuisines to show up all the
89:15 - recipes to show up that's exactly what
89:17 - we want to implement here but in a react
89:19 - application the way we would Implement
89:21 - that is by again making sure that we are
89:24 - creating some sort of a filter storing
89:26 - the state of the badge somewhere and the
89:28 - minute we click on that you want to
89:30 - store the state of the badge and
89:31 - basically check the entire list of array
89:34 - and filter by the cuisine itself so for
89:36 - example here we have a Cuisine every
89:39 - time there's a property for that so we
89:41 - could just filter accordingly the way we
89:43 - would Implement that in react is very
89:45 - similar to what we have for get recipe
89:47 - now instead of get recipes and set
89:49 - recipes let's add another state called
89:52 - as filter recipes and set filter recipes
89:56 - again it can be empty and now what we
89:58 - want is let's also create another state
90:01 - for badge and set badge now here again
90:04 - we can just say use State and by default
90:07 - it's just going to be all so now what we
90:09 - could do is we can say that whenever a
90:12 - user clicks on badge so we can just add
90:16 - a onclick Handler here and we can just
90:18 - say handle on click and let's also pass
90:21 - in the event oops pass in the event and
90:25 - also the cuisine that we have selected
90:27 - so here again we can add another Handler
90:30 - called handle on click which is event
90:33 - and Cuisine and here again Cuisine is
90:36 - going to be a string and then event is
90:39 - going to be react. change event with
90:43 - HTML input element this is the event now
90:46 - we want to make sure that whenever a
90:48 - user does select on the batch the page
90:50 - does not refresh so we can just add pre
90:52 - and default at the same time now we can
90:54 - just set the badge to be whatever the
90:57 - user selects now at the same time let's
90:59 - just make sure by default is just empty
91:01 - and then we as the user selects the
91:03 - badge we can enable it now what we want
91:05 - to do is we want to set filter recipes
91:08 - whenever the user selects the badge so
91:10 - for that we definitely need to repurpose
91:13 - the specific function and add a use a
91:15 - filter function to filter the elements
91:17 - so what we could do is we could just
91:19 - create a new function Al together here
91:22 - and we can just call this get all
91:24 - recipes and just paste it and then
91:26 - return data. recipes oops data. recipes
91:30 - here make this an acing function and now
91:32 - instead of you can just say recipes is
91:35 - going to be get all recipes and then
91:38 - let's just await it here now if there
91:40 - are recipes then we can just set the
91:43 - recipes so everything should work as
91:44 - expected but now this enables us to use
91:47 - it inside another function because
91:50 - whenever the user has selected a badge
91:52 - we need to do the same so let's just add
91:54 - another user effect and say that hey if
91:56 - there is a badge then add the code for
91:59 - it but we need to also make sure that we
92:01 - are closing the use effect and only
92:03 - enabling this only this use effect only
92:06 - should trigger Whenever there is a badge
92:08 - so we can just say if there's a badge
92:10 - then get the filtered recipes so we can
92:13 - just say get filtered recipes now the
92:16 - filtered recipes again is going to be a
92:18 - function which is going to be a async
92:21 - function now here we can just call
92:24 - recipes and since we already checking
92:26 - for badge we can just say if recipes.
92:30 - filter recipe if the recipe. cuisine is
92:34 - equal to badge then we want to show we
92:37 - want to set this but let's just make
92:39 - sure we have filtered recipes by Cuisine
92:43 - here and now we only want this when
92:46 - going to set this Whenever there are
92:48 - filtered recipes by Cuisine so now that
92:50 - we have this we need to make one more
92:52 - tweak right now we are are only mapping
92:55 - through recipes but not through filter
92:56 - recipes so what we can say is if filter
92:59 - let's just make sure the name filter
93:01 - recipes if filter recipes. length is
93:04 - greater than zero then show filter
93:06 - recipes else recipes this way we are
93:09 - mapping through filter recipes if there
93:11 - is a filter else we're just going to
93:12 - return the recipes itself so let's just
93:14 - make sure we enclose this that we are
93:17 - able to map it and now if you click on
93:19 - Mediterranean then look at that we do
93:21 - have the filter working as well as well
93:24 - as all recipes as intended and these
93:26 - recipes are definitely mouthwatering so
93:29 - I'm definitely feeling a little hungry
93:30 - right now all right now we have filter
93:33 - implemented too so let's just go ahead
93:35 - and add the type for recipes so I've
93:37 - already added the type for recipe type
93:39 - so let's just go ahead and assign it
93:41 - wherever necessary so here you're going
93:43 - to have recipe type idx is just going to
93:47 - be number similarly we have recipe type
93:51 - here so we can easily access it and
93:53 - that's it so this is how you can
93:54 - Implement filter inside of react with
93:57 - wheat now we want to do the same thing
93:59 - in nextjs so let's see how we can do
94:00 - that now things change a little bit
94:02 - inside of next CHS remember we talked
94:04 - about client and server components how
94:07 - specific components need to be a client
94:09 - component whenever we need some
94:11 - interactivity so in this case we
94:13 - definitely need interactivity whenever
94:15 - we click on any of these items for
94:18 - example then it is interactivity that we
94:20 - need in our tasty next app so what we
94:22 - could do is but if you change make the
94:25 - entire component as client component
94:27 - then we will lose the benefit of
94:28 - performance what we could do is we could
94:30 - extract this badge component and keep
94:32 - the interactivity limited to that this
94:34 - way we can pass around props and make
94:36 - sure everything works as expected so
94:38 - let's just copy this and inside of our
94:40 - UI let's just create a badge filter
94:44 - component again we can just say it's
94:46 - going to be called Das filter let's just
94:49 - paste what we copied let's just also
94:51 - grab the Cuisines here so now let's just
94:53 - import badge as well and we need a
94:57 - onclick Handler so let's just copy that
94:59 - too so now we can just paste what we
95:01 - copied and we also need a set badge
95:04 - badge and set badge which is going to be
95:07 - a use State and then it's going to be
95:09 - empty but again we need to make this a
95:11 - client component all righty so now we
95:14 - have this going so what we could do is
95:16 - inside of our application inside of our
95:19 - page instead of calling Cuisines here we
95:23 - could just say
95:24 - batch filter and that's it now this way
95:27 - we can get rid of this Cuisines as well
95:29 - this way we can definitely have a client
95:31 - component as a child of a server
95:32 - component so this works as expected now
95:35 - how can we Bas make sure that from the
95:37 - batch filter when we do set the badge is
95:40 - the specific badge value badge value is
95:43 - what gets shared externally so that we
95:46 - are able to then filter our page and
95:48 - show and basically also so that we're
95:51 - able to filter the page and show that P
95:53 - page accordingly as well so for that
95:55 - what we can do is we need to also
95:57 - extract this code out into its own
96:00 - component this way this file can still
96:02 - stay a server component you get rid of
96:04 - this too let's create a recipe list
96:07 - component so if we say recipe list. TSX
96:10 - again this is going to be a react
96:11 - functional component say recipe list and
96:14 - now paste it what we copied we don't
96:16 - need this additional div but we also
96:19 - need to just take in whatever import we
96:21 - have here paste it just paste it and now
96:24 - here we'll have recipe list the recipe
96:27 - list can be a client component if we
96:29 - like for example but we need to set the
96:32 - recipes as well we need to make sure
96:34 - that recipes this specific recipe is
96:37 - what gets passed in here so we can just
96:39 - say recipes equals recipes just like
96:41 - that so we need to take in recipes as a
96:44 - prop so we can see recipes is going to
96:46 - be array of recipe type recipe type is
96:50 - something we need so what we can do is
96:52 - just copy paste recipe over here so we
96:55 - can just say the type is going to be
96:57 - recipe type so now we have the recipe
97:00 - and then we can just say this is going
97:01 - to be recipe type and this is going to
97:03 - be number as well so now here we just
97:06 - need to assign recipes is going to be
97:09 - this value all right so now we have this
97:12 - we have we're still making this a server
97:14 - component and passing the data as prop
97:17 - here but whenever there is a filter for
97:20 - example we also need to pass that too
97:23 - like we need to make sure that we are
97:25 - able to get that information as well so
97:28 - so let's just make sure everything works
97:29 - expected so now if we refresh the page
97:32 - you click on any filter it doesn't work
97:34 - for now but we definitely want
97:36 - everything else now in order for us to
97:38 - make sure that batch filter when it does
97:41 - set the value it's setting in a global
97:43 - place where anyone can access it so that
97:46 - eventually we could just filter the
97:48 - recipes as we want now that's not the
97:51 - case anymore right now we're just
97:52 - getting the recipes from the API and
97:54 - just mapping through it we also need to
97:56 - map through filter recipes and for that
97:58 - we need a reducer and a context to set
98:01 - the badge as well as to get the badge
98:03 - value as well we can filter it so let's
98:05 - just go ahead and create a context value
98:08 - so here we can say recipe context. DSX
98:13 - and if we just create a reducer here
98:16 - again the name is going to be selected Z
98:20 - typo here and now the initial state is
98:22 - going to be
98:23 - State and then selected Cuisine is going
98:27 - to be empty similarly if we create a
98:30 - type for initial State it's just going
98:33 - to be let's just say State it's just
98:35 - going to be State selected Cuisine is a
98:39 - string perfect so now the state can be
98:42 - assigned to here let's just move it on
98:45 - top perfect so now we also need a action
98:49 - type here so we can just say type is
98:52 - action type type again type is going to
98:54 - be string and payload can be and we
98:57 - don't need to default export it in fact
98:59 - it doesn't need to export at all so we
99:02 - can just say recipe reducer so what we
99:04 - ideally want is whenever we dispatch an
99:07 - action for selected Cuisine then the
99:10 - selected Cuisine does get set so we can
99:12 - just say selected Cuisine is going to be
99:15 - payload do
99:17 - selected beautiful so now that we have a
99:20 - basic reducer ready to go now what we
99:22 - want is a provider for context so we can
99:26 - just say recipe provider and this can
99:28 - just take children as a prop and
99:30 - children would be react. react node now
99:34 - we can just return it now this is just
99:36 - typical way of creating context so I'm
99:38 - going really fast but if we just say
99:41 - recipe context provider and then render
99:44 - the children here now we also need to
99:47 - make sure that we are getting State and
99:50 - dispatch from use reducer which is
99:53 - naturally exports and here we can just
99:55 - initialize reducer and add initial State
99:58 - here now here's the thing we don't have
100:00 - recipe context yet so we need to create
100:02 - it so we can just say this needs to be
100:04 - exported so we can just say recipe
100:07 - context will be create context from
100:10 - react and then this could be the initial
100:13 - State itself perfect so now the state or
100:16 - I guess I should say the value will be
100:19 - State comma dispatch and instead of
100:22 - state it is is going to be Cuisine and
100:25 - we can just directly access it here
100:28 - right so now let's just go ahead and
100:31 - initialize it or declare it here so now
100:34 - layout is a central spot where everyone
100:37 - the entire application can access
100:39 - everything so we would be creating
100:41 - recipe provider you would declare recipe
100:44 - provider here and wrap our entire
100:46 - application with it so we can just say
100:48 - this so recipe provider is in fact
100:50 - imported from Context which is what we
100:52 - want now that we have this let's just go
100:55 - to badge filter and instead of setting
100:57 - the badge we're just going to get
100:59 - dispatch from use context and then
101:03 - recipe context and now what we're going
101:05 - to do is we're just going to dispatch it
101:07 - so we're going to say dispatch and then
101:09 - the type is going to be what we just
101:11 - defined here and then you're going to
101:13 - have a payload now we said payload do
101:16 - selected Cuisine so we need to Define it
101:19 - selected Cuisine is going to be Cuisine
101:21 - all righty now we have set it now it's
101:24 - time for us to use it here so right now
101:26 - we just get the recipes from the API and
101:28 - declare it but what we need to do is get
101:31 - just filter the recipes here and paste
101:33 - it here too so we can just paste it and
101:35 - just let's just get the use effect as
101:37 - well we don't need recipes because we
101:40 - get that already from the API and
101:41 - instead of badge this time it's going to
101:43 - be the context that we want so you're
101:46 - going to copy this line add it here get
101:48 - import everything as needed use State
101:51 - and then state will have have the
101:53 - cuisine value the selected Cuisine value
101:56 - so we can just add that here and then we
101:59 - also need the use State the state value
102:02 - of filtered recipes here again let's
102:05 - import this two now we don't have badge
102:07 - but we do have selected Cuisine so let's
102:10 - update that similarly let's just update
102:12 - the dependencies as needed now this is
102:14 - just going to be recipe type array
102:17 - perfect so now we have this we need to
102:20 - add the same condition that we had here
102:23 - which is that if we have filtered
102:25 - recipes then we just need to get it and
102:27 - set it just like that all right so now
102:29 - let's just test it out and see what
102:31 - happens so now it says that you're
102:33 - importing a component that needs create
102:35 - context so it needs to be a client
102:37 - component so here we need to make this a
102:39 - client component but because of the
102:41 - children pattern that we using here only
102:44 - this component will be client component
102:46 - all right so now if I click on Mexican
102:47 - look at that everything works as
102:50 - expected and we are able to filter the
102:52 - way we would want it to so this is how
102:55 - filtering would work and this is how you
102:57 - could basically pull out the value and
102:59 - store it in a global place as well so
103:01 - now speaking of data fetching as we
103:03 - implemented context you can see over
103:05 - here with fetch the specific fetch
103:07 - function is special because by default
103:09 - it has an additional property of cash
103:12 - which is not something that's available
103:14 - in our in the react Ved world this is
103:16 - something that's over here so we by
103:19 - default it's in fact Force cash but
103:21 - let's say I don't want it to cash then I
103:23 - I could pick the other options as well
103:24 - so this fetch function is definitely the
103:27 - special function that we talked about
103:29 - now let's go ahead and build the
103:30 - individual recipe page all this recipe
103:32 - page does is that displays more details
103:34 - about the API and when you click on back
103:36 - to all recipes then it goes back to how
103:39 - it was now whenever you click on any of
103:42 - the individual cards is when we out so
103:44 - again back in react what we could do is
103:47 - on the homepage for card in order for us
103:49 - to link between Pages we can just say
103:51 - HRA and then close the entire card with
103:55 - a link and this time we can just say
103:57 - just go to recipe slash and we can say
104:02 - recipe. ID now this way we are linking
104:05 - between pages so homepage card can go to
104:08 - recipe page for example so if we click
104:10 - on whoops if we go here and click on
104:13 - classic margarita pizza we do get taken
104:16 - back any of these cards should take us
104:18 - back accordingly but this is recipe 1
104:20 - this is recipe 2 in the URL and three
104:24 - and so on so which is what we want so
104:26 - now let's just go ahead and build the
104:27 - recipe page further now in order for us
104:29 - to build the individual recipe page we
104:32 - just need to get the ID from the
104:35 - individual page and accordingly pull it
104:37 - now as we talked about earlier whenever
104:39 - we go to slash two and that gives you
104:41 - the individual recipe itself so what and
104:44 - we can use this specific image too so
104:46 - right now what we can do is we can just
104:48 - pull that so now in create in react
104:50 - router we can get any individual the ID
104:53 - in the URL by using a function called as
104:56 - use perams what we can do is we can just
104:58 - get the recipe ID from use Rams router
105:02 - this should give us the recipe ID itself
105:04 - and now we can just get the individual
105:07 - recipe and display it so again very the
105:10 - same idea as before we have the use
105:12 - effect and then we're going to just set
105:14 - the recipe accordingly so recipe set
105:17 - recipe use State now we can just say if
105:20 - there is a recipe ID then perform the
105:23 - operation of fetching the recipe fetch
105:25 - recipe recipe ID so now here we can just
105:28 - make this an async function so we can
105:30 - just say fetch recipe a sync now we can
105:35 - just get the recipe so now what we can
105:37 - do is we can just pretty much copy what
105:39 - we had for getting the recipe so we can
105:42 - just copy this code paste it and now
105:45 - instead of/ recipes we can just make it
105:49 - so that we can just get the recipe ID
105:52 - here and we don't need to pass it we can
105:53 - just grab it globally which we have it
105:55 - here now we just directly get the
105:57 - recipes from as an object so we don't
105:59 - need to we can just this is literally
106:01 - the recipe itself so what we can do is
106:03 - just say set recipe as data so this way
106:07 - we get the information as needed so we
106:09 - can just print dat oops data data do
106:13 - name if everything works as expected
106:15 - oops we can say recipe dot name now in
106:18 - case there is no recipe for example we
106:20 - can just say you know no no recipe found
106:24 - so now if you take a look we go here you
106:26 - can see there's classic margarita pizza
106:28 - similarly this should say vegetarian
106:30 - stir fry it does say that chocolate chip
106:32 - cookies and so on so that means our page
106:34 - is ready to get built just like we have
106:36 - a link component inside of nextjs
106:39 - there's also a link component for react
106:41 - router D that we could utilize so right
106:43 - now whenever the app that we trying to
106:45 - build we it does say back to all recipes
106:47 - so we can just copy this and here
106:49 - instead of ring relying on something
106:52 - else we can just use the link component
106:54 - from react router Dom and let's just say
106:57 - two and this just can just go back to
106:59 - home for example so now if we take a
107:01 - look at the app go back here it does
107:04 - take us back to home as intended is what
107:07 - we want but obviously there's more that
107:09 - we display on the page here so as usual
107:11 - I'm going to provide the styling for you
107:13 - so let me just paste The Styling for our
107:15 - app there you go so all we're doing here
107:18 - is we're getting the recipes we printing
107:20 - the names servings prep time minutes and
107:24 - all of that but also adding The Styling
107:26 - with it too back to our app you should
107:28 - see our recipe getting displayed as
107:30 - intended which is exactly what we want
107:33 - but you notice how there is like a
107:34 - really nice gradient in our app that
107:37 - does not exist in the app that we have
107:39 - so let's just add the gradient as well
107:41 - so inside of Tailwind when we go to
107:43 - index. CSS there are three different
107:45 - layers we have the base layer then we
107:47 - also have the components layer and the
107:49 - utilities layer now whenever you want to
107:51 - create a custom class name that could
107:52 - could be utilized in multiple places
107:54 - then you could use the different layers
107:57 - according so if I want to create a
107:59 - custom utility then I could just use the
108:01 - utilities layer itself if I want to
108:03 - create a custom Tailwind component then
108:05 - I could use the layer for components but
108:07 - now since I want to create a utilities
108:10 - this is a way we can extend it so we can
108:12 - say fancy gradient and then we can just
108:15 - paste the specific gradient that I have
108:17 - already created for us this just makes
108:19 - it a radial gradient and these are the
108:21 - three different color stops so it starts
108:23 - from left then turns into Violet and
108:25 - then it's orange towards the end so now
108:28 - if we go back you can see that we have
108:31 - this beautiful G gradient applied
108:33 - similarly because the class name called
108:34 - Francy gradient was already on the card
108:36 - as well we also got this specific
108:38 - gradient so our app is looking really
108:40 - really good now in order for us to
108:42 - implement the same inside next year we
108:43 - need to do something slightly different
108:45 - we need to use something called as
108:46 - generate static params now what these do
108:49 - is that they return a list of params to
108:52 - populate the Dynamic segment and because
108:54 - in nextjs we can cach a lot of the data
108:57 - service side render it and cach it
108:59 - because of that we don't need to
109:01 - necessarily retrieve the data every
109:03 - single time cuz right now what happens
109:04 - in our react app is that every single
109:06 - time the data is retrieved but we don't
109:08 - need to do that in nextjs we can just
109:10 - cache it for that we need to tell nextjs
109:12 - that hey I want you to basically cache
109:15 - all of these params and then keep it in
109:18 - the cache itself keep it in the Cash
109:20 - Store so next time the user access it
109:22 - the same cache itself so what we can do
109:24 - is we can just copy this and head over
109:26 - to nexts page inside of recipes and this
109:30 - time we just going to paste what we
109:31 - copied now here we are just going to
109:33 - give nextjs all the list of pages that
109:37 - we want to Cache so next JS can just
109:39 - cash it and for that reason we can just
109:43 - pretty much copy what we had inside of
109:45 - page so here we have the get recipes
109:47 - function so we can just extract this
109:49 - function out and in the lib utils or I
109:52 - guess let's just create a new lip for
109:54 - oops new lip for recipe and here let's
109:57 - just add it so anyone can access it from
110:00 - here so now in our page let's just
110:03 - import it similarly let's also import it
110:06 - here too so we can just say recipes are
110:08 - going to be get say await get recipes
110:12 - now we can just map through the recipes
110:15 - and this can be recipe will which will
110:17 - be of type recipe type and now here
110:20 - instead of slug it's going to be recipe
110:22 - ID because that's what we defined here
110:24 - the dynamic slug segment is going to be
110:26 - recipe ID so we can just say recipe ID
110:29 - is going to be recip do ID and we always
110:32 - want to make sure that ID is always a
110:34 - string and not a number so we need to
110:37 - make it do to string so now this tells
110:39 - nextjs that please generate and cash all
110:42 - these paths in general Whatever Gets
110:45 - generated in this will be accessed it
110:47 - next time but we still need to access
110:49 - the individual recipe as well over here
110:52 - so so for that we need can just we can
110:55 - just copy what we created in the recipe
110:57 - page here so now we can literally copy
111:00 - all of this and then paste it inside the
111:02 - page we don't need a use effect at all
111:05 - here we can just directly call it
111:06 - because by default this is a server
111:08 - component we don't even need react here
111:10 - you don't need to set the recipe we do
111:12 - need recipe ID now in nextjs we could
111:15 - just access the prams here and then
111:17 - params are going to be we should say
111:21 - recipe ID going to be string now Rams
111:24 - would be just here now we don't need any
111:27 - of this but if there is no recipe then
111:30 - we can get it we need to make this an
111:32 - async function and now we are able to
111:35 - get the recipe itself from our API and
111:38 - now again like we did earlier we can
111:41 - just get recipe. name and add it here
111:44 - now if we go to our nextjs app and click
111:47 - on classic margarita pizza nothing
111:50 - happens because we haven't linked it so
111:51 - now just like we did in our react app
111:54 - let's just go to our page and then link
111:57 - it so now here in card we can just add a
112:00 - link component href is going to be two
112:04 - back ticks and then let's get this and
112:08 - move it here now all we need here is we
112:11 - need to move this key on top and now all
112:14 - we need here is/ recipes recipe. ID
112:17 - there you go so now if we try again when
112:20 - we click on it it takes us and it shows
112:22 - us classic margarita pizza which is
112:24 - exactly what we want similarly it also
112:26 - gives us the vegetarian surfy name then
112:28 - we have chocolate chip cookies and so on
112:30 - and just like we did in our recipe page
112:32 - in react which is what we have here what
112:35 - we can do is pretty much get the recipe
112:38 - styling that we have and then add it to
112:40 - nextjs 2 so we can just get the recipe
112:43 - page and add it here now if everything
112:45 - works as expected the only thing is we
112:48 - need to add import the link component
112:51 - from nextjs here in of react router D
112:53 - and this should be hre all righty so now
112:56 - if we go to a classic margarita pizza we
112:59 - do get the classic margarita pizza we
113:01 - want with all the details similarly if
113:04 - you want vegetarian stir fry then we do
113:06 - get that as well then we have chocolate
113:08 - chip cookies and so on which is which is
113:10 - what we want now lastly let's just also
113:12 - add the gradient that we want as well
113:15 - again similar idea but the gradient
113:17 - would be slightly different this time so
113:19 - if we go to index. CSS that is copy this
113:23 - whole thing go to another file here it's
113:26 - not index. CSS here it's global. CSS and
113:29 - all the way to the bottom oops let's add
113:32 - but let's just tweak tweak it because we
113:34 - don't want the same colors all over
113:36 - again just make this orange we'll make
113:39 - this 400 and that's it let's see now
113:41 - well look at that our colors are looking
113:43 - beautiful and if you click on vegetarian
113:45 - stir fry then it also changes the
113:47 - background of this to which looks really
113:49 - good I'm very happy with how the app has
113:52 - come along so far and along with
113:54 - alongside that we're learning so much
113:56 - comparing reat with react alongside nexs
113:59 - 2 which is pretty awesome so this is how
114:01 - you would essentially Implement caching
114:04 - inside of nexs but how it works inside
114:06 - of react plus V2 it's pretty much
114:09 - typical react app that we are building
114:11 - for react plus weed but the difference
114:13 - is that in inside of nextjs we can
114:15 - basically cash all these so how exactly
114:17 - should you get started with react should
114:19 - you go with the framework or should you
114:21 - go with react plus speed well here's the
114:23 - thing as a beginner reactive it's really
114:25 - important for you to focus on react and
114:27 - weat and here's why even though
114:28 - Frameworks do provide a lot when though
114:30 - the react dogs recommend the use of
114:32 - framework it's really important that you
114:35 - understand what goes behind the scenes
114:36 - as well cuz if you were to get stuck
114:39 - while fetching data you can already see
114:41 - that next yes caches a lot by default so
114:44 - you may not know how to purge the cash
114:46 - or the fact that it's happening to begin
114:48 - with so this is why it's really
114:50 - important that you start with react plus
114:52 - we because you don't get get any
114:54 - specific caching there's not a lot done
114:56 - for you so you get to pick what you want
114:58 - now react as a beginner Dev is already
115:00 - complex enough there are too many topics
115:02 - such as react life cycle hooks how to
115:04 - update State how to avoid rendering how
115:07 - does rendering work and so on so react
115:09 - in itself is definitely a beast that you
115:12 - really need to master before you get
115:14 - involved with other Frameworks like
115:15 - nextjs or remix or anything of that sort
115:18 - that's why I would highly recommend you
115:20 - to go with react plus weed and that's
115:22 - why why this specific crash course was
115:23 - provided so that you get a really good
115:25 - understanding that hey how does life
115:27 - look like with react plus weed and what
115:29 - does that compare to using a framework
115:31 - as well so even though nexts is great as
115:34 - a beginner reactive it might really trip
115:36 - you up because nextjs by default cashes
115:38 - a lot so if data does go stale and if
115:41 - you're not sure how to purge that cash
115:43 - then you're going to get really confused
115:44 - as a beginner de you may not even think
115:46 - it's the framework that's doing it you
115:47 - may think that it's your own mistake
115:49 - which can be which may be true too but
115:51 - again it's really important important
115:52 - that you start with react plus s and
115:54 - then as you get more familiar with react
115:56 - and how it works then start adding a
115:58 - framework and use a framework but if you
116:00 - were to get started with a production
116:01 - application obviously it depends on your
116:04 - needs if you get a chance to start on a
116:06 - brand new project where you are among
116:09 - the few developers that are starting
116:10 - their specific project then I would
116:12 - highly recommend you to take a look at
116:14 - the pros and cons of framework as well
116:16 - as react plus site and just see how the
116:19 - two compare with each other also look
116:21 - into deployment options for how it looks
116:23 - like and you want to maybe evaluate that
116:25 - as a cloud platform as well for a
116:27 - specific company there's obviously a lot
116:29 - that goes to make sure application can
116:32 - scale V and so on so this is why this
116:34 - course was provided to help guide you so
116:37 - that even if you are getting started or
116:39 - not you can sort of compare what the
116:41 - world looks like with reactor suite and
116:43 - alongside a powerful framework like that
116:45 - now let's talk about performance now
116:47 - react plus weed by default doesn't have
116:49 - much when it comes to Performance yes we
116:51 - can optimize the react re rendering and
116:54 - make sure that the client side rendering
116:56 - is really fast and so on but out of the
116:59 - box there's nothing that it provides if
117:01 - you but if you were to use nextjs then
117:03 - just like the link component that we saw
117:05 - earlier which extends the HTML anchor
117:07 - element there's also a image component
117:09 - that nextjs provides you based on the
117:11 - user's viewport nextjs image component
117:14 - is only going to download the image
117:15 - sites necessary for your viewport for
117:17 - example if we go to the next yes app
117:21 - that we have over here and let's just
117:23 - view all the images so now let's just
117:25 - head over to the nexts app and let's go
117:28 - to the browser developer tools and right
117:30 - now we are on mobile this cash and now
117:33 - if I empty cash and hard reload let's
117:35 - see what the image size is of this one
117:37 - it's now 127 kiloby but now let's say I
117:40 - clear this and switch to mobile for
117:42 - example on a smaller device and let's
117:45 - clear this and let's just see empty cash
117:47 - and hard reload and see what happen this
117:49 - same image is now 83 kiloby now you can
117:52 - already see how the image component is
117:54 - performing really well here on a smaller
117:56 - device we don't need a huge image and
117:59 - these kilobytes are going to add up so
118:01 - that is why it's really important that
118:02 - we use the next year image component
118:05 - because it's gives us a lot of
118:07 - performance benefit out of the box so
118:09 - you may want to check out all the
118:11 - different properties that nextjs has and
118:13 - to configure your image so how about we
118:15 - just go ahead and do the same in our
118:18 - image here so now let's just go to our
118:21 - image so like we can go to recipe list
118:24 - and inside that there's the card
118:26 - component we have the image and this is
118:28 - why the prompt was that you need to use
118:31 - the image component here we can just use
118:33 - the image component from next image and
118:35 - that's it that's all we need to do so
118:37 - now as we do that it does say that we
118:39 - need to configure the domain and if you
118:41 - click on this specific URL we can just
118:43 - pretty much copy what we have here and
118:45 - we need to add
118:47 - cdn.com so if you go to next config here
118:50 - let's just add CDN dummy jon.com and we
118:55 - just need it on all ports now let's
118:57 - refresh the page and see what happens
118:59 - let's see so now you can see that the
119:01 - image still appears but now it uses a
119:04 - performing next year's image which means
119:06 - we going to get a lot of performance
119:08 - benefits out of the box which means that
119:10 - we are going to basically download a
119:13 - smaller image based on user viewport and
119:15 - as a result our app is really performant
119:17 - now there's a lot you can do with image
119:19 - component in general but I but I just
119:21 - want wanted to give you an overview of
119:23 - how there are specific components in a
119:25 - framework that make your app really
119:27 - performant out of the box but just by
119:29 - the fact that you're using them let's
119:30 - talk about fonts now so speaking of
119:32 - performance when you were to use fonts
119:35 - inside of react plus speed we just have
119:37 - to mainly just imported in our HTML file
119:39 - and that's pretty much we don't get any
119:41 - font optimization out of the box but
119:43 - let's say we want to optimize our fonts
119:45 - in general the next yes does offer us a
119:48 - a font package that will allow you to
119:51 - optimize any font fonts and remove any
119:53 - external requests in general so what
119:54 - they do is that they Again download our
119:57 - font files and our CSS file just like
119:59 - our additional assets that we have and
120:01 - download them at Bild time and they are
120:04 - self-hosting the rest of the static
120:06 - assets just like that so if you were to
120:08 - use Google fonts which again we can just
120:10 - use Google fonts using the same package
120:12 - it's really easy you need to import a
120:14 - new link from Google fonts or download a
120:16 - package it's all available out of the
120:18 - box and also no requests are sent to
120:20 - Google as well so we could just directly
120:23 - use Google fonts in general so because
120:25 - the font files are downloaded and then
120:28 - cached and then we can access it
120:29 - whenever an application is gets really
120:32 - fast now one of the reasons why your
120:34 - application the fonts can have a
120:36 - significant impact on your application
120:39 - you download a really heavy font it
120:40 - might really slow down your application
120:42 - and really cost your performance so
120:44 - that's why this next font package is
120:45 - really useful in order for us to use
120:47 - fonts and apply fonts in our app for
120:50 - example in the react TW we want the
120:51 - header to be a specific font we also
120:53 - want the rest of our page to be a
120:55 - specific font too what we're going to do
120:57 - is we're just going to head to Google
120:59 - fonts going to select two fonts we're
121:00 - going to select the Lita one font and
121:02 - also we're going to select the monserat
121:04 - font all we need to do is just copy this
121:06 - code head over to our react file and go
121:08 - to index.html and just add it in our
121:11 - head element this would mean that our
121:12 - two fonts are downloaded monserat as
121:15 - well as theader now if we head over to
121:18 - our app and go to our Network Tab and we
121:21 - look for Google font you can see that
121:24 - lilita 1 and monserat have been applied
121:27 - as well but now they are not necessarily
121:29 - applied to the elements themselves and
121:32 - for that what we're going to do is we're
121:33 - going to head to index.css and here we
121:36 - are mainly just going to paste what I
121:39 - have here we're just going to paste all
121:41 - the font families that we have so we're
121:43 - applying H1 to monat monserat and so on
121:47 - we can just tweak this and say H1 is
121:49 - going to get Lita one the font we have
121:52 - downloaded and now you can see Lita 1 is
121:55 - in fact a really cool font and then the
121:57 - rest of the fonts have moner ad has been
122:00 - applied to the rest of the font so for
122:02 - example if I inspect element select the
122:04 - specific title then it's moner ad
122:07 - whereas this one is L one so that's how
122:09 - you can just apply fonts and react plus
122:11 - site you want to do the same thing
122:12 - inside of next and what we can do is
122:15 - again use the next font package the next
122:17 - font is already available as an import
122:20 - so instead of inter font which gets
122:22 - applied by default when you bootstrap
122:24 - your nexs app then here we can just get
122:26 - Lita one and moner
122:29 - rat now what we're going to do is we're
122:31 - just going to say mon set out is going
122:33 - to be default and just keep it as is and
122:35 - add the weight necessary too so we can
122:38 - just get different weights that we want
122:40 - so we want 500
122:43 - 600 700 similarly if we want lilita as
122:48 - well then we can just get Lita font to
122:51 - so we can just just say again going to
122:53 - be Latin and then we're just going to
122:55 - say weight is going to be it only has
122:57 - one weight so it's just going to get 400
122:59 - so now alongside enter what we could do
123:02 - is we can just apply enter whoops enter
123:06 - as a class name and then we can also
123:08 - apply Lita as a class name too so this
123:11 - is how we can apply multiple fonts as
123:13 - well but again it's not going to work
123:15 - until we apply it here too so again
123:18 - we're just going to do the same copy
123:20 - pasting over here we're just going to
123:23 - say Lita one for H1 minute we do that if
123:26 - you head over to our nextjs app you can
123:29 - see how the different fonts have changed
123:32 - this one should be lilita one and then
123:35 - even these ones have lilita one for some
123:37 - reason so we can fix that but or we can
123:39 - keep it as is it doesn't matter but for
123:41 - example you can see how monserat has
123:44 - been applied to the of the text on the
123:46 - page so this is how you can apply fonts
123:48 - in xjs and how simple it is now you can
123:51 - do whatever you want the difference is
123:53 - that in with react plus wheat we did not
123:56 - get any performance benefits versus with
123:58 - nexs these fonts are going to get
124:00 - bundled and and available at build time
124:03 - and they are they they are basically
124:05 - going to be cashed and not redownloaded
124:07 - every single time from Google which is
124:09 - what we want so this gives you a really
124:10 - huge performance so now let's talk about
124:12 - search engine optimization and SEO now
124:15 - the way SEO works is that let's say on
124:17 - Google I type best mushroom lamp or I
124:20 - basically just type best recipes or best
124:23 - chicken recipes and so on that our site
124:25 - should be available on Google otherwise
124:28 - it's not going to get discovered unless
124:30 - you share the direct URL to your friends
124:33 - let's say we look for best mushroom lamb
124:34 - we have three different results orange
124:36 - lamb CB2 mushroom lamp and a post on top
124:39 - five mushroom lamp now the reason why
124:41 - these three things showed up on Google
124:43 - is because they are following a specific
124:46 - criteria that's necessary due to which
124:48 - Google have ranked them higher now in
124:50 - order for you to learn about SEO in
124:52 - general this is a really good guide on
124:55 - developers.google.com which is amazing
124:57 - that you should check out on how Google
124:58 - search works but give you a really quick
125:00 - summary we need to have a few different
125:02 - criterias to make sure that are we get
125:05 - more points by Google by the different
125:07 - search engine Bots that Google sends out
125:10 - to basically parse our site and check
125:12 - out what's on our site one is the
125:13 - description of the site so for example
125:15 - whenever we go to any site we should
125:18 - have a really good description so let's
125:20 - say we go to my website and if we go to
125:23 - the network tab right now in the head
125:25 - element I have a title of my website
125:27 - which is my website but then I also have
125:29 - a description here which is tutorials
125:31 - for developers and Engineering leaders
125:33 - and this is what I focus on I have an OG
125:35 - image I have a bunch of I have a URL I
125:38 - have a image all tag I have some Twitter
125:40 - information and so on now all of this is
125:43 - really important when it comes to
125:45 - configuring your site for SEO
125:47 - description is important what the site
125:49 - is all about What's the title of the
125:51 - site what's a canonical URL that is what
125:53 - is the true URL of that specific site am
125:55 - I following any semantics so if there
125:57 - are NE if it's necessary then for
125:59 - example this specific value should be H1
126:02 - because this is very important but this
126:04 - is for example P tag honestly this could
126:06 - be H2 and so on but like for example
126:09 - this one is H2 because this is really
126:12 - important title on my website and this
126:14 - necessarily needs to be H3 because again
126:18 - this is really important on my website
126:20 - now all of this is is really important
126:22 - and this specific hierarchy is what
126:24 - Google looks at when it tries to parse
126:26 - your website and there's a lot more that
126:27 - goes in SEO but these are a few things
126:29 - we need to definitely take a look at
126:31 - when it comes to SEO now an application
126:34 - should allow us to easily update this
126:36 - information unfortunately in react and V
126:39 - world it's not as straightforward if we
126:41 - were to update the description and add
126:43 - any of the metatags on the homepage then
126:45 - we could add that over here for example
126:48 - we could change this title to Tasty
126:51 - react and this is good in order for us
126:52 - to add the description we can add the
126:55 - description here and then all any of the
126:57 - meta taxs in general configure our site
127:00 - further but let's say we I want to do
127:01 - the same dynamically for the recipe page
127:05 - there is no API that's available out of
127:07 - the box to do that and this is where a
127:10 - package like react helmet is very useful
127:13 - where you could basically update it and
127:15 - it you can see already it has so many
127:17 - downloads but you can update the meta
127:19 - tags in your site and dynamically
127:21 - generate them this is great but it's not
127:23 - available out of the box what say inside
127:25 - of nextjs there is a specific API called
127:28 - as the metadata API now anytime you want
127:31 - to expose the title and description you
127:33 - can easily do that with the metadata API
127:35 - in fact if you go into layout it's
127:37 - already exposed here so if I want to
127:39 - change the description all I need to do
127:41 - is update this tasty next and if I want
127:44 - to say whatever description I want
127:46 - curated recipes based on 10 plus
127:51 - different
127:52 - Cuisines such as Indian American Asian
127:57 - and more something like that then in
127:59 - that case now this gives a really good
128:01 - description for my site now let's say if
128:03 - I want to update the URL in metadata API
128:06 - I could easily do that by looking at the
128:08 - documentation for instance but at the
128:10 - same time if I want to update Dynamic
128:12 - metadata then there is a function just
128:14 - like we have the function for Generate
128:16 - static prams there is a function for
128:19 - Generate generate metadata and we can
128:21 - can update open graph images we can
128:23 - update different different information
128:26 - and so on now this is all really
128:27 - straightforward inside of nexts because
128:29 - it gives us really uh additional
128:31 - capabilities for doing that but in order
128:33 - for us to do the same thing in react and
128:34 - V we might have to install a package
128:36 - called react helmet and there are more
128:38 - that I haven't really discovered yet but
128:40 - SEO is something that should be top of
128:42 - mind and next yes does make it a lot
128:44 - easier for you or Frameworks in general
128:46 - will make it a lot easier for you to do
128:48 - that because they do think about all of
128:50 - this in mind now now first load of your
128:52 - website is also really important for SEO
128:54 - so as we have seen earlier whenever we
128:57 - look let's say we disable JavaScript in
128:59 - this specific app we have done this
129:01 - before but if you do that again and
129:03 - disable JavaScript refresh the site we
129:05 - get a blank page versus if you were to
129:07 - do the same thing inside of nextjs Guru
129:09 - sources disable JavaScript and refresh
129:12 - the page we still have a fully
129:14 - functional site so when Bots look for it
129:16 - they're going to get all the information
129:18 - necessary we have a fully functional
129:20 - site we don't necessarily need
129:21 - JavaScript that means there's minimal
129:23 - JavaScript that needs to be downloaded
129:24 - and because we're following semantics
129:26 - our site is going to rank higher so this
129:28 - is why using a framework that focuses on
129:31 - pre-rendering and gives you that server
129:32 - rendering is really important versus
129:34 - something like react plus weed so using
129:36 - something like wi that will give you
129:38 - that server rendering capability is
129:40 - really really important as well so
129:41 - definitely keep that in mind when you
129:43 - make a choice for what you want to use
129:45 - in your app so now before we wrap up
129:47 - let's just make typescript happy and
129:49 - make sure that you're not making any
129:51 - mistakes with initializing state or
129:54 - anything of that sort so one for recipe
129:56 - context we added payload as any but we
129:59 - do know the payload now we know that
130:01 - payload is going to have selected
130:03 - Cuisine because that's exactly what we
130:06 - are setting over here payload do
130:09 - selected Cuisine so let's just make sure
130:12 - we have that specific payload and then
130:15 - it does say that state has no properties
130:17 - in common with type so as we decide to
130:20 - assign selected quisine directly we also
130:23 - can just tweak this area so we don't
130:26 - need an additional property called State
130:28 - we can just make it by default as
130:31 - state now recipe context does not know
130:35 - what the initial State value should be
130:37 - or the type should be so let's just fix
130:39 - that so we can just say it's going to
130:42 - have two values one is going to be the
130:44 - state is going to be just State and then
130:48 - the other value is going to be a
130:50 - dispatch fun function is going to be
130:53 - react.
130:56 - dispatch and then we just going to take
130:59 - an action type here now the initial
131:04 - State can probably have dispatch
131:07 - function as
131:08 - well which is going to be
131:16 - null whoops not here but here
131:22 - now this can be optional too text will
131:24 - be initialized with State as initial
131:27 - State and then
131:30 - dispatch is just going to be
131:35 - null so now this way we have made
131:37 - typescript happy because we have added
131:40 - the necessary types for everything now
131:42 - if we head to badge
131:44 - filter it should be a mouse event
131:46 - instead of a change event so let's just
131:48 - fix that too so we can just say mouse
131:50 - event
131:54 - HTML div
131:56 - element and then mouse
132:00 - event all righty now in order for us to
132:03 - make sure that everything works as
132:05 - expected let's go ahead and run a
132:07 - production bill now we have an
132:09 - additional command called build that
132:11 - will help us run a build for production
132:14 - so it will bundle all our files together
132:16 - and let us know if there are any errors
132:18 - as well so now here
132:21 - let's just go ahead and run npm run
132:23 - build now the minute we do that it's
132:26 - going to create a production Bill
132:29 - compile all the files and now it has
132:31 - given us an warning saying that image
132:34 - should result in slower LCP higher
132:37 - bandwidth consider using an image
132:39 - component so we forgot to
132:42 - change after copy pasting the recipe
132:46 - itself the image
132:48 - component for example here we don't need
132:51 - to
132:54 - use we don't need to use image we can
132:56 - just use the image component from nextjs
133:00 - and here let's just add recipe.
133:03 - name so now if you run the build again
133:06 - let's see what
133:11 - happens it's generating our static pages
133:14 - and collecting all the page data and now
133:17 - you can essentially see that we have
133:19 - essentially cached
133:21 - recipe 1 2 3 and 27 more paths so
133:25 - whenever we essentially Run npm Run
133:29 - start then our experience is going to be
133:31 - a lot faster for our users as well and
133:34 - this is because we have essentially
133:36 - used generate static perams as
133:41 - we as we created here and this just
133:45 - basically caches all the recipes that we
133:47 - have from the APR
133:51 - so now we can just run npm run start
133:55 - just to make sure everything works as
133:56 - expected so now we can just go to Local
133:59 - Host
134:00 - 3000 and make sure everything works as
134:03 - expected all righty so our application
134:06 - loaded really fast and if you click on
134:09 - any of the information then it works as
134:11 - expected then we have filtering working
134:14 - as well on different Cuisines and you
134:18 - can see how quick the application load
134:20 - is the initial load of our application
134:22 - is really important so this is really
134:26 - good now if you were to do the same
134:28 - thing with react let's say we were to
134:31 - run
134:32 - a npm run build which runs the build for
134:37 - react we have quite a few errors here so
134:39 - let's just fix that
134:42 - too so if you go to
134:44 - react you can see here we have these red
134:47 - swigle lines it says that property name
134:49 - does not exist on type so what we need
134:52 - to do is when we created State we can
134:54 - just add a type here called as recipe
134:57 - type so that we are
135:01 - telling the weed bill that hey we know
135:04 - this type and this does exist with all
135:06 - these different
135:08 - properties now if you go to
135:11 - homepage and if you take a look at e tag
135:14 - again we can use the mouse event
135:19 - itself so here we can just say react
135:23 - dot mouse
135:25 - event
135:27 - whoops and then just paste that
135:29 - similarly let's just copy this and paste
135:33 - the same over here as
135:36 - well all righty so now we have this
135:39 - let's also delete this code because we
135:41 - don't need it importing react but we're
135:44 - not using it
135:45 - anywhere so for that let's just get rid
135:48 - of it
135:51 - in the homepage do we have it no in the
135:54 - Navar we do have it let's get rid of
135:57 - that
135:58 - too we had it in Navar we have it in
136:00 - recipe page now let's run a build again
136:03 - so it's building for production and it
136:05 - has essentially built for production
136:08 - which is pretty amazing just go ahead
136:10 - and start our site and we have a preview
136:11 - command that we can use to start the
136:13 - site so let's do that so
136:17 - now the page load was also quite instant
136:20 - if you click on it then it's going to
136:22 - load the API
136:26 - data and then if I go back to all
136:28 - recipes we can filter everything as well
136:31 - as expected as intended so our
136:34 - application is looking pretty good but
136:36 - keep this in mind API calls are being
136:38 - made to get all the recipes and then
136:42 - individual recipes too so for example if
136:45 - I refresh the page you can see an API
136:47 - call is being made versus inside of
136:50 - nextjs
136:51 - if I go to the network tab you can see
136:56 - that this is the react server component
136:58 - description file that I talked about
137:01 - which is a very different looking file
137:02 - than a Json file it is not Json but
137:05 - that's what it uses to essentially get
137:07 - the description of the page and generate
137:09 - all the pages all righty this is how you
137:11 - set up an application in react Plus weat
137:15 - versus nextjs really hope you enjoyed
137:17 - this specific course thank you so much
137:20 - for checking out this specific crash
137:21 - course as next steps please go ahead and
137:23 - subscribe to my Channel at Kara because
137:26 - I really focus on tutorials and
137:29 - different crash courses and different
137:31 - things that help you level up as a
137:33 - developer in your career as well as if
137:35 - you into engineering leadership then I
137:36 - have some stuff for that too at the same
137:38 - time if you are interested in learning
137:41 - nextjs further then I also am running a
137:43 - nextjs workshop and you should just
137:45 - check out at next year's workshop. to
137:48 - sign up and you may get some launch disc
137:50 - counts as you part as you watch the
137:52 - specific free Cod Camp video so thank
137:54 - you so much for watching bye for now