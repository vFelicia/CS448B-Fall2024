00:01 - uh
00:02 - so my
00:03 - talk is
00:05 - fizz buzzkill
00:07 - um
00:09 - and we'll talk about that in a second
00:11 - but this is uh
00:14 - related to the concept of
00:16 - questions you might get in an interview
00:18 - um i am russell anderson
00:21 - um i am a husband and a father i live
00:24 - here in nashville in inglewood i'm a
00:26 - christian i'm also a terrible golfer
00:28 - though it's probably my favorite hobby
00:30 - it keeps me humble very humble and i'm
00:33 - real real russ on twitter
00:35 - i work for a company called simply agree
00:37 - it's a startup here in town and we are
00:41 - workflow
00:42 - software for attorneys specifically
00:45 - transactional attorneys at this point
00:47 - um i am a front-end developer
00:50 - and um
00:52 - i think that you can all glean from
00:54 - this weekend that that
00:56 - that is a like multitude of tasks and
00:59 - tools
01:00 - i've been doing it
01:02 - full-time about five years
01:04 - and i
01:06 - have no sort of outside computer
01:08 - knowledge computer science schooling or
01:10 - anything i'm completely self-taught
01:12 - but really i'm mostly colleague top i've
01:15 - kind of leaned on
01:16 - um a lot of really nice really good
01:19 - people
01:20 - at the jobs that i've been fortunate to
01:22 - have to kind of teach me what i know
01:25 - and i've mostly worked like in
01:27 - everywhere that i've worked i've
01:29 - i've used javascript but it's always
01:31 - been in the context of
01:33 - a framework or library back in the day
01:35 - that was jquery and backbone it's been
01:37 - angular it's been react but it's always
01:39 - been in this context
01:41 - the irony of the picture that i chose
01:43 - here is that
01:46 - if if the apocalypse were to happen i
01:49 - would be not be able to use any of these
01:51 - actual tools i would want to build
01:53 - software and be completely useless um
01:56 - but the inspiration for this talk is uh
01:59 - there's a designer that i follow named
02:01 - brad frost
02:02 - and um he wrote a post last year
02:05 - actually called why i'm not a javascript
02:07 - developer and he basically took a list
02:09 - of
02:10 - front-end interview questions specific
02:12 - to javascript that
02:15 - is on the html5 boilerplate github
02:18 - and he sort of took every question and
02:20 - wrote kind of a smart ass remark to it
02:23 - so for instance he said uh why is it
02:25 - called a ternary expression what does
02:27 - the word ternary indicate ternary means
02:30 - it involves three things and strings
02:32 - them all on one line so it's harder to
02:34 - read
02:36 - and then he said
02:38 - create a loop so this is the the fizz
02:40 - buzz question create a loop that
02:42 - iterates up to 100 while outputting fizz
02:44 - at multiples of three buzz at multiples
02:47 - of five and fizz buzz at multiples of
02:49 - three and five
02:50 - so this is a actual
02:52 - kind of standard coding question
02:54 - uh and his response was that sounds hard
02:56 - and for some strange reason i'm suddenly
02:58 - jonesing for dr pepper
03:01 - and so it was funny i read it and i was
03:03 - like oh yeah that's that's funny but
03:06 - it was like it was funny but then i
03:08 - thought i i don't know that i could
03:10 - answer those questions like i use
03:12 - javascript every day
03:13 - um and i build software with it but i
03:16 - these seem kind of basic and i don't
03:17 - know the answer to them so
03:20 - and i figured that i'm probably not
03:21 - alone in that like you can actually uh
03:24 - build a lot of awesome stuff with the
03:25 - tools that you use and not completely
03:27 - understand the tools themselves so i
03:29 - took i thought a good talk idea was to
03:32 - to take some of these questions and just
03:33 - try and answer them and answer them like
03:36 - succinctly as if i would have to be in
03:39 - an interview
03:40 - um and maybe give some real world
03:41 - application to them
03:43 - but before i jump into the questions
03:45 - themselves
03:46 - um i kind of want to address the point
03:48 - of like
03:50 - our interview questions
03:54 - are they
03:54 - are they a good idea
03:59 - i i think that this is definitely
04:00 - something and if you're a junior
04:01 - developer and you're going to be um
04:03 - you're going to be going to a lot of
04:04 - interviews and you're going to probably
04:05 - doing a lot of code tests and things
04:07 - like that
04:10 - or if you're a hiring manager looking at
04:12 - it from the other way you should know
04:13 - that a lot of times putting people on
04:15 - the spot with things like this
04:17 - is uh essentially creating a
04:20 - adversarial relationship with the person
04:22 - that you're interviewing and that really
04:24 - may not not be what you want to do you
04:26 - might want to be in a position where you
04:28 - want a person to feel comfortable with
04:30 - your company with your team
04:32 - so i'm not necessarily a proponent of
04:35 - asking a bunch of arbitrary code
04:37 - questions in interviews
04:39 - but i figured it doesn't hurt to uh know
04:41 - the answers
04:42 - so let's get started um
04:44 - we'll start with this one is kind of a
04:46 - softball and i guess i'll preface this
04:48 - by saying
04:50 - uh if you're senior dev in here you're
04:51 - probably this is old old turf for you
04:54 - but hopefully maybe there's some new uh
04:57 - things that you hadn't ever
04:58 - known exactly how it worked i learned
05:00 - something this morning just from
05:01 - researching this
05:03 - um and
05:04 - if you are a junior or beginner
05:06 - hopefully this will sort of answer a
05:07 - couple questions for you
05:09 - but this one is uh pretty basic but it
05:11 - was one that i
05:13 - couldn't succinctly answer explain event
05:16 - delegation
05:17 - event delegation is javascript as it
05:19 - relates to the dom
05:21 - it basically means that if you attach an
05:23 - event listener to a dom
05:25 - element that listener is not only firing
05:28 - on that dom element it's actually firing
05:30 - on every children
05:33 - in that so for instance if you have a
05:35 - navigation
05:36 - and so you've got an unordered list and
05:38 - you've got list items and then you've
05:40 - got anchor tags inside that navigation
05:44 - what you have if you add an event
05:46 - listener to the ul
05:48 - in essence you're actually
05:50 - adding event listeners to all of the
05:53 - children as well so it's something to
05:55 - and this happens
05:57 - through a process called event bubbling
05:59 - so it's sort of the inverse of the idea
06:01 - of delegating down bubbling is when it
06:04 - comes back up um
06:06 - so events on an element will
06:09 - bubble up to all of their parents so
06:11 - when you click on that a
06:13 - you're actually clicking on the li and
06:15 - you're clicking on the ul and you're
06:17 - clicking on the body ultimately
06:20 - um so that that's the concept of event
06:23 - bubbling
06:24 - so how it actually works out in practice
06:27 - uh
06:28 - ways that i found it useful are for
06:30 - instance if you have a live edits to a
06:33 - form that you want to track
06:35 - and you've got a form with a group of
06:38 - inputs in here i may have to come over
06:40 - here to scroll yeah
06:42 - but you've got all different types of
06:44 - inputs and you want to maybe test when
06:47 - they blur out of one of these inputs or
06:50 - they key up or something like that well
06:52 - you could go through and you could
06:56 - target each one of these individually
06:59 - you could grab
07:00 - all of them by a specific tag and then
07:02 - you could um do this the special loop
07:05 - over them in order to add an event
07:08 - listener to every single one so that
07:09 - would totally work and then you'd have
07:11 - one function that would um you would
07:14 - probably have to create a different case
07:15 - for what type of thing it is
07:18 - in there but you uh can bind to it
07:20 - but you can also just simply bind
07:23 - to
07:24 - the parent
07:25 - so just grab the form itself
07:28 - and everything inside of it
07:31 - that can change that can fire a change
07:33 - event is going to fire a change event
07:36 - uh and so your form would run and then
07:38 - in here you might have some sort of
07:39 - switch
07:41 - based on the name of that element or
07:43 - something like that
07:45 - and this kind of demonstrates for us
07:47 - this wasn't part of the the questions
07:48 - but it's sort of a bonus tidbit
07:50 - you'll notice that when i'm listening to
07:54 - um kind of a more universal event on
07:57 - looking for child elements that would
07:59 - trigger it i want to use event target
08:02 - not event current target and so that's a
08:05 - bonus little tidbit that the difference
08:07 - between
08:08 - uh target and e and current target
08:10 - whenever on an event listener is that
08:13 - target is the actual thing that was
08:16 - clicked
08:16 - whereas current target is what you
08:18 - attach the event listener to
08:20 - so if you've ever wondered what that uh
08:23 - is i had to answer that question like
08:25 - just last week so
08:27 - um
08:28 - so that's that's a little bit about the
08:30 - dom
08:31 - moving on next question
08:34 - uh explain why the following doesn't
08:36 - work as an iffy
08:38 - well in order to answer that i actually
08:41 - didn't know what an iffy was so what is
08:43 - an iffy um
08:46 - if he stands for immediately invoked
08:48 - function expression
08:50 - uh so if you actually ran this code the
08:52 - way that it looks right now
08:54 - you would get a syntax error in your
08:57 - browser
08:59 - and what you would want to do is
09:00 - basically it's the idea of an
09:01 - immediately invoked function expression
09:03 - is basically i write this function and i
09:05 - run it i just want to write it and then
09:07 - run it immediately
09:08 - but you can't do it this way
09:11 - and the reason why is has to do with
09:13 - kind of another related question
09:16 - is the difference between
09:18 - writing a function
09:20 - as a statement or as a definition and
09:22 - writing it as an expression
09:25 - so
09:27 - in javascript
09:29 - anytime we um there are sort of you have
09:32 - statements and you have expressions
09:34 - expressions result in a value and that's
09:37 - the concept of an expression so if you
09:40 - um like assign a variable and try to
09:43 - attach a value to it that will be read
09:45 - and interpreted as an expression and it
09:47 - will create a value
09:49 - this creates more of sort of like a
09:51 - reference but it's not an actual value
09:54 - so you can't just run it
09:59 - in fact if you sort of try to run this
10:02 - code immediately this is how javascript
10:06 - is reading it
10:07 - and it's like this doesn't make any
10:09 - sense to me
10:11 - you wrote this thing and then later on
10:13 - you're trying to
10:15 - call a function that you doesn't have a
10:17 - name this this is weird
10:19 - so
10:20 - instead you need to
10:23 - um but there are a lot of benefits and
10:24 - i'll get into the benefits of the second
10:26 - of of writing it
10:28 - this way
10:30 - how can i write it that way and get it
10:31 - to run immediately
10:32 - well you can make that function at an
10:34 - expression
10:36 - simply by putting parentheses around it
10:40 - so now that this is in parentheses
10:44 - javascript is going to interpret
10:45 - whatever is inside that parentheses to
10:47 - be an expression not to be a statement
10:49 - and then it can run immediately so this
10:52 - is called an immediately invoked
10:54 - function expression
10:58 - so i guess that begs the question
11:00 - like why
11:02 - uh why would i actually need to use this
11:04 - um
11:05 - well in a lot of situations and this is
11:07 - probably if you're working within a
11:09 - framework or something like that
11:11 - you may not need to like you may never
11:13 - end up in this situation but the next
11:15 - time that somebody asks you to build
11:17 - like them a simple web page
11:19 - then this is going to be relevant again
11:22 - you do it in order to control
11:24 - variable scope
11:26 - so if you wrote this function
11:30 - that function is not going to be
11:31 - available the variables inside that are
11:33 - not going to be available outside of
11:35 - that function
11:36 - and actually the guy who's josh mock is
11:38 - speaking right after me he wrote sort of
11:40 - the best blog post that i found on this
11:42 - concept
11:44 - and
11:46 - of like why you might want to control
11:48 - that scope and it used to be i think for
11:50 - software developers it used to be more
11:52 - of an issue because we were writing a
11:53 - lot of things with jquery and
11:55 - there were a million jquery plugins that
11:57 - could be in our application and they all
11:59 - had
12:00 - very dumb and plain
12:03 - naming conventions and i was like i want
12:05 - to use dumb and plain naming conventions
12:07 - in my application
12:08 - so um so this is how you do it
12:11 - and it kind of relates to another
12:12 - question on this list is that why in
12:15 - general
12:16 - is it a good idea to leave the global
12:17 - scope out of a website and not touch it
12:23 - and it's because you can't predict the
12:25 - future
12:26 - uh
12:27 - so 27 years ago robert zemeckis
12:31 - predicted that the cubs would win the
12:32 - world series in 2015 and boy was he
12:35 - wrong
12:36 - he was a year off what an idiot
12:39 - um but seriously like
12:41 - you don't know
12:43 - um especially if you're building that
12:45 - that web page for your friend like what
12:46 - they're going to want to put
12:48 - pull in what kind of libraries um and
12:51 - you want to control your variable names
12:53 - so you never have collision within your
12:55 - scope
12:57 - it also allows you to maintain
12:58 - independence and it makes it easier to
13:00 - write your own code you call things
13:02 - whatever you want because it's
13:03 - self-contained
13:04 - so
13:06 - um that's a little bit about scope
13:10 - kind of
13:11 - adding on to that concept is uh this
13:14 - word which is probably my favorite
13:16 - javascript word which is hoisting
13:19 - explain hoisting
13:23 - and before i wrote this talk i actually
13:25 - had no idea like what this was
13:27 - i had observed it but i had never quite
13:30 - understood it
13:32 - it means that all variables that are
13:35 - declared using var so this was um kind
13:38 - of a specific problem i'll get into how
13:40 - it's been addressed a little bit but all
13:42 - variables using var are declared at the
13:44 - top of any given function scope whether
13:48 - you really know it or not whether you
13:50 - sort of like it enough or not
13:53 - and this actually includes
13:55 - the functions that are written as
13:58 - statements
14:00 - hold on where were they
14:03 - um so the top example this would include
14:06 - those as well those are hoisted
14:10 - so
14:10 - um
14:12 - this is kind of an example of what you
14:14 - might see but this is i used to try and
14:16 - do this all the time
14:18 - i would say okay i've got a variable and
14:21 - under this condition i want that
14:23 - variable to
14:24 - be this and in this other condition i
14:26 - want the variable to be this
14:28 - and um
14:30 - i would just
14:31 - i'd just be like well i haven't like
14:33 - created this variable anymore i'll
14:34 - create it here and then and here i'll
14:36 - create it and then maybe i have another
14:38 - case where i don't need to create the
14:40 - variable yay i've saved memory or
14:42 - something thought without myself in my
14:44 - head
14:46 - but if you use a linter or something
14:48 - like this you would probably probably
14:50 - notice that this chokes this does not
14:52 - like you to write it like this it would
14:55 - say something like action is already
14:57 - defined
14:58 - on line six
15:01 - um because this is in in reality what is
15:04 - happening behind the scenes that you
15:05 - don't even know about but javascript is
15:07 - taking
15:08 - that var
15:11 - and it is creating var action up here at
15:14 - the top
15:16 - and then what it's seeing here is that
15:17 - you're trying to uh declare this
15:19 - variable that's already been declared
15:21 - not only are you assigning it a value
15:24 - again but you're declaring it again and
15:25 - it's like this is what are you doing
15:28 - this is what javascript is actually
15:29 - doing to your code
15:31 - if you write functions uh as statements
15:34 - like this
15:36 - those functions are actually all being
15:38 - hoisted to the top the entire function
15:40 - this is sort of why and i had never
15:42 - really understood this but sometimes i
15:44 - would write a function
15:46 - and i would try and call it and it would
15:48 - say that it was undefined but then i
15:49 - would move it in another place in the
15:50 - code and it would work but then other
15:52 - functions didn't seem to work that way
15:54 - well it all boils down to whether you
15:55 - write them as statements or assign them
15:57 - to variables
16:00 - so
16:03 - so yeah leonard's will kind of
16:06 - market you about this because it's sort
16:08 - of not clean code and it's um but it
16:11 - actually works in the browser browser
16:12 - has ha no problem with it
16:15 - um but it means what hoisting means is
16:17 - that technically this works
16:19 - you can have your whole if statement you
16:21 - can assign value to it assign a
16:23 - different value and then declare it
16:25 - further on down in the code and this is
16:27 - totally fine for javascript and actually
16:29 - in the browser
16:31 - um
16:32 - so
16:33 - this is
16:34 - this is pretty absurd this is one of the
16:36 - reasons why like
16:37 - people say that they hate javascript and
16:39 - whatever and we have a bad reputation
16:41 - whatever
16:42 - um
16:43 - so
16:45 - in walk uh this has kind of been
16:47 - addressed with
16:48 - es6 and the
16:50 - the idea of of constant and let
16:54 - so constant and let are ways of
16:55 - assigning variables that are not hoisted
16:59 - they
17:00 - are actually
17:01 - even more than scoped within the
17:03 - function that you're in they're scoped
17:04 - within the block that you're in so if
17:08 - you're just in this um
17:10 - in this if statement
17:12 - you can have variables that are scoped
17:15 - within there that the outside part of
17:17 - the function will have no knowledge of
17:19 - um
17:21 - i would say that that this makes more
17:23 - sense like the more that i develop of
17:25 - wanting to control this kind of
17:26 - initially i was like
17:28 - everything can know about everything i
17:29 - don't care but this is really good for
17:32 - um kind of performance and things like
17:34 - that to
17:35 - scope things as closely to where you
17:37 - want to use it as possible
17:40 - and it sort of gives you more control
17:42 - and again like
17:44 - i mean your colleagues might not like
17:45 - you but if you want to use like var x
17:47 - equals this and var y equals that you
17:49 - can and you can use it all over
17:51 - um there's a really good arc um article
17:54 - about it by um
17:56 - the german dr axel rauschmeyer
18:00 - about this variables and scoping in es6
18:02 - i would highly recommend checking it out
18:06 - so i guess the question is sort of after
18:10 - knowing these things
18:12 - what do we do
18:14 - with the knowledge of hoisting like does
18:16 - it actually change the way that we write
18:18 - our code
18:20 - uh and i'm really i'm not gonna touch
18:22 - this one this is like
18:24 - i think that this has been pretty well
18:25 - argued ever since constant and let came
18:28 - out of like which ones you should use
18:30 - but i do see a value in
18:35 - and declaring things as closely to where
18:37 - you're going to use them
18:39 - and i think part of my original
18:41 - intention here is what i learned about
18:42 - hoisting was hoisting
18:45 - constant and let give you block scoped
18:47 - variables
18:48 - and hoisting was basically trying to
18:50 - fake that the whole time
18:52 - so constant and let are basically
18:54 - solving the problem
18:56 - that's existed in javascript of
18:59 - we want to do this
19:01 - uh and we can't
19:03 - um
19:04 - so we use hoisting to sort of fake it
19:07 - so i'll probably be writing constant and
19:10 - let mostly but
19:13 - um
19:14 - so speaking of i i've used the word
19:17 - declare a lot
19:19 - um there's another question of like the
19:22 - what is the difference between a
19:24 - variable that is
19:26 - null
19:27 - undefined or undeclared
19:30 - um so we'll start with undeclared
19:33 - it is not simply a short-lived show on
19:35 - fox
19:36 - anybody ever see undeclared
19:38 - yeah
19:39 - um if you like freaks and geeks you
19:41 - might check out undeclared it's not as
19:43 - good but
19:45 - it's
19:46 - you know
19:48 - uh
19:49 - so
19:50 - undeclared is basically um
19:53 - when you try and use a variable that um
19:56 - that you've never sort of used before
19:58 - you've never
19:59 - written out var foo equals or const foo
20:03 - equals
20:04 - but you try and use it in some kind of
20:06 - manner
20:07 - um so that's a pretty simple concept of
20:10 - what is undeclared it's just you you
20:12 - forgot something somewhere or you ripped
20:14 - out some code in my case you ripped out
20:16 - some of your co-workers code and now
20:18 - it's not working
20:22 - so that's undeclared undefined
20:26 - is
20:29 - it's a little bit different undefined
20:31 - means that you've declared it but it
20:33 - doesn't have
20:34 - a value it has not been assigned a value
20:36 - so these are all
20:38 - up here at the top are all kind of
20:39 - examples of
20:41 - [Music]
20:42 - ways that you might get undefined so if
20:44 - you just declare a variable don't assign
20:47 - a value if you have an
20:49 - empty object or you try and grab
20:52 - something on an object and it's not
20:54 - there you'll see undefined same goes for
20:57 - like the index of an array
20:59 - if nothing is there
21:01 - or if you run a function and the
21:03 - function doesn't return anything um
21:05 - so that which is totally fine to do
21:07 - undefined is not
21:09 - it's not always
21:12 - undeclared is sort of something's gone
21:14 - wrong but undefined you could get for
21:16 - all kinds of reasons and it's not
21:17 - necessarily an indicator that something
21:19 - has gone wrong
21:20 - the cool thing is with constant is
21:23 - that you can only
21:25 - use constant whoa look at that sorry
21:29 - um
21:31 - you k you are forced with constant to
21:34 - assign a value to it
21:37 - whenever you declare it so that may
21:39 - change actually the way that you want to
21:41 - use things because
21:43 - in a lot of situations
21:44 - um i don't want to do that i want to
21:47 - create a variable and then have it
21:48 - change depending on situations so
21:51 - um but that that is kind of nice because
21:53 - you'll never sort of have the problem of
21:55 - a constant being
21:56 - undefined and then you have oh yeah i've
22:00 - got this whole list of important
22:01 - information
22:02 - oh it's also falsely
22:04 - which kind of plays into
22:06 - that it's not necessarily a an indicator
22:08 - of that something's wrong
22:09 - you can definitely use it
22:12 - if in some kind of logic condition if
22:14 - you're looking for falsies
22:17 - null is a little bit different and like
22:19 - it's kind of nuanced
22:23 - but null is a value
22:25 - it's just
22:26 - not a value
22:28 - you know
22:30 - null is actually the
22:32 - interpreted as having a value that value
22:35 - is null
22:36 - it's a nothing value it's a way of sort
22:39 - of creating a placeholder assignment
22:42 - um
22:43 - for something that would have maybe
22:46 - other values
22:48 - you see this all the time especially
22:50 - like if you're dealing with an api
22:52 - you um you might have something on an
22:55 - object that's that's returned from your
22:57 - api you might see the key there and the
22:59 - key's value is null and that's that's
23:01 - completely right and if you ever have a
23:04 - situation where you need to sort of zero
23:06 - out
23:07 - of value
23:08 - null is a great tool in order to do that
23:11 - because
23:12 - because the idea of zero as a number
23:14 - well that's actually a value or zero as
23:16 - a string well that's certainly a value
23:18 - so you can use null instead
23:22 - um
23:23 - yeah
23:24 - look through my notes here
23:27 - so finally what the question is if you
23:30 - um
23:31 - how do you go about
23:33 - checking
23:34 - for any of these states
23:36 - um
23:37 - well the first one is kind of easy
23:39 - undeclared will usually find you
23:44 - i say usually
23:46 - but it doesn't always find you because
23:50 - if you're trying to assign a value to a
23:53 - variable that hasn't been declared
23:55 - javascript will totally let you do that
23:58 - and it will go ahead and attach that
24:00 - value to the global
24:02 - scope
24:03 - which is really bad
24:06 - so essentially all that stuff that i
24:08 - talked about about not touching the
24:10 - global scope
24:12 - javascript will let you just do that if
24:14 - you leave off the the word var
24:17 - so be careful use a linter
24:20 - um that's what i would advise for there
24:23 - um
24:24 - and this is another one of the reasons
24:26 - why people hate javascript about
24:28 - whatever haters
24:30 - um
24:31 - now if you want to check for undefined
24:34 - this also kind of sucks
24:36 - um
24:37 - because
24:40 - if you check you can use type of it's
24:43 - really handy to check for like if it's a
24:44 - number or if it's a string or whatever
24:47 - um if you try and do use type of
24:50 - it will return undefined
24:53 - as a string
24:55 - which is like frustrating
24:57 - because all of a sudden we're dealing
24:58 - with like this information that is in a
25:00 - different type than what it actually is
25:03 - so you can't use type of
25:06 - this inequality checks because you've
25:08 - got this word undefined as a string
25:12 - undeclared variables will also return
25:15 - undefined if you try and type of them
25:18 - uh now i'm beginning to see why people
25:19 - hate javascript
25:21 - uh
25:22 - and if you
25:24 - um so the preferred method would be to
25:26 - use a triple equals
25:28 - to check if something is undefined
25:31 - um and not not not in a string by the
25:34 - way even though that doesn't make any
25:35 - sense because
25:37 - yeah anyway
25:39 - um
25:40 - so
25:41 - because if you
25:43 - look for undefined as a string and check
25:45 - it against undefined even though this is
25:46 - what the console spits out
25:48 - uh it will um fail
25:51 - so yes check for undefined with triple
25:53 - equals
25:54 - and the reserved word undefined
25:58 - with null
26:01 - type of null actually returns an object
26:05 - it will say that you have an object
26:07 - this is a bug in javascript this is a
26:10 - literal bug in javascript that they are
26:12 - not fixing because they have higher
26:13 - priorities
26:14 - and by they i mean me because it's a
26:16 - community like it's all falls on our all
26:18 - of our shoulders
26:22 - so
26:23 - but you can also use the triple equals
26:25 - with the reserved word null in order to
26:27 - check for null
26:28 - um
26:30 - and then finally like this triple equals
26:32 - thing is just it's always a great
26:34 - question
26:35 - but what is the difference between
26:37 - double equals and triple equals um
26:41 - and so here's an example
26:44 - foo is undefined
26:46 - bar is null
26:48 - and foo double equals bar is true
26:57 - yeah that makes sense
26:59 - um
27:00 - essentially the the
27:03 - what you have when you use double equals
27:05 - is a check for
27:07 - equality
27:09 - and javascript sees null and undefined
27:12 - as both sort of having no value and and
27:14 - says that those are equal
27:16 - even though they are not the same type
27:19 - of thing
27:21 - so triple equals is always going to
27:22 - check for equality and type and if
27:25 - anybody here has like done any sort of
27:27 - like recent learning
27:30 - i'm gonna everybody loves audience
27:32 - participation right how many people have
27:34 - been told always use triple equals no
27:36 - matter what
27:38 - you've been lied to
27:40 - been lied to people um the reason people
27:44 - tell you that is because they don't
27:46 - think you're smart enough to understand
27:47 - it and use it correctly
27:49 - but you can absolutely use this
27:50 - correctly and if if you know what you're
27:53 - doing and you want to use the double
27:54 - equals go ahead and use it and put a
27:57 - little comma above it for the rest of
27:59 - your developers to like not go in and
28:01 - change your pr or or be mad at you
28:03 - because you know what you're doing
28:05 - so
28:07 - um
28:08 - so that's pretty much it i'm gonna i'm
28:10 - gonna skip the event loop because it
28:12 - really deserves its own
28:15 - talk uh i just had it in there because i
28:17 - thought that um
28:20 - yeah never mind i knew i was not gonna
28:21 - have time for that but just in case
28:23 - um so anyway you guys since you're at
28:26 - this talk you were hired
28:28 - um hopefully you get a boss just as fun
28:31 - as kimmy schmidt's boss
28:32 - wherever you go to work
28:34 - um
28:35 - and there are a ton more of these up on
28:38 - html5 boilerplate i
28:40 - it was a fun exercise for me to just go
28:42 - through these and be like
28:44 - which of these can i not answer quickly
28:46 - and i cannot answer well
28:49 - um
28:50 - but i just want to sort of say at the
28:52 - end of this talk i i've been doing this
28:54 - for about five years and um
28:57 - now sort of like the senior guy on my
28:59 - team and everything else
29:01 - uh but it doesn't really it doesn't
29:03 - really account for a whole lot
29:05 - necessarily that you can
29:08 - answer these questions like super well
29:11 - my encouragement to anybody at this
29:13 - conference who's sort of like me feeling
29:17 - really overwhelmed and really like
29:20 - i just don't know how i'm going to
29:21 - actually apply this to my application
29:23 - coming the next day
29:25 - i just really encourage you to just keep
29:27 - moving forward building whatever it is
29:29 - that you're building just build good
29:31 - software
29:32 - i think a lot of times as developers we
29:34 - focus
29:36 - on the tools that we're using the best
29:38 - way to use those tools the most
29:39 - efficient way
29:41 - which i totally get and totally love to
29:43 - do
29:44 - but we lose sort of focus on like that
29:47 - we're here we're getting paid to deliver
29:50 - badass software
29:52 - and if we just focus on that
29:54 - then the tools we use in the decisions
29:57 - and the learning is going to come
29:59 - alongside that and happen as well we
30:02 - don't have to like learn all this stuff
30:05 - first and have all these perfect answers
30:07 - or even really know the perfect
30:09 - terminology for what it is that we're
30:10 - doing in order to make awesome software
30:13 - and i am a pretty good example of that
30:15 - because i won't say that
30:16 - i can make software without knowing
30:19 - whatever it is that i'm doing
30:21 - so um
30:23 - anyway that's uh that's the talk the
30:26 - slides are up uh on my website
30:29 - um if you want to have them and then
30:31 - i've got two minutes
30:33 - so i will take questions
30:36 - am i what
30:38 - my brother-in-law is a pilot
30:40 - and i thought that um
30:43 - i mean
30:44 - that's admittedly a very douchey picture
30:46 - so
30:47 - i
30:48 - apologize but like the other one that i
30:51 - had was was me inside the head of a
30:53 - dinosaur that was my original picture
30:56 - and um
30:57 - yeah anyway i would love to be a pilot
30:59 - because i thought it was i thought it
31:01 - was awesome
31:02 - but uh other questions yeah
31:06 - now that you've talked about the
31:07 - questions
31:08 - when you are interviewing somebody
31:10 - because this is something you know
31:12 - the past few years
31:16 - balancing the importance of those types
31:20 - of interview questions versus you know
31:22 - other things such as
31:24 - is this person gonna fit for the team
31:26 - right you know you can answer all those
31:28 - questions every single question on that
31:29 - list that you put up on
31:35 - yeah i mean i think that that is like
31:38 - that's a really key piece is um
31:42 - understanding that the questions
31:43 - themselves are sort of arbitrary
31:45 - sometimes when you're trying to test and
31:46 - i understand the the desire to use them
31:48 - in order to kind of vet people and um
31:52 - but i think that maybe better questions
31:54 - to ask would be like
31:56 - how do you handle a situation where
31:57 - you've you've said that you would meet a
31:59 - sprint deadline and you realize that
32:02 - you're not going to meet that deadline
32:03 - what do you what do you do in that
32:04 - situation or what do you do when your
32:06 - designer comes to you
32:08 - and you've already had something scoped
32:10 - out and you are already two weeks into a
32:12 - sprint developing something and your
32:13 - designer wants more changes how do you
32:15 - handle that situation like kind of more
32:17 - i think
32:18 - what you can probably dig deep if you
32:20 - come up with sort of clever questions
32:22 - about how a person actually works is
32:24 - hopefully they're going to use the
32:25 - technical stuff in their answer and
32:27 - that's going to give you the vetting
32:29 - that you need
32:30 - so that would be my hope
32:32 - um
32:33 - i think that the thing about
32:35 - interview questions like that is that
32:37 - yeah i mean
32:39 - it's creating this adversarial situation
32:41 - i just did one recently like a last
32:43 - month
32:44 - and it was with my first initial
32:46 - interview was with two
32:48 - people that were on the dev team not
32:50 - with a hiring manager so i kind of
32:52 - immediately knew oh they're weeding me
32:54 - out here
32:55 - and then they had me do a code test
32:58 - and i was like oh man i got this no
33:01 - problem like if they put me up to a
33:02 - co-test it'll be no problem and i was
33:04 - like panicky i was like i ah
33:08 - you know um and that's really just not
33:11 - how it doesn't really mimic actual work
33:13 - behavior you'd never be in a situation
33:15 - that you would be
33:17 - up under the gun like that so it's not
33:19 - necessarily a good indicator but
33:21 - um
33:22 - yeah ryan was mentioning like a code
33:25 - um
33:26 - a code challenge that a prospective
33:28 - employer gave that was was a homework
33:30 - assignment and it was basically they
33:31 - gave you json and they gave you either
33:33 - an api endpoint or a blob of json and
33:36 - they were like just just make a ui out
33:39 - of this like that could be something
33:41 - really cool as long as it doesn't sort
33:43 - of take so much of the person's time
33:45 - that it wouldn't be worth it for them
33:46 - but
33:51 - which yeah i think that some of these
33:53 - questions hold a lot of value not in a
33:55 - fifth test
33:56 - uh scenario or context but in a
33:59 - debugging scenario where knowing what
34:02 - hoisting is
34:18 - right
34:26 - yeah that's a great point i'm all for
34:28 - bashing technical interviews right
34:43 - whether you get the answer right or
34:44 - wrong
34:45 - it doesn't really matter what matters is
34:47 - how did you get to that and if you did
34:50 - get it wrong
34:51 - did you just
34:52 - not know you know what to do period or
34:55 - you know is it just something that could
34:57 - have tripped up anybody and you handled
34:59 - the situation well
35:05 - totally um i think i'm officially out of
35:07 - time but i'd love to continue this
35:09 - conversation with anyone
35:10 - after the session so thanks everybody