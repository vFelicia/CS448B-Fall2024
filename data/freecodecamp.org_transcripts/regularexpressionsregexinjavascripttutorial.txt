00:00 - hey coders i'm cody and welcome to
00:02 - learning the basics of regex in
00:03 - javascript so start off what is regex
00:06 - right regex is a way to match certain
00:08 - patterns inside of a string so for
00:10 - instance if you have a string all your
00:12 - base are belong to us and you want to
00:13 - test does base exist in the string you
00:16 - can do that with regex
00:18 - so just to show you that i'll say
00:20 - all your bass are belong to us
00:23 - and if i want to test if bass belongs in
00:26 - the string i can just do the regex
00:27 - expression slash bass slash end
00:31 - and notice here we're using regex
00:33 - 101.com which i highly recommend it's
00:35 - like
00:36 - the best online uh regex tester to kind
00:39 - of learn to get your hands wet with
00:40 - regex
00:41 - so again
00:43 - we type the rejects expression base
00:45 - and our test string and you see that it
00:47 - highlights in blue so we know that our
00:48 - regex passes
00:50 - so how do you do this in javascript well
00:53 - first of all you want to declare
00:55 - a string called
00:57 - all your base are belong to us
00:59 - secondly you declare some type of regex
01:01 - expressions so you start that with a
01:03 - slash a forward slash
01:05 - type in your regex expression base
01:08 - and then end it with the following slash
01:10 - and then lastly if you wanted to test to
01:12 - see if base belongs in our stream
01:14 - we can say
01:16 - is existing and we can say regex dot
01:18 - test
01:19 - against our string and go ahead and
01:21 - print out is existing
01:24 - i'll save that file and i'll go ahead
01:25 - and run regex.js and we see that it
01:27 - prints out true
01:29 - so again very similar to the app on the
01:31 - right
01:32 - if the blue shows up in this string it's
01:34 - a true
01:35 - and if it doesn't show up it's going to
01:36 - be false right
01:38 - so just to demonstrate that
01:40 - i'll go ahead and get rid of bass
01:43 - i'm going to rerun regex on js and see
01:45 - that it prints out it falls down here
01:49 - so again that's
01:50 - the real basics just how do you test see
01:52 - if a certain substring exists in a
01:54 - larger string
01:56 - so we show that in regex101.com and
01:58 - we're also showing it in javascript over
02:00 - here
02:01 - so now that we learned the basics of
02:03 - testing a string let's go ahead and
02:04 - learn more complicated regex
02:06 - expressions so the first thing i'm going
02:08 - to cover is
02:10 - the carrot sign and the money signs the
02:12 - carrot is used to
02:14 - specify the start of the string
02:16 - has to match the register expression
02:19 - followed by our string base and the
02:22 - money sign is used for designating the
02:24 - inverse string
02:26 - so what does that mean
02:28 - basically it means that our string has
02:30 - to be base and that's it right so all
02:32 - your base are belong to us won't match
02:34 - but if i change this to base
02:37 - it passes
02:38 - again to demonstrate how you break that
02:40 - i'll add an extra character called a
02:42 - and notice that the money sign
02:43 - expression makes it fail
02:45 - if i were to remove the money sign
02:47 - it passes again
02:50 - and then again to demonstrate the carrot
02:52 - sign
02:53 - this thing it has to start with
02:56 - a base right so if i were to change this
02:57 - to z
02:58 - this fails and if i get rid of the
03:00 - current
03:01 - it passes again
03:03 - and again i'm not going to show this
03:04 - show how to do this in javascript
03:06 - because it's going to be the same you
03:07 - are pretty much just going to copy
03:09 - and paste it in and that's how you do it
03:11 - so a lot of these examples i'm going to
03:13 - stick to regex 101
03:15 - okay so we learned
03:17 - simple original expressions for testing
03:19 - we learned the carrot sign which means
03:21 - certain position of the startup string
03:23 - and we learn the money sign which means
03:24 - a certain position at the end of the
03:25 - string
03:27 - so some other cool things we can do is
03:29 - let's say we have a string my name is
03:32 - cody and my
03:33 - age is
03:35 - 26 or 26 right okay
03:39 - so let's say we wanted to make sure that
03:41 - the string has
03:43 - name is something in it so again in your
03:46 - regex you can say name is
03:50 - and then what we want to do now is test
03:52 - that
03:54 - there's a array of characters or length
03:56 - of characters which are all a through z
04:00 - so in this case we can use something
04:02 - called character classes and those are
04:04 - designated with
04:06 - square brackets square brackets or
04:07 - square braces
04:10 - so i can say anything through a through
04:12 - z lowercase
04:14 - and notice that this will only match the
04:16 - first c
04:17 - so with character classes you need to
04:19 - add
04:20 - some additional options so it can be one
04:23 - or more which is the plus sign
04:26 - it can be the star which means zero or
04:28 - more
04:30 - there's a couple others like zero is
04:32 - optional you don't need to have the c
04:34 - and then we can also do let's say we're
04:36 - checking for a length so we want one to
04:38 - four characters
04:45 - i can kind of go over those later on so
04:47 - let's just uh stick with the basics
04:50 - so again we're looking for name is
04:52 - you know
04:53 - some blank fill in the blank with
04:56 - whatever name you want so we're gonna go
04:57 - go ahead and do a plus sign
05:00 - and that'll match any name so we change
05:01 - this to
05:02 - bob
05:04 - or lisa or whatever it's gonna match
05:06 - that
05:07 - and again we can do the same thing with
05:10 - ages
05:11 - so if i were to change this to age and
05:12 - then change the character class to zero
05:14 - through nine
05:16 - one or more
05:17 - again any character that we add which is
05:20 - a digit should match this regex
05:22 - expression
05:23 - in the moment we change this to an a or
05:25 - b or c it's going to fail
05:27 - so again as a recap
05:28 - we just covered character classes which
05:30 - again is designated by these open
05:33 - brackets
05:35 - and inside here we can add ranges of
05:37 - characters we can also add like let's
05:39 - say we only want to be one two or three
05:41 - for the age
05:43 - so notice here if i do 99 that'll fail
05:47 - 22 will pass
05:50 - 1 2 3 passes
05:51 - zero two will fail
05:53 - and you can just mess around with this
05:54 - to kind of make sure you understand
05:55 - what's going on
05:57 - and then the same thing with name if we
05:59 - were to go back
06:02 - and say we want a through z
06:08 - and then also allow capitalized letters
06:13 - this will match with capital kodi
06:16 - or lowercase cody it doesn't really
06:17 - matter because we're matching any
06:18 - character which has lowercase a through
06:20 - z or uppercase a through z
06:23 - one or more
06:25 - so you can do even more you know crazy
06:26 - stuff with this so if you wanted to add
06:29 - you know alphanumerics into there we can
06:31 - do so
06:33 - that'll pass
06:35 - let me go crazy with this read some more
06:37 - documentation on this but we're again
06:39 - we're just going to cover the very the
06:40 - basics of regex and using in javascript
06:42 - we're going to dive deep into how to
06:45 - define more complicated character
06:46 - classes so again we covered testing a
06:49 - string for a substring
06:51 - um the charat the money sign
06:54 - character classes
06:56 - we covered what the plus means
06:58 - what the star means which is zero or
07:00 - more so again this will pass if we have
07:02 - nothing
07:06 - we could just add and so
07:08 - zero or more characters this is a pass
07:12 - this will pass
07:13 - this will
07:14 - pass
07:16 - in fact just to demonstrate this let's
07:17 - get rid of the
07:18 - additional
07:20 - checks
07:22 - so this this will fail because you know
07:25 - there's no character a through z here
07:28 - we can also use the question mark
07:35 - which allows us an optional y so for
07:37 - instance if we said the y is optional in
07:39 - my name
07:40 - this will pass if i have cody or if i
07:42 - just have cod
07:44 - because the y or the question mark
07:46 - represents an optional character
07:53 - and then lastly i'm not sure if i just
07:55 - covered this but
07:58 - if i wanted age to be three characters
08:00 - and only three characters
08:02 - i could say again the character classes
08:04 - through nine
08:05 - but in this case i want it to be
08:07 - one to three characters
08:10 - so one will pass 12 will pass one two
08:12 - three will pass but one two three four
08:14 - will fail
08:16 - and technically it doesn't fail because
08:17 - you're still getting that red x string
08:19 - but will only match it against
08:22 - these first characters so if you wanted
08:24 - to explicitly end
08:27 - the string so if i wanted like you know
08:29 - in the character
08:31 - or end of the string we can just end it
08:33 - with the
08:34 - money sign
08:35 - and the last thing if we just wanted to
08:36 - check that it has
08:38 - one character or one digit in it we
08:40 - could just add one right so
08:42 - age is one
08:45 - so now that we've covered character
08:47 - classes let's cover a couple of
08:49 - special characters that we can use in
08:50 - register expressions which allow us to
08:52 - instead of having to write like you know
08:54 - the character class zero through nine
08:56 - we can instead just do slash d
09:00 - so slash d plus means match
09:03 - one or more arbitrary strings of digits
09:06 - slash d it stands for digits
09:09 - um if i do name
09:11 - is i can do dash slash w
09:13 - which kind of matches um
09:16 - just like a name
09:17 - slash w is
09:19 - any word character equal to a through z
09:21 - capital a through z zero through nine
09:23 - are underscore so that's more useful
09:25 - like variables or whatnot
09:28 - we can test for spaces so if i wanted to
09:31 - say
09:33 - verify there's a space in here i can do
09:34 - slash s
09:36 - so if i don't add the space it fails
09:40 - i can test for a new line character
09:44 - so this will fail unless there's a new
09:46 - line here
09:47 - you can do
09:48 - t for tabs
09:50 - there's a bunch of other ones but i'm
09:52 - not going to cover all those
09:54 - all right so that's really cool we can
09:56 - test
09:56 - if a string matches a certain pattern
09:59 - but sometimes or most of the times you
10:01 - actually want to extract that string
10:03 - that you found and use it in your
10:05 - program so for instance let's say
10:07 - we have a string that says my name is
10:09 - cody
10:10 - but we want to actually use the name and
10:11 - store it in the variable inside of our
10:13 - code
10:14 - so in that case we can use something
10:16 - called grouping
10:17 - so i'll go ahead and surround this
10:19 - character class with
10:21 - a through z
10:22 - one or more
10:24 - with parentheses around it
10:27 - and what grouping allows you to do is in
10:29 - the code we can say give me match index
10:31 - 1
10:32 - and we can set that into a variable
10:34 - print that out or do whatever we want
10:36 - so in javascript how do we actually do
10:38 - that
10:40 - again we can change
10:41 - string
10:43 - to this my name is cody the regex will
10:47 - be the exact same as what we saw here
10:54 - and now what we can do instead of using
10:55 - the method test so instead of regex.test
10:57 - we do register.exec
10:59 - for execute on this string
11:01 - and then that will give us a match
11:07 - so in this case we can say if match
11:15 - else
11:16 - console.log no match
11:21 - and then if there's a match
11:23 - let's say we just want to print out the
11:24 - name that the person provided we can say
11:27 - console.log
11:29 - name
11:31 - we say
11:32 - const name is equal to match of index
11:35 - one
11:37 - so if i were to run this
11:40 - we see that it prints out cody right
11:43 - because that is the group of index one
11:45 - which again in regex101.com
11:48 - we see it's group one
11:50 - this is the whole blue string is group
11:52 - zero
11:55 - and then let's say for instance
11:58 - you know we change name to something
11:59 - else so here we say
12:01 - zach
12:04 - and then we print this out or run this
12:05 - file
12:06 - again it's going to print out zach
12:09 - now there is no name let's just say we
12:10 - have a bunch of characters or digits
12:13 - there for whatever reason
12:16 - this should print out no match because
12:18 - match is going to be undefined at this
12:19 - point because regex.exec
12:21 - failed
12:23 - so that's the basics of grouping so if
12:25 - we want to do something a little bit
12:26 - more complicated
12:27 - so for instance we have a
12:29 - string of separated file names so we can
12:32 - say file a dot
12:36 - mp3
12:38 - we have file01.mp3 we have file02.mp3
12:44 - we have test.csv and we have other.txt
12:48 - if we wanted to
12:50 - take apart the string and find
12:51 - everything which matches on mp3
12:55 - and just grab the grouping of the file
12:57 - name we could do so like this
13:00 - so again we're testing for dot mp3
13:03 - so slash d
13:06 - mp3
13:09 - and then we want global so in this case
13:11 - we're going to have to add a global flag
13:12 - here
13:13 - to match anything in this string
13:16 - because without the global flag it just
13:17 - matches the first instance and that's it
13:22 - and then let's say the file name
13:23 - is any word
13:27 - like so
13:29 - and we need to extract that so let's go
13:30 - ahead and add
13:32 - a grouping on it so again this regex
13:34 - gives us any file which matches our mp3
13:38 - at the end and it also gives us the
13:39 - group of the name
13:42 - so to use this in javascript
13:44 - let's go ahead and change string up here
13:47 - to our list of file names
13:49 - let's update our regex here
13:52 - to be
13:55 - any slash word
13:57 - one or more followed by mp3 and set that
13:59 - to a global
14:02 - then we execute that regex on our string
14:04 - like we did before
14:06 - and now in this case what we can do is
14:07 - instead of just saying if match we say
14:09 - while there's a match
14:14 - match is equal to regex excc string
14:23 - and i can say const file name is equal
14:25 - to match
14:26 - one
14:37 - i'll go ahead and run that
14:40 - something
14:46 - it's because i had that as a const and i
14:47 - need to be able to redefine it so i'll
14:49 - go ahead and run that again
14:52 - so notice here it prints out file a file
14:55 - zero one and file 0 2.
14:59 - so looking at the code let's you know
15:01 - walk through this and figure out what's
15:02 - going on
15:03 - okay so this we're going to
15:05 - test the regex against the string
15:07 - and for every time we find anything it's
15:09 - going to set match equal to the next
15:11 - file that it finds
15:13 - so that's why we can kind of loop
15:14 - through it and keep calling mash equals
15:16 - regex.exec
15:18 - multiple times
15:19 - so the first step is online seven
15:21 - we grab the first grouping
15:23 - we print out the file name and then we
15:25 - do it again
15:26 - which is going to keep on traversing
15:29 - anything that matches that mp3 multiple
15:31 - times so again another recap we learned
15:33 - how to test
15:35 - regex against a string to see if it
15:37 - something exists in it
15:39 - and then we also test how to use
15:41 - groupings to extract certain data
15:44 - from the regex so again i can go on and
15:46 - on with all the different you know
15:47 - special cases of regex but i think what
15:49 - the best thing you should do is just
15:51 - keep on trying new things
15:53 - like think in your head of different
15:54 - string examples or real life scenarios
15:56 - in which you need to extract certain
15:58 - things from a string
16:00 - save them to a variable print them out
16:02 - or store them in something
16:04 - and then just try different objects
16:05 - expressions make sure you understand
16:07 - what's going on
16:08 - mess around with all the different regex
16:09 - flags you can use such as
16:11 - ins let's see insensitive means case
16:14 - ignore
16:16 - i don't even know what some of these
16:16 - mean um
16:18 - but honestly i think the most important
16:20 - ones would be global or case sensitive
16:25 - and then know that regex kind of applies
16:26 - to any programming language
16:29 - so as long as you have a good
16:30 - understanding of how to write your
16:31 - objects expressions you can translate
16:33 - the javascript python ruby
16:36 - bash whatever you want you can translate
16:38 - regex to and it really helps you out
16:40 - down the road if you need to do some
16:41 - type of string manipulation or string
16:43 - matching
16:44 - i think that kind of wraps up you know
16:46 - how to use the basic basics of regex in
16:48 - javascript
16:51 - and again find other resources if you
16:53 - wanted more deep detailed information
16:55 - about regex but i think that's a general
16:57 - overview of how to use regex in
16:59 - javascript to get most
17:01 - of the things you're trying to do
17:02 - accomplished at least for beginners
17:04 - alright remember to subscribe and like
17:06 - if you thought this tutorial was pretty
17:08 - good be sure to leave feedback and ask
17:10 - any questions in the comments section of
17:11 - the video and again thank you so much
17:13 - for watching