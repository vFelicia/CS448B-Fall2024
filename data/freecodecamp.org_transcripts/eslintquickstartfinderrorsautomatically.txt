00:00 - [Music]
00:05 - hello and welcome to console info these
00:06 - are some shows that i'm going to be
00:08 - making that go a little bit more in
00:09 - depth on how to improve your javascript
00:11 - skills on today's episode i'm going to
00:14 - talk about how to add eslint to your
00:16 - javascript project eslint is a great
00:19 - tool for making sure that your
00:20 - javascript code is healthy and free of
00:24 - any errors that a machine could
00:25 - otherwise catch for you the analogy that
00:28 - i like to make is that eslint provides
00:31 - nice guard rails while you walk along
00:33 - the tightrope that is javascript so to
00:36 - start things off i'm going to make a new
00:39 - project that we'll code together with so
00:40 - we're new mr uh
00:43 - eslint demo studio eslint demo and let's
00:46 - go into our code editor for that
00:51 - you're welcome to code along with me if
00:52 - you want or just let me do all the work
00:55 - the first thing that i'm going to do is
00:57 - initialize a new node project with npm
01:01 - init
01:02 - it's going to ask me some questions i'm
01:04 - going to say yes yes good great perfect
01:07 - love it yes
01:09 - sweet so the first thing i'm going to do
01:11 - we have in here
01:13 - let's just init or repo i would like to
01:15 - do this just so i can keep track of the
01:18 - progress that i've made in a product in
01:19 - a project so i get add dot get stash git
01:23 - commit we'll do init commit cool so
01:26 - let's uh make a uh file that we're going
01:29 - to actually code in
01:30 - we have this index.js
01:33 - file
01:34 - and what should we have it do
01:38 - i'm just going to have it say
01:40 - i like logs five times how about that
01:43 - so we're gonna say cons
01:46 - message
01:47 - equals i like logs
01:51 - and
01:52 - we are going to then
01:55 - what should we have it do how do we do
01:56 - this um
01:58 - uh
01:59 - just make a for loop i guess
02:01 - so for
02:02 - index let's do i
02:05 - is less than five and we're just going
02:07 - to say
02:09 - console.log
02:11 - message
02:14 - cool so if we run this node index
02:18 - great because i didn't save it
02:22 - cool i like logs let's actually make
02:23 - this
02:24 - show message
02:26 - we'll do this here
02:30 - sweet so cool so we have a simple
02:32 - project that we can use
02:36 - and everything looks fine but let's
02:38 - actually add some things a little bit
02:40 - weird so let's just make like you know
02:41 - did show message i'm going to say equals
02:45 - false okay and
02:48 - this looks fine but you'll see why i'm
02:50 - gonna add this in a second so this is
02:52 - cool let's commit this so you know
02:54 - initial work
02:56 - initial work that's a hard work to spell
03:00 - uh
03:01 - gotta add it
03:02 - cool uh so the first thing you can do
03:05 - when you're adding eslint this is the
03:07 - fun part of the demonstration is npm
03:10 - install save dev eslint and you're going
03:12 - to save eslint as a dev dependency
03:16 - because
03:17 - dependencies are things that are in your
03:19 - project that aren't required for
03:20 - production usages
03:22 - linting is an example of that where you
03:24 - can
03:25 - lint something but doesn't really need
03:26 - to be passing lin to actually work in
03:28 - production so for that case we're going
03:29 - to install eslint
03:33 - and there's the jeopardy theme song
03:35 - playing somewhere
03:37 - cool done and there's a little known
03:39 - fact that eslint actually comes with a
03:42 - built-in way of initializing itself so
03:44 - what we can actually do is go in
03:47 - and do
03:48 - init
03:50 - and here we're presented with some
03:51 - questions
03:52 - uh how would you like to configure es
03:53 - lens answer questions about your style
03:55 - use a popular style guide inspect your
03:56 - javascript files i'm actually just have
03:59 - it ask me some questions
04:01 - so am i using ecmascript 6 features yeah
04:03 - sure
04:04 - are using modules no because this is a
04:06 - common js project with node
04:08 - uh my nikola only ran in the
04:11 - in node not the browser so i can do that
04:14 - i do not use jsx
04:16 - i use spaces
04:17 - i use single
04:19 - unix
04:20 - yes
04:22 - what format do you want your config file
04:23 - to be in let's just do json
04:26 - sweet so now if you check here
04:28 - uh let's do git status you can see that
04:31 - my package.json file has been modified
04:34 - as well as my
04:37 - eslint rc file has been created if you
04:39 - hop in here you can see some basic
04:40 - things already in here this is really
04:42 - cool and this is this is the part that i
04:44 - find most beneficial is that by default
04:46 - eslint has built-in recommendation
04:48 - built-in recommended rules and here you
04:51 - can actually see them being extended so
04:53 - you get all those base rules for free
04:55 - and then here you have places that are
04:56 - being overwritten and this to begin a
04:59 - project is
05:00 - more than fine this is a great beginning
05:02 - to make sure that you have started
05:05 - linting your code that there's no
05:07 - erroneous errors that might be in there
05:08 - that are a little bit harder to catch so
05:10 - if you actually back into index you
05:11 - actually see that we have some things
05:13 - that are being yelled at so what is this
05:14 - expected indication of four spaces so
05:16 - this is a place where i'm like no eslint
05:18 - i actually want two spaces so if we go
05:19 - here indent we'll actually change this
05:21 - to two
05:24 - it
05:25 - and there we go
05:26 - that error went away and this is where i
05:29 - think the real power of eslint comes in
05:31 - because this is a pretty you know
05:33 - contrived example but
05:35 - what you see here is that
05:37 - did show message is assigned to value
05:38 - but never used and i've seen this a lot
05:41 - in my code or the people code where you
05:43 - are
05:44 - working on some software and you make
05:46 - some variables and you keep working on
05:48 - it and you forget that you made those
05:49 - variables and they just kind of stick
05:50 - around there and they're not needed in
05:52 - any way and eslint is because it can
05:56 - statically analyze your code tell you
05:58 - about these things
05:59 - and this is the example of that
06:00 - happening so let me actually delete that
06:03 - so it's no longer there and here's
06:05 - another one
06:06 - unexpected console statement and that's
06:08 - usually good usually you don't want to
06:09 - actually have console log statements in
06:10 - your code it's usually a sign that
06:12 - you're debugging you don't really want
06:13 - that but for our use cases i actually
06:14 - want to keep that so here's another
06:16 - little thing that you can do with eslint
06:17 - you actually just say
06:19 - as a comment to disable eslint for a
06:21 - rule eslint disable next line
06:24 - disabled and alter bet anymore however
06:27 - i'm not a big fan of these blanket
06:29 - disabling statements so what you should
06:30 - actually do my trick is like undo it and
06:33 - i see that the rule here is no console
06:36 - that is the eslence rule and that is the
06:38 - only rule that i want to disable for the
06:40 - next line so if i do
06:43 - no console
06:45 - that goes away because
06:47 - if i had just
06:48 - so now i had the semicolon you can see
06:51 - that the error comes back because this
06:52 - is now a different rule that it's
06:54 - complaining about semi if i had just
06:56 - done esl still next line
06:58 - like that
06:59 - that wouldn't have been caught which is
07:00 - why you want to actually explicitly call
07:02 - out the rules that you're disabling when
07:04 - you're doing these features
07:05 - let's go back
07:07 - do that
07:08 - save it
07:09 - cool
07:09 - and now let's add some command line
07:11 - usages for this as well so that you
07:13 - don't have to rely on just your editor
07:15 - for eslinting so we'll go to
07:16 - package.json
07:18 - we're going to say
07:21 - lint
07:22 - and we're going to say eslint where you
07:24 - can reference the node module from here
07:26 - directly you want to go into node
07:27 - modules for that
07:28 - and then i forgot the signature for this
07:31 - let's do npm run
07:33 - lint
07:35 - and i want it to be
07:38 - a file so if i just do
07:43 - that
07:44 - does that work let's go back and
07:46 - actually get this erroring out to make
07:48 - sure
07:49 - oh this is
07:51 - ah
07:53 - cool so now if i do npm run
07:56 - lens
07:58 - and there we go we have our error
08:00 - successfully being ran so if i add back
08:02 - that disable line
08:04 - save it
08:05 - then run this again
08:07 - i am lint free
08:09 - so that was a quick introduction to how
08:11 - to add eslint into your project this is
08:14 - probably the dead simple way to get
08:15 - started there are many more richer
08:18 - default esl configuration files you can
08:19 - use on the internet the big one is
08:21 - airbnb which you've probably heard of
08:23 - before they have a huge guide and styles
08:26 - that they try to follow but i think that
08:27 - might be a little bit too heavy-handed
08:28 - to get started having just the basic
08:31 - eslint recommended files then going on
08:34 - to the website for eslint to see things
08:36 - you want to change up will get you at
08:38 - least on a good solid foundation so
08:41 - that is eslint hopefully you'll learn
08:43 - something new it's very easy to get up
08:44 - and started with eslint and look forward
08:46 - to the next episode where i teach you
08:48 - something else that's new see you then