00:00 - today i want to talk to you about taking
00:01 - javascript to the edge
00:03 - um
00:05 - so
00:06 - the vast amount of choices that we have
00:08 - in modern iot is is crazy compared to
00:12 - what we might have had five ten years
00:14 - ago
00:15 - you know you've got choices of devices
00:17 - hardware attachments you've got
00:18 - languages deployment mechanism different
00:21 - different deployment mechanisms and
00:22 - frameworks
00:23 - and i'm going to try and demonstrate all
00:25 - of the different options that you do
00:27 - have
00:28 - and how we can then use these to deploy
00:30 - javascript to edge devices
00:34 - so choices
00:37 - firstly you need to decide which device
00:39 - are you going to run your code on
00:41 - now in the past you may have only had
00:43 - the option of a for a few small system
00:45 - on chips or a couple of microcontrollers
00:48 - you might have had a very restrictive
00:49 - set of development and debugging tools
00:51 - you know maybe the only one on windows
00:52 - os x or linux
00:55 - architecture you might not be able to
00:57 - control that just whatever you had at
00:58 - the time
01:00 - fortunately this isn't the case anymore
01:03 - so here is a subset of
01:06 - single board computers that resin
01:08 - currently supports you can use any of
01:10 - these in any project that you'd like
01:12 - we've got the raspberry pi and the
01:14 - raspberry pi zero these have got
01:16 - um
01:19 - different architectures different clock
01:20 - speeds different price points and
01:23 - basically you pick what works best for
01:24 - you um
01:27 - you know you've got the raspberry pi's
01:28 - they've got usb they've got hmi
01:31 - everything you'd expect we've got the
01:33 - intel nook these are x86
01:35 - they've got all of the io that you'd
01:37 - expect on a normal computer
01:40 - albeit less
01:42 - we have the nvidia tx1 and they've also
01:44 - got the tx2 these are designed for doing
01:48 - machine learning at the edge
01:51 - you've got the raspberry pi costing
01:52 - about 30 pounds the pi zero costing
01:55 - around 10 pounds
01:57 - the tx2 costing around 300 400 pounds so
02:00 - again it depends what you're after and
02:02 - what you're looking for but the point
02:04 - being you've got a choice for what works
02:06 - best for you
02:08 - so
02:10 - this gives you a blank canvas on which
02:12 - to build
02:13 - and maybe if you chose the raspberry pi
02:15 - you have
02:17 - your device is designed to have some
02:19 - swappable hardware or hats
02:23 - oh additional hardware
02:26 - so we've got hats for the raspberry pi
02:28 - which stands for hardware attached on
02:30 - top love the name by the way
02:33 - on the left we've got the sense hat
02:35 - this was designed for the astro pi
02:37 - project which aimed at getting
02:40 - contributors code in out of space and
02:42 - this actually this this hat was sent to
02:45 - the international space station
02:47 - with some code by members of the public
02:51 - we've got a speaker hat this means that
02:54 - if you want your device to be able to
02:56 - [Music]
02:57 - make noise player music that kind of
03:00 - thing that's easy put it straight on the
03:01 - gpu gpio header we've got a motor
03:04 - controller that means any dc motor you
03:07 - can
03:08 - supply some power and then use the
03:09 - raspberry pi
03:11 - to control those motors we've even got a
03:13 - high def touch screen that you can put
03:15 - onto something in the size the palm of
03:17 - your hand
03:19 - so these are examples of different kind
03:21 - of inputs and outputs that you can very
03:23 - easily add to your iot project with the
03:25 - minimal of installation and set up
03:28 - and often there's libraries already
03:30 - available
03:31 - everything's ready to go
03:34 - so you've chosen your device you've
03:36 - chosen the additional hardware that you
03:39 - want to add on all of your sensors all
03:41 - of your output mechanisms that kind of
03:42 - thing
03:43 - now how are you going to deploy that
03:45 - code to your device
03:49 - so with modern iot deployment there
03:51 - wasn't really that much option that many
03:53 - options so
03:55 - being from risen i'm going to talk about
03:57 - how we have enabled
03:59 - iot projects to deploy their code to
04:02 - their devices
04:06 - containers containers are great
04:08 - so containers are a way of packaging up
04:10 - all of your code and your dependencies
04:12 - and putting them into an environment
04:14 - which when you run them will be exactly
04:17 - the same
04:18 - you can make sure that your target can
04:19 - download can run can clean up after your
04:22 - code without knowing a single thing
04:25 - about
04:26 - your application itself
04:28 - these containers are created from images
04:31 - which are a set of layers building on
04:32 - top of one another to define the
04:34 - environment in which your code should
04:36 - run
04:37 - so i'm going to talk a little bit about
04:39 - how we make those images and then how we
04:41 - get those onto devices
04:44 - so
04:45 - images set of layers just like this rock
04:47 - balancing thankfully it's a bit easier
04:49 - than that
04:50 - so you start out with what's known as a
04:53 - from line
04:55 - so sorry this is a dockerfile
04:57 - and a dockerfile you use to define the
04:59 - image that you want to build
05:02 - they have a set of commands each one
05:04 - being a line
05:05 - and each command in the dockerfile will
05:07 - produce a new image which is the image
05:09 - before it plus whatever additions that
05:12 - command has added
05:13 - so generally the first command that you
05:15 - add is a front line what this says is
05:18 - use an existing image
05:20 - as a base on which to work from and this
05:23 - is known as a base image as you might
05:24 - imagine
05:26 - so what we're saying here is take the
05:28 - image resin slash raspberry high 3 node
05:31 - and build upon it now this image was
05:33 - created by resin to run on the raspberry
05:35 - pi
05:37 - um it's a debian environment it has node
05:39 - pre-installed uh npm pre-installed and
05:42 - it's the bare minimum that you need to
05:44 - deploy a javascript application
05:49 - next we've got a run command so this run
05:52 - command what this says is take my base
05:54 - image
05:55 - run apt-get update so
05:57 - run the debian package manager and
05:59 - decide what packages are available
06:02 - and then we're going to install curl and
06:04 - also let's say that these are
06:07 - dependencies of your application
06:10 - you know maybe you're going to do some
06:11 - downloading of music and then playing it
06:13 - so what we've done here is we've taken
06:16 - the base image we've added another layer
06:19 - which says
06:21 - i've got the debian base image with curl
06:24 - and ulcer on top
06:26 - and that's it
06:30 - so what we need to do next is copy our
06:33 - application our application source code
06:35 - into our image
06:37 - so we've used the workdir command what
06:39 - that is
06:40 - is it says
06:41 - every command that i run from this point
06:43 - on should be in the working directory
06:46 - and in this case i've chosen usr source
06:49 - app
06:50 - you can think of this as
06:52 - equivalent to doing cd usr source app in
06:55 - your shell and then running some
06:57 - commands it's running in that
06:59 - directory
07:01 - after that i've taken a copy command and
07:04 - this copy command says in the current
07:06 - directory there is a directory called
07:07 - source in that directory there's my
07:09 - source files
07:10 - i want to take those source files and
07:12 - add them to the working directory of
07:14 - this image
07:16 - so
07:17 - each line is creating a new image the uh
07:20 - the workday line would create an image
07:21 - that's got the debian node image it's
07:24 - got curl and elsa it's got some metadata
07:27 - let's say that the working directory of
07:28 - this image is usr source app
07:31 - and then there's another image that is
07:33 - built on top of that which says
07:35 - all of my source code is in that working
07:38 - directory
07:42 - so now we need to define which code is
07:44 - going to be run when um
07:47 - when we when we turn this image into a
07:49 - container
07:51 - for this we use the cmd command
07:53 - cmd command says when we take this image
07:56 - and convert it into a container
07:58 - what should happen when we start that
08:00 - container what what should be done
08:04 - so this says
08:06 - i've got an image when this image is
08:08 - turned into a container and it's run it
08:09 - should take
08:10 - the app.js file that we added in the
08:13 - previous copy step and it should run it
08:15 - with node
08:17 - so simple as that
08:21 - okay so we've got an image how would we
08:23 - then deploy it to our device
08:26 - i'm going to kind of rush through this a
08:29 - little bit because i'm not talking about
08:30 - resin i'm talking about javascript so
08:33 - you would create a application on the
08:35 - resin dashboard and
08:38 - download the resinos image for your
08:40 - device resinos is
08:42 - an operating system that we've created
08:44 - specifically for
08:45 - devices which have a thin host os they
08:49 - run exactly what you need and nothing
08:51 - more and your user container will go on
08:54 - top of that
08:55 - and
08:56 - that's all you need that's resonators it
08:58 - will connect to our dashboard and handle
09:00 - all of that
09:00 - so this is this would be how you do that
09:02 - but that's irrelevant
09:05 - you would install a resin cli again if
09:08 - you want more information on this we can
09:11 - look at the documentation but in general
09:14 - you just install the resin cli
09:16 - you do a resin login which would take
09:18 - your application your user account and
09:21 - associated with your local instance of
09:23 - resin cli
09:24 - now here comes the magic
09:27 - so we would use resin push so you would
09:29 - do resin push and then whatever your
09:31 - application name is
09:33 - this would take your current directory
09:35 - which includes your docker file it
09:37 - includes your source code it would
09:39 - package it up and it would send it away
09:41 - to our cloud build servers
09:44 - our cloud build servers come in
09:45 - different architectures
09:50 - we've got x86 we've got arch 64 we've
09:52 - got arm v7 anything anything that you
09:55 - can deploy to we've got a native cloud
09:57 - builder ready there to build your code
09:59 - into an image
10:02 - so you've sent your code to our builders
10:05 - it's built successfully hopefully
10:07 - and this then gets sent to what's called
10:10 - a registry the registry is a
10:13 - a server in the cloud that holds a lot
10:16 - of images and you ask for an image by
10:18 - name it checks if you have access and
10:20 - you download it so we've got that and
10:23 - it's been installed
10:26 - but why why would we want containers
10:30 - why are containers a good thing for iot
10:32 - deployment now at first thought at first
10:34 - glance it might seem you know we've done
10:36 - a lot of all this work but
10:38 - what has it given us
10:40 - why why is this something that we want
10:41 - to do
10:44 - so let's talk about the benefits of
10:45 - container-based deployment in an iot
10:47 - setting
10:50 - isolation so the first isolation
10:54 - so when you're writing code for an iot
10:56 - device often it can be a lot more
10:58 - complex than your typical desktop
10:59 - application you know often you need to
11:01 - have
11:02 - a lot closer to the host operating
11:04 - system you know a lot closer to the
11:05 - hardware on the device on which you're
11:07 - running
11:08 - you might need to interface with the
11:09 - networking or
11:11 - again specific hardware
11:13 - isolation allows you to draw a line
11:15 - around your user application and say
11:18 - this is allowed to do this specific set
11:21 - of circ
11:22 - of tasks
11:24 - if something goes wrong in those tasks
11:26 - we get rid of that container and we
11:27 - start again what that means is your host
11:30 - operating system cannot be affected
11:33 - with a container that's acting badly
11:35 - unless you've configured seriously wrong
11:40 - what this means in the iot setting is
11:42 - you don't brick devices
11:44 - so if you imagine you've deployed an iot
11:47 - device to
11:49 - something in the middle of the sea you
11:50 - know in the middle of atlantic ocean
11:52 - if that device suddenly goes offline
11:54 - there is nothing you can do other than
11:56 - send somebody to go and either fix it or
11:58 - recover it and that's not an easy task
12:01 - if we use containers and something goes
12:03 - wrong
12:04 - we tear down that container and we start
12:06 - again and the device is fine it's
12:08 - pristine
12:11 - reproducibility so when you're using
12:13 - containers you have an environment
12:16 - in which your code runs and that
12:17 - environment is the same on your device
12:20 - it's the same on your local dev
12:22 - environment it's the same on your
12:23 - testing infrastructure it's the same
12:24 - everywhere
12:26 - so if you discover a book in your code
12:28 - you can reproduce that bug locally and
12:31 - fix it locally and in the setting of iot
12:34 - security is a massive thing these
12:36 - devices are
12:38 - in people's homes they're running
12:39 - machines they're
12:41 - everywhere security is a big thing if
12:43 - you see a security problem you need to
12:45 - fix that security problem then and there
12:47 - and being able to reproduce and fix
12:50 - locally
12:51 - is is brilliant
12:54 - application delivery i think personally
12:57 - is the most important part of using
12:59 - containers for iot
13:01 - so for a typical iot for a typical
13:04 - desktop application
13:06 - you've got several different methods of
13:08 - deploying it you've got
13:09 - auto updaters you've got web apps you've
13:11 - got
13:12 - add a push you've got ftp if you need to
13:15 - but if you have an iot project and that
13:17 - device is not on the same local network
13:19 - that you are your options are pretty
13:21 - limited we need some way of telling the
13:24 - device that the update is ready we need
13:26 - some way of the device downloading the
13:28 - application
13:30 - without knowing anything about the
13:31 - application itself
13:33 - and we need a method of tearing down
13:35 - that application should something go
13:37 - wrong
13:38 - now docker containers enable you to get
13:41 - all of these things
13:42 - for free this is what docker was
13:44 - designed for and this is what docker
13:46 - does very very well
13:48 - also if you have a container and you
13:51 - push an update
13:52 - you've got a device out in the field
13:54 - that's got a 2g connection we're talking
13:56 - you know two three kilobytes a second
13:58 - what you can do is say okay i have this
14:01 - container and i need to move to this
14:02 - container we can work out what the
14:04 - difference between these containers is
14:06 - we call it a delta
14:08 - just download that delta on the device
14:10 - and apply it to the container that the
14:13 - device has this means we move from
14:15 - container a to container b with the
14:17 - absolute bare minimum
14:19 - of data transferred
14:23 - so
14:24 - we've chosen our device we've chosen our
14:26 - additional hardware we've chosen our
14:28 - deployment mechanism
14:31 - now we need to choose our software stack
14:32 - and we're at a javascript meetup so
14:34 - let's assume that we all want to use
14:36 - javascript because we all know and love
14:38 - it hopefully
14:40 - so why would we want to use javascript
14:43 - at the edge that's an interesting
14:44 - question
14:46 - there are a lot of programmers that know
14:48 - javascript
14:50 - using the
14:51 - stack overflow developer survey from
14:53 - 2018
14:54 - 70 of respondents
14:57 - use uh javascript
15:00 - 17 to use typescript which is a superset
15:03 - of javascript
15:04 - and
15:06 - whilst it is typically being a language
15:08 - to use to create web applications
15:11 - in recent years it's definitely proved
15:12 - itself to be an extremely competent and
15:15 - useful general purpose library
15:18 - allowing javascript to be run at the
15:20 - edge means that we can take all of this
15:21 - knowledge in which 70 of programmers are
15:23 - already familiar with
15:25 - and apply it to a complete whole new set
15:27 - of problems
15:31 - we have a gigantic
15:34 - existing
15:35 - ecosystem of
15:37 - packages for javascript
15:40 - i took this graph from modulecounts.com
15:43 - today
15:44 - we've got you know a lot of popular
15:46 - package managers at the bottom and then
15:48 - far and away at the top we've got mpm
15:51 - with
15:52 - what is it
15:54 - 500 000 packages at the start of
15:57 - september and now in july at
16:01 - 450 plus packages a day
16:04 - it's it's got a lot
16:06 - the beauty of this is that these can be
16:08 - used in an iot setting with zero changes
16:12 - in general
16:13 - normally
16:18 - so the next point doesn't just apply to
16:20 - javascript but applies to
16:23 - higher level and more modern languages
16:25 - in general
16:26 - so in the past for embedded devices it
16:28 - would have initially it would have been
16:29 - originally written in c or c plus plus
16:32 - or add a push even assembly
16:35 - you know partially this would be this
16:36 - was because we'd need to squeeze every
16:38 - single cpu cycle or every single byte
16:41 - out of memory
16:43 - now we've got single board computers
16:45 - which run at gigahertz they've got gigs
16:48 - of ram this just isn't that much of a
16:50 - problem anymore and programmers will
16:52 - prefer to use
16:54 - prefer to use languages that aid
16:55 - maintainability
16:57 - and ease of use ease of debugging rather
17:00 - than getting that raw performance
17:02 - and i think that's why javascript has
17:04 - been used on the edge so much already
17:06 - and why i think it will continue to do
17:07 - so
17:10 - so
17:11 - what does javascript at the edge
17:12 - actually look like
17:14 - surely it's got to be different
17:16 - hopefully not it should be exactly the
17:18 - same
17:20 - because it's javascript it runs on the
17:21 - node engine it
17:23 - has the same data models it has the same
17:25 - behavior
17:26 - so you can write code for the node
17:28 - engine on your desktop
17:30 - and it should behave exactly the same
17:33 - to code that you run on your device
17:35 - ignoring any hardware differences you
17:37 - know maybe you're simulating some
17:38 - hardware
17:40 - your test suite should be just as
17:42 - effective when you've run it locally to
17:43 - when you've run it on your device and
17:45 - your node modules should be installable
17:47 - both locally and both on your device and
17:49 - they will exactly
17:51 - behave in exactly the same way
17:55 - so i want to show you what how well
17:57 - javascript can lend itself to edge
17:59 - programming so this snippet of code is
18:00 - from a node library created by resin to
18:03 - interface with the sensor that i was
18:04 - talking about earlier
18:06 - it takes a handle the led matrix chooses
18:08 - an xoi sets pixel pretty standard
18:11 - javascript we've all seen this
18:14 - it's pretty standard this it's not
18:16 - special in any way you would you
18:17 - wouldn't be surprised if you see this on
18:19 - some web application it doesn't change
18:21 - at all
18:22 - so what about using the sensors because
18:24 - the sensor has a lot of sensors what
18:26 - surely it's going to be a bit hard to
18:27 - use them
18:29 - nope we've got exactly the same
18:31 - javascript that you'd find in any other
18:32 - web application
18:34 - it's pretty standard you could create a
18:36 - handle for the imu also known as the
18:38 - inertial measurement unit
18:41 - request the sensor data and provide a
18:43 - callback again standard javascript you'd
18:46 - see this anywhere
18:49 - this is typical
18:50 - doing something extremely non-typical
18:52 - for javascript and it just works it does
18:54 - exactly what it's supposed to do we've
18:56 - got the same javascript objects that
18:57 - pass through json.stringify
18:59 - we've got the same error handling as a
19:02 - normal node cord callback would it just
19:04 - works
19:06 - even hardware events are made extremely
19:09 - easy
19:10 - so i'm sure everyone's familiar with a
19:12 - javascript event emitter but so what
19:14 - what you would do in this case you would
19:16 - ask for a handle to the joystick
19:19 - you would set up callbacks for
19:22 - joystick events so in this case we've
19:23 - got
19:24 - press release and hold
19:26 - and this is again very very typical
19:29 - javascript and this is running on a
19:30 - device out on the edge
19:34 - so
19:36 - we've chosen our device we've chosen our
19:38 - additional hardware deployment mechanism
19:39 - we've chosen our software stack the only
19:41 - thing left to do
19:43 - is for you guys to write some code so
19:45 - one of the beautiful things about
19:46 - containers is you often make a
19:49 - distinction between application state
19:50 - and application data
19:53 - anything that needs to be kept should go
19:55 - in application data and how we actually
19:57 - do that at resin is what's known as
19:59 - docker volumes
20:01 - and these are just segmented parts of
20:02 - the file system
20:04 - which can hold data
20:06 - application state on the other hand
20:08 - would be lost
20:10 - so you would design your program in a
20:13 - way that if it needs to recover and go
20:15 - back to a certain point you would read
20:16 - application data
20:18 - now this is nice because it means that
20:20 - if you have a bug in your code that
20:22 - would change your application state in a
20:23 - weird way if you tear it down and bring
20:26 - it back again
20:27 - and it works going from data to state
20:30 - then it should work
20:32 - fine
20:34 - this was a javascript at the edge and i
20:36 - hope it was very informative