00:00 - A design system is a set of standards, reusable
components and patterns used to create visual
00:05 - consistency throughout pages and projects.
Figma is a vector graphics editor and prototyping
00:12 - tool in this course, Tim Sullivan will teach
you how to create a design system using Figma.
00:18 - What is going on you guys Tutorial Tim here.
And today, I'm gonna give you a brief overview
00:21 - of what we're going to be covering in this
series to come, I'm going to be creating a
00:26 - design system.
And this design system is going to be materials
00:30 - design system in figma.
And I'm going to do my best to translate what
00:35 - is currently being displayed on this website
into figma itself as a design system.
00:41 - So we'll be going over First, the foundation.
And the foundation entails things such as
00:48 - the layout, and what is layout, like a response
to creating these responsive grid layouts
00:53 - of styles and figma.
Understanding how to build these out using
00:56 - proper space spacing methods, and how components
will be laid out on them.
01:00 - So we'll be going over that.
And we'll also be going over how to apply
01:05 - a color system utilizing material designs
color system and implementing that into figma,
01:10 - as well as style color styles.
And also, we're going to be going over typography
01:17 - and building out the typography system that
is specified here in material design.
01:23 - But in figma, how do we do that and translate
this into figma.
01:26 - Also, we'll be going over iconography.
And with iconography in figma, we're going
01:34 - to be basically applying the structure for
the letter specified in the product icons.
01:41 - I'll have this set of icons already in figma
when we go over, but I'm gonna show you how
01:45 - to organize it and access it via the instance
drop down menu.
01:49 - So you can swap amongst common components
and other component icons, which are components
01:54 - as well.
And also, we're going to be going over a portion
01:59 - of interaction, which is states states being
states for certain components.
02:03 - So in that portion of building design system,
we'll go over foundation.
02:09 - And then moving on from that, we'll go to
components.
02:12 - And we'll literally build every single component
on this page from scratch and utilizing the
02:18 - foundation that we've created in figma.
So we'll start with the app bars, app bar
02:26 - bars, bottom at bars top all the way down
to the very last component being tooltips.
02:33 - And we'll go over how to, like construct it
via its anatomy, right.
02:37 - So we have all this information, how to use
it the placement and behavior.
02:42 - And basically, I'll teach you how to basically
view this file and build it out in figma,
02:48 - from scratch and apply the proper constraints.
So it's responsive, just in case designers
02:52 - need to modify it.
And that is basically going to be the design
02:58 - system that we'll be building in figma, which
is material design.
03:01 - And that's the brief overview.
I'm gonna start off with a color system is
03:10 - Yeah, so it's gonna kind of start off with
referencing the website to give you guys an
03:15 - understanding what we're going to be building
out in in figma.
03:18 - And what we're going to be doing in figma,
is basically translating, I'm going to give
03:23 - you a brief overview right now what we're
going to be doing throughout the whole course
03:26 - of the video, to give you a general understanding.
So we're gonna start with the color system,
03:29 - implementing colors, and then adding that
into figma as a library, so you can see them
03:34 - here.
For those of you who have, for those of you
03:37 - who are able to utilize libraries, you can
see this color palette here.
03:42 - And all the styles that have been created
in that library.
03:45 - So with my material design, system colors
file and rename that real quick material design.
03:53 - And we got materials on here.
And now, if I go here, we're going to be able
03:58 - to add it to this library that will publish
eventually, with all these colors, but this
04:03 - current files already published.
But what I'm going to do is delete all these
04:06 - real quick.
All right, so we have these colors, we have
04:11 - color styles, but we haven't added into the
library, I'm gonna show you how to do that.
04:14 - But I'm gonna show you how to do that by developing
the developing book creating this color system,
04:19 - we're gonna use the baseline material color
theme, to showcase how to build out these
04:24 - colors as styles and figma for your whole
team to utilize in figma.
04:28 - If you're working for an organization, for
example, or just a team, it's a much more
04:32 - effective way of working.
So basically, what I'm going to do is screenshot
04:37 - this to have all these values, so I don't
want to go back and forth between browsers.
04:40 - And once I have that done, I'm just going
to remove everything here.
04:47 - Don't need that.
Don't need that.
04:51 - And I'm going to start this is like a brand
spanking new file so you guys can follow.
04:54 - Follow me from scratch.
I already have one page and I'm actually gonna
04:57 - label this primitives because This, this component
is a primitive component.
05:08 - So the way we're going to structure all these
components, in terms of its complexity is
05:13 - from like its very simplest form, that being
labeled as a primitive, all the way to components,
05:19 - and then patterns, which are composed of several
components.
05:23 - And we'll get more into that later.
But let's just get started with the colors.
05:28 - So now I have the screenshot pasted here.
And what I'm going to do is basically translate
05:33 - all these colors into styles.
So without any further ado, I'm just going
05:38 - to create some rectangles.
And actually, I'm going to hit Ctrl, C, to
05:42 - copy this value here.
Notice that when I use Ctrl, C, the hex value
05:47 - isn't what's indicated in the screenshot that
I've selected to copy the value and apply
05:55 - to the rectangle.
So I'll have to manually input and put that
05:59 - value that's indicated there.
And I'm just going to keep doing this until
06:08 - I have completed all of the color values.
And I'll see you when that is done.
06:16 - Right, so I've now completed creating all
these color blocks for you in figma, just
06:24 - to kind of visually show you and apply the
correct color rows, because actually, what
06:27 - I wanted to originally do was use a control
picker and apply these values, but it doesn't
06:31 - actually reproduce the exact hex values specified
in the image, because of the screenshot that
06:37 - I grabbed.
And anyways, long story short, let's make
06:41 - these color styles now.
So now we're going to add the this into our
06:45 - color system.
Currently, we don't have anything in our color
06:47 - system.
So basically, what, what you can do is, we
06:51 - already have the naming convention set for
our color styles.
06:54 - So we can go to our color and select style,
add new style, and it will basically grab
07:03 - the hex value of the rectangle we selected,
and then we can label it as primary.
07:08 - And when we click Create style, it'll create
that style.
07:13 - And when you hover over it, a tooltip will
appear below it.
07:16 - And it will state the name of the style that
you're trying to look for.
07:19 - And also, if you want to add labeling on let's
say, if we create a like primary variant,
07:25 - whoops, and we select this little, these little
four icons, and then click Add style.
07:30 - And then we do primary slash variant, this
will actually add labeling.
07:36 - So we'll go and it'll, you'll start to see
that with with us utilizing the slash in the
07:45 - name of your color style, that slash actually
creates this label for you to really easily
07:50 - parse information in your color styles, which
is very good for, like ease of use, as opposed
07:58 - to just like generating all of these colors.
And then just having them side by side and
08:03 - hovering, to access the name of the color
you're looking for exactly.
08:07 - And at least divide them into sections to
get you one step closer to finding the color
08:13 - you need.
And I'm gonna unlink that, because it's not
08:14 - exactly how I want to approach it.
I'm actually going to go here, and if you
08:22 - if you'll notice, too, and your color styles,
if you haven't published them, there'll be
08:26 - under local styles.
And then you can access your library by going
08:29 - to, if you hit Command Shift, question mark,
you can type in library, and then it'll switch
08:34 - you to Team library.
There's also a shortcut key, option three,
08:39 - that'll take you there and also a shortcut
key option command o to access the libraries.
08:44 - And you'll notice that I have 19 unpublished
changes to publish.
08:49 - And I can publish those, but we'll publish
that once we have completed this.
08:53 - And I'm going to continue to create the rest
of the colors as I go and label them accordingly.
09:01 - Secondary, create style.
And then I'm going to create this as a primary
09:08 - variant.
Create style.
09:15 - And one thing you can do as well in the color
styles is you can actually drag and drop to
09:19 - reorder the styles.
So I'm going to actually right click on this
09:22 - one and delete style.
And one thing you can do with color styles
09:25 - as well is you can go in edit and add description
and say this secondary color is used for x
09:36 - component, x meaning the name of the component
or the or like also on surfaces for x component
09:48 - as an example.
And then once you're once you've completed
09:52 - that you can hit back and it'll save your
changes.
09:55 - And then you can go back into the components
like that style and you notice those changes
09:58 - are now there.
Which is another nice thing about colors to
10:02 - get an understanding of usages behind them
when using them across like, say you're designing
10:07 - for a product, for example, I'm going to pause
this video and generate the rest of these
10:12 - colors.
And I'll see you in a bit.
10:19 - So now I got everything done.
You can see my color styles has local styles.
10:23 - So I got the baseline of the material theme
in its colors, right, and I got them all labeled
10:31 - here.
From the screenshot, I snapped from the website.
10:34 - And I basically just translated that into
figma.
10:36 - And then I applied those styles all the way
from primary to the on error surface, a lot
10:41 - of them are very similar.
But one thing I do not like about this approach
10:44 - that I'll show you.
And the next approach of applying color styles
10:47 - with a consistent naming convention that clearly
labels everything, when you try and access
10:51 - it via the drop down menu is that this isn't
very clear what I'm trying to change the color,
10:57 - right, I just have to hover to find the values.
And a description will appear for for components
11:04 - that do have a description there, which is
why that tooltip was rather large for that
11:10 - color style in this instance, just to provide
some context behind that.
11:13 - And anyways, this is just isn't clear enough
for me to add color styles.
11:17 - So what I'm going to do is in material design
2014 established right down here in 2014,
11:29 - their color palette, and it's just comprised
of colors to work together harmoniously.
11:35 - And basically, this is where I'm going to
use like a consistent naming convention and
11:38 - structure based off of the, the colors given
here with, with what I like to call the variables
11:47 - and their hex values, which I'll then apply
in figma.
11:51 - And I'm gonna show you how to do that with
the top three.
11:53 - So I'm gonna go back to figma.
And I'm going to show you before, I'm going
11:59 - to show you, I'm going to remove all this,
because I don't want this anymore, I am going
12:08 - to actually just leave it.
And so you can see the difference between
12:13 - how to navigate colors with a consistent naming
convention, utilizing the slash when naming
12:19 - these colors and the styles when creating
them of styles.
12:22 - And anyways, I'm going to go here, grab my
rectangle.
12:27 - And I'm literally just gonna actually copy
this block here on background label at Red,
12:38 - red, red 50 to kind of mimic the layout that
we have here.
12:45 - And then I'm gonna hit Command D to duplicate
and then option D to snap that to the right,
12:48 - and then type in this hex value.
And this whole process you're seeing from
12:53 - me is, I'm going to do it once and then I'm
going to pause the video and do it for the
12:57 - rest.
And then I'll show you how to properly label
13:01 - everything as a color style in figma.
And, and then I'll be back.
13:10 - Alright, so I have now replicated this screenshot
I've taken from the website with the color
13:18 - palette holds a portion of the color palette
that material design has to offer either utilize.
13:24 - And I've just done the red, pink and purple.
So now what I'm going to do is start to show
13:30 - you the difference and how helpful it can
be by doing applying this consistent naming
13:37 - convention to all the color styles we're about
to create for red, pink and purple, which
13:42 - you can apply to your system.
So I'm going to start with red, we got this
13:47 - red 50 value, so we got red 50, we already
have the hex value, it's gonna click add color
13:53 - style, I'm gonna label it read because we're
gonna have a section of rats, ranging from
13:59 - values of one through 900, from light to dark,
and then also a 100 to a 700.
14:06 - Not exactly sure what those values represent.
But uh, you get where we're going with this.
14:11 - And I'm going to do red 100, and then specify
the hex value as well.
14:17 - And the color style, which is always helpful,
so you don't have to actually go in and manually
14:23 - apply the style and then unlink it to view
the hex value, which I find quite annoying.
14:27 - So we got this format, I'm gonna click Create
style, hit enter.
14:31 - Now we got red one.
So on hover, we'll see red 100 and then the
14:35 - hex value.
And then if you click away, you also see the
14:38 - way we named it is red slash 100 dash, the
hex value, which is nice and easy to parse.
14:45 - And again, this is up to you and your team
to decide on how you label this in terms of
14:52 - like doing this for an organization for teams
to utilize.
14:56 - Now I'm going to go in and create the rest
of these Use for, for red.
15:02 - It's the same process.
So we got, what do we got, we created red
15:07 - 100 was actually supposed to be labeled red
50 actually wrote the wrong hex value as well.
15:14 - So I'm just gonna edit that.
And it's red 50 good to go hit enter tab,
15:21 - go back.
Now we see that it's refined and reflects
15:24 - the actual value.
Okay going to do on a couple more, so you
15:30 - get the idea of how to name your color styles.
Now, I'm going to pause it and finish reds
15:36 - and then do a couple of pink and then do a
couple of purple to see how effective utilizing
15:43 - the slash and your color styles can parse
the information when trying to access the
15:47 - colors to apply to your components moving
forward, when we continue to implement more
15:53 - of this system as it becomes more dense.
So we got red 100 here, gonna add color style.
16:02 - Red 100, good to go create color styles.
And we got two that fall under the red category,
16:10 - because we're utilizing red space slash keeping
the naming convention consistent.
16:14 - So I'm just gonna copy this hex value, Command
click on my rectangle with the color that
16:18 - I want to be a style.
And then I'm going to paste red 100.
16:25 - But change that to 200 and then reapply the
hex value for red 200 and create that style.
16:33 - So now I'm going to move on to creating another
category which is pink.
16:38 - We got I'm going to copy this again, Command
click and add color style.
16:45 - And I'm going to go with pink space slash
space 50 and then dash and then the hex value.
16:54 - Create that style.
And you'll notice in the color styles now,
16:57 - we have our new our own pink section to reflect
what we'd like to mimic visually, but in our
17:04 - color styles, which will be accessible to
everyone once you publish this, because currently
17:09 - these are local styles.
As you can see, when you click somewhere random
17:12 - on the canvas, the blank canvas, you'll see
the color styles here.
17:16 - But they sitting there only local but we'll
push them once we're done completing this
17:21 - stew.
I'm going to do purple now, because I'm pretty
17:24 - sure by this time you guys already know how
to do this.
17:28 - As I've done it multiple times, I'm going
to copy this hex value, select the background,
17:35 - add the color style, and I'm going to go purple
space slash add the hex value there and then
17:41 - type in fifth 50 did that.
Okay, enter.
17:48 - Now we have our sections of red, pink and
purple.
17:51 - The other sections we haven't implemented
from the material design website, which I
17:55 - will do on my own are, are the following.
As you can see, I scrolled through a lot of
18:00 - them, it will take a lot of time, but is the
same exact process.
18:05 - But I will pause this video and complete that
and show you and then we'll publish it once
18:10 - I'm done.
And that'll be the end of the video bareback.
18:15 - All right, all right.
All right, I finished creating the rest of
18:20 - the color styles using the method I specified
for pausing this video.
18:23 - And you can kind of see how dense this, the
styles became.
18:28 - So each one of these is now a color style
organized here from red, pink, and purple.
18:35 - And there's plenty more to go, I will have
all of them created for you to reference as
18:40 - well, in that, by that I mean all of these,
which are screenshots that will convert into
18:47 - this figma file.
Take a little bit of time, but uh, it's not
18:52 - an issue.
So now, the final step is publishing this.
18:56 - So what do we what? How do we do this? Well,
there's a few ways I'll show you, we can select
19:01 - assets, we can click on this library icon
and this little, that little blue icon right
19:06 - there in the top right corner indicates that
there are publishers to be made changes, that
19:12 - publishers to be made or whatever, you can
select it and you can see that you can publish
19:16 - 69 changes, the 69 changes being all the color
styles that we have applied to this library.
19:20 - One thing I want to show you is the the differentiation
between the way we labeled these colors in
19:29 - the beginning and then the way we labeled
these three sections in a much more organized
19:35 - and clear concise manner.
So if we go here, create a rectangle and apply
19:39 - a color style to it.
We just like this little icon here and you'll
19:42 - see that the we have these colors right The
only way you can really tell what they are
19:46 - labeled as is if we hover over a mother wait
to see that tooltip pop up as well.
19:51 - And what we did with the colors that we use
the slash to indicate what the label was,
19:58 - to the left of the slash being the Read, and
then the value being applied to the style,
20:06 - which is read 50.
And then also on hover, being able to view
20:10 - the hex value as well.
And we did that and split up red, pink and
20:16 - purple in a much more clear and concise manner
for the user to navigate and use.
20:21 - And again, this is still somewhat troublesome
because of how dense this color palette is.
20:26 - But this is the best solution I think figma
has created for this and myself.
20:32 - If there's any other better ways to do this,
please let me know in the comment section
20:35 - below.
I hope you guys found this video extremely
20:37 - helpful.
Thank you for your time, please leave a like,
20:40 - comment, and subscribe and follow me on GitHub.
If not, I'll catch you in the next one.
20:47 - What is going on you guys, I almost forgot,
we still got to publish the library.
20:50 - So I showed you multiple ways of how to publish
it and use Go to View switch to Team library
20:56 - or you can select this icon in the assets
panel.
20:58 - And another way is my favorites.
My shortcut key is option command zero.
21:03 - And then you can select Publish changes.
And then you can view every style that was
21:09 - either modified.
So in this case, there's a bunch of removed
21:13 - ones, you know, colors that weren't very explicit.
And then the colors we added, of course, and
21:19 - I'm gonna hit and then you can also add a
description as to what you added.
21:22 - So I'm just going to be it's like a kind of
like a message like a git commit message in
21:25 - a way, which will display in the version control
history, once you publish this.
21:30 - So I'm adding colors, adding a portion of
color into the curial.
21:36 - Sign, color system to library.
And then you have a message, kind of explaining
21:49 - what you did, and then publish.
And then it'll add this to your library, a
21:56 - little snack bar indicating the the process
successfully updated.
22:02 - And then you can view your assets.
And the nice thing about it is you can view
22:06 - now if you go to material design, you can
view all your colors here.
22:09 - And on hover, you can view everything.
It's not as nice laid out as the colors panel
22:16 - here.
But yeah, that's how you publish the colors
22:21 - to your library.
That is the final step.
22:25 - Today I'm going to show you how to create
a type system figma specifically material
22:30 - designs type system, link will be in description
to reference the type system material has
22:35 - created.
And basically just going to give you a general
22:38 - idea of how to really develop a type system
that is utilize for your content, specifically
22:45 - your components and the patterns we'll be
creating here in figma.
22:49 - I also recommend messing around with this
type, this type school generator, they have
22:54 - this nice little interactive element to the
web page that allows you to really see the
22:58 - type skill and different fonts specific maybe
more than likely a font family you're using,
23:04 - you could see what that looks like at scale.
And if it's a great resource, figured I'd
23:09 - share it.
And again, I recommend going through all this.
23:11 - So basically, we're going to be going over
creating this from scratch and developing
23:15 - them into type textiles in figma that are
easily reasonable crasher design system and
23:21 - the one we'll be building.
So let's get started.
23:25 - So I got figma open here, and you can also
access this exercise file if you don't want
23:29 - to do it and just want to grab the values,
I'll have that figma file, a link in description.
23:34 - So we got our our examples of the properties
summed up here for all of our headers or subtitles,
23:43 - body and content, such as button caption over
line, and we're basically just going to be
23:48 - applying all of these properties to our textile.
So without any further ado, let's get started.
23:54 - Alright, so now that we got this, I'm gonna
open up my type tool here, and I'm just gonna
24:02 - select type in h1.
I'm gonna set this to auto width because I
24:06 - don't like any unnecessary out of line space
other than what's specified for the type.
24:15 - And I'm just going to set this size to 96,
which it already is, the line height is set
24:21 - to auto, but the letter spacing we're going
to modify to negative 1.5 as specified.
24:25 - When I make sure I select that here, select
my type, and then type in negative 1.5.
24:33 - Hit enter it tightened here, the kerning and
or our letter spacing better word for it,
24:42 - as indicated here.
But anyways, I'm going to continue to build
24:45 - these type styles here.
I'm going to type in h2, select my typography,
24:51 - ensure that I got the letter spacing right
so I don't forget and set that to negative
24:56 - 0.5.
Hit Enter And, again, if you are confused
25:05 - with anything and want to understand the properties
more, you can click on this icon here with
25:12 - your text selected, the more icon and view
all the properties that this typeface has
25:18 - to offer.
And one important thing to note that is if
25:21 - you're using a different typeface, but creating
this type system, there are features and specific
25:28 - fonts that are offered and aren't offered.
So if you are seeing some features here, that
25:33 - aren't offered in a separate font you're using
in in context of this video, it's probably
25:40 - because it doesn't offer the functionality.
So just note that I also recommend kind of
25:46 - reading through all this is very great information.
But that is for another video, if you'd like
25:52 - me to make it, leave a comment in the comment
section below.
25:54 - And anyways, we got our letter spacing specified,
we need to change the sizing here.
25:59 - And the weight is good.
And so the line height, and you can kind of
26:04 - start to see this process, very straightforward.
And you repeat that, moving forward.
26:10 - The only intricate details I'd say, before
I zip through this is the button property.
26:17 - So if I go ahead and type in all lowercase,
I can actually apply the all caps sentence
26:23 - casing in the text properties, which is fantastic.
I'm going to do that by selecting the uppercase
26:29 - property.
And there are other properties such as lowercase
26:32 - title case, small caps, and for small caps.
And I just want to note that, because I think
26:38 - that is very important for these textiles,
to really optimize them.
26:44 - So we're gonna go to letter spacing, and implement
add in 1.25, we've got the letter spacing
26:51 - set.
Now we're just gonna change the size and weight
26:55 - set to medium.
And now we have our all caps in the button,
27:04 - we don't even have to hold down Shift, which
is fantastic.
27:08 - And one other minute change here.
For this textiles, we're going to of course,
27:14 - change the size and weight.
But most of all, we go to the text properties
27:24 - we're gonna change the case to for small caps
to be in line with the case here, just because
27:35 - the font size is so small set to 10.
And other than that you guys can go ahead
27:41 - and make the rest of these also will have
this file and the description below.
27:48 - So I'll be right back with all these textiles.
Alright, so now I know I've got all the textiles
27:57 - created with a proper properties.
I hope you did that exercise too.
28:01 - And anyways, now we're gonna go about organizing
our styles and then publishing them, and that'll
28:06 - be the rest of the video.
So we're gonna be utilizing the way figma
28:10 - structures accessing textiles, there's a really
nice way to like, thoroughly separate all
28:19 - the header content from the subtitles from
the body as well as the textiles for other
28:25 - types of content, such as buttons, and captions
and over lines.
28:29 - So I'm just going to go here, select my textile,
click on this icon, click the plus button
28:36 - to create a style.
And I'm going to type in headers slash.
28:40 - And with the slash naming convention, it's
actually going to allow me to separate out
28:46 - my textiles by category.
So we're going to have our headers and subtitles
28:50 - and body and separate as well as the content
such as buttons, caption or lines.
28:56 - So I'm going to specify this h1 here.
And then it's going to add this little dot
29:03 - here to separate it.
So I got my h1.
29:05 - And you can also specify the weight of the
font, which is this h1 is a light h1 in case
29:12 - you have variants of h1 later on down the
road for specific reasons.
29:16 - And one thing we can also specify is the size
here are sizes 96.
29:22 - And I like to what that you can do is use
this divider and specify the line height in
29:29 - relation to the size of your font, which is
also very important.
29:33 - But I have all of these set to auto here in
figma.
29:36 - But for example, you could write auto or specify
the line height.
29:42 - And again, when you create that style, it
will now appear under headers whenever you're
29:48 - trying to apply a style.
Say I want to apply style now.
29:52 - It's under this category name headers.
And once this is more fleshed out, it'll be
29:57 - much easier to see the organization of a The
content.
30:01 - So I'm going to go ahead here and create the
same exact thing for my headers, the rest
30:09 - of my headers again using the slash convention,
specifying that it's an h2.
30:15 - And it uses the weight light.
And the font size is 60.
30:21 - And the line height is set to auto.
And again, for your systems are probably going
30:27 - to be more specific the line height, but in
this example, I'm not going to get to the
30:33 - gritty in that regard.
So create that style, you notice that it updates
30:38 - here, we're gonna populate that again, got
that h3, specify the weight again, and specify
30:52 - the size.
And of course, the line height.
30:58 - So you can see continues to populate.
And now I'm going to go ahead and finish the
31:03 - rest of this.
I'll create one subtitle to so you can see
31:07 - the differentiation of categorization between
two different categories, which will be our
31:13 - headers and subtitles.
So I'm gonna go get here, add the style, label,
31:19 - subtitle, subtitle and one, specify the weight,
just regular.
31:31 - And then of course, the size of that font.
And I don't know, off the top of my head,
31:35 - but I will leave it set to six subtitle set
to 16, which it is, and the line height set
31:41 - auto.
So here you can see now that your textiles
31:44 - are organized.
Here, clearly, and I'm gonna go ahead and
31:48 - finish the rest of this.
And I'll be right back.
31:53 - All right, so now we got all our content set
up and organized.
31:57 - So you can see that I've now spliced these
into what does that 344 categories, we got
32:03 - the headers with the subtitles, and we've
got the body and the content.
32:09 - And one textile I'm actually missing is this
subtitle, what's going on here, let me just
32:13 - above this real quick.
We've got subtitle, subtitle, subtitle wanted
32:18 - to, oh, there we go.
I'm just going to organize that real quick.
32:22 - There we go.
So in the order in which you create your textiles
32:26 - is how it will appear in the hierarchy.
So you may have to organize that.
32:33 - And now when we go ahead and create a textile,
I mean create, when we need to apply a textile,
32:39 - we can go here, look at our textiles.
And now they're beautifully organized in a
32:44 - clear, concise manner.
And not only are they organized, each textiles
32:48 - named in such a way that it it's easy to specify
the size, and the line height as well.
32:56 - And again, I just have that set auto.
Um, you could also make that the letter spacing
33:00 - here if you wanted to depends on how technical
you really need to be.
33:04 - And that's how you do that.
And now our last step is publishing this to
33:09 - our library.
So now I got 26 changes to publish here.
33:14 - And for those who do not know how to use this,
this is basically like a git commit.
33:20 - For those of you who are developers ignore
all of these removed textiles, these are old.
33:25 - And at here, you'll be able to see all the
changes that you've created, which are all
33:33 - the textiles you've added.
And we can write a description.
33:38 - adding text styles to design system.
This is very vague, but give you a general
33:49 - idea how to do that.
And again, you can view all the changes made,
33:53 - and everything that is unchanged here below.
And then and you can publish.
33:58 - And the nice thing about leaving comments
is that it leaves a trail to track any history.
34:03 - So if we go to show version history here,
by clicking this carrot, click Show version
34:10 - history, we can see that we just published
our textiles and we left that message.
34:16 - So we can actually go to that point in time
by clicking on it.
34:19 - And it will take us there.
Or we could go even further back to a point
34:24 - in time where these weren't even created.
So if I click on 6:47pm, it's going to load
34:30 - and I'm viewing the time this autosave at
6:47pm.
34:35 - And you can see that there are no textiles
here.
34:37 - And you can't edit this version.
But say you needed to, you could duplicate
34:42 - this and then go to that duplicate file and
grab what you need and then bring it into
34:47 - the current version.
And if you hit escape, you can get back to
34:50 - your current version or you can click the
button edit current version.
34:52 - And if you're lost, I'd hit two under keyboards
the shortcut key to fit everything, everything
34:56 - in your canvas to your frame and Now we found
ourselves back here, with all our textiles
35:04 - here, not local anymore.
Now published.
35:07 - So now designers can actually access this
in their panel here, we go to, I got mine
35:11 - set to materials on here with all my colors
published and my textiles.
35:17 - Today we're talking about elevation and material
design and how it's utilized.
35:23 - So we'll be doing an overview of elevation,
which will entail elevation depicting, understanding
35:30 - depicting elevation, the elevation hierarchy,
and the default elevation set for components.
35:37 - And I have some documentation that I grabbed
off of material designs website, which you
35:41 - can also access by clicking on this and the
exercise file and clicking open link.
35:46 - And then you'll then get access to the elevation
page in material design, where it discusses
35:52 - all of this, and as covered in the contents
here in depth.
35:57 - And essentially, elevation is the relative
distance between two surfaces along the z
36:02 - axis.
So what is the z axis? Well, we go ahead and
36:07 - Google search that.
And for those of you who are beginners to
36:10 - this and don't understand the z axis, it is
the third access usually representing depth
36:16 - on a three dimensional grid.
It can be used in charts or graphs, and whatnot,
36:22 - typically, in a Cartesian coordinate system,
and the z axis is perpendicular to both the
36:26 - x and y axis, and is used to plot the value
of z, the third and unknown in mathematics,
36:33 - which is, which is good to know.
And anyways, how this translates in figma
36:38 - is basically the hierarchy.
And in the in the layers, you can think of
36:43 - as like the hierarchy in the Layers panel,
say, for example, I have a frame here.
36:48 - And then I have a couple of shapes.
And I'm going to offset this color here.
36:55 - And currently, the shapes are being basically
utilize the Z index.
37:02 - And you notice that because this rectangle,
when I overlap it over the rectangle above
37:07 - it visually, this gray rectangle, and I add
this red rectangle there, you'll notice that
37:12 - this red rectangle is higher up on the Z index
in and also you can think of that in the layer
37:19 - order as well, I can even change that and
drag it below this gray rectangle, meaning
37:24 - that it's now lower on the Z index the red
rectangle, and you can go ahead and move that
37:30 - around and understand that that is the Z index
that is representing the layer order here.
37:36 - And basically, what material design does is
that it has a set of components.
37:42 - And here you can see a set of default elevation
values for all kinds of components.
37:47 - And here, we have all of the elevations.
Values that will turn into styles as they
37:53 - already are in this figma file locally.
And we're gonna go ahead and create a couple
37:57 - of them from scratch so you understand how
they're built as styles.
38:01 - And we'll also go ahead and do a brief overview
about how those are made based off of reading
38:07 - the documentation.
So here, again, elevation is measured in dips.
38:14 - And in elevation elevation material design
is measuring the distance between surfaces.
38:19 - As you can see here, they're giving you a
representation of what this z index looks
38:25 - like, by us utilizing this graph here, this
format to indicate how far a surface is from
38:34 - one another.
But again, to us, it looks horrible to us
38:39 - visually it is we're seeing this horse on
this flat surface on the screen.
38:46 - But if you were to tilt that view sideways,
you could say, this is what that would look
38:50 - like in the scenario where this example number
two indicates that there's a surface that
38:56 - is one dip set to one dip elevation, and then
the other surface is set to eight dip elevation,
39:05 - as viewed from from the side view here.
And the difference between the two surfaces
39:10 - is seven dips as viewed from the side angle.
And you can represent that with using a drop
39:18 - shadow.
And that will indicate the elevation and the
39:24 - distance between these two surfaces.
So here's the one dip here in this rectangle,
39:29 - and then which is represented from the side
view.
39:32 - And then here is elevation being expressed
at a higher elevation, using eight dips with
39:41 - much more visual emphasis on the drop shadow
as you can see, and that's also represented
39:48 - here from the side.
And there's that distance Express there.
39:53 - And there's another more complicated example
are both surfaces A and B are at the same
39:59 - elevation a nBw are set to eight dip elevation,
and they cast different shadows because surface
40:05 - B is in front of another surface that already
has elevation.
40:09 - As you can see, the surface c already has
elevation set to four dips.
40:13 - And then on top of that surface B is set to
eight dips, as you can see as represented
40:18 - from the side here, whereas the surface a
is just doesn't have anything below it.
40:26 - And it is set to eight dips of elevation.
So a and b are essentially on the same axis
40:34 - elevation, it's just that it doesn't have
any other surface below it.
40:40 - And you can understand the elevation system,
again, is utilized in components and all material
40:48 - design surfaces and components have elevation
values, and surfaces at different elevations
40:53 - do different things.
And those things being allowing surfaces to
40:58 - move in front of and behind other surfaces
such as content scrolling behind app bars,
41:04 - and reflecting spatial relationships such
as how floating action buttons shadow indicates
41:09 - it is separate from a card and focusing attention
on the highest elevation.
41:14 - This is commonly seen in components such as
dialogues, which temporarily appear in front
41:19 - of other surfaces.
And we're gonna go ahead and look at some
41:21 - great examples of how these components are
in some motion examples.
41:27 - But here is a great example of resting elevation,
where the by default, this card component
41:33 - here has elevation at the by default app set
to one dip.
41:45 - And then once it is once there's an action
taken upon it, sometimes the elevation can
41:51 - change.
So it is important to know so for example
41:55 - with a button, the elevation will change based
upon when you press it.
41:59 - So here in this example, when it when someone
is pressing on this button, you'll see that
42:04 - from the side, it goes from two dips to eight
dips based on that action which raises it
42:09 - to the surface, making this a much more immersive
experience and interactive, also conveying
42:15 - certain key interactions and progression to
the user as they are communicating with their
42:23 - product, which is built on top of material
design, for example.
42:28 - And here you can talk you can see other examples
of elevation here with this card, as it is
42:35 - being dragged, it goes from one dip elevation
to eight, and is then revisit and then rises
42:42 - above the previous card as it's above it in
the Z index.
42:48 - And here's another example of when you would
utilize elevation where these cards are scrolling.
42:57 - And being on that elevation based system is
allowed to scroll over the surface that it
43:07 - is currently above that you can see there.
And you can also read other important things,
43:14 - such as understanding the surface overlaps
on top of other surfaces, and when to use
43:20 - them, which is really important.
And also when to use a scrim background in
43:25 - the UI to express that the content above it
is at a higher elevation also to provide more
43:30 - emphasis on the most primary calls to action
in that moment in time.
43:38 - And again, more great in depth analysis on
elevation.
43:41 - And when it when you can use motion elevation
together, as for example, showing changes
43:47 - in shadow or displaying overlap, or pushing
content around or scaling that content or
43:53 - using parallax scrolling.
And what we're going to get to now is understanding
43:57 - elevation hierarchy.
And basically going over the diagram of default
44:04 - elevation values, which is super important.
And we have that in figma.
44:07 - Now that we went over all that.
So we have this set of elevation values, which
44:11 - tells us exactly what components have default
elevation values.
44:17 - And this will be super important to implement
into our color styles.
44:21 - So in this figma file I've already created.
I've already created a set of elevation values
44:28 - and they're already effect styles in in your
figma file, this exercise file.
44:37 - And again, this is the final result of what
we'll be baking, but I don't just want to
44:41 - just hand this off to and actually show you
how to create these effects style.
44:44 - So we'll go ahead and create a few of them
and then and then I'll pause this video and
44:48 - have you built the rest by yourself.
So first I need to teach you how to actually
44:52 - evaluate the values within each of these drop
shadows.
44:56 - So here you can see these are all the elevation
values used in material design.
45:00 - And again, this one isn't.
This one's at the the surface level, this
45:04 - doesn't utilize elevation as you can see,
set to 00 dip.
45:09 - And that then can't be in effect style because
it doesn't use any effects.
45:14 - That is just the flat the baseline, just think
of 00 as the baseline.
45:18 - And then, of course, one dip is used for the
search bar cards at a rested elevation state
45:24 - by default, as well as the search bar at a
rested elevation state.
45:28 - And also switch components.
And text buttons are set to zero and standard
45:34 - side sheet components are set to zero as well.
So let's go ahead and make this I'm going
45:41 - to copy this.
And you'll notice that it is attached to the
45:45 - style, I'm going to go ahead and detach that.
And you'll notice that these styles are all
45:51 - drop shadow.
So I'm gonna go ahead and remove all these.
45:54 - So now this is flat here on the right, and
one thing we can do is we can manually go
45:59 - in and click on these individual styles, which
is very tedious.
46:02 - And we can go ahead and do it that way.
So if I click on this value, so for example,
46:07 - I could screenshot all of these, because I
wouldn't want to go back and forth, clicking
46:11 - on all these drop shadows, and copying, pasting
these properties.
46:15 - So I'm going to show you the long way of doing
this.
46:19 - And then I'm going to show you the fast way,
so you never do that approach again.
46:25 - So let me just undo that there.
Then I'm going to paste this, here we go.
46:32 - So I'm going to grab this last drop shadow
style.
46:37 - And then with that drop shadow style set,
I have all three drop shadows, and I'm going
46:41 - to recreate the elevation set for 01 dips.
So I'm going to go ahead and click on effects.
46:49 - Whoops, I'm gonna click the Create effect
style icon I have, by default, it selects
46:55 - drop shadow, and it'll give you some default
values.
46:59 - So I'm gonna go ahead and create this one
here.
47:01 - So I'm going to change the blur to one, and
this and that, I'm going to set the y axis
47:09 - value to one here.
And then I'm going to keep the spread at zero
47:14 - and change the opacity to 14%.
And it's using a color of black, which is
47:20 - 000000.
And then now I have that first drop shadow
47:24 - style created, you can start to see that this
drop shadow is being applied here, but it's
47:29 - very light in the drop shadow color compared
to this one where it's much more sharp and
47:33 - darker on the edges of the rectangle.
And I'm gonna go ahead and create that second
47:38 - drop shadow.
And with that, I'm going to just mimic the
47:43 - properties in this drop shadow.
And that's set to one on the blur, zero on
47:50 - the spread, and two on the y axis and an opacity
of 12% going to hit enter, I know that second
47:58 - property of drop shadows applied, then I'm
going to go ahead and delete these two, so
48:02 - I don't get confused and create my last effect,
which is another set of drop shadow, I'm gonna
48:10 - go ahead and apply these values again.
So one on the y axis, three on the blur, zero
48:17 - spread and 20% opacity.
Once I've created that, you'll notice I now
48:22 - have an exact replica of the drop shadow.
Here.
48:26 - The only difference is that this drop shadow
is brand new, it's still the drop shadow from
48:35 - material design system.
It's just that it's not attached to a style
48:39 - for learning purposes, specifically, so you
know how to create these drop shadows.
48:44 - And we can go ahead and turn this into a style.
But before we turn this into a style, let's
48:49 - go ahead and show you the easy way to do this.
So if we now that we have this style, maybe
48:56 - we go ahead and duplicate the eight dip based
version of this, and it's still attached to
49:03 - a, an effect style.
So I'm going to detach that style.
49:09 - I'm going to duplicate this rectangle.
And I'm going to delete all these drop shadows.
49:14 - And what I'm gonna do is make sure I have
my rectangle selected, and I'm going to hold
49:18 - down Option Command C.
And what that allows me to do is copy all
49:23 - of the styles associated with the object I
selected, which is the rectangle and then
49:29 - I can paste those over to my new style new
object by clicking on this rectangle and then
49:35 - hitting option Command V.
And it pastes those exact drop shadow values.
49:39 - You notice that when I pasted it, it implemented
those new drop shadow values.
49:43 - And that is much quicker than going in and
implementing the manually like I did, and
49:48 - referencing screenshots.
So I didn't have to individually click on
49:50 - each drop shadow property panel and then do
that one by one.
49:55 - That's very annoying.
So with that being said, let's utilize That
50:00 - approach now.
So here, we can just copy over, I'm command
50:08 - clicking on all the command clicking to select
the rectangle specifically, and then holding
50:15 - Shift Command click on all of these rectangles
here.
50:19 - And basically what I'm doing is grabbing all
of these, and then I'm going to hold down
50:23 - Option and drag these over to copy all of
them.
50:29 - And you'll notice what we have here is all
of these elevation values, or effects, all
50:35 - of these rectangles are attached to effects
styles.
50:37 - But we don't want to do that we want to utilize
the method of creating drop shadows quickly
50:43 - make copies of properties and pasting them.
And to do that, we need to go ahead and unlink
50:51 - detach all these drop shadow styles.
So here we go, we're going to continue to
50:57 - detach these styles, I'm just selecting each
one individually, as you can't bulk select
51:02 - these and detach, unfortunately, for effect
styles.
51:06 - But you can do that with color styles.
So now that we have that applied, I know that
51:13 - these are all in sequential order or proper
order.
51:17 - So it goes from one dip, elevation, 234-689-1216,
and 24.
51:28 - So all I'm going to do is duplicate this real
quick.
51:36 - And before I detach all these drop shadow
values, and I'm gonna duplicate that again,
51:41 - and keep duplicating them on the rectangles
I have not created.
51:49 - drop shadows for yet.
And you'll notice that they're all very flat,
51:54 - which would mean that they're using the zero
dip elevation essentially.
51:57 - And I'm just gonna go ahead and click on these
command options, option C, and then select
52:03 - the object I want to paste the drop shadow
to and then click Command Option v.
52:08 - And you'll notice that I am now just essentially
copying and pasting these effects style properties.
52:14 - So holding down option, Command C, selecting
the new object and then do an option Command
52:18 - V.
And I'm just grabbing all of these drop shadow
52:22 - properties and pasting them very quickly.
And this is something you can use for colors
52:28 - as well.
So if I change the color of this, it would
52:33 - copy that color value, it still has the drop
shadow, but if I option Command C, and then
52:38 - select my new object, and then option Command
V, it also copies over that fill value.
52:44 - So it copies all the properties not just the
effect styles, which are the drop shadows
52:49 - in our case.
So do take note of that object, Command C,
52:52 - select menu object object, Command V, and
then do the same thing for the last set of
52:57 - elevation.
And this is very important to note.
53:00 - And now that we built all of this out, we
can go ahead and create effect styles out
53:05 - of these.
And as you can see, we already have them created.
53:08 - So we can go ahead and mimic a couple.
And I'm going to go ahead and this is our
53:14 - zero to dip effect style.
So I'm gonna go ahead and click on my style
53:18 - icon and click add new style.
And then I'm going to type in zero to dip.
53:24 - And this is our new effect style.
And we now will have two variants of that.
53:31 - And then it gets created and it's set at the
bottom.
53:36 - The newest styles are then generated at the
bottom of this list in the effect styles and
53:42 - the Properties panel, I can even go ahead
and just create another one, you'll notice
53:46 - that this is now linked to a style.
And these aren't yet because I haven't created
53:51 - the color styles.
I'm gonna go ahead and click on another one,
53:55 - and click on the style icon and create new
style.
53:58 - And this is my 24 dip elevation base value.
So I got 24 dip there, we'll click Create
54:03 - style, I now have zero to dip and 24 dip created.
But this is solely to showcase you to showcase
54:12 - to you how to create styles out of these elevation
values because you're going to reuse them
54:16 - time and time again.
So I'm just gonna actually delete these since
54:18 - we already have them in our file.
Now that you know how to create effect styles
54:22 - in figma.
And with that being said, the only thing missing
54:27 - from these effects styles is documentation.
And basically what I'm referencing is that
54:35 - in these effects styles, we can go ahead and
label where this elevation would apply.
54:40 - So I'm going to click on 24 dip and since
we have the table of default elevation values,
54:45 - it tells me where what components use that
set of elevation.
54:48 - So I can go ahead and click on this edit style
icon and add a description.
54:53 - You and I can type in use for dialogue components
and I'm going to hit tab and it'll save that
55:02 - change, I'm going to hit back, I'm going to
go ahead and select my 16 dip, the fix style,
55:08 - click Edit style.
And I'm going to continue to add the description.
55:12 - And currently met navigation drawer components
and modal bottom sheet.
55:17 - And modal side sheet components use this default
elevation value.
55:22 - So I'm going to actually go ahead and input
that used for these components and have been
55:29 - the navigation drawer.
And modal bottom sheet and modal side sheet.
55:39 - And now that I have that input, it will save
that and you can even go back into your, your
55:45 - style and edit it and check to see if it saved
the description.
55:48 - I'm going to going to continue to input the
description so that way when you publish this
55:54 - and other designers start to use these styles,
they can go ahead and and click on this scription
56:00 - understand where you would actually apply
this elevation style, which is great, useful
56:06 - tool to communicate to your designer, especially
when you don't designers don't remember where
56:12 - these styles are being utilized.
And here you can see that a lot of components
56:19 - use the default elevation value of eight dips.
And I'm going to go ahead and pause this video
56:25 - and I want you to go ahead and for the rest
of these for the eight dips 64321 dip melt
56:33 - effects styles, I want you to go ahead and
reference this table here and input that into
56:38 - the description like we just did for for the
following effects styles.
56:42 - I'm going to pause this video and I'll catch
you when this is done.
56:47 - So now I have completed inputting all the
descriptions for the rest of the elevation
56:51 - values.
As you can see here, it's a direct reflection
56:53 - of what is labeled in the table of default
elevation values and material design.
56:59 - And again, I got these screenshots off of
the material design elevation page, which
57:03 - is also a link here and exercise file if you
want to double check things, and also soak
57:07 - in more information on on elevation itself.
Because this is not only applicable to material
57:14 - designs design system, but great principles
for you to utilize as a foundation for implementing
57:18 - new systems.
So that is also something important to take
57:21 - into consideration.
And here again, if I go to the editing the
57:25 - styles, I'm just double checking all my descriptions
here.
57:29 - And everything is good to go.
Today, we're going to be talking about product
57:38 - and system icons and talking about why they're
different.
57:42 - And the distinctions between them.
And we'll go over also the principles around
57:46 - how icons are made in material design, just
we're going to briefly go over that.
57:51 - And then we're also going to be using a tool
that you'll use throughout the course where
57:57 - if I go ahead and select on this link here
in our exercise file Material Design icons,
58:02 - I can go ahead and click that checkbox and
click on the link.
58:07 - And you'll notice that we have this resource
for actually accessing these icons.
58:11 - So for in this exercise file, I've went ahead
and imported some but not all of the system
58:18 - icons in material design.
And I did that on purpose, because I want
58:22 - you to be able to do this yourself.
And not only do this yourself, but understand
58:27 - how to utilize two ways of doing so.
So in your exercise files, you'll have a zip
58:35 - folder called Material Design icons.
And in this folder, there is a set of icons
58:42 - for Android, for developing for Android.
So if you're designing for Android, you have
58:48 - these icons here available in their proper
format, as you can see in the dot XML file
58:54 - format.
And also, we have the font base version of
58:59 - these icons.
And then we have the iOS based versions.
59:02 - And then we also have them exported as PNGs
at all sizes, all different sizes and from
59:09 - 18 dips, 2436 and 48 dips at 1x and 2x respective
to each size, as you can see there.
59:17 - And this is very helpful.
But also this is a lot of material in this
59:21 - file.
So if that seems to be too much for you, you
59:26 - can actually go ahead and use this resource
here.
59:30 - Again, this resource can be accessed by clicking
on this material design icons link in figma.
59:37 - And opening that and it'll give you access
to this amazing resource that we'll both be
59:42 - using as we build out components in this course
just in case we've missed some icons here
59:48 - in figma.
From my initial export as you can see, I have
59:53 - these icons categorized visually.
And not only that in the Layers panel they
59:57 - are as they're exported.
These are the The names of each icon, which
60:02 - is great, so we don't have to go ahead and
label those ourselves.
60:05 - But we can also tweak the naming later on,
if we'd like to.
60:10 - Maybe we want to get get rid of those underscores.
And we'll get to that when we actually publish
60:14 - these components to utilize across our designs.
And here we have a set of 10 categories, user
60:22 - actions, icon, font icons, icon specific to
devices.
60:26 - So here, you can see that that this is definitely
heavily used in Android and iOS devices here
60:33 - indicating the state of batteries, airplane
mode, whether it's on or off, or if you've
60:39 - set alarms, or if your Bluetooth is enabled,
connected or disabled, and other things of
60:44 - that nature.
And that is this device category.
60:49 - And then we have some other categories, such
as some editor icons, which can see commonly
60:53 - used and other Google products like Google
Docs, like some of these are options, when
60:59 - you select text and edit them in terms of
alignment here, some alignment icons and whatnot.
61:05 - Also some hardware icons, content, icons,
file icons, and some other icons such as communication
61:13 - alert icons.
And again, this is only touching on the surface
61:17 - of icons, because in this tool, there's an
important functionality.
61:23 - Under this themes category.
And top left, you'll see that there are different
61:27 - variants of all these icons.
So there's the filled version.
61:30 - And there's the outline version there.
And you'll notice that the this filled version,
61:37 - the is definitely different from the outline
version, you can utilize these two versions
61:44 - of the same icon to indicate state.
And there's also a rounded version of these
61:49 - icons where the corners are much more rounded,
as you can see here, compared to the outlined
61:55 - variant, elements become more rounded, and
smooth, you could say, we also have this two
62:01 - tone variant, you'll notice that there's this
second tone of color implemented, that is
62:07 - a sort of light gray, as the background color
on several elements in the interface.
62:12 - And then we have our sharp variant of icons,
where the corners are most definitely very
62:20 - much sharp on the edges, and whatnot.
So with those variants in mind, we can also
62:27 - toggle the categories specific specifically
actions or if I only want alerts to appear,
62:34 - or only a V icons to appear, or only communication
icons to appear.
62:39 - So basically have the ability to view all
of these icons individually or view all of
62:44 - them at once as there are a ton of icons,
I recommend you kind of just skimming through
62:49 - this understanding what you think you will
and won't use and why not would be a good
62:54 - test, a meant to your understanding of material
design, and the icons needed when we develop
63:00 - the component library moving forward.
And again, if we don't have these inner figma
63:06 - file, don't worry about it.
If it's not here already, we can go ahead
63:10 - and just create a new category here.
And of course, say I don't have icons in the
63:16 - from the social category, as there are a lot
of social icons, it's as simple as just clicking
63:21 - on this icon.
And then in the bottom left hand corner in
63:24 - your browser, you'll notice that you have
the ability to actually export this icon.
63:27 - And it tells you what size you would be exporting
it as and what format so this is the SVG based
63:33 - format of this icon.
And I can also click on that, to open up this,
63:40 - this panel.
And you can either download the SVG format,
63:43 - or the PNG based format, we're going to be
sticking to the SVG based formats.
63:48 - And there's also some instructions on how
to style your icons using CSS, it gives you
63:53 - a little example here.
And you can also change the size, which you
63:58 - download this, SVG will be downloading them
in 24 dips.
64:02 - So and you can also get the black version
of the icon or the white version of the icon,
64:08 - we're going to stick with the black version
of the icon.
64:10 - As we'll be designing for light theme in our
content, such as typography, and icons will
64:15 - be dark as opposed to light.
And you also can download the iOS based version,
64:20 - the Android version of this.
And again, you have all these icons already
64:24 - in your your file in your exercise files that
you've downloaded under, you can get them
64:29 - under source or whatever device you are designing
for you have all of these icons here in all
64:39 - formats, the outline round sharpen twotone
variants and the filled variant as well.
64:44 - So with that being said, we can go ahead and
talk about now that we've talked all about
64:50 - system icons, which is what we just covered,
we just covered all the system icons, again,
64:55 - which is also in this documentation here which
will be accessible in the figma file as well.
65:00 - I'll make sure that's in there.
So you can click on this link.
65:02 - So basically, this symbolizes common actions
for files, devices and directories.
65:08 - And the whole concept is to be simple, modern,
friendly, and sometimes quirky as each icon
65:15 - is reduced to its minimal form expressing
essential characteristics for the action you're
65:20 - trying to take with that design element the
icon is associated with.
65:25 - And you can see, if you were to create your
own icons as well, it teaches you how to even
65:31 - create icons with the proper parameters in
regards to the construction of the file, utilizing
65:39 - the specifications of the grid and key line
shapes here, and how to use them on dense
65:45 - layouts are, and just the layout of the icon
itself, which is really interesting.
65:52 - And also just other specs as well in regards
to breaking down what an icon consists of,
66:01 - and discussing color as well, and the states
for an icon.
66:06 - And we have these icons, states on light backgrounds
specified here, which is great, and we can
66:12 - incorporate that into our system moving forward.
And it talks about the variance as well.
66:19 - The icon themes, which we had went over in
the tool here, the themes being filled, outlined,
66:25 - rounded to tone and sharp.
And that is all discussed here in system icons.
66:30 - And we have now we can also play with them
in figma.
66:32 - If you'd like go ahead and click on them,
copy, paste them, throw them into components.
66:36 - But we'll do that with much more attention
moving forward when we start building out
66:39 - our component library.
And I recommend you going through this and
66:43 - reading it taking notes as this will definitely
inform you on how to utilize icons in a systematic
66:50 - way.
And also just up your game as a designer.
66:53 - So with that being said, we can go ahead and
discuss product icons now.
66:57 - So product icons are separate from system
icons.
67:00 - Because these are this is the visual expression
of a brand's product and the services and
67:04 - tools that they offer.
So for example, in Google Chrome, if you have
67:08 - a Google account or Gmail account, you'll
notice that these are product icons, these
67:13 - aren't system icons, like like, like in this
browser.
67:17 - These are system icons, which are crafted
for common actions and items on an interface.
67:23 - Whereas these product icons here represent
the product itself, the service or the tool.
67:30 - So that is something important to to note
or to apply distinction to.
67:35 - Because if we go back and talk about the product
icons, it talks about how it expresses that
67:42 - product and how its associated to the company
it's made by so here you can see that being
67:47 - spoken up here, where the icons in this regard
Gmail, Google Calendar, and and a couple other
67:54 - icons communicate the core idea and intent
of a product and they simple, bold and friendly
68:00 - way, while each icon is still distinct.
And all product icons for a brand should be
68:04 - unified through those concepts and and in
its execution.
68:10 - And here you can see the approach where they
actually view their design as material being
68:18 - a physical quality, such as paper, where,
where each piece was cut, folded, and lit.
68:27 - And that utilizes light as well in association
to the icon and represented in this digital
68:33 - format, to really bring out those surfaces
to interact with light.
68:38 - And you can see the subtle highlights here
and the consistent shadowing applied in these
68:44 - product icons.
So if we go ahead and go back to Google's
68:48 - suite of product icons here, you can see that
in the Gmail icon, and you can see the the
68:54 - shadows being applied here on these edges,
and lighting really being implemented, executed
69:02 - consistently in all product icons.
And you can get specifications on how these
69:07 - icons are built and whatnot.
But this isn't super specific to what we'll
69:10 - be doing but I highly recommend you go through
it.
69:11 - If you ever want to develop your own icons
in the future, this is very helpful talks
69:16 - about how to treat icons, and how they should
be flush with an element surface, etc, etc.
69:23 - and how to apply proper attention to an icon
by not convoluting the icon with excessive
69:31 - accordion folds.
For example in this scenario where you see
69:35 - these accordion folds or it looks like this
papers folding or this icon is folding as
69:40 - opposed to having too many accordion folds
utilize no more than two accordion folds or
69:47 - just one.
Two really provide a clear focal point to
69:52 - your icon.
And of course not distorting or transforming
69:56 - your icons whether they are product or system
icons.
69:59 - As that is is not an intended approach to
designing.
70:05 - So that is pretty much all I have for you
today on product icons.
70:09 - I recommend you just kind of practicing clicking
on one of these, downloading it as an SVG,
70:16 - and then saving it in a folder somewhere that
makes sense for you.
70:21 - And again, you already have these icons.
But I recommend getting into the habit of
70:26 - this as well, because maybe I'm missing an
icon here.
70:28 - And we can save that SVG, I can go ahead and
open up figma and access the Downloads folder,
70:34 - my finder, and just drag this icon onto the
canvas.
70:40 - And now that I have this icon, which is actually
already here, you'll notice that I have the
70:46 - filled version of this icon, as it states
here.
70:51 - So I got the 3d rotation icon at a frame size
of 24 by 24, the width and height the set
70:59 - to 24 dips, or in this case pixels.
Or, as thigma calls it points, but not to
71:05 - confuse you there, just call them dips here,
and reference material designs, measurement
71:10 - terminology.
And that is it you just added you can add
71:14 - it into your library and organize it accordingly.
And I will go ahead and continue to build
71:18 - this library as well as we move forward in
this course.
71:23 - But that is all I have for you when it comes
to talking about iconography.
71:27 - Today, we're going to be talking about building
out the foundation and specifically going
71:34 - over text legibility and how important that
really is to ensure we're using the proper
71:40 - color values.
So in this tutorial, we'll be overviewing
71:45 - the text legibility on material designs website.
So here, it discusses the legibility standards.
71:52 - And in our previous in the previous video,
we went over the Leonardo color tool, and
71:57 - we discussed briefly about the setting contrast
ratios, or utilizing this tool to get the
72:05 - proper contrast ratios.
And we're going to talk about why that's important
72:08 - in depth.
And here we have some very important article
72:12 - that I recommend you reading.
And this relator article is on material designs
72:16 - website covering accessibility in general,
I highly recommend we, you go through that,
72:22 - and in its entirety.
So here talks about color contrast, can be
72:26 - used to help users see and interpret apps
content and how it's used heavily across any
72:31 - and every interface for applications you'll
be building.
72:34 - And not only the color and contrast, but also
talking about the layout and typography as
72:39 - well.
I recommend you reading through that on your
72:41 - own.
And we'll be touching on the WCAG standards
72:46 - and WCAG stands for the Web Content Accessibility
Guidelines.
72:50 - And for those of you who do not know, this
requires double a compliance to be ca g double
72:59 - a compliance for with a ratio 4.5 to one color
contrast between text and backgrounds on normal
73:07 - typography, normal typography being your body
copy, such as the body copy in, in this website
73:15 - that I'm highlighting.
And also, a ratio of three to one with utilizing
73:21 - large texts, a large text could be these headers,
ensuring that they have a contrast ratio of
73:26 - three to one.
And here you can see it's practically black
73:30 - on a white background.
So those contrast ratios will be very, very
73:35 - strong.
And we'll go ahead and just kind of go through
73:39 - text on background since that's basically
what our typography will be on.
73:44 - It'll be on a background on a variety of components.
As you can see here in this image, this text
73:49 - is on a app bar, and it's on the app bars
background color.
73:55 - And you'll notice as well, here we have a
notification banner of sorts, where typography
74:01 - is overlaid on the background color of the
notification.
74:06 - And one thing to cover that is very important
is talking about how the text Opacity is applied
74:14 - in material design as they heavily rely on
it to indicate states.
74:18 - So again, black text is recommended for use
on light backgrounds and white text on dark
74:23 - backgrounds.
Which is important to note, especially if
74:27 - you're building your app for a light theme
or dark theme.
74:30 - Just make sure that the text is available
with proper contrast ratios as stated up here.
74:37 - And we're going to go ahead and talk about
building some of this out some examples.
74:42 - And now that we've kind of went over using
text opacity, or over how it's used in the
74:48 - screenshot and how to avoid utilizing it.
Here you can see this typography doesn't change
74:54 - the opacity of the text is color.
But here you can see that the opacity has
74:59 - been modified, therefore, giving off an opaque
gray color, which isn't legible and very difficult
75:06 - to see on colored surfaces, as you can see.
And next we'll talk about dark text on light
75:10 - backgrounds.
So material utilizes these principles.
75:14 - So for the, you could think of this as the
active state if you want to, or if you want
75:20 - to apply a high emphasis on certain information,
maybe you want to apply high emphasis on headers,
75:25 - for example, such as this website, utilize
the color black, with an 87% opacity.
75:32 - And then if you want to apply medium emphasis,
which could be medium emphasis, such as typography,
75:37 - or a default state for, for type higher fee
within a component, you utilize the color
75:42 - black at a 60% opacity.
And then the disabled state utilizes an opacity
75:49 - of 30 38% with the color black.
And we'll go ahead and talk about how to sparsely
75:56 - use colored texts on top of backgrounds.
So colored text typically isn't used everywhere.
76:04 - And it's used selectively to draw attention
and apply.
76:08 - very selective emphasis is ideally color text
should be reserved for text elements such
76:12 - as headlines, buttons, and links.
And here you can see cautious usage of, of
76:19 - color.
Across the typography.
76:21 - Here you can see yellow and black and this
Pink Purple background is just highly not
76:28 - recommended.
I wouldn't even recommend this, as opposed
76:30 - to being cautious.
Just be aware, if if you're questioning certain
76:35 - design elements such as this, it's better
off not utilizing that, and sticking to standards.
76:42 - And here you can see large headlines and short
tech snippets are best for color text.
76:47 - And next we'll go ahead and talk about helper
text.
76:51 - And helper text basically gives context about
a fields input, such as how the input will
76:56 - be used, and it can adopt brand colors as
well but should be legible.
77:01 - By all means, according to WCAG standards.
And again, it utilizes the same principles.
77:07 - The only differences helper Tex utilizes a
60% opacity of the color black, and then error
77:14 - text uses 100% opacity of the color red.
And you can see that hex value right there.
77:22 - So where would you actually see this? Well,
you can see this in material designs text
77:26 - input field.
So if we actually go to components here, and
77:30 - go to whoops, and we search for text input.
Let's see if we can find that text field here
77:41 - text fields.
And we can select the specs, you'll notice
77:47 - that there is an error message here for this
image for this text input field, which is
77:53 - utilizing the the error text here this this
color property applied to typography to give
78:01 - context about that fields input, which is
right here.
78:04 - So this was the wrong input by the user in
this example, and there's some error message
78:07 - that appears.
And then in this text field, it has some helper
78:13 - text that is indicated right there, which
is reflected right here.
78:17 - And this text type this variant of helper
text, which is very important.
78:24 - And we can also discuss selected text next,
so selected text can reflect your brand.
78:33 - And it can utilize an accent of your primary
or secondary color in this should be legible
78:40 - against the selection color and the selection
color should contrast the background color.
78:45 - So that is something important to note here
you can see that material designs using the
78:50 - primary variant color for the highlight for
the text selection color, highlighting all
78:56 - the selected text.
And also, another important thing to note
79:01 - is that icons and other symbols utilize the
same principles for for representing icons
79:09 - and other symbols as typography.
And when I say typography, I am referring
79:14 - to dark texts on light backgrounds and light
text on dark backgrounds utilizes the same
79:19 - principles.
And it just adheres to a specific opacity
79:24 - levels.
And they are the same opacity levels where
79:27 - they all use the same color black at different
levels of opacity.
79:30 - So the active state is a set to a black of
87% and active is 60%.
79:36 - And the disabled state is 38%.
And one thing you might be asking yourself
79:42 - as to how do you actually apply this state
to your typography.
79:49 - So one thing we can do is grab these screenshots
here.
79:52 - So I can grab a screenshot of this and then
go ahead and open up our exercise file.
79:58 - Text legibility sudden they're gonna go ahead
and also reference the text types here.
80:07 - And basically with all of these screenshots,
we're going to be justifying how many types
80:16 - of color styles we'll need to provide the
proper emphasis in components as we create
80:22 - them, and then build them out as color styles,
which will then publish later to reuse.
80:29 - so here we can see, I said iterator before.
Both icons and symbols have the same principles
80:38 - for dark text on light backgrounds and light
texts on dark backgrounds.
80:42 - It's uses the same principles and levels of
opacity.
80:46 - So, meaning we only need to actually create
three styles here.
80:51 - It's the active, inactive and disabled for
icons and symbols, excuse me.
80:58 - Also, just providing the high emphasis, medium
emphasis and disabled state for dark text
81:07 - on light background.
So what we can do is let this all live under
81:11 - a content section of color styles as well.
So we can go ahead and define that as extend
81:25 - iconography.
So that is basically what is covered in all
81:30 - three of these screenshots.
So what we can do is just create a textile.
81:36 - So we can start off with this screenshot,
I'm gonna move these out of the ways, so I
81:39 - don't confuse any of you.
Since there's a lot of information in that
81:44 - area, I'm actually just going to grab a textile
and material design just uses Roboto.
81:50 - It doesn't matter what the type settings are.
I'm just going to change that up real quick.
82:00 - And 
and now, all we're going to want to do is
82:08 - define the color.
And this active state is set to 87%.
82:12 - Currently, the color is set to 100.
So I'm just going to change that input field,
82:16 - what we can do is just select that style icon.
And you'll notice that we can go ahead and
82:22 - click on Create style.
And then I'm going to type in text, and iconography.
82:31 - And this is going to be this naming convention
is going to be the header.
82:36 - So we know how to utilize that in the color
panel.
82:41 - So I'm going to just select active active
here.
82:45 - And then you can also specify the percentage
if you want designers to be able to read that
82:54 - right off the bat as they're looking at the
name of the color style, or you can remove
82:58 - it, I'm just going to remove it and select
Create style, I've now created that text style,
83:04 - which is exactly what I want for any active
icons or other symbols.
83:11 - And then we're going to go ahead and duplicate
this.
83:15 - And once that is duplicated, I'm going to
detach the style.
83:19 - And just specify the inactive state, which
is very simple.
83:21 - All we have to do is change the path city
once more to 60%.
83:25 - And that represents the inactive state of
any icons or other symbols.
83:29 - And I'm gonna go ahead and create another
style.
83:33 - And again, I just labeled that text and iconography,
the category uses flash naming convention.
83:42 - And now I am going to specify inactive.
And then we can also specify that this inactive
83:52 - state is if I click on this edit style icon,
I can add a description and go ahead and state
83:59 - that utilized for icons and other symbols
as specified here.
84:09 - In case designers want to know what that color
style is for if they're not sure how to use
84:12 - it.
That is very important.
84:14 - You can go ahead and modify those properties
as well later on down the road as well.
84:19 - I'm going to go ahead and duplicate this and
detach the style and set this to the opacity
84:25 - of 38%.
And we now have the disabled state for our
84:29 - not only icons and other symbols, but we have
the disabled state for our typography as well.
84:35 - So I'm gonna go ahead and click style icon
again, create that style, and label it text
84:42 - and iconography.
And now that we have that, we can go ahead
84:48 - and label this disabled.
And now we have our three color styles.
84:53 - If I go ahead and select some text again,
and I go to my color styles, you'll notice
84:58 - that I have the text and iconography section
and hear it not only gives me the name of
85:05 - that color style, but it'll also give me the
description if there is a description, as
85:08 - you can see here in the tooltip, as you hover
over the color style, so you can understand
85:12 - what the uses usage is, or description is
for that color style.
85:16 - So that is awesome.
And now, now that we have this active state
85:23 - here, it could be a matter of, we could do
a various, there are various decisions you
85:32 - can make with your team as you're building
out your design system as nomenclature is
85:35 - extremely important when you start implementing
these foundational elements in your design
85:40 - system.
So one question that I am posing, and that
85:43 - you might be asking yourself as well right
now is that if these are the same values,
85:49 - same hex values, same opacity, and for everything,
here are dark text on light backgrounds and
85:56 - icons and other symbols, should I recreate
other styles? Well, the answer is no, you
86:03 - don't have to, what you could do is go ahead,
edit this and specify that this in the description,
86:14 - you could specify that this is also high emphasis,
right.
86:19 - So you could specify that that is high emphasis
for for dark text on light backgrounds.
86:27 - Or, better yet, what we can do is, instead
of having users go to the description of the
86:36 - color style to identify exactly what the usage
is, for this color style, I'm going to go
86:40 - ahead and just modify the name of this.
So what I'm going to do is specify that this
86:46 - is high emphasis.
And I'm going to go ahead and put in parentheses,
86:56 - the active state, or you could do it vice
versa.
87:01 - And then I'm just going to save that, now
that has been saved, that is high emphasis,
87:07 - I'm going to go ahead and select the inactive
state and ensure that I edit the name as well.
87:13 - And then specify medium emphasis.
And once I have specified that, I will save
87:21 - that.
And now I'm going to go ahead and select this,
87:26 - and disabled is just disabled.
So that is fantastic.
87:29 - We don't actually have to rename that.
And these are important decisions to make
87:32 - and to understand, as you can see that quickly
a design system could be very polluted in
87:39 - terms of how you name things, not only in
your design system or designs, but also in
87:45 - development, it's very important to really
sync with your engineers and understand what
87:49 - they've implemented in their in their color
palette, or that wherever that that CSS file
87:56 - is that sass less file, wherever that color
palette is in react for examples, that's a
88:01 - very popular framework right now, really trying
to understand where those hex values lie.
88:06 - If they even are hex values or the RGBA.
Base.
88:09 - These are very important questions to ask
your developers if you haven't already, and
88:14 - to really start aligning your system with
what is currently in development to really
88:19 - enhance the workflow amongst designers and
engineers and really start to solidify and
88:25 - create a unified language across design and
engineering.
88:29 - So that is all for the dark text on light
backgrounds and icons and other symbols.
88:35 - Next, we're going to go ahead and talk about
the the text types.
88:40 - So one thing we did miss is that we've labeled
this medium emphasis and inactive for that
88:46 - for this state here, medium emphasis.
And inactive, we can also specify in the scription
88:52 - that this is utilized for helper text.
So I can go ahead and specify that there.
89:01 - And that solves my problem.
And then we can the last text color style
89:07 - we need is the error text.
So we need to go ahead and duplicate this.
89:13 - Detach the style, set the opacity back to
100%.
89:17 - And then go ahead and set that color to red.
And now that we have the color set to read,
89:24 - we are good to go.
All we have to do is click on the style icon
89:27 - Click Create style, and then ensure that it
is under the same category as the rest of
89:33 - the color styles and type in air, text and
create style.
89:39 - And we are rocking and rolling folks, we have
created all the color styles that we'll need
89:44 - to utilize as we continue to build out the
foundation of our material design system.
89:48 - So if we go ahead and check these color styles
out locally, and say I pull out like a rectangle,
89:53 - and go and look at my color palette.
It all lives under text and iconography and
89:58 - my color Styles panel And drag that over.
And you can see that now I have this text,
90:03 - high emphasis, color style, the medium emphasis,
which is also the inactive state.
90:07 - We also have the high emphasis, which is the
active state for icons and symbols and high
90:12 - emphasis pertaining to the dark text on light
backgrounds.
90:16 - So we're ensuring that all of this content
is reused and simplified.
90:20 - So there's no duplication of color styles,
which is not necessary, nor Is that necessary
90:27 - in development either, if you can solidify
that and simplify it, and we have our error
90:33 - text as well, and our disabled text, which
is all covered here, and that is all I have
90:38 - for you in the text legibility.
And I do recommend that you go over the web
90:45 - content accessibility guidelines to really
just understand this, I know a lot of information.
90:50 - But the more you read this and take notes
on it, the more it'll pay off and give you
90:55 - an edge as a designer, as accessibility is
extremely important.
90:59 - We're going to be covering States under the
interaction portion of this section in the
91:07 - foundation.
As we continue to build our foundation, we're
91:10 - going to go over viewing states, if you go
ahead and click on this link in this exercise
91:14 - file to open up a link and give you access
to these states here.
91:19 - And once you have that page visible, you can
see that states are visual representations
91:26 - used to communicate the status of a component
or an interactive element.
91:30 - And we're going to be covering the we're going
to overview of the contents within this page
91:36 - and how that translates into figma.
That is translated here.
91:42 - And then we're going to cover the usage of
states and when to apply them, get an understanding
91:47 - of that.
And we're going to go over all the type of
91:50 - states as well.
And then we're going to break down the anatomy
91:54 - of a state and understand the usage and some
foundational guidelines to follow along.
92:01 - And also, again, implementing states and figma,
and how they're utilized as color styles or
92:07 - Yes, color styles in figma.
And I'll go over in these examples I've created
92:12 - for you how to implement them.
And we'll go ahead and build those a few of
92:15 - those out as well.
And without any further ado, let's get started
92:19 - on the usage of states.
So states communicate the status of UI elements.
92:25 - Here, you can see a hover state on this component,
which is a row of tabs.
92:30 - Here, you can see the pressed state on a button
here.
92:35 - And here you can see the drag state of a chip
component.
92:39 - And here you can see the focus state of a
button.
92:41 - And here you can see the selected state of
a line item.
92:44 - And there are other states, of course here
as well.
92:47 - And again, this communicates status UI elements
to the user.
92:50 - And each status state should be visually similar
and not drastically alter a component, but
92:56 - must have clear affordances that distinguish
it from other states and the surrounding layout.
93:02 - So with that in mind with to accomplish that
the material design adheres to these three
93:09 - principles distinction, ensuring that these
states are have an additive principle to it,
93:17 - where states occur at once, such as selection
and hover.
93:20 - And both state indicators are displayed when
taking those actions, whether it's a selection
93:27 - or hover.
And of course, consistency is another principle
93:31 - where states should be applied consistently
across components in order to increase usability.
93:37 - And of course, they states are distinct, or
they have clear affordances, distinguishing
93:42 - them from one another.
In regards to the surrounding UI, it is associated
93:47 - with emphasizing according to their level,
their priority levels.
93:53 - And now we're going to cover all the these
type of states.
93:57 - So here you can see that there is an enabled
state.
94:00 - And it's utilizing a button example for the
first four states where an enabled state communicates
94:06 - an interactive component or element.
So essentially, an enabled state is just the
94:10 - default state of a component.
So you can think of enabled as default.
94:16 - Just communicate stuff, this is a button that
you can click.
94:20 - And the disabled here is a disabled state
of a button, which just states that a it's
94:26 - a non interactive component or element, so
you can't actually click on it as it is disabled.
94:32 - And here, we have a hover state for a button.
And that communicates when a user has placed
94:40 - a cursor above an interactive element.
And we also have a focus state where it communicates
94:46 - when a user has highlighted an element using
an input method such as a keyboard or voice.
94:52 - So if I hit tab, you'll notice that I can
tab through this interface here.
94:56 - I'm tabbing to this this anchor link and I'm
tabbing To this button here, that is the focus
95:02 - state on this button.
So that is an example of that.
95:07 - If we go back here to the type of states whoops,
one second.
95:15 - So if we go back to these type of states,
here, we have the selected state, which communicates
95:21 - a user's choice where they selected a, a line
item, or you call that a list item as well.
95:27 - And here, we have an activated state, which
communicates a highlight a destination, whether
95:34 - initiated by the user or by default.
And here we have a press state which communicates
95:39 - a user's tap.
And you can see a ripple effect, which is
95:43 - what that circle is called a ripple, which
is created when you use when you press a button
95:49 - or an element.
And a press state, it just communicates a
95:53 - user's click or tap.
And here we have a drag state, which communicates
95:58 - when a user presses and moves in element.
And we also have the on state, which is typically
96:06 - used for buttons, checkboxes, and radios,
or switches, radios and checkboxes, excuse
96:15 - me.
And that on state communicates a toggle between
96:17 - two options, which is and the two options
are on and off.
96:21 - And off is the other state, which just communicate
to toggle between two options here, you can
96:26 - see that the off state is indicated in the
switch, radio and checkbox component.
96:32 - And also, we have error states.
And the air state communicates a user or system
96:38 - mistake, as you can see, which is indicated
with the color red.
96:42 - And the label in this icon, this informative
icon and the red underline of this text input
96:48 - field and also some helper texts to indicate
the air whether a user created made the air
96:54 - or the system had created a mistake.
So how are these states communicated? That
97:00 - is an important question.
Now that we've went over all the type of states,
97:03 - we're going to break down the anatomy.
So states in figma, are communicated through
97:09 - an overlay.
So you can see these states here.
97:13 - And in this section, it represents states
for content on the surface on surface color.
97:22 - And also states inherited from content.
And it's essentially an overlay is just a
97:30 - semi transparent covering on an element that
indicates its state.
97:34 - And the overlays provide a systematic approach
to visualizing states by using opacity.
97:39 - So here, you can see that this state utilizes
a black overlay.
97:43 - And this is the focus state.
And it gives you the the overlays, percentage
97:49 - base value, the opacity, and it uses the color
black here for this focus state overlay for
98:00 - content on the surface.
And the structure of the overlay lives right
98:06 - in between the container, which you could
just think of as the surface.
98:10 - So this is the surface here.
And then the overlay lives right in between
98:14 - the content and the container.
So it starts off with the content being on
98:18 - top, and then the overlay, which is where
the state is represented, which is right in
98:22 - the middle.
And then at the very bottom is the container
98:25 - in which both the Overlay and content lie
upon.
98:29 - So that is important to note.
And that that same structure in this diagram
98:34 - is applied throughout the rest of these containers.
Here you can see the surface container states,
98:40 - whether it's on primary content, what that
state would look like, and what that state
98:46 - looks like inherited from content, and then
the surface itself and what that state would
98:50 - look like when it's selected.
And you'll notice that in the disabled state.
98:55 - Despite the surface container, whether it's
on the primary surface, or on the generic
99:01 - surface, the white surface, you'll notice
that the content, the content being the typography
99:10 - is the state that is actually manipulated,
not the backgrounds itself in the disabled
99:15 - state.
So in for that, that text is set to disabled.
99:21 - And again, just to continue to break down
the anatomy of the overlay which represents
99:26 - the state in our designs.
It it provides a systematic approach to visualizing
99:32 - states by using opacity and can be applied
to an entire element or in a circular shape.
99:37 - As you can see here, it's applied in the circular
shape the state when being pressed, and the
99:43 - overlay color matches the color of the text
or icon on the element that it's applied to.
99:48 - So here you can see in the third example that
the radio list that is selected is utilizing
99:56 - the primary color which is set to a blue purple
and then The state associated with it is a
100:01 - no uses the same color, but an opaque opaque
value of that color.
100:07 - And as you can see that here as well in figma,
where the state layer uses the primary overlay
100:16 - the primary color as an overlay, and uses
different opacities to indicate the hovered
100:22 - focused press dragged and selected states
of that color.
100:29 - And you can see that the depending on the
type of component and state, so in this line
100:37 - item, the selected checkbox is using the primary
color.
100:42 - And you'll notice that the selected state
of this line item also uses that color, but
100:48 - an opaque value of that color.
So that is important to know.
100:53 - And you'll notice the same exact thing in
this checkbox, where this is using the the
100:58 - outline of the checkbox itself and the enabled
state is set to black.
101:02 - And then the hover state of that checkbox
uses an opaque value of black.
101:09 - And you can see that here in figma, where
on hover that uses an overlay of 4%, which
101:15 - is just a black overlay on hover, which is
what we're seeing here in this checkbox.
101:23 - Which is very important to note, and only
one state layer is applied at a time.
101:28 - As you can see here, for example, if an element
is first focus and then hovered, the hover
101:32 - state layer will be shown only until the hover
is complete, then returning to the focus state
101:38 - layer if the element is still focused, so
you can't do two things at once or two states
101:43 - at once.
And with that being said, there are also overlay
101:48 - opacity values applied here, which we can
implement ourselves in figma.
101:55 - So I could even redo the surfaces, go to figma
paste the screenshot.
102:04 - And with the screenshot, I can actually recreate
the states as layers here, I can go ahead
102:10 - and create a rectangle for example.
And I know that the hover state is utilizing
102:19 - a the the color black set to 4% opacity, so
I can go ahead and apply the color black,
102:26 - which is a hex value of 0000, set the opacity
of 4%.
102:32 - I can then turn this into a frame and label
this the hover state the on surface hover
102:43 - state.
And that rectangle represents exactly that.
102:49 - Maybe I can ungroup that frame actually and
apply that name to the rectangle itself, we
102:54 - have that we can add some text here, just
type in hover, go ahead and increase the size
103:04 - of that.
And once that is all done, I can go ahead
103:13 - and actually just group that into a frame.
Again, vertically align this text and go ahead
103:22 - and specify the opacity and I could specify
the hex value as well, just so no one gets
103:33 - confused.
So users will know that this is an overlay
103:37 - state hover state, but what is the actual
color first, designers would actually have
103:42 - to click on the the rectangle shape to understand
the hex value and the Opacity applied to it.
103:49 - Or we could specify it here.
And just have it labeled as such, if you'd
103:59 - like.
And I'm going to go ahead and stretch this
104:01 - out.
So that is a good example.
104:06 - Here.
That is one example of how you could indicate
104:10 - your states, I can go ahead and even duplicate
this, change that to the focus state and then
104:18 - add the 12% Overlay and utilizes the same
color of black again.
104:24 - And then there's a selected state.
So I can even do the selected state where
104:33 - the utilizes the on primary color value, the
primary color value, but I'm gonna detach
104:40 - this style.
And it only uses 8% opacity of the primary
104:46 - color value as you can see there.
And I might, I'm going to want to copy that.
104:51 - Paste that hex value in right here.
And you'll start to see that we're specifying
104:57 - the states here in our system, which is Fantastic.
And then we can go ahead and do the same thing
105:03 - for the activated state.
So you're starting to see how we create exactly
105:10 - our states for our components here in figma,
which is great.
105:17 - No, getting you into the habit.
So the activated state, I can go ahead and
105:22 - change the opacity to 12%, slightly darker
shade.
105:28 - And I can even go ahead and represent the
press state, which is actually a ripple effect.
105:32 - So what we can do for the ripple effect is
just create a circle.
105:36 - So on the prostate, the color is just set
to, to white at 100% opacity.
105:47 - But the, we're going to use the, we're going
to create a circle here, and ellipse to represent,
105:55 - I'm going to put that behind the typography
here and ensure that lives in this layer,
106:01 - I'm going to clip the content so that the
circle doesn't go outside of the frames bounds.
106:08 - It's hidden, if it exceeds the frames bounds.
And with that circle, I'm going to just go
106:19 - ahead and change that color to black, and
then set the opacity to 12%.
106:28 - And here we have our pressed state, which
is awesome.
106:34 - And then we can even do a drag to state where
the drag state utilizes an 8% overlay.
106:44 - Whereas the focus and hover states have different
hover, use a 4% overlay in the focus, use
106:50 - a 12% overlay.
I'm going to go ahead and create that dragged
106:54 - overlay, change the opacity to 8%.
Hit Enter and is now a darker shade.
107:02 - And I'm just going to specify that make sure
it's accurate in the text here.
107:06 - And I've now created all my states.
And the next thing you'll want to do is actually
107:11 - command clicks to deep select and select the
triangle with the actual state you're trying
107:16 - to create.
You can go to the style icon and click Create
107:20 - style.
And what you would want to do is ensure that
107:24 - you're properly labeling these.
And you can either check this documentation
107:29 - ensure that you're creating the right state.
Or you can reference how I've already built
107:35 - out all of these states.
So you'll notice it starts with states.
107:39 - And then it uses the slash naming convention
to categorize these states accordingly.
107:43 - And it has the these black states labeled
as black overlay.
107:48 - And then it has these primary states which
are purple, labeled as primary overlays.
107:53 - And then we have the white overlays for when
you're using when you're creating states on
108:01 - top of pri on primary content, which utilizes
the purple background.
108:06 - So that is important to note, which is where
these white overlay states are utilized.
108:11 - And I recommend you going ahead and building
up the rest of these states in exercise, I'm
108:16 - going to pause this video and create them
myself.
108:19 - And I challenge you to create them for yourself
as well.
108:22 - Note that I am missing the enabled state.
So go ahead and add that enabled state here
108:25 - for this one.
And then for the on primary as well for this
108:30 - section, creating those as well.
And pause this video and I'm going to create
108:33 - them and I'll see you when I'm done.
So now I that I created all these states for
108:41 - when you're on when your content is on the
on primary surface utilizing this color here
108:47 - of 62 double zero double e x phi, which is
just like this purple variant as color of
108:55 - purple.
And anyways, point being is that you'll notice
108:59 - what I what I ended up doing.
If you achieve a similar result actually end
109:03 - up copying all these and then pasting them
right over here, I added a background to represent
109:09 - what that looks like on the on primary surface.
And once I did that, all I had to do was actually
109:17 - change these values to white and you'll notice
a couple things that are are different in
109:21 - the system when it comes to utilizing the
opacity for states on the on primary surface
109:26 - as opposed to the on a surface, which is just
a white background on surface being the white
109:32 - background on primary using this purple color
that the opacities are much stronger when
109:38 - it comes to the activated state in the on
primary states for activated impressed and
109:45 - also the drag state you'll notice that there
I've doubled here and the drag state from
109:51 - 8% opacity to 16 utilizing a white color overlay
as opposed to a black one and is set to 32%
109:58 - here And 24% there, which is something important
to note.
110:04 - And that is pretty much it, I ended up creating
these this color styles here, I challenge
110:11 - you to create those color styles by selecting
these rectangles and clicking on style, create
110:17 - style.
And then the naming convention, you'll use
110:19 - a state's and then space slash space.
And then this is a white overlay.
110:25 - And the the type of white overlay it is as
the focus state.
110:29 - So I could just hit focus, hit Create style,
and I've created the focus state style, I'm
110:34 - actually going to right click and delete that
style from my local styles, which will appear
110:39 - at the very bottom since it's a new style
created.
110:42 - And that appears in that order from based
on when it was created.
110:45 - Right click and delete it, since I already
have it.
110:47 - And again, you have these styles to reference
I recommend you going in and making these
110:51 - and then creating them as needed.
We're gonna be going over selection, this
110:58 - should be brief, we're mainly just going to
be discussing and overlooking examples of
111:02 - material designs website, because the selection
will be discussed heavily once we start talking
111:08 - about states, which is our next video in the
interaction portion of the foundation section
111:13 - of this course.
So if we go ahead and click on in our exercise
111:17 - file selection, it is a link that we can access.
And essentially in selection, it just talks
111:24 - about how it refers to how users indicate
specific items they intend to take action
111:30 - on.
And when they're taking action on item, there
111:33 - are several ways to take an action on an item.
And we'll cover that deeply in the states
111:38 - portion, which is the next video in this course,
that you'll be watching next.
111:42 - So we're just going to be doing a brief overview
right now.
111:45 - And you'll notice that a lot of this documentation
covers interaction on mobile devices, but
111:50 - we're specifically going to be talking about
the desktop portion.
111:53 - But I will in in figma when we develop when
we create our components.
111:59 - But here you'll notice I touch on both talking
about selection in mobile and on desktop.
112:06 - And I would heavily pay attention to the desktop
portion, although the mobile portion is just
112:11 - as important if not more important.
And anyways, let's get started.
112:15 - So on touch devices, select items require
you to either do a long press touch on your
112:23 - device or a two finger touch.
Or you can utilize a selection shortcut if
112:27 - that is available, such as tapping an avatar.
And on desktop items with checkbox.
112:34 - checkboxes shouldn't display their checkboxes
by default, or permanently unless the item
112:39 - selection is the primary activity in the UI.
Instead, these checkboxes should only be displayed
112:44 - on hover as a single checkbox for that item,
or upon selection of the first item after
112:50 - which checks boxes are displayed for remaining
items in that set.
112:55 - so here we can see that the user is tapping,
and then they do a, they're tapping to select
113:02 - an item.
As you can see here, they were selecting that
113:05 - first item here.
And they were entering a selection mode, where
113:09 - they selected an item enter selection mode.
And then was then tapped again to exit out
113:16 - of that mode.
And here's some other examples as well.
113:20 - It's just the user selecting multiple cards.
And once each item is selected, they can tap
113:27 - them to toggle it selection state.
So the user selects all the cards individually,
113:32 - one at a time.
And then they select them again, to then D
113:36 - select those items.
So those are all selections.
113:40 - And then that is another example here we can
see another example of selection where users
113:44 - are long pressing and dragging across multiple
items to quickly select several items at once.
113:52 - And you'll notice that they're selecting several
items, because in the top left hand corner
113:56 - and the app bar, it is then updating the selection
as the user is utilizing the selection.
114:03 - By long pressing and dragging across multiple
items, the items being photos, and this example
114:08 - here.
So that is a great example.
114:12 - And then on desktop, which is very important.
It where you will see much more complicated
114:18 - variants of states, you'll see that the user
is making a selection on and you'll see that
114:24 - on hover, it'll reveal that checkbox.
So he there now D selecting and you'll notice
114:31 - that when the user hovers again, that the
item reveals a checkbox, and the check checkbox
114:38 - can then be clicked and clicked once again
to D select that row, that line item.
114:47 - And that is very important to note and we
can also see that there are other variants
114:52 - of of this here documented.
This is a short and sweet article.
114:57 - I highly recommend you reading through all
of it just briefly Understand selection.
115:01 - Today we're going to be talking about understanding
layout in material design.
115:09 - And we're going to go over some very simple
principles that we're going to be using throughout
115:15 - the entirety of this course moving forward.
And we're going to go over some examples and
115:19 - components.
And here I have a couple links.
115:21 - So we're gonna start off by going ahead and
opening this link, if you'd like to read through
115:26 - the information, or you can just follow along
with me, I already have these links open,
115:30 - and essentially material design in order to
ensure consistency across all the platforms
115:35 - or environments, and screen sizes that they
designed for, they adhere to three simple
115:40 - principles.
Ensuring that when you are implementing a
115:47 - layout that is predictable, consistent and
responsive across all those platforms, and
115:53 - here, you can see those definitions.
So they ensure that they are predictable by
115:57 - using intuitive and predictable layouts with
consistent UI regions and spatial organization
116:02 - by using these measurements here, and of course,
consistent layouts, while using the grids,
116:10 - key lines, and padding.
So we'll heavily be using grids, and padding,
116:14 - of course, and of course, ensuring that these
layouts are adaptive.
116:20 - And they react to input from a user, whether
it's a device, or some other screen elements.
116:26 - So here you can see some of the baseline measurements,
material uses and materials line layouts are
116:32 - visually balanced.
And to achieve that balance, most of their
116:38 - measurements are components when they're designed,
aligned to an eight dip grid that is applied,
116:44 - which aligns both spacing, and it aligns to
the overall layout as well.
116:50 - And smaller components, such as icons, or
typography can align to a four dip grid.
116:57 - And also think of that as four pixels.
So what is that exactly? So if we go to figma,
117:02 - we can go ahead and build a frame, maybe we
want to choose a generic MacBook Pro screen
117:08 - layouts, I just choose the macro pro pro screen
layout, I'm gonna go ahead and add a grid.
117:13 - And typically most of the content aligns to
an eight pixel grid or eight dip grid.
117:18 - So I can do that by just choosing having this
grid type here for my lab grid and set that
117:23 - size to eight.
And that is my eight.
117:27 - That's my baseline grid grid here set to eight
dips, or eight pixels, you could say.
117:31 - So there's an eight, here's your eight pixel
grid here, and you can start designing your
117:38 - whatever it is to the grid, which is very
essential.
117:42 - And we will use that as needed.
And of course, when you're designing several
117:47 - elements, so we have some text here, this
is very low level and not accurate, just this
117:51 - is just to give you a general idea, this typography
of will of course aligned to the grid here.
117:58 - And then I can ensure to space it by eight
pixels, as you can see here.
118:02 - And then if I duplicate into that space by
eight pixels, and notice that when you're
118:06 - designing and you break down the spacing,
and as you design components, it will always
118:10 - be divisible by eight or four.
So here, we have some measurements here starting
118:17 - from zero, and, and then incrementing by four
dips every time.
118:23 - So 04 812, all the way to 80.
And more often than not, you're going to be
118:28 - using the spacing up here in the top spacing,
which is either set to 816 20 430-240-4856
118:38 - 647 to an ad, and every now and then you'll
probably use for when you need to apply tighter
118:43 - spacing to smaller components such as icons
or typography.
118:48 - So with that being covered, we'll go ahead
and talk about those measurements in the in
118:51 - the next page.
But right before that, we're gonna talk about
118:55 - the responsive login route.
So mature designs responsive layout grid is
118:59 - an overarching guide to the placement of components
and elements so that they adapt to screen
119:04 - sizes and orientation, ensuring consistency
across layouts.
119:09 - And the three things that they implement in
their responsive grid layout is of course,
119:13 - columns gutters and margins.
So here, you can see that margins are to the
119:19 - very far right and very far left of the screen
in this in this green color here.
119:25 - And then we have our columns, which are this
shade of red here that's not red, I must be
119:30 - colorblind, so I apologize.
And that is our column label there.
119:34 - And then our gutters, of course, is the spacing
between the columns, which are on the far
119:39 - right far left of the screen, which are the
of course margin.
119:43 - So I'm gonna actually build an example of
that out in figma here really quick, so we
119:47 - have this eight dip baseline grid here, so
I'm just gonna label that frame.
119:54 - So we have the eight dip baseline grid, and
then I'm gonna go ahead and duplicate that.
119:58 - It's on a Mac Book.
Pro screen.
120:02 - And I'm going to go ahead and create a responsive
grid layout, I'm going to remove this, I could
120:04 - keep this if I wanted to add another grid
layout, and change that to columns.
120:10 - And what we can do is ensure that this type
of grid is set to stretch because that means
120:15 - it will be a responsive layout grid or you
could call it adaptive.
120:19 - Or you could say fluid.
That is another common term.
120:22 - I'm going to add 12 columns here, or we could
check how many columns were implemented in
120:26 - this grid 368 columns, when it looks like
they're potentially designing for a tablet,
120:32 - here we have a grids, you'll notice that all
the columns here are set to read.
120:36 - And I can change the opacity of that to really
point that out.
120:39 - So we have eight columns here, but we don't
actually have margins yet this, what we're
120:44 - trying to achieve here is add these margins,
which are labeled in green here.
120:48 - And we'll set that to 24 pixels, we have the
margin parameter and figma there.
120:52 - So I've set that 24 pixels.
And you'll notice that it kind of squished
120:55 - those columns in so I squish those columns
in.
120:58 - And now I'm going to change this gutter from
the default 20 pixels or points to 16.
121:04 - Because that is commonly used as well.
And it also perfectly aligns with our our
121:12 - grid are eight pixel baseline grid as well.
So that is an example of how to build this
121:16 - out.
But now, I'm going to actually stretch the
121:20 - screen because this is responsive.
So you'll notice as I move this frame, essentially,
121:25 - the components you design that will be attached
on the screen, and adhering to the column
121:33 - layout or the grid layout on the screen will
also be responsive as you as you start to
121:39 - stretch it around.
Because as you all know, we have web browsers
121:42 - and we can stretch those around and it becomes
responsive figma itself, the tool is responsive,
121:48 - as you can see.
But that is an example there a responsive
121:54 - grid layout.
So now that we have that specified, that is
121:58 - fantastic.
We'll go ahead and start to see how the measurements
122:01 - are implemented in components.
So in our in our exercise file, if we click
122:07 - on app bar components, we can go ahead and
open that link, which will open a a material
122:13 - design page.
And if you go ahead and follow me and click
122:16 - on the specs here in the contents category,
you'll see that we have a bunch of bottom
122:22 - app bars, which are mobile only components.
And what the important thing to get out of
122:27 - this is that we're seeing a bunch of specs
provided on how to design these elements.
122:35 - So here you can see that this is this hamburger
menu is wrapped in a 24 by 24 frame.
122:41 - And we have a floating action button that
is set to 56 by 56, dips in width and height,
122:49 - which utilizes elevation on the Z index to
rise above this bottom app bar as you can
122:53 - see here, and then you can see the spacing
between these icons as well is such 24 dips,
122:59 - and then it has some padding or you could
say margins on the right set to 16 dips.
123:05 - And it the height of the of these elements,
which are these icons are centered within
123:11 - this bottom app bar.
And the height of that is set to 24 dips.
123:16 - So there's some measurements there.
And you can continue to scroll down and view
123:19 - other variations of this floating action button.
As you can see here, there are other variations
123:26 - with more specifications provided here.
So there's eight dips between this floating
123:31 - action button and the whitespace there to
the bottom app bar background.
123:35 - Again, more, notice that all of this is divisible
by eight or four.
123:40 - So understanding that this is all very consistent
at a very low level.
123:46 - So it all starts from the ground up.
Or you could say very primitive level, as
123:50 - these are primitive, such as icons, everything
is divisible by eight or four.
123:54 - And also the spacing amongst all these elements
is divisible by eight or four.
123:59 - And as well as the sizing of other components
that are overlaid on top of this bottom app
124:04 - bar, which is fantastic and a great source
of information for you to soak through.
124:08 - And we'll be getting into this very much soon.
And that is all I have for you and understanding
124:14 - layouts.
We're going to be talking about pixel density.
124:20 - And what that is exactly.
So we're going to have an overview of that
124:23 - and then understand pixel density across different
platforms such as iOS, Android, and for the
124:28 - web.
And what that means for each platform.
124:31 - And I have the resource here, we can click
on this link and just open it up.
124:37 - And once you have it opened up, you'll notice
that it takes you to material designs documentation.
124:43 - And we're just going to be reading through
this and I'll be explaining this to you and
124:46 - certain scenarios in which you would need
to understand this and also just to all broaden
124:52 - your horizons as a designer if you already
don't understand pixel density.
124:56 - So once you have to design for specific platform,
you know exactly how to communicate measurements,
125:04 - for example.
So say, communicating measurements for Android
125:08 - is completely different than communicating
measurements for developers on the web, you
125:14 - know, or iOS, or Android.
So understanding how to do conversions, for
125:19 - example, you may have, say, for example, I
was building a Splunk.
125:26 - product for, which is the company I worked
for, and this products already been released.
125:32 - And it was a application shipping for iOS.
And I, myself had been a designer for the
125:38 - web.
And I was not aware of how to translate pixel
125:42 - density from the web to iOS at the time.
And essentially, that is a scenario where
125:48 - you would need to understand this.
So I was providing that example.
125:51 - So let's, let's dive in.
And we'll get into the rest later.
125:54 - So what is Hanks pixel density, screen pixel
density and resolution vary depending on the
125:59 - platform and pixel density is just the number
of pixels that fit into an inch is referred
126:05 - to as pixel density.
So it's the pixels per inch, how many pixels
126:09 - per inch.
So you may have seen, if you've printed paper
126:13 - out before, or printed out some graphics or
something, it asks you in the settings before
126:19 - you print to specify how many pixels per inch,
you want that to be printed at.
126:26 - So the lower the amount of pixels per inch,
the lower the density is.
126:32 - And the more pixels per inch, the higher the
density is, when you see that printed, or
126:38 - if when you see on a display, and they give
you here in this documentation, a basically
126:46 - a formula on how to calculate pixel density.
And it's just this equation where your screen
126:53 - density equals the screen width or height
and pixels divided by the screen width or
126:58 - height in inches.
And if you do that, you'll get your pixel
127:04 - density.
So there's an example here visually, which
127:08 - is a really good example where this high density
display has more pixels per inch than the
127:13 - low density display here, and it zooms in
on it.
127:17 - And you'll notice that the you this UI element,
as pixel dimensions appear larger on low density
127:26 - screens, and smaller on high density screens.
So the more pixels you have, the smaller it'll
127:32 - appear on high density screens.
And the lower that the pixel dimensions are,
127:40 - the larger it'll appear.
So with that being said, we can jump on to
127:46 - talking about density independence, which
refers to the uniform display of UI elements,
127:50 - on screens with different densities, and density
independence.
127:56 - In material design is commonly pronounced
as dips, which is the abbreviation dp here
128:02 - written as dp, and pronounces Dibs, they're
flexible units that scale to have uniform
128:06 - dimensions on any screen.
And they can provide a flexible way to accommodate
128:10 - a design across platforms.
So for example, Material Design not only designs
128:15 - for the web, but also Android and iOS.
So they use this terminology dips, which is
128:21 - their way to have a common language in design
and engineering to accommodate designs across
128:30 - several platforms.
And material, UI wise, use of density independent
128:36 - pixels, is to display elements consistently
across screens, with different densities on
128:41 - those different platforms.
So here, you can see a low density screen
128:45 - displayed with density independence here,
where the low density makes it much more apparent,
128:51 - where you can see all these pixels here, which
are all the squares, it's much more apparent
128:54 - on low density.
And it is less, it is still apparent, but
128:59 - it is harder to see on high density, all the
squares due to the high density screen displayed.
129:08 - And we now we can start to talk about the
pixel density on it on a per platform basis
129:14 - where this pixel density on Android when you're
developing on Android, or designing for Android
129:19 - use dips to display elements uniformly on
screens with different densities.
129:24 - So that's how you would measure it.
And it dip is, is equal to one physical pixel
129:29 - on a screen with a density of 160.
And essentially what that and there's the
129:35 - equation here, again, being utilized.
So essentially, a dip is one dip is one pixel.
129:44 - So don't let me confuse you.
You could think of it as simple as that.
129:49 - One dip is one pixel.
But dips are used for measuring on Android.
129:56 - So that is important to note.
And also scalable pixels.
130:01 - The abbreviation for that as SP serves the
same function as density independent pixels
130:05 - which are dips.
But for fonts, the default value of a scalable
130:10 - pixel is the same as the default value for
a dip.
130:15 - But for fonts, the primary difference between
a scalable pixel and a density independent
130:20 - pixel is that scale will pixels preserve a
user's font setting, which is super important.
130:26 - users who have larger text settings for accessibility
will see font sizes match their text size
130:31 - preferences.
And again, pixel density on iOS.
130:38 - The iOS based platform determines density
using logical resolution, which means it just
130:44 - measures its units in points as opposed to
pixels or dips, it uses points for measurement.
130:52 - And here, with their logical resolution, the
points are scaled using a native scale factor,
131:00 - which is some technical knowledge for you
to understand if you like, which just maps
131:04 - to a device's native resolution.
So for example, if you're designing for the
131:09 - iPhone x, you would design for a logical resolution
of 375 points by 112 points.
131:17 - And when it's rendered elements are processed
by the graphics hardware.
131:20 - Now using this native scale factor functionality
to fill in the iPhone Xs, dimensions, since
131:27 - the screen is much bigger.
So it has the capabilities of understanding
131:32 - those points and scaling them accordingly
to the device it's being displayed on.
131:38 - And units, again, for iOS use points, which
remember that and then, of course, pixel density
131:44 - on the web scales to the devices, screen resolution,
but when you're designing for the web, replace
131:51 - dips with pixels.
So you can when you're designing products
131:55 - on the web, unless specified otherwise, by
say engineers you work with and whatnot, you
132:02 - can just measure things in pixels.
We're gonna go over some spacing methods,
132:10 - once more in material design, hear how they
approach spacing, their elements, and they
132:16 - use terminology that is very useful that we're
going to go over in the documentation.
132:19 - And in our exercise file here, we can go ahead
and click on this link and figma, where we'll
132:25 - have access to opening the spacing methods
page in figma.
132:29 - And we're going to go over everything in the
contents here.
132:32 - And spacing methods are essentially just the
use of baseline grids, key lines, padding,
132:39 - and incremental spacing to adjust certain
ratios, containers and touch targets.
132:44 - A lot of this is very important.
I know, it might be slightly boring.
132:49 - But this is very, this is a great resource
for us learning, not only spacing for materials
132:57 - design system, but also applying this to any
other systems we create or products we get
133:02 - to design moving forward.
And here we have our baseline grid, where
133:07 - it just discusses how all components align
to an eight dip square baseline grid for mobile
133:12 - tablet, and desktop.
So we can go ahead and replicate that here.
133:18 - So here, you can see that the square is eight
by eight dips, which is essentially just eight
133:22 - by eight pixels.
If you were to design for the web, and here
133:27 - in figma, we're going to go ahead and create
a screen that is set to the size of a MacBook
133:32 - Pro screen.
And I'm just going to label this a div baseline
133:36 - grid.
So and then I'm gonna apply a layout grid.
133:39 - So and then set the size to eight here and
I now have a eight dip baseline grid that
133:45 - I can always that I can utilize to measure
my elements here on this frame.
133:51 - So that is very important to note.
And it's great to have.
133:55 - So that is a direct translation of how that
is written out in the documentation, how to
134:02 - create that in figma.
And we also have a four dip grid, where that
134:07 - is utilized in more dense areas such as icons
type, and some elements with components that
134:14 - can align to a four dip grid.
And if we wanted to create a four dip grid,
134:19 - honestly, all we have to do is duplicate this
one, I can rename that to four dips.
134:25 - And then from there, I would need to Whoops,
I had that set to 18 that should be at eight.
134:32 - So now that said eight, my apologies.
And now that that's set to eight, I can go
134:36 - ahead and change this one to four.
And now we have a four dip baseline grid and
134:42 - the eight to baseline grid.
And the usages for those for those are specified
134:47 - here.
So typography aligns to the four digit baseline
134:51 - grid.
And this typography can be placed outside
134:54 - of the four dip grid when it's centered within
a component, such as a button or list item.
135:00 - When it's placed outside of the grid, but
centered within a component text can still
135:04 - appear vertically center aligned.
As in this scenario, you can see that as well,
135:10 - it is a vertically aligned in the center of
this list item right here.
135:17 - All although the type is placed outside of
the four dip grid, so that is something important
135:21 - to note there.
And then we're going to talk about some terminology
135:26 - that we'll be using frequently throughout
the course when we build these components
135:30 - from scratch.
So they're using these buttons as examples.
135:34 - So the spacing methods are more granular than
the responsive grid layout, where it is a
135:41 - set of rules around how to place elements
within layouts and components.
135:45 - So padding refers to the spacing here, between
elements within a component.
135:50 - So you can see that there's padding to the
left and right on this icon, and there's padding
135:55 - to the left and right of this button on the
right.
135:57 - And that and that it is has alignment that
is vertically centered within this button,
136:04 - which is expressed in this example.
And this alignment spacing method example
136:12 - where the button with the plus icon is vertically
aligned to the center within the button component.
136:18 - And of course, we have two mesh dimensions,
which we'll be going over very much soon,
136:25 - where it describes the width and height of
the components elements.
136:30 - So we'll know exactly how to size our components
and the elements within them accordingly,
136:35 - by utilizing the dimensions, and then now
it talks about specifically padding, and how
136:40 - it refers to the space between UI elements
and how it is an alternative spacing method
136:47 - to key lines and as measured in increments
of eight dips, or four.
136:51 - So again, you'll notice that it's always divisible
by eight or four.
136:54 - And padding can be measured both vertically
and horizontally, and does not need to span
136:59 - the whole height of the layout.
And of course, we have the dimension specified
137:03 - here for the component, the height here is
set at eight as you can see, and it gives
137:08 - you the specs for the height of the app bar,
which is set to 56 dips, and then the status
137:15 - bar height is set to 24 dips.
And of course this list items at 88 dips.
137:21 - So this is important to refer to when we really
need to ensure that our elements are pixel
137:27 - perfect, or in this case density independent
pixel perfect.
137:33 - And then, of course, we have the alignment,
which is the placement of elements in here,
137:36 - it's just giving you examples of elements
being highlighted and discussing how they
137:41 - are centered.
So that is great.
137:45 - And then we also have key lines.
And it's a tool that enables consistent placement
137:51 - of elements outside of a layout grid.
And they are vertical lines that show where
137:56 - elements are placed when they don't align
to the grid key lines help you determine the
138:02 - distance between elements from the edge of
the screen.
138:07 - And you can also measure in increments of
eight and then also move helps you a lot in
138:13 - figma.
So if I open up figma, and I create some text
138:17 - here.
And once I have that text created, I can go
138:22 - ahead and even create a rectangle.
Here, if I hold down Option, you'll notice
138:27 - that key lines appear.
And I see that this is 240 pixels away to
138:32 - the left and this text.
And I can measure from the edges of the screen.
138:37 - From the top edge, the distance between and
the left edge and the bottom edge and even
138:41 - the very far right edge, as well as this two
by just holding down option.
138:45 - Or Alt on Windows option on Mac.
And those are my key lines that helps me specify
138:51 - the distance between elements.
And we're going to be using this shortcut
138:54 - key all the time we're building components
to ensure they're pixel perfect.
138:58 - So that is what key lines are.
And you can also use rulers in figma.
139:02 - If I hit Shift R, you'll notice that in the
canvas this, these set of rulers appear and
139:08 - you can measure to the distance between the
rulers as well.
139:12 - And you can create a vertical or horizontal
by just dragging from within the ruler and
139:17 - onto the canvas.
And you can measure the distance between as
139:21 - long as you hold option hover over that read
that ruler line or key lines, we could call
139:27 - it and you can hide them by hitting shift
R.
139:31 - And those are how we'll use key lines.
And next we'll talk about containers and ratios.
139:37 - And essentially containers a term that refers
to an enclosed area.
139:43 - And essentially containers are composed of
UI elements, such as images, icons or surfaces.
139:49 - So here we have an image container.
Here we have an icon container and we have
139:53 - of course a surface container, which encapsulates
a button and containers can Be rigid and restrict
140:00 - the size of, or cropping of elements within
them.
140:04 - So you can utilize containers to crop images
if they were in an image container, or even
140:10 - an icon container.
But that, but it's typically utilized more
140:15 - often with image containers where you'll need
to crop an image.
140:20 - But they can be flexible and grow to support
the size of the content that it holds.
140:25 - As you can see, in these examples, we have
a rigid image container, an example number
140:30 - one, which crops the original size of the
image, or we have a flexible image container.
140:35 - And example number two, that holds the original
image size as it scales.
140:41 - And then there are some important things to
understand here where we talked about aspect
140:46 - ratios where the aspect ratio is a proportion
of an element, its width to its height.
140:51 - And its aspect ratio is written as such width
to height.
140:57 - And to maintain consistency, and your layout
material design uses a consistent set of aspect
141:03 - ratios on elements like images, surfaces and
screen sizes.
141:07 - And it is recommended for us to use this these
set of aspect ratios across our UI.
141:15 - And you can see them here.
So you can see some landscape formats where
141:19 - this ratio is graded.
And then some some portrait formats as well.
141:26 - And it talks about flexible ratios, which
is determined by the layout grid, where the
141:31 - container width is determined by the screen
layout and grows to fill the maximum space
141:36 - available.
So it's just referring to a responsive screen.
141:40 - And a container height is determined by the
height of the image in the container with
141:46 - these flexible ratio principles, and you can
use a flexible ratio to allow content form
141:51 - determine the height of the container, which
is very common.
141:57 - And one of the most important things to understand
is touch targets, and how touch targets apply
142:02 - to any device that receives both touch and
non touch input.
142:07 - And this is these principles are used to balance
information density and usability all in one.
142:14 - And touch targets should at least be a size
of 48 by 48 dips, or 48 by 48 pixels with
142:20 - at least eight dips of space between each
target.
142:24 - So you see that the dimension specified here.
Although see this icon container is set to
142:33 - 40.
By 40 dips, the tap target is set to 48 by
142:38 - 48 dips.
So that is very important.
142:42 - And if you were to have another icon container
next to it or any or a button, for example,
142:47 - it would have to be at least eight dips of
space between the target so I can go ahead
142:52 - and do that.
So say I had an icon here set to 40 by 40.
142:59 - I can I can specify this I can create a frame
and then hold on option command to scale this
143:07 - to 48 by 48.
And then I can center this and you'll notice
143:13 - that I'll change the background here to white,
maybe a little slight red.
143:18 - And that red ref references the tap target.
And the icon here is this circle and the tap
143:27 - target set to 48 or 48.
But the icon itself is 40 by 40.
143:31 - So those are the dimensions for the tap target.
And then if you were to create another element
143:35 - next to it, you would at least have to have
a spacing of eight dips.
143:39 - So that is essentially what this is referencing
here.
143:42 - And you can see that this button has a height
of 36 dips, but the tap targets height is
143:48 - set to 48 tips.
So that's very important.
143:51 - And you can see in the second example that
there's an icon set to 24 by 24 dips, but
143:56 - the tap target is set to 48 by 48 dips.
So that is a standard principle for accessibility,
144:02 - just to ensure that you can actually tap these
elements on the interface correctly, and adheres
144:11 - to not only balancing information on your
screen and usability, especially for impaired
144:16 - users, but it just allows for a more cohesive
design.
144:20 - Today, we're going to go over the responsive
grid layouts in material design.
144:27 - And we're going to be creating those in figma
and as styles so that we can systematically
144:33 - reuse them across all our designs as needed
and implementing them into our system.
144:39 - So here you can see that I've taken some screenshots
off of material designs website, which references
144:46 - all of the the breakpoints, so it discusses
the breakpoint system here and also the breakpoints
144:52 - for how they designed for iOS devices.
And we'll be going over not only creating
145:00 - Those istyles and figma.
But before we jump into that, we're going
145:04 - to be talking about some key concepts and
stuff to apply to our mental model and creating
145:09 - grids and designing.
And some of those things being columns, margins
145:15 - and gutters when you're creating your grid,
which we already know and have covered.
145:19 - And we'll go over that, again, to reiterate
that, and ingrain that in your brain, and
145:24 - also some ways to customize the grid, whether
it's horizontally or vertically, customize
145:32 - on the grid layout on those accesses, and
discussing what you can and can't do, or at
145:39 - least some good best practices and not so
good practices.
145:43 - And then of course, creating the styles, understanding
grid behavior, mainly the differences between
145:50 - a fixed grid layout and a responsive grid
layout, and then discussing UI regions.
145:55 - And what those are some examples on their
web page, and then what white frames are,
146:00 - so we can go ahead and click on this resource
here, open the link, and it will open up this
146:06 - responsive layout grid page on material designs
website.
146:09 - And essentially, this responsive layout grid
allows our designs to adapt to several screen
146:15 - sizes and orientations, ensuring consistency
across all the layouts.
146:19 - And the general diagram describes what a responsive
grid layout or just a grid layout in general
146:25 - it consists of.
and it consists of columns, as you can see
146:28 - here, and gutters which are which are the
which is the spacing between columns.
146:33 - And then the margins, which are on the very
far left and far right of the screen laid
146:39 - out in green here.
Those are the margins.
146:42 - And it talks in depth about columns, and how
the content is placed in the areas of the
146:48 - screen that contained column.
So you'll notice that generally, when you're
146:51 - designing on a grid layout that your designs
or your components, snap to these columns.
146:57 - So as you can see, here, it snaps to the left
and right edges of these two columns.
147:01 - So this, you could say this card takes up
two columns, as well as the one to the right
147:05 - of it.
And it utilizes that spacing in between, and
147:09 - the gutters to provide that consistent spacing.
And so things are categorized in an organized
147:16 - fashion.
So column width is defined using percentages
147:21 - rather than fixed values, which allows content
to flexibly adapt to any screen size.
147:27 - So you'll notice when we create up create
these grids here in figma, they're going to
147:31 - be very responsive.
And the number of columns displayed in the
147:36 - grid is determined by the break point range.
And the break point range here is specified.
147:41 - So from zero dips to 359 tips, or you could
call those pixels if you're designing for
147:45 - the web.
And you can see that we have ranges all the
147:49 - way for mobile devices here all the way to
massive screens.
147:56 - And we'll be creating all of these.
And here, we'll be creating all of these iOS
148:03 - grid layouts as well.
And that is that for columns, and here are
148:07 - some examples on mobile at a 360 dip breakpoint
using a four column grid layout here, as you
148:15 - can see four columns, Scott scoters, and margin
specified as well.
148:20 - And you can see that on a tablet at a breakpoint
of 600 dips wide, it uses a layout grid of
148:26 - eight columns.
So as this screen expands, it goes from four
148:31 - columns to eight columns, which also allows
for more content to be implemented on that
148:37 - screen.
So you can see that this row only has two
148:39 - cards.
And then when expands to a wider screen size,
148:42 - which is 600 dips in this example, it goes
from two cards to four cards on that row.
148:49 - And here where it discusses gutters, and those
are the spaces between the columns as it's
148:53 - highlighted here, and they help separate content.
And those gutter widths are fixed values at
148:58 - each breakpoint.
And to better adapt to the screen size.
149:02 - gutter width can change at different breakpoints.
So wider gutters are more appropriate for
149:07 - larger screens as they create more whitespace
between columns.
149:10 - So that way, information on the screen isn't
as isn't as dense and cluttered as it can
149:18 - be if there are not wide enough gutters that
larger screen sizes.
149:23 - So here you can see on a on mobile device
at the breakpoint of 360 dips.
149:29 - This layout grid uses 16 dip gutters and on
tablet on the breakpoint 600 dips wide.
149:38 - The layout grid uses 24 dip gutters specified
here, and it's using those 24 dip gutters
149:45 - to separate the content.
And now we can discuss margins which is a
149:49 - space between the content on the left and
right edges of the screen as highlighted in
149:54 - green here on the left and right and these
margin widths are defined as fixed values
149:59 - at each break.
point.
150:00 - And this allows you to better adapt to the
screen and the margin width can change at
150:04 - different breakpoints.
Wider margins are more appropriate for larger
150:08 - screens as they create more whitespace around
the perimeter of the content, as you can see
150:12 - here.
So here's an example of margins on mobile
150:15 - on a small device using a layout grid of 16,
dip margins.
150:19 - And then on a tablet at on a lot slightly
larger device, the mobile, you'll notice that
150:25 - the margin increases from 16 to 24, dips here
on the left and right margins.
150:31 - And now we can go ahead and talk about the
customization of the grid and ways you can
150:36 - customize it, which allows you to meet the
needs of both your product and the various
150:40 - device sizes you're designing for.
So sometimes, you might need to customize
150:45 - gutters to have more space between content
to create more to just to create more consistency.
150:55 - If spacing gets too tight at times, or, or
if there's too much spacing, as you can see
151:00 - here, in this lab grid, it's using eight dip
gutters here, very tight spacing, the tighter
151:06 - spacing may suggest images are closely related
to one another so that they're perceived as
151:11 - a part of a collection.
And here you can see that this layout grid
151:16 - uses much larger gutters set to 32 dips to
create more separation between columns.
151:22 - And that extra space helps the album be perceived
as individual entities within a collection.
151:28 - And one thing you shouldn't do that is recommended
is to not make gutters too large, such as
151:34 - the same width as the columns too much space
doesn't leave enough room for content and
151:38 - prevents it from appearing unified, and it
just looks weird.
151:42 - All the spacing is just way too much.
And also you can customize margins, margins
151:47 - can be adjusted to create more or less space
between content.
151:51 - And the edge of the screen margins use a fixed
value for each breakpoint.
151:57 - And it gives an example of typography here
text, the ideal length for body copy is 40
152:04 - to 60 characters per line.
So if you're going beyond that many characters
152:10 - per line, it could be an indication of you
having to add more depth to your margins,
152:19 - increasing the margin space.
And don't make margins so large that there
152:25 - isn't sufficient room for content.
So you have to find that balance.
152:28 - So here's an example on mobile on a mobile
breakpoint size 64 dip margins to limit the
152:35 - width and the content still looks proportionate,
but doesn't doesn't overwhelm the user.
152:40 - Whereas this is very dense and thin, just
not good use of whitespace and too much space
152:47 - in the margins.
That example.
152:50 - And here, we can talk about also the utilization
of horizontal grids where Material Design
152:59 - layout grids can be customized for touch you
eyes that scroll horizontally.
153:03 - So if you're for example, looking through
a photo album or just scrolling on a browser
153:08 - on a tablet, or mobile device, columns, gutters
and margins are laid out from left to right,
153:13 - rather than top to bottom, when you're creating
a horizontal layout grid.
153:18 - In here, you can see that the margins are
at the top and bottom of the horizontal grid
153:25 - layout, and the columns here set to four columns
with a 400 height in depth 400 dips in height,
153:35 - which is great, we got that specified.
And then we have the gutters as well, those
153:39 - same principles just a different orientation.
And horizontal grids can be positioned to
153:46 - accommodate different heights allowing space
for app bars and other UI regions or other
153:51 - content that is fixed on the screen to begin
with.
153:57 - So you can squeeze that in there.
And now that we've discussed all that, we're
154:01 - going to be talking about building breakpoints
in figma.
154:05 - At the very end, a couple more things to cover
are UI regions.
154:11 - And essentially, UI regions are a layout,
which is made of several UI regions such as
154:16 - side navigation that is fixed.
So UI regions are typically fixed content,
154:21 - like the side navigation, the content area,
and this app bar.
154:27 - These regions can display actions, content
or navigation destinations.
154:30 - And these UI regions should be consistent
across devices.
154:34 - And you'll notice that it gives you an example
of that as it scales down.
154:37 - So it starts to like a desktop layout, and
then a tablet layout, and then a mobile layout,
154:41 - and it talks about it shows you how it isolates
the UI regions as it scales down, which is
154:47 - very important to increase familiarity of
how this is done across devices as you scale
154:53 - up and down.
When you're designing so you can ensure that
154:57 - you're properly adapting to different breakpoints
have different screen sizes.
155:01 - And, again, I'll be touching upon how these
UI regions are fixed.
155:06 - You can think of them as permanent UI regions
that can be displayed outside of the responsive
155:11 - grid as well, like navigation drawer, where
these regions cannot be collapsed.
155:17 - As you can see here, in this example above.
And then we have persistent UI regions that
155:23 - can be displayed upon a command such as a
hamburger menu where a menu slides in when
155:27 - you press it, and they can remain visible,
or they can be toggled on or off to appear
155:32 - disappear.
And when they appear, they condense both content.
155:36 - They condense both content and the grid.
So you'll notice that it condenses that grid
155:41 - once that persistent UI region is toggled
on, user presses it in this example, and then
155:48 - the content gets condensed.
And which adheres to the grid, which is why
155:54 - the content is condensed.
And then there's temporary UI regions, which
155:58 - do not affect the responsive grid.
So this is an overlay example, when it's visible,
156:04 - they can be hidden by tapping an item in the
region, or any space outside of the region.
156:09 - So this temporary region only appears temporarily
and does not affect the responsive grid.
156:17 - And then we have this concept of white frames,
which are structured layouts that provide
156:21 - a consistent approach to layout, and layering
and shadows.
156:25 - And it's a great starting point meant to be
modified to meet the specific needs of a product.
156:30 - So for example, you could think of this as
a template.
156:32 - So you don't have to design the entire bare
bones structure of a design, you can just
156:41 - grab a white frame to get started.
Or this just gives you a really good start
156:47 - to designing your product, as opposed to building
out all of this from scratch.
156:53 - So here you can see a mobile example of a
white frame, which you can think of as a template,
156:57 - where you can then go in and plug in what
you need into that interface.
157:01 - It's already built out for you from from the
bare bones structure, and also a desktop example
157:07 - of that.
So now with all that being said, and allows
157:10 - a lot to cover, we can go ahead and open up
figma and start creating these these grid
157:16 - styles.
So we can start by, I can grab this screenshot,
157:22 - and we'll do a couple together.
And then the rest of this exercise, you'll
157:26 - be implementing these on your own as well.
So here we have the first breakpoint, which
157:32 - is set from zero to 359, dips, I'm going to
create a frame specify that the width is set
157:38 - to 359, which is really thin size is set to
portrait.
157:46 - And I don't really care about the height right
now, because this is the we're just developing
157:52 - the grid layout for this width, not the height.
So I'm going to click on Create style here,
158:00 - this grid style, click on that layout grid
settings icon and change that to columns.
158:06 - And you can see that it's set to four columns.
And the margins and gutters are set to 16.
158:14 - And it is going to be responsive.
So I'm going to set that type to stretch.
158:19 - So I'm going to set the margin to 16.
And notice that my margins have now increased,
158:24 - there are now margins and then change the
gutters to 16 as well which thickening the
158:29 - columns and tighten the spacing between content
when we align it on this grid lab.
158:34 - So now we have this grid layout for this breakpoint
range.
158:39 - And I can go ahead and now I can actually
turn this into a style.
158:45 - So with that this lab group created, I can
click on this style icon and click on the
158:50 - Create style.
And what I can do is specify that this is
158:55 - an extra small grid layout.
And I can even specify extra small at zero
159:06 - to 359 dip.
And I can even specify I can categorize this
159:16 - because here you can see that we have a range
of screen sizes from extra small in this column
159:21 - to small to medium to large.
So I'm going to specify this as extra small
159:29 - x small is a slash naming convention to categorize
this.
159:35 - And now I can go ahead and name this as as
such, so now it's extra small, and it's the
159:44 - first breakpoint from zero to 359 dips.
This is what the grid will look like I can
159:49 - create that style.
I can even go in edit and add a description
159:54 - and discuss that this is used for small hands
sets.
160:04 - And yeah, that's all the information I really
need to communicate to designers who are needing
160:08 - to understand what this grid layouts used
for.
160:11 - So now I have that grid layout applied.
Now I'm going to duplicate this frame and
160:17 - remove this layout grid and ensure that I
have this set to 360 pixels or so I can have
160:30 - a frame any wide, anywhere from 360 to 399
dips.
160:37 - So I can even just change this from 359 to
360.
160:40 - And width, or I can just increase it to 399
doesn't matter as long as it's within that
160:47 - range.
And because since this is a fluid layout,
160:53 - it will automatically maintain and calculate
the four columns between this bait breakpoint
161:00 - range and ensure that these margins and gutters
are set to 16 at all times, and also four
161:05 - columns for this breakpoint range.
So I can go ahead and create another layout
161:11 - grid style, click on the grid settings, specify
the column, select the columns, ensure that
161:17 - there's four, I can even change the color
of this, if I wanted to, I could change that
161:23 - to a blue and ensure that the type is set
to stretch at 16.
161:31 - pixels are 16 dips to my margin and gutters
and I now have that specified.
161:36 - And I can go ahead and close that out and
create this as another grid style under the
161:45 - extra small category using that slash naming
convention.
161:50 - And then from there, I'm going to go ahead
and specify the break point range which is
161:55 - 360 to 399.
And I'm going to write dp.
161:59 - So people understand that this is the format
for material design, which is dips, density
162:06 - independent pixels, I'm going to create that
style, I now have two grid styles here.
162:12 - And I'm going to go ahead and create one more
with you.
162:14 - And then I'm going to challenge you to make
another one the rest by yourself.
162:19 - So I'm going to duplicate this and detach
this style, create one from scratch, change
162:28 - this two columns.
And here, I need to specify the width anywhere
162:33 - from 400 dips to form 79.
So I'm just going to select 479 lipsi 479
162:41 - on the width.
Now that I have 479 specified, I'm gonna click
162:45 - on my grid settings, and ensure that there
are four columns, change the color of this
162:52 - grid again, to another shade of blue, just
because I like blue, and then change the margin
162:58 - of 16 and the gutters to 16 as well.
And it is set to stretch.
163:02 - So it will be responsive.
And now I can turn this into a grid style,
163:09 - and specify that this is an extra small, whoops,
extra small grid style.
163:20 - And then I can specify the breakpoint range.
So it's 400 dips to 479.
163:26 - And quick, great stop.
And I can even go ahead and add a description.
163:33 - So this one's typically used for large handsets,
meaning large devices, large handset.
163:43 - And then now that I have that description
there, I have my three styles.
163:46 - And now I challenge you to go ahead and make
the rest of these styles here from 480 dips
163:52 - downward.
And I'm going to make pause this video and
163:55 - make them myself.
So I'll be right back.
163:58 - Alright, so now that I've created all the
styles, you can compare what you've created
164:04 - with me, compared to the grid styles.
Here, I have all of the format specified here
164:10 - in this screenshot.
And all these breakpoint ranges are clearly
164:16 - being reflected directly in the single file
as grid styles, you can see that all these
164:22 - breakpoints are split by window size.
So we have four extra small breakpoint sizes
164:27 - specified as grid sizes with the proper columns
and margins.
164:32 - And of course, this is already in the exercise
file for you to to view.
164:36 - And if you didn't make them from scratch,
I highly recommend you do it's a great way
164:41 - to practice building grid styles.
And I can almost guarantee you that by the
164:45 - time you finish creating this many grid styles,
you'll know how to do that.
164:50 - And it'll be just something very, very simple
for you to do and you have that skill as a
164:58 - designer from here on out which is very useful.
You know, it's like the back of your hand.
165:04 - And as you can see here, I have all these
styles all the way up to the extra large size
165:08 - wishes for any breakpoints at the size, the
width of nine 1920 pixels or wider.
165:17 - And we have all of those examples specified
here in this file.
165:21 - And as a bonus exercise, you can go ahead
and even create all the iOS breakpoints, if
165:27 - you like, as those are specified here.
And one tip is if you create a frame, and
165:31 - you go to frames, you have all sorts of formats
for your iPhone formats here.
165:36 - So you can just select an iPhone format, and
then implement a grid layout.
165:44 - And just selecting your column layout, specifying
how many columns are necessary, the majority
165:49 - of them utilize four columns for the for this
compact version here are just for the the
165:55 - first three set of sets of iPhones are the
first for both.
166:00 - In portrait and landscape, you'll notice that
the orientations are different.
166:04 - So you would probably you'll need to create
a grid for a horizontal landscape as well.
166:10 - So do take that into consideration where you'll
not use columns, but you'll use rows to specify
166:17 - your grids.
So that is very important to take into consideration.
166:21 - As you're building these, I recommend you
challenging yourself, and doing that and creating
166:27 - those styles as well.
So you could even go ahead and create that
166:30 - grid style.
And you can specify that this is an iOS grid
166:35 - layout by providing that naming convention,
they're using the slash to categorize them
166:41 - as grid styles for the iOS breakpoint.
And then you can just specify iPhone portrait.
166:48 - And you now have that iOS variant grid style.
So if I go in and create a frame, and I go
166:54 - to my grid styles, you'll notice that I've
categorized them, I have extra small grids
166:58 - have small grid styles, choose from medium
grid cells, and large ones, and extra large
167:02 - and of course, an iOS one.
So you can go ahead and build those out as
167:05 - well, which is very helpful.
good exercise for you.
167:11 - And you'll notice to some of you may have
question, Why make so many grid styles.
167:18 - If, say, for example, all these small extra
small formats, all use the same amount of
167:25 - columns and gut margins and gutters.
That's a great question.
167:29 - And since this is a responsive layout, technically,
you don't even need to make all four of these,
167:34 - I was solely making all four of them to replicate
the preciseness of this break point system
167:41 - in this table specified by material design.
So if you want to go ahead and actually consolidate
167:46 - these to the minimum amount of grid styles
necessary, you can go ahead and do that.
167:51 - And in reality, you would actually only need
three grid styles, you would need the extra
167:58 - small and the small.
Actually, you'll need three grid style.
168:04 - So you would need the grid style that is for
these breakpoints for these first four breakpoints
168:10 - here, these extra smalls with the four columns,
and margin and gutter set to 16 dips.
168:16 - And then you'd have a second one for the small
breakpoint for the small tablet where the
168:22 - it's set to eight columns and 16 margin and
gutters.
168:25 - And then you have a third one set to breakpoint
for large tablets where the columns are eight.
168:32 - But the margins of gutters are set to 24.
And then for every other device, you would
168:38 - have 12 columns and 24 dip margin and gutters.
So essentially, you only have 1234 grid styles,
168:48 - you could consolidate those, and even go in
and if you consolidated them, you could write
168:52 - a description for what breakpoints they applied
to, which is also a great exercise, I recommend
168:58 - you doing that as well.
Today, we're going to be building out all
169:03 - of the variants for the app bar, specifically
the bottom portion of the app bar, which is
169:09 - where you can think of as some bottom navigation.
And we have a link to the description of this.
169:16 - And it's a bottom map, app bar, which displays
navigation and key actions at the bottom of
169:20 - the mobile screens.
And since you've been getting the hang of
169:23 - actually building this out with me, and even
by yourself, I hope so you already have I
169:28 - hope you already have this down by now.
That'd be awesome.
169:30 - If not, we're going to go through this.
You'll notice that we have four variations
169:37 - of this app bar.
This bottom app bar, we have labeled as there's
169:42 - one with no floating action button.
It's just a bunch of icons to access the different
169:47 - actions and we have the floating action buttons
centered and you'll notice that there's some
169:55 - spacing here some intricate spacing there
that will help to accommodate for newer designs.
169:59 - You And then we also have the floating action
buttons center over the bottom app bar and
170:07 - those actions.
So what we'll do is in figma, have all the
170:11 - screenshots, what we're going to do is create
this one.
170:14 - And I'm going to challenge you to create these
two as it's very simple.
170:18 - We're going to create this one, get all the
spacing, right, and then I want you to, I'm
170:21 - going to pause the video, build these up by
myself, and then have you build those out,
170:25 - challenge yourself to understand the, the
specs here to build those out.
170:30 - And then we'll go over that.
And then we're going to build out the center
170:35 - cut variant together as this might be challenging.
But nothing is too challenging for us as we
170:42 - will be fig maestro's once this course is
complete.
170:45 - So let's get started with creating this variant
that the floating action buttons centered.
170:50 - So for those of you who don't know, this,
this is probably this is generally designed
170:53 - for Android as this is materials design system.
And the specs are set to 360.
170:59 - Width by 640.
But essentially, you don't have to worry about
171:02 - the actual size of the background, where you
do need to understand in your head have the
171:07 - mental model of responsiveness.
So it will adhere to this spacing and whatnot,
171:15 - as it is being expanded in regards to width
as you can see here.
171:22 - Just as an example, interactive example there.
So let's get started by specifying the height
171:27 - of the background for this center, this app
bar, so I'm going to go ahead and now that
171:36 - we have the height of this, the width of the
Android device specified, I can go ahead and
171:42 - change the height to 56.
Now that we have that set of 56, I'm going
171:48 - to change the background color.
One thing we need to do not forget is enable
171:54 - our material design system library.
And with that specified, go to my background
171:59 - colors and select on primary.
And we need our icons now.
172:04 - So if we go to our assets panel, we can either
search for them or type in hamburger, no results
172:11 - for hamburger, that's disappointing.
Go to our material design system, check out
172:16 - our icons, and we can look for them.
So there's the icon I need there, it's called
172:20 - reorder apparently, I can go ahead and click
on this frame, hit Command V and it will paste
172:26 - it, what we need to do is remove this fill
color, detach the style, select the style
172:31 - icon and apply the proper color, which is
content on primary.
172:37 - And then I'm going to hold on option A on
this once I have this icon selected, Option
172:42 - A will snap it to the left of the frame.
And then I'm going to apply the proper spacing,
172:47 - it's set to 24 there.
So I'm just going to move this over a couple
172:51 - times.
Now that spacing set 24 centered.
172:56 - And I can even just duplicate this icon to
slowly showcase the the usage of placeholders.
173:06 - As you can see, if I go ahead, set that set
to 16.
173:10 - I've not duplicated it again.
And I'll ensure the spacing is set to 16,
173:16 - again, between these two icons.
So we have those set to eight to the right,
173:25 - which we want to set to 16.
So I push that over.
173:29 - And we're good to go.
We have our icon grants, if you want to be
173:31 - particular by our icons, you can search for
them, we can look for them as well, in this
173:40 - library, I'm gonna pause this and find those
icons for you real quick.
173:45 - If you can't find icons, you can either search
and the material design icons tool for the
173:53 - icon.
So I downloaded all those individually as
173:55 - svgs just by clicking on them and then selecting
download, but I've already downloaded them
174:00 - for you and they're in this exercise file.
So we can actually in your folder, so if you
174:06 - go to the proper section or components, so
2.1, you will have that that will be accessible.
174:12 - And what we can do is open up our finder and
drag all three of these components onto the
174:18 - canvas.
And we can go ahead and add the appropriate
174:20 - components now.
But before I do that, I'm going to change
174:23 - those colors, remove that fill there, go to
selection colors, click on the style icon
174:28 - and set these to content on primary.
And we'll be good to go.
174:33 - So I can go ahead and actually replace these
two.
174:37 - So what I can do is individually drag these
into the canvas shift click on this.
174:42 - And you'll notice that with the famous smart
selection, I can hold down Option W and it'll
174:47 - snap this layer to the top and then I can
swap them which is very helpful.
174:52 - So I can so I don't have to do all that resizing
again there.
174:56 - The resizing is maintained.
I can go ahead and drag these two Under the
175:00 - canvas, and individually swap these as well,
I'm going to hit option w so that the spacing
175:08 - is not there, and they both align on that
axis.
175:12 - And then I'm going to switch them, then delete.
And just, I'm going to center this one Shift,
175:19 - click it, and then I'm going to swap those.
Now I have all the desired icons that are
175:24 - reflected here.
And we can go ahead and even pull in our neck
175:27 - our, our floating action button.
And we want the regular one, which is this
175:33 - one and it's bigger and the thumbnail, as
you can see, we can actually go ahead and
175:37 - drag this in onto our canvas.
And with that done, what we're going to want
175:44 - to do is make sure that it's snapped, and
it's horizontally centered here.
175:52 - So if we group it into our frame and, and
then what we're going to want to do is click
175:59 - clip, uncheck clip content, click this and
then hold down Option H.
176:04 - And that will center this because it was not
centered option h now centered.
176:08 - We have these icons properly implemented.
And we want these icons to have constraints
176:14 - that snap to the right and center vertically,
because they are on the right side of this
176:22 - bottom app bar.
And I'm going to set this to instead of left
176:25 - and top left and center it vertically on the
axis.
176:28 - So that way, when I resize this, the back
the elements are, are vertically staying proportional
176:34 - in size, with the background, so it's all
balanced, the icons are horizontally, proportionate,
176:45 - the sizing is there, and then vertically,
it will stay proportionate as well as it scales
176:52 - in height.
And then we have this one action button.
176:56 - The specs are all good, because we already
built this component.
176:58 - And since it's part of our library, we just
use the assets panel and drag it in build
177:02 - the component, which is super convenient.
And we know that it's a part of this component,
177:06 - because I'm actually clicking on the parent
layer, holding down Command Shift H and hiding
177:13 - everything.
So everything that's hiding is associated
177:15 - with the parent layer selected, which lets
me know that this is an icon that I want.
177:22 - I mean, the component I want and it's layered
accordingly.
177:27 - And again, these should all actually be icons.
So what I can do is copy these go to my material
177:37 - design system, I can paste them in my system
as needed.
177:43 - I'm and then I can just apply this generic
default color as the fill, so I can type in
177:57 - gray one.
If you needed to long story short, this should
178:01 - just be set to I could just set it to that.
And what I'm essentially trying to get at
178:08 - is making sure that these are all main components,
individually, publishing that to this library,
178:16 - can see I've added these three new icons click
publish, I'll organize them later.
178:22 - And we're going to actually swap those out.
With these, these components, I'm gonna show
178:27 - you a trick here.
So if I go ahead and type search, there's
178:31 - my search icon.
And if I hold down, up, if I go ahead and
178:37 - make all of these components, create multiple
components.
178:42 - And I go to my assets panel again, drag this
Hold OPTION command, it should swap it in
178:48 - place, but it's not.
So we'll go ahead and manually do that my
178:54 - apologies.
So just grabbing all these icons here.
179:02 - And then once we have everything, we'll go
ahead and drag these into the canvas and do
179:16 - the same exact operation.
Once these have all been swapped, we would
179:28 - be good to go.
Okay, so now that that's all done, just apply
179:36 - the proper colors again, set the content on
surface and we're good to go.
179:42 - So now we just need to name this layer accordingly.
It is it falls under the app bars category.
179:51 - So there's a couple of categories here at
bars, space slash space and then it falls
179:57 - under the bottom category of app bar.
And this is the app bar with a floating action
180:05 - button, the bottom app bar with a floating
action button that is centered.
180:10 - So once that is done, we are good to go, we
can even apply constraints here to the right.
180:17 - So that always stays centered.
Or actually, we want that to center horizontally.
180:20 - So it'll always stay center when we stretch
the width.
180:24 - So now we have the width stretching, what
we need to do is apply the constraints again
180:28 - to right and center vertically, and then left
and center vertically.
180:33 - So now, when this element selected, and it
stretches, it is stretching accordingly.
180:39 - And generally, the height won't stretch, since
we have those specs set perfectly or properly.
180:46 - And then when we adjust the width, everything
constraints accordingly, as if it were an
180:49 - app responsive layout.
So we can go ahead and make this a main component.
180:52 - That's good to go.
Now, I'm going to pause this video, and I
180:57 - challenge you to make these two components
here, it's actually really easy.
181:02 - Don't make them from scratch, just duplicate
this layer, and detach the instance and then
181:07 - start removing and adding what's necessary
for these two variants.
181:11 - And I'll be right back.
Okay, so now that I've created these, one,
181:15 - a couple things to point out is that you already
have this in the exercise file, so you can
181:20 - check these and get up to speed or and just
pay attention to the constraints.
181:25 - If you build it from scratch.
Notice that this floating action buttons constraints
181:29 - at the top and right so it'll move accordingly.
And then these are set to left and center
181:33 - vertically on this, all these icons on the
left here these actions so that they are constrained
181:40 - proportionally.
And then we have the bottom app bar with no
181:44 - floating action button.
And we'll want to ensure that the constraints
181:48 - are set properly.
So for example, if I click on this set of
181:51 - icons here, and set those to right and center,
those will scale accordingly, horizontally
182:01 - and vertically.
As well as this, this menu or hamburger menu
182:06 - actions.
So those are the two I hope you enjoyed building
182:10 - by yourself.
And last but not least, we'll go ahead and
182:13 - build out the bottom app bar with a floating
action button that has the center cut.
182:20 - So it has this round cut in the middle of
the background.
182:23 - And that's actually really easy to replicate,
all we have to do is create an ellipse that's
182:28 - set to 72 by 72.
Once that's once you specify those settings,
182:35 - ensure that it has the right background color,
so surfaces on background but not for the
182:42 - stroke whoops, so that for the background
itself of the fill.
182:46 - And then what I did was I just ensured that
I created a proper rectangle for the background
182:53 - color, which was set to primary.
And I set the proper dimensions to the width
182:57 - of an Android device and the proper height
of this bottom app bar.
183:01 - And what I did was I just grouped them.
And since they're grouped, and this is overlaid
183:05 - above, what we can do is utilize the subtract
selection.
183:10 - So when I click subtract, it will create the
proper spacing here.
183:14 - And the reason this ellipse is set to 72 is
because it provides that eight pixel padding
183:21 - all the way around this white space right
here, the swipe space is eight pixels all
183:26 - the way around.
And so when we go ahead and build this, now
183:31 - I have this background.
And I already have, what I did was I duplicated
183:38 - this component here and just attached it,
it almost has all the same icons, except for
183:45 - the heart, which will swap later.
Well, I can go ahead and do is remove the
183:51 - bill and actually add in a rectangle because
we have the background color applied to the
183:56 - frame.
But in this scenario, we can actually apply
183:57 - that subtract selection to the frame.
So what we're going to go ahead and do is
184:02 - add this into the parent layer.
So now it's a part of that frame, I can just
184:06 - go ahead and hit option A and W to snap option
s Whoops, I need to undo real quick, I need
184:15 - to select my background.
Center, I'm gonna leave all that center cut
184:21 - background.
And I'm gonna hold down Command left bracket
184:24 - and that'll push all the way down to the bottom
and hit option s and option W and that will
184:28 - snap it accordingly.
And I now have the achieved look as needed.
184:34 - And we can go ahead and double check that
set the pixels which it is the width is set
184:39 - to eight.
So that is awesome.
184:42 - We have the proper spacing set all the way
around.
184:45 - And that is how we create our center cut floating
action with the floating action button for
184:51 - our bottom app bar.
And just ensure that all of this is grouped
184:55 - properly, ensure that this spacing is correct.
And our can straights are applied properly.
185:02 - And you'll notice that that background now
needs to have constraints set properly.
185:08 - So if I go ahead and stretch this now, it
will maintain that spacing.
185:14 - But with that center cut, it will be much
easier for you to communicate in development,
185:19 - what is actually going on with that background.
So, that is something important to note, what
185:25 - we can do is, since this is a selection, we
can make sure that centered horizontally and
185:34 - slick that rectangle mixture that's stretches
to the left and right at all time.
185:38 - So now, when we go ahead and move this around,
it will actually move in alignment with the
185:46 - floating action button, which is awesome.
And now that that is done, we have just, all
185:53 - we need to do is name this properly.
So rename that fab center cut, and make that
186:00 - a main component.
And we're good to go folks, everything's scaling
186:03 - properly, we just need to add that heart icon,
we can go ahead and check that to see if we
186:08 - actually have that inner library, I don't.
But again, we can just use the material design
186:13 - tool, icons, tool, materials, icons tool.
And it's as simple as just typing in heart,
186:21 - I can go ahead and click that you already
have this in your finder accessible.
186:27 - So with that, I'm going to go open up figma,
open up my Finder.
186:32 - And we have that favorite, I'm going to add
this to my icon library could have my icons
186:40 - over here.
And I'll organize this later with that favorite,
186:45 - they're going to make that a main component,
publish.
186:52 - And actually, since I didn't, if I type in
favorite, actually already have this in the
186:58 - library, my apologies.
So I have the favorite icon.
187:00 - I'm gonna drag it in there, detach style,
add the new on surface, content style content
187:08 - on primary, drag this into my component here,
make sure it's vertically centered shift click
187:15 - and you smart selection to swap them quickly.
And I have now replicated this exact screenshot.
187:25 - So we can go ahead and now organize all these.
So with that said, I'm just going to organize
187:34 - all these components and pause this video.
organized everything I am good to go.
187:40 - I hope you enjoyed watching this video and
understanding constraints more and again,
187:45 - later on in the auto layout section of this
course, we will actually implement auto layout
187:50 - on the components as necessary.
And I'll show you how to define and figure
187:56 - that out.
We're gonna be talking about how to build
187:59 - out the top app bar component variants.
So we'll have two of these in to be specific.
188:06 - And if we go ahead and click on the exercise
file, here, we have the access to the documentation
188:11 - if you open that link, and once you open that
link, and you'll notice that I'm already there.
188:17 - And what this is used for is providing content
actions related to the current screen, and
188:22 - also a great moment for utilizing your branding,
screen titles navigation actions, which can
188:29 - then transform into a contextual action bar,
which is just another set of actions.
188:36 - Based on what you're interacting on.
In that screen.
188:40 - Pan, there's two types of AP bars we're going
to be creating.
188:43 - And we're not going to build these from scratch,
we're actually going to reference what we
188:45 - have already created, which are the bottom
app bar buttons.
188:48 - And we can go ahead and end this exercise
file.
188:52 - If you save it, you can go ahead and I publish
this already.
188:59 - And if you grab this exercise file, you will
have to enable the material design system
189:05 - library once more.
And once you have that enabled, we can go
189:10 - ahead and just search for app bars.
And we have all the app bars.
189:16 - So we can go ahead and be a little more specific
about what type of app bar we need.
189:20 - We clearly need the bottom app bar with no
floating action buttons.
189:25 - And now that we have this, we have all the
proper color styles as this puts us ahead
189:30 - I'm just going to detach this style.
I've detached this instance My apologies I
189:34 - attached it from the main component.
And what we have is a great starting point.
189:40 - And we have the page title here.
And we got all the specs.
189:45 - So this menu is set at 24 pixels in the left,
the height of this is set to 56.
189:51 - And you'll notice that there's also this little
top portion what this is referencing is the
189:57 - system UI bar and We won't need to design
for that that is solely a placeholder in this
190:03 - screenshot.
So when we when engineers actually build this
190:07 - out, these components will just be snapped
to the top, just below the system UI bar.
190:15 - So ignore that, which is why the specs are
specified here 256, and not taking into consideration
190:21 - the height of the system, UI bar, just for
some context there.
190:25 - And we got three icons here, got that more
vertical icon, the search icon, this Share
190:31 - icon, I believe it is the title, this the
page title, and then we got the Menu icon.
190:37 - So I can go ahead and delete that fourth icon
because we're not going to need it.
190:42 - And I'm going to rename this.
So I don't get confused, because this is another
190:46 - set of app bars.
But instead of being on the bottom, it's on
190:48 - the top, and we're creating the regular, we're
just going to label this regular, as we already
190:55 - know, this is the regular top app bar.
And with that being said, we need to go ahead
191:01 - and grab the prop the page style, understand
what textile that's using, and we're going
191:10 - to just type in page obscures me, page title,
add the proper style.
191:17 - So if I go ahead and select headers, we have
variation of headers and subtitles.
191:23 - And we probably going to have to reference
the documentation, I'm gonna go ahead and
191:27 - click on the fill, apply the on primary content
color, ensure that the resizing is set to
191:34 - auto width there, and vertically align that
to the canvas, I don't have the right color,
191:41 - style, or font style.
So I'm going to reference the documentation
191:43 - to find that exact font size of the typography
here to gain a Joe, get a general idea of
191:51 - what that is, you'll notice if you pay close
attention is that this type Pog Rafi is smaller.
191:57 - And in this extended top app bar variant,
it is a little bigger.
192:02 - So with that being said, we need to do some
snooping.
192:06 - And there we have it, we have our category,
the font size is set to h six in that scenario.
192:15 - We have the typography referenced again, stating
that it's set to h six, h six right there,
192:22 - there's a bunch of examples.
It's again, giving us the example of the H
192:27 - six.
So that is very important.
192:30 - Now that we have that we can go ahead and
just we have this as a color style.
192:35 - So I can go ahead and just select that, go
to our textiles and select h six.
192:41 - So we have our h6 here.
And we'll go ahead and center this.
192:45 - And this is set to 30 pixels to the left of
this menu bar icon.
192:49 - So now that's set to 32.
And we have it set to 16.
192:58 - On the left, I believe it's set to 24 currently,
so I'm going to shift click on the text and
193:02 - the I'm going to click on this shift click
on the menu icon, move this over one, I have
193:07 - my nudge amount and my preferences set to
eight on the small nudge and one on the big
193:12 - nudge.
So I can just quickly move things by increments
193:15 - of eight efficient effectively, as those are
the measurement principles of this material
193:20 - design system.
So now I have that page title set right here.
193:25 - And I'm just going to focus on the alignment
here, make sure that padding to the right
193:28 - set to 16.
And the spacing between the icons is 24, which
193:32 - it is.
So if I go ahead and check that set to 24.
193:38 - And I select these it's set to 16.
On the right, the padding, the constraints
193:44 - are good to go, I can go ahead and apply the
proper constraints to this typography by setting
193:49 - the vertical axis to center.
And this icon already has left and center.
193:54 - So we're good to go.
So if I were to scale this, it would all maintain
193:57 - its position or as the height increases, it
would maintain that position on the y axis.
194:03 - So we have this variant built out.
The only thing missing are the proper icons,
194:08 - which you can go ahead and add yourself.
I'm going to pause this and add them.
194:14 - So I've identified all the proper icons.
And I was missing one icon it was the share
194:19 - icon which falls under the actions category.
So I just went to the material design icons
194:23 - tool, typed in share and I found it and I
clicked on it saved it as an SVG, I saved
194:28 - you that step by just giving that to you in
the exercise files.
194:31 - So you can drag that into your canvas and
figma publish it to your material design system
194:35 - library, which is exactly what I did.
I just published it, added it here made it
194:39 - a main component, published it and once I
published it i was i since I have that library
194:44 - enabled in this exercise file, I was able
to pull it from the assets panel here, and
194:48 - then I just swapped those accordingly.
So now that all those specs are good to go,
194:53 - you could double check the spacing and whatnot
if you needed to and ensure the constraints
194:58 - are set properly.
And now we can go ahead and just check our
195:03 - layer, and it's labeled correctly.
And I'm going to make this a main component.
195:10 - So now that this is a whoops, I'm going to
select the top parent frame, and make that
195:15 - a main component, we now have our main component.
Once that's there, we can go ahead and even
195:22 - duplicate this.
And with that duplicated, I'm gonna detach
195:27 - it.
And we're going to specify the height of this
195:30 - element to be set to 128.
But before I do that, I'm gonna intentionally
195:35 - set some constraints.
So the constraints are going to be applied
195:39 - to all the icons.
So I'm going to Command click on all these
195:41 - icons, which allows you to click these individually
and maintain selection of the previous icon.
195:48 - So I have all these selected, and I'm going
to set this to top, because I don't want these
195:52 - to move when I set the height.
And what I'm gonna do is set this to bottom,
195:58 - and I'm gonna shift click on this constraint
to remove it and make sure that text is set
196:04 - to bottom.
So what's going to happen is that, when I
196:06 - change the height of this element, the icons
stick to the top, and the text will stick
196:12 - to the bottom.
So I'm going to change the height to 128.
196:17 - And it did exactly that.
So now that that has been created, what I
196:21 - want to do is ensure that the baseline spacing
is set accordingly.
196:26 - And you can see that they're specifying the
baseline of the text, which is different from
196:30 - the bounding box of the text, it's set to
28 pixels.
196:33 - And we can easily do that by hitting shift
our adding a red line to the baseline of the
196:38 - typography.
And holding, we can hold down Option here,
196:42 - we can click the text, it's set to 16 here,
but if we go ahead and create a textbox will
196:50 - notice that the height of this is set to 21.
So what we also need to ensure is that we're
196:57 - using the right text style for this extended
top app bar.
197:01 - So how do we do that, let's go ahead and reference
our documentation on the top app bar.
197:06 - And you'll notice that the typography just
reference that this was an H six.
197:13 - If we scroll down some more, this headline
is an H six.
197:19 - But what about the extended top app bar, it's
different, it's a different font.
197:26 - So we can go ahead and Google top app bar
text size.
197:35 - So we can go ahead and continue to figure
out what the size of the typography is by
197:47 - just Google searching, if you ever confused
but if not actually going to open that page
197:53 - up again, once that's open, we might want
to be able to access the developer guidelines
197:59 - and kind of snoop around there.
And it'll give us access to the code.
198:07 - But what we want is access to this here.
And understanding the topography.
198:13 - So the text appearance, and we're just reading
some properties here.
198:22 - And what we really want to do is understand
the textile being applied.
198:28 - So I'm gonna pause this and look for that
value.
198:32 - So I was not able to identify the actual title
by by snooping through this typography, or
198:40 - at least the print the code here, don't get
confused.
198:44 - Again, this practice I just went through this
little exercise of searching for a specific
198:49 - attribute is a common practice, I'd recommend
for you to start understanding because it
198:55 - will really help you try to dissect and understand
how to identify certain elements of a design
199:06 - by going through different sets of documentation,
which is a great skill to have, and will improve
199:12 - your implementation of design as you can better
articulate it to developers, as well as you
199:18 - continue to dive deeper into these types of
Google searches and trying to understand how
199:23 - it's implemented.
So I kind of just referenced the developer
199:27 - documentation and access that component page
where it talks about top app bars.
199:32 - And I'm kind of looking through the structure
of this code.
199:34 - So androids written in this format called
XML.
199:37 - That's the language in which they write their
they write their code, or for the UI implementing
199:46 - implementing their UI.
And I'm looking at the prominent top app bar.
199:52 - And with that prominent top app bar, I'm going
and scrolling down and I found a set of properties
200:00 - that were communicated.
And it talks about the title attributes that
200:07 - they use.
So I went ahead and was looking for the top
200:14 - app bar, anything related to the top app bar
attribute to see if I can then identify the
200:22 - size.
So there's a bunch of other settings here
200:25 - as well, that are communicated.
But specifically, we're looking for the type
200:30 - title attributes.
So that utilizes a title.
200:33 - And the material toolbar title is set to an
age six, which we've specified.
200:37 - And then the material subtitle is set to subtitle
one, and they also have a collapse title variant.
200:47 - And then they also have an expanded title,
as you can see here, but we're gonna go ahead
200:54 - and just maintain the title we currently have.
Again, if you know what that style is, do,
201:02 - please do go ahead and refine that.
So I'm going to go ahead and just I'm going
201:07 - to change that to subtitle since that is the
one I was trying to identify.
201:13 - And if we go ahead and ensure that the baseline
set to 28, we should be good to go.
201:17 - So I'm gonna increase this rectangle to 28
pixels, push this slightly up, so the baseline
201:23 - is aligned now.
So when I do my red lines, the baseline of
201:26 - the topography is now 28 pixels away from
the bottom, which is what is specified in
201:34 - the extended top app bar, right here, 28 pixels,
this green horizontal line.
201:39 - So now we are good to go.
And all of the spacing is correct already
201:44 - on the icons above.
And we just set constraints so that it would
201:50 - stay that way.
So with that page title set there, I'm going
201:53 - to make sure that the constraint set to left
as well.
201:56 - So when we type in a new title, we're good
to go.
201:59 - And with that said, I'm just going to ensure
that my spacing is set to on the left is set
202:06 - accordingly.
So it's set to 72.
202:09 - We're good to go.
And we're going to go ahead and name this
202:13 - extended, because it's our extended top app
bar variant.
202:22 - And now that all the constraints are set,
and we're good to go long, I'm going to go
202:26 - ahead and make this a main component.
And you can go ahead and organize this in
202:32 - this frame.
And that is how we build out the top app our
202:37 - components.
Today, we're going to be making some backdrop
202:42 - components.
So we'll be building out the backdrop components
202:46 - over viewing them first building them out
applying the proper constraints, and really
202:51 - going to need to understand and consume these
components first.
202:54 - So if we go ahead and click on the backdrop
documentation there, that'll open up in your
202:59 - default browser.
And a backdrop appears behind all other surfaces
203:03 - in an app displaying contextual and actionable
content.
203:08 - And one thing no currently, as of the date
of this recording, September 10 2020, Thursday,
203:15 - this is currently in beta.
Therefore, for developers referencing this.
203:20 - Currently, there is no status around when
this will be developed for the following platforms
203:25 - Android, iOS web and the flutter framework.
So that is important to note.
203:33 - And also, the backdrop is composed of two
surfaces, right, so we have the back layer,
203:40 - which is the the blue looking layer there,
right here, this top bar element, which is
203:45 - what essentially looks like and then the front
layer, which is that has this white background
203:50 - and utilizes a little bit of elevation, whether
you can see it or not.
203:53 - And the back layer displays actions and context
and these control and inform the front layers
203:59 - content.
So whatever is on the background dictates
204:03 - the front layers content.
And that is important to note there.
204:09 - And it also utilizes an optional divider under
the subtitle right there as we continue to
204:14 - analyze this backdrop component.
And here's the anatomy breakdown of this backdrop
204:18 - component.
It consists of a back layer, the front layer,
204:23 - and an optional sub header and divider there
as you can see, and either the back layer
204:28 - or the front layer can be active at a time.
So only one thing can be active, either the
204:34 - back layer or the front layer.
And when the back layer is active, this this
204:38 - front layer drops down, utilizing motion.
So here you can see that it's a fixed area,
204:45 - or at least, that's an optional way to utilize
the sub header as a fixed area with content
204:50 - to scroll through and whatnot.
And I highly recommend going through the rest
204:54 - of this and reading it and understanding the
behavior.
204:56 - Right here.
You can see that the front layer, as the back
205:02 - layer just lies on the surface and the front
layer, utilize elevation, it's one dip on
205:08 - the Z index.
one pixel on the Z index is also another way
205:12 - to reference it on the web.
So that is important to note for our front
205:16 - layer there.
And I've already grabbed these screenshots
205:19 - for what, for designing the specs here, and
you'll notice that it utilizes some list items
205:25 - in this example, which we'll go ahead and
kind of build.
205:33 - So what we can do is go into figma here, what
these screenshots reference, we'll, we'll
205:39 - go ahead and create this generic example.
Right, so we have is, we can search for app
205:46 - bar in our system, make sure your library
is enabled the material design system library,
205:51 - and then you can search for app bar, and we
have all these variants, right? So the variant
205:56 - we're gonna want to use is more than likely
this one with page title, and you see that
206:02 - it has these other actions as well.
And what I wanted to actually do is place
206:06 - this on a parent frame, and that parent frame
is going to be the utilize the dimensions
206:12 - of the Android phone.
So and I'm going to rename this Android phone.
206:18 - So I'm gonna go ahead and drag this in here
and snap this to the top and left of the parent
206:22 - frame.
So great, we have what we need to start.
206:27 - And it also indicates that the background
set to blue still, so what we can do is add
206:32 - a primary background color to represent that
in our example.
206:39 - And Android, Android phone backdrop, I'm just
going to rename that real quick to be precise.
206:47 - And what we can do is that this backdrop appears
all the way to the top of this, this frame
206:54 - here.
So I'm going to go ahead and add a ruler here
206:58 - in figma.
that aligns with this selection here.
207:05 - Get that pixel perfect there.
And now with that ruler specified, I can go
207:10 - ahead and create another frame.
And in this frame, is going to set the width
207:16 - to I'm going to set this to surfaces surface,
the background color and the width to span
207:23 - the entire body of the of the screen, which
is 360 dips, I'm going to snap this to the
207:30 - top.
And I'm gonna go ahead and select independent
207:32 - corners and ensure that the top and left are
set to 16 pixels rounded.
207:37 - So we're achieving that same look here, as
you can see, right there, and it utilizes
207:42 - a subtitle that has a baseline of 32 dips
from from the top of the front layer.
207:53 - So I'm going to label this layer, this frame
front layer, because that is the background
207:57 - and there's going to be some text that lives
within it.
207:59 - And I'm going to ensure I have the proper
textile specified and that is sub title.
208:06 - And I'm gonna ensure that the resizing set
to auto width.
208:09 - To keep that clear and concise, I can snap
that to the top and left at 16 pixels 16 dips
208:15 - to the left.
And I can push this down.
208:18 - And what I want to do is ensure that the baseline
is set to 32 digits right there.
208:23 - So I can go ahead and do is grab, whoops,
grab a rectangle, grab a rectangle, specify
208:33 - 32 tips there.
And then I'm going to push this content up
208:40 - so that it aligns the baselines aligned.
And I can justify that double check with a
208:44 - ruler.
And we are good to go.
208:46 - That baseline is there.
And one thing this optionally utilizes is
208:50 - a divider.
So we'll go ahead and add that from the get
208:52 - go.
I'm gonna go ahead and searched for divider
208:56 - in my assets.
And then I can go ahead and pull this divider
209:00 - in from my system.
And the divider is approximately 12 pixels
209:06 - 12 dips down from the subtitle.
And what I'm going to want to do is I'm holding
209:15 - option command and shrinking this so that
it's set to has a padding of 16 dips on the
209:21 - left and right of this other sub header which
is reflective in in our examples up above,
209:29 - as you can see here.
it aligns right there, that divider.
209:36 - So that's great that that is consistent.
So now we have that and our textiles attached.
209:42 - And everything looks good.
We're good to go.
209:46 - We can do now is just specify this as our
bare bones layout because designers will then
209:56 - go ahead and add in the actual The items necessary
to this component.
210:03 - So we have this this front layer here, if
I go ahead and shrink this front layer expanded,
210:14 - and we now have a canvas for designer start
adding content onto.
210:19 - So that's super important to note.
So this in and of itself could be its very
210:24 - own component, what I'm going to do is ensure
that this color style specified to active
210:34 - with our high emphasis also known as high
emphasis, and ensure it has the proper elevation
210:39 - set to one dip.
So we can slightly see that elevation being
210:43 - utilized now.
And with this, I'm going to go ahead and make
210:47 - this a main component as this is one variation
that designers could use this barebones layout,
210:56 - copy it, and then start adding their own elements
on top of it, I can go ahead and specify the
211:02 - constraints because right now when I stretch
it, this doesn't necessarily stick properly,
211:06 - it's always nice to specify that.
So I got to set the constraints left and right,
211:11 - so now when I stretch this, it will stretch
properly, the divider that is, so now we have
211:16 - our front layer expanded, and you can kind
of see the elevation being utilized here.
211:22 - One thing that might be kind of confusing
at first, creating this front layer that's
211:27 - expanded is that it's a blank canvas, right,
so when a designer goes in and uses it, I'm
211:35 - gonna align this here.
So when a designer goes and uses this, it
211:41 - might be kind of misleading at first.
So because what a designer is going to need
211:48 - to do is copy this.
Whoops, I'm going to kind of a swap, I put
211:58 - the instance here.
But that's okay.
212:04 - We can do is go ahead and move that master
now to this frame, front layer expanded.
212:12 - So that's, so with that expanded, we can go
ahead and create the the concealed variant.
212:20 - And what I was trying to get at first is designers
will copy that, copy this subtitle, and go
212:26 - ahead and add other elements onto it.
So for example, the list items we created
212:30 - in the last video, I can go ahead, maybe I
want to add into this component, right, I
212:35 - just need to ensure the proper spacing is
specified.
212:39 - So what I want to do is, I'm going to have
to wrap this into a frame, right.
212:44 - So it's going to be my front front layer,
expanded with content, so you're gonna have
212:50 - to wrap it into a frame, ensure that everything
is aligning accordingly.
212:57 - And I'm going to stretch this out to span
the full width of this.
213:00 - And then what you can do is, then just continue
to duplicate these items as needed.
213:07 - So that's great, and ensure that clip content
is specified.
213:14 - And with clip content specified, you now have
an example with content, just make sure that
213:20 - the proper padding is set to the top there.
So we can go ahead and check that to see what
213:25 - that padding specified to right here from
this list to the top of that divider.
213:31 - And what we can do is always reference our
specs.
213:35 - So with our specs referenced, it looks like
there's some spacing here.
213:41 - It's not necessarily specified.
But we can go ahead and eyeball it roughly
213:46 - looks like 24 pixels there.
And with that, we can go ahead and make sure
213:53 - that's set to 24, which it almost is entirely,
I will just need to move this content down
214:00 - one more pixel.
And we should be good to go.
214:04 - There.
And we have our example.
214:07 - So as you can see, if we look at this frame,
it wraps the front layer, which is the background
214:15 - with all these list elements added on top
of it.
214:18 - As there may be several scenarios and how
you want to use the the expanded front layer,
214:26 - you may want to add other type of content
onto this expanded front layer on this backdrop.
214:32 - So we'll give you the bare bones layout and
give you the freedom to add stuff on top of
214:37 - it.
And you can just do that by grouping and as
214:39 - a frame of that content.
And we'll go ahead and go check out the the
214:45 - concealed version and the concealed version
refers to this, this front layer now being
214:52 - minimized, which is what I mean by concealed
Material Design calls it concealed and the
214:59 - whole This is set to, let's see 48.
So the height set to 48, we can go ahead and
215:11 - specify that here and snap that to the bottom,
we now have that set to 48.
215:18 - And I'm still using the same version I just
stripped it.
215:21 - So I'm going to do is detach this and label
this front layer concealed.
215:31 - Remove that top constraint, set that to bottom
left and right.
215:35 - So that stretches respectively.
And there won't be a need for divider in this
215:39 - in this version, what there will need to be
is an action, which is that carrot and I have
215:44 - one of those here, the up arrow, up keyboard
arrow, so I'm going to select that paste it
215:52 - and sure that that is centered here centered.
And we have the padding set to 16 dips on
215:58 - the right, so we're good to go, we now have
our concealed front layer variant, I'm gonna
216:03 - go ahead and make that a main component.
And duplicate this, grab the main component
216:09 - and drag it into our our canvas there.
And it's still utilizing the the one dip elevation.
216:18 - So that's important to note.
And we can even throw it in as it's, as you
216:24 - can see, it's now an example here.
And what we haven't specified here is the
216:30 - content for this.
So I'm just renaming that.
216:36 - And essentially what you could do is create
add whatever content you need here.
216:42 - So when this is concealed, there, the backdrop,
the back layers being utilized.
216:47 - So if we go ahead and pay attention to Material
Design documentation again.
216:52 - And we look at the anatomy of this backdrop,
it has that back layer, right.
216:57 - And the backdrop has a has the original actions.
And the front layer has actions respective
217:07 - to the actions on this back layer.
So we're going to we can go ahead and make
217:12 - examples here.
So we can go ahead and create these list items
217:18 - I can, I'm going to go ahead and pull.
I'm going to go ahead and change.
217:24 - Let's see this to app name.
And I'm going to hide these icons here.
217:33 - And I can even go ahead and swap out this
icon to an X.
217:39 - So I could find that exit icon.
Or better yet, it's probably labeled close.
217:47 - Here we have that close icon.
And we want to double check to see if we already
217:56 - have that here, which we do.
So it's actually called clear.
218:00 - So I'm going to look for clear here, my material
design library.
218:04 - And I'm going to drag this here and hold down
Option command and hover over this icon and
218:09 - it'll swap it.
And I'll change that to the the active on
218:17 - primary color, since this is on the primary
surface there.
218:21 - And we're good to go to remove this hidden
or turned off filler.
218:29 - So we have that specified.
And what we want to go ahead and do now is
218:34 - we can bring in some some list items here,
we can bring in the list item that utilizes
218:42 - a icon, this one line variant, right.
And what we can even do is remove the background,
218:55 - we can change the color of the text to a content
on primary surface.
219:00 - And now we have the ability to to we have
the ability now to make push this content
219:11 - up a couple.
So now this directly snaps to the top app
219:14 - bar.
And we have the ability to swap the icons
219:16 - now.
So instead of using that placeholder, we can
219:18 - use for example male, I can go ahead and swap
that icon in here.
219:23 - Add the proper color to on primary.
And as you can see we have our items now.
219:34 - And I want to actually make sure that that
state is set to inactive My apologies.
219:40 - So that would be the the it should be utilizing
the medium emphasis which isn't a color style
219:48 - right now which we can go ahead and specify
in our library.
219:52 - So if we if we detach the style and hit 68
there, we now have our media emphasis color
220:00 - style.
So if I go ahead and specify that content
220:06 - on primary, medium emphasis that could be
our new color style there, which would be
220:15 - associated with the others.
And long story short, now that we have this
220:19 - created, we need to change the height of this
list item to 40.
220:24 - So you're noticing how I'm starting to combine
elements in our design system to to be utilized
220:32 - on top of other components such as these backdrops,
which are like, which you can think of as
220:37 - these base layers, right.
So I'm gonna go ahead and just continue to
220:40 - duplicate this and we have now replicated
our, our backdrop with the concealed front
220:49 - layer.
So this front layer is concealed there, we
220:53 - can even go ahead and make this a component
as well.
220:56 - Because more often than not, designers may
be using this and if we make this a component,
221:03 - designers can go ahead and just swap these
elements as needed and rename the text I these
221:08 - list items and whatnot, as mess deem necessary.
So or we can give them the we can also offer
221:16 - we can offer both variants essentially right
so we have the, the front layer conceal which
221:20 - they can just drag and drop onto onto a design
as needed or we can give them this whole this
221:27 - whole example which I'm going to go ahead
and create.
221:31 - So I'm going to I'm going to rename this so
concealed, concealed.
221:40 - I'm going to label this as concealed and then
this is just the front layer concealed.
221:46 - So now that that is good to go, it is a master
component, and we are good to go and that
221:52 - is how you build out the backdrop variants
for material design.
221:58 - Today we're going to be building out banner
components.
222:04 - And the only further ado, the overviews is
going to be discussing how to use these components
222:09 - by checking out the documentation.
And then we'll be creating them ourselves,
222:13 - applying the proper naming convention, and
even adding the proper constraints and maybe
222:18 - a little bit of auto layout, but will actually
save that auto layout and in depth video on
222:22 - auto layout, for the next section of the course
will recover auto layout for all the components
222:26 - we've created in this section of the course.
But with constraints, the only difference
222:30 - will be that the components already made and
we'll be implementing auto layout on them
222:34 - in the next section of the course.
So without any further ado, let's check out
222:37 - this banner documentation resource and once
that opens in your browser, go ahead and click
222:42 - on that will check box doesn't show up again
for this website, as you'll be checking it
222:47 - out frequently.
And here you can see that our got I got this
222:52 - little too zoomed in.
Whoops.
222:54 - And with that, banners display opponent message
and related optional actions.
223:00 - So here we have that prominent prominent message
appearing at the top and then we have related
223:05 - optional actions to take based upon what is
said in that prominent message.
223:10 - And you can go ahead and understand the usage
here.
223:13 - And it also discusses similar similar components,
and based on the priority of the message being
223:21 - conveyed conveyed, you can utilize a certain
type of components.
223:25 - So for banners, typically when there is a
prominent or our medium level type of priority
223:32 - based on the level of severity, if that priority
is prominent or medium, it is typically you
223:40 - typically use a banner, and they will banners
remain until dismiss by the user or if the
223:46 - state that caused the banner is resolved.
And there's some differences described here
223:54 - with snack bars, and then the dialog component
as well.
223:57 - And banner displays importance.
Importance succinct message and provides actions
224:02 - for users to address or dismiss that banner
requires a user action to be dismissed.
224:09 - And they should be displayed at the top of
the screen below the top app bar.
224:13 - And they are persistent and non modal, allowing
the user to either ignore them or interact
224:18 - with them at any time, only one banner should
be shown at the time.
224:21 - Here are some principles and the anatomy of
one of the most complex banner.
224:27 - As you can see, the most complex banner has
a container with a supporting illustration,
224:35 - which you can also reference as the leading
icon or an informative icon.
224:39 - Those are also common terms used.
So the supporting illustration.
224:45 - And then here we have that container in encapsulating
all of these elements in this design, and
224:53 - then we have the text, of course.
And then we have the buttons are optional,
224:57 - I mean our supporting actions.
And here are some examples of how to use it
225:03 - and how to not use it, only one banner should
be shown at a time, any banner appears above
225:08 - content and below that bar.
So here's the content right here below those
225:11 - images, the collection of those images.
And then here we have the top app bar, and
225:15 - it fits right in between.
So you can always you can think of it as always
225:19 - below the top app bar is where it would appear.
And here's some more usages I recommend you
225:24 - going through to really understand the placement
and behavior is that is very important.
225:30 - And then I have these screenshots on the specs
on how to implement this.
225:33 - And we'll go ahead and reference the textile
that we need.
225:37 - And the textile we need, as you can see here
is the body to textile.
225:42 - And we'll go ahead and go into figma now and
start building these out.
225:45 - And the first thing we're going to want to
do is enable our material design system.
225:48 - So to start pulling in certain components
that we've already built, so we built this
225:53 - text button.
And with that said, let's go ahead and build
225:59 - that.
So we have a frame.
226:00 - And in this exercise file, I've already created
the the naming convention on how we want to
226:05 - categorize these banners.
As you can see, there are mobile and desktop
226:08 - berets.
So we'll go ahead and create all these, I'm
226:11 - going to go ahead and create a, a one or two
in each section.
226:15 - And then I'll pause the video and have you
test your skills and build them out by yourself
226:20 - in a systematized manner.
So utilizing as many of the assets we've created
226:24 - already in our material design system here.
So without further ado, let's get started.
226:31 - So we have this mobile variant, right, so
we have the text and the action inline, meaning
226:35 - that they're both on the same level.
They're not stacked on top of each other.
226:39 - They're horizontally in line, right, they're
both on the same axis, the x axis was just
226:46 - horizontal.
And what that said, we can go ahead and just
226:49 - create a frame and I'm going to rename this
and since I've copied that naming convention
226:52 - in that, in that file, my layer will now be
labeled it live under the mobile category
226:59 - as a one line list, which has a text and action,
and it is in line, it's not stacked.
227:07 - This is stacked.
But this is a two line example.
227:10 - As you can see with the tech stack, the text
is above those actions.
227:15 - And what we're going to need first off is
our text button.
227:19 - So we just type in text, we can find that
text button there.
227:22 - And our assets panel, we can drag that in
here, we can go ahead and re name this to
227:26 - action.
And you'll notice that we already have auto
227:28 - layout applied to this button.
So we're not to manually resize it, which
227:30 - is very convenient.
And we'll leave that off to the side for now.
227:34 - And let's justify the width here, set that
to 360, which adheres to mobile principles
227:40 - for Android as material design was created
for Android in the beginning.
227:45 - So with that specified, let's go ahead and
specify the height to fit four pixels.
227:49 - Now that we have the height specified, one
thing we will also need later on is the divider.
227:54 - So if I go in my assets panel and look for
the divider that we've already created, I
227:57 - can drag that in here, and we already have
the width specified, and it has the proper
228:00 - color style that we need, I can just remove,
I'm gonna go to the main component real quick
228:03 - and detach this unnecessary turned off textile,
fill style, fill color.
228:10 - And I'm gonna go ahead and publish this.
And we'll be good to go.
228:16 - Add real variance.
So, so now that that's published, and it's
228:28 - successfully published, I can go ahead and
update the component here, as you can see,
228:32 - it's now updated, doesn't contain that, that
background layer that fill, because it's unnecessary,
228:38 - we utilize a stroke here.
And we can just go ahead and as you if you
228:42 - pay attention closely to the designs, you
may or may not need this banner, to have a
228:47 - divider, as you can see, there's a divider
being communicated right there between the
228:52 - content and the top that bar right there.
So just keep that in mind.
228:56 - And what we can do is we can offer this, and
then designers can copy this component and
229:01 - then turn it off if if need be.
So we can offer that.
229:05 - So I'm gonna, that's the first thing I'm going
to add to all of them, I've just snapped that
229:08 - to the bottom of this frame, by holding down
Command S, option s skews me, since that is
229:14 - a child element of the parent frame, I can
easily snap this as needed to the top or the
229:20 - bottom.
So now that I have that set there, I'm gonna
229:21 - set the constraints are bottom left and right.
So that way, if this were to ever be stretched,
229:26 - that divider will will stretch with.
But we have this defined here, and we won't
229:31 - really need to, we won't need to modify that
as we are developing the system for Android
229:37 - in this scenario.
So with that said, I'm gonna go ahead and
229:39 - drag in this button here snapped to the left,
and it's eight pixels from the right and it
229:45 - is centered vertically on the y axis here.
So that is set accordingly.
229:51 - And then I'm going to add the constraint to
the right of the parent frame to the constraint
229:56 - will stick to the right of its parent frame
and then it will be centered vertically.
230:00 - So whenever it is stretched, it will always
stay center in relation to the height either
230:04 - decreasing or increasing.
And then we'll go ahead and specify the text.
230:10 - So the text again is using, we're going to
add color style here first text and iconography
230:15 - and use the high emphasis text color style.
And then we'll go ahead and specify body to
230:20 - for this typography.
And then if we just type in one line, just
230:25 - mimic what is written there, and that spec
one line string with one action websi can't
230:31 - type here with one action, we should be good
to go.
230:35 - So with that specified, I'm gonna go ahead
and center this here, snap this to the left
230:39 - with my shortcut key option A and option B
to center vertically.
230:43 - And I'm gonna move this over to 16.
So the padding is set to 16 dips, right there,
230:50 - and that is center.
And with that centered, our content is good
230:53 - to go.
And you can see that material design specifies
230:57 - that the textbox is specifically 30 has a
spacing of 36 pixels right here.
231:03 - So what we can do is we right now it's set
to 48.
231:07 - From the text button itself, that so we can
go ahead and hold down Command and stretch
231:12 - out that text box to be set to so the spacing
is set to 36.
231:18 - So now it's set to 36.
Here, the spacing we're going to need to do
231:21 - to ensure that that is fixed is that we can
go ahead with constraints and set this to
231:27 - left and right.
So those constraints are maintained if this
231:29 - were to ever be stretched, and we don't necessarily
have to worry about that right now.
231:34 - I'm going to set the typography also to be
centered vertically on the y axis so that
231:39 - is in alignment with the action that is in
line to the right of it.
231:45 - So if designers ever have a need for expanding
this, that won't mess up their designs.
231:52 - So with that specify we are good to go.
I'm not showing you autolab because I will
231:56 - show you that in the next section of the course,
that will that will be its own focus, where
232:00 - you will master that I really want you to
understand the concepts of constraints in
232:04 - this section of the course.
And just the the general construction of these
232:08 - components, as well as adding autolayout into
the mix can can be very taxing confusing,
232:13 - on top of all of this dense knowledge you're
learning currently.
232:16 - So with this, all with the typography all
specified and attached to their proper color
232:22 - styles and everything utilizing instances,
we now need to go into the background of this
232:27 - frame and specify the color.
So the color is utilizing is the surface background,
232:33 - we can specify that as surface surface or
surface background there was that that to
232:39 - surface surface surfaces surface, there we
go, as that as the surface that is overlaid
232:45 - on top of the background, it's not the initial
background for the entire page, it's just
232:51 - the the surface for that for that banner component.
So now that we've created this, we're going
232:58 - to go ahead and duplicate it.
And then we're gonna make this a component.
233:04 - So a main component, now we have our main
component, we have our first parent created.
233:09 - And let's go ahead and build out the this
two line variant with actions.
233:16 - So one thing to note is that we have to probably
modify the line height of our text elements,
233:27 - because in the beginning when I created these
textiles in our system, which I did intentionally
233:32 - for us to modify, and pay attention to, to
the line height of our typography, to ensure
233:38 - that it's done correctly, because if it's
not done correctly, the spacing of our typography
233:43 - will be off in in components that are to line
variants and whatnot.
233:47 - So let's go ahead and create when I move this
screenshot over, create a new one.
233:54 - So I'm going to go ahead and copy this, that
naming convention.
234:00 - And when it grab, I'm going to create this
from scratch a new frame, set to a width of
234:07 - 360 and a height of 112.
Then I'm gonna paste in the naming convention,
234:14 - we have the mobile version of the two line
with text and actions, banner variant, which
234:21 - is great.
And now this uses a textile body to but I'm
234:27 - going to go ahead and copy this, this action
button, paste it and hold down Option s, option
234:34 - D, and that'll snap to the bottom and right
and then move that up until the padding is
234:40 - set to eight on the bottom.
And right.
234:42 - Now I'm going to duplicate this and ensure
that padding is set to eight there to the
234:47 - right from that element.
And we have both of these elements here sticking
234:52 - to the right.
And we want them to stick to the bottom as
234:55 - well of this component.
So if it were ever to be stretched out, it
234:59 - would stick to that bottom and right spacing
respectively respective of its parent, which
235:08 - is the background.
And while we're at it, let's go ahead and
235:11 - change the fill to surfaces surface that background
color.
235:16 - And now we got to go in and just justify the
proper spacing for how our typography will
235:21 - fit.
So I'm gonna create this text box here, select
235:25 - the body to color style.
And then I'm going to just kind of mimic what
235:30 - is in.
In this component, the text in that component.
235:36 - One to two lines is favorable on mobile, and
tablet.
235:43 - Okay, great.
So we have the text we need.
235:46 - Now we need to kind of specify a couple of
things.
235:52 - So what we need to specify is that the baseline
of the first line of text in this two line
235:56 - text is set to 36 dips, and this padding left
is set to 16.
236:04 - As well as the padding on the right is set
to we can say 16 here in this scenario.
236:11 - So let's go ahead and snap that to the left
there, push this content down slightly.
236:16 - So we got that set to 16.
And I'm gonna go ahead and push this over
236:21 - and sure that that's set to 16.
On the right there, set the constraint to
236:28 - left and right and the top and bottom.
And then we're going to need to justify the
236:33 - spacing here between these buttons and the
text there, which is where we'll start to
236:39 - modify the line height potentially.
So let's go ahead and pull out our rulers
236:45 - here, shift R, and then I'm going to create
a 36 pixel high rectangle to just reference
236:53 - where the baseline needs to be for this text.
So I'm going to push this content down And
236:58 - essentially, it is right now currently stated
that the text box has a padding on the top
237:05 - of 22 dips to achieve that three, six, dip
baseline there from the top.
237:13 - As you can see, and with that, we can even
adjust this text box to ensure that it does
237:26 - not overlap or interfere with the actions
below it.
237:30 - And it showcases that there's a spacing of
12 pixels from the baseline to the top of
237:36 - the button.
So let's go ahead and double check that.
237:39 - And if that isn't the case, that is an indication
of potentially our line height being off on
237:45 - the typestyle.
So go ahead and create this set that to 12,
237:50 - we are very close, there was one pixel off
the baselines one pixel off.
237:59 - So essentially what we could do is go into
our textile and modify that.
238:03 - So it's set to 20.
So I go in and modify, go to the definition
238:07 - style, modify it to 20.
And then publish that to my library, publish,
238:15 - successfully published and then I can update
this, once I update it pay attention to the
238:22 - text here dropping down one pixel, and it
actually dropped down more than one pixel.
238:27 - So I'm gonna go ahead and undo that style.
And reference my body to textile, ensure that
238:36 - that's there, I'm going to republish that
change, and just ensure that that updates
238:43 - again, so that stays there.
And I'm going to live with that just one pixel
238:47 - off there, although I do think it's correct.
Um, and with that, achieved, look and feel
238:54 - and you have all the spacing set properly.
And that proper color style on the text, with
239:03 - the high emphasis textile applied, we should
be good to go.
239:07 - So all like I can even hide my rulers or just
remove them specifically from this layer,
239:14 - one thing we are missing is a divider.
So I'm going to copy this divider here, and
239:21 - then paste it and then hit option s and that
will snap to the bottom of this element.
239:26 - And it has this has the constraints from the
previous component we built.
239:32 - And then once I've built that out, we can
test the constraints there.
239:35 - And you'll notice that the constraints are
maintained and that spacing when I stretch
239:39 - out this element, and the divider sticks to
where it needs to be.
239:43 - And once I'm satisfied with the responsiveness
of this component, I am good to go.
239:47 - If you want to really be clear, concise, you
can create the reordered the the elements
239:55 - in your component, which is a great thing
to do is that will be easier to consume the
240:02 - components.
And I'm gonna go ahead and make this a, we
240:05 - can make that a master component, I'm going
to duplicate it and pause this video and build
240:10 - out the the third variant for the mobile version.
So what you can do is modify this as needed,
240:20 - you can drag in a placeholder icon.
So we can type in placeholder.
240:26 - And we have that placeholder.
And we can round out the edges.
240:30 - So you could now that we have that round icon,
and you have a you know a head start there,
240:34 - and a clue.
So I'll be right back.
240:38 - Now created that third variant, I just had
to increase the height to 120.
240:42 - Add in that 40 by 40 dip icon, set that padding
perspective in relation to what is indicated
240:51 - in the spec here.
And I kind of just it was very simple and
240:58 - straightforward.
Nothing, nothing difficult there, I just ensure
241:01 - I have those right constraints set.
And I and you should be good to go.
241:06 - And with that said, I'm going to go ahead
and make this a main component.
241:11 - And we're going to go ahead and create the
desktop version.
241:15 - So with this one line variant here, we can
go ahead and specify the height and I just
241:23 - duplicated, this first version that we created
on mobile because it's essentially the same
241:28 - exact thing.
But for desktop, the width is specified at
241:31 - a much larger, it's much larger the width
there.
241:34 - And what we can do is set that width to 720.
Now, and the nice thing about this is our
241:41 - constraints will adapt accordingly.
So still have that spacing there needed.
241:45 - So the texts can fill up a good majority of
this message here, and we have the divider
241:52 - there for designers to utilize if need be
to really make that message Such distinct.
241:59 - And our typography properties stay the same
or action still there with the same spacing
242:05 - on those elements, it's just that the width
is now change.
242:08 - And I need to change this to the naming convention
of this component as well.
242:13 - So it's desktop.
It's a one line, text and action in line for
242:20 - the desktop area, so I can go ahead and just
change that to desktop, there's rename that,
242:27 - and we are good to go.
So with that, go ahead and make that a main
242:32 - component.
And we'll create the other one from scratch,
242:35 - here, so we have, we don't, the width for
this three line element looks like it may
242:44 - be set to 80 pixels, it's not actually giving
me that specified height, we're just going
242:50 - to throw them out.
So I'm going to reference that documentation
242:53 - again.
Yeah, it's cut off, it's hard to read, but
242:58 - I'm gonna, I'm pretty sure it's at as that
is divisible by eight.
243:02 - So for this three line list, let's go ahead
and create a new frame.
243:12 - And click, apply the proper surfaces surface
color stuff in the background, I'm gonna go
243:17 - ahead and grab this naming convention they're
in well organized and publish these components.
243:26 - So I've got that naming convention set.
And I'm gonna go ahead and specify the width
243:31 - to 720.
And grab a divider, as that will grab up,
243:38 - put up, get all the generic things out of
the way, specify that width to 720.
243:41 - Set the constraints bottom left and right,
that just use my shortcut keys to snap it
243:47 - to the very bottom, as you can see here.
And that's good to go.
243:54 - And we just need to double check the height
here, set that to 80.
244:00 - And that divider still sticks stays there
as need be.
244:03 - And we can go ahead and add these two actions,
get those out of the way.
244:07 - So I'm going to copy this text button, paste
it, snap it to the bottom and right and then
244:14 - move it up.
So the padding on the bottom right set to
244:16 - eight, duplicate this and ensure that that
is eight pixels away from the button to the
244:21 - right, apply the proper constraints here.
And we should be good to go the action buttons.
244:27 - Now we just needed to find our three line
list of our three line text string.
244:32 - So I'm gonna go ahead and create that select
the body to textile.
244:38 - And what we need, I'm going to go ahead and
pause this video, copy this text real quick.
244:42 - I wrote out the exact word for word, banner
message here.
244:48 - And I use the right textile.
And I need to actually hold down Command and
244:53 - ensure that this textile is wrapping the entirety
of this message and then vertically center
244:58 - it and then check the spacing on the left
here set to 24 dips.
245:02 - So I have 25 right now push that over one
dip, and we're good to go.
245:07 - And the spacing between here and here.
And the and the text box is 90 dips.
245:16 - So what I can do is stretch this out so that
it's set to 90.
245:23 - Right now I have 90 to push that over a couple.
That's not what 94 so now I've moved that
245:31 - over, it's set to 90.
Now we have that spacing of 90 between the
245:35 - text bounding box and the actions which is
super important.
245:40 - So now that we have that we're good to go,
we've now defined that.
245:45 - And I'm gonna go ahead and create this component.
And I'm going to challenge you to building
245:50 - out this last desktop banner message by yourself.
So just follow those specs, the height here
245:55 - says 72, just because that's cut off into
that might be difficult.
245:59 - And then the baseline of this text here is
20 pixels from the bottom, but just it's actually
246:06 - just eight.
So same specs as we've been doing here for
246:09 - those actual buttons.
Anyways, I'm gonna pause the video and make
246:12 - this and I hope you enjoyed this exercise.
Now created that third desktop variant for
246:19 - the banner message and we are good to go.
So now we have this component that designers
246:25 - can now go ahead and duplicate and then start
replacing the imagery as needed for the icon
246:32 - placeholder modifying the typography with
the proper text bounding box.
246:36 - Apply specified there for this component and
then also the proper placement for these buttons
246:42 - as well to Add and modify the text which is
great.
246:46 - Today we're going to be going over building
out the bottom navigation and there are only
246:53 - two variants on the bottom navigation and
it is the portrait version and the landscape.
246:58 - version for the, we're going to be designing
that for the Android based format.
247:03 - And we have the resource to the documentation,
so you can open up that link.
247:06 - And if we go ahead and click on it, clearly
at the bottom navigation allows movement between
247:12 - primary destinations and an application.
This is crucial and very common.
247:18 - And it's used in every application, whether
you're using Facebook mobile on your phone,
247:22 - whether it's iOS, or Android, or you're using
YouTube, or you're using some sort of Google
247:28 - application within the Google suite.
And I highly recommend you just reading through
247:33 - all the contents, just like every other video
to really understand in depth what these components
247:37 - do everything associated with those elements,
and also the research behind that.
247:43 - And also understanding the states and how
you interact with this.
247:46 - So in figma, I've taken screenshots of the
specs.
247:50 - And one thing to note that's very important
is that the minimum width of the container
247:55 - for each button is set to 80 dips, and the
maximum width is set to 168 dips in width.
248:03 - So you'll notice that they're both utilizing
the the minimum width specified here, 80,
248:12 - dips wide.
And on the portrait version, portrait being
248:15 - if we create a frame, and I go ahead and select
Android, I now have my android version.
248:22 - So I'm just going to type in, I'm going to
label this properly.
248:25 - So I'm going to go ahead and type in bottom
navigation space slash base, portrait.
248:31 - Once you've labeled that properly, I'm going
to also duplicate that and set this type in
248:40 - landscape.
And once you specify landscape now that landscapes,
248:48 - this is landscape, so we're gonna design for
landscape here.
248:51 - And we're gonna go ahead and start by kicking
off this party by specifying the height of
249:00 - this set to 56 pixels, and it has this bottom
app bar the elevation in the diagram, you
249:09 - can look at it yourself to verify if you don't
believe me, but the elevation by default set
249:14 - to eight dips.
So what you'll notice is that say I had another
249:19 - frame here, and I detach that, and I just
went and re specified that this was the material
249:27 - design sized frame.
And I went ahead and just Android just labeled
249:35 - that Android portrait.
And you'll notice that this is the bottom
249:41 - navigation set to portrait here, and that
the content is clipped.
249:45 - Now because the parent frame has that checked,
you won't see the drop shadow on the other
249:50 - sides.
So now we need to go ahead and start adding
249:52 - in the content.
So what do we have we have these three icons
249:57 - here, but those will live inside a specific
containers.
250:03 - So these icons are set to 24 dips wide and
in height and are centered on the axis here.
250:13 - So if I go ahead and select these three, I
can go ahead and ensure that these are horizontally
250:23 - centered, and then space them accordingly.
And what you can do to ensure that is that
250:31 - it's it's centered within 120 pixel frame
120 dip wide frame.
250:38 - So what we can do if you're confused, is,
since this is 363 60 divided by three is 120
250:46 - dips.
So all we have to do is wrap a frame around
250:52 - each of these icons, set the width to 120
and the height to 56.
250:59 - And what we want to do is I hit option W and
a to snap it to the top and left.
251:05 - And then if I hit Enter, and hit option V
and H it will center that perfectly on the
251:10 - screen.
And then we can do the same exact thing for
251:15 - this one as well.
So I can actually detach that now that it's
251:19 - centered, it's positioned with padding of
48 to the left and vertically on the y axis.
251:25 - So all we got to do is wrap this in a frame,
set that to 120 pixels wide, and the height
251:31 - to 56.
I'm going to hit option w so the snaps to
251:35 - the top, and then I'm going to act going to
horizontally center this and then hit enter
251:43 - and hit option D and H to center that within
this frame.
251:46 - So you'll notice that this is 120 pixels wide
and so is the section to the left of it.
251:52 - And what we can do is now that that's centered
it I can ungroup that frame.
252:03 - And I could even apply just the spacing here,
just to double check.
252:09 - Or I could wrap this in a frame.
Again, if you're not that confident want to
252:12 - be extremely precise, set the width to 120,
the height to 56, and then hit option D, so
252:18 - the snaps to the left hand, option W, so it
snaps to the top of the parent frame that
252:22 - I'm going to enter.
Now I have my icon selected, hit option D,
252:25 - and then H.
Now that is centered within the 120 dips wide
252:29 - frame, and is 48 pixels away from the next
icon.
252:33 - And I can ungroup that now my Layers panel,
and now everything is centered accordingly.
252:37 - So now I have my icons properly centered in
the bottom navigation.
252:41 - So one thing we're missing, of course, is
this typography.
252:45 - So we can go ahead and reference the documentation
once more.
252:49 - And it shows you that this type, we can check
the typography in the theming.
252:55 - And it uses the caption style.
So with that caption being used, the the baseline
253:03 - is 12 dips away from the bottom of the icon
frame, which is a great thing for us to reference.
253:09 - So if we go ahead and now create a textile,
I'm going to go ahead and create this textile
253:18 - and label that whoops.
I'm just going to type in featured set that
253:26 - resizing to auto width, apply the textile
caption.
253:32 - And ensure the fill is set to on primary and
ensure that is in all caps.
253:40 - And I'm going to double check whoops, it's
not all caps.
253:43 - And I wrote the wrong thing, excuse me, it's
labeled favorites done should be paying attention
253:48 - here.
And essentially what I'm gonna do is with
253:50 - this line height set.
With this baseline, I'm going to just center
253:59 - this in the center of this by moving it you'll
see that it snaps gives me that red arrow
254:03 - indication, I'm going to move this up and
see I have this red line here that I'm going
254:10 - to apply to the bottom of the frame.
And I need the baseline to be set to 12 pixels
254:15 - right now.
It's set to a 11 on the baseline or our baseline
254:22 - set to 11.
So if we need to push that down one pixel,
254:25 - which leaves a pixel gap on the top of the
icons, outer bounding box.
254:31 - So now we have the baseline set to 12.
So that is fantastic.
254:37 - And we can also reference a given hour, our
typography here, what we're going to need
254:44 - to do is actually select this icon.
And we can go ahead and group this and then
254:52 - I can hold option v.
and this will actually center that content.
254:58 - And then I'm going to ungroup it again.
And what I want to do is make sure that this
255:02 - a lot, the alignment of the text is at the
center.
255:05 - So whenever a user renames it, it just is
automatically centered in that component.
255:10 - So they don't have to deal with messing with
alignment and whatnot, that could be very
255:16 - irritating.
So now that that is specified, we are good
255:21 - to go.
And you'll notice that when the text is applied,
255:27 - it pushes up the icon.
And the icons that aren't currently active
255:31 - stay vertical, vertically centered on the
axis with that text being applied, takes that
255:38 - into consideration and calculates it, and
then centers that vertically with icon plus
255:43 - text.
So now that we have that variant created,
255:48 - we can go ahead and just create that as a
main component.
255:53 - Now we have a our landscape or portrait main
component.
255:59 - So we can go ahead and actually duplicate
this, throw this into our landscape variant,
256:08 - I'm going to rename this to landscape and
detach this instance with the shortcut key
256:14 - option command B.
And what we can do is ensure that we have
256:21 - proper constraints applied to this.
So with this example, it's utilizing the entire
256:27 - width of the landscape version of the Android
phone here in the six frame in this example.
256:34 - So what we can do is manually ensure that
this is correctly being applied.
256:39 - And by doing that, we need to make sure that
these we have three boxes set to 168 dips
256:49 - wide or if you have some other better way
of calculating it.
256:54 - Please do so.
As this is the best way.
256:57 - I know Everything's vertically centered, as
you can see, but what I'm gonna do is the
257:00 - same approach we do with the portrait version.
So I'm gonna set the width to 168 dips for
257:08 - the height 256 and snap that to the top and
to the right, and select my icon, hold that
257:18 - option v h, make sure that's centered.
So we have this implemented correctly, I'm
257:23 - going to do the same exact thing for for this
next one, and I'm going to separate the top
257:32 - and horizontally align it to the center.
So now, I just need to do that with the icon
257:40 - as well.
Now that that's applied, we can say we want
257:43 - to snap this, we want the edges of each of
these frames to snap next to each other, because
257:49 - it's centered within the middle of this within
the middle of this landscape variant, doing
258:02 - the same exact thing.
Tree applying these values, I'm going to make
258:10 - sure that this text and his favorites and
icon are grouped as well, and center that
258:17 - within this frame.
And then I'm going to snap this to the top,
258:22 - and then push this over until it snaps to
see that red line.
258:25 - Now I have all three elements aligned accordingly.
And I can go ahead and ungroup these properties
258:33 - as needed.
So I'm going to ungroup those frames.
258:37 - So just utilize this to measure this perfectly
or properly.
258:41 - And with that said, we now have all of this
aligned properly, and we are good to go.
258:51 - All we need to do is ensure that we make this
a main component.
258:58 - So that is our main component.
And now all we want to do is go ahead we can
259:03 - even throw this frame in here is an example
of each format.
259:08 - Or you could just actually, we just want to
go ahead and throw this in there as is.
259:16 - Today, we're going to be talking about how
to build out components.
259:20 - And it's going to be real simple, we're going
to start off by in this file going to our
259:25 - team library, you can hold down Option three.
And turning on that library, the library you're
259:30 - going to want to access is labeled as material
design system, ignore the one that is enabled
259:34 - above labeled material design, we want the
material design system.
259:39 - And I'm just going to turn that off so you
do not get confused.
259:42 - So now that we have this library enabled,
it will have materializes some library unable
259:46 - to access in our assets panel.
And the first thing we're going to see is
259:52 - you can go ahead and click on the documentation
here, this is a link in figma.
259:56 - So you can go ahead and open up the the component
page on material designs website to understand
260:02 - what this component actually does.
There's a lot of in depth information here
260:06 - that I totally recommend you consuming as
this will only benefit you as a designer.
260:12 - And you'll notice that we have this interactive
floating action button that we're actually
260:15 - going to be building out ourselves.
There's a default version, and there's a mini
260:19 - version set to 40 dips, the default set to
56 dips, and it's 56 dips in width and height
260:25 - as well as the mini ones set to 40 dips in
width and height as well.
260:29 - And then we have an extended variant of this
floating action button that either comes with
260:35 - or without an icon.
And we're going to be creating the majority
260:39 - of these components today.
And what I did was I grabbed the screenshots
260:42 - from the specs.
And this tells you actually how to construct
260:45 - these in figma.
And we'll turn them into main components to
260:48 - then publish into our library.
And it talks about placement.
260:52 - And again, this is really important, because
this will definitely teach you how to differentiate
260:55 - certain types of buttons as we create several
types of buttons.
260:58 - And this is only one set of those buttons.
These are a floating action button.
261:03 - And as you can see, there are variants of
this, we have one two, the leading and text
261:08 - variant.
And then we have two variants of the regular
261:12 - floating action buttons.
So we have a total of four variants there.
261:17 - And now, you can view this as you wish to
refer to.
261:21 - And we're gonna go ahead and check our figma
file.
261:24 - And I have this exercise file set up with
the screenshots for us to reference.
261:28 - And the first thing we're going to need now
that we've been able to library is the icon.
261:32 - So that is a plus icon.
So if I type in plus, maybe we can just click
261:37 - on that and continue to search for that icon.
And if it's not appearing in your assets panel,
261:43 - you could also just extend all of the icons
here and you can search by category as well.
261:49 - If this is just too overwhelming for you,
you'll notice that I'm slowly showing you
261:55 - this to show Guess the functionality.
And again, we can keep searching through this
262:01 - if we want.
But again, this is actually very tedious and
262:05 - not good for our design process.
So the best way to go about this is directly
262:09 - going to the file where all these components
live.
262:11 - So you can go ahead and drag any of those
components into your canvas.
262:15 - And if you drag that in, you could then go
click on Go to main component, and that'll
262:19 - take you directly toward those master components
live.
262:22 - And since all of our components live in the
same location, we're going to go ahead and
262:28 - search for it ourselves.
This, we're going to look for that plus icon,
262:33 - and it should live under our action category.
I know even here, it may be difficult to parse
262:41 - and find.
So I'm going to pause and look for this real
262:46 - quick.
Since I can't find this icon, it's actually
262:50 - not in our library.
And again, this is our library where I intentionally
262:54 - didn't put all the icons here, although over
time it will.
262:57 - And I did that because I actually want us
to utilize the icon tool.
263:01 - So I'm going to type in online on the internet
Material Design icons tool.
263:07 - And basically, this tool is a resource to
download specific icons that we need.
263:11 - And we can also search for categories, like
I had discussed in the previous video.
263:16 - And we can either look for it by scrolling
through, although that may be difficult, or
263:21 - I can filter it by the name and I can just
type in plus.
263:25 - And you'll notice that under the actions category,
these are all the plus variants of the icon.
263:29 - So I kept I typed in plus.
And what I was actually looking for was the
263:33 - Add icon.
So if I can double check by going back to
263:37 - my library, and searching for add, and my
icons, and you'll notice that it is there,
263:43 - it was just difficult for me to find as this
is all very dense.
263:47 - Oh, there it is.
Let me see, sometimes you can get overwhelmed
263:50 - by that content.
So I can go ahead and copy this.
263:53 - And it's called content add.
And I'll go ahead and search that as an example
263:59 - content.
And if I type in slash add, it will even further
264:04 - compartmentalize that.
And again, we're good to go, I can drag this
264:08 - onto the canvas, I now have the proper dimensions
for this icon, I'm just double checking that
264:13 - the width and height of this icon is set to
24 by 24.
264:17 - dips in this case.
So you see that that's specified here in the
264:21 - Properties panel.
And all of these variants of the floating
264:26 - action button, all use a width of 24 by 24,
width and height of 24 dips.
264:33 - I'm here for the icon.
And we're going to go ahead and create the
264:38 - regular variant first.
So what we're gonna do is, now that we have
264:42 - this icon, I'm actually going to hold down
Option Command G to create a frame.
264:46 - And we're going to label this buttons, slash
space slash space, floating action.
264:55 - Whoops, action button, regular.
This is the regular variant of the floating
265:05 - action button.
And it lives under the category of buttons
265:08 - and under the category floating action button,
and it is the regular variant.
265:13 - So that is important to note that we get that
naming convention set from the get go, it'll
265:17 - make our lives a lot easier.
And you'll know what I mean when we start
265:20 - to publish these components to the library.
And Okay, so now what I want to do is hold
265:26 - an option, imagine you turn this into a frame
again, well, this is the frame.
265:31 - And what I'm going to do is hold down Shift
Option as I drag on the frame and ensure that
265:41 - that's set to 56 by 56.
And if not, if you don't want to do it that
265:44 - way, this is much quicker, you just set these
to 56 by 56.
265:48 - You'll notice that the icon set to top and
left.
265:50 - By default, as I scale that out, what I'm
going to do is in the Layers panel, click
265:55 - on that icon, hold down Option V and then
H and that will center my icon perfectly as
266:00 - needed for my floating action button in order
to create that.
266:05 - So now that I've created that, you'll notice
that the spacing on the left and the right
266:09 - of the icon should be set to 16.
So the padding should be set to 16 dips on
266:14 - the left and right which it is on this frame.
And it might be hard for you to see because
266:18 - by default that that fill was off turned off
and I'm holding down option to get these breadline
266:25 - measurements.
So you'll see that those specs are set properly.
266:28 - And it is already vertically centered and
horizontally centered as needed.
266:32 - The frame size is correct.
And what I do need to do before I forget is
266:36 - ensure that the color of this icon is going
to turn off that build icon and the selection
266:44 - color, which is the color applied to the icon
here needs to be set properly.
266:50 - So it needs to be set to content on primary.
And you can't see it right now but that's
266:58 - fine.
Because we're going to specify the background
267:00 - color of this fill by clicking style, going
to our content.
267:05 - And then we're going to select on should be
on background or on surface.
267:14 - They're all the same color value.
And again, if there's ever any confusion on
267:19 - what color to apply, we can always reference
the documentation here and in material design,
267:28 - to understand the behavior better and get
clues or hints on how to better construct
267:32 - these elements.
But now that I know what that is, I'm going
267:36 - to ensure that this component has rounded
corners.
267:40 - So I'm going to change the corner radius here
and round that out.
267:46 - You'll notice that it's now rounded out when
I set this to 32 dips 32 on the corner radius,
267:53 - I now have my rounded circle.
And we have the desired colors applied.
268:00 - And with this icon implemented as well, I,
the last thing I need to do is add an effect
268:05 - style to this button.
And remember, when we worked on elevation,
268:10 - and I created a diagram of the elevation,
one thing we can do is reference documentation
268:16 - again, and go to elevation on the material
design website.
268:19 - If we go to our components, or if we go to
design, and we select the environment and
268:28 - select elevation, and we go to elevation hierarchy,
or whoops, that's what's a default depicting
268:36 - elevation, I'm trying to find the good example
of elevation and where it lies on a floating
268:40 - action button.
So a floating action button.
268:44 - Let's find the example here.
Okay, so here we have, it's right here.
268:51 - So you see this floating action button right
here, the floating action button lies on when
268:58 - it raises to 12 dips in elevation.
And you'll notice that it lives in between
269:06 - four and eight dips on this axis here.
And it lives on the six dips on the y axis.
269:14 - So that's where the floating action button
is at by default.
269:17 - So if we go ahead and actually go to our styles,
go to effects and apply the six dip, which
269:25 - is it's already labeled to in a color system
in the description, which is awesome, we have
269:30 - now created our floating our regular floating
action button.
269:34 - And once you've created the desired component
as needed, we can go ahead and turn this into
269:39 - a main component.
And you can either click the Create component
269:42 - in the toolbar right there in the center.
But the I always use the shortcut key to create
269:46 - a main component and that's option command
K.
269:48 - If you pay attention your Layers panel, once
I hit that shortcut key, I will now have a
269:52 - main component.
So that is awesome.
269:56 - And what we need now is a mini floating action
button, which is the which is what's FA B
270:04 - stands for, and all we actually have to do
is we can go ahead and duplicate this, because
270:08 - essentially what this is, is a smaller version
of the regular, it's just shrink shrunk down.
270:15 - And what we are going to need to do is detach
this element, I'm going to do option command
270:18 - B, I'm not attached that is a regular frame,
or you can right click and click detach instance,
270:24 - which detaches it from the main component.
And what we'll need to do is now specify the
270:28 - spacing and tighten it.
So you'll notice that the padding all around
270:30 - is set to 16 dips.
And all you have to do is set the height and
270:35 - width of this to 40 dips here as specified
in the specs, I can go ahead and hit this
270:41 - constraint proportions, type in 40.
And it will do that and what I can do is select
270:45 - the icon hit option V and then option H, I
just hold down Option then hit D then H and
270:50 - then it will automatically center that in
the within the parent frame.
270:55 - So everything is now set to eight dips on
the top, left, bottom and right specified
271:01 - here.
And we're good to go.
271:04 - The only thing we need to do is actually go
ahead and rename this and we're going to call
271:08 - it the mini fab instead of regular.
So we don't have to change the naming convention
271:12 - to the left of this layer, just the rightmost
portion of it, which is regular.
271:18 - So change that to mini fHb.
You can once you've done that, you can turn
271:24 - this into a master component, right click
Create component or main component, I apologize.
271:29 - And now we have those two variants.
Great, we're good to go.
271:32 - And the next step is we're going to need to
create another button and it's an extended
271:37 - floating action button.
And this is our last element that we'll need
271:41 - to create here.
And with this created, we're going to go ahead
271:47 - and reference this mini bind.
I'm going to duplicate this button and I'm
271:53 - going to detach it, detach this instance.
And I'm gonna go ahead and set the name convention.
272:00 - And it's a long one.
So I'm going to type in x dented FA B.
272:06 - So extended floating action button.
Now that we have that name properly, I'm going
272:11 - to go ahead and ensure that we specify the
parent frame, we're going to utilize the parent
272:16 - frame to set the parameters of the button.
So all I did was I grabbed the right edge,
272:22 - held down command and stretched out this element.
And I need to make sure that I have my constraints
272:31 - set properly, maybe I want my constraints
to center on the y axis.
272:37 - So if I didn't center this, it set the top
and left on constraints, this would just stick
272:43 - there.
And I don't want that because I need to set
272:45 - this height to 48.
And I still need this icon to be aligned centered
272:49 - vertically, I could just apply that property,
go ahead and change the height to 48.
272:54 - And that stays centered, you'll notice that
it's what sets what pixels on the top and
272:59 - bottom proportionately.
And you can see how powerful utilizing the
273:03 - principles material design is specified.
Things will always be divisible by four or
273:08 - eight.
And now that I have that height specified,
273:11 - I need to set the spacing to 12 instead of
eight on the left.
273:15 - So now I have that set to 12.
So that spacing is now proportionate.
273:19 - And I actually need to create some text.
And we have the color style already, because
273:23 - we enabled our library for the button color
style.
273:26 - And I'm going to specify, I'm going to create
some text here, hit t on my keyboard, create
273:31 - the text tool.
And I'm going to type into create.
273:35 - And I'm going to ensure that I have the content,
color style set properly.
273:39 - So I have content on primary.
So on primary, you'll notice that it's using
273:45 - the Roboto mano, so does not look like this
textile yet, but we need to apply a style.
273:50 - So with that text selected, I can click on
the textiles icon.
273:54 - And then go ahead and select button.
And I now have create set.
273:59 - And with that created, I can go ahead and
so one sec, once that's specified, I can go
274:10 - ahead and and specify what I'm going to need
to do with this color style is ensure that
274:20 - I'm holding down command and grabbing the
the edge of this text here.
274:26 - And I can go ahead and center this.
So option v to vertically center this, my
274:30 - spacing set to 12 here and I need the spacing
on the right to be set to 20.
274:34 - Because that that is what specified, the text
is centered as it's pointing here, through
274:40 - the content being the icon and the text is
centered in this floating action button that
274:46 - is extended.
And I've now centered that here.
274:50 - And we need to set the spacing to 20 here,
so I can go ahead and click on this, I can
274:57 - hold down Option here, which will allow me
to see the spacing and I hold down Command
275:02 - and push this to the left to see if I'm getting
the right spacing, I was off by one pixel.
275:06 - So now it's set to 20 there.
And I have now created the extended floating
275:11 - action button with all the proper properties.
So we can go ahead and double check that by
275:18 - just pulling this next to it.
And what we can see is that we have the icon
275:22 - set to 24 by 24 dips as specified here, the
spacing set to the 12 on the left and right
275:27 - of the left of the edge of the button and
the right of the text.
275:32 - And it's vertically centered.
And the height of the button itself is set
275:36 - to 48 dips.
And the text has padding to the left set to
275:40 - 12 and spacing of padding to the right set
to 20 dips.
275:43 - And we're good to go.
That is our floating button floating action.
275:50 - Floating extended floating action button sorry,
a lot of words that are going on confusing
275:54 - myself.
So I'm going to create that as a main component.
275:57 - And one thing you'll notice is that if I type
into this component, I don't have essentially
276:03 - what I need, which is auto layout, because
it will automatically adapt what I type and
276:09 - implement the proper spacing as needed as
I type.
276:11 - So what we're going to do is turn this into
an auto layout component.
276:15 - And the next section of the course will will
go over specifically auto layout for implementing
276:21 - these components, which needs to be covered
separately, I believe, because it's a lot
276:25 - of content to consume.
And understanding, providing the nomenclature
276:31 - here for this component by layering it accordingly
naming it in the Layers panel accordingly.
276:36 - And then also utilizing the tips and tricks
to create the components themselves may take
276:40 - some time.
So we're going to specifically focus on that
276:42 - and constraints as needed.
So I'm going to actually center this and ensure
276:48 - that this sticks to the left and right but
again, remember that when we finalize publishing
276:56 - these components, we're going to Use auto
layout.
276:58 - And we won't be using these constraints are
solely using constraints for the practice
277:03 - of understanding constraints, which you'll
be masters at once we build out all these
277:06 - components interactively together.
So that is all I have.
277:11 - The last thing is organizing and publishing
this so.
277:15 - So now that we have all of this organized
and published, well, now we need to organize
277:21 - it since we have these main components.
So what we can do is, with this regular floating
277:27 - action button here, we can go ahead and specify
that make sure it's aligned accordingly, we
277:33 - can change, excuse me, the spacing as needed.
Whoops, I'm going to go ahead and drag this
277:42 - over here.
Got that set to 16.
277:45 - spacing between the types set to 72.
And I'm going to go ahead and drag this one
277:52 - last button here and change this make sure
that's set to 16.
277:57 - And we now have our three button variants
here for the floating action buttons, as directed
278:04 - here from the specs specified on the material
design website.
278:08 - So that is what we just created.
And you can go ahead and read the contents
278:14 - of this web page, which is accessible in our
exercise file right here at the bottom, you
278:17 - just click on that link, select Open link.
And it'll open that page for you.
278:21 - And you'll be good to go.
And again, I'm going to keep this here short
278:26 - and sweet.
Thank you so much for watching.
278:28 - In the other videos, you'll notice that we'll
actually publish these in the, to our material
278:34 - design system file as a whole.
But I'm going to save that for the end.
278:40 - So we can do that all together in one go.
So that way, you're not your heads, not context
278:45 - switching between the types, the two separate
processes, which is building out these components,
278:51 - and then organizing and publishing the components.
Today, we're gonna be talking about building
278:58 - just some generic buttons.
And if you click on the link here in our resources,
279:03 - we can go ahead and access the buttons documentation,
I totally recommend going through all this
279:08 - in depth, but we're primarily going to be
mostly focusing on constructing these buttons.
279:13 - And what you'll notice is that we also have
another interactive field here, nice little
279:17 - playground for us to see what we're going
to be building.
279:20 - And also we're going to be talking about,
we got the different variants.
279:24 - Here, we got the contained button, we got
the outline button, and we got the text button.
279:29 - And all of these buttons also have a leading
icon.
279:32 - So they all have that type as well.
So we have three, three regular variants.
279:38 - So we're going to create well there.
And then we also have each of these variants
279:42 - with a leading icon.
So we're going to be creating six types of
279:45 - buttons today.
And as you can see, they're also states associated
279:48 - with that, which we'll cover later in the
different section of the course.
279:52 - And what we can do is just, we have all of
the specs here.
279:58 - So we can go ahead and check specs to see
the dimensions of how to actually construct
280:02 - these buttons.
And one screen Yep, I got all the screenshots
280:06 - here, got all five variants.
And note that all of these variants have one
280:11 - with a leading icon, which will take into
consideration, which is why we check the documentation.
280:15 - As you can see here, they also have leading
icons.
280:19 - So I can go ahead and just screenshot this
as well if I wanted to.
280:23 - And I can go ahead and paste this to my canvas,
and click on each type and just screenshot
280:29 - all these and for all of you Mac users out
there.
280:33 - If you hold down Ctrl Shift command for it
will allow you to take a quick screenshot
280:38 - of your interface, and then you can paste
it into the canvas and figma.
280:43 - And now I have all those variants.
And we're gonna go ahead and start with the
280:46 - contained button.
And since auto layout was super easy to implement
280:50 - with these buttons, we'll go ahead and cover
this.
280:53 - But auto layout will be its own section of
the course as well as creating these, these
280:59 - creating these components with just the sole
understanding of how to construct them and
281:03 - utilize the color styles and whatnot is time
consuming in and of itself is why there is
281:08 - a another section in the course for just auto
layout and adding auto layout to these components
281:13 - we're currently building.
So now we can start with a generic frame.
281:19 - I'm gonna go ahead and hit that.
So the frame has a height of 36 dips.
281:24 - So I'll change that to 36.
And now that we have the height set to 36
281:29 - steps, I'm going to go ahead and make sure
that the on primary background colors specified
281:34 - if we go to effects and go to fill, hit the
style icon.
281:38 - And one thing we need to do that I forgot
is that since these are individual exercise
281:42 - files, we'll have to re enable the library
and we need to re enable the material design
281:47 - system library to access those color styles.
So now that we have that specified, I can
281:51 - go to my Phil and I have that library here
viewable material design system.
281:56 - And I'm going to go ahead and click On the
primary color, which is the color of background
282:02 - color button, and again, we're going to need
to double check the corner radius of this
282:09 - button, I can go, there's a few ways you could
actually do this.
282:13 - And the border radius, I just checked the
code, the border radius is set to four pixels
282:17 - there.
So I can go ahead and change the corner radius
282:20 - here to four pixels.
Now that that's set, you'll notice that we
282:26 - need to add some text to this, once we add
the text will adjust the width of this component.
282:31 - So if I type in, apply the proper color style,
go to content, and then select content on
282:38 - primary which is content from the on the primary
surface.
282:42 - So if I type in button, or apply the proper
color style, I mean textile, select the button
282:49 - textile, I now have button.
And one thing I noticed with this style is
282:56 - that we had the click on the type Details
button and to ensure that auto width is selected
283:03 - for the resizing, which is what we want.
And one thing I can do is hold down Option
283:08 - V and H which will center this horizontally
and vertically.
283:11 - But this won't really matter once we add auto
layout.
283:14 - So that's just a trick I frequently use to
center items within the parent frame, horizontally
283:20 - vertically, which is Option A v.
So now that we have the coast selected for
283:24 - both the background and the text, I can go
ahead and add auto layout.
283:28 - So how do you do that? Well, I don't know
it needs to be applied to both elements.
283:32 - And what are those both? What are the two
elements I'm referring to? Well, the two elements
283:37 - are the the text layer here and this frame,
and I'm going to name this buttons.
283:47 - Space slash space, and then label this contained
button because this is our contained button.
283:51 - And now that I have that properly labeled,
I'm going to hit shift a, what that just did
283:56 - is that that just added auto layout.
And what I'm going to want to do is that by
284:02 - default, auto layout ads, horizontal and vertical
padding by default, and we don't want that
284:08 - because we want this to stay vertically centered.
So I just hit option B again to vertically
284:12 - center it, and then ensure that this auto
layout set to horizontal.
284:19 - And then I'm going to select the parent layer
and add auto layout to that as well.
284:23 - And I just hit shift a to do that.
Or you notice that you can click on this frame,
284:27 - right click and select Add auto layout, or
you can do it from the canvas as well.
284:32 - I click on that right click and select Add
auto layout.
284:34 - And you'll notice that we have this set to
vertical.
284:39 - So what does vertical do if I type it it's
some just the vertical parameter allows you
284:52 - to resize this vertically.
Whereas if I set this horizontally, I would
284:59 - be changing the I would be resizing this horizontally,
I mean vertically, sorry for the confusion
285:08 - there.
So if I set this auto out to vertical, you'll
285:12 - notice that I'm only able to actually resize
the width on the horizontal axis.
285:17 - And if I select horizontal, I'm actually only
able to specify modifying the heights.
285:24 - But that doesn't matter.
We already have our height specified.
285:27 - And recognize that and apply the proper vertical
padding so that it was consistent and with
285:33 - the text there, so the Texas center.
And now all I need to do is ensure that the
285:38 - padding horizontal padding is not set to 162,
which it is, as you can see there.
285:43 - And it's set to 16.
So I got to just change that to 16.
285:46 - Now what does autolayout do, I have this button
now.
285:49 - And if I use this button, if I type hello
and just keep typing, it automatically adjusts
285:58 - the padding.
So that's what we need, it'll save you a lot
286:00 - of time as as the designer, it's a very helpful
feature.
286:05 - So with that created, the only thing missing
if you pay attention closely, there is some
286:08 - elevation data these buttons, and we can go
ahead and reference material design documentation
286:15 - once more.
And what we need to do is go ahead and access
286:20 - the environment, good elevation, and click
on depicting elevation to scroll down a bit.
286:27 - And we're going to go ahead and look for this
diagram.
286:33 - And what you'll see is that we need to find
our buttons and our contained button lives
286:39 - on the two dips axis for the elevation, and
when it is pressed, it rises to the eight
286:46 - dips, or eight pixels and the elevation axis.
So we can go ahead and apply the two dips
286:54 - effect style, which is right here.
Got the two dip set.
286:57 - There.
So now we have the proper elevation set for
287:00 - this button.
And we are good to go with this button.
287:03 - And we can go ahead and even create this as
a main component.
287:09 - Now we have this main component set.
Now we can create the other main component,
287:14 - which is a contained button with a leading
icon.
287:18 - And you'll notice that this icon is set to
18 by 18 pixels.
287:21 - But we can also double check for go to our
buttons, click on leading icon, we can inspect
287:29 - the code received in command, shift C, to
view this button, I can break this down and
287:40 - try to view the specs of this button.
But if it's too hard for you, then don't do
287:45 - it.
But that's one way of looking at those specs.
287:48 - But we already have that already.
So I hope I didn't confuse you, just providing
287:52 - some technical tips and tricks on how to analyze
things if you are suspicious of them not being
288:00 - done properly.
So I've now removed the auto layout and the
288:05 - detached the instance.
So I can go ahead and resize this component
288:13 - accordingly.
So I need eight pixels in between my icon
288:16 - and the text.
So what I can do is actually use constraints
288:20 - here, set that to right, and center on the
vertical axis right on the horizontal.
288:26 - And I can stretch this out, and it will maintain
that proper spacing on the right to 16.
288:31 - And it's still centered, and it gives me some
room to add in the new icon.
288:36 - And all we actually need is a placeholder
icon.
288:38 - So we can go ahead and click on our assets.
You could literally type whatever you want,
288:43 - I just typed in star.
It can be anything like it could be the Add
288:49 - button, like we did in the floating Actions
button.
288:54 - And what we can do is one remove this fill
layer because it's inactive, there's no purpose
288:59 - for that.
So that's just confusing.
289:02 - And we can click on content and select on
primary.
289:05 - And if it's going to be on our on primary
color style surface, that background.
289:11 - And now, what we had to do is scale this down
to 18.
289:16 - By 18, all I did was I held Option Shift,
which will proportionately scale this down
289:21 - as I drag the handles downward, I can plop
this into my layer and ensure that this is
289:31 - vertically aligned by holding down Option
v.
289:33 - Since I know this isn't it's in the parent
frame.
289:36 - And just double check the spacing set to 12
dips there.
289:40 - So now I can go ahead and move that over one
pixel.
289:46 - And what I could do is turn this into an auto
layout as well.
289:49 - And the parent frame into an auto layout.
And we can start to specify the spacing between
289:56 - items.
So what we can do here is remove that initial
290:07 - padding set by auto layout always adds one
extra pixel horizontal and vertically, which
290:12 - is annoying.
And we want to make sure this is set to 12
290:22 - on the left.
This might be tricky with auto layout, because
290:31 - it's not allowing us to specify each edge
on on this layout here.
290:38 - So that can be tricky.
And again, we can cover that in the next video.
290:43 - If this is too hard for you.
What I'm going to do actually, since we're
290:47 - only focused on the construction of this component,
and not autolayout is just disregard that
290:53 - so we get the specs perfect.
And we can focus on that in the next section
290:56 - of the course.
So we have that set of 12.
290:59 - And I'm gonna move this over, make sure it's
set to eight.
291:02 - And make sure the padding to the right of
this button is set to 16.
291:11 - So now that that's set to 16, and in the parent
frame is set to eight from the right and left
291:17 - 12 on the left.
This button has been constructed properly.
291:22 - So once that's constructed properly, I'm going
to just imply that this is a contained button
291:32 - with an icon.
So what we can do is specify that right there
291:40 - contain button with icon and make that a main
component.
291:44 - Now we have two components here specified.
And we're going to go ahead and create the
291:51 - outline version of both of these.
So I'm actually going to save us some time
291:56 - duplicate these two Once these two are duplicated,
we know that these don't use elevation, so
292:04 - we can remove that.
And what we're gonna do is hold down Option
292:08 - command B, which will detach those styles.
And notice one of them has auto layout, which
292:13 - is this one.
So I'm going to hit Option Shift a to detach
292:17 - that from auto layout.
So it's just a frame, which is what we want.
292:21 - We know that the heights are set properly.
And what we need is an outline of a border
292:30 - around this button.
So if I go ahead and type in, outlined button,
292:41 - I'm going to go ahead, do the same thing for
this one.
292:52 - And I just specify the spacing on this, make
sure it's set to 16, I should be good to go,
293:00 - all we had to really do is modify the color
and add a stroke.
293:08 - So with that said, One thing to double check
is the height on this button, the height has
293:16 - been modified.
So I'm going to change that to 36.
293:18 - Again, to make sure that this content is still
centered.
293:22 - So that's one thing we should always look
out for as we're building these elements is
293:28 - making sure that they're they're centered
accordingly.
293:32 - And as we implement these things, so I'm gonna
ungroup that there that shouldn't be grouped,
293:40 - that should definitely be centered on our
canvas, still set to eight, everything, this,
293:47 - this button has a frame because we add an
auto layout.
293:50 - So when I detach those things I forgot to
add to remove this frame.
293:55 - So that's why that occurred.
So now it's ensuring that pixels are perfect
293:59 - there.
So we're good to go.
294:02 - And now I can go ahead and remove the bill
style from both of these.
294:08 - And what we're going to want to do is add
a stroke and leave it at one pixel.
294:12 - And for the color of this, we need to go ahead
and actually view this outline button.
294:21 - And you'll notice that the outline button
is set to the on primary colors.
294:28 - But in the specs, we we have a different color
specified, but that's alright, so for the
294:34 - sole purpose of constructing these elements,
we'll leave that outline to the on primary
294:40 - color, although that may not be the case at
all times.
294:44 - So we go ahead and click on the stroke, go
to the style, select on primary, and we'll
294:51 - go and double check this button and the color
style is set to on primary as well.
294:57 - So I can Command click on that text and Command
Shift click on the second set of text, and
295:03 - then go ahead and select on primary color
style.
295:08 - And I can do the same thing with this leading
icon here, ensure that it's set to on primer
295:18 - as opposed to on surface.
So now we have those two button variants and
295:25 - just ensure that the spacing set to 16.
And it's vertically centered, which it is
295:29 - by holding down option.
And we can go ahead and rename this from contained
295:37 - button to outline button.
And now that we have that we're good to go.
295:43 - And we can make that a main component.
You'll notice that this still resizes with
295:48 - all the proper parameters, which is great.
But to make that a main component by holding
295:54 - an option, command K.
And we are good to go with this component
295:59 - as well.
I'm gonna go ahead and hold down Option command
296:02 - K.
So we have those two variants.
296:04 - And we only have three more button components
to make next.
296:09 - So we have our contained variants and our
outline variants.
296:12 - So we could even delete that screen.
We can't delete the screenshot.
296:15 - But now we have our text button.
So our button is essentially just text, but
296:20 - not to confuse you.
For those of you questioning why we shouldn't
296:26 - just use text for this button.
Well, when you utilize the states of this
296:30 - button, like when you hover on this button,
it actually has some parameters around it.
296:35 - So that's why we need to make this that's
why this isn't just a actual text button.
296:40 - It actually has transparent parameters around
it.
296:44 - So when you hover on it, those colors appear
and you can see that it's actually encapsulated
296:48 - in a rectangle.
So if we go back to figma we can create that
296:54 - variant and I'm just going to duplicate this
button here.
296:57 - No need to worry created from scratch that'll
make your lives harder, no need to make your
297:01 - life harder or work smarter, not harder.
And then we'll detach the style because it
297:08 - doesn't utilize elevation, and will actually
just remove the back the fill color, which
297:15 - is the background and will Command click on
the text and set that text to on primary color
297:20 - style.
And we now have our text button, I'm going
297:22 - to label that as text button.
And the only difference is, we need to change
297:29 - the auto layout horizontal padding from 16
to eight, because there's less padding, so
297:35 - if we click on this, it's set to eight on
the left and right the horizontal padding,
297:39 - and the text is centered vertically, and the
height of this is set to 36.
297:43 - And the mid the minimum width of a button
in terms of its width can be set to 64 pixels.
297:50 - So this would it work a button labeled A so
because the minimum width of it as specified
297:56 - in the documentation is needs to have a min
width of 64 bits, which is just 64 pixels.
298:01 - In this scenario, we have one set to 100 tendons,
so we're good to go.
298:06 - And that is the construction out of our our
text button.
298:12 - And what I'm going to do is I need to actually
detach this.
298:16 - And I'm going to rename it text button.
So we have text button, I'm going to option
298:23 - command K to make that a main component.
And we are good to go.
298:27 - only thing missing is another text button
with a leading icon.
298:31 - As you can see here is a text button with
a leading icon.
298:35 - So what I can do is duplicate this button
here, this outline button with a leading icon,
298:41 - leading meaning that it's in front of the
text here in terms of left to write.
298:47 - And I'm going to detach this instance as it
is a part of a different family.
298:53 - And attach the instance and ensure that the
padding is set to eight on the left and right.
299:03 - Once that's done, I need to be very careful
about my frames here and make sure this is
299:10 - nice and clean.
Just ungroup those frames there.
299:13 - So we're good to go.
What I need to do is the padding here set
299:18 - to 12.
And that's set to 16.
299:22 - So I can shrink that down.
But we can also reference the code here.
299:27 - So here, you can clearly see that the padding
still set to 12.
299:30 - I mean eight on the right and left the left
of this icon, set eight and right with buttons
299:35 - at eight.
And then it still maintains that spacing in
299:40 - between the icon and text as you can see.
So by just kind of tried to inspect that code
299:47 - there, it could give me a general idea of
the spacing of the elements.
299:52 - So the padding stayed there.
And we're good to go, let's, I'm going to
299:57 - just specify that as text button, gonna shrink
by holding down Come in, shrink that to fourth
300:12 - set to eight.
And then this button is set to its proper
300:19 - parameters.
So now that it's good to go, we just need
300:22 - to rename it.
So it is a text button with icon and make
300:31 - that a main component.
And we are good to go.
300:33 - The last buttons we need to create our is
this toggle buttons variant.
300:43 - So with that said, Okay, so now with this
toggle button, what we're going to do is we
300:53 - have three sections here, these there's three
buttons and this toggle button.
300:59 - And they're all boxes set to 48 by 48 dips.
And then there's a stroke in between, we could
301:06 - call this the stroke and these two strokes
here set to one pixel.
301:12 - And then it also has a border around it as
well, which is a stroke.
301:16 - So we'll take that into consideration.
As we build this.
301:18 - I'm going to go ahead and create a frame so
we can just do the math.
301:23 - So 48 times three is 144, we can specify that
width to 144 and ensure that the height set
301:31 - to 48.
So we have that and make sure the background
301:34 - color of this fill is set to surfaces.
surface.
301:39 - And once that's set to surface, we can go
ahead and grab the we can grab placeholder
301:45 - icons right now we don't know if you want
to get into the specifics and find those.
301:49 - Now we you can by accessing your library of
icons.
301:55 - And actually yeah, we can go ahead and do
that since it's free.
301:58 - easy to find in our library.
And we have all of the format's needed to
302:04 - select for this example.
So I just went into our materials and system
302:08 - library, which is also enabled here.
And I pasted these three, and what I need
302:14 - to do is add the proper color style.
So add remove the fill that's turned off,
302:20 - that's hidden.
And now I can go to surfaces content, and
302:24 - then on on surface, since the background is
set to surface, and they're already set to
302:32 - 24 by 24.
And what I need to do is set the corner radius
302:37 - as well.
So generally the core radius set.
302:41 - For this scenario, it's set to two.
And with that set to two, we can go ahead
302:47 - and plop these in accordingly.
So this icon, I'm going to center vertically,
302:54 - since the heights proper, please set already,
it's just padding is set to 12 pixels from
302:59 - the left here and 12 pixels from the right
of this one pixel stroke here.
303:06 - And one thing we need to do is add a border.
So what we can do is add a stroke and set
303:16 - that to triple E, hit Enter.
And it's already set to one pixel and we want
303:22 - it set to inside.
Because if we set it to the inside, that is
303:25 - the proper basting we want or else it'll set
it in, it'll set it inside the frame, if we
303:33 - set it to outside the stroke is now outside
of our frame.
303:36 - We want that set to inside since that's what's
specified here.
303:39 - Now that set inside, I'm going to create a
line that's one pixel in the hex values Triple
303:48 - E or six E's, the x value, then just set that
to 48.
303:53 - And one thing I'm going to do is flatten this
by hitting command or Command Shift O, and
304:02 - then I'm going to hit option W and that will
align it.
304:04 - And then I'm just going to make sure the padding
set to 12.
304:08 - So now this icons got padding on the left
and right at 12 and top and bottom.
304:14 - And we can drag this in here, I can center
that vertically, I can go ahead and duplicate
304:21 - this.
Make sure that's set to 12 as well.
304:25 - So now set to 12 on the left and right.
And then all we have to do is drag this in
304:30 - here and make sure it's set to 12 as well.
So now it's set to 12 on the left.
304:42 - And right one thing that isn't correct here
is this last icon spacings padding of 10 on
304:50 - the left, make that 12.
And then we can stretch out this button by
304:56 - holding down command on the right handle,
move it out twice.
305:02 - And now that's set to 12 proportionately.
So now these are all good to go.
305:07 - What we can do is go ahead and label this
properly.
305:15 - So we can label this if we rename this layer
buttons, space slash space, label that toggle
305:21 - buttons.
Enter, we are good to go.
305:25 - We can even make this a main component by
just hitting option command K, and we are
305:31 - good to go.
And now we have all of our button variants.
305:36 - Now we can just go ahead and add them into
our file as needed.
305:44 - And that is everything you need to have covered
in this course.
305:50 - Or for this video, excuse me.
So now I'm just dragging these.
305:55 - So I'm gonna pause and organize these now
bareback.
305:58 - So now I have all of these organized in my
buttons layer.
306:02 - And they're named accordingly.
Today we're going to be going over building
306:09 - card components.
And and we're going to get an overview and
306:12 - understanding of the usage for the usage and
need for cards, when to use them and how to
306:19 - build these cards out utilizing the components
we've already made.
306:21 - So we can go ahead and start off by opening
up our team library modal here, and we need
306:27 - to turn on our material design system.
And then we have access to the cars documentation
306:33 - here in this exercise file.
So if we go ahead and open that link, what
306:37 - you'll see is that cards contain content actions
about a single subject.
306:43 - And here we have a great interactive demo,
showcasing the types of cards.
306:48 - There are several options for the elevated
card, and then there's also an outline card
306:53 - and in our figma file.
We're going to go ahead and build out Four
306:58 - variants, three of them are elevated.
So the elevated type here you can see, within
307:04 - this there is a drop shadow being utilized
here on this elevated variant.
307:08 - And then on the outline variant, it's literally
just an outline as opposed to using drop shadow.
307:12 - So those are the differences between the two
cards types.
307:16 - And both those two card types, the elevated
type and the outline type, have options with
307:21 - media supportive text, and buttons, and you
can mix and match them go ahead and mess around
307:24 - with those get familiar with what's possible
with these types of cards.
307:30 - And there's a lot of great context around
how to use cards and cards are technically
307:36 - surfaces that display content and actions
on a single topic.
307:40 - And they should be easy to scan for relevant
and actionable information, elements like
307:45 - text and images.
As you can see, in the interactive demo, there's
307:48 - the text and the image example.
And we have some actions to some buttons are
307:54 - specifically about that single topic in the
card.
307:56 - And here are some principles where this card
is contained.
308:00 - They're identified as a single contained unit,
it is independent and can stand alone without
308:04 - relying on surrounding elements for context.
And it is individual, a card cannot merge
308:10 - with another card or divided into multiple
cards.
308:12 - And here we have a breakdown of the anatomy.
And here, as you can see, the only the the
308:20 - card container is the only required element
in a card.
308:23 - All other elements shown are optional.
So this container here is the holds all the
308:31 - cart elements.
And that is actually the only required element.
308:35 - So what this indicates is that card layouts
are very to support the types of content they
308:41 - contain.
And it's really specific on your needs when
308:44 - when building out cards.
So when you try to implement this as a system
308:48 - in figma, all these optional variants should
actually be their own elements when you publish
308:53 - them.
So you can then start to build out your into
308:56 - your own card individually.
So it has all the defined functionality.
309:02 - Because if you just create these specific
cards, maybe there are certain things you
309:07 - don't need from it, which you will need to
remove, therefore, needing to create your
309:12 - own from scratch, which is why we want to
build it from the ground up utilizing elements
309:16 - as opposed to refactoring one that's already
been built.
309:20 - It's more modular in that sense.
Here's some great, you know, breakdown of
309:24 - behavior usage and whatnot.
And I grabbed these screenshots of the specs.
309:29 - And what I really like about the specs is
that it states for cards, is that the section
309:36 - should not be read as prescriptive, or, or
exhaustive, or also definite, these cards
309:43 - have no singular layout, type of graphic or
image size.
309:47 - So and So none of this is extremely specified.
So what they're trying to state is that it
309:51 - is designed to meet the needs of the content
they present.
309:53 - So, so the content the designer is trying
to present.
309:57 - So it is flexible in that sense that you can
build out a card to your needs.
310:01 - And it shows a variety of layouts that help
showcase how flexible It really is.
310:07 - So we'll go ahead with that said, jump into
figma.
310:12 - And now that we're in figma, we're gonna go
ahead and create the first card type.
310:15 - And one thing important about this is that
the elevation for the rest of state of a car
310:23 - is set to one dip.
So in under my under the under elevation here
310:27 - in the material design guidelines, there's
a table of default values, which have already
310:31 - gone over a few times before, and it shows
that the card at the rested state is set to
310:37 - one dip on the right there.
And when it is picked up, when this card is
310:44 - being interacted with or picked up, it utilizes
the eight dip default elevation value.
310:50 - So just just a side note there, because we
will need to know that to implement the elevated
310:54 - portion of the cards we build up.
So with that said, let's go ahead and get
311:01 - to cracking on this elevated card yours.
So we have is a title.
311:07 - But we're gonna go ahead and define the frame
here.
311:09 - So we have the background color style of surfaces
surface here, so it's just white, and the
311:17 - rounded corners are set to four are actually
that set to eight.
311:22 - And we're gonna go ahead and copy the name
of this.
311:26 - So I've already named these.
So these cards live under the elevated category
311:31 - and this has a title, some copy, body copy,
and image and actions, which is all stated
311:39 - there.
So I'm gonna click on that rename this layer,
311:42 - or frame minaret.
And now we can go ahead and specify the width
311:47 - and height of this search set to 344 dips
in terms of width 148 dips and height.
311:54 - Now that we have that specified the The more
I look at these Quarter this quarter as it
311:59 - should be set to four.
Now that we're good to go, it just looked
312:04 - different when we didn't resize it to its
proper dimensions, which is fine.
312:09 - So now what we know is that this utilizes
two buttons.
312:13 - And we can pull in a placeholder image from
our assets.
312:16 - To figure out what with our material design
system library enable, we can go ahead and
312:22 - search in our assets panel for QA type, and
I can just type in placeholder and there we
312:26 - go.
I can also use this icon placeholder as an
312:30 - image placeholder.
So if I drag this in here, I can set the width
312:34 - and height there to add dips.
And then I can ensure that I am positioning
312:39 - this properly, by 16, dips on top on the top
and right, and I'm going to sure set the constraints
312:46 - to top and right so that it sticks, it stays
it maintains that spacing on the top and right
312:56 - when resized.
Now we can go ahead in our assets panel and
313:02 - search for buttons.
And here we have the text button variant,
313:07 - all we can do is label this action one.
And I can select this again and just set the
313:18 - spacing properly.
So this spacing is set to 16 from the beginning
313:24 - of this text.
So what that means is I pull out my rulers
313:29 - and I moved this over 16 pixels.
Right now it's 16 pixels to the left or dips
313:35 - to the left of of the frame.
But it wants the typography to be the beginning
313:41 - of the text to be 16 dips away.
So what I can do with this space properly,
313:47 - in regards to the bounding box of the button,
I can add this ruler here.
313:52 - And with that ruler, I can go ahead and push
this text inward.
313:55 - So now that text is 16 dips to the left of
the of the of the parent frame there.
314:02 - And then I can go ahead and just duplicate
this and it is set to eight dips to the right,
314:10 - the second action here the second button,
or we label that action too.
314:16 - And we should be good.
And now we just need to add in our body copy
314:20 - and a title.
So what I'm going to pull out my text here,
314:25 - ensure that that's set to text and text and
iconography color style, which has had a high
314:30 - emphasis and I'm going to label this title
whoops, I'm going to select the proper textile.
314:37 - And that should be set to one let's see here,
subtitle one I currently have specified.
314:45 - So title goes here.
And with that specified, I'm gonna make sure
314:49 - the type in the type details the resizing
is set to auto width, so it snaps accordingly,
314:54 - and adheres to the proper line height specified
in our type system.
314:58 - And I'm gonna use my shortcut keys option
w n A to snap to the top and left, and then
315:03 - push this over twice, and down twice.
So I have, so I have padding top and left
315:09 - set to 16 because I've modified my nudge amount
to eight on the small nudge as opposed to
315:14 - my big nudge.
So I've reversed this, I highly recommend
315:18 - you modifying your judgment to that so you
don't have to move it incremented by one all
315:24 - the time.
Since this system is divisible by eight, I
315:27 - can just move it in increments of eight every
time I use the arrow keys, which is very efficient.
315:33 - So I'm going to duplicate this style here.
And what we have what we're seeing here is
315:39 - our textbox should, let's specify the body
to body one there wo two, body two, and text
315:50 - to body two and then go ahead and apply medium
emphasis to the color style.
315:56 - And with that media emphasis applied, I'm
going to just copy what's written in this
316:00 - spec component, secondary line text lorem
ipsum.
316:05 - De lor, sit omit.
Not sure if that's actually a word.
316:13 - That's all right.
And now that I have that specified, I'm gonna
316:17 - push this up eight pixels.
And what I want to ensure is that the text
316:20 - box is 16 pixels to the right of the image
right now it's set to 21.
316:26 - So I can go ahead and increase that by five.
And now it's set to 16.
316:32 - When I can do is set the constraints to top
left and right and bottom if need be.
316:41 - And then as you can see here, our buttons
are eight dips from the top of this bount
316:47 - text bounding box and everything is divisible
has the proper measurements and whatnot so
316:54 - that is fantastic.
Now all we have to do is just double check
317:01 - our parameters here, things are set to 16.
And we are good to go, we have now created
317:11 - our first card, actually, the last thing we
need to do is go ahead and go to our effects
317:15 - and apply that elevation.
So that to one dip.
317:19 - And now we're good to go.
So we've created our first card.
317:24 - And we can kind of double check some things
and see if this utilizes a different Subtitle
317:35 - by referencing materials documentation.
So if we go to our specs and just scroll up
317:42 - a bit, it'll tell you it, the title actually
uses an h6 and it uses body one.
317:51 - So if I say if I selected body one, whoops.
But that's for a certain theme.
318:00 - So just take note of that, that we should
adhere to the styles being used and referenced
318:06 - if, even though the properties may be different
in another theme, it's still using those those
318:12 - styles.
So now I'm going to go ahead and change the
318:15 - subtitle to an age six.
And that is good to go.
318:20 - I now have everything attached accordingly.
And yeah, we're good.
318:28 - So apparently, this just uses Body Body one
and met it for metadata, it uses body two.
318:36 - So let's go ahead and modify this accordingly.
And now that we have modified that our card
318:44 - should be good to go.
But it actually doesn't look like that's a
318:46 - proper textile, that should be smaller, the
font, so we'll leave it as is.
318:55 - And we're going to go all the constraints
and measurements are properly set.
318:59 - And we can go ahead and duplicate this and
publish this as a main component.
319:05 - So we now have our first component created.
And we can even go ahead and create another
319:12 - version of this where it's actually an outline
card.
319:16 - So for the outline card, what we can do is
we're going to want to do first is remove
319:26 - this elevation style, add a stroke, and it's
set to one pixel as one dip, as you can see
319:34 - here, one dip, and the color set to undersurfaces
surface overlay.
319:40 - And that is the outline of the the card.
As you can see, there's zoomed in.
319:47 - And with that a lot of these properties are
actually the same, but the height of our card
319:56 - is is is taller.
And one thing I did mess up on this card is
320:02 - that that the spacing below these two buttons
should be set to eight dips instead of 16
320:10 - dips.
So I'm gonna go ahead and click on this Hold
320:14 - COMMAND as I as I change these dimensions
here.
320:19 - And now I have it set to eight deaths from
the bottom.
320:22 - And this card should be good to go.
Now go ahead and touch this up here.
320:28 - I might just reduplicate this.
So I don't want to modify the dimensions or
320:34 - the spacing there and detach it holding option
command B.
320:39 - And then I'm going to re label this layer
and remove that elevation.
320:45 - And we're going to want to select outlined
the naming convention I've specified here
320:49 - already beforehand.
And it this naming convention clearly states
320:55 - what type of card This is.
It's an outline card with an overline utilizing
321:01 - overline a title, which includes the body
copy blood, and then an image and some actions
321:10 - being those actions being our buttons.
So now I'm gonna go ahead and reapply that
321:15 - stroke color style, which is surfaces surface
overlay.
321:19 - And that's set to one dip or pixel.
And what we're going to do is increase the
321:26 - height of this card real quick.
And we're going to need to push this content
321:31 - down because the baseline of this headline
or this header is 40 dips away from the baseline
321:41 - of the overline text.
So what I can do is just push this content
321:46 - down, duplicate this textile, or this text
and then change it to overline with overload
321:56 - specified.
I'm just going to write out oh line.
321:59 - And then I'm going to ensure that it is 16
dips from the top, which it is.
322:07 - So now that we have our overline specified,
I'm going to go ahead and make sure that the
322:14 - baseline is 40 dips away from, from the typography
here from the from the title here, and this
322:20 - title uses an h5.
So it's slightly bigger, as as you can see,
322:26 - now I'm gonna go ahead and double check, add
some, add this red line to the first baseline,
322:34 - add a red line to the second baseline to the
title here, which is I'm going to call it
322:40 - headline five.
And then I'm gonna grab a square and just
322:43 - calculate that manually.
So that is currently set to 41.
322:46 - So we want to do we were pretty close, push
that up one by default.
322:52 - And now it's set to 40.
Right there, as you can see, which is exactly
322:58 - what we wanted to achieve.
So that is fantastic.
323:00 - I can have my rulers hitting shift R.
And we're good to go in that regard.
323:05 - So let's go ahead and close out this spacing
from the headline and this text.
323:11 - And this baseline of the headline is 24 dips
above the baseline of this body copy.
323:19 - So we can go ahead and do the same process
here.
323:22 - And just add another red line here to this
body copy, grab a rectangle and ensure that
323:34 - this is all being done properly and is currently
has a height of 27.
323:40 - So we're going to want to do is push that
up through few pixels and ensure that this
323:48 - is set to 24.
Now, the baseline is not 24 pips away from
323:52 - the baseline of the headline, the header five,
specifically, h5 and our textiles there.
324:00 - And we'll go ahead and double check our spacing
between the body copy and buttons.
324:09 - And that for some reason isn't specified in
our spec, but it is specified here in this
324:22 - so it may looks like it's set to 16 pixels
below the typography and then below the buttons
324:32 - themselves.
I go ahead and rename those buttons to buttons
324:39 - from like getting confused between the types
of buttons in the other card, I can go ahead
324:49 - and double check these elements and push them
over.
324:55 - So the padding on the left is set to 16 now
so that is more consistent.
325:03 - And you'll notice that the the buttons actually
pushed in now in the buttons type isn't aligned
325:09 - with the type of the body copy right there.
So that is important to take note of it'll
325:14 - be slow, it'll appear visually slightly indented,
then I can change the spacing between the
325:19 - two buttons to eight dips again as as it should
be a dips there, and then eight dips below
325:25 - the buttons.
So now I'm going to go ahead and just grab
325:30 - this car to hold down Command and pull this
up.
325:32 - It's currently set to nine dip smoothie below.
So if I push that up one more pixel, we're
325:39 - good to go.
It's now eight dips below and now everything
325:41 - is up to spec as need be river overline the
title and the body copy and the image which
325:50 - we can replace here in the fill style.
And just select an image there.
325:55 - So when designers duplicate this, and then
we have our actions which are buttons.
326:00 - So now that that's done, that is fantastic.
We'll go ahead and create our next card.
326:06 - So got that as the main component now.
Next, we're going to go ahead and tackle this
326:12 - more complex component and and what we're
going to need to do is we actually need this
326:21 - component here we have this set of stars so
stars in the spec, I'm going to disregard
326:29 - that from this component because I actually
have some purposes for the this component
326:35 - in particular that I want to use later on.
So I'm going to build without the stars because
326:38 - I don't need to communicate the those ratings.
And what I can do is create this variant year,
326:47 - specify the width to 344 dips and the height
510 dips and the corner radius to four.
326:56 - This is an elevated car.
So I'm gonna go to my effects and apply the
327:01 - one dip elevation, then we'll go to my Phil
and select surfaces surface color style.
327:09 - And what that is linked, I'm gonna go ahead
and just ensure that I have the proper name
327:18 - for this component in my components and then
we have a image placeholder as you can see
327:27 - here, I can just grab the placeholder that
we have in our system and specify the width
327:35 - to 344 dips, and then the height 294.
And then a hold down Option W and a to snap
327:42 - that properly into our component as needed.
And then we'll set the constraints to top
327:49 - left and right, so that way when this stretches
to needs to be stretched, it doesn't get all
327:55 - funky.
it'll snap to all the edges properly, so it
328:00 - looks clean.
And with that said, we have a title that is
328:04 - 44 dips, the baseline of this title is 44
dips from the top of this image.
328:10 - So if I go ahead and add this title in here,
then apply the proper text style of subtitle
328:21 - one.
Or actually, it's the h5 title, I believe.
328:27 - There we go.
And now I'm going to set select the resizing
328:31 - and set that to auto width, I'm going to push
this down and push that down a bit, push that
328:38 - to 30.
and double check the baseline.
328:44 - So the baseline from the image should be set
to 44, which is actually right here.
328:53 - So it's actually 24.
dips from the top of the image, with the baseline
329:01 - being 44 dips from the top.
And now I want to disregard these stars here.
329:08 - And even, I can add some secondary text.
So at the secondary text, I'm going to utilize
329:14 - the caption textiles.
If I duplicate this, change the text style
329:22 - and go to caption, I can select that set,
set that to secondary text.
329:28 - Make sure that's 16 Dibs from the left of
the container of the card.
329:36 - And I'm going to make sure both these fill
styles are set to text and iconography.
329:45 - High emphasis.
And once that is done, I'm going to go ahead
329:49 - and duplicate this secondary textile, push
it down and stretch out the text box so that
329:57 - it is 24 deaths from the right of the container
the car container.
330:03 - And with that, it's going to push that over
three notes set to 24 from the right to the
330:11 - constraints, the top left and right.
And then I'm just going to add in this body
330:20 - copy that is already in this card.
And I'm going to pause it real quick.
330:28 - This typography specified, you'll notice that
it uses a divider too.
330:32 - So we can even pull in our divider component
that we've created a divider there, pull that
330:38 - in, and you'll notice that it is 16 has a
padding of 16 dips on the left and 20 and
330:44 - 16 dips on the right so we can bring and we
can do the math we want to set the width of
330:50 - this component is 344.
And then minus 32 is 312.
330:57 - So we can change the width of this to the
divider to 312.
331:00 - So when we bring it into our component, and
it's a little hard to grab.
331:08 - So I can just go to my Layers panel and drag
it in if I need to.
331:16 - And then hold down Option H and that will
align it horizontally and then option v to
331:22 - align it vertically, the alignment properly
and I can push this down and ensure that that
331:28 - is 24 dips from the baseline of the second
baseline of text in this body body copy.
331:37 - So if I push this up, I need to make sure
that that's at the 24 so if I grab a text
331:46 - box, I can measure 24 dips from the bottom.
I was rough.
331:53 - Almost there.
I was close.
331:55 - So Now that that set to the baseline is 24
dips away.
332:02 - So I'm going to push this down on more.
Whoops, I'm going to grab this divider, push
332:09 - it down one more pixel, and it's from, from
the textbox.
332:14 - That's on this body copy, it's set to 20.
So that's good to note.
332:19 - And we need to change the color of this text,
the spotty copy from high emphasis to medium
332:25 - emphasis.
And now that is accurate.
332:29 - With that divider implemented, we can go ahead
and add another caption, we're actually it's
332:35 - a subtitle.
So I can duplicate this one, and push this
332:39 - down a bit, label it subtitle, then just change
the text style to subtitle.
332:45 - Now that we have the subtitle must like subtitle
to uses a smaller subtitle it looks like just
332:52 - to maintain the hierarchy there.
As these as subtitle one, I believe, and then
333:02 - just make sure that the spacing is appropriated.
So it's the baseline is 36 dips from the divider,
333:11 - so we can go ahead and measure that.
From this divider.
333:16 - Currently, we have it 41 dips away, so I can
push up this element.
333:25 - And now we have this 36 steps away from the
divider, which is great.
333:35 - And I'm going to go ahead and add in some
chip components.
333:39 - So we have some action chips being utilized
here.
333:41 - So if I type in action chip, or just actually
chip into our assets panel, I can drag a chip
333:51 - in.
And what I'm gonna do with this chip is I
333:55 - can duplicate it a couple times, right, and
they're spaced eight dips away from each other.
334:01 - So I'm gonna throw three chips in here.
And they're, they're all labeled differently
334:07 - item one.
One thing we need to ensure is that these
334:15 - chips utilize auto layout, and it doesn't
look like it's utilizing auto layout right
334:20 - now.
Because I needed to add up auto layout to
334:26 - my chips because they weren't adapting to
the size of the text.
334:32 - So now if I go in and type in item one, it
will maintain the proper spacing on the left
334:38 - and right.
And here you can see we have four chips.
334:40 - So let's go ahead and select those.
Here we have item 123, and four.
334:47 - So I'm just going to label those accordingly.
And now, I can go ahead and just restructure
334:56 - the spacing there, make sure those are all
eight dips apart.
334:59 - And I'm gonna go and drag and drop this into
my v component here.
335:05 - And it specifies the baseline 14 dips away
from the top of the chip.
335:10 - And I'm assuming that that is actually eight
dips away from from the bounding box and the
335:17 - typography, I can go ahead and double check
that.
335:20 - And technically it is it's the baseline here
is 15 pips away, but we're gonna go and maintain
335:27 - the spacing from the top of the subtitle and
keep that at eight.
335:33 - And now that we have that specified, all we're
missing is an action below, which is 20 steps
335:41 - away from the chip.
So if I go ahead and go to my assets and type
335:45 - in my assets panel, type in button, search
for that button.
335:49 - It's not appearing.
So if I go ahead and re type that and it searches
336:00 - and I can grab this text button and just drag
that into the canvas.
336:08 - I can just rename this to action one.
And once this action is being renamed, I can
336:16 - go ahead and drag it into my new card component
and ensure that the spacing is set accordingly.
336:22 - Make sure that's set to 20.
That's indicated in the spec here 20 away
336:28 - and it is eight digit pixels away the the
outer frame of the buttons eight dips away
336:35 - from the parent container because it will
align the typography with a chip here you
336:41 - see that that's why that button is eight dips
away because it aligns the typography of the
336:47 - button with the rest of the content in the
card.
336:49 - And then I just need to specify that this
is eight dips below the spacing.
336:56 - So I can grab the parent container hold down
Command as I drag up, make sure that's set
337:02 - to eight, right now we have it at five.
So just push this down three pixels, and we
337:07 - are golden.
Awesome.
337:10 - So we've now created one of the more complex
card components in material design one of
337:16 - the examples again, so I'm going to go ahead
and challenge you to create this car component
337:21 - by yourself.
And then I'm going to pause the video and
337:24 - show you the optimal, optimal way of building
out these car components.
337:30 - All right, I'm gonna pause.
So I have now finished creating all the elements,
337:35 - I created this variant here, the exact replica,
and I did it a little differently this time.
337:42 - And the reason I wanted to go through this
exercise the way I just did before I show
337:46 - you everything is very intentional, I want
to showcase to you the manual process of building
337:50 - this component.
And then the power of having these elements
337:53 - that I just created to, to use as building
blocks for design system, not only for yourself,
337:58 - but for the designers you cater to if you
ever work on design systems team.
338:03 - So here, we here you can see that we've created
we've manually created our cards, here are
338:09 - some examples of have more composed cards.
And then I went ahead during this break, and
338:15 - not only made these elements here, but I compose
them properly.
338:20 - So when I say I compose them properly, these
these are all specifically elements for cards,
338:26 - the width of these cards are defined by 344,
certain variants of them.
338:32 - And here's like, we have them labeled as elements,
textiles, and you can think of them as tiles
338:37 - as you, as you add tile onto a floor, you
can arrange them and add them and stack them
338:42 - and whatnot.
So that's exactly what we're going to do.
338:45 - So with these elements, I'm gonna go I can
break down what these are composed of.
338:51 - And then it's wrapped in a frame with the
proper background color, which is set to surface,
338:56 - the surface and then the proper elevation,
the resting elevations being set to one dip.
339:02 - And then of course, the the elevated status
set to eight dips there, as you can see the
339:07 - two differences there.
And in this frame, if I click on this frame,
339:13 - go ahead and I go ahead and check out.
Whoops, I go ahead and check out the elements
339:19 - in this frame, I have three pieces in this
component.
339:23 - So I can drag these out.
And notice that they don't have any background
339:27 - color applied to them except this is an icon,
I mean image placeholder.
339:32 - So and see this is what is composed of these
three elements here.
339:38 - So that is super important to note and understand.
So uses these these elements to start building
339:44 - and adding on top of each other into the card.
And these are all elements you can have in
339:49 - your design system.
And it's explicitly.
339:53 - That's why it's there.
So we can go ahead and build out an example.
339:57 - So you could create several examples of this.
So we can start off with this heading, I can
340:03 - copy that heading, and maybe the heading has
supportive text, right.
340:07 - And then I can go go ahead and add in like
an image, this supportive image above the
340:16 - heading.
So we have the media and then the heading
340:19 - there.
And then we have the support of text below.
340:24 - So what I can do now that these are all connected,
I can select them all and then wrap them in
340:29 - a frame, I select them all and then I hit
option Command G to create a frame.
340:33 - And now I'm going to click on the fill color,
go to surfaces and select surface.
340:38 - Ensure I have the proper rounded corner radius
that that the four pixels or dips there, and
340:45 - then click clip content.
And we're gonna go to effects and select one
340:50 - dip on the elevation styles and look out quick,
we were able to build a card component using
340:56 - elements as opposed to going in and ensuring
everything's pixel perfect dragging and dropping
341:00 - stuff around.
So if you do it, if you build out these elements
341:04 - once pixel with pixel precision pixel perfection,
you should be good to go.
341:11 - Today, we're at a design Academy, and we're
going to be creating some chip components.
341:18 - And let's just give you the general overview
of this video.
341:21 - We're going to Overview The chip components
first, how they're used, what they are, and
341:26 - then also building out these chip components.
And we'll go ahead and open the link here
341:32 - in our exercise file for the chips documentation.
And once that opens up, go ahead and once
341:38 - that loads, you can see that chips are compact
elements that represent an input attribute
341:44 - or action.
So this is here in our design.
341:50 - This is our chip here as you can see, and
it is essentially in this text Where it's
341:59 - specifying who to send an email to.
And it's this person labeled Peyton Smith,
342:05 - named pin Smith, excuse me.
And as you can see, once the email has been
342:10 - typed out or the username, and it's been selected,
it turns into a chip.
342:14 - And there is a little image as well to represent
who that user is that profile picture.
342:20 - And with that context in mind, we can go ahead
and understand the usage.
342:24 - It allows users to enter information, make
selections, filter content, or trigger actions.
342:29 - While buttons are expected to appear consistently
and with familiar calls to actions.
342:35 - shifts should appear dynamically as a group
of multiple interactive elements.
342:41 - And here you can see the principles they're
intentionally compact, relevant, so they have
342:47 - clear and helpful relay information, information
in relation to the content or task that is
342:54 - represented in the UI.
And chips should make tasks easier to complete
342:59 - or content easier to sort.
And here we have all of the chip types here,
343:04 - as you can see.
And we have an anatomy of one of the most
343:09 - complex chips here.
So we have the generic container that holds
343:13 - all of the chip elements and their size is
determined by those elements.
343:17 - Here you can see we have an optional thumbnail,
which is the leading icon here, which can
343:22 - be utilized to identify entities such as profiles,
by displaying an avatar logo or icon there.
343:30 - And then we also have the the text, of course,
to display the entity name, description, tag
343:37 - action, or, or conversational.
And then the fourth element to this anatomic
343:42 - breakdown is the input chips can include a
remove icon, indicating that you can remove
343:49 - that entire chip if need be.
And we're we have a breakdown of all the usages
343:55 - for the different types.
But we're not going to get into that I recommend
343:57 - you going through and consuming that information
as needed.
344:02 - And here, we have all the types that we're
going to be creating.
344:04 - But one thing I want you to note is that three
of these chips are the same, but there are
344:11 - explicitly stated as different chips in this
documentation.
344:16 - And I just want us to kind of take note of
that and pay attention.
344:19 - So here in the specs, we have this action
chip, the outline chip choice chip filter.
344:27 - And we have the input chips and the chips,
an example of chips in groups where they have
344:33 - a spacing of eight dips there between each
chip.
344:36 - And you'll notice that the action choice and
filter chip are all the same exact chip, but
344:41 - the underlying functionality could be different,
which is kind of the point I wanted to get
344:46 - to there.
And with that stated, we can go ahead and
344:49 - jump into our finger file and start building
out these chips.
344:51 - And I'm gonna go ahead, ensure that I have
my material design system library enabled
344:57 - in this exercise file.
And with that said, we can go ahead and start
345:01 - creating these chips.
So with this chip credit, I'm gonna go ahead
345:06 - and create a frame.
And before I do, I'm gonna live copy that
345:11 - name, label this label this action frame name,
because this is going to be our action chip.
345:18 - And I'm gonna go ahead and add the the background
color surface under surfaces overlay.
345:25 - And then I'm going to set the rounded corners
to 16.
345:28 - So it's nice and nice and round there.
And I'm going to set the height to 32.
345:33 - And then we'll go ahead and modify the, the
width as needed.
345:39 - And the nice thing is we'll be able to quickly
add on allows for this.
345:42 - So it dynamically adapts to the text string
within it.
345:44 - So you don't have to manually resize it, which
is very helpful.
345:48 - So I want to go ahead and add this text style
here.
345:52 - And by adding this textile, I can go ahead
and select the body to textile because that
345:56 - is what's utilizing chips.
And I can go ahead and label this action chip.
346:00 - And I want by default, my my my typography
to resize automatically.
346:06 - And then I'm going to go ahead and center
this.
346:09 - And what I'm going to do is hold down shift
a, that creates auto layout, then I'm going
346:14 - to hit shift a again, which creates auto layout
on the parent frame.
346:18 - And now you'll notice I can adjust the dip
padding to 12 dips the left and right as opposed
346:23 - to fit the one here, which is what specified
currently.
346:26 - So if I type in 12, I have now shrunken that
to 12.
346:29 - And it currently says 13 because autolayout
by default adds one extra pixel horizontally
346:36 - and vertically to your element, which is annoying
in my opinion.
346:41 - So we if we reset that you'll now it'll showcase
that it's set to 12 on the left and right
346:46 - and is vertically centered, which is great
on the y axis and we have now created our
346:52 - first chip and we can go ahead and bang out
the two other chips here.
346:57 - The choice chip in the filter So here are
some intricate things to understand about
347:01 - the design system.
And here is where decisions are made on on
347:07 - a per team basis, as I like to call it.
So we have this action ship, right.
347:12 - And there are three types of this, this action
ship where they all look the same visually.
347:21 - But the the functionality under the hood could
be much different and utilize in different
347:26 - scenarios.
So say this component, built in code is represented
347:33 - differently, does that mean you want to reflect
that in your designs as well? Or do you just
347:37 - want to utilize the same exact design and
just call that the action chip, instead of
347:45 - having the actual chip choice and filter chip?
Well, to be consistent, in terms of the naming
347:52 - conventions you have in your design files,
and what engineers have developed on the front
347:57 - end, you may want to create three, three variants
of this.
348:03 - So in order to do so all of the styling is
the same.
348:06 - So I'm just going to duplicate this, and I'm
going to make this action ship a component.
348:12 - And with that being a component, I'm going
to label this label.
348:18 - And then I'm going to go ahead and rename
this the the choice ship, and then enter and
348:23 - rename the frame as label.
And then I'm going to rename this filter chip,
348:29 - I'm gonna label that filter.
And I'm gonna rename this text autolayout
348:36 - frame to label layer two label, I can go ahead
and select both of these, both of those elements
348:44 - and click on that and select create multiple
components.
348:47 - And now I have all three component variants,
which is very important, what I'm going to
348:51 - need to do is rename them.
So this is the choice chip.
348:56 - This is the filter chip.
And now we are rocking and rolling, we have
349:02 - those three variants knocked out of the park.
And what we can do now is focus on the outline
349:10 - chip and the input chip.
So with that said, I'm going to go ahead and
349:17 - grab this chip here, to get a head start.
And what this chip has currently is I'm gonna
349:26 - detach this and label this out action outlined.
And once it's labeled properly, I'm going
349:37 - to go ahead and get rid of the autolayout
by holding down Command Option, actually just
349:42 - Option Shift A, then I'm going to do the same
exact thing to the other autolab frame layer,
349:48 - and then hit Option Shift a and then hit Command
Shift G to remove that frame from the Texas
349:56 - it's not needed.
So with this typography here, what we're going
350:00 - to need right now is an icon placeholder because
this is an outline chip.
350:07 - So what I can go ahead and do is in this file,
I already have an icon placeholder, copy that
350:13 - and I'm going to hold that command on this
bounding box on the left to stretch that out
350:19 - and paste this and I'm going to snap this
to the left.
350:22 - And make sure that is four pixels to the left
there and is centered vertically, and then
350:29 - move this text over, add this constraint to
set the constraints in this text right and
350:35 - center on the y axis and then push this over
until the typography is eight pixels away
350:42 - from the icon here.
So it's got to move this over about essentially
350:50 - three pixels.
So I got to move that over one more pixel.
350:53 - Whoops, there we go.
Once that's specified there, we got those
350:58 - specs set properly.
We've got a and the padding is set to 12 tips
351:04 - on the right and eight on the left, we are
good to go.
351:06 - And that is our action outlined action chip.
I am what we're going to want to do now is
351:12 - specify a one pixel stroke and set that to
inside which it already is by default, and
351:19 - we're going to add the surfaces overlay color
to the stroke but I'm going to remove that
351:24 - color style right there.
And I'm going to go to surfaces Overlay and
351:29 - I now have that specified and if that icon
placeholders too hard to see we can change
351:36 - the color of that.
And now we have our action outline chip and
351:43 - we can go ahead and even add auto layout to
this so it the spacing is dynamic, so you
351:47 - don't have to manually do this all the time.
So I hit shift a to make auto layout and then
351:54 - I'm going to remove the default horizontal
and vertical padding And then realign this
352:00 - up, you have to realign it when you do that,
and then I'm going to go ahead and move that
352:06 - over, make sure that's four dips to the left
here.
352:09 - And then we'll add that to this as well, and
remove the, the one pixel padding added and
352:19 - re realign these elements, which is annoying.
And then what I'm going to do is go ahead
352:26 - and shift click on on both of these in the
Layers panel and hit shift a.
352:31 - And what I've essentially done is maintain
the spacing between this this these two elements
352:37 - by creating that parent.
And now what I can do is go ahead and select
352:43 - my action outlined frame the parent frame
and hit shift a.
352:49 - And I can go ahead and specify the spacing
for that element as well.
352:55 - And it will be dynamic, but one thing to note
is that this can auto layout can get tricky,
353:03 - because you can't individually specify the
the spacing.
353:09 - So if I want this to be 12 on this side, it's
currently not possible to do that thought
353:16 - all out.
So what you can do is just go ahead and undo
353:19 - those actions.
And you may have to manually readjust this.
353:22 - And we'll tackle this in the in the next in
our next video in our next section of the
353:29 - course Excuse me.
So now that we've created this outline action
353:35 - chip, we can go ahead and duplicate it, and
then create that as a main component.
353:47 - Once that's specified, we go ahead and start
tackling this input chip more is slightly
353:53 - different, we're gonna, I'm gonna have to
end up removing the auto layout in frames,
354:03 - here.
And then.
354:06 - So I was using shortcut key Option Shift a
to remove the auto layout and then Command
354:11 - Shift G to remove the frame.
As that is what is left.
354:16 - Once you create remove auto layout, it turns
into a frame and then you have to remove the
354:20 - frame.
So with that set, I will label this and put
354:27 - whoops and put ship.
All the proper padding has been specified
354:36 - right now we have that icon placeholder.
And now we need to add a an actionable icon
354:43 - here.
And I already have that in here in our design
354:46 - system library that is called the cancel icon.
So I can copy that.
354:55 - Select your your parent frame, and then paste
it in there.
354:59 - If need be, whoops, I'm going to drag this
here.
355:04 - And I'm going to reset the size to 18 by 18.
And go ahead and drag this into this component
355:10 - and tshirts vertically center and snap that
to the right and push that over roughly Yep,
355:17 - eight dips.
And with that specified, we now have our input
355:22 - chip.
But what we're going to need to do is set
355:24 - the constraints on this action icon to right
in center vertically.
355:28 - And then I'm going to go ahead and push this
content over so that there's only eight dips
355:33 - between the text and this action icon.
And we're going to set that icon placeholder
355:42 - to left and center vertically.
And then let set this to left and center vertically.
355:50 - And then move this over and ensure I have
that spacing set appropriately.
355:59 - So I have eight dips on the left and right
of this text.
356:03 - And one thing I'm missing is a fill.
And I need to remove the stroke and add the
356:08 - surfaces overlay color to this chip.
And once I've specified that we are now good
356:17 - to go and we've created all of the chip types
for our design system.
356:23 - All we need to do is label this input.
And once we specify that we have now created
356:32 - all the main components necessary for our
chips.
356:37 - And that is all I have to show you today.
Thanks so much for watching, and I'll catch
356:40 - you in the next one.
I think I almost forgot, in addition to our
356:43 - autolayout autolab tends to resize the height
of your components.
356:47 - So we want to make sure we go into our components
here as we have the proper constraints set.
356:53 - We want to double check we have the proper
constraints set for our components.
356:58 - And with auto layout specified on some of
these components, we're going to want to resize
357:06 - some of these elements and ensure they're
good to go.
357:09 - Just make sure that's set to 32 is the height
for all of these chips are set to 32.
357:15 - And I'm gonna go ahead and do the same thing
for the rest of these components.
357:20 - And since the constraints are set to center
vertically, they will dynamically adjust properly.
357:28 - And some of these have auto layout.
So I can't just manually adjust the height
357:35 - with auto layout implemented.
So what I can do is, is remove that auto layout
357:42 - and readjust that height.
And do the same thing here with this component.
357:49 - Notice that when I remove the auto layout,
you can't see it, I'm using a shortcut key
357:55 - Option Shift a, it preserves the the master
I mean main component icon.
358:00 - But watch, watch this can't watch the bounds
change, I'll be able to change the height
358:04 - after this.
So I just hit Option Shift a, it's now changed
358:08 - the bounding box, and I'm going to go ahead
and crease that by one pixel on each side.
358:13 - All the spacing is maintained and whatnot,
and we are good to go.
358:19 - We'll be building out dialogues.
And we're gonna start off with understanding
358:22 - what dialogues are and how they're used and
why.
358:26 - And we're going to build out variants of that
dialogue.
358:28 - And I'll also challenge you to building out
some variants as well, I have all the screenshots
358:32 - here specified of the barriers we'll be making.
And then we'll go ahead and just dig into
358:37 - the documentation by opening this link.
Once you have that open here you can see that
358:42 - dialogues inform users about a task and contain
critical information and require decisions
358:48 - or involve multiple tasks within that dialog.
So here, we can see that this dialogue is
358:55 - triggered based on a button right.
And you'll notice that there's this background
359:00 - overlay, we that's called a scrim.
And we have that in our design system as a
359:05 - color style not only as a color style, but
scrim that we can pull from our system.
359:10 - So if we go to our figma file, let's just
enable that here.
359:13 - For go access our team library modal turn
on the material design system library, I could
359:19 - go ahead and search for scrim and we already
have it accessible, we can drag and drop it
359:25 - here to utilize later.
So that is a scrim for you and used in this
359:30 - context.
And then you can see that there's some elevation
359:32 - around the edges of this dialog being used.
And there's a divider, and in this in this
359:37 - confirmation variant, you'll see that there's
this menu with some content overflowing.
359:44 - So we'll go ahead and build out this this
variant.
359:47 - And we'll go ahead and build out a what is
labeled a simple dialog here in this interactive
359:53 - demo, where we have list items here.
And you'll notice that the states of these
359:58 - do not spam the entire width of the dialog,
which is interesting.
360:01 - So if we were to inspect the code, you'll
see that this this is a list item.
360:06 - And there's some some padding set to 16 on
the left and right of this element.
360:11 - So that is important to note there.
And on top of that in the parent element,
360:17 - there is a padding of eight on the left and
right as well.
360:21 - So that is padding on the left and right of
this dialog that is not applying to the list
360:27 - items.
So that's why there's there the the state
360:30 - there is not taking up the full width of that
element.
360:34 - I'm going to close that Inspect Element.
And now we also have an alert dialog variant
360:40 - as well, which we'll be building.
And not only are there those variants for
360:45 - that, but you see there's one with just body
copy, just text and with the title.
360:50 - Or, you know, we have the buttons side by
side or we have the option to have two buttons
360:55 - stacked.
To me, I prefer the side by side variant that
360:58 - seems to be a much more common pattern utilized.
And you'll see that there are other options
361:03 - as well in this dialog, not for simple, but
for the confirmation.
361:07 - There's the stacked variant of buttons as
well and side by side.
361:12 - And we're gonna just go ahead and kind of
just understand the usage.
361:18 - So a dialog is a type of modal window that
appears in front of an application or app
361:24 - content right to provide critical information
or ask for decision dialog, disable all app
361:30 - functionality when they appear and remain
on screen until confirmed dismissed or a required
361:36 - action has been taken.
And these are purposely interruptive which
361:41 - is which refers back to how this is displayed
in front of app content is purposely interruptive.
361:48 - So they should be used sparingly.
And there's some principles around this component
361:53 - where it is focused.
It focuses the user attention to ensure their
361:57 - content is addressed at that point in time
quickly.
362:01 - Dialogue should be direct and communication,
in communicating information and dedicated
362:06 - to completing a task, dialogue should appear
in response to a user task or an action with
362:11 - relevant or contextual information.
So it is very helpful and direct.
362:16 - And here, you can see when to use either a
snack bar banner or dialogue and way dialogue
362:21 - is used when these these, the the task at
hand needs to be very focused in this is considered
362:28 - high priority.
So it blocks the app content below it until
362:34 - the user takes the actions on the dialog or
exits the dialog if the options available.
362:40 - And here you can see some examples there on
mobile and, and the anatomy breakdown.
362:44 - We've got the container title here, some supporting
text and the buttons and the scrim in the
362:50 - background which we've already pulled in their
finger file.
362:51 - And we got some specs down here, we're gonna
just go ahead and dive right in and start
362:56 - building some of these elements out.
So we can go ahead and start with the desktop
363:01 - mobile alerts.
So I'm going to grab this here, I've already
363:05 - had these labeled to place in our sticker
sheet.
363:07 - And what I'm going to do is select these images,
move them over.
363:12 - Here, I've referenced the typestyles as well,
so we know what to utilize.
363:19 - And with this specified, I'm going to set
the width to 560 dips, and with the width
363:25 - specified properly, I'm gonna set the height
to 182 dips and uses a corner radius of four
363:31 - dips.
And then it uses the color surfaces surface
363:35 - for the background, the fill, and then of
course utilizes the effect style of elevation
363:41 - of 24 dip there.
And now we have the baseline specified, we'll
363:46 - go ahead and rename this component to desktop,
forward slash mobile alert as that is the
363:51 - dialog variant label material design.
And we're gonna go ahead and create an H six.
363:58 - With an H six created, I'm going to label
this dialog header as specified in the file
364:04 - there in the screenshot, set the autos, the
sizing to auto width, the resizing, go ahead
364:09 - and select my h six.
And with that specify, we can go ahead and
364:14 - rock and roll here, I'm gonna snap this to
the top and, and left, so it's 24 dips from
364:22 - the left and the baseline set to 40, which
I believe is 24 minutes from the top as well.
364:28 - And we can go ahead and double check that
here by just creating a rectangle and pushing
364:33 - this content down.
So the baseline supposedly set to 40.
364:36 - So I actually need to go ahead and push this
up a bit.
364:39 - And in turn making that padding 21 dips from
the top there with the baseline set to 40.
364:46 - As you can see.
So now that that is specified, we go ahead
364:51 - and specify our color style for that header.
And go in to our color styles, text and iconography
364:59 - and select the high emphasis color style,
we'll go ahead and duplicate that text and
365:06 - select the body one color textile.
And now we have the proper textile set, we
365:13 - need to specify the color style to medium
emphasis.
365:17 - And what we can do essentially is specify
the bounding box of this.
365:24 - And by specifying the bounding box here, I'm
going to go ahead and start to just pay attention
365:31 - the specs.
And the baseline is supposed to set to 36
365:35 - dips from the baseline of the header.
So we could essentially just do that create
365:43 - a whoops, create a push this rectangle down
to the baseline, set that to 36 here.
365:50 - So I just need to push this content up a tad.
So now the baseline set to 36 there.
365:57 - And the bounding box here set to 24 bits on
the left and right of this text box.
366:04 - So what I can do is address this to be a fixed
text box.
366:10 - And that's currently at 23.
Let me push that three pixels.
366:15 - And now it's at 24.
And we want to set the constraints to left
366:18 - and right so I'm holding Shift and selecting
that right constraint.
366:21 - And then what we can do is if I keep typing
lorem ipsum to lorcet Matt, and just keep
366:31 - on typing and a new line will appear.
So with that new line appearing, we're going
366:39 - to go we now just need to justify that the
art we need to have we need to justify our
366:45 - text buttons here.
And our text buttons will potentially be 28
366:54 - dips from the baseline from the bottom here.
From The container.
367:00 - So here, what I'm trying to explain is that
the height of this bottom portion of the dialog
367:06 - is emphasized.
So it's essentially in, you could think of
367:09 - it as being in its own row, where the content
being the buttons within this bottom row here,
367:15 - almost like the footer of this dialog utilizes
two buttons, and the height set to 52.
367:21 - And it's centered within that, that bottom
row there.
367:25 - And this text is essentially what the saying
is that this body copy is 28 dips from the
367:34 - from the baseline of the text here, you see
that distance from here to that that container
367:40 - row.
So to really get that precise, what we can
367:45 - do is I'm going to create a frame here, you
could call this dialogue, you could you we
367:50 - all reference this as footer, and I'm going
to specify the height there to 52 dips.
367:56 - And of course, snap that to the left and bottom,
it's going to hold command and stretch that
368:02 - out and specify the constraints there to bottom
left and right.
368:08 - And we there's no need for a background.
And we need to implement buttons into this.
368:13 - So if we grab open our team library, go to
text button.
368:18 - If I type in button, I got my text button
there, and it's labeled in the spec of action
368:24 - one.
And I duplicate that, and it's eight dips
368:28 - away from this button, and then modify that
text to say action to we are rocking and rolling,
368:37 - go ahead and bring this in and actually just
drag this into that row and specify see how
368:44 - it is center aligned that So essentially,
our spacing is all proper, good to go, we
368:50 - have the proper spacing there, eight dips
between the two buttons, and to the right
368:54 - and the bottom, and the top.
And because of the height being specified
368:58 - to 52 for that bottom footer, and we're good
to go.
369:02 - And all we need to do is really just justify
the distance here between here and so 28.
369:09 - So we're essentially to two pixels off, supposedly,
but this is accurate enough.
369:18 - And it is 23 degrees away from from there
the text box, and we can go ahead and modify
369:25 - that.
So it's set to 24.
369:27 - For now, it's 2024 dips away, and we are good
to go.
369:33 - This is all properly spaced.
And we now have this mobile alert dialog variant,
369:39 - which is up to spec and we can make that a
master component.
369:44 - Before I do, I'm going to duplicate that.
And it's a main component, I apologize.
369:48 - So we have our main component variant.
I'm going to drag that in here.
369:52 - And now that we have our main component variant,
I'm going to go ahead and see what we'll tackle
369:59 - next, what should we tackle next? Well, we
can go ahead and create this confirmation
370:03 - dialog with actions.
Nothing too special about this.
370:09 - The width isn't actually specified in this
and it would kind of just be tedious to build
370:15 - that one out.
So let's start with this one.
370:19 - Actually, not we do have all the details necessary
disregard what I stated, we're going to build
370:24 - up the mobile confirmation dialog.
So I'm going to copy that there.
370:30 - Go ahead and rename this.
Now that I've renamed it, I need to specify
370:36 - the width.
And we have the two actions.
370:38 - And what we can do is this will resize because
we have the constraints set properly.
370:44 - And we need to set constraints to both these
buttons.
370:48 - And these buttons currently are, are snapped
to the top and left of its parent frame, but
370:52 - we need to snap to the bottom and right so
when it resizes it will resize properly.
370:57 - So what we can do is we have all the property
specified properly.
371:03 - So we're good to go.
All we have to do is set the width from 560
371:08 - dips to 280 dips, and look at that we have
everything constrained proportionately.
371:13 - The only thing is we need to push this content
down.
371:16 - And with that content pushed down with the
content pushed down, we should just specify
371:23 - the spacing between this text and the the
footer row.
371:27 - And as you can see it's 28 pips away from
the baseline.
371:30 - So let's go ahead and ensure that that is
implemented properly.
371:36 - It's going to change that to 28.
And what we're going to do is make sure that
371:42 - when we resize this, this parent frame is
a set a ruler here within this frame right
371:50 - here.
So as I resize it, I know that it as I resize
371:55 - the parent frame, I know I need to push this
up one more pixel, I was hoping that that
372:02 - red line would help me align the content,
but it does not actually do that it's not
372:08 - responsive, those red lines, they stay in
place.
372:13 - And then I'm going to drag this text box down
and ensure that that's set to 24.
372:24 - So there we go, that that proper spacing there
on the left and right and bottom.
372:28 - And we now have our confirmation dialog variant
there.
372:32 - And again, this is adhering to a one line
variant.
372:39 - There's also this is also indicating a two
line dialog header there with two lines.
372:44 - So we could even go ahead and do that if we
wanted to.
372:48 - So I can go ahead and do that real quick.
So we will have to push down this content
372:54 - essentially.
So with that, I'm going to just push this
373:00 - copy down.
And then right to bash line dialog header,
373:08 - we now have our two line, I'm going to push
this up to 14, because that gives me the proper
373:15 - spacing here.
of 36 dips there, from from one baseline to
373:23 - another.
So that's set to 36, as I've stated, which
373:27 - is awesome.
So that's properly, proportionately implemented.
373:32 - And now I just need to justify the spacing
of between this text and the actions.
373:39 - So that's set to 28 depth, so we can do is,
this should be much easier is actually go
373:45 - ahead and put push this content, create that
28 dip rectangle to align things, and just
373:53 - push this up for four dips there, and delete
it.
373:57 - And now our baselines are aligned as specified
in the spec.
373:59 - And what I can do is select Resize to Fit
or the shortcut key Shift Option command R.
374:05 - And that should resize the content to the
parent container, which is awesome.
374:11 - Or you can just hold down Command until it
until it snaps to your container.
374:17 - And you now have your two two line dialog
header.
374:22 - And we can go ahead and create this confirmation
dialog with long actions that are stacked.
374:29 - So the difference between this one is that
these buttons are side by side.
374:35 - And these are stack.
And all we have to do is we're not to do a
374:41 - little more moving around here.
So they're in this scenario, there's the concept
374:50 - of the footer doesn't need to be utilized,
it could be where I'm going to remove that.
374:56 - And what I'm going to do is rename this to
turn on speed boost.
375:05 - And with that specified, I'm just gonna align
these properly.
375:12 - And then make sure they're 12 dips in distance
apart, and make sure that 
375:25 - they're dips from the right of this frame.
So it's a ditch in the right and should be
375:36 - depth from the bottom as well.
So now that we have that specified, we have
375:42 - our two buttons.
But what we need to know is the baseline.
375:49 - So 828, so 36 dips from the frame here.
So when you specify 36 dips from the frame,
375:59 - essentially what I did was I just calculated
the distance, the distance from this baseline,
376:06 - and the distance from this between this button
and here, and that's 28 plus eight, which
376:12 - is 36 five, if I'm doing my math, right, and
I can just go ahead and drag this up till
376:19 - it snaps there.
And we're aligned.
376:22 - So I am that appropriate spacing.
And now all I need to do is make sure I drag
376:27 - up the bottom of this element.
So that is eight depth from the bottom of
376:32 - the button.
And I could apply my constraints 30 set properly
376:36 - and we are good to go.
I'm going to specify that this is a confirmation
376:45 - dialog with long actions.
I'm going to make that a main component and
376:52 - next up we can create the mobile alert dialog
I just attached my instance, label this alert
377:02 - dialog.
And the alert dialog is very simple.
377:06 - It doesn't even have a header, it just utilizes
body copy.
377:09 - So what we can go ahead and do is add 52 plus
28 plus 38.
377:16 - Whoops, you can't do math 28 plus 38.
I don't know why it's not doing the math for
377:29 - me there.
So 28 plus 3866 plus 52, that's 118.
377:35 - So the height of this element is going to
be 118.
377:40 - So what we can do is just set this to 118.
And now we can put this text, push this text
377:54 - up, just make it one line.
And now that we have that one line, I'm going
378:00 - to set the typography to resize the width,
automatically, I'll then ensure that the baseline
378:08 - is set appropriately.
So it's set to currently 38 dips from from
378:15 - the top right now it's 40.
There we go at 38.
378:18 - There, I can push this content up, excuse
me.
378:23 - And now I can create a fixed text box.
And I want it to be 24 dips from the right,
378:29 - or 624.
So if I push this in a little more at 22.
378:36 - And now I have it set to 24.
And with that specified, I also want the textbox
378:42 - to be eight dips from the bottom here, I have
this from the bottom of the buttons outer
378:49 - frame.
So currently, it's set to four.
378:56 - Now it's set to eight there, and we're good
to go.
378:59 - We have all the proper spacing specified for
this alert dialog.
379:05 - And we are good to go.
That is it.
379:07 - Maybe we can just rename these to cancel and
discard.
379:15 - And what we can do here is just ensure the
proper spacing is set to 12 currently set
379:20 - that to eight, and then push this over.
For dips.
379:24 - Now it's properly spaced, eight Between the
Buttons and bottom and right of the buttons.
379:30 - So that's great.
And now we have our mobile variant of our
379:33 - alert dialog.
And now that we've created three of these,
379:38 - I can, I want to challenge you to building
out this dialog header here.
379:46 - And we can see that it uses is, well if we
go to our list items, we can easily see that
379:55 - we could use this variant here that I just
pulled the with the icon and text and the
380:03 - action, which is another icon.
And we can resize this accordingly.
380:10 - We can go ahead and actually build this together
by modifying some existing list item components
380:16 - that we have.
So with that said, we have a we're gonna just
380:24 - perfect this, this list item here.
So we're gonna label this icon and text, I've
380:32 - got that list item.
And of course, we've applied constraints already
380:36 - to this.
So it will be worth picking out of the box
380:39 - because because we've already defined that,
and we're just going to set the height of
380:44 - this 256 dips, content stay centered as needed.
And as expected, and then we'll set the height
380:52 - of this 240 by 40.
But we want the height of the icon to be 40
380:57 - by 40.
So I go ahead and implement this, with the
381:01 - icon currently is set to 33 point 33.
So what we can do is I can detach this ungroup
381:09 - it and I just want to make sure I'm scaling
the vector properly.
381:16 - And the frame set to 40 by 40.
As you can see, and we can just use temporarily
381:25 - we have a placeholder.
So if you knew this, actually, you know, refine
381:29 - that icon later on, you can go ahead and do
that.
381:33 - But I'm just gonna use this placeholder so
not to mess with the modifying the the icons
381:37 - that are systematically built from.
For material design.
381:41 - I'm just gonna change the quarter rate on
this icon placeholder so it's 40 by 40.
381:49 - And it is 24 dips from the the left of of
this list item.
381:56 - So now that I've moved that column That's
great.
381:59 - And the text is 20 dips to the left of, of
the the icon as well.
382:04 - And I'm going to make sure that constraints
are set to left and center vertically.
382:08 - And the constraints are good to go on this
text here.
382:13 - And all I have to do is, I could rename this
here so that the text is matching the, what's
382:22 - specified in the spec.
And what we can do is just duplicate this
382:28 - and align this to the bottom of the next list
item.
382:31 - And just label this user two.
And then I can duplicate this again, and just
382:39 - type an ad account.
And feel free to modify the fill of this and
382:45 - change that to the image type and add an image
as needed.
382:53 - As it utilizes icons, there are now that the
spacing specified on these three list items,
382:57 - let's go ahead and make the parent container.
So our parent container, I would imagine is
383:03 - set to Well, in this case set to 320, or two
at a specified here.
383:10 - And that seems like the same width as a simple
dialog.
383:12 - So I'm going to create a frame, go to my sticker
sheet and copy that naming convention.
383:22 - and rename this to the mobile slash simple
dialogue, that the width to 280 corner radius
383:31 - to four color style the filter surfaces surface
and then the effects to the have the effect
383:39 - style of utilizing elevation of 24 dips.
And with that, we're going to modify the width
383:46 - here to whoops, the width is should be good
to go.
383:54 - What we're going to do is add a an H six here,
what I can do is just copy the H six here.
384:04 - And then or I can grab this one liner h6 that
I've already created.
384:10 - And they will position it within this element.
And we need to check and ensure that the baseline
384:16 - of this is set is 40 depths from the top of
this frame.
384:21 - And with that, let's see, set that to 40.
Just push, essentially just pushing that up
384:32 - slightly.
And now that is good to go.
384:36 - We have our dialogue header and is wrapped
in a a frame that has a height of 64.
384:45 - So I'm going to set the vertical constraint
to center on the text.
384:50 - So when I resize the frame I just wrapped
it in it will stay in position as needed.
384:54 - So it's set to 60.
Now it's set to 60 for the height set to 64
385:00 - dips, and it did not properly do what I wanted
it.
385:03 - So I'm going to make sure it's centered within
that frame, then push that to the top, hold
385:08 - down Command and resize this header frame
header, I'm going to label that header.
385:15 - Now I have that set properly.
And then all these list items will stack on
385:21 - top of this frame.
So I can now that they're stacked, these are
385:27 - appropriately sized, I just need to adjust
the width.
385:30 - And we're good to go.
All I need to do is justify resizing this
385:36 - bottom portion.
And I may need to add 16 dips there, the bottom
385:48 - is currently set to 870 and increase that
17% up one and we're gonna go.
385:58 - So we now have achieved our simple dialog
variant.
386:03 - And we have a couple more to create if we
want.
386:08 - I'm actually going to challenge you to building
out the last two elements.
386:14 - And what you're going to find yourself doing
in creating these last two is we've created
386:21 - these four together.
But in these dialogues, you're going to find
386:26 - yourself building out some complex dialogues
here, you're going to come across this, these
386:33 - items or the items overflow and are are being
hidden because of the overflow because we
386:39 - have this, these actions appearing above and
the user can scroll through these items and
386:45 - select one.
So I'm going to challenge you to building
386:47 - that and also challenge you to building out
this fullscreen dialog.
386:53 - What you're not building are these text input
fields in the interface.
386:57 - You could But for the fullscreen dialog, we
might, that's just a bonus for you to create,
387:06 - and challenge yourself.
And, yeah, I'm just gonna pause this video
387:11 - and build out this scrolling confirmation
dialog.
387:13 - And I'll be right back.
So I've now built out my scrolling confirmation
387:19 - dialog variant for mobile.
And essentially what I did was I just recreated
387:24 - it, let me go ahead and grab it.
So our other mobile variant, our simple dialogue,
387:30 - what I did was I copied this, detached it.
And I went to my assets and grabbed my radio
387:38 - checklists, Marriott.
And then I wrapped that in a frame, I set
387:44 - the height, as you can see here, to 48.
And I just specified the proper spacing between
387:50 - all the elements within this list item, then
I just duplicated them.
387:54 - And they were because they're supposed to
stack on top of each other.
387:56 - And since our buttons are labeled properly,
I was able to just swap them between the two
388:05 - states, which was awesome, set the constraints
to vertically, be centered if this height
388:10 - ever gets modified.
And then I grabbed the footer here, and move
388:17 - that to the top of the layer order.
So it looked like it looks like you're able
388:21 - to scroll through this content, as indicated
here.
388:26 - And this footer was already created, all I
had to do was add a divider into this element.
388:31 - And I snap that divider to the top here in
the footer element in the footer frame.
388:37 - And that's all I had to do.
And that's how I created that dialogue there.
388:43 - And yeah, that was how I built that.
And that is all I have to show you today and
388:47 - building out dialogues.
I hope you learned a lot and enjoyed this
388:51 - video.
And I challenge you as a bonus to create this
388:54 - fullscreen dialogue.
We are going to be going over date pickers
389:02 - and we're going to gain a general overview
of what date pickers that are out there and
389:06 - when and how they're used.
And then we're going to build out some date
389:09 - pickers ourselves.
And here we have the documentation.
389:12 - And I'm gonna go ahead and open the link.
And once your link opens, as you can see,
389:19 - date pickers let users select a date or a
range of dates, as you can see here.
389:25 - This specifies the current date and then the
selected date here.
389:29 - And we have a header little edit icon to edit
the date from this field here, this header,
389:33 - drop down menu there and some some arrows
to move between months.
389:42 - and serve.
There's some elevation being utilized.
389:44 - And here's a breakdown of the anatomy of a
mobile calendar date picker.
389:51 - And here you can see that it has a title up
above and then the selected date here being
389:58 - represented.
And then it has the switch to keyboard input
390:02 - icon, which is what this is called.
And then it has the year selection menu.
390:08 - And we also have the the pagination for going
from month to month either forward or backwards.
390:14 - And then we have the current date here.
This is represented with this outline.
390:19 - And then we have the selected date here with
a primary color as the background specified,
390:27 - and some actions there to cancel or hit OK.
And you can see what the mobile date range
390:33 - picker looks like.
So here's a mobile calendar date picker.
390:36 - So this is a calendar date picker.
And then we have the date range picker.
390:41 - So you can specify a start date and a end
date.
390:47 - And then this is the selected range here with
the lighter primary color in the background.
390:53 - Then we have a mobile input picker variant,
bunch of breakdowns of the anatomy there,
390:59 - and whatnot.
And this video is going to be very dense.
391:04 - There's a lot of things going on in this date
picker component, and we're going to do, we're
391:09 - going to break it down, we're gonna we're
really going to simplify it and start off
391:14 - with the little elements that it's composed
of, and then build out those elements accordingly.
391:22 - And with that mental model in mind, we'll
be able to tackle building out these complex
391:28 - components.
So that is awesome.
391:31 - And we're going to be building out not only
mobile variants, but also desktop variants.
391:36 - So that that's great.
and here if we go to our specs, you can see
391:42 - that that we have touch targets specified
for a mobile date picker, where the touch
391:47 - target size for a date picker is set to 32
by 32 dips.
391:54 - And that the this is the recommended approach
here And the outer container is set to 40
392:02 - by 48 nips.
And here we're starting to see the specs of
392:06 - what the calendar header looks like here.
So that is very important.
392:12 - And a bunch of specs specified to right there,
so you don't miss anything, since there's
392:18 - a lot going on.
And here you can see a calendar view for the
392:23 - mobile date picker, and a year selection view.
So on and so forth, we're going to be covering
392:30 - these heavily in figma.
So let's jump right into it.
392:35 - So here, I have a, our soon to be sticker
sheet here.
392:40 - And here's a couple of elements we'll be building
out.
392:42 - So we have the mobile calendar header right
here that we're going to build out, and our
392:49 - mobile calendar picker tool, calendar picker
image here to reference.
392:54 - So I'm gonna move some of these images out
of the way.
393:00 - So just keep these here, push this image up.
And with that, we can go ahead and get started.
393:07 - So I'm gonna go ahead and copy this, this
text, because that's going to be the name
393:14 - of our main component once it's created.
And we can go ahead and start to figure out
393:21 - what the, the width of this calendar view
should be in that set to 328 dips.
393:28 - So we type in 328.
We know how the width specified, but what
393:34 - we need to identify Next is the height of
this calendar header.
393:39 - So here, you can see that it's set to 120.
And then we have 32 plus 24, so 100 and then
393:50 - plus 120.
So with that, we get 176.
393:53 - And the height of this is set to 176.
And now that we have the height, specified
393:59 - properly, we're going to want to also specify
the rounded corners on this parent frame.
394:06 - So set the rounded corners into an independent
corner.
394:08 - So we're going to want to set it to the top
left and top right, and set that to four.
394:13 - Now our corners are rounded on the top.
And we're going to need to do is add in overline
394:22 - text property here.
As you can see, the baseline is set to 32
394:26 - dips.
So if we go ahead and whoops, pull out our
394:31 - text tool, and just specify select date, and
then change the text style to over line, we
394:40 - now have select date specified and all of
our content will be 16 dips to the left, and
394:49 - ensure are actually 24.
My apologies set to 24 dips to the left here
394:53 - in this header.
And then we're gonna check that baseline.
394:57 - And sure it's set to 32.
So 30, we're almost accurate.
395:04 - So now that we have that set there, the baseline
set to 32 are good to go.
395:11 - And one thing we do need is in this exercise
file, here are some icons, I'm going to copy
395:16 - this edit icon.
And I need to place it towards the right of
395:23 - this.
This field, so one thing I need to specify
395:29 - is that what I could do is in my in this component,
if I named this properly in this element,
395:40 - which is a calendar header, I can start to
wrap these elements accordingly.
395:44 - So maybe I want to turn this into a frame
and label this select date row.
395:53 - And with this Rowse, I could, what I want
to do is make sure that I hold out command
395:58 - and snap this to and drag this to the top
and right edges of the parent frame.
396:04 - So that way this content is being isolated
from the the text field here because you see
396:14 - this box specified here this entire screen
you can think of it as a row when you implement
396:21 - this in development.
And then we have a another row below it with
396:26 - a big header.
So we'll go ahead and add that I believe that
396:30 - as an h1, I'm going to specify that exact
date, November 17.
396:34 - On Monday, go to my text styles and select
the h1 and it's clearly not an h1, we're going
396:41 - to want to change that to an h3.
This looks like it's actually an h4.
396:47 - So I'm gonna snap this to the bottom right
and what we want to do is make sure that our
396:54 - text here Is 24 dips from the left.
And not only that, we're gonna have to go
397:04 - ahead and align our icons here.
But on top of that, our typography here, you'll
397:13 - notice in this component below, we have another
portion of the header that has a white background.
397:20 - So what we're going to do is specify the distance
here.
397:26 - So we have 128 72.
So we have a distance, I believe I have about
397:36 - roughly 16.
Here, it's not really clear.
397:40 - So if we subtract 72 plus 3200 420, mm is
104, we're getting 16.
397:52 - So yes, we want to ensure that we have specified
the height of the bottom portion.
398:03 - So what we can do is if we change this background,
or these colors to text, and I cannot content
398:16 - on primary, and then I can change this to
content on primary as well.
398:22 - And I go ahead and select the background fill
of this, the container, the component, and
398:28 - I select that the primary, all I have to do
is I can even duplicate this row, delete the
398:34 - text in that frame, and, and specify this
background to be set to surfaces surface.
398:45 - And I just need to ensure that the height
is set appropriately.
398:47 - So it's set to what is that 32 plus 24, which
will give us 56, the height set to 56 on this
398:58 - on this element.
And I can just make sure that it snaps to
399:01 - the bottom there.
And with that justified, I just need to make
399:05 - sure that this typography whoops, this typography,
and icon is our our 16 dips from the bottom,
399:18 - which we have now justified and 24 dips in
the left and right.
399:23 - And as you can see here, whoops, the typography
is 64 dips to the left of this icon, which
399:33 - now that everything is set proportionately,
we are good to go.
399:38 - So I just need to make sure this icon is aligning
to the baseline of the type text in this date
399:45 - picker.
So you push that down one pixel.
399:48 - And now that is being aligned.
So that is great.
399:53 - And we are rocking and rolling.
So we're almost done, we need to go ahead
399:58 - and build out our typography here.
So here you can see that there is padding
400:06 - on the top and bottom of this section here,
this date picker row.
400:16 - So I can specify that.
And once that is specified in this date picker
400:21 - row, I'm going to need to ensure I have the
proper typography specified.
400:26 - And this looks like it's utilizing a caption
textile.
400:29 - So this will essentially be centered.
And with that caption text text style, notice
400:36 - type in November 2018.
Select my caption text style.
400:47 - and center it since it's wrapped in a row
that has a height of 56 and specifies that
400:53 - the baselines 32 pixels from the top of this,
I'm just going to center it as it clearly
400:59 - is centered in this element.
Ensure that set to 24 dips in the left.
401:05 - And we're also utilizing a a arrow down drop
down arrow drop down icon.
401:15 - So I can copy this here.
Go ahead and select this date picker row,
401:20 - paste it in and start moving this until it
is four dips to the left of this text.
401:28 - So now that that is up to spec here for dips
there from left to this text.
401:35 - And now that that is implemented, we can go
ahead and add the icons for moving between
401:42 - months.
So I have both of those here.
401:45 - I'm going to copy those and specify the spacing
to 24 between the icons and there's a spacing
401:54 - of 24 as well right here.
So I can actually Just go drag these in here.
402:00 - And once these are dragged in, just kind of
move these elements accordingly.
402:06 - And now we are good to go, we have created
our header.
402:12 - And we can go ahead and double check spacing
as needed there 16 dips sit on top and bottom
402:19 - between our elements there.
And we can even wrap these two together if
402:24 - needed.
You can apply constraints and in relation
402:29 - to its parent element.
So I'm setting everything here to left and
402:33 - center vertically, then I'll set these two
icons to right and center vertically.
402:38 - So if they stay on their sides, if they move,
the width gets there any changes in width
402:45 - there, I'm going to also select the date picker
row, and just specify that it's always stays
402:52 - on the bottom and is set to left and right
so that it is constrained proportionately.
402:58 - And we should be good to go.
So now with this calendar header created,
403:04 - we can go ahead and start to use this element
across other mobile elements as well.
403:10 - So if I go ahead, and I can just duplicate
this in case, I want to create a variant of
403:15 - it, but establish this as a main component
and then duplicate that, we can go ahead and
403:20 - proceed to tackling our first date picker,
which is the mobile input picker.
403:26 - So what we're going to do is we have the header,
so we can copy the header.
403:31 - And we need a text input field here.
So if I go to my assets and ensure that we
403:37 - always have our material design system library
on, I'm going to go ahead and search for text
403:43 - input.
And whoops text fields.
403:47 - Sorry.
And then I can go ahead and just access a
403:53 - text input field.
And we can go ahead and select, say, this
404:02 - component.
And what this component specified, we're going
404:07 - to want to wrap this in a frame as well.
And just pay attention to the specs here.
404:12 - So the specs have the set to 16 dips on top
from the top.
404:17 - And what we need to do is create a parent
container.
404:20 - So we're going to establish this as the mobile
mobile input picker.
404:28 - So this parent container will be called the
mobile slash input picker, then I'm going
404:33 - to specify the height to 264.
You'll see that there's some space there.
404:39 - And then I'm going to go ahead and use this
variation of the the component here.
404:47 - And just reference that.
And place this into the container has the
404:59 - proper padding on the left and right already
just need to ensure that the padding on the
405:05 - top set to 16 there, which it is.
And now we just need to implement a background,
405:12 - which is set to Ville surfaces surface.
And one thing to note is that we need to specify
405:23 - the corner radius of the parent container
to for all around.
405:27 - And also, since this is a modal, here, in
this scenario, we need to specify the elevation
405:34 - 224 24 dip elevation on the parent container.
And now we can go ahead and just use this
405:44 - example textfield.
Notice that it isn't the right type of textfield.
405:49 - But this is just an example of the implementation.
And here you'll notice that we might need
405:56 - another header variant.
So that's kind of why I duplicated this here.
406:00 - So I want to actually maybe go ahead and delete
this date picker row.
406:05 - And before I delete that date picker, I'm
gonna go ahead select the parent container
406:08 - and move this content up and make sure it
snaps and then delete that day pick a row
406:16 - below and make that a main component and duplicate
it.
406:19 - And then we'll use this one instead.
So if I go ahead and delete that, can I paste
406:26 - this and snap it to the top, I can move this
element up.
406:29 - So that is 16 picks dips from the top.
We now have that date picker and the width
406:38 - is still set to is set to 364.
So I need to change that to 264 and we're
406:45 - going to go ahead and implement some text
only buttons now.
406:48 - So I'm gonna go to my assets.
Just pull in that text button and I need two
406:55 - of them.
I need one that is says okay, so I'm gonna
406:58 - go ahead and drag that in there.
And we're going to want to do is snap that,
407:05 - in ensure that the typography aligns with
the end of this text input field, which it
407:11 - does, meaning that this parent frame of the
button is 16, dips to the right from the container,
407:19 - they're added to 16 dips from the bottom as
well.
407:23 - So that is equivalent, equal size.
And I'm gonna type in cancel on this textfield.
407:29 - And once that's specified, we'll just align
that here with this other button, and it has
407:34 - to be eight dips to the left of the OK button.
So now, we have created our mobile input picker
407:40 - quickly.
And this is one of the easier date pickers
407:44 - to implement.
So with that, I'm going to make this a main
407:48 - component, which is great.
Now we got to, we got our first date picker
407:52 - here for mobile.
And next, we're going to tackle one of the
407:55 - more complex components.
So here, you'll start to see what these are
407:59 - composed on.
Maybe we'll start with your selection view,
408:01 - it's a little simpler to tackle at first,
not as overwhelming.
408:05 - But this is how we're going to break down
this component.
408:08 - So what are we seeing here? Well, we're seeing
that we need to create units, we can call
408:14 - these units or these cells, which will be
our elements, Id elements for date pickers.
408:19 - And these elements contain the the text, of
course, and it's giving us the dimensions
408:25 - of this, this cell that we're going to create,
and it's 52 dips in height, and it is 88 dips
408:32 - wide.
So we're gonna essentially, and it has a selected
408:36 - state variant.
So we're going to need to make that selected
408:39 - state as well.
And that is Best Buy here.
408:43 - 72, dips wide and 36 dips in height, and it
utilizes the primary background color.
408:50 - So that's great.
And we already have our header component here.
408:54 - So we can go ahead and bring a copy of that
here.
408:59 - And you'll notice that it doesn't utilize
in the year selection view for the mobile
409:04 - input data input picker, doesn't utilize those
icons there.
409:08 - So we can go ahead and just remove those.
So when we delete those instances, in our
409:13 - instance, it'll just hide them, which is fine,
don't worry about it.
409:17 - And we can go ahead and start to create these
cells, right.
409:22 - So what we're going to go ahead and do is
create a frame, label this elements space
409:29 - slash space, year selection, cell.
And then we can label that the default cell,
409:41 - because we're going to have an active cell
or selected cell to actually, we can label
409:48 - that this one unselected.
And then we're going to create another one
409:52 - later called selected.
So now we have both those ensure that the
409:58 - bill is set of surfaces surface, we're going
to go and we're going to do is just specify
410:04 - the height for both of these 250 to kill two
birds with one stone there.
410:11 - And the width for both of them is set to 88
dips.
410:16 - That's fantastic.
Now we have typography in the middle.
410:20 - So on the cell, we have text, we can, let's
see 2011, I can select that 2011.
410:31 - And I'm going to make sure this typography
set to high emphasis, and then ensure that
410:36 - the resizing set to auto width.
And now I need to apply the proper text style.
410:42 - So it looks like it uses a caption.
So it looks like it uses a caption, I'm trying
410:51 - to just verify that their looks accurate.
We can also reference the documentation if
410:59 - we ever get confused on what textiles being
utilized some, but I have not found any specifications
411:07 - on that.
So here we have that typography.
411:13 - For the text, maybe we want to apply.
Let's double check and see if we need to utilize
411:19 - the body text style.
That looks much better.
411:23 - So we apply that body textile just center
it vertically and horizontally with the command,
411:29 - I mean, the shortcut keys, option V and H
we should be good to go.
411:33 - So we have the cell.
And now that we have that honestly, that was
411:37 - the only thing we were missing.
We just need these the variant of this.
411:41 - So the variant of this, I'm going to copy
that text, paste it and with this cell, let's
411:47 - just set the constraints to center vertically
and horizontally.
411:50 - And then do the same exact thing here within
this container cell.
411:54 - So just stay center but there's not going
to be a scenario where we need to resize them.
411:58 - Just for for best practices.
So with the selected variant, we're gonna
412:03 - have to select the color content on primary,
I know we can't see it, but we're gonna end
412:08 - up creating a rectangle with a width of 72
dips and a height of 36.
412:16 - And we're gonna have to round out the corners
of this, we can change the corner radius to
412:20 - 24.
There, I'm gonna center this, place this behind
412:24 - the typography, using command left bracket,
so it changes in the layering order.
412:31 - And label that to state overlay.
And now, we can go ahead and change the fill
412:37 - color to primary.
And we have now achieved our selected state.
412:42 - And we should also specify that the typography,
both the both of the alignments are set to
412:48 - text align center.
So it resizes from from the middle, when your
412:53 - designers are renaming this.
And we should be good to go.
412:56 - So now that we have both these cell variants,
let's go ahead and just build out this year
413:01 - selection view.
So here, you can start to see how we're building
413:04 - these modular elements to build out entire
interfaces.
413:08 - So I'm going to create these multiple components
to have this one already.
413:17 - And we're going to want to go ahead and just
move these up.
413:22 - And I'm going to duplicate this on selected
variant whoops.
413:27 - What's up duplicated that, what we want to
specify is, let's say I'm going to wrap this
413:35 - in a frame label this.
I'm going to grab the naming convention for
413:41 - this, the mobile This is the mobile year selection
view, date picker variant.
413:52 - So this frame will be labeled exactly that.
And I'm going to apply a background color
413:58 - a fill color of surfaces surface.
So now, I'm just going to stretch that height
414:05 - out, because we haven't defined that exactly
yet.
414:08 - But we will.
And you'll notice that there's also a divider
414:13 - being used in this component, and then the
content gets cut off under it.
414:18 - So we have three, five.
So with this component selected, let's make
414:25 - sure it's within our, our frame here.
So I'm going to drag that in there, snap that
414:32 - to the left, make sure that is has a left
padding of 24 and is snapping to the bottom
414:44 - of the calendar header.
And what we can do is just go ahead and duplicate
414:50 - this.
And there you know, there's a spacing of eight
414:52 - dips between the elements.
And I just hit Command D to duplicate that.
414:58 - And now we can just shift select all three
of these in this row.
415:02 - And I can go ahead and just duplicate those
downward, hold down Command D, and they're
415:09 - all lined, as you can see here, there's no
spacing between them vertically, only in terms
415:14 - of the width, there's that gutter, so for
five, and then I got six, but I'll save six
415:20 - for later.
And what we can do if there's way too many
415:25 - elements here, if that's, that's difficult
for you to read, well, maybe we can just clean
415:30 - this up by selecting them in a row format.
Or actually, we're going to want to group
415:37 - these in a column format, because on mobile,
users will scroll through this, these columns
415:44 - vertically at imagine as opposed to horizontally.
So you could create prototypes of this component
415:50 - in figma with this column layout, so I'm gonna
wrap this in a frame, label this column, column
415:59 - one, cell column one, if you want.
Just maybe, maybe, maybe just label it column
416:06 - one, that might be easier.
And then I'll do the same exact thing for
416:10 - this set of elements.
Whoops, hold down Command Shift G to rename
416:16 - it and then rename it column two.
Now we'll go ahead and tackle the third one.
416:24 - Very straightforward.
Group it, rename it column three.
416:32 - And one thing about these columns is that
there's there's five rows here, and in each
416:41 - column that are cut off, there's a sixth row
that gets cut off, but we're going to save
416:47 - that and go ahead and implement our buttons
once more.
416:53 - And we had already created the cancel and
ok buttons here.
416:56 - So I'm going to Command click On these, hold
Shift return to select the parent layers and
417:03 - copy that.
And the padding set to 16 and 16.
417:06 - Oh, each side, I'm going to select the parent
frame here and paste these and move them down
417:17 - and ensure that they're set to 24.
And I believe, whoops, 24 on the right, and
417:26 - then 16 on the bottom, or eight on the bottom,
I believe.
417:33 - Let's see, that looks correct.
Looks like it does.
417:40 - And then we're going to ensure that we have
a divider eight dips above.
417:44 - And we're going to go to our assets panel
and just pull in that divider.
417:49 - and specify the width here, we want to make
sure we have that width specified and make
417:56 - sure our parent container is for dip corner
radius.
418:00 - So with this divider, need to change the width
to 328 to span the full width of the the date
418:09 - picker there.
I'm going to drag that in there.
418:15 - push that up.
So it's eight dips from the buttons.
418:20 - And now all we're going to do is select our
columns, hold down Command and drag it to
418:26 - the to snap to our divider.
And select clip content.
418:33 - And what we're gonna do in each row is I'm
gonna hold column, Command D, and then drag
418:40 - this so it snaps.
So you can see that one, when this content
418:48 - gets pushed down, it whoops, the content gets
pushed down, it is ignored.
418:58 - So that's important.
But you can't actually see it in the way we've
419:04 - currently implemented it.
One thing we do need to add is a selected
419:09 - state, for example.
So I could go ahead and delete this, copy
419:15 - this instance, select that column and whoops,
select the second column or any column and
419:23 - paste it in there.
And just make sure it's aligned appropriately.
419:27 - And we know how that your selection view implemented.
And we now have our our date picker views
419:39 - or your selection view of them look, just
copy these once more.
419:46 - So here we have that column.
But you can't actually see it, and how we
419:51 - specified it currently.
But you get the idea of this component, although
420:00 - it appears to be hidden.
So we can do the same exact thing here is
420:10 - duplicating this.
Making sure that are snapping appropriately.
420:21 - And now I have these column views built out
and we're good to go we have our year selection
420:26 - view.
So if I ever wanted to actually swap this
420:30 - component with a selected one, due to our
naming conventions, we can go ahead and do
420:34 - that very, very quickly in our instance, drop
down menu.
420:38 - And that is our year selection view.
Make that a main component.
420:43 - Go ahead and drag that over there.
And now that that one specified we have to
420:49 - created.
Let's go ahead and tackle one of the more
420:54 - complex views.
So with this calendar view.
421:01 - Let's go ahead and copy that naming convention.
Here on mobile, we have the calendar view,
421:08 - we clearly can utilize the mobile header calendar
header.
421:18 - So we have that.
So our mobile calendar adders done, we're
421:21 - going to wrap it in a frame, it's going to
be called mobile slash calendar view.
421:26 - And we are going to specify the height to
be 512.
421:30 - Whoops.
And once that's set to 512, we're going to
421:35 - set the fill color to surfaces surface.
And again, this year selection view actually
421:43 - has I apologize, in effect style 24 dips,
and so does this calendar view so let's go
421:51 - ahead and specify that and in this element
need to go ahead and change this 000 color
421:59 - style to texting iconography high emphasis.
Now that everything is attached color styles
422:06 - are good to go.
And on this calendar, you'll specify the corner
422:08 - radius to four dips.
So now that we have that, we need to start
422:13 - creating these individual cells.
So in this format, we're going to go ahead
422:18 - and specify the date here.
So it is utilizing a cell of 40 by 40 dips.
422:32 - So make that frame 40 by 40, set the fill
to surfaces surface and copy this textile
422:41 - not so paste it in here, and center it and
just the only difference being the color.
422:51 - So this uses a medium emphasis, color style.
So we need to specify that set that medium
422:58 - emphasis, I can even duplicate this, whoops,
can duplicate it, I'm sure that that's set
423:05 - to a number now.
And that is centered.
423:09 - And the numbers have a color style high emphasis.
We're going to need to name these cells.
423:17 - So we have we have the it's an element.
And this is the date, cell day SEL.
423:32 - de sel.
And then we're going to go ahead and copy
423:38 - that specify this as as the elements date.
Day, so right now date, number.
423:56 - So you can name it honestly, whatever makes
most sense for you or your team or organization.
424:03 - And then of course, we're going to need a
Ace unselected variant, which is what this
424:11 - will be.
And then we'll have a selected variant as
424:16 - well.
If I go ahead and change that to selected.
424:21 - And with the selected variant, we need a rectangle
set 36 by 36 dips.
424:28 - With the primary colors when you change this
color style to content on primary, then go
424:34 - ahead and create a rectangle within the frame.
set that to 36 or 36 dips and round, round
424:42 - it out and then center it and use Command
left bracket to push it backwards.
424:46 - And our now that we have this selected state,
we need to change the fill color to primary.
424:51 - And we now have our text style set properly.
So we may want to push this over one pixel
425:04 - as it doesn't look centered optically.
But now it does since we push it over.
425:09 - And with that we can go ahead and make this
a main component.
425:14 - And everything should be scaling accordingly.
I'll set the constraints properly to the selected
425:19 - state as well.
And this typography is good to go make that
425:23 - a main component and make the date day a main
component and the date numbers element component.
425:31 - And we should be good to go.
All we need to do is start to compose this
425:35 - accordingly.
So in this variant, you can see that the dates
425:44 - are displayed and they snap it looks like
right below the right below the calendar header.
425:53 - So I'm going to make that snap and the padding
left is set to 24.
426:00 - And all I'm going to do is duplicate this
and make sure it's for four dips to the to
426:08 - the right.
And then I'm going to duplicate it again and
426:11 - keep duplicating it.
And since I have that spacing specified, I
426:16 - am good to go see a duplicate.
Now that I have those three, six, I need to
426:26 - apply this seven days here in the week.
And I now have that I'm gonna go ahead and
426:36 - double check my spacing here.
So the spacing is not supposed to be set 24
426:41 - on the left, it's supposed to be set to 12
for for the cells and that actually selecting
426:47 - the date and I have it set to 24.
So my apologies.
426:50 - For now now the content is centered properly
and now we're going to do is go ahead Select
426:58 - our date number cell and duplicate that and
snap that here.
427:05 - So that's day one.
And then we're going to go ahead and create
427:09 - an entire row of this.
And it's going to be very simple, I'm going
427:16 - to go ahead and create one row with you.
So all we have to do is duplicate it, ensure
427:21 - that there's four pixel spacing between all
elements here.
427:25 - And I'm going to just keep repeating that
all the way across the entire row.
427:32 - And I'm gonna just do the same thing, select
all these elements, and ensure that they all
427:40 - stack.
And just duplicate that again and duplicate
427:44 - it again, and I have my, my 556 rows in its
entirety.
427:50 - And we just need one more, we need the bottom
one, which is day 32.
427:58 - Go ahead and check that out.
And what we can do, since we have our components
428:03 - named properly, I can click this and make
sure it's the selected state.
428:07 - And I'm going to pause this video and go ahead
and add in these buttons and also rename all
428:14 - these days.
So I'll be right back.
428:17 - Now I've created this mobile calendar view.
And all I did was I copied the buttons from
428:24 - our year selection view, because the spacing
specifications are the same on this calendar
428:30 - view.
So I pasted that in by and I pasted it once
428:34 - I selected the parent container.
And that did me a big favor and just applied
428:40 - that exact same position.
And here you go, we have our calendar view,
428:44 - mature the new main component now.
And we've we've kind of debunked the complexity
428:54 - of this and the only thing missing is this
current date.
428:59 - So that is the current date cell.
So we're going to do is duplicate the date
429:03 - number cell that's selected, and then we're
going to detach that, and I'm going to go
429:07 - ahead and rename this to current date as it's
a specific cell.
429:14 - And then, with the current date specified,
I'm going to select my rectangle and apply
429:19 - a one pixel stroke.
That is, should be set to let's see surfaces
429:28 - high emphasis, and we're going to delete that
fill.
429:31 - And we're gonna go ahead and select our text
now and ensure that the content is set to
429:40 - active or high emphasis.
So that is our current date variant of the
429:45 - cell.
So what I can do is make this a master component
429:48 - or main components use me.
And then we can even go ahead and select this
429:53 - cell in our calendar view now.
And now we have a current date variant.
429:58 - So now we have that.
And with our current date variant, I'm going
430:01 - to actually push that pixel one pixel over
to the right, whoops, one pixel over to the
430:06 - left, make it look more optically aligned.
And we're now good to go.
430:14 - And now we can go ahead and set this aside
in the calendar view.
430:19 - We have our the proper cells needed for our
our calendars for mobile.
430:28 - And we also have a mobile range picker, which
I'm going to set aside and let you challenge
430:37 - yourself and build that.
And essentially, with this overlay, what you're
430:41 - gonna want to do is just create an element
that you can overlay or place under all of
430:51 - these rows here, these are the cells to view
that effect accordingly.
430:59 - So what we can do in actually our, our calendar
component is go ahead and start to select
431:06 - all of these.
And you could put them in columns or rows
431:10 - as needed.
So for example, whatever you and your team
431:14 - find most efficient, I can specify this as
row three.
431:18 - Here, you can clearly see that we have row
row one.
431:27 - So row one, and then this happens to be row
two.
431:33 - So that's important.
And I just realized I messed up this calendar
431:36 - view, we need this calendar view to stack
properly.
431:39 - So if I go ahead and click on this calendar
view, it's actually not positioned properly.
431:46 - So I need to go ahead and what I'm going to
do is pause this and make all of these rows
431:52 - and I'll and make sure I push this element
down and I'll be right back on my element
431:58 - align properly and I grouped them into rows.
Even if there's only one element on that row,
432:03 - say you were to build out that entire row
moving forward, you could stretch this out
432:07 - and snap it, you can ensure that the width
snapped appropriately.
432:12 - And then if you needed to modify it, you can
go ahead and duplicate insert snapping elements
432:17 - to the, to the end and middle of your elements
as needed.
432:21 - It's just a quick way to keep things organized.
And just also just keep those layers clean,
432:28 - it's highly recommended, as you can see here,
and those wrapped into frames.
432:34 - If not, it's a ton of cells just being viewed
when you expand it in the Layers panel.
432:41 - So that's why we have our counter view done.
And I'm going to challenge you to build out
432:46 - the this other view, the mobile range picker
will have a selected state.
432:54 - And for the selected state, you'll have the
two months as well.
432:58 - So you can detach the calendar editor and
copy those the tax property and whatnot.
433:04 - In Yeah, you just need to create like a selected
state element, turned that into component,
433:12 - and then just put that under the rows.
And you can reference the calendar view for
433:19 - that.
So now we're going to go ahead and approach
433:21 - a variant of the desktop.
Desktop is slightly different.
433:27 - Since it's on a bigger device, you'll notice
that it's very dense.
433:32 - on the desktop, here, we have a very dense
view, where the cells for the desktop variant
433:37 - are set to 32 by 32 dips here.
Same same states for each cell, we have the
433:43 - current date, we have the selected date, and
then we have the default one here.
433:50 - And yeah, I mean, we're gonna and then we
also have one of the more complex ones, the
434:00 - date range picker, where it's the where you're
selecting from one month to another month.
434:06 - And we're going to go ahead and build out
this date range picker.
434:13 - And then I'm going to challenge you to build
out the the following date range pickers by
434:17 - yourself as this is a very dense video of
information that shouldn't be good practice
434:23 - for you.
So we're going to go ahead and start off by
434:26 - identifying the low level elements.
So with that said, we, we have here, cells
434:37 - set to 32 by 32.
And then we have these icons.
434:41 - So I'm going to go ahead and grab these cells
here.
434:46 - Since we have, since we did apply constraints
to these cells, all we have to do is detach
434:52 - them, renamed them properly.
And now that I realize it, we're going to
435:00 - need to categorize these cells.
So these are going to be the mobile versions.
435:06 - So we're gonna have to categorize all of these
to live under under mobile, because we're
435:11 - going to have cells for desktop as well.
So I'm just going in, and just renaming certain
435:20 - elements here.
Just applying mobile.
435:26 - So just going in copying and pasting real
quick.
435:33 - And once you've done that, you should be good
to go.
435:39 - And now the nice thing about this is, since
we renamed all these to mobile, we can go
435:45 - ahead and copy all these variants, we may
not need these at first, but I'm going to
435:51 - detach those instances.
And we can go ahead and change if we batch
435:56 - renamed by select everything, and then hit
command R, and then I type in mobile, I can
436:03 - then go down to this replace with and type
in desktop.
436:08 - So now I have my desktop variants.
If we look into the layers here, we have our
436:13 - desktop cells.
And since our constraints are set properly
436:17 - to center, we can just modify the parent container
and everything will resize properly so that
436:26 - that's very helpful.
One thing we are going to want to do is create
436:30 - this selected state here, this selected this
this range here of the between the the current
436:39 - date, the selected date, the start date, and
the end date.
436:43 - So we're going to want to do is create that
right now.
436:48 - So we need to ensure that we know what the
height of this day is set to so we it might
436:56 - be referenced In another spec, that selected
date there, let's see.
437:07 - on desktop the height of that, more than likely
set to 28.
437:16 - dips in height, slow my go with.
Yep, yep, set to 28.
437:23 - Now with that said, let's go ahead and just
start cranking this out, I'm going to grab
437:28 - the icons, I need here, my, my arrows here,
left and right, I'm gonna need my copy this
437:40 - year.
We don't need no drop down arrow.
437:46 - So I'm gonna delete that.
I do need this caption textile.
437:52 - Sure that set too high emphasis.
Go change that here, make sure that's set
437:57 - to high emphasis.
Know that that's systematize, we can go ahead
438:02 - and move on, we have a frame here.
And let's go ahead and grab this name here,
438:12 - desktop date range picker.
So now that I've copied that, select this
438:17 - parent name, parent frame.
And we'll go ahead and set the corner radius
438:22 - to four.
And we got a height of width of 512 dips and
438:30 - a height of 280.
And with that, we can get rolling.
438:39 - So one thing we can do is focus on the base
layer of the of these components.
438:46 - Right? So what is the base layer? Well, things
that aren't going to be moving that will stay
438:52 - in place is and that will be as dynamic dependent
upon the month since are specific days and
438:59 - each month.
So this will all change these cells.
439:02 - So that'll vary in like the how many rows
they'll be, there'll be and how many cells
439:09 - in each row.
But the days will stay.
439:14 - And the arrow and month will stay in this
divider.
439:18 - So we're gonna go ahead and add this divider,
this divider takes up the whole height of
439:23 - this, this date range picker.
So if we go to our assets panel, option to
439:30 - pull in that divider, I'm going to hit Command
Shift Option type in rotate left, and then
439:37 - I'm going to now I have it vertically set.
And it's already in my parent frame in the
439:44 - parent container, which is great, I'm gonna
set the height to 280.
439:48 - So then I'm gonna just hold down Option v
option h.
439:53 - So now it is horizontally aligned perfect.
Li in between both sides have this date range
440:00 - picker, as indicated here.
And if we haven't already, let's go ahead
440:04 - and change this fill to surfaces surface.
Apply lips, plan effect style of eight dips,
440:13 - because this is used in menus and sub menus,
like a menu or sub menu.
440:19 - And now we're gonna go ahead and add in our,
our arrows.
440:24 - So with that said, we're going to add this
arrow here, add the second arrow there.
440:32 - And it is 16 dips from the top and right.
So if I snap that, whoops 16 dips from the
440:43 - top and right, we're good to go there.
And with that applied now we need to go and
440:50 - copy this textile.
And September here seems to be a 32 dips from
440:59 - the baseline through two digits from the top
of the parent container.
441:03 - And the spacing seems to be aligned.
Center horizontally between these elements
441:12 - specified here.
So if we do 256 minus 32, we get 224.
441:20 - So if we create a frame of, of 224 digits
wide.
441:27 - So if I wrap this in a frame, label this as
row one or header row header, I just label
441:40 - that header.
When I specify this to 224, you'll notice
441:45 - that that distance gives me 16 digits to the
right.
441:49 - And why I'm wrapping this in a frame is because
when I copy this text here, and I paste it
441:55 - in this header, so I'm gonna paste it in there.
And it's in that parent frame.
442:01 - So I'm going to vertically align and horizontally
align it so that it is vertical here on the
442:07 - calendar side.
And one thing I could even do is, if I wanted,
442:12 - I, if I don't want to repeat that, I can delete
this icon.
442:17 - And what I can do is select the icon here,
and Hold OPTION D and snap that to the right
442:24 - and then hit Shift H and that aligns properly.
And now I have this spacing set appropriately.
442:34 - So that's awesome.
So now we have September and October.
442:38 - So I can rename that.
And one thing we want to ensure is that it's
442:44 - set to text align center on both elements.
And we're gonna go ahead and specify that
442:51 - the this typography centers horizontally in
terms of when it resizes.
443:00 - So that's important.
So go ahead, change that to October 2019,
443:05 - then we'll change this to sep tember 2019.
And we should be good to go.
443:17 - Awesome.
So with that specify, we have the header left.
443:23 - And then we have the header, right.
And these could both be categorized on the
443:34 - left, like month, left and month, right.
So we're going to start off with these days
443:41 - here for the desktop view.
And again, there, they have a height of 32
443:46 - by 32 dips, which we've already specified
here.
443:49 - And what we want to do is I'm going to select
all these cells here.
443:54 - And now I want to actually go ahead and resize
these to 32.
444:02 - And notice that all the content centered and
then it got cropped, right.
444:05 - But the reason this has been cropped is because
we need to specify this to have a height and
444:10 - width of 28.
And then I'm gonna go ahead and center that
444:13 - once more.
And I'm gonna do the same exact thing for
444:16 - the current date cell type.
So now and then just center that now we are
444:23 - good to go.
We have pushed us over one pixel so that it
444:26 - is center and our elements here.
With that center, we are good to go.
444:38 - So now I'm going to create these multiple
main components.
444:43 - And I can copy this desktop Daiso is what
it's currently labeled as.
444:51 - And I'm going to specify the date on both
the left and right sides.
444:53 - And as you can see here, the spacing here
between the icon above and between the dates
445:04 - isn't specified might be specified here, it's
set to 12.
445:07 - As you can see, set to 12.
So we can go ahead and implement that here,
445:14 - select that date range picker, paste it, no
option, a snap that in 60 set to 16 dips in
445:21 - the left and the spacings 12 already by default.
So this is awesome, I can go ahead and just
445:26 - copy these dates.
And now I have all seven days here specified.
445:32 - And what I can do is select all these from
the get go my Layers panel, group them, label
445:39 - them.
Row days, I can label this as row days or
445:45 - whatever you find most intuitive or most effective.
That's what I recommend.
445:52 - And then I'm going to ensure it Whoa, that
the spacing here is set appropriately.
445:59 - And once that is set properly, we are good
to go.
446:03 - Have those days here.
Road days, left, push that up.
446:12 - Whoops.
And then I'm gonna organize these in my Layers
446:17 - panel accordingly, the header right and then
the road days, right.
446:21 - And then next, we're going to want to just
go ahead and start implementing our our days
446:33 - here.
And what I'm going to do is just copy this
446:38 - date number so for the desktop, paste it and
with that, we have it now a line already.
446:48 - And then we're going to just create these
rows here and there is no spacing between
446:54 - these cells.
So I can just keep going Hitting Command D
446:58 - to replicate that.
Then I can group this, label this row three,
447:09 - row three left, then I can label this, whoops,
I can group this as well, road to left.
447:18 - And then what I can do is just continue to
duplicate this downward, and just ensure that
447:26 - these are incrementing properly.
So this is row four.
447:35 - And then we got row five here in action, and
then we got, we got row six.
447:42 - So we're gonna go ahead and verify how many
rows are needed here.
447:46 - For this day, we got, we got five, six, in
total, we got 1234, we need to create one
447:54 - more row seems like she doesn't seem right,
whoops, I'm checking out the wrong 1234566
448:05 - in total.
So we have 123456.
448:11 - And this row, we only got, oh, we only have
one here specified one day on the last row,
448:30 - and there's a eight dip, eight pixel padding
there on the bottom.
448:35 - So I need to go ahead and verify that currently,
it's set to four, I don't know why that is.
448:41 - And then the padding on top set to 16.
And the bottom is set to eight.
448:48 - And then I have the height set to 280.
But it's still prompting me with dimensions
448:58 - of four on the bottom, which I don't understand.
So what we can do is go ahead and select our
449:05 - parent frame and just specify that to eight.
currently set to seven.
449:14 - So I'll just push that down one more pixel.
And there we have it, we now have that this
449:20 - variant here made, I'm going to I'm going
to go ahead and pause this and make this other
449:26 - side and you should do the same.
And I'm just going to name everything accordingly.
449:31 - positive.
So now I've created these rows here on the
449:35 - right side.
So I'm going to just allow you to go ahead
449:39 - and add all the dates and days here so that
it's precise.
449:42 - And you can align it with what is specified
in the spec here.
449:46 - And I'm going to challenge you to make this
date desktop date picker by yourself.
449:51 - And the year selection view, we already have
the elements here ready and named properly
449:58 - for design system.
And you just need to resize these a year selection
450:02 - cells.
And one thing you can I'm going to go over
450:06 - with you but not build out in pilot I'm going
to just guide you is creating this date range
450:14 - selection.
So what you're going to want to do to represent
450:19 - that range selection, we're going to I duplicated
this and just removed the the fill and change
450:29 - this color here on the shape to primary low
emphasis.
450:34 - And I changed the constraints so that the
constraints of this were on this element,
450:39 - I need to detach it My bad.
Now I need to select the shape and set the
450:44 - constraints to left and right.
So that way, when I select the parent container,
450:47 - I can stretch it out properly.
So I can I can get that range I need.
450:52 - And under range, I'm going to select deaths,
it's going to be named elements slash desktop
450:57 - slash range selection.
So that's that now that we have that you can
451:07 - go ahead and you know, make that a main component,
and you can copy it.
451:12 - And then how you would use it is if you paste
it into your date range picker, you're going
451:16 - to want to place it behind all your layers
below and align it with the height and the
451:24 - size of the your text box.
And then you can go ahead and start stretching
451:27 - that out as needed to select your dates.
And do note that everything's good to go in
451:39 - that regard.
And there is a state where it's just one cell
451:44 - to so that's awesome.
And that is all I have to show you today.
451:49 - Folks, I challenge you to make this, these
other desktop variants and this mobile variant
451:54 - and with all that knowledge you should you
have all the cells and everything needed.
451:58 - In to build the following.
And thank you so much for watching.
452:02 - And this was a long one, hope you learned
a lot, and how to deconstruct these images
452:08 - and actually turn this into a system.
I know, it's challenging, but very rewarding
452:13 - for you.
If you can get this into your muscle memory,
452:16 - as a designer, you will become a very valuable
design system designer and designer.
452:23 - Today, we're going to be building out some
dividers very straightforward.
452:29 - And we're going to cover how they're used,
and then just create them, it'll be super
452:33 - quick and easy.
The longest part will be just describing the
452:37 - usage.
So a divider is a thin line that groups content
452:39 - in lists and layouts.
As you can see, here, we have a bunch of list
452:42 - components, and they're being divided into
their own rightful sections with this divider,
452:51 - as you can see, here, we've got that divider
element.
452:55 - And it talks about the principles behind it.
So it just is utilized to separate content
453:00 - into clear groups.
And here you can see that it's heavily used
453:02 - in messaging.
And this inbox, they're using lines to compartmentalize
453:07 - each message being sent and received.
And here, you can use divider here you see
453:12 - dividers, splitting the description of this
image and its pricing.
453:19 - And then also, it's splitting that content
where it's very descriptive above and then
453:24 - where there's some actions below and splitting
that content.
453:27 - And here we have a divider being utilized
to split this page of what looks like contacts.
453:35 - And there's a lot of great in depth context
here, I highly recommend you reading through,
453:41 - it'll allow you to make more intentional decisions
on your designs moving forward.
453:46 - And we'll just improve your game as a designer.
And here are some examples of dividers being
453:51 - used in certain material design themes such
as the theme labeled fortnightly and owl material
453:57 - theme.
And here you can see what that would look
454:00 - like a divider would look like on a on this
primary background.
454:06 - And then also cheers just the specs, which
is now in figma.
454:09 - We'll go ahead and create that.
So very straightforward.
454:13 - It's one pixel and height.
And we're just going to set that to the width
454:18 - of an Android device, which is 30 to 60 dip.
So if I hit l on my keyboard, that creates
454:24 - the the divider the line, so I'm going to
set the width to 360 and the height to one
454:30 - pixel.
So now I have Whoa, whoops, I'm going to invert
454:36 - that.
So the width is 360.
454:38 - And we now have this line.
But the thing, the problem with this line
454:42 - is that we need to flatten this.
So when I say flatten, we actually need to
454:47 - outline the stroke, because we have essentially
a stroke as you can see here.
454:51 - And when we fly in this row, you'll notice
in the Properties panel, it'll update, and
454:56 - we'll go to outline stroke, and it will now
become Phil.
454:59 - And why do we want that wall, I'll have two
examples for us, because it'll help us when
455:03 - it comes to measuring elements.
Because right now this stroke is centered.
455:08 - So that blue line is the center of where things
will be measured.
455:12 - And you'll notice that that's not actually
giving us a proper measurement.
455:17 - So if we want to separate a group of text
here, and we have this text box specified,
455:22 - you see how this is 60.
Well, if I have this lined up, so they're
455:29 - both strokes, if I go ahead and now change
this from stroke, you'll notice the distance
455:35 - is 60 dips.
But watch, when I change this to a outline,
455:41 - stroke, I outline the stroke, it'll change
it to a fill.
455:46 - And then you'll notice that now the distance
is set to 59 pixels.
455:50 - So the point I'm getting at is to be as precise
as possible with these dividers, we need to
455:55 - ensure that we are flattening them.
And flattening is just a term for you see
456:00 - how there's this line here.
And then when I flatten it, it's it's actually
456:05 - a it's not a stroke anymore, so it's not in
the center of that have the stroke.
456:12 - So it's now essentially kind of like a one
pixel rectangle that's very thin, you can
456:18 - think of it as ended up with that being said,
the measurements will be more precise.
456:24 - And that is exactly what we're trying to achieve.
As opposed to this this stroke word set to
456:30 - 60 in distance and this this flattened stroke
which is no longer stroke is set to 59 so
456:37 - that is actually more accurate.
So that is great.
456:41 - We have that there.
And all we need to do is apply the proper
456:44 - color style and you need to ensure that your
material design system library is enabled
456:48 - in this file, as always, and we'll go ahead
and select our color styles and go to content
456:56 - and select the surface over Which is used
for dividers here.
457:01 - And again, you can see that the color specified
on that divider is set to 00, which is black
457:06 - and uses the 12% opacity.
So it's very light, and subtle.
457:10 - And some important things to note is that
other design systems specify several dividers,
457:16 - which essentially is just utilizing different
color styles.
457:20 - And with those different color styles, it's
just communicating.
457:24 - You could communicate different levels of
opacities.
457:27 - For example, I detach this, say this was the
regular divider set at 12%.
457:32 - But we had another divider that we wanted
to be more prominent in color, we can actually
457:36 - bump up that opacity.
Maybe I just bumped that up to 80% 87%.
457:41 - And if we wanted some sort of, for example,
muted divider, whoops, let's see here, duplicate
457:47 - that we wanted a muted divider, we could just
change that opacity, again, to represent different
457:53 - levels of prominence in the divider, and how
you want that to how visible you want that
458:00 - to be on your designs.
So that's, that's one way of going about building
458:05 - things.
But in material design, we just have this
458:06 - one divider, and I'm just gonna label that
as regular that was just an example for you
458:13 - all, and just reapply that content surface
overlay on surface color style, we now have
458:20 - our divider and I'm gonna go ahead and label
it dividers space slash space and then divider.
458:28 - So that is great.
Actually, I can go ahead and just label this
458:32 - as divider and make that a master component
main component, excuse me, and we are good
458:38 - to go.
And that is all we have to do to create a
458:40 - divider and thank you so much for watching.