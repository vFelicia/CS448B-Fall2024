00:00 - this is a video about the jam stack a
00:02 - way of developing and deploying sites to
00:06 - the web I've been building things with
00:08 - jam stack for quite a long time I think
00:10 - actually before the term Jam stack was
00:12 - around and I've become really excited
00:14 - about the possibilities of using Jam
00:16 - stack and what it can do for us as
00:18 - developers and also for users as well so
00:21 - this is quite a long video I go into a
00:24 - little bit of depth and we start with an
00:26 - introduction to what the Jam stack is
00:28 - what the term is what it means and then
00:31 - also some of the advantages of the jam
00:33 - stack we compare it a little bit to
00:35 - other stacks like the lamp stack which
00:36 - is something that might be a bit more
00:37 - familiar to many web developers and then
00:40 - we'll start to look through a bunch of
00:41 - examples so there are six examples can
00:45 - practically showing taking one site from
00:48 - a single file a statically generated or
00:52 - aesthetically written with my own hands
00:54 - HTML file deploying that to a content
00:58 - delivery network but then evolving that
01:00 - page turning it into something a little
01:02 - bit more dynamic turning it into
01:04 - something that has things like
01:06 - localization and client-side rendering
01:08 - and other bits and pieces and so that's
01:12 - a set of examples that grows throughout
01:13 - the video you can jump into any of those
01:16 - points and jump straight into those
01:17 - examples or you can watch the kind of
01:19 - evolution of the whole thing as we go
01:21 - and then at the end of the video as we
01:24 - do a little bit of a wrap-up there's
01:25 - also another demonstration which looks
01:28 - at how you can start to use the gem
01:30 - stack in your own infrastructure so if
01:32 - you're already building sites using a
01:35 - different architecture how can you add
01:37 - gem stack next to that what's an easy
01:38 - route in to do that so there's an
01:40 - example of that at the end as well and
01:42 - at the end of the video there are also a
01:43 - bunch of resources and links for you to
01:45 - take a look at and I hope it's useful so
01:48 - let's get started and start to look at
01:51 - exactly what this gem sack thing is
01:57 - right then
01:59 - so we're where to begin well we're
02:02 - thinking about an introduction to the
02:03 - jam stack then it's probably worth our
02:06 - while just considering them and this is
02:08 - an approach to delivering websites and
02:10 - it's not the only one there are many
02:12 - many approaches
02:13 - delivering websites we've been at this a
02:14 - long time now as an industry and we've
02:17 - evolved a long way it used to be when we
02:20 - first started out this is an incredibly
02:22 - nice simple diagram to begin with it
02:24 - used to be that you know when when we
02:27 - started building for the web we'd we'd
02:28 - create assets we'd put them on a web
02:31 - server and then it would come along in a
02:34 - browser and we'd ask for stuff and then
02:36 - we'd get the stuff and that's that's a
02:39 - lovely situation to be in you know it's
02:41 - very seems very simple very
02:42 - straightforward now we'd have this
02:44 - relationship where we'd create assets
02:46 - put them somewhere that they'd become
02:47 - available and then when someone came
02:49 - along with a web browser and asked for
02:51 - those resources we'd simply deliver them
02:53 - to them and that was great and it stood
02:55 - it stood up well for folk for quite a
02:57 - while and and that was kind of nice and
03:00 - efficient but we soon ran into
03:02 - limitations in that you know these
03:04 - things were work but they were static
03:07 - they weren't they weren't able to be
03:09 - changed based on what people asked for
03:12 - so the experiences we were getting
03:13 - seemed to be quite static as well so we
03:16 - tried to add something new to this we
03:18 - started to add some kind of level of
03:20 - dynamism at the at the server level so
03:23 - now instead of just asking for stuff and
03:25 - getting stuff the server would do stuff
03:27 - as well we'd have this this can script
03:30 - this this logic that would would be
03:32 - executed at the server level for every
03:35 - request that would generate a view and
03:37 - then return it to the views er and that
03:39 - was great because it meant that as we
03:41 - were requesting things we could we could
03:43 - build things up on the fly so we
03:45 - wouldn't need to know every permutation
03:47 - that was being requested or we might
03:51 - need a head of time we could respond to
03:54 - the needs of the user and create
03:55 - something dynamically and return it but
03:58 - it did mean that the responsibilities of
04:00 - this server now were quite different you
04:03 - know now we needed to make sure that for
04:05 - every request that came in we had enough
04:07 - enough capacity here enough horsepower
04:11 - to be able to service every request and
04:13 - get something back to them quickly so
04:15 - that soon led to a slightly different
04:18 - scenario so we started to introduce
04:20 - different bits of infrastructure so
04:22 - rather than just having a single web
04:23 - server that was
04:24 - creating those views we started to add
04:26 - many web servers to handle the traffic
04:28 - and we'd perhaps put something in front
04:31 - of those web servers like a load
04:32 - balancer that would say okay well this
04:34 - request will go to this web server this
04:36 - request were to another web server can I
04:38 - share the load across those servers and
04:41 - we started to do more things like
04:43 - abstract where the data lived rather
04:45 - than the data being on these web servers
04:47 - as well we we start to say well let's
04:49 - let's abdicate the responsibility and
04:51 - share some of the load with with servers
04:53 - that are specific to that and abstract
04:55 - those out as well so we got to a point
04:57 - that a request from a from a page for a
05:01 - from a user for a page will travel
05:03 - through all of these different in bits
05:04 - of infrastructure gradually assembling a
05:07 - view that would get returned to the user
05:09 - into the browser rather than having
05:11 - something ready to go we also started to
05:14 - think about well maybe we could find
05:17 - some assets that are kind of just static
05:19 - and don't need generating on the fly and
05:21 - maybe we could put those in a different
05:23 - location so we started to introduce
05:24 - things like a CDN which is a content
05:26 - delivery network and networks give the
05:28 - machines
05:29 - geographically arranged so that wherever
05:32 - the user arrives from some of those
05:34 - assets can be served directly from there
05:36 - whereas others would have to go and go
05:39 - through this journey and get built up
05:41 - over time so all of this kind of added
05:43 - to the infrastructure and the pieces in
05:46 - play for serving the request of the user
05:50 - ensure it got complicated and you know
05:54 - we got more sophisticated and that kind
05:56 - of things we were building and our
05:57 - infrastructure got more complicated as a
05:59 - result luckily though you know we we've
06:03 - been learning we've been building new
06:05 - tools so we don't have to stay in the
06:07 - same picture that we've had for such a
06:09 - long time now we understand that the the
06:12 - needs of users have changed and what we
06:14 - what we expect to build has changed but
06:16 - so is the tooling that allows us to get
06:18 - there so you know a few things have
06:20 - changed browsers have gotten more
06:22 - capable you know the web browser that
06:24 - you'll be viewing this site in now is
06:27 - very different to the one that we were
06:29 - using at the beginning when everything
06:30 - was was a little bit simpler browsers a
06:35 - way more powerful way more capable than
06:37 - they ever used to be and we can
06:38 - we can use those to great effect also as
06:41 - a as a consequence of building so many
06:43 - sites for such a long time we as an
06:45 - industry of matured our processes and
06:47 - we've really got a lot better at the way
06:49 - that we build sites and the way that
06:51 - they we we can deploy them so we can
06:53 - start to make start to take advantage of
06:55 - these these maturing processes and also
06:58 - tooling has improved you know the things
07:00 - that enable us to to to generate our
07:03 - code to manage our code to deploy our
07:05 - code and all of the things around that
07:07 - that's all improved as well so we can
07:09 - evolve our approach as a better as a
07:12 - result of all of these things improving
07:14 - so let's get to this
07:17 - this small question then since we're
07:19 - looking at an introduction to Jam stack
07:21 - what is the jam stack well there's a
07:23 - couple of ways that we could we could
07:25 - answer that we could we get asked you
07:27 - know what does jump stack stand for and
07:28 - we could ask what does that mean and
07:32 - they first glance you think well these
07:34 - are the same question but but not quite
07:36 - let's let's let's dig into both of them
07:37 - in terms of what does jump stack stand
07:39 - for well the word has come about by you
07:42 - know considering JavaScript API sand
07:45 - markup to make up the the Jam of this
07:47 - Jam stack and certainly as we go through
07:50 - that this video will look at how we use
07:52 - markup how we use JavaScript and how we
07:54 - use api's to create experiences in the
07:56 - browser but there's more to it than than
08:01 - just what it stands for let's also
08:03 - consider the word stack as well for just
08:05 - for just a moment now what do we mean by
08:08 - stack in the first place well I think
08:10 - when we're talking about web technology
08:13 - stacks the stack is the layer of
08:14 - technology which deliver technologies
08:17 - which deliver the website or application
08:20 - it's the thing is the set of tools that
08:22 - make up that delivery so when we think
08:26 - about what it stands for well that's one
08:28 - thing but I don't think we're any the
08:30 - Y's are necessarily to to talk about
08:32 - what what does Jam stack actually mean
08:34 - and what's the result and how do we use
08:35 - it this is about the best definition I
08:39 - think I've I've encountered above Jam
08:41 - stack and that is Jam stack means fast
08:44 - and secure sites and apps delivered by
08:47 - pre-rendering files and serving them
08:49 - directly from a CDN
08:51 - removing the requirement to manage or
08:53 - run web servers there's a lot to unpack
08:55 - there and we'll do that over the course
08:57 - of this video but I think this is this
08:59 - is a good descriptive meaning for jam
09:03 - stack pre-rendering the files so that
09:06 - you don't need to manage your web server
09:08 - later on is kind of a return to the
09:10 - capabilities that we might have had in
09:12 - this world but there's so much more
09:14 - that's come along to to empower things
09:16 - around this that we'll get to shortly
09:19 - you might think well there are a lot of
09:22 - stacks already you know I'm aware of
09:24 - different approaches of building things
09:26 - for the web there are all of these
09:28 - different stacks that we might choose
09:30 - from with different technologies and and
09:32 - that's that's fair but let's let's let's
09:35 - use one of them as a bit of an example
09:38 - just as for means of clarification and a
09:41 - bit of comparison so let's let's talk
09:43 - about glam stack for a little while now
09:46 - lamb stack that stands for Linux Apache
09:50 - MySQL and PHP and this is a very popular
09:55 - I think the most popular combination of
09:59 - technologies for building out a web
10:01 - experience that exists on the web at the
10:03 - moment and each of these these
10:05 - technologies plays a certain role and
10:08 - these other stacks that's you know we've
10:10 - listed up here effectively they play
10:13 - into that plays into the same kind of
10:14 - environment but some of these
10:15 - technologies are switched out but
10:17 - ultimately they do the same kind of
10:19 - thing we end up with a system where on a
10:22 - web server where we've got something
10:24 - that is delivering our operating system
10:26 - for us to build on in the first place
10:28 - we've got a layer for data access being
10:31 - MySQL here for a database and the
10:33 - services are tributed to that then we've
10:35 - got a layer for doing pre-processing or
10:37 - the actual scripting and processing and
10:40 - handling of the logic and assembling the
10:42 - views in this case it's PHP for that
10:45 - pre-processing layer and then some kind
10:47 - of web server that will do things like
10:48 - the HTTP routing and the actual serving
10:51 - of assets and passing things along down
10:54 - the stack to get the the resources we
10:57 - need now in the lamp stack you'll often
10:59 - find these things combined in a single
11:02 - web server but
11:03 - over time as load increases a typical
11:07 - thing to do is we'll we won't have one
11:08 - web server will have many web servers
11:10 - all running these bits and pieces and
11:12 - other described a few minutes ago and
11:14 - sometimes we'll start to abstract things
11:17 - like the data layer out of these but
11:19 - ultimately we're still looking at a
11:20 - stack which include reaches all the way
11:22 - back down to the operating system right
11:25 - the way through up to the the actual
11:27 - routing and the handling of the HTTP
11:29 - requests meanwhile if we to look at the
11:33 - jam stack as a comparison to that the
11:37 - stack looks quite different the diagram
11:39 - is a little bit different here but we're
11:41 - catering for the same kind of things
11:42 - we're still talking about HTTP routing
11:45 - and serving we're still talking about
11:46 - data access we're still talking about
11:49 - kind of processing in a runtime but a
11:51 - key difference here is that this runtime
11:53 - that the processing layer in effect the
11:55 - operating system if you like that lives
11:58 - within the browser here so we're not
12:01 - having to reach all the way down into an
12:03 - operating system that's provided to us
12:05 - by the the client that sir the runtime
12:07 - exists right there in the browser the
12:10 - API is the data access we've kind of
12:12 - abstracted that away that's kind of not
12:14 - part of our domain now there are api's
12:17 - that exist out in the ecosystem now that
12:19 - we can make use of which we don't have
12:21 - to manage ourselves we can request
12:23 - access to those via their API and we
12:27 - typically do that using JavaScript so
12:30 - that's why we get this this kind of
12:33 - Trinity of markup delivering content and
12:37 - then if needed we can start to use
12:39 - javascript in the browser to talk to
12:42 - api's and get get content and embellish
12:45 - and enhance the experience here in the
12:47 - browser they're still rooting and
12:50 - serving going on but typically in a jam
12:52 - stack world what we're doing is we're
12:54 - pre generating all of those assets they
12:56 - can so they can be served from a very
12:58 - simple static server or even better
13:00 - still a CDN and this is the kind of
13:03 - thing that can be managed for us it's
13:05 - almost like a service that's been
13:06 - completely abstracted away since there's
13:08 - no internal kind of clever logic logic
13:11 - here which is coupled to the way that
13:13 - our system in our application
13:15 - works so markup JavaScript an API is
13:18 - kind of moved the stack kind of away
13:21 - from the server and and and over here so
13:25 - jam stack really is about having things
13:28 - that are pre-rendered it's about
13:30 - leveraging the browser and the the power
13:32 - and the browser and the technologies
13:34 - available to us in the browser and it's
13:36 - about operating without a web server and
13:38 - all of these things bring us a bunch of
13:40 - different advantages we'll get onto that
13:42 - in a second but I just want to kind of
13:44 - put these two things back side by side
13:46 - for a second and consider you know what
13:48 - the stack looks like here in the depth
13:49 - of the stack that reaches all the way
13:51 - down to the operating system right the
13:53 - way up through the data the scripting
13:55 - and even the handling of the requests
13:57 - and compare that over here to to what
13:59 - happens with the jam stack where the
14:01 - stack is kind of moved up a level it's
14:03 - kind of closer to the browser is closer
14:05 - to the user we're not dealing with
14:07 - operating system infrastructure we're
14:10 - dealing with a runtime which is provided
14:13 - to us in the browser so that we can use
14:15 - JavaScript right there to do the dynamic
14:17 - things we need right there in the
14:19 - browser and sitting on top of markup and
14:21 - be able to call API s so this means that
14:26 - if we're if we're thinking about you
14:28 - know pre generating pre-rendering things
14:30 - working without a web server it feels
14:33 - like we're getting a bit closer back to
14:36 - this this kind of environment this kind
14:37 - of flow where we're pre generating
14:40 - things putting them somewhere that they
14:42 - can be found and then a request comes
14:44 - from a user to get the stuff and they
14:46 - give that back this this some kind of
14:50 - return to this simplicity was starting
14:52 - to get appreciated quite a long time ago
14:54 - Aaron Swartz has done a lot for the open
14:58 - web and lawful web project web
15:00 - development in general can coined this
15:02 - term he talked about bake don't fry in a
15:05 - blog post that he wrote back in 2002 has
15:08 - his instincts were tough and trying to
15:11 - get back to a place of more simplicity
15:13 - where things could be much more robust
15:15 - if only we could find a way to get to
15:17 - this point we were not building our
15:20 - response to a request every time frying
15:23 - it on demand but instead baking it ahead
15:25 - of time so it's ready to return
15:27 - and this idea of pre-rendering that
15:30 - we're talking about and having things
15:32 - ready to go for when they're requested
15:34 - and there are lots of reasons we might
15:35 - have motives for that I think about it
15:38 - as doing the work now so your servers
15:41 - don't have to do it later kind of
15:42 - enlightening the load and the complexity
15:44 - at request time and doing this work
15:47 - upfront and I also like to think of
15:49 - putting some distance between the
15:51 - complexity and the user again thinking
15:53 - about this this world where perhaps
15:57 - we're having to have moving parts or all
16:00 - of these stages when a request comes
16:02 - from a user knowing that with confidence
16:04 - all of these things will work perfectly
16:06 - every time and the transmission between
16:08 - these things is going to work perfectly
16:09 - every time and there's sort of
16:11 - complexity in and potential failure
16:14 - points there and the more we can reduce
16:15 - those and the more we can put distance
16:17 - between the user and that complexity the
16:20 - better and we'll talk about how we put
16:22 - that distance between those two things
16:23 - shortly being in a situation where we
16:28 - have a much simplified kind of hosting
16:30 - scenario where we've got pre-generated
16:32 - assets this hugely simpler format that
16:35 - simplifies deployments and I want to
16:37 - just kind of illustrate that point just
16:39 - a tiny bit so I've kind of adapted our
16:41 - diagram from earlier where we've got a
16:44 - request in a traditional stack that's
16:46 - maybe hitting a CDN but also hitting a
16:48 - load balance web server database service
16:51 - and the request goes through all of
16:52 - these things when we're talking about
16:55 - our development and our deployment of of
16:58 - our code and our content well that
17:01 - requires action being taken and updates
17:04 - happening to each of these bits of
17:05 - infrastructure sometimes there are many
17:07 - of these bits of infrastructure next to
17:09 - each other and so as we're deploying and
17:11 - developing and deploying our code we
17:13 - need to make sure that we can
17:14 - predictably update all of these things
17:17 - and they all stay in lockstep so that
17:19 - now the result is always going to be
17:21 - something predictable if we compare that
17:24 - to the situation with the jam stack
17:26 - where everything is pre generated and
17:29 - ready to go as a content delivery
17:30 - network it means that our process of
17:33 - development and deployment that's
17:36 - radically simplified that that is a
17:38 - situation where we're essentially
17:40 - updating
17:41 - one one resource in a known in a known
17:44 - and predictable way this unlocks all
17:47 - kinds of opportunities for us and one of
17:49 - those things is that we can start to use
17:50 - version control for everything now yes
17:53 - it's fair to say that we might want to
17:54 - do that in this environment as well and
17:56 - of course we do but when we're in a
17:59 - situation where we're building an own
18:01 - asset and putting that with that one set
18:03 - of assets in a single place it means
18:06 - that we can start leveraging things like
18:08 - version control and tools like git which
18:10 - we'll come to in a little while
18:11 - and start using that in our examples we
18:15 - can have the version control used for
18:17 - everything right down to the
18:18 - configuration of how the CDN works right
18:22 - through to all of our content all of the
18:24 - code and then that version control can
18:26 - reach all the way through to the hosting
18:28 - environment and through to the
18:29 - deployment process so that we are in
18:32 - have a very predictable way of updating
18:34 - and deploying our code there are a few
18:38 - other advantages of gem stack that I
18:39 - think are really important to call out
18:41 - and those are security performance and
18:44 - scale and I'll just spend a couple of
18:46 - minutes just just describing those just
18:48 - just in short so in terms of security
18:51 - and how does the gem stack improve our
18:53 - outlook for security for websites well
18:56 - as you might imagine from the diagrams
18:59 - we've just seen we get a greatly reduced
19:01 - surface area when we're we're working
19:03 - with the jam stack you know if we think
19:04 - about this comparison once again the
19:07 - kind of infrastructure we have in play
19:09 - and the kind of infrastructure we need
19:10 - to secure even against the requests that
19:13 - we know are going to have to pass
19:14 - through all of the simba structure and
19:16 - have code that executes in all of these
19:18 - different environments the more
19:20 - infrastructure we have and the more
19:22 - moving parts and the more code we have
19:23 - the more we have to secure simply put
19:27 - with the jam stack you know that there
19:28 - are fewer there are fewer moving parts
19:31 - in the scenario and I can't sometimes
19:34 - glibly kind of comment about the fact
19:36 - that there is no server more secure than
19:38 - the one that doesn't exist so getting
19:40 - some of this infrastructure and these
19:42 - moving parts out of the out of our
19:44 - hosting scenario
19:46 - just creates a much more unmanageable
19:49 - security profile for us and there are
19:51 - far fewer moving parts to attack moving
19:55 - on to performance well when we think
19:58 - about how we've tried to handle
20:00 - performance in our traditional stack
20:02 - that kind of stack though I've been
20:03 - illustrating well often what we'll do
20:06 - when we're trying to build out that kind
20:08 - of hosting environment to be very
20:11 - performant and to respond to requests
20:13 - quickly is we'll start to add some
20:16 - static layers to that and what I'm
20:18 - talking about there is I'm talking about
20:19 - caching so if we go back to our diagram
20:22 - once again you know at each level of the
20:25 - stack in order to try and speed up the
20:28 - process of this request hand passing all
20:31 - the way through the infrastructure and
20:32 - back every level we try and minimize the
20:35 - dynamic things we have to do here so a
20:37 - web server we might might look at well
20:41 - what templates are commonly used with
20:44 - what data and can we cache that response
20:46 - so it's ready to go when a request comes
20:49 - into it that reaches down as well into
20:51 - things like the databases where we might
20:53 - try and cache common queries for the
20:55 - data so a request that comes in there
20:58 - actually isn't doing something dynamic
20:59 - it's saying ah this is a common request
21:01 - so I can serve that statically and
21:03 - return that much more quickly
21:05 - that's true every level level through
21:08 - right through to the CDN where some
21:10 - assets are cached but some of them will
21:11 - need to be refreshed and updated or you
21:15 - can pair that with a jam stack every
21:17 - time we do a deployment into our CDN
21:19 - effectively we are updating the entire
21:22 - serving cache there are is no logic that
21:24 - we have to manage this kind of this
21:26 - barrier between what is cached and what
21:28 - needs to be dynamic and it's this
21:30 - logical separation at each level that
21:33 - adds complexity and adds complication to
21:37 - how we deploy and manage and maintain
21:39 - these bits of infrastructure caching is
21:41 - hard caching is one of those things
21:43 - there's universally understood to be
21:44 - hard in web development and this more
21:47 - you can simplify the model of the cache
21:48 - and ideally have something that takes
21:50 - care of that for you wholesale the
21:52 - better off we'll be but it's also
21:55 - interesting to note that know for all of
21:57 - the
21:59 - benefits we might you might sometimes
22:01 - hear about for a dynamic back-end the
22:04 - way we try and make it go fast is adding
22:06 - static layers into it and this is an
22:08 - again an area that will we'll kind of
22:10 - think about a bit later on when we talk
22:12 - about what truly is dynamic and what
22:13 - truly is static let's move on to scale
22:16 - so when we're talking about scale we're
22:19 - talking about you know how many how many
22:22 - requests can we can we manage with a
22:24 - particular piece of infrastructure
22:26 - traditional stacks add infrastructure in
22:29 - order to in order to cope with large
22:31 - scale in a previous life I I worked
22:35 - doing technical architectures for the
22:38 - large projects and it was always a tough
22:40 - question to say to answer how much how
22:43 - much will our infrastructure cost for
22:44 - this project because we kinda just
22:46 - needed to know well how much traffic are
22:48 - we gonna get and also how complex is it
22:51 - for us is it going to be for us to to
22:53 - handle of each of those a quest and
22:55 - requests and as a result how much
22:56 - infrastructure all we need adding
22:59 - infrastructure to include - - to handle
23:03 - scale looks a bit like this I mean
23:05 - certainly adding these caching layers
23:06 - that's going to help to a degree because
23:08 - that lightens the load on what needs to
23:10 - be be dynamically that work that needs
23:13 - to be dynamically done but knowing that
23:15 - there's going to be more and more
23:16 - traffic here at each of these levels and
23:19 - the result is that we start to we start
23:21 - to add more more bandwidth in we start
23:23 - to add more servers more capability more
23:26 - capacity rather to handle this increased
23:28 - load more servers means more costs more
23:31 - complexity our deployments are getting
23:33 - more complex as we manage things across
23:34 - here and this is just catering for a
23:36 - live environment we're not even talking
23:38 - about things like staging and testing
23:40 - environments where we really strictly
23:42 - speaking we should be replicating all of
23:44 - these so this is a different scenario to
23:46 - the gem stack where by by design and by
23:49 - default the jam stack where everything
23:52 - is already cached there's no additional
23:56 - dynamic work to do this kind of
23:58 - on-demand work to do so we're at an
24:01 - optimal position already serving
24:04 - everything from a content delivery
24:06 - network which is from it's very
24:08 - inception was designed to handle thing
24:10 - at high load that's exactly what they're
24:13 - for
24:13 - so we've got a much better scenario over
24:15 - here if we can work in this way okay
24:19 - that sounds fine um but you might be
24:22 - raising an eyebrow and thinking well
24:23 - okay but what you're describing is a
24:25 - return to this and I thought this was a
24:27 - problem because everything had to be you
24:30 - know we're we're hand making all of
24:32 - these assets and putting them there and
24:33 - we don't we don't know how to to service
24:35 - things are a little bit more custom or
24:37 - dynamic well that's a fair thing to call
24:41 - out and a common a common point of
24:43 - concern but luckily the whole reason
24:45 - that Jam stack exists and the whole
24:47 - reason this term really exists is we've
24:49 - moved on you know we're we're lucky that
24:51 - we've we've we're lucky that we've got
25:01 - the dukes of this experience now we've
25:02 - been building and learning about new
25:05 - approaches and new tools so things have
25:07 - evolved we're not quite in the same
25:08 - scenario we were before and I tend to
25:11 - think of it as having all of these
25:13 - enablers yes we used to think of things
25:17 - in this world as static sites that word
25:19 - isn't going to cut it anymore
25:20 - things aren't static in the same way at
25:22 - all anymore where there are benefits
25:24 - from hosting things in this way but
25:26 - we've really evolved the tools and the
25:28 - systems have evolved I think of it in
25:30 - terms of enable us we've got all of
25:32 - these enables now that allow us to go
25:34 - far beyond what we used to do and that's
25:36 - what the jam stack is all about so
25:38 - they're enable that enables things such
25:40 - as static site generators now a static
25:43 - site generator is a script if you like
25:46 - which effectively does the work that we
25:49 - used to do in a web server here we used
25:51 - to have templates and data and logic and
25:54 - when a request would come in we'd munge
25:57 - those through all of those things and
25:58 - generate a view and return it well a
26:01 - static site generator includes all of
26:03 - those things but rather than happening
26:05 - happening at request time this happens
26:07 - at build time so we can generate all of
26:10 - the resources that we need for an entire
26:12 - site by running a script ahead of time
26:15 - that kind of brings me to tooling in
26:17 - automation because it's kind of one of
26:19 - one one aspect of that there are all
26:22 - kinds of resources now for how we
26:24 - automate the process of generating our
26:28 - sites how we trigger those things how we
26:30 - predictably deploy and manage the assets
26:33 - and the tooling and the automation that
26:34 - has arrived in the industry now really
26:37 - elevates the kind of sites that we can
26:39 - build and the way we build it and that's
26:41 - what we're gonna look at just a little
26:42 - bit as we get into our examples in a few
26:44 - minutes the other thing that really has
26:46 - become a huge enabler is the development
26:49 - in browsers where browsers are so much
26:50 - more capable now than they ever were
26:52 - before now this doesn't mean that we
26:54 - just offload all of the work and all of
26:56 - the complexity from the backend into the
26:59 - front end certainly we can do more than
27:01 - we've ever done before
27:02 - but there are techniques for
27:04 - progressively enhancing the experience
27:05 - in the browser and responsibly building
27:08 - up layer upon layer of of functionality
27:12 - and dynamism in the browser we can
27:15 - leverage all kinds of smart things at
27:17 - the browser level that we just didn't
27:18 - have access to before and the last and
27:21 - perhaps one of the largest enable is I
27:22 - think for the jam stack is the the
27:27 - number of services and api's and this
27:29 - thing with the API economy has really
27:31 - flourished and we're starting now to see
27:34 - companies emerge with all kinds of
27:37 - specialisms the kind of things that we
27:38 - used to have to build in-house with our
27:40 - with our own team now companies are
27:43 - starting to see the opportunities of
27:45 - creating those those capabilities and
27:49 - offering them as a service and offering
27:51 - access to them through API so that we
27:53 - can predictably request access to those
27:56 - and get the kind of capabilities that we
27:58 - need to bring into our sites so with all
28:01 - of these things together this really
28:03 - elevates the kind of sites that we can
28:06 - build from what we used may be we used
28:08 - to think of a static but now can do so
28:11 - much more because of all of these things
28:13 - so over the course of the next I don't
28:16 - know a couple of hours we're gonna look
28:18 - at a bunch of examples and it's gonna
28:21 - start super simple we're gonna start
28:22 - with something that which very much is
28:25 - in this territory
28:27 - but then over the course of the examples
28:30 - we'll build up we'll start to introduce
28:32 - static site generators we'll look at
28:34 - some of the tooling and automation we
28:36 - are going to start to do things directly
28:38 - in the browser and start to call on
28:39 - browser api's and then also use
28:42 - javascript in the browsers to call on
28:44 - services that exist out there in the
28:46 - world and bring in content from
28:49 - different api's and different services
28:51 - that exist there so that's a brief
28:54 - introduction to what the Jam stack is
28:56 - and where we're going to go and now I
29:00 - think we'll we'll get into some examples
29:03 - I'm a tiny bit conscious that this is a
29:06 - this is a long video and I've got I got
29:09 - six well seven examples to show you so
29:12 - depending on what you're looking for you
29:14 - might want to jump right the way
29:15 - indirectly to some of the some of those
29:17 - examples now these these do follow a
29:20 - particular pattern they do follow a bit
29:22 - of a journey we'll start with something
29:24 - very simple and we'll use the same
29:25 - example to gradually build up so to get
29:28 - you know the full story you'll probably
29:29 - want to to watch each of those in term
29:31 - however if you want to jump straight in
29:34 - I've just put this little index page
29:37 - here so you can see the approximate
29:39 - times of when to when to jump into each
29:41 - each section so it starts with a very
29:43 - simple static site a single file beings
29:47 - host being created and deployed but this
29:50 - does look at the the simplest way of
29:52 - deploying the site's not just making it
29:54 - so that's kind of why that's there and
29:56 - important then on top of that we start
29:59 - to add some simple JavaScript rendering
30:02 - to that example
30:03 - so we'll start manipulating things in
30:05 - the client then after we've done that
30:08 - we'll move down to building that
30:12 - experience I'd with a static site
30:14 - generator so we'll start to use some
30:15 - kind of templating and abstraction and
30:17 - how the mechanics of that work and then
30:19 - some automation there and we'll do that
30:21 - so that then our next example example
30:24 - number four will start to populate that
30:28 - site and that static site that I built
30:30 - with this static site generator with
30:32 - content from an API and we'll be doing
30:34 - that at build time from there we'll go
30:36 - on and we'll start using the content API
30:40 - to
30:41 - to also render out lots of different
30:42 - versions of the site with different
30:44 - localized content and start to configure
30:47 - our content delivery network to route
30:49 - people to the appropriate route based on
30:53 - their their location in the world then
30:56 - after that an example six will start to
30:57 - add a bit more client-side rendering and
31:00 - start to target content to the visitor
31:03 - of the site based on some JavaScript
31:05 - will run in the front end so we'll start
31:07 - to interact with the browser api's and
31:10 - then do some crime side requests other
31:12 - content api's to do some progressive
31:14 - enhancement of that page through some
31:17 - client-side rendering so those are the
31:18 - examples we're going to work through and
31:21 - the time codes that you have with them
31:22 - then at the end I couldn't help myself I
31:25 - added just another bonus piece of
31:27 - demonstration to think about how we
31:30 - gradually introduced a jam stack site
31:32 - into your existing infrastructure so if
31:34 - you have a complex infrastructure
31:37 - already and you and you think well I'd
31:38 - like to start using the jam stack but
31:40 - how do I introduce the two and blend the
31:42 - two together this is the time when you
31:45 - can find an example of how we can do
31:48 - that using some of the tools that we'll
31:50 - see along the way but ultimately it's a
31:52 - it's a quick look at how we can start to
31:55 - introduce a jam stack site into around
32:00 - your existing hosting infrastructure so
32:03 - that's the rundown of the demos we'll
32:05 - get into and the times that you can you
32:08 - can access those
32:14 - ok so I think it's time for an example
32:17 - let's let's jump into one or two
32:19 - examples and we're gonna start nice and
32:21 - simple let's let's not let's not go
32:23 - crazy to start off with let's just start
32:25 - super simple and we'll build up over
32:27 - time one of the things that we'll do
32:29 - through each of these examples is the
32:31 - code is gonna be you can follow along as
32:33 - I as I write some of this but also I'll
32:35 - pop this on to github repository so you
32:38 - can you can grab the code and step
32:41 - through it as well now this first one
32:43 - work that I'm starting with is very
32:44 - simple so you might you might not be so
32:46 - inclined to do it but let's let's start
32:47 - with the same conventions we're gonna
32:49 - use throughout so each of the
32:50 - repositories is going to be available to
32:52 - you at a URL like this so find that out
32:54 - jam stack slash x1 for example number
32:58 - one that's where this is gonna be and
33:00 - this example we're starting is just very
33:02 - simply and with a static a variable
33:05 - static site let's just look again just
33:08 - as a bit of a reminder about now what is
33:11 - Jam stack what is this thing we're gonna
33:12 - make and just as a bit of a refresher no
33:14 - we're just saying that Jam stack is fast
33:17 - and secure sites and apps delivered by
33:19 - pre-rendering files and serving them
33:22 - directly from a CDN which removes the
33:24 - requirement to manage and run where run
33:25 - web servers great so what we're gonna do
33:28 - is we're gonna pre-render which is a bit
33:29 - of a fancy word really or for what we're
33:31 - doing we're gonna just make an HTML file
33:35 - that will then host directly from a CDN
33:38 - so that we don't have to to bother with
33:40 - apache or nginx or other kind of web
33:42 - servers it should be nice and simple
33:43 - what are the things we're gonna make
33:45 - well I've given it away just by saying
33:47 - we're just gonna make HTML so we're just
33:48 - gonna make markup but as again as a
33:50 - reminder Jam stack it's JavaScript API
33:52 - and markup but it doesn't have to be all
33:55 - three it can be any one of these I mean
33:57 - critically I guess markup is the minimum
34:00 - viable site you can have you know
34:02 - browsers interpret HTML they interpret
34:05 - markup and do things with them even if
34:07 - that markup then calls in JavaScript and
34:10 - and makes use of api's or what-have-you
34:11 - but to start with I think we'll just
34:13 - make some markup and we'll put that
34:15 - somewhere that can be served as a gem
34:17 - stack site so just a tiny look again at
34:21 - what this could look like this is the
34:23 - thing we're about to do we're gonna
34:24 - build something now later on as this
34:26 - gets more more
34:27 - or advanced will be building things will
34:29 - be using tooling to be building this
34:31 - will be using some automation or perhaps
34:33 - use a static site generator for the
34:35 - moment we're gonna you know I'm just
34:36 - gonna be mashing a keyboard and and
34:38 - making a file that will then deploy to
34:41 - some hosting somewhere so it can go into
34:43 - a content delivery network a set of
34:45 - servers around the world that we don't
34:47 - need to manage its managed as a service
34:49 - but then it'll give us a URL so that we
34:51 - can request this page in our browser get
34:55 - the markup which you know we don't have
34:56 - to do anything because that's all been
34:58 - pre-built it will come down the wire and
35:00 - our browser will then be able to display
35:02 - that to us that sounds like I'm maybe
35:05 - over complicating things or being very
35:07 - Ferrari with my description given what
35:09 - we're about to do but these are the
35:10 - principles that will build on over time
35:12 - so let's let's jump into into making
35:15 - something we're just going to make a
35:17 - very simple static view of a page first
35:19 - of all and I've got a folder set up here
35:21 - which i think is empty yeah great so
35:23 - let's just start coding something now I
35:26 - love this because it kind of harks back
35:28 - to the the things that I was doing was I
35:31 - started to get into web development you
35:32 - know I was opening up text editors
35:37 - writing code now admittedly I didn't
35:40 - have lots of helpers like this which is
35:41 - lovely being able to have helpers such
35:43 - as that to speed some of these things up
35:47 - but ultimately writing code in text
35:50 - editors and then refreshing the browser
35:52 - to see the result I used to love that so
35:54 - this kind of makes me reminisce about
35:57 - that but let's get on with this and this
35:59 - make you know a page you we're gonna
36:02 - gradually get to the point that we
36:04 - customize this and make this a bit
36:05 - personalized to start with it's going to
36:07 - be super simple though I am going to
36:10 - make a little wrapper so I can do some
36:13 - by centering and bits and bobs like that
36:15 - I will put an h1 in there and say this
36:18 - is
36:23 - capitalize that and let's let's put
36:28 - something in here that maybe will
36:29 - customize a bit later on let's make this
36:32 - nice and positive put some love in here
36:39 - fine
36:40 - maybe we should style this up a little
36:42 - bit I'm just gonna do this all in line I
36:43 - think rather than creating some CSS
36:47 - files that I'll call in I'll split that
36:49 - out later on but for the moment really
36:52 - are keeping this nice and nice and basic
36:55 - just to reline that oops what else
37:02 - should we do
37:10 - with perhaps a 400
37:20 - and let's let's make that that love nice
37:25 - and visible okay oops okay so we've made
37:36 - something pretty pretty simple I think
37:38 - you'll agree it's just a single file now
37:41 - we don't need a web server to serve this
37:43 - we're not this is about as basic as it
37:46 - can get so I could in fact just open
37:48 - this up locally with my browser yeah I
37:57 - don't think there's any huge surprises
37:59 - and what we're seeing there is just some
38:01 - static HTML being served locally from my
38:04 - file system
38:04 - there's no Apache there's no nginx
38:07 - there's nothing really clever going on
38:09 - here it's just it's just a file that
38:11 - we're serving and as such this makes it
38:13 - ideal for being out to servers are as
38:15 - our most basic Jam stack example now
38:18 - there's a load of different places we
38:19 - could perhaps go to host this full
38:22 - disclaimer I work at neckla fire which
38:24 - is a company that does this sort of
38:26 - thing so I'm gonna use neckla 5 mostly
38:28 - just because it's most convenient and I
38:29 - think is pretty it's pretty simple to
38:31 - get started with and but of course there
38:33 - are other companies you could use for
38:34 - this you could be hosting this on say
38:36 - github pages or on site or on Google
38:40 - cloud or directly on on Amazon Web
38:43 - Services maybe in an s3 bucket I'm just
38:46 - going to use this because it's a very
38:47 - very simple example very simple way to
38:50 - get started and here's my is my
38:53 - directory that we just created I just
38:55 - created that one index file in it I'm
38:57 - just gonna drag and drop that onto here
38:58 - and so what's happening here is this is
39:01 - being deployed to a CDN this has gone
39:04 - over to net the vine and if I've pushed
39:06 - it around to their different hosting
39:08 - infrastructure and we've got a URL for
39:10 - that now so I can look at that we see
39:13 - that this your URL here's our page if we
39:16 - did a dinner view source no surprises
39:19 - because it's just exactly what we always
39:21 - heard it's being what we built it's
39:22 - being so statically it's being served
39:24 - from a CDN I don't have a server to
39:27 - maintain to keep this alive it's just
39:29 - it's just there as part
39:31 - servus so yes that was that was terribly
39:34 - simple in terms of what we built but
39:36 - let's just let's just just refresh what
39:39 - we've done there okay so we we built
39:42 - something we made something because by
39:44 - typing rather than with any kind of
39:46 - build tools we deployed it to a hosting
39:48 - environment to a CDN and then we called
39:51 - it up in the browser seeing the markup
39:53 - there
39:53 - so was that Jam stack let's have a quick
39:56 - Center check of that well yeah I think
39:59 - so I mean it's just markup and jump
40:01 - stack sites a JavaScript API so markup
40:04 - it's a super simple example but it's
40:05 - markup it was pre-rendered we didn't
40:09 - have to render anything at request time
40:11 - all we were doing was serving that
40:13 - static asset directly from the CDN we
40:16 - didn't have to manage any web servers or
40:18 - or have any logic running there it's it
40:20 - effectively just fit serving that file
40:23 - so in the answer the question was that
40:25 - jam stack yep I think so that's sir
40:27 - that's probably the most simple example
40:30 - we can have of a jam stack site but now
40:32 - in a position to move on and build
40:33 - something a bit more interesting so
40:35 - let's gradually layer up with another
40:37 - example so onwards to our next example
40:42 - example number two we're gonna add some
40:44 - Java scripts to what we had previously
40:47 - um you at once once again the code is
40:50 - going to be available on github so you
40:51 - can you can just jump straight into what
40:53 - we have there so that's going to be it
40:55 - find that at Jam stack x2 since this is
40:58 - example number two and we're gonna use
41:01 - JavaScript to make the page a little bit
41:04 - more interesting we're gonna keep on
41:05 - building on that previous example but
41:07 - move it along a little bit so you know
41:09 - we have just our markup previously now
41:11 - we're going to be adding JavaScript at
41:13 - this point we're not gonna be calling
41:15 - any API so we're gonna come to that a
41:16 - little bit later on but as I said before
41:18 - jab stack doesn't need to use all of
41:20 - these things you can use any of them
41:22 - typically will always include markup but
41:24 - now we're just going to add some
41:25 - JavaScript there are a few different
41:27 - things that we might do with JavaScript
41:28 - at different stages of the development
41:30 - the deployment and the execution time so
41:34 - let's just look at that's a tiny bit and
41:36 - I'm gonna call out this this phrase
41:37 - rendering so you may have heard people
41:38 - talking about rendering and different
41:40 - types of rendering and I think we should
41:42 - call out a few of the main types of
41:44 - render
41:45 - just to explain those and unpack those
41:47 - terms a little bit so here they're the
41:50 - three types of rendering that I want to
41:52 - call out and they come into two groups
41:53 - this client-side rendering and this
41:55 - server-side rendering so first of all
41:57 - let's talk about client-side rendering
41:58 - let's talk about what that means when we
42:00 - say client-side rendering what we're
42:02 - talking about is executing JavaScript in
42:04 - the browser so in the client executing
42:08 - JavaScript in the browser that
42:09 - manipulates the Dom so in other words
42:11 - it's changing the what the user sees in
42:15 - the document object model the view that
42:17 - is rendered by the browser so that means
42:20 - that now this code executes not in
42:23 - server land but in browser land so this
42:26 - on the the user's device is in their
42:29 - browser
42:29 - it runs client side and that JavaScript
42:32 - has just come down the wire it might be
42:34 - in the same page same file as the HTML
42:37 - it might be in different files and
42:39 - different assets but none of it is
42:41 - executed on the server this is all
42:42 - executing client-side in the browser
42:46 - then if we look at the other side of
42:48 - rendering looking at server side
42:50 - rendering sometimes you hear this
42:51 - abbreviated to SSR there's a couple of
42:54 - different ways we might think about
42:55 - server-side rendering this request time
42:57 - and there's build time but both of these
43:00 - things that are happening on the server
43:01 - so let's look at request time first of
43:03 - all and when we're talking about
43:04 - server-side rendering that happens a
43:06 - request time or so per request what we
43:09 - mean is generating the mark-up on
43:10 - requests in the server and then
43:12 - transmitting that to the client so it's
43:15 - like a little diagram of this for just a
43:17 - moment so this is familiar from from the
43:19 - first example but we've just changed it
43:21 - a little bit because what's happening
43:22 - here is when the browse when the user
43:24 - makes a request from buy point in their
43:26 - browser at a URL that rather than
43:28 - hitting a CDN perhaps we're hitting a
43:30 - web server now on that web server we
43:32 - don't have a complete view ready to go
43:34 - we're gonna render that on demand as a
43:36 - response to that request so on the web
43:39 - server we might have maybe some
43:41 - templates maybe some other logic that
43:43 - gets executed to determine what template
43:46 - we we use maybe that calls out to data
43:48 - that we need to populate the template
43:50 - with to generate this view that might
43:52 - live on the same machine as sites get
43:55 - bigger we typically split that out so
43:56 - it's on a different server so it's on a
43:58 - database
43:58 - server so we might need to make a
43:59 - request for that data then mash that
44:02 - together with the template to generate
44:03 - the view that we send down the wire to
44:06 - the browser for it to get displayed in
44:08 - the browser now during build time and
44:11 - deployment time you know we might be
44:13 - writing the code that is the logic the
44:15 - templates we might be populating data
44:17 - into the database for the content so
44:20 - those kind of tasks are happening at
44:21 - Build time but the critical piece of
44:24 - generating that view and then returning
44:26 - it to the user that is happening at
44:29 - request time in server-side rendering
44:31 - that happens at request time so that's
44:33 - this scenario the other scenario is
44:36 - server-side rendering build time I
44:37 - sometimes talk about that as being pre
44:39 - generation or site generation but I
44:43 - think perhaps a more youthful term is
44:44 - still thinking about it as server-side
44:46 - rendering but this is happening at build
44:48 - time rather than request time so we talk
44:52 - about that as being you know we generate
44:54 - markup a build time so that is ready to
44:56 - transmit to the client when needed so we
44:59 - don't need to perform this this task of
45:01 - compiling or generating rendering the
45:04 - view per request this has happened
45:07 - happening once a build time so you know
45:10 - the view of that looks looks like the
45:12 - view we had previously in this diagram
45:14 - so the the rendering happens here at
45:17 - build time and then it's deployed to
45:19 - wherever we're going to serve it from so
45:21 - in this case a CDN a content delivery
45:23 - network so that it's ready for every
45:26 - request we don't have to do this again
45:28 - it's ready to send down the wire to the
45:31 - user so both in client-side rendering
45:34 - and in server-side rendering at Build
45:37 - time they share something in common and
45:39 - that is that per request we don't need
45:41 - to execute any logic on the server to
45:44 - then generate a view these things are
45:47 - all ready to go and one of the things
45:49 - that you sometimes might hear is with
45:50 - the jam stack the stack you know the
45:52 - technology stack the things where logic
45:55 - is executed has kind of moved to the to
45:58 - the to the browser and move closer to
46:00 - the to the to the user and into the
46:02 - browser because here we are executing
46:04 - code that you know will
46:06 - changed the view and change the
46:08 - rendering but that's not happening on a
46:09 - server that's happening in JavaScript
46:11 - and in the client side neither one of
46:14 - these has has a server that executes
46:16 - logic so these are the two kinds of
46:17 - rendering that you often associate with
46:19 - Jam stack so the thing that we're going
46:22 - to build in this next example is going
46:25 - to be something that does some
46:26 - client-side rendering it's a very
46:28 - simplistic example but we'll get into
46:30 - that now so let's let's go over to our
46:36 - folder again so we've got a new folder
46:39 - here for this example if I just list
46:41 - what's in there at the moment we just
46:43 - got the index.html file that we had
46:47 - before let's just open that up and and
46:49 - refresh our memory was just a moment ago
46:52 - but here we are it's just a simple
46:55 - little HTML file but we're gonna do
46:57 - something here with JavaScript in the
46:59 - client that's gonna change this view and
47:01 - manipulate that's a little bit so at the
47:03 - moment I've got this page which is a
47:04 - page just for me it's a very
47:07 - motivational thing for me to see each
47:08 - day but let's let's change this a little
47:11 - bit so there's something something
47:14 - that's potentially gonna be some a bit
47:15 - dynamic so I want to have a bit of a
47:17 - vibe that I get every day from this a
47:19 - little message you read that's the kind
47:25 - of motivation I need but let's make this
47:28 - message change every time the user
47:30 - refreshes the page so in other words
47:32 - we're gonna be changing what's rendered
47:34 - in the browser with JavaScript every
47:36 - time the user refreshes it so let's
47:39 - create a bit of JavaScript over here too
47:42 - to do that let's go yes what might we
47:47 - have in here well I'm gonna do some copy
47:48 - and pasting so you don't have to watch
47:50 - me type but what we're gonna do is we're
47:53 - set up a bunch of different messages
47:55 - that we might display in this this this
47:59 - div here so at the moment it tells me
48:01 - I'm great which is all very nice but
48:04 - let's have a few different messages that
48:06 - might get displayed to me so yeah these
48:09 - are the kind of affirmations I need to
48:11 - brighten my day but we'll choose one of
48:13 - these are at random so let's just I'm
48:16 - going to put in
48:17 - again I'm just going to pull in the code
48:18 - rather than having you watch me type it
48:21 - so I've set up an array of of these
48:24 - vibes these messages and then I'm going
48:27 - to choose one random with this bit of
48:29 - JavaScript that just pulls from random
48:31 - one of these one of these messages and
48:36 - then we're going to display that in the
48:38 - browser by selecting the the element
48:44 - that has this vibe class and appending
48:47 - whichever one of these these messages
48:50 - that we've selected at random of course
48:53 - we need to to call that into the page
48:57 - let's just do that down here that's the
49:01 - script tag and we'll source that from
49:07 - yes okay so once again you know there's
49:13 - nothing happening that that requires a
49:16 - server here this is all happening in the
49:19 - clients that open up let's pull it over
49:21 - here I'll need to let me just make you
49:27 - so you can see this
49:30 - okay so let's save that open that okay
49:45 - so now every time we reload our page
49:48 - we're getting a different view or a
49:52 - different message here that's injected
49:55 - by JavaScript now again this is a simple
49:57 - explanation very deliberately but what
50:00 - we're doing is effectively rendering
50:03 - some content client-side okay what we
50:07 - should probably do is get that deployed
50:09 - as well so if you recall we were in our
50:13 - previous example we had had this little
50:18 - little site being deployed we've got one
50:20 - one publish already and what I'll do is
50:23 - I'm just going to
50:31 - okay so now we have a a second example
50:33 - here yes let's do likewise let's let's
50:38 - go to our deploys we're going to send
50:41 - this to the server to the hosting as
50:44 - well okay so now hopefully when we go to
50:47 - our our site okay great now we have this
50:50 - extra message there we didn't have
50:52 - before which is which is on the server
50:54 - and each time we load the page that's
50:57 - changing now you'll notice that this
51:00 - this is happening at the time that I run
51:05 - the code in the browser so in other
51:07 - words this happened in client-side none
51:09 - of this is happening server-side all
51:11 - we're serving from the server is this
51:14 - HTML and this JavaScript all of which
51:18 - was pre-rendered pre generated and we
51:20 - did it manually by typing it but it's
51:22 - the kind of thing that might have been
51:23 - something of a build output but
51:25 - nonetheless we've got some some simple
51:26 - client-side rendering happening as a
51:28 - slight enhancement and this is somewhere
51:29 - again that we'll be able to build on for
51:31 - our next example so let's just recap for
51:35 - just a moment you know what what have we
51:36 - got here so we're manually generating
51:39 - some markup and we've also written some
51:41 - JavaScript that comes down the wire and
51:43 - then in the client we're doing some very
51:46 - simple JavaScript just to manipulate the
51:48 - DOM and render some different content
51:50 - and that's that's what's happening right
51:52 - now so let's do our little recap was
51:54 - that Jam stack yep we've got mark up
51:57 - we've got JavaScript and critically what
52:00 - we don't have is a web server running
52:03 - that we need to manage everything is
52:04 - being hosted and served directly from a
52:06 - CDN so yes indeed that that is still
52:09 - very much Jam stack but now we need to
52:12 - start making things a little bit more
52:13 - interesting so let's let's move on to
52:14 - our next example
52:21 - alright so in our next example things
52:24 - are gonna start to get a bit more
52:25 - interesting now because in example
52:26 - number three we're gonna start doing
52:29 - that server-side rendering at Build time
52:31 - with some automation rather than just
52:34 - typing these files that we've been doing
52:36 - so far let's let's start to add some
52:38 - scripting and some automation so this
52:39 - example is building with an SSG or with
52:41 - a static site generator and I'll
52:43 - introduce you to that in a second the
52:45 - code that we're creating as before is
52:47 - going to be available in a github
52:48 - repository you can find that at gem
52:50 - stack x3 and you'll be able to to follow
52:53 - along with the code that we're gonna
52:54 - create together now Before we jump into
52:58 - making this and starting to write some
53:00 - code let's just talk about a few
53:02 - prerequisites because now we're not just
53:04 - editing files were actually starting to
53:06 - introduce some moving parts so there are
53:08 - a few things that you'll need in order
53:09 - to make this work so one of them is get
53:12 - so git for version control we're getting
53:15 - to the point that we're gonna start
53:16 - having versions and we're gonna start
53:17 - incrementing through that and later on
53:19 - we're also gonna start using git for
53:21 - actually deploying some of these updates
53:22 - so you will need to have git installed
53:24 - many systems already have that but you
53:26 - can you can get that for free from this
53:29 - URL also on free code camp there is a
53:32 - lot of support for getting started with
53:34 - git how to use it the other thing that
53:37 - we'll need to have installed is no js'
53:39 - so that's a local JavaScript engine so
53:42 - you can run JavaScript client and
53:45 - server-side or rather on your local
53:48 - development machine so we're gonna need
53:49 - to have no js' installed again it's for
53:51 - free and you can get that from node.js
53:53 - org there are there is a good help in
53:56 - getting started installing that should
53:58 - just take a few minutes to install once
54:00 - we've got those two things installed on
54:02 - our local machine there's another couple
54:04 - of things that we're going to use for
54:06 - hosting the code and then deploying the
54:09 - code later on we've already done
54:10 - something with metla fie with our drag
54:13 - and drop but we're gonna start using
54:14 - this a little bit more it's worth
54:15 - creating an account so that you can
54:18 - track this and and retain the site that
54:21 - you build rather than just having
54:22 - something which is ephemeral those
54:24 - drag-and-drop deploys we did earlier on
54:26 - if you don't claim those eventually they
54:28 - just go away so you just need to claim
54:30 - those so an account
54:32 - from Metta fide calm is important
54:33 - likewise in the account again for free
54:36 - from github github calm so that we've
54:39 - got somewhere to push our changes and
54:41 - track all of our changes so those are
54:43 - the prerequisites we'll need before we
54:44 - get started what we're going to do once
54:47 - we do get started is we're going to
54:49 - change so this is our diagram from the
54:51 - previous previous example so you may
54:54 - recall what we've what we've what we
54:58 - were comparing jams that to is these
55:01 - dynamic backends these web servers which
55:03 - compile the view on-demand for you so in
55:07 - this scenario you know when a request
55:08 - comes into the web server
55:10 - we're pulling together the data we need
55:11 - we're generating the HTML and then we're
55:14 - out putting it at request time whereas
55:18 - with Jam stack of course we're not doing
55:20 - that here we're doing this previously a
55:21 - build time and so far all we've been
55:24 - doing is is just typing assets what
55:27 - we're now going to do is we're gonna
55:28 - start to add some scripting some
55:30 - automation some intelligence here and by
55:32 - doing so we're effectively creating this
55:34 - server-side rendering at Build time
55:36 - we're generating the marker at Build
55:38 - time so it's ready to transmit to the
55:40 - client when we need it so that's what
55:41 - we're gonna do the way we're gonna do
55:43 - that is we're gonna have some kind of
55:45 - build automation so this is a script
55:48 - that will run which will pull those
55:49 - things together churn out the HTML and
55:51 - whatever assets we need to be able to
55:53 - tell the browser to render the site so
55:56 - we're gonna do some build automation and
55:58 - we're going to use a static site
55:59 - generator now you can think of a static
56:00 - static site generator effectively as a
56:03 - script that you run in any environment
56:05 - whether that's locally on your
56:06 - development machine or if it's an a
56:09 - continuous integration server and it's
56:12 - it effectively turns templates and data
56:15 - and whatever other bits of logic you
56:17 - have into a set of static assets that
56:19 - you can then deploy to a web host
56:22 - so again just going back to this it's
56:24 - it's the piece that we run here to
56:26 - generate all of the assets we need so
56:28 - that they're ready for form for the user
56:31 - when they come along and view the site
56:33 - there are lots of static site generators
56:36 - run I mean a lot of them they're really
56:38 - popular and there's this site static gen
56:41 - dot-com which is a good list of
56:44 - in fact what I might do let's just have
56:45 - a quick look here so there's this is
56:48 - static jenkum which is an open source
56:50 - repository of lots of static site
56:52 - generators if I was to start scrolling
56:54 - here each of one of these is a static
56:56 - site generator you can see the scroll
56:57 - bar there's a there's a lot of them
56:59 - there are hundreds and hundreds and
57:01 - hundreds of them and it's become very
57:02 - popular too to make these things but a
57:05 - few of them are bubbling up and getting
57:06 - particularly popular and we'll look at
57:08 - those in a second but I just wanted to
57:09 - call out that you can explore this site
57:11 - and find the one that's right for you
57:12 - we've kind of listed here the different
57:15 - languages that they're built in so you
57:17 - can find something that's been built in
57:18 - a whole host of different languages that
57:20 - you can use also the templating language
57:23 - so the language that you use to express
57:25 - the HTML and express the logic that
57:27 - generates the HTML there are lots of
57:29 - those as well and you may already be
57:30 - familiar with some of these or you can
57:33 - explore these there are lots of
57:35 - different options there as well so so
57:38 - you can kind of filter these and see so
57:41 - if I'm used to something which is kind
57:42 - of Django flavored I can filter it by
57:44 - that or ejs is a popular templating
57:48 - language so there's a bunch that support
57:50 - that you can explore this to your
57:51 - heart's content a few that I would call
57:54 - out so Jekyll was I think probably the
57:56 - the static generator I encountered first
57:58 - it's been around for a very long time
58:00 - was made popular by github because
58:03 - github pages supports this as the static
58:06 - site generator they will run on your
58:08 - behalf is based on Ruby so you have to
58:10 - install it with a ruby gem but you can
58:12 - explore the site and explore the
58:14 - documentation here if you wanted to use
58:16 - that one I'm gonna make a recommendation
58:17 - there which is what we're gonna use in
58:19 - our demos in just a minute but you know
58:22 - there's Jekyll there's also Hugo which
58:24 - is written in go which is super fast
58:26 - again we might have considered that one
58:27 - gasp bjs is another static site
58:31 - generator which is built on the react
58:32 - ecosystem so that might be one we
58:35 - consider but in actual fact I'm making a
58:38 - recommendation in a second so you know
58:40 - we can choose the static site generator
58:43 - to suit us based on the language maybe
58:46 - the workflow that it supports
58:48 - performance in terms of how quickly it
58:51 - rendered you know the site that it
58:53 - generates how quickly does that render
58:54 - in the browser
58:55 - those are the different site generators
58:57 - can have different profiles for that and
59:00 - the kind of architecture it supports how
59:02 - much control we've got over the output
59:04 - so some static site generators ship with
59:08 - JavaScript frameworks that are quite
59:10 - opinionated on how it'll then do some of
59:13 - the rendering for you if they are also
59:15 - have client-side rendering and different
59:17 - static site generators have different
59:18 - level of adoption and different
59:19 - popularity all of these are things you
59:22 - might consider when you're choosing a
59:24 - static site generator particularly for a
59:26 - large project but for the sake of our
59:29 - examples I'm going to use a static site
59:31 - to site generator called eleventy you
59:33 - can do this with any of the static
59:35 - static site generators you like but I
59:37 - choose eleventy for this kind of purpose
59:39 - purely because I find it's got a very
59:41 - logical architecture it doesn't take a
59:43 - lot of extra knowledge to understand um
59:47 - it does have very flexible templating it
59:49 - can use a lot of different template in
59:50 - languages and it happens to support the
59:52 - ones that I think are particularly
59:53 - logical and it doesn't generate in the
59:56 - site anything that you don't ask for so
59:59 - in other words it doesn't bundle in a
60:01 - JavaScript framework or any magic you
60:03 - you say here's my template please give
60:05 - them the output and it gives you just
60:07 - that and nothing more which is good
60:09 - makes it good for our purposes because
60:10 - it helps us to understand it a little
60:11 - bit better and also it's JavaScript all
60:14 - the way down so in other words and it's
60:16 - built in JavaScript we install it with
60:19 - JavaScript so we don't have to do lots
60:21 - of complicated things to get our
60:25 - environment set up so that's that's why
60:27 - I like that so let's sir let's jump in
60:30 - and take a look okay so the place we're
60:33 - going to start for that let's move over
60:36 - back to our terminal and what I've done
60:38 - is I've actually is created copied
60:40 - another folder we've got a new folder
60:41 - here that will work in let's just open
60:43 - that up in a code editor so you can see
60:45 - what that is in fact it's just a copy of
60:48 - what we had before because we're gonna
60:49 - be evolving our previous example but
60:53 - let's start doing some things now to
60:55 - make it repeatable so we're actually
60:56 - going to start well install eleventy so
60:58 - we've got a static site generator we're
61:00 - gonna start to build in some automation
61:02 - it's important that the the build steps
61:05 - are something that's repeatable
61:06 - I guess that's one of the things that
61:08 - really elevates Jam Sacketts the level
61:10 - of automation and predictability when we
61:13 - repeat tasks and that goes all the way
61:16 - through to the things like the
61:18 - dependencies so I'm gonna use NPM to
61:20 - manage these dependencies I think if I
61:23 - just create a new NPM package just with
61:27 - a default setup here and now we can
61:29 - start adding adding dependencies that
61:33 - we'll be able to install repeatedly now
61:36 - I'm just gonna nip over to an empty dev
61:38 - to remind myself of the of what it's
61:41 - called and I'm just gonna copy that and
61:44 - I'll install left
61:45 - NPM I from Stahl I will save it so it
61:49 - saved this configuration for future use
61:52 - and that'll go off and install eleventy
61:56 - for me now since this is saving it to my
62:01 - package Jason this means that in future
62:04 - and we'll see this update in a second
62:05 - when it's when it's completed this means
62:07 - that I'll be able to run a single
62:08 - command and install all the dependencies
62:10 - for the build in future right now is
62:12 - just this one static site generator but
62:14 - as things evolve we might start adding a
62:17 - few other libraries resources packages
62:19 - here that we'll be able to predictably
62:21 - install in an automated manner each time
62:25 - we want to either redeploy or change
62:28 - this change this project so it runs
62:30 - somewhere else okay so the installation
62:33 - has completed and you'll see now we've
62:35 - got a dependency added to our package
62:36 - our package JSON file in here so we'll
62:40 - be able to easily reinstall this
62:42 - communicate what the dependencies are in
62:44 - future so that's good but one of the
62:48 - things I want to start changing is
62:49 - perhaps how we've organized things here
62:51 - a little bit so now you can see by
62:52 - installing eleventy we've got this node
62:56 - modules directory here we've got the
62:58 - package dot Jason we just created this
63:01 - thing is packaged a lot Jason file here
63:04 - there are a few things that are starting
63:07 - to muddy muddy up our our sauce so I'm
63:09 - actually gonna organize things a little
63:10 - bit here and let's add a source folder
63:14 - which is where all of our
63:16 - our code that we're gonna write is gonna
63:17 - live and also you know when we run our
63:20 - generator we're gonna output to another
63:22 - another folder here as well we'll let
63:24 - that be created dynamically but what I'm
63:26 - gonna do for the moment is I'm going to
63:27 - move the index in here I said all of the
63:29 - things that we wrote earlier on those
63:31 - are gonna live in our source directory
63:32 - other things including like a config
63:35 - file for eleventeen in fact I'm going to
63:36 - create that right now door 11 t.j.s
63:41 - that's the config file that will tell
63:43 - eleventy how to build and we'll start
63:45 - populating this in a second and all of
63:47 - those things are going to live outside
63:48 - the source directory and then we've got
63:49 - our source directory organized so what
63:53 - kind of organization are we going to do
63:55 - here well we're gonna want to have
63:57 - multiple pages at the moment we just
63:59 - have one so a sensible thing to have if
64:02 - we're gonna have multiple pages is to
64:04 - have a template so let's and let's
64:08 - create that now I happen to know that
64:10 - eleventy uses this default of looking in
64:13 - and includes folder for for assets it
64:15 - might include and actually I'm gonna
64:18 - just use our index dot HTML file that we
64:22 - already have I'm going to move that
64:23 - across into English I don't change this
64:24 - into a template so let's turn that into
64:28 - a nunchuks template that's happens to be
64:30 - their language I'm I kind of like using
64:32 - make a little bit more room here and so
64:35 - this is our HTML file that we're working
64:37 - with in the previous example how can we
64:40 - make this the basis for a template well
64:42 - there's a few things that we might want
64:43 - to have to be different for every page
64:46 - so we might want to have a different
64:47 - title for each page so I'm going to
64:48 - start adding some nunchuks syntax here
64:52 - for that so we'll have a title variable
64:55 - that will pass in every time we want to
64:56 - use this and also the body that's let's
65:00 - make that different for every every page
65:02 - as well so I'm just going to copy that
65:03 - and I'll keep hold of that that's using
65:06 - a second but we'll pass in a Content
65:09 - variable here I'm gonna use a built in
65:11 - filter from nunchuks called safe so what
65:16 - happens here is whatever content
65:17 - whatever string we pass through here and
65:19 - in the first instance it'll be that the
65:23 - HTML that I just cut out of here
65:24 - whatever we pass through into this
65:26 - variable
65:27 - through to this filter and lunge X has
65:30 - one called safe which which means that
65:32 - it can it can handle the escaping of all
65:33 - of the the HTML characters for as it's
65:36 - safe to just pass that through without
65:38 - escaping okay so it's let's save that
65:41 - but we'll you need to to add some some
65:44 - pages now so in our source let's create
65:48 - an index page we'll call that index dot
65:51 - Chuck's and it's paste in our precious
65:54 - precious HTML that we just took that
65:56 - would be the content that we passed
65:58 - through to the template but the static
66:01 - site generator need to know a few things
66:03 - it needs to know some variable those
66:05 - variables that it's gonna pass through
66:06 - so put those in a section at the top
66:09 - here now these these characters this
66:12 - denotes a section at the top that we
66:14 - call frontmatter and this is in Yambol
66:17 - format which looks like this page you I
66:22 - think we'll call I think that's what we
66:24 - had before and we're also going to tell
66:28 - the eleventy what layout to use really
66:32 - only we only have one layout at the
66:35 - moment we call it index will change that
66:36 - lets call it base doors and JK and we'll
66:40 - change that over here as well
66:47 - so now we have this index file that has
66:50 - this content just play with our
66:53 - formatting a little and these variables
66:56 - at the top that will pass through to
66:58 - their to the site generator okay that's
67:01 - looking good let's say let's make
67:02 - another page as well now let's just copy
67:04 - this and we'll make it about about page
67:09 - about this oops this page for you still
67:14 - the same layouts and I'll tell you what
67:16 - I'm just going to I'll copy something
67:18 - over rather than having you watch me
67:20 - type too much HTML okay a little bit
67:25 - information so now we've got these two
67:27 - pages which are both kind of inheriting
67:30 - and populating this this template when
67:33 - we run our when we run our script now at
67:37 - the moment we don't have a lemon tea
67:39 - doesn't know where to find these things
67:41 - so what we can do is we can actually add
67:42 - some configuration here again I'm just
67:45 - gonna copy and paste this in and I'll
67:47 - walk you through what it is so this is
67:49 - the format for eleven teas configuration
67:51 - file and in essence really all we're
67:54 - doing here is we're setting these values
67:56 - we're setting we're telling lemon tea
67:59 - which directories you to use for the
68:01 - input and where to put the generated
68:04 - output so the input is our source source
68:06 - directory here we are and eleven tea
68:08 - will create this dist folder we can add
68:10 - all kinds of other bits and pieces in
68:11 - here and we will we'll start populating
68:13 - more things in here for but for the
68:15 - moment that's all we need so how are you
68:18 - actually going to go about running this
68:21 - eleven T command so that we can we can
68:23 - run our generator well let's have a look
68:25 - first of all at the documentation on the
68:27 - eleventy site now this was installed
68:29 - globally using this this does G argument
68:33 - so that meant that anywhere in the
68:35 - system after you installed it you BL to
68:37 - run the eleven T command run your build
68:38 - generate your site now we didn't install
68:41 - it that way we install it slightly
68:42 - differently we didn't include this
68:43 - global parameter so that means that it's
68:45 - installed within the context of this
68:47 - build in the context of this this site
68:49 - that we're creating now that's not quite
68:51 - as convenient because it means we can't
68:53 - just run the 11 T command anywhere we
68:55 - like in any directory but it is useful
68:58 - because it means that it's now packaged
69:00 - as a dependency here so that if any
69:02 - other developer comes along clones are
69:04 - site installs the dependencies they can
69:06 - run that command and it's kind of
69:08 - sandboxed it means that it's not a
69:09 - global dependency on their entire
69:11 - environment that's also useful if we're
69:14 - building the site from a different
69:16 - continuous integration server or build
69:18 - server or something like that which
69:19 - we're going to get to very very shortly
69:20 - so it means we can't just run the
69:22 - eleventy command like this but
69:25 - thankfully NPM has a nice solution for
69:30 - that so what NPM does is it allows us to
69:32 - run in this scripts property of the
69:36 - package.json it allows us to set up a
69:38 - bunch of different scripts that will run
69:40 - in the context of this environment so in
69:43 - other words if we were to run if we
69:44 - create something here called build which
69:46 - we can run with a build command and I'll
69:48 - replace this so I'm just kind of
69:50 - cannibalizing the the test script that
69:53 - was there is boilerplate to start with
69:55 - now if I if I put eleventy here like
69:58 - this this means that this is going to
70:00 - run the install package that it has in
70:02 - its node modules for us so that's fine
70:06 - that's if we run that there that should
70:09 - be okay we've got our configuration for
70:12 - eleventy we've got our our template and
70:15 - our our files that it should our pages
70:17 - that it should create so it should be
70:18 - that now did I say everything yep okay
70:20 - so it should be that if I do MPM run
70:23 - build which is the command we just
70:25 - created should now run eleventy here we
70:27 - go great so it's created a disk
70:30 - directory which is we're expecting with
70:32 - an about page and an index page and you
70:35 - can just about spot here in fact I'll
70:36 - show it up here it's organize things in
70:39 - our file structure so that this will
70:41 - kind of create tidy URLs for us you know
70:44 - the about page is actually an index file
70:46 - but it's put in an about folder so as we
70:48 - serve this from a simple stat a simple
70:51 - web server by default you'll get these
70:54 - nice kind of clean URLs which is it's
70:56 - just which is nice um speaking of
70:58 - serving it from a server that would be a
71:00 - useful thing to do as well and something
71:02 - a lot of static site generators will do
71:06 - is they'll bundle a very simple server
71:07 - in there for you as well
71:10 - and you can you can start using that
71:12 - right away so let's let's make use of
71:14 - that as well so I'll this is a common
71:16 - convention that's that's kind of
71:17 - cropping up will have a start command in
71:20 - our in our scripts property here in the
71:23 - package dock Jason and we'll call
71:25 - eleventy again here but we'll use its
71:27 - kind of inbuilt server so now when we
71:32 - run this so NPM start start is a special
71:37 - command in NPM so you need to type run
71:39 - it's this nice of concise so that's
71:42 - doing the same thing generated the site
71:45 - for us but it also then spun up a little
71:46 - server so now we can go directly to that
71:49 - so now we're serving this directly which
71:51 - is which is nice I think I should be
71:54 - able to just go to the about page great
71:56 - so we're building a sites we're serving
71:59 - it there's something wrong here though
72:01 - we're not seeing our message of written
72:04 - if i refresh that we should be getting
72:05 - our our client-side JavaScript
72:07 - re-rendering and changing things here
72:09 - why it might that be well let's go back
72:11 - and look at our code and we'll look at
72:13 - our tour just collapse that to keep
72:15 - things simple for a second and what we
72:17 - have here in our code is we have well
72:19 - there's our JavaScript that should be be
72:21 - running and we've got our our pages are
72:23 - files that eleventy is going to turn
72:25 - into pages for us but he actually
72:28 - doesn't know about how to use javascript
72:30 - by default it doesn't it doesn't expect
72:32 - to make a page a URL for that it's only
72:34 - looking for the kind of templates that
72:36 - it supports so it doesn't know what to
72:38 - do with this and we need to make sure
72:39 - that that gets a cross into our disk
72:41 - folder in fact you know you can see that
72:43 - I has not been moved across there at all
72:45 - so that's actually a very common common
72:48 - thing and it's a situation we can cater
72:50 - for so in our eleventy config we can
72:53 - tell eleventy that there are certain
72:55 - types of files that we're just going to
72:56 - want to pass straight through we don't
72:57 - need to make a page for it we don't need
72:59 - to generate things for it these are
73:01 - assets that we just want to pass
73:02 - straight through and so eleventy has a
73:06 - little argument pool a little command
73:09 - called pass-through copy
73:13 - and then we can tell that either files
73:18 - or a folder to pass through so actually
73:20 - what I'm going to do is others to get a
73:21 - bit of organized here and we'll say
73:23 - everything that's in there everything is
73:28 - in this JavaScript folder will move
73:29 - across so let's organize ourselves a
73:32 - tiny bit more and you folder J yes and
73:37 - then we'll pop our JavaScript in there
73:40 - so any other JavaScript files that we
73:41 - put in here are just gonna get moved
73:42 - across to the disk file
73:44 - so it's let's save that let's run it
73:45 - actually we're gonna do need to do
73:47 - something else aren't we because now
73:49 - this is going to be moved across to a
73:51 - j/s folder and I think we're just
73:53 - calling it yeah we need to make sure
73:54 - we've got the paths correct so let's do
73:57 - that now it's regenerated that for us
74:01 - let's have a quick look oh yeah that
74:04 - looks a bit oh I see yeah yeah our
74:10 - random there we go
74:14 - yes so we are seeing very many our
74:19 - messages popping up let's just see yeah
74:22 - our page has been updated the asset is
74:26 - the JavaScript asset is there and
74:28 - available for us something else where
74:29 - you might notice if we if we look at our
74:31 - source here is that wait what's this we
74:33 - didn't write this whereas this whereas
74:35 - this script come from and I said earlier
74:37 - on when we were selecting which static
74:39 - site generator to use I liked eleventy
74:43 - because it didn't give us anything we
74:44 - didn't ask for but hang on we didn't ask
74:46 - for that so what's going on here well in
74:49 - actual fact when we run the the serve
74:53 - command so when we run when we run this
74:56 - guy that's that's creating a little web
75:00 - server for us but it's also making sure
75:02 - that it's it watches for changes and
75:04 - automatically reloads when we make
75:06 - changes and that's only happening at
75:09 - when we run things through serve if we
75:11 - run build this isn't here this is just a
75:13 - little utility to help us with our
75:15 - development so let's make a change in
75:17 - let's let's see that see that happen
75:21 - you know right away because one of the
75:24 - things we might want to do is you know
75:25 - our base template here let's just make a
75:28 - tiny bit more room maybe we can add
75:31 - something in here so we've got a bit of
75:32 - navigation to go back and forth well
75:35 - I'll just copy and paste that in so
75:39 - there we go we've just got a little
75:40 - header with I hope a link to a home page
75:44 - and about page I think if we save that
75:46 - should generate regenerate and reload
75:49 - and there we are so so that's popped in
75:51 - and straight away so that's that's why
75:53 - that little utility exists now this is
75:56 - this is kind of nice a nicer attribute
75:58 - of jobs text sites as well you know we
76:00 - very quickly here bootstraps and into a
76:04 - development environment that lets us
76:06 - write the code see the code as it will
76:09 - be generated and preview it live in with
76:12 - with a simple web server we haven't had
76:14 - to configure a web server of our own
76:16 - it's all being packaged in with the
76:17 - generator and that's that's kind of a
76:19 - nice handy thing to help us kind of
76:21 - bootstrap a development environment very
76:23 - very quickly but how do we actually go
76:29 - about deploying this I mean so far in
76:31 - previous examples we've just been you
76:33 - know hands hand crafting some files and
76:36 - then just popping those into a hosting
76:38 - environment but now we've got scripts
76:39 - that run we've got a build that happens
76:41 - what we could do is we could run our our
76:44 - build script to generate our dist folder
76:47 - as we've done here and then take take
76:49 - these files which previously we've made
76:52 - manually but now we've just automated
76:53 - the creation of them we could take those
76:55 - and then put those in serving a hosting
76:58 - environment and that would work just
76:59 - fine but ideally what we can really do
77:02 - is we can start to lean on these
77:04 - processes of automation and of version
77:06 - control so you can actually predictably
77:09 - kind of create these things closer to
77:12 - the environment and make sure that we do
77:13 - things in a repeatable way one of the
77:15 - great things about well modern web
77:18 - development in general work particularly
77:19 - the jam stack is that we can start to
77:22 - use things like version control as a
77:24 - deployment process and start to use some
77:26 - of the facilities that we have managing
77:29 - our code changes and make those reach
77:30 - right the way through to our deployment
77:32 - process and we're going to do that now
77:33 - by starting to use
77:35 - I mentioned at the beginning that gate
77:36 - was going to be something we'd need for
77:38 - this for this example and we're gonna
77:40 - turn turn this into a git repository
77:42 - that will start start managing now
77:44 - before I do that I'm gonna just there's
77:46 - just maybe things a bit tidy here so we
77:48 - can see what's going on I'm gonna add a
77:50 - git ignore file because at the moment
77:55 - you know we're installing gazillions of
77:58 - node modules there's a lot of things
78:00 - that we were installing here we don't
78:02 - need to manage all of those in our
78:03 - version control that's something that
78:05 - can be added by the dependency kind of
78:07 - installation so let's just exclude that
78:09 - before we do anything else whoops - Dom
78:14 - node modules will also exclude the build
78:17 - assets that come from the dist directory
78:19 - so neither of these things need to be
78:21 - managed by version control but it's our
78:23 - source it's our configuration
78:24 - description of our dependencies that's
78:26 - what we want to manage so with that in
78:28 - place let's let's just create and you
78:31 - get repository here lovely and we can
78:35 - add all of the whoops can add all of the
78:39 - the assets that we've just created our
78:42 - files that we just created to be tracked
78:45 - oops
78:52 - okay so now these are these are being
78:54 - tracked and we can actually set up a
78:57 - host to watch this git repository but
78:59 - the moment this just Liz luck lives
79:00 - locally this let's make this a
79:02 - repository that's available somewhere
79:04 - public let's do that on github I tend to
79:07 - use this little utility hub too to help
79:09 - me create repositories elsewhere let's
79:13 - call this code camp
79:17 - this is a bit of a convoluted name but
79:20 - hopefully this will be easier to keep
79:22 - track of as we're we're working through
79:24 - examples later on so just create that
79:26 - repository in my github github account
79:31 - great that's being created now yeah so
79:39 - it's just tidy things up a little bit
79:42 - okay I don't have a readme in here which
79:44 - is bad form as you haven't pushed this
79:46 - yet the let's make okay let's push this
79:48 - I always forget to push it after using
79:50 - the command I start doing things right
79:55 - right from looks right from right from
79:57 - here so push that probably asked me to
80:01 - publish the master branch I will indeed
80:03 - so now
80:09 - we should have this created there we go
80:12 - so now we have a git repository for it
80:14 - and what we can do is we can have our
80:17 - deployment process watch for changes
80:19 - here and run our build right in the
80:22 - hosting environment so let's go back to
80:24 - our site that we created before look at
80:27 - our build settings and then we haven't
80:29 - got this link to a git repository and we
80:31 - were just dragging and dropping files in
80:32 - here but there's a link it now to our
80:35 - git repo it's just gonna ask for
80:38 - permission I can do a little search
80:45 - great found our repository so we'll link
80:48 - it to that it's going to look at all the
80:50 - branches we only have a master branch at
80:52 - the moment and it's made its best guess
80:55 - of what commands we might want to run
80:58 - this is notice that it's an 11 T site
81:00 - because it's found that dependency so
81:02 - it's used at conventions we know about
81:04 - for that but that's actually not the
81:05 - build command we're running we we were
81:06 - running if you recall we were running
81:08 - NPM run build to generate the site and
81:12 - that the folder that we then publish it
81:14 - created that we want to publish is the
81:16 - dist folder so at those settings and
81:20 - then we'll hit deploy and our build
81:23 - should have started there we go we can
81:25 - take a look at our build
81:26 - now this what's happening in this build
81:28 - in our continuous integration
81:30 - environment that we've now created here
81:32 - is that the same things that were
81:36 - happening locally the running of NPM
81:39 - install to grab the dependencies and the
81:40 - packages and install those then to run
81:42 - that NPM command in fact we can see NPM
81:46 - run build has been run which in turn is
81:49 - run at the eleventy command well this
81:52 - looks kind of familiar it's created
81:54 - those folders created those files and
81:57 - then finished deploying those and I
81:59 - think we should be able to then go and
82:01 - take a look here yeah yeah so now we
82:03 - have a live URL which has got both of
82:06 - the pages that we've created and each
82:09 - time we go to this our home page our
82:12 - javascript is running so now we've got
82:14 - it's very similar to where we were
82:17 - before but we're generating this site
82:19 - both in our development of the
82:20 - environment but
82:21 - also up here in our hosting environment
82:23 - so we've got deployments happening right
82:27 - here in our to put in our hosting
82:29 - environments as well this is starting to
82:31 - feel like there an end to end I could I
82:34 - sometimes call it and call it a steel
82:35 - thread of having a development
82:37 - environment that reaches right the way
82:39 - through to a production environment
82:40 - where we can be running the same things
82:42 - here locally as we're developing things
82:45 - and and you know building out our code
82:47 - seeing how things work with a web host a
82:51 - web server that's kind of running simply
82:53 - here and then running exactly the same
82:55 - things in a hosting environment or a
82:58 - continuous integration environment which
83:00 - will run that exact same build and then
83:03 - take the output and publish it to a CDN
83:06 - so let's just send check where we've got
83:09 - to so what's that jumps out well of
83:11 - course it certainly feels like it was
83:14 - we're using javascript actually now as
83:17 - our build our build environment we're
83:21 - not really using any API yet that's
83:23 - coming we're generating markup where
83:26 - we're serving things directly from the
83:28 - CDN still so we don't have to manage any
83:31 - web servers but really this is the
83:32 - interesting thing right so now we're
83:35 - running something at Build time and
83:37 - that's running it's the same exact thing
83:39 - that's running in our local development
83:41 - environment as is running in a
83:43 - continuous integration environment and
83:45 - then propagating the output to a CDN
83:47 - this is starting to feel like an
83:50 - end-to-end development environment and
83:52 - absolutely this is kind of core to what
83:55 - the Jam stack kind of feels like and how
83:57 - and how it feels to build sites with the
83:59 - jam stack we're gonna move on to another
84:01 - example now and start to flesh out more
84:04 - capabilities now that we've got this
84:06 - automation in place
84:10 - all right well on to our next example so
84:12 - example number four now we're gonna
84:15 - start doing some things that that
84:17 - finally bring in this API element so now
84:19 - we're gonna be building with data that
84:22 - we get from an API
84:23 - once again the code for this is in a
84:26 - github repository you can find that at
84:27 - jams tac-x for this being an example
84:30 - number four and and actually what I've
84:32 - done this is a new repo so I've created
84:37 - a new repository and a new site which
84:40 - which is is linking to that repository
84:42 - this is exactly the same as in example
84:45 - number three it's just that I've created
84:47 - a new repository just so we have clean
84:48 - starting points for each one if we go
84:50 - and if we go and look at a look at the
84:53 - page for that in fact you'll you
84:54 - recognize this it's just exactly what we
84:56 - had before with different oh yeah
85:00 - random isn't always as random as you'd
85:02 - like there we are with the different
85:04 - bits of JavaScript rendering it at the
85:07 - start it's exactly the same code exactly
85:11 - the same deployment that's happened so
85:13 - we just got a nice clean starting point
85:15 - for that now what we're gonna do is just
85:18 - refer to our example that we've been
85:20 - this diagram that we've been looking at
85:22 - throughout I'm just gonna tidy things up
85:24 - this is the same thing just moved over
85:26 - so we've got a bit more room to operate
85:27 - here so now as we run our build run our
85:30 - generator either locally in our
85:33 - development environment which is where
85:34 - we're gonna be working next or indeed
85:36 - once this is happening in our deployment
85:39 - in our continuous integration
85:40 - environment what we're gonna do is we're
85:42 - gonna pull in in data now the kind of
85:45 - data sources that you might expect to
85:46 - find there are things like headless
85:49 - content management systems for managing
85:51 - the content of the of your site
85:53 - there are pricing engines ecommerce
85:57 - engines stock levels all kinds of
85:59 - different content feeds around the
86:01 - around the web you might be pulling
86:03 - tweets or Instagram feeds or all manner
86:06 - of things news feeds will have you and
86:08 - the there are a number of ways you can
86:10 - get that visible to our users in in the
86:12 - browser we can either you know make a
86:14 - request for that API and pull that
86:16 - content in with JavaScript and then
86:18 - render it in the in the front-end or we
86:21 - could do what we're gonna do now and we
86:22 - can actually pull
86:23 - content in from the API at Build time
86:26 - included in the site as we generate our
86:28 - HTML pop that into the the hosting
86:31 - environment and then it's ready to go
86:33 - when the user comes on to request it so
86:35 - that's what we're about to do steps to
86:38 - do that first of all we're going to just
86:40 - iterate on our site generator that we've
86:43 - we've been using so we can start to use
86:45 - data in the pages and in the templates
86:48 - of the static site generator once we've
86:50 - done that and we see how that works then
86:52 - we'll actually start pulling data in
86:53 - from from an API and I'll show you the
86:55 - API we're going to use in just a moment
86:57 - and then once we've done that we also
86:59 - want to make sure that we're not just
87:00 - doing that in our development
87:02 - environment which of course is where
87:03 - we'll start but we're also doing that on
87:06 - the live site as its deployed so that's
87:08 - that's what we're about to get up to so
87:11 - if we pop back over to our our terminal
87:13 - as I mentioned I've just created a new
87:16 - and you copy of where we were before in
87:18 - a new folder name let's open that up in
87:20 - our now text editor see take a little
87:24 - look at that okay so this this should be
87:27 - kind of familiar we've got our source
87:28 - files our build assets the node modules
87:32 - that are installed it's just the same as
87:34 - where we were before and now we're going
87:35 - to start start adding some some content
87:38 - in here the kind of thing let's have a
87:42 - little look first of all so the existing
87:45 - site this is what that looks at right
87:47 - now and I think what we'll start doing
87:50 - is well add some news items here so
87:52 - below below this kind of a little
87:55 - message for me for my my daily message
87:57 - now there's going to be news items from
88:00 - the day beneath there as well
88:02 - so what might the the code look like for
88:04 - that well we can we could do that in any
88:06 - number of ways with us maybe consider
88:08 - that we might have a list item with news
88:11 - things and a bunch of those that's the
88:13 - kind of thing that we might want to to
88:15 - populate with real content now the way
88:20 - that we can do that with static site
88:21 - generators this is a very common model
88:24 - in static site generators that they will
88:26 - have a way of having some kind of folder
88:29 - which will contain data and eleventy is
88:34 - no different to that follows the same
88:35 - kind of conveyor
88:36 - I'm just going to create a adjacent file
88:39 - here called news and for that in a data
88:41 - folder and then that that will become
88:44 - then an object which is available to any
88:46 - one of the templates as we run our build
88:47 - that we'll be able to get the data that
88:49 - we put in here and then make use of it
88:52 - we can manipulate it iterate over it so
88:56 - I've just created this this little blob
88:57 - of JSON here which is an object with
89:00 - articles in it which is an array of
89:02 - these different art that these different
89:04 - article objects at the moment I've just
89:06 - got a title just so that we can see this
89:08 - working and start to bring this to life
89:10 - um let's let's change our our markup
89:14 - here to actually start using that of
89:16 - course we only need one of these it's
89:18 - gonna we're gonna iterate over this this
89:21 - will access this news object and then
89:22 - iterate over the things that we find in
89:25 - there so let's do that with some some
89:27 - nunchucks so for article in news is our
89:32 - data object and it was the particles
89:34 - object within that loop in fact we don't
89:43 - want there those tags inside there it's
89:46 - just a list item so we're going to be
89:48 - creating and then let's let's output
89:53 - some property of article I think we've
89:56 - got the title for each of those so let's
89:59 - just double check yeah articles title
90:03 - art news articles article title ok and
90:09 - we've used the default location in
90:11 - eleven Titor to find the data but I
90:14 - forget if it picks that up automatically
90:15 - so what I'm gonna do is I'm just going
90:16 - to be very explicit and say to eleventy
90:20 - that this is the location to find that
90:23 - data so now it'll certainly know to
90:26 - where to look and I think if we run our
90:30 - npm start
90:32 - I think we should get let's make sure
90:34 - we've got nothing room to see okay it
90:36 - looks looks hopeful if we look in our
90:38 - disks we should probably ought to see
90:39 - see what's been okay that's that looks
90:41 - hopeful so let's look at it in our in
90:43 - our browser
90:44 - okay formatting may be a little bit
90:46 - funky but but we're starting to iterate
90:48 - over data that we've got in a data file
90:51 - so that's all that's all fine and dandy
90:54 - but we really want to make sure that
90:56 - we're getting data from a a real a real
90:58 - data source at the moment this is just
91:01 - whatever whatever data structures we
91:04 - want to have here so we're actually
91:06 - going to start to use a remote data
91:08 - source something that exists out on the
91:10 - web now it's just - yep okay so the it's
91:17 - also going to use is this it's new API
91:20 - as I mentioned we could be using any
91:22 - number of things but news API is going
91:23 - to serve us quite well for our confirm
91:25 - our examples this gives a free a free
91:29 - service so you can get news news data
91:31 - yes it's a paid service if you want to
91:33 - be doing this
91:34 - more seriously but for our purposes we
91:36 - can make 500 requests a day we can get
91:38 - get various bits of news data that's
91:41 - gonna work well for us yeah in order to
91:43 - be able to use this you are going to
91:44 - need an API key and it's very very
91:48 - simple to do if you go to news API dot
91:50 - org hit get API key it'll give you a
91:53 - chance to create a little account I set
91:55 - mine up already but it'll give you
91:57 - something like this where you know it
91:58 - has your details and you can then easily
92:01 - get this API key that we'll be able to
92:03 - use in our requests to their API I'm not
92:06 - too shy about sharing this with you I
92:08 - can always regenerate that later on but
92:09 - this typically is a secret you know when
92:12 - it's the kind of thing that's going to
92:13 - give access to a privileged or a page
92:16 - service this is something you're going
92:17 - to get want to keep secret we'll talk in
92:19 - a little bit about how we keep that
92:21 - secret but for the time being we want to
92:23 - start pulling some of this data in News
92:26 - API so great it's got lots of
92:27 - documentation on you know the different
92:29 - endpoints what kind of data you can get
92:31 - I'm probably going to use headlines I
92:34 - think is a potentially be a bit bleak
92:37 - depending on what the news is at the
92:38 - time but but there's a nice API
92:42 - that we can we can call in to bring in
92:45 - some structured data that that perhaps
92:49 - fits with the kind of model that we're
92:50 - starting to build out in our HTML now
92:53 - what I like to do is to start exploring
92:56 - the AP is not in not in my JavaScript
92:59 - but just just writing the terminal I
93:01 - mean the thing that we've got here is a
93:03 - nice URL that we can we can query we can
93:06 - make it get requests on that and start
93:07 - to see the data that comes back it's
93:09 - documented here you know we can start to
93:10 - see the shape of the data that way you
93:12 - should expect to get back and in fact if
93:14 - we just a little look a bit further into
93:15 - the news API site we can see the kind of
93:18 - parameters we can pass in our in our URL
93:20 - to to get different data whether it's
93:23 - filtering it by country or particular
93:24 - category other bits and pieces and page
93:27 - size how many results we won't want we
93:29 - might want to get back this is great so
93:31 - we can we can start exploring the API
93:33 - and see what we want want to use so in
93:35 - fact you know I'm gonna just copy that
93:36 - I noticed that since I'm logged in
93:38 - they've automatically populated my API
93:40 - key which is handy I don't have to do
93:42 - any management of that but I can I I can
93:45 - start where are we there we are I can ex
93:47 - parte start exploring that and so what
93:50 - let's let's do that right here you know
93:53 - I can I can just do my terminal I can do
93:55 - a curl oops
93:58 - tell you what let me make sure I'm gonna
94:01 - speak there go to many spaces if I just
94:04 - curl that I'm starting to get data
94:06 - straight away in fact what I'll do is
94:07 - I'll I'll pipe that to a little utility
94:09 - i've got called JQ which will format
94:12 - format that by because since it's json
94:16 - data so you'll see us a little bit more
94:18 - easily so that's nice we're starting to
94:20 - see we've got this this array of
94:21 - articles that have sauce author title
94:25 - some content a date on there this looks
94:30 - like something that we can use in our
94:31 - results to replace this jason dive I've
94:34 - currently got manually added there so
94:37 - let's let's start doing that let's start
94:39 - using using this API as a source for to
94:43 - replace this data and I'm not gonna use
94:45 - curl directly directly in here I want to
94:47 - you some JavaScript for this so I'm
94:50 - gonna use a library called Axios which
94:53 - is which actually run client-side so in
94:56 - the brow
94:56 - all server-side in our development
94:58 - environment or on whichever hosting
95:00 - environment to make requests and get
95:03 - data for us it's nicely documented
95:06 - there's some examples of how to use that
95:07 - but before I do anything I'm going to
95:10 - need to include this now if you recall
95:13 - in our package Jason we have our
95:16 - dependencies and the moment we just
95:18 - depending on having eleventy installed
95:21 - we're going to add something else to
95:23 - that now so I'm do an NPM install and
95:25 - save
95:25 - Axios and that will go off and install
95:29 - the dependencies for that and it'll add
95:31 - that into our little area had its into
95:33 - our little dependencies file excellent
95:35 - we didn't I'm going to need that now for
95:36 - the time being and now I'm gonna
95:39 - actually start using that here I'm gonna
95:41 - replace this isn't Jason anymore this is
95:43 - actually JavaScript we can lose all of
95:46 - that cuz we're gonna be returning that
95:48 - data rather than just specifying it
95:50 - let's have another little look to see
95:52 - how how we use Axios there's some
95:57 - examples of how to install it like we
95:59 - just did some examples of we need to
96:01 - require that so we'll do that in just a
96:02 - second and we want to use this
96:05 - asynchronous function because we're
96:06 - making a request to another service and
96:09 - we want to wait for that response to
96:11 - come back before we yield it back to our
96:13 - static site generator I'm just gonna
96:16 - steal that function wholesale and let's
96:19 - start let's start adding this in whoops
96:22 - now we do need to require the Axios
96:26 - library that we've installed require
96:31 - method
96:36 - great now we've got that available to
96:38 - use down here um this URL isn't quite
96:42 - right let's well that's just first of
96:45 - all let's I think we're done with that
96:47 - for now
96:47 - nice to use the same URL that we were
96:51 - that we were experimenting with in our
96:53 - in our curl statement doesn't need to be
96:57 - a string okay so there's that now I
97:02 - happen to know that this is going to
97:04 - return a response object and we want the
97:08 - data from that response object so we're
97:10 - gonna do return response and this is in
97:17 - a try-catch so if there's an error
97:18 - making this this this request it will
97:21 - return this this error okay I think
97:26 - that's going to give some data that's
97:27 - sir let's see what happens when we when
97:31 - we run that so running are running our
97:35 - npm start again oh now what's our
97:38 - problem that we've got here require oh
97:42 - there we are have a little typo you're
97:45 - probably screaming at the screen as I as
97:47 - I typed that okay that looks a bit
97:50 - better so now we can see is it's telling
97:53 - us our build as telling us how long it
97:56 - took to return that data let's have a
97:57 - look at the the page and see what for
97:59 - actually and we're not seeing any data
98:04 - so let's see what we might be doing
98:07 - wrong here oh okay well we're not quite
98:10 - done because we're we've created this
98:12 - function we're not actually yielding
98:13 - anything from this so we need to make
98:16 - sure that this yields some some data
98:19 - back to back to 11 T so we're gonna make
98:24 - this isn't little asynchronous function
98:27 - better to use an anonymous function just
98:30 - fine
98:31 - let's see yeah that looks that looks
98:37 - good to me ask you have another try that
98:40 - it's seen my change it's picked up the
98:43 - change in its rerun it let's see oh
98:44 - there we go
98:45 - so now we're wielding a bunch of data
98:48 - it's we're kind of fortunate that the
98:50 - shape of the data that we were
98:52 - expressing in our template to start off
98:55 - with you know I glanced the head so I
98:57 - happen to know that we were going to be
98:59 - having a title object come back so we're
99:01 - iterating over all of the data that
99:03 - comes back and we're at the moment were
99:04 - just blatting the title onto the screen
99:07 - there's a bunch of data um let's start
99:09 - they start tinkering with this now first
99:12 - of all let's let's change the page size
99:16 - I don't think we're gonna want all all
99:18 - that much so I noticed there was a page
99:20 - size for parameter let's just say five
99:23 - of those
99:24 - okay so we're only getting five of those
99:26 - those things back and perhaps we could
99:28 - improve our template a little moment we
99:31 - just we're just outputting the title
99:36 - let's make this a little bit nicer
99:39 - let's perhaps format that with an h2 and
99:44 - that's let's make this a link to the
99:48 - actual actual document natural article
99:53 - rather just I'm gonna refresh myself and
99:58 - refresh my memory what was the format
100:01 - here okay so we've got title yes URL
100:04 - okay great
100:09 - - cool URL what else might we want to
100:15 - attack other items might we want on here
100:21 - I'll tell you what let's have to put the
100:28 - name of their yeah the source perhaps
100:32 - and a date I think it's good to have a
100:34 - date on here so we've got the source
100:39 - name so we'll call that so we'll get
100:42 - that to get to that with a particle
100:44 - source dot name and that's also put I
100:55 - think maybe a time
101:01 - don't publish that time looking right I
101:11 - think so we stopped our build running so
101:15 - let's let's get that running again okay
101:19 - so that's run successfully all right
101:22 - okay so now we are getting the the text
101:26 - of the news article from our news feed
101:28 - we're getting the the URL for that let's
101:31 - see if we take that through this should
101:32 - take us through to Android police which
101:34 - is the source of this news article try
101:37 - not to get too engrossed in actually
101:38 - reading the article let's go back the
101:42 - date we're not formatting that date at
101:43 - the moment but we can certainly start
101:44 - doing that all right this is starting to
101:47 - look like we've got some some data in a
101:50 - useful way this paged my kind of daily
101:52 - page for me it's starting to come
101:55 - together a little bit we're baking this
101:56 - HTML out at a build time I'm sure we can
102:01 - make some improvements here though to
102:02 - this to this news feed there's a few
102:04 - things hard-coded that we perhaps don't
102:06 - want we've got our API key in here now
102:11 - this is safe because it's server-side
102:14 - you know we're not exposing this in the
102:16 - client in the front end this is all
102:18 - happening at Build time but we're
102:20 - committing this code to our version
102:22 - control now so we don't really want this
102:25 - API key to be checked into our version
102:29 - control because that's gonna leak that
102:31 - out into the world so I'm going to
102:32 - abstract that out I think I can I can
102:36 - select it
102:39 - and there we go yes I see you ink that
102:42 - out and instead if I turn this into a
102:47 - template string today we can do some
102:53 - string manipulation in here and make
102:55 - this a little bit a little bit
102:57 - friendlier
102:58 - so let's instead populate that with an
103:03 - API key variable that we can we can
103:09 - place in here now where are we going to
103:11 - get that we could you know we could be
103:12 - populating that manually but but
103:16 - certainly we want to be able to use this
103:18 - in our local development environment but
103:21 - also we want to be able to have this run
103:23 - in our build environment remember we're
103:24 - checking this in and letting the build
103:26 - do this for is in the hosting hosting
103:28 - environment so we can use an environment
103:30 - variable for this so the way we can
103:32 - access that is through process top-end
103:35 - so this will have access to any
103:37 - environment variables in this case the
103:39 - one called API key at the time that the
103:41 - process runs now we don't we haven't
103:44 - declared that anywhere locally so this
103:47 - isn't this isn't going to work for us
103:49 - what we need to do is to use some kind
103:54 - of tool to to populate this for us
103:57 - locally as if it was an environment
103:59 - variable and we can do that using a nice
104:03 - little tool called dot n which is has
104:07 - the purpose of doing exactly what I just
104:09 - described so we're going to install this
104:12 - as a dependency as well and and start to
104:14 - use the structure that it tells us about
104:16 - here so first things first let's get
104:18 - this installed as a dependency I'll just
104:21 - quit out of that again NPM
104:29 - and that'll go off and install that save
104:35 - that into our dependencies as before
104:36 - that's how quick refresh of how we used
104:39 - that so if we just require this at the
104:42 - top of our top of our JavaScript file
104:45 - and as long as we've got a dot n file in
104:51 - our code it'll pick things up from there
104:52 - instead so tell you what before I lose
104:58 - the environment variable that I that I
105:01 - paste it into my clipboard and there it
105:03 - is preciously held there let's assign
105:08 - that to a variable rate and save that in
105:12 - our dot n file now this is our secret we
105:15 - don't a string this is our secret we
105:18 - don't want to commit this to our version
105:19 - control so I'm just going to put this
105:21 - also into our I get ignore file so this
105:26 - will not get committed it's quite nice
105:29 - also just to have so that other people
105:32 - when they're coming to use this code
105:33 - they know this is what what they need to
105:36 - populate with their own API key so I
105:38 - actually just duplicate that and call
105:41 - that
105:47 - got in and then we can there we go
105:54 - so that can get checked in so people
105:56 - will know to create this end file we'll
105:58 - document that of course so that people
106:00 - will know to populate this with their
106:01 - own key and then when we run this where
106:05 - are we when we run our news use file
106:10 - user news script will be able to get
106:12 - access to that data now how does it tell
106:13 - us to do that here we go with this
106:16 - so we require that and run the con
106:18 - config method and that should populate
106:23 - this in a way that we can it keeps our
106:26 - API key secret so let's just give that a
106:27 - try shall we and see see how it doing
106:30 - okay looks good okay great we're in good
106:34 - shape again so that's fine for running
106:38 - our build in our environment locally but
106:41 - we need to make sure that this
106:43 - environment variable is available when
106:46 - we run this in our build so tell you
106:48 - what I'll do
106:49 - I'm actually going to let's commit all
106:51 - of our changes adding
107:00 - we'll push our changes now as you recall
107:04 - from our previous example our deployment
107:07 - process is now linked to get so when we
107:10 - push our code we should see our
107:13 - deployments start to kick off on another
107:15 - deployment to happen - let's just see if
107:17 - that's the case freshness ok so we have
107:23 - another another build running here now
107:27 - this is going to fail because we haven't
107:29 - currently shared that environment
107:31 - variable that only lives on our local
107:33 - machine but let's just let the build go
107:35 - through it'll install any new
107:38 - dependencies because we've caused added
107:40 - a few dependencies in there but things
107:44 - are certainly going to fail for us yeah
107:46 - oh yeah we're having a having our build
107:48 - fail but what we really need to do is we
107:51 - need to make sure that our let's correct
107:54 - our code this environment variable which
107:57 - we just called API key maybe we can make
107:59 - that a bit more descriptive I'll do that
108:01 - in a second let's do it now let's do it
108:04 - now the school News API key just in case
108:08 - we end up with other api's that we want
108:11 - to use so change that there just change
108:13 - it in my sample so the reference is
108:15 - correct as well and of course we want to
108:17 - change it in our code so this is there
108:24 - there we go
108:29 - okay this is an error from when we were
108:31 - changing it is they're still watching
108:33 - but let's just make sure we are we happy
108:36 - in our local build if i refresh that no
108:40 - we're not to restart this I haven't
108:45 - saved my file just restart this again
108:49 - just to make sure everything's
108:50 - everything's happy okay okay we're back
108:53 - in good order and push this code change
108:55 - again just because we changed our
108:56 - environment variable now this is this is
108:59 - still going to fail descriptive and far
109:06 - we'll push this again so another
109:08 - deployment is happening but what we'll
109:11 - go and do is we're going to add this
109:13 - this API key also to our our environment
109:17 - up here okay so this there's a build up
109:20 - ready to go that will start in a second
109:22 - if we go to deploy settings I think we
109:25 - should be able to find environment okay
109:28 - great we can start to add environment
109:30 - variables so what do we call that we
109:31 - call that News API key and let's grab
109:33 - the value for that as well okay so now
109:39 - we have a situation where our secret is
109:41 - stashed away in our hosting environment
109:44 - and our continuous integration divert
109:46 - environment for the build runs but we
109:48 - also have it locally in our in our
109:51 - development environment but it's not
109:54 - checked into our version control so it
109:55 - still is still a secret for us okay
109:59 - let's let's see if we can see that
110:02 - running okay so that's it looks like
110:04 - that oh no okay so the so we weren't
110:10 - able to get the data but the build ill
110:11 - did still complete matching in to kick
110:16 - off another build let's trigger another
110:17 - deployment manually so now our
110:21 - environment variable should be there the
110:24 - code should be there ready to scoop up
110:25 - the environment in environment variable
110:27 - and use it and then we should be
110:28 - publishing publishing that to the to the
110:32 - build
110:42 - all right that's you've still completed
110:44 - let's have a let's have a little look
110:46 - okay great so now his are published
110:49 - version of the site getting the same
110:52 - data if I reload this a few times our
110:54 - message should should change every our
110:56 - house changing so our client-side
110:58 - JavaScript running our data source that
111:01 - was gathered at Build time has been
111:03 - there and populated our links off to the
111:05 - various places work that we come so we
111:10 - have a we have our next set of the build
111:12 - running ok this list at this point to
111:14 - take a little review take stock of what
111:16 - we've got to here because yeah we we we
111:19 - started to use data in our static site
111:20 - generator we were requesting that from
111:22 - an API and we're using that in both our
111:24 - development and in our deployments so
111:27 - this situation here this is where we are
111:29 - now now if you remember our API this
111:33 - service here our news API I think just
111:35 - our development version access our free
111:38 - access team had a limit of something
111:40 - like 500 requests a day were we to be
111:43 - recording this init with javascript in
111:46 - the browser the number of requests we'll
111:49 - be making would be coupled to the number
111:51 - of visitors we have how much traffic
111:53 - we're getting to our site you know if we
111:54 - have a million users we're gonna have a
111:56 - million requests on our data source
111:57 - that's that's a problem the way we're
112:00 - doing it at the moment is we're we're
112:01 - only calling that data at Build time so
112:04 - we've got a very light load on our data
112:06 - source now this is a nice attribute of
112:09 - pre generating as much as you possibly
112:11 - can and that's something I really
112:12 - advocate for when using a gem stack pre
112:15 - generate as much as you can so that you
112:17 - can render it ahead of time and get it
112:19 - ready to request not just so that it's
112:21 - you know we don't have to do any work
112:22 - for the user here because it's done in
112:24 - advance but also cuz it means it
112:25 - lightens this load on the data source um
112:28 - you could say well that means that this
112:30 - this this page is very static because
112:33 - we're not deploying changes very often
112:35 - or we're not getting changes very often
112:37 - from our data source but with 500
112:39 - requests a day to this frankly we could
112:42 - be making this request and redeploying
112:44 - every five minutes and updating that so
112:47 - that's ready to go that would feel far
112:49 - from from static that would feel pretty
112:51 - dynamic if this news this news that we
112:53 - found here was
112:54 - only five minutes old likewise this
112:57 - probably doesn't change every five
112:58 - minutes we could be doing things like
113:00 - triggering this build to happen when the
113:04 - data is changed so that we only build
113:05 - when there's an update to show and that
113:07 - means that every time a user comes to
113:09 - this page they'll be getting the the
113:11 - data that was that was updated most
113:13 - frequently but don't need to be building
113:15 - all the time and there are techniques
113:17 - for that as well so I think that's it
113:19 - for for this particular example and
113:21 - we're still using a little bit of
113:23 - JavaScript client-side to that
113:25 - client-side rendering of that little
113:27 - personalized message but we're also
113:29 - using javascript a build time to get
113:33 - that query get that data from an API to
113:36 - get those news items pre generate those
113:38 - into markup that we can then deploy to
113:40 - the hosting environment deploy them
113:42 - directly to the CDN and we'll expand on
113:45 - that in the next example we'll start
113:47 - doing more request to API and start to
113:50 - do more things with that data still
113:53 - generating their markup for that's it
113:54 - for this example
113:55 - we'll move on to the next thing now I
113:57 - think next it's a good time to start
114:00 - talking about talking about this let's
114:02 - talk about personalization I think that
114:04 - this is often an area where people think
114:08 - you can't you can't start tackling this
114:10 - challenge with a gem stack site with a
114:13 - pre-generated site that's served as a
114:16 - bunch of static assets and thankfully
114:18 - that's that's not quite the case and
114:20 - we'll get into how this works
114:21 - um traditionally so this is again
114:24 - looking in our diagram of a traditional
114:26 - stack where we have a maybe a web server
114:30 - in a database running where these these
114:31 - things are handling the requests in real
114:34 - time in you know at request time the job
114:37 - that's been done here in a traditional
114:39 - stack is the web server has got its
114:41 - templates and whatever other logic is
114:43 - making its requests to get data and it's
114:45 - applying that data to the templates with
114:47 - Oliver or the logic to return generator
114:50 - of you and then return that back to the
114:53 - user
114:54 - in fact this operation of turning
114:57 - templates and data into a view or that's
114:59 - that's kind of what we have with static
115:02 - site generators now I think of static
115:04 - site generators as tool which apply
115:06 - structured data to
115:08 - templates in order to create views and
115:10 - assets it's just just a little bit
115:12 - different that rather than you know
115:14 - rather than doing it at request time
115:17 - instead we do it we do it here at build
115:20 - time we do it up front it's kind of
115:22 - doing the same job but it's just that
115:24 - we're we're pre loading that effort and
115:27 - I think that given that this is
115:28 - happening ahead of time and we're doing
115:30 - this before we know who the user is
115:31 - that's coming to a request the data I
115:33 - think that's why a lot of people think
115:35 - that you just you can't do anything
115:37 - other than you know one size fits all
115:40 - content and luckily that's not quite
115:42 - true it's worth as just looking for a
115:44 - second about about out of view at what
115:47 - personalization is I think of
115:50 - personalization and universal content
115:52 - has a bit of a spectrum you know is it's
115:55 - at one end we have content which is
115:58 - evergreen and good for anybody no matter
116:01 - who they are they all get the same
116:03 - content at the other end of the spectrum
116:05 - we have content which is being served up
116:07 - specifically to an individual you know
116:09 - you've maybe authenticated we've noticed
116:12 - who you are so we can serve something
116:14 - specific to you but in fact there's a
116:16 - lot of things that are in between here
116:18 - and a lot of sites actually lean further
116:20 - down this end of the spectrum than you
116:22 - might expect so I think of this spectrum
116:25 - is also containing localized content so
116:28 - that's content with meit which maybe has
116:29 - been populated specifically for people
116:33 - who are coming to the site from a
116:34 - particular part of the world we
116:36 - sometimes think of internationalized
116:38 - content as well where where it's being
116:40 - translated into different languages but
116:43 - localizations ever so slightly different
116:45 - this is targeting the content based on
116:47 - where the visitors are coming from now
116:50 - we don't need to know the exact
116:51 - individual that's coming to that we just
116:53 - need to know where in the world they're
116:55 - visiting from and what information might
116:57 - be useful to them but it's certainly not
116:59 - quite the same as universal content and
117:01 - then the next step in there in the
117:03 - spectrum is what I think of as targeted
117:06 - content so depending on who the person
117:10 - is but not necessarily down to the very
117:12 - specifics of who that person is so what
117:15 - kind of user are they are they an admin
117:17 - have they got rights to a particular
117:18 - section of the site can we then Todd
117:21 - content that's tailored for that their
117:23 - group of people if you like so you might
117:26 - think about roles and targeting content
117:28 - that way again it doesn't need to be a
117:30 - one-to-one relationship between the type
117:32 - of content there is and the individual
117:34 - this might be kind of batches and groups
117:36 - only when you get right to this very end
117:38 - of the spectrum where the content is
117:40 - very specific to an individual with Jam
117:44 - step we can actually we can actually
117:45 - address every area of this spectrum it's
117:48 - just a question of how much we do in the
117:51 - browser client-side with JavaScript I
117:55 - mentioned at the very beginning of this
117:56 - this video about the stack moving up a
118:00 - layer moving closer to the individual
118:01 - closer to the browser and that's what
118:03 - javascript gives us because it's a
118:05 - runtime that runs right there in the
118:06 - user's browser so using that and some
118:09 - techniques we can get to the point that
118:10 - we're delivering very personalized
118:12 - specific information to a user
118:15 - but there's a whole road to travel
118:17 - before we necessarily need to do that
118:19 - and what the next example what I want to
118:21 - do is I want to talk about creating some
118:23 - localized content as well so there is a
118:27 - napes of an enabler that have allowed us
118:29 - to do that and I talked to the very
118:30 - beginning again about enablers and just
118:32 - to recap now some of the enablers that
118:34 - help us with this our automation we've
118:36 - already started introducing automation
118:38 - we've got builds that run on command
118:40 - they're scripted they're repeatable
118:42 - they're predictable and we can automate
118:44 - their builds a number of tools and
118:47 - services are starting to emerge we're
118:49 - now we've already been using services
118:51 - for news api's we're hosting on a on a
118:55 - service that gives us continuous
118:56 - integration and those kind of things and
118:59 - there's been a huge explosion in the API
119:01 - economy so all of these different
119:02 - resources are available over API so that
119:05 - we can now leverage one of the key
119:08 - things for things like localization and
119:10 - personalization are the kind of services
119:13 - that we have now at the edge at the at
119:15 - the CDN the network that's delivering
119:17 - the content if we go back to this
119:20 - diagram once again you know I've been
119:25 - talking so far about building things
119:27 - ahead of time and then deploying them
119:28 - directly to a CDN the fact that all of
119:31 - our assets are there and then they're
119:32 - ready to go when you
119:34 - comes along means that with a tiny bit
119:36 - of intelligence at the CDN layer we can
119:38 - start to do intelligent things with that
119:41 - information with that data we can route
119:43 - different people to different assets
119:45 - that are on there and we'll come to that
119:46 - in a minute but I don't want to be
119:50 - accused of oversimplifying this versus
119:53 - the traditional stack you know I haven't
119:57 - included a CDN here anywhere so you
120:00 - might be thinking well this is all fine
120:02 - if I'm we're hearing about the power
120:05 - that you can do with things that are CDN
120:07 - we might we not just have that here as
120:10 - well and of course that's absolutely
120:11 - fair in a traditional stack often there
120:13 - is a CDN included as well the challenge
120:17 - there is that in a traditional stack
120:19 - when you've got a CDN as well let me
120:20 - expand this diagram I didn't really want
120:22 - to include this in my initial diagram
120:24 - because it it looks so complex because
120:27 - in sweer not selling everything just
120:29 - purely from a CDN but we're also serving
120:31 - some things from the web server which
120:33 - are getting data from the database
120:34 - compiling things either returning
120:36 - directly maybe pushing something some
120:39 - things to a CDN to be cached maybe some
120:42 - things have pushed directly to the CDN
120:43 - from Build time the the the visitor the
120:47 - user is making some requests with CDN
120:49 - some requests to our web server there's
120:51 - complexity here so adding a little bit
120:53 - of logic there impacts a whole load of
120:55 - the stack whereas with the Jam stack
120:58 - approach everything is the CDN there's
121:01 - there's there's no other logic to worry
121:02 - about for other bits and pieces behind
121:04 - behind the scenes here we've pushed all
121:06 - of our resources to the CDN so then if
121:09 - we do apply some some simple logic here
121:11 - to root different people to different
121:13 - assets that are there we don't have to
121:15 - worry about some of these things missing
121:16 - and and having to pass through so other
121:18 - bits of infrastructure so our next
121:21 - example what we're going to do is we are
121:23 - going to start generate generating some
121:25 - localized content and we'll we'll start
121:28 - building that out now the things that
121:30 - we're going to do along the way we're
121:32 - going to generate different views for
121:34 - many locales so we're building on the
121:36 - example that we had before and then what
121:39 - we'll start to do is we'll start to
121:40 - route the traffic at the CDN level to
121:43 - the different views different resources
121:45 - that we've generated in popular
121:47 - at the CDN then there's an extension to
121:50 - that what we'll start doing is we'll
121:51 - start automatically generating our CDN
121:53 - config as well so those are the things
121:55 - we're going to do skipped over this but
121:58 - let's just remind ourselves the code for
122:00 - this it's just a copy of where we are
122:03 - starting point is a copy of where we got
122:05 - to an example for but this is example
122:06 - five so you can go directly to the repo
122:08 - and poke around with the code if you
122:10 - like find that out Jam stack x5 okay so
122:14 - with that said let's let's get stuck in
122:19 - so I have created a new site for this
122:22 - it's exactly the same as we've been
122:24 - looking at before but since it's a new
122:26 - git repository I made a new site for it
122:29 - let's have a quick a quick look it looks
122:32 - yeah we're familiar with this now we've
122:33 - got our new stories in there behaving
122:36 - the way we are kind of expecting that
122:38 - let's let's start making some changes to
122:40 - the code so so where to begin well at
122:48 - the moment where we're making this
122:50 - request for our news data from this from
122:53 - this API but we do have this facility to
122:57 - specify the country that we want to get
123:00 - them useful so let's just go and take a
123:02 - quick look at the the docs for this and
123:06 - here we are this is the news API dot org
123:08 - site again and this is in fact the feed
123:11 - we're using as a country code and it
123:13 - supports let's look down here yeah here
123:17 - we are so the country parameter suppose
123:19 - all of these so we could we could
123:21 - generate a page of content for every one
123:24 - of these countries and then route people
123:26 - to it I'm just going to start with a
123:27 - handful of them handful of begin with
123:32 - because each of these requests isn't
123:37 - going to be is going to be another
123:38 - request to the API and I'm you know I'm
123:41 - still on the free account here in this
123:43 - little demo so I've only got 500
123:44 - requests a day and their likelihood is
123:47 - that I might want to make lots of
123:48 - changes to this so I just don't want to
123:50 - be hammering the API so let's just be a
123:52 - little bit efficient about that
123:54 - but perhaps we could create ourselves a
123:58 - little set of countries okay so if we
124:10 - make ourselves Stella Raye
124:22 - I'll do is I think just so we can expand
124:24 - on this later on and put all of these in
124:26 - here but just for the sake of not
124:28 - hammering the API well we're just
124:29 - developing developing it we'll just
124:31 - we'll just use these if we look at our
124:34 - our existing function at the moment
124:36 - we're just doing this with this one
124:38 - request so perhaps if we take this out
124:39 - put this as a as its own function then
124:42 - we can call that for each each one of
124:44 - our one of our feeds so see you know
124:49 - what we're just going to take this whole
124:50 - thing so there's a sinc function - no
124:58 - longer anonymous and it's cool it's get
125:01 - news and we'll pass in the country and
125:06 - then we'll use that country yeah
125:18 - there we go now at the moment is just
125:22 - returning articles but we're going to
125:24 - want to maybe change the structure of
125:26 - the of the data that comes back here so
125:29 - that we can use it more conveniently in
125:31 - our in our templates so let's sir
125:34 - let's return a little object here and
125:37 - perhaps we'll have a couple of keys in
125:41 - here so maybe you have country and then
125:43 - the country that we passed in and then
125:49 - the date resurfaced stick with referring
125:53 - to those as articles then we'll go
125:55 - directly into the articles to get that
125:59 - how does that looks good pretty good to
126:01 - me okay and then we will call that for
126:09 - every one of our members of our array so
126:13 - let's do that this is this is gonna
126:16 - return a promise of this data in this
126:18 - structure so let's just collect these
126:20 - together in a promises array Newport
126:25 - News promises
126:29 - and we'll iterate over our list of
126:34 - countries which we have to just grab in
126:36 - a second so would you let's use a map
126:37 - for this and cool news great to make
126:45 - sure we have access to that let's just
126:49 - require our list of countries
127:03 - okay great should now have access to
127:07 - those
127:13 - and then once we've returned all of our
127:15 - data and got our got our promises let's
127:17 - let's get all of that so this is going
127:20 - to be this is going to give us a room an
127:22 - array of these these objects so let's
127:25 - let's remind you all of those together
127:27 - so we all need to do that once the
127:28 - promises of all returned to let's use
127:30 - rapport missed all that and their
127:35 - promises so when they're all returned
127:40 - and then what we can do is we can we'll
127:45 - take the news objects that we've got
127:46 - back so each one of those those items
127:49 - and what I think we'll do is we'll just
127:54 - concatenate all of those together into
127:57 - one array until this it's actually just
128:01 - just we'll take a look at those as we're
128:03 - going as well
128:09 - so we can just see just inspect those a
128:12 - little bit we're gonna return from here
128:16 - is all of those have an array with all
128:20 - of those other arrays bunched together
128:23 - so let's use a little trick so we'll
128:29 - concatenate all of the array objects
128:36 - that that's good I will need to prompt
128:40 - return this to 11 T as well see how's
128:45 - that looking looks pretty good just give
128:49 - their starts I think about so let's see
128:53 - if this this does give us some data back
128:55 - now our data's gonna come back in a
128:56 - slightly different shape so I think a
128:59 - sensible thing to do is to change our
129:05 - template to make sure so now we've got
129:07 - an array of all of these items so let's
129:08 - just let's just look at the first one
129:10 - and they in the array first of all
129:13 - where's this this is telling me problem
129:15 - I think we're probably not that's close
129:21 - it's just complete this may be slightly
129:24 - better shape okay let's give this a
129:25 - little run see if we are still getting
129:32 - data okay so we have a problem come five
129:35 - countries dot Jason give that another
129:45 - whirl
129:45 - okay that's looking hopeful so we
129:48 - consult out the shape of our data so we
129:51 - do have our news objects which is being
129:52 - passed back to eleven T for our static
129:54 - site generator and that's looking how
129:57 - we'd like it so we're getting a country
129:59 - member with with the country code in
130:01 - there and then an array of our of our
130:03 - objects so that's looking hopeful let's
130:06 - now see if we're actually saying okay
130:09 - great so we are looking at the first
130:11 - item in our data data set this is an
130:15 - Arabic so so good we're getting getting
130:18 - data the way we want now what's next
130:20 - well we're going to want to make a page
130:23 - for each one of those at the moment all
130:26 - we have all we have is this is this
130:32 - index page but really for each one of
130:34 - these these items we're gonna make it
130:37 - want to make a page for that now static
130:39 - site generators very very good at doing
130:40 - this kind of thing as well creating
130:42 - different different files for different
130:45 - sets of data so what I think I'm going
130:47 - to do
130:48 - so new duplicates our index page this
130:52 - call this localized because we're gonna
130:58 - want this to look actually the same
130:59 - we're not gonna use go just for the for
131:02 - the first item in the array but we're
131:04 - gonna we're gonna use a little trick
131:06 - which which 11c has based on pagination
131:12 - now a common pattern when you're working
131:14 - with structured data is you know maybe
131:15 - you've got a set of blog posts or a sort
131:18 - of pages you want to have a listing page
131:20 - that you were to rate over that you
131:22 - don't want to have every single one of
131:24 - those entries visible on one page maybe
131:26 - you'll paginate that so that you can
131:27 - have sets of 20 and page through there
131:29 - kind of any next page of that and
131:31 - eleventy has a nice model for that and
131:33 - you can actually use that to generate
131:35 - just a single single pages as well
131:39 - rather than listing pages so I'm into
131:41 - cheat by chair putting in some different
131:44 - frontmatter
131:45 - very similar to what we had before so
131:47 - I've just changed the title now to daily
131:49 - briefing because this is starting to
131:51 - become a page that's got a different
131:52 - purpose you know it's our our set of new
131:55 - stories to start the day and what we've
131:57 - got here is we're starting to use this
131:59 - this property of eleventy this
132:01 - pagination feature it's gonna say where
132:04 - are we going to get the data for this
132:06 - pagination well we've got our news
132:07 - collection our new set of data which
132:09 - we're we're generating over here now the
132:12 - page size if we were to want to create a
132:14 - listing maybe we would have 10 of those
132:16 - and in the code underneath with maybe
132:18 - iterator out of those create a listing
132:20 - of these pages but we're just going to
132:22 - have a page size of 1 so it's going to
132:24 - make so it's going to make a set of
132:26 - individual pages will have this little
132:28 - alias here so we can address it more
132:30 - easily and now we've got the chance to
132:33 - specify what the permalink what the
132:35 - address of this pages so from our news
132:38 - data object will it access the country
132:40 - so in other words this this little chunk
132:42 - down here and we'll we'll create that
132:44 - and an index file for that so this page
132:46 - will live at that address and then for
132:49 - each of the pages well this is just the
132:50 - same code that we had before for our
132:52 - index page and I don't think since we
132:54 - structured it the same way I don't think
132:56 - we're gonna you need to to change
132:59 - anything
133:00 - that should work just as it is let's
133:03 - let's give it a shot and see if that's
133:05 - gonna generate a bunch of different
133:07 - pages for us well yeah indeed it did so
133:10 - we've got now all of these different
133:12 - pages created and let's go and take a
133:15 - little look we should be able to access
133:17 - tonight a new so just refresh my memory
133:19 - what what languages does we have AE
133:23 - Australian as well let's have a little
133:25 - go for that one
133:27 - so there's our Australian news great
133:33 - we've got we've got news pages for
133:35 - different for different regions now um
133:37 - tell you what let's let's make let's
133:40 - make this page a bit of a listing of
133:42 - these so that we can more easily
133:43 - navigate our navigate our way around it
133:46 - let's change that on the about page so
133:49 - here you know since we have access to
133:51 - this news object we can start now to to
133:55 - make use of that so let's have just loop
134:00 - over that with for I don't know item in
134:05 - news just close that loop before I
134:09 - forget
134:17 - and then let's let's simply put a little
134:24 - link to the page for each one item book
134:29 - country
134:31 - let's just put the same thing here as
134:33 - well some country
134:42 - all right so now if we run this again in
134:46 - fact I think it's been watching us yes
134:48 - great so so here we are we've got pages
134:50 - for each of these each of these locales
134:53 - so um well why don't we this is looking
134:58 - good to me why don't we now create this
135:02 - great one for all of these pages you
135:04 - know that's that's the nice thing about
135:05 - structured data you know we could get
135:06 - this set again get the entire lot and
135:10 - we'll put it into our countries here we
135:14 - are again so if I can get there the
135:19 - multi-camera formatting here we go Greta
135:29 - fine okay missed one yeah okay so let's
135:37 - see I'm just gonna restart that make
135:39 - sure it picks up the data wash load of
135:42 - pages made lots of pages created if we
135:49 - go to our yes so we've got one for all
135:54 - of these now so build your page great
135:59 - similar themes coming up in all the news
136:01 - stories today but yeah there we have it
136:04 - so we've got we've got a bunch of
136:05 - different pages now we're not directing
136:08 - people to these specifically but there
136:10 - are addresses that people could get to
136:11 - so what's the what's the next thing how
136:14 - are we going to actually start to direct
136:16 - people at the CDN level directly to the
136:20 - right to the right page for them well
136:24 - luckily I was talking about enablers and
136:29 - the fact that CD ends now can have
136:31 - different logic lacuna you can execute
136:33 - neckla is no different to that I'm using
136:36 - that the fires are example and what we
136:38 - can do is we can use the redirects
136:40 - support as a country
136:43 - yeah yeah let's just look at them look
136:47 - at the the docs for this redirect by
136:50 - country or language so this is becoming
136:53 - more popular as something that you can
136:55 - access at the CDM now CD ends have
136:57 - traditionally been very very complicated
136:58 - and difficult to use or very much - I'd
137:01 - say a pro a pro level thing to be
137:05 - working on and it's often problematic
137:07 - for people to to configure these really
137:10 - efficiently the barrier to entry is
137:13 - coming down all the time for this and
137:15 - configuring the logic at the CDN level
137:18 - Fernet the phi is as simple as having a
137:20 - redirects file and then putting this
137:22 - kind of declarative confident here so so
137:27 - the way that this this works for
137:29 - instance this this logic is saying for
137:32 - any visit coming in at the root level
137:34 - we're gonna direct it to this path
137:37 - instead it's gonna use a 302 so it'll do
137:39 - a redirect but this is only true if the
137:42 - country is Australia or New Zealand so
137:45 - we can start serving localized content
137:48 - this is actually exactly what we want so
137:50 - why don't we make one of those ourselves
137:53 - so let's go back to our code so let's
137:56 - let's create a redirects file but rather
138:01 - than typing that for each one of these
138:03 - let's generate it automatically we
138:05 - already have this object we're using a
138:07 - static site generator that changes data
138:10 - into interviews let's let's make one
138:12 - also for creating our redirects so let's
138:16 - say it's a redirects njk and what we'll
138:23 - do is we'll say we'll ask it to create
138:26 - the file in the right place using this
138:28 - permalink oops property
138:34 - which is gonna be conseguido X that's
138:36 - the name of the file we want to create
138:40 - so the pattern then is any traffic that
138:43 - comes into the the root of the site
138:46 - we're gonna want to redirect that to a
138:49 - country so let's say that's a GB for
138:53 - instance index dot HTML that's whether
138:55 - the content is served and we're gonna
138:58 - want to do that with could do that with
139:00 - any response code that we want in the
139:02 - examples there it was using a redirect
139:04 - I'm actually gonna use a rewrite instead
139:07 - so I'll just do with it a 200 so the URL
139:09 - for the user will just stay exactly the
139:11 - same but behind the scenes I'll be
139:12 - serving the content from that resource
139:14 - but we'll only do that if the country
139:19 - equals GB so that's that that's the form
139:25 - that we want but we won that fur for
139:27 - every every item so that's for every
139:30 - country
139:30 - so let's now let's do that
139:32 - programmatically we've got this access
139:35 - to know all of the items in in News know
139:40 - in yes in news that's our news object
139:49 - close that loop
139:56 - so what we want to do is rather than
139:59 - rather than have GB we're gonna access
140:04 - the item country so we should be able to
140:07 - then generate this this format of
140:12 - redirect file with all of our entries
140:14 - created for is programmatically at Build
140:18 - time so it's let's get there give that a
140:22 - whirl
140:24 - okay looks like that's done its thing so
140:28 - check this out yeah there we go so you
140:31 - have an entry for each of these things
140:33 - we could actually change clean up the
140:34 - white space a tiny bit in fact there's a
140:36 - couple of other things I might just add
140:38 - here so let's just do this just to clean
140:40 - up the white space we don't get those
140:42 - empty rows in between but there's
140:43 - another couple of things I'm going to do
140:45 - here so since we're gonna create a page
140:49 - for every country one of these should
140:51 - probably be to the default rather than
140:52 - having an index page so I'm actually
140:54 - gonna I'll delete the index page now so
140:57 - we're not gonna need that we're gonna
140:58 - serve every every one of our views for
141:01 - one of our localized generated pages
141:04 - it's just it's just fewer things to to
141:06 - generate and what we'll do is we'll set
141:09 - a default here or like a fullback I'm
141:12 - just gonna pop over back to the docs for
141:14 - a second because what we can have is we
141:17 - can also use this format for serving
141:19 - custom 404 pages now strictly speaking
141:22 - we should probably create a different
141:24 - 404 page for every language localized
141:26 - into the language or into the into the
141:28 - locale the translated perhaps into the
141:31 - correct language for our purposes that
141:33 - I'm just going to use this as our way of
141:35 - generating a fallback or rather routing
141:39 - people to a fallback page so it when
141:42 - that the way the rules are applied is it
141:44 - starts at the top and as soon as it
141:45 - finds a match it serves that sir that
141:48 - that entry but what I didn't do is I'm
141:51 - going to make the English at the British
141:55 - page be the
141:59 - fall back so if for any reason none of
142:03 - these conditions are met we'll just
142:04 - serve people this page instead that
142:06 - means I can get rid of that that index
142:08 - dot HTML file and we'll serve that page
142:10 - instead one other that we are we've
142:12 - generated that as well um one other
142:14 - thing I think we might do here is
142:17 - because it's gonna be difficult for me
142:18 - to demonstrate this to you in a second
142:20 - we'll will deploy this into our hosting
142:22 - environment and then you've kind of just
142:25 - have to take my word for it that if
142:26 - people are viewing it from different
142:27 - places they'll get routed there because
142:29 - I'm only accessing in accessing the site
142:31 - from one location but just for the sake
142:33 - of demonstration I'll we look back at
142:35 - the docs here go to our country and
142:38 - language so yeah these are the
142:39 - conditions if if if the locale of the
142:43 - visitor is detected to be one of these
142:45 - look one of these regions will route
142:48 - people there we can also do the same for
142:50 - language settings and I can control that
142:52 - a little bit more easily to demonstrate
142:54 - that so based on that what I'll do is
142:57 - I'll also create I just create one for
142:59 - the sake of just demonstrating this but
143:01 - let's repeat the French site with 200 so
143:09 - again we're rewriting rather than
143:10 - redirecting and rather than country
143:13 - we'll use language equals so this will
143:17 - look at the accepts accepts language
143:20 - header in their browsers in the views of
143:23 - US browsers and if it's if it's set to
143:25 - french will serve the the source from
143:28 - there if that's not the case it will
143:30 - look for the location see if it's the
143:31 - correct country and route them to the
143:33 - right place they can't find any of these
143:34 - things will serve the English page so
143:37 - I'm going to generate that one more time
143:38 - I wonder if I've hit Mike I know we're
143:40 - fine okay we're good look at the
143:44 - redirects page okay so our workspace has
143:46 - been cleaned up we've got our language
143:48 - option at the top we've got our 404 at
143:52 - the bottom this is looking good to me so
143:55 - what I'm gonna do
143:56 - let's commit these changes
143:59 - rewrites commit those changes will
144:04 - deploy them so we'll push them to our
144:06 - repository which in turn does a
144:09 - deployment and it's gonna watch that
144:11 - happening I go deploy it's just a little
144:15 - reload okay so he wasn't in building now
144:19 - we should see at the point that this is
144:22 - this has all been generated we should
144:24 - see that as the deployment has happened
144:27 - now if I will notice the redirects file
144:29 - it will I should really have removed my
144:32 - logging it will notice the redirects
144:34 - file set up the configuration at the CDN
144:38 - level we should get some kind of
144:39 - confirmation that its notice those yes
144:41 - 56 redirects rules have been processed
144:43 - we've uploaded all of these new files
144:45 - that we generated for all of our our
144:47 - various versions let's let's go and take
144:51 - a take a look at this so this should
144:54 - even though I don't have an index page
144:55 - yet we've been taken through to the to
144:59 - the the English version of this we
145:01 - should have yeah here's our listing for
145:03 - all of the different versions but if I
145:06 - change that I've got a little extension
145:08 - here just to make it easy to change my
145:10 - my language settings for the for the
145:12 - browser that happens it happened faster
145:15 - than I could I could I could I could
145:17 - refresh actually does that fool me so
145:20 - now the same URL is being rewritten to
145:23 - the french version of the site so we've
145:24 - got the the french content it's exactly
145:27 - the same as if I'd chosen to go directly
145:30 - to here thank you I don't want to
145:32 - translate if I change my go back to the
145:36 - home page if I change my language to
145:40 - back to English in fact I think it will
145:42 - happen for any other language I just
145:44 - default back to the English English
145:46 - version great that seems to be working
145:49 - working nicely so let's have a little
145:54 - little recap of what we've just done so
145:57 - now we've at our static site generator
145:59 - we've generated views for many locales
146:01 - and we've done that by querying for
146:04 - different content for the different
146:05 - locales our API that we're that we're
146:08 - requesting from supports that but we've
146:10 - used a static site generator to generate
146:12 - the views for all of those locales right
146:15 - away then we set up our configuration to
146:18 - route the traffic at the CDN CDN level
146:20 - to whichever of the assets that we pre
146:22 - generated this appropriate to the the
146:25 - users that are that are that are
146:27 - visiting the site and the generation of
146:29 - that that config has happened as part of
146:32 - the static site generation as well so it
146:35 - kind of streamlines that whole process
146:37 - for us once we understand just how that
146:39 - config works this feels to me like we're
146:43 - moving from like Universal pages across
146:45 - sir to localized pages and you could
146:48 - argue with the addition of that that
146:51 - language header as well that language
146:53 - detection starting to target
146:54 - particularly users as well so users who
146:57 - have identified themselves as wanting
146:59 - content in a particular language we're
147:01 - starting targeting people targeting
147:05 - content specific to those we haven't got
147:07 - into personalized content yet in the
147:10 - following example we're gonna get more
147:11 - into this realm a little bit but just as
147:14 - our a little sense check once again was
147:17 - that jabs Tex we're doing quite a lot of
147:19 - things there well yeah I'd say it
147:21 - certainly is you know we're using still
147:23 - the timing of JavaScript in the front
147:25 - end but really the JavaScript at the
147:26 - moment is being used to generate the the
147:29 - site make the request to that API also
147:31 - generate the the configuration and build
147:34 - up the the markup that we serve where
147:37 - pre-rendering all of these files we're
147:39 - serving everything directly from a CDN
147:41 - and even though we have that tiny bit of
147:43 - logic that it lives at the CDN we still
147:46 - don't have a web server to manage we've
147:48 - got no infrastructure that we're
147:50 - managing at the moment everything is
147:52 - pre-rendered and served directly from
147:54 - from the edge from a CDN so yeah I think
147:56 - we're we're still very much in jam stack
147:58 - territory okay so I think that that
148:01 - wraps it up for this this example we'll
148:03 - move on to to something something a
148:05 - little bit further on building on this
148:07 - next what I wanted to do next was start
148:10 - to introduce a little bit more in a
148:12 - client-side web we're already doing a
148:14 - tiny bit of client-side rendering we're
148:16 - only updating one tiny string from a
148:19 - random set of messages just to prove the
148:21 - point the most of what we're doing at
148:23 - the moment is is server-side rendering
148:25 - build time we're generating all of those
148:27 - content pages from from a content API
148:30 - building those out and then there is a
148:32 - tiny bit of client-side rendering
148:34 - happening just as a little embellishment
148:36 - but we're gonna do a little bit more now
148:38 - here we're gonna actually start bringing
148:40 - different kinds of data that maybe would
148:42 - be a bit more personal to the the user
148:44 - or bit more targeted for the particular
148:46 - user rather than just being at a country
148:48 - level so just as a little recap this is
148:51 - this is our situation at the moment
148:53 - we're pulling our content from this data
148:55 - source at build time generating our
148:58 - build propagating that to the to the the
149:01 - hosting environment so in the browser
149:03 - comes along it can request those pages
149:05 - and everything's ready to go then a
149:08 - slight change now is that we'll add a
149:09 - little bit more JavaScript so in the in
149:12 - the browser client side we'll be able to
149:14 - use JavaScript so interrogate API is not
149:17 - just in the browser but also from
149:19 - another data source so we'll have
149:21 - multiple data sources in play now so
149:24 - yeah we'll introduce some client a bit
149:26 - more client-side rendering we'll make
149:28 - those client-side API calls will
149:30 - interact with browser api's and also
149:34 - towards the end of this example we'll
149:35 - start to introduce serverless api's as
149:37 - well so we're going to be building our
149:39 - own API layer but we'll do that with
149:41 - serverless functions this work that
149:44 - we're gonna be doing in the browser
149:45 - we're gonna use progressive enhancement
149:47 - for this now I want to just talk about
149:49 - progressive enhancement just for a
149:51 - second because this is something that
149:52 - sometimes gets a little bit overlooked
149:54 - progressive enhancement is intended as a
149:57 - safe and performant way to add
149:59 - interactions to websites so that you
150:01 - don't have to have an all-or-nothing
150:03 - situation and the way I like to think of
150:05 - it is this I like to think of it as
150:07 - deciding what is critical to the
150:09 - experience so our in our example we
150:12 - might decide that the news is critical
150:14 - it's a news page so we want to have the
150:16 - news there without any dependencies so
150:19 - this is all pre-rendered so when the
150:21 - browser comes along there's very little
150:23 - work to do we'll get that HTML and we're
150:25 - able to just display it so we'll deliver
150:28 - as much of this as possible using as
150:30 - little as possible so there are very few
150:32 - dependencies for the the user's browser
150:35 - and their device in getting that that
150:38 - to experience that we've decided on then
150:40 - after that we detect what supported
150:43 - features there are in the browser and
150:44 - enhanced the experience where possible
150:46 - so in the example that we're about to
150:48 - work on the kind of things that will
150:50 - detect in terms of supported features
150:51 - are the ability to get the user's
150:53 - location from the browser api's and then
150:56 - on the basis of having that enhancing
150:59 - the experience to add in our case we'll
151:01 - add some weather information for the
151:03 - user's location so we'll be doing this
151:05 - all with this progressive enhancement
151:06 - approach so doing as much as possible
151:09 - early and then just enhancing for the
151:12 - less critical pieces as an enhancement
151:15 - where those are available ok so let's
151:19 - get into the example this is example
151:20 - number six for client-side API calls
151:22 - once again the the code that we're going
151:26 - to be building out that's going to be a
151:28 - to github repository which you can get
151:29 - to at find that at Jam stack x64
151:33 - exercise 6 there are a few are the links
151:35 - and resources in this in this example as
151:37 - well and those will be all on the github
151:39 - repository so let's let's take a little
151:56 - look before we dive into the code I want
151:58 - to actually just introduce you to the
152:00 - services we're going to use I'll catch
152:03 - you up a tiny bit while while you
152:06 - blinked between between the last demo in
152:08 - this demo I've done the same thing again
152:11 - I've copied the previous example into a
152:15 - new repository and I've set up a new
152:16 - site which is pointing to that repo but
152:19 - it's exactly as in fact let's just open
152:21 - it up so exactly as as we left it we've
152:25 - got the different pages of the different
152:28 - languages and I'm serving by default the
152:31 - the British version there but what we're
152:34 - gonna do is we're gonna we're gonna add
152:35 - something some more content in here so
152:37 - before the new section we're gonna add
152:38 - some some weather information which is
152:41 - specific to me to where I am and we're
152:44 - going to use a couple of different
152:45 - things for that we're going to use
152:47 - another freely available
152:50 - API this is open weather open weather
152:53 - don't open weather map to org again
152:56 - these links are will be in the
152:57 - repository so if you want to follow
152:59 - along there you can get access to those
153:01 - there as well once again this is an API
153:04 - that you can certainly pay for and if
153:06 - you're going to be using it in
153:08 - production that's exactly what you
153:10 - should be doing but for for our purposes
153:12 - for a demonstration we have there is a
153:14 - free tier that gives us access to some
153:16 - API is that we can we can start querying
153:19 - same kind of pattern to to the news
153:23 - api's who are using before you'll need
153:25 - to just register get an API key that
153:28 - then you were able to use in requesting
153:30 - things from the API there's all kinds of
153:33 - things that we could be using from from
153:34 - the API that's available to us I'm just
153:36 - going to use the current weather data
153:38 - and let's just look at the API for that
153:40 - there's a bunch of different things that
153:42 - we might be able to do we might be able
153:44 - to query for it based on the city name
153:46 - or city name state state also using
153:51 - country or a city ID what I'm gonna go
153:55 - for is I'm gonna use geographic
153:57 - coordinate so we'll be using long to
153:59 - Juden latitude so we can the format of
154:03 - there so we pass in a lat long and s and
154:10 - an API key and then we'll get this sort
154:12 - of data back so we'll be able to start
154:14 - to use this data to embellish and
154:17 - enhance our our site with some
154:19 - information about the location in order
154:24 - to be able to do that we need to be able
154:25 - to get the users that long information
154:27 - and to do that we'll be using javascript
154:30 - to talk to a browser API now this is a
154:33 - browser API called geolocation and
154:35 - there's a method on this API called get
154:37 - current location which is exactly what
154:39 - we need just popping down to the bottom
154:41 - here on on on the MDN documentation site
154:45 - this has got great browser compatibility
154:47 - but we're still going to use some
154:49 - progressive enhancement just to check
154:51 - that it's available just because it's
154:52 - good practice whenever you're using an
154:54 - API like this just to make sure that
154:56 - you're you're using something that's
154:58 - available to whoever comes along
155:00 - to access it a little note as well that
155:04 - this requires HTTPS now we need to be
155:07 - making secure requests to our web server
155:10 - to be able to do lots of things that are
155:12 - interacting with browser api's this is
155:15 - for purposes of security and privacy and
155:19 - so we need to be serving this over HTTPS
155:21 - fortunately the environment that we're
155:23 - serving this from this is HTTPS by
155:26 - default and wherever you're hosting your
155:28 - sites from this is something to look for
155:30 - making sure that you can support a
155:32 - secure protocol for serving your site's
155:35 - so much of the modern web depends on
155:38 - HTTPS and it's just good practice to
155:40 - have that in place but we don't have
155:43 - that currently in our local development
155:44 - environment so I'm going to just comment
155:47 - in a second or two about how to get that
155:49 - set up but let's just have a little look
155:52 - further at what using the geolocation
155:55 - API looks like well here we are we can
155:58 - can make a request to the Geo code to
156:01 - your location API ask for the for the
156:03 - current position and then we've got and
156:06 - then this this method accepts a couple
156:07 - of parameters a success handler and
156:10 - error handler and we can pass in some
156:12 - options as well so the second I'm going
156:14 - to steal this wholesale but before I do
156:17 - I just want to talk a tiny bit about
156:20 - making sure that we can we can view this
156:23 - locally in our local development
156:24 - environment without without worrying the
156:27 - fact that we need we need HTTPS so I'm
156:32 - just going to pop over I think to
156:45 - so I'm gonna over back to so his our new
156:51 - our new project I knew or I'm you know
156:53 - our new folder which is copy from our
156:55 - previous project I'm just gonna open up
156:57 - the code editor as has we've been doing
157:00 - all along this should be familiar from
157:04 - our previous examples but the one thing
157:06 - we're just going to change to start with
157:07 - is our eleventy config you'll perhaps a
157:10 - call that we're running this script to
157:13 - build things we're running our eleventy
157:15 - script to build things when we're
157:16 - developing locally we're running this
157:18 - start script which runs eleventy serve
157:20 - this is the thing that watches for
157:22 - changes starts a simple web server and
157:24 - then refreshes sings for us internally
157:27 - that's using something called browser
157:29 - sync and by default we haven't got that
157:31 - set to serve things over HTTP now we can
157:35 - we can change this reasonably simple it
157:37 - simply there's a couple of steps to that
157:39 - so let's look at the eleventy config for
157:41 - this thankfully eleventy does support
157:45 - passing in some configuration for
157:47 - browser sync so I'm going to do that now
157:50 - I'm just gonna paste this in from where
157:54 - I had it before so this is another
157:56 - method that lives on eleventy set
157:58 - browser set config and we can pass in
158:01 - some various options here where we're
158:03 - passing in something for HTTP which is
158:06 - an object that les is defined where our
158:08 - key and our certificate are these are
158:11 - these are both resources that I've set
158:13 - up previously so that I could have HTTPS
158:15 - running on my local environment it's
158:19 - probably just a bit out of scope of this
158:22 - this tutorial to talk about setting that
158:25 - up but in terms of configuring
158:28 - eleventeen this is or will have to do
158:30 - but you are gonna need to generate these
158:32 - things and trust those on your
158:33 - environment first of all so what I'll do
158:35 - is I'm going to drop a couple of links
158:36 - into the readme of the github the git
158:41 - repository for this project so we ought
158:43 - to step through those things and make
158:45 - sure you've got this this up to speed
158:47 - I'm just gonna save that and make sure
158:49 - I'm able to use that as we go as we go
158:52 - forward so now if I with these things in
158:58 - place and assuming that you've you've
158:59 - created your your certs and you've set
159:02 - up this configuration now when I
159:18 - but now when I when I start my it's on
159:22 - my little development server I'm hoping
159:24 - what I should see as I should see that
159:26 - the URLs for this yeah we have some HTTP
159:31 - set up so now when i when i open up my
159:37 - when i open on my page i can i'm serving
159:40 - that over HTTP so this is secure so now
159:42 - this means that I'll be able to use
159:44 - those facilities within these facilities
159:50 - here to get access to the the
159:53 - geolocation API so let's let's do that
159:55 - next let's start adding from JavaScript
159:57 - to this one I actually just I'm gonna
159:59 - steal this this is too good not to not
160:02 - to steal and then change back to our
160:05 - code at the moment we're just including
160:08 - this this one bit of JavaScript this is
160:10 - all the client-side rendering we've got
160:12 - just appending one of these strings
160:13 - we're gonna do a little bit more than
160:14 - that now so let's create another file
160:17 - here let's call that weather and so I'm
160:23 - just going to stop my stop my browse my
160:26 - my automatically builds happening for
160:28 - the time being just paste all of this in
160:31 - we don't need these options these are we
160:33 - can have defaults I think the default
160:35 - options will be fine so I'm just gonna
160:37 - simplify those by taking those out but
160:40 - we do want to call this just geolocation
160:43 - API to say get current position and and
160:47 - if if we succeeds then we'll start to
160:51 - get things like the latitude and
160:52 - longitude and just lock those out it's
160:55 - gonna save that now we haven't included
160:57 - this in our in our page anyway yet so
161:01 - let's see I think just on our localized
161:05 - this is this is fairly rudimentary way
161:09 - of of including the JavaScript this is
161:11 - fine for our purposes we might think of
161:13 - having some kind of build mechanic to
161:15 - munch these files together or perhaps to
161:18 - create different packages and deliver
161:21 - those differently but for our purposes
161:23 - this is absolutely fine
161:26 - I'm just gonna call that weather safe
161:29 - that I think that should be there should
161:34 - be enough to get us Taylor started what
161:44 - I'll do before we continue them is I am
161:46 - just going to just trim down the number
161:51 - of pages we're creating because I'm just
161:54 - conscious about how much we're hammering
161:56 - the API making these 55 requests every
161:59 - time we reload so I'm just going to
162:02 - reduce reduce this down let's let's take
162:04 - a bunch of these out
162:14 - there we are we're only making a couple
162:16 - of requests to the API now we we could
162:18 - certainly be doing something a little
162:19 - bit more elegant here such as caching
162:22 - that data the data that's returned after
162:24 - one of these requests and keeping that
162:27 - as another data file and while we're in
162:29 - development mode we might be just
162:30 - hitting that directly rather than
162:32 - requesting anything from the API at all
162:34 - but our being a bit lazy in this example
162:36 - and just sticking with what we've done
162:37 - and not adding that that complexity for
162:39 - now but just for the moment I'll just
162:41 - make these two these two requests okay
162:45 - let's let's start this status up so if
162:52 - we open up our site oh well first of all
162:55 - we're getting a message that we can't
162:57 - get the asset at the root of the site
163:00 - and that's correct because we we deleted
163:02 - our index file we deleted that and we
163:06 - were sending everything directly to the
163:08 - correct localized page so we don't have
163:11 - that logic happening here in our dev
163:13 - environment we've only we've only
163:15 - implemented that up at the CDN so if we
163:18 - go directly to our our page now I tested
163:21 - this a moment or two ago so it hasn't
163:23 - prompted me for the location approval
163:28 - you can see here actually I've allowed
163:30 - that already so if we go to our looks if
163:34 - I could go to a console we should see
163:36 - yeah there we are so we're starting to
163:37 - look out our our console data great well
163:41 - that's that's our that's our first step
163:43 - that's that's a good first first step I
163:46 - think it's important though that we just
163:48 - make a small change down here and we
163:50 - talked about doing progressive
163:52 - enhancement to make sure that we're not
163:54 - using features that maybe not every
163:58 - browser has navigator dot geo location
164:00 - has really good support but nonetheless
164:02 - is is pretty good practice to just test
164:05 - for that and we'll only make this
164:08 - request and go off and do this this
164:10 - piece of activity if if this is
164:13 - supported there's a few other bits and
164:15 - pieces along the way that we'll do to
164:16 - make sure that we're not we're not doing
164:18 - anything that will appear broken as we
164:21 - try and do this but that's a that's in
164:24 - kind of first step whenever we're using
164:25 - browser features such as this okay so um
164:32 - so the moment we're getting our
164:34 - coordinate data our lat/long but we just
164:38 - we're just spitting it out to to the
164:41 - console let's make use of that now let's
164:43 - just go and take a little look to remind
164:45 - ourselves about how the weather API uses
164:48 - this let's go back to the documentation
164:51 - for coolness here we are
164:53 - so this is the this is the request that
164:57 - we're going to want to make so let's
165:01 - let's pop that into our code so so let's
165:08 - just capture that first of all our URL
165:11 - that we're gonna use is the protocol in
165:21 - and we've got a few variables actually
165:24 - this is kind of helpful we might as well
165:26 - just use that as is and API key
165:39 - fact if we we can call these there any
165:42 - pause
166:03 - and you'd okay because that way we don't
166:06 - need to do anything else with these
166:09 - these are torn fabric you get rid of
166:11 - this and to make this request what we'll
166:14 - do is we'll use fetch for this fix this
166:18 - URL and then take the response let's
166:34 - just transform that Jason
166:44 - okay okay and then with that what we're
166:52 - gonna do with that that data yes well
167:03 - for the moment let's see what see what
167:07 - this data looks like that we're getting
167:09 - back from the API okay looks looks good
167:15 - let's also make sure we've got now I've
167:23 - got that stashed somewhere okay that in
167:36 - and let's see see what our browser is
167:41 - telling us as we as we give this a look
167:45 - great okay so we're getting data back
167:48 - from the API let's have a little look at
167:49 - the shape of it okay so it's it's got
167:54 - our long city into the name of city and
167:56 - district Arsenal but yes that is indeed
167:58 - where I am in in Great Britain weather
168:02 - we've got mainly cloud description
168:06 - broken clouds an icon there as well that
168:08 - seems about right temperature 280 all
168:10 - that seems a bit warm I guess these so
168:13 - it's returning the data at the
168:15 - temperature in Kelvin which I don't
168:17 - usually use but that's I guess we can we
168:20 - can probably transform that into Celsius
168:22 - that let's just double check let's see
168:26 - if we can find
168:28 - yet a great metric let's let's do that
168:35 - so that we don't have to speak Kelvin
168:53 - okay let's have a little little inspect
168:56 - now whether there we are
169:01 - temperature six degrees it's very
169:03 - precise okay great well we're getting
169:05 - some data that we can now we can now
169:07 - make use of so let's let's now get it
169:10 - into let's get it into the site as let's
169:13 - go back into a page your template that
169:16 - we're we're we're using it so here's is
169:18 - where we're displaying our own news
169:19 - articles I once again I'm just going to
169:22 - I'm just gonna stop that automatically
169:24 - rebuilding just for the moment has to be
169:26 - a bit more descriptive in here let's put
169:27 - an h2 in here for use in your country
169:34 - let's have another conversation up here
169:38 - where with perhaps whether yeah you what
169:47 - are we gonna have let's let's think
169:50 - there's the just go back and have a
169:51 - quick look at the data oh it's trying to
169:55 - try to reconnect to our live reloading
169:58 - but we don't have that going now so
170:01 - we've got the name for the city we've
170:05 - got temperature the bits and pieces okay
170:14 - yes let's get those let's get those in
170:17 - so give these a place to be displayed
170:24 - start with the city have maybe three or
170:28 - four of these cities have a temperature
170:31 - say the main kind of status and maybe a
170:36 - bit more of a description let's start
170:39 - start with with those and let's populate
170:43 - those you know whether so so you know
170:50 - want to do this rather than logging this
170:54 - out I will leave the logging just for
170:56 - the moment but let's let's start
170:58 - depending this - to the site say this
171:09 - one was
171:15 - tax content it cools and then we'll grab
171:19 - from the data first one was the name I
171:23 - think for the city it's just like a few
171:26 - of these what did we have we had temp
171:30 - we had the main we had the description
171:39 - this was the main dot temp and this was
171:51 - in sorry cool this is a weather object
171:54 - weatherizing a riff some reason there's
171:56 - an array here of blue there are
171:57 - different states but we're just going to
171:59 - grab the first one let's grab first one
172:03 - and the manor description okay
172:07 - [Music]
172:22 - okay see see how this looks see if we're
172:29 - starting to get content flowing in
172:33 - there's another little reload okay so
172:39 - you could see there's a bit of a flash
172:41 - of unstyled content or you know
172:45 - unpopulated content rather while we're
172:47 - making that request and going off and
172:48 - getting the data but here we are we're
172:50 - getting our data into the site it's not
172:52 - super super beautiful to look at but
172:54 - it's descriptive and it's it's
172:55 - particular to me in my environment
172:57 - let's put just like this a tiny bit
173:01 - nicer
173:02 - degrees
173:10 - see if that's correct now something else
173:13 - that we might want to do since we were
173:15 - now we're trying to use progressive
173:17 - enhancement here we're trying not to to
173:19 - make a call to this unless it supported
173:21 - but we do have now this this thing on
173:24 - the page the whole time so why don't we
173:27 - why don't we actually rapper in a div
173:29 - and we'll give their idea of whether and
173:39 - what perhaps give it will style it
173:40 - initially it will hide this it's a
173:48 - hidden class and this in our template
173:53 - that has the CSS are minimal CSS is add
173:58 - the hidden class here display:none
174:10 - great and then what we can do is we can
174:15 - we can remove that can remove that class
174:21 - once we've populated all of these things
174:23 - so only if the request only so first of
174:26 - all only if this is supported will we
174:28 - make the request at all and then only if
174:30 - we successfully get the data back
174:31 - populate at all will we remove that that
174:38 - class list great so now if these things
174:47 - aren't supported at all we won't we
174:50 - won't be will be thinking we've got a
174:52 - failed page nice oh no I didn't get my
174:57 - escaping right okay that's sir it's just
175:03 - just trying try Darrell eNOS see what
175:08 - how we how we get on here okay that the
175:10 - job I thought I'd need to escape that
175:12 - fine all right so what status are we in
175:16 - here then now we've got pre-generated
175:20 - news information that's coming there's
175:23 - been localized for my for my country and
175:26 - then this has been enhanced with some
175:29 - weather near me from a client-side API
175:31 - call now I could obviously be styling
175:35 - this up and these could be some
175:36 - iconography and what-have-you but we're
175:38 - just trying to prove a point at the
175:39 - moment however we do have but you have a
175:43 - little bit of an issue in the our this
175:47 - is our JavaScript that is being executed
175:49 - in the client we've got our API key in
175:51 - here we're making an a request from the
175:54 - client to this API which is which is
175:58 - sending our API key you know over the
176:00 - wire and it's coming down you know
176:02 - coming down in the code for the to the
176:04 - browser so anyone could inspect that
176:06 - anyone could see that really we want to
176:08 - we want to squirrel that away we'd
176:10 - rather have that somewhere so I private
176:12 - now this is exactly why very often will
176:15 - introduce a server we won't want to be
176:17 - sending these kind of requests directly
176:18 - from the client we want to be doing
176:19 - something like this from a server
176:22 - and even when it's something as simple
176:24 - as this kind of an API request we might
176:26 - end up introducing sir bill server logic
176:28 - just so that we can we can create a
176:30 - proxy or we can have this code being
176:32 - executed there so perhaps what we should
176:35 - do is we should take this request away
176:37 - from the client and let's let's create
176:40 - this in a server but we don't want to do
176:42 - it we don't want to introduce a server
176:43 - lest you des use a service function for
176:45 - this we could certainly proxy this
176:47 - request through a service function so
176:50 - that we don't need to be sending the API
176:51 - key in in the wild as it were so how
176:56 - could we how could we do that well the
176:58 - easiest thing to think about here would
177:00 - be to create a a lambda function and
177:03 - then write our JavaScript in there
177:06 - fortunately we can we can do that
177:08 - reasonably simply with with notify
177:11 - nullify functions what I'm gonna do is
177:15 - I'm gonna I'm gonna make a new folder
177:17 - here I'll call it functions I'm gonna
177:22 - create a JavaScript file in there called
177:26 - with an API look J yes and if we go
177:32 - through this process and we deploy this
177:34 - to notify and tell notify that this is a
177:36 - service function this will put it to
177:39 - Amazon Web Services has a lambda
177:42 - function and they're set up all of the
177:44 - rules to do like the API gateway and all
177:46 - of the permissioning on our behalf so
177:49 - we'll get an endpoint that we'll be able
177:50 - to just hit and run this and this won't
177:53 - be running in our environment anymore it
177:54 - will be running as a service function
177:56 - the question is are our service
177:59 - functions Jam stack but you know perhaps
178:01 - we'll come to that at the end when we
178:03 - review about know whether everything we
178:05 - did was was Jam stack or not but for the
178:08 - moment let's let's let's write our
178:10 - service function I'm actually gonna
178:11 - cheat here and I'm just going to copy
178:13 - and paste in a function already written
178:17 - here we go now this is going to look
178:19 - very familiar
178:21 - first of all Axios we were using Axios
178:23 - at the very beginning when we started
178:25 - pulling in their whereabouts is it in
178:28 - our data in our news data here we are
178:31 - we're using Axios we're making this
178:33 - actually as request to some feed there
178:35 - we're gonna use the same thing here in
178:39 - our service function we can use Axios
178:41 - and then we'll make a request to it a
178:45 - few things that maybe look a little bit
178:47 - different to what we've seen before well
178:49 - well first of all we've got where it
178:50 - exporting this handler function and this
178:53 - is the function signature for a service
178:57 - function we're using this asynchronously
178:59 - because going to await the response from
179:01 - this this Axios get requests the weekend
179:05 - when we call a function this way we get
179:07 - access to things like the queries for
179:09 - doing parameters and we can set a
179:11 - callback and what-have-you so what we'll
179:13 - do here is we'll we'll construct our URL
179:16 - we'll we'll want to put our lat/long
179:19 - just as we were doing client-side in our
179:21 - javascript we're going to pass in our
179:23 - weather API key now once again as we did
179:27 - before when we were requesting our our
179:30 - news API we were using a an environment
179:34 - variable there we'll do exactly the same
179:36 - thing here as well
179:37 - so we'll pull out the lat/long from our
179:40 - query string parameters populate our URL
179:44 - and then we'll make a request to access
179:46 - to that URL using Axios await that
179:49 - response and where we get the response
179:51 - will proceed we'll send our response
179:55 - fire a callback in the body of our
179:57 - response sending our data back and we'll
180:00 - just stringify that so it comes back as
180:02 - a string response for the client to
180:05 - handle that's all there is happening
180:07 - here you know it's it's ten or twelve
180:09 - lines something like that when it's all
180:11 - all there and included we don't need to
180:15 - add another dependency because we're
180:18 - using a dependency that we already
180:19 - included in our package JSON and when we
180:23 - deploy this to net if identify will
180:25 - we'll kind of zip all of this this code
180:28 - up with any of the require
180:29 - that it might have any of its
180:31 - dependencies and deploy that all all for
180:33 - us but we need to tell it to do that and
180:37 - add another file in here called Fi
180:44 - and this is gonna have a few bits of
180:47 - configuration for us based on what we
180:50 - want that the fight to do when it
180:52 - deploys the site for us now here's a bit
180:55 - of boilerplate the time that I've
180:56 - already created so this is gonna happen
180:58 - at Build time you might recognize these
181:01 - from when we set up our site in the
181:03 - first place we told notify what command
181:05 - to run when we want to build and which
181:07 - directory to publish can actually pop
181:10 - that is this in here so we wouldn't need
181:11 - to populate that manually
181:14 - in fact what I'll do is I'll I'll add
181:15 - this to the code repository so if you're
181:17 - cloning this and getting a site running
181:19 - you won't need to populate this but what
181:21 - we also need to do is we need to tell
181:23 - that the Phi that's turnout Phi that
181:25 - we've got some functions that we'd like
181:27 - it to deploy for us as well and telnet
181:29 - if I where to find those and I put those
181:31 - in source and I used underscore so that
181:36 - lemon tea would ignore it and then
181:39 - functions
181:41 - that should I should do that I think
181:44 - okay so when we deploy that we're going
181:46 - to end up with a URL with weather API in
181:51 - the URL that we'll be able to to make
181:54 - our request there instead of instead of
181:58 - making our request directly to the open
182:02 - weather API so let's let's make a change
182:05 - there in fact we're not gonna need this
182:08 - but I will I'll capture that and I will
182:12 - add it to our dot in file so we got two
182:16 - two to use that at least keep track of
182:23 - it like this just to be good semi
182:32 - documentation and we'll want to change
182:37 - our client-side API okay so we can now
182:40 - be rid of that what's the URL that we're
182:43 - going to understand where we are let's
182:46 - do away with one of this so this is
182:50 - actually going to be relative to the the
182:52 - root of the site we're serving from and
182:54 - that if I has this little convention
182:56 - where any functions that you deploy live
183:02 - in a functions folder and then the file
183:05 - that we call it will become the name of
183:06 - the will become the path so we call that
183:09 - weather API so yep now we're still
183:13 - passing the lat/long through as we
183:15 - should but I think from here on in we
183:18 - won't need a skivvy units
183:23 - okay so we can stop this building for
183:26 - the moment so I think we should be in
183:32 - good shape there I don't think we're
183:33 - gonna need to change anything elsewhere
183:36 - we're now sending the the data to notify
183:39 - functions to get the response doing
183:42 - exactly the same thing with the response
183:43 - when we get it
183:45 - that's sir let's give this a shot this
183:47 - let's add all of our changes beta and
183:56 - API all of these things will push those
184:03 - and let's go and let's go and watch
184:05 - watch things happening at the build just
184:09 - refresh this okay so let's see how
184:13 - things a building should be able to see
184:16 - things like the the functions being
184:17 - packaged up in our API being created for
184:19 - us so it's getting its dependencies I am
184:30 - still caching as still logging out the
184:34 - the data as I said I'd remove it I will
184:36 - promise I'll do that in a second but
184:38 - we're only at the moment on your quest
184:40 - in a couple of different pages here we
184:42 - are so function directory found so it's
184:45 - found our functions directory and it's
184:47 - using a utility called zip it and ship
184:50 - it which packages up all its
184:52 - dependencies and creates the functions
184:53 - good that looks so let's go and preview
184:58 - our deployment and as our news pre pre
185:03 - generated in there oh and there's our
185:04 - there's our data now it did again it
185:08 - didn't ask me for permission full
185:10 - disclosure I tested early a little bit
185:12 - earlier on so we I've already granted
185:15 - the permission to to get location on
185:19 - this URL but this new deployment that
185:22 - seems to that seems to be working nicely
185:25 - you should just have a couple of pages
185:27 - let's make that change are just just for
185:30 - the sake of
185:31 - tidying up after ourselves I did say
185:35 - first of all yes replace all of those
185:42 - and where was that logging here we are
185:52 - take that a little bit of logging out
185:55 - that's just been pestering me this
185:57 - entire time
185:58 - okay now we'll commit that all pages
186:05 - push that to our repository which of
186:09 - course will trigger another deployment
186:11 - and we should be we should be just about
186:14 - done look at our deploys a new
186:20 - deployment running should be reasonably
186:24 - fast because we haven't got our cache -
186:26 - we have got our dependencies to install
186:28 - they're being cached it restored from
186:31 - the cache there we go all of our pages
186:38 - being made without all of that logging
186:40 - our function being packaged up and sent
186:42 - sent across to where it needs to go post
186:46 - processing finishing up let's go look at
186:49 - the side ok great
186:54 - so I should now be able to go to any one
186:56 - of these as got to the Italian page see
186:58 - the Italian Italian News weren't
187:02 - translate and even though we've got the
187:06 - little the Italian localized content
187:08 - we're getting the weather specific to me
187:10 - and you'll notice that this this
187:13 - headline this title wasn't presents
187:15 - until ever all of their the data was
187:17 - that ready to render let's look at it on
187:18 - another page if we can
187:20 - Canada oh it's happening very quickly so
187:23 - the URL is the data is being returned
187:26 - quite quickly now um there's just ugh
187:29 - just sent to check this the the code
187:32 - that is coming down the wire now we
187:36 - don't have we don't have any any secrets
187:38 - in here we're not sending any secrets
187:39 - down the wire and at the point that we
187:42 - we request the request the data if we
187:45 - look at the with the network requests
187:49 - happening
188:00 - yeah so here's our net worth will
188:02 - requests being made to our API our API
188:05 - being served by service function and
188:07 - there's no there are no secrets in here
188:11 - so this is this is safe now
188:14 - excellent we're in much better position
188:16 - so let's just review for a moment let's
188:23 - just think about what's what's happening
188:24 - happening now now we've got a site that
188:28 - we've built where we're pre generating a
188:30 - build time whole host of pages based on
188:34 - data that we're getting from a third
188:37 - party API we're baking out different
188:39 - pages for each of the different locales
188:41 - at at build time and we're populating
188:44 - those are all to a CDN then when a
188:47 - browser user comes along in their
188:48 - browser they're making a request for
188:50 - that that content they're getting the
188:51 - data back instantly and getting the the
188:54 - news information correct for their
188:56 - location because the CDN has decided
188:58 - which bit of content to send them which
189:02 - file to serve them back and then once
189:04 - they've got that we're using progressive
189:06 - enhancement with JavaScript to say does
189:09 - the browser have access to the ability
189:12 - to to look at location data and if it
189:14 - does
189:15 - request permission from the user to
189:17 - access that and once that is being
189:19 - granted make a request to another API
189:21 - which is actually going to a service
189:24 - function that we've created ourselves as
189:26 - a proxy still without any web servers
189:29 - involved returning that data and then
189:31 - enhancing the the view in the in the
189:34 - client with that data we're in a
189:36 - position that we're using server-side
189:38 - rendering for the meat of it but clients
189:40 - own rendering for some progressive
189:42 - enhancement and calling those different
189:44 - api's so where does that leave us you
189:48 - know in terms of Jam stack yes we're
189:50 - we're pre-rendering these files were
189:52 - serving them directly from a CDN and
189:55 - although we've got an API that we've now
189:57 - created ourselves granted it's just a
189:59 - proxy but it's still an API service that
190:01 - we're now maintaining as a function
190:03 - we're still doing that without having
190:05 - the requirement to run a web server so I
190:08 - think even with all of those things
190:10 - happening was that was that Jam stack
190:12 - well yeah
190:13 - absolutely it was um it's worth thinking
190:15 - I think for a moment about the kind of
190:18 - types that the kind of sites that could
190:20 - use this kind of in this kind of set up
190:22 - and this kind of flow you could well
190:25 - imagine that the kind of page that we're
190:28 - projecting with all of the the
190:30 - information that we know ahead of time
190:33 - could be things like product pages where
190:36 - we want to make sure that search engines
190:38 - can easily get to them very quickly get
190:40 - to the data very quickly and then we
190:42 - might be embellishing through
190:43 - client-side API is things like latest
190:46 - prices or stock levels or those sorts of
190:49 - things or even starting to add
190:52 - authentication for the user and a
190:54 - shopping basket all at this level but
190:56 - based on product pages which have been
190:58 - built out ahead of time our service
191:03 - functions Jam stack I think that sir may
191:06 - be debatable because if we look at this
191:09 - definition of jam stack this is talking
191:11 - about pre-rendering files and
191:12 - pre-rendering assets service functions
191:15 - aren't really pre rendering those are
191:17 - happening out request time but certainly
191:19 - they adhere to this part they don't mean
191:21 - that you have to introduce a web server
191:24 - or manager web server I'd maybe say that
191:26 - strictly speaking service functions
191:28 - aren't Jam stack but certainly there
191:31 - they are the jam stacks best friend and
191:33 - they are a big enabler for me or to
191:35 - build this this kind of architecture
191:37 - still being able to have API is that you
191:40 - you can create without needing to
191:42 - introduce servers and infrastructure and
191:44 - all those kind of things okay I think
191:46 - that wraps us up for this this example
191:50 - probably about time for a bit of a recap
191:54 - of what we've gone over so far so what
191:59 - what did we cover well let's let's look
192:01 - just for a minute just to just to the
192:02 - examples that we've we've created you
192:04 - know along the way what did we make
192:06 - we've evolved one one site from very
192:09 - humble beginnings just a simple static
192:11 - site just a single HTML file to begin
192:14 - with served as a static asset and indeed
192:16 - having a very static experience but
192:18 - we've we've evolved that so much further
192:20 - than having a static experience you know
192:22 - we started to use a small amount of
192:25 - JavaScript in the client to to
192:27 - and some content admittedly to start off
192:29 - with very very simplistic but
192:30 - manipulating the Dom with JavaScript
192:33 - aqua in the clients of client-side
192:35 - rendering in a very simplistic form all
192:38 - served as static assets though then we
192:41 - moved on to adding some templating in an
192:43 - abstraction with a static site generator
192:45 - so we were able to run a very similar
192:47 - mechanic mechanic at Build time to what
192:50 - a traditional website and web server
192:53 - environment would do per request but
192:55 - we're doing it for every every page
192:57 - every route at Build time thanks to this
192:59 - static site generator which allows us to
193:01 - apply templates to content which has
193:04 - been abstracted away to generate a site
193:06 - that we can place at a CDN for very very
193:09 - efficient web hosting and we moved on to
193:13 - having content which we source from an
193:15 - API rather than just as part of the code
193:17 - base so that at Build time we could make
193:19 - a request to a content API pull that
193:21 - content in and populate a page again
193:24 - applying that to our templating so that
193:26 - we could generate as many pages as we
193:28 - needed from the source of content that
193:31 - we had as an external API from there we
193:34 - we moved on a bit further having
193:36 - localized content all again rendered at
193:39 - Build time so that we could generate a
193:40 - pool of of resources each one localized
193:44 - potentially in future internationalized
193:46 - for the different languages different
193:48 - locales that might come to visit the
193:50 - site deploying that to a CDN and then
193:52 - letting the CDN apply the logic of which
193:54 - file gets served to which user based on
193:57 - their conditions whether there have
194:00 - their languages set to a certain
194:01 - language or if they've got if they're
194:03 - arriving at the site from a particular
194:05 - place in the world and then finally we
194:07 - added more client-side rendering and
194:10 - started to target the content to the
194:12 - user based on a query to the browser
194:16 - api's and then to content api's that
194:18 - were third-party content api's these
194:20 - things happening at request time
194:22 - client-side has a progressive
194:24 - enhancement to the key content that we
194:28 - pre-rendered ahead of time and served up
194:30 - as a localized set of content so who
194:33 - travelled a long long way Hoover over
194:35 - the course of these six examples the
194:37 - site we've built looks very visually
194:40 - simplistic but
194:41 - it starts to demonstrate the different
194:43 - aspects of an architecture that can be
194:46 - driven with a jam stack site and it
194:49 - shows us the different forms of
194:50 - rendering and serving things that we
194:52 - could have you know with we've seen that
194:54 - a jam stack site yes is made up of
194:57 - JavaScript API is a markup but not all
194:59 - of them need to be present in order for
195:01 - a site to be Jam stack the key isn't in
195:04 - having all of things these things there
195:05 - this really describes kind of the enable
195:08 - as the letters move from a static
195:11 - experience to something way way more
195:13 - dynamic the thing that all of these
195:16 - sites have got in common is that yes
195:18 - they're they're created to be fast and
195:19 - secure sites but they're they're
195:21 - delivered by pre rendering the files
195:23 - ahead of time so that we can serve them
195:25 - directly from a CDN perhaps with a tiny
195:28 - bit of intelligence and logic there to
195:29 - elevate them even further but critically
195:32 - we don't have to have a web server we've
195:35 - removed the requirement to manage a web
195:37 - server of our own so that we've just got
195:40 - a far simpler hosting environment and a
195:42 - far simpler deployment experience and
195:45 - development experience which all really
195:47 - should be in the betterment of a good
195:48 - user experience we've created an
195:50 - environment which is far easier to
195:52 - reason about you know our deployment
195:54 - process is coupled to our version
195:56 - control and our process of building
195:58 - things rather than coupled to the
196:00 - complex infrastructure needs there
196:02 - underlie the system this kind of
196:05 - environment and this kind of flow is far
196:08 - easier to reason about I'd argue and
196:10 - when really work where with concerning
196:13 - ourselves with for the most part is how
196:15 - we build how we generate these pages so
196:17 - that they can they can deliver exactly
196:20 - the experience we need in the browser
196:21 - you know there's so much craft these
196:23 - days in front-end development that it's
196:25 - nice to concentrate our effort on
196:27 - building out the the site and the code
196:30 - for the site that lives in the browser
196:31 - without having to worry about how it
196:33 - spans lots of different complex
196:35 - infrastructure and has to be hosted
196:37 - across these different assets and and
196:39 - pieces of the hosting infrastructure
196:41 - everything is built and pushed to the
196:43 - CDN so that we can we can evolve that
196:45 - and use our version control all the way
196:47 - through to the CDN and our hosting
196:49 - environment we can still be building
196:51 - api's and we can have
196:53 - third party api's or in-house api's
196:56 - api's that we're using but the beauty is
196:58 - that these are decoupled these are no
197:00 - longer part of the same monolithic in
197:02 - infrastructure so now we can have teams
197:05 - building out our api's that are purely
197:07 - building out our special source our
197:09 - services that make our make our product
197:12 - and our applications distinct from from
197:14 - our competitors that can be decoupled
197:17 - from the experience that we're building
197:18 - in the front end so that we can have
197:20 - different teams building to their
197:21 - specialisms and evolving the the site
197:24 - along the way kind of key enablers that
197:27 - we've talked about along the way I just
197:29 - want to reiterate again the kind of
197:31 - automation the tools and services and
197:33 - this blossoming API economy really
197:36 - elevate things from where we used to be
197:38 - you know this is this is a really kind
197:40 - of blossoming world at the moment and
197:41 - you know this kind of growing ecosystem
197:43 - moves us so much beyond static that's
197:46 - why this word static just doesn't it
197:47 - doesn't cut it anymore we're benefiting
197:50 - from being able to generate static
197:52 - resources that we can then host in the
197:54 - most efficient way with the experiences
197:56 - we're making us so much more than static
197:58 - these days this economy is just
198:01 - exploding you know the the jumpstart
198:04 - ecosystem this is a visualization put
198:07 - together by redpoint some some time ago
198:09 - in fact the world is even bigger and
198:11 - more and more interesting now than it
198:12 - was when this was created but you know
198:15 - we've got we're already building whether
198:17 - we're on a traditional stack or on the
198:19 - lamp stack using some of these tools and
198:22 - and build mechanics to generate front
198:24 - ends but now we can use these you know
198:27 - uninhibited by the ecosystems a bit by
198:29 - the infrastructure and the development
198:31 - environment we can we can really take
198:33 - ownership of that development
198:34 - environment and use this kind of
198:35 - decoupling of the different services
198:38 - that we're using api's for this kind of
198:41 - huge amount of headless CMS's that are
198:43 - that are just thriving now that we're
198:46 - seeing that the move towards headless
198:48 - decoupled services and there's so many
198:50 - utilities that we can make use of
198:52 - whether that's for search or
198:54 - authentication or things like comments
198:56 - or form backends or communications or
199:02 - e-commerce the it's just really
199:05 - blossoming and there
199:06 - all of these services where companies
199:08 - are specializing in very complex
199:11 - involved difficult to build services so
199:15 - you can just get all of their wisdom and
199:16 - all of their services out sourced and
199:19 - available right into your application
199:20 - there are so many hosting environments
199:22 - and CDNs that are there for us to start
199:25 - to make use of built with the use of
199:28 - version control and the different
199:30 - services there that we can leverage all
199:32 - on top of there's this cloud
199:34 - infrastructure and this this huge kind
199:37 - of opportunity for building on top of
199:39 - virtualized infrastructure that that can
199:42 - get abstracted away as well so the whole
199:44 - the whole ecosystem is really thriving
199:47 - and it's getting getting quite exciting
199:48 - and the difficult thing might be is to
199:51 - think about well how do we how do we get
199:53 - there how do we even start
199:55 - yes we've worked through some some
199:58 - simple examples and we can see that
199:59 - building this out can be can be
200:01 - logically simple but you know what if
200:04 - we're already in a situation where we
200:05 - have a lot of infrastructure already how
200:08 - do we move from a big monolithic
200:10 - architecture across to starting to use
200:13 - the jam stack well I just want to want
200:15 - to close by by making the point that we
200:17 - we don't need to do everything at once
200:19 - we don't need to boil the ocean if we've
200:22 - invested years and years of work and
200:24 - lots of money on some infrastructure
200:26 - which is which is already in place but
200:28 - we want to start to take advantage of
200:31 - the jam stack and move things across we
200:33 - don't have to do a bulk move across of
200:36 - everything at once and I want to
200:37 - demonstrate that just briefly as a final
200:39 - kind of demo just by looking at an
200:42 - example now this is CSS tricks this is
200:44 - one of my favorite resources on the web
200:45 - it's an incredible set of articles of
200:49 - resources to learn about web development
200:52 - you may well have come across it and
200:53 - this is a wordpress site and it's it's
200:58 - fantastic I really am a big fan of it
201:00 - the CSS tricks already has started to
201:05 - build one or two resources with the jam
201:07 - stack this is a site about web
201:10 - development and design conferences it's
201:14 - a set of resources managed as an open
201:16 - source repository on the github site
201:19 - it lives on its own subdomains so it's
201:21 - kind of abstracted away from the main
201:23 - WordPress WordPress site and
201:26 - interestingly its it's using the same
201:29 - the same static site generator that
201:32 - we've been using in our demos and it's
201:34 - served from in this case it's actually
201:38 - so from meta Phi's hosting environment
201:41 - I've got a little extension here that
201:42 - shows me when something's served from
201:44 - that environment so this is a
201:45 - pre-rendered jam stack site that it's
201:49 - very happily on its own subdomain next
201:51 - to CSS tricks main site this is a very
201:54 - common approach when you want to start
201:55 - to introduce some aspects of your site
201:58 - that lend themselves well to being pre
202:00 - generated when this is a great example
202:02 - of that but should we want to actually
202:04 - start and I'm not suggesting that CSS
202:07 - tricks are on this path but let's just
202:08 - use this as a as a prominent large
202:11 - wordpress example if we wanted to start
202:14 - to introduce parts of this site that
202:16 - we're served instead of from WordPress
202:18 - or some other legacy infrastructure big
202:22 - monolithic infrastructure perhaps how
202:24 - might we start going about doing that
202:26 - well I want to show you a little demo
202:28 - well where I'll I'll build out a version
202:31 - of this where I'm just going to start to
202:33 - take over certain parts of the site and
202:36 - we've done we've already actually looked
202:40 - at some of the mechanics that we'll need
202:41 - to do this I've created this this tiny
202:43 - little example demo site and I'm gonna
202:47 - use this as a source of of what we're
202:48 - gonna demonstrate just as this little
202:50 - file demo and what we're going to do I
202:53 - mean you can see the only resources that
202:55 - are in this site which we're going to
202:56 - clone and create as a new site of our
202:57 - own in just a second and there's only
202:59 - two assets there's the readme which is
203:01 - just just for here so we get a little
203:03 - button to make it easier to deploy and a
203:05 - redirects file and we've seen one of
203:07 - those already we were generating that
203:08 - ourselves with our build
203:10 - now this redirects file only has one
203:12 - entry in it um something I perhaps
203:15 - should have mentioned sooner while
203:16 - talking about redirects is unless you
203:18 - force these rules to happen they will
203:21 - only occur if the route that we're
203:23 - looking for doesn't resolve to a
203:26 - resource a statically built out resource
203:28 - so we can force that by just using an
203:30 - exclamation mark adding
203:31 - bang to the rule but otherwise a static
203:35 - asset will take precedence but in this
203:37 - case we know we don't have anything else
203:39 - in the site at all is just you know
203:42 - there is no HTML that's just our
203:44 - redirects and the redirects says unless
203:47 - there's a static asset to satisfy the
203:49 - request all requests from the from the
203:52 - root will be rewritten we'll use a proxy
203:55 - to rewrite any one of those who require
203:57 - requests to this destination it will go
204:00 - to the CSS tricks existing site and then
204:02 - we'll use this splat to take whatever
204:04 - the wild carded request was and pass
204:07 - that through that's all that we're doing
204:09 - so let's let's actually let's just make
204:13 - it let's make a new site from this so
204:15 - doing what we've what I've been doing
204:18 - behind the scenes many times before
204:19 - during these demos just creating a new
204:20 - site I'm gonna cool that free code camp
204:26 - proxy demo just for the sake of having a
204:30 - repository name that we can we can
204:32 - identify so this is now cloning that
204:34 - little example repo into a new repo that
204:38 - I can then make some changes to as well
204:42 - okay so that cloning is done and now
204:44 - it'll kick off a deployment this
204:47 - deployment should happen pretty pretty
204:49 - rapidly because there are no assets to
204:51 - deploy to a CDN all it's doing is adding
204:53 - this one redirects rule so let's let's
204:58 - take a look at what that looks like if
205:00 - we go to our site now well it looks
205:02 - exactly like the existing infrastructure
205:05 - it looks so exactly like CSS tricks this
205:07 - request has gone via neckla Phi it's
205:09 - gone via the CDN that we've we've
205:12 - configured and all of the pages being
205:14 - served from our new site from this this
205:16 - new this new domain that we've created
205:20 - this subdomain of course we could have
205:22 - this as a as a custom domain as well all
205:24 - of the all of the resources all of the
205:26 - pages all of the assets are being served
205:29 - in exactly the same way but we don't we
205:32 - don't currently have any any any code of
205:34 - our own that we're serving so let's
205:36 - change that let's let's perhaps take
205:38 - over this home page and start to make
205:40 - changes an example what I'm going to do
205:42 - I'm just going to steal it
205:45 - let's just do a view source on the page
205:48 - and we'll copy all of that and perhaps
205:52 - we'll change this this headline so let's
205:55 - go back to let's go back to to our
206:00 - repository about repository so this is
206:02 - our new repository that we created it's
206:04 - just a clone of the one that was there
206:07 - before but now let's let's create a new
206:09 - file let's start to build build out a
206:11 - file
206:12 - well now we're not having any complex
206:15 - build infrastructure here we just we're
206:16 - manually creating a file here we are so
206:27 - why don't we change why do we just
206:30 - change something so that we can see
206:31 - we're serving our own site free code
206:36 - camp demos go ok and now we'll we'll
206:44 - save this by committing this new file
206:48 - there we are we've so now our site has
206:51 - this now we might be building this out
206:53 - with a much more complex build or you
206:56 - know something similar to what we had
206:58 - before but for the moment just have this
206:59 - one this one index file and if we go
207:02 - back across to our new site we should
207:04 - see if I just refresh the deploys page
207:06 - we should see ok we've got a new a new
207:09 - deploy that's been done we've uploaded
207:12 - one new file so now when we go to the
207:14 - site our home page should be ok so we've
207:17 - we've taken over this home page now so
207:19 - now we're serving this page with our new
207:23 - index.html file this this resource was
207:27 - was a hit when we went to our CDN and
207:29 - the traffic went there all of the assets
207:31 - that are on here is still being served
207:33 - in the same places all of the following
207:35 - pages are still served from the payment
207:37 - the same places those aren't a hit on
207:39 - our CDN so those are being proxied
207:41 - through so you can start to start to see
207:44 - start to imagine that just with adding
207:47 - things like redirect rules so that you
207:49 - can decide where you route your traffic
207:51 - to you can start introducing layers of
207:54 - jam stack sites in front of your
207:57 - existing infrastructure
207:58 - really really quickly I think that's
208:00 - incredibly powerful and it kind of shows
208:02 - that you know we don't need to try to
208:04 - boil the ocean the first step doesn't
208:06 - need to be a giant leap we can gradually
208:08 - introduce jam stack sites alongside our
208:12 - our existing infrastructure and that's
208:14 - incredibly liberating when we're
208:15 - starting to look at either the move from
208:18 - one bit of infrastructure to another or
208:20 - introducing a new model I'm really
208:23 - excited about the prospects of building
208:25 - things ahead of time and letting the CDN
208:28 - manage the manage the serving of those
208:31 - for me in a way that I don't have to
208:33 - manage so I think let's just leave with
208:36 - with a link a bunch of resources you've
208:40 - you've been through now all of these six
208:42 - examples each of these examples has its
208:45 - own repository that you can inspect look
208:48 - at you can clone you can deploy yourself
208:51 - so you can experiment with it as well
208:52 - and those all live at find that out Jam
208:54 - stack x1 through to x6
208:57 - there's also a link for free code camp
209:00 - find that jump stack FCC which is a set
209:03 - of links to all of these resources and a
209:04 - few other bits and pieces along
209:05 - alongside you might also be interested
209:08 - in seeing that there's a book about Jam
209:11 - stack so myself and one of the
209:15 - co-founders that notify have written a
209:17 - book about web development on the jam
209:20 - stack and you can find that out jumps
209:22 - back book and finally you know if you
209:25 - want to ask more questions and get in
209:28 - touch with people who are building
209:29 - things with the jam stack now talking
209:31 - about Jam stack and all things to do
209:33 - with this new way of leveraging the jam
209:37 - stack ecosystem discovering API is
209:39 - learning about all the different systems
209:40 - and bringing that all together there is
209:42 - a slack as well as an open slack where
209:44 - you can join the conversations find out
209:47 - things about things like the Jam stack
209:48 - conference and and different meetups
209:50 - that's find that at Jam stack slack so
209:53 - these are all good resources to take a
209:56 - note of the one in particular is the
209:58 - four slash FCC or you'll also find all
210:01 - of these other links and what-have-you
210:05 - so that's it I hope that was useful
210:07 - those links are all there ready for you
210:10 - to explore so if you want to go and
210:12 - experiment with any of the the
210:14 - demonstrations that are there you can
210:16 - clone those repositories deploy them for
210:18 - yourselves start tinkering with the code
210:20 - and exploring how to use those and also
210:23 - please do come and join us in the jam
210:25 - stack slack there's lots of good
210:26 - conversation in there links were with
210:29 - we're there on the screen a moment to go
210:30 - and you can find a link to all of these
210:33 - things to find that at Jam stack slash
210:36 - FCC so that's all thanks for watching
210:49 - you