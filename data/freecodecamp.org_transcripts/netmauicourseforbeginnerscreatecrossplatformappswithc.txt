00:00 - learn a native cross-platform desktop
00:02 - and mobile development with.net Maui
00:05 - join senior software developer and
00:07 - expert course creator Frank Leo as he
00:10 - takes you on a fast-paced journey
00:12 - through the fundamentalsof.net Maui in
00:15 - this exciting course Frank will guide
00:16 - you through the essentials of building
00:18 - mobile applications with net Maui while
00:21 - creating a contacts app you'll learn all
00:24 - the key Concepts and techniques you need
00:26 - to get started with this powerful
00:27 - platform so whether you're a senior
00:30 - developer looking to explore a new
00:32 - technology or a newcomer to.net Maui
00:35 - this course is the perfect jumping off
00:37 - point for your journey welcome to this
00:40 - course where are you going to learn
00:41 - about.net Maui while creating a context
00:44 - application in Dona 7. now let's take a
00:46 - look at the mobile application that we
00:48 - are going to create this is a context
00:51 - application
00:52 - we can add a contact enter the name
00:54 - email phone number and so on we can also
00:58 - delete the contact we can edit contact
01:02 - update it and also we can search
01:04 - contacts
01:06 - and you can see that we actually have
01:09 - field validation functionalities so this
01:11 - is not just a crowd application what
01:14 - is.net mode
01:15 - and what is difference between Dane Maui
01:18 - and darmin Forbes
01:20 - so if we look at this dynamite
01:23 - documentation from Microsoft you can see
01:26 - that it's basically allows you to create
01:29 - one code base but Target different type
01:33 - of platforms so in most cases you don't
01:36 - have to write different codes for
01:38 - different platforms
01:40 - you only need to write your code in one
01:42 - place and that one place can be deployed
01:45 - to different platforms you don't have to
01:48 - make specific changes for the specific
01:51 - Target platform
01:53 - but isn't that the same as subwin forms
01:56 - no it's not really the same
01:59 - once you create the donai Maui project
02:02 - you see in Visual Studio there's only
02:04 - one project that one project allows you
02:06 - to Target different platforms
02:09 - whereas in xamarin forms okay so this is
02:12 - the xamarin forms documentation from
02:13 - Microsoft you can see that for different
02:17 - platforms right this is for Android and
02:20 - this is for iOS
02:21 - researchers examples
02:24 - you have different projects
02:26 - right so there's there's going to be one
02:28 - project for Android and then another
02:30 - project for iOS and there could be other
02:34 - projects for Windows phones uwps but
02:38 - xamarin forms also has a shared code
02:41 - base here right that is itself another
02:45 - project
02:46 - okay so when you create xamarin forms
02:48 - application you will see different
02:49 - projects right many projects one of them
02:52 - is the most important one which is this
02:55 - shared application code it contains all
02:57 - of the logic and it forms but then you
03:00 - will see also another project for
03:03 - Android another project for iOS another
03:04 - project for uwp another project for
03:07 - Windows Phone for example so they're
03:10 - kind of similar but very different right
03:12 - practically very different so let's
03:15 - actually take a look at the uh in the
03:17 - major Studio how it looks like this is
03:19 - uh xamarin forms Hollow World
03:21 - application right you can see that it
03:23 - contains many many projects right and
03:27 - this the first one the portable one this
03:29 - is the uh project that contains the
03:33 - shared application code right most of
03:35 - your logic most of your activities your
03:38 - coding activities will go here right and
03:41 - then you have different projects you
03:43 - have to run them differently if you want
03:45 - to Target Android you know you set this
03:47 - one this project as the startup project
03:50 - right and then you run the application
03:52 - from here right if you want to Target
03:55 - iOS then you have to set iOS project
03:58 - that's the startup project and then you
04:00 - start your project from there here's the
04:03 - dynamoy application
04:05 - you only actually
04:07 - have one project and this one project
04:10 - allows you to Target different platforms
04:12 - so practically they're very very
04:15 - different
04:16 - okay so this is what I want to point out
04:19 - in this video
04:20 - and starting from next one we're going
04:23 - to set up the visual studio environment
04:24 - in order to allow us to create the
04:27 - Dynamo application
04:31 - in this video we're gonna try to go
04:32 - through the steps of setting up the
04:34 - environment in Visual Studio 2022 in
04:38 - order to make your video Studio ready
04:40 - for creating dynamoe applications right
04:44 - so this is the video Studio installer
04:46 - right you can find it in the search area
04:48 - once you find it go to your video Studio
04:51 - 2022 right in my case I have the
04:54 - Community Edition for 2022. once you
04:58 - update to the latest click on the modify
05:00 - button and then you will need to find
05:03 - the desktop and mobile application part
05:06 - right this part and it says.net
05:08 - multi-platform application UI
05:10 - development and you need to check it and
05:13 - then you just need to install it right
05:15 - in my case I have already done it and
05:18 - once you've done it you will be able to
05:21 - create a dynamite application
05:25 - so once you updated your video Studio
05:27 - 2022 and then you install.net Molly now
05:31 - you can create the project right so
05:33 - let's go through the process creating a
05:35 - new project
05:36 - and then these are my recent project
05:39 - templates but if you just installed
05:42 - online Maui for the first time then you
05:45 - wouldn't be able to see these so what
05:47 - you can do is you can go to the search
05:48 - bar and then you can type money
05:51 - and then you'll be able to see a list of
05:53 - applications we're going to select the
05:55 - first one which is a.net Maui app right
05:58 - and then click on the next one and we
06:01 - are going to name the solution contacts
06:03 - because we're going to create a contacts
06:06 - application and I like to name the
06:09 - solution after the purpose of the
06:11 - application so in this case it's a
06:14 - contacts app so I'm just going to call
06:16 - it contacts and then the project I'm
06:18 - going to have the purpose and then the
06:22 - type of project in this case it's a Maui
06:25 - app and then I'm going to click on the
06:27 - next one
06:29 - I'm going to select.net 7 I'm going to
06:32 - click on create here you have it this is
06:35 - the only project you see in this
06:38 - solution right for now later we're going
06:41 - to add different projects which mainly a
06:44 - dynamoe class libraries to support us to
06:48 - create applications in different layers
06:51 - right we can't just put everything in
06:53 - one project no companies does that so
06:56 - you will have to learn to separate
06:59 - different things in different layers
07:02 - which will reside in different projects
07:05 - different class libraries
07:07 - so in this case uh what you can do is
07:12 - first you can run it in Windows machine
07:14 - right but in this course we're gonna
07:16 - mainly Target Android but if you do
07:19 - prefer to run it in Windows then you may
07:22 - encounter kind of like a error like this
07:26 - right so it says Windows Defender
07:29 - Firewall blocked the broker.ex so you
07:33 - will need to allow access right you need
07:36 - to collect click on the allow access in
07:39 - order to be able to deploy your
07:42 - application to Windows environment very
07:44 - likely it will prompt you to say that
07:46 - you know you have to enable developer
07:48 - mode for Windows right and then you just
07:52 - click on the settings for developers
07:53 - right you will see the screen and then
07:55 - you just click on this button to turn on
07:57 - the developer mode this will enable you
08:00 - to deploy and run applications in
08:03 - Windows mode that's how you set tap the
08:06 - environment for Windows machine but what
08:09 - I would try to do is to go to the
08:12 - Android device manager
08:17 - right and then you will need to add a
08:19 - emulator in my case I'm using pixel 5.
08:24 - by API 3031 you just need to install the
08:27 - same thing you can you can use different
08:30 - mobile phone emulators
08:33 - but I chose this one and it's possible
08:37 - that you will have to turn on hyper-v
08:40 - right in order to accelerate the
08:43 - emulator so that it runs faster
08:46 - okay so this is the uh the options that
08:49 - you need to choose when you go to
08:51 - Windows features you turn on these
08:53 - features in order to enable typer V to
08:56 - accelerate your Android emulator
08:59 - so once you're all done then you would
09:02 - be able to
09:04 - go to Android emulator and then you can
09:07 - change this to Target you are selected
09:09 - Android mobile emulator
09:12 - right so in this case if we run the
09:14 - application
09:16 - it's going to take a while for the first
09:19 - time and then it will be way faster
09:22 - because after build it will identify the
09:25 - differences between the this build and
09:26 - next build and it will only deploy the
09:28 - differences instead instead of the whole
09:30 - thing right for the first time it's
09:32 - going to compile and then it's going to
09:34 - deploy everything into the uh the
09:38 - emulator that's going to take a few
09:41 - minutes depending on how fast your
09:43 - machine runs
09:44 - you know finally it deploys to the
09:47 - application and next time it's going to
09:48 - take shorter time but you can see that
09:50 - the application is deployed to my pixel
09:54 - 5 emulator and then everything runs
09:57 - you know normally and in the next video
10:00 - we're gonna go inside the solution of
10:03 - individual studio and see the project
10:05 - structure
10:07 - in this video let's take a look at the
10:10 - project structure of a donut my
10:12 - application okay so this is the
10:14 - application that we just created when
10:16 - you look at this application it seems
10:18 - like my program.cs is the start point of
10:23 - the application right and it does look
10:25 - like it's trying to create an app but
10:28 - let's think about this this application
10:31 - can be deployed to different devices
10:33 - different type of devices includes
10:36 - Android iOS and whatnot
10:39 - so how can this one program.cs be used
10:43 - in different platforms they must have
10:46 - their specific way to launch a
10:50 - application right so this is not
10:53 - actually the starting point the starting
10:55 - point is in the platforms folder so if
10:58 - you look at the Android folder you would
11:00 - have a main application.cs and then you
11:03 - can see that the main application.cs
11:06 - actually uses the my program
11:09 - so if we right click and go to
11:12 - definition we can see that this goes
11:14 - back to the Maui program.cis file and
11:17 - this is the create Maui app static
11:20 - method okay static function let's go
11:23 - back and take a look at iOS right OS is
11:27 - a different way to launch the app that's
11:31 - a main app uh but then it uses the app
11:34 - delegate and if you go into the app
11:37 - delegate
11:38 - a similar way of launching the program
11:41 - is being used
11:44 - right you can see that it also caused
11:46 - the same static method
11:48 - of course if you go into other devices
11:51 - where this one would be similar to iOS
11:54 - it uses the app delegate and then when
11:57 - you go to app delegate it uses the
11:59 - method right you can see that every
12:02 - single platform points to this my
12:05 - program.cs so our work
12:08 - mostly are not in here okay so we can
12:11 - just uh kind of ignore this for now
12:14 - right so if you have any uh specific
12:18 - platform code that you want to write
12:19 - then you can go over here but in
12:22 - Dynamite you don't usually encounter
12:24 - that situation very often so most of
12:27 - your code starting up code will be here
12:30 - and mainly about dependency injection
12:33 - which we'll cover later
12:35 - practically everything would be starting
12:37 - from here right we don't have to worry
12:39 - about the platforms further practically
12:41 - everything starts from this static
12:44 - method which will be invoked from
12:47 - different platforms
12:50 - right it starts from here and then you
12:52 - can see that it's trying to create a
12:54 - application I've done in my application
12:56 - right so we can go to this app this is
13:00 - the next place where we need to look at
13:03 - right so this app from the front end
13:06 - which is the demo and it doesn't have
13:09 - much it has a bunch of resources we
13:12 - don't have to focus on but let's go back
13:14 - we can see that it has a main page right
13:18 - every single dynamoy application has a
13:22 - main page and and it's just similar to
13:25 - xamarin forms it has a main page but we
13:28 - have a special type of main page
13:31 - which is called appshop so for donating
13:34 - a shell application is created by
13:37 - default right which uses this shell page
13:40 - you don't have to do it this way
13:43 - but this is provided to you as a default
13:46 - option which I I actually like it very
13:49 - much the shell becomes the main page and
13:52 - when you go to the Shell you can see it
13:55 - has the shell content
13:57 - right and then when you go go to the
13:59 - back end and there's nothing on it so
14:03 - the show itself is a opinionated way for
14:07 - organizing all of your pages
14:09 - in this case it points to the main page
14:13 - route to the main page which is just
14:16 - just a page you don't have to call it
14:18 - main page it's just a page
14:21 - one thing may be confusing and you have
14:24 - to understand that this main page
14:27 - is just referring to this one main page
14:30 - right this main page and then if you go
14:34 - to the code behind you can see that this
14:36 - main page is a Content page right the
14:39 - type is content page
14:42 - whereas if you go to the app go behind
14:45 - here this main page is the applications
14:48 - main page
14:50 - right it's a member of the application
14:55 - and the type of that is a page
14:59 - they are completely different object
15:02 - objects
15:05 - they are completely different objects
15:08 - so don't get confused this main page is
15:12 - not referring to this main page
15:15 - so we have IOS
15:18 - we have Android and we have Windows for
15:21 - example
15:23 - and of course we can have more but
15:26 - everything actually goes into this my
15:28 - program.cs
15:30 - we don't have to even worry about the
15:33 - the different platforms but kind of
15:36 - ignore this layer what really matters is
15:38 - that our Codes start from Maui
15:40 - program.cs
15:42 - and then this goes to app this app
15:46 - represents our application and every
15:49 - application needs to have a main page
15:51 - and in donat Maui the default main page
15:55 - is the shell page which is the app shell
15:59 - you don't have to do it this way but
16:02 - this is the default
16:04 - structure that is provided what's this
16:06 - app shell
16:07 - it organizes all of the other Pages for
16:11 - example we may have page one page two
16:15 - page three page four and no matter what
16:20 - type of hierarchy you actually have
16:22 - let's for example page one has
16:26 - two child Pages like two children and
16:29 - page two and page one are on the same
16:31 - level each single one of these pages
16:34 - will need to register
16:36 - to app Shell at least for routing
16:40 - purpose so this is the project structure
16:43 - of the.net Maui application that is
16:46 - provided out of the box
16:48 - again app shell and the way that it
16:51 - organizes the pages is a opinionated way
16:54 - for organizing the application and all
16:58 - of the pages you don't have to do it
16:59 - this way you can create your own page
17:02 - and make that page as the main page but
17:05 - in this course we are going to utilize
17:08 - the different functionalities that is
17:11 - provided by a shell page so let's look
17:14 - at the documentation from Microsoft
17:16 - right a shell page provides four
17:19 - different features right fundamental
17:21 - features but for me
17:23 - and mainly focus on this one
17:26 - right because the other three different
17:28 - features there are kind of implemented
17:31 - through this fly out and tabs
17:34 - right this this is the fly out and then
17:36 - you have different tabs and then you
17:37 - have your search bar here if you don't
17:40 - like this kind of UI structure you can
17:42 - still use shop application for at least
17:46 - registering different routes for
17:48 - different pages and then navigate to
17:52 - those pages with the URL based
17:54 - navigation scheme which we'll cover
17:56 - later okay so this is everything for
17:59 - this video the project structure of
18:02 - a.net my application
18:04 - I'll see you in the next one
18:08 - application is a stateful application
18:11 - that has a user interface what is a
18:14 - stateful application it just means that
18:16 - it needs to maintain a state in a state
18:19 - it just represents the data right it's
18:22 - just the data so in this type of
18:24 - application we have three basic elements
18:28 - that all developers need to deal with
18:30 - while we are creating the application so
18:33 - of course the first one is the state
18:35 - which is the data and then the view
18:38 - which represents the user interface the
18:41 - state will need to be displayed in The
18:44 - View let's put a user here and then user
18:47 - will then interact with the view and
18:50 - then that generates the events and then
18:52 - developers will handle the event
18:55 - which will in turn change the state and
18:58 - then this cycle goes on which means when
19:02 - the data is changed the view gets
19:04 - updated again
19:06 - and then the user plays with the user
19:09 - interface and triggers the event and
19:12 - then the state is updated again
19:16 - so Seiko goes on and on okay let's take
19:19 - a look at the application ourselves and
19:21 - see where are these three different
19:23 - elements in the main page so this is the
19:27 - main page we can see that we have this
19:30 - data here right which is the state and
19:33 - then the state is not initially
19:36 - displayed on the user interface where's
19:40 - the user interface it's represented by
19:42 - the xaml file so this is the xaml file
19:45 - we have this initial state that is not
19:49 - actually displayed here it just says
19:51 - click me
19:53 - right once the user clicks on the button
19:56 - which triggers the event then the events
19:59 - is handled by this uncounter clicked
20:02 - event handler
20:04 - then the state is changed and the state
20:08 - is manually assigned to the text
20:10 - property of the button so that displays
20:14 - the state on the user interface and
20:17 - completes the cycle right and the user
20:19 - can choose to interact with the user
20:22 - interface which means that the user can
20:25 - click on the button again and then this
20:27 - whole cycle goes on and on
20:29 - but this particular way of handling the
20:32 - events is called event driven
20:34 - development
20:35 - whereas in dollar Maui we have another
20:38 - way which is mvvm
20:40 - these two different ways handles all
20:43 - three different aspects of a development
20:46 - cycle right the state The View and the
20:50 - event handling in this particular case
20:52 - the event driven mode each event will
20:55 - have an event handler in the code behind
20:57 - of the user interface okay so this is
21:00 - the code behind and this is the user
21:02 - interface file right the event handlers
21:04 - are all in here and then we just make
21:07 - the logic Happening Here in the manually
21:09 - update the user interface
21:12 - mvvm will be covered later which is more
21:16 - organized but I just want to cover all
21:20 - these three different elements today so
21:23 - that we have a a map for our learning
21:27 - process
21:30 - in the previous video we talked about
21:31 - the download Maui application has three
21:34 - Essential Elements and in this video
21:36 - let's focus our attention on The View
21:39 - which is the UI element so a dynami
21:41 - application may have different pages in
21:44 - this video let's focus our rotation on a
21:47 - page right what is really on a page so
21:50 - let's take a look at this main page
21:52 - we have the Zumo bio and azamo.cs file
21:57 - the demo file represents the UI and the
22:02 - zamod.cs file is the code behind which
22:05 - provides logic and feeds data to be
22:08 - presented in the UI focus our attention
22:11 - on the UI part we can see that it's a
22:15 - page it's a Content page right
22:16 - essentially it's just a page
22:19 - so what is a page
22:21 - application may have different pages
22:23 - it's basically just referring to that
22:25 - area that occupies the whole user
22:28 - interface so this is a page and then
22:31 - inside the page there could be different
22:33 - UI elements like buttons images list
22:38 - views and whatnot
22:40 - so if we put them in a diagram to
22:42 - express this more clearly we have a page
22:45 - right and then the inside page we may
22:48 - have different UI elements
22:51 - under other development Frameworks like
22:53 - web development Frameworks
22:55 - we call this UI elements controls
22:59 - right but inside.net Maui we call this
23:03 - UI elements views this view is different
23:06 - from what we mentioned last time
23:09 - this View and last time the diagram is a
23:14 - generic term that refers to UI
23:16 - here these elements are called views
23:20 - each one of them is a view this is
23:23 - specific to the night Maui therefore in
23:26 - Donna Maui we have a page and inside the
23:30 - page we can have one or more views
23:34 - however if you put these views directly
23:37 - under a page you will get a error right
23:42 - for example we come over here we look at
23:46 - our main page we can see we have image
23:49 - we have labels right we have buttons
23:53 - these views the each one of them is a
23:56 - view is actually under a layout well
24:00 - this scroll view is also a layout the
24:02 - layout is directly under a page so
24:06 - therefore we cannot put multiple view
24:09 - views under a page we have to put them
24:13 - under a layout and then put that layout
24:15 - under a page in this case it's scroll
24:18 - View and then inside the scroll view it
24:21 - has another layout right it doesn't have
24:23 - to have another layout but in this case
24:25 - it has another layout so you have to
24:27 - remember that directly under a page
24:30 - there can be only one layout under that
24:33 - layout there can be more layouts views
24:37 - in fact a layout itself is also a view
24:40 - so let's actually go to the definition
24:42 - of this vertical stack layout you can
24:45 - see that it's derived from
24:48 - stack paste and then stack base direct
24:51 - from layout and if you go to layout
24:54 - it's actually derived from View
24:57 - right and if you go to uh for example
25:01 - the image we go to the definition
25:04 - you can see it is derived from The View
25:06 - so a layout is actually a view you can't
25:09 - see the layout but it's used for
25:11 - organizing the individual views group
25:14 - them together provide layout to them so
25:18 - therefore which you really have is
25:21 - inside a page there is a layout right so
25:25 - this is a layout and then inside the
25:27 - layout you can have multiple views and
25:31 - also remember that a layout is also a
25:33 - view so therefore inside a layout you
25:36 - can have multiple layout and then inside
25:39 - those layout you can have multiple
25:42 - views so the structure is therefore like
25:45 - this
25:46 - you have a page one page
25:50 - right and then
25:52 - a page can have single layout
25:55 - right and then inside the layout you can
25:58 - have multiple views
26:01 - if we remove this layout
26:05 - okay let's try to remove this layout
26:11 - you can actually see compile time error
26:14 - here is that the property content is not
26:17 - set more than it's set more than once
26:20 - right so what we are we're trying to
26:22 - play the elements inside a Content page
26:25 - which is actually trying to set the
26:27 - content property
26:28 - but it's complaining that it's set more
26:32 - than once that means that actually
26:34 - inside a Content like inside the page
26:38 - the content element can only contain one
26:41 - View
26:42 - right this is what it's trying to
26:44 - complain so therefore you can only put a
26:47 - layout here
26:48 - you don't have to have the scroll view
26:50 - any layout will do so if we delayed the
26:53 - scroll View
26:56 - it still works right at least it doesn't
26:58 - complain anymore uh but in this case
27:02 - it's just it just want to let it scroll
27:05 - as well
27:06 - that's why it added a scroll view so
27:10 - that's the first concept I want you to
27:14 - remember right which is this a page
27:18 - contains layout and then layout contain
27:19 - views
27:20 - the second concept I want you to know is
27:24 - the namespaces okay so we have these
27:27 - namespaces what what does it what does
27:29 - it mean you can see these are
27:32 - xmos right XML elements but why scroll
27:37 - view is uh recognized but if I put
27:40 - scroll view one then it's not right so
27:44 - automatically the the closing element
27:46 - becomes scroll view one but it's
27:48 - complaining that scroll V1 was not found
27:51 - so these namespaces
27:54 - um
27:56 - are provided here it's exactly like the
27:59 - namespaces that are provided in C sharp
28:02 - right so for example
28:04 - namespace.net
28:06 - if we don't have namespaces even
28:13 - um so so let's delete this
28:16 - you can see even the button doesn't even
28:18 - recognize right so we put namespaces so
28:22 - that we provide definition for our uh
28:26 - keyword that we use inside a programming
28:30 - language right so in xamo it's a it's
28:32 - another programming programming language
28:34 - that is created for Donna Maui
28:37 - right but where does these keywords uh
28:41 - where do these keywords come from they
28:43 - come from namespaces in this particular
28:46 - case it it came from the Steve file
28:49 - namespace right that's XML namespace
28:52 - which is uh microsoft.nemon
28:56 - and then you have uh extension
29:00 - right so for example if you want want to
29:03 - give it a name
29:04 - uh you can say x dot name and then you
29:08 - can say image one right so you give it a
29:10 - name but the name itself it doesn't come
29:14 - from the default namespace this is
29:15 - default namespace you see if I remove X
29:18 - then the name is not actually recognized
29:21 - right that means that this name property
29:24 - doesn't come from the default namespace
29:27 - it comes from uh this Microsoft zamo
29:31 - namespace so therefore if you want to
29:33 - give it a name you have to use x dot X
29:36 - call it sorry and then if you want to
29:38 - refer to anything that is within the
29:41 - main page uh for example this uh button
29:46 - click event
29:48 - which you can actually go to definition
29:50 - and then that immediately jumped over to
29:53 - encounter clicked so it knows this
29:55 - encounter clicked method in the code
29:58 - behind just because we're referencing
30:00 - the class
30:02 - if we remove this we will see that if we
30:04 - right click here and then go to
30:06 - definition it doesn't know where to go
30:08 - right and so if we put it back
30:12 - now if we go down and try to do the same
30:15 - thing we go to definition it will be
30:17 - able to jump over to the code behind so
30:20 - that's namespace and it's a very
30:22 - important concept that you would want to
30:24 - know because later when you code you
30:27 - thought that this is going to work but
30:29 - it's not being recognized that's just
30:31 - because you may need to add some
30:34 - namespaces okay that's everything I want
30:37 - to cover in this video I'll see you in
30:38 - the next one
30:41 - in this video let's talk about URL based
30:43 - navigation
30:44 - we are going to have three pages in this
30:48 - context application right we're going to
30:50 - have a main context page that is going
30:53 - to show a list of contacts and then
30:55 - we'll be able to navigate to edit
30:58 - contact page where we can edit page or
31:01 - even just view the contact details and
31:04 - then navigate back right and then we
31:06 - have another page add contact page
31:08 - where we navigate to add a new contact
31:10 - and then navigate back so let's jump
31:14 - into video studio and create these three
31:16 - pages so that I can demonstrate you how
31:19 - to do how to do the URL based navigation
31:25 - we can just start with adding these
31:28 - three different empty pages
31:30 - so let's go to create a folder let's
31:33 - call it views right and then
31:40 - we are going to have
31:42 - to add a new atom and here we're just
31:46 - type in page then you can see contact
31:49 - page let's select the xaml page c-sharp
31:53 - H that means that you are not going to
31:55 - have a zamo representation as a friend
31:58 - front end everything has to be added a
32:02 - c-sharp class
32:03 - so I would personally prefer to use
32:07 - symbol so that the front end and the
32:10 - back end are nicely separated right
32:13 - decoupled so let's select this and let's
32:16 - call it contacts
32:18 - page
32:20 - so this is the main page and then you
32:23 - can see that it has a title here
32:26 - and let's just delete the page and then
32:29 - we're going to add another one
32:31 - so we can add another one we can call it
32:35 - added compact page
32:39 - and then here we can just add a space
32:42 - and a delete page again
32:45 - and then last but not least we're gonna
32:48 - add another one and this is going to be
32:51 - called add
32:53 - contact page
32:57 - and again we're going to add a space
32:58 - here and then delete the page
33:01 - now we have these three different pages
33:04 - but if we run the application we're now
33:06 - going to see these three different pages
33:07 - so let's
33:08 - um start running it so just hit F5 right
33:13 - to run the application in the back mode
33:16 - run the application on debug mode
33:19 - um it triggers the hot reload for data
33:23 - Maui so that any changes you make in the
33:25 - xaml file will be reloaded and
33:29 - redisplayed in the application
33:30 - immediately you can see the application
33:33 - runs but no matter where I go
33:36 - right uh
33:38 - like it doesn't show those three
33:41 - different pages
33:42 - so before we implement the URL based on
33:45 - navigation let's try the how to reload
33:48 - so let's go to the main page because
33:51 - this is actually just displaying the
33:53 - main page right and if we change
33:56 - anything for example
33:58 - we change uh hello world to hello.net
34:03 - Maui
34:05 - and then if we save it and come back
34:08 - over here
34:09 - you can see that immediately the change
34:12 - is reflected let's stop debugging
34:15 - because we are going to make some call
34:16 - behind changes the code behind changes
34:18 - will not be reflected immediately so it
34:21 - needs a recompower and redeployment
34:24 - oh
34:25 - so let's go to the app shell
34:29 - like we mentioned before the shell
34:32 - provides URL based navigation and inside
34:36 - the Constructor is a perfect place for
34:39 - us to register the routes in order to
34:42 - jump to any pages with URL base
34:46 - navigation we first need to let the
34:48 - system know that we have these routes
34:51 - that points to these pages so one of the
34:55 - way to do it is to say rotting
34:59 - right there is this routing and then uh
35:03 - we can say register route
35:08 - and then here you can see that the first
35:10 - parameter is a string
35:13 - and that represents the key of the route
35:16 - or the name of the route but it has to
35:19 - be unique
35:20 - right for that we can say name of
35:25 - the class name so name of the contacts
35:27 - page right so context page we can do a
35:30 - control Dot to import the namespace and
35:34 - then here we need to provide the type
35:37 - okay so let's go to the second signature
35:39 - so the second parameter is the type
35:43 - we can use type of context page
35:48 - so basically now the inside.nymali
35:53 - the system it has a key and value pair
35:56 - so the name of the page is the key
35:59 - it doesn't have to be the name of the
36:01 - page you can call it anything but it's
36:03 - easier if we just use name of the uh the
36:07 - page right because that's usually unique
36:10 - and then the type
36:12 - so later when you navigate to this page
36:16 - it knows the type of the page and then
36:18 - it will be able to construct dynamically
36:21 - on demand
36:22 - in the memory and then show you the page
36:26 - that's just because it knows the key
36:29 - value pair it knows which type to
36:31 - instantiate
36:33 - right so we have another two
36:36 - routes so we're going to register the
36:39 - other two routes the name of edit
36:42 - contact page
36:44 - and then
36:46 - last one is I'm going to have name off
36:50 - and then add contact page and then they
36:54 - suggest me to to have
36:56 - the rest so I don't have to type
36:58 - everything
37:00 - okay now I register these three
37:02 - different routes
37:04 - right so let's demonstrate how we can
37:08 - navigate to these three different first
37:11 - of all
37:13 - I don't want the main page to be the
37:16 - home page I want the context page to be
37:18 - the
37:19 - the main page to do that we can go to
37:22 - the friend hand
37:23 - of that the show right here it
37:26 - registered the route in a different way
37:28 - so now I can say contacts
37:32 - page and then here it has this local
37:36 - and then you can see that this logo is a
37:39 - namespace right extended namespace
37:43 - where I can say local and then I can see
37:47 - uh what's defined under that namespace
37:49 - but our context page is not under the
37:54 - local namespace
37:56 - our namespace the context page
38:00 - is under contacts.my.views
38:05 - views so for that we can say
38:10 - views equals
38:12 - CLR
38:14 - namespace right and then here we're
38:19 - going to say contacts dot my
38:23 - dot views so it shows this directly here
38:27 - right
38:29 - so now we can use views
38:32 - to provide
38:34 - the type information
38:36 - right views colon then you can see those
38:39 - three different pages that we added
38:40 - earlier so we're going to use context
38:43 - page so basically this is the same thing
38:46 - as rotting.register route
38:49 - this route is the key provides the name
38:52 - if we navigate to definition
38:57 - you can see this is a string
39:00 - right for the shell content
39:02 - and then here
39:05 - is the type of that so we provide a name
39:07 - and we provide the type
39:11 - now if we run application we will be
39:14 - able to see the context page but there's
39:15 - nothing on it
39:17 - what we can do is we are going to add
39:20 - two buttons
39:22 - just for demonstration purpose later
39:25 - we're going to remove it
39:26 - so here there's a label already but
39:29 - we're going to add a button
39:32 - and then the button text is to say go to
39:38 - just call it at or added contact and
39:43 - then we are going to have another button
39:47 - and we're going to call it at contact
39:52 - and when we click on the added contact
39:54 - we want to go to edit contact page for
39:58 - that we will need to have an event
40:00 - handler to handle the click event
40:04 - to distinguish between this button and
40:06 - this button
40:07 - we will need to provide a name first
40:09 - like I mentioned last time you you need
40:12 - to use the X X extension
40:16 - to give it a name
40:18 - because the name property is not in the
40:20 - default namespace
40:22 - so here
40:23 - I can call it BTN add it
40:27 - contact
40:29 - right
40:30 - and then here I can call it BTN at
40:35 - contact now if I go to clicked I can tap
40:39 - to edit event handler and that will have
40:43 - our name in it right and this what it
40:47 - does is that is not only just created
40:49 - this uh it just assigned this string to
40:52 - this property but also create it a event
40:56 - handler in the code behind it's empty of
40:58 - course for now
41:00 - in here we're going to say new event
41:02 - handler instead of selecting existing
41:04 - one we're going to say new event handler
41:07 - and then now it has
41:11 - our name in it and then created another
41:13 - event handler here like I mentioned
41:16 - before we are going to create this a
41:19 - context application twice the first time
41:21 - we're going to create it with event
41:23 - driven development the second time we're
41:26 - going to use mvvm pattern
41:29 - the event driven development is easier
41:31 - to to learn
41:33 - so it gives us a lot of opportunity to
41:36 - understand Maui and then we're going to
41:38 - move on to mbvm which is usually used in
41:42 - different companies for mobile
41:43 - development
41:48 - so that's why we have these two
41:51 - different ways of creating the same
41:53 - application so let's continue
41:56 - here we're going to demonstrate how to
41:58 - do the URL based navigation we are going
42:01 - to say show dot current right so this is
42:05 - the current shell
42:07 - which is
42:09 - let's go to definition
42:13 - you can see that this current shell is a
42:16 - static member of the shell class
42:18 - right
42:20 - but it refers to the Shell that we have
42:22 - in here right so therefore it knows all
42:28 - of the registered routes so we are going
42:31 - to say go to async
42:33 - right
42:35 - and where are we going to go
42:38 - so here you can see that the first
42:40 - parameter is shell navigation state but
42:43 - but it's really just the string but it's
42:45 - not any string it is the key of a
42:48 - particular route so we can just say uh
42:51 - name off okay add it contact page then
42:55 - it's very simple it's just that we are
42:57 - navigating
42:58 - to this added page and then we can do
43:01 - the same thing here you can say shell
43:04 - right current we find the current shell
43:06 - and then
43:09 - that current shell knows our registered
43:12 - out so we need to provide a key here in
43:15 - this case it's contact page
43:18 - and that's it
43:19 - let's see whether it works or not
43:22 - okay now we can see that the page is
43:25 - displayed right instead of the original
43:28 - main page we're displaying the contacts
43:30 - page
43:31 - right we can see that two buttons are
43:33 - connected to each other so we will need
43:36 - to fix that first so let's go to the
43:38 - context zamo and then this is vertical
43:41 - stack layout what it means is that all
43:44 - of the views inside the layout will be
43:47 - vertically stacked on top of each other
43:50 - right but it has a spacing
43:54 - it has a spacing property here so let's
43:57 - put five here right it's a unit it's not
44:00 - pixels or anything it's just a special
44:02 - unit
44:04 - um and then let's go here you can see
44:06 - that it's nicely separated now
44:08 - now we can click on the edit contact
44:11 - button
44:12 - you can see that it navigated to the add
44:16 - contact page right and if we click on
44:19 - the back button it will navigate back
44:21 - and then we go to add contact
44:25 - you can see it it went to the uh at
44:28 - conic page click on the back arrow it
44:31 - goes back another thing we can do is for
44:34 - practice purpose we can add another
44:37 - button here and we can give it a name
44:42 - and we can call it vtn cancel right and
44:46 - the text is cancel this will take us
44:49 - back to the contacts page so we don't
44:51 - have to use the back arrow we are going
44:54 - to add a clicked event handler
44:58 - right and then I'm going to do the same
45:00 - thing on the edit page I'm gonna add a
45:04 - button I'm gonna give it a name
45:08 - I'm going to call it BTN edit com uh
45:12 - sorry ptn cancel
45:15 - and then we are going to create a text
45:18 - and call it cancel
45:20 - and now we're going to create the event
45:23 - handler
45:26 - you can see that it automatically knows
45:28 - that this has to be rebuilt so actually
45:30 - let's stop debugging then create the
45:34 - event handler
45:36 - right
45:38 - and now
45:39 - we can go to the call behind here and
45:43 - then here
45:45 - we can do it a little bit differently we
45:47 - can do shell current
45:50 - and then go to async this is the same
45:52 - but here we can use dot dot so dot dot
45:56 - you know in photo structure dot dot
45:59 - means the parent
46:01 - so can you start.t here to say that
46:03 - we're going to navigate back to the
46:04 - parent page okay which is the context
46:07 - page
46:08 - so we can use that you can copy this and
46:11 - go to
46:13 - over here
46:15 - and and we can say shocker and go to
46:19 - async.au it's the same thing now let's
46:22 - run the application
46:24 - so let's go to edit contact
46:27 - right we can see we are on add a contact
46:29 - page click on cancel this takes us back
46:32 - to contacts go to add contact
46:35 - click on cancel also takes us back to
46:37 - contacts
46:38 - right another thing that I want to point
46:41 - out is that if you want to use the
46:44 - actual name instead of the dot to go to
46:47 - the contacts page
46:48 - you can't just use the name of
46:52 - contacts page
46:56 - why is that that's because uh if we go
47:00 - to the Shell page you can see that
47:02 - uh
47:03 - the contacts page is the first page
47:06 - which is basically the main page
47:10 - right for main page shell navigation
47:13 - when you use URL based navigation you
47:16 - have to provide the absolute path right
47:20 - so the way that we are navigating
47:23 - uh in context page here we are just
47:27 - using relative path
47:29 - right the absolute pass it starts with
47:33 - slash slash
47:34 - so let's go to the documentation you can
47:37 - see that
47:38 - this is the documentation of shell
47:41 - navigation
47:42 - right you can see that
47:44 - the first level is
47:47 - the root right and it starts with slash
47:49 - slash
47:51 - so
47:52 - if you want to go to the the main page
47:55 - you have to specify the slash slash so
48:00 - let's go here right if you do this it's
48:02 - not going to work so how it's going to
48:04 - work you can use string interpolation
48:08 - here so we're going to say slash slash
48:11 - and then curly braces
48:13 - so this provides the absolute pass and
48:17 - this is going to work
48:19 - okay so let's run the application
48:22 - and then let's go to add contact
48:26 - right so now we are on the add contact
48:28 - page right here and then clicking on the
48:30 - cancel button this will take us back to
48:33 - the contacts page so again to navigate
48:36 - back to the main page you have to
48:38 - provide the absolute pass or you can use
48:41 - dot dot that's everything for this video
48:43 - I'll see you in the next one
48:48 - we are going to start creating a contact
48:50 - list on the context page and what we are
48:54 - going to use is list view so in this
48:57 - video Let's Start Learning the basics of
48:59 - using list View
49:01 - so a few videos ago I mentioned that
49:03 - there can be only one view on the top
49:05 - level inside a page so in this case you
49:07 - can see that on the top level is the
49:09 - vertical stack layout and everything is
49:11 - inside it
49:13 - we don't need the buttons we don't need
49:15 - the labels we will talk about the layout
49:18 - later
49:19 - today we are going to use list view so
49:23 - we can say list review
49:25 - and if we run it you can see that
49:28 - there's there's nothing on the screen
49:29 - but listview has background
49:32 - so turn on the background like we give
49:35 - the background some color for example
49:36 - Quran color it goes blue we can see that
49:40 - everything become blue right that means
49:43 - that list view occupies the whole page
49:45 - you need to know that list view is it's
49:48 - not like there's when there's nothing in
49:50 - the list it's not occupying the whole
49:52 - screen I need to know that it always
49:54 - occupies the whole screen
49:56 - uh and uh I'd like to give it a
50:00 - transparent background because in
50:03 - different devices for example another
50:05 - device is a different type of operating
50:07 - systems like Android or iOS the
50:09 - backgrounds color sometimes um is
50:12 - slightly different so to make it
50:14 - consistent just make it transparent
50:16 - also that you need to know that list
50:20 - View
50:21 - it automatically has the the scroll
50:23 - functionality
50:25 - so later when you know that there's some
50:29 - such a thing that called scroll view
50:31 - okay so you can actually see a scroll
50:34 - view is a layout
50:36 - scroll View
50:39 - is a type of layout of course
50:42 - there can be only one root view in here
50:46 - so scroll view a list view of the kind
50:49 - of uh
50:50 - conflicting with each other you can only
50:52 - have one top level so if you put less
50:55 - view inside a scroll wheel is going to
50:56 - work but but it doesn't make sense
50:58 - because list view itself already has the
51:02 - functionality of a scrolling uh if you
51:04 - add another scroll scrolling
51:06 - functionality on top of it it's going to
51:09 - affect each other so when you have a
51:11 - list view don't add scroll view if you
51:14 - go to definition
51:17 - a scroll view is a type of layout right
51:20 - so we don't need scroll view I just want
51:23 - to mention that when you have a list
51:25 - View
51:26 - don't add scroll View
51:29 - okay
51:31 - so we have a scroll view but there's
51:33 - nothing in it the first thing we need to
51:35 - do is to make scroll view display
51:37 - something so when we come to the code
51:40 - behind we can see that we still have the
51:41 - event handlers but we don't have the
51:43 - buttons anymore so we can delete the
51:45 - event handlers
51:46 - so now in order to show something in the
51:49 - list View right we need to have an array
51:53 - of something to display right so let's
51:56 - say we have a list of a list of strings
52:02 - and this strings we call it let's say
52:06 - contacts right and then we are going to
52:09 - have
52:10 - this and
52:13 - what's going to be inside it is just a
52:16 - list of
52:18 - and let's say there's
52:22 - Zhang and dough and so we have these
52:25 - names
52:27 - and then we will need to provide this
52:31 - data to the list
52:33 - so how do we do that we need to first of
52:34 - all have a name so that at the core
52:38 - behind we can have a reference reference
52:40 - the list View
52:41 - so we have list contacts
52:44 - and then
52:46 - we can say item source
52:49 - item Source the type of item source is I
52:52 - enumerable
52:53 - so we can put contacts over here
52:57 - and now let's run the application and
53:00 - see whether there are any changes now
53:02 - you can see that we have these contacts
53:04 - nicely displayed in the list View
53:06 - so this is a very very basic data
53:09 - binding when I display this list view in
53:12 - here you can see there's separators
53:14 - rather separators and if you click on it
53:19 - right basically when an item is selected
53:22 - there's a default color highlighting
53:24 - which item you selected so if we go over
53:29 - here
53:30 - and let's format it nicely different
53:33 - properties in here more attributes and
53:37 - then there's a there's a separator right
53:41 - they're separated color
53:42 - uh they're separator visibility if you
53:45 - don't like it you can turn it off okay
53:47 - if you want to change the color for
53:49 - example I want to change it to let's say
53:53 - agua
53:54 - just for demonstration purpose I don't
53:57 - like the the color but you see the color
54:01 - has changed right and if you don't like
54:05 - the separator at all then you can use
54:07 - visibility you can set it to none and
54:11 - then coming over here you can see that
54:13 - there's no separator anymore I do like
54:17 - the default one which is showing the
54:20 - separator but maybe we can change it to
54:23 - Silver
54:24 - all right change it to Silver and then
54:27 - uh the color becomes simmer which is
54:29 - very similar to the default the next
54:31 - thing I want to show you is to actually
54:33 - bind it to a class right we can't always
54:38 - have data in in a stream because
54:41 - contacts has like names phone numbers uh
54:45 - maybe emails maybe addresses so it's
54:48 - better to use a class to do that so
54:50 - let's stop debugging and let's create a
54:54 - contact class over here uh later we're
54:57 - gonna separate that kind of class in the
54:59 - different class Library which is the
55:02 - correct way to do things when you go to
55:04 - a company you will never see people have
55:07 - the class defined in in the same file
55:10 - right there are two different classes in
55:13 - the different seminal sometimes it
55:14 - happens but most most of the time you
55:16 - have your core objects right so core
55:20 - classes the business core classes in a
55:22 - different class Library which we're
55:24 - going to do later we're going to follow
55:25 - the clean architecture or the clean code
55:27 - approach right for now for demonstration
55:30 - purpose I'm going to have a class over
55:33 - here which is going to be called Contact
55:35 - right and then we are going to have just
55:38 - some simple properties for example maybe
55:41 - you will have a name maybe maybe email
55:45 - instead of a list of strings
55:48 - we are going to have a list of contacts
55:52 - list of
55:54 - contact over here
55:55 - change to contact
55:58 - and then we're going to initialize uh
56:01 - this contact
56:03 - so I have a list of contacts and now I
56:07 - don't have to change this and let's
56:08 - let's run it and see what's going to
56:10 - happen
56:12 - okay so let's speed it and run it again
56:15 - all right so we have something displayed
56:18 - but this time unfortunately these people
56:20 - are not being displayed but class names
56:22 - are being displayed right the class
56:24 - names along with namespaces being
56:27 - displayed why is that
56:29 - so the default behavior of assigning a
56:34 - list to the item source is that the list
56:37 - view will take each one of these
56:41 - object
56:43 - and run at two strings when you run a
56:46 - two string
56:48 - whatever it gets
56:50 - it will be displayed right so for
56:53 - example if I set a breakpoint over here
56:57 - right and then I'm gonna stop it and run
57:00 - it again and let's trigger the
57:02 - breakpoint and you will see what I mean
57:04 - okay so we have this contacts
57:07 - so let's actually do a quick watch
57:11 - and then if I do like take the first one
57:16 - which is zero in the index we can see
57:19 - that we have
57:21 - the first one which is strong though
57:23 - and then if I do a two string
57:27 - let's see what is the value you can see
57:29 - that the value is exactly the one that
57:31 - is being displayed in that list right
57:35 - so this is what I mean
57:37 - when you just
57:39 - bind when you just assign the context
57:43 - to the item Source it's going to take
57:46 - each one of those contacts and run a two
57:48 - string it's going to just display that
57:51 - the result of two string inside the list
57:53 - so in this case it's just the namespace
57:55 - plus the class name so that's not really
57:58 - what we want
58:00 - right of course to fix this problem you
58:03 - can come over here and override the two
58:07 - string method so that you can display
58:09 - whatever you want
58:11 - but that's not really the proper way to
58:14 - do it in Dynamic mode
58:15 - a correct way to do it is to use data
58:20 - binding which means that
58:23 - we assign this the item source that is
58:26 - actually okay
58:27 - well we need to tell the list view what
58:31 - to display and how to display it and the
58:33 - way to do that is to go to the front end
58:36 - in the demo file
58:39 - and then over here
58:41 - we need to give it a template right so
58:45 - because we are trying to tell a list
58:48 - view exactly how to display the item
58:51 - so we need to specify that in in the
58:54 - template and we can use we can say less
58:58 - view dot item template
59:00 - okay this item template because each
59:04 - item in the list is an item right that's
59:06 - why it's called item template and then
59:09 - we have data template
59:11 - so the data template is basically just
59:14 - just the item template
59:16 - and inside it we can have a different
59:19 - type of cells we can have view cell
59:22 - which is the most flexible approach uh
59:25 - there's uh there's this image cell right
59:28 - and there's the basic one is taxa so we
59:31 - can try to use textile for now the tax
59:34 - of that is the one that I want to show
59:36 - for now so what is the tax of that we
59:39 - can see binding
59:43 - finding
59:44 - and name
59:47 - all right so basically with the curly
59:50 - braces we are just saying that we are
59:53 - targeting a object right so if you have
59:57 - worked with JavaScript before a credit
59:59 - brace refers to a object
60:02 - so what is the object we are referring
60:05 - to it is the one that is is being bound
60:10 - to the item so what is being bound to
60:13 - the item
60:14 - you can see that we have context as the
60:17 - item source so of course each item is a
60:21 - one of these contact
60:23 - right so this
60:28 - without specifying The Source by default
60:31 - it refers to the contact object right
60:35 - which is bound to the item to the item
60:37 - we're specifying an item template of
60:40 - course this is referring to the object
60:42 - that is bound to the item which is a
60:46 - contact
60:47 - so that's why
60:49 - in here this binding just means that we
60:52 - are referring to the object that is
60:55 - being bound to the item and then here
60:57 - we're just saying what is the pass we
60:59 - can say pass equals to the property of
61:03 - that object
61:04 - which is name
61:06 - all right we can see that you won't get
61:09 - any intelligence over here it doesn't
61:11 - really know it's just a string right
61:13 - this this is just a string so it doesn't
61:16 - really know but uh you you just have to
61:19 - type it directly
61:21 - so so here the path is a default
61:24 - property of The Binding class and
61:28 - you can just put name directly over here
61:30 - because of the default property so you
61:32 - can omit the pass
61:35 - so you can put name of here it just
61:38 - tells that name Maui that we are trying
61:40 - to display the name property of the
61:44 - contact class right the context object
61:47 - so what's this change if we run the
61:51 - application
61:52 - [Music]
61:54 - now you can see
61:56 - that the names are being displayed again
61:58 - right another property of the text cell
62:03 - is called detail
62:05 - so I'm going to show you what it is now
62:09 - this detail is also a string but again
62:12 - you can use binding
62:14 - okay so we're binding to the property
62:17 - another property of the context class
62:20 - and of course the only other property we
62:23 - have is the email so we can use email
62:26 - now let's see what it looks like let me
62:29 - come over here you can see that we have
62:32 - the names and then the detail at the
62:34 - bottom the names are highlighted it's
62:37 - pretty nice
62:38 - but if you think that everything is kind
62:41 - of squeezed together so it can change
62:43 - the the height of the Rope right or to
62:46 - hide them the item but it's called row
62:48 - height
62:49 - okay so for example if we say 100
62:53 - and then let's take a look at what it
62:55 - looks like each one of those pretty tall
62:57 - so maybe change that to 80.
63:02 - and that looks much better uh it's still
63:05 - too much
63:07 - maybe 70
63:09 - yeah 70 looks much better
63:12 - say let's say 65.
63:17 - so now it looks much better so these are
63:20 - all the things I want to cover for today
63:22 - we basically cover some basics of list
63:26 - view right how to data bind to it how to
63:28 - adjust the appearance and in the next
63:30 - few videos we are going to use list view
63:32 - for our Connex application I'll see you
63:35 - in the next one
63:36 - do you still remember this map that we
63:39 - mentioned a few videos ago
63:40 - so in the previous video when we cover
63:43 - the basics of list view we covered the
63:46 - view which is the UI and the state which
63:49 - is the data and also how we map the
63:54 - state to the view right which is a basic
63:57 - data binding that we covered in the
64:00 - previous video in this video we are
64:02 - going to cover basic events for list of
64:04 - view so that we can actually do
64:06 - something with studies let's come to our
64:08 - solution and let's go to the context
64:10 - page when you have a phone and has a
64:13 - list you really use a finger to tap on
64:16 - item of a list
64:17 - so there are a couple of events that we
64:21 - are interested in
64:22 - one of them is called item selected
64:27 - so let's actually try to handle that
64:29 - event and see what happens okay so this
64:32 - generated a new event handler
64:34 - which automatically showed up here let's
64:37 - actually set up breakpoint and run our
64:40 - applicant see whether it's triggered or
64:42 - not
64:43 - okay so I'm going to run the application
64:46 - okay so I'm going to click on one of the
64:49 - item and you can see that it's triggered
64:51 - this breakpoint
64:52 - right so let's continue and
64:56 - if I click on the next item
65:00 - it trigger the breakpoint again so we're
65:02 - going to continue but this time we're
65:05 - going to click on the same item
65:07 - so I clicked on it so I'm going to click
65:10 - down a few times
65:11 - you can see that this breakpoint is not
65:14 - being triggered
65:16 - so what does that mean
65:18 - it means that this event handler item
65:21 - selected is only triggered when item
65:25 - selection has changed right at the
65:28 - beginning there's nothing selected so
65:30 - you click if you click on any item the
65:33 - selection changed from nothing
65:35 - to one of the item right the item that
65:39 - you clicked on and then when you click
65:42 - on something else another item
65:44 - then of course it's going to trigger the
65:47 - event
65:48 - but if you click on the same item
65:51 - it's not going to trigger the event
65:53 - right so if you are going to use this
65:55 - event handler to do things then you have
65:59 - to face this problem so there are a
66:02 - couple of ways to fix this problem
66:04 - one of the ways is to deselect the
66:07 - selected item right inside this event we
66:10 - can just use
66:12 - list
66:14 - contact
66:15 - dot selected item so we can set it to
66:19 - now so basically you do your logic here
66:22 - right your own logic and then at the end
66:25 - you can deselect it
66:28 - okay so let's run the application again
66:31 - and to see the behavior so now if I
66:34 - click on item but you can see that
66:37 - the event is triggered right and if I
66:40 - run the application again
66:42 - you now notice that the item is not
66:45 - being selected right because we
66:47 - deselected it again so this event is
66:50 - going to happen over and over again just
66:52 - because we deselected the item one thing
66:56 - we can use to test the application to is
67:00 - to use the built-in display alert right
67:03 - so we can display a message
67:05 - so this is going to be for example test
67:08 - and then the message is
67:11 - test and cancel is let's just say okay
67:16 - right and we run the application again
67:19 - now we don't have the breakpoint
67:22 - but we have
67:24 - a message
67:27 - you can see the message and we click on
67:29 - the OK button the message disappears
67:31 - and I can click on the same
67:34 - item and Trigger
67:36 - the alert let's take a look at another
67:39 - event let's go to the demo file and
67:42 - another one is called item
67:44 - tapped right so let's create a new event
67:47 - handler and then let's go to the code
67:50 - behind again
67:51 - you can see a new event handler is
67:53 - generated so again let's set some
67:56 - breakpoint
67:57 - and then let's run the application again
68:00 - to see the behavior to see whether there
68:03 - are any differences between the two okay
68:06 - so the application runs and we click on
68:09 - the item
68:10 - you can see the first event is triggered
68:12 - is the item selected and then if we
68:15 - continue then the second event is
68:18 - triggered again right so this item tab
68:20 - is triggered afterwards
68:23 - one of the more reliable way to just
68:27 - select item is to actually do the
68:30 - deflection inside here inside the tapped
68:34 - event
68:35 - I'm going to do it here
68:37 - and then
68:39 - you handle your logic inside item
68:41 - selected why is that
68:44 - why is that it's because this item tab
68:47 - event is always happening right whether
68:50 - you're selecting an item or not
68:53 - selecting an item whether you tap on the
68:56 - same items or type on a different item
68:58 - right therefore
69:01 - the this event is triggered way more
69:05 - times than the item selected event right
69:08 - so to handle your logic you don't want
69:12 - to put your logic inside here if user
69:16 - use their fingers to tap on the item
69:19 - like very very quickly this event
69:21 - handler is going to be triggered many
69:23 - many times right where this one is
69:26 - triggered less so therefore we want to
69:29 - do our deselection here and we want to
69:32 - do upper logic here
69:34 - because you don't want your logic to run
69:35 - inside here because it's going to run
69:38 - for many many times right so this is a
69:41 - more reliable way to put our deselection
69:43 - over here and putting our logic inside
69:46 - item selected is better
69:48 - so to give it a test make sure that it
69:51 - actually works we can whatever display
69:55 - alert inside here okay so we're gonna do
69:59 - test and then I'm gonna say okay and
70:02 - we're going to run the application again
70:05 - so when I click on an item
70:07 - and
70:09 - we see this alert click on OK click on
70:12 - another one
70:13 - we see the alert
70:16 - and you can see that that this selection
70:18 - is happening right nothing is being
70:20 - selected so this is the exact Behavior
70:23 - we are expecting
70:25 - here you will notice there is actually a
70:28 - bug I think it's a bug for item
70:31 - selection right for this item selected
70:33 - event this event is going to be
70:35 - triggered twice if we use we try to
70:39 - deselect right so let's take a look at
70:42 - the behavior I click on this
70:45 - and then we have actually let's disable
70:49 - let's remove the breakpoint
70:52 - so I click on that already and then now
70:56 - I click on the OK button
70:58 - but you see that I clicked um
71:00 - the okay button already but this alert
71:03 - dialog is not disappearing I'll have to
71:06 - click on the OK button again
71:08 - right so it appears that I click on the
71:11 - same button again but it's not the case
71:13 - it's actually what uh what's actually
71:15 - happening is that this event handler is
71:18 - triggered twice so let's put the
71:20 - breakpoint back again
71:22 - okay and then let's click on any of the
71:25 - item
71:27 - and run it again
71:30 - and you see that it happens twice
71:34 - right so now there's actually two
71:36 - dialogues that's why we need to click on
71:39 - twice
71:41 - um I think the logic here is that this
71:45 - is this shouldn't be called item
71:46 - selected it should be called unchanged
71:49 - right item selection changed what is
71:52 - happening is that first time you click
71:54 - on the item
71:56 - the selection the item selected changed
72:00 - from now
72:01 - to something
72:03 - and then because we deselected here
72:08 - so the item selected is changed from
72:10 - something
72:12 - to know
72:13 - and that triggers the event again
72:17 - right so I think it's a bug but we
72:21 - always have a workaround to solve this
72:24 - problem we can just
72:27 - say if list contacts
72:31 - dot selected is not now
72:34 - and and then we put our logic inside
72:37 - here right so our logic should be inside
72:40 - here we only deal with anything if there
72:45 - is actually a selected item
72:47 - right if there's no select item we don't
72:49 - need to do anything
72:51 - so if we run the application again now
72:53 - you should see that the alert only
72:55 - triggered once
72:57 - so let's run application okay so let's
73:00 - try that click on this
73:03 - we have this alert click on OK button it
73:07 - disappears right away right so upper
73:09 - work round works
73:11 - so now let's actually put our logic here
73:14 - so what do we want to do we want to when
73:17 - we click on a contact we want to go to
73:19 - that contact
73:21 - right so
73:22 - uh which means that we want to go to the
73:25 - added contact page
73:27 - so for that if you remember our logic is
73:31 - to use shell dot current dot go to async
73:36 - we can directly call it this way or we
73:39 - can use our weight
73:41 - and async and then we can go to the page
73:46 - so for that
73:48 - we're going to say added contact page
73:52 - and then later probably in the next
73:55 - video we're going to talk about how to
73:57 - pass information when we navigate to
73:59 - another page today we're just going to
74:01 - navigate to the page because we mainly
74:04 - want to focus on the event handling of
74:07 - the list view okay so let's click on any
74:10 - of the item
74:12 - and we're looking at the added contact
74:15 - page now cancel button going back click
74:19 - on it again I'm going to add a contact
74:22 - page okay
74:24 - so that's everything I want to cover in
74:26 - this video I'll see you in the next one
74:33 - we already have a contacts page the next
74:36 - step is to create an added contact page
74:39 - to be able to see the details of the
74:41 - contact and be able to add it to contact
74:45 - before we do anything if we look at the
74:47 - context page we can see that we have the
74:49 - hard-coded list here
74:51 - right and then we have the contact class
74:54 - the core class that is defined right on
74:58 - this page uh the code behind of the page
75:01 - so that's something we have to fix
75:03 - before we can continue
75:06 - so I know that I've mentioned eventually
75:09 - we're going to have a clean architecture
75:11 - but for now for the purpose of learning
75:15 - we are not going into
75:17 - the proper architecture right now we are
75:21 - going to create a folder right in the
75:24 - same project and we're going to call it
75:26 - models
75:29 - so we are going to have our contact
75:32 - class defined
75:35 - inside the models folder okay so I'm
75:38 - gonna cut this piece of code here and
75:41 - then I'm going to create a contact class
75:44 - here inside the models folder
75:46 - is going to call it contact
75:52 - all right so this is going to be a
75:55 - public class
75:56 - and then actually I'm just going to
75:59 - replace this with this and
76:03 - to Define this class properly at least
76:05 - we're going to add another property is
76:07 - there's going to be more properties
76:08 - later but for now we're going to have a
76:11 - contact ID
76:13 - right so
76:15 - when that is done when we come back to
76:17 - our contacts page we can still see we
76:20 - have this list color coded here how do
76:22 - we deal with this
76:24 - now let's look at this width this is
76:26 - data right so I know that we are hard
76:29 - coding that data but whether we're
76:31 - dealing with the in-memory to the
76:33 - storage or we're dealing with a file to
76:36 - store the data and then later we'll
76:37 - retrieve the data from the file or we're
76:41 - dealing with a database and we retrieve
76:43 - the data from database into our
76:45 - application we need to have a central
76:47 - place to encapsulate data operations
76:50 - meaning insert data update data retrieve
76:54 - data and delete data okay we need to
76:56 - have a central place to encapsulate
76:57 - those upper operations we can't let
77:00 - those Logics scattered in our
77:02 - application everywhere for that we can
77:05 - use repository right a repository is a
77:09 - central place where those operations are
77:11 - encapsulated right a shield of
77:14 - replication from doing those operations
77:17 - so that when we replace the repository
77:19 - with another one then we can do with
77:22 - data from different sources right we can
77:24 - never repository for a memory we can
77:26 - have a repository for file and we can
77:29 - have a repository for database
77:31 - right for in memories databases are
77:34 - pretty good for quality assurance right
77:37 - to fake some data
77:39 - from files we don't use that often from
77:42 - database is very good for enterprise
77:44 - level development for now we're going to
77:47 - have a simple static repository and
77:50 - later we're going to create proper
77:52 - repositories and then we use dependency
77:54 - injection to inject the repository into
77:57 - our replication
77:58 - and to do that we're just going to
78:00 - create a repository class enter enter
78:03 - the models folder and we are just going
78:06 - to call it compact
78:09 - Repository
78:14 - and this is going to be a static class
78:15 - this is a repository which serves the
78:18 - purpose of doing all of those data
78:20 - operations within the memory
78:22 - right of course later when we use clean
78:25 - architecture we are going to have
78:27 - different repositories to deal with
78:29 - databases for example and then we we're
78:32 - going to use dependency injection to
78:34 - inject those repositories into our
78:38 - application logic layer but for now we
78:41 - are going to only have this
78:44 - to deal with in memory now it's going to
78:47 - be a static class and then we are going
78:49 - to have a static list
78:51 - okay so let's go back and just uh
78:55 - basically I'm just going to cut this
78:57 - part
79:00 - and then we're going to replace this
79:03 - so we initialize this data with four
79:05 - contacts so that at least we have
79:07 - something to see before we add a contact
79:09 - right so we have this and of course we
79:13 - need to have a method for get all of the
79:15 - contacts so we are going to have a list
79:20 - of contact
79:22 - right and then we can have get contacts
79:25 - and this is just going to give us all of
79:28 - the contacts and this has to be a static
79:31 - method perhaps we are going to add
79:33 - another one
79:35 - okay and this is one single contact so
79:38 - we're going to say can't get contact by
79:40 - ID
79:41 - right and then we're gonna put in
79:43 - contact ID
79:45 - and then we are going to say return
79:49 - Dash contacts um
79:51 - should use Dash
79:53 - well it doesn't matter we don't have to
79:55 - use stash but I'm choosing to use stats
79:57 - in dash in this course I mean not Dash
79:59 - underscore so any score contacts
80:02 - underscore
80:03 - contacts
80:06 - and then over here I'm just going to say
80:08 - first or default we use Lambda
80:11 - expression and contact ID equals to
80:14 - contact ID here this contact is from
80:17 - within this namespace which is this
80:20 - particular contact
80:22 - right so so now we have get contacts we
80:25 - have get contact by ID and I think those
80:28 - methods are good enough for now let's go
80:31 - back to our class here we have the
80:35 - contacts
80:36 - so we are just going to use our contact
80:40 - Repository
80:41 - inside this class and then we're going
80:43 - to say get contacts
80:45 - and if we run the application again we
80:48 - should have everything that we have seen
80:51 - before now you can see that it complains
80:53 - about the contact inside the contact
80:56 - context page it says contact is a Amigos
81:01 - reference between
81:03 - our own contact and there is actually a
81:06 - contact inside the communication name
81:08 - space
81:09 - so in order to refer to our contact
81:13 - we're going to use something like this
81:16 - I'm going to say using
81:19 - contact equals contacts dot my DOT
81:25 - models dot contact so this right tells
81:29 - our code that when we refer to contact
81:31 - inside this file we're referring to our
81:35 - own contact instead of the contact under
81:37 - the communication namespace
81:41 - okay so let's try to run the application
81:44 - again now you can see that all of the
81:46 - contacts are listed in the list view
81:47 - that means our static repository is
81:51 - working for us
81:52 - so now we are ready to go to the next
81:55 - step which is to create the edit contact
81:58 - page currently we do have an added
82:00 - connect page if we click on it we go to
82:03 - the add iconic page but there's there's
82:05 - nothing in it right we need to view the
82:08 - video's information on the connect page
82:10 - first of all right and then we can deal
82:12 - with the update
82:13 - uh to in order to see the iconic
82:15 - information on the ad iconic page we
82:17 - need to know which one we're looking at
82:19 - right which contact we're looking at or
82:21 - basically we're we're saying that we
82:24 - need to know which contact the user
82:26 - clicked on in the contact list page
82:30 - right
82:31 - so to know that we will need to pass
82:35 - information from the contacts page
82:38 - to the edit contact page and how do we
82:41 - do that so if we look at our contacts
82:44 - page when the user clicked on a contact
82:47 - item we are using URL based navigation
82:52 - to navigate to the added contact page
82:56 - and if you have done any uh web
82:59 - application development or if you just
83:02 - go online you have seen those patterns
83:04 - that uh in the URL we have a question
83:06 - mark and then there's equal sign and
83:08 - afterwards there's some strings after
83:10 - that
83:12 - um
83:12 - so that is called a query stream right
83:16 - so here because we have the URL based
83:19 - navigation in Dynamite it actually
83:22 - borrows the same concept so we can pass
83:25 - those information from a page to another
83:28 - page when we use URL based navigation in
83:31 - Dynamite so let's see how we do that
83:34 - here here we can pass different things
83:37 - not only just streams but for Simplicity
83:40 - we're going to learn with strings first
83:42 - right so
83:45 - um basically here we are just going to
83:49 - say something like you know which page
83:52 - are we going to right and then we can
83:54 - use the question mark and say you know
83:55 - contact ID equals to whatever and then
83:59 - on the ideaconic page we can receive
84:02 - this contact ID so in order to do that
84:06 - we are going to let's roll back you can
84:09 - see we're using name off but let's see
84:12 - use a string interpolation here
84:16 - right with Kerdi braces and then here we
84:19 - can just say let's let's use ID so just
84:22 - for Simplicity right ID and what is the
84:25 - ID uh it's the selected item this list
84:30 - contacts dot selected item and then this
84:35 - selected item is a object but we can
84:38 - cast that into
84:40 - a contact object
84:43 - right
84:44 - so let's do that
84:46 - once we cast it into contact object then
84:49 - we can know the contact ID
84:52 - so here this is the query string
84:56 - parameter and this is the value
84:59 - right we can receive that information
85:02 - on this page which is the add edit
85:05 - connect page so let's go to edit connect
85:07 - page
85:10 - so this is the code behind of the
85:12 - ataconic page here in the edit connect
85:15 - page in order to receive the parameter
85:18 - value that it passed from the context
85:20 - page we will need to have a property and
85:23 - that property should correspond to that
85:26 - parameter value in this case we're
85:29 - receiving a contact ID so it's a
85:33 - property and we only need to have a
85:35 - Setter so this Setter will be triggered
85:38 - when the information is passed over to
85:41 - the added contact page right so then how
85:43 - do we know that this is the property
85:46 - that should be triggered right this is
85:48 - the setter of the property distribute
85:50 - trigger
85:51 - on the class we can use a property and
85:54 - we're going to say query property right
85:57 - query property and the correct property
85:59 - has has two parameters the first
86:02 - parameter well let's talk about the
86:04 - second parameter the second parameter is
86:06 - actually the query ID and what is the
86:08 - query ID it's basically this parameter
86:12 - this the name of this parameter so in
86:15 - here it's just called ID which is the
86:17 - second one I'm tapping the second one
86:18 - right and what is the first one the
86:21 - first one is the name of the property
86:25 - right so here we can say name of
86:28 - contact ID right so name of the property
86:32 - so basically this query let's stop this
86:36 - right so basically this query property
86:40 - is telling us that whenever we receive
86:43 - the parameter value from the previous
86:46 - page which is the context page we will
86:50 - map that parameter value to this
86:54 - property
86:55 - okay and this property is right here
86:59 - and then when that happens the setter
87:02 - will be set and the value of that
87:05 - property is within the value right
87:07 - within the value uh you know in the
87:10 - center we can call Value is within here
87:14 - so now we actually have the the value of
87:16 - the contact ID right inside the center
87:19 - what should we do here
87:21 - we need to call the contact Repository
87:26 - right dot get contact by ID which we
87:30 - just created right and here we have the
87:33 - value that we need to pass in and of
87:36 - course we can use
87:37 - anti-parse
87:40 - parse that into an integer uh if the
87:43 - value is inappropriate that means we
87:46 - need to throw exception we should let
87:47 - that exception draw because that's a
87:50 - coding error
87:51 - right so we get the contact and then we
87:54 - can store that contact in in a private
87:58 - variable here and this private variable
88:00 - we can Define it inside a co-behind
88:03 - class and it's going to be of of course
88:07 - a contact
88:08 - and contact
88:11 - uh that's it so here which contact class
88:14 - are we are we referring to we can use
88:17 - the same remember we are using the same
88:19 - approach that we'll use last time so we
88:22 - need to specify that we are referring to
88:24 - our own contact class that we Define in
88:27 - the models namespace in dot contact
88:30 - and in the setter we basically set
88:33 - the contact so now we have the contact
88:36 - in order to prove that we actually
88:39 - received contact let's go to the front
88:41 - end of the ad iconic page and we see a
88:44 - label
88:45 - so let's give this enable label a name
88:50 - right and so let's call it lbl
88:52 - interesting name and then once we
88:56 - receive the contact
88:58 - we're going to assign that contact
89:01 - right to
89:03 - the label so that we can actually see it
89:06 - and let's run the application
89:08 - and let's see whether we can see the
89:11 - contact name or not okay so let's click
89:14 - on Tom Hanks
89:16 - if for whatever reason we're seeing John
89:19 - Doe and that's pretty weird I don't know
89:21 - what's happening
89:22 - so let's actually debug let's go to the
89:26 - contact
89:28 - first let's go to the contacts page
89:31 - right and let's see whether the selected
89:34 - item is actually correct let's actually
89:38 - go back
89:39 - and then I'm clicking on Tom Hanks
89:43 - so the selected item
89:45 - let's check what it is it's id0 of
89:49 - course it's ID 0 because we didn't
89:51 - actually provide ID Let's uh that's my
89:54 - fault let's go back to contact
89:55 - repository I didn't provide ID so
89:58 - everything is zero so that's why it's
90:00 - John though
90:01 - because strando is the first item so
90:04 - let's
90:05 - um give the ID over here provide the ID
90:08 - for each one of those item of course we
90:11 - need to change them to one two three
90:12 - four
90:14 - and let's run the application again okay
90:16 - let's try
90:18 - myself
90:19 - let's remove the breakpoint I think it's
90:21 - gonna work
90:23 - okay so I can see my name
90:25 - go back Tom Hanks
90:29 - um I thought I removed the breakpoint
90:31 - but anyways
90:33 - I've tap Tom Hanks so that's correct
90:36 - let's try one more which is John Doe so
90:40 - I have John Doe so everything looks
90:42 - correct so in this lesson first we
90:45 - learned about creating a stacking
90:48 - repository this is mainly for teaching
90:51 - purpose creating a static repository for
90:54 - you is mainly for let's say you're
90:57 - creating a mock-up right or uh you're
91:01 - faking the repository so this static
91:04 - repository will provide you with a
91:07 - convenient way a quick way to mock the
91:10 - data right and the later you can use
91:12 - cling architecture the plugin based
91:15 - clean architecture to plug in a
91:16 - different Repository
91:18 - okay so or you can use the static
91:21 - repository to provide you of the fake
91:23 - data for testing purpose let's say
91:25 - you're in the QA team and then you want
91:28 - to use a different data than the real
91:29 - data then you can create a simple static
91:32 - repository
91:33 - to provide the data but anyhow I don't
91:37 - prefer the static repository like I said
91:40 - the static repository is mainly for
91:41 - teaching so that we can quickly have
91:44 - data
91:45 - and we can uh still use the concept of
91:49 - repository to encapsulate all of the
91:51 - data operations within a central place
91:54 - so that we don't have all of the data
91:57 - operations scattered everywhere in our
91:59 - application right I wanted it to be
92:01 - encapsulated in a central place so we
92:04 - learned about this concept we created
92:06 - this static repository and then we learn
92:09 - about passing information from one place
92:14 - to another right one page to another
92:16 - here we're passing through the query
92:19 - parameter right and then this is the
92:21 - value
92:23 - and then inside the place where we
92:27 - receive
92:29 - the information right we use we first
92:32 - create a write only right a right only
92:35 - or set only property to receive that and
92:38 - of course the the type of that should be
92:40 - the type of
92:42 - the parameter that is passed in from the
92:45 - other page
92:46 - and then over here we use a attribute
92:50 - okay and this is the query property
92:53 - attribute the first parameter is the
92:56 - name of the property and the second one
92:59 - is the name of the parameter right the
93:01 - query string parameter
93:03 - right and then you're going to receive
93:04 - this
93:06 - and that's everything I want to cover in
93:08 - this video I'll see you in the next one
93:13 - in the next a couple of videos we are
93:16 - going to work on the edit contact page
93:18 - and for that we need to familiarize
93:21 - ourselves with stack layout
93:24 - right currently if we go to the added
93:26 - contact page we can see that there's the
93:28 - vertical stack layout
93:30 - actually there's a stack layout and the
93:34 - orientation can be either vertical or
93:36 - horizontal in Dynamite there's actually
93:39 - for convenience purpose there's a
93:42 - vertical stack layout
93:45 - and a horizontal stack layout the
93:49 - default orientation of a stack layout is
93:52 - a vertical stack layout okay so if we do
93:55 - it this way then it would be the same as
93:58 - uh the vertical stack layout before we
94:01 - change it right so if we let it run and
94:04 - then we use hot reload to see what's
94:07 - happening when we make changes then we
94:09 - can see that they are the same okay the
94:11 - application is running let's click on
94:13 - one of the contact to go to the added
94:15 - connect page right right now we have the
94:17 - stack layout and it looks exactly the
94:19 - same as the vertical stack layout right
94:21 - because the default orientation is
94:23 - vertical
94:24 - okay let's learn about several things
94:27 - about a stack layout first we have this
94:31 - orientation which I mentioned so let's
94:34 - actually put it on the left side and
94:37 - then over application on the right hand
94:39 - side so I'm going to put it over here
94:41 - and then I'm going to drag this over
94:44 - to here
94:46 - and then let me minimize solution
94:48 - Explorer so let me actually uh comment
94:52 - out
94:53 - look actually let's comment out the
94:55 - whole thing okay to make it clearer
94:57 - coming out the whole thing and then
94:59 - let's go to the code behind
95:02 - and let's comment out
95:05 - uh this
95:08 - and we don't have the cancel button so
95:10 - let's come and not this
95:12 - all right so let's just focus on how
95:15 - stack layout works for now okay so let's
95:19 - add a empty stack layout right so what
95:23 - we need to know is first of all we need
95:25 - to know some important properties of
95:28 - Stack layout so let's put something
95:33 - put box view right box view is basically
95:36 - a view that looks like a box
95:38 - so it's very good for placeholders and
95:42 - it's very good for us to understand how
95:44 - layout works we can specify the color of
95:47 - a box view so that we can see the size
95:49 - of the size and position of the Box view
95:52 - right so if we just do it this way you
95:54 - can see that there's nothing on it right
95:56 - that's because we didn't specify the
95:58 - size so let's specify the size and we
96:01 - can use box view to understand how the
96:04 - fuse in stack layout position how the
96:07 - size and position worked I'm going to
96:09 - add another one and we're gonna make
96:11 - this one let's say it's going to be blue
96:14 - right and another one maybe red
96:20 - and another one maybe
96:23 - yellow
96:25 - right so if I save it you can see there
96:27 - are different things so this tells us
96:30 - that in the stack layout each one of the
96:32 - child views are stacked together right
96:35 - up and down because the orientation is
96:38 - vertical right because the default
96:41 - orientation is vertical
96:43 - so each one of the child views are
96:45 - stacked together right so agua is the
96:48 - top one at the blue red and yellow so
96:51 - you can see agua blue red yellow so if
96:55 - we change the stack layout to horizontal
96:57 - stack layout and then if I save it now
97:00 - we see nothing why is that to answer
97:04 - that question let's change the height
97:05 - request to West request and then click
97:09 - on the save button you can see that
97:11 - everything is showing up and agua is on
97:14 - the left obviously everything's stacked
97:16 - together again but it's stacked from
97:20 - left to the right right the vertical
97:22 - layout stack views top to bottom and
97:26 - horizontal stack layout stack views from
97:29 - left to right
97:31 - right and there's an important property
97:34 - that we need to understand which is the
97:37 - spacing right now you can see that each
97:41 - one of the Box views are connected
97:43 - together right so if we specify a
97:46 - spacing here then you can see that
97:49 - there's a space in between right so if
97:53 - we change this back to vertical
97:59 - then of course we have to change this to
98:02 - height then you can also see the gaps
98:04 - another thing that is very important is
98:08 - for a vertical layout
98:10 - a control like a box view button for
98:13 - example by default it fills the entire
98:16 - screen from left to right right and if
98:19 - it's a horizontal stack layout by
98:22 - default the Box view or buttons those
98:26 - controls or views will fill the screen
98:30 - from top to bottom right that's the
98:32 - default Behavior but you can modify that
98:35 - by specifying the with request so let's
98:38 - say the width is 100. right so if I do
98:41 - that notice that the agua box view is
98:45 - changed
98:46 - right and then this is only 100 from
98:49 - left to right right that's the width
98:52 - right so if I specify all of them all
98:55 - right they look like that then the
98:57 - question comes like how do we configure
98:59 - the position of the Box view it's always
99:02 - in the middle if there is horizontal
99:04 - options right and by default the
99:07 - horizontal option for a box viewer or a
99:10 - button
99:11 - um is Center but we specify start
99:16 - then now you can see the Box view move
99:19 - to the left
99:20 - and we specify this
99:22 - as a center and then
99:25 - specify this as right sorry and
99:30 - then you can see that Center is Center
99:33 - start is Left End Is Right
99:37 - right and deep default the yellow one
99:40 - stays as default default is also Center
99:43 - so for a vertical stack layout you
99:47 - cannot position child views vertically
99:51 - because they just stack on top of each
99:53 - other well there's nothing to control
99:55 - okay but you can configure the height
99:58 - whereas for a vertical stack layout you
100:01 - are able to configure the horizontal
100:04 - positionings right and you have three
100:06 - options Start Center and end
100:10 - now when it comes to a horizontal stack
100:15 - layout so let's comment out this
100:18 - copy make a copy and then come down this
100:20 - and then let's change this vertical
100:23 - stack layout to hurry horizontal stack
100:28 - layout of course now the Western height
100:31 - kind of flips so we're going to change
100:33 - this to 100
100:35 - and with 250 otherwise it will look very
100:39 - very weird because we don't have enough
100:41 - space from left to right now you can see
100:44 - that everything is in the middle the
100:46 - horizontal options is not going to work
100:48 - because for a horizontal stack layout we
100:53 - can only control
100:55 - the positioning of the child views on
100:58 - the vertical level right on opposite
101:00 - level so
101:03 - what we can do is we can specify the
101:06 - vertical options
101:07 - for vertical options then we can specify
101:10 - start
101:13 - Center
101:15 - and end so when we do that you can see
101:18 - the start goes to the top right
101:22 - because that's the agua and then blue is
101:25 - in the center
101:28 - and red is at the bottom
101:31 - by default we don't specify anything a
101:34 - state at the center right so now you can
101:37 - see that for a horizontal layout you can
101:42 - specify the position
101:44 - vertically whereas for a vertical layout
101:48 - you can specify the position
101:52 - horizontally right using the horizontal
101:55 - options whereas when it's a horizontal
101:58 - layout you can use it vertical options
102:00 - right so that's the takeaway and other
102:03 - than that the spacing is very very
102:06 - important of course again for vertical
102:09 - stack layout you use the height request
102:12 - to specify the size and then you use the
102:16 - width request to specify the size for a
102:20 - horizontal stack layout
102:22 - now let's comment out the horizontal
102:25 - stack layout and then we go back and use
102:28 - the vertical stack layout well let's add
102:31 - a label actually because label behaves
102:33 - differently
102:34 - uh from box view or a button so we're
102:38 - going to say text test label
102:43 - now
102:45 - you can see that it appears
102:48 - at this position so what is this
102:50 - position this is horizontal position and
102:53 - that's the start horizontal position
102:55 - right so if we were to say horizontal
102:58 - options start
103:01 - and it's not going to change anything
103:05 - right so let's also add a background
103:08 - color
103:10 - to say this is let's say gray
103:13 - and now now you can see that the label
103:17 - it's not like if we don't specify the
103:21 - West request of the Box view the whole
103:24 - thing is going to fill
103:26 - the entire screen right on The Wiz
103:31 - whereas for a label it does not
103:34 - fill the entire width but we can use the
103:38 - horizontal options to say fill
103:42 - and when we do that you can see that the
103:45 - entire width is occupied by the label
103:48 - right because the background actually
103:50 - tells us how big it is
103:52 - and again we can use the horizontal
103:54 - options to specify where the text is
103:59 - positioned now you can see that
104:02 - they are positioned differently
104:04 - according to start Center and end right
104:07 - so left middle and right another thing
104:10 - you also want to understand is that
104:13 - layout not only a stack layout all of
104:17 - the layout can be nested right so for
104:20 - example if we put another horizontal
104:24 - stack layout inside the vertical select
104:26 - layout so this is going to appear at the
104:28 - bottom because it's the stack layout
104:30 - right it's a vertical stack layout uh
104:33 - and then we are going to put a label and
104:37 - we're going to say
104:40 - text equals name
104:43 - right
104:45 - and then we are going to say entry so
104:49 - this entry is basically an input field
104:51 - right entry over here
104:54 - and now if I save it what does it look
104:56 - like well you can see that this there's
104:59 - entry field here you can see the the
105:01 - keyboard is showing up
105:03 - so this is a entry but you can actually
105:06 - notice that there is a kind of a
105:08 - misalignment remember that for
105:10 - horizontal stack layout we can actually
105:12 - use vertical options to specify the
105:16 - alignment vertically right so let's
105:17 - actually use vertical options here let's
105:20 - say Center
105:21 - right so that we can align them together
105:23 - vertical options in the center so I'm
105:26 - going to save now you can see that they
105:29 - are aligned together beautifully right
105:31 - so let me remove these squares and if we
105:34 - even put words here you can see that
105:37 - words is aligned with the label name
105:40 - so everything looks perfect
105:43 - and then of course if you want to add a
105:45 - spacing between the label and the entry
105:48 - view that you can use spacing over here
105:51 - and let's say we put five there then
105:54 - added a space here nicely right a gap
105:58 - okay that's everything we want to
106:01 - mention about stack layouts right
106:03 - whether it's a vertical or horizontal
106:07 - let's go ahead and actually work on this
106:10 - this page
106:12 - but remember that we only have two views
106:15 - two meaningful views right a name and
106:18 - email maybe let's add a phone number
106:22 - right
106:25 - and perhaps also a address
106:32 - let's actually uh stop this
106:35 - so we have a few other views and then we
106:40 - can come over here to our contact page
106:43 - and let's delete these
106:46 - experimental layout here and let us add
106:49 - the actual fuse so here I want to use a
106:55 - horizontal stack layout to add the child
106:58 - views right so we are going to have a
107:00 - label just like what we did just now and
107:03 - then this is going to be
107:06 - um the name of the person
107:08 - right and then we are going to have a
107:11 - entry field for it for now there's no
107:14 - data binding yet and of course we're
107:17 - going to add vertical options Center and
107:20 - then another vertical options Center
107:22 - over here now we're going to copy this
107:25 - and we're gonna repeat this a few times
107:28 - all right because the first one is for
107:30 - name the second one let's for email
107:34 - second one the third one is for phone
107:37 - number and maybe the last one is the
107:39 - address okay now you can see we have our
107:43 - name email phone number and address
107:44 - right uh things are not actually aligned
107:47 - properly so for vertical layout we want
107:51 - to add a margin and we are going to say
107:54 - 10 0 0 0
107:57 - then when we do that you can see that
107:59 - the left changed so this is the margin
108:03 - left
108:04 - this is the margin top so let's say I'm
108:06 - going to put 10 on the top as well
108:09 - then you can see that it actually moved
108:12 - down a little bit right so maybe uh the
108:15 - margin 10 is not enough so let's specify
108:18 - 20.
108:19 - right so that's better and then you can
108:22 - see that uh the entry fields are not
108:25 - aligned to the left so then how do we
108:27 - fix that problem we can specify the wish
108:29 - request for each one of the labels
108:32 - all right let's say each one of them is
108:36 - 80 and then you can see that they are
108:38 - aligned together but it seems that 80 is
108:41 - too much so maybe uh let's say 60. now
108:45 - that looks much better but if you want
108:46 - to make a little bit better we can add a
108:48 - frame
108:50 - around the horizontal layout
108:53 - okay so when we do that you can see that
108:55 - name field becomes like this so why this
108:58 - side the right hand side is sticking to
109:00 - the Border that's because we didn't add
109:03 - a margin here so uh we so this is
109:08 - remember this is left and this is top
109:09 - and this is right so we need to add the
109:12 - same margin as the the left margin so
109:15 - the right margin now becomes 20 and now
109:18 - you can see that the frame basically
109:20 - provides a border and it has a radius so
109:23 - that looks pretty good but then it's too
109:25 - big right it's too big so but we can
109:27 - specify the padding all right the
109:30 - padding is the inner side right margin
109:32 - is the the outside and the padding is
109:34 - inside if we specify zero to all of them
109:38 - then it becomes like this it doesn't
109:40 - looks really good so let's specify the
109:42 - left hand side to be 10 and the the
109:45 - right hand side to be 10 as well then
109:48 - now it looks pretty good so maybe we can
109:50 - add
109:52 - top padding to be two and bottom to be
109:54 - two and make it look a little bit better
109:57 - right so now we can put frame on each
110:00 - one of those horizontal layout
110:03 - and now we have all of the views
110:05 - beautifully displayed on the screen
110:08 - perhaps I want to see a bigger gap on
110:12 - the top so maybe uh 20s the top margin
110:16 - so now everything looks much better so
110:20 - that's what I want to cover for this
110:22 - video and I'll see you in the next one
110:25 - in this video we are going to continue
110:27 - working on the edit connect page
110:30 - okay so we had this these fields
110:33 - displayed but one of the things that the
110:36 - added contact page needs to do is to
110:38 - display the contact information so we're
110:41 - going to work on that first in this
110:43 - video let's review we added the phone
110:45 - and address views in the connect class
110:49 - so now we go to the contact repository
110:51 - maybe we should you know initialize them
110:54 - maybe we don't have to right we don't
110:57 - have to initialize them
110:59 - so let's review that we do have this get
111:03 - contact by ID method already
111:06 - so this will help us to pull the
111:09 - information
111:10 - right and then let's go to the edit
111:13 - contact page
111:15 - and let's review that we already have
111:17 - this uh parameter that is passed in
111:20 - right and this property receive the ID
111:24 - parameter from the URL and that retrieve
111:27 - uh the contact object from our
111:30 - Repository
111:31 - and here we're supposed to assign the
111:34 - information of the contact to our views
111:37 - right here we have this these entries
111:40 - later we're going to use data binding
111:42 - but for now we're just going to use name
111:46 - right we're using the event-driven
111:48 - approach first and then followed by mvpm
111:51 - so now we're going to use names to
111:54 - reference so here this is this is entry
111:58 - name and this one would be entry email
112:01 - phone number
112:03 - last but not least address okay so let's
112:07 - go to the code behind
112:09 - and let's assign those values over here
112:11 - so Ng
112:13 - name
112:14 - Dot text equal
112:18 - to well first of all this get contact by
112:21 - ID matter May return nothing right if
112:25 - the ID is incorrect that shouldn't
112:28 - happen
112:29 - but just to be safe we are going to say
112:33 - if
112:35 - contact is not now then we are going to
112:38 - assign values to these views right so
112:42 - this is name
112:44 - and then we have entry dot address TX
112:49 - text equals contact dot address email
112:55 - all right so we have all four views in
112:59 - here while we are here we're gonna put
113:01 - this cancel button back
113:04 - okay so let's go to the front end also
113:07 - put our cancel button at the bottom
113:11 - okay and let's delete the original stack
113:14 - layout
113:18 - let's put it over here at the bottom and
113:21 - let's run the application to see whether
113:22 - we can see the information of the
113:24 - contact
113:26 - all right okay it's running so let's go
113:29 - to one of the contact now you can see
113:31 - it's pulling the information in
113:33 - we can see the name we can see the email
113:35 - we don't have the phone number and we
113:37 - don't have the address
113:38 - click on the cancel button to make sure
113:40 - that we can go back to our contacts page
113:43 - all right let's go to another one make
113:46 - sure it's polling the correct
113:48 - information all the time
113:49 - right all right it's doing pretty good
113:52 - and we're going to try all of our
113:54 - contacts
113:55 - and this time it's Jane Doe so that's
113:58 - pretty good so that's pretty good now we
114:01 - should work on our updates for that
114:04 - let's go to our repository first and
114:07 - let's create a update method
114:10 - again it's going to be a static method
114:13 - and it's going to be a void function
114:16 - and I'm going to call it optic contact
114:20 - and first of all we're going to have the
114:23 - ID to specify which contact we want to
114:27 - update and then we're going to pass in
114:29 - the the information that contains
114:32 - the information that needs to be used to
114:34 - update existing records right
114:37 - so first of all we will need to make
114:40 - sure that the ID that is passed in is
114:44 - the same as the IDS in the contact
114:47 - object right so if they're not the same
114:50 - I'm just I'm just going to return
114:55 - right and at this point they're the same
114:57 - so because we're using a memory database
115:00 - so we may encounter a problem here but
115:03 - we will try to fix that problem when we
115:05 - encounter that for now let's just code
115:07 - normally right so what are we going to
115:10 - do we are going to
115:13 - um use the get config by ID right first
115:16 - of all we're going to
115:18 - get our Target contact to be updated
115:21 - right so contact to
115:24 - update equals
115:28 - get
115:30 - contact by ID and we just provide the ID
115:33 - here and
115:36 - we need to make sure that contact is
115:40 - in the data store right so if it's not
115:44 - now then we start updating eventually
115:46 - when we use a database for example we're
115:48 - not going to do this but for now we will
115:50 - need to update a few manually of course
115:53 - we're not going to update the ID but we
115:56 - are going to update all of the other
115:58 - views
116:00 - so we have email
116:04 - name and phone number if you want to use
116:07 - automaper for example you can use that
116:09 - but I think we don't have a lot of views
116:11 - so I'm just manually populating them
116:13 - again if you're interested you can check
116:16 - out Auto mapper
116:19 - right but I'm not going to use Auto
116:21 - mapper in this course
116:23 - so now we have the update contact method
116:27 - right and let's go back to our front end
116:30 - and we need to add a button and that
116:32 - button is going to be the contact button
116:35 - right do we have a spacing here
116:37 - we do have a 10 spacing so that's pretty
116:40 - good we don't have to adjust positioning
116:42 - so this is going to be called BTN update
116:45 - and of course
116:47 - the text is going to be update
116:50 - and we're going to generate a new event
116:53 - handler here by doing this
116:56 - right and let's just click right click
116:59 - on it and then go to view then we can
117:03 - see we have our new method here
117:07 - so this is the event handler and here we
117:10 - can use the category repository to do
117:13 - the update right we have the update
117:15 - method already remember we are not using
117:18 - data binding so we will need to get
117:22 - information from each one of these
117:24 - fields right so what should we do we can
117:30 - say contact remember we have a contact
117:32 - already right defined over here and it's
117:35 - populated with the contact ID method the
117:38 - setter the contact ID property right
117:40 - with the setter here
117:42 - so we can say that contact dot name
117:45 - equals entry name.txt contact Dot
117:51 - address equals entry
117:54 - address dot text so one of the reasons
117:58 - to use mvvm is to eliminate the process
118:01 - of autumn manually populating the fuse
118:04 - right that's one of the reasons imagine
118:06 - you have a lot of fields and you have to
118:08 - do this many many times that's that's
118:10 - definitely a pain
118:12 - okay so I have all of the views
118:14 - populated now I can say contact
118:18 - dot contact ID
118:22 - right and then here I'm just passing in
118:26 - the contact object
118:28 - okay so after I update the contact what
118:32 - do I do of course I'm going to just
118:35 - navigate back to the previous page which
118:38 - is the contacts page so that's the same
118:41 - effect of clicking on the cancel button
118:44 - okay
118:45 - so let's give it a try and see whether
118:49 - it works or not
118:53 - all right so let's go to any of the
118:56 - contact
118:57 - and let's for example add a phone number
119:01 - is putting a random number here
119:04 - and then I'm going to click on the
119:05 - update button but before I do that let's
119:08 - go to the configure repository and then
119:10 - let's set a breakpoint here
119:12 - right
119:13 - I'm expecting a problem
119:16 - but let's see whether we have that
119:18 - problem or not
119:19 - okay so I have the counter id4 which is
119:22 - correct right and then I have
119:26 - the phone number in here
119:28 - but let's take a look at this contact
119:31 - object and let's find the last one which
119:34 - is
119:35 - number four
119:38 - right and you can see that there is
119:40 - already a full number you don't even
119:41 - need to update why is that like I
119:44 - mentioned just now this is a in-memory
119:47 - data store and when we call the get
119:51 - contact by ID we're returning the object
119:54 - inside this list so basically this
119:58 - reference is returned back
120:00 - so therefore when we are
120:04 - um in the added contact page when we
120:05 - when we handle the update event we
120:09 - already updated that object in the list
120:12 - directly then we don't even need to do
120:14 - the update here because it's already
120:16 - updated so that is incorrect because in
120:20 - the actual data store we don't return a
120:23 - reference of the object in the in the
120:26 - server right so so for example if
120:28 - there's a SQL Server there is an
120:29 - instance of the server that's running
120:31 - that's true but we don't return that we
120:34 - return a copy of that value right so
120:38 - therefore we will have to stop debugging
120:41 - and we have to fix the problem so how do
120:44 - we fix that problem we have to return a
120:47 - copy here so this is the contact that we
120:51 - found right and uh we're gonna say if
120:55 - contact
120:57 - is not now
121:00 - then we're gonna make a copy right we're
121:02 - gonna make a copy of the contact
121:05 - if the contact is now
121:08 - and then of course we're just returning
121:10 - now here
121:11 - okay and also most importantly the
121:15 - contact ID has to be populated as well
121:18 - okay so we fixed this problem here but
121:21 - remember that we actually use the get
121:23 - contact ID get contact by ID method down
121:26 - in here and then we updating
121:28 - this contact to update
121:30 - but however
121:32 - because we created a copy of the contact
121:37 - so we cannot use the get contact by ID
121:39 - anymore because this is a copy we Our
121:42 - intention is to actually update
121:45 - the object in that list right in which
121:48 - list in this list so what we can do is
121:52 - we can actually just copy this
121:55 - right we use Lambda expression to
121:57 - actually find
121:59 - the uh the contact to update so we
122:03 - change this variable to contact to
122:05 - update and change this variable to
122:07 - contact to update and then we close our
122:09 - if statement and then we put our uh
122:14 - logic inside
122:16 - this particular if statement
122:19 - okay
122:20 - so you can see that we use we directly
122:24 - looks for the contact object whose ID is
122:28 - the same as the ID that is passed in and
122:30 - then we if we can find the contact to
122:33 - update object then we update it so this
122:36 - time it should fix our problem and then
122:39 - let's run the application again
122:42 - okay let's choose one of them for
122:44 - example if I choose myself and then
122:46 - let's actually make a change in the
122:48 - email as well so I'm gonna put a dot
122:50 - between Frank and you so instead of
122:53 - frankly it becomes frank.lu and then I'm
122:56 - just going to put a a random phone
122:58 - number here
123:02 - if I click on the update button it's
123:04 - going to take me to the contact list
123:07 - right let's uh set up breakpoints do
123:09 - setup breakpoint and make sure that
123:11 - everything is updated properly right so
123:14 - let's go over here we have the contact
123:17 - ID that is passed in and we are able to
123:20 - find the contact to update and then we
123:22 - are updating them updating the the
123:25 - information so let's actually look into
123:27 - our list and let's see that you see that
123:31 - email is updated and the phone number is
123:33 - populated okay so let's continue and
123:36 - remember that we provided we we changed
123:40 - our email address we added a dot in here
123:43 - so let's continue in and watch
123:46 - right now you can see that this frankly
123:48 - you at email address did not change
123:53 - right but watch carefully if I click on
123:56 - this contact list item again
124:00 - going back
124:02 - over here you can see that the dot is
124:04 - here right the dot is here click on the
124:07 - cancel button go back dot is gone so
124:10 - that's a problem and we are going to
124:13 - work on fixing that problem in the next
124:15 - video
124:18 - in the previous video we're having
124:20 - problems of updating the contacts page
124:23 - so let's go to contacts page and see
124:25 - what's happening so we have this
124:28 - Constructor here where we actually use
124:31 - the iconic repository in the Constructor
124:33 - and we get the contacts and we assign
124:38 - the contacts to the item source so you
124:40 - may be thinking that this is the reason
124:42 - because the contacts page once it's
124:45 - activated once it's created it lives
124:48 - there in the memory and when we are back
124:52 - like when we never get back from the
124:55 - added contact page to the contacts page
124:57 - uh this will not be executed so if we
125:02 - can find a place to activate uh to call
125:05 - those two lines of code again we might
125:07 - be able to solve this problem so let's
125:09 - actually do that okay so I'm cutting
125:12 - those two lines and we're trying to
125:14 - override one of the event in the event
125:17 - cycle which is uh on appearing okay so
125:22 - this online appearing is going to be
125:24 - called every time the page regains the
125:28 - focus for example if another page is on
125:31 - top and then when we navigate back to
125:34 - this page then the unappearing will be
125:36 - called of course when the page is just
125:39 - created and the first time it appears
125:41 - the element appearing is going to be
125:43 - called it seems to be the perfect place
125:45 - to
125:47 - um to call these two lines of code and
125:49 - let's actually try that okay let's run
125:51 - the application
125:53 - yeah okay I'm going to go to Tom Hanks
125:56 - and
125:58 - I'm going to make a change
126:01 - right had a thought again and then I
126:04 - don't know his phone number I'm just
126:06 - going to use Toronto's phone number for
126:09 - example
126:10 - random phone number uh clicking on the
126:13 - update button I'm gonna remove this
126:15 - breakpoint continue
126:17 - and you can see we're still having the
126:20 - same problem
126:22 - right still having the same problem
126:24 - if we click on it again you can see it
126:26 - is actually already updated Tom dot X
126:29 - right and we have the phone number but
126:31 - going back
126:33 - it's not showing so what is actually
126:36 - happening
126:37 - what is actually happening you may be
126:39 - thinking oh maybe the unappearing is not
126:41 - being called when we go back let's set a
126:44 - breakpoint and see uh what's actually
126:45 - happening there
126:47 - so I'm appearing I'm going to set a
126:49 - breakpoint here right so let's click on
126:52 - this Tom Hanks go to Tom Hanks and then
126:56 - come back
126:57 - whether we click on cancel or update
127:00 - it's going to navigate back you can see
127:03 - that is actually being called right it's
127:05 - being called and if we look at the
127:09 - contacts
127:10 - I think that's number three right you
127:13 - can see that it's actually have the
127:15 - correct data with the phone number but
127:17 - the problem is with this line so it's it
127:20 - looks like this line is not working
127:22 - and then that's that's true it's not
127:25 - actually not working
127:26 - so let's go do the uh diagram let's draw
127:29 - something so that hopefully I can make
127:32 - you understand what is actually
127:33 - happening so for example we have a page
127:36 - here so this is a page
127:40 - and then this page actually displays
127:41 - some data right so let's make it
127:45 - um vertical so it looks like a cell
127:47 - phone right and then we have some data
127:51 - that is loaded in the in the memory so
127:53 - I'm using a circle to represent that a
127:55 - data is loaded in the memory
127:57 - right but remember that we have a a view
128:02 - a view in here in this case we have a
128:05 - list View and when the list view is
128:08 - populated with the data the list view
128:12 - stores a copy of that data in a
128:15 - different format of course uh
128:18 - in in the memory
128:20 - we have another copy of that data which
128:22 - is in the in the contact Repository
128:26 - these two copies are not the same copy
128:29 - so in dynamoi if you don't notify the
128:34 - list view or any of you there's a change
128:36 - in the data the data in the list View
128:40 - or any other views will not actually
128:43 - update
128:45 - right you have to actually tell it to
128:48 - notify the view that there is a change
128:51 - in the data and then the view will do
128:54 - the update so that's more or less like a
128:56 - unique thing that you have to do in
128:58 - Dynamite if you came from a web
129:01 - application background you may be
129:03 - thinking that's pretty weird but this is
129:05 - this is what's happening in Maui you
129:08 - have to notify it and the way to notify
129:11 - it is to use
129:14 - observable data so it's like observe
129:19 - pattern where you have the data here and
129:23 - then you have the subscribers so you
129:25 - have subscriber one subscriber two you
129:29 - know you have different number of
129:31 - subscribers let's say we only have two
129:33 - and then the subscriber is actually
129:35 - subscribing to the observable data and
129:40 - when the observable data changes it's
129:42 - going to actually send a notification
129:45 - and because both subscriber one and
129:48 - subscriber 2 subscribe to the observable
129:51 - data then it actually receives that
129:55 - notification and then the subscriber can
129:58 - do whatever it wants right so in
130:01 - Dynamite this is already built in
130:04 - okay in the in the views
130:07 - so in our case we have the list view in
130:11 - here and this list view is actually uh
130:15 - when you bind the data to the list view
130:17 - the list view tries to subscribe
130:22 - but because you can see that we are not
130:26 - using observable data so this is just a
130:29 - list list of contacts right it's a
130:32 - regular list
130:33 - so that's why it's not actually working
130:37 - because a regular list cannot send
130:40 - notification to the.net Molly views
130:44 - right in this case is list view so how
130:46 - do we solve this problem
130:48 - let's go back to our code
130:50 - and then in here let's remove the
130:53 - breakpoint
130:54 - instead of just call the repository get
130:58 - contacts we can use
131:00 - observable collection
131:03 - right so a new observable collection
131:08 - you're gonna do control dot to import
131:10 - namespace it's from
131:13 - system.collections.optic model
131:14 - so when we do that and we can provide
131:18 - the type of the element and then in here
131:22 - we can call
131:23 - the repository to provide the data and
131:27 - of course here this is going to be
131:31 - a observable so we can use VAR
131:35 - and now let's rebuild the application
131:38 - and redeploy to our emulator
131:42 - our application is running let's click
131:45 - on one of the contact
131:47 - and let's make the same change I'm going
131:49 - to add actually I'm going to add a dash
131:51 - here
131:52 - and then whatever the phone number is
131:55 - doesn't matter we're going to work on
131:56 - the validation later so clicking on
132:00 - update go back over here you can see
132:02 - that Tom Dash Hanks gmail.com is being
132:06 - displayed so that solves our problem
132:08 - right because we are using observable
132:11 - collection so when the observable
132:13 - collection changes it actually notify
132:16 - the list view so the list view then is
132:19 - able to update itself with the new data
132:22 - otherwise just keep the data in the
132:26 - memory without updating which actually
132:29 - saves the resources right
132:31 - so that's what I want to cover in this
132:33 - video and I'll see you in the next one
132:37 - in the previous videos we have added
132:38 - these fuse in the added connect page in
132:41 - this video we are going to work on
132:43 - validations
132:44 - right for example the name should be
132:46 - required email address should be a valid
132:50 - email address to do that we are going to
132:53 - go to the solution and then we click on
132:57 - manage new get package
132:59 - let's search community
133:03 - toolkit
133:05 - and when we do that we can see we have
133:08 - this community toolkit dot Maui
133:11 - and let's just select our project
133:14 - and click on install
133:19 - and I accept
133:21 - so the toolkit is installed as a nuget
133:23 - package right but then here it's
133:26 - reminding us that we need to add this
133:29 - line to our
133:32 - Maui program.cs so let's go over here
133:35 - and then let's add this line here and
133:38 - then this actually resolved the problem
133:40 - we have this using Community toolkit dot
133:43 - Mali this is automatically added for us
133:45 - so we just added this line which is
133:48 - indicated in the redmi file so we
133:52 - initialized our toolkit in there right
133:54 - so this is for initializing the toolkit
133:56 - let's close the Remy file coming back to
134:00 - the added conic page so how do we use
134:03 - the toolkit in the toolkit they're
134:06 - different of course they're different
134:07 - things the ones that we are interested
134:09 - in are the validation behaviors
134:12 - so for example
134:14 - the name should be a required field
134:17 - right meaning that it cannot be empty so
134:20 - for that we can come over here under the
134:23 - entry like within the entry we can say
134:26 - entry dot behaviors
134:28 - right
134:30 - so this is this is part of the community
134:32 - toolkit that we just installed
134:34 - and then we can then use toolkit this
134:39 - namespace does not exist right so we can
134:42 - create that namespace here just like we
134:46 - created this extension name space so we
134:50 - need to do a XM XML namespace colon
134:55 - toolkit you don't have the color toolkit
134:57 - you can call it whatever you want but
134:59 - here we need to refer to the toolkit
135:02 - right the Maui took it that we just
135:04 - added
135:05 - and then here we can use toolkit colon
135:09 - and you can see there's different
135:11 - behaviors right there's even the
135:14 - animation Behavior you can use for
135:16 - animation but today we're going to cover
135:17 - some of the validation behaviors like
135:20 - first of all
135:21 - four required field we can use the text
135:24 - Behavior which is at the bottom right
135:27 - text Behavior
135:29 - and then you can close it don't have to
135:31 - close it this like this we can close it
135:33 - just like this
135:35 - there are several properties in here to
135:37 - make this text validation Behavior work
135:41 - like a required field validation
135:43 - Behavior we can just set the minimum
135:46 - lens to be one right so at least there
135:48 - has to be one character
135:50 - right
135:51 - another important property here is the
135:54 - flex so this configures the behavior of
135:58 - the text validation so do we validate on
136:01 - attaching do we validate on focusing of
136:05 - the entry field or do we validate on
136:07 - value change I would suggest to validate
136:11 - on a combination of both attaching right
136:15 - so you can do a comma and then validate
136:18 - on value change
136:20 - so this guarantees that in any scenario
136:23 - it's going to work for example let's say
136:25 - this is a add contact page
136:28 - so when you come to the ad connect page
136:31 - all of the views are empty so you're
136:33 - looking at the name field and if you
136:35 - don't even touch it if you only specify
136:37 - the validate on value change flag here
136:40 - then when you click on the add button or
136:43 - submit button it's not even going to
136:46 - trigger the validation because you
136:48 - didn't even change anything you didn't
136:51 - even touch the field so the field is not
136:53 - dirty it's not going to actually trigger
136:55 - the validation at all that's why we also
136:59 - need the validate on attaching that
137:02 - means that when the validation behavior
137:04 - is is attached to the entry field it
137:08 - does the validation already right which
137:10 - it will see that the field is empty and
137:14 - then it will know that it's invalid
137:17 - so we need a combination of this
137:21 - right and then in order to reference
137:25 - the validation field we need to give it
137:28 - a name
137:30 - so we can call it name validator
137:34 - another important property I want to
137:37 - mention but I'm not going to use today
137:39 - is the regular expression pattern
137:42 - property right so you can use this to
137:44 - limit the format of the text in the
137:47 - entry field so let's delete this
137:50 - okay
137:51 - so we're saying that name is a required
137:53 - field right so so then how do we spit
137:55 - out the error message so for that we can
137:58 - go to the code behind
138:00 - let's go to the code behind and just
138:02 - before everything in the update clicked
138:05 - event handler we can then say if if name
138:10 - validator
138:12 - is valid there is it is valid or is not
138:15 - valid so if it's not valid then we're
138:18 - gonna just return right but before we
138:20 - return we can split up the error message
138:22 - by saying display alert
138:25 - and then the title is error the message
138:29 - is
138:31 - name is required
138:33 - right and then you say okay so this will
138:38 - help us to validate the name so let's
138:40 - give it a try
138:42 - okay the application is running and
138:45 - let's go to one of the contact and of
138:48 - course you know we only apply the
138:50 - validator on the name field and there is
138:52 - a value in here so it definitely is
138:55 - valid so let's actually give it a try
138:57 - click on update nothing's happening it's
139:00 - valid so let's go back
139:02 - and then let's try to delete this field
139:06 - delete the name fill
139:08 - and click on the update
139:10 - now the area is showing
139:13 - it's complaining that name is required
139:16 - so now let's go back and let's put some
139:18 - name over here let's just say whatever
139:21 - name
139:23 - and then click on the update button
139:25 - again
139:27 - now it's updated we can see the updated
139:29 - name over here and then let's go back
139:31 - and fix the name
139:35 - okay that's a simple validation
139:38 - so let's add another one
139:40 - which is for email validation
139:44 - so let's go to email
139:46 - so when we look at the email address of
139:47 - course we may think we need multiple
139:51 - validation behaviors because the email
139:53 - address may be required right for a
139:55 - contact application maybe email address
139:57 - is not actually required but for
139:59 - demonstration purpose I want to make it
140:01 - a little bit complex than the name right
140:05 - let's say that email address is required
140:07 - and of course email address format has
140:10 - to be correct email address format right
140:12 - so for that we actually have a thing in
140:16 - the toolkit that is called
140:17 - multi-validation Behavior so let's use
140:20 - that
140:21 - right because that one
140:23 - um within the multi-validation behavior
140:25 - you can combine different
140:27 - validation behaviors
140:30 - so in here again we're going to say
140:32 - entry dot behaviors
140:35 - right and then within that we're gonna
140:38 - have toolkit and then we're gonna have a
140:41 - multi-validation behavior okay
140:44 - and
140:47 - of course we are going to give it a name
140:50 - we need to
140:51 - reference that I'm going to call it
140:54 - email validator and the flags will be
140:57 - the same so let's copy these two and
140:59 - then within the multi-validation
141:01 - behavior we can have multiple validation
141:05 - behaviors so the first one would be the
141:07 - text validation
141:09 - so let's copy the previous tax
141:11 - validation Behavior over
141:13 - here and then let's remove the name
141:17 - because we don't need a name for this
141:20 - right so this validation Behavior
141:23 - provides us the required field
141:25 - validation secondly we will need the
141:29 - email validation behavior and our same
141:33 - Flags
141:35 - inside multi-validation Behavior there's
141:38 - a way to provide error messages
141:41 - so to do that we're going to say toolkit
141:45 - dot multi-validation Behavior dot error
141:49 - message right and then here uh in the
141:52 - text validation Behavior we can just say
141:55 - email is required
141:59 - right and then let's copy this over to
142:02 - the email Edition
142:04 - and the message would be different
142:07 - email format is invalid
142:11 - and now we're ready to go back to our
142:14 - code behind to trigger the validation
142:17 - for the multi-validation behavior and
142:20 - for that we are just going to use the
142:23 - same way I'm going to say email
142:24 - validator if it's invalid
142:27 - then of course going to return first and
142:30 - then before that
142:32 - we are going to Loop through the error
142:36 - messages
142:37 - off the Modi validation Behavior
142:41 - so for each error in email
142:45 - validator
142:48 - Dot errors you see it's a list of
142:51 - objects but it's actually a list of
142:53 - string
142:55 - so for that we can just display the
142:58 - alert
142:59 - and we can just play multiple alert or
143:02 - you can bind them together in a string
143:04 - builder for example and just display
143:05 - everything in one display alert in one
143:09 - alert
143:10 - but to simplify this I'm just going to
143:13 - show all of them one by one so error
143:17 - and then we can say to string so this is
143:20 - the message and then the cancel button
143:23 - is okay all right so let's give it a try
143:28 - okay let's go to one of them
143:31 - so of course I have a valid email
143:34 - address already so let's test this let's
143:37 - delete the field and then click on the
143:40 - update button
143:42 - this is the email format is invalid
143:45 - and then also says email is required
143:50 - right so it spit out all of the error
143:52 - messages that we are expecting
143:55 - so let's say I'm going to put a invalid
143:58 - email address a b c
144:01 - so click on the update
144:03 - now I see email format is invalid click
144:07 - on OK
144:08 - you can see that the required field
144:10 - validation is not triggered anymore
144:13 - so
144:15 - I can just provide a email address click
144:18 - on update button going back you can see
144:20 - that my email address is changed
144:22 - validation behavior is not triggered so
144:25 - everything works correctly so this is
144:27 - what I want to show in this video I'll
144:30 - see you in the next one
144:35 - so we have created the added connect
144:38 - page we have done the view validations
144:41 - so there's a lot of work if we are going
144:43 - to create a add contact page
144:46 - the two pages look very very similar
144:48 - right the functionalities are different
144:51 - one of um add a page is to update
144:55 - contact the add page is to add a new
144:58 - contact
144:59 - so because of the similarities we need
145:03 - to think about create a reusable control
145:06 - so that we can share that control
145:08 - between these two pages so today in this
145:11 - video we are going to work on creating a
145:15 - reusable control
145:17 - okay let's go to the Views folder and
145:20 - let's right click and create a new
145:23 - folder and let's call it controls and to
145:27 - create a reusable control we are going
145:30 - to create a new item
145:32 - and we're going to search content view
145:35 - okay
145:36 - and then we're going to select the demo
145:38 - version
145:41 - and we can call it just contact control
145:43 - right within the contact control we can
145:46 - see there are some placeholders and this
145:48 - is content view this is not content page
145:50 - anymore so what we can do is that we can
145:54 - go to edit contact page and then we can
145:57 - basically select everything and cut it
145:59 - over
146:02 - okay let's cut it over to the content
146:05 - control here right replace this vertical
146:08 - layout
146:10 - and you can see that we only have one
146:12 - problem which is this toolkit namespace
146:15 - problem so for that we can just fix that
146:18 - very easily and call it toolkit just
146:22 - like before
146:24 - referring to this toolkit now you can
146:27 - see that we don't have any problems in
146:28 - here now let's look at this contact
146:30 - control
146:31 - what do we have here we have these
146:34 - fields the name email red phone and
146:37 - address
146:39 - and these fuse needs to be shared out
146:42 - right currently it's within the entry
146:45 - email
146:46 - and entry name all of these entry views
146:50 - okay so we will need to share that out
146:53 - through a property so let's create the
146:57 - first property which is going to be the
146:59 - name
147:00 - and
147:02 - we're just going to call it name right
147:04 - because this is a Content control name
147:06 - reverse name of the contact of course
147:09 - here we cannot use a regular empty
147:12 - Getters and Setters so for getter we
147:15 - will just return the entry name dot text
147:20 - right and as you guessed the setter will
147:23 - just set the entry name
147:27 - dot text equals to the value right now
147:31 - I'll do that the the rest and then I'll
147:33 - come back okay so I've created all of
147:36 - them I have email address and phone
147:39 - number
147:40 - for sharing properties values uh we're
147:43 - good now we go back to the front end we
147:46 - can see we have taken care of these
147:48 - properties what about the buttons down
147:51 - below
147:52 - right we have update button we have a
147:54 - cancel button I think we should change
147:56 - the name from update to save right and
147:59 - then here it's called save
148:03 - just so that it can be reused in both ad
148:06 - and edit page and here we are going to
148:11 - create a new event handler and for this
148:15 - one as well create a new event handler
148:19 - going back to the code behind
148:23 - and we have these two event handler here
148:27 - we don't need to take care of the
148:29 - routing right the navigation but we do
148:32 - need to validate okay so let's go back
148:36 - to the edit contact page
148:39 - and let's think about how we can
148:42 - implement the validation here you can
148:44 - just cut this code
148:46 - and go back to the connect control and
148:49 - then we can do our validation inside
148:51 - here but the problem is that display
148:54 - alert is not available display alert is
148:59 - only available in in the page right it's
149:03 - basically a Content page so let's
149:05 - actually actually let's go back to our
149:08 - uh add a contact page if I do a control
149:11 - Z to undo the change and then if I right
149:15 - click if I actually hover my mouse over
149:18 - it you can see it's the display alert is
149:21 - from page right and our content page is
149:27 - a page
149:28 - but the content view is not a page so
149:32 - display alert is not available here but
149:35 - that's fine that's fine we are going to
149:38 - delete it
149:40 - or both of them
149:42 - but here
149:44 - we will need to
149:46 - spit out the error so how do we speed up
149:49 - error we need to create a event
149:52 - uh it's like a delegate in C sharp so
149:56 - here we can create an event uh it's
149:59 - going to be an event handler and then
150:01 - the the parameter is going to be a
150:03 - string which will be the error message
150:06 - itself
150:07 - and then the event itself is going to be
150:10 - called on error okay
150:12 - so we can then scroll down to the bottom
150:16 - and then here if we encounter a problem
150:19 - right then we will need to speed up that
150:23 - error message we're going to say on
150:25 - error right and we need to use a
150:28 - question mark so basically if the event
150:31 - handler is registered right from outside
150:33 - then we're going to invoke the event
150:36 - otherwise we don't right that's the
150:38 - purpose of this question mark here I'm
150:40 - going to type Dot and then invoke right
150:43 - and then who is the sender so we can
150:45 - just pass the center from the event The
150:48 - Click event and then what is the error
150:51 - message
150:52 - so that would be the same error message
150:54 - that we had before I wish I didn't
150:56 - delete them and just comment them out so
150:58 - that I don't have to type this but its
151:00 - name is required right and then I'm
151:02 - going to copy this and put it over here
151:05 - uh the only difference here is that the
151:09 - error message is different so it's going
151:12 - to be error.2 string
151:15 - and that's it
151:17 - right that's it
151:19 - but how does the parent control knows
151:22 - that the save button is actually clicked
151:24 - on
151:25 - for that we actually need to create
151:27 - another event
151:29 - and type is event handler this time we
151:33 - can just use event arguments
151:37 - and this is on Save
151:40 - right and since we are here we're going
151:44 - to also
151:46 - um
151:47 - react to the cancel button click right
151:49 - so then here
151:52 - when everything is validated then we can
151:55 - tell our parent page whichever page that
151:58 - uses this control that the user clicked
152:01 - on the save button it's actually
152:03 - validated already right so whenever this
152:06 - event on Save is triggered
152:08 - is revoked we have already validated
152:12 - right so here we can just invoke and
152:15 - then we use the sender and also the
152:17 - event argument from the clicked event
152:20 - okay and then of course on cancel
152:24 - uh we can just say on cancel and then we
152:27 - invoke that event with the sender and
152:30 - the event argument that's basically it
152:33 - that's our reusable contact control so
152:36 - now now let's try to use it go back to
152:39 - the added contact page and then let's
152:42 - see how we can use the reusable control
152:45 - first of all
152:46 - to use this new control we need to
152:50 - provide the namespace because if we just
152:53 - type the control name right contact
152:57 - control it's not defined here so let's
153:00 - go to here and then
153:02 - we're gonna say controls again whatever
153:05 - name you choose I'm choosing controls
153:07 - and then
153:09 - it's under controls
153:12 - so we can find it right here
153:17 - then we can say controls providing the
153:20 - namespace
153:22 - well it's already showing up right all
153:24 - of them already showing up there's only
153:26 - one
153:27 - uh and then we can give it a name
153:30 - and we can call it contact control and
153:33 - then we're going to register a unsafe
153:36 - event handler here
153:38 - and we're going to create a new one
153:40 - actually
153:41 - um we're not going to create a new one
153:43 - we're going to create we're going to
153:45 - reuse
153:46 - one because there's already one so it's
153:49 - this update right
153:51 - and then here on cancel again we're
153:54 - going to reuse this one
153:56 - but on error we don't have it we can
153:59 - create a new event handler
154:02 - right and that's it
154:04 - you can see it is very very simple on
154:06 - the front end go back to the back end
154:09 - uh it's even simpler because we are
154:12 - reusing these event handlers this unsafe
154:16 - we don't use it anymore we don't use it
154:19 - we can delete it uh the only thing that
154:21 - needs to be changed is here we don't
154:23 - have the the entry views anymore so the
154:27 - what we can do is we can say
154:30 - contact control contract I use the wrong
154:34 - names it should be contact
154:38 - instead of contract right contact
154:41 - control so go back here and we need to
154:44 - fix this as well contact control on
154:47 - error okay
154:49 - so here we're going to say contact
154:54 - control dot name
154:57 - right and then this is going to be
155:00 - contact control dot address and contact
155:02 - control dot email last but not least
155:04 - contact control.phone number okay and
155:08 - then here the validations don't need to
155:10 - be happening here anymore because this
155:13 - event handler will only be invoked
155:17 - or triggered when validation has
155:21 - finished right has passed what we do
155:24 - need to change is these assignments so I
155:28 - can just delete all of them and then I'm
155:32 - going to copy
155:34 - from here
155:38 - and paste it over here
155:42 - okay
155:43 - and then just fix the problems
155:46 - okay so now on error what do we need to
155:49 - do when we encounter an error this is a
155:54 - string which contains the error message
155:55 - so of course we just use the display
155:58 - alert from the page class and then title
156:03 - is going to be error as Euro message is
156:07 - just the
156:09 - message and then cancel is ok button
156:14 - so that's it that's how we use our
156:16 - reusable contact control let's let's
156:18 - give it a test
156:22 - okay you can see the applications
156:24 - running let's click on any one of them
156:27 - and now we see the add a contact page no
156:30 - difference
156:31 - let's try to see whether we can update
156:35 - I put a dot there but let me actually
156:37 - delete
156:38 - the
156:40 - add sign just try to trigger the
156:43 - validation problem right so email format
156:46 - is invalid so that's validation is
156:49 - going on properly let's also
156:53 - try to delete the whole thing
156:57 - and then click on save this time it
157:00 - tells us not only the format is invalid
157:03 - but also it's required so let's put back
157:06 - the email address so John dot doe
157:11 - gmail.com and then click on the save
157:14 - button now I have John Doe gmail.com
157:17 - going back
157:19 - phone number is
157:23 - whatever
157:27 - right address is one
157:30 - let's say Toronto Street
157:35 - click on save button
157:38 - and everything is basically still
157:40 - working right but this time we're using
157:42 - our reusable contact control in the next
157:46 - video we're gonna use the control the
157:49 - contact control in the add contact page
157:53 - and we're going to work on adding
157:55 - contact
157:56 - I'll see you in the next one
157:59 - in this video we're going to work on the
158:01 - add contact page
158:03 - but first of all going to the add
158:05 - contact page is triggered from the
158:07 - contacts page right so this is the
158:10 - contacts page I'm looking at right now
158:13 - and it has a list View
158:15 - and a list view is just a single view so
158:19 - we really need to have a list view in a
158:22 - layout so we have talked about
158:25 - the stack layout before today instead of
158:30 - using stack layout I would like to use
158:33 - the grid so that we can learn more
158:36 - things so a grade is basically like a
158:39 - table it has columns and rows
158:42 - right so if I put a grate here
158:45 - so
158:47 - if I don't specify columns or rows
158:51 - then you can basically just put a list
158:53 - view here right one view is going to
158:56 - still work you're not actually using a
158:59 - grade as a grade right
159:02 - to use it properly we need to Define
159:04 - like how many columns and how many rows
159:07 - and how big each column or rows are
159:10 - right for that we need two properties
159:13 - one is called row definition so you can
159:17 - see role definitions and for this
159:20 - particular page we are going to have the
159:23 - list view in the first row and then a
159:25 - button which is the add button in the
159:28 - second row so we have two rows
159:31 - so here we basically in the row
159:33 - definition we just specify the height
159:36 - like x y z so in this case we have uh
159:43 - three rows
159:44 - and the first Row's height is X the
159:47 - second Row's height is y and of course
159:50 - the last Row's height is z but what
159:53 - about you don't want to actually specify
159:55 - a specific number
159:57 - you just want to say the last row is for
160:01 - example 50 and then the first row takes
160:04 - the rest of the space then you can just
160:06 - say start right star means it takes as
160:09 - much as it can and then we can specify
160:12 - the column definition
160:15 - how many columns do I do we have and how
160:18 - big is each column right so it's the
160:20 - same format x y z each one of them has
160:23 - to be a number you can see that is
160:24 - complaining you cannot use x by Z
160:27 - because it doesn't really know how big
160:29 - what H1 column is so in this case we
160:32 - actually only have one column
160:36 - right and then in the list viewer in in
160:40 - The Insider grade we need to specify
160:42 - which row and column each view is within
160:47 - so the list view is in row number one
160:52 - and column number one so we can just say
160:56 - Great Dot row number one this is the
161:00 - index starting from zero so basically
161:02 - when we refer to the first row we're
161:05 - going to say zero right and then and
161:08 - then of course the column is also zero
161:11 - now when it comes to the second one
161:13 - which is going to be a button and we'll
161:16 - give it a name first
161:19 - this is going to be a add button and the
161:22 - text is add contact for example and we
161:27 - are going to add a
161:29 - collect event handler
161:31 - since we're here already
161:33 - okay but this button needs to be in the
161:37 - second row and First Column so we're
161:40 - going to say grade dot row
161:43 - second second row is number one
161:46 - and grade dot column
161:50 - and it's going to be zero the first call
161:53 - all right
161:54 - let's run the application and see
161:56 - whether we have a correct page we can't
162:00 - see anything in the application but I
162:02 - noticed that I made a mistake here it's
162:04 - not this is not number of columns this
162:07 - is how big the column is because we only
162:09 - have one so we can use star because this
162:11 - column should expand to as much as it
162:14 - should right so now we can see all of
162:17 - the data in the back end let's go to the
162:19 - view code
162:20 - we have this at event handler here we
162:25 - want to navigate to
162:28 - our ad contact page okay so let's
162:31 - continue working on coding the added the
162:34 - add contact page so let's go to add
162:37 - contact page there's basically this
162:39 - welcome page right so there's basically
162:41 - nothing in it it does have a a cancel
162:44 - button
162:45 - so we don't need any of this because the
162:50 - contact control already has a cancel
162:52 - button and it has everything else that
162:54 - we need so basically we can go to the
162:57 - added contact page and we can just copy
162:59 - this
163:01 - and go back to add contact page and then
163:05 - we just
163:08 - replace
163:09 - this
163:10 - replace everything of course the
163:13 - namespace also needs to be added
163:15 - so we can go to the top
163:17 - and then we can specify the controls
163:21 - come from the controls which is right
163:24 - here and now the problem is fixed so
163:28 - um on Save needs to be recreated the
163:31 - event handler
163:33 - new Handler
163:36 - on cancel
163:38 - new Handler and on error
163:45 - also needs to be create a new event
163:46 - handler
163:48 - that's it at the front end very simple
163:50 - as the beauty of creating a reusable
163:53 - control we don't do a lot of work
163:55 - because all of the work already been
163:56 - done right going back to the back end
164:00 - save
164:02 - so what should we do on unsafe we need
164:06 - to call the repository to add the new
164:10 - contact but do we already have a add
164:14 - method here we don't so first of all we
164:16 - need to create a add contact method okay
164:20 - so here we create a static method and
164:24 - then we're gonna it's gonna be void and
164:27 - I'm gonna call it add contact
164:31 - and of course uh the parameter is a
164:35 - contact
164:36 - and then we are going to first of all we
164:39 - need to get a maximum ID right remember
164:41 - this is a
164:43 - memory so
164:46 - in memory data store so we need to
164:48 - manually get the the ID so we need to
164:51 - get the contact ID the maximum contact
164:55 - ID right and then we can say contact dot
165:01 - contact ID so we assign the ID to it
165:05 - so it's maximum ID plus one right and
165:08 - after that we can just add this contact
165:11 - into the contacts list okay so that's it
165:14 - that's our method very simple method
165:17 - without much validation you know if we
165:19 - add a duplicate contact we can always
165:22 - try to delete it which we're going to
165:24 - work on later
165:25 - so coming back to the add contact page
165:28 - inside save event handler we can use the
165:32 - contact Repository
165:36 - and then we can call the add contact
165:39 - of course here we need to create a new
165:42 - contact
165:43 - okay just like this and then we can
165:46 - specify the name equals to contact
165:50 - control
165:52 - dot name right remember that we exposed
165:56 - we expose all of the property out and
165:59 - then Visual Studio is suggesting email
166:01 - equals to email
166:03 - I hope it actually suggests the next one
166:05 - but it doesn't
166:06 - it doesn't always help but it's
166:09 - already helping a little bit
166:11 - then we just specify address is address
166:14 - and phone is phone and then we close
166:18 - with a semicolon so that's our ad
166:22 - contact remember here when it comes to
166:25 - this method everything's already
166:27 - validated right it's a valid contact
166:31 - and then if there is an error then this
166:34 - on error event handler will be triggered
166:37 - and the only thing we need to do here is
166:39 - just to display the error message
166:41 - right so we can say this play alert
166:45 - and the title is error
166:48 - message is from the event argument and
166:53 - the cancel button is okay
166:55 - so this e is the error message that
166:58 - comes from the parameter here which is
167:00 - the event argument of that event handler
167:04 - and then of course the shell um the on
167:07 - cancel event handler just basically you
167:10 - know go back
167:12 - you can just uh shell.current Dot
167:16 - go to async and where are we going we
167:20 - are going back to the contact page we
167:23 - can use dot dot but if not then we can
167:28 - use
167:29 - um
167:32 - specify the root right and then we can
167:34 - say name of
167:37 - I think we already have a
167:39 - yeah we already have a console
167:42 - so in here we created a new event
167:45 - handler
167:46 - that's fine we can just copy this over
167:55 - okay so when we go to the root we always
167:57 - try to specify slash slash or if we
168:01 - don't then we can use dot dot to
168:03 - navigate back to the to the previous
168:05 - page
168:06 - right to the parent page so I think
168:09 - that's everything let's give it a try
168:13 - I know there's a problem here that after
168:15 - this add contact we need to navigate
168:17 - back to the contacts page so I just
168:19 - duplicated this line here
168:22 - okay now let's give it a try
168:25 - okay so we have this list of contacts
168:27 - and then we can click on any of them
168:30 - going to the added contact page still
168:32 - working
168:33 - now let's test the add contact page so I
168:38 - think we're having some problems here
168:40 - with the layout
168:41 - okay so let's try to fix the layout
168:43 - problem first
168:45 - because the hot reload actually
168:48 - works for the front end so we don't have
168:51 - to stop
168:53 - so we can fix that very quickly go to
168:55 - the contacts page here uh I think we
168:59 - need to add some paddings for the great
169:01 - because you can see the button is not
169:03 - positioned properly
169:05 - so let's add some
169:07 - some padding
169:14 - so let's add maybe five let's see how it
169:18 - looks like now now looks much better you
169:20 - can see that everything is positioned
169:23 - correctly so clicking on on the add
169:26 - contact button this should take us to
169:28 - the ad contact page now you can see we
169:31 - have all of this clicking on the save
169:33 - button this should trigger the
169:35 - validations and we should be able to see
169:37 - all of the validation errors
169:40 - so name is required
169:44 - right so then I'm going to add I don't
169:49 - know this person's name is Monday Smith
169:52 - and then clicking on the save button
169:54 - again to trigger the email validation
169:57 - email is required and format has to be
170:01 - correct
170:02 - so let's call it just submiss gmail.com
170:06 - in the spirit of testing
170:09 - and providing a wrong format so then
170:12 - it's actually validating it
170:15 - um
170:17 - and then phone number is optional
170:20 - address is optional so I'm just going to
170:23 - provide something
170:26 - clicking on the save button going back
170:29 - we can see Monday Smith
170:31 - okay so it's working beautifully so
170:34 - again let's take a look what we have
170:37 - done
170:39 - go to the add contact page you can see
170:42 - that we basically did almost nothing
170:45 - right just reusing the functionality
170:48 - that we already created so this is the
170:50 - beauty of using a reusable control okay
170:55 - so that's everything I want to cover in
170:56 - this video I'll see you in the next one
170:59 - foreign
171:02 - text application the next step is to be
171:05 - able to delete a contact within a
171:07 - contact list right so let's go to the
171:10 - contacts page
171:11 - and we can see that we have this list
171:14 - View and then within the list view we
171:17 - have this item template which is
171:19 - basically a text so we can kind of add a
171:22 - button there
171:23 - by using view cell instead of text cell
171:27 - because within the view cell you can
171:29 - place a whatever view you want even a
171:33 - stack layout right we can use a
171:35 - horizontal stack layer and put a button
171:37 - there but list view has a context action
171:39 - and within context actions you can put
171:42 - one or more menu items so instead of
171:47 - using buttons I think we should learn
171:49 - about using context actions so let's do
171:52 - that first of all so we have this text
171:54 - cell right so
171:56 - within this element let's actually
171:59 - format it a little bit better
172:01 - scroll up a little
172:03 - and then minimize solution Explorer so
172:06 - here
172:07 - within the text
172:10 - so we can say text cell Dot dot context
172:16 - actions right and then within this
172:18 - context action
172:20 - then we can add menu items
172:23 - and for example we can have a delete
172:26 - which is exactly the functionality we
172:28 - want right we can have multiple ones
172:31 - let's say
172:33 - text maybe let's say instead of using
172:38 - tap uh to edit or view the contact item
172:43 - we can have the edit button right here
172:45 - for example well I'm just showing
172:48 - there's possibility of having multiple
172:50 - menu items and then if we run our
172:52 - application let's see how it looks like
172:55 - like how the context manual looks like
172:57 - okay you can see our application is
172:59 - running if we want to trigger the
173:01 - context menu what we need to do is long
173:03 - press long price and you can see the
173:06 - context menu is showing up on the top on
173:09 - different devices it may look different
173:12 - um Windows the context menu is actually
173:14 - showing right here just like a regular
173:17 - Windows application right
173:19 - um Android is showing on the top for
173:22 - other application contents application
173:24 - we are going to delete this added we're
173:26 - only going to have this uh Delete right
173:30 - here and you can see immediately the
173:31 - added contacts menu is gone and delete
173:34 - is here so when I click on it nothing is
173:37 - happening that's because nothing is
173:39 - implemented for delete before I go ahead
173:43 - and Implement delete functionality
173:45 - there's one more thing I want to point
173:47 - out which is for the menu items there is
173:52 - a property here and it says is
173:54 - destructive so if we set this to True uh
173:57 - you analysis actually see on Android
174:00 - nothing is special so delete is delete
174:03 - but
174:04 - um
174:05 - other devices like iOS I believe uh thus
174:09 - delete many item will be displayed in
174:12 - red right because this is destructive
174:14 - here nothing is happening in Android
174:17 - okay to react to this delete event what
174:22 - we can do is we can add a event handler
174:25 - to The Click event right so clicked
174:28 - event and then we can just say new event
174:31 - handler okay
174:34 - all right so then at the back end you
174:37 - can see a new event is added but how do
174:42 - we know which which contact triggered
174:44 - the context menu so we will need to use
174:47 - a data binding as we mentioned before
174:50 - the data binding in list view is by
174:54 - binding context so for each item see
174:58 - here is item template so for each item
175:02 - The Binding context is
175:05 - the contact itself so go back to the
175:09 - backend let's review that we have a list
175:13 - of contact here right
175:15 - it's observation list but it's still a
175:18 - list
175:19 - right so we have a list of contact and
175:21 - each item within that list is a contact
175:24 - object right so here The Binding context
175:28 - for this
175:31 - for the entire item template is the
175:35 - contact object itself so therefore what
175:39 - we can do here is to say command
175:42 - parameter commit sorry not command but
175:45 - command parameter and then we are going
175:49 - to use binding again
175:52 - but this time we're going to use a
175:55 - little bit differently we're going to
175:56 - say dot
175:57 - what does that mean the start refers to
176:01 - the object that is bound to this current
176:05 - item
176:07 - right so instead of going like drilling
176:11 - down into which property we're binding
176:14 - to we're actually just binding to the
176:16 - entire object which is the contact
176:19 - object right and after that we can go to
176:22 - our backend go to our backend and go
176:25 - here now we can retrieve the contact
176:28 - object directly from here by saying VAR
176:34 - menu item
176:36 - right and sender so who sent it it's a
176:40 - menu item right
176:42 - we because we clicked on the menu item
176:45 - menu item is the sender and then we can
176:48 - cast
176:52 - a menu item dot command parameter
176:57 - to contact object all right so now we
177:01 - have a connect object
177:02 - and then we are going to run the delete
177:05 - functionality so but we don't have a
177:08 - delete functionality yet so let's go to
177:11 - our
177:13 - models and contact repository and then
177:16 - let's add our delete functionality in
177:19 - here
177:20 - okay so it's going to be pretty simple
177:24 - uh we are going to say delete contact
177:27 - and then here instead of passing the
177:30 - entire iconic object we don't actually
177:32 - need it we can just pass the contact ID
177:36 - of course in the data binding we don't
177:38 - have to use
177:40 - binding dot we can just say binding
177:44 - contact ID right but I want to show you
177:47 - there's actually this way of binding the
177:51 - current object right so here we're
177:54 - trying to get the the contact by ID
177:57 - and to do that we can just use Lambda
178:00 - expression just like before we can say
178:02 - contact ID equals contact ID and if the
178:08 - contact
178:10 - is not now then we are going to actually
178:14 - remove this
178:18 - okay we're going to remove this contact
178:20 - object okay so that's uh the
178:24 - functionality in here
178:26 - so we did that and then let's go back to
178:28 - our code behind and let's look at this
178:32 - menu item click so we have this contact
178:34 - now we can use our contact repository
178:38 - and then we can call the delete contact
178:42 - method that we just added and no one can
178:44 - say
178:45 - contact.contact ID and that's good
178:48 - enough right that's good enough but if
178:50 - we run it guess what's going to happen
178:51 - contact will be deleted from the connect
178:53 - list however you won't see a change in
178:58 - the list View why is that because
179:01 - um because we didn't actually refresh
179:03 - the list view remember the contact list
179:06 - in memory and the contact list in the
179:09 - list view are two different things
179:12 - and we have to notify the list view that
179:16 - we have a change that's why we need to
179:21 - do something like uh let's go up here in
179:24 - the unappearing uh we have this uh these
179:28 - two lines of code here right which will
179:30 - kind of force a refreshing so we will
179:35 - need to extract this out to in a
179:38 - different method in the private helper
179:41 - method
179:43 - and we're going to call it load contacts
179:47 - okay
179:48 - so here we're just uh going to paste
179:52 - these two lines in here and then go up
179:56 - go up over here
179:58 - uh we're gonna call the contacts a load
180:01 - contacts
180:02 - and of course inside the delete
180:06 - functionality here we're going to also
180:09 - call the load context here I don't like
180:12 - calling it menu item clicked right
180:15 - because it's not actually clear what is
180:17 - actually happening let's actually call
180:19 - it uh Delete delete clicked
180:23 - okay so let's go back and then here
180:25 - let's change that to delete clicked
180:27 - maybe we can just delete the whole thing
180:30 - and then here we can select or delete
180:33 - clicked
180:35 - uh I don't know why it's complaining
180:37 - uh it's saying that delete click that's
180:40 - not found that's pretty weird so we have
180:43 - this delete clicked right here I think
180:45 - it's just um oh because we are still
180:47 - running the application
180:49 - okay so let's stop it and then that
180:52 - should resolve the problem okay so let's
180:55 - uh we completed our recording for delete
180:57 - contact let's run the application again
181:00 - to see whether it works
181:04 - all right so let's try to delete let's
181:07 - say the first one so long click and then
181:10 - click on delete and then you can see
181:13 - that it's gone right so delete
181:17 - that's what I want to cover in this
181:19 - video
181:22 - in this video we're going to work on
181:24 - search context functionality because we
181:26 - already implemented a view contact add
181:29 - contact delete contacts and update
181:33 - contact so now we just need the final
181:35 - functionality which is to search
181:37 - contacts because we may have lots of
181:39 - contacts and it would be nice to be able
181:42 - to search and find the contacts that
181:44 - we're looking for right so for that
181:46 - let's go into the contacts page right so
181:49 - contacts page right now you can see that
181:51 - we have a grade and then inside the grid
181:54 - we have a list View and a button right
181:57 - so a search bar should be put on the top
182:00 - right so we can have a search bar here
182:03 - and in dynamoe there is actually a
182:06 - search bar already you can actually you
182:08 - can already see it right here right
182:11 - so in order to display the search bar we
182:14 - have to change our grade so that instead
182:17 - of having two rows now we need three
182:21 - rows so we can put like 50. right so the
182:25 - first row is for the search bar which
182:28 - the height of that is about 50. and then
182:31 - the second one is going to be as big as
182:34 - it can get to and then the last one is
182:38 - where the add contact button is located
182:41 - so that one also has 50. right so we can
182:44 - do that and then we need to change
182:47 - um actually let's copy these two
182:50 - properties here or attributes and then
182:53 - put it inside here on the search bar
182:55 - that would be good and then we need to
182:57 - change the row for the list View and as
183:01 - well as the row for the button which is
183:04 - number two
183:06 - okay now we should be able to display
183:08 - the search bar and we need to let the
183:11 - user know that this is actually a search
183:12 - bar for that the placeholder attribute
183:15 - is is the best attribute to use and we
183:18 - can say something like search contact
183:19 - right so the user know that this bar is
183:22 - for searching contacts and in order to
183:25 - react to the search there are a couple
183:28 - of events we can take advantage of one
183:31 - of them is
183:33 - text changed right so this event so
183:36 - let's let's actually have this one as
183:39 - well as uh there is a search button
183:43 - pressed so there are two events that
183:45 - it's uh that can be used
183:48 - right I would prefer to use the text
183:50 - changed because the text change the
183:53 - event is triggered whenever you actually
183:56 - type anything right so this is different
183:59 - from a for example a web application
184:02 - where you try to trigger a text change
184:06 - so the text is only changed when the
184:08 - cursor
184:10 - leaves the the input box
184:13 - right here while you're typing the event
184:18 - is actually triggered uh whereas the
184:20 - search button pressed usually it's going
184:23 - to show for example magnify glass in the
184:25 - search bar and then when you press on
184:28 - that or tap on that magnify glass then
184:32 - this event is triggered so I don't like
184:34 - it because it's not very intuitive so
184:37 - let's actually uh delete this one
184:40 - okay and then let's go back to the front
184:43 - end and also delete this one but if
184:45 - that's your requirement that you have to
184:47 - press on the the magnify glass then yeah
184:50 - you can feel free to use that but for us
184:52 - we're going to use the text changed
184:54 - event and then uh in that exchange event
184:58 - so let's go back to the code behind we
185:02 - will have to use the context repository
185:04 - right this is temporary repository we're
185:07 - using to load in memory data right
185:10 - so we can use contact repository but we
185:14 - don't actually have a search
185:16 - functionality yet
185:18 - right we don't have that yet but we
185:21 - don't have it but we can code it here so
185:23 - uh what needs to be inside the search
185:27 - contact functionality actually let's
185:29 - call it call it search contact
185:31 - so this has to be uh whatever that is
185:34 - this the user typed in the search bar
185:36 - for for that we can get it from the
185:39 - sender because the sender is actually
185:42 - the search bar so we can say search bar
185:45 - sender so this is casting this the
185:48 - sender to the search bar and then the
185:51 - text is what the user entered
185:55 - so this is good enough and this should
185:57 - return us the the list of contacts right
186:01 - so we will have the contacts here and
186:05 - then look at the load contacts right so
186:08 - we have this contacts here but then this
186:11 - context is different so we will need to
186:14 - use the observable collection and then
186:18 - we can wrap around like this so then
186:22 - this context is a observable contact
186:26 - right and then you can just copy this
186:29 - line and put it over here and that's it
186:31 - that's uh that's it and the rest of the
186:34 - work is just implement the search
186:35 - context uh method or actually a function
186:41 - okay so let's copy the search contacts
186:45 - and go to the contact repository go down
186:48 - to the bottom and then we're going to
186:49 - create another public static
186:52 - uh public static function which is going
186:56 - to return a list of contacts and that
186:58 - would be similar to this one right so
187:01 - it's going to be list
187:04 - of contact and then here we're going to
187:08 - call it
187:09 - search contacts
187:11 - and this is basically filter text
187:16 - you call it whatever and then here
187:19 - inside the contacts
187:22 - we can just basically say where
187:28 - X name
187:31 - start with
187:33 - filter
187:34 - text and then we can say string
187:38 - comparison we already know you can
187:40 - lowercase okay so we want to ignore case
187:42 - I wanted to we we want it to be case
187:45 - insensitive
187:46 - right and this is going to return as a
187:49 - ineurable and we can cast it into a list
187:53 - like that so we can do two lists
187:57 - contacts
187:58 - so here we're only looking at the name
188:01 - but we actually should enable the user
188:03 - to search by anything right the name
188:05 - phone number address or email address so
188:08 - we uh we actually need to Let's actually
188:12 - copy and paste this slide
188:15 - and then we can test the other three
188:19 - Fields here so what we need to say here
188:22 - is that if the contacts
188:24 - sorry not contact but contact if it's
188:28 - not now
188:29 - and also if
188:32 - contacts dot count
188:37 - is uh actually it if it's null
188:41 - or
188:46 - contacts.com
188:51 - last or equal to zero
188:53 - that means we didn't find anything so in
188:57 - in this case we'll have to find
189:01 - we'll have to look for the filter tax in
189:04 - some other fields right so let's say the
189:06 - second one we're looking at is email
189:10 - right
189:12 - and if otherwise if we did find
189:14 - something from the first query then we
189:18 - just return
189:19 - right and we are going to do the same
189:22 - thing over and over again for another
189:25 - two times right so here we are going to
189:30 - say this is uh a phone number maybe
189:32 - and last but not least
189:35 - we're looking at address so we can see
189:40 - that if we ever run to this line then
189:45 - the the result is not returned so
189:48 - therefore we will have to at the end
189:50 - return the contacts
189:52 - just like this and this contacts at the
189:54 - end can be a empty list another thing we
189:57 - need to pay attention to is that one of
190:00 - these ones can be null right name email
190:03 - phone number or addresses can be known
190:07 - so in order to solve that problem we
190:10 - actually have to add some condition over
190:12 - here otherwise it's going to throw like
190:14 - object reference like null reference
190:16 - problem
190:19 - we can use
190:21 - a condition over here
190:24 - say is now or empty or y space
190:28 - okay so the X
190:31 - um
190:32 - name here has to be not empty and it has
190:37 - to start with the filter tax
190:40 - okay and then we're going to apply the
190:42 - same condition to the other ones
190:44 - I'm going to put over here of course
190:46 - this has to be changed to email
190:49 - and this is phone number and this one is
190:53 - address
190:54 - okay
190:55 - so the condition is it's not now or
190:58 - empty
190:59 - and it starts with the contacts the
191:02 - filter text then that
191:05 - satisfastic criteria
191:07 - and we'll get our contact back the
191:10 - correct context back uh here where we
191:14 - have our search tax change the search
191:16 - bar text changed
191:19 - um and you can see that the problem is
191:21 - gone and we should be able to just use
191:23 - this so let's run our application and
191:26 - see whether it works or not foreign
191:30 - okay so now we can see our search
191:32 - contacts bar is right here so let's type
191:35 - in the first character J actually let's
191:38 - put a breakpoint over here and just make
191:40 - make sure that the event is actually
191:42 - triggered while we're typing right so
191:44 - I'm gonna use the uh the soft keyboard
191:48 - like the virtual one so I'm putting J
191:50 - here and you can see this is immediately
191:52 - trigger right it doesn't actually
191:55 - need the cursor to to to actually leave
191:58 - but you may think that I press here so
192:01 - the cursor actually left well it's
192:03 - actually not the case so so actually
192:05 - let's uh continue so I'm going to press
192:07 - on F5 so let's continue right uh let's
192:11 - actually delete this right basically
192:13 - clear the the box and you can see it's
192:16 - also triggered right away okay and then
192:18 - now it's cleared so instead of using the
192:21 - soft keyboard I'm just going to type the
192:24 - letter J right inside like with my
192:26 - keyboard so I tap J and now you can see
192:29 - that the breakpoint triggered that's
192:32 - just proves that the tax change event is
192:36 - not triggered when the customer leaves
192:39 - the search bar right so I'm I press on
192:42 - F5 so continue right so I type in j a
192:45 - now I can see Jane though so the search
192:49 - actually works right and then I can type
192:52 - in Jane tab on Jane though and go to see
192:54 - the details of Jane Doe right go cancel
192:58 - button takes us back to here
193:01 - unfortunately uh the search bar didn't
193:04 - actually clear and everything is um
193:07 - is still showing right so for that
193:10 - purpose what we can do is that only
193:14 - appearing here we can do some house
193:17 - cleaning here we can say that search bar
193:20 - actually we didn't give it a name yet
193:21 - did we go back to contact so let's stop
193:25 - this
193:26 - and go back to contacts we didn't give
193:28 - it a name yet so we can say name he
193:31 - codes just just call it search bar okay
193:37 - so here we can say search bar dot text
193:41 - equals string dot empty okay
193:45 - so with this change let's give it a test
193:48 - again
193:50 - all right so now let's go to I should go
193:53 - to myself
193:54 - Frank
193:55 - and then click on my contact
194:00 - and click on cancel button now you can
194:03 - see that the search bar is cleared okay
194:06 - so that's the functionality I want to
194:08 - cover today I'll see you in the next one
194:13 - foreign