00:00 - learn how to build a threads clone uh I
00:02 - mean a Twitter clone the focus of this
00:04 - course is not just building the
00:06 - application but also understanding and
00:08 - implementing essential development tools
00:10 - like next.js 13 Tailwind CSS typescript
00:14 - and super bass key elements covered
00:17 - include designing the layout with
00:18 - Tailwind CSS managing the back end with
00:21 - Super Bass incorporating robust
00:24 - authentication handling server actions
00:27 - fetching tweets and developing engaging
00:30 - features like liking and replying to
00:31 - tweets this course is an excellent
00:33 - resource for those wanting to understand
00:35 - the complete life cycle of developing a
00:38 - real world application with the latest
00:40 - tools and Technologies pranjal Sony is a
00:43 - full stack developer and he teaches this
00:45 - course let's start learning welcome to
00:48 - holistic Netflix
00:51 - in this course we are going to build a
00:53 - fully step tutor application it is a web
00:56 - application and the tech history we are
00:58 - going to use is Nexus 13.4 version with
01:01 - latest server actions and server
01:03 - components we are going to use Superbass
01:05 - for authentication and for our postgres
01:08 - SQL database we are going to use
01:10 - something called drizzle orm for our
01:12 - database orm to make our life easier
01:16 - with fetching and inserting data in our
01:20 - database then we are going to use Redix
01:22 - UI components by shared CN it's a very
01:25 - great Library if you go to
01:28 - ui.sharescn.call you will find it's an
01:30 - awesome library and we will use this
01:33 - library to build our dialogues and build
01:36 - our application components other than
01:38 - that we are going to use typescript that
01:40 - is obvious part because type is shift
01:42 - helps us to build our application faster
01:45 - and it helps us in a lot of Auto
01:48 - completion so that while developing the
01:50 - web application our life is very very
01:53 - easier so if you are excited and if you
01:55 - want to join this course follow along
01:57 - this course is absolutely free you can
01:59 - watch all the tutorials on my YouTube
02:02 - channel you can watch the whole series
02:04 - and it will teach you a lot of concepts
02:06 - of Nexus so thank you very much and I
02:08 - hope you enjoy watching this course and
02:11 - the most important part now I will play
02:14 - a demo on my side you can see this is
02:17 - the demo of how we are going to build
02:19 - the application and and how our
02:21 - application is gonna look after we have
02:24 - built it so if you have watched the demo
02:26 - forward application and if you are
02:27 - excited to follow along follow this
02:30 - course and learn next year's 13th thank
02:32 - you so now as you can see I am using Mac
02:35 - operating system so if you are using
02:37 - Windows you can use your terminal which
02:40 - is a git terminal okay so you can
02:42 - install all the things you can install
02:44 - visually Studio code I have made all the
02:47 - videos related to installing
02:48 - initializing in my past YouTube videos
02:51 - so you can watch them you can understand
02:53 - everything related to installing and
02:55 - setting up the environment we will
02:57 - directly jump forward and we will start
02:59 - building our applications so I haven't
03:01 - prepared anything so you will see what I
03:03 - do here yeah so for the CSS part I have
03:08 - forgot to mention that we are going to
03:10 - use Telvin CSS because I like Kelvin
03:12 - cssa a lot and it will increase our
03:14 - productivity at least by 10x so that's
03:18 - why I love using television CSS and
03:20 - that's why we are going to use salvances
03:22 - in this full hack Twitter clone project
03:25 - so for installing so first we will get
03:28 - into our folder so now I am in my root
03:32 - so I will go to desktop I will go to
03:34 - YouTube and I will clear everything and
03:37 - I will now use pnpx command so you can
03:41 - use yarn you can use npm you can use
03:43 - pnpm but we are going to use pnpm
03:46 - because it is fast so why it is faster
03:49 - because pnpm used a mechanism to hard
03:54 - link all the packages to the code we are
03:56 - working for example you are using Prisma
03:58 - Oram inside your one
04:01 - code folder or inside your one code
04:03 - repository and you try to install that
04:06 - into your another folder into your
04:08 - another project so it will install it
04:10 - one place and then it will link that
04:12 - package to every project from a centered
04:15 - location that's why it is faster and it
04:17 - will
04:18 - help us to save our disk space inside
04:22 - our machine that's why I love using pnpm
04:24 - but it may sometimes cause some errors
04:28 - so you can always shift to yarn that is
04:31 - better than npm so I will go for pnpm
04:36 - now I will say pnpx
04:38 - create next
04:42 - app because we are using next yes so it
04:45 - is a command to directly install the
04:47 - next.js so create next app at the red
04:50 - latest and we will say
04:52 - just enter and now you can enter your
04:54 - project name so I will say Twitter clone
04:56 - so I will call it ultimate ultimate
04:59 - Twitter Chrome
05:02 - now it will ask us a few things you
05:04 - would you like to use typescript yes
05:08 - yes television CSS absolutely yes
05:11 - yes and now it will say would you like
05:15 - to use experimental app directly it is
05:17 - now experimental but it is a great
05:20 - chance that when you are watching this
05:21 - it is into the stable version so we will
05:25 - move forward with server components
05:27 - that's why it is the latest and greatest
05:29 - tutorial on the internet as of now
05:32 - so we will use import alias
05:36 - so that we don't have to use relative
05:39 - Imports so it will make our life easier
05:41 - also so you as you can see it has
05:44 - installed all the packages very fast
05:45 - because they already exist in my machine
05:48 - and the pnpm just hard linking them to
05:52 - the center location where the packages
05:53 - exist
05:54 - to my project now we can go to our
05:59 - ultimate
06:01 - and I have made a ultimate blog
06:03 - application udemy course so you can see
06:06 - that thing in my description or you can
06:08 - visit
06:09 - the page but as of now this is a free
06:12 - tutorial and
06:13 - this is going to be free always and I'm
06:16 - making sure that it will be the greatest
06:18 - tutorial on my YouTube channel so as you
06:21 - can see we are into our folder into our
06:24 - repository now we can open our Visual
06:26 - Studio code over code editor where we
06:28 - will write some code so code spaced out
06:31 - and enter and now it will open a window
06:35 - of Visual Studio code
06:37 - open it and now you as you can see
06:40 - everything is set up already for us so
06:42 - inside the source directory
06:44 - you have this API routes where you can
06:46 - Define some API routes
06:48 - you have your layout you have your page
06:51 - so now as you can see our project is
06:53 - ready now we will install a few things
06:55 - which will help us to make our life easy
06:58 - so now as you can see we are using next
07:00 - font and here we are using enter so we
07:02 - will remove everything and first we will
07:04 - run this application so that we can see
07:07 - what is happening there so we will run
07:08 - pnpm run Dev because if you see in the
07:11 - package.json here you can see to run the
07:14 - dev environment you just have to run
07:16 - pnpm run Dev yarn run Dev or npm brand
07:21 - as you can see we are using App
07:23 - directory because we will use server
07:25 - components the latest and greatest stuff
07:27 - in the react ecosystem so this is my
07:29 - browser window I will open it in another
07:31 - tab here and I will go to localhost 3000
07:35 - and you will be able to see how it looks
07:37 - so this is our basic nex.js application
07:40 - running as you can see now as I said we
07:44 - will use Superbass for everything in
07:46 - this project because why we are using
07:49 - Super Bass because it is very easy to
07:51 - set up authentication to set up database
07:53 - to set up storage because we will be
07:56 - uploading images we will be uploading
07:57 - GIF also for our Twitter post so that it
08:00 - will be very easy for us to like use
08:02 - super bass and it will handle all the
08:04 - complex stuff for us so we don't have to
08:06 - worry about anything so as you can see
08:08 - building we can scale to Millions this
08:10 - video is not sponsored by Superbass if
08:13 - they have sponsored it I would be very
08:14 - grateful but it is not I am just
08:16 - recommending it because this is by far
08:18 - my go-to tech stack for building fully
08:21 - stack web application and I love using
08:23 - super besters so now as you can see it
08:25 - is totally free by the way you can sign
08:28 - up for a free account and now you can
08:30 - click on new project and I will say
08:32 - ultimate Twitter Club so this is a
08:34 - database password which you can also
08:36 - generate afterwards and now I will
08:38 - choose a reason which is near to me free
08:40 - account and create a new project now it
08:42 - will create a new project for us and now
08:44 - let's see what are the features Super
08:46 - Bass offers so we will see all the
08:48 - features so you can see we have database
08:50 - we have storage we have Edge functions
08:52 - if we want to do some computation on our
08:55 - backend side but I think for our project
08:58 - we don't need any computation but if you
09:01 - need something like sending emails to
09:03 - the user running a chrome job or doing
09:06 - some expensive task like video
09:08 - processing image processing or some kind
09:11 - of stuff then you can use Edge functions
09:13 - it is just like serverless functions or
09:15 - it is just like using virtual API routes
09:17 - but it is much more capable of doing
09:21 - anything and it uses Dino as a framework
09:23 - of node.js and we also have real time
09:26 - thing where we can face real-time data
09:28 - we can get real-time updates so let's
09:31 - assume you have some leaderboard inside
09:32 - your fully stack application then you
09:35 - can use Superbus real-time database to
09:37 - connect to your database and whenever
09:39 - you have some updates it will
09:40 - automatically update your UI and your
09:42 - users will be able to see all the
09:45 - results changing in real time and we
09:48 - will use authentication we will use
09:50 - database we will use storage these three
09:52 - things these three things I think we are
09:54 - gonna need inside our project so it will
09:56 - take some time to provision the project
09:59 - let's wait for some time you can see
10:02 - okay so our project will be deployed on
10:05 - its own instance okay so let's wait for
10:07 - some time and we will see how it works
10:09 - so you can also visit some documentation
10:12 - here all the documentation is here so
10:14 - number one thing we can directly create
10:16 - our database tables here okay so if you
10:19 - visit Twitter so I don't let me just get
10:22 - my Twitter account so we are going to
10:24 - copy this whole thing so as you can see
10:26 - this is over Twitter and we are going to
10:29 - copy this whole thing we are going to
10:30 - copy this whole thing we are going to
10:32 - copy this model we are going to copy
10:34 - this sidebar this timeline this trending
10:38 - section and we I think I am also going
10:41 - to build this feature which is training
10:43 - feature who to follow and all of those
10:45 - things so first first thing first what
10:47 - do we need we need our database so what
10:50 - does a Twitter contain a Twitter content
10:53 - tweets number one thing users tweets and
10:56 - replies and all that kind of stuff but
10:59 - for now we will stick to our database so
11:02 - we will think how should we approach so
11:04 - let's let me open my escalator and here
11:07 - we will see what we will do so how
11:09 - should we approach the whole thing so
11:12 - here we can do something so first we can
11:14 - build our layout build our UI build over
11:17 - layout I think that's the best approach
11:19 - and that's what I do almost all the time
11:21 - UI build the whole UI and then what you
11:24 - need to do now you have the UI you know
11:26 - what the data you need then you can
11:29 - proceed and you can design your database
11:32 - you can design your database so design
11:33 - the database then afterwards we will
11:36 - create our tables so let me Zoom it so
11:39 - you can see now we have our database and
11:42 - now we will create our tables create
11:44 - tables and sync over database with over
11:48 - code so let's assume we are going to use
11:51 - an orm like Prisma to handle our
11:54 - database queries and mutations and
11:56 - handle all the migrations and all that
11:59 - kind of stuff but we are not going to
12:01 - use Prisma here we will just stick to
12:03 - plain Superbass and plain stuff here
12:05 - with super best directly queuing over
12:07 - database and directly mutating over data
12:09 - base from our front end by using the
12:11 - Super Bass GS library and for our
12:14 - curious thing we will use react query
12:16 - and you will see what are the problems
12:18 - we are facing with plain Superbass with
12:21 - using custom hooks or if you use a
12:23 - library such as react query to make our
12:25 - life easier with loading State and error
12:28 - States so here we will create tables and
12:30 - sync our database with our code base so
12:33 - now we have our database and also
12:36 - typescript configuration so we need to
12:38 - do some things with typescript here and
12:40 - afterwards so when we have did this
12:42 - thing now we can build our functionality
12:45 - so now we can build our functionality
12:47 - build the functionality so what are the
12:50 - functionalities we need mostly in our
12:52 - Twitter application so mostly post Tweet
12:55 - a tweet includes text image video also
12:58 - or GIF so we will we are going to
13:01 - implement all of this thing okay so
13:03 - posted a tweet can include a tweet
13:05 - includes text images video GIF or all of
13:09 - that combined so we are going to
13:11 - implement this functionality so this is
13:12 - the first thing now we have an infinite
13:14 - timeline which is infinite scrolling
13:17 - feature okay so this is the main feature
13:19 - where we can first fetch the tweets
13:23 - another functionality we have is user
13:25 - page profile where we have our users and
13:28 - users can like a post users can like
13:32 - bookmark like and bookmark two things we
13:35 - can and reply to a tweet so it a reply
13:39 - is also a kind of tweet a reply is also
13:43 - a kind of tweet so we will see how to
13:45 - implement this thing and that's all the
13:48 - functionalities which we need so this is
13:50 - a lot of work and you will see how we
13:53 - approach these all things and you will
13:55 - be amazed how easy is this to build this
13:58 - application and how easy is this to
14:01 - build this application using nexjs and
14:03 - Super Bass and television so first let's
14:06 - jump right into building the UI part go
14:09 - as you can see this is our basic Nexus
14:12 - application starter code which we have
14:14 - initialize everything in the last video
14:17 - in this video we will just going to
14:19 - build the layout section and the whole
14:22 - UI section of the home page so we will
14:24 - remove everything here rafc if you don't
14:27 - have this extension you can install this
14:28 - here you can install the es7 plus react
14:31 - reduxe synthetic native Snippets this is
14:33 - a very useful extension which will give
14:36 - you a lot of Auto completion if you type
14:38 - rafc then you can see our load to
14:40 - completion which it will give you but we
14:42 - need rafc even so this is so this is our
14:45 - home page our Twitter home page and now
14:47 - here we will Design the thing we can
14:49 - remove this we don't need this thing so
14:51 - if we go to Twitter we can see how it
14:54 - looks so this is how Twitter looks like
14:55 - you can see this is our timeline this is
14:58 - explore settings but we can create a
15:00 - fake account for now so I think if I if
15:03 - I refresh this it will ask us I will
15:05 - sign up for a demo account for now yeah
15:08 - so this is the club of folders account
15:10 - as you can see and now we will implement
15:13 - this thing first of all we will
15:15 - understand this layout we will
15:17 - understand this layout how it works so
15:19 - first we will go to excalator and here
15:22 - we will Design our whole UI we will
15:24 - understand it so this is our home page
15:26 - as you can see this is our home page and
15:29 - now we have some fixed width if we try
15:32 - to zoom out you can see the whole
15:34 - Twitter page is taking some fixed width
15:37 - some fixed maximum width and it is not
15:40 - exceeding its fixed width and it looks
15:42 - different on mobile but we are only
15:44 - going to build this whole thing for the
15:46 - desktop I am not going to make this
15:48 - layout responsive you can do that so now
15:51 - this is our whole layout and this is
15:53 - some fixed width let's assume this is
15:55 - our fix width and now here we can see
15:57 - this is the sidebar so first we will
15:59 - make a division and we will give it
16:01 - fixed width after that we will make 3D
16:04 - using inside it sidebar this is the main
16:06 - layout which you can see this is the
16:08 - main timeline section and this will our
16:10 - training section this third division
16:11 - this is our third division which is our
16:14 - right sidebar okay and now what we will
16:17 - do this all our icons this is home this
16:21 - is exclude notifications all these
16:23 - things so Dash datash and here we can
16:26 - write a tweet we will not implement this
16:28 - for you and following we will just stick
16:30 - to the basic one this whole where we can
16:32 - write our tweet which is here home just
16:36 - like it and this is a section where we
16:38 - will write our tweet we will compose our
16:40 - tweet and and now we have all our tweets
16:43 - here like this Dash and here we have our
16:46 - trending section what's happening so
16:48 - this is our twin trending section and
16:51 - this is who to follow section just like
16:53 - that so this is the whole UI we need so
16:55 - this is just a game of flex box and
16:58 - grids and this is very easy to implement
17:00 - this is fixed this is also fixed only
17:03 - this is scrollable and we will do all
17:05 - these things very easily by using telwyn
17:08 - CSS and you will see how much easier
17:11 - this to build this whole layout and this
17:13 - is our Twitter logo okay so let's start
17:16 - building this first we will install the
17:17 - icons library because we need Twitter
17:19 - icon so we will say pnpm install react
17:22 - icons this is a great Library which you
17:25 - can search also react icons dot
17:28 - github.io this library and here we can
17:30 - search Twitter and here you can see this
17:33 - is the exact icon we are looking for so
17:36 - as I said first we will create this
17:38 - fixed width thing so we can say class
17:41 - name is W full H full width and we can
17:45 - say this is a whole Flex box justify
17:48 - Center item Center if you are not seeing
17:50 - the auto completion you can install the
17:51 - Telvin intellisense so you can install
17:53 - this so now we have it full H full and
17:56 - it is item Center and we will now make a
17:59 - fixed with division inside it so class
18:02 - name maximum which is screen 1024 pixel
18:06 - okay this is good we can say with full H
18:09 - full it it is also a flex we can make it
18:12 - Flex because okay so these These are
18:14 - these are fixed you can make it relative
18:16 - it is also relative you don't need to
18:19 - specify It Is by default relative but we
18:21 - are it is not widely for relative I
18:22 - think yeah so if you want to make he
18:25 - learn absolute inside this division or
18:27 - inside this division then you have to
18:29 - give it relative so the absolute
18:31 - division will position itself absolutely
18:33 - according to its nearest parent that's
18:36 - how it works so now we have over this
18:38 - layout the whole color is BG black like
18:41 - that now we have three things here
18:43 - inside this we have sidebar Tu into
18:46 - three so this is our sidebar this is our
18:48 - home timeline and this is over right
18:51 - section like this you can also do the
18:54 - section thing here you can say this is
18:56 - main to make it semantic HTML can make
18:59 - it section like this and now we can do
19:01 - all the things so first let's design the
19:03 - left sidebar so it is class name
19:06 - now if you give it absolute width it
19:08 - will poison itself according to this
19:10 - division but if you make it fixed with
19:12 - it will position itself relative to the
19:15 - whole Windows width and height so what
19:17 - do you think what should we keep it this
19:19 - thing I think we can position itself
19:22 - with the whole
19:24 - Windows height so you can say fixed and
19:28 - W is we can give it some width let's
19:31 - find out what is the width of this so
19:33 - now you can see this is the width of 275
19:37 - into 836 to 275 pixel with this 275
19:41 - pixel so you can how 275 which is near
19:44 - to 64 right things and
19:47 - 70 to yeah it's good and it is a flex
19:50 - column because inside we will Define all
19:52 - the navigation items after we have
19:54 - designed the whole thing then we will
19:55 - separate all the components into a
19:58 - different different file because we
20:00 - don't want our code to not be organized
20:02 - we want our code to look nice and easy
20:04 - for anyone who looks at our code so now
20:07 - we have a fixed sidebar left sidebar so
20:10 - we can say left sidebar for navigation
20:12 - or we can say the header it is a kind of
20:15 - header and it has the height of edge
20:17 - screen inside it we have home explore
20:20 - notifications message bookmarks profile
20:23 - and more so what we can do here we can
20:26 - Define array const navigation items is
20:31 - equal to this is the array and we can
20:33 - then map through them and we can Define
20:35 - our sidebar so here we have home explore
20:38 - notifications so we can say that the
20:42 - title like this the title is home and
20:44 - the icon is home icon or The Birdhouse
20:46 - bird house you can insert any icon and
20:49 - you can choose whichever you like so I
20:52 - will go with this one okay this looks
20:53 - better how about we search home yeah
20:55 - there are this looks similar to The
20:57 - Tutor House icon so here we can say bi
21:00 - home Circle and we will import this
21:02 - thing first so import from react icons
21:05 - slash Pi like this
21:08 - now this is explore and this is the
21:11 - explore icon which is a hashtag so we
21:14 - can search a hashtag
21:18 - import from react icon slash hi now we
21:22 - have notifications
21:24 - notifications icon is kind of Bell so we
21:27 - can search bail which looks similar to
21:30 - the spell icon and I think this one
21:32 - looks much similar now we have what
21:35 - messages we are not going to implement
21:37 - all of these things we will stick to the
21:39 - basic functionalities you can implement
21:41 - the other functionalities if you want
21:43 - for the message we have the envelope so
21:46 - we can search in the lab yeah so
21:49 - whichever looks similar yeah this is
21:52 - good import from react icon slash hi2
21:56 - okay so import it from BS now we have
22:00 - bookmarks and profile we will skip them
22:02 - more we will bookmarks bookmarks and we
22:06 - have profile for the profile we have the
22:08 - user icon and for the bookmark we have
22:10 - the bookmark this one looks good BS
22:13 - bookmark for the profile we have the
22:16 - user icon so AI outline user Pi user
22:19 - whichever you like so I think it looks
22:22 - good you can import it from here so now
22:24 - we have all our navigation item and we
22:26 - can render them if you hover over this
22:28 - you can see this is the title and icon
22:31 - and we just need to render it over here
22:33 - so we can say it navigation items dot
22:35 - map and this is our item and now we can
22:38 - say render a division which has a key of
22:40 - item dot title and we need to render two
22:44 - things here so instead of division we
22:46 - can what we can do instead of division
22:48 - we can render a link over here and we
22:50 - can say href is also slash item dot
22:54 - title dot to lowercase like this and
22:57 - here we can give it some classes I I
22:59 - will give it busy white of 50 rounded of
23:02 - 3XL painting I will give it padding of 4
23:05 - and that's good here we will render two
23:07 - divisions first for the icon so here we
23:10 - can say item dot icon just like it and
23:14 - here we can render another Division and
23:16 - inside this we can render the item dot
23:19 - title we can make it a flex we can give
23:22 - it item Center justify Center we can
23:25 - give space of X of 2 and now save this
23:29 - and let's have a look at the whole home
23:32 - page what we have did till now so now
23:34 - you can see this is what we have
23:35 - designed and it is looking nicely for
23:38 - the first look we have forgot to render
23:40 - this Twitter icon here so what we will
23:43 - do first we will render the Twitter icon
23:45 - over here so we can say this is link
23:47 - href is Slash and this is just a Twitter
23:51 - icon so we can say PS Twitter now if you
23:54 - have a look yeah it is looking good we
23:57 - can comment these two things for now
23:58 - yeah also what we need to do is we can
24:01 - give it some class names for now my of
24:04 - margin of y y means on the vertical axis
24:07 - so we can give it 4 M by 4 okay so it is
24:10 - not working why is that because I think
24:12 - we have to do something here when we
24:14 - hover over it then we have to show
24:16 - something otherwise known so we can say
24:18 - when you hover and this is just 10 and
24:22 - we will make a transition duration is
24:24 - let's give it 200 and P4 is a little bit
24:27 - too much so P2 will work yeah 30. now
24:31 - you can see if you refresh this it will
24:33 - work and 30 is bit too much yeah it is
24:36 - good now we just have to make it to the
24:38 - left and we don't want to give it a
24:40 - whole width what we can do here instead
24:43 - of just if a center we can say justify
24:44 - start and W is fit now you can see the W
24:47 - is fit so it is taking the whole content
24:50 - width and what we have to do now we have
24:52 - to make it a little bit bigger so now it
24:54 - is smaller so for that here we can come
24:57 - and here we can say note here I think we
24:59 - can directly say so it will this class
25:02 - will also work on this is item dot icon
25:04 - we can set text is Excel so it will make
25:07 - it a little bit bigger and I think it
25:10 - will 3XL 2XL yeah it's good and we have
25:13 - to give it little bit more of space so
25:16 - we can give it six not on the X on the Y
25:19 - also so as you can see this is flex
25:21 - column so instead of giving this m y of
25:24 - 4 but we can do we can say space of y o
25:27 - four and margin of Y of force yeah now
25:31 - it's good we should also give it P2 so
25:33 - it looks similar and also text of 2XL
25:36 - now you can see we have a similar
25:38 - looking Twitter UI here we just need to
25:40 - make it a little bit bigger and the
25:42 - width is also bigger than we have
25:45 - defined here so instead of LG what we
25:47 - can do XL yeah it it is exactly similar
25:50 - to the tutor and when we are on the page
25:53 - we will render this icon as a bold like
25:56 - you can see we will fill this icon for
25:58 - now we can skip that part for now we are
26:00 - just designing the home UI now at the
26:03 - bottom we have Club of folders here at
26:05 - the bottom so what we will do also we
26:07 - have this tweet button also if you see
26:09 - the padding of access a little bit
26:11 - bigger and here we don't have that
26:14 - padding so P wise 2 and PX is 4 yeah it
26:18 - is good now I think it is more PX of 6
26:21 - yes it's good but we have to give the
26:24 - same thing to this so that it looks
26:26 - exactly similar to yeah now it is good
26:29 - also we can give it this thing we have
26:32 - but I think we can Define it over here
26:34 - instead of manually doing so we can say
26:37 - title is Twitter and icon is PS Twitter
26:40 - like that now we can remove this thing
26:43 - but here we don't need the Twitter thing
26:45 - so what we can do we can conditionally
26:47 - render this thing so here we can say we
26:49 - don't need to render the title when the
26:52 - item dot title is equal to Twitter don't
26:55 - render this when the item dot title is
26:57 - not equal to Twitter then enter this
26:59 - otherwise we can say now you can see it
27:02 - is similar to the whole thing it is
27:04 - looking beautiful and we have the same
27:06 - effect as Twitter now we have a one
27:09 - thing more here we have a tweet button
27:11 - so what we can say we have a button here
27:14 - which is tweet we will Design this
27:16 - button now we can say w is full a
27:18 - rounded is 3XL Pages blue so we will
27:22 - copy which color is this Twitter color
27:24 - so we'll inspect this element yeah so
27:27 - this is the color we have so we will
27:28 - modify our utils because we we need this
27:31 - color for a lot of things you can see
27:33 - this is the same color which is this so
27:35 - we will modify our Telvin config so this
27:38 - is where we will modify so we will
27:40 - extend our color so we will search how
27:43 - to do that I don't know so here we can
27:46 - say command plus K hit command plus K
27:49 - and search Kelvin config theme
27:51 - configuration now you can Define the
27:53 - colors like that so theme inside colors
27:57 - and you can Define the colors so team
28:00 - extend inside the colors we can Define
28:03 - the colors I will say the Twitter color
28:05 - or we can say the primary color which is
28:08 - this now it will work because I think we
28:11 - have modified the Telvin config we need
28:13 - to reload or let's see BG of primary
28:16 - yeah now it will work now you can see
28:18 - how I find a solution which I don't know
28:20 - how I search into the documentation and
28:23 - you should always do this okay so if you
28:25 - don't know anything you can always
28:27 - search into the documentation and look
28:29 - for the solution so now we have our BG
28:31 - primary color now we need to give it
28:33 - some padding so pux
28:36 - 6py4 would work and the text is also
28:39 - bigger so I would give it to Excel and
28:41 - the text is also Center save this yeah
28:43 - it is looking good
28:45 - but when we hover over it the BG opacity
28:48 - we can reduce some opacity we can say 90
28:51 - and we can also note 90 I would go for
28:54 - 70. now what I can do I can also give it
28:56 - transition and the duration is 200 so
28:59 - that it looks smooth and it is not 3XL
29:02 - it is actually full yeah now you can see
29:04 - this and I think we have made it much
29:07 - weaker so P4 would work I think because
29:09 - we have given full width that's why it
29:11 - is working yeah it is bigger so that we
29:14 - need to decrease this to 75 pixel it's
29:18 - good but I think we need to
29:20 - let's keep it margin 4 to decrease some
29:23 - width of the butter now it is looking
29:25 - good so you can see the messages is
29:26 - looking a bold here okay so we don't
29:29 - need this bold thing we only need this
29:30 - when we are on the message as page so
29:33 - instead of this hi envelope we need a
29:35 - outline so envelope we need an outline
29:38 - envelope so BS envelope will work for us
29:40 - yeah it is good and now we have designed
29:43 - this sidebar for the Twitter okay so
29:45 - this thing is remaining so let's also
29:47 - design this thing so we have this
29:49 - section the whole section we can wrap
29:52 - this whole thing into a division
29:53 - separate division why we are doing this
29:55 - you will find now because this is fixed
29:58 - width and the height of this is screen
30:00 - we will make it items stretch and now we
30:04 - can define a division here and this is
30:05 - at the bottom you can see now this is at
30:08 - the bottom it should be at the bottom
30:09 - now it is not W4 let's give it w full so
30:13 - it doesn't look odd okay so we have to
30:15 - keep this whole thing here this is a
30:16 - division this is another division what I
30:18 - want I want let me go into X skeletrome
30:21 - so here we have a division so what I am
30:24 - saying is we are defining a division
30:26 - here which is a flex column so this is a
30:29 - flex and now we will say make this port
30:31 - using justify between so it will stretch
30:34 - those division through the whole height
30:36 - so that it will make this division to
30:39 - the bottom but it is not doing that so
30:41 - we will see why yeah now you can see
30:43 - this is at the bottom but the problem is
30:45 - because of my4 it is not at the bottom
30:47 - yeah so we will see what is happening
30:49 - here we will remove this m by bottom
30:51 - yeah now you can see this is at the
30:53 - bottom because we are using items
30:55 - stretch items stretch will stretch this
30:58 - division to the bottom that's what we
31:00 - want here what we can do we can M by 4
31:03 - now it will work yeah we can only give
31:07 - it to the top here it's as a screen here
31:10 - we don't need to give it a screen we can
31:12 - just not give it anything here we don't
31:15 - need space y it's good but now here we
31:18 - can give it Edge full so it will take
31:20 - the whole height here till here and now
31:22 - here we are at the bottom and now here
31:24 - we can Define this thing so this is a
31:27 - logo this is the name this is a username
31:30 - and now this is a three button or
31:32 - whatever to say it so this is similar to
31:34 - this but some parts are different which
31:37 - I will tell you inside the button we
31:39 - have two divisions not actually two we
31:41 - have three division
31:43 - this is a three dots so BS three doors I
31:46 - think yeah we have the three dots here
31:48 - we have the logo which we can just for
31:51 - now make it rounded full this is
31:53 - basically author we can make it busy
31:55 - slate 400 and what we can do here yeah
31:59 - it's good we can give it w 8 h8 height
32:03 - and width this is already I think flex
32:05 - no this is not Flex so we will make it
32:07 - flex and items Center
32:10 - Space X of 2 inside we have two
32:13 - divisions so this is a division inside
32:15 - we have two divisions first one is the
32:17 - username so this is the name of the user
32:20 - so let's see for now Club of quarters
32:22 - and here we have Club of colors my
32:26 - username and now you can save this whole
32:28 - thing and now we will see how it looks
32:30 - yeah so it is looking a little bit odd
32:32 - because we have given its PG primary but
32:34 - we don't need BG primary we need busy
32:36 - transparent and because of the text to
32:39 - excel this is too big so we can make a
32:42 - text XX so extra small now you can see
32:46 - this is looking good and instead of
32:47 - giving it text access here we can give
32:49 - it text access and this is small and we
32:53 - can make it text to the left here and I
32:56 - think the smaller is looking bigger it
32:59 - is not smaller we can make it font semi
33:01 - bold and these both are extra small text
33:05 - yeah and when we hover over this whole
33:07 - thing we can make it VG White and the
33:10 - open city of the BG white is 20 now you
33:12 - can see 10 would work just like it yeah
33:15 - but here you can see the the three dots
33:17 - are not on the left not on the right
33:19 - basically so we want to make it the full
33:21 - to make it to the full width so what we
33:23 - can do here we can give it full width
33:25 - and we can tape this whole thing into a
33:27 - separate Division and we can make it
33:29 - item Center and justify between so now
33:31 - the three dots are to the left and here
33:34 - we can now Define Flex item Center space
33:38 - of X of 2. now you can see this is good
33:40 - but here you can see the text speaker I
33:42 - think so I can give it a small yeah so
33:45 - now we have designed the similar looking
33:48 - Twitter sidebar we can make this thing
33:51 - this Avatar also bigger 12 watt yeah 10
33:55 - would work so you can see that the font
33:57 - is not similar to Twitter you can find
34:00 - whatever phone you like and I would just
34:02 - stick to the simple one which we have
34:04 - now and now you can see we have created
34:06 - the left sidebar for the Twitter layout
34:09 - so as you can see this is what we have
34:11 - currently we need this thing so this is
34:14 - centered first thing first and then we
34:16 - have this home then we have this Twitter
34:18 - composer thing where we can write our
34:20 - tweet and we can tweet this thing and
34:22 - then we have the border the bottom
34:24 - border and we have all the tweets
34:26 - rendered here so let's put this left
34:28 - sidebar into its own section so in the
34:32 - source directory we will create another
34:33 - folder called components inside
34:35 - components we have our left sidebar dot
34:40 - TSX rafce and we will copy and paste the
34:43 - whole thing over here we'll also need
34:45 - all these things here
34:47 - yeah
34:49 - it's now good and we will import the
34:52 - left sidebar in the main here left
34:55 - sidebar just like it save this thing and
34:57 - now we have a separate component for our
34:59 - left sidebar close everything and this
35:01 - is our main time line save this and we
35:04 - will see how it looks so it is currently
35:06 - being rendered over here why because we
35:09 - have this left sidebar and it is fixed
35:12 - so this container which is a flex
35:14 - doesn't know that we have this for now
35:17 - that's why so to make sure that it
35:20 - assumes that it has something over here
35:21 - what we can do is we can define a
35:24 - invisible container here or what we can
35:27 - do we can make it like left so we can
35:31 - give it margin of left so class name
35:33 - margin of left of 275 pixel let's assume
35:37 - we have a lot of low Ram Epsom here for
35:39 - the demo and now if we scroll this you
35:42 - can see we can scroll this and it is
35:44 - fixed it is fixed but we can scroll this
35:47 - and that's what we need so Ctrl holds it
35:50 - and now it is good now what we can do as
35:53 - you can see this has left border this
35:56 - has right border and this has tweets
35:58 - inside it and the home so we will say if
36:01 - this is flex W is we will give it some
36:03 - width which is how much width it is
36:05 - taking so let's find out so this has 598
36:10 - into 53 so it is 598 so we can give it
36:13 - 600 pixel almost the width and the
36:17 - height is full obviously and it is a
36:19 - flex column that's all we need and now
36:21 - here we have H1 and it is home as you
36:24 - can see on the Twitter and let's give it
36:26 - text 3XL font bold save this and we will
36:30 - see how it looks yeah now we need to
36:32 - also give it powder left border right or
36:35 - left and right no top and bottom only
36:37 - left and right border left and border
36:39 - right and Border color is gray 400 I
36:42 - think yeah it is 0.5 pixel I think and
36:45 - the border is
36:48 - it looks good it is one pixel left and
36:51 - right border and the height is full as
36:53 - you can see here the height is full and
36:56 - the minimum height I think we can give
36:58 - it a screen so now you can see it is
37:00 - taking the whole screen for Twitter and
37:02 - we here to give some padding to it and
37:05 - 3XL is also a bit too much we can give
37:07 - it some 2XL and let's give some padding
37:11 - of five six would work yeah it is good
37:13 - but we need this to be 0.5 pixel for
37:16 - that what we can do we can say 0.5 pixel
37:19 - just like it and the same thing here it
37:22 - is looking better now we need some
37:23 - padding for it also you can see the
37:25 - padding between these two so let's go to
37:27 - or we can give it some margin we can
37:30 - give it the whole thing margin so
37:31 - padding and margin of X is 2 left yeah
37:35 - so we have to give it some padding to it
37:37 - so let's give it PX of
37:40 - over six now now it is good you can see
37:43 - this is over bottom whole thing and it
37:46 - is a sidebar and this is looking good
37:47 - and the home is small small a bit so
37:50 - let's go into the page here you can say
37:53 - this is Excel this is good and now we
37:55 - will Design This compose box so for now
37:58 - here we can come in here you can you can
38:01 - say class name this also has the Border
38:03 - top and bottom so instead of this we can
38:05 - copy the whole thing we can give it top
38:07 - and bottom we are not giving left to
38:10 - right but because if we did then it will
38:12 - be two borders because we have already
38:15 - given left and right border here if we
38:17 - give it here it will be two orders and
38:19 - it will look like a little bit Bolder so
38:21 - top and bottom so we have top and bottom
38:24 - for this box and what we need now we
38:27 - need some height so how much height we
38:29 - it is so we can give it Like H of 3 32.
38:34 - let's try this for now we will see what
38:36 - it is and now it it has a author which
38:40 - is the user profile and here it is the
38:42 - input which is what's happening the
38:45 - placeholder and now here we can write a
38:47 - lot of things so low Ram Epsom let's
38:50 - choose some words not like this uh
38:52 - generate paragraphs yeah so now you can
38:54 - see Twitter character limits so I think
38:56 - 144 is a character limit of Twitter
38:58 - Twitter character limit 280 characters
39:01 - okay so so it has two at the character
39:04 - limit okay so we can now give it
39:07 - relative also and now inside it inside
39:10 - this division we have this Avatar and
39:12 - author so we can make two revision
39:15 - inside it first one is for Avatar which
39:17 - is a W10 h10 height and width is 10 and
39:21 - BG is Select 400 rounded is full it is
39:25 - good here we have two things we have
39:28 - this input box then we have this border
39:31 - then we have this tweet button this
39:32 - image GIF this Emoji picker this pole
39:36 - okay so we will also implement this
39:38 - thing also this is a cool functionality
39:40 - and we will try implement this this is
39:42 - both this is scheduling so if you want
39:45 - to schedule the Tweet you can do it yeah
39:47 - so this is a kind of form we can for now
39:50 - this is a division this is a division
39:52 - inside it we have two divisions like
39:55 - this so we can make it Flex column Flex
39:58 - Flex column inside we have two divisions
40:00 - this is a input box type of this input
40:03 - is text and placeholder is what's
40:06 - happening this has border of bottom
40:10 - 0.5 pixel and the powder color is gray
40:15 - as as you can see we have already given
40:17 - the Border color here so we don't need
40:19 - to give it again and again now we have
40:21 - this thing
40:22 - so class name and we can make it w full
40:26 - justify between item Center to make all
40:29 - the divisions all the children division
40:31 - to Center according to the Y axis
40:33 - because this is a flex row okay so you
40:36 - can give it Flex row now we have two
40:38 - inside two divisions and this has all
40:40 - the things like image icon GIF icon
40:43 - Emoji picker all the things but we don't
40:46 - need this thing now we can just skip
40:48 - this for now and here we can define a
40:51 - button or the button here and we can say
40:54 - tweet and it is the similar button to
40:57 - this thing so we can copy this whole
40:58 - button for now the classes around it is
41:01 - full opacity is cool everything is good
41:04 - now let's see how it looks yeah so it is
41:06 - looking cool for now now what we need to
41:08 - do is this input field it knows looking
41:10 - good so we have to give it some classes
41:13 - W full H is full BG is transparent and
41:18 - outline is none border is also save this
41:22 - now you can see this is cool if we
41:24 - remove this here this border is the
41:27 - color border is not working so we have
41:28 - to I think here also yeah and what we
41:31 - need to do is we need to give some
41:33 - padding to it so instead of giving this
41:35 - thing here we can give it padding bottom
41:37 - of four or the whole padding is four we
41:40 - can remove this division round it is
41:42 - full we can remove this margin for this
41:44 - spreading is 4 is also a bit weird we
41:47 - can give PX4 py of 2 W of full let's
41:52 - give it Max with uh 400 pixel would work
41:55 - I think okay it is bit much 40 pixel and
41:59 - the text is bold phone is bold basically
42:01 - text is 2XL node 2XL LG would work yeah
42:05 - it is similar to Twitter we have our
42:07 - button here cool now what is happening
42:10 - and this is border is overflowing why is
42:12 - that because I think we have some
42:15 - mistake over here so let's find out this
42:17 - is a flex this is also Flex what we can
42:20 - do is we are giving it border bottom and
42:23 - top yeah so we can make it Flex this is
42:26 - flex this whole container is flex and
42:29 - items are Center space between them is
42:32 - two and now we need to give it with full
42:34 - now it is similar to this but here we
42:36 - need to do something we have to give it
42:38 - Flex none so that the rounded full works
42:41 - by default perfectly items not center
42:44 - items start yeah items are start but we
42:48 - have to
42:49 - what about stretch so it will take the
42:51 - whole Y axis instead of note taking the
42:55 - advantage of full height and now we can
42:57 - also give it some padding to Y 4 would
42:59 - work so I think this is similar yeah we
43:02 - need to also give some padding after
43:05 - below the home so we can give it the
43:08 - Mars into it yeah but as you can see we
43:11 - have given some padding to it so this
43:13 - border is not taking the full width so
43:15 - instead of that what we can do here we
43:17 - have another option so where we have
43:19 - given py okay so here P6 so left and
43:24 - right border P6 if I remove P6 yeah it
43:27 - it is working
43:28 - so what I think we can give it py if we
43:31 - remove the whole P6 we need some padding
43:34 - we need to give some padding to it so we
43:36 - can give it here so we can give it PX or
43:39 - 4 now it is good and we need to also
43:41 - give P 6 to it so we can give it P6 so
43:45 - it is now looking much similar to the
43:47 - Twitter you can see the sidebar this is
43:49 - our home and this is looking good but we
43:52 - need to make our placeholder look a bit
43:55 - much bigger so we can design our
43:57 - placeholder by doing this placeholder
43:59 - colon and now we can give placeholder
44:01 - classes so parlays folder is 2XL and
44:03 - placeholder color is also a bit dark so
44:07 - placeholder text Gray 800 about 600 yeah
44:12 - it's similar now it's good you can type
44:14 - here and instead of giving this whole
44:16 - thing we can make it yeah so now if you
44:18 - type something and you can tweet it good
44:21 - cool now we have our page six but we
44:24 - have given its a fixed height that's why
44:26 - it is not working so what if we remove
44:28 - the height
44:29 - it is good so now as you can see we have
44:31 - designed this tweet section now the time
44:34 - to create the Twitter timeline here this
44:38 - whole timeline so to design the Twitter
44:39 - timeline we have to design the tweets
44:42 - and then we can render them so let's
44:43 - design this whole tweet so as you can
44:46 - see first thing first it has stop in
44:48 - bottom border and then it has some
44:50 - padding author name username date when
44:54 - it is published the Tweet text and the
44:56 - image and video or GIF or something so
45:00 - what we can do this is our division this
45:02 - is home and now here we will render our
45:04 - tweets class name Flex Flex column here
45:07 - we can say array we can create a fake
45:10 - array area Dot from the length of let's
45:12 - give it length of 5 for now dot map
45:14 - tweet this will create a array of five
45:17 - length in which each item has undefined
45:20 - as its value so now we can render a
45:23 - division as a tweet so key is I which is
45:26 - index now we can give it top and bottom
45:28 - border we can give it padding good yeah
45:31 - so you can see it has a icon here so you
45:35 - can assume like this is a flex container
45:38 - the whole container then we have this
45:40 - container two containers are here first
45:41 - one is this hole and second one is this
45:43 - what I'm saying is this is our tweet
45:46 - inside tweet we have two containers
45:48 - first one is for the Avatar this
45:49 - division we have the Avatar here and
45:52 - another division is this inside this we
45:54 - have the name here and then the username
45:56 - here and then the text here and then the
45:59 - image or all the things here this is how
46:01 - it works first thing first we will
46:03 - Define two divisions first second inside
46:06 - we have author these are in the flex row
46:09 - Direction inside we have in the column
46:11 - Direction first one is row second one is
46:14 - text and third one is image or any media
46:17 - file so let's go so we can say Flex we
46:20 - can give some SpaceX of 4 and inside it
46:23 - we have two reasons first division is
46:25 - Avatar only so here we can make another
46:28 - division class name wtain S10 BG slate
46:33 - 200 and that's all we need rounded full
46:37 - here we have three divisions first
46:39 - second third two into three first
46:41 - division has three divisions three
46:44 - divisions I'm if you are using vs code
46:46 - this all will work Auto completion and
46:48 - you can how it is working so I am typing
46:51 - du into three and then it is giving me
46:54 - auto completion if I hit Control Plus
46:56 - space on my Mac keyboard Control Plus
46:58 - space and if I hit enter this is emit
47:00 - abbreviation and it will work like that
47:02 - so it is a name so we can say Club of
47:05 - coders this is my username Club of
47:07 - Hoarders and this is one hour ago like
47:11 - this as you can see programmer humor
47:13 - programmer humor and this is also we
47:15 - have a DOT here so we have four
47:17 - divisions okay so we have four divisions
47:20 - and here we have a DOT so PS dot just
47:24 - like it and all these four things are in
47:26 - Flex column not Flex column Flex row so
47:28 - we can give with flex item Center space
47:31 - of X of 2 of 1 1 will work so this is
47:34 - our first one the second one is text so
47:36 - we can give its low Ram of let's assume
47:39 - 100 this is a bit much the two it can be
47:42 - this much longer I think yeah
47:44 - so this is what we text it is text white
47:47 - text small and that would work this is
47:51 - flex column by the way Flex column let's
47:54 - give some y space to every children and
47:57 - it will work here we have all the media
48:00 - file so for the media as for now I will
48:03 - just render a square thing so I will say
48:06 - BG of slate of 400 aspect is square W
48:12 - full height I will give let's give it 96
48:15 - 96 would be good and that's all yeah we
48:18 - can make it rounded 2 XL or Excel would
48:20 - work this is media and now here we have
48:24 - all these things comment retweet like
48:27 - stats and the share button so five
48:30 - things we have here so five division
48:32 - first one is comment second one is
48:35 - retweet we will select each icon for
48:38 - that now we have like now we have States
48:41 - and here we have share and these all
48:44 - icons are in Flex row Direction and we
48:47 - have item Center we will give space of X
48:50 - of 2 we can give it to be full and
48:52 - that's how we have designed the single
48:54 - tweet and it should be rendering
48:56 - whiteweight for us and now let's go and
48:59 - now you can see all the twists are being
49:01 - rendered over here cool but we have to
49:03 - tweak a few things for now we have to
49:06 - give it the padding of Y axis so here we
49:10 - are giving padding X we also we need to
49:12 - give padding of Y so now it is good you
49:14 - can see this over tweets we need to also
49:16 - do something we need to make it bold
49:18 - this text should be bold so here what we
49:22 - can do we can make it Port font bold and
49:26 - that's good as you can see these borders
49:29 - are not looking good why because we are
49:32 - giving each tweet top and bottom border
49:34 - which is not needed so to remove that we
49:37 - only need to give it only top now you
49:40 - can see we are only giving the top
49:41 - border not giving the bottom and we can
49:45 - also keep it bottom border yeah now it
49:48 - works it works but the problem is if
49:51 - let's let's remove this for now and you
49:53 - will see what is happening here so we
49:54 - have this border that's why we are not
49:56 - giving border of top here we will give
49:59 - border of bottom so this tutorial
50:01 - contain the border of here then here and
50:03 - then here so it will work so save this
50:06 - and it is good but we have to give it
50:08 - the exact color which we want save this
50:11 - and now it is looking good it is good
50:13 - now what we need when we try to scroll
50:16 - this this home should be fixed to the
50:18 - top for that what we can do we can give
50:21 - it blur we can not blur back BG plus
50:25 - backdroper basically backdropular and PG
50:28 - white of 10 and we need to make it fixed
50:32 - or we can make it sticky to the top top
50:35 - now you can see this is sticky and this
50:37 - is backdrop blur you can see if we
50:40 - remove this let's give it black 10. now
50:43 - it's good yeah now it is sticky the home
50:45 - part is sticky to the top always
50:48 - remember to q a top bottom left right
50:52 - any position while using a sticky
50:55 - position you need to give some position
50:57 - to it while using sticky otherwise the
51:00 - SDK Position will not work like this you
51:03 - can see the space is bit too much for
51:05 - now so we can reduce the space so what
51:08 - we can do here the Border bottom P4
51:12 - space axis 4 which is good but space yo4
51:15 - is not needed 2 will work now it is good
51:18 - so now what I will do I will select the
51:20 - icons for each of the thing comment like
51:23 - and all the things I will go to here and
51:26 - I will find all the icons I am finding
51:28 - if some icon is looking similar to the
51:31 - Twitter one but yeah it is looking good
51:33 - so I will go here this is your comment
51:36 - icon let's import this this is a retweet
51:39 - search yeah we have a repeat icon import
51:42 - this from react icon slash AI this is
51:45 - our like which is like this will work
51:49 - this is the share icon no this is the
51:51 - state cycle so we can search States
51:58 - let's import this and the last icon we
52:01 - need is share icon which is yeah kind of
52:04 - like this import all of them and it is
52:07 - good to go I think what we can do here
52:09 - instead of item Center space we can make
52:12 - it justify around so it will take the
52:15 - full width and stretch all over the
52:17 - width you can see it is instead of this
52:20 - what about justify around what about
52:23 - evenly you can try whichever looks good
52:26 - I would go for just if I start and Space
52:29 - X of 8 more space X of 20 24 20 would
52:35 - work now I need to give it extra of Y2
52:39 - it will not work let's give everyone M
52:42 - by 2 and let's give M by 1 and it will
52:45 - also my one yeah it is good M by three
52:48 - how about M by three I need to give some
52:50 - space to it it is not working why is
52:53 - that because we have given this m space
52:55 - of Y yeah now it is good so what we can
52:57 - do we can give it the top instead of
52:59 - full my we can give it also M term 2
53:03 - yeah it is actually good and whenever we
53:06 - hover these icons there should be a nice
53:09 - looking around it full let's give it
53:12 - this this parent round it full and BG's
53:15 - black 10 20. let's go for 24 now and
53:19 - only when we have hover this otherwise
53:22 - don't make it look so let's try this
53:25 - also make it like
53:29 - cursoris pointer so it is not looking
53:31 - how about 50 yeah we need to give some
53:33 - padding to it now if we hover it is
53:36 - visible now you can see this is looking
53:38 - good so I would go for 30 20 actually go
53:42 - for 10 as we did here 15 10 would work
53:45 - and that's cool we can make a transition
53:48 - and the duration is 200. good now I
53:52 - think we don't need to queue the PMT two
53:55 - will work cool it's good and we will
53:57 - copy this classes and we will paste to
54:00 - each of the division instead of doing
54:02 - this we can define a component and we
54:04 - can render this icons but for now we are
54:07 - just doing this in the future we can fix
54:10 - our organization part so as you can see
54:13 - we have designed our timeline section
54:15 - for our Twitter there is three dots
54:17 - which is not visible and the text is
54:19 - also a bit larger so instead of text SM
54:22 - how about going with large yeah this is
54:25 - actually good or just stick to the base
54:27 - and this is the curriculum username is
54:29 - text Gray
54:31 - this whole thing is gray basically so we
54:34 - can remove this okay paste this class
54:37 - here also and here also yeah it is
54:39 - looking good and now we have our tweet
54:42 - timeline section but we also forget to
54:45 - make this three I can see here this
54:47 - thing we also need this three dots so we
54:50 - will wrap the whole thing cut it inside
54:53 - a division and there is another division
54:55 - which is PS3 dots we need to give these
54:59 - classes to this espresso effects don't
55:01 - need it here and it is good we can make
55:05 - it full width we can give it full width
55:07 - okay so note this thing okay so I think
55:10 - I have included it here so this bs3 dots
55:13 - should be outside this division here
55:16 - save this now you can see this is at the
55:18 - end and now we can also give some
55:20 - padding to it so to give it some padding
55:23 - what we need to do is how much bedding
55:25 - we are giving it so let's see P4 so we
55:28 - need to give some more padding to it how
55:30 - about be it
55:31 - p y 4 and P x 6 it is not working as
55:36 - expected it's good I think because we
55:38 - have given it fixed width that's why it
55:41 - is not working where it was so as you
55:42 - can see we have given it fixed width so
55:44 - if you remove this whole thing if you
55:45 - remove this now you can see this is
55:47 - taking a hell lot of width and what you
55:50 - can do here we can make it full with but
55:53 - you can Define some Maximum width let's
55:55 - go for 512 pixel or a bit more Excel a
55:59 - bit more to excel would work yeah now
56:01 - it's good because the image we have used
56:03 - we have given it 384 pixel and this is
56:06 - 672 pixel and now it is looking good it
56:09 - is a bit bigger than the Twitter but
56:12 - yeah I think we have to follow the tutor
56:15 - convention which is 600 pixel and we can
56:17 - make it smaller 80. now it is good cool
56:20 - so it is looking perfect now now we need
56:23 - to design the right sidebar so here as
56:25 - you can see this is what we have
56:27 - designed as for now so we can cut this
56:30 - thing and we can make a new file which
56:32 - is main component rafce
56:36 - paste here so these all are server
56:39 - components because if you want to use
56:41 - clients components you have to put use
56:43 - client here like this because we are
56:45 - using next year's 13 words so if you are
56:48 - defining use client then it is a client
56:50 - component if you are not saying anything
56:52 - then it is by default server component
56:54 - so we will import everything we will
56:56 - save this main component we will import
56:59 - this here cool now we have to design
57:01 - override section so this is also a fixed
57:04 - width so fixed now we need to give it
57:08 - something it is also Flex Flex column
57:11 - and space of Y of let's give it 4.
57:14 - inside we have three sections you can
57:16 - see this is our search bar this is
57:18 - trending section and this is who to
57:19 - follow section so this has three
57:22 - divisions first one is search bar so we
57:24 - can say input text so the type of this
57:27 - input is text and the placeholder is
57:30 - search tutor let's give some class names
57:32 - it doesn't have any border but it has
57:34 - this search icon so to keep this search
57:37 - icon what we need to do is we need to
57:38 - wrap this whole thing inside another
57:40 - Division and we will give it relative
57:42 - class W is full height is full and we
57:45 - also give it w of full height of full
57:48 - and we will give it rounded Excel and
57:51 - the other thing we need to give it a
57:53 - spading of let's give it four and now we
57:56 - will Define search icon here we will
57:58 - find a search icon so we can find the
58:01 - search icon this PS search I can looks
58:03 - good to me yeah it is looking good so I
58:06 - will import this and I will make it
58:07 - absolute and we need to also Center this
58:10 - alongside the y-axis so we will create
58:12 - another division inside we have this
58:14 - search icon and it is taking let's give
58:17 - it W5 H5 text is gray of 400 let's give
58:21 - it 500 okay so this is a relative and
58:24 - this is absolute division
58:26 - absolute division this is absolute with
58:29 - respect to this division so that we can
58:32 - move it around anywhere and we will now
58:34 - give it top 0 and we will make it high
58:37 - to full we'll make it Flex we can Center
58:39 - it that's how we are centering this
58:41 - thing to here so as you can see this is
58:43 - the icon let's go here so I will make
58:45 - you understand what I am doing here so
58:47 - this is our relative parent container so
58:49 - this is our relative parent container
58:51 - and we are saying that we have division
58:53 - which is absolute so this is absolute
58:56 - Division and we are saying the position
58:58 - of this absolute division is top 0 and
59:00 - right zero this means this absolute
59:02 - division which means this is the
59:04 - absolute division we have absolute
59:06 - Division and this absolute division has
59:09 - the position of top 0 and right 0 means
59:11 - top left which means the position of
59:13 - this division is top left and that's how
59:16 - it will take this whole height and after
59:18 - it is taking the whole light we are
59:19 - saying that everything inside it we want
59:21 - to Center so we will Define a icon and
59:24 - we want to center it that's why we are
59:26 - giving it flat and item Center and we
59:28 - will also give justify Center to make it
59:30 - Center and that's how it will work cool
59:32 - now we have done this we can also give
59:34 - it some padding but as for now let's
59:36 - proceed with it and let's see what is
59:38 - happening we will also give outline is
59:40 - null BG is also transparent and border
59:43 - is also save this and let's see how it
59:46 - is looking so you can see this is our
59:48 - search so this is right zero we instead
59:51 - want left zero so now you can see it is
59:53 - centered but we also need to give some
59:55 - extra padding to x axis so we can say
59:58 - the py is 4 good but we want p x to be 6
60:02 - or let's go for it now it's good and
60:06 - what we can do instead of division we
60:08 - can make it level and we can give it
60:10 - html4 search box and we can give it ID
60:14 - of search box so whenever someone clicks
60:16 - on this thing it will focus on the input
60:19 - so that's how we have designed this
60:20 - whole thing so this is fixed as you can
60:22 - see and we will make it right zero so
60:25 - that it will stick to the right as you
60:27 - can see we need to give similar kind of
60:29 - classes to this because as you can see
60:31 - we want it after this thing for that we
60:34 - will see what we are doing we are giving
60:35 - it a fix with so that's what we have to
60:38 - do here we can give it a fixed width to
60:41 - this section instead of write 0 we can
60:43 - give it fixed with okay so and H of
60:46 - screen now let's see let's copy all the
60:49 - things because this is the similar thing
60:51 - we need so the problem is we want this
60:53 - to be right for that I think we can give
60:55 - it margin of left Auto this has a width
60:58 - of 275 pixel that's that's okay but if
61:01 - we go for right 0 then it will stick to
61:04 - the far right but we don't want that for
61:07 - that the other thing we can do is this
61:10 - is relative we can make it absolute and
61:12 - now if we save this you can see this is
61:15 - here we can cut this thing and if you
61:18 - series is relative and we if we make it
61:20 - border of let's say 4 and now you can
61:23 - see this is to the left here but let's
61:25 - also make it something and remove this
61:28 - thing and give it border border of Four
61:31 - but we are missing something and I want
61:33 - let's give it this left sidebar also the
61:36 - absolute and left zero
61:39 - cool and now give it this main component
61:43 - with full where is this maximum width
61:46 - just give it with full it will take the
61:48 - full width instead of it will also take
61:50 - this width okay so why we need to make
61:53 - sure that
61:54 - it doesn't take more than this centered
61:56 - width for that we have to do some fixes
61:59 - here okay
62:01 - so these are both absolute division okay
62:04 - so there is one thing we can do yeah
62:06 - there is one thing we can do remove
62:08 - everything related to the position we
62:10 - can make it simple container a relative
62:13 - container like this WSC w275 pixel left
62:17 - sidebar this is already good we can
62:19 - remove this part save this now we can
62:22 - also remove this whole thing now if you
62:24 - save this you can see we have these
62:26 - three sections first one is this
62:28 - division second one is this Division and
62:29 - third one is this search bar so now we
62:32 - need to make sure that this main
62:33 - component doesn't take more than 600
62:36 - pixel Max width can be 600 pixel now
62:39 - it's good so it is taking more than
62:41 - which so I think we have to decrease
62:43 - some decrease this instead of LG yeah I
62:46 - would go for LG but it is not good so LG
62:49 - is
62:50 - 1024 pixels so I would go for 1100 pixel
62:53 - okay Max with 1100 pixel or how about 80
62:57 - VW which means 80 of the viewport let's
63:00 - go 70 of
63:01 - it's good then what we need to do we
63:04 - need to queue according to the width not
63:06 - with full but we can give it like this
63:09 - is taking let's assume this is hundred
63:11 - percent then this is checking 30 this is
63:14 - taking 30 and the remaining is just 30
63:17 - 30 60 and this is 40. we can do that so
63:20 - what we can do we can say with his main
63:22 - component is 60 and the left sidebar has
63:25 - the width of 30 percent and the
63:28 - remaining section has the width of 30
63:30 - percent yeah it's good but still it's
63:33 - not looking perfect we have to decrease
63:35 - some of the left High PX of 6 we don't
63:38 - need the p x x here PX of 4 would work
63:41 - and let's go for twenty percent yeah
63:43 - it's good so this is 20 percent this is
63:46 - also 20 percent now this should be 30
63:49 - yeah it's good now but the problem is
63:51 - with this the problem we are facing I am
63:54 - seeing that this is not this is too much
63:57 - of fading here we are giving so I don't
63:59 - think we should give it padding here we
64:01 - don't want to get the padding here yeah
64:03 - it's good now it is looking perfect okay
64:05 - as you can see it is looking good this
64:07 - is good this is good but this is a bit
64:10 - of weird so to fix this thing we can fix
64:12 - this here so what okay so don't give
64:15 - margin four yeah it's fixed
64:18 - now you can see because we are giving it
64:20 - margin it was not looking good so it is
64:23 - exactly like similar to Twitter s for
64:26 - now I think the 30 25
64:29 - and 25 and let's give it 50. okay 30 is
64:33 - bit too much for this left side but 20
64:35 - 20 is like perfect how about 23 yeah
64:39 - it's good 23 is good 23 is good and the
64:43 - main component should take the 50 that's
64:46 - also good and the remaining one is this
64:49 - with full this is with full now now it's
64:51 - good now it's perfect okay so we have
64:53 - designed this whole thing so now you can
64:55 - see this is not stickiest so to make
64:57 - this sticky what we can do instead of
64:59 - before we are giving the fixed now we
65:01 - can give it sticky so we can say this is
65:04 - sticky to the Top This is sticky and we
65:07 - can say top zero and the same thing we
65:09 - can do for the left sidebar now the the
65:11 - main component is not a sticky the left
65:13 - side virus so now you can see this is
65:15 - sticky for us okay so this is also
65:17 - sticky this is we need to make sure this
65:20 - that this is also sticky yeah now the
65:23 - both sidebars are sticky you can see
65:25 - this is also sticky this is also sticky
65:27 - and this is scrollable so this is the
65:29 - similar Behavior to our Twitter as you
65:32 - can see here now we can remove the
65:33 - border which we have given to these
65:35 - divisions to debug our television CSS
65:38 - now it is good okay so it is now looking
65:41 - absolutely dope now we need to give some
65:44 - gray to the border and for the icon so
65:48 - where we were in the main component
65:50 - close both the components here we are so
65:53 - we can give the background is not
65:55 - transparent it is actually some grayish
65:58 - background gray of 400 okay 400 is not
66:01 - good it is Greece or neutral I think it
66:03 - is neutral neutral neutral 900 is yeah
66:06 - you can see this is much better and 800
66:09 - would work okay so 900 and let's opacity
66:13 - is 990 yeah it is good it is good we
66:16 - will proceed with it now as you can can
66:18 - see this is the search icon is looking a
66:21 - little bit weird so to fix this we can
66:23 - give it some padding so this is our
66:26 - division which is relative so what we
66:28 - can do we can give it some padding note
66:30 - here this is absolute division we can
66:32 - give it some padding before it looks
66:34 - good now but we also need to make sure
66:36 - that we fix the PX so instead of p x we
66:41 - can give it P left of 10 and the P right
66:43 - is 4 by default let's make it 14 and
66:46 - also instead of top 0 I would say yeah
66:49 - it's good but I will give some margin to
66:52 - top P4 yeah and now you can make it to 4
66:54 - so it will be sticky yeah you can see
66:57 - this is now good looking good okay so
66:59 - now it works Forest a bit too much so I
67:03 - would go for two yeah it works so now as
67:05 - you can see we have designed our search
67:07 - when we click on this input button now
67:09 - it is focused and it is showing us a
67:12 - blue border so we will also make this
67:14 - effect so to do that when it is active
67:17 - or I I think it is when it is focused
67:19 - make the border border we need a border
67:22 - and the border is primary focus border
67:26 - is yeah now if we click this the Border
67:30 - doesn't look okay so you press this
67:31 - first now the border is not looking so
67:33 - board it is primary and the border is
67:36 - let's give it powder okay so we are
67:38 - giving border none that's why it is not
67:40 - working here now it will work so when we
67:42 - click this this is blue border and when
67:44 - we focus this border should be two now
67:47 - you can see it looks good not one by
67:48 - default the border border will work okay
67:51 - it looks better now we have our also we
67:53 - can group this whole thing what I am
67:55 - saying is we can group this whole thing
67:57 - this whole division we can group it by
67:59 - using this group class and now we can
68:02 - change this color also this search icon
68:04 - color also so we can say group over when
68:06 - this is group O or not over when this is
68:09 - group Focus we can say the text of this
68:12 - icon is primary and now it should it
68:15 - should work okay it is not working
68:16 - because yeah so to make this work we
68:19 - have to use some JavaScript so we can
68:21 - skip this part or we can use some peer
68:23 - classes I think we can use some peer
68:25 - classes there is something I think peer
68:27 - peers first peer focus and then text of
68:31 - primary it may work okay some something
68:33 - is Pure Glass Delvin before and after
68:36 - there is some class which I think we can
68:39 - make it work you can say group hover
68:41 - thing works but we want when the item
68:44 - which is nearby is forecast to do
68:46 - something okay so here it is so we will
68:49 - Define a peer class here we will say
68:51 - this is over here and when it is focused
68:53 - it is visible you can say when it is
68:55 - invalid visible this cool so now I think
68:57 - it will work save this
69:01 - okay so it is not looking how this works
69:03 - so let's see here again this is input
69:06 - which has period class and now we are
69:08 - using peer invalid visible won't work
69:10 - only previous sibling can Mark SPL okay
69:12 - so we have to we have to make it like
69:15 - this only previous siblings which means
69:17 - it won't work it will work like now this
69:20 - over this is our input and this is over
69:22 - and you can see okay so this is our
69:24 - input and this A P tag which is when it
69:27 - is invalid make it visible here it is
69:30 - saying that we have a span and this is
69:32 - our input so if this is before this this
69:35 - will not work now we have after this
69:37 - only previous siblings can be marked as
69:39 - peer okay cool now it is not still
69:41 - working okay so what's the problem
69:44 - let's try this for a simple other state
69:46 - so we can say this is a P tag class name
69:49 - peer Focus then make it visible
69:53 - otherwise it is invisible hello world
69:55 - okay you can see when we click this it
69:57 - is visible otherwise it is not and we
69:59 - want the same behavior for our text part
70:02 - which is this but it is not working why
70:05 - is that let's see yeah it is working now
70:07 - because the problem was we are giving a
70:10 - text Gray and we are saying that text is
70:12 - primary so it will not work because
70:14 - Telvin CSS will mark this class as a
70:18 - priority so this will be note our
70:20 - priority that's why it is it was not
70:22 - working now if you remove this from here
70:24 - now this classes will be applied to this
70:27 - thing save this and now you can see our
70:29 - thing is working without any JavaScript
70:32 - this is directly using Telvin CSS and it
70:35 - is so cool okay so this was the part I
70:38 - didn't know before and I just learned
70:40 - this thing now with you okay so this is
70:42 - so cool now we will Design This what's
70:45 - happening part okay so here is our
70:47 - training section part so it is also Flex
70:49 - Flex column that's all say we have S3
70:52 - and copy this thing over here what's
70:54 - happening and now here we can Define all
70:56 - things here we can define a division
70:58 - inside division we have array Dot from
71:01 - another fake array we will create let's
71:03 - we have five trending things for now and
71:06 - we will map through them item and we
71:08 - will say division key is and here as you
71:11 - can see this item it is by default
71:14 - undefined because it's a fake array so
71:16 - we can get the index for now and we can
71:19 - say trending item first like this now we
71:23 - have to design so this is a neutral
71:25 - color again so here we will say border
71:28 - not border round it is Excel BG is
71:31 - neutral um 900 and this is a bold text
71:35 - font is bold text is to Excel and wise
71:39 - for now it's looking good how about if
71:42 - we make it 800 no how about 950 no how
71:46 - about 50 I think 900 is good for now we
71:49 - can give it some padding as well yeah
71:51 - also we can give it margin and Y of 4
71:54 - cool and now we can design a this
71:57 - section this section okay so this is a
71:59 - hashtag and Below we have number of
72:02 - tests so we have two divisions div into
72:05 - two hit enter and here we can say
72:07 - trending item this instead of this we
72:10 - can say hashtag trending I plus one and
72:14 - here are the number of tweets this
72:16 - hashtag contents so how is this visible
72:18 - okay 35.8 K so let's go with this
72:23 - 35.8 okay this has the color of grayish
72:26 - and this is bold last name font bold
72:29 - text large this is text is small text of
72:34 - gray save this and let's see how it is
72:36 - looking okay so it is it is also note
72:40 - gray I think it is neutral and we will
72:42 - make it 400 yeah it's good forehand will
72:45 - do the work and if we hover over
72:47 - everything there is some background so
72:49 - we can also do that
72:51 - last name over BG white of 10 save this
72:56 - and now if you hover over this this is
72:58 - good but the padding we don't want to
73:00 - give to the whole container we only want
73:02 - to give it to this and we can give the
73:05 - padding to it now you can see we are
73:07 - good to go but here rounded Excel we
73:09 - also need to give this thing rounded
73:12 - Excel to the last element when this is
73:15 - last a rounded Excel rounded bottom we
73:18 - can say rounded bottom and we can say
73:20 - Excel now when it is last item it is
73:22 - rounded you can see it's look good it's
73:24 - good and what's happening is 2XL is bit
73:27 - much and Y can be 2 B4 can be 2 PX PX
73:32 - can be four it is good okay so now you
73:35 - can see this is our trending section and
73:37 - it's good okay we only need this thing
73:39 - now it is good we can give it some
73:41 - transition so that it looks smooth
73:44 - transition and other thing we need to
73:46 - give it a situation now it is smooth a
73:49 - bit okay so now we have designed
73:54 - make another division here another fake
73:57 - array 4 dot map key is I and this is who
74:01 - to follow same thing so we can copy the
74:04 - S3 here okay so we can copy the whole
74:07 - thing here basically we can copy the
74:08 - whole thing not from here yeah the full
74:11 - because this is exactly and with some
74:13 - modifications this is not here we were
74:15 - doing some wrong instead of what's
74:17 - Happening we can say who to Let's copy
74:19 - this how to follow save this and let's
74:22 - see now you can see we can the part is
74:24 - we only need to make this part sticky
74:28 - not the whole sidebar so we can come
74:30 - here and we can say this only division
74:33 - is sticky otherwise these both are screw
74:36 - level now you can see sticky and The
74:39 - Cone they are gone or I think there is
74:42 - another hack let's make this sticky top
74:44 - zero it is not working because the
74:47 - parent content is flex and it doesn't
74:49 - work like that so I think if we keep it
74:51 - fixed it will not work it will take the
74:53 - whole width that's why let's give it 25
74:55 - percent now we can adjust the right
74:58 - um 40 yeah now it is good
75:01 - but we are facing the same problem which
75:04 - means we are not able to scroll this
75:06 - thing so for that we were doing
75:08 - perfectly before so what I mean w full
75:11 - sticky and top two is good what we need
75:15 - to do is Overflow scroll we just need to
75:17 - give it overflow scroll so it is also a
75:19 - screw level it is fixed but it is also
75:21 - scrollable now you can see we can also
75:24 - scroll this part and we can also scroll
75:26 - this part cool now we have to just
75:28 - Define this it is a avatar this is a
75:31 - name this is a username and this is a
75:33 - follow-on follow button so we will do
75:34 - that thing this is the same thing we
75:36 - need we will give it Flex make item
75:39 - Center and here we have three divisions
75:41 - first division is Avatar class name
75:44 - W10 S10 BG let's keep it neutral rounded
75:49 - is full and that's all we need here and
75:52 - this is a class name Plex Flex column
75:54 - and we have space y of 2 this has two
75:59 - divisions first one is name which is
76:01 - other user and this is the username of
76:04 - the user one two three four okay and now
76:07 - this is a four one follow button so we
76:09 - will Design this button also so this is
76:11 - basically a button so we can wrap this
76:13 - button inside a button component or a
76:16 - button element class name rounded is
76:18 - full PX 6 p y is 2 BG white text is
76:23 - neutral 150 save this thing and let's
76:27 - see how it looks yeah it is much similar
76:30 - to the tutor one now we need to do some
76:32 - fixes here we don't need this space okay
76:35 - number one thing we have fixed now we
76:38 - need some space of X here now it's good
76:40 - or let's give it four now it's good and
76:43 - we have to make it bolded and white this
76:46 - thing last name font bold text white we
76:51 - need to give you text Gray and text is
76:54 - small it's better yeah so I think it is
76:57 - good but we need the follow this button
76:59 - to the at the end so what we can do
77:02 - margin of left Auto this is a hex
77:04 - sometimes this works and let's give it
77:06 - with full now it only works when margin
77:09 - of right now or this no we can make it
77:12 - Flex none it's good I think okay so
77:14 - instead of doing this what we can do we
77:16 - can make them justify evenly or around
77:19 - what do you think okay so this is the P4
77:22 - which is causing the problem now we can
77:24 - say justify around
77:29 - no
77:32 - this is good I think but we want to make
77:35 - this follow button to the left so for
77:37 - that we can use that again what is that
77:40 - heck wrap this whole rep these divisions
77:42 - to a another Division and wherever we
77:46 - this is this board save this first so
77:49 - you can see these both divisions are
77:51 - into this Division and now we can say
77:53 - justify between and it will work save
77:56 - this and now we need to give it Flex
77:59 - item Center space x 2 okay justify
78:03 - between Flex item Center everything is
78:05 - looking good okay the problem was you
78:08 - can remove this division yeah now it is
78:09 - at the end now you can see this is also
78:12 - looking perfect so now we have created
78:13 - the left sidebar we have created the
78:16 - main section this is our Twitter and we
78:18 - have also created the trending section
78:21 - the who to follow section all these
78:22 - sticky fixed positions are these things
78:25 - are working so as you can see here I am
78:27 - in the folder and the app is running
78:28 - this is a database diagram I have
78:30 - designed so first let's see how our app
78:32 - is looking so you can see this is our
78:35 - Twitter clone and it is looking
78:37 - absolutely top it is exactly similar to
78:40 - Twitter and it is awesome now this is
78:42 - our Twitter database diagram I am using
78:46 - this DB diagram website and you can use
78:48 - it too so as you can see we are defining
78:50 - table user has all the things related
78:52 - like username email other things so user
78:55 - can have multiple tweets this pins user
78:59 - to tweet is a relationship of one to
79:01 - many relationship but a tweet can be
79:04 - only authored by one user that's why
79:06 - author ID is string which is this and
79:09 - this is how we Define reference or we
79:12 - can say the relationship in this DB
79:14 - diagram website so don't worry about
79:16 - this thing I will share this thing with
79:18 - you you can just see that a user can
79:20 - have multiple tweets as you can see this
79:23 - is multiple this is one so one too many
79:25 - between user to tweet a tweet can have
79:27 - multiple hashtags a tweet can have
79:30 - multiple hashtags and a hashtag can also
79:33 - have multiple tweets so this is many to
79:35 - many relationship between tweet and
79:37 - history now a tweet can be liked by
79:39 - multiple authors so we can say a tweet
79:42 - can have multiple likes and it also
79:45 - connected to user a like his user ID
79:48 - Intuit ID so this is how we are saying
79:50 - that a tweet can have multiple likes and
79:52 - a tweet can also have multiple bookmarks
79:55 - and a user can also have multiple
79:57 - bookmarks so this is how it is working
79:59 - so this is our bookmark table and
80:00 - bookmark table also have ID user ID
80:02 - Twitter tweet ID created it if you are
80:05 - having hard time understanding this
80:06 - don't worry when we start coding this
80:09 - part you will understand it better and
80:11 - that's how it works and now this is our
80:13 - reply a reply is just a like of tweet so
80:16 - when a user replied to a tweet we will
80:18 - save some text with the Tweet ID because
80:21 - why we are saving the Tweet ID in the
80:24 - reply row because we want to know where
80:26 - this reply is related this reply is
80:29 - related to which tweet that's why we
80:31 - need a tweet ID so we can fetch all
80:34 - replies of a tweet by saying that qumi
80:36 - database give me all the replies of this
80:39 - tweet ID then we will have all the
80:41 - replies of a tweet but if a user is
80:44 - replying to a reply that's why we are
80:46 - saving a reply area also so here when we
80:49 - will Define this it can be null so you
80:51 - can visit the DB diagram you can see DB
80:54 - diagram syntax and you can find out how
80:57 - I have written this whole thing reply
80:59 - identity both are optional both are
81:02 - optional so here this is a dbml language
81:04 - basically so this is the whole syntax of
81:06 - dvml language you can see how we are
81:08 - defining menu to one relationship
81:10 - between these and how we are doing all
81:12 - this stuff you can also share the node
81:14 - or the save the node like this if you
81:16 - write this and if you look at the reply
81:18 - you will find the store user this is the
81:21 - note we don't need we just need to
81:22 - understand what we are storing in the
81:24 - database so first thing first this is a
81:26 - text VR showing the username when this
81:28 - tweet is created who is posted this to
81:31 - it and the likes bookmarks and other
81:33 - things and here you can see nod null if
81:35 - this is the username is like this if the
81:38 - username is we want to be node null then
81:41 - we can justify it like that note null
81:43 - and unique so we can copy this thing and
81:45 - we can say in the users table here we
81:48 - can say it is not null and unique we can
81:50 - also Define the default like 10 now and
81:53 - all the things you can read this which
81:55 - is on the DB diagram.io talks slash dbml
81:59 - and you can click this link to see all
82:01 - the syntax to write this database design
82:04 - okay so now we have understood what is
82:06 - our data now we will use share gbt to
82:09 - build a query for us because I don't
82:11 - want to manually create all the data
82:13 - inside our database so what I am saying
82:16 - is if we go to superbase if I sign in
82:18 - now I can see this is Ultimate Twitter
82:20 - clone and here I have this is a SQL
82:23 - editor and here this is how you define
82:25 - tables we can also go to this database
82:29 - and we can insert table like this but we
82:31 - have to do this all of manually and I
82:34 - don't want we want our productivity to
82:36 - be highest so for that we have to
82:38 - leverage the chair gbt you can see all
82:41 - the things are given here this is for
82:43 - storage this is for Edge functions Super
82:45 - Bass is awesome I think and we will use
82:48 - this now so let's visit jgpt and build
82:50 - the query so I will now open my another
82:53 - Chrome so now I will open my another
82:55 - Chrome tab here so this is changeivity
82:57 - and I will tell it that qma the query
83:00 - and I have already designed the DB so
83:02 - you can follow me just so I'm using zpd
83:04 - 3.5 the default so here is my database I
83:08 - will copy this and I will tell it give
83:11 - me post to create all tables and the
83:15 - dbml for those and use this dbm for the
83:20 - context like this and we will give it
83:23 - and now we'll it will you can see this
83:25 - is this has given us all the tables like
83:28 - this this is how much easier to use
83:30 - cheer gbt for us to write SQL now you
83:33 - can see ID you guid username email this
83:36 - is good and I think it is nice all the
83:39 - primary Keys foreign yeah it's good also
83:42 - I have renamed the like table with
83:43 - quotes like okay so what we can do we
83:46 - can use likes instead of this and if you
83:49 - visit this the database SQL editor
83:51 - create table you can see this is how it
83:53 - works ID begin generated by default is
83:56 - identity primary key set at it I'm
83:59 - starting with time zone default UTC not
84:02 - null we will copy something from it and
84:04 - we will modify according to us so let's
84:06 - copy all this and we will modify
84:08 - according to our need so user for the
84:10 - user I think in the here I think we have
84:13 - something
84:15 - use management instructor profiles yeah
84:17 - this is what I want so this will
84:19 - reference to overthrow users table and
84:21 - it will delete a user from our database
84:24 - when this is deleted from superbase auth
84:26 - table this is for the row level policies
84:29 - this is handle news when a new user sign
84:32 - up for a new account for on our website
84:35 - then this function will be automatically
84:37 - triggered and this will save a username
84:40 - into our table this is setting up all
84:43 - the yeah so we just need this thing this
84:46 - one this one and this one this three
84:48 - things we need for now let's copy in the
84:50 - SQL editor here so instead of this user
84:52 - I will say user ID uuid primary key yeah
84:56 - so we need username text unique we can
84:58 - use text inside postgres where care 255
85:01 - is required for SQL so here yeah the ID
85:05 - we need ID updated username full name
85:08 - full name okay full name is stored in
85:10 - oath Road users table also I think if
85:13 - you use Google sign in then it is not
85:15 - required also this is not required
85:17 - constrained username length this is good
85:19 - we just need one thing here username and
85:22 - it it should be unique and that's all we
85:24 - need for our profiles we can say our
85:26 - users now this is a function which will
85:28 - create a trigger and it will
85:30 - automatically insert a username now we
85:33 - don't need author so it will values new
85:36 - DOT ID new DOT Ray row user metadatized
85:40 - username so it will insert ID and
85:42 - username into our table like this insert
85:45 - into this table values are this and
85:47 - return new it will be automatically
85:49 - triggered and we will pass the metadata
85:52 - from our front end when the user signs
85:54 - up for a new account cool this is
85:56 - profile now yeah the uuid cool updated
86:00 - timestamp with time zone and we can
86:03 - utilize this here yeah so it will be
86:04 - default to now now we can remove this
86:06 - because we have utilized this whole
86:08 - thing these are rollable security
86:10 - policies we will see all the Securities
86:13 - at the last first we will Design or we
86:16 - will build our whole application or
86:19 - whole web application then you will see
86:21 - if anything wrong with the security part
86:23 - and we will improve our security for our
86:25 - web application okay so trigger on Earth
86:28 - user created it will be triggered each
86:31 - row execute processor public dot yeah
86:33 - now we have a tweet uuid it is a primary
86:36 - key so for that yeah it is also primary
86:39 - key reference so I think it's good see
86:42 - it is ID where care instead of where
86:44 - care I think we can directly use string
86:46 - or not string text author IDs text
86:50 - created a timestamp now we need to do
86:53 - one thing over here testing default
86:55 - notable this whole thing copy this for
86:58 - the timestamp one part we will do this
87:00 - yeah this is hashtag okay tweet ID uuid
87:05 - okay this is also good you can use
87:07 - capitalize or small case both will work
87:10 - that's not a problem here primary key is
87:13 - good foreign key yeah this is for
87:15 - reference tweet hashtag so this is
87:17 - another table which means a tweet can
87:20 - have multiple hashtag and a hashtag in
87:22 - your multiple tweets so it will store
87:24 - tweet ID and hashtag ID and the primary
87:27 - key is both tweet ID and hashtag ID and
87:29 - it will reference to the table in tweet
87:32 - and hashtag the id id field the
87:35 - reference is ID field yeah and the reply
87:38 - is also like that user ID this is good
87:41 - create table like so now we can do one
87:43 - thing instead of saying like we can do
87:46 - likes we can say replies instead of
87:49 - tweets instead of Twitter you can say
87:51 - tweets this is better not here we can
87:54 - various to it tweet hashtag is good
87:56 - tweets hashtags this is better
88:00 - programming practice to name your table
88:02 - like that tweets instead of tweet this
88:04 - is hashtag stable this is tweet hashtag
88:07 - yeah this is fine now it replies this is
88:10 - good
88:10 - here just tweets so be careful by doing
88:14 - all these things tweet ID user ID reply
88:16 - ID this is fine now we have likes so
88:18 - likes is good we don't need to use the
88:21 - double quotes but it will be fine if you
88:23 - use or not use here user ID code code no
88:27 - so instead of users we are saying
88:29 - profiles so here you can see so instead
88:31 - of user everywhere instead of user we
88:34 - will say profiles ID profiles here also
88:37 - profiles SEO tweets so we will we will
88:40 - have to instead of bookmark we will say
88:42 - bookmarks The Bookmark should be unique
88:44 - that's why we are saying that constraint
88:46 - bookmark is unique unique user identity
88:49 - it is good like should be also unique a
88:52 - user why this is unique because a user
88:54 - can like a post one time and a user can
88:57 - bookmark a post one time that's why we
88:59 - will save only one record in our
89:01 - database that a user is liked or
89:03 - bookmarked a post we will not allow a
89:06 - user to like or bookmark multiple times
89:08 - or in the other words to save multiple
89:11 - rows inside over DB for one thing so
89:13 - user ID this is good okay so let's check
89:16 - again one time so we have profiles this
89:19 - is looking good we have this trigger
89:22 - function which will save a username into
89:24 - our database every time a new user is
89:26 - created this is our tweets table this is
89:29 - our hashtag Stables this is a table
89:31 - which will Define a relationship between
89:33 - tips and hashtags table so this is
89:36 - streets and this is hashtags like this
89:38 - cool now we have replies profiles tweets
89:42 - replies cool now we have likes this is
89:45 - also we are yeah Astro tweets we have
89:48 - tweets okay so this is good that's all
89:50 - the table we need and now we can run
89:53 - this query and over all functions our
89:56 - tables will be created so click on run
89:58 - and it will be fail to run okay so let's
90:01 - see what is the problem here so it is
90:03 - saying that foreign user ID foreign key
90:07 - cannot be implemented so in the replies
90:09 - so where it is here
90:11 - so it is primary kit text is text okay
90:14 - so here we will say that it can be null
90:17 - okay so for that it is null or node null
90:20 - so if it can't be null then we have to
90:23 - define or we have to say normal
90:25 - otherwise we can just skip null part
90:28 - yeah so now here we can say not null
90:30 - like this this is also notal a tweet
90:33 - must contain text here also this should
90:36 - be not null okay tweet hashtag tweet ID
90:39 - hashtag this is good not null not now
90:42 - good here also we will say not null here
90:44 - user ID can't be null but tweet ID or
90:47 - replied both can be null so we will ask
90:49 - here jgpt that okay so let's first run
90:52 - again it and then we will see what is
90:54 - happening so this is yeah this is also
90:56 - not null this is also not null here is
90:58 - timestamps we will use this whole thing
91:01 - here again let's run it again and we
91:03 - will see what is happening so we will
91:05 - ask this error to change GPT so that it
91:07 - will fix this for us
91:14 - let's see
91:20 - now it is updated over so I will give it
91:23 - my new this whole query I am saying that
91:27 - find any problem with this okay so it
91:29 - will say your modify query looks mostly
91:31 - correct but there is a couple of issues
91:32 - that I spotted in the replies table the
91:34 - foreign key constraint tweet ID
91:36 - reference to tweet stable instead of
91:38 - tweet Stables ID column oh that's the
91:40 - problem so you can see how we can
91:42 - utilize this to increase our
91:44 - productivity okay so what's the problem
91:46 - in the bookmark table okay you should
91:48 - change this to foreign key to it ID so
91:51 - it is a foreign key okay so we are
91:53 - saying which is a foreign key let's copy
91:55 - this thing if we can see the difference
91:57 - between the thing share gbt given us
91:59 - okay so this is uuid cool usernal tweet
92:02 - ID now let's remove this and we will run
92:04 - it again it replies user ID foreign
92:07 - cannot be implemented so I think it is
92:10 - mostly because of this line because yeah
92:12 - applies uuid okay user ID note null okay
92:16 - now how about it likes okay okay now it
92:19 - is working so what we have did is likes
92:22 - user ID foreign key so this is likes
92:25 - these both are uuid we are saying that
92:27 - these are text that's why it is showing
92:31 - us the problem author ID call a tweet a
92:34 - profile or we can say a tweet can have
92:37 - multiple users a tweet oh no a tweet
92:40 - can't have multiple a user can have or
92:43 - we can say a profile can have multiple
92:45 - tweets fix the TV according to this and
92:50 - also fix any error now it will create a
92:53 - foreign key like that author ID and
92:55 - profile ID that's we need previously we
92:58 - don't have any foreign key or relation
93:01 - between date and user now we have a
93:03 - foreign key author ID and profile ID
93:05 - yeah but we don't need author and
93:07 - profile two things we okay it can be
93:09 - just only one so profile ID remove this
93:12 - author thing here
93:14 - now it's good now we will run this and
93:16 - we will see if it is working or not
93:17 - let's try invalid SQL okay so we have
93:20 - did some mistake here what can be the
93:22 - mistake
93:26 - okay
93:28 - success now it is successfully run and
93:32 - we will see if it works as we want so
93:35 - first of all we will go to home in the
93:37 - tables now we have seven tables
93:40 - bookmarks let's see that bookmark have
93:42 - ID user ID tweet ID created it that's
93:45 - what we want first of all we will see
93:47 - profiles profile says ID updated
93:50 - username full name okay good replies
93:53 - this is good reply ID tweet ID user ID
93:55 - everything looking good and now we
93:58 - should also have a trigger if we if you
94:00 - click on a trigger these are our tables
94:02 - and if you click on a trigger here you
94:04 - can see when the user is created we have
94:06 - a handle new user trigger which will
94:10 - insert a username to our profiles tables
94:13 - this one we can do all these things
94:15 - webhooks functions and we will utilize
94:18 - this according to our need you just saw
94:20 - how we have used shared GPT to create
94:24 - SQL query for us and to fix the error
94:27 - and all these things okay and if you
94:29 - want this code let me just create a note
94:32 - here this one I will copy this whole
94:34 - thing and I will create a GitHub guest
94:36 - so this is DB design dot for ultimate
94:42 - Twitter clone just like it I will create
94:44 - a public just and that's all and I will
94:46 - share it with you I will put this into
94:49 - my readme file database I will save this
94:52 - for now I haven't committed or pushed to
94:55 - GitHub let's let me push that so okay so
94:57 - you can follow along and you can find
94:59 - all the code let me also create a GitHub
95:01 - repository now the code is live on my
95:04 - profile you can visit Sony prinjel on
95:06 - GitHub and you will find the repository
95:09 - here it is public repository and you can
95:11 - find it you can follow along and here is
95:14 - the code which we have used for our
95:16 - supervis so now we have also
95:18 - accomplished our database part now what
95:21 - we will do I will put this whole section
95:23 - into another component which is the
95:25 - right section so I in the components new
95:28 - file right
95:29 - body of CE I will press the whole thing
95:31 - here and this save this and I will
95:34 - import this here good to go now if you
95:37 - visit localhost 3000 you can see this is
95:39 - our application and it is running on
95:41 - Port 3000 and this is all the code you
95:44 - can find all the code in the description
95:46 - there is a link to GitHub and we are
95:48 - going to use this Library called UI dot
95:50 - sharedcn.com it is a great Library it
95:53 - has a lot of components and we can use
95:55 - these components instead of building
95:57 - that on our own to increase our
96:00 - productivity and to not reinvent the
96:03 - wheel again and again so as you can see
96:04 - currently we only have the Telvin CSS
96:07 - installed so to install this UI Library
96:10 - we just have to follow all the things so
96:12 - if you want to create a directly
96:14 - repository or you can say a fully
96:17 - fledged next.js product with this UI
96:19 - Library you can directly use this
96:21 - command but we have already installed
96:24 - all the things so we have to manually
96:25 - install this Library so first of all we
96:27 - will install this uh and beam packages
96:30 - so we are using pnpm so I will open a
96:33 - new terminal and I will install all of
96:35 - these things so this is for icons Telvin
96:38 - merge is used for merging the Tailwind
96:40 - classes and I will explain you what it
96:43 - is later clsx is also for merging
96:47 - classes and it's kind of like if you
96:49 - want to use logical classes or if you
96:53 - want to like assume if you are doing
96:55 - something and if something went wrong or
96:58 - the error occurs and you want to render
97:00 - a button color to Red based upon a logic
97:04 - then you have to use some JavaScript for
97:07 - your Telvin classes so instead of using
97:10 - JavaScript so instead of doing Curly
97:12 - braces and these brackets and all these
97:15 - things you can directly use CL SX and
97:18 - you can Define logical class names for
97:20 - reverse element CSS here we have class
97:22 - variance Authority it is for defining
97:25 - variants for your components like if you
97:27 - have a button which is primary the
97:29 - button danger button or info button
97:32 - Etc and television animate is just a
97:34 - plugin now we will see how to proceed we
97:36 - have already defined this path so now if
97:38 - you open
97:39 - tsconfig.json you can see we have
97:41 - defined our paths here so we can instead
97:44 - of relatively importing we can directly
97:47 - import using this so our Imports will
97:49 - not look ugly so now we will config our
97:51 - Telvin CSS here yeah so we will copy
97:54 - everything inside the Tailwind config so
97:56 - where it is here we will use this so
97:59 - control plus a control plus v so you can
98:02 - see container Center this all the things
98:04 - are defined for us already and these are
98:07 - the colors you can see the radius the
98:10 - Border radius and the primary color
98:12 - secondary color all the things
98:14 - cool and now here you can Define all the
98:17 - colors so if you want to change any
98:19 - color or theming in the future you can
98:21 - do that so inside the Styles slash
98:23 - Global CSS control plus a control plus v
98:26 - and these all the colors are being used
98:29 - here you can see variable primary
98:31 - foreground and these are the colors so
98:34 - we are good to go for now but as you can
98:36 - see we have defined a color which is
98:38 - primary color which is our blue color so
98:40 - we will use that color here what I am
98:42 - saying is if you control press Z here a
98:44 - few times this is the color this is the
98:46 - tutor color we have used so copy this
98:48 - color Control Plus shift plus Z now if
98:51 - you if we save this we need this color
98:53 - everywhere so for the here you can see
98:55 - how to customize theme according to you
98:57 - so here is our theming section and we
98:59 - will see how to use this so given the
99:01 - following this is primary and this is
99:03 - primary foreground okay so here
99:06 - background is good card primary so
99:09 - primary color is this this is the color
99:11 - we are going to use primary color and
99:13 - primary foreground is black so we will
99:15 - just use hashtag zero zero zero and it
99:18 - will work okay and we will see if it
99:20 - won't work we can change it anytime
99:22 - later so now we have defined all the
99:23 - things now we have to do one thing more
99:25 - we have to Define this helper this will
99:27 - combine the CLS X and the Telvin merge
99:30 - both days into one and we will use this
99:33 - so copy this into a source directory
99:36 - create a new folder called library
99:37 - inside the Library create a folder
99:40 - called what we can say it utils.ts
99:44 - okay and save this now it is good to go
99:46 - so in this Library we are using the
99:48 - Lucid icon Library so you can use any
99:51 - you want but we will use both and
99:54 - basically we have created our layout so
99:56 - probably we don't need anything for now
99:58 - so now in the components we have to
100:01 - create a new folder called UI in the UI
100:04 - we can now copy and paste a lot of
100:06 - components from here so first of all we
100:09 - need a dialog or we can say a model so
100:12 - that we can utilize our authentication
100:15 - for that so if you have previously used
100:17 - tutor so if you are not logged in then
100:19 - it won't allow us to view anything and
100:21 - it asks us to First authenticate
100:24 - ourselves so that's how we are going to
100:26 - make this application flow first a user
100:29 - have to authenticate themselves then
100:31 - they can proceed and now as we can see
100:34 - everything is good but for now let's
100:36 - Control Plus close the terminal and
100:39 - restart everything so it will work pnpm
100:42 - rundev now visit your application
100:44 - refresh this you can see the Telvin all
100:47 - the classes are gone why is that let's
100:49 - see maybe because if you delete the next
100:52 - folder here and that's that's the
100:54 - problem restart the server refresh the
100:56 - page sometime this hack works but okay
100:59 - so this is not working so something is
101:02 - not defined correctly okay so this is
101:04 - the problem we have a source directory
101:06 - so instead of directly saying you can
101:08 - say Source slash go into the app
101:10 - directory and find all the TS and TSX
101:12 - files find all the Telvin class names
101:13 - and use those for classes so instead of
101:16 - this we can directly say go into the
101:18 - source directory and find all the
101:20 - folders and do all the things save this
101:22 - thing now it should work yeah now you
101:24 - can see this is working but something is
101:27 - weird why is that because we have
101:28 - configured our Telvin CSS and the font
101:31 - is also looking a bit weird so first of
101:32 - all we will improve our color and our
101:35 - font yeah so this font is looking ugly
101:37 - so these are the colors this border
101:39 - radius phone families font sense okay so
101:42 - I don't want it I want okay Acer default
101:45 - default should be sense and it is good
101:47 - now it is the font is looking good the
101:49 - first thing we have fixed the text color
101:51 - should be so if we go into here we can
101:55 - say text should be white always now it
101:57 - is good text is white and this tweet
101:59 - button is not looking good so we have to
102:02 - make it look good so in the left sidebar
102:04 - where is our button here is over button
102:06 - okay so we are not giving okay so the
102:08 - primary color is not defined that's the
102:09 - problem so here instead of doing this
102:13 - here colors ring foreground primary yeah
102:16 - it should work so let's see the problem
102:18 - PG primary foreground yeah so the BG
102:22 - primary color is not working which is
102:24 - this color which is this variable the
102:26 - primary variable so we will find this
102:28 - variable where it is and we will fix
102:29 - this thing
102:34 - this variable doesn't need this RGB this
102:37 - variable needs hsl format so we can
102:40 - search RGB to hsl so we will 29 155 to
102:45 - 40 29 155 to 45 to 40 and that's good
102:50 - this is the hex and this is the hsl so I
102:53 - want a easy converter where it is color
102:55 - converter yeah this is good so I will
102:58 - copy this thing and now I will copy the
103:00 - hsl format
103:04 - I don't know but this is unless I don't
103:07 - like this this background also is not so
103:10 - we will we have to change this from
103:14 - yeah now it should work you can see this
103:17 - is working so the problem was we were
103:19 - using hsl format here to convert these
103:22 - variables into a hsl from it then we are
103:26 - using this that's why we have to Define
103:28 - this I don't like this approach I would
103:29 - go for directly the color approach the
103:31 - hex color that always works but for now
103:33 - we can skip the part because we have
103:36 - done all the things our background is
103:38 - working okay and the thing is if we go
103:42 - here the BG is black cool but why it is
103:45 - not showing any color here yeah it is
103:47 - showing it's showing now so if you
103:49 - remove this text white let's see so the
103:51 - text is not by default white so for that
103:55 - we have to again modify something into
103:57 - the colors input color all these things
104:00 - we have to modify border input ring okay
104:02 - so what we can do we can ask chair jbt
104:05 - to give us all the colors for Twitter
104:07 - because the chair gbt already knows the
104:09 - GitHub colors so I think it should work
104:12 - because it is too much hard work to
104:14 - Define every color and I don't want you
104:16 - to get into that for now so we can ask
104:18 - we can ask Jr GPT to use Twitter colors
104:23 - and modify this file this code
104:26 - accordingly so now it is given us the
104:29 - Twitter code you to use Twitter colors
104:31 - yeah it's good I have replaced hsl
104:34 - values with respective codes for Twitter
104:36 - node that use hsl don't include hsl nice
104:41 - so as you can see and it should work I
104:44 - think and let's see so now this is the
104:47 - color for Twitter and yeah so now
104:50 - everything is changed you can see but
104:52 - the text color is is Blue by default and
104:55 - we don't want a text color to be blue
104:57 - for that we can ask it to again modify
105:00 - this thing change the text color to
105:03 - white and the only color which needs to
105:07 - be Tweeter blue is button background and
105:12 - borders or accent colors okay the only
105:16 - color which needs to be Twitter blue is
105:17 - accent color
105:22 - okay so we have changed this thing body
105:25 - apply BG background text photograph text
105:28 - is for the ground let's copy this file
105:30 - again so it haven't given us the hsl
105:32 - values change it to hsl values without
105:36 - hsl keyword so this means it forgot now
105:39 - I think it will work yeah
105:42 - now let's see okay so it haven't changed
105:46 - but here we can do apply BG background
105:49 - and text should be white now it is good
105:51 - now you can see the border is good if we
105:53 - type the color is good yeah so you can
105:55 - also use the chair GPT like that
105:58 - otherwise if I had to do this all along
106:00 - like finding the colors and doing this
106:03 - this would take me like an hour or so so
106:06 - to save my time here I would go for this
106:08 - approach as you can see now everything
106:10 - is good to go we just have to do
106:12 - something here so now first thing first
106:14 - we need a dialog or we can say the model
106:17 - so for that we just have to do first of
106:19 - all we need to add a button or we can
106:21 - just add a dialog and I think it should
106:23 - add all the things related to dialogue
106:25 - so now we can copy and paste this
106:27 - command here and hit enter and it should
106:29 - add a dialog button where would you like
106:31 - to install the components so in the dot
106:34 - slash dots list SRC slash components
106:38 - slash UI so we will copy this thing
106:40 - maybe in the future if you want to
106:42 - install any other component then we will
106:43 - just paste this so now it will install
106:45 - the component in the dialog here you can
106:48 - see this component is here so basically
106:50 - it has copied and pasted all the things
106:52 - okay now we need to also install the
106:55 - button because the button thing we need
106:57 - always so here is the or button copy
107:00 - this now we have also button you can see
107:04 - all the variants of the button that's
107:06 - why we have installed this class
107:08 - variance Authority for our buttons now
107:11 - this is good to go now we need
107:13 - authentication for our application okay
107:15 - so for that we have to define something
107:17 - so first of all we'll find the
107:20 - documentation related to superbase
107:22 - authentication next year is 13. so this
107:25 - is our authentication first we have to
107:27 - install this libraries so we'll open a
107:29 - new terminal this this terminal is only
107:31 - for the UI part this is server this is
107:34 - for installing all the other
107:35 - dependencies so we can say pnpm install
107:38 - supervised auth helpers next yes we also
107:41 - have to install this all react not
107:43 - helper so we can use all the hooks that
107:46 - are provided next yes 13 is stable
107:48 - however the new app directory and server
107:50 - components are in beta check out our
107:53 - experimental guide yeah so we are using
107:55 - this app directory that's why we need to
107:58 - follow this documentation and you can
108:00 - find this link here I will paste this
108:02 - link in my readme authentication setup
108:05 - so you can follow along the video if you
108:08 - want and you can also follow this
108:09 - article to integrate authentication for
108:11 - your application so first of all we will
108:13 - copy this environment variable we will
108:15 - create a environment file dot EnV here
108:17 - dot ENB not for now first we will check
108:20 - if we are using dot EnV here no so we
108:24 - have to ignore dot EnV file here first
108:26 - dot EnV now we can define a dot
108:29 - env.local just like it so that it
108:33 - doesn't get dragged by our GitHub these
108:35 - are not secret next public means this
108:37 - keys can be public what can't be public
108:40 - are super best secret keys so we will
108:43 - see what are they in the future so yeah
108:46 - now it is good so your super based URL
108:48 - and your supervised NN key we will find
108:50 - this key by going to Super Bass project
108:52 - so superbass.com sign in in the ultimate
108:56 - clone and in the project settings in the
108:59 - API where is the let's see API yeah here
109:02 - is our project URL copy this next public
109:04 - this is our project URL and this is our
109:07 - NN public key see this is secret key and
109:10 - this key has ability to bypass row level
109:13 - security never share it publicly so
109:16 - don't share this key publicly anytime
109:18 - you can use this NN key always so now
109:21 - let's paste this thing here so now we of
109:24 - my energy now we have my Super Bass URL
109:28 - that's good to go okay so for the
109:30 - authentication allow new users to sign
109:32 - up you can enable this we can enable
109:34 - also custom SMTP settings that means we
109:37 - can use our own email provider
109:39 - credentials now here we will Define a
109:42 - configure middleware so we are using
109:44 - typescript you can toggle this thing
109:46 - here so we have to use a middleware that
109:48 - will be code every time we request a
109:50 - page and this page will contain the
109:52 - cookies and all the things that will be
109:54 - handled by this thing and it will
109:56 - provide us the supervisor that's how we
109:58 - we know who is accessing our application
110:01 - or we can say we can know the user
110:03 - details when the page is rendered so
110:06 - copy this thing typescript types can be
110:08 - generated with super based through your
110:09 - life so we will also generate all the
110:11 - types so for that we have to use this
110:13 - thing Super Bass start first of all we
110:15 - will do Super Bass init now you can see
110:18 - the Super Bass inside our application
110:20 - this is C dot SQL if you want to see any
110:22 - data for seeding your data you can also
110:24 - use share GPT to write some queries for
110:27 - you you can use chair GPT always use J
110:29 - GPT I would say to increase your
110:31 - productivity so now we will say Super
110:33 - Bass star I think it will start the low
110:36 - condition which we don't need for now I
110:38 - will just use this thing if it works or
110:40 - not let's see it will generate over
110:42 - types in the library and database
110:45 - type.ts okay you can use CLI to generate
110:48 - types but the point is I am not using so
110:51 - first of all we have to install the
110:52 - supervisor we still haven't installed
110:54 - the supervis if you go to package.json
110:57 - we have installed the oauth helpers but
110:59 - we haven't installed the supervised CS
111:01 - Library so pnpm is done super based yes
111:04 - this is how we create a client and now
111:06 - we can face the data so where should we
111:08 - generate the type so we I think we can
111:10 - generate the types in Super Bass slash
111:12 - database DOT type slash TS so it is
111:15 - asking us to install or to run the
111:18 - docker and then we have to run the super
111:20 - based local instance
111:22 - to generate the keys but what I want
111:24 - here I want the remote database to
111:27 - generate the tables for us so okay so
111:29 - what you can do here if you don't have
111:31 - Docker first install the docker for your
111:33 - machine so if you visit this you can
111:35 - download for your machine install this
111:37 - and make sure the token is running fine
111:40 - and now I will open the docker so that
111:42 - we can run supabets inside our local
111:44 - machine now if you visit the Super Bass
111:47 - dashboard we are using the remote
111:49 - version but for development we want a
111:51 - local version that's why because we need
111:54 - to generate the types and it is asking
111:56 - us to generate the types now it is good
111:58 - or we can ask it to I don't want you to
112:01 - get into the docker any stuff that's why
112:03 - I want the remote support so super bass
112:07 - generate types remote database okay so
112:10 - first login then we can use this command
112:12 - to generate the types cool so let's
112:14 - login npx superbase login
112:17 - so we have to generate the excess token
112:19 - here so I will generate a access token
112:21 - so paste this thing and generate a token
112:24 - local machine so I have this token I
112:26 - will not show you this token and you
112:28 - should keep this hidden because this is
112:31 - a secret okay now I can close this thing
112:34 - now we have generated our custom token
112:36 - now we can generate the types here so
112:38 - instead of using the project ID so we
112:41 - can now delete the supervisor so we
112:42 - don't need it okay what I'm saying is
112:44 - first I will write steps you need to
112:47 - follow before authentication
112:49 - authentication generate the types
112:52 - for your tables for the tables for the
112:55 - database we have created in the last
112:56 - video so for that npx super bass login
113:01 - and then you have to do is this command
113:03 - project ID and insert your project ID
113:06 - here I will insert mine so I will go to
113:08 - my super based dashboard this is my ID I
113:11 - will copy this and I will copy here in
113:15 - the public yeah I will hit enter type
113:17 - supervised let's create a file or you
113:20 - can say a folder types now it should
113:22 - work it is generating the types and it
113:25 - has generated the types you can see we
113:27 - have all the bookmarks we have hashtags
113:30 - we have likes you can see row insert
113:33 - update everything is here these four
113:35 - things likes profiles replies hashtag
113:38 - tweets okay and these are the views
113:41 - functions enums all the other things but
113:43 - these are our tables which are seven
113:45 - tables this is a profile the row is full
113:47 - name ID updated username okay so the
113:50 - username can't be null why it is saying
113:52 - this is this can be null okay I'm not
113:55 - sure about that maybe we have some
113:57 - mistake this is also row IDE reply ID
114:00 - can be null Twitter ID can be null yes
114:02 - this profiles in the profiles we have
114:05 - full name so the problem is when we
114:06 - first run the query it has created a row
114:09 - which has null and then we have run the
114:12 - another query then it doesn't override
114:14 - it again that's why the username can be
114:16 - helped but we don't want the username to
114:18 - be null so we'll modify our database so
114:20 - in the profiles the username can't win
114:22 - also I will say allow nullable so I will
114:25 - not allow this to be nullable and is
114:27 - unique yeah save this thing now we have
114:29 - updated our username table this is the
114:31 - much thing we have to do because we
114:33 - don't want any user to sign up without a
114:35 - username and if we now again generate
114:38 - the types by using the same command you
114:40 - will see that the username is now string
114:43 - and not null in the profiles here
114:46 - username is string no it can't be null
114:48 - so this is the important thing we have
114:50 - to do we have to remember so here you
114:52 - you have to use your project ID good I
114:55 - will clear everything now we are good to
114:57 - go so where we were we were creating
114:59 - this thing middleware.ts in the root of
115:01 - your project and populate with the
115:03 - following so this is a middleware which
115:05 - we are going to use so let's see how it
115:08 - is being used so this is a client common
115:10 - in the client's component we can always
115:12 - use the super based client and we can
115:14 - face the data like this this is simple
115:16 - but in the server components we have to
115:19 - use like this create server component
115:22 - super based client which comes from here
115:25 - and then we can paste the data like this
115:27 - and this all data will be faced on the
115:29 - server so you can follow this repo for
115:31 - the whole example okay so this is a
115:34 - middleware.ts which we need to create in
115:37 - the root of over directory so middleware
115:40 - to TS go up copy this thing database two
115:44 - types what we can do instead of here we
115:47 - can paste this thing here or what we can
115:49 - inside the Library supervised types two
115:52 - types now it works remove this folder
115:55 - these are our types cool so it is a
115:58 - middleware which will handle it is a
116:00 - database which is this it will create
116:02 - our supervised instance and it will
116:04 - provide us the authentication and it
116:06 - will provide us the session of the user
116:08 - close everything now in the app
116:10 - directory create a supervised provider
116:12 - which will provide the whole application
116:14 - and it will work like a context so
116:16 - Superbus provider.tsx copy everything
116:20 - and this is a client that's why we are
116:22 - using instead of super based root types
116:24 - yeah if we call it database to types it
116:26 - will be fine but yeah if we can call it
116:28 - super based client database we are
116:30 - defining the types this is a context
116:32 - super best provider we will provide the
116:35 - whole application
116:36 - or we can say we will wrap our
116:38 - application inside this provider and it
116:41 - will run the use effect hook which will
116:43 - check every time if we are authenticated
116:45 - or not and Export cons used to always
116:48 - supervised must be inside supervised
116:50 - provider and now we can use this use
116:52 - server base inside our application so we
116:55 - don't have to Define again and again and
116:57 - it will be only one instance of super
116:58 - best inside our whole application save
117:01 - this thing now we have to rape our whole
117:03 - application inside this super best
117:04 - provider here like this in the
117:06 - layout.tsx like this so inside the body
117:09 - we will say this is supervised provider
117:11 - import this from supervised provider
117:13 - save this thing and it will work now any
117:16 - of our client components base hook use
117:18 - super best hook to ensure they are using
117:20 - the same instance of super bus line or
117:22 - we can say they will not be creating
117:24 - more than one instance okay so now
117:26 - inside our client components we can use
117:28 - this inside our server components we can
117:30 - use this that's okay that's good so
117:32 - first of all we will try this thing
117:34 - inside our server component so so in our
117:38 - page this is a server component we can
117:40 - see now we'll import this create server
117:43 - components import the database and the
117:45 - headers and cookies do not cache this
117:47 - page where we get our headers and
117:50 - cookies okay let me see that we have to
117:52 - import this from next header okay now if
117:55 - we try to login now if you try to look
117:57 - this console.org super based out all the
118:00 - things auth dot user get user it will
118:03 - give us let's update for it let's make
118:05 - this function async and we will log in
118:08 - the user here we will see if the user is
118:09 - logged in or not save this thing and now
118:12 - you can see the data is user dot data
118:15 - dot user so instead of doing this we can
118:17 - see the data and the error and we can
118:20 - load both things now we have the user is
118:23 - null and error is missing subclaim or
118:26 - which means we are not authorized the
118:28 - status is four zero one now we will try
118:30 - to authenticate the user so what should
118:32 - we use which method should we use I will
118:35 - use the Google login because this is the
118:37 - easiest one to create so I will go to
118:39 - Google Docs so to create the Google
118:41 - authentication you have to follow these
118:43 - steps you have to get the oauth and now
118:45 - you have to do all the things here we
118:47 - can use a password method username
118:49 - password method but I'm not going to
118:51 - this add login code to your client
118:53 - application sign it with Google so only
118:55 - email providers is enabled for now okay
118:58 - so I think we can use the email if you
119:00 - want any other provider you can see
119:02 - their docs their docs are very user
119:05 - friendly very easy to follow we will use
119:07 - the magic Link login for now simple
119:10 - login the user will receive a login the
119:12 - sign in with OTP and that's all this
119:14 - simple thing we just have to provide the
119:16 - email and everything will work so let's
119:18 - copy this thing and that's all we need
119:20 - we have to enable magic link
119:21 - authenticator to your application so
119:23 - here in the email I think this is
119:26 - already enabled so what we will do first
119:28 - we will create a model or we can say a
119:30 - dialog we can create it here so we can
119:33 - see if the error dot status is equal
119:36 - equal to 4 1 which means the user is not
119:39 - authenticated then don't allow user to
119:41 - see the whole thing or we can say here
119:43 - if the error dot status is 401 what we
119:46 - need to do is we need to show the user
119:48 - the model so if this 401 means the user
119:51 - is not authorized or the user is not
119:53 - authenticated so now we will import the
119:55 - dialog here which we have created in the
119:58 - components so remember to import this
120:00 - from UI slash dialog so in the dialog we
120:03 - have dialog content like this and now
120:06 - here we can also use the input okay so
120:09 - we can say so to use input we can also
120:12 - use this thing input this will provide
120:14 - us a beautiful input field now if you go
120:16 - into the UI you can see the input this
120:19 - so import the input from components this
120:22 - is a client component and you will see
120:24 - YZ we have to Define this as a client
120:26 - component inside another component so
120:28 - first of all let's save this thing and
120:30 - see how it looks where is our
120:32 - application localhost 3000 you can see
120:35 - this is not visible now so we can can
120:37 - say if the error dot status is 401 we
120:40 - have to open this so is open default
120:42 - open we can say if the error dot status
120:45 - is 401 then open this thing refresh this
120:48 - now you can see we have this model and
120:50 - we can't see but we have got a few
120:52 - errors doesn't match expected server
120:54 - HTML to contain matching div the
120:56 - hydration error refresh this it will not
120:59 - work okay so what we need to do we have
121:01 - to cut this whole thing we have to
121:03 - create another component or the model we
121:05 - can say not a folder it is a file auth
121:08 - model dot TSX here what we can do rafce
121:11 - this is a client component and to use a
121:14 - client component we can say use client
121:16 - why we can't use this is a server
121:18 - component because at any point we have
121:20 - to write something we have to send some
121:22 - data to Source server so we have to
121:24 - interact to our UI and for interactivity
121:27 - we need to use client-side components
121:29 - and if you are not sure why I am using a
121:31 - used client here you can watch my next
121:33 - year's app directory tutorial which was
121:35 - a to-do list tutorial I have published a
121:38 - few days ago in which you will learn it
121:40 - to build a to-do list application and
121:42 - inside that application you will see why
121:45 - we are using here use client and you
121:47 - will understand for sure okay now you
121:50 - can follow along here I will copy this
121:52 - thing dialog is good close this here we
121:54 - will use a use State and these hooks can
121:57 - be only used in client component that's
121:59 - why is open files import the state here
122:03 - and we can say open is open and on open
122:06 - changes set is up so now we can control
122:09 - this model to open and not open import
122:13 - the input also this is good now what we
122:15 - can do here is open so we can direct
122:17 - face the detail here okay so what we can
122:20 - do here so this whole thing can be used
122:22 - inside our provider where we have used
122:25 - supervised provider which is a client
122:27 - component here here we are providing the
122:29 - whole thing here we can find the details
122:31 - okay so I think here we can do all the
122:34 - stuff instead of creating a new
122:35 - component by the way we can import the
122:37 - dialog from components copy the state
122:39 - import everything dialog and dialog
122:42 - content here import the dialog from
122:45 - components from components from
122:47 - components save this thing so now we
122:50 - have a dialog and we are rendering the
122:51 - children and it is open by default if it
122:55 - is if the user is not authenticated and
122:56 - we can do it by doing it here so you can
123:00 - say subscription dot not like that we
123:02 - can say superbase dot oauth dot Care
123:05 - Station dot then result if it is if
123:09 - result dot error dot status is equal to
123:12 - 401 then what we need to do is we need
123:14 - to open the model otherwise everything
123:16 - is good to go and otherwise we don't
123:18 - need to do anything so just save this
123:20 - thing and that's all we don't need this
123:22 - oath model anymore we have created all
123:24 - the logic we need for our authentication
123:27 - inside our supervised provider so now
123:29 - this is a good tool we can remove these
123:31 - components because these are they are
123:33 - not used here go here now you can see if
123:35 - we refresh this okay it is not working
123:37 - let's see let's see the result here
123:39 - first of all lock the result okay where
123:42 - is our localhost
123:44 - 3000 now you can see we got two things
123:47 - we got station and we got error okay so
123:49 - if the session is null which means we
123:51 - are not authenticated so what we can do
123:53 - if the rest dot data dot session is not
123:57 - true if this is not true or which means
124:00 - the user is not authenticated then open
124:02 - the model otherwise don't now you can
124:04 - see the model is open and we should not
124:06 - be able to close this okay now it is
124:08 - good to go this is what I look dialog
124:11 - overlay background at the busy
124:13 - background we can change all the things
124:15 - here if you want you can see dialogue
124:17 - trigger dialog content header footer
124:19 - title description cool so if we refresh
124:22 - this you can see we are not logged in
124:23 - and we are seeing that we need to do
124:25 - something here so here we can do all the
124:27 - magic first of all we will make this
124:29 - whole look like Twitter so BG black give
124:32 - some pairing to it cool now this is a
124:34 - form and we need input field for now so
124:37 - input we have already used that thing
124:39 - the type is text the placeholder is
124:42 - email and here we can say do or S3
124:45 - please sign in to continue give some
124:49 - classes to it text LG my 4 save this and
124:53 - let's see how it looks now it's it's
124:55 - look good mice my4 is bit much it's good
124:59 - now we need to make a button also button
125:02 - import the button from UI send login and
125:05 - we can include a short here short a
125:08 - paragraph here you will receive
125:10 - a login magic link here we can give it
125:14 - some classes text SM text is white or
125:18 - you can make it gray somewhat 200 that's
125:20 - good or we can also give it margin by
125:23 - two yeah and what I need is I'm right
125:27 - Auto the color is not looking good to me
125:30 - this is tutor color but this is not
125:32 - looking good to me so I will say BG BG
125:34 - white and text is Click I want it to be
125:38 - end so for that what we can do here is I
125:41 - can wrap this whole thing inside a
125:43 - division and I can make it Flex I can
125:45 - give it w full and I can say justify to
125:48 - the end so now the button will at the
125:49 - end text is text should be white when
125:52 - hover text should be white and when
125:54 - hover the Border should also be white
125:56 - okay so what you need to do is to make
125:59 - this application beautiful you have to
126:01 - give some time here you have to select
126:03 - all the colors without using chair GPT
126:06 - because we always want to make sure that
126:08 - our app looks good inside tell me in CSS
126:12 - television config in inside the
126:13 - styles.css where it is inside the
126:16 - globals.cs here you should carefully
126:18 - Define all the colors and that's how it
126:21 - will work nicely otherwise you can see
126:23 - it it is working out and you will face
126:25 - the problem like this so for that I will
126:28 - use the default colors provided by here
126:30 - theming for now I will use the default
126:32 - color in the future I can go for
126:34 - different color but for now I am going
126:36 - with default now you can see refresh
126:39 - this page it's good now I can remove
126:41 - this this button already looks good you
126:43 - can see this button already looks good
126:45 - and the border the hover properties
126:48 - everything seems perfect instead of text
126:50 - Gray I would go for 900 okay so and for
126:54 - our home page what we can do here so for
126:56 - our home page we can give it text right
126:58 - here so it will work good now our text
127:00 - is white instead of this tweet wherever
127:03 - we use the primary Dash primary like
127:06 - here BG primary so here we can use the
127:09 - Tweet color so go here so what we can do
127:12 - we can insert a new color to it Twitter
127:14 - color we can say it Twitter and we can
127:17 - use the Twitter color hex Twitter color
127:20 - hex code this code here now if you go to
127:23 - here instead of PG primary you can
127:26 - replace it with VG Twitter color and it
127:29 - will work it will work as default
127:31 - instead of compromising with the default
127:34 - UI classes modify all the yeah so now it
127:37 - should work so now if you visit our
127:39 - application you can see our tweet over
127:42 - everything is looking good if you
127:44 - refresh yeah this is good and now we
127:46 - have to login the user so for that first
127:49 - of all when the user owns submit it
127:51 - receives the event so we have to prevent
127:53 - the default to prevent the page to
127:55 - reload again and now we have to submit
127:57 - the user email so for that you can use a
128:00 - state again use State snippet email
128:03 - first of all it is empty set email to
128:06 - whenever this status changes so on
128:08 - change it receives event and set email
128:11 - we went to Target dot value okay okay so
128:15 - why this login button is looking blue
128:18 - because we have changed the button color
128:20 - also so if we go to here instead of this
128:23 - we have changed this thing also so we
128:25 - have to use the primary yeah also now it
128:27 - is good save this let's go into here if
128:30 - we hit the login button it will work
128:32 - this function will run and it will call
128:33 - the supervis function which is superbase
128:35 - dot auth dot login okay so we have to
128:39 - find the documentation where it is login
128:41 - with magic link sign in with OTP sign in
128:44 - with OTP so here we can provide the
128:46 - email and we can say email dot trim and
128:49 - we can also check if the email is
128:51 - correct or not for that we can choose
128:54 - the email field here type email and it
128:56 - will by default check it if the email is
128:59 - correct or not then it we will trim and
129:01 - we will send this and options are should
129:04 - create user data and we also need a
129:06 - username so that we will Define another
129:08 - field which is text placeholder username
129:11 - and we will use another state use State
129:13 - as username this it is by default empty
129:17 - set username and we can say minimum
129:20 - minimum length or we can say the minimum
129:22 - should be it should be three characters
129:25 - long now if you parse the username in
129:27 - the future we will also check if the
129:30 - username is exist or not first check if
129:33 - the username exists or not okay so we
129:37 - also need to show some toast to users
129:39 - for that we will install the new library
129:41 - called sonar it's a great Library you
129:44 - can visit the sonar npm you can see this
129:47 - Library rendered Host this is a
129:49 - beautiful toast and this is the same
129:50 - toast I am using for my website Club of
129:53 - folders if you search Club of folders so
129:55 - I am using this for my website and I can
129:58 - recommend it it's a great an awesome
129:59 - library to render the toss so we have
130:02 - installed this first of all if we go to
130:05 - app in the layout here we can Define the
130:08 - toaster in the Super Bass provider I
130:10 - think here we can Define the toaster
130:11 - also from sonar import this from sonar
130:15 - we only need one toaster and now we can
130:17 - use toast dot like this toast dot
130:21 - success like this error like this
130:23 - username already exist please use
130:27 - another one we have to check this so
130:29 - forth checking we can find we can say
130:31 - Super Bass await super based out from
130:34 - profiles Dot and make this function as a
130:38 - async function dot we can fetch we can
130:41 - select we can do everything select dot
130:44 - now we can say select where the username
130:47 - is let's find the supervised docs so we
130:49 - don't miss anything so in the fetching
130:52 - data we can select the data and here are
130:55 - the filters we can use like this select
130:57 - select dot now we can say is equal to it
131:01 - except two things column is username
131:03 - which is also a string and the value is
131:05 - which we have used username dot let's
131:08 - stream it if the user has typed in any
131:10 - white space we can find it it provides
131:13 - us data and error if data exists and
131:16 - let's consult or load the data first of
131:18 - all and we can say username already
131:21 - exists please use another and we can
131:23 - return it from that's how we are
131:24 - checking if the username is already
131:26 - exist or not and we are sending sign in
131:29 - with OTP now we are good to go we can
131:31 - avoid this also we can avoid this and
131:33 - when everything is successful we can
131:35 - close this model or let's don't do
131:37 - anything and let's see for now what is
131:40 - happening so go here in the OR
131:42 - application refresh everything so we are
131:44 - making sure that everything is good
131:46 - extra attributes from server CZ shortcut
131:49 - listen okay I will use my email which is
131:53 - Club of Horrors
131:55 - gmail.com
131:58 - gmail.com and I will type my username
132:00 - also Club of coders and let's click on
132:03 - the login we should also show some
132:05 - loading state for that we can use
132:07 - another state here use State you can see
132:09 - how many steps we have to use here
132:11 - button or we can say yeah we can say
132:14 - it's loading initially it is false set
132:17 - loading is true and here set loading is
132:20 - false and when it is loading show the
132:23 - make the button is disabled simple
132:25 - disabled save this thing now if we type
132:28 - Club of quarters.com
132:30 - [Music]
132:31 - gmail.com I will type my username also
132:34 - you can see we have to give some space
132:36 - here let's click on the login username
132:38 - already list please use another so in
132:41 - the data you can see we have selected
132:43 - and we have got nothing we got nothing
132:44 - so the array is empty so if we can see
132:47 - the data I thought length is equal to 0
132:50 - or we can say is greater than 0 then
132:52 - show this otherwise don't data and end
132:55 - data dot length is greater than 0 then
132:57 - show this and return from there
132:59 - otherwise log in the user with email now
133:02 - here we can remove everything let's also
133:04 - give some space to this input last name
133:06 - m y 2 now you can see it's good clap of
133:09 - folders Dot
133:12 - gmail.com Club of quarters hit enter now
133:15 - you can see it is sending us an OTP so
133:18 - now it first find that if the username
133:20 - is exist and it found that username
133:22 - doesn't exist now it has sent the
133:25 - request with the data of username and
133:28 - this user now the user should be in our
133:30 - database so if you go to what tables and
133:33 - this authentication and this sign in
133:36 - with OTP also should create a trigger to
133:39 - create a username which we have passed
133:41 - easy data so we should see a username
133:43 - inside our profiles let's see yeah so
133:45 - you can see we have a club of folders
133:48 - username inside our profile and now we
133:50 - are signed in inside our application
133:52 - okay so if you hit a button again you
133:54 - will receive that username already exist
133:56 - and it will find this full name and this
133:58 - user okay that's how it works and we are
134:01 - now signed in to our application and you
134:03 - can see this is the current user this is
134:05 - a user which we have faced now you can
134:07 - remove this we can remove this we are
134:10 - successfully created this sign
134:12 - functionality
134:13 - close this thing close everything we
134:15 - should be able to see the data here okay
134:17 - so it will not sign us up because we
134:19 - have to verify as so I should have
134:21 - received a magic link for signing you
134:24 - can say confirm your sign up so if I
134:26 - click this link here now I am signing
134:29 - yeah so now I have signed up for the
134:32 - application and you can see the data
134:33 - here ID is this role is this my email is
134:37 - this and everything is here okay so now
134:40 - I am signed in and I didn't see anything
134:43 - so we can remove this we can also remove
134:45 - this basically we don't need anything
134:46 - because we are handling all the what we
134:49 - say the authentication logic inside our
134:51 - supervised provider here we have created
134:54 - a dialog we have created a form and we
134:56 - are using this authentication here so
134:58 - now we are signed in and we are good to
135:01 - go to build the functionalities the
135:03 - Tweet functionality is the live
135:04 - functionality is the bookmark
135:05 - functionalities so first of all what we
135:07 - need to do is we need to enable row
135:09 - level security policies for all the
135:11 - tables currently over all the tables are
135:14 - public which means anybody can access
135:17 - over data and modify it and can fetch it
135:19 - so we don't want that so we will go to
135:22 - the Super page dashboard home and go to
135:25 - the database part and in the
135:28 - tables and here I think we have policies
135:32 - so table editor go here
135:36 - hashtags you can see all the tables
135:39 - and the table save row level
135:41 - you are allowing Anonymous access to
135:44 - your table so we have to enable all row
135:46 - level Securities so to do that go to
135:48 - authentication and in the policies
135:52 - clear the search box and you will find
135:54 - all the tables here and enable the
135:56 - policies for all the tables
135:58 - so you can enable the policies
136:03 - you can also enable all the policies by
136:06 - running a SQL query but we are doing it
136:09 - manually because we don't have many
136:11 - tables and we can do this manually it is
136:13 - easy
136:17 - we have enabled the row level security
136:19 - policies which means nobody can access
136:21 - our tables now but if we try to access
136:24 - from our database URL or database
136:27 - connection string the database
136:29 - connection issuing have previous to
136:31 - access all the tables and all the data
136:33 - so that's why we are going to use server
136:36 - components and inside server components
136:38 - we will face the data so that we don't
136:40 - have to compromise our security over row
136:42 - level security policies and everything
136:44 - we are going to do is in the server side
136:47 - okay so you will see what I'm saying so
136:50 - first of all this is our project and I
136:52 - will start this project by running so we
136:55 - are using here pnpm and we will say pnpm
136:59 - brand Dev and we will
137:01 - take a demo first what we have built
137:04 - till now so
137:05 - we have env.local and everything is
137:08 - looking good now so this is our app
137:10 - directory because we are using the
137:11 - latest nexgs features that's why
137:15 - so let's go to localhost 3000 and we
137:18 - will see what is
137:19 - how it is looking you can see the this
137:22 - is not looking good because I have
137:23 - enabled the June so let me
137:26 - yeah so 150 percent it's good
137:30 - looking good so currently we are signed
137:32 - in or not how get it so if you click on
137:35 - the profile
137:37 - the page doesn't exist if you click on
137:39 - tweet nothing exists for now
137:42 - the training part the home to fall apart
137:44 - so what we have to do now we have to
137:46 - check if we are authenticated or not we
137:49 - will make this responsive in the later
137:50 - videos so if you go to super best
137:52 - provider so here we are providing
137:54 - everything okay and if you try to tweet
137:57 - something hello world we try to tweet it
137:59 - doesn't work so we are getting the
138:01 - profiles and we are saying that it
138:03 - doesn't exist yeah so this is our
138:04 - provider this is dialog set is open yes
138:07 - so we are logged in basically so to
138:09 - check if we are logged in on console.log
138:12 - we will lock the current supervis user
138:15 - so here we will consider.log the
138:17 - superbase dot auth dot user dot get user
138:21 - and that's all let's lock this thing
138:22 - okay so it is let's see we want the
138:24 - current user who is logged in so there
138:26 - are a lot of things get user gets
138:28 - session let's see the get session thing
138:29 - okay this is also returning the promise
138:31 - so what we can do we can look here we'll
138:34 - check the result here it will refresh
138:36 - and here we are so you can see we are
138:37 - logged in this is our user this is my
138:40 - email and everything is looking good but
138:42 - for for the authentication I think we
138:44 - can use something called server context
138:46 - or server station to see if you are
138:48 - logged in or not so now we will
138:50 - implement the Tweet functionality if I
138:52 - tweet something here or let's say I copy
138:55 - some paragraphs so this is the rate cost
138:57 - extension you can also install this it
138:59 - is pretty handy you can install this
139:02 - it's great you can directly go below MF
139:04 - Sim you can also do the confetti thing
139:06 - it is pretty good you can see so yeah
139:09 - you can install this so this is our text
139:11 - and if you try to tweet it doesn't work
139:13 - now so we will implement this
139:14 - functionality so in the main component
139:16 - is our home this is our input text and
139:19 - this is our tweet button so tweet
139:21 - composer we will create another
139:22 - component so recently when I have
139:25 - created or when I have started building
139:28 - this script clone next year's release a
139:30 - few more features like nature server
139:32 - actions so we can utilize these server
139:35 - actions to mutate the data inside our
139:37 - database so that we don't have to do all
139:40 - the API stuff so let me show you what is
139:42 - next year server directions you can see
139:44 - this is how we will create a form and we
139:46 - will decorate this as a server code and
139:49 - we can directly you can see save to DB
139:51 - and this is our running mode server this
139:53 - is not running on client this is running
139:55 - on server so this is very easy to do and
139:58 - we will do this now so first of all what
140:00 - we will do inside the components let's
140:02 - close it in the source directory in the
140:04 - components these are the components
140:06 - these are server components by default
140:08 - so we will create another component so I
140:10 - think we can create a folder called
140:12 - server components so that we can
140:14 - differentiate what is server component
140:16 - and what is nodes we can also do it like
140:19 - this this is nothing bad in naming like
140:21 - this and we can say compose to it and
140:24 - this is a server component okay and what
140:27 - we will do rafce compose tweet okay so
140:30 - we renamed wrong compose tweet so this
140:34 - is our composed tweet and what we will
140:36 - do we will just use the latest next year
140:40 - server directions so as you can see we
140:42 - can face the data like that and we are
140:44 - doing that in the supervised provider
140:46 - here you can see this is a client
140:48 - component you can see this is a client
140:50 - component so okay so we are not fetching
140:52 - any data is for now so we will use this
140:54 - technique to fetch our data directly you
140:57 - can see you can directly face the data
140:59 - we can case the data using the kit
141:01 - static props and we will see how to do
141:03 - that also so this is this will speed up
141:06 - our page reload and then we can also
141:09 - revalidate the data like this when we
141:11 - are using the kit static props and this
141:14 - is how we can mutate the data directly
141:16 - using the server components so now let's
141:18 - do this so this is our function and we
141:21 - will use this thing so copy this thing
141:23 - so this is a function which will we will
141:26 - say compose compose to it like this or
141:29 - submit to it you can do is submit
141:31 - details or save to it in rooted DB
141:34 - whatever you want to name it save submit
141:36 - to it this will take a tweet text tweet
141:39 - and it is a string simple and it is a
141:41 - used server you think you can see you
141:43 - this is a use server but I think we have
141:45 - to update our Nexus version because we
141:48 - are I haven't updated anything after I
141:51 - left building this uh in the like past
141:54 - two months so this is the version we are
141:57 - using 13.3 and what is the latest
141:59 - version of lectures next shares let's go
142:02 - okay so we I think we have to go to the
142:04 - GitHub so the latest version is
142:07 - 13.4.7 so I think we can update it close
142:10 - the server first
142:12 - pnpm update next it will update over
142:15 - let's see okay already up to date I
142:17 - think what we can do this is remove this
142:19 - thing and we can install this again so
142:21 - it will update find the next note here
142:23 - okay so it is uninstall we have to do it
142:25 - again because I have saved this thing
142:27 - yeah now you can see in next year's
142:30 - 13.4.7 so if you are watching this
142:33 - tutorial please update this thing
142:34 - otherwise the server actions may not
142:36 - work I don't know so you can see we have
142:39 - removed the 13.3 version and we are
142:41 - updated in HS 13.4.7 clear everything
142:45 - pnpm run there again it may create some
142:48 - problems let's see if this is working or
142:49 - not okay so it is working so inside the
142:51 - compost Suite now we can use this theme
142:53 - so let's comment it out first so this is
142:55 - our server thing and we can get the data
142:58 - like this we will see how to work with
143:00 - that thing so first save this thing
143:01 - let's see if your application is still
143:04 - working or something is broken with the
143:06 - updated version yeah so it's working
143:08 - it's working fine you can see so now we
143:10 - will integrate our server action
143:12 - action and that Aid item and then okay
143:15 - so we have to enable the server actions
143:17 - from our next config so this is also you
143:20 - should remember so go to the next config
143:22 - and we have to enable the server actions
143:25 - like that inside the component that uses
143:27 - server components and in the separate
143:29 - files code I just want to know how how
143:31 - we are getting the data so this is the
143:33 - data and we are doing Aid item and it is
143:36 - getting the data from cookies but we
143:38 - want to know and action is similar to
143:40 - HTML primitive action okay so it is same
143:43 - as HTML action okay so I think we we are
143:47 - we can get the data from the form action
143:50 - that's custom invocation using start
143:53 - transition you can also invoke server
143:55 - actions without using action or form
143:57 - action you can achieve this by using
144:00 - start transition provided by use
144:01 - transition hook which can be useful if
144:03 - you want to do server actions outside of
144:06 - the form button or inputs okay so we can
144:09 - actually use server actions without
144:11 - using a form component this is what this
144:13 - means cool like this this is a like
144:15 - button so when we will Implement our
144:17 - like functionality or bookmark
144:19 - functionality we will use this thing and
144:21 - you can see this we this is saying that
144:24 - use Virtual KV which is a new feature or
144:26 - we can say the new integration inversal
144:28 - which is a KB or we can say the radius
144:31 - database inside under the hood it is
144:32 - using something called upstage This is a
144:35 - serverless data for already so you can
144:37 - have a look at it if you want
144:39 - if this is how this is working this is a
144:41 - client component this is what we were
144:43 - doing when we were handling things in
144:45 - react basic simple react but now time
144:47 - has changed and we will do things
144:49 - differently so first let's see how we
144:51 - are getting the data so this is how we
144:53 - are getting the data phone data just
144:55 - like it and we will see how it is
144:57 - working so this is our phone data and we
144:58 - will console.locis and it will
145:01 - console.log in our server here not in
145:04 - the client in the browser this will load
145:06 - the data inside here in the terminal so
145:08 - first let's copy everything from our
145:12 - main component which is this okay so
145:14 - this is our main component and
145:17 - let's cut this thing paste it here and
145:20 - we can say this is a form we can remove
145:22 - this thing save this now here we can say
145:26 - action and here we can Define submit to
145:28 - it it is saying that yeah let's see how
145:31 - this works action and this is again form
145:33 - data and format data good why it is
145:35 - complaining so import the compose like
145:39 - this it will okay so I think we have to
145:41 - do something with our responsiveness
145:44 - this is looking ugly okay so what we
145:45 - will do we will hide it when this is
145:47 - smaller so in the sidebar right sidebar
145:50 - I think we can hide both of the sidebar
145:52 - when this screen is smaller so here we
145:54 - what we can do here we can use hidden
145:57 - and only be visible when the screen is
145:59 - clearer than large screen we can do the
146:02 - same for right sidebar here we can say
146:04 - this is hidden by default and only be
146:06 - shown after the screen is larger this is
146:10 - how so now if you refresh this you can
146:11 - see this is hidden so what we can do we
146:13 - can do after Excel so if this screen
146:16 - size is extra large hide both of those
146:18 - things now it's good but you can see
146:20 - this is also breaking this thing and
146:22 - this is overflowing from the content so
146:25 - which is where so we have to fix some
146:26 - styling in our own so if you go to the
146:29 - main component okay so let's comment
146:32 - this out this is all things let's remove
146:35 - this thing and yeah now it is taking the
146:37 - full width we can also do only after the
146:40 - Excel the width is 50 otherwise the
146:43 - width is like this so now it is good you
146:46 - can see it is looking good but still
146:48 - when the skin is too small this is
146:49 - overflowing so we need to fix this thing
146:52 - this tweet list so for the inside the
146:55 - here so let's keep it with full we are
146:57 - giving it border that's good overflow
147:00 - hidden so now the Overflow is hidden but
147:02 - we don't want the Overflow to read and
147:04 - we want this to be contained inside the
147:07 - flow so why we are facing this problem
147:09 - let's see okay this is same problem
147:12 - after so we have to remove the whole
147:13 - thing we don't want our photo to be
147:15 - hidden we want it to be contained inside
147:17 - this so it is not content it may because
147:20 - we are giving some fixed width to
147:22 - something okay so this is width height
147:24 - and 10 this looks good to me but let's
147:27 - wait for some fix it yeah it's still
147:29 - broken so you want to make make the
147:31 - height or the font is smaller so for
147:33 - that we can say after the Excel the
147:36 - fonts I don't know what is causing the
147:38 - problem so I will comment it out and I
147:39 - will see it is the image which is
147:41 - causing the problem this thing so if you
147:43 - comment it out not this image where it
147:45 - varies over full image yeah this thing
147:47 - so we are giving it height of 80 and we
147:50 - don't we are not giving it with full so
147:52 - this is this is the thing which is
147:54 - causing the problem so if we comment it
147:56 - out no it is still causing the problem
147:58 - we want it to be contained okay so this
148:01 - is not the problem I am showing you how
148:03 - I am fixing this problem so you will
148:05 - also get the intuition behind everything
148:07 - power commenting this out moderate 500
148:11 - border 2 so this is our container and it
148:14 - is yeah it is good but this is not
148:16 - containing this inside this is bad the
148:18 - resource URL was preloaded using link
148:20 - preload but not used within a few
148:22 - seconds from the windows okay so we will
148:24 - fix this error also extra tribute server
148:27 - so let's focus on building the feature
148:30 - now we will see how to fix this scene
148:32 - later or I believe we can fix this by
148:34 - making it grid sometime that helps
148:37 - create
148:38 - otherwise if you don't give it anything
148:41 - what will happen because something is
148:42 - broken now and that's the reason it is
148:44 - broken the reason this thing is broken
148:47 - is this we are defining a maximum width
148:50 - and we are trying to squeeze this and it
148:52 - is taking the that width so that's the
148:54 - reason of this is not working so you can
148:56 - see this is getting out of hand so here
148:59 - if we remove this you can see now it is
149:02 - contained inside this that is good part
149:03 - so here what we can do only give this
149:06 - Max width when this is greater than XL
149:08 - otherwise with full is good so if we try
149:11 - to increase this you can see now it is
149:13 - responsive if we squeeze it yeah you can
149:15 - see this is responsive and looking good
149:17 - cool now we can work on this thing so if
149:20 - we try to yeah it's good so if we try to
149:23 - submit something hello world and we
149:25 - should be able to see something here
149:27 - form data so for that we need to define
149:29 - something old submit or I think action
149:31 - which is submit tweet and this is taking
149:34 - the form data yeah so this is a text and
149:37 - the form meta we don't know what is this
149:39 - we will see if we do it something let's
149:41 - see the okay so we are not getting
149:42 - anything so let's see the documentation
149:44 - how it works okay so we haven't given
149:46 - this button the submit type is submit
149:49 - and this is inside the form you can see
149:50 - so now if you try to submit this there
149:52 - is still nothing type is text action on
149:55 - data okay so this is a client component
149:58 - here we need server comp why it is
150:00 - complaining it is saying it is not a
150:02 - sync okay any let's go for NES for now
150:05 - so this action text action.js use server
150:08 - so the problem we are facing was if you
150:11 - remove this this will complain and type
150:13 - this script is not happy so to avoid
150:16 - that you can use as any this is a just
150:19 - temporary fix I hope next yes will face
150:22 - this issue as soon as they can but now
150:25 - because this server or we can say this
150:28 - function or this functionality is still
150:30 - in Alpha phase which you can read over
150:32 - here you can go to block you can read
150:36 - that this server actions is is still in
150:39 - Alpha phase so you can see this is good
150:42 - but we have to careful to use this in
150:44 - production this tutorial is just for
150:47 - beginners or we can say for learning
150:50 - purpose so we can use this thing but do
150:52 - not use this thing in production because
150:54 - this thing is still node in production
150:56 - phase so let's just build our
150:58 - application by using this temporary fix
151:01 - so we can say temporary fix okay so now
151:04 - if you go to your application which is
151:07 - our application and Hello World server
151:11 - actions like that and if you hit to it
151:14 - you can see we are getting our data over
151:17 - here I have changed I have also put the
151:20 - name attribute over here and the type
151:22 - attribute over here so now it is working
151:24 - you can see Hello World server actions
151:26 - and we are getting more data inside our
151:28 - server and we can directly mutate our
151:30 - database from here so what we can do
151:32 - yeah you you can get the Tweet over here
151:34 - just like that if you see in the console
151:38 - we have a name and we have a value so we
151:42 - can say form data dot get tweet so it
151:45 - will give us the value of the Tweet so
151:46 - you can also confirm it by console.log
151:49 - tweet save this thing and if you click
151:51 - on tweet you can see we are getting the
151:53 - Tweet value now you can verify this or
151:56 - you can check if this value is truthy or
151:59 - you can say this value is good to put in
152:02 - our database if you can check if not to
152:05 - it then simply return and if this state
152:07 - is accessed we can directly insert this
152:10 - into our super best table so we can say
152:12 - const data and cost error we can say
152:16 - supervis import the Suba best client but
152:19 - here we need our server swabish client
152:22 - so for that where we can get our super
152:24 - best server client so inside the app
152:27 - directory layout this or supervised
152:30 - provider let's see if we have any Super
152:32 - Bass server client so first I think we
152:35 - need to create a server client so using
152:37 - superbase with Nexus app now
152:41 - so this is the what we can say this is
152:44 - the blog article which we have followed
152:46 - to build our super base authentication
152:49 - you can see we have also created a
152:50 - middlewares called something this is a
152:53 - create middleware supervised client and
152:55 - yeah so this is how we are creating the
152:57 - super based client we are using
153:00 - typescript over here this is
153:01 - authentication and this is what we were
153:04 - doing previously yeah so this is they
153:06 - have given the example of a server
153:08 - action here you can see directly without
153:11 - using anything like client component
153:13 - create server action client and we will
153:15 - pass the cookies and now we will have
153:17 - our client everything is looking good so
153:19 - this is how we can create our server
153:21 - action client so we will create our
153:23 - server client import this first import
153:25 - from supervis import the database okay
153:28 - so it is being imported from auth helper
153:32 - Nexus create server super best client
153:35 - this is what we need create server swaps
153:37 - clients and import the cookies from here
153:40 - I think we don't need testing and it
153:42 - will ask us through something okay so
153:44 - create server supervised client how
153:46 - about this so I think they have also
153:48 - changed their documentation and this is
153:50 - not exported from auth helpers Nexus a
153:53 - lot of things have changed rear server
153:55 - action client what are the X create
153:57 - browser create middleware create route
154:00 - Handler create server component super
154:02 - best client so this is what we need
154:04 - create server component supervised
154:06 - client and inside this we can pass our
154:07 - cookies from like this what else it
154:10 - needs it needs headers also import the
154:12 - headers from there so now it is working
154:14 - so super based Dot from so that table we
154:17 - have named is we can also yeah so you
154:20 - can see all our tables because we are
154:22 - using this database types here so we
154:24 - have bookmarks tabled hashtags likes
154:26 - profiles tweets so inside the tweets we
154:28 - need to insert a rogue so tweets dot
154:32 - insert and here we can specify our
154:34 - values just like that and it is you can
154:36 - see this is auto completion is given to
154:38 - us by typescript and it is pretty good
154:40 - so profile ID
154:41 - so here we will give the profile ID
154:43 - which we will get from superbase dot
154:46 - oauth dot so first thing we need to get
154:48 - the user so here we will get the user
154:49 - const so await Super Bass dot auth dot
154:54 - get session or get user I think so it
154:56 - will return as the user which has data
154:58 - and errors in the user data we can say
155:00 - this is the user data it is user error
155:04 - if the user error exists return
155:07 - and if the user data exists then log
155:10 - this thing so we will log this and we
155:12 - will see how it is working first we will
155:14 - go here we will do it and you can see we
155:16 - are getting the user data so this is the
155:18 - user ID we are getting and everything is
155:20 - looking good so first of all we will go
155:22 - to the authentication in the profiles we
155:25 - will see if we have the same ID inside
155:27 - our profile ID as well so you can see
155:29 - this is the ID we have copy this and
155:32 - this is the same ID yeah this is the
155:33 - same ID which we need here okay so we
155:36 - will insert this into our tweet so if
155:39 - you go to the twists tables here we have
155:41 - mapped this profile ID to user ID if you
155:46 - edit the column you can see this is
155:47 - mapped to the profile ID and which is
155:50 - the same ID which is here we are getting
155:52 - so now we can see await super based Dot
155:55 - from
155:56 - and we can say tweets dot insert okay I
155:59 - want to disable this co-pilot extension
156:02 - I don't like this I will disable this
156:04 - thing insert and now we can insert over
156:06 - things here ID will be created
156:09 - automatically so profile ID is user data
156:12 - dot user dot ID like that other thing we
156:15 - need is text so the text is tweet next
156:18 - thing we need is ID okay so it is saying
156:20 - that we need ID so we can generate a ID
156:22 - not a big thing so this is a uuid and we
156:25 - can generate it by uuid from the crypto
156:28 - and it is saying that form data entry
156:30 - value is not assignable to type Stream
156:32 - So to each dot you can convert this to a
156:35 - string and now it will it is looking
156:37 - good so this is how we are directly
156:39 - mutating our data without compromising
156:41 - our security inside server components
156:43 - using the server actions and it is
156:45 - pretty simple you can see we can do one
156:47 - thing here we can directly pass the ID
156:50 - the user ID from the form but that is
156:52 - another approach but this is far more
156:54 - secure because we know that user is
156:57 - logged in or not and this is pretty
156:59 - sweet save this thing and then we need
157:02 - to reload the page we will refetge all
157:04 - our tweets so if you go to the main
157:06 - components here we are getting the
157:08 - tweets so this is also a server
157:10 - component so what we will do we will
157:12 - create a const get tweets this is a
157:16 - server components and we will fetch all
157:18 - the tools from our supervised client
157:21 - so the same thing I think we can export
157:23 - this from a utils folder something like
157:26 - that the whole thing we can export it
157:28 - here import cookies and import the
157:30 - headers as well and Super Bass server
157:33 - client just like that save this thing we
157:35 - will see if this is working or not
157:37 - remove this Ctrl D import this from
157:40 - utils let's check this thing is working
157:42 - or not okay so you can see this is not
157:45 - working because we are also importing
157:47 - this TW merge here so instead what I
157:50 - will do I will create a new library
157:52 - called Super Bass here superbase.ts I
157:55 - will import everything inside this
157:57 - because it may it is conflicting with
157:59 - the client package which is this
158:01 - television merge and the CL X CLX
158:04 - package so now it is node conflicting
158:07 - and here we can import this again from
158:09 - our supervised server client and now it
158:12 - will not conflict yeah you can see Hello
158:14 - World this is a new tweet we will tweet
158:18 - this so it is saying error something
158:19 - went wrong okay avoid when wrong because
158:22 - of this extraction viewed it but I want
158:26 - to use it everywhere but we can't use
158:28 - this because the cookies and headers are
158:31 - different I don't know let's yeah this
158:34 - is the same error which we are getting I
158:35 - think we can't do this why we can't do
158:37 - this let's see yeah so we have to
158:39 - initialize this again and again for
158:41 - every component this is not good I want
158:43 - to use the Super Bass server everywhere
158:47 - without getting worried so I think we
158:49 - can create a client hook also and we can
158:51 - use this remove this and Super Bass
158:54 - client import this thing we are using
158:56 - the database and here it will need
158:58 - supervised client new superbased client
159:01 - it will need the supervised URL which is
159:04 - EnV import can say the process.env dot
159:07 - it needs first argument is supervised
159:10 - URL so you can say Super Bass URL and
159:14 - the second one is process.enb dot the
159:16 - subabase key here we will use the secret
159:18 - key supervis secret key which is a key
159:22 - that is previous access to all the rows
159:24 - and it can bypass the security of row
159:27 - level security SVA so it is a like admin
159:29 - key or something so it is saying that it
159:32 - can be undefined so we can say as a
159:34 - string we can fix this this is a
159:36 - temporary fix this is not a good idea I
159:38 - will tell you how to improve your
159:40 - managing your environment variables just
159:43 - like we do in the T3 stick so now we can
159:45 - remove these things we will try this
159:47 - thing first so I will now go to EnV here
159:51 - we have next public supervised URL this
159:54 - is the same thing which we will use here
159:56 - and this is the next public enem key so
159:59 - this is the public key and it doesn't
160:00 - have any access so we want the secret
160:02 - key which is a server key super based
160:05 - secret key and I will go now to Super
160:08 - based dashboard and I will copy that key
160:10 - here so in the API so this is service
160:13 - rows this is what I am talking about and
160:15 - I will reveal this I will copy this and
160:17 - I am hiding this because this is a
160:19 - secret key and you should also keep this
160:23 - secure so now we have super best secret
160:25 - key and we have Superbass public key and
160:27 - we will use this client here so instead
160:29 - of using this yeah let's see if now this
160:31 - will work or not refresh the whole thing
160:33 - try this we are just trying and we will
160:36 - see if it is working or not super best
160:38 - key is required okay so we have the
160:41 - supervised key here let's lock this
160:43 - thing out so we can see what is
160:44 - happening here
160:45 - process.env.next I think separating it
160:48 - out it doesn't work yeah okay so let's
160:51 - remove this thing we have to use it
160:52 - again and again we have to create this
160:54 - again and again so Ctrl Z Now this is is
160:56 - good so we have to use this we have to
160:59 - use this Constable base we have to
161:01 - create this again anyway we can't use
161:02 - this only once so we have tried it and
161:04 - we have tested and it is not working
161:07 - like that so as you can see here we have
161:09 - our main timeline and as of now we are
161:12 - not showing anything but we are we can
161:14 - submit now any tweet we can create it we
161:17 - can tweet basically so this is a tweet
161:21 - and if you hit enter it is being
161:24 - done you can see okay so yeah so now we
161:27 - have some tweets inside our database so
161:29 - if we go to our dashboard in the Twitter
161:32 - in the tables in the tweets here we can
161:35 - see all the tweets okay so there is no
161:37 - Tweed because if you go to the main
161:39 - component in the main component we have
161:41 - a main form a composed with here we are
161:44 - submitting the Tweet just like that it
161:46 - is saying that oauth user yeah Miss so
161:49 - let's see if it is working or not so as
161:51 - of for now you can see this is not
161:53 - working we will see what is happening
161:55 - here const it gives us data in error
161:58 - console.log we will load the data in the
162:01 - error both and we will see if this is
162:03 - working or not this time this is a tweet
162:05 - let's tweet this yeah new row okay so it
162:08 - is saying that we are violating the row
162:11 - level security policies so it's good we
162:14 - are getting some details over here but I
162:16 - want to show this message or this error
162:18 - message on the front end so can we do
162:21 - that can we do that but I I think we
162:23 - can't do this in in the server actions
162:25 - so if we showing error on client in
162:29 - server actions Nexus how to handle the
162:32 - errors so we will see how to handle the
162:34 - error okay so we can submit the error
162:36 - and we can do like this cool you can
162:38 - return anything we can return the data
162:41 - and error from here so what we can do
162:43 - with return data and it's just like that
162:46 - and here we can do this thing Action
162:49 - assing phone data await Action phone
162:52 - data and this is how it is suggested
162:54 - here so this is a tweet we can see what
162:57 - it is saying if it doesn't break uib
163:00 - don't consider it an error yeah that's
163:03 - true because we are doing all in server
163:05 - so it is not breaking the UI it's just
163:08 - the data you return from an action
163:10 - support it into the state when it create
163:12 - true sleep error Setter there but also
163:16 - be built in the Injustice pattern model
163:18 - so now let's try to return this and we
163:20 - will see if this is working or not the
163:23 - data we are getting here we can make it
163:25 - a sync and here we can make this action
163:28 - the data and let's give it any on now
163:31 - and it should give us some data or the
163:34 - response and we will print out the
163:36 - response I am not sure it will work or
163:38 - not but yeah yeah it is saying form
163:40 - action function functions cannot be
163:42 - passed directly to client components
163:44 - unless this is not a client component
163:46 - let's see if it is breaking the UI yeah
163:48 - so form action function cannot be passed
163:51 - but why it is saying here the same thing
163:53 - we are doing the same here action async
163:56 - data the form data and okay so what I
163:59 - found out is we can't handle the error
164:02 - system like we handle in the client
164:04 - components if you want to do this we
164:07 - need to create a client component and
164:09 - then call the server action like this
164:12 - this is a client component we need to
164:15 - create a client component inside the
164:16 - server component and then we can call
164:18 - this as a prop storage Direction inform
164:20 - data like this it's possible with a
164:22 - client component you can pass the server
164:24 - action as a prop to the client component
164:27 - so this is how we can handle the errors
164:29 - that's why I believe the trpc is still
164:32 - ahead of time if you use trpc QV live
164:35 - will be so much easier but don't worry
164:37 - we can do that now so let's create a
164:41 - client component for now so in This
164:43 - Server component create a form client
164:46 - component let's try this out if this is
164:48 - working or not so first we will say use
164:50 - client
164:51 - and we will receive the props in here
164:54 - like this we are typing it and we will
164:57 - say we will receive a phone client
165:00 - component just like here so we can I
165:03 - think remove this thing we can just
165:05 - follow this pattern over here the whole
165:08 - thing the error everything let's install
165:10 - the package first pnpm we'll start Sonos
165:13 - this is a package which will help us to
165:15 - show some toast messages and nice toast
165:18 - messages so you can see the touch
165:20 - presser these are very good and we can
165:22 - also you can see this is Rich colors and
165:25 - looking good this is our server this is
165:27 - our server action and we will cut this
165:30 - thing and we will paste it here and
165:32 - instead of doing everything here we will
165:35 - say props dot submit tweet so if you
165:37 - hover over it you can see this is a
165:40 - promise of data and error so promise of
165:43 - something form data so what you can do
165:45 - we will pass the whole thing here
165:47 - let's rename this form capitalizes we
165:50 - will import and we will pass our props
165:52 - here so we will pass this submit to it
165:54 - action or we can directly say the action
165:57 - thing submit to it and here we can
165:59 - declare the type action and the type of
166:01 - it is these things let's copy this and
166:04 - paste here simple directly I am showing
166:07 - you how I am doing this and this is our
166:10 - thing and here we have our action so now
166:12 - when this is action is being done we can
166:15 - say it is dirt here is our data in
166:18 - action dot this is our action and we
166:20 - will pass the data inside it submit to
166:22 - it and to remove this this error what we
166:25 - can do we can declare this in another
166:27 - function handle submit just like
166:29 - something const handle submit tweet sync
166:33 - and this is our action or let's rename
166:35 - it to server action so it will be more
166:37 - server action more descriptive so we
166:39 - will face some errors like this because
166:41 - we are doing we are coding the latest
166:44 - pattern or the latest thing in the next
166:46 - yes so we can we may face more such a
166:50 - problems in the future okay so it's a
166:52 - functions so yeah
166:54 - now now we will paste it here and we can
166:57 - say as any we will see if this is
166:59 - working or not but there is such that it
167:01 - will not work functions cannot be passed
167:03 - directly to client components unless you
167:06 - explicitly expose it by marking it with
167:09 - use server so as you can see it is still
167:12 - not working and we are not getting what
167:14 - we want this is already a server
167:16 - function so basically it's not working
167:18 - so we can't handle the errors properly
167:20 - in here you can't get the return value
167:22 - of a server action in a server component
167:25 - yet okay so we can't get the written
167:27 - value the action must be code from a
167:30 - client component to to this we are
167:32 - waiting for something like use action
167:34 - State the action must be called from a
167:37 - client component so we are calling that
167:38 - but it is still not working okay so what
167:41 - I am saying is if we remove this thing
167:43 - let's refresh test and now it's what
167:45 - it's good it's happy and if I do this
167:47 - it's happy yeah and let's try to submit
167:49 - something hello world okay so something
167:51 - so are we getting anything from here or
167:54 - no basically this is this is working we
167:57 - can pass the server action as a submit
167:59 - to it and here we are calling this thing
168:02 - but I am not sure if we are Hello World
168:04 - server actions yeah we are getting this
168:07 - console.log rest okay okay we got this
168:10 - yeah we got this we got this so this is
168:12 - working we are getting the error here so
168:16 - we can see if the rest dot error is
168:19 - there then touch dot error and we can
168:22 - say res dot error Dot message that's
168:25 - what we want to do that's our whole goal
168:27 - and if this is not true or the error is
168:30 - not here then we can show a success
168:32 - message which means toast dot success
168:35 - tweet send successfully okay we need to
168:39 - configure our toaster for that to
168:41 - configure our toaster we have to install
168:43 - this and we have to use this toaster in
168:45 - the top level component so let's go to
168:48 - the context main component not in the
168:51 - main component in the layout go to app
168:53 - in the layout this is our server
168:55 - component keep remember in the
168:58 - supervised provider this is the
168:59 - overclient component so in the client
169:01 - component we are already showing a toast
169:04 - here you can see so now here we can show
169:06 - a toast and it will work so let's go if
169:08 - we try to tweet okay we are not able to
169:10 - see any error why is that let's close
169:13 - this this is not working hit enter okay
169:17 - we are not seeing anything why is that
169:19 - we can create a client combo inside a
169:21 - server component so you can see this is
169:23 - composed to it this is our server
169:24 - component and we are passing This Server
169:27 - action into a client component and we
169:29 - are calling this from here so this is
169:31 - just like in API which is working yeah I
169:33 - got this this is just an API so you
169:36 - still have to do this things here so top
169:39 - stored error is not working so let's
169:41 - console.log let's see what is happening
169:43 - here res dot error and if we try to hit
169:46 - it is it is being low but I think it is
169:49 - doing Globe from here okay so maybe we
169:52 - have to refresh this whole thing
169:53 - something new we are getting this but we
169:56 - are not number one thing we are not able
169:58 - to see this thing number second where
170:01 - where is this consulted look I'm not
170:03 - sure how this is we are able to see the
170:06 - console.log but let's see what is
170:08 - happening now let's run our server again
170:10 - and we will see what is happening
170:12 - because we are not logging any data and
170:14 - it is still showing so that's what I am
170:16 - trying to figure out oh okay okay okay
170:18 - so that's the wrong thing we have did so
170:21 - we are reporting in drone got it now it
170:23 - will work it will work now yeah
170:25 - something happened same something
170:27 - happened good let's try it again we can
170:29 - wrap this thing into try catch the whole
170:32 - thing
170:45 - if you hit the Tweet yeah now we are
170:48 - able to see our error we are getting
170:50 - this error from our server component and
170:52 - this is true this is awesome so now
170:54 - something is working so we have to
170:55 - restart our server and we need to import
170:57 - our files correctly we were doing it
171:00 - wrong that's why you are facing the
171:01 - problem so now we can remove this and
171:03 - now we are creating everything from here
171:05 - so it's not a cleaner approach it's good
171:08 - we can say this is our form directly we
171:11 - are calling from here and this is our
171:13 - function which is a server function so
171:15 - this is all good but I would say trbc
171:18 - handles it very beautifully okay so if
171:21 - you visit the trpc mutation you will
171:23 - find that it is very good it's my
171:25 - opinion you can have yours so now over
171:29 - this is saying that it boilers the
171:30 - policy why is that because we are
171:33 - creating a component server super based
171:36 - client and this uses the API key which
171:40 - is NN key and which is public key
171:43 - so that's why we are not able to access
171:45 - our tables so to access over tables we
171:47 - need a secret key to top level key which
171:49 - we will use only in server because this
171:51 - is a confidential key and we must not
171:54 - reveal it to the public to the client so
171:57 - that's why if you go to the super best
172:00 - provider and I think in the supervised
172:03 - context somewhere we were using in the
172:06 - library in the middleware yeah it's good
172:09 - so I think we are missing something we
172:12 - need to create a server client which
172:14 - will handle all this stuff so super bass
172:17 - client this is not what we want so from
172:20 - the JS Library what I am saying is from
172:22 - Super page yes here we have super best
172:25 - client and we need to create a server
172:27 - client this supervised doesn't have
172:28 - access to over tables that's what I'm
172:31 - saying and this is a confidential or a
172:33 - server code and this is not a public
172:35 - code so we can remove this thing we
172:37 - don't need this here what we need is we
172:39 - need a Super Bass client super best
172:42 - server client you can say which is
172:43 - confidential and which will use a secret
172:45 - key so supervised client you can say
172:48 - this is a new supervised client and it
172:51 - will accept first one is supervised URL
172:53 - so it is in the process dot EnV dot
172:56 - subabase URL and another thing is super
173:00 - best secret case so
173:02 - process.env dot superbase secret key
173:05 - like that and it will say that it is it
173:07 - may be undefined so what we can do if
173:09 - this is defined so we can say Super Bass
173:12 - URL is equal to const Super Bass secret
173:16 - key this is a secret key which I have
173:18 - shown you already in this in your Super
173:20 - Bass table editor in the project setting
173:23 - in the API this is what is secret this
173:26 - key has the ability to bypass row level
173:28 - security so it is secure and you can use
173:31 - this thing process.env dot super best
173:34 - secret key like that and if not if this
173:37 - doesn't exist or if this doesn't exist
173:39 - then we can return the error and in the
173:42 - error in we can return message supervis
173:45 - credentials not provided like that
173:48 - because this is what we are sending here
173:49 - so we want to send the same schema so
173:53 - that we can show this clear message so
173:56 - here we what we can do here we can use
173:58 - this and here we can use this so it will
174:00 - not complain no so it will not complain
174:02 - now we have our super best server client
174:04 - and here instead of super based server
174:06 - client we will use the super best server
174:09 - so to insert into our table we will use
174:11 - super based server from tweets like this
174:14 - and to get the to get the user to get
174:18 - the current user we need to use the
174:19 - previous super best thing what I'm
174:21 - saying is const superbase is equal to
174:24 - the previous thing which we have removed
174:25 - create server component client this
174:28 - thing it accepts cookies and it accepts
174:31 - headers so this is our client component
174:33 - this variables know that we have located
174:35 - no not so super best client here we will
174:38 - say super best client dot dot get user
174:41 - so it will get the current user and it
174:43 - will helps us to insert in our tables
174:45 - just like that now you can save this and
174:48 - it will work nicely this is complaining
174:50 - postgres error so what we can do here is
174:54 - postgres error it is complaining that
174:57 - now we have two things data and error
174:59 - error has message but here error is say
175:02 - said to be postgres error but here we
175:04 - are sending the error indifferently so a
175:07 - is any does it work so a type script may
175:11 - be pain sometime but you can fix this
175:14 - error so what you can do you can copy
175:16 - this whole thing and you can paste it
175:17 - over here now this will not complaint so
175:19 - now we we have we are getting the error
175:22 - in the message type and we are getting
175:24 - the data like this so the two things we
175:26 - have but still the error can be possible
175:29 - server or the error can be the error
175:31 - object which has message so now let's
175:34 - try this and this should work this time
175:36 - hello world if you create a tweet super
175:38 - basic credentials not provided
175:41 - credentials are not provided why is that
175:44 - because maybe we don't have or this
175:48 - variable is named next public because
175:50 - this is a public think and we are also
175:52 - exposing it to the client okay so if you
175:55 - go to the context where is this in the
175:58 - supervised provider I think here okay so
176:01 - this this should work now click on treat
176:03 - Super Bass credentials are not provided
176:05 - so this means we don't have one of them
176:08 - two variables so if you go to the EnV
176:10 - local you can see we have our secret key
176:13 - and secret key named ronly it is s e c r
176:17 - e t it is a confidential key and you
176:19 - should not show this to public I am
176:21 - saying it again it is a very
176:23 - confidential and it has all the access
176:24 - to your database and your everything so
176:26 - this
176:29 - URL and that's what we need okay so
176:33 - remember to name them correctly so now
176:36 - if you try to submit it will work tweet
176:39 - sent successfully now our tweet is
176:42 - working if you go to the database in the
176:45 - tweets you should able to see the Tweet
176:48 - here you can see everything is looking
176:50 - good and nice and this is the username
176:52 - which have submitted this with so that's
176:56 - how we have where is this in the compose
176:59 - to it we have created a server component
177:02 - we have created a client component
177:05 - we learned how to pass how to handle
177:08 - errors in server component and do all
177:10 - things as you can see we are now able to
177:12 - successfully submit a tweet let's do it
177:14 - again copy some lower map sim a long
177:17 - paragraph Maybe
177:18 - so you can see this is a long paragraph
177:19 - if we tweet this
177:22 - this way it is sent successfully and in
177:26 - the network tape you can see all the
177:28 - requests so these all are the requests
177:31 - which is
177:33 - working on in the backend you can see
177:35 - this is the tweet and this is how it is
177:39 - being sent and we are getting some data
177:41 - from our server as well
177:47 - this is a server action
177:50 - okay so now let's close this thing
177:54 - I just want to show you that it is
177:56 - basically sending API request nothing
177:59 - much
178:00 - and here we are able to see our tweets
178:03 - we just now have to face them and show
178:06 - to the main component in the main
178:08 - component here we are fetching all the
178:11 - tweets so here we will Define our get
178:13 - bits function first we will create our
178:16 - Super Bass server client just how we
178:19 - have created in our server component so
178:21 - this is how we we will create our thing
178:24 - so what I want is I want this to be used
178:28 - on the same place
178:30 - so I can create a yeah so we have
178:33 - supervised URL everything is good and
178:36 - here we have our super based light so
178:38 - this is a JS Library I think it may not
178:40 - work so we can try this at least there
178:43 - is no worry in trying we can try this
178:45 - okay so this is an async function and
178:48 - here we have over Super Bass server
178:51 - client new supervis then do anything
178:54 - basic simple we will figure out how to
178:57 - handle this stuff much smoothly or much
179:00 - nicely in a very much organized way this
179:04 - looks ugly as for now but yeah we can
179:06 - handle this for now
179:08 - so now we have our supervised server we
179:10 - just need to fetch all that bits for
179:12 - that
179:13 - I can show you the example how the data
179:15 - is being fetched so in the fetching you
179:18 - can see get data here we are fetching
179:21 - the data if this is okay we are
179:22 - returning the data and this is how we
179:26 - will get the data so what we can do
179:28 - const superbase gives us two things data
179:31 - and error you can await we can say Super
179:33 - Bass server not secret key server Dot
179:37 - from tweets and we can select all the
179:40 - records you can see we have all the
179:42 - records but we also want to select the
179:45 - profile with the tweets because we want
179:47 - to show something here we want to show
179:49 - the username we want to show the user
179:52 - profile also
179:54 - okay so we want to join this table as
179:57 - well so you can see username and full
179:59 - name so we will join this table the
180:01 - username the name and the Tweet later on
180:05 - we will also join the likes bookmarks
180:07 - and all the other tables for now let's
180:10 - join the user table so if you go to API
180:14 - docs here you will find how to join this
180:16 - so in the trades you can see you can
180:18 - read the for Interval like that select
180:21 - some column other table and here you can
180:24 - select so what we can do here we can
180:27 - select all the rows from the current
180:29 - Table in the other table which is
180:31 - profiles table we can select everything
180:34 - from profiles as well can we show
180:36 - everything from profiles on the client
180:38 - let's see if profile doesn't have any
180:41 - secret or confidential thing so it is ID
180:44 - upgraded username profile so we can
180:47 - select the username in full name
180:49 - basically for now so we can say Here
180:51 - full name and we can say we need the
180:54 - username name and we can as for now
180:57 - let's console.log the data so we can see
180:59 - what is going on here okay so the data
181:01 - is not typed full name and username so
181:05 - if you go here and if you hit the
181:07 - refresh now we should be able to see
181:09 - something here okay so we have to call
181:11 - this thing over here so const data is
181:14 - equal to get tweets and we have to avoid
181:17 - this and to avoid this we have to make
181:19 - this function a synchronous now this
181:22 - will work you can see we are getting
181:24 - some data this is hello word username is
181:27 - Club folders and the name is null you
181:30 - can see the full name is null and we are
181:32 - getting the table as well so you can see
181:34 - we are getting the profiles and we are
181:36 - getting the main data as well taught so
181:40 - here we can say what it returns so it
181:43 - will be type save so what it returns so
181:46 - here if you hover over it you can see
181:48 - overrides the type of return data so how
181:51 - to do this let's see if the supervised
181:54 - talks has anything related to returning
181:57 - the super base
181:59 - returns type from table type script
182:03 - TS with supervis yeah so here you can
182:07 - see export async so this is how we are
182:09 - returning the movies ID and titles and
182:12 - here we can say type of get movies but
182:14 - it will show us the title but we want to
182:18 - show the correct response here I think
182:20 - there must be docs related to returns
182:26 - foreign
182:28 - so here as you can see we can override
182:31 - the data by defining here so if we
182:34 - Define a string over here so you can see
182:37 - this is string order this data is string
182:39 - or null so we can type the data over
182:41 - here so to type the data we have the
182:44 - database types here all the types we
182:47 - have generated previously in our
182:49 - previous video
182:50 - so we just need to join two tables so
182:53 - forward here we can say the database
182:55 - import the data first of all we need to
182:57 - import this thing okay so we are not
182:59 - getting the imported thing here so we
183:02 - can import so in the database we have
183:05 - some types in the public in the tables
183:07 - instead of doing the tables yeah in the
183:10 - tables we have tweets
183:12 - we are getting the tweets here all the
183:15 - tweets and we are getting the profiles
183:18 - as well so if you go over here where
183:21 - this no you just need to copy this thing
183:23 - you can profiles and here you can see
183:27 - profiles so now if you hover over the
183:29 - data you can see we are getting
183:31 - something but in the tweets you can
183:33 - suggest what do we need it is a row and
183:35 - it is also Arrow now you hover over it
183:38 - you can see we are getting some data
183:40 - which is a created ID profile this is
183:42 - okay but here we are getting only full
183:45 - name and username so we can select we
183:47 - can modify the type and you will see how
183:49 - we will do that also so profiles is is a
183:53 - row and which is a array like that so
183:56 - now if you hover over it you can see the
183:58 - profiles is now in Array note array it
184:01 - is just a single so we can remove this
184:04 - now it is good so now if you click data
184:07 - dot okay so it is so we are returning
184:10 - the array of this whole thing so now
184:12 - this is an array so if we go to the
184:14 - zeroth element and we go to profiles and
184:17 - now here we can
184:18 - print the full name and but we'd only
184:21 - want to select something so we can pick
184:23 - from our types so we want to pick full
184:27 - name and we want to pick the username
184:29 - only two things we want here so you can
184:32 - search the pick type script in the
184:35 - documentation so here you can pick the
184:37 - desired columns like that so now if if
184:41 - we have full name and profile like that
184:43 - so now if you go here on the application
184:47 - if you refresh this now you will see
184:49 - Club of order signal which is the first
184:51 - element of our thing so we are getting
184:53 - all the things we need and now we can
184:55 - return this whole data and this will be
184:57 - nice and easy so you can return it
184:59 - directly and here we have our data if we
185:02 - get any error so we can show the error
185:04 - okay so this is something wrong with
185:07 - this so here we what we can do if we
185:10 - have data dot error we can show an error
185:14 - here to its node available okay tweets
185:17 - or we can show server something wrong
185:20 - with server something along with the
185:23 - supervis or we can say the server and
185:25 - here we want to show the data if it is
185:27 - available so if we can say data dot data
185:31 - is here so instead of data we can say
185:33 - the return the return all the response
185:36 - response dot data is available then
185:40 - restore data dot map directly and here
185:44 - we have our tweet and inside our Tweet
185:47 - now we have a tweet ID you can see
185:50 - everything is typed save now here we can
185:52 - set tweet.r profiles.what is this this
185:55 - is full name and if it doesn't exist
185:58 - don't show anything and here we can show
186:00 - the username here we will show the time
186:04 - when this is created so we can use the
186:06 - datejust library for it and the relative
186:08 - time plugin so if you search dgs we'll
186:11 - use this thing so go to new terminal
186:13 - install pnpm install date yes and if you
186:17 - search if you go to the documentation
186:19 - display and time from now so it requires
186:23 - relative time plugin to work so if you
186:25 - search you just need to also import this
186:27 - thing so what I'm saying is import to
186:30 - AGS from thgs import relative time
186:34 - plugin and you can what you can do here
186:37 - you can
186:38 - j.js.xtend and you can extend the plugin
186:41 - like this so import relative time from
186:45 - this and now you can extend this thing
186:47 - and now you can use this format here
186:49 - from now so here we are what we can do
186:52 - teachers day cheers here we can give it
186:56 - a the Tweet when this is created and we
186:58 - can say from now now it will show us the
187:02 - relative time and this is our tweet text
187:04 - here we can show to it dot text this is
187:07 - everything else we will do after the
187:10 - like we have implemented the like
187:11 - functionality and the other
187:12 - functionalities so for now let's save
187:14 - this thing and see if this is working or
187:16 - showing some error so now you can see we
187:18 - have two tweets and it is showing nice
187:21 - and good we can submit it to it let's
187:23 - copy some another lower map some now
187:25 - tweet this tweet sent successfully but
187:28 - now this is not refreshed so we have to
187:30 - refresh this and then it is it should be
187:34 - available okay so it is not available
188:11 - so what we can do we can disable the
188:14 - caching if you go over here it is
188:16 - enabled the caching
188:17 - for now we don't want it background
188:20 - reveal is a very validates the data at a
188:22 - specific time interval on demand we will
188:25 - data based on the email such as an
188:27 - update yet it is fetching and next it
188:30 - will debilitate so we can do something
188:32 - like this so in the next case we have
188:34 - something so in the revalidated tag here
188:37 - we should have something console.log we
188:40 - will edit take okay so this is the API
188:42 - route I am talking about the this is
188:44 - that's why it is very fast you can see
188:47 - this is like very quick 78 millisecond
188:51 - because we are hitting the cache notice
188:53 - hitting the default so when we have
188:55 - created the Tweet we are on to
188:57 - rehabilitate the data so to revalidate
188:59 - the data we need to we can directly to
189:01 - this we can set this to zero I think so
189:04 - it will revalidate again and again let's
189:06 - try this now this is not working let's
189:09 - see this in the server actions
189:13 - it is saying that when we have submitted
189:16 - a product to the card we can develop it
189:18 - the path this is a used client component
189:21 - you can see increment client here we are
189:23 - using a server component this is what we
189:26 - have did now custom invocations without
189:28 - start transition yeah
189:31 - I want to see the documentation not
189:33 - testing
189:35 - Dynamic data phases are phase requested
189:38 - specifically opt out for caching
189:40 - Behavior by setting the cache option to
189:42 - no store OD validate to zero that's what
189:45 - we are doing we are rev editing this to
189:47 - zero so instead of here this is our main
189:49 - component so inside of defining the
189:51 - revaluation the tag here we have to do
189:54 - this here and it is saying that main
189:57 - component cannot be used as CSX we can
190:00 - also separate this whole thing out into
190:02 - the separate file for now yeah now you
190:04 - can see we are getting all the three
190:06 - tweets because we have disabled our
190:08 - caching if we try to submit again we are
190:11 - not seeing we have to refresh this thing
190:13 - to be able to see two very words now
190:14 - yeah this is hello world we are seeing
190:17 - two lovers this is hello world
190:19 - second tweet tweet said successfully we
190:23 - should see three hello world now if you
190:25 - hit refresh hello word hello word hello
190:27 - word two yeah it's working so we have
190:29 - disabled the caching for now you can see
190:31 - the cache is missed and it is taking
190:33 - some more time now what is your main
190:35 - concern is when we submit any tweet we
190:39 - want to revalidate the whole thing okay
190:41 - so revalidate the path note path we want
190:44 - to revalidate or there is something
190:47 - called mutation
190:49 - success mutation in the compost it let's
190:52 - go to here supervised server from insert
190:56 - when this is successfully done you want
190:58 - to refresh the page so routed we can use
191:01 - a router from next router latest const
191:04 - so let's go to the documentation here we
191:07 - have something called router Router
191:09 - there is something which I have used in
191:11 - my previous tutorial and the
191:13 - documentation is not nice I would say
191:15 - previously there was good documentation
191:17 - which was a development version of the
191:19 - documentation of latest Snapchat
191:20 - features use router yeah this this is a
191:23 - thing I'm saying in validating the case
191:26 - server actions can be used to revalidate
191:28 - the data on Demand by path or by case
191:30 - Tech what is this revelated take here so
191:34 - if we are using the
191:37 - Nexus API routes then we can really take
191:40 - it like this
191:41 - but we want to do inside our server
191:44 - actions that's why I think we need very
191:46 - validated path so I think here we can
191:49 - revalidate our path revalidate okay what
191:52 - it is saying revalidate now this is not
191:54 - revalidate the path and it will accept
191:56 - the path is a home page so now if we
192:00 - submit anything yeah you can see that we
192:02 - haven't refreshed and this is
192:04 - automatically getting populated Auto
192:06 - revalidate to it you can see we are Auto
192:09 - revalidating this thing so this is
192:11 - working nicely now we can demo our
192:14 - consort.log which is here in the page in
192:17 - the main component you can remove this
192:19 - thing we can also put this thing into
192:21 - the separate component or the functions
192:24 - so in the app or in the library create a
192:28 - super base create a new folder I think
192:31 - supervised in the create a new file get
192:33 - tweets dot TS export constant tweets and
192:38 - here we can use this thing over here as
192:40 - simple as it is
192:42 - save this and we will just import here
192:44 - so this is how we are extracting the
192:46 - logic out of here it will be much better
192:49 - import the database also yeah it's
192:51 - looking good let's see if this is
192:52 - working or not yeah this is working and
192:55 - one thing more is remaining when we
192:57 - compose a tweet in the form client I
192:59 - want to reset the whole form
193:02 - so how should we reset the form okay so
193:05 - to reset the form
193:07 - there is something reset for HTML
193:12 - cool there is something called a type
193:14 - reset which will reset everything you
193:17 - can see this is action.php the page if
193:20 - we try to do integrate submit this image
193:24 - this yeah everything is good but I want
193:26 - to reset phone
193:28 - which we can basically this is a client
193:31 - component you can see so we can just do
193:33 - it directly what I mean is we can have a
193:36 - button type is reset and we can give the
193:39 - reference to this button and we can
193:41 - programmatically call this so reset ref
193:45 - is equal to use ref it is a button HTML
193:49 - button element initially it is null we
193:53 - can pass the reference to this I haven't
193:55 - used this approach but I think this can
193:57 - work we can give class name as a
193:59 - invisible so it is invisible and when we
194:03 - have successfully sent the Tweet we can
194:06 - click this button like this so it will
194:08 - this is a tweet with
194:10 - Auto reset if you hit enter you can see
194:14 - it automatically reset our form which is
194:17 - good I I don't know this is a correct
194:19 - approach but yeah this is a one approach
194:21 - which you can use to reset your form so
194:24 - that's how we have submitted our tweet
194:26 - and everything is looking good for now
194:28 - this is maybe hard for you because I
194:31 - know next shares this is the latest
194:32 - things which we are doing so as you can
194:35 - see here is our timeline and this is
194:38 - looking good as for now this is all
194:40 - being rendered server side so if you hit
194:43 - refresh then you will see all the tweets
194:45 - rendered instantly or like it is not
194:48 - being rendered on Clyde that's why we
194:50 - don't have any loading indicators at all
194:52 - so it will be faced directly
194:56 - now what we need to do we need to
194:58 - implement our like feature and our
195:00 - bookmark feature so in the new Twitter
195:02 - we can also bookmark tweet directly from
195:05 - here so we can implement the feature we
195:08 - can Implement a save button here and
195:10 - then we will see how to do The Bookmark
195:12 - feature implementing bookmark and like
195:14 - feature the both logic is similar very
195:17 - similar and you will see how we get that
195:19 - so this is our application inside the
195:21 - main component we are rendering all our
195:23 - tweets so first of all I will separate
195:26 - this component out into a new component
195:28 - so let's create a new component and also
195:30 - the other thing is you can see here we
195:32 - are using Pascal case and here we are
195:34 - using some another case so I will change
195:36 - the case to smaller case so here I will
195:39 - say left side part like that we will
195:42 - also auto update the Imports as well so
195:44 - here you can see this is looking good so
195:46 - that we have consistent naming in our
195:48 - whole application here we will say main
195:50 - component component yes let's change
195:54 - this here we have our right section or
195:56 - yeah let's name it right section just it
195:59 - is complaining and it is saying main
196:01 - component cannot be used as CSX
196:04 - component it's return type is not
196:06 - available
196:28 - [Music]
196:33 - [Music]
196:40 - so this is our client component as you
196:42 - can see we have some hooks inside here
196:44 - but we need a server component so this
196:48 - is our page here we are getting all the
196:50 - data and here we are fetching all the
196:52 - data so why it is not working is it is
196:55 - saying that promise element is missing
196:57 - okay so we need to mark it as a react
197:01 - dot server context no let's see if Nexus
197:05 - has some type for it server no
197:09 - okay so to use async server component
197:12 - with type script ensure you are using
197:14 - typescript 5.1.3 or higher end types
197:18 - react okay so that's why we are facing
197:21 - the problem so we need to update our
197:22 - typescript as well if we go to
197:24 - package.json so if we go to our
197:27 - package.json and here we can find out
197:29 - the typescript version we are using so
197:31 - you can say 540.1 and it is not updated
197:34 - that's why we are facing that problem
197:36 - let's update the type script as well we
197:39 - don't need typescript as a dependency we
197:42 - can use it as a div dependency and types
197:44 - react is 18.2.8 this is also not updated
197:48 - so we can put all these things inside
197:50 - div dependencies so open a new terminal
197:53 - because the project I am building I am
197:55 - building it for like two months and I
197:57 - haven't tested anything for two minutes
197:59 - now I am doing all the things now that's
198:02 - why we are facing some problems with
198:04 - versions
198:05 - so now what we will do pnpm 8 as save
198:09 - div and we will update all these things
198:11 - inside our Dev dependencies also the
198:14 - type script let's remove all these three
198:17 - things and it will work just like fine
198:19 - save this hit enter so now we have all
198:22 - the latest version
198:23 - 5.1.3 yeah and
198:26 - 18.2.8 yeah it is higher so now it will
198:28 - work nice save this and now if we hit
198:31 - the refresh let's PNP and brand new
198:34 - again and if we reload our window now
198:37 - our error should be gone okay it is
198:40 - still here now it's searching on Google
198:42 - and see if this works or not
198:46 - so it is showing that it is async server
198:48 - component okay so we type script let's
198:52 - see restart the TS server we can do a
198:55 - lot of things here we can also enable
198:57 - this typed route feature that's good so
199:00 - this is over here to use and ensure you
199:02 - are using if you are using old you may
199:05 - updating the latest version and types
199:07 - should resolve this issue okay but we
199:09 - are still facing the issue or maybe we
199:11 - are not using the version which we have
199:14 - operated to so here we can select our
199:17 - typescript version to use workspace
199:20 - version Wi-Fi 1.3 which is this yeah
199:23 - okay so you can see the error is gone
199:25 - that's why we were also facing the
199:27 - problem when we are trying to submit
199:30 - something inside our server component so
199:31 - if we go to our
199:33 - form so here you can see p here defined
199:36 - as any so let's remove this as well now
199:38 - you can see we are not seeing any error
199:41 - it is fixed so updating your typescript
199:43 - version and configuring it from here
199:46 - select type is extrogen and U is a 5.1.3
199:49 - version and it will be fixed or you can
199:51 - use the use work work space version as
199:54 - well also update your react types both
199:56 - so inside package.json this version and
200:00 - this version this both needs to be
200:02 - updated okay so now we are good so let's
200:05 - also update this so this is a client
200:07 - component we are using this inside
200:09 - server component so I will create
200:10 - another component which is client
200:13 - components client components and I will
200:16 - put this into client components because
200:19 - this is a client component so we can
200:20 - differentiate it better yes I will also
200:23 - rename this server component to S cell
200:26 - components and I will update this now
200:28 - things should be good
200:30 - so now the naming is consistent you as
200:33 - you can see we have also defined our
200:35 - functions separately over here here we
200:37 - are getting the tools it is for our
200:39 - timeline and things are now good to go
200:42 - so now we can create our further things
200:44 - we can create our features like like
200:47 - feature and bookmark feature first of
200:50 - all we need to also add a button of
200:52 - bookmark let's remove this and see what
200:56 - is going on we refresh this yeah it's
200:58 - good some errors we are getting from
201:00 - pnpm updating to yarn works as well but
201:04 - for now we can proceed it you can see
201:05 - this is being rendered so in the client
201:08 - component we can create a new form but
201:11 - before that in the main component here
201:13 - we are rendering everything so first of
201:15 - all we will create a new client
201:16 - component which is tweet tweet.tsx we
201:19 - can also update this form client
201:21 - components so we can say compose tweet
201:25 - compose tweet form and then we need to
201:28 - also update all the namings I am fixing
201:30 - the naming post Tweet form like that now
201:34 - you can also update this props at school
201:36 - and in the client company compose to it
201:39 - form and here we are importing notice
201:42 - compose create form so it is correct and
201:45 - now it is good to go we have fixed over
201:47 - naming we've fixed a few things here and
201:50 - there so in the now we need to go inside
201:52 - main component so here is our tweet
201:55 - rafce capital letter first and in the
201:58 - main component here we can cut this
202:00 - whole thing and here we can put this
202:02 - thing we can import the tweet from
202:04 - client components and here we can pass
202:06 - our ID as well so we can say key is to
202:09 - get root ID and other than that we can
202:11 - pass the whole tweet as a props so tweet
202:14 - is equal to tweet and here we can say we
202:16 - are accepting tweet and this is tweet
202:19 - probes so type tweet probes is equal to
202:22 - feet and here we will Define what with
202:25 - so let's hover over this tweet and we
202:27 - can copy this whole thing or what we can
202:29 - do go to kit tweets and here we are
202:32 - returning so this is our type so copy
202:34 - this and this thing import the database
202:36 - from library super best types and here
202:39 - we have a word with just like this or we
202:42 - can define a type and we can use this
202:44 - everywhere so what I'm saying is type
202:47 - feed type so we are sure that we are
202:51 - using the same thing here and there save
202:53 - the thing do we type and we can export
202:56 - from here export type to type and we
203:00 - will use this over here so instead of
203:02 - doing this we can do tweet type import
203:05 - the other things as well this icons Ctrl
203:08 - X and that's how import the pages as
203:12 - well and the relative time plugin this
203:15 - is how it will work so now we have
203:17 - created a separate component for tweet
203:19 - and we are using the same type here and
203:21 - there and it is good now it is much more
203:24 - organized and looking beautiful so if we
203:27 - go to our application it is running and
203:30 - everything is code now we will go to the
203:32 - Tweet component here and we will create
203:34 - our like button let's create the like
203:35 - and we will see how to implement the
203:38 - bookmark feature as well so the live
203:39 - feature is nothing we just need to
203:41 - insert a row inside our likes table so
203:44 - if we go to super base our project
203:47 - dashboard and here is our tweet clone in
203:50 - the table editor here you can see we
203:52 - have over like stable here we need to
203:54 - insert Arrow insert some data we will
203:57 - say who the user so who is the user who
204:00 - is like which tweet so we will specify
204:02 - user ID and tweet ID and we will save
204:04 - both of these so that we can know who is
204:06 - this user who has like this to it then
204:09 - we can also fetch all the users from a
204:12 - single date we just need to get all the
204:14 - data from this table we will just say
204:15 - give me all the users who have liked
204:18 - this post so we will say select all the
204:21 - users from like stable where the Tweet
204:24 - IDs is simple so now what we will do
204:28 - here we will create another server
204:29 - action so this time we are not using the
204:33 - form element we will use something
204:35 - called start transition or a new thing
204:37 - in the Nexus server if you search server
204:40 - actions
204:44 - so this is how we are submitting our
204:47 - tweet but this is how we can also use
204:50 - this for a button where is this so this
204:53 - is this thing use transition hook so
204:55 - this is basically a client component so
204:57 - we need to import use transition from
205:00 - here from react and this is a client
205:02 - component we can specify this with use
205:04 - client a server component can have
205:07 - client component inside but a client
205:09 - component can't have server component
205:11 - inside it so it will work just like as
205:14 - it was working and we just need to do
205:16 - this transition
205:18 - we will say is with pending so it gives
205:21 - two things allows component to avoid
205:23 - undesirable loading instead by waiting
205:25 - for content to load before transitioning
205:27 - to next system so it's good you we can
205:30 - take a reference to this what is this
205:31 - excuse as two things is spending and use
205:34 - transition let's do update the state
205:35 - without blocking the UI okay this is
205:38 - cool thing so you can see the demo of
205:40 - this so currently we are now at the
205:43 - about tab if we click on the post we now
205:45 - have post if we click on about and
205:48 - contact it is fast but this is slow okay
205:50 - why is that start transitioning and set
205:53 - tab to Next Step cool system method to
205:56 - use this okay now let's see how we can
205:59 - use this with our server actions is like
206:02 - pending and start transition it gives
206:05 - Boolean and start transition function so
206:07 - we can name it whatever we want so we
206:09 - will just name it start transition and
206:12 - when this is clicked we will add a row
206:13 - so this is hard button and when this is
206:16 - clicked we can name it Button as tool so
206:18 - this is much better so when this is
206:20 - Click you can copy the whole thing I
206:22 - will Implement a function called like to
206:25 - it and we will pass the Tweet ID to the
206:28 - function like that so now we need to
206:30 - implement our like tweet feature or we
206:33 - can set the light tweet function so
206:35 - inside the actions we are importing add
206:37 - item from our server actions okay so
206:40 - this is how we can import it from so in
206:43 - the server component we can create new
206:44 - thing or in the super base here we can
206:48 - declare use server as well like this and
206:51 - here we can export the like to it
206:54 - feature or lightweight function as well
206:56 - is equal to async it will accept the
206:58 - Tweet ID which is a string and then we
207:01 - just need to do the same thing here not
207:03 - same basically we need this thing if we
207:05 - have supervised URL in supervised secret
207:07 - key then we need to await super based
207:10 - server Dot from behave like stable dot
207:13 - insert and it will ask us to insert
207:16 - something okay so we here we are not
207:18 - joining the database that's why it is
207:19 - not giving us Auto completion now we
207:22 - should have over Auto completion yeah we
207:24 - have Auto completion so here we can say
207:26 - random quid the Tweet ID is which is
207:29 - passed s tweet ID here we have the user
207:32 - ID we can find our user we can also pass
207:34 - the user ID over here that's the good
207:36 - thing user ID which is string and here
207:39 - we should have the user ID so for that
207:41 - we can use a hook code use users this is
207:44 - a auth helper which is given to us by
207:47 - react it gives us two things I think it
207:50 - uses user which can be user or null okay
207:53 - so here we can also make it condition if
207:56 - the user exists then only like this to
207:58 - it otherwise don't like this if the user
208:01 - exists user and user dot ID exist which
208:05 - is by the way exist if user exist then
208:08 - like this tweet otherwise toast dot info
208:12 - or we can say toast. error error would
208:14 - be not good simply we can show a message
208:16 - we can say
208:17 - please login to like a tweet just like
208:21 - that here we can pass two things so
208:24 - instead of passing the parameters as
208:26 - different different variables we will
208:28 - make it a object so it will be much more
208:31 - easier for us to pass it down here so
208:35 - what I'm saying is we need a tweet ID
208:37 - and we need a user ID and these both are
208:39 - interesting we can say we have tweet ID
208:42 - which is string we have user ID which is
208:44 - also a string and here we can pass over
208:46 - user ID as well that's thing we need and
208:49 - it will create a row inside our likes
208:52 - table and then we can revalidate or we
208:54 - can update our UI that it is like that's
208:57 - how it is simple so here we can import
209:00 - and we can pass down things here twit ID
209:03 - is tweet dot ID and user IDs user dot ID
209:07 - like that and let's see if this is
209:09 - working or not so here we are and also
209:12 - log this out we can see if this
209:14 - something went wrong data and error we
209:16 - can log console.log broke data and error
209:19 - and we can also load this so it will be
209:21 - more descriptive so here is our
209:22 - application if we click on the like
209:24 - button so we are liking over to it
209:27 - ourselves so it is saying please login
209:29 - to like a tweet which means the user is
209:31 - not defined so we can log the user as
209:33 - well here we can see what is going on so
209:36 - if we try to the user is null why is
209:38 - that when we have sign in Wise user is
209:40 - why is user not logged in if we can
209:44 - tweet yeah if we can tweet which means
209:46 - we are login then why it is not showing
209:48 - if we go to application localhost so
209:50 - there is some there is no other place
209:52 - where we have used this so if we go to
209:54 - our context our main context where we
209:57 - have defined all the logic for
209:59 - authentication which is in the app
210:01 - directory we have components we have
210:03 - library in the app directory yeah we
210:05 - have super based provider here we are
210:08 - using everything yeah the router tools
210:10 - refresh is a thing which we can use to
210:12 - refresh our router superbase dot oauth
210:14 - so I think we can use this also we have
210:17 - to use this use State create browser
210:19 - super best light and then here we can
210:21 - call this whole thing we can say
210:26 - superbase.aut.getuser.10 it will give us
210:28 - the result inside the result we can do
210:30 - all the stuff basically so instead of
210:32 - console.logging it remove this and here
210:34 - we have the response which is user
210:37 - response fresh dot data which is data is
210:40 - user and we can say rest dot user data
210:43 - dot user dot ID otherwise you can say
210:45 - the user is not logged in okay so it is
210:48 - also possibly undefined or the null so
210:50 - here we can say if the result or data
210:53 - exists and this exists then do this okay
210:55 - so what it is saying is having some
210:58 - problems with that const user is equal
211:00 - to race dot data dot user and here we
211:04 - have our user we can say you user dot ID
211:06 - like that yeah and we can show a loading
211:09 - indicator when this is being pressed but
211:11 - we will see what it is you can also show
211:13 - if this failed so we can say cache cache
211:16 - the error and show a toast message
211:18 - authentication failed and instead of
211:21 - doing it inline we can create a new
211:23 - function as well but for now let's
211:25 - proceed with it and see what is
211:26 - happening so if we click on dislike okay
211:29 - something worked this time and here you
211:32 - can see over like that's what I'm
211:34 - talking about if you go here and user ID
211:36 - and we can refresh this to ourself
211:38 - because we have liked the state and you
211:40 - can see we are able to see and we if we
211:42 - go to refresh this the statuses we can
211:45 - see select a record okay so this is a
211:48 - tweet ID and we can find out which to it
211:50 - is this we can filter our table
211:52 - with the Tweet ID so you can see Hello
211:55 - World we have liked hello world and
211:57 - let's like this time this whole text if
212:00 - you click on this and new like row will
212:03 - be inserted into our table which you can
212:05 - see and this tweet is the long text you
212:07 - can say so this is how we have created
212:09 - our main Logic for implementing like now
212:13 - what we can do here we also have this
212:15 - like pending so when it is pending we
212:17 - can show three dots or something we can
212:20 - disable the button if it's like spending
212:23 - and we can change it to a red hat if the
212:27 - user has lagged it to it or not so as
212:29 - you can see this is our project and here
212:31 - is our app if you refresh this allo our
212:33 - tweets are being rendered nicely but
212:35 - here you can see some white background
212:37 - is here so we want to remove this white
212:39 - background so for that I will go to in
212:41 - the layout and here in the HTML what I
212:45 - will do I will do it I will make the
212:47 - whole background black so now I think
212:49 - this is still not black so let's inspect
212:51 - the element and see what is this so we
212:54 - can then debug this thing so if we try
212:56 - to make it hidden so we can say what is
213:00 - the property I don't it's hidden sticky
213:03 - and then after Excel it is flexed so
213:05 - it's good but I think the hidden
213:08 - property tell it so I use television so
213:10 - much that I've forgot what is the
213:13 - visible property so it is not visible I
213:16 - am more into okay so let's give it
213:18 - visibility let's make it hidden so now
213:20 - you can see there is no white background
213:22 - but this is the problem of this
213:24 - container if we remove this you can see
213:25 - there is some white background at the
213:28 - bottom so I think we can give it the
213:30 - class name of let's let's give it
213:33 - background color of black no it's not
213:35 - working or let's give it overflow of
213:37 - hidden yeah this is working so what we
213:39 - need to do is remove this thing go to
213:42 - the right section and here what we need
213:44 - to do we are giving it height of screen
213:47 - so let's cut this part now it is not
213:49 - sticky because we should give it some
213:52 - fixed height to make it sticky okay so
213:55 - instead of giving Edge screen we can
213:57 - give it 90 of the viewport yeah now it's
214:01 - sticky and it's good 90 report but I'm
214:04 - worried about this white thing and it is
214:06 - because of the Overflow X property so
214:08 - what we can do we can give it overflow
214:10 - hidden and only the X overflow is hidden
214:12 - so now you can see this is gone but it's
214:15 - it's scrollable it is uh so instead of
214:19 - overflow Y is Overflow scroll we can say
214:22 - overflow y Auto so when this is bigger
214:24 - so the white will be there otherwise now
214:26 - this is good so when we try to make it
214:29 - large so now it is scrollable and it's
214:31 - good but when the screen is bigger and
214:34 - the content is inside the container so
214:37 - every content so now it is working so
214:39 - now it's look it's looking good so where
214:41 - we were we want to implement our live
214:43 - functionality we want to show all the
214:44 - likes so there are some different
214:46 - different approaches how we can show the
214:48 - likes on our timeline so the first
214:50 - approach is fetch all the likes with the
214:52 - post so let's assume this is our post
214:55 - and count all the likes and show here so
214:58 - how many likes this tweet has so we will
215:00 - fetch the likes count with the post when
215:04 - we are fetching the post from our
215:06 - database the other method is fetch all
215:08 - the likes on each separate post but what
215:11 - I am worried about if you face for each
215:13 - post you have to send a lot of API
215:15 - requests to your database and which is
215:17 - not a good idea so we will reduce our
215:20 - API request number and we will fetch the
215:23 - likes count with our post so what I am
215:26 - saying is let's implement it so if you
215:28 - go to the main component this is our
215:30 - server component and here we are getting
215:32 - the Twist and the other thing we want to
215:34 - improve is this is Super Bass and this
215:36 - is get tweets instead of get tweets we
215:38 - can rename these two functions or
215:40 - queries or two different things so we
215:43 - can make two different things so this is
215:44 - for queries queries yes and then what we
215:48 - can do we can cut this thing because
215:49 - this is a mutation this is a database
215:51 - mutation so inside supervised create a
215:54 - new field called mutation so we are
215:56 - separating out queries and mutation now
215:58 - this is good okay and the other thing is
216:01 - if you go to the queries this is also
216:03 - your server and this is also your server
216:05 - that's okay but I am worried that we can
216:08 - export this also we can in the utils not
216:11 - in the utils we can create a index.ts
216:14 - and we can export or subabase server for
216:17 - that we also need these things in the
216:20 - index.ts we can import and then we can
216:23 - import the supervised client as well and
216:25 - for that for the fix we can do is string
216:28 - and as string Super Bass server client
216:31 - this is a super best server Library okay
216:34 - so let's name this super best server
216:36 - this is good so now we can use this
216:37 - thing over here so we can remove all of
216:39 - these we can import like this supervised
216:42 - server from here and we can import the
216:44 - random uuid from crypto save this thing
216:46 - this is good and we need to do that here
216:49 - also so we'll remove the unused code and
216:52 - we will import everything what we need
216:54 - so now it's much cleaner approach you
216:56 - can save this now we have queries and vo
216:59 - mutations so if you want to face
217:00 - something we will Define here and if you
217:03 - want to insert some data or update some
217:05 - data we will Define here all the
217:06 - functions so now if you go here if we
217:08 - refresh everything is working as it was
217:11 - working previously okay so now what we
217:14 - want to do is you want to fetch the
217:16 - likes count with all the tweets we are
217:18 - fetching now what we can do we are
217:20 - saying that give me all the profiles as
217:22 - well but we want to join the likes table
217:25 - as well so if we go to our super based
217:27 - dashboards so let's go to supervis
217:29 - Project
217:30 - let's go to Twitter clone and here is
217:33 - over all the tables so we want to join
217:35 - the likes table as well so here we are
217:38 - saying that give me the profiles which
217:39 - is related to the tweets so here are our
217:42 - tweets and we are saying that okay so
217:45 - remove this filter we are saying that
217:47 - this is the profile ID and give me this
217:49 - profile ID or give me the profile of the
217:51 - user who has made or who has submitted
217:54 - this tweet we want to also attach like
217:57 - who is who is who is liking over to it
218:00 - okay so we want to query the count also
218:03 - so for that we have to look for the
218:04 - documentation so inside API docs here we
218:07 - can see how to get that we can also page
218:11 - in it we will do this uh at the end of
218:14 - our course what we will do we will fetch
218:16 - only a few tweets for once and then when
218:18 - the user Scrolls down we will fetch more
218:20 - tweets so really specific columns some
218:23 - column other column other table foreign
218:25 - key good but other table is fits and we
218:28 - want to with filtering okay so we we can
218:30 - this is how we can filter also insert a
218:33 - row insert menu update subscribe to
218:36 - changes read four intervals so this is
218:38 - what we want to do let's assume we have
218:41 - likes table then we can fetch who has
218:43 - like this tweet or who which to it is
218:46 - this so we can face the detail but we
218:48 - want to do from another Direction so
218:50 - let's try this comma and we will say
218:52 - like stable and in the likes table let's
218:55 - go here and the foreign key is I think
218:57 - the ID okay so let's do it like that and
219:00 - we will see what it is giving to us or
219:02 - what we are getting so const if you are
219:04 - getting any error or something I think
219:06 - this will not work but let's try if we
219:09 - were using Prisma or some Oran that's
219:11 - another thing but let's see what it
219:13 - gives to us data and error return data
219:16 - yeah column tweets dot likes does not
219:19 - exist and that's we know that's good
219:21 - because the problem is we have tweets so
219:24 - let me make you understand so we have
219:26 - tweets inside tweets we have a foreign
219:29 - key you user ID so we can fetch the user
219:33 - details or the author of The tweets
219:35 - fetch the author details who tweeted
219:39 - this tweet on the other hand we have our
219:42 - likes table inside we have two for in
219:44 - case we have user ID and we have tweet
219:47 - ID so from this side we can fetch the
219:50 - Tweet detail and as well as the user
219:52 - detail I want to do in it in one one
219:56 - query so we can make two queries but I
219:59 - don't want to make two queries let's see
220:01 - how to achieve it so here is the thing
220:04 - we count directly face the count of the
220:07 - tweets which is related to direct
220:09 - relatives so here we can't say that give
220:12 - me all the likes of this tweet or give
220:14 - me all the count like that we can't do
220:17 - that because we are not using an orm
220:19 - this is something which Superbass offers
220:22 - us to fetch all the things so what we
220:24 - can do now we have to fetch the Tweet
220:27 - count for every single tweet so here we
220:29 - can define a single function get likes
220:32 - count this is how and we can Define it
220:35 - will accept a single tweet ID so tweet
220:39 - ID which is string and it will return
220:42 - the count of the likes for this to it so
220:45 - we can say return a bit Super Bass
220:48 - server Dot from and which is the likes
220:51 - table give me all the count of the table
220:53 - us where we can say the equal we can say
220:56 - the Tweet ID is equal to the Tweet ID so
221:00 - now it will return so first let's
221:02 - consider.log or we can directly log this
221:04 - thing yeah so constant result we can
221:07 - console.log result and we can return
221:09 - this as well so this thing we will use
221:11 - inside our get likes count so if you go
221:14 - to the Tweet component this is over
221:16 - tweet and this is a client use client so
221:20 - this is a client function or you can say
221:22 - the client component this is complaining
221:24 - that okay because this is the query and
221:27 - we have to import it from mutation so
221:29 - now we have mutation so inside the
221:32 - client component you can't Define a
221:34 - server components that's the thing
221:35 - that's one thing we have to remember but
221:38 - inside a server component we can have a
221:40 - client component so now we have here a
221:42 - new problem which is this oh this is our
221:45 - server component we do you can see this
221:47 - is our server thing this is a server
221:49 - function we can't face directly using
221:52 - this function on the client so that's
221:54 - why we need to Define in some more
221:57 - components so instead of doing this a
221:59 - use client we will do this is a use
222:01 - server component
222:03 - that's why we can't Define a used State
222:05 - here so we have to remove the ReUse
222:07 - State and we will cut this thing we will
222:09 - Define another component which is like
222:12 - button to TSX and this is a client
222:15 - component finally this is a final client
222:18 - component we need and it is a like
222:20 - button simple so we will cut this whole
222:22 - thing we will paste here because we can
222:24 - Define use State inside our client
222:26 - component import the use browser super
222:28 - best client as well cool and then we can
222:31 - cut the whole thing from here and we can
222:33 - paste it here this thing also we can cut
222:36 - from here paste here import the like
222:38 - tweet import the toast import this and
222:42 - that's good tweet.id so it will accept
222:44 - some props so we can say like button
222:47 - props and we will Define the props type
222:50 - which is tweet ID which is string and
222:54 - here we will say this is our tweet ID
222:56 - and instead of doing tweet ID and tweet
222:58 - ID we can simply do this tweet ID save
223:01 - the whole thing here we will import our
223:04 - like button and we will pass down the
223:06 - Tweet ID which is tweet.id like that
223:09 - save this thing remove these functions
223:12 - also this one we don't need this and now
223:15 - this is a server component and we can
223:17 - fetch all the details of the Tweet here
223:20 - so if we go to our application you can
223:22 - refresh this and it should work as
223:24 - expected like this tweet and it should
223:27 - work in the likes table we have three
223:29 - likes now good so here we will fetch the
223:32 - tweets so you can say const get to it
223:36 - likes count is equal to get likes count
223:39 - and here we will pass the tweet.id like
223:42 - that and now it will give us the like
223:44 - count so we can consort.log and we can
223:46 - find out what is this so if we go here
223:48 - if we refresh this we will get a lot of
223:51 - things okay so so here you can search
223:53 - for a foreign relation between likes and
223:55 - count in the schema but no matches for
223:57 - fall okay okay so we did some mistake so
224:00 - it is assuming that it is a count table
224:03 - and give me all the okay this is not we
224:06 - want so instead of this so we can find
224:08 - out how to count rows super base client
224:11 - how to get count start okay so we can
224:14 - pass around the count exit you can say
224:16 - give me all the rows and we can Define
224:18 - things here we can Define count and
224:21 - which is true now if we what it is okay
224:23 - no it it doesn't accept true it accepts
224:26 - estimate exact plant so we can say
224:28 - accept so it will return as the exact
224:30 - count of a single tweet so you can see
224:32 - count is fun you can remove this thing
224:34 - we don't need any data we need only
224:36 - count okay so we need something so
224:39 - instead of that we can just say we need
224:41 - only ID so now we are getting something
224:43 - so this is test two it has one this dude
224:47 - has zero count distribute has one this
224:49 - two it has yeah so we are getting the
224:52 - Tweet count now and we can show the
224:54 - Tweet count over there so here here we
224:57 - can Define the returns type as well we
224:59 - can say what we are getting we are
225:00 - getting the ID and we are getting the
225:02 - count so okay so let's not Define the
225:06 - type here we can directly render over
225:08 - count get tweet likes count here because
225:11 - we don't need to worry about the ID this
225:13 - is just for the purpose of like we need
225:16 - something that's why we are getting that
225:17 - and where is our like button so here we
225:20 - can pass the count likes count as well
225:23 - likes count is equal to get likes count
225:26 - dot so it is a promise basically we have
225:29 - to await this that's why we are getting
225:31 - a lot of things there so now this is
225:33 - good toad get likes get tweet likes
225:37 - count this is what we need so it is dot
225:40 - you can see we have count so you can
225:42 - pass down the count and if we go here we
225:45 - can see we can this is a number and we
225:48 - can show the likes count here near to
225:50 - the button like this likes count here we
225:53 - have our likes count okay so it is
225:55 - saying it can be null as well so we will
225:58 - say in the likes it can be null as well
226:00 - so if this is null if the count likes
226:03 - count is null then it shows zero save
226:05 - this thing if we go to our application
226:07 - and now you can see one like and zero
226:10 - like zero like one like that's cool and
226:12 - it is sending rumors request to the
226:14 - server but okay this is okay because
226:16 - this is the only choice we have if we
226:18 - use super best clangers Library if you
226:21 - are using an orm then it will be much
226:23 - easier task for you you can directly
226:25 - join the tables and you can do a lot of
226:26 - things now in the like count here we
226:29 - want to Define it in one line or what
226:32 - I'm saying is flex item Center like this
226:35 - and we can skew it some space space X2
226:39 - and we can yeah this is looking much
226:41 - like Twitter so if you go to Twitter so
226:43 - you can see we have the 2D likes after
226:47 - this after the yeah so this is what we
226:49 - need we can make it bigger a little bit
226:51 - class name is W5 H5 and that's good
226:55 - that's looking good and now we need to
226:58 - do one more thing we we need to do we
227:00 - need to find out that if the user who is
227:03 - currently logged in is liked or not if
227:05 - the user who is logged in if liked it
227:07 - then we will show the red Earth so in
227:11 - the queries here we are getting the
227:13 - likes count so here we can also get
227:15 - export const get is liked if the Tweet
227:19 - is liked or not async and we can get the
227:22 - Tweet ID and we can so we just need to
227:24 - find out that if this row exists or not
227:27 - in the database if this row exists with
227:30 - the tivitis and the user IDs is then we
227:32 - will show the red heart otherwise we
227:34 - will load we will not show the header
227:36 - this is tweet ID it is string string and
227:39 - user ID it is also a string then here we
227:42 - can return we just need to do the same
227:45 - thing here copy it paste here from likes
227:48 - select ID count exactly we don't need
227:51 - the count we need only if this is liked
227:54 - or not we can remove the count you can
227:56 - say tweet ID is this and Dot equal we
227:59 - can say the user ID is user ID so now it
228:02 - will find the Tweet or if it it will
228:05 - find a row which satisfy these both
228:07 - parameters tweet ID and user ID save
228:10 - this thing and we can fetch this detail
228:12 - here okay const is like oh wait so if
228:15 - user has liked so is liked and import
228:19 - from library and here we will pass down
228:22 - the Tweet ID as well tweet.it and here
228:24 - we will pass down the user ID so now we
228:27 - don't have the user ID so what we need
228:29 - to do we need to find out the user ID
228:31 - then we can only know that if this is
228:33 - liked or not right so for that we need
228:36 - to create a server thing const superbase
228:39 - server is equal to Super Bass note these
228:43 - things supervised auth client create
228:45 - server supervisor and this thing we need
228:47 - the exact the exact thing which we have
228:49 - used to compose over to it so if you go
228:51 - to the composed bit server component
228:53 - here you can find out we have used this
228:55 - thing so that's the first thing we need
228:57 - to copy this paste here supervised
229:00 - client supervised server component
229:01 - supervised client import this import
229:03 - cookies in headers so that we know who
229:06 - is logged in currently import this from
229:09 - next headers because it's a server
229:11 - component now we have super based client
229:13 - and it has the user details auth dot so
229:16 - this is how user data superbased client
229:19 - auth get user so these two things we
229:22 - need here so it will find out the user
229:24 - and we will see or the other thing what
229:27 - we can do go to the because it will
229:29 - fetch the details of the user each time
229:31 - it is rendered instead of doing this we
229:34 - can get the user details here only one
229:36 - time and we can pass down the whole
229:38 - thing over here cut this whole thing
229:40 - paste it here so we only getting the
229:43 - user details one time or or we are
229:45 - sending the API request only one time
229:47 - this is what it means so yeah so now we
229:50 - can pass down to Twitter now we can pass
229:52 - down the user ID so this is our tweet
229:55 - user data is equal to or you can say the
229:58 - user ID is equal to user data dot user
230:02 - dot ID like this and if you go into the
230:05 - Tweet here we can accept the user ID as
230:07 - string we can say current user ID
230:09 - current user ID so it is much clearer
230:12 - what is this can pass down the current
230:14 - user ID like that current user ID so it
230:17 - is saying that it can be undefined so we
230:19 - will do this we can make a question mark
230:21 - here and here but now we have problem we
230:24 - have this is saying that it can be
230:26 - undefined or it can be null so if we
230:29 - will go to is liked and we will Define
230:30 - some custom logic here we will say user
230:33 - ID can be undefined so we will say if
230:35 - user ID is not available then just
230:38 - return this whole thing just like this
230:40 - so now it is good save this whole thing
230:42 - save this also if user has like so now
230:45 - we will so.log what it is giving to us
230:48 - console.log is user is like and in the
230:51 - queries instead of directly returning we
230:53 - can return that user isn't like this
230:55 - otherwise we can find out if this is
230:57 - exist or not and we can return it true
230:59 - here so const data error not this error
231:03 - we can say we can also say that a single
231:06 - the user can only like single time nice
231:10 - and we can say if data dot ID exist then
231:14 - return we can directly return if use
231:16 - data.id exist you can say Boolean data
231:19 - dot ID so if this exists then this is
231:22 - the activity is liked by the current
231:24 - user otherwise it doesn't like to buy
231:26 - the current user so now if you can see
231:28 - this is a Boolean and we will get if the
231:30 - user is liked or not so now here you can
231:33 - see fast true false false false yeah
231:35 - this is the whole thing so true means we
231:37 - have like this to it false means we
231:39 - don't have like this tweet cool so now
231:42 - we just need to show this over here we
231:44 - will pass down this thing is is user has
231:47 - liked and in the like button we will get
231:49 - this detail over here which is a Boolean
231:51 - and if this is liked then show the red
231:54 - heart or we can import the CN Library
231:57 - over here so do this to this import the
232:00 - CN helper which will merge all the
232:03 - Tailwind glasses we can say if his user
232:06 - has liked then show the color of red so
232:09 - we can set text to rows yeah now let's
232:11 - see now it is so we need to find out a
232:15 - good component so we can show here SVG
232:17 - elements so react icons so heart icon
232:21 - where is this yeah so AI feel hurt
232:23 - whichever you want you can use so what
232:25 - we what I'm saying is AI feel hurt if
232:28 - user has liked then show this fill hurt
232:31 - otherwise show this thing this is simple
232:33 - and we can remove this thing we can use
232:36 - the same here and we can say text is
232:39 - read 600 let's try this refresh this
232:42 - whole thing okay now we are not able to
232:44 - see if it is we can use the free
232:45 - property I think fill from the color
232:48 - let's give it black for some time
232:51 - because we have already liked this this
232:53 - should show a like here but it is not
232:55 - showing why is this console.load and
232:58 - let's see so it is giving us undefined
233:00 - why is that if user has liked okay we
233:02 - haven't saved this save this now refresh
233:05 - this okay so refresh this again now you
233:07 - can see we have some black control files
233:09 - here good now it is working remove this
233:12 - fill yeah so now it is red and we have
233:14 - liked this video you can see this is
233:15 - good if you hit refresh it will show
233:18 - that we have liked this to it and this
233:20 - is good but we want to remove this like
233:22 - okay so what I'm saying is we also want
233:25 - to implement the unlike feature so in
233:27 - the queries in the mutation so like to
233:30 - it here we can do the same thing unlike
233:32 - tweet unlike tweet the same thing which
233:36 - will just delete the tweet from the
233:39 - database supervised server from likes to
233:41 - delete dot equal don't forget to use
233:44 - this equal otherwise it will delete the
233:45 - whole table you should be careful doing
233:48 - this and we can say the like which is
233:51 - the like row so we can say the ID is
233:54 - like ID you don't need these two things
233:56 - we just need like ID like ID which is
233:59 - string so now it will delete from like
234:01 - stable it will delete a single like from
234:03 - our database we can remove this we can
234:05 - also remove this or we can yeah if we
234:08 - have got any error we will get any error
234:10 - in the future then we want to debug that
234:12 - also that's why we are consider plugging
234:14 - everything so now unlike tweet we just
234:16 - need to do one thing here so when this
234:18 - button is clicked when we get this user
234:21 - then we just need to do one thing if the
234:23 - user has likes so we can say if if user
234:26 - has liked then unlike otherwise like
234:28 - import this it will accept like ID and
234:30 - the like ID is so we should also get the
234:33 - like ID from our table or otherwise we
234:36 - can do one thing we can do one thing
234:38 - instead of deleting it from using the
234:40 - like ID what we can do we can do the
234:42 - same thing the treat ID is tweet ID and
234:46 - like this the user ID is user ID like
234:50 - this same same as this so now we have
234:52 - user ID and tweet ID and we are using
234:54 - this here so delete this row where tweet
234:57 - ID is this and user ID is this simple so
235:00 - we can pass down the same thing as here
235:03 - good now it is good also here we are
235:06 - getting the user but we don't need it we
235:08 - can pass down into the component but
235:11 - yeah if you don't want to pass down as a
235:13 - props so what I am saying if you go to
235:15 - the Tweet component here we are getting
235:16 - the current user ID so we can pass down
235:19 - this current user ID into the like
235:21 - button and here we can use it directly
235:23 - instead of getting the user again but
235:26 - that's totally up to you we can remove
235:28 - that thing and when this cheat is liked
235:30 - we want to refresh we want to refresh
235:34 - the like count so what we need to do is
235:36 - we can revalidate this thing so we can
235:39 - revalidate this tweet component so how
235:42 - we can do that so we will find out so
235:44 - refresh this for now if you go to the
235:47 - likes table you can see we have three
235:48 - likes one two and three if we click here
235:52 - the like is removed now you can see the
235:54 - like is removed but here the like is not
235:56 - updated we have to refresh the page find
235:59 - out okay so this is updated if we click
236:01 - here not updated but here you can see
236:04 - this is gone and here this will also
236:06 - come but because we are changing our
236:08 - window that's why it is being refreshed
236:11 - but if we do it here again if you click
236:14 - the like button this is created a row
236:16 - but it is not refreshed so we want to
236:18 - refresh this for that what should we do
236:20 - so I think we have something yeah it is
236:22 - liked but we want to refresh it
236:24 - instantly so now for the simplification
236:27 - for the simplification purpose you can
236:29 - revalidate the whole page but this is
236:31 - not recommended the another way is just
236:34 - update the UI optimistic update so user
236:38 - click the on the like button and you
236:40 - know this will be updated the row inside
236:42 - of a database so update the UI that's
236:45 - all so this is called optimistic update
236:47 - so we are optimistic that this tweet is
236:50 - successfully liked or the user has
236:53 - inserted a row into our like table
236:55 - successfully and we are sure of that so
236:57 - when this is successfully done you can
236:59 - directly like you can then and you can
237:01 - directly update your UI or another way
237:04 - is evaluate the whole page which is not
237:07 - recommended but we are going to do here
237:09 - we validate the whole page just like it
237:11 - when user like or dislike the Tweet
237:13 - trivialated the whole page so now here
237:15 - if you refresh the page everything is
237:17 - good but if we click on this you can see
237:19 - this is gone here if you like this to it
237:21 - this Tut is like if we remove this this
237:24 - is removed so now it is working like
237:26 - Char so now only one two it is like and
237:29 - which is liked by us we can remove this
237:31 - by clicking on this it is remote and you
237:33 - can see this row is removed if we like
237:36 - this tweet again a row will be inserted
237:38 - and the state is like let's log into a
237:40 - different account and see if it is can
237:43 - be liked by multiple accounts so let's
237:45 - to that also so this is my other account
237:48 - and you can see this is asking me for
237:50 - liking the Tweet so here we can see this
237:52 - is liked but not liked by us so if I try
237:55 - to so you can you can see we we need to
237:58 - login so for that if you hit refresh it
238:00 - will ask us to sign in so let's sign in
238:03 - I will put my email
238:05 - ytblogs.app gmail.com I will put my
238:08 - email
238:09 - ytblogs.hab it is my recent product
238:11 - which generates blogs Twitter Searchers
238:13 - from any YouTube video so I'm using this
238:15 - demo so let's login so I think it has
238:18 - sent me the login link let's see yeah so
238:21 - I have received my request and I will
238:23 - confirm my email and now I think I am
238:26 - signed in yeah so if I try to like I can
238:30 - like this tweet and now if I like this
238:33 - this has two likes and this is good and
238:35 - here I am a if I hit refresh you can see
238:38 - we have two likes now if I like like
238:40 - this we have two likes and this is
238:42 - working nicely we can like from multiple
238:44 - accounts and it is good so let's create
238:47 - something also this is a new tweet from
238:50 - another account hit enter and you can
238:53 - see this is a tweet from another account
238:54 - this is our username and all is good we
238:57 - can also order all the tweets you can
238:59 - see we have we should have a new tweet
239:01 - here so if we hit refresh you can see we
239:03 - have a new tweet here we are not able to
239:05 - see this data in the real time we can
239:07 - also implement the real-time feature by
239:09 - using real time updates from super best
239:12 - but that's for another part we are just
239:14 - building a basic web application and you
239:16 - can see our like feature is working
239:18 - nicely similar to this you can Implement
239:20 - a bookmark feature as well we are not
239:22 - going to do that in this video because
239:24 - this is a simple a same thing similar to
239:27 - like feature you just need to create a
239:29 - row inside your bookmarks and you can
239:31 - you have to delete Arrow from your
239:33 - bookmark table and that's all about
239:35 - bookmarking a post as well so now our
239:38 - like feature is done what we are focused
239:40 - on now we have implemented posting We
239:43 - have implemented liking and disliking
239:44 - now we will implement and the reply
239:47 - features so anyone can reply to this
239:49 - post where we have first we have showed
239:52 - all the likes count we have showed
239:54 - everything what user is doing on the
239:56 - website here you can see all the tweets
239:58 - but there is a very big problem here
240:00 - what is the problem the performance
240:02 - problem if you can see on our super
240:04 - based dashboard the requests are 14 and
240:07 - 708 which is a huge request which is
240:10 - like this can't be true so we are doing
240:13 - something wrong here what we are doing
240:15 - wrong so let's assume we have 10 tweets
240:18 - and we have 100 users 100 users are
240:21 - minimal noted a lot so let's assume we
240:23 - have 10 tweets and we have 100 users who
240:26 - have visited our web page and now each
240:29 - of the user will send each request for
240:32 - each tweet so this means each user will
240:35 - send 1000 requests every time user
240:38 - refreshes the page or if the user has
240:41 - liked any tweet then he also fetch like
240:44 - 100 requests so this is like huge burden
240:46 - on our server and we don't want that why
240:49 - it is happening because you can see on
240:51 - our main component if we are fetching
240:53 - gate tweets this is totally fine because
240:56 - we are fetching it only once and this is
240:58 - totally fine but what we are doing we
241:00 - are rendering all our tweets here and we
241:03 - are fetching again and again this thing
241:05 - so let's assume this component is being
241:07 - rendered two times so we will fetch this
241:10 - request two times so this is very bad so
241:13 - we can't do this this is a very bad
241:15 - approach we have implemented this
241:17 - approach we have seen that this is
241:19 - getting us some problem we are facing
241:21 - some performance problems now we will
241:23 - resolve this how we should resolve this
241:25 - is using chpt so in this video I will
241:28 - tell you how you can utilize crgbt to
241:30 - get all the results so basically we want
241:32 - to fetch all the tweets single time we
241:35 - want to fetch tweets with the likes
241:37 - count and we want to also assure that
241:40 - are we including or do behave like the
241:44 - Tweet so the user who is authenticated
241:46 - in the current application is liked a
241:49 - single to it or not so how should we do
241:51 - that so we can run a plain SQL query
241:53 - because super bases client Library
241:56 - doesn't provide a query like that it is
241:58 - a complex Courier so we have to build a
242:00 - plane a square query on our own because
242:03 - we are not using any orm for now if we
242:05 - use an orm like Prisma or drizzle or
242:09 - type on something like that you can do
242:12 - it with orm but here we are not using an
242:14 - orm that's why we have to define a
242:16 - single performant SQL query so for that
242:19 - as I said I am not good at writing SQL
242:22 - so I have used crgbt to help me here so
242:25 - you can see these are my SQL tables and
242:27 - I have pasted all the SQL tables which
242:29 - we created I want to fetch all the
242:31 - trades with likes count can you give me
242:33 - the best way to achieve this so it gave
242:35 - me how you can get all the Tweet switch
242:37 - like on so we don't have to fetch the
242:40 - likes count again and again for a single
242:42 - tweet so it will give us the likes count
242:44 - another thing which I said to it also I
242:47 - need to include in that query if the
242:49 - current user has liked the post or not
242:51 - so it gave me the SQL query that give me
242:54 - twitch.all so this means give me all the
242:56 - rows and it is saying that count all the
242:59 - likes as likes count and it is finding
243:02 - that if two likes or tweet ID is current
243:04 - tweet ID and likes to user IDs current
243:06 - user ID exist or not if it exists then
243:09 - user has liked the state otherwise it is
243:11 - not so this is how it is finding all the
243:14 - twists and from tweets and this is left
243:15 - joining the likes table and it is
243:18 - grouping the tweets by tweet dot ID so
243:21 - this is how it works and then I told
243:23 - jgbt to order it by latest tweet on the
243:27 - first of our web page so it gave me
243:29 - order by so we can copy this query and
243:32 - you can go to your SQL editor and you
243:35 - can create a new query and you can paste
243:36 - it here and I have checked it it is
243:38 - totally correct and if you run this you
243:40 - will find all the tweets but for that
243:42 - you have to get the current user ID so
243:44 - let's assume our user is something
243:46 - random so this means this user doesn't
243:48 - exist so if we run this query then you
243:51 - can see we have a input a few values so
243:54 - let's find out the correct view ID here
243:56 - so for that I have recently query the
243:59 - same thing so what we I can do I can
244:02 - show you this is my user id we will pass
244:05 - this your user ID to the function and
244:07 - this then this to query so this is a big
244:10 - query you can see and now if we run this
244:12 - we can find out all the tweets with the
244:15 - latest tweet on the top this is new to
244:17 - it from another account and we can also
244:19 - find out the likes we can also find out
244:22 - if the current user has like this post
244:24 - or not so if you go to bottom you can
244:26 - see we haven't like this and we can see
244:28 - if we like this tweet you can see now we
244:30 - have liked and if you run this query
244:32 - again we should be able to see true here
244:35 - so you can see we are now getting true
244:37 - so this query is working so now we have
244:40 - to run this query on user main page so
244:43 - here instead of running a lot of queries
244:45 - again then again we will only run one
244:47 - query and it will improve our
244:49 - performance so for that to connect this
244:51 - database to our application we need
244:54 - something called PG pole so if you
244:56 - search Pages pool postgres Circle pool
244:59 - on the internet you can find out this
245:01 - package and we will use this package to
245:03 - query our database like this so let's
245:06 - install this let's remove this thing
245:08 - because you can see we are sending a lot
245:10 - of requests to the server and it is very
245:12 - bad we don't want to send too many
245:14 - requests to our server so we will
245:15 - install PNP install PC pool in the
245:18 - source here we will inside the DB in the
245:21 - utils not in the utils yeah you can
245:23 - create here PG pool or you can create a
245:26 - new folder called DB here in the DB you
245:28 - can say index.ts and here you can Define
245:31 - your poll so all the details you can
245:33 - read and let's go to GitHub and find out
245:36 - how we can use this pool so PG pool we
245:38 - have to also install the PC here so
245:40 - let's copy this and install everything
245:42 - we need PG pool and PG both the things
245:45 - we need and then we will use physical to
245:48 - create our instant database instant and
245:50 - then we can query our database so let's
245:52 - copy this also instead of variable we
245:54 - will use const you can supply custom
245:56 - client Constructor if you want to use
245:58 - the native postgresq okay so we don't
246:00 - want this thing we also don't want this
246:02 - we also don't want this so we need to
246:04 - Define all the options here import poll
246:07 - from PG pool like that you can see we
246:10 - don't have the types that's why it is
246:12 - not showing us Auto completion so we
246:14 - will install the types pnpm install PG
246:18 - pool types so it we are installing the
246:20 - PG prototypes as Dev dependencies as you
246:22 - can see now if you hover over it you can
246:25 - see other types and if you try you can
246:28 - see all the stuff here so the database
246:30 - is postgres and the connection is string
246:33 - which we will get from the database node
246:36 - EnV we need it from import okay so we
246:39 - will Define process dot EnV tote our
246:42 - connection string so what we will do
246:44 - database connection string so I will go
246:48 - to my EnV which is confidential and here
246:51 - I will Define my database connection
246:53 - string and you can go to supervis on the
246:56 - project setting in the database here you
246:58 - can find the node.js database connection
247:01 - string copy this thing paste here and
247:03 - here you will here I will reset my
247:05 - password I will regenerate my password
247:07 - so that it is good confidential and now
247:10 - I will paste my password here so now
247:12 - this is my database connection stream I
247:14 - will copy this and I will use this here
247:16 - just like that and I can Define the
247:17 - other options as well allow exit on idle
247:20 - true now we have a pool so how to query
247:24 - okay so let's see all the things SSL is
247:27 - true yeah so now we can query like that
247:30 - poll dot connect then and then catch
247:32 - like this play nice with a syncope so we
247:34 - want to use a single bit so let's use
247:36 - that also so what we will do we will
247:38 - export it export const pool so pool dot
247:42 - connect and then we can use this so it's
247:45 - instead of directly exporting this we
247:47 - will Define our client and then we will
247:49 - use this cons DV is equal to await or
247:52 - instead of doing this we can use this
247:54 - thing this is a self volume function
247:56 - const poll is we already have a pole and
247:59 - then we will say pool dot connect okay
248:02 - this is good and then we can find the
248:04 - result and all the things here your new
248:07 - favorite helper method so we can
248:08 - directly call this also what you think
248:11 - because it's so common to just run a
248:13 - query and return the client report
248:15 - afterwards visible has this built in so
248:17 - it directly curages that's good so let's
248:20 - do this one thing first export this pole
248:23 - and then we will use this export this
248:25 - for now so we will go to our main
248:27 - component inside here where we are
248:29 - getting all the tweets so instead of
248:31 - this we need to run the query so return
248:34 - is equal to await we will import the
248:37 - tool from DB and then we will directly
248:39 - query the stuff we will directly query
248:42 - the stuff so like this select dollar one
248:44 - means the distinct text S name so we
248:47 - will copy our whole query which is this
248:49 - copy this thing we'll use this you can
248:52 - see to install star and here we are
248:55 - using the current user ID so we want to
248:57 - pass this as a so we will pass this
248:59 - thing like this so if you go to current
249:02 - user ID here you can see this is our
249:04 - current user ID and in the example of PG
249:07 - pool you will here you can see this is
249:09 - over so we can ask share GPT to return
249:12 - the query with the PC pool so we can say
249:14 - return the query with using the PG pool
249:19 - and random uuid variable so you can see
249:23 - this is a connection string and this is
249:25 - dollar one so we will set instead of
249:28 - this this is our dollar one which is the
249:30 - parameter and then we can directly query
249:33 - like that don't forget to release the
249:35 - pool so this is how you can leverage
249:37 - chair GPT here so it will copy the whole
249:39 - thing paste it here it will also copy
249:42 - the query yeah so this is our query and
249:44 - we are are passing the current user ID
249:46 - and here we can get the current user ID
249:48 - as well which is a string here over
249:50 - query and here we are getting everything
249:53 - so now if we go to main component here
249:55 - you can see this is complaining this is
249:57 - complaining that you have to get the
249:59 - user ID as well so we can do that that's
250:02 - not a problem so what we can do we can
250:05 - pass the user data over here so user
250:08 - data dot user dot ID like that and we
250:10 - can cut it from here we can paste it and
250:13 - here instead of this we can say this is
250:15 - a string and when the yeah so we can
250:19 - Define two queries here so query with
250:21 - current user ID and query without
250:25 - current user ID like that we can copy
250:29 - the whole thing we just need to change a
250:30 - few things we need likes count but we
250:32 - don't need the user is like simple so we
250:35 - can run this simple query so what we
250:37 - need to do is if the current if the
250:39 - current user ID exists then query so we
250:42 - can Define the query temporary here
250:44 - which is a string let query is string or
250:47 - we can say this is QD without current
250:50 - user ID and if the current user ID exist
250:54 - then we can say the queries query with
250:57 - current user ID and then we will run the
250:58 - query we will pass the parameters and we
251:01 - will process the query results like that
251:03 - pull dot end and that's all what we are
251:05 - doing now let's remove this four now we
251:08 - don't need this we don't need this as
251:10 - well for the moment let's comment
251:12 - everything out and we will see if this
251:13 - is working or not so pnpm brand there
251:17 - and we should be able to see something
251:19 - for now so now if you go to localhost if
251:21 - you try to refresh we should be able to
251:23 - see something here yeah something went
251:25 - wrong can you use a pool after calling
251:27 - and on the pole so something went wrong
251:29 - error password authentication failed for
251:31 - user postgres okay okay password
251:33 - authentication has failed so why is that
251:36 - this is over pool database okay so we
251:39 - don't need this database thing here we
251:40 - can directly use without connection
251:42 - string like that can connection sync
251:45 - directly and from PG yeah so now if you
251:47 - try to hit the refresh and we will see
251:49 - what is happening here we get something
251:51 - now authentication field executing query
251:54 - authentication failed for user postgres
251:56 - this means over connection string is not
251:58 - correct so let me correct my connection
252:01 - a string so to check if this is
252:02 - connecting or not we will first let me
252:06 - reset my database password again reset
252:08 - the whole password and I will use here
252:11 - again good pool mode
252:14 - 6534 okay so connection string is this
252:17 - connection pulling is this let's copy
252:19 - this thing this is for the connection
252:21 - pooling I think we need to use this we
252:23 - can try it we can see what is happening
252:25 - refresh this yeah we are okay so now we
252:28 - got this okay so after changing we have
252:31 - get everything we want you can see we
252:34 - are creating ID text profile ID created
252:36 - it updated likes count and user has
252:39 - select or not and that's totally awesome
252:41 - and we can just return this whole whole
252:43 - query result from here so if this
252:45 - doesn't exist we can return nothing and
252:48 - if it exists we can return result.rows
252:51 - like that so what you need to is you
252:53 - need to use this pool here this one
252:56 - connection string for connection polling
252:58 - not this one this one and then it will
253:00 - work and now we are efficiently curing
253:03 - everything okay but it is still getting
253:05 - some problems like cannot use a pool
253:07 - after calling and on the pole now we can
253:10 - remove this thing and we can modify our
253:12 - treat type and we will return everything
253:14 - so here we are returning all the tweets
253:17 - and here we will render everything we
253:18 - need so restored error is so if this is
253:21 - error so we can return the error inside
253:23 - error we can return a message DB queuing
253:26 - failed and here we are returning all the
253:29 - rows restore data and we can wrap this
253:31 - whole thing in the data like that we can
253:34 - use a sync and await here but we are not
253:36 - using that for some reason because jgbt
253:39 - go to us this thing but yeah that's also
253:42 - possible here we can for this moment we
253:45 - can say this any but this is not a good
253:47 - idea so if you come here if you refresh
253:49 - this nothing is visible and we are still
253:51 - fetching all the things here we don't
253:54 - want these things likes count tweet tote
253:57 - likes count and and the other thing is
253:59 - which we are getting is in the queries
254:02 - you can see Twitter stored lights count
254:03 - and otherwise this user has liked so
254:06 - tweet. user has liked so this thing but
254:10 - there is a challenge is that this
254:13 - doesn't exist so we will wrap this whole
254:15 - thing in the Boolean here you are saying
254:17 - tweet type but we will Define any for
254:19 - the moment so it doesn't show us any
254:21 - error save this whole thing rest dot
254:24 - data let's lock this thing so we can see
254:26 - if we are getting something on the
254:28 - client not getting we are not getting
254:30 - anything let's restart the whole server
254:32 - sometime you may need to restart the
254:33 - server to get things working okay so we
254:36 - are not getting anything and it is still
254:38 - sending a lot of requests to the server
254:40 - which is auth request we are sending a
254:43 - lot of oauth request why is that do we
254:45 - in the like button so in the like button
254:48 - queries index console.log let's lock the
254:52 - result as well so you can see what is
254:54 - happening result yeah something is
254:56 - working here if we are getting the
254:57 - result basically result of rows then why
255:00 - it is not being shown yeah we are
255:02 - getting the result as well so return the
255:04 - data okay okay okay okay okay so the
255:07 - problem is if you visit the poll
255:08 - documentation you can query like that so
255:11 - we will use this async a bit note this
255:13 - not testing I don't like this too let's
255:15 - cut the whole thing const result is
255:18 - equal to oh wait hold dot query because
255:20 - it is a promise and we can see now the
255:23 - query result and we can wrap the whole
255:25 - thing into try cage block so if
255:27 - something went wrong we can console Dot
255:30 - Lock error otherwise we can return the
255:33 - data as rest dot you can see rows
255:36 - because full name is not defined so why
255:39 - is that cannot read the property of full
255:41 - name this is this okay so we want to
255:44 - also fetch the whole profile of the user
255:46 - so we can ask the chair GPD to modify
255:48 - our our queries so we also want to fetch
255:52 - the user author details as well so it
255:57 - will say that profiles.user yeah so we
255:59 - can now face the whole thing here as
256:01 - well so let's copy this thing Ctrl D
256:04 - Ctrl V remove the extra comma and it is
256:07 - good so you can see profiles.username so
256:09 - we are getting the profiles.username as
256:11 - well we are getting profiles dot full
256:14 - name as well so if you save this now it
256:16 - should not complain good now it is not
256:19 - complaining so here if we refresh this
256:21 - thing because something is wrong here
256:22 - missing from close from enter okay okay
256:25 - so we haven't copied it correctly so
256:28 - left join joins profile so we have to
256:31 - join the profile table as well so we are
256:33 - left joining the Tweet table left
256:35 - showing likes join and group by yeah so
256:39 - we have to correctly fix our query Group
256:41 - by and then order wire so this is a big
256:43 - query you can see but yeah we have to do
256:45 - this now we are getting something we are
256:47 - getting something we are getting text
256:49 - username full name everything directly
256:52 - without any hassle so what we can do
256:54 - here we have to modify this thing here
256:57 - we are saying tweet.profile so instead
256:58 - of profiles we can directly save this
257:01 - thing now it's good you can see we are
257:04 - directly getting everything so if we hit
257:06 - refresh this is being rendered one time
257:07 - but the likes count is still not visible
257:10 - why is that tweet dot likes count okay
257:13 - so this is Lex count now it is visible
257:15 - you can see and if we try to click here
257:18 - you can see this is updated if we try to
257:20 - click this is updated and we are also
257:22 - not bombarding over database with a lot
257:24 - of requests so if you hit refresh we now
257:27 - have something 16 000 or 17 000 request
257:30 - in the last 68 minutes but it will now
257:34 - we have removed every complexity from
257:36 - our application like a lot of request we
257:38 - were doing in the last video so this is
257:40 - the only time we have to specifically
257:43 - query a single SQL query otherwise we
257:46 - don't need to do this okay so you can go
257:49 - here and you can refresh this a hell lot
257:51 - of time and this will note you can see
257:53 - 4309 if you hit refresh if you try to to
257:56 - refresh this it is not changed a lot you
257:59 - can see this is cool so now we can like
258:01 - this tweet remove or like and here as
258:05 - well okay so so if we are not logged in
258:07 - we are not able to see any tweets that
258:09 - is not the way I want so if I open this
258:12 - tab in the new tab this is not we are
258:15 - not able to see any why is that syntax
258:18 - error at or near from so this is a bad
258:21 - thing like not using an orm because it
258:24 - will make our life complicated as you
258:26 - can see here qdb dot current user ID if
258:29 - current user exists then QD is qdv so
258:32 - let's see what is the problem we are
258:34 - facing here profiles.full name what is
258:37 - the problem here we are getting this is
258:39 - the same likes dot tweet ID profiles
258:42 - everything seems good to me let's remove
258:45 - this current editing and let's see if it
258:48 - we are still getting a problem yeah so
258:50 - we will fix this problem in the next
258:52 - video I think we have done a lot of
258:54 - stuff in this video so I have explained
258:56 - you how you can optimize your web
258:57 - application so that a lot of users can
259:00 - use it many time and you will not
259:02 - bombard your server with a lot of
259:05 - requests from clients now if you refresh
259:08 - you can see we are not bombarding our
259:10 - server facing some problems with this
259:12 - query without current user ID so what
259:15 - was the problem we are using extra comma
259:18 - here and that's why we are getting the
259:19 - problem so we are selecting The Columns
259:23 - and we are then joining and grouping and
259:27 - ordering everything doing so it's good
259:29 - so here we can Define our query so our
259:31 - query is basically this one so if the
259:34 - query is basically if the current user
259:37 - doesn't exist then our query is poll dot
259:39 - query is query without current user ID
259:43 - that's our query so it is yeah and if
259:47 - the current user exists then our query
259:49 - will be query with current user ID and
259:52 - then we will pass this current user ID
259:55 - with our query okay so this is for the
259:57 - parameter this taller one then we can
259:59 - await this query here we can avoid this
260:01 - query and here we have our result and
260:03 - then we can save this thing and now we
260:06 - have all the tweets here you can see and
260:08 - if we go to a incognito mode then if we
260:11 - try to see here still we can see all the
260:14 - tweets we can see everything is working
260:16 - nice and good so this is a little bit of
260:18 - complex query but yeah with the help of
260:21 - jlcpt we can query our database
260:23 - efficiently so this is what jpt can do
260:27 - now what we need to do is here we can
260:29 - also Define an error so return error
260:33 - something wrong with curing the DB like
260:37 - that now save this now this is good so
260:39 - we are rendering everything and
260:40 - everything looks good to me so now what
260:42 - we need to if you go to the like button
260:45 - so everything is good so you can like we
260:48 - can dislike we are not bombarding our
260:50 - server with a lot of API requests you
260:53 - can see this is still the same yeah what
260:56 - requests are a lot of fourth requests we
260:58 - are sending why is that let's find out
261:01 - there is a reason so this is a homework
261:03 - for you what you need to do you need to
261:05 - remove this oath here and you can pass
261:08 - down the user ID from the tweet and from
261:11 - the main component so we we have the
261:14 - user data we have the user ID you just
261:17 - need to pass down the ID from here you
261:19 - need to pass down the ID through the
261:22 - like button enter so it's that's how you
261:24 - can also remove a lot of like and what
261:27 - what we can say the oath request to the
261:29 - Super Bass server that's all now our
261:32 - application is looking good where is
261:34 - this so this is our application we can
261:36 - take to it this is a latest tweet you
261:39 - can tweet and you can see this is being
261:41 - rendered here instantly this is is super
261:43 - fast okay now what feature we can
261:46 - implement we need to implement our reply
261:48 - functionality so in the next video we
261:50 - will implement the reply functionality
261:52 - what we need to do is similar to Twitter
261:55 - so let's close everything if we go to
261:57 - Twitter so here is a tweet and if I
262:00 - tweet something here you can see if I
262:02 - click on this button it will open a new
262:04 - model and now I can reply the to this
262:07 - Suite so same thing we are going to do
262:09 - when we I click over here it will open a
262:12 - model and then I can type my reply after
262:15 - this if I click on this tweet it will
262:17 - open a whole new window and then I can
262:20 - see the replies below so here you can
262:22 - see this is our application and if you
262:24 - go to the here localhost 3000 and we are
262:27 - running our application nicely but if
262:29 - you go to the queries part we are doing
262:31 - all these things so this is looking bad
262:34 - and there is a great chance that you
262:36 - might do a typo here like we heard it in
262:38 - the last part like if you type a comma
262:40 - here and then it will break your goal
262:43 - thing and you are not able to get this
262:45 - why it is happening so if you now go to
262:47 - your application you can see something
262:49 - went wrong with the server right so we
262:51 - don't know what went wrong and this is a
262:54 - very small typo and we can't debug this
262:56 - thing very quickly that's why it's
262:58 - always good to use in orm that's why we
263:01 - are going to use drizzle orm because it
263:03 - is a typesafe orm you can go to the
263:07 - drizzle warm website you can go to the
263:10 - documentation and you can find out that
263:12 - it's very good over so we are going to
263:14 - use this so first of all let's click on
263:16 - pnpm and install all the packages we
263:19 - need here close this thing pnpm install
263:22 - all the stuff we need so we will create
263:24 - a schema.ts file so this is our source
263:27 - directory inside the DB houses TV thing
263:30 - okay so we will create a new file called
263:33 - schema.ts here we will Define all our
263:35 - schemas which we have created in the
263:38 - supervised so you can see we have a few
263:40 - tables and we need to now create all the
263:42 - tables here this is a simple part but a
263:45 - repetitive part and you can use share
263:47 - GPT to do this also firstly so how to do
263:50 - that using this crcpj so let's go to
263:53 - chair GPT and here we have our schema so
263:55 - if you are watching this part then you
263:57 - also must have watched the previous part
264:00 - in which we have created all the tables
264:02 - so if you go to the SQL editor so create
264:05 - table you here we are creating all the
264:06 - tables so now what we need to do we need
264:08 - to create our schema using all these
264:11 - tables okay so let's copy this thing and
264:14 - this is my SQL tables these you can say
264:19 - these are my SQL tables we can copy
264:22 - everything so this is our profile table
264:25 - and we can remove this row level thing
264:27 - here this is already done so we can
264:30 - remove this this is unnecessary we don't
264:32 - need this thing in our schema file now
264:34 - we will tell this jgpt to generate over
264:38 - schema so generate the orm schemas as
264:42 - you know that JDP don't have the latest
264:44 - data so what we will do generate the RM
264:46 - schema From Below talks so we will paste
264:49 - the relevant information here so we'll
264:51 - go to chat GPT or we will go to the
264:53 - result one because we are using postgres
264:55 - SQL here you can go to redox not here it
264:59 - is directly yeah so we'll copy the whole
265:01 - thing so what I want to do is this is
265:03 - redirecting us to so I want to copy them
265:07 - so this is a postgresql so you can see
265:10 - these are all the docs here so just Ctrl
265:12 - a Ctrl C so we have copied all the
265:15 - things and we will paste this and now we
265:18 - will send this so you can see there was
265:20 - an error generating this much because
265:22 - this is very big so we just need the
265:24 - relevant data what is the relevant data
265:27 - the column types is relevant data okay
265:30 - the this is relevant data so we can copy
265:32 - the whole thing so first of all what we
265:34 - need to do is we have did a mistake here
265:36 - the chair GPD only accept 4000 tokens so
265:38 - we'll fix this thing we will copy
265:40 - everything from here and we will again
265:42 - from docs below and we will only paste
265:45 - the relevant docs nothing much so let's
265:47 - paste this now we have this thing go up
265:50 - to the top here we have the things
265:52 - schematic layers this is our main thing
265:54 - this is also relevant yeah this is
265:57 - relevant index is foreign that's all we
266:00 - need and you can now send this and it
266:01 - will generate all the tables for us you
266:04 - can see
266:05 - is generating all the schemas so we
266:08 - don't have to write all these things by
266:10 - ourselves it's like a productivity hack
266:13 - you can use this and it's good I will
266:14 - tell you if this has any error we will
266:18 - also fix this so now we just need to
266:19 - copy our whole thing copy the whole
266:21 - thing paste here result or MPG core so
266:24 - pgnm
266:26 - popularity so we don't need this
266:28 - populated thing here so we can remove
266:29 - this the uuid column we also don't need
266:32 - this we can just pass the uuid so this
266:36 - may have some error so we are fixing
266:37 - this we are checking if chair TPT has
266:40 - done anything wrong
266:41 - so this is good PG table profiles ID is
266:44 - uuid which is a primary key it's totally
266:46 - okay and we can also pass Auto generated
266:49 - default random so it means it is
266:51 - generated default so now we can copy
266:53 - every ID using this thing uuid primary
266:56 - key default random updated it timestamp
266:59 - defined now not null okay username so
267:02 - this unique constraint is not available
267:04 - in the drizzle noun so we can remove
267:06 - this also instead of uid column we can
267:09 - replace it with only uuid now you can
267:12 - see username dot now we also don't have
267:16 - this check thing so we can remove this
267:17 - it's totally okay but we can say we want
267:20 - not null full name also not null we will
267:24 - again cross check with our original
267:26 - schema so you can go here ID updated
267:29 - username and full name these four things
267:31 - ID updated username and full name cool
267:34 - we can remove this this one also we have
267:37 - tweets which is default random text is
267:40 - not null profile ID and the refresh to
267:43 - the profile IDs profiles.id so this is
267:45 - saying that a profile can have many
267:47 - tweets just like that and now here we
267:51 - can also Define some react Convention of
267:54 - for naming so instead of profile
267:56 - underscore ID we can say profile and
267:59 - then capitalize and then D so profile it
268:03 - it's the best practice to do like that
268:05 - profile ID create it updated it so the
268:09 - database will be saved or what I'm
268:12 - saying is the data base column will be
268:14 - named after this but in the application
268:18 - we will use this for our type script
268:20 - generation so it's cool we have Hastings
268:23 - so it's also cool default random the
268:26 - hashtag continental and then we have a
268:29 - PG table called tweet hashtag a tweet
268:32 - can have multiple hashtag and a hashtag
268:35 - can be part of multiple tweets so you
268:37 - can see we have a table tweet hashtag so
268:40 - instead of saying to it hashtag we can
268:42 - do this do it hashtag this is a table
268:45 - tweet ID hashtag ID and then this one
268:49 - this is cool to eat hashtag primary key
268:52 - so we will say that this is tweet ID and
268:55 - this is hashtag ID so it is creating a
268:58 - table which has access to the thing that
269:01 - which tweet has which hashtag okay so we
269:04 - can if we want to get all the tweets of
269:07 - a single hashtag then we can query the
269:10 - table you can say give me all the tweets
269:12 - of this particular hashtag ID we can
269:14 - create this table and then we can join
269:17 - the Tweet table with each ID of the
269:20 - Tweet is equal to the student ID so it
269:22 - will join the tweetable and it will give
269:24 - us all the tweets so that's how we can
269:26 - do that here we have our replies replies
269:29 - why it is complaining so let's see we
269:31 - have uid as a primary key we have text
269:34 - that's good user ID
269:36 - son ordinal references profile dot ID so
269:40 - it means yeah so who is the user who
269:44 - have replied okay okay let's see we have
269:46 - tweet ID we here we can instead of
269:48 - username we can say user capital I tweet
269:51 - Capital ID reply Capital ID over
269:54 - productivity after this after creating
269:57 - this schema is going to be very good
269:59 - this is one time thing and you will be
270:01 - very much productive after implementing
270:03 - this because previously we were doing
270:06 - all the row things the native things
270:08 - like queuing the database from raw
270:10 - queries that that is very bad so it
270:13 - should always use orm so I thought why
270:15 - not use overm in this tutorial that's
270:18 - why I'm creating this part also when
270:20 - integrating the one part okay so replies
270:22 - text user ID tweet ID reply ID you can
270:25 - see this is itself reference note this
270:28 - you can see self reference a user can
270:31 - reply to okay so we have ID tweet so if
270:35 - we comment this out we yeah it will work
270:37 - so this is not working it is saying that
270:39 - it can't refresh the current table so if
270:42 - we go to the documentation here you can
270:44 - find out an example that for sure which
270:47 - is self-reference you can see that
270:49 - sisters City ID and it is self
270:52 - referencing foreign key and that's cool
270:54 - you can see country ID is countrys.id
270:57 - inline foreign key that is good country
270:59 - ID thesis and sister city ID which is
271:02 - referencing to same table and EPG column
271:05 - and then so replied is also referencing
271:09 - to the same table which is replies and
271:12 - it is saying that reply ID is this do we
271:15 - need the reply ID basically yeah because
271:17 - a reply can also be reply so this is the
271:20 - confusing part let's omit this part I
271:22 - don't think we need the reply why do we
271:24 - need the reply yeah we don't need the
271:25 - reply reply user a tweet can have many
271:29 - replies and then a reply can have more
271:32 - replies also that's why we are doing
271:34 - this yeah that's why we are doing this
271:36 - so if the reply ID exists that means it
271:40 - is a reply for another reply if it
271:43 - doesn't exist this means it is a top
271:46 - level reply if it is existing it means
271:48 - it is a down level reply good so let's
271:51 - do this also now you can see it is gone
271:54 - we are referencing the
271:55 - same table so we will insert this reply
271:58 - ID whenever we are replying to a reply
272:01 - that's how it is work it will work now
272:04 - we are getting the replies and we are
272:05 - constructing the foreign Keys which is
272:08 - columns foreign columns yeah but we
272:10 - don't need this thing we are already
272:11 - referencing things here reply user
272:14 - foreign key columns reply dot user ID
272:17 - profiles.id explicit foreign key with
272:19 - one column explicit foreign key with
272:21 - multiple columns in line four and key so
272:24 - this is a explicit foreign key and this
272:26 - is inline foreign key we can choose to
272:28 - use either of the one we don't need to
272:30 - do both of them so we are referencing
272:32 - one two three so this table has three
272:35 - reference so a user can have many
272:37 - replies a tweet can have many replies
272:40 - and a reply can have many replies so
272:42 - this is what these three references mean
272:45 - and we don't need this extra hustle of
272:48 - creating this explicitly if you don't
272:51 - want to Define this inline you can do
272:53 - that so we will remove now testing and
272:55 - it's going to now we have likes table
272:57 - which is likes that's good default
272:59 - random uuid which is user ID and it is
273:02 - referencing to the profiles.id which is
273:04 - this one that's good tweet ID is this a
273:07 - tweet can have many likes that's why it
273:10 - is referencing to tweet ID so we can
273:13 - instead of saying user we can say user
273:15 - ID tweet IDE you can see we have to do a
273:19 - lot of fixes after behaviors shared GPT
273:21 - jgpt will give us the initial boost so
273:24 - we don't have to write a lot of text
273:26 - here basically and we are creating a
273:28 - index over here why we are creating
273:30 - index because sometimes it is faster to
273:33 - get the data if we have created the
273:35 - indexes but it is not required but yeah
273:37 - we can create that so let's create a
273:39 - index on user ID and tweet ID so we can
273:42 - query them faster so here you can find
273:46 - out about the indexes so if you search
273:48 - index you know this index you can say
273:51 - index and unique index two things we
273:52 - have here okay so I think it is so we
273:55 - need to import the unique index unique
273:57 - Index right so now we have our where is
274:01 - this likes yeah so we have this unique
274:03 - index over here unique index
274:06 - which is like can only be like is unique
274:10 - basically the user cannot like a tweet
274:13 - more than one so it means with the same
274:16 - user ID or tweet ID more than one row
274:19 - can't be existed in this table that's
274:21 - why we are creating a unique index like
274:23 - unique and we can name this thing
274:26 - likes user ID tweet ID index and here we
274:32 - can say unique like index dot on and
274:36 - here we can Define our columns here so
274:39 - we can say like stored first one is user
274:42 - ID likes tote and the second one is
274:44 - tweet ID like that so we have defined
274:46 - our index selected awesome here we have
274:49 - our bookmarks it is PG table
274:51 - the same thing here we need to do user
274:54 - ID tweet ID created it it is referencing
274:58 - to the correct table good it is also
275:01 - Continental so we can say it can't be
275:04 - null so this bookmark feature is same as
275:06 - the like feature nothing much so you can
275:08 - also okay so we are already saying it
275:10 - convenal that's good this reference
275:12 - thinks continual basically yeah this
275:15 - reply can be null but it can't be null
275:16 - okay so this both can be null but yeah
275:19 - these both can Minal but they can't be
275:22 - null both at same time because we need
275:25 - to fetch we need to find that if this
275:27 - tweet has some likes or if this supply
275:30 - has some replies Good now we have some
275:33 - likes over here and we need to do the
275:35 - same thing like we have did for the like
275:37 - so we can just say bookmarks we will say
275:40 - bookmarks unique because as I said in
275:44 - the last part that bookmark and like are
275:47 - the same thing unique bookmark index
275:49 - then we can say bookmarks user ID tweet
275:53 - ID index ID user ID tweet ID created it
275:56 - okay so you can see this is how we have
275:59 - created all of our tables
276:02 - and now the migration part comes we need
276:05 - to generate the SQL from this and we
276:07 - need to sync our database so for that we
276:10 - will use again result docs here you can
276:12 - find out how to connect to our database
276:15 - like this we just need to use this we
276:18 - are already using the pool which you can
276:20 - see and then we just need to pass you
276:23 - can remove this thing import the drizzle
276:25 - import the drizzle from the result
276:27 - postgres import the pool from PG install
276:30 - everything PNP install PG okay I think
276:34 - we need to also install the types over
276:36 - here we have connection string and then
276:38 - we can use over overm just like that's
276:41 - DB select from users and it is simple
276:43 - let's reload our window so we can see
276:46 - what is going on we need to export it
276:47 - also yeah we need to install the type
276:49 - PMP install save there at the rate
276:53 - thanks slash PG so now we have types we
276:56 - reload it will it is gone and it's good
276:59 - so now we have our SQL DB which is a orm
277:03 - and we can now efficiently query so you
277:05 - can see DB dot we have all the auto
277:07 - completion beautifully Auto completion
277:09 - now our productivity will be much faster
277:11 - and we will be able to catch error much
277:15 - faster so we don't need to do this now
277:17 - we can also remove comment it out we
277:20 - will use this riff for reference when we
277:22 - create the same query using the treasure
277:25 - worm so we have seen three methods first
277:28 - of all we have used Super Bass client.js
277:31 - library to fetch all the tweets and to
277:33 - mutate or insert like row and doing all
277:36 - the stuff then we have used plain SQL
277:39 - now we are using an orm so these three
277:42 - different approaches and you can choose
277:44 - from last to whichever you want it is
277:47 - not like must for you to use this result
277:51 - if you want to go with Prisma you can I
277:53 - just want to explore this new thing
277:55 - that's why I am creating a tutorial for
277:57 - it and let's see
277:59 - we have to eat hashtag table it is good
278:01 - you can see many too many this is a
278:03 - many-to-many relationship between tweet
278:05 - and hashtag otherwise we have one too
278:08 - many relationship like a tweet can have
278:10 - many likes a two it can have many
278:11 - bookmarks a reply can have many replies
278:14 - a tweet can have many reply so this is a
278:17 - one to many but a tweet can have many
278:19 - hashtags and a history can have many
278:21 - tweets so this is a many-to-many
278:23 - relationship good so now we have over DB
278:26 - now we will create another script for
278:28 - migrating over database migrate.ts here
278:31 - we will do we will Define a function
278:33 - which is main function we will call it
278:35 - async and what we will do await migrate
278:39 - so we need to find a way to migrate our
278:42 - database so if you go to migrations here
278:45 - you can find out how to utilize the
278:48 - migrations so we need to install the
278:50 - drizzle kit which we have already did I
278:52 - think and now we can use this thing
278:54 - await migrate and import the migrate
278:58 - from here import it import these two
279:00 - things import the DB now we have DB okay
279:03 - so it is migration folder of migration
279:06 - folder is our Reserve when we will
279:08 - generate the migrations it will create a
279:11 - new folder digital and in which we have
279:13 - our migrations node PG database record
279:17 - string yeah so white is complaining
279:19 - let's see diesel SQL let's use this Max
279:22 - connection and also the postgres thing
279:24 - here over here so I think we need to we
279:26 - need distinct postgres and then here we
279:29 - can use the postgres and we have other
279:32 - things here database yeah connection
279:34 - option so this is the database string we
279:37 - need I think so let's connect our
279:39 - database here we can see this is using
279:41 - pool and here it is using postgres so
279:45 - two things we have here but at the end
279:47 - we have database let's use the
279:50 - process.env okay it doesn't need the new
279:53 - thing and now let's see what the things
279:55 - you have connection host host name
279:58 - password everything it has we want to
280:00 - use connection let's go with the
280:03 - database yeah and we will pass okay I
280:06 - think it accepts a connection string
280:08 - like that and it accepts all the can say
280:11 - as a string and we can pass down all the
280:13 - stuff here we can say Max connection is
280:16 - one so we have our SQL can pass down
280:19 - over SQL here inside the drizzle which
280:21 - we will import from postgres CS yeah and
280:24 - now it is not complaining it is good
280:26 - postgres JS database and we will run
280:29 - this main function we will say main dot
280:32 - then process dot exit I will say
280:35 - console.log migrations running
280:38 - console.log migration finished cool so
280:42 - now we have our drizzle warm with a
280:44 - schema proper with proper SQL DB and
280:47 - with migration system now we have to do
280:50 - few more things if you go to the
280:52 - package.json in the scripts you need to
280:55 - Define some script over here so we can
280:56 - say generate so it will generate over
280:58 - all the migrations file so for that to
281:01 - generate all the migrations file you can
281:03 - use test result kit generate PC so where
281:07 - you can use result kits and net PC it
281:09 - will generate all the migrations file
281:10 - and then we will use the migrate to push
281:13 - the migrations to our database so here
281:16 - we can say we will use one something
281:19 - code 1 to run over script one dot sh
281:22 - so it will automatically handle all the
281:25 - stuff holders like getting the
281:26 - environment variables and handling the
281:29 - type script stuff and all the things so
281:31 - you don't have to worry about anything
281:33 - you just need to use npx or pnpx
281:37 - whatever you want npx1 you can say run
281:39 - and then you can copy the migrate copy
281:43 - path the migrate so instead of this we
281:46 - can directly say source code to Source
281:49 - in the library in the DB migrate.ts so
281:52 - it will run over migrations so first of
281:54 - all let's try this let's try to generate
281:57 - the schema SQL from our schema so we
282:01 - will type over here we will say nbx you
282:04 - can type pnpma as well pnpm run what is
282:08 - our description rate okay so it is
282:10 - failed result config.json doesn't exist
282:12 - so we have to define the configs of this
282:15 - thing let's import this as well in the
282:17 - root of 4 directory create a result
282:19 - config.ts and paste this stuff so we can
282:23 - find out we can Define our schema in the
282:26 - source in the library in the DB we have
282:29 - our schemato
282:31 - schema.ts and where we want to Output
282:34 - the SQL we can say it isn't now it's
282:36 - good it will now do the work so let's
282:39 - run the command again pnpm run generate
282:41 - yeah so now we have something and it is
282:43 - showing us that transforming const to
282:46 - the configuring environment is not
282:48 - supported yet so it is saying that no
282:50 - config path provided
282:53 - result.config.ts let's see what is
282:55 - happening errors are if you want to have
282:57 - all the params as CLA options we can
282:59 - also do the install spec command here
283:02 - and spec so it should have directly
283:05 - saying result create yeah so we Face an
283:09 - error so what is the error if you go to
283:11 - the tsconfig.json file you will find
283:13 - that yes if you previously we were using
283:16 - es5 instead of es5 what you need to do
283:19 - es
283:20 - 2017 so if you can see there are a lot
283:24 - of things so you want to use es 2017 and
283:27 - it will work nicely so if you run PNP
283:30 - and run generate again it will right so
283:32 - this is the version thing type script
283:34 - sometimes stuff like that may happen so
283:37 - you can see our migration file is ready
283:39 - and you can see this is mostly similar
283:43 - to our stuff all the stuff we have
283:45 - created here we have our indexes and all
283:48 - the things like foreign keys and stuff
283:50 - awesome so now we have all our things
283:54 - and now we can run the migrations as
283:56 - well so if you run pnpm plan and then
284:01 - you can say interest Let's do an
284:04 - instrument okay so pnbm run install spec
284:08 - what is this select you go to the
284:10 - package.json you can find out it's true
284:13 - spec it is what like this and here yeah
284:16 - intro expect install not not install
284:19 - intro respect and let me fix that intro
284:22 - expect and hit this also address so pnpm
284:25 - run intro is introspect so it will only
284:28 - PG is available option for Drive command
284:31 - field only PC is available option for
284:34 - Drive okay so something is happening
284:36 - here so connection we have to Define our
284:38 - connection string over here if you want
284:40 - to install inspect our stuff so we can
284:43 - go to our config which is drizzle config
284:46 - and here we can provide our connection
284:48 - string yeah it is saying DB credentials
284:50 - inside DB credentials we have connection
284:52 - is string and which is process.env dot
284:55 - what is over connection let's go to
284:57 - command plea of your own make if you are
285:00 - on Windows control P
285:02 - env.local this is our database
285:04 - connection string so make sure this is
285:06 - hidden and yeah database connection
285:08 - string as a string let's fix this so now
285:11 - if we run the install respect it is
285:13 - saying that it is only available for the
285:16 - driver what is that okay so you can
285:18 - Define our driver PG either connection
285:20 - using database are required for database
285:23 - connection so for the temporary purpose
285:25 - what I am going to do I am going to
285:27 - paste my database connection string over
285:30 - here it is not necessary let's not do
285:33 - that if you want to and install is intro
285:35 - respect to your database you can put
285:36 - your connection string and you can
285:38 - remove definitely remove this because we
285:40 - don't want to commit this to our GitHub
285:42 - result config you can see we have test
285:45 - result config and we don't want to
285:47 - GitHub to track our database connection
285:49 - string to please do it carefully so we
285:52 - should remove this thing over here but
285:54 - yeah you can do that okay so you can
285:56 - also pass the connection string like
285:58 - that so we can do that this is this is
286:01 - this can be done so what I'm saying is
286:03 - if you go to the PK store Json Ctrl P
286:06 - command P package to Json here we are
286:09 - saying generate kit install spec PG so
286:12 - here we can say npx result kit intro
286:15 - expect PG and here we can pass over
286:17 - connection string as well out migration
286:20 - and then we can pass our connection
286:21 - history so we don't have to copy and
286:23 - paste so GitHub won't be able to trick
286:27 - yeah so I will now paste my EnV my
286:29 - secret connection string over here and
286:31 - let's try this PC is available option
286:34 - for driver okay so what it is sometime
286:37 - it doesn't work yes so we can say the
286:39 - driver is PG or something yeah now it
286:42 - worked driver is busy and if you go to
286:45 - the migrations in the schema you have
286:48 - all the things okay what is this you can
286:50 - see it is commented current SQL files
286:53 - while generated after intro expecting
286:56 - the database if you want to run this
286:57 - migration please uncomment this code
286:59 - before executing migration so what is
287:03 - happening here first of all
287:05 - we have find out what is the difference
287:07 - between our current database tables and
287:10 - the previous one so it find out that we
287:13 - need to create some more few things here
287:15 - like user identity ID because if you see
287:18 - in our database in our super based
287:20 - database we have tweet underscore ID
287:23 - this is not the naming condition we are
287:25 - using that's why it is generating and
287:27 - yeah so what we can do instead of this
287:29 - let's remove the whole thing we don't
287:31 - need to intro expect for now
287:34 - let's generate the migration file once
287:38 - more so let's delete the migration in
287:40 - the drizzle yeah we have this this one
287:41 - so we have this one in inside the
287:43 - migration we have this one that's good
287:45 - so if we go to our migrated file which
287:48 - is this migration folder is we are
287:50 - saying that this is drizzle and this is
287:52 - our migration folder and if we try to
287:54 - generate or we try to push the changes
287:56 - to our DB let's try this because this is
287:59 - a div instance and we don't care about
288:01 - it that's why we are doing all the stuff
288:03 - over here so we can say pnpm run migrate
288:07 - and it will push over changes to the DB
288:09 - now you can see npx button so if you
288:11 - don't have the bun install it will say
288:13 - please install the button and you can
288:14 - hit the enter and it will work now we
288:16 - have got some errors you can see
288:18 - migrations running bookmarks table
288:20 - already exist relation already exist
288:22 - hashtags so this is stuff all all of
288:26 - this stuff already exists that's why it
288:27 - is not doing anything multiple primary
288:29 - keys for table tweet hashtag are not
288:31 - allowed
288:32 - so it is now done so instead of this we
288:35 - can save after this is done we finally
288:37 - close the connection so now if we try to
288:40 - do this again it will close our server
288:42 - after running yeah after generating the
288:43 - script so you can see already exist now
288:46 - if you go to our database which is here
288:48 - you can find out all the things here if
288:50 - you go to tweets you can see there is
288:52 - nothing changed we already have all the
288:55 - things as they should be and everything
288:57 - is good to go but if you try to change
288:59 - something then it will do something so
289:02 - if you go to the migrate folder and
289:04 - let's try to run the migrations on the
289:07 - migration folder and go to here
289:09 - uncomment the whole thing so we can
289:11 - generate our migration so now let's try
289:13 - it again PNP and run migrate and let's
289:15 - see what is happening yeah so we got
289:17 - something this time also we are getting
289:19 - some errors if this is a fresh database
289:21 - then we won't be facing any problem
289:24 - schema result Rd exists
289:27 - checks already exist bookmarks already
289:29 - exist likes profiles replies to it stick
289:33 - yeah that's good but then why what did
289:36 - you do with introspecting so
289:38 - introspecting is the way to find out
289:40 - what is changed let's assume we have a
289:42 - fresh database create a fresh database
289:44 - and try to push something there and it
289:47 - will work so if we go to a fresh
289:49 - database let's create a new project test
289:52 - or let's say Dev database Twitter
289:55 - ultimate Twitter clone tail generate a
289:59 - password I will copy this choose your
290:01 - reason and we will create a new database
290:03 - let's find out if this is working or not
290:06 - if we will go to paycase.json not in the
290:09 - package in the EnV and I will change
290:12 - my database connection string and all
290:15 - this stuff all this stuff let's change
290:16 - all this stuff so this is my secret
290:18 - service key I will change this this is
290:21 - my nnn public key I will change this as
290:23 - well this is My URL I will change this
290:26 - and now we need our database in the
290:29 - database it is our connection stream and
290:31 - we need a new password so basically I
290:33 - will generate a new password again
290:34 - generated new password copy this thing
290:36 - reset this thing and here I will paste
290:38 - my password that's good now everything
290:40 - is new and we will generate everything
290:42 - from scratch delete the drizzle delete
290:45 - the migration now we will drive
290:47 - everything from scratch so if you go to
290:50 - yeah we can generate pnpm run and then
290:53 - we can generate SQL from our schemas so
290:55 - what we can do we can generate pnpm
290:58 - branch and rate it will generate all
291:00 - over SQL in the drizzle folder so you
291:03 - can see we have all our tables and
291:05 - relations here this is cool and now if
291:08 - you change this if you change something
291:09 - let's let's assume we want to insert
291:12 - something in the user stable so we will
291:14 - go to schema.ts here I will create a
291:17 - created it as well so I will say this is
291:19 - the timestamp I want to show you how you
291:22 - will do the work if you want to change
291:23 - something with the database in the
291:25 - future create it eight dot default now
291:29 - dot note null I just created it updated
291:32 - it like that and now we will generate
291:34 - over
291:37 - again so you can see now we have two
291:39 - migrations and it is saying altered
291:41 - table profiles and add a column which is
291:43 - time which time default is this can be
291:46 - null discontinental and this is now you
291:48 - can see and this is how we have we are
291:50 - generating all the things over here and
291:52 - we can push these changes to our
291:53 - database in single click so we can say
291:56 - pnpm run migrate and you can see
291:59 - migration running and we are
292:01 - successfully done over migration so if
292:03 - we go to migration okay we haven't got
292:05 - this but yeah it is done if you go to
292:07 - the tables okay so there is nothing
292:10 - let's see so then so cloak finished we
292:13 - will also log if something went wrong
292:15 - with that dot catch if we have any error
292:18 - then
292:18 - console.log yeah now let's do it again
292:22 - PNP and migrate something is here
292:25 - migration for okay so we don't have
292:26 - migration folder here we are specifying
292:29 - the wrong folder so that's why this
292:32 - console.log error is also useful
292:34 - sometimes so what we will do result now
292:36 - it will it should work pnpm return
292:39 - migrate migrations running migration
292:41 - finished and finished and here if we you
292:44 - can see all the tables and if you now go
292:46 - to the tweets you should be able to see
292:48 - some foreign gear so you can see this is
292:51 - a foreign key which is released related
292:52 - to the profiles public key and if you go
292:55 - to the tweets table the profile table
292:57 - basically you can see all the columns
293:00 - are here you can go to the replies as
293:02 - well here you can find out the reply ID
293:05 - you can see this is self-relation this
293:07 - is from tit relation indices so
293:09 - everything is working like we have
293:11 - expected and now we can easily QD over
293:14 - database and we can do all the stuff if
293:17 - we pnpm run do we will see something
293:20 - happen so this is our application and
293:23 - let's refresh the page we have also
293:25 - created a new database so that we can
293:28 - now integrate Result One freshly without
293:32 - worrying about our previous stuff okay
293:35 - so that's why we have created a new new
293:37 - database so you should enable row level
293:40 - policies for all the tables here so to
293:44 - do that you just need to follow what I
293:46 - am doing in ml row level policies for
293:49 - all the rows so people will not be able
293:51 - to access all these tables from anywhere
293:54 - it should be more protected if assumed
293:56 - like your public key supervisor public
293:58 - key code in wrong hands then they can
294:02 - utilize those keys to get all the data
294:05 - so we don't want our data to be stolen
294:07 - that's why we are enabling our own level
294:09 - security policies because from a super
294:12 - based public key these rows can be
294:14 - accessed if the row level security
294:16 - policy is not enabled enable all row
294:19 - level policies so you can see enable
294:21 - enable and now it's good now we have our
294:23 - database with our schema in sync so in
294:26 - the source directory in the library in
294:28 - the DB in the schema you can find all
294:30 - over schemas and it is in sync with
294:33 - overproduction or you can see over
294:35 - remote database but we want to integrate
294:38 - it for fetching getting in all this
294:41 - stuff so here we are saying that curing
294:43 - and mutating so instead of doing this
294:44 - what we will do if the current user
294:47 - exists so we don't need this all the
294:49 - stuff here we can directly fetch the
294:51 - rows using retrieval Oram so what we
294:54 - will do we will import the DB from the
294:56 - DB and we will say select and what the
295:00 - things we need okay so we need all the
295:02 - tweets we need all the we need profiles
295:05 - inside profiles we need username and we
295:08 - need full name now what we can do we can
295:10 - say from which table we want so we want
295:13 - from tweets so we will import you can
295:15 - see we are getting all the things so we
295:18 - are importing all the columns this means
295:19 - we if we don't specify anything then it
295:22 - means we are importing everything so now
295:24 - inside here so in the tweets if you do
295:28 - this you will find some Auto completion
295:30 - here and let's find out in the doc in
295:32 - the documentation of drizzle warm how to
295:35 - run a relational query so you can see DB
295:38 - dot query.user.find menu so we can query
295:40 - users and we can find many with post
295:43 - like that so we need to do the stuff we
295:46 - can also left or right join so here if
295:50 - you sign many point first queries so
295:53 - here they are using query fit post with
295:56 - comments like this is good so there we
295:58 - can do that as well so we can say query
296:00 - and we want tweets okay so we want to
296:03 - query okay so it will say Dot case but
296:06 - we are not getting any auto completion
296:08 - here you want the auto combination
296:10 - that's why we are using that result here
296:12 - so we are not getting any auto
296:13 - completion why is that for any nested
296:16 - with queries result will be infer type
296:18 - of infer model from core API good that's
296:20 - good but we want to okay so if you have
296:23 - schema so we have to specify the schema
296:26 - here basically so if you go to the DB
296:28 - here you can specify the schema and
296:31 - let's import everything import or copy
296:34 - the whole line and you can specify the
296:36 - schema now if you do this you can say ah
296:39 - we have 104 tables so we want to query
296:42 - the tweets don't find many and we will
296:45 - say what do we want with and it will
296:48 - give us the other thing which we have so
296:51 - let's find out how we can find many here
296:54 - we can specify the other columns as well
296:56 - or the other tables as well so so here
296:59 - what we want here we want the users or
297:02 - you can say where is this a field code
297:04 - to the tweets here we have profile ID it
297:08 - is related to yeah so here we can say we
297:11 - want the profile as well so profiles
297:14 - true we want the profiles so this is how
297:16 - we can do but we are not getting any
297:18 - auto completion here why is that find
297:20 - many columns what are the columns you
297:23 - need okay so it is saying that space are
297:25 - the columns let's see columns extra
297:27 - limit offset where with good so we want
297:31 - the columns all we want all the columns
297:33 - okay so that's not the case extras what
297:36 - is extras let's find out okay which in
297:39 - the width we have comments and then
297:41 - inside we can pass down the other things
297:43 - as well so let's pass the profiles but
297:46 - we are not getting any auto completion
297:48 - here why set because we are not using
297:50 - the relations here so what I'm saying is
297:53 - we have profiles and profiles each
297:56 - profile okay so profiles don't have
297:58 - anything inside it like profiles don't
298:01 - have any one too many relation here but
298:03 - tweet has something so a profile can
298:06 - have many tweets so what here we can do
298:08 - we can specify some things here like it
298:11 - is given here user relation the same
298:14 - thing which we can do here so instead of
298:16 - saying user relation can say profiles
298:18 - relations import the relations and here
298:22 - we will pass down the profiles here we
298:24 - will say many and it a user can have
298:28 - many tweets and this is into tweets like
298:32 - this a user can have many likes a user
298:34 - can have many bookmarks a user can have
298:37 - many replies as well so this is what we
298:40 - are doing here tweets let's forget about
298:43 - tweet hashtag now replies and likes and
298:46 - bookmarks the same thing we need to do
298:48 - for from the other direction so what I'm
298:50 - saying is copy this whole thing and we
298:52 - will Define tweets relations this
298:55 - doesn't effect over schema this is much
298:57 - more of a application iteration level
298:58 - interface thing so this is only is
299:01 - required for the application Level so
299:03 - here we can say tweets relation and
299:06 - profile info has user ID could can see
299:09 - this these both have the same thing but
299:11 - if the database doesn't support
299:13 - relations like Planet scale doesn't
299:16 - support relations so you have to use
299:18 - this schema otherwise you can use this
299:20 - thing okay so users relations user one
299:23 - user can have one profile good a user
299:26 - can have many comments and on the other
299:28 - side one post a comment yeah so we have
299:32 - to Define from both sides so you can see
299:34 - a post can have many comments and a
299:36 - comment can be only posted on one post
299:39 - so that's why we have to Define this
299:42 - thing here like this a post so here we
299:45 - will Define the profile we will say one
299:48 - and it has it accepts two things it X it
299:51 - will accept here we will pass down the
299:53 - Prof tweets tweets relation it we will
299:56 - pass down the tweets just like that in
299:59 - the comments we are passing down the
300:01 - comments like here and here we are
300:03 - saying a comment can be posted on one
300:05 - post and here we are specifying the
300:07 - posts here cool so here we will specify
300:10 - the profiles and here we will save the
300:13 - fields which are the fields basically so
300:15 - it is the tweets dot which field is this
300:19 - so is it is profile ID and what is the
300:23 - reference of this field so we will say
300:25 - profiles.id just like it post dot ID
300:28 - this is the reference which means this
300:30 - is a reference and this is the field
300:32 - which we want to reference so we can say
300:35 - this post ID is referenced to this ID so
300:38 - we have to do this for all the other was
300:40 - as well this is our profiles this solar
300:42 - profiles relations tweets tweets
300:44 - relations it replies now we have replies
300:47 - relations here instead of doing this we
300:50 - will say replace dot user ID okay so
300:53 - here we are saying user ID which is good
300:55 - profiles replies so if you have to pass
300:58 - down the replies here basically where
301:00 - then this will have the reply success
301:02 - now we have profiles okay now it is good
301:05 - to go every as well we will do the same
301:07 - for the likes table here instead of
301:09 - reprise relation we will say likes
301:12 - relations here we will pass down the
301:13 - likes table here we will say likes dot
301:16 - user ID just like that and the
301:18 - references profiles dot ID good
301:21 - here in the bookmarks we will do the
301:24 - same thing I know it is repetitive but
301:26 - yeah it it works it will help us when we
301:29 - are querying our database and it will be
301:31 - much more error prone here we will pass
301:33 - down the bookmarks it will say bookmarks
301:36 - towards user ID
301:37 - I would suggest you to name these
301:39 - profiles users and then you can specify
301:42 - the user ID as well here so let's save
301:45 - this it will it won't affect the schema
301:48 - but it will affect here so if you now
301:49 - see you can see we have a profile it
301:52 - will hit enter we can find out what
301:54 - columns we need so we need username and
301:57 - we need true and we need full name so
302:01 - this is because of here we have
302:03 - specified the tweets relations tweet if
302:06 - we want to find out on the tweets we
302:08 - have this thing that's why it is working
302:11 - and if we log this it will work but we
302:13 - want to left showing this profile
302:15 - stepping so for that we can do that we
302:18 - can do that if we go to joins here we
302:21 - can find out how to do that so DB dot
302:24 - select from users then we can left join
302:26 - things so this is what we need to do so
302:28 - let's comment this out for now and here
302:31 - we will try something out here we will
302:34 - say const result is equal to await DB
302:37 - dot select you can just select distinct
302:39 - select this technique we will just
302:42 - select and we want to select from tweets
302:45 - we want to select from tweets and then
302:48 - we want to left join basically so here
302:50 - you can find out all the things inner
302:52 - join left show and right join everything
302:54 - Behavior so we want to left join the
302:57 - table which is which table we want to
302:59 - lecture you can see we want to left join
303:02 - the likes table and then join the
303:04 - profiles as well so we are joining two
303:06 - tables so we will join the likes table
303:08 - then join add all element are the
303:11 - elements of an error into any string
303:13 - separated by specific separate so we are
303:15 - taking the reference of this SQL query
303:18 - which we have got from chat CPT now we
303:21 - will join the profiles but before that I
303:23 - think we need to specify something we
303:25 - need to left join and we need to
303:27 - find out Pro for which column you want
303:30 - to left showing so here we will specify
303:32 - something where we will say equal and we
303:35 - can say tweets dot which tab which
303:38 - column you want to join okay so we have
303:40 - ID profile ID everything so we want to
303:43 - join the twitch ID and likes dot tweet
303:47 - ID now this this is what we want after
303:49 - this we want to join the whole table
303:51 - which is the profiles table basically
303:54 - and it it will accept the same thing it
303:57 - will accept the tweets dot profile ID
304:00 - and we need profiles.id okay what it is
304:03 - saying okay left join required and full
304:06 - join code partial select then what is
304:09 - the join many to one example aggregate
304:12 - result so here we have joined all the
304:14 - twists basically here here we are
304:16 - selecting everything but what if we
304:18 - don't I don't want to select everything
304:20 - here length join I want to join the
304:23 - profiles and it's separator add all the
304:26 - element to an array into string left
304:28 - join for each row of the table includes
304:31 - value from a matching row of the join
304:33 - table if there is a matching row if not
304:35 - all of The Columns of the joint table
304:37 - will be set to null okay that's cool but
304:39 - this join is not a yeah this join is not
304:42 - a thing of our right join includes all
304:45 - the rows of joint table if there is no
304:47 - matching Row in the main table all The
304:49 - Columns of the main table will not be
304:51 - set to null so here we are joining the
304:54 - lift we are basically we are saying that
304:56 - give me the tweet and give me the likes
305:00 - count of this to it basically so we are
305:03 - saying that when when the Tweet ID is
305:05 - equal to likes to it ID give me all the
305:08 - rows as well and then we are joining the
305:11 - profile and let's lock the result out
305:13 - and we will see what we are getting here
305:15 - restored yeah so we should get something
305:18 - here dot returning and now what we can
305:21 - do here we can order them order by and
305:24 - we will say how do you want to order by
305:26 - so can set tweets tote created it taught
305:30 - okay so how this order Works cost to
305:33 - tier order by documentation let's find
305:36 - out what is this okay it is sending us
305:38 - to dot all so we can find all the rows
305:42 - and here we can specify the rows as well
305:44 - we don't need all the rows we can offset
305:47 - or we can find some rows note all of
305:50 - them and here we are also grouping them
305:52 - by tweet ID profiles username and
305:54 - profiles okay so we don't need that
305:56 - thing descending the result the GitHub
305:59 - one GitHub documentation is better let's
306:01 - go to there
306:04 - huh here you can see how we can select
306:07 - the users or how we can use this thing
306:10 - select from user where this is this this
306:13 - is this could limit offset and order by
306:16 - okay so we have to use this ascending or
306:18 - descending from here so we need to
306:20 - descending we need descending so what we
306:22 - will do we will trap tesc from drizzle
306:25 - worm we will import and we will say use
306:28 - in sorting and you can hover over it you
306:30 - can find from users order by descending
306:32 - users to created it and to sort created
306:34 - it that's what we are doing here that's
306:36 - totally good now it will work we can
306:38 - limit an offset offset means how many
306:41 - users or tweets you want to jump you can
306:43 - limit them let's limit to one tweet only
306:46 - dot yeah that's that's what we need to
306:49 - returning I think there is something
306:51 - called returning if you hover over it
306:53 - you can see what we are getting we are
306:55 - getting if we do this too we will
306:58 - receive an array if we do it one we will
307:01 - receive array of objects so here we have
307:04 - twits here we have profiles and here we
307:06 - have likes save this thing and here we
307:08 - will find out what we are getting we are
307:10 - getting undefined why is set so if we go
307:12 - to the main component let's comment
307:14 - everything out for now here we are
307:16 - creating the tweets let's pass this
307:19 - thing also console.log current user ID
307:22 - and yeah so basically the current user
307:24 - ID is undefined and we are getting
307:26 - nothing and if we remove this what we
307:29 - will get nothing okay because we don't
307:31 - have any tweets that's why we are
307:33 - getting all of these things so let's
307:35 - login and try to submit some tweets here
307:37 - then it will work save this thing here
307:40 - in the mutation if you go to compose
307:43 - tweet here we are submitting the tweets
307:45 - instead of this now you can use the
307:49 - treasure worm if you want so let's use
307:51 - the twizzle Orem so import the DB dot
307:54 - insert and we will specify our tweets
307:58 - tweets table schema and we can we will
308:01 - say the values are this profile ID is
308:03 - user data.user dot ID just like that dot
308:07 - yeah so this is how you can insert
308:09 - something using the drizzle warm result
308:13 - and let's lock the result as well
308:15 - console.log press what we are getting
308:18 - yeah we are getting the user and it's
308:19 - good node user we are getting the Tweet
308:21 - basically so we can now remove this we
308:23 - don't need Super based server we need
308:26 - only response actually we don't need to
308:28 - send anything if this went wrong dot
308:31 - catch we can set some error we can say
308:34 - let error is equal to empty string and
308:38 - if something went wrong we can say error
308:41 - something wrong with inside something
308:44 - wrong with server let's say for now and
308:46 - we can pass down the error as error
308:49 - that's good and we can pass down the
308:50 - data as Razer res why it is complaining
308:54 - if we go here yeah it is complaining
308:56 - because if we hover over this now we
308:58 - have some different things so just for
309:01 - the sake of demo we will do it any and
309:04 - now let's say how if we able to submit a
309:07 - tweet or not so first we need to sign in
309:09 - so Club of quarters.com
309:12 - gmail.com and username is Club of
309:15 - quarters hit enter now we should be
309:17 - received and yeah so we have received a
309:20 - link I will sign up now I am logged in
309:23 - you can see we are getting an ID here I
309:26 - will submit something this is a tweet
309:29 - this is my first tweet if I hit enter
309:32 - you can see something is happening
309:34 - something is happening so let's log this
309:37 - out what we are getting you can say
309:40 - error console.log error if we try to fit
309:43 - some yeah we are getting something we
309:45 - are getting insert or update on tweets
309:47 - we will list the foreign key constraint
309:49 - to its profile ID profile ID foreign
309:56 - go to profiles okay so we don't have any
309:59 - profiles here why because this is our
310:01 - new database and we haven't configured
310:04 - over trigger to in insert a row into our
310:06 - profiles table when a new user is
310:09 - created for that you could you can go to
310:11 - SQL editor you can go to there is a user
310:14 - management starter and you can just copy
310:17 - this whole trigger create function what
310:20 - it will do it will it will create a
310:22 - trigger whenever a new user will sign up
310:25 - on your application it will insert into
310:27 - the profiles table so new blank query
310:30 - create function public handle user
310:32 - insert into public dot profile ID full
310:35 - name of the URL we don't need the author
310:37 - URL we need the username username full
310:40 - name username these two things we need
310:43 - new DOT ID new DOT now let's try to run
310:47 - this now successfully done if we go to
310:50 - our profiles username for name these two
310:53 - things we need we need the ID as well so
310:55 - yeah we are getting the ID as well cool
310:57 - so now we will delete this user which
310:59 - just has signed up now if you refresh
311:02 - this it will ask us to sign up again
311:04 - love of quarters dot com and Delete
311:06 - gmail.com here we will say Club of
311:09 - coders now I will click on login it will
311:12 - send me a email ID code and email
311:15 - something went wrong let's see let's
311:18 - click on login again something is not
311:20 - working so we will find out what is
311:22 - happening here oath so in the provider
311:24 - we are opening the model here is our
311:26 - authentication model please sign in to
311:28 - continue here we are select okay so the
311:31 - username already exists please use and
311:33 - then we are signing using OTP if
311:35 - something is wrong we should show
311:37 - something here so I think it will give
311:40 - us some data an error if we got any
311:43 - error sign up error sign data so if we
311:48 - got any error then we should Source
311:50 - something and we should return it return
311:53 - those dot error error dot you can say
311:56 - sign up error Dot message and if it is
311:59 - successfully done we can send a we can
312:01 - show it tosh.success magic link sent
312:05 - successfully like that now it's good now
312:09 - if we try to do that again Club of
312:11 - orders.com
312:12 - gmail.com Club of folders login null
312:16 - value in the column full name of
312:18 - relation profiles okay so we are getting
312:20 - something let's lock the error so we can
312:22 - see what is happening we'll sign up
312:25 - error block of quarters okay I don't
312:28 - want to type again and again I think I
312:30 - should use type is email already it
312:32 - should show me auto completion but it is
312:34 - not showing okay so it is what is the
312:37 - problem we are facing is inside the
312:39 - authentication in the profiles username
312:42 - full name let's try this and see the
312:45 - error more carefully fixed error where
312:47 - is there okay in the terminal it should
312:49 - have so null value in the column full
312:52 - name of relations profile Violet null
312:55 - not null constraint at not null value in
312:57 - column yeah previously we were able to
313:00 - sign up and this time note what happened
313:02 - let's clear the whole data where is the
313:04 - storage clear the site data everything
313:06 - now everything is clear localhost go to
313:09 - localhost now let's do it again
313:11 - cloudforest.com
313:13 - gmail.com here we will say the username
313:16 - is Club of quarters hit enter and it is
313:18 - saying data is username preview failing
313:22 - 2 contains this null value in column
313:24 - full name of relation profile so we are
313:27 - not able to insert a new row that's why
313:29 - we are not able to sign up so let's pass
313:31 - down the full name as well so it needs a
313:33 - full name so what we can do we can do is
313:36 - same thing here and instead of
313:38 - placeholder we can say name type text
313:41 - minimum let's remove this and let's
313:44 - define a new state as well for the name
313:47 - full name it is empty here we will say
313:50 - okay the value is username and here the
313:53 - value is email why have I'll forward
313:56 - that thing here the value is e not email
314:00 - here is the value is full name and set
314:02 - the full name that's all now we need to
314:04 - send the full name as well to our server
314:07 - full name is full name that's good now
314:10 - let's write email is Club of
314:12 - quarters.com
314:14 - gmail.com username is Club of quarters
314:16 - name is pranjal Sony hit enter now it is
314:20 - done magic link sent successfully now it
314:23 - is done and we should have a new row
314:26 - inserted in our DB that's totally
314:28 - awesome and we will confirm our sign up
314:31 - now we are sign up and here we will this
314:34 - is my first tweet hit tweet to it sends
314:37 - successfully everything is working as
314:40 - expected and here now we are able to see
314:43 - the gateways and everything is now good
314:46 - so close close close close you can see
314:49 - this is how we are using digital aurum
314:51 - to insert something from note from
314:53 - inside our TV and here we are creating
314:55 - the TV and joining all the Stables here
314:58 - so you can see we are getting an array
315:00 - which has only one element it has
315:02 - something it has tweets which is the
315:04 - Tweet detail it has likes which is null
315:07 - because now the likes is null it has
315:09 - profiles which who is the user who
315:12 - created this to it this is what we are
315:14 - showing here that's totally good now we
315:17 - want all the likes okay so how to do
315:19 - that we want all the likes I want to
315:22 - count it can we do that no so we can
315:25 - send the whole response here and
315:27 - response and in the main component here
315:31 - we can catch the error if something went
315:34 - wrong let error is equal to empty string
315:37 - and here we can directly say like this
315:40 - and we can say error is equal to
315:42 - something went wrong while fetching all
315:45 - the tweets and here we can pass down the
315:48 - data is response and the error is the
315:52 - error now we have something and if we
315:55 - have place to data dot length is greater
315:58 - than 0 or or not like that if this is
316:01 - defined here we can remove this tweet
316:03 - why it is showing us this weekly line
316:06 - control set rest to data.map now we have
316:10 - this tweet void element undefined is not
316:13 - assignable to type react node type word
316:16 - is not a seven yeah two it is raised to
316:19 - data and raised to data.nint is greater
316:22 - than zero something is not working here
316:24 - something is very wrong we can say it is
316:27 - dot data yeah now it's happy it's
316:29 - basically happy it is saying yeah so
316:32 - here tweets tweet dot so we can split
316:35 - the profiles tweets here we can say
316:39 - tweets.id here we have our tweets and in
316:42 - the yeah here we have all the things
316:44 - here tweet.text here we don't need to
316:47 - give this thing here we can infer tweet
316:50 - type so if you go to the documentation
316:52 - of drizzle let's close this you can
316:54 - infer actually you can infer the types
316:57 - so if you go to schema declaration this
317:00 - is how you can infer the types of the
317:03 - everything so if you go to schema here
317:05 - we want to infer the twitch type so here
317:07 - we can say tweets instead of saying the
317:09 - so this is our users table we want to
317:11 - infer the user here we can say we want
317:14 - to infer the tweet and import from
317:17 - reservoirum and we can pass down type of
317:19 - tweets now we have a tweet type and here
317:21 - page we can get the Tweet type from
317:24 - schema good so here we can spread both
317:26 - things
317:27 - profiles like that now it has all the
317:30 - things here which are needed it has all
317:33 - these tweets it has all the profiles so
317:35 - we can Union we can Union both the types
317:37 - so here this is our tweets and here is
317:41 - our profiles so this is our profiles so
317:44 - we can say this is our profile infer
317:46 - from profile and here we can make a
317:49 - junior notice Union there is something
317:51 - Union type script if you search this you
317:55 - can find how we can Union a type yeah
317:57 - this is how you can Union simple we can
318:00 - say if this is profile or this is Street
318:02 - import the profile now it is happy it is
318:05 - also happy here you can say tweet okay
318:07 - not to be basically we don't want to
318:10 - Union this it will eliminate the common
318:13 - things we want to intersection let's try
318:16 - it and we want both so tweet dot yeah
318:19 - now we have both so here we want the
318:21 - full name here this is of yeah tweet
318:24 - tote created it now we don't have the
318:26 - likes count for now we can pass down
318:28 - this we can pass down the zero it can
318:31 - also make sure it is false everything is
318:35 - looking good for now we will see what we
318:37 - can do to make sure our like button also
318:40 - works like it was working previously so
318:43 - now if we go to our application you can
318:45 - see this is my first tweet we are
318:47 - getting everything we need so if you hit
318:48 - refresh everything is good now we want
318:51 - to like this field if you click this
318:52 - button it will like but it will not
318:54 - shows anything so here we are getting
318:56 - all the tweets likes and profiles if you
318:59 - like this thing insert or update on
319:01 - likes for tweet ID okay so we can't we
319:05 - are not able to insert into the likes
319:07 - table why is that let's find out it is
319:10 - our uuid for our thing for our tweet if
319:14 - we go to tweet inside like button here
319:17 - we are liking to tweet tweet ID user ID
319:20 - it's good why it is not working so
319:23 - instead of doing this we will use the
319:25 - digital alarm dot insert insert into the
319:28 - likes row and we want to insert some
319:30 - values dot values which are of tweet ID
319:33 - which are user ID and everything else
319:35 - will be Auto generated basically so now
319:37 - you can you can lock the error if we get
319:40 - anything error
319:42 - console.log in error yeah now let's do
319:45 - it again try to like this tweet it
319:47 - worked right thing if you go to the
319:48 - likes table nothing is here we also want
319:50 - to find out what is happening so const
319:53 - response is equal to
319:55 - console.loke response save this thing
319:57 - now we will refresh this I will like
320:01 - this yeah we are getting something
320:02 - insert or update on likes whether it's
320:04 - the foreign
320:05 - tweets for NK something is missing here
320:09 - something is not correct why is that
320:12 - let's find out let's log first let's
320:15 - look the IDS we are receiving here so we
320:17 - can find out what is happening so here
320:19 - is our cheat ID here is our user ID
320:21 - let's lock both of these out our user ID
320:24 - is this and our tweet ID over user ID is
320:27 - 4D something and our tweet ID is 10c
320:31 - something let's click on this button and
320:33 - see what is happening yeah okay so we
320:36 - are getting both same things here tweet
320:38 - ID and user ID both are same why is that
320:41 - why is why is this problem because we
320:44 - are not passing the Tweet ID correctly
320:46 - so if you go here in the light bit here
320:48 - we are getting the Tweet ID but where
320:50 - from where we are getting the Tweet ID
320:52 - in the like button and this is the ID of
320:54 - tweet and this is wrong why is that
320:56 - let's look the Tweet okay this is both
320:59 - same why is that oh okay okay okay these
321:03 - both are same why is that let's find out
321:06 - here we want to return this thing but to
321:09 - debug this thing we want to to
321:11 - console.log tweets so it is combining
321:14 - both of this ID and it is taking one so
321:17 - the problem is the ID so to fix this
321:20 - problem what we will do we will pass
321:22 - down the Tweet ID here we will say tweet
321:24 - ID it is it is confusing us okay so we
321:28 - are getting confused here what is tweets
321:30 - and what is not so we will do use
321:32 - Reserve profile and here we will pass
321:34 - down the profiles so now everything is
321:37 - clear tweets so now we have ID text and
321:40 - nicely so we we can differentiate which
321:43 - is Twitter ID and which is user ID so we
321:46 - have this user ID and this is the Tweet
321:47 - ID so that's why we are doing something
321:50 - here so instead of doing this we can
321:52 - make our type like this we can say roof
321:55 - file just like this bit user profile is
321:58 - profile and another thing which we have
322:00 - is tweet or we here we can specify or we
322:05 - can directly say we have Waits here
322:07 - tweets is to it
322:09 - it's still not happy so we need to fix
322:11 - the type here so I think we need to do
322:14 - something here user profile and tweet
322:17 - details and here I can we can pass the
322:20 - tweets now here we can the Tweet details
322:22 - is Tweet now both are satisfied and it's
322:25 - good save this save this thing also and
322:28 - here you can say user profile dot full
322:31 - name twitch.user profile dot username
322:33 - and here we want tweet details created
322:36 - it to tweet details and the Tweet IDs
322:38 - tweet details dot edit node the user and
322:41 - now it's good now it's totally
322:43 - differentiated it's good and if you
322:45 - click on this like button it will work
322:47 - it will work it will definitely work now
322:49 - if you go to here in the likes table you
322:52 - can see we have now our like which is
322:54 - created using Crystal orm now we can
322:56 - remove all the consulted look first
322:58 - remove all the controller block so why I
323:01 - have recorded this debugging path also
323:04 - because I want you to know that not all
323:07 - the times everything works out sometimes
323:09 - we get get some errors and we need to
323:11 - figure out and we need to debug the
323:13 - errors okay so that's cool we can do
323:17 - this or we can delete from using the
323:19 - tercelorm as well but you can do this by
323:22 - yourself now here we are getting
323:25 - something here so what I'm saying is
323:27 - let's log the likes and we will see what
323:30 - we are getting so we are getting the
323:32 - likes as well you can see and if you
323:34 - like this tweet one more time then we
323:36 - will also get that one tweet so I will
323:39 - open a new window which you seeked
323:51 - foreign
323:53 - so here as you can see we are saying
323:57 - that where if this exists or not so if
324:00 - this is doesn't exist then we can say
324:01 - undefined argument of type this node
324:04 - assignable we are getting this problem
324:06 - let's assume we do this okay because
324:08 - this can be undefined that's why it is
324:10 - not working so if we do this it will not
324:13 - show us any problem let's find out what
324:15 - we are getting here hit refresh now we
324:18 - get something this is straight this is
324:20 - likes profiles that's good that's not I
324:23 - want let's remove this whole thing let's
324:26 - find out console.log row dot okay we
324:29 - have three things likes profiles and
324:31 - tweets
324:32 - so I want to select some custom columns
324:35 - okay so how can we do that let's find
324:37 - out
324:39 - we can select partial select user.id
324:41 - user.name mapped1 map2 that's okay
324:44 - that's totally okay DB dot select as SQL
324:47 - number X from this generate series
324:50 - conditionally select fields we can also
324:53 - do this SQL thing here it's cool how
324:56 - about we try this the same thing here we
324:59 - can save the user has liked or not so
325:02 - what I'm saying is user has liked if the
325:07 - current user ID exist then has light
325:09 - otherwise null conditionally where is
325:12 - this conditionally yeah now it's good
325:15 - it's conditional with name name.users
325:17 - otherwise this that's good and we can
325:19 - say is liked and it is SQL import SQL
325:23 - from here and we can pass down over SQL
325:25 - string DB with SQ we can do a lot of
325:29 - things here basically as liked exist is
325:32 - we want to do this can we do that damn
325:34 - wait okay we can do that let's find out
325:36 - we are getting this thing here row Dot
325:39 - has liked okay so we have his leg now
325:42 - but we don't have the tweets or anything
325:45 - now we can say tweets is tweets likes
325:48 - his likes and we can say profiles is
325:51 - profiles let's find out what it gave us
325:53 - not working let's go to the main and
325:56 - something happened true so we have liked
325:58 - all of them so it is giving us two
326:00 - that's totally dope and what if we what
326:03 - if I remove all the likes let's delete
326:05 - all the tables so we have two users we
326:07 - have three tweets so we have light all
326:09 - of them
326:10 - I want to delete all of the tables okay
326:13 - why can't I delete this table note table
326:15 - we want to delete yeah delete six rows
326:18 - delete all the rows now it should be
326:19 - false if I hit refresh yeah it's zero it
326:22 - falls dim
326:24 - so our query which we have written in
326:26 - SQL just worked in drizzle orm so this
326:31 - is how you can do that it's totally
326:33 - awesome
326:34 - it's cool what if I go to local notes
326:37 - 3000 now it's good we are getting three
326:39 - likes if I hit refresh if I hit like now
326:43 - it has one like that's totally dope so
326:45 - we are getting all the results what we
326:47 - want and we can pass down the
326:49 - road.heslite into select is equal to row
326:53 - dot select this is a complex query and
326:56 - we have struggled a lot to achieve this
326:58 - but yeah it was totally fun now we can
327:01 - also specify this okay so it is saying
327:03 - unknown we can pass down like a Boolean
327:05 - why it is saying okay so we have to
327:07 - specify the as liked as Boolean here
327:10 - that's stop and now in the main
327:12 - component in the main component here we
327:14 - are getting the tweets and here we will
327:16 - also specify if the user has liked this
327:20 - tweet or not so here we have his liked
327:22 - and we will pass this down into our main
327:25 - thing so if user has light or not here
327:28 - it will go this is a Boolean save this
327:31 - thing save this thing save this thing
327:33 - now it will refresh and everything will
327:35 - work like charm okay why it is if I hit
327:38 - okay so it is getting all the true and
327:41 - false for older yeah why is that let's
327:43 - find out in the in the queries hereby
327:46 - here we are seeing if current user ID
327:48 - exists then here's like it exist
327:50 - otherwise not so something is fishy here
327:52 - something is not correct what we are
327:55 - doing we are selecting from likes we are
327:57 - saying if likes dot user ID is okay so
328:00 - this is wrong this is wrong this is not
328:02 - what we want we want to find if this
328:04 - current user has light or not so we have
328:06 - to Define two equal and we will say
328:08 - twist out like stored user ID and also
328:11 - the likes dot the Tweet ID is equal to
328:14 - the current tweet ID basically that's
328:16 - what we are doing so we are saying the
328:18 - tweets this this ID is equal to this ID
328:21 - or node so for that what we can do here
328:23 - we can instead of doing this we can say
328:26 - DB dot select Dot from likes dot aware
328:30 - dot where and here we can say equal
328:33 - likes
328:34 - tweet ID is equal to tweets dot ID and
328:38 - at the same time we need equal likes dot
328:42 - user ID is equal to the current user ID
328:45 - so this is not accepting to equal in the
328:48 - same way so we can pass down another
328:50 - where here and we can say this now save
328:53 - this thing now if you hit refresh
328:55 - everything is good if you hit like all
328:57 - the three tweets are like no this is not
328:59 - what you want something is still missing
329:01 - DB dot select from likes where likes to
329:04 - tweet IDs to it stored ID like stored
329:06 - user IDs current user ID and now we can
329:09 - remove the whole thing here basically
329:11 - let's remove this refresh this okay so
329:13 - we have to use this end operator here
329:15 - and that's how it will work instead of
329:17 - changing we can do and import the end
329:20 - and here we will use the same thing like
329:23 - that and here you can see where where
329:25 - these both conditions are satisfied
329:27 - where the user ID is equal to current
329:29 - user ID and the Tweet ID is equal to the
329:31 - current tweet ID let's find out yeah I
329:35 - think it worked if I remove this if I
329:37 - like this if I like this I like this if
329:40 - I refresh this now it's good if I remove
329:43 - this yeah two likes it has two likes I
329:46 - will remove one like it has one like I
329:48 - will remove this one like as well now it
329:51 - has zero like so it's working so yeah we
329:54 - can't change multiple where operators we
329:56 - can use end operator and we we can
329:59 - select multiple equal yeah that's good
330:01 - so that's how we have successfully
330:05 - fetching the tweets we are getting the
330:07 - tweets this is a fresh new tweet hit
330:11 - enter this is a fresh new tweet with
330:13 - zero likes if we hit click if you like
330:15 - this tweet if you are liking this tweet
330:17 - here we can see our fresh new tweet as
330:20 - well and we can like this tweet and
330:22 - everything is working like charm and we
330:26 - have successfully converted our row SQL
330:28 - query into the orm query which is long
330:31 - and honestly this is not looking good
330:33 - but yeah this is better than this where
330:35 - we don't have to define a lot of things
330:37 - and we can conditional chain multiple
330:40 - things so yeah thank you so much for
330:43 - continuing with me till now I know this
330:46 - must be hard for you at the first I am
330:48 - you very new to Teresa Orem this is my
330:51 - first time where I have tried laser over
330:53 - so here as you can see this is our
330:55 - application and we can like this and we
330:57 - can remove our like as well and if you
330:59 - refresh this everything is good and
331:01 - perfect we can also tweet this is a new
331:03 - Tweet now we want to implement a new
331:06 - function when we click this a new model
331:08 - will open and then we will be able to
331:10 - submit a new reply to this video so
331:14 - let's build that part first of all we
331:16 - need a new model for that we will use UI
331:19 - dot sharedcn.com that's the thing we
331:21 - need so let's go to the app page here we
331:25 - have main component left sidebar and
331:27 - right sidebar that's good in the
331:28 - component in the client component we
331:30 - have did a mistake that this like button
331:32 - is use client okay but this activities
331:34 - use server but as you can see we are
331:37 - getting everything in this component
331:39 - from as a props so if you even use this
331:43 - component as I use client component it
331:46 - will still work if you hit refresh you
331:48 - can see this is still working the same
331:51 - now it's good and now if someone clicks
331:55 - on the street so on click we will open a
331:59 - new model okay so we will open the reply
332:02 - model or we can say the dialog so let's
332:05 - go to the twitter.com and we will find
332:08 - out how it works so you can see if we
332:12 - hover over it you can see some a little
332:14 - bit of white color is here okay so if we
332:17 - click this and if we click on this reply
332:20 - it will open a new window where we can
332:23 - reply to this tweet so we want to build
332:26 - this thing so when we click this we will
332:28 - build this model so note the whole thing
332:31 - note the whole thing only when we click
332:33 - on this shade thing so this is a button
332:36 - and when we click this open the reply
332:38 - dialog so here we can Define our dialog
332:40 - so we can wrap this thing inside a
332:43 - fragment this is called react fragment
332:45 - and here we can Define our dialog we can
332:48 - copy and paste the dialog code from UI
332:50 - dot share cn.com get started in the
332:53 - dialog node in the alert dialog in the
332:56 - dialog you here you can copy and paste
332:59 - you can see there are two Styles but
333:01 - yeah now we will copy this thing this is
333:03 - our dialog also copy this and paste here
333:07 - it's good and when this is open when we
333:09 - click click our chat button so instead
333:13 - of here we can cut this thing we can
333:15 - paste it over here and for the trigger
333:17 - we can use this button cut this paste
333:20 - here button cut this save and for the
333:23 - trigger we can use a child so that when
333:26 - we click over this button it will assume
333:28 - that we are triggering our legs so now
333:32 - let's go to our application here you can
333:34 - see we can't able to hover it so let's
333:36 - give it some effects like we have given
333:39 - to the like button so here you can copy
333:41 - the classes same
333:43 - and we will use these classes for our
333:46 - button now if you hover over it okay it
333:48 - is still not working let's say press
333:50 - this something is missing here okay so
333:52 - our app got hang why is that localhost
333:55 - 3000 and now you can see we can hover
333:57 - over this like it like the like button
334:00 - you can like this we can remove the like
334:02 - if we click this you can see we are
334:04 - opening a nice model but we don't want a
334:07 - lot of white shadow you can see this is
334:09 - a much the opacity is much cleaner so we
334:14 - can improve our dialogue let's go to the
334:16 - dialogue and this is our dialogue
334:18 - overlay we can fix this so BG background
334:20 - 80. so instead of 80 let's do a 20 so it
334:23 - will refresh if you click this now it is
334:25 - much clearer let's do it then we can
334:28 - remove the blood as well let's remove
334:30 - the blur or we can keep it it's the blur
334:33 - looks good so now it's much much clearer
334:36 - here we can reply to the Tweet so just
334:39 - we need to create a new server component
334:42 - over here but remember but we can not
334:44 - use a server component inside client
334:48 - Commodore and am I right yeah here you
334:50 - can see Server component inside line
334:52 - component so you can summarize the
334:54 - differences between server component and
334:56 - client components here so on the top
334:58 - level if you can see this is our page
335:00 - and this is a server component in the we
335:03 - have another server component in this we
335:05 - can have a client component but in the
335:08 - client component we cannot have a server
335:11 - server component that is the main point
335:13 - in the server component we can have
335:15 - client component that's the thing to
335:18 - remember and which is pretty obvious if
335:20 - you think that if your client component
335:22 - has some interactivity and it is already
335:24 - gone to client which means this is
335:28 - publicly available and our server code
335:30 - is private that's why we can't code
335:33 - anything server inside our client and if
335:36 - we have a server component inside it we
335:38 - can create a client component this is
335:40 - pretty obvious and easy to remember this
335:42 - is a technique I use to remember which
335:45 - is client and what is this so in the
335:47 - client component we cannot declare a
335:50 - server action or anything okay so to use
335:53 - it basically we will use in the mutation
335:55 - if we go to the mutation just like we
335:57 - are using the light to it unlike tweet
336:00 - actions we will use this actions to do
336:02 - our stuff While submitting the reply so
336:05 - here we will Implement our reply thing
336:08 - let's create another model in the
336:10 - component in the client component it
336:13 - will create a new component which is
336:15 - reply moral or reply dialog dot TSX and
336:19 - it is a client component by default use
336:22 - server not your server use client
336:26 - rafce here we can say reply dialog here
336:29 - we can cut the whole thing and we can
336:32 - import the reply dialog just like that
336:35 - save this thing now we need to cut this
336:37 - also paste here import this everything
336:41 - is good okay so now it's good what we
336:43 - need we need to style it a little bit so
336:46 - go to this we need a tweet here so
336:49 - basically we need the Tweet details like
336:51 - this so we we just we are just rendering
336:54 - this whole component and we are showing
336:56 - it over here and then we will show a
336:58 - reply box here so what we can do we can
337:01 - import that tweet again inside this
337:03 - button that that would be not a good
337:06 - approach we can copy the whole thing and
337:08 - we can show this over here so this is
337:10 - only for image so if we try to reply
337:13 - this you can see we are only rendering
337:15 - the text and then we are showing the
337:17 - then the Twitter is showing the image
337:19 - URL we can actually remove the both of
337:22 - the things so if we do this yeah so we
337:24 - need to copy the whole thing copy the
337:26 - whole thing we are not going to copy
337:28 - everything but you will see what we are
337:30 - doing here remove the title as we don't
337:31 - need it remove the description as well
337:33 - remove the header we only need the
337:35 - content we need we don't need this yeah
337:38 - we need the username full name text we
337:42 - need the date you need to text and then
337:45 - we don't need this whole bottom thing so
337:47 - the data we need is we need the Tweet so
337:50 - replied dialog procs so here we will
337:52 - Define our props we will say type is
337:54 - reply dialog props which is tweet and
337:57 - that's all we need it will accept tweet
338:00 - import the stuff here like that import
338:03 - everything and here we will say it is
338:07 - the type of tweet which we are getting
338:09 - over here same import this icon and if
338:12 - we save this and we will go and we will
338:14 - see how it is looking refresh the whole
338:16 - thing it's slow it it is stuck sometimes
338:19 - but yeah let's go to localhost 3000 you
338:22 - can this happens sometimes when we are
338:25 - developing in early stage product okay
338:27 - it is stuck so we have to open okay so
338:30 - our browser is hang I don't know why it
338:33 - is happening but it may happen now it is
338:36 - gone we will open the localhost okay so
338:39 - we are not passing the tweet from here
338:40 - so we will say the two it is to it save
338:44 - it is getting us in the problem so what
338:47 - I will do I will open my new window and
338:49 - I will use this over here yeah so if we
338:52 - open this you can see we can see our
338:55 - model here oh it is not opening here
338:57 - yeah we can see if it open this we can
339:00 - see this but we don't want this inside
339:03 - or
339:05 - so the problem we are facing over here
339:07 - if we open this reply model this is the
339:10 - thing which we don't need what is this
339:12 - so let's PG slate this is a new tweet BG
339:15 - slate this is we don't need where is
339:18 - this yeah so this thing we don't need
339:19 - and the text is gray let's use that text
339:23 - white and we have to make this dialog
339:26 - content look as our tweet so for that we
339:29 - need to give some classes to it like PG
339:31 - black and the classes we are giving
339:33 - let's go here yeah it's good we can give
339:37 - it BG black it's black we don't need the
339:39 - Border as well so border is none it's
339:42 - good text is white everywhere we can
339:45 - remove this now it is looking much
339:47 - better and if you go to the Tweet here
339:50 - you can see this is over Avatar which we
339:52 - have removed by assuming it as a picture
339:54 - so now it's good we can give some space
339:57 - to it so m y 4 yeah so let's assume a
340:01 - big tweet create a big tweet generate
340:04 - paragraph it hit enter or tweet
340:06 - submitted in if you open this yeah
340:09 - now this is looking just like a Twitter
340:12 - timeline and this is awesome you can see
340:15 - now we can open tweet and now we want to
340:17 - reply to this tweet for that we need to
340:20 - create a reply thing or we can say the
340:22 - input thing so we will go to Twitter
340:24 - again here we are if we click over here
340:27 - you can see replying to pranzel Sony so
340:29 - we can also show that replying to this
340:31 - for that create another division
340:33 - replying to at the rate and here we will
340:37 - show the username tweet.user profile
340:39 - load username and if we go to here you
340:42 - can see replying to here and we can now
340:44 - use our input box here create a division
340:47 - we will use the input from UI it's
340:50 - totally good to use anything like one
340:53 - change or anything so save this this is
340:56 - our input here we can submit our reply
340:58 - let's make this look better just like
341:01 - our tweet so if we go to main component
341:04 - if we go to the compose compose Street
341:07 - form here you can see the all input put
341:10 - classes and we will use exact classes
341:12 - over here because it is much much
341:14 - similar you can see now it is good and
341:16 - we can use this simple input field we
341:18 - need to show the current user the author
341:20 - as well so what we can do we can name it
341:23 - Plex W full items Center space x 4 here
341:29 - we can create a author as well so
341:32 - instead of a dummy Avatar you can show
341:35 - the original Avatar of user now we have
341:37 - something we can type it's looking good
341:40 - let's make it too so now if we open any
341:42 - of the window you can see we can type
341:44 - over here and we can reply and that's
341:45 - okay that's cool I want to give it
341:48 - maximum width of LG let's see how it
341:51 - works SM after SM we are giving the
341:54 - maximum weight of LC so instead of that
341:56 - what I will do I will give it Excel
341:58 - maximum width of MD let's see what we
342:01 - are giving after SM maximum width of LG
342:04 - okay okay okay if I remove this after SM
342:07 - maximum width of let's go with SM yeah
342:10 - we have to refresh this let's go with
342:12 - Excel now if you open this you can see
342:13 - this is bigger we want to make it much
342:16 - bigger so we can go with to excel so if
342:18 - we open this you can see this is better
342:19 - this is the only single tweet and it is
342:22 - rendered twice yeah this looks good this
342:24 - looks good now we can reply something
342:25 - here and let's assume we have a bigger
342:27 - reply which is standard paragraph so it
342:30 - should get bigger so instead of text
342:32 - instead of input we can use something
342:34 - called text area if you hit save you can
342:37 - see this is bigger if you hit you can
342:40 - see we can also scroll and it's better
342:42 - and open this you can see we can see all
342:45 - the things over here this is good now we
342:47 - just need to submit this reply so for
342:49 - that we can use a use form book or
342:53 - something similar but what we are doing
342:55 - we are just we will just use the use
342:57 - State Hook and the on change this is
343:00 - simple and we can just use it reply
343:02 - reply text which is empty import it is
343:06 - string you can say but it is also it is
343:09 - already assuming it is a string because
343:10 - we have empty string over here so we can
343:13 - say it the value of it is apply text and
343:16 - when we on change it it has event and we
343:19 - can set the reply text to even though
343:21 - Target dot value just like that save
343:24 - this thing behave text area and now if
343:27 - we hit submit if you go to Twitter and
343:30 - we can show it reply button just like in
343:33 - the compose form tweet button so copy
343:37 - this thing also here I will paste this
343:39 - and we will see how it is looking so you
343:42 - can see we can tweet instead of tweet we
343:44 - will say reply and this is below the
343:47 - container so we can cut this container
343:49 - and we can paste it here so it is below
343:51 - the container you can see this is our
343:53 - container we can show a little border
343:55 - here so instead of this you can see this
343:57 - is our reply area and here we have over
343:59 - reply button which is exactly similar to
344:01 - just like Twitter here we can open this
344:04 - let's try to submit a reply and when we
344:07 - click on this button we will submit
344:10 - something we will do something so what
344:11 - we will do when with this is clicked we
344:13 - will submit a server action just like
344:15 - like tweet so in the like date whereas I
344:19 - would like tweet component close
344:21 - everything go to the like button here
344:23 - this is what we are going to do so we
344:25 - will copy the whole thing the whole
344:27 - thing copy this paste over here copy
344:29 - this paste over here instead of using
344:31 - this browser client now we can use the
344:34 - use supervis from our authentication
344:36 - provider Super Bass Just like that and
344:39 - here we can say super based dot so yeah
344:42 - like that here we can get the user and
344:45 - here we can do the things we like import
344:47 - the use transition Hook from react is
344:50 - reply pending start transition and here
344:53 - we can instead of it's like pending we
344:55 - can show its reply pending and here
344:57 - instead of this we can submit a or we
345:00 - can say insert insert a row into the DB
345:05 - which DB the reply table like that it is
345:08 - simple and we need to do something so we
345:11 - will do this and we can import the toast
345:13 - to show some Tosh please log into reply
345:16 - to reply please login to reply to a
345:20 - tweet and if this is called
345:21 - authentication failed that's good
345:23 - everything looks good now and we just
345:25 - need to insert Arrow into our database
345:27 - for that we'll go to our mutation here
345:30 - we will say export const reply and reply
345:33 - yeah that's good reply async and it will
345:37 - accept one thing it will accept tweet ID
345:39 - it can accept two things basically it
345:41 - can accept two things it can accept
345:43 - tweet ID for now just accept the Tweet
345:46 - ID and in the future I will tell you
345:48 - what it can accept more tweet ID which
345:51 - is string just like that and here we
345:53 - will await and DB dot insert which table
345:57 - you want to insert so we can say we we
345:59 - want to insert in the replies table so
346:01 - this table we want to insert it accepts
346:03 - two things text user ID and tweet ID or
346:06 - reply ID yeah we need the user ID as
346:08 - well this is if this is a must can say
346:11 - user ID which is string dot values here
346:14 - we can pass down the values the text is
346:16 - yeah basically we also need the text
346:18 - which is reply text copy this it is also
346:22 - a string so here we can say the text is
346:24 - reply text the user ID is user ID the
346:28 - Tweet ID is tweet ID that's all now it
346:31 - will work like Char that's all we need
346:34 - here if you want you can let's assume
346:36 - your replies HTML you are submitting
346:39 - Rich text into your database so you can
346:41 - sanitize or you can verify your reply
346:43 - text before saving to your DP so here
346:46 - you can see you can verify or instead of
346:49 - saying verify what we can say you can
346:51 - check the reply text is 2 3 or not wait
346:56 - for now we will just check if this is a
346:59 - string or not for that we can we can
347:01 - directly do if not reply which is which
347:04 - can't be happen because we are checking
347:06 - if it is reply here we can say if reply
347:08 - text is no not equal to empty string or
347:11 - we can say yeah then do this otherwise
347:13 - don't do this so we can say if reply is
347:15 - equal to empty string or reply text Dot
347:19 - length which is the reply text length is
347:22 - less than one character or two character
347:25 - okay okay so we can allow one character
347:27 - reply that's totally good we can return
347:30 - simply we can return so now we just need
347:32 - to use this reply over here so reply
347:35 - here it will accept few things reply
347:37 - text it will accept tweet ID it will
347:39 - accept user ID and we have all of them
347:41 - we have user dot ID the Tweet ID is we
347:44 - have tweet dot tweet details dot ID save
347:48 - this and when this is successfully done
347:50 - what we need to do we need to close the
347:53 - model which model we need to close the
347:55 - reply model for that first we have to
347:57 - control the model if we can open this or
347:59 - not so here we can define a state use
348:01 - State like that is reply mode if replied
348:06 - dialog open initially it is false
348:08 - initially it is false basically and here
348:11 - we can say on change set is reply change
348:14 - and yeah we can control it by status
348:17 - reply change and it is open which is is
348:20 - reply dialog open like that and we can
348:23 - make it close like that so start
348:26 - transition reply dot then here we can
348:29 - make it false we can disable this button
348:32 - and if we get something error we can
348:35 - show dot error something
348:38 - went wrong with Divi save this thing
348:41 - here we are we will click on here this
348:44 - is a reply we will click on reply and it
348:47 - is closed as you can see and now if we
348:50 - go to a database in the replies we
348:53 - should be able to see one row of our
348:56 - first reply so you can see this is a
348:57 - reply and this is a tweet and it's
349:00 - totally awesome tweet ID we have tweet
349:02 - ID and we have everything we need here
349:04 - and that is awesome that is totally
349:06 - awesome so now if you this is cheat if
349:09 - you click on the select record you can
349:11 - see it will select a record from the
349:13 - yeah this is a reply we have submitted
349:15 - to test it and B now can render this
349:18 - reply if we click on this whole tweet we
349:21 - should be able to see the reply so for
349:22 - that what we can do if we click on this
349:24 - reply we can show the reply account as
349:27 - well so now for this we have to create a
349:30 - new UI for that so if you go to the
349:33 - Tweet component here you can say when
349:35 - the user clicks this division we should
349:38 - open something or we should redirect to
349:41 - something okay and also we can hover
349:44 - when this is over PG white five so when
349:48 - this is hovered we are not able to say
349:49 - let's do it 20 refresh this and it will
349:52 - work sometime it code is stuck now you
349:55 - can see we are getting this white here
349:57 - so let's do it then refresh this is slow
350:00 - I can say this is slow now yeah five
350:03 - would work and let's give it some
350:04 - transition and also some timing so it
350:08 - will work let's open localhost again in
350:10 - the new window yeah it's good just like
350:12 - Twitter a little bit of whiteness and
350:14 - when we click this just like Twitter we
350:16 - should also make this cursor as a cursor
350:18 - pointer cursor pointer but the problem
350:21 - is for that if we open the localhost if
350:24 - we click this this is not opening okay
350:26 - so it is it is slow let's open again in
350:29 - new window if you click this you can see
350:30 - we are opening a new model which is
350:33 - totally good the model is good and if we
350:35 - click this we are clicking two things we
350:37 - are clicking this model and we are
350:39 - clicking this so if we click this this
350:41 - should open a new window but the problem
350:43 - is if we click this it will also get
350:46 - this clicked note this if we click this
350:48 - okay so let me tell you what I'm saying
350:50 - console Dot Lock hold tweet clicked this
350:54 - is hold bit clicked and if we go to the
350:57 - reply dialog here you can remove this
351:00 - yeah here you can see console.log we
351:03 - apply dialog clicked so now if you open
351:06 - the console if you
351:09 - I'm not sure why it is slow but it is
351:11 - painfully slow let's open it inside
351:13 - Firefox so you can see this is our
351:15 - Twitter and it is looking dope I can say
351:18 - this is looking dope if we go to tools
351:20 - if we go to browser tools if we go to
351:23 - browser console this is our console you
351:25 - can see okay browser console mode yeah
351:27 - and if I click on the street if I click
351:30 - on the street and nothing is happening
351:32 - or is the correct console let me open
351:34 - web developer tools this over console
351:36 - yeah so the problem I'm saying is if I
351:39 - click on this whole tweet this whole
351:41 - tweet clicked if I click on this button
351:43 - then first first of all the whole tweet
351:46 - will be clicked and then this button
351:49 - will be clicked so replied I look
351:50 - clicked hold tweet click so we want to
351:53 - prevent clicking the whole tweet when we
351:55 - click on that button so for that we can
351:58 - separate these things out so instead of
352:00 - clicking the whole tweet we can
352:02 - differentiate what we want to click so
352:04 - this is the whole division this is the
352:05 - whole text division and we can only make
352:09 - this thing clicked that's what I'm
352:11 - saying and we can use this all fancy
352:14 - animation over here so now our problem
352:16 - is gone and we should be able to fix
352:19 - this so let me open my browser as well
352:21 - localhost this is our console now you
352:25 - can see we are getting something and if
352:27 - I click on this whole it clicks if I
352:29 - click on this reply dialog clicked so
352:32 - there is no conflict in clicking between
352:34 - these things now if this is clicked what
352:37 - we want now if this is clicked this is
352:39 - opening reply this is okay this is
352:41 - totally fine if this is clicked we want
352:43 - to open a new timeline where the user
352:46 - can see all the replies of a tweet for
352:49 - that we can route this to whole
352:51 - different router so for that we can use
352:54 - next router const noter is equal to use
352:57 - router import from next router here we
353:00 - can redirect the user to tweet likes so
353:03 - if you go to Twitter and if you click on
353:06 - a single tweet like this if you click on
353:08 - the street you can see this is opening
353:10 - my username and then status and then the
353:13 - Tweet ID and then we can see all the
353:15 - tweets reply here
353:17 - so the same thing we want to do but we
353:19 - can make it a little bit of Easier by
353:21 - doing something if we click on this we
353:25 - can redirect the user to a nested route
353:28 - in the app directory we will create a
353:30 - new page and then we will redirect to
353:32 - there so you can say outer dot push this
353:35 - is spectix which means this now we can
353:38 - stream interpolate and you can use logic
353:41 - inside our string so we will say
353:43 - redirect the user to this tweet ID so we
353:45 - can set tweet slash the Tweet ID so
353:48 - tweet dot tweet details dot ID so
353:51 - redirect the user to this route and
353:53 - where you can see all this stuff so
353:55 - remove this now it is hang again I'm not
353:58 - sure why it is okay we are not able to
354:00 - see any of the tweets that's the part
354:02 - comes this part happens when we are
354:05 - building something new with the latest
354:06 - tech stack let's open this is in Firefox
354:10 - localhost 3000 we are getting empty over
354:14 - here can we use a use router think or
354:16 - can't I'm not sure
354:18 - so there is something router dot refresh
354:20 - yeah we have to use it from next
354:22 - navigation that's the problem we are
354:24 - getting here so now it should work it
354:26 - has router dot back forward push good so
354:29 - now it will work I think yeah it's
354:31 - working open the whole thing now if you
354:33 - click this you can see we are getting
354:36 - redirected to this tweet if we go back
354:38 - this is good if we click on this we are
354:41 - seeing the new reply tab or the new new
354:44 - reply dialog if you click this we are
354:47 - getting redirected to the Tweet so now
354:49 - we need to create a nested route and we
354:51 - will fetch all the replies or to treat
354:54 - building this part now if you search
354:57 - Dynamic routes next yes you will learn
354:59 - on this page routing in the routing you
355:02 - have Dynamic routes you can create a
355:05 - folder name inside folder name you can
355:07 - create page.tsx
355:09 - for your Dynamic routes
355:12 - just like here so if you now go to our
355:15 - application so if you go to Source in
355:19 - the app router and in the app you have
355:21 - page which is our main page let's create
355:23 - a new thing actually we don't need any
355:25 - API so we can we can delete this whole
355:27 - folder we can delete this whole thing
355:29 - here you can create a new folder which
355:31 - is tweets or tweet yeah tweet is good
355:34 - and inside the Tweet you can create a
355:37 - new folder called ID and inside the ID
355:39 - you can create page dot TSX it will
355:42 - render over tweet and basically what you
355:45 - can do we need the layout also we need
355:48 - the layout also so we can use this over
355:52 - here I think it will work just like
355:54 - charm so this is our layout and in the
355:56 - layout we need here left sidebar and
355:59 - right sidebar both all the things we
356:01 - need here so if you go to
356:03 - layout.tsx here in the body inside the
356:06 - body we can remove this component and we
356:08 - can import this left sidebar and we can
356:10 - import our right sidebar both links and
356:13 - if we go to our main page here we can
356:15 - remove this and we will render only one
356:18 - component which is main component save
356:20 - this thing save this thing now we have
356:22 - this left sidebar and right sidebar
356:24 - everywhere okay
356:26 - so if you go to here if you refresh this
356:29 - let's go to localhost 3000 and see if
356:32 - this is working and here we can Define
356:34 - our rafce here you can see this is home
356:37 - page here we will call it to it page
356:40 - this is tweet page save this now we can
356:44 - you can see this is working just like
356:46 - previously if you click here we can
356:48 - reply if you click here it will redirect
356:51 - us to the thesis tweet page you can see
356:53 - it's good so now if you go to the main
356:56 - component here we can copy the whole
356:58 - this thing over here which is this this
357:01 - is manageable and here we will render
357:03 - all our twists not all the tips here we
357:06 - need only one tweet which is we are
357:08 - getting from const router is equal to
357:11 - use router which is from next navigation
357:14 - that's console.log the okay so we need
357:17 - this ID basically we need this router
357:21 - query so can we do this from next router
357:24 - I'm not sure let's look to Theory out
357:26 - and we will see okay so we can't use
357:29 - router here we can use the navigation
357:31 - but we want the queries so how can we
357:34 - get the query okay so we can get the
357:36 - query from use path name and all the
357:39 - things available here so navigation here
357:42 - we have some things where you use params
357:44 - as you selected okay so you can use this
357:47 - use params and let's log this out and
357:51 - see what it gives us use programs only
357:53 - works in client components is a use
357:55 - cleaning okay so it is saying that it
357:57 - only works in client components so now
357:59 - what we can do can we get the use server
358:03 - okay okay so we need the query basically
358:05 - so we are directly getting the query
358:07 - here that's totally awesome we don't
358:09 - need anything we are getting like this
358:12 - so in the here we have ID and that's
358:15 - good see that generating generate static
358:18 - params page to learn how to generate
358:20 - parents that's totally good but this is
358:22 - let's remove this and now we will lock
358:24 - the parents and we we should see the ID
358:27 - over here you can see we have ID which
358:30 - is a tweet ID and now we can render our
358:33 - tweet here for that const tweet we will
358:36 - import our DB we will say select Dot
358:39 - from when we need from tweets basically
358:42 - we need the Tweet we need to join
358:43 - something as well we need to do a lot of
358:45 - things but for now let's join let's get
358:48 - the tweet and show the Tweet over here
358:50 - we need to show the tweet from the
358:52 - client component it accepts something it
358:55 - accepts his liked or not so we need to
358:57 - find out his liked as well and also we
359:00 - need we need one thing which is this
359:02 - user ID over here import everything we
359:05 - need and we can make it a sync as well
359:07 - here we can Define the things we need
359:09 - here we can say yeah so DB await don't
359:12 - forget the await here we are saying DB
359:14 - to select and just like in the get
359:17 - tweets here we can select what we need
359:20 - basically we need to copy the whole
359:21 - thing we need to copy the whole thing we
359:24 - are saying that the current ID this user
359:27 - the current ID is user data dot user dot
359:30 - ID if this exists yeah if user
359:33 - data.user.id exists then do this
359:35 - otherwise not we have to import all the
359:37 - likes table all the profiles as well and
359:39 - we don't need the order by but we need
359:43 - one thing and equal equal current user
359:47 - ID is user to this thing import exist as
359:50 - well so you can see we are importing a
359:51 - lot of things and we are joining we are
359:53 - joining profiles who has the submitted
359:56 - this state everything but we need a few
359:58 - more things here what we need we need to
360:00 - find out this tweet only single tweet
360:03 - basically you can see we have params.id
360:06 - inside the patterns so we don't need the
360:08 - all tweets from select this from tweets
360:11 - but basically instead of saying limit
360:13 - dot you can say where equal just like it
360:16 - where the equal is fields.id is equal to
360:20 - params.id like that so it will give us
360:22 - the current rate only so now if you lock
360:24 - this tweet console Dot Lock to it here
360:27 - we will see what we are getting to be
360:29 - taught yeah now we have the Tweet to so
360:32 - we are only getting the single why it is
360:34 - to limit select from left join so we can
360:38 - do the where here that's good it will
360:40 - only return us one tweet so let's
360:42 - comment this out for now and see what we
360:45 - are getting yeah we got this we got one
360:47 - tweet we code our one tweet which is
360:50 - this profiles has like true because we
360:52 - have like this so if you go to our home
360:55 - page this is localhost 3000 if you
360:57 - refresh this let's close this you can
360:59 - see this is a new trade let's go to this
361:02 - state we have liked this to it let's
361:04 - remove our like click click here we are
361:06 - on to this page here we can see we have
361:09 - not liked this to it likes Arnel because
361:11 - likes are zero the user who is the
361:14 - author of the street and the Tweet
361:15 - details we are getting all the details
361:18 - of this tweet that's okay that's good so
361:20 - here what we need we need the first
361:22 - element of the street zeroth element
361:24 - then we can say dot has liked or not and
361:27 - here we can do this instead of this
361:30 - sometime it may return so we can say
361:32 - Boolean has liked we need the likes
361:34 - count so we can set to it 0 tote likes
361:38 - if it is null then zero then we can show
361:41 - the Tweet detail as well tweet tote
361:43 - tweet zero thought that tweets okay it
361:46 - is saying the Tweet is all the details
361:48 - of ya so we need to specify what is the
361:50 - it needs to is detail which is tweet
361:52 - zero dot tweets it needs user profile
361:56 - which is tweet 0 dot profiles now it
362:00 - needs one more thing which is current
362:01 - user ID so we can pass the current user
362:03 - ID as user data dot user dot ID it is
362:06 - not required yeah that's good you can do
362:09 - this it is still saying that okay so we
362:12 - can count the number we can say likes
362:15 - dot so it is giving us a lot of things
362:17 - so we haven't joined all the tweets here
362:19 - so it's not a big thing to let's not
362:23 - show let's go to Twitter and see how
362:26 - Twitter works so this is our Twitter if
362:28 - you click on this we can see all the
362:30 - things here as well so okay that's not a
362:32 - problem let's do that thing as well so
362:35 - if you go to our queries here we are
362:37 - getting queries and here we are getting
362:39 - all the things here so we need the same
362:41 - thing here we can modify this tweet as
362:43 - well if you want one tweet or not so
362:46 - what we can do we can modify this same
362:49 - row as well or we can use this function
362:51 - to get the rows
362:53 - cut this whole thing we will export this
362:55 - export cost modify response is equal to
363:00 - it will get the rows and it will return
363:02 - the rows let's do it any
363:06 - and here we have rows
363:08 - it is saying untyped function calls may
363:11 - not accept type arguments if we remove
363:13 - this thing yeah but we need the type
363:15 - result okay okay so we need to modify a
363:19 - lot of types here I don't want that I
363:21 - want to make it easy so we can get the
363:23 - one tweet from here instead of getting
363:25 - 10 bits instead of limit so we can
363:28 - Define the limit here as well and the
363:30 - Tweet ID as well so we can we can say
363:33 - get single tweet which is basically this
363:37 - is Boolean we can say get single tit is
363:40 - Boolean so if this is true what we can
363:43 - do here instead of awaiting we can we
363:46 - can say query we can modify this query
363:48 - mode and we can say this is let query DB
363:51 - dot select all to this all things order
363:53 - this and we can also pass order by
363:57 - Boolean so what we can do we can say if
364:00 - over by is available then query is equal
364:03 - to query tote this thing query dot order
364:06 - by this here we can say if single tweet
364:10 - if we only want to get the single tweet
364:13 - which we want then we should have the
364:15 - Tweet ID here basically get single tweet
364:18 - and the Tweet ID so if this is true
364:20 - which means we have a string which is
364:22 - get single tweet ID so if this is true
364:24 - then we can say query is equal to query
364:28 - dot where dot where and we can pass down
364:32 - the equal thing we can say tweets dot ID
364:36 - is equal to get single tweet so this is
364:38 - the ID so instead of get single tit we
364:40 - can say get single date ID like that and
364:44 - that's totally awesome and if this is
364:47 - limit is default is if limit is defined
364:49 - I can say limit and this is a number
364:52 - limit is number so we can remove this
364:55 - thing here we can say if limit is
364:57 - defined query is equal to query tote
365:01 - limit and we can pass down the limit
365:04 - just like it it is very easy and after
365:07 - all we can say row is equal to await
365:10 - query const now it will give us all the
365:13 - things we need that's how it will work
365:14 - so if you want to get a single date we
365:16 - can get it from this whole thing we are
365:19 - modifying a single query to use here as
365:23 - well so instead of get tweets copy this
365:26 - thing get bits and yeah here we will go
365:29 - and we will remove the whole thing we'll
365:32 - say get tweets and here we will Define
365:34 - the current user ID the user data dot
365:38 - user dot ID the second thing we need is
365:41 - get single tweet ID yeah so we need the
365:44 - kit single ID and what is the ID payarms
365:46 - dot ID which is single ID order by we
365:49 - and we don't need anything and it will
365:50 - give us the Tweet we don't want so now
365:53 - we can remove this thing and we should
365:55 - all get the thing here
365:58 - tweet.30 dot hash select tweet is
366:01 - possibly undefined so here we can say if
366:04 - to it exist then render this otherwise
366:07 - render something like division no tweet
366:11 - found just like that and we can do this
366:14 - tweet zero thing for all the Tweet here
366:16 - total length dot tweet profile and it
366:21 - will work I'm sure it will work yeah you
366:23 - can see likes is an array and everything
366:25 - is like perfectly charm you can see we
366:29 - are also able to show this tweet over
366:31 - here so we are showing one tweet if we
366:34 - go to localhost when we click on home we
366:36 - should be redirected to home so for that
366:39 - if we go to our left sidebar here we are
366:42 - sending the user to home page so instead
366:46 - of item title lowercase we can send the
366:49 - user to home page so here we can say if
366:53 - item tote title is equal to home then
366:56 - send the user to home page otherwise
366:58 - send the user to their respective title
367:01 - page so let's go to previous page which
367:04 - is our single tweet you can see we are
367:05 - getting the new tweet we can like this
367:08 - to it as well and we are getting the
367:10 - updated tweet if we click on Home Market
367:12 - is still not working why is that left
367:14 - sidebar if item dot title is capital
367:17 - home basically so to fix it we can set
367:20 - to local lowercase and it will work like
367:23 - for now if I click on home you can see
367:26 - we are getting all the tweets if we
367:27 - click on this tweet we will get this to
367:29 - it and we click on again then it will
367:31 - send us to the Tweet again but we don't
367:34 - want that to fix this go to the Tweet
367:36 - here we are sending so instead of this
367:38 - we can use this so if we go to previous
367:41 - our tweet if we click here nothing
367:43 - happened if I click on home yes this is
367:46 - my first tweet click on this you can see
367:48 - we are getting everything nice and easy
367:50 - and we are showing now what we need to
367:52 - do we need to show all the replies here
367:54 - a sheet of tweet we need to show all the
367:56 - replies here reply is also a kind of
367:58 - tweet so basically we will fetch the
368:00 - reply same as we fetch a tweet okay so
368:04 - as you can see how to face them so it is
368:06 - pretty simple with fetching the replies
368:09 - we can say replies is equal to await DB
368:12 - dot query dot what we want to fetch we
368:16 - want to face the replies and we want to
368:18 - fetch the many replies here we can
368:21 - specify the extra columns we need for
368:24 - pitching you can say we want to fetch
368:26 - the profile as well so if we console.log
368:29 - now console.log replace we will be able
368:32 - to see all the replies you can see we
368:34 - are getting all the replies with the
368:36 - profile ID that's totally awesome okay
368:40 - but it is it is fetching all the replies
368:42 - we don't want all the replies we want a
368:44 - very close here we can say we want only
368:47 - replies with discrete page so we can say
368:50 - the so we can specify some things here
368:53 - dot DB dot query let's find out in the
368:56 - drizzle aurum documentation how we can
368:58 - use the query in the documentation index
369:02 - has SQL operator where is this we can
369:05 - directly use the select but I want to
369:07 - use the query thing which is new so
369:09 - where is this query tv.q yeah testing
369:12 - rational query so like this can we
369:14 - select and we can filter it or not yeah
369:18 - so we can filter it just like it so you
369:21 - can save where the equal operator import
369:24 - the equal operator which we have already
369:26 - imported we want to say that replies dot
369:30 - here you can see user dot ID just like
369:32 - that we are saying you reply is dot Okay
369:35 - so
369:36 - it replies response let's do it we want
369:39 - to say replies dot ID note ID we want to
369:41 - say the Tweet ID is equal to the parents
369:44 - dot ID so now it will fetch only one
369:47 - reply with the current Loop ID not one
369:50 - reply with it will fetch all the replies
369:53 - which the current tweet ID so let's log
369:57 - this out and we will see what is
369:58 - happening over here now you can see we
370:00 - are only getting one reply which I have
370:03 - created for this tweet if we go to home
370:05 - and you can configure this home thing if
370:08 - you go to Left sidebar here we are
370:10 - saying that if the item dot title is
370:12 - home then we are sending the user to
370:15 - backslash which means home now here
370:17 - let's create a new date new fresh tweet
370:20 - hit enter this is our fresh tweet we
370:22 - will click on this if we go here you can
370:24 - see over array is empty which means our
370:27 - replies are empty if we create a new
370:29 - reply so this is a new reply and click
370:34 - reply now you can see we so this is a
370:37 - new reply here and if you go to the
370:39 - mutation here we are revalidating our
370:42 - path that's why we have our reply just
370:44 - like that now what we need to do is we
370:47 - need to render this whole thing over
370:49 - here so we can use the same code just
370:51 - like it we can use the same code over
370:53 - here and we can render all the
370:56 - applies.map we can say reply replies
371:00 - response I think yeah and now we can
371:02 - render the whole thing here let's create
371:05 - a fragment and do this instead of
371:07 - fragment let's create a division with
371:09 - key of reply dot ID and paste everything
371:13 - we have copied from that tweet so this
371:16 - is our Circle this is a whole tweet okay
371:18 - so we can specify the Tweet ID here we
371:21 - can remove this extra division this is a
371:23 - tweet tote so here we have our reply so
371:25 - instead of tweet what we will do we will
371:28 - cut everything and we will paste reply
371:30 - dot profile dot full name reply dot
371:34 - profile dot username import this thing
371:37 - we can say reply tote when this is
371:40 - created so we don't have this filter so
371:42 - we can remove this thing as well what I
371:44 - would suggest you currently we are
371:46 - saving all the replies in a new reply
371:50 - table but you can save the whole thing
371:53 - in the tweetable as well you just need
371:55 - to create it a new column in the Tweet
371:58 - table so if you can go to schema you can
372:01 - create a new column which is is reply
372:05 - and you can say this is a Boolean so you
372:08 - just need a Boolean field which will say
372:10 - if this tweet is a reply then if it is a
372:12 - reply don't show on the home timeline it
372:15 - show on the Tweet page otherwise if it
372:17 - is a reply then it's good so we can do
372:20 - that that's totally up to you how you
372:22 - want to save this if you created a new
372:24 - table but that's not necessary at all
372:27 - now this is our tweet text so here we
372:29 - will render our reply dot text now we
372:33 - don't need to click this and we can
372:36 - remove everything from here we can
372:38 - remove this as well and that's how we
372:41 - are rendering all of our replies here so
372:44 - now if you go to here you can see this
372:46 - is a new reply and we are getting this
372:48 - reply over here and we can remove our
372:50 - cursor pointer over thing as well that's
372:53 - totally awesome if you go to home if you
372:55 - click on this you can see this is a
372:56 - reply another reply which is built which
372:58 - belongs to this tweet if you go here if
373:01 - you go to this this doesn't have any
373:03 - reply submit a reply hit reply and here
373:07 - you can see we have our reply and it is
373:10 - being rendered nice and easy go to here
373:13 - this also has doesn't this hasn't any
373:16 - reply this has two replies this tweet
373:19 - has no replies I'm just finding out if
373:23 - it is looking cool or not let's submit
373:25 - another reply another reply this is so
373:29 - cool it's good so let's hit reply and
373:32 - here you can see we are rendering
373:34 - replies here as well okay and it is from
373:37 - Club of quarters let's submit a reply
373:39 - from another account I will go to my new
373:41 - account which is new page I will go to
373:43 - localhost I will go here I will see two
373:46 - tweets I will apply I am replying to
373:50 - another from another account like this
373:52 - if you hit reply you can see YT bro box
373:56 - this is our current username and we are
373:58 - reply and here you can also see okay hit
374:01 - note here here you can see we are
374:03 - getting everything nice and easy so
374:05 - that's all that's all for this video we
374:08 - have built a lot of features we have
374:10 - built a lot of things we can also like
374:13 - this tweet and this is stop everything
374:15 - is looking good to me yeah this is now
374:18 - one this has now 2 likes so we have
374:20 - learned how to fetch the tables using
374:23 - drizzle orm we have learned how to reply
374:25 - to a tweet how to show the tweets how to
374:27 - do everything now if you want to learn
374:30 - more check out my course on
374:32 - cluboforders.com check out some more
374:35 - advanced courses where you can learn how
374:37 - to handle all the more complex stuff as
374:39 - well but yeah if you want to learn for
374:42 - free I also have some tutorials on my
374:44 - channel where you can learn everything
374:45 - for free but that's all for now and this
374:48 - is our Twitter clone and that's all we
374:50 - are creating okay if you want some more
374:53 - features you can Implement basically
374:55 - this is a simple approach where you can
374:57 - do all this stuff this is a similar
374:59 - approach so we will end our Twitter
375:01 - series here and I will see you in some
375:03 - another tutorial or seeing some another
375:05 - series thank you very much