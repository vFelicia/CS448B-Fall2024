00:00 - Hey guys, hackers, Floyd here. And in this 
video, we're going to get started with the web  
00:04 - application penetration testing series. Alright, 
so a lot of you guys have been asking for this,  
00:09 - mostly because you want to learn the art of bug 
bounty. And here is the series. So have worked  
00:15 - really, really hard on, you know, making it as 
comprehensive as possible, we're going to get  
00:19 - started with setting up burp suite. So for those 
of you who don't know, what works, who it is,  
00:24 - burp suite is essentially an integrated 
platform for performing security testing  
00:28 - of web applications. Alright, so the first thing 
you need to understand is that it will allow us to  
00:34 - intercept the data being sent between your browser 
and the web application. So it's, it's a great way  
00:40 - of understanding how data is being transferred, 
and how data can be manipulated, be manipulated,  
00:46 - between the client, and obviously, the web 
application. Okay, so the tool we're going to be  
00:52 - using, as I said, is burp suite. And I'm currently 
running power to us. So don't worry, if you're  
00:57 - running Windows or Kali Linux, it doesn't really 
matter, all we need to do is just download and  
01:01 - install burp suite, it's pretty simple to get set 
up, you don't have to register, you just download  
01:06 - the free community version. Now, obviously down 
the line, you might choose to buy the professional  
01:12 - version, which I do recommend and I have used, 
but I don't use it as often I'm not, you know,  
01:18 - specifically a web penetration tester, I'm more of 
a more of an of a web server penetration tester.  
01:28 - So I really work with a different vectors. So 
by default, you can choose to bite that one to  
01:34 - become experienced. And you know, you've chosen 
whether this is the path that you want to pursue,  
01:39 - it's a fantastic path. I know a lot of people who 
you know, make good money with bug bounty. So you  
01:44 - know, it's something that you can look into 
as well. Alright, so let's get started with  
01:48 - setting up the proxy. Alright, so this is the 
intercepting proxy that allows us to, obviously,  
01:53 - to intercept the data being sent to and from the 
client and the, the web, the web application.  
02:01 - So to do that, we need we can just do it through 
Firefox. So the browser I'll be using is Firefox,  
02:05 - you can use whatever you want. And by default, you 
want to go into your preferences that can be found  
02:10 - here preferences, there we are. And you want to 
go all the way into the bottom here. That way it  
02:16 - has the network proxy, and make sure you go into 
settings, and you want to go into manual proxy  
02:22 - configuration. Alright, so this is where we're 
going to configure it to be the localhost with  
02:27 - the port set at 8080. All right, and then you want 
to make sure that this, you use the server proxy  
02:33 - for all protocols. So that is the proxy we're 
going to be using and just hit OK. Alright, and  
02:38 - once that's done, you should be good there. Now 
what you want to do is just open up burp suite, so  
02:43 - you can search for it, or I have it already on my 
on my little Taskbar here. And I don't think I've  
02:49 - updated it for a while. So I probably need to do 
that later. But for now, I'll just close that the  
02:54 - update prompt and it's going to prompt you Welcome 
to burp suite. And it's going to say not depending  
03:01 - on the version that you've chosen to select 
whether you've chosen the community version,  
03:05 - which is what I have here, or the free version, as 
it's called, and you then have the pro version. So  
03:10 - by default, the community version only allows 
you to use a temporary project, if you have the  
03:16 - professional version that allows you to save your 
project, which is, you know, great functionality  
03:21 - as well. So just hit next and you just want 
to use the verb defaults. And just hit start.  
03:27 - And just give that a few seconds to start it up. 
Alright, and I'll explain the interface generally,  
03:32 - but we'll be looking more into how burp works. 
In the next video, I just want to get you set up  
03:37 - with birth in this video, and you understand what 
exactly is going on. Alright, so welcome to birth.  
03:42 - Now by default. Again, it may seem a little bit 
intimidating mostly because if you're a beginner,  
03:48 - you have not heard of any of these of these words 
here and you don't really know what they're doing.  
03:53 - Alright, so by default, you have your target proxy 
spider scan into the repeater, sequencer, decoder,  
03:58 - compare extender, your project options, your user 
options, and alerts, we'll be going through all  
04:03 - of this as we as we, you know, perform real 
world testing on our on our vulnerable on our  
04:10 - vulnerable target, I'll be showing you how to 
set up a dam vulnerable web application soon,  
04:15 - and many others but for now just focus on burp 
suite. Alright, so by default, you want to just  
04:21 - go into proxy. Alright, and for some reason, I 
already have some data here. So you know what, I'm  
04:27 - just going to leave that as it is, I just want to 
turn our intercept off. So we're not intercepting  
04:32 - any traffic as of yet. And you want to go into 
your options. And you want to make sure that your  
04:39 - proxy listeners, as you can see, burp proxy uses 
listeners to receive incoming HTTP requests from  
04:44 - your browser. So you want to make sure that your 
proxy is set as the as the one we set in Firefox,  
04:50 - which is the localhost 120 7.0 point 0.1 and the 
port is 8080 and make sure that that is running.  
04:56 - Alright, you can also create your own and add it 
here and you're going to To remove it, so you get  
05:01 - the idea. Now by default, if I just go back to 
my intercept, if I just go back to my browser,  
05:07 - and this is where the real magic happens, 
if I just, you know, if I just open this,  
05:12 - and I type in a simple test site example.com, and 
I just hit enter, alright, it's going to load it  
05:18 - up here. But if we're going to burp suite, and I 
go into HTTP history, you can see that by default,  
05:24 - there are some Firefox portals. You know, some 
get methods here. But we'll be looking at all of  
05:30 - these methods or requests. By default, you can see 
that the example.com, the example.com, one would,  
05:38 - you know, that we ended, you can see there is a 
get request. And furthermore, if you go down to  
05:42 - the bottom here, you can see there is some more 
information regarding now what a request are sent  
05:48 - to the web application. Or so by default, you can 
see that the host was example.com. And it gives  
05:56 - you more information, like the Accept language, 
the encoding, the connection. And if you look at  
06:02 - the headers, you can see that the header shows, 
you know very clearly, you have your get host,  
06:08 - use agent accept language, the Accept encoding, 
connection, etc, etc. So you might be a little bit  
06:15 - confused if this is your first time hearing about, 
you know, headers, and the request and response  
06:20 - pairs. But don't worry about that we'll get to all 
of this for now, if I just go back into intercept,  
06:25 - and let me just open up my browser here. And 
we open something like the my web, my website,  
06:33 - would you say it just like.com. So before we do 
that, I just want to hit intercept on. Alright,  
06:39 - so now it's going to intercept actively. And we 
just go into Hs pro.com. And I hit go. Alright,  
06:45 - now by default is going to tell me that 
essentially, the mic connection is not secure,  
06:50 - don't worry about this, just go into your and 
just add this as an exception. There we are  
06:56 - made confirm exception. And now it's still not 
going to load the website. And the reason being  
07:02 - is we have not forwarded the request. And they are 
being intercepted by burp suite. Alright, so if I  
07:07 - go into back into burp suite, you can see that it 
has started the intercept process. And by default,  
07:13 - you can see that we need to forward we need to 
forward the request here. So if I just forward it,  
07:21 - let me just for that again, there we are, let 
me just for them for hackers out there. Yeah,  
07:25 - that's the correct one. So all for this again. 
And there. We also know hackers blade should  
07:31 - be up and running. And as you can see, I should 
have loaded the site. Give that a few seconds.  
07:35 - There we are. Alright, so as you can see, that 
is how you intercept the data that is being sent  
07:41 - from the client to the web application. And 
furthermore, that's how you, you can analyze  
07:46 - the data being sent, and furthermore manipulated 
to obviously find vulnerabilities within the web  
07:51 - application. Alright, so irregardless of all 
of this, I know, this was very, very basic,  
07:56 - and it's not really covered anything in terms 
of web application penetration testing. But  
08:01 - don't worry about that, you know, we start off 
really, really simple. And we build on that.  
08:09 - We're going to get started with spidering, more 
specifically spidering, with burp suite. And,  
08:14 - you know, the purpose of this video or this 
tutorial, is to help you understand the  
08:18 - spidering process and how to go about doing 
it with a burp suite. Alright, so there's  
08:23 - going to be a little bit of theory here, but 
I'll be explaining a lot of things. So again,  
08:27 - this video is really focused on understanding 
spidering. Now, before we get started with that, I  
08:33 - just wanted to let you know that the target or our 
web application that we're going to be targeting,  
08:38 - we're going to be attacking is the damn vulnerable 
web application. Now, if you don't know what the  
08:43 - damn vulnerable web application is, that's fine, 
you can just Google it. And I'll probably make a  
08:47 - video on how to get it installed on Kali Linux. 
But what I would recommend if you're, you know,  
08:52 - beginner, or even if you're a professional in 
hacking, probably one of the best things that you  
08:57 - need to have, you know, in your kit is Metasploit 
able to write and for the simple reason that it  
09:02 - contains, first and foremost a vulnerable 
operating system. And secondly, it contains  
09:07 - all the vulnerable web applications that we will 
be using at one stage during this series. Okay,  
09:14 - so we're going to be starting off with the 
damn vulnerable web application. As I said,  
09:18 - it comes pre installed with meta splittable, too. 
So all you need to do is get the local IP address  
09:23 - on your mat, exploitable to virtual machine, 
which in my case is 190 2.1 68 point 1.1 a dupe.  
09:29 - So what I'm going to do is I'm going to open up 
my browser, and I'm just going to open up that  
09:33 - webs that IP address point 1.1 or two, and just 
give it a few seconds to load up. As you can see,  
09:40 - there we are, that's made exploitable too. And 
it's going to prompt us to select what vulnerable  
09:45 - web app we want to use. In this case, we're going 
to select the DV w A, which is the dam vulnerable  
09:51 - web application. So just click on that and it's 
going to ask you for your admin and password in  
09:56 - this case for your username and password Sorry 
about that, in this case Your username is admin  
10:01 - and the password is password. Alright, so just 
hit login, and it's going to log you into the  
10:06 - damn vulnerable web application. Now we'll be 
looking at this at a more in a later video. And  
10:12 - the reason is we have to go through all of these 
options. But for now, if you go to the login,  
10:17 - just remember where it was, if I can just go 
to the security, so to the dam vulnerable web  
10:22 - application security, at the moment, it was high, 
because I was actually performing some tests on  
10:26 - it, but just change it to medium or low. But for 
now, you wouldn't be using it. I was just letting  
10:31 - you know what web application we're going to be 
using. Alright, that being said, let's move on  
10:36 - to burp suite. All right, and we can I can start 
explaining the spidering process. Right. So let  
10:41 - me just open up burp suite. So I've updated it to 
the latest version. I think I'm running Catalina  
10:46 - next now in the previous video, I was running 
parrot. So I think there should be an update,  
10:51 - but I could be wrong. So let's just give that a 
few seconds to start up yet there is an update. So  
10:56 - I'll do that later. And we'll just click on create 
our temporary project and use the bap default and  
11:01 - start that. Okay, so once that starting, let 
me explain what spidering is right now the  
11:07 - purpose of spidering is to identify our scope, 
alright, or what, what we want to scan. Now this  
11:14 - is not exactly scanning, and we'll be looking at 
scanning. But essentially spidering is the process  
11:19 - of mapping out our web application, and is very, 
very useful for finding links and and web forms,  
11:25 - which is also very important because it will 
allow us to then furthermore, attack the web forms  
11:31 - manipulate headers, etc, etc. Right now, when you 
talk about automatic spidering with burp suite,  
11:36 - it essentially when when burp is spidering, 
it follows links and it will, it will start  
11:43 - following links and it will start identifying for 
files, folders and forms from the web application.  
11:48 - And it will, the great thing about this is it will 
record all the requests and responses while it's  
11:55 - performing the the old spidering process. Okay, 
so once you have a burp suite opened up here, you  
12:02 - can let me just expand it. So we have a greater 
picture of what's going on exactly. Sorry, if my  
12:07 - virtual machine is a little bit slow, I need to 
configure it correctly. Anyway, what you want to  
12:12 - do is we have looked at the proxy check section, 
let's look at the spider section. And in here,  
12:17 - this is a very, very simple menu and to understand 
it, you can see that we have two tabs available,  
12:21 - we have the control tab and we have the options 
tab. Alright, the control tab. Essentially,  
12:27 - if we just click if I just look, if we look at it, 
as you can see, these settings are used to monitor  
12:31 - and control the web spider. So it allows you to 
stop to start and stop the burp spidering. And  
12:37 - you can also clear the cues. Alright, when you 
look at the options, which is right here, sorry  
12:43 - about that, when you look at the options, there 
are a lot of options, we'll be looking at them,  
12:46 - I will be looking at them in a second. Sorry 
about that, I actually got an email, apologies  
12:52 - that. Let's get started. Now with the control 
section. So the control section, it will all  
12:58 - we are able to control the spider status where we 
can stop it and started and you know, furthermore,  
13:04 - we can clear the cues that already exists there. 
Alright, we then have the spider scope where we  
13:10 - can, we can define our own scope. And depending 
on what we want to spider, we look at that in a  
13:16 - few seconds. And finally, we look at the well if 
we look in the Options section here, we have the  
13:23 - crawler settings which allow us to specify the way 
the spider is going to crawl for the web content  
13:29 - on the web application, we'll be looking at the 
maximum link depth and what that means passive  
13:34 - spidering that allows us to essentially spider to 
continue spidering when we are looking through or  
13:40 - we're going through the web application, we're 
performing requests and responses when we're  
13:46 - performing requests. As for the form submission, 
this is probably something that we'll be looking  
13:50 - at in the next video and we'll be doing this. 
Practically we will be actually performing the  
13:55 - we'll be performing the spidering process. But 
for now, let me see what else Yes, the request  
14:02 - headers. The request headers are used to you can 
manipulate essentially the headers. If you've  
14:09 - learned about HTTP headers, by the way, I really 
want to cover HTTP because it's very important  
14:13 - that you understand how the ad is work. But we'll 
be looking at this all in advance. But now let's  
14:18 - start off with the spider status. Well, not really 
with the spider status. But looking at the control  
14:25 - tab. If you look at the spider scope, you can see 
that you can it will use the default suite scope,  
14:30 - which is defined in the target tab. If you just 
click on use a custom scope, you can see that  
14:35 - Okay, first, you over, if you just click on this 
little cog here, you can restore the default, you  
14:41 - can load your own and you can save the options. 
So that's just to do with that. Now when you talk  
14:45 - about using the advanced scope here is where you 
can essentially this is where you specify what you  
14:52 - want to map so you can specify a host, the port, 
etc, etc. Okay, again, we'll be looking at all  
14:59 - of this as We move along. But for now, we're just 
going to use the default suite scope, we can just,  
15:04 - if once you click on that, it's going to start the 
spidering process, but we don't need it right now.  
15:09 - So I'm just going to come just going to pause 
it. And if we move on to the options now the  
15:13 - Options tab has a lot of stuff that we need to 
look into. First and foremost, we have the CRO,  
15:18 - the crawler settings. Alright. So when you're 
talking about the basic options, for example,  
15:23 - we can specify what the spider will crawl for. 
So it you can choose to select for robots,  
15:30 - the robots dot txt file, which is very important 
because it shows you, you know, exclusions,  
15:34 - you then can detect, you can ignore the links to 
non text content, you can request the root of all  
15:41 - directories very important stuff. But again, 
you can customize this to your liking. Now,  
15:45 - one of the things I would recommend that you'd 
not touch with, if you do not know what you're  
15:48 - doing yet is the maximum link. That's right, the 
maximum link depth is essentially the number of  
15:55 - links you want the spider to, to essentially, to 
crawl or to map. Now by default five is in my,  
16:03 - in my, in my situation, or in my case, what I 
like doing is alternating between three to five,  
16:09 - anything higher than that will usually overload 
the web application, and it will cause it to lag  
16:15 - or to respond very, very slowly. And, you know, 
again, that might not mean a lot right now,  
16:21 - but trust me, when you'll actually be performing 
the penetration test on the web application,  
16:25 - you really need a good response. Otherwise, 
you have your time to live, etc, etc. Okay,  
16:32 - so let's look at what passive spidering is, 
alright, so as passive spidering. And said,  
16:36 - is essentially just, it allows you to continue 
scanning, you know, or going through, or  
16:42 - actually performing your requests how as as it, it 
essentially allows you to continue the spidering  
16:50 - process as you're performing any other tasks. 
So as you can see, passes by during monitors,  
16:54 - monitors traffic through the burp proxy to update 
the sitemap without making any new requests,  
17:00 - right. So passively spiders you browse, you can 
also select the link depth associated with proxy  
17:05 - requests now this, I would recommend keeping 
it at zero to two. And that's because again,  
17:09 - you do not want a very, very deep alert link 
depth in the sense that you're also going to  
17:14 - be performing your own requests, and you'll be 
doing many other things you could be looking  
17:18 - at the decoder or you could be looking 
at, you could be focusing on the target,  
17:22 - and you don't want it again to to slow 
down the web application. Alright,  
17:28 - so form submission. Again, this is something that 
I said we'll be talking about in the next video,  
17:32 - because it is quite advanced. And we'll get 
started with the damn vulnerable web application  
17:36 - there. Moving on to the spider engine, we'll be 
looking at application login as well. But for now,  
17:42 - just we'll just keep over that when we talk 
about the spider engine. Alright, these settings  
17:50 - control the engineers for making HTTP requests one 
spidering. Right. So this allows you to change the  
17:55 - number of threads you want to use. And as I said, 
using more than we can see right now it's at 10,  
18:01 - what I would recommend is still keeping it within 
the range of two to five are all you might,  
18:06 - you might cause the web application to slow 
down. And these are more advanced settings that  
18:11 - you can use dependent on timing. All right, 
and we've talked about the request headers,  
18:15 - they allow you to modify the way the spider will 
we look towards the web applications, for example,  
18:22 - you could you could edit the the device that is 
being used. And you could change it, for example,  
18:28 - into a mobile device and you get the idea you you 
essentially allows you to to change the request  
18:33 - headers. And from that, obviously, you'll get 
a response back, dependent on what you changed.  
18:39 - Alright, so that was the spidering, or actually 
the theory revolving on spidering. Now we'll  
18:46 - be looking at how spidering really works in the 
next video. I know some of you may not like this  
18:51 - that I actually went through through theory, and I 
haven't talked about doing anything. But remember,  
18:56 - it's very, very important to understand what 
exactly is happening behind spidering. And  
19:00 - in the next video, we'll actually get 
started with the spidering process.  
19:07 - Get started with brute forcing with the rates 
or our vulnerable web application of choice is  
19:13 - going to be the damn vulnerable web application, 
as we discussed in the previous video, alright,  
19:18 - and I'm going to be using meta exploitable 
to as our as my server. By default,  
19:21 - you can install medispa, you can install the damn 
vulnerable web application on your Kali Linux,  
19:26 - and you can host it on your local on your local 
server. And you can you can then perform your  
19:31 - attacks. But I like running it from another 
virtual machine. And as you can see, I'm running  
19:36 - it on the Metasploit able to virtual machine. And 
by default, it's connected to my local network  
19:41 - and it's bridged. So you can see that my local IP 
address is 190 2.168 point 1.1 or two. Alright, so  
19:47 - I already have the damn vulnerable web application 
open as you can see it is running on the that IP  
19:52 - address of the meta splittable to virtual machine 
on the the damn vulnerable web application. So for  
19:58 - those of you asking why I'm using Metasploit able 
to instead of meta splittable. Three, it's because  
20:02 - Metasploit able to has a much larger choice in 
terms of vulnerable web applications. And it's  
20:07 - really good for practicing. Alright, so make 
sure you're logged into your damn vulnerable  
20:12 - web application, you need the default username 
is admin and the password is password. Alright,  
20:17 - it's really very simple. Alright, by default, In 
this video, we're going to set our security level  
20:21 - too low. If you don't know how to do that, you can 
go into your deverbal web application security.  
20:25 - And you can set that too low, and you can just 
hit submit. The reason we're setting it too low is  
20:30 - because most logins Are you know, if you look at 
the real world, if you're talking about big sites,  
20:35 - this attack may very well work on sites that 
are older, or sites that have not been updated,  
20:39 - or sites that don't have good security, you'll 
be shocked to find some really big companies  
20:44 - that actually don't have any login protection, 
or brute force protection for that matter. Now,  
20:50 - that being said, what I was talking about is if 
we go to brute force, you can see that we have  
20:54 - a login prompt here. Now I forgotten the username 
and password, and we're going to be brute forcing  
20:58 - it live. Alright, but before we do that, we 
need to actually start our birth. Alright, so  
21:03 - start up that suite. And you can see I'm using the 
Community Edition. And it is the latest version,  
21:08 - right? So make sure that yours is the latest 
version, obviously, for obvious reasons. And  
21:12 - we're just going to start a temporary project 
because I don't use the pro version. And we're  
21:17 - going to hit use the birth defaults when you start 
work. Alright, give that a few seconds to start  
21:22 - the to start back. And now you want to make sure 
you you're using the proxy. So we're going to go  
21:27 - into preferences, and advanced and whoops, burp 
is oh opened up, let me just go into my proxies,  
21:33 - network settings. And we make sure that 
it's using the manual proxy configuration,  
21:37 - which is the localhost 120 7.0 point 0.1. And 
the port is 8080. We're gonna hit OK, excellent.  
21:45 - Now we need to move into burp back again. And 
we want to make sure that we go into proxy,  
21:49 - and the intercept is set to off. All right, 
the reason we're setting the intercept off,  
21:53 - is because I just want to show you something 
first. Now by default intercept essentially just  
21:59 - means that you're not intercepting the request, 
the requests and the responses being sent from  
22:04 - the web application to your browser. Okay, so 
we have already set the proxy for the browser,  
22:09 - but we're not intercepting. So if we just test a 
random username like test, and we say a password  
22:16 - like 12345, you can see if I hit login, it's 
going to tell me that that is incorrect. Now,  
22:21 - if I set the intercept to on to see the request, 
let me just turn it on. And we can now reload this  
22:27 - we can say test and the password 12345. We can 
see that now it's for some reason, let me just  
22:34 - forward that after actually just turn that off. 
And we now see log in. And for some reason that  
22:41 - is not allowing us because you have to reload. 
Alright, so now if I hit intercept on, and whoops,  
22:46 - let me just open up my browser and hit the parcel 
1345. Log In. For some reason it's going to,  
22:53 - it's going to slowly reloading here. I probably 
there we are. Alright, so I've reloaded the page.  
22:58 - And as you can see, now the intercept is on and 
we go back to burp, you can see that we got the  
23:04 - get request being sent by the web application. 
Now let's inspect it for a while now we'll be  
23:10 - looking at what all of this really means but by By 
default, the most important thing right now is the  
23:15 - get request. Alright, so you can see that the get 
request has two values here. It has the username  
23:20 - and the and the password. Now the values again are 
not important we're going to be brute forcing the  
23:25 - values but it's very important to get the fields 
that we're using here. Now what am I talking about  
23:30 - if you look at the cookie you can see the security 
is low. And if you were to edit the value and for  
23:35 - the package, you can set it too high that is basic 
stuff that's good stuff right? But now we want to  
23:40 - brute force this login. Alright, and how do we do 
that you can see the first thing we need to do is  
23:45 - we're going to be using the intruder alright so 
if you're a bit confused about what the in today's  
23:49 - Don't be worried intruder is essentially allow 
allows us to edit the parameters, it allows us to  
23:56 - edit the requests and then obviously edit them and 
manipulate them so we can get the desired results.  
24:01 - Now the great thing about there in the intruder 
is it allows us to perform attacks like the brute  
24:06 - force, etc, etc. Alright, but now what we need 
to do is we need to send this request into the  
24:13 - intruder so that we can send our own response. 
Alright, so we're going to right click and send  
24:17 - to intruder. So we just send it to intruder. And 
once it's sent to the intruder, you can just hit  
24:21 - forward. Alright, we don't need window, we don't 
need that GET request anymore. So now you want to  
24:26 - go into the intruder and you want going to your 
positions. And as you can see in your positions  
24:31 - you have got you have got the get request that 
we were we just intercepted. And now you can  
24:39 - see something really interesting. It's highlighted 
for you all the different payloads. Okay, all the  
24:45 - different fields that we can brute force for. By 
default we have the username value, the password  
24:50 - value, the login value, we have the F the SF ID 
value, we have the the cookie value, no No, no,  
24:56 - we don't need all of these The only values that we 
need The username and the password value. So the  
25:02 - most important thing you need to do right now is 
you need to clear just hit clear. Alright, oops,  
25:07 - sorry, not that clear. I beg, I beg your apology 
there. I sorry, I didn't mean that what I'm trying  
25:15 - to say is I'm sorry, just clear, just hit clear. 
And as you can see, now, no values are being  
25:19 - selected to be brute force against. So now we need 
to select them manually. But before that, we're  
25:24 - going to be using the the cluster bomb attack 
type. Alright, the reason we're using the cluster  
25:28 - bomb attack type is because we are going to be 
using two values, we are brute forcing against  
25:32 - two values. Remember that, okay, and these need to 
be set in, in combination. So that means it's much  
25:39 - better to use a cluster bomb because essentially, 
you're clustering to values that need to be that  
25:44 - need to be tested against the login, the login 
application, or the login form together, alright,  
25:51 - so in a combination, so we need to select cluster 
bomb. And now we need to select the values because  
25:56 - those are the those are that is what we want to 
brute force again. So just highlight the value,  
26:00 - it doesn't matter the password or the username 
is just highlight it, and you want to hit Add.  
26:05 - Alright, so just hit Add. And as you can see, 
we have selected that, you know, going to the  
26:09 - password, and you want to highlight that as well. 
And you just want to add that, as you can see  
26:13 - now once you have added that those are the two 
values we're going to be brute forcing against,  
26:17 - make sure that none of the others are selected 
none of the other values. Once that is done,  
26:22 - you're you're almost there now. Now you want to 
go into your payloads. Right now in your payloads,  
26:27 - you want to make sure that your payload set is set 
to two, which is your username and your password.  
26:31 - So let's start off with your payload set as 
payload one, all right as your payload type,  
26:37 - make sure that that is a simple list. Because 
you can see we were only targeting usernames  
26:42 - and passwords. So we don't need, you know, a 
runtime file, or we're not changing anything,  
26:47 - you know, dependent on Unicode etc, you get the 
idea. Okay, so simple list. And now you're going  
26:52 - to your payload options, which is where you select 
your user list or your password list or your word  
26:57 - list. Now, we're not using a word list. But if 
you want to, you can if you're performing this  
27:02 - on a real site, which I don't recommend unless 
you have written permission. Now since we're  
27:06 - using this in our penetration testing lab, we are 
going to just add the default usernames and said  
27:12 - the security of the site is low. And it's not 
really a complex a brute force to crack. Okay,  
27:18 - so what we want to do is, we want to make sure 
we have set payload set to one, which is going  
27:23 - to be for our usernames. So now we can go into 
load where you can load your default usernames  
27:28 - and your passwords or your word lists, but by 
default, we're going to add our own Alright,  
27:33 - so we're gonna say, whoops, we, for some, we're 
just gonna say, we're going to type in a now like  
27:40 - the commonly used usernames, alright, so something 
like admin, administrator whoops, for some reason,  
27:46 - actually, let me just remove these blank values 
there. admin now administrator, administrator, let  
27:52 - me just type that back in. administrator, like, so 
administrator, for those of you telling me that my  
27:59 - typing is bad. That's because my microphone 
is right in front of me, and I can't really  
28:03 - see what I'm typing administrator. Let's see what 
else what are the default ones like we have root,  
28:08 - we have password. Actually, we're not setting 
the passwords right now. So we can just type in  
28:14 - the default ones like this. All right, so we can 
say test, you know, the default ones, user one,  
28:19 - whatever you think could be the most commonly used 
ones, okay? Or if you know what the username is,  
28:25 - that is even better. So we're gonna add all the 
usernames. Alright, so we've added the usernames  
28:29 - that we want to use. Now by default, again, I'm 
saying you can use a word list if you want to just  
28:33 - go into load and select the word list. Now we want 
to select our passwords, right? So we can go into  
28:38 - the payload set to. And as you can see, now we 
can add our own values. Now we can use the default  
28:43 - word lists that come with Kali Linux. So if I go 
into my root, and I'm going to use them, share and  
28:50 - reselect word lists, let me just find where word 
lists are. If I can find them, there we are word  
28:56 - lists. And they are the ones that work great for 
me in the Metasploit folder. And you can look for  
29:01 - the default passwords. As you can see, you have 
your database default passwords, you have your  
29:05 - default, user password for services, that's also 
great. It has a great list of of default usernames  
29:11 - and passwords that you can use. But for me, I'm 
not going to use this because we are sticking  
29:15 - to the basics. And now you want to add your own 
password. So we can select again, some randomly,  
29:20 - you know, commonly used passwords. So pass, you 
can say password. Let's see what else admin, you  
29:27 - know, admin again, whoops, let me just remove that 
one admin. Route, you can use route. Let's see,  
29:36 - let me think 12345. That was the one that I've 
seen many network administrators using 12345.  
29:42 - And you get the idea. All right, so we've set our 
two payloads. payload one is set for usernames.  
29:47 - payload two is set for passwords. Excellent. All 
right now, we have selected our payload types we  
29:52 - have selected we have added our payload options. 
We don't need to look at payload processing that  
29:58 - is advanced once That's done, what you want to 
do is going to intruder and start the attack.  
30:03 - Alright, and now it's going to tell you that the 
Community Edition of burp contains a demo version,  
30:07 - but it's essentially telling you that the process 
is going to be slow. Alright, so we're gonna hit  
30:11 - OK. And it's going to start at the attack. As you 
can see, it's going through all the combinations.  
30:16 - And as you can see, the combinations that we 
have here are 25, and is going to go through  
30:20 - all of them. Now, one great thing that you need to 
do here or one important thing that you need to do  
30:25 - is you need to understand the the the status codes 
that the server or the web application is sending  
30:30 - back. Now, that's a good way of, of understanding 
what password is correct? And what what username  
30:38 - is correct and what password is not correct. 
Okay. So if we look now, at the, at the results,  
30:45 - as you can see that it's finished, it's going 
through the brute force attack, we check the  
30:49 - status, the status is still the same, we have a 
status to 200. If we look at the length, right,  
30:54 - the length is going to be still the same. But you 
have to look for things that are not that are not  
30:59 - matching. So for example, you can see that the 
length here that was returned was 4948. And it's  
31:05 - not, it's not following the format of the others. 
So that means that this could be the username  
31:10 - and password, don't worry about the status, the 
status will still remain the same, regardless of  
31:15 - that. But when we'll be looking at Advanced Server 
penetration testing, that's something important.  
31:19 - So you can see that the get that we've got here is 
very important. Now if we look at the if we look  
31:25 - at the response that will be sent. Right there, 
you can see the response. And if we render it,  
31:31 - you can see that if it was successful, it will 
tell us that we've logged in successfully. So let  
31:36 - me just browse down all the way as you can see, 
welcome to the password protected area admin.  
31:40 - And there you go, that is the username and the 
password is admin and password. Now again, this  
31:46 - was really simple. Again, you can you can increase 
the security if you're practicing on your own. But  
31:52 - you can see that this really works. And this is 
how to utilize burp for advanced stuff like brute  
31:56 - forcing. Now again, most of the advanced websites 
nowadays have great content management systems  
32:03 - that have the security plugins that essentially 
prevent you from brute forcing or lock you out.  
32:07 - But most of the oldest sites, you'll be, you'll 
be actually quite shocked to find out that they  
32:12 - are brute forces, they are log informed sorry, 
are not protected. Now we've already logged in,  
32:17 - and you can see that the default username is 
admin, and the password is password. Okay, so you  
32:22 - can look at the role. The raw HTTP here, you can 
look at the request and the response. Or you can  
32:29 - look at them and you can inspect them, if that's 
what you do. And you can look at the headers,  
32:33 - what's being sent, all that good stuff. But that 
was going to be it for this video. And now if we  
32:38 - just go back into burp, let me just go into my 
proxy. And I'm going to disable intercept. And  
32:43 - we can try and log in here. So we know that 
the admin username is admin and the password  
32:47 - is password. So let me log in. And welcome to 
the password protected admin area fantastic.  
32:58 - In this video, we're going to be looking at 
selecting our verbs with our target in web suite,  
33:02 - adding it to our scope, and then finally spidering 
it as my vulnerable operating system, I'm going to  
33:08 - be using the Matilda de which comes pre installed 
on Metasploit able to so you should download Well,  
33:15 - I would recommend that you download Metasploit 
able to, it's a fantastic option for any of you  
33:20 - who are just getting into penetration testing 
offers multiple vulnerable web applications  
33:25 - and vulnerable systems that you can practice 
with. So again, it's something that I really,  
33:29 - really recommend. That being said, as you can 
see, I have made exploitable to virtual machine  
33:36 - running. And I have already looked at my local IP 
address, you can do that by typing in if config  
33:42 - that will display to you your your current network 
interface and your local IP address. Because we  
33:49 - are doing this in our virtual penetration testing 
lab. Alright, so let's go back to Kali Linux now.  
33:55 - And I'm going to open up my browser, make sure 
you get your IP address. And as I said, again,  
34:00 - we're going to be using motility. So if you don't 
know what Mattila day is Mattila day is simply a  
34:04 - vulnerable web application. And the reason I'm 
switching I'm switching from the damn vulnerable  
34:09 - web application is because I want to show you 
a few, I really want to make it a bit diverse  
34:14 - in terms of the web applications that we use. 
Alright, so let's get started now. Now I already  
34:21 - have the IP address of my virtual machine opened 
up here in my browser, as you can see, 190 2.1  
34:25 - 68 point 1.14. So if I reload this, you can see 
that it indeed is the meta splittable to server  
34:32 - and I can just go ahead and click on Mattila 
day. Alright, now what I should do now is go  
34:38 - into my preferences, you can do that by opening a 
new tab. So let me just open a new tab here going  
34:45 - into preferences, and then selecting advanced and 
network and finally settings. And then you want to  
34:51 - make sure you select a manual proxy configuration. 
And then make sure it's using the localhost proxy,  
34:57 - which is wondering 7.0 point 0.1 Port 8080 and 
hit OK. Once that's done, we know that burp suite  
35:03 - can intercept. Not that we want to do that in this 
video, we just want to, we want to have a look at,  
35:09 - we want to map the web, the web application. 
Alright, so we're not going to change anything  
35:13 - in Mattila day. But I'm going to be showing you 
some pretty interesting things in this video.  
35:17 - So now we should start up burp suite community. 
Now I'm going to be explaining something at the  
35:23 - end of the video that is really important. And it 
is in regards to the community version, and the  
35:28 - professional version of burp suite and what what 
the differences are and why you will need at some  
35:34 - point to get the professional version. Okay, so 
I'm going to select a temporary project, I'm using  
35:40 - the community version as of right now, hit Next, 
use the bird default, and I'm going to start up.  
35:45 - Alright, so it's going to start burp suite. And 
let me just minimize the browser here. So give  
35:51 - that a few seconds to start up. And once it starts 
up, what you want to do immediately is turn off  
35:56 - the proxy, we want to stop in the intercepting 
because we are not intercepting any requests,  
36:02 - or we are not inserting any responses. So go back 
into your target. And now we can get started with  
36:09 - with actually reloading the page right here. So 
let's reload that. And we should be able to see  
36:15 - what's going on. And we should have the sitemap. 
Alright, so let me just open up the burp suite  
36:22 - here. Fantastic. Alright, so now you can see 
something very interesting has happened here.  
36:28 - In our target. And sitemap, we have the files that 
were discovered here. Well, essentially, we have  
36:33 - the web server that then has the modality folder, 
which is our target. Now before I get into any of  
36:39 - that, the site map will show you the current 
site map. Obviously a site map is essentially  
36:43 - sorry about that a site site map is essentially 
the structure or the format of the webpage,  
36:49 - and how the web page was constructed and how it 
will function in regards to every other piece of  
36:55 - content. Okay, so the first thing that we need to 
do, or we'll be looking at is actually selecting  
37:00 - our target, which in this case, again, is Mattila 
day. And you can do that by right clicking and  
37:04 - hitting add to scope. All right, so you might 
be asking what exactly the scope means? Well,  
37:09 - a scope essentially allows us to define our 
automated spidering. And what this means is  
37:15 - we are focusing our only on our target, we're 
not going to focus on the reference links,  
37:19 - like you can see here, for example, we have to 
it as a reference link, backtrack, dynamic drive,  
37:24 - Eclipse, etc, etc, you get the idea. So scoping 
is essentially selecting our target, isolating it,  
37:30 - so that we only see what we need to see. And 
the obviously the results that we want to see.  
37:35 - So I'm going to right click on Mattila day, 
and I'm going to hit Add to scope. Alright,  
37:40 - so now it's going to say you've added an item to 
to the target scope, do you want that proxy to to  
37:46 - stop sending out scope items out of scope items 
to the history of the other bedtools? Yes, again,  
37:52 - we want to make sure that we are we clear out all 
the junk that we don't need. Now you might have  
37:56 - noticed? Well, that's essentially happened, but 
nothing is really changed. And as you can see,  
38:02 - it's gonna tell you here logging of out of scope, 
proxy traffic is disabled, don't worry about that,  
38:07 - just leave it as it is, if you want to re 
enable it, you can go ahead but right now you  
38:10 - don't need to do that. Okay, so we've looked 
at how to add our target to the scope. Now,  
38:15 - let's look at spidering is essentially the 
the first and the most important step of web  
38:22 - application penetration testing. Alright, 
it is it deals with or it is in it is in  
38:27 - relation with footprinting. And this is why I 
bring the comparison from penetration testing  
38:33 - to obviously web application penetration testing 
it is to deal it essentially deals with crawling  
38:38 - through the website. And then it records all the 
files, the links and the methods and the methods  
38:43 - that it can get. And that helps us build an idea 
of how the web application is structured, how it  
38:49 - works. And then finally, we can learn how we can 
break through it. What we need to do is we need to  
38:55 - spider our target. Well, we have added it to the 
scope, which is great. And now we need to spider  
38:59 - it. So what we're going to do is we're going to 
we're going to use spider and this will help us  
39:03 - identify all the links and the parameters that we 
need. Again, as I said, it's like footprinting. So  
39:08 - what you want to do is right click on your 
target, which in this case is Mattila day,  
39:11 - and you want to spider this branch. Alright, 
so I'm going to spider this branch. And no,  
39:17 - something interesting is going to start happening. 
As you can see, it's going to start getting all  
39:20 - the links all the resources that it can, and it's 
going to prompt you with here a submit form. Okay,  
39:27 - now, what you can do is just ignore the form, 
there'll be quite a few essentially, these are  
39:31 - default login forms where it's asking you to 
enter credentials that you might want to enter,  
39:36 - let's say you, you're performing whitebox, then 
Richard testing and you have the details. You  
39:40 - can again log in like this and perform internal 
penetration tests. But we're going to assume  
39:45 - that you're you do not know your penetration, 
you're essentially performing a penetration  
39:50 - test on the security. So I'm going to ignore 
all of these forms. Okay. And as you can see,  
39:54 - there's another one right there and the spidering 
is probably continuing. Now if you want to view  
39:58 - the status of these By doing, you can go into 
spider. And as you can see you have the status  
40:03 - of the spider. And once it's done, you will see 
that the requests made will stop changing. And  
40:08 - the bytes transferred, will also stop changing so 
we can stop the spider. Now you noticed something  
40:14 - that we were faced with those are form login 
prompts. Now, you can choose to enter them as  
40:20 - a prompt or as you're prompted, but the better 
way of doing this is to actually you actually do  
40:26 - this automatically. And you can do this by going 
into spider. And you want to go into options,  
40:32 - and you want to go in to your application login. 
Alright. Now, if you look at the form submission,  
40:40 - it is essentially what it's doing is is going to 
use the default form submissions that you would  
40:45 - find in a database. So for example, we have male, 
first name, last name, surname, name, address,  
40:51 - you get the idea. So those are default values 
that one would, one would be expected to find. Now  
40:56 - we're looking at the application login. As you can 
see, its option is set to prompt for guidance, we  
41:02 - want to change this to automatically submit these 
credentials. Now in here you can enter default  
41:07 - credentials. Or if you have an idea of what the 
credentials you might expect to find. Now, this is  
41:13 - where creativity and sheer information gathering 
comes into play. So if you need a new the default,  
41:18 - you know, usernames and passwords, you can enter 
them here. Now what I'm going to do is I'm going  
41:22 - to enter a string that is, well, I've used it 
before in performing SQL injection, and we'll talk  
41:28 - about SQL injection because it is very advanced. 
If you know SQL injection, or you have you have  
41:35 - an idea or experience with the databases, you 
might understand what this string means. Alright,  
41:41 - so for my username, I'm going to change that to 
admin, quotation mark and say, or one equal one,  
41:49 - and two dashes. All right space and a dash. Now 
you don't need to worry what this means for now,  
41:54 - please do not stress about this, I will explain 
it when the time is right. All right. So leave  
42:00 - the password as it is. And don't worry about that. 
Now, we had, we don't need to change anything in  
42:04 - terms of these tabs, we talked about these tabs 
in the theory section. And now we can go back into  
42:09 - our control and target. And finally, we can spider 
the application again, once more so that we can  
42:15 - enter the we can essentially process the strings 
that we that we just entered in terms of the user  
42:21 - name, so I'm going to right click and spider this 
branch. Okay, so it's going to start spidering.  
42:27 - And if we look at the spider, you can see that the 
the spidering is complete. And you can essentially  
42:32 - clear the cues if you want to clear the clear them 
like so. And you can keep on running it depending  
42:38 - on what you want to do. Okay, so I'm just 
going to pause it. And now we have essentially  
42:42 - spidered the web application. And you might be 
asking, well, I've seen a few reference sites,  
42:47 - that's not helping much, you know, we don't need 
twitter.com or you know, sizzle js, this might  
42:53 - give us a basic idea of what types of sites are 
linked to to the web application. But in reality,  
42:59 - you can see we have hackers.org not not very 
important information at all. Now, what if  
43:05 - we click on the Mattila day folder? Oh, look at 
that. That's really interesting. Now that is very,  
43:10 - very important. What has happened here is it's 
given us the structure of the web application,  
43:15 - this is vitally important. All right now, again, 
as I'm saying, you can look at how the website  
43:22 - or the web application is structured. So in 
documentation, you can see you can go ahead  
43:26 - and read the documentation, you can look at 
the images that the website has the styles,  
43:31 - so you can inspect the entire site and understand 
what exactly is going on here or get an idea of  
43:36 - what the person who developed the website was 
thinking. And then finally, out of experience,  
43:41 - or as we'll be looking at out of knowledge, you 
can actually understand how to exploit the system.  
43:47 - And that we will be talking about discovering 
hidden files, hidden files, like admin pages,  
43:52 - login pages, you know, that really juicy stuff. 
And we'll be talking about that in the next video.  
43:57 - And that's because that sweet Community Edition 
does not support or have allow you to use that  
44:02 - feature. So what I'm going to do in the next 
video, I'm going to be using burp suite Pro,  
44:06 - and also show you an alternative program. I'm sure 
you've heard of it. That also works on Windows.  
44:12 - Of course, that's how it works on Windows. But 
I'm not really a Windows fan when it comes down  
44:16 - to penetration testing. So that being said, we 
have essentially spider the application we have  
44:22 - the structure of the web application. And now we 
need to look at something also very interesting  
44:27 - as we have already talked about it. Let me just 
complete. Let me just show you how to get rid of  
44:33 - all of these reference links and to essentially 
show the items in the scope only. So what you  
44:39 - can do is just click on filter right here, this 
little bar here is the filter bar. So click on it,  
44:45 - and it's going to show you bring up this smaller 
window and you want to focus on the filter by  
44:49 - request type and make sure you check show only in 
scope items. This will essentially filter all the  
44:55 - results to show you only links or resources or 
files that are within the scope. So once that's  
45:02 - done, just click back on the filter. And as you 
can see it has got rid of all the junk that you do  
45:07 - not need whatsoever. And now you can essentially 
look at the, the requests and the responses and  
45:12 - analyze them accurately defined to your scope. And 
this will essentially, it will stop confusing you,  
45:19 - I've seen many beginners make this mistake where 
they don't define the scope. They do not know  
45:24 - what the target is, and they're getting links that 
are not even relate to the website that they're,  
45:29 - they're trying to perform the penetration test 
on. Now, since you know this knowledge, this  
45:33 - will help you get a solid foundation. And again, 
you can start logging out of skip out of scope  
45:39 - proxy traffic when you want. Again, that's very 
nice that they add that button right over there.  
45:43 - Alright, so now you only have the files that 
you require, or the files that you're currently  
45:48 - performing the penetration test only. Now I know 
this, this video was slightly, there was not a  
45:54 - lot of action. But again, it is very important 
that you get this in the next video, we'll be  
45:58 - looking at how to how to discover hidden files 
or files in general that you are not supposed to  
46:04 - find. Okay. And that can be done by right clicking 
and going into engagement tools. As you can see,  
46:09 - it is defined to the professional version of burp 
suite. And we will be going into discover content  
46:14 - where I'll be explaining to you how to find 
things like the login page or the configuration  
46:19 - page. Some things that web developers, you know, 
actually just may try to hide them. But if it's  
46:26 - actually found, can really exploit the website 
or can lead to the exploitation of the website.  
46:35 - We're going to start looking at how to discover 
hidden files. But before that, I just want to take  
46:41 - you through a few things. Alright, so let's start 
off with what OS base or o w SP. Alright, so what  
46:48 - does that mean? Well, essentially what it means, 
or what it stands for is the open web application  
46:52 - security project. Alright, and its goal. Well, 
essentially, it is a nonprofit organization  
46:57 - whose goal is focused on improving the security of 
software. All right, so its job is to improve the  
47:04 - security of software. Now this project, the O w 
SP, or the open web application security project,  
47:10 - created a tool called as the Zed attack proxy. Or 
as you know, it the zap, many people like calling  
47:18 - it zap. And I'm sure most of you have heard 
of it. And you might have been, you might be  
47:22 - leaning towards burp suite a little bit more. But 
I can guarantee you that zap is one of my favorite  
47:28 - tools. And I use it because firstly, it's free. 
And for the people like for the students I teach,  
47:34 - I usually tell them to start with zap because if 
you get zap, you'll automatically get burp suite.  
47:39 - And you only need burp suite when you're moving 
into an enterprise environment where you know,  
47:43 - burpsuite is the recommended tool. And it is the 
tool that you must use to adhere to certain rules  
47:49 - and ethics. That being said zap is a fantastic 
tool. It's absolutely free. As you can see the  
47:54 - old w SP Zed attack proxy proxy, which is, 
you know, abbreviated as zap is one of the  
48:00 - world's most popular free security tools and is 
actively maintained by hundreds of international  
48:04 - volunteers, right. So it helps you find security 
vulnerabilities in your web applications while  
48:09 - you're developing and testing applications. So 
again, if you're a web application developer,  
48:13 - this is also a fantastic tool for you. And as I 
said, it's going to be a fantastic alternative  
48:18 - to do burp suite. All right now that's not 
to say that burp is bad. burp is more of a  
48:25 - enterprise an enterprise developed software. 
As I've mentioned in the for the first video  
48:30 - of this series, burp is focused on professionals. 
Now that's not to say that zap isn't, but you'll  
48:36 - get the idea. Alright, so I'm going to be making 
a separate video on installing zap and I'm going  
48:42 - to make a video on how to get accustomed to the 
interface because it is slightly different. And  
48:46 - the language or English used for the interface is 
again very well obviously very different but it is  
48:53 - quite different. So again, getting used to it was 
also something that is quite helpful because we'll  
48:58 - be needing some of the enterprise features and on 
only a tool like zap will be a great alternative.  
49:04 - However, if you do have burp suite Pro, go ahead, 
it will it will just be the same thing. As I  
49:09 - mentioned in the previous video, it's really 
very easy to to follow up where we left. Okay,  
49:14 - that being said, it runs on the same network 
proxy, it runs on the localhost. So make sure  
49:19 - you're running it on the localhost and on port 
8080. I'll be showing you how to change the port  
49:24 - if you so feel you want to. That's also another 
great thing about us as AP is it allows you to  
49:30 - change the proxies. So I have Mattila day opened 
up here and it is again running on my Metasploit  
49:36 - able to virtual machine and it's running 
on the IP address my local IP address 190  
49:40 - 2.1 68 point 1.104 as you can see Mattila day. 
Alright, so that's working perfectly. So let me  
49:47 - just leave those other tabs open because again, 
there's no there's no real harm. Okay, so, again,  
49:53 - you can configure the material at a security level 
if that's what you want, you know to do to make  
49:59 - things harder. But I'm just going to be showing 
you the focus of this video, which is how to find  
50:04 - hidden files. Now, you might be asking, why do 
we need to find hidden files? Or why do we need  
50:10 - to discover these hidden files or hidden files? 
Firstly, are the files like admin login pages,  
50:15 - you know, maybe a robots dot txt, but that's not 
really something that's hidden nowadays. It could  
50:21 - be a txt containing maybe usernames, you know, 
something really weird, or, you know, pardon  
50:27 - my English or pardon my language, something dumb 
that the web developers left behind, or, you know,  
50:33 - just not configured correctly. And you'll see 
what I mean in a few seconds. All right. So again,  
50:38 - these are the files that are hidden, and 
you will not find them after spidering,  
50:42 - your web application or website. Alright, so let's 
get started with zap. As you can see, I have the  
50:48 - logo right here on my it's added to my favorites, 
let me just launch it, give it a few seconds, and  
50:53 - it should start up. There we are, the zap, give it 
a few seconds again, and make sure you update it  
50:58 - usually the updates for the modules very, very 
regularly. So make sure you update them to the  
51:03 - latest version, as they improve the speed and so 
on and so forth. Alright, so it's going to prompt  
51:09 - you here, do you want to persist the substation, 
that means Do you want to save this app session,  
51:13 - I don't, I do not want to persist the session at 
this moment in time. So I'm going to start. Again,  
51:20 - don't worry, if you're not familiar with the 
interface, I'll be going through it in another  
51:24 - video because it deserves Now you might be a 
little bit overwhelmed. But do not worry, do  
51:29 - not stop going to you know URLs to attack that may 
seem really really tempting. But again, you know,  
51:34 - let's take it nice and easy. So let's talk about 
the proxy, how to change the proxies. So to do  
51:41 - that, you can go into your cog right here, as 
you can see, or you can go into tools and go  
51:46 - into options. Alright, but I like going into this 
little cog here. And once you press on, once you  
51:52 - click on the cog, let me just enlarge that, you 
will see that you have this huge menu. And again,  
51:57 - as I said, zap is a really advanced tool, and in 
some cases can totally replace burp suite. Now,  
52:04 - looking at the proxies, you want to go for 
the local proxies right here. It's obviously  
52:09 - starting with L. So local proxies, and make 
sure that the address is hosted on localhost.  
52:14 - And you can change the port if you're using burp 
suite and stuff, like you're just using both the  
52:19 - applications at the same time, or you're running 
something on localhost already. So you can change  
52:25 - it to something like 8081, whatever you feel 
is comfortable for you. Okay, so that's how to  
52:30 - change your proxies. And if you're running the 
ad net, you can also go check this and that you  
52:35 - should be good there, if you don't find that the 
proxy is working. So just hit OK. Alright, now,  
52:41 - you see that there is no draya We are not going to 
be looking at intercepting right now, but we will  
52:46 - be looking at that in a few in probably the next 
videos, the advanced videos with SAP. Alright,  
52:52 - so let me just reload the material a page. And 
as you can see, I'm running the proxy. So I'm  
52:57 - just going to reload the page. And as you can 
see, we are not intercepting actively. So Whoa,  
53:02 - what's this? Well, we got some files here. Let me 
just reload the page one more time. And there we  
53:08 - are, we are getting some results. So we get the IP 
190 2.1 68 point 1.14. That's the server and if we  
53:14 - just click on this drop down here, we get request. 
So you can analyze the get request. If that's what  
53:21 - you want, you can right click, and then analyze. 
All right now will we not be looking at that right  
53:26 - now because I want to focus on finding the or 
discovering the hidden files. So what we'll do  
53:31 - is we want to click on the utility folder. Now one 
of the great things I like about zap is it already  
53:36 - gives you the file structure or the website 
structure immediately here. Alright, so again,  
53:41 - so you have your images folder, which has it, 
the images there, you have JavaScript styles,  
53:47 - and your all the resources in regards to the 
website that it could find naturally. Alright.  
53:54 - So if we, if we just look at the bottom here, you 
can see that it it's showing you a timestamp with  
54:01 - the method that the URL, and it gives you the 
the code which means the pages in this case,  
54:07 - the 200 code means the page was found, you have 
the reason you have the RTT, the size, the alert,  
54:14 - as you can see, it's telling us we have a high 
alert here. Now don't worry about that. Again,  
54:18 - these are things that you know will be will 
really be tempting, but again, let's take it slow.  
54:23 - Alright, so the first thing you want to do or you 
need to do is to right click here, and you want to  
54:28 - go to attack and hit spider. Alright, so we want 
to spider the website or the web application and  
54:33 - start scan Do not touch anything here. Just make 
sure it's using the appropriate server address  
54:39 - and just hit scan. Right now it's going to spider 
the entire web application and it's going to give  
54:43 - you a little progress bar here. You can pause 
it or stop it which is also great to see at the  
54:48 - bottom you should have also noticed that you have 
your tabs here that work really really well. And  
54:52 - as you can see the the website now is completely 
spidered. And if we just check all the files that  
55:00 - we can find now you can see that we have some more 
JavaScript files. And essentially what's happened  
55:05 - here is the entire site has been, has been 
spidered. Okay, now we already did this with burp.  
55:12 - And the you know, you've you're probably really 
bored of this right now. So what we're going to do  
55:16 - now is we need to, we need to start discovering 
the hidden content, right. So let me just close  
55:22 - all of this up. There we are. Fantastic. Now, 
let me just open that up. And let's go to Mattel  
55:27 - today. Oops, my bad Sorry about that, guys. 
And we want to right click on Mattila day,  
55:33 - and you want to go to attack and you want to go 
to first browse directory and children that's very  
55:39 - important. First browse directory will not display 
everything, we'll also be looking at fuzzing,  
55:44 - but that's for later. Alright, so you want to make 
sure you hit forced browse directory, just click  
55:49 - on that. And it's going to open up this tab here. 
So you can see we are despite the tab open, which  
55:53 - you can close read if you're not using it, which 
is also great. I really like the management of  
55:57 - zap, you then have output for your outputs alerts. 
As you can see, you have some alerts here that  
56:03 - will alert you on some potential vulnerabilities. 
So for example, APPLICATION ERROR, disclose,  
56:08 - you have some cookies, a noise GTP flag. So again, 
awesome stuff there. We have to get requests,  
56:14 - all that good stuff, which is again focused on a 
different type of attack. And as you can see, by  
56:20 - default, we've got the robots. txt here, which you 
can analyze if you want to, by clicking and going  
56:26 - ahead and doing that. So you can copy the URL to 
the browser. So again, copy the URL to clipboard,  
56:33 - alright, and if we just try and explore this, 
let me just paste and go here. As you can see,  
56:38 - we're for some reason, we're not actually getting 
robots to txt. Let me use the motility date. Till  
56:44 - today, or actually, you know what, let's not do 
that right now, because I really want to stay  
56:50 - on topic here. So I'm just gonna go back into 
that. Again, I always love going off topic,  
56:55 - fourth topic for some reason. Okay, so make sure 
you click on motility and you want to right click  
57:01 - on it. And now Oh, sorry, we already did the 
first browser, right click, go to attack and  
57:07 - first browse, directory and children. Alright, 
now it's going to open up this tab here. And  
57:12 - it's going to, it's going to make you choose the 
site. As you can see, you have your site IP here.  
57:17 - Now you need to select the default directory 
list to it's going to use this list here, this  
57:21 - default list that comes already with zap. And now 
it's going to try and use it in a sort of a brute  
57:27 - force way to try and detect the hidden files and 
folders. And once it gets the result, it's going  
57:32 - to enumerate them. Okay, so now you want to right 
click again on it, after you've selected the list  
57:37 - and hit attack. And you want to go to force browse 
directory and children. And once you hit that,  
57:42 - it's going to start the process. Now again, this 
is going to take a long, while not a long time,  
57:46 - depending on this the size of the website, 
if the site is huge, then again, it's gonna  
57:51 - take a while. And as you can see, immediately 
we're getting some submitted files. So let's,  
57:57 - let's wait for this call to complete. And I know 
motility has some very, very interesting files  
58:02 - here that I'm sure will be happy to get. Alright, 
so just let it go through this. As you can see,  
58:08 - you can check the progress as you're going here. 
And again, the the if you look at the status code,  
58:15 - you can see 200 means the pages were found. So 
you can just go ahead and look for things that  
58:20 - are irregular. And I'm sure we can find something 
here that we haven't found before. Or you can  
58:25 - look at the at the file form the website directory 
here. So um, Mattila day, let's see if we can find  
58:35 - something that is really, really interesting year. 
So we have the includes we have the get index of  
58:39 - PHP, we get regressed, sorry for the index dot 
o we have something interesting here we have a  
58:43 - notes folder. Aha, now we're talking now this 
is where stuff gets really exciting. Alright,  
58:50 - so we have whoops, where'd it go? There we are. 
So in notes, we have some very interesting files  
58:56 - in notes. So we have a get passwords. Now 
what happens? What's this about? Alright,  
59:02 - so what if what what if we just open this URL 
in the browser? Alright, so let me just try and  
59:08 - open that in Firefox, I just want to see what 
it's going to be all about. So hopefully, it's  
59:12 - opened up in my browser. If it's not, I'll have to 
copy the URL, probably because I haven't set any,  
59:18 - any default. Alright, so copy URLs to clipboard. 
And let me just paste that in there, paste and go.  
59:26 - There we are Mattila day and passwords. Alright, 
so you can see that this folder or this file was  
59:31 - hidden. And we have an interesting txt file here, 
which again is quite scary to go we did open  
59:38 - Firefox. Well, don't doesn't look like we need 
that instance. So getting back to the topic here,  
59:44 - for some reason, process unexpectedly closed 
with. Alright, so that looks like we have a  
59:50 - Java error there. So let me just go back in over 
here. So again, we found an accounts dot txt file,  
59:58 - what could that be? be caring. Let's click on 
that. Oh boy. So again, we have accounts here.  
60:05 - And well, I'm pretty sure you will know what this 
means. This is just bad practice from the website  
60:12 - developer, where he wrote notes. And essentially, 
these are the accounts. Now let's see what else we  
60:17 - can find. Let's see accounts. Nothing interesting 
in accounts, because we now have the account. So  
60:22 - that makes our brute force much easier. You then 
have, let's see if we can find any passwords if  
60:28 - they were ever saved here. I'm pretty sure they 
are not. But we can also look for some interesting  
60:33 - files here. That can be really interesting. Or you 
can look at the sitemap if you want to. So let's  
60:39 - also copy that. Let's see if it gives us access to 
the sitemap also very, very important stuff there.  
60:43 - Oh, yeah, so the sitemap, for some reason, we were 
not able to process it. Alright, let's look for  
60:50 - some other files here. Let me just open up Mattila 
day again. So we have the get images. Let's see if  
60:59 - we run the get images. Let's see what images we 
can get. Again, I'm going pretty amateurish on  
61:04 - this. I'm just clicking on everything. But I'm 
just trying to show you the amount of files that  
61:07 - you can find, as you can see, immediately, you 
can find that the refresh button, you know all  
61:12 - the icons related to the website. You have the 
I hack banner. Oh, yeah, hackers for charity,  
61:18 - man. So I'm talking about YouTube. Oh my god, what 
an old logo that is the older BSP logo. Pretty  
61:26 - cool. Pretty cool. And yeah, so you get the idea. 
So this is how you actually go through website  
61:32 - and find files that could contain you know, stuff 
that is quite interesting, to be honest. So let's  
61:38 - see what else we can find. I'm just going to go 
to one more resource here that we've found, oh,  
61:43 - we have to get register out. Now. That's what I'm 
talking about copy URL to clipboard. It's actually  
61:49 - it's actually quite fun. This why bug bounty 
hunting is? Oh, yeah. Now this is what I'm told  
61:54 - we can actually register. We can actually register 
ourselves on the website. Now again, looking at  
62:00 - the website from here, it doesn't look like we 
can. Can we even register on this website? Not  
62:07 - sure we can. For some reason, it's not actually 
letting me scroll to the top. But hey, I don't  
62:12 - really know what's going on there. So let's see 
if we, yeah, we can definitely log in render and  
62:16 - register. Sorry about that. We can register there. 
So yes, it is the register. It does exist. So that  
62:22 - wasn't actually hidden. But it was hidden. It was 
hidden to the women when we spidered the website.  
62:29 - So that means indeed, it was hidden, for obvious 
reasons. Because the brute force for example,  
62:34 - if you find the login, which is again here, 
and again, if this is hidden, you can imagine  
62:39 - the the damage that you can do so again, you can 
log in from there. Set up database, whoo. Now,  
62:47 - that's interesting. For some reason, it's not 
letting me copy. Alright, so looks like we got  
62:52 - set up database here. So yeah, we can Okay, I 
do not want to manually edit the request. No,  
63:00 - I do not want to manually edit the request. For 
some reason my keyboard is being pressed here.  
63:06 - While that's we admin, copy heroes to clipboard. 
All right, sorry about that my spacebar was being  
63:12 - mashed on by my tablet in front of me. Right. 
So let me just there we are on. So no PHP MySQL  
63:19 - errors, were resetting. So essentially reset the 
database, and you can see the damage that this can  
63:24 - do. So again, that is some good stuff that you can 
have fun with, when especially with Mattila day,  
63:29 - you can increase the security and find what other 
files you can, you can find, you know, with zap,  
63:35 - again, zap is a fantastic alternative that you can 
use. If you know if you're not ready to invest in  
63:41 - burp suite, that's totally fine. I used zap for 
I think about three years, especially since 2014.  
63:48 - I think I used it in till about I think 2016 or 
17. I'm not too sure. And it worked great for me,  
63:55 - I really enjoyed it. And I'm just getting back to 
I'm just remembering all the tools used to work,  
64:00 - it was actually quite a user intuitive 
interface. Because I just remember right  
64:04 - clicking means you can copy the URL, you 
can inspect it, you can change the request,  
64:09 - you can attack all that good stuff. And you know, 
it's sorted out really, really well. Alright,  
64:13 - and you can look at the requests here, 
you can change them to whatever you want,  
64:17 - and then send them you can intercept them. So 
it essentially does whatever but a suite does.  
64:27 - We're going to be looking at web application 
firewalls, or waafs, as they're called. Now,  
64:32 - this may be a new term for you and do not worry. 
This is now when we move into a more professional  
64:38 - level. And again, this is what I've been talking 
about is most people out there or most documented  
64:44 - documentation out there won't cover the most 
important industry standards. You know, now when  
64:49 - I'm talking about web application firewalls, what 
I mean is, is these are the protection or these  
64:57 - are the mitigation procedures. put in place to 
protect a web application from attacks, obviously  
65:04 - now as a penetration tester, or if you're 
looking at it from a white hat, or a black hat  
65:08 - perspective, from wider perspective, it's always 
important to have a web application firewall. And  
65:13 - I'll probably make another video showing you how 
to set it up, it's really easy, and it's free,  
65:16 - and it will probably removed about 20% of attacks. 
Okay, so that's if you're a white hat. Now,  
65:22 - if you're a black hat, and you're targeting, or 
you're performing a penetration test legally on  
65:27 - a website or web application, we usually what 
the employer will tell you is they'll give you  
65:32 - a scope of the project. And again, they might give 
you the source code, etc, etc, you get the idea,  
65:38 - you have your white box, testing, black box 
and gray box. But coming back to the firewall,  
65:43 - most of them will know that there is a firewall. 
And that's because the person who set the website  
65:48 - up for them in terms of hosting, or the web 
application for them, will in most cases,  
65:53 - on a professional level, have a web application 
firewall. Now you might be a bit confused. And  
65:58 - you might be saying, Well, why is this important 
when performing a penetration test? Well, this  
66:02 - is important because firstly, it's something that 
most pen testers overlook. And if you know this,  
66:08 - you've got an ace up your sleeve. Alright, so 
essentially, what's happening is if it's being  
66:13 - used, if a web application firewall is being 
used, you obviously first need to detect it.  
66:19 - And I'm going to show you how to detect it in 
this video using a special tool that I don't  
66:23 - think you've ever heard of. But it's also industry 
standard. So this is a real secret, I don't know,  
66:28 - for some reason, it's not just, it's something 
that just hasn't caught up yet. But hopefully,  
66:33 - after this video, you'll know about it. Alright, 
so essentially, the purpose of a web application  
66:38 - firewall is it protects the web application, you 
know, from a firewall point of view in the sense  
66:44 - that it blocks attacks, as one would expect them 
to come. Now what does this mean for you? Well,  
66:51 - this means that you will need to, you will 
need to manipulate any type of data that is  
66:57 - going to be encoded, alright. So what this 
means is, if you're, if you're performing a  
67:02 - penetration test that involves you manipulating 
data and sending it back to the web application,  
67:06 - then you need to encode it in a specific way to 
bypass the firewall. Otherwise, it will be blocked  
67:12 - by the firewall. And I'm sure most of you have 
actually done this before. If you're just amateur  
67:17 - penetration testers, and you've just begun, you'll 
find that for some reason, your requests aren't  
67:22 - being processed. And that's because they've, there 
is a firewall set up to prevent these malicious  
67:27 - requests from being processed. Okay, so again, web 
application firewall is really, really important.  
67:32 - Now, looking at the tool we'll be using, the tool 
has actually a very, very funny name you for some  
67:38 - of you might find it hilarious, it is called wolf 
wolf. Now for those of you who have heard of it,  
67:43 - you pretty much already know how to detect a web 
application firewall, but it's really very, very  
67:48 - simple. Alright, so just open up your terminal. 
And what you want to do is you want to type in  
67:54 - wolf wolf. Alright, so this is how it is going 
to be spelt. So it's worth Wolf with a tooth with  
68:01 - two zeros. And the syntax is pretty simple. If I 
just hit enter, as you can see, we're forth a web  
68:07 - application firewall detection tool. Alright, so 
credit go to the author, it's actually it's a tool  
68:12 - that's been there since the, I think almost the 
last version of backtrack and the first version  
68:17 - of Kali. So again, quite an old tool, I when I say 
old, I mean, you know, I mean that with respect,  
68:23 - given the fact that it's a really, really useful 
and I've used it a lot because it saves you a lot  
68:28 - of time. And what I'm talking about is, so let's 
say we want to scan a website, okay. In this case,  
68:36 - I have my WordPress server running here. And as 
you can see, it's the site is being hosted on  
68:41 - 190 2.1 68 point 1.11. Alright, so I have that IP 
opened up in my browser. And as you can see, it's  
68:48 - a WordPress site. And this site is vulnerable. 
And this is what we're going to be performing  
68:52 - later on the penetration tests on. But for now, we 
want to find out whether it has a firewall. Now by  
68:59 - default, I know it doesn't have a firewall. But 
let's see what we're for Fidelis, alright, so the  
69:03 - syntax is very simple. As you can see, you just 
type in wolf Wolf, and you enter your URL or your  
69:08 - URL, so you can enter as many as you like. Okay, 
so I'll give you an example of how to go about it,  
69:13 - make sure you enter your HTTP or HTTPS protocol. 
And we just, let's try that out. So Wolf, Wolf,  
69:21 - and we specify our protocol HTTP in this case, and 
the IP address 190 2.1 68 point 1.11. All right,  
69:29 - now in this case, I'm pretty sure that it 
won't detect any web application firewall.  
69:34 - So let me just hit Enter. And as you can see, 
no web application firewall detected by the  
69:40 - generic detection. Alright, now this is very, 
very advanced. And this tool is an industry  
69:44 - standard. And if it does tell you that there is 
no web application firewall, then by all means,  
69:49 - I can guarantee that it will it does not have 
a firewall. Now let's look at one of my sites  
69:55 - that I currently own. It's a site that I use. It's 
actually My web development company that obviously  
70:02 - we use for web development now I've predicted this 
site with a web application firewall provided by  
70:08 - CloudFlare. Now, for those of you who are web 
developers, and when you're performing your  
70:12 - hosting, you know that using CloudFlare is awesome 
because it allows you to optimize your site for  
70:16 - speed. It allows you to purchase assets and make 
your site faster, protected, and again, protected  
70:22 - from DDoS attacks, etc, etc, all the good stuff. 
So let's see if it will actually detect this. So  
70:29 - I'm going to type in wolf wolf. I know that name 
is really, really funny. The protocol is HTTPS,  
70:35 - https like so and I'm going to specify the 
site which is Elgon studios.com. Alright,  
70:43 - Elgon studios.com. And if I enter, as you can 
see, it's going to start checking the site, give  
70:48 - it a few seconds, it shouldn't take any much. You 
know, a lot of time, and as you can see the site,  
70:53 - Elgon studios.com is behind CloudFlare. Right now, 
what this means is that most of the most of the  
71:00 - attacks that involve manipulation of data will 
be in some way blocked. And you know, you won't  
71:07 - get your response back the way you wanted it. And 
the render wouldn't be the same. Right now. Again,  
71:12 - as you can see, it detected that it is behind 
a web application firewall. Now the next step  
71:16 - is how to encode these, how to encode encode your 
your requests that you're going to be sending to  
71:23 - the web application. And that's what we'll be 
looking at as we increase the security level,  
71:27 - using the the dam vulnerable web application. 
Alright, so I thought, this is something that  
71:32 - I really need to share with you, again, it's 
going to really help you. And I promise you, this  
71:37 - is something that, you know, if you go for a job 
interview, or you're performing a penetration test  
71:41 - for a company, this is something that most of the 
network or systems administrators are very keen  
71:46 - on, they want to know whether you really know your 
stuff, and whether you're really up to date with  
71:51 - how to detect, first of all, because information 
gathering is really important. And as you can see,  
71:56 - this tool is fantastic. And once you know there's 
a firewall, you then have a better idea of how to  
72:01 - target and you won't be wasting time. Again, 
that's something that most of the amateurs or  
72:05 - beginners do. They waste a lot of time trying 
different commands that they've seen, but they  
72:11 - find the date and they see that it doesn't work. 
And they're like, how is this possible? Am I doing  
72:15 - something wrong? The truth is, the web application 
is probably well protected. So again, you know,  
72:22 - do not use this for any malicious purposes. Again, 
this is simply an information gathering tool.  
72:30 - I'm going to be showing you how to use der Buster 
to discover directories and files on a website or  
72:36 - a web application. You might be asking yourself, 
what is der Buster? Or if you haven't heard of  
72:41 - der buster, let me explain it to you. Alright, 
so the airburst is essentially a tool that was  
72:47 - developed by OS, the open web application security 
project, and essentially uses a brute forcing to  
72:54 - find commonly used directories and file names 
on servers. Alright, so this tool is extremely  
72:59 - useful for those of you who are doing CTF, for 
those of you who are bug bounty hunters, because  
73:03 - essentially, it allows you to understand the 
structure of a web web application or a website in  
73:10 - terms of the files and directories and how they're 
structured. Alright, so why is this important?  
73:15 - Well, this is important because this will help us 
understand how we can attack a site or what type  
73:21 - of attack vectors we can, we can we can find, you 
know, so for example, if I the web application,  
73:26 - and I'm going to demonstrate that right now, and 
I scanned it with the bust, and we found some  
73:31 - hidden directories and hidden files, we can use 
these as attack vectors. Alright, so as I said,  
73:37 - it also allows you to find hidden directories or 
files that are hidden from the public. So this  
73:43 - can also lead you to, to finding additional 
resources that could have been hidden away  
73:48 - by the devs that like for example, admin pages, 
etc, etc. Alright, so how does it work? Well,  
73:55 - really simply, once you start up there, Buster, 
and again, as I mentioned, it uses brute forcing  
74:00 - so I'll explain where wordless come into play. 
So you open it up and you select the URL of the  
74:06 - web application or the website and you specify 
the port The port is is the is definitely going  
74:11 - to be HTTP sewed a the a port 80 or Port 443. And 
then you select the word list now, in this case,  
74:19 - Cali annex already has a dub dub Buster word list 
that that are designed, it has three of them that  
74:27 - are designed for different types of scenarios. 
And I'll explain them as we move along. All right,  
74:31 - and essentially how it works is once you start 
the brute force attack, it will send HTTP GET  
74:37 - requests, and it will wait for the response from 
the server or the web, the web application. If  
74:42 - it gets a 200 response. That means that yes, that 
directory exists. Alright, if it gets if it gets a  
74:48 - bad response, meaning like 400 or four or three, 
meaning no access, then it'll it will it will  
74:54 - know that that directory of file doesn't exist. So 
it's essentially testing directories on the server  
74:59 - against This, this word list. So it will check, 
for example, is there a temp folder, if it sends  
75:05 - a temp request to the server, it gets a response, 
a positive response, then it knows it's there,  
75:10 - and then it will enumerate them. Alright, so let's 
start off really, really simply. So I'm on Cali  
75:16 - the next, I have the OS, broken web application, 
right here. And I'm going to be demonstrating two  
75:24 - scenarios. So you can see I'm running that 
here. And that has a lot of vulnerable web  
75:27 - applications. But the whole idea is to demonstrate 
how directories can be found. Alright, and why  
75:33 - this is extremely important, especially for a 
web application penetration tester. Alright, so  
75:38 - I'm gonna pull up Firefox. And as you can see, you 
have the open web application project right here,  
75:44 - the OS B web, as they call it, and it has plenty 
of ways of me testing this. But what if I was to  
75:51 - just test the entire server? Alright, so this is 
a web server. What if I was to test the entire web  
75:56 - so well, I'm guessing that there going to be a lot 
of files and directories. So what we can do is,  
76:02 - we can start off with a perfect example of how 
this will work is let's say you're targeting a  
76:08 - WordPress site. So I'm going to open up the broken 
WordPress. Now, of course, this is an very old  
76:12 - one, and we're not really exploiting anything. But 
by using this example, it will let us understand  
76:18 - how we can enumerate the different directories and 
folders, you know, on this WordPress installation,  
76:24 - or if you are target targeting a WordPress 
site, this is the way you do it. So I'm going  
76:29 - to copy the URL with the with the directory right 
here. So it we know it's in the WordPress folder,  
76:34 - because that is the root directory of the of 
the web server and we're selecting the WordPress  
76:39 - installation. But for the website, you will 
select the URL. Alright. And that's for the port,  
76:45 - we know that this is the default HTTP port, which 
means it's Port 80. Alright, so I have doorbuster.  
76:50 - Right here, if you can't find it, just you can use 
the start menu and type in der buster, it's going  
76:55 - to be like so just this click on it, and give it a 
few seconds to start up. So again, it was designed  
77:00 - by the OS team. So it works really, really well. 
And again, this is something that I'm sure if you  
77:06 - if you are a web application penetration tester, 
or you do do the CTF challenges, then you will,  
77:12 - you'll know that use this tool a lot. Alright, so 
we in here, we have the target URL, and that will  
77:18 - we will paste it Alright, so we can paste it right 
here. So Ctrl V, and that is the URL. Now in the  
77:26 - work method, if you want to, if you want the scan 
to be faster, you can use the GET requests, but  
77:31 - what we can do is auto switch them from the head 
and get and that will give us a more robust or a  
77:37 - more accurate response rate. Alright, so in terms 
of the number of days, this is how fast you want,  
77:42 - you want the scan or the brute force to be, so the 
faster the better depending on your hardware. And  
77:47 - of course, you don't want to overload the server, 
so I'm just going to go hit click on Go faster,  
77:52 - that's probably works the best for me. But if you 
wanted to run faster, then that means it's gonna,  
77:57 - it's gonna have multiple requests and threads 
being sent from your computer. Alright,  
78:02 - so I like keeping it at just 200 threads, which 
is go faster. And because I'm testing my own web  
78:07 - server, I can, you know, I can pretty much 
increase it to whatever I want. So usually,  
78:13 - if you're talking about a bigger server or a 
bigger web application, then it doesn't really  
78:18 - matter how many requests or many threads you use, 
it will not really affect the performance of the  
78:23 - web server. But if I was to run it at maybe a 
maximum speed, you'd see that the web server  
78:28 - would be lagging out, you know, out of the amount 
of requests that are being sent. Because you know,  
78:34 - you have to understand it from a fundamental point 
of view, we are requesting different web pages,  
78:39 - and the server has to process them. So if the if 
the if the server is not running on on, you know,  
78:44 - good resources, like it's running on one gigabyte 
of RAM, it's very easy to make it lag out,  
78:49 - and to actually cause some sort of a denial of 
service just because of the amount of requests.  
78:54 - But in this case, we are performing it you 
know, with with an ethical perspective. So now,  
78:59 - you want to select a list based brute force or you 
can use a pure brute force. But I don't recommend  
79:05 - that that doesn't really work. And you now need to 
select your word list your doorbuster word list.  
79:10 - Now by default on Kali Linux and on paradise, 
these are found in the user share folder on the  
79:16 - under word list. And you can find the doorbuster 
word list right there. So I'm going to show you  
79:20 - that right now. So I'm going to browse, I'm going 
to go to my root and I'm going to go into user  
79:24 - and I'm going to go into share. And let's go into 
Word Lists here. Let's see if I can find it. It's  
79:30 - obviously with a W. Where it Where is it? Let's 
see. Let's see. Let's see where is wordless story  
79:38 - if I can see this. Yeah, there we are. Sorry about 
that. wordlist and you now want to go into der  
79:42 - buster. Alright, so there is going to be a folder 
called der buster. And now you might be a little  
79:46 - bit confused. Well, really, you don't need to need 
me to be confused. That's why I'm here. So as a  
79:52 - beginner you might be wondering like which one 
is better. Now as an advanced penetration test,  
79:58 - I know which one is the best in Most cases, 
it's going to be the medium the directory list  
80:03 - 2.3 medium dot txt. Now, if you're scanning a very 
small web application that that's not that really  
80:09 - complex, like a simple HTML site, you know, HTML, 
CSS, whatever you want to call it, then I would  
80:16 - recommend the smaller one. But if you're scanning 
a big site, like a WordPress installation,  
80:21 - or a Joomla installation, then you should use the 
medium one, this will work 99% of the time unless  
80:27 - your your, your requests are being blocked by 
either a web application firewall or by the,  
80:33 - the host. So I'm just going to select list. 
Alright. And now in terms of these other options,  
80:38 - you can see it's, it's going to essentially 
brute force brute force the directories,  
80:42 - the files, it's going to be recursive, which is 
great. And the directory, you must specify the  
80:47 - directory if it is if you are trying to perform 
a scan that is directory sensitive. Alright,  
80:53 - and standard start point, just leave it like 
that. And you now want to hit start. Alright,  
80:59 - so once you start is going to start brute forcing 
the web server against, it's going to start  
81:03 - sending the request. And if it gets the responses, 
the positive responses is going to, it's going to  
81:09 - understand that yes, that directory does exist. 
Now you can see we have a response that is being  
81:14 - sent here. And it's going to tell tell you that 
it is unable to determine a consistent failed  
81:20 - response, which means some directories and files 
are being you're getting a negative or you're  
81:27 - getting a no access response, meaning that that 
directory doesn't exist. So what you can do is  
81:31 - just hit Cancel to these ones in it Yes. And it's 
going to continue scanning the other ones. Now of  
81:36 - course down here you can see since it's performing 
a brute force, you can look at the current speed,  
81:41 - which varies dependent on the amount of 
directories, the average speed, and it will  
81:47 - tell you the total amount of requests done out of 
the amount that could be done depending on on the  
81:52 - word list that you have selected. And finally, you 
have the time to finish. Now, of course, this will  
81:56 - vary depending on a lot of factors. But mostly 
it depends on the speed of the scan that you've  
82:03 - selected, and the and the word list. So you have 
your scan information here, it's going to tell you  
82:07 - what folders and files it's testing. And in here, 
you can see the results in terms of directories  
82:13 - and files that it was able to find. And in the 
results, this is going to give you the directory  
82:18 - structure as to how files and folders are being 
structured on the web application. Now by default,  
82:23 - right now, you can see the amount of the 
files and folders that it has found are,  
82:29 - for example, the WordPress register dot php. 
So if we open that, if you right click on it,  
82:34 - you can open it in the URL, or you can view 
the response that it gave. And you can copy it,  
82:39 - you understand you get the basic functionality 
here. And then you can open it in your browser.  
82:43 - So again, you see that we are finding files that 
we otherwise wouldn't have known existed. Now,  
82:48 - of course, for a default WordPress installation, 
you would have guessed that this does exist. But  
82:53 - remember, most people are for volken, for most 
other installations on configured figurations,  
82:59 - this can be a great way of finding files and 
folders that you didn't know existed. And again,  
83:05 - discovering them is very, very important. And 
this can give you different attack vectors. So  
83:09 - for example, if I went to the admin dot php, and 
it forced me to log in, that might be a good place  
83:14 - to start brute forcing, if I had credentials, if 
not, you can choose Select another attack vector.  
83:20 - So let me just move back here you can see we have 
the register page here, which we just clicked on.  
83:25 - Let's look at the WordPress login dot php. So 
I'm gonna open that up in the browser. Now you  
83:30 - can see the server is not responding. And that's 
another point that I wanted to point out. If you  
83:35 - want to be as you know, right now we are being 
as promiscuous as possible. Because we it's  
83:41 - not really a web application that is delivering 
service to other people. But because it's hosted  
83:46 - on my local area network. So in this case, you 
can do a performing a type of denial of service.  
83:51 - And that's because the server is located very, 
very minimal resources to this virtual machine.  
83:57 - So that's why it's kind of lagging out. Alright, 
so that's something to take into consideration.  
84:01 - Now if I was to, to pause the attack, like so if I 
was to just pause it, remember, you can pause it,  
84:07 - and you can stop it. And let me just go back 
here. And let's see if we can reload these pages,  
84:12 - they should be able to, to be reloaded quick 
enough. Let me let me just load that up. And  
84:18 - we can close this one. Let's see if the WordPress 
register page does open up. If this virtual, yeah,  
84:24 - there we are. So you can see even though this 
is a very old WordPress installation, that we  
84:29 - were causing it to lag out. So always keep that in 
mind that the amount of threads that you say can  
84:35 - affect the performance of the website of or of the 
web application and you don't want to cause any  
84:40 - any impact to customers if you're performing the 
test on a real world working web application or  
84:47 - website. Alright, just something you might want to 
take into consideration. So we're going to resume  
84:51 - it and of course I'm not going to expect to find 
anything we add here. Although this WordPress  
84:56 - installation is designed to be vulnerable. 
So you can also change the number of threads  
85:01 - running right here. So if I wanted to run, you 
know, maybe on 10 threads, which is quite slow,  
85:07 - that means you will get, the enumeration process 
will take longer. So it's all about balancing your  
85:13 - resources and understanding what you're trying 
to look for. And of course, this can be a very,  
85:18 - very useful tool. When doing bug bounties, or, 
or CTF for that matter, especially hack the box,  
85:30 - we are going to be looking at something that is 
extremely important and something that should be  
85:34 - understood completely, and that is cross site 
scripting. Alright, now before we get started,  
85:40 - I'm just going to explain what we're going to 
be looking at explain what we're going to be  
85:44 - looking at in this video, we're going to start 
off with explaining what cross site scripting is,  
85:50 - I'm going to be showing you the environment 
that we'll be using for testing any of these,  
85:55 - any of these attacks just because they allow 
us to illustrate or they allow me to explain  
86:01 - how everything works, because that's the most 
important thing for me is that you understand  
86:05 - what you're you're listening to, and you have a 
good representation of what's going on. Alright,  
86:11 - so I'll be explaining stored. I'll be explaining 
the reflected stored and Dom cross site scripting.  
86:18 - Alright, so let's get started with me explaining 
what environment I'm currently running. So you  
86:24 - can see that I'm running Kali Linux right now. 
But I am going to be using the OS broken web  
86:30 - applications project. So I'll have this in 
the description section, it is essentially  
86:34 - a virtual machine, that you can easily just run 
on VirtualBox or VMware. I'm currently running  
86:40 - it here. As you can see, I just got the local 
IP, it's 190 2.1 68 point 1.111. All right, so  
86:49 - I have that running. And I'm running this on Kali 
Linux, and I already have opened up the URL in my  
86:56 - browser. So you can see from here, I've opened 
up v whap. And I've opened up webgoat, because  
87:02 - that's what I'm going to be using to explain each 
of these cross site scripting attacks. So if I  
87:07 - was to do that false to just open up 190 2.1 68 
point 1.11, yours could be different, it should  
87:13 - be different. Depending on your IP configuration, 
and subnet, then it'll take you to the OS, b,  
87:19 - w A, or the OS broken web applications project. 
The latest version, as of recording this video  
87:25 - is version 1.2. So we will be using webgoat and B 
web, or the broken web application project for for  
87:34 - this demonstration. So the default credentials for 
webgoat are going to be guest for the username and  
87:41 - guest for the password. And for B whap. It should 
give you the prompt right over there. I think it's  
87:47 - going to be bug app or something like that. But 
irregardless, it will tell you what it is. All  
87:53 - right. So make sure you open that up, and you have 
that all set up. So I've logged in to be web and  
87:58 - I have a web goat started up right here. Alright, 
so let me close that up. And we are ready to go.  
88:03 - Now before we even move on into performing these 
attacks, it's very important to understand what's  
88:08 - going on here with with cross site scripting, 
what it is how it works. And what are you exactly  
88:14 - taking advantage of right now, this is where a lot 
of people make mistakes. And if you want to be a  
88:19 - successful web application penetration tester, you 
need to understand, you know, from a fundamental  
88:24 - level, what's going on here. Alright, so let's 
get started. What is cross site scripting? Well,  
88:30 - simply put it is the process of injecting a script 
into a into the parameter in a URL to attack  
88:38 - a user of the site or to potentially attack the 
server side of the website or the web application,  
88:44 - right? So essentially, is the inject the 
injection of a script into the parameter of  
88:49 - a URL. All right, that's essentially what it is. 
Now, of course, this may be quite confusing, but  
88:54 - don't worry, I'll explain what's going on here. So 
let's start off with with, first of all explaining  
89:02 - the three types of cross site scripting. All 
right, the first one is reflected and then  
89:07 - we have stored and Dom. So with reflected what's 
happening here is the data is inputted and then,  
89:14 - you know, reflected directly back back on the 
screen. So I'll explain this in a second. Alright,  
89:20 - so if we are to look at this from a fundamental 
perspective, I'll show you how to access this,  
89:27 - you know how to navigate the view up. Just give 
me a second, let me explain what's going on. So  
89:32 - essentially, what's happening with reflected cross 
site scripting is that the input is going to be  
89:37 - stored in the parameter of the URL. All right, 
and I'll explain how this differs with each type  
89:42 - of attack. Because many of you will point out and 
say, well, it's not only to do with parameters,  
89:46 - and don't worry, I'll explain all of this. 
Alright, so we can essentially manipulate the the  
89:52 - parameter of the URL, so that we can essentially 
run a script. Now what type of script we can run a  
89:58 - malicious script that is based on in JavaScript, 
and I'll explain that right now. So you can see  
90:02 - with our portal, you don't want to touch anything 
here, you can set the security level. But for now,  
90:07 - I recommend setting it to lope. Not that that's 
going to hurt anyone's ego. Because remember,  
90:12 - you have to be humbled to begin, and you need to 
understand what's going on first. So we will open  
90:18 - up the Jews, the bugs section here, and we want 
to go down into cross site scripting. And we want  
90:23 - to go into reflected which essentially deals with 
the get the get request. So we're going to start  
90:28 - off with that. And this will really make you 
understand what's going on here. So if I click  
90:32 - on that, and I just hit hack. Alright, so now it's 
going to give us a prompt here. And you might be  
90:39 - asking, Well, what what do you mean, what exactly 
is going on, if I was to not enter any details  
90:45 - into the, you know, into these fields, right 
here. So for example, you can see I just had a  
90:50 - suggestion there, that's because I was testing it 
out. But if I was to hit go, you can see that in  
90:55 - the URL, we do have the input here. So you can see 
the values can be edited directly into the form.  
91:01 - So you can see first name has no value. And then 
we have the last name, which again has no value,  
91:07 - and you can see that it is submitting a form. 
So what we can do is run some JavaScript code  
91:11 - in here. And the most common way of explaining 
what's going on here, of course, not running a  
91:16 - very malicious code right now, it's essentially 
explaining and demonstrating that it does work is  
91:21 - I can run a piece of code here. Now, of course, 
when you put this into a practical perspective,  
91:26 - many sites are going to filter the content that 
you can enter in these fields, all these forms,  
91:32 - and will essentially will not allow you to 
run JavaScript code and you know, obviously,  
91:38 - to protect, protect the site from these type of 
attacks. But what you can do is encapsulated to  
91:45 - encode it in a different type of language. 
Or, as I said, I'll show y'all everything,  
91:49 - or how all of this works. So this right, right 
now, being the current security level, as low,  
91:55 - we are a lot a lot essentially encode, it will 
not verify or validate what we're entering in  
92:01 - here what input is being given. So if we were 
to type in a script here, so we can say script,  
92:07 - and you can see the recommendation there script, 
that's mine. So if I was to type in alert, and  
92:12 - this is JavaScript, so I'm pretty, I'm pretty sure 
you can you know what's going on. So we can say,  
92:17 - Hello world. This is an example of reflected 
accesses, or cross site scripting, and we can  
92:30 - close that operate now. And then we need to close 
the script. So we can do that in the next field or  
92:35 - the next parameter. Most people like doing it from 
the start. But this is just to show you how robust  
92:39 - this can be. So I type in I close the script and 
hit go. And as you can see, it gives us the alert,  
92:45 - which is what we and we which is what we used 
as a form of, of me showing you that it does  
92:52 - work and it will be processed, the input will be 
processed and will be sent back to you, you being  
92:57 - the client. And we can just hit OK. And that was 
an example of reflected excess cross cross site  
93:04 - scripting, using the get method. Now of course 
we can, I can replicate this many, many times  
93:08 - using the other types of cross site scripting, for 
example, with the post, etc, etc. We'll be looking  
93:14 - at all of that. But for now we need to understand 
what's going on here. Now next, we need to look  
93:19 - at stored cross site scripting, this is probably 
my favorite because of the potential that it does  
93:24 - have. Alright, so let's go into the juicy bug menu 
here. And we want to go into cross site scripting,  
93:30 - and we want to go we want to go for the blog, 
cross site scripting stored cross site scripting,  
93:37 - and we're gonna select blog, and I'll 
explain why in a second. Alright, so first,  
93:41 - let me explain what stored cross site scripting 
is. So essentially, with this with the cross site  
93:46 - scripting attacks, more specifically, these stored 
attacks, essentially, what's happening is you're  
93:52 - attacking the input. And you're essentially 
attacking the input that is to be stored or  
93:58 - you're attacking the data, or, essentially, I'll 
explain this really simply, so you're attacking  
94:03 - the input that is to be stored on a database. So 
what you're doing is you're essentially injecting  
94:08 - malicious code that will be saved into a database, 
or that is going to be saved by the server,  
94:13 - or the web application server. And then you can 
definitely you since it's being stored, you can  
94:19 - access it later on or other users can access it. 
And for example, if it's running malicious code,  
94:24 - it can trigger different things like opening 
the webcam of a user stealing different type of  
94:29 - information. I'm not going to go into what you can 
do with it, but you can really do a lot of stuff,  
94:34 - a lot of malicious stuff with code. Alright, so 
let me explain what's going on here. So with this  
94:39 - stored, cross site scripting, you can essentially 
inject malicious code into the database again,  
94:45 - that then that when accessed runs this 
malicious code. Alright, so if you can see  
94:51 - this is an example of a blog. Let me explain what 
I mean the best places to implement stored cross  
94:57 - site scripting is in places like means, you know 
forums. And again, as you can see write your blog  
95:04 - in the form of comments that you know, or pages 
that can be accessed later, or data that is being  
95:09 - stored in directly into the database, any database 
for that matter as long as it's being stored,  
95:15 - okay, so we can type in something like hello. 
And we can submit that to the database. And  
95:20 - you can see it's getting stored. And you have 
the different tables, you have the the number,  
95:25 - the owner, the date and the entry. So now we can 
also run a script in here. Alright, so what if we  
95:33 - were to enter Java scripts, and again, this data, 
given our security level is any of the data that  
95:39 - we're entering is not being validated. So you 
can essentially enter it raw. Now in reality,  
95:45 - if you go and try and enter a script in the 
native will not be accepted, because, again,  
95:49 - they're protecting their site against that. 
That's one way of mitigation, very basic,  
95:53 - I'm sure you know what I'm talking about. Alright, 
so enough of me rambling on. So if we are doing  
95:58 - enter the same script we entered, we are to say 
script. And we then say, alert, for example,  
96:04 - we can you can use any type of JavaScript code 
you want here, and you can experiment, you know,  
96:09 - you these web applications are there for you to 
experiment and test your skills out. So first  
96:15 - to say, Hello world. This is stored out stored 
cross site scripting, and we just close that up  
96:25 - there. And of course, we have to close the script, 
because we know that that will not execute if we  
96:29 - do not code it correctly. Okay, so now we can we 
can add that. And if I was to just hit submit,  
96:37 - right, now, you can see that it's going to store 
and with that being the latest blog post, you can  
96:43 - see it's going to tell you, it's going to execute 
the script. And it's going to say hello world.  
96:46 - This is stored cross site scripting. So an example 
of a blog, if you're to post this on a page or a,  
96:52 - you know, to make a blog post and inject this 
script in, anyone opens that page will essentially  
96:58 - run that malicious code. And whatever that code 
does, can then furthermore, you know, cause damage  
97:04 - to the user or to the server depending on what you 
want it to do. So it's all dependent on what the  
97:09 - attacker is to do. Remember what I told you in 
the first video of this series, it's all about  
97:14 - your mindset, and your your your willingness to 
break things and to find out what does and doesn't  
97:19 - work. Okay, so that was an example of stored 
cross site scripting. And as I've mentioned,  
97:27 - the most important thing to understand is this in 
this scenario, the data is not being validated if  
97:32 - it is being validated. And I'll show you that in 
a second. Or probably in the next set of videos,  
97:37 - we'll increase the security level, and I'll show 
you how to get you know past this, you can see  
97:43 - how things change as you move along in terms of 
security levels. So I was going to use the V whap.  
97:50 - This my first time using it. So I had to get a 
bit of an introduction through the documentation.  
97:55 - And I realize they don't have dumb cross site 
scripting. So I that's why I had to use webgoat.  
98:03 - They're the only ones I know who actually allow us 
to run it. So as zoomed in right now, by the way,  
98:08 - the credentials are guests for the username 
and guest for the password. So essentially,  
98:15 - I went through cross site scripting, and again, 
they didn't have the DOM in here, all they were  
98:20 - focusing on is stored and again, reflected. So I 
found it to be in the eye x or Ajax or whatever  
98:28 - you want to call it. And we have the the DOM 
based cross site scripting, let me explain why  
98:34 - it's in. This is based in Ajax security. This 
is because Dom cross site scripting focuses on  
98:41 - the client side. So any data or input that is 
entered, whether it be a malicious code, etc,  
98:46 - etc, is going to be processed by the client, not 
the server. So any of the attacks will be based,  
98:51 - of course, on the client. Now, let me explain 
what I mean. If I am to run remember, JavaScript,  
98:58 - server side, client side i x, for example. 
So if I am to run, for example, a JavaScript  
99:05 - code in this entry here, so script, and again, I 
type in alert, just being the example and I say,  
99:10 - Hello, let's keep that simple. And I close the 
script here, you can see that we will probably  
99:16 - not be left with anything will not get any result. 
That's because it's being processed by the client,  
99:21 - not by the server. So no, no result or no data 
will be reflected back to us. If it was, you know,  
99:28 - if it was reflected cross site, scripting it, 
the server processes it, and then is reflected  
99:33 - back to the client. So if I was to submit here, 
you can see that nothing happens here. And that  
99:39 - it is going to be taken as code. Now what if 
we were to enter or use a language that that  
99:45 - a client can understand? So let's say we want 
to say, let's see, HTML, whatever to use HTML,  
99:53 - so I can say in here, IMG, for example, that's a 
very This is the way we learned it. So IMG See,  
100:00 - and we don't have an image source. So we can leave 
that like that. And then we can use the on error,  
100:05 - in case we get an error of image which we will get 
because the image has no source on error, we can  
100:12 - say that is going to be, that is going to be equal 
to alert. And then the alert we can input in here,  
100:21 - we can say, Hello, whoops, hello world. And we 
can close that up. And once we have closed it,  
100:28 - you can see that we can, we can close that there. 
And there you are. So it is great to be processed  
100:34 - by the client, and you get the dialog box or the 
alert with the message Hello world. So you can  
100:40 - see that with Dom based cross site scripting, it 
is all being processed all the input, whether it  
100:47 - be malicious or not, is being processed by the 
client. And Ei x is one of the largest languages  
100:52 - that can be used. So you can also incorporate 
a x if you wanted to test it out. Remember,  
100:57 - it's all about experimentation and understanding, 
I hope that you're you've got an understanding of  
101:02 - what cross site scripting is, how it can be 
used to manipulate data, whether it be on  
101:07 - the client side on the database, and how you 
can easily just transfer data with you know,  
101:12 - bad security in place. Of course, this is 
the these attacks will be a very uncommon  
101:17 - now. But again, this was focused on more 
on an explanation point of view. We're  
101:25 - going to be looking at cross site request forgery, 
or CSRF. Now, this is an extremely important topic  
101:32 - and a big one that I cover it correctly. So for 
the purpose of this video, I've set up a very  
101:37 - unique environment that in at least in my opinion, 
will demonstrate how to utilize or how to perform  
101:43 - this attack. Alright, now I'm just going to give 
you a brief overview of the environment that  
101:49 - I have no, of course, you can see I have a few 
files open here. Don't worry about them right now,  
101:54 - just just remember that we'll be using them later 
on. And I'll be using them really, really well to  
101:59 - explain what's going on here. So you can see as my 
target or as my vulnerable system I'm going to be  
102:06 - using on my vulnerable web application, I should 
say, I'm going to be using the OWASP juice shop  
102:12 - now. Not actually no one actually recommended this 
to me. But I remember that I performed this during  
102:19 - a CTF challenge that I went to earlier, I think 
late last year. I'm not too sure exactly when  
102:25 - but the whole process was involved in exploiting 
this web application. Alright, and in my opinion,  
102:31 - this really outlined or really showed of how 
to perform all of these various web application  
102:38 - attacks. In this case, we're going to be 
focusing on cross site request forgery. Alright,  
102:43 - so I have the juice shop running it's, it's based 
on a node.js. And it's running on my local host.  
102:49 - Let me just show you that right now. There we 
are. So I haven't logged in or done anything  
102:53 - yet. And that's because I'm going to do that with 
you. So I've set it up, it's running on my local  
102:57 - host. Let's get started with this really, really 
simple but sometimes complicated topic. Alright,  
103:05 - so cross site request forgery CSRF. Now from 
the name, you can already tell that it's split  
103:12 - into two into two sections, you have your cross 
site, and your request forgery. So from that,  
103:18 - we can get a basic example of what's going on 
here. We have cross site scripting, and we are  
103:24 - going to be forging requests or we are going to be 
manipulating requests. Hmm, interesting. So we are  
103:30 - we are kind of understanding what's going on here. 
Now the technical explanation for what CSRF is,  
103:36 - is it is an attack that forces an end user to 
executed unwanted actions on a web application  
103:43 - in which they're currently authenticated. Alright, 
so let me put that really, really simply, right,  
103:50 - it's an attack that will force an end user to 
execute unwanted actions on the web, on a web  
103:55 - application, these actions can be anything, but in 
this case, we're going to be looking at changing  
104:00 - the password. And they have to be currently 
authenticated to that web application, which means  
104:07 - they have to be logged in to that web application 
for this to work. Because if they're logged out,  
104:12 - then you get the idea. It really doesn't help or 
it doesn't work. Alright, so we use cross site  
104:17 - scripting, in this case to perform the request 
forgery, and to get either desired or undesired  
104:23 - results. In our case, we're going to be looking 
at how to to change the password of any user  
104:28 - that's logged in to the to this web application. 
And how will we How will we be doing that? Well,  
104:34 - we are going to be using CSRF. But the first 
thing you need to understand is how an HTML form  
104:41 - works. Alright, and this is very important because 
first of all, a client will request a page from a  
104:48 - server. Alright, the server will then respond and 
give the the client the HTML form. The client will  
104:55 - then send back the form with the data back to the 
server server will then authenticate and authorize  
105:02 - the user and then will will perform the requested 
action. And based on the request and the response,  
105:08 - we are able to forge or to change the request 
and get a desired response if you're looking at  
105:15 - it from an attackers perspective. Alright, so, 
the the way CRS CS CSRF works sorry about that  
105:24 - is the attacker will manipulate the victim into 
submitting the attackers form data to the victims  
105:29 - web server, essentially, essentially performing 
these these requests in the in our case, as I've  
105:36 - mentioned, it will allow us to change the password 
of any user on this web application, in this case,  
105:42 - the OWASP juice shop web application. Alright, 
so now you might be asking, Well, if I'm a bug  
105:49 - bounty hunter, I'm practicing to become a bug 
bounty hunter. How do I go about finding this  
105:54 - vulnerability? Well, that's a very good question. 
And that is the question you should be asking  
105:58 - yourself when performing any penetration test. 
Now, coming back to my environment, I'm running  
106:05 - burp suite, the Community Edition, you you will 
just need the Community Edition for this one,  
106:10 - we're not performing any advanced techniques 
here, because we're essentially just changing,  
106:14 - we're just going to be changing the request to get 
our desired responses. But once we move on to the  
106:21 - advanced stuff, I'll then be using OS zap for 
our attacks. Alright, so keeping things really,  
106:27 - really simple, we, the way to look for these 
vulnerabilities is to target the login pages,  
106:33 - which we have right here, we then need to, we 
can then create the account and log in. And  
106:38 - then finally, we will be creating our own our 
own script to perform the cross site scripting.  
106:44 - And that will allow us to submit the data or 
if we send the URL to another user of this  
106:50 - web application who is currently authenticated, 
it will allow the it will allow us to make them  
106:55 - change their password, and then we can log into 
their account. Alright, so this vulnerability  
107:01 - is very common on sites with accounts, you know, 
sites that have emails of passwords. And as you  
107:08 - probably would have guessed, there are a lot 
of sites that utilize this functionality. But  
107:12 - remember, most of the sites out there will be 
protected from this vulnerability. So it's up  
107:16 - to you to find these vulnerabilities. Alright, so 
as I've mentioned, we will be using OWASP juice  
107:21 - shop as our target. And the reason is, is because 
it will explain what I want to explain really,  
107:27 - really well. Alright, and we'll be using the burp 
suite Community Edition. Now, as you can see,  
107:33 - I'm currently running the burp proxy, I'm not 
intercepting any traffic, if I open up burp suite,  
107:38 - I'm not intercepting any traffic. If I go to 
the proxy, and intercept, I'm not intercepting  
107:42 - anything. So it's currently just I'm just going 
through the burp proxy and all the traffic and  
107:48 - data is being logged through the proxy. So when 
it comes down to this little data that I've  
107:54 - saved here, I've already created an account. 
The reason I've done that is to save time,  
107:58 - because I don't want to explain everything about 
it. So I've created, I've created a user with the  
108:04 - email of test@test.com and a password of password. 
So really simple. Again, there's nothing really  
108:10 - complicated here. And if you want if you're 
wondering what exactly does this mean? Well,  
108:15 - this is a security question with the answer. 
So the question was, what's my favorite pet,  
108:21 - and I wrote in dog. So hopefully, that doesn't 
scare you into thinking that I've gone completely  
108:26 - crazy. And then in here we have the scripts that 
we'll be using, or will be utilizing to perform  
108:32 - the CSRF are on the site, I'll get to this in 
a second. We don't need that right now. So if  
108:38 - I want to log in, I know that the email is 
test@test.com. And the password is password.  
108:42 - Alright, so let me do that right now we need 
to authenticate. So let me log in, like so. And  
108:49 - I'm going to hit test@test.com. Alright, and I'm 
going to write the password, which is password,  
108:55 - and I'm going to log in. Alright, and I'm don't 
want to save the password. And there you also  
108:59 - have logged in now. Now as I said, this is very 
this vulnerability works really, really well when  
109:05 - you're talking about changing passwords, because 
as you can probably guess, an attacker would would  
109:09 - be looking to exploit this functionality because 
imagine, if we were able to send a request a get  
109:15 - request to our target with the URL encoded URL. 
Of course, we can also use link shorteners,  
109:21 - if we wanted to, to do that. And essentially, 
if they authenticated, it will allow us to make  
109:26 - them change their password simply by clicking 
on the link, changing their password to whatever  
109:30 - we specify. Alright, so how do we do this? Well, 
the first thing we need to do is we need to look  
109:37 - at how we get requests are being sent. And we can 
do that using burp. So we're just going to change  
109:43 - our password. So current password is password. 
And what I'm going to do is I'm going to change  
109:47 - my password into password. Oops, sorry, pass word 
123. And I'm going to repeat it so fast word 123.  
109:59 - And I'm going to hit Alright, so the password was 
successfully changed. Okay, now let's look at how  
110:05 - this was processed in burp, or how the request was 
sent in burp. So I'm going to go into burp proxy  
110:11 - and HTTP history. And I'm going to go all the way 
to the bottom. And as you can see, we have the get  
110:15 - request right over here. Okay, so the get request 
is very interesting. You can see we have the get  
110:21 - request, and it's targeting the the following URL. 
And these are the parameters. So change password,  
110:28 - the current password is password, new password 
123. And we've repeated it. Alright. So now let  
110:34 - us perform the forgery here. So I'm going 
to send this in to the repeater. Alright,  
110:39 - so I'm going to click on repeater. And in here, we 
can manipulate the request and see what responses  
110:44 - we get. All right, in case you, you did not know 
about that. But again, let's start off really,  
110:50 - really simply. So we are going to be working 
with the raw request. We don't want to work  
110:55 - with individual parameters, although you could 
change it, but we are going to be manipulating  
111:00 - the request entirely so that it performs what we 
want to do. Alright, so what we can do first is  
111:05 - we can test so let's change what if we were to 
change the current password to something like,  
111:13 - let's see test, let's change it to test and 
then we hit go, you can see that the response  
111:18 - we get is a is a 401 error, which means we are an 
authorized to make that and it will give you the  
111:24 - message right here. The current password is not 
correct. All right, that's good. That is good from  
111:29 - a web application perspective, which means that 
this web application is performing validation.  
111:34 - And it's not going to allow us to know to just go 
in and start manipulating any requests and making  
111:39 - changes. So from a security perspective, the web 
application is doing really, really well. Alright,  
111:45 - what if I was to change the new password? Let 
me change this back to password to the current  
111:52 - password, which is what we said and change the 
new password to password pass 123. All right,  
111:59 - and I hit go. Again, we get another error. Again, 
the 401 unauthorized error telling us that the new  
112:07 - and repeated password do not match. So yes, the 
current password is correct. And the only thing  
112:13 - that we're getting an error is the new password 
and the repeated password are not correct. So  
112:17 - interesting. What if we want to change the 
password into password 123. And we can repeat that  
112:24 - again. So we want to confirm this. So password 
123 actually hold on. So I'm going to say password  
112:33 - 123. And now let's see what this tells us. This 
should verify it. But let's see if this works.  
112:42 - So you can see yes, that does work. And we know 
that this works, because that's what we did that  
112:47 - was the original request. But what if we do not 
know the current password of the user? Remember,  
112:53 - we're going to be targeting other users of this 
web application. So what if we get rid of and this  
112:59 - is very, very, this is the way penetration testers 
go about it. What if we get rid of stuff? So what  
113:05 - if we get rid of the current password? Alright, 
and now essentially, they get his targeting Change  
113:11 - Password with the question mark here, essentially 
requesting and we're only entering the fields or  
113:17 - parameters new. And repeat what if we do that 
and we change them to password 123 I mean,  
113:22 - pass 123 and pass 123. Let go. You can see yes, 
it does work, we get the 200, the 200 response,  
113:30 - which means everything was processed correctly. 
And we were able to get a password that looks  
113:35 - to be hash, that looks to be hashed. And we got 
the email that we used. So yes, we do know that  
113:41 - it is working. Alright, so we know that we know 
that this worked. But we need to confirm that  
113:50 - this has worked. So we can do this by going back 
into our web application. And we can log out and  
113:55 - we can try and log in again. So log in with our 
new password. So we're gonna say test@test.com,  
114:01 - and our new password was passed 123. Remember, we 
changed it earlier. But again, I was demonstrating  
114:07 - that we if we are to send this to our target, we 
need to specify to make sure that it will work  
114:12 - without any pre required information like their 
current password. So I've manipulated the request  
114:18 - there. So let's hit log in. And voila, you can see 
it does work. Excellent. All right. So this is a  
114:25 - fantastic example of so also CSRF can be utilized 
or how it can be how you can find vulnerabilities  
114:32 - for it. Alright, so this can allow us to change 
or update anyone's password. anyone's accounts  
114:39 - password that are currently logged into this web 
application. Alright, so now what we what we need  
114:45 - to do well, we can we can log in. As we've already 
seen, we can log in and once you've logged in,  
114:51 - we can we can test to see if cross site scripting 
does work. And then of course utilizing it  
114:58 - throughout the web application is very important. 
So We can run a simple cross site script attack to  
115:03 - see if it will work on the search bar right here. 
So I'm going to type in script. And a simple one.  
115:08 - So alert, just to test whether it works. And 
in the alert, we can say, Hello, just something  
115:16 - stupid hello world, you know, that's an I can't 
even type man Come on world. And we've typed in  
115:24 - the alert. And we can finally close the script 
here. Script like so. And let's hit search.  
115:29 - And voila, we can see that indeed, cross site 
scripting work works, which means we can insert,  
115:34 - we can insert our GET request inside a script and 
use a cross site scripting to perform the CSRF.  
115:42 - And now you can see them conjoining together, 
cross site scripting with request forgery. Okay,  
115:48 - so we now need to create our custom script 
that will allow us to utilize the attack.  
115:52 - And we will be using XML and HTTP. Now, you 
might have seen this script right over here,  
115:57 - let me just minimize this and open up leafpad, you 
might have seen this script that I created. Now  
116:02 - you can find many of these CSRS scripts are online 
that utilize different languages. In my case,  
116:09 - I find the one that works the best is the 
is the one that works with x XML and HTTP  
116:15 - and contains the get request in here. Okay, now, 
you can see that the get request requires the URL  
116:22 - in which we submit the the parameters without the 
current password. So we need to go back into burp.  
116:28 - And it needs to go back into proxy HTTP. Sorry 
about that HTTP, we look to change the password.  
116:38 - So if we go back into, sorry, the repeater. And 
if we look at this now, we can see that the URL  
116:45 - is right over here. So that's the get request. So 
if we copy this localhost, obviously, and we are  
116:52 - not using any current password field, so if we 
can do that, really, really simply, you can see  
116:57 - how this can be utilized really, really well. So 
what we need to do now is understand how the URL  
117:03 - will be format. And of course, the web application 
is going to encode it, and I'll get to that in a  
117:08 - second. So we need to copy this URL right here. 
So I'm just going to copy the URL. And we can  
117:13 - edit our our script. So HTTPS, and we paste it in 
inside the URL, you can copy this script if you  
117:19 - want to. Let's take a look at whether this script 
is formatted correctly. So get HTTP new, that's  
117:26 - not the way we want it. Let me get rid of the 
pre pre determined HTTP there. So HTTP localhost,  
117:33 - it's hosted on my localhost with the Port 3000 
node, an OJS standard. And the we want to change  
117:40 - the password, the new password is past 123 and 
repeat his past 123, you can change that to  
117:45 - whatever you want, if you want to, you know, play 
around with the script. But in my case, I don't  
117:52 - want to do any of that. So this is the script. So 
what we can do is we can copy this now. And we can  
117:58 - run this in the search bar. And that should, in 
theory, and in practice, give us our first CSRF  
118:06 - attack on the site. So I'm going to paste this in 
here. And let's see whether it does this. So I'm  
118:11 - gonna hit search. And you can see you successfully 
solved the challenge error handling provoked an  
118:17 - error that is not very gracefully handle. Again, 
this is a fantastic web application vulnerable web  
118:23 - application that is awesome for practicing your 
your web application penetration testing skills.  
118:28 - Now, I talked about the URL that you should send 
to your target. And that is the URL that will  
118:34 - essentially make them change their password or 
without them knowing, given that they are logged  
118:40 - in to the web application or they have an account, 
it will not work if they have not logged in.  
118:46 - Alright, so that's very important to understand. 
And many people just you know, forget about this.  
118:50 - Now. Again, if you could have done this, you I 
can log out again, and I can log in try and log  
118:59 - in now. And I can type in for example test I just 
want to show you something very interesting here  
119:05 - test. And I can change the password, we already 
changed it to password 123. Now before I do that,  
119:10 - I can just inspect the element here. And I'm 
going to hit login. And I just wanted you to  
119:14 - check something out. All right now, let me just 
expand this a little bit here. If we were to  
119:21 - look at the network, this will essentially shows 
all the GET requests. So if I was to hit login,  
119:25 - you can see that if we are to look at the 
get request here the login GET request,  
119:31 - you can go ahead and look at at the exact format 
in which it was sent. You can look at the cookie  
119:38 - the it should give you the the authentication 
token not to show it should give you the authentic  
119:44 - the authentication token. But that's something for 
another day. Don't want to complicate you guys,  
119:49 - you can look at the cookie if you want to. And 
you have all the responses right here. So there we  
119:53 - are. There's the authentication token and you can 
see something very interesting in regards to the  
119:59 - token. Alright, so let me show you this right now. 
Alright, so as I was saying, you can see. Alright,  
120:11 - so as I was saying, you can see that if we look 
at the parameters, the password will be displayed  
120:16 - there, and it will be updated to the one that 
we selected or specified in the script. Alright,  
120:21 - so remember, if you want to customize the cross 
site scripting attack, you can do it through your  
120:26 - script. And where is lifted here. So there we are. 
So you can change the password. The as you see,  
120:31 - we just got rid of the current password parameter, 
which is a vulnerability on the site, but you can  
120:36 - change the password to whatever you want. And 
now you might be asking, as I've mentioned, what  
120:41 - link do you send to the target and that is very, 
very simple. If I was to run the script again,  
120:46 - and I change the password to maybe something else 
like password 124, or 345, sorry, 345. Let me just  
120:55 - add that to the password. And I run the script on 
an authenticated user, which is me. So let me copy  
121:02 - that. And it should change my account password. 
And you can see once I log in, log out and try  
121:07 - logging in, it will have changed it successfully. 
So let me just run it in here. So I'm going to  
121:11 - paste the new one in here. And I'm going to search 
and there we are. So now it's changed my password.  
121:16 - And if I log out, and I try and log in with with 
the old password, which is password 123, you can  
121:25 - see whoops, sorry, I think I typed that in wrongly 
123 like so, fight login, there we are, you can  
121:31 - see that we entered the new password, and it did 
work fantastic. So we were successfully able to  
121:36 - execute the script. And again, when if I just run 
the script, again, this is the URL that you will  
121:42 - send to your target. Alright, so if I just copy 
it, and I inspect it in my leafpad here, I really  
121:48 - love leafpad. I don't know that you guys love it, 
too. If I just inspect it, you can see that this  
121:53 - indeed is a URL. And if the web application was 
being hosted on a server, outside my local area  
121:59 - network, it would give you the website name, the 
port, if it is port specific, and the URL here,  
122:04 - which as you can see is encoded. So what I 
would recommend is that you copy this link here,  
122:10 - and you use a link shortener like bit fly or any 
of the other Google shorteners, and you send that  
122:15 - to your target. And once they click on the link, 
and if they already logged in to this specific  
122:20 - web application, it will update their password. 
And you can essentially, you have the password  
122:26 - now because you've updated it. And you're all you 
need is the email, which I'm pretty sure you must  
122:30 - be knowing if you're performing this attack. Or 
you could just be gathering passwords of users,  
122:35 - all of which you can, you can send this link to 
and are authenticated with the web application.  
122:46 - We're going to be taking a look at session 
management. And in this video, particularly,  
122:50 - we'll be looking at cookie collection. Alright, so 
as you know, you probably would have known what a  
122:57 - cookie is. Now there are three types of cookies 
that we really need to be focusing on in this  
123:03 - section. And we will be focusing on in general. 
The first one is the session cookies, which I'll  
123:10 - discuss in a while we then have the permanent 
cookies and the third party cookies. So third  
123:15 - party cookies are really all to do with third 
party API's that may be used. So for example,  
123:22 - if you're on a website that utilizes flashplayer, 
you may find some cookies, that that are in relate  
123:30 - that are related to the Flash Player. So it's very 
important that you understand how to collect these  
123:36 - cookies. And as well, we'll be looking at reverse 
engineering them, but not really tampering with  
123:41 - them. Because I first want to explain to you guys 
how everything is done. And then we can move on  
123:46 - into into finally tampering with them and seeing 
if we can change them to give us access to give us  
123:52 - different type of of access. And where this comes 
into play is when you're talking about session  
123:57 - cookies. And in this session cookies, we have the 
the auth, the authentication token, and the D and  
124:04 - the unauthenticated token. So all to do with your 
access on a web application or on a website. Okay,  
124:10 - so essentially, all the cookies that you can 
probably ever get when you visit or you get  
124:18 - when you visit a website are they are generated 
when you visit the website. And furthermore,  
124:23 - the cookies change when you authenticate with 
the website and you or you log out right so when  
124:28 - you log in, you get a different set of cookies. 
And when you log out, you get a different set of  
124:33 - cookies. This is where the whole idea of session 
management comes into play and how cookies are  
124:38 - utilized for this system. So I'm currently running 
OSU shop. So I showed you guys how to set that up.  
124:44 - Let me know if you found it helpful. So I have 
it set up and open as it opened up in my browser.  
124:50 - Now what I'm going to be covering is how to 
collect these cookies and understanding the  
124:55 - difference between an unauthenticated cookie 
and the authenticated cookie. So Usually,  
125:01 - what I have, or what I use to my advantage 
is if you're using Google Chrome or Firefox,  
125:05 - you you can get a cookie collection or a cookie 
editor add on that allows you to edit the cookies.  
125:12 - But as I said, we're not going to be looking at 
editing them right now, because we don't know  
125:16 - what to change in them, this video is going to 
be focused on collecting them and then analyzing  
125:21 - them to see what information they have within 
them. All right, so I've currently I reset this,  
125:27 - the OWASP juice shop. And the reason I did that 
is just to start off fresh. And I said, we're  
125:33 - going to be using this for performing all of the 
examples that we'll be showing you so that we can  
125:38 - learn all the concepts. So I'm just gonna, before 
we log in, I just want to show you the first set  
125:43 - of cookies that we'll get once we were when we 
visited the site. Don't worry about the other  
125:48 - links, we'll get to them in a second. Alright, so 
I'm using the cookie editor right here, you can  
125:54 - find this same one for Firefox, that's what I'm 
using. They are also other ones for Google Chrome,  
126:00 - if you want to do that. And in addition, we're 
not going to be using any proxy, like burp suite  
126:06 - or the OWASP zap right now, because we're just 
focused on using the browser tools. And of course,  
126:12 - these add ons here. So what I can do now is if I 
just go right click, and I hit Inspect Element, we  
126:18 - have the, the developer tools right here. And if 
we are to go into Once you've installed the cookie  
126:25 - editor, you can directly go into storage. And in 
storage, you will, you will begin you will get the  
126:30 - cookies here and other values right here. But if 
you it'll be better for you to understand what's  
126:35 - going on if you go into the cookie editor. Now 
in the cookie editor, you can see that we have  
126:40 - two cookies that we've gathered here, and we have 
the cookie consent status. And the the i o which  
126:46 - I'm not sure really what it does input output, 
output, I'm probably guessing. So when it comes  
126:52 - down to the QB, consent status, we probably get an 
idea of what of what this is. What this is asking  
127:00 - us. So when I when I opened up the website, it 
gave me a prompt asking me like all websites will  
127:05 - ask you in 2018 to do is to accept their privacy 
policy, in their privacy policies in regards to  
127:12 - their use of personal data and cookies. And the 
reason is, is because cookies can can log or have  
127:19 - a lot of information about you. They contain a 
lot of information about what your what you've  
127:23 - been doing. So this is why I've created this right 
now before we move along, it's very important to  
127:28 - understand their role in session management. Okay, 
so we need to look at the authentic authentication  
127:36 - tokens because that's where most of the magic 
happens, as you would expect. So let me just close  
127:41 - this up. And let me just log in. So let me just 
use the password there, the email that I used,  
127:46 - and the password, like so. And let me just log in. 
I don't want to save the password. So I've logged  
127:53 - in now. And if I inspect the element, again, 
you can see in the cookie editor, let that load,  
127:58 - it usually takes a while to load. There we are, 
we have the token. Now the token, this token is  
128:03 - an authentication token. Alright, so when it comes 
down, when it comes down to reverse engineering a  
128:09 - token, for example, let's use this as our example. 
We essentially testing it for vulnerabilities  
128:14 - similar to a penetration test. Now you might be 
a little bit confused. You might be asking, Well,  
128:18 - what what what do you mean by this? How can we 
perform a penetration test on this token? Well,  
128:24 - this token is encoded. Alright. So this is if 
we just copy this. I don't know whether you know  
128:31 - about this, but this is a JSON web token. Alright. 
So it is it is a JSON web token. And you can use  
128:37 - the JSON Web Token decoder, I'll be posting this 
link in the description. This is the one that  
128:42 - I prefer to use. If I am to paste this in here. 
And you can see once I've pasted it in here, it's  
128:50 - going to give me all information. And I'm going 
to help you understand what we've just done. So  
128:54 - essentially, what we have done is we have reverse 
engineered what this web token is all about. So  
128:59 - now we need to look at what what it contains and 
what type of authorities or privileges it's giving  
129:05 - to us. Because remember, this is an authentication 
token. And it is unique to us because this will,  
129:11 - this will determine whether or not we're logged 
into a site or we're logged out and what access  
129:15 - we have on the website. I'm pretty sure you 
already know that. All right. So when it comes to  
129:20 - the header, now, this is very important. I've seen 
many web people claiming to be bug bounty hunters  
129:25 - and they don't understand how the the web token is 
even structured. What is the header the header is  
129:31 - separated from the payload. This is the header 
right here, up until the first full stop that  
129:36 - is the header it's very important to understand 
that because they are separated from each other.  
129:41 - In fact, the JSON web token is sorted into three 
parts right here you have the you have the header,  
129:45 - you then have the payload until here. And then 
finally you have the signature which is right,  
129:51 - right at the bottom here which is also separated 
from the rest. Okay, so when it comes down to the  
129:57 - header, alright, the header is going to give 
you the of the of the token. In this case,  
130:02 - we know it's a JSON web token, we then have the 
algorithm, which is the hashing algorithm used,  
130:07 - which is the RS 256. And then the payload 
now in the payload, this is where things get  
130:14 - really interesting as you would have expected, you 
have the status, the status code here, the data,  
130:19 - if any data was passed the ID, we can always use 
the ID. Two, we can always edit the ID to see what  
130:28 - else it can give us in terms of authentication, 
because different types of identification or  
130:33 - identification tokens give us different types 
of access. So, as essentially this is what I was  
130:37 - talking about, this is where you will scrutinize 
the the the authentication token, and try and and  
130:43 - tamper with it to to see what different results 
you can you can get. So remember, we can edit this  
130:49 - token, right, and we can edit anything about it. 
And then we can finally copy it. And we can use  
130:54 - that in the OSB shop and paste it right here and 
re authenticate with that new token and see what  
131:01 - results we can get. Now, of course, we're not 
going to do that right now, because I wanted to  
131:05 - introduce you as to what information you're going 
to find and what exactly is going on here. Okay,  
131:10 - so one step at a time. So you can see that 
something interesting pops up here, something  
131:17 - extremely interesting, we have the email which 
for some reason, in this token, we can see that  
131:23 - it's not very well designed because the email is 
in plain text, which means which means if In any  
131:31 - case, or in any scenario, someone is able to get 
this token in which I authenticated within a site,  
131:38 - they will have access to my email and my password. 
But you must be saying, Well, I didn't see you  
131:44 - type out all of these random passwords here. Well, 
I can easily guess that this is an MD five hashed  
131:50 - password, which means I can depending on the 
on the strength of the password, I can decrypt  
131:55 - online in a second using any of the decryption 
tools. So if I was to just copy this right now,  
132:00 - and I wanted to know the password, let's say this 
wasn't even mine, this authentication token wasn't  
132:05 - even mine, and I found the the email and password, 
all I needed to do was unmatched the password,  
132:10 - I can go to Mt five online.org, which is what I 
use a lot. And I paste that hash right in here.  
132:16 - And I hit decrypt. And you can see, well, first 
of all, it's gonna prompt me to enter capture  
132:20 - your storefront. This is this is getting really 
annoying. Now, for some reason, it always does  
132:26 - that, as you can see, it's gonna, it's gonna find 
the action. Of course, this is this is dependent  
132:31 - on the difficulty of the hash and whether or not 
it can find it online. Okay, so you can see that  
132:36 - it will display the hash and the password in plain 
text, which in this case was passed 123. Now,  
132:42 - of course, you can experiment with this. 
And you can also experiment if, for example,  
132:46 - the authentication token that you found was using 
a different encryption, or a hashing algorithm for  
132:53 - the password, the first thing you need to do is 
identify what it's using, and then you go about  
132:57 - decrypting it. Now, I'm not going to be talking 
about the other parts here, because that's a bit  
133:02 - that's a bit advanced. As you can see, by default, 
the signature, the token signature failed,  
133:09 - which means we can tamper with this token, and we 
can make changes to it. And we can authenticate  
133:14 - with it because it said, The OWASP juice shop is 
is designed to be vulnerable. And this is where  
133:19 - you perform all of these tests. Okay, so when 
it comes down to the payload, the most important  
133:25 - things are to look for the status, the ID and 
obviously, if you can get any other information  
133:29 - in the data section, or in terms of the email and 
the password, that's also very important. Now,  
133:34 - of course, it's not very easy to get a hold of 
someone's of someone's token, but you can do  
133:41 - it but and then you are performing the penetration 
test on the token, because if someone was to write  
133:47 - in the comment section of this video, what it was 
to grab the the authentication token that belongs  
133:52 - to Facebook lets you have access to someone's 
computer for a few seconds. And as to get the  
133:58 - authentication token, what would I be able to do? 
Well, first of all, you have to test the security  
134:03 - of the token. And I can guarantee you that their 
tokens are going to be very well secured and  
134:07 - performing the penetration or the penetration test 
on them will be a different ballgame. So we'll be  
134:12 - looking at changing them or or tempering them to 
give us different types of access. We're going to  
134:21 - be talking about HTTP attribute attributes and 
cookie security. I am currently running OSU shop  
134:28 - and what I did is I started a fresh new instance. 
So I unzipped a new OSU shop. That's because I  
134:34 - wanted to start afresh Now, of course, in the 
previous video, we looked at cookie analysis  
134:38 - and tokens. But now we're going to look at how 
at the security aspect of how these cookies are  
134:44 - secured and how you know how cookies are stolen 
and how these can be exploited with with with  
134:51 - other exploits or functionality like cross site 
scripting. Now you will get to what I'm saying  
134:57 - in a few seconds. So I have was used Stop running. 
And I've created the same user and password as I  
135:04 - did last time. So it's a test@test.com, that being 
the email and the password is password 123. Just  
135:11 - so you know. And I'll do that right now I'm just 
going to log in, as you can see, test@test.com  
135:15 - and the password is password 123. So let me just 
log in. And there you are. So I've logged in and  
135:21 - haven't solved any challenges. So when we talk 
about cookie security, what do I mean? Well,  
135:27 - this can be done or can be inspected really 
easily. Now, of course, for this, you're not going  
135:32 - to need any of the browser extensions or add ons, 
because we'll just simply just be inspecting the  
135:37 - element here. So if we open inspect element and go 
into storage, and we go into cookies, and select  
135:43 - the site, which is on localhost, you can see that 
if I was to click on, for example, the token,  
135:49 - and we just look at the data, you know, that we 
can see within the token, if we go to the HTTP  
135:58 - only section here, you can see that that is set to 
false. Now, what does that mean? Well, that means  
136:04 - that we can potentially exploit this cookie and it 
storage location in the sense that it is it is, it  
136:12 - is not secured. Now, I'll get to why and how this 
is happening in the in a few seconds. Alright,  
136:17 - so if the value is set to false, it means that the 
cookie can be accessed and written to now how can  
136:24 - one use this, you know, for potential attacks, 
or Cookie, cookie stealing, as we know it. Now,  
136:30 - if you are an advanced web application penetration 
test, and you know about cross site scripting, you  
136:36 - know, that usually attackers will use cross site 
scripting, to steal cookies, by sending you links,  
136:42 - that then, you know, by sending you links to pages 
on the site, that you're already authenticated to,  
136:49 - that have the the the malicious JavaScript 
code that will then send your cookie,  
136:55 - your authentication cookie with your token, 
etc, etc, to their attack server. And from that,  
137:01 - they can then use that to authenticate into your 
account, it's not common, because mostly, the,  
137:06 - the cookies are usually secured. Now, you will 
run into sites that have this and this is a very,  
137:12 - very big vulnerability in terms of severity. So if 
you're a bug bounty hunter, this is in the medium  
137:17 - to low category, so not really a big exploit, but 
still a very, very big problem that many, many,  
137:24 - you know, usually, I would like to say rookie 
developers Miss, especially when dealing with  
137:29 - huge frameworks like node etc. I'm not going to 
get too deep into that. So you can see that the  
137:34 - HTTP only is set to false. Now, what does this 
mean? This means that we can use utilize a lot of  
137:40 - functionality to exploit or to display the broken 
or even more to send this my cookie or you know,  
137:48 - my token, whatever you want to call it to a server 
or to save it, alright, to grab it to steal it,  
137:53 - you know, simply put, so how can we exploit 
this? Well, we can use cross site scripting,  
137:59 - and this is probably the most used method 
for this. And to do this, we can simply,  
138:05 - we can use any of the, we can use the search, or 
we can use the contact. But I like using search  
138:12 - because usually it is unfiltered. Now, when I 
say this, I'm you know, many of you will say,  
138:17 - Well, most of the big sites, well, I'm not talking 
about the big sites, the big sites, obviously have  
138:21 - to take this into consideration. I'm talking 
about sites that are developed by small teams,  
138:25 - they usually don't take this into consideration. 
So if I was to just type in a simple cross site  
138:32 - scripting script that will essentially display 
my cookie right now as I'm authenticated. So to  
138:38 - do that, I'll just type in script. And for 
this, we're using an alert here to display  
138:43 - to us so alert, and we're gonna say document, 
whoops, stop, sorry, document, dot cookie. And,  
138:49 - and then we're gonna just close the script like 
so. So this will display our cookie to us. Not  
138:55 - really helpful. But you can imagine if we were 
to have this permanently posted, for example, as  
139:01 - a post here, and then whenever we send that link 
to someone, and they click on it, we can customize  
139:06 - this JavaScript code to send their cookie to 
our web server. And once we get their cookie,  
139:11 - you basically know what's gonna happen there. So 
if I hit Enter to search, you can see that it's  
139:16 - going to display our cookie and our token, and 
this is extremely dangerous. You might not get  
139:22 - the context, but I'll explain it in a second. So 
essentially, this information can be passed and  
139:27 - sent anywhere across the world, provided that the 
that your target clicks, clicks on a link in which  
139:33 - this, this script is executed. Now, the question 
that you might be asking yourself as well, where  
139:39 - else can we post this in in sort of a malicious 
way and I know that I sound malicious right now,  
139:45 - but I'll also get into how to mitigate this. And 
again, mitigating It is really simple. Just set  
139:51 - your HTTP status or your HTTP attribute to true or 
set it to on essentially securing your cookie now  
139:59 - You can see that once we have this, you saw in 
the previous video, what we could do with such  
140:04 - information, and what info it contains in regards 
to the user. And how we can, we can, you know,  
140:11 - crack the password. But for now let's focus on how 
this can be utilized to steal the cookie or how  
140:16 - attackers do it. So you can also get insight if 
you're a white hat. So usually I can post this in  
140:23 - here, I can put, you know, I can type the script 
in here. But this is not, it's probably not the  
140:29 - best way of doing it. Because you essentially 
have to convince the user to go into the search  
140:34 - bar and type this in. Not really the best of ways 
about going about going about this. So usually,  
140:40 - we look for a page that allows us to, you know, to 
post our own stuff, or to save this to a database  
140:47 - or to save it to the website itself. So we let's 
try contact us. Alright, so contact us. Yeah,  
140:54 - that looks like a good place to start. So in the 
comment you it already added our author for so in  
140:59 - the comment, we can enter, we can end our script 
in Yeah, and this will probably probably be saved.  
141:05 - But we have to test it. Now. Of course, the cookie 
stealing JavaScript code is not something that I'm  
141:11 - going to be telling you how to do, you can 
probably perform a lot of Google searches,  
141:15 - it's part of the terms that I have to follow. 
In regards to YouTube's YouTube's policies  
141:21 - about malicious content, and when what not, 
so I'm not going to show you the exact code,  
141:27 - but I'll probably have it on my website, if you 
want to take a look at it and experiment as to how  
141:32 - to send cookies to a another server or server that 
belongs to you, for example. So to do this, so now  
141:41 - essentially, what I want to do is I want to save 
this script, into the contacts section, because  
141:45 - I believe this is saved. If I looked, I looked at 
the structure. And indeed, this is saved. So the  
141:52 - script is quite simple. So we can say, we can 
give it a title because I know the feedback is  
141:57 - left like that. So we can say script test. And we 
can close the script here. So scripts, but then we  
142:07 - have to include the the actual JavaScript code. So 
yeah, so let's include this script within the main  
142:13 - one. So script. And then once we close this one, 
we can then use the other script. So your script,  
142:19 - whoops script in, you can copy this code if 
you want. By the way, let me just zoom in,  
142:23 - because a lot of you had actually talked to me 
about that, that you couldn't actually see the  
142:27 - code. So script. And now we want to bring up 
the alert. Now, of course, as I said, this is  
142:33 - not really useful, because all you're doing is 
displaying the cookie to the user themselves,  
142:37 - once they visit this page, so you probably 
get the idea. So script, alert, and we are  
142:48 - just simply just going to write the document, of 
course, it's all sending it to a malicious server,  
142:52 - what I would have done is I would have used the 
document dot cookie, and I would have appended it  
142:58 - to be sent in in the form of probably a PHP file 
or a PHP GET request to my server, and then my  
143:06 - server would log all of the information being sent 
back. So that's the concept there behind so we can  
143:12 - then close the script here. And sorry, we have to 
actually close the script. Oops, sorry, my bad.  
143:19 - And then we close the script there. And finally, 
we can close the final script ending here. So  
143:26 - script and there we are. And we can leave a 
rating if we want to. And there is a CAPTCHA here  
143:33 - authentication 10 plus five. You You basically, 
this is also an exploit here that you can enter.  
143:39 - Because if you look at this very basically, from 
a simple perspective, the capture here is again,  
143:46 - is another false positive. And again, I know I'm 
dragging this, I'm dragging it a lot. But But what  
143:53 - I'm trying to explain here is, if you are going 
to, you're going to be performing a penetration  
143:58 - test on a web site, you need to understand that, 
from the perspective of false positives, you  
144:05 - should not go after the big exploitations or the 
big exploits first. Alright, so if I submit this,  
144:11 - as I know the structure of the OSU shop, this will 
be submitted to one of the pages in which after  
144:17 - I click, or any other user who is authenticated 
clicks, will will run that script, or this script  
144:24 - and will the cookie will be displayed on the 
screen. And if you want to manipulate or use  
144:29 - your own script to send the cookie to your server, 
by all means go and do that. I'm not condoning it.  
144:35 - So that is 75. And I hit submit. And what nots 
wrong capture 10 plus five, actually, 25. Yes,  
144:45 - brackets of division multiplication addition, you 
guys must be thinking I suck at math. So that is  
144:50 - 25 plus five, plus 10. Sorry, that's 3535. And I 
submit that whoops, we have to actually type our  
144:58 - code back in Sorry about that, guys. So we can 
just type in script, and we're simply testing  
145:03 - test. And then after this, we can close the first 
one. And script here. Whoops, sorry about that my  
145:11 - keyboard is quite a distance from me. Alert. And 
my spelling mistakes are really annoying script.  
145:20 - And finally, we can use the document. My God, man 
my typing document dot alert dot cookie, sorry,  
145:30 - we are we have already sent the alert, we will 
use the doc document, that alert would essentially  
145:35 - display the entire webpage, document dot cookie. 
And in here, we close the first script. And sorry,  
145:43 - the the initial script. And then we close the 
last one year. So script. And we close that right  
145:50 - there. And finally, we can give this a rating and 
resubmit. And that should submit it. I don't know  
145:56 - what the issue is here. And then there we are. 
Also some Alright, so there we are. Thank you for  
146:00 - your feedback. So you did submitted there. Let me 
zoom back out. Now, you can see that, where would  
146:07 - you go to launch the script? That's, that that 
will be the question that you might be asking.  
146:13 - So on this in this structure, you can pretty much 
experiment with all the other pages. And again,  
146:18 - I do recommend that you use you know directory 
discovery tools, like there Buster go buster,  
146:23 - whatever is comfortable for you. So with this 
in mind, if I was to just click on About Us,  
146:29 - you can see that that is where the the the 
feedback in regards to contact is stored.  
146:36 - So there you are, there's the cookie. And if 
I was to if I was to have implemented a script  
146:41 - that would send the cookie to my server, once 
I access to this page as an authenticated user,  
146:48 - it would send my my session ID all of that good 
stuff to my web server, I now be able to crack the  
146:55 - password and authenticate with your account. As 
simple as that without ever knowing your password  
147:01 - without ever trying to have guessed it without 
without ever trying to have exploited your system.  
147:05 - I exploited the web application. And because 
of the the ability of the developer of the web  
147:12 - application to secure the cookies, I was able to 
get into your account and god knows what else you  
147:18 - can do in that person's account. And this is you 
know, this is tribute to my all my Facebook hacker  
147:24 - friends out there who think hacking Facebook is 
about cracking and brute forcing. There you go,  
147:30 - you know, web applications can can be cracked 
in or can be exploited in different ways. Now,  
147:36 - of course, as I said, it's going to get really 
exciting as we move along with Duchamp. And  
147:40 - that's the reason I'm using it because it explains 
how this can be done on a real website. And yeah,  
147:51 - we're going to be looking at OWASP juice shop. And 
it seems to replicate what a real web application  
147:56 - would be a fairly poorly designed one. But the 
thing I like about it is, it has varying levels,  
148:03 - levels of difficulty. And that's really, 
really awesome. I have it set up on Heroku,  
148:08 - as you can probably see right over here. And that 
works perfectly fine for me because I you know,  
148:13 - I wanted to set it up really quickly, I want to 
run it on my local server, you know, using node  
148:18 - or Docker. That's really is, I really didn't have 
the time to do that. But if you want to you can,  
148:24 - you can use Heroku. And it should be free for 
you. So yeah, definitely go ahead and give it  
148:29 - a try. And you should have a an instance set up 
for yourself. So you can go ahead and do it. And  
148:34 - it's giving us a prompt here telling us that 
this website uses fruit cookies to ensure you  
148:39 - get the juiciest tracking experience. Now, from my 
experience, I would hit accept the cookies because  
148:45 - essentially, that's what keeps track of your 
progress. And yeah, that's pretty, that should  
148:52 - be quite good. Now as for my browser, I'm using 
the latest version of Firefox and I have you know,  
148:58 - plugins or add ons like cookie editor. And that's 
pretty much what we'll be needing In this video,  
149:03 - I hope and we don't have the the proxies here like 
sorry, Foxy proxy to allow us to use things like  
149:10 - burp suite or zap whatever you want to use. OK, 
so let's get started. Now the first challenge,  
149:17 - as I believe is to get the the scoreboard and 
we should start from there. And to do this,  
149:23 - I think I have done this already. That's really 
very simple. All we need to do is well first of  
149:29 - all before we actually do that, the interface is 
quite simple. It is a juice shop as you probably  
149:34 - can see and could have understood and they 
sold juice. Now the great thing that I like  
149:39 - about OSU shop is that this replicates a real 
life a web application with you know, security,  
149:45 - misconfigurations, etc, etc. So if I log in, 
you have your login page right over there, man,  
149:51 - you can create a new account if you want to, you 
can search where the Contact Us page allows us to,  
149:56 - you know, essentially contact whoever is behind 
the site. Then we have an About Us page. And  
150:01 - the thing I like about this is, as I said, 
it replicates what I would call a real web  
150:07 - application. Now when you talk about, about the 
scoreboard, I think that can be accessed really  
150:13 - quickly by going into scoreboard like so. So, you 
know, we can just hit scoreboard. And if I enter,  
150:19 - that should give us the scoreboard. Alright, 
so it gives us the notification once you've  
150:24 - completed the challenge, and the reason it does 
this is to notify you of your progress. Remember,  
150:28 - this can be considered a capture the flag type 
of challenge, but I wouldn't call it this I think  
150:34 - this is fantastic for essentially explaining the 
concept here. Alright, so let me explain how the  
150:38 - scoreboard is essentially works. Alright, so 
a scoreboard is as follows. Sorry about that,  
150:44 - if you had my phone, it always seems to do 
that. So we have, we have the challenges  
150:49 - sorted in terms of difficulty. So we have a 
one star, two star, three star, four star,  
150:53 - five star and six star. And they all have 
various challenges within them. So for example,  
150:58 - the the difficulty sought in terms of star so you 
get the idea, one star is quite easy, two stars,  
151:05 - you know, not so easy, we have three stars, 
things are getting a bit sweaty here, four stars,  
151:10 - now we're talking five stars, I'm banging my head 
on the wall, and six stars, that's going to take  
151:16 - you probably a few, a few days, or, you know, 
hours depending on your determination. Alright,  
151:22 - so you can see it also gives you the gives you 
the challenge names here. So if I click on the  
151:26 - two star challenges, you can go ahead and look at 
the challenges there. And we brought I think in  
151:31 - the previous videos, we covered a lot of the two 
star and three some of the four star challenges  
151:35 - that we wanted to go through. So the three star 
challenges are where things get really awesome,  
151:40 - because it does start logging in with other 
users. And there's a bit of cross site scripting,  
151:46 - I'm not going to go through all of that, 
let's start off with what we can do. Alright,  
151:51 - so the first challenge in the first is access the 
administration section of the store, or right,  
151:59 - so I'm guessing we have to try and log in, I 
think I've done this, this is the first challenge,  
152:03 - we have to access a confidential document provoked 
an error. That is not gracefully, very gracefully  
152:12 - handled, not to show that is let us redirect you. 
I'll try and cover as many as I can. In one video,  
152:18 - we have cross site scripting attack. This was 
simple. I think we covered this. So yeah, we can  
152:23 - pretty much run that in one of these right over 
here. So script, and alert, as it already gives  
152:29 - you hints these are very, very easy. So I can 
just say test. Have I given the OP Sorry, my bad.  
152:35 - So yeah, there we are test. And we close that up. 
And we also close the script right over here. And  
152:42 - we hit Enter. And there we are. So that is one of 
the challenges solved, hopefully did pop up there.  
152:49 - So if we go back to the scoreboard, it still 
tells us for some reason, the web application is  
152:55 - too low, it's not told us that we have performed a 
reflected cross site scripting, all those I don't  
153:00 - know, right, so reflected. Anyway, we'll get to 
that when we get to it. So if we inspect the login  
153:06 - page, what we can do is we can create a user. So 
I'm going to create a user here. And I'll just use  
153:11 - a simple user here called test@test.com. And the 
password or call that password. And I'm going to  
153:18 - repeat the password here. And I'll just call the 
password password. And I'm just going to use name  
153:27 - of your favorite pet. And I'm just going to say 
dog right over here. I'm going to hit register.  
153:32 - And we're going to save that. Alright, so I can 
log in now. Did I log in with the correct test?  
153:38 - Yeah, there we are. And we're going to log in, 
and we are logged in. Alright, so let me just  
153:43 - zoom out. So the interface does not really crashed 
on us. Let me just get rid of that. All right,  
153:49 - so it's sorted out really well. We have the 
language selector here your basket, which  
153:54 - essentially allows you to select your to view the 
items in your basket, you then have your coupon  
154:01 - if you want, if you want to use a coupon and you 
have your checkout, which essentially I believe  
154:05 - takes you to the the OWASP juice shop, donate 
page if I'm not wrong. Let's just see if that  
154:11 - is correct. Yeah, yeah. So if you want to support 
the project, I would, you know, you can donate to  
154:18 - them. It's a really great project. I really do 
recommend that if you can you do so. So you can  
154:25 - change your password, which is awesome. I think 
we also took a look at this and how to change  
154:29 - it using using the GET requests. Contact us where 
you can necessarily write in, you can contact the  
154:39 - person via the site or the administrator as I 
would believe. You can comment, recycle recycle  
154:47 - what this requester recycling box so you can type 
in liters here that has a selector. Alright, okay,  
154:57 - that's not too bad. We have a complaints board. 
And the scoreboard itself here, which for some  
155:02 - reason, keeps doesn't really load. So let's try 
and work on the first section. As I mentioned,  
155:07 - I'll try and cover as much as I can here. And 
you have the About Us here that has some sort of  
155:12 - Let's see some sort of checkout or boring terms 
of views. Let me just check the scoreboard what  
155:21 - exactly are we supposed to do? Because access the 
administration section? What's in the two star  
155:28 - here? login with the administrator. All right, so 
we're trying to access the administration section.  
155:32 - So let's try and access that right over here. 
So I'm just gonna type in admin administration,  
155:39 - like so I'm gonna hit Enter. And yeah, that was 
pretty easy. And we get the email right over here,  
155:45 - admin and do shop. That's the admin email. And we 
have all the emails right over here. So we have  
155:54 - you met juice, juice shop, Bender, and some other 
uses. And we have also, yeah, alright, so we got  
156:02 - the registered users customer feedback, and the 
recycling requests that have been posted so far.  
156:09 - Which means you're starting from the basics. 
So I think we can try and log in with admin,  
156:14 - but we don't know the password. So yeah, so I'm 
just going to log out. And let's see if we can log  
156:22 - in with the password here. admin, I do shop, and 
I probably I'm probably guessing we have to use  
156:29 - SQL injection. And in this case, I think I know 
what to do, because I have done this before. But  
156:33 - it has been changed quite a bit since the last 
time because I think in the previous versions,  
156:38 - it was with admin only, there was no domain 
oza username, I'm not too sure. Anyway,  
156:44 - let's try and see if we can throw some 
errors here. So if I log in, alright,  
156:51 - so that means you have to provide a password. So 
let me just try and use the single quotation. And  
156:55 - let's see if that Yeah, it does throw an error. 
And there Yeah, we completed the other challenge,  
156:59 - which you successfully solved the challenge error 
handling provacan errors here. So essentially,  
157:04 - performing error enumeration, if that's something 
you've never heard of, it's essentially where you  
157:09 - just try and see all the CE o 's fuzzing really 
just throwing, you know, information at the  
157:14 - system, seeing how it responds. And we get here 
the query. So we are performing SQL injection,  
157:21 - because as you can see, tells us here we have 
the the query right over here, which is telling  
157:26 - us select and what this is saying is select 
all entries from the user table where emails  
157:34 - are equal to and we specify the single quotation. 
And the password is what is this? This looks like  
157:43 - a hash? What hash is this? Let me just check. I'm 
think it might be MD. Five, I'm not too sure. Let  
157:52 - me just check this hash identifier. And we just 
paste that in there. Sorry about that. Let me  
157:59 - just paste that in there. Yeah, this is an MD 
five hash. So that probably let's just see if  
158:05 - we can decrypt that or decode that. So I'm just 
gonna say MD five decrypter, or something like  
158:11 - that. Let's just see if we can do this online 
really quickly. Come on, come on. I want to see  
158:17 - what error because that's, that's a password. 
Let's decrypt that. And we'll for some reason,  
158:24 - it's taking too much time here. So yeah, yeah, 
it's essentially hashing the password. Alright,  
158:29 - interesting stuff there. We actually now know that 
the password is being hashed, obviously, you know,  
158:36 - with the Mt. Five, hashing algorithm or protocol, 
whatever you wanna call it. So original. And yeah,  
158:43 - that is the query statement there. So we can try 
some basic SQL injection. And some of the basic  
158:50 - ones to log into admin or to essentially log 
into the administration, the admin panel is,  
158:57 - now the thing that's weird is are we going to use 
the password do we're trying to get authentication  
159:02 - so that means let me disclose that. That means 
if we just throw the error one more time,  
159:08 - or get the when you were able to get the query 
here. So we are saying select actually start from  
159:16 - there. Select from users, so select all queries, 
all entries from the user table, from where email  
159:24 - use the table. So there's users Alright, so the 
user, the user table as email and password, okay,  
159:32 - I follow now. So that means we can try we can 
try, we can try and use the or statement here.  
159:41 - And probably we can use the not statement if we 
are going to Yeah, that will make a lot of sense,  
159:47 - but we only using email so we'll keep the 
single quotation. So what that means is,  
159:52 - is if you know about SQL injection, hopefully I 
can explain what's going on here. So we know that  
160:00 - the password is being hashed, we're saying select 
from the table where email and password. So that's  
160:07 - the statement. So select from the table for sort 
of select from the users table where the email  
160:13 - and password is going to be equal to is going to 
be equal to what we have entered. But remember,  
160:21 - the the password has to be has to stay as the 
single quotation. So that means your we are  
160:28 - going to be using the or so this is basic use, 
you guys should be knowing this, but if you want  
160:32 - me to cover it, let me know so or equals or so or 
one equals one. And the other ways of doing this,  
160:39 - I think I'll post a cheat sheet in the description 
section, you can check it out for yourself just  
160:44 - to get up to scratch with what's happening. So 
what we're saying is we're using the or the or  
160:50 - the syntax of or is very simple. It's where we 
have the what's happening here is we're seeing,  
160:56 - we're seeing Okay, so if you know the syntax 
for how a query is made in SQL, it's really  
161:03 - very simple. So we're saying select from, from 
the table, remember, this is specifying a table,  
161:09 - not a column. So it says select from the 
users table from select from the users table,  
161:15 - email password, so comparing and then we say 
all the new specify the condition with a value,  
161:22 - we can enter our into fields. So we can say the 
value of the email can always be changed. And we  
161:29 - obviously know that that is the first account 
that was created. And the password is going to  
161:33 - remain the same. So we hit login. And yeah, we 
get still keep on getting an error here. Now,  
161:40 - that is weird. No, because if I specify there is 
no comment here, or one equals one, yes. So it is  
161:48 - working. So you can see. So select from users, 
where one equals one and password. Yeah, so we  
161:57 - want to nullify and password we don't want and 
there. So for that we use the user comment here.  
162:03 - And there we are. Excellent. So we're able to log 
in to the administrators use account. Alright,  
162:09 - so let me explain what happened there. So as I 
said, the the syntax of the query was as follows  
162:14 - we're selecting from the users table, we're 
selecting the email and password and comparing  
162:20 - them to each other. So they have to match show 
up, you're performing a query, a simple query,  
162:25 - and what we said is, or that's a conditional 
statement. So we're saying or that we specify  
162:31 - the condition where the first value is going to 
be equal to the the, the first one is going to  
162:37 - be equal to one, and we nullify the, the password 
where the password was we're essentially removing  
162:43 - authentication. And we are what because we're 
including the comment syntax for SQL. Alright,  
162:49 - so that was pretty simple. But now, the thing 
that's bothering me is we don't have the  
162:55 - password. So let me just check the scoreboard. 
And let's see what progress we've made so far.  
162:59 - So have access administration section that's 
not in here that is in here. So log in with the  
163:08 - administrators use account. Marino the password. 
So I think that's how we're going to be logging  
163:14 - in. We know the email, because if I just go back 
into administration here, administration, I hope  
163:22 - the video is not getting too long. So we have the 
admin. We have the admin email here. Um, oh, yes,  
163:32 - yes, yes, yes, we have the token. So if we inspect 
the element, and we go into the cookie editor,  
163:39 - for example, we can use that or you can just use 
storage. But I should have done it, you know,  
163:43 - from the cookie editor from the beginning. So we 
have the the token here. And I talked about this  
163:49 - in my other video actually went through this 
with the token. So. So we're gonna say token,  
163:54 - I think the site was it's a JSON tokens, a token, 
decode, and should be the first site here, the  
164:01 - JSON web token. So jw t.io. That's an excellent 
site. And we talked about this. So if you want to  
164:09 - watch that video, I'll post it in the description. 
So you can check it out. And the email is admin.  
164:15 - So that's the authentication token, and that 
gives us all the information we need. All right,  
164:20 - so we have the password here. But again, what is 
this hashed into? That looks like MD five again,  
164:26 - but let me just confirm, and let's see what 
that gives us. So the password is hashed,  
164:30 - as we know with MB five, so let's just confirm 
hash identifier, because there we are. Yeah,  
164:40 - it is MD five. So let's just decrypt that one more 
time. So I'm just gonna paste in that hash there.  
164:46 - I'm just going to decrypt let's give that a few 
seconds. Oh, my God, man, all the traffic lights.  
164:53 - And let's hit verify. And yeah, there we are. The 
password is I mean 123 Yeah, that's that's pretty  
165:02 - basic, but again, replicating common practice 
that you would find. So what was the email? Oh,  
165:07 - boy, what was the email? Let me just log back 
out. Correct. All right. So let me just use the  
165:15 - statements. Oh, yeah. So we're logging in. So all 
one equals one, because we're all the waters the  
165:22 - I think we can access the the middle from the 
administration. Sorry about that, guys. I know,  
165:27 - I'm getting really mixed up. Well, we're 
not logged in yet. So anyway, let me just  
165:32 - log in. And we can do the administration here. 
stration. And the admin I do shop at juice shop,  
165:41 - a juice.up. Yeah, that's there to confuse 
people. So you can guess it? And we're  
165:48 - logging in with that. And the password is 
admin 123. We're going to log in, and yeah,  
165:54 - fantastic. So you solve the challenge password 
strength. So that was the problem there. That's  
166:01 - the vulnerability that they're trying to say 
exists. So you know, again, password strength is  
166:05 - something that people don't take into account, 
login within message user credentials, without  
166:10 - previously changing them or applying SQL. Could 
you have done this with SQL injection? Probably,  
166:15 - I'll have to cover SQL injection, because we know 
SQL injection is one of those things that's really  
166:19 - dependent on the query. So let me just go back to 
the scoreboard here. I don't understand what else  
166:26 - is left. There's still a lot of stuff that have 
to cover. I talked about cross site scripting,  
166:31 - but I think I'll cover that in the next video. 
We'll explain it again. What is the what is the  
166:39 - the confidential document error handling? Or we 
don't have anything much they're actually someone  
166:48 - else's basket? I did that. What else should I want 
to cover here? Let's look at these ones right over  
166:56 - here. So yeah, so the authentication area here 
is where I want to look at. I think that's where  
167:02 - I'm going to end this video. I know, I haven't 
covered any advanced stuff. But hopefully that's  
167:06 - like an introduction. So where we, where we have 
been able to log into the administration in the  
167:11 - administrators account, we are able to get the 
scoreboard the administration panel, what else  
167:17 - were we able to do? We were able to provoke 
an error, not saying no nothing really complex  
167:23 - there. And we were able to log in with the admin 
tree at the administrators group user credentials.  
167:30 - Now we looks like we can actually get access to 
Max's search original users credential so again,  
167:38 - another user that we can try and get access into. 
Yeah, that's gonna be it for this video. Guys. If  
167:42 - you found value in this video, please leave 
a like down below. If you have any questions  
167:46 - or suggestions, let me know in the comment 
section on my social networks or on my website,  
167:50 - and I'll be sure to leave your reply and I'll 
be seeing you in the next video. Peace, guys.