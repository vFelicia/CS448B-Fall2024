00:00 - learn how to use react and Firebase to
00:02 - create an Instagram clone barock will
00:05 - teach you how to build a sophisticated
00:06 - social media application from scratch
00:09 - you'll explore the powerful combination
00:11 - of react for front-end development and
00:13 - Firebase for backend Services learning
00:16 - to create an Instagram like platform
00:18 - with features such as user
00:20 - authentication profile customization
00:22 - post creation real-time interactions and
00:25 - more hey everyone and welcome back so in
00:28 - the next couple of hours we're going to
00:30 - be building a full stack Instagram
00:32 - colone with react and Firebase and at
00:35 - the end we're going to deploy it so that
00:37 - you can put that link on your resume I
00:40 - want this tutorial to be as beginner
00:42 - friendly as possible so we are not going
00:44 - to be using any react Frameworks such as
00:46 - njs but instead we're going to be using
00:49 - a tool called vit to initialize a react
00:52 - app which is absolutely fine besides
00:54 - react and Firebase we're going to be
00:56 - using chakra UI for styling Z Library
01:00 - for State Management and a couple of
01:02 - more useful packages that will help us
01:05 - build this application faster in the
01:07 - first 3ish hours we're going to build
01:09 - the UI design and in the remaining part
01:12 - we're going to add all of the full stack
01:14 - features one thing that I want to
01:16 - mention is that recording these
01:18 - tutorials are taking a lot of time and
01:21 - effort and currently I am studying
01:23 - computer science so in theory I don't
01:25 - really have time to record these
01:27 - tutorials but in practice I somehow
01:30 - managed to do it so I don't really want
01:32 - to sound any dramatic but all I want
01:35 - from you is to subscribe to channel and
01:37 - like this video so that it can reach to
01:40 - more people and without any further Ado
01:42 - let's take a look at the demo and then
01:44 - we're going to start coding okay so now
01:46 - I am in the oath page where I can log in
01:49 - or I can sign up so I already have an
01:52 - account and I'll just go ahead and sign
01:54 - in but you can log in or sign up with
01:57 - your Google account as well so let me
01:59 - just go ahead and log
02:01 - in so if I just put the wrong password
02:04 - it is just going to say invalid
02:06 - credentials but if I just put the
02:08 - correct one it is just going to log me
02:10 - in now we are in the homepage where we
02:12 - can see the posts of the users that we
02:15 - follow and currently we are following
02:17 - this user as well as Heisenberg so we
02:20 - could like these posts or unlike that so
02:23 - it's going to update depending on that
02:25 - we can see all of the comments by
02:27 - clicking that and we can even comment
02:29 - from here nice pick guys let's say and
02:33 - if you just post that it's going to have
02:34 - loading State and there we go it is just
02:37 - has been posted and here on the homepage
02:40 - we have the suggested users component
02:43 - where we can follow those users and it's
02:45 - going to immediately update our feed
02:47 - depending on that and we could just like
02:50 - those post as well or we could unfollow
02:52 - these users from here and again it's
02:55 - going to update our feed so we could
02:57 - create a post but more on that later so
02:59 - we could search users so I'll just say
03:02 - Jane do if we search that there we go
03:06 - this is the user that we have we could
03:07 - follow or unfollow from here as well so
03:10 - let's go to a profile page of a user
03:13 - we're going to see their posts followers
03:16 - and following counts as well as all of
03:18 - the posts so if we just click to one of
03:21 - them we're going to get to see this
03:23 - caption uh comments number of likes and
03:26 - when this has been posted we could even
03:28 - comment from here
03:30 - and we could follow or unfollow this
03:32 - user so let's go to our own profile and
03:36 - here we could edit our profile where we
03:38 - have the username bio as well as the
03:40 - full name so I'll just change my profile
03:44 - picture so I will just select an image
03:47 - from my machine and I'll just select
03:49 - this one and if I submit that it is
03:51 - going to have the loading State and
03:54 - there we go profile updated successfully
03:57 - and this is our new profile picture that
03:59 - we can can see and we could go and
04:01 - delete a post so if I collected this
04:03 - since this is my post I can see this
04:05 - delete icon and I could just delete that
04:08 - if I say cancel it is not going to
04:10 - delete but if I say actually delete this
04:13 - post it is going to say that post
04:15 - deleted successfully and it is going to
04:17 - update this number of posts so we could
04:20 - go ahead and try to create a post if you
04:23 - just put a caption but not the image it
04:25 - is not going to allow us because uh an
04:28 - image is required so even if we don't
04:30 - put the caption we going to still get
04:32 - the same error so I'll just select an
04:34 - image maybe I'll just say this is
04:38 - Bob and if I post that it is going to
04:41 - have a loading state for a second and
04:43 - then post created successfully we see
04:45 - that number of posts has been
04:46 - incremented by one and this is the post
04:49 - that we just got so it says posted 9
04:52 - seconds ago and we could just comment
04:55 - like unlike and it is going to be
04:57 - updated depending on that and lastly
05:00 - this application is completely
05:01 - responsive so if we go to here and let's
05:04 - take a look so this is on the larger
05:07 - screens let's close that and as we
05:10 - shrink the sidebar will shrink as well
05:13 - and the post will be in the vertical
05:16 - direction that we can see and it is
05:19 - going to work up until 300 pixels which
05:22 - is one of the smaller uh smallest
05:24 - devices and we can go into the homepage
05:27 - there we go it is going to still work
05:30 - uh almost in every page so in the
05:32 - homepage o page and the profile page and
05:36 - our models are also working fine so this
05:39 - is the create post model as well as the
05:41 - search user model that we can see from
05:43 - here and basically we could just log out
05:46 - from this account so by clicking that
05:48 - icon so there we can see now everything
05:50 - works fine in the larger screens we have
05:52 - this image but on mobile devices we
05:55 - don't and we're going to be storing
05:57 - everything in our Firebase account there
05:59 - we can see see we have the fire store
06:01 - database storage and authentication
06:03 - system so here in the database we are
06:05 - having the posts as well as the users
06:08 - that we just store and in the storage
06:10 - bucket we are having our posts as well
06:13 - as profile pictures so these are the
06:15 - images that we have in our application
06:18 - as well as the authentication system
06:20 - there we can see these are the users
06:22 - that have signed up to our application
06:25 - and these are the providers so this user
06:27 - signed up with Google account and these
06:29 - others signed up with email and password
06:32 - credentials so that's pretty much it now
06:34 - let's get started so the first thing
06:37 - that we need is to create an empty
06:38 - folder I created it in my desktop and I
06:41 - called it insta clone and then I just
06:43 - open it up in vs code now we're going to
06:45 - go into the view and terminal so here we
06:48 - we are going to just create an empty uh
06:50 - react application so we could say mpm
06:53 - create so that should be create vat at
06:57 - latest and then press enter is going to
07:00 - ask us some questions so the project
07:02 - name is just going to be dot so that it
07:04 - will initialize it uh under this folder
07:07 - so press enter and we're going to choose
07:09 - react with JavaScript and now it says
07:13 - run mpm install and then mpm runev so
07:16 - let's say mpm install to get the note
07:18 - modules folder and once it is done I'll
07:20 - be right back okay so it has been
07:22 - completed now we're just going to say
07:24 - mpm run Dev and press enter it's going
07:27 - to uh start our application in this 51
07:30 - uh 73 Port it should be in your case but
07:34 - in my case it is
07:35 - 5174 it is because the de demo
07:38 - application is running in this port and
07:40 - if I just say a local host
07:42 - 5174 I should get this empty uh react
07:46 - application so this is the borderer
07:48 - plate that we have now we're just going
07:49 - to clear this a bit so I will open up
07:52 - this shrink the terminal we're going to
07:54 - go into the source and app jsx we could
07:57 - literally just delete everything here um
08:01 - so let's say I here we're going to
08:04 - delete the logo react logo um also app
08:07 - CSS file so we could just uh delete this
08:12 - as well as the import we could remove
08:14 - this use
08:16 - State okay and then we're going to go
08:19 - let's delete this assets as well and
08:22 - then what are we going to have inside
08:24 - the main jsx we are going to only only
08:26 - going to have the index CSS but we can
08:29 - just clear this file as well so I'll
08:31 - just delete everything and save this
08:33 - file um now let's see what do we have so
08:36 - we have this High text in our homepage
08:39 - so in this application we're going to
08:41 - use multiple images and I will provide
08:43 - all of them for you which you can grab
08:45 - from the GitHub so go inside the public
08:48 - F uh public folder and just maybe delete
08:51 - it okay we're going to create another
08:53 - one with empty content and then just
08:56 - copy all of them and paste it into this
08:58 - fold folder so we have the oath PNG
09:01 - which we're going to use in our uh the
09:04 - authentication page we're going to have
09:06 - our Fab icon uh Google icon image 1 2 3
09:12 - and four for our posts and we're going
09:14 - to have this logo that we're going to
09:16 - use as well as um Microsoft icon Play
09:20 - Store and the profile picture which you
09:23 - can uh replace it with your own so now
09:26 - that we have handled our images we are
09:28 - going to go and install the chakra so
09:31 - let's say chakra
09:35 - d.com so if you never heard of it it is
09:38 - a simple modular and accessible
09:41 - component library that gives you the uh
09:44 - kind of like already components
09:47 - components that you don't need to create
09:49 - so if you want to use a button just
09:51 - simply search for it and it's going to
09:53 - give you different um kinds of button
09:55 - that you can use so the solid outline
09:59 - and so what is this so variant is Ghost
10:02 - and maybe the link so let's say you want
10:05 - to create a model but you don't want to
10:07 - write the code from scratch and there
10:09 - you go they just give you the code you
10:11 - just uh open the model close it and copy
10:15 - copy the code and paste it and it's just
10:17 - going to work fine and in this video
10:19 - we're just going to learn everything
10:20 - about chakra so first let's go into the
10:23 - getting started page so we're going to
10:26 - get started with v so let's see say um
10:30 - is this for V I'm not sure that says
10:32 - index jsx so here let's just scroll to
10:35 - the very bottom we have this V and
10:37 - select it now we're going to copy this
10:39 - installation script and then open up a
10:42 - new terminal so maybe we could just
10:44 - suppl this one and paste it press enter
10:47 - and then while it uh installs let's see
10:51 - so it says provider setup which we are
10:53 - just going to wrap our application with
10:55 - this um chakra provider thing that we
10:57 - can see here and then we're going to
11:00 - just import it so I will just copy this
11:02 - line and then go to
11:06 - main.js okay we are just going to
11:08 - install this okay and then say chakra
11:12 - provider and trap our application with
11:14 - it and what this is going to allow us is
11:17 - that now our application can use any
11:20 - kind of component that is coming from
11:22 - Chakra so the buttons models the avatars
11:26 - so everything and what is an avatar
11:28 - let's see
11:29 - so it is this thing this profile avatars
11:32 - that we can use so let's see if it has
11:34 - been installed um okay it is beenin but
11:37 - we have an error that says chakra UI or
11:40 - maybe we could just refresh this here
11:42 - again okay so now it works fine we can
11:45 - go to the inside app jsx and instead of
11:49 - uh instead of saying hi we'll just say
11:51 - uh maybe
11:53 - button that is coming from Chakra let's
11:55 - import this and not from the disc but it
11:59 - should be just chakra and we'll say
12:02 - hello world if we just save this now
12:05 - let's see and we got this light button
12:08 - and now we want to use a dark mode in
12:10 - our application so what we have here is
12:13 - only dark mode and this is what
12:15 - Instagram uses so let's search for it it
12:18 - will say color mode and now let's see it
12:22 - gives you this extend theme okay we're
12:24 - going to copy this and we're going to go
12:28 - into the main jsx so let's shrink our
12:31 - console or terminal and we're going to
12:34 - paste this extend uh extend theme as
12:37 - import and then we're going to get this
12:39 - config as well as the theme so I'm going
12:42 - to copy this and paste this and this
12:46 - theme is going to be passed to this
12:48 - chakra provider so I'll say theme is
12:51 - going to be go here okay so it's going
12:53 - to be going to here and we want to
12:55 - change this initial color mode from
12:57 - light to dark and yeah so our
13:00 - application is only going to have the
13:02 - dark mode because this is what Instagram
13:04 - has and we're are passing this config
13:07 - into this extend theme and that theme is
13:10 - going to be used uh in our entire
13:13 - application so now our application has
13:15 - the dark mode by default and also we
13:17 - want to change the background color when
13:20 - we are in the dark mode it is because
13:22 - the chakra uses this um this background
13:26 - color for the dark mode and we just want
13:28 - to have this completely black color for
13:31 - this we need to change something and
13:33 - that thing is just going to be inside an
13:35 - object so let's just write it down and
13:37 - then I'll explain so con Styles this is
13:40 - how are we this is how we're going to be
13:43 - um customizing our theme so this going
13:46 - to be an object which takes the global
13:49 - which is also going to be a function
13:50 - that takes the props and here this props
13:55 - oops is going to return an object so
13:57 - here let's open up our parentheses as
14:00 - well as the curly braces and the thing
14:03 - that we would like to change is going to
14:04 - be the body okay background of the body
14:07 - as well as the color so for the
14:09 - background we'll just say um mode
14:12 - function that is coming from Chakra so
14:15 - it doesn't give us so let's just import
14:17 - it manually import mode from Chakra UI
14:22 - and from the theme tools and we'll just
14:25 - say mode and the first thing that it
14:27 - takes the uh back color for the light
14:29 - mode and we can just put anything here
14:32 - but let's just put gray uh 100 and for
14:36 - the dark mode we would like to have
14:37 - completely black black background so
14:40 - we'll just put three zeros and then call
14:43 - this function again with props and this
14:47 - is going to handle the background color
14:49 - for us for the body and then we're going
14:51 - to have the color that says mode and
14:55 - again the light mode uh the light color
14:57 - first and then the dark and dark color
15:00 - so we could just say grade 800 and then
15:03 - for the background we could just say I
15:06 - mean for the dark mode we could just say
15:08 - white Alpha 900 and call it with the
15:12 - props and then we're going to take this
15:14 - Styles extend the theme with it with it
15:18 - and this theme is being passed to our
15:21 - chakra provider which uh provides it to
15:23 - our entire application so if we just
15:26 - save this now we're going to see our
15:28 - background has has been changed to the
15:30 - black color and it didn't because now we
15:33 - are in the light mode if you go to our
15:36 - if you open up our terminal or console
15:38 - we're going to go into the application
15:41 - the local storage here it should be
15:44 - let's see okay local storage if you just
15:47 - delete this and refresh our page it is
15:50 - going to be in the dark mode and as you
15:52 - can see the background is um the black
15:55 - so let's quickly summarize what we did
15:57 - so here we just create a Styles uh
16:00 - object with the global function or the
16:03 - global key and it just changes the body
16:06 - uh field the body selector and we're
16:09 - changing the background as well as the
16:11 - color and in the light mode we're going
16:13 - to use this uh background color and in
16:16 - the dark mode we're going to use this
16:18 - background color and for the light mode
16:20 - we're going to use this color and for
16:22 - the dark mode we're going to use this
16:24 - color and then we're passing this into
16:26 - this extend theme so that it will
16:29 - overwrite the color that chakra provider
16:32 - gives us and then we're just passing it
16:35 - into into our app okay so yeah this is
16:37 - going to be our chakra uh set up so in
16:40 - our application we're going to use
16:42 - different icons as well as we're going
16:44 - to have different pages so for this we
16:46 - need to install a couple of packages or
16:48 - actually just two so let's say mpm
16:51 - install and maybe I should just kill
16:53 - this terminal and open up a new one so
16:56 - that we don't give we don't get any any
16:58 - weird highlighting so I'll just say mpm
17:01 - install react Das icons as well as um
17:05 - react
17:07 - router down so and just press enter this
17:10 - is going to allow us to uh just for the
17:14 - navigation and this will gives us
17:16 - different icons so let's just take a
17:18 - look at the icons that we're going to be
17:20 - using so we could just say react icons
17:23 - and here let's go to this GitHub pages
17:27 - and then so if we just search for any
17:29 - icon here let's say home we can just
17:31 - copy and paste it and it's just going to
17:33 - work so the other thing was react r d
17:37 - and for this we are going to go first
17:39 - into the main jsx okay we already have
17:41 - it open so we're going to wrap our
17:43 - application with something called
17:45 - browser router and then just wrap entire
17:49 - application with it and this is going to
17:52 - allow us to use any component that is
17:53 - coming from um the react router down
17:56 - Library so we're going to save this file
17:58 - here and then inside the app jsx we're
18:01 - going to put our routes so maybe we
18:04 - could just have this empty fragment and
18:06 - just delete this uh we're going to have
18:09 - routes okay that that is wrong so let's
18:12 - just delete and then try again okay this
18:15 - is our fragment and then here we just
18:18 - have
18:19 - routes that is coming from react rou D
18:22 - and we're going to have route component
18:24 - which is going to be just self closing
18:27 - and then let's see import this and if
18:30 - you are in the homepage so let's say
18:33 - path is slash that just indicates the
18:35 - homepage we're going to show an element
18:39 - and this is going to be our homepage
18:41 - component which we're just going to
18:43 - create so now we're getting this uh red
18:46 - underline it's because we don't have
18:48 - this page it is not defined so for this
18:51 - we're going to go and create a Pages
18:53 - folder and another folder called let's
18:56 - say home um that should be homepage and
18:59 - then inside this we're going to have
19:02 - homepage. jsx and we're going to use RFC
19:05 - to get this boiler plate and it is
19:07 - coming from my extension let's see it
19:10 - was react um Snippets I
19:14 - believe so it should be let's say react
19:17 - okay it is this one so es uh 7 plus
19:20 - react Redux react native Snippets if you
19:23 - install this you can now use this so say
19:26 - rafc which gives you this boiler PL and
19:29 - then here um you could save this let's
19:32 - go here import the homepage from the
19:35 - pages folder and then homepage folder
19:37 - and then homepage. jsx so we can delete
19:40 - this button because we're not going to
19:42 - be using this in this component now
19:44 - let's save and if you go to the homepage
19:48 - we see this homepage text that we can
19:50 - see now we're also going to add a page
19:53 - when we go to the oath page for now we
19:56 - don't have this page so let's just
19:58 - created we are going to just duplicate
20:01 - this route it is going to be slash oath
20:04 - and then we'll just show the oath page
20:07 - and now let's create this under the
20:09 - pages folder let's say another folder
20:12 - it's going to be oath page and then oath
20:15 - page. jsx and get the boiler plate that
20:18 - says this is the oath page and let's
20:21 - import this when we go to/ oath now um
20:27 - we cannot see anything refresh again so
20:29 - it is not working let's see from o page
20:33 - um I don't know why but let's delete
20:37 - this H from out page that should be
20:40 - already working I'm not sure delete all
20:43 - these um so let's try this again okay so
20:47 - even if we just say even if it didn't
20:49 - change change here so even if it was
20:52 - like this if we had this import react
20:54 - statements up here up here it should
20:56 - still be working so okay it just it just
21:00 - working now but the reason that I
21:02 - deleted it deleted it is because we're
21:05 - not using this react anywhere we're not
21:07 - using this one so yeah it it wasn't
21:10 - related to that import react statement
21:13 - okay so with this quick explanation now
21:16 - let's move on with the oath page so the
21:18 - first thing that we're going to have
21:19 - let's take a look so everything now is
21:22 - in the center that you can see on the
21:24 - left we have our image and on the right
21:26 - we have this oath form so just to take
21:30 - everything to this Center what we're
21:32 - going to use in Chakra something called
21:34 - container and what it does it just uh to
21:37 - contain any piece of content wrap it in
21:40 - the container component and it takes um
21:44 - okay so we don't have any description
21:45 - for this but I'll just explain it just
21:47 - takes everything into the center of the
21:50 - parent container okay so here our parent
21:53 - container is the body so it just put
21:56 - puts everything into theer Center so now
21:58 - let's go to the oath page and we're just
22:01 - going to code it from scratch okay here
22:03 - we could just delete everything just
22:05 - return maybe a flex and then just coming
22:09 - from
22:10 - Chakra and okay here we're going to have
22:14 - a container so let's say container which
22:17 - is also coming from Chakra react and
22:19 - that shouldn't be this I don't know why
22:21 - it gives us so maybe it it is still
22:24 - working in this we're going to see and
22:26 - this container we can just say Max width
22:29 - is just going to be container. MD and we
22:33 - could say it is not going to have any
22:35 - petting so petting is going to be zero
22:38 - and just to put this container to the
22:40 - center we'll say minimum height of 100
22:45 - pH and then this Flex is just going to
22:47 - be justify content to be Center as well
22:50 - as align items to be Center and petting
22:53 - X could be four and here let's say this
22:57 - is some content now if we just take a
23:01 - look at this in the O page so okay it
23:03 - shouldn't be coming from this we could
23:05 - just delete this it should be chakra /ui
23:08 - and then I mean chakra - ui/ react so
23:12 - here uh okay the our content is
23:15 - literally in the center in the middle of
23:18 - the screen and we're going to put a
23:20 - image on the left and then on the right
23:22 - we're going to put that authentication
23:24 - form so this is going to be let's put
23:27 - our commments
23:28 - left hand side and then we're going to
23:32 - also have the right hand side but for
23:34 - now let's say box which is just a basic
23:37 - div so here we'll say
23:41 - display okay it's going to have some
23:43 - Styles and on the mobile so here let's
23:46 - take a look on the mobile we're not
23:48 - going to show this image we're only
23:50 - going to have this form so that's why
23:53 - we're going to come here and say display
23:55 - in the mobile if you want to make
23:58 - something responsive we put another
24:00 - object into here and we just say on the
24:03 - base which is smaller screens and above
24:05 - it's going to be none but the medium
24:07 - screens and above it is just going to be
24:09 - block so medium screens and above is
24:12 - going to be the tablet Dimensions so
24:15 - here we'll just put a image that is
24:17 - coming from Chakra but not this I'm not
24:19 - sure why it gives us this maybe we
24:22 - should just reload this uh uh reload
24:25 - this vs code I'll say control shift p
24:28 - and then developer uh reload window so
24:32 - maybe that would fix it for us okay so
24:35 - inside the image now we're going to say
24:38 - Source the image is going to be this one
24:41 - oath. PNG inside the public folder and
24:44 - in order to get into the public folder
24:46 - we just say slash now we are inside the
24:49 - public and we'll say oath. PNG and this
24:52 - is going to have height of let's say 650
24:56 - pixels and then alt could be P image
25:02 - okay we could save this and now we're
25:04 - going to have something on the right as
25:05 - well so let's say okay right hand side
25:09 - and then here on the right hand side we
25:11 - can use something called vertical stack
25:14 - that is coming from Chakra so let's say
25:16 - vertical stack and just import it from
25:19 - Chakra UI react and let's just put this
25:22 - into here again so put a
25:25 - comma Okay so so what is vertical stack
25:29 - it is just like a flex but instead of
25:32 - putting items next to each other it just
25:34 - puts them uh under like on top of each
25:37 - other so here let's take a look now this
25:40 - is inside the vertical stack we can see
25:42 - the logo above and then this input above
25:46 - I mean I mean like in the vertical
25:48 - Direction so we're using vertical stack
25:50 - now we're going to have this o form at
25:53 - the top and then this text as well as
25:55 - this um logos at the bottom so let's go
26:00 - here inside the vertical stack we can
26:02 - use this spacing which is going to give
26:04 - us for spacing and then align um maybe
26:09 - it should be stretch and we're going to
26:11 - see why so here we're going to have our
26:14 - oath form component that we need to just
26:17 - create now so it should be self closing
26:20 - tag and let's go inside the source
26:26 - components we're going to have Oath form
26:30 - but that should be a folder so we could
26:32 - just say oath form slash oath form. jsx
26:37 - so it's going to put put it under this o
26:40 - form uh folder and then we'll just say
26:43 - RFC and save this delete this react and
26:47 - import this and after this o form we're
26:50 - going to have a box that says um get the
26:55 - app and then we could just say say text
26:58 - align should be Center and below this
27:02 - we're going to have one Flex with two
27:04 - images so it is just going to put them
27:06 - side by side that's why we're using Flex
27:09 - we'll say gap of five and then justify
27:13 - content to be Center so to Center them
27:16 - in horizontal uh I mean horizontally and
27:19 - then here we'll just put two images so
27:22 - let's say one image it is going to have
27:25 - this Source called slash we're in the
27:29 - public folder and then play
27:33 - store.png and then we could just say
27:36 - height is going to be 10 as well as the
27:39 - alt is going to be Play Store logo and
27:44 - just duplicate this the second image is
27:46 - going to be the Microsoft so we could
27:48 - just say
27:50 - microsoft. PNG height is going to be 10
27:53 - and the alt could be Microsoft logo and
27:57 - we're just going to save this now and
27:59 - let's see what are we what are we going
28:01 - to get here okay so we have our image as
28:05 - well as our oath form but they are not
28:07 - in the uh they're not next next to each
28:10 - other so the reason might be this Flex
28:13 - is not working properly I mean not this
28:16 - flex but another one that should be
28:18 - inside the container so here we need to
28:20 - have a flex that that the first child is
28:24 - going to be this box the left hand side
28:27 - and then another child which is going to
28:29 - be this right hand side so if we just
28:32 - cut this and paste it here and we'll
28:35 - just say justify content Center and then
28:39 - align items also should be Center and
28:43 - just to give some Gap we could say Gap
28:45 - is going to be 10 so let's just save and
28:47 - let's take a look okay so the problem
28:50 - was this container had two children but
28:54 - it wasn't grabed within a flx so now we
28:58 - just give a flex and it's going to put
29:00 - the children side by side first we have
29:03 - this left hand side and then we have
29:05 - this right hand side and we just say
29:08 - align items to be Center so that they
29:10 - are vertically aligned and now
29:12 - everything is working fine but the only
29:14 - thing that we need to add is going to be
29:15 - this oath form so I'll just save this
29:17 - file and now inside the oath form we're
29:20 - going to change this content so let's
29:22 - get started with this I will delete this
29:24 - at diff and I'll just create a box that
29:27 - is a simple diff that is coming from
29:29 - Chakra so here this box is just going to
29:32 - have this border one pixel solid gray
29:37 - and then here we'll just have border
29:40 - radius of four and then padding it just
29:43 - going to be five and then we're just
29:45 - going to have vertical stack again and
29:49 - you're going to see y so let's say
29:51 - vertical
29:52 - stack and we're going to import this
29:55 - we're we're using vertical stack it's
29:56 - because we want to put this logo um logo
30:00 - input and this button on top of each
30:03 - other so everything here you see is just
30:05 - on top of each other that's why we're
30:07 - going to be using it so inside this
30:10 - vertical stack we'll just say spacing
30:12 - should be four and then we're going to
30:14 - have one image which is going to be our
30:16 - logo Instagram logo so image let's
30:19 - import this from Chakra it's going to
30:22 - have a source to public folder
30:25 - logo.png and height I use 24 but you can
30:28 - change it and then cursor could be
30:31 - pointer as well as alt say
30:37 - Instagram okay it should just say
30:39 - Instagram and then below this image
30:42 - we're going to have an input for email
30:45 - so let's say input which is coming from
30:47 - Chakra and also if there is anything
30:50 - that you don't understand simply just go
30:52 - to chakra and just search for it so here
30:55 - we have input and you're going to see
30:58 - like different usages so it has this
31:00 - input component it has this placeholder
31:03 - and you can even just change it and it
31:05 - is interactive so you can use uh the
31:08 - font size so which you can see here or
31:11 - the size in general you have this HTML
31:13 - size with in the variant is going to be
31:17 - outline filled flashed unstyled and
31:20 - maybe for left left and right uh okay it
31:24 - is addin I was going to say icons and
31:26 - then it has this element inside an input
31:29 - so just any kind of thing that you can
31:31 - imagine so yeah that would be my
31:34 - recommendation but now let's go to here
31:36 - and thens go so we're going to import
31:39 - this input from Chakra and it's going to
31:41 - have a couple of props so the
31:43 - placeholder let's say it's just going to
31:45 - be email and then it is going to have
31:48 - the on change in value but we're going
31:51 - to add add it uh later in this once we
31:54 - completed the UI okay so we could just
31:57 - say font size should be maybe 14
32:01 - pixels and that shouldn't be inside a
32:04 - string okay and let's see and below this
32:08 - input we're going to have another one so
32:10 - I'll just copy and paste it so it is
32:13 - going to be for the
32:16 - password and the type of this guy is
32:19 - going to be password so let's say
32:21 - password and maybe for this we could
32:23 - also say the type should be email and
32:26 - phone size is going to be b14 yes that's
32:28 - it and also in the sign up page so let's
32:31 - take a look here in the sign up form
32:34 - we're going to have another one so that
32:36 - says confirm password but if we're in
32:38 - the login we're not going to see that
32:40 - for this we can use something called
32:42 - state in react so const we could just
32:45 - say um what should we say let's say is
32:49 - login so set is login and initially it's
32:52 - just going to be true and here let's
32:55 - take a look I'm just taking look looking
32:57 - at my notes So Below this password we'll
33:00 - say if we are in the if we are not in
33:03 - the login page okay if if it is the sign
33:05 - up then we're just going to render this
33:08 - portion else will just not return
33:10 - anything which can which we can just put
33:12 - null and then here we're going to have
33:15 - another input I'll just copy this paste
33:17 - it that says placeholder confirm
33:20 - password and type is going to be
33:22 - password font size of 14 and that's just
33:24 - it okay so we can save this and we're
33:28 - going to be changing this when we click
33:30 - to that sign up button and below this
33:33 - we're going to have another button let's
33:35 - say button not but but button so it is
33:39 - going to say if you're in the login page
33:42 - it's going to be a login but if we're in
33:44 - the sign up page it's just going to say
33:46 - sign up and maybe that should be like
33:48 - this and this button is going to have
33:51 - the width of full and the color scheme
33:55 - is just going to be blue
33:57 - Also let's say size of small on size of
34:02 - 14 pixels as well as on click function
34:05 - but we're going to add that later and
34:08 - actually let's just add it so let's say
34:10 - on click okay let's just add this later
34:12 - and then below this button what are we
34:14 - going to see let's just first take a
34:15 - look now here we see email password and
34:19 - this login button and then below this we
34:21 - would like to have this or uh field okay
34:25 - and for this we're going to use a flex
34:27 - so that all of them are going to be next
34:29 - to each other we're going to give some
34:30 - spacing here and we'll just say align
34:33 - items to be Center so that they are
34:35 - vertically aligned so let's go here
34:38 - below this button we're just going to
34:40 - use a flex import from the chakra that
34:44 - is just going to have align items to be
34:46 - Center and then let's say justify
34:48 - content to be Center as well margin y of
34:52 - four gap of maybe we could say one and
34:56 - then width is is just going to be full
34:58 - so that it is just going to take the
34:59 - full width of the parent component so
35:02 - we're going to have a box uh we already
35:04 - imported it so it is not going to have
35:06 - any content so that could be a self
35:08 - closing box and we're using box for this
35:12 - thing that you can see here and this box
35:15 - is just going to have flights of two and
35:17 - it's going to say height of maybe one
35:20 - pixels also background um let's say gray
35:24 - 400 maybe and below the this we're going
35:27 - to have our text that says uh or okay
35:31 - we'll say text imported from Chakra that
35:34 - is going to say or um that should be
35:36 - uppercase and then margin X of one as
35:39 - well as color is just going to be white
35:42 - and below this we're going to have
35:44 - another this box I'll just copy and
35:46 - paste it so this is going to be our or
35:49 - text or text or maybe we could just say
35:54 - it like
35:55 - this
35:59 - okay this is what we see in the
36:01 - UI and we have an error okay it's just a
36:04 - warning so let's see now in our original
36:08 - app we see this or text as well and
36:11 - below this we are going to add this
36:13 - login with Google button okay we're
36:16 - going to have again a flex on the left
36:19 - image on the right the text itself so
36:22 - let's go here and then we're going to go
36:24 - into the vs code so build below this
36:27 - Flex we'll just create another Flex
36:30 - let's say um on the left we're going to
36:33 - have our image so that should be a self
36:35 - closing tag it's going to have the
36:37 - source to be public folder
36:40 - google.png and then with we could say
36:43 - it's going to be five and ALT let's say
36:47 - Google logo and on the right hand side
36:51 - we'll just have a text that says log in
36:55 - with Google and then this is just going
36:58 - to have margin X of two let's say and
37:02 - the color should be blue 500 and this
37:07 - Flex is going to have some let's say
37:09 - align
37:11 - items of Center and then justify content
37:15 - of Center as well and maybe you could
37:18 - just say cursor is going to be pointer
37:21 - so that it looks like a button when you
37:23 - hover over this so now let's go here and
37:27 - we see this login uh with Google and
37:30 - what happens if you don't use align
37:32 - items in this here so in this orex I'll
37:35 - just delete this for a second and do you
37:38 - see like it is not vertically aligned so
37:41 - these um these lines should be come to
37:44 - here so that they are vertical aligned
37:46 - or this ortex should go to up so that's
37:49 - why we're using it and then we just say
37:52 - margin Y and just give a gap between
37:54 - this text this box and this box but
37:57 - anyways after this login with Google
38:00 - text so after this box I believe we're
38:03 - going to have another box that is just
38:06 - going to say um do you have an account
38:08 - or don't you have an account in that
38:10 - case just sign up or log in so we're
38:13 - just going to say box and this box again
38:15 - is going to have border one pixel solid
38:20 - and gray and then border so let's say
38:24 - border radius of four
38:27 - as well as the pading of five and let me
38:30 - just scroll a bit so we're going to have
38:33 - one Flex so that um they are next to
38:36 - each other so we say flex and then align
38:39 - items should be Center as always and
38:43 - then justify content should be Center as
38:46 - well and now we're going to have one box
38:48 - on the left and then another box on the
38:51 - right so this box the first one let me
38:54 - just save so that we get this formatting
38:56 - and then then we're going to go here and
38:58 - we'll say is login now if we login we
39:02 - could just show uh
39:04 - don't have an account and if you already
39:09 - have an account that that could just say
39:11 - already have an account and then this
39:14 - box is going to have some Styles let's
39:15 - say margin X of two and then font size
39:20 - is just going to be
39:21 - 14 and below this box okay in this one
39:25 - in this one I mean we're going to go
39:27 - inside it is just going to be if we are
39:29 - in the login we are going to return a
39:31 - text that says sign up otherwise it just
39:34 - going to be a login so when we clict to
39:36 - this we would like to call a on click
39:38 - function I mean yeah Anonymous function
39:41 - so on click to this we're going to call
39:44 - this Anonymous function that just says
39:46 - set is login whatever the value just um
39:52 - negate it so false is login if it was
39:55 - true it's going going to be false if it
39:57 - was false now it's going to be true and
40:00 - after this on click we're just going to
40:01 - say color should be blue 500 and cursor
40:07 - is just going to be let's say pointer
40:11 - okay now we're going to save this and
40:13 - hopefully it should work so let's just
40:15 - zoom out a bit okay now we're in the
40:18 - login page that's why it says don't have
40:20 - an account then just sign up so let's
40:23 - see here it says now we're in the log
40:26 - page it says don't have an account
40:28 - you're in the login page it says sign up
40:32 - okay I'm going to save this and if I
40:33 - click to this the login State now will
40:36 - be false so that we are going to see
40:39 - this confirm password and this button
40:41 - says sign up and if we're in the login
40:43 - page it says login and now if we just
40:46 - shrink our screen we should be we
40:49 - shouldn't be seeing this image on the
40:50 - left and it is because we added this
40:54 - display property up here so on the base
40:57 - which means in the smaller screens we're
40:59 - not going to see that but on the tablets
41:01 - and above we're going to see this image
41:03 - which is in the left hand side so
41:05 - believe it or not this is the entire
41:08 - code for our oath page uh design now we
41:11 - can work with the homepage and even
41:14 - before we get into the homepage let's
41:15 - add this functionality where when we
41:18 - just put our email and password when we
41:21 - click to this login it should take us to
41:23 - the homepage so let's add that
41:25 - functionality so we're going to open up
41:27 - our application and then vs code so it
41:30 - is going to be this button where so
41:34 - let's see it is going to be this one so
41:36 - when we click to this it is going to
41:38 - call handle o function let's create it
41:42 - it's going to be up here con handle o
41:45 - and arrow function and for now it's not
41:48 - going to do anything and let's have our
41:50 - states so let's say con inputs and set
41:54 - inputs we're going to have
41:57 - um like this and we're going to have the
41:59 - email password as well as the confirm
42:01 - password now we need to bind this inputs
42:04 - with these uh input Fields so we're just
42:07 - going to say for the email the value is
42:10 - just going to be inputs. email and for
42:13 - the onchange so let's say onchange it is
42:16 - going to take the event or maybe um okay
42:21 - let's just take the event we'll say set
42:23 - inputs and we're just going to destroy
42:26 - structure all of the inputs and we're
42:28 - only going to change the one which is
42:30 - the email at this point and we can
42:33 - change uh this password as well we'll
42:36 - say value as well as the on change when
42:39 - we type into this password field we're
42:41 - only going to update the password State
42:44 - and also for the confirm password we'll
42:47 - just say value it's going to be confirm
42:49 - password and on change only update this
42:53 - field and we could save this and we we
42:57 - handle and when we call this function
42:58 - let's say console. log the inputs so
43:03 - let's see now I'll just put my email and
43:06 - my password open up the console when I
43:09 - click to this um okay let's just clear
43:12 - this we got the email as well as the
43:15 - password the confirm password is empty
43:17 - because we didn't type anything in so
43:20 - let's just put something here as well if
43:22 - we just click that uh we get we got all
43:25 - these states and what we want to do is
43:27 - just uh take this user to the O I mean
43:30 - the homepage for this we're going to use
43:33 - react router Dom so we'll say const
43:36 - navigate there is something called
43:38 - navigate which handles the navigation it
43:41 - is coming from this use navigate hook
43:44 - and here we could now delete here and
43:47 - we'll say if the
43:50 - inputs that email is empty or if the
43:55 - inputs
43:56 - that password is empty or the confirm
44:00 - password is empty so let's just get this
44:04 - and then if this is the case we'll just
44:06 - alert and we'll say please feel all the
44:09 - fields and then return out of this
44:12 - function and below this if everything is
44:15 - correct I mean every input is filled
44:18 - then we'll just say navigate this user
44:21 - to the homepage which is just slash and
44:24 - now let's test it out and before that
44:26 - this should be if not okay if the input
44:29 - email is empty or the password is empty
44:32 - and we could actually just delete this
44:34 - for now because this is only the design
44:37 - part I don't really want to write any if
44:39 - else checks again and this should be
44:41 - okay so let's test it out I'll say uh
44:44 - something here something for my password
44:46 - if I don't put anything so let's just
44:48 - delete it is going to say please all the
44:50 - fields if I don't put anything here it's
44:53 - going to say again feel all the fields
44:55 - but if I just put something is just
44:57 - going to take me to the homepage now we
44:59 - can get started with the homepage but
45:02 - before that we need to just realize that
45:04 - every single page has the sidebar so we
45:07 - have in the homepage we have uh in the
45:10 - user page we have the sidebar but in the
45:13 - oath page we don't have it right so
45:16 - we're going to design our remaining
45:17 - Pages depending on this so we can create
45:20 - a layout component for this and instead
45:22 - of adding the sidebar to each page we
45:25 - can just only created once and use it
45:28 - inside the page layout so it sounds
45:31 - complicated so let me just show that so
45:33 - inside the source you're just going to
45:35 - have layout um so let's say layouts and
45:39 - then it's going to have a page layout
45:42 - let's
45:43 - say and inside this we're going to have
45:45 - a file called page layout. jsx so we're
45:50 - going to get the boiler plate and now
45:53 - here we're going to uh render the
45:55 - sidebar as well as the content but we're
45:58 - not going to show the sidebar on the out
46:00 - page okay so here I'll just say one flex
46:04 - and import it from Chakra and this Flex
46:07 - is going to have something on the left
46:09 - which is going to be the
46:11 - sidebar on the left and the content on
46:16 - the right let's
46:18 - say the
46:20 - page content on the right so for the
46:25 - sidebar we're we going to create a
46:26 - component and here for the page content
46:30 - we're just going to get the children as
46:33 - props so let's say children if I can
46:36 - type we're just going to copy it and put
46:39 - it inside a box so let's import the box
46:43 - from Chakra and wrap this with curly
46:46 - braces and then this box is going to
46:48 - have couple of uh props but before that
46:51 - um let's create our sidebar it is going
46:54 - to be inside a box again we are just
46:57 - have the sidebar component let's say and
47:01 - now let's get into the
47:03 - components um that should be let's say
47:10 - sidebar and then sidebar.
47:19 - jsx okay now we can import this sidebar
47:22 - and then this box is going to have
47:24 - couple of uh actually only one the width
47:26 - is just going to be uh on the smaller
47:29 - screens it's just going to be 70 pixels
47:32 - and in the medium screens and above so
47:34 - let's say MD it's going to be 240 pixels
47:38 - but we are only going to show this
47:40 - sidebar uh other than the off page so we
47:43 - can check it by so I just cut this now
47:46 - we will just say const give me the path
47:49 - name from this hook that is going to
47:51 - give you the path name so we'll say if
47:54 - the path name is equal to the O actually
47:58 - if it is not equal to the O page then
48:01 - we're going to render the sidebar but
48:04 - else we're not going to so we say null
48:07 - so if we are not in the off page we're
48:09 - going to show the sidebar and so now
48:12 - this box is going to take some props
48:14 - let's say this Flex is just going to be
48:17 - one which means that it is going to take
48:19 - the remaining part and withd we could
48:22 - say uh on the base and above is just
48:26 - going to be cul function with 100% minus
48:31 - 70 pixels and for the medium we'll just
48:35 - say um exactly the same function so I'll
48:38 - just copy and paste it but the pixels is
48:42 - is going to be 240 pixels and now what
48:46 - we can do is to just go into the app jsx
48:49 - and wrap our entire application with
48:52 - this page layout and um okay so let's
48:56 - say page layout now all of our pages is
48:59 - going to be within this page layout
49:02 - component and whatever we pass is going
49:04 - to be this children so if we are in the
49:06 - homepage this children is going to be
49:08 - the homepage content so we're going to
49:10 - put it uh put the homepage content on
49:13 - the on the right and the Side Bar on the
49:16 - left and if we're in the oath page we're
49:19 - just uh ignore this part as if there is
49:21 - only the O page content and here we have
49:25 - some uh warnings let's get rid of this
49:28 - we're going to go inside the ASN uh ASN
49:31 - RC so it is a prop types uh error so
49:35 - before I mean after this uh first rule
49:38 - object okay inside that we're just going
49:40 - to paste it this uh this line it says
49:42 - react prop types off and we added this
49:46 - to uh avoid prop types error okay we're
49:49 - going to save this now we're not going
49:50 - to get any warnings and now if we go to
49:53 - the let's say we are in in the O page we
49:56 - don't okay that's this is not our
49:58 - application so let's save um so let's
50:01 - save it
50:03 - app.jsx so here now in the homepage we
50:06 - can see the sidebar on the left and the
50:08 - homepage on the right if we go to the
50:11 - oath page we're not going to see the
50:13 - sidebar it's because we're checking for
50:15 - the path name so it it should be here if
50:18 - the path name is oath we'll just return
50:22 - null and this path name is going to be
50:25 - what whatever you put after this uh port
50:28 - number if you're in the homepage the
50:30 - path name is just going to be this slash
50:32 - so now we are going to go into the
50:34 - homepage let's say and we're going to
50:36 - just add this sidebar so let's go to the
50:39 - sidebar.
50:40 - jsx we can close this files that we
50:43 - don't use main jsx maybe app jsx um o
50:47 - form off page and then here we are just
50:50 - going to have a box that is coming from
50:52 - Chakra and then inside this is going to
50:54 - have a couple of different props so
50:57 - let's say the height is going to be 100
51:01 - VH so it should be inside a string and
51:04 - then it is going to have this border
51:07 - right let's say one pixel solid and
51:12 - Border color it's going to have white
51:15 - Alpha 300 and then padding y of
51:20 - eight position is going to be sticky
51:23 - let's
51:24 - say and then the top is going to be zero
51:28 - let's say and the left is going to be
51:30 - zero so it's just going to put it at the
51:33 - very top and it's going to be sticky
51:34 - there and on the let's say padding X for
51:38 - the base it could be two and for the
51:40 - medium screens and above it's just going
51:42 - to be four and this box is going to have
51:45 - one Flex which is going to be holding
51:47 - that um so to say the icons so the first
51:51 - icon that we're going to have is going
51:52 - to be inside the link and it is going to
51:55 - be that that uh Instagram logo so if we
51:58 - just take a look look at it here so it's
52:01 - going to be this logo so we're going to
52:03 - give this uh icon and on the mobile
52:06 - screen that we can see it changes to
52:09 - this mobile icon and we're going to be
52:11 - adding that as well so first let's add
52:14 - this uh desk desktop icon so we're going
52:17 - to go into the link and this Flex is
52:19 - going to have couple of different props
52:22 - so let's say direction to be column so
52:24 - everything is going to be uh vertically
52:27 - uh aligned or gap of 10 width is just
52:31 - going to be say full and then height is
52:35 - also going to be the full and then this
52:38 - link is going to take us to the homepage
52:41 - but this links is coming from uh chakra
52:44 - right actually it's coming from RE R Dam
52:47 - so let's say let's delete this and
52:49 - import it from Chakra but we're going to
52:51 - say import uh link as
52:55 - router link from react router D so we
52:58 - just rename it uh to the router link and
53:01 - we're going to use this link as as if
53:04 - this is a router link that is coming
53:06 - from react I mean react router D we're
53:09 - doing this is because uh this link we
53:12 - can both add styles to it just like a
53:15 - normal chakra um normal chakra component
53:18 - as well as this two functionality that
53:21 - is coming from react router down so ping
53:23 - left is just going to be two and we will
53:25 - say display this uh on base it should be
53:29 - none and for the medium and above it's
53:32 - just going to be block so inside here we
53:35 - are going to say show us the
53:38 - Instagram logo which is something that I
53:41 - will provide to you in the GitHub preo
53:44 - so this is also going to have the
53:47 - cursor so let's say cursor is going to
53:49 - be just pointer and now for this icons
53:52 - we're going to create a assets folder
53:54 - so's see assets and we'll say
53:58 - constants jsx and let me just grab all
54:02 - of them so I just copied all of them and
54:04 - now I'm going to paste it so here let
54:06 - let me just shrink all of
54:08 - them so shrink this one this
54:15 - this so we have couple of icons and all
54:19 - of them are just a basic SVG that we can
54:21 - see here I just copied and pasted these
54:24 - guys from the Instagram website so now
54:28 - we're going to import this Instagram
54:29 - logo that is coming from constants so
54:32 - now I will just copy this link and then
54:35 - paste it again so this is going to be
54:37 - for the desktop and this is going to be
54:39 - for the mobile mobile so it is going to
54:42 - have the almost the same props so to
54:44 - this uh homepage as router link padding
54:48 - let's say just padding is going to be
54:50 - two from uh all directions and then
54:54 - display on the the base it is going to
54:56 - be block but on the medium screens and
54:58 - above it's just going to be none so in
55:00 - the small screens we're going to show
55:02 - this logo and in the larger screens
55:05 - we're going to show this one now this
55:06 - will also get a border radius so let's
55:09 - say border radius is going to be six and
55:12 - then um it's going to have a hover state
55:15 - so let's say so this is how we add hover
55:17 - state in Chakra so underscore hover and
55:19 - it's going to take another object and
55:22 - the properties that you want to change
55:24 - so you want to change the background to
55:26 - be white Alpha 200 and the lastly this
55:30 - is going to have a width let's say width
55:33 - on the base it is just going to be um 10
55:36 - I mean 10 and medium screens and above
55:40 - it is not going to have anything because
55:41 - it is uh it's displaying on anyways
55:44 - right so let's delete this and let's
55:48 - just give it a
55:50 - 10 okay so we could save and let's take
55:52 - a look now um inside our application we
55:56 - see this icon and when we go to like the
56:00 - medium screens it's just going to be
56:01 - this um logo and now below this logo
56:05 - we're going to add this uh so to say
56:08 - search bar items so we have logo and
56:10 - text on the right when we shrink this
56:13 - we're going to when we hover over this
56:15 - we see this tool tip on the right that
56:17 - says home and it says search
56:20 - notifications create and uh the profile
56:24 - now in order to get this tool tip it is
56:26 - just a component from Chakra let's say
56:29 - tool tip and as we can see here when you
56:33 - like hover over this you're going to see
56:35 - uh this hover over me I mean hover me
56:37 - tool tip and it has a lot of um so to
56:41 - say properties and we're going to be
56:43 - using some of them okay so we're going
56:45 - to use tool tips for this as well as
56:47 - this sidebar items or the icons that we
56:50 - already have in the constants jsx file
56:54 - so here inside the sidebar I'll just
56:56 - paste something here um it's going to be
56:59 - our um so array an array of icons so
57:02 - some of them will have link and some of
57:05 - them will not have so now let's import
57:07 - all of these AI fail home uh that should
57:10 - be coming from Chakra but the I mean
57:13 - this should be coming from react icons
57:14 - but these guys are going to be coming
57:16 - from our assets so let's import all
57:20 - these and the Avatar is going to be
57:23 - something that I will go over as well so
57:25 - let's say import um AI fill from react
57:29 - icons Ai and it is going to be this one
57:32 - so let's say okay it is this one
57:34 - actually AI fail home when you search
57:36 - for the home icon is going to be the
57:39 - first one that you get and now this
57:42 - Avatar is something that chakra gives
57:45 - you so let's say
57:47 - Avatar and it is basically this circle
57:51 - profile picture that we get this uh down
57:53 - below so so for this you just put the
57:56 - source and you can put size to just give
58:00 - different sizes so 2x small medium small
58:03 - maybe X small and so on and so forth so
58:06 - below this logo now we're going to add
58:08 - our side sidebar items so after this
58:13 - link I believe we're going to have
58:14 - another flex and it's going to have this
58:17 - direction to be column as well so let's
58:20 - say Direction going to be column gap of
58:23 - five maybe cursor pointer it should be
58:27 - and then we're just going to get this
58:29 - sidebar items we're going to map it get
58:32 - each item so as well as the index let's
58:35 - say and we're going to just return some
58:37 - jsx here so it's going to be tool tip so
58:41 - this is how we use tool tip you first
58:44 - wrap the content into this tool tip and
58:47 - it's going to have a couple of different
58:49 - props so we want to has this Arrow when
58:52 - we hover over this the label is just
58:55 - going to be item. text so either it
58:58 - should be search notifications create
59:01 - profile or let's say home so this going
59:04 - to be the label and then the placement
59:07 - so let's say placement is just going to
59:10 - be right okay so when you hover over
59:12 - that it's going to be on the right hand
59:14 - side so we need to give a key to get rid
59:17 - of any uh react errors so we'll just say
59:19 - the index and so what should we have so
59:23 - margin left is going to be one and there
59:26 - is something called open delay when you
59:28 - hover over this it just open uh delays
59:31 - so you could put zero 1,000 anything
59:34 - else so we're going to put uh 500
59:36 - milliseconds so healthc so we'll say
59:40 - also display on base only show it when
59:44 - we are in the smaller screens and medium
59:47 - and above we don't want to see that
59:49 - because we already have the text uh next
59:52 - to it so that was it inside it is going
59:56 - to have a link okay so this is the tool
60:00 - tip that we just WRA it uh with the
60:03 - element that we would like to put inside
60:06 - so let's say it's going to have a link
60:08 - it's going to have a lot of props so
60:10 - let's go one by one so this going to be
60:13 - display flex and then two so it is going
60:18 - to take us to a link if there is any so
60:21 - say two and we're going to put something
60:23 - here but for now let just ignore this
60:25 - we'll say as rer link that we did
60:28 - previously and then align items not the
60:32 - content but align items to be Center so
60:35 - that they are vertically centered and
60:37 - we'll say gap of four and on the hover
60:40 - State let's say underscore hover another
60:43 - object background should be white Alpha
60:47 - let's say 400 and then below this we're
60:51 - going to have border
60:53 - radius of
60:55 - six and then after this border radius
60:58 - it's going to have the petting of two
61:01 - and let's say width should be 10 as well
61:04 - as the justify content should be on the
61:08 - base Center and on the okay that should
61:12 - be string let's say and on the medium
61:14 - and above it's just going to be Flex
61:16 - start and I will just cut this for now
61:20 - and then I'll will add it so that you so
61:22 - that you can see what's going on here so
61:24 - we're going to put the icon here which
61:25 - is going to be item. icon and after this
61:30 - icon next to each other we're just going
61:32 - to put the item text which you can put
61:34 - it into a box because we're going to add
61:36 - this display props so it is going to be
61:40 - on the base we're just not going to show
61:43 - it but on the so to say medium screens
61:46 - and above we'll just say block and into
61:50 - this box we're just going to say item.
61:52 - text and I think I think we can now save
61:55 - this do we have any errors let's see um
61:58 - okay so this two is going to take us to
62:00 - the link so if item has a link it is
62:03 - going to just take us to there but if
62:06 - this is not the case it is just going to
62:09 - be in the mull State um so yeah when you
62:14 - click to this search button it doesn't
62:16 - have any links so it is not going to
62:18 - take you to any page but if you click to
62:20 - this home icon it is going to take you
62:22 - to the home or if you click to this one
62:24 - is going to take you to this uh user
62:26 - page so we could save and let's take a
62:29 - look now and here we get okay in this
62:32 - one it should be so let's
62:34 - say um map we have a typo here it should
62:39 - be map and then okay now it works fine
62:43 - but we cannot see the icon um let's
62:46 - refresh
62:47 - again um let's see what's going on here
62:51 - so we constants it should be right um
62:55 - assets constants okay let's just rename
63:01 - this and we imported that somewhere else
63:04 - I believe um no it wasn't okay it's
63:07 - going to be the constants but it is not
63:09 - going to work again so let's see um um
63:14 - so why is not working let's just put
63:16 - full for the width maybe that should fix
63:18 - okay so we're just going to say then on
63:21 - the base and above it should be 10 but
63:24 - for the medium and above it's just going
63:26 - to take the full width of the parent so
63:29 - here we can see the icons but once we
63:31 - hit the medium break point which is um
63:35 - so you can see it from here
63:37 - 768 pixels it's going to be the medium
63:41 - and the sidebar shinks as well as we see
63:44 - all of these icons with the tool tip
63:46 - when we H over this and here do you see
63:49 - like it is not centered when you hover
63:52 - over this it is because if you just add
63:54 - this uh to here justify content on the
63:58 - base it's going to be Center but on the
64:00 - medium and above it's just going to be
64:01 - flag start so I'm going to save this and
64:04 - that should be working fine now it is
64:06 - Center and the last thing that we need
64:08 - to add into this sidebar is just going
64:10 - to be that uh the log out button at the
64:13 - very bottom that we can see here so it
64:16 - is almost going to be identical to these
64:18 - guys so I'll just go and copy this
64:22 - entire thing for now and and it is going
64:24 - to be after this Flex okay um I'm going
64:28 - to paste it so we don't have any key we
64:31 - can delete that for the label uh we
64:33 - could just say log out let say log out
64:37 - and the placement is going to be right
64:39 - it's going to have this margin left um
64:42 - so open delay and display on the base is
64:45 - going to be block on the medium screens
64:47 - and above it's just going to be none and
64:49 - for the tool link it is just going to
64:51 - take us to the let's say oath page each
64:55 - and for the icon we are just going to
64:58 - show this uh let me just copy and paste
65:01 - it this is another icon that is coming
65:03 - from uh react icons so we could import
65:07 - this from let's go up here react icons
65:11 - bi log out so we're going to go here and
65:14 - it doesn't have really any texts so we
65:17 - could just say log
65:19 - out log
65:22 - out okay so so I think this is going to
65:25 - work fine let's save and um okay so it's
65:29 - here but we just want to have it at the
65:31 - very bottom so if we just say margin Top
65:34 - Auto it is going to take it to the very
65:36 - bottom it's just going to push it so
65:39 - where should we add it um so it is this
65:42 - link or even yeah let's just add it to
65:46 - here let's say margin top is going to be
65:49 - uh Auto and there we go we just see that
65:53 - it the very bottom if you just shrink
65:55 - that and hover over this it is going to
65:58 - show us this tool tip when we click to
65:59 - that it's going to take us to the O page
66:02 - and everything now is working fine also
66:05 - this o page is responsive that we can
66:07 - see I forgot to show you guys so this
66:10 - wraps the sidebar component so let's
66:12 - just quickly reiterate what we did um
66:15 - here we created a page layout and the
66:18 - reason is let me just copy and paste the
66:20 - thing that I said previously so instead
66:23 - of creating
66:24 - so okay I'll just read it so instead of
66:27 - adding the sidebar component to every
66:29 - page we only added once to this page
66:32 - layout component and wrap the children
66:35 - with it so this way every page that is
66:39 - in our app jsx that we wrapped with the
66:42 - page layout is going to see that sidebar
66:45 - but except the oath page because we're
66:48 - checking if the path name is equal to
66:50 - the oath page then we're not going to
66:52 - show this we're just going to return
66:54 - null but if it is not the case then
66:56 - we're going to show the sidebar and on
66:59 - the smaller screens it is only 70 pixels
67:01 - wide and in the uh like the large
67:04 - screens it's going to be a little bit
67:06 - wider and the sidebar inside the sidebar
67:09 - we used a couple of items which was the
67:12 - home search notifications create as well
67:15 - as the profile and some of them had link
67:18 - and some of them didn't so the ones that
67:21 - had link when we click to them it's
67:22 - going to take us to the link page so to
67:25 - the homepage or to the user page and we
67:28 - use we see something called Avatar with
67:31 - chakra where we just put the source as a
67:34 - profile picture and with a name field
67:37 - that is going to be kind of fall back
67:39 - while this uh image loads okay I just
67:43 - put my name here and we have this size
67:46 - which is small and then we Loop through
67:49 - this uh sidebar items down below here
67:52 - for each of them we showed something
67:53 - called tool tip with some uh props so
67:57 - such as is this uh tool tip is going to
67:59 - has the arrow it's going to have some
68:01 - placement on the right open delay and
68:04 - we're only going to show it in the
68:05 - smaller screens and yeah so basically
68:10 - this is what we did so basically I can
68:12 - just save this file so that you guys
68:14 - have this comment here and then we're
68:17 - going to go into the app jsx inside to
68:20 - the homepage and we're just going to add
68:22 - our homepage content
68:24 - which is let's just go to the demo app
68:27 - to the homepage so on the left we have
68:29 - the sidebar but on the content we're
68:32 - going to have our feed posts and on the
68:35 - right we're going to have our suggested
68:37 - user component so let's start with the
68:39 - feed posts and then we're going to get
68:41 - into this uh suggested users component
68:44 - and if we think about the HTML structure
68:47 - for this we have something on the left
68:49 - and something on the right for this
68:50 - we're going to use flex and to put
68:53 - everything in the the center of the
68:54 - screen we're going to use container so
68:56 - I'll just go to inside the homepage I
68:58 - will change this with container okay and
69:01 - that also should be container and we can
69:05 - say that this container is just going to
69:07 - have the max width of um that should be
69:11 - container. large you can change this if
69:13 - you want maybe you could make like x
69:15 - large 2 x large 3 x large uh it doesn't
69:18 - really matter but the LG should be nice
69:21 - and then we're going to have a flex as
69:23 - res said so let's import this something
69:26 - on the right and something on the left
69:28 - so let's say this box is going to be for
69:29 - the suggested users and actually it's
69:32 - going to be feed posts right so feed
69:36 - posts and the next one is going to be
69:38 - the suggested
69:39 - users because the suggested users going
69:42 - to be on the right hand side and Feit PO
69:44 - on the left so this Flex is just going
69:47 - to have gap of 20 so that these guys
69:51 - have something in the middle like they
69:54 - they are separated and this box is going
69:57 - to have the flex of two adding y of 10
70:02 - and then this box is going to have the
70:04 - flex of three and margin right of 10
70:08 - actually 20 and then we're not going to
70:10 - show the suggested users below the large
70:13 - uh break point so we're just going to
70:15 - say display only in the base and above
70:19 - so it's I mean don't display so base and
70:21 - above it's going to be none but on the
70:23 - larger sus and above we'll just say
70:26 - block and then the max width is just
70:28 - going to be 300 pixels and lastly let's
70:33 - just say the border is going to be one
70:36 - pixel solid red this is temporary so
70:38 - that we can see that so this should be
70:40 - suggested users I'll just save this and
70:42 - let's give this a border as well I'll
70:45 - copy this paste this and I'll just say
70:47 - blue now let's go inside the homepage
70:51 - something on the left something on the
70:52 - right which is suggested users they have
70:54 - a gap of 20 and now that should be
70:58 - working fine we're going to first build
71:00 - the feed posts and now if you just
71:03 - shrink our screen once we hit the large
71:06 - break point we're not going to see the
71:07 - suggested user component right do you
71:10 - see and this is the exact same thing in
71:12 - our uh demo application when we hit that
71:15 - break point it just gone just like this
71:19 - so let's go inside the um so here we'll
71:22 - just create this comp component let's
71:24 - say feed posts and we're going to go
71:27 - inside the components let's say feed
71:29 - posts and it's going to have the feed
71:32 - posts. jsx and let's say rafc to get the
71:36 - boiler plate and then this is going to
71:39 - return a container as well so you're
71:42 - going to see why so basically it is just
71:45 - used to give some spacing so let's say
71:48 - container this should be and we could
71:51 - delete the react import and and we could
71:54 - say that maximum width for this is going
71:57 - to be just container. small and padding
72:00 - Y is just going to be 10 as well as
72:03 - pading X of two and here we'll just
72:06 - basically return a feed post a couple of
72:09 - times so which is going to be a
72:12 - component that we're going to create so
72:13 - let's say feed post four times and let's
72:16 - create that component and I'll just put
72:19 - it into the feed post folder because all
72:21 - of them are related so feed post jsx and
72:25 - I will get this so save and let me just
72:29 - import pet post which is coming from
72:32 - here and let's save this and also we're
72:35 - going to get the feed posts here okay so
72:38 - let's take a look we have feed posts
72:41 - they are on top of each other and we are
72:43 - going to change all of them with one of
72:46 - these posts okay so we could close this
72:49 - and then let's get into the feed post
72:51 - and how are we going to structure this
72:54 - first it's going to have this feed post
72:56 - header where we hold this button as well
72:58 - as profile picture username and the
73:01 - create that date and then we're going to
73:03 - have the feed I mean the post body which
73:05 - is going to be this image as well as the
73:08 - post uh footer which is going to have
73:11 - this uh icons the username likes and
73:15 - number of comments as well as this input
73:17 - and post button okay so let's go into
73:21 - here I'll will create all of them so
73:23 - let's say post Putter jsx and
73:29 - post header.
73:34 - jsx so see delete
73:39 - this okay inside the let's close them
73:42 - for now inside the feed post first we're
73:44 - going to just handle here so I'll just
73:47 - give a little bit space for me delete
73:48 - this one and then let's get into the
73:51 - work so first of all we'll just have the
73:53 - post header okay and we should be
73:56 - importing that uh it doesn't give us so
73:59 - post
74:00 - header okay we're going to just import
74:02 - it manually and then below this we're
74:04 - going to have the post body which we can
74:06 - just really put it inside the box which
74:08 - is going to be that image so let's say
74:10 - we're going to get a image component and
74:13 - it doesn't gives us for some reason
74:15 - let's say uh image from Chakra UI and
74:19 - then this image is going to have a
74:21 - source let's say uh Source image so
74:26 - let's see public we could just give this
74:28 - image one okay image 1.png and then alt
74:32 - we could just say user profile pick and
74:36 - then below this box we're just going to
74:38 - have the post
74:40 - footer so post footer I'm not sure why
74:43 - it doesn't gives us so post footer um
74:46 - okay let's say import post footer from
74:49 - here and then post header from here so
74:52 - if you just say save this now we should
74:54 - be seeing that and
74:57 - see okay we got the post image but now
75:00 - we need to add the post header so let's
75:03 - delete this borders as well we don't
75:05 - really need them it was for showing
75:08 - purposes so I'll just delete this and
75:11 - now we're going to go into the post
75:14 - header it's going to be here so as we
75:17 - said something on the left right so
75:19 - again let's take a look so this going to
75:21 - be the left hand side and this going to
75:22 - be the right hand side so we're going to
75:24 - have a flex with justify uh space
75:28 - between so let's get into here and
75:30 - delete this one so let's start with the
75:33 - parent Flex which we said that is going
75:35 - to have the justify content of space
75:38 - between and then it's also going to have
75:40 - the Align items Center so that it is uh
75:44 - centered vertically and then with let's
75:47 - say width of full and inside this Flex
75:50 - we're going to have one Flex which is
75:53 - going to be for the left side and then
75:55 - we're going to have one box for the
75:57 - right side for that button that follow
76:00 - unfollow button and inside this Flex
76:02 - let's say align items to be Center and
76:06 - then gap of two so Gap is just going to
76:09 - be two and this Flex is going to have an
76:12 - avatar on the left so let's say Avatar
76:16 - just import
76:17 - it and then Source could be again the
76:20 - same picture so image 1
76:23 - PNG let's say alt um so it should be
76:27 - user profile pick and then I think that
76:30 - should be it as well as the size of
76:32 - small and next to Avatar we're going to
76:35 - have a vertical stack we could say or we
76:38 - could basically use a flex because it's
76:40 - not going to be vertically stacked so
76:43 - inside this uh what should we say um so
76:46 - the username is going to be on the left
76:49 - and then the date is going to be on the
76:51 - left that we can see here right the
76:53 - username and then this uh create that
76:56 - date so inside the flex we could have
77:00 - the font size as 12 pixels font weight
77:04 - should be bolt and let's say gap of um
77:09 - two okay we'll just say gap of two and
77:12 - we're going to have the username let's
77:14 - just put the as a programmer and then
77:17 - below this we're going to have a box
77:19 - which is coming from Chakra as always
77:22 - and the color let's say it's going to be
77:24 - gray
77:26 - 500 and then we'll just have this thing
77:30 - that I'll just copy and paste okay it's
77:33 - just going to be one week now if we just
77:35 - save it like this um it's going to have
77:38 - one error I believe um okay so maybe we
77:42 - could just just give some uh spacing at
77:44 - the bottom so it is going to be this
77:47 - container we'll just say margin bottom
77:50 - or margin y of let's say two and that
77:53 - should be working nice and on the left I
77:56 - mean on the right we're going to put
77:57 - that button okay so it is going to be
78:00 - this box where we'll just say unfollow
78:04 - and it is going to have a couple of uh
78:06 - different props so first let's actually
78:10 - put this into a text so that it's just
78:13 - going to be semantic so import the text
78:16 - from Chakra and paste the unfollow of
78:18 - text into it into it and then this box
78:21 - is just going to have uh font size of
78:24 - let's say or maybe we could give it to
78:27 - the text so this is just going to have
78:29 - the cursor to be pointer and now this
78:33 - text is going to have the font size so
78:35 - let's say font size of 12 and then
78:41 - color blue 500 and then font
78:46 - weight
78:48 - alt and then hover is just going to be
78:50 - color white so I'll just say color color
78:53 - should be now
78:55 - white and we want to have some
78:57 - transition so I'll just say transition
79:00 - um so we could say 2 seconds is in and
79:06 - out so I will just save this now and
79:08 - let's take a look so we have the button
79:10 - when we hover over this we got this
79:11 - transition so as we can see and
79:14 - everything is working nice we have the
79:17 - header so what we did was one Flex on I
79:20 - mean one box on the left and another one
79:22 - on the right right and justify content
79:25 - space between and then here we basically
79:28 - did the same thing we have the avatar on
79:30 - the left and this guy on the right so
79:33 - we're going to get into the post footer
79:36 - now so inside the post uh we could
79:40 - actually close this and let's see inside
79:44 - the feed post okay we're going to have
79:46 - the post footer and we're going to just
79:48 - put the content now into this component
79:51 - so let's see how the footer is going to
79:53 - look like so it has this logos and then
79:55 - number of likes count and then the
79:58 - username as well as the description and
80:00 - then this com the count of comons as
80:03 - well as this uh input with the button on
80:06 - the right so let's go step by step just
80:09 - create all of them from top to bottom so
80:12 - let's open up here and then we're going
80:14 - to get into the post footer so I just
80:17 - want to have a empty fragment here so
80:19 - that we can return multiple children so
80:21 - let's say Flex
80:23 - and this is going to be coming from
80:25 - Chakra as always it's going to have the
80:27 - classic align items Center and then
80:31 - we're going to have the gap of four as
80:34 - well as the width full let's say width
80:37 - full we could just say padding top is
80:40 - going to be zero margin bottom of two
80:43 - and then margin top of
80:46 - Auto okay that should be working nice
80:49 - we're going to go into here first we're
80:50 - going to have a box that shows the like
80:53 - or unlike uh logo so for this we can
80:57 - create a state so let's say const
81:00 - because we're going to be changing this
81:01 - dynamically so liked set liked initially
81:04 - it's going to be false and then also we
81:06 - could have the number of likes we're
81:08 - going to use it in a second so let's say
81:11 - set likes count okay and initially let's
81:14 - say we're going to have uh maybe 1,000
81:18 - likes um we can just give it a little
81:21 - bit space
81:23 - and then inside this box we just going
81:25 - to say um if it is not liked okay in
81:28 - this case we're going to return a logo
81:31 - and if it is liked we're going to return
81:33 - another logo and this guy is going to be
81:36 - the
81:37 - notification notifications logo I
81:40 - believe yes so notifications logo which
81:43 - is coming from our assets and then here
81:46 - we're just going to have the unlike logo
81:49 - and if we just now import this when we C
81:52 - click to this box we would like to
81:54 - change the state so let's say on click
81:57 - we're just going to say that um maybe we
81:59 - should say
82:01 - handle um so let's say handle
82:06 - like this is going to be an eror
82:12 - function so if it is already a liked
82:14 - we're going to let's say if it is liked
82:18 - which means that now we're unliking this
82:20 - so we'll just say set liked to be false
82:23 - and we're going to just decrement the
82:25 - number of likes and in the else case
82:27 - we're just going to do the uh opposite
82:29 - thing so satellite going to be true and
82:33 - just increment it by one and now let's
82:36 - see what are we going to get when I
82:39 - click to this now it is liked and when I
82:41 - click to that again now it's unliked and
82:43 - let's have a cursor of pointer in the
82:46 - into this box so I'll just give some
82:48 - props let's say cursor should be point
82:52 - pointer as well as the font size of 18
82:56 - um that should be it for this one so it
82:59 - should be 18 um okay what is the error
83:03 - okay if you just save it's going to
83:05 - reformat this and then we're going to
83:06 - have another box that is going to hold
83:09 - the comment logo so I will import this
83:13 - guy from our assets as well and this box
83:17 - is just going to have the cursor to be
83:19 - pointer as well as the font size of a 18
83:23 - and below this I say 18 and then write
83:26 - 17 okay and then below this what are we
83:29 - going to have after this flag we'll just
83:32 - have the number of likes so import the
83:34 - text from Chakra so let's say
83:38 - likes which is going to be the count
83:40 - okay it's coming from the states and the
83:42 - string of likes and this Tex is going to
83:45 - have the font weight so let me just give
83:48 - a little bit of space for us font weight
83:51 - of uh what it should be so 600 as well
83:54 - as the font size small we could just say
83:58 - and then below this we're going to have
84:00 - a couple of text as well so maybe at
84:02 - this point I could just copy and paste
84:05 - it because it is not anything different
84:08 - than this guy so we'll just say for the
84:10 - username I'll just put my name so as a
84:13 - programmer underscore so let's see so we
84:17 - just have one text okay okay we have one
84:20 - text font size of small that gives the
84:23 - username and then L bit space and then
84:26 - another text maybe we could just have it
84:29 - that one space just like this so
84:31 - username and then the description of the
84:33 - post or the caption and then the number
84:36 - of uh comments so color of gray font
84:39 - size small and this is uh okay so here
84:42 - we have a text but it is not a paragraph
84:45 - instead it is a span because we're using
84:48 - as span but if you use a text normally
84:51 - without this as text T it is just going
84:53 - to be a paragraph now let's save and
84:56 - let's take a look here okay maybe we
84:59 - could just give a little bit uh space
85:02 - for this so it is going to be this uh
85:04 - icons
85:06 - container which one is this so margin
85:09 - top so it's Auto let's say U
85:13 - maybe
85:15 - two okay let's say
85:18 - four now it looks better and then below
85:22 - this
85:22 - uh number of Commons we're going to have
85:24 - an input which is going to be inside the
85:27 - flags so that we can use align items and
85:30 - GAP so here I'll go inside the post
85:33 - footer below the texts I'll just create
85:36 - another flex and this Flex is just going
85:39 - to have a couple of props so say align
85:41 - items to be Center and then gap of two
85:45 - um justify content let's say space
85:48 - between and then width of full let's say
85:52 - and now if you can see here we have
85:55 - inside an input we have a button for
85:58 - this we can use something called input
85:59 - group so let's say input uh maybe only
86:03 - input we going to see it here uh left
86:06 - and right elements so as you can see
86:08 - there is something called input group
86:10 - and we're going to be using something on
86:12 - the right so let's search for it if
86:14 - there is something called right element
86:16 - yes there is so this is what we're doing
86:19 - we're creating an input group and inside
86:21 - we're just putting the left element or
86:23 - the right element as well as the input
86:26 - so in our case we're going to be using
86:27 - the input right element so I'll just go
86:30 - to here inside the flex I will say
86:34 - input it should be U input group so I'll
86:39 - just import this and it's going to have
86:41 - one input as well as input right element
86:43 - so I'll just say um so input I'll just
86:47 - import this input and then variant of
86:51 - flashed
86:54 - so we say placeholder that is going to
86:56 - just say add a comment with three dots
87:01 - and then let's say font
87:03 - size of 14 pixels and below this input
87:07 - we're just going to have an input right
87:09 - element which I will copy and paste it
87:12 - and then that should be a not
87:15 - self-closing tag but rather just like
87:19 - this okay input right element is going
87:21 - to take something inside which is going
87:23 - to be a button so let's say this going
87:25 - to be the button that says let's import
87:27 - this from Chakra and import this one the
87:30 - button is just going to say post and
87:32 - button is going to have couple of props
87:34 - and or the Styles to's say so font size
87:38 - is going to be 14 and then it's going to
87:40 - have the color of blue 100 I mean blue
87:44 - 500 so let's see blue 500 and then font
87:47 - weight of 600 so I'll just scroll a bit
87:51 - font weight we 600 and then below this
87:54 - we'll just say cursor pointer and on the
87:57 - hover State we're going to change the
87:58 - color so let's say hover um we'll just
88:01 - say color should be white
88:05 - okay and then below the color we'll just
88:07 - say background should be transparent so
88:10 - whatever the uh background of the parent
88:13 - component and I believe this going to be
88:15 - it so let's save and let's take a look
88:18 - now that we have okay we cannot see the
88:20 - placeholder maybe we should change the
88:22 - color for this um let's take a look
88:26 - Place content no it's just going to be a
88:31 - placeholder okay it's working nice now
88:33 - we're just going to give a little bit of
88:35 - margin bottom so that we have some space
88:38 - so maybe that should be margin
88:42 - y h okay it's it is going to be for this
88:45 - so let say margin bottom or margin top
88:48 - it was and we could just say that maybe
88:51 - inside the a feat post um let's say
88:55 - margin y of
88:58 - 2 now that we have some spacing and
89:01 - below the post footer we're going to
89:03 - have it so we could just say box margin
89:08 - y of let's say four and now that should
89:12 - be working nice we have this um margin
89:15 - below each post and since we are uh
89:18 - rendering this four times that's why we
89:20 - are just seeing the exact same post but
89:22 - we're going to change it so let's say if
89:24 - the margin btom was 10 how it's going to
89:27 - look like okay now it's better let's say
89:30 - margin bottom of 10 so let's quickly
89:32 - rrate what we did we create the post uh
89:35 - header in the post body itself which is
89:38 - this image and then we have created this
89:40 - post footer with the input group element
89:43 - where we have something inside the input
89:46 - and we use the right element and now we
89:49 - can like this it's going to update the
89:51 - number of Lights as well as changing the
89:53 - icon and if we unlike that it's going to
89:55 - just decrement it and change the like
89:57 - icon and there is one thing that we're
89:59 - missing is that this image should have
90:01 - some border radius that we can see from
90:03 - our demo so it just has this border
90:06 - radius and for this we can go inside the
90:09 - feed post where we have this image this
90:12 - box is just going to have let's say
90:14 - border radius of four but if you just do
90:17 - this I think it's not going to work it's
90:20 - because now it's overflow the content
90:23 - and for this we'll just say overflow
90:25 - should be hidden so overflow is going to
90:28 - be hidden so that it doesn't so the
90:30 - image doesn't overflow this box so now
90:34 - that should be working fine as we can
90:35 - see here we have this uh radius corner
90:38 - so now every post has the same image
90:41 - same username um so the same Avatar and
90:45 - for this we could just change this by uh
90:48 - with props so for this we're going to go
90:50 - inside the feed post and we're just
90:53 - going to put the user name okay for each
90:56 - of them we're just going to do this so
90:58 - let me just give this cool spacing or
91:01 - formatting so for the username let's say
91:04 - for this this is just just going to be
91:06 - as a programmer and then we're going to
91:08 - give the uh so let me just take a look
91:11 - my notes so we're going to give the
91:13 - image username as well as the Avatar so
91:15 - I'm going to copy this and paste it and
91:18 - now I will just copy and paste all of
91:21 - them so so we're only adding this image
91:23 - field username as well as the Avatar so
91:26 - I will cut all of these and paste it so
91:30 - it is just the exact same thing we have
91:32 - the image username and then the Avatar
91:35 - so the image is going to be this content
91:38 - okay and the Avatar is going to be this
91:40 - one as well as the username so let's go
91:44 - inside the feed post and change it so
91:47 - we're going to take these props which is
91:49 - the image username and then the Avatar
91:53 - so we're using the uh Avatar as well as
91:56 - the username inside the post header so
91:58 - I'm going to just take this and put it
92:00 - inside here so let's say username and
92:04 - it's going to take the
92:06 - Avatar oops so it should be like this
92:11 - Avatar and inside the post footer we are
92:14 - only using the username so I'm going to
92:17 - copy this and then paste it here so for
92:20 - the source we are already getting this
92:23 - for the image we'll just say Source this
92:24 - is going to be the image and that should
92:28 - be working nice for the alt we could
92:29 - just put the username uh let's say uh
92:33 - username and for the Post header we're
92:36 - going to take the username and the
92:37 - Avatar so username avatar for the
92:41 - username we're just going to put the
92:43 - prop into
92:45 - here and then we're going to get the
92:47 - Avatar um it should be inside this
92:50 - source and I think that's it for this
92:53 - component we could save it so we have
92:56 - some errors okay that should be inside
92:59 - the Cur Braes right okay we have the
93:01 - username and then the this box and so
93:05 - we're going to close this and inside the
93:07 - post footer we're only getting the
93:09 - username so let's uh destructure this
93:13 - username I'm going to copy this and
93:15 - let's see it should be here I'll just
93:18 - say username now everything should be
93:21 - working fine we're going to go to the
93:24 - homepage okay so this is the first user
93:27 - if we just refresh and now we're getting
93:29 - the second one the third one the fourth
93:32 - one right so the jandoo Jano Josh as
93:37 - well as the Bak okay so we could see
93:40 - inside this we're giving this usernames
93:42 - and avatars which are coming from the
93:45 - public
93:46 - folder so these are the pictures that we
93:49 - can see and I hope now it makes sense
93:51 - since we are taking this destructuring
93:53 - it from here and pass it to the post
93:56 - header as well as the post footer and
93:58 - then just using it inside uh inside the
94:01 - source and inside this so let's say
94:04 - username as well as the Avatar and our
94:07 - application is still missing some
94:09 - feature that we have in our demo
94:11 - application so when we refresh we have
94:13 - this cool loading skeletons but in our
94:16 - case we don't have so how are we going
94:18 - to add this it's going to be inside the
94:20 - chakra they have this skeleton which you
94:22 - can just call it give some height or
94:25 - width so let's say width of
94:29 - maybe 100 pixels and there you go so
94:32 - this is the 100 pixels white and so so
94:36 - say like 20 pixels of height and then
94:39 - you can just put some uh HTML into that
94:42 - it's going to be contents wrapped and it
94:44 - it will not be visible so if I just copy
94:47 - this paste it multiple times the
94:50 - skeleton gets bigger and bigger but we
94:53 - don't see anything inside so this
94:55 - approach is really cool maybe we would
94:57 - be using this so now inside the feed
95:00 - posts we're going to go let's say close
95:02 - the footer and for each posts okay so
95:06 - here we just have a state so let say con
95:10 - is loading and set is loading and
95:14 - initially it is actually going to be
95:16 - true so when you first refresh the page
95:20 - the it's going to try to load the posts
95:24 - and after two seconds so let's say use
95:28 - effect I'm just initializing it after
95:32 - two seconds we'll just say set
95:36 - timeout 200 milliseconds we'll just say
95:40 - set loading to be false so first when
95:44 - you refresh the page it's going to
95:46 - loading state is going to be true for 2
95:48 - seconds and then it's going to be false
95:50 - and while it is loading loading we're
95:52 - going to show that loading skeletons so
95:54 - we'll just say if it is loading then
95:58 - just run this array four times so let's
96:00 - say zero 1 2 3 so it is going to map
96:06 - through this uh four times we are just
96:08 - going to get the item or we could just
96:11 - say underscore and then the
96:13 - index so now we're going to see what
96:15 - we're doing here so we're going to have
96:18 - our skeleton four times when it's
96:20 - loading so we'll just say vertical stack
96:23 - for this let's import
96:28 - it it should be coming from Chakra okay
96:31 - it's going to have a key with index so
96:33 - that we don't get any errors from the
96:36 - react and this is going to have the gap
96:38 - of four between each uh children align
96:42 - items let's say Flex start and then we
96:46 - give the key margin bottom is just going
96:48 - to be 10 so we're going to have one flag
96:51 - with let's import it with the gap of
96:57 - two and then we're going to have
96:59 - skeleton Circle so let's see if they
97:02 - have something like this circle and take
97:05 - skeleton so we're going to have this
97:06 - Avatar skeleton which is this one I'm
97:09 - just going to copy that and paste it
97:12 - let's import it the size is just going
97:14 - to be 10 and then we're going to have
97:16 - another vertical
97:20 - stack and then this is going to have the
97:23 - gap of two line items to be Flex start
97:29 - oops so it should be start and then
97:31 - inside this we'll just have two uh
97:33 - skeletons with the width of 200 pixels
97:36 - and height uh 10 pixels I'll just copy
97:38 - it paste it and let's import these guys
97:42 - okay I'll just indent them so like this
97:46 - and after this vertical stack and flex
97:49 - we're just going to have one more
97:50 - skeleton I will copy it and paste it and
97:55 - so it is just going to be this approach
97:57 - where we see um so it is this one so we
98:01 - just put some uh HTML into that and it
98:04 - just doesn't show us but instead it
98:06 - makes this more it it gives this
98:09 - skeleton Al bit height so we are going
98:12 - to say this is going to be width of full
98:14 - and height of 500 pixels now we are only
98:18 - going to show this feed POS if it is not
98:20 - loading so I'm gonna cut all of these
98:23 - for a second and I'll say if it is not
98:26 - loading then just return this react
98:31 - fragment and put them inside now this
98:34 - should be working as expected so I'm
98:36 - going to just refresh as we can see we
98:39 - have this like let's just make this true
98:42 - for a
98:45 - second and then let's say it's going to
98:47 - be
98:49 - false okay okay so here we just see four
98:53 - times of this um so say skeletons first
98:56 - we have the profile picture as well as
98:58 - the so is it the same
99:02 - here okay actually we should only have
99:04 - one right this doesn't make any sense so
99:07 - let's go to here um so we could just
99:10 - delete one of them and okay so that
99:14 - looks nice but I think Instagram has it
99:16 - like this so that's why I used it I
99:19 - believe so we're just going to have it
99:20 - like that
99:21 - and we have all of these skeletons and
99:24 - once it is changes the changes the state
99:27 - we show the feed posts so let's say
99:30 - contrl Z and yeah that should be working
99:33 - nice and it should be responsive as well
99:35 - if we just test it out I'll just open up
99:37 - my console and just shrink it now as you
99:40 - can see it just works nice up until here
99:43 - and then suggested user components uh
99:46 - just unmounts and it just works nice up
99:49 - until let's say
99:51 - here which is one of the smallest phones
99:54 - okay so now we are going to add the
99:56 - suggested users component for this we
99:59 - are going to go into the homepage let's
100:01 - see um we're going to delete this and
100:04 - let's say suggested
100:07 - users and I will just create this
100:09 - component inside this components folder
100:12 - so I'll say suggested users and this is
100:15 - going to have the suggested users. jsx
100:19 - as well as the
100:21 - suggested user. jsx so it's going to be
100:24 - the same approach we are going to create
100:26 - this um so the posts so here we just had
100:30 - feed posts and inside we just return
100:32 - each uh feed post right so we're going
100:34 - to have the suggested users component
100:36 - here and then we'll basically return
100:38 - multiple suggested user and let's get
100:41 - this one as well I will delete the react
100:43 - import save it delete this one save it
100:46 - and let's import this guy and also we're
100:49 - going to have something called
100:51 - suggested header and I'll just explain
100:54 - in a second let's say
100:56 - rafc import I mean delete this import
100:59 - react because we're never going to be
101:01 - using this and it is not um so to say it
101:04 - is not required uh anymore in react so
101:07 - we're going to just delete this and save
101:08 - it and save here so the suggested user
101:12 - header is going to be this one where we
101:14 - see our profile okay we have the logout
101:17 - button profile picture as well as the
101:19 - username um so let's do create this one
101:21 - first and we're going to go into the
101:24 - let's say the suggested users um I'm
101:28 - just taking taking a look at my notes so
101:31 - we're going to just delete here and then
101:33 - we're going to have a let's say vertical
101:36 - stack because it's going to be in the
101:39 - stack format so let's say pading
101:43 - y of 8 and then we're going to have
101:46 - petting X of six as well as the gap of
101:49 - four and and then so that should be a
101:52 - vertical stack and now we're just going
101:55 - to have the suggested header first then
101:58 - we're going to have a couple of
102:00 - suggested user but before that we're
102:03 - going to actually have this text which
102:06 - says suggested for you and see all okay
102:09 - so let's first create this header and
102:12 - then we'll just go step by step so I'm
102:14 - just going to takeing I'll just take a
102:17 - look at my notes again so inside the
102:19 - suggested header uh we already imported
102:22 - this let's save and we're going to
102:24 - create this content so first we'll just
102:26 - have a flex okay let's import this it is
102:29 - going to be the justify content space
102:33 - between and why is this let's take a
102:36 - look so we have this should say spacing
102:39 - between these guys so that's why we're
102:42 - using justify content space between and
102:44 - then we're just going to align them
102:46 - vertically so align items Center and
102:49 - then let's say with
102:51 - of full so for the right hand side we'll
102:55 - just have one Flex which is going to be
102:57 - taking that Avatar as well as the
102:59 - username so at this point is pretty
103:01 - basic I'll just copy and paste it and
103:04 - just walk you through and this Flex is
103:07 - going to have the Align items to be
103:10 - Center as well as the gap of two okay so
103:14 - what we did here was to just create a
103:16 - flex and put the left child and the
103:19 - right child Avatar has this name as well
103:21 - as this size and the source goes into
103:24 - the profile picture.png which is this
103:27 - one and then on the left I mean on the
103:30 - right we have this box which just holds
103:33 - our username and maybe that should be a
103:36 - text so that we'll just get the
103:38 - paragraph and it will be more semantic
103:41 - so we could delete this box for now and
103:44 - that should be working nice so below
103:46 - this Flex we're just going to have that
103:48 - link that says log out so I'll just
103:51 - import this from Chakra and this link is
103:54 - going to be uh so to say import
103:59 - link so it's going to be rendered as
104:02 - router link I was trying to say so we'll
104:06 - just copy this router link as we did
104:08 - before so as router link is going to
104:11 - take us to the oath page so let's say SL
104:15 - oath and then it's going to have a
104:17 - couple of styles which I will again copy
104:20 - and paste because at this point it just
104:22 - doesn't any make the sense to write the
104:24 - font size font weight and color so it is
104:27 - not going to have this text decoration
104:29 - of none so let's just delete and we're
104:31 - going to paste in a second so let's say
104:34 - the content is just going to be log out
104:37 - if I save this and we're going to go
104:39 - into here so we see this header and when
104:43 - I hover over this it has this you know
104:46 - uh the underlining text and I don't
104:48 - really like this so I will just contrl +
104:50 - z which is going to be this style of
104:54 - text decoration is going to be none
104:56 - let's say log
104:58 - out and now when we hover over to this
105:01 - we're not going to see that uh
105:03 - underline and that is going to be it for
105:06 - the suggested header now we are going to
105:09 - build the next thing which is going to
105:11 - be that uh that text as suggested for
105:14 - you and see old so below this we just
105:17 - have one Flex again let's import this
105:20 - this Flex is just going to have the
105:22 - Align items to be Center so that we have
105:26 - vertical alignment and then justify
105:28 - content again was going to be so what
105:31 - should we add here okay I heard that you
105:33 - said space between so I'll just say oops
105:37 - I can type so we say
105:40 - space between okay it is because we
105:44 - would like to have some space between
105:46 - this guy and then this guy so we're
105:48 - going to go here just by cont content
105:50 - space between and then width should be
105:53 - full and then on the left hand side I'll
105:57 - just actually copy and paste again it
106:00 - doesn't make any sense on the left we
106:01 - have one box font size of 12 font weight
106:05 - bolt this color and that should be maybe
106:08 - a text that would be better so let's
106:11 - just delete this and this is the left
106:14 - side and now we're going to add the
106:15 - right side I'm going to copy and paste
106:18 - that is going to be a text again um so
106:22 - maybe we should just okay it says see
106:25 - all font size of again the same point we
106:29 - bolt hover we are just changing the
106:31 - color and cursor is just going to be
106:33 - pointer so that we have that button
106:35 - feeling now if we just take a look that
106:38 - should be looking the exact same and
106:41 - below this we're just going to add all
106:43 - of our suggested user components okay
106:46 - one by one so after this Flex
106:51 - we'll just say suggested user and we're
106:54 - just going to be calling this let's say
106:56 - three or four times okay we have three
106:58 - times and that should be working nice
107:01 - and Below all of these we'll just have
107:03 - this buil by and you can just put your
107:06 - name it's completely okay and I'll just
107:08 - put mine and I'll just go here so let's
107:11 - just give a bit space I'll have a box
107:14 - let's import this uh I think it's just
107:16 - going to have a couple of different
107:18 - props let's say align
107:21 - self start so that so we set that align
107:24 - items to be Center um to this so let's
107:27 - see is it inside this Flex okay let's
107:30 - just delete this and I don't know why we
107:31 - added this we're going to see okay bug
107:34 - um we'll have font size of 12 and then
107:39 - color of gray 500 and also the margin
107:43 - top is just going to be five so that we
107:45 - have that spacing and then inside this
107:48 - box we're just going to say I'll just
107:50 - copy and paste one line okay just say
107:53 - this uh copyright icon built by and just
107:57 - give a space and then one
108:00 - link that takes you to your YouTube
108:03 - account or your GitHub LinkedIn whatever
108:06 - that is so I will import this from
108:09 - Chakra let's say and Target blank so
108:12 - that it's going to open this in a new
108:13 - tab color as well as defont size and
108:16 - then you could just put your name now
108:18 - let's save and let's take a look
108:20 - um okay that should be working
108:24 - fine here okay that's why we added the
108:26 - allign self Center I mean start now it
108:29 - is centered in the in this container so
108:33 - if we just say that this box going to be
108:36 - align self to the
108:39 - start it is just going to be at the very
108:42 - left starting from here until the end
108:45 - and if I click to this it'll take me to
108:47 - my YouTube page and now we're just going
108:49 - to get into this suggested user
108:51 - component so it's going to take a couple
108:53 - of props it's because as you can see
108:55 - like the number of followers the
108:57 - username and the profile picture is
108:59 - different for each of them and we're
109:01 - going to be solving this by using props
109:04 - so let's go here and I will just put a
109:08 - couple of props and let me just take a
109:10 - look at my notes so the name for this
109:13 - guy let's say name prop we're going to
109:17 - give something like Dan abov okay and
109:20 - followers count as well as the Avatar
109:23 - profile picture so I'm just going to say
109:25 - like this we give the name followers and
109:28 - avatar for this suggested user which we
109:30 - can grab it like this so number of
109:34 - followers name and then the Avatar okay
109:38 - we're going to just be doing this for
109:40 - these two guys as well so I'm going to
109:42 - copy it and paste it you can grab this
109:45 - from the repo or just type it manually
109:48 - so we have the Ryan this uh number of
109:51 - followers with this uh profile picture
109:54 - and we have Christian with this
109:55 - followers and this profile picture so
109:58 - I'm going to save this component and
110:00 - inside the suggested user we're just
110:02 - going to be using all of them uh here so
110:05 - first let's just change it with this
110:07 - Flex import from Chakra we're going to
110:10 - have one Flex on the left and one button
110:13 - on the right so we could just say Flex
110:17 - so what should we use now so we have
110:19 - some space between so what are we going
110:21 - to
110:23 - use justify content space between and
110:27 - then here we'll just say align items
110:29 - Center so that it is vertically centered
110:33 - let's say width is just going to be full
110:36 - of the parent and then we are going to
110:38 - have one Flex on the left and then one
110:41 - button on the right and this button is
110:45 - just going to say follow or unfollow
110:47 - okay so inside this Flags we're going to
110:50 - have Avatar so let's say Avatar and
110:54 - maybe we could just delete
110:57 - this source is going to be the Avatar
111:01 - that is coming as a prop also we'll just
111:04 - have the name as name let's say and then
111:09 - what should we have lastly just going to
111:11 - be the size of medium and this flag is
111:14 - going to have align items to be Center
111:18 - as well as the gap of four or let's say
111:21 - two and then below this Avatar we're
111:24 - going to have one vertical stack it is
111:26 - because let's see uh these two things is
111:30 - just on top of each other and they have
111:31 - some Gap so you could use box as well
111:34 - but I'll just use vertical stack so that
111:38 - I can use the spacing property okay
111:41 - let's import the vertical stack I'll
111:42 - just say maybe spacing of two and on the
111:47 - top we'll just say
111:48 - box let's get this so this is just going
111:52 - to be say font size of 12 and then the
111:57 - font rate of
112:00 - Bolt so number of followers I'm sorry
112:04 - should be the name and then below this
112:05 - we're just going to have the number of
112:07 - followers I'll just copy paste this is
112:10 - going to be font size of 11 and then
112:13 - color just going to be the gray of 500
112:18 - and this going to be the number of
112:20 - followers and we could give the number
112:23 - of followers and then text that says
112:25 - followers okay and I think that should
112:28 - be working fine let's see and in the
112:30 - button I will just say now let's have a
112:33 - state for this const is followed and set
112:38 - is followed initially it's just going to
112:40 - be false when we clict that we're going
112:41 - to change this state so let's say um if
112:45 - it is followed then just say unfollow
112:51 - but in the else case let's say follow
112:54 - and this button is going to have a
112:56 - couple of properties let's say font size
112:59 - of 13 and then BG transparent it should
113:03 - be a string let's
113:05 - see um let's say
113:08 - transparent and then after this PG we're
113:11 - going to have petting of zero height of
113:14 - Max content and then after the height
113:18 - we'll just have font weight of let's say
113:20 - medium not the bolt let me just scroll
113:23 - to give a bit space and then here I'll
113:26 - just say color of blue 400 I'll get this
113:31 - time and after the color we'll just have
113:33 - the cursor to be pointer as well as on
113:35 - the hover State we'll just change the
113:38 - color um to be I believe it's going to
113:41 - be white so let's say white and lastly
113:45 - on clict this function we're just going
113:47 - to negate this uh state so inside this
113:51 - Arrow function say set is followed
113:55 - whatever the value is just negate it if
113:57 - it was true it's going to be false and
113:59 - vice versa now let's test it out to see
114:03 - if that is working nice and there we go
114:05 - okay this is the demo let's see here um
114:08 - so yeah we have this follow buttons and
114:11 - this should be let's say align self
114:14 - start so that it is not in the center
114:17 - but it is on the starting from the very
114:19 - left
114:20 - so for this we could use in the vertical
114:23 - stack let's say align items to be flags
114:28 - start is this going to work yeah it is
114:31 - working now when we click to this follow
114:34 - state is going to be um I think yeah
114:37 - it's going to be true and the text is
114:39 - now going to be unfollow and if we click
114:42 - that again it's going to be follow and
114:43 - we can just use this for all of them and
114:46 - it's going to be working nice and if we
114:48 - just take a look if this is respon
114:49 - responsive or not and up until here it
114:52 - is responsive and then it is just uh
114:55 - disappearing so it is perfectly fine so
114:58 - yeah it's just looking awesome and this
115:01 - is going to be it for the homepage now
115:03 - we can go ahead and work with on the
115:06 - profile page but before that let's add
115:09 - our title as well as this Fab icon for
115:12 - this we can go into the index HTML let's
115:15 - just shrink everything and close it so
115:18 - inside the index.htm ml we can change
115:20 - the title I'll just say Instagram clone
115:24 - you can just put whatever you want and
115:26 - for the uh icon we can go inside the
115:29 - public folder and choose this Fab icon
115:32 - so I'll just change this with f fav
115:36 - icon. Ico and now if you just save this
115:39 - that should be working fine that we can
115:41 - see here so now let's just go ahead and
115:44 - try to add this user page so for this as
115:48 - always we're going to go into the app
115:50 - jsx and duplicate this route now since
115:54 - the user page is going to be dynamic
115:56 - okay we'll just say uh we put this
115:58 - column and then whatever we want so in
116:01 - our case it's just going to be username
116:03 - but you can put user ID and anything
116:05 - like that but in our case it's just
116:08 - going to be username and the page is
116:11 - going to be the profile page which we're
116:13 - just going to create in a second so the
116:15 - pages another folder called profile page
116:19 - and inside we are going to have profile
116:22 - page.
116:26 - jsx okay so here I'll just import this
116:30 - save and there we go we can see the
116:32 - profile page now what are we going to uh
116:34 - have here is that we're going to have a
116:36 - container large that we can see
116:38 - everything is in the center and we're
116:41 - going to have this profile uh header
116:44 - okay this is profile header and then
116:46 - profile tabs and then the profile posts
116:49 - so we're going to have two flags one at
116:52 - the top that is going to hold the header
116:55 - and then one at the bottom that is going
116:57 - to hold the tabs as well as the posts so
117:00 - we're going to go here inside the
117:02 - profile page and as we said we're just
117:05 - going to have a container uh we can just
117:08 - delete this and
117:09 - complete like this okay so here this is
117:13 - going to has a max width okay say let's
117:16 - say Max width if I can type
117:20 - it's going to be container
117:22 - large and it's also going to have the
117:25 - petting y of five and inside this we're
117:28 - going to have two flexes the one is
117:30 - going to be holding the profile header
117:32 - and then the second one is going to have
117:33 - the profile tabs and dsts so let's say
117:38 - this Flex is going to be ping y of 10
117:42 - and then ping X of four let's say and
117:45 - ping um okay actually ping left is just
117:48 - going to be
117:50 - uh base of four and medium and above is
117:53 - just going to be 10 and I think that
117:56 - should be okay so the maximum width for
117:59 - this Flex uh let's say Max width or
118:01 - let's just say width is just going to be
118:04 - full and then we'll say margin X of
118:08 - Auto and also it's just going to be Flex
118:11 - direction of column so let's say it's
118:14 - going to be column and then here we'll
118:16 - just have the profile uh not the page
118:20 - but let's say profile header which is a
118:24 - component that we're going to create in
118:25 - a second and then here we'll just have
118:28 - the tabs let's say profile tabs and also
118:34 - the profile
118:39 - posts let's create these components so
118:42 - inside the components we can just create
118:45 - a profile and we're just going to put
118:47 - every component that is related to
118:49 - profile into this folder so let's say
118:52 - profile header. jsx and let's say
118:56 - profile
118:58 - tabs. jsx as well as the profile
119:02 - posts. jsx and the single post profile
119:06 - post. jsx now let's say RFC to all of
119:10 - them
119:18 - okay
119:21 - now let's import the header and let's
119:23 - say profile
119:28 - tabs posts um
119:32 - okay okay now that should be fine I will
119:36 - get some prop props into this Flex as
119:38 - well let's say a ping X of base
119:44 - two and Med small of four let's say and
119:48 - Max where WID let's say this is just
119:50 - going to be full width and then margin X
119:57 - Auto border top it's going to have one
120:00 - pixel
120:02 - solid and then border color just going
120:06 - to be white Alpha and
120:11 - 300 and then the direction is just going
120:13 - to be colume let's
120:15 - say okay now we can save this and we're
120:18 - going to work with the profile header so
120:21 - let's just close this for now and if we
120:23 - just take a look we can see the profile
120:26 - header with border and it holds the
120:28 - profile tabs as well as the profile
120:31 - posts so we're going to go and work with
120:34 - the header so the profile header is
120:36 - going to have two two things now on the
120:39 - left it's going to have this profile
120:40 - Avatar and then on the right this
120:42 - content so we can say flex and then on
120:45 - the left put the avatar on the right put
120:48 - the content which can be a vertical
120:50 - stack because everything is in the
120:52 - vertical um in the vertical Direction so
120:55 - we're going to go ahead and here we'll
120:58 - just say this should be a flex and we're
121:01 - going to have
121:03 - avatar on the left but this is not going
121:05 - to be an avatar actually it's just going
121:07 - to be Avatar group and let's see what
121:10 - that is from the chakra and we're going
121:13 - to say Avatar and we have a group here
121:17 - and it just gives you this kind of
121:18 - border that we use here if you use
121:21 - Avatar you're not going to get this
121:22 - border that's why we're using it and
121:25 - let's go here uh we're going to import
121:28 - this and this Avatar group has a couple
121:30 - of props but before that let's add this
121:32 - Flex props so the Gap is going to be on
121:36 - the base four on the small it's just
121:38 - going to be 10 and now this is going to
121:40 - have some padding y of 10 and then
121:43 - direction is going to be uh on the base
121:46 - it's going to be colume but on the small
121:49 - and above it's just going to be row
121:52 - which is the default for the flex and
121:54 - then Avatar group is going to have some
121:56 - props let's just put it um size it's
122:00 - going to have a couple of different
122:01 - sizes so let's say for the base it's
122:04 - going to be uh x large and then for the
122:08 - small uh actually let's say medium and
122:11 - it's just going to be 2 x large okay so
122:13 - after this size it's going to be justify
122:16 - self of Center and then align self Flex
122:21 - start as well as the margin X is just
122:25 - going to be
122:27 - AO okay inside we're going to have our
122:30 - Avatar and this is going to be where we
122:33 - put our source so let's say source for
122:36 - the name I'll just
122:37 - say as a
122:40 - programmer and the source is just going
122:43 - to be uh okay profile picture.png and
122:49 - now that should be working fine also
122:51 - let's add an ALT um so what is the
122:55 - problem okay that should be name
122:57 - actually not the source and ALT is just
123:00 - going to be as a programmer logo okay um
123:05 - after the Avatar group we're going to
123:07 - have the right hand side which we said
123:10 - that it could be a vertical stack let's
123:12 - import it and it's going to have a
123:14 - couple of different props let's say
123:16 - align items to be sent actually we start
123:20 - and then the gap of two margin X is
123:24 - going to be Auto as well as the flex of
123:27 - one so it is going to uh just contain
123:30 - the remaining part after the uh Avatar
123:33 - group okay so this is going to have one
123:36 - Flex okay and we're going to add a
123:39 - couple of different props so let's say
123:41 - Gap is going to be four direction is
123:43 - just going to be again on the base
123:46 - colume and on the other side like small
123:50 - and above it's just going to be Row And
123:53 - as far as for the justify content we're
123:55 - going to be doing the same thing so
123:57 - we'll just have two different values for
123:59 - the base this is going to be Center on
124:01 - the small and above it's going to be
124:03 - Flex start and after the justify content
124:07 - we'll say align items to be Center as
124:10 - well as width of full and now we're
124:13 - going to hold the username as well as
124:15 - that edit profile button so let's say
124:18 - one text okay import it um let's say
124:23 - let's say as a programmer and underscore
124:26 - so text is going to be font size of say
124:30 - it's going to have a couple of different
124:31 - values for the base it's going to be
124:33 - small and for the medium and above is
124:36 - going to be the large font size and that
124:39 - should be okay now let's save and let's
124:41 - take a look so we have the profile I
124:44 - mean the username and then the profile
124:46 - avatar on the left Okay so we are going
124:49 - to add this edit profile button so after
124:52 - the text we can put a flex here and
124:55 - let's just give a little bit space like
124:58 - this and this Flex is going to have gap
125:01 - of four and then align items to be
125:04 - Center as well as the justify content
125:08 - Center and then inside this Flex we're
125:11 - going to have a button that says edit
125:13 - profile so that should be button from
125:15 - Chakra okay
125:17 - edit
125:19 - profile and for the button properties
125:21 - this is going to have the background of
125:23 - white and color of black and on the
125:27 - hover State we are just going to change
125:29 - the background so let's say hover it's
125:32 - going to take another object with BG is
125:35 - being white Alpha
125:37 - 800 and then after this we going to just
125:41 - change the size on the base is going to
125:43 - be X small and for the medium okay let's
125:46 - say comma medium it is going to be small
125:48 - size and that should be it that should
125:51 - be it for the button and after this
125:53 - button after this flex and after this
125:55 - Flex we're going to have one more Flex
125:58 - which is going to be holding the number
125:59 - of posts followers and following count
126:02 - so let's say this Flex is just going to
126:04 - have align okay Flex um
126:09 - align items to be Center and the Gap is
126:14 - just going to be on the base two and on
126:17 - the small it's going to be before let's
126:19 - just scroll a little bit and then we're
126:22 - going to have one text that is that says
126:24 - like posts but we need to show the
126:27 - number of posts and for this we need to
126:29 - highlight it and I will use a text and
126:32 - I'll just say this should be as a span
126:36 - okay span tag and font weight of Bolt
126:41 - and let's say margin right of one and it
126:44 - says let's say four posts and now we can
126:47 - basically just copy and paste this a
126:49 - couple of times so this is going to hold
126:51 - the number of
126:53 - followers and then this is going to just
126:56 - hold the um let's say 149 and let's just
127:02 - duplicate this again I'll copy and paste
127:04 - it and this is just going to say
127:06 - following and maybe we could just say a
127:09 - random number say 175 and now if you
127:12 - just save this let's take a look so this
127:14 - is the result that we get and below this
127:17 - what are we going to have let's see the
127:19 - username itself as well as the
127:21 - description or the biography so we're
127:23 - going to go into our uh vs code and
127:27 - after the following count okay after the
127:29 - text after this Flex we're going to have
127:32 - another Flex that says Al line items to
127:35 - be Center and then the gap of four below
127:40 - this what are we going to have one text
127:42 - that is going to be holding the username
127:44 - let's say as a programmer and then this
127:47 - text is is going to have font
127:50 - size of small and font weight of let's
127:55 - say bolt and below this uh flx we're
127:59 - going to have one more text I'll just
128:00 - duplicate it and take it here um font
128:05 - size of small we could just delete this
128:07 - which is going to be the biography and
128:09 - I'm just going to copy and paste it so
128:12 - tutorials that are meant to level up
128:15 - your skills as a programmer now we just
128:17 - save and that should be working fine as
128:19 - far as for the um the profile header and
128:23 - if we just shrink our screen let's see
128:26 - uh after the small breakpoint okay it is
128:29 - not working at this point so maybe we
128:33 - could just make the font a bit smaller
128:36 - as we have here so for this we're going
128:38 - to go again back to here and let's see
128:41 - so for every text we are just going to
128:43 - make this a little bit smaller font size
128:46 - so let's say font size and on the base
128:50 - it could be X small small and on the
128:52 - medium we'll just say it's going to be
128:54 - small and I will copy this and paste it
128:58 - to here as well as here which holds the
129:01 - following count and followers as well as
129:03 - the posts so save and let's take a look
129:06 - again okay now that should be working
129:08 - properly so at this point it is going to
129:11 - go okay is each each rings and then here
129:15 - it it goes again to the very bottom so
129:18 - now that's that is working up until 300
129:20 - pixels now we're going to add the
129:22 - profile tabs and then the posts so let's
129:25 - work with the profile tabs so the
129:28 - profile tabs is going to be relatively
129:30 - basic because if we just take a look at
129:32 - the demo so we just have these three
129:35 - guys and they are next to each other so
129:37 - we could use flex and just give a little
129:39 - bit gap between them so one Flex with
129:42 - three children so we'll just say flex
129:45 - and let's import it we're going to give
129:47 - a couple of props let's say width is
129:49 - just going to be full and then the
129:51 - justify content to be
129:54 - Center and then the Gap is going to be
129:57 - on the base four and then on the small
130:00 - is going to be 10 smaller and above the
130:02 - Gap is increased and then text transform
130:05 - so it's going to be uppercase and lastly
130:07 - the font weight is just going to be bolt
130:10 - inside the flex we're going to have
130:12 - three uh children so one flex two Flex
130:15 - three flexes okay the first one is just
130:18 - going to have a border top of one pixel
130:22 - solid white and let's go inside and it's
130:26 - just going to have um let's say
130:30 - box let's import the box it's going to
130:33 - have font size of 20 and then this box
130:36 - is going to be holding one icon which is
130:39 - BS grid
130:41 - 3x3 and it is coming from react icons so
130:44 - let's import it from so let's say import
130:49 - um BS okay it already gives us this
130:52 - suggestion and that should be working
130:54 - fine below this we're just going to have
130:56 - one text that says posts and import the
131:00 - text it is going to have the font
131:03 - size font size of 12 and display of on
131:08 - the base you're not going to show the um
131:11 - post uh text so on the base it's just
131:13 - going to be none on the smaller screens
131:16 - and above it just could be block and
131:20 - that should be it but we need to add a
131:22 - couple of props here as well so let's
131:24 - say align items Center and then we're
131:27 - going to have ping
131:29 - three on all directions on the four
131:32 - directions and then gap of one the
131:35 - cursor is just going to be pointer oops
131:41 - cursor okay so that was the first child
131:44 - actually we're just going to we can copy
131:46 - this okay and just delete the these guys
131:48 - and we're going to just duplicate that
131:50 - twice so one and then like the second
131:54 - one and this these are not going to have
131:56 - border top we could delete that because
131:59 - if we just take a look at the demo only
132:01 - this guy uh looks like it's active so we
132:05 - can that's why we're just deleting
132:06 - deleting this border tops I cannot talk
132:09 - clearly and then here we're just going
132:12 - to change the icons as well as the text
132:15 - so after the post we had the
132:18 - saved and then the let's say
132:22 - likes now you could put uh reals which
132:26 - Instagram has but in our case just save
132:28 - should be okay and as far as this uh
132:32 - icon we'll just say
132:34 - BS uh bookmark it should be we're going
132:38 - to just put this and then the last one
132:40 - is going to be
132:42 - BS sweet heart and for the size actually
132:47 - the font weight let's say it's going to
132:51 - just be
132:52 - bold and I think now we can save this
132:55 - and that should be working fine and okay
132:58 - it is not working let's just
133:01 - refresh okay so it is almost the same
133:04 - thing that we have here now we're going
133:06 - to go and work with the profile posts
133:08 - which is going to be one of the longest
133:10 - uh part because um it's going to have
133:13 - this model when you click to that it
133:15 - looks pretty complicated on the left we
133:17 - have the image
133:18 - so like uh the common section the footer
133:22 - section as well as when you shrink that
133:25 - uh it is also responsive so we need to
133:27 - take care of it and then it's also going
133:29 - to have this loading
133:31 - skeletons okay in the first load so
133:35 - let's go ahead and try to implement this
133:39 - it is going to be here in the profile
133:41 - posts and we're going to just have the
133:43 - exact same behavior or the approach
133:45 - where we just did in the feed posts so
133:48 - let me just open that up so here we're
133:51 - going to have a loading state with the
133:53 - use effect after 2 seconds we're going
133:55 - to say is loading should be false and
133:57 - while it loads we're going to show our
133:59 - skeletons but if it is not loading then
134:02 - we're just going to show our posts okay
134:04 - but it is not going to be the feed post
134:06 - instead it is going to be the profile
134:08 - post and I think we have already created
134:11 - it so let's see here okay it's going to
134:13 - be this profile post and yeah okay and
134:17 - it's going to take some s so let's close
134:20 - maybe everything the profile header tabs
134:23 - um app and then index HTML so we can
134:26 - open up the profile post as well then we
134:28 - can start to working so here um let's
134:33 - delete everything and then here we'll
134:34 - just import the profile post maybe four
134:37 - times and before we import that we just
134:40 - need to just put a grid here so it's
134:42 - going to be the grid uh component or the
134:45 - grid container that is going to hold the
134:47 - grid items so why are we using grid it
134:51 - is because like we're just going to have
134:53 - three of them at the same uh at the same
134:56 - width so we can use fractions for this
134:59 - and once we hit the small break point it
135:02 - is just going to be one fraction so the
135:06 - entire width so it is okay to use grid
135:08 - for this and you can check for it from
135:11 - the documentation as well so here we
135:14 - have grd and GD item and GD is going to
135:16 - be the contain the grid item is just
135:19 - going to be each child so here we can
135:22 - see they they are using this template
135:24 - columns which determines how many times
135:27 - uh it's going to be in the same row if
135:28 - we just say four times like this it's
135:31 - going to have four times and then it's
135:33 - just going to repeat if we just add two
135:35 - then on the each row it is going to have
135:38 - two columns and then again and then
135:40 - again so on and so forth so this is what
135:43 - we're going to be doing and we can give
135:45 - a gap column Gap and anything so let's
135:48 - go here inside this grid we're going to
135:51 - have this template columns but in our
135:54 - case it is going to be responsive so
135:56 - that's why we're just going to put an
135:57 - object and let's go to bottom on this
136:00 - small we'll just say repeat and let's
136:03 - say on the smaller it's just going to
136:05 - have one okay it's going to just take
136:07 - the full width and then on the medium
136:10 - we're just going to repeat three times
136:12 - so let's say repeat and I'll just Auto
136:14 - accept this and change it to the three
136:17 - and the Gap could be one I think this is
136:19 - going to be the uh row Gap but we want
136:22 - to also give the column Gap we could say
136:24 - one as well and we're going to have a
136:27 - loading state for now maybe we could
136:29 - ignore this um or actually let's just do
136:32 - it right now so as always we're going to
136:35 - say const is loading or maybe you could
136:37 - just pause the video here and just try
136:39 - to implement this because we already did
136:42 - this so set loading initially is going
136:44 - to be true and now what are we going to
136:47 - have here yes we're going to have a use
136:49 - effect let's initialize it on the on
136:52 - Mount and we're going to have set time
136:55 - out after 2 seconds we're just going to
136:58 - update it to be false that should be 200
137:01 - milliseconds and then we are going to
137:04 - say inside this grid if it is loading
137:07 - let's say if it is loading then we just
137:10 - want to um okay and and so we're going
137:14 - to have uh let's say six items okay 1 2
137:19 - 3 4 5 6 do map and we're going to get
137:23 - each item as well as the
137:26 - index we're going to return some loading
137:29 - skeletons so I'll just say vertical
137:32 - stack for this so let me just take it
137:35 - vertical stack and import it it is going
137:39 - to have this key as the index and then
137:42 - inside this vertical stack we're just
137:44 - going to have one skeleton let's say and
137:47 - import this we could just put a box with
137:51 - uh 300 pixels so box height of did I say
137:57 - width that should be height okay height
138:00 - 300 pixels I will import the box and we
138:04 - could just say
138:06 - content
138:08 - CRA and now what we can do we'll say
138:12 - this skeleton should be with of full and
138:15 - for the vertical stack to say align
138:18 - items to be Flex start and so let's say
138:23 - Flex start and gap of four now if we
138:28 - just save this and what are we going to
138:30 - see okay that's it that's what we see in
138:33 - the first initial load six loading
138:35 - skeletons and now we're going to
138:37 - actually be uh building the profile
138:40 - posts so I'll just say if it is not
138:43 - loading and in this case we're going to
138:46 - so let's say end end
138:48 - and then we're just going to go
138:50 - here and with a react fragment then
138:53 - we're just going to have profile let's
138:56 - say profile poost component and we're
139:00 - just going to import it four times and
139:03 - for each of them they're just going to
139:05 - actually be taking an image so let's say
139:08 - image uh we could just say image 1.png
139:11 - for this and we're just going to take
139:14 - this so I'll say control alt and the
139:16 - arrow key down three times or two times
139:19 - and then I'll just paste it now we can
139:21 - just add all of them at once so that was
139:25 - a cool shortcut in vs Cod that you can
139:27 - use now inside the profile post we're
139:29 - just going to go inside and since we use
139:32 - the grid now we're going to use the grid
139:35 - item in here because this is the child
139:38 - or the children for that grid item I
139:40 - mean for the grid container okay that
139:42 - was the grid container the parent and
139:44 - this is going to be the child so now if
139:46 - we just take a look at the demo that
139:48 - we're going to see something now we only
139:49 - see the images but when we hover over it
139:52 - we see this overlay with the number of
139:55 - uh comments and likes so we're going to
139:57 - add uh two things which is going to be
140:00 - the image as well as this overlay so
140:03 - let's go here we're going to have a grid
140:06 - item which is coming from Chakra it's a
140:10 - grid item here as well and it's going to
140:13 - have a couple of different props so
140:16 - let's let me just take a look at my
140:17 - notes okay it is going to be first
140:20 - cursor of pointer and then below this
140:23 - border radius of four so that we can get
140:26 - this uh rounded corners and then
140:29 - overflow of hidden so that it doesn't
140:33 - overflow our images and then border say
140:38 - one pixel solid and then the Border
140:41 - color that just going to be white Alpha
140:44 - 300 and then the position is going to be
140:46 - relative because we're going to use
140:49 - absolute positioning inside uh this
140:51 - parent component and then aspect ratio
140:54 - one uh one to one so it's just going to
140:57 - be a square and on click we're going to
140:59 - use onop function but we can use it in a
141:02 - little bit because we're going to add
141:04 - the model uh at the end okay so we'll
141:07 - say one Flex this is going to be our so
141:09 - to say the overlay when we hover over it
141:12 - so how can we do this so we'll just say
141:15 - opacity initially going to be zero but
141:17 - on the hover state it is the opacity is
141:21 - just going to be one and this will make
141:23 - it uh visible on the hover state so
141:26 - position going to be
141:29 - absolute and top zero left zero so we
141:35 - could also say right zero and bottom
141:38 - zero that will make it width of full and
141:41 - then we'll just say background should be
141:43 - let's say black alpha maybe 700 and for
141:47 - the transition we just want to have a
141:50 - smooth transition you could say all 3
141:53 - seconds or 0.3 seconds and then e okay
141:58 - this is going to be uh our transition so
142:01 - we could say Z index is going to be one
142:04 - so at the top and then justify content
142:07 - to be Center and inside this uh we're
142:10 - going to have the number of likes and
142:13 - comments so we're going to go inside and
142:15 - let's say Flex um this is going to have
142:18 - the Align and justify content as Center
142:22 - so align item Center justify content
142:25 - Center and then let's see gap of uh
142:28 - maybe that should be 50 50 pixels and
142:32 - then one Flex for the number of uh so to
142:36 - say likes and another Flex for the
142:38 - comments so this Flex is just going to
142:41 - have uh AI fill heart this is the icon
142:46 - that is coming from react icons you
142:48 - could just say size of uh maybe 20 so
142:52 - let's just give it like this and then
142:55 - we're going to have the
142:57 - text let's import the
142:59 - text number of seven and then font
143:04 - weight of
143:06 - bolt that should be a lowercase and then
143:09 - margin left of two now let's import this
143:12 - icon okay we'll just say import AI f
143:17 - part from react icon SL Ai and after
143:20 - this text we're going to have this Flex
143:22 - I mean this one I believe yes and this
143:26 - flx is just going to have fa comment so
143:29 - maybe at this point I could copy and
143:31 - paste it and it is nothing complex we
143:34 - just have the icon as we had here we
143:37 - give a size for it and the text that
143:39 - says uh seven comments now let's import
143:42 - the icon so import fa comment from react
143:45 - icon slf
143:47 - and now let's save and hopefully that
143:49 - should be working fine we're going to go
143:51 - here but we don't have the image so
143:53 - let's show the image as well um after
143:56 - this flexes at the very bottom so we
143:59 - have one two and three okay after this
144:04 - it should be I believe yes this is our
144:06 - overlay and then we're just going to put
144:08 - the image and at this point we could
144:10 - just say image um source which is coming
144:15 - from let's import this first the source
144:18 - is coming as a prop so that was the
144:20 - image so for the source it is going to
144:23 - be taking the uh the image and then we
144:26 - could just say alt um let's say profile
144:29 - post and then this is just going to have
144:32 - width of
144:36 - 100% And then height of let's say
144:40 - 100% and lastly we could to say style or
144:44 - maybe the object fit should be cover so
144:48 - let's save and let's save it here
144:54 - um okay we have the loading skeletons
144:56 - and then the images when we hover over
144:59 - it we got the overlay for each of them
145:02 - and that should be working fine when we
145:04 - click to that now we should uh we should
145:07 - have a this model so for this we are
145:10 - just going to go here and let's say
145:12 - model and how are we going to use this
145:15 - so a model just has this uh first the
145:18 - parent and a button that hover I mean
145:22 - the button triggers the model to be open
145:25 - so that uh that button for us going to
145:27 - be this image so when we click to that
145:29 - it is going to call the open function so
145:32 - at this point it is onopen let me just
145:34 - zoom in and on click we're going to add
145:37 - it so this model is going to has the is
145:40 - open variable or the state that checks
145:43 - if if current this model is open or not
145:46 - and the on close function and it's going
145:49 - to have a mod model overlay it's going
145:51 - to have model content close button and
145:54 - the model body that we can see here also
145:57 - you could add model footer in our case
145:59 - we're not going to add it so let's see
146:01 - how that look like so this is the model
146:04 - footer and then the body so this is the
146:07 - header where we see the close button and
146:10 - this is the overlay when we click to
146:12 - that on close function runs and model
146:15 - closes so now now let's implement this
146:17 - in our application so first of all I
146:20 - will just copy this three lines okay our
146:22 - states and functions I'm going to just
146:25 - paste it after our state and let's get
146:27 - this use disclosure Hook from Chakra and
146:31 - for the on open function we're going to
146:33 - be adding it into here uh okay I just
146:36 - paste it into the wrong place so I'm
146:38 - going to cut it delete this one and that
146:41 - should be inside the profile post okay
146:43 - for each post when we click to this grid
146:46 - item we're going to call this onopen
146:48 - function so I will say import the use
146:51 - disclosure and on click to this let's
146:54 - say onclick just call the unopen
146:57 - function and that will make the model to
146:59 - be open and now I will go here and I
147:03 - think I'll just copy all of this and
147:05 - maybe I should first delete this model
147:07 - footer because we're never going to use
147:08 - it and like this I'm going to copy this
147:12 - and maybe at the very bottom so after
147:16 - the let's say a maybe not the grid item
147:19 - okay so here I'm going to put a fragment
147:23 - uh oops so I'll just delete okay what is
147:27 - going
147:30 - on okay I think I messed it up so I'm
147:33 - just going to delete it and okay this is
147:35 - the grade item that we have I'm just
147:37 - going to wrap it with a react fragment
147:40 - so that we can both return the grid item
147:42 - and then the model at the end so this is
147:46 - what we're doing
147:47 - so we had the grid item we just put a
147:49 - fragment at the top and we just close it
147:51 - at the very bottom and after the grid
147:53 - item we're just going to paste what we
147:55 - have just copied and this is going to
147:57 - have the model let's say model overlay
148:00 - content header uh close Button as well
148:04 - as the model body or here we could just
148:06 - say hey this is a model and if we just
148:10 - save this now let's test it out when we
148:12 - click to any of these we're going to get
148:14 - this model and now we're just going to
148:16 - make it look like this so uh we're going
148:20 - to go inside and let's start to work on
148:23 - we're going to be basically changing the
148:24 - model body content so on the left we're
148:27 - going to have the image and on the right
148:30 - we're going to have the comment section
148:33 - so let's just see again um here on the
148:36 - left we have the image on the right we
148:38 - have just everything the comment section
148:40 - and then the uh post footer so we're
148:43 - going to get into that so that's why
148:45 - we're going to use a flex container
148:47 - on the right one child for the image and
148:50 - another child for the comment section so
148:53 - let's open up our application and then
148:55 - we're going to go inside first let's add
148:58 - a couple of different props into here
149:00 - now there is something called is
149:02 - Centered for the model and if you just
149:04 - say true for this that is going to be
149:07 - that's going to take the model to the
149:09 - center of the screen and we're going to
149:11 - be changing the size depending on uh
149:13 - depending on the break points so it's
149:15 - going to be resp iive so let's say base
149:18 - 3x large and on the medium screens and
149:21 - above it's just going to be a bit larger
149:23 - which is 5X large so that should be it
149:26 - for the model and we're going to go into
149:28 - the model body and we need to change the
149:31 - background color to be completely black
149:34 - and it is going to also have padding
149:36 - bottom of five so here we're going to
149:39 - have one Flex container so let's just
149:42 - indent this properly and this is going
149:44 - to have two Childs or or two children
149:47 - and this Flex let's say Gap okay that
149:51 - should be gap of four if I can type and
149:54 - then it's going to have the width it's
149:57 - going to be uh responsive so let me just
149:59 - copy and paste really quick uh on the
150:03 - base it's going to be 90% of the parent
150:05 - on the small and above uh 70% and medium
150:08 - and above is going to be the full screen
150:11 - and then we'll just have the margin X to
150:13 - be Auto so after this we're going to
150:17 - have the box that is going to be holding
150:19 - our image so we'll just say box import
150:22 - the box and it is going to have a couple
150:25 - of different props so let's say the
150:28 - Border radius of
150:31 - four and since it's going to hold the
150:34 - image let's say overflow hidden it
150:36 - should be and then the Border one
150:42 - pixel solid and then the Border color
150:47 - of uh White Alpha 300 and then we'll
150:50 - just say Flex of
150:52 - 1.5 and this is going to be taking the
150:55 - image so that could be a self closing
150:58 - tag and for the source uh we're just
151:01 - going to put the prop that we're getting
151:03 - as this image so source is just going to
151:06 - be the image itself and for the alt we
151:08 - could again say maybe the profile post
151:12 - and then below this image we are going
151:14 - to have another Flex after the Box
151:18 - actually and this is going to be holding
151:20 - the right hand side so let's say flex
151:22 - and the width of this going to be Flex
151:25 - one so this is uh a half point is just
151:29 - bigger than this one or the wider and
151:32 - then the flex direction is going to be
151:34 - let's say column and then we could add
151:37 - padding X of 10 let me just scroll down
151:40 - a little bit and give a bit space for us
151:43 - and pading X of 10 display of uh let's
151:47 - say on the base we not going to see this
151:50 - the common container and then medium and
151:53 - above is just going to be flex and now
151:55 - we're going to have the user profile
151:58 - picture or the Avatar as well as the
152:00 - username so I will just create another
152:03 - flag that says let's say go here align
152:08 - items to be Center and then the
152:12 - justify I can type justify content space
152:16 - between and then this is going to have
152:19 - the Avatar as well as the the text so
152:22 - let's say Avatar self closing tag this
152:27 - is going to take a source as let's say
152:30 - slash profile pick.
152:36 - PNG let's say size is just going to be
152:39 - small and then name could be
152:42 - just your
152:45 - name and after the Avatar we're going to
152:48 - have a text that puts the username I'm
152:50 - just going to copy and paste it so we
152:52 - have text component with the text
152:55 - content font weight of Bolt font size of
152:57 - uh 12 pixels and after this Flex We are
153:01 - going to add the delete icon so say
153:05 - after the flex we could have a box let
153:08 - me just scroll a little bit and this box
153:11 - is going to have an icon inside let's
153:14 - say MD delete
153:16 - and size of 20 and let's say cursor is
153:20 - just going to be
153:24 - pointer and this is coming from the
153:26 - react icons so let's import it okay that
153:30 - should be working fine and we're going
153:32 - to add a couple of props into this box
153:34 - so we'll just make the color to be red
153:37 - on Hover state so let's say hover
153:40 - another object we're going to change the
153:42 - background to be white Alpha 300
153:47 - and the color let's
153:50 - say red 600 and basically it's going to
153:54 - have a border radius let's say radius
153:58 - and then it's going to be four pading
154:01 - let's say one now let's save at this
154:04 - point and let's take a look how that
154:06 - looks like so we're going to go here um
154:10 - when we open up our model okay this is
154:14 - the model title maybe we could actually
154:16 - just deleted the content at least so
154:20 - let's say this is going to be a self
154:22 - closed model
154:24 - header like
154:29 - this okay it is not working properly uh
154:32 - let me just let me just check really
154:34 - real quick so what happens if we just
154:37 - delete this completely now let's take a
154:39 - look okay we don't have the model header
154:42 - in this uh component and now this is not
154:45 - working proper properly we should be
154:46 - having this next to the um so let's see
154:50 - it should be looking like this one Flex
154:52 - on the left and this guy should be on
154:54 - the right so let's take a look at it
154:57 - okay so the problem here is that this
154:59 - Flex has the direction of column so this
155:02 - is going to be at the top and this
155:04 - delete icon is going to be at the bottom
155:06 - that's why we're having this Behavior so
155:09 - instead so let's just first delete this
155:11 - this is not related so we're going to
155:13 - wrap this with another Flex okay so I'm
155:17 - going to cut this from here and then
155:19 - paste it here so what we just did is we
155:22 - created another Flex so this is going to
155:24 - be our first child on the left and this
155:26 - going to be our second child on the
155:29 - right and we're going to say align items
155:32 - iner justify content space between to
155:35 - this guy and we are just going to say
155:37 - that this Flex is going to have align
155:40 - items to be Center and then let's say
155:44 - gap of four okay okay that was a bit
155:46 - complicated but this is what it is uh so
155:50 - here we have the delete icon on the
155:53 - right and these guys on the left and let
155:55 - me just quickly iterate what we did um
155:58 - we have a flex okay this is our
156:01 - container and on the left we have the
156:03 - username as well as the avatar on the
156:05 - right we have the box so we were missing
156:08 - one Flex container at this point so
156:11 - sorry about that so after this Flex We
156:14 - need to add something called the divider
156:16 - and it is going to be this thing that we
156:19 - have let's just refresh okay so this is
156:22 - called the divider and if we just take a
156:26 - look okay you just call the component
156:29 - and you can give orientation you can
156:31 - give height and just Center it with this
156:33 - components or you could use absolute
156:35 - centering um anything like that so we're
156:37 - going to be using this divider after uh
156:40 - this component so we are going to go
156:43 - here after the box after the def Flex
156:46 - we'll just say divider and import it so
156:50 - it is going to have the margin y of four
156:53 - and then background of let's say gray
156:57 - 500 and then below the divider we're
157:00 - going to have our actual comms which you
157:02 - can use vertical stack for this because
157:05 - they're going to be in the vertical uh
157:07 - Direction so I'll import the vertical
157:10 - stack and let's say your width of
157:13 - full and then we're going to have the L
157:15 - align items if I can type properly align
157:19 - items to be Center or start it should be
157:23 - actually and then Max height of 350
157:27 - pixels and we're going to use overflow y
157:31 - let's say overflow y should be Auto and
157:35 - I will show you what this means but
157:37 - basically when the comments are too
157:40 - large so let's say if we have multiple
157:42 - components it is not going to overflow
157:44 - but instead we're going to have a scroll
157:46 - bar that we can scroll through it and we
157:48 - will see how we can how we are going to
157:51 - use it and then inside the flex we're
157:54 - actually going to have common components
157:56 - so in our case let's say we're going to
157:58 - have three common component so we're
158:01 - going to create that in a second it's
158:03 - going to take a couple of props let's
158:05 - say created that uh we could just say
158:08 - one day Echo and it's going to have a
158:14 - username let's say as a programmer and
158:17 - then below this it's going to have the
158:19 - profile picture so let's say this is
158:22 - going to be SL profile pick. PNG as well
158:25 - as the text uh maybe I'll just copy and
158:29 - paste it so dummy images from unsplash
158:33 - and we're going to put two more comments
158:35 - which I will copy and paste the exact
158:37 - same thing so let's see uh we have the
158:40 - created ad username profile pick and
158:43 - text so these are the comments different
158:45 - comments that this post has so let's
158:49 - create it so it should be inside the
158:51 - maybe let's say com components
158:55 - comment and we're just going to have
158:58 - comment.
159:03 - jsx so we're going to export this and
159:07 - then import it here um so it should be
159:10 - this one actually right we can delete
159:13 - the model header we're not using it and
159:15 - now let's see it was taking the created
159:18 - at username profile picture and text so
159:21 - let's say created at um the username
159:26 - let's say and then profile pick as well
159:29 - as the text and now we could save and
159:32 - let's take a
159:36 - look okay we have three comments now
159:39 - we're just going to create one of them
159:40 - and it's going to work for the others so
159:43 - let's go here inside the commment
159:47 - component so it is going to have a
159:49 - [Music]
159:53 - flex with the gap of four let's say and
159:57 - then inside the flex we're going to have
159:59 - the avatar on the
160:01 - left and then the comment content on the
160:04 - right so import the Avatar let's say the
160:07 - maybe source is just going to be the uh
160:11 - profile pick and for the name we could
160:14 - just give the username name that we are
160:17 - getting as a
160:19 - prop and then the size is just going to
160:22 - be
160:23 - small and after the Avatar we're going
160:26 - to have one more Flex that says
160:28 - direction of column because it's going
160:30 - to have the created that as well as the
160:32 - column I mean created that as well as
160:34 - the username uh field so let's say
160:37 - colume and then one Flex that says gap
160:41 - of two and this is going to take the
160:43 - username as well as the comment so let's
160:46 - say text import the text it is going to
160:49 - have the user name and font weight
160:54 - should be
160:57 - bolt and then font size is just going to
161:00 - be 12 pixels and after this text we're
161:04 - going to let's say create another text
161:06 - that says the text or the comment so
161:11 - let's close off this text and it's just
161:14 - going to have the f size as 14 and not
161:17 - any colors okay after this Flex we're
161:21 - going to have one more font or one more
161:24 - text I'm going to copy this paste it it
161:27 - is going to be having the 12 pixels as
161:31 - well as the color of let's say gray and
161:34 - this is going to be the created at date
161:36 - and that should be fine now we're going
161:38 - to save and let's
161:40 - see okay we have all of our uh comments
161:44 - in the vertical Direction so now we're
161:46 - going to add this uh post footer at the
161:49 - very bottom and for this we're going to
161:51 - add another divider after the comments
161:54 - and then the post footer which we
161:56 - already created so we are going to go
161:59 - here profile post and then after the
162:02 - vertical stack let's say we want to have
162:05 - a divider okay let's say divider margin
162:08 - y of four and then
162:11 - background okay margin y of four
162:14 - background GR
162:15 - let's say
162:17 - 800 and after the divider we'll just
162:20 - have the post footer component that we
162:22 - already created so post footer it was
162:27 - okay this one uh it doesn't give us any
162:29 - Auto Imports so let's say so let's
162:31 - import it we'll say import post footer
162:34 - it's going to be coming from we're going
162:36 - to go one up it was inside the feed post
162:39 - slost footer and if we save now that is
162:43 - going to be working fine
162:46 - in our case okay it is here but we need
162:48 - to just push it to the very bottom which
162:51 - we can uh achieve this by using margin
162:53 - Top Auto so we're going to go into the
162:55 - post putter let's say do we have that
162:58 - margin uh Auto no we don't so let's say
163:02 - this should have the margin uh
163:07 - top of Auto let's say and let's
163:11 - see okay this is what we have but we
163:14 - don't want to see this view all uh
163:16 - comments section here we can just delete
163:19 - it um for this we are going to go into
163:22 - the post footer and this is going to be
163:24 - taking a prop called is profile picture
163:28 - I mean if the profile page if you are in
163:31 - the profile page and we're looking the
163:33 - post footer we don't want to see this uh
163:36 - content here so maybe all of these I'm
163:39 - going to cut this
163:41 - actually and then I will say if it is
163:43 - not the profile page each and then uh
163:47 - just return this jsx and it should be
163:50 - inside the fragment and then paste it
163:52 - and we're going to go here and we'll say
163:55 - this is the profile page let's say true
163:58 - and now we are not going to see the
164:00 - section we're only going to see the
164:02 - number of likes and the comment section
164:05 - with the icons so the exact the same
164:08 - thing that we have here and now let's
164:10 - check if this is responsive or not I
164:12 - will just open up my console and if we
164:15 - just shrink this okay let's see we have
164:17 - some
164:18 - errors uh okay let's just refresh to get
164:21 - rid of those
164:23 - errors and let's open up this and when
164:26 - we just shrink that at this point uh
164:28 - let's say in the medium we're not going
164:30 - to see this Comon section it's going to
164:32 - disappear and you only see the image and
164:35 - it is working fine up until 300 pixels
164:38 - and even if we close it so up until here
164:41 - it is looking pretty nice we have all of
164:44 - our posts and the last thing that I want
164:46 - to show you is that when we add multiple
164:49 - commments now instead of three let's say
164:52 - we're just going to put a couple of more
164:54 - okay let's say maybe 10 or 15 so when we
164:57 - get to here let me just uh make this a
165:00 - bit bigger okay when we have this here
165:03 - we just see now we have this scroll bar
165:06 - where once the content overflows we say
165:10 - that overflow is just going to be Auto
165:12 - and specifically the Y AIS is going to
165:14 - be Auto so this allows us to have uh
165:18 - this scroll bar if you just didn't put
165:20 - this uh prop if you just delete this
165:24 - then it's going to overflow the content
165:26 - did you see and that's why we're adding
165:29 - this the maximum height is 350 pixels
165:32 - and then overflow Y is auto so the last
165:35 - thing that I want to add is going to be
165:38 - we're just going to change this uh uh so
165:40 - to say this scroll bar and we're just
165:42 - going to make it a little bit better for
165:44 - this we can go into the index.
165:47 - CSS okay we're going to go here and
165:50 - we'll just add a couple of styles
165:52 - basically we're just going to make our
165:53 - scroll bar in the dark mode and just
165:55 - make it a bit thinner so this is how we
165:58 - can change it so we'll just put three I
166:00 - mean two columns and then slash
166:03 - webkit uh so it should be webkit Das
166:06 - scroll bar okay and inside we'll just
166:09 - say the width should be 10 pixels and
166:12 - then there is something called track and
166:14 - uh thumb so for the track we're just
166:17 - going to have this color uh so # 1 E1
166:21 - e24 and then for the thumb let's go down
166:25 - below and then the thumb color is just
166:28 - going to be uh 3 F 3F and 40 so this is
166:33 - going to have this kind of uh grayish
166:35 - color and at the end when we hover over
166:38 - this we would like to change the
166:39 - background color and we can just accept
166:42 - this it's going to be uh 555 and now now
166:45 - let's save and let's see how this is
166:46 - going to look like I'll just go here um
166:49 - let's wait okay this is our new scroll
166:51 - bar and I think it looks better and even
166:53 - in the homepage we can see that so this
166:56 - is our new scroll bar so to say okay so
167:00 - after a quick and short break let's
167:02 - continue to the project so this is where
167:04 - we left we only have the UI design and
167:06 - nothing else about back end so as you
167:09 - might know we're going to be using
167:10 - Firebase which is a backend as a service
167:12 - that is provided by Google so it allow
167:15 - allows us to build a web and mobile
167:16 - applications without having to manage
167:19 - servers or any databases so it provides
167:22 - us a lot of useful features such as
167:24 - authentication real-time database um
167:27 - cloud storage hosting I mean hosting and
167:30 - much more and in this tutorial we're
167:32 - going to be using the most common three
167:34 - services uh which is which are going to
167:36 - be the authentication fire store and
167:39 - storage so first thing that we need is
167:42 - to create a Firebase project and even
167:44 - before for that we need to um just
167:47 - create a Firebase uh account so I
167:49 - already have one so you need to just uh
167:51 - go to the console. Firebase google.com
167:54 - and just uh create an account for free
167:57 - and then you'll get to this page where
167:59 - you uh where you're going to have your
168:01 - Firebase projects so this is the project
168:04 - that I showed you in the demo so I'll
168:05 - just uh create another one Let's uh
168:08 - click to this and uh you could just say
168:10 - insta colone but I'll just say YouTube
168:13 - and let's continue with this uh we could
168:15 - have analytics or you can just uh s of
168:18 - say disable it but I'll just have it so
168:20 - let's continue uh select an account so
168:23 - let's say default account for Firebase
168:25 - right and we're going to create the
168:27 - project so while it installs we need to
168:30 - uh install a couple of packages so let's
168:33 - go here uh I'll just open up a new
168:35 - terminal and the first one that we need
168:37 - is going to be the Firebase so let's say
168:40 - mpm install Firebase and we're going to
168:43 - be using something called Z
168:45 - okay let's say uh Firebase uh and just
168:47 - press space so zent this is going to be
168:50 - a uh s to say library that we're going
168:53 - to be using for the global State
168:55 - Management and uh you're going to see
168:57 - how that works and then we need to
168:59 - install another package called react
169:02 - Firebase hooks so this is going to allow
169:05 - us uh with the authentication just to
169:07 - make uh our code a little bit cleaner
169:09 - and S to say just like reacti is because
169:13 - it is going to uh provides us some Hooks
169:16 - and lastly we need to install another
169:18 - package so let's say add chakra D
169:22 - ui/ icons so this is going to give us
169:25 - some icons that we're going to be using
169:27 - uh from Chakra so let's press enter and
169:29 - now while this installs we can go to
169:32 - here now our project is ready let's say
169:35 - continue and then it sorry it's going to
169:38 - take us to here let's uh select the web
169:42 - and then we could give a name again
169:44 - let's say
169:45 - I'll just give the same name insta clone
169:48 - D yoube so I'll say Register App we
169:51 - could um so to say just ignore this
169:54 - hosting for now okay so it gives us some
169:57 - uh some script that says mpm install
169:59 - Firebase we already did already did this
170:02 - now we can just um s to say copy this
170:05 - thing I'll just copy this which is going
170:07 - to be our Firebase um so to say
170:09 - configuration we're going to go into the
170:11 - vs code and this has been installed as
170:13 - well let's k this terminal and Shrink
170:16 - this so we're going to go into Source
170:19 - let's say
170:21 - Firebase and we're going to be putting
170:23 - our Firebase configuration to here so
170:25 - let's say Firebase JS and now I'll just
170:29 - copy I mean I already copied so I'll
170:31 - just paste and now here we need to just
170:34 - uh explore some uh stuff so first of all
170:36 - let's just ignore the analytics for now
170:39 - okay we have this initialization of the
170:41 - app let's delete all of the comments
170:44 - okay just delete delete and now we are
170:46 - going to get the authentication uh
170:48 - service so I'll just say import get oath
170:52 - okay from Firebase SL o this is going to
170:56 - give us the authentication and then
170:58 - we're going to get the fire store as
171:00 - well as the storage so just get them
171:02 - from this Firebase slf fir store and
171:05 - storage now that we have our application
171:08 - so what this does is basically we have a
171:10 - configuration so this tells our code
171:13 - that this is the Firebase project that
171:15 - we want to connect so we are passing
171:17 - this object into this initialize app and
171:20 - then it returns us the application uh so
171:23 - the Firebase application that we have on
171:25 - the cloud so we are going to get the
171:27 - authentication system let's say con out
171:30 - and will say get out and then we need to
171:32 - just pass the application and then we're
171:34 - going to get the fire store in the exact
171:36 - same way so you could say cons DB but
171:39 - I'll just say fire store just to make
171:41 - code a little bit uh more readable so we
171:43 - know uh uh which database this is so it
171:46 - is fire store we say get fire store and
171:49 - pass the app so now we are we have the
171:51 - fire store so to say instance as well
171:54 - and then lastly we will just get the
171:56 - storage so at this point I'll just Auto
171:58 - accept this and at the end of our file
172:01 - we need to just export all of these
172:03 - because we might want to use them in our
172:05 - projects and indeed we're going to be
172:07 - using them so now let's save this and we
172:10 - can put them into the environment
172:11 - variable but for now let's just skip
172:13 - that we could maybe to that uh at the
172:15 - end of the project so now uh we have
172:19 - this oath fire store and storage but we
172:21 - don't really initialize that so let's go
172:24 - into our uh console so let's see
172:26 - continue to console and now we need to
172:28 - add those services so let's add the
172:31 - authentication we're going to say uh get
172:34 - started with
172:36 - it and now it is going to ask us uh
172:39 - which providers do you want so let's say
172:41 - email and password you can just enable
172:44 - that
172:45 - and then we also want to add a new
172:47 - provider which is going to be this
172:48 - Google um let's say enable um okay we
172:52 - don't really need to okay let's select
172:54 - our support email and then we could just
172:57 - say say
172:58 - save and it's going to initialize it for
173:01 - us as well let's see and while that is
173:05 - been uh added in the background let's
173:07 - take a look at this throwing that we
173:09 - have so Firebase gives us some services
173:12 - and there's actually a lot of services
173:14 - that we can use even for machine
173:16 - learning stuff but in our project we're
173:18 - going to be using these uh three okay so
173:21 - authentication fir store and storage in
173:24 - the storage we're going to store our
173:25 - images for the posts and profile
173:27 - pictures for the fir store we're just
173:29 - going to be storing our users and posts
173:32 - and in the authentication it is going to
173:35 - actually store us the users but the
173:37 - thing is this users does uh I mean this
173:40 - users has nothing to do with the users
173:42 - that we're going to be storing here so
173:44 - so it is because authentication and Fir
173:46 - store are separate Services okay so
173:49 - authentication handles you the uh so to
173:52 - say authentication so it just checks if
173:54 - this user is logged in or not and this
173:56 - fire store uh it is a database that I uh
174:00 - typed it here so we're going to store
174:02 - our users and posts so we are storing
174:05 - our users here it is because we would
174:07 - like to know how many followers this
174:09 - user has how many following this user I
174:12 - mean how many users uh this user follows
174:15 - how many posts this user has so what is
174:17 - the full name profile picture biography
174:20 - email username Etc and then also there's
174:23 - like create ad and user ready and then
174:26 - for our post document uh for our post
174:29 - doc I mean collection I'm sorry so this
174:31 - is a collection by the way this is also
174:33 - a collection okay so we're going to have
174:36 - for each post an ID a caption of the
174:38 - post and image URL which we are going to
174:41 - be storing them inside our storage so
174:43 - we're going to have uh how many likes
174:45 - this post has and we can store it as an
174:49 - array of string and each string is going
174:51 - to be the IDE of the user that like this
174:54 - post and then we're going to have the
174:56 - comments and each comment is going to be
174:58 - this comment document that I put it
175:00 - right here so each comment is going to
175:03 - have the comment itself okay maybe it
175:05 - says hey man this post is really great
175:07 - and then this post is created by some
175:09 - user right and then which post this
175:13 - comment is belonged to
175:15 - and lastly when this comment has been
175:17 - posted which is the create that date so
175:20 - also this post is going to have when
175:22 - this post has been created and who
175:25 - posted this post right so these are
175:28 - going to be our collections so the users
175:30 - collection and posts collection and each
175:33 - post uh is going to have this comments
175:35 - array maybe it's just going to be an
175:36 - empty array right a post might have zero
175:39 - comments or maybe it'll have like
175:42 - multiple and each comment will uh will
175:44 - be in this format so yeah this is what
175:47 - we are doing so we just initialized the
175:50 - authentication let's initialize the fire
175:52 - store and storage as well we're going to
175:54 - go here into build let's say uh where is
175:57 - the fire store okay it is a database
176:00 - like it is real-time database okay so
176:02 - whenever something uh changes it just
176:05 - gives you immediately back so kind of
176:08 - like a socket so I I'll just say create
176:10 - the database so database ID is default
176:13 - let's say Lo
176:15 - um okay let's see okay let's say next
176:18 - and then we could start in the test mode
176:21 - and once we deploy this project we could
176:24 - uh we're going to go into the production
176:25 - mode and we'll just put our security
176:27 - rules here for now don't worry about
176:29 - that now we can just uh read and write
176:32 - this database until uh 1 month later so
176:35 - I'll just say enable Okay it's going to
176:37 - enable it in the background let's see
176:39 - okay it's been initialized now we have
176:41 - an empty fir store database and lastly
176:43 - we're going to go go into the storage
176:45 - okay this is going to be for storing
176:47 - images let's say get started and in the
176:50 - test mode
176:52 - again um okay let's say done and let's
176:56 - wait okay so we got the uh storage as
176:59 - well uh and it is like there are no
177:01 - files here yet and we're going to be
177:03 - adding all of them in the uh incoming
177:05 - sections so first things first let's go
177:08 - into our project and we just want to
177:10 - First handle the authentication so let's
177:12 - go to here and there is a problem that
177:14 - we need to fix so let's go to the oath
177:18 - form okay so here we have the entire
177:21 - Logic for sign up and login which is not
177:23 - optimal we would like to just create one
177:25 - component for login that is going to
177:28 - handle the login functionality and then
177:31 - one component for the signup that is
177:33 - going to handle the signup functionality
177:35 - okay so let's just delete this for now
177:38 - and then we are going to delete that uh
177:40 - let's see so we're going to delete this
177:42 - on click because you're not going to use
177:44 - this and then we are going to let's say
177:47 - delete the navigate and the inputs could
177:50 - be here for now let's just create our
177:53 - components so one for login. jsx let's
177:56 - say rafc give me the boiler plat delete
177:59 - the react import and save it one for the
178:02 - let's say sign up. jsx and we'll just
178:05 - say rafc and then delete this save it
178:09 - and one for the Google o and it is
178:12 - because when we click to this button you
178:14 - would like to log in with Google so
178:16 - that's why we're going to create a
178:18 - component for it as well and just put
178:20 - the logic into there so let's say
178:23 - Google um o. jsx let's say RFC which is
178:29 - going to give us the borderer plate we
178:30 - could delete this line save it and then
178:33 - let's see what are we going to do now in
178:36 - the login form we would like to have the
178:38 - email and password right so we could
178:42 - actually copy this
178:44 - and let's say uh I mean we're going to
178:46 - copy this and then we're going to go
178:48 - into the login let's just have an empty
178:51 - fragment and we could paste this let's
178:54 - import these um so say we imported the
178:58 - input from Chakra and we're going to get
179:01 - this inputs so I'm going to copy this
179:04 - paste it to let's say here okay let's
179:08 - import the use State and we could delete
179:10 - the confirm password from the login page
179:12 - and now that should be working fine and
179:15 - below this uh inputs we would like to
179:17 - have a button that says login right for
179:20 - this we could go let's say which one is
179:23 - going to be let's say it's going to be
179:25 - this button I'm going to copy this and
179:27 - then paste it right here and it is just
179:29 - going to say login okay we could delete
179:33 - like this and okay that should be like
179:36 - this and then let's import the button
179:38 - okay it's going to have the withd full
179:40 - color schem blue font size small uh I
179:42 - mean size small phone size 14 and this
179:45 - is going to have an onclick function for
179:47 - that we could uh skip that and it's
179:50 - going to have a loading uh so to say
179:52 - state but we're going to add all of them
179:54 - once we had the login functionality so
179:56 - let's just save this now and then we're
179:58 - going to go and let's say we would like
180:00 - to just delete these inputs and then
180:04 - what are we going to do so actually
180:06 - let's copy these inputs and we're going
180:08 - to paste it into the sign up as well so
180:10 - let's have an empty fragment okay we are
180:13 - going to have this email and password as
180:16 - well because when we sign up we're going
180:18 - to ask uh those inputs as well so let's
180:21 - get this inputs which is going to be
180:23 - holding the let's say email password it
180:27 - is going to take the full
180:29 - name as well as the username right
180:34 - username and it's not going to ask the
180:36 - confirm password and there is a reason
180:38 - I'll show you so let's just take the
180:40 - full name above as well as the username
180:43 - let's let's import the use State okay so
180:46 - we have these two inputs and let's just
180:50 - copy this and paste it again and
180:52 - actually for now let's just ignore the
180:54 - password okay we are going to copy the
180:57 - email and paste it again so we're going
181:00 - to have we're going to be asking the
181:01 - email and then let's say we're going to
181:03 - ask the username so username and then I
181:08 - will just copy this and paste it again
181:11 - I'm going to say so to say just ask
181:13 - default full name so full name so it is
181:16 - going to be having the type of let's say
181:18 - text this is going to have the type of
181:20 - text and this is going to be taking the
181:23 - value as inputs. username and when we
181:27 - type in into this input we're going to
181:29 - be changing the username field so I'll
181:31 - say change the username when we type in
181:34 - and for this it's going to be the same
181:36 - inputs. full name and then for the email
181:40 - I mean the on change we're not going to
181:41 - ask the email but the full name so these
181:44 - are going to be our inputs okay email
181:47 - username full name and for the password
181:49 - we're not going to have the confirm
181:51 - password but instead we're going to just
181:53 - do something else so I'm going to just
181:55 - cut I mean cut this for a second we're
181:58 - going to let's say input group okay we
182:01 - are going to uh I mean okay yeah we're
182:03 - going to import this and then inside
182:06 - I'll just paste this input which is the
182:08 - password so for the type I'm going to
182:11 - cut this and before that I'll just
182:13 - create a state that says
182:16 - const show password and satual password
182:21 - initially it is going to be false so the
182:23 - type is going to be depending on that
182:25 - state so I'm going to cut this and I'll
182:28 - say if we are showing the password then
182:31 - the type is going to be text and if you
182:33 - are not showing the password the type is
182:35 - going to be the password so that it is
182:38 - uh invisible so for the value it is just
182:41 - going to be inputs. password and when we
182:44 - uh change it okay on change event fliers
182:47 - we're going to be changing the password
182:49 - and lastly let's just say the size is
182:52 - just going to be small and I will copy
182:54 - this line and I'll just paste it to each
182:56 - input because we have multiple inputs so
182:59 - they should be in the size of small so
183:01 - that they fit in the screen okay we
183:03 - could save this and before that now we
183:06 - have added input group and we put the
183:08 - input and why did we addit this it is
183:11 - because we're going to show a button
183:13 - when we click that it is either going to
183:15 - show us the password or is going to hide
183:17 - it okay so we could say input write
183:20 - element and all of them are coming from
183:22 - the chakra documentation so if you want
183:25 - to check that out just ask the input
183:27 - group and input right element and you're
183:29 - going to see the exact same thing so I
183:31 - will just have the height of full for
183:34 - this and in the right element we're just
183:36 - going to have a button so let's get the
183:39 - button it is going to have variant of
183:42 - ghost uh uh if I can type okay it's
183:44 - going to be ghost and then size is going
183:47 - to be small and when we click to this
183:49 - it's say onclick we are going to call
183:52 - this Anonymous function which takes the
183:54 - set show password and just negate the
183:56 - value okay so let's say show password
183:59 - and then inside the button um we are
184:02 - going to just have two different uh
184:04 - icons so I'll just come to here and I'll
184:07 - just say if we are showing the password
184:09 - we are going to say
184:12 - we icon which is coming from uh from the
184:16 - chakra icons and then in the other case
184:19 - we'll just say
184:22 - VI okay it should be whe off icon okay
184:26 - so let's uh have it like this and then I
184:29 - think we can save this and let's see how
184:32 - that look like so we are going to go
184:34 - into the all form we could delete this
184:36 - inputs we are going to delete this
184:38 - inputs as well because we took them into
184:41 - their own uh so to say comp components
184:44 - we're going to delete this as well so
184:46 - also we forgot to take this button and
184:48 - put it into the sign up so after the
184:50 - input group we are going to have this
184:52 - button that says sign up right so you're
184:56 - going to see what we're doing now I'm
184:58 - going to save this and let's delete this
185:01 - and we're just going to here we'll just
185:03 - put so if it is login right this state
185:07 - says initially we are in the login page
185:09 - if if if so like we'll just say login
185:13 - show us this login component but if it
185:15 - is not in the login State then we're
185:17 - just going to show the signup component
185:19 - let's import that as well and now let's
185:21 - save this file and let's take a look so
185:24 - here I'll
185:26 - refresh so the login is true now okay so
185:29 - we see the email and password when we
185:32 - click to the sign up it changes right we
185:34 - see email username full name password as
185:38 - well as the button so if I put some
185:40 - password here and if I click that now
185:43 - now the type of this input is text and
185:45 - if I click that again type of it is
185:48 - password so that this is kind of like
185:50 - secret and in the signup form we have
185:53 - this sign up button and in the login
185:55 - form we have this login button and these
185:57 - inputs are bigger than this one so let's
186:01 - make them smaller so that we are
186:03 - consistent okay we're going to go into
186:05 - here into login let's say size should be
186:08 - small and size of this also should be
186:11 - small let's save and let's take a look
186:15 - okay now it's better I think and we
186:17 - would like to take this uh button okay
186:19 - this login icon as well as this text
186:22 - into its own component which we created
186:25 - so Google o it is going to be so here it
186:28 - is this one okay I'm going to just cut
186:31 - this and import the Google out instead
186:35 - and now let's go into the Google out
186:37 - we're just going to paste it like this
186:39 - let's get the flex as well as the image
186:42 - and the the text um okay there is a
186:46 - problem let's see we're going to import
186:48 - the image and then the text okay if we
186:50 - just save and let's save here now the
186:53 - output is exactly the same but now it is
186:56 - uh in its own component which is the
186:58 - Google off now we can put the Google out
187:01 - logic into here and login logic into
187:04 - here and sign up logic into this
187:06 - component so that this o form is looking
187:09 - really clean so let's delete this button
187:13 - and input because we're not using them
187:15 - so let's see we can save this and now I
187:18 - think it is time to build the sign up
187:20 - functionality first and then we're going
187:22 - to build the login as well as Google off
187:25 - so I don't really want to put all this
187:27 - signup logic into here but instead I
187:30 - just want to create a hook so for this
187:33 - I'll just go into the source create a
187:34 - folder called Hooks and then inside the
187:38 - hooks let's create our first hook which
187:40 - is going to be used so it has to start
187:43 - with with the use keyword so that react
187:45 - knows this is a custom hook so I'll just
187:47 - say use sign up
187:50 - with email and
187:54 - password. JS okay the name is kind of
187:57 - long but it is self-explanatory so we
188:00 - could just say rafc to get the boiler
188:03 - plate but this is not going to return
188:04 - any HTML it is going to actually be
188:06 - returning some object with values so
188:09 - let's say an empty object for now but
188:12 - now how are we're going to do the uh so
188:14 - to say authentication so let's say I
188:16 - don't know how to do this but I know
188:18 - that I'm going to be using Firebase so
188:20 - we have this um the package that we
188:22 - installed do you remember the name so it
188:25 - was react Firebase hooks let's go into
188:28 - Google and say react Firebase hooks
188:33 - authentication okay so we're going to go
188:35 - into here this is the mpm uh so say
188:39 - npmjs.com so we're going to go into the
188:42 - repository and the get GitHub and then
188:44 - we could close this so there are a
188:46 - couple of services that it provides so
188:48 - fire store functions all of them but
188:50 - we're just going to be using the
188:52 - authentication so we could click that
188:55 - and there are almost every every single
188:58 - example that you can see here now we
189:00 - would like to create an account with
189:02 - email and password so I'm going to click
189:04 - to this and there we go now it it gives
189:07 - us a full example okay so you just call
189:10 - this as a hook and put the
189:13 - authentication object that we created
189:15 - and it's going to give us the error
189:16 - State loading State user credentials and
189:19 - that function that actually creates the
189:21 - user with email and password so we could
189:24 - use the Firebase documentation to do
189:26 - this if we don't use this package at all
189:28 - we could still can do the authentication
189:31 - but this makes our code really clean
189:33 - because it gives us the loading State
189:35 - error State user State and the function
189:37 - itself so that's why I prefer to choose
189:40 - this one but you can um still do this
189:44 - operation without using this package so
189:46 - I'm going to just actually copy this and
189:49 - I go here into this sign up hook and I'm
189:53 - going to just paste it to here okay so
189:55 - here let's import this it doesn't gives
189:58 - us so let's import the O which is coming
190:00 - from the Firebase that we have created
190:02 - here right this is the authentication
190:04 - Service that we're going to be using and
190:06 - then let's go into the Chrome and copy
190:08 - this import which is coming from our
190:10 - package so we could replace it with the
190:13 - import and now we got the error State
190:15 - loading in user as well as the function
190:17 - so now when we want to use this hook we
190:20 - are going to just come to here let's say
190:22 - use sign up I mean yeah it was the use
190:26 - sign up with email and password so this
190:29 - is going to just return us some values
190:31 - so let's say const it's going to return
190:33 - us the loading State the error state if
190:36 - there is any and then the sign up
190:38 - function that we're going to be calling
190:40 - to sign up the user so let's say when we
190:43 - clict to the sign up button we'll just
190:44 - say on
190:47 - click call the signup function with our
190:50 - inputs now we need to just create this
190:52 - signup function into this U signup hook
190:56 - okay so we're going to come to here and
190:58 - in the return let's say uh just return
191:01 - the loading State the error State and
191:04 - then the sign up function that we're
191:06 - going to create so let's say const sign
191:09 - up which is going to be an async
191:11 - function so async it is going to be
191:15 - looking like this then it's going to
191:17 - have a TR catch block so for now we
191:20 - could just ignore the catch and just say
191:22 - console.log the errors if there is any
191:25 - but we're going to be handling that soon
191:27 - okay so let's say before we even try to
191:30 - sign this user up so this is going to be
191:33 - taking the inputs by the way right so
191:36 - we'll just say if any input is empty
191:38 - then just show some error then then just
191:42 - return out of this fun function so I'll
191:43 - just say if
191:45 - inputs. email is empty which we could
191:48 - just put a question mark Or if inputs.
191:52 - password is empty right or inputs.
191:55 - username is empty or the full name is
191:59 - empty so
192:00 - inputs. full name if this is the case
192:04 - then let's just console The Log please F
192:09 - all the fields and then just return so
192:11 - which means that it is is not going to
192:13 - run this Tri block okay but if this is
192:16 - not the case then we're just going to go
192:18 - into the try so I'll just say
192:21 - con
192:24 - new it should be like this new user
192:26 - which is going to be equal to a wait so
192:29 - let's take a look at the documentation
192:31 - so when they collected this register
192:33 - button they are calling the create user
192:36 - with email and password and they are
192:38 - passing the email as well as the
192:40 - password so we're going to be calling
192:42 - this exact function so I'll just copy
192:44 - this actually then which is this
192:47 - function that we're getting from this
192:48 - hook so we'll say await create user with
192:51 - email and password and then pass the
192:54 - email as well as the password so if this
192:56 - is successful then it is going to return
192:58 - us the new user okay so inside we'll
193:02 - just say let's check if there is any
193:04 - errors so if there is not new user and
193:08 - if the error we have then we'll just say
193:11 - console do log the error and just return
193:15 - out this function again but if this is
193:18 - not the case if we have this new user
193:21 - okay if this has been created in the
193:24 - authentication so this is the diagram
193:26 - that we need to go so if when we sign up
193:29 - the user is going to be created in the
193:31 - authentication Service but we need to
193:33 - also create it in the fir store service
193:36 - so that we have something like this
193:38 - document right so we're going to check
193:41 - the followers the following counts and
193:43 - all these thing that you can see in the
193:45 - screen so that's why we're going to come
193:48 - back to here and we'll say if this user
193:51 - has been created in the authentication
193:53 - system now we would like to create a
193:55 - user document in the fire store as well
193:58 - so let's say if this is the case const
194:01 - let's say user
194:05 - document and then it is going to be an
194:07 - object and it is just going to have this
194:08 - Fields so the user ID we could say new
194:12 - user
194:13 - okay dot it has a field called user and
194:16 - it has the user ID so comma we're going
194:19 - to have the email which is coming from
194:21 - our inputs we're going to have the
194:23 - username which is again coming from the
194:25 - inputs as well as the full name which is
194:28 - also coming from the inputs and then
194:30 - we're going to store the bio so let's
194:32 - say biography of this user and initially
194:34 - it could be empty string and then user
194:37 - can edit it once uh once you logged in
194:41 - so we'll just say the profile picture
194:43 - URL is also going to be empty string so
194:46 - this user doesn't have a profile picture
194:48 - and then the followers it is going to be
194:51 - an empty array Following also going to
194:53 - be an empty array as well as posts so
194:56 - this user has zero post when they log in
194:59 - or they sign up uh in the first time so
195:02 - we say create at field is just going to
195:05 - be data now so that we can show
195:07 - something like uh this user is member
195:10 - since let's say 20 and 23 and then just
195:13 - put the date so we are going to create
195:16 - this user document in our Firebase uh I
195:18 - mean fire store and let's say you don't
195:20 - know how to do that we're going to go
195:22 - into Google and we'll just say fir store
195:25 - add a
195:27 - document so we could click to this one
195:30 - and it is going to show us the
195:31 - documentation which is really really
195:34 - well structured and easy to read so here
195:37 - let's see set I mean add a document so
195:40 - here they actually show us in the first
195:42 - example how to add a document so I'm
195:45 - going to just copy this line okay we are
195:47 - going to go into vs code and then paste
195:49 - it up here so we're going to get this
195:52 - set document as well as the document
195:54 - method from let's see Firebase slf fir
195:57 - store and this DP is actually going to
196:00 - be our fire store object that we have it
196:02 - here okay it is this one we're importing
196:05 - and then let's see we are going to
196:08 - create inside this users collection and
196:10 - the idea of the user is just going to be
196:13 - let's say new user. user. uid okay it is
196:18 - this ID that we just created and then
196:21 - the data is going to be this user
196:23 - document this object that we are going
196:26 - to create so if we paste this now the
196:29 - user has been created in the database
196:32 - and we would like to set this in our
196:34 - local storage as well it is because
196:36 - we're going to be using it uh later okay
196:39 - so I'll just say local storage. set item
196:43 - and I will explain once we use it so
196:45 - this uh local storage first just takes
196:48 - the key and then the value so we could
196:50 - put something like user- info or maybe
196:54 - you could say user Instagram or anything
196:56 - like that I'll go with the
196:58 - userinfo so in the right hand side we're
197:01 - going to have djs. stringify and we're
197:03 - going to just create this user document
197:06 - in our local storage so let's save this
197:10 - okay um I think we could save this file
197:13 - I don't know why we're getting this I'll
197:15 - just say okay so in the TR catch we are
197:18 - handling our authentication or
197:21 - registration now in the sign up let's go
197:23 - here we are going to say in the loading
197:25 - State let's show it in this button so
197:29 - button takes is loading prop which is
197:32 - coming from Chakra okay we're going to
197:33 - say it is going to be loading if this
197:35 - state is true and for the error we can
197:37 - show an alert okay uh you will I think
197:40 - just copy and paste paste it after this
197:43 - input group and I'll show that so if we
197:46 - have an error we're just going to show
197:48 - an alert that shows the actual error
197:51 - message so what is this alert let's take
197:54 - a look we're going to go into chakra
197:57 - documentation and let's take a look at
197:59 - the
198:01 - alert and this is in alert okay it has
198:04 - this alert icon if you delete that we're
198:05 - not going to see that icon but we could
198:08 - put alert title description or just the
198:10 - message as well so this is what we are
198:13 - using Let's test it out now I think we
198:17 - can save this file um okay let's go and
198:21 - try that so we're going to go into the
198:23 - sign up form and let's say email John
198:28 - do@ gmail.com
198:31 - username full
198:33 - name as well as the password from one to
198:36 - six we can see it like that and if I
198:39 - click to that and let's see I think it
198:42 - has been created so I'll just refresh in
198:46 - the authentication and there we go we
198:48 - have this j@ gmail.com it has been
198:50 - created with this ID which which is
198:53 - start with one PS okay so we're going to
198:56 - go into the fir store database we have a
198:59 - users collection and we have a document
199:03 - which is this ID one PS which is the J
199:07 - so we got the bio created at email
199:10 - followers array so is empty following
199:13 - array is empty full name posts array is
199:15 - empty and these uh Fields as well now
199:19 - let's actually handle the errors for
199:21 - this we are going to be using something
199:23 - called toast in Chakra okay when you
199:26 - click that okay it's going to be
199:27 - something like this if this is the
199:29 - success toast that says account created
199:32 - and let's see an error toast if there is
199:34 - any so let's
199:36 - see um let's take a look so you can
199:39 - customize this as well okay I think they
199:43 - don't show us but I know how to use it
199:45 - so actually it's going to be in the
199:46 - status okay show error show warning
199:49 - success and info and basically this is
199:52 - where I took the uh toast so from the
199:55 - documentation and every time you want to
199:57 - use a tost you need to let's go here you
200:01 - need to call this function and it takes
200:03 - this object so every time using it is
200:06 - going to be pretty boring okay you need
200:08 - to just put all these things but instead
200:12 - we don't want to write that much code
200:14 - every time so we're going to create
200:15 - another custom hook so I'll just call it
200:17 - use show toast. JS and let's say RFC we
200:23 - are going to return the function let's
200:26 - say return show toast and this is going
200:29 - to be the function that we'll have so
200:31 - let's say con show toast and this
200:34 - function is going to take the let's say
200:37 - title the description of the toast okay
200:40 - description as well as the status so
200:44 - either it's going to be warning success
200:46 - error or anything like that so inside
200:49 - this um we are going to call the toast
200:52 - function so which we need to import it
200:54 - as in the documentation so con toast it
200:57 - is going to be use um toast right it
201:01 - which is coming from Chakra UI react
201:03 - okay so inside we are going to call this
201:07 - function toast with the object so it was
201:10 - taking the title right it was taking the
201:13 - description the status as well as kind
201:17 - of like duration we could say it's going
201:19 - to be 3 seconds and is closable you
201:22 - could say true so this is what we have
201:25 - in the documentation so duration status
201:28 - description title is closable ETC so if
201:31 - it was an error let's see lowercase I'll
201:35 - just zoom in a little bit and if I click
201:36 - to that we're going to get an error tost
201:39 - and this is basically we're customizing
201:41 - it in our hook so we can call this
201:44 - function now in any component we can
201:46 - give the title description status and it
201:49 - is going to call it for us so I will now
201:52 - save it and let's just format this a
201:54 - little bit like this we're going to go
201:57 - into our Hook when we have an error
201:59 - instead of console logging it we are
202:01 - going to just call that so let's say con
202:04 - show toast function which is coming from
202:07 - this hook that we just
202:08 - created okay so if we have an error
202:12 - let's say show toast the title is going
202:14 - to be error the description is going to
202:17 - be please fill all the fields and then
202:19 - the status is just going to be error and
202:21 - then we're going to return out this out
202:23 - of this function so now every time we
202:26 - want to use an error we'll just going to
202:28 - show this toast so error and for the
202:31 - error State we could just put the error
202:34 - whatever that is and then the status of
202:36 - error now if we haven't created this
202:39 - show toast um if we have haven't created
202:42 - this show toast function inside this
202:44 - hook we all always need to do something
202:47 - like this we would have so instead of
202:50 - this we would have something like this
202:52 - that says the title we would just put
202:55 - this error okay into here something like
202:58 - this and then we would be taking this
203:00 - description and then put it here and
203:03 - then we would put the status into here
203:05 - the duration let's say 3 seconds is
203:08 - closable is going to be true and then we
203:10 - would be copying this and pasting this
203:13 - into here and change the let's say the
203:17 - description with the error so you get
203:19 - the point we are just uh saving us from
203:23 - writing much code instead we are just
203:25 - calling the function with the parameters
203:27 - and it is handling that for us so I
203:30 - think we could delete this line and then
203:32 - in the catch we're going to be using the
203:34 - exact same thing so show toast if there
203:37 - is an error with the title the error
203:39 - message being the description and then
203:41 - the status of error so now let's try to
203:44 - do this again okay we could save and
203:46 - we're not using this user object or the
203:49 - state we could just uh skip it like this
203:52 - okay if you just delete that it is not
203:53 - going to give you any warnings so let's
203:56 - try to create another account um so
203:59 - we're going to go here we'll just say
204:01 - never and then sign up again and now
204:04 - I'll just put the exact same credentials
204:06 - j@
204:08 - gmail.com
204:10 - jandoo
204:12 - now it should say us it should give us
204:14 - an error that says this user already
204:16 - exists so if I click to sign up let's
204:19 - see okay we see the error it is because
204:21 - we have this um alert right we showed up
204:25 - here so if you have an error show the
204:27 - alert but we didn't get any toast it is
204:29 - because here that should be error.
204:32 - message now let's try to do this and if
204:35 - we have the exact same uh document in
204:37 - our database so if the email is same or
204:40 - the yeah if the email Emil is same we're
204:42 - going to hit this if check which says
204:44 - this user has haven't been created and
204:47 - then we have an error so just show this
204:49 - tost so let's save this and let's take a
204:52 - look so if I sign up again it is going
204:54 - to show the alert as well as the show
204:57 - toast and if we take a look at in our
204:59 - database that we're going to see this
205:01 - user hasn't haven't been created twice
205:03 - and in our database as
205:06 - well so now that we have signed up so
205:09 - when you sign up by the way Firebase
205:11 - immediately logs you in now let's handle
205:14 - the log out so that let's go into the
205:17 - homepage okay when we clict this it
205:20 - should log out and when we clict to this
205:23 - it should log out uh log log us out
205:26 - again so let's first do the inside the
205:30 - let's say sidebar we're going to go into
205:33 - here let's just put a comma I mean
205:36 - comment let's close this we'll just say
205:39 - log out and then so instead of having
205:43 - this as a link so we could just delete
205:45 - this because it is not going to take us
205:47 - to the authentication page because of we
205:49 - have it as link but instead we're going
205:51 - to be using this state so let's say this
205:53 - is a flex okay so it is going to have a
205:56 - on click function and when we click to
205:58 - that it is just going to log out us okay
206:00 - so we'll say maybe handle log out let's
206:04 - say and this function is going to be
206:06 - coming from another hook which is going
206:09 - to be log out so I'll just say use log
206:11 - out. JS and in order to Lo in order to
206:15 - add this functionality we can again go
206:17 - back to our so say documentation so
206:21 - let's see we have this use sign out
206:23 - let's click to that it is going to give
206:25 - us this line I'm going to copy this and
206:28 - when you click to this sign out button
206:31 - it just calls it this Asing function
206:33 - that AIT the sign out and then it says
206:36 - your sign do so this is the logic that
206:38 - we're going to be adding so let's say
206:40 - rafc and then let's delete this return
206:43 - statement but instead it is just going
206:45 - to return the log out function that
206:48 - we're just going to create so let's say
206:50 - log out and maybe it should have
206:52 - something like loading State as well so
206:55 - logout slash
206:57 - loading and I don't know if we need any
206:59 - errors but let's just take it for now
207:02 - and we're going to paste that line that
207:04 - gives us the sign out function let's
207:06 - import it all of these all coming from
207:09 - our Firebase uh object so I'm just going
207:12 - to shrink it and then we are getting
207:14 - this function from this uh hook or the
207:17 - package so now we're going to have a so
207:21 - let's say let's say const log out when
207:23 - we click to that logout button we're
207:25 - going to be calling this function so
207:27 - let's actually rename this to be
207:31 - handle log out okay I'm going to copy
207:33 - this and just change the name so it is
207:36 - going to be a try catch and for the
207:38 - catch we are again show the toast so
207:40 - let's say c
207:41 - show toast and then
207:44 - use show toast which is coming from our
207:47 - hooks folder and then here we'll just
207:50 - say show toast which is taking the title
207:53 - description as well as the status in the
207:56 - try we're just going to do the exact
207:57 - same thing in the documentation we're
207:59 - going to call the sign not method and
208:02 - then after this once it has been done
208:04 - we're going to remove the item from the
208:07 - local storage which was the user info so
208:10 - that our application know this user has
208:12 - been logged out so we could actually now
208:14 - save this file and this is all we need
208:17 - to do this is our use log out hook that
208:20 - is handling the log out functionality so
208:23 - we are going to go here let's shrink
208:25 - this and we're going to be removing this
208:27 - in the incoming sections so let's say
208:30 - use log out hook call it and it is going
208:34 - to return us three things so let's say
208:37 - uh con is going to give us the handle
208:40 - log out and and loading State as well as
208:43 - the error and now this loading doesn't
208:45 - make any sense like what is loading it
208:47 - is not readable right so let's say
208:49 - instead of loading I'm just going to
208:51 - call this is logging out so when when is
208:55 - this load logging out we're just going
208:57 - to show a spinner and let's save and
209:01 - let's just rename this as is logging out
209:04 - and we're going to go into here instead
209:07 - of having this as a box I think that
209:10 - could be a button right so I'll just
209:12 - change this with a
209:15 - button okay it is let's import the
209:17 - button from Chakra and then we're just
209:20 - going to add a couple of different props
209:22 - so we'll just say variant should be
209:26 - ghost as well as the on Hover State
209:29 - underscore hover it is just going to be
209:32 - background of transparent so let's say
209:36 - transparent and when it is loading so
209:39 - when we logging out it's just going to
209:40 - have this this prop so we we will just
209:43 - get a spinner for that and the display
209:45 - of none medium block could be still the
209:48 - same so let's save and let's see if we
209:52 - have something so error so maybe we
209:55 - should show some errors or maybe let's
209:58 - just delete this and I think there's
210:00 - almost never going to be an error when
210:02 - you're logging out so we could delete
210:04 - that and if you wanted to you can handle
210:06 - that but in this case I will not so
210:08 - let's go here um into our application
210:13 - now when we clicked that we would like
210:14 - to say user logged out so for now there
210:17 - is no way to check that so instead I'll
210:19 - just say
210:20 - console. log log. okay let's go here
210:25 - open up the console and then if I click
210:28 - to that okay user has been logged out
210:31 - and it is successful but now how are we
210:33 - going to make sure that user logged out
210:36 - and take this user to the authentication
210:38 - page and we're not going to allow the
210:41 - user to see this homepage so for that
210:44 - we're going to use the zent okay let's
210:46 - search for it zo
210:50 - react so this is the so to say the
210:54 - documentation let's click to that and it
210:57 - says that this is a small fast and
210:59 - scalable Bare Bones State Management
211:01 - solution using simplified flux
211:04 - principles so this is something like
211:06 - react alternative or context API but it
211:09 - is just much more simple to use so you
211:12 - can check out the documentation to
211:14 - understand how that works what that is
211:17 - but or you could just watch me
211:19 - explaining it so in our case we are
211:21 - going to uh go to here and let's Shing
211:24 - everything inside the source we're going
211:26 - to create a folder called store and this
211:29 - store is going to store all of our
211:31 - Global so to say Global States so first
211:35 - we could have something like oath store
211:38 - maybe oath store.js so here we are going
211:42 - to use the create function let's say
211:44 - import create from zent let's say zo and
211:50 - I don't know if this is the correct
211:51 - pronunciation but um let's just continue
211:55 - so we're going to have something like a
211:57 - um so say variable so use oath store and
212:01 - this is going to call the create
212:03 - function which is taking the set as the
212:06 - first argument okay so this is actually
212:09 - going to be an arrow function okay okay
212:11 - and it is going to take the setter
212:13 - function um if I can type correctly so
212:16 - set close that and then it is going to
212:19 - have this Arrow function now we are
212:21 - going to have this state which we could
212:22 - just say store I mean user and initially
212:25 - it is going to be null okay so when you
212:29 - first open up the application no user is
212:31 - been authenticated so we are going to
212:34 - have a function that logs the user in
212:36 - okay we're just going to say log in take
212:39 - the user whatever the value is so set
212:42 - call this Setter function and update
212:45 - this user State and we're going to have
212:48 - the log out function which is going to
212:49 - take the user and set it as null so
212:52 - let's say log out is going to be this
212:54 - function no arguments needed and it is
212:57 - called the setter function and then just
213:00 - uh set the user as null okay and then
213:03 - what are we going to do is to use the
213:05 - setter function so we're just going to
213:07 - say set user and we're going to all
213:11 - we're going to be using all of them so
213:12 - if this looks complicated don't worry
213:15 - I'll just explain all of them so this is
213:17 - going to be calling the setter function
213:19 - and just updating the user State
213:21 - whatever the value that we're getting
213:23 - and we have a warning let's see um okay
213:27 - so this actually should be wrapped with
213:29 - parenthesis so I'll just cut this open
213:32 - up parenthesis and then return this
213:34 - object so otherwise it is going to think
213:37 - as if this is the function body and then
213:39 - we just say export default the use oath
213:42 - store so initially no user has been
213:45 - logged in and when we sign up we are
213:48 - going to actually update that state with
213:50 - the user that we are getting okay so
213:52 - this is the user that we have but we're
213:55 - going to set this with this user
213:57 - document that we just created so that
213:59 - our state has this followers count
214:02 - following count and basically all these
214:04 - all these things so after the local
214:08 - storage we're just going to let's save
214:10 - file first and we'll just say login user
214:15 - so how are we going to get this function
214:17 - so from zent will actually say con uh I
214:21 - mean equal on the left hand side we
214:23 - could just say use oath store so use out
214:28 - store and we are going to and it is
214:31 - going to be taking this state okay so
214:33 - this is the first argument and we could
214:35 - just say state. give us the login
214:38 - function okay so now we have the log
214:40 - function and we could just rename it as
214:43 - login user so if you want to get the log
214:46 - out function we'll just do the exact
214:47 - same thing we're going to call the use
214:49 - out store state. log out okay and then
214:53 - we could just anything that we want to
214:55 - put here so you'll just say log out or
214:58 - log out user in our case so okay this is
215:01 - how we use the state or the functions
215:04 - from the zent you call the create
215:06 - function put the setter uh Setter
215:10 - function as the call back and then the
215:12 - state that you have and then any
215:14 - function that manipulates this state so
215:17 - in our case we have the login logout as
215:19 - well as the set user so even though
215:22 - these two guys are doing the exact same
215:24 - thing I just created this set user
215:26 - function so that our code will be just
215:28 - more readable and you're going to see
215:30 - once we use this function so let's go
215:33 - here we are not using this and then
215:36 - we'll say a login user with the user
215:39 - document that we just cre created so
215:41 - user Doc and then we can go to the
215:45 - application so
215:47 - app.jsx so here we're just going to say
215:50 - const oath user we could say and then
215:53 - we'll just say use oath store okay and
215:59 - we'll just get the authenticated user
216:01 - which was just user that we have right
216:03 - so let's just close these so it should
216:06 - be here so this is the state that we're
216:09 - getting
216:12 - okay so this is the authent
216:13 - authenticated user and when we visit the
216:16 - homepage so we're just going to say if
216:18 - user is authenticated so let's say oath
216:21 - user then we're just going to show them
216:24 - the homepage but in the else case we're
216:26 - just going to navigate the user to the
216:29 - let's say navigate to the authentication
216:33 - page SL
216:35 - o and we're going to be basically doing
216:37 - the exact same thing for other routes so
216:40 - if user is not logged in so let's say if
216:43 - there is not oath user then they can
216:47 - visit the authentication page but in the
216:50 - else case you're just going to navigate
216:51 - them to the homepage so let's put it
216:54 - like this and now if we save let's see
216:57 - what are we going to
217:00 - get okay now we are in the
217:02 - authentication page because we are not
217:04 - logged in let's go to here you cannot
217:07 - see the homepage if you can see like
217:09 - there's a flickering effect but it just
217:11 - takes us to the oath page and we're
217:13 - going to handle that flicker effect as
217:15 - well so let's try to log in uh we
217:18 - already have an account but we didn't
217:21 - handle the login functionality so I'll
217:23 - just sign up with another user let's say
217:25 - Jan do
217:34 - gmail.com okay so I've just put all the
217:36 - credentials for Jano uh the password
217:38 - username full name email I will just
217:40 - sign sign up
217:42 - and there we go now we're in the
217:44 - homepage we cannot go to the
217:46 - authentication page let's try to go okay
217:49 - it turns out that we can actually visit
217:51 - this it is because when we refresh the
217:55 - page our state is null initially right
217:58 - do you remember so here the user state
218:01 - is will always be null when you refresh
218:03 - the page so we need to fix this and this
218:06 - is why we're using local storage we'll
218:08 - just say Json
218:10 - pars from the local storage get this
218:13 - user info and if there is not it'll just
218:16 - be null in anyways so let's save this
218:20 - and now let's take a look in our when we
218:23 - just try to go to the oath page okay it
218:27 - is not going to take us to the O page
218:28 - but instead it'll take us to the
218:30 - homepage it is because it is checking if
218:33 - this user has anything in the local
218:35 - storage and in our case we have actually
218:38 - because when we sign up we store that in
218:41 - our local storage so here we have the
218:43 - user info which is this user the Jano
218:46 - and when we log out we are going to be
218:48 - clearing this user info from the local
218:51 - storage so I'll just click to this
218:53 - button there we go now we don't have
218:55 - that user in our local storage so when
218:58 - we click to that log up button it should
219:00 - take us to the authentication page so I
219:03 - will go into here into the use logout
219:06 - hook instead of console logging the log
219:09 - out we're going just going to call the
219:10 - log out function from our oath store so
219:14 - I'll just say C log out the user and it
219:18 - is coming from use o store right so
219:22 - state do give me the log out function
219:25 - which is going to be this one and it is
219:27 - setting the user as null so that we can
219:30 - update our user interface so I'll just
219:32 - delete this and let's say log out the
219:35 - user and just call it now we are
219:37 - removing the user from the storage as
219:40 - well as navigating them to the homepage
219:43 - it is because in in the app jsx it says
219:46 - if there is not authenticated user okay
219:49 - it should be here I'm sorry if o user is
219:51 - empty then navigate it to the homepage
219:54 - so let's save and I have explained a
219:56 - little bit too much but I just want to
219:57 - just make it clear so if we refresh this
220:00 - page there is nothing in the local
220:02 - storage it takes us to the O page and
220:04 - there is no way to go into the
220:06 - homepage okay so there is one small
220:09 - problem that we have here so if we try
220:11 - to go to homepage I'll just try to go
220:14 - there for one Split Second we're going
220:16 - to see the sidebar here when I click to
220:18 - enter so let's see there we go we see
220:22 - that sidebar even though we are not
220:24 - logged in so we need to fix this and for
220:26 - that we're going to go into the page
220:28 - layout and it is wrapping our entire
220:30 - application so I will go into this
220:33 - component and here we're checking when
220:36 - should we uh render the sidebar which is
220:39 - that if you are not in in the
220:40 - authentication page but now we need to
220:42 - actually update this so I will just cut
220:46 - this okay instead of having it like this
220:48 - I'll just say can render sidebar okay
220:52 - and this is going to be a variable so
220:54 - let's say cons can render the sidebar so
220:58 - it is going to be equal to this thing
221:01 - that we just uh cut or we copied and if
221:05 - we are not in the authentication page
221:07 - and also if user is is logged in okay if
221:12 - user is logged in then we can we should
221:14 - see that uh sidebar and now how are we
221:17 - going to check if user is logged in or
221:19 - not so we could do something like this
221:22 - where we are getting it from our store
221:24 - in which uh in the background checks in
221:27 - the local storage but there is actually
221:29 - even a better way to check it so for
221:33 - this we're going to go into the Firebase
221:34 - documentation let's scroll to the very
221:38 - top and okay so we have this thing
221:42 - called use o State and let's click to
221:45 - that it says it is going to retrieve and
221:47 - monitor the authentication state from
221:49 - Firebase so there is a full example here
221:53 - um in the background it checks if this
221:55 - user is logged in or not so we are going
221:58 - to copy this and let's go into vs code
222:02 - and we could paste it up here and import
222:05 - this uh hook as well as the oath object
222:09 - so now this is the user that we are
222:11 - relying from Firebase so it is going to
222:14 - be null if you are not authenticated and
222:17 - if you are logged in or if you are
222:19 - authenticated then this is going to be
222:21 - holding that user value so now this says
222:24 - can you render the sidebar and it is
222:26 - going to be true if the path name is not
222:29 - equal to the authentication page and if
222:32 - we have the user that is logged in so
222:34 - now if we actually save this and let's
222:37 - take a look here I'll just try to go to
222:40 - the homepage again uh let's see okay we
222:44 - don't see that flickering effect now and
222:47 - it is because we're checking for that so
222:49 - now even if we go to a page like let's
222:52 - say the user page or the profile page
222:55 - we're not going to see the sidebar right
222:57 - it is because we are checking for that
223:00 - if user is authenticated then show the
223:03 - sidebar and in our app jsx we didn't put
223:06 - any uh s to say Protect protection into
223:08 - this route because because uh even if
223:11 - you are not logged in in our application
223:13 - we should be see um the profile of a
223:16 - user we are not going to be able to
223:18 - follow them or unfollow them so we we
223:21 - will not be able to edit the profile
223:22 - we're going to check for that in the
223:24 - incoming sections but we should be able
223:26 - to see the posts and the comments they
223:29 - have and let's say the number of likes
223:31 - and that kind of stuff but in the
223:33 - profile page if you are not logged in if
223:35 - you are not authenticated then we
223:37 - shouldn't be see that sidebar in instead
223:40 - we can put a nav bar here that says
223:43 - login or sign up so for this we're going
223:45 - to go into here into page layout let's
223:48 - say const can render navbar and we
223:54 - should be able to render this Navar only
223:57 - if the user is not authenticated okay
224:00 - and this is how we check for it and
224:01 - we'll just say if it is not loading as
224:03 - well so it is not checking in the
224:05 - background and we're just going to say
224:07 - if the path name is not equal to the
224:09 - authentication page as well so it is
224:12 - because if we go to let's say slash oath
224:15 - so here even if I am not authenticated
224:17 - it I shouldn't see that navbar that says
224:20 - login or sign up because I already see
224:22 - that form here right so it just doesn't
224:24 - make any sense so I will just say if
224:26 - there's not User it's not loading so it
224:28 - just basically checks if user is not
224:31 - authenticated and path name is not um is
224:34 - not the authentication page so if this
224:36 - is the case we're going to render the
224:39 - Navar I have a typo here can render
224:42 - navbar and I'll just copy this maybe
224:46 - after this so after the sidebar let's
224:50 - say
224:51 - Navar and we'll just say can we render
224:55 - the Navar if this is the case show the
224:58 - navbar component which will'll create in
225:00 - a second otherwise just don't return
225:02 - anything so we'll just go into the
225:04 - components let's say
225:07 - naar and just create it
225:12 - so at this point this is going to be a
225:14 - component that only holds um so to say
225:18 - um something like only styling okay it
225:20 - doesn't have any logic at all so at this
225:23 - point I'll will just copy it and paste
225:25 - it so it's about 30 lines of code and
225:27 - you can just grab it from the GitHub
225:29 - repo and it's going to be into this file
225:32 - and I think we are never going to change
225:34 - this content at all so it just have a
225:36 - container with a Max width and then a
225:39 - container flags that holds the image
225:42 - which is our logo on the left and on the
225:44 - right it holds two buttons so the sign
225:47 - up button and login button and it is
225:49 - wrapped with a link so when you click
225:51 - that it'll take you to the
225:53 - authentication page so let's save and
225:56 - then we're going to import this from the
225:58 - components Navar and Navar jsx so let's
226:02 - save this file and if we go to a page
226:05 - like let's say
226:07 - jandoo and okay there we have a problem
226:11 - which is that they are next to each
226:12 - other but the thing is we will go into
226:14 - the page layout we we are going to
226:16 - change this Flex Direction and we're
226:19 - going to say the flex direction is going
226:22 - to be column or row depending on a uh
226:25 - condition so let's see Flex direction if
226:28 - we can render the Navar then the uh Flex
226:32 - direction should be column so that they
226:34 - are in the uh horizontal uh Direction so
226:38 - let's a column but if we cannot render
226:40 - the Navar then it should be in the wrong
226:42 - direction let's save and I think that
226:45 - should fix the problem so there we go
226:48 - now we see the uh Navar at the top and
226:51 - our content at the bottom so this
226:54 - content is not centered so for this
226:56 - we're going to go into here and let's
226:58 - say the margin X could be just Auto and
227:02 - if we save now we're going to see that
227:04 - this is been centered as well and I
227:06 - think we could delete this with because
227:08 - we already have this Flex one which
227:10 - means just contain the remaining part so
227:14 - if we just save that shouldn't be any
227:16 - difference if we refresh um actually
227:19 - there there is uh okay there is not so
227:22 - let's refresh um okay in the loading
227:25 - state it doesn't look proper so let's
227:27 - just put it and let's see how that look
227:30 - like if we just refresh okay so it is
227:34 - just better if we have that with so
227:36 - lastly let's do one more optimization
227:38 - which is just going to show a loading
227:40 - spinner while it checks if the user is
227:42 - authenticated so I'll just say if there
227:45 - is not
227:46 - user and it is loading in the background
227:50 - so when you first uh refresh your page
227:52 - this loading uh state is going to be
227:54 - true and this user is going to be null
227:56 - because it will try to fetch in the
227:58 - background if this user is authenticated
228:00 - or not and this is what that really
228:03 - means and let's make our code a little
228:05 - bit more readable I'll just cut it and
228:07 - I'll say const check if let's say
228:11 - checking user
228:14 - is authenticated and I'll just paste it
228:17 - so we'll just say if checking user is
228:20 - authenticated then we could just return
228:23 - a loading spinner so I'll just say page
228:28 - layout spinner okay so this is going to
228:31 - be our component that we can just have
228:33 - it at the bottom of our file so let's
228:35 - say const page layout spinner and this
228:39 - is is just going to be holding a flex
228:41 - which in indeed has a spinner inside so
228:45 - I'll just copy it and paste it which can
228:47 - grab it from the GitHub again so I'll
228:50 - just return this thing and let's import
228:53 - this spinner and let's see what is a
228:55 - spinner is so let's go
228:59 - here so basically just a loading spinner
229:02 - you can give a size a color and anything
229:05 - like that so let's say size is just
229:07 - going to be uh x large there we go so
229:10 - now if the internet connection is really
229:13 - slow then this will take a long time to
229:16 - check if user is authenticated and at
229:18 - that point we would be showing a spinner
229:22 - to indicate the user that they should
229:24 - just wait a little bit while we check in
229:26 - the background and we're not using this
229:28 - error state so we could just delete that
229:30 - so this is going to be the page layout
229:32 - component at this point we could just
229:34 - save this and let's quickly reiterate
229:36 - what we did so we are checking when
229:37 - should we render the sidebar and when
229:39 - should we render the Navar and depending
229:42 - on that we are just rendering them in
229:44 - our template so here we just change the
229:47 - flex Direction depending on the nav bar
229:50 - if it's going to be rendered or not and
229:52 - we are just centering this uh box
229:55 - content which is going to be the page
229:57 - content and lastly we have an if check
229:59 - that checks if this user is
230:01 - authenticated and while it checks uh we
230:04 - are just showing a spinner in the screen
230:06 - so that if the internet connection is
230:08 - slow our user is know that they should
230:10 - wait a little bit so this is going to be
230:12 - our component we could uh close this and
230:15 - we're going to go into this hook which
230:17 - we have a problem or let's say we could
230:19 - do one optimization so here let's say
230:22 - there is already an account called
230:25 - Jano
230:27 - gmail.com so if this is the case another
230:30 - user try to create an account with this
230:32 - email this will uh throw an error and it
230:36 - is not going to create this user do
230:39 - doent in the database but the thing is
230:42 - if we have a username let's say j i mean
230:46 - jandoo and another user come and try to
230:49 - create an account with this username so
230:52 - this will not throw any errors so
230:55 - instead we should check it manually
230:57 - because this function only checks for
230:59 - the email if it exists or not so even we
231:03 - try to take a look at here we're just
231:05 - going to have a if check here and how
231:08 - are we going to check if a user already
231:11 - exists with that username for this we
231:14 - are going to go into the Firebase
231:15 - documentation and we're going to see
231:18 - something like query so I'll just say
231:20 - query fire store and let's say you don't
231:23 - know how to use this we're going to go
231:24 - here and let's take a look at the
231:26 - examples so they have some simple
231:28 - queries let's take a look so they are
231:30 - getting the reference okay passing the
231:32 - collection database and the let's say
231:36 - it's going to be users collection for us
231:38 - and create creating a query with that
231:40 - and then they are calling a function
231:43 - called get docs so I'm going to go here
231:46 - and actually I'll just copy this two
231:50 - lines okay and then I'll just paste it
231:53 - here so I'll say this is going to be the
231:56 - users rep and import the collection from
232:01 - so let's see from here and then our fire
232:05 - store so we already have it it is coming
232:08 - from here and let's say it's going to be
232:10 - the users collection so now we have a
232:12 - reference to this collection and we're
232:14 - going to do a query so let's say query
232:18 - it's going to be the users rep and then
232:21 - we CLA so let's get that and we'll just
232:24 - say where the username is equal to this
232:29 - inputs. username so this is going to do
232:33 - a query for us in the background and
232:36 - we'll just say const query snapchot
232:39 - and we'll just say await
232:42 - get docks and passing the query not the
232:46 - get doc but that should be um so say
232:49 - plural so we'll say get dogs and just
232:51 - pass the query and this is what they are
232:54 - doing in the documentation as well okay
232:57 - so this is kind of give us a snapshot
233:01 - which is going to be type of array so we
233:03 - will just say if this is not empty which
233:06 - means that this user exists so we'll say
233:08 - if
233:09 - query so let say query snapshot. empty
233:13 - there is a property like this if this is
233:16 - not empty then we'll just return an
233:19 - error so let's say show toast it is just
233:22 - going to say user already exists or
233:25 - let's say username already exists and
233:27 - then we'll just return out of this
233:28 - function so let's save and let's try to
233:32 - do this we're going to go here let's say
233:35 - into the sign up okay so I'll just say
233:37 - sign up with the email we could just put
233:40 - anything so gmail.com but the username
233:43 - let's say jendo which we already have in
233:45 - our database so let's take a look in the
233:49 - authentication okay we have the Jano and
233:51 - jando so let's try to for the Jano we'll
233:54 - just say um okay that was the email let
233:56 - me show you the so to say
234:00 - username okay let's see so this is the
234:03 - jando but we're checking for the Jano
234:06 - that query is just going to check if
234:08 - there is a user like this so full name
234:11 - we could just put anything it doesn't
234:13 - really matter for the password one to6
234:16 - if we just try to sign
234:18 - up okay it says username already exists
234:21 - and it just doesn't create it in our
234:23 - database so let's refresh we had two
234:25 - users and we still have two users and
234:28 - that was the optimization that we just
234:30 - uh put it right here and with this this
234:33 - hook and this function should be
234:35 - completed now and we have our sign up
234:38 - with email password logic extracted into
234:41 - its own hook where we are just calling
234:43 - that with the function uh with the
234:46 - loading and error State we're getting
234:48 - and we are passing our inputs when we
234:50 - submit that okay when we click to the
234:52 - sign up button it takes inputs and just
234:55 - do that for us so this component is
234:58 - really readable we just see all of our
235:00 - components HTML CSS and the logic has
235:04 - been extracted from us so this is the
235:06 - beauty of using custom hook
235:09 - so now we can close this sign up and
235:12 - this hook we're going to just do one
235:14 - more thing before we get into the login
235:16 - functionality which is going to be that
235:18 - we're checking if user authenticated
235:20 - from the store in which in the
235:22 - background checks from the local storage
235:24 - but it is actually better to check it
235:27 - like this where we're getting it we are
235:29 - relying to Firebase okay it is a bit
235:33 - more safe I think so we'll just going to
235:35 - uh copy that and paste it here so let's
235:38 - rename this this as oath fuser and let's
235:41 - import these get the oath object and
235:44 - we're not going to use the loading State
235:46 - we could delete that and we're not using
235:48 - this store so yeah we are just checking
235:50 - if this user authenticated and we we are
235:53 - relying to Firebase and not the local
235:55 - storage so we could just save this and
235:57 - now let's get into the login function so
236:00 - we are going to create another hook
236:02 - called use login. jsx and we could say
236:07 - RFC delete this delete this return and
236:12 - let's just get our boiler plate so we'll
236:14 - just say show toast function to show
236:17 - some errors so show toast import that
236:20 - and then now let's take a look how do we
236:22 - even log in so let's go to the
236:25 - documentation so we're looking something
236:28 - like sign in with email and password
236:31 - let's click to that it is going to give
236:33 - us this uh so to say one line I'll just
236:36 - copy that paste it and get this hook the
236:40 - oath object and this is going to give us
236:42 - the function the user loading and error
236:45 - state so let's get into the function so
236:50 - just say const login is going to be an
236:53 - asnc function it's going to have a try
236:57 - catch in the catch we'll just show
237:00 - toast so let's say um error title and
237:05 - then error message as being the
237:08 - description
237:09 - and then the status which is going to be
237:11 - error and then in the try now this
237:14 - function will take the inputs okay again
237:18 - the email and then the password so
237:21 - inputs we'll just say if the
237:26 - inputs. email is empty or the password
237:29 - is empty we'll just return out this is
237:32 - function by showing a tost that says
237:35 - please fail all the fields but let's
237:38 - just take take this out of the try even
237:40 - if before we try we'll just uh check
237:43 - this if check and then we'll just say
237:46 - const
237:47 - user credential we could say and this is
237:51 - what they do in the documentation so
237:53 - when they sign in they call this
237:55 - function okay which in turn just returns
237:58 - us a user credential so we'll just say
238:01 - const user credential await this
238:04 - function pass email and then as as well
238:06 - as the password which is coming from
238:08 - inputs so if the email and password is
238:11 - correct this is going to give us the
238:14 - user credential so just say user cred
238:17 - and then we'll just get the fetch the
238:19 - user from our uh collection so let's say
238:23 - const and let's see so let's say you
238:26 - don't know how to fetch a document so we
238:28 - can go to here and let's say get a
238:32 - document so here I'm just trying to show
238:34 - you how you can use the documentation
238:36 - and I'll just zoom in a little bit
238:39 - so here let's take a look so get a
238:41 - document if we click to that it first
238:44 - get the reference and then the document
238:46 - snap so I'll just copy this let's go
238:50 - here um paste it so document reference
238:55 - import this fire store is going to be
238:58 - our database the user's collection and
239:01 - then the ID of the user which we could
239:03 - say user cr. user property. uid this is
239:08 - going to be the ID of the user that we
239:10 - are trying to fetch so we'll say get the
239:13 - dog and pass the reference so this is
239:16 - going to give us the user that is logged
239:19 - in so we're just going to try to set
239:21 - this in the local storage so let's say
239:24 - local storage. set item and the name was
239:28 - user- info if you remember and then
239:31 - we'll just say
239:32 - json.
239:34 - stringify which is going to be this
239:36 - document snap and there is a method
239:39 - called data that just gives you the data
239:41 - of this um so say this document so it is
239:45 - going to be something like this if you
239:47 - are fetching this user it is going to
239:48 - give us all this fields and we are
239:51 - getting this by calling this function
239:54 - and lastly to update our user interface
239:57 - we're going to be calling this uh login
240:00 - function which we have here so it takes
240:02 - the user and set the state with it so
240:06 - let's go into the use login by the way
240:08 - that should be JS not
240:10 - jsx okay so I'll just say const login
240:15 - here say const login
240:19 - user from use o store and it's going to
240:22 - take this
240:24 - state and give us the login function so
240:27 - we'll just say login user it should be a
240:30 - lowercase we'll just say Doc document
240:33 - snap. data which is that document it is
240:36 - going to be and at the end of of this
240:38 - file we'll just say return an object
240:41 - with the let's say loading error I mean
240:43 - loading State error State as well as the
240:45 - Logan function so we're not using this
240:48 - we could just skip that by deleting it
240:50 - let's save and there we go this is going
240:53 - to be our function that first checks if
240:55 - the fields are empty then just return an
240:57 - error but if the if they are not empty
241:01 - it is going to check if the email and
241:02 - password is correct if so it is going to
241:04 - fet the document set the local storage
241:07 - and log the user in by updating the user
241:10 - interface so now let's test it out I'll
241:12 - just uh okay we already saved this so
241:15 - let's go here um so we had an account
241:18 - called
241:20 - Jane So
241:22 - Jano
241:23 - gmail.com we just say 1 2 3 4 5 6 we
241:27 - just log
241:28 - in and we cannot log in because we
241:31 - didn't implement it in our component
241:33 - we're going to go into login component
241:35 - okay we'll just say oops
241:38 - um okay let's say con equal use login um
241:44 - so say hook and then this is going to
241:47 - return us the loading State error State
241:51 - as well as the let's see the loogan
241:53 - function so when we click to this button
241:56 - that says
241:57 - login um so here let's say on click just
242:01 - call the login function with the inputs
242:06 - which is the email and password
242:08 - so we could have a is loading State here
242:11 - as well is loading and we'll just put it
242:15 - and then we could have something like
242:17 - the error we had here so I will just
242:20 - copy this and paste it before this login
242:24 - um lugin
242:26 - button okay so if you have an error just
242:28 - show an alert that shows the error
242:31 - message so let's save and let's try to
242:34 - log back in again so
242:37 - jendo
242:39 - gmail.com 1 2 3 4 5 6 if so let's say
242:43 - seven which is the wrong password if you
242:45 - try to login it's just going to say uh
242:48 - invalid login credentials if we are
242:50 - logging with the correct one so from 1
242:52 - to six and it's load it loads and there
242:56 - we go now we are in the homepage let's
242:58 - see in our so application in the local
243:02 - storage we have this user info and the
243:05 - value is this state that we have here so
243:08 - we can also log out from here but we
243:10 - would like to add that log out
243:12 - functionality to here as well so for
243:14 - this we're going to go into this
243:15 - suggested header okay that was the
243:18 - component and when we click the logout
243:21 - uh button that was a link but that
243:24 - shouldn't be really that was for only
243:26 - design part now we could delete this
243:29 - okay and let's see what are we going to
243:31 - do so let's say this is actually going
243:33 - to be a button that has so let's say
243:36 - size of X small small and then
243:39 - background of transparent maybe I should
243:41 - just copy and paste it um these two
243:44 - lines background transparent and on the
243:46 - hover the background still is going to
243:48 - be transparent so font size 14 font
243:50 - weight medium color and it's going to
243:53 - have actually not going to have this
243:55 - style because in button it doesn't
243:57 - really need it so lastly we'll just have
243:59 - a loading State as well as the on click
244:02 - so we already had this use log out
244:05 - function or the hook plus say use log
244:08 - out which returns us I think three
244:11 - states so let's say const give me the
244:15 - log out function and the is loading
244:17 - State and we could take the error but I
244:20 - think it is not really needed so we're
244:23 - going to go here and we'll say on click
244:26 - to this function just call the handle
244:28 - log out and is loading is going to be if
244:32 - we are logging out and we could delete
244:35 - this as well as this line so now in
244:37 - instead of just having this um so to say
244:40 - hardcoded values we could get the
244:43 - authenticated user so say const o user
244:47 - so use o
244:50 - store
244:53 - state so state. user so state. user this
244:59 - is going to be our zand store or the
245:01 - state and now instead of this we'll just
245:04 - say oath
245:06 - user. username and then we'll just say
245:11 - instead of this Source let's say oath
245:15 - user. profile pick URL so let's save and
245:20 - we're going to add a bit more thing so
245:23 - now we see the Jano which is a username
245:25 - in this profile picture and let's just
245:28 - remove this name it doesn't really need
245:30 - it okay now we're just going to see an
245:32 - empty user profile picture and when we
245:35 - click to that it should take us to the
245:37 - page of Jano so we are going to go here
245:40 - and let's make this Avatar prep it with
245:43 - a link so I'll just say a link component
245:46 - which is coming from react ROM and we'll
245:49 - just say to this URL so back Tex dollar
245:54 - sign Cur braces oath user. username and
245:59 - we're going to just do the exact same
246:00 - thing for this
246:02 - text okay let's take it like this and
246:07 - then put it right here now when we
246:09 - collect this name or the profile picture
246:13 - just see in the left hand side it just
246:15 - shows the uh the URL that it'll it'll
246:18 - take us so if I click that now I am in
246:21 - the page of Jano so let's go into the
246:23 - homepage and if I click that it should
246:26 - log this user out so I'm just going to
246:29 - click it there we go it is not in the
246:31 - local storage and now we're in the
246:32 - authentication page so again this is the
246:35 - beauty of using a custom hook we didn't
246:38 - write this logic from scratch and we
246:40 - just reuse it in this component as well
246:43 - as that sidebar component so lastly
246:46 - let's just handle this Google
246:47 - authentication and then it should be
246:49 - completed but first let's fix something
246:52 - so if you are in this sign up I just
246:54 - want to have this text that says sign up
246:56 - with Google and if I am the I am in the
246:59 - login it should say login with Google so
247:01 - in our case it just has login so we can
247:04 - change this with a prop so I'll just say
247:07 - prefix okay and change this with the
247:11 - prefix okay and when are we calling this
247:15 - o form inside s form we're just going to
247:18 - show a prefix that says if it is the
247:22 - login okay then we'll just say log in
247:26 - and in the else case which means that
247:28 - we're in the sign up we'll just say sign
247:30 - up and if we just save let's take a look
247:34 - now I am okay let's just refresh this
247:36 - page okay now now it says login and if I
247:39 - click the sign up it still says login
247:41 - and I think I didn't save that so just
247:43 - say into here if we just save so it says
247:48 - sign up with Google and if I go to login
247:50 - it says login with Google and it is
247:52 - because we are adding that prefix
247:54 - depending on the state so when I
247:56 - collected this I would like to log this
247:58 - user with the Google let's go into the
248:01 - documentation again let's see how that
248:03 - works so up here we have something
248:06 - called um um so you sign in with Google
248:10 - if we click to that it is going to show
248:13 - us an example I believe so you sign in
248:16 - with Google so I'm just going to copy
248:18 - this entire line and we could create
248:21 - another custom hook for this but we're
248:23 - never going to be using it in other
248:24 - places and if you wanted to you can
248:26 - still create it but I think I'll just
248:28 - put that logic into here so I'll just
248:31 - get this I mean by pasting it import
248:34 - this hook get the authentication object
248:36 - and then let's just get the our boiler
248:39 - plates so const show toast in case if we
248:43 - have any errors so use show toast and
248:47 - then we're going to get the login
248:49 - function so let's say login user so that
248:52 - we can update our um so to say user
248:55 - interface so use o store and get the
249:01 - login
249:02 - function okay it was like this and then
249:05 - when we collected this Flex which is
249:08 - that entire uh container so let say
249:11 - onclick I'll just maybe put it like this
249:14 - on
249:16 - click I'll just say this function
249:21 - handle Google o and I'll just create it
249:25 - up here so it is going to be an async
249:28 - arrow
249:32 - function it's just going to have a try
249:34 - catch as always in the catch so this
249:37 - just save to get this formatting show
249:40 - toast uh that should be the title so
249:44 - let's say error description and then the
249:48 - status so in the try we're just going to
249:51 - do the exact same thing in the
249:52 - documentation let's take a look quickly
249:55 - see full social example so when you
249:58 - click that button it just calls you sign
250:00 - in with whatever the provider is so I'll
250:03 - just copy this and let's go here and
250:06 - actually it should be this function so I
250:09 - will just copy and we'll say const new
250:12 - user it is going to return us a wait if
250:15 - this is successful so sign in with
250:18 - Google and if there is not new user
250:21 - which means um so there is some kind of
250:24 - error and let's even check for that if
250:27 - there is error then just show a tost
250:30 - that shows the error message and then
250:32 - return out of it so here we'll just
250:35 - check if this is successful which you
250:38 - could say if there is new user we're
250:40 - just going to create a user document as
250:42 - we did up here so I think I can just
250:46 - copy this and actually we can even copy
250:50 - this because we're going to be uh
250:52 - setting this document into our
250:54 - collection and we're going to be setting
250:56 - that into local storage as well as
250:58 - logging the user in so I'm going to copy
251:00 - this entire thing and then just paste it
251:03 - but the thing is now we don't have any
251:05 - inputs because we are logging
251:07 - with Google so the email could be new
251:13 - user.
251:15 - user. email so let's see if there is in
251:18 - yes that we can see here the username is
251:20 - going to be something like this so let's
251:23 - say if this is the email so jando
251:26 - gmail.com we're just going to take this
251:28 - part and make that username so we can
251:31 - achieve this by using something called
251:33 - split and I think I'll just copy it and
251:37 - paste
251:37 - it okay so it takes the email of the
251:40 - user split it from here this add symbol
251:44 - and it just returns you the first part
251:46 - which is here okay so now this is the
251:49 - username it is going to be let's say
251:52 - jandoo and for the full name we could
251:55 - just take the full name uh from the
251:57 - Google account we'll just say new user
252:00 - okay that should be new user. user.
252:05 - display name so this is coming from
252:07 - Google as well uh for the profile
252:09 - picture we could take the profile
252:11 - picture of this user by doing something
252:14 - like this from the user object there is
252:16 - photo URL and the rest is just going to
252:18 - be the same no biography no followers no
252:21 - following no posts and the create that
252:24 - is just going to be uh dat. now so let's
252:27 - get the set document the document as
252:30 - well as the fir store object or the
252:33 - database
252:35 - instance and also we could just delete
252:38 - this comment as well as this one and
252:40 - we're not using this user or the loading
252:43 - State okay we could just ignore it and
252:46 - yeah that should be it and even if you
252:48 - are signing up or you're logging in that
252:51 - doesn't really matter you could use this
252:53 - function and it is going to either sign
252:55 - you up if you don't have an account or
252:57 - if you have already it'll just uh sign
253:00 - in okay so we could save and let's test
253:02 - it out I will go into here um into the
253:06 - project if I I click to this it is going
253:08 - to ask me this thing so let's see I'll
253:12 - just choose it and now I don't have an
253:14 - account but it'll just sign me up so
253:17 - there we go this is the user info that
253:19 - we got and in the console we have an
253:22 - error so let's see but first let's check
253:25 - it here so we got this
253:29 - user okay so this is my account and if
253:32 - you go into the authentication there we
253:35 - go we see this is the provider which is
253:37 - the Google and this is the user that is
253:40 - just logged in or the signed up so let's
253:42 - go here and check for the errors so here
253:45 - we have the cannot read properties of
253:47 - null so I think the oath user is not
253:51 - defined so let's see so inside the
253:55 - suggested header let's go there so just
253:57 - say
253:58 - suggested header and so while this is
254:02 - null it still tries to get the username
254:05 - or user profile picture and things like
254:08 - that so we could say if the oath user is
254:12 - empty then just return null and once
254:15 - this is available then we just going to
254:17 - return this content so let's save and
254:20 - there we go now we got the um so let's
254:23 - just refresh again okay we got the
254:26 - username as well as the profile picture
254:28 - and then this log up button so
254:30 - everything works fine now so we just had
254:32 - an error in the console and I just
254:33 - refreshed the page now it works it shows
254:36 - me this profile p picture that is coming
254:37 - from Google and in your case if you
254:39 - still get that error so here's the
254:41 - solution I just asked it to uh stack
254:44 - Overflow and a guy just posted this you
254:47 - need to just copy this entire line and
254:50 - then go into the HTML page so it's going
254:53 - to be index at HTML and just paste that
254:56 - to here and that should be working fine
254:58 - okay so now you should be seeing that
255:01 - Google profile picture so if we click to
255:03 - that it is going to take us to this user
255:05 - profile so I don't know if you have
255:07 - realized but we have one problem with
255:09 - the Google authentication it is that
255:12 - when we first sign up it is going to
255:14 - create this user document in our fir
255:16 - store users collection but when we sign
255:19 - in back so when we log in it is again
255:22 - going to try to this uh user document
255:25 - and it'll just try to create it in our
255:27 - database which is not optimal because it
255:29 - would be overriding that current
255:31 - document with this one so instead we
255:33 - should just make our code to realize if
255:36 - user is logging in or they are just
255:38 - signing up for the first time so how do
255:41 - we going to do that is just going to be
255:43 - we'll just check if this user exists or
255:45 - not which we can check by getting a
255:48 - document so I will copy this two lines
255:51 - and then let's go here I'll just paste
255:54 - it and I'll just say this is going to be
255:56 - the user reference and then the user
256:00 - snapshot okay so let's get the document
256:03 - function we already have let's get the
256:05 - get dog and the fire store so it's going
256:09 - to be the users collection and this is
256:12 - the user that we're checking so new
256:14 - user. user. uid so we should pass the ID
256:18 - as the third argument and then we'll
256:20 - just say user reference now this is
256:23 - going to give us a snapshot for that
256:25 - document and we could just check it by
256:28 - doing something like this so let's say
256:30 - users snap. exists which is a method and
256:34 - in this case we are not going to be
256:36 - doing this so because this is logging in
256:39 - oops I didn't mean to do this so we'll
256:41 - just go here and say log in and then
256:44 - I'll say const user document give me
256:47 - that uh user object which we can do with
256:50 - the data method and then we're going to
256:52 - set this in our local storage as well as
256:55 - the oath store um to this state so we'll
256:58 - just say local storage. set item that
257:02 - should be user Das info and then it's
257:07 - going to just take this user document
257:09 - and then let's say login user with this
257:12 - user document it's going to update that
257:14 - Global state so it's going to be this
257:16 - function and in the else case which
257:18 - means this user is signing up so let's
257:21 - just put a comment sign up and then
257:23 - we'll just paste what we have cut so we
257:27 - are creating this empty user document
257:29 - set it in our fire store in the users
257:31 - collection and set the local storage
257:34 - with this new user as well as with our
257:37 - uh Global state so now our code knows
257:40 - that if this user is signing in with the
257:42 - Google account or they are signing up
257:44 - for the first time so let's just save
257:46 - and maybe we could give a little bit
257:48 - spacing like this okay it just ignores
257:52 - that anyways so now you can add other
257:54 - providers which is like GitHub uh
257:57 - Facebook Apple Microsoft Twitter any
258:00 - kinds of these hooks that you want to
258:02 - implement so I just let that as a
258:04 - challenge for you but now we are going
258:06 - to go next and just uh try to fetch this
258:10 - data for the user profile and after that
258:13 - maybe we could add this edit profile
258:15 - functionality so in order to create this
258:18 - functionality where we just fetch this
258:20 - data it's going to be pretty simple but
258:22 - there is one thing that we need to add
258:24 - which is going to be another store
258:26 - object or state and it is because we're
258:29 - just going to store which user profile
258:31 - we are checking now we are in this
258:33 - profile and we're going to store that
258:36 - because we're going to be using it in
258:39 - multiple components so we're just going
258:42 - to have that as a global state so we
258:44 - could just share it into all of our
258:46 - components with that one hook so let's
258:49 - go ahead and create that user so say
258:52 - this store so what can we call this I'll
258:54 - just say user profile
258:58 - store.js and press enter now we'll just
259:00 - get the create function
259:02 - froment so import create from
259:07 - zent let's say so let's create this
259:10 - store I'll just say const use user
259:14 - profile store it is going to take the
259:16 - create function call it with this call
259:18 - back which returns us an object so we're
259:22 - going to go ahead and then just create
259:23 - the state I think we need to close that
259:25 - off okay so the state is just going to
259:28 - be the user profile initially it could
259:30 - be null because we not visiting any
259:32 - profile initially and then we'll just
259:35 - say set use user profile and it is going
259:39 - to take the user profile which is a
259:42 - function so this is kind of like a
259:44 - Setter function when you are having a
259:46 - use state so this is the state value and
259:49 - this is the setter function so we're
259:51 - just going to say set the user profile
259:54 - with the given user profile so this is
259:56 - actually looking like this but we can
259:58 - just make it a bit short and just delete
260:01 - it so this is going to have another
260:03 - function or method which is going to be
260:05 - the ad post but but we're going to be
260:07 - adding that later so now I'll just
260:09 - comment that out so that we know how we
260:11 - should be adding that and let's at the
260:13 - end just say export default this use
260:16 - user profile store so now we can save
260:19 - this file and maybe close it and then
260:21 - we're just going to create a hook that
260:23 - fetches the user profile so that we can
260:26 - show their data in this user header
260:29 - component so we're going to go into our
260:31 - hooks folder and let's say use get user
260:36 - profile by username so kind of a long
260:40 - name but again as long as it is
260:42 - self-explanatory it is okay so let's say
260:45 - rafc and then we're going to delete this
260:48 - for now so let's get the boiler plate
260:50 - since this is going to fetch some data
260:52 - it should have a loading state is
260:55 - loading set is loading let's delete this
260:58 - and import the use State initially it
261:00 - could be true because it's going to be
261:02 - running immediately and then let's get
261:05 - our show toast hook in in case we are
261:07 - showing some errors so let's get that
261:10 - and then let's see what do we have so
261:13 - we're going to have a use
261:15 - effect let's just initialize it for the
261:18 - unmount initially and now this is going
261:21 - to just get the user profile by the
261:23 - username so what does that mean it means
261:25 - that we're going to be using a query so
261:28 - I already showed you how we can use that
261:30 - which you can check from the
261:31 - documentation so I'll just go ahead and
261:34 - type it so let's have a function that
261:37 - gets the user profile which is going to
261:39 - be a async function and async function
261:42 - and then here at the end we're going to
261:44 - be calling that function and this is
261:47 - going to have a TR catch in the catch it
261:50 - will just show the toast with the error
261:53 - message I mean show the error with the
261:54 - error message and then before even we
261:57 - try anything let's just say set is
262:00 - loading to be true and then in the try
262:03 - we're going to get I mean we're going to
262:05 - have a query let's say query and this is
262:08 - going to be taking a collection as we
262:11 - show see in the documentation so the
262:13 - fire store our database and then inside
262:15 - the users collection because we're
262:17 - fetching a user where okay a query takes
262:21 - where Clause so where the username is
262:25 - equal to the username that this hooks
262:28 - get okay so
262:29 - username I think this is going to have a
262:32 - comma so is equal to and this is
262:35 - something that we have in the
262:36 - documentation and I think I just have to
262:38 - show that so we're going to go here
262:40 - let's say
262:43 - query so here there are things like not
262:46 - equal oops so here equals or not equals
262:51 - so in not in and I think we're going to
262:53 - be using a couple of these but um so
262:55 - just know that there is something called
262:57 - this equal okay and if you do it like
262:59 - this then it just means not equal just
263:01 - like we have in the programming so where
263:04 - the username is equal to the US username
263:06 - that this hooks gets as a Prem okay or
263:10 - the argument so this is going to be our
263:12 - query now we need to just call it which
263:14 - we can do by wait get dogs and then pass
263:20 - the Q or the query this is going to
263:23 - return us a query snapshot so const
263:27 - query
263:28 - snapshot and now we can just check if
263:31 - this is an empty uh empty snapshot or
263:34 - not so snapshot so we'll just say let's
263:37 - save so that we have this formatting if
263:40 - the query Snapchat is empty which means
263:43 - that this user is not found so we can
263:47 - set our user profile State as being null
263:51 - so let's go here use user profile okay
263:56 - that wasn't the hook so what was the
263:58 - name I'll just copy this at this point
264:01 - let's go here use user profile store
264:04 - okay now we need to import this let's go
264:07 - here that was a default export it's
264:10 - coming from here okay use user profile
264:13 - store and this is going to give us now
264:17 - uh the way we were using it up until now
264:19 - we were getting the state and maybe from
264:21 - the state the user profile or the set
264:25 - user profile function and then we were
264:27 - calling it here but if we just don't
264:29 - pass anything inside we're going to say
264:32 - con open up Cur Braes which we are just
264:35 - destructuring we just get the user
264:38 - profile and set
264:41 - user profile okay so this is a new way
264:44 - of using it that we just see so if we
264:47 - didn't use it like this the normal way
264:49 - that we were doing up until now would be
264:51 - something like this so let me just show
264:55 - that we would say the user profile okay
264:57 - let's just delete here and then call
265:00 - this with the state that gives you the
265:03 - user profile but instead we can just
265:05 - call it like this without any arguments
265:08 - so it is going to give us all of the
265:09 - values so let's just delete here and
265:12 - then comment out this so if the query
265:15 - Snapchat empty which means that user
265:17 - doesn't exist so just return out of this
265:19 - function and just say set user profile
265:22 - to be null but if this user exists then
265:24 - we're just going to get the data and set
265:26 - the user profile with it so here is how
265:30 - we do that so we'll just say let user
265:33 - document so initially it do just going
265:36 - to be undefined and we're just going to
265:37 - go here and let's say query snapshot
265:40 - which is going to have this for each and
265:42 - then there's just going to be one
265:44 - document but we're still using for each
265:47 - because it is in the format of array so
265:49 - we just say set user document with this
265:52 - doc data and then now we need to use it
265:55 - where we'll just say set user profile
265:58 - with this user document so yeah
266:00 - basically this is what we're doing and
266:03 - here we have some warnings let's just
266:05 - give a little bit formatting I'll just
266:07 - save and there we go so maybe like this
266:11 - it is better so here it says add the set
266:14 - user profile show toast and username so
266:18 - that any of these values change this use
266:20 - effect will run again so if we just
266:23 - let's just put set user profile username
266:26 - and show toast now if we just put it
266:29 - this show toast like this we're going to
266:31 - get an infinite Loop error it is because
266:34 - let's go here so this is a function and
266:37 - on each render this is going to be
266:39 - stored in a different place in memory so
266:42 - we need to cach this this is something
266:45 - related to react and I'm just going to
266:47 - cut this function and we're just going
266:49 - to wrap it with something called use
266:52 - call back so call back call it paste the
266:56 - function and as the second argument
266:59 - we're just going to put the toast so
267:01 - this basically caches so use callback is
267:05 - used to an infinite Loop that copilot
267:07 - says I think it listens us so here
267:10 - infinite Loop and then let's say also it
267:16 - caches the function so
267:20 - basically instead of Also let's just say
267:23 - by caching the
267:27 - function okay we could save and now
267:29 - we're not going to get any errors
267:31 - because this is not going to cause a
267:34 - infinite Loop and at the end end of this
267:36 - hook we're just going to return this
267:38 - state is loading user profile and we
267:41 - have a warning here let's just delete
267:43 - the react because we're not using it now
267:45 - we can basically call this hook in our
267:47 - profile page so let's go here into the
267:51 - profile page and then we're just going
267:53 - to call that hook up here so use get
267:57 - user profile by username and we're going
268:00 - to pass the username and how are we
268:02 - going to get that so let's say const so
268:05 - there is something called use location
268:08 - and I think we have used it so far so or
268:11 - maybe something like use prems I'm sorry
268:14 - so we're going to use the use prems hook
268:16 - which is coming from react router D so
268:19 - it is going to give us the
268:21 - username so let's go here import that it
268:24 - doesn't gives us so let's go here okay
268:27 - so we have the username and this is the
268:30 - username it is because here in the
268:33 - profile page we have this as a username
268:35 - is this is the dynamic value if it was U
268:38 - ID then we should come to that profile
268:42 - page and then call this as uid okay so
268:47 - this is what we are doing let's go into
268:48 - the app jsx and change it with the
268:50 - username so let's go into the profile
268:53 - page okay we are getting the user
268:56 - profile by the username and it is going
268:58 - to return us to States so const is
269:01 - loading and then the I think user
269:04 - profile itself now if the user profile
269:07 - is empty then we could show something
269:09 - like user not found and go back home so
269:13 - let's say if the is loading is false and
269:19 - there is no user profile which means
269:22 - that user is not found so let's just
269:24 - make our code a little bit more readable
269:26 - by doing something like this con user
269:30 - not
269:32 - found and then paste that so now it just
269:35 - reads as an English sentence so if user
269:38 - not found then we could just say return
269:41 - this user not found
269:45 - component which we can create at the
269:48 - bottom of our file so I think at this
269:51 - point I can just copy and paste that
269:53 - because it is just 10 lines of HTML and
269:56 - CSS from Chakra so it has Flex text
270:01 - component as well as the link which is
270:04 - coming from Chakra
270:06 - and let's get the router link so import
270:11 - link as router link from react router D
270:14 - so it says user not found and go home
270:17 - link when you click that it is going to
270:19 - take you to the homepage and we're going
270:21 - to be using it once we have no user okay
270:24 - so this is going to be our component at
270:27 - least so far so here we are showing the
270:30 - profile header but we should only be
270:32 - showing that if the user profile exists
270:35 - okay so I'll just cut that and I'll say
270:38 - if it is not loading and if user profile
270:43 - exists then return okay and return the
270:48 - user profile header but while it loads
270:51 - we could put something like a skeleton
270:53 - so I'll just say is loading and then
270:57 - again I'll just copy and paste maybe 10
270:59 - lines of code so it is going to be the
271:02 - profile header skeleton and I'll just
271:04 - put it at the bottom of our
271:06 - page or the file and you can get that
271:08 - from the GitHub so it is the profile
271:10 - header skeleton which has Flex component
271:14 - uh skeleton Circle and then two
271:16 - skeletons in the vertical Direction so
271:18 - we're going to go up here and then just
271:20 - paste it and let's make it a
271:23 - component okay so if it is loading we're
271:26 - going to see this uh skeleton and if it
271:28 - is not loading then we're just going to
271:30 - show the profile header so let's import
271:33 - this vertical stack and then the
271:36 - skeleton now let's save and we're going
271:39 - to go into the profile
271:41 - page there we can see um it says cannot
271:45 - get snapshot maybe we have some typo
271:48 - let's go here get
271:51 - snapshot okay so I just refreshed and it
271:53 - is working now but we have this loading
271:56 - skeleton for the rest of our lives it is
271:58 - because we didn't set this loading to be
272:01 - false in the finally block so either we
272:04 - success or fail this loading stage
272:06 - should be false and let's say console.
272:10 - log the fetched user so let's say user
272:13 - document and let's save let's refresh
272:15 - this again we have this loading state
272:17 - for one second did you see that let's
272:19 - refresh again okay it shows us that
272:21 - loading skeleton and then we got the
272:24 - user document which is this user we are
272:26 - checking from we are fetching from the
272:28 - username so we got the profile picture
272:31 - just basically every information every
272:33 - field that we have so now let's go into
272:36 - the user profile header and just render
272:39 - all these information right and I have
272:42 - added this followers in the background
272:44 - so in your case maybe that would be an
272:46 - empty array okay so if you're seeing why
272:49 - this user has this follower it's because
272:51 - I was testing off camera and I just
272:53 - added that so let's go here and just
272:56 - delete that sorry for any confusing that
272:58 - I just made so initially it should be in
273:01 - this empty format that we have for each
273:04 - user and we're we're going to be adding
273:06 - that follower I mean follow
273:07 - functionality in the incoming sections
273:10 - so okay enough talk let's go into the
273:12 - user profile header so profile header I
273:16 - think it was we're going to go here and
273:18 - then just render this data so first
273:21 - let's get the uh user profile state so
273:24 - just say const maybe Cur Li Braes and
273:27 - then user profile which is coming from
273:31 - our store so let's say use user profile
273:34 - store and just import that so this is
273:36 - going to give us the user profile now we
273:39 - can delete this name and as the source
273:42 - of this image we'll just say user
273:45 - profile. do profile pick URL and then
273:50 - we're going to go into let's see this is
273:52 - going to be the username I'll just
273:54 - delete that I'll say C Braes user
273:59 - profile. username so let's see what are
274:02 - we going to have else so this is the
274:04 - number of posts we'll just say user
274:06 - profile. posts. length so since this is
274:10 - an array we can just get the length and
274:11 - this is the number of followers so user
274:14 - profile followers and get the length get
274:17 - the following and then this is the full
274:20 - name okay so full name as well as the
274:24 - biography so user
274:28 - profile.
274:30 - bio now I think we could save this and
274:32 - let's take a look in the browser okay
274:35 - okay we got the profile picture username
274:37 - full name and number of followers
274:39 - following in posts if we just refresh
274:42 - that should be zero because we just
274:44 - fixed this in here right so let's go
274:48 - here and refresh that should be zero
274:51 - followers there we go now we are going
274:54 - to show this edit profile if we are
274:56 - visiting our own profile and if we are
274:58 - visiting profile of another user this
275:01 - should be follow or unfollow button so
275:04 - we are going to go here and if we are
275:07 - not authenticated then we shouldn't be
275:09 - seeing this button at all not the follow
275:12 - button and not the edit profile so let's
275:15 - have that if checks which we can again
275:18 - just make our code a little bit easy to
275:21 - read that we just do here so in the
275:23 - profile page we're just going to put
275:25 - this something like this okay it is the
275:28 - if check into a variable so you're going
275:30 - to understand now we'll just say const
275:34 - visiting own
275:37 - profile and authenticated so let's get
275:40 - the authenticated user first const oath
275:45 - user so use oath store and then give us
275:50 - that user so we'll just say if oath user
275:54 - exists and so if the user is
275:58 - authenticated and oath user. username is
276:02 - equal to the user profile that use do
276:05 - username so if this is equal to each
276:08 - other so if this is the true then user
276:10 - is visiting their own profile and we're
276:12 - just adding this o user to check if this
276:14 - user authenticated so I'll just copy
276:17 - this and we are going to wrap it like
276:21 - this so C races paste this if user is
276:25 - visiting their own profile we are just
276:27 - going to show this button so cut this
276:30 - paste this and there we go we are going
276:33 - to copy and paste this thing again and
276:36 - it is just going to say
276:38 - follow button okay so that should be
276:41 - visiting another user
276:44 - profile another say profile and
276:49 - authenticated and let's create this
276:52 - constant or the E check con visiting
276:56 - another profile and O So if this user is
276:59 - authenticated in username is not equal
277:01 - to the user profile. username so let's
277:04 - go here and check that if that works now
277:07 - we are there now we are in our own
277:09 - profile so we see the added profile
277:11 - button if we just go to the profile of
277:13 - let's say
277:16 - jendo there we go now it says follow
277:19 - button and we are getting the user
277:21 - profile of the chain if we go to the
277:24 - profile of John so say
277:27 - J there we go it is still in the follow
277:30 - button and then the data of the John now
277:33 - we could change the color of this button
277:35 - I believe so we are going to just go
277:37 - into here in this button and let's see
277:40 - what is going to be the styling so the
277:43 - background is actually going to be blue.
277:47 - 500 and then let's see color is going to
277:50 - be white on the hover State I'll just
277:53 - copy and paste it the background is
277:55 - going to be blue 600 and save it there
277:59 - we go and it didn't work okay so let's
278:02 - just make the color to be white as well
278:05 - so color should be white and now that
278:08 - says follow button with this styling it
278:10 - has hover effect and let's go into our
278:12 - own profile so I'll just click to this
278:15 - it says edit profile with this styling
278:17 - so now we cannot see bio for this user
278:20 - and it is because this user doesn't has
278:22 - any so let's go here and add it manually
278:25 - so if I just put something here random
278:27 - okay and if I update that we're going to
278:29 - go here refresh and we should see that
278:31 - up here there we go this is the bio of
278:34 - this user so now let's add this
278:36 - functionality where when we click this
278:38 - button we see a model that allows us to
278:41 - edit the profile so I don't know if we
278:43 - need to take a look at in the
278:45 - documentation for the model component
278:48 - but let me show that again so this is
278:50 - the model where we just call this three
278:53 - functions or import it from use
278:55 - disclosure so I'll just actually copy
278:58 - this and go here paste it import the use
279:02 - disclosure okay I already did I think
279:05 - from here and when we clict this
279:08 - function or the button it is going to
279:10 - call the on open so okay I think okay we
279:16 - have some warnings it's because we're
279:18 - not using this variables but we're going
279:20 - to create a model so let's say edit
279:23 - profile. js6 okay so here let's get the
279:28 - RFC and then we're going to get to here
279:32 - at the very bottom of our file we're
279:34 - just going to say if it is
279:37 - open if the model is open then just show
279:40 - this model so
279:43 - edit profile component import that and
279:47 - it is going to be taking the is open
279:49 - function we're going to be using
279:51 - that and then also the on close
279:56 - function give it as a prop so we could
279:59 - save this file and then let's go here
280:02 - before we just save this let's create
280:04 - this small model so for this model we
280:06 - can use something called the chakra UI
280:08 - templates so let's go here and let's say
280:10 - chakra UI forms template so you can go
280:13 - to this link and in the forms
280:16 - authentication at the very bottom you're
280:19 - going to see this edit profile uh
280:21 - component and if you go into the code
280:23 - you can copy that and paste it into your
280:26 - component just to have this exact same
280:28 - behavior that you can see here or this
280:30 - output so I copied that and I just Chang
280:33 - this a little bit and make it uh make it
280:36 - usable for us so I'll just paste it like
280:39 - this and you can get this in our GitHub
280:42 - repo so I will even comment this out and
280:45 - put it at the very bottom of our file so
280:48 - I'll just say copy and paste it as the
280:54 - starter
280:56 - edit profile model let's say okay at
281:00 - this point you should be copying and
281:02 - paste it so I will just put it as a
281:05 - comment and then just paste it up here
281:07 - so this is just 90 lines of code which
281:10 - is just basic HTML and CSS that has some
281:13 - inputs um form controls labels heading
281:18 - stack and all that kind of thing that
281:19 - you can take a look it WRA it is wrapped
281:22 - with a model that is taking the is open
281:24 - and on close functions or the props that
281:27 - we're sending so yeah so let's save and
281:30 - let's see the output so we're going to
281:32 - go here in our demo uh um okay if we
281:36 - just refresh I think we shouldn't have
281:38 - any errors in the console when I click
281:40 - to this there we go this is our model
281:42 - that we see now we are going to add the
281:45 - functionality where we can select an
281:48 - profile picture from our uh machine and
281:51 - then update this information and just
281:53 - submit it so first things first let's go
281:56 - ahead and add a state so that we can
281:59 - take care of this inputs so we're going
282:01 - to go here and let's say const
282:05 - inputs and set inputs which is going to
282:09 - be a use state with an object okay let's
282:12 - initialize it like this import the US
282:14 - state and give a little bit of space so
282:18 - this is going to take the full name
282:20 - username as well as the bio if you
282:22 - wanted to you can add email and password
282:25 - here and go just here and take a look at
282:27 - how you can update the email and update
282:30 - the password so I don't want to make it
282:32 - any complicated I'll just go ahead and
282:34 - update these fields and it should be
282:36 - enough in our case so we have this now
282:39 - we're going to go for each input and add
282:42 - that as a value so we'll just say value
282:45 - this is the username so inputs. username
282:48 - and we just skip the full name so let's
282:49 - go say value inputs. full name and
282:54 - inputs. bio so now when we type
282:58 - something in into this inputs we would
283:00 - like to change that state so for this we
283:03 - can add the on
283:05 - change function so let's say handle
283:09 - input or actually let's just immediately
283:11 - update it right here so if we are typing
283:14 - in into this input we are going to be
283:16 - only updating the full name because this
283:18 - is the full name input right so now here
283:21 - the exact same thing but we're just
283:23 - going to change the username so on
283:25 - change take the event get the value from
283:28 - this e. target. value and update the
283:31 - username so let's go here and update the
283:35 - so when we clict to this button where it
283:37 - says submit so let's say onclick and
283:40 - let's just call handle edit profile
283:44 - function which we will create in a
283:46 - second so let's copy this and by the way
283:49 - when need click this cancel button uh it
283:52 - should close the model I believe so here
283:55 - it is we have this on close um so if we
283:58 - clict this it doesn't close the model so
284:01 - let's go ahead and add that so let say
284:03 - on close
284:05 - I mean on click it is going to call the
284:07 - onclose function now if we save this
284:09 - we're going to get an error so let's
284:11 - just delete this for a second let's save
284:13 - and test it out if you open the model
284:17 - close it I mean click that cancel it's
284:19 - going to close it so let's go here take
284:22 - the handle edit profile function and for
284:25 - now it should
284:27 - only um the console log out the inputs
284:30 - so let's say console log CLG the
284:38 - inputs open up here so we have some
284:41 - errors let's
284:43 - refresh okay so this is let's say John
284:47 - or let's just put something so like this
284:50 - 1 2 3 just submit there we go we got all
284:54 - the inputs as expected bio full name and
284:56 - username values we can do one
284:58 - optimization so let's refresh and when
285:01 - we open that model initially the input
285:05 - values are empty that we can see here so
285:08 - what we can do is just take them take
285:10 - the value from the authenticated user
285:12 - and just put it here as the initial
285:14 - value so we're going to go here and
285:18 - we're going to get the authenticated
285:19 - user so const oath user and use um so it
285:24 - was oath store right and get the state.
285:29 - user so this is going to give us the
285:31 - authenticated user where we can say for
285:33 - the inputs the value is going to be the
285:36 - inputs. username or if this is empty
285:40 - then we can take the default value which
285:42 - is from o user object so we're going to
285:45 - do the same thing for this and for the
285:47 - full name as well we always skip that so
285:50 - let's go here now in the initial value
285:53 - the inputs are empty right so if we just
285:57 - refresh this there we go it checks and
286:01 - get the full name from the uh
286:03 - authenticated user user object get the
286:05 - username and get the bio since it is
286:07 - empty we just have this empty field so
286:11 - let's
286:14 - refresh so even though we have some bio
286:17 - it just gives us empty for some reason
286:20 - let's take a look bio here is empty and
286:23 - maybe we are setting state in a wrong
286:25 - way so full name
286:28 - username and okay we didn't set the bio
286:32 - or we actually did so let's console log
286:34 - the bio I don't know why this doesn't
286:36 - work so console log of user and let's
286:40 - see so it is coming from
286:43 - 30 okay so bio is empty for some reason
286:47 - it is because when we log
286:50 - in okay so when we logged in that was
286:53 - the state that we set in the local
286:55 - storage and then we go manually update
286:57 - it in here so that's why this is a not
287:00 - really important error so for now we
287:02 - could just ignore that and just know
287:04 - that if we had a bio information that
287:07 - would be here so we just have some kind
287:09 - of bug because we updated that later so
287:12 - anyways let's go in at this
287:14 - functionality when we click this button
287:16 - we would like to select an image from
287:18 - our computer and just show it here so
287:21 - how are we going to do this we can use
287:23 - an input for this so let's say if we had
287:26 - something like this input that should be
287:29 - self
287:31 - closing and then the type of of file
287:35 - okay and then okay let's see so we're
287:39 - going to just save this and let's go
287:42 - here it shows this choose file button so
287:46 - there is not enough space so it cannot
287:48 - show it but if we click that it is going
287:50 - to show us the pictures from our
287:53 - computer so I'm just going to click that
287:55 - okay so this is what I see but this
287:58 - looks really ugly and I don't want to
288:00 - see that instead I would like to click
288:02 - this button and still see this window
288:06 - okay so for this what we can do is to
288:09 - just say this is going to be hidden okay
288:13 - hidden and then this is going to have a
288:16 - ref so let's say file ref we're going to
288:20 - go here delete this console
288:22 - log
288:24 - const file R it's going to be a
288:29 - reference okay it could be null and when
288:31 - we click to this button it should
288:33 - actually go and click to this input so
288:36 - we'll say on click to this
288:40 - button file r. current. click so when
288:45 - you click to this edit profile button in
288:47 - the background it is just going to go
288:49 - and click to this input file and it is
288:52 - going to open that window for us let's
288:54 - test it out we don't see that choose
288:57 - file button now and I'll just click to
288:59 - this one and there we go this is the
289:01 - window that we got so now what happen if
289:04 - we select an image nothing happens right
289:06 - we need to render that image here for
289:09 - this we can create another hook and if
289:11 - you have watched my previous tutorials
289:13 - then you would see uh you would
289:15 - understand what we are going to do next
289:17 - so we are going to create a hook called
289:20 - use preview image and this is something
289:24 - uh common in react you would just create
289:27 - something some hook like this and you
289:29 - just call it whenever you want to render
289:32 - an image from your computer so so we are
289:34 - making this a hook it's because we would
289:36 - like to make our code readable and
289:39 - reusable because when we create a post
289:42 - we are also will be able to select an
289:44 - image from our computer so we can use
289:46 - that hook again and again so we're going
289:49 - to go into that hook and just try to add
289:51 - the logic so it was the use preview
289:54 - image right so let's get our
289:58 - Ace this is going to give us a boiler
290:01 - plate let's just delete that and this is
290:03 - is going to have one state which is
290:06 - going to be the selected file and set
290:09 - selected file the seter function so
290:12 - initially it could be null because there
290:14 - is no selected file so let's say we're
290:17 - going to get the const show toast which
290:20 - is going to be for the error
290:23 - handling and then let's say this image I
290:27 - mean this hook only allows 2 megabytes
290:30 - of images so we can just say con Max
290:33 - file size in bytes so if the image is
290:38 - larger than 2 megabytes we'll just say
290:41 - uh maybe size is too large please select
290:44 - a file less than 2 megabyte or something
290:46 - like that so this is how we can uh
290:48 - measure it in bytes so 2 * 1,24 * 1,24
290:55 - so which is 2 megabytes and then this is
290:58 - going to have a function so const handle
291:01 - image change once you select an image
291:03 - this function will run in the background
291:06 - and then it is going to let's say const
291:09 - file so this is going to take the file
291:11 - that you choose from your machine and
291:13 - then we're just going to do one check
291:16 - let's say if there is a file that has
291:18 - been selected and file.
291:22 - type. starts
291:26 - with image slash okay so this is just
291:29 - going to check if this is an image file
291:31 - if this is not we could render something
291:34 - so let's say if and in the else case
291:37 - we're just going to render a show toast
291:39 - or we'll just show a toast so show toast
291:42 - please upload an image file or let's
291:44 - just say please select an image file and
291:48 - we'll just say set selected file to be n
291:51 - but if this is an image file we're just
291:53 - going to check for the size if file.
291:57 - size is greater than Max file size in
292:01 - bytes which is 2 megabytes then we just
292:03 - have we'll just have another error that
292:05 - says uh file size must be less than 2
292:08 - megabytes okay that that is a nice error
292:11 - message and set the selected file to be
292:13 - null just return out of this function so
292:17 - don't run the remaining part which we
292:19 - will add so we will create a reader okay
292:23 - const reader by the way you can get this
292:25 - function from the uh SE overflow or chat
292:28 - GPD so it is really common function or
292:30 - hook so con new file reader and we're
292:33 - just going to add this function so
292:35 - reader on load and it is going to take
292:39 - this reader result and set it into the
292:42 - selected file and reader. read data as
292:47 - read as data URL and just pass the file
292:50 - so basically it is going to take the
292:51 - image file and convert it it into a base
292:55 - 64 string and then just set it into this
292:59 - input so at the end of our file we're
293:01 - just going to let's say return
293:04 - oops so return the selected file the
293:08 - handle image change function as well as
293:11 - the let's say set selected file now we
293:13 - can save this and remove this react
293:16 - import okay there we go we're just going
293:18 - to go into edit profile and let's say
293:22 - here use preview image so this is going
293:27 - to return us that values so con control
293:31 - space handle liit change control space
293:33 - selected file and control space get the
293:36 - set selected file function now what are
293:39 - we going to do with this function is
293:41 - going to be when this input file so
293:44 - where is it so on change so let's say on
293:48 - change when you select an image that
293:51 - function should run which is the handle
293:54 - image change and if it is successful
293:57 - then it is going to give us the selected
293:59 - file as that um Bas 64 string which we
294:02 - can put it here here so we just say
294:04 - selected file or we'll just say oath
294:09 - user. profile pick URL so this is going
294:14 - to be that default value if user didn't
294:17 - select any image so let's go here and
294:21 - save this there we go we're going to go
294:23 - here edit profile picture now we didn't
294:26 - choose any so we have this profile
294:28 - picture of the user if you select let's
294:31 - go I'll just change I mean select the
294:33 - John and if I open that up there we go
294:36 - now this is the profile of John and now
294:38 - if I clicked this cancel I would like to
294:41 - remove that selected file but if you now
294:43 - go here um okay it's already been
294:46 - removed so maybe we don't need to select
294:49 - that I mean set that so we're going to
294:51 - go here I think we're never going to be
294:53 - using this so let's just delete that
294:55 - okay there we go and I think the only
294:58 - thing that we left is going to be this
295:01 - function that actually it is the profile
295:04 - now we could put that logic here but
295:06 - instead let's just create a hook and
295:09 - maybe you could just take a challenge
295:11 - post the video and try to add that by
295:13 - yourself if you do do that now let's
295:16 - watch my solution so use edit profile.
295:19 - JJs so this is going to be our hook we
295:21 - are going to call it into this file and
295:24 - then it is going to update it for us in
295:27 - the background so while it edits our
295:30 - profile it is going to show some
295:32 - Spinners or maybe maybe something like
295:34 - that for that reason we would like to
295:36 - have a state called is updating so you
295:39 - can call this as loading or yeah like
295:42 - loading is loading but I'll just say is
295:44 - updating so it's just preference so
295:46 - let's import the use State and then
295:49 - we'll just get the authenticated user
295:52 - because this is the user that actually
295:54 - updates their profile so use oath store
295:58 - and give me the user okay this is not
296:01 - oath okay not o us but the user and then
296:05 - let's go we're just going to take the
296:07 - set off user oops maybe I'll just add
296:11 - that in a little bit so let's just get
296:13 - const show
296:15 - toast use show
296:19 - toast and then this is going to have
296:21 - that function cost edit profile that
296:24 - actually updates the users's profile so
296:28 - this is going to be a kind of Long
296:29 - Function but we will make it so this is
296:33 - going to take the inputs okay as a
296:35 - argument as an argument and then
296:38 - selected file to update their profile
296:41 - picture if they wanted to and let's go
296:44 - here we'll just first just do the
296:46 - optimizations or the error handlings so
296:49 - is
296:50 - updating or if there is not
296:52 - authenticated user you'll just return so
296:56 - when you click to this button okay for
296:59 - one second it'll update and at that
297:01 - exact moment if you click to the that
297:03 - button again it shouldn't call that
297:05 - update function again so that's why we
297:07 - are just adding this we'll just say if
297:10 - it is updating then just return don't
297:12 - try to edit the profile again but if
297:15 - this is not the case set up Ting should
297:17 - be true and then we would like to create
297:20 - an image in our storage right for the
297:24 - profile picture and then we would like
297:26 - to update the profile picture URL in the
297:29 - users document so how are we going to
297:32 - update or upload an image to storage
297:35 - let's go here let say
297:38 - Firebase storage upload so always just
297:43 - check documentation so we're going to go
297:45 - here upload from a string because I
297:49 - didn't show you I think so let's comment
297:52 - this out for a second so that we don't
297:54 - get any errors and here let's say
297:58 - console. log the selected file okay this
298:02 - is going to be the file that we
298:04 - select let's clear the console if I
298:07 - select an
298:09 - image so this is that giant string and
298:13 - this image has been represented by this
298:15 - long string and when we upload this
298:18 - image to our storage we're going to be
298:20 - uploading from a string okay so we'll
298:23 - just take the string convert it to the
298:25 - image and upload it to the so the
298:28 - storage so let's take a look how they do
298:31 - this so basically they are taking a
298:34 - storage reference and then they put the
298:38 - um so what do we call this they say
298:40 - child but this is going to be the path
298:43 - and you're going to understand that so
298:44 - now we will say something like profile
298:46 - pictures and then the ID of the user and
298:49 - then the example that we're going to be
298:50 - looking is going to be this because this
298:52 - is the data URL string and this is the
298:55 - image okay represented by that string
298:58 - we're going to call this upload string
299:00 - function pass the storage reference the
299:03 - uh image message and then this data URL
299:06 - as being the parameter and then just
299:08 - call it and it's going to upload it for
299:10 - us in the background so let's go here
299:13 - this is how we're going to be doing that
299:16 - um in the use edit profile let's contrl
299:19 - Z and here we'll just have a TR catch so
299:23 - now we are only going to be updating the
299:25 - profile picture if there is a selected
299:28 - file okay if there is a selected file
299:31 - then we're just going to upload that in
299:33 - image to the storage so let's get that
299:35 - storage reference above the try we let's
299:39 - give it space and let's say const
299:42 - storage reference and then ref call that
299:47 - get the storage let's import it and then
299:50 - the path could be something like the
299:53 - profile pics so that we know we are in
299:55 - the profile pictures so this could be
299:58 - anything okay but uh we need to make it
300:01 - readable so that we know what is going
300:03 - on and let's say o
300:05 - user. uid so it is going to be in the
300:09 - path of the user ID and con we're going
300:12 - to get the user document R so this is
300:16 - for another thing that we'll see so
300:18 - let's say con document and get the fire
300:21 - store
300:22 - users so this is not the path actually
300:26 - sorry that should be like this so users
300:29 - collection and then give the user ID so
300:32 - this will have that user document
300:33 - reference for this user and if there is
300:36 - a selected file a wait upload string
300:40 - that we see from the documentation pass
300:43 - the storage reference the selected file
300:46 - and the data URL as oops as this
300:50 - argument now once this has been uploaded
300:53 - we should update a variable let's say
300:56 - let URL initially it could be an empty
301:01 - string so let's say this is the initial
301:03 - value and once this picture has been
301:07 - uploaded we going to get that so let's
301:08 - say URL is going to be equal to await if
301:13 - I can type await get download URL so you
301:18 - can see that from the documentation it
301:21 - just gets the URL of the image so ref
301:25 - storage this is how you call it and then
301:27 - from the profile pictures give me this
301:30 - um this pictures URL so so this should
301:33 - be fine and let's handle the catch we
301:36 - forgot that show toast show a toast and
301:40 - if user select the image okay we are
301:43 - going to um so to say reassign this URL
301:46 - otherwise it's just going to be empty
301:48 - and let's create a object called
301:51 - updated
301:53 - user which is going to be having the
301:56 - full
301:58 - name as inputs. full name or if user is
302:02 - not updating their full name you'll just
302:04 - have the default value so again update
302:07 - the username with the inputs value or if
302:11 - the user is not updating their username
302:13 - then we'll just have the username that
302:15 - the user has and same thing for the bio
302:20 - get it from the inputs otherwise get the
302:22 - default value and for the profile
302:25 - picture
302:27 - URL if user has just uploaded a new
302:31 - profile picture get that otherwise if
302:33 - they are not up updating their profile
302:36 - picture just get the old one I hope it
302:38 - is readable and we also need to let's go
302:42 - here put a comma Three Dots and oath
302:45 - user now we don't really want to
302:48 - overwrite the other data out outside of
302:51 - this so the user had followers following
302:54 - count created that and if we don't put
302:57 - this it is going to delete all that
302:59 - arrays and just put these for values so
303:03 - that's why we are only updating the
303:05 - these fours and just keep the other
303:08 - fields as they are so I hope that makes
303:11 - sense let's go await now we're going to
303:14 - update this user document so update
303:17 - document and how are we doing this let's
303:19 - go into the
303:21 - documentation
303:23 - update document so just ask it basically
303:27 - click the first
303:29 - one then this is what we have get the
303:32 - reference from the users and pass the
303:35 - user ready from the users collection and
303:38 - then call this update document function
303:40 - with the reference and then the data
303:43 - that it should update with so we're
303:46 - going to do the exact same thing we got
303:48 - the user document reference from the
303:50 - user collection and then call this
303:52 - update document let's import this and
303:55 - then we'll say user document R and then
303:59 - just pass this updated user object and
304:02 - now we would like to update our local
304:04 - storage with this user as well so that
304:07 - everything is in sync with each other
304:09 - local storage set item user- info and
304:13 - that should be Json stringify of this
304:16 - updated user now we would like to also
304:18 - update the authenticated user State okay
304:21 - so that's why we had something like this
304:26 - so This set user does the exact same
304:29 - thing with the login function but it
304:31 - just makes it more readable that it says
304:34 - this actually Updates this state so
304:37 - we're going to go here and let's get it
304:40 - I'll just duplicate this and let's say
304:42 - set oath user and then just call that
304:46 - set user function so we are going to go
304:49 - here and let's say set oath user with
304:53 - this updated user document and then we
304:56 - would like to update the user profile so
305:00 - let's say set user
305:03 - profile and which is coming from use
305:06 - user profile store right we're going to
305:09 - get that function and call it with this
305:12 - updated user so why are we doing this
305:16 - and then this so we just like to have
305:19 - every state in sync the user profile
305:22 - State should be now this updated State
305:24 - and the oath State also should be this
305:26 - updated state it is because we are in
305:29 - the edit page right uh okay so so when
305:32 - we update this we are in our own profile
305:35 - so that user profile State should be in
305:39 - sync I hope it makes sense if not just
305:41 - pause the video and think about it a
305:43 - little bit okay and at the end we will
305:46 - just show a toast that says profile
305:48 - updated successfully with the status of
305:51 - success so I think this is everything
305:54 - that we need for this component right we
305:57 - got the shos and everything up here
306:01 - maybe we could just give a space here
306:04 - save like this and then we're just going
306:06 - to uh export this edit profile function
306:10 - so that we can call it as well as the
306:12 - updating State let's delete this
306:16 - react and comma so let's save and then
306:20 - we're going to go here call this um hook
306:24 - so delete this const it is going to give
306:28 - us the is updating as well as the edit
306:32 - profile function so use edit profile
306:37 - we're going to get that and this should
306:40 - be let's say an Asing function so when
306:43 - we click to that button it is going to
306:44 - run this function we'll just say try
306:47 - catch and in the try we'll say await
306:51 - edit profile and pass the inputs as well
306:54 - as the selected file if there is any and
306:57 - in the catch let's say show toast but we
307:01 - need to get that first so say con show
307:05 - toast use show toast we're going to get
307:12 - this with the error message show the
307:14 - toast and then set selected
307:19 - file to be null okay I think we should
307:23 - get that from here and lastly we'll just
307:27 - call that on close function so that it
307:30 - close the model and and hopefully that
307:33 - should be working fine lastly let's use
307:36 - this updating State we're going to go
307:38 - into the submit function and let's say
307:41 - is loading is going going to be this
307:44 - state let's save and cross our fingers
307:47 - that it should work so let's take a look
307:49 - at this document I would like to just
307:52 - update my bio okay I'll go here and I'll
307:55 - say hey this is new bio if I click to
308:01 - that it loads and profile updated
308:03 - successfully now we got that immediately
308:06 - here because we have updated our user
308:10 - profile State and if we take a look at
308:13 - the local storage let's go Application
308:16 - there we go now we got this new bio and
308:18 - we also updated our oath user State now
308:21 - let's take a look at the database here
308:24 - this is the new bio that we get so in
308:27 - the storage we don't have any images yet
308:29 - because we didn't updated our image
308:32 - right right or profile picture let's go
308:34 - here and I'll just select one so I'll
308:36 - just select the Bob let's say open that
308:38 - up and submit
308:41 - that and it uploads there we go so this
308:44 - has been updated and let's take a look
308:46 - here I'll just
308:47 - refresh so this is going to be the path
308:50 - that we had so a folder called profile
308:53 - pics that we had here okay it is going
308:57 - to uh put the profile pictures into this
309:01 - folder called profile pcks and then
309:03 - whatever the ID of the username so let's
309:06 - take a look if we go inside the ID of
309:10 - the user and then this is the image
309:13 - itself okay so this is the name of the
309:15 - image which is the ID of the user and it
309:17 - is just created now so I think this is
309:20 - the edit profile functionality let's
309:23 - just quickly reiterate what we did so
309:25 - first let's go into the profile page
309:29 - right so let's say profile page so we
309:32 - had this profile header and we are
309:34 - showing this if there is a user profile
309:37 - and also I forgot to show you if we just
309:39 - go here and search for a user that does
309:41 - not exist in our database so I'll just
309:44 - search for it and there we go it says
309:47 - user not found and go home it is because
309:50 - we are showing that if user not found
309:53 - then return this template that we have
309:55 - at the bottom of our page so if there is
309:59 - not user show that return statement and
310:02 - if you are loading show this skeleton
310:05 - and if you have the user profile show
310:07 - the profile header and inside here we
310:10 - were fetching this user profile
310:13 - information so the user profile which we
310:16 - are storing inside This Global State and
310:19 - when we click to this edit profile
310:21 - button we are opening that model so
310:25 - which is this one and inside that we are
310:28 - calling this hook which one is that so
310:32 - use edit profile which in turns update
310:35 - the user profile for us in the
310:37 - background so it takes the reference for
310:40 - the ref I mean storage as well as the
310:42 - user document it checks if so if user
310:45 - updates their profile picture if so
310:47 - upload that into the cloud into the
310:50 - storage and then update the user profile
310:52 - with these values if there is any any of
310:55 - these and then update the document set
310:58 - the local storage set the authenticated
311:00 - user State set user profile State and
311:03 - show a toast that says profile updated
311:05 - successfully and we are using this is
311:09 - updating and edit profile return
311:11 - statements or the variables in our
311:14 - component so yeah that was it now let's
311:17 - move on with the next functionality
311:20 - which is going to be follow and unfollow
311:22 - users so let's go to page of
311:25 - John so here we have the follow button
311:27 - if we click that we would like to follow
311:29 - this user for this let's go in create a
311:32 - hook and the reason is we're going to be
311:34 - using it in multiple places so the first
311:37 - follow feature will be here and then in
311:39 - the homepage we can follow users from
311:42 - this suggested component and then we can
311:44 - follow and unfollow users from this um
311:48 - post header that's why if we create a
311:50 - custom hook that we can use multiple
311:52 - times that would be pretty helpful and
311:55 - let's go into our vs code we're going to
311:58 - create a hook let's call it View follow
312:03 - user and you can call this as use follow
312:06 - and unfollow user but I'll just go with
312:08 - this name so let's get the boiler plate
312:12 - and delete the return at least for now
312:15 - so since we are going to be doing some
312:18 - asynchronous operation we could have a
312:21 - state called is updating so con is
312:26 - updating and set is
312:30 - updating
312:32 - let's get the use State initially is
312:34 - going to be false and then we're going
312:37 - to have one state that checks if we are
312:39 - currently following this user or not so
312:42 - let's say is following and set is
312:47 - following initially it is just going to
312:49 - be false and now we need to check in the
312:52 - initial state if we are following this
312:54 - user or not and that user will be the ID
312:57 - so let's say user ID that we're going to
313:00 - be following or unfollowing
313:02 - so in order to initialize it in the
313:05 - first render we'll use use
313:09 - effect let's initialize it like this and
313:12 - we're going to get the authenticated
313:14 - user so let's say const um o
313:20 - user use oath store and then get the
313:24 - user from the state so inside the use
313:27 - effect we are going to check if this
313:30 - user is authenticated okay if oath user
313:33 - is not empty then we're just going to
313:35 - say const is
313:38 - following is going to be a buan oath
313:42 - user. following array so let's say
313:45 - following that includes the ID of this
313:49 - user ID okay if it includes this user ID
313:53 - then it means we are following that user
313:55 - so we'll just say set is following to
313:59 - this state and this user effect will run
314:01 - whenever the O user value changes or the
314:04 - user ID changes and at the bottom we'll
314:07 - just say from this hook return the is
314:12 - updating is following and we're going to
314:15 - create a function let's say handle
314:18 - follow user
314:20 - so and this is going to be handling the
314:23 - uh following functionality let's create
314:26 - that cost handle follow user and async
314:29 - function we would like to get a couple
314:31 - of more things so maybe we could just
314:34 - delete this so that we can import other
314:37 - things so o user and then maybe set of
314:41 - user Setter function and then const
314:44 - we're we're going to need the user
314:47 - profile set user profile from our store
314:52 - so use user profile store and then also
314:56 - let's get the
315:00 - toast
315:03 - okay this is going to have a TR
315:06 - catch and in the catch as always show
315:09 - the tost with the so this is not correct
315:13 - the title the
315:16 - description and then the status and then
315:19 - even we try to um So Def follow the user
315:23 - we'll just say set is updaing to be true
315:26 - and then finally this state is going to
315:28 - be false now in the try we will would
315:31 - like to do two things let me just show
315:35 - you a diagram that I have here um let's
315:38 - go up here okay so this is John this is
315:41 - Jane the ID of JN which is one ID of
315:44 - Jane is two now JN wants to follow the
315:47 - Jane So when he sent this request what
315:50 - is going to happen is that the following
315:52 - array of John now will include the ID of
315:55 - Jane and followers array of Jane will
315:59 - include the IDE of John so now if we
316:01 - just take a look at this picture we see
316:03 - that John follows the Jane right the IDE
316:07 - of two and then Jane has a follower
316:10 - which is John and if it was an
316:13 - unfollow then we would be removing this
316:16 - idea of Jane from here now JN doesn't
316:19 - follow anyone and then followers would
316:23 - be removed from here and Jane doesn't
316:26 - have any followers so that was the two
316:29 - things first updating the follow
316:31 - following array of the current user and
316:33 - then followers array of the user to
316:36 - follow or unfollow so with that in mind
316:38 - let's get into the coding we are going
316:40 - to get two references so cons let's say
316:43 - current user reference and this is going
316:47 - to be document and at this point I'll
316:49 - just fast forward this because I already
316:51 - showed that in multiple times from the
316:53 - documentation so maybe you could just
316:55 - take a look at that so fire store from
316:58 - the users collection get the
316:59 - authenticated user by passing the ID so
317:03 - let's get this function and now we're
317:05 - going to get the other user so I'll just
317:07 - say con user to follow or let's say
317:13 - unfollow let's say ref as well then
317:16 - we're going to get document fire store
317:18 - users collection this user that we are
317:21 - getting as an argument and let's delete
317:24 - this import from here and now we're
317:26 - going to just update the document both
317:28 - of the documents so let's say a wait
317:31 - update document and now this is going to
317:35 - take the current user reference and then
317:37 - the object which is going to be the data
317:40 - that you would like to update so the
317:43 - following array of the current user
317:46 - right so if it is following already then
317:49 - we are just going to be removing the ID
317:52 - so we can use a function from Firebase
317:56 - which is called array remove and you can
317:59 - still see this from the documentation
318:01 - we are going to remove the ID of this
318:04 - user ID and then if it is not following
318:08 - which means that it is going to follow
318:10 - that so we'll say array Union which is
318:14 - adding that user ID into this array and
318:17 - we're going to be doing the kind of
318:19 - similar thing to the this user okay so
318:22 - I'll just say await user I mean update
318:25 - document I'm sorry so update document
318:28 - pass the reference and then the object
318:31 - so here we are going to update the
318:34 - followers array so followers and it is
318:37 - going to be if it is following then
318:40 - we're just going to remove that so
318:41 - array. remove the authenticated users
318:44 - uid and then in the else case we're
318:47 - going to be adding the ID of the
318:48 - authenticated user so now we actually
318:51 - update this documents in the database
318:55 - now to to update our user interface we
318:58 - would like to update these states which
319:00 - we have have this in the store so set
319:03 - user profile we'll take the new profile
319:05 - and set that state with that and in the
319:08 - oath store we're going to be doing the
319:10 - same thing where in the set user we're
319:12 - just taking the new user and set the
319:15 - state with that object so this is what
319:17 - we have let's go here and we're going to
319:20 - have one if check that says if it is
319:22 - already following so if this is true
319:24 - which means that now we will like to
319:26 - unfollow this user and if this is false
319:30 - in the else case is now we are trying to
319:32 - follow this user so we're going to go
319:34 - here and then update the oath user first
319:37 - let's say set oath user which we're
319:40 - taking a new object let's say supet the
319:43 - oath user fields and then we are going
319:46 - to change the following array by
319:48 - filtering it so o user. following.
319:52 - filter so we could just say U ID for
319:56 - each ID just check if it is not equal to
320:00 - the user ID so we are removing this ID
320:02 - from the following array of the
320:04 - authenticated user and then we're going
320:06 - to do the same thing for the set user
320:10 - profile where we're just going to return
320:12 - an object let me just scroll down a
320:14 - little bit so we're going to just spread
320:16 - the user profile and we're going to
320:19 - update the followers array so user
320:21 - profile. followers filter and just
320:25 - extract or remove the ID of the
320:28 - authenticated user so this is what we
320:31 - are doing that I showed you in the
320:32 - diagram and lastly let's update the
320:35 - local storage so that we have our
320:38 - applications state in sync with with
320:41 - each other so let's say local storage
320:43 - set item which was the user info and
320:49 - then this is going to take the
320:52 - Json stringify and then a new object so
320:56 - since we are keeping the authenticated
320:58 - user in the local storage we are just
321:00 - going to take take this exact same thing
321:03 - and then just paste it so in the local
321:05 - storage we're going to have the previous
321:08 - values of the authenticated user and
321:10 - just new updated following array and
321:14 - lastly the
321:16 - set is following will be false now let's
321:20 - handle the follow case it is going to be
321:22 - looking pretty similar but instead of
321:24 - removing or filtering we would be adding
321:27 - them so let's go set oops set o user we
321:32 - are going to just sprad all the fields
321:35 - and inside the following array we're
321:37 - going to add the new user ready and
321:40 - let's do the same thing for the um set
321:42 - user profile so set user profile and we
321:47 - are going to maybe I would just accept
321:50 - that okay we'll just sprad the user
321:53 - profile and in the followers array we're
321:55 - going to add the ID of the authenticated
321:58 - user and lastly let's just update the
322:01 - local storage so after here we just say
322:04 - local storage set item the user info
322:08 - take this object um close off close it
322:12 - like this and then let's go here and we
322:14 - would be just copying and pasting this
322:17 - thing because again in the local storage
322:20 - we are holding the authenticated user
322:22 - which is current user right which is us
322:25 - so let's go here and then now let's say
322:28 - set is following to be true because now
322:31 - we just handled that operation and
322:35 - finally we said set updating is going to
322:38 - be false we have that use effect that
322:40 - checks if it is following or not and
322:43 - yeah basically this is the entire
322:44 - function so let's just save and quickly
322:47 - reiterate what we did so we have state
322:49 - for updating and for the following and
322:53 - we are updating this following state by
322:56 - checking if the current user following
322:58 - array includes that user that we would
323:01 - like to follow or unfollow so if we
323:04 - already following that so which is here
323:08 - we are updating the state to be unfollow
323:10 - by removing it from the both arrays and
323:14 - we also did that in the background for
323:16 - the fire store database and then if it
323:19 - is unfollow I mean if it is follow then
323:21 - we are just adding those user IDs into
323:24 - the both States as well as the local
323:26 - storage to keep our application in in
323:29 - sync so now now when we use this
323:31 - function I think it'll be just clear so
323:34 - for this let's go into the user profile
323:36 - and let's just take this and then put it
323:40 - here okay I think this looks a little
323:42 - bit better so let's get the other hook
323:45 - which is going to be let's say it is
323:46 - going to return us const is
323:49 - following is
323:51 - updating as well as the function name I
323:54 - think it was handle follow user and then
323:58 - use follow user hook call it with the
324:02 - user ID and what is that going to be so
324:05 - in this case we are in the user profile
324:07 - page so this is the user that you would
324:10 - like to follow or unfollow so let's say
324:12 - user profile.
324:15 - uid and then maybe we could just put a
324:18 - question mark in case it is null so now
324:21 - when we clict to this follow
324:23 - button on click call that function and
324:27 - then it is going to have is loading to
324:30 - show that spinner and now instead of
324:33 - just follow this is going to be dynamic
324:35 - so if it is following which means that
324:38 - it is going to say now unfollow and if
324:41 - it is not following then it's going to
324:42 - say follow okay let's save and test it
324:45 - out we're going to go into the
324:48 - application so let's see okay this is
324:51 - our profile let's go to the profile of
324:57 - John okay so this user doesn't have any
325:00 - followers and now we would like to
325:01 - follow this user let's take a look at in
325:03 - the database so this is us and I think
325:06 - we removed this but maybe I added that
325:08 - in the background so I'll just delete
325:10 - that and let's go here in our profile
325:15 - okay we don't have any followers or any
325:17 - following and John also doesn't have so
325:20 - let's see joho okay there we go so
325:23 - followers following empty for this user
325:26 - and then for the John it is okay this is
325:28 - John it is also the same thing now if I
325:32 - try to follow this user okay it says
325:34 - cannot read properties of of of
325:37 - undefined reading U ID let's go
325:40 - here okay so the error is coming from
325:43 - here we are destructuring destructuring
325:46 - it from this use o store but it is not
325:49 - called user profile but it is instead
325:51 - called as user so we need to fix this
325:54 - and I think I'll just delete this line
325:57 - and just call it one by one so con o
325:59 - user give me the use o store give me the
326:03 - user and then the seter function so now
326:06 - that should be working fine let's go
326:08 - here and let's
326:11 - refresh okay now that should be working
326:13 - let's try to follow the chn I will click
326:16 - to this it is updating and there we go
326:19 - now it says one followers and the button
326:21 - is unfollow let's go here now John has
326:25 - one followers which is the ID of that
326:28 - user and this user is following this ID
326:32 - which is John so it is working fine even
326:36 - if we refresh this page it is still
326:39 - going to say unfollow because in the
326:41 - initial render we are checking that and
326:44 - setting that state so I hope it makes
326:47 - sense now we can use this hook in any
326:49 - component by only calling this line This
326:53 - hook and getting these function and then
326:56 - these two states and then just bind it
326:58 - to any button or anything like that and
327:01 - we're going to be adding this follow
327:03 - functionality to the homepage later to
327:06 - this component and then this one it is
327:08 - because we haven't created them for now
327:10 - and once we created the suggested user
327:13 - in the pulse component we will add that
327:16 - functionality but for now let's go into
327:18 - the sidebar and try to add this search
327:21 - user functionality first off we need to
327:24 - go and update the sidebar component
327:27 - because currently it is not really
327:29 - readable because because we have the
327:31 - sidebar items and we can't really put
327:33 - all this logic into this component but
327:36 - instead we're just going to create one
327:38 - component for each of these items so
327:41 - that each component has only one
327:44 - responsibility so I'll just delete this
327:46 - delete this icon and maybe search logo
327:50 - notification logo create post and the
327:53 - Avatar because we we are never going to
327:55 - use that in this component so instead of
327:57 - this sidebar items what we can do
328:01 - um so let's copy this thing okay we're
328:05 - going to go here let's say sidebar
328:08 - items. jsx and then get that boiler
328:13 - plate as always so here we are going to
328:15 - create one component for each of these
328:18 - so the home component search component
328:20 - notifications create and profile link so
328:24 - let's go here start with the home so
328:27 - sidebar home. jsx
328:32 - and the content is just going to be the
328:35 - same thing that we just copied so I'll
328:37 - just paste so it is going to be wrapped
328:39 - with a tool tip and then it is going to
328:41 - have a link so I think I can just copy
328:45 - and paste that home component okay so it
328:48 - doesn't have any logic at all you can
328:51 - grab that from the GitHub link it is
328:53 - going to be inside this home. jsx it has
328:56 - a tool tip that is going to be shown in
328:59 - the mobile
329:01 - uh Dimensions or mobile phones in the
329:04 - link we are going to take this user so
329:07 - that should be coming from Chakra and
329:10 - then let's import the router
329:13 - link from react router D and when we
329:17 - collected this link it is just going to
329:19 - take us to the homepage that we can see
329:22 - here get the icon get the box that says
329:25 - go to go to the home so if we just save
329:28 - this we're going to go here let's say an
329:31 - empty react
329:33 - fragment and then the first item we're
329:35 - going to have is going to be the
329:37 - home and let's import it okay so we're
329:41 - just going to be adding all those
329:42 - components one by one so we just added
329:46 - the home and let's add the search or we
329:49 - could just add that later and then we're
329:51 - going to go and add that notifications
329:53 - create and profile so let's go
329:59 - here notifications. jsx get the boiler
330:03 - plate and I think I'll just copy and
330:05 - paste it and don't get angry with me
330:07 - just copy and paste it it is because 30
330:10 - lines of HTML CSS no logic at all and
330:13 - this even has a link okay so it just
330:16 - says notifications with the icon so
330:19 - we'll just save and let's get it so
330:22 - we're going to have a search here and
330:24 - below that we're going to have the
330:26 - notifications import
330:28 - that um okay okay we already have and
330:31 - after the notifications what we had to
330:35 - have the create as well as the profile
330:37 - so let's go here say create and it's
330:42 - going to be the create post. jsx
330:44 - actually and then the profile a link
330:47 - that takes us to the profile page so
330:49 - let's say get that rafc and maybe let's
330:54 - copy and paste all of these again same
330:58 - thing 30 lines of code no logic at all
331:01 - that only takes you to the O page okay
331:04 - so this is coming from use o store okay
331:08 - and for the Avatar Source it just checks
331:12 - if this user has a profile picture if
331:14 - not just have it as an blank uh profile
331:17 - picture so we're going to save and let's
331:20 - go here by the way you can take all
331:22 - these components from the GitHub so I
331:24 - just need to mention that again we're
331:26 - going to have the create post here so
331:29 - create post and below that we're going
331:32 - to have a profile
331:37 - link so now I will provide you this
331:40 - create post link I mean create post
331:43 - component as well and let me just copy
331:46 - and paste it okay so I copied that and
331:49 - now I'm just going to paste it and I
331:50 - will paste it again and comment this out
331:53 - at the very bottom of the page okay it
331:56 - starts from the line 36 you can grab
331:59 - that and I'll just put a comment copy
332:03 - and paste as the starter code for the
332:10 - create post component okay so you can
332:14 - get that from the GitHub uh repo if we
332:16 - just save let's go here get the create
332:19 - post and lastly we're just going to get
332:22 - the search component and I'll do the
332:24 - same thing so let's say
332:29 - search
332:31 - jsx and then I'll copy and paste it so I
332:35 - copied that and I'll just paste it and I
332:38 - will paste it again to here so that you
332:41 - can have
332:42 - it as the starter
332:45 - code let's say which component we did
332:48 - that okay I'll just type it down copy
332:51 - and paste
332:58 - as
333:00 - okay copy and paste as the started code
333:02 - for the search component and now we're
333:05 - going to add the search functionality
333:07 - into this component but before that
333:09 - let's save this let's save
333:12 - this import the
333:16 - search save this file and then just
333:19 - delete everything here put these sidebar
333:23 - items
333:28 - here okay do we have have any errors no
333:31 - we don't let's save and the output
333:33 - should be exactly the same as before but
333:36 - now we see the profile picture of
333:38 - ourselves which is coming from the oath
333:41 - user state so now let's add this
333:44 - functionality where when we click to
333:46 - this button we're going to see a model
333:48 - that fetches the user for us so first
333:51 - let's create the model or let's first
333:53 - create the hook and then we're going to
333:55 - integrate it with the model so let's go
333:58 - here inside the hooks that says use
334:03 - search user. jsx or JS and then boiler
334:08 - plat delete the return for
334:11 - now let's have a loading
334:15 - State initially it's going to be false
334:18 - and once we call the function it is
334:20 - going to be true so let's go here we're
334:23 - going to fetch a user so let's say user
334:26 - set user this is going to be the
334:28 - searched user initially it could be null
334:32 - and then for the
334:34 - errors get the
334:39 - toast so now we're going to have a
334:41 - function let as C get user profile or
334:46 - let's say search
334:50 - user but since that will just return us
334:52 - the user profile we could just say
334:56 - get user profile sorry for for any
335:00 - confusion so async function this is
335:03 - going to take the username so Arrow
335:05 - function the argument will be the
335:07 - username and it's going to search it by
335:09 - the username of the user so for this
335:12 - what we can use as we did before we're
335:15 - going to be using a query so let's say
335:17 - try
335:18 - catch and
335:21 - finally set is loading to be false and
335:26 - then in the catch let say show toast to
335:28 - be uh
335:30 - um like this where we'll just put the
335:32 - error title description and then the
335:35 - status and let's say set user to be
335:41 - null because this is an error State and
335:44 - then in the try we'll just say con query
335:48 - and which was calling this query
335:50 - function we're taking a
335:53 - collection fire store the inside users
335:56 - collection where let's import the fire
335:59 - store
336:02 - so where the
336:05 - username field is equal to this username
336:08 - that we are getting as an argument so
336:12 - equals to the this username so let's
336:15 - import that I think this is too much so
336:19 - let's um okay it should be like this
336:22 - we're going to import the we clause and
336:25 - then now we can call this with the get
336:27 - doc function which is going to return as
336:30 - a query snapshot so call it this is
336:33 - going to be the result if query snapshot
336:36 - is empty which means that user not found
336:39 - so if this is the case let's just return
336:41 - out of this function by showing a toast
336:44 - that says user not found oops so let's
336:49 - get this and then what are we going to
336:52 - do but if this is not the case we are
336:55 - just going to set the user with the user
336:57 - document so even though this is a for
336:59 - for each there is only going to be one
337:01 - user and it'll be set to this state
337:05 - finally we are going to go and say
337:07 - return these three values from this hook
337:11 - and delete this react import save it and
337:15 - we can go into the search so here when
337:18 - we collected this search box or so this
337:22 - entire thing we would like to see a
337:25 - model so first let's build the UI and
337:27 - then we're going to integrate that hook
337:29 - with it so as we know so far the first
337:32 - thing that we need for a model is this
337:35 - three values on open function is open
337:38 - State and on close function so let's
337:41 - import this from Chakra and then when we
337:44 - collect this entire flag we are just
337:46 - going to call the unopen function that
337:49 - is going to open the model for us and
337:52 - after this tool tip we can just put the
337:54 - model and at this point I don't know if
337:57 - I should copy and paste it but let's try
338:00 - to write it at least a little bit so
338:02 - we're going to get the model where it is
338:05 - going to have the is open so maybe I'll
338:07 - just say is open and then it's going to
338:10 - have the on
338:11 - close and there is one more thing that
338:14 - we can add which is optional SL motion
338:17 - preset and if you just say slide and
338:20 - left this will make the model to come
338:24 - from the left side and we're going to
338:26 - see that and a model is going to have a
338:29 - model model overlay okay inside the
338:31 - model paste it let's import the model
338:35 - overlay from Chakra and then it is going
338:38 - to have a model content so I'll just say
338:42 - model content import that and let's give
338:46 - a little bit styling so background of
338:49 - black and border of one pixel solid gray
338:54 - and Max width of 400 pixels and then it
338:57 - just going to have a model header as as
338:59 - well as a close button so model header
339:02 - is just going to say search user and
339:04 - then the close button will be that
339:06 - button to close the model and then
339:09 - inside we're just going to have a model
339:12 - body which can have let's import that
339:16 - padding bottom of six and then we're
339:18 - going to have one form that has the
339:20 - input field so form not going to have
339:23 - any actions inside we are going to have
339:26 - one form control okay I will maybe let's
339:30 - just type it down so let's go
339:33 - here form
339:35 - control and then it's is going to have
339:38 - the form
339:39 - label let's say it's going to be the
339:41 - username and then after this label so
339:44 - let's
339:47 - just so it's going to have one input we
339:51 - should import that and it is going to
339:53 - have the
339:56 - placeholder let's just say something
339:58 - like as a
340:00 - programmer and then to get the state
340:03 - from it we could use a reference okay
340:06 - you could use a use State as well but
340:08 - I'll just go with the reference which
340:10 - are we are going to create and then at
340:12 - the very bottom it is going to have a
340:14 - flex let's go here after the form
340:18 - control that says the button that says
340:21 - search Okay import the
340:23 - button and let's go here for the input
340:27 - import it and onsubmit
340:30 - we're just going to call that handle
340:32 - search user so con onsubmit handle
340:36 - search user now let's just create all of
340:39 - these okay but first um okay let's do so
340:44 - con handle search user we're going to
340:52 - have which are taking the event because
340:55 - it is a form submission so we just say
340:57 - event. prevent
340:59 - default and then we're just going to
341:01 - call that function from our hook so
341:04 - let's get that con it is going to give
341:06 - us the user is loading as well as the
341:11 - get user profile
341:19 - function if we just call it like this
341:22 - then we'll just say let's get the
341:24 - reference as
341:25 - well const search reference from react
341:30 - user
341:33 - ref and we're just going to call this
341:35 - get user profile so let's say get user
341:39 - profile with the input value which is
341:42 - that reference we have here so if we
341:45 - just save and then let's say console log
341:48 - the
341:51 - user so I hope it wasn't any confusing
341:54 - we just created a model and have a for
341:56 - that has an input and then a button when
341:59 - we submit the form it is going to call
342:01 - this function which internally call this
342:04 - other function that we have created in
342:06 - our hook which returns us the user is
342:08 - loading in user profile function these
342:11 - are the states and this is the function
342:14 - and for the button we have is loading to
342:16 - be that is loading state so that we see
342:19 - that spinner so yeah we are keeping
342:22 - track of this input value by using a
342:24 - reference instead of US state I just
342:26 - wanted to show you how you can use that
342:28 - instead of a use state so you can grab
342:31 - that value from search draft. current.
342:34 - Val and once we call this function we
342:37 - would like to see the user let's save
342:40 - and let's go here if I click to this
342:42 - model will show up from the left because
342:45 - we added that motion preset and I'll
342:48 - just open up the console now user is
342:50 - null let's search for someone like Jane
342:54 - though which we have in our database so
342:56 - if I click that it is going to have that
342:58 - loading state
343:00 - okay it doesn't for some reason we'll
343:02 - just take a look and this is the profile
343:04 - of Jane that we are getting so which
343:06 - means that this function works if we
343:09 - search a user that does not exist so it
343:11 - is going to give us an error that says
343:13 - user not found so let's go here why this
343:16 - doesn't have that loading
343:18 - State
343:20 - um so is loading we put that into the
343:24 - button okay so maybe it is in the hook
343:27 - let's go here okay okay before we try
343:30 - we'll just say set is loading to be true
343:32 - and finally it's going to be false now
343:34 - let's search it again now it has that
343:37 - spinner for one second and if the if it
343:40 - was correct it's still going to has that
343:42 - loading so now that we got the user we
343:45 - would like to render it here and we can
343:47 - use a component where we had like this
343:50 - so this is the suggested user component
343:53 - we see the profile picture full name
343:55 - number of followers and then the follow
343:57 - button to follow that user so we're
343:59 - going to be using that exact same
344:02 - component so after so inside the search
344:06 - after this form I believe we're just
344:09 - going to say that if there is user if
344:12 - this is found then we'll just say render
344:15 - the suggested user component which are
344:20 - taking a
344:21 - user and let's close that off import the
344:25 - suggested
344:27 - user
344:30 - so it doesn't gives us so let's go and
344:32 - import it manually so suggested user it
344:36 - is not from here we should go one up
344:38 - from the suggested users and then just
344:41 - get the suggested user component so
344:43 - let's go here so it doesn't take the
344:46 - user it takes this because that was in
344:48 - the design part so let's get the
344:51 - user um if we do it like this we're
344:54 - going to get a couple of Errors so let's
344:56 - say user for the source user
344:59 - profile pick URL we could just delete
345:03 - the name and for the followers we'll
345:06 - just say
345:08 - user.
345:11 - followers. length and for the name user.
345:16 - full name we are fetching these data
345:19 - from this object so we have all these
345:22 - which is coming from the database so
345:24 - let's say full name uh number of
345:27 - followers username all this thing that
345:30 - you can see here so we're going to go
345:31 - here and let's take a look and for this
345:34 - state we would be also taking that from
345:38 - the hook but for now let's just save and
345:40 - let's see what are we going to see I
345:42 - think we are going to have an error that
345:44 - is coming from the homepage so if we go
345:47 - into the
345:48 - homepage for now I will just remove the
345:51 - suggested users so that we don't have
345:54 - any
345:55 - errors okay so we don't see that because
345:58 - we remove that but let's go search Jan
346:01 - do and let's search
346:03 - it okay this is the profile of chain if
346:06 - we search for someone like jando which
346:09 - is
346:11 - us uh okay it is not us right okay this
346:14 - is our profile I forgot sorry if we just
346:17 - search for jandoo it has one followers
346:20 - and we are following that user now let's
346:22 - handle this follow functionality it is
346:24 - going to be pretty simple because we
346:26 - already have that logic in place
346:29 - so inside the suggested user component
346:32 - we are going to delete this but instead
346:34 - let's delete the use State as well we
346:37 - are going to call that hook so const it
346:40 - is going to return us is following
346:44 - State um is updating State and then the
346:48 - handle follow user function so use
346:54 - follow user and then pass the user ID
346:57 - into that it will was accepting a user
347:00 - ID that we would like to follow or
347:02 - unfollow and it's going to be this
347:03 - suggested users ID and then we can have
347:07 - the con oath user we're going to be
347:11 - using that so I'll say use oath
347:14 - store give me the user from this state
347:18 - so let's give a bit space and when we
347:21 - call when we click to this follow button
347:23 - all we want to do is just call this
347:25 - handle follow user function so Hand
347:28 - handle follow user and it is going to
347:31 - handle the following and unfollowing for
347:34 - us and let's say is following then show
347:38 - the unfollow text in that button in the
347:40 - else case show the follow and the reason
347:43 - that we are getting this o user is
347:45 - because if we search for our own profile
347:49 - so let's say this user we don't really
347:52 - want to see that follow button for this
347:54 - user it is because we cannot follow
347:57 - ourselves so we're going to go here and
348:00 - cut this button for a second and we'll
348:03 - just say that if the oath users uid is
348:07 - equal to this user ID which means that I
348:10 - mean if it is not equal to this then we
348:13 - would like to show that button so if it
348:15 - is if this returns false then this is
348:19 - not going to run it is because we would
348:21 - be checking our own profile so if I save
348:24 - now we are not going to see that follow
348:26 - button because this is our own own
348:28 - profile so let's go here lastly for the
348:32 - button we just say is loading to be this
348:35 - is updating State and let's save and
348:39 - let's test it out so I'll just go and
348:42 - follow the Jan so let's search for him
348:46 - there we go so if I clicked
348:49 - that now this user has one follower even
348:52 - though it didn't update we're going to
348:54 - handle that let's go the profile of Jane
348:58 - Jane has one follower which is this user
349:01 - and now this user following these two
349:04 - users which is Jane and John so the
349:07 - reason that number didn't increment when
349:10 - we follow that user is because we didn't
349:12 - update this state so we are going to go
349:15 - here uh it is going to be this user
349:17 - state which is the searched user right
349:20 - this is where we set that document and
349:23 - from this hook let's just export the set
349:26 - user um Setter function we are going to
349:29 - use this let's go here um we are going
349:32 - to get this let's say set user function
349:35 - and then we are going to send it to the
349:37 - suggested users I mean suggested user
349:40 - component let's say set user is going to
349:42 - be this Setter function save this file
349:45 - and then we're going to go into the
349:47 - suggested user which is going to be
349:49 - coming as a prop so when we clict to
349:53 - this follow button instead of
349:55 - immediately calling this handle follow
349:57 - user function what we can do is just to
350:00 - create another function so let's say on
350:03 - follow user so I'm going to copy this
350:06 - and just come here let's say const this
350:09 - is going to be an async function so now
350:12 - when we call this function internally we
350:14 - would like to call this function that is
350:17 - coming from the hook so that it handles
350:19 - the follow for us in the background so
350:22 - we are just going to say await handle
350:24 - follow user and now we would like to
350:27 - update this St state where either we are
350:30 - going to increment the number of
350:31 - followers by one or just decremented so
350:34 - we can just come here and let's say set
350:37 - user and the new state is just going to
350:39 - be spreading the user and then the is
350:43 - following I mean the followers array is
350:45 - going to be changing so let's just go
350:48 - here and format this
350:50 - maybe okay we are going to spread the
350:52 - user and then we'll just say followers
350:54 - array so either we're going to filter
350:57 - this or we're going to add the
350:59 - authenticated users ID so we'll just say
351:01 - followers if it is already following
351:04 - which means that now we're going to
351:06 - filter the O users ID it is because uh
351:10 - we are unfollowing so user followers.
351:13 - filter and we're just going to remove
351:15 - the O users ID and if it is the else
351:18 - case then this user got a new sub I mean
351:21 - new follower which is going to be the
351:23 - oath user and if we just save this save
351:27 - it like this and maybe we should just
351:29 - put the ID let's say U ID and let's test
351:33 - it out so we're going to go here and
351:36 - maybe I'll just refresh to have a clean
351:40 - state so now we are following Jano so
351:44 - let's say Jan though and we're going to
351:46 - search so if we just unfollow that that
351:49 - number should decrement it is because is
351:52 - following is now true so which means
351:55 - that this filter function will run and
351:57 - remove this o users ID and the followers
352:01 - length will be minus one which we are
352:04 - showing it here so let's go and unfollow
352:10 - and okay it did not work so let's see
352:13 - why that is um so we send the set user
352:17 - right let's take a look okay this is the
352:19 - set user which is coming from user user
352:23 - and this is the setter State or the
352:26 - function and let's go here and maybe let
352:29 - just say o user that shouldn't really
352:31 - make any difference but let's test it
352:33 - out so I'll just
352:35 - refresh so let's see we are going to go
352:38 - here let's say Jan do and then if we
352:41 - just search Okay zero followers let's
352:45 - follow and now okay it has been updated
352:48 - we have one followers and if we unfollow
352:50 - that that should decrement and this is
352:53 - zero followers so this search user
352:55 - functionality is also working fine in
352:57 - future just try to take a look at that
353:00 - in the so let's close that in the mobile
353:03 - Dimensions it should also work fine
353:05 - let's open that up there we go this is
353:07 - the search user and let's just search
353:09 - for
353:10 - ourselves and we don't see that follow
353:13 - button and the next thing that we can
353:15 - build um could be that suggested user
353:18 - component so let's build that first
353:21 - let's just create a custom hook that
353:23 - fetches the suggested users so let's
353:26 - create this use get
353:30 - suggested users.
353:33 - JS oops we have one problem okay not KS
353:37 - but that should be
353:40 - JS okay so let just say rce delete the
353:45 - return and let's have a loading State as
353:49 - always so this could be true initially
353:52 - because this function or this hook will
353:54 - immediately run whenever we call it and
353:56 - then let's get the suggested users so
353:59 - let's say suggested users State and
354:03 - initially it could be an empty array and
354:05 - then we're going to fill that and let's
354:07 - get the oath user you're going to see
354:09 - why so use oath store and then get the
354:14 - user lastly get the show toast
354:21 - function so we would like to call a use
354:24 - effect to fetch that users so let's say
354:27 - use
354:33 - effect so inside we're going to have a
354:36 - function that says get
354:39 - suggested users an Asing function and
354:43 - we're going to be using collect I mean
354:46 - query for this so let's say try catch in
354:50 - the catch show the toast with the error
354:53 - message and then in the try we're going
354:56 - to do the query so first let's get the
354:58 - reference so users ref this is how we
355:02 - use uh queries so
355:05 - collection fire store and then the users
355:09 - so inside the users collection we are
355:11 - going to create our query so let's say
355:13 - query and this is going to be a kind of
355:15 - long one so I will open up parenthesis
355:17 - and then just go below so I'll just say
355:20 - users rep and it is going to take a work
355:24 - class where the U ID so we can use
355:28 - something called not in which is from
355:31 - documentation that I showed you
355:32 - previously and the third argument should
355:35 - be an array so uid shouldn't be inside
355:40 - here so it is the oath user. uid it is
355:44 - because we don't want to suggest
355:46 - ourselves in the suggested user
355:48 - component and also we want we don't want
355:51 - to suggest the users that we already
355:54 - follow so we are just going to say oath
355:57 - user do following and this is an array
356:01 - so it is going to be a n array for that
356:04 - reason we are just going to put this
356:06 - three dots to to get the following items
356:09 - one by one so that it is not necessary
356:12 - and then we'll just say order
356:16 - by order
356:18 - by with u ID and then lastly we want
356:23 - only three uh pre users to uh suggest so
356:28 - it's going to be limited by number of
356:29 - three and then this is going to give us
356:32 - a query Snapchat so let say cost query
356:35 - Snapchat aate get docs past a query in
356:40 - it and we're going to have a users we
356:43 - say const users
356:45 - array and then we'll just map through or
356:48 - for each to push the user to this array
356:51 - and we want to have the ID so I'll just
356:54 - cut this so users start push and object
356:58 - three dots document data so this is
357:00 - going to spread that and we'll just say
357:02 - the ID should be document. ID so this is
357:06 - a really really common usage with
357:08 - Firebase when you get a query snapshot
357:10 - you for each that and for each document
357:13 - if you are pushing into an array then
357:15 - you create an object with spreading the
357:18 - document. data and then creating an ID
357:21 - getting that ID from this document so
357:23 - that in react when you use map method so
357:26 - you don't get any key errors so lastly
357:29 - we'll just say set suggested users
357:33 - should be this users array and finally
357:36 - let's say is loading should be false and
357:40 - here let's just say set is loading to be
357:42 - true and then we are going to call this
357:44 - suggested user functions only if the
357:47 - oath user exists okay if user is
357:50 - authenticated then just call this
357:52 - function and the thing that we need to
357:55 - add here is going to be the oath user as
357:58 - well as the show toost function and at
358:00 - the end let's just give a little bit
358:02 - space we're going to return the is
358:03 - loading as well as the suggested users
358:06 - component so this is the entire function
358:08 - let's quickly reiterate what we did
358:10 - let's Del this react okay so we have a
358:13 - loading State suggested user State and
358:16 - this is initially true and this is an M
358:18 - array so we got the oath user show toast
358:21 - and we are calling this use effect which
358:24 - has a function and this function is only
358:26 - being executed it if the user is
358:29 - authenticated and inside this function
358:31 - we are getting the suggested users which
358:33 - uses a query and we are making a query
358:37 - to the users's collection where the uid
358:40 - is not in this array so we don't want to
358:44 - suggest ourselves so the O user uid and
358:48 - then we don't want to suggest users that
358:50 - we already follow and we put three dots
358:53 - to get the elements one by one instead
358:56 - of having a necess array so order by uid
358:59 - and only give us three users and execute
359:03 - this query with this get doc function
359:05 - which will give us a snapshot and for
359:07 - each that snapshot get the document as
359:10 - well as an ID set suggested users to
359:12 - this user array so this users array I
359:15 - hope it makes sense now we're going to
359:17 - be calling this uh custom Hook by
359:19 - getting this is loading and suggested
359:21 - users function I mean state so let's go
359:25 - into the suggested users component so it
359:28 - is going to be this one and here we are
359:31 - just going to call that function or the
359:34 - hook so let's say use or before that
359:36 - let's say const we are going to get the
359:38 - is loading State as well as the
359:41 - suggested users array and then we're
359:44 - going to say call this hook we're
359:47 - getting it from here and let's say if it
359:51 - is loading you could return something
359:53 - like uh a skeleton or spinner in in my
359:56 - case I'll just null but you can add that
359:59 - so I'll just put a comment optional so
360:03 - optional render
360:06 - skeleton okay so we have this suggested
360:09 - user component one by one which is only
360:12 - for design part that we created so I'll
360:14 - just uh Delete all of these and instead
360:17 - I'll just say suggested users. map for
360:22 - each
360:23 - user call this or return this suggested
360:27 - user component where it was taking the
360:29 - user and as well as just set a key so
360:33 - we'll just say user. ID okay so we have
360:37 - a warning let's just delete this one and
360:40 - map close that
360:43 - off so okay if we just save we can't see
360:46 - that because in the homepage we don't
360:48 - show the suggested users component let's
360:51 - comment this OD and then we're going to
360:53 - go and let's take a look I'll just
360:56 - refresh
360:59 - okay we only see the Jano here because
361:02 - this is the only user that we don't
361:04 - follow and let's go and for the jle you
361:09 - would like to unfollow that user as
361:11 - well okay so oh we have one error what
361:15 - that says so we are getting this error
361:17 - it is because it is related to this use
361:20 - follow hook so let's go here use follow
361:23 - user and the reason is we have created
361:27 - this fun function in a way that it
361:29 - always update the set user profile and
361:32 - we are only having this state if we are
361:34 - in a profile page so now we have this
361:38 - set user profile to be this user but
361:40 - when we are in the homepage there is no
361:43 - user profile that we are visiting and
361:45 - when we do a follow or unfollow from
361:48 - this homepage this is still trying to
361:52 - set this state and in this case we don't
361:55 - have anything inside the state so this
361:58 - followers thing just gives gives us an
362:01 - error so we are calling the set user
362:03 - profile here as well as here now we need
362:07 - to just um s say put a if check before
362:11 - that so we'll just say if the there is a
362:14 - user profile then just call this set
362:17 - user profile and update it but if there
362:20 - isn't only update the oath user and this
362:22 - is completely fine let's say if there is
362:26 - user profile and then just then call it
362:30 - okay we we could save and let's test it
362:32 - out again I'll just refresh to have a
362:35 - clean State and we're going to go let's
362:38 - say John do from here that hopefully
362:41 - shouldn't give us any errors I'll just
362:43 - say
362:44 - unfollow okay now we don't have let's
362:46 - refresh again so in the suggested users
362:50 - we have jando as well as Jano because
362:52 - these are the users that we don't follow
362:55 - if we go here and follow one of them
362:58 - so the suggested users component has
363:01 - been updated and we only see the J now
363:04 - because John is been followed by us
363:06 - let's follow this user as well and this
363:10 - has been updated again we don't see that
363:12 - and if there is not any suggested users
363:15 - we should remove this header as well so
363:17 - let's go into the suggested user
363:20 - component or the suggested users I'll
363:24 - just say suggested users so here we only
363:27 - want to see this header if there is a
363:30 - length in this state so I am going to
363:33 - actually cut this for a second and I'll
363:36 - just say suggested
363:38 - users. length if it is not equal to zero
363:42 - and only then render this portion so if
363:46 - we save that should be working
363:49 - fine okay we don't even see that
363:51 - suggested for you thing or the title
363:54 - let's unfollow one of those users I'll
363:56 - just say
363:57 - call the jendle and unfollow that and
364:01 - let's take a look now this is the
364:04 - suggested user that we can see in this
364:06 - component so with that we have created
364:08 - the suggested users component so far we
364:11 - don't really have any uh so we don't
364:13 - have too much accounts so that it just
364:15 - doesn't look any nice but if you add
364:18 - other accounts so if you create and add
364:20 - profile pictures maybe some followers
364:23 - this section would look really great So
364:26 - currently it just fun functions really
364:28 - well it's because so let's go here we
364:31 - only have three users so imagine you had
364:33 - like 10 20 30 users here then on every
364:38 - every refresh maybe these users would be
364:41 - different so you would follow them
364:43 - unfollow them and that would be changing
364:45 - in like continuously so let's add one
364:48 - more optimization to this search
364:51 - functionality it is because whenever we
364:53 - search for a user let's just say joh do
364:56 - if we search that while it search this
365:00 - state should be null so let's go here
365:02 - and before we try to call this query
365:06 - we'll just say set user to be null and
365:10 - this will just reset the state and I
365:13 - think we could save and here we have the
365:17 - set user okay so we're going to go and
365:20 - test it out if I just search that again
365:23 - so it is null and then we are getting
365:25 - that user and this is this slight
365:27 - optimization that we just made now let's
365:29 - continue with the create post
365:31 - functionality so when we click to this
365:34 - uh create post button we would like to
365:36 - have a model to put our caption as well
365:39 - as to select the image we're going to go
365:41 - into the create post component and at
365:45 - this point I will just provide you a
365:47 - model so this is the first thing that
365:49 - you would copy and paste to create this
365:52 - component and then the second thing is
365:55 - I'll just say two and and again copy and
365:59 - paste for the model and I will just
366:03 - paste it to here and comment this out so
366:06 - that so that you guys can copy and paste
366:08 - it from this file in the GitHub repo and
366:11 - below this tool tip we're just going to
366:13 - paste it and the reason that I'm just
366:15 - pasting it is because we see that models
366:17 - multiple times and I don't want to waste
366:20 - any time to writing this components so
366:23 - let's import all of these overlay
366:25 - content header close
366:28 - button
366:30 - body text area input so this is going to
366:34 - be an icon coming from react icons get
366:36 - the footer as well as the button let's
366:39 - get the is open and un close before that
366:42 - let's get the icon and then
366:46 - const get these from this hook so when
366:49 - we collected this FL let's say onclick
366:53 - call the onop function let's save and
366:56 - let's take a look I will click to this
366:58 - and let's see there we go this is the
367:00 - model that we see so it has this Tex
367:03 - area the icon and then the post um
367:06 - button so this is exactly the output
367:09 - that you can see maybe just uh 20 many
367:12 - lines of code so now let's just store
367:14 - this caption in a in a state so for this
367:17 - I will create one state say
367:20 - const
367:23 - caption and set caption I'll just say
367:26 - use state of an empty string and then
367:29 - we're going to go here value is going to
367:32 - be the caption on change we're going to
367:35 - set the caption to the E target. value
367:38 - and for the input so this is hidden okay
367:41 - if we just delete that we would see this
367:43 - choose file button so let's see where
367:46 - that is okay it is here now we're going
367:49 - to hide that and when we clict to this
367:51 - we would like to open that window to
367:54 - select images we're going to go we're
367:56 - going to goad head and say hidden and
367:58 - let's create a ref con file ref or let's
368:02 - just say image
368:06 - ref call the user it could be null and
368:09 - when we click to this so we say on click
368:12 - image R current. click and we just say
368:15 - ref this is the image ref and that
368:19 - should be working fine and what are we
368:22 - going to do next now we also want to
368:24 - render the selected image for this we
368:27 - are going to go ahead and call our hook
368:30 - which was the use
368:31 - preview image I believe let's say let's
368:35 - see so use preview image okay we are
368:38 - going to call this it doesn't gives us
368:40 - so let's import
368:41 - manually it is coming from here is this
368:45 - correct yes use preview image let's say
368:52 - const three values the handle liit
368:55 - change function select file as well as
368:58 - the set selected file we are going to go
369:01 - below the um this icon and it is going
369:05 - to be here so below this we would like
369:08 - to so we would like to render the image
369:11 - here so let's go and say if there is a
369:15 - selected file then render this right
369:18 - hand side so we are going to have a one
369:21 - Flags let's get it and this is going to
369:25 - have a couple of props margin top of
369:27 - five with full position
369:32 - relative so
369:35 - position and then justify content to be
369:42 - Center and then inside it is going to
369:45 - have the selected image so I'll just say
369:47 - image as the source to
369:51 - be so let's import that first from the
369:54 - chakra Source will be selected file and
369:58 - for the alt let's just
370:01 - say
370:02 - selected image and below the image we
370:05 - would like to have a close button which
370:07 - will just say position absolute and just
370:10 - put it at the top so top two right to
370:14 - onclick um remove the selected image
370:17 - let's import this so I just copyed and
370:19 - paste it maybe you could just uh do the
370:21 - same or type it down from scratch and
370:25 - let's save but we have one okay we have
370:28 - one warning that says you're not using
370:30 - this function and we're going to add
370:33 - that into here so on change whenever a
370:36 - user changes or selects an image we're
370:39 - just going to call this function let's
370:41 - save and let's see okay we're going to
370:45 - go here and click to that
370:49 - icon we got all of these images and
370:52 - let's just select the chain and it has
370:54 - been rendered here if we click to this
370:57 - it is going to make the selected state
370:59 - to be null where we just see that here
371:02 - or MP string or null it is just the
371:05 - exact same thing so let's try to do
371:08 - again we're going to go here select an
371:11 - image it has been rendered we can close
371:14 - that or delete that now that we have
371:17 - added the design for this create post
371:19 - model the only thing left is to add the
371:22 - functionality let's go into the profile
371:24 - page and let's just think about it so
371:26 - when when we create a post in this page
371:28 - we would like to see that latest post in
371:30 - this so like as being here and then we
371:33 - would like to uh increment this number
371:35 - of posts so for this we can use a global
371:39 - state to store the posts we are going to
371:41 - go ahead and create another store object
371:44 - so let's say post
371:48 - store.js and get the create function
371:52 - from
371:54 - zent and then we are going to have let's
371:56 - say const use post store that was taking
372:01 - the create function call it and the
372:04 - Callback was taking the set function as
372:06 - the first argument and then we are going
372:09 - to return an object so parentheses Cur
372:12 - braces and then we're going to have our
372:14 - post store which is going to be an empty
372:17 - uh array initially and then we're going
372:19 - to have the create post function that
372:22 - will take the newly created post and add
372:24 - it into the array so I'll say say create
372:27 - post which is taking the post calling
372:31 - the setter function which takes the
372:33 - previous state and then returns an
372:37 - object updates the posts by getting the
372:41 - first post at the top so that we can see
372:44 - that post being here the latest one and
372:47 - then just sprad the other posts so
372:50 - state. posts and we're going to add a
372:53 - couple of more functions such as the
372:55 - delete post it is going to filter that
372:57 - we are going to add let's say add
373:00 - comment so that it'll update the UI and
373:02 - then we're going to have set posts okay
373:05 - let's say set posts and it is going to
373:08 - be so that we can update this state as
373:10 - well but we are going to be adding those
373:12 - later so for now let's export default
373:14 - this use post store and we're going to
373:16 - be using this and then also in the user
373:19 - profile store we said that we're going
373:21 - to have a add post function and we're
373:24 - going to use this so that we can
373:26 - increment this number of posts when we
373:28 - create the post so for this we are going
373:31 - to add that function it is going to look
373:33 - a little bit complicated but bear with
373:36 - me so we're going to get the post and
373:39 - this is going to call the setter
373:42 - function um maybe I should accept this
373:45 - so okay I'll just call the set function
373:49 - and it is going to take the state as the
373:51 - previous value or the first value so
373:54 - this is going to be the state which is
373:56 - going to be this user profile and then
373:59 - we are going to return an object so
374:02 - let's go here the user profile state is
374:06 - going to be just uh spreading all the
374:09 - previous
374:10 - state and then for the posts we'll just
374:13 - add the newly created posts ID so posts
374:17 - get the post. ID and then just have the
374:21 - previous posts so dot dot dot state DOT
374:26 - user profile.
374:28 - posts so this looks really really
374:31 - complicated but basically let me just
374:33 - put a comment here um okay not like that
374:37 - okay this is used to
374:41 - update the number of posts in the
374:46 - profile page so when you create the post
374:49 - now we have zero posts it'll be one post
374:52 - and then it will be incremented as you
374:53 - create posts so how how achieve this so
374:57 - it takes the newly created post call the
374:59 - setter function by taking the previous
375:02 - state and in the posts array it only
375:05 - adds one more ID so that when you say
375:08 - posts. length this will be incremented
375:11 - by one so I hope it makes sense we can
375:15 - save this file and maybe close this
375:18 - we're going to go into the create post
375:21 - we can create a hook to create the post
375:23 - or we can put our custom hook at the
375:25 - very bottom of our file and in this case
375:28 - this will be this is going to be what I
375:30 - will be doing and let's go here let's
375:33 - say function use create post so this is
375:38 - going to be our hook so let's say const
375:40 - show toast the boiler plate as
375:44 - always it's going to have a loading
375:46 - State initially it'll be false and we're
375:49 - going to set that so let's get the oath
375:52 - user use oath store give me the user
375:56 - we're going to get the create post
375:58 - function so let's say use post store
376:02 - give me let's say just call it like this
376:05 - and we could just take const create post
376:09 - function so I think we have created it
376:11 - yes it is this one and below this we're
376:15 - going to get the add post function so
376:18 - maybe we should say State state. create
376:23 - post and remove this Cur Braes it is the
376:27 - exact same thing so we're going to say
376:29 - const
376:31 - add const add
376:34 - post from the use post store I mean use
376:40 - user profile store because this is where
376:43 - we added it and we'll just say add post
376:45 - call that function and lastly we're
376:48 - going to get the path
376:50 - name and you'll see why for now just get
376:54 - the path name from use look
376:57 - so now we would like to create the
376:58 - function to create the post let's say
377:02 - con handle create post which is going to
377:06 - be an async function it'll take the
377:09 - selected file or the image and then it's
377:12 - going to take the caption of the post as
377:14 - arguments so we're going to go here and
377:16 - let's first say if there is not selected
377:19 - file uh we'll just return or let's throw
377:23 - an error so let's say Throw new error
377:26 - please select an image so since this is
377:30 - an Instagram colone you can't really
377:32 - post without having an image and then
377:35 - let's say set is loading to be true and
377:38 - then we're going to have to create the
377:40 - new post so let's say new post which is
377:44 - going to be an object so it the caption
377:47 - will be the caption that we are getting
377:49 - as an argument zero likes so likes and
377:53 - empty array uh comments zero comments
377:57 - and then we're going to have the created
377:59 - at as well as the created by so created
378:04 - at let's just say date. now and then
378:09 - lastly create by which will be oath
378:13 - user. uid now this should also have the
378:16 - image URL which will'll add in a second
378:19 - so let's get the TR catch in the catch
378:22 - show toast um let's say error error.
378:27 - message and then the status of error
378:30 - finally we'll just say set is loading to
378:33 - be false and in the try we're going to
378:35 - do a couple of things so first we need
378:38 - to create the post document and then add
378:42 - the post image to our storage so let's
378:45 - say const post
378:47 - document
378:49 - R await add document Quality Function
378:53 - from Firebase pass the collection
378:56 - from fir store the posts collection and
379:00 - we don't have any posts if there is not
379:02 - post collection it is going to create it
379:05 - and add the document so the uh second
379:09 - argument here will be the new post and
379:12 - then this is our reference so let's say
379:15 - const user document ref and then we also
379:20 - add the post ID into the user document
379:23 - so we'll just say document so let let's
379:26 - import
379:27 - that fire store users collection and
379:31 - then ID which is going to be oath user.
379:34 - uid and then let's get the image ref so
379:37 - let's say
379:38 - const image ref from let's say rev
379:43 - storage and then get this rev function
379:46 - and the path let's say um maybe back Tex
379:51 - and then we'll just say posts slash and
379:54 - then dollar sign cra says post document
379:57 - rev. ID we could just say and that
380:00 - should be nice if you I mean that should
380:02 - work fine if you wanted to you can
380:04 - change this path as you wanted to but
380:06 - I'll just put all the posts under this
380:09 - post folder and then whatever the IDE of
380:12 - the post and then we'll just say await
380:14 - update the document we're going to pass
380:17 - the user document reference and we're
380:20 - going to update the posts array so
380:23 - object oops so post posts and we'll just
380:26 - say array Union add the ID of the post
380:31 - so that should be fine and then we'll
380:33 - just say AIT
380:35 - upload string so we did this previously
380:38 - as well the image R the selected file
380:42 - and in the type of being data URL so
380:45 - this is going to upload the image now
380:47 - let's get the down URL so just say con
380:50 - download URL which will be let's say
380:54 - await
380:56 - get download URL and pass the image
380:59 - reference now this post don't have any
381:02 - image URL we would like to update that
381:04 - both in the database and in the front
381:06 - end so I'll just say await update
381:09 - document and then it is going to be the
381:11 - post document R and image URL will just
381:14 - be this download URL we could accept it
381:18 - like this and that should be working
381:20 - fine and let's say new post this is the
381:23 - object that we would like to update we
381:26 - are going to add the image URL field
381:29 - being this download URL and now we want
381:32 - to update our user interface so we'll
381:34 - just say create post oops not the create
381:38 - function but the create post and then
381:41 - we're just going to pass the pass an
381:43 - object so new post and we would like to
381:47 - add an ID so that we don't have any
381:49 - errors when we render the posts so post
381:52 - document r. ID and lastly let's just
381:55 - show a toast that says post created
381:58 - successfully let's export these uh
382:01 - variables so not con but return is
382:04 - loading State and handle create post
382:06 - function so we are not using these so
382:10 - this one and this one let's add them as
382:13 - well um after we create the post so this
382:17 - is going to add the image to this user
382:20 - interface now you would like to update
382:22 - this number of posts we're going to go
382:24 - ahead and call this add post function so
382:28 - it is going to be something like this
382:31 - add post and then we'll just put the new
382:34 - post so spread
382:37 - that and ID is going to be post document
382:41 - r. ID so let's give a bit space
382:46 - maybe something like this so we have
382:49 - this
382:50 - references and updating this document
382:52 - now we could save this file and let's go
382:55 - above where we'll just call this
382:57 - function use create post hook and then
383:01 - this is going to give us two different
383:04 - states so is loading in the
383:07 - function handle create post so when we
383:10 - clict to this post uh button let's say
383:14 - on click call the handle post creation
383:18 - so there going to be another function
383:19 - that will create creation okay this is
383:22 - going to have the is loading state to be
383:25 - that is loading now the reason that
383:28 - we're creating this function is going to
383:30 - be so you're going to see so let's say
383:33 - cost we're just going to put it async
383:36 - where it is going to have a TR catch and
383:39 - in the catch we are just going to show a
383:42 - toast so let's import
383:51 - that okay and in the try we are going to
383:54 - call that call this function by passing
383:57 - the selected file as well as the caption
384:00 - so let's say selected file I mean just
384:03 - call the function handle create post
384:05 - pass the selected file and then the
384:07 - caption so once this has been uh the
384:10 - post has been created we would like to
384:12 - close the
384:13 - model say on close and then we would
384:16 - like to set the caption to be empty and
384:20 - then set selected file to be null if we
384:24 - save I think that should be working fine
384:28 - we're going to go ahead and create a
384:29 - post so I'll select an
384:34 - image let say
384:37 - this is Jane and if we post that this is
384:41 - going to have a loading
384:43 - State and let's see okay post has been
384:47 - created successfully the number of post
384:49 - has been incremented we cannot see the
384:51 - post here because we didn't fetch the
384:53 - posts which will do but let's take a
384:56 - look at in the our database so here this
384:59 - is the account now this has one post
385:02 - right the ID of the post let's
385:06 - refresh so now we have the posts
385:08 - collection if you click to that we have
385:11 - one post which is created by this user
385:14 - and that post has this image URL as well
385:16 - as this caption let's take a look in the
385:20 - storage it should have one folder called
385:23 - posts and inside it it has that Jane
385:26 - image right this is the post that we
385:28 - just created so let's quickly reiterate
385:31 - what we did so when we click to that
385:33 - post button this function runs which
385:35 - internally calls this function and it
385:37 - takes the selected image as well as the
385:40 - caption and here that function checks if
385:45 - there is no selected file no selected
385:47 - image then throws an error that says
385:49 - please select an image and then if there
385:52 - is then we create the post and then in
385:55 - the fire store we are adding that posts
385:58 - into the post collection update the
386:00 - users document and then we are creating
386:03 - an image ra to create the image itself
386:06 - and adding that post into the post array
386:08 - as well as updating the document with
386:11 - the image URL and then we are adding
386:13 - that post so that this number increments
386:16 - that we can see in the post header and
386:19 - lastly we have this create post that
386:22 - adds that adds the post into the post
386:25 - state so for now we cannot see this uh
386:28 - working because we are not fetching any
386:30 - posts but once we do that this will be
386:33 - working and then we just show a tost
386:35 - that says post created successfully so
386:37 - now let's try to create an error so I'll
386:40 - just create this and without any image
386:43 - if I post this it is going to say please
386:45 - select an image but if we just put some
386:48 - uh caption it is still going to say
386:50 - select an image because image is
386:53 - mandatory one more optimization that we
386:55 - can make is to when we are creating this
387:00 - post we will just say if it is loading
387:03 - and user still tries to click to that
387:06 - post button we'll just say return out of
387:09 - this function so that it doesn't
387:11 - overload our servers so we are going to
387:13 - save this and now it is time to go ahead
387:16 - and fetch this user posts and we didn't
387:19 - use this path name so far and once we
387:22 - get there we're going to use that and
387:24 - I'll explain so let's create one more
387:26 - hook that says use maybe
387:30 - get user hosts. JS so we'll say
387:37 - rfca and then we are going to delete the
387:40 - return statement that's going to have
387:42 - con is loading
387:45 - State initially it'll just be maybe
387:48 - let's say true because it is going to
387:50 - run immediately within a use effect so
387:53 - we're going to take the posts so say
387:57 - const so posts as well as the set posts
388:01 - function it is coming from the use post
388:05 - store okay this set post function is
388:08 - something that we haven't created so
388:10 - let's go ahead and add that so let's say
388:13 - set posts it is going to take the new
388:15 - post and update our state with it we're
388:18 - going to save and then we are getting
388:20 - the set posts and then show tost we're
388:23 - going to get the user profile
388:25 - because we're going to be updating it so
388:27 - let's say user
388:29 - profile from the use user profile store
388:33 - and pass this so that it gives us user
388:36 - profile and then we're going to have one
388:39 - use
388:44 - effect so we're going to go inside let's
388:47 - create a function const get
388:51 - posts async Arrow function that just
388:55 - first check if there is not user profile
388:58 - then we cannot fetch this posts because
389:00 - user not found so that should be user
389:03 - profile and then we are going to say set
389:06 - is loading to be true and set posts to
389:10 - be false I mean an empty array initially
389:13 - and then try catch we are going to in
389:16 - the finally let's say is loading to be
389:19 - false in the catch we'll just say show
389:22 - toast with the error message and the
389:25 - then maybe we'll just say set posts to
389:27 - be an empty array and then in the try we
389:30 - are going to just do a query so we'll
389:32 - just say const
389:34 - query call the query function call The
389:37 - Collection call the fire store inside
389:40 - the posts so we're going to get the
389:43 - posts
389:44 - where so where the created by so let's
389:50 - say created by is equal to the user
389:54 - profile uid so it is going to get the
389:57 - post of this user and then we need to
390:00 - call this so await get
390:04 - docs not doc but docs it should be
390:07 - plural and then pass the query it is
390:09 - going to give us a query
390:12 - Snapchat Snapchat okay and then we're
390:15 - just going to create an array in for
390:17 - each so const posts query snapchat. for
390:23 - each for each. document or for each post
390:26 - we are going to push it into that posts
390:29 - aray so posts. push and object with the
390:35 - document data as well as the ID so again
390:38 - this ID is when we use something like
390:41 - posts. map and we were taking that post
390:45 - and just returning some jsx if you
390:48 - remember so something like let's say div
390:50 - and this is the post. title and re wants
390:55 - us to have a key here so we'll just say
390:59 - key it's going to be post. ID so that's
391:02 - why we're adding this ID so that we
391:04 - don't get this key error so yeah this is
391:06 - the reason that's why we're adding the
391:08 - ID let's delete this two lines and then
391:13 - so now we would like to set the posts
391:15 - but before that let's uh sort this so
391:18 - that the latest post is going to be in
391:21 - the very top so I'll just say posts do
391:25 - sort with the created ad so we're going
391:27 - to get the A and B and this is how we do
391:31 - it in JavaScript so the second one is
391:33 - coming from the first one which will
391:36 - just make it in the so to say like the
391:39 - latest post is going to be here and then
391:41 - it'll be going in descending order
391:44 - lastly let's just say set posts to be
391:47 - this posts and here we have let's say
391:51 - set posts user profile as well as as the
391:55 - show toast and oops and then here I
391:59 - don't know why we are getting this error
392:01 - okay so we just say return and is
392:04 - loading as well as the post state so we
392:07 - have some warnings Let's see we are
392:09 - never calling this function let's say
392:11 - get posts and then maybe give a little
392:15 - bit
392:21 - spacing okay we can save let's go ahead
392:23 - delete this delete the get dock now
392:26 - let's go ahead and use this post that we
392:29 - are fetching so we're going to go into
392:32 - the profile posts component and then
392:36 - let's delete this we're going to delete
392:39 - this is loading use effect use State and
392:42 - for the is loading instead of showing
392:44 - six let's just show three
392:47 - skeletons and instead of these we're
392:49 - going to delete that let's call the hook
392:52 - so use um uh what was the name use get
392:57 - user posts okay we are going to call
393:00 - that let's say const is going to give us
393:04 - the is loading as well as the posts so
393:07 - now let's check if there is no posts
393:09 - found so const no
393:13 - posts
393:15 - found if it is not loading and the post.
393:20 - length is equal to zero then we will
393:22 - just say if no post posts found then
393:25 - just return a component that says no
393:28 - posts
393:31 - found okay it should be something like
393:33 - this where I will just copy and paste it
393:36 - five lines of HTML CSS at the bottom of
393:39 - our file with
393:42 - flex and
393:44 - text okay it says no post found with
393:47 - this Emoji we're going to save let's go
393:49 - ahead
393:51 - and here if it is not if it is loading
393:54 - we're going to show this skeletons which
393:56 - is the post skeleton and then if it is
393:58 - not loading we're just going to map the
394:00 - posts and show a component so let's say
394:03 - post. map get each post and we're going
394:06 - to return a jsx so here let's say okay
394:10 - this is so annoying we're going to show
394:13 - a
394:15 - profile post which is going to take the
394:18 - post as well as the key so now we are
394:21 - using that ID where we added when we
394:23 - were using for each
394:25 - so I think this is going to be our
394:27 - component we can go into the profile
394:29 - post and we're going to take the post
394:33 - and we're just going to render these
394:35 - things so image is going to be the post.
394:39 - image URL and let's see this is also
394:42 - going to be the same let's say
394:47 - post. image oops image URL okay if we
394:52 - save hopefully it should be working now
394:55 - we're going to go ahead and this is not
394:58 - working let's see what is the reason
395:00 - maybe we should console log the
395:04 - post console. log
395:07 - post okay let's see open up the
395:10 - console um
395:15 - refresh oh okay it is imagei not IMG so
395:19 - it is kind of long version let's say
395:22 - select these two and say image URL let's
395:26 - save and there we go this is the image
395:28 - that we have if we click to that we
395:31 - still get that image in our model so
395:34 - let's close that off let's visit a
395:37 - profile that don't have any posts so
395:39 - we'll just go to jle so zero post and it
395:42 - says no posts found if you go to our own
395:44 - profile one post and we see that now
395:47 - let's fix this number of likes and posts
395:49 - we're going to go into here and this is
395:52 - where we'll be updating it so this is
395:54 - the number of likes it says heart so
395:57 - just say post. likes. length and same
396:01 - thing for the comments let's save now
396:04 - this post has zero likes and zero
396:06 - comments and what we can improve else
396:09 - would be the user profile name so let's
396:13 - get that this is the beauty of using
396:17 - zotin with global state so user profile
396:20 - you can use this state in any component
396:23 - by only calling this function use user
396:26 - profile store and give me the user
396:30 - profile where I'll just go down here
396:34 - I'll just say user profile. full name or
396:38 - let's just say the username and this is
396:42 - inside the model if I save let's go here
396:46 - this is the user username of this user
396:49 - that posted and we'll just change the
396:52 - profile picture um it is going to be
396:55 - here let's delete that user
396:59 - profile
397:01 - do profile pick URL if we save we're
397:05 - going to get that as well which is the
397:07 - profile of this user and let's see if we
397:10 - have anything else so for now let's just
397:13 - delete every comment that we have here
397:16 - we're going to add that once we get
397:18 - there so for now maybe we could just
397:20 - hold two comments and this looks good to
397:24 - me now we are going to go into the model
397:28 - this Flex where I just want to add a
397:30 - couple of different styles so maybe only
397:33 - two one we'll just say maximum height
397:35 - and maximum width would be changing so
397:39 - maximum height 90 VH and minimum height
397:43 - 50 VH so that it even looks in smaller
397:46 - pictures as well and lastly let's take a
397:49 - look we are going to add a couple of
397:51 - different styles so that the image is
397:55 - centered in our model so let's make this
397:57 - a flex which is inside the model that
398:00 - holds the image we are going to add two
398:03 - more things justify content to be Center
398:06 - as well as the Align items to be Center
398:09 - so that the image is being centered if
398:11 - we just save let's take a look now image
398:13 - is in the center and in the previous
398:16 - case was it not so let's take a look
398:19 - okay so do you see it is not in the
398:21 - center if we just added that two lines
398:24 - so justify
398:29 - content align items
398:32 - Center and now it has been centered also
398:35 - we would like to show this delete button
398:37 - only if we are the owner of this post we
398:40 - are going to go ahead and where is that
398:42 - delete button so let's see it should be
398:47 - before the divider okay it is going to
398:49 - be this where we could just say this
398:52 - should be a button and let's add a
398:54 - couple of different styles import the
398:57 - button and let say size should be small
399:02 - and BG
399:04 - transparent and then hover effect what
399:07 - do we say Okay white Alpha red and then
399:11 - border radius ping and on click to this
399:14 - we are going to delete the post but more
399:16 - on that later for now let's delete the
399:19 - button and we'll just say if the oath
399:23 - user. uid is equal to the user profile.
399:28 - uid if this is the case which means that
399:31 - this is the owner of the post we can
399:34 - show that delete button let's get the
399:36 - oath
399:37 - user so delete this get const oath user
399:42 - from use o store oops which is going to
399:46 - give us the
399:48 - user and we need to add one optional
399:51 - chaining to that so where is it um here
399:55 - in case user is not authenticated so
399:57 - let's save and let's take a
400:00 - look okay we can see this here but if
400:02 - another user was posted this we
400:04 - shouldn't be see that delete icon now
400:08 - let's go ahead and add this delete
400:09 - functionality for this we are going to
400:11 - first go into the store which is the
400:14 - post store and we're going to create
400:16 - this delete post function so that it can
400:19 - update our UI so let's say delete post
400:22 - which is going to be taking the idea of
400:24 - the post and it calls the setter
400:26 - function so I'll just give a bit spacing
400:29 - like this maybe it should be something
400:32 - like this we're going to get the state
400:34 - and we are going to return an object it
400:37 - is going to take the posts but it is
400:39 - going to filter the post that we are
400:42 - just deleting okay it is going to check
400:45 - where the post ID is not equal to this
400:47 - ID okay it's let's say maybe we don't
400:50 - even need to add a comment because the
400:52 - name is delete post
400:54 - we can save and let's go into the
400:56 - profile post when we click to this
400:59 - onclick let's say handle delete post and
401:04 - this is going to be the function that
401:05 - we'll just create at the very bot uh at
401:08 - the very top of our file so const handle
401:12 - delete post Asing
401:14 - function it's going to have TR catch
401:18 - let's get the show
401:22 - toast
401:26 - let's first add a confirmation to this
401:29 - user we just say if pulse window.
401:33 - confirm are you sure you want to delete
401:34 - this post if they say cancel then we'll
401:37 - just return out of this function but if
401:40 - I if they say okay delete that then we
401:42 - are just going to delete it so let's
401:44 - have a loading state so const is
401:50 - deleting set is deleting initially it's
401:53 - going to be false and you could create a
401:56 - custom hook for this as well but let's
401:58 - just keep it simple and we'll just say
402:01 - const so first we're going to delete the
402:03 - image from the storage and then we're
402:05 - going to delete the post from the post
402:07 - collection and then from the users
402:10 - collection okay so in the users
402:12 - collection let's go
402:16 - here so inside users collection we had
402:19 - this posts array we're going to remove
402:21 - that ID from here so let's go here const
402:26 - image
402:27 - R maybe we could just copy and paste it
402:31 - at this point we're going to get the
402:33 - reference we're going to get the storage
402:36 - from the posts and posted ID so this is
402:39 - the post that you like the delete so
402:41 - await delete
402:43 - object just pass the image R and then
402:47 - const user R so document file store
402:52 - inside users collection
402:54 - let's just
402:56 - paste this is the user reference that we
402:59 - like to update we're just going to say
403:01 - first AIT delete document and we're
403:06 - going to delete the post document so
403:08 - let's say document fire store and then
403:13 - the posts delete this
403:16 - post and then we're going to update the
403:18 - user reference so await update document
403:21 - pass user ref yeah user ref and then
403:24 - array.
403:26 - remove from the post array so we should
403:29 - import these
403:33 - functions and then in the catch show
403:37 - toast finally set is loading to be false
403:41 - I mean set is deleting to be
403:43 - false and basically that's it we also
403:47 - need to upate the user interface so
403:48 - let's call the delete post function so
403:51 - let's get that from our store const
403:54 - delete
403:56 - post use post store and we're going to
404:00 - get this delete post
404:03 - function and then this was taking the ID
404:06 - of the post so I'll just say post. ID
404:10 - and maybe lastly we could just show a
404:12 - toast that says post deleted post
404:14 - deleted successfully let's save and
404:17 - let's test it out we are going to show a
404:19 - spinner to this button where is it um
404:23 - delete button let's say is loading to be
404:26 - this is deleting and one more
404:29 - optimization you're just going to say if
404:31 - we are
404:34 - deleting at that point just return if
404:37 - user clicks to that button again let's
404:40 - save remove this
404:43 - box and test it out we're going to go
404:45 - ahead
404:48 - refresh so we'll select the post and
404:51 - let's delete that it says are you sure
404:54 - you want to delete this post if if we
404:56 - say cancel it is not and if we say
405:00 - okay and there we go post deleted
405:03 - successfully and this number of post
405:05 - hasn't been decremented we forgot to do
405:07 - that but at least the post not found we
405:11 - updated this portion so now let's take a
405:14 - look at the database let's go into the
405:17 - storage so we don't even have any posts
405:20 - okay that folder has been deleted
405:22 - because we only have had one post if you
405:24 - go into the storage I mean fire store we
405:27 - have no posts and this user had that
405:30 - post but now posts is zero so we're
405:34 - going to go ahead and update here as
405:37 - well we forgot to do that so it was
405:40 - related to this store where we just call
405:42 - it user profile store and we would like
405:44 - to decrement the number of posts for
405:47 - this maybe we could add a delete post
405:50 - function let say delete post and I'll is
405:53 - how to accept this so it gets the post
405:56 - ID and it is it is going to call the set
405:58 - function with the previous state it is
406:00 - going to return an object with the user
406:03 - profile being as exactly was before but
406:07 - it's only going to update the posts
406:09 - array and it is going to remove or the
406:12 - filter the post that we just deleted so
406:15 - I hope it makes sense basically it just
406:17 - delete the post from this state now
406:21 - let's refresh and I'll just create
406:23 - create one post and then delete it again
406:25 - so let's select the picture of bath I'll
406:29 - just
406:31 - say this is bath and let's go ahead and
406:34 - post
406:36 - this post created successfully let's
406:39 - create another post we just say this is
406:42 - John and select the picture of the
406:46 - John and post
406:49 - it okay post has been created and it
406:52 - says this user has has two posts let's
406:54 - delete the
406:56 - bth
406:58 - okay and there we go this didn't work so
407:02 - why it is not working let's see it is
407:04 - because we didn't call this function
407:06 - sorry it's my bad I forgot to do that so
407:09 - we're going to go ahead and let's say
407:11 - const delete post but we have the same
407:14 - name so let's say delete post from
407:18 - profile and we'll just say use user
407:21 - profile store get the delete post
407:23 - function now we're just going to call
407:25 - this and delete post from profile pass
407:30 - the post ID if we save we might want to
407:33 - refresh this page and if we just delete
407:36 - this now it should hopefully decrement
407:38 - this by one let's go ahead delete the
407:41 - John
407:42 - and there we go it has been updated so
407:45 - yeah success so this is how we create
407:48 - posts and delete posts now let's go
407:51 - ahead and try to comment to a post for
407:54 - that let's just create a post so that we
407:56 - can see what we're going to be doing
407:58 - let's say um this is Bob and post
408:04 - it okay let's
408:07 - wait post created successfully and there
408:10 - we go this is the post now let's delete
408:13 - the comments so that we uh have a clean
408:16 - State and also I want to change uh
408:19 - something here which is going to be this
408:21 - delete post from uh profile F I think
408:23 - the name is really bad so when you read
408:26 - the code it feels like as if we are
408:29 - deleting the post from here but instead
408:32 - we are just decrementing it from uh the
408:34 - profile header so I'll go here and I'll
408:37 - just rename this as I'll say controll d
408:41 - uh
408:43 - decrement posts count okay if we just
408:47 - save okay now this is more readable and
408:50 - this deletes the post from the profile
408:53 - file so when you deleted it delete the
408:55 - post it'll be removed from here this is
408:58 - what this function does and also when
409:01 - you delete the post this number will be
409:03 - decremented and this is the function
409:06 - that does that so when you read the code
409:08 - now it makes sense so it is not going to
409:10 - be uh confusing when you come back to
409:13 - this code maybe one or two months later
409:15 - okay with that in mind let's go ahead
409:18 - make this a bit bigger and create
409:19 - another hook that will post the comment
409:23 - so let's say use post
409:26 - comment.
409:30 - JS oops it doesn't gives us for some
409:33 - reason okay delete the return and let's
409:36 - just get the boiler plate as always
409:39 - we're going to have a loading state but
409:41 - I'll just call it as is commenting
409:43 - instead of is loading so is commenting
409:46 - just preference and initially it is
409:49 - going to be false let's import the use
409:51 - State and then we are going to show
409:54 - toast in case there is any errors so use
409:59 - show toast and then we are going to get
410:01 - the oath
410:03 - user so use oath store and then just
410:07 - give me the user and let's go ahead and
410:09 - create the function const handle post
410:13 - comment this is going to be the Asing
410:15 - function that takes the post ID that
410:18 - we're going to be commenting to and then
410:20 - the comment text itself so so let's say
410:24 - try catch finally and before we even try
410:29 - we'll say set is commenting to be true
410:32 - and in the finally set is commenting to
410:35 - be false now in the try and maybe before
410:39 - that let's
410:40 - say if is commenting so this is
410:44 - something that we always do so I will
410:45 - not even explain this and then we're
410:47 - just going to say if not o user so user
410:51 - is not authenticated and for some reason
410:53 - user still tries to comment this we just
410:57 - say um let's open the
411:00 - title we could just say you must be
411:02 - logged into to comment so and just put
411:06 - the um status which is the error and
411:09 - then we say set is commenting is going
411:11 - to be true and then let's create the
411:13 - comment so con it's going to be an
411:18 - object and as I showed you in the
411:21 - diagram so let's go here here um okay
411:24 - this is what we had so the comment
411:26 - document is going to have the comment
411:28 - field created by post ID and then the
411:31 - created that so this is going to be the
411:33 - things that we'll be adding so it is
411:35 - going to be have the comment which is
411:37 - coming as a prop or I mean an argument
411:41 - so comment we're going to have the
411:43 - created ad created ads we are using
411:47 - date. now for this and then we're going
411:49 - to go ahead say created by
411:53 - which is going to be the O user. uid and
411:57 - then we're going to have the post ID
411:59 - again it comes as an argument so if the
412:03 - left and right hand side is equal we
412:05 - could just only have it like this so it
412:07 - looks a bit more elegant and then in the
412:11 - try I mean after this maybe we could
412:13 - just take this put it right here and
412:16 - then in the try we'll just say a wait so
412:19 - we'll be updating the document so update
412:21 - document which document is just going to
412:24 - be let's get the function from the fire
412:27 - store and then the posts and then the
412:30 - post ID so this is the post that You'
412:32 - like to update and the field that we're
412:35 - going to update is just going to be the
412:36 - comments array so we'll say array Union
412:41 - to add the new comment so this just just
412:44 - like you can read it as an English
412:46 - sentence and then after this now this
412:49 - has been updated in our database and we
412:52 - would like to update our user interface
412:54 - so let's say I go here and then I just
412:57 - write something okay if I post that the
412:59 - comment will be added into the database
413:02 - but now we would like to also see that
413:04 - here so for this we are going to create
413:07 - a function in our store so it is going
413:10 - to be called as ADD comment so let's say
413:13 - const add comment and we're going to
413:16 - create this so let's say use uh post
413:20 - store and then give us the add comment
413:23 - function delete this react import and
413:25 - then here we would be calling it let's
413:28 - say add comment with the post ID as well
413:31 - as the new comment and in the catch
413:33 - we'll just say show toast the error with
413:36 - the message and lastly in this function
413:39 - we are going to return is commenting as
413:43 - well as the handle post comment function
413:46 - so now let's go ahead and create this
413:48 - function save this file um it is going
413:50 - to be inside the post store that we have
413:53 - here um to be honest this is going to
413:56 - look a little bit complicated but if you
413:58 - if your JavaScript background is strong
414:01 - that shouldn't be a problem at all so
414:04 - add
414:05 - comment um so this is going to take the
414:07 - post ID as we uh write so we just say
414:11 - comment it is going to take the post ID
414:13 - and then the comment so it is going to
414:14 - call the setter function so let's open
414:17 - that up Setter function and this is
414:19 - going to take the previous state and
414:21 - then just return an object where it is
414:25 - going to be only updating the posts
414:27 - array so we'll just say posts so this is
414:30 - going to be colon so basically I'll just
414:33 - accept this and then let me just explain
414:35 - that um so we have some errors here
414:38 - let's
414:39 - see we are missing some parentheses
414:41 - let's get that and then up here
414:46 - okay okay that should be looking like
414:49 - this so basically we are sending the
414:52 - post ID and then the comment so we are
414:54 - setting our state which is the posts and
414:57 - we are mapping all posts and once we
415:00 - find the post that we are commenting we
415:02 - are updating the comments array with
415:05 - that new comment and that should be at
415:08 - the very end instead of putting to the
415:11 - uh in the top so here I'll just add it
415:13 - at the very bottom and then if this is
415:16 - not that post we're just going to return
415:18 - the other post as they were so and the
415:21 - reason that we're adding the this
415:22 - comment to the very end it is because
415:25 - let's say we're going to go up here and
415:27 - if you um put a comment here and once we
415:30 - post it we would like to see that new
415:32 - comment at the bottom of the latest one
415:36 - so we don't want to take this comment
415:37 - and put it up here so that's why we are
415:40 - just having it having it at the very end
415:42 - of the array so again I hope this makes
415:45 - sense this was kind of complicated I I
415:48 - admit but this is nothing else than a
415:50 - JavaScript code so we can close this and
415:53 - we're going to go into our hook we are
415:56 - even adding the comment so we can go
415:58 - into the profile post where we had that
416:03 - comments so we want to delete this
416:05 - comments and then instead we'll just get
416:08 - the post. comments so post. comments in
416:11 - this post we are getting it as a prop if
416:13 - you remember okay this uh component
416:16 - takes it as a prop so let's go here
416:19 - post. comments. map get each comment
416:23 - and then just render the comment
416:25 - component so comment pass the key as
416:28 - well as the comment itself we can save
416:30 - this and let's go into this component
416:33 - and then this is not taking any of these
416:35 - that was for the design part that I need
416:37 - to mention and then we'll just get the
416:39 - comment we could for now um just comment
416:43 - these out and then this one but here
416:46 - we'll just say comment. comment which
416:50 - was the comment text itself so now we
416:52 - have created it but we didn't actually
416:55 - Implement I mean we didn't call this
416:57 - function in any place which is going to
417:00 - be inside the post footer I believe
417:03 - because this is the component uh that
417:06 - has that uh input field that we can post
417:10 - so we're going to go inside post
417:13 - footer so let's go up here and then we
417:17 - might want to add that uh custom hook so
417:20 - use post comment and on the left hand
417:24 - side we are going to get two things
417:26 - which is is commenting and then handle
417:29 - post comment function so when we go
417:32 - click to this button we would like to
417:34 - call another function so on click handle
417:39 - submit comment let's say and again this
417:42 - is for one reason that we'll see so we
417:46 - could create that function up here so
417:49 - const handle submit comment which is
417:52 - going to be an async function so it's
417:54 - going to be an arrow function so let's
417:58 - implement it like this and let's see if
418:00 - this was inside the for so it is not we
418:02 - could just make it um so we don't need
418:05 - to take the event and make prevent
418:07 - default because this is not a form so
418:09 - just say await call the handle post
418:11 - comment with the post ID so let's say
418:15 - post. ID but now how are we going to get
418:18 - that post it is going to be coming from
418:22 - here as a prop so let's say post and put
418:26 - the post ID as well as the comment which
418:29 - is going to be a state so const comment
418:33 - set
418:34 - comment and in the it's going to be use
418:37 - State let's say an empty string so we're
418:39 - going to go here into this input let's
418:42 - say on
418:44 - change take the event set the comment
418:47 - and then the value will be that comment
418:50 - now how are we going to get that post
418:52 - where are we calling this it is going to
418:54 - be inside the profile post where we had
418:57 - this post footer so let's say um so this
419:02 - is the profile post component right
419:05 - which had that model when we clicked to
419:07 - that it shows us this um it shows us
419:10 - that model so we are just going to say
419:13 - post and send it to here so post just
419:17 - like this we could save this file into
419:20 - here and now since we handled the post
419:23 - comment we just want to set the comment
419:26 - to be an empty string so let's save and
419:30 - let's use this state as well when we are
419:33 - commenting we will like to have a
419:34 - loading state that shows us a spinner
419:38 - and do we have any errors here okay it's
419:40 - just a warning so let's go ahead and
419:42 - test it out hey this is my first comment
419:47 - and if I post
419:49 - this let's see there we go we got the
419:51 - comment and we had that loading State
419:54 - let's take a look at our database so
419:56 - these are the posts and we have one
419:59 - comment that says hey this is my first
420:01 - comment and it is created just now
420:04 - created by this user and post ID so it
420:08 - is working nice but the thing is this
420:10 - comment doesn't have the profile Avatar
420:13 - of that user right the only thing we
420:15 - know about the user who posted this is
420:18 - the ID so we are going to get the user
420:21 - ID from
420:22 - uh I mean we're going to get the user
420:24 - profile information by this ID so we
420:28 - need another hook to fetch user profile
420:31 - from the ID we are just going to create
420:33 - that in a second but this is how it
420:36 - works we just put some comment storing
420:38 - that in our state and we when we click
420:40 - to that post button we are calling this
420:43 - function so let's go here we are calling
420:46 - this handle submit comment which
420:48 - internally calls this function that
420:51 - takes the post ID as well as the comment
420:54 - and this function creates the comment in
420:57 - our database as well as updating our
421:00 - state and it is happening because it
421:03 - calls this function called add comment
421:06 - and it just takes our post array and at
421:10 - the comment at the very end so that we
421:12 - can see that so if I just put another
421:14 - comment another comment of mine so since
421:19 - it is going to be added into the very
421:20 - end of our array we are going to see
421:22 - that after this comment so let's pause
421:26 - this we have loading State there we go
421:28 - this is the latest comment that we have
421:31 - and one more thing that we only want to
421:34 - see this add comment input in this
421:36 - button if the user is authenticated so
421:39 - just imagine if a user is not logged in
421:42 - then they shouldn't see this input that
421:44 - just doesn't make any sense so let's go
421:46 - into the post footer where we'll just
421:49 - take the authenticated user so let's
421:51 - just give a bit space const oath user
421:55 - let's say use oath store get the user
422:00 - from the state and then this is the
422:03 - thing that we don't want to see if user
422:05 - is not authenticated so cut this for a
422:07 - second and if there is oath user so it
422:11 - should be like this then render this
422:17 - okay so if you logged out you will not
422:19 - see this entire thing and now let's imp
422:21 - Implement that hook that actually gets
422:24 - us the user profile picture as well as
422:26 - their um maybe username and just every
422:29 - information that this user has and we
422:32 - said that we're going to be creating a
422:33 - custom hook and it is going to be called
422:36 - as use get user profile by id. JS and we
422:44 - had another one called get user profile
422:47 - by username and this is going to be
422:50 - different than this hook so we are going
422:53 - to go inside let's say
422:55 - rfca it is going to have a loading state
422:58 - so let's say const is loading you can
423:01 - call it as is fetching as well doesn't
423:03 - really matter so you state initially it
423:06 - could be true because we're going to be
423:08 - calling this within a use I mean use
423:10 - effect so it is going to be an immediate
423:12 - call so let's say cost this is going to
423:15 - return us a user profile right this
423:18 - could be empty initially so I'll just
423:20 - say null and and then we're going to get
423:23 - the show
423:25 - toast to show some
423:28 - errors and then use
423:33 - effect which is going to have a function
423:36 - called con get user profile if I can
423:40 - type profile oops okay it's going to be
423:44 - an asnc function and we are just going
423:47 - to call it it is not going to take the
423:48 - user EP it is because this hook will
423:51 - take the user ID okay so here let's just
423:55 - say get user profiled and then this is
423:58 - going to have a TR catch as
424:01 - always try catch and maybe that could be
424:03 - a challenge for you that you could
424:05 - Implement and just pause the video at
424:07 - this point so finally loading SE will be
424:10 - false and when we start to do this
424:12 - operation loading will be true set user
424:15 - profile will be null because we didn't
424:17 - fet it yet so const we are going to get
424:20 - the user ref
424:22 - so get so let's say a wait get doc call
424:25 - the function and then the document is
424:28 - going to be from fire fire store within
424:31 - the users collection and it is going to
424:33 - be this user that we want to fetch and
424:37 - we are going to say if user ref. exists
424:43 - which is a function that we can call
424:45 - then just can you please set the user
424:48 - profile with the data and in the catch
424:53 - where they'll say show the toast with
424:54 - the error message and this is going to
424:57 - take the show
424:58 - toast set user profile and most
425:02 - importantly the user ID whenever this
425:05 - user ID changes it is going to run this
425:07 - user effect to fetch the user profile so
425:10 - let's say return is loading user profile
425:14 - and maybe set user profile as well in
425:17 - case we use it and there is a typo here
425:20 - that you can see user
425:22 - profile that it should be okay we are
425:25 - going to delete the react import as
425:27 - always and it is getting a bit annoying
425:29 - but let's just save and we're going to
425:31 - be calling this inside the comment. jsx
425:34 - so we got the comment now we would like
425:36 - to fetch the profile of this user
425:39 - depending on the ID which we can call it
425:42 - as use get user profile by ID and then
425:46 - the ID will be comment. created
425:50 - by okay this is the field that we have
425:53 - inside the comment so let's say const
425:56 - give us the user profile as well as the
425:58 - is loading State and we could say if it
426:01 - is loading then just return the
426:06 - comment skelet 10 which I will provide
426:09 - you in a second again just 10 lines of
426:13 - code literally nothing else skeleton
426:15 - Circle UT the
426:17 - skeleton so this is a flex on the left
426:20 - it shows a Circle skeleton and then two
426:23 - skeletons with this width and height so
426:26 - we'll just get that and what we can do
426:30 - so now that we got the user profile we
426:32 - would like to show it so let's just
426:35 - delete the name it doesn't really need
426:36 - it but we will say user
426:39 - profile. profile pick URL and that
426:43 - should be uppercase size could be small
426:46 - and then we are going to get the
426:48 - username so user profile f. username and
426:54 - what should we add else so this is the
426:57 - comment that we are already getting and
426:59 - then at the end we're going to show the
427:01 - created that and more than that in a
427:03 - little bit so if we save hopefully that
427:06 - should be working fine we're going to go
427:08 - here okay this is the user that has the
427:10 - comment the username as well as the
427:13 - comment itself now this doesn't look
427:15 - really correct to me so it is not
427:17 - aligned Center so we'll just go into
427:21 - this and I'll just say align items to be
427:24 - Center and hopefully it should fix um
427:28 - okay so it looks like they are in the uh
427:31 - so they are centered in vertical
427:33 - Direction and now when we click to this
427:36 - I would like to go to the profile of
427:37 - this user so let's add a link so into
427:41 - the Avatar I'll just say link import
427:44 - that from react rou D to not the profile
427:48 - but slash the oops so we have some
427:52 - errors let's just delete that back text
427:55 - close that and close this as well and
427:59 - we're just going to wrap this Avatar
428:00 - with this link so two slash uh dollar
428:05 - sign and then Char Braes user profile.
428:09 - username so it's is going to Tak us to
428:12 - this page and let's copy this also wrap
428:14 - it with our text that says the username
428:18 - okay we'll just close that link oops o
428:21 - not the Avatar but that should be slash
428:25 - link um okay so this looks good to me
428:29 - and if I click to this profile picture
428:31 - it'll take me to my to this profile
428:33 - which I already in so it just didn't and
428:36 - if I click to this it'll also take me to
428:38 - that profile so if those were another
428:41 - profiles it would take me so let's add
428:44 - another comment my
428:47 - third comment and if I post that it has
428:51 - been added here and it even had that
428:53 - skeleton so let's just add something
428:55 - else for a second you will see that
428:58 - loading skeletons one Circle and then
429:00 - those
429:01 - texts there we go now we would also like
429:04 - to add this created at time here for
429:07 - this I will provide you a function
429:09 - called time ago and it just takes the
429:12 - Tim stamp and convert it it something
429:14 - like 2 days ago two weeks ago 2 hours
429:17 - ago and stuff like that we're going to
429:20 - go and into the source create a uh
429:23 - folder called utils and I'll just add
429:26 - that so time ago. JS you can copy this
429:30 - function and paste it which is to many
429:32 - lines of code and I didn't write this by
429:35 - myself I just get that from the chat GPT
429:38 - so it basically takes a time stamp which
429:41 - is dat. now and it converts it something
429:45 - it converts the time stamp to something
429:47 - like seconds ago minutes ago hours ago
429:50 - days ago and eventually weeks ago so it
429:54 - is not going to say like one year ago
429:56 - but instead it will just say 52 weeks
429:59 - ago this is how Instagram implements and
430:02 - this is how we will be doing so let's
430:05 - save and we're going to go into here
430:07 - delete this import the time ago function
430:11 - and we'll just say comment. created at
430:14 - if we save this it should be working and
430:17 - it just says 1 minute ago 12 minutes ago
430:20 - and 30 minutes ago so everything looks
430:22 - fine but there is still one problem
430:24 - which is that we don't see the caption
430:26 - of this post which actually have one so
430:29 - let's go here this is the post the
430:31 - caption that we said that this is Bob so
430:34 - how are we going to get this which is
430:36 - going to be creating another component
430:39 - so profile post we are going to go
430:42 - before the comments right inside the
430:44 - vertical stack so let's just put a
430:46 - comment that says these are the comments
430:49 - maybe we would make it uppercase
430:51 - so comments and then here we'll just put
430:54 - the caption so we will just say that if
430:57 - this post has a caption and then render
431:02 - a caption component with the
431:07 - post okay we're going to now create this
431:10 - component so let's go maybe we should
431:13 - put it into the comment you could create
431:15 - another um folder but I think just to
431:18 - make it simple I'll just go and say
431:21 - caption. jsx because it is kind of
431:23 - related to comment component so RFC and
431:27 - the content is going to be looking
431:29 - really really similar to the comment
431:32 - component so I'm going to be copying
431:34 - this and just paste it into here so
431:38 - let's get the flex the link the
431:42 - Avatar the
431:45 - text um the text from
431:49 - Chakra and then the time go we're going
431:51 - to get this was taking a prop called
431:54 - post and we'll just say post. created
431:59 - add and then post. caption we're going
432:02 - to show it so post. caption and then the
432:05 - pro username of the user profile but
432:08 - this is going to be coming from the
432:10 - authenticated user or the user that
432:13 - posted actually okay so if we are in a
432:15 - in a profile and we are looking to their
432:18 - post then the caption will be written by
432:21 - by this user which is the profile of the
432:23 - user so we had a state for this I hope I
432:26 - make it clear so we just say user
432:29 - profile which was the use user profile
432:33 - store and give me that state so with
432:37 - this I think that should be working fine
432:40 - and um okay so let's save and we're
432:43 - going to go here uh get this component
432:48 - save it as well and if you open that up
432:51 - this is the caption that we see it says
432:54 - this is Bob and it has been created 24
432:58 - minutes ago also what I want to add is
433:00 - when I collected this icon I would like
433:03 - to have this focused so we can use a ref
433:06 - for this let's go into the post footer
433:09 - and I'll just create a ra by the way we
433:12 - can just delete this handle like
433:13 - functionality but for now let's just
433:15 - keep it so that it doesn't gives us any
433:17 - errors so say const um maybe comment
433:22 - ref use ref should be null initially and
433:26 - then we're going to take this ref and
433:29 - put it into this input okay let's say
433:32 - ref comment ref and when we click to
433:35 - that icon so the comment icon which one
433:39 - is that um comment logo which is inside
433:42 - this box I'll just say on clict to this
433:45 - call this Anonymous function which Focus
433:48 - the common TR so let's save
433:52 - um okay so no warning at all we're going
433:56 - to go up here if we click to that this
433:58 - has been focused and we can just comment
434:01 - something like this now that we have
434:03 - handled the comments let's go ahead and
434:05 - add a like and unlike functionality so
434:08 - as always let's just create a hook for
434:11 - this we're going to go into hooks maybe
434:13 - we could just call it as use like post.
434:17 - JS and then this is going to have the
434:20 - everything
434:21 - that we have in our boiler plate
434:23 - basically const is loading you could
434:26 - call it as is liking or I'll just call
434:29 - it as is
434:31 - updating okay set is updating initially
434:34 - it is going to be
434:36 - false um okay like this import the use
434:39 - State and then let's get the oath user
434:42 - so const oath user from the store and
434:46 - then let's see what are we going to have
434:48 - number of likes so const
434:51 - likes set likes which is going to be us
434:56 - State and how are we going to get this
434:58 - is because is via the post so use State
435:03 - and we're going to get the post as an
435:05 - argument so this is the post that we are
435:08 - liking or unliking so
435:11 - post.
435:13 - likes. length this is going to give us
435:16 - the number of likes and then if we
435:19 - already like this or or not so is liked
435:22 - and set is
435:24 - liked and initially it is going to be so
435:28 - let's say use state so if the post that
435:30 - likes includes the ID of the
435:33 - authenticated user so includes Au oops
435:38 - so this is really annoying includes the
435:41 - oath user. uid and we need to just put a
435:45 - question mark here so that we will check
435:47 - if this user is authenticated and lastly
435:51 - let's get the show
435:53 - toast use show toast we have the
435:57 - function and let's create it so con
436:00 - handle like poost which is going to be
436:03 - the async arrow function if is updating
436:09 - it will just return and if there is not
436:12 - oath fer we just going to return a show
436:16 - toast that says You must be logged in to
436:18 - like a post and if this is not the case
436:21 - then we just pass these if checks then
436:24 - we'll just say set is updating to be
436:27 - true and here we go try catch and
436:31 - finally set is loading to be so set is
436:36 - updating to be false and then what are
436:38 - we going to have in the catch show
436:40 - toast um error message and then in the
436:43 - try you'll basically update the
436:45 - documents uh likes count which is going
436:48 - to be the post now let's get the post
436:50 - reference obviously con post rep
436:55 - document fire store import that um posts
437:00 - and then this is the post that we would
437:03 - like to update which we pass the ID and
437:05 - then a wait update document has the post
437:10 - graph and then the object which is going
437:13 - to be the data that we'll take to update
437:15 - with so update document and then likes
437:18 - array and we'll just say if it is light
437:21 - then array. remove function so which
437:24 - means that this user already liked it
437:27 - right and if he still tries to call this
437:30 - function which means that it is unliking
437:32 - it so it is in this state so he already
437:35 - liked it and now he clicks that one
437:37 - again so now is like is true and if it
437:40 - clicks that it is going to run this
437:42 - portion I hope it makes sense array
437:44 - remove um get it from the Firebase pass
437:48 - the oath user. uid and if it is not the
437:52 - case so it is liking so array oops array
437:56 - Union let's get that and pass the oath
437:59 - user ID so we are going to go here and
438:03 - whatever the liked state is negate and
438:07 - we'll just say if it is oops if it is
438:11 - liked then number of likes will be
438:13 - decremented and if it is not liked it is
438:16 - going to be incremented by one and
438:19 - finally at the end of the this hook
438:21 - we'll just say return is updating is
438:24 - liked so let's say okay is liked likes
438:28 - handle like post and then is updating if
438:33 - we save we delete this and now we're
438:37 - going to go ahead and implement this
438:39 - function or call this function so we're
438:41 - going to go into the post putter this is
438:44 - where we add that logic so let's delete
438:46 - the likes liked handle like function and
438:50 - instead we're going to be getting that
438:51 - from our hook so use like post which
438:55 - we're taking the post if we remember
438:58 - right it takes the post and this is
439:01 - going to return us four values so let's
439:04 - say con give us the handle like post
439:07 - function is likeed is updating in number
439:10 - of likes so on click to this like button
439:14 - we'll just say handle like post and if
439:18 - it is liked I mean if it is not liked
439:21 - show this notifications logo and which
439:24 - is this logo okay the naming could be a
439:26 - bit bad it is because we're using that
439:28 - icon as well up here so let's go okay
439:33 - and if it in the else case just show
439:35 - this unlik logo and we're going to use
439:38 - the updating State as well or maybe we
439:41 - don't so I don't really want to show a
439:44 - loading spinner when I click this like
439:46 - button instead I would love to just have
439:48 - it immediately this red color so I don't
439:52 - really want to show a spinner so that's
439:54 - why I'll just delete this if you wanted
439:56 - to you can keep it and add your logic so
440:00 - if we save this we need to test it out
440:04 - so this has zero likes as we can see if
440:07 - I click to that it is going to update in
440:09 - the background now this post have one
440:11 - like let's check it out um this is the
440:14 - post and in the likes array let's go
440:17 - ahead so these are the comments let's
440:19 - close that up off and likes okay it has
440:22 - one like which is been liked by this
440:25 - user which is let's see it's start with
440:30 - ik okay it is this user that just liked
440:34 - so let's go into that post likes array
440:37 - shrink this it has one like if we just
440:40 - click that again it is going to have
440:43 - zero likes it is because it has been
440:45 - updated in the database as well so with
440:48 - that now we have even our like comment
440:52 - functionality as well so I think this is
440:55 - pretty much everything that we need for
440:57 - the profile page let's refresh so we can
441:01 - create posts and we can edit our profile
441:05 - edit profile picture we can see the
441:08 - posts with the model so we can delete
441:10 - that we can add comments like it unlike
441:14 - it and I think that's it for the profile
441:18 - page if there is anything else that I
441:20 - for forgot I will be adding that in the
441:21 - incoming sections but now we can go into
441:24 - the homepage and actually fetch the feed
441:28 - posts but now we have an error let's see
441:32 - um okay it is related to this likes
441:35 - because we didn't implemented in the
441:37 - homepage so with that now let's get
441:39 - started with the feed posts and fetch
441:42 - them as always let's get started with
441:45 - the hook that actually gets us the feed
441:48 - posts into the hook hooks folder another
441:51 - hook use get feed posts.
441:57 - JS get the B plate and then we are going
442:01 - to have a loading
442:04 - State set is loading react state to be
442:08 - initial value I think that could be true
442:11 - because again we're going to using a use
442:13 - State use effect and then here we're
442:16 - going to have the let's say posts and
442:19 - set posts and this time they will be
442:23 - equal to the feed posts right we are
442:25 - going to fetch that and these are coming
442:27 - from the use post store and if we just
442:30 - call it like this then we can get these
442:34 - values and const oath user so let's get
442:39 - that as well from our oath
442:41 - store and then what do we need else show
442:45 - toast get that from our hook and then
442:48 - lastly we're going to have the
442:50 - const set user profile and you're going
442:55 - to see why once we use that not the o o
442:58 - store but use user profile store and
443:02 - State uh okay we don't need that because
443:05 - we are destructuring it and then we are
443:07 - going to call a use
443:10 - effect so inside the use effect we are
443:12 - going to have a function that gets us
443:15 - the feed posts so feed post Asing
443:19 - function and then it is going to have
443:21 - try catch finally in the finally set is
443:27 - loading to be false in the catch show
443:30 - the toast with the error message so
443:33 - let's say error with the error message
443:36 - and in the try we're actually going to
443:38 - try to fetch the posts but before that
443:41 - let's say is loading will be true and if
443:45 - the user let's say if oath user.
443:49 - following
443:50 - do length so dot length is equal to zero
443:56 - which means that this user doesn't
443:58 - follow anyone so we'll just reset our
444:01 - state set is loading to be false and set
444:05 - posts let's say to be empty array and
444:08 - then just return out of this function
444:11 - and if this is not the case then we are
444:13 - going to do our query so let's say const
444:17 - query which is going to be this query it
444:21 - was taking the
444:22 - collection P store and then it is going
444:26 - to take the posts collection
444:29 - where function okay the created by is in
444:35 - oops so where created by field is in the
444:38 - oath user. following array so this query
444:42 - will gives us the posts of the user that
444:45 - we follow and inside the try let's uh
444:49 - execute this so const query
444:53 - snapshot await get dogs so get dogs pass
444:57 - the query in it and then we are going to
445:00 - for each this so let's say const feed
445:03 - posts and empty array and then we'll
445:06 - just push it into here so query
445:09 - snapchat. for each get the document
445:13 - where we'll just return an object so
445:16 - feed post. push the object
445:20 - with the oops not so it should be Cur
445:23 - Braes the ID of the document and then
445:26 - all of the values just spread that so
445:29 - document. data and we would like to sort
445:33 - this posts with the created at field so
445:37 - that they are going in descending order
445:39 - so the latest created one at the above
445:43 - so feed posts. sort depending on the
445:48 - created at field and we'll just say set
445:51 - posts to be feed posts and as the
445:55 - dependency array we are going to add the
445:58 - oath user so whenever that changes show
446:02 - tost as well as set post and set user
446:05 - profile and we are going to call this
446:08 - function only if the oath user exists so
446:13 - if user is authenticated then get the
446:16 - feed posts so with that this function
446:19 - should be completed let's save maybe
446:22 - give a bit space and at the end we'll
446:24 - just say return is loading as well as
446:27 - the
446:28 - posts okay so we could save let's go
446:31 - ahead into the homepage so what do we
446:35 - have let's take a look we have feed
446:37 - posts so inside there we will try to
446:40 - actually get those feed posts so delete
446:43 - is loading delete this thing we're going
446:46 - to be say con we're going to be saying
446:48 - that is loading
446:50 - and then the posts get them from the use
446:53 - get feed posts custom hook which is
446:56 - going to give us the loading State maybe
446:58 - we could have only three skeletons and
447:02 - then what are we going to have else is
447:05 - so let's say this is going to be 400
447:07 - pixels delete these use effect and use
447:10 - States and let's render the feed posts
447:14 - so I can delete all of these and we'll
447:17 - just say if it is not loading in the
447:20 - posts. length is greater than zero and
447:25 - we'll just say posts. map so I think I
447:29 - could delete this for now we say post.
447:32 - map give me the each post and return a
447:35 - feed post component for them and just
447:37 - pass the post as an as a prop so we
447:42 - could close that off and that should be
447:44 - working fine for us we're going to go
447:46 - into the feed post let's see it is is
447:49 - going to be only taking the post comp I
447:52 - mean post prop so let's say
447:55 - post and inside the post header okay
447:58 - inside the post header we'll just say
448:01 - that send the post and nothing else so
448:06 - let's go into the post header we are
448:09 - taking the
448:11 - post so we'll just say
448:14 - post. um so the Avatar of the user
448:17 - profile so for now we don't have that
448:19 - value so instead I will just contrl Z I
448:22 - don't want to make it any complicated I
448:24 - will just remove this okay and let's see
448:27 - I will remove the post footer as well
448:30 - and I just want to show the post image
448:32 - for now so we'll just go step by step so
448:35 - that you guys don't get confused so
448:37 - post. image URL this is going to show
448:40 - the post and let's say uh feed post
448:44 - image and let's save we are going to go
448:46 - into the post header save this as well
448:49 - let's take a look now um so if we just
448:52 - save it like this and we have an error
448:54 - so let's take it
448:57 - back now what is going to say in the
449:00 - console Let's see we
449:03 - refresh um so we don't have any any
449:08 - posts okay we don't have any errors and
449:09 - we don't see any post it is because none
449:12 - of the users that we follow has any any
449:14 - posts so let's go ahead and create some
449:17 - we're going to go and login so this is
449:20 - the login I'll just say
449:23 - Jano 1 2 3 4 5 6 and then
449:28 - login um okay J at
449:31 - gmail.com let's log in we are going to
449:34 - create post as being Jane or if we just
449:36 - follow this user we should see their
449:39 - Post in our profile and there we go we
449:41 - see the post in our homepage not the
449:44 - profile page and if we go into our
449:46 - profile we can see that we are following
449:48 - one user which is this one and he had
449:51 - this post now we can add the post header
449:54 - as well as the post footer so let's go
449:56 - ahead and render the post header but the
450:00 - thing is in the post header we would
450:01 - like to see the profile picture the
450:03 - username that has posted this and we
450:06 - don't really get that it is because in a
450:09 - post document the only information we
450:11 - have about the user is their ID which is
450:14 - they created by and this is okay because
450:17 - that's why we have created one hook that
450:20 - is called use get user profile by ID
450:24 - okay get user profile by ID sorry about
450:27 - that we're going to go into the feed
450:28 - post and just call it so let's say use
450:32 - get user profile by ID and the ID is
450:36 - just going to be post. created by so
450:39 - this is going to give us the profile of
450:41 - that user so let's get that const user
450:46 - profile there we go we're going to get
450:48 - the post header where we are sending the
450:50 - post as well as the let's say Creator
450:54 - profile which is going to be the user
450:57 - profile this is the user that created
451:00 - this post and we are getting that data
451:04 - which we will render in a second so
451:06 - let's go here we're going to take the
451:08 - post as well as the Creator so what was
451:13 - it uh Creator
451:15 - profile so from the post header we can
451:18 - also follow follow and unfollow which
451:20 - will come back in a second so let's say
451:23 - in the Avatar we'll just say that Source
451:26 - will be Creator
451:29 - profile. profile
451:31 - pick URL and then the username is just
451:35 - going to be the exact same thing
451:37 - Creator profile. username and if we just
451:42 - save this that should hopefully work
451:44 - fine let's go here there we go we see
451:47 - this user profile picture
451:50 - username and then this follow button
451:53 - which will just change in a second but
451:55 - now we would like to go to the profile
451:57 - of this user when we clict this image or
451:59 - the username so what should we do is
452:02 - going to be just wrapping this thing
452:05 - with a link so before the Avatar I'll
452:08 - just copy one line which is this link
452:11 - component that takes us to the profile
452:14 - of this user and I will close that off
452:18 - down here so slash link import the link
452:23 - and we're going to be doing the exact
452:24 - same thing for this uh usern name field
452:28 - so I will copy this line and paste it
452:32 - here then just close it maybe down here
452:36 - if we save Let's test it out we're going
452:40 - to go here if we click that it should
452:42 - take us to this profile and let's go to
452:44 - the homepage and we have one error which
452:47 - we'll check in a second that is coming
452:49 - from post header the reason that we are
452:52 - getting this error is because in the
452:55 - homepage we are trying to get user
452:58 - profile and while it gets that there is
453:01 - a loading state so for that we can show
453:03 - a skeleton instead of showing these
453:07 - avatars and this username so let's go
453:10 - before the link we'll just say Creator
453:13 - profile if it exists render this or if
453:16 - it is not then render this so so in the
453:20 - uh exist place we're going to put that
453:22 - link so I'll just cut it paste it and if
453:26 - it is not exist we will just show a
453:28 - skeleton so I could just say skeleton
453:31 - circle with the size of 10 and import
453:34 - the skeleton Circle and we'll just do
453:37 - the exact same thing so let's go here
453:40 - instead of copying and pasting I'll just
453:42 - say if Creator Creator profile exists
453:45 - question mark render this else render
453:48 - this and in the else case we're going to
453:51 - show a skeleton in the correct case we
453:54 - are going to let's say we'll just show
453:57 - this thing I'll cut that paste it and
454:01 - for the skeleton we could have width of
454:04 - 100 pixels and height of 10 pixels and I
454:09 - think this should have um okay we'll
454:12 - just take this box out of this place get
454:15 - the skeleton save it and now sorry if
454:18 - that look looked any confusing but this
454:20 - is what we have for the loading State we
454:23 - just show a skeleton and skeleton Circle
454:26 - so that we don't get any errors so
454:28 - hopefully let's refresh and we don't
454:30 - have any errors but instead we have that
454:33 - loading state so I will
454:37 - refresh do you see like we have that
454:39 - loading skeleton and now we would like
454:41 - to add this um follow and unfollow
454:45 - functionality to here and you might
454:48 - think that it is really hard how are we
454:50 - going to type that functionality again
454:52 - but this is not the case we already
454:54 - created that so use follow hook right
454:58 - we're going to go into the post header
455:00 - and we'll just say use follow user so
455:03 - just call it with the user that you
455:05 - would like to follow so just say post.
455:09 - created by so if you remember this hook
455:13 - we're taking the user ID that you would
455:15 - like to follow or unfollow that's why we
455:18 - are passing the ID of this user which in
455:21 - turn will return us so handle follow
455:25 - user function is following state so
455:28 - either true or false and the loading
455:31 - state which is updating so let's save
455:34 - and how are we going to handle that will
455:36 - be from this button for now it says text
455:40 - but I think we should change it with a
455:42 - button so that it actually makes sense
455:47 - and font size 12 let's say say size is
455:50 - just going to be XM small and then
455:53 - background of
455:56 - transparent and lastly after all these
455:59 - styling we will just add that onclick
456:02 - function handle follow user and for the
456:06 - updating state is loading will be is
456:09 - updating so let's save and do we have
456:13 - any errors is following okay the text
456:17 - that says follow or unfollow will be
456:19 - depending on that state so if it is
456:22 - following then it is just going to say
456:25 - unfollow so un follow and in the El case
456:29 - it's going to say follow and that's it
456:31 - this is the beauty of custom Hooks and I
456:34 - just set that 100 times but I'll just
456:36 - say it again and again that's why this
456:39 - is what makes your code clear so let's
456:42 - save and with only one line we are able
456:45 - to follow and unfollow a user so let's
456:48 - go ahead if we refresh we are going to
456:50 - get a clean State now we are following
456:53 - this user that's why it says unfollow if
456:55 - I click that now I am unfollowing that
456:59 - and now this user is inside the
457:01 - suggested user component and I don't see
457:04 - any post in my Prof I mean in my
457:06 - homepage and in this case user might say
457:09 - hey why I don't see anything so let's go
457:12 - into the feed posts component and show
457:15 - something like hey man you don't uh
457:17 - follow anyone just go ahead and make
457:19 - some friends so after this feed post we
457:22 - are just going to check for one
457:25 - condition so if it is not loading so
457:28 - let's say not is loading and post.
457:31 - length is equal to zero which means that
457:34 - this user don't have any friends so it
457:36 - is not following anyone so we are just
457:39 - going to create a text so I think I'll
457:42 - just copy and paste
457:45 - it so it says damn looks like you don't
457:48 - have any friends stop cutting and go
457:50 - make some so we could save and let's
457:53 - take a look this is the output that we
457:56 - got and if we follow this user let's see
458:00 - there we go it has been updated in our
458:02 - feed and we see this post and let's
458:04 - follow this user as well but it doesn't
458:06 - have any posts so we will not be able to
458:09 - see that in our feet but let's just
458:11 - follow him as well and there we go now
458:14 - we would like to add the post footer as
458:17 - well so let's go here here we'll go into
458:20 - the feed post where we have the post
458:22 - putter instead of rendering the username
458:25 - that was for the design part I need to
458:27 - say that again so that you remember so
458:29 - we're going to have the post send that
458:32 - and also the Creator profile which is
458:35 - the user profile so that we can show
458:37 - some information about the user I will
458:40 - save this I'll go into the post foter
458:43 - and then let's see what are we going to
458:45 - be adding so this will also take the
458:48 - Creator
458:49 - profile okay that was this prop and we
458:52 - are going to go down below and where we
458:55 - have this if it is not in the profile
458:57 - page so which means that now we are in
458:59 - the homepage and we are rendering the
459:01 - post footer instead of showing the
459:04 - username we are going to say Creator
459:08 - profile. username and we should put a
459:11 - question mark so that uh we don't get
459:14 - any errors if it is in the Lo loing
459:16 - State and then we would like to see the
459:18 - post post. caption so post. caption and
459:22 - then what do we want to see instead of
459:26 - this uh so 1,000 hardcoded value we'll
459:29 - just say post. comments.
459:34 - length and we are only going to show
459:37 - this if this post has any comments so we
459:40 - don't want to say like we all zero
459:42 - comments if this post any post I mean if
459:45 - this post doesn't have any comments then
459:47 - we are not going to even render this so
459:49 - I'll cut that for a second I'll say
459:51 - post. comments. length is greater than
459:54 - zero then render this thing that I just
459:58 - copied or I cut it and let's see font
460:01 - size of small color gray and let's say
460:05 - cursor will be pointer and we're going
460:08 - to be adding another functionality so
460:10 - that when we click to that we will see
460:11 - all of the comments um we'll just delete
460:15 - this let's save and hopefully it should
460:18 - be wor working okay we see the post
460:20 - footer where we have view all five
460:23 - comments it is because this post has
460:26 - five comments and if you don't want to
460:28 - believe me let's go to the profile page
460:31 - we're going to
460:32 - wait so if we hover over this this post
460:36 - has five comments so 1 2 3 4 five and
460:39 - this is the caption so let's go to the
460:42 - home so after this likes count we would
460:45 - like to show when this post has been
460:48 - created it but we don't really want to
460:50 - see that here it is because so let me
460:53 - just add that and you will understand so
460:55 - below the likes I will go ahead and I'll
460:58 - say if it is in the profile page so not
461:01 - in the homepage because we are using
461:03 - this component both in the homepage and
461:05 - in the profile page so I'll say give me
461:08 - a text that has the font size of 12 not
461:13 - family font
461:15 - size 12 and then let's say color will be
461:19 - gray and inside this text you'll just
461:22 - say post it time ago and then post that
461:25 - created at so import the timeo function
461:29 - scoop this thing in and save it I think
461:34 - we're going to go ahead and save it like
461:37 - that so if we go into the homepage we
461:39 - don't see that but let's go into the
461:41 - profile page of this user and if we
461:44 - click this post now it says posted 1
461:47 - hour ago after this likes so it is
461:51 - because we have that after the likes we
461:53 - say post it our ago and then we only see
461:58 - that if we are in the profile page so at
462:01 - this point I feel like I am explaining a
462:02 - bit too much but hopefully we are
462:05 - understanding everything as we go also
462:08 - Let's test it out if we can like the
462:10 - post from the homepage and that should
462:12 - be working I'll click to that now this
462:15 - post has one like let's take a look this
462:18 - this post um let's see cancel it has one
462:20 - like if I say unlike and it is updated
462:25 - now this doesn't have any likes so we
462:27 - can just like unlike and let's add one
462:29 - more comment one more comment from the
462:34 - homepage and let's post it and it
462:37 - immediately says view all six comments
462:41 - because we have built our application in
462:43 - a way that every state is in sync with
462:46 - each other so this is absolutely
462:49 - fantastic and yeah I'm just proud of the
462:52 - application that we have built so far
462:54 - with that Flex out of the way let's go
462:56 - ahead and add this functionality where
462:58 - when we click to this view all six
463:01 - comments button it is going to open up a
463:03 - model that shows all of the comments and
463:06 - we are going to be doing that I think if
463:08 - we are only in the
463:10 - homepage um it is because in the profile
463:13 - page if we click the post we already see
463:16 - all of these and in fact we don't even
463:18 - see that we all six comments in this
463:22 - component it is because all of the
463:24 - comments are here so here we have a
463:27 - little bit of styling error but I just
463:29 - let that as a challenge for you so you
463:31 - would just fix that but in this case
463:33 - it's okay and I don't really want to
463:35 - waste any time so let's go ahead and
463:38 - build it in this component where when we
463:41 - click this we are going to open up a
463:43 - model so I'll just give a break and then
463:46 - come back to this functionality okay
463:48 - let's go ahead and build that model so
463:51 - when we collected this text we would
463:53 - like to open up that model so we are
463:55 - going to be using the model component
463:57 - from Chakra when we click to this text
464:00 - inside the post footer so before that
464:03 - let's create that component you can
464:05 - create it into this comment folder
464:07 - because it is related to comments but
464:10 - instead I'll just create another folder
464:12 - called models and I'll just put my
464:15 - comment model here
464:18 - jsx and at this point I will copy and
464:21 - paste it about 30 lines of code and I
464:24 - will copy and paste it again so that you
464:27 - can copy and paste this it is nothing
464:31 - than just a model so let me just put it
464:34 - here copy and paste as the starter
464:42 - code for the
464:45 - comment comments model
464:50 - component okay we should rename this
464:53 - let's say
464:58 - comments and it is called as comments
465:00 - model so what it has is just a basic
465:03 - model which is taking is open and on
465:06 - close as props so we're going to go
465:08 - ahead inside the post footer and we're
465:10 - going to call it right here so since we
465:13 - are using a model we'll just say use
465:16 - disclosure hook it is going to give us
465:19 - three values is open let's say const is
465:24 - open on open and on close so we are
465:29 - going to go and say when we collected
465:31 - this VI all comments unclick open up the
465:36 - model so onop and we only want to see
465:39 - this model if we are in the homepage so
465:41 - if it is not profile page so we're going
465:44 - to go ahead and let's say comments model
465:48 - only in the home page let's say if it is
465:53 - open then just render the
465:57 - comments model and we're going to pass
466:00 - the is open and on close oops so that
466:04 - should be here on close it's going to
466:07 - take on close as well as the post so
466:10 - that we can fetch the comments from this
466:12 - post let's close that off and maybe it
466:15 - is just better if we use it like this
466:18 - I'm going say
466:20 - null okay so that should be working
466:23 - hopefully let's save and let's take a
466:25 - look we're going to go here if you click
466:27 - that it is going to call the onop
466:29 - function where we just get this model
466:31 - and when we post a comment we're going
466:33 - to see that comment here and currently
466:36 - we are not fetching any comments because
466:38 - this comment has I mean this post has
466:40 - six comments we would like to see all of
466:43 - these so we don't really need to fetch
466:45 - it because post already have it and we
466:49 - already fetch that in other components
466:52 - so we are going to go ahead into the
466:54 - comments model into this Flex we're just
466:57 - going to render that so this component
466:59 - will be taking a post as a prop that we
467:02 - sent right here okay this is taking the
467:04 - post itself so we'll just go ahead and
467:07 - inside this Flex we'll just map that so
467:11 - post. comments. map give me each comment
467:15 - and then render this jsx which is going
467:17 - to be the the comment component itself
467:20 - it is going to have the key as well as
467:21 - the comment so we don't have this
467:23 - comment component so let's import that
467:26 - um it is coming from from the comment
467:29 - folder um and then get the comment so if
467:33 - we use it like this then we have an
467:35 - error before that let's comment this out
467:37 - it is because we don't have this ID
467:39 - inside the comment object so I'll just
467:41 - say console.log the poost save it let's
467:45 - take a
467:46 - look
467:48 - if we open this up there we go this is
467:51 - the post and comments array but each
467:54 - comment don't have an ID in this object
467:57 - at least in the database so let's go
468:00 - here posts so these are the comments
468:02 - array that we have but we didn't really
468:04 - put an ID maybe we should um in at this
468:07 - point it is not really a problem so we
468:10 - can use uh the index as the key but I
468:14 - would suggest you to just add a comment
468:16 - when you create that so it is going to
468:18 - be here so you would somehow add an ID
468:21 - into this comment and there are other uh
468:24 - functions that Firebase actually handles
468:26 - that for you so just check out the
468:27 - documentation and add that so let's not
468:30 - waste any time I'll just delete this and
468:33 - let's go here comment this out and then
468:35 - we'll just say key is going to be the
468:37 - index let's get that so adx we're just
468:41 - going to say key will be idx starting
468:44 - from zero let's save and hopefully that
468:47 - should be working we are going to go
468:49 - ahead and there we go these are the all
468:51 - of the comments that this post has so
468:54 - when we click to that it has the All
468:55 - loing State and it shows up so we can
468:58 - even comment from here if we wanted to
469:00 - let's add that functionality we're going
469:02 - to go into this comments model and when
469:05 - we collected this or when we submit this
469:07 - form we would like to uh post the
469:10 - comment so you might think that we need
469:12 - to create this functionality all over
469:15 - again but not really we have a hook that
469:19 - post the comment so we're actually going
469:21 - to be calling it so let's say use post
469:25 - comment this hook will give us two
469:28 - values so the function let's say const
469:32 - um so the function was handle post
469:34 - comment as well as the loading state
469:36 - which was the is commenting so we're
469:38 - going to go ahead and let's say when we
469:41 - submit this form on submit call a
469:44 - function called handle submit
469:48 - comment and you'll see why we're using
469:51 - this function we'll just say const it is
469:53 - going to be an async function e. prevent
469:57 - default so this is the first reason we
470:00 - don't really want to refresh our page so
470:03 - do not refresh the
470:06 - page prevent it and then after
470:10 - preventing this we'll just say a wait
470:12 - call this handle post common function
470:15 - and if you remember it was taking the
470:16 - post ID as well as the comment itself
470:20 - and we can get this comment's value by
470:22 - using a ref so let's say const comment
470:26 - ref you can use a use State as well but
470:29 - I'll just go with a comment ref and then
470:31 - this is going to be into the input let's
470:33 - say ref comment ref so when you type it
470:37 - into this input you can get the final
470:40 - value by saying comment r current. value
470:44 - and this is going to post the comment
470:46 - for you so let's import this one and use
470:50 - the loading State for the button is
470:53 - loading will be equal to is commenting
470:57 - and once we post the comment we would
470:59 - like to clear that input so just say
471:02 - comment R current value is going to be
471:05 - an empty string so that should be handle
471:08 - for us actually let's save and again be
471:11 - of custom hooks where we just call it in
471:14 - on line get the function call it have
471:17 - the loading State and everything works
471:20 - flawlessly um let's go ahead and test it
471:22 - out I'll just refresh in case we have
471:24 - any errors um so yeah so this the
471:28 - question mark we have it is because I
471:30 - submitted off camera so let's take a
471:33 - look um one more comment
471:37 - from the comment model so let's say
471:41 - comment from comments model and if you
471:44 - just post okay it says n. index of is
471:47 - not a function so what this problem is
471:51 - okay that was taking the post ID and I
471:54 - just sent the post if we save let's test
471:57 - it out again one more
472:02 - comment let's say uh let's post this it
472:06 - it has the loading State and there we go
472:08 - so now we can scroll and this is the
472:11 - comment that has just been posted one
472:14 - second ago and here it also updates the
472:16 - state where it just says view all seven
472:20 - comments so let's add one more I'll just
472:23 - say one more and that should be
472:28 - eight okay it has been updated and here
472:31 - we go the new comment is here but when I
472:35 - comment so if I just put something here
472:38 - I want to this scroll bar to scroll for
472:41 - me and we can use a use effect for this
472:43 - we're going to implement that inside
472:45 - this commments model jsx component you
472:47 - will just say get a ref initially so
472:51 - const
472:53 - comments container ref and it's going to
472:57 - be null and we'll just put it into the
472:59 - commments Container which is this Flex
473:01 - that holds all of the commments so let's
473:04 - say ref and the reason that we're
473:07 - putting this we are just going to scroll
473:09 - to the very bottom in this container so
473:12 - max site is 250 and once there is a new
473:15 - comment we'll just scroll to the Bott
473:17 - bottom and also on the mount when this
473:20 - component so when we first open that up
473:23 - we will like to just scroll to the very
473:25 - end so let's add that we'll just say use
473:29 - effect for this now we're going to go
473:32 - inside and create a function that
473:33 - actually scroll to the bottom okay so
473:38 - it's going to be only one line so let's
473:40 - say
473:42 - comments container ref. current. scroll
473:47 - Toop is going to be equal to this uh
473:49 - scroll height so that will just scroll
473:52 - to the very end for this uh container
473:55 - and then we'll just say if this is open
473:58 - so on the on Mount we'll just say scroll
474:02 - to bottom and this should run whenever
474:05 - the is open changes as well as the post
474:10 - comments. length so whenever a new post
474:13 - comment I mean new comment post it it is
474:15 - going to scroll to bottom so if if we
474:17 - save it like this then we're going to
474:19 - get an error so let's see I will click
474:21 - to this and it says that um so it cannot
474:25 - read properties of null which is scroll
474:28 - height so it is because when this use
474:31 - effect runs for the first time so on the
474:34 - on Mount this uh thing is empty the
474:37 - container. current is null and this is
474:40 - because I think how react renders things
474:44 - so we could maybe just delay this I'll
474:46 - cut that set
474:47 - time out and just delay it for 100
474:50 - milliseconds not 1,000 but 100 so if you
474:54 - just call it like this then it should
474:56 - fix the problem let's go here um close
474:59 - here let's say we all 11 comments and
475:02 - there we go it's scroll to the very end
475:04 - for us I'll just say hey scroll for me
475:09 - and post it there we go it scroll for us
475:12 - to the very last comment so this is
475:15 - going to be it for this component and
475:16 - function fun ality in the homepage where
475:18 - we can see all comments and even comment
475:21 - from this component and I think this is
475:23 - the entire application that we have just
475:25 - built in the homepage we see the posts
475:27 - of the users that we follow we can like
475:30 - that or unlike that we can see all the
475:33 - comments or even we can comment
475:35 - ourselves as well so we can follow these
475:38 - users or unfollow them and it is going
475:40 - to update our user interface depending
475:42 - on that we have that suggested user
475:44 - component where we can also follow users
475:47 - from there we can visit our own profile
475:50 - and edit our profile by adding editing
475:54 - profile picture as well as these inputs
475:56 - so we could create a post that will
475:58 - update our user interface as well as the
476:01 - post State and we were even handling the
476:04 - error States so if you just post without
476:06 - an picture or image it'll just say
476:08 - please select an image file and then we
476:11 - could search for users if we search for
476:13 - ourselves so let's say jandoo it is not
476:16 - going to show show that follow button or
476:18 - if you just search for someone like
476:21 - jandoo it is going to actually show that
476:24 - follow or unfollow button and besides
476:27 - all these we have authentication going
476:29 - on where we can log out create an
476:31 - account with email and password log in
476:33 - with that or we can basically sign up or
476:35 - sign in with our Google account so let's
476:38 - see if there is any optimizations that
476:40 - we can add and then we're going to get
476:42 - into the fire store add our security
476:44 - rules and then just deploy the
476:46 - application
476:47 - the first optimization or fix that we
476:49 - can add will be this uh posted time so
476:52 - we're going to go ahead instead of
476:54 - having this hardcoded value inside the
476:56 - post header we'll just say call our
476:58 - function maybe I'll just give a bit
477:00 - space time ago function call it with the
477:04 - post do created at timestamp so let's
477:07 - save and you'll just see that it has
477:09 - been updated to the actual value another
477:12 - optimization that we could add will be
477:14 - inside the create post component so so I
477:17 - said that we are going to create this
477:19 - path name and we're going to use it
477:20 - later so it is now time to use it so the
477:24 - thing is when we are creating a post we
477:27 - are updating this state and it is
477:29 - because let's go here it is inside the
477:32 - user profile sore that is used to update
477:35 - the number of posts in the profile page
477:37 - so if I create a post in this page which
477:40 - is my profile then it is going to update
477:42 - the number of posts but I only want to
477:45 - increment this if I am in this page so
477:48 - if I create a post in the homepage I
477:50 - don't really want to update this state
477:53 - because this is null when I am in the
477:55 - homepage so I'll just go ahead and say
477:57 - that if the path name is not equal to
478:01 - the home so I'll just say not equal then
478:04 - actually call this function so we could
478:06 - make it on line and save it now this is
478:09 - that optimization that we just added but
478:12 - now I think we have another problem so
478:14 - if I am in the profile page of this user
478:17 - which is not me so I'll just create
478:19 - another post so I will just select the
478:22 - image of Bob and maybe not Bob so let's
478:25 - go ahead and say John okay I'll just say
478:29 - this is John now if I post this this is
478:32 - not the profile that this is not our
478:35 - profile okay if we post then now it is
478:39 - going to look like if if this user has
478:41 - two posts which is not correct so we are
478:44 - going to add if this is not the homepage
478:48 - and we're going to say if user profile
478:52 - do we have that
478:54 - value no we need to get that so we'll
478:57 - just say duplicate this give us the user
479:00 - profile
479:04 - State okay we'll say user profile. uid
479:09 - is equal to the oath
479:13 - user. uid so if this is our profile then
479:17 - update that number of posts so let's
479:20 - save and I'll just create another post
479:22 - by refreshing this so this user has one
479:25 - post now I'll just create another
479:29 - one so I'll just just say this is B and
479:34 - if we post that hopefully it shouldn't
479:37 - increment and there we go but we have
479:40 - another problem that it adds this post
479:43 - into this profile and it is because we
479:45 - are updating this state whatever happens
479:48 - so I will just copy this maybe or
479:51 - actually cut this I'll just say
479:54 - if this thing okay if user profile. uid
480:01 - is equal to oath
480:03 - user. uid then actually update this
480:08 - state by creating the post function so
480:11 - let's go ahead refresh and test it
480:15 - out
480:18 - so I'll just say please work let's post
480:22 - so it shouldn't update anything in this
480:25 - page and there we go post created
480:27 - successfully number of posts didn't
480:29 - increment the posts um so to say the
480:33 - post hasn't been added into this field
480:35 - and if we go into our own profile page
480:38 - there we go we have three post and they
480:40 - are all posted just now so 1 minute ago
480:44 - and 2 minutes ago so even test out
480:47 - further I'll just create another post
480:49 - but in my own profile page so I'll just
480:52 - select it maybe
480:54 - John not the John so let's say
480:58 - Bob I'll just say this is Bob or even I
481:02 - don't have to say anything in the
481:04 - caption if I post that now it should add
481:06 - it into this component and there we go
481:09 - number of posts has been incremented by
481:11 - one which means that it works as
481:13 - expected now one more thing that we like
481:15 - to add is that when we click to the
481:17 - suggested users profile picture or the
481:20 - name we would like to get into his
481:22 - profile so for this we can go into the
481:24 - suggested user. jsx and we're going to
481:27 - wrap our Avatar with a link so I'll just
481:30 - paste this line where it just uh links
481:32 - to the user. username it's going to take
481:36 - us to his page and let's close that off
481:39 - and we're going to import the link from
481:41 - react router D which I already had okay
481:45 - and for the uh full name we're going to
481:47 - just do the exact same thing I'm going
481:49 - to copy this line and then wrap this box
481:52 - with it so let's paste the link closing
481:56 - tag and now if we click to their profile
481:59 - that should take us to their page so
482:02 - these were the fixes and optimizations
482:04 - that we could make into our application
482:06 - and now I'll just pause the video here
482:08 - and I will add a couple of more users
482:10 - into this application and then I'll just
482:12 - add a couple of more posts so that our
482:15 - homepage looks a little bit cooler
482:17 - okay so I have added three more accounts
482:19 - the first one being is Jesse Pinkman
482:22 - which we are logged in as Jesse so let's
482:24 - go to homepage we don't have any friends
482:26 - so let's just make some we're going to
482:28 - follow the Walter as well as the Skyler
482:31 - so let's wait for that okay it's been
482:33 - updated and let's follow this girl as
482:37 - well there we go now we have all of our
482:40 - posts in our feet the users that we
482:42 - actually follow so we could
482:45 - like the this looks insane let's just uh
482:49 - post a
482:50 - comment and there we go we have one
482:53 - comment let's see that Jesse says this
482:55 - looks insane so we could follow other
482:58 - users and the feed posts will be sorted
483:01 - from the latest created one to the very
483:05 - first one so this is the entire
483:07 - application now let's go ahead and add
483:09 - our security rules into our Firebase
483:12 - console so now I am in the fire store
483:14 - database and I click to this rules tab
483:17 - so here we can see our security rules
483:19 - and this is not secure at all it's
483:22 - because it always allows to read and
483:25 - write operations as long as we are
483:27 - within this Tim stamp which we are so we
483:30 - don't really want this so we're going to
483:32 - delete that and inside this statement
483:35 - we're going to go ahead and write our
483:37 - rules so we will allow every user to
483:40 - read users collection so even if they
483:43 - are logged out they are not
483:44 - authenticated they can still come to to
483:46 - this page the Jessi Pigman page and they
483:49 - can see this informations such as
483:51 - biography of Jesse username number of
483:54 - posts followers uh number of following
483:58 - and that kind of stuff so we're going to
484:00 - go ahead and we'll just T and match the
484:04 - users collection and then a placeholder
484:07 - so this value could be anything I'll
484:09 - just say user ID because this is what
484:12 - that is and then Cur races we're going
484:15 - to write our rules so we would like to
484:18 - allow read operations always so even if
484:22 - you are logged in or you are logged out
484:25 - it doesn't really matter but we only
484:27 - want to allow to write operations so
484:30 - Colin and your rules so or the
484:34 - conditions if
484:37 - request. oath is not null so if user is
484:41 - authenticated this is what it says and a
484:45 - user can only wrun write into their own
484:47 - document so they cannot go and update or
484:50 - write into another user's document so
484:53 - let's say request. oath which is the
484:56 - which is the user that actually sends
484:58 - the request. uid is equal to this user
485:03 - ID document if this is the case we are
485:06 - going to allow the write operation and
485:08 - now let's go ahead and write the post
485:11 - security rules so we are going to allow
485:14 - everyone to read posts so such as post
485:17 - info maybe like the post text right the
485:20 - caption the post image number of likes
485:23 - and maybe also the comments so let's
485:26 - just write it down and then we'll just
485:28 - write a couple of more so I'll say match
485:31 - the posts collection and then post ID
485:34 - again this is a placeholder that could
485:36 - be anything but it should be meaningful
485:40 - right so let's say allow read operations
485:43 - in any case so always and then you're
485:46 - going to say allow they should be able
485:48 - to create posts only if they are
485:50 - authenticated so I'll just say if
485:54 - request. oath is not
485:58 - null so same goes for the update so
486:01 - allow update operations if request is
486:06 - request. O is not null so if user is
486:09 - authenticated and so we have an end here
486:12 - it is that a user can only update a post
486:15 - if he is the creator right so we'll just
486:19 - say request. oath. uid is equal to now
486:24 - how are we going to get the posts um so
486:27 - like post created by field if you
486:30 - remember we had that so this is how we
486:33 - get that so we just say resource in this
486:35 - case it is going to be the
486:36 - post. data not date data and created by
486:42 - so that was the field that we had if you
486:44 - remember and it's going to the same
486:46 - thing for delete operation so maybe I
486:49 - will just copy this
486:51 - line and paste it so allow delete
486:55 - operations if user is authenticated and
486:59 - user is the owner of this post and
487:03 - that's it now if you wanted to you could
487:05 - add more uh rules so you would just
487:07 - think of it what can I add to here just
487:09 - to make it more secure so I'll just
487:11 - publish this rules and let's see
487:16 - so okay it says publish changes can take
487:19 - some time so you should just readit a
487:21 - little bit so while it is being done in
487:23 - the background so maybe I'll just zoom
487:25 - in a little bit so that you guys can see
487:27 - that in a better way okay like this I
487:30 - think it is better and let's go ahead
487:32 - and just add our environment variables
487:35 - in case you push this repo to your
487:37 - GitHub and we're going to go into the
487:40 - Let's see we had this inside the
487:43 - Firebase these are going to be our
487:45 - environment variable that we're going to
487:46 - put into aemv file the first thing that
487:49 - we need is to create an EMV file so I'll
487:52 - just go into the rout and I'll just say
487:54 - EMV and now in V if you want to create
487:58 - EMV I mean environment variables you
488:00 - need to prefix it with vcore so
488:04 - something like so this is the API key
488:06 - let's say and I'll just say
488:09 - vcore Firebase uncore API uncore key and
488:14 - it is going to be equal to this value
488:17 - I'll just copy and paste
488:19 - it and now I'll just do the same thing
488:22 - for all of these values okay maybe I'll
488:24 - just spit up this part or maybe I'll
488:26 - just cut it okay so I just put them side
488:29 - by side there you can see we have the
488:31 - API key Vore Firebase uncore API uncore
488:35 - key and then just put the value and I
488:37 - just uh do the same thing for this
488:39 - remaining six ones so the O domain uh
488:41 - the project ID storage bucket messing
488:44 - and ID app ID measurement ID so just do
488:46 - the same thing copy and paste that now
488:49 - instead of putting this string we'll
488:51 - just use that value from that EMV file
488:54 - so I'm going to save this file from here
488:56 - and then the way to do this or to use
488:59 - this will be with import so we'll just
489:02 - say
489:03 - import. meta do EMV do and you just get
489:08 - the each value one by one so in our case
489:11 - Vore Firebase API key and I'll just do
489:15 - the same thing thing for each of these
489:17 - so here I just basically did the exact
489:19 - same thing I got the O domain project ID
489:22 - storage bucket all of them from The Meta
489:24 - EMV and now I think we could save this
489:27 - and let's take a look if our application
489:29 - still functions but maybe we need to
489:31 - just kill our terminal terminal and open
489:33 - that up um I think that might be
489:36 - required some cases when you update the
489:40 - EMV file so let's say contrl B to open
489:42 - up this panel and inside the get ignore
489:45 - we will to add this EMV file so we are
489:48 - going to go ahead let's see maybe at the
489:51 - very bottom we'll just say EMV just
489:53 - ignore this file uh this file in our
489:56 - GitHub repo so let's see if our
489:59 - application has been initialized or
490:01 - started yes it is in this port let's go
490:04 - ahead and we'll just say and let's see
490:08 - if that still
490:12 - works okay it is loading and it's been
490:14 - loaded actually say hey Jesse nice car
490:19 - and if you just send that and hopefully
490:22 - it is still working so it is still
490:24 - connected to our Firebase account and
490:27 - one thing so in the terminal you see
490:30 - this as um so this IP address instead of
490:33 - Local Host address right if you put that
490:36 - you might get an error while while you
490:39 - are logging in or signing up with your
490:41 - Google account and for this you need to
490:44 - go into the Authentication
490:46 - as far as I believe so into the settings
490:49 - let's see so authorize domains you need
490:53 - to go here and add one more domain and
490:57 - it should be this so let's
491:00 - see okay we need to take this and just
491:04 - paste it so you could either do it in
491:06 - that way or you would just use something
491:09 - like just like me just Local Host
491:11 - 517 uh 73 this port address and you'll
491:16 - not get any errors when you login or
491:18 - sign up with your Google account so just
491:21 - keep that in mind if you if any of you
491:23 - get that error and I think with that our
491:26 - application is ready to go so we can
491:29 - even search for other users let's say
491:32 - Walt or maybe
491:34 - Heisenberg that was the username that I
491:36 - created so let's search this is the
491:39 - Walter White that we are following we
491:41 - could go into his profile and there we
491:44 - go this is all of his post we can
491:47 - like um okay so missing or insufficient
491:50 - permissions so I think we did something
491:53 - wrong in the Firebase rules so let's
491:56 - take a look um this is not our error
492:00 - okay we cannot like maybe it is so it is
492:04 - definitely related to security rules and
492:06 - it is nice that we see this error so
492:08 - let's check that so I think it is
492:10 - related to this line I haven't tested
492:13 - out so I'll just delete this so we here
492:15 - we are just saying that if we are the
492:17 - owner of this post then we can update it
492:20 - but this is not the case so this post
492:23 - has been posted from this user but we
492:25 - are the Jesse right so when we like that
492:29 - we are actually updating this post likes
492:31 - count so we should delete this line and
492:37 - let's publish this and let's see if that
492:40 - will solve our errors now I will go into
492:43 - this application maybe I'll just do a
492:45 - quick
492:47 - refresh and now let's try to like a
492:51 - post and there we go now we can like and
492:54 - unlike and I am really happy that we got
492:56 - that error while doing some live coding
492:59 - or live checking so now we can like or
493:02 - unlike so let's just put a comment hey
493:07 - dude let's post that and there we go
493:10 - post has been posted if we refresh we
493:12 - going to still see that post and and
493:16 - yeah I mean we can still see that
493:17 - comment and we can like that post again
493:20 - so this is going to be it for the
493:21 - Firebase rules and implementations now
493:24 - the only thing that we left should be to
493:27 - actually push this repo into our GitHub
493:30 - account so this is a git repo if yours
493:33 - is not you should just say git in it and
493:36 - press enter that will initialize it as a
493:38 - git repo but mine is already a git repo
493:41 - so I even have I think two comets so
493:44 - I'll just say git log d-1
493:48 - line and there we go I have one commit
493:51 - that I have committed when I uh
493:54 - completed the design part and then one
493:55 - more to update the read me file and now
493:58 - it is time to add another commit and I
494:00 - think this is going to be the last one
494:02 - hopefully so I'll just say get add all
494:06 - but before that let's check if there is
494:07 - anything that we don't want to push um
494:10 - so EMV is ignored and okay that should
494:14 - be it I think there is nothing important
494:17 - other than that EMV file in our case
494:20 - right so we are even storing them and
494:24 - yeah so get add all and we'll just say
494:27 - get commit maybe we should say um as the
494:32 - message completed the entire application
494:36 - so you never so you actually never
494:38 - complete a project so I'll just say
494:41 - addit or maybe something
494:44 - like
494:46 - connected design to the back
494:50 - end and let's just commit
494:54 - this now we are basically going to just
494:56 - push that to the GitHub so to say get
494:59 - push and that should handle that for us
495:02 - okay so we're just going to go into the
495:03 - versal and import that git repo and then
495:07 - just deploy it okay so now I am at
495:09 - ver.com slne if you don't have an
495:12 - account create one for free and then get
495:14 - into this route so we're going to import
495:16 - this Instagram clone uh project so I'll
495:19 - just import that and we need to add our
495:22 - environment variables for this we're
495:24 - going to go into here and just copy all
495:27 - these and let's go here environment
495:31 - variables just click to this and paste
495:34 - it is going to paste all of them for you
495:36 - and you'll just deploy that so let's
495:39 - wait while it deploys and there we go it
495:42 - says congratulations you just deployed a
495:44 - new Pro to ourself so let's continue to
495:47 - dashboard so here it gives us two uh or
495:50 - maybe yeah two domains so let's just
495:52 - click to
495:53 - this and here we have three domains
495:56 - actually so let's click to this one and
495:58 - it's going to take us to this page we
496:00 - could go to this one okay so we got in
496:03 - security error it is because uh Google
496:06 - thinks that you're actually doing some
496:08 - really bad operations because Instagram
496:11 - is a very well-known application so it
496:15 - just thinks that you are trying to cheat
496:18 - people so for this we can go and just
496:21 - change our domain so that was the so
496:24 - let's go into the settings this is our
496:26 - project so we're going to go into I
496:29 - think maybe advance or
496:33 - deployment so let's see what we have
496:36 - environment
496:37 - nope um so we okay we have domains so
496:41 - we're going to click that and we'll just
496:43 - edit this so here I'll just change it I
496:46 - don't know what to say so I don't want
496:48 - to think about it I'll just say social
496:51 - app as a programmer and you could just
496:54 - put really anything that you want and
496:56 - I'll just save so this is the new domain
496:59 - we have if we click that we are never
497:02 - going to get that security error so
497:04 - because Google doesn't think now this is
497:07 - it we are cheating someone okay so we're
497:10 - going to go ahead and try to log in so
497:12 - maybe I'll just say Skyler at
497:17 - gmail.com from 1 to 6 that should be 1 2
497:21 - 3 4 5 6 let's log in and hopefully it
497:24 - should log Us in and there we go Skyler
497:28 - doesn't follow anyone so let's go ahead
497:30 - and follow the husband and we have again
497:34 - unsufficient permissions we're going to
497:37 - go into the Firebase rules so I am sorry
497:39 - that we are getting these errors and
497:41 - again we are trying to update the users
497:43 - do collection it is because when we
497:45 - follow someone we are incrementing the
497:47 - number of followers and we are trying to
497:49 - update that but this rule doesn't allow
497:51 - us so we could just delete this and save
497:54 - and maybe there would be a better way to
497:57 - write this rules but you get the point
498:00 - and after this video maybe you could
498:01 - just improve this and yeah so we just
498:04 - published that so let's go ahead and
498:06 - test it out so now we are here I'll just
498:08 - refresh this page and let's see so this
498:12 - user has one follower now let's try to
498:14 - follow it again
498:16 - and there we go now we can follow that
498:18 - and update that user document and we can
498:21 - just see any post we can like it hey
498:24 - nice post we can even comment and we
498:27 - have comments we can see that and just
498:30 - everything there is one more thing that
498:32 - we are missing so if we go to the
498:35 - homepage in this application it works
498:38 - but if we try to go let's go to here
498:40 - inside the application we can go to this
498:43 - page but let's
498:45 - um just press enter to directly go to
498:48 - this page so we're going to get an error
498:51 - because routing is not handled for us so
498:54 - we cannot just copy this and open up a
498:56 - new tab and just paste it so it doesn't
498:59 - work it is related to V and we need to
499:03 - go and create a file called versal Json
499:07 - so into the root of the
499:09 - project so we'll just say unal do Json
499:14 - and then just just paste this line which
499:16 - you can grab from the preo so basically
499:19 - with this above code we are telling your
499:21 - cell to map incoming roads to the file
499:24 - that points to the index HTML so we're
499:28 - going to save this and let's get add all
499:32 - kit commit
499:34 - DM uh ver cell. adjon file
499:39 - addit and we'll just get push
499:43 - that so once we push this the versel is
499:47 - going to take a look at so let's go into
499:50 - our versel account so versel is going to
499:52 - take a look at the project and it's
499:54 - going to see there is a new commit so
499:55 - it's going to try to redeploy this so if
499:59 - we go into the deployments here we
500:02 - should see that okay it has just been
500:04 - deployed and it just says just now so
500:06 - we're going to click to that or let's
500:08 - just refresh this page and hopefully it
500:12 - should work now so we can copy this row
500:15 - other than homepage and just paste it
500:17 - into a new tab and it is going to
500:18 - immediately work so that was kind of
500:21 - like a trick that you need to know when
500:23 - you're building a VAB in versal in
500:26 - viral.com so I just realized there is
500:29 - one more problem or error if we try to
500:32 - log in with our Google account currently
500:34 - we cannot and it says unauthorized
500:36 - domain so we just need to copy this
500:38 - domain and we're going to go into the
500:39 - authentication settings and authorize
500:42 - domains so we'll just say add domain and
500:45 - paste that we're going to just delete
500:47 - this only have the root domain up until
500:50 - this veral do app and let's just add
500:54 - that and hopefully it should work now so
500:56 - I'll just do
500:58 - refresh and now if you just click to
501:00 - that it is going to use our Google
501:03 - account and then just log Us in so I
501:05 - think it is the end of the project we
501:07 - just built our own Instagram clone I
501:10 - hope you enjoy it as much as I do and
501:12 - learn something new from it and now you
501:15 - should be able to add all kinds of
501:16 - features to this app because now you
501:19 - know how to work with authentication
501:21 - fire store and storage Services of
501:24 - Firebase and if you add more features to
501:27 - this app let me know in the comments and
501:29 - with that I wrap up the video here don't
501:31 - forget to like And subscribe and thanks
501:34 - for watching