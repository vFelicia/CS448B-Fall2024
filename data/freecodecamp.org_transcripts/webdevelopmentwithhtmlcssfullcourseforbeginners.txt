00:00 - this comprehensive course on web
00:01 - development with HTML and CSS is created
00:04 - with beginners in mind it's taught by
00:07 - Akash the CEO and co-founder of Jovian
00:11 - the course starts with the basics of
00:12 - HTML and CSS and gradually progresses
00:15 - into advanced concepts covering git
00:17 - GitHub and Cloud deployment using
00:19 - versell as well as mobile first
00:21 - responsive design the bootstrap CSS
00:23 - framework and the express web
00:25 - application framework so let's start
00:28 - learning hello and welcome to this
00:30 - course on web development with HTML and
00:33 - CSS HTML and CSS are the foundation of
00:36 - modern web design allowing you to create
00:39 - visually appealing and
00:41 - functionally uh visually appealing and
00:44 - functional web pages HTML specifically
00:46 - stands for the hyper text markup
00:48 - language and it is a standard language
00:50 - used to create web pages and this is
00:52 - what HTML code looks like this is some
00:55 - of the code that we'll be writing
00:57 - today it can be used to create create
01:00 - headings paragraphs images links and
01:02 - many more things so if I head over for
01:04 - example to jan.com
01:08 - this is a web page now on this web page
01:12 - everything has been crafted using HTML
01:14 - and then styled using
01:16 - CSS so HTML is used to structure the
01:19 - content and add elements and then
01:21 - cascading style seats uh cascading style
01:23 - sheets or css is used to describe the
01:26 - presentation of HTML documents it allows
01:28 - you to control the layout and the
01:30 - appearance by defining styles for
01:32 - elements and you can configure things
01:35 - like fonts colors margins borders Etc so
01:39 - today we are going to look at the very
01:41 - basics of HTML and CSS we are going to
01:44 - start by creating an HTML file adding
01:46 - code into it using the Ws code editor
01:49 - viewing it in a browser we're going to
01:52 - then use some basic HTML tags to create
01:54 - a web page then we're also going to use
01:56 - some more HTML tags to structure content
01:59 - on a page things like headings lists
02:01 - paragraphs
02:03 - Etc then we're going to add styles using
02:05 - CSS and understand the CSS Box model for
02:08 - layout that is the core foundational
02:11 - Concept in CSS and then we're going to
02:14 - style these uh HTML tags using CSS to
02:17 - replicate the structure of a desired web
02:19 - page so we'll look at a problem
02:21 - statement and we'll try to replicate the
02:23 - web page that we have in mind using HTML
02:26 - and CSS and finally if time permits we
02:28 - are also going to try and deploy that
02:30 - website to the cloud using an online
02:32 - hosting service so in just about 2 and 1
02:35 - half hours from now you will be in a
02:37 - position where you will have deployed
02:39 - your first website to the cloud so isn't
02:41 - that exciting the first very first
02:43 - lesson you will be deploying your own
02:44 - website and there are no prerequisites
02:47 - for this tutorial the best way for you
02:49 - to learn these skills is to follow along
02:52 - as you're watching the lesson pause it
02:55 - at various places follow along type out
02:57 - all the code yourself don't even copy
02:59 - paste just type everything out and then
03:02 - experiment with it using the exercises
03:04 - that are present in the lesson now you
03:06 - can find the completed code for this
03:08 - tutorial here in this GitHub repository
03:12 - specifically you can open up this folder
03:13 - my first web page and you will find all
03:15 - the code that we are covering today in
03:18 - this
03:19 - folder so we will explore the basics of
03:22 - HTML and CSS by attempting to solve this
03:25 - problem
03:26 - statement we will create a web page that
03:29 - show cases job listings for Jovian at
03:32 - Jovian we have a growing team we have a
03:33 - growing user base we're adding new
03:35 - programs so we have certain jobs for
03:37 - which we want to hire but we don't have
03:38 - a jobs page yet so we're going to try
03:40 - and create a jobs page for Jovian and on
03:43 - this jobs page we're going to show show
03:45 - a few things we're going to require our
03:48 - job space to have a few things one is a
03:50 - nav bar at the top showing the Jovian
03:52 - logo so something like this this is
03:55 - called a navigation bar or a nav bar
03:57 - then we may want a header section
03:59 - displaying a picture and some relevant
04:01 - information about Jovan so anybody who
04:03 - comes to our jobs page should learn a
04:05 - little bit about the company itself so
04:07 - we'll have that then maybe a list of job
04:10 - openings that include the job
04:11 - designation location and maybe salary
04:13 - details we'll see what we can put in
04:15 - there and maybe also a link to apply for
04:17 - the
04:18 - job and then a footer at the bottom of
04:20 - the web page with some important links
04:22 - so generally at the bottom of any web
04:23 - page and a website you might include you
04:25 - might have a bunch of links to other web
04:27 - pages on the same website or elsewhere
04:30 - so we are going to try and build all of
04:31 - this today in the next couple of hours
04:34 - and we will also attempt to make the
04:35 - page visually appealing and informative
04:38 - so let's see how far we can get this is
04:40 - a fairly ambitious problem statement
04:43 - while we are also learning the basics of
04:45 - HTML and CSS now creating your first web
04:48 - page is actually quite easy all you need
04:51 - to do is simply create a file put some
04:54 - text into it and then open that file
04:56 - within a web browser and while you can
04:58 - use any any text editor to create the
05:01 - file and put some text into
05:04 - it web developers often use editors that
05:07 - are better suited for programming
05:09 - because they have certain features that
05:11 - will help you write code in various
05:14 - programming languages easily and these
05:16 - are called code editors or sometimes
05:18 - also called integrated development
05:20 - environments okay so in this tutorial
05:24 - for today we are going to use a code
05:26 - editor called Visual Studio code now you
05:29 - can download it for free it is a free
05:31 - and open- Source tool so you can
05:32 - download it by going to code dovisual
05:34 - studio.com all the links are present in
05:37 - the lesson resources and the lesson
05:39 - notebook now based on which operating
05:42 - system you're working on you'll have to
05:43 - download it for that operating system
05:45 - you can see that it is available for all
05:47 - major operating systems and it is
05:49 - developed by Microsoft so it also has
05:51 - great Windows support and you should
05:53 - download it and once it is downloaded
05:56 - just double click the installer and
05:58 - follow the instructions to install
05:59 - install it on your computer and once
06:01 - it's installed we can then start
06:03 - creating our very first web page okay so
06:06 - let's get into
06:09 - it now the first thing we need to do is
06:12 - create a project folder typically
06:13 - whenever you're working on a project
06:15 - it's a good idea to create a folder
06:16 - where you're going to put all the files
06:17 - so that you don't pollute your desktop
06:19 - or your downloads folder so let me go in
06:22 - here and let me create a new folder so
06:25 - I'm going to call this folder let's see
06:27 - I'm going to call this folder my
06:29 - first web page okay uh I've just used
06:34 - hyphens here my first web page um if you
06:37 - can't see let me just zoom in here a
06:38 - little
06:39 - bit yeah so you should be able to see it
06:42 - now my first web
06:44 - page all right uh so I've just used
06:46 - hyphens here my first web page that is
06:48 - the name of the folder and now we want
06:51 - to open up this folder in vs code so let
06:54 - us first open Visual Studio code or VSS
06:56 - code let me just type Visual Studio code
06:58 - here and open up visual studio code okay
07:01 - so now now I've opened up visual studio
07:03 - code this is what its user interface
07:05 - looks like you might also see something
07:07 - like this you might see a sidebar here
07:09 - as well so that depends you can hide or
07:12 - show the sidebar you have options to
07:14 - show this over here now what we want to
07:17 - do in Visual Studio code is open up this
07:19 - folder okay so you want to say file open
07:22 - folder so going to the file menu select
07:24 - open folder and I'm going to come into
07:26 - my desktop and select this folder my
07:29 - first web page don't double click on it
07:31 - just select it and then click open okay
07:35 - so now you will immediately see that you
07:37 - you will see the folder name here in the
07:39 - sidebar my first web page I hope you can
07:41 - see it and then you will see this
07:43 - welcome screen I'm going to close this
07:44 - welcome screen but now this folder is
07:47 - open in vs code so VSS code is showing
07:49 - us this folder and what I can do is I
07:52 - can now create a file within this folder
07:54 - directly from vs code so if I just go
07:57 - here I should see a new button and in
07:59 - this new button um I can using this new
08:02 - button I can create a new file and I'm
08:03 - going to create a file called Web page.
08:06 - HTML so any web page has the HTML
08:10 - extension just like images have a JPG
08:12 - extension or Excel files have XLS
08:14 - extension so web pages have the HTML
08:17 - extension okay so now I've created this
08:19 - file called webpage. HTML and I can
08:22 - verify that this file is actually
08:23 - present here web page. HTML you can see
08:26 - that when I open that window when I open
08:28 - that folder I you can see that the file
08:29 - webpage. HTML has been created okay now
08:32 - let me just get this on to the
08:35 - right now once I've created this file
08:37 - webpage. HTML and let me close the
08:39 - sidebar I'm going to put some text into
08:41 - it so let me just say hello
08:44 - HTML all right so I've just written the
08:47 - words hello HTML into webpage. HTML all
08:50 - right now here's what I'm going to do I
08:53 - am going to now open this file webpage.
08:56 - HTML in the browser so I'm going to say
08:59 - open with and I'm going to select the
09:01 - browser that I'm using or sometimes you
09:03 - can also just double click and it will
09:04 - automatically open in Google Chrome but
09:06 - just to be safe I'm opening it with
09:07 - brave browser that's the browser that
09:09 - I'm using and you can see as soon as I
09:11 - opened it the same text that I
09:15 - entered into the web page. HTML file the
09:18 - exact same text showed up here you can
09:21 - see I'm just zooming into about 200% so
09:23 - that you can see it more clearly okay
09:27 - let's keep it at 200 all right
09:30 - so hello HTML is what I typed here and
09:33 - hello HTML is what showed up when I
09:35 - opened when I opened web page. HTML in
09:38 - the web browser so that's it that's how
09:40 - you create a web page you just create a
09:42 - text file call it something. HTML and
09:44 - then open it in a web browser and you
09:45 - have a web page
09:48 - however you want to put some kind of a
09:50 - structure into the web page because we
09:52 - don't just want to write text we can p
09:54 - paste a lot of text but it will all just
09:55 - be text on the screen so that is where
09:58 - you you use something called Tags so
10:02 - first let me just put in some code here
10:03 - so I'm going to create this tag called
10:05 - HTML and you can see that this tag
10:07 - starts with a less than symbol or an
10:09 - arrow bracket and ends with an arrow
10:11 - bracket and every tag has a tag name in
10:14 - this case this tag has the name HTML let
10:16 - me zoom in further so it has the name
10:18 - HTML and every tag generally has a
10:20 - closing tag okay so this is the opening
10:23 - HTML tag and HTML is always the
10:25 - outermost tag in any web page and then
10:28 - there is this closing HTML tag and the
10:31 - difference between the opening and the
10:32 - closing tag is this slash character
10:34 - before the tag name okay so any HTML
10:38 - page or any web page is built up using
10:40 - tags these tags are used to create
10:42 - structure within the page okay now
10:44 - within an HTML tag I'm going to put in a
10:46 - head tag okay we'll talk about what
10:49 - these tags do in just a second and again
10:51 - vs code does this nice thing that as
10:53 - soon as you create an opening tag it
10:55 - automatically adds a closing tag for you
10:57 - and that is why uh develop Vel opers use
10:59 - these code editors okay and then uh
11:02 - another tag that I'm going to put in
11:04 - here is called the body tag okay so now
11:08 - we have a HTML tag which is the
11:09 - outermost tag inside it we have the head
11:11 - tag and the body tag and let me just
11:13 - save that for a second and reload and
11:15 - you can see now all the content has gone
11:16 - away so now nothing is showing up on the
11:19 - browser because we've not put any
11:20 - content into the page the first thing
11:22 - I'm going to do is inside the head tag
11:24 - I'm going to put in a title tag okay um
11:27 - so I've just typed title I've created an
11:29 - opening tag and vs code added a closing
11:31 - tag for me and let me just say my first
11:35 - web page here inside the title let me
11:37 - save that let me come back here into the
11:40 - browser reload and now you will notice
11:43 - that nothing has happened here on the
11:44 - page but if you notice carefully the
11:46 - browser tab the the browser
11:50 - heading the tab the browser tab here it
11:53 - has the title my first web
11:57 - page okay so it has the title my first
12:00 - web page and you can zoom in here and I
12:02 - can zoom in here and I can show you that
12:03 - has it has a title my first web page all
12:06 - right now uh let us add something here
12:10 - in the body so I'm going to just add
12:12 - something called a div here in the body
12:15 - so div is again another tag that is used
12:17 - to put some content into the body and
12:20 - let me just put here hello HTML and CSS
12:24 - okay so this is what a typical web page
12:28 - or typical HTML document looks like it
12:31 - contains a bunch of tags and then it
12:33 - contains tags within tags and each tag
12:35 - has a specific purpose okay so now let
12:37 - me put that in and let me reload and now
12:39 - you can see that here we have hello HTML
12:41 - and CSS and then you can go back and
12:43 - change this let's say let me make it
12:45 - hello html/css and let me reload now it
12:48 - says hello html/css okay so this is how
12:50 - you construct a web page you put in some
12:53 - tags and then you open the web page in a
12:57 - web browser all right so so that's the
12:59 - basics of how you create an HTML page
13:01 - you launch vs code open up the project
13:03 - folder within vs code and then put some
13:06 - code into it this is HTML code so we put
13:08 - in an HTML tag head tag title and body
13:11 - and then save the file once you've added
13:13 - the code and then open it with a browser
13:15 - and this is what it looks like okay now
13:18 - let's understand HTML tags a little
13:19 - better so tags are the building blocks
13:22 - of HTML and they are used to describe
13:24 - the structure and the content of a web
13:26 - page now normally every tag will have an
13:29 - opening tag like the HTML tag had an
13:31 - opening tag like this over here and it
13:35 - will also have a corresponding closing
13:36 - tag and sometimes tags can have
13:39 - attributes and these attributes are used
13:41 - to provide more information to the
13:43 - browser or modify the behavior of a
13:45 - particular tag for example the HTML tag
13:47 - has this attribute called Lang which is
13:50 - simply written in within the opening tag
13:52 - itself and then the attribute Lang is
13:54 - given a value en n which means English
13:58 - so here what we doing is we are
13:59 - indicating to the browser that this
14:02 - particular HTML page is written in the
14:04 - English language so now that browser can
14:06 - use it for let's say uh setting up a
14:09 - translation automatic translation tool
14:11 - or something like that right so an
14:13 - attribute is used to provide some
14:14 - additional information about that tag or
14:16 - modify the behavior of that tag and we
14:17 - look at a lot of attributes with time so
14:20 - I can say here for example HTML Lang
14:23 - equal to
14:24 - en and that doesn't do anything visible
14:27 - but that does inform the browser that
14:28 - this is an English web page all right
14:31 - now uh so that's about tags and a tag
14:34 - can contain one or more children so like
14:36 - the head and the body are called the
14:38 - children of the HTML tag and a tag along
14:41 - with its children together is called an
14:43 - element okay so the tag is simply this
14:46 - piece this is the opening tag and this
14:48 - is the closing tag everything inside a
14:51 - tag is called its children which is
14:53 - again other tags and then a tag together
14:56 - with the children is called an element
14:58 - so this this whole thing is an element
15:00 - and then this is an element and then
15:02 - this is an element so every tag along
15:05 - with its children is an element and then
15:06 - what whatever is inside a tag is called
15:08 - children okay these are just some
15:09 - terminology that you'll see when you're
15:11 - reading about HTML and CSS all right now
15:14 - tags contain attributes we talked about
15:16 - that that and there are various
15:18 - different tags to create headings
15:20 - paragraphs lists images Etc and we look
15:23 - at those in just a bit now one thing I
15:26 - want to mention is that HTML is the
15:28 - outermost tag however in many web pages
15:33 - you will find a dock type declaration
15:35 - just above the HTML tag so you will find
15:37 - something like this you will find a doc
15:40 - type let me zoom in here so you will
15:42 - find Doc type HTML at the top of most
15:46 - web pages and that is just a good
15:48 - convention that is followed that at the
15:51 - top of every HTML web page it's a good
15:53 - idea to just put this dock type HTML
15:56 - okay and this this is just something
15:58 - that you cop copy paste at the top of
15:59 - every HTML web page and you can
16:01 - literally just go on Google and search
16:03 - doc type
16:07 - declaration okay and you can find this
16:10 - link HTML doc type declaration and you
16:12 - can just copy this and put it at the top
16:14 - of each HTML page and if you want to
16:16 - understand what this does you can I
16:17 - encourage you to go through this H W3
16:19 - schools link uh it's not important it's
16:22 - just a convention that you want to put
16:23 - in because there have been multiple
16:25 - versions of HTML and this is a way for
16:27 - you to indicate that you want to use the
16:28 - latest version of HTML to the browser
16:31 - okay now we have the doc type then we
16:33 - have a bunch of these tags now the HTML
16:36 - tag is the outmost tag we already talked
16:38 - about that and the HTML tag is typically
16:41 - only contains two other tags the head
16:43 - tag and the body tag and it has a lang
16:46 - attribute and it has some other
16:47 - attributes also that can be set and
16:49 - you'll see a dock type declaration just
16:51 - above HTML so that's the HTML tag okay
16:54 - then we have the head and title tags
16:56 - which are the tags that we are seeing
16:57 - here so the head tag is a container tag
17:01 - in HTML that often doesn't contain any
17:04 - content that is going to be visible on
17:06 - the page exactly but it generally
17:08 - contains some information that is passed
17:10 - on to the browser and that is useful for
17:12 - the browser and that is also useful when
17:14 - you're sharing this link with somebody
17:16 - else so for example it contains the
17:18 - title tag we put in the title tag over
17:20 - here in the head and the title tag is
17:22 - used to set the title of the browser tab
17:25 - similarly there are some meta tags so
17:27 - and then some meta image tags Etc and
17:29 - these are used to set the preview image
17:32 - and the description that shows up when
17:33 - you share this link on a social platform
17:35 - or when this is seen by a search engine
17:37 - or something like that okay so the head
17:39 - tag is very useful it is also used to
17:42 - sometimes include maybe stylesheets CSS
17:44 - um files and sometimes used to include
17:46 - scripts we'll cover all of these don't
17:48 - worry if these terms don't make sense
17:50 - just yet for now we just using the title
17:53 - tag within head so within head we just
17:55 - have the title tag and then we have the
17:58 - body tag now within any HTML page you
18:02 - have a body tag and the body tag defines
18:04 - the main content of the HTML document it
18:07 - is usually placed after the head tag and
18:10 - it contains all the visible elements of
18:12 - a web page okay and the body tag can
18:14 - also include other HTML tags like
18:16 - headings paragraphs links Etc and here
18:19 - is the key thing here is the key
18:20 - difference between just putting some
18:22 - text into a file versus putting it in
18:24 - the body tag and putting it in in HTML
18:26 - tags you can add styling you can add
18:28 - colors fonts you can change the layout
18:31 - and you can even add interactivity using
18:32 - JavaScript and CSS right so all of these
18:35 - things are applied within the elements
18:37 - in the body tag to change the appearance
18:39 - and functionality of the web page which
18:41 - is what we're going to do today so here
18:43 - is an example of a web page with some
18:44 - content within the body tag so here
18:46 - there is an H1 uh which is a heading tag
18:49 - we'll talk about it there is a paragraph
18:51 - tag there is an image tag and there is a
18:53 - a tag so I will not paste these right
18:55 - now but I'll actually leave these as an
18:57 - exercise so maybe maybe just try and
18:59 - paste this into an HTML Page open it in
19:02 - the web browser and see what you can
19:04 - come up with okay so that is the body
19:08 - tag it is what contains all the content
19:10 - of the web page that we are going to be
19:12 - building
19:13 - today then we
19:15 - have the div tag okay now you notice
19:18 - that inside the body I did not directly
19:20 - put in hello HTML CSS I created a div so
19:24 - I didn't have to do this I could have
19:26 - just put it into the body itself
19:28 - but the div tag is typically an HTML
19:31 - element that is used to group and
19:33 - organize other HTML elements together
19:35 - for example you can create one one piece
19:39 - of content here in this first div div
19:41 - this is some content and then you can
19:43 - have a second piece of content under in
19:45 - this second div and then you can have
19:47 - maybe a third piece of content which is
19:48 - itself divided into multiple pieces of
19:50 - content in this third div okay so div
19:52 - stands for division and it literally
19:54 - creates a division on the page
19:56 - vertically speaking it kind of divides
19:58 - the page vertically essentially you can
20:00 - think about it and it is used to divide
20:02 - or group content into logical sections
20:04 - and it is a block level element which
20:06 - means that it takes up the full width
20:08 - when you add a div tag it takes up the
20:09 - full width and then the next div tag is
20:11 - going to appear below it and the next
20:12 - div tag is going to appear below it and
20:14 - so
20:15 - on and it does not have any its own
20:18 - style or semantic meaning or anything
20:20 - but it is used with CSS for styling okay
20:23 - so the div tag is something that we will
20:25 - attach a lot of CSS properties into to
20:27 - style the web page so let us create a
20:30 - let us look at an example of a web page
20:31 - create containing some div tags okay so
20:35 - here is the content that we're going to
20:37 - put in or type in one by one so first
20:39 - let us create a div tag and let us
20:42 - [Music]
20:43 - say this
20:45 - is
20:47 - some content okay so now we have put in
20:52 - some content into div tag and it says
20:54 - this is some content as we might expect
20:56 - then let me create another d tag and let
20:58 - me say this is a second line of
21:04 - content okay now if I reload the page
21:07 - you will notice that this content showed
21:09 - up below this content so that is what
21:11 - the div tag is creating it is basically
21:13 - creating a division within the page so
21:15 - this content is shows up in this area
21:18 - and then this content shows up below it
21:20 - in this area now notice that I can go
21:22 - into the next line I I can type this
21:25 - is isn't a third line
21:30 - now I'm not creating a new div tag I'm
21:32 - still using the second div tag but this
21:34 - time you can see that even though I've
21:36 - typed this content on a new line it is
21:39 - still showing up on the same line as the
21:41 - second line okay so here is the
21:44 - important of importance of div if you
21:46 - want to split content vertically on a on
21:49 - a web page then you want to create Dives
21:52 - and each div is going to create a new
21:54 - vertical section or New Vertical
21:55 - division within the web page okay and if
21:58 - if you simply create multiple lines of
22:00 - content like this all of that is going
22:02 - to show up in a straight line that is
22:04 - not necessarily going to show up one
22:06 - below the other now here is another
22:09 - example now this time I have a div div
22:12 - tag but inside the div I'm then creating
22:14 - more div so
22:15 - sum
22:19 - more lines okay so now I have this third
22:22 - div tag and now in this third div tag I
22:25 - have again another div tag three more
22:28 - div tags one around each word so now
22:30 - even though all these three div tags are
22:32 - on the same line within the HTML source
22:34 - code you can see that each div each
22:37 - inner div tag takes up its own vertical
22:39 - space okay so that's what I want to
22:42 - convey here that as you want to keep
22:44 - building as you want to keep adding
22:46 - content below the existing content on a
22:50 - web page you should be creating new div
22:52 - tags okay so that is the div tag and
22:56 - those are the most basic basic HTML tags
22:59 - now we've just looked at what the head
23:03 - the HTML tag we've looked at the head
23:05 - and title tags we've looked at the body
23:07 - tag we have looked at the div tag and
23:10 - I'll encourage you to experiment with
23:12 - this what we really want to do though is
23:15 - maybe first figure out what our web what
23:18 - we want our web page to look like okay
23:21 - so when when you're building a web page
23:23 - it's a good idea to First plan ahead and
23:25 - create what is called a wireframe and
23:27 - this is what a wireframe for a web page
23:28 - look like it just it is just a rough
23:30 - drawing of what the web page should look
23:32 - like okay that's what we typically
23:34 - called a wireframe like you don't put in
23:36 - colors you don't put in exact fonts and
23:38 - sizes of fonts Etc you just put a rough
23:42 - diagram of the structure of the page and
23:44 - you can use that as a visual guide while
23:47 - you're writing the HTML and CSS okay now
23:49 - if you don't already have a design to
23:51 - work with then sometimes it can be
23:52 - confusing if you're trying to design
23:54 - your web page as you're trying to code
23:56 - it so the having a wireframe is going to
23:57 - help a lot and you can use you can
24:00 - create a wireframe using pen and paper
24:02 - or you can use digital whiteboards like
24:05 - excal draw.com so excal draw.com is a
24:08 - digital whiteboard so this is what it
24:10 - looks like and here on this digital
24:12 - whiteboard you can create boxes you can
24:14 - create circles you can create lines you
24:16 - can add
24:18 - text and you can do a bunch of things to
24:21 - create U your wireframe okay so you can
24:25 - use a digital whiteboard any any one of
24:26 - your choice but I like using excal
24:28 - ra.com
24:29 - um and the idea here is to separate the
24:32 - design and the implementation process to
24:35 - help you focus on one aspect of the
24:38 - development at a time okay now I will
24:40 - note however that professional web
24:42 - developers work with the detailed design
24:45 - mockup of the page and not generally
24:48 - wireframes because these design mockups
24:50 - or these design specifications are often
24:52 - created by uiux designers uh with a
24:55 - standardized design system so normally
24:57 - at a company you will receive a
24:59 - full-fledged design and that design will
25:00 - have all the colors all the fonts and
25:02 - everything specified there and you'll be
25:04 - working from that but for your own
25:06 - personal project it's okay to maybe just
25:08 - do a quick wireframe and then figure out
25:10 - the design over time okay so let's
25:12 - recall the problem statement and then
25:14 - create a wireframe for the problem
25:16 - statement we want to create a web page
25:18 - that showcases job listings for Jovian
25:20 - and it includes a nav bar at the top of
25:22 - the page showing the Jovin logo it
25:24 - includes a header section displaying a
25:26 - picture and some relevant information
25:29 - then it includes a list of job openings
25:31 - that includes the job designation
25:33 - location and then it includes a footer
25:35 - at the bottom of the web page with some
25:37 - important links okay so keeping these
25:39 - requirements in mind let us try to First
25:41 - design very broad very rough in a very
25:44 - rough fashion let's try to design what
25:46 - this web page should look like okay so
25:48 - I'm just going to zoom to an area of
25:51 - excal draw where I can actually design
25:53 - now you might see a bunch of these
25:55 - controls here so when you're actually
25:57 - dra drawing you might have these
25:59 - controls and you can always hide them so
26:00 - there's an option called Zen mode here
26:03 - uh but here let's say this is what our
26:05 - web page is going to look like okay now
26:08 - at the top of this web page we want a
26:09 - jovian logo so I'm just going to put a
26:11 - box here indicating the Jovian logo and
26:13 - I'm just going to put the word Jovian
26:18 - here all right and so now that's the
26:21 - Jovian logo that is going to show up at
26:22 - the top of the page and this is going to
26:25 - be the navigation bar so maybe let me
26:26 - just put a
26:28 - separator between this and the rest of
26:30 - the page then let us uh we want maybe a
26:34 - banner image a header section with a
26:35 - banner image and some information about
26:37 - Jovin so let's say this is going to be
26:39 - an image so I'm just going to draw maybe
26:42 - like some hills here uh we'll figure out
26:45 - something better than a hills and a sun
26:47 - but uh here we're going to put here
26:49 - we're going to put an image and then
26:52 - below the image maybe we could have a
26:54 - section called about Jovan because when
26:56 - somebody visits a job base job page we
26:58 - also want to tell them a little bit
26:59 - about Jovian so let me come in here and
27:02 - let me just put in about Jovian and then
27:06 - uh maybe on the left here we want a
27:08 - picture of the team so here we're going
27:10 - to have a a team
27:12 - picture maybe a bunch of people
27:15 - here all right very very rough
27:19 - drawing and here on on the right here
27:22 - and on the left maybe we have some
27:23 - information about Jan okay so some info
27:28 - about J now I'll show you a quick trick
27:31 - sometimes you need to generate or you
27:33 - need to get a bunch of text to fill the
27:34 - page now that you can do using this tool
27:37 - called lurm ipsum so loremipsum
27:42 - doio okay lurm .io and the link is in
27:45 - the notebook is a quick tool to generate
27:48 - as much text as you need as many
27:50 - paragraphs of text as you need so I'm
27:51 - just going to copy a bunch of this
27:53 - random text this doesn't mean anything
27:55 - I'm just going to put that in here and
27:58 - let me just split it into multiple
28:07 - lines okay so yeah just about that and
28:11 - maybe also let me reduce its size a
28:13 - little bit so now we have this let me
28:16 - change its
28:18 - color yeah now we have this about Jan
28:21 - section this nice about Jan section over
28:23 - here and let's move all this here as
28:25 - well so one nice thing about digital
28:27 - whiteboards say you can move some of
28:28 - this stuff around and then let us put a
28:32 - section called job
28:36 - opportunities okay and in this section
28:39 - job opportunities I'm going to just make
28:41 - that black in color once
28:44 - again in the section called job
28:46 - opportunities let's make that a little
28:49 - bigger like that let us put in a few job
28:52 - roles so we have a job Ro for a front
28:55 - end
28:56 - developer
28:58 - and then we have a job rooll uh and this
29:00 - is in bangaluru
29:05 - India and maybe we want like an apply
29:07 - button
29:09 - here okay or an apply link or apply
29:12 - button or something let's put that here
29:15 - a small apply button let's make this a
29:17 - little
29:19 - smaller like
29:26 - that so that is what
29:29 - our uh that is what a single job roll
29:31 - looks like and now once again the good
29:33 - thing about these digital whiteboards is
29:34 - I can just take this and I can create a
29:37 - copy and create a second job rooll and
29:40 - copy and create a third job rooll all
29:42 - right so let's call this backend
29:47 - developer and let's call this data
29:51 - scientist and maybe let's also put
29:54 - something like remote here and let me
29:58 - put Mumbai India here right and uh apart
30:03 - from the jobs we maybe also want to have
30:05 - a footer at the bottom of the page so
30:07 - I'm going to just add a separation here
30:09 - and maybe I'm just going to add a few
30:11 - links so one link to
30:14 - coures one link to programs and one link
30:19 - to
30:21 - YouTube okay and just put that in here
30:26 - coures
30:28 - programs YouTube Let's Line these up so
30:31 - these are going to be our footer
30:35 - links and finally right at the bottom
30:37 - I'm just going to add a copyright notice
30:39 - copyright 2023
30:42 - Jian and let's make that a little
30:45 - smaller and put that in here as well
30:47 - okay so yeah just in about four or five
30:50 - minutes we have just created a wireframe
30:54 - for what our web page should look like
30:56 - all right and then you can C you can
30:57 - take this whole thing and you can copy
30:59 - it as PNG and save it somewhere maybe
31:01 - you can send it to uh send it to a
31:04 - coworker for review you can just like
31:06 - copy that as a PNG or I think you also
31:08 - have the option to export it you can go
31:10 - in here and you can actually export the
31:11 - image as well um so this is a good thing
31:15 - to do anytime you're building a web page
31:16 - first it's a good idea to just go ahead
31:18 - and create a wireframe using a digital
31:20 - whiteboard and something that you can
31:22 - modify easily as well okay so now that
31:25 - we have this wireframe you can see here
31:27 - this is what the wireframe looks like we
31:28 - have the nav bar we have an image we
31:30 - have an about Jian section we have the
31:32 - job opportunities we have an apply
31:34 - button or apply link and then we have a
31:36 - footer at the bottom okay so I encourage
31:38 - you to again try and replicate this
31:40 - wireframe on your own using excal maybe
31:42 - try adding a additional section here and
31:45 - there just to see if you can do this on
31:48 - your own okay so you should be following
31:50 - along with this lesson pausing the video
31:53 - following along pausing the video
31:54 - following along and trying to make
31:56 - changes here and there just to
31:58 - experiment with things okay so now that
32:01 - we have created this wireframe we can
32:03 - now use this wireframe as a reference to
32:05 - add content in our HTML page okay so
32:09 - right now we don't have any useful
32:10 - content in our HTML page so we can start
32:12 - adding the content one by one and the
32:14 - first thing that we're going to add is
32:16 - headings so let's figure out what
32:18 - headings we have within our web page so
32:20 - here we have a couple of headings we
32:22 - have this heading called about Jovian we
32:24 - have this heading called job
32:26 - opportunities and then I could even
32:27 - consider these as headings of each of
32:29 - the jobs okay so heading is generally
32:32 - just some big text on the page it is
32:34 - maybe the start of a section it is maybe
32:36 - a start of a subsection or it is maybe
32:38 - the most important piece of text in a
32:40 - particular element on the page so I'm
32:42 - going to consider about Jovian job
32:44 - opportunities and front end developer
32:46 - backend developer data scientist as
32:47 - headings now there are various kinds of
32:50 - headings in HTML uh in fact specifically
32:52 - there are six heading tags uh these tags
32:56 - are H1 to H6 and H1 is the highest or
32:59 - the biggest heading tag and H6 is the
33:01 - lowest now heading should always be used
33:04 - in a logical order and should accurately
33:06 - describe the content on the page so if
33:08 - you're using H1 then for subsections you
33:11 - should be using H2 and then for Sub sub
33:13 - section you should be using H3 and so on
33:15 - don't use an H2 as the heading of the
33:18 - entire page and an H1 in the middle of
33:20 - the page because that is going to
33:21 - confuse people even though you can
33:23 - change their font sizes from the default
33:25 - but still it's logically it makes sense
33:28 - for you to use um use the
33:31 - headings that are uh use headings
33:33 - appropriately within the page so H1
33:36 - should be used for the most important
33:37 - heading H2 for the subheading and so on
33:40 - okay so let's go ahead and let's add
33:42 - some headings into our page so the first
33:44 - thing I'm going to do is clear all of
33:51 - this let me also
33:55 - just
33:58 - let's see let me get rid of this piece
34:00 - over
34:01 - here yeah so the first thing I've done
34:03 - is I've cleared out all the existing
34:04 - content on the page and let me save that
34:06 - and that that has all gone away so let's
34:08 - add the headings one by one the biggest
34:10 - heading on my page is about Jovian so
34:13 - let me add that and once I do that you
34:15 - can see that okay now now I have a nice
34:17 - big about Jan section the next heading
34:19 - on the page is job
34:23 - opportunities great and then we have
34:26 - three of these jobs so you can see here
34:28 - we have front- end developer backend
34:29 - developer data scientist so let's go H3
34:33 - frontend
34:37 - developer
34:39 - H3 backend
34:42 - developer and
34:44 - H3 data
34:47 - scientist okay I can go up to H6 but I'm
34:50 - just going to use these three headings
34:51 - here now we have this nice
34:54 - logical separation between headings so
34:56 - we have about Jovian then we have job
34:58 - opportunities and then we have these
34:59 - three job roles and all these three job
35:01 - roles should use the same header ideally
35:03 - because they're indicating the same
35:05 - level of hierarchy okay so that is how
35:08 - you create headings really
35:09 - straightforward just put H1 H2 H3 and
35:11 - keep going all right so now we've added
35:14 - headings and this is what that looks
35:15 - like great and our page is start slowly
35:18 - starting to take shape not exactly what
35:20 - we're looking for just yet but it's
35:22 - getting there next is there are specific
35:25 - text there there are specific tags for
35:27 - adding text specifically we have a
35:31 - couple of tags one is a P tag or a
35:33 - paragraph tag and the second is a span
35:35 - tag and both are used to define text in
35:37 - HTML so this is some text you can see
35:40 - that we we going to add below about Jin
35:43 - and this is added using the P tag so the
35:46 - P tag defines a paragraph of text and it
35:48 - is typically used for longer sections of
35:50 - text that form a distinct block so if
35:52 - you have an entire paragraph that is
35:54 - what you should put into a P tag and and
35:56 - then the span tag defines a small
35:59 - section of text typically if you have
36:00 - maybe just a few words or maybe a single
36:02 - line somewhere within a div you can use
36:04 - it and it is typically used for inline
36:07 - styling let's say you have a longer
36:08 - piece of text and within it you want to
36:10 - make uh some specific piece of text
36:12 - bigger or of a different color then you
36:14 - will wrap that around a span and we look
36:17 - at examples as we go along but p and
36:19 - span are the two tags that are used to
36:21 - create text on a web page okay of course
36:25 - you don't need to use a span or a p you
36:26 - can directly put a text within the div
36:29 - tag as you saw already but p and span
36:31 - give some one they semantically inform
36:33 - the browser that now inside this tag
36:35 - there is going to be text and second the
36:38 - div is going to automatically create a
36:40 - vertical separation the span doesn't do
36:42 - that so sometimes if you want text to
36:44 - maybe join together and show show up in
36:46 - a single line you can use a span and the
36:49 - P tag has some spacing before and after
36:52 - so it automatically adds some separation
36:53 - between the text and the rest of the
36:55 - content Okay so so let's use the P tag
36:58 - to add some description below about
37:00 - Jovian so here is the description that
37:02 - we're going to add at Jovian we're on a
37:04 - mission to build the world's highly most
37:05 - highly reputed Technical University and
37:08 - we're building it complete building it
37:10 - completely online let me change that to
37:13 - it and we're building it completely
37:15 - online we offer several beginner
37:17 - friendly courses that are taken by
37:19 - 300,000 plus registered users okay so
37:22 - right below the H1 right below the
37:24 - section here I can put in all of this
37:28 - content and I can just click save and
37:31 - then I reload this and you can see that
37:33 - this P tag has been added and in this P
37:36 - tag we have this basic text now somebody
37:39 - had a question why not use a div tag
37:41 - here well if I just use a div
37:44 - tag you can see that the amount of well
37:47 - it it works just just fine but as you
37:50 - noticed as we put in multiple paragraphs
37:52 - of text you will notice that the P tag
37:54 - automatically adds some gap between
37:56 - paragraphs so that is going to be the
37:58 - difference between using a P tag versus
38:00 - using a Dev tag
38:03 - okay all right so now we've added a P
38:06 - tag then uh the other place where we can
38:09 - possibly use a span is within the job
38:11 - opportunity section notice that under
38:13 - each job opportunity we have also put in
38:16 - the location of the job so let's put
38:18 - that location of a job using the using a
38:22 - span okay so here's what I'm going to do
38:25 - I am going to first
38:27 - wrap I'm going to create a span and I'm
38:29 - going to take the span and the H3 and
38:32 - put that in a div tag because each job
38:34 - is logically separated so each job we
38:36 - want it to show up in a logically
38:38 - separated area that is why we're putting
38:39 - a div around the uh job okay and don't
38:43 - worry if this doesn't make sense if
38:45 - you're wondering when should I put a div
38:46 - around something when should I not put a
38:48 - div around something well uh you just
38:51 - experiment with ITT HTML is all about
38:53 - experimentation all right so here we
38:56 - have an H3 tag and then I'm going to put
38:58 - a span and I'm going to put in bangaluru
39:01 - India then I'm going to put in another
39:04 - div here and I'm going to move this
39:06 - backend developer role here and I'm
39:08 - going to put in a span I'm going to put
39:11 - in let's put remote
39:12 - here and I'm going to put in another div
39:15 - here and I'm going to put
39:17 - in the third H3
39:20 - here and I'm going to put in a
39:23 - span let's put Mumbai India here okay so
39:27 - now we have added these job
39:29 - opportunities uh locations and we' put
39:32 - each of the job opportunities plus
39:33 - location in a div tag now one quick
39:36 - thing I want to show you is let's say
39:37 - you're typing and maybe things go a
39:39 - little bit Haywire uh and you don't have
39:41 - this nice indentation or this nice
39:43 - logical structure visible anymore just
39:45 - right click and select format document
39:48 - and that is going to automatically
39:50 - arrange all the tags in this nice
39:51 - fashion that tags that are children of
39:53 - an outer tag are automatically going to
39:55 - get some indent a or some space before
39:57 - them and then it's also going to split
39:59 - up the lines nicely so anytime you want
40:02 - you can right click and select format
40:04 - document and there's also a keyboard
40:06 - shortcut to do it and then you can save
40:07 - it and let's reload now and all right so
40:10 - now it's starting to look a little
40:12 - better now we have the front end
40:13 - developer role and under it we have
40:15 - bangaluru India then we have backend
40:16 - developer under it we have remote and
40:19 - data scientist under it we have Mumbai
40:21 - right so our notebook our our web page
40:25 - is starting to take sh ape pretty nicely
40:28 - okay so now we have this information now
40:31 - apart from this there are also several
40:32 - smaller modifier tags so there's a tag
40:35 - called B in case you want to make
40:36 - something bold in with within a
40:38 - paragraph there's a tag called I in case
40:41 - you want to make something a talic there
40:42 - is a tag called u in case you want to
40:44 - underline something now you can use
40:47 - these tags in between I'll show you an
40:48 - example let's say we want to highlight
40:51 - 300,000 plus I'm just going to put it in
40:54 - a b tag so there's a opening B tag and
40:56 - and then there is a closing B tag and
40:59 - you can see that 300,000 is now bold
41:02 - however these specific tags are slowly
41:05 - falling out of fashion what is being
41:07 - done instead is you just put a span
41:09 - around a specific piece of text and then
41:11 - use it use CSS to style it and we look
41:13 - at CSS soon so uh just know that
41:16 - although you have all these tags the use
41:18 - of these modified tags is now considered
41:20 - a bit outdated and it is recommended to
41:21 - use CSS Styles instead okay so but still
41:25 - as an exercise I will encourage you to
41:26 - just play around with these tags and
41:28 - check them out okay perfect so now we
41:32 - have looked at text we have looked at
41:35 - headings we have looked at spans as well
41:39 - um next let us look at lists in HTML so
41:44 - almost every web page that you might
41:45 - have seen contains some form of lists
41:48 - and there are two types of lists in HTML
41:50 - specifically there are more but these
41:51 - are the two that are commonly used one
41:53 - is an unordered HTML list and an
41:55 - unordered HT list is simply a bullet
41:57 - list it does not have any ordering it is
42:00 - ordered but it doesn't have numbers for
42:02 - the elements or the items within the
42:04 - list and then you have an ordered HTML
42:06 - list and ordered HTML list simply has
42:08 - numbers associated with each of the
42:10 - items and special HTML tags are used to
42:13 - create lists which allow for
42:14 - presentation of information in an
42:16 - organized and structured manner so there
42:19 - are two types of lists as I said
42:20 - unordered and the unordered lists are
42:22 - created using the UL tag and then list
42:26 - items within an unordered list are
42:27 - created using the LI tag and bullet
42:30 - points are used to denote the list items
42:32 - and you can change the appearance of
42:34 - bullet points using CSS or using some
42:37 - attributes as
42:38 - well similarly you have ordered lists
42:40 - and ordered lists are created using the
42:42 - o tag so o is ordered list UL is
42:44 - unordered list and list items are added
42:47 - using the LI tag and numbers or
42:49 - characters are used to denote list items
42:52 - okay and the appearance of the numbers
42:53 - can be customized using CSS or using
42:56 - attributes within the HTML element
42:59 - itself you can also Nest lists within
43:01 - each other so you can have maybe a list
43:03 - and then each list item can have a sub
43:05 - list inside it and so on so you can do a
43:07 - bunch of interesting things but it's
43:09 - important to close all your tags
43:11 - properly to ensure that the page is
43:12 - rendered properly otherwise the browser
43:15 - is going to run into issues and things
43:17 - are going to look a little weird Okay so
43:20 - remember we had a footer on our page uh
43:22 - let's try and maybe this looks like a
43:24 - list of links so let's try and maybe
43:25 - create
43:26 - an unordered list for the footer
43:29 - elements so I'm going to come in here
43:32 - and again I'm going to just create a
43:33 - logical Separation by creating a div and
43:36 - I'm going to create a UL or unordered
43:38 - list and then in the unordered list I'm
43:41 - going to have three list item so I have
43:42 - a list item called
43:44 - courses and I have a list item called
43:47 - programs and I have a list item
43:50 - called
43:52 - YouTube okay and then below this I also
43:55 - have this cop copyright thing you can
43:57 - see we have this thing copyright 2023
44:00 - Jovian so I need the copyright character
44:02 - so I'm just going to go on Google and
44:04 - I'm just going to search
44:06 - Copyright
44:09 - symbol okay this is the copyright symbol
44:11 - and I can just go ahead and copy it from
44:13 - here and paste it so this is how you get
44:15 - special characters in your HTML you just
44:17 - search the special character online and
44:19 - then you can copy it from there and put
44:21 - it in so
44:24 - copyright 2023
44:27 - Jian okay now let's reload the page and
44:31 - just like that you can see here at the
44:32 - bottom of the page we have courses
44:34 - programs YouTube and we have copyright
44:36 - 2023 Chan great so our page is taking
44:41 - shape and apart from this let's also add
44:44 - a an ordered list somewhere so maybe in
44:46 - the about Jovian section in this region
44:49 - let's maybe also list the programs that
44:50 - we offer so let's add another paragraph
44:53 - here let's see what do we want to do
44:55 - well we we we add another paragraph and
44:57 - we're going to say we also offer two
44:58 - industry focused boot camps so let's
45:01 - create another paragraph
45:05 - p and let us put in this text we also
45:09 - offer to Industry Focus boot camps and
45:11 - in this paragraph let us create an
45:12 - ordered list because we are we have two
45:15 - programs and we can list them one by one
45:18 - so let's create an Li here one or
45:21 - actually I don't need to put the number
45:22 - one the number one is going to come
45:23 - automatically full stack
45:26 - developer boot camp and then the second
45:30 - one
45:31 - is data science boot
45:35 - camp okay I think we want Jian first
45:39 - developer boot camp and Jovian data
45:42 - science boot camp all right so now you
45:45 - can see that we have we offer two
45:47 - industry Focus boot camps the Jovian
45:49 - fullstack developer boot camp and the
45:50 - Jan data science boot camp and the
45:52 - numbers one and two have been added
45:53 - automatically just as it was done in the
45:55 - the case of the fter items where here it
45:58 - just added a bunch of bullet
46:00 - points great so so far so good we have
46:04 - added some lists as well and that has
46:06 - added some more content on the page next
46:08 - up we can add some links now since we
46:11 - have added some footer uh we had added
46:13 - some footer items we also added maybe
46:15 - couple of programs so we can now link
46:18 - these to other Pages you know that any
46:20 - web page on the internet typically
46:21 - contains links to other pages and that
46:23 - is how you navigate a website now links
46:26 - can be to the same website links can be
46:28 - to other web pages on the internet um it
46:31 - it is completely up to you but links in
46:33 - HTML are created using the a tag the a
46:36 - tag is used to create hyperlinks and the
46:39 - a tag must have an hre attribute to
46:42 - specify the URL of the destination page
46:45 - and the text that is displayed as the
46:47 - link is placed between the opening and
46:48 - closing a tags and let's say you want
46:52 - the link to open in a new tab then you
46:54 - can use a Target attribute to specify
46:56 - where the link page should open Okay so
46:59 - let's see that step by step let's first
47:02 - do this for the Jovian fullstack
47:05 - developer boot camp so what we what we
47:07 - want to do is we don't just want to show
47:09 - this text Jovian fullstack developer
47:11 - boot camp we actually want it to point
47:13 - to the program application page because
47:15 - let's say somebody's applying for a job
47:17 - but they also want to see what kind of
47:19 - programs we offer it would be a good
47:20 - idea to maybe just link that from here
47:22 - so let me go to
47:23 - www.job.com
47:26 - and I'm going to scroll down here and
47:28 - I'm going to find the section full stack
47:30 - developer boot camp I'm I'm going to
47:31 - grab the link of that and let's come
47:34 - back here and let's create an a tag
47:36 - inside the LI item so inside the list
47:38 - item we creating an a tag so a and then
47:42 - you provide an href href href is the
47:45 - attribute and then the attribute value
47:47 - is always put within double codes so
47:49 - Within These double quotes I'm going to
47:50 - paste the link okay and then I'm going
47:53 - to close the a tag and I'm going to take
47:55 - the closing tag and put it outside the
47:57 - text okay so now you have a HF and then
48:00 - you have the HF of the or the you have
48:03 - the URL of the Jin fullstack developer
48:05 - boot camp and then you have closing the
48:07 - a tag inside the LI tag so remember your
48:10 - tags have to be matched up properly when
48:11 - you you cannot put the a tag closing a
48:13 - tag outside the LI tag because that is
48:15 - going to cause some problems so just be
48:18 - careful as you're doing this and now if
48:20 - I reload the page you can see that
48:22 - clicking on this is going to take me to
48:24 - the full stack developer Boot Camp Page
48:27 - great let me grab the data science boot
48:29 - camp page as
48:31 - well so data science boot camp copy that
48:35 - link and once again let's put that on a
48:38 - new line let's create an a tag here AHF
48:43 - equals oops yep data science boot camp
48:46 - and let's take the closing a tag and
48:48 - let's put it
48:50 - here and let's save that and now we have
48:53 - the Jovin data science boot camp linked
48:55 - from here here as well and that is how
48:57 - easy it is to add links within a web
48:58 - page let's go ahead and maybe let's also
49:00 - link a bunch of these footer links so
49:04 - I'm going to come in here and I'm going
49:05 - to
49:07 - say let's
49:09 - see a href
49:13 - equals let me just point it to jan.com
49:16 - learn for
49:22 - now yeah all right and let me also point
49:27 - the second one to jan.com
49:39 - learn okay so both the courses and the
49:42 - programs footer links for now are just
49:43 - going to go to the same page join.com
49:45 - learn and then the third footer link let
49:48 - me point that to our YouTube channel so
49:51 - a href
49:53 - equals PPS
49:57 - youtube.com at Jovian
50:01 - HQ
50:06 - okay let me just format that so let's
50:08 - say format document and that's going to
50:10 - just indent things a little better all
50:12 - right so now we have this courses link
50:14 - that opens the courses and we have the
50:17 - programs link that opens the programs um
50:20 - but of course both are going to the same
50:22 - place uh but what we have here is is
50:26 - this particular section within the page
50:29 - it actually has an ID so this section
50:31 - has an ID called courses so if we
50:34 - actually type something like this ash
50:36 - courses at the end of the
50:38 - URL okay that doesn't seem to
50:41 - work never mind yep so uh yeah we have
50:46 - linked the courses we've linked the
50:47 - programs and we've linked the YouTube
50:48 - channel now one thing that I want to do
50:50 - here is I also want to add a new I want
50:53 - these links to open in a new tab I don't
50:55 - want want to change the current tab
50:56 - because if somebody's looking for jobs I
50:58 - don't want to get distracted and lose
51:00 - track of the jobs page so I'm just going
51:02 - to add Target equals underscore blank
51:06 - okay so anytime what does this mean what
51:08 - does underscore blank mean why do you
51:10 - need that underscore don't worry about
51:12 - all that this is a very standard syntax
51:14 - anytime you need to open a link in a new
51:16 - tab just put Target equals uncore blank
51:19 - as an additional attribute in your a tag
51:22 - okay that's all it is used for um there
51:25 - are other targets that are possible as
51:26 - well but underscore blank is typically
51:28 - what you should be using in most cases
51:31 - okay so now if I click on
51:33 - courses that is going to open it in a
51:36 - new tab Okay then if I click on programs
51:38 - that is going to open it in a new tab if
51:40 - I click on YouTube that's going to open
51:41 - it in a new tab all right so now we've
51:44 - added links and our page is shaping up
51:46 - quite well now we have links on the page
51:48 - as well what next what else is missing
51:51 - from our page so we've added headings we
51:55 - we've added some text we've added some
51:58 - um jobs as well uh We've added footer
52:01 - links I think the images are missing so
52:03 - let's add the images as well how do you
52:05 - add images in HTML well so the way to
52:09 - add images in HTML is using the IMG tag
52:12 - so there's a tag called IMG and you can
52:15 - use that to add images now the just like
52:18 - links are added using the a tag a a is
52:21 - short for anchor so links are added
52:23 - using the anchor tag or a tag and you
52:25 - have to specify an href attribute
52:28 - similarly images are added using the IMG
52:31 - tag and you can specify the SRC
52:34 - attribute with the location of the image
52:37 - the image could be on your computer the
52:40 - image could be next to the web page
52:42 - basically or the image could be
52:44 - somewhere on the internet both of these
52:46 - work um you can just specify the
52:48 - location of the image using the SRC
52:50 - attribute apart from that because images
52:53 - also typically have you should also
52:55 - indicate what that image is about this
52:57 - is for screen readers and for search
52:59 - engines Etc so you can also add an ALT
53:02 - attribute or an ALT attribute which is
53:04 - used to provide an alternative text for
53:06 - the image which is displayed if the
53:07 - image is not loaded and it is also read
53:09 - by screen readers for people who are
53:12 - unable to see the image and it is also
53:14 - read automatically by search engines uh
53:16 - to improve the visibility of your page
53:18 - on
53:20 - search now the width and height
53:22 - attributes of the image can also be set
53:23 - using the width attribut and the height
53:25 - attribute and you can specify the width
53:27 - or height of the image as pixels on the
53:30 - screen so if you know the resolution of
53:31 - your screen the resolution of your
53:33 - screen is typically given in pixels for
53:35 - example 1 1280 pixels horizontally and
53:38 - 720 pixels vertically something like
53:40 - that so you can specify the height and
53:43 - width of the image in pixels as well
53:46 - okay now the last thing is that the
53:48 - image tag or the IMG tag is a self
53:50 - closing tag which means that it does not
53:52 - require a closing tag you just put the
53:54 - IMG tag you put its SRC you put its alt
53:57 - alt attribute you put its width you put
53:59 - its height and if you want and that's it
54:03 - you don't have to put a closing tag you
54:04 - don't have to put anything within the
54:06 - image tag as children
54:08 - okay so let's check out some images that
54:13 - we can possibly use we need a couple of
54:16 - images One image here as the banner
54:17 - that's going to show up on the entire
54:19 - page left to right and one one one image
54:22 - here which is going to show up here on
54:23 - the right okay so how can we add how can
54:26 - you find these images well one good
54:28 - place to find great photos that you can
54:31 - use for free is unsplash so unsplash.com
54:34 - is a great place so I'm going to search
54:36 - for career here and let me scroll down
54:40 - to find an image that might be good as a
54:43 - banner I think this image looks good so
54:46 - this image is a nice image that I could
54:47 - use as a banner on the page maybe not
54:49 - the entire height of the image but maybe
54:51 - like just this section would be good so
54:53 - I'm just going to go here and I'm going
54:55 - to say download free and from here I'm
54:58 - selecting the medium size okay so that
55:01 - is going to download a JPG file and I'm
55:03 - going to come into my desktop go into
55:05 - the folder where I actually have the
55:08 - webpage. HTML file and put in the image
55:10 - file here so let me just call it
55:12 - banner.jpg
55:14 - okay so now we've created a banner.jpg
55:17 - file so that is going to be the banner
55:19 - that we use on the page let me grab
55:21 - another image which is going to show up
55:23 - here maybe here I want to show a team
55:24 - picture
55:25 - so let me close this and let me search
55:28 - for team let's see if we can find a good
55:31 - team
55:35 - image or let's search for
55:38 - maybe people
55:41 - working okay that looks good not the
55:44 - Jovian team but uh never mind we can
55:47 - still put it on the careers page so
55:49 - let's download this also in medium
55:52 - quality so let's go and call this
55:55 - team.jpg
55:58 - all right so now if I open up the
56:01 - sidebar once again by the way you can
56:03 - open the sidebar using this button here
56:05 - or you can also just use command b or I
56:08 - believe it's controlb on Windows you can
56:11 - see that along with webpage. HTML we now
56:13 - have these files team.jpg and banner.jpg
56:16 - and now we can add these images into
56:19 - our HTML page so the first image the
56:22 - banner. jpg image is going to show up
56:25 - above the heading about about Jovian so
56:28 - I'm just going to add IMG SRC equals and
56:31 - paste okay I'm just going to put in the
56:33 - file name here banner. jpg remember this
56:36 - could also be a URL of an image on the
56:38 - cloud or somewhere on the internet but
56:40 - for now the image is right here next to
56:43 - the file that I have so I can just put
56:46 - that and let me just put the alt text
56:48 - here and the alt text I'm going to put
56:49 - here is uh Banner this is just the
56:52 - banner and I'm going to close this tag
56:54 - let me now reload the page and you can
56:57 - see that the image has been added here
56:59 - but it's too big let me just shorten the
57:01 - image so what I'm going to do is I'm
57:03 - going to just say height equals and I'm
57:05 - going to set the height of the image to
57:08 - let's say 360 pixels so when I say
57:11 - height equals 360 and reload now you can
57:14 - see that the height of the image has
57:15 - been reduced to 360 pixels okay I can
57:18 - reduce it further maybe just for now and
57:20 - we can make it bigger later yeah now the
57:23 - height of the image has been reduced so
57:24 - now we have this image of course it's
57:25 - not laid out how we want but it's there
57:27 - in the right place and then the second
57:29 - team image is going to show up on the
57:31 - right side so in some sense right is
57:34 - next or after so I'm just going to put
57:37 - that second image after this speed
57:40 - tag before job opportunities so I'm
57:43 - going to say IMG SRC equals
57:46 - team. jpg and ALT equals
57:51 - team and let me give it a height of uh
57:58 - 200 okay let's reload that okay so now
58:02 - we have the image here as well great so
58:06 - again you should what you should be
58:07 - doing is pausing this video watching
58:10 - maybe 5 minutes and then following along
58:12 - typing out everything on your own and
58:14 - build this step by step the best way to
58:16 - become a better programmer is to just
58:18 - code write a lot of code and even if
58:19 - you're writing the code that you're
58:21 - seeing on the screen you should be
58:22 - asking yourself what that code means and
58:26 - you should be experimenting with it a
58:28 - little bit and if something breaks you
58:29 - should be searching online and maybe
58:30 - asking us a question okay that is how
58:33 - you're supposed to do this it's not
58:35 - enough to just watch this but at this
58:37 - point I feel like we have all the
58:39 - content that we require on the page it's
58:41 - just not laid out properly all right so
58:44 - we have all the content let's see yeah
58:47 - we have all the content we needed we
58:49 - have this about Jovian we have this
58:51 - image okay maybe we don't have this
58:53 - Navar logo right now how about we fix
58:55 - that sometime later we we'll figure it
58:56 - out U but we have job opportunities we
58:59 - have uh this image here we have this
59:01 - footer and we have this copyright
59:03 - section now one thing I want to mention
59:05 - about HTML tags and CSS HTML and CSS in
59:08 - general is that there is so much here so
59:11 - many different tags and everything that
59:13 - you shouldn't go about trying to learn
59:15 - every single tag and every single
59:16 - attribute of every tag before you start
59:18 - building web pages because then you'll
59:21 - just be doing that for years it's uh you
59:24 - should take the opposite approach where
59:25 - you start trying to build something and
59:27 - whenever you feel that okay you're not
59:29 - able to build it with the tags you
59:30 - already know then go and search online
59:33 - to see if there is a certain tag or
59:34 - maybe a certain other CSS property that
59:37 - is going to help you do it and over time
59:40 - the things that are going to be used
59:41 - most frequently are going to become
59:43 - second nature to you and you won't need
59:45 - to look them up that is what I do I
59:47 - still look up some fairly basic stuff on
59:49 - CSS even after 15 plus years of web
59:53 - development and I do this every every
59:56 - week so uh one exercise for you is to
60:00 - check out this tutorial on HTML
60:03 - dog.com on the
60:05 - various beginner and intermediate level
60:08 - tags so you can check out the HTML
60:10 - beginner tutorial in the HTML
60:11 - intermediate tutorial so up once you're
60:13 - done with this lesson itself check this
60:15 - out at the very least go through all
60:17 - these different types of tags and if you
60:19 - have the time you can also go through
60:20 - Advan but that is something that we're
60:22 - going to cover in a future lesson anyway
60:24 - okay but this is a good place for you to
60:25 - practice another good place for you to
60:27 - practice is the w3schools.com website
60:32 - this contains a great HTML tutorial so
60:34 - if you want to learn about a specific
60:35 - type of HTML tag just go find it in the
60:38 - sidebar here and go ahead and do it we
60:40 - are not going to look at every single
60:42 - HTML tag here because that's that is
60:44 - defeating the point the the reason we
60:45 - are here is because we want to build
60:47 - good web pages okay so let's move
60:51 - forward we are halfway there let's go
60:53 - ahead and style the web page P now
60:56 - cascading stylesheets or css is used to
60:59 - describe the presentation of HTML
61:01 - documents it allows you to control
61:03 - layout and it allows you to control the
61:05 - appearance by defining styles for
61:07 - elements such as fonts colors margins
61:10 - borders and more so let's look at some
61:13 - different ways to apply CSS Styles there
61:15 - are a few ways to do this by and we'll
61:17 - do this by attempting to just Center
61:19 - this about Jovian heading we just want
61:22 - to bring it into the center of the page
61:24 - um horizontally speaking we want to
61:26 - bring it in the horizontal Center like
61:28 - that and let's see how we can achieve
61:30 - that using CSS okay so the first way to
61:34 - do it is using something called inline
61:36 - Styles now in inline Styles you can
61:39 - achieve this simply using the style
61:41 - attribute and you can put that directly
61:43 - within whatever HTML tag you're trying
61:45 - to style so let's say we have H1 and we
61:48 - want to style it so we want to set the
61:50 - style and then within the style
61:52 - attribute we want to set this as the
61:54 - value value so this is what a CSS
61:57 - declaration looks like so what you do is
61:59 - you declare certain properties about
62:00 - that tag using CSS you have a CSS
62:03 - property so here the property that you
62:06 - are fixing is called text align and
62:08 - there are hundreds of such properties
62:10 - but text align is the property that is
62:12 - used to decide the alignment of the text
62:14 - should the text be aligned on the left
62:16 - Center or right and then you have a
62:18 - colon the colon separates the property
62:20 - from the value and then you have a value
62:23 - okay so all of that goes inside the
62:26 - double quotes that are used to enclose
62:29 - the value of the attribute so yeah so
62:31 - you have the CSS property and then you
62:32 - have a colon and then you have the value
62:35 - and then you have a semicolon to end the
62:37 - Declaration and then you can have
62:39 - multiple declarations here let's say
62:40 - apart from Center lining it you also
62:42 - want to change the color to Indigo that
62:44 - is something that you can do here as
62:46 - well okay so that is the simplest way to
62:48 - apply H uh apply CSS to some HTML tags
62:52 - you simply go in into the HTML and then
62:55 - you add a style attribute now within the
62:58 - style attribute you add a property so
63:01 - let's say we want to do text
63:03 - align and for now let me put Center here
63:08 - and then you put so you have the
63:11 - property colon you have the value
63:13 - generally CSS values do not require qu
63:16 - quotations some of them do most of them
63:18 - don't and then you put a semicolon and
63:19 - let me save that and let let's just
63:22 - reload that here and just like that this
63:24 - is centered now you can experiment you
63:26 - can go and change this to right and you
63:28 - can see that that should bring you to
63:29 - bring it to the right of the page and
63:31 - again you can go back and change it to
63:33 - Center and that should bring it to the
63:34 - center of the page okay let me also add
63:37 - a color so color is added using the
63:39 - color attribute and let me set the color
63:42 - to Indigo you can create any color you
63:45 - want using something called an RGB or a
63:47 - hex formula but there are some named
63:49 - colors within CSS and you can always
63:52 - look these up so you can search CSS
63:53 - named colors so these colors are
63:56 - recognized by every uh these colors are
63:59 - already recognized by every browser so
64:01 - these are all the colors that are
64:03 - already available in CSS and you can use
64:05 - all of these color names whenever you
64:08 - want directly okay for example I could
64:10 - use dark blue instead of indigo and that
64:12 - would work as well and let me just
64:13 - reload the page here and you can see
64:15 - that now the content is centered on the
64:17 - page um just the about Jovian heading is
64:20 - centered on the page and it has the
64:21 - color dark blue okay if you want want to
64:24 - create colors that are not named already
64:27 - in CSS then we'll talk about that in the
64:29 - next lesson all right
64:33 - um so that is one way to add Styles this
64:37 - is called the inline style and you
64:39 - simply add a bunch of CSS declarations
64:41 - in the style attribute the other thing
64:44 - because you might want to add a bunch of
64:45 - different styles or you might want to
64:47 - add the same set of styles to multiple
64:48 - tags is to use a style tag so you can
64:52 - create a style tag with within the head
64:54 - or the body and then you can put some
64:57 - CSS code within the style tag let me put
65:00 - the uh let me create a style tag within
65:02 - the head here so I'm just going going to
65:05 - create
65:05 - style and now inside the style tag the
65:09 - first thing you need to put in is a
65:10 - selector because now you no longer know
65:13 - where you want to apply the style to
65:15 - unlike this attribute which was
65:16 - associated with a tag already so you
65:18 - need to put in a selector okay so there
65:21 - are many ways to select a particular or
65:24 - a bunch of HTML tags on the page the
65:27 - easiest way to select a bunch of tags is
65:29 - by the tag name so when you say
65:32 - H1 and then you open these braces or
65:35 - curly brackets what you're seeing that
65:37 - whatever I put Within These curly
65:39 - brackets or these braces should be
65:41 - applied to all the H1 tags on the page
65:44 - now of course here we have just one H1
65:46 - tag but if you had multiple of those
65:48 - then it would apply to multiple H1 tags
65:51 - but let me get rid of the inline style
65:53 - here so now that the inline style is
65:55 - gone you can see it's back to this
65:57 - position and now in the style tag I'm
66:00 - just going to
66:01 - write text align
66:06 - Center and now one of the benefits of
66:08 - using a style tag is you can use
66:10 - multiple lines you can make your code
66:11 - easier to read instead of stuffing a
66:13 - bunch of styles within the same
66:14 - attribute and color what was that deep
66:18 - blue or dark blue
66:22 - yeah okay so now we have about Jovian
66:25 - which is at the center of the page
66:29 - horizontally and it has the dark blue
66:31 - color okay now notice that this style
66:34 - did not get applied to any other element
66:36 - on the page but suppose this second
66:38 - element on the page job opportunities
66:40 - was also an H1 tag you will notice now
66:43 - that job opportunities is also receiving
66:46 - the same style that the first H1
66:49 - received okay so that is the benefit of
66:50 - using the style tag you don't have to
66:52 - retype the same style over and over for
66:55 - each
66:56 - tag but let's revert that back for now
66:59 - we are going to make this in
67:01 - H2 okay so that is the second way to do
67:05 - it which is let's just revert that yeah
67:08 - this is fine so that is the second way
67:09 - to do it which is using the style tag so
67:11 - in the style tag you have a selector and
67:13 - then you have this bracket and then you
67:15 - have a property and then you have a
67:17 - property value okay and then you close
67:19 - the bracket and of course you can have
67:20 - multiple properties that you can apply
67:23 - using a to the tags that have been
67:24 - selected using this selector and the
67:26 - simplest selector is just a tag we look
67:28 - at other selectors as well now yet
67:31 - another way to create to apply CSS to an
67:34 - HTML file is to create a separate file
67:37 - containing CSS this is very popular
67:39 - because that way you can put all your
67:40 - Styles in a single file and all your
67:42 - HTML in a single file and then link the
67:45 - file link the CSS file within the HTML
67:49 - page using the link tag okay so you use
67:51 - a link tag to specify within the HTML
67:53 - page that the the Styles should be
67:55 - picked up from this particular CSS file
67:58 - so let's do this let's create a file
68:00 - styles.css let's first get rid of this
68:03 - H1 all of that and let's get rid of the
68:06 - style
68:08 - tag okay and you can see that the style
68:11 - is gone now let us open up the sidebar
68:13 - once again and let us create a new file
68:15 - styles. CSS and now in this styles. CSS
68:19 - file let us add H1
68:24 - and let us
68:25 - put text align Center and let us put
68:32 - color dark blue okay and let's save that
68:36 - and let's reload the page nothing
68:38 - happened because we've not connected the
68:40 - CSS file with the HTML file so let's
68:42 - come back here and now I don't need the
68:44 - sidebar anymore let's add a link here so
68:47 - link is a tag special tag this typically
68:50 - used for adding stylesheets and it has a
68:53 - structure like this so you say Rel
68:55 - equals stylesheet you basic you
68:57 - basically specify what is the relevance
68:59 - of this link to this page so Styles
69:02 - sheet or what is the relation of this
69:04 - link to this page stylesheet and then
69:06 - you say hrf equal
69:11 - to styles.css
69:14 - okay and that's it and again you don't
69:16 - need a closing tag this is a self
69:18 - closing tag so there are a lot of self
69:19 - closing tags in HTML now this hre can be
69:23 - a c file that is sitting right next to
69:25 - your web page or it could be in a sub
69:29 - folder let's say it was in a folder
69:30 - called CSS then you could put it under
69:32 - CSS styles.css or you could also specify
69:36 - something on the Internet so that is
69:38 - what is done typically with Frameworks
69:40 - like bootstrap somebody has put up a
69:41 - bunch of styles on the internet and we
69:43 - simply include it link it to our page
69:45 - using the link tag and notice that the
69:47 - link tag is different from the a tag
69:49 - which is the anchor tag which is used to
69:50 - add links on the web page the link tag
69:53 - is used to to Simply link stylesheets
69:55 - it's a bit confusing the terminology
69:57 - because of how HTML evolved but uh
69:59 - that's what it is okay so now we have
70:03 - link Rel equal stylesheet styles.css
70:05 - let's reload the page and once again
70:07 - this is now back to the center and it
70:09 - has the deep blue color okay so those
70:11 - are the three ways in which you add CSS
70:14 - you have the style attribute you have
70:15 - the style tag and then you have CSS
70:17 - files now one thing I want to mention is
70:20 - CSS stands for cascading Styles sheets
70:22 - and inline styles take precedence over
70:24 - style tags and style tags I believe take
70:27 - precedence over the um
70:30 - external external files and there are
70:33 - also other ways in which precedence is
70:34 - decided so for example I if I went in
70:37 - here and I added a style tag I did a
70:40 - style attribute and I changed the color
70:42 - to Black again you will notice that even
70:45 - though the styles. CSS file says color
70:48 - dark blue because I've specified the
70:49 - style explicitly on the H1 tag that
70:52 - takes precedence and and that is going
70:54 - to apply the black color to it okay so
70:57 - keep that in mind this can be sometimes
70:58 - confusing and generally speaking keep
71:01 - things as simple as possible so that you
71:02 - don't run into all these issues okay so
71:05 - now that we have done we've added CSS
71:09 - let's maybe look at what are some other
71:11 - ways in which we can select specific
71:14 - elements and then apply styles to them
71:16 - so when using the style tag or a
71:18 - separate CSS file CSS properties can be
71:20 - applied to multiple desired elements on
71:21 - the page using three types of selector
71:24 - one is the tag selector this is
71:25 - something that we've already seen for
71:27 - example we've done this text line Center
71:28 - and color deep blue or dark blue for the
71:31 - H1 tag the second is the ID attribute so
71:35 - typically what you can do is you can set
71:37 - the ID attribute for a particular tag
71:41 - and then use the hash prefix within CSS
71:44 - to select it okay so I can do this I can
71:47 - add an ID for this banner.jpg image so I
71:52 - can just say ID equals Banner
71:54 - and generally as a rule there should be
71:56 - only one element with a specific ID on a
71:59 - page you can have multiple and the
72:00 - browser won't complain but just as a
72:02 - rule semantically speaking you should
72:04 - have one element with a particular ID on
72:06 - a page okay so ID should be an unique
72:08 - identifier so now we have banner and now
72:11 - we can select the Banner element so now
72:14 - if I said IMG that would apply to all
72:16 - the images on the page right if I said
72:18 - IMG that would apply to all images on
72:21 - the page but now I only want to apply to
72:22 - the tag which which has the ID banner
72:24 - and that is why I have this hash or
72:26 - pound character and now I can set
72:29 - something like width
72:33 - 100% okay and now you can see that this
72:36 - image has a width of 100% 100 width 100%
72:39 - simply means occupy the entire space
72:41 - available horizontally okay even if you
72:43 - resize the page you can see that this
72:44 - image automatically resizes of course
72:47 - there is an issue here that it this
72:49 - image is getting stretched we'll fix the
72:51 - stretch in just a bit but but at the
72:54 - very least we are able to apply the
72:55 - width of 100% to just this specific
72:57 - image and not to this image so that is
72:59 - the second way to select an HTML tag and
73:02 - apply some CSS styles to it then the
73:04 - third way to select an HTML tag is using
73:06 - a class now sometimes what you might
73:10 - have is a several tags which you want to
73:14 - style at once and all these tags have to
73:17 - be styled using the same set of styles
73:19 - so here is an example let's say I add
73:21 - location let's say I add
73:25 - here no I have location somewhere here
73:27 - let's say I look at the location here
73:29 - yeah so I have locations here I have
73:31 - location for the front end developer
73:32 - role I have location for the remote
73:34 - developer role I have Lo or the backend
73:36 - developer role and the data scientist
73:38 - role let's say I want to make the color
73:40 - of the location gray so I can do this I
73:43 - can say span and I can say class equals
73:49 - location okay and let me go in and let
73:52 - me add that here as as well span class
73:55 - equals location span class equals
73:57 - location so there may be many spans on
74:00 - the page you can see that there is a
74:01 - span right here at the very bottom as
74:03 - well but these three particular spans
74:06 - have the class location and now I can
74:08 - apply some styles to specifically these
74:11 - three spans by using dot location so I
74:13 - can say dot location dot is used to
74:16 - indicate a class you can either select a
74:18 - tag where you don't need any prefix or
74:20 - you can select an ID which is Hash or
74:21 - you can select using a DOT which is a
74:23 - class and now I can say color gray okay
74:28 - and let me reload the page and now you
74:30 - can see here we have bangaluru India
74:32 - remote and Mumbai India so this is
74:34 - applied this color is applied
74:36 - specifically to these specific sections
74:40 - okay now you might ask okay how do I
74:42 - know when I should use color when I
74:44 - should use text align when I should use
74:46 - what the simplest way is to just go on
74:48 - google.com and search okay how to
74:52 - center
74:54 - text in CSS and you can say it uses the
74:58 - text align property but now we also have
75:00 - tools like chat GPT where you don't
75:02 - actually have to go and search this on
75:06 - Google and browse various web pages so
75:08 - this is something that I've been using a
75:09 - lot these days you can see that I have a
75:11 - bunch of conversations here already with
75:13 - chat GPD regarding HTML but you can just
75:15 - go into chat GPD or chat. open.com and
75:17 - you can search how to center text in CSS
75:22 - okay
75:23 - and it is going to tell you that it's
75:25 - going to come up with an answer for that
75:27 - it's maybe also going to come up with an
75:28 - example and you can ask it some
75:29 - follow-up questions as well okay let's
75:32 - give it a second maybe it will come up
75:34 - with yeah to Center text in CSS you can
75:36 - use the text align property and set its
75:40 - value to
75:42 - Center okay and it's showing you an
75:44 - example as
75:52 - well
75:57 - right and that's it so you this is great
75:59 - it works really well it doesn't always
76:01 - give you the right answer but you could
76:03 - ask it a couple of things and you can
76:04 - try it out it's a good starting point
76:05 - whenever you face an issue to go ahead
76:07 - and ask in chat GT in fact I'll
76:09 - encourage you some of the questions
76:10 - you've been posting on Zoom try posting
76:12 - them to chat GPT and uh you might be
76:14 - surprised uh at how well it can answer
76:16 - these
76:17 - questions okay so that is about the
76:20 - different ways in which you can select
76:22 - things now I encourage you to learn more
76:24 - and experiment with various types of CSS
76:26 - selectors what you can also do is you
76:28 - can combine selectors of various types
76:30 - to select a specific set of elements
76:32 - that match all the conditions for
76:33 - example let's say you have certain divs
76:36 - with the class location and you have
76:37 - certain spans with the class location
76:39 - and you only want to apply these uh
76:41 - settings to the span with the class
76:43 - location then you can say span. location
76:46 - and I believe that is going to or span.
76:48 - location and I believe that is going to
76:49 - just select the spans which have the
76:50 - class. location okay
76:54 - now the next thing I want to tell you
76:55 - before we go ahead and actually style
76:56 - the rest of the pce is the CSS Box model
77:00 - the CSS Box model describes how HTML
77:02 - elements are rendered as rectangular
77:05 - boxes in a web page okay and the box of
77:09 - for any HTML element is composed of
77:11 - several layers that determine the layout
77:13 - and the sizing of the element so let us
77:16 - create um uh there are a few components
77:19 - to the Box model there is the content
77:21 - there is a padding there is the border
77:22 - and there is margin we're going to
77:24 - understand all of these terms and we'll
77:26 - do that by creating another web page
77:28 - just so that we can experiment with the
77:29 - Box model so I'm going to open up the
77:32 - sidebar here and open up another page
77:34 - called box model.jpg
77:37 - okay there it is box model. jpg oh
77:40 - sorry box model. HTML let me rename
77:45 - that let me create another page called
77:47 - box model. HTML okay and I can open up
77:51 - box model. HTML here in my web page in
77:53 - my web browser like that just double
77:56 - click on it now that opens up box model.
77:58 - HTML for
78:01 - me and now inside this let me start
78:05 - putting in some content so HTML let me
78:08 - put in the doc type declaration as well
78:10 - you can see that vs code Auto completes
78:12 - a do declaration it's nice so let me add
78:15 - head let me add a title here so CSS Box
78:20 - model and let me add the body here and
78:23 - let me
78:24 - add a couple of divs so let me add a div
78:27 - called first let me add another
78:30 - div called second and let me give both
78:34 - of these divs a class each so let me
78:37 - call
78:38 - this box
78:40 - one by the way for class names you can
78:43 - put hyphens in between so in CSS
78:45 - whenever you're using class names or IDs
78:47 - you can put hyphens let me call this box
78:50 - two okay and let's reload that let me
78:53 - zoom in a little
78:55 - bit 200 is good enough yeah so you can
78:57 - see that we have content as we expect
78:59 - first and second okay let me add a style
79:02 - tag
79:04 - here and for box one I'm going to set
79:09 - some Styles and then for box two I'm
79:13 - going to set some Styles okay no change
79:16 - here so far um now the first thing I
79:18 - want to point out is what does the
79:19 - content of a div look like well uh let
79:22 - me a background color so the way you add
79:24 - background color is you just start
79:25 - typing and vs code shows you so let me
79:27 - add a background color let me add the
79:29 - background color aqua for box one and
79:34 - let's add a background color let's
79:36 - see beige for box two let's reload that
79:40 - and now you can see that each of these
79:42 - boxes or each of these uh divs and a div
79:45 - is essentially a box which occupies the
79:47 - full width of the page mostly each of
79:50 - these boxes have a background color one
79:52 - has the back backr col aqua and one has
79:53 - a background col bee okay just first
79:56 - notice that the content of the of the
79:58 - Box occupies the entire width by default
80:00 - when you create a div okay you can see
80:02 - that there is some empty white space
80:03 - around that is because the body the body
80:06 - tag which is the outermost tag on the
80:07 - page contains some margin and padding
80:10 - which I'm going to or some internal
80:12 - spacing which I'm going to just set to
80:13 - zero for now um we'll understand these
80:16 - terms margin and padding in just a
80:18 - second okay yeah so now you can see we
80:21 - have first and second we have box one
80:23 - which is first and box two which is
80:25 - second so you have the actual content
80:28 - which is the innermost component of the
80:29 - box and right now our boxes just have
80:31 - content they don't have anything else no
80:33 - no border margin padding nothing now the
80:36 - content itself can be controlled using
80:38 - the height and the width properties of
80:40 - course if you put in a lot of content
80:42 - the height will automatically expand but
80:44 - I can also set the height specifically I
80:47 - can say this should have the height 240
80:49 - PX and this is how you specify length in
80:54 - CSS you specify a number and then you
80:56 - specify PX now you can also specify in
80:59 - inches you can also specify in
81:00 - percentages and all but in in the
81:03 - current case I'm just going to use PX
81:05 - okay 240 seems too big let me just set
81:07 - it to 40 PX right now yeah now we've set
81:10 - the height to maybe 80px okay so now
81:13 - we've set the height of the first
81:15 - container or the first box to 80px and
81:18 - let's set the height of the second box
81:20 - as well height 60
81:24 - PX so the height of the second box is
81:26 - set as well so so far we just our boxes
81:28 - just have a Content nothing special now
81:30 - the next thing that we can add is
81:32 - something called a padding now the
81:34 - padding is the space around the content
81:36 - so you have the content and then you
81:38 - have padding which is the space around
81:39 - the content okay so let me
81:43 - add padding
81:48 - 20px and reload the page and now you can
81:51 - see that we have this box first and the
81:54 - content itself is of height 80 but then
81:57 - around it there is this additional space
81:59 - of 20 PX okay you can you can by the way
82:02 - you can uh just comment out something or
82:04 - you can disable some CSS property simply
82:07 - by putting it under these uh slash star
82:10 - commands um and you can do this using
82:12 - the command slash okay command plus
82:14 - slash is going to comment something out
82:15 - you can see without the padding it this
82:18 - is the size and then with the padding
82:21 - this is the size and clearly it is added
82:23 - more uh it we we have added some space
82:26 - before the on the left and also you'll
82:29 - notice on the right as well if you try
82:30 - to actually do something with it okay so
82:33 - let's say we set a width I can also set
82:35 - a width here width 100
82:39 - PX again you can see that this is the
82:42 - structure or this is the content of the
82:44 - box without padding this is what it
82:47 - looks like and with
82:49 - padding it is added around the content
82:51 - so padding is space around the content
82:53 - but the key thing about padding is that
82:54 - the background color or the background
82:56 - image or whatever also applies to the
82:58 - padding okay now next thing that you can
83:01 - do is you can set a border you can you
83:03 - can set a border and you can set a
83:05 - border of let's say one
83:06 - pixel and let's just reload nothing
83:10 - happens because when you're setting a
83:11 - border you need to specify not just the
83:13 - Border width you also need to specify
83:16 - what kind of Border you need and the
83:18 - typically the border that you need is
83:19 - like a line border which is solid and
83:22 - you also need to specify what is the
83:24 - color of the Border okay so one PX solid
83:27 - blue that is what I'm setting as the
83:29 - border of the of the of the Box okay so
83:32 - now you can see that outside of the
83:34 - padding a border has been added which is
83:36 - blue in color let's make that 10 pixels
83:39 - so now we have a 10 pixel border and you
83:41 - can see once again the size of the
83:43 - entire box has grown so first we have
83:45 - the content and then around the content
83:47 - we have the padding which is
83:48 - indistinguishable because uh it has the
83:50 - same background but it is space you can
83:52 - click clearly see and then around the
83:54 - pading we have the Border by the way you
83:56 - can also add a border radius radius here
83:58 - let's say you can add a border radius of
84:00 - 20 pixels and a pixel is simply one
84:03 - point on the screen okay and you can
84:05 - just you can just play around with the
84:07 - pixel values when you're experimenting
84:09 - and over time you'll get a sense of
84:11 - which what pixel values make sense for
84:13 - the web page you're working on okay but
84:15 - I'll remove the Border radius for now so
84:17 - now we've added a height we've added a
84:19 - width we add we've added a border so we
84:21 - have the content and then we have the
84:23 - padding and these two are
84:23 - indistinguishable because the they have
84:25 - the same background then we have the
84:27 - border and the Border has its own color
84:29 - it can match the background it can be
84:31 - different but it's going to show up
84:32 - separately then you can add some space
84:35 - outside the Border as well okay and that
84:37 - is called the margin so margin and
84:39 - padding are the two most confusing
84:41 - things for when people they're getting
84:43 - started with CSS so I hope this is going
84:45 - to clarify so let's say margin
84:47 - 20px and when we add a margin of 20 PX
84:49 - you can see that outside the Border 20
84:52 - pixel have been added left and right
84:53 - around the
84:55 - entire box okay so the CSS Box model
84:59 - basically tells you that you can get
85:01 - some content then put some padding
85:03 - around it and that'll have the same
85:04 - background then add a border around it
85:06 - and then add a margin around it which is
85:08 - going to space it away from the other
85:09 - elements on the page okay now U with
85:13 - border and Marg padding and margin you
85:16 - can actually use a different Border Side
85:18 - uh you can use a different border width
85:20 - or padding width on each side so for
85:22 - example you could say something like
85:23 - this padding left is 10px padding right
85:30 - is 100 PX padding top is 20 PX and
85:37 - padding bottom is
85:41 - 30px okay let's for a second let's just
85:43 - disable that I'm just commenting it out
85:45 - or basically this is done using command
85:48 - plus slash okay and you can see now we
85:51 - have some some padding here and then we
85:53 - have some padding here which is which
85:55 - seems to be higher and then we are going
85:56 - to have some padding at the bottom as
85:58 - well you can you'll be able to see it
86:00 - more accurately if I hide so there's
86:02 - higher padding at the bottom lowest ping
86:04 - at the left and then there is some
86:06 - medium padding here and then there is of
86:07 - course a lot of padding here without the
86:09 - right padding it's going to be different
86:11 - right so that is one thing you can do
86:12 - you can actually specify padding
86:14 - properties for each side separately or
86:17 - you can also just specify for all sides
86:19 - directly here so you can say 10 PX
86:22 - left padding 100 PX right padding 20 PX
86:26 - sorry you have
86:28 - left no I'm not sure well um I think you
86:32 - start from the tab you start from the
86:34 - top so padding
86:36 - property
86:37 - order yeah so the first first padding
86:40 - applies to the top the second to the
86:41 - right the third to the left and the
86:43 - third to
86:44 - the bottom and then uh the last one to
86:47 - the left okay so instead of padding left
86:50 - left right bottom top bottom you can
86:52 - have padding and then you can specify
86:54 - what padding you want for the top what
86:56 - padding you want for the right what
86:58 - padding you want for the bottom and what
87:00 - padding you want for the left so 20 PX
87:02 - okay and that is going to set the
87:07 - padding top right left top right bottom
87:11 - left okay clockwise order starting from
87:13 - 12:00 so that is padding top right
87:16 - bottom left and similarly you can
87:17 - specify margin separately as well so you
87:19 - can say 20 PX at the top 30 PX on the
87:22 - right 50 PX at the bottom and 100 PX on
87:26 - the left and that is our margin applied
87:29 - properly
87:31 - okay now one thing you can also do is
87:33 - let's say your top and bottom margins
87:35 - are equal or top and bottom paddings are
87:37 - equal then you can keep them the same so
87:38 - you can um you can do this you can say
87:41 - margin or padding 10 PX and 100 PX so
87:46 - the 10 is going to get applied to top
87:47 - and bottom and then the 100 PX is going
87:50 - to get applied to left and right okay
87:52 - again top bottom left right if you put
87:54 - just two values it is going to repeat uh
87:57 - those two values okay top bot top top
88:00 - right left bottom clockwise orderorder
88:02 - top right left bottom always get
88:04 - confused all right so that is margin and
88:08 - padding now here's one interesting thing
88:11 - I want to point out though I hope this
88:12 - is all clear and you can also of course
88:14 - go say border bottom width is 30 PX and
88:20 - that is going to just change the B
88:22 - bottom width now here's one interesting
88:24 - thing I want to point out let's say we
88:26 - give this a padding as well padding
88:30 - 20px okay so now it has some padding and
88:33 - let's say we give it a border border 10
88:35 - PX solid
88:37 - red now it has uh now it has the second
88:41 - box as a border as well now let us give
88:43 - it some margin specifically let me give
88:45 - it some margin top okay so notice keep
88:48 - your eyes here keep your eyes here and
88:50 - I'm just going to add a margin top of
88:53 - 20px and let me just save that and
88:55 - reload you can see nothing happened so
88:58 - what happens is that margins between
89:01 - consecutive elements can collapse into
89:03 - each other okay so what happens is this
89:06 - has a margin bottom of uh this has a
89:08 - margin bottom of 50 PX you can see here
89:11 - it's coming from here it's it has a
89:12 - margin bottom of 50 pixels and this has
89:14 - a margin top of 10 pixel so when you
89:16 - have two elements side by side or one
89:18 - above the other and both of them have
89:19 - margins then both those margins collapse
89:22 - into each other and only the bigger of
89:23 - the margins is maintained okay so even
89:26 - if I had let's say margin 20px all
89:28 - around and reload this page you can see
89:30 - that a margin got added here a margin
89:32 - got added here a margin got added here
89:34 - but a margin did not get added here
89:36 - because this margin is shared with the
89:38 - margin of the above element okay so
89:39 - that's something that you should keep in
89:41 - mind that margins of successive elements
89:43 - collapse don't worry if you forget this
89:45 - you're going to figure it out when you
89:46 - build your web pages anyway here's
89:48 - another thing that I want to tell you
89:50 - you can use another margin setting
89:52 - called Auto so let's say I said margin
89:54 - top to be 20 pixels margin uh right to
89:57 - be Auto margin bottom to be 30 pixels
90:01 - and margin left to be Auto what happens
90:06 - is and I also set a width for
90:09 - this let me set the width to
90:15 - 80px you can see what happened that the
90:18 - width constrained how much space the div
90:20 - can take up because you've set a width
90:21 - properly and then the margin on the top
90:24 - and bottom apply as usual but because
90:26 - we've set the margin left and right to
90:28 - Auto both of those are automatically
90:31 - adjusted to be equal and this is a very
90:33 - powerful thing this doesn't work with
90:34 - top and bottom this works with left and
90:36 - right only if you set the left and right
90:38 - margin to Auto what that does is that
90:40 - centers the div horizontally on the page
90:42 - you can see as I change the size of the
90:46 - browser the second div stays in the
90:48 - center so that's a good neat trick to
90:50 - center a div or horizontally on a page
90:53 - just set the margin to Auto for left and
90:56 - right all right so that's about the CSS
90:59 - Box model and generally speaking if you
91:02 - want to if you have a doubt about where
91:03 - a particular space or margin or padding
91:05 - is coming from here's what you can do
91:08 - let me just zoom let me just make this
91:10 - full screen for for once and you can
91:13 - right click on an element and this works
91:15 - in Chrome or Brave browser doesn't work
91:17 - in Safari I believe but right click on
91:19 - an element and click inspect
91:22 - and when you click
91:23 - inspect the browser is going to show you
91:27 - the actual HTML structure of the page so
91:29 - you can go into any web page on the
91:30 - internet you can right click and you can
91:31 - inspect and you can study the HTML
91:33 - source code of the page you can see here
91:34 - it has all the entire style it has the
91:36 - entire body div all of that and when you
91:39 - hover over a particular div it shows you
91:41 - what that div looks like and
91:43 - specifically the green area the the
91:45 - green area that you're seeing that is
91:47 - the content of the div including the
91:50 - padding and then the Orange area that
91:52 - you're seeing that is the generally the
91:54 - margin of the div okay you can see the
91:56 - orange area is the margin and the green
91:57 - area is the content you can also come in
92:00 - here on the right and you can study all
92:02 - the styles that are applying to this
92:03 - particular component and you can
92:05 - actually look at the Box model for that
92:07 - particular so if you select box one you
92:10 - can see its box model here you can see
92:12 - that it has the size 100 by 80 and it is
92:15 - highlighted and it has a padding of 10
92:17 - at the top 100 at the right and then 10
92:19 - at the bottom and 100 on the left and
92:21 - you can see it has a border of 10 on
92:23 - each side and finally it has these
92:25 - margins 20 30 50 and 100 on each side
92:27 - okay so that is one great way for you to
92:30 - explore the CSS properties if you scroll
92:33 - up you can also see what are all the CSS
92:34 - properties that are applied here you can
92:36 - actually turn off these CSS Properties
92:38 - or you can add additional CSS properties
92:40 - for example you can say text align
92:42 - Center and that is going to apply that
92:44 - additional CSS property so this is a
92:46 - great way to just experiment with your
92:48 - web page in the browser itself before
92:49 - you go back and make some change in your
92:52 - code okay and if you reload the page all
92:54 - of these changes will go away but uh the
92:56 - Box model is useful to explore then the
92:59 - CSS properties are useful to explore and
93:01 - you can also add additional Properties
93:02 - or you can change the values of specific
93:04 - properties let's say instead of Aqua I
93:06 - want to change this to Gold I can do
93:08 - that here as well and again all of this
93:10 - is just changing in the browser it's not
93:12 - going to go and save anything all right
93:14 - so that's an interesting way for you to
93:16 - explore uh web pages by the way if
93:19 - you're not able to see the Box model let
93:21 - me just turn this off here yeah so this
93:25 - is the Box model uh you can see that if
93:28 - you scroll up you can see here that you
93:30 - have the Box model you can see the
93:31 - margin you can see the Border you can
93:33 - see the padding and you can see the size
93:35 - of the Box itself okay that is the CSS
93:38 - Box model okay
93:41 - so let's go back into the page webpage.
93:45 - HTML and let's also open up styles.css
93:48 - so let's go back to styles.css by the
93:51 - way you can use command P within vs code
93:53 - to open styles.css vs code is really
93:55 - nice for coding it makes your job really
93:57 - really easy you can also close or
93:59 - collapse some of these HTML tags in case
94:02 - you don't want to see them and that way
94:04 - you can reduce the structure of of your
94:06 - page so I'm just opening everything for
94:08 - now but you can do that if you
94:10 - want okay and let's go back here
94:13 - to my first web
94:16 - page and let us now try and achieve this
94:20 - layout step by step okay so the first
94:23 - thing I'm going to do is go into
94:25 - styles.css right at the very top I'm
94:28 - going to go into
94:31 - body and I'm going to set a few things
94:34 - right because every browser has its own
94:36 - setup of the body uh the its own margin
94:39 - and padding you can see here that there
94:41 - is some white space around this image
94:42 - even though I've set it WID to 100% So
94:45 - within the body I'm just going to set
94:47 - margin as zero and I'm going to set
94:50 - padding as zero as well
94:53 - great so now this is completely out
94:56 - there touching the edges okay one other
94:59 - thing that I want to do in the body is I
95:01 - don't like this font which has these
95:04 - things sticking out of the J you can see
95:06 - right at the top it has this old look uh
95:08 - this is called a serif font this small
95:11 - piece sticking out of the
95:12 - J this thing over here is called a serif
95:16 - and similarly this is called a serif so
95:18 - this is what is called a serif font um
95:21 - generally speaking Mo most modern
95:23 - websites are built using Sans serif
95:25 - fonts so I'm just going to go in and
95:26 - change the font now the way you set the
95:28 - font is by setting the font family and
95:31 - there are many font families that are
95:33 - available on the internet uh by default
95:36 - browsers support several font families
95:38 - and then your operating system may have
95:40 - certain font families and then you can
95:41 - include new font families from the
95:43 - internet from a resource like Google
95:44 - fonts and we'll do all of those things
95:46 - but for now I'm just going to say Sans
95:48 - siif okay what that does is if I reload
95:51 - the p page you can see that now it looks
95:52 - a lot more modern now it looks that now
95:54 - it doesn't have those things sticking
95:56 - out of the J and out of the B and all so
96:00 - that's one other thing that we've done
96:01 - let me just zoom out a little bit okay
96:04 - so now we've done that uh let's start
96:07 - fixing things or let's start
96:09 - implementing the wireframe by applying
96:11 - the styles step by step okay so the
96:14 - first thing that I'm going to do is I'm
96:16 - going to add a header so I'm going to go
96:18 - in into webpage. HTML and here right at
96:21 - the top I'm going to create a div and
96:23 - I'm going to give it the
96:25 - ID
96:28 - navbar okay this is going to be the nav
96:31 - bar right at the top so over here and
96:34 - inside this I'm going to need an image
96:36 - I'm going to put that image in in just a
96:37 - second but let us give me let us give
96:40 - some styles to the Navar so let's go in
96:43 - here let's add I've given it the ID nav
96:46 - bar so I can select it using hash and
96:48 - let me then set the
96:51 - height or let me just give some padding
96:54 - to the nav bar let me give it a padding
96:56 - of 8 pixels let's just set it to 8
96:59 - pixels for
97:03 - now okay nothing happened oh there it is
97:06 - yeah there is so that is a nav bar right
97:09 - there it has eight pixels of padding
97:11 - that is why it's just showing up like
97:12 - that let's now put an image under it so
97:14 - image SRC what is going to be
97:18 - the uh location of the image well I have
97:21 - picked out a jovian image logo here so I
97:24 - have this image hosted online okay so
97:27 - whenever you're using an image from the
97:28 - internet make sure that you're actually
97:31 - getting the link to the image itself and
97:33 - not the link to a page containing the
97:34 - image for example this page over here
97:37 - contains the image but I shouldn't put
97:39 - this in the SRC because then the browser
97:42 - is going to try to fetch this entire
97:43 - page as an image no so you can do two
97:45 - things right click if you want to
97:47 - include an image from the internet on
97:49 - your web page right click and say copy
97:53 - image address and then just put that
97:56 - here in SRC or you can right click and
97:59 - say open image in new tab and then grab
98:02 - the URL of just that image okay always
98:05 - open the image in a new tab and then
98:06 - grab the URL that is the safest way to
98:08 - do it all right so IMG SRC equals uh
98:12 - that and I'm just going to give it an
98:14 - ALT because that's a good practice so
98:16 - I'm just going to
98:17 - say Jovian logo and I'm going to give it
98:22 - um
98:23 - ID logo all right and now this image
98:27 - should show up here but it's obviously
98:29 - too big let's go in here and let us set
98:32 - the so we have the logo which is an
98:35 - image let us set its height to 32
98:41 - PX okay that looks nice maybe even 30
98:45 - PX and remember this is zoomed in I've
98:47 - actually zoomed it to about 150% in your
98:49 - on your side it may actually look a
98:51 - little smaller all right so that is
98:54 - starting to look
98:57 - good is there a margin for the snap bar
99:00 - let's set the margin to zero let's make
99:02 - sure that there is no margin
99:04 - here okay there's no margin and this is
99:08 - looking good so now we have this nice
99:11 - it's looking a bit unequal you can see
99:12 - on the top and at the bottom we have
99:14 - unequal um space so we can verify why
99:18 - there is this unequal Space by checking
99:19 - the nav bar and looks
99:23 - like
99:26 - well looks fine to
99:30 - me okay I have no idea why this is
99:32 - unequal that is something in CSS
99:34 - sometimes you have to figure out ways to
99:36 - fix but in any case I I think one one
99:39 - way we could do this is maybe just chug
99:40 - this into a
99:43 - div no that doesn't do
99:48 - it oh that's a wrong thing
99:52 - maybe I can just set the height directly
99:54 - here so height equals what is the height
99:56 - we need for the image 30 PX so let me
99:58 - just set the height to 30 here directly
100:01 - sometimes that tends to do the
100:03 - trick and let me remove the height from
100:06 - here so I've just set the height
100:08 - directly okay still doesn't do it so
100:10 - you're going to run into these issues in
100:11 - CSS where something is slightly off and
100:14 - I normally just keep these towards the
100:15 - end so that I don't worry about them
100:17 - immediately but in any case now we have
100:19 - the Navar in order and and then let us
100:22 - fix this image so this image looks fine
100:24 - but the only trouble here is that the
100:26 - image is
100:27 - stretching okay now what I want you to
100:29 - do what I want this image to do instead
100:31 - is just to cover the entire area that is
100:34 - available to this image instead of
100:35 - stretching and the way you can do that
100:38 - is
100:39 - by adding something called an object fit
100:42 - into the image okay again something that
100:44 - you can look up so this image has the ID
100:45 - Banner so I'm going to come in here and
100:47 - I'm going to add for Banner I'm going to
100:50 - set
100:51 - object fit cover okay and now you can
100:56 - see that whether I zoom it in or Z
100:59 - whether I increase or decrease the size
101:01 - of the web page the aspect ratio of the
101:03 - image isn't changing so this is the way
101:06 - you you fix your stretchy images you
101:09 - simply set object fit cover whenever you
101:11 - see that an image is
101:13 - stretching
101:15 - okay so that takes care of our nav bar
101:19 - that takes care of our Banner fine let's
101:21 - fix the about Joan I think we don't need
101:23 - the dark blue color I'm actually okay
101:24 - with the black color and now here we
101:28 - have these two things so we have the
101:30 - left and we have the right so we want to
101:32 - show two divs side by side each taking
101:36 - half the screen and again this is
101:38 - something that I I would search online I
101:40 - would say how to show two divs side by
101:46 - side with same
101:49 - width
101:51 - and you can see I've searched this
101:52 - already I think this one was one that I
101:55 - found useful so yeah you can explore
101:59 - this a little bit but I'm just going to
102:01 - go ahead and show you the solution here
102:03 - um whenever you need to show show two
102:05 - Dives side by side what you need to do
102:07 - is first make sure that this content and
102:09 - this content both are within a div so
102:11 - let's take uh let's see let's go to
102:13 - about Jovan and under about Jin first
102:16 - let's create a div called
102:19 - description let's give it the ID uh now
102:23 - let's give it the ID
102:24 - about okay this div is going to capture
102:27 - everything under the about section and
102:29 - then let's create two divs inside it
102:31 - let's give this the
102:33 - ID
102:35 - description and this is going to be the
102:40 - description and then let's create
102:42 - another
102:43 - div let's give this div the
102:46 - ID
102:48 - team and this is going to be the team
102:50 - image okay so we have created two divs
102:54 - one is called description and one is
102:55 - called team now by default divs are
102:58 - going to show up one below the other in
103:00 - HTML if you want to change that here is
103:03 - a quick trick you can apply if you want
103:05 - the divs inside a particular outer div
103:09 - to flow not horizontally but vertically
103:12 - then what you can do is go in and this
103:15 - outer div is called about so I'm going
103:18 - to just go into about
103:22 - so I'm selecting the outer div with the
103:24 - ID about and I'm going to just set
103:29 - display Flex okay we're going to learn
103:32 - about Flex the flex display in a lot of
103:34 - detail later on but the quickest or the
103:37 - easiest reason to use flex is to change
103:40 - the orientation of the divs inside and
103:43 - outer div
103:45 - from horizontal from vertical to
103:47 - horizontal okay and I reload that and
103:49 - you can see now we have description and
103:51 - team image coming side by side now
103:53 - here's what I can do I can set the width
103:55 - for description and team okay so I can
103:58 - do something like this we have
104:01 - description and I can set
104:04 - width 50% what I wanted to do is occupy
104:08 - 50% of the area of the parent div and
104:11 - similarly we have
104:14 - this team image uh or this team div and
104:18 - I want that to occupy 50% as well
104:25 - okay and now you can see that
104:27 - description takes up 50% if I added a
104:29 - background to it you'll be able to see
104:31 - so let me add a background just to show
104:36 - you yeah so you can see around
104:38 - description there is this background so
104:40 - description takes a 50% and the team
104:43 - image takes a 50% and of course now I
104:45 - can go in and I can put these two pieces
104:47 - of content inside those divs okay so I
104:50 - have the speed tag with a with this o
104:52 - and all of that so let me just grab that
104:55 - P tag and cut that and put this in the
104:59 - place of description okay and let me
105:01 - just right click here and indent I think
105:04 - it should be formatted already and now
105:07 - you can see that this P tag contains the
105:09 - data or shows this P tag shows the
105:11 - information on the left half similarly
105:15 - we can take the image
105:17 - now this contains this is the team image
105:20 - and and we can put that here in the team
105:23 - section okay now we have the team image
105:25 - on the right all right so that's one
105:29 - thing that I want to point out to you
105:31 - that you should what you should do is
105:32 - you should first try to create a layout
105:34 - using a couple of empty divs maybe even
105:37 - add background colors and borders to
105:38 - them just so that things are super clear
105:40 - and once you've created the layout with
105:42 - those empty divs especially horizontal
105:44 - layouts then put the content inside
105:46 - because otherwise you might just lose
105:47 - track and become confused but now once
105:50 - you you put the content inside later you
105:52 - have actually already fixed all of this
105:55 - so you have fixed what the description
105:58 - and team should be laid out as and then
106:00 - the content inside can be laid out
106:01 - independently okay so build your web
106:03 - page step by step in these steps okay
106:07 - let's maybe clean this up a little bit
106:09 - further let's see so maybe this team
106:13 - image Um this can have a border radius
106:16 - so this it's looking too sharp let me
106:18 - just call give this an ID
106:22 - team image and let me come in
106:26 - here team image and let me give it a
106:30 - border radius let's give it a border
106:33 - radius of 5
106:34 - pixels again experiment with it trial
106:37 - and error but yeah five pixels looks
106:39 - good I think I would like to have maybe
106:41 - some space here so maybe I can go in and
106:45 - I can add some padding into team so let
106:47 - me come into team and add or let me come
106:50 - into description and add some
106:52 - padding let me add a padding of 8
106:57 - pixels okay so now I've added a padding
107:02 - and maybe let me add this padding only
107:03 - on the left and right so let me keep the
107:05 - padding top and bottom as zero and let
107:07 - me add that padding but you can see here
107:10 - that there seems to be some space above
107:12 - this as well and I believe that is
107:13 - because of this paragraph tag because
107:16 - this paragraph tag generally has some
107:19 - space above and I can verify this by
107:20 - creating in by clicking inspect and
107:22 - verifying that in description this
107:24 - paragraph tag has a margin above so I
107:27 - can just set for this particular
107:29 - paragraph tag style equals margin Z or
107:34 - margin
107:36 - top so when you're specifying a zero
107:39 - margin you don't need to say PX you can
107:40 - just say margin okay right so the page
107:44 - is starting to look pretty good I would
107:46 - say um one issue here is that if I
107:49 - extend the this
107:51 - forward ah looks like I have a for the
107:55 - steam image looks like I have a width
107:56 - set let me get rid of that width
108:00 - here or a height for the team image
108:03 - where is the team image over here yeah
108:05 - this is a team image I think I have a
108:06 - height set for it let me get rid of the
108:08 - height that I've
108:10 - set and now it ends up taking up the
108:12 - entire space so maybe what I can do is I
108:14 - can just come back in here under team
108:17 - and or under team image and I can set
108:19 - the height to I can simply set the width
108:23 - to 100% of the parent which is half the
108:26 - div okay so that's nice now it is taking
108:29 - up the entire space inside the inner div
108:31 - and it is
108:33 - expanding um in size based on that but
108:36 - as the page gets bigger and bigger this
108:38 - content becomes too wide so maybe I want
108:41 - to limit the overall width of this
108:43 - description right so overall width of
108:45 - the about section itself right so the
108:47 - about section I don't want it to become
108:49 - too too big the about section should
108:52 - maybe I I just want to restrict it to
108:53 - this region generally speaking so what I
108:56 - can do is I can set a Max width I can
108:57 - set a Max width now the max width is the
109:00 - maximum width that this particular
109:01 - section can take so max width let me set
109:04 - it to 800 PX and let me reload the page
109:08 - so now you can see that even as as we
109:10 - make the page smaller both of these are
109:12 - going to take half the space and as we
109:15 - make
109:16 - the page bigger it's going to stop at
109:18 - 800 pixels but of course it would be
109:21 - nice for this to be centered on the
109:22 - screen so that's where I can also use
109:24 - that margin trick I can say margin zero
109:27 - Auto so zero margin on the top and
109:29 - bottom and then uh right and left margin
109:31 - can be Auto and now you can see about
109:33 - Jin and here we have this and then we
109:35 - have here we have this image and it's
109:36 - all nicely centered okay it's all
109:39 - remains centered remains centered and
109:41 - then it goes out here and it becomes
109:44 - small okay and maybe we can also add
109:46 - some padding here let's see let's add a
109:48 - padding of maybe 8
109:51 - pixels just so that it's it doesn't
109:53 - touch the
109:54 - edges okay and if we've added padding
109:57 - here then maybe we don't need this
110:00 - padding here over here maybe we just
110:02 - need a padding
110:04 - right 8
110:07 - pixels okay so this is what web
110:09 - developers sit and do all day they
110:11 - fiddle around with small CSS settings
110:13 - just to get things to look exactly as
110:16 - they desire uh but this is looking fine
110:18 - to me I think the about section looks
110:20 - good
110:22 - largely yeah somewhere around that is
110:24 - looking good yes this is slightly
110:27 - falling over into the next uh outside
110:29 - but that's okay okay so now we're done
110:31 - with the about joing section let's go
110:33 - ahead and fix the job opportunities
110:34 - section so I'm going to go in and under
110:37 - job opportunities okay once again the H2
110:40 - as well I'm going to add a center so H2
110:44 - I'm going to say text align
110:48 - Center okay now this this has centered
110:51 - then I can go in and I can maybe again
110:54 - create another outer div called
110:57 - jobs so I created a div called jobs so
111:00 - let me give it the
111:02 - ID
111:05 - jobs all right and again for jobs I'm
111:09 - going to set a maximum
111:11 - width so max width for jobs is 800
111:17 - PX and I'm going to set margin 0 Auto
111:21 - and I'm going to set padding 0
111:26 - 8px okay all I'm doing is I'm creating
111:29 - an outer div into which I can then put
111:31 - in all my jobs so let me grab all these
111:35 - jobs and this is all the footer yeah all
111:38 - this point till this point we have the
111:39 - jobs and I'm going to put it under the
111:41 - jobs div and let me reload again and you
111:44 - can see that it has this nice it remains
111:47 - centered on the screen that's nice
111:51 - pretty good remains centered on the
111:53 - screen and it is also not touching the
111:55 - edge of the screen so generally you want
111:56 - to have some space from the edge of the
111:58 - screen here so that's
112:01 - it okay then we have this H3 over here
112:05 - there's a lot of space between front end
112:07 - developer and then bangaluru India so
112:09 - how about we come in this is an H3
112:11 - remember it's an H3 uh let's give it a
112:15 - class called
112:18 - uh job roll
112:22 - so that we don't affect other h3s on the
112:24 - page if we had any at the moment we
112:26 - don't
112:28 - but
112:30 - yeah okay and let me come in here
112:35 - H3 and let us just give it margin bottom
112:39 - zero I believe it's a margin let's see
112:42 - okay margin bottom zero this is looking
112:44 - good now it is much closer maybe Zero's
112:45 - too little maybe let's make it 8
112:48 - PX Maybe 4 PX should do the job so
112:51 - normally with margins and paddings you
112:53 - want to use multiples of four that's a
112:55 - good idea and you want to go double
112:56 - double double half half half and that's
112:58 - a quick way to work around this stuff
113:01 - okay now what would be nice if we could
113:02 - also get that nice apply button or apply
113:05 - link here on the on the job page so I'm
113:07 - going to again show you a quick trick
113:09 - we're going to learn a lot more about
113:11 - things like flexbox Etc but a quick
113:13 - trick to just get one single element
113:16 - pulled to the right side is using
113:19 - something called float so I'm going to
113:21 - show you right now so let me say a href
113:24 - equals nothing for now and let me just
113:26 - put in
113:28 - apply and let me give this a class as
113:32 - well and this class is also called
113:35 - apply and let me put it above every H3
113:40 - here okay so now we have this apply
113:42 - apply apply that is going to show up
113:44 - above every H3 and I think I can go in
113:48 - and I can fix the margin top as
113:51 - well for this H3 to
113:54 - be
113:57 - zero yeah so now we have apply apply
114:00 - apply
114:02 - and what we can do
114:05 - is take the apply class so do apply that
114:09 - is the that is the class given to this
114:12 - apply link and I'm just going to add one
114:15 - thing
114:16 - float right okay so that's just going to
114:20 - pull this apply all the way to the right
114:23 - that's nice it's going to just pull it
114:25 - all the way to the right and I think we
114:26 - need probably under the location we need
114:28 - some spacing so I'm going to go back and
114:31 - add some location add some spacing under
114:33 - location so we have class location and
114:36 - class location has already had we've
114:38 - added the color gray let me add margin
114:43 - bottom 16
114:48 - PX okay that's a span so that's another
114:51 - learning margins don't work for spans I
114:55 - know it's confusing happens all the time
114:57 - margins don't work for spans so I'm just
115:00 - going to go in and I'm going to change
115:01 - these spans to
115:04 - divs okay margins and paddings don't
115:08 - apply to spans because they are inline
115:14 - elements I'm going to change these all
115:16 - to
115:18 - divs and now it's to apply okay great so
115:22 - this is looking nice now we have the
115:23 - front end developer we have Bangalore
115:25 - India and we've pulled this or we've
115:26 - floated this apply link to the right so
115:28 - that's nice one thing that I would want
115:30 - to do now is maybe get rid of these
115:32 - underlines under these links uh these
115:35 - underlines aren't looking that great so
115:37 - I'm just going to go in and then for all
115:38 - the anchor
115:40 - Tags I'm going to remove the underline
115:43 - how do you remove the underline all the
115:44 - anchor or the link tags well remove
115:48 - underline from a a tags CSS I just
115:52 - search that and it says that it can be
115:55 - removed using the text decoration
115:57 - property so you can say text decoration
115:59 - none and that should do it so if I go
116:02 - text decoration none that should
116:06 - hopefully get rid of all the underlines
116:08 - right we have gotten rid of all the
116:10 - underlines as well now we have these
116:12 - apply links as well last thing is the
116:15 - footer I think we're almost there we
116:16 - just need this footer at the end so let
116:18 - me come in and once again let me create
116:20 - this div called foter okay it's already
116:23 - there so I'm just going to give it the
116:24 - ID
116:27 - putter okay and then we have this list
116:31 - let me just call it let me give it the
116:33 - ID footer
116:37 - links okay so I'm going to do a couple
116:39 - of things first I'm going to give the
116:44 - footer so dot um it's it's an ID so hash
116:48 - footer I'm going to to give it the
116:50 - background
116:51 - color gray or something very light gray
116:55 - let's see gains borrow okay that looks
116:57 - like a nice grayish color oh what is the
117:00 - lightest gray we can find let's search
117:03 - for a very light gray ghost white okay
117:07 - that is interesting let me just get
117:08 - Ghost
117:11 - white yeah that's a very light grayish
117:14 - color you may not even be able to see it
117:16 - on the screen but it's there then for
117:19 - the footer links I want to get rid of
117:21 - these bullet points and let me just
117:25 - bring that up here so for the footer
117:26 - links I want to get rid of the bullet
117:28 - points and I just want to keep them all
117:29 - on the same line so I am going to
117:33 - say putter links and again this is
117:36 - something that I would look up normally
117:38 - but uh I happen to remember it what the
117:40 - way you can get rid of these bullet
117:42 - points is to say list
117:44 - style none I believe that should do
117:48 - it and now now you can see that the the
117:51 - bullet points are gone now of course for
117:53 - the footer itself it might be nice to
117:54 - maybe add some padding at the top and
117:57 - bottom and maybe all around so let me
117:59 - just add a padding of
118:02 - 8px and okay now the footer is looking
118:04 - nice too and maybe let me also add some
118:07 - margin top the footer is too close to
118:08 - the data scientist job role let me add a
118:11 - margin
118:12 - top I'm going really fast but I'm
118:14 - expecting you to follow along here pause
118:16 - follow along and maybe also look up what
118:18 - each of these prop properties mean
118:19 - because that's really how you do web
118:22 - development 16 PX so let's add a
118:27 - margin H let's
118:30 - see did not do anything maybe let's make
118:34 - that
118:35 - 32px yeah that increased it so remember
118:38 - our location also has a margin so the
118:40 - margins collapse into each other um all
118:43 - of that
118:43 - happens okay final thing we want to make
118:47 - these list items come up up in line so
118:51 - there whenever you have three divs
118:53 - showing one below the other and you just
118:55 - want to show them all in line now
118:57 - another quick way to do it is well we
119:00 - could just do I think display flex and
119:01 - that would do
119:03 - it yeah display flex and that should do
119:07 - it U for phot links um we can also
119:11 - add but I want to show another way to do
119:14 - it and this is something that you can
119:15 - set on individual list items so you can
119:18 - say footer
119:20 - links
119:22 - lii and that is going to select the LI
119:25 - items under the ID footer links and I'm
119:28 - going to say display in
119:32 - line okay and you can see now they're
119:34 - showing up inline so the difference
119:36 - between flex and inline is flex is
119:38 - something that you apply on the parent
119:40 - and that applies to all the items within
119:42 - it and then in line is something that
119:44 - you apply to the child element let's say
119:46 - you went into one of these list items
119:48 - and applied in line only that that would
119:49 - appear in line instead of block which is
119:52 - the entire horizontal width um but here
119:55 - we are applying to all the list items
119:57 - and I'll tell you why in just a second
119:59 - but apart from the in line we also want
120:01 - to add a margin so let's add we don't
120:03 - need a margin at the top let's add maybe
120:05 - 16 pixels of margin on the left and
120:07 - right so let's add the margin here let's
120:10 - reload okay so now we have a margin and
120:13 - the last thing that I'm going to do is
120:14 - I'm going to say text align Center and
120:17 - that is going to Center these links on
120:19 - the page okay and in fact text align
120:21 - Center can be done not just for footer
120:23 - links but for the entire footer itself
120:25 - we can do it like that and finally let's
120:28 - fix this as well so let's go in and
120:30 - let's call this
120:32 - copyright class
120:38 - equals copyright and let's come back in
120:41 - here and well we could also give it an
120:44 - ID but fine class is
120:47 - fine copyright and let's let's give it
120:49 - the
120:51 - color
120:54 - gray okay so that is our page I think
120:58 - that is looking pretty good so we have
121:01 - the nav bar at the top we have this
121:03 - banner and this Banner always occupies
121:05 - the entire length and it doesn't stretch
121:07 - the image too much um then we have this
121:09 - about Jovan section that is always at
121:11 - the center and then we have the job
121:13 - opportunities that are also in the
121:15 - center if you want we can experiment
121:17 - with the colors of these and finally we
121:18 - have these apply links uh they don't do
121:21 - anything right now but it wouldn't it be
121:22 - nice if they could at least maybe
121:25 - trigger some sort of an email and that's
121:28 - where I want to introduce you to another
121:29 - form of Link called mail to Links okay
121:32 - so just search for mail to
121:34 - Links what is a mail to Links well you
121:38 - can do this instead of having a link
121:40 - point to some website on the internet
121:42 - you can have a link say mail to colon
121:45 - and then
121:46 - some email address and when the user
121:49 - clicks on that link it is going to open
121:52 - their email application whether it's
121:53 - Gmail or whatever email application
121:55 - they're using it is going to open their
121:56 - email application and put in this
121:59 - address in the subject line okay so
122:02 - that's a very interesting hack so this
122:04 - is what we can use here for our apply so
122:07 - I can go in here into apply where is my
122:10 - apply yeah so I can go in here and in
122:13 - the HF I can say mail to I can just say
122:15 - mail to support at Jovian
122:21 - okay and let me come in here and let me
122:23 - say mail to support join.com and mailto
122:25 - support join.com and reload the page now
122:28 - if I click the apply button you can see
122:31 - that it opens my mail application which
122:34 - is Gmail and it is automatically filled
122:36 - in the address support jan.com okay and
122:39 - then here you can actually then fill out
122:41 - the subject and you can send an email so
122:43 - essentially what we're saying is when
122:44 - the user clicks on the apply button that
122:46 - is going to trigger their email client
122:48 - and they can just send us an email that
122:50 - they're interested in a particular um
122:52 - job one thing that we can also do is we
122:55 - can also put in a subject here so we can
122:57 - say mail to and you can just say subject
123:01 - you can say question mark subject after
123:03 - the email address equals front
123:06 - end and question mark subject
123:10 - equals
123:12 - backend and question mark
123:15 - subject
123:17 - equals
123:19 - data scientist or just say data all
123:22 - right and I'll also add a Target uncore
123:24 - blank so that it opens in a new
123:28 - page underscore blank and let's
123:33 - add Target equals uncore blank and let's
123:36 - add Target equals uncore blank okay so
123:39 - now each of these mail to Links is going
123:42 - to have a different subject and it's
123:43 - going to open a new tab you can see here
123:45 - that it has automatically added the
123:46 - subject front end and you can construct
123:48 - more more complex subjects and in fact
123:50 - you can also set up some kind of a body
123:52 - directly as well and similarly you can
123:55 - go in here and uh let's click on backend
123:57 - developer and it fills up the subject
124:01 - backend and you can go in uh click on
124:04 - the data scientist and it fills up the
124:06 - subject data okay great and then all
124:10 - these other links are working fine as
124:11 - well I think I'm very happy with this
124:13 - I'm very happy with this web page at
124:15 - this point so I'm just going to save it
124:17 - and let's see I'm just going to reset
124:20 - the zoom level okay so this looks good
124:22 - at the normal zoom level and it contains
124:25 - everything that I'm looking for I have
124:26 - the header I have the banner I have this
124:28 - section I have some text on the left I
124:30 - have something on the right yep I have a
124:32 - couple of links here as well I have the
124:34 - job opportunities and I have locations I
124:37 - have this apply button and then I have
124:39 - this footer and then I have this
124:40 - copyright at the end as well great so
124:43 - I'm feeling very happy with this web
124:44 - page now the final step now that we have
124:47 - completed this web page the final step
124:49 - is to go ahead and deploy it so this is
124:51 - what it looks like roughly now we can
124:54 - deploy this web page to the cloud now
124:55 - we're going to cover deployment
124:57 - extensively over the course of this
124:59 - program or the course of this next few
125:01 - lessons as well and there are many many
125:03 - ways to deploy a website to the cloud
125:04 - there are hundreds of platforms but the
125:07 - simplest thing is to just upload a zip
125:09 - file right wouldn't it be nice if we
125:10 - could just zip up our web page and just
125:12 - upload it on the cloud well that is what
125:14 - you can do using this platform called
125:16 - static. apppp and there are a bunch of
125:17 - these platforms but static. apppp allows
125:20 - you to Simply dragdrop an archive with
125:21 - your page or a website in it and it will
125:23 - take care of the rest okay you'll
125:26 - automatically set up a website for you
125:28 - now here is what we do first we have to
125:31 - make sure that we have an index.html
125:33 - page so there is this convention in HTML
125:36 - that a file called index.html is going
125:38 - to be the root page of a website okay or
125:41 - the root page so when you open jan.com
125:43 - that's actually opening jan.com
125:46 - index.html so let's go back here here
125:49 - and let us rename webpage. HTML to
125:51 - index.html so let's rename this
125:56 - to
125:59 - index.html
126:01 - and then let us go and zip up this
126:04 - folder so we have this folder over here
126:07 - which has a index.html file which is the
126:09 - sort of the root page or the root web
126:11 - page and it has a bunch of other files
126:12 - and images as well I'm going to zip it
126:15 - up so I'm going to say uh compress and
126:19 - depending on your operating system you
126:21 - may have a different way to zip things
126:23 - and then on static. apppp I'm just going
126:26 - to click upload for
126:27 - free I am then going to upload this ZIP
126:31 - file over here and that is going to then
126:33 - ask me to maybe pick a domain name so
126:35 - it's going to be a subdomain of static.
126:38 - apppp so let me just put it as
126:44 - Jovian j o v i a n can't spell my own
126:49 - company name okay and let me just put in
126:51 - an email here Sydney is the account I'm
126:53 - using Sydney jan.com
126:58 - and let me put in the name here Sydney
127:01 - Carton okay let me put in a password
127:08 - here I'm not going to say that and let
127:11 - me just accept the terms of privacy and
127:12 - let me just say continue okay looks like
127:15 - this email has been taken let me just
127:18 - provide a slightly different email yeah
127:21 - so now that is going to ask me to verify
127:23 - my email I've uploaded the zip file
127:26 - already so I'm just going to go ahead
127:27 - and verify the email I am going to let's
127:30 - see let's open up
127:33 - gmail.com and here is the account and
127:37 - here is the verification
127:41 - link okay now my email is
127:45 - verified and now you can see that Jovan
127:48 - careers. static. apppp this website is
127:50 - getting deployed okay so let's give that
127:53 - a couple of minutes looks like it is
127:55 - deployed so let's maybe go and check it
127:57 - out let me just click joen careers.
127:59 - static. apppp and yes looks like this
128:02 - website is already deployed and in fact
128:05 - you can open it up on your end as well
128:07 - and because we have set up because we
128:09 - have set up this
128:10 - page web page. HTML as index.html that
128:14 - is why it's opening up directly but I
128:16 - can also just type index.html and it
128:18 - will open the exact same page okay not
128:21 - only that remember we have this other
128:23 - page called box model. HTML well box
128:27 - model. HTML should open up just fine as
128:31 - well there you go box model. HTML and in
128:35 - fact if we had a link here from
128:36 - index.html to box model. HTML then that
128:39 - link would work properly as well and you
128:41 - can see that both these images got
128:43 - uploaded as well so that is how you
128:45 - deploy a site the the simplest way to
128:47 - deploy your site side is to just zip up
128:49 - your code and put it up online you don't
128:52 - need any G AWS deployment commands Etc
128:56 - it's all really simple to do okay and
129:00 - that's it so let's take a quick summary
129:03 - of the whole thing here's what we did we
129:05 - created an HTML file on we created a
129:08 - folder on our desktop we put in our HTML
129:11 - file into it we added some code into it
129:12 - using vs code and then we try to view it
129:15 - in a browser then we using some basic
129:18 - HTML tags like HTML head title body div
129:21 - Etc we created a web page then we use
129:24 - some more HTML tags H1 to H6 P list
129:26 - links Etc to structure content on a web
129:29 - page so remember this piece before we
129:32 - added any CSS we just put up a bunch of
129:35 - content on the web page and here is what
129:37 - it looked
129:38 - like then we learned how to apply styles
129:41 - using CSS so cascading stylesheets the
129:43 - way we saw we saw that we can apply
129:45 - Styles in line we can apply styles using
129:47 - the style tag we can apply styles using
129:49 - CSS files and the key idea is you have a
129:51 - selector and then you have a property
129:53 - and a
129:54 - value then uh we looked at the different
129:57 - kind of selectors we have tag selectors
129:59 - we have ID based selectors and we have
130:01 - class
130:02 - selectors then we learned the CSS Box
130:04 - model which is how you have content and
130:07 - around the content you can add padding
130:09 - and the padding is also shares the same
130:11 - background and then the padding is
130:13 - inside the border the border is
130:14 - something that you can set WD for and
130:16 - then outside you have margin and margins
130:18 - can overlap for side by- side
130:21 - elements and then we of course we
130:23 - implemented a wireframe using excal
130:25 - draw.com and we then tried to replicate
130:29 - this wireframe within CSS You by adding
130:32 - a bunch of CSS properties starting from
130:34 - the top so we picked section by section
130:35 - we added a na bar we added a logo in it
130:38 - we fixed the banner we fixed the section
130:40 - about Jovian then we went into job
130:42 - opportunities and then we added a footer
130:44 - right so that's what we did and finally
130:46 - we just deployed our website to the
130:48 - cloud using static. apppp we just went
130:50 - to static. apppp created a zip file
130:53 - renamed our main page to
130:55 - index.html and uploaded that zip file
130:58 - verified our
130:59 - account and it is deployed as a um yeah
131:04 - so it is
131:06 - deployed where is it yeah it is deployed
131:09 - as a subdomain of static. apppp but
131:12 - within static. apppp itself you can also
131:14 - go into settings and actually configure
131:16 - a custom domain so you can actually put
131:18 - this on Jovian careers.com or something
131:20 - like that you can go and you'll have to
131:22 - upgrade your plan you'll have to pay you
131:24 - can set up a custom domain you can just
131:26 - set up a domain like janc careers.com
131:28 - and you can set up some DNS settings and
131:30 - make sure that that is where your web
131:32 - page shows up so that's not bad for a
131:34 - first lesson we probably spent about 2
131:37 - hours 2 hours 15 minutes if I exclude
131:39 - the breaks and we were able to build a
131:42 - pretty good functional website and
131:44 - clicking on this website the actual
131:46 - functionality is also present because
131:47 - you can click apply and you can actually
131:49 - go ahead and send out an email to the
131:51 - Jan team to apply for a job so that's
131:54 - how simple HTML and CSS really is once
131:56 - you can become familiar with just the
131:59 - most basic parts now of course there's a
132:00 - lot more to it there are tables there
132:02 - are forms there are various CSS
132:04 - properties Flex Box
132:06 - Etc but what I want you to take away
132:08 - here is that you should try to First
132:10 - figure out what you want to build and
132:12 - try to build it using what you already
132:14 - know and then just try to learn as you
132:16 - go along the things that you don't
132:18 - already know okay and here are some
132:22 - references that you can check out you
132:23 - can find the completed code for this
132:25 - lesson it may be slightly different
132:27 - because we've done this live you can
132:28 - find the completed code for this lesson
132:30 - here you have this index.html over here
132:33 - so that's great and then you have maybe
132:37 - some beginner friendly HTML and CSS
132:38 - tutorials in case you want to look at
132:40 - other tutorials as well after practicing
132:42 - this you can go and check that out so
132:44 - HTML dog.com is something that I found
132:46 - very simple to follow along with but you
132:49 - want some if you want some interactive
132:50 - HTML tutorials you can go to
132:52 - w3schools.com and if you want more
132:56 - detailed and comprehensive tutorials
132:57 - check out mdn or Mozilla developer
133:01 - Network you can check that out as well
133:04 - they have fairly detailed tutorials um
133:07 - and a lot of text lot of explanation as
133:09 - well so take your pick depending on how
133:12 - new you are depending on how comfortable
133:14 - you feel after practicing this lesson
133:16 - after watching this lesson and prac iing
133:18 - it writing out all the code by hand you
133:20 - can pick whichever other tutorial you
133:22 - want to take and some of the other
133:24 - things you can look at is the LM .io
133:27 - this is the text generator that we
133:29 - normally use so that's something that
133:32 - you can use to generate text when you
133:33 - want to fill a page um if you want to
133:35 - learn about the CSS CSS Box model you
133:38 - can check out this YouTube tutorial
133:40 - there is this website called CSS
133:41 - trick.com this has a lot of great guides
133:44 - on various Topics in CSS um don't
133:46 - recommend doing all these guides but
133:48 - whenever you're working on a particular
133:50 - topic if you need to maybe get help with
133:52 - a particular Topic in CSS you can check
133:55 - it out and normally you can just search
133:57 - online and you'll find something good
133:58 - enough and then if you want to create
134:00 - more advanced mail to Links so you can
134:03 - use this mail to link. me and you can
134:05 - craft maybe a a very interesting mail to
134:07 - link which can have a two line a subject
134:09 - line a body and a bunch of other things
134:11 - as well you can add CC BCC all of that
134:14 - too so the last time we looked at the
134:17 - very basics of HTML and CSS and we did
134:20 - that by working on a problem statement
134:22 - where we built a simple jobs careers
134:25 - website for Jovian so today we are going
134:28 - to continue building on that in this
134:31 - tutorial we will dive deeper into the
134:33 - world of web development and we will
134:35 - learn some Advanced Techniques for
134:36 - Designing and styling websites using
134:38 - HTML and CSS we will learn how to create
134:41 - HTML tags of various types we will learn
134:44 - how to use some Advanced CSS properties
134:47 - and we'll also learn how to optimize
134:48 - your code a little bit for performance
134:50 - and
134:51 - accessibility so here is what we're
134:53 - going to cover today we're going to
134:54 - iteratively improve the existing web
134:56 - page we are going to create and style
134:58 - HTML tables we're going to understand
135:00 - various text related and color related
135:03 - CSS properties we're also going to
135:05 - create an HTML form to collect user
135:07 - inputs and we're then going to send
135:09 - those user inputs to a server and
135:11 - finally we're going to use metatags to
135:13 - improve how a deployed page is previewed
135:16 - when it is shared as a link so there's a
135:18 - lot to get through let's get into it and
135:21 - the best way to follow the best way to
135:23 - learn these skills is to follow along
135:25 - step by step you don't have to do that
135:27 - if you're watching live but as you're
135:29 - watching the video just pause at various
135:31 - places and try to write out all the code
135:34 - yourself that is how you learn this
135:36 - quickly and of course we are assuming
135:38 - some basic knowledge of HTML and CSS
135:40 - here from the previous
135:43 - lesson so we'll explore these Topics by
135:47 - attempting to solve this problem
135:48 - statement we will try and improve the
135:51 - Jovian careers website that was created
135:53 - in the previous tutorial so here is what
135:55 - the Jovan careers website looked like
135:57 - let me zoom in here so that you can see
135:59 - it
136:00 - easily so we have a nav bar here with
136:03 - the Jovian logo we have a banner image
136:06 - here it says do something great and we
136:08 - have an about Jovian section and then we
136:10 - have some information about Jovian we
136:12 - also have an image ideally this should
136:14 - be the Jovian team but this is just to
136:16 - indicate something about the team
136:18 - and we have information about job
136:19 - opportunities and you can click apply
136:21 - and an email will get triggered you'll
136:24 - be able to send out an email applying to
136:26 - these jobs and then there are some links
136:28 - in the footer as well for courses
136:30 - programs and YouTube so this is what we
136:32 - built the last time and we are going to
136:35 - improve upon this by making the
136:37 - following changes we are going to show
136:39 - the list of jobs in tabular format with
136:42 - separate columns for the job title
136:44 - location salary and the job posted date
136:47 - we we also going to show an application
136:49 - form below the jobs table where a user
136:51 - can fill out and submit an application
136:54 - then we are also going to improve the
136:55 - Esthetics of the page bring it closer to
136:57 - the Jovian brand using the appropriate
137:00 - fonts text sizes and colors then we are
137:03 - going to deploy the page to to the cloud
137:06 - and ensure that it previews properly
137:07 - when it is shared as a link so this is
137:09 - what we're going to work on today now
137:12 - the code for this tutorial can be found
137:14 - here so the starter code which is the
137:16 - finished website from the last tutorial
137:18 - is available at this link the completed
137:21 - code for today's tutorial will be
137:23 - available at this link and finally the
137:25 - finished site that we're going to create
137:26 - today will be available at this link so
137:29 - check these out in case you have in case
137:32 - you face issues at any point so let's
137:34 - just take the starter code and we're
137:37 - going to download and extract the
137:38 - starter code first and then we're going
137:40 - to open it up in Visual Studio code so
137:44 - let's open up this link this contains a
137:47 - starter code code and I'm just going to
137:49 - save it on my desktop it's going to be
137:51 - saved with the name my first webpage.
137:53 - zip you can see that I have a zip file
137:55 - here I'm just going to open up this ZIP
137:57 - file so extract it and now I no longer
138:00 - need this original zip file so I'm going
138:02 - to delete it then I am going to rename
138:05 - this so I'm going to rename this to my
138:07 - second web page since this is our second
138:10 - web page so you can see here I've
138:12 - renamed it to my second web
138:14 - page now I want to open this up in
138:16 - Visual Studio code so let me open vs
138:20 - code or Visual Studio code and I have
138:22 - Visual Studio code I've installed it
138:24 - already in case you don't know don't
138:25 - have it installed just go online search
138:27 - for visual studio code and install it
138:30 - and now I'm going to go into the file
138:32 - menu and I'm going to select open
138:35 - folder and now I'm going to just select
138:37 - the folder my second web page that I
138:39 - have just downloaded and let's open it
138:42 - up and here you go now we have this HTML
138:46 - file now we we have a CSS file and we
138:48 - have a bunch of other files as well from
138:50 - last time so this is all the starter
138:52 - code that we have and let me also open
138:54 - up the web page in the browser so I'm
138:57 - just going to open it up in the browser
138:59 - here as well so that we have it open
139:03 - both for editing and for
139:07 - previewing so now we have a file
139:09 - index.html here and that file contains
139:11 - all the content for this page let's
139:13 - quickly review what this file contains
139:15 - so that we when we start modifying it
139:17 - we'll know exactly what to do now of
139:19 - course we have this head tag here which
139:21 - sets the title of the page notice that
139:23 - we didn't actually set a proper title
139:24 - right now it just says my first web page
139:26 - it should say something like Jian
139:27 - careers so we'll fix that then it
139:30 - contains a link to a stylesheet or a CSS
139:32 - files so there are many ways to attach
139:34 - CSS styles to
139:36 - HTML web pages and one way to do it is
139:39 - by using the link tag and putting all
139:41 - the Styles in a separate CSS file which
139:43 - we have
139:44 - here then of course in the body itself
139:47 - self we have the nav bar over here and
139:50 - this is all the code for the nav bar so
139:52 - we have the nav bar which is a div and
139:53 - then an image inside it which is the
139:55 - logo over here then of course we have a
139:57 - banner which is an image tag right here
140:00 - then we have an header we have a header
140:02 - H1 which is right over here you can see
140:05 - that all of these are styled as well so
140:07 - we have the body the body we've set the
140:09 - margin and padding to zero and we've set
140:10 - the font family to Sans serif we've also
140:13 - set a text decoration for the nav bar
140:15 - we've set a padding we've also set a in
140:18 - for the banner we've also set an object
140:20 - fit over here so that it shows up
140:23 - properly no matter what the size of the
140:24 - page is and for the header we've set the
140:27 - text Line to Center so we've added
140:28 - various Styles as well then we have this
140:31 - about section and in this about section
140:33 - we have a left section and a right
140:35 - section so the way we did this is we
140:38 - have this about div and for this about
140:41 - div we have set the display to flex and
140:43 - we have set a maximum width for this
140:45 - about div so you can see here that the
140:47 - maximum width is ensuring that this
140:49 - about div doesn't become too big apart
140:52 - from that we've also set a margin uh
140:54 - that ensures that it is always at the
140:55 - center okay so I'm going through this
140:57 - quickly but review the previous lesson
140:59 - if not if some of this doesn't make
141:01 - sense we've also added a padding so
141:03 - remember the CSS Box model the padding
141:05 - is inside the border the margin is
141:07 - outside the Border um it's a good thing
141:09 - to practice and review from time to time
141:12 - then of course we have we have the
141:14 - description which takes up 50% of the
141:16 - width then we have have the uh Team
141:19 - image which again takes up 50% of the
141:20 - width and the team image also has a
141:23 - border radius over here and then we have
141:25 - these job opportunities so we've uh used
141:28 - an H2 here so you can see we have the
141:30 - description we have uh information about
141:32 - the two boot camps which we have used a
141:34 - list for a list tag and then we have job
141:36 - opportunities we've used an H2 here then
141:38 - we have a div called jobs and in this
141:41 - div we have
141:43 - the three jobs front end developer
141:46 - backend developer and data
141:49 - scientist and finally we have courses
141:53 - programs and the YouTube link in the
141:56 - footer okay uh of course there are some
141:58 - Styles related to the jobs div as well
142:01 - there are some Styles related to each of
142:03 - the jobs we have those are H3 and there
142:06 - are some Styles related to the footer as
142:07 - well okay so very basic HTML and CSS
142:10 - that we applied and we of course
142:12 - deployed it to the cloud using a simple
142:14 - hosting platform where we could upload a
142:16 - zip file
142:18 - all right so that's what we have from
142:20 - the last time so we've opened up the web
142:24 - page we've opened up the project in vs
142:27 - code and we have renamed it to my second
142:29 - web page now the first thing we'll do is
142:31 - try to improve the wireframe in the
142:33 - previous tutorial we first created a
142:35 - wireframe this is what it looked like so
142:37 - it contained this navbar banner and it
142:40 - contained the same sections that we have
142:42 - on the actual page and we use this as a
142:44 - visual reference while creating the page
142:46 - so now we are going to improve that
142:48 - wireframe we're going to make sure that
142:50 - we are covering all of these things a
142:52 - list of jobs in tabula format the
142:54 - application form below the jobs and also
142:57 - maybe the other things will follow not
142:59 - necessarily in the wireframe but when we
143:00 - Implement them and this is something
143:03 - that you'll see as a very common
143:05 - practice in the world of web development
143:07 - this process of improving the design of
143:09 - a web page and then going ahead and
143:11 - implementing it on an already live web
143:13 - page is called iterative development and
143:16 - a website goes through multiple
143:18 - iterations or even web applications so
143:20 - when you look at Jovian we add new
143:21 - features more or less every week and
143:24 - that is how we approach building things
143:26 - so the one approach that you could
143:28 - follow is something called the waterfall
143:29 - approach where you identify all the
143:31 - requirements then you come up with a
143:32 - final design then you do the development
143:34 - for the entire set of requirements at
143:36 - once then you test it and then you
143:38 - maintain it that takes a lot of work and
143:40 - you often end up building a lot of
143:41 - features that nobody might use and
143:43 - missing out on some very important
143:44 - features so another way to think think
143:47 - about web development is to take an
143:48 - iterative approach you should at the
143:51 - very least push something out deploy
143:54 - something that people can use every week
143:57 - or or if possible every single day so
143:59 - whenever you're building a website or a
144:01 - web application you should think okay
144:02 - what can I build in a day that people
144:04 - can start using however limited it is
144:07 - which is what we did the last time and
144:09 - then once people start using it
144:11 - depending on their feedback depending on
144:13 - what else you have in mind and how much
144:15 - time you have try to come up with the
144:17 - second version with a new set of
144:18 - features and repeat that process so
144:21 - iterative development is a very common
144:23 - practice in
144:25 - modern web applications so this is
144:27 - something that you should get used to so
144:30 - there are a couple of changes that we
144:31 - are making today the first thing is to
144:33 - replace the list of job openings with a
144:35 - table and some benefits of the table are
144:39 - they it leads to an improved readability
144:40 - because tables make it easier for people
144:42 - to scan things visually tables also
144:45 - offer better organiz oranization so
144:48 - because organizing them in a table you
144:50 - can also group them by Department
144:51 - location or other relevant criteria
144:54 - later on when we Implement more
144:55 - interesting tables and then tables can
144:58 - also have things like sorting searching
145:00 - filtering Etc which we look at once we
145:02 - look at web application development
145:04 - later in the program apart from the
145:07 - table we'll also add an application form
145:09 - below the table so the form will ask for
145:11 - the users's first name last name or
145:13 - maybe the name as a whole let's just
145:15 - change that to name
145:21 - so the form will ask for whoever is
145:23 - applying the form will ask for the
145:24 - applicant's name email the job that
145:26 - they're applying for their phone number
145:28 - their resume and a cover letter and
145:32 - here's what you can do you can actually
145:33 - start revising the wireframe here itself
145:35 - so you can take this and then create a
145:37 - copy of it and then paste it and then
145:40 - start moving things around for example
145:41 - you could get rid of you could get rid
145:43 - of these and then you could insert a
145:45 - table here so I I could for example go
145:48 - like this and create a table and then I
145:50 - could make some more changes let me
145:52 - change that
145:53 - to
145:58 - Black yeah so I for I could for example
146:01 - create a table here and then into that
146:03 - table I could add various columns like
146:06 - this so here's one column here's a
146:08 - second column here's a third column and
146:12 - then I could start adding rows within
146:13 - the
146:14 - table and then I could maybe start
146:16 - adding information like job title so
146:20 - these would be the column headers and
146:22 - after adding the column headers I can
146:23 - also add some data within those columns
146:26 - so this is how you enhance your
146:27 - wireframe you are visually trying to put
146:29 - together what you want your next version
146:31 - of the wireframe to look like and then
146:34 - you could also go ahead and maybe extend
146:36 - this a little bit so move all this
146:39 - forward let's
146:40 - see let's move all this down and you
146:44 - could then add a application section so
146:46 - you you could add a section
146:49 - called
146:51 - submit your
146:54 - application and then you could go ahead
146:56 - and maybe add uh various input fields
146:59 - for example you could get an input field
147:01 - called name
147:05 - here and put an input box below
147:10 - it and then just create multiple copies
147:13 - of that to create the other input fields
147:16 - and so on and you could add maybe a
147:17 - submit button somewhere at the end right
147:20 - so this is how you enhance a wireframe
147:21 - just create a copy of your existing
147:23 - wireframe and keep adding new things new
147:25 - sections before you go out and start
147:27 - coding now I have already done this so
147:29 - I'm not going to show this entire
147:31 - process to you but I encourage you to
147:33 - just do it all yourself get into the
147:35 - habit of creating quick wireframes
147:36 - before you uh start writing HTML code
147:38 - that will save you a lot of time while
147:40 - coding so here we have added a job
147:42 - opportunities table and you can see that
147:45 - we have a job title location salary and
147:47 - posted on so we have the job titles we
147:49 - have a bunch of locations we have
147:52 - salaries both in Indian rupees and in
147:53 - dollars and then we have a poster on
147:55 - date and below that we have a submit
147:57 - your application form and in this form
148:00 - we ask for the name email phone number
148:02 - and there's a drop down here asking for
148:03 - the position the user has applied to and
148:06 - then there is a cover letter uh there's
148:07 - a box here for submitting a cover letter
148:10 - okay and there's also this check box
148:12 - here that we're asking the user to agree
148:14 - to the terms and conditions which is to
148:16 - be contacted by us or for their resume
148:18 - to be shared within our company and so
148:20 - on and there's a submit button so now we
148:23 - have a clear idea of what we want to
148:24 - build today specifically these are the
148:26 - two sections that we want to work on
148:28 - today and of course we want to make them
148:30 - aesthetically pleasing and then we also
148:32 - want to make some other changes to the
148:34 - site in general so this is the revised
148:36 - wireframe we still have the Navar Banner
148:39 - about section but now we have a job
148:40 - opportunities table and we have a submit
148:43 - your application form and of course we
148:45 - have the footer as well again for
148:47 - personal projects a wireframe is usually
148:49 - enough to plan a website's design and
148:51 - layout but in a professional settings UI
148:53 - developers will often create detailed
148:55 - mockups providing more information on
148:58 - colors fonts and visual elements that
149:00 - you can work uh that you can use while
149:03 - actually coding the web page so as an
149:06 - exercise I encourage you to replicate
149:07 - this wireframe and maybe also add some
149:09 - new sections see if you can add a new
149:11 - section and Implement that while you're
149:13 - working through this lesson but let's
149:15 - come to tables and HTML now tables are a
149:18 - fundamental component of HTML used to
149:21 - display data in a structured Manner and
149:24 - tables are created using a combination
149:25 - of the table TR TD and th tags so there
149:28 - are a bunch of tags that have to come
149:30 - together for you to create a table and
149:32 - tables can be styled using CSS just like
149:34 - all other HTML tags to add borders
149:36 - backgrounds and other visual elements
149:39 - tables can also be manipulated to merge
149:41 - cells so if you see here it's not just a
149:43 - simple table with rows and columns you
149:45 - can see that these two are merged and
149:47 - then these two are this is vertically
149:48 - merged as well so you can do lots of
149:50 - interesting layouts with it using
149:52 - tables but I do want to mention that TBL
149:55 - should be used appropriately don't put
149:57 - everything within a table you might get
149:59 - this temptation to just use a table for
150:01 - the entire web page to lay things out
150:04 - but that's not a great idea you should
150:05 - be using CSS for layout and tables
150:07 - should be used only when you want to
150:08 - show a grid of data which fits in neatly
150:11 - into a table so A good rule of thumb is
150:14 - if something can be represented using a
150:16 - sprad sheeet then a table is a good way
150:18 - to represent it in HTML okay so a table
150:22 - is created using the table TR and TD
150:24 - tags the table tag is used to create a
150:27 - table in HTML and all other table
150:29 - related tags are nested inside this tag
150:32 - then the TR tag is used to create a
150:34 - table row and each row contains one or
150:37 - more table cells and the table cells are
150:40 - created using the th tag and the TD tag
150:43 - okay so let's see these an action and
150:45 - it'll start to to make a lot more sense
150:47 - so the first thing I'm going to do here
150:49 - is go down and find the section job
150:54 - opportunities and I'm going to remove
150:56 - this div containing job
150:58 - opportunities and if I just reload here
151:00 - you can see that now we no longer have
151:02 - job opportunities on this page let me
151:04 - just zoom in a little
151:05 - further okay now let's start adding a
151:08 - table here so let me add a
151:13 - table okay and let me save that and you
151:17 - can see nothing really happened some
151:18 - additional space got added but the first
151:20 - thing I'll do is I'll add a row within
151:22 - the table so a row is added using the TR
151:25 - tag and let me save that and still
151:28 - nothing happens now let me actually put
151:31 - some headings so let me create a heading
151:35 - called heading one so I'm going to
151:36 - create two column headings one called
151:38 - heading one and one called heading two
151:39 - and these are created using
151:41 - the pH tag okay so now you you can see
151:46 - over here in the corner we have heading
151:48 - one and heading two and normally you
151:51 - might want a table with a border so one
151:53 - quick way to add a border for a table is
151:55 - just by specifying the Border attribute
151:58 - okay now once I've added a border you
152:00 - can see that there is a border around
152:02 - the entire table and then there is a
152:04 - border around heading one and there is a
152:06 - border around heading two as well okay
152:09 - let's add more rows within the table so
152:11 - let's add a TR now let me add
152:15 - another
152:16 - element so now I'm no longer adding
152:18 - headings now I'm actually now I'm adding
152:20 - actual data elements okay so I'm just
152:23 - going to call it data one for now and TD
152:26 - data
152:27 - 2 okay and let me just replicate that
152:31 - for one more row TD data
152:35 - 3 and TD data
152:39 - 4 all right so now we've created a table
152:42 - successfully I hope you can see it you
152:45 - it's right here in the bottom left
152:48 - corner of the web page and now now that
152:51 - you've understood how tables work we
152:53 - have this table tag and in this table
152:56 - tag we have a row this is the header row
152:59 - and that contains these th tags so th is
153:01 - header then we have these uh more rows
153:04 - and in these rows we have the TD
153:07 - and TD creates normal data you can see
153:11 - the difference between the heading and
153:12 - the normal data is that the heading is
153:13 - bold and if the table was bigger you
153:15 - would also notice that the headings are
153:17 - centered but the normal data is left
153:19 - aligned so that is a difference but it's
153:21 - also semantically informing the browser
153:23 - what is the heading and what is just
153:26 - data within the table it is also used by
153:27 - screen readers and search engines to
153:29 - identify the structure of the table okay
153:31 - now encourage you to experiment with the
153:34 - table what happens if for example I put
153:36 - an additional column here let me just
153:38 - save that and you can see that a new
153:40 - column got added here
153:43 - but they you don't have that same column
153:45 - here available and that is why you have
153:47 - empty space here or what happens if
153:49 - let's say you have like a stray TD
153:52 - somewhere so let's say you have this
153:54 - data five somewhere what what does that
153:56 - do so that creates a new row even though
153:58 - you do not have a proper TR so even if
154:01 - you do not have a perfect structure of
154:03 - table and then TR and then TH or TD most
154:07 - browsers will still render your tables
154:09 - but it's a good idea to M maintain the
154:11 - proper structure while building a table
154:13 - okay so that's how you build a table in
154:15 - HTM fairly straightforward okay so let's
154:18 - maybe go ahead at this point and let us
154:23 - add this data into a table so we want to
154:26 - get the job title we want to get the
154:28 - location we want to get the salary and
154:30 - we want to get when the job was posted
154:32 - now here's a quick tip for you whenever
154:34 - you're building HTML tables it's always
154:37 - a good idea to First maybe create a
154:38 - spreadsheet like I have done here I've
154:40 - created the spreadsheet let me Zoom that
154:42 - in a bit and I am simply going to now
154:45 - use this spreadsheet as a reference for
154:47 - creating the table and I can also just
154:49 - copy paste the data very easily from the
154:51 - spreadsheet onto the table so let me
154:54 - just go in here and copy the table
154:56 - headers and now I am going to paste in
155:00 - these
155:06 - headers so my first row is going to be a
155:09 - row of headers and that is going to
155:11 - contain these th
155:13 - tags so now we have a th for
155:17 - for job title we have a th for location
155:22 - and we have a TH or table header for
155:25 - salary and finally we have a TH or table
155:27 - header for when the job was posted great
155:31 - now let's start adding the jobs one by
155:33 - one so once again I'm going to go in and
155:35 - copy this front end developer bangaluru
155:37 - I'm going to copy the salary and the
155:39 - posted on date as well and let me get
155:41 - rid of these and paste that in here
155:44 - let's bring that into new
155:47 - lines over
155:51 - here okay and let's put in a TD
155:55 - here so again wrap the data inside a TD
155:59 - and you don't just have to put simple
156:01 - text you can put entire lists you can
156:03 - put paragraphs you can put whatever you
156:04 - want you can put images into a table but
156:06 - for now we'll keep things simple we are
156:08 - just going to put some normal text into
156:10 - each table cell so each box that you see
156:13 - within the table is called a table cell
156:14 - so that is something that you will
156:16 - notice in the terminology especially if
156:18 - you're searching for questions online
156:21 - okay so that is the second job role let
156:23 - me just grab this and create a few
156:26 - copies of this and in fact what I'm
156:29 - going to do is also give it a couple of
156:31 - classes so I'm going to give it the
156:33 - class I'm going to give the entire table
156:35 - an
156:38 - ID jobs
156:41 - stable and I'm going to give this a
156:44 - class jobs table
156:47 - header and or jobs header row let's just
156:51 - call it jobs header
156:54 - row and let's give this a
156:58 - class jobs data
157:01 - row okay and let's create copies of this
157:04 - so we are adding the classes because
157:06 - we're going to use them later for
157:08 - styling now we have the jobs header row
157:10 - and then we have jobs data row let's add
157:12 - the second role full stack
157:14 - developer I believe the second role is
157:18 - in New Delhi
157:20 - India
157:22 - and the salary here is
157:24 - [Music]
157:26 - 15 let's see and the Feb 1 2023 is when
157:30 - it was
157:32 - posted let's create a couple more copies
157:35 - for the next couple of
157:38 - rows okay we have a data
157:44 - scientist this is is in San
157:47 - Francisco
157:50 - USA and this is I believe
157:56 - 175,000 yep and this was posted in
157:59 - December 22 December 22nd
158:02 - 2022 and finally let's get get that last
158:05 - role in here as well ml
158:08 - engineer and this one is a remote
158:13 - job and this one is is
158:17 - $80,000 and I believe this was posted on
158:20 - September
158:21 - 19th okay so that's our table we have a
158:25 - table inside the main div and then the
158:28 - table has a border and the table has the
158:30 - ID jobs table then we have these rows
158:32 - and the first row is the jobs header row
158:34 - because it is for the header we style
158:36 - headers separately and then the rest of
158:38 - the rows are data rows and we are using
158:40 - TDS inside instead of pH which is what
158:43 - is used for the header and let's save
158:45 - that and let's reload the page and you
158:47 - can see here now we have the job title
158:48 - location salary posted on and we have
158:51 - all the information here that we had in
158:53 - our spreadsheet so this is roughly what
158:55 - our table looks like we do have borders
158:57 - but the borders are not very pretty so
159:00 - as an exercise I would encourage you to
159:02 - try adding more columns to the jobs
159:04 - table for example requirements and
159:06 - responsibilities try including
159:07 - paragraphs or lists within table cells
159:10 - and as you do so you might need to VAR
159:13 - vary the widths of different columns you
159:15 - might need to say that the requirements
159:16 - column should be at least 30% of the
159:18 - table's width and so on and that is
159:20 - something that you can add by following
159:23 - this tutorial so sometimes depending on
159:25 - the kind of data you have you may need
159:27 - to vary the widths and that is all
159:29 - something you can control using CSS or
159:31 - just using normal table
159:34 - attributes but let's talk about styling
159:36 - HTML tables styling HTML tables with CSS
159:39 - can greatly improve the visual appeal
159:41 - and the readability of a website so here
159:44 - for example is the careers website at
159:47 - stripe which is a payment processor
159:51 - company and you can see that they're
159:53 - also using a table but their table
159:55 - clearly looks a lot better than our
159:57 - table so let's try and make our table
160:00 - look a little better not exactly like
160:03 - this but we'll try and come close so
160:06 - here's what we're going to do we can use
160:08 - Simple CSS properties that we already
160:10 - know to make some changes to our table
160:13 - one we'll add borders around the table T
160:15 - and table cells using CSS not using the
160:18 - Border property or the Border attribute
160:20 - because CSS allows us to control other
160:23 - things like color then we will also make
160:26 - the table full width on the page and
160:28 - then we'll align the headers we'll left
160:31 - align the headers headers are Central by
160:33 - default we left align them and we'll
160:35 - also show a different background color
160:36 - for headers and we'll add alternate
160:38 - colors to the rows so here for example
160:41 - you can see that rows have alternate
160:43 - colors so we'll add this kind of an
160:44 - alternate color pattern to our table as
160:46 - well okay so let's try doing this step
160:50 - by step so the first thing I'm going to
160:52 - do is grab the ID jobs table and I'm
160:55 - going to style it by putting some
160:57 - content into the styles.css file and
161:00 - remember that the styles.css file is
161:02 - linked here using a link tag from the
161:04 - head tag of the page that is how you
161:06 - connect a CSS file to apply the Styles
161:09 - into an HTML file okay so let me open up
161:12 - styles.css and I am going to come down
161:15 - down here to let's see this region over
161:19 - here so I think we don't need this dot
161:21 - location this was there in the previous
161:23 - page but we don't have
161:26 - location with this class anymore so we
161:28 - don't need that let's put in the table
161:31 - let's select the jobs table so I'm
161:32 - selecting it by ID so I'm using the hash
161:35 - or pound character to select the jobs
161:38 - table by its ID jobs hyphen table and
161:40 - let me set its width first to
161:43 - 100% so what I wanted to do is take up
161:47 - the entire width of the parent div okay
161:49 - not the entire width of the screen but
161:51 - the entire width of the parent div you
161:53 - can see that we have this jobs we have
161:56 - this jobs div over here and this jobs
161:59 - div is set to have a Max width of 800
162:02 - pixels and it has a margin of zero Auto
162:05 - that is what centers it on the page so
162:07 - there's this outer jobs div and inside
162:10 - it we have this jobs table which is now
162:12 - taking up the entire width of the parent
162:14 - okay so that is one way to specify
162:16 - widths apart from pixels you can specify
162:18 - it in
162:19 - percentages okay that's great what next
162:22 - well let us now add a border so let us
162:25 - remove the border from here
162:28 - first and let us first look at that how
162:32 - it looks okay this is what it looks like
162:33 - let's add a border here so border one
162:37 - pixel solid border there are various
162:40 - border Styles solid means you do not
162:42 - want any dashes or anything in the
162:43 - Border it's a complete continuous
162:45 - straight line and let's make it gray
162:48 - let's not make it black so that's the
162:51 - Border let's see okay so now we have a
162:53 - border for the table but apart from the
162:56 - table we also need to add a border for
162:59 - each cell so I'm just going to say jobs
163:02 - table or actually I'm just going to
163:04 - select the cells let's see so we have we
163:07 - have jobs header row so let's get the
163:12 - header row using jobs header row and and
163:15 - this time I'm using the dot selector
163:18 - from CSS not the hash selector because
163:20 - the hash selector is used to select by
163:22 - ID but the dot selector is used to
163:24 - select by class and this T this TR or
163:28 - this row here has the class jobs header
163:30 - row that is why we using the dot
163:33 - selector okay and I am going to give it
163:36 - a border as well border 1 PX solid
163:41 - three
163:44 - and
163:46 - oops this is not doing it so if you
163:49 - notice here the TR over here contains
163:52 - the class jobs header row but what we
163:55 - want is a border around each cell not
163:58 - around the entire row so that is where
164:00 - we have to select that th cell inside
164:03 - the TR of the class jobs header row and
164:06 - you can do it very simply by simply
164:08 - writing the tag that you want to select
164:11 - so now what we've done is we are saying
164:14 - select using the class jobs header row
164:16 - so that is going to select the row that
164:18 - is going to select this row and then we
164:21 - seeing inside the jobs header row class
164:24 - inside an element with the class jobs
164:25 - header row look for a th look for a
164:29 - table header cell and apply this border
164:32 - to it and now if I reload you can see
164:35 - that now our table headers have these
164:37 - borders okay I hope you can see this our
164:39 - table headers now have these borders
164:42 - let's also add borders to the table
164:44 - cells so I'm just going to to grab the
164:46 - data row class so jobs data row is the
164:49 - class for the row containing the jobs
164:52 - data and now we have the TD or the table
164:56 - cells over here which contain the actual
164:58 - data and I'm going to set border 1px
165:03 - solid
165:05 - gray okay and let's set that as well so
165:09 - now once again we have borders now but
165:10 - now these borders have been added using
165:12 - CSS which is some what nicer we have
165:16 - more control now the next thing I want
165:18 - to show you is how to get rid of these
165:20 - double borders you can see that we have
165:21 - these double borders over here
165:24 - so we have the salary posted on and then
165:27 - we have this border around it and then
165:28 - another outer border around the table
165:31 - the way we can do this and this is
165:33 - something that you just have to look up
165:35 - is using the Border collapse
165:38 - property okay so border collapse
165:42 - collapse you will almost always have to
165:44 - put this on on a table if you're just
165:46 - styling from uh styling on your own so
165:48 - I'm just going to put border collapse
165:49 - collapse and this is something that you
165:51 - could looked up you could have looked up
165:53 - how do I get rid of the double Border in
165:56 - a table and this is what you'll see okay
165:59 - so this is nice now I have the border
166:01 - collaps now the border is looking nice
166:03 - next let us maybe space things out a
166:05 - little bit the data is very close to the
166:07 - edges it would be nice if there was some
166:09 - space around it so here's what we can do
166:13 - we can go in in and we can put in put in
166:16 - a padding here so let me put in a
166:18 - padding of 8 pixels so remember the CSS
166:21 - Box model the padding is inside the
166:23 - Border okay let me add a padding of 8
166:26 - pixels in the data as well so both of
166:29 - these will add space inside the border
166:32 - so you can see here inside the border of
166:34 - a cell we have added additional space if
166:37 - we had margin on the other hand that
166:38 - space would get added outside the Border
166:41 - okay so keep the CSS Box model in mind
166:44 - you can always just search search online
166:45 - CSS Box model whenever you are unsure
166:49 - how this works okay so we have the
166:51 - content then we have the padding uh then
166:54 - we have the border and then we have the
166:55 - margin outside it all right so this is
166:59 - looking pretty good let us now maybe add
167:01 - a background color to yeah let's add a
167:05 - background color to the header so
167:06 - background color let's see I am thinking
167:11 - of the
167:13 - color let's maybe just add the color
167:17 - Alice blue for now one of the named
167:20 - colors okay nice we have a nice
167:22 - background color for the header I hope
167:24 - you can see it it's very light um we are
167:27 - not going to use very strong color see
167:28 - what happens is if you use a proper
167:30 - strong color like this your text becomes
167:33 - unreadable that is why you always want
167:35 - to use very muted very light colors and
167:37 - we'll talk a lot about color guidelines
167:40 - later down the line okay this is looking
167:43 - good let's also add a back background
167:45 - color now for each of these alternate
167:48 - rows so we don't want to add a
167:49 - background color for every single row we
167:51 - want to add it for alternate rows and
167:54 - this can be done using again using a
167:56 - special property now this is the thing
167:58 - about CSS that you have to look these
168:01 - look up these special properties from
168:02 - time to time there's no way to remember
168:04 - them I just looked it up a few hours ago
168:06 - that's why I can partially remember so
168:09 - you can say TD and in the TD um I'm
168:13 - actually just going to look it up over
168:16 - here in the TD
168:19 - or actually not in the TD I want to add
168:21 - this for the header row so I want to get
168:25 - the
168:26 - rows from the
168:28 - table which are the nth child where n is
168:32 - odd okay and I'll just show you what
168:35 - this does first and then you will
168:39 - see yeah and then you will see exactly
168:43 - uh then we'll discuss how it works
168:49 - okay let me make that job
168:54 - stable yeah so here's what we've done we
168:57 - have said job table so select the job
169:00 - stable by
169:01 - ID inside the jobs table select a TR a
169:05 - row okay so we have the jobs table here
169:07 - with the ID jobs table inside it we want
169:10 - to select a row so each TR represents a
169:13 - row but we only want to select the rows
169:18 - which are the nth child okay where n is
169:23 - odd so all the odd rows which selects a
169:26 - full stack developer row and which
169:28 - selects the ml engineer row so all the
169:30 - odd rows get selected by putting this
169:32 - colon nth child odd and then we are
169:35 - giving them the background color of
169:37 - ghost white okay again if you see
169:40 - carefully here we have of course a color
169:42 - background color for the header that we
169:44 - have specified IED then we have this
169:46 - background white color for this first
169:48 - row which is row number two technically
169:51 - and then we have for the third row New
169:53 - Delhi India we have another background
169:55 - color okay uh it is very light but I
169:57 - hope you can see it and we've selected
169:59 - alternate rows using the nth child and
170:02 - how do you know this well you just have
170:03 - to look it up I just look it up every
170:05 - time so I don't worry about it too much
170:07 - okay great one last thing we want to do
170:10 - is maybe this is looking a bit odd that
170:12 - the headers are centered so let's Maybe
170:15 - put the headers on the left so I'm just
170:17 - going to say text align
170:22 - left okay now the data is now the
170:25 - headers are also left align all right so
170:28 - I think we've with that we've
170:29 - implemented everything that we set out
170:31 - to implement we added borders around the
170:33 - table we made the table full width we
170:36 - left align the headers we are showing a
170:39 - different background color for the
170:40 - headers we are using Alice blue and we
170:42 - are using alternate colors for the the
170:45 - rows using the nth child e using the nth
170:48 - child odd property okay so that is the
170:51 - CSS that we need to style our table not
170:53 - a lot it's about 10 12 lines but it look
170:56 - it makes a table look rather nice I
170:58 - would think okay great so that is how
171:02 - you style tables with CSS and you can
171:05 - also verify if
171:06 - I resize this that the table remains in
171:09 - the centered and it occupies the full
171:11 - width of the parent component okay so
171:15 - that's
171:16 - tables now I would encourage you to
171:19 - maybe also learn a little more about
171:21 - styling of the rows and columns so there
171:22 - is this tutorial on HTML table styling
171:25 - you can have these zebra stripes which
171:27 - is what we've implemented or you can
171:28 - also stripe you can also have colors for
171:31 - the different columns if you want again
171:33 - using nth child and you can also combine
171:37 - vertical and horizontal stripes so you
171:38 - have a lot of different ways in which
171:40 - you can combine of course you can do
171:42 - tables you can have tables Without
171:43 - Borders so one change for example we
171:46 - might make is we may not want the
171:48 - borders between the inner rows so we can
171:51 - come in here and we can say that for the
171:54 - TD for these data cells we don't want a
171:57 - border bottom we just want a border
171:59 - right okay and what that's going to do
172:02 - is that's going to remove this border
172:04 - bottom because we already have
172:05 - alternating colors and that's just going
172:07 - to keep this border on the right all
172:10 - right um yeah so that is how you style
172:13 - tables in in
172:15 - CSS so moving right along we'll also
172:19 - talk a little bit about merging rows and
172:20 - Columns of data in tables now you can
172:23 - use you can create all sorts of
172:25 - interesting tables in HTML what you can
172:27 - do is you can merge a bunch of data
172:29 - cells to look like a single cell either
172:32 - vertically or horizontally so what would
172:35 - be nice for us is to maybe try that with
172:39 - one of the columns here so let's do this
172:41 - let's get the location column and let's
172:43 - have the location column split into two
172:45 - columns City and Country okay so here's
172:48 - how I'm going to do it I'm going to have
172:50 - sub columns under location called City
172:52 - and Country so let's come back here into
172:54 - the table definition and we have this
172:57 - first
172:58 - row we have this first row and this
173:01 - first row now contains a location so
173:04 - that's great let me add a second header
173:05 - row so let's add TR and here again I'm
173:09 - going to add let me keep that class here
173:12 - as well
173:16 - okay now here I'm going to add a couple
173:18 - of headers one is called City and the
173:21 - second is called
173:24 - country all right and what does that do
173:28 - well as you might expect that add the
173:29 - second row of headers but now in this
173:32 - case the second row of headers
173:34 - says City and Country below job title
173:37 - and location that's not what we want
173:39 - what we want is to show to make this
173:41 - show up under location itself so here
173:44 - I'm going to use two special attributes
173:47 - the first is called call span or row
173:49 - span okay so we want the job title to
173:52 - actually span two rows so row span
173:54 - equals
173:56 - two and now what this does is the job
173:59 - title the job title
174:02 - header is now taking up two rows of data
174:06 - okay we we've simply added the property
174:08 - row span equal to two the attribute and
174:11 - that ensures that job title take takes
174:12 - up two rows of data whereas location
174:15 - salary posted on are still taking up
174:17 - only one row of
174:19 - data now we want the location to take up
174:22 - two columns so that City and Country
174:24 - show up under location so we can add a
174:27 - call span and we can say call span equal
174:30 - to
174:32 - 2 for
174:34 - location and let's reload that and now
174:37 - you see that the location cell takes up
174:40 - two columns so that's why the city and
174:43 - Country headers show up under location
174:45 - because each of them take up only one
174:46 - column each and now let's go ahead and
174:48 - finish this Heading by actually giving
174:51 - row span of two to salary and posted on
174:53 - as well so let's set row span equal to
174:57 - two for
174:58 - salary and let us set row span equal to
175:03 - two for posted on okay so now we have
175:07 - the job title which spans two columns
175:10 - then we have the location which spans
175:12 - two rows uh sorry now we have the job
175:15 - title which spans two rows then we have
175:17 - the location which spans two columns but
175:19 - only one row then we have the salary
175:22 - which spans two rows and then we have
175:23 - posted on which spans two rows however
175:27 - we have now also added the second row in
175:30 - which we have the city and Country both
175:31 - of which only span one row and one
175:33 - column and because we have these other
175:36 - values spanning two rows they
175:37 - automatically get adjusted under
175:39 - location okay so this can be complicated
175:43 - at first you're not going to get it just
175:44 - by watching so practice it try watching
175:47 - the video re-watching the video and
175:49 - typing it out step by step and it'll
175:51 - start to make a lot of sense okay now
175:54 - finally let's also split up the data
175:56 - right now you can see that the data is a
175:57 - bit messed up so let us split up the
175:58 - country and city for the data so I'm
176:01 - going to come into the first row here
176:03 - First Data row and add
176:05 - another
176:06 - column so now we have bangaluru India as
176:09 - the country and city and Country let's
176:11 - do that for New Delhi India as well so
176:13 - let's let's come in and
176:17 - add
176:19 - India okay that's good let's do this for
176:22 - San Francisco USA as well again let's
176:24 - extract out USA and put it in a separate
176:26 - table
176:28 - cell all right so now we have bangaluru
176:30 - India New Delhi India San Francisco USA
176:33 - now remote creates a problem for us
176:35 - because it's neither a city nor a
176:37 - country so how about we expand remote to
176:41 - take up two cells so let us simply come
176:45 - in here and let us sell call span equal
176:47 - to two for remote and let's reload that
176:51 - and now suddenly you can see that we
176:53 - have the job title and then we have the
176:55 - location and under location we have City
176:57 - and Country and then we have the salary
176:59 - and posted on and of course City and
177:01 - country are split properly except in the
177:03 - case where it is remote where it is just
177:05 - a single cell okay so this is how you
177:07 - create a more complex table by merging
177:09 - rows and columns using the row span and
177:11 - call span attributes now that we have
177:14 - this slightly more complex table I think
177:18 - it might be better to maybe bring these
177:20 - headings back into the center so I'm
177:22 - just going to go in here and I'm going
177:24 - to remove this text align left or I'm
177:26 - just going to put in text align center
177:28 - for the headings so under the jobs
177:30 - header Row for the th which is the
177:33 - header cells I'm going to Center the
177:36 - headings so I've centered the headings
177:37 - right here perfect and I think I'm also
177:40 - going to bring back the separators
177:42 - because here this line ends abrupt ly so
177:44 - I'm just going to come in here and
177:46 - change the border right for the TD or
177:48 - the data cell to border so that the
177:50 - Border shows up on all sides not just on
177:52 - the right okay so now this is our job
177:54 - opportunities table now it contains the
177:56 - job title it contains the location split
177:58 - by City And Country it contains the
178:00 - salary and it contains the posted on
178:02 - information as well okay so now our
178:05 - table is looking very nice we have
178:07 - simply added some row span and call span
178:10 - properties and we've added some updated
178:13 - some CSS to make it look something like
178:16 - this exactly what we are looking for now
178:19 - you can again check out this resource to
178:21 - experiment with the rose span and call
178:22 - span property to become familiar with
178:24 - CSS and HTML you have to practice you
178:27 - have to experiment you have to break
178:29 - things and only then you understand how
178:31 - things work okay so here's one exercise
178:34 - for you create a layout on paper which
178:36 - contains different merged cells and
178:39 - columns and then put in some sample data
178:41 - into that layout and try to replicate it
178:44 - using HTML and CSS tables the next thing
178:47 - that we're going to talk about is text
178:49 - Styles in CSS now that we've set up our
178:52 - table uh one thing that we also want to
178:54 - do is we want to improve the Aesthetics
178:56 - of this page and there are two parts to
178:58 - Aesthetics there is the text and then
178:59 - there is the colors as well right so
179:01 - let's talk about text Styles in CSS now
179:04 - CSS provides a wide range of text
179:07 - styling properties and they allow you to
179:09 - change the appearance of text in your
179:11 - web pages and these properties can be
179:13 - used to modify the font the size the
179:16 - color spacing and other visual aspects
179:18 - of your text specifically you can use
179:22 - external fonts within your HTML
179:26 - Pages using C CSS okay now why do you
179:30 - want why might you want to use external
179:31 - fonts there are some inbuilt fonts that
179:34 - most browsers come with but that differs
179:37 - from browser to browser and the
179:38 - selection is very small when you're
179:40 - working for a company the company may
179:41 - have its own design principles may have
179:44 - its own design guidelines may have its
179:46 - own fonts that it is using and you may
179:48 - want to incorporate those fonts into the
179:50 - website and that is what you use
179:52 - external fonts for
179:54 - so external fonts make your website
179:57 - stand out and look more unique compared
180:00 - to other websites on the internet and
180:02 - you can add external fonts to your
180:03 - website using the Google fonts web uh
180:06 - using the Google fonts tool okay so
180:09 - let's visit Google fonts and let's check
180:11 - out some fonts okay so looks like we
180:13 - have a bunch of fairly interesting fonts
180:15 - here and of course there are fonts in
180:17 - all kinds of languages now uh you can
180:20 - click on any one font for example I'm
180:22 - clicking on
180:24 - Roboto and then once you've clicked on a
180:27 - font let me just reset the state over
180:29 - here once you've clicked on a font you
180:32 - can then select some styles of a font so
180:34 - each font can have many styles so you
180:36 - can see here we have the thin font we
180:38 - have the thin italic font we have a
180:40 - bunch of different styles from thin to
180:42 - thick let me just switch to light mode
180:45 - yeah so we have a bunch of styles here
180:47 - and you can then select a bunch of
180:49 - styles so you can select which Styles
180:52 - you want to use in your website for
180:54 - example let us use the regular style let
180:59 - us use the regular italic style let us
181:01 - use the Bold style let us use the black
181:06 - style and let us use the medium style
181:07 - okay so I've selected a bunch of styles
181:09 - for the Roboto font this font is
181:11 - something that I want to use on my page
181:14 - and then there's a button here called
181:15 - view selected families on the top right
181:18 - and now you can simply copy this code
181:21 - over here so there's a bunch of code
181:22 - here that you can copy and paste into
181:25 - the head of your HTML page to use these
181:28 - fonts within your site okay so that's
181:33 - what we'll do in just a second but the
181:35 - basic idea is if you want to use
181:37 - external fonts first you choose a font
181:39 - from Google fonts then you add the font
181:42 - to your CSS using the link
181:45 - tag and we're going to look at that in
181:47 - just a second then you use the font
181:49 - within your CSS so let's say you've
181:51 - Incorporated the Roboto font now to
181:53 - actually use it on the page for a
181:55 - particular tag you can select that tag
181:57 - and within your CSS file you can simply
181:59 - specify the font family Roboto or
182:02 - whatever font you have downloaded or
182:04 - included on your site and that is how
182:07 - you can set fonts for various elements
182:09 - on the page okay so that is how you use
182:11 - external fonts you find something from
182:14 - Google fonts add it to your page and
182:16 - then just add some CSS
182:19 - properties now it is common practice to
182:21 - use one font family for all the head
182:24 - headings and use a different font family
182:26 - for all the body text and at Jovian we
182:30 - use the inter font so this is the inter
182:33 - font right here uh which looks pretty
182:35 - similar to Roboto but has some small
182:37 - differences so we use the inter font for
182:40 - headings and we use the Roboto font
182:42 - which we already looked at that for
182:44 - text within our web page so let's grab a
182:48 - bunch of styles from the inter font and
182:50 - the Roboto font and then include them on
182:52 - our web page okay so here is the inter
182:54 - font and on the inter font I'm going to
182:56 - select let's see I'm going to select the
182:59 - regular I'm going to select the medium
183:01 - I'm going to select semi bold bold all
183:04 - of these so those are all the styles
183:06 - that I selected from the inter font and
183:09 - from the Roboto font I have regular
183:10 - medium bold all right so now we have
183:13 - styles from Roboto and we have styles
183:16 - from inter and now I can go in here and
183:19 - copy all this so if You observe this
183:21 - link tag over here it contains
183:23 - information about which fonts we want to
183:24 - include in our page and then I can come
183:28 - back into my HTML page
183:31 - index.html come up into the head and
183:35 - before my CSS file I'm going to paste
183:38 - all these link tags okay so just to show
183:41 - you what that looks like it it looks
183:43 - like we have added a link tag called
183:45 - preconnect and two of these preconnect
183:49 - tags one goes to Google apis one goes to
183:52 - gstatic not something we need to worry
183:54 - about we just have to paste it in but
183:57 - here is the interesting thing we have
183:58 - this link tag which contains the link to
184:01 - Google fonts and it contains these font
184:04 - families inter and Roboto so we have
184:07 - these font families and these font
184:10 - families are included as a stylesheet
184:12 - okay and in in each of these font
184:13 - familyes various weights are also
184:15 - included so you can actually go in and
184:17 - edit this URL slightly in case you want
184:19 - to include different weights but I'm
184:21 - just going to save this now and at this
184:23 - point the fonts have been included on
184:25 - our page okay so if I reload the page
184:28 - you can see that nothing has happened
184:30 - yet because I've simply included the
184:32 - font right now the next thing I need to
184:34 - do is actually use this font on the page
184:37 - and that is something that we're going
184:38 - to do in the CSS file okay how do we do
184:42 - it well
184:44 - we need to add the font family for the
184:47 - body and then we also need to add the
184:49 - font family for the headers let's do
184:52 - that first I'm going to add the font
184:53 - family for the body so let me change
184:55 - this to font
184:57 - family
185:01 - Roboto okay so what we often do is we
185:04 - specify a font family for the body but
185:07 - in case this font was not loaded
185:09 - properly in case the request failed or
185:11 - something we also specify a backup as
185:13 - one of the default font families from
185:15 - that are already present in CSS so in
185:17 - this case the backup is Sans serif okay
185:20 - then I am going to just reload the page
185:23 - after saving this and you can see that
185:26 - there was a small change in the font so
185:28 - if I disable this and reload you can see
185:31 - that the font looks different and if I
185:33 - enable this and reload you can see that
185:35 - the font looks different and if I remove
185:39 - Roboto you can see that font looks
185:41 - slightly different it's a very slight
185:43 - different
185:43 - all of these fonts are very similar
185:45 - often but Roboto is what our design team
185:48 - has told us to use so that's what we
185:49 - going to use for our body okay great
185:53 - next let us set a different font inter
185:55 - for the headers so let's select H1 H2 H3
185:58 - so you can also select multiple tags
186:00 - like this using commas so H1 to H6 we're
186:04 - going to apply this style to all of them
186:06 - and let us set font
186:08 - family
186:10 - enter and let us set the backup as
186:12 - sanserif
186:14 - okay and let's reload and now you can
186:16 - see that again there was a slight
186:19 - change if
186:21 - I show you so this is without the inter
186:24 - font
186:25 - family and this is with the inter font
186:28 - family okay slight changes but it looks
186:30 - on brand it looks closer to what we have
186:32 - Elsewhere on Jan all right so that is
186:35 - how you use external fonts now there are
186:38 - thousands of fonts available on the
186:40 - internet and you should try to pick
186:42 - simple leg fonts for a good user
186:44 - experience otherwise you might run into
186:46 - issues where people are not able to
186:48 - actually read what's on your site even
186:50 - though it looks pretty so check out this
186:53 - link to explore some other font pairings
186:56 - so a header and a body font pairing is
186:59 - often called uh is
187:01 - often so there are many header and body
187:03 - font pairings that people have created
187:05 - by looking at Google fonts for example
187:07 - Calbert and acumine so this is a good
187:12 - combination
187:14 - yeah
187:16 - calart calart and Acumen is a good font
187:19 - combination monster art and corer is a
187:21 - good font combination but obviously it
187:22 - looks very different from what we have
187:25 - then we have a bunch of these These are
187:26 - serif fonts these are not Sans serif uh
187:29 - and we have these more interesting fonts
187:31 - we have some fairly nice cursive looking
187:33 - fonts so depending on what you want you
187:35 - can use various fonts on your web page
187:38 - and I encourage you to experiment but
187:40 - also be conservative stick to some of
187:42 - the more standard types so that people
187:43 - can actually understand what's on your
187:46 - page now apart from the font of course
187:48 - there are many other text styles that
187:50 - CSS also offers and we're just going to
187:53 - run through them very quickly we're not
187:54 - going to cover everything necessarily
187:56 - but uh I encourage you to explore these
187:58 - and experiment with these as you are
188:00 - working through the lesson so the first
188:02 - is font family this is something that
188:04 - we've already looked at it select it
188:06 - sets the font family of the selected
188:07 - text we set a font family for the body
188:10 - and then we overr that font family so we
188:14 - set a font family for the headers as
188:15 - well and the specific setting for
188:18 - headers will override the setting from
188:19 - the body which is applied by
188:22 - default then we have a font size so we
188:25 - can actually go in into the body and we
188:27 - can change the default font size so
188:28 - let's say I set the font size to 24
188:31 - pixels and reload the page you can see
188:33 - that all the fonts have become slightly
188:35 - bigger um I'm going to keep it to what
188:38 - it was earlier the
188:40 - default now there are many ways to spe
188:43 - specify sizes and we'll look at those as
188:44 - well then we have the font weight so we
188:48 - have a bunch of properties that we can
188:50 - use to set the weight or the thickness
188:51 - of the font so I can show you here in
188:53 - terms of the body so if I set font
188:58 - weight to
189:01 - 400 that's basically the regular font
189:04 - weight but I can set it to 600 and then
189:07 - it'll be slightly thicker and I think we
189:10 - included a bunch of other font weights
189:11 - as well let's see we also included 500
189:14 - 700 and 900 so let me select
189:17 - 700 okay that's about the same then
189:20 - let's select 900 that's really thick uh
189:24 - we also have 500 which is like a medium
189:26 - weight so that's a less less thick so
189:28 - depending on what you want to convey how
189:31 - prominent you want the text to be you
189:32 - can set a font weight and 400 is the
189:34 - default but you can set set a bunch of
189:36 - other font weights as well okay and we
189:39 - look at a few examples of font
189:41 - weight then then we have the text align
189:45 - property so the text align of course is
189:47 - used to do a center alignment left
189:49 - alignment right alignment so you could
189:51 - say for example text align we've already
189:54 - done this here we've done H1 text align
189:56 - Center we could have changed this to
189:58 - text align right and then the text would
190:00 - be right aligned we could set it to
190:02 - Center again and that would be centered
190:05 - again so alignment is just left right
190:07 - center there's also an alignment called
190:09 - justify which is often used in text so
190:12 - we you say text align justify what that
190:16 - does is you see this empty space at the
190:18 - end of the line it makes sure that all
190:19 - line there are no empty spaces at the
190:21 - end of a line and all the SPAC is
190:23 - distributed between the
190:25 - words so you can see now I set text line
190:28 - justify for the body and all the space
190:30 - is now added between the words this is
190:32 - not very readable so it's generally
190:34 - avoided unless you have to ensure that
190:37 - there is no space at the end of the text
190:39 - so I wouldn't do it but it's it's an
190:41 - option for you so you have left Aline
190:43 - Center align right align Justified all
190:45 - of
190:45 - that okay then you have the font style
190:49 - so the font style is used to maybe make
190:51 - things italic so I can say
190:55 - font style
190:58 - italic and you can now see that
191:00 - everything is a little italic everything
191:02 - on the page you can of course also apply
191:04 - it to just a specific section so I could
191:07 - just go into the description here and I
191:09 - could just apply the font style italic
191:10 - so that everything else on the page is
191:12 - Norm but this is italic which is just
191:14 - slanted to the side and there are a
191:16 - bunch of other font Styles as well that
191:18 - you can apply okay so I'll encourage you
191:20 - to check it out there are a bunch of
191:22 - different font Styles you can use what
191:24 - else well we have uh text transform so
191:30 - text transform can be used to
191:32 - automatically make the make all the text
191:34 - uppercase for example let's say we
191:36 - wanted all our headings to be all caps
191:39 - so we could of course type it in caps in
191:41 - HTML or we could could just set text
191:45 - transform uppercase and now all our
191:49 - headings would automatically be
191:50 - uppercase of course this is just for H1
191:52 - but I could go in here and apply it to
191:54 - all the
191:56 - headings and now everything is uper case
191:59 - all right so that is text transform and
192:04 - finally we have this text decoration so
192:07 - text decoration is used to add a line
192:09 - whether you can have a underline
192:11 - overline or strike through so I could go
192:13 - into the headings and let's say I want
192:16 - my headings to be
192:18 - underlined so now the headings are
192:20 - underlined or maybe I want to line over
192:23 - my headings not sure why I might want
192:25 - that but it's possible sometimes for
192:27 - certain designs that might be useful and
192:29 - you could also have a line through it
192:31 - this can be useful if you have specific
192:33 - things within the text that you want to
192:34 - strike out so you could put a span
192:36 - around some text and then just put text
192:38 - decoration line through let me show you
192:40 - a quick example let's come in here into
192:42 - the description deson and let's say
192:47 - we want to change this to we want to
192:50 - strike out most highly so I could just
192:53 - put a span here and I could say style
192:56 - equals text decoration line through and
192:59 - I could close the
193:04 - span all right so now we've put this
193:07 - span and now you can see that the word
193:10 - highly is struck out
193:13 - as we might expect so that's how you can
193:16 - use this text decoration line through
193:18 - okay so that's just one of or these are
193:21 - just some of the properties there are
193:22 - many many more one other that you might
193:25 - use from time to time is the line height
193:27 - so you can see this text over here um if
193:30 - we want to make sure that maybe there is
193:31 - more space between the lines we could
193:33 - set a line height so we could come in
193:35 - here and we could set a line height and
193:38 - the line height is normally expressed as
193:40 - a single number which is a fraction of
193:43 - the point size so let's say we want the
193:46 - fraction of the font size so let's say
193:47 - we want the line height to be 1.5 times
193:50 - the normal font size so if I just do
193:53 - that you can see that now everything is
193:55 - a little more spaced out if I set it to
193:57 - two so then there's going to be almost a
194:00 - double distance between each line or I
194:02 - can just set it to one and then
194:04 - everything is going to be very close
194:06 - together that's probably not what we
194:09 - want something around 1.2 is the actual
194:12 - line height that is set by default so
194:13 - that's what you might want to stick with
194:16 - okay again all of these things are
194:18 - properties that will be defined in the
194:20 - design system or in the design mockup
194:22 - that that will be shared with you by a
194:24 - designer at your company but it's good
194:26 - to know what each of these do and you
194:28 - can experiment just to visually see what
194:30 - what looks good U you might have the
194:32 - question given so many properties so
194:34 - many values how do I decide what to pick
194:36 - well keep it simple just use as few
194:40 - properties as possible and then
194:41 - introduce properties one by one if if
194:43 - they make things better you don't have
194:45 - to add all these properties
194:47 - necessarily and of course most of the
194:49 - time you're going to be using some kind
194:50 - of a framework which will have all of
194:52 - these properties configured by
194:55 - default okay so as an exercise create a
194:58 - new web page with some text on it then
195:01 - look up available values for each of the
195:04 - above properties and then apply them to
195:06 - the text on your web page and understand
195:08 - the effect okay so the more you practice
195:11 - the more comfortable you'll get you
195:12 - don't have to remember this stuff but
195:14 - you have to know how it works so that
195:15 - when you need to you can look it up and
195:18 - there's also this reference that you can
195:19 - check out on styling text it contains
195:21 - everything that you'll need to know
195:23 - about text styling now one last thing I
195:25 - want to cover before we head into a
195:27 - Break um I mentioned to you that one way
195:30 - you can add sizes or lengths in CSS is
195:33 - by using pixels or another way you can
195:35 - do it is by using percentages so for
195:38 - example in index in our styles. CSS we
195:41 - have set the max width of the about
195:43 - section to8 800
195:45 - pixels and that set sets the max width
195:48 - of this section but along with that we
195:52 - can also SE select a width in percentage
195:54 - so here we have 50% which is the
195:57 - width and that ensures that it takes up
196:00 - 50% of its parents width okay so the
196:03 - there are two kinds of length one is the
196:05 - absolute length which is expressed in
196:07 - pixels and then we have the relative
196:09 - length which is expressed in percentages
196:12 - but there are also many other absolute
196:15 - measures that you can use so you can
196:16 - also use inches which corresponds to
196:19 - visual inches on the screen you can also
196:22 - use centimeters millimeters points or
196:24 - pasas all of these are not very common
196:26 - so most of the time you'll only see
196:29 - people using pixels but just know that
196:30 - these are all also present in case you
196:32 - want to specify so let's say we want to
196:35 - set the font size of the
196:41 - body
196:42 - 2.5 in we could do
196:46 - that and of course that's very big we
196:48 - may not actually want that but that
196:50 - scales the size of the body okay um the
196:54 - other thing is in relative font sizing
196:57 - as well most of the time you will use
196:59 - percentages but when it comes to text
197:02 - specifically people often use these font
197:04 - sizes called em and r m and REM what do
197:10 - M and REM mean well M and REM are both
197:13 - units of measurement that are used to
197:15 - size elements based on the font size of
197:18 - either the parent div or the font size
197:21 - of the root element which is the body
197:23 - body tag okay so first I'll tell you
197:26 - about REM so here's what happens let's
197:29 - say I sent a set a font size for the
197:30 - body font
197:32 - size of 16 PX okay so now I've set the
197:36 - font size of 16 pixels for the body and
197:39 - now let's say I set for H1
197:42 - I set the font
197:44 - size as 3
197:47 - RM okay when I set the font size of
197:50 - three remm for H1 what I'm saying is
197:54 - relative to the root tag which is the
197:56 - body tag I want the font size of the
197:59 - header H1 to be 3x and that is what is
198:02 - specified by three RM and you can
198:04 - actually verify this you can go you can
198:06 - right click you can say inspect and that
198:09 - is going to open up
198:11 - this
198:12 - yeah so that is going to open up this
198:14 - box model for you and you can inspect
198:17 - this H1 and you can go into computed
198:19 - here and you can verify that its font
198:21 - size is 48 pixels so 16 3s is 48 right
198:26 - so just by specifying three Ram we have
198:29 - specified that the font size of the
198:31 - heading is supposed to be three times
198:33 - the font size of the body why would why
198:36 - would we want that well why not directly
198:38 - just set it to 48
198:40 - PX well let's say we had a design
198:43 - overhaul and we wanted to change the
198:45 - body font size from 16 pixels to 20
198:48 - pixels we want to make our text bigger
198:51 - so that people can read it more easily
198:53 - so if you changed it to 20 pixels and
198:55 - reload the page you can see that the
198:56 - text became bigger but the heading did
198:59 - not become bigger so now we've lost that
199:00 - balance which we had earlier established
199:03 - on the other hand if we had three Ram
199:04 - here every time we change the
199:08 - basic or yeah every time we change the
199:11 - basic uh body size that is going
199:15 - to yeah that is going to automatically
199:17 - scale the font size of the H1 as well
199:20 - okay so if I remove this you will notice
199:23 - that the H1 well it should have become
199:29 - bigger okay there might be something
199:31 - else that is affecting the H1 so I'm
199:33 - just going to put in important
199:37 - here that doesn't do it
199:41 - either
199:43 - maybe we have to set it at the root
199:50 - level yeah so I believe the root the
199:53 - root font size has to be set using star
199:55 - or just using maybe HTML or something so
199:58 - you set the or you set the base font
200:00 - size over here using star and then
200:03 - everything else is expressed as REM of
200:06 - that so the body font size is going to
200:08 - be one RM and then the H1 font size is
200:11 - going to be 3 R so if I reload that you
200:13 - can see that the body is 20 pixels and
200:16 - the H1 is 60 pixels but if I change the
200:19 - body font size to 16
200:21 - PX now you can see that this is set this
200:24 - is now scrolled down to about 48 pix
200:27 - pixels okay so that is how you use RS uh
200:31 - to specify the font size in relation to
200:34 - the root tag of the entire page but of
200:37 - course you can also set it to 3M in
200:40 - which case if the H1 is outside another
200:42 - div and that div has a particular font
200:44 - size then we are simply going to use the
200:46 - font size which is three times that let
200:48 - me show you an example here so let's say
200:50 - I have this H1 inside a
200:52 - div and in the div we have set the font
200:59 - size to five
201:02 - pixels so now this H1 has the size 3 * 5
201:06 - 15 pixels because it is set to 3 m e m
201:10 - okay so m is relative to the pair font
201:12 - size REM is relative to the default font
201:16 - size of the entire page okay so that's
201:20 - that let us revert that
201:23 - change so now you might wonder that
201:26 - since we have all these different kinds
201:28 - of font sizes how exactly do we decide
201:32 - what font sizes you should be using how
201:34 - do you decide the font sizes for the
201:36 - different headers how do you decide the
201:37 - font sizes for paragraphs so I just want
201:39 - to share a few guidelines for you
201:42 - and this is from this Library called
201:44 - bootstrap which we look at in the future
201:46 - so while designing your website it's
201:48 - important to consider appropriate text
201:50 - sizes for optimal readability and
201:52 - usability and here are a couple of
201:54 - guidelines for the body text 16 pixels
201:58 - is a commonly used font size and this is
201:59 - the default in most browsers so you can
202:02 - just use that so in the body you can
202:04 - just come in and you if you just
202:06 - say font size 16
202:10 - PX that is going to be the default font
202:13 - size you see nothing changes then for
202:15 - the headings you can use these font
202:18 - sizes so for the H1 you can use 2.5 Ram
202:21 - which is 2.5 times the font size of the
202:23 - body or 40 pixels for H2 you can use two
202:26 - RAM for H3 1.75 H4 1.5 H5 1.25 and H6
202:32 - one RM okay and of course all these will
202:34 - also be bold so you'll have different
202:35 - font weights and then if you have maybe
202:37 - slightly smaller text on the page
202:39 - somewhere which is smaller than the body
202:40 - text then you can use point 875 RM or 14
202:43 - pixels and any larger text you can make
202:46 - it 25% bigger so you can set that to
202:48 - about 1.25 RM right so this is a good
202:52 - rule of thumb that you can have nobody
202:54 - tells you this when you're learning HTML
202:56 - but it's very difficult to determine
202:58 - what font sizes you should have so just
202:59 - use this keep the screenshot with you
203:02 - and most of the time you'll be using a
203:04 - library so this won't be a
203:05 - problem but if you're working at a
203:08 - company you'll probably have a design
203:09 - guide which will specify something
203:11 - similar for for you as well okay so
203:13 - let's apply these font sizes so for the
203:16 - body we have the font size of 16 pixels
203:18 - for H1 to HED 6 I'm going to use the
203:22 - inter font and I'm going to use the font
203:25 - weight of 500 as well so font weight 500
203:30 - so I just want to make it a little
203:32 - thinner I don't want it to be so thick
203:33 - or maybe 600 let's see yeah I think I
203:36 - like 600 so I'll keep 600 and then I
203:39 - also want to set the font sizes for for
203:41 - H1 to H6 so let us set the font sizes
203:44 - for H1 to
203:45 - H6 again I am just selecting the H1 tag
203:48 - opening this bracket putting in the
203:51 - putting in the property font size and
203:53 - then using REM so that if we change the
203:55 - base font size of the page all of this
203:57 - scales automatically so 2.5 to 1 RAM for
204:00 - H1 to
204:01 - H6 and that's good and one other thing I
204:04 - want to do is this particular section
204:06 - over here I want to make it a little
204:07 - bigger so that it's bigger than the rest
204:10 - of the text on the page so I'm going to
204:12 - come in here into the description
204:14 - section and I'm going to say font size
204:18 - 1.25
204:20 - G and now this is a little bigger a
204:23 - little nicer all right compared to this
204:25 - table for instance or compared to the
204:27 - footer and of course I could go in here
204:29 - and I could make this smaller so I could
204:31 - come in here into the copyright and I
204:33 - could say font size
204:37 - 0.875 RM okay now it is slightly smaller
204:42 - than the rest of the textt all right so
204:44 - our page is already starting to look
204:46 - aesthetically a little nicer we have
204:48 - these font sizes the next thing we
204:50 - should probably fix is the colors we
204:51 - have too many colors on the page
204:54 - but that is how you set sizes for text
204:58 - that is how you style text in various
205:00 - using various properties and as an
205:03 - exercise you can try changing the base
205:05 - text
205:06 - size I believe you can just go in here
205:08 - and you can select the HTML tag and say
205:11 - font size 20
205:14 - PX and I think this should make
205:16 - everything bigger you can just
205:18 - put body as one REM as well so yeah and
205:23 - if you come back make this smaller
205:25 - everything becomes smaller so that's how
205:26 - you can scale for font sizes up and down
205:28 - for the entire Page by just setting it
205:30 - up on the HTML tag and then using Rems
205:33 - everywhere or even m in some
205:36 - cases now let's talk about colors in CSS
205:39 - because this is where a lot of people
205:41 - face a a difficulty what color should I
205:42 - put why is my web page not looking good
205:45 - the single reason the number one reason
205:47 - why web pages often look ugly is because
205:50 - of poor choices of colors and contrast
205:52 - that's why we have a dedicated section
205:54 - and again this is not something that we
205:56 - that people go into in an introductory
205:57 - HTML and CSS lesson but we want to make
205:59 - sure that you build good visually
206:01 - appealing web pages that's why we are
206:03 - talking about color and colors colors
206:05 - play a crucial role in web design and
206:08 - colors also convey brand colors also
206:09 - convey balance colors also
206:12 - convey emotion in a lot of cases and
206:15 - there are many ways to incorporate
206:16 - colors into your web pages using CSS and
206:19 - the simplest is of course using the
206:21 - inbuilt color names so CSS provides 140
206:25 - predefined color names that you can use
206:27 - directly for example you can set the
206:29 - color of a paragraph of text to Red so I
206:32 - could come in here and I could say color
206:34 - red and that would make all the text on
206:37 - the page red which is obviously not very
206:40 - nice but when you're starting out out
206:41 - you tend to pick some of these basic
206:43 - colors don't use them they look your
206:45 - they make your page look bad instead if
206:49 - you have to use named colors if you're
206:50 - not sure what colors to use pick some
206:53 - slightly muted colors slightly pastel or
206:56 - softer colors so you could use black or
206:58 - you could use gray most of the text on
207:00 - your page should be some version of
207:02 - black or maybe some shade of gray
207:06 - sometimes you may have a slight tinge of
207:07 - blue or a slight Ting of some other
207:09 - color but definitely not a very strong
207:10 - color of any kind for example this one
207:13 - caded blue is an interesting color so I
207:16 - could probably use this this could be a
207:17 - nice color to use okay still two
207:19 - different probably not that great so I
207:22 - should probably just use one of these
207:23 - grayish colors like dim gray so let me
207:26 - just come in and use dim
207:27 - gray and dim gr definitely looks
207:30 - somewhat nicer but it's still not better
207:33 - than the default anytime your color
207:35 - choice is not better than default it's
207:37 - probably a poor
207:39 - choice but you do have 140 plus choices
207:43 - of colors that you can pick and these
207:46 - are all named colors within CSS
207:49 - okay next you have colors that you can
207:52 - Define using the RGB system so RGB
207:56 - stands for the red green blue which are
207:59 - the primary colors of light so all the
208:01 - colors that you see around you all the
208:03 - colors that you see on the screen
208:04 - specifically are built using
208:06 - combinations of red green and blue so
208:09 - what you can do is there is this
208:12 - RGB Color Picker
208:16 - here I'm just going to search RGB Color
208:19 - Picker it's a build inbuilt Color Picker
208:21 - in Google and into this Color Picker you
208:25 - can a Color Picker you can select a
208:26 - value for red green and blue let me put
208:28 - 0 0 0 and press enter so when you have
208:32 - all of them set to zero red green and
208:34 - blue all set to zero then you get the
208:36 - color black which means you have no red
208:38 - no green no blue everything is black on
208:41 - the other hand let's say I start
208:42 - increasing red I increase red to 10 it
208:45 - starts to get slightly redder I increase
208:47 - red to maybe 40 it's getting more red I
208:50 - increase red to 50 okay more red I
208:53 - increase red to 100 now it's like a dark
208:56 - red I increase red to 200 now it's a
208:59 - very bright red 150 red of 150 would be
209:02 - something in between now it's a medium
209:04 - red and maybe somewhere right at
209:08 - 255 is the brightest red now you cannot
209:10 - have value is higher than 255 so because
209:13 - of how colors are represented internally
209:16 - in the computer memory you have to
209:17 - choose values from 0 to 255 Z is the
209:20 - darkest and 255 is the highest or
209:23 - brightest and of course that is the
209:25 - color for red you could do a similar
209:27 - thing with green so let me set red to
209:29 - zero let me set green to 50 and now
209:31 - you're getting a dark green let me set
209:34 - green to 100 and now you're getting a
209:36 - darker green slightly brighter green let
209:39 - me set green to 150 it's starting to
209:40 - look like light let me set green to 255
209:43 - and now this is the brightest possible
209:45 - green that your computer screen can
209:46 - display similarly we have blue so this
209:50 - is the 50 blue this is the 100 blue this
209:53 - is the 1 150 blue and this is the 255
209:58 - Blue okay 255 is the brightest zero is
210:00 - the darkest now of course you can
210:03 - combine so you know that red and green
210:05 - when combined become yellow so you can
210:07 - say 100 and 100 and that gives you a
210:10 - yellow ish color but it's still not
210:12 - completely yellow you have to go all the
210:14 - way to 255 and 255 to get a proper
210:17 - yellow color right and if you combine
210:20 - all three colors in equal quantity you
210:22 - get Shades of Gray so 255 255 255 is
210:25 - white and 0 0 0 is black but of course
210:30 - somewhere in between let's say 100 100
210:34 - 100 is going to be gray and you can make
210:37 - this gray lighter by going 150 150 150
210:42 - and you can get all different shades of
210:43 - colors by combining various amounts of
210:45 - red various amounts of red green and
210:47 - blue for example I believe green and
210:49 - blue together give you the seon color
210:51 - and then red and blue together give you
210:54 - I don't know what it
210:55 - is let's see red and blue together give
210:59 - you the magenta color right so you have
211:01 - all these other colors that come
211:02 - together as well um of course you don't
211:05 - have to type out all these colors
211:07 - directly sometimes you have you can work
211:08 - the other way you can go and select a
211:10 - color here that seems nice okay maybe
211:13 - this color seems nice I'm going to use
211:15 - it I want to use it for some of the text
211:17 - not a great color for text but let me
211:19 - just try using it anyway then I can just
211:21 - select that using a Color Picker and you
211:24 - can just search Color Picker on Google
211:25 - and get this widget and now I can copy
211:28 - these red green and blue values now I
211:30 - can come back into my web page and let
211:33 - me just change the font font color for
211:35 - now so
211:36 - color RGB so we use the RGB function and
211:40 - then p paste the red green and blue
211:42 - value and that will just apply the color
211:44 - to that particular element whatever is
211:47 - selected right now I've selected the
211:48 - entire page that's why it's applying to
211:50 - the entire page and now I can modify
211:53 - this uh vs code actually gives you a
211:55 - Color Picker directly over here you can
211:57 - actually go in and select a value
211:59 - directly from here and that's going to
212:01 - modify it and you can then use that
212:03 - color on your
212:05 - page oh sorry you'll have to yeah you'll
212:08 - have to copy it and I believe then you
212:10 - can use that color on the page so there
212:12 - are ways to do this within us vs code
212:14 - itself but whatever red green blue color
212:18 - combination you have you can use that
212:20 - and for now let's just set the default
212:23 - size to some or the default color to a
212:25 - gray not exactly black let's set it to
212:28 - maybe
212:28 - 210
212:30 - 210 and 210 maybe a slight tange of blue
212:34 - maybe set that to
212:37 - 230 okay that's actually very light so
212:40 - maybe let let's make it very light so
212:41 - maybe 30
212:43 - 30 and maybe 40 over
212:46 - here yeah and that is looking actually
212:49 - not bad right so zero is dark 255 is
212:53 - bright and combined red green and blue
212:55 - okay so that is the RGB system you can
212:58 - use the RGB function you can use it for
213:00 - background colors let's say I want to
213:01 - use it not for the color of the page but
213:03 - for the background
213:05 - color background color of 30 40 40
213:09 - that's very dark maybe let's add it to
213:11 - 230 230
213:13 - 240 yeah that's a pair background but
213:17 - generally speaking even backgrounds it's
213:19 - okay to just keep them completely white
213:21 - or a very very light gay or very very
213:24 - light gray okay um so that is the color
213:28 - then there is another way to represent
213:30 - colors which is using the heximal color
213:33 - codes okay so the hexadecimal is a
213:36 - textual representation of RGB but
213:38 - instead of numbers you use numbers and
213:41 - characters now this is represented using
213:43 - the hexadecimal number system I will not
213:45 - get into it here but the idea here is an
213:48 - hexadecimal color is represented using
213:50 - three uh represented using six
213:53 - characters and each character could have
213:55 - a to F or 0 to9 so 0 to 9 or a to F and
214:00 - the first two characters represent red
214:03 - this is in fact the
214:04 - hexadecimal notation for the red value
214:08 - and then the next two characters
214:09 - represent green and the next two
214:11 - characters represent blue okay so often
214:14 - what you can do is you can if you have a
214:16 - RGB color in mind let's say the color I
214:19 - want to use in RGB is 230 230
214:24 - 240 I can put that into a Color Picker
214:27 - and I can get that hexad deiml code from
214:29 - the Color Picker and I can just copy
214:31 - that and instead of typing out the
214:33 - entire
214:35 - RGB I can just say
214:38 - color is Hash Hash includes ex decimal
214:41 - and then type out the color here okay
214:44 - and that will just change the color on
214:45 - the page it's a very bad color but you
214:47 - get the idea okay so RGB and hex are
214:51 - equivalent it's just that hexad decimal
214:53 - is more commonly used because it's
214:54 - easier to copy paste and use across
214:58 - different platforms so often you will
215:01 - find colors in HEX so when somebody says
215:03 - get the hex code or get the color code
215:05 - this is what they're referring to and
215:07 - you can always get hex codes online in
215:09 - fact a lot of color Pickers also give
215:11 - you hex codes instead of RGB let's say I
215:13 - go in here and I go select a very dark
215:16 - color and I click
215:20 - this yeah I just click that and that is
215:22 - going to get the RGB color for me oh
215:25 - sorry that's going to get get the hex
215:26 - code of the page for me okay so now I
215:29 - have applied the hex color to it as such
215:32 - now of course as you might expect 0 0
215:35 - 0000 0 is white oh sorry is black all
215:40 - zeros is zero uh very dark red very dark
215:43 - blue very dark green is black and
215:46 - because each value goes from 0 to 9 and
215:49 - then a to F so f f f
215:54 - f FF that is white okay now everything
215:58 - has gone white and of course if you if I
216:00 - put 0 0 0 0 here that would be red and
216:03 - so on so first two characters are red
216:05 - from 0 0 to FF and next two characters
216:08 - are green next two characters are blue
216:11 - okay let's get rid of that so that is
216:14 - the hexad diml color code and you can
216:16 - use that to set background colors you
216:18 - can use that to select text color all of
216:20 - that and you can use the Google Color
216:22 - Picker to convert RGB colors into hexad
216:25 - decimal or vice versa you can for
216:27 - example copy this hexadecimal color code
216:30 - and come into the Google Color Picker
216:32 - and paste it here and that will give you
216:34 - the RGB code in case you need
216:39 - it all right so that's the hex another
216:43 - color scheme is something called the
216:46 - rgba color scheme which is similar to
216:49 - RGB you have red green blue but then you
216:51 - also have transparency so you can for
216:54 - example make the background of a div or
216:58 - you can make the text um on on a
217:00 - particular page slightly transparent so
217:02 - that the color behind it shows through
217:05 - okay let me show you an example let us
217:07 - set the background color of the page to
217:12 - let's say red going to look very ugly
217:14 - but let's set it here no problem then
217:16 - let us set the color of
217:20 - the text to 0 0 0 or maybe just 20 20 20
217:28 - which is a very dark
217:30 - gray okay it looks very similar it's
217:33 - still looking very black almost close to
217:37 - black but now let us come in and change
217:39 - this to RGB a and let us set the opacity
217:42 - or transparency to 0.5 so one is I
217:46 - Believe full opacity and zero is
217:48 - completely transparent in fact let's put
217:50 - 0. five first and you can see that you
217:52 - can see some of the red behind you can
217:55 - see some of the red behind the text If
217:57 - This Were
217:58 - green you would be able to see some of
218:01 - the green behind the text so if I set
218:03 - the transparency to zero or the opacity
218:06 - to zero now you can't see the text at
218:08 - all if I set the opacity to one you
218:11 - can't see any of the background color at
218:13 - all through the text but somewhere
218:15 - around. 4 for instance you will see that
218:19 - we are able to see some of the
218:20 - background coming through okay so you
218:22 - can also use this rgba and similar to
218:26 - rgba there is also the hex code where
218:28 - you have red green blue and then two
218:30 - more characters to represent the opacity
218:33 - level as well okay not very commonly
218:35 - used but this is also something that you
218:37 - can do so that is about colors in HTML
218:43 - and as you might have seen all the color
218:44 - choices that we making by default look
218:47 - pretty ugly
218:49 - so we'll talk about how to come up with
218:51 - good colors but now that you know how to
218:55 - create a color these are all the
218:57 - different ways in which you can use
218:58 - colors so you can use color to set the
219:00 - color of the text which is what we've
219:01 - been doing right now you can use
219:03 - background color to set the background
219:05 - color of an element we've done that as
219:07 - well you can set the Border color and
219:09 - then you can use box Shadow and text
219:11 - Shadow so box Shadow is used to create a
219:13 - shadow around a box or a div and text
219:16 - Shadow is used to add Shadow for text
219:19 - okay so you can look up the properties
219:21 - specifically and see how these are set
219:23 - but I'll just show you an example of
219:24 - Border color let's say we can come here
219:27 - and we can set for the team image we can
219:31 - set the Border
219:33 - width or we can just set the border to
219:36 - five pixels
219:39 - solid and let's pick a color deep blue
219:42 - or something like that dark
219:50 - blue yeah now you can see that there is
219:52 - this dark blue border and I can in fact
219:55 - just change the Border color separately
219:57 - so I can say border
220:01 - color RGB and let's say 20 20
220:09 - 20
220:10 - and that gives it a blackish or a dark
220:12 - gray border and I can also set these
220:14 - border properties separately so I can
220:16 - set border width to 1 PX and get rid of
220:21 - this and I can say
220:23 - border
220:25 - style as solid this is a solid
220:29 - border let's make that 5px this is a
220:32 - solid border I can also have a dashed
220:35 - border you can see that we can have a
220:37 - dashed border like this not very common
220:39 - but you can do it if you if you want and
220:42 - you can also set maybe the width of
220:44 - different borders so you can say border
220:45 - left width is 5 pixels that you have
220:48 - this border only on the left and
220:50 - everywhere else you just have a one
220:51 - pixel border okay you have all these
220:54 - ways in which you can specify borders
220:55 - and you can specify the styles of
220:57 - borders and colors of borders as
220:59 - well so again experiment with colors a
221:02 - little bit and generally speaking
221:05 - picking good colors is really hard and
221:07 - if you're picking at random just looking
221:09 - at some colors and try to use it that is
221:11 - you're going to have a tough time so
221:13 - here are some guidelines for picking
221:15 - good colors the first is to use a color
221:17 - palette so use color palettes to ensure
221:19 - consistency throughout your design and a
221:22 - color palette is a set of colors that go
221:25 - well together so color palette will
221:27 - typically have a primary color and some
221:29 - shades of the primary color which are
221:31 - often used either for text or for maybe
221:33 - buttons or for um backgrounds then you
221:36 - will have a secondary color which is
221:38 - also used sometimes for buttons
221:40 - you may not have a secondary color at
221:42 - all and then finally you should have a
221:43 - maybe a few Shades of Gray that you're
221:45 - going to use as backgrounds or as text
221:48 - colors then one other thing to keep in
221:50 - mind is contrast you want to make sure
221:52 - that the text is legible which means
221:54 - that the text should have should have a
221:56 - high contrast compared to the background
221:58 - okay if generally speaking you're not
222:00 - able to read the text then that's a bad
222:02 - color choice so light text on dark
222:04 - background or dark text on light
222:06 - background works well then the other
222:09 - thing is simplicity avoid using Too Many
222:11 - Colors just because there are all these
222:12 - colors doesn't mean you have to use them
222:14 - just use as I said a color palette with
222:17 - a primary color a few Shades and a
222:19 - secondary color a few Shades even there
222:21 - stick to one or two shades all the text
222:23 - on your page should more or less have
222:24 - the same color and ideally should just
222:26 - be Shades of Gray maybe with a slight
222:28 - tting of blue or slight tting of green
222:30 - depending on the theme of your
222:32 - website and finally um know that
222:35 - sometimes there are issues like some
222:38 - people have color blindness some people
222:39 - do not have have a perfect vision so
222:41 - there might be color vision deficiencies
222:43 - that your users might have and there you
222:46 - can use tools like color contrast
222:48 - Checker so you can just search online
222:49 - for color contrast Checker and you can
222:51 - paste some HTML code here or you can
222:54 - like set the foreground color background
222:55 - color and you can check what the
222:57 - contrast ratio is and it'll tell you
222:59 - whether this is going to be readable for
223:01 - for somebody who has color vision issues
223:04 - or general reading issues all right so
223:07 - just keep those things in mind now
223:09 - generally most companies have a design
223:11 - system with predefined sets of colors
223:14 - for various parts of the
223:15 - application and for now you can just use
223:20 - this one color palette so what I would
223:23 - suggest is use this color palette
223:25 - tailent color.com it's linked in the
223:27 - notebook page and from this color
223:29 - palette for whatever website you're
223:30 - working on pick a primary color in my
223:34 - case I tend to almost always go with the
223:36 - blue and pick a secondary color the
223:38 - primary color is what is going to be
223:39 - used in most places and then the
223:41 - secondary color is going to be used in
223:43 - some other places where you need a
223:44 - second color and then maybe just use the
223:46 - different grays for showing text okay so
223:50 - that is what I would suggest pick a
223:52 - primary color pick a secondary color and
223:54 - pick a bunch of Grays don't use the
223:56 - predefined CSS colors they don't go well
223:58 - together don't use random choices of
224:01 - colors uh that you find come up with or
224:04 - try or you're trying to figure out using
224:06 - the RGB Color Picker that generally
224:08 - doesn't work use a color scheme
224:10 - okay so based on the color based on
224:13 - these I would also encourage you to go
224:15 - through some example sites here these
224:17 - are some examples of bad color choices I
224:21 - mean this one's not too bad but it's
224:23 - still too bright I would say uh these
224:25 - are all all completely fairly bad color
224:28 - choices this is you used to see a lot of
224:30 - that a lot of this earlier in the
224:31 - internet era and these are some choices
224:34 - of good color so one thing you can do
224:36 - for your website is just pick color
224:38 - combination so you can see that there's
224:39 - a prime primary color which seems to be
224:40 - orange and orange and yellow so some
224:44 - shades of orange and yellow and the
224:45 - secondary color here seems to be this
224:47 - blue and here again there is this
224:50 - primary color of yellow for Lego and
224:52 - there there's no second there's a bluish
224:53 - secondary color that is used in some
224:55 - places here the blue is the primary
224:57 - color and here there's the seems there's
225:00 - this I don't know what this color is
225:02 - called but this like light pink color
225:05 - probably again there's this primary
225:07 - color secondary and then maybe like a
225:09 - black secondary color uh sometimes you
225:11 - can use images and matching colors with
225:14 - images so you have the green color
225:16 - shades of green and then you have a
225:17 - secondary color which is the red that's
225:20 - great a primary color this color and
225:22 - then the secondary is just black here
225:24 - again here we have this gradient which
225:26 - is basically just shades of the primary
225:28 - color and then the secondary color also
225:30 - just seems to be a shade or maybe these
225:31 - are the two colors primary and
225:33 - secondary and again here we have gray
225:36 - and we have red so yeah look at examples
225:39 - look at at your favorite sites and just
225:40 - copy what they do and use a color
225:44 - palette of Tailwind color.com while
225:46 - you're designing your website okay
225:49 - specifically for text I want to share a
225:51 - few guidelines normally text should be
225:54 - almost always some shade of gray some
225:56 - shade of black uh you can have a slight
225:59 - tinge of blue or a slight tinge of green
226:01 - or red depending on your themes uh but
226:03 - here's a good guideline your headings
226:05 - can be 90% black or just 22 2222 would
226:08 - be the color hex color
226:10 - your body text can be 75% black or 4444
226:14 - and any secondary text that is not
226:15 - important can be 60% black which is 6666
226:19 - and disabled text should be 40% black so
226:22 - it's a bit confusing because black is
226:24 - zero so 90% black is going to be very
226:27 - close to zero and 40% black or 60% white
226:30 - is going to be very close to FFF right
226:34 - but I hope you get the idea hex colors
226:36 - can be a bit confusing to wrap your head
226:38 - around but as you practice more you'll
226:41 - get used to it okay closer to zero is
226:42 - dark uh away from zero is is light so
226:46 - 90% black is very close to zero let's do
226:48 - that let's come in and let's set these
226:50 - colors let us first come in into our
226:53 - body and let us
226:56 - set these let's set the font size and
226:59 - the color so the color we're going to
227:00 - set to 4444 or 75% black so let's come
227:04 - in here to the body we've already set
227:07 - the font size to one ram I think that
227:09 - should work
227:10 - we have just added the 4444 color and
227:14 - our body text is slightly gray but it
227:16 - still looks fine but I think the
227:18 - headings can be made slightly darker so
227:20 - let's come into the headings and for
227:22 - each of the headings let us set the font
227:24 - weight to 500 and font color to 222 so I
227:28 - think I'm going with 600 here I like 600
227:30 - it's looking good for me so I'm just
227:31 - going to set the color to 22 and now our
227:34 - headings are slightly darker so that's
227:36 - fine then what else well
227:41 - we have this jobs table on this jobs
227:43 - table I want to make these titles
227:45 - slightly darker because they are more
227:47 - important more prominent so I'm just
227:49 - going to come in into the jobs table and
227:51 - into the row header I'm going to add the
227:53 - color
227:55 - of 22 22 22 which is the same color I'm
228:01 - using for the headers some now these are
228:03 - a little darker so that's great then
228:06 - okay now these backgrounds right so
228:08 - remember I said we don't want to use the
228:10 - named colors we want to pick from a
228:12 - theme so generally for uh for
228:15 - backgrounds of tables you can use maybe
228:17 - the primary color and a very light
228:19 - version of the primary color so let's
228:21 - see I'm going to go in here into
228:23 - Tailwind color palette and I'm going to
228:25 - pick the lightest version of
228:28 - indigo for my Row background so it is
228:31 - simply Indigo 50 or let me let me pick
228:34 - blue 50 just to be very safe and when I
228:37 - click on it it copies the hex code so I
228:39 - can come in here into the nth child and
228:42 - I can paste this color and now I have
228:44 - this very light blue that is behind
228:49 - the uh behind some of the rows as a
228:52 - background color and for this let me
228:54 - pick maybe blue 100 or I could also pick
228:56 - the secondary color but for now let me
228:58 - just stick with Brew 100 and I'm going
229:00 - to set this on the header row I'm going
229:03 - to select the background color not as
229:05 - Alice blue but as this darker slightly
229:08 - darker blue so you can see now that it
229:10 - looks slightly nicer because these two
229:12 - are shades of the same color essentially
229:14 - so this is a slightly darker blue this
229:16 - is a slightly lighter blue I could also
229:18 - maybe experiment with blue 200 if
229:21 - I'm not happy with the contrast but
229:25 - that's the most I would go I would just
229:27 - go up and down within the same um within
229:31 - the same shade and maybe let me come in
229:34 - here and let us also set the background
229:36 - for this so you have this footer here
229:38 - generally for backgrounds or for body
229:40 - backgrounds you just want to use gray
229:42 - and you just want to use the lightest of
229:44 - Grays so I have a blue gray here which
229:46 - is slightly bluish gray so let me just
229:47 - copy the blue gray and let me come into
229:50 - footer and set the background instead of
229:53 - ghost white let me set it to blue gray
229:55 - and now that looks slightly nicer or I
229:58 - could even just have used a simple gray
230:01 - as it
230:03 - is okay fa fa fa and that looks fine
230:07 - finally for the link on this page I
230:10 - might want to use the blue color so I
230:12 - can just go in and I can pick a um the
230:15 - 500 blue for links on the page so let me
230:19 - pick the a tag and let me
230:21 - say color 500 U
230:26 - sorry that color so links on the page
230:30 - will show up like this but now you can
230:31 - see that as I hover over a particular
230:34 - link the color doesn't change so this is
230:36 - where you can actually use a something
230:38 - called a pseudo class or a hover state
230:41 - if you want to change how a link looks
230:43 - on hovering you can say colon hover and
230:47 - now you can put in a different color let
230:49 - me make it 700 so let us check set the
230:52 - color to 700 over here for the h state
230:56 - so now when I hover over a link I get a
230:58 - different color okay and there are
231:01 - various hover States we'll talk about
231:03 - them in a future lesson or various
231:05 - pseudo classes that you can apply but
231:07 - basically whenever you're styling links
231:08 - you should specify a normal color and
231:10 - you should specify a hover color and
231:12 - sometimes this hover color um hover is
231:15 - used when you use the mouse but when you
231:17 - tap using the keyboard um you can use I
231:21 - think you can use Focus or active or
231:23 - something like that so when you are
231:25 - using the keyboard then the focus color
231:27 - gets applied so both hover and focus
231:29 - should generally be set together okay so
231:32 - that is about setting colors so now our
231:35 - page is looking rather nice because I'm
231:36 - using a consistent color scheme that's
231:39 - good what else well we have a gray here
231:43 - so the gray for the copyright I'm again
231:45 - going to just grab one of the Grays from
231:49 - yeah maybe gray 400 or yeah gray 400
231:51 - should be good enough and let me just
231:53 - paste
231:54 - that or maybe gray 500 should be good so
231:57 - let me just paste gray
232:01 - 500 I think I was
232:03 - yeah that's gr 500 I think I'm happy
232:06 - with that okay so our page is looking
232:08 - nice we have picked a nice set of colors
232:11 - so let's continue now and let us talk
232:14 - about forms in
232:16 - HTML now HTML forms are an essential
232:19 - part of creating Dynamic web pages
232:21 - because they allow users to input and
232:23 - submit data to a web server which can
232:27 - then be processed and stored in fact
232:29 - most web applications that you see on
232:31 - the internet are built using forms and
232:33 - forms are going to become increasingly
232:35 - important as we go further into the
232:37 - course and in the program now the form
232:39 - is created a form in HTML is uh cre and
232:42 - no doubt you've used several forms so
232:44 - you know what forms are this is what
232:45 - they look like you can put in some
232:47 - information forms are created using the
232:50 - form tag so you start a form tag and
232:52 - then you put a form tag at the end and
232:53 - you put the entire inputs Etc inside it
232:57 - you can then use three types of tags you
232:59 - can use the input tag to create these
233:01 - text boxes or other various types of
233:04 - inputs you can use the select tag to
233:06 - create dropdowns you can use the text
233:08 - area tag to create big text boxes where
233:10 - people can enter full paragraphs of text
233:13 - and there are various types of input
233:15 - Fields like text you can have password
233:17 - input fields which is what you do when
233:18 - you log to a website you can have email
233:21 - input fields that automatically validate
233:23 - that what you're entering is an email
233:24 - you can have radio buttons you can have
233:26 - check boxes and then of course drop
233:28 - downs Etc as
233:29 - well with each input box often you also
233:33 - have a label so you have these labels
233:35 - that are associated with these form
233:37 - input tags and these these labels are
233:40 - important because they allow not just
233:43 - the person who is using it normally but
233:46 - people who are let's say who have a poor
233:49 - vision and are using a screen reader
233:51 - labels are used by the screen readers to
233:53 - tell people what to enter into specific
233:55 - form Fields labels are also used by
233:57 - search engines to determine what the
233:59 - structure of your form is so there are
234:01 - many ways in which labels are important
234:02 - so don't ignore labels when you're
234:04 - building a form and finally most forms
234:06 - have a button at the end sometimes
234:08 - multiple buttons to reset or clear the
234:10 - data uh but you almost certainly have a
234:12 - submit button or a save button or a send
234:15 - button that is going to actually trigger
234:18 - a form submission which is to grab all
234:20 - the data from the form and send it to
234:22 - some server some web server and we send
234:25 - the data using the action and the method
234:30 - attributes of a form so typically for a
234:32 - form tag you have an action and then you
234:34 - have a method now of course in today's
234:36 - lesson we don't actually have a web
234:38 - server we are just just building static
234:39 - HTML Pages a server is something that
234:41 - can take some request do some processing
234:44 - on it and return a response we don't
234:45 - have that today so we're going to be
234:47 - using a third party service to collect
234:49 - these form responses but over time we're
234:51 - going to learn how to use um our own
234:54 - inbuilt servers okay but this is what a
234:56 - form looks like you have a form here and
234:59 - then inside the form you can have labels
235:02 - and inputs I've put these labels and
235:04 - inputs inside divs because otherwise you
235:07 - will find that everything just lines up
235:09 - on a single line which may not look nice
235:11 - so let's create a form step by step and
235:14 - in fact we're going to create a form uh
235:17 - so one thing you can do is you can just
235:18 - copy this code and you can just paste it
235:20 - into the web page and see what that
235:22 - looks like so let me just show you first
235:24 - and then we are going to create the form
235:27 - step by step again let me create a div
235:30 - here first let me call
235:34 - that
235:37 - application okay and let me then put
235:43 - in an hed2 here and call it submit your
235:49 - application okay so now we have the
235:51 - submit your application section let me
235:54 - then put in this form here so I'll just
235:56 - paste this form and by the way if you
235:58 - just want to include a comment something
236:00 - that is not actually displayed on the
236:01 - page you can do that using
236:04 - this comment operator so started with
236:07 - the open tag and then start Ed with an
236:09 - exclamation followed by a hyphen hyphen
236:11 - and you can just put put some text here
236:14 - so some sample
236:17 - form remove
236:21 - later so this is a way for you to just
236:24 - add some note for yourself this is not
236:27 - going to be read by the browser this is
236:28 - not going to be displayed on the page
236:30 - but this is just a note that you can
236:32 - leave for yourself you can just say too
236:34 - sample form remove later okay but now
236:36 - I've put in this form so this form has
236:38 - an action this form has a pro a method
236:41 - these are not things that we're going to
236:42 - use right now then it has a div and in
236:44 - this div we have a label so we have the
236:47 - label name and then we have an input
236:49 - okay and this is what it looks like so
236:51 - we have name and we have this empty
236:53 - input then we have email and then we
236:55 - again have an input then we have message
236:57 - then we have an input so we' basically
236:59 - created a very simple form which
237:01 - contains a label and contains these
237:02 - input fields and a couple of things I
237:05 - want to point out with regards to the
237:07 - structure of the form
237:10 - let's make that a little
237:11 - bigger is that normally for every input
237:15 - you have to specify a type okay so here
237:18 - we have specified the type text so here
237:20 - you can enter any form of text instead
237:23 - if you had specified the type number for
237:27 - instance then you would not be able to
237:29 - enter normal text here you would have to
237:31 - enter numbers okay so that's one thing
237:34 - I'll just zoom in a little bit here so
237:36 - that you can see that I can't enter text
237:37 - I have to enter number numbers and you
237:40 - have very various other kind kinds of
237:42 - inputs as well you have the date input
237:44 - now in this case it's going to open up a
237:45 - date picker so that's nice but I'm just
237:48 - going to revert this to text for now
237:50 - because it is for name then another
237:53 - thing that you often have to do is to
237:55 - specify an ID for each input so what is
237:58 - a common practice is to specify an ID
238:00 - for an input and then specify the in the
238:04 - label which input it is an it is a label
238:07 - for okay because the label may not of
238:09 - may not necessarily always be next to
238:12 - the input itself sometimes the label
238:13 - might be in a different div the input
238:15 - might be in a different div because of
238:16 - the structure of the page so you specify
238:19 - an ID and then you specify that the
238:22 - label is for this ID using the for
238:25 - attribute your form is going to work
238:27 - perfectly fine without
238:29 - this you can see that the form still
238:32 - works but it's a good practice to
238:35 - specify an ID for the input and specify
238:38 - a for for attribute for the label okay
238:40 - so keep that in mind ID for the input
238:43 - and the ID of course should be unique
238:45 - and the for attribute um on the label
238:48 - which which points to the ID of the
238:49 - input for which this is a label finally
238:53 - I know I know it can get a bit confusing
238:55 - right now finally when you also need to
238:58 - have a name attribute for every input
239:01 - okay now this input itself is also
239:03 - called name that's a different thing but
239:05 - here is another input called email and
239:06 - it has the name email or I could just
239:10 - uh yeah or here there is a or I could
239:14 - just yeah I could just call this
239:15 - something else mail ID for
239:18 - example now what what is the value of
239:21 - the name attribute so the name attribute
239:23 - decides that when you hit the submit
239:26 - button and some data is getting picked
239:28 - up from the form what is going to be the
239:31 - name of each field okay so if let's say
239:34 - we wanted to send the data to the server
239:36 - in this format so let's say we want to
239:39 - send the data to the server with a full
239:41 - name
239:42 - property and an email address property
239:46 - so when we click submit the server is
239:48 - going to receive some form data and in
239:51 - that form data it's going to have a
239:52 - property called full name whose value is
239:55 - going to be whatever you have entered
239:56 - here similarly uh the server is going to
240:00 - receive some form data and in that form
240:02 - data there's going to be a property
240:03 - called email address and that email
240:06 - address is going to contain whatever
240:07 - email address has been put in here okay
240:10 - so the name property is useful on the
240:12 - server once the form is submitted we'll
240:15 - see that in action when we actually make
240:17 - a form submission and finally if a form
240:20 - is if a form field is required which
240:23 - means it has to be filled out without it
240:25 - submission cannot be made then you can
240:26 - put in the
240:28 - required attribute here and it doesn't
240:30 - have any value you just set required and
240:32 - if it is required then as long as you
240:34 - fill it you you'll see that you'll not
240:36 - be able to submit so it's it just says
240:38 - please fill in this field when you try
240:40 - to submit the form okay so that is where
240:42 - you have the required property so those
240:44 - are some of the properties that you can
240:47 - specify for a form okay so now we're
240:50 - going to build a form step by step for
240:53 - our application remember we had this
240:55 - application form here which has name
240:56 - email phone number position resume and
240:58 - cover letter so we're going to build
241:00 - that step by step and there are various
241:03 - form input types so I've just listed a
241:05 - few here that you can browse you have
241:06 - the text input obviously we can create
241:09 - checkboxes so if you just change the
241:11 - type here to checkbox that is going to
241:12 - become a checkbox then we have radio
241:14 - buttons so checkboxes are often used
241:16 - when you have like you want to show
241:18 - multiple checkboxes and multiple of
241:19 - those can be selected so that's when you
241:21 - show a checkbox and the radio input is
241:23 - often used when you want to only allow
241:25 - selecting a single option from a list of
241:28 - options so again you should experiment
241:30 - with this a little bit it's all about
241:32 - getting some practice then to create a
241:34 - do drop down we use the select tag we're
241:36 - going to look at an example if you you
241:38 - want to allow the user to enter a larger
241:41 - amount of text then you have to use a
241:43 - text area okay now one key thing I want
241:46 - to specify about text area in particular
241:48 - is that all inputs are generally
241:50 - self-closing tags so the input that you
241:52 - see here this does not require a closing
241:54 - tag it is self- closing but a text area
241:57 - is not self-closing so whenever you have
241:59 - a text area you have to add the closing
242:01 - text area tag as well it's just how HTML
242:03 - has been defined so make sure that
242:05 - whenever you have an input it you you
242:07 - don't necessar need a closing tag you
242:09 - can put one if you want but you don't
242:11 - need one and for text area normally you
242:13 - do need a closing tag so that's
242:15 - something to keep in mind then you can
242:17 - use a date input again just change the
242:19 - type here to date and that's going to
242:20 - become a date you can use a password
242:22 - input in case you want to build a login
242:24 - form where you don't want to show what
242:25 - is being typed um I'll just quickly show
242:28 - you what that looks
242:32 - like let me reload this page you can see
242:35 - now that whatever I'm typing is not
242:37 - visible here so that's the password
242:38 - input and then of course you can have
242:40 - email input so this is going to validate
242:42 - that the data is being entered is an
242:44 - email before submission and then you can
242:47 - have a number input and that is going to
242:49 - make a
242:50 - numeric input field and you can also
242:53 - specify attributes like minimum and
242:55 - maximum and also the step like let's say
242:57 - you want it to be multiples of two or
242:58 - something you can specify that as well
243:01 - that is again achieved using the input
243:03 - type now there are several other input
243:06 - tags that you can use so you can check
243:08 - out various other input types here there
243:10 - are lots of these you can have an image
243:11 - input you can have a color input you can
243:13 - have a range input so you can have a
243:15 - slider um you can have a search input
243:18 - you can have a sub uh submit is of
243:19 - course the input that is used to create
243:21 - a submit button uh but yeah there are a
243:23 - bunch of different input types and now
243:25 - let us actually build out this
243:27 - application form okay so I'm going to
243:29 - take this all away for
243:35 - now and let's start building the
243:37 - application form so I'm going to just
243:39 - first create a form nothing and I'm
243:41 - going to give it an ID let's call it
243:43 - application
243:46 - form and now let us start by creating a
243:49 - div first again we're putting things in
243:52 - a div so that they just show up nicely
243:54 - and let us now create a single input of
243:59 - type text and let's give it the
244:05 - ID name and let us give it the
244:09 - name full
244:11 - name and let us make it
244:14 - required okay and let's reload the page
244:17 - now we have this input box that's fine
244:19 - let us put a label for this
244:22 - input
244:25 - and in the label let us put
244:28 - the value full
244:30 - name okay so now we have full name and
244:32 - then we have this box let us maybe also
244:35 - add this a small empty line so I'm using
244:37 - the BR tag here it is a self closing tag
244:39 - that is used to add a new line um it's
244:41 - not used a lot anymore but in forms if
244:44 - you just want to add a new line after a
244:46 - label you can quickly add a br tag or
244:48 - you can wrap the label in a div so now
244:50 - this now you can see that the input box
244:53 - comes below the label that's one thing
244:56 - and let us also set the for property
244:58 - that this is for the input with the ID
245:01 - name okay so that's looking good the
245:03 - form is looking good let us also style
245:06 - it a little bit so that it looks
245:07 - slightly nice sir so I'm just going to
245:09 - come in here
245:11 - and I am going to first select this
245:15 - application so right now this
245:17 - application div is always at the very
245:19 - left so I just want to make maybe Center
245:21 - it a little bit so I'm just going
245:24 - to come in here and Center it so let's
245:33 - see yeah let me just add it here so we
245:36 - have this application div
245:39 - with the ID application let me give it
245:40 - the same Max width of 800 PX and let me
245:44 - give it a margin of 0 Auto so remember
245:47 - Auto margin on left and right
245:48 - automatically centers the div and let me
245:50 - give it a padding of 0 and 8 pixels so
245:53 - that it's not sticking to the end so now
245:55 - you can see here that there's a nice
245:57 - padding and as I expand it you can see
246:00 - that it remains centered so that's good
246:03 - okay so far so good then maybe let's
246:06 - also improve the
246:08 - input a little bit so for the input uh
246:13 - actually for the label so first let me
246:15 - go in into application
246:19 - form application form and let me select
246:22 - the label and for the label let me use
246:25 - Font
246:26 - weight 600 so just make the label
246:29 - slightly bigger or slightly um slightly
246:33 - bigger in size and then let me come in
246:37 - here let me say application form
246:40 - input and let me add a padding here as I
246:45 - type here you can see that it's very
246:47 - small I don't have a lot of space around
246:49 - let me add a padding of
246:51 - 8px so now there is it's it's slightly
246:54 - bigger let me make that 4 PX I think 4
246:56 - PX should be fine yeah so it's slightly
246:58 - bigger let me also increase the font
247:01 - size so that the text that I'm entering
247:03 - is of a bigger size 1.25 RM remember the
247:06 - base font size is 16 so 1.25 of that is
247:09 - 20 okay so now this is looking a little
247:11 - better and let me also add a margin top
247:14 - here so that it's not sticking to the
247:15 - label so margin top of 4
247:19 - PX yeah so this is looking definitely
247:22 - looking a little nicer and then I can
247:24 - put in the words Akash and is here and
247:25 - it's starting to look nice okay so that
247:28 - was the input for the full name let's
247:32 - then add email and we'll add a couple
247:34 - more and then we'll start
247:36 - Maybe copy pasting some in the interest
247:39 - of time so again label for I'm going to
247:42 - call the email email and I'm going to
247:45 - call this email as well the text that
247:47 - I'm going to put inside the label input
247:49 - type equals
247:51 - email and ID is email as well and name
247:57 - equals let's see email
248:00 - address and this is also
248:04 - required okay so now we have email to
248:07 - and once again let's add this BR so that
248:09 - this comes on the next line and I can
248:12 - see that this email is very close to the
248:13 - previous form so I'm just going to come
248:15 - in here and I'm going to
248:17 - say label
248:20 - margin
248:23 - 8px or
248:29 - actually let me just set the margin
248:32 - top to
248:36 - 8px that isn't doing much
248:39 - well let's just set the margin on the
248:42 - div okay so what's happening is that the
248:44 - label is an inline element just like
248:46 - span so you cannot set a margin for it
248:48 - let's set the margin for the div itself
248:50 - so application form
248:52 - div let us set a margin of
248:57 - 8px okay so now our application form we
249:00 - could even make this 16 if you want to
249:02 - make it just slightly more spread out
249:04 - now our application form is spread out a
249:06 - little better
249:08 - I think one other thing that I can do
249:09 - here is in the input I can just add a
249:12 - border radius of
249:16 - 5px so it's just slightly more rounded
249:19 - and Border color of
249:21 - gray or I could use or I could just set
249:26 - border 1 PX solid
249:30 - gray and now it's looking slightly nicer
249:33 - okay so we're just slightly making these
249:35 - a little nicer um let's add maybe what
249:39 - next so we wanted to have the phone
249:41 - number so let's grab the phone number
249:43 - here this is the class for phone
249:48 - number
249:50 - and yeah I think we can add this form
249:53 - group class to select the divs more
249:56 - easily I'm just adding the class form
249:58 - group for the div so that I don't need
250:00 - to select it like this I can simply
250:04 - say dot form group
250:11 - yeah okay so now we have the phone
250:13 - number and you can see here in phone
250:15 - number we've actually added a
250:16 - placeholder so we've added this thing
250:18 - called a placeholder what it does is it
250:20 - fills out an empty value that goes away
250:23 - when you try to fill something inside it
250:25 - okay so I am going to come in here and
250:28 - add a placeholder for the name as well
250:30 - so placeholder equals let's say John do
250:34 - and I'm going to come in here and add a
250:36 - placeholder
250:37 - attribute for the email as well let's
250:39 - say
250:40 - John or J do atex example.com
250:46 - okay so these are all various attributes
250:49 - that you have to specify and now we can
250:50 - see that we have this placeholder so
250:52 - this is looking nice
250:55 - and let's see maybe make
250:57 - this padding a little bigger maybe eight
251:00 - pixels look even nicer yep okay what
251:05 - next next we have the date of birth
251:06 - which is a date let me add that in here
251:08 - as well so now we are adding the date of
251:15 - birth okay now date of birth
251:17 - automatically gives us this nice date
251:19 - selector that's nice we can also specify
251:22 - Max and Min property for date of births
251:24 - in case you need that what next so next
251:28 - we have this position applied for which
251:33 - is a dropdown so here's how we create a
251:36 - dropdown so we go in
251:40 - here
251:44 - and let's see yeah we go in here and let
251:48 - us create an input let us create a
251:51 - label and let's say position applied
251:55 - for and let us give it for equal to
252:01 - position and let's add a br
252:04 - here okay so now we've just added the
252:07 - label
252:08 - and let us also give it the
252:09 - class form
252:16 - group and maybe I don't need a margin
252:19 - all around maybe I can have a zero
252:21 - margin at the I can have margin just on
252:24 - the top and bottom and the left and
252:25 - right margin can just be zero okay so we
252:28 - have the label position form group then
252:30 - we create the select okay so we put
252:33 - select and inside select we put
252:36 - options or option so what are the
252:39 - options we have we have a
252:41 - front-end
252:43 - developer we have a full stack
252:49 - developer we
252:51 - have let's
252:53 - see uh data
252:57 - scientist and we
253:00 - have what else we have a ml engineer
253:03 - right so these are the
253:05 - options now we have this nice select
253:08 - which has these options of course we may
253:10 - need to style it as well so again one
253:12 - trick I want to show you here is I want
253:14 - to apply these not just for input but I
253:16 - also want to apply these for select so
253:17 - I'm just going to add comma select and
253:19 - that automatically gives me this okay
253:22 - now I want to I want to tell you a few
253:24 - things you need to have in select you
253:26 - need to of course have the ID so that
253:28 - the position this is not compulsory but
253:30 - it's good to have so that the label is
253:33 - specified properly then of course you
253:34 - need to give it a name so then in the
253:36 - name I'm just going to say position
253:38 - applied that is what is going to be sent
253:39 - to the
253:40 - server then what else is it required
253:43 - yeah I want it to be
253:45 - required what else do we have here yeah
253:48 - so for each option you need to specify a
253:51 - value so what ends up happening is what
253:53 - you show on the screen and what is sent
253:55 - to the server may be two different
253:57 - things so for each option you have to
253:59 - specify a value so I'm just going to
254:00 - specify the value front
254:02 - end Dev of front end here and I'm going
254:05 - to specify the value
254:07 - backend or full
254:10 - stack and I'm going to specify the
254:15 - value data
254:21 - scientist and I'm going to specify the
254:25 - value ml
254:29 - engineer okay so this is just to tell
254:32 - you that what you show to the user and
254:34 - what you actually send to the server can
254:36 - be two different different things okay
254:38 - when the form is submitted the server is
254:40 - going to receive this value but the user
254:42 - is going to see this value in the drop
254:44 - down one last thing that is often done
254:47 - is you have an option with an empty
254:49 - value and that just contains an
254:51 - instruction which is
254:53 - Select position right something like
254:56 - that so the idea here is that by default
254:58 - you don't want to select any position
254:59 - otherwise that default position can get
255:01 - picked automatically you want the user
255:03 - to pick a position specifically and that
255:06 - is why you have the select position uh
255:08 - this is like the placeholder option in
255:09 - some sense and that is often given the
255:11 - empty value okay so that's the value
255:14 - then we have file inputs so file input
255:17 - simply has input type equals file and we
255:20 - are using file input for resume and you
255:22 - can also specify what kinds of files it
255:24 - can accept like PDF Doc and docx so let
255:27 - me just come in here let me put in the
255:29 - file input here as
255:32 - well so we have this file input so
255:35 - that's great and then we have this form
255:38 - group for the cover letter so for the
255:41 - cover letter we are using this text area
255:43 - component so in instead of input we are
255:45 - using text area and again you specify
255:48 - the ID you specify a name you can
255:50 - specify the number of rows that you want
255:52 - in the text area by default that can be
255:54 - increased by the user you can specify
255:56 - whether it's required and you can
255:57 - specify a placeholder as well but just
256:00 - know that you have to have a closing tag
256:01 - for the text area Okay so let's add the
256:04 - text area here as well let us come in
256:07 - here add the text area for the cover
256:10 - letter and now here we are asking the
256:12 - user to enter a cover letter as well
256:14 - again I'm going to come in here and I'm
256:15 - going to apply these Styles not just to
256:17 - input but also to text
256:20 - area and that way my text area is going
256:23 - to have a better colelection I might
256:25 - want to make the text area full BD so I
256:27 - can say form group text
256:30 - area width
256:35 - 100%
256:37 - and this way my text area is going to
256:40 - take up the whole width or at least let
256:42 - me set it to like about 80% let's say
256:45 - Okay so the text area is slightly bigger
256:47 - and you may also have to specify your
256:49 - fonts or font family for the text area
256:51 - in this case clearly it is picking up
256:52 - some random font family so you also
256:55 - specify font family let me specify
256:58 - Roboto because it is just some normal
257:00 - body text and Sans serif okay and now we
257:04 - have specified our text area as well
257:06 - okay last couple of things one is a
257:08 - checkbox so we're going to add a
257:10 - checkbox called I agree to the terms and
257:12 - conditions and all we need to do here is
257:14 - just specified type checkbox for the
257:16 - input and it's going to show a checkbox
257:18 - okay so now often for a checkbox the
257:22 - checkbox is created slightly differently
257:25 - because a checkbox you may require to
257:27 - actually show the input uh you may
257:30 - require to show the label next to the
257:31 - checkbox so often in the checkbox what
257:33 - you do is you put the input inside the
257:35 - label okay and what that does is if you
257:37 - click on the text as well that also
257:40 - takes the checkbox so that's good now
257:43 - one thing we might want to do is for the
257:45 - input checkbox I might want to make it a
257:46 - little bigger so I can do that again I'm
257:49 - going to show you another CSS trick here
257:52 - not something you need to know right now
257:53 - but I can say form
257:55 - group
257:57 - input and I can say only for the type
258:01 - checkbox so now I'm selecting in the
258:04 - class form group I'm selecting an input
258:06 - tag
258:07 - and I can say only those input text
258:09 - which have the type attribute set to
258:11 - checkbox and for them I want to use the
258:14 - width to be 16 pixels and the height
258:18 - also to be 16 pixels and that is just
258:20 - going to make the checkbox slightly
258:22 - bigger as you can see here okay that
258:25 - makes the checkbox bigger and finally we
258:27 - have the submit button so we just have a
258:30 - div form group input type submit value
258:32 - equals submit the value is going to be
258:34 - whatever you want to show on the
258:38 - actual button so you could say submit
258:44 - application okay like that and that is
258:48 - how you create a form so I'm just going
258:50 - to zoom out a little bit I'm going to go
258:52 - full um I'm just going to go to the
258:55 - normal size so now you have a banner now
258:57 - you have this description now you have
258:59 - job opportunities and then you have
259:01 - submit your application full name email
259:03 - phone date of birth Etc and you can fill
259:06 - out all the and then click submit
259:07 - application of course these are all
259:09 - required Fields so they will have to be
259:11 - filled in and if you want we can make
259:13 - the cover letter optional so let's do
259:14 - that so that we can submit without the
259:16 - cover letter for the purpose of testing
259:19 - let's bring this back
259:23 - here okay and let
259:27 - us remove required from here so that
259:29 - this is no longer required okay and now
259:32 - we should be able to submit an
259:34 - application but uh let's also add some
259:36 - styles for the submit button I think a
259:39 - nice blue color would be good to have so
259:41 - again I'm going to come in into Styles I
259:43 - am going to select form
259:48 - group input type equals
259:53 - submit and I am going to set background
259:57 - color to Blue and I'm going to pick a
259:59 - blue from my color scheme so maybe I'm
260:02 - going to pick blue
260:03 - 500 and I'm going to set that as a
260:05 - background color
260:07 - so that looks nice I may have to make
260:09 - the text color
260:11 - white so color
260:15 - white I can make the font
260:19 - weight five let's say
260:21 - 600 so the font weight is bigger so
260:24 - maybe 500 might do the
260:26 - job and I can maybe increase the
260:29 - padding 8
260:33 - PX maybe 16 PX make it a little
260:47 - bigger
260:50 - yeah yep okay so you can specify some
260:53 - things I think the padding is not
260:54 - getting specified here but you can uh
260:56 - specify it it's U just a matter of
260:58 - specificity I guess um but now my submit
261:02 - application button is actually looking
261:03 - nice and if I also want here's another
261:05 - property that you'll often use cursor
261:09 - pointer and what can what this does is
261:11 - this converts your cursor into a hand
261:13 - symbol when you have the submit uh when
261:15 - you hover over the button and you can
261:17 - also change the hover style you can
261:19 - change the color of the button when you
261:20 - hover over it so you can do all sorts of
261:22 - things and this is something that you
261:23 - should look up and then you should
261:24 - attempt to do but yeah at this page at
261:26 - this point you click submit application
261:28 - and that is going to uh submit the
261:30 - application so let's try that so we say
261:33 - Akash a b.com
261:37 - some number I'm going to pick a date of
261:39 - birth I'm going to select a position I'm
261:42 - going to select a file so I have a
261:43 - resume I'm going to add a cover letter
261:46 - I'm going to submit okay it doesn't do
261:48 - anything because we've not configured
261:50 - the form to do anything yet okay so what
261:53 - we need to do is we need to send this
261:55 - data somewhere normally this data is
261:56 - sent to a server but we don't have a
261:58 - server right now to process this data
262:01 - that is where we are going to use an
262:02 - online
262:03 - platform called form bold okay this is
262:07 - not something that you would do in the
262:08 - real world you can actually if you're
262:10 - building a personal website you can use
262:11 - form um what this does is this allows
262:14 - you
262:15 - to just provide an action for your forms
262:19 - that you are putting into your simple
262:20 - website static pages and it is then
262:23 - going to capture those responses and
262:24 - also send it to you over email so how
262:26 - about I just log in here into form bold
262:30 - and create a new form let's call it
262:34 - Jovian application form okay and any new
262:39 - responses that are filled into the form
262:40 - is going are going to be sent to this
262:42 - email and I'm going to create this form
262:44 - so you may have to verify your email to
262:46 - actually create the form but I'll let
262:47 - you figure that out okay and now let's
262:51 - open this form so let's go to the form
262:54 - settings and in the form settings you
262:56 - will see this integration option so
262:58 - let's click on integration and here it's
263:00 - going to give this Endo so just copy
263:03 - this Endo okay this is where we want to
263:06 - send our form data so copy that and come
263:09 - back here into the
263:11 - form and what we can do is we can say
263:14 - action
263:17 - equals this
263:21 - link I'm just going to put it all here
263:23 - so that you can see
263:26 - clearly action equals this link okay and
263:29 - we also have to specify a method and you
263:32 - can see how you can see an example of
263:34 - how how this form should be used so is
263:36 - this link and method is post so method
263:39 - equals
263:40 - post and let's just save that and since
263:44 - we want an HTML form with a file upload
263:47 - so I'm just going to select this option
263:48 - with a file upload so I think we also
263:50 - need to put in this ink type multiart
263:52 - form data okay now don't worry too much
263:55 - about what these mean whenever you're
263:56 - using a form you'll have to set these
263:58 - sometimes these will be set by your own
264:00 - server so we are going to look revisit
264:03 - forms in a lot of detail later but for
264:05 - now we just using a third party service
264:06 - that can capture these form responses
264:08 - for us when we hit the submit button
264:10 - okay let me save that and now I can come
264:14 - back here and I can reload the page and
264:16 - I can start filling something so Akash a
264:20 - b.com and put in a number put in a date
264:23 - here put in a full stack developer
264:26 - choose a
264:27 - file and put in some cover letter here
264:30 - agree to the terms and conditions and
264:31 - click submit now when we click submit it
264:34 - is going to send all the data and each
264:36 - data is going to be assoc each each
264:39 - piece of data picked up is going to be
264:40 - associated with the name property that
264:43 - we have specified the name attribute and
264:45 - it is going to be sent into the form
264:46 - okay so I click submit application and
264:49 - you can see that it has sent the data to
264:51 - this form and this form bold the service
264:53 - that we're using is asking us to maybe
264:55 - just verify traffic lights to prevent
264:58 - spam and once it checks that the form is
265:01 - submitted okay now I can come back here
265:04 - on the form bold page and I can go into
265:07 - the
265:08 - submissions you can see that one
265:09 - submission was obtained and these were
265:12 - the values that were filled in full name
265:13 - Akash cover letter empty and the file is
265:16 - not showing up because there's a way to
265:18 - view files maybe in some other way but
265:21 - they've accepted the terms so if a
265:23 - checkbox is ticked it is marked as on
265:25 - and then the form and then the date of
265:27 - birth all of it is present and the date
265:29 - at which this form response was created
265:31 - was also captured by Form T form bold
265:33 - but that is something that you can pick
265:36 - uh on your own server okay um so the
265:38 - idea is not to tell you that you have to
265:40 - use form bold for all your forms the
265:42 - idea is to tell you that every
265:44 - form requires an action to be specified
265:48 - and a method so method and action is
265:50 - something we'll talk about in a lot of
265:51 - detail later so don't get confused right
265:53 - now but the form data when is collected
265:57 - and sent to the server which processes
265:59 - it in whatever way it wants it can
266:01 - process it and send an email it can
266:02 - process it and maybe make a database
266:04 - entry or it can process it in just show
266:06 - you on the screen like that however it
266:09 - is okay but this is how you create HTML
266:12 - forms by creating these um by picking
266:15 - these tags and by using the input and
266:17 - the label tags and then styling them as
266:21 - required so to deploy this web page once
266:23 - again we can go to static. apppp and it
266:26 - is a simple application that a simple
266:28 - web application that can be used to
266:29 - Simply upload a zip file I'm going to
266:31 - come back here I am going to Simply zip
266:34 - up this folder my second web page let me
266:36 - just zip it
266:41 - compress this was a copy let me let me
266:43 - create a zip file
266:46 - compress okay a zip file has been
266:48 - created now I'm going to upload it I'm
266:51 - going to select this ZIP file and I am
266:54 - going to just pick whatever domain name
266:56 - it's giving me I'm going to put in my
266:59 - email so I'm just creating a new account
267:01 - here so that's where I'm putting in this
267:03 - plus 10 to create a new account
267:06 - um
267:09 - Sydney
267:11 - Jovian let me create a
267:15 - password let me accept the terms and
267:19 - let's continue and it should ask it
267:21 - should upload the Cs the file so of
267:24 - course this contains our index.html it
267:28 - also contains the team and the banner
267:30 - files and it contains maybe a couple of
267:31 - other the styles. CSS file and I need to
267:34 - verify my email so I'm just going to go
267:36 - in into email and verify my
267:41 - email let's verify my email
267:44 - address and now what we have done is we
267:46 - have taken the code that we have written
267:48 - which contained the HTML file the CSS
267:50 - file and a couple of images we've put
267:52 - that in a CSS put that in a zip file and
267:55 - we've uploaded that zip file to static.
267:57 - apppp and that zip file should now get
268:00 - deployed as a website at careful b.
268:03 - static. apppp we have the website
268:06 - deployed we have this header over here
268:08 - do something great we have some
268:10 - information about Jovian now it is using
268:12 - the colors and the fonts that we want on
268:14 - Jovian we have these nice links that are
268:17 - colored using our theme our primary
268:19 - color we have these job opportunities
268:21 - over here and then we have a place to
268:23 - create and submit an application and I
268:24 - can go in here and I can say Akash NS I
268:28 - can say Akash NS chan.com I can put in
268:32 - my phone
268:34 - number
268:37 - and I can select my date of
268:39 - birth go back select a date of birth
268:43 - from long ago and if I try to submit
268:46 - without filling everything I'll have to
268:48 - fill it I can select a position let's
268:50 - say first track developer I can upload a
268:52 - resume I can pick a cover letter so this
268:55 - is a cover letter I agree to the terms
268:59 - and conditions and I click submit
269:01 - application okay and that pushes the
269:05 - data form T form bold that is the third
269:08 - party online service we are using so our
269:10 - website is on static. apppp and it is
269:12 - sending data to form bold because
269:14 - static. apppp cannot run a server it can
269:16 - simply show your pages as they are okay
269:20 - and once that is submitted I should be
269:21 - able to check in on my formboard
269:23 - dashboard that there is a second
269:25 - application by me this is the cover
269:27 - letter this is the phone datee of birth
269:30 - terms accepted Etc okay so you can also
269:33 - see it in more detail over here and now
269:35 - we can go back and we can fill out the
269:37 - form again okay so yep you can try this
269:40 - out and there is one last topic which we
269:43 - have not gotten to today which is adding
269:45 - meta tags so there are a bunch of these
269:48 - tags that go in the head tag and what
269:50 - they do is they determine what shows up
269:54 - when you share that page online or let's
269:57 - say when you share that page on Facebook
269:59 - what is this preview image that should
270:00 - show up what is the page title that
270:02 - should show up what is the page uh
270:04 - description that should show up that is
270:06 - something that you can actually
270:07 - configure within HTML similarly when
270:09 - Google finds your page what is the
270:11 - information it sees and it displays on
270:15 - in a search result that is also
270:16 - something that you can configure using
270:18 - HTML meta tag but I think this is a good
270:21 - point to stop so quick
270:24 - recap we started by looking at this
270:27 - problem statement to improve the
270:29 - previous Jovan careers website where we
270:31 - had this list of jobs and this
270:33 - application we wanted to create a table
270:35 - of jobs jobs and we wanted to also
270:37 - create an application form then we used
270:41 - the starter code which is my first web
270:43 - page which basically contained the code
270:45 - for this and we also want to make
270:47 - aesthetic Improvement so first we
270:49 - changed the wireframe so we came up with
270:51 - this we had this initial wireframe here
270:54 - which looked a bit
270:59 - like let's see yeah we had this initial
271:02 - wireframe which looked like that we
271:04 - wanted to improve this wireframe and so
271:06 - we made it look like this so we have
271:09 - this table and we have this submit your
271:11 - application form so that gave us a
271:13 - visual reference for what we wanted to
271:15 - create and of course this is the
271:16 - iterative method of software development
271:18 - you build something deploy it let people
271:20 - use it then you come back and improve it
271:23 - and then we came in and we created a
271:25 - table so we created tables using the T
271:28 - table TR and TD tags and also the th
271:30 - tags so you first create a table tag you
271:34 - then create rows using using the TR tag
271:36 - then you create heading cells using th
271:38 - and data cells using TD and we just did
271:42 - that we looked at some data that we had
271:44 - put onto a spreadsheet and we just uh
271:47 - transferred that into HTML code and that
271:50 - allowed us to create a table that looked
271:51 - like this of course we this is not a
271:54 - very pretty looking table so the next
271:55 - step was to style the HL table to make
271:57 - it look a little nicer and the basic
271:59 - styling that we did with CSS was adding
272:01 - borders around the table and the table
272:03 - cells you can see here we've added
272:05 - borders for the jobs table um also we've
272:10 - said border collapse equal to collapse
272:11 - otherwise we get these double borders
272:13 - that we were looking at earlier so to
272:16 - avoid the double borders like this you
272:18 - have to set the Border collapse property
272:20 - just something to keep in mind you can
272:22 - always look it up then we also wanted to
272:24 - make the table full width so that it
272:26 - occupies the entire width of the parent
272:29 - element which itself is limited to about
272:31 - 800 pixels at the center of the screen
272:34 - um if the browser is large enough so
272:37 - then we also left aligned the headers
272:39 - initially and then we centered align
272:41 - them again over time then we also try to
272:44 - show different background color for the
272:45 - header rows and different background
272:47 - colors for the alternate rows of the
272:50 - table and that is all achieved using CSS
272:54 - and this is what our output looked like
272:56 - then we went ahead and we looked at some
272:58 - Advanced table row and column merging
273:01 - using the row span and call span
273:03 - specifically the job title salary and
273:05 - posted on were configured to span two
273:08 - rows and location was configured to span
273:10 - two columns and then we added two sub
273:12 - column City and Country under location
273:14 - and then we also split the the data
273:17 - itself into City and Country except for
273:20 - remote where we just set it to span two
273:22 - columns and we also modified the CSS
273:24 - Styles a little bit to better represent
273:27 - the data in this new structure so this
273:30 - is what our table looked like after
273:33 - styling then we learned a little bit of
273:35 - about text Styles in CSS we learned
273:37 - about how to use external fonts from
273:39 - Google fonts so you choose a font on
273:41 - Google fonts you add those fonts so you
273:43 - select a bunch of fonts and you add them
273:44 - to your CSS and then you use that font
273:47 - in your CSS using font
273:50 - family and we use the heading and body
273:52 - fonts specifically we use the inter font
273:55 - for our headings that is what we use at
273:57 - Jovian and the Roboto font for body you
273:59 - can use any other pair there are a bunch
274:01 - of pairs you can find online and to add
274:03 - them to our web page we simply need need
274:06 - these link tags and additionally we also
274:09 - need these CSS Styles um to use these
274:12 - fonts So within the body we've added
274:14 - some fonts and then for um I added the
274:17 - Roboto font family and within
274:20 - the H1 to H6 this so within the headers
274:24 - we've used the inter font family okay
274:27 - then we saw some common text Styles some
274:30 - common text CSS properties of course
274:31 - there's font family then there is font
274:33 - size and there are various ways to
274:34 - express size and CSS there is font
274:36 - weight which is how thick each character
274:38 - is so you can use 400 which is normal or
274:41 - 500 600 700 800 there is line height
274:44 - which is how much space there should be
274:46 - between lines about 1.2 is common but
274:48 - you can go 1.5 you can go smaller as
274:51 - well there is font style which you can
274:53 - use to italicize the text and you can
274:55 - check out other properties as well there
274:57 - is text transform you can make
274:58 - everything upper case you can use
275:00 - sentence case which is to capitalize the
275:02 - first letter of every word or you can
275:05 - use
275:06 - lowercase and there is text decoration
275:09 - which can be used to underline overline
275:10 - or strike through text okay again you
275:12 - have to experiment with these and only
275:14 - then you become familiar and you don't
275:16 - have to remember them you can always
275:17 - look them up I don't remember them after
275:19 - 15 years of web
275:21 - development then we looked at how to
275:23 - express sizes in CSS so we have these
275:25 - absolute sizes or pixels and we have a
275:28 - bunch of other absolute sizes which are
275:30 - not commonly used in relative sizes
275:32 - percentages are more common when we are
275:34 - specifying widths or Heights for divs
275:37 - but for fonts we often use M and R M
275:41 - expresses the current elements font size
275:44 - as a fraction or a proportion of the
275:47 - parent elements font size and REM
275:50 - expresses the current elements font size
275:51 - as a proportion of the default font size
275:54 - for the entire page which is set on the
275:56 - HTML tag I believe okay there's also
275:59 - these viewport Dimensions that is left
276:00 - as an exercise for you in terms of
276:04 - sizing uh we had some guidelines that
276:06 - for body text 16 pixels is the common
276:08 - size and smaller text can be 875 RM or
276:11 - 14 pixels and larger text can be 1.25 r
276:15 - or 20 pixels and then for headers you
276:17 - can use different sizes from 2.5 RM to 1
276:20 - RM from H1 to H6 and we prefer using
276:23 - Rams for sizing because you can simply
276:25 - go and change the HTML tag text or the
276:29 - root text of the body of the page and
276:31 - everything will get updated
276:32 - automatically okay
276:35 - and then you can of course specify these
276:37 - Styles in CSS so again type out all the
276:40 - code yourself that is how you understand
276:41 - this you should spend four five 6 hours
276:44 - this week just typing out all this code
276:46 - on your own then we looked at some
276:48 - guidelines around colors uh the first
276:50 - thing we looked at was how to use colors
276:52 - in CSS of course we have a bunch of
276:54 - inbuilt color names but often you will
276:57 - find that they do not look very good
277:00 - when you actually use some of these
277:01 - inbuilt color names but you have a bunch
277:03 - of these you can use from and if you
277:04 - want use an inent color um start with a
277:07 - color that is very muted very light so
277:10 - maybe just a light the last set of
277:12 - colors here and of course you can use
277:15 - RGB red green blue and you can specify
277:17 - value of 0 to 255 for red green and blue
277:21 - respectively and that is going to create
277:23 - a color for you zero is dark uh 255 is
277:27 - light so you can go from black to white
277:30 - if you vary all of them equally with
277:31 - Grays in between or if you pick
277:33 - different values for red green and blue
277:35 - you can create millions of color
277:38 - combinations now another way to
277:40 - represent he uh red green blue colors is
277:42 - using hexad decimal codes and this is
277:44 - the hex or the base 16 representation of
277:47 - red green and blue combined together
277:49 - into a single string and this is what
277:51 - you often find on the internet because
277:52 - these are easy to copy and paste around
277:55 - instead of
277:56 - RGB and then we have rgba colors with
278:00 - transparency so you can use rgba where
278:03 - you can specify red green blue values
278:05 - you can specify the opacity value one is
278:07 - completely opaque and 0 is completely
278:09 - transparent and 0.5 is somewhere in
278:11 - between so that the background color is
278:13 - going to show through or the background
278:14 - image is going to show through then we
278:17 - have CSS color properties so you can use
278:21 - color background color border color box
278:24 - Shadow text Shadow all these properties
278:26 - that have color and there are some other
278:27 - properties as well that can use color
278:29 - Okay in terms of picking good colors
278:32 - ideally you should be using color
278:33 - palettes you shouldn't be picking random
278:35 - colors from the internet here and there
278:37 - a good color palette tool is Tailwind
278:40 - colors.com where you can just use maybe
278:44 - one of these as the primary color and
278:46 - then use a bunch of grays for text and
278:48 - maybe a secondary color if you need to
278:50 - use a second color okay and just use
278:52 - shades of the same color also have
278:54 - enough contrast keep it simple don't use
278:56 - too many colors and don't use colors
278:59 - just because you can sometimes black
279:01 - over white is as good as it needs to get
279:04 - now also make sure that the colors are
279:06 - accessible to people with color vision
279:08 - deficiencies okay there are some
279:10 - examples of good and bad color schemes
279:12 - that you can check out in general it's a
279:14 - good idea to maybe explore the color
279:15 - schemes of specific websites and for
279:18 - text specifically for headings you can
279:20 - use 90% black with a tinge of blue or
279:23 - green as per the website that you're on
279:26 - uh that you're designing for body text
279:29 - you can use 75% black or 4444 for
279:31 - secondary text you can use 60% black and
279:34 - for for disabled text you can use 40%
279:36 - black so these are good rules of thumb
279:38 - to make your pages look good and we've
279:41 - just applied this to the various headers
279:44 - and the various headers Footers Etc in
279:48 - our code okay then we looked at forms in
279:51 - HTML so you can create forms using the
279:53 - form tag and in the form tag you can
279:56 - then specify labels and inputs and
279:59 - inputs can have various types and
280:00 - normally we put these within div so that
280:02 - each shows up on a separate line and of
280:04 - course you can Al add a br tag after
280:05 - each label to show the input on the next
280:07 - line after the label and there are
280:10 - various types of form inputs text
280:12 - checkbox radio dropdown so most of them
280:14 - use the input tag some of them use a
280:17 - different tag for example there's a
280:18 - select tag that is used for creating
280:20 - drop downs along with the option tag and
280:22 - then there is the text area tag which is
280:25 - not a self-closing tag that's one thing
280:26 - to remember and we have date input
280:29 - password input email input these are
280:30 - again all inputs okay and we have number
280:32 - inputs as well so then we created the
280:34 - this actual application form here which
280:36 - was which had a bunch of fields and we
280:38 - also styled it using CSS so we looked at
280:41 - some various interesting ways to select
280:43 - things so for example we selected the
280:45 - label change its font weight we selected
280:47 - the input select text area all together
280:50 - we selected input of type checkbox using
280:53 - this special kind of selector and input
280:55 - of type submit which is a submit button
280:57 - using the special kind of selector so
280:59 - you have all these interesting ways to
281:00 - select and style forms and over time
281:02 - we'll start using Frameworks so you
281:04 - won't have to do much of this styling on
281:05 - your own anyway and finally once we did
281:09 - all that we also
281:11 - then deployed this website to uh we also
281:16 - then used an online platform called form
281:19 - bold so we signed up on form.com and we
281:23 - created a new form inside form.com
281:25 - copied the action that we need to set up
281:28 - into our form and we have some example
281:30 - text here so we need to put the action
281:32 - method and apparently this ink type into
281:34 - our form and what that does is when the
281:37 - user H submit this data is going to be
281:39 - sent to this site called form bold okay
281:43 - and that's it so we just need to add
281:46 - these few lines and we can send our form
281:47 - data wherever we want it can be a
281:49 - completely separate site but over time
281:51 - we'll of course build our own server
281:52 - which is going to accept this form data
281:56 - and that's what we looked at you can
281:57 - check out the section on HTML metatags
281:59 - if you need and finally deployment was
282:01 - really straightforward all we did was
282:03 - create a zip file and that Z file
282:06 - contained our index.html styles.css team
282:09 - and banner JPG files and we took that
282:12 - zip file and uploaded it on static.
282:14 - apppp and when we uploaded it on static.
282:17 - apppp it created this free site for us
282:19 - and in this free site we simply deployed
282:23 - it and we tested it out hello and
282:25 - welcome to this live workshop on turning
282:29 - a figma mockup into a web page and this
282:32 - is completely unscripted I'm I'm going
282:34 - to pick up a design and I'm going to
282:36 - implement from scratch something that
282:38 - I've not practiced before so you will
282:40 - see me making a lot of mistakes you will
282:42 - see me uh you will see things go wrong
282:44 - but I hope to show to you what happens
282:48 - when you are going through the process
282:50 - of turning a design into a proper web
282:52 - page what are the challenges you
282:53 - encounter and how can you answer or
282:55 - overcome some of those challenges so
282:58 - with that let's get started today we are
283:00 - going to pick up a mockup from figma by
283:03 - the way figma is a design tool so at
283:06 - most companies you will find designers
283:08 - specifically UI or user interface
283:10 - designers use a tool like figma to
283:13 - create mockups of web pages and then as
283:16 - a web developer you will have to turn
283:18 - those mockups into proper HTML CSS or
283:21 - sometimes you might use a framework like
283:22 - react
283:23 - Etc and if not figma sometimes people
283:26 - use a tool called sketch sometimes they
283:28 - use some other tools but every design
283:30 - tool more or less looks similar and let
283:33 - us open up this mockup so typically as a
283:35 - developer you will receive a read only
283:38 - copy of the mockup and you are going to
283:40 - be able to then inspect specific areas
283:43 - within that mockup so looks like this is
283:46 - the web page that uh we've picked out by
283:48 - the way I've picked this out from the
283:50 - figma community which is where a lot of
283:52 - free such free web pages can also be
283:55 - found in case you want to practice and
283:57 - this is what we'll try and create today
283:58 - so we have this web page where uh this
284:01 - is created by feri feri sahen and looks
284:04 - like have their phone number email and
284:06 - we have a picture not sure if it's a
284:08 - stock picture or it's a picture of the
284:10 - person who created the design uh then
284:12 - there is this this is often called the
284:14 - hero section this is often called the
284:16 - section where um you have some big text
284:19 - and maybe a a call to action or a button
284:22 - in this case that button seems to be
284:23 - contact me then there is a section
284:26 - called what I do talking about his uh
284:28 - developer and designer experience so
284:30 - this looks to be a personal website and
284:33 - there is some information about front
284:35 - end development backend development
284:36 - interface development that he's talking
284:38 - about here then there is information
284:40 - about some of his projects now of course
284:42 - most designers will just put in some
284:44 - random text or lurm ipsum text as this
284:47 - is called most designers will put in a
284:50 - lorm Ipson more a placeholder text but
284:53 - of course in the real world when this
284:54 - when this website goes live some actual
284:56 - text can come in here okay so this will
284:58 - be information about the projects
285:00 - created by feri and then there is also
285:02 - this uh uh footer at the bottom all
285:05 - right um there's actually a more uh let
285:08 - me just sign up here so that we can
285:09 - actually see this and I'll be able to
285:11 - inspect specific parts of this web page
285:13 - I'll be able to look at the fonts colors
285:15 - and things like that and in fact I am
285:17 - going to pick a slightly harder version
285:19 - of this so this is what is given as an
285:21 - assignment in one of the courses that we
285:23 - are running this is in fact the first
285:24 - assignment on HTML and CSS but I'm going
285:26 - to pick a slightly harder version of
285:28 - this so let me just find that so I'm
285:30 - going to use this extended design mockup
285:33 - uh something that is is actually a
285:35 - little bit harder so here now we have
285:38 - not just the same hero section but we
285:40 - also have this in this uh skills and
285:42 - project section as before but we also
285:44 - have the section called pricing which
285:46 - seems to have like a
285:48 - pricing a bunch of pricing elements
285:51 - sharing information about various
285:52 - services and we also have this section
285:54 - about frequently asked questions so what
285:56 - we'll do is we'll try and cover some of
285:58 - these more advanced uh Design Elements
286:01 - as well and maybe we'll also try and add
286:03 - some of these background element so
286:05 - there seems to be this background
286:06 - element over here there seems to be this
286:08 - background element here and there seems
286:09 - to be this line over here that shows up
286:12 - just below WordPress developer so we'll
286:14 - see how much of this we can cover I have
286:15 - no clue if we'll be able to touch on all
286:17 - of this within the hour or so that we
286:19 - have but uh whenever you're given us a
286:22 - design mockup this is where you should
286:24 - start you should start by just studying
286:25 - the page and understanding what's on it
286:27 - identifying the various sections within
286:29 - the page and I've actually laid out a
286:32 - step by-step process that we will try
286:33 - and follow today very very roughly uh
286:37 - but the prerequisites that I'm assuming
286:38 - here are HTML so I'm assuming here that
286:40 - you have some knowledge of HTML I am
286:43 - assuming here you have some knowledge of
286:44 - CSS and I'm assuming here you know how
286:46 - to use a code editor like Visual Studio
286:48 - code if you don't then you should check
286:50 - out some beginner friendly tutorial or
286:52 - come join our uh full stack developer
286:54 - boot camp where we cover all of these in
286:56 - a lot of detail okay so the first thing
286:59 - is to inspect the design mockup now of
287:01 - course we've opened up the link and we
287:03 - have created cre an account on figma so
287:06 - we can actually inspect the mockup and
287:09 - once you've created an account you can
287:10 - go into this inspect tab on the right so
287:13 - if I just let me just zoom in here a
287:16 - little bit so that you can see things a
287:17 - little
287:18 - better so on figma you have this inspect
287:21 - Tab and this is this inspect tab gives
287:25 - you a lot of very powerful details that
287:28 - you can directly translate into things
287:30 - like CSS properties colors fonts Etc so
287:33 - let's let's say I want to check what
287:35 - exactly is the background color here or
287:39 - maybe the background color for the
287:40 - entire uh for the entire design you can
287:43 - see here that the background color for
287:45 - this entire design seems to
287:47 - be over here F ff8 F0 all right so that
287:51 - is how I can pick out the background
287:52 - color and seems like this particular
287:55 - design was created with a width of 1440
287:59 - pixels and a height of 3596 pixels so
288:02 - 1440 piece is a common width setting
288:05 - that people use so we're going to use
288:07 - that same width setting and I can go
288:09 - into individual sections so I can go
288:11 - into this particular section here and
288:12 - here I can see okay this is the width
288:14 - height Etc this is the actual text in
288:16 - case I want to copy it the content um
288:19 - this is the typography so it seems like
288:20 - the font used is leagues pattern and
288:23 - then there is a certain font weight
288:25 - there is a certain font size so all of
288:27 - this information is going to be useful
288:28 - when we all when you start putting in
288:30 - some of the CSS for our page and there's
288:32 - a bunch of information about the Cs CSS
288:34 - as well that we'll try and use later
288:36 - okay so first thing you should do is
288:39 - just inspect a few things and figure
288:40 - things out understand the dimensions and
288:42 - styles of various components and
288:45 - identify the fonts used on the page so
288:47 - that we can find them on Google fonts so
288:50 - for example the F font used here on this
288:52 - page is called League Spartan you can
288:54 - see here so I can just come in into
288:56 - Google fonts and I can search League
289:00 - Spartan and here is that font right so
289:04 - most fonts that designers use will be
289:06 - picked from goog will be available on
289:08 - Google fonts so you will have to then
289:10 - include those fonts within your uh web
289:12 - page to actually start using them okay
289:15 - you might also want to export the images
289:16 - as PNG or JPEG files so here for example
289:19 - in this mockup we have this image and
289:21 - this image need may need to be exported
289:24 - so you can just go to the export Tab and
289:26 - you can just press plus and you can
289:28 - export this image so let me just export
289:30 - this image as let's see uh let me just
289:33 - call call it hero image so this is since
289:35 - this is part of the hero section the top
289:37 - section is often called the hero section
289:38 - I'm just going to put it on my desktop
289:41 - and call it hero image right and
289:42 - similarly if there were other images on
289:44 - the page you could also export those
289:45 - images we don't have to do it
289:47 - immediately we can do it slightly later
289:48 - as well all right so that would be step
289:51 - one inspecting things but let's now
289:54 - start coding so step two is to set up
289:56 - the basic page structure and styles and
289:58 - then step three is to actually go ahead
290:00 - and implement the web page section by
290:01 - section so first I'm just going to
290:03 - create a folder on my desktop and open
290:05 - it up in Visual Studio code I'm not
290:07 - going to use git or anything here I'm
290:10 - just simply going to let me see let me
290:12 - create a new folder and let me say let
290:15 - me call it uh let me give it a
290:18 - name figma to web page and in this
290:23 - folder I'm also going to move in my hero
290:25 - image that I just downloaded and I just
290:27 - want to open up this folder in Visual
290:29 - Studio code so let me just open up
290:32 - visual studio code this is the code
290:34 - editor that is often used by web
290:36 - developers and on Visual Studio code I'm
290:38 - just going to go to file open folder and
290:42 - I'm going to navigate to the folder on
290:44 - my desktop figma to web page so here I'm
290:46 - selecting the folder figma to web page
290:48 - and I'm going to click open all right so
290:51 - now we have this folder figma to web
290:54 - page over here and in this this folder
290:57 - has been opened up in Visual Studio code
291:00 - and now I can start developing so I can
291:01 - create a new file and I can call this
291:03 - file
291:04 - index.html and this is going to be my
291:06 - HTML file which is going to contain all
291:09 - of the HTML code and I'll add a CSS file
291:11 - later on as well and you can see that
291:13 - the same file got added here too and let
291:15 - us put some very basic content into this
291:17 - file H index.html let us just put the
291:20 - HTML tag again I'm assuming here you
291:22 - have some knowledge of HTML but in case
291:25 - you don't um take a a very basic
291:28 - tutorial should be sufficient to follow
291:30 - along with what we're doing here now
291:32 - within the HTML tag we generally have a
291:33 - head tag and a body tag the head tag is
291:35 - where we are going to put all the links
291:37 - like CSS JavaScript fonts Etc and we
291:40 - also put a title here so let's give this
291:43 - a title what is this is the personal
291:45 - website for feri sahin so f e r d i s a
291:49 - h i n so let's just put f e r d i s a i
291:53 - n for the sahin and let us uh in the
291:56 - body let just let us just create a div
291:58 - and let us just put hello world here in
292:01 - the div Okay so I've done nothing here
292:05 - nothing so far I've just created a
292:06 - folder in that folder I've created an
292:08 - index.html file and that index.html file
292:11 - now has some HTML content very basic
292:13 - stuff and now I can open up this
292:16 - index.html file in a browser so I can
292:18 - just double click and here you can see
292:20 - that the file has been opened up in a
292:21 - browser over here if I zoom in a little
292:23 - bit and now we are ready to get started
292:27 - so let me just put this on the side and
292:30 - I'm going to close this sidebar for now
292:32 - as well so so now we have done the first
292:36 - thing we've created a folder on our
292:37 - desktop opened it up in vs code we ready
292:39 - to go then we are going to create an
292:42 - index.html file and we are also going to
292:44 - create a styles. CSS file that is
292:46 - something that we will also need to add
292:49 - where we are going to add all our CSS
292:51 - and we have copied over the image that
292:53 - we were using here there's just one
292:54 - image so let me create another file
292:56 - called styles.css
292:58 - all right perfect I've created a file
293:01 - styles.css this is where my tech my CSS
293:04 - is going to go and now I need to
293:06 - incorporate the styles.css file I need
293:08 - to link this file from index.html into
293:12 - my uh so that I can use the styles from
293:14 - this page all right and I'm just going
293:16 - to search so how to link CSS file in
293:21 - HTML page I should be knowing this but I
293:24 - keep forgetting this so I just look it
293:26 - up so HTML Styles CSS how to add CSS all
293:30 - right and there are three ways to add
293:32 - CSS we want to add the external CSS file
293:35 - so the external CSS file is simply we
293:37 - simply do this link Rel equal to
293:39 - stylesheet and href equals my style.css
293:43 - so I'm just going to add that link Rel
293:45 - equal to stylesheet of course in this
293:47 - case it's not my style.css it is
293:49 - styles.css that is the CSS file that we
293:53 - using and this seems to be this doc type
293:56 - HTML that is there here so let me just
293:58 - put in this HTML here as well okay all
294:01 - right so now we have set up the ind. uh
294:04 - the HTML file we have set up the styles.
294:06 - CSS file and we can verify that things
294:08 - have been set up by let's say going into
294:11 - an going into the CSS file and adding
294:13 - some Styles let's say let's add a
294:15 - background color antique white and let's
294:18 - save it let's reload the page and you
294:20 - can see that the color of the page the
294:22 - background color has changed all right
294:25 - so I'll just reset that for now and get
294:28 - back to where we were perfect so now the
294:31 - next thing for us to do is to add the
294:33 - head title which we've done already the
294:35 - link tag for the style and the body and
294:38 - maybe add section wise divs so we have a
294:41 - bunch of sections here let me come back
294:43 - here into the design so I'll call this
294:46 - the hero section uh and you can see here
294:48 - even the designer has called it the hero
294:50 - section so this is the hero section then
294:52 - under the hero section we have
294:55 - this what I do section and under the
294:58 - what I do section we have this project
294:59 - section and under under the project
295:01 - section we have this pricing section and
295:04 - the question section all right so let's
295:06 - just create a bunch of divs so we have a
295:09 - top level div called hero then let's
295:12 - create another div called what I do and
295:17 - then let us create another div
295:20 - called
295:22 - projects then let us create another div
295:24 - called pricing let us create another div
295:27 - called questions and let us create
295:30 - another div called putter there's also
295:33 - that black footer at the end so I am
295:36 - going to have another thing for that as
295:38 - well so 1 2 3 4 5 and six so we have six
295:43 - sections and let's reload that and this
295:46 - is we are this is what we're hoping is
295:47 - going to eventually turn into the actual
295:50 - web design the page that we are looking
295:51 - at okay perfect so now we've created
295:54 - these sections what next set up the
295:56 - basic Styles header body font family
295:59 - text size Etc so let's start setting up
296:01 - some of the basic Styles here okay first
296:04 - thing first is the background of the
296:06 - entire page so I'm just going to go and
296:08 - select the entire uh this is called a
296:10 - frame in figma so I can just click on
296:12 - the frame name and get the frame and
296:14 - looks like this is the color that is
296:15 - being used here so I'm going to go in
296:18 - here and I am going to come into
296:20 - styles.css and for the body I am going
296:23 - to set background color to this color uh
296:27 - okay I think I didn't need to type yeah
296:29 - so background is this color and now
296:31 - we've added the background so we start
296:33 - starting to make progress we've added
296:34 - the background Step One is done what
296:37 - next well I might need to just study the
296:39 - fonts that are used on the page and
296:41 - include those fonts from Google fonts
296:44 - into my project so here is one font
296:47 - there is this font called leag Spartan
296:49 - that seems to be used here so leag
296:51 - sparton okay I want to use the leagues
296:53 - sparton font and I found it on Google
296:56 - fonts so let me just seems like I have
297:00 - some selections here already let me get
297:01 - rid of all these selections so that I
297:04 - can go ahead and do this from scratch so
297:07 - leagues SPN is the font I want to use
297:09 - and let's see let's get all the weights
297:14 - and we will get rid of some of the
297:15 - additional weights so Google fonts is a
297:17 - place where you can find all kinds of
297:18 - fonts and to incorporate a font into
297:20 - your website you can just add a bunch of
297:24 - styles of the font so you can see that
297:26 - there are various font weights there's a
297:28 - thin font there's a thick font regular
297:30 - font and all so I'm just grabbing all of
297:32 - these so that I might need to use any of
297:35 - them I'm not sure I'm grabbing all but
297:36 - later on I can go in and edit the uh the
297:39 - link tag or whatever I incorporate so
297:41 - that I don't uh um I don't have to worry
297:45 - about including additional fonts that
297:47 - I'm not using but just to give you an
297:49 - idea what you're going to get here is
297:51 - let's say I close this so once you add a
297:53 - bunch of fonts you can see this view
297:56 - selected families button on the top
297:57 - right and from there you can check you
298:00 - can review that okay for leaks pattern
298:02 - you have selected a bunch of these fonts
298:04 - and then to use that font on your
298:06 - website you can then use a link tag so
298:09 - to use the link tag you simply copy all
298:12 - of these and then you go and add that
298:14 - within the head tag of your HTML page
298:17 - but of course leaks PN is not the only
298:19 - font there are other fonts here as well
298:21 - so let me go and check what other fonts
298:23 - are being used so that I can just
298:24 - incorporate all of them into my website
298:26 - at once okay now this font over here
298:29 - seems to be popins so Poppins seems to
298:32 - be a font that is used here and there is
298:33 - this font inter that seems to be used
298:35 - here as well this seems to be popins
298:37 - this seems to be leaks pattern this
298:39 - seems to be popins this seems to be
298:42 - enter and popins okay so from what I'm
298:45 - gathering here there there seem to be
298:47 - three fonts here one is the font that is
298:49 - used for very big large headings then
298:52 - second is the font that is being used
298:54 - for these uh smaller headings or section
298:57 - headings or big text and then third is
298:59 - the body text the actual body text and
299:01 - that seems to be enter
299:03 - so let me grab popins and let me grab
299:05 - enter and then we'll then we'll add all
299:07 - these fonts into our web page so let me
299:10 - search for the font popins so let's go
299:13 - back to Google fonts let's
299:15 - go
299:17 - popins okay that is the popins font I am
299:22 - just going to select all the variations
299:23 - right now probably not the best idea I
299:25 - should probably check with the designer
299:28 - which all we need to use but it's okay
299:30 - we'll go and fix this
299:32 - later
299:33 - okay I am I have selected a bunch of
299:35 - these
299:36 - fonts all right looks like there's a lot
299:39 - of these so I've added the popins font
299:41 - let me go back in let me search for the
299:43 - inter font and I'm going to get a bunch
299:45 - of variations of the inter font as well
299:48 - again I'll just select all of them just
299:50 - so that we don't have to worry about
299:52 - missing any important
299:54 - fonts looks like we got the inter font
299:56 - as well okay great so now you can see
300:00 - that our link tag has been populated
300:02 - over here so we have this link Rel
300:04 - preconnect etc etc and over here this is
300:06 - the specific area where we have names of
300:09 - fonts I can zoom in a little bit you can
300:11 - see that we have names of fonts and then
300:13 - weights of those fonts as well so let's
300:14 - just copy that entire link tag and let's
300:19 - go in and put that link tag into our
300:23 - head so I'm just pasting the link tag
300:25 - here and I'll just right click select
300:29 - format document so that it it just shows
300:31 - up a little nicely and now we have
300:33 - Incorporated all the fonts into our page
300:36 - two of course we've not started using
300:39 - them we've just Incorporated them so no
300:41 - change happens on the page itself but
300:44 - let's come back here into the page and
300:46 - let's see so we have it looks like inter
300:49 - is the main body font so I'm just going
300:51 - to come in here into styles.css and into
300:54 - the body I'm going to add font family
300:57 - enter um actually I can just copy this
301:00 - from yeah I can just copy this from fig
301:02 - by itself I can just click the copy
301:04 - button and that's going to copy all of
301:06 - these things so font family enter the
301:09 - base font size I'm going to just set it
301:11 - on HTML just so that we can use Ems for
301:15 - relative font sizes font weight of font
301:18 - weight of 400 on enter okay then the
301:22 - font line height seems to be 24 pixels
301:25 - letter spacing we probably don't need
301:27 - that it's by default it's I believe it's
301:29 - just zero and then text align left we
301:31 - don't need that okay so just as I do
301:34 - that I've changed the body fonts and you
301:35 - can already start to see that now we are
301:38 - getting something that is closer to what
301:39 - we expect okay what about the color of
301:42 - the body text so the body text seems to
301:45 - have
301:45 - this slightly uh slightly different
301:50 - color and this is the color that they're
301:52 - using here so the color of the body text
301:54 - is 5520 6D so I'm going to come in here
301:56 - and set the body color body text
302:00 - color let's come back here let's
302:03 - see body text color yeah it's it's all
302:06 - added here so over here we have this
302:08 - color
302:10 - 55206 so this is a nice thing about
302:12 - figma it gives you the CSS properties
302:14 - that you can use directly of course
302:17 - sometimes the CSS properties may not
302:18 - have an exact mapping you may still have
302:20 - to modify things a little bit depending
302:21 - on how the designer has set things up
302:24 - but in most cases you should probably
302:26 - just be able to copy things over and now
302:28 - you can see that the color of the text
302:30 - is also changed great that's fine
302:33 - what next what next well uh let us set
302:36 - up maybe so this is like a heading this
302:40 - is an H1 and there's an H1 tag so for
302:43 - all the headings H1 to H6 I feel like or
302:46 - maybe at least this is an H1 and then
302:48 - this is an H2 and looks like H1 and H2
302:52 - are the only headings used and then this
302:54 - is an H3 which also seems to have the
302:57 - font popins so for H1 and H2 seems like
303:01 - we using leagues part
303:03 - so I'm going to come in and I'm going to
303:05 - say
303:05 - H1 comma H2 I want to use the font
303:09 - family leaks Parton
303:12 - so let's see font family leaks PN so I
303:15 - can just copy that over here or I can
303:17 - just copy all the typography at once so
303:19 - let me copy the typography here for for
303:23 - the entire
303:25 - thing and let me come in here and let me
303:28 - paste it of course sometimes we may have
303:30 - to edit what we paste so H1 H2 let me
303:34 - just put font weight 700 I'll verify if
303:36 - this is correct actually let's just do
303:39 - H1 for now we'll do H2
303:43 - later okay and let's format this
303:48 - document and all right so now for H1
303:51 - which is the heading of the page we have
303:53 - set up the font family we don't need the
303:55 - letter spacing in text line I think that
303:57 - should be fine we've set up the font
303:59 - weight we've set up the line height so I
304:00 - can come back in here and then maybe I
304:02 - can actually just put in this text
304:04 - directly so again I can click on this
304:06 - text I can scroll down and or scroll up
304:08 - and copy that actual content so just
304:10 - click go go into the content Tab and
304:12 - click copy come back here and maybe in
304:14 - the hero section let us just put in an
304:17 - H1 here so let's
304:20 - do hero section and let us just put in
304:25 - H1 and let's paste
304:28 - this okay all right and I was just using
304:32 - a a very big font earlier that's why a
304:34 - zoomed in version that's why it was so
304:36 - big but now uh that we have this H1 in a
304:39 - big size I'm zooming zooming back to
304:41 - 100% uh visibility okay all right so now
304:44 - we have the H1 but the color seems to be
304:46 - off like you see here the color for this
304:48 - H1 seems to be different so let's grab
304:51 - the color the color is shown here so
304:53 - let's just grab this color 1 190
304:57 - d37 and let us grab this color and let
305:01 - us just go in here and let us set color
305:04 - to 1 190 d37 and now we have the right
305:07 - color for the H1 as well okay great
305:11 - let's also fix the H2 let's fix this
305:13 - style as well so I'm just adding in the
305:15 - basic Styles the we added the body text
305:18 - background we ordered the body font size
305:20 - we added the body font family let's add
305:22 - the font family for H2 so with H2 seems
305:26 - like we are still using League Spartan
305:28 - and how did I decide this is an hed2 I'm
305:31 - just going by my my gut feeling here the
305:33 - biggest uh heading on the page should be
305:35 - in H1 the second level heading should be
305:37 - H2S and then maybe these can be h3s so
305:40 - we'll see but for H2 here I'm just going
305:43 - to grab the typography settings and I'm
305:45 - going to create another H2 style and I'm
305:50 - going to again give it the right Styles
305:53 - let's get rid of letter spacing text
305:54 - align we don't need that and let's just
305:57 - verify that an H2 is loading fine as
305:59 - well so with 10 years of experience Etc
306:02 - let me come in here and let me come in
306:05 - and let me just verify what I do section
306:08 - I'm just going to add an
306:13 - H2 okay and let's reload okay again the
306:17 - color seems to be off let's verify that
306:19 - we're getting the right color so in this
306:21 - case the color just seems to be black or
306:24 - 0 0 0 yeah so I'm just going to grab the
306:26 - color 00 0 ideally although this could
306:29 - have been a mistake on the part of the
306:30 - designer we do not mix too many colors
306:33 - on a web page so my guess is that the
306:35 - designer may have intended to use the
306:37 - same color 1 190 d37 or for this H2 as
306:42 - well but they probably just forgot to
306:43 - set it on figma because these both look
306:45 - very dark um but in this case I'm just
306:47 - going to go with the design whatever is
306:49 - on the design let's just replicate that
306:51 - and but that that is a that is a
306:53 - question that I might ask the designer
306:55 - and by the way you can leave comments on
306:56 - figma to ask questions but or you can
306:58 - just check in with the designer directly
307:01 - okay so now we have the H2 that is
307:03 - looking fine too what else well uh we
307:07 - have this body text over here that is
307:09 - already enter we have verified that so
307:13 - let's maybe add this body text in as
307:15 - well so but the color and the color also
307:17 - has been set for the body text
307:20 - no um but this is not body text exactly
307:23 - uh this is the body text and this we
307:25 - have made enter this is like headline
307:28 - text of some kind so this is big text so
307:31 - what I'm going to do is I am going to
307:33 - set up a class for this and I'm going to
307:36 - take a I'm going to apply those those
307:38 - color and font settings to a class over
307:41 - here okay so let me just grab this and
307:45 - let me grab this color and let me just
307:48 - call this class headline so whenever I
307:50 - need to
307:51 - use or let me just call it Big text
307:54 - maybe even headline may not be the right
307:55 - thing so for big text the background or
307:58 - the color that we want to
308:00 - use is this this and what is the font
308:04 - size let's study the font size here so
308:06 - the font is Poppins the weight is 400
308:09 - the size is 18 and then the line height
308:11 - is 32 pixels so let me grab that and let
308:13 - me put that in here as
308:19 - well yeah and now we have the font size
308:23 - for big text and if I want to verify if
308:25 - this big text Big text is going to show
308:27 - up properly I can just copy this content
308:30 - over here and I I can come in into
308:33 - index.html under the H1 let me add a div
308:39 - and let me just give it the
308:41 - class big text and let me just paste the
308:45 - content here okay and I can verify that
308:48 - okay this looks more or less like what
308:51 - we have here lmm doors yeah it it looks
308:55 - to be it's definitely bigger than the
308:57 - normal body text okay I think we have
309:00 - set up most of the basic styles at this
309:02 - point there are maybe there is this one
309:04 - style and there is this one style here
309:05 - that we may need to deal with let's deal
309:07 - with them when we get to them but at
309:09 - this point I I feel I'm feeling pretty
309:11 - good in terms of the background of the
309:13 - page we've made a lot of progress we've
309:15 - brought in all the fonts we brought in
309:17 - the inter font of course which and we
309:20 - may want to give it like
309:22 - a um like a backup font in case the font
309:26 - is not picked up
309:28 - properly then similarly we may want to
309:30 - give a backup font to leaks SP as as
309:32 - well I'm just going to put Sans serif
309:33 - here so whenever you're putting in font
309:36 - families it's always a good idea to also
309:39 - provide backup fonts and let me also
309:42 - provide a backup font
309:45 - here and let me provide a backup font
309:48 - here for popins as
309:51 - well okay great
309:55 - so that is going to make sure that our
309:57 - fonts load up properly and we've
309:59 - provided the right backups fine next up
310:02 - let us actually start building the web
310:05 - page section by section because we've
310:06 - set up the basic Styles header body font
310:08 - family text size background Etc so let
310:11 - us add the content for each section one
310:12 - by one first using HTML and then let us
310:16 - check the CSS properties for that
310:17 - content and then finally let us add
310:19 - styles for each completed section one by
310:21 - one using CSS so we are going to go
310:24 - Section by section so I'm going to start
310:26 - with the hero section or the top section
310:28 - and I'm going to start by adding the
310:29 - content so what do we have here well
310:32 - there is this the way you should
310:34 - approach these is you should go in you
310:37 - should go outside in so this entire hero
310:40 - section here seems to be a box right and
310:42 - then in this box let me actually just
310:44 - copy this over to a whiteboard so that I
310:47 - can actually show you how I I would
310:50 - think about something like
310:54 - this okay so here is the design we
310:59 - have so here's the design we have and
311:01 - now we're going to start annotating or
311:03 - dra uh start drawing boxes around this
311:05 - design now in this design we have first
311:09 - of all of course this entire thing is in
311:11 - a box right so this is our entire outer
311:13 - div so to
311:15 - speak now up in this div there are two
311:19 - parts there is a left half and there is
311:20 - a right half so this is the left half
311:24 - clearly this is where a lot of the
311:26 - content lives and then there is this is
311:29 - the right
311:30 - half this is where where we just have an
311:33 - image okay so now you're already getting
311:35 - a sense that you need an outer div and
311:37 - inside that you need two divs you need
311:38 - the left div and you need the right div
311:41 - now in the left div we can start again
311:44 - breaking things up so what you want to
311:45 - do is you always want to see okay is are
311:47 - things arranged horizontally or are
311:50 - things arranged vertically so clearly
311:52 - first in the outer box things were
311:54 - arranged horizontally so that will
311:57 - inform our CSS settings then but in this
312:00 - left half things are definitely arranged
312:02 - vertically so there seems to be this one
312:05 - box that I can draw around this contact
312:07 - information then there is this one box
312:10 - that I can draw around this High section
312:13 - and then there is this one box that I
312:15 - can draw around
312:16 - this section which is just uh the
312:19 - headline um or the sort of the big text
312:22 - and then there is this um one box that I
312:24 - can draw around this big text which is
312:26 - the body text which is big in size and
312:28 - finally there's one box I can draw
312:29 - around the Conta me button okay so at
312:34 - this point we actually have a very clear
312:35 - structure of the page and we can now
312:37 - start turning that into HTML content all
312:40 - right and I'm going to start giving some
312:42 - of these boxes IDs just for easy
312:44 - identification but another thing that
312:46 - you can also do is you can just use HTML
312:48 - comments so let's do both maybe okay so
312:51 - first let's just create let's just add
312:53 - an HTML comment here and let's say this
312:56 - is the hero
312:57 - section all right now in the hero
312:59 - section we have I'm going to get rid of
313:01 - all of this for a second I'm going to
313:02 - add it back later with time in the hero
313:05 - section we have two boxes so you always
313:07 - want to do the design outside in so in
313:10 - the hero section we have one box and
313:13 - this box is going to be
313:15 - the by um hero
313:21 - text
313:22 - parts and then this box is going to
313:27 - be hero image okay
313:32 - all right and now inside the hero text
313:36 - let's go back here so inside the hero
313:37 - text we have a bunch of vertical div so
313:39 - 1 2 3 4 5 so let me just add those in as
313:43 - well just so that we have set up the
313:46 - structure before we are actually adding
313:48 - a lot of the content so this is going to
313:51 - be let's
313:55 - see so this is going to be email and
314:00 - phone and let's just put that in here as
314:03 - we'll write that in here as well then
314:06 - after email and phone we
314:10 - have high we have
314:12 - the name
314:17 - basically after the name we have
314:21 - this let me just call this
314:25 - like
314:27 - H1 so the H1 is going to be here I'm
314:30 - going to create a div right now but but
314:31 - maybe later I might just replace that
314:33 - with an with a direct H1
314:36 - tag and then we have this explanation or
314:40 - this let's let's call
314:41 - this um subtitle or let me call it title
314:45 - and subtitle and then a button right so
314:48 - let's call this
314:50 - title and let's call
314:54 - this
314:59 - subtitle okay and then finally let's add
315:01 - a
315:04 - button so there's a there's going to be
315:06 - a button
315:07 - here all right so now we've set up the
315:10 - basic layout we've set up a couple of
315:12 - we've set up an outer div called hero in
315:15 - which we have the hero text div we have
315:16 - the hero image div and then in the hero
315:19 - text div we have a bunch of divs 1 2 3 4
315:21 - five divs for each of the sections
315:23 - within that uh section okay so let's see
315:28 - um the first thing we need to do is if I
315:30 - just reload the page
315:33 - let me save this and reload the page so
315:35 - right now we have nothing here right
315:36 - right now we have nothing in the hero
315:38 - hero section so the first thing we need
315:40 - to do is maybe start putting in some
315:42 - content so that we can start getting a
315:44 - sense of where things are right so this
315:46 - is
315:47 - the um maybe the first thing I'll do is
315:50 - I will put in the email and phone so let
315:52 - me get the email let me get the phone
315:54 - information I'm going to just go in here
315:56 - I'm going to copy the phone information
315:58 - and let me put in the email and phone
316:00 - here so let me just put put that in
316:03 - right now okay so now we have the phone
316:06 - then below the phone we have this text
316:08 - hi I am F the sahen so let me just copy
316:11 - in the text for the sahin I'll put the
316:13 - email shortly as well or let me just
316:15 - I'll put in the email right now too let
316:17 - me just go in here we'll figure out how
316:19 - to add the icon first so the idea with
316:21 - any kind of web design is do the easy
316:23 - Parts first and figure out the hard
316:25 - Parts later so okay now we've added the
316:28 - phone we've added the email I hope you
316:29 - can see here uh I'll just zoom in for a
316:32 - second again and then I've added that hi
316:34 - I'm FY sah I've added that part as well
316:37 - then let's add in this content as well
316:39 - which is the freelance frontend web
316:40 - developer and word WordPress developer
316:43 - so this is an H1 so I'm just going to
316:45 - add this in as an H1
316:50 - directly okay all right so now we got
316:53 - the H1 here in in here as well and then
316:57 - let us get this sub this subtitle so
317:01 - which is is going to be I believe it is
317:03 - of the class big text so let me just
317:05 - give it the class big
317:08 - text and paste the
317:12 - content okay and now we have the class
317:15 - big text so now now we have the content
317:17 - starting to shape up so we have the
317:19 - email and phone and we have hi I'm F
317:22 - sahen which is just body text normal
317:24 - body text we have freelance frontend
317:27 - developer we have this and we have this
317:29 - button here so let's let's add in this
317:31 - this button here as well and so we have
317:33 - this button and this button button is
317:34 - called contact me let's put that in a
317:42 - div okay so there's a contact me button
317:45 - Perfect all
317:47 - right now there is this image this hero
317:50 - image over here let's come and get this
317:52 - let's grab this hero image as well so we
317:54 - have already downloaded this image if I
317:56 - show you here we have this hero image
317:58 - that has been downloaded already so I
318:00 - can go in and I can just import or use
318:02 - this image using the IMG tag so IMG SRC
318:06 - equals um hero image.png and let me just
318:10 - for now let me just give it a height so
318:12 - that it's not too big but we'll adjust
318:14 - the size later so let me give it a
318:15 - height of 240 and we'll adjust specific
318:19 - exil Styles later so heroen
318:23 - image.png yeah there it is so now we
318:26 - have the image here as well okay perfect
318:29 - so now we are getting to a point where
318:30 - for the first section we have all the
318:32 - content now the next step is to maybe
318:35 - start aligning things a little bit right
318:37 - and of course you can go back and forth
318:38 - with this you can add a little bit of
318:40 - content do a little bit of alignment
318:41 - then add a little bit of content do a
318:43 - little bit of alignment uh but just to
318:45 - keep things simple for now I'm adding
318:47 - the entire section content and then I'm
318:49 - I'm going to style it um okay so we
318:52 - first of the first thing we want to do
318:54 - is we want to show these two diffs
318:56 - horizontally and we want to maybe make
318:58 - them both take up 50% of the screen area
319:01 - right so to make things horizontal and
319:04 - you can always look this up you can
319:05 - always say how to show two divs
319:07 - horizontally but let me just give this a
319:09 - class or let me give this div an ID
319:12 - called hero
319:14 - section and into the hero section I'm
319:17 - going I'm going to go into styles.css
319:20 - so for the hero
319:23 - section I am going to say display Flex
319:27 - so this is a quick trick that I want to
319:29 - tell you anytime you want to show the
319:31 - the children of a div horizontally just
319:33 - set display Flex okay and just as I do
319:36 - that nothing seems to happen because
319:39 - inside it we have these two divs and we
319:41 - want both of those inner divs to be
319:43 - taking up 50% of the space right so let
319:46 - me just give them some IDs as well so uh
319:49 - let me say Let me give this an ID hero
319:53 - text and let me give this in
319:58 - ID hero image wrapper because it's this
320:03 - is not exactly the image tag itself this
320:05 - is a wrapper around the image so hero
320:11 - text let's give that a width of 50% so
320:15 - it takes up 50% of the parents width and
320:18 - then we have the hero image
320:21 - wrapper let's give that a width of 50%
320:26 - as well okay and let's see what
320:29 - happens okay okay nothing seems to have
320:35 - happened which is strange so these are
320:38 - the issues you run into when you are
320:40 - doing things
320:44 - live at this point I the way I'll debug
320:47 - this is I will just right click here I
320:48 - will check inspect and let's Zoom this
320:52 - out a little
320:53 - bit and I am going to
320:58 - then yeah I'm going to then maybe just
321:01 - check whether the div actually was added
321:03 - properly or not so we have the hero
321:06 - section div and we the Styles don't seem
321:10 - to have been
321:11 - applied why was the style not
321:14 - applied hero section oh yeah so the
321:19 - styles were not applied because I'm I
321:21 - have to select by ID so let me just make
321:24 - that hash instead of dot okay and let's
321:27 - reload the
321:29 - page and now you can see on already
321:33 - that both of these seem to be taking up
321:36 - so this is the hero text section and
321:38 - this is the hero image section both of
321:40 - these seem to be taking up about 50% of
321:42 - the space now of course this image
321:44 - itself is not taking up the entire space
321:48 - so I might want to come into the image
321:50 - here
321:51 - and maybe let's just put the image let's
321:54 - get rid of this div and let's just put
321:55 - the let's just give the image an
321:58 - ID and let's just call it hero image
322:02 - and this is one question that you'll ask
322:04 - yourself a lot when should I be using a
322:05 - div when should I not be using a div the
322:08 - answer is whatever does the job but you
322:10 - can start start with something and then
322:12 - modify it as you need so let's just give
322:14 - the hero image a width of
322:16 - 50% okay so now the hero image has a
322:19 - width of 50% that's fine but that is not
322:22 - fully doing the job for us so I think
322:25 - I'll just revert to the old style and
322:27 - then I'll just apply some styles to the
322:29 - outer hero image image so let me go in
322:32 - here let me remove the oh that's because
322:34 - I had the height so let me add the ID
322:37 - hero image
322:40 - here so I keep my hero image wrapper at
322:43 - at width
322:45 - 50% and now I'll go into my hero image
322:49 - and I will give it width 100% so it's
322:53 - going to take up 100% of the parents
322:55 - width okay so now the her hero image
323:00 - should be taking up about 100% of the
323:03 - parents width which it seems to be
323:06 - doing however you can see that this
323:09 - parent itself this entire thing is kind
323:11 - of spreading across the page which we
323:12 - may not want we may want to just put a
323:15 - maximum width to this entire uh to this
323:18 - entire section and I think the maximum
323:19 - width that we are putting here is about
323:21 - 1440 pixels so let me just set the
323:24 - entire maximum width for the hero
323:26 - section to 1440 PX and let me set
323:31 - the margin to zero Auto so that things
323:34 - always remain centered on the page okay
323:37 - all right so now it's looking a little
323:38 - better so now we
323:41 - have now we have this page and on this
323:44 - page we have the on the right we have
323:47 - this hero image on the left we have this
323:49 - content and we can verify that both of
323:51 - them are taking up 50% of the space so
323:54 - here we have the hero section the hero
323:56 - section within the hero section the hero
323:58 - text seems to be taking about about 50%
324:00 - then Z image wrapper seems to be about
324:02 - 50% of the
324:04 - width yep great so now we are getting
324:08 - very close to completing our hero
324:09 - section Styles I can see that there's a
324:11 - small padding or the small spacing here
324:13 - at the top somewhere so I can probably
324:16 - that's probably spacing on the body so I
324:18 - may need to reset the margin to zero and
324:22 - the padding to zero on the body to get
324:24 - rid of that top spacing okay that top
324:26 - spacing is now gone perfect great now
324:29 - let's fix this side
324:31 - uh let's fix the left side of things the
324:33 - right side seems to be fine so let me
324:35 - just bring this back here into half
324:38 - size and let's start actually adding
324:41 - content into this particular section
324:43 - over here so I can see here that
324:48 - we seem to this seems to be about 33
324:51 - pixels below the top so there seems to
324:53 - be like a padding of 32 pixels I'm just
324:56 - going to guess about 32 pixels so I'm
324:58 - going to come into the hero text
325:01 - uh I'm going to come into hero text I'm
325:03 - going to add a padding of 32 pixels on
325:07 - the top 0 pixels for on the right 32
325:10 - pixels on the bottom and 0 pixels on the
325:14 - left okay and let's do that so now we've
325:17 - added some padding so things are looking
325:18 - a little bit better so that's
325:21 - great yeah so now we've added a pad now
325:24 - we've added padding that's good what
325:27 - next well let's start fixing things one
325:29 - by one maybe we need some left and right
325:30 - padding as well let's see what left and
325:33 - right padding we can add so here seems
325:36 - to be there seems to be about a 20 pixel
325:38 - space between uh the text here and the
325:41 - image here I would probably take a
325:43 - similar 20 pixel padding on the left as
325:45 - well so I'm just going to make this 20
325:48 - PX so these are places where often you
325:51 - may not be able to get exact details
325:53 - from figma and you may either have to
325:54 - guess or you may simply have to uh ask
325:57 - the
325:58 - designer okay great so so now we have
326:01 - about now we have padding so now things
326:03 - are looking a little nicer then uh let's
326:06 - start fixing one by one things starting
326:09 - from the top now let's separate out so
326:12 - here we have the phone number on the
326:14 - left and the email on the right so let's
326:16 - separate those out one very simple way
326:19 - to do this when you have one thing on
326:20 - the left and one thing on the right is
326:21 - to just use a float so you could say
326:25 - div style
326:27 - equals float right
326:31 - and again this doesn't always work
326:34 - depending on the complexity of the
326:35 - situation but if you want to do a very
326:38 - simple thing where you want one thing on
326:39 - the left one thing on the right that's
326:41 - what you can do just use float so that's
326:43 - fine now we have added that information
326:45 - as well and let's check the font size
326:47 - here so the font size seems to be small
326:49 - and the font seems to be Roboto again a
326:51 - fourth
326:52 - font this seems like too many fonts on
326:54 - the page so I'm just going to use the
326:55 - font enter for
326:57 - now instead of Roboto because I don't
326:59 - want to import another font and I may
327:01 - need to check with the designer why they
327:03 - have so many fonts U because three two
327:05 - to three fonts on a page is generally
327:07 - sufficient but let us come in here let
327:09 - us give this and let us give this a
327:12 - class or let's give this an ID because
327:14 - there's only going to be one of
327:17 - these or let us just give it a class
327:19 - called small text and we'll use it
327:21 - elsewhere as
327:22 - well small text okay and now we will
327:26 - just pick dot small text and let us set
327:31 - the font family to enter I'm not going
327:33 - to use Roboto here and Sans serif font
327:38 - okay line height Etc all that is fine
327:41 - and I may need to check the color as
327:43 - well maybe there might be some change
327:44 - required in the color but now it is
327:46 - smaller so it's definitely what we are
327:48 - going for slightly smaller then what we
327:51 - have okay the color seems to be just
327:52 - black so 0 0 0 so I'm just going to set
327:54 - the color
327:56 - to it copies as background but it should
327:59 - actually be color
328:03 - okay so yeah so now the color is fixed
328:06 - and this is all good then we have this
328:08 - next section and there seems to be about
328:10 - a 52 pixels of Gap normally these gaps
328:13 - should be multiples of four and like
328:16 - four
328:17 - 16 um 32 48 but 52 seems to be what
328:23 - they're using here so I'll just use 52
328:25 - as per the design so let me go in here
328:28 - and this is
328:29 - like let me give this the or let me give
328:33 - this a small um Let me give this an ID
328:37 - and let's give it the
328:44 - ID name or like high and name so always
328:49 - coming up with good names always hard
328:51 - but always try to give a descriptive
328:52 - name so that when you're just browsing
328:54 - through the CSS file you know exactly
328:56 - what you are referring to so highend
328:58 - name right highend name has a margin
329:03 - top of 52 PX so let me add that so now
329:08 - you should see here that there's a
329:09 - margin top of 52 PX all right so this is
329:11 - good um then let's also maybe check over
329:15 - here what's going on so there seems to
329:17 - be too much Gap here the Gap here is
329:18 - only 10 pixels we may need somehow this
329:22 - Gap seems to be higher than 10 pixels so
329:24 - I'm just going to check here okay looks
329:25 - like this is the
329:26 - default this is the default padding or
329:29 - the default margin for for H1 and right
329:31 - now the margin the default margin for H1
329:33 - seems to be set to about 32 but the
329:36 - default margin that we want is 10 pixels
329:38 - so I'm just going to set this to margin
329:41 - top
329:44 - 10px and let me reload that by the way
329:46 - I'm using the inspect element browser
329:48 - tools this is something that you'll
329:49 - often have to do okay no sorry that's
329:52 - not for H1 that's for and that's not for
329:55 - HTML that's for H1 margin top 10 PX
329:58 - perfect great this is looking find to
330:00 - high am fahin freelance front end
330:02 - developer and WordPress
330:04 - developer what next LM IIM okay this
330:08 - again the Gap here seems to be 30 it's
330:11 - currently 32 let's change the margin
330:14 - bottom as
330:16 - well to 30
330:19 - PX to match the design exactly okay
330:23 - looks fine I think we have probably
330:25 - fixed the margin
330:27 - here and we can always verify by going
330:29 - into inspect element so we go into
330:31 - inspect element check the computed
330:33 - settings you can check that okay margin
330:35 - bottom seems to be 32 still oh I've not
330:39 - saved it yeah so now it's a little
330:42 - closer it's a little better so this is
330:44 - what you do you look at the design then
330:46 - you come into your HTML file and add
330:48 - some CSS properties then you go and
330:50 - inspect to make sure that things are
330:52 - exactly as you want them to be all right
330:55 - so that's fine what next well we have
330:59 - this contact Buton Buton let's try and
331:00 - fix the color and the font etc for this
331:04 - button okay so the background color
331:06 - seems to be 2f 2 f2f so that's what I'm
331:09 - going to use for the background and then
331:12 - the width and height also seem to be
331:14 - provided here so width is 44 let's just
331:17 - copy them all and let me come back here
331:20 - and let's go into the
331:21 - button here and let's give this a let's
331:24 - give this button a
331:27 - ID let's call it contact button button
331:31 - let's come in here back
331:36 - into and let's paste in all the
331:40 - properties so we are adding a height we
331:42 - are adding a width we adding a left I
331:44 - don't think we need this left and top
331:46 - generally speaking because we are
331:47 - already arranging things in the right
331:49 - order so we won't need that so that's
331:50 - why be wary of copying things directly
331:52 - from figma sometimes you might got get
331:54 - weird results um but width and height is
331:57 - something that I can use and I can add a
331:58 - background so let me grab the background
332:01 - uh color as well so let's see background
332:05 - color 2f 2f 2f seems to be the color
332:08 - that we
332:09 - using and looks like the text color also
332:13 - needs to be changed so the text color in
332:14 - this case or the text size is 16 pixels
332:18 - the line height is 19 let me just grab
332:20 - that and put that in
332:22 - here font family enter font size is font
332:25 - weight is 500 line height is 19 font
332:29 - size is 16 pixels
332:31 - okay and there's a text color as well
332:34 - the text color just seems to be white FF
332:36 - FF FF so color is just going to
332:40 - be
332:43 - can all right and there is some space
332:46 - above this so this about there's about
332:49 - 20 pixels of space above it so I'm just
332:51 - going to say margin
332:57 - top 20 pixel
333:00 - all
333:01 - right okay so our hero section is
333:04 - looking good now I'm not going to get
333:07 - into responsive design in this
333:09 - particular tutorial because now you may
333:10 - ask okay what how does it look like on
333:12 - mobile Etc but at the very least if I
333:16 - compare it to what I have here I think
333:18 - this is looking fairly similar hi I'm
333:20 - fery saheen freelance frontend web
333:22 - developer WordPress web developer um a a
333:26 - subtitle and then a contact me button
333:28 - and clicking on the button may probably
333:31 - open an email or something like that so
333:33 - let's actually just make the button
333:35 - functional instead of the button I'm
333:36 - just going to use an a tag and I'm going
333:38 - to put in a mail to link so that
333:40 - clicking on it will open up a mail and
333:43 - mail to fahin mail.com so let me just
333:47 - grab
333:48 - that and let me put that in here and
333:51 - let's just
333:52 - say Target equals uncore
333:57 - blank okay so that's going to open up
334:00 - email thing and I think we don't need
334:02 - this div at this point so whenever you
334:05 - feel that a div is not necessary you can
334:07 - always just go ahead and delete that
334:10 - div let's come back and let us change
334:12 - that to slash a and let us just format
334:16 - the document and save
334:19 - it okay that's not doing it well I think
334:24 - a tags you might also need to
334:26 - set display block for a tags in case you
334:29 - want want to add margin and
334:32 - padding okay that's still not doing it
334:34 - I'm just going to I'm just going to keep
334:36 - it to a button for now let's forget that
334:38 - right so you have to sometimes make
334:40 - these decisions what should be which
334:42 - kind of a tag in in most likelihood you
334:44 - you will probably be just using a
334:47 - framework that will take care of these
334:49 - things for you but for now I think let's
334:51 - just keep this button which is not
334:53 - exactly
334:54 - functional so with that we are more or
334:56 - less done with the hero section uh you
334:59 - you might notice that in the hero
335:01 - section
335:04 - our content here our image actually goes
335:07 - all the way to the right but the text
335:09 - does not go all the way to the left so
335:10 - we may need to fix that so that is what
335:13 - I mean by saying do the easy Parts first
335:15 - what you might want to do is implement
335:17 - the entire page and then figure out
335:18 - exactly how you're are going to
335:20 - implement this Behavior because you also
335:21 - have to think about what happens when
335:22 - you resize the page and all uh in in
335:25 - this case for now I'm just going to keep
335:27 - things equal width for now and I'm going
335:29 - to come back come back and maybe fix it
335:30 - later when I have the time okay or I'm
335:33 - going to go back to the designer and say
335:34 - hey this design looks a little odd
335:37 - because over here it kind of goes all
335:38 - the way till the end over here it
335:40 - doesn't how about we keep it centered on
335:42 - the page right how about we make sure
335:44 - that all the content is centered on the
335:46 - page so that we don't run into these
335:48 - issues okay so that is the hero section
335:50 - there's also this thing here the in the
335:52 - background I'm yeah I'm not sure how
335:55 - exactly we can Implement something like
335:58 - this let's let see in the background we
336:00 - have this ellipse of some
336:07 - kind
336:11 - um okay we'll have to figure out how to
336:13 - add this glow and it may not even be
336:15 - that easily possible and we'll have to
336:17 - figure out how to add this image and
336:19 - again that is something that we can
336:20 - possibly look at towards the end or
336:22 - something okay cool well I I think we'll
336:25 - do one more section because we can of
336:27 - course as we keep doing this it's going
336:29 - to take a lot lot of time so how about
336:31 - we do one more section let's do the
336:32 - pricing section and I'll leave the other
336:34 - sections to you as an exercise so let me
336:37 - come back here and let me get rid of let
336:41 - me get rid of these other sections so I
336:42 - have this what I do section that is left
336:44 - as an exercise I'm getting rid of that
336:46 - by the way you can comment out an entire
336:49 - section like
336:51 - this so just start with exclamation mark
336:55 - hyen hyphen and close with hyphen hyen
336:58 - exclamation mark and then that you can
337:00 - comment out an entire section so let me
337:02 - do that and let me do that with projects
337:04 - as well let me just comment that out for
337:07 - now I'm going to implement the pricing
337:10 - section let me comment out the questions
337:12 - and the footer as
337:23 - well okay and let's go ahead and now
337:26 - let's start implementing the pricing
337:27 - section so this is the pricing section
337:31 - and in this pricing section we have like
337:33 - the small thing here this blue thing
337:34 - called pricing and we have a like a
337:38 - subtitle or a or a heading H2 then we
337:41 - have this
337:43 - subtitle and then we have a bunch of
337:45 - these
337:47 - boxes so let's see let's again go step
337:50 - by step let us first take this and
337:52 - create a box around
337:55 - it okay and let's come back here into
338:01 - our oops a drawing
338:05 - tool and let's draw some boxes so in
338:09 - this case there is obviously this big
338:11 - box right
338:13 - here that's where that's what everything
338:15 - is under in this big box I can see that
338:18 - the direction of elements is downwards
338:20 - coming down so there's definitely this
338:22 - one div here at the top which is the
338:24 - pricing and then there is this other
338:26 - thing here and then there is this other
338:28 - thing here
338:30 - so there are three things pricing you
338:32 - can take a look at the pricing table
338:33 - based on the work I do and then you that
338:35 - subtitle and then there is this box that
338:37 - I can draw so always try to draw full
338:39 - boxes in that direction all right so in
338:42 - the downward Direction in the outer div
338:44 - we have one 2 3 four boxes so let's try
338:48 - and achieve this for now and then we'll
338:50 - go inside this inner box later okay so I
338:54 - am going to come back
338:56 - now and let's start adding some of this
338:59 - content so in the pricing section I just
339:03 - think I I need this the direction is
339:05 - vertical so I don't need to do display
339:07 - Flex or anything like that let me just
339:09 - add a div here and let's just type it
339:12 - type out the word pricing let's add
339:14 - another div here actually this seems to
339:16 - be an H2 so we can just use an H2 here
339:18 - probably so
339:20 - H2 H2 and let's grab this content which
339:25 - is you can take a look at what I do Etc
339:27 - so let us just just copy and let us
339:32 - paste this
339:33 - content okay it things are starting to
339:36 - take shape we will come back and fix
339:38 - things a little further then we have
339:40 - this Laur mipim dollar cell okay this
339:43 - seems to
339:44 - be
339:46 - the description like a subtitle I think
339:49 - this seems to be the big text it's about
339:52 - let's see it's 18 pixels so this seems
339:54 - to be the big text the same kind of big
339:56 - text that we have here so I'm going to
339:57 - create a div I'm going to give it a
339:59 - class of big text and I am going to
340:03 - paste in this content
340:10 - here okay all right so now we have
340:13 - pricing we have this big we have this
340:15 - header we have this big text and finally
340:18 - we have this actual pricing boxes so for
340:20 - now I'm just going to create a div and
340:22 - I'm going to say pricing
340:25 - boxes all
340:27 - right so that's everything that we need
340:30 - to going to put in into the pricing
340:32 - section for now now let's start fixing
340:35 - the style one by one the first thing is
340:37 - that you can see that the pricing
340:39 - section is also centered it's a it's
340:41 - centered on the page
340:45 - and yeah so I'm just going to give it a
340:48 - maximum width as well so I'm just going
340:50 - to go into the pricing section I'm going
340:52 - to
340:53 - say ID
340:56 - equals pricing section
341:00 - and what is the idea of the pricing uh
341:01 - what happens in the pricing section so
341:03 - it seems like it is 190 pixels out from
341:06 - this
341:07 - side and it is about 190 pixels out from
341:10 - this side as well so 190 190 the total
341:13 - width is 1440 so out of 1440 pixels it
341:18 - is you we are subtracting 190 1440 minus
341:22 - 190 - 190 that is 1060 pixels so the
341:26 - width of this or the max width of the
341:28 - pricing section is
341:34 - 1060 Max width is 1060 PX and I'm also
341:39 - going to set margin to zero and auto
341:42 - margin Z Auto basically says top and
341:44 - bottom margin is zero and left and right
341:46 - margin is auto which means that you want
341:47 - to compress things into the
341:49 - center and let's come in here and let's
341:52 - just reload the page and you can now see
341:54 - that it is centered on the page so it's
341:56 - slightly better than what we had earlier
341:58 - okay
342:00 - then uh we have this thing here called
342:02 - pricing over here it's a very small
342:04 - thing it's in blue
342:06 - color and then we have the same thing
342:08 - later called questions so let me just
342:11 - call this over title because it's
342:13 - showing up over the title so let's just
342:15 - call this over title and let us grab its
342:19 - Styles so I'm going to create a class
342:21 - called over
342:25 - title and let me paste the Styles here
342:27 - so left and top are not required we
342:30 - don't need a water radius so height is
342:32 - 49 pixels width is uh no we don't need a
342:37 - height and width either I think we just
342:39 - need the text Styles so let's get the
342:41 - text the typography Styles so we are
342:43 - using popins and 12 pixels and line
342:46 - height of 18 pixels and we don't need
342:49 - these lettest Styles so you have to be
342:51 - careful about which CSS Styles you're
342:53 - bring in from figma you use it as a
342:55 - reference but don't use it as the ground
342:59 - truth
343:00 - essentially okay and then let's add that
343:02 - over title to this pricing section so
343:04 - div class equals over
343:08 - title okay and it seems like it's all
343:12 - uppercase so let me just make it pricing
343:16 - actually we can do it
343:18 - in I think it's called text decoration
343:20 - so let me see CSS
343:23 - uppercase you can use a text transform
343:25 - property so I'm going to use the text
343:28 - transform
343:31 - uppercase okay and I'm going to put in
343:33 - the right color as well which seems to
343:35 - be 2858 FF so color is 2858 FF okay so
343:41 - now we have the right price now we have
343:43 - the right color I think we need to add
343:46 - a text align Center as well so that this
343:50 - is centered on the page okay great so
343:52 - now this is centered on the page
343:55 - two perfect and finally
344:00 - I think this is it but finally one other
344:02 - thing we we have to note here is that
344:03 - there seems to be a significant amount
344:05 - of gap between sections so I'll have to
344:07 - estimate this I I don't see any direct
344:10 - way of yeah there it is well 98 pixels
344:13 - is seems to be the gap between the
344:15 - pricing section and
344:17 - the yeah 98 pixels seems to be the
344:19 - vertical Gap so maybe what we can do is
344:22 - within the pricing section itself we can
344:24 - add
344:24 - that let's say each section can have a
344:27 - 40 pixels and a 40 pixels up up and down
344:29 - uh Gap and we we can fix the exact
344:31 - things later so in the pricing section I
344:34 - am just going to
344:35 - say well it's 98 right so let me let me
344:38 - make it 48 pixels so let's see pricing
344:41 - section I'm going to say margin top and
344:44 - bottom to be 48
344:46 - pixels right and I'm also going to add a
344:48 - margin bottom for the hero
344:52 - section um zero Auto 48 pixels Auto so
344:57 - that between two sections we have this
344:58 - 98 pixels of Gap all right so this is
345:02 - looking fine now we need to fix this H2
345:06 - so we have this H2 seems like there is a
345:08 - maximum width so it's we are setting a
345:10 - Max width of 700 pixels for this so
345:12 - let's set a Max width for 700 pixels for
345:15 - this hed2 let us also set maybe um text
345:20 - line Center so in this in this specific
345:23 - case I am going to
345:26 - say I'm going to give it a hiding I'm
345:28 - going to give it give it a
345:29 - ID or give it a class called section
345:34 - heading and I'm going to come in because
345:37 - there may be other H2S which may not be
345:38 - section
345:39 - headings and or do section
345:43 - heading and I'm going to say text align
345:46 - Center I'm going to say Max
345:49 - width let's see 700 pixels so max
345:53 - width 700 PX I'm going to say margin
345:57 - zero Auto so that
346:01 - margin so that it becomes centered on
346:03 - the page so whenever you want to Center
346:05 - something within its parent horizontally
346:07 - speaking just give it margin zero Auto
346:09 - and sometimes the zero may be different
346:10 - because you may want a upper and lower
346:12 - margin to be different and I think the
346:15 - margin is not exactly zero but it's 8
346:17 - pixels so for the over title let me add
346:21 - a margin
346:23 - bottom of 8
346:25 - pixels okay so let's do that and now now
346:29 - you can see suddenly that we now have
346:31 - this pricing section you can say you can
346:32 - take a look at the pricing table based
346:34 - on the work I do so this is good now we
346:37 - have the uh section as well let's let's
346:39 - finally fix this too so this seems to be
346:41 - the pricing or the section subtitle
346:44 - essentially so let's add a class called
346:46 - section
346:49 - subtitle section
346:51 - subtitle and let us again give it text
346:55 - align Center let us give it margin Z
346:59 - Auto let us give it uh what is the max
347:02 - width here Max width seems to be 686
347:04 - about 700 let's give it Max width of 700
347:09 - PX and finally and there seems to be
347:13 - definitely a 8 pixel Gap so it's not
347:15 - exactly zero Auto it's 8 pixels above
347:19 - and for now let me give Zer pixels let's
347:22 - check the bottom distance as well so
347:25 - let's see 48 pixels below right so 8
347:28 - pixels above 48 pixels
347:30 - below and then Auto all right so with
347:35 - that and textaline Center as well oh we
347:37 - need to add the section
347:39 - subtitle so we can add a second class
347:41 - here
347:43 - section subtitle so this is how you add
347:45 - multiple classes you can add not just
347:48 - one class but you can add multiple
347:49 - classes to a div so we have big text and
347:52 - we have section subtitle so big text is
347:54 - going to ensure that it gets this font
347:56 - size and it gets this color and section
347:58 - subtitle is going to ensure that it is
348:00 - centered on the page as we might expect
348:02 - right so now now you can see now we have
348:04 - this pricing section and in this pricing
348:06 - section we have the title in this
348:08 - pricing section we have this and we have
348:10 - this content as well okay great so
348:13 - things are looking good let's finally go
348:15 - ahead and maybe try to also add the
348:16 - pricing boxes I think if we can add one
348:18 - box we should be able to add all the
348:20 - boxes so let's come back here and let's
348:24 - We There are three pricing boxes so
348:25 - let's create three divs so let's call it
348:27 - pricing box one
348:30 - and div Box 2 and div box 3 okay and now
348:38 - into this div I let me give this a ID
348:42 - pricing
348:44 - boxes okay I have given it I've given it
348:48 - ID pricing boxes so I'm going to come
348:50 - back into my Styles file and for the
348:53 - pricing boxes div I'm going to
348:56 - say display flx
349:01 - okay we want to flex uh we want the the
349:05 - children of this div to be horizontal so
349:07 - display flex and let me give all of
349:09 - these a class pricing box so that I can
349:12 - set each of their widths to
349:19 - 33% let's
349:21 - see class equals pricing
349:25 - box and let's add that to all of them
349:30 - you can also use Advanced flexbox
349:32 - properties to do this but for now I'm
349:34 - just going to use something very
349:37 - simple and I'm going to set for width of
349:42 - 33% for a pricing
349:47 - box okay
349:52 - and
349:55 - yeah so now you can see that we have at
349:58 - the very bottom we have box one box two
350:00 - and box three okay I forgot to add the
350:02 - class here it added it in the wrong
350:07 - place yeah so now we have box one box
350:10 - two box three at the bottom of the page
350:11 - I'm just going to add a small div with a
350:14 - large height uh at the end just so that
350:16 - we can bring up some of these pricing
350:18 - boxes so I'm just going to give
350:19 - it style
350:23 - equals height 600 PX this is just to add
350:28 - a another div at the bottom so that I
350:29 - can scroll this up a little bit while
350:31 - developing okay so now we want to create
350:34 - these boxes so what we want to do in
350:36 - these
350:37 - boxes let's see one by one what we are
350:40 - going to do in these boxes by the way
350:42 - you can see here pricing boxes we may
350:43 - also need to add a little bit of a
350:45 - padding so so that it's not sticking to
350:48 - the corner but we'll figure it out okay
350:51 - so coming back here to the design what
350:54 - we've already done is we figured out
350:55 - that we need a vertical or we need a
350:58 - horizontal layout here that's why we use
351:00 - display flex and then we have these
351:02 - three boxes each box seems to
351:05 - have
351:09 - equal yeah each box seems to have equal
351:12 - width we've done that with 33% WID now
351:15 - in a particular box the layout seems to
351:17 - be vertical okay so we have a bunch of
351:20 - these and in a vertical layout if I
351:24 - start drawing boxes we have 1 2 3
351:30 - four and five boxes okay so one is this
351:33 - PSD to HTML which is the service one is
351:35 - the price then one is the description
351:38 - one is the um uh these are let's say
351:43 - benefits
351:45 - and a contact button right so let's do
351:49 - that and let's add let's start adding
351:51 - all of these so in the pricing box one
351:55 - I'm just going to do one box and let's
351:56 - see if we can maybe just copy paste and
351:58 - use similar Styles wherever possible so
352:00 - I'm going to create a div and I'm going
352:02 - to give it the
352:06 - class
352:08 - service and what is the service here so
352:11 - the service here is PSD to HTML so let's
352:14 - just say
352:16 - PSD or PST to HTML so that is the
352:21 - service that is offered in the first
352:22 - pricing box then I'm going to have
352:24 - another div here I'm going to give it
352:26 - the
352:27 - class
352:30 - price so the price for the first service
352:34 - is
352:35 - $999.99 per page we'll fix the styling
352:41 - later then let's add the description so
352:46 - let's say class service description so
352:49 - it's good to be a little specific with
352:52 - class names because description is a
352:54 - very generic um very generic class name
352:57 - that may apply to a lot of things so
352:58 - let's copy that content let's put that
353:00 - in content in here service
353:03 - description then let's go in and let
353:05 - let's call these uh service benefits so
353:09 - this is a list so I'm just going to
353:10 - create a single div for
353:14 - this let's give the class service
353:20 - benefits okay and let's just put service
353:23 - benefits
353:25 - here and finally there is this service
353:28 - contact button right so let's put in a
353:31 - button
353:33 - here and let's just say service
353:38 - contact all right so now we have some
353:41 - content here and of course this is not
353:42 - looking exactly how we want but now for
353:44 - the first box we have some content in
353:46 - place now let's start actually laying
353:50 - out the box so this box by itself seems
353:54 - to be seems to have a white background
353:57 - so let's do that
353:58 - let's um let's and the different boxes
354:01 - have different backgrounds so maybe
354:03 - background is not something that we want
354:04 - to
354:05 - set or let's set it let's okay let's set
354:08 - on pricing box itself let's set the
354:10 - background and if required later we can
354:11 - change it so pricing box should have the
354:14 - [Music]
354:16 - background or background color
354:23 - white I've added the background color of
354:26 - white for pricing box so so now you can
354:28 - see that each pricing box has the
354:30 - background color
354:32 - white oh the third one is not given the
354:35 - right
354:37 - yeah so these pricing boxes have the
354:39 - background white but they seem to be
354:42 - touching we don't want them to touch we
354:44 - actually want a 20 pixel gap between
354:46 - them or maybe a 10 pixel Gap around the
354:49 - box so here's a quick trick that I'm
354:52 - going to use I'm going to create a new
354:55 - div called pricing card
354:58 - so div class equals pricing
355:01 - card and I'm going to put everything
355:03 - inside this card okay so I'm going to
355:06 - keep the outer div just to determine the
355:08 - widths of each widths of each of the
355:10 - boxes and I'm going to actually use a
355:12 - pricing card which is going to have the
355:14 - margin which is going to have the Shadow
355:15 - and all of that okay so instead of
355:17 - adding the background color on pricing
355:19 - box let me add it on pricing
355:24 - card and background color is okay FF and
355:27 - let me add a margin
355:28 - of 0 pixels at top and bottom we don't
355:31 - need that but left and right let's get a
355:33 - 10 PX margin okay so now the benefit
355:37 - that you get is that inside the pricing
355:40 - box which determines simply the width
355:42 - 30% 30% 33% or let's actually just do
355:46 - that
355:47 - 33.33% just to be very accurate and then
355:50 - we have this card this card is going to
355:52 - be inside the box it is going to have
355:54 - some margin around it it is also going
355:56 - to be have its rounded borders all so
355:59 - the radius okay the Border radius seems
356:01 - to be about 10 pixels so let's add a
356:03 - border radius border radius 10
356:08 - PX okay now a border radius has been
356:10 - added then uh it seems to also have a
356:13 - shadow so there seems to be this drop
356:14 - shadow I think we can just copy this
356:16 - drop shadow setting and paste it in here
356:20 - oh so it seems to have a box Shadow so
356:22 - now you can see here that it has gotten
356:24 - its shadow as well so that's good now we
356:26 - have a shadow then inside it seems to
356:29 - have about 20 pixels of padding inside
356:31 - it you can see that all the content is
356:32 - padded by about 20 pixels so let's add a
356:35 - padding all
356:38 - around of 20
356:42 - pixels yep so now we have a nice padding
356:45 - as well and what you can do just for now
356:48 - is uh I can just copy over the same
356:50 - content into the other boxes as well and
356:53 - we'll edit the content later but the
356:56 - benefit of that will be we'll be to see
356:58 - that how we as we modify one particular
357:00 - class that's going to apply to all of
357:02 - the different boxes at
357:06 - once
357:07 - okay yeah so now we have okay now we
357:10 - have these pricing boxes and these
357:12 - pricing boxes seem to be looking at
357:14 - least on the outside as we expect them
357:16 - and now we can start modifying the
357:18 - service the service the class for the
357:20 - service is let's see so this is of
357:23 - probably the same class no it's a
357:25 - slightly different class but seems like
357:28 - it has a let's see it has this font
357:31 - Poppins so price service is the class so
357:35 - for the class service I'm going to add
357:37 - the font color or the font
357:41 - settings font family popins okay font
357:44 - size 14 line height is 21 get rid of
357:46 - these two let's add maybe the color as
357:49 - well let's add the text transform
357:53 - uppercase and let's add the color I
357:55 - think it's the same color as the pricing
357:58 - uh section over title which is
358:00 - this so let's add the color
358:04 - here okay so now the services are
358:07 - looking good PSD to HTML sketch to HTML
358:09 - figma to HTML okay well I'm just going
358:12 - to edit those as well so I'm just going
358:15 - to
358:16 - say for box two I'm going to say sketch
358:19 - to
358:20 - HTML and here I'm going to say figma to
358:24 - HTML yeah so PSD to HTML sketch to HTML
358:29 - figma to HTML 99 per page let's get the
358:32 - styles of 99 so the style here is
358:34 - Poppins and line height is 54 size is 36
358:39 - weight 700 so this is the price so let's
358:43 - add the styles for Price do
358:47 - price okay all of this looks good font
358:50 - size line height all of this looks
358:54 - fine and the color seems to be just
358:57 - black so I'm going to say
359:03 - color 00 0 okay the color is fine too
359:09 - then okay this slash per page so this
359:12 - information I think this is something
359:14 - that we can put under a span probably so
359:17 - I'm just going to put a span around
359:22 - this span and I'm just going to give the
359:27 - span
359:29 - uh a class of price
359:32 - per okay so let me just copy that and
359:35 - paste it in the other ones as
359:40 - well price oops let's copy this whole
359:46 - span or price per page let's give it a
359:48 - class of price per page and let's copy
359:51 - the entire span and let us put that Span
359:53 - in each
359:56 - one
359:59 - okay price per page in fact we should
360:02 - probably
360:04 - also we should probably also have uh
360:08 - yeah the pricing seems to be same okay
360:10 - so price for page and then we have the
360:12 - span so into this span price per page
360:15 - let's give the right
360:17 - colors price per
360:20 - page and let's give it the color popins
360:25 - font weight 14 okay all of this this
360:27 - looks
360:28 - fine and let's just add
360:32 - that let's reload the page
360:35 - okay price per page is the span oh it's
360:38 - price per page I think I made a mistake
360:40 - here in in
360:44 - typing yep and we need to change its
360:47 - color as well the color seems to be 8 a
360:49 - 8 a 8 a so let me just change the color
360:51 - here as
360:55 - well okay great so now now we have uh
360:58 - the price figured out so price per page
361:01 - is done as well then we have this
361:03 - subtitle or this description essentially
361:07 - so for this description again the font
361:10 - style seems to be popins 14 pixels and
361:12 - 23 pixels the same I think it's exactly
361:16 - the same thing that we have here so
361:19 - service description is exactly the same
361:21 - as the price per page so
361:24 - service
361:26 - description
361:28 - yep 8 a is the color no the color seems
361:30 - to be slightly different 8 B 8B normally
361:33 - again you don't use so many different
361:34 - colors you have a fixed set of colors
361:36 - but this particular design seems to have
361:38 - it so let's just keep it that way let's
361:40 - make sure that there is enough Gap so
361:41 - there's a gap of8 pixels above in this
361:44 - case there may not that Gap may not have
361:45 - existed so let's add margin top
361:51 - 8px and we've added a little bit of a
361:54 - gap as well as expected and there seems
361:56 - to be a gap between these two two so let
361:58 - us add that Gap to uh what is that Gap
362:01 - let's see 8 pixels between these two so
362:04 - between the price and so let's add a
362:07 - margin top for price of 8
362:11 - pixels yeah so that looks a little nicer
362:14 - that's again a little more spaced out
362:16 - and then we have these benefits all
362:18 - right now let me fix the benefits as a
362:22 - service benefit so this is going to be a
362:24 - list so I'm just going to create a list
362:25 - here in the first
362:28 - box Li and in this Li I'm oh sorry I'm
362:33 - going to use UL to create an unordered
362:36 - list and let's see how many benefits
362:38 - there are and let's add those lapsim 1 2
362:41 - 3 4 5 6 so the benefit in each case the
362:45 - value seems to be the same and so let's
362:48 - just create six copies of
362:52 - this all
362:54 - right y now of course I I don't think we
362:57 - need this div specifically I think we
362:59 - can just do this on the UL itself so
363:03 - let's get rid of this outer div let's
363:05 - shift this
363:06 - back and first of all I think we don't
363:10 - need
363:11 - this margin here so it's automatically
363:13 - getting indented I think we don't need
363:15 - this indentation so let's see how we can
363:17 - get rid of this indentation where is it
363:19 - so it is so there seems to be this
363:20 - padding which we can get get rid of so
363:24 - service
363:26 - benefits
363:28 - service
363:31 - benefits so I'm just simply inspecting
363:33 - it I am then going into this I'm
363:36 - selecting that particular div and I'm
363:38 - just inspecting its Styles and it has a
363:41 - certain padding so let's set the padding
363:43 - to
363:45 - zero okay so now it is moved left
363:49 - definitely but let's also set the list
363:53 - style to
363:56 - unstyled or
363:58 - unset
364:01 - or
364:03 - okay UL how to remove bullet
364:07 - points list style type none okay so list
364:12 - style type
364:15 - none okay then we have this check mark
364:19 - here that we need to somehow figure out
364:21 - how to
364:23 - add I am going to deal with this later
364:26 - for now I'm just going to maybe use an
364:27 - emoji so let's just search check mark
364:32 - Emoji yeah and I'm just going to copy
364:35 - this Emoji of over here the check mark
364:37 - button and I'm going to deal with this
364:39 - icons and stuff these are things that
364:41 - can always be added later so I'm just
364:43 - going to go in for now as a quick trick
364:46 - and I'm just going to add this Emoji
364:48 - over
364:56 - here excuse
364:59 - me okay so it's looking close let's add
365:03 - the color let's add the actual
365:05 - settings which
365:08 - is yeah in the the color seems to be
365:13 - let's see let me select some text so the
365:16 - width it seems to be again popins but a
365:19 - bigger size and a slightly different
365:21 - color so I'm just going to copy that and
365:23 - I'm going to put that under the font
365:26 - settings so now font size is 16 font
365:29 - weight is 400 line height is 24 pixels
365:34 - and I'm going to copy the color which is
365:36 - 6666 so I'm going to say
365:40 - color
365:44 - 6666 okay yeah and what is I think this
365:47 - is looking exactly no this is not
365:49 - looking exactly the same seems like
365:51 - there is also an 8 pixel difference
365:53 - between each one so here's what I'm
365:56 - going to do I'm going to say service
365:57 - benefits
365:59 - Li
366:03 - margin
366:05 - bottom
366:08 - 8px yeah and now it is a slightly more
366:10 - spread
366:11 - out
366:14 - and yeah looks fine to me I think maybe
366:16 - all these all these settings can
366:18 - actually just be moved into the LI
366:23 - itself
366:25 - right okay so it's looking pretty close
366:29 - weight font weight 400 line height 24
366:31 - pixels and margin bottom of
366:34 - 8 and then finally there is
366:37 - this contact me button so let's add that
366:40 - contact me button so this is service
366:42 - contact
366:44 - button let's give it a
366:48 - class
366:53 - service service contact button all right
366:58 - and it simply says contact me right I
367:01 - think it just says contact me so let's
367:04 - go in here let's say let's call this
367:06 - contact
367:07 - me and let's come back and let's start
367:10 - styling this contact button okay let's
367:12 - close this for
367:18 - now so for the service contact button
367:21 - first thing seems to be that there is a
367:24 - the width is just full width so I'm just
367:26 - going to set WI width
367:30 - 100% so that it takes up the entire
367:32 - width then there seems to be a height or
367:35 - actually we can just figure out maybe
367:37 - what is the spacing that is there within
367:40 - so there seems to be a 12 pixels padding
367:42 - at the top and bottom so let me just put
367:45 - padding 12px all around just to yeah
367:49 - that looks roughly
367:52 - similar does it
367:55 - yeah
367:57 - or we can just set a height that that
367:59 - could be the other thing we can just set
368:00 - the height for the entire thing let's
368:02 - see the height is 44 pixels so let's set
368:05 - a height so often you'll have multiple
368:07 - ways of implementing this I'm just going
368:09 - to set the height to 44 pixels yeah I
368:11 - think it is about the same then there is
368:13 - the Border radius so border radius is 4
368:19 - PX okay great border radius has been set
368:23 - I guess the Border width can be set
368:25 - to
368:29 - zero or maybe one one
368:32 - pixel yeah let's see what is the Border
368:35 - width here 2 pixels and 2 f 2 F 2f so
368:40 - border
368:41 - is
368:43 - 2px solid # 2f2 f2f that is a color then
368:48 - there's a background color the
368:49 - background color in this case simply
368:51 - seems to be white so we can just say
368:54 - background color FFF
368:58 - FFF which is just white okay now we need
369:02 - to actually add some text colors so the
369:05 - text color seems to be 2f 2f 2f so let's
369:08 - add that text
369:13 - color okay then let us add the text size
369:16 - or the text seems to be enter weight 500
369:19 - 16 line height 19. 36 let's add all of
369:22 - that in
369:24 - here so even though there are two two
369:26 - different elements on figma on our when
369:29 - we creating the button it's just this
369:30 - one thing all right and that's it now of
369:34 - course we may want some sort of a hover
369:36 - State here so you may want to say
369:37 - something like this where when we hover
369:39 - over the service button some of the
369:41 - things
369:42 - reverse so when we hover over the
369:45 - service button maybe the background
369:47 - color could become 2f 2f
369:51 - 2f and the text
369:54 - color could become
369:58 - could
370:01 - become white so that is f f f f
370:05 - FF or text color is just color right and
370:09 - maybe you also want to turn let's see I
370:13 - think this should do it yeah maybe we
370:14 - also want to turn this cursor into a
370:17 - hand button so you can say cursor
370:19 - pointer this is again a common thing
370:21 - that you will often end up using it
370:23 - turns into a hand button over here right
370:25 - so now you see if I zoom in a little
370:29 - bit so you see now we have this contact
370:31 - me button and now we have these
370:33 - preferences and now of course we can
370:35 - copy that over to the other ones as well
370:37 - so let me just copy the service benefits
370:40 - and let me copy the contact me
370:42 - button let's copy it over to the second
370:46 - one let's copy it over to the third
370:51 - one okay so now we have a pricing
370:54 - section that is more or less what we
370:56 - expect so this is what the pricing
370:58 - section looks like here and this is what
371:00 - the pricing section looks like here now
371:02 - of course the second pricing section the
371:04 - sketch pricing section seems to have a
371:05 - yellow background and a few other things
371:08 - so that is something again we may have
371:09 - to figure out how to do and I'll show
371:12 - you the quick way to do this what you do
371:14 - is go into that second box in yeah so
371:18 - this is the yeah let's just add it let's
371:21 - add box two here box two pricing box box
371:25 - two and and into box two you can
371:29 - actually go in and add specific changes
371:32 - so you can say do pricing
371:35 - Box dobox 2 so when it has both of these
371:39 - both of these classes in that case we
371:43 - want the background to be yellow which
371:45 - is just
371:47 - this this color over here so I can
371:50 - change the background
371:52 - color to
371:55 - that
371:57 - okay that's probably not added to the
371:59 - right thing I think it's pricing card
372:00 - that we need to add to and let's let me
372:03 - just call it card to instead of box two
372:05 - so let's get rid of that and I should be
372:08 - adding it on the second one so this is
372:10 - the second pricing box and in the second
372:12 - pricing box let me add card hyphen
372:15 - 2 and now you can see that it has
372:17 - changed to yellow color let's quickly
372:20 - modify these Styles as well so here it
372:22 - is just sketch to HTML is just black so
372:25 - I'm going to say say that
372:28 - within I don't need this so I'm going to
372:31 - say that within card 2 if I have a
372:37 - service then the color should
372:42 - be black let's reload that so the color
372:46 - has become black then everything else
372:48 - looks fine to me maybe this may need
372:51 - some change the color here is also black
372:53 - or but 75% black so we can kind of copy
372:55 - that
372:57 - So within card 2 if I am looking at a
373:01 - list item or specifically if I have
373:04 - service
373:06 - benefits uh oh let's just do that within
373:09 - card 2 if I have a list item then I want
373:11 - it color to be that and I can just
373:16 - change the color for that list item and
373:19 - similarly I can change colors if
373:20 - required so it's 50% here 50% black here
373:24 - so I can just copy this color and I can
373:26 - apply that to what is this
373:29 - well I believe this is service
373:32 - description and price per page so within
373:35 - card
373:37 - 2 if I have a service
373:40 - description then the color
373:42 - is
373:44 - that so you just add this additional
373:47 - selector and within card
373:50 - 2 if I have this price per page its
373:55 - color should also be
374:01 - that right and now we have I believe we
374:04 - have the expected colors you can see
374:06 - here that I can check that card 2
374:08 - service description is the selector for
374:10 - it what else well we have this contact
374:14 - me is black and white so it's the other
374:15 - way around so within card
374:20 - 2 we have the only change is
374:24 - that background color and normal color
374:28 - are from the hover State and within card
374:31 - and of course this is for the contact
374:33 - button so service contact button and
374:37 - let's flip the styles for the hover
374:39 - state so when we hover over it we want
374:42 - it to be the other way around so the
374:44 - color is going to be
374:47 - FFF and the other color here is going to
374:50 - be 2f2
374:54 - f2f okay service contact
375:00 - button well that doesn't seem to have
375:08 - applied we can just give it we can just
375:10 - give that button a specific card or a
375:16 - specific yeah we can just give that
375:18 - button a specific uh class here so
375:21 - service contact button for card 2 let's
375:25 - see
375:30 - card to button card to button so let's
375:34 - just do that so we don't need this
375:37 - multiple selectors we can just do card
375:39 - to selector so depending on what you
375:41 - want to achieve sometimes you may have
375:43 - to come up with uh like specific classes
375:46 - but generally speaking it's with a bit
375:48 - of experiment experimentation you should
375:50 - be able to figure it out oh oh wait I
375:52 - think I understand what the mistake I
375:54 - made I did not put the word hover
375:58 - here yeah that should do
376:04 - it card
376:07 - 2 yep that that does it so now we don't
376:10 - need this card to button class so yeah
376:13 - you'll often make these kind of silly
376:14 - mistakes when you are working on CSS but
376:17 - this is looking good so now we have this
376:20 - fer saheen freelance web developer
376:23 - pricing and all of this is fine let's
376:26 - maybe add the footer as well um which
376:29 - should be very quick to add so the
376:31 - footer is just this black band which
376:34 - contains which is of height 58 pixels or
376:37 - which basically has some text and it has
376:39 - like a 20 pixel padding internally so
376:43 - let me just add the footer and I think
376:45 - that'll just complete the page for now
376:47 - so let's go here let's go here and let's
376:51 - give this the ID
376:55 - footer
376:57 - and this fotter has some text the text
376:59 - is simply for sahin copyright so let's
377:03 - go in let's put in the text
377:06 - here and let us just give it some
377:11 - Styles
377:12 - so let me come back into
377:16 - index.html oh sorry into styles.css and
377:20 - let me go into footer so the first thing
377:22 - with the footer is that it occupies the
377:24 - entire width of the page so so I'm just
377:26 - going to give it width
377:29 - 100% then I am also going to text line
377:33 - Center so I'm going to say text align
377:36 - Center I'm going to add a padding of 20
377:39 - pixels 20
377:42 - PX so yeah now we have that we of course
377:45 - have to add a black background to it so
377:48 - 00 0000 0 uh so let me add
377:51 - a background
377:54 - color 0
377:57 - 0 okay let us change the text color over
378:00 - here um I think I'm going to get rid of
378:02 - that additional div I had or maybe
378:04 - reduced its height to just 100 pixels so
378:07 - that it's a little closer and you can
378:09 - see things more
378:10 - easily now we can just get rid of it
378:14 - completely yeah um let's add
378:17 - maybe a margin top to it so that it's
378:20 - not too close to the content so I think
378:22 - the margin top of 48 pixels
378:27 - should be
378:28 - fine and let's change its color so the
378:31 - color seems to be white so let's add a
378:37 - color FF FF
378:40 - FF the color of the page is footer is
378:44 - white let's grab the properties the text
378:47 - properties so the text properties just
378:50 - seem to be the typography is just popins
378:54 - so Poppins 12 PX 18 PX so let me just
378:57 - put that in here as
379:03 - well yep and that's it so now the footer
379:07 - has been added and the pricing has been
379:09 - added and we
379:12 - have I believe we've achieved what we
379:14 - wanted to set what we set out to achieve
379:17 - at least in terms of the adding the two
379:19 - sections the only thing that I'm a
379:20 - little worried about is
379:22 - that this Edge seems to be lining up
379:26 - with this Edge over here right uh which
379:30 - is not happening in our design our
379:31 - design is a little more spread out and
379:35 - so maybe what we might want to do is we
379:36 - might want to restrict the width of this
379:38 - section also to match with this section
379:41 - let's see so this is
379:43 - about uh what is the width of the
379:45 - pricing section so we have
379:48 - this pricing section and the pricing
379:51 - section I believe has a maximum width
379:54 - somewhere set
379:56 - the pricing section has a maximum width
379:58 - of 700 pixels no no it has a width of
380:02 - 1060 pixels so maybe let's set the same
380:05 - maximum width for the hero section as
380:07 - well let's set the maximum width to 1060
380:10 - pixels so now everything is centered on
380:13 - the page you have this pricing section
380:16 - which is centered and then above it you
380:18 - have this section which is also
380:20 - centered like that now this is something
380:24 - that you may want to discuss with with
380:25 - the designer in the
380:27 - design you see the image actually sticks
380:31 - out a little bit but there are two
380:33 - issues with this if the image sticks out
380:35 - like this what happens is that one the
380:38 - content is no longer centered on the
380:40 - page properly and
380:43 - second what happens when you have a
380:46 - wider screen is the screen is the image
380:48 - still supposed to stick to the side
380:51 - probably not right because if you have a
380:52 - really wide screen it's not that you're
380:54 - going to like let's say the screen was
380:55 - this white from this end to this end you
380:57 - wouldn't want the image to just be so
381:00 - big that it sticks out or be somewhere
381:01 - in the corner um so what we have now
381:07 - feels like a
381:09 - reasonable feels like a reasonable
381:12 - Middle Ground to me uh but of course
381:14 - it's only the designer who can give the
381:16 - final answer here in terms of how they
381:18 - want the image to look right so this is
381:20 - something that you may want to go back
381:21 - and discuss with the designer one thing
381:23 - that I will do for this image is I'll
381:25 - probably give it a radius like this on
381:26 - this side as well just to make it look a
381:28 - little nicer so it has a radius of what
381:31 - it has a radius of about 200 so let me
381:33 - just go in here and let me add that
381:36 - same radius for the image in my code as
381:42 - well so I'm going to go to the hero
381:44 - image and I'm going to
381:46 - say border
381:49 - bottom right or border bottom
381:54 - radius
382:03 - okay like that so that's what I'm going
382:06 - with and or the other option is that I
382:09 - when I export the image I don't export
382:11 - it with the radius at all I just keep it
382:13 - blank um but I think this looks largely
382:17 - looks fine of course the content is
382:19 - sticking out a little bit a little more
382:21 - than I would have hoped so I may even
382:24 - reduce the width of the image slightly
382:26 - so instead of going 50/50 I may go let's
382:29 - say 60/40 with content and
382:31 - image okay so this is where you may like
382:34 - when you come to the implementation
382:36 - often things don't work out exactly as a
382:38 - designer expects so some things may be
382:40 - need may need to be changed might be
382:43 - that we maybe we can reduce like a
382:45 - little bit of the description so that we
382:47 - have one less line in the
382:49 - description let's
382:54 - see
382:57 - so this is the subtitle and in the
383:00 - subtitle let me get rid of this entire
383:03 - section like that let me reduce a little
383:07 - bit of the top margin over here so
383:10 - before the high I'm for sahin let me
383:13 - yeah let me just change that to about 16
383:16 - pixels let's
383:18 - say or 20
383:22 - pixels okay and that looks good I think
383:26 - this is this page is looking fairly good
383:29 - we have this phone we have this email
383:32 - here both of this both of these pieces
383:34 - of information we have this High
383:36 - freelance front end developer and
383:37 - WordPress developer a subtitle and a
383:39 - contact me button then we have this a
383:42 - little bit of a gap we have pricing you
383:43 - can take a look at what the pricing
383:45 - table at the pricing table based on the
383:46 - work I do then we have again some
383:48 - description then we have these three
383:50 - pricing sections then we have these
383:52 - contact buttons and then finally at the
383:54 - bottom we have this for the saying
383:56 - copyright 2022 All Rights Reserved so
383:59 - that's fine too and maybe the only last
384:02 - thing that we may need to do is add
384:04 - these
384:05 - icons over here this icon over here and
384:09 - maybe also add these icons these check
384:11 - mark icons that we have over here so
384:13 - let's do that and I think then with that
384:14 - we'll close for the day of course let's
384:18 - see if we can also incorporate this but
384:20 - I'm just going to add this icon for now
384:22 - so I am going to export this so I can go
384:24 - into export
384:25 - and let me export this as a PNG file or
384:29 - I can also export it as an SVG file SVG
384:31 - is good when you have to resize things
384:33 - so let me export export this as an SVG
384:35 - and let me export this as phone. SVG or
384:40 - phone then let me export this and again
384:43 - I'm going to export this as an SVG and
384:46 - Export
384:49 - as email.svg
384:51 - and finally I'm also going to export
384:54 - this check mark over
384:58 - here so I'm just going to go and Export
385:00 - that again as
385:02 - SVG
385:04 - as check.svg
385:07 - okay now we just need to incorporate or
385:11 - bring in these svgs so let's see HTML
385:14 - include an SVG
385:18 - image how to use SVG images in CSS
385:24 - well
385:26 - looks like we can just do this we can
385:28 - say IMG SRC and we should be fine and we
385:31 - can give it a height and width so what
385:32 - is the height here 16 by 16 right so I'm
385:35 - just going to do that for I'm going to
385:37 - come in into my text here and I'm going
385:41 - to come in before telephone number so
385:43 - I'm just going to first create a span so
385:45 - that I have a span around the telephone
385:49 - number and then I am going to create
385:52 - this IMG SRC equals
385:56 - phone.
385:58 - SVG and let me just set width and height
386:00 - directly here width equals 16 height
386:02 - equals
386:05 - 16 and let's say alt equals phone we
386:08 - should always put an ALT tag for an
386:14 - image there you go it's almost there
386:17 - more or less I think it we probably
386:18 - don't need such a big thing maybe 10 by
386:23 - 10 might actually do it
386:27 - yeah maybe 12 x 12 so that takes care of
386:31 - that for
386:34 - us yeah I think that's what it looked
386:36 - like here as well roughly right let's
386:39 - get let's add the email so let's again
386:42 - get this IMG here and we'll just change
386:44 - it
386:45 - to mail.
386:50 - SVG or email.svg
386:55 - yeah that's roughly what it looks like
386:57 - as
386:59 - well you could say that okay maybe it
387:01 - has like shifted down a little bit so we
387:03 - could do something like this we could
387:05 - just give it like a small margin to
387:11 - adjust to adjust things a little bit so
387:13 - what we could do here's a quick trick
387:15 - anytime you want to Center an image next
387:17 - to a page you can there are more complex
387:20 - ways to do it but a very quick way to do
387:22 - it I need to move the image down just a
387:24 - little bit so you want to keep you want
387:26 - to maintain the rest of the things as
387:28 - they are but you just want to make move
387:29 - the image down a little bit you can say
387:31 - margin
387:32 - bottom minus 4 PX okay what that does is
387:38 - that does not actually add any
387:41 - additional space it simply shifts the
387:44 - image up or down okay so negative margin
387:46 - is a very interesting thing that it does
387:47 - not add additional space it simply
387:49 - shifts the image left or right or up or
387:51 - down as you say and similarly I'm also
387:53 - going to add a margin bottom minus 4 PX
387:55 - over
387:57 - here so play with negative margins but
388:00 - now you can see that things are all
388:01 - nicely lined up and let's go in and add
388:04 - all of this here as well so I'm just
388:06 - going to copy this IMG and I'm going to
388:09 - put it in the place of this tick mark
388:13 - over here so I'm simply going to replace
388:17 - well let's do this let's do a find
388:20 - replace so I want to replace the tick
388:22 - mark with this I
388:25 - IMG tag over
388:36 - here let's first replace one then we'll
388:39 - see if that is what we want to do for
388:41 - the rest as well right so let's put that
388:44 - in here let's get rid of this margin
388:46 - bottom I think we may not need it and
388:48 - let us just put check.
388:51 - SVG and let's reload the page okay I
388:54 - think we may need a slight bottom margin
388:56 - to adjust it so whenever you have icons
388:58 - next to
388:59 - text margin bottom is your friend so
389:02 - margin bottom a negative margin bottom
389:05 - in most cases minus
389:07 - 2px let's check that yeah that looks
389:11 - fine so now let's grab that and let's
389:13 - say that wherever we have this sck
389:15 - symbol or the sck Emoji I'm just going
389:18 - to replace them all with that okay and
389:22 - I've replaced everything and now you can
389:24 - see that my tick symbol is showing up as
389:31 - expected
389:32 - yep I could even just uh if I wanted to
389:35 - make sure that these width height and
389:37 - Etc and style margin if I don't want to
389:39 - repeat this everywhere uh maybe another
389:41 - thing that I can do is instead of just
389:43 - repeating it like that I can just create
389:45 - a class called do check
389:50 - mark and for DOT check mark I can say
389:53 - that I want margin
389:55 - I want width to be 16
389:59 - PX is that 16 yeah 16 I want height to
390:03 - be 16
390:04 - PX and I want the margin
390:08 - bottom to be
390:11 - minus
390:14 - 2px and now I don't actually need to do
390:19 - this I can oh the alt tag is also wrong
390:23 - I don't probably don't need alt tag here
390:25 - I can just give it a
390:28 - class class equals check
390:31 - mark okay and I can replace this so I
390:33 - can now go back into the find and
390:37 - replace and what I want to replace is
390:40 - this and what I want to replace it with
390:43 - is this IMG SRC and class equals check
390:48 - mark and let's replace them
390:51 - all and we get exactly the same result
390:54 - right with of course this time we using
390:56 - class we not repeating a bunch of styles
390:58 - so in case we need to change the height
390:59 - of the check mark or something let's say
391:01 - we want to change this to
391:03 - 20 we can do that very easily not that
391:06 - we have to I think it looks
391:08 - fine okay so I think this is a good
391:12 - place for us to stop we have replicated
391:15 - the hero section closely enough I
391:19 - personally did not agree with the design
391:20 - decision to extend the image outside of
391:24 - the center because that creates problems
391:26 - in centering in uh the content visually
391:28 - and that also creates problems with
391:30 - larger screens so instead what I went
391:32 - with is I simply centered the
391:36 - image I simply centered the image or the
391:39 - entire content of the page here and I
391:43 - have gone ahead and I have added this
391:45 - heading and of course reduce the sizes a
391:47 - little bit so that things probably fit
391:49 - in vertically then we added the pricing
391:51 - section you can take a look at the
391:53 - pricing table and in the pricing table
391:54 - we added all the specific sections so
391:57 - I'm sure when you when you looked at it
391:59 - the design may have seemed fairly
392:01 - complex but as we just start approaching
392:04 - it step by step as we break things down
392:06 - identify okay what are the boxes looking
392:08 - like and are the boxes arranged in a
392:11 - vertical direction or a horizontal
392:13 - Direction Things become a lot easier and
392:15 - then you just have to go element by
392:17 - element make sure it has the right
392:18 - Styles and you can achieve any any
392:20 - design um no matter how difficult it
392:23 - looks and of course there are are cases
392:25 - where you need like custom Shadows you
392:26 - may need to overlap things on one
392:28 - another like let's say we wanted to do
392:30 - this how exactly would we do that well
392:33 - let's grab it let's maybe export it
392:35 - let's see what we can do with it let me
392:38 - again export this as an SVG file and in
392:41 - an SVG file let me just export it
392:44 - to um line below or let me just call it
392:49 - yellow
392:51 - line right and let's see how exactly we
392:53 - can fit this so
392:55 - we want this to show up right below the
392:58 - H2 right so let me just show that right
393:00 - below the H1 so I'm going to I'm just
393:03 - going to come in here and I am going to
393:07 - say below the H1 I'm going to add this
393:11 - image IMG
393:13 - SRC
393:15 - equals yellow line.svg
393:23 - and I I am just going to give it the
393:29 - ID yellow line okay so here's what that
393:33 - looks like right now and again I can use
393:36 - my margin trick so um hash yellow
393:41 - line I can say margin top this time and
393:45 - I can add a negative top margin minus 30
393:48 - PX let's see what that does yep that's
393:51 - getting us close minus 40
393:55 - PX nope doesn't do it minus 50
393:59 - PX okay maybe I can put this yellow line
394:02 - inside the H1 tag because the H1 tag has
394:05 - its own margin which I cannot get rid of
394:07 - so let's come back here let's take that
394:11 - yellow line and let me put that
394:17 - inside yeah that is better that is
394:21 - better but it's still not doing it I
394:23 - think maybe minus
394:26 - 80px still doesn't seem to be doing it
394:29 - well what if we put this in a
394:32 - div so this is where you'll have to
394:34 - experiment this is where it becomes like
394:36 - a fairly tricky CSS kind of thing to do
394:39 - and let's see if we can
394:41 - get IMG SRC ID yellow line margin top is
394:45 - minus 80 what if we said margin top to
394:48 - minus 200 pixels still doesn't seem to
394:50 - be doing
394:51 - it okay well I
394:57 - I think I'll I'll I'll just give up at
394:59 - this point um but maybe what we might
395:02 - need to do then is we might need to
395:03 - adjust some of these gaps because now we
395:07 - no longer need this margin below the H1
395:09 - so I can go back into
395:11 - H1 and I am going to remove the bottom
395:15 - margin which is 30
395:22 - pixels yep let's see now do we still
395:25 - have a bottom margin here no oh we
395:28 - [Music]
395:31 - do and I'm just going to set margin
395:33 - bottom to
395:38 - zero yeah so that is close enough there
395:42 - are other styling properties that can be
395:44 - used to achieve exactly what we are
395:46 - looking for you can use something called
395:48 - position absolute I believe um yeah
395:51 - position relative and absolute and then
395:53 - you can set exact where it is from the
395:55 - top um that might be able to do it let
395:58 - me give it a quick
396:02 - attempt position absolute uh or position
396:05 - relative
396:08 - here and here I'm going to give it
396:10 - position
396:20 - absolute okay that is doing it probably
396:23 - I probably don't need this this and yeah
396:27 - now I can say margin
396:32 - top minus 10 PX probably like that and
396:39 - if I want to if I want it to appear be
396:41 - behind the text I need to uh put the
396:44 - text as the next thing here and not the
396:47 - first
396:50 - thing well or we could use something
396:52 - called Zed index so so again Z index
397:00 - is minus 10 let's say something like
397:02 - that so it shows up behind the text okay
397:05 - this is good now we can probably add
397:07 - back that H1 padding that we
397:09 - had so let's see we had a margin
397:15 - bottom
397:18 - 30px yeah so now this is almost exactly
397:22 - okay it's a little higher the yellow
397:24 - line instead of it
397:26 - being Min - 10 PX maybe we can go minus
397:31 - 15
397:32 - PX yeah and now it's almost exactly what
397:35 - we're looking for we have WordPress
397:37 - developer and we have uh WordPress
397:39 - developer so what you can do is you can
397:42 - have a position relative on the parent
397:45 - position absolute on the child and then
397:47 - you can move it around anywhere within
397:49 - the parent okay so that's just something
397:52 - that you can do in case you need to
397:54 - achieve layouts like these but otherwise
397:56 - this is looking good I think I'm going
397:58 - to stop here there is a title section
398:00 - there is an email section and we can of
398:02 - course hyperlink this we can hyperlink
398:04 - this all of those things are possible uh
398:06 - this is looking good freelance front end
398:08 - web developer and WordPress developer
398:10 - and this is looking fine contact
398:12 - me looks good uh
398:16 - pricing the boxes with pricing and then
398:19 - the layout the last thing I'm going to
398:21 - do is I'm going to quickly show you how
398:22 - to deploy this in case
398:24 - you are going to share this with
398:27 - somebody so here's what you can do just
398:29 - zip it up go to compress figma to web
398:32 - page just zip that up and we're not
398:35 - going to use git or anything here I'm
398:36 - just going to use this free platform
398:38 - called static. apppp let me just sign
398:42 - out here so that I can show
398:44 - you yeah and here static. apppp allows
398:47 - you to just take a zip file and you can
398:49 - upload that and deploy it inexpensive
398:51 - rabbit okay let me just add Sydney
398:56 - plus 99 at jan.com
399:19 - okay and let's yeah so this is a site
399:22 - where you can upload a zip file and then
399:24 - you can just you you'll have to verify
399:27 - your email let me go ahead and do that
399:30 - right
399:31 - here doing it on another screen here
399:34 - okay I'm going to activate my email done
399:38 - and once my email is activated it has
399:41 - taken the zip file and it has simply
399:43 - uploaded it on the cloud and it has
399:45 - given us this
399:46 - URL it is it takes a minute or two to
399:49 - set up but at this
399:51 - point yeah it is still un packing the
399:54 - archive looks
399:56 - like yeah so at this point our website
400:00 - is deployed and you can also then
400:02 - connect static. apppp to your own
400:04 - personal domain so I'm just going to
400:06 - share this link with you so that you can
400:07 - actually verify that this is this
400:09 - website is actually deployed but this is
400:13 - all there is you have a layout like this
400:18 - which is given to you in figma the first
400:20 - thing that you do is inspect the design
400:22 - mockup you identify y okay what are the
400:24 - different dimensions what are different
400:26 - components and there's a guide here that
400:29 - you can check out which uh an overview
400:31 - of figma for developers and how
400:32 - developers can use figma but the idea is
400:35 - you just inspect the design you identify
400:37 - what are the various sections you
400:39 - identify the fonts used on the page you
400:41 - identify you find them on Google fonts
400:42 - you export any images or JPEG files that
400:45 - are being used within your web page then
400:47 - the next step step two is to set up the
400:49 - basic page structure and styles so you
400:52 - create a folder on your desktop and then
400:54 - you open it up in vs code or if you're
400:55 - using git or something fancy like that
400:57 - then you can do that too create an
400:59 - index.html file create a styles.css file
401:02 - that's what we have here we have a
401:06 - index.html we have a styles.css and copy
401:09 - over all the images that you need so the
401:11 - hero image was the only image and then
401:12 - we had a bunch of these then you add the
401:16 - basic style so you add basic HTML tags
401:18 - head title link body uh we added all of
401:22 - those uh first in our file then you add
401:27 - the various sectionwise div so you
401:28 - create a div for each section because
401:30 - each section ultimately is going to be a
401:32 - box on the page and you set up some
401:34 - basic styles for the body you set up
401:36 - basic styles for the header you set up
401:38 - backgrounds font families text sizes
401:40 - colors Etc then you go ahead and you
401:43 - implement the web page section by
401:44 - section and the key there is to First
401:47 - identify in the Box whether the box is
401:50 - in a hor whether things are arranged in
401:52 - a horizontal direction or a vertical
401:53 - Direction so you always want boxes and
401:56 - the box has to be has to have something
401:58 - in a vertical direction or something in
401:59 - a horizontal Direction and then you then
402:02 - create boxes within boxes right so
402:04 - you're always looking to create a layout
402:07 - like
402:08 - this where you
402:10 - have or a layout like
402:13 - this where you have a box and then
402:16 - within this box one possibility is that
402:18 - you have boxes that are laid out
402:21 - horizontally like that or the other
402:24 - possibility is that you have a box and
402:27 - within this box things are laid out
402:30 - vertically and so on and of course again
402:33 - within that horizontal box you can have
402:35 - like a bunch of vertical boxes like
402:38 - that right and then within each of those
402:41 - vertical boxes you can again have a
402:42 - bunch of horizontal boxes so if you
402:44 - start thinking of your web design as
402:46 - something like this as a bunch of boxes
402:48 - inside boxes inside boxes with each box
402:51 - having its children laid out in
402:52 - horizontal or vertical order
402:54 - then your web design becomes really
402:55 - simple and you'll never run into a lot
402:58 - of the CSS issues that often plague web
403:00 - developers so in this case for the
403:02 - pricing table we had a vertical layout
403:04 - first so the box box box and then a big
403:07 - box and then inside the big box at the
403:09 - bottom we had a horizontal layout box
403:12 - one box two box three equal width that's
403:14 - where for horizontal layouts you use
403:16 - display flex and then for each of these
403:18 - inner pricing cards we also used a trick
403:21 - where we added another inner div which
403:23 - will have its own on radius and border
403:25 - and all so that the outer Dives were
403:26 - just for creating the wids and the inner
403:28 - Dives were creating the cards and then
403:30 - in the pricing card we have a horizontal
403:32 - of a vertical layout okay so that's all
403:36 - you need to know that's all you really
403:38 - need to know in terms of taking a web
403:41 - design and then converting it or taking
403:43 - a web design mockup and converting it
403:45 - into a web page of course there are
403:47 - these special cases like this where you
403:50 - have to figure out how you're going to
403:52 - add that but the way you do it is by
403:54 - using some negative margins here and
403:56 - there maybe using a position relative
403:58 - for the parent absolute for the child
404:01 - and you can always just search position
404:04 - relative
404:06 - absolute
404:08 - examples and there are a bunch of
404:10 - tutorials on this like nobody knows
404:12 - exactly how to do these things you have
404:14 - to Lear you have to search for them and
404:17 - position is generally one thing when you
404:18 - have like one thing behind another that
404:20 - you can deal with so similarly you can
404:22 - maybe get this one one element this this
404:24 - nice glow that you have here you can get
404:27 - this element somehow you can try to get
404:29 - this element this glowing thing uh and
404:31 - you can export that ellipse as a PNG
404:33 - file or an SVG file and let's see yeah
404:37 - and then you can just incorporate that
404:38 - within your code as well okay all of
404:41 - that is doable so yeah so you add
404:43 - content for each section one by one
404:44 - using HTML by using that box structure
404:47 - then you use figma's inspect tab so
404:50 - remember here you select anything and
404:51 - you can see exactly what what properties
404:54 - it is using it's not that you'll be able
404:56 - to copy these over directly you may have
404:58 - to make some changes to it but you use
405:00 - figma inspect tab to check values of CSS
405:02 - properties add styles for each completed
405:04 - section one by one using CSS and then
405:06 - try to replicate the mockup as closely
405:08 - and as precisely as possible and that's
405:10 - where we get into these Minor Details
405:13 - like over here we have this at character
405:15 - which is vertically centered so maybe we
405:18 - can achieve the same thing over here
405:20 - like that and often there may be some
405:22 - tradeoffs we will have have to make when
405:24 - you actually go ahead and implement the
405:26 - design for example we reduced some
405:27 - spacing here we decided that we are
405:29 - going to Center the image on the page
405:31 - and add a border to it because uh
405:34 - otherwise it just looks a little odd
405:35 - that the image is not only sticking out
405:37 - but it's also then there is some space
405:39 - on the ride which is empty okay so that
405:43 - is everything that we're going to cover
405:45 - today so thank you for joining and there
405:47 - are a bunch of first of all I would love
405:50 - to know how did you find the session you
405:52 - can drop a line in the chat and we'll
405:54 - see but there are a bunch of comments or
405:57 - questions as well let's
406:00 - see how do we get the figma file we will
406:03 - share we will add a link in the
406:05 - description but let me also share that
406:07 - link with you right now so this is the
406:10 - figma file that you can
406:14 - use then you should use the button tag
406:17 - inside an a tag for mailia okay so that
406:20 - was a nice tip that I can actually put
406:22 - the button tag inside an a tag so that's
406:24 - great I will definitely do that or we
406:27 - can actually just fix that right now I
406:29 - believe it's okay it's okay we are out
406:31 - of time hover state is not added yeah so
406:34 - we've added the hover State not for this
406:36 - button yes we should add it for this
406:37 - button also but we've added the hover
406:39 - state for these
406:42 - buttons would you recommend to use live
406:44 - server so that you don't have to reload
406:46 - the website yeah so you can use a vs
406:47 - code extension like live server so there
406:49 - is this vs code extension called live
406:52 - server you can use it if you're using vs
406:54 - code on the cloud like GitHub code
406:56 - spaces or you can also use it locally
406:58 - and the benefit is that anytime you make
407:00 - a change to the file it automatically
407:02 - reloads the page so you can use that too
407:04 - I just wanted to keep things simple for
407:06 - today and yellow line rotated 45° well
407:11 - it's not rotated
407:13 - here but
407:16 - yeah okay perfect well I think we will
407:19 - close at this point so thanks a lot for
407:21 - joining I hope you enjoyed this tutorial
407:23 - and if you want more tutorials like this
407:25 - come join our WhatsApp Community we'll
407:27 - uh drop a link in the
407:31 - chat it's just jan.com
407:36 - WhatsApp so you can join our WhatsApp
407:38 - community and um you'll get to know
407:41 - about more future events we have events
407:42 - happening every week more or less you
407:44 - can also just go on join.com events and
407:47 - learn more about these events so yep I
407:50 - hope that is helpful now and I'll see
407:54 - you next time thank you and have a good
407:56 - day or good night bye-bye so let's get
408:00 - started understanding Version Control
408:03 - git and GitHub is crucial for any
408:06 - developer or any team working on a
408:08 - software project so far we have been
408:11 - building our websites just by setting up
408:14 - folders on our computer opening them up
408:16 - in vs code but to professionally build
408:18 - websites you will need to track the code
408:20 - in a version control system so these
408:23 - tools allow you to track changes they
408:25 - allow you to collaborate with others
408:26 - because you're typically not going to be
408:27 - the only one working on a web
408:30 - application or website and they also
408:32 - allow you to deploy your applications
408:33 - easily and efficiently to the
408:36 - cloud and by mastering these skills you
408:38 - can streamline your development workflow
408:41 - so today we are going to learn what
408:42 - professional web developers use when
408:45 - they're working on these
408:47 - projects so in particular we are looking
408:49 - at these topics we will talk about using
408:51 - GitHub repositories to store and share
408:54 - your project source code we will talk
408:57 - about using GitHub code spaces which is
408:59 - an online code execution and online
409:03 - development platform in conjunction with
409:05 - a browser based vs code for web
409:08 - development we will talk talk about
409:10 - developing and previewing changes to a
409:12 - website using GitHub Cod spaces we will
409:15 - talk about creating git commits and
409:17 - pushing changes back to a GitHub
409:19 - repository then we talk about deploying
409:21 - a website to the cloud directly from
409:23 - GitHub using the worell cloud platform
409:26 - and we'll try to understand the GitHub
409:27 - collaboration workflow which involves
409:29 - branches and pull
409:31 - requests and finally if we have the time
409:34 - we will also touch on installing and
409:35 - using git locally on your computer and
409:38 - connecting it with GitHub now the best
409:40 - way to learn these skills is to follow
409:42 - along step by step and type out all the
409:44 - code yourself git can often be confusing
409:47 - at first so I want to start with that
409:49 - disclaimer because there are so many
409:51 - different terms that you will hear get
409:54 - pull merge commit Etc but it starts to
409:58 - feel natural with a lot of practice and
409:59 - you will see us repeating the same flows
410:01 - over and over for the rest of this
410:03 - course and the rest of the program so by
410:05 - the end you will become proficient in
410:07 - git whether you like it or not now of
410:10 - course this tutorial assumes some prior
410:12 - knowledge of HTML and CSS so if you
410:14 - haven't completed the previous
410:15 - lessons so if you haven't completed the
410:18 - previous lessons please go ahead and
410:19 - complete them first so we will explore
410:23 - these Topics by attempting to work on a
410:25 - specific problem statement we want to
410:28 - improve the development workflow for the
410:30 - Jovian careers website so in our
410:32 - previous tutorials we've built this
410:35 - careers website which has a navigation
410:37 - bar which has this Banner which has some
410:39 - information about Jovian an image which
410:42 - has a table showing the job
410:43 - opportunities at Jovian and it has a
410:45 - form where anybody who is interested in
410:47 - applying for a job at Jovian can submit
410:49 - their application and finally it has a
410:51 - footer at the bottom as well and we
410:54 - built this by setting up a folder on our
410:56 - computer locally and then uploading a
410:58 - zip file to static. apppp and that is
411:01 - how we have this deployed version so
411:04 - what we want to do is set up a GitHub
411:06 - repository to host the source code and
411:09 - facilitate collaborative development we
411:12 - also want to deploy the website directly
411:14 - from GitHub to the cloud using the worel
411:17 - cloud platform and we also want to add
411:19 - some appropriate meta tags which we'll
411:21 - talk about today to sure that when you
411:23 - share this website with somebody let's
411:26 - say on a social platform or as a link on
411:29 - a messaging platform then the page
411:31 - previews properly so all of that is
411:34 - something that we'll try and cover today
411:36 - so here is where you can find the code
411:38 - for this tutorial we are going to start
411:40 - with the starter code which contains all
411:43 - the code for this website that you're
411:44 - already looking at which we have
411:46 - developed so far till in the previous
411:49 - tutorials so let me open up the starter
411:51 - code this is going to be a zip file I'm
411:53 - just going to save it here on my
411:56 - desktop and once it's downloaded I can
412:00 - then you can see here it's downloaded on
412:02 - my computer I can then just decompress
412:05 - it so now I have this folder so in this
412:07 - folder I have the index.html file I have
412:11 - a couple of other styles file I have a
412:13 - couple of images and this index.html
412:15 - file contains the actual application
412:18 - page the Jian careers page okay but of
412:22 - course we are not going to do this
412:23 - development locally we are going to do
412:25 - this development now using GitHub now
412:29 - I'm sure if you have if you are pursuing
412:32 - web development if you have done any
412:33 - programming you must have heard for
412:35 - heard about GitHub and you must have
412:37 - also heard the terms git and Version
412:39 - Control so first I just want to
412:40 - demystify these terms before we start
412:42 - using
412:44 - them now git is a popular version
412:47 - control system which enables developers
412:49 - to track changes to their code base and
412:51 - collaborate with others
412:53 - and GitHub is a web- based platform that
412:56 - provides hosting for git repositories
412:59 - and tools for collaboration okay so
413:01 - let's break down each of these terms one
413:03 - by one what do we mean by Version
413:05 - Control Version Control is any system
413:09 - that tracks changes made to a file or a
413:12 - set of files or a project so it enables
413:15 - developers to keep track of different
413:17 - versions instead of you having to create
413:19 - multiple copies saying V1 V2 Etc you can
413:22 - just put put everything into a Version
413:23 - Control System systematically it also
413:26 - enables developers to collaborate with
413:28 - others so that you can have one common
413:30 - version and two people can build off it
413:32 - then you can bring those changes back
413:34 - and sometimes when required it also
413:35 - allows developers to revert to previous
413:38 - versions of their code if needed and it
413:42 - enables developers to work on different
413:44 - versions of their code simultaneously so
413:46 - as a developer sometimes you work on
413:48 - multiple features at a time and again
413:50 - you need a version control system for
413:52 - doing that
413:53 - so there are many Version Control
413:55 - Systems there's one called SN that was
413:57 - very popular early early on in the '90s
414:00 - there is of course git which we'll talk
414:02 - about today and there is something
414:03 - called Mercurial so version control
414:05 - system is any system that allows
414:07 - developers to track various versions
414:10 - track changes of files or projects now
414:14 - you can learn about the various Version
414:16 - Control Systems and the differences
414:17 - between them I linked to a site but we
414:20 - are going to focus on a specific kind of
414:22 - Version Control system called git now
414:24 - the key Concepts behind git are that you
414:28 - have typically a remote server so
414:31 - typically this remote server could be
414:32 - something that you have set up your
414:34 - company has set up or it could be an
414:36 - online platform like GitHub so you have
414:37 - a remote server where the ground where
414:41 - the master version or where the main
414:43 - version of your code is
414:44 - stored and this code is called a
414:47 - repository so your code is stored in
414:49 - something called a repository along with
414:51 - all its previous versions
414:53 - and then whenever you as a developer
414:55 - want to work on this code you first have
414:58 - to pull it onto some computer so it
415:00 - could be a local computer it could be
415:02 - another Cloud computer and then you make
415:04 - some changes on your computer and then
415:07 - you send the changes back to this remote
415:10 - server and you're not just the only
415:12 - developer on this there can be other
415:14 - developers who can be doing the same
415:15 - thing okay so git is this particular
415:19 - kind of Version Control System where you
415:21 - have often this Central server which
415:23 - stores the repository of code and then
415:26 - you take a copy of the code make some
415:28 - changes and push your changes back to
415:30 - the central server and that is how
415:32 - people collaborate okay so that is how
415:35 - git works and here are few Concepts in
415:38 - git that we will try and cover today so
415:40 - the first thing in git is that it it
415:42 - uses something called a branching system
415:45 - that allows developers to work on
415:46 - different versions of their code
415:49 - simultaneously without affecting the
415:51 - main code base okay
415:53 - the second thing is that developers can
415:54 - make changes to their local copy and
415:57 - then they can push those changes to a
415:59 - central
416:00 - repository next suppose two developers
416:03 - are making changes to the same file or
416:05 - the same set of files then git also
416:07 - allows developers to merge their changes
416:10 - the changes made by different team
416:11 - members and resolve any conflicts in
416:13 - case both team members are making
416:15 - changes to the same file finally git
416:18 - also has the ability to track changes
416:20 - made to individual lines of code so when
416:22 - you're trying to merge some of your
416:24 - changes back to the cloud repository you
416:27 - can check what individual lines of code
416:29 - have changed and you can also roll back
416:32 - to previous previous versions of the
416:33 - code okay so it is one of the more
416:36 - sophisticated and one of the most widely
416:38 - used Version Control Systems and don't
416:40 - worry if these Concepts don't make sense
416:42 - right now we are going to cover all of
416:44 - this in much more detail over the course
416:46 - of today's
416:48 - tutorial okay next what is GitHub so we
416:52 - talked about Version Control any system
416:54 - that can be used for tracking changes
416:56 - across files and folders git is a
416:59 - particular kind of Version Control
417:00 - System where there's a central
417:01 - repository and then you can take copies
417:03 - make changes and push them back using
417:06 - branches then we have something called
417:08 - GitHub now remember in git there is this
417:11 - Central repository that can be a
417:13 - repository that you have set up your
417:15 - company has set up or you can use one of
417:17 - existing Central repositories and GitHub
417:20 - is the world's largest Cent repository
417:23 - for git based projects okay so GitHub is
417:26 - a web based platform that provides
417:28 - hosting for git repositories and it
417:31 - provides a range of collaboration tools
417:33 - on top of that hosting for developers
417:35 - other similar platforms are gitlab and
417:37 - bitbucket so you can use any of these
417:39 - all of them have free plans but GitHub
417:41 - is the most popular one it had it has
417:43 - tens of millions of people using it so
417:45 - you should probably start with
417:47 - GitHub now on top of git GitHub offers
417:51 - several additional features
417:52 - the first thing it gives you is a web
417:54 - based interface for managing get
417:56 - repositories making it easy to view and
417:58 - manage code it also offers a wide range
418:01 - of collaboration tools on top of git uh
418:05 - things like pull requests code reviews
418:07 - and Team Management features again we'll
418:09 - touch on these and finally GitHub also
418:12 - provides hosting for open- Source
418:14 - projects so most software that you use
418:16 - on the Internet is built using open-
418:18 - Source projects and these open source
418:20 - projects are typically hosted on GitHub
418:23 - so GitHub is a great place for you to
418:25 - discover open source projects and even
418:27 - contribute to open source projects and
418:29 - it has a vast community of developers
418:31 - where you can interact with others and
418:33 - you can interact with developers of Open
418:35 - Source projects and make your own
418:37 - contributions finally GitHub also
418:39 - provides Integrations with other tools
418:41 - specifically around deployment project
418:43 - management Etc to make it a complete
418:45 - software development workflow okay so
418:48 - GitHub is a hosting is a hosting
418:51 - platform for git and it offers a lot of
418:53 - additional features on top of git okay
418:57 - so I hope that clarifies the difference
418:59 - between Git Version Control and GitHub
419:03 - they are like layers Version Control is
419:04 - a basic kind of a system git is a
419:06 - specific kind of version control system
419:08 - and GitHub is a hosting platform for git
419:10 - repositories with some additional
419:12 - features so let's start by first
419:14 - creating a repository for our project so
419:17 - projects on GitHub are known as
419:18 - repositories so we'll go ahead and
419:19 - create a repository so the first thing
419:22 - you might need to do is go to github.com
419:24 - and sign up if you're not signed up
419:26 - already in my case I have already signed
419:28 - up so I'm simply going to sign in so I'm
419:30 - just going to click sign in and that is
419:32 - going to sign me in to
419:36 - GitHub all right so once you sign in
419:38 - this is what your dashboard looks like
419:40 - and on your dashboard the first thing
419:43 - you want to do at least when you've
419:44 - created your account for the first time
419:46 - is to click the new button to create a
419:48 - new repository or a new project so let's
419:51 - create a new repository uh we are going
419:53 - to call it Jovian careers site live
419:58 - because I'm doing this live and let's
420:01 - add a description for this repository so
420:03 - a
420:05 - website to show job applications at
420:10 - Jovian or job openings at
420:14 - Jovian and accept
420:18 - applications next you can choose whether
420:20 - to make this Repository public which is
420:23 - open source for the rest of the world to
420:25 - see and build upon or you can make it
420:28 - private now you can make it public and
420:31 - people can see the code but they cannot
420:33 - make changes to your repository you
420:34 - still control who can make changes but
420:37 - if you make it private only you will be
420:38 - able to see it and if you add
420:40 - collaborators only they will be able to
420:41 - see it and you can also choose which of
420:44 - those collaborators can actually make
420:45 - changes to the repository so for now I'm
420:47 - just going to make it public so that you
420:49 - can actually see The Code by the end of
420:50 - this lesson yourself
420:53 - next you have a few initialization steps
420:56 - so if you are creating a repository on
420:59 - GitHub and you plan to develop from this
421:02 - repository then you should initialize it
421:04 - with the readme file and some of these
421:06 - other things on the other hand if you
421:07 - already have a repository on your
421:09 - computer you just want to upload it to
421:11 - GitHub then you can skip these
421:13 - initialization steps okay in my case I'm
421:16 - just going to select this initialization
421:18 - step add a readme file what that's going
421:19 - to do is just create a file called
421:22 - readme.md wherein I can put in some
421:24 - documentation about my uh project so I'm
421:27 - going to keep that and then there is
421:30 - something called a git ignore file that
421:31 - gets added so often when you are
421:33 - creating a git repository there are
421:36 - certain temporary files that can get
421:38 - created as you're executing your code
421:39 - and you may not want to put those
421:41 - temporary files or compiled files into
421:44 - your git repository so that's where a
421:48 - git ignore file comes in don't worry
421:50 - about this we'll touch on this later
421:52 - but for now because we are going to
421:55 - create a JavaScript and HTML and CSS
421:57 - project so the top the G ignore template
422:00 - that you can select is node so node
422:03 - simply stands for nodejs which is a tool
422:06 - used to run JavaScript and HTML and CSS
422:09 - based projects locally on people's
422:12 - computers so you can just select the git
422:13 - ignore template node and if it doesn't
422:16 - make sense don't worry it's not
422:17 - important right now and finally you can
422:20 - also select a license so when you put up
422:22 - any code on the internet specifically on
422:25 - GitHub you can inform people what you
422:28 - what they are allowed to do with the
422:29 - code are they allowed to build on top of
422:31 - the code are they allowed to use the
422:33 - code for academic purposes are they
422:35 - allowed to use the code for commercial
422:37 - purposes you can specify all of that and
422:41 - one of the most common licenses is the
422:44 - MIT license which basically allows the
422:46 - user of your code to do anything they
422:49 - want to do with the code whatsoever
422:51 - without any warranty
422:52 - okay so that is just a common template
422:55 - so what you'll often do when you create
422:56 - a new GitHub project is you will add a
422:58 - readme file you will select a get ignore
423:00 - template for JavaScript or HTML CSS
423:03 - projects the this is typically node but
423:05 - let's say if you were doing a python or
423:07 - a data science project you could select
423:08 - Python and so on and you will also
423:11 - select a license in many cases MIT
423:14 - license should suffice and you can learn
423:16 - more about all of these the readme file
423:17 - the G ignore and the license by checking
423:20 - out these links okay now finally as I
423:23 - said git has a concept of branches so
423:26 - the first thing you have to do is when a
423:30 - g GitHub repository gets created it has
423:32 - a default
423:33 - branch and the default branch is often
423:36 - called the main branch okay the main
423:38 - branch is where the main version of your
423:39 - code lives but you can then create
423:41 - multiple branches as you're working on
423:43 - specific features and then you can um
423:46 - bring those code from those branches
423:48 - back into the main branch now for now uh
423:51 - we will go ahead with main as the
423:53 - default Branch but know that sometimes
423:55 - in some older repositories the the
423:58 - default Branch name was called Master
424:01 - M but the new convention is to call the
424:04 - uh default Branch main so that's what
424:06 - we'll go ahead with
424:09 - Okay so let's hit create repository and
424:12 - now our GitHub repository is
424:15 - created perfect so you can see now you
424:18 - have this fairly complicated looking
424:21 - interface you have a nav bar here then
424:22 - you have a bunch of buttons then you
424:24 - have a bunch of tabs then you have again
424:25 - some options Etc so I know it looks
424:28 - complicated but we will touch on almost
424:31 - all of these tabs over the course of the
424:33 - next several lessons and over the course
424:35 - of the program but for now what I want
424:37 - you to pay attention to is this area so
424:39 - here is your username you will see your
424:41 - username here and next to your username
424:44 - you will see the name of the
424:46 - project so the name of the project is
424:49 - Jovian career site life typically these
424:51 - are are all lowercase and typically
424:53 - these are all separated by
424:54 - hyphens and then in the code tab you're
424:57 - going to see that in the main branch
424:59 - which is the only Branch we have right
425:01 - now we have three files so our
425:03 - repository has been initialized you can
425:06 - see that there's an initial commit we'll
425:08 - talk about comets as well one minute ago
425:11 - with three files one is a readme file
425:13 - one is a license file one is a get
425:14 - ignore file and you can open up this
425:16 - license file and you can see what it
425:18 - contains similarly you can open up this
425:20 - G ignore file and you can see see what
425:21 - it contains and you can open up this
425:24 - readme.md file and you can see what it
425:26 - contains so again this is all created
425:28 - using markdown which is a fancy way of
425:31 - writing
425:32 - text so there are three files in our
425:36 - repository and at the moment our GitHub
425:39 - project or repository has been created
425:41 - so we can already go ahead and share
425:43 - this with other people let's say we want
425:44 - to share our code with other people we
425:45 - can take this link and share it with
425:47 - them but of course we don't have any
425:49 - code here right now so the next thing
425:52 - we're going to do is actually import our
425:55 - code into this
425:57 - repository now there are two things we
425:59 - can do we can actually start writing a
426:01 - writing some code or we can start
426:03 - importing some existing code that we
426:05 - already have in both cases we need to
426:08 - open up this git repository in a code
426:11 - editor now you can download this git
426:14 - repository to your computer and then
426:16 - open it up in VSS code or any other code
426:19 - editor or you can also use some online
426:22 - platforms for developing on this GitHub
426:25 - repository specifically GitHub provides
426:28 - something called GitHub Cod spaces which
426:30 - you can think of as your own personal
426:32 - computer attached to this GitHub project
426:35 - or repository but living on the cloud
426:38 - all right so GitHub Cod spaces is a
426:40 - cloud-based development environment that
426:42 - allows you to write test and debug your
426:45 - code directly in the browser so it
426:47 - allows you to quickly set up a
426:48 - development environment without needing
426:50 - to install any software locally
426:52 - it provides a consistent development
426:54 - environment across different machines
426:56 - because you're writing all your code in
426:58 - the browser and the browser is connected
427:00 - to some machine on the cloud where all
427:02 - of the dependencies are already
427:04 - installed it also makes it very easy to
427:06 - collaborate on code with other
427:07 - developers because you can have real
427:09 - time shared code spaces so if you're
427:11 - writing code within a code space you can
427:14 - create a sharable link invite somebody
427:15 - else to come and collaborate with you
427:17 - live and it lets you work from anywhere
427:20 - so you don't have to work from a
427:21 - particular computer you can just open up
427:24 - your GitHub repository and launch a
427:26 - GitHub code space online and start
427:28 - typing code into it okay so you can
427:30 - think of it as a personal computer on
427:33 - the cloud that you can access from
427:34 - anywhere and you can check out github's
427:36 - documentation for setting up Cod spaces
427:40 - but starting a Cod Space is really
427:41 - simple what you do is you go to your
427:44 - repository folder and or you go to your
427:46 - repository on GitHub and you click this
427:49 - code button here and you have two
427:51 - options you have local and you have code
427:53 - spaces and here you can click create Cod
427:56 - space on Main so what this is going to
427:58 - do is this is going to set up a a
428:01 - computer for you on the cloud and it is
428:04 - going to associate that computer with
428:07 - this GitHub repository so you can see
428:10 - here if I zoom in a little bit it has
428:13 - set up this cloud-based computer for me
428:15 - and it has opened up visual studio code
428:18 - on that computer and it has given me a
428:20 - browser user based interface to connect
428:23 - with Visual Studio code on that computer
428:25 - so there's a lot going on here so
428:27 - instead of opening Visual Studio code on
428:30 - our own computer we have opened up
428:32 - visual studio code on a GitHub codes
428:34 - space which is a computer running
428:36 - somewhere on the cloud all right so this
428:39 - is what it looks like remember we on our
428:41 - GitHub repository we had these three
428:43 - files G ignore license and readme.md so
428:46 - if you come here now you can see that we
428:48 - have the same GitHub repository now open
428:50 - for editing in this code space
428:52 - accessible via these via this browser
428:54 - based Visual Studio code interface okay
428:57 - so within the browser we have Visual
428:59 - Studio code and I can open get ignore
429:01 - and I can make some changes here I can
429:03 - open this license file and I can make
429:05 - some changes here and similarly I can
429:06 - open this readme file and I can make
429:08 - some changes here okay but what we want
429:11 - is to actually put in the code that we
429:13 - already have from our previous tutorial
429:16 - which is the index.html styles.css and a
429:19 - couple of other files so here's what
429:22 - we'll
429:23 - do as you work on more complex projects
429:26 - it is going to it's it'll be a good idea
429:29 - for you to separate some of these
429:30 - configuration related files like G
429:32 - ignore license Etc with your actual
429:35 - source code so what I'm going to do is
429:36 - create a folder here so I'm going to
429:38 - right click and select new folder and
429:40 - I'm going to create a new folder called
429:42 - SRC so now I have created a new folder
429:44 - called SRC and into this folder now I
429:47 - can add an index.html file so I can say
429:50 - index do HTML and now I can maybe put in
429:54 - some HTML code
429:55 - here and maybe I can start writing
429:58 - things and so on but I already have a
430:01 - bunch of these files so I can just
430:02 - upload these files so let me delete this
430:04 - file once let me just delete this file
430:07 - index.html and let me upload these files
430:09 - from my computer onto this remote
430:11 - machine so I'm going to say upload I
430:15 - right clicked on SRC and I'm clicking
430:17 - upload and now I'm going to open up the
430:19 - folder my second web page and now I'm
430:22 - going to select the files that I want to
430:23 - upload so I want index.html I want
430:26 - styles.css I want team.jpg and
430:29 - banner.jpg and I'm going to click
430:32 - open all right so now all the files from
430:35 - my computer have been taken and uploaded
430:39 - into this Cloud code space this Cloud
430:42 - machine which I'm accessing using vs
430:44 - code from the browser okay now I can now
430:47 - we can actually go ahead and delete this
430:49 - folder entirely I don't need it but all
430:52 - of this code is still going to be here
430:53 - for me okay so remember we had this
430:58 - Jovian career side that we built the
431:00 - last time and this was built using this
431:02 - index.html file so let
431:05 - us yeah so let us look at this
431:07 - index.html file it obviously it has a
431:09 - head section where it has a title and it
431:12 - has a bunch of fonts that are included
431:14 - then it has a body section which
431:15 - contains a nav bar it which contains a
431:17 - banner and it contains this heading so
431:20 - we have a nav bar Banner heading then we
431:22 - have this about description section
431:24 - where we have some information about
431:26 - Jovian and we have uh links to the two
431:28 - programs and then we have this team
431:30 - image over here and then we have a list
431:33 - of job opportunities which is a table so
431:35 - that is the job opportunities table that
431:38 - you can see here and finally below this
431:41 - we have a form so form contains a bunch
431:44 - of form inputs and then there is a
431:46 - footer below the form which is what you
431:48 - see here as well so there is a form and
431:50 - then there is a footer below the form
431:51 - right at the bottom now of course these
431:55 - HTML elements are styled using CSS so
431:57 - we've set a base font size on the HTML
432:00 - and then we've set some body fonts and
432:03 - we've set some header fonts as well
432:05 - we've also set specific sizes for the
432:06 - headers we have set specific colors for
432:09 - headers and for body we've also set a
432:12 - bunch of other colors and then we've set
432:14 - a bunch of other CSS styles to make our
432:17 - page look as we want it to look and we
432:20 - have set some styles for the table we
432:22 - have set some styles for the form and we
432:23 - have set some styles for the footer and
432:25 - for the button okay so that is what our
432:27 - code looks like right now so for now I'm
432:30 - going to close this deployed website and
432:33 - now let's try and figure out how can we
432:34 - actually preview this okay so now we
432:36 - have some code already on this code
432:39 - space but this code is no longer on our
432:42 - computer this is on the remote machine
432:43 - so there's no place where I can double
432:45 - click and open it in a browser and
432:46 - preview it so there is an extension or a
432:50 - plug-in that we can install into vs code
432:52 - for previewing these files all right so
432:55 - this is one of the nice things about vs
432:56 - code that depending on which language or
432:58 - which kind of project You're Building
433:00 - you can install some plugins to ease
433:02 - your development so I'm going to go
433:04 - click on extensions and then here I am
433:08 - going to search for
433:12 - live server okay so just search for live
433:16 - server l i s v r it is created by this
433:19 - person called rck day and you'll know
433:20 - because it has 32 million downloads so
433:22 - that is how many people actually use vs
433:24 - code and also use this extension and I'm
433:27 - going to click install in codespace and
433:29 - that is going to install this plug-in
433:32 - into my codespace now once this plug-in
433:35 - is installed into the codespace I can
433:37 - close this extension Tab and by the way
433:39 - the extension menu is here on the left
433:41 - so in the sidebar it is this uh fourth
433:45 - or fifth option yeah it's the fifth
433:46 - option in the sidebar so that's how you
433:48 - come to extensions and now now that I've
433:51 - installed this extension I can come back
433:53 - here onto my file explorer and now I can
433:58 - see here that on my index.html file if
434:01 - you see at the bottom here I have this
434:03 - go live button right at the bottom here
434:05 - so this is a new button that has been
434:07 - added by the live server or I can also
434:10 - just right click on index. HTML and I
434:12 - can say open with live server both of
434:14 - these are going to do the same thing so
434:15 - I'm just going to click the go live
434:17 - button what that does now is it is going
434:21 - to Now set
434:23 - up our code space to expose this file to
434:27 - the browser at a separate URL like this
434:30 - okay so now I can let me put this on the
434:34 - left and let me put this yeah on the
434:37 - left and right and let's close these let
434:39 - us also close the sidebar now you can
434:42 - see that here I have my codespace
434:45 - running on the cloud so my vs code
434:47 - running in the browser and I have a live
434:49 - preview of my code running here here
434:51 - open while using the live server in on
434:54 - the right okay now here is one nice
434:56 - thing about the live server let's say I
434:59 - want to go back and I want to change
435:01 - here I want to change about Jovan to
435:03 - welcome to Jovan and I just hit save
435:06 - that goes ahead and that automatically
435:08 - refreshes the page so the live server
435:10 - makes it slightly nicer to develop and I
435:12 - can also go and do this with the
435:14 - styles.css file I can say let's say
435:16 - change the default font size from 16
435:18 - pixels to 18 pixels and I can save it
435:22 - and you can see that now the Styles file
435:24 - has been updated and now we have let's
435:27 - make it 20 pixels maybe and now you can
435:29 - see that the things are a lot bigger
435:31 - okay so this is one of the nice things
435:33 - about the live
435:36 - server all right so oops I think I
435:40 - pasted something yeah so this is one of
435:42 - the nice things about the live server
435:43 - you can go in you can make some changes
435:45 - here so you can say maybe I want to get
435:47 - rid of the word highly and I just save
435:50 - and that change changes this
435:51 - automatically okay so that is how you
435:54 - view the code that you are building that
435:56 - you're writing on especially when you're
435:58 - building a simple HTML and CSS page
436:01 - later on when we look at web Frameworks
436:03 - and uh things like react Etc then we'll
436:05 - touch on other ways to look at previews
436:08 - but on GitHub code spaces this is how
436:10 - you look at a preview of your code okay
436:13 - so just to quickly recap to start a code
436:16 - space you go to the GitHub repository
436:18 - you click on the code button and you
436:19 - select open with code spaces you can
436:21 - create a Cod space on your main branch
436:23 - if required and if you ever need to you
436:26 - get two free Cod spaces so if you ever
436:28 - need to delete previous Cod spaces just
436:30 - go to github.com
436:33 - SLC codespaces
436:35 - and over here you can go into your
436:38 - specific code spaces repository wise and
436:40 - you can go ahead and delete them in case
436:42 - you have a new repository that you want
436:44 - to develop using a codespace okay and
436:47 - then you can select a codespace
436:49 - configuration typically the basic
436:50 - configuration should be good enough then
436:52 - the Cod space gets created it takes 10
436:54 - 15 seconds and then you can just open up
436:58 - visual studio code in the browser or you
437:00 - can actually also connect your local
437:02 - Visual Studio code to the Cod space
437:04 - we're not going to go into that today
437:05 - but uh browser based development is good
437:07 - enough for most
437:09 - projects and then you can continue
437:12 - working on your code Spaces Project all
437:16 - right now in terms of how you do actual
437:18 - development well what you do is you can
437:21 - uh one thing that we recommend is that
437:23 - now anytime you're putting your actual
437:25 - web code uh you should create an SRC
437:28 - folder so to separate it out from the
437:29 - readme get ignore Etc just to keep
437:31 - things clean and now you can add files
437:33 - like index.html styles.css within the
437:36 - SRC folder and you can add code within
437:38 - them and you can also upload existing
437:40 - files or images by simply right clicking
437:42 - so you can open up the sidebar right
437:44 - click anywhere click upload file and
437:46 - upload a bunch of
437:48 - files and if you want to pre view HTML
437:51 - files within code spaces you just use
437:53 - the live server extension and this
437:55 - extension allows you to see your web
437:57 - pages as you develop them and for that
438:00 - you just go into the extension section
438:02 - here in the sidebar and you search for
438:04 - live server install it and then you go
438:06 - back and just click go live and you can
438:08 - also shut it down there's a button right
438:10 - at the bottom to shut things down as
438:11 - well and once you do that you'll be able
438:14 - to see a live preview and you can make
438:16 - changes for example if I change welcome
438:19 - to Jovian back to about Jovian that is
438:22 - going to quickly change over here as
438:25 - well now this is all well and good I'm
438:27 - making all these changes but if I go
438:30 - back to this
438:31 - repository you will see here that it
438:34 - still does not contain the code that I
438:36 - have actually added so I've added a
438:38 - bunch of files but they don't seem to be
438:41 - here in the GitHub repository well
438:44 - remember this remember this setup so we
438:47 - created our repository on GitHub and
438:50 - then we pushed that code or we pulled
438:53 - that code into a code space which is
438:55 - essentially a remote computer on the
438:57 - cloud and now we made some changes into
439:00 - our codp space machine using vs code now
439:02 - we need to push these changes back to
439:05 - GitHub to actually save them back to the
439:07 - remote repository so that's what we're
439:09 - going to look at next okay so how do we
439:12 - do that well it's a three-step process
439:16 - and we're going to first stage our
439:18 - changes next we are going to commit our
439:21 - changes and finally we are going to push
439:23 - our changes and this is where some of
439:25 - the GitHub terminology will start
439:27 - kicking in you might wonder why do we
439:29 - have three-step process why can't I just
439:30 - hit save well this is just how git was
439:33 - designed to handle a bunch of different
439:35 - use cases and that is uh what we are
439:37 - struck with unfortunately but uh once
439:39 - you do it enough you start to get used
439:41 - to it and I'll show you some easy ways
439:43 - of doing this without having to type or
439:46 - remember a lot of things okay so here is
439:50 - how works the first thing we need to do
439:52 - is we need to open up a terminal so git
439:55 - added score is a command line tool so
439:57 - you need to actually type out some
439:59 - commands on a terminal or a command line
440:01 - so we need to open up a terminal to run
440:03 - some of these commands of course we have
440:06 - our code space somewhere on the cloud
440:09 - here so we will need we can't open up a
440:12 - terminal on our computer we need to open
440:14 - up a terminal on this remote machine
440:16 - which is in the Cod space fortunately vs
440:19 - code provides an INB built terminal so
440:21 - you can just click on these options here
440:23 - and you can say View and you can select
440:25 - terminal so view terminal and now that
440:28 - is going to open up this terminal window
440:30 - okay and what is a terminal a terminal
440:32 - is simply a place where you can issue
440:33 - commands you can write commands and
440:35 - those commands will get EX executed on
440:37 - the computer so before we had graphical
440:39 - user interfaces uh operating systems
440:42 - were just terminal based text based
440:46 - platforms where you could issue commands
440:48 - and even today most Developers used
440:50 - these command line or these terminal
440:52 - commands to run a lot of their code and
440:55 - to interact with Git for example okay
440:59 - all right so now we've opened up this
441:00 - terminal so it has
441:03 - this you can see that this terminal it
441:06 - has a bunch of information already it
441:07 - tells you who is the current user so the
441:09 - current user is Sydney Jovian that is
441:11 - the name of our GitHub user it has the
441:13 - current directory or the current folder
441:15 - on the codes space where we are
441:16 - currently at and it also tells us the
441:18 - branch that we are currently at so so
441:20 - it's an informative prompt and now here
441:22 - we can start typing our terminal
441:24 - commands so the First Command that we
441:26 - need to do or we need to type is called
441:29 - git ad okay so the first thing we need
441:31 - to do is or actually even before we do
441:34 - git ad we can just type git status to
441:36 - see what status our repository in is in
441:39 - are there any new changes that we have
441:41 - made since we have checked out the
441:44 - repository from GitHub so if I type git
441:47 - status you can see here that it says
441:49 - that you are on the Bron Main and then
441:51 - there are a few untracked files and
441:53 - there are a few untracked files and they
441:55 - are the files in this folder called SRC
441:57 - so the entire untracked the entire SRC
442:00 - folder is untracked by untracked we we
442:03 - mean that git has no idea about these
442:05 - files it has never seen these files
442:06 - before so the first thing we need to do
442:08 - is we need to Stage these files so we
442:11 - take the files from our working
442:13 - directory and we stage them which means
442:15 - we tell get that okay these are some
442:17 - files that I'm interested in potentially
442:19 - putting to putting back on GitHub so I'm
442:22 - going to Stage them by saying first of
442:24 - all I'll just reset it U so anytime you
442:27 - want to reset the terminal just type
442:28 - reset and I'm going to just stage this
442:31 - by typing git add
442:34 - SRC and SRC SL what are all the files
442:37 - that I want to Stage I want to Stage
442:39 - index.html banner.jpg
442:42 - styles. uh CSS and team.jpg well I'm
442:45 - just going to type get add SRC and that
442:47 - is going to add all the files present
442:49 - within the Sr C folder into the staging
442:52 - area okay so now if I type get status
442:55 - again this time you're going to say that
442:58 - it's not saying that there are any
443:00 - untracked files so there are no more
443:01 - untracked files there are some files
443:04 - which are ready to be committed okay so
443:07 - now in my staging area which is nothing
443:09 - is yet put into the git repository yet
443:12 - we now have a four new files okay great
443:16 - so now that we have staged these files
443:18 - so from working directory we've staged
443:20 - these files the next step is to actually
443:22 - record a new version of this entire
443:24 - repository by performing a commit so
443:27 - here is what we do after adding a g dot
443:29 - a git add so I've reset things again now
443:33 - I type git
443:34 - commit and then I say minus M and then I
443:37 - provide a message
443:40 - so adding the
443:42 - HTML and CSS files now I have to provide
443:46 - this message within quotations so you
443:48 - can see here get commit if I have if I
443:50 - need to zoom in a little bit likely this
443:52 - is fine get commit minus M and then I
443:55 - provide a message and the message is
443:57 - within code so now I'm creating I'm
443:59 - recording a new version of my code by
444:02 - creating a commit and I'm giving it the
444:05 - message adding HTML and CSS files and I
444:07 - press enter okay and now it says that
444:10 - okay now it has actually inserted four
444:12 - files into my repository so now you can
444:15 - see that now we have the create mode uh
444:18 - now we have created a file called Sr c
444:20 - banner.jpg Index Styles and team.jpg
444:23 - where are these files created they were
444:24 - already present on our codespace well
444:26 - they have been now created and saved
444:28 - within our repository formally saved
444:31 - okay and now if I reset once again and I
444:34 - say git log now git log is used to view
444:38 - a history of all the commits and now you
444:41 - can see that there are two commits or
444:44 - two times that I've recorded a version a
444:46 - commit is simply a version of the code
444:48 - so there was this initial Comm that was
444:50 - done at such and such time by such and
444:51 - such author the initial commit was done
444:55 - and then I have done a second commit and
444:57 - in the second comment I have added this
444:59 - HTML and CSS files so that is also
445:02 - something you can see okay you can in
445:04 - fact do get log minus minus stat and
445:08 - that is going to tell you what is the
445:09 - change in each comit so here you can see
445:12 - that in the initial commit we added a GE
445:14 - ignore license and readme.md file so I'm
445:17 - just using the arrow key to go up and
445:18 - down and in the new commit adding the
445:20 - HTML and CSS files I have SRC Banner
445:24 - index Styles and these are the number of
445:26 - lines in each of these okay now often
445:29 - when you run some git commands you will
445:31 - have to do this scrolling using your
445:33 - cursor up and down cursor so here's a
445:35 - quick trick to exit this just type Q to
445:38 - exit this okay anytime you're stuck in
445:41 - some git command output just press q and
445:43 - you should be able to
445:45 - exit all right so let me reset that
445:48 - again and let us check G
445:51 - status so now it says we are okay we are
445:55 - on the branch Main and there is nothing
445:58 - to commit our working tree is clean
446:00 - which means we have no untracked files
446:02 - we have no tracked files with with
446:03 - changes to be committed so that's fine
446:06 - so we have taken our working directory
446:07 - changes we have first staged them and
446:10 - then after staging we have committed
446:12 - these
446:13 - files let's see if these have shown up
446:15 - on GitHub
446:16 - yet no these do not seem to have shown
446:19 - up on on GitHub yet we still have a g
446:21 - ignore we still have a license and a
446:22 - readme.md so once again coming back to
446:25 - this what we are doing here is so far
446:27 - we're still just recording new versions
446:29 - of our code on this code space machine
446:32 - we need to push these changes back to
446:35 - GitHub that is where the git push
446:38 - command comes into picture and you can
446:39 - see here there is actually a hint here
446:41 - saying that your branch so our main
446:43 - branch the main branch on our code space
446:46 - is one commit ahead of origin main
446:50 - origin typically refers to the remote
446:52 - server the whatever repository remote
446:55 - server from where you've actually pulled
446:57 - this code so we are ahead of our origin
446:59 - or we are ahead of the remote server by
447:01 - one commit so we need to push our
447:03 - commits so here's how we push it let me
447:06 - reset that again let's just type git
447:09 - push and then we provide origin so we
447:12 - want to push to origin which is sort of
447:14 - the remote server and we want to push
447:16 - the main branch so get push origin Main
447:19 - and I press enter and now you can see
447:22 - that we are packaging up all of these
447:25 - new com new changes that have been
447:26 - recorded in the new commit and we are
447:29 - pushing this to the Cloud Server okay so
447:33 - now what happens is we have made some
447:35 - commits here we've pushed them back to
447:36 - GitHub and now the next time we run a c
447:40 - Cod space or somebody else runs a Cod
447:42 - space on the same repository a
447:44 - collaborator maybe they are going to
447:46 - pull the latest changes all right so
447:49 - that is how you actually push your
447:51 - changes back to GitHub so once again I
447:53 - reload the page and now you can see now
447:55 - finally we have this SRC folder over
447:57 - here and in this SRC folder we have this
448:00 - index.html file so that's great that's
448:03 - exactly what we expect and we have the
448:05 - styles. CSS file and so on okay so that
448:10 - is one way in which you push your
448:13 - changes back to
448:15 - GitHub sorry about that so that is one
448:19 - way in which you push your changes back
448:20 - to GitHub so just to recap you open up
448:23 - the inbuilt command line terminal using
448:25 - the browser based vs code window then
448:27 - you review the changes that you've made
448:29 - using git status and git diff commands
448:32 - I'll talk about git diff in a second
448:34 - then you can stage the changes that you
448:36 - have made by typing git ad a specific
448:38 - file name or you can just type git add
448:40 - Dot and that is going to add all the
448:42 - files that have been modified or added
448:44 - then you can commit your changes the the
448:47 - changes that you staged by typing get
448:49 - commit minus M followed by a commit
448:51 - message inside quotations commit
448:53 - messages are very important because they
448:54 - give you a short description of the
448:56 - change you're making and finally you can
448:58 - verify that the change was made using
448:59 - git log and you can push your changes to
449:02 - GitHub by simply typing git push origin
449:04 - main or in the case of the main branch
449:06 - you can just type get push so this is
449:09 - typically the workflow you have you add
449:11 - some files you commit them and then you
449:13 - push them and if there are new changes
449:15 - that are made on GitHub you pull them
449:17 - back onto your computer okay so if I run
449:20 - git pull origin Master for example you
449:23 - will see that or sorry git pull origin
449:26 - main so if I run git pull origin main
449:30 - for example you will see that I'm
449:33 - already all up to date now what is
449:35 - origin origin simply refers to that
449:37 - remote server from where you have pulled
449:39 - the repository originally so it is the
449:42 - origin of your code it is the original
449:44 - place from where you've pulled your code
449:46 - okay and again this is a where G gets
449:48 - confusing of origin remote this and that
449:51 - but um that's what origin
449:53 - means okay now one other thing I want to
449:55 - tell you is let's say we make a change
449:58 - here so we say about instead of about
450:00 - Jovian let me change this back to
450:01 - welcome to
450:04 - Jovian so the live server should also
450:06 - reload to show Welcome to Jovian and now
450:08 - just to quickly recap the flow I can
450:11 - check G status and you can see here that
450:14 - now we have modified the for now we have
450:16 - modified the file SRC index.html okay
450:20 - now it is telling me that something has
450:21 - been modified now whenever a file is
450:24 - modified you can actually see what
450:26 - changes have been made by typing G div
450:28 - when you type G div GitHub is going to
450:30 - show you in red it is going to show you
450:32 - which files have been removed which
450:34 - lines have been removed and in green it
450:36 - is show going to show you which lines
450:37 - have been added and everything else in
450:39 - black is simply the U code around that
450:42 - line so it is telling us that in
450:44 - index.html we have removed one line and
450:46 - we have added one line okay and that is
450:49 - how GitHub tracks or git tracks changes
450:51 - it tracks deletions from a file and it
450:54 - tracks additions from a file okay and
450:57 - once again we can now do get add dot we
450:59 - can then commit we can then push but
451:01 - there's another way to do it directly
451:03 - within vs code so you can click on this
451:06 - third button here called Source control
451:09 - in the sidebar and what this tells you
451:11 - is this shows you under this changes
451:14 - section it shows you all the untracked
451:17 - or modified files so it seems like there
451:19 - is this index.html file that seems to
451:22 - have been modified and there's also this
451:24 - settings. Json file well maybe I don't
451:26 - need this file so I'll just delete this
451:28 - file for now let me just come back here
451:31 - and let me just delete this entire
451:33 - folder maybe it got added somehow I
451:36 - don't need it right now but anyway
451:38 - coming back here so now I have this
451:41 - index.html file and in this index to
451:44 - HTML file if I click on it from
451:47 - the git sidebar I will be able to see
451:50 - the changes that have been made so you
451:52 - can see that in
451:53 - index.html it is showing me a comparison
451:56 - between the original version which
451:58 - contains about Jovian to the new version
452:01 - which contains welcome to Jovian so we
452:02 - have removed about and we have added the
452:04 - welcome to or you could also think of it
452:07 - as we've removed this entire line and
452:08 - added this entire line okay if we made
452:11 - some more changes for example in
452:14 - index.html let's say let's also remove
452:17 - let's also add the word most highly
452:20 - reputed and let us come back here and
452:23 - let us check you can now see that apart
452:25 - from this one change we also have the
452:27 - second change over here so you don't
452:29 - actually need to run the git div command
452:31 - you can simply come in into the into the
452:34 - git sidebar and you can check the
452:35 - changes let's maybe go back and also
452:37 - make a change into styles. CSS let me
452:40 - change the body font color instead of
452:44 - 444 let me change it to
452:47 - 444 a slight change
452:49 - and once again I can go here
452:52 - into the G git sidebar and I can see
452:55 - that there is a change made in styles.
452:57 - CSS and there is a change made in
453:00 - index.html now I can go ahead and Stage
453:03 - these changes one by one so I can review
453:04 - the changes in each of the files by
453:06 - looking at the diff or the differences
453:09 - and then I can stage these I can click
453:10 - plus here and I can click plus here so
453:13 - remember the flow we first have to add
453:15 - the files to Stage them so I can click
453:18 - plus and Styles has been staged or I can
453:21 - unstage it like that but let me just
453:23 - stage this and let me stage this or I
453:25 - can also stage them both together by
453:27 - using this single plus button now you
453:30 - can see that we have a couple of stage
453:31 - changes and no other changes no unstaged
453:34 - changes so internally vs code is simply
453:37 - running these git commands for us so
453:39 - that we don't have to run them but you
453:41 - should be still familiar with Git
453:42 - commands in case you don't have the
453:43 - sidebar or you're able you're not using
453:45 - vs code okay so now that the changes are
453:48 - stayed we can type a message here so
453:50 - let's say
453:52 - updated index and
453:56 - styles and now we can click commit okay
453:59 - now the changes have been committed so
454:01 - we've added the files and now we've
454:03 - committed the files but now we still
454:06 - have to send these back to GitHub so now
454:08 - we can click sync changes and now it
454:10 - says this will pull and push commits
454:13 - from into origin Main and I'm just going
454:15 - to say okay and now my changes are going
454:17 - to be sent up completely okay so that is
454:22 - the other way to send updates to GitHub
454:25 - make some changes come here then stage
454:27 - those changes and then commit those
454:29 - changes with a message and finally press
454:31 - the sync button and that is going to
454:32 - push the changes up to GitHub all right
454:36 - so two ways to do it I generally prefer
454:39 - doing it from the terminal just so that
454:41 - I can keep getting some practice so I
454:43 - prefer doing it from here from the
454:45 - terminal but feel free to use the user
454:47 - interface as well both are equally good
454:50 - enough both do exactly the same thing
454:52 - okay so as an exercise I encourage you
454:55 - to look up the documentation or look up
454:57 - some tutorials to understand these git
454:59 - commands git status which tells you what
455:02 - untracked files you have or what are the
455:04 - files with some changes git diff which
455:07 - shows you what are the exact changes in
455:09 - each of the files git ad which can be
455:11 - used to Stage your files so go on go
455:14 - from the working directory to the
455:16 - staging area and you can add individual
455:18 - files or you can add all files or you
455:19 - can add a folder at once then git commit
455:22 - which is used to actually record a new
455:24 - version then git log which is to see the
455:27 - history of comits that you have and
455:28 - finally get push to push these changes
455:31 - to the remote server or origin server
455:34 - and you also have get pull in which
455:36 - which is used to pull the changes from
455:38 - the origin server in case somebody else
455:39 - has pushed some new changes okay now all
455:42 - of these commands also support some
455:44 - options so you can check out some what
455:46 - their options online and you can also
455:47 - use GI help but the thing with G is you
455:50 - have to practice you have to try these
455:52 - out a few times you have to get stuck a
455:53 - few times and only then you start to
455:55 - feel comfortable but we've already
455:57 - covered six G terms and there are a lot
455:58 - more that are going to come but at this
456:01 - point I want to switch gear and talk a
456:04 - little bit about Cloud deployment so now
456:07 - we have our Jovian career site live you
456:10 - can see here that we can see um we can
456:13 - see it's history that three commits have
456:14 - been made so far on GitHub we can see
456:17 - that there's an SRC folder and that was
456:19 - recently updated with the index and
456:21 - styles that we committed directly from
456:22 - vs code and there are some other files
456:25 - from the initial commit how do we take
456:27 - this and how do we easily deploy it to
456:29 - the cloud we're going to do that using
456:31 - this platform called worel verel is a
456:34 - cloud platform that makes it really easy
456:35 - to deploy websites and applications and
456:37 - it offers a seamless integration with
456:39 - GitHub and other Version Control Systems
456:42 - allowing developers to deploy their
456:43 - projects almost seem almost instantly
456:46 - without any additional coding or any
456:49 - additional work so here is what we are
456:51 - going to do we are going to sign up on
456:53 - wor.com so let me just sign up in case
456:55 - you're not signed up already you'll need
456:57 - to sign up I am already signed up and
456:59 - signed in so I'm good to go then uh you
457:02 - will be taken to the verel dashboard as
457:05 - soon as you sign up let me zoom in here
457:08 - and you can add a new project so I'm
457:09 - going to select new project and when I
457:12 - select new project it is going to ask me
457:15 - access for my
457:17 - GitHub repositories so once one when
457:22 - you're signing up try to sign up with
457:23 - GitHub so that you can give permission
457:25 - to sign up using GitHub directly but
457:27 - second when you actually try to create a
457:29 - project versal is going to need access
457:31 - to your GitHub repository so that it can
457:33 - it can pull out the code and it can then
457:37 - deploy them to the cloud not just public
457:39 - repositories but also private
457:40 - repositories so you can either give
457:41 - access to all repositories or you can
457:44 - give access only to select repositories
457:45 - and you can select which repositories
457:47 - you want to give access to in my case
457:49 - I'm going to give access to all
457:50 - repositories and it is going to have
457:52 - access to read and write because it is
457:54 - also going to write some things into
457:56 - your pull request which we'll talk about
457:58 - later but in general yeah you need to
458:00 - give versel full access to your code so
458:02 - that it can pick it up even private code
458:04 - and deploy to the
458:06 - cloud okay now let's click install so
458:10 - that is going to install the worel
458:12 - GitHub application essentially and now
458:14 - at this point you will see this new
458:16 - project box and in this new project box
458:19 - you can select which GitHub account to
458:21 - use in case you've connected multiple
458:22 - GitHub accounts and from that GitHub
458:25 - account you can select which site you
458:26 - want to actually deploy so I am so my
458:31 - repository is called Jovian career site
458:33 - live so I'm just going to click import
458:36 - Jovian career site live and now I have
458:38 - to configure the project because versel
458:40 - has configurations for all kinds of
458:43 - various different projects so you can
458:45 - see here that it has a bunch of
458:48 - different um pre-configured Frameworks
458:51 - and first you can set a project name I'm
458:53 - just going to keep the project name on
458:54 - worell the same as the project name on
458:57 - GitHub no change here so join career
458:59 - site live the framework preset I'm going
459:02 - to select other because I'm not actually
459:03 - using a framework I'm just using simple
459:05 - HTML and CSS
459:07 - files then I need to select the root
459:09 - directory which needs to be deployed so
459:12 - remember we created this SRC directory
459:14 - we don't want to deploy our GE ignore
459:16 - file and license and readme.md that's
459:18 - not something we want want to put on the
459:19 - website itself that's something that we
459:21 - want to just put on GitHub um so let's
459:24 - select the SRC folder or the SRC
459:26 - directory as a root directory so I'm
459:28 - going to click edit here and I'm going
459:30 - to just select the SRC directory as the
459:33 - root directory and click continue so we
459:35 - are telling verel that we have a simple
459:37 - website no framework and we are simply
459:40 - going to pick the code from the SRC
459:43 - directory and just directly deploy it to
459:45 - the cloud and there are other settings
459:47 - which we don't need right now so I'm
459:49 - just going to click
459:50 - deploy now as soon as we click deploy
459:52 - versel has pulled out all the code from
459:54 - our GitHub repository it has set up a
459:57 - machine on the cloud conceptually
459:59 - speaking and it has deployed the code
460:03 - and you can see here that this is what
460:04 - the deployed site looks like okay you
460:07 - can actually click continue to dashboard
460:09 - and here you can see that we have a
460:12 - preview of what the deployed site looks
460:13 - like and we also have links to a couple
460:15 - of deployments so by default your
460:19 - project name doval doapp is the location
460:23 - of the deployed website and let me just
460:25 - zoom in
460:26 - here so you can see now we have deployed
460:29 - our website so now we are developing on
460:31 - GitHub codes spaces and we are pushing
460:33 - our changes back to GitHub and then we
460:36 - are we have connected our GitHub
460:39 - repository to verel and verel is picking
460:42 - up the GitHub repository the main branch
460:45 - and it is deploying it automatically
460:49 - right you can see here that it is
460:50 - deployed
460:51 - automatically so that is how easy it is
460:54 - to deploy and the next thing you can do
460:57 - is anytime you make a change let me come
460:59 - back here in index.html and let me just
461:01 - change this to about
461:04 - chovan and I'm just going to make a
461:06 - quick commit here so I'm going to Stage
461:09 - the change I am going to
461:12 - commit and sometimes when I uh when I
461:15 - try to commit without a message It'll
461:17 - ask me to put in a commit message
461:18 - so let me just say change to about
461:22 - Jovian and let me close that so now it
461:25 - is committed now I'm going to push again
461:27 - and okay let's push it now the changes
461:30 - are going to get
461:33 - pushed now the changes are pushed here
461:36 - to Jovian career site life you can see
461:38 - that we just changed to avoid Jovian and
461:40 - once you push what happens is you can
461:44 - see that a new deployment is going to be
461:46 - made by versal automatically
461:50 - so you can actually see a history of
461:51 - deployments you can see just 3 seconds
461:53 - ago a new deployment was made and this
461:56 - new deployment was made on the commit
461:58 - change to about about Jovan so on verel
462:02 - welcome to Jan changes to about J so
462:04 - anytime you make any changes to your
462:06 - GitHub repository and push the main
462:08 - branch or you make changes on code
462:11 - spaces push the main branch to GitHub
462:14 - versal automatically picks up the new
462:15 - change from the main branch and
462:17 - automatically redeploys it isn't that
462:19 - nice that all you have to do is just go
462:21 - on coding here and keep checking your
462:22 - live preview whenever you're ready you
462:24 - can just go in and you can just add all
462:27 - your changes commit them and push them
462:29 - and once they are pushed versel will
462:31 - pick them up and deploy them and that is
462:33 - a deployment workflow that you are going
462:35 - to work with more or less right so you
462:38 - go to wor.com sign up for an account
462:40 - once you sign up you create a new
462:42 - project and you choose the repository
462:44 - that you want to deploy it supports
462:45 - GitHub gitlab and bit bucket and you you
462:48 - will have to connect and give access to
462:49 - verel then you choose the project root
462:51 - folder in this case it is the SRC folder
462:53 - and then you click deploy and then it
462:55 - creates a deployment so it builds your
462:57 - project deploys to the cloud and
462:59 - whenever you push new changes to your
463:01 - repository especially the main branch
463:03 - versal will automatically build and
463:04 - deploy your project so that creates a
463:06 - very nice
463:07 - workflow now one of the goals in the
463:10 - problem statement was to add some meta
463:12 - tags and improve the previews of this
463:17 - web page so now we have this Jovian
463:19 - careers site live dovala but one thing
463:21 - you'll see here is if I zoom in a little
463:25 - bit here you you see you see it says my
463:27 - first web page at the top here and it
463:29 - also doesn't have a icon so it'll be
463:31 - nice to maybe get a jovian icon in here
463:33 - as well another thing that you can check
463:36 - is if you try to share this on LinkedIn
463:38 - or Twitter or
463:39 - elsewhere it's not going to show a nice
463:42 - preview okay normally when normally we
463:44 - expect to see a nice preview of our
463:48 - yeah normally we expect to see a nice
463:50 - preview of any website that we share on
463:52 - the internet so but that is not showing
463:54 - up so normally what happens is when when
463:56 - a website is found by Google or when a
463:59 - website is shared on let's say LinkedIn
464:02 - or Twitter or
464:04 - Facebook they automatically pick up this
464:06 - preview image there's something that can
464:08 - be configured and they automatically
464:10 - pick up maybe a title and a description
464:12 - all of this so where does this come from
464:15 - well all of this is done using some
464:17 - special tags special HTML tags called
464:19 - meta tags HTML metatags provide
464:21 - information about a web page to search
464:23 - engines and browsers and they are placed
464:25 - in the head section of a HTML document
464:28 - and they're not displayed on the page
464:30 - itself so you can actually use a
464:33 - platform like hea.com you have these
464:36 - tools like hea.com to actually check
464:38 - what the preview for a particular web
464:41 - page is going to look like so let's say
464:43 - if I just copy this my first web page
464:46 - link and put it
464:48 - here and I check what the preview is
464:51 - going to look like so you can see here
464:53 - that there is no preview image and the
464:55 - title of the web page is simply my first
464:57 - web page which is not very informative
464:59 - and there is no description as well so
465:00 - there's no description there is no image
465:02 - none of that on the other hand most
465:05 - modern websites so let's say www.
465:09 - jan.com if you share this link with
465:12 - somebody on social platforms or maybe
465:13 - just check on hea.com you'll see this
465:16 - preview image build a successful career
465:18 - in TG this is not there anywhere on the
465:20 - actual page but this is just for the
465:21 - purpose of preview and you will see that
465:23 - it has a nice title and it has a nice
465:25 - description as well um so all of that is
465:28 - something that is going to show up
465:29 - automatically so all of this is achieved
465:31 - using meta tags so there are several
465:34 - types of metatags each with its own
465:36 - purpose so here are some of the more
465:38 - common metatags that will be used in
465:40 - most web pages there's something called
465:42 - a meta car set this is used to inform
465:45 - the browser what is the character set
465:47 - there are several character sets there's
465:49 - something called asy something called
465:50 - UTF Etc what is the character encoding
465:53 - that this page is using so this is often
465:55 - something that is set to
465:57 - utf8 then there is something called the
465:59 - viewport meta tag this is used to inform
466:01 - the browser how to scale up or down how
466:04 - to zoom in on or out the website on a
466:07 - mobile screen again there is a standard
466:09 - value that is preferred for more modern
466:11 - websites then there is this meta name
466:13 - description and this description is
466:16 - actually picked up by
466:19 - platforms when you share this link when
466:21 - you share the website as a link so the
466:22 - description is not actually shown on the
466:24 - page but it is just picked up as a
466:25 - preview by Google and whenever you share
466:27 - the platform elsewhere you can also set
466:30 - a meta author not particularly useful
466:33 - these days and you can also set meta
466:35 - keywords and meta robots uh meta robots
466:38 - provide some instructions whether search
466:40 - engin should Index this page or not and
466:42 - meta keywords is used to specify some
466:44 - keywords that are that were used in the
466:47 - past for
466:49 - search engine indexing but are not now
466:51 - very less important okay there are also
466:55 - platform specific meta tags so you can
466:57 - take your url your website URL and make
467:00 - it show a different way on Facebook and
467:02 - a different way on uh Twitter for
467:04 - example so there is this property called
467:07 - OG title so this is the title that is
467:09 - going to be picked up by Facebook
467:10 - LinkedIn and several other sites OG
467:13 - stands for open graph and there is this
467:15 - property called OG description which is
467:18 - uh picked up for description on Facebook
467:21 - you can also specify this image using OG
467:23 - image this is the image that shows up
467:26 - here and finally you can specify similar
467:29 - title description and a card setting for
467:32 - Twitter as well okay so those are all
467:36 - the meta tags that you can have on your
467:40 - we website on your web page and apart
467:43 - from this you can also have a title meta
467:45 - tag and a Fab icon link tag
467:48 - so the title this title is not a metatag
467:51 - exactly it is simply used to set the
467:53 - title of the page so this is also
467:55 - important because this is what shows up
467:57 - on the browser Tab and you have a link I
468:01 - a link tag which contains something uh a
468:04 - link to an image called a fave icon and
468:07 - that image is the image that shows up
468:09 - over here so right now you're just
468:11 - seeing a small web image here but
468:13 - instead let's say here you have the
468:14 - GitHub logo and elsewhere you'll see the
468:17 - the Jovian logo on Jovian let's say I
468:20 - open www. jan.com you see the Jovian
468:23 - logo so putting a logo here in the
468:25 - browser tab is done using the fave
468:28 - icon okay so what we'll do is we'll go
468:31 - ahead and add a bunch of these metat
468:33 - tags to our web page so we can take all
468:35 - of these meta tags we have caret utf8
468:38 - name viewport description keywords
468:40 - author robots Etc and we are going to
468:43 - add them all to our project and
468:47 - specifically a couple of images also
468:49 - need to be added see we have this one
468:51 - meta tag called OG image and that we
468:54 - going to set as Jovian met. PNG and the
468:57 - file Jovan meta PNG is here so you can
469:00 - download it in case you want to add
469:04 - it yeah this is the this is the image
469:06 - that we're going to use as Jovan met.
469:08 - PNG so I can just save this image to my
469:10 - desktop and then upload it to Cod
469:12 - spaces and we also have a
469:15 - meta image for our fa icon so this is
469:19 - the fave icon that we going to use this
469:21 - is the icon that is going to show up on
469:22 - the browser over here okay so again
469:25 - these are not things that you learn in a
469:27 - introductory HTML course but to build
469:29 - good practical modern websites you need
469:32 - to have good metatags otherwise your
469:34 - websites are just going to look random
469:35 - on the browser or when people share them
469:38 - okay there's more information you can
469:40 - learn about metatags here but uh these
469:42 - are the tags that we're going to add
469:44 - into our web page all right well so now
469:49 - we want to add meta tags so we basically
469:51 - want to add all this code into the head
469:53 - tag of our index. HTML file and we know
469:55 - how to do this we just copy the code put
469:57 - it into index.html then stage the
470:01 - index.html file then commit it then push
470:03 - it but uh before we do that we're going
470:06 - to take this opportunity to maybe also
470:08 - learn the GitHub collaboration workflow
470:11 - because what is going to happen in the
470:12 - real world is that you you're not going
470:14 - to directly make changes to the main
470:16 - branch as you can imagine let's say
470:19 - Jovian the website is running and before
470:22 - we actually make push any new changes we
470:24 - may want to get them reviewed we may
470:26 - also have a situation where multiple
470:29 - people are working on multiple changes
470:31 - and if they're all cons constantly
470:32 - pushing to the main branch then they may
470:34 - all be just overwriting each other's
470:37 - code so that is why GitHub has this
470:39 - collaboration workflow powered by
470:41 - branches so what you do is you have your
470:44 - main branch or your master Branch from
470:46 - your master Branch you create create a
470:47 - feature branch and we'll talk about
470:49 - branches in just a second and then in
470:52 - that feature Branch you add a bunch of
470:54 - commits so one by one you keep adding
470:55 - comments into your feature Branch then
470:58 - what you do is
471:00 - you create a pull request so you using
471:04 - all the changes that you have put into
471:06 - your branch so far you create a pull
471:07 - request on GitHub and in the pull
471:10 - request you can basically list out the
471:12 - changes you've made the poll request
471:14 - will also have all the code changes
471:15 - between your branch and the main branch
471:17 - and and the team can then review your
471:19 - PLL request so somebody from the team
471:21 - can look at the changes you have made
471:23 - and they can make comments on your poll
471:25 - request so they may make some comments
471:27 - and then you can then make more changes
471:29 - make new comments based on those
471:31 - comments you can fix the things that are
471:32 - not working as
471:34 - expected and once all the comments are
471:36 - resolved somebody from your team can
471:38 - possibly approve
471:40 - your approve your changes and once your
471:43 - changes are approved you can then merge
471:45 - those changes into the main branch
471:48 - okay so you can take the new changes and
471:49 - you can merge them into the main branch
471:51 - and then of course we have versal set up
471:54 - already so as soon as the main branch
471:56 - gets changed after all this discussion
471:58 - and review then it is going to get
472:00 - deployed automatically so this is how we
472:03 - safely develop software we take out a
472:05 - branch which is basically we extract out
472:07 - a copy conceptually speaking we make
472:09 - changes to that copy we keep adding
472:11 - commits we then set up a pull request
472:14 - people comment on it we make changes to
472:16 - it we do whatever testing we need need
472:18 - we'll also see how to generate a copied
472:20 - version of our site which is which can
472:22 - be used for testing and then once we are
472:25 - ready we approve the pull request merge
472:26 - it back to master and that is going to
472:28 - trigger a deployment so that is how the
472:31 - GitHub collaboration workflow works and
472:33 - it's not just uh that you will be using
472:36 - a single Branch at a time but here's
472:38 - what might happen that you may have your
472:40 - main branch somewhere and then somebody
472:42 - you may start a new Branch you may start
472:43 - making some changes and then some
472:45 - changes may get added to the main Branch
472:47 - from other people and then somebody else
472:50 - may start another branch and then your
472:51 - branch may get merged and then their
472:53 - Branch may have to get merged so this is
472:55 - how the GitHub development workflow
472:57 - works you anytime you want to build a
472:59 - new feature you create a new branch make
473:01 - changes on the branch get that reviewed
473:03 - get that get that approved merge it back
473:05 - into the main branch and the main branch
473:07 - is the source of Truth for what is going
473:09 - to go live on verel or whichever
473:11 - deployment platform you're using okay so
473:14 - this is the this is the workflow that
473:16 - we're going to follow and the first step
473:18 - in this workflow is to create a branch
473:21 - so what is a branch well a branch
473:23 - branching is a very fundamental feature
473:24 - of git and GitHub that allows developers
473:27 - to work on multiple versions of the same
473:29 - codebase simultaneously so you can use
473:31 - it to work on five tasks at a time or
473:33 - five features at a time or five
473:35 - different people can use it to work on
473:36 - different features without disturbing
473:39 - each other's code okay and a branch is
473:42 - essentially a separate copy of the code
473:44 - base conceptually speaking that you can
473:46 - make Chang just to without affecting the
473:48 - main branch which is usually called main
473:50 - or master so here is how you create
473:52 - branches within git or using git or
473:55 - within GitHub code spaces first we open
473:57 - the terminal so once again I go in here
473:59 - I say view
474:01 - terminal now I have the terminal open
474:03 - here and let me close the sidebar so the
474:07 - first thing you do is you type git
474:10 - branch and then you type type the name
474:12 - of a branch okay so you say git branch
474:16 - and I just want to add my meta tags here
474:17 - so I'm just going to call this Branch
474:19 - add hyphen meta hyen tags so you always
474:22 - use lowercase letters like add hyphen
474:24 - meta hyen tags all lower case and you
474:26 - always generally separate by hyphens you
474:28 - can also separate by underscores if you
474:30 - want one other convention is to also
474:32 - maybe put your username before the
474:34 - branch so you could I could also create
474:36 - the branch as such Akash in is/ add meta
474:39 - tags but this is a good convention so
474:41 - that multiple people don't end up
474:43 - creating branches with the same name
474:45 - accidentally uh in my case I'm just I'm
474:47 - going to just use the shorthand AA for
474:50 - myself so aa/ add metatags that's what I
474:53 - use at Jovian okay so we creating a
474:55 - branch called aa/ add metatags okay the
474:58 - slash does not have any special meaning
475:01 - it is simply a separator that I'm using
475:03 - I could also have said AA hyphen ad meta
475:05 - tags and it would be the same thing but
475:07 - it's just a little nicer to look at okay
475:10 - AA hyphen ad metat tag so now I'm
475:11 - creating a branch so a branch has been
475:14 - created but we are still on the main
475:16 - branch here you can see here here I'm
475:17 - still on the main branch so now we need
475:19 - to switch to this new branch that has
475:21 - been created now the way to switch to a
475:24 - new branch is using the git checkout so
475:27 - you say git checkout and then you type
475:29 - the branch name so aa/ add meta
475:33 - tags now we have switched to the branch
475:36 - AA hyphen add aa/ add meta tags great
475:39 - and that is something that is displayed
475:41 - here as well now that we have switched
475:43 - to the branch we can now start making
475:45 - commits into this Branch so here is how
475:47 - I might go about making some comment so
475:49 - I might first let's see here I might
475:52 - first maybe just replace
475:54 - the title and the fave icon so let me
475:57 - just grab the title and the fave icon
475:59 - here and I'm just going to replace that
476:01 - over
476:03 - here okay and I will just test that so
476:07 - now when I reload the page you can see
476:10 - that now we have Jovian careers and okay
476:13 - this still doesn't have the fave icon
476:14 - maybe the fave icon will come in when we
476:16 - actually deploy but looks like at least
476:18 - the title has changed okay so I've made
476:20 - one significant change so I'm just going
476:21 - to Stage this change I'm going to say
476:24 - added title and fave
476:28 - icon and I'm going to
476:30 - commit okay I'm not going to push my
476:32 - Branch yet I want to make a few more
476:33 - comments before I push my Branch okay
476:36 - then maybe I might figure out okay I
476:37 - might talk to the marketing team I want
476:39 - I might want I might figure out what
476:41 - they want as the OG and the Twitter meta
476:43 - properties so I will add those and then
476:46 - I might talk to maybe the engineering
476:48 - team and figure out that okay what are
476:50 - the other meta properties are required
476:52 - let me grab all of the remaining meta
476:53 - tags and let me come in and let me just
476:56 - paste them here okay so I'm just
476:58 - simulating an example where you will be
477:00 - making small changes step by step and
477:02 - making multiple commits so I've gone
477:04 - ahead and made these and of course now
477:07 - for this OG image and for this Twitter
477:09 - image I need to actually upload this
477:10 - image file and I also need to upload
477:13 - this fave icon file okay that's why the
477:14 - fave icon is not showing so I'm going to
477:17 - let me first add the metat tex I'll
477:18 - create another comment where I upload
477:20 - the files so again I can go in here I
477:22 - can say add the changes I can commit so
477:26 - let's say added meta
477:28 - tags I can commit great perfect and now
477:33 - I can go ahead and I can actually upload
477:35 - the files so I can come back here I can
477:37 - say right click upload let me grab
477:41 - Jovian met. PNG Jovan fav icon.png
477:43 - upload them they are added as well
477:47 - and once again I can go in or I can also
477:49 - do this from the command line so I say
477:52 - view terminal and I say
477:56 - reset and let me just do git
477:59 - status okay looks like there are a
478:01 - couple of new files so let me do get add
478:05 - Dot and let me do get commit minus
478:08 - M add fave
478:12 - icon and meta image okay
478:17 - all right so I've not pushed my changes
478:19 - yet so I have a bunch of comments here
478:21 - on this particular Branch if I just
478:23 - check get
478:27 - log or I can actually just if I just
478:29 - want to see the list of changes I can
478:31 - say get log minus- one
478:34 - line okay so I so my Branch AA hyen ad
478:38 - meta tags is at the commit add fav icon
478:40 - and meta image before that I have
478:42 - another comment before that I have
478:43 - another comment so I've made a bunch of
478:45 - comments now
478:47 - once I have made a bunch of
478:52 - commits once I have made a bunch of
478:54 - commits I can then open a pull request
478:57 - so to open a pull request here's what I
478:59 - need to do first I need to push my
479:02 - Branch or my changes to the remote
479:04 - repository and the way I can push them
479:06 - is by saying get push origin followed by
479:10 - Branch name AA hyphen add meta tags okay
479:17 - of course I can also achieve the same
479:18 - thing by just clicking publish Branch
479:20 - here but I'm just going to do it from
479:24 - here and once that is done you can now
479:28 - see that a new Branch will have been
479:30 - pushed to the GitHub repository how do
479:33 - we verify that well if I open the GitHub
479:35 - repository and I just reload the
479:39 - page you can see this there's this
479:41 - message here that this uh tag this had
479:43 - recent pushes of course there's this
479:45 - trigger but you can also see here that
479:47 - we have two branches now so earlier this
479:49 - was just saying one branch so I can
479:51 - actually go and select the other Branch
479:53 - so the commits that I've made together I
479:55 - can package them as a branch and I've
479:57 - pushed it to GitHub and now I have this
480:00 - on the main branch you can see here that
480:01 - SRC
480:03 - index.html doesn't have any of the meta
480:05 - tags my main branch is unaffected but if
480:08 - I change to the branch add meta tags on
480:11 - this Branch you can see that all the
480:13 - tags are present okay so this is how you
480:16 - push branches now what you can do is you
480:18 - can make more commits you can push the
480:19 - branch again so you decide what you want
480:21 - to do typically any small change I make
480:23 - I make a commit and then once I have a
480:25 - bunch of small changes that are
480:26 - significant enough I push the branch
480:29 - okay but coming right back so now we
480:32 - have pushed let me come back to the main
480:33 - branch here now that we have pushed the
480:36 - branch then now that we have pushed the
480:39 - branch the next step is to create a pull
480:42 - request so how do we create a pull
480:44 - request and what are pull requests so
480:46 - pull requ requests are a way to propose
480:48 - changes to the code base and get them
480:51 - reviewed by other developers and then
480:52 - get them merged back into the main
480:54 - branch all right so let's create a pull
480:57 - request so first we are going to come
481:01 - back here we are going to go into the
481:03 - pull requests Tab and into the pull
481:06 - request tab again you can see that there
481:08 - is notification here GitHub tries to be
481:09 - helpful where it tells you that if you
481:11 - recently pushed a branch it'll tell
481:12 - It'll ask you if you want to create a
481:13 - poll request but in case this
481:15 - notification is not showing up you can
481:17 - click new pull
481:19 - request okay and now you can select the
481:22 - base branch which is where you want your
481:24 - changes to eventually go and the branch
481:26 - where you are making your changes which
481:28 - is ADD meta tags okay so now I've
481:31 - selected that these are the two branches
481:33 - and I can actually verify what are the
481:34 - changes so it seems like from the main
481:36 - branch I want to remove this existing
481:38 - title and I want to add a bunch of these
481:40 - meta tags and seems like I also want to
481:43 - add a couple of images files okay so I
481:46 - can review the commits that have been
481:47 - made on this Branch I can review the
481:49 - changes between the main branch and this
481:51 - new branch that I'm I'm proposing and
481:54 - then I can click create pull request and
481:57 - here I can give the pull request a name
481:59 - and typically you want to give this a
482:02 - description of the change so added meta
482:06 - tags
482:08 - title and fave
482:11 - icon and it's Al also a good idea to
482:13 - maybe provide more detailed description
482:15 - of the changes so you can say
482:17 - changes one is added or updated the
482:21 - title
482:25 - tag then you can also mention okay added
482:28 - images for fave icon and meta poster or
482:34 - meta
482:35 - Banner then you can say added meta
482:39 - tags including OG and Twitter
482:44 - tags and finally you can also mention
482:46 - added the fave
482:49 - icon link tag okay now let's say you've
482:52 - tested these changes you might also want
482:54 - to say what you've tested so test cases
482:59 - checked so you can say something like
483:01 - verified the title showing
483:04 - up and maybe you might want to verify
483:07 - later and add later that you have
483:08 - verified the fav icon showing up and you
483:10 - verified the metatag showing up okay and
483:12 - then you click create pull
483:14 - request so that's great now now the pull
483:16 - request is created and now somebody else
483:19 - on your team who is a collaborator on
483:22 - this repository can go ahead and review
483:25 - this PLL request so let me first go
483:27 - ahead and add a collaborator here so I'm
483:29 - going to go into settings I'm going to
483:31 - go into collaborators and I'm going to
483:33 - add a collaborator here let me just add
483:36 - Akash and S and I'm going to invite this
483:40 - collaborator let me go back to the poll
483:45 - request okay so this this pull request
483:49 - now has a description and there is this
483:53 - files changed which contains information
483:55 - about the files that have been changed
483:57 - so people can review that as well it
483:59 - also contains information about the
484:00 - commits that have been made so now let
484:02 - me go in and log in from a different
484:03 - account so I have a different account
484:05 - logged in here and I'm just going to
484:07 - accept the invite
484:10 - first so I've been invited as a
484:12 - collaborator here so I'm going to accept
484:13 - the invite so anytime somebody you
484:15 - invite somebody as a collab cator they
484:16 - get sent an email and they can accept
484:18 - the invite okay now that I've accepted
484:20 - the invite I can go here into the pull
484:23 - requests Tab and I can go check the poll
484:27 - request you can I can see that okay
484:29 - Sydney Jovian has invited me or has
484:31 - created the SP request I can check okay
484:34 - these are the changes that have been
484:35 - made I can maybe go in and then I can go
484:37 - in and maybe leave a comment so let me
484:40 - say for example I don't like this title
484:42 - I want it to be a little longer so I can
484:44 - say make the title longer
484:47 - please
484:49 - maybe at least 24 characters okay and
484:55 - then I can just uh start a review and I
484:57 - can add a bunch of these comments so I
484:59 - can add a comment maybe about the meta
485:01 - tag meta title here as well somewhere
485:04 - let's
485:05 - see this can be improved a
485:10 - bit and so
485:12 - on and once I'm done with reviewing I
485:14 - can just say um I can request some
485:17 - changes or I can approve and I can click
485:19 - submit
485:22 - review and once I've clicked submit
485:25 - review then these changes have been
485:29 - pushed back and now Sydney Jovian can
485:31 - once again go through the changes go
485:33 - through the comments that have made and
485:35 - make those changes okay so so again we
485:38 - are just trying to implement this
485:40 - workflow here where you create a pull
485:44 - request and then somebody posts a a
485:46 - bunch of comments and then you create
485:47 - new comments to fix those comments and
485:50 - you keep repeating this process till
485:51 - they're happy with it okay one other
485:54 - thing I want to show in this process is
485:56 - that if you see there is a versel bot
485:59 - that has added a comment here what worel
486:01 - has done is whenever versel notices a
486:04 - pull request in your GitHub repository
486:06 - it takes the code within that pull
486:08 - request and it automatically creates a
486:10 - preview deployment so I can click this
486:12 - visit preview and I can actually preview
486:14 - the changes okay okay I can see here
486:16 - that now it says Jovian careers instead
486:18 - of my first web page and there seems to
486:20 - be a bunch of uh um this image seems to
486:23 - be showing here as well and there are no
486:25 - changes in the actual page but if I were
486:27 - to maybe take this and maybe go
486:31 - into metat
486:34 - tags.io a platform for checking
486:37 - metatags I can actually check that okay
486:40 - it is showing Jovian careers and it is
486:41 - showing a description here image is not
486:44 - showing up I can investigate why the
486:45 - image is not showing up but it looks
486:47 - like the meta tags are now showing up
486:50 - okay so this is one of the nice things
486:52 - about using verel what it takes it takes
486:55 - your branch your pull request Branch it
486:57 - deploys that and it adds a link to that
487:00 - without disturbing your original page so
487:02 - you can see Jovian career site this is
487:04 - like that Branch preview but your
487:06 - original site which is over here Jovian
487:09 - career
487:12 - site still says my first web page it is
487:15 - not updated so your main branch is safe
487:18 - but for your pull request you have a
487:19 - preview deployment that you can study
487:22 - okay all right so let's go in and fix
487:24 - these quickly so I'm just going to go in
487:26 - and fix these comments so there is a
487:28 - comment here that says make the title
487:30 - longer please maybe at least 24
487:31 - characters so I'm just going to add
487:33 - maybe here build
487:36 - a
487:39 - successful career in Tech and I'm going
487:43 - to add the
487:44 - same title
487:46 - here back in the OG
487:50 - title like that okay I've made I fixed
487:53 - the title learn more about job openings
487:56 - and submit your application now well I
487:58 - don't think I'm going to update that I
488:00 - think I'm happy with the way things are
488:01 - here so I'm just going to click commit
488:05 - and let me see I'm just going to Stage
488:07 - my changes and let me say updated
488:10 - title and I'm going to click commit and
488:12 - I'm going to publish the branch so now
488:14 - once the pull request has been created
488:16 - created anytime you publish the branch
488:18 - again the pull request will
488:19 - automatically be
488:21 - updated okay so let's come back here and
488:26 - let's reload this page and you can see
488:28 - that this new commit has been added and
488:31 - veral is automatically going to take
488:32 - this new commit and it's going to deploy
488:34 - it so it's nice like that so if I go
488:37 - back and check the deployment this time
488:39 - it has not just Jovian careers but it
488:41 - has Jovian careers build a successful
488:42 - career in Tech it has the full thing
488:44 - that I've mentioned now I can go in and
488:46 - I can say Okay resolve this conversation
488:49 - so this is fine and then um here I can
488:52 - say I think this is
488:54 - fine as it
488:57 - is and I can resolve this comment and
489:00 - resolve this conversation as well okay
489:03 - so this is what you want to do you want
489:04 - to resolve all the comments and then uh
489:06 - the reviewer may go back and make some
489:09 - more comments and then you resolve those
489:12 - comments and so on and the reviewer and
489:14 - you both can use the prev deploy
489:15 - employment to test out your changes
489:17 - preview the changes live as well okay
489:20 - now the reviewer can eventually be uh
489:22 - can eventually come back later in the
489:24 - day or maybe the next day and see that
489:26 - okay all their changes have been
489:27 - resolved so then they can go ahead and
489:30 - they can approve the pull request so
489:31 - they can go back into this files tab and
489:34 - they can go in and they they can approve
489:36 - the pull request like
489:38 - that and once the pull request is
489:40 - approved then the changes can be merged
489:43 - back into the main branch Okay so so
489:49 - far yeah so so far we are still at this
489:52 - stage where we have deployed we have
489:53 - done a done a preview deployment and the
489:57 - P request has been approved but to merge
489:59 - it back we can come back into the pull
490:02 - review page the pull request page and at
490:04 - the bottom we can see that once all the
490:06 - approvals have
490:08 - been uh have been received and you can
490:11 - set conditions this at the repository
490:13 - level then you can click merge pull
490:15 - request and you can give it a a commit
490:18 - message and a commit details and then
490:20 - you can click merge and that is going to
490:22 - now merge this to our main branch okay
490:26 - so now this has merged and now if I come
490:28 - back into the code Tab and I see the
490:31 - main branch you can see here now it has
490:33 - this new commit called updated title so
490:37 - this is the work so this is the workflow
490:40 - that we have we created a feature Branch
490:42 - added some commits to it pushed the
490:43 - branch created a pull request then we
490:46 - invited a reviewer to comment the
490:47 - reviewer commented we made the changes
490:49 - we also looked at the preview deployment
490:51 - which verel automatically gave us a very
490:53 - kindly and we made sure that everything
490:55 - was working fine and finally the changes
490:58 - were then merged to the main branch and
491:00 - of course verel picks this up again and
491:02 - does another deployment so now if I go
491:05 - back and just reload the main versel
491:09 - page you can see that now the fav icon
491:12 - is updated the title is here is updated
491:15 - and I can also check so there's a place
491:18 - here that you can check meta tags I
491:20 - believe it's
491:21 - called hea.com yeah so I can also check
491:25 - all the meta tags now on Jan careers
491:27 - website live.
491:29 - w.app so now our careers Jin careers
491:32 - website has this nice title that is
491:34 - going to get picked up by Google
491:37 - Facebook Twitter Etc it has this nice
491:39 - image that will show up as a link
491:41 - preview when you share this link on
491:42 - LinkedIn or elsewhere and it has this
491:44 - nice description over here as well learn
491:46 - about job openings at Jin and sub submit
491:48 - your application now so great so we
491:50 - learned the we learned about metat tags
491:52 - but alongside we also learned about a
491:54 - GitHub collaboration workflow which is
491:55 - Branch full request get it reviewed
491:58 - iterate on it and then merge it once you
492:01 - have received the reviews okay so that's
492:04 - about branching with Git and that is
492:06 - about creating pull
492:08 - requests and I would encourage you to
492:12 - exercise this a little bit so create
492:14 - multiple pull requests with minor
492:16 - changes and then verify that each pull
492:18 - request gets its own preview deployment
492:21 - so if you have five pull requests there
492:22 - are going to be five preview deployments
492:24 - so verel gives you unlimited preview
492:26 - deoy deployments for free and then
492:28 - verify that the main site is not
492:30 - affected till a particular pull request
492:32 - is merged okay also one thing that you
492:34 - can try to do is try to see what happens
492:36 - if you have two pull requests and then
492:38 - you merge one and then you try to merge
492:40 - the next one so these are some exercises
492:42 - for you to try out git is a very applied
492:46 - skill so you have to try out all these
492:47 - things whatever questions you have just
492:49 - try it within 5 to 10 minutes you'll
492:51 - actually have your answer now let us
492:54 - talk about keeping your branch up to
492:55 - date so here is a scenario that might
492:57 - happen we already have two users now we
493:00 - have two collaborators one is Sydney
493:03 - Jovian and the other collaborator
493:09 - is and the other collaborator is Akash
493:14 - Andes so that's why I have these two
493:17 - windows in black and white so here I am
493:21 - signed in as aashis and here I am signed
493:23 - in as Sydney Jovian of course the
493:25 - repository still belongs to Sydney
493:27 - Jovian we are both collaborators on it
493:29 - now let us try to make changes in such a
493:31 - way that two people are working in
493:33 - parallel and once changes get merged
493:36 - into main while the second is still
493:38 - working okay so let's do this let us
493:41 - first go into this code so this is
493:46 - on the user aashan is and I am going to
493:49 - create a code space to start
493:54 - editing and it's going to take a second
493:56 - or two to set up the code space but once
493:58 - it's done I should be able to start
494:00 - editing some things
494:09 - here okay so inside SRC I have
494:13 - index.html and let me just just go in
494:16 - here and let me just change this
494:18 - to let me edit the title again let me
494:21 - change this to welcome to
494:25 - Jovian and let me change something in
494:27 - the description let me remove highly
494:30 - reputed let me just make it most reputed
494:32 - Technical University so I've made a
494:34 - couple of small changes here and let me
494:37 - also remove the word Jovian from the
494:40 - names of the programs let us just call
494:42 - it full stack developer boot camp and
494:43 - data science boot camp and let me just
494:47 - commit it so let me go into Source
494:48 - control let me add the changes and let
494:51 - me say made some changes
494:57 - to
495:00 - index.html and let me commit it and let
495:03 - me sync the changes okay I have synced
495:09 - it it looks like I made those changes on
495:12 - Main right so let me now create some
495:14 - more changes es and let me make those on
495:16 - a branch because normally this is not
495:18 - something we should be doing we should
495:19 - be creating a branch so let me add back
495:22 - let's say let me add back the word
495:24 - Jovian here let me add back the word
495:26 - Jovian here and let me add the word open
495:30 - job opportunities here and this time I'm
495:33 - going to first create a branch so let's
495:36 - see let me create a new
495:39 - Branch let me call this
495:43 - branch open job opportunity
495:48 - ities and now the branch has been
495:50 - created and now I'm on the branch now I
495:53 - can add my changes to the to my branch
495:55 - and let me commit them so added
496:00 - open job
496:05 - opportunities okay and now let me
496:08 - publish the
496:10 - branch so what I've done now is I have
496:13 - made some changes on Main and that will
496:15 - just go out to everyone for sure but
496:17 - then I've also created a branch out of
496:20 - main which I'm going to then create a
496:21 - pull request on so I can then come back
496:24 - here and looks like okay this new branch
496:26 - has been pushed let me click compare and
496:28 - pull request and let me just say added
496:31 - job open job opportunities in
496:34 - index.html and that's the same
496:36 - description for now let me create a pull
496:39 - request and the changes that have
496:41 - happened here are simply well
496:45 - the from the main branch I have simply
496:47 - remove added the word Jovian back and I
496:50 - have added open job opportunities here
496:53 - okay so just to show you what happened
496:57 - what we did
496:59 - was we had the main
497:01 - branch and then from the main branch we
497:04 - made another commit so we made some
497:06 - changes onto the main branch this was
497:08 - done by Akash so this was the main
497:11 - branch then we branched out of the main
497:14 - branch and made one commit and of course
497:16 - we could have made multiple commits on
497:17 - that Branch so this branch is the
497:21 - open job opportunities Branch right and
497:24 - this branch has been made by Akash Andes
497:28 - and we've set up a PLL request for this
497:30 - Branch as well right so let us call this
497:32 - pull request one now we've set up a pull
497:36 - request pull request one called added
497:37 - job opportunities in index. HTML now let
497:41 - us come back to Sydney Jovian
497:46 - okay and let us go back here to the main
497:49 - branch first so there is a selector here
497:50 - that I can use to go to the main branch
497:53 - so let's say here I've just checked out
497:55 - the main branch now the main branch on
497:57 - Sydney Jovan is a little bit behind my
498:01 - Old Branch the branch that has been
498:03 - created by Akash and S so let's say
498:06 - Sydney forgot to pull the latest changes
498:08 - before before working on a new change
498:10 - right let's say Sydney is uh working on
498:13 - some changes about related to to the
498:15 - dates of the front end developer backend
498:17 - developer Etc so what Sydney doeses is
498:20 - creates a new Branch to make his changes
498:23 - so I'm going to
498:24 - say
498:27 - Branch create a new branch and let me
498:30 - just say job date
498:32 - changes and create this Branch so a
498:35 - branch has been created by Sydney for
498:38 - his
498:38 - work and now Sydney is going to make the
498:42 - changes to the jobs let's say this is
498:44 - March instead of March 3rd this is March
498:46 - 13th instead of Fab 1 this is Fab 11
498:48 - instead of December 22nd this is
498:50 - December 20 and here we change
498:54 - the salary to 85,000
498:57 - okay and now let me commit these
499:00 - changes into the branch I have staged
499:03 - them so job changes and commit and let
499:08 - me publish this
499:10 - branch and now let me again come back
499:14 - here and let me create a pull request
499:17 - okay so once again these are job changes
499:20 - so job date
499:24 - changes and this is again something that
499:26 - I would want to
499:29 - merge okay and the only changes here are
499:33 - the changes within the dates so let's
499:36 - once again recap what's happening here
499:39 - so here aashis has first made a change
499:43 - to the main branch itself and pushed it
499:45 - and then created a new branch and
499:47 - created a pull request on top of it then
499:57 - Sydney forgot or did not have a chance
500:00 - to pull the latest changes on Main so
500:02 - Sydney created a few changes from the
500:04 - last version of Main and then made a
500:06 - couple of commits let's say and then set
500:08 - up a pull request let's call it PR2 okay
500:11 - so already things are a little out of
500:13 - hand Sydney is is Sydney's main branch
500:16 - on his own computer is a little bit
500:19 - behind and Akash is main branch is a
500:22 - little bit ahead and of course this is
500:24 - also the main branch on GitHub itself so
500:26 - that's why you have a origin has its own
500:27 - main branch but Sydney has its own main
500:29 - branch which is a little behind and now
500:32 - there is this pull request and now one
500:33 - of these pull requests is going to get
500:35 - merged let us say the pull request
500:37 - number one gets approved so let's say
500:40 - somebody on the team goes ahead reviews
500:43 - the pull requests
500:45 - that are all present so let's say they
500:47 - go into the pull request created by
500:49 - Akash and S and they go ahead and
500:51 - approve the pull
500:53 - request okay so they just approve it and
500:56 - they just merg that pull request so now
500:59 - what has happened is that Akash is
501:00 - changes have gone into master so now we
501:04 - are at the situation where this pull
501:06 - request has been merged back into
501:10 - master and however this pull request is
501:13 - still tracking the old main branch so
501:16 - now what we need to do is we need to
501:19 - update this second pull request to show
501:22 - changes based on the new new main branch
501:25 - okay so here's what we need to
501:30 - do we need to take the changes in the
501:33 - main branch and then incorporate them
501:36 - into the currently open pull request how
501:39 - do we do that well here is a
501:42 - step-by-step
501:43 - process first we check out the main
501:45 - branch then we pull changes from the
501:47 - main branch then we check out the
501:49 - feature branch and then we merge the
501:50 - main branch and then we push the changes
501:52 - okay so we'll do it step by step and it
501:55 - will make more
501:56 - sense okay so now I am here on Sydney's
502:02 - branch and on Sydney's I'm on Sydney's
502:04 - poll request Branch so I'm on the branch
502:06 - which Sydney has created for poll
502:08 - request number two and this is based off
502:11 - of a main branch which itself is very
502:12 - old okay so I'm going to show this on on
502:14 - the terminal but you can you can do the
502:16 - exact same thing from your uh from the
502:20 - user interface as well so first I am
502:25 - going to so I'm currently on the branch
502:28 - job date changes I'm going to switch to
502:31 - the main branch so get checkout
502:34 - main okay by typing get checkout main I
502:38 - have now switched on Sydney's codespace
502:41 - I've switched into the main branch on
502:43 - Sydney's codespace now of course
502:45 - Sydney's Cod space main branch is behind
502:48 - the main branch on the server we already
502:50 - know that because one direct commit was
502:52 - made and then one pull request was
502:53 - merged so I can do um the first thing I
502:57 - can do is I can do get fetch minus-
503:00 - all what that does is that fetches the
503:06 - changes that are there on the remote but
503:07 - it does not apply them yet so it does
503:09 - not pull the changes it simply fetches
503:11 - information about the changes again more
503:13 - terminology I know know but we right now
503:16 - what we know is we we have now fetched
503:18 - information about what are all the
503:19 - branches that are present on the remote
503:21 - server and where are the where are they
503:24 - compared to the branches that are
503:25 - present on This Server okay let me now
503:28 - reset and let me type get status again
503:31 - and now I can see here that your branch
503:34 - is behind origin main by eight commits
503:36 - so looks like I'm fairly behind because
503:38 - a bunch of other pull requests were
503:40 - merged but here's what I can do I can
503:43 - say get
503:45 - full origin main so now what I'm saying
503:50 - is that I have my local main branch
503:52 - which is a little bit behind and then
503:53 - there is this origin main branch which
503:55 - is ahead if I type get full origin main
503:58 - then all my changes are going to get my
504:02 - my main branch is going to get up toate
504:04 - with the origin okay so what has
504:07 - happened now is that Sydney's local copy
504:10 - of the main branch has become up to date
504:13 - by with the main branch on GitHub
504:18 - okay that's fine now let us come back to
504:23 - our job openings Branch so I can just
504:26 - type get Branch to see the names of the
504:29 - different branches that are available
504:30 - and I can switch to the branch so I can
504:32 - say get
504:33 - checkout job date
504:38 - changes okay now I've checked out job
504:40 - date changes the trouble is my local
504:44 - Main is now up to date my local main
504:47 - branch is now up to date with what what
504:49 - is there on GitHub but my job main
504:51 - branch but my jobs feature branch is
504:54 - still pointing to that old main branch
504:56 - or that old main commit okay so what I
504:59 - need to do is I need to pull in these
505:01 - new changes into my job Branch okay so
505:05 - now we
505:07 - do get pull or not pull well actually we
505:11 - need to merge in these new local main
505:13 - branch changes this into the job Branch
505:15 - so we say get
505:17 - merge main so what we
505:21 - telling get now is that I'm on this job
505:24 - date changes Branch take the latest
505:27 - changes from the main branch on my
505:30 - computer which is already tracking the
505:32 - latest changes from on from GitHub and
505:35 - bring all those latest changes back into
505:37 - my feature Branch okay so I type get
505:40 - merge
505:42 - Main and this will ask me to then typee
505:46 - a message so I'm just going to say merge
505:49 - main into job date changes and once you
505:51 - type the message you can just
505:53 - close and now
505:56 - magically what it has done is is it has
505:59 - taken all the changes that have been
506:00 - made in the main branch on GitHub and we
506:03 - first pulled that into the main branch
506:05 - on our computer now all those new
506:06 - changes have been put into
506:08 - our feature branch which is job date
506:11 - changes okay and you can verify that
506:14 - here is how you can verify that you can
506:16 - see that we have Jovian data science
506:17 - boot camp mentioned here so that is
506:20 - there you can see that we
506:22 - have uh most reputed Technical
506:24 - University so all the changes that were
506:26 - made by Akash have now been Incorporated
506:30 - so what we have done essentially is we
506:32 - have taken the changes that have come
506:34 - newly and we have Incorporated them into
506:37 - the second poll request Branch okay one
506:42 - last thing to do here is that these
506:44 - changes are still local on our code
506:46 - space so I need to push these so I need
506:50 - to say get push it to the pull request
506:52 - so get push origin job hyphen date
506:57 - hyphen
506:59 - change changes and this should get
507:03 - pushed okay finally now we can come back
507:07 - here and we can see that job date
507:10 - changes has now been
507:12 - updated job date changes has now been
507:14 - updated with the merged changes into the
507:17 - main branch
507:18 - okay and now it is tracking against the
507:21 - latest main branch that is present and
507:24 - now somebody can come in and somebody
507:26 - can approve it and then this can be
507:28 - merged in now we can go in and now we
507:31 - can merge this change and put that
507:35 - back okay so I know that there was a lot
507:38 - going on there but I'll just first
507:40 - revise this so what we do is whenever
507:43 - new changes have come onto the main
507:44 - branch on GitHub and we want to
507:47 - incorporate them into our feature
507:48 - branches here's what we need to do first
507:51 - within our code space or wherever we are
507:54 - we are doing our development first go to
507:56 - the main branch our local main branch
507:58 - using git checkout main then we get the
508:02 - latest changes from the remote by by
508:05 - running git pull or git pull origin main
508:07 - so that our local main is tracking at
508:09 - the same place where our latest changes
508:12 - are on GitHub then we check out our
508:15 - feature Branch we say get checkout
508:17 - feature Branch name then we merge in the
508:21 - changes from the main branch that we
508:23 - have locally now into our feature
508:26 - branch and finally we push these changes
508:29 - to the remote repository so we take our
508:31 - feature branch and push it to remote so
508:34 - that the pull request gets updated okay
508:37 - so this is the workflow that you will do
508:38 - over and over as a developer you'll
508:40 - check out the main branch get pull check
508:42 - out the feature Branch merge the changes
508:44 - from the main branch and then push your
508:46 - feature Branch back to GitHub and these
508:48 - steps will ensure that your feature
508:50 - branch is updated with the latest
508:52 - changes from the main branch okay so as
508:54 - you have created a feature branch and
508:56 - you made some comits on it and made a
508:57 - pull request if new changes have come on
509:00 - to the main branch you can simply pull
509:01 - those changes in by following this
509:03 - workflow and then you can push your uh
509:06 - main branch back uh push your feature
509:08 - Branch back and your pull request will
509:10 - get updated and then the merging will
509:11 - happen seamlessly okay
509:14 - so that's how mer that's how merging
509:17 - works this is called uh yeah you're
509:20 - basically merging changes from the main
509:21 - branch into the feature branch and git
509:23 - is smart enough that if the changes were
509:26 - made within the same file but to
509:27 - different parts of the same file then
509:31 - things will work out just fine uh git
509:33 - will be able to combine all those
509:35 - changes from multiple users multiple
509:37 - commits together okay and again I
509:40 - encourage you to practice this create a
509:42 - branch make some changes create a pull
509:43 - request create another Branch uh and
509:45 - make some changes create a second pull
509:47 - request now approve approve and merge
509:49 - the first pull request and then update
509:50 - the second pull request to incorporate
509:53 - the new changes from the first pull
509:54 - request and repeat that process a few
509:56 - times using the command line and using
509:58 - vs code's user interface to see if you
510:00 - understand how this whole thing works
510:03 - okay now there are certain cases where
510:06 - two people in two separate PRS have
510:09 - updated this exact same line of code in
510:12 - which case there is going to be
510:13 - something called a merge conflict so let
510:15 - us try and simulate a merge conflict
510:17 - situation now by both users updating
510:21 - just the title of the page okay so let's
510:24 - do this let us first go back here into
510:27 - the code space that
510:29 - is being used by the user Akash NS and
510:34 - let me open up a terminal I'm just going
510:35 - to do everything on the terminal so that
510:36 - things are super clear so we are
510:39 - currently on the branch open job
510:41 - opportunities I'm going to first check
510:43 - out the branch
510:45 - get checkout
510:47 - main okay now I'm on the main branch on
510:50 - my Akash NS Cod space then I'm going to
510:54 - run G pull origin main so that I have
510:56 - the latest
510:57 - changes
510:59 - perfect I am going to get the latest
511:02 - changes on the Sydney account as well
511:04 - shortly but now I'm going to create a
511:08 - new
511:09 - Branch I'm going to create a branch get
511:12 - branch a ayen title change
511:17 - one okay I've created a new Branch title
511:20 - change one I'm going to check out that
511:22 - new Branch get checkout AA title change
511:26 - one so now I've checked out a new Branch
511:29 - so I have the latest Main Branch from
511:31 - the latest main branch I've checked out
511:32 - a new Branch now I'm going to come in
511:34 - here and I'm going to change the title
511:37 - of the page which
511:39 - is I'm just going to change it back to
511:42 - Jovian careers okay so I am changing the
511:46 - title of the page to Jovian careers that
511:48 - is one change I making and I will also
511:51 - change here welcome to Jovian to about
511:54 - Jovian so two changes I'm making I've
511:56 - changed the title to Jovian careers and
512:00 - I have changed well about Jovian to uh
512:03 - welcome to Jovian to about Jovian so
512:05 - those two changes and you can verify
512:07 - these changes by using G diff I can see
512:10 - that those are the only two changes I
512:11 - have
512:12 - made now I'm going to commit these
512:15 - changes so I'm going to say get add dot
512:18 - I'm going to get commit minus
512:20 - M change title and about
512:26 - Jovian okay now I have committed my
512:29 - changes onto my local branch and now I'm
512:32 - going to push my local branch to the to
512:35 - GitHub so I'm going to say git push
512:38 - origin a a hyen title change one so now
512:44 - my
512:44 - branch which is based on the latest Main
512:48 - and has a couple of changes one to the
512:49 - title and one to about Jovian has been
512:52 - pushed and now I can create a pull
512:55 - request using this Branch okay now I can
512:59 - go in here and I can say create a pull
513:00 - request I'm going to just call it change
513:03 - title so I've
513:07 - changed title to Jovian
513:12 - careers and and then
513:14 - change description heading to about Jian
513:19 - okay and I'm going to create a poll
513:22 - request perfect so we understand this
513:24 - flow so far we created a branch we made
513:26 - some changes we committed and we pushed
513:29 - it created a pull request and we can
513:31 - verify that it contains only these two
513:32 - changes it contains a change Jovian
513:35 - careers and it contains a change about
513:37 - Jovian
513:39 - perfect now let's say before this pull
513:42 - request was merged
513:45 - Sydney was also working on some changes
513:47 - where he's going to change the title so
513:50 - I'm going to say
513:52 - file view terminal or sorry view
513:56 - terminal I'm opening up the terminal
513:58 - again let me reset
514:00 - it let me also go back here to the
514:03 - master so let me say get checkout M or
514:05 - let me say get checkout main so now I'm
514:07 - on the main branch back let me also do
514:10 - GP origin
514:11 - main so I have the latest version of the
514:14 - origin main okay so in the latest main
514:19 - our title still has Jovian cers build a
514:22 - successful career in
514:23 - Tech
514:26 - and the title here for the description
514:28 - is still welcome to Jan because the
514:30 - changes were made in a pull request that
514:32 - is not yet merged to main okay so I hope
514:34 - this is clear to you that our main
514:35 - branch is still still has the old title
514:40 - and the old heading okay now I'm going
514:43 - to create a new feature Branch so I'm
514:45 - going to say
514:47 - get
514:49 - Branch Sy or for
514:52 - Sydney title change
514:56 - to okay fine and now I am going
515:01 - to come in here and I'm going to remove
515:04 - this part okay so I'm just going to
515:05 - remove the part build a successful
515:07 - career in Tech I'm going to keep the
515:09 - part build a successful career in Tech
515:11 - so maybe two people got different
515:13 - instructions Akash and has made the
515:14 - change to about Jovian he was asked to
515:17 - shorten the title and Sydney also got
515:19 - the instruction to shorten the title and
515:20 - he changed it to build a successful
515:21 - career in Tech and maybe I also go in
515:24 - here and change something about the job
515:26 - opportunities so I don't don't want it
515:27 - to say open job opportunities I wanted
515:29 - to say job
515:32 - openings okay and I have I will also
515:36 - check out this Branch get checkout sy/
515:39 - tile change to and once I've checked out
515:42 - the branch I'm going to to add the
515:44 - changes so get add dot then I'm going to
515:47 - say get commit minus
515:50 - M change title and job
515:57 - opportunities okay now I've committed
516:00 - now I'm going to push this Branch so I'm
516:02 - going to
516:03 - say get push origin sy/ title
516:10 - change
516:12 - to now my branch has been pushed to the
516:16 - origin which is GitHub now I can come
516:19 - back here and create a pull
516:21 - request and here I'm changing the title
516:24 - so change title and job opportunity so
516:26 - here I'm changing the title
516:30 - to build a successful career in
516:36 - Tech all
516:40 - right yeah so the title is changed to
516:42 - build a successful career in Tech and
516:44 - then the change the job section
516:47 - header to job
516:52 - openings okay let me create a pull
516:55 - request
516:55 - here
516:57 - and let's see now so here now there are
517:02 - two changes on the title and on job
517:05 - openings here also there are two changes
517:08 - on the title but a different change to
517:10 - the title and on the job openings and
517:12 - both changes are made against the the
517:13 - latest version of
517:15 - Master now let us merge one of the pull
517:18 - requests so now let us go in
517:21 - here and let us merge this first pull
517:24 - request so what will happen is that when
517:28 - by merging this pull request which
517:30 - changes the title to Jovian careers in
517:33 - our main branch we are going to get back
517:36 - Jovian careers as the title okay so I'm
517:39 - going to go in here and I'm going to
517:41 - check mer click merge P request confirm
517:46 - merge and the pull request has been
517:48 - merged and I can verify if I go into
517:50 - code and check the main branch and check
517:54 - index.html it is going to have the
517:56 - change title Jovian careers okay
518:01 - so now the first PLL request has been
518:04 - merged the title of the page has changed
518:06 - to Jovian carers and the header of the
518:10 - first section has changed to about
518:12 - Jovian
518:14 - however obviously for Sydney the title
518:18 - of the change title of the page is
518:20 - whatever they have set in their feature
518:23 - branch and the heading of the first
518:27 - section is welcome to Jovian and not
518:28 - about Jovian and of course they've also
518:30 - made an additional change called job
518:32 - openings so now Sydney's feature branch
518:35 - is behind the main branch on GitHub so
518:38 - Sydney needs to update their feature
518:40 - Branch so let's update the feature
518:42 - Branch step byep step so I'm going to
518:44 - open the terminal again I'm going to
518:46 - reset things and remember the
518:49 - step-by-step process for updating the
518:50 - feature Branch first you go to get
518:52 - checkout main first you get to the main
518:55 - branch because our local main branch and
518:57 - code spaces is behind the main branch on
519:01 - Origin then we can check using get fetch
519:04 - minus minus all or just get
519:06 - fetch how far behind we are okay so we
519:09 - can say get status to check that we are
519:13 - behind origin main so we are behind the
519:16 - changes by two
519:18 - commits so let us run
519:21 - get pull origin main so now we are
519:25 - pulling the changes from the origin main
519:27 - branch on GitHub to our Cod space on the
519:31 - Sydney Cod
519:33 - space great so now our main branch is up
519:36 - to date but our feature branch is still
519:38 - tracking the old version of the main
519:40 - branch now we go back to our feature
519:42 - Branch so let's Che check the name of
519:43 - the branch okay the feature branch is Sy
519:46 - title change 2 so get checkout
519:51 - Sy title change
519:55 - to and by the way you can verify here
519:57 - that so far we are on the main branch
519:59 - and on the main branch it says Jovian
520:00 - careers which is the change that had
520:02 - been made by Akash Andes and the title
520:04 - of the first section is about Jovian
520:06 - which is also a change that was made by
520:07 - Akash as soon as we go into the feature
520:11 - Branch now we we have the title that was
520:14 - set
520:16 - by Sydney here and now of course we have
520:20 - welcome to Jovian because this is
520:22 - tracking the old main
520:25 - branch and we have this job openings
520:27 - here okay so now we need to merge in the
520:29 - latest the new main branch that we have
520:31 - just pulled in so we say get
520:33 - merge main let me just reset that and
520:36 - type that again get merge
520:39 - Main and here is what happens okay
520:42 - finally we've done all this setup to get
520:45 - to a point where when I try to update my
520:48 - feature Branch using the new changes
520:50 - that have come into the main branch I
520:52 - run into an issue because both of us are
520:56 - trying to
520:58 - update the same line aashis has updated
521:03 - so there are two things you have a
521:05 - current change which is the change in my
521:06 - feature Branch so in my feature Branch I
521:09 - have updated the title to build a
521:11 - successful career in t
521:14 - however when I try to merge in the main
521:16 - branch the main branch that has come
521:19 - from GitHub the latest main branch
521:21 - because of some other poll request has
521:23 - the title Jovian careers so both the
521:27 - main branch and my feature branch have
521:29 - been independently updated on this one
521:32 - particular line and you can see only
521:33 - this one particular line is an issue
521:35 - this this becomes about Joan as expected
521:38 - no issues here and this becomes job
521:40 - openings as expected no no issues here
521:42 - right so this came in from the main
521:43 - branch no problem no because we didn't
521:46 - change it in the feature Branch this
521:48 - change came in from the feature branch
521:49 - no problem because it was not previously
521:51 - change in the main branch but this
521:54 - change was made in the main branch as
521:55 - well which is called Jovian careers and
521:58 - this change was made uh made in the
522:00 - feature Branch as well which is called
522:02 - build a successful career in Tech so
522:04 - this is what git does it inserts this
522:07 - like random characters here which
522:09 - basically tell you that what do you have
522:10 - on your current branch and what do you
522:12 - have on the main branch and you can
522:13 - either edit it manually you can kind of
522:15 - erase all these characters or you can
522:17 - just use one of these buttons whether
522:19 - you want to accept the incoming change
522:22 - which means the incoming change is what
522:23 - is coming in from the branch you're
522:24 - trying to merge in which is what is
522:26 - coming in from main or you can accept
522:29 - the current change which is what you
522:30 - have in your feature Branch or you can
522:32 - keep both changes so here's what I'm
522:35 - going to do I'm going to click
522:37 - accept current change so I want my
522:40 - feature brand change to override what
522:43 - has come in from the updates in the main
522:45 - branch so I'm going to click accept
522:46 - current
522:48 - change and now in my feature Branch I
522:52 - have overridden I have resolved the
522:54 - merge conflict and I've have overridden
522:56 - the change that was made in the main
522:57 - branch and now I need to create another
523:00 - commit okay so now I can
523:03 - say get add dot get commit minus M
523:09 - resolved merge conflict
523:14 - okay now I've made this change I need to
523:16 - push my feature Branch to update my PLL
523:18 - request so now we can say get push
523:21 - origin syy title change
523:26 - two okay and now I can go back here and
523:30 - reload my pull
523:32 - request so if I did not make this fix
523:34 - this merge conflict and I tried to merge
523:36 - this pull request it would say that the
523:38 - PO request cannot be merged because it
523:39 - is conflicting with the latest version
523:41 - of main but now that I've fixed this
523:43 - merge
523:44 - conflict you can see that I have said
523:47 - that from the main branch I want to
523:50 - change Jovian careers which was the
523:51 - latest version of the title on the main
523:53 - branch to build a successful career in
523:56 - Tech and I want to change open job
523:58 - opportunities to job openings okay and
524:01 - then we can go ahead and merge this PLL
524:07 - request right and that's it so now we
524:11 - should on the main branch we should
524:12 - should have Incorporated changes from
524:14 - both the places right so if we look back
524:16 - at the pull requests we have closed a
524:18 - couple of pull requests one of them
524:21 - changed the title to Jovian careers and
524:23 - about Jovian which merged first the
524:27 - second one changed the title to build a
524:30 - successful career and change the job
524:32 - section header to job openings which
524:34 - merged second and while merging the
524:36 - second one we chose to override the
524:38 - changes from the first one we could also
524:40 - have chosen to keep it at the point of
524:42 - the merge conflict we can decide what to
524:43 - keep so the end outcome of all of this
524:47 - is going to be that if we just check the
524:51 - title here so the title becomes build a
524:53 - successful career in Tech we have about
524:56 - Jovian this came from pr1 from the pr by
524:58 - aashis we have job openings this came
525:01 - from PR2 the pr created by Sydney Jovin
525:04 - and this is how you reconcile changes
525:05 - okay so just to recap how you resolve
525:10 - merge conflicts occur when git is unable
525:12 - to auto automatically merge changes from
525:14 - two branches and this can happen when
525:16 - two or more people have made changes to
525:17 - the same file or the same line in of
525:20 - code in in a file and the changes made
525:23 - in one branch conflict with the changes
525:25 - made in another Branch okay so these are
525:28 - the steps to build a fil uh fix a merge
525:30 - conflict so when there is a merge
525:32 - conflict vs code will display a
525:34 - notification in the bottom right corner
525:36 - and will also show a way to merge
525:38 - changes there you can see the
525:40 - conflicting files so you can see it like
525:42 - this and you can have multiple files you
525:44 - can have multiple conflicts within a
525:46 - single file and then for each file you
525:48 - can choose which changes to keep and how
525:50 - to select and select the right version
525:52 - and once you have resolved all the merge
525:54 - conflicts you need to make a new commit
525:56 - and then those changes can be pushed
525:57 - safely to the remote repository okay and
526:01 - just to make it super clear I'm also
526:02 - going to draw this out here for
526:04 - you so here we have the origin main
526:07 - branch so this is the I'm calling it The
526:09 - Origin main okay and based on the origin
526:12 - main branch in each of our code spaces
526:15 - so let's say this is the code space for
526:18 - Akash and S and this is the code space
526:22 - for
526:23 - Sydney based on the origin main branch
526:26 - each of them has their own main
526:28 - branch what Akash has did was first make
526:30 - a change to the main branch directly and
526:32 - then push that back to origin so that's
526:34 - how origin got updated then Akash has
526:38 - created a feature branch and then
526:41 - created a pull requ reest from the
526:43 - feature branch called
526:45 - pr1 then Sydney based on the old version
526:49 - of the new of the main branch not using
526:52 - the new version of the main branch made
526:54 - some changes and created a pull request
526:56 - called
526:58 - PR2 then we merged the changes from pr1
527:02 - into the main branch so this pr1 is
527:05 - tracking a side branch and we merged
527:08 - those changes back into the main branch
527:10 - so now the main branch is in conflict
527:13 - so these two cannot be merged there's a
527:14 - conflict because both of them have
527:16 - edited the
527:18 - title so then we trite to here's what we
527:21 - Tred to do into our main branch we try
527:25 - to pull in these changes so into our
527:28 - main branch here we try to pull in our
527:30 - changes and we try to get a new version
527:32 - of the main branch then we try to merge
527:35 - those new version of the main branch
527:37 - back into our feature branch and that is
527:39 - when we resolve the merge conflict and
527:41 - then we pushed our feature Branch back
527:44 - and now the feature Branch was
527:45 - compatible with the main branch and so
527:47 - these could be merged together okay I
527:50 - know it's confusing you have to work it
527:52 - out on paper by yourself you have to try
527:55 - to create a couple of pull requests you
527:57 - can also go through uh this explanation
527:59 - again um but only when you do it you
528:02 - realize it but all said and done what
528:04 - we've been able to achieve is we've been
528:06 - able to resolve a merge conflict all
528:08 - right so that is the final topic that
528:11 - we're looking at today resolving merge
528:13 - conflicts there is another optional
528:15 - topic on using git locally I will not
528:17 - get into it today because we've covered
528:19 - a lot of material already we have looked
528:21 - at a bunch of different things but there
528:24 - is a way for you to use git locally what
528:26 - you can do is you can
528:28 - um download git on Mac OS or on Windows
528:33 - or on Linux so you'll get this git
528:36 - command line tool on your computer it
528:38 - will look something like this G minus
528:40 - minus version it will show you g
528:43 - okay then you can actually you'll need
528:46 - to configure git so you'll need to
528:47 - configure a username and you'll need to
528:49 - configure an email before you can start
528:51 - creating repositories making commits now
528:54 - what you can do is you can either create
528:55 - a repository and push it to GitHub or
528:57 - you can get an existing GitHub
528:59 - repository down onto your computer if
529:02 - you want to First create a repository on
529:03 - your computer that is done using the git
529:06 - init command and that will create a new
529:09 - directory called dogit in your present
529:10 - working directory and then you can make
529:12 - commits locally on your computer and
529:15 - then you can add a remote repository on
529:17 - GitHub and you can then push your
529:19 - changes to the remote repository so
529:21 - there are some instructions here and you
529:24 - can also if if other changes are made on
529:26 - the repository online you can pull those
529:27 - changes back okay so that's one flow
529:30 - where you create a repository on your
529:31 - computer add some commits to it and push
529:33 - it to GitHub the other flow is that
529:36 - there is an existing repository on
529:38 - GitHub in that case to get the first
529:40 - version of that repository you do
529:41 - something called a get clone okay so
529:43 - more terminology uh you clone that
529:46 - repository which means you get your
529:47 - first version of that repository then
529:49 - you can make commments into that
529:51 - repository and then you can push that
529:53 - repository back onto the cloud okay so
529:56 - I've linked to a tutorial here that you
529:58 - can go through in case you want to use
530:01 - um in case you want to use GitHub on
530:02 - your computer so follow this YouTube
530:04 - tutorial it's about 40 50 minutes long
530:06 - and it'll get you through all of these
530:08 - as well but here is where we are going
530:10 - to wrap up today so here's what what we
530:12 - looked at we looked at using GitHub
530:15 - repositories to share your project
530:17 - source code and the simplest usage is
530:20 - very simple you go on github.com you
530:22 - click create repository put in some
530:25 - information add a readme file add a add
530:28 - a get ignore file add
530:32 - a a license file and you create a
530:34 - repository very straightforward right so
530:37 - the simplest way to create a repository
530:38 - is just to go on github.com and create a
530:41 - repository then opening up a GitHub
530:43 - repository on COD spaces is also very
530:45 - straightforward you just go onto the
530:47 - repository P page you click the code
530:49 - button and you say edit in code spaces
530:51 - so till now there's no git commands even
530:53 - that you need to run you just have to
530:55 - open up um a Cod space and you can use
530:58 - vs code for
531:00 - development then while you're developing
531:02 - the website U using Cod spaces you just
531:06 - make changes you can upload files or you
531:08 - can create new files and you can add
531:09 - code within those files and you can then
531:12 - preview them using the live server
531:14 - extension on git so the live server
531:18 - extension within vs code can let you
531:19 - preview changes while you are developing
531:22 - that is again fairly
531:24 - straightforward the next step now all of
531:27 - this is still happening on the main
531:28 - branch the single branch that you get is
531:30 - to create G commits so what you do is
531:33 - you take some changes you've made you
531:35 - first stage them and then you st then
531:38 - you take those stage changes and then
531:39 - you commit them so you record a version
531:42 - a new version locally and then you push
531:44 - those committed changes back to GitHub
531:47 - and that way the GitHub repository gets
531:49 - updated so always remember
531:52 - this always remember this picture what
531:55 - you do is you do some local development
531:57 - and then you push the changes back into
531:59 - the remote
532:02 - server you push the changes back into
532:04 - the remote server which is GitHub okay
532:08 - then we learned how to deploy a website
532:09 - to the cloud directory from directly
532:11 - from from GitHub using verel and again
532:14 - it's really simple you just go to
532:15 - ver.com sign in connect it to your
532:18 - GitHub repository and then just click
532:19 - deploy and every time the main branch is
532:22 - updated which means every time you push
532:24 - some changes into the main branch then
532:27 - your repository uh is going to get
532:29 - updated and your website is also going
532:31 - to get automatically deployed very easy
532:33 - and you can also connect a custom domain
532:36 - if you
532:36 - want so all of this is largely enough
532:40 - for working on personal projects
532:42 - but we also have the GitHub
532:44 - collaboration workflow so what happens
532:46 - in the GitHub collaboration workflow is
532:48 - that on your code space you take a
532:52 - branch out you make some changes within
532:55 - the branch you make some commits within
532:57 - the branch you push that Branch to
533:00 - GitHub then you set up a pull request
533:03 - and once you set up that pull request
533:05 - then somebody else can review that pull
533:07 - request and versel also creates a sample
533:10 - of preview deployment without effect in
533:12 - your main branch and once that pull
533:14 - request is approved you can merge that
533:16 - pull request back and the main branch
533:18 - gets updated and so a new version of
533:22 - your project gets deployed automatically
533:24 - by versel so that is a safe way for you
533:27 - to work on multiple features at a time
533:29 - without affecting the main branch
533:31 - without affecting the main deployment
533:33 - and whenever you're ready to bring
533:35 - things back you can merge you can
533:37 - approve that pull request or somebody
533:38 - else from your team can approve the pull
533:40 - request and bring the changes back back
533:42 - into the main branch okay so that is the
533:45 - GitHub collaboration workflow which is
533:46 - also fairly straightforward create a
533:48 - branch make some commits create a pull
533:49 - request get it reviewed um keep
533:52 - iterating on that branch and finally you
533:55 - merge those changes after the pull
533:57 - request is approved back into the main
533:58 - branch okay now where it starts to get
534:01 - complicated is when you have these merge
534:05 - conflicts when you have to keep your
534:06 - branches up to date and you have to and
534:09 - there are conflicts where multiple
534:10 - people can have updated the the same
534:12 - file now although we've covered it today
534:15 - don't worry if that does not make sense
534:16 - right now because that's not something
534:18 - you're going to run into immediately and
534:20 - that is something that we are going to
534:21 - cover at a later stage multiple times so
534:24 - you will become familiar with the flow
534:26 - over time okay so but how it works is uh
534:30 - you have to first get the latest changes
534:32 - from the main branch onto your code
534:34 - space then go into your uh feature
534:38 - branch and pull in those latest changes
534:40 - from Main from or merg in those latest
534:42 - changes from the main branch into your
534:43 - feature branch and then resolve any
534:45 - merge conflicts if they show up and push
534:48 - your feature Branch back to update your
534:49 - pull request and that is how you keep
534:51 - your pull requests up to date okay it's
534:54 - complex no doubt but only when you do it
534:57 - a few times you get used to it so all
534:59 - the code for the tutorial is found here
535:01 - you can find the finally from this point
535:03 - on we'll just be using GitHub
535:05 - repositories and you should also just be
535:07 - using GitHub repositories for all your
535:08 - work going forward so you should do that
535:12 - and you can check out the finished site
535:13 - here as well which contains all the meta
535:15 - tags Etc in place as well so we also
535:16 - looked at meta tags and how they can be
535:18 - used to set up a preview image some
535:20 - description and a preview title when a
535:22 - link is shared online now G can be
535:26 - confusing because of all the various
535:28 - terms and commands but it does become
535:30 - second nature with practice I still look
535:33 - up commands on git because even after
535:36 - using it for 15 years there are so many
535:38 - terms that I often find myself at a loss
535:41 - in terms of what I what I need to do but
535:43 - in particular just try to remember these
535:45 - common workflows when the simplest
535:47 - workflow is you make some changes you
535:50 - check those changes using git D or using
535:52 - the visual code Visual Studio code API
535:54 - you add those changes or stage those
535:56 - changes using git ad dot then you commit
535:58 - those changes using git commit minus M
536:01 - and then finally you push those changes
536:02 - to update your repository okay this is
536:04 - what you should be doing right now you
536:06 - don't need to do anything more than this
536:08 - the next level two is understanding the
536:11 - GitHub collab collaboration workflow
536:12 - where you create a branch and you make
536:14 - commits on the branch you push the
536:15 - branch you create a pull request uh for
536:18 - the branch to be merged into the main
536:20 - branch that is reviewed by other people
536:22 - you iterate you make changes based on
536:24 - the comments and then you merge that
536:26 - back into the main
536:27 - branch the third and the most complex
536:30 - workflow which will take some time to
536:32 - get used to is the branch update
536:33 - workflow where you have to first
536:36 - whenever your branch has fallen out of
536:38 - date uh because the main branch has been
536:40 - updated a few times first you go back to
536:42 - the main branch on your codespace get
536:44 - the latest change from GitHub check out
536:46 - your feature Branch merge the main
536:48 - branch and fix any merge conflicts and
536:51 - then push the feature Branch to update
536:53 - your poll request and you're good to go
536:55 - okay try to practice it try to set up a
536:57 - couple of accounts or maybe even um with
536:59 - the same account you can create two pull
537:01 - requests with some merge conflicts and
537:03 - practice it and here are some resources
537:06 - you can check out to learn more so there
537:07 - is the get documentation of course which
537:09 - is the official documentation and
537:11 - reference that you can check out there
537:13 - is the GitHub learning lab so
537:15 - specifically dealing with merge
537:16 - conflicts Etc you can check out GitHub
537:19 - learning lab so all of this you can see
537:21 - that there is this section on reviewing
537:23 - pull requests there is this section on
537:25 - reviewing merge conflict so this will
537:27 - set things up for you in such a way that
537:29 - it'll give you a starting point and then
537:31 - you'll have to do some reviews you'll
537:33 - have to resolve some merge
537:35 - conflicts there are some tutorials on
537:38 - atlassian some tutorials on get Kraken
537:41 - you can check out these as well um again
537:43 - get us that kind of thing that you can
537:46 - keep exploring more and more you don't
537:47 - have to become an expert on get right
537:49 - away if you can just do the first
537:51 - version you are good to go if you can do
537:54 - the second that's great over time as you
537:56 - start working in a team you'll be able
537:58 - to start working on the third version or
537:59 - the third workflow as well okay there's
538:02 - a g cheat sheet by gitlab you can go
538:04 - check out this cheat sheet it contains
538:07 - some of these common workflows so that
538:10 - you don't have to think about all all
538:11 - the different git commands together and
538:14 - you should also check out the
538:15 - documentation for vs code so if you just
538:17 - search vs
538:19 - code Version
538:21 - Control you will find that there is this
538:25 - detailed set of videos and tutorials on
538:27 - how you can perform every git related
538:30 - action directly within vs code without
538:32 - ever having to type a single command so
538:35 - most of the time you'll just be using
538:36 - this at work so check this out as well
538:38 - as well there is this nice YouTube
538:40 - tutorial that you can check out for a
538:42 - for local git development we did not
538:44 - cover local git development because we
538:45 - are going to use we are going to be
538:47 - using Code spaces for the rest of this
538:49 - course and for the rest of this program
538:51 - as well but if you want to do some local
538:53 - development on git then we have some
538:55 - instructions on installing git on your
538:57 - computer and then you can check out this
538:58 - tutorial for things like G config git
539:01 - init git clone Etc of course you should
539:03 - check out the documentation for verel if
539:05 - you have more questions about how verel
539:07 - works but the flow we've shown here
539:09 - which is connected to your GitHub
539:11 - account pull in a GitHub repository code
539:14 - select the root folder and just hit
539:15 - deploy and then automatically anytime
539:17 - the main branch is updated it's going to
539:19 - create a new deployment and anytime you
539:21 - create a pull request it's going to
539:22 - create preview deployments that can be
539:24 - used for testing without affecting the
539:26 - main deployment and then anytime the
539:28 - pull request gets merged the main
539:29 - deployment gets updated automatically so
539:31 - it makes things really seamless and it
539:33 - is used in production that is what we're
539:35 - going to be using extensively in this
539:38 - program and you can learn more about
539:40 - their versal and GitHub inte ation here
539:41 - as well responsive design is a crucial
539:44 - aspect of modern web development and it
539:46 - ensures that websites adapt gracefully
539:48 - to various screen sizes and
539:50 - devices and by utilizing responsive
539:53 - design principles you can effectively
539:55 - build user interfaces and accessible
539:58 - websites that can cater to a diverse set
540:01 - of audiences from any set of devices and
540:04 - in fact this is important because over
540:06 - 70% of web web traffic today comes from
540:09 - mobile and maybe another 10% from
540:11 - smaller tablets and there's only about
540:13 - 10% of traffic that comes from the large
540:17 - desktop screens that we typically
540:18 - develop our websites on so there is a
540:21 - bit of a disconnect in terms of what
540:23 - developers look at when they're
540:24 - developing websites and what people look
540:26 - at when they're actually browsing these
540:28 - sites so we'll talk about using CSS
540:31 - media queries and breakpoints to
540:33 - implement a mobile first in responsive
540:35 - web design we will also talk about
540:37 - leveraging the various properties off
540:39 - offered by the CSS flexbox layout model
540:43 - to build fluid and dynamic layouts we
540:45 - will then learn how to create separate
540:48 - wireframes to determine the layout of a
540:50 - web page at various breakpoints and this
540:53 - is how designers will often share
540:54 - designs with you and finally we will
540:56 - talk about implementing testing and
540:58 - deploying a a responsive website using
541:01 - CSS media queries and flexbox and of
541:04 - course the best way to learn these
541:05 - skills is to follow along step by step
541:08 - and type out all the code yourself if
541:10 - you are not been doing that if you have
541:12 - not been typing out all the code
541:13 - yourself you're making a big big mistake
541:16 - it is going to severely slow down how
541:18 - much you're going to learn so type out
541:20 - all the code yourself question
541:22 - everything that you do and if you get
541:23 - stuck at some point please ask us uh we
541:26 - have also just added a lot more
541:28 - one-on-one support call slots and we're
541:30 - also decreasing the amount of time that
541:33 - we take to respond to your queries so
541:36 - please feel free to get all the help
541:37 - that you
541:39 - need all right so here is a problem
541:42 - statement that we look at today now in
541:45 - the previous lesson we built a jovian
541:48 - careers website so this is what the
541:50 - website looks like we have a Navar here
541:53 - with the Jovian logo we have this Banner
541:55 - image that says do something great we
541:57 - have an about Jovian section that talks
541:59 - about our mission and talks about two
542:01 - programs we offer along with a picture
542:03 - we have an employment opportunities
542:05 - table we found that a table was a nice
542:07 - way to Showcase some employment
542:09 - opportunities so that's great and and
542:11 - then we have the submit your application
542:12 - form where people can fill out their
542:14 - name email phone number date of birth
542:17 - select a position upload a resume add a
542:19 - cover letter agree to terms and
542:21 - conditions and submit the application
542:23 - and finally at the bottom we have a
542:25 - footer so this is the website that we
542:26 - have been developing step by step over
542:29 - the past few
542:30 - lessons however this same website if
542:33 - you've tried to open it on mobile you
542:35 - will see that it doesn't really show up
542:37 - properly what happens on mobile is this
542:39 - image takes up a lot of space there's a
542:41 - lot of blank space above and below it
542:43 - above and below this do something great
542:45 - part so we might want to reduce the uh
542:47 - the height of the image on mobile you
542:49 - may also notice that on mobile it
542:51 - doesn't really make sense to show these
542:53 - side by side the text and the image
542:55 - maybe it'll be better to show the image
542:56 - below instead of on the side then you
542:59 - will also notice that the table does not
543:01 - show up completely on mobile the table
543:03 - actually goes out of you and that
543:04 - requires horizontal scrolling which is
543:06 - not a great experience on
543:08 - mobile and finally the applic ation form
543:11 - as well it feels a little cramped on
543:14 - mobile and it would be nicer if there
543:16 - was more space on mobile for each of the
543:18 - input Fields so we will try and improve
543:23 - this website to make it more mobile
543:26 - friendly or what's called responsive and
543:28 - here's what we're going to do we are
543:29 - going to use different layouts for
543:31 - different screen sizes to ensure that
543:33 - the page shows up properly on any device
543:35 - so it's going to look different on
543:37 - mobile it's going to look different on
543:38 - tablets and different on desktops we're
543:41 - going to use CSS flexbox to make the
543:43 - layout more fluid and ensure that it
543:45 - adapts properly to any screen width and
543:49 - we will also set up a GitHub repository
543:50 - a new one so that the old one is not
543:52 - affected now normally you will continue
543:54 - working on the same repository however
543:57 - just so that you have access to the old
543:59 - code as well we will set up a copy of
544:00 - the previous GitHub repository and we
544:03 - will also deploy this new GitHub
544:04 - repository to the cloud using verel okay
544:08 - and of course we are assuming here that
544:10 - you are familiar with the the previous
544:11 - lessons which is HTML and CSS Basics
544:14 - Advanced HTML and CSS and Version
544:16 - Control with GitHub and Cloud deployment
544:18 - with
544:20 - worel the code for this tutorial can be
544:23 - found here so this is the starter code
544:25 - so I'm just going to open this up
544:27 - here this is the this is a GitHub
544:30 - repository which contains the starter
544:32 - code you can see here that there is an
544:34 - SRC folder here and inside the SRC
544:36 - folder there is
544:39 - uh there is an index.html file and there
544:42 - is a styles. CSS file these contain the
544:45 - HTML and the CSS for this Jovian career
544:50 - site okay you can also check out the
544:52 - starter site which is what we looked at
544:54 - just
544:55 - now so this is the starter site that
544:58 - we're going to work on today and I
545:00 - encourage you to take this URL and open
545:02 - it up on your mobile phone to ensure to
545:04 - confirm that it actually does not look
545:06 - very good so that you can compare it
545:08 - with the changes that we're making today
545:10 - and you can find and the completed code
545:11 - and the finished site here now to work
545:14 - on this tutorial we will create a new
545:16 - repository containing a copy of our
545:18 - original repository let us open it up
545:21 - here in a new
545:23 - window so this is the repository that we
545:26 - want to create a copy of okay now
545:29 - normally if you want to create a copy of
545:31 - a repository that is owned by somebody
545:33 - else you can just click this button
545:36 - called fork and what Fork will do is
545:38 - take the GitHub repository that is part
545:41 - of somebody else's profile and copy that
545:44 - completely to your own profile as a
545:46 - separate copy so that you can do your
545:48 - own development there um but sometimes
545:51 - you have to Fork your own repository and
545:53 - GitHub does not allow forking your own
545:54 - repository so I'm going to show you a
545:56 - quick way in which you can create a
545:58 - complete working copy of your GitHub
546:01 - repository as another new repository so
546:04 - here is how we do that go to github.com
546:07 - and on github.com click the new button
546:11 - here so I'm clicking the new button and
546:13 - when you click the new button you will
546:17 - get the option to create a new
546:18 - repository so let me call this
546:21 - repository Jovian
546:23 - careers responsive live because I'm
546:26 - going to create a responsive or a mobile
546:28 - friendly version of this site and I'm
546:30 - doing this live so I'm just going
546:32 - calling it Jan careers responsive live a
546:36 - responsive
546:38 - version of the Jovan career site
546:42 - okay I am going to leave this public and
546:46 - I'm not going to add a readme get ignore
546:48 - or license so this time I'm creating a
546:50 - completely empty GitHub repository so
546:53 - once I click create repository now a
546:55 - completely empty repository gets created
546:58 - okay now what I want to do is I want to
547:01 - take this GitHub repository and import
547:03 - all the code from this GitHub repository
547:05 - into my new repository okay this is the
547:07 - repository for the previous lesson I
547:10 - don't want to disturb it now normally in
547:12 - a job you will probably be continuing to
547:14 - work on the same repository but just for
547:17 - demonstration I'm showing you how to
547:18 - create a copy so that the previous
547:20 - lesson doesn't get affected okay so
547:22 - there are many ways to add code into a
547:25 - empty repository you can check out some
547:26 - of these but here is one called import
547:29 - code so what you can do here is click on
547:31 - the import code button and then grab the
547:35 - URL of the old repository so here is the
547:38 - old repository I'm grabbing the URL Joan
547:40 - career site and I am going to copy the
547:43 - code from or import the code from the
547:45 - old repository into this new repository
547:47 - Jovian careers responsive life and I'm
547:50 - going to click begin
547:52 - import okay now this is going to take a
547:54 - couple of minutes to maybe import the
547:56 - entire code depending on how much code
547:58 - you have in your repository all right
548:00 - and once we have this we will be able to
548:03 - now see our new repository and make
548:05 - changes there without affecting the old
548:07 - one okay so our import is now complete
548:10 - so let's open it up and I can close the
548:13 - old repository so now I have a new
548:15 - repository with my starter code all in
548:18 - place without affecting the old one okay
548:22 - all right so that's what we just did we
548:24 - created a duplicate of a GitHub
548:26 - repository by creating an empty
548:27 - repository not including a readme g
548:29 - ignorer license pressing the import code
548:31 - button and providing the URL of the
548:33 - starter code okay now of course as I
548:35 - mentioned if you are on somebody else's
548:37 - repository you can do all of this very
548:39 - quickly using the for button so you can
548:41 - see that there is a fork button here
548:44 - which is disabled for me because this is
548:46 - my own repository but will be available
548:48 - for you when you need to okay the next
548:51 - thing we'll do is we will also deploy
548:53 - our new repository to verel so I'm just
548:57 - going to open up wor.com and worel as we
549:00 - know is a deployment platform that has
549:02 - good integration with GitHub and once
549:05 - you're logged in on worel I'm going to
549:07 - add a new project so I'm going to say
549:09 - add new project project and if versel is
549:12 - not already connected to my GitHub then
549:14 - it will ask me permission to access my
549:16 - public and private GitHub repositories
549:18 - which I have already granted so here I
549:21 - can see on worel that I can I have the
549:22 - option to import the git repository
549:24 - Jovan careers responsive life so let me
549:27 - just go ahead and import that and that
549:29 - is going to create a project and I'm
549:31 - going to use a framework preset other
549:33 - because I'm not using any framework it
549:34 - is just a static site with some HTML and
549:37 - CSS and then I'm just going to click
549:40 - edit and I'm going to go into SRC
549:44 - because I don't want the entire folder
549:46 - to be deployed I don't want the entire
549:49 - repository to be deployed you can see
549:52 - here I simply want the SRC folder to be
549:56 - deployed because that is where my
549:57 - index.html file or my default web page
550:00 - is present okay so I'm just going to
550:02 - select the SRC folder and click continue
550:05 - and then I'm going to click deploy and
550:07 - just like that in just a few seconds the
550:09 - reposit will get deployed and I will
550:12 - have my new website Jovian careers
550:16 - live Jovian careers responsive
550:19 - live let me see I can just continue to
550:21 - dashboard and now I have my new project
550:24 - Jovian careers responsive live dovel DOA
550:28 - okay so now the repository is completely
550:31 - deployed to worel and any changes that
550:33 - we make will now be affecting this new
550:37 - site okay perfect so that's our basic
550:41 - setup in place so that's good to go now
550:45 - let us come back here and also open up
550:48 - this code using GitHub code spaces so
550:50 - that we can actually start writing some
550:52 - code and start editing things so I'm
550:54 - going to click on code and here now I
550:57 - can create a new code space on Main and
551:00 - remember a codespace is a local machine
551:03 - for us on the cloud given by GitHub
551:06 - associated with this repository and
551:08 - we'll be able to write our code in that
551:09 - code space machine so let's click create
551:12 - codespace on Main and by the way if this
551:14 - button is disabled you may have to go
551:17 - ahead and delete some older Cod spaces
551:19 - so you can go to github.com /c
551:22 - codespaces and I think GitHub provides
551:25 - two code spaces for free so you may have
551:28 - to go in and maybe delete an older code
551:30 - space so you can just go to an older Cod
551:32 - space and click delete and that's going
551:34 - to delete your old code space so that
551:37 - you can
551:38 - now reload this page and actually access
551:40 - this button okay so you can have at Le
551:42 - only two free Cod spaces otherwise you
551:45 - can pay and you can get unlimited number
551:46 - of them but free should be fine you can
551:48 - just delete code spaces when you need
551:50 - Okay so let's click code and then let us
551:52 - click create codespace on mean and let
551:55 - me bring this over here now what this is
551:58 - going to do is open up a machine on the
552:02 - cloud get the code from the repository
552:05 - and give me a browser based interface of
552:08 - Visual Studio code to edit and test and
552:13 - develop the code from this repository
552:15 - okay so GitHub is for storing the code
552:17 - Visual Studio code code spaces is for
552:20 - actually developing the code and then I
552:22 - can take my changes and push them back
552:24 - either onto the main branch or I can use
552:26 - the GitHub collaboration workflow where
552:28 - I can create a full request and get that
552:30 - reviewed and so on okay all right so
552:33 - looks like our code
552:37 - spaces system is now open and ready for
552:40 - development so I'm just zooming it in a
552:42 - little bit so you can see that this is a
552:44 - visual studio code interface and let me
552:47 - just close
552:48 - that now here we already have the
552:50 - repository the root file of the
552:52 - repository open you can see that we have
552:55 - an SRC folder we have get ignore license
552:57 - readme all of these were imported in
552:59 - from the original repository I can open
553:02 - up the SRC folder and open
553:04 - index.html and here in the index.html
553:06 - file I can see the entire code for my
553:09 - website Jovian cers so you can see that
553:11 - we have a head we have an HTML tag
553:14 - inside which we have a head tag in the
553:16 - head tag we have a bunch of meta tags to
553:18 - set how this page previews when we share
553:21 - it online we also set for example the
553:24 - title and the fave icon of the page then
553:27 - we have the body tag and in the body we
553:29 - have the nav bar and this is the nav bar
553:32 - we have a banner image this is the
553:33 - banner image we have a header we have an
553:37 - about section with an image and some
553:38 - description then we have a table here
553:41 - the table contains the employment
553:43 - opportunities then we have some a form
553:46 - here an HTML form and that form makes a
553:48 - submission to form bold which is an
553:50 - external service that we using for form
553:52 - submissions and finally we have a footer
553:55 - here which is the footer right over here
553:57 - okay and of course we have all of the
554:00 - Styles here captured in styles.css so
554:04 - each section has it has its own various
554:06 - set of styles which is what we have
554:07 - captured in styles.css so there are some
554:09 - basic styles for HTML body H1 H2 Etc and
554:13 - then there are sectionwise styles for
554:15 - each section and then the subsections
554:17 - inside those section and so on okay and
554:20 - we have certain images as well which we
554:21 - are incorporating within the page and of
554:24 - course we have uh we are connecting the
554:27 - styles with the main page using the link
554:31 - here the link r equal to stylesheet plus
554:34 - we're also using some external fonts
554:35 - from Google apis from Google fonts okay
554:39 - so this is the basic setup that we've
554:40 - explored so far all right so now we've
554:44 - looked at how to deploy to the cloud
554:46 - using verel we've looked at how to start
554:47 - development with GitHub Cod spaces now
554:50 - let's talk a little bit about responsive
554:52 - web design responsive design is an
554:55 - approach that ensures that websites
554:57 - adapt gracefully to any screen size any
555:00 - device and any orientation and that is
555:02 - the purpose here is basically to
555:04 - optimize the user experience by making
555:06 - the content visually appealing and
555:08 - easily readable and accessible okay now
555:11 - responsive design starts from the user
555:14 - interface design so even before you have
555:16 - started coding the page user interface
555:19 - designers will often create design
555:20 - mockups in three to four sizes depending
555:23 - on the available screen width so they
555:25 - will create a mobile design so let's say
555:27 - they're designing a website they will
555:29 - first create a mobile design and in the
555:31 - mobile design everything just goes top
555:33 - to bottom you generally don't don't have
555:35 - a lot of things side by side because the
555:37 - limit on the because the screen width is
555:40 - very limited and in fact just as a
555:42 - common practice something around 576
555:45 - pixels and below is considered a Mobile
555:48 - screen just for reference so typically
555:50 - you will get a mobile design which is
555:52 - about which is something under 576
555:54 - pixels in
555:55 - width then they will often give you a
555:58 - tablet design now the tablet design will
556:00 - have maybe two columns in certain places
556:02 - in certain places it will still have one
556:04 - column so certain things you have
556:06 - slightly more space horizontally on a
556:09 - tablet and that's why there might be a
556:10 - slight change you can see that these two
556:12 - sections were brought in here on the
556:14 - side on a tablet screen and typically
556:16 - tablet screens are about 550 to 750
556:19 - pixels and then you have desktop screens
556:22 - desktop screens are screens that are
556:24 - bigger than 768 pixels so this is where
556:27 - you have a lot more space this is where
556:29 - maybe you can use three columns this is
556:31 - where maybe you can have more space on
556:32 - the left and right and finally
556:35 - optionally sometimes you will find a a
556:37 - layout for large desktops so often now
556:40 - as we are getting to bigger and bigger
556:42 - screens like 4K screens and 8K screens
556:44 - and so on we have the opportunity to use
556:47 - a lot of leave a lot of blank space on
556:49 - the left and right so sometimes
556:52 - especially if your website is going to
556:54 - be viewed by people primarily on the
556:56 - desktop you may get a fourth mockup or a
556:58 - fourth design for very large desktops
557:01 - okay and typically this refers to
557:03 - desktops with a screen width of greater
557:06 - than 992 pixels if you don't get a
557:09 - design like this this then you should
557:10 - just take the hint that you should take
557:11 - the desktop layout and just limit its
557:13 - withd so that the content remains
557:15 - centered on the page instead of
557:16 - completely spreading left to right
557:18 - making it hard to read okay so your
557:20 - designer will often give you three
557:22 - separate layouts at least and sometimes
557:24 - even four or sometimes you may just get
557:26 - two layouts one for mobile and one for
557:28 - desktop and you may have to guess what
557:30 - the tablet layout looks like okay now
557:33 - the specific wids at which these design
557:36 - changes are made where the design
557:37 - changes significantly are called Break
557:39 - points because the previous design
557:41 - breaks at the at that point and a new
557:44 - design takes over from there okay so the
557:46 - break point for mobile screens is 576
557:49 - pixels beyond that it's the tablet
557:51 - screen and then the breako for desktop
557:54 - screens is at 768 pixels beyond that it
557:57 - is
557:58 - a beyond that it is a a large yeah
558:02 - beyond that it is a desktop screen so
558:04 - the break point or the highest break
558:06 - point for tablet screens is 768 pixels
558:08 - and beyond that it is a desktop screen
558:09 - screen and then sometimes Beyond 900
558:12 - pixels or so it is a large desktop
558:14 - screens now these numbers are not set in
558:17 - stone these are just some common values
558:19 - but different sites different Frameworks
558:22 - that we use for CSS have different
558:24 - values but these are just some of the
558:25 - more standard ones
558:27 - okay now your role as a web developer is
558:31 - to implement layout changes at specific
558:33 - breakpoints while ensuring that the page
558:36 - adapts gracefully at all intermediate
558:38 - screen wids okay and that is what we're
558:41 - going to learn today now one important
558:44 - thing to keep in mind whenever you're
558:45 - trying to make a website responsive is
558:47 - that to make a to implement a responsive
558:50 - web design you must include this
558:52 - following meta tag within the head tag
558:54 - of your web page so this there's this
558:56 - meta tag with the name viewport and it
558:58 - has the content width device width and
559:01 - initial scale equal to one or sometimes
559:03 - this is written as 1.0 and you have to
559:05 - take this and you have to put this
559:07 - inside the HTML head tag of your HTML
559:11 - page okay now in this case I already
559:13 - have it meta viewport let me zoom in
559:15 - here
559:16 - slightly yeah you can see here I have
559:19 - the tag meta viewport with Device width
559:21 - initial scale
559:23 - 1.0 why is this important well back when
559:26 - mobile Mobile smartphones just came out
559:29 - there were no designs that were
559:31 - optimized for mobile screens so there
559:33 - were certain tricks that were employed
559:35 - by mobile devices to zoom in and somehow
559:38 - scale and make the text more visible
559:40 - nowadays those tricks are no longer
559:42 - required because developers Implement
559:45 - responsive designs so that's why to
559:47 - indicate to your browser to indicate to
559:49 - the device that please don't apply any
559:51 - tricks to make the content look good on
559:53 - mobile I will handle it myself you
559:55 - include this meta tag okay so all you
559:58 - need to know is whenever you're making
559:59 - your design responsive make sure that
560:00 - you have this meta tag included in your
560:03 - design
560:04 - okay so one good way to build your
560:08 - responsive design skill skills is just
560:10 - by checking out some examples of
560:12 - responsive design so here's one you can
560:15 - check out a bunch of examples here so
560:17 - here is one
560:19 - dropbox the homepage for Dropbox is a
560:22 - good example where this is the mobile
560:24 - view this is the tablet View and this is
560:26 - the desktop view which also contains a
560:28 - form here's here's another one this is
560:31 - dribble it shows images so here you can
560:33 - see that on mobile it shows two images
560:34 - side by side on desktop it shows four
560:38 - five images side by side and then a
560:40 - tablet it's somewhere in between GitHub
560:42 - is another example that there is often
560:44 - you will find this pattern that in the
560:46 - desktop layout there is space on the
560:47 - left and right there is possibly a form
560:49 - in somewhere on the right and then in
560:52 - tablet the form comes in the center and
560:54 - on mobile the form can go away Al
560:55 - together okay and there are a bunch of
560:58 - other examples that you can check out as
560:59 - well similarly there are again some more
561:02 - examples here for you to check out so
561:04 - whenever you're trying to make your
561:05 - website responsive it's useful to look
561:07 - at how other websites are doing it you
561:10 - can see here examples of uh design Modo
561:15 - so they have this layout for mobile
561:17 - tablet and desktop you can see this
561:19 - architecture site they have a different
561:22 - layout for T desktop tablet and mobile
561:25 - and here's another one this seems to be
561:26 - like a personal website so to become a
561:29 - good web developer you have to go and
561:32 - explore what other people are doing
561:33 - there are no ground rules there are no
561:36 - set rules for responsive design in in
561:39 - fact these Trends are constantly
561:40 - emerging so just explore and pick
561:43 - whatever you feel is working
561:45 - well now how do you develop a responsive
561:48 - websites so you can inspect how a
561:51 - website looks on mobile by simulating
561:54 - other devices within your browsers
561:56 - developer tools so that you don't
561:58 - actually have to go and open that
561:59 - website on your mobile each time you
562:01 - want to test it that's a good idea you
562:03 - should always do a final device test but
562:06 - you can just do that within your browser
562:08 - itself let me let me show you an example
562:10 - let us open up
562:12 - this let us open up this Jo Jovian
562:15 - career site and let me just zoom back to
562:17 - 100% so this is what the career site
562:20 - looks like on desktop if I right click
562:23 - and I select
562:24 - inspect now that open opens up these
562:27 - developer tools and I can just put these
562:29 - developer tools on the right so there's
562:31 - this button here on the corner this
562:35 - three dots button and I just click this
562:37 - three dots button and dock the developer
562:39 - tools to the right okay so now my
562:40 - developer tools are on the right side
562:43 - it's exactly the same but I'll show you
562:45 - in a second why putting it on the right
562:47 - head and now there is this button over
562:49 - here and I'll just zoom in and show you
562:51 - so this button is called toggle device
562:53 - toolbar so if you just press this button
562:56 - now suddenly
562:58 - your browser turns into a mobile device
563:01 - and you can go in and select a specific
563:03 - device as well let's say let me select
563:05 - iPhone
563:06 - 10r so this is iPhone 10r and this is
563:09 - what my mobile and this is what my and
563:12 - this is what my website is going to look
563:14 - like on iPhone 10r okay I can even check
563:17 - that the screen width here is 414
563:20 - pixels let me just zoom in there a
563:22 - little bit so the screen width here is
563:24 - 414 pixels so that tells me that this is
563:27 - an iPhone 10r or I can even just select
563:30 - the option responsive and I can just
563:33 - vary the width of the screen and see how
563:36 - my website changes normally you will not
563:38 - be viewing a website on under 360 pixels
563:41 - so normally you might want to start
563:42 - around 360 pixels and just vary the
563:45 - width of your screen slightly and see
563:47 - how the website looks as you increase
563:49 - the width okay so this is a great idea
563:51 - this is a good way for you to inspect
563:53 - how things are going you can see that
563:54 - definitely there's a big problem here
563:57 - the table doesn't look good at all
564:00 - on mobile and it starts to look a little
564:03 - better when we go into tablet or maybe
564:06 - even desktop screen okay and one good
564:10 - idea for you would be to open up
564:12 - developer tools on your browser turn on
564:14 - device mode and see how various pages
564:17 - and websites look with different device
564:20 - vids you can check out Jovian so let's
564:22 - check out jan.com our
564:26 - homepage let's start with mobile this is
564:28 - what it looks like on mobile so on
564:29 - mobile we just have this text we have
564:33 - this explanation here we have these two
564:36 - things and you can see that the text is
564:37 - centered on mobile and we have this logo
564:40 - cloud and then we have a form below it
564:43 - and then we have all of these benefits
564:45 - that are shown one below the other as we
564:47 - go on a tablet screen you can see now
564:50 - that the text is still centered and but
564:53 - now we've put a maximum width for the
564:55 - logo Cloud we've put a maximum width
564:57 - we've added space around the form and
564:59 - now we showing two of the benefits on
565:02 - the same row as we go further let's go
565:04 - onto a desktop screen so now we've gone
565:07 - beyond the 900 pixels or so which is a a
565:09 - desktop screen or a large screen and now
565:11 - you can see here that we have a bunch of
565:14 - options here in the nav bar then we have
565:16 - left text and we have a form here and
565:19 - then we have now all four benefits
565:21 - listed on the same page on the same row
565:23 - and of course there are similar changes
565:25 - that are there on each section as well
565:27 - you can see here intensive programs here
565:30 - goes one in each row instead of two of
565:33 - two per row okay you can see that okay
565:36 - maybe this is something we need to fix
565:38 - so looks like like in the pricing div we
565:41 - haven't taken care of spacing and this
565:43 - is what happens when you are building
565:45 - responsive websites there will be slight
565:47 - cases here and there a certain place
565:49 - where you've not thought about how
565:50 - things should look and you'll have to go
565:52 - and fix it and that is why it's
565:53 - important to check across the entire
565:55 - range of fits okay let's check another
565:57 - one NY times.com so this is what the New
566:00 - York Times looks like on mobile you have
566:02 - a very little space on mobile that's why
566:05 - there's just this title and then there
566:06 - is this nav bar and we'll touch on how
566:08 - to show these NAB bars at a later point
566:11 - and then there is just this date and
566:13 - there's the sale offer going on then
566:15 - there is just one story and then another
566:17 - story below it and so on but as you
566:20 - start to increase the width you can see
566:22 - that now we go from one story to
566:25 - multiple stories and we also get this
566:28 - second bar here which opens up a bunch
566:30 - of categories and we also get something
566:32 - here on top we also get maybe a login
566:34 - button and all so things change
566:37 - significantly based on the screen that
566:39 - we on right and you can see now we go
566:41 - into three column layout when three
566:42 - columns are available so a lot of time
566:45 - is spent by designers deciding where
566:47 - exactly to change the layout what the
566:49 - break point should be and what the
566:51 - structure should be for the site and
566:54 - really this is where a lot of the time
566:56 - is spent just fine-tuning small things
566:58 - and testing things carefully okay so I
567:01 - encourage you to maybe explore a few
567:03 - more sites and see how they work now
567:06 - certain websites redirect to a
567:08 - completely different page when you try
567:10 - to access them on mobile for example if
567:11 - you were to open Gmail on mobile it will
567:14 - redirect to a slightly different page or
567:15 - show a completely different
567:18 - design that was a common practice
567:20 - earlier but now that there are many
567:22 - tools to or many techniques to build
567:24 - completely responsive layouts it's not
567:26 - recommended any longer so try to find
567:28 - some websites which follow this outdated
567:30 - pattern and avoid it when you are
567:32 - building websites instead what you
567:34 - should do is build something called a
567:36 - take something called a mobile first
567:38 - approach which is what we look at today
567:39 - let's talk about CSS media
567:42 - queries CSS media queries are a powerful
567:45 - tool that allow you to apply different
567:47 - styles to your web page based on device
567:50 - characteristics such as screen size
567:52 - resolution and
567:53 - orientation and here is the basic
567:56 - structure of a media query you say at
567:58 - media and then you specify a media type
568:01 - and then you specify a condition and you
568:03 - can have one or more conditions and then
568:06 - you open up these brackets and inside
568:08 - these brackets the CSS rules that you
568:11 - write will only apply when you are
568:14 - looking at this particular media type
568:15 - and you're looking at this particular
568:17 - condition okay now when you're working
568:19 - with responsive web design the media
568:22 - type is almost always going to be screen
568:24 - so there are three types of media there
568:26 - is the screen and then there is print
568:29 - and there is all now print is used the
568:32 - print media type is used when you try to
568:33 - print a page or export it as PDF which
568:35 - is not something we're going to look at
568:37 - today so in our case the media type is
568:40 - almost always going to be screen or it
568:42 - can even be all and the condition is
568:46 - something that you can set based on the
568:49 - width of the screen or the orientation
568:51 - of the screen or there are a bunch of
568:53 - other properties that you can use so
568:55 - here is an
568:56 - example let's say we want to change the
568:59 - background of the body when the screen
569:02 - width is at least 768 pixels let's say
569:05 - on mobile screens we want to have a
569:07 - separate background and then on on large
569:09 - screens or desktop screens we want to
569:11 - have a separate background so here is
569:13 - how we might do it we can say at media
569:16 - and then we can say screen because we
569:18 - only want to affect the screen layout
569:20 - not the print layout and then we can say
569:22 - and and now we can specify a condition
569:25 - Min width is 768 pixels so when the
569:28 - minimum width of the browser is 768
569:31 - pixels then we can specify that the body
569:34 - should have a background color of light
569:36 - blue okay so let me just copy that and
569:38 - and let me put that into my CSS file so
569:41 - here I am in my CSS file and right maybe
569:45 - right below here the main body
569:47 - declaration I'm going to add this at
569:51 - media screen and minan
569:57 - width 768 pixels that means at a minimum
570:01 - width of 768 pixels when the condition
570:03 - holds true for the body I want the
570:07 - background color to will be light blue
570:10 - okay all right now I need a way to
570:14 - actually preview the changes that I just
570:15 - made what I'm looking at here on the
570:17 - left is the deployed website but I'm
570:20 - making changes in my GitHub code space
570:23 - so what I need to do is I need to launch
570:26 - this GitHub
570:27 - codespace this index.html file in a
570:30 - preview and remember for preview we
570:33 - actually use an extension called live
570:35 - preview because our codespace is a
570:37 - system somewhere on the cloud
570:39 - and we need to now view the HTML code in
570:42 - our browser as a web page and for that
570:45 - we can use this live server extension
570:48 - okay so let us open up the live server
570:50 - extension so search for live server by
570:52 - ritwick day and click install and code
570:56 - spaces and again all of this is covered
570:58 - in the previous tutorial so you should
571:00 - review that in case this doesn't make
571:02 - sense and now let's come back into
571:04 - index.html and let us right click on
571:07 - index.html and click click open with
571:10 - live
571:11 - server okay so now what this is doing is
571:14 - this is going to set up a simple server
571:16 - which is going to serve the file for us
571:19 - so that we can now view it in our
571:20 - browser and let me just bring that and
571:22 - put that here on the left let's bring
571:24 - this back here on the
571:29 - right okay so now I have this styles.
571:33 - CSS and I've mentioned here that
571:35 - whenever the screen width is more than
571:36 - 768 pixels my body should get a light
571:40 - blue background clearly it has gotten a
571:41 - light blue background which is not
571:42 - looking good but it demonstrates what
571:44 - we're looking for but let me go in here
571:47 - and let me also click inspect and let me
571:50 - just reduce the width of the screen let
571:53 - me reduce it down to maybe an iPhone 10r
571:56 - you can see that when I'm viewing the
571:59 - same page on a mobile
572:02 - device on the mobile device it is still
572:06 - has a white background but on this
572:08 - device over here it has a blue
572:11 - background and you can see the exact
572:12 - change happens at 768 pixels so as I
572:17 - increase you can see that just before
572:19 - 768 pixels it is still white but at 768
572:23 - pixels it turns blue okay so you can do
572:26 - all sorts of things like that let me
572:27 - change another thing Let Me Maybe set
572:29 - the body font size to 10 pixels or 2 20
572:35 - pixels let's just make it 24 pixels so
572:38 - that the font size also changes
572:40 - drastically so here you can see that I
572:42 - have below 768 pixels and then as soon
572:45 - as I cross 768 pixels the body font size
572:48 - should
572:50 - change
572:52 - well okay it didn't I just need to
572:55 - reload the page
572:59 - maybe yeah maybe if I just remove this
573:01 - it might
573:05 - change well it doesn't seem to be
573:07 - changing right now but but it will uh
573:09 - depending maybe I just have to like set
573:11 - the uh properties properly but you can
573:13 - set any property here and the font size
573:16 - can change significantly for that
573:18 - particular tag and or for that
573:21 - particular selector based on what
573:23 - property you set here okay so for now
573:25 - I'm just going to revert it and Below
573:27 - 768 pixels the background is white above
573:30 - 768 pixels the background is blue okay
573:33 - so that is how you use media queries and
573:35 - let me just get rid of this for
573:37 - now but one other thing you can do is
573:41 - also combine a bunch of conditions so
573:43 - you can say something like this that you
573:45 - want a particular CSS rule to apply only
573:48 - between Min width of 600 pixels and Max
573:51 - width of 1024 pixels so at 600 pixels
573:53 - you want it to start and that same set
573:55 - of rules you want them to end at 10 to 4
573:57 - pixels you can imagine how using this
574:00 - you can set up maybe one layout for
574:01 - under 400 pixels one for 400 to 600 one
574:04 - for 600 to 800 and so on all right let's
574:07 - look at an example of this let me just
574:09 - take this and let me put it in here now
574:12 - I'm going to put a couple of layouts I'm
574:16 - going to say that at let me just make it
574:19 - 400 and 8 600 pixels just so that we can
574:22 - actually view the changes very
574:24 - easily now what I'm seeing is that under
574:28 - 400 pixels I have a white background and
574:31 - then as soon as I touch 400 pixels the
574:32 - background turns blue but as soon as I
574:35 - cross 600 pixels the background turns
574:37 - white again okay so do you see what's
574:39 - happening you can combine multiple
574:42 - conditions like this and you can also do
574:44 - something like this let's say I want to
574:45 - only have a condition for Max width so
574:48 - then I want to say that only under 600
574:50 - pixels the color is blue and over 600
574:53 - pixels the color is going to be white so
574:56 - as long as this condition or all
574:58 - conditions are satisfied these CSS rules
575:00 - apply and I don't just have to put body
575:02 - here I can maybe put change the H1 color
575:06 - change the H1 size here I can put maybe
575:08 - change some other size here as well so I
575:10 - have all those controls that I can
575:13 - modify
575:15 - okay now of course you don't only have
575:18 - to look at the screen size you can also
575:21 - use the orientation so let's say you
575:23 - want to use a certain font size only in
575:25 - a certain orientation you can do that
575:27 - too let us maybe try that so only in the
575:29 - landscape orientation we want the light
575:33 - blue color so
575:36 - orientation landscape
575:38 - and the orientation is also orientation
575:41 - is also piece of information that is
575:42 - sent by the browser itself so let us go
575:45 - to iPhone 10r and let us change the
575:47 - orientation here so there's a button
575:49 - here you can see that there's a button
575:51 - right here to change the orientation you
575:53 - can see that now this is in landscape
575:55 - orientation and in the landscape
575:56 - orientation it has a blue background and
575:59 - I can change it back to the portrait
576:00 - orientation or the vertical orientation
576:02 - and in this case it does not have the
576:03 - blue background right so
576:10 - let's bring that back and let us get rid
576:12 - of this so that is how media queries
576:15 - allow you to change the layout of a page
576:20 - at various breakpoints and that is what
576:22 - we're going to use today okay you can
576:24 - combine multiple conditions and you can
576:25 - check out some information about media
576:27 - queries here but we've covered the most
576:30 - common use case you'll be using the
576:31 - screen media type and you will be using
576:34 - maybe the max width or Min width to set
576:36 - break points specifically as we said
576:39 - earlier break points are the points at
576:40 - which Your Design changes to adapt
576:42 - different screen sizes based on the
576:44 - designs that your UI designer have has
576:46 - given you you may have to set some break
576:48 - points and these are generally set on
576:50 - some common device screen widths so
576:54 - media queries can be used to set
576:55 - breakpoints and apply CSS rules for each
576:57 - layout for example if you want to write
576:59 - completely separate CSS for mobile
577:03 - tablet laptop desktop and large desktop
577:06 - screens you may do something like this
577:08 - you may have one section in your CSS
577:11 - file which only deals with Mobile screen
577:13 - so you may say media screen and Max
577:16 - width 576 so under 576 screen width all
577:19 - these rules are going to get applied
577:21 - okay then you may have maybe another
577:24 - media query here called media screen and
577:26 - M width has 576 pixels and Max width has
577:29 - 768 pixels so between 576 pixels and at
577:34 - maximum width of 768 pixels so between
577:37 - these two wids
577:38 - all the all these CSS rules will get
577:40 - applied and then you may have maybe
577:42 - another one between 768 and 992 and you
577:46 - may have another one between 992 and
577:47 - 1200 and maybe you may have one for 1200
577:50 - and higher right so depending on how
577:52 - many break points you've decided on for
577:54 - your website you can set up these Min
577:57 - and Max conditions and then you can
577:59 - write completely separate rules for each
578:01 - of these okay so this is one way you can
578:04 - go about doing things but a slightly
578:06 - better way is what is called mobile
578:09 - first design so the way you should be
578:12 - building most web pages today is by
578:15 - starting out with a mobile design so
578:17 - first you should just design your web
578:19 - page or build your web page for mobile
578:22 - and then slowly enhance that same web
578:24 - page to make it look good on uh on a
578:28 - tablet and on a desktop screen and maybe
578:31 - on a large desktop screen as well right
578:34 - so in a mobile first design the base CSS
578:37 - styles are for mobile devices so you do
578:39 - not have a media query for the mobile
578:41 - devices you just write all the base CSS
578:42 - Styles and apply that to mobile devices
578:45 - and then media queries are used to
578:47 - progressively enhance the design for
578:49 - larger screens right so what you're
578:51 - basically trying to do is you're going
578:53 - to implement this design first and then
578:55 - slowly you are going to add a break
578:58 - point and then at a certain break point
578:59 - you're going to maybe make you're going
579:01 - to maybe change this layout and maybe
579:03 - shift to a two column layout then slowly
579:05 - you're going to add another break point
579:07 - and at that particular breakpoint you're
579:09 - going to add a bunch of these categories
579:10 - and you're going to shift to a three
579:12 - column layout and so on all right so
579:14 - that is what we're going to do we're
579:15 - going to start with the base Styles and
579:18 - then you can have whatever new Styles
579:20 - you want to introduce for tablets you
579:22 - can simply say media screen and Min
579:24 - width 576 so you're telling the browser
579:27 - only for screens with more than 576
579:30 - pixels apply these new CSS rules and
579:32 - some of these CSS rules will override
579:34 - the old CSS rules that have been set in
579:36 - the base Styles so that that's how media
579:38 - queries are more selective so they can
579:39 - overwrite the existing
579:42 - Styles and then we have similarly these
579:44 - a next set of uh a next set of rules Min
579:49 - with 768 and these rules are going to
579:51 - override the rules that have been
579:52 - created in these and these so they also
579:54 - follow the order and they follow the
579:56 - specificity that is how CSS works so all
579:59 - these rules are going to override the
580:01 - previous rules that you have set and
580:03 - then you can similarly have maybe
580:04 - another where you can say media screen
580:06 - and M with 99 2 so only when the screen
580:09 - width crosses 992 these new rules will
580:12 - get applied only a selective set of
580:13 - rules and they will override any rules
580:15 - that have been previously applied okay
580:17 - this way you don't have to repeat a lot
580:19 - of CSS for every screen rather you can
580:21 - sty you can start with the mobile design
580:23 - and you can just add a few properties
580:25 - here and there to make the website look
580:27 - nicer on tablet and this is a great
580:29 - approach because if you start out with
580:31 - the desktop layout and you try to
580:33 - compress it down to mobile you're going
580:35 - to face a lot of difficulty rather if
580:37 - you start out with the mobile layout
580:39 - often the tablet and desktop layout will
580:40 - simply either have more information or
580:43 - rearrange some of the things in a into
580:46 - multiple columns and that is easier to
580:48 - achieve rather than taking more
580:49 - information and compressing it down into
580:51 - one column okay so even as a designer
580:53 - you should always start from the mobile
580:55 - layout and then slowly build out the
580:57 - desktop
580:58 - layout so by removing the max with
581:00 - condition for the first breakpoint and
581:02 - using only minwidth queries for the rest
581:04 - we ensure that the base Styles apply to
581:06 - mobile devices only
581:08 - and then they apply to all devices
581:10 - further as well but progressively we
581:13 - also enhance the design as the screen
581:15 - size increases okay so try experimenting
581:20 - with this try setting up some of these
581:21 - break points in the CSS file and
581:23 - experimenting with this to make changes
581:25 - to the careers Jan careers website make
581:27 - it more responsive and observe how the
581:30 - mobile first approach is different from
581:32 - the previous approach where you have
581:33 - different set of styles between each set
581:35 - of break points okay
581:38 - all right so one other thing we need to
581:41 - cover before we go ahead and actually
581:43 - implement the mobile design is something
581:45 - called the CSS flexbox layout because
581:48 - it's not just that you're going to
581:49 - change the layout at certain break
581:51 - points between those break points as
581:54 - well sometimes you will have to make the
581:55 - layout a little more fluid so that
581:57 - things go from maybe two columns to
581:59 - three columns or maybe the sizes of
582:01 - things increase and decrease and maybe
582:04 - you add space on the left and right so
582:06 - to handle these kind of fluid layouts
582:09 - CSS has something called flexbox and
582:12 - this is something that was added to CSS
582:13 - about 15 years ago U about 14 about 12
582:18 - years ago to be exact so this this is
582:20 - something that was added to CSS about 12
582:21 - or 13 years ago when mobile layouts
582:24 - became more common when mobiles mobile
582:27 - phones became more common to allow for
582:29 - creating fluid layouts that can be
582:31 - flexible and that can grow and that can
582:34 - automatically shift into multiple
582:35 - columns Etc and as required okay so
582:39 - we're going to look at the CSS flexbox
582:41 - setup we're going to learn a little bit
582:42 - about flexbox it's not a detailed
582:44 - flexbox tutorial we're going to learn
582:45 - the most common flexbox properties and
582:49 - it is a versatile method for arranging
582:50 - elements within a container in a
582:52 - flexible and adaptive Manner and it
582:54 - simplifies complex layouts making it
582:57 - making it easy to achieve responsive
582:58 - designs and accommodate of varying
583:01 - accommodate wearing content sizes now
583:03 - the flexbox layout can be applied to an
583:05 - HTML element by modifying the CSS
583:07 - display property and it was added to CSS
583:10 - in 2010 and it was implemented by most
583:13 - browsers in the early
583:14 - 2010s and the CSS display property this
583:17 - is something that we've already seen
583:18 - here it determines how an element is
583:20 - displayed on a web page so just to give
583:23 - you an example I'm going to first just
583:25 - create a new file
583:27 - called display.
583:29 - HTML and in this file display. HTML I'm
583:32 - going to create a bunch
583:34 - of HS so let me just put in
583:42 - body and in the body let me put in a
583:43 - bunch of
583:48 - divs let's create a div called item
583:54 - one item two item three and item four
583:58 - okay and let us open up this page using
584:02 - the live server so let us right click
584:04 - and say open with live server
584:08 - and we'll open it up
584:11 - here right any the way to open up any
584:13 - page in live server is by simply write
584:15 - clicking and selecting open with live
584:16 - server okay and you can see that we have
584:19 - a bunch of these divs here and I'm just
584:22 - going to set the display property for
584:24 - each of these divs so first I am going
584:27 - to set the display property for item one
584:29 - so let me just give it the ID item
584:34 - one and let me give this the ID
584:38 - item
584:39 - two let's go ahead and give
584:42 - them item
584:44 - three and item
584:50 - four yeah so you have a bunch of items
584:53 - here and let us go ahead and set the
584:56 - display property for item one to display
585:01 - block okay and let's put that inside a
585:05 - style
585:06 - tag
585:08 - so that is how we are applying CSS so
585:11 - there is no change when we set the
585:12 - display of item one to display
585:15 - block what happens if we change the
585:18 - display of item one to
585:21 - display in line let's actually add a
585:24 - border around item one so that we can
585:25 - get a better
585:32 - sense yeah you can see here that when
585:34 - you have display block which is the
585:36 - default value item one takes up the
585:38 - entire width of the screen instead if we
585:41 - said display in
585:43 - line you can see that now item one does
585:45 - not take up the entire width of the
585:47 - screen and in fact it will show up in
585:50 - line with other things that are also in
585:52 - line so let me just go ahead and for
585:54 - item two as well let me add a border 1
585:56 - PX
585:58 - solid red and let me set the
586:02 - display to inline as
586:04 - well okay and you can see here that item
586:07 - one and item two both show up on the
586:09 - same line because they are set to inline
586:11 - so display in line does not take up the
586:14 - entire width and allows a particular div
586:17 - to get embedded in line within some text
586:19 - or within other inline items but if
586:21 - either of these was
586:23 - block you can see that that no longer is
586:25 - true all right so that is display in
586:28 - line and then there is something called
586:31 - display inline block which I will leave
586:33 - to you as an exercise so I'll let you
586:35 - figure that out what that do and how
586:37 - that's different from display in line
586:39 - then there is something called display
586:41 - none I can say item two or item
586:46 - three display
586:49 - none now it just disappears so when you
586:51 - don't want to show a particular div and
586:53 - we'll see an example of this later today
586:56 - then you just set display none now the
586:58 - final property that we are going to
587:00 - study which is what triggers the flexbox
587:02 - layout is the display Flex property okay
587:05 - so we're going to come back and we're
587:06 - going to take a a closer look at the
587:08 - display Flex property is which is what
587:11 - makes a particular div a flex container
587:14 - and allows its children to be lay out
587:16 - laid out as flexible boxes okay very
587:18 - important we're going to look at that in
587:21 - just a second but there are also several
587:23 - other display options so I encourage you
587:25 - to check out the other display options
587:27 - as well and I encourage you to also
587:30 - maybe try out this excise which goes
587:32 - into the various options that you have
587:33 - for the display property but these are
587:36 - the most common ones that will use
587:37 - display block inline flex and possibly
587:40 - none okay so with that let's close this
587:44 - let us talk about
587:47 - flexbox now the first key thing you want
587:49 - to understand about the flexbox layout
587:52 - is that it works with containers and
587:55 - items so you always have an outer div
587:58 - which is a parent or a container on
588:00 - which you set the display Flex property
588:03 - and then you have the items and the
588:05 - items are then laid out in a flexible
588:07 - fashion based on a bunch of CSS
588:09 - properties that you set okay so the
588:11 - display Flex property when applied to a
588:13 - container or a parent component causes
588:15 - the items or children to be arranged
588:18 - using the CSS flexbox layout and the
588:20 - arrangement can be controlled using
588:22 - various container level and child level
588:24 - properties as we will discuss in just a
588:26 - second so let's go ahead and create a
588:30 - new file called flexbox HTML I'm going
588:33 - to right click here and create a new
588:35 - file called flexbox
588:38 - HTML into this file Flex flexbox HTML
588:41 - I'm going to add a bunch of HTML and CSS
588:45 - code to set things up let me also open
588:47 - it up quickly in the live preview so
588:51 - open with live server let us open it up
588:53 - over
588:56 - here and let us come back and let us set
588:59 - up the code for this I'm just going to
589:01 - copy this code and paste it in here and
589:03 - we'll just walk through the code and
589:05 - then start studying a bunch of
589:12 - okay so this is what our content
589:15 - currently looks like we have a box so we
589:20 - have a div we have a div with the ID
589:22 - container over here and then inside that
589:25 - div we have four divs one called item
589:28 - one another called item two another
589:30 - called item three and another called
589:31 - item four so we have these we have this
589:33 - container div that's clear the container
589:36 - div has four item divs and each item div
589:39 - has the ID item one item two item three
589:41 - item four respectively and all of the
589:43 - item divs have the class item okay and
589:46 - let us look at the CSS so so far we've
589:48 - not used Flex box flexbox at all for the
589:52 - container we have set a background color
589:54 - of coral you can see that it has this
589:56 - orangish background color and then we've
589:58 - also given it a background one pixel
590:00 - solid black background a border of one
590:03 - pixel solid black we have also just set
590:06 - a font family so that the font the text
590:08 - is a little easier to read and finally
590:10 - we have given it a padding of 10 pixels
590:12 - so you can see that there is a 10 pixel
590:14 - padding inside the border and then there
590:16 - is a Content inside it okay so far we've
590:18 - not modified the display property then
590:22 - we have the item for each item and again
590:27 - this is the class item not individual
590:29 - items so we have specified the class
590:31 - item for each item we're not using the
590:32 - IDS just yet we have again set a border
590:35 - of one pixel we have set a padding so
590:37 - you can see that there is some space
590:39 - around the text and finally we've set a
590:41 - background of cornflower blue that is
590:43 - the blue that you are seeing now let us
590:46 - slowly start turning this into a flex
590:48 - container so always the flex display
590:52 - properties set on the container okay so
590:54 - we say display
590:58 - flex and I'm going to hit save and now
591:01 - you can see suddenly that all the items
591:03 - are now laid out in a horizontal fashion
591:07 - okay so you set the display property on
591:09 - the
591:11 - container on the container you set the
591:13 - display property and that causes the
591:16 - items to be laid out according to the
591:19 - settings the default settings of a flex
591:21 - box okay so the first thing that we can
591:25 - change is the direction in which things
591:27 - are laid out and that is done using the
591:29 - flex Direction property and the flex
591:31 - Direction property has four values it
591:33 - has the row value it has the row reverse
591:35 - value it has the column value and the
591:37 - column reverse value okay so let us take
591:40 - a look again all of these properties are
591:43 - first set on the container and for each
591:45 - property we also have an example of
591:46 - whether it is set on the parent which is
591:48 - the container or the child so Flex
591:51 - direction is specified in the parent so
591:53 - we say Flex Direction
591:56 - row and that doesn't change anything
591:59 - because Flex Direction row is the
592:00 - default value but we could also say Flex
592:02 - Direction row
592:05 - reverse and now you can see that the
592:07 - items are laid out not from left to
592:09 - right but from right to left so you have
592:11 - item one item two item three and item
592:13 - four laid out from right to left okay
592:16 - they're still logically they're still in
592:19 - this order but they're just laid out
592:21 - from right right to left and this is
592:22 - where you can use flex box to maybe do
592:24 - some right to left layouts okay let's
592:27 - check Flex Direction
592:31 - column okay Flex Direction column as you
592:34 - might expect lays things out in a column
592:36 - format which is pretty similar to
592:38 - display block but except you are setting
592:42 - that this is a column on the parent and
592:44 - on the container not on individual items
592:46 - okay so fle and of course you'll be able
592:48 - to set a lot of other properties as well
592:51 - so this is flex Direction column and let
592:53 - me just increase the height of
592:55 - this so that I can show you clearly
592:58 - that the way things Stack Up is at the
593:01 - top okay so Flex Direction column is top
593:03 - to bottom you can also do Flex Direction
593:07 - column
593:08 - reverse and that will send things from
593:10 - the bottom to top you can see item one
593:12 - above that item two item three and item
593:13 - four so that is how you can lay things
593:15 - out Flex Direction row is left to right
593:18 - Flex Direction row reverse is right to
593:21 - left column is top to bottom reverse
593:24 - column reverses bottom to top okay these
593:27 - are the four values you can set for the
593:29 - flex Direction property and with flexbox
593:32 - spe specifically I would highly
593:34 - recommend that you practice this that
593:36 - you check out if you have a question
593:37 - what happens if I do X then just go
593:40 - ahead and try it out and maybe set
593:44 - proper Heights and widths you can use
593:45 - the starting code that we've provided
593:47 - here and experiment and understand and
593:48 - improve your understanding okay all
593:51 - right so that's fine now the next thing
593:54 - is to check what happens if you have
593:58 - maybe data that is not going to fix
594:00 - within the given width of the container
594:03 - so now we have a container and now for
594:05 - this container we have a bunch of items
594:07 - and all these items seem to be fitting
594:09 - just fine well what happens if we had
594:11 - more items let's say if we
594:14 - had item
594:25 - 567 right so item 567 clearly you can
594:27 - see what happens is first they try to
594:30 - compress to fit within but if they
594:31 - cannot go beyond a particular width then
594:33 - they just go out then they just fall out
594:36 - now when they do fall out what do you do
594:38 - another another condition that could
594:41 - come up here is let's say our left and
594:43 - right padding was actually higher it
594:44 - specified a 30 pixel padding left and
594:46 - right what are you going to do here now
594:48 - these these all seem to be overflowing
594:50 - these all seem to be going outside the
594:52 - box here and that is where you can
594:54 - specify a flex wrap properly you can say
594:58 - Flex wrap and the default value is no
595:00 - WRA and again this has to be set on the
595:02 - parent and it specifies whether the
595:04 - container whether the children should be
595:06 - be wrapped which means they should go on
595:08 - the next line or not no wrap simply
595:10 - means that you want everything to show
595:11 - up on the same line even if it exceeds
595:13 - the width of the container the other
595:15 - option is to say
595:17 - wrap in which case this is what happens
595:20 - it takes item 1 2 3 and then it when as
595:22 - soon as it finds a child element that
595:25 - cannot fit without exceeding the width
595:28 - of the container it wraps onto the next
595:29 - line so we have 5 six 7 you can also do
595:33 - Wrap reverse and the idea here is that
595:36 - it s not onto the next line but onto the
595:38 - previous line so you can say 1 2 3 and
595:40 - then it goes 4 5 6 and 7 okay and notice
595:44 - this is different from row reverse so if
595:45 - you did row reverse and you can check
595:47 - this
595:49 - out it would now go 1 2 3 4 5 6 7 all
595:54 - right so keep that in mind that you have
595:57 - a reversal on the row level you have a
595:59 - reversal possibly on the column level
596:00 - and then you can do that reversal on the
596:02 - wrap level as well whether you want the
596:03 - lines to go up or you want the lines to
596:05 - go down
596:08 - okay so that is your that is the flex
596:11 - wrap property so you can of course just
596:14 - use no wrap which is what just uses this
596:18 - and then you have wrap and wrap
596:23 - reverse can experiment with this and
596:25 - you'll get a better understanding now
596:28 - the next set of properties which are
596:29 - around justification and Alignment
596:32 - determine how Flex items are positioned
596:35 - within a container so these options
596:37 - provide control over the distribution of
596:39 - items along the main axis so the main
596:42 - axis let's say if it is a flex row then
596:45 - the main axis is the horizontal axis and
596:47 - the secondary axis is the uh is the
596:50 - vertical axis but if the flex direction
596:53 - is column then the main axis is a
596:56 - vertical axis and the secondary axis is
596:59 - a horizontal axis okay so we'll just
597:01 - talk about it's also called the cross
597:03 - axis so justification is controlled
597:05 - along the the main axis that is done
597:07 - using something called justify content
597:10 - and then alignment around is controlled
597:13 - along the cross AIS okay and I know this
597:15 - seems confusing this is probably the
597:17 - most confusing part of flexbox but with
597:19 - some practice you'll get used to it so
597:22 - let's look at justify content now here
597:25 - is how justify content Works let's say
597:27 - you have a flex container with flex
597:29 - Direction row and on that container if
597:31 - you set justify content to flex start
597:34 - then things will simply show up from
597:35 - left to right okay if you set justify
597:40 - content to Center then the items will
597:42 - still show left to right but they will
597:44 - be centered on the horizontal axis or on
597:48 - the main axis right so what that means
597:50 - is that all the items will be shown and
597:51 - then space will be added on the left and
597:53 - right on the other hand if you set Flex
597:56 - end as justify content then the items
597:59 - will just stick to the right you notice
598:01 - they're still rendered left to right 1 2
598:03 - 3 but they are now sticking to the right
598:06 - side instead of the left side and
598:08 - similarly we have a bunch of other
598:09 - options as well so let's take a look
598:12 - let's get rid of some of these other
598:13 - items so let's get rid of item four five
598:17 - and 4 five 6 and
598:19 - 7 or just let's get rid of items 5 six
598:22 - and 7 so I'm just commenting them out
598:25 - and let us reduce the padding the
598:26 - horizontal padding for each item so this
598:28 - is how they look right now now I can get
598:31 - rid of the wrapping for now as well now
598:33 - let me just add justify content and
598:36 - again it's on the parent and let me say
598:38 - Flex start that's where they are they
598:41 - are currently sticking to the start
598:43 - which is the left right it's not saying
598:45 - left it's saying start because if I had
598:47 - row reverse then they would stick to the
598:49 - right and if I had column they would
598:50 - stick to the top so it's just start at
598:53 - start of the axis whatever be the main
598:55 - axis okay and now I could
599:00 - say justify
599:02 - content
599:04 - Center and now you can see that they're
599:06 - still laid out left to right but now
599:08 - they are placed at the center and as I
599:11 - change the width of the screen you can
599:13 - see that they still remain right in the
599:15 - center so anytime you want to
599:17 - horizontally Center content within the
599:19 - page just put an outer div give it the
599:22 - display flex and then put in an inner
599:24 - div um and give the outer div justify
599:27 - content Center and that is going to
599:29 - horizontally Center bunch of content on
599:31 - the page very
599:33 - straightforward okay next next let us
599:37 - now do justify content Flex
599:42 - end now you can see that they are laid
599:44 - out at the end I
599:48 - modify then there's another thing you
599:50 - can use you can use space
599:54 - between now what space between does is
599:57 - there is of course this padding for now
599:59 - let me just get rid of this padding so
600:01 - that we can have a better understanding
600:02 - of the space so when you use space
600:05 - between then then space is added between
600:09 - each item and they are laid out from the
600:12 - left to the right with equal space
600:15 - between them you can see here that as I
600:17 - change the size of the page space is
600:19 - added or removed between and all spaces
600:22 - equal okay then you have space
600:29 - around a space around is similar to
600:33 - space between but what you do is you
600:35 - take half of the space between and then
600:37 - you add it on the left and the right end
600:39 - as well okay so that is what space
600:41 - around looks like you can see visually
600:42 - that this space is about half of this
600:44 - space and that is why I removed the
600:47 - padding for now just so that we could
600:48 - clearly see these effects finally there
600:51 - is something called space evenly okay
600:54 - now space evenly as you can guess what
600:56 - it's doing is it's going to add the same
600:57 - amount of space on the left Edge on the
601:00 - right Edge and between items so slight
601:02 - differences between space between space
601:04 - around and space evenly depending on the
601:06 - use case you can use one of these or
601:09 - just do something else all together okay
601:12 - but for now let me bring that back to
601:13 - flex
601:15 - start and we can also see this effect on
601:18 - a flex Direction column so let's say we
601:22 - have the direction column and let's say
601:24 - we have a height of 250 PX
601:28 - here you can see that these are now laid
601:31 - out from the top I can do Flex
601:34 - end
601:39 - of course I can then do
601:40 - Flex
601:42 - Center and they are now centered so now
601:44 - the main axis is the vertical axis and
601:47 - in fact it starts from the top so the
601:48 - start is the top end is the bottom and I
601:51 - can do things like space around space
601:53 - between as well so this is space between
601:57 - that is flex Direction column so all of
601:59 - these properties work for Flex Direction
602:01 - row and
602:03 - column okay of that height
602:07 - all right so that is justify content
602:09 - splex Start Center and space around
602:13 - space between and space evenly and the
602:15 - same thing works for the column as well
602:17 - when you have a flex Direction column
602:20 - this is how the justify content values
602:22 - look very powerful property you will be
602:24 - using this a lot to create more complex
602:28 - layouts then we have align items so
602:31 - justify content was along the main axis
602:33 - so for FX row it was along the
602:35 - horizontal axis for Flex column it's
602:36 - along the vertical axis align items is
602:39 - used to align things along the cross
602:42 - axis okay so here is what that means
602:45 - let's say you have align items on you're
602:49 - setting align items on a parent where
602:52 - the flex direction is row let's look at
602:54 - an example of this let's just see this
602:56 - live let's set the height to 250 pixels
602:59 - again okay so the flex direction is row
603:03 - and I want to set the Align items
603:07 - property the default value is
603:10 - stretch and you can see that as I
603:12 - increase the height of this div from
603:14 - whatever was the default height to 250
603:16 - pixels everything stretched all of these
603:18 - inner divs all of
603:21 - these child divs they automatically
603:24 - stretch to take up the full height or
603:26 - the full space along the cross axis
603:28 - which is the vertical axis because the
603:30 - main axis is the horizontal axis but I
603:33 - could also do Flex start so align items
603:35 - Flex start so now along the cross Axis
603:39 - or along the vertical axis things are
603:41 - sticking to the start okay in the cross
603:44 - axis this is the start and this is the
603:46 - end so things are sticking to the start
603:49 - I could also maybe just stick them to
603:51 - the end so I can just say Flex end and
603:54 - now they are sticking to the bottom
603:56 - which is again the the main axis of the
603:59 - primary axis is horizontal so along the
604:02 - cross axis top to bottom they're at the
604:04 - bottom or at the end I can also align
604:07 - items Center of course and in which case
604:09 - they are centered here along the cross
604:11 - axis and notice how this is different
604:13 - from justify content Center which is
604:16 - going to Center them along the primary
604:19 - Axis or the main axis right so here is
604:21 - another trick if you just set align item
604:23 - Center and justify content Center then
604:26 - your content is centered vertically and
604:28 - horizontally on the page right as you
604:30 - increase or decrease the height it is
604:33 - going to be centered vertically and it
604:35 - is going to be centered horizontally as
604:36 - well so let's say if this was 300 pixels
604:40 - it would still be centered vertically if
604:42 - this was 150 pixels it would still be
604:45 - centered vertically so vertical
604:46 - centering can be achieved by using Flex
604:49 - Direction row and align item Center or
604:52 - by using Flex Direction column and
604:54 - justify content Center so there are both
604:56 - ways to achieve it but that is how align
604:58 - items and justify content play justify
605:01 - content plays along the main axis align
605:04 - items plays along the cross cross axis
605:07 - um what other options do we have for
605:08 - Align items well we have Flex start Flex
605:12 - end Center we obviously we looked at
605:14 - stretch which is the default
605:16 - value that there's also another specific
605:19 - align items property called
605:23 - Baseline which looks quite similar to
605:25 - start but here's the difference what
605:28 - this does is this aligns the Baseline of
605:30 - the text for each of the divs so if I
605:32 - were to go in let's say if I were to go
605:34 - in into item one
605:36 - and change the font size to 10
605:40 - pixels and if I were to go in into
605:43 - item three and change the font size to
605:47 - 30
605:48 - pixels this is what the content would
605:50 - look like so notice what's happening
605:52 - here because align items is set to
605:54 - Baseline the line that runs through the
605:57 - bottom of each line of text aligns
606:00 - perfectly now this is very different
606:02 - from
606:04 - doing align items X
606:08 - start which is going to just align
606:10 - things right at the very top or even
606:12 - doing something like align items
606:16 - Center which is going to just align the
606:20 - centers of the items and not the
606:21 - Baseline so a very special case you
606:23 - might not always need this but you can
606:26 - align by the Baseline if you need to if
606:28 - you have text of various sizes in a
606:31 - bunch of flex items okay so those are
606:34 - all the ways in which you can use align
606:35 - items and let us revert that for
606:44 - now and of course all of this works on
606:47 - Flex Direction column as well so here we
606:49 - have Flex Direction column let us
606:51 - increase this height to 250
606:56 - PX okay so here is flex Direction column
606:58 - so now the primary or the main axis is
607:01 - along the bottom along top to bottom so
607:03 - the cross axis is left to right right
607:05 - and now I could say Flex start to align
607:09 - things on the left and by default of
607:11 - course the value is stretch to align
607:15 - things to take up the entire space on
607:18 - the cross axis and of course I could
607:21 - also have align items Center in which
607:23 - case they will be horizontally centered
607:25 - this time because the cross axis is the
607:26 - horizontal axis and vertically they're
607:28 - still right at the beginning so remember
607:32 - that for justify content the default
607:34 - value is flex start which is right at
607:36 - the beginning but for Align items the
607:38 - default value is stretch which is to
607:39 - take up the entire space along the cross
607:42 - axis and of course I can do X end here
607:45 - as well and now along the cross axxis or
607:48 - the horizontal axis they show up on the
607:51 - right let's rever that so that
607:54 - was align items okay so on this is what
607:58 - it works on row this is how it works on
608:00 - column I know it's starting to get
608:02 - confusing practice and that is how
608:04 - you'll get it and of course you can
608:05 - always come back and refer to it you
608:07 - don't have to remember all of this
608:09 - perfectly okay just remember justify
608:11 - content is along the main axis align
608:13 - items is along the cross
608:15 - axis now you also have this special
608:18 - property called align self which can be
608:20 - used to change the alignment of along
608:25 - the cross axis of just a particular
608:27 - child okay so now we're looking at
608:30 - certain child level properties not the
608:32 - parent level properties so let's
608:33 - increase the height here once again
608:35 - again height 250
608:37 - pixels and by default everything has
608:40 - align stretch and let me just go in here
608:43 - and let me just set this to align item
608:44 - Center for
608:46 - now so by default all the Align all the
608:49 - items are aligned along the center and
608:52 - let me go in here into item
608:59 - one and for item one let me just set
609:02 - align align self so item one just by
609:06 - itself should be aligned to the start so
609:08 - Flex
609:09 - start now align items item one goes
609:12 - right right to the top at Flex start and
609:16 - I can then I can then align maybe item
609:18 - to align
609:21 - self to flex end now I'm pushing item to
609:25 - right to the very end of the Cross axis
609:26 - remember we still on the flex Direction
609:29 - row so the main axis is Row the cross
609:32 - axis is top to bottom and we can of
609:36 - course go ahead and for item three we
609:37 - can use LINE
609:40 - self
609:46 - stretch and now item three is stretching
609:49 - and item four can be aligned separately
609:50 - as well so you you can have a global
609:52 - setting for Align items and then you can
609:54 - override it using align self for each
609:57 - item as you need of course this works
610:00 - not just for column not just for row but
610:01 - also for column so here now what's
610:04 - happening is that
610:05 - we have this let me just get rid of the
610:09 - default get rid of all these for now so
610:11 - now we have the colum as the main axis
610:14 - so along the horizontal axis we have set
610:16 - to align items Center that's why they're
610:17 - all centered then if we change the
610:19 - setting for item
610:24 - one you can see that item one goes to
610:26 - the left because we are setting it to
610:27 - flex start item two goes to the right
610:30 - because we setting it a flex end so
610:31 - along the cross axis which is left to
610:33 - right it is going on the right right
610:35 - item three is stretching and item four
610:38 - is in the center which is the default
610:39 - setting that has been put
610:41 - in for the container okay so you can set
610:44 - a property for the container and then
610:46 - you can override it for these individual
610:48 - items now that makes sense for Align
610:50 - items doesn't make sense for justify
610:52 - content and I'll let you think about why
610:54 - okay for now let's get rid of
610:58 - this and let us just go back
611:02 - here to flex Direction row
611:09 - okay so that is align self you can use
611:11 - flex start or you can use flex end to
611:13 - move it to the end of the Cross axis you
611:15 - can Center it in the cross Axis or even
611:16 - stretch it or even align it to the
611:18 - Baseline you have all these options
611:20 - available to
611:22 - you
611:24 - okay next up there are also a couple of
611:28 - adjacent properties called align content
611:30 - and justify items I will not cover them
611:33 - here because they are not very commonly
611:35 - used I have almost never used them maybe
611:38 - once or twice but they are slightly
611:41 - different from align items and justify
611:43 - justify content so I will let you
611:46 - explore these on your own so check out
611:49 - the properties justify items and align
611:50 - content as you can imagine they might do
611:53 - alignment along the main axis and
611:55 - justification along the cross axis so
611:57 - you have those options as well and look
611:59 - up some tutorials to understand how they
612:01 - differ from justify content and align
612:03 - items or if you don't want to get
612:04 - confused us right now just skip these
612:06 - all together and just use the default
612:08 - justify content along the main axis and
612:10 - align items along the cross axis but if
612:13 - you want to you can experiment
612:16 - okay so those are some justification and
612:19 - Alignment properties so in most cases
612:22 - you will be working with flex Direction
612:24 - you will be working with flex wrap
612:26 - you'll be working with the Align items
612:29 - and justify content
612:31 - properties and sometimes you will use
612:33 - the Align self property on a particular
612:35 - child but then there are also certain
612:40 - Flex properties that you can set on
612:42 - children specifically to control how the
612:45 - various children take up space on the
612:47 - page okay and we're going to look at all
612:50 - of these properties they are called Flex
612:51 - grow Flex shrink and flex basis and then
612:54 - we are going to look at a shorthand
612:55 - property so that you never actually have
612:57 - to use all of these separate properties
612:59 - but it's useful to understand what they
613:01 - mean okay so the first property is the
613:04 - Flex grow property now notice over here
613:08 - if I get rid of the height notice that
613:10 - these divs are not taking up the entire
613:14 - space available these and let me just
613:16 - have three divs for now let's get get
613:18 - rid of the fourth div as
613:21 - well yeah so notice that these divs are
613:23 - not taking up the entire width on the
613:25 - page now sometimes you might want in
613:27 - maybe some kind of a sidebar layout
613:29 - where you have a left sidebar right
613:31 - sidebar and the middle item should grow
613:33 - to take up as much space as POS possible
613:35 - in such cases you can use the flex grow
613:38 - property so when you have some free
613:40 - space you can specify a flex grow
613:42 - property and by default its value is set
613:44 - to zero which means that you don't want
613:47 - a a you don't want one of the children
613:50 - to grow by default you only want each of
613:53 - the children to take up as much space as
613:57 - is
613:59 - required to display all of its children
614:02 - okay so for example right now to show
614:04 - item one one this is the only amount of
614:06 - space that is required but if let's say
614:08 - the text here was item one item
614:11 - one it would go it would take up twice
614:13 - the space to show the to show the
614:16 - content
614:18 - right however if let's say I wanted item
614:21 - two to take up all the space in between
614:23 - and item three to shift completely to
614:24 - the right then I could do something like
614:27 - this I could
614:28 - say for item
614:33 - two I could say item
614:37 - two Flex grow one now what I'm saying is
614:42 - that item two should take up how much
614:44 - ever space is available in
614:47 - between and you can specify any positive
614:49 - number here 1 2 3 4 and we'll talk about
614:52 - what they mean but as soon as as soon as
614:53 - you specify something other than zero
614:55 - item 2 starts to grow to take up the
614:57 - available space
615:00 - okay now let's say I wanted to do
615:02 - something slightly more complex let's
615:04 - say what I wanted to do was item one
615:06 - should take up maybe 30% of the space
615:09 - item three should take up 30% of the
615:11 - space and item four should item two
615:13 - should take up 40% of the space so it
615:15 - should always be if there is additional
615:16 - space available it should go 30 40 30
615:20 - okay and Let's do let's see how to do
615:22 - that so the way I would do that is
615:24 - simply by specifying those proportions
615:26 - for each item so for item one let us say
615:29 - Flex
615:31 - grow to be three and these are
615:34 - proportions so that's why I don't
615:35 - necessarily need to write 30 40 30 these
615:37 - are not percentages and item three will
615:41 - also be Flex
615:43 - grow now you can see this layout 3 43
615:47 - and maybe just to make it a little more
615:49 - pronounced you can look at maybe 2
615:52 - 6
615:54 - 2 and you can see that 20% of the space
615:57 - is taken up by
616:00 - item yeah 20% of the space is taken out
616:02 - by item 1 20% by item three and you can
616:05 - see that item two takes up about 60%
616:08 - okay you can also do something like 1
616:13 - 1 4 they don't have to add up to 10 or
616:16 - 100 or anything it's just that now you
616:18 - can see
616:19 - that the out of the additional space
616:21 - that is available 10% of the space is
616:24 - taken by item 1 10% by item three and
616:26 - the rest is taken by item two okay so
616:29 - what you're specifying is among the
616:31 - available additional space how much
616:34 - space should be taken up by each item
616:35 - how much additional space so these are
616:37 - not exactly in that proportion these are
616:39 - actually not exactly 1 is to 4 is to one
616:43 - because the base size is not affected
616:45 - and that is where we'll talk about Flex
616:47 - bases slightly down the line okay but
616:50 - grow
616:51 - tells Flex grow determines a flex item's
616:54 - ability to grow relative to other items
616:56 - within a flex container allowing it to
616:59 - expand and take up the available space
617:01 - so what you can do is you can say that
617:05 - out of all the additional space how
617:06 - should that space be distributed to each
617:09 - item and the by default it is zero so by
617:11 - default the additional space does not go
617:13 - to any item and as you start setting
617:15 - values for each item then by those
617:17 - proportions the space is distributed
617:20 - okay so that is flex
617:23 - grow next up we have something called
617:26 - Flex
617:27 - shrink okay now just as we have Flex
617:30 - grow we have the flex shrink property
617:32 - and the flex shrink property determines
617:34 - a flex items ability to shrink relative
617:37 - to other items within the flex container
617:39 - allowing it to contract and fit the
617:41 - available space so here is how it works
617:44 - let me get rid of flex grow settings for
617:46 - now let's just disable this disable this
617:51 - this okay so now let's say we had too
617:55 - much content here and we had to actually
617:58 - shrink things how can I do that well let
618:00 - me just add a bunch
618:03 - of space here okay so now there is now
618:07 - there is more space here and you can see
618:08 - that the text is wrapping onto the next
618:10 - line but if we wanted
618:12 - to if you wanted to shrink things a
618:14 - little bit then we would have to go in
618:18 - and set the shrink property let me set
618:20 - here Flex
618:24 - shrink and by default things shrink
618:27 - automatically so this is the default
618:29 - value so you can see that they have
618:31 - shrunk a little bit headily they should
618:33 - have been like this but they have shrunk
618:35 - a little bit they have shrunk a little
618:36 - bit
618:39 - because the the text has come onto the
618:42 - next line so there's definitely some
618:43 - shrinking that has happened right so
618:45 - shrinking is happening by default and
618:47 - they're going to shrink to their base
618:50 - size and they're not going to shrink
618:51 - beyond the base size by default but in
618:54 - case I set Flex shrink to one for one of
618:57 - them and then I set Flex shrink to
619:03 - zero
619:08 - for the others so I've set Flex string
619:10 - to one and flex string to zero you can
619:13 - now see that as I shrink
619:15 - it item one shrinks which is the default
619:19 - it tries to shrink so till it can no
619:22 - longer shrink Till There is no till it
619:24 - till the space of its children is
619:26 - completely taken up but item two and
619:29 - item three don't shrink because the
619:31 - shrinking is
619:33 - Con that's what happens and of course
619:36 - you can then shrink in proportions as
619:39 - well so let's say you set it up in such
619:41 - a way that each of these are taking up
619:43 - some additional space you have original
619:44 - size original size here and you then
619:46 - going to try to shrink them in a certain
619:48 - proportion so item one is going to
619:50 - shrink in a certain proportion item
619:51 - three is going to shrink in a certain
619:52 - proportion this will be clearer if we
619:54 - have more content here so let me just
619:56 - put some more content so that each of
619:58 - these can shrink
620:02 - independently okay now you can see that
620:05 - item one has shrunk significantly
620:07 - whereas item two and item three have not
620:09 - shrunk at
620:10 - all but let's say we want the shrinkage
620:13 - to happen in a certain proportion so
620:15 - then we could say that okay item one
620:17 - should shrink in the proportion of one
620:19 - item four two should shrink in the
620:22 - proportion of three so it should shrink
620:24 - 3x and item three should also shrink
620:27 - proportion one right you can now see
620:30 - that right now item two is shrinking the
620:34 - most whereas item one and item three are
620:37 - shrinking the least so what we are
620:38 - seeing here is that the decrease in size
620:42 - has to be distributed in the ratio 1 is
620:45 - to 3 is to 1 for the specific columns
620:48 - okay so that is flex
620:51 - shrink and then the
620:53 - final the final property is flex bases
620:57 - now the flex basis property
621:00 - decides what is the initial main size of
621:03 - a flex item before any available space
621:05 - is distributed and by default the flex
621:08 - basis is set to Auto which means that
621:10 - the initial main size of each child is
621:13 - determined by the item's own width and
621:15 - height which is basically the width and
621:16 - height of its content if it is not set
621:19 - okay however you can also say that the
621:22 - basis or the main size of a of a
621:24 - particular item is zero so let's see
621:27 - what happens when we do that let us
621:30 - set Flex basis to zero for all of these
621:38 - okay now when we set the flex bases to
621:40 - zero what we saying is that there is no
621:42 - basic size you can keep reducing the
621:45 - size
621:51 - and well I think I guess it's one
621:54 - probably yeah so by default Flex bases
621:57 - is set to Auto which means it takes up
621:59 - its default size and then Flex basis of
622:01 - zero says that there is no basis size
622:03 - and it can shrink as much as possible so
622:05 - in this casee you can see that item 1 2
622:07 - 3 are all shrinking as much as
622:11 - possible because we've not set a basis
622:14 - size so the basis size is just as low as
622:16 - possible right so by default there's no
622:18 - shrink there is no it is not going to
622:21 - take up any additional space than the
622:24 - minimum necessary space on the other
622:27 - hand and when Flex basis is zero shrink
622:29 - doesn't really make sense on the other
622:31 - hand we can add Flex grow
622:36 - and now what we're seeing is that they
622:38 - can grow to take up the additional space
622:41 - in the specified criteria so 1 is to 4
622:44 - is to 4 to take up whatever additional
622:46 - space is available Beyond a very basic
622:48 - minimum space okay so the interplay of
622:52 - flex basis Flex shrink and flex grow is
622:55 - what decides what happens in the default
622:58 - State what happens when you have more
623:00 - space available what happens when you
623:02 - have less space available okay
623:04 - but however most of the time you don't
623:06 - actually use these three properties you
623:08 - just use a basic value or you just use a
623:11 - simple Shand property called Flex okay
623:15 - so here's what you can
623:17 - do instead of saying Flex instead of
623:20 - saying Flex grow Flex bases
623:23 - Flex um shink Etc let's say I want the
623:27 - ratios to be 2 4 and four at least the
623:31 - ratio of the additional space and the
623:32 - shrinkage I can just specify something
623:34 - like this Flex 2 Flex 4 and flex Flex 2
623:39 - and now things are automatically scaling
623:42 - as I expect so there is the base size
623:44 - that still applies the very basic
623:46 - minimum base size so when you do Flex 2
623:48 - Flex 4 flex two what that means is
623:51 - you're saying that the flex grow value
623:53 - is two the flex shrink value is two and
623:55 - then the
623:56 - flex value is or the flex basis value is
623:59 - zero okay or the minimum possible space
624:02 - so normally you'll just end up doing
624:04 - this Flex 2 flexx 4 and Flex 2 or
624:06 - setting some kind of a proportion
624:08 - between these Flex
624:11 - items and that is how you'll use it but
624:14 - you have a bunch of different ways to
624:16 - use the syntax you can just set a single
624:18 - initial value you can set it to Auto you
624:20 - can set it to none which will just use 0
624:23 - 0 for 0 0 for each and you can just use
624:26 - a single value one value syntax like
624:28 - Flex one which is going to set it to 1 1
624:30 - 0 or you can use a two value syntax
624:32 - which is going to set it to one one and
624:35 - then maybe a specific base size a fixed
624:38 - base size or you can use a three value
624:40 - syntax which is going to use a certain
624:43 - percentage base size as well so you have
624:45 - a bunch of ways to set the flex property
624:48 - okay the most common use case of the
624:50 - flex property is something that I want
624:52 - to show you because Flex grow bases and
624:54 - Shrink i' I almost never use them
624:57 - because they're never layouts are never
624:59 - that complicated that you need to use
625:00 - all these properties but the most common
625:03 - layout that I use is that one of these
625:07 - needs to take up all the additional
625:08 - space and the rest of them do not need
625:11 - to take up the additional space so in
625:13 - that case I would do something like this
625:14 - I would just go in let me just reduce
625:16 - the content a little
625:20 - bit Yeah and let me reduce the padding
625:24 - here a little bit as
625:30 - well yeah so the most common use of the
625:33 - flex property which is the flex grow
625:34 - shrink and basis property is this you
625:37 - want item two to take up all the space
625:40 - in between no matter what the screen
625:42 - width is so I would just go in into item
625:48 - two and I would say Flex one and just by
625:54 - doing that just by setting Flex one item
625:56 - two takes up all the space in between
625:58 - not just horizontally but this can
625:59 - happen vertically as well so let's say
626:01 - we have display flex and flex Direction
626:08 - column and we have a
626:12 - height of 150
626:16 - PX or let's make that 250
626:21 - PX yeah so you can see here now we are
626:24 - taking up all the available space in
626:27 - this Direction all right and similarly
626:31 - one other use case you might have is
626:33 - that I want item one and item two to
626:35 - always have the same width so let me
626:37 - just go back to flex Direction row and
626:40 - let me just
626:43 - set item
626:45 - one f
626:47 - one let me just set this to flex 5 or
626:50 - something like a very high
626:53 - value and item
626:57 - three okay now you can see here that
627:00 - more or less item one item three are
627:02 - going to have similar wids and we don't
627:04 - necessarily have to achieve it by
627:05 - setting these Flex values we can also
627:07 - just do these in this way we can just
627:09 - say width
627:11 - 20% and width
627:17 - 60% and width
627:21 - %. okay so this is the actual real use
627:24 - case of the flex property or why we use
627:26 - flexbox because we want to achieve a
627:28 - certain set of wids this may be our main
627:30 - content this may be our left content
627:31 - this may be our right content all of
627:34 - that of course when we using the flex
627:36 - property under the hood it's it's using
627:38 - Flex bases Flex grow Flex um shrink and
627:42 - all that but I just use the flex
627:44 - property directly okay so experiment
627:48 - with the various options for Flex growth
627:50 - Flex strength Flex bases but don't
627:53 - stress if they don't make a lot of sense
627:54 - because there are certain edge cases
627:56 - certain special scenarios which you may
627:58 - not be able to keep in your head you can
627:59 - always just look them up the key is
628:01 - maybe just to use the flex property and
628:03 - try to get what you want and the most
628:05 - common use case is either setting Flex
628:06 - one to expand a certain div to take up
628:08 - all space or using Flex one on a couple
628:10 - of divs to maybe make them roughly equal
628:13 - width
628:16 - okay now flexbox has many applications
628:20 - in all kinds of web design as you can
628:22 - see for the New York Times website this
628:24 - kind of a layout is achieved and made
628:26 - responsive only using flexbox it is used
628:29 - to create responsive layouts it is used
628:31 - to create certain grid systems as well
628:32 - there's a separate layout called The
628:34 - Grid layout which we've not covered
628:35 - today we'll maybe try and cover at some
628:37 - point it is used to create equal height
628:40 - columns let's say you want to have maybe
628:43 - a bunch of uh cards showing side by side
628:46 - all of those cards should have equal
628:47 - height that is something that you can
628:50 - create using flexbox it is used to
628:53 - perform vertical centering let's say you
628:54 - want to center a div vertically on the
628:56 - page or vertically inside another div
628:58 - the way you do it is simply by setting
629:00 - Flex Direction columns justify content
629:02 - Center or Flex Direction row align item
629:04 - Center it is used for reordering
629:06 - elements sometimes on mobile you want a
629:08 - left to right a certain layout and on
629:10 - desktop you want a reverse layout so
629:12 - that's what you can use it for it is
629:15 - used for maybe showing image and text
629:17 - side by side it is used for creating
629:19 - responsive forms let's say you have a
629:21 - form where you have a first name last
629:23 - name an example of this can be seen on
629:25 - the Jovian
629:27 - website so you can see that first name
629:29 - and last name are side by side and then
629:31 - again you have email and then we have
629:32 - phone number and you have the country
629:34 - code and phone number side by side and
629:36 - then you have again the program so all
629:38 - of this is achieved using
629:39 - flexbox and it is used for ensuring
629:42 - spacing an alignment making sure that
629:44 - something takes up the entire space
629:46 - making sure that two divs are the same
629:47 - size and there are many tutorials you
629:50 - can go through the more practice you get
629:51 - with flexbox the better you will get at
629:53 - it specifically I would highly recommend
629:56 - the series of screencast by West boss
629:58 - called what the flex box it goes into
630:01 - each Flex property and then it shows you
630:03 - a bunch of specific scenarios as well
630:06 - and I would also highly recommend you to
630:08 - check out 30 days of flexbox which is
630:10 - again a series of tutorials that you can
630:12 - follow along day by day and there is
630:14 - just for reference there is this
630:16 - complete guide to flexbox that you can
630:17 - always check out this contains a bunch
630:19 - of visuals and it contains information
630:21 - about each property so that you don't
630:23 - have to remember this I always look this
630:25 - up I never remember this even after
630:26 - using this for probably 10 plus years at
630:29 - this point okay so it takes a while to
630:32 - get used to things in flex boox but once
630:35 - you do you can build pretty much any
630:36 - layout that you can imagine
630:39 - right so the last thing I'll say about
630:41 - flexbox is that it's powerful but
630:45 - because it is so powerful it is also
630:47 - somewhat confusing it takes a while to
630:49 - get used to it but don't give up don't
630:51 - run away from flexbox just limit your
630:53 - usage to basic Flex Direction Flex wrap
630:57 - and align items and justify content and
631:00 - maybe every now and then use the flex
631:02 - property so so let's now go ahead and
631:04 - redesign the Jovian Courier site so this
631:07 - is what it looks like on desktop I think
631:09 - it looks fine on desktop for now we
631:10 - don't need to really redesign anything
631:12 - here but we do want to redesign it on
631:15 - mobile because on mobile it definitely
631:17 - doesn't look good at all so we want to
631:19 - do something with the mobile design and
631:23 - we are going to follow these steps first
631:25 - we going to create a separate branch on
631:27 - our Cod space remember we don't want to
631:29 - affect the main side when we are making
631:31 - changes when we are experimenting so
631:33 - we're going to create a separate branch
631:34 - and test our changes there without
631:36 - affecting the main side then we are
631:38 - going to create separate wireframes for
631:41 - mobile and desktop
631:44 - screens then we are going to set up base
631:46 - Styles and media queries for a mobile
631:48 - first design then we're going to
631:51 - implement each section first for mobile
631:53 - and then for
631:54 - desktop then we're going to test each
631:56 - section at various widths and make
631:58 - required
631:59 - adjustments and finally we're going to
632:01 - create a pull request we're going to
632:02 - revie review that pull request review
632:04 - the preview deployment and then merge it
632:05 - back to the main site okay so our main
632:08 - site which is
632:12 - Jovian
632:14 - careers
632:17 - responsive Livewell DOA this is going to
632:21 - remain unchanged till we merge our pull
632:23 - request right so this is what the common
632:26 - practice is that you have the main site
632:27 - that is running then you create a branch
632:29 - work on your feature and once the
632:31 - feature is reviewed and tested and
632:33 - merged back then this will automatically
632:35 - get updated because versal will do an
632:36 - automatic deployment for okay so this is
632:39 - our main site we're not going to affect
632:40 - that but this is our preview site which
632:44 - we are looking at here let us just open
632:45 - up
632:49 - index.html with live server put that in
632:52 - here so this is a preview site let me
632:55 - just set it to default WID so this is
632:57 - what it looks like on desktop this is
632:59 - 100% width let me just open the same
633:01 - page up in in a couple of other browsers
633:04 - as well and I'm just going to select
633:08 - different devices in each case so here I
633:11 - want to study its width on
633:13 - the tablet let's say maybe a tablet
633:17 - would be about 700
633:21 - pixels the width a little bit
633:25 - here yeah so about 750 pixels I believe
633:29 - would be a tablet
633:31 - layout and let us also create a mobile
633:33 - layout here so we're going to look at a
633:35 - mobile layout as well so let's maybe
633:37 - design
633:38 - around
633:40 - 3 maybe around 400 pixels that is what
633:43 - most mobile layouts are around okay now
633:47 - we have for our code space for our
633:50 - index. HTML which is running using the
633:52 - live server extension so this is all the
633:54 - preview of what we are doing on our code
633:56 - space we have the mobile layout here we
634:00 - have the tablet layout here and we have
634:03 - the desktop layout here and we're going
634:05 - to start with the mobile layout we're
634:06 - going to do a mobile first design and
634:08 - then we're going to slowly improve that
634:10 - layout to account for tablet and desktop
634:13 - as well okay so we're going we going to
634:16 - use these break points under 576 is
634:19 - going 576 pixels is going to be a mobile
634:21 - layout so this is about 400 that's
634:22 - mobile under 768 pixels and above 576 is
634:27 - going to be a tablet layout I believe
634:29 - we've set this to
634:30 - about yeah we've set this to about 7
634:33 - let's set it to about
634:35 - 740 yeah so that's in our that's in the
634:38 - tablet range and we can always go left
634:40 - and right and we can shift things and
634:42 - greater than 768 pixels is going to be a
634:44 - desktop layout which is what this is and
634:47 - of course we can also then consider
634:48 - large desktops etc for now I'm simply
634:50 - not considering
634:52 - those okay so let's get started step by
634:56 - step
634:59 - slowly and before we proceed I would
635:02 - encourage you as you are reviewing this
635:04 - to pause take a few minutes to think
635:06 - about how you would design the mobile
635:09 - version of the jobian career site and
635:11 - take inspiration from the examples that
635:13 - we looked at earlier and maybe try to
635:15 - create a wireframe for the mobile
635:16 - version of the site on pen and paper or
635:18 - using a digital whiteboard like excal
635:20 - draw.com but here is a wireframe that we
635:23 - are going to be using now typically a
635:25 - design mockup that is given to you is
635:27 - going to be given for mobile tablet and
635:29 - desktop similarly we can try creating my
635:32 - frames from mobile tablet and desktop
635:34 - but just to keep things simple we just
635:36 - going to create a mobile wireframe and a
635:38 - desktop
635:40 - wireframe excuse me we're going to keep
635:43 - things simple use a mobile wireframe and
635:45 - a desktop wireframe and for tablet we
635:46 - will just approximate and maybe pick
635:48 - some elements from the mobile and somee
635:50 - elements from the desktop okay so for
635:53 - the desktop view we are going to use the
635:55 - same layout that we had earlier so which
635:57 - is the Jovian logo here at the top with
635:59 - the Jovian text then an image here the
636:03 - about Jan section the job opportunities
636:05 - table and the submit your application
636:07 - form and then there is a footer at the
636:09 - bottom with a bunch of options courses
636:11 - programs and
636:13 - YouTube for mobile here is what we are
636:15 - going to do we are going to use a Navar
636:18 - but in the nabar we're not going to show
636:20 - the entire Jovian logo we're just going
636:22 - to show the Jovian icon okay this is a
636:24 - common practice on mobile that you often
636:26 - just show the icon so I'll just show you
636:28 - an example of this let's say I go to
636:29 - jan.com
636:31 - learn zoom in here a little bit and if I
636:34 - go into the mobile view
636:36 - here you can see that at this point we
636:38 - only show the icon because we often have
636:40 - a bunch of things on the right as well
636:42 - this is the profile icon which also
636:43 - happens to be the Jovan logo but yeah we
636:46 - only show the icon on the mobile and we
636:50 - also maybe change the layout slightly on
636:52 - mobile as you can see on the Jovan
636:54 - platform as well okay so on mobile we're
636:56 - going to show the icon we are going to
636:58 - show the image but we probably going to
636:59 - reduce its height a little bit not to
637:02 - ensure that not to take up the entire
637:03 - page otherwise it might just take up a
637:06 - lot of space then we are going to have
637:08 - this about Jian section where we going
637:10 - to have this description and we are
637:11 - going to move the image below right so
637:13 - the image is going to remain below and I
637:15 - think I'll use the same layout for
637:16 - tablet as well then we are going to have
637:19 - job opportunities but this time for job
637:21 - opportunities we are going to
637:23 - use a list or maybe a bunch of divs so
637:26 - we are going to show these cards instead
637:28 - of actually showing a table because on
637:30 - mobile viewing a table doesn't make
637:31 - sense
637:34 - but on desktop you're still going to use
637:35 - a table so we're going to see how to
637:37 - achieve that then we have this layout
637:39 - for application so on mobile it's a nice
637:43 - idea to maybe just make all your inputs
637:45 - full width so just let them occupy the
637:46 - full width of the screen and uh we have
637:50 - this upload resume cover letter Button
637:52 - as well and finally for the footer we
637:54 - are simply going to show the options one
637:56 - below the other unlike on desktop we are
637:59 - going to show where we are going to show
638:01 - the options side by side okay and we'll
638:03 - decide how to change these layouts for
638:06 - tablet as well but these are the two
638:08 - layouts that we are working with okay
638:11 - and specifically the job opportunities
638:13 - table is going to be the real challenge
638:15 - because it doesn't have a table layout
638:16 - on mobile it has a list of
638:18 - cards and I encourage you to go ahead
638:21 - and replicate these wireframes on your
638:23 - own wireframing is a very useful skill
638:25 - for a web developer before you can go in
638:28 - and start coding the website you should
638:30 - have a very clear idea of how it's going
638:32 - to look at the very least using these
638:34 - rough
638:35 - wireframes and as I've said before we
638:37 - are going to follow a mobile first
638:39 - design which means we're going to first
638:40 - set up CSS styles for mobile section by
638:43 - section and then we are going to enhance
638:45 - the CSS styles for tablet and for
638:48 - desktop and maybe even for smaller uh
638:50 - for larger screens okay so for that here
638:54 - is how we can begin we can begin by
638:56 - commenting out all the existing CSS and
638:59 - just rebuild the page right from scratch
639:02 - and we'll just put in a bunch of media
639:04 - queries at the beginning okay so first
639:05 - let's comment out all the CSS let us
639:08 - open up styles. CSS here let us comment
639:12 - out all the CSS the way we'll do it is
639:15 - by adding this
639:16 - star/ star at the top and then adding a
639:21 - star slash at the
639:23 - bottom okay so you added SL star at the
639:26 - top and star slash at the bottom and now
639:28 - if we reload our Pages we can see that
639:31 - all the all the CSS is gone completely
639:34 - gone right so we have no Styles we're
639:36 - starting from scratch same content but
639:38 - no CSS this one image is looking really
639:41 - big so I'm just going to give this image
639:43 - a height explicitly in my index.html
639:46 - file I'm going to go into this
639:48 - index.html file and I'm going to scroll
639:51 - down and find this image a team image
639:54 - and I'm just going to give it a
639:56 - height of
639:59 - 100 just so that it doesn't mess up the
640:02 - ENT entire page when I'm setting things
640:05 - up all right so now we are more or less
640:07 - ready to begin we have this mobile
640:09 - layout top to bottom content we have
640:12 - this tablet layout and we have this
640:14 - desktop layout all right now let us
640:18 - first just bring in our media queries
640:20 - that we are going to use for
640:23 - each layout now the base Styles because
640:26 - we using a mobile first layout the base
640:28 - styles are just going to be added right
640:29 - at the top without any media query
640:31 - they're going to apply to all the
640:33 - screens and then what we're going to do
640:36 - is have this condition called whenever
640:38 - the width of the screen exceeds 576
640:41 - pixels then we want a certain set of CSS
640:43 - rules to apply right so we are going to
640:45 - then copy over this media query bring
640:47 - that in and that is going to handle
640:50 - tablets so more than 576 pixels that is
640:52 - going to handle tablets notice that it's
640:54 - going to apply about 576 and it's going
640:56 - to continue applying unless further
640:58 - overridden in a subsequent query okay
641:02 - this way we can avoid a lot of
641:03 - repetition instead of setting all the
641:06 - properties for each particular
641:08 - possibility okay then this is maybe
641:11 - going to be the second media query that
641:13 - we'll use which is for laptops or maybe
641:16 - desktop screens proper
641:18 - browsers so this is going to be medium
641:20 - devices or MD which is going to be above
641:23 - 768 pixels and then there are also maybe
641:27 - another couple of queries which we may
641:28 - not use but let's just keep them around
641:30 - what to do if it's even bigger if it's
641:32 - bigger than 900 pixels and if it's even
641:33 - bigger than 1200 pixels again we don't
641:36 - have to use these but if we want we can
641:38 - maybe increase the font size a base size
641:40 - a little bit or something like that all
641:43 - right so now our basic setup is ready we
641:46 - have this we have like basic CSS rules
641:49 - that are going to come here we are going
641:50 - to then add device specific or um
641:54 - progressively enhance our design to
641:56 - tablet and desktop okay looks
642:00 - good looks good the next thing to do is
642:03 - to just set up copy over some of the
642:05 - basic Styles without any media queries
642:08 - so I'm going to first come in here and
642:10 - I'm going to say that the font
642:14 - size the base font size on mobile is
642:18 - going to be not 16 pixels but 14 pixels
642:22 - I just want the font to be slightly
642:23 - smaller I don't want it to be too big on
642:26 - mobile because otherwise there may not
642:28 - be enough content on the screen to be
642:30 - readable so let me keep
642:33 - that and then let me come in here into
642:36 - body and let us come in and let us set
642:39 - the font size for the body to 1
642:43 - em 1 M okay that is going to be the font
642:47 - size for the
642:49 - body then let me come in and let me set
642:52 - uh apart from the font size for the body
642:54 - we've also set here that we've removed
642:55 - the margin padding all of this needs to
642:57 - go for mobile as well we have set the
642:59 - font family to Roboto and Sans siif and
643:01 - we've set the the body text color to
643:04 - 444444 okay great let us now set
643:08 - the font family and the font weight for
643:11 - our headers so we want the inter font
643:14 - family to be used and remember these
643:16 - font families have been included using
643:18 - these link tags you can see here that
643:20 - we've included the inter and the Roboto
643:22 - font family and their various weights so
643:24 - all of this is common all of this is
643:26 - going to be present on mobile tablet
643:28 - desktop that's why we just putting it
643:29 - completely outside okay
643:32 - so that's fine too then let us go in and
643:36 - let us set the font sizes for each
643:37 - header so remember we are using these
643:40 - Rams we're using RMS or relative
643:42 - measurements for the headers so that on
643:45 - mobile screens there are going to be
643:47 - multiples of or let's set this to one
643:49 - ram on mobile screens uh they are going
643:52 - to be multiples of 14 so on Mobile
643:55 - screen you can verify here if I go into
643:58 - effect and I check its computed
644:02 - font size you can see that it's 35
644:05 - pixels 35 is 2.5 * 14 okay but as we go
644:10 - onto bigger screens we're going to set
644:11 - the base font size to 16 pixels and so
644:14 - the header size is going to increase as
644:16 - well okay what
644:18 - else yeah I think that's what we've
644:20 - added so we've added
644:22 - HTML um body H1 H2 and let's add a
644:26 - couple more let's add the text color and
644:29 - let's add the the style for the link
644:32 - right now you can see that links are
644:33 - underlined I don't want that and I want
644:35 - links to be my brand brand blue color so
644:38 - that's where I'm going to go in and grab
644:40 - this decoration text decoration for the
644:44 - links let me put that in here as well
644:47 - okay so yeah so now you can see that if
644:49 - I reload the page our links have the
644:52 - desired color they don't have an
644:53 - underline and on clicking our links have
644:56 - the desired dark color or on our links
644:59 - have the desired dark color okay
645:03 - all right so now this is looking good so
645:05 - far we have set the base Styles let me
645:07 - just reload this
645:09 - page yeah we have set the base Styles
645:12 - now and of course it just spreads out um
645:16 - on tablet as well so there's nothing
645:18 - that really is changing across the
645:20 - different layouts the first change that
645:23 - I want to use is when we get to a tablet
645:26 - Style I want to use a slightly bigger
645:29 - font size for the body okay so within
645:31 - the media query where we hit a Min width
645:33 - of 576 I want to use a slightly bigger
645:36 - font size I'm just going to come in here
645:38 - and I am just going to use a bigger font
645:40 - size here so I'll just come into the
645:42 - First Media query which is over
645:46 - here and I'm going to put the font size
645:48 - of 16 pixels let's move these up let's
645:51 - keep all the base Styles right at the
645:53 - top so that things are well organized so
645:56 - these are the base Styles the base font
645:58 - size is 14 pixels no change here you can
646:01 - see that the base font size is 14 you
646:03 - can actually go in
646:04 - and check somewhere that the font size
646:07 - is 14 but as soon as we hit a bigger
646:11 - font size as soon as we hit a bigger
646:13 - screen as soon as we hit a Min width of
646:16 - 576 pixels the base font size changes to
646:19 - 16 pixels okay you can actually observe
646:22 - this change in the font size by just
646:24 - dragging this so
646:26 - 576 the text should become slightly
646:29 - bigger you can see here that the text
646:31 - became name slightly bigger and not just
646:33 - the text because we are using Rams to
646:36 - set the size of the headings you can see
646:38 - that the headings have become slightly
646:40 - bigger as well okay so this is one
646:42 - change that you will often see that from
646:44 - Mobile to tablet or maybe from tablet to
646:46 - desktop there will be a slight change in
646:49 - the font size of course you can go ahead
646:52 - and maybe change let's say you get a
646:53 - very big desktop a very big screen you
646:55 - can use the base font size of 20px let
646:58 - me just come in here and let me just
647:00 - show you what that would look like as as
647:01 - well see whenever we hit 1200 pixels I
647:04 - want to use 20 PX so so far it's 16 at
647:08 - some point it should
647:10 - become
647:13 - 20 okay maybe I'm still not hitting 1200
647:15 - pixels let's try that at maybe 992
647:21 - pixels yeah so you can see
647:24 - that it's small here so this is the
647:26 - tablet layout and at 992 pixels it
647:29 - becomes bigger
647:32 - right and then of course on mobile it is
647:34 - even smaller so you have all those well
647:37 - actually let's set that to 20 so at 992
647:40 - pixels it should become
647:41 - bigger yeah you can see that just around
647:44 - 992 pixels it starts to become even
647:47 - bigger right so
647:49 - at here this is mobile and this is
647:52 - tablet and this
647:54 - is the large desktop okay these are all
647:58 - the variations that you can check and
648:01 - sometimes you just have to inspect
648:02 - things visually and figure out if you're
648:05 - getting what you're going for okay all
648:08 - right so now we've changed the base text
648:09 - size and I encourage you to maybe change
648:12 - some other base styes maybe change base
648:14 - heading sizes as well and see what
648:16 - happens now the next thing we'll do is
648:19 - fix the nav bar okay so first let us
648:22 - implement the nav bar from for mobile
648:24 - let's bring this back to about
648:26 - 400 and let us go check the nap bar Okay
648:31 - so now the we need to bring in the basic
648:33 - nav bar Styles first so let's bring that
648:35 - in here the nav bar has a padding of 8
648:38 - pixels and a margin of 0 pixels so let's
648:40 - just bring that in I think we can keep
648:42 - that I don't think we need to change
648:43 - that at I'm just going to bring it all
648:46 - the way at the top you can see that our
648:48 - Navar is starting to look fine now one
648:51 - thing I want to do in my Navar is not
648:52 - use this entire logo but maybe use a
648:54 - smaller version of the logo that
648:56 - contains just this icon and not the text
648:59 - and for that I have already put up this
649:01 - this icon online so I can just use this
649:03 - link or I can download it drag it within
649:05 - my code space and add it to my
649:07 - repository both options are available so
649:09 - let me do one thing let me just add this
649:12 - icon into my code as well so let me just
649:15 - go
649:16 - IMG
649:18 - ID logo and I'm going to change the icon
649:22 - with the text to logo with text okay
649:25 - then alt
649:27 - equals Jian logo I'm going to change the
649:30 - alt of the existing IC on to Jo logo
649:32 - with
649:33 - text and let's specify an
649:37 - SRC and let us close
649:40 - it and I think we have a height 30 as
649:43 - well so let us set a height equals 30 as
649:45 - well I don't think we need to change the
649:46 - height
649:48 - particularly okay now we have both these
649:51 - images we have the icon image and then
649:54 - we have this logo along with the text
649:56 - now we want to show one of these on
649:59 - mobile and then on tablet let's I think
650:01 - we have enough space that we can show
650:03 - the entire logo with the text so here is
650:06 - how we can achieve this first we want to
650:09 - hide this icon we want to hide this icon
650:12 - we want to hide the logo with the text
650:14 - on mobile so by default I'm going to
650:16 - keep it hidden and the way to keep it
650:18 - hidden is let me just select logo with
650:20 - text so I'm selecting it with the ID and
650:23 - let me just set display
650:26 - none there it's gone the logo with the
650:29 - text is gone it's gone not just on
650:30 - mobile but it's gone on tablet and it's
650:33 - gone on it's gone on desktop as well now
650:37 - let me make this logo text visible on
650:39 - tablet so I am just going to go into the
650:42 - tablet style which is above 576 pixels
650:45 - or Min width of 576 pixels I'm going to
650:48 - say logo with
650:51 - text
650:53 - display I can just say I believe I can
650:55 - do lock which is the
650:58 - default now it doesn't show up on mobile
651:01 - which which is under 576 pixels but it
651:03 - does show up
651:06 - on yeah it does show up
651:09 - here on tablet and it does show up
651:13 - here on desktop as well okay but of
651:17 - course we also need to hide the logo we
651:20 - need to hide this logo icon so I can
651:23 - just also say over
651:25 - here
651:27 - logo display
651:29 - block on
651:31 - mobile and I can just
651:34 - say
651:37 - logo display
651:40 - none on tablets okay so on mobile I have
651:45 - the logo only the icon on
651:52 - tablets okay that should say none on
651:55 - tablets now I have the logo with the
651:57 - text and also on bigger screens I have
652:00 - the logo with the text so that takes
652:02 - care of the napar that is the change
652:03 - that I'm going for that is the change
652:05 - that we have on our website as well okay
652:08 - all right so the napar is taken care of
652:10 - and the only change we made is added
652:12 - this second image and we have added the
652:15 - base style where we putting the padding
652:17 - in the margin and we have put the logo
652:19 - with text as display none and we are
652:22 - showing it on tablets and desktops and
652:26 - we are not showing it on we not showing
652:28 - the icon alone on tablets and notice
652:30 - that once we apply for tablets because
652:33 - this is this only has a minwidth
652:34 - criteria not Max width it's going to
652:36 - apply at all bigger sizes if I want I
652:39 - can then go in and change it at a bigger
652:40 - size as well otherwise I can leave it as
652:42 - is so mobile first progressive
652:44 - enhancement section by section okay
652:48 - let's fix the banner image so the there
652:50 - are a couple of issues with the banner
652:52 - image one is that it's not taking up the
652:53 - entire width of the page and second is
652:57 - that I might need to limit the height of
652:59 - the banner image for each of the the
653:02 - wids that I'm working with okay and I
653:04 - want to do that let me just do that so
653:06 - the first thing I'll do is go into the
653:08 - banner image looks like it has a height
653:10 - let me remove the default height so that
653:12 - I can change its height based on the
653:14 - specific break points and let me come in
653:17 - here and let me just copy over some of
653:20 - the content that I already have for the
653:21 - banner so we have object fit cover this
653:24 - is to make sure that depending on what
653:26 - width or height we have it
653:28 - automatically fills the space the
653:30 - available space
653:31 - okay and here's the first thing I'm
653:33 - going to do I'm going to first give it a
653:35 - height of just 120
653:37 - pixels the banner image and I'm going to
653:40 - give it a width of
653:43 - 100% okay and I think that looks good so
653:46 - maybe 150 pixels let's see yeah that
653:49 - looks good so now on mobile this is what
653:51 - it's going to look like it's going to
653:53 - take up 150 pixels and it's going to
653:55 - take up the entire width of the page and
653:56 - it is going to cover so if we did not
653:58 - have object fit cover you can see that
654:00 - it stretch stretches the image which is
654:02 - not good I don't want to stretch the
654:03 - image especially if these are faces of
654:05 - people so always use object fit cover or
654:08 - sometimes you might need to use object
654:09 - fit contain if you want to if you want
654:11 - the entire image to fit inside which is
654:13 - not what we want here we want cover so
654:16 - let me just put object fit cover that's
654:19 - what this looks like okay perfect so
654:21 - that takes care of the banner on mobile
654:24 - but you can see that starting to get
654:25 - cobbed on lap on tablet and it'll get
654:28 - further cropped as I go bigger so on on
654:31 - maybe on tablets I can increase its
654:33 - height a little bit so I can say
654:36 - banner I can give it a
654:39 - height of 220 pixels how about that yeah
654:43 - I think that looks good maybe even 200
654:46 - pixels should do it I think that's good
654:49 - and
654:50 - then here again it seems to be getting
654:52 - cropped a little bit so I can come in
654:54 - and I can come in into the next design
654:57 - and this is the first time I'm touching
654:58 - the desktop design so far we've just
655:00 - been updating for tablet and that has
655:02 - carried over to desktop so here I can
655:05 - maybe give it a height of 240
655:07 - pixels maybe even 250 pixels this is now
655:10 - looking good okay so I should probably
655:14 - verify that this scales properly okay
655:16 - maybe I need to give it a little higher
655:18 - let's go 300 pixels yeah I think that
655:21 - looks good so far at this as well but if
655:26 - I wanted I could even just do something
655:28 - like 250 pixels here
655:31 - and then on even bigger screens I could
655:34 - just go in and I could just make that
655:36 - 320
655:38 - pixels okay so at some point it's going
655:40 - to become even
655:42 - bigger all right so that takes care of
655:45 - the banner I don't think there are any
655:46 - other changes required so we've removed
655:48 - the height property that was there on
655:50 - the image and we've actually set height
655:53 - specifically at various break points so
655:54 - it's going to start out with 120 pixels
655:56 - it's going to grow to 200 and then to
655:58 - about 280 pixels or so at a
656:01 - desktops so that was pretty
656:03 - straightforward let us now go ahead and
656:05 - let us now do the about section as well
656:07 - so this is the about Jovian section it
656:09 - has this H1 and then it has uh some text
656:13 - over
656:14 - here and then it has this image as well
656:17 - and what we want is if I go back to
656:21 - our layout we want the text to show up
656:25 - above the image still centered but on
656:29 - desktop we want them to show up side by
656:31 - side okay let's try and Achieve
656:35 - that so first thing I'm going to do is
656:37 - just copy over the styles for H1 so H1
656:39 - has textaline Center I that's good I'm
656:42 - just going to keep
656:45 - that okay but I feel that the space here
656:48 - above and below H1 is seems to be very
656:50 - high so I want to reset that I just want
656:53 - to say
656:54 - margin I just want to set the margin to
656:56 - 8
656:57 - px0 so just 8 pixels of space above and
657:00 - below should be good enough for me maybe
657:03 - I could go
657:04 - 12px yeah 12px looks fine but of course
657:08 - that may not look good on tablet and on
657:10 - desktop so I might then have to go in
657:13 - here and I might need to just put in an
657:16 - H1 margin let's say 16 PX on
657:24 - tablet and I might go in here in
657:27 - into desktop and I might set
657:31 - margin to
657:33 - 20px
657:37 - Z okay so it's about 20 pixels
657:41 - on the desktop which looks fine about 16
657:45 - pixels here on mobile on p on tablet
657:50 - that looks fine and about 8 pixels here
657:52 - and I can verify this I can click
657:53 - inspect and I can go in here into the
657:55 - computed Styles and make sure that it
657:57 - has the
657:58 - right believe
658:01 - 12 pixels is what we put here so 12
658:03 - looks fine okay so that's how you can
658:04 - progressively enhance spacing for the H1
658:07 - but otherwise this looks fine to me of
658:09 - course the H1 itself is also bigger
658:11 - because the base font size is bigger
658:13 - okay next up we have this about section
658:16 - which has the ID about and notice that
658:20 - we have set a don't need this notice
658:22 - that we have set a maximum width for
658:24 - this about section okay so we may not
658:27 - need this maximum width on mobile but it
658:29 - was it is still useful
658:31 - on tablet and on desktop so I'm going to
658:33 - keep it around so we want to use display
658:36 - Flex that that was for the horizontal
658:38 - layout and then we have given it a Max
658:41 - width of 800 pixels and we've given
658:43 - given it a margin zero Auto and we've
658:44 - given it an internal padding let's just
658:47 - check okay so now as soon as we did this
658:51 - you can see that here it has taken up
658:52 - some space and now it is showing things
658:54 - left to right here is what I can do now
658:57 - this is the benefit I get with flex I
659:00 - can just set Flex Direction
659:02 - column I can use flex Direction column
659:05 - so that things the first and the second
659:07 - section the description and the image
659:09 - show up one below the other and then I
659:11 - can go in and let me see what I want to
659:14 - do for tablet so for tablet as well I
659:16 - think I want to keep this layout but I
659:18 - want to limit the width to about 500
659:20 - pixels I don't want it to go all over
659:22 - the place so I'm just going to put in
659:25 - here Max width of 500 pixels so but on
659:30 - mobile and tablet it just uses 500
659:32 - pixels on tablet also this looks fine
659:36 - but definitely on desktop I want it to
659:38 - take up 800 pixels as it is available
659:41 - right so I'm going to go in and I'm
659:42 - going to say for the about
659:45 - section set the max width not to 500 but
659:48 - to 800
659:50 - pixels so now it's taking up 800 pixels
659:52 - and set the flex direction to row and
659:56 - not column so now it's going to show up
659:59 - side by side okay
660:01 - this is great but of course it's not
660:02 - taking up 50% of the space so I need to
660:04 - fix that as well so let's come back to
660:07 - the mobile view
660:10 - now there are two parts within about
660:13 - there is the description and then there
660:15 - is
660:16 - the yeah there is the description and
660:19 - then there is the image the team image
660:21 - so let's first get what we're doing here
660:24 - so for the description we have the width
660:26 - of 50% that we need to set only on
660:29 - desktop
660:31 - and we have a font size as well so let's
660:34 - just copy these over and let's try to
660:36 - fix them one by one so let's see here we
660:39 - are going to use the description we
660:42 - don't need withd 50% and we probably
660:45 - don't need the padding right but we do
660:46 - want the font to be 1.25 RM so I'm just
660:50 - going to come in here and I am going to
660:52 - go into maybe the large device because I
660:56 - think this still works
660:57 - for the tablet layout as well I'm just
661:00 - I'm just going to go into the large
661:02 - devices sorry I'm just going to go into
661:04 - the medium devices which is more than
661:05 - 768 pixels which is what this is and I'm
661:09 - going to add the width condition here
661:12 - under
661:15 - description okay let me add a width of
661:18 - 50% and let me add that padding right so
661:20 - that there is space between the
661:21 - description and the image and now you
661:23 - can see here that the description takes
661:24 - up half the space only on the laptop
661:28 - desktop and all the bigger screens it
661:31 - doesn't take up it takes up the full
661:32 - space on tablet and it takes up the full
661:35 - space on mobile as well and of course
661:38 - the flex direction also changes from
661:40 - column to row and that is why the rest
661:41 - of the space is taken up here by this
661:44 - image okay so the next thing to do is to
661:47 - fix this image so let's see we are going
661:50 - to get this image so we have this team
661:52 - div and it's currently configured to
661:55 - take up only 50% of the
661:59 - space and I I don't think that is
662:01 - necessary here so I don't think we need
662:03 - to take a 50% of the space here but I do
662:06 - like this
662:07 - border and looks like there is a height
662:10 - we have set so this height is probably
662:12 - coming from the HTML so I'm just going
662:14 - to remove this
662:17 - height so this is the team image I think
662:20 - this is looking good and this has the
662:23 - full
662:24 - width I if I want I could limit the
662:27 - height but I'm not feeling like it I'll
662:28 - just leave it as is I think this image
662:29 - is looking good I'll just leave it as is
662:32 - so it's looking good on mobile it is
662:35 - looking good on lapt on tablet as well I
662:37 - think on tablet too because we've
662:38 - limited the maximum width on tablet 2
662:41 - the team image is looking
662:44 - fine looks fine on tablet maybe we might
662:47 - need to configure like
662:50 - a might need to configure something to
662:53 - make sure that it is actually show up
662:59 - properly
663:01 - let's just give team a maximum width of
663:04 - or a width of
663:05 - 100%
663:08 - yeah still a
663:10 - bit still a bit problematic well so
663:14 - there may be some minor fix that may
663:15 - need that we may need to do at the very
663:17 - end and we'll inspect it and fix it but
663:19 - for now this is fine but where we really
663:21 - need to make a change is over here so
663:25 - let me do one thing let me just fix the
663:27 - height of the image as well so let me
663:28 - just fix the team image
663:30 - height to 240
663:36 - PX yes we don't need it I think this is
663:38 - fine yeah but now it is taking up too
663:41 - much space so we need to go in
663:43 - here and on the large desktop layout the
663:47 - team div should just take up a width of
663:52 - 50% okay all right so this is what we're
663:54 - going for we have the left half which is
663:57 - and of course the maximum width is 80 80
663:59 - pixels and it is centered vertically
664:01 - using margin zero Auto so that is all
664:03 - that is being
664:05 - done on the about section here margin
664:08 - zero Auto and Max width of 500 and then
664:10 - the max width is increased to about 800
664:12 - here the flex direction is row so that's
664:15 - why this is showing up like this side by
664:16 - side and the team image is has a width
664:20 - of 50% so that is looking fine
664:22 - too okay and it looks fine on mobile as
664:27 - well so mobile 2 this team image is
664:29 - looking good I don't see any problems
664:31 - here it looks fine on tablet as
664:36 - well more or less fine don't I don't see
664:40 - any major issues here we may have to
664:43 - make some change later on but otherwise
664:45 - this is looking fine now moving right
664:48 - along the next step for us is the jobs
664:52 - list so now we need to add a jobs list
664:57 - now if I go back
664:58 - here if I go back back here to our
665:01 - mockup on the mobile we have a job list
665:04 - so we have these cards and each card has
665:06 - a title and then each card has maybe one
665:09 - of
665:09 - these jobs listed right and on desktop
665:14 - we have a table how exactly do we
665:17 - achieve that we can do some kind of
665:20 - magic where we change the display type
665:22 - from div to table and all that but the
665:24 - simplest way to do it is to just show a
665:26 - list on mobile and hide it on desk toop
665:30 - and then show a table on desktop and
665:32 - hide it on mobile okay so here is what
665:35 - we are going to do we are going to first
665:39 - take a bunch of HTML so we're going to
665:41 - create a bunch of divs so we are going
665:43 - to create a div called jobl list and we
665:45 - are going to then have a bunch of divs
665:48 - each with the class job and then inside
665:51 - that div we going to have a bunch of
665:52 - divs each with the class job title for
665:55 - the title of the job and job detail for
665:58 - each detail within the job okay
666:00 - and of course I have the data for all
666:02 - four jobs here so these are the this is
666:04 - the same data that is present in the
666:05 - table but now I'm no longer using a
666:07 - table I am simply using a I'm simply
666:10 - using dibs not even a list and I can
666:13 - simply copy this so let me just take
666:15 - this so that I don't have to just type
666:17 - all of these jobs
666:21 - out yeah let me just take this HTML and
666:25 - I'm going to go put this into my
666:27 - index.html file right under
666:30 - or right above the jobs
666:32 - table okay so now I have this data of
666:38 - employment opportunities first let me
666:39 - change employment opportunities to job
666:41 - opportunities I think it looks better as
666:44 - job opportunities so now we have this
666:46 - job opportunities and I have a list of
666:49 - job opportunities which are just a bunch
666:50 - of divs and then I have the table of job
666:52 - opportunities as well and the list of
666:54 - job opportunities has the ID job list
666:57 - jobs list and the table has jobs table
667:00 - so as you can imagine what we can do is
667:01 - we can just set display properties for
667:03 - both of these to show and hide them
667:06 - respectively and while we at it let us
667:08 - also fix the display property for this
667:10 - H2 so let's go in here and let's go down
667:15 - first thing we'll do is for the H2 we
667:17 - are going to set text align Center so
667:19 - let's bring that up I think we are
667:20 - always going to have text align Center
667:22 - for H2 so let me just put that so that
667:25 - H2 has text line Center we may want to
667:28 - once again reduce the spacing above and
667:30 - below the hed2 um I'll skip that for now
667:33 - but I'll leave that as an exercise so
667:35 - use a smaller spacing on mobile and
667:38 - larger spacing on tablet and
667:40 - desktop respectively okay next up let us
667:45 - just figure out how to show and hide the
667:47 - job list
667:48 - so first of all the entire jobs div
667:52 - itself let's see if there is some
667:53 - setting for the entire jobs
667:57 - div yeah so the entire jobs div has a
667:59 - max Max width of 800 pixels so let's
668:02 - just take that and let us just put it
668:04 - here at the
668:06 - top okay so the entire jobs div on
668:10 - mobile just takes up the entire width no
668:12 - issue on tablet it takes up the entire
668:15 - width as well but we might want to limit
668:17 - it withd slightly you can see here at
668:19 - around
668:20 - 600 on tablet we might want to just
668:23 - Center it we may not want to just show
668:25 - it we may not want it to take up the
668:28 - entire space just like this content is
668:29 - centered we may want to center it so how
668:32 - about we use a Max width of 500 pixels
668:35 - just like that so that the content is
668:37 - centered on the tablet but then
668:41 - on desktop we want it to take up
668:44 - slightly more width right so this is
668:45 - going up to 800 pixel width so I'm going
668:48 - to come in into the desktop media query
668:51 - which is laptops desktops and which is
668:54 - above 768 pixels and for the jobs
668:58 - div I am going to set Min
669:02 - width of 800 pixels okay now you can see
669:06 - that it takes up 800 full pixels on the
669:09 - on desktop on tablet it takes up only
669:11 - about 500 pixels and on mobile it takes
669:17 - up the entire space available okay
669:20 - that's good Let Us Now set the display
669:22 - criteria for for both of these I'm going
669:25 - to go in and there is this jobs list
669:27 - that I have which I want
669:30 - to have display block by
669:34 - default and the jobs list the jobs table
669:39 - I want to set its display To
669:43 - None okay so now my job opportunities is
669:46 - visible here on mobile it is visible
669:50 - on tablet and it is not visible and it
669:54 - is visible on desktop as well and this
669:56 - is where I may need to change something
669:58 - so I need to change the layout here and
670:01 - I want to hide this and show the table
670:04 - so let us try and hide this and show the
670:06 - table well so if I go in into this
670:10 - layout above
670:12 - 768 I'm going to say jobs
670:15 - list display none remember the jobs list
670:18 - is simply the list of jobs that we have
670:20 - so that's gone and I can say jobs
670:24 - table
670:26 - display
670:28 - block okay now we don't actually want to
670:31 - use display block here the default value
670:33 - of display for a table tag remember jobs
670:36 - table is a table you can see here it's a
670:38 - table tag so if you just search default
670:41 - display value for table
670:44 - tag the default display value for the
670:47 - table tag
670:51 - is all right I'll just tell you the
670:54 - default display value for a table tag is
670:56 - actually table itself so we can we need
671:00 - to set display table here and when we
671:02 - set display table here what it does is
671:04 - that allows the table to take up the
671:06 - entire width of the screen um on most on
671:09 - most screens and that will happen once
671:11 - we add some of the other table Styles as
671:13 - well okay so just keep that in mind that
671:14 - the default display for a table a table
671:17 - tag is
671:19 - table all right
671:22 - well we are doing fine so far um we
671:27 - might need to copy in as soon as the
671:29 - table is visible we want to use it we
671:32 - want to set its display to use the
671:34 - entire
671:35 - width and yes we have a bunch of these
671:39 - settings as well so we have the Border
671:40 - setting we have the Border collapse
671:42 - setting and then of course all the table
671:44 - Styles can be incorporated directly into
671:47 - the media query where the table becomes
671:49 - visible let's capture all these table
671:52 - related Styles so this is used to set
671:54 - maybe the borders for each table cell
671:57 - this is used to set a bunch of other
671:59 - things now you can see here that our job
672:01 - opportunities table is showing up on
672:04 - desktop but it's not showing up on
672:06 - mobile it's not showing up
672:09 - on tablet and mobile and this is because
672:12 - jobs table we are setting its display to
672:14 - table we can also do block but you'll
672:16 - notice that in block it doesn't do what
672:18 - we want you can see that block is not
672:20 - what we want we want table because we
672:22 - wanted to use the entire available space
672:25 - okay so display table and below below
672:27 - the desktop screen width we have this
672:30 - display set To None right and of course
672:33 - we have this header row so we have
672:34 - colors for the header row we have a
672:35 - bunch of alignments then we have these
672:38 - alternate rows we have borders for these
672:39 - alternate rows that is something that we
672:41 - specify here we have a padding to space
672:43 - things out and for every alternate row
672:45 - we also have this background color that
672:47 - is done using the nth child all of this
672:49 - is covered in the previous tutorial okay
672:52 - all right we're getting there we're
672:53 - almost there now the only thing left for
672:56 - us to do is style this actual job
673:02 - opportunities this job opportunities div
673:05 - okay so let's try styling it quickly so
673:08 - the job opportunities div is this has
673:12 - each of these
673:14 - jobs has the class job so first I'm
673:17 - going to style the job class so do
673:21 - job and for the job class I am going to
673:24 - say let's look at mobile so I'm going to
673:27 - first give it a border so border one PX
673:30 - solid I'm going to use a light gray DDD
673:33 - DDD okay now they have a border then I
673:37 - am going to give it a margin top margin
673:41 - top 4 PX maybe even 8
673:45 - PX all right I'm going to give it a
673:47 - border
673:49 - radius of 5
673:51 - pixels okay that's nice now I have a
673:53 - rounded border I'm going to give it a
673:56 - padding of 8px let's see what that does
674:00 - okay that's looking good all right so I
674:02 - have these boxes now so these boxes are
674:03 - looking good then I have job title and
674:06 - job detail let me try and quickly style
674:08 - those as well so job
674:11 - title and job
674:15 - detail okay the job title is let me see
674:19 - font size let me give it a font size of
674:22 - 1.25 RM that it scales accordingly let
674:26 - me give it a font weight of
674:30 - 500 okay that's looking good let me give
674:34 - it a color of 22 22
674:39 - 22 okay color is looking good and then
674:42 - for job detail well let me just give it
674:44 - a margin top of four pixels just to
674:48 - space things out a little bit and let me
674:50 - give a color
674:52 - of be a slightly lighter color 55 55
674:56 - 55 okay that's looking slightly lighter
675:00 - okay I think that looks good so I have
675:02 - some job I have a border I have this
675:05 - radius around it I have this title I
675:08 - have U set up all of these details I've
675:11 - put in some space here as well and I've
675:13 - given it some weight so that's looking
675:15 - pretty good I think that's looking good
675:16 - on tablet as well and it is centered on
675:18 - the page and that is looking that's just
675:21 - not visible on desktop so with that we
675:24 - have completed the job opportunities
675:27 - section so you can see now we have the
675:30 - jobs list on mobile and tablet and the
675:32 - way we did that was first setting a Max
675:34 - width of 500 and then for job giving it
675:38 - a border border radius margin padding
675:40 - for job title increasing its font size
675:42 - for job detail increasing or making it
675:45 - lighter and then of course on the Min
675:48 - width of 768 we increase the max width
675:51 - of jobs so that it's a little bigger on
675:53 - desktop and we set the job list display
675:55 - to none for the job stable on by default
675:58 - we we set it display to none and once we
676:02 - reach that 768 width when we want the
676:04 - displayed we set it display to table we
676:07 - make it full width we give it a border
676:09 - border collapse and we give all those
676:12 - settings which are required to show the
676:13 - table properly okay all right we are on
676:17 - the last leg here let's go ahead and fix
676:18 - the application form as well the first
676:20 - thing I'm going to do is just pull out
676:22 - all these application form settings
676:24 - right all the way to the top so let's
676:26 - see have application form
676:29 - group form
676:32 - input all of that okay so how it works
676:34 - is we have this application div and
676:37 - inside this application div we have an
676:39 - application form which is a form with
676:41 - the IDE application form then each of
676:44 - these inputs and labels are together
676:46 - part of a form group okay so we're going
676:48 - to use all these Styles and we have a
676:50 - bunch of custom styles that we have set
676:53 - up for all of these so let us go in and
676:54 - do that let's see let's come in all the
676:57 - way to the top above any media queries
677:00 - and let us paste the Styles and this is
677:03 - what we end up with so now we
677:06 - have for the application itself the max
677:08 - width is 500 800 pixels so it takes up
677:11 - the full width which is not what we want
677:13 - let's set the max width to 500 pixels
677:16 - instead okay that's fine and now it is
677:20 - in line on tablet it is all centered but
677:23 - of course we can go in and on the
677:26 - desktop version we can increase the max
677:28 - WS so we can say hash
677:30 - application Max width to be 800 pixels
677:35 - so that on desktop it still takes up the
677:38 - entire width it's looking good I think
677:40 - the only change I'm going to make here
677:42 - it actually looks fine the only change I
677:44 - want to make here is maybe make the
677:45 - inputs full width so I am going to come
677:48 - in here I'm going to change this to form
677:51 - group because that is going to be more
677:54 - specific so in each form group I want
677:57 - the label to have have a certain I want
678:00 - the input to have the width
678:04 - of of about 80% let's say so that all
678:07 - the inputs are about 80% wide something
678:10 - like that maybe even 90% just going very
678:12 - close to full
678:14 - width yeah so I want all my inputs to be
678:17 - about 90% wide
678:20 - on mobile but as soon as I get to the
678:24 - tablet so on tablet I don't want it to
678:27 - be 90% wide so I'm just going to go in
678:29 - here on tablet I'm just going to
678:37 - set input select text area text area
678:40 - doesn't need to be modified I'm just
678:42 - going to
678:44 - set max
678:47 - width or width to be about to be Auto
678:53 - okay so on mobile it takes up about the
678:56 - full width and that's nice
678:59 - and on I can remove this with 80% here
679:04 - and set that manually here so do form
679:09 - group text
679:17 - area for text area we still want it to
679:19 - be a bit wide about 80% wide on even on
679:24 - tablet okay so on tablet what this is
679:27 - what it looks like the application look
679:28 - on application on mobile looks like this
679:30 - almost full width the application on
679:32 - tablet looks like this so it is not
679:34 - taking up the full width but it is still
679:36 - centered on the page along with the rest
679:38 - of the content and the application on
679:40 - desktop looks like it used to there's no
679:42 - change there okay so that's nice the
679:45 - final thing we need to do is fix the
679:46 - footer so we have a footer right at the
679:48 - bottom let's go ahead and fix the footer
679:50 - the first thing we'll do is just copy
679:51 - over all the existing Styles we don't
679:54 - need this H3 we don't need this apply
679:56 - I'll get r that so we just have footer
679:58 - quter links quter links Li and copyright
680:02 - that with that we've exhausted all the
680:05 - Styles yeah so we've carried over all
680:07 - the Styles so let me just go in right at
680:10 - the top before we create any media
680:12 - queries let's put in the footer Styles
680:14 - let's see what that gives us now we have
680:17 - a footer which has this background that
680:19 - we looking for and it has these links
680:22 - and it has this copyright all of that is
680:24 - good but on the mobile we want these
680:26 - links to show up one below the other
680:29 - and how do we do that well you see we
680:31 - have this display in line for Li I think
680:34 - we can get rid of this so the links are
680:36 - going to show up one below the
680:39 - other okay and looks like they're
680:42 - centered now but they're slightly off
680:44 - center so if I just inspect this list I
680:47 - can figure out why it is off center all
680:50 - of this seems to be centered but looks
680:51 - like this UL this um unordered list
680:54 - seems to have a padding on the left you
680:55 - see that green color thing that is just
680:58 - this padding on the left let's go into
681:00 - the footer
681:03 - links list and let us just set padding
681:07 - left to
681:09 - zero okay all right so that's what we
681:11 - have here we have this putter div then
681:15 - we have the footer links ul and then we
681:17 - have a bunch of Lis and that is now
681:20 - showing the Footers the footer items one
681:22 - below the other I may even add some
681:25 - margin bottom so I can say margin
681:31 - 4 PX and 16 PX so now I have a margin
681:35 - bottom so that they're slightly spaced
681:36 - out maybe even 8
681:41 - PX okay so this foter is looking
681:44 - nice okay let's see on tablet now on
681:48 - tablet this footer is probably not
681:50 - looking good I think I can just get it
681:52 - back to inline so on tablets I'm just
681:54 - going to come in here and I'm going to
681:56 - say fter link
682:00 - Li display in
682:03 - line and let's see okay so on tablets it
682:06 - is in line on mobile it is still one
682:09 - below the other this is what I'm
682:11 - expecting and on desktop it is in line
682:15 - perfect with that we have completed the
682:17 - footer so we've done the we've done all
682:20 - the sections I think all of them look
682:22 - good on mobile tablet and desktop so
682:25 - that's good we have done the changes to
682:28 - the application form the only changes we
682:30 - made was some width adjustments for the
682:33 - inputs and we have done the changes for
682:35 - the footer the only change we made was
682:37 - that we wanted to show them one below
682:38 - the other on mobile and side by side on
682:41 - desktop and again practice this work it
682:43 - out step by step that is how all of
682:45 - these steps will make sense we can now
682:47 - review and deploy these changes so what
682:49 - we're going to do is first we're going
682:50 - to create a branch just going to do that
682:52 - here by first opening the terminal so
682:55 - let's say five you terminal I'm going to
683:00 - first create a
683:01 - branch so let's do get checkout minus P
683:06 - minus B is a quick shortcut to create
683:09 - and check out a branch in one step and
683:11 - let me just call
683:12 - it responsive
683:15 - layout okay now we've switched to a new
683:17 - Branch we've created a new branch and
683:19 - switched to it you can see we are on the
683:21 - branch responsive layout now I'm going
683:23 - to do git add dot I'm going to review
683:26 - the changes using git status you can see
683:27 - that above bunch of new files have been
683:29 - added there's a settings. Json as well
683:32 - not sure what that's for but it's okay
683:34 - then I'm going to do get add okay I'm
683:36 - just going to do get commit minus
683:39 - M added responsive
683:43 - layout now we've committed it normally I
683:46 - would commit after every section and
683:48 - keep updating my poll request but just
683:50 - for now just for example I'm doing that
683:53 - then let me do get push origin
683:57 - responsive layout okay so we stage the
683:59 - changes using git ad we then commit the
684:01 - changes using git commit and then we
684:03 - create uh push that Branch to GitHub
684:07 - using get push origin Branch name okay
684:09 - now we can create a pull request so
684:11 - there's actually a
684:13 - helpful there's actually a helpful link
684:16 - here that U that is printed out for us
684:19 - but we could always just go on the
684:22 - repository page and on the repository
684:25 - page you can see that GitHub tells us
684:27 - that a responsive layout branch has just
684:29 - been pushed and we can create a pull
684:31 - request so here's what we can do we can
684:33 - say added a responsive layout for the
684:35 - job page and I can mention
684:39 - changes and I can just bring in the
684:41 - changes that I've made here so let's see
684:46 - navbar has
684:50 - a logo without
684:55 - text then Banner size is
685:01 - updated based on
685:03 - screen then about section is vertical
685:09 - first then
685:13 - horizontal and then we have the jobs
685:17 - list
685:18 - [Music]
685:19 - on mobile and
685:23 - tablet and table on
685:26 - desktop what else application form full
685:31 - width inputs on
685:34 - mobile and uh
685:37 - vertical putter items on mobile okay
685:40 - just a short description of the changes
685:42 - and we can create this pull request and
685:45 - now you can see that our Joven careers
685:47 - responsive site which is our initial
685:52 - website
685:54 - Jian careers
685:57 - responsive doval
686:00 - doapp live doval
686:03 - doapp this is still not updated this
686:05 - still has the old design in fact I can
686:07 - go in into inspect I can verify this
686:10 - that it's still trying to show the table
686:12 - it's still trying to show things side by
686:14 - side but now you can see that in this
686:17 - particular pull request verel has
686:19 - created a preview deployment so I can
686:20 - visit this preview deployment this is
686:22 - just for this branch and you can see
686:25 - that on this preview
686:26 - deployment if I go
686:29 - inspect we have our new layout so this
686:33 - is what you want to do your main website
686:35 - is Asis no changes there but on your
686:37 - pull request you've made all these
686:39 - changes on your branch and you can test
686:41 - it out so somebody who is looking at
686:42 - your branch can first look at the
686:44 - preview deployment and the maybe the
686:45 - designer can take a look and tell you
686:47 - okay maybe you need more space about
686:48 - submit application maybe there is some
686:50 - change to be done in job opportunities
686:52 - maybe the footer is not looking nice let
686:54 - me rework that a little bit you can also
686:56 - maybe just see how things change you can
686:58 - see that okay job opportunities takes up
687:00 - the full space then it scks to around
687:03 - 500 pixels then it suddenly expands and
687:06 - now when it expands here you get this
687:08 - two column layout and here you get this
687:09 - table and that is looking rather nice
687:13 - and the application also expands
687:15 - accordingly so the designer or maybe
687:17 - another developer can review the changes
687:19 - visually by looking at the preview they
687:22 - can also review the changes manually so
687:24 - they can go in and they can actually
687:27 - check in each section okay looks like
687:30 - we've added a displayed or HTML file
687:32 - they can tell you maybe we don't need
687:33 - this displayed or HTML file get rid of
687:35 - it um we don't need this flexbox or HTML
687:38 - file so you can go and delete those
687:39 - files and update your pull request and
687:42 - okay they can see see a splits so
687:44 - there's a split view available as well
687:45 - let me
687:47 - just split
687:51 - view yeah you can see a split
687:55 - view yeah so they can see here the
687:58 - changes that have been made that you
687:59 - have added this jobs list as expected
688:02 - and you've not modified any other HTML
688:04 - except adding the job list and changing
688:05 - the title here they can see here that
688:07 - you've added a a bunch of Base styles
688:09 - for mobile and you've made it 14 pixels
688:11 - you've not changed a lot else maybe a
688:13 - few things here and there and they can
688:15 - give you inputs on specific things they
688:17 - can give okay this doesn't look right
688:20 - and they can comment it and then you can
688:22 - revise those comments and P pull your
688:24 - branch again and so on and they can see
688:26 - that okay now you've added a bunch of
688:28 - these media screen uh settings and all
688:30 - so this is a good way for you to even do
688:32 - a self- review before you merge your
688:34 - changes to master and once the changes
688:37 - are approved then you can go in and you
688:41 - can get an approval and then you can
688:42 - merge this pull request to master okay
688:45 - now as soon as the pull request is
688:47 - merged to master what verel is going to
688:49 - do is it's going to pick up the new
688:51 - changes from the master branch and it's
688:53 - going to create a new deployment you can
688:55 - check this on ver.com
688:58 - that it is going to create a new
688:59 - deployment just now you can see here
689:01 - that's creating a new
689:03 - deployment uh created just now by syy
689:06 - Jovian and now if I reload the page
689:08 - notice that I'm on the deployed main
689:11 - branch Jovian careers responsive live.
689:13 - app.app and I reload the
689:17 - page and the layout is fixed this is the
689:20 - layout now the main page has gone live
689:22 - so this is the workflow that you need to
689:24 - get used to create a branch do your work
689:27 - test it out in a preview deployment and
689:29 - then merge it and then your layout is
689:31 - going to be fixed now we've created a
689:33 - responsive design just like that and
689:35 - that is something that you're going to
689:37 - experiment with in your next assignment
689:39 - okay so we staged and committed the
689:41 - changes pushed the changes to GitHub
689:43 - reviewed the code test at the preview
689:45 - deployment made some if we can required
689:47 - we can make some final adjustments
689:49 - iterate on it and then the pull request
689:51 - can be merged to the main branch and it
689:53 - gets deployed and this is the final
689:55 - mobile layout I think this looks pretty
689:58 - good it's everything is readable
690:00 - everything takes up sort of the full
690:02 - width this is the final tablet layout so
690:04 - we're centering the content on the page
690:06 - to about 500 pixels we're limiting its
690:08 - width so that things are still readable
690:10 - and this is the final desktop layout
690:12 - notice that we did not have wireframes
690:14 - for tablet but we just use some
690:16 - components from this side and some from
690:18 - that side to build it and as an exercise
690:22 - try adding more sections to the site try
690:23 - to implement them using a mobile first
690:25 - responsive design try creating a
690:27 - separate wireframe for the tablet
690:28 - screens and make changes to the page to
690:31 - implement
690:34 - it and then one other thing we we did
690:37 - not look into was the media type print
690:39 - what happens when you try to print this
690:41 - page so you can do that by trying to do
690:44 - command p and then trying to save it as
690:46 - a PDF and you'll see what your page is
690:49 - going to look like okay so by default it
690:52 - just picks up whatever is going to show
690:54 - up on the screen but for a print out you
690:56 - may need to do a separate layout and
690:58 - that is something that you can
690:59 - experiment with u that is something that
691:02 - you can experiment with the media print
691:03 - query okay so that's everything for
691:06 - today uh we looked at how to use CSS
691:09 - media queries and breakpoints to
691:10 - implement a mobile first responsive web
691:12 - design we looked at how to leverage
691:14 - various CSS properties uh specifically
691:17 - flexbox to build fluid and dynamic
691:19 - layouts needs a lot of practice so we
691:21 - will use flexbox extensively over the
691:24 - next several months so don't worry
691:25 - you'll get enough practice we looked at
691:27 - to create separate wireframes or design
691:29 - mockups to determine the layout of a web
691:31 - page at various breakpoints you always
691:33 - always should separate the design and
691:35 - the implementation don't try to do them
691:36 - both together you will get stuck we
691:39 - looked at implementing testing and
691:40 - deploying a responsive website using CSS
691:42 - media queries and
691:44 - flexbox the best way to learn these
691:46 - skills is to follow along step by step
691:48 - and type out all the code yourself and
691:50 - you can check out the completed code
691:51 - here using these links I have included a
691:54 - ton of resources here the idea is not
691:56 - that you need to go through through all
691:57 - of these resources right now a few I
692:00 - would recommend though is a responsive
692:02 - web design or media queries tutorial on
692:05 - CSS tricks the video course by vest boss
692:08 - on what the flexbox but there are a
692:10 - bunch of others no matter what you are
692:12 - feeling under feeling scared about or
692:15 - not confident about or doubtful about
692:18 - check out one of these resources you
692:19 - should be able to figure it out if one
692:21 - of the concepts that we covered today
692:22 - did not make sense and that's it so in
692:25 - this assignment two uh you will
692:27 - implementing a responsive web
692:30 - design using CSS media queries and
692:33 - flexbox so the figma mockups are already
692:36 - provided to you uh let's quickly go
692:39 - through the
692:40 - mockups so in these mockups uh there are
692:44 - three layouts uh for desktop tablet and
692:47 - mobile and on the desktop
692:50 - view there is a nav
692:53 - bar with the logo of the company and and
692:57 - some graphics some title subtitle and
693:01 - learn more
693:03 - button and on the tablet and mobile view
693:06 - also there is similar layout but the
693:10 - Navar is different it is
693:13 - not completely visible it is in the
693:16 - collapse
693:17 - mode and below the hero section we have
693:21 - the newest read
693:23 - section which is uh a card layout and on
693:28 - the
693:29 - desktop uh there are three cards in a
693:33 - row and similarly on the tablet also
693:36 - there are three cards in a row but on
693:39 - mobile we can see that the layout is bit
693:41 - different so it is having a column
693:45 - layout so you will need to use some Flex
693:49 - properties maybe to design
693:51 - these uh layouts for different devices
693:55 - and inside the card if we zoom in we
693:57 - have few more elements the image for the
694:02 - article the date of
694:05 - publish and the title and read more
694:08 - link so this is how the assignment 2 is
694:12 - looking uh the steps to proceed with
694:15 - this assignment are already mentioned
694:17 - and I hope you guys have already started
694:20 - on
694:21 - that so coming to today's session today
694:25 - we are going to build
694:28 - a responsive web page using flexbox and
694:31 - media queries so following topics will
694:34 - be covered in today's
694:36 - tutorial so we will be designing a
694:39 - responsive layout using CSS media
694:41 - queries then we will understand what are
694:44 - selectors in
694:46 - CSS and how to calculate Dynamic width
694:49 - for particular uh elements using CSS
694:54 - function and using the Box Shadow
694:56 - property
694:58 - so the prerequisites for today's session
695:00 - are you should be aware about basic HTML
695:04 - and
695:05 - CSS and uh you should know how to create
695:08 - a GitHub repository and the envirment
695:11 - that we are going to use for today's
695:13 - session is vs code and we will be using
695:17 - the cloudbased vs code that is the code
695:19 - spaces which is provided by
695:22 - GitHub so as a part of Designing a web
695:25 - page we are going to design a responsive
695:28 - block page which will make use of media
695:32 - queries flexbox layout and the design
695:36 - mockup and data is provided for
695:38 - you so let's go through the mockup
695:41 - quickly so this is how the layout will
695:44 - look on mobile uh it will have a page
695:48 - title and uh it has the cards which are
695:52 - stacked vertically so this is basically
695:54 - a column layout you can see and on
695:58 - tablet we can see that the card layout
696:00 - is almost similar but the uh method of
696:04 - rendering is different so we can see
696:07 - that on the tablet there are two cards
696:10 - in a row and for desktop it will be
696:13 - three cards in a
696:15 - row so this is the mock data that we
696:18 - will be using for uh our today's
696:23 - session so first let's quickly recap
696:25 - about uh what is responsive design so
696:29 - responsive design is an approach which
696:32 - ensures that our websites will look
696:34 - correctly and adapt to various different
696:36 - screen sizes devices and
696:39 - orientation so it will optimize the user
696:42 - experience by making the content more
696:44 - visually appealing so you can see from
696:47 - this image that this is some example of
696:50 - the mockup so on mobile it is vertically
696:54 - aligned and when it when we change the
696:57 - device it automatically gets aligned uh
697:00 - to some different layouts and it gets
697:02 - scaled on higher devices so there are
697:05 - few key principles that we should be uh
697:10 - aware about responsive web design first
697:12 - is the website uh layout should be
697:15 - flexible it should not be fixed sized
697:18 - like the width should not be given in
697:20 - pixels if we resize the screen it should
697:24 - get Scaled
697:25 - accordingly next is the flexible images
697:29 - so images have their own size and when
697:31 - we import the external images they
697:34 - render directly if we don't specify the
697:37 - width and the height
697:39 - separately and it might happen that the
697:42 - image can overflow uh of the screen
697:45 - width so to ensure that this doesn't
697:48 - happen we should be using some CSS
697:51 - properties so one is the max width that
697:54 - will ensure that our image is within the
697:57 - the screen width and other is the object
697:59 - fit that you might have already used in
698:02 - the previous lectures so that is used to
698:05 - maintain the aspect ratio of the image
698:07 - and it makes ensure that the image
698:10 - doesn't get
698:12 - stretched so we will be using that
698:15 - today third thing is the media queries
698:18 - which allows uh us to write various
698:21 - Styles based on the layout uh of the
698:25 - device so we can specify various device
698:28 - properties like width height and
698:31 - orientation and write the styles for
698:34 - that particular uh
698:36 - query fourth is the mobile first
698:39 - approach so this approach tells us that
698:43 - we should start designing our web page
698:45 - from mobile devices and then
698:47 - progressively enhance to the larger
698:50 - devices like tablet and desktop so this
698:53 - approach has gained popularity because
698:55 - of the number of users of uh mobile
698:57 - devices compared to other
699:00 - devices so the next concept uh is the
699:03 - breakpoints that is also important in
699:07 - responsive web design so breakpoints in
699:10 - CSS are specific points or conditions
699:14 - where the layout or styles of our web
699:17 - page are going to change and accommodate
699:20 - to different screen size these break
699:22 - points are generally used along with the
699:24 - media queries so what is Media query
699:28 - exactly so media query is the statement
699:31 - that allows us to write a specific set
699:33 - of CSS rules when certain conditions are
699:37 - made so these conditions are based on
699:40 - the width height and orientation of the
699:43 - device so let's see few examples quickly
699:47 - so in this example one we have a uh
699:50 - media query which says that uh it should
699:54 - apply to the max width of 600 p X so
699:58 - whatever Styles we will write inside
700:01 - this block will apply to all the devices
700:04 - whose width is less than or equal to 600
700:07 - PX and this example tells us that we can
700:11 - also specify mean width and Max width
700:14 - together so this Styles will apply for
700:16 - all the devices whose width is between
700:19 - 320px to 600 PX and third is the
700:22 - minwidth which will apply all the styles
700:27 - for the
700:28 - devices which whose width is greater
700:30 - than or equal to 600 PX so we can use
700:34 - any arbitary width and height for
700:36 - defining these media queries but there
700:39 - but there are few standard break points
700:41 - that are generally followed based on the
700:43 - device types so for mobile the width of
700:47 - the device should be less than 576 PX
700:51 - and tablet which is the SM device uh it
700:55 - ranges from 5 76 PX to 768 PX and
701:00 - desktop ranges from 768 to 992 and there
701:04 - are also higher resolution devices uh
701:07 - which we call it call large desktop
701:10 - whose sizes are greater than 992
701:13 - PX so let's get started with the coding
701:16 - part so we will be using uh GitHub code
701:20 - spaces so we will be needing one GitHub
701:24 - repository so I have already created a
701:27 - repository here and to run in the code
701:30 - spaces you just have to click on code
701:33 - and click create code space on Main
701:35 - which the main is the branch of our
701:39 - repository once you click
701:41 - that it will open a new tab and you will
701:46 - get a vs code Cloud interface and it
701:49 - should load in couple of
701:55 - seconds
701:57 - yeah so it is loaded and on the left
701:59 - side you will see the list of files uh
702:03 - so we are having a readme file
702:05 - here and uh we we are not going to use
702:08 - the terminal so I will close
702:11 - it and let's quickly write our first
702:15 - file which is
702:23 - index.html so we will add some basic HT
702:26 - ml code that is required for every HTML
702:29 - document we write so we declare the doc
702:33 - type then the HTML tag inside this HTML
702:37 - tag we will be having a head tag inside
702:41 - head tag we require a title
702:43 - tag and let me give the title my
702:47 - blog hey Ashish can you zoom in a bit
702:55 - yeah a
702:57 - little yes
703:02 - okay yeah so apart from head tag we also
703:06 - need a body
703:08 - tag and let me add a H1 tag here which
703:12 - will be the page
703:14 - title
703:20 - and all right so we have written the
703:23 - basic HTML file and to run this file we
703:28 - will need some
703:30 - extension that is live server and it can
703:33 - be found in the extensions tab so there
703:37 - is the extension live server uh by R day
703:41 - we can install
703:47 - that yeah once it is installed you will
703:50 - see this go live
703:53 - option
703:55 - uh yeah so you will see the go live
703:58 - option at the right bottom you can click
704:02 - on
704:03 - this and it will start a server and it
704:07 - will it should open in the new
704:09 - tab the uh HTML page that we just wrote
704:14 - so we are able to see welcome to my
704:18 - blog now let's add some uh CSS Styles so
704:23 - we will be using external CSS
704:25 - file and and uh we will create one file
704:29 - uh which is base.
704:41 - CSS so this base. CSS uh will contain
704:45 - all the code that is required
704:47 - to be applied to all the basic HTML tags
704:52 - so this is important to be consistent
704:54 - across various browsers because various
704:57 - browsers have their inbuilt style that
704:59 - is auto applied to all the tags so for
705:02 - example on this Blog Page we haven't
705:05 - specified any font or any font size so
705:10 - it is automatically given by the browser
705:13 - so I will just copy these styles from
705:16 - The
705:25 - Notebook and put it into this base. CSS
705:29 - file and uh we can import this file
705:33 - using link
705:44 - tag should be Styles
705:49 - and HF should be base.
705:55 - CSS
705:56 - yeah so uh the file is loaded correctly
706:01 - and we can see that the font is now
706:03 - changed to Sans ser and also the uh
706:08 - title is centered to the
706:11 - page now the next thing we will do we
706:15 - will create one more file which uh we
706:17 - will call styles.css
706:20 - so in this base. CSS file you can see
706:24 - that there is no code related to our
706:28 - blog page design so we will create one
706:32 - more file styles.css
706:34 - to write all the
706:37 - application specific code it's not a
706:40 - mandatory thing but to keep things more
706:42 - organized and to keep our Styles more
706:44 - organized we can create one more file
706:47 - and it can be similarly imported the way
706:50 - we have imported the base. CSS
706:55 - file
707:00 - all
707:06 - right so there is one more important tag
707:09 - that is required to make our web page
707:13 - responsive and that tag is the meta tag
707:17 - which has the proper attribute of name
707:20 - viewport so we also need to add this to
707:23 - the Head
707:25 - tag
707:34 - all right so we are set up with
707:38 - our uh environment and the basic HTML
707:42 - and the files which we will be working
707:45 - on today so
707:49 - the basic part of today's mockup is this
707:52 - block card which is going to be
707:56 - consistent across all the layouts that
707:59 - we have seen in the
708:01 - mockup so inside this block card we can
708:05 - see that there is one image one title
708:09 - author publish date and
708:12 - likes and I'm able to see that there is
708:15 - some spacing around the content so maybe
708:19 - I will have to use some padding
708:22 - left and uh that needs to be applied to
708:26 - all the content
708:29 - so that is one way other way I could
708:33 - think of this is adding one outer
708:36 - div which will contain the title author
708:40 - and
708:41 - likes so let's add
708:44 - this HTML
708:48 - code me quickly resize this a
708:55 - bit
709:14 - all
709:22 - right so let's add a d with which uh
709:26 - will be our for the block
709:33 - card and inside this block card we will
709:37 - require one
709:39 - div which will have the image for our
709:51 - block and
709:55 - uh
709:58 - for the title we can use the div also
710:01 - but I will use
710:05 - H2 because it is the second uh prior
710:09 - title after the page
710:11 - title so I will give it a class name
710:15 - block card
710:19 - title we will fill in the data
710:23 - shortly and after the title till we
710:28 - have uh the author and the publish
710:32 - date so maybe we can put this
710:36 - information in a single div because it
710:39 - is horizontally
710:42 - aligned so let me add a div for
710:47 - that with the
710:50 - class block card
710:54 - info
711:00 - and one more div will be required for
711:02 - this likes
711:24 - count all right
711:26 - so we can wrap all these three uh
711:30 - elements inside one more div to add the
711:35 - spacing around them correctly otherwise
711:37 - we will have to add the padding for each
711:39 - of these elements
711:43 - separately so let's add a div
711:49 - and give it a class name maybe blog card
711:54 - body
711:57 - okay and inside
712:00 - this image we will be having our image
712:04 - tag so image tag has will have the SRC
712:08 - attribute and Alternate text
712:14 - attribute okay so now let's put some
712:17 - data and see how it looks so I will just
712:20 - copy the data and put it in the readme
712:24 - file so that that we can get it from
712:31 - here so let's copy the title
712:46 - first and put it in the all tag as well
712:51 - as the title
712:54 - tag
712:57 - refresh this
712:57 - [Music]
713:09 - once sometimes it takes
713:24 - time
713:38 - let me try to restart
713:54 - this
714:02 - so if
714:03 - we disable and reenable the extension it
714:06 - would
714:24 - work
714:26 - all
714:38 - right yeah so we have loaded the title
714:41 - now let's add a image to this Blog the
714:45 - image link is is provided in the
714:52 - notebook and add that in the
714:57 - so the image is loaded and the title is
714:59 - also loaded but we can see that we
715:02 - haven't added any property for the image
715:05 - so it is taking its own width and height
715:09 - and it's maintaining its own aspect
715:11 - ratio and we can see we discussed the
715:13 - key principle that the responsive design
715:17 - should not look like this because we can
715:19 - see that the image is going out of the
715:21 - screen width so for that we will need to
715:24 - add some St Styles so let's create a
715:28 - style layout quickly so first we have a
715:32 - block
715:36 - card then we have a block
715:41 - card
715:45 - image then we have block
715:48 - card
715:50 - body inside this body we have one more
715:54 - div
715:56 - which is block card
716:02 - info
716:04 - okay so we'll need to resize this image
716:08 - correctly so that it doesn't go outside
716:11 - the screen
716:21 - width so for that we will be
716:24 - understanding the con concept of
716:26 - selectors so selectors in a CSS is a
716:29 - pattern that matches one or more
716:32 - elements in a document allowing your
716:34 - styles to apply to only those elements
716:37 - so you have already used the selectors
716:39 - in your previous lectures and
716:41 - assignments so the three basic types of
716:44 - selectors are the element selector which
716:47 - applies to all the HTML
716:49 - elements so div ptag HTML body these are
716:54 - the elements so in our base. CSS file we
716:58 - have used the element selector so these
717:01 - are all the element selector and these
717:03 - styles are applied to these
717:06 - elements next is the class selector that
717:09 - we are going to use in our styles. CSS
717:12 - file and third is the ID selector which
717:15 - begins with the
717:16 - hash there are many more types of
717:19 - selectors in CSS you can find it here I
717:23 - have provided the link in the
717:25 - notebook so the another type of selector
717:29 - is the child selector so in child
717:32 - selector we have to
717:35 - specify two things first is the parent
717:39 - uh selector and the child selector so
717:42 - that is specified using the greater than
717:44 - symbol so let's try to understand this
717:47 - using this image so in this image I have
717:49 - a div whose selector or class is block
717:54 - card image and inside that block card
717:56 - image I have a image element and there
718:00 - is one more image element on our web
718:03 - page so if we directly apply styles to
718:06 - this image
718:08 - selector so it will get applied to both
718:11 - the images this and this but what if I
718:14 - only want to apply the styles to the
718:17 - image which is inside a parent whose
718:20 - class is block card image so for this
718:24 - particular use case
718:26 - we can use the child selector so the
718:29 - Syntax for that looks like this we have
718:32 - to specify the parent selector it can be
718:36 - either ID selector or class selector or
718:40 - element
718:41 - selector and some same thing can uh be
718:44 - applied to the child selector it can
718:46 - also be element class or
718:48 - ID so we are going to use this to style
718:52 - our
718:53 - image so we will be using using block
718:55 - card image greater than
718:59 - image so let's add
719:15 - that so we will use the object fit
719:17 - property
719:21 - cover width
719:24 - 100%
719:28 - and height let's say 160
719:34 - BX so we can see that uh the image is
719:38 - resized and it is not going outside our
719:40 - screen width and also we can see that
719:43 - the image is not stretched if you resize
719:46 - the window you will see that it is
719:48 - getting scaled in and scaled out but not
719:51 - getting
719:52 - stretched so this is how we want our
719:56 - HTML uh image to render in a particular
719:59 - screen
720:02 - width so let's quickly add few more
720:05 - styles to our blog card
720:18 - title we can left align the title so for
720:22 - that we can use text align
720:27 - left and we can also reduce the font
720:31 - size a
720:32 - bit that we can do using font size
720:36 - property and let's make it
720:40 - 1.5
720:44 - REM all right and uh now we can add some
720:48 - border to the block card so that can be
720:52 - done using the shorthand property of
720:54 - border
720:55 - whose first value is the width of the
720:58 - border so we will keep it 1 PX and then
721:02 - the style of the border so we want the
721:04 - solid
721:05 - border and uh the third is the color so
721:09 - that can be any RGB color so let's
721:11 - choose some light color so f f stands
721:17 - for
721:19 - white so something darker than white
721:23 - maybe let's try
721:25 - CCC yeah so this is
721:29 - fine and also let's add some border
721:42 - radius to let's say 4
721:48 - BX all right so we can see that the
721:50 - border and Border radius are added to
721:52 - our block card now now we need to add
721:55 - some spacing
721:57 - here but uh before adding that let's
722:00 - also add the other information of the
722:02 - blog the author and the publish date and
722:04 - the likes
722:08 - count so we can go here
722:11 - and add the author
722:16 - name coton and let say the publish date
722:20 - you can put today's
722:23 - date
722:30 - and the likes to be let's say any random
722:33 - number
722:35 - 256
722:37 - okay yeah so the content for our first
722:41 - card is done now we need to style it
722:44 - more so we will go to the styles. CSS
722:47 - and first we will add the padding here
722:50 - so let's give it a full padding from all
722:53 - the sides
722:56 - so that can be done using the padding
723:00 - property and let's give it 4
723:04 - PX okay and we can see
723:09 - that there is lot of space at the top of
723:12 - this title and that is coming because of
723:15 - the h2 tag that we have used so we can
723:19 - reduce that maybe let's make
723:23 - it
723:25 - zero because we already have a padding
723:28 - here and also let's change
723:33 - the bottom to let's say
723:37 - 5px so that it's
723:40 - look uh more visually
723:43 - appealing and we'll also need to add
723:46 - some spacing between the author and the
723:49 - likes so the author and the publish date
723:53 - information is stored in the div which
723:56 - is having a selector block card info we
723:59 - will add a
724:01 - 5px margin bottom to the this div so now
724:06 - it is looking
724:07 - fine maybe we can increase the font size
724:10 - a
724:11 - bit but uh we want a font size which is
724:16 - larger than the current one but less
724:19 - than the uh title of the blog so let's
724:23 - try
724:27 - is
724:30 - 1.25
724:37 - R all right so our block card is
724:41 - ready now we will have to make it uh
724:46 - like we we will have to set the max
724:48 - width because we can see that it is
724:50 - getting scaled horizontally as I am uh
724:53 - increasing the SC screen width but we
724:57 - want to scale it up to a particular
724:59 - width and after that it should have a
725:01 - fixed width so for that we will have to
725:06 - add a layout that is the parent
725:08 - component to this block card because
725:10 - right now it is taking the width which
725:13 - is available to it that is 100% of the
725:16 - screen so we have designed the block
725:19 - card and it is currently looking like
725:21 - this so now we will need to add some
725:24 - layout to this card right now as you can
725:29 - see in the HTML file we haven't added
725:32 - any parent div to this card so let's
725:35 - quickly add
725:37 - that so I will create one more
725:42 - div whose class name we can call block
725:47 - Parts
725:50 - wrapper and we will put this block card
725:55 - inside
726:03 - this
726:06 - okay and let's define
726:11 - some style for
726:14 - this
726:15 - Block cards
726:19 - rapper so I don't want uh the blog card
726:23 - to take the llit width of uh which is
726:27 - 100% so it should scale up to certain
726:30 - limit but after that it should have a
726:32 - fixed width so for that uh I will have
726:36 - to use a Max width
726:37 - property and uh so we are designing for
726:41 - the mobile view first and uh mobile view
726:45 - the max width is 576 PX so our Max width
726:49 - should be such that it it is less than
726:52 - 576 so I will just use
726:58 - 360px
727:00 - okay and refresh the page yeah so now
727:03 - you can see that the block card is
727:07 - restricted by its parent uh component or
727:11 - elements Max width which is
727:14 - 360px and also I want all the blocks uh
727:19 - to appear centered horizontally so for
727:23 - that we can use uh margin left Auto and
727:27 - margin right Auto it will auto center
727:31 - the Block cards forer horizontally
727:49 - centered
727:52 - okay so now
727:54 - uh let's see the device mode
728:00 - quickly and if we go to 320 you can see
728:03 - that the card is scaling up to certain
728:06 - limit till 360 PX and then it will be a
728:10 - fixed width so in this way we are
728:14 - restricting the card width so that it
728:16 - looks consistent on all the devices
728:20 - because we are working for a range of
728:22 - devices so all devices might have
728:24 - different width so it our web page might
728:27 - not look consistent so let's so that's
728:31 - that is the importance of adding the max
728:33 - WID to the wrapper so now let's add few
728:36 - more Block cards to see how the vertical
728:39 - layout looks like for that we will need
728:44 - some more data and let me
728:49 - quickly see
728:53 - these
728:59 - and grab the mock data from
729:18 - here so we will be adding it at two
729:21 - places one is the m
729:25 - alternative text attribute and other is
729:27 - the block
729:39 - title and also let's add the
729:42 - [Music]
729:51 - image okay loaded
729:57 - we add other
730:00 - images
730:23 - title
731:40 - all right so we have all the data in
731:43 - place and we can see that all the images
731:45 - and the title are loaded
731:48 - correctly
731:49 - so
731:51 - we we want some spacing between two
731:54 - consecutive cards right now there is no
731:56 - spacing so there are few various ways to
732:00 - add spacing between the card the most
732:03 - efficient way that is uh used in the
732:07 - flex layout and that is the gap so let's
732:12 - quickly see what Gap
732:14 - is so gra property explicitly controls
732:18 - the space only between the uh Flex items
732:21 - that are the children of a display Flex
732:23 - layout
732:24 - it applies that spacing between the
732:26 - items and not on the outer edges so the
732:30 - another uh way to do this is the margin
732:32 - top but if you apply margin top it will
732:36 - also apply to the first element and we
732:39 - don't want that we only want the spacing
732:43 - between the consecutive elements so
732:46 - that's why uh it's best practice to use
732:48 - the
732:49 - Gap and GAP will require us to
732:56 - So currently we are not using any
732:57 - display property for this wrapper so
733:00 - let's add a display Flex
733:04 - property and the layout is in column
733:07 - format so we will have to use flex
733:10 - Direction
733:15 - column okay and GAP property which will
733:21 - be
733:22 - 10px
733:25 - so now you can see that our mobile view
733:28 - is looking nice so it is evenly spaced
733:32 - and there is no additional spacing here
733:35 - that is applied to the
733:37 - card so if we inspect this and we can
733:41 - see that there is no additional spacing
733:43 - applied here and the the so the margin
733:48 - or the spacing is uh highlighted using a
733:51 - color and there is no highlight or of uh
733:54 - the margin here so that is the advantage
733:56 - of using Gap so we have uh completed our
734:01 - mobile
734:02 - view so we uh so this is the mobile
734:06 - first approach and we haven't written
734:10 - any additional rules that how our web
734:12 - page should look like on tablet and
734:15 - desktop devices so it will look uh as it
734:20 - is as it is looking on the mobile to
734:23 - make it respond responsive to the other
734:24 - devices we will have to use media
734:27 - queries with the break points so let's
734:31 - uh first design the tablet
734:34 - view so in tablet view we want two cards
734:38 - in a row so in this case we won't be
734:42 - using Flex Direction column we'll have
734:45 - to change it to row and also we will
734:47 - need some
734:50 - wrapping okay so these are the
734:52 - requirements and the spacing between the
734:54 - two cards horizontally and vertically
734:56 - should be
734:57 - 10px and all the cards should take the
735:02 - space exactly half of the available
735:08 - size so for that we will need to add a
735:11 - media query so let's add
735:18 - that so we will
735:21 - require M width
735:26 - of 576 PX right that is the break point
735:31 - of the
735:33 - tablet and
735:35 - uh we first we will add the flex
735:38 - direction that will
735:45 - be
735:51 - Pro so we will also need to add the
735:53 - class name
736:00 - here so we can see that all the cards
736:03 - are coming in a single row so to uh
736:07 - evenly space them and not to shrink them
736:11 - we will have to use the property Flex
736:13 - wrap and set it to
736:17 - wrap so after adding this now you can
736:20 - see that uh all the cards are taking the
736:24 - space so that they fit their content
736:26 - correctly but uh we can see that now if
736:30 - we are on the let's say tablet device we
736:34 - want two cards in a row and it is just
736:37 - taking a single card in a row that is
736:39 - because of the max width which is set to
736:42 - 360 so we will also need to modify the
736:44 - max width because now for the tablet
736:47 - devices we have more space available on
736:49 - our device so let's update the max width
736:55 - to uh maybe we can double that because
736:58 - now it should be less than 991 PX which
737:02 - is the boundary of the tablet
737:05 - device so let's make it 720
737:13 - PX okay
737:16 - and so still it will not work because we
737:19 - haven't specified any width to the block
737:22 - card and block card is still taking the
737:26 - complete width so we'll have to add a
737:29 - property to the block card to uh to let
737:34 - the block card know how much width it
737:36 - should take so that it can fit two in a
737:41 - row so we can add this property again
737:44 - using the media
737:49 - query and we can put the block card
737:51 - class inside this media query
737:58 - and let's add a
738:01 - width of let's say
738:10 - 50% okay so we can see that still it is
738:14 - not showing two in a
738:16 - row so the reason behind this is we will
738:20 - have to check if 50% of the available BD
738:24 - is available for the card or
738:26 - not so let's understand the concept
738:32 - here so we want two cards in a row and
738:37 - there is already a gap of 10 PX between
738:39 - the two cards and each card has a border
738:44 - on the left and the right side and the
738:47 - Border width is 1
738:49 - PX so in
738:51 - total 10 PX is gone from
738:55 - 100% and uh comp like in total for the
738:59 - border is taking 4 PX so the actual
739:02 - available width is 100% minus 10 PX for
739:07 - The Gap and 4 PX for the border so that
739:12 - much width is available and that needs
739:14 - to be divided into two and if we give
739:17 - that then only the cards will show two
739:20 - in a row so how to do this
739:23 - so in CSS there is a way to calculate
739:26 - the width or any other property and that
739:30 - is done by using the calc function so
739:33 - calc function is used to perform
739:35 - mathematical calculations to determine
739:38 - the value of a particular CSS
739:41 - property so it is used to calculate the
739:44 - values dynamically and it is allows us
739:48 - to make more flexible layouts and even
739:51 - if we resize the screen it will
739:53 - automatically recalculate the values and
739:56 - apply it to the uh
739:58 - elements so to do that we will have to
740:02 - use the width property and the calc
740:06 - function so uh inside the Cal function
740:10 - we will put the calculation that we want
740:13 - to do so out of 100% 10 PX is for Gap
740:19 - and 4 PX is for border and the remaining
740:22 - width we will divide into two parts two
740:25 - because we want to show two cards in a
740:28 - row so let me add this
740:35 - width to uh this block card inside this
740:39 - media
740:41 - query so we can see that the blog page
740:46 - is looking correctly on the tablet
740:49 - device and from 570
740:54 - six it should change to tablet View and
740:57 - below that it is still uh taking the
741:00 - column layout that is uh expected from
741:02 - the
741:04 - mockup so you can see that by writing
741:08 - just three lines of code here and one
741:11 - line of code here we were able to make
741:14 - our web page responsive for
741:16 - tablet now similar thing we will have to
741:19 - do for
741:20 - desktop so for desktop
741:24 - so this is the formula that we can use
741:26 - in general to calculate the width of the
741:29 - card so here 100% is the uh Total Space
741:35 - in width available and N minus one where
741:38 - n is the number of cards we want to show
741:40 - in a row and GAP Gap is 10 PX in our
741:44 - case minus 2 into n so n is again the
741:48 - number of uh cards and two represents
741:52 - the border on on the left and the right
741:54 - side so if we put two in this formula we
741:58 - will get the same
742:00 - expression so for desktop view we want
742:03 - to show three cards in a row so for
742:07 - showing the three
742:08 - cards we will have to uh again calculate
742:12 - the width by substituting n is equal
742:16 - 3 so
742:18 - let's understand again how it is done so
742:22 - this is the % width which is available
742:26 - out of that there are two gaps because
742:29 - we have three cards in a row so there
742:31 - will be two gaps 10 PX each so in total
742:35 - Gap is taking 20 PX space and Border
742:38 - left and border right 2 PX per card so
742:42 - in total we will have to subtract 20 PX
742:46 - and 6 PX and then divide uh the
742:49 - remaining space into three
742:52 - parts so this is how uh the block page
742:57 - will become responsive for desktop let's
743:00 - try to quickly add
743:04 - this so uh for desktop now we have
743:08 - larger screen width so we can change
743:12 - this 720px to maybe some more device
743:16 - because now we have space uh till 991
743:22 - PX so I will copy this media
743:28 - query and change the minimum width to
743:31 - 991 PX which is the starting sorry 992
743:36 - PX which is the starting point for
743:39 - the uh desktop
743:43 - devices and put the blogs card
743:51 - starter
743:55 - and we can see that these two properties
743:58 - we don't need to again copy that because
744:00 - uh on the desktop view itself we will be
744:04 - requiring the row Flex Direction and we
744:07 - want them to wrap the only property that
744:10 - we need to change is the max width
744:15 - because we now want three cards in a row
744:18 - so let's copy only the max width and add
744:21 - that here and let's say we make it 960
744:29 - PX and similar thing we will have to add
744:33 - a media query for the block
744:42 - card so here the minimum width will
744:49 - be 992
744:51 - PX
744:57 - and the width will
744:59 - be
745:02 - 20 100% - 20 PX - 6 PX ided by
745:21 - 3
745:23 - so if we go to 992 PX we can see that
745:27 - now three cards are shown in a
745:29 - row so this has made our web page fully
745:34 - responsive for
745:36 - mobile tablet and desktop and if you
745:40 - want to make it more responsive by
745:44 - making use of the screen width of the
745:45 - higher devices you can add
745:49 - the green uh you can add more more media
745:54 - queries
745:56 - and can make that more uh responsive for
746:00 - the higher
746:02 - devices so you can see that we have
746:04 - added less than 60 lines of code CSS and
746:09 - have created a responsive block page
746:16 - design so now let's understand some
746:20 - other properties of CSS uh for adding
746:23 - the hor Styles so suppose we want to add
746:28 - some hor styles to the card so right now
746:31 - if we H using the mouse or this card it
746:35 - is not uh changing the style but let's
746:39 - say we want to add some Shadow to the
746:41 - card and also want to change the cursor
746:44 - of this card so how can we do that so
746:48 - for that CSS provides some pseudo
746:50 - classes so the one example of pseudo
746:53 - class is the hor so to add styles to the
746:58 - pseudo class we have to use the selector
747:01 - Po and the pseudo class name so for the
747:04 - block card we will be using the hor
747:06 - pseudo class and let's try to add
747:17 - that we can add it
747:21 - here
747:25 - and add
747:30 - cursor
747:33 - pointer now you can see that the default
747:37 - pointer device is the arrow and when I
747:39 - hold any card it is showing me the
747:42 - pointer
747:43 - device so in the similar way we want to
747:46 - add some Shadow to the card to indicate
747:50 - that the mouse is over that particular
747:53 - card so for doing that we have a box
747:56 - Shadow property in CSS so the way of
748:00 - specifying the Box Shadow is in this way
748:03 - so it accepts five parameters first is
748:06 - the offset X second is offset y third is
748:10 - the blur spread and last is the color so
748:13 - offset X means how you want to position
748:17 - your Shadow if you specify some positive
748:20 - value here the Shadow will shift to the
748:24 - right side and if you specify negative
748:26 - value it will shift to the left same
748:30 - thing applies for offset y if you
748:33 - specify positive value it is going to
748:35 - shift downwards and if you specify
748:38 - negative value it is going to shift
748:40 - upwards there are few more properties of
748:43 - the Shadow one is blur spread and the
748:46 - color of the Shadow so you can check
748:49 - this out uh I have provided a link here
748:52 - here which uh specifies some more
748:56 - properties and how specifying these
748:59 - different values how the shadow changes
749:01 - so you can play around with that for now
749:04 - we will use this
749:06 - Shadow property and add it into the or
749:12 - uh
749:14 - style so you can see that let me zoom in
749:18 - a
749:21 - bit
749:24 - so you can see that uh there is a shadow
749:29 - here which appears when we ho or the
749:35 - card so in this way we can also change
749:38 - the background color of the card if we
749:40 - want to also we can change the font size
749:43 - all the colors and font size can be
749:46 - altered here if we want to do that on
749:51 - hor all right right
749:53 - so that's the end of the session let's
749:57 - conclude so in this tutorial we learned
750:00 - how to create the responsive web page by
750:03 - just writing less than 60 lines of CSS
750:07 - code and uh we learned how to use scal
750:11 - function in CSS to compute the width
750:15 - dynamically for our block card and we
750:19 - also use the object fit property so that
750:22 - the blog images are not
750:24 - stretched we also learned the child
750:28 - selectors if we want to apply uh styles
750:32 - to a particular element inside a
750:35 - particular selector that can be done
750:37 - using child selector there are few more
750:40 - child selector that you can check I have
750:43 - provided the
750:44 - link and uh also we learned how to add a
750:48 - shadow to the card using the pseudo
750:51 - class
750:52 - core so few tips that you should keep in
750:56 - mind so don't create unnecessary HTML
751:00 - tags and try to design the web page with
751:04 - the minimum tags and same thing applies
751:07 - for the CSS properties don't add
751:11 - unnecessary CSS
751:13 - properties check if the display Flex is
751:16 - whether really required or not if it is
751:19 - required then only add otherwise it it
751:22 - will become very hard to scale on
751:24 - various devices and lastly use
751:27 - meaningful class names to make it human
751:30 - rable and signify what they are doing so
751:33 - if you look to the class names that we
751:35 - have used so all have a meaning to what
751:40 - element they are representing on our
751:42 - HTML
751:44 - page in today's web development
751:46 - landscape CSS Frameworks play a crucial
751:49 - role in simplifying and Expediting the
751:52 - design and development process you've
751:54 - been building web pages for some time
751:56 - now and you may have seen that a lot of
751:59 - effort goes into making sure that things
752:01 - looks things look exactly how you need
752:04 - them to and this is where CSS Frameworks
752:07 - can help reduce the amount of code that
752:09 - needs to be written and make the process
752:12 - of web development more
752:15 - efficient we are going to talk about the
752:17 - bootstrap CSS framework today which is a
752:19 - powerful and widely used toolkit for
752:21 - designing responsive and mobile first
752:24 - websites and bootstrap bootstrap offers
752:27 - a vast array of pre-built components
752:29 - utility
752:30 - classes and a responsive grid system
752:34 - which also makes it very easy for you to
752:36 - work with flexbox without actually
752:37 - having to write a lot of flex
752:39 - properties So today we're going to see
752:42 - how to install bootstraps CSS and
752:44 - JavaScript bundles into a web
752:46 - development project we're going to learn
752:47 - how to modify bootstraps default Styles
752:50 - which is colors and typography using CSS
752:53 - variables we are also going to learn how
752:55 - to use bootstraps breakpoints and grid
752:57 - system for creating mobile first
752:59 - responsive web pages we'll talk about
753:01 - leveraging bootstraps utility classes
753:03 - for applying layout and style changes
753:06 - without writing a lot of CSS and finally
753:08 - we'll also use bootstraps pre-built
753:10 - components and examples for building a
753:12 - web page quickly and
753:15 - efficiently and the best way to learn
753:18 - these skills is to follow along step by
753:19 - step and type out all the code yourself
753:21 - so I highly encourage you to do that the
753:23 - more code you write and the more you ask
753:25 - yourself about every line of code you
753:27 - write the better you will become as a
753:30 - web developer so always make sure that
753:32 - you understand every line of code that
753:33 - you're
753:35 - writing so we will explore these Topics
753:38 - by attempting to solve this problem
753:40 - statement over the course of the past
753:43 - few lessons we have been building a
753:44 - jovian careers website so here is what
753:46 - it looks like there is a nav bar here at
753:49 - the top then there is a banner image
753:51 - then there is an about Jovian section
753:53 - followed by some employment
753:55 - opportunities a table followed by an
753:57 - application form followed by a footer at
753:59 - the bottom so this is the website that
754:01 - we have been building so far and and in
754:05 - today's lesson in today's tutorial we
754:07 - will rebuild this Jovian careers website
754:09 - using the bootstrap CSS framework now
754:12 - the reason we are rebuilding this same
754:13 - site again and again is to understand
754:17 - how to make the web development process
754:21 - more efficient while at the same time
754:23 - improve the Aesthetics and the
754:27 - completeness or the finish of your
754:29 - websites okay so that I would like you
754:31 - to just keep that in mind today that you
754:33 - will notice today that we're writing
754:34 - less code but we're ending up with a
754:36 - better website and that is something
754:39 - that makes you far more efficient as a
754:40 - web developer so specifically we will
754:43 - add some links in the navigation bar as
754:45 - well so here we have a navigation bar
754:46 - We'll add some links here at the top and
754:49 - we will also then make that collapsible
754:52 - on mobile because you don't have a lot
754:53 - of space to Show links on mobile so
754:55 - we'll add a menu button over there we
754:58 - will also show the list of jobs using
755:00 - cards on mobile and using a table on
755:03 - desktop so here we using a table on
755:05 - desktop that is fine but we will also
755:07 - see how to use cards on mobile devices
755:09 - so right now we just have a list
755:12 - here uh yeah so we are using cards of
755:15 - some kind here but we'll see how to
755:16 - improve the layout of these
755:18 - cards using
755:20 - bootstrap
755:22 - and we will also make the color scheme
755:24 - typography and layout a little more
755:26 - consistent and a little more
755:27 - aesthetically pleasing okay so this is
755:29 - the website that we had and let's see
755:31 - what we're able to create
755:33 - today now of course we assume here that
755:35 - you have basic knowledge of HTML and CSS
755:38 - and there is also an assumption here
755:40 - that you know about flexbox in
755:41 - responsive design and Version Control
755:43 - with GitHub and Cloud deployment to
755:44 - versel all of this is covered in the
755:46 - previous lessons so I would highly
755:48 - encourage you to go back and review
755:50 - specific pieces if some some of these
755:52 - parts don't make sense
755:55 - today now please post your questions in
755:57 - the chat because we will pause
755:58 - periodically and take questions and the
756:01 - entire code for the tutorial can be
756:02 - found here so the starter code which is
756:04 - the site created in the previous
756:06 - tutorial can be found here and the
756:08 - starter site can be found here and you
756:10 - can find the completed code and the
756:12 - finished site using these links so the
756:14 - first step today is going to be creating
756:16 - a GitHub repository so I'm just going to
756:18 - go in here into github.com and once I'm
756:21 - logged in I'm going to click the new
756:26 - button and now I am going to give this a
756:28 - repository name so let me just call it
756:31 - Jovian careers
756:35 - bootstrap live because I'm doing this
756:37 - live let me give it a short description
756:39 - a jovian careers
756:42 - website built using
756:45 - bootstrap CSS
756:48 - framework I'm going to make this a
756:50 - public Repository so that you can access
756:52 - this code when I'm done I am going to
756:54 - add a readme file as well just so that I
756:56 - have some initial code in the repository
756:58 - I am going to add a git ignore file as
757:00 - well so I'm just going to type node
757:02 - which is going to generate the git
757:04 - ignore file for JavaScript which is
757:05 - going to ignore any files that are not
757:08 - necessary to be saved in Version Control
757:10 - things like temporary files or compiled
757:13 - files
757:15 - Etc and I'm going to add the MIT license
757:17 - here so that people can build on top of
757:19 - this and now I'm going to hit create
757:22 - repository and with that our GitHub
757:24 - repository is created perfect so now we
757:27 - have a GitHub repository called Jovian
757:29 - careers bootstrap live and we now need
757:32 - to start developing this repository and
757:34 - that is something that we'll do using
757:36 - Cod
757:40 - spaces so we are going to use a
757:43 - cloud-based programming platform called
757:45 - GitHub code spaces which lets us open up
757:48 - vs code or Visual Studio code in the
757:50 - browser so I'm going to just just click
757:52 - the code button here and select create
757:54 - code space on mean and that is going to
757:57 - Now set up a new machine for us on the
757:59 - cloud it is going to download the code
758:02 - from the repository that we've just
758:03 - created onto that new machine and then
758:06 - it is going to allow us to start
758:07 - developing it using this browser based
758:09 - vs code and we can also start previewing
758:11 - it as we develop the website okay so
758:16 - there we go now this has just opened up
758:19 - and I can open up any of the files here
758:26 - and I can now open up any of the files
758:28 - here and start editing them for example
758:31 - I can open up the G ignore file here and
758:33 - start editing it okay so with that our
758:36 - basic development setup is complete we
758:39 - have created a GitHub repository and we
758:42 - have opened it up using GitHub codes
758:43 - spaces the instructions are available in
758:45 - the notes if you need them now to begin
758:48 - we can set up a basic HTML page so we
758:51 - are not going to copy over any code from
758:54 - the previous uh tutorial we are going to
758:57 - type out all the code or most of the
758:59 - code from scratch today so let us create
759:02 - an SRC folder within the repository it's
759:04 - always a good idea to create an SRC
759:06 - folder containing the actual files for
759:09 - the project that are going to be
759:10 - deployed into production because we
759:12 - don't want to send our get ignore
759:13 - license Etc into production and in the
759:16 - SRC folder I'm going to create a new
759:18 - file
759:20 - index.html and now in my index.html I
759:23 - can start putting in some things so I
759:25 - can start by maybe a doc type tag which
759:27 - just indicates that this is an HTML file
759:30 - I can now go in and put in a head tag I
759:34 - can go in and put in a body tag and now
759:38 - I can start adding some information on
759:40 - the web page so I'm just going to copy
759:42 - over a few things here which is
759:45 - something that we've been creating over
759:47 - the past few weeks as well so I'm going
759:49 - to copy a title tag so I'm I'm just just
759:51 - going to have this title
759:54 - tag in the head and this simply says
759:58 - that the title of the page is Jovian
760:00 - careers powered by bootstrap then I'm
760:02 - going to copy a bunch of meta tags a
760:04 - meta caret tag to indicate to the
760:06 - browser that that we are using the utf8
760:08 - character set so this is something that
760:10 - you should put into pretty much every
760:12 - website that you build I'm going to copy
760:15 - over the meta viewport tag and The Meta
760:17 - viewport tag specifically with the
760:19 - content width equals device width an
760:21 - initial scale equal 1.0 is necessary for
760:24 - triggering responsive design otherwise
760:27 - older mobile browsers may try to
760:30 - automatically zoom in the content of
760:32 - your page to adjust for a desktop
760:35 - website so this is a way of telling the
760:36 - browser that you have created a
760:38 - responsive design don't worry about what
760:40 - these specific things mean this is
760:41 - something that you should have in pretty
760:43 - much every web page I'm going to put
760:45 - that in here as
760:46 - well then I'm going to copy over a meta
760:49 - description and a meta
760:52 - OG properties so an OG or open graph
760:55 - title open graph description and open
760:57 - graph yeah open graph description and a
760:59 - normal description all of these as we've
761:02 - discussed in the previous lesson are
761:03 - used when you share the link that you
761:06 - have for the deployed web page with
761:07 - somebody else so this is what this is
761:09 - the title that is going to show up in
761:11 - the link preview and this is the
761:13 - description that is going to show up
761:14 - below the link apart from that we are
761:17 - also going to add a couple more tags so
761:20 - there's going to be one tag called the
761:22 - OG image tag this tag is going to
761:24 - determine the image that shows up as the
761:27 - preview image when you share this link
761:28 - on WhatsApp slack or any other social
761:31 - platform and that is going to be
761:33 - something set to the Jovian meta PNG
761:36 - file
761:38 - and we're going to need that meta PNG
761:41 - file so I'm just going to drag in that
761:43 - meta PNG file from my desktop so I'm
761:46 - just going to drag in this file from my
761:48 - desktop into the SRC folder so this is
761:50 - the file that is going to show up as the
761:53 - preview this image is going to show up
761:54 - as a preview when somebody shares the
761:55 - link to our website
761:58 - online okay finally I am also going to
762:01 - drag uh put in a link tag with the Rel
762:04 - equals icon and this is going to point
762:07 - to the fave icon so the fave icon is
762:08 - what is the icon the little icon that
762:10 - shows up in the browser like this when
762:13 - we open that website in the browser okay
762:16 - so let us add that meta tag in here as
762:18 - well so let's add the
762:21 - fav ion meta tag and let us bring that
762:26 - in here as well chian favicon.png
762:36 - okay so with that we have a basic setup
762:41 - of the
762:42 - page let me just open it up here so we
762:45 - have HTML head title meta a bunch of
762:47 - meta tags then in the body because we
762:50 - are going to create this Jovian career
762:52 - side I'm just going to put in a bunch of
762:54 - empty divs for now so I'm just going to
762:56 - put in a nav bar and about Jovian div a
762:59 - jobs list and application form so all of
763:01 - these are just empty placeholder divs
763:03 - along with HTML comments above them so
763:06 - let's do that as well and let us just
763:07 - format the
763:09 - document okay looks good so now that we
763:13 - have some code that we have added into
763:14 - our HTML page we need a way to actually
763:16 - see what this page looks like and that
763:19 - is where we're going to use the live
763:20 - server extension so I'm just going to
763:21 - search live server and the live server
763:25 - extension allows us to preview the web
763:29 - page that we are building in our Cod
763:31 - spaces machine which is running
763:33 - somewhere on the cloud so it sets up a
763:34 - server and it serves that page so that
763:36 - we can open it on the browser and once
763:38 - it is installed I can come back into my
763:41 - index.html file and right here at the
763:44 - bottom I should be able to see a go live
763:46 - button or I can also just right click on
763:49 - my index.html uh file and just select
763:53 - open with live server either way once I
763:56 - click
763:59 - this you can see that the website is now
764:02 - open all right so let me just put that
764:04 - website here so this is the site that we
764:07 - have right now and this is the site that
764:10 - we're going to start slowly building you
764:13 - can see that there's not a lot here even
764:14 - if I zoom in there there is just this
764:16 - Navar there's a bunch of divs with some
764:19 - placeholder text within them and this is
764:21 - site that we are going to slowly start
764:23 - building using bootstrap
764:27 - now with that out of the way we can
764:30 - start actually using the bootstrap CSS
764:33 - framework so bootstrap is a powerful
764:36 - open source CSS framework and this is
764:38 - the website of bootstrap get
764:43 - bootstrap.css
764:46 - and it has an extensive library of
764:49 - pre-built components Styles and util
764:51 - ities and it enables developers to
764:52 - rapidly create visually appealing and
764:55 - highly functional websites a lot of the
764:57 - websites that you see on the internet
764:59 - either use bootstrap or something very
765:01 - similar to bootstrap some kind of a CSS
765:03 - framework to add all the interactive
765:06 - features all the various interesting
765:08 - layouts that you see on most modern
765:10 - websites
765:12 - and there are many ways to install
765:15 - bootstrap and you can check out the
765:17 - different ways of installing bootstrap
765:19 - on the website on the get started page
765:21 - but the easiest way to use bootstrap is
765:24 - to include it CSS and JavaScript
765:26 - directly within an HTML page so
765:28 - bootstrap has two parts it has a CSS
765:30 - file which contains a bunch of existing
765:33 - styles that you can use within your HTML
765:35 - page and it has a Javascript file
765:38 - JavaScript is used to enable some
765:40 - interactivity things like drop-downs
765:42 - popups tool tips Etc so there's a
765:45 - Javascript file that you need to include
765:47 - as well okay so let us first grab the
765:51 - link tag so there are two things here
765:53 - there is this link tag right over here
765:55 - which contains the bootstrap CSS file so
765:57 - I'm just going to grab that and it's
765:59 - always a good idea to grab it from the
766:01 - website because that is going to have
766:02 - the latest version of bootstrap which
766:04 - currently happens to be
766:06 - 5.3.0 so I'm just going to come in here
766:09 - and I'm going to paste this link tag
766:11 - right here right below you can see we
766:14 - now have this link tag bootstrap.min.css
766:16 - that gets included and you can also
766:19 - command click this link and see what
766:20 - that file contains so you can see that
766:22 - it contains a whole bunch of CSS Styles
766:24 - we will obvious obviously not be using
766:26 - all of them but many of them are going
766:28 - to be useful for what we're going to do
766:31 - today okay so that is the link tag then
766:35 - another thing that you can do is include
766:37 - this script tag and interestingly this
766:39 - script tag goes not in the head but in
766:42 - the body and right at the bottom of the
766:44 - body and the reason for this is you do
766:46 - not want the loading of the script to
766:49 - prevent or block the loading of the web
766:51 - page and that is why putting it the
766:53 - putting it at the end of the body
766:54 - ensures that only after the entire
766:56 - content of the HTML page is loaded only
766:58 - then the Javascript file gets loaded
767:00 - okay we don't do that for CSS because we
767:03 - want the styles to load beforehand
767:04 - otherwise if the Styles load after the
767:07 - page loads there's going to be a
767:08 - flickering effect but for the script
767:11 - because a lot of the interactivity is
767:12 - going to happen after all the content
767:14 - loads it is okay to put that script at
767:16 - the bottom of the page okay so I'm just
767:19 - going to go in and put that script right
767:22 - at the bottom of the page and you can
767:23 - see again there is this bootstrap
767:25 - bundle. min.js and this is all the
767:28 - JavaScript that is getting included by
767:32 - default so that is how you add
767:35 - bootstrap to your web page and once you
767:40 - save the
767:41 - file and come here and reload the page
767:44 - you can see already that the Styles have
767:47 - changed significantly so earlier we had
767:50 - a slightly different font we also had
767:52 - some default padding but let's say I
767:54 - comment this out you can see that we
767:56 - there is some padding on the body you
767:58 - can see that the font is slightly
767:59 - different so there's already some change
768:02 - that bootstrap has brought in in fact it
768:03 - resets a lot of the basic Styles and it
768:05 - sets up basic styles for text it sets up
768:08 - basic colors for the text it sets up
768:11 - basic font sizes fonts it sets up a
768:14 - bunch of things by
768:16 - default so that is how you set up
768:19 - bootstrap now before we actually start
768:21 - building something we will have to start
768:23 - first maybe customize the bootstrap
768:25 - setup to use the fonts and the colors
768:28 - that we want to use because given the
768:30 - whatever company you're working at
768:31 - they're going to have their own
768:32 - preferred fonts and colors that you
768:34 - might want to use and you can override
768:36 - or customize
768:37 - bootstrap very easily and Frameworks
768:40 - like bootstrap enable customization via
768:43 - CSS variables and CSS variables also
768:47 - known as custom properties allow you to
768:49 - Define reuse usable values in your
768:52 - stylesheets and this makes it easier to
768:55 - manage an update values such as colors
768:57 - and font sizes throughout your CSS code
769:00 - so I'm going to give you a quick
769:01 - tutorial of CSS variables and then we're
769:03 - going to start customizing some CSS
769:05 - variables to change what bootstrap gives
769:08 - us now to define a CSS variable you need
769:11 - to use the hyphen hyphen syntax or the
769:13 - minus minus syntax so any time you put
769:15 - minus minus followed by something that
769:17 - is treated as a CSS variable that's the
769:20 - first thing the second thing is uh as a
769:23 - good practice you should always Define
769:25 - your CSS variables in this selector
769:27 - called colon root and this is just this
769:30 - is called a pseudo selector this
769:31 - basically says that you want to put
769:32 - these variables and you want to make
769:34 - these variables available right at the
769:36 - very root of the CSS file so that it's
769:39 - available no matter where you are in the
769:41 - CSS file okay so it's it's it'll be at
769:43 - the root of the document and it'll be
769:45 - available across all different kinds of
769:47 - styles maybe even inline Styles and
769:49 - style tags within the page so here is
769:52 - how you can create some CSS variables so
769:54 - right now we don't have a CSS file that
769:56 - is Con that is connected to this web
769:59 - page but I can just put in a style tag
770:02 - here for now and I can just create a
770:05 - bunch of CSS variables here using the
770:09 - root tag okay so now I have this root
770:12 - and in the root I have set a primary
770:14 - color to be a certain blue I've set a
770:16 - secondary color to be a certain green
770:17 - and I've set the font size to be 16
770:20 - these styles are not applied to anything
770:22 - yet these styles are just variables so
770:24 - just like variables in any other
770:25 - programming language The Hyphen hyphen
770:27 - font size is a variable and it has the
770:29 - value 16 pixels and similarly hyphen
770:31 - Hyer primary color is a variable it has
770:33 - the value blue or a variation of blue
770:37 - okay and of course this is the hex code
770:39 - of the color and vs code show very
770:41 - helpfully shows us a preview as well now
770:44 - once you've defined a CSS variable you
770:46 - can then use it within some CSS property
770:49 - and you can use it using the V function
770:51 - in CSS so here is how you might use it
770:54 - you might say something like body and
770:56 - then you might set the background color
770:58 - of body to where and then here you
771:01 - provide the name of the color provide
771:03 - the name of the variable hyphen hyen
771:05 - primary color and now what's going to
771:08 - happen is when I paste in this style and
771:12 - I save the page you can see that the
771:14 - body got a background of blue that's
771:17 - because where primary
771:19 - color invokes a search for CSS variables
771:22 - and there is a CSS variable in the root
771:24 - called primary color and its value has
771:26 - been set to 3498 DB which is a blue
771:29 - similarly the font size of the body is
771:32 - going to search for the variable font
771:33 - size and that is going to get the color
771:35 - 16 now the benefit of CSS variables is
771:39 - you can now go in and you can actually
771:41 - update these variables so once again if
771:44 - I go in here and then let me also create
771:45 - a button here just to complete this
771:48 - example and let's put a button here here
771:50 - right at the
771:54 - top let's say click
771:58 - me let's save that so there's a button
772:01 - right here right at the top and this
772:03 - button has the color secondary color and
772:05 - the secondary color is a green so
772:07 - clearly the button has a green color and
772:09 - the CSS uh the body has a blue color now
772:14 - you can go ahead and update a CSS
772:16 - variable so you can either update it at
772:17 - the same place where you defined it or
772:19 - you can update it some where maybe let's
772:21 - say you have a bunch of CSS files and
772:22 - you've updated it in a second or third
772:25 - file so let me just go in and update
772:27 - these two values or just update the
772:29 - primary
772:32 - color and now you can see as soon as I
772:34 - update the primary color to a purple
772:37 - that automatically updates the
772:39 - background color so wherever the
772:41 - variable is used the color is now going
772:43 - to get updated okay so now you can see
772:45 - the value of CSS CSS variables I can
772:48 - define a bunch of variables based on the
772:50 - scheme that our design team has
772:51 - currently given us then I can just use
772:53 - those variables everywhere in my CSS
772:56 - Styles and then when the design team
772:58 - comes and says okay we need to change
772:59 - the color we are moving from Blue to Red
773:01 - we don't have to go in and edit a bunch
773:03 - of different properties we just go to
773:05 - our root tag our root selector we just
773:09 - simply check the primary color and
773:11 - change its color to whatever the design
773:14 - team is asking us to do okay so that is
773:17 - the value in CSS colors so that is a
773:20 - value that CSS variables provide us okay
773:24 - so for a moment I'm just going to get
773:25 - rid of all of this now now that we
773:27 - understand how CSS variables
773:30 - work the last thing you can also do is
773:33 - you can also provide a fallback value so
773:35 - that let's say you providing a
773:36 - background color and that is going to
773:38 - come from a variable let's say this
773:40 - variable is not defined for whatever
773:42 - reason Somebody went and changed the
773:44 - name of the variable or it was in a
773:45 - certain file that did not actually get
773:47 - included you can actually provide a
773:48 - basic fallback or default def value as
773:50 - well so this is something that I leave
773:52 - as an exercise for you to test out okay
773:55 - so you can learn more about CSS
773:57 - variables and experimenting
773:58 - experimenting and experiment with them
774:01 - by following this guide on the Mozilla
774:02 - developer Network so I'll let you check
774:04 - it out as well but here's what I want to
774:07 - now tell you customizing bootstrap is
774:09 - done by changing CSS variables so many
774:12 - of bootstrap's default color and
774:14 - typography settings can be customized
774:16 - using CSS variables and you can get the
774:19 - full list of CSS variables that have
774:20 - been defined in the bootstrap.min.css
774:23 - file over here on bootstrap's
774:26 - documentation website you can see these
774:28 - are all the variables that have been
774:30 - defined by default and what you can do
774:33 - is you can now overwrite them in your
774:35 - own style tag or style file and then
774:38 - what is going to happen is all the
774:40 - bootstrap classes which use these colors
774:43 - are going to pick up the new colors that
774:45 - you've provided or the new fonts or
774:46 - sizes that you've provided okay so I
774:49 - encourage you to check out all the
774:50 - different variables that you can
774:51 - actually
774:53 - modify in in
774:56 - bootstrap so that's one way using CSS
774:59 - variables another way to bootstrap to
775:01 - override bootstrap default Styles is
775:03 - simply by supplying your own Styles in a
775:05 - CSS file with appropriate selectors
775:08 - let's say you don't want to change the
775:09 - primary blue color for the entire
775:11 - website only for a particular set of
775:13 - buttons in a particular section you want
775:15 - to change the color so you can just
775:17 - provide the CSS selector maybe give it
775:19 - an ID be given a special class and then
775:21 - in that class you can simply go ahead
775:23 - and apply the changes to that particular
775:25 - button so remember that CSS styles are
775:27 - cascading which means a more specific
775:30 - rule can override a less specific Rule
775:32 - and if two rules have the if two rules
775:34 - have the same specificity then the rule
775:36 - that appears last in order takes
775:38 - precedence okay and this is something
775:40 - that can be confusing and may require
775:42 - some experimentation to understand so
775:45 - let's make the following changes to our
775:47 - page we will use the font Roboto for the
775:50 - body text if you check the CSS variables
775:52 - here it looks like there is the the font
775:55 - family for the body BS body font family
775:58 - this is what is going actually going to
775:59 - be used in the body if you check the
776:00 - bootstrap CSS file it itself uses the
776:03 - variable BS font sanserif and looks like
776:06 - BS font sanserif uses something called
776:08 - system UI which is simply the
776:12 - default sanserif font in the browser or
776:15 - in the system or or in the operating
776:17 - system all right so we don't want to use
776:20 - this we want to always set it to Roboto
776:22 - so that is one change we're going to
776:24 - make then we will also use the font
776:26 - inter for headings now if you check here
776:29 - there is no specific font that has been
776:30 - specified for headings looks like
776:32 - bootstrap by default just uses a single
776:34 - font for the entire page for all kinds
776:36 - of text so that's where we can probably
776:38 - use some CSS selectors and change the
776:41 - font for headings and finally at Jovian
776:44 - we have a specific blue color that we
776:46 - use and there are different shades of
776:48 - blue that different companies use about
776:50 - half the companies on the Internet seem
776:52 - to use a blue color for some reason but
776:55 - we are going to use this
776:56 - 2067 F5 as the primary blue color and
777:00 - you can see here that the primary color
777:02 - that is used or the primary blue and
777:04 - bootstrap is something else and there's
777:06 - also this BS primary which is exactly
777:08 - the same blue that is here at the top
777:10 - we're going to change both of these the
777:12 - BS blue if I zoom in a bit so we're
777:15 - going to change the BS blue color and we
777:17 - are going to change the
777:20 - BS primary color as well to our desired
777:23 - Jovian
777:24 - blue okay so let's start doing this step
777:27 - by step so first We'll add a sample
777:29 - heading sample body text and maybe a
777:32 - sample blue box that is going to be
777:34 - present in the index HTML file so that
777:36 - we can actually observe these changes
777:38 - let me copy over this H1 tag this div
777:41 - tag and also this third div or the
777:43 - second div tag which has a height of 200
777:45 - pixels and it uses the background V BS
777:49 - blue so you can use CSS variables within
777:52 - inline Styles as well so within the
777:54 - actual style attribute let's go ahead
777:56 - and let us just put this within the body
777:58 - here and let us save
778:01 - it and let's reload this page okay so
778:05 - now now you can see we have H1 so this
778:07 - is the H1 tag and the H1 tag has the
778:10 - sample heading and then we have some
778:13 - sample body text so I've just created
778:15 - some sample body text and of course I've
778:17 - zoomed in here a bit that's why it looks
778:18 - big this is the ual size but let me Zoom
778:21 - back in so that you can actually see
778:22 - this properly and we've created this box
778:25 - here which contains the default blue
778:27 - color of bootstrap as the background it
778:29 - has a height and width of 200 pixels
778:31 - each okay it's using the bootstrap blue
778:34 - as the color next we can now first to
778:38 - change any fonts we have to first import
778:40 - fonts from Google fonts so you can
778:42 - always go into Google fonts and let's
778:44 - say there are a couple of fonts that you
778:45 - need to use you can go into that
778:47 - particular font you can add all the
778:49 - styles that you need and once you've
778:51 - added all the Styles which I've done
778:52 - here for inter and
778:53 - Roboto and generally speaking you should
778:56 - be able to copy over pretty much all the
778:58 - Styles because you might you don't know
779:00 - which one you might need then you can
779:01 - come in here and you can actually go
779:03 - ahead and copy a link tag so if I zoom
779:05 - if I scroll up here you can see that
779:07 - there is this link tag that can be
779:08 - copied and that link tag has to be added
779:12 - into our index.html file to load these
779:14 - fonts from Google fonts onto the page
779:18 - okay so I'm just going to add this link
779:20 - tag right below my bootstrap link
779:23 - tag okay and let's format the document
779:25 - once again as well perfect so now we've
779:29 - included some fonts but of course no
779:31 - change has been made yet because we've
779:32 - not actually used those fonts next let
779:35 - us set up a styles. CSS file and connect
779:37 - it to index.html using a link tag within
779:40 - the head so I'm going to come back in
779:42 - here I'm going to create a file
779:46 - styles.css
779:47 - and I am going to link L
779:50 - it using a link tag so link Rel equals
779:54 - stylesheet HF equals styles.css so I'm
779:57 - just going to put that into Styles into
780:00 - the index. HTML file now one important
780:02 - thing you should keep in mind here is
780:04 - you have to put the your custom Styles
780:07 - below the bootstrap Styles because that
780:10 - is the order in which the CSS variables
780:12 - will be read so if you put it above
780:14 - what's going to happen is first your CSS
780:16 - variables will be read and then the
780:17 - bootstrap CSS variables will get read
780:19 - and and those bootstrap CSS variables
780:21 - will override your values but you want
780:22 - to do the opposite you want to take the
780:25 - bootstrap CSS variables and you want to
780:27 - overwrite them and then all the classes
780:30 - that are present in the bootstrap CSS
780:31 - file will automatically pick up the
780:33 - overridden value so that is the
780:35 - interesting way in which you can go back
780:37 - and you can change some of the Styles in
780:39 - in bootstrap okay all right so now we
780:41 - have the styles.css file still there is
780:44 - no change that has happened now let us
780:47 - start by first adding this root tag and
780:51 - then changing a couple of or a three
780:54 - properties so we're going to change the
780:55 - variable BS font Sans serif you can see
780:58 - here that there is this
781:02 - BS there is this BS font Sans serif this
781:06 - is what is actually going to be used as
781:09 - the body font family so the body font
781:11 - family variable gets used in the body if
781:13 - you study the bootstrap structure um so
781:16 - I'm just going to come in here and I'm
781:17 - going to create the root tag and you can
781:20 - see as soon as I pasted it a bunch of
781:22 - things have changed and we can disable
781:24 - these and we can observe the changes one
781:26 - by one first let us keep an eye on the
781:29 - text over here as soon as I enable this
781:33 - you can see that there has been a slight
781:34 - change in the text it's
781:36 - very it's very minute but if you just
781:41 - look at it carefully you see this is
781:44 - different and this is different right so
781:46 - these are minor changes in the font but
781:48 - you want to get the company font the
781:49 - font that your company uses that's why
781:51 - this is important let's then change this
781:53 - blue color as well again it's going to
781:55 - be very
781:57 - subtle yeah so looks like there's a
781:59 - minor change here in the blue you may
782:00 - not even be able to detect it but I can
782:02 - always go in here and just for the sake
782:04 - of testing I can go in and maybe make
782:07 - this a green color and you can see that
782:09 - now the color changes to Green right so
782:11 - whatever value you set for the BS blue
782:14 - CSS variable that is going to override
782:16 - the default value in bootstrap and that
782:18 - is then going to be used within all the
782:20 - classes within wherever you want to use
782:23 - uh this color okay so I'm going to reset
782:26 - it back to the color that we had for
782:28 - Jovian and just like that we have
782:31 - modified a few basic Styles we've
782:33 - modified the body font family and we've
782:36 - modified the blue and primary colors to
782:38 - our desired color of course we also want
782:40 - to use the inter font for headings so
782:43 - that is something that we can simply do
782:45 - by adding these selectors H1 to H6 and
782:48 - we can simply set their font family to
782:50 - enter with a fall back to Sans siif if
782:52 - the font could not be loaded so let me
782:54 - come in here and you can see that there
782:56 - is a slight change here to The Heading
782:58 - and I can even come in here and maybe
783:00 - know check out the font
783:02 - weight six and set that to 600 you can
783:05 - see now my fonts or my headings are a
783:07 - bit thicker so remember that if just
783:11 - because you've used bootstrap does not
783:13 - mean you can not use your own CSS Styles
783:15 - you can customize pretty much everything
783:18 - in bootstrap and simplest way to do it
783:20 - is often to just add a class let's say
783:22 - there's a particular button you want to
783:23 - customize just add a class to that
783:24 - button and simply go into your CSS file
783:27 - and then apply the styles to that
783:28 - particular button or div or whatever it
783:31 - is okay and with that we have performed
783:35 - a bunch of customizations the and we can
783:38 - now get rid of the sample heading sample
783:41 - body text and the sample div that we had
783:46 - and we can proceed with the rest of our
783:48 - website right now I want to point out
783:51 - that there's actually a much more much
783:54 - deeper customization that you can do at
783:56 - a
783:57 - very specific component level within
784:00 - bootstrap and bootstrap is written using
784:01 - this language called SAS which is
784:04 - essentially an extension of or an
784:06 - expanded version of CSS that can then be
784:09 - compiled down to plain CSS for
784:11 - distribution and for more advanced
784:13 - customizations you can actually go into
784:15 - bootstrap source code you can make
784:17 - changes to the original SCF CS files
784:20 - which is what bootstrap is written in
784:21 - that this is the format of the file and
784:23 - then compile them down to your own CSS
784:26 - file and all of that is described on the
784:28 - bootstrap documentation website okay
784:31 - most of the time you will not need to do
784:33 - this but in some certain cases where you
784:35 - cannot figure out a way to do it by
784:37 - using CSS variables or using custom
784:39 - classes you can go ahead and simply edit
784:42 - the scss files and generate a new uh CSS
784:45 - file for your project okay so as as an
784:49 - exercise I would encourage you to maybe
784:51 - make some more changes to the page
784:53 - either by modifying bootstrap CSS
784:54 - variables or by providing custom Styles
784:57 - within the styles.css file and observe
785:00 - their changes on the web page now let's
785:02 - talk about how you can build responsive
785:03 - layouts so bootstrap contains built-in
785:06 - breakpoints media queries and a grid
785:08 - system to create responsive layouts
785:10 - simply by adding some classes to HTML
785:13 - elements without requiring any custom
785:16 - CSS and this is one of the nicest things
785:18 - about using bootstrap that you don't
785:19 - have to write breakpoints and media
785:21 - queries yourself replacing CSS
785:24 - properties with utility classes is one
785:25 - of the biggest benefits that you can get
785:27 - from a CSS framework and we will explore
785:30 - multiple CSS Frameworks over the course
785:32 - of this program this course and future
785:33 - courses but all of them will have this
785:37 - common pattern that they're going to
785:38 - take away some CSS that you had to
785:40 - earlier write manually and just turn
785:42 - them into simple classes that you can
785:43 - include within your HTML file so first
785:47 - let's understand the buil-in breakpoints
785:48 - and boot straps because in bootstrap
785:50 - because it's still useful for us to know
785:52 - this so breakpoints in bootstraps are in
785:55 - bootstrap are predefined screen widths
785:58 - that help you create responsive designs
786:00 - for various devices like smartphones
786:02 - tablets and
786:03 - desktops and bootstrap uses a mobile
786:06 - first approach which means that the boot
786:09 - which means that the styles that you
786:11 - supply for the smallest breakpoint will
786:14 - automatically follow through or get
786:16 - applied to bigger breakpoints until you
786:18 - choose to change them all right so that
786:20 - is where you should always first design
786:22 - the mobile version of your site make
786:23 - sure that it looks good on mobile and by
786:26 - default all those Styles will carry over
786:28 - into the bigger layouts as well and then
786:32 - you can specify some custom Styles when
786:34 - you get to a tablet layout and just make
786:37 - the required changes that you need and
786:38 - then you can again uh go to a desktop
786:41 - layout and specify some more changes so
786:43 - that is called mobile first responsive
786:46 - design with incremental adaptation to
786:48 - increasing screen size so by default the
786:51 - styles that you supply to bootstrap they
786:54 - get applied on excess screens which is
786:56 - screens smaller than 576 but of course
786:59 - they also carry over to bigger screens
787:01 - then if you can if you supply some style
787:04 - for the S screen and we'll see where
787:06 - this SM word actually gets applied then
787:09 - that is going to only apply to screens
787:11 - that are bigger than 576 pixels then if
787:15 - you want to apply some styles for bigger
787:18 - or brows with a bigger width width
787:20 - greater than 768 pixels you then use the
787:23 - MD and then similarly there's a breako
787:26 - for LG Xcel and
787:28 - XSL okay so the way you create layout
787:31 - changes for specific breakpoints is not
787:34 - by writing media queries but by simply
787:37 - using certain class prefixes in your
787:39 - HTML markup and don't worry if that
787:41 - doesn't make sense right now because
787:42 - we're going to see an example of that
787:44 - very shortly so the first key component
787:49 - that we are going to use from bootstrap
787:52 - or the first key layout element is
787:53 - containers and whenever you want to use
787:56 - some kind of a responsive layout
787:58 - whenever you want to do something
787:59 - interesting with bootstrap where the
788:01 - layout changes across different wids you
788:04 - have to first create a container okay
788:07 - and the way you create a container is by
788:09 - simply adding the class container to a
788:11 - div that's it so you create a container
788:13 - by creating a div and giving it the
788:15 - class container now bootstrap comes with
788:18 - three different containers or three
788:20 - different types of containers and we'll
788:21 - take a look at them one by one so the
788:24 - simplest container that you can create
788:26 - in bootstrap is just by creating this
788:30 - div and giving it the class container
788:34 - okay I'm also going to give it a height
788:38 - and width so I'm just going to give it
788:40 - maybe a width of 200 PX height of 200
788:45 - PX or actually let me just give it a
788:47 - height not a width right now because the
788:48 - WID WID is going to be set automatically
788:50 - so I'm going to give it a height of 200
788:52 - PX and I'm going to give it a background
788:54 - of let's use the blue BS blue now we
788:59 - have this container uh we have just
789:01 - created a div with the class container
789:03 - and we've given it a height of 200
789:04 - pixels and a background of blue and you
789:08 - can see here that this container has
789:10 - this property that it is always centered
789:11 - on the page and you can see when the
789:14 - when the page is really
789:15 - small maybe let's use browser tools to
789:18 - see the this it's going to be slightly
789:20 - easier to do it this way yeah you can
789:23 - see that when the page is very small it
789:25 - takes up the full width of the page but
789:27 - as we start increasing as soon as we
789:29 - cross the excess
789:31 - boundary okay now looks like up to
789:35 - 500 okay up to 576 pixels it takes up
789:38 - the full width and then its width
789:41 - reduces and it just remains centered on
789:42 - the page and then we hit the next break
789:44 - point which would be about 768 at 768 it
789:47 - becomes a little bigger but but it still
789:49 - remains centered on the page it still
789:50 - does not take up the entire page and
789:53 - then as we keep going we hit the next
789:55 - break point and then when we hit the
789:56 - next breakpoint at around 9 996 pixels
790:00 - or so it once again expands and it
790:03 - remains centered in the page and so on
790:04 - okay so this is what happens when
790:07 - remember we were doing all this business
790:08 - of setting a of first creating a div and
790:12 - then centering it using margin zero Auto
790:15 - by adding left and right equal margin
790:16 - and at various break points adding
790:18 - various wids well bootstrap has already
790:20 - done that for us and you can simply add
790:22 - the class container and when you add the
790:25 - class container till about 768 pixels or
790:29 - so so till about the let's see what this
790:32 - means yeah till about 768 pixels it's
790:36 - going to occupy the full width no till
790:38 - about 576 pixels it's going to occupy
790:41 - the full width now at more than 576
790:44 - pixels it's going to be 540 pixels at
790:47 - more than 768 pixels it's it's going to
790:49 - be 720 pixels wide at more than 9 960
790:51 - pixels it's going to be 960 pixels wide
790:55 - and so on okay so it's it just gives you
790:58 - a nice centered div or or horizontally
791:01 - centered div on the page and you can put
791:02 - all your content inside this div okay so
791:05 - the container is going to contain all of
791:06 - the rest of your page content now of
791:09 - course you may not always want this what
791:10 - you may want is maybe you may want it to
791:13 - always occupy the full width if you want
791:15 - it to occupy the full width just use the
791:17 - class container fluid if you use the
791:19 - class container fluid and let me reload
791:22 - that page if you use the class container
791:24 - fluid then it's going to always occupy
791:26 - the full width of the page all right
791:29 - that's container fluid and then there
791:31 - are various steps in between you could
791:33 - do something like this you could say
791:35 - container SM and if you say container SM
791:38 - so up to the highest point of SM which
791:40 - is just before MD it's going to probably
791:43 - still use up okay or up to the size SM
791:45 - it's going to use up the full width and
791:47 - from the size SM it's going to become
791:49 - centered okay so container SM I think
791:51 - it's going to do the same thing as
791:53 - container for us up to 540 pixels it's
791:56 - going to take up the full width at at
791:57 - 560 or 576 pixels it's going to become
792:00 - centered you can also use container MD
792:03 - Now container MD is going to take up the
792:06 - full width till 768 pixels and at 768
792:09 - pixels it's going to start restricting
792:11 - its width and progressively increase
792:13 - size with break points similarly you can
792:15 - do container LG which is going to use up
792:18 - the full up to a certain large size and
792:21 - then after a certain point it's going to
792:23 - use the center okay so depending on when
792:26 - you want to constrain the content of
792:30 - your page you can decide which container
792:34 - you want to use and for now I'm just
792:36 - going to use set it back to div
792:38 - container and what that is going to do
792:41 - is given no matter what width I'm at
792:43 - it's going to just Center the content a
792:44 - little bit on the page have some padding
792:46 - left and right okay so that is the
792:49 - container that is the first basic thing
792:52 - no matter what you're doing in bootstrap
792:53 - what whatever page you're building the
792:55 - first thing you'll probably do is just
792:56 - create a
792:58 - container okay so one thing you can do
793:02 - as an exercise is maybe create a bunch
793:03 - of containers one below the other and
793:05 - give them all different container
793:07 - classes and see what happens to each of
793:09 - them as you resize the page now the next
793:12 - thing that we need to understand once
793:14 - we've talked about containers is the
793:15 - grid system so every container contains
793:20 - 12 columns you cannot actually see these
793:22 - columns right now but every container is
793:25 - inherently or internally divided into 12
793:28 - columns and then what you can do is you
793:30 - can decide to put content and you can
793:34 - decide how many columns that content can
793:36 - take up okay so here is an example you
793:39 - can you can just maybe have a bunch of
793:41 - dips you can have maybe 12 dips each of
793:43 - them takes up one column and there is
793:45 - also some space between the columns or
793:47 - you can have something like two two divs
793:49 - and you can have six of those divs
793:50 - taking up six columns or you can even
793:52 - combine things you can maybe have a div
793:54 - that takes one column you have have a
793:56 - div that takes two column next to it a
793:58 - div that takes some more columns next to
794:00 - it and so on okay so whenever you need
794:02 - to horizontally arrange columns in a row
794:05 - or so whenever you want to arrange divs
794:07 - in a row and you want to control their
794:08 - relative width that is when you use this
794:12 - grid system and the grid system is
794:14 - invoked using two classes so the first
794:18 - class is a row so let's say you want to
794:20 - create three divs here you want to
794:22 - create three divs and each of those divs
794:24 - should have an equal width so here's
794:27 - what you can do within your container
794:29 - remember all of this always happens
794:31 - within a container create a class create
794:33 - a div with a class
794:36 - row okay now we've created div with the
794:39 - class row nothing has changed here yeah
794:42 - nothing has changed here now I can
794:44 - create a div with the
794:47 - class
794:52 - column okay and let me just call
794:55 - this box
794:57 - one and let me also maybe give it a
795:07 - border let's give it a nice solid black
795:10 - border and let's create a couple more
795:12 - Dives like this okay so I'm simply
795:14 - creating a few I've created a row and
795:17 - that is going to Simply put things in a
795:19 - vertical order then I'm going to create
795:22 - a bunch of boxes here box two and box
795:26 - three okay and let's see what happens so
795:30 - you can see now that we have taken the
795:33 - container and then there is this row div
795:36 - that has been created and I can just go
795:38 - in and actually get to that row div here
795:40 - as well just by selecting inspect
795:44 - element yeah so there is this row that
795:46 - has been created and then Within that
795:48 - row we have these three columns let me
795:50 - just make the background white for these
795:53 - just so
795:55 - that you can actually see these
796:02 - clearly yeah so within the rows we have
796:10 - these within the rows we have these
796:12 - three columns okay box one box two and
796:14 - box three now something I can do is I
796:16 - can actually specify ratios for for
796:18 - these I can say call one which means I'm
796:21 - wanted to take up one out of 12 columns
796:23 - and I can say call two I want this to
796:25 - take up two out of 12 columns and I can
796:27 - say maybe call six so now you can see
796:31 - that I have this box one which takes
796:33 - roughly one 12th of the space available
796:35 - in that row okay this is the entire row
796:37 - and it takes up 1 12th of the space box
796:39 - two on the other hand takes up 2 12th or
796:42 - one six of the space and box three takes
796:44 - up six columns right so imagine there
796:47 - are 12 columns here and what we've
796:48 - specified here is call One Call 2 and
796:52 - call six are the relative column wids
796:55 - that should be taken up now of course I
796:57 - can play around with this let's say I
796:58 - want four columns for Row one and then I
797:01 - want two columns for this so 4 + 2 6 and
797:03 - then the remaining half goes here and
797:06 - let's say maybe what if I had three
797:08 - columns what would that do so now you
797:11 - see what happens when I have four
797:12 - columns here plus three columns here so
797:14 - that becomes 7 7 + 6 becomes 13 and then
797:18 - the next column automatically drops onto
797:21 - the next line okay so it's using Flex
797:23 - boox internally but you don't have to
797:25 - worry about Flex bases Flex grow Etc you
797:28 - just tell it how many columns uh how
797:30 - many columns should be taken up by a
797:32 - particular box and it's going to
797:34 - automatically uh arrange the wids and if
797:37 - the number of columns in a particular
797:38 - row goes higher than 12 then it's going
797:41 - to drop down into the next uh next line
797:43 - automatically okay now where this gets a
797:47 - little more interest testing is that you
797:49 - can actually modify the widths of each
797:52 - of these boxes based on the break points
797:56 - okay so we can start out like this we
797:58 - can just say call 12 which means we want
798:01 - box one box two box three all of them to
798:03 - take up all 12 columns okay so no matter
798:07 - what width I am at it is going to take
798:10 - up the entire width of the row and that
798:13 - is why even though it's it's supposed to
798:14 - be a row because box one takes up all 12
798:17 - columns box two drops onto the next line
798:19 - box three drops onto the next line and
798:21 - so on right so this is fine but maybe
798:25 - when I get to and this is maybe nice for
798:27 - a mobile layout I want to show three
798:29 - things one below the other but maybe
798:31 - when I get to a tablet or a MD layout I
798:33 - want to show maybe box two and box 3
798:35 - together or some other layout so then
798:38 - you could do something like this you
798:39 - could say that okay
798:41 - at MD so you can say call hyphen MD so
798:45 - what you're saying is when we hit the MD
798:47 - breakpoint of 7 68 pixels I want box one
798:50 - to take up only six columns okay so
798:52 - remember we are going mobile first so
798:55 - first everything takes up 12 columns but
798:58 - now I want box one to take up six
798:59 - columns so I'm going to come back in
799:01 - here and I'm going to add the class call
799:04 - md6 and with that you will see that as
799:08 - soon as I cross 768
799:11 - pixels box one starts taking up only six
799:14 - columns and not 12 columns now of course
799:16 - box two is still falling on the next
799:18 - line because there are not enough
799:19 - columns to fill its 12 and maybe then
799:21 - once again we want to use six columns
799:23 - for box two as
799:26 - well right and now you see what happened
799:30 - that up to 768 pixels all of them show
799:33 - up one below the other but as soon as we
799:36 - go into
799:37 - 767 769 pixels box one and box two come
799:41 - up side by side and the reason they're
799:43 - coming up side by side is because we
799:46 - have overridden the property at this
799:49 - break point using call md6 and call md6
799:52 - and at maybe at MD we still want to
799:55 - retain 12 for the third column so we
799:58 - don't technically we don't need this
800:00 - property because it's simply going to
800:01 - carry over from whatever is there here
800:03 - so whether I keep this or I don't keep
800:05 - this it's not going to make a difference
800:06 - it's box three is always going to take
800:08 - up the full width
800:12 - now let me also increase the body font
800:14 - size a
800:16 - bit
800:21 - oh let me just increase the font sizes
800:22 - of the
800:32 - columns yeah so that our columns are a
800:35 - little bigger I'm just using font sizes
800:37 - of
800:39 - 30 okay perfect so now I have box one
800:42 - box two and box three and this is on MD
800:45 - and now at some point we're going to now
800:46 - hit maybe the next layout which is going
800:50 - to be LG right so LG is going to be
800:53 - about 968 pixels or 992 pixels or
800:56 - so so there's no change yet but maybe on
800:59 - a very large screen I want to show all
801:01 - three columns side by side so in that
801:03 - case I can do something like this I can
801:05 - say call lg4 and I can apply that style
801:08 - to all of them so let me go
801:11 - into the first box and use call lg4 let
801:15 - me go into the second box and use call
801:16 - lg4 you can see now that as soon as we
801:19 - crossed about 96
801:21 - 996 pixels or
801:23 - so now box one and box two are no longer
801:26 - taking up half of the row they're only
801:27 - taking up 1/3 of the row which is four
801:29 - out of 12 columns and now we can maybe
801:32 - take box three and put this here on the
801:34 - corner so let me also
801:36 - apply call lg4 and now box 3 show shows
801:40 - up here as well okay and we could do
801:43 - this in a slightly different way as well
801:44 - we can maybe use call LG3 for the first
801:47 - two boxes and maybe six for the third
801:49 - box because the third box may have more
801:51 - content so now you see what we've
801:53 - achieved we've not written a single line
801:56 - of CSS but we've achieved this very
801:58 - interesting layout where first we have
802:00 - box one box two box three all three of
802:02 - these and you can put any content inside
802:04 - this maybe an image a heading and then a
802:06 - and then some text and then as soon as
802:09 - we or maybe a heading text and then some
802:11 - content as soon as we go into the tablet
802:14 - layout which is about this much then box
802:17 - one and box two come up side by side
802:19 - because we have more space now so we can
802:21 - do that and as soon as we go into LG
802:23 - then box one box two box three all show
802:25 - up side by side and they have the
802:26 - proportions that we need this is very
802:28 - very powerful and if you can Master
802:30 - using bootstraps grid and if you can
802:32 - know what are the right properties to
802:34 - use here then things are going to become
802:36 - really really easy for you okay so that
802:39 - is the bootstrap grid system using rows
802:42 - and columns now one thing I want to
802:44 - mention here that you have to have this
802:46 - row if you want to put put things into a
802:48 - column okay if I don't have this row
802:51 - class
802:53 - here
802:55 - then every all the divs inside the
802:57 - container are going to be one below the
802:59 - other you cannot avoid that although the
803:03 - column the number of columns they pick
803:05 - is still going to get picked so box one
803:07 - is picking three columns box two is
803:10 - picking three columns as well and box
803:12 - three is picking six columns right so
803:14 - that's they're picking up the right wids
803:16 - but they're not showing up in a single
803:17 - row because to to make them show up in a
803:20 - single row you have to drop them you
803:21 - have to wrap them in a particular row
803:25 - Dev okay so keep that in
803:28 - mind all right so that is the that is
803:32 - how this behaves on excess screens all
803:34 - columns take up the full row width and
803:35 - show one below the other on MD screens
803:37 - 768 and above column 1 and two take up
803:39 - half the row width while column 3 takes
803:41 - up the full row WID and on LG screens
803:43 - all three columns are on the same row
803:46 - and we can decide what are their
803:48 - relative
803:49 - proportions now I would encourage you to
803:51 - experiment with bootstraps grid system
803:53 - so there are a couple of resources you
803:55 - can check out one is the documentation
803:57 - itself and it has a bunch of different
803:59 - examples and you can just click this
804:01 - button and live edit these examples so
804:03 - it's going to open up a cloud editor for
804:05 - you and you can start editing this is of
804:07 - course the equal layout but you can also
804:09 - have these unequal layouts like this and
804:13 - you can do a whole bunch of things so I
804:15 - would encourage you to experiment with
804:16 - this there are are also a bunch of
804:18 - examples that are given along with the
804:20 - documentation so you can check these out
804:22 - as well okay make sure you get a strong
804:25 - a clear understanding of how the grid
804:26 - system works now apart from this you can
804:30 - also sometimes you may not need a column
804:32 - on the left and a column on the right
804:34 - you may just want to maybe just shift a
804:35 - particular column a little bit so then
804:37 - you can also use something called an
804:39 - offset so an offset is useful when you
804:41 - want to add some empty space before a
804:43 - column and you can apply an offset using
804:46 - the dot using the off offset star class
804:49 - where offset represents the number of
804:50 - columns that you want to leave empty for
804:52 - a specific breakpoint for example we
804:55 - could have something like this we have a
804:57 - div and the we have a container inside
805:00 - it we have a row and inside it we have
805:02 - just a single div okay now we don't have
805:05 - multiple divs we have just a single div
805:06 - and I'm actually just going to copy this
805:08 - class from
805:12 - here and I'm going to get rid of all of
805:16 - these so now I have a row but what I
805:19 - want is I want this box to only take up
805:22 - six of the columns and I want it to
805:24 - leave three columns on the left and that
805:27 - is what the offset does so when I say
805:28 - offset three it's going to leave out
805:30 - three columns on the left and it's going
805:31 - to start from the fourth column if I set
805:34 - that to offset one you can see that it
805:36 - leaves one column here empty and it then
805:38 - spans six columns I can of course then
805:40 - maybe set it to call 7 and you can see
805:43 - that it actually does that and I can
805:45 - also then play around with break points
805:46 - I can say that maybe this offset should
805:48 - kick in only at MD so when I have the
805:53 - when I have the basic layout on mobile
805:55 - there is no offset here the column it
805:58 - shows up right from the left Edge and
806:00 - maybe there's something else I want to
806:01 - put here but as soon as I cross 768
806:04 - pixels you will notice here as soon as I
806:06 - cross 768 pixels there this offset gets
806:09 - added okay and I can control this offset
806:11 - maybe I want this to be offset 6 in
806:14 - which case it is going out now offset
806:16 - has this property that if you set too
806:18 - high offset it's simply going to go out
806:20 - of the of the Rope it's not going to go
806:23 - into the next row because that doesn't
806:24 - really make sense for an offset so yeah
806:28 - so keep that in mind that if you don't
806:29 - actually need to create a column you
806:31 - just need to maybe shift a column a
806:32 - little bit you can offset and of course
806:34 - you can combine things here as well so
806:36 - you can do something like maybe this is
806:38 - three columns with an offset of two and
806:41 - above this you have another
806:44 - box so this is box zero and maybe this
806:47 - is one
806:54 - column yeah so you could have something
806:56 - like this you have this one column box
806:58 - over here then you have a three column
806:59 - offset and then you have a three column
807:01 - box over here okay so you can create all
807:03 - sorts of interesting layouts uh using
807:06 - offsets so that is all about offsets
807:10 - in the bootst grid system next I want to
807:15 - talk about something called gutters now
807:17 - in the grid system you can you have 12
807:20 - columns but those columns do not have to
807:23 - essentially necessarily stick together
807:25 - to each other you can have a gap between
807:27 - those
807:29 - columns and you can specify gaps between
807:32 - those columns using the gutter or the G
807:34 - or the G Class so you can specify at the
807:37 - row level you can simply say that you
807:39 - when you're creating a row you want the
807:40 - gutter to be of a certain size okay and
807:44 - the there are sizes the sizes go from 0
807:46 - to five and it's not 0 to 5 pixels you
807:49 - can actually check inspect and check I
807:51 - believe it's zero time I believe it's a
807:53 - multiples of four or something like that
807:55 - so a gutter of three would essentially
807:57 - result in 3 fours about 12 pixels or
808:01 - there's some kind of a ratio that that
808:02 - it actually ties into uh there is some
808:05 - responsive layout that it handles but
808:07 - just think of the gutter sizes as a sort
808:10 - of a scale of 0 to five that you can
808:11 - modify things for okay so let us come
808:14 - back here and let us maybe revert to the
808:16 - columns that we have so we had three
808:17 - columns
808:22 - here yeah so we have three columns
808:25 - here and all these three columns you can
808:28 - see show up like this uh and there's a
808:30 - sort of a responsive design in play here
808:32 - already now if I just add G3 you can see
808:35 - that some content or
808:39 - some space has been added on the left
808:42 - and right and also between these columns
808:43 - and for now let me just make these very
808:45 - simple columns so I'm just going to make
808:46 - it call
808:49 - three each of these is going to be a a
808:52 - call
809:00 - Four yep so you have a call 4 and maybe
809:05 - G3 doesn't seem to be working okay yeah
809:08 - it is yeah so the gutters are the spaces
809:10 - and as we increase the space you'll see
809:14 - that the gutter should
809:16 - increase
809:18 - let's see well this doesn't seem to be
809:19 - doing the
809:21 - job probably because of
809:31 - the yeah let's add a border to
809:46 - this
809:52 - okay so let's take a look at this so you
809:54 - can see that there is some Gap here and
809:56 - there is some Gap here now if we remove
809:58 - this
810:00 - gutter you can see that some of that Gap
810:02 - disappears now that Gap should also show
810:04 - up between columns I am not 100% sure
810:07 - why it's not showing up right now maybe
810:08 - it's because I maybe that that Gap is
810:11 - actually getting is going to get added
810:14 - inside the Border that's why we're not
810:15 - seeing it um but yeah so what the gutter
810:19 - does is it adds gaps on the left right
810:22 - and between your columns right so you
810:24 - can check maybe
810:34 - G4 or let's just try
810:38 - gx4 and G
810:41 - y4 yeah so gutters should add gutter
810:44 - should add gaps I believe it's because
810:47 - it's probably going to overlap with the
810:48 - Border here that is why it's not showing
810:49 - up but whenever you want to add spacing
810:53 - between the columns then you can simply
810:56 - set the gutter on the row variable okay
811:00 - so you can check out the documentation
811:02 - for gutters here this is this is exactly
811:05 - what it should look like so there should
811:07 - be some column there should be some uh
811:10 - space here some space here and some
811:11 - space here on the right and similarly
811:13 - here you can see that there is a gutter
811:17 - on the left and right and that gutter
811:19 - can also be changed customized on the
811:21 - left right and bottom as well so you can
811:22 - have some spacing between the columns
811:24 - you can have some spacing between the
811:26 - rows when things overflow into the next
811:28 - line and that is being set here you can
811:30 - see using
811:32 - gy5 and so
811:34 - on okay so that is all about how you use
811:38 - the bootstrap grid system so the key
811:40 - things for you to keep in mind are
811:42 - always use a container and the three
811:43 - types of container are a container that
811:46 - is always kind of centered and
811:47 - restricted and then a container that is
811:49 - completely fluid that always takes up
811:51 - the full width of the page and a
811:53 - container that takes up a full width up
811:54 - to a certain breakpoint and from that
811:56 - breakpoint it remains centered on the
811:58 - page okay so just use bootstrap
812:00 - containers don't you don't have to
812:01 - create your own containers or add your
812:03 - own break points or maximum wids
812:05 - generally speaking your bootstrap
812:07 - container should do the job for you okay
812:10 - now apart from containers you have rows
812:12 - and columns so you can create a row and
812:14 - then you can put a bunch of boxes in a
812:16 - row and then you can specify their
812:17 - widths using the 12 column grid system
812:20 - and you can change the widths based on C
812:22 - certain break points you can also then
812:24 - use offsets and you can also specify
812:27 - specific gutters and based on uh the Gap
812:30 - that you need between your
812:32 - columns okay now next thing I want to
812:35 - talk about bootstrap utility classes
812:37 - because this is also something that
812:38 - we're going to use when we start
812:39 - building our websites so utility classes
812:42 - in bootstrap are single purpose reusable
812:45 - classes that can help you quick quickly
812:47 - style and modify elements in your
812:49 - project and they include various aspects
812:52 - of styling such as spacing text
812:55 - backgrounds Etc the key idea here is for
812:57 - a single line of CSS property that you
812:59 - might want to put in the CSS file you
813:01 - can simply include a utility F utility
813:03 - class that's going to do the job for you
813:05 - so here are a few utility classes that
813:08 - uh we're going to look at the first is
813:10 - spacing related utilities spacing simply
813:12 - means margins and paddings so bootstrap
813:15 - provides a bunch of classes like this so
813:17 - you can say Mt hyphen 3 and what that
813:21 - does is it says margin top should be set
813:23 - to three and again this is not three
813:26 - pixels this is just on a scale of 0 to
813:28 - five this is a certain five is a very
813:31 - high pad margin 0er is zero margin so it
813:33 - is just somewhere in between and you can
813:35 - verify what that actual value is by
813:37 - inspecting it in your browser and
813:39 - similarly you can say mt3 or you can say
813:42 - mb2 okay so T includes t means top b
813:45 - means bottom so just using these few
813:48 - characters we've specified the margin
813:49 - top and margin bottom or we could also
813:52 - do something like this we could do p
813:54 - hyphen 4 which means that you want a a
813:57 - padding of four units not four pixels
813:59 - four units on all sides let's see what
814:02 - that actually
814:03 - means so let's maybe go in here get rid
814:06 - of this container over here and simply
814:09 - post these in so you can see now this
814:12 - particular div that we have here this
814:15 - div has a top margin of three and what
814:17 - do we mean by three well if we just in
814:19 - look at the styles for this div the
814:21 - computed
814:24 - Styles you will see that this div has a
814:26 - margin of 16 so three simply means maybe
814:29 - about 16 and this div has a bottom
814:32 - margin of two so that is 8 so I believe
814:35 - it works 1 is 4 and 2 is 8 and 3 is 16
814:40 - and 4 is 32 and so on so yeah so mt3
814:45 - means a margin of 16 pixels at the top
814:47 - and M mb2 means a margin of 48 pixels
814:51 - and you can go ahead and change this you
814:52 - can change this to maybe mb5 and see
814:55 - what that changes it to now the margin
814:57 - becomes 48 all right so you can always
815:00 - check what these margins are and let's
815:02 - check this div so this div does not have
815:04 - margins but this div has paddings so it
815:06 - has a padding of four pixels all around
815:09 - it or a padding of 24 pixels all around
815:11 - it so P4 simply adds 24 pixels on all
815:15 - sides I could also do PX4 and py3 in
815:18 - case I wanted to just X direction is
815:20 - left and right and Y direction is top
815:22 - and bottom now you can see that top and
815:24 - bottom py3 applies a padding of 16
815:27 - pixels and left and right py4 applies or
815:31 - PX4 applies a padding of 24 pixels so
815:35 - this is how you can quickly apply
815:36 - paddings and they've already set some
815:38 - some default values so that the spacing
815:40 - doesn't look very off so always just try
815:43 - out maybe mt1 mt2 mt3 and see which one
815:45 - works best for for the
815:47 - layout okay so those are the spacing
815:49 - related utilities apart from that we can
815:53 - also
815:54 - use utility classes for styling text for
815:57 - example you maybe want to Center some
815:59 - text or maybe you want to make these
816:01 - make it italic or so FST stands for font
816:04 - style or maybe you want to change the
816:06 - font weight you want to change the font
816:07 - weight to bold so all of those things
816:09 - are something again you can do using
816:11 - utility classes so I can come back in
816:13 - here and I can just drop this in and you
816:18 - should see that this text is now bold
816:20 - because it has the class FW bold and by
816:24 - the way if you're ever curious what
816:26 - styles does a particular class actually
816:27 - apply you can come into the inspect
816:30 - tools and you can check the Styles Tab
816:32 - and in the Styles tab you can see that
816:34 - the class FW bold applies the font
816:36 - weight of 700 okay so that's what it
816:39 - actually does so there's a very deep
816:42 - level of CSS inspection that you can do
816:44 - whenever you're looking at a website or
816:45 - maybe youve just use some bootstrap
816:47 - class and you want to know what exactly
816:49 - it does just right click on the text
816:52 - just click
816:54 - inspect oops Yeah just click
817:01 - inspect just click inspect and then you
817:04 - can either check the layout here using
817:08 - in the computer tab or you can go into
817:09 - the Styles T Styles Tab and see the
817:12 - exact styles that have been applied for
817:14 - each of the selectors that applied to
817:16 - this particular file okay or to this
817:18 - particular element and FW bold is
817:21 - clearly coming from bootstrap and it
817:22 - sets a font we to bold let's check this
817:25 - one this FST italic this checks this
817:28 - sets the font style to italic and then
817:32 - we have text centered this is simply
817:34 - going to Center the text of course you
817:36 - could also do text right or something
817:37 - like that and that is going
817:41 - to put the text on the right maybe it's
817:44 - text align right
817:48 - okay I don't know so yeah maybe there's
817:49 - a way to align the text to the right I
817:52 - would just probably look it up in the
817:54 - documentation so how do you know these
817:56 - how do you know what utility classes are
817:58 - available well you just have to check
817:59 - the documentation if you check the
818:01 - documentation of bootstrap you can see
818:03 - that there is a section called utilities
818:05 - and then there are various utilities for
818:08 - text display Flex Etc so we were looking
818:12 - at text and you can see that there is
818:13 - text alignment so you have oh you have
818:16 - text start and text end so if you want
818:18 - to align something right you have to say
818:20 - text end and this is because it supports
818:22 - right to left layouts as well you can
818:24 - see that now text has moved to the end
818:26 - so I would just keep the utility section
818:29 - of bootstrap open and look it up how is
818:31 - it better than typing out classes in
818:33 - your CSS file because by using a utility
818:37 - class you are collocating the style with
818:40 - the HTML so at a glance it's going to be
818:43 - very easy for a developer or just for
818:45 - you to be able to identify ify what are
818:46 - the styles that are getting applied to a
818:48 - particular HTML element okay so utility
818:50 - classes are great because they just
818:52 - bring the Styles into the HTML and help
818:54 - you get a clear picture of what the what
818:58 - the element is going to look like okay
819:01 - then there are a bunch of background
819:02 - utilities so you could do something like
819:04 - this you could let's say set the
819:05 - background color to the primary color
819:07 - which is the blue that we have set so
819:09 - let's create this div over here let's
819:12 - get rid of these text utility classes
819:15 - and this this is a particular div let's
819:18 - format
819:21 - that yeah so you can see that this div
819:23 - has a primary background color which is
819:25 - the blue color that we've set and it has
819:27 - the color of the text white so you can
819:29 - say text white that is going to Simply
819:30 - change the color of the text and I could
819:33 - also do something like P4 let's say if I
819:37 - wanted to add some padding to it and I
819:39 - could also add borders and things like
819:41 - that so there are lots of utility
819:42 - classes available that you can apply
819:44 - here there are also dis display related
819:46 - utilities so let's say you want to
819:48 - change the display property remember you
819:50 - can have block Flex inline all of those
819:53 - things uh you can do all of that using
819:56 - display properties as well so let's look
819:58 - at an
820:00 - example so now we've created this span
820:03 - and we've set its display to inline
820:05 - block using D hyphen inline hyphen block
820:08 - so the shortcut or the Shand for the
820:10 - display utilities D and hyphen inline if
820:13 - you wanted to show it in line or hyphen
820:14 - block if you wanted to show it um block
820:17 - within in line so all of these have
820:18 - different meanings this is going to turn
820:21 - it into a flex container and again you
820:23 - can verify you can just go in here click
820:25 - inspect and you can check that this is
820:27 - actually this has the display type flex
820:30 - and you can verify that it actually has
820:31 - a display type Flex by putting a bunch
820:33 - of items inside it so let's say let me
820:35 - put item
820:37 - one item
820:39 - two item
820:41 - three you can see that they show up in a
820:43 - row of course if this was not flex but
820:45 - if it was
820:47 - block then item one item two item three
820:49 - would show up one below the other okay
820:52 - um but and I could also have set it to d
820:55 - none so I could have done something like
820:57 - this that this is just simply not
820:59 - visible and here's one trick let's say
821:01 - you want to make something visible for a
821:04 - particular size for a particular break
821:06 - point so you can say d none and then you
821:09 - can say d MD block or let's maybe say
821:14 - DSM block and let's say DMD
821:18 - Flex okay so what we saying here is I
821:22 - don't want this div to show up by
821:24 - default I want this div to show up as
821:28 - block on SM and higher which means 576
821:30 - pixels and higher and then on 768 pixels
821:34 - and higher I want it to show up as a
821:35 - flex div which means its items are going
821:37 - to show up in a row okay so here this
821:40 - and let's just give it a little bit of
821:41 - padding as well so let's give it P3 and
821:44 - let us give it uh BG
821:48 - blue so that you can actually see what's
821:50 - happening here okay so right now that
821:54 - div is not showing up item one item two
821:55 - item three let's get rid of this upper
821:59 - span and now if I just increase it
822:08 - slightly okay I guess DSM blog did not
822:12 - actually work out here for some
822:14 - reason
822:20 - I'm not sure why but DSM block should
822:22 - also show up but you can see here when
822:24 - we set when we set it to uh let's just
822:28 - put it this
822:31 - way okay that initially it's set to
822:33 - display none and when we Clause when we
822:36 - go to
822:37 - MD we want it to show up as
822:44 - Flex
822:51 - yeah okay let's just look let's just do
822:53 - this so d none so it is none by default
822:56 - and when we go into the SM layout which
822:58 - is the small layout it's going to turn
822:59 - into block so you can see that below by
823:03 - at this point it is not visible at all
823:07 - and let's just set this to BG
823:10 - primary or how do you set the background
823:13 - yeah BG primary should be fine
823:18 - yeah so it's not this div is not showing
823:20 - up here but as soon as we cross
823:23 - 569 pixels or 5 576 pixels then this
823:27 - becomes visible and you can see that it
823:29 - is using the layout block SM block and
823:32 - let us add DMD Flex here so that when we
823:35 - cross 768 pixels it should show up as a
823:37 - flex container so all its items should
823:40 - go into a row and you can see now that
823:42 - its items have gone into a row okay if I
823:44 - come back at SM it is blocked so its
823:46 - items show one below the other and it is
823:48 - just not visible on small screen on
823:50 - excess screens okay so these are the
823:53 - display utilities is very useful for
823:55 - just hiding and displaying things
823:57 - sometimes you may want to do it the
823:58 - other way around and of course we it
824:00 - also contains a bunch of utilities
824:03 - around Flex box so one of course is D
824:05 - Flex or DMD Flex or DSM Flex so all of
824:08 - these utilities you can trigger them at
824:10 - specific break points so you can say
824:11 - dyen MD or BG hyphen MD hyphen blue or
824:15 - primary Etc and all of these
824:19 - utilities um can then also and there are
824:22 - a bunch of flexbox related utilities as
824:24 - well specifically the few the two you
824:26 - might use and are justify content and
824:29 - align items so let's just take a look at
824:32 - an example of this so here these are now
824:34 - this is now Flex div okay
824:38 - and let me just also give it a big font
824:44 - size
824:49 - yeah so this is now a flex container at
824:52 - MD screens and I could do something like
824:54 - this I could
824:56 - say
824:57 - justify
824:59 - content
825:01 - Center and now you can see that along
825:04 - the main axis because Flex direction is
825:06 - row by default all the content is
825:07 - Justified at the center or I could say
825:11 - space
825:13 - between or I believe it's just between
825:16 - yeah so now we have added space between
825:18 - the content so that is the other way
825:20 - this can work or I could say justify
825:22 - content
825:25 - end and now all of the content is
825:27 - Justified at the end similarly you can
825:29 - have align items as well so let's say we
825:31 - give this a height so let's say we give
825:33 - this
825:34 - a height of 300
825:37 - pixels now I could do this I could say
825:40 - align items end and you can see that
825:44 - items 1 2 3 have all moved to the end
825:47 - right and the most common use case would
825:49 - be probably align item Center where you
825:50 - want to Center them along the cross axis
825:53 - and sometimes you want to combine that
825:55 - with justify content Center and what
825:58 - that essentially ends up doing is it
826:00 - centers no matter where you are of
826:02 - course the flex gets triggered only at
826:05 - at LG or at MD but no matter how you
826:09 - increase the height or width of the page
826:11 - the content is going to remain centered
826:13 - vertically and horizontally okay you
826:15 - have all these nice utilities where you
826:17 - don't have to go into your styles.css at
826:19 - all you can simply just add them at the
826:22 - class level in the HTML so I encourage
826:25 - you to create a simple layout using the
826:27 - bootstrap F utility classes where you
826:29 - create a container with three equal
826:31 - width columns then set the top and
826:33 - bottom padding of each column to size
826:35 - three and then apply a different
826:37 - background color to each column and
826:39 - ensure that the text inside is white and
826:41 - then try to Center the text horizontally
826:43 - and vertically within the columns so try
826:45 - to do all of this and make sure and also
826:48 - maybe throw in some changes at specific
826:51 - breakpoints and make sure that you are
826:53 - able to do all of this without writing
826:55 - anything within the CSS file okay you
826:57 - have to look up the documentation and
826:59 - you have to achieve a certain layout
827:02 - just using bootstrap CSS utility classes
827:05 - and let's see if you can do that the way
827:07 - to become comfortable is just to
827:08 - exercise there's no way you can remember
827:10 - all of these things it's just the more
827:12 - you use them the more they get committed
827:14 - to memory
827:16 - we've now learned about the bootstrap
827:18 - grid system it's pretty extensive it
827:20 - allows you to do a lot of interesting
827:22 - things we have learned about bootstrap
827:24 - utility classes they allow you to apply
827:26 - text Styles background Styles Flex
827:28 - Styles display Styles Etc now we are in
827:31 - a position to actually start building
827:33 - out our page and we're not going to
827:35 - write the HTML of our page from scratch
827:38 - completely in the sense that we're not
827:40 - going to just use grid and styles we're
827:42 - actually going to use some components
827:44 - that the the creators of bootstrap have
827:46 - already put together for us okay so
827:49 - bootstrap offers a wide range of
827:51 - pre-built components and these
827:53 - components are designed to streamline
827:54 - the development of responsive mobile
827:56 - first projects and these components
827:59 - provide a solid foundation for creating
828:01 - visually appealing and also highly
828:02 - functional websites now there are a
828:05 - bunch of different components and we'll
828:07 - go through various uh we'll go through
828:08 - some of them definitely not all it's a
828:11 - huge library with a whole bunch of
828:12 - components but the few categories are na
828:15 - navigation components so things like
828:17 - navigation bars headers Footers
828:20 - breadcrumbs pagination that is something
828:22 - that we'll find in bootstrap then there
828:23 - are layout components so you can create
828:25 - cards you can create list groups you can
828:27 - create media objects like images Etc
828:31 - there are a bunch of form related
828:32 - components so the creators of bootstrap
828:34 - have set up SE special classes for
828:37 - rendering forms nicely so that you don't
828:39 - have to do a lot of work to show forms
828:41 - on your web pages there are a bunch of
828:43 - modal components which is basically
828:45 - popups that overlay the entire screen or
828:48 - things like dropdowns and Tool tips that
828:50 - you can add um then there are of course
828:53 - like a bunch of utility components like
828:55 - small alerts and badges and small things
828:57 - that you can use to highlight important
828:59 - information within your page and there
829:01 - are also a lot of interactive components
829:03 - and this is where a lot of the
829:04 - JavaScript is used because remember we
829:06 - used a we imported a JavaScript module
829:08 - as well so that's where we have like
829:10 - accordians carousal tabs Etc and I
829:13 - encourage you to check out these three
829:15 - not going to cover them today so they
829:17 - will possibly be get covered as part of
829:19 - a future assignment or something but I
829:21 - encourage you to maybe play around with
829:23 - these a little bit
829:25 - okay so you can check out the various
829:27 - components offered by bootstrap here so
829:29 - bootstrap has this section called
829:31 - components in its documentation and
829:35 - there are a whole bunch of components
829:36 - that you can pick up so I'll I'll let
829:38 - you check these out and then there are
829:40 - also several examples on bootstrap's web
829:43 - page on how to use these comp components
829:45 - in a proper page so here there are some
829:48 - common patterns for building headers nav
829:50 - bars building the hero or sort of the
829:52 - main section maybe building some feature
829:54 - sections building sidebars so you can
829:56 - create all sorts of interesting layouts
829:58 - using bootstrap components so check out
830:01 - the documentation for components and
830:02 - maybe also check out examples so
830:04 - whenever you're working on a project
830:06 - these two pages are going to contain a
830:08 - lot of useful information for you so
830:10 - with that let us redesign the Jovian
830:12 - careers website so this is the Jovian
830:14 - careers website right now this is what
830:16 - it looks like there's a nav bar there's
830:17 - a banner image there's this about
830:19 - section employment opportunity submit
830:22 - your application Etc so let's redesign
830:24 - the careers website step by step using
830:26 - bootstrap components as mentioned in the
830:29 - problem statement so the first thing
830:31 - we're going to do is we're going to add
830:32 - some links in the navigation bar and
830:34 - show a collapsible menu on mobile
830:36 - devices we'll see what that means we'll
830:39 - also show a list of jobs using cards on
830:41 - mobile and on table we're going on
830:42 - desktop we're going to use a table and
830:44 - we're going to make the color scheme Ty
830:46 - typography and layout consistent and
830:48 - aesthetically pleasing okay so let's
830:51 - start with the Navar and this is where
830:53 - we can use bootstrap's Navar component
830:55 - so we can come in here and you can see
830:57 - here that there's a component called
830:59 - Navar and a component essentially is
831:02 - simply a bunch of HTML and CSS along
831:06 - with some special classes so the way you
831:08 - use a bootstrap nav bar is basically by
831:11 - adding a class nav bar to a nav element
831:14 - and there are a bunch of classes that
831:16 - need to be added so the information
831:18 - about the classes that need to be added
831:20 - are here there's this navbar brand
831:22 - navbar nav navbar Toggler Navar text
831:25 - collapse Etc and naar scroll so the best
831:29 - way to actually do this is to maybe go
831:31 - through the examples that have been
831:33 - given on the page and pick the example
831:36 - that is closest to what you want to
831:38 - achieve okay so here is an Navar which
831:40 - contains this maybe this could become
831:42 - the logo and maybe these could become
831:44 - the links we don't need this form as
831:46 - such so we may not need this but there's
831:48 - and so this is an example example Navar
831:51 - and this is the code for that example so
831:53 - what you can do is you can simply copy
831:55 - this code and paste it now remember
831:57 - whenever you paste code you should study
831:59 - it line by line to know exactly what it
832:01 - does okay so copy this code and paste it
832:04 - in your HTML and that will give you a
832:05 - Navar and there are also various other
832:07 - examples so this is like a plain nav bar
832:09 - simple nav bar uh you can check out
832:11 - these two as well this is a nav bar with
832:13 - an image this is an AB bar with an image
832:16 - and some text this is an AB bar with a
832:19 - just a bunch of links I think this is
832:21 - something that we might be able to
832:23 - use and then there are a bunch of
832:25 - different examples so you can you can
832:27 - also embed forms within the nav bar I
832:30 - think I am simply going to maybe just
832:33 - pick the first let's pick a very basic
832:35 - one Navar with a bunch of links because
832:38 - that's what I want ultimately so let me
832:40 - pick this up and let me start
832:42 - customizing it step by step okay okay
832:46 - let's get rid of this
832:50 - and let us just maybe bring this make
832:54 - this a little smaller and make this a
832:56 - little smaller as
833:00 - well let's reload this okay so this is
833:03 - what we have no change here now let me
833:05 - just come in here and replace this
833:07 - navbar div with the code that I have
833:10 - just copied over okay so this is the
833:12 - code that I've copied over and this code
833:15 - results in this nav bar being added to
833:17 - my page all right well so first thing I
833:21 - want to do is I'm just going to study it
833:24 - line by line and I'm going to make some
833:25 - changes to it so all right I have this
833:28 - class navbar and I want this Navar to
833:32 - show so it's going to show up in a
833:34 - collapsed form like this you can see
833:36 - that there's a button
833:38 - here there's a button here and when I
833:41 - click on this button it opens up this
833:42 - menu so bootstrap automatically gives me
833:45 - this nice mobile drop- down menu so that
833:48 - on mobile I there's no space to show the
833:50 - links so it's going to show up in this
833:51 - button so that's nice now I can specify
833:54 - when I want it to expand do I want it to
833:56 - expand on small screens medium screens
833:59 - or large screens So currently it is set
834:01 - to LG which means when the width of the
834:03 - page crosses 992 pixels I'll have to
834:06 - maybe zoom out a little
834:08 - bit yeah but when the width of the page
834:10 - crosses 990 pixels or so then this gets
834:14 - shown normally otherwise this getss
834:16 - shown like this maybe I don't need
834:18 - expand LG maybe I can do with expand MD
834:21 - so yeah so you can see here that up to
834:23 - the MD breakpoint which is about 768
834:26 - pixels it's going to show up like this
834:28 - and after the MD breako it's going to
834:30 - show up like this okay so that's what
834:32 - these two classes mean Navar is simply
834:34 - going to trigger the entire Navar
834:36 - component um for this particular element
834:39 - and then the BG body tertiary I believe
834:41 - this is simply the background color I
834:43 - don't need that so I can I've gotten rid
834:45 - of the background color what I do want
834:47 - is I want to add this nice shadow I want
834:51 - to add like a small Shadow here which I
834:53 - have which we have on the Jovian website
834:55 - you can see that we have this nice
834:56 - subtle Shadow below the nav bar so I'm
834:59 - going to try and add that shadow and I
835:01 - believe there is a utility class for
835:02 - adding Shadows I believe you just say
835:04 - shadow and that's going to add a utility
835:07 - Shadow here but this Shadow is too big I
835:10 - can make that smaller so there's like a
835:12 - shadow SM utility class again something
835:14 - that you can just search online how to
835:16 - add a shadow and bootstrap and you can
835:18 - just find it online on Google or chat
835:20 - jpt okay so now our nav bar has a shadow
835:23 - that is nice next we have this container
835:27 - fluid so we have this Navar it's going
835:30 - to take up the full width of the page
835:32 - what do I want do I want it to take the
835:34 - full width of the page well maybe I
835:36 - wanted to take the full width of the
835:37 - page
835:38 - till the medium screen but for LG and
835:42 - bigger I want it to be centered okay so
835:45 - I'm just going to do this I am going to
835:48 - pick yeah so I'm just going to maybe
835:51 - make it fluid I'm just going to make it
835:54 - LG uh at LG it's going to become
835:56 - centered and it's going to remain fluid
835:59 - for MD and Below okay
836:02 - so remember what this container is doing
836:05 - is this container is deciding whether
836:07 - the entire Navar should be centered on
836:09 - the page or not now if I don't have this
836:11 - container LG you will or if I just make
836:14 - it container fluid it's always going to
836:17 - span from the left Edge to the right
836:19 - Edge okay and that is different from the
836:21 - toggle the toggle the toggle is
836:22 - controlled using the Navar expand the
836:25 - container fluid decides whether the
836:26 - Navar takes the full width of the page
836:28 - or not let me just set it for now as
836:32 - container um MD or container yeah
836:37 - container MD so from for MD screens and
836:40 - bigger it is going to be centered on the
836:42 - page okay so that is what this this does
836:45 - so far this is fine okay then we have
836:47 - this brand Navar okay I think this is
836:49 - where I might want to put the Jovian
836:51 - logo so I'm just going to grab the
836:52 - Jovian logo from here I have already put
836:56 - this in here so I'm just going to grab
836:58 - the Jovian logo so we have a couple of
837:00 - logos there's one logo that is going to
837:02 - show up on small screens which contains
837:06 - just the icon does not contain anything
837:08 - else so let me remove this text Navar
837:10 - over here and let me just put the
837:13 - Jovian I
837:16 - icon and you can see that it's going to
837:19 - show up on small screens but as soon as
837:21 - I
837:22 - hit yeah so you can see that I have
837:24 - given it the class DMD none which means
837:26 - it's going to show up on small screens
837:28 - but as soon as we hit the MD breakpoint
837:31 - it is going to stop showing up okay and
837:33 - why do we have that because for bigger
837:35 - screens or for MD breakpoint actually
837:38 - want to show the full Jovian icon or the
837:40 - full Jovian logo with the text so let's
837:43 - put this in here okay okay we given it I
837:45 - I don't think it needs an ID anymore so
837:47 - I think the ID can be gotten rid of and
837:51 - even the height may not be necessary but
837:52 - it's fine let me just keep the height
837:54 - for now okay so let's get another Jovan
837:57 - logo for bigger screens so let me grab
837:59 - the Jovin logo with text so this is
838:02 - simply again the Jovian logo with
838:05 - text so again it's an image tag and what
838:09 - we're seeing here is that it is hidden
838:11 - by default so it has a display of none
838:14 - but from the MD breakpoint which is 768
838:18 - pixels we wanted to show up in line okay
838:22 - so this is what that ultimately results
838:24 - in that up to MD we have the smaller
838:26 - logo which contains just the icon and
838:30 - then beyond MD screens we have this
838:32 - bigger logo which contains the actual
838:35 - Jovian logo Okay cool so our Navar is
838:40 - almost ready I think we're almost ready
838:42 - to go ahead I let's see what we have
838:44 - here we we have this Navar Toggler of
838:46 - the type button if I understand
838:48 - correctly I think it what it's doing is
838:50 - basically
838:51 - simply setting this button so this
838:54 - button is the button that is rendered
838:56 - here so this is simply the toggle button
838:58 - so I can also maybe just add a
839:02 - quick uh comment here so this is the
839:05 - toggle button and this toggle button
839:07 - only shows up till MD because after MD
839:09 - it is going to just uh expand
839:11 - automatically and maybe I can add a
839:13 - small
839:15 - uh comment here saying this is the
839:18 - logo okay so now in my navbar I have the
839:22 - logo and I have the toggle button all of
839:25 - this is fine now in the Navar we have
839:29 - and in the toggle button we have this
839:31 - that it controls or it Targets this
839:33 - Navar nav and the Navar nav happens to
839:36 - be this div which contains a list inside
839:38 - it okay so it's not visible until we hit
839:41 - the MD breakpoint and then from the MD
839:44 - break point it becomes visible and we
839:46 - can verify this by clicking inspect and
839:49 - let me just turn off the device mode for
839:51 - now you can see that this ID Navar
839:58 - nav ID Navar nav is visible here but if
840:02 - I reduce the width a little bit it's not
840:04 - going to be visible okay so this is the
840:07 - nav all all right this is fine now what
840:10 - do we want to do here well we want to
840:13 - maybe first edit these links so let's
840:16 - see it has collapsed Navar collapse I
840:18 - don't think there's any change we need
840:19 - to do here this seems fine ID seems fine
840:21 - so I'm verifying every single line of
840:23 - code this is very important when you are
840:25 - working with bootstrap so let's see
840:27 - let's make the first link instead of
840:29 - home let's make the link
840:32 - courses and let's make this
840:35 - link
840:37 - programs and let's make this
840:43 - link
840:45 - YouTube and let's make this final link
840:48 - sign in so in case somebody wants to
840:50 - sign in here from the careers page they
840:52 - can sign in okay so now you see now we
840:54 - have courses programs YouTube sign in
840:57 - okay looking good so far now of course
840:59 - there are some styles that have been put
841:00 - in here so I think I can remove those
841:02 - Styles let's see the class is nav item
841:07 - for all of
841:10 - these and I believe we can simply change
841:13 - the actual HFS first as well let me just
841:16 - set this
841:19 - to jan.com
841:22 - SL
841:25 - learn so that is the link that I want
841:28 - the courses to go
841:31 - to and this is not the current page so
841:33 - this current page is causing the courses
841:35 - to look slightly different from the
841:37 - programs in YouTube so I'm going to
841:38 - remove this ARA current current page so
841:41 - that all of them look
841:42 - similar and I'm going to to remove this
841:44 - active as well so that yeah because all
841:47 - of these are going to some output So
841:50 - when you say active it's just going to
841:51 - give it a special style so I'm just
841:53 - going to remove this active as well so
841:55 - you can try out removing each class and
841:57 - see what happens and that's a great way
841:58 - to understand what these classes are
842:00 - doing okay then we have the second nav
842:02 - item and I think I also wanted to open
842:05 - in a new tab so I'm also going to say
842:07 - Target equals underscore
842:11 - blank okay so now when I click on this
842:13 - it's actually going to open the Jovian
842:15 - courses in a new tab so that is the
842:18 - courses nav item let's now fix the
842:21 - programs nav item as
842:23 - well I think I'm going to send it to the
842:25 - same
842:27 - location so we have the courses nav item
842:30 - then we have the programs now item both
842:31 - of them are going to the same location
842:33 - for now uh I we may create separate
842:36 - pages later on but for now both of them
842:38 - are going to the same same location okay
842:41 - so these two are fine I want to fix the
842:43 - YouTube link as well so let me just copy
842:45 - this come bring it in here for YouTube
842:49 - again it has a class nav link it is I'm
842:52 - going to give in our YouTube link here
842:54 - so
842:57 - youtube.com/ Jovan HQ that is going to
843:01 - be our YouTube link so that is going to
843:03 - open our YouTube link perfect and
843:05 - finally there is the sign in I want to
843:07 - turn the sign in into a button so let's
843:09 - come into buttons and bootstrap also has
843:12 - a bunch of button classes so let's come
843:14 - into buttons here and I can just turn
843:16 - that into a button simply by doing
843:18 - something like this and there are like
843:20 - there are examples here that I all I
843:21 - need to do is I need to say button type
843:23 - equals button class equals button button
843:26 - primary Prime and then I can put in
843:27 - whatever content and this way I'm going
843:29 - to get this nice blue button but one
843:32 - thing you can also do is you can
843:33 - actually just
843:34 - use not just a button tag but you can
843:37 - also just use a a tag or a link tag and
843:41 - this link tag by itself can
843:44 - Auto or this anchor tag this a tag is
843:47 - the anchor tag this anchor tag can also
843:49 - be made to look like a button using the
843:50 - BTN class okay so we are using a link
843:53 - but we're going to turn it into a button
843:55 - by simply providing these classes and we
843:58 - can also give it the roll button just
843:59 - for screen readers and such so I'm going
844:02 - to remove this nav link disabled class
844:05 - from my signin so now signin is just a
844:08 - normal unstyled link and I'm going to
844:10 - add to it the class BTN BTN primary
844:14 - and maybe let's see if we can also do
844:16 - nav link let's see what that does no
844:19 - that's going to change override things
844:21 - maybe I can simply do a p l or a margin
844:25 - left
844:27 - two that doesn't seem to be doing
844:31 - anything maybe I can do it here I can do
844:33 - PX or P
844:37 - L2 no
844:40 - nothing
844:42 - MX2 yeah MX2 does the job right maybe L
844:46 - should also do it no l okay I believe it
844:50 - is Ms margin start that does the job
844:52 - yeah so Ms is margin start so I'm just
844:56 - using the utility class margin start to
844:58 - give just some space to the button maybe
845:00 - ms3 can be tried as well yeah that looks
845:03 - good so now I have my Jovian logo I have
845:06 - courses programs in YouTube and I want
845:08 - this to go all the way to the right I
845:10 - don't want it to show up here right in
845:12 - front and also want it to be Center
845:14 - aligned with the logo so there are a
845:15 - couple of things we may need to do here
845:17 - and let's see how we can achieve them
845:19 - now this is where the abstraction breaks
845:22 - this is where you'll have to actually
845:23 - inspect the actual nav bar and make some
845:26 - changes directly so I am going to first
845:30 - just select inspect the nav bar here so
845:32 - right click select inspect okay so this
845:35 - is the nav bar this is fine and this is
845:38 - the container of the nav bar okay so
845:40 - this is where this is where my entire
845:41 - nav bar lives this is fine then I have
845:44 - the navbar brand this is all well and
845:46 - good then I have the Navar toggle that's
845:48 - not visible right now and then I have
845:49 - this navbar
845:51 - collapse okay so I want to looks like
845:54 - this Navar collaps is right after the
845:58 - Navar brand I want it to go all the way
846:00 - to the right how could I do that let me
846:04 - take a quick look at the parent
846:06 - component which is this container and
846:09 - let me check the what is the display
846:11 - type of this container so if I check the
846:14 - display type of this container the
846:15 - display type of this container seems to
846:17 - be Flex okay so that means my Navar logo
846:22 - and the links are both items within a
846:25 - flex container and it has a flex
846:27 - Direction row you can verify the flex
846:29 - direction as well by default it's row if
846:31 - it doesn't say anything so in a flex
846:33 - Direction row I want the contents to be
846:36 - spaced out how do we achieve that well
846:39 - along the primary axis so along this
846:41 - axis I want there to be an automatic
846:44 - space added between the starting
846:47 - component and the end component the
846:48 - first and the second component that can
846:50 - be added using justify content space
846:54 - between okay so think about this I'll
846:57 - let you think about this and when you
846:59 - practice this on your own so what I'm
847:01 - going to do here is in my container
847:04 - MD I which is a flex container which
847:07 - contains the brand and which contains
847:09 - the the list which of course it contains
847:13 - the button as well which is not visible
847:14 - right now I'm going to say
847:17 - justify
847:19 - content
847:22 - between or space
847:27 - between what does that
847:30 - do
847:31 - well that did not seems like it didn't
847:35 - do anything but maybe justify content
847:38 - let's try
847:40 - end okay that didn't do it as well so
847:43 - maybe maybe I need to take another
847:46 - closer look at what exactly is happening
847:47 - here so maybe I let me check this
847:50 - element so it looks like this div is
847:52 - also a flex div so maybe it's possible
847:53 - that this div may be taking up the
847:55 - entire space so justify content end is
847:58 - not working here let me try and come and
848:01 - set it on this collapse div which is
848:03 - also a flex div right so this collapse
848:05 - div is also a flex container and it it
848:08 - contains a bunch of these um list items
848:11 - and all of these list items are
848:12 - contained in this so let me come into
848:14 - the collapse div and let me
848:17 - add justify content end and you can see
848:21 - that it shift it to the end okay so how
848:24 - do I how did I achieve this well I
848:26 - actually just tried it out so sometimes
848:28 - all you have to do to achieve the
848:29 - desired layout is to think from first
848:31 - principles okay this is the box I have
848:33 - and I need to shift something to the
848:35 - right or left and how can I achieve that
848:37 - using some Flex property or using some
848:39 - display property and then just dig in
848:41 - into the inspection and fix things right
848:44 - but whenever you're using bootstrap the
848:46 - one tip that I can give you right now is
848:48 - if you want all of your elements in the
848:52 - list of nav links to shift to the right
848:55 - simply go into that collapse div the
848:57 - collapse Navar collapse which is the
848:59 - list of things that gets collapsed um at
849:02 - a particular breakpoint and just add
849:04 - justify content end and it'll shift
849:05 - everything to the
849:07 - right okay uh and on a Case by case
849:10 - basis you'll just have to search this
849:11 - sometimes you can just search this
849:12 - online as well and you can find the
849:14 - answer okay one other thing we can do
849:16 - probably is maybe seems like this is not
849:19 - these things are not aligned properly so
849:21 - maybe I think it might also help to add
849:23 - an align item Center
849:29 - here okay that's not doing anything all
849:33 - right I'll experiment later but one
849:34 - thing I want to do is maybe just
849:35 - slightly fix the alignment so that
849:37 - courses is Right lining up properly with
849:39 - the center of the logo which doesn't
849:41 - seem to be happening right now okay okay
849:43 - so now we have courses and we have
849:45 - signin as well for the signin Button as
849:47 - well let me just add an
849:50 - href and the HF is simply jan.com
849:55 - login and the class or the target is
849:59 - uncore blank that is simply going to
850:00 - open it in a new tab okay yeah so this
850:04 - is looking rather nice I would say so
850:06 - here we have this mobile view okay looks
850:09 - like on mobile view we need to fix the
850:11 - signin button it should not have the
850:14 - left Stop left padding right so I'm just
850:17 - going to trigger this from
850:20 - MD yeah so now what's going to happen is
850:22 - that the margin is going to kick in only
850:24 - from MD so let's see now this is looking
850:27 - good I can collapse it I can expanded
850:29 - this is looking nice and as soon as I
850:32 - increase beyond the medium
850:36 - width which is somewhere about here now
850:39 - it goes into this nice layout where I
850:42 - have these links right at the top and I
850:43 - have this nice sign in button I think
850:45 - maybe md2 might be sufficient I don't
850:47 - really need md3 okay I have this nice
850:49 - sign in button and this is looking
850:52 - pretty good so with that we have
850:54 - completed the nav bar this is the
850:56 - original layout I've just zoomed in a
850:58 - little bit so that you can see more
851:00 - clearly okay so that's what we did you
851:02 - can just check out the layout exactly
851:04 - the code is present here as well but we
851:06 - have just made it in made it so that it
851:09 - expands and it shows up a bunch of links
851:12 - from MD and higher right so this is the
851:14 - layout that we've achieved on mobile and
851:15 - this is the layout that we've achieved
851:16 - on desktop okay next up is the hero
851:20 - section or the about section so this is
851:22 - where bootstrap also provides various
851:24 - examples for specific sections so
851:26 - remember in this page we have this about
851:29 - Jovian then we have this then we have
851:31 - this and then we have this spanner image
851:33 - as well so let's look at some examples
851:35 - from the bootstrap examples so these are
851:38 - all the these are a bunch of examples
851:40 - for the hero or the about section and
851:42 - for for this looks like there is this
851:45 - centered option that we can just have
851:46 - some centered content on the page I
851:48 - don't want that uh there is this
851:50 - centered option with an image below it
851:52 - that's not what I want either okay this
851:55 - looks promising so I have some text here
851:58 - I have some text here and then I have an
852:01 - image here that looks somewhat similar
852:03 - to what I need here okay text image Etc
852:06 - and maybe this layout is actually better
852:07 - where the text even the title is on the
852:09 - left and not on the center and then I
852:11 - have these buttons here but I don't have
852:12 - to use these buttons instead of these
852:14 - buttons I can simply put in these two
852:16 - items that I have here okay so I guess
852:19 - I'm going to use this layout and this is
852:22 - one of the examples on this examples
852:23 - page we have a bunch of examples how do
852:26 - I get the code for just this example
852:28 - there is a way you can download the code
852:30 - and then search it so you can go into
852:32 - bootstrap examples you can download the
852:34 - source code of these examples you can
852:36 - open the hero folder etc etc but I'm
852:39 - going to show you a quick way uh when
852:41 - you're looking at a bootstrap example
852:42 - just right click click
852:45 - inspect and find the
852:48 - outermost container so okay this is the
852:50 - container and looks like this container
852:52 - contains this entire hero element and
852:54 - inside it is the entire thing so you can
852:57 - just click on this container right click
853:01 - select copy element and that is going to
853:03 - copy the HTML code for this entire
853:06 - container that we're looking at here
853:07 - okay so with one click I've copied the
853:10 - entire HTML code for this container and
853:12 - now I can come in into my code and here
853:15 - in this about Jovian section I'm
853:17 - removing whatever placeholder text I
853:19 - have I'm just going to paste in this
853:20 - container and just like that you can see
853:23 - that we got
853:24 - this nice responsive left Aline hero
853:28 - with image and of course the the image
853:30 - is not present here so we can change
853:31 - this image we have an image here um well
853:34 - actually I think we have a link to an
853:36 - image here that we can
853:38 - grab uh let's see yeah so I've hosted
853:42 - this image online so that I can just
853:44 - copy it over easily let's see I am yeah
853:47 - so the image source is
853:51 - this yeah and so with that I have this
853:54 - nice layout where I have this responsive
853:57 - left aligned hero with image uh and with
853:59 - some text with these buttons and I have
854:02 - this nice image on the right okay
854:04 - looking pretty good and let us start
854:06 - understanding and customizing this okay
854:08 - first thing I wanted this to be a
854:10 - container I think that's fine I want the
854:12 - content to be sent on the page no matter
854:14 - what screen size we are on so this is
854:17 - fine it's this content is always
854:18 - centered on the
854:19 - page okay let me get rid of this I think
854:22 - I don't need this call XXL 8 I am not
854:25 - interested in that right now it has this
854:27 - PX4 what is this
854:30 - PX4 okay so this PX4 seems to be this
854:33 - padding on on the left and right okay I
854:36 - think I can keep the PX4 it also has
854:39 - this py5 which is the space above it I
854:42 - think maybe this this py5 may not be
854:44 - necessary right now so I'm going to get
854:46 - rid of this py5 and automatically you
854:48 - can see that the top and bottom padding
854:51 - has completely gone away all right
854:56 - um
854:58 - yeah so that is looking good so far next
855:03 - let us come in here and let us
855:05 - check okay what's happening here so it
855:08 - looks like we have
855:10 - Flex by default we have like
855:14 - it's just a normal div with things going
855:16 - top to bottom that's fine and at some
855:19 - point it becomes a flex container with
855:22 - the direction row but not just row it it
855:24 - becomes a flex container with row
855:26 - reverse so on large screens we have Flex
855:29 - LG row reverse which means on large
855:31 - screens it becomes a flex container with
855:34 - a direction row reverse and that is why
855:37 - the image comes on the left and the on
855:40 - the right and the text comes on the left
855:42 - okay I think that works for me that I
855:45 - have this top to bottom layout here this
855:47 - is fine and then I have this left to
855:49 - right layout here this is fine I may
855:50 - need to do some centering but it's
855:53 - fine okay maybe I can just use a flex
855:56 - call layout initially a flex column
855:58 - layout so that there's already this
856:00 - align item Center so what that can do
856:03 - for me is just make sure that the
856:05 - content becomes centered okay that's not
856:07 - exactly doesn't exactly seem to be
856:10 - happening
856:11 - yet okay maybe we don't need this Flex
856:14 - call here so this is okay align item
856:17 - Center I
856:19 - think what this does I can I can remove
856:21 - it and see what happens so when I have
856:24 - align items when I don't have align item
856:25 - Center the text comes on the top and it
856:28 - is aligned with the top of the image
856:30 - when I have align items oops when I have
856:32 - align items Center the text is Center
856:34 - aligned vertically with respect to the
856:36 - image okay earlier it was here now it is
856:38 - here I think I like this better so I'm
856:40 - going to keep align items Center okay
856:42 - there is this G5 let's see what happens
856:45 - if you remove the
856:46 - G5 well looks like there was some shift
856:49 - in the gaps I think it's fine it's
856:51 - probably okay not a big issue there is
856:54 - this
856:55 - py5 okay do we need this
856:57 - py5 yeah I think we need that py5 maybe
857:00 - I can just make it py4 maybe we don't
857:02 - need that much space okay looks
857:06 - fine or py5 is fine
857:10 - too okay looks fine so far my layout is
857:13 - looking good then we have this image so
857:16 - we have this call 10 call sm8 call lg6 a
857:19 - bunch of stuff going on
857:22 - here I think I'm going to make it very
857:24 - very simple I'm just going to say call
857:26 - 12 and call lg6 so that it takes up the
857:30 - full
857:31 - width and I think we'll probably need
857:33 - that Gap five now
857:36 - because yeah I think we need that Gap
857:38 - maybe I can make that Gap smaller yeah
857:41 - so I I wanted to take up the full width
857:44 - the the div containing the image I
857:47 - wanted to take up the full width on all
857:50 - screens and then at some point I wanted
857:52 - to take up just half the
857:54 - width so at LZ I wanted to take up half
857:57 - the width but that doesn't seem to be
857:59 - happening okay so let's give this call
858:02 - 12 as
858:03 - well and on LG
858:11 - screens yeah on LG screens it's both of
858:14 - these are going to take up half
858:17 - width okay so there seems to be this MX
858:20 - LG Auto I'm going to get rid of that
858:22 - there seems to be this image fluid this
858:24 - is
858:25 - okay what else
858:28 - well I think it's this a gap that might
858:30 - be causing the problem we'll fix the Gap
858:32 - later okay so yeah so till LG it takes
858:36 - up the entire width of the uh width of
858:39 - the page or width of the container the
858:40 - centered container and from LG screen
858:42 - screens and bigger it simply takes half
858:44 - the screen width okay so this is good
858:46 - this is looking good so far and let me
858:49 - also maybe add a rounded border to the
858:52 - image so I can just go in and say
858:57 - rounded okay and let's also maybe say MX
859:02 - Auto so that it's centered on the page
859:04 - no matter what width it's taking up okay
859:07 - let's maybe add some
859:09 - padding below the image so let's just
859:11 - say MB
859:13 - four yeah I think this is good so now
859:16 - we've added some padding below the image
859:18 - and let's add a
859:20 - similar We'll add a similar padding for
859:22 - the other content as well okay so this
859:25 - is looking pretty good so now we have
859:26 - the Jovian logo and let's make this py4
859:30 - I think py4 should do the job for
859:33 - us yeah so now we have this Jovin logo
859:35 - we have this image okay we have this
859:37 - text here I'm going to change this text
859:40 - so let's see display 5 FW bold text body
859:44 - emphasis all this looks good I'll keep
859:46 - those
859:47 - lh1 all that looks fine I'm just going
859:50 - to change this
859:51 - to work at
859:56 - Jovan okay I think I want it to be
859:59 - centered by default so I want to say
860:01 - text
860:02 - Center by default and then it's looking
860:07 - good and then at a certain point I want
860:09 - it to become left align so at LG when
860:13 - the layout shifts I want to say text LG
860:16 - left align to left align I have to say
860:18 - text LG start and it's going to become
860:20 - left align over here like that okay
860:23 - great so again we' you can try removing
860:26 - some of these and see what it does what
860:28 - happens if you remove display file what
860:29 - happens if you remove text body emphasis
860:31 - Etc let's try it let's try removing text
860:34 - body
860:36 - emphasis okay it didn't make a
860:37 - difference so probably we didn't need
860:39 - that what about font weight bold do we
860:42 - need that
860:43 - that okay we definitely need that what
860:46 - about display 5 do we need that yeah we
860:49 - definitely need that okay so this is all
860:52 - looking good we have work at Jovian this
860:54 - is a nice little uh thing that we've
860:57 - added
860:59 - and let's get rid of these buttons I
861:01 - don't need these buttons
861:04 - here okay let's take a look at this
861:09 - actual paragraph of text I think this
861:11 - paragraph you want to maybe change it to
861:13 - the paragraph that we were actually
861:14 - using earlier so I'm just going to come
861:16 - in and maybe copy over the paragraph
861:19 - that we had earlier let's paste this
861:22 - paragraph
861:24 - here okay looks good yeah this is fine I
861:28 - think we also had another paragraph
861:30 - linking to a couple of courses so we had
861:32 - this full stack developer boot camp data
861:34 - science boot camp let us maybe add those
861:36 - paragraphs as well so let's add another
861:41 - paragraph and and let's see if this
861:43 - class lead is important what if I don't
861:45 - have this class
861:50 - lead okay this class lead seems to be
861:52 - important it's going to make the text a
861:54 - little nicer to read a little bigger so
861:57 - I'm going to keep this and I'm going to
861:58 - keep this in my next paragraph as well
862:01 - and in my next paragraph let's add this
862:04 - text let's we also offer to Industry
862:06 - Focus boot
862:07 - camps all right cool and let's get the
862:10 - links to those boot camps so let's get
862:12 - the I'm just going to copy this entire
862:15 - ordered list so we
862:18 - have an ordered list o with the class
862:21 - lead it contains one list item which
862:23 - contains a link to the full stack
862:25 - developer boot camp it contains another
862:27 - list item which contains a link to the
862:28 - data science boot camp okay and just
862:31 - like that we have created a very nice
862:33 - looking hero section so this is often
862:35 - called the hero section um I think we
862:37 - can probably get rid of this margin you
862:41 - can see that there's this margin bottom
862:42 - that we had kept I think we can get rid
862:44 - of it when we get to a large
862:49 - layout yeah so we have this margin
862:51 - bottom I don't think it is very useful
862:54 - here in this case so for the large
862:55 - layout I'm going to get rid of it so I'm
862:57 - just going to say m
862:59 - lg0 okay nice so now it's nicely
863:02 - centered on the page okay perfect so on
863:05 - mobile screens we have this toggle and
863:09 - we have this image we have this centered
863:11 - work at chian but of course this
863:13 - paragraph It's better to just keep it
863:15 - left aligned and then we have links and
863:17 - then um the font sizes are also
863:19 - responsive you'll notice that the font
863:21 - size is actually increasing that's what
863:23 - the display fonts or the utility classes
863:25 - allow us to do then as soon as we hit
863:27 - this large layout you can see that we
863:30 - flip into and then at Excel there's a
863:33 - certain change as well in terms of the
863:35 - container size but we flip into this
863:37 - nice two column layout which is looking
863:39 - rather nice and I don't think we need
863:42 - this Banner image anymore because just
863:45 - this layout itself is looking so nice
863:47 - that I don't feel like then further
863:49 - adding a banner image or anything
863:52 - okay yeah looks good I am feeling pretty
863:56 - happy with this and now we can probably
863:58 - move on to the next
864:00 - section okay so the next section is the
864:03 - employment opportunities which we want
864:05 - to show as a list of cards on mobile and
864:10 - on desktop we want to show it as a a
864:12 - table okay so how do we do that let me
864:15 - just copy this over here so that we can
864:17 - actually just see this side by side so
864:19 - here you have this employment
864:20 - opportunities table by default it's a
864:22 - list of cards like this let's see if
864:25 - there is something to create cards in
864:27 - bootstrap so let's go into the bootstrap
864:30 - documentation let us search for cards
864:33 - yeah so there seems to be this card
864:35 - component and this card component can be
864:37 - used to show an image can be used to
864:39 - show a card title used to have have some
864:41 - text and maybe also have some content
864:44 - here at the bottom I need something much
864:46 - simpler maybe I need something like this
864:48 - which has a card title a subtitle and
864:51 - maybe just some text about it so I'm
864:53 - just going to copy this and I am going
864:55 - to come in here I'm going to create a
864:58 - new
864:59 - section again I'm going to create a
865:03 - div and I'm going to give it the same
865:06 - class that I had for the previous div
865:08 - Above So container let's see what did
865:10 - that look like container and PX4 so I'm
865:13 - going to give it container and PX4 so
865:14 - that left and right we have some space
865:16 - so that the content does not stick to
865:18 - the left end of the page and let me put
865:21 - in an H2 here and let me just put uh let
865:24 - me just call this job
865:28 - opportunities okay so now we have this
865:30 - job opportunities let me also just add
865:32 - class text Center
865:35 - here okay and I want to right now I want
865:38 - to just work with smaller
865:40 - layouts so I'm just going to going to
865:42 - keep it like that and let me just now
865:45 - add this maybe I'm going to add a div
865:48 - and I'm going to give it the
865:53 - ID jobs list well maybe I don't really
865:55 - need an ID let me just drop in a comment
865:57 - here saying jobs
865:59 - list okay and inside this div is where
866:02 - I'm going to create my
866:04 - cards all right so let me paste in this
866:06 - card and let's see what it gives me okay
866:09 - so this is the card that I get it's on
866:11 - the left
866:13 - so I'm going to change a few things up
866:16 - first I'm going to remove this width I
866:18 - don't need this width I do need this
866:20 - class card because that's what adds this
866:22 - nice border around it I am going to add
866:25 - maybe a
866:26 - my4 which is just okay maybe not here
866:30 - my4 which is margin in the Y Direction
866:33 - Four units which is going to just give
866:35 - us some space here and maybe I'm going
866:38 - to also add a
866:40 - Mt
866:43 - five here yeah so that this is a little
866:46 - spaced out from the previous
866:50 - content okay looks good so far and let
866:54 - us now add okay let's now fix the card
866:57 - title so we have this front end
866:59 - developer role let me just grab the
867:01 - content of the front end developer role
867:04 - here okay so C title is front end
867:06 - developer so I'm just going to use
867:10 - that frontend developer okay that looks
867:13 - fine then we have a subtitle in the
867:15 - subtitle I'm going to put in
867:21 - the location of the job which is
867:24 - bangaluru India and 12 lakh rupees which
867:27 - is the annual salary so I'm going to put
867:30 - that in here I don't need these Links at
867:32 - the bottom so I've gotten rid of these
867:34 - links and then I here maybe I can just
867:36 - put in that this was posted three uh
867:39 - this was posted like on March 3rd 23 or
867:42 - something like that so I'm going to put
867:43 - in that information over here okay so
867:47 - very basic
867:50 - content yep okay so now I have front end
867:53 - developer this is good bangaluru India
867:55 - March 3rd 2023 looking good I can maybe
867:59 - just make this slightly better I think
868:01 - the spacing is a little off so maybe
868:03 - this mb2 is not required maybe just make
868:05 - it mb1 this looks fine and I guess this
868:08 - text can be slightly smaller and maybe a
868:10 - little grade out and that is where I can
868:12 - use this small um tag HTML tag which
868:17 - bootstrap automatically turns into
868:19 - slightly smaller text and I'm also going
868:21 - to use text body secondary so I still
868:23 - have this card text class but instead of
868:26 - using the P tag I'm using the small tag
868:29 - and I'm using the color text body
868:30 - secondary color now you can see that we
868:33 - have this nice hierarchical card where
868:35 - we have this frontend developer
868:36 - bangaluru India 12 lakh rupees and
868:38 - posted March 3rd 2023 okay so that is
868:43 - the yeah so that is the card that we
868:46 - have created and I'm just going to copy
868:49 - this over just so that we have like a
868:52 - nicer version of this available for us
868:55 - to easily
869:00 - replicate yeah and let's fix this
869:03 - padding here as well to
869:07 - My5
869:10 - empty maybe this H2 needs some padding
869:13 - below so I'm just going to add mb4 to
869:15 - this H2 yeah so that things are a little
869:17 - spaced out okay so that's one card let
869:19 - me copy over the other cards as well so
869:21 - this is
869:23 - the full stack developer role so let me
869:26 - come in
869:28 - and let's
869:30 - [Music]
869:32 - now oh looks like I have this additional
869:34 - div here full stack developer role let
869:37 - me just format the document looks fine
869:40 - okay full stack developer let me add in
869:43 - the data scientist role as well data
869:52 - scientist that is the data scientist
869:54 - role right here and finally let me add
869:56 - in the ml engineer role as well okay so
869:59 - all we're doing is simply using the
870:01 - classes from bootstrap we still using
870:03 - writing plain HTML code but now we
870:05 - adding classes from bootstrap and all
870:07 - those Styles and maybe also some
870:08 - JavaScript nice features can get added
870:10 - in autom atically via bootstrap so now
870:12 - we have all of these job opportunities I
870:14 - think this is looking pretty good um
870:17 - this is fine but I don't want this to
870:19 - show up Beyond MD so I think when we hit
870:23 - the MD
870:24 - breakpoint I want it to I want this to
870:27 - disappear so that's where we have
870:30 - this DMD nonone class so we can say that
870:34 - by default it has a certain display but
870:36 - at the MD breakpoint we want it to
870:38 - disappear so for the entire jobs list so
870:42 - this is the jobs list I'm just going to
870:44 - give it the class DMD
870:49 - none okay so you can see that at in very
870:53 - small screens this is visible and this
870:55 - is looking good as soon as we hit the MD
870:58 - breakpoint then this goes away and is no
871:01 - longer visible okay so with that I think
871:03 - we've completed the first one or the
871:05 - first half of the page which is the
871:07 - Navar the hero section and the job
871:10 - opportunities at least B on the mobile
871:12 - view now of course at MD this disappears
871:16 - and from size MD we want to show a table
871:19 - so let's maybe first bring in a table
871:21 - here so inside the jobs list well right
871:25 - after the jobs list but still within the
871:27 - jobs div So within the jobs container we
871:30 - want to add a table so let's just add a
871:32 - jobs table
871:35 - here okay and let's first maybe I'm just
871:39 - going to put in a div containing a table
871:42 - so you can see all I've done here is
871:44 - I've have a div and inside the div I
871:46 - have a table and inside the table I have
871:49 - this table row uh or the header row and
871:52 - of course I've used certain col column
871:54 - spans and row spans to achieve this kind
871:57 - of a layout where you have know job
872:00 - title and location has City and Country
872:02 - under it and so on so to achieve this
872:04 - layout I have used column span row span
872:06 - so this is the exact same table in terms
872:08 - of the basic HTML that we had the last
872:10 - time and I'm just going to save that and
872:13 - let's see what that does so now this has
872:16 - added this table here at the bottom
872:18 - right but there are two issues here one
872:21 - is that this table is always visible we
872:23 - don't want it to be always visible we
872:24 - want it to be visible only on MD and
872:28 - higher so I'm just going to say class D
872:32 - none so which is by default we don't
872:34 - want it to be visible and then DMD
872:38 - block okay and what that does is from MD
872:44 - on MD the list disappears and the table
872:47 - appears okay that's good the second
872:49 - thing is of course this table is not
872:51 - looking very nice right now so one thing
872:54 - we can do to trigger bootstraps Stables
872:57 - is simply use the table class and how
872:59 - did I get this well I simply looked up
873:01 - the documentation so in the
873:03 - documentation just search for table and
873:07 - they have this class for table so you
873:10 - can just add in
873:12 - table the table class to any table
873:14 - component and that's going to create
873:15 - this nice table for us okay the table is
873:18 - looking nice but we still want borders
873:22 - around the table so we want a bordered
873:23 - table so let's see where how do we add a
873:26 - border to the table it looks like we
873:28 - just have to add the table bordered
873:30 - class so I'm just going to come in here
873:32 - and I'm going to add the class table
873:35 - bordered and voila our table now has
873:38 - borders pretty good I would like to
873:42 - maybe give it some more color so let's
873:44 - see how we can add colors so accented
873:48 - tables well let's see how we can maybe
873:51 - make get these striped rows I think this
873:53 - would be nice so let me copy this table
873:56 - striped CSS property and this is how you
873:59 - work with bootstrap you look at an
874:01 - example that contains what you need and
874:03 - then you just add that property so table
874:05 - bordered let me add the Cs CSS property
874:08 - table striped and yes I think the table
874:12 - is looking nice okay maybe I can make a
874:15 - few changes to this particular to The
874:17 - Heading because the heading the header
874:19 - row should probably look a little
874:21 - different let's see how can we color how
874:23 - can we color the table are there any
874:27 - color tables here okay looks like there
874:29 - is a way to color tables as well we can
874:31 - use this table primary class to give it
874:33 - a primary
874:35 - color but I don't want it on the entire
874:37 - table I just want it on the header rows
874:39 - so looks like I can just add class table
874:41 - primary on a row and it should just
874:44 - color that row let me color the first
874:46 - header row table primary okay nice it's
874:49 - gets it gets this nice primary color let
874:51 - me add this to the second row as well
874:53 - which contains a city and Country and
874:55 - this gets the nice color as well and
874:57 - because of the striping logic this gets
874:59 - a slightly different color okay our
875:01 - table is starting to look good I think I
875:04 - want to Center the titles here the so
875:07 - I'm just going to add text
875:09 - Center for the table row text
875:15 - center right so this is how you build it
875:17 - out step by step okay nice the table is
875:20 - looking good so till mobile this is fine
875:24 - on MD we switch into the table which is
875:28 - looks fine to me I think it's not uh
875:30 - it's not cramped or anything okay when
875:33 - we get to LG and higher looks like this
875:35 - is this table is getting too big maybe I
875:37 - might want to just limit the overall
875:40 - size of the table a little a little bit
875:42 - so this is where I can maybe use a
875:46 - small helper layout here so what if I do
875:50 - this let's say on
875:54 - LG on LG I limited to just eight columns
875:58 - instead of taking the entire 12 columns
876:00 - I limited to eight columns so on MD it's
876:02 - going to take up the full width which is
876:04 - here but on LG it's going to just take
876:07 - up eight columns but of course I don't
876:09 - want it to take up the left eight
876:10 - columns I wanted to take up the middle
876:12 - eight columns out of the 12 so that's
876:14 - where I can add an offset so I can say
876:17 - offset LG 4 or maybe offset LG
876:22 - 2 yeah so what I'm saying is leave two
876:25 - columns here leave uh and then take up
876:27 - the eight columns and that automatically
876:29 - leaves two columns here 12 - 8 - 2 is 2
876:32 - all right so that way the table is going
876:35 - to be sent completely full width on
876:38 - medium screens but on large screens it
876:40 - is is going to Simply take up okay on
876:43 - large screen it is simply going to take
876:44 - up the eight columns in between and that
876:48 - just expands a little bit but it still
876:49 - looks nice I feel okay so that's great I
876:52 - think we've been able to set up a nice
876:54 - table let's see maybe I can just
876:56 - increase this Gap a little
876:59 - bit mb5 maybe
877:03 - here yeah this is looking a little
877:06 - nicer okay so our with that we are done
877:10 - with our
877:11 - jobs list and jobs table so this is what
877:15 - our jobs list looks like job
877:17 - opportunities on mobile and then we've
877:19 - also added
877:20 - a table and this is what our job
877:23 - opportunities table looks like okay
877:25 - perfect next let's move on to the
877:27 - application form that is probably the
877:29 - only big piece that's left here and the
877:31 - footage should be pretty straightforward
877:33 - now for the application form once again
877:35 - bootstrap offers various pre-built form
877:38 - components okay so first let us just set
877:41 - up the basic layout and then we are
877:42 - going to start incorporating this one by
877:44 - one so once again I need a container
877:47 - here so I'm just going to give it a
877:49 - class of container and PX4 because I
877:53 - want some spacing left and right so PX
877:55 - is the padding it is basically this
877:58 - space that you see on the left and right
877:59 - it's nice to have I think it's it's good
878:01 - we can keep it okay then I need an H2
878:04 - here so
878:06 - H2 and in this H2 I want to put in sub
878:11 - MIT your
878:14 - application okay the H2 is looking okay
878:17 - too well maybe for this H2 I can add a
878:22 - text Center because I want to Center
878:25 - this text and maybe I need to add some
878:28 - space above as well so maybe let me add
878:30 - mt5
878:33 - above okay now that has added some space
878:36 - above and let me then also go ahead and
878:42 - had a form here so I'm going to copy
878:45 - over the form that I had the last time
878:47 - at least in terms of the
878:49 - basic um action and Method so remember
878:52 - we were using a tool called form bold to
878:54 - actually post the form let me add the
878:56 - form element here okay I've added the
878:58 - form and now into the form I can start
879:01 - adding inputs okay so I've created a
879:04 - form but this form doesn't have any
879:06 - inputs yet I could put like input type
879:08 - equals
879:09 - text
879:16 - and that should create an input box here
879:18 - so let me just move this up a little bit
879:21 - you can see that now I have this input
879:23 - box but of course I want to use a nice
879:25 - input form that is created very nicely
879:27 - with bootstrap so I'm going to come into
879:29 - bootstrap here and I'm going to search
879:30 - for
879:31 - form okay so here is an example of
879:36 - forms looks like you don't need anything
879:39 - on the form component and for the actual
879:42 - inputs looks like we need to do a bunch
879:45 - of things here we need to set a class of
879:48 - okay this is just a we need to put the
879:49 - input and label and maybe some help text
879:52 - in a div and we then need to maybe
879:55 - specify the class form label for the
879:58 - label we need to specify the class form
880:00 - control for the input and if we want
880:03 - some helper text so this is some helper
880:05 - text that we want to show below the
880:06 - email then we can specify some helper
880:09 - text as well so how about we simply copy
880:11 - this over I think we understand this
880:13 - well enough so we can just copy this
880:15 - over and let's put it into our form
880:17 - instead of
880:19 - this okay all right so just like that we
880:22 - have this email address input field that
880:25 - is looking good
880:27 - and I am going to Simply give it the I'm
880:31 - going to give it the ID email so the
880:33 - input is going to have the ID email and
880:37 - the email help is the description below
880:40 - the email address this looks fine as
880:43 - well and yeah I think this looks good so
880:46 - we need form label and form control it
880:48 - looks like these are the two things that
880:49 - we require and that automatically helps
880:51 - us create the layout okay what else well
880:55 - I feel like maybe we don't want to use
880:58 - the
880:59 - entire uh we don't want to use the
881:01 - entire width for email of the page maybe
881:04 - we want to use just maybe half the space
881:06 - so I can go in here and I can say call
881:09 - six
881:11 - and this way it is only going to take up
881:12 - half the
881:14 - space but now the trouble is even on a
881:16 - really small screen it takes up only
881:18 - have the space so let me say call
881:22 - sm6 and this way on a really small
881:25 - screen it's going to take up the entire
881:26 - width and then as soon as we enter
881:28 - bigger screens it's going to take up
881:30 - less width okay so this is good I think
881:34 - I'm happy with
881:37 - this okay perfect so just like we have
881:42 - email I have also already put together
881:44 - some other examples so here now I have
881:46 - this name field so I'm just going to
881:49 - copy the name field all we have is we ex
881:51 - we have the exact same mb3 calls sm6
881:54 - except this time the ID and the name are
881:56 - full name or or name I guess um so let
881:59 - me just copy this over and this is of
882:01 - type text so let's insert the name field
882:05 - that's giving us the name field email we
882:08 - already have the email field but let me
882:10 - just in any case copied over once again
882:12 - so that is going to give us the email
882:13 - field the only difference between the
882:15 - name and the email field is of course
882:16 - their ID and name are different the
882:19 - field name but also that the type is
882:22 - email and that is going to automatically
882:24 - add some validation and we've also added
882:26 - a placeholder and we've added a required
882:28 - field so forms we've covered in a lot of
882:30 - detail already so I'm not going to go
882:32 - into the specifics here but now we have
882:33 - the name field we have the email field
882:35 - all we've done is added a few bootstrap
882:37 - classes form label and form control
882:39 - which makes it look nice
882:41 - let's get the phone number field so
882:43 - again the only difference here is the
882:44 - titles labels IDs and the type is TE
882:47 - tell which requires this to be a phone
882:50 - number
882:51 - field okay and let's format the document
882:54 - a bit yeah cool so now we have the phone
882:56 - number field as well this is looking
882:58 - good let's get up the let's get the date
883:01 - of birth field as
883:05 - well okay let's get date of birth so
883:09 - yeah for date of birth we
883:11 - have once again we have the same layout
883:14 - exactly except that this time it's a
883:16 - date picker so you can go in and you can
883:18 - actually select a particular date here
883:19 - so that's good okay next up is the apply
883:23 - to field so this is more of a drop- Down
883:26 - uh this is like a select component so
883:28 - I'm just going to bring it in here first
883:29 - so the position applying and then we're
883:32 - going to look take a close look at
883:34 - it okay so the position applied for is a
883:37 - drop- down and from here you can select
883:39 - whether you want to apply for for full
883:40 - stack developer front end developer Etc
883:42 - so how are we doing this well once again
883:45 - we have class mb3 and call sm6 now the
883:48 - only difference here is instead of an
883:50 - input we're using a select which is what
883:52 - we have to do anyway but the class we
883:55 - are changing now from a form input to a
883:58 - form so it was called form control here
884:01 - now that has been changed to form select
884:03 - and that's it that's the only change the
884:05 - label still says form label and we have
884:07 - a default option with an empty value set
884:10 - to select a position that's why by
884:13 - default it is pointing to select a
884:15 - position and we
884:18 - have then a front end developer full
884:20 - stack developer data engineer ml
884:22 - engineer I believe we can also make it
884:24 - required so that the user has to select
884:26 - a particular option so yeah this is just
884:29 - a normal drop down all we've done is
884:31 - added a class to the label added a class
884:33 - to the select and added maybe this uh
884:36 - layout or this bottom margin and this
884:39 - six column layout here so that it looks
884:41 - slightly
884:42 - nicer okay then we have this resume
884:45 - upload this is a file upload and the
884:47 - only difference here is the input type
884:49 - is file so again I'm just going to kind
884:51 - of bring that in directly as well so
884:53 - here is your file upload and that allows
884:56 - you to pick a file again exactly the
884:58 - same finally we have this cover letter
885:01 - and in this case it is a text area Okay
885:03 - so no change here again the only change
885:06 - I'm making is I want the text area to
885:08 - actually be full width right so I want
885:10 - the text area to
885:12 - be I want the text area to actually be
885:15 - full width and that is why I've set I've
885:17 - removed that call sm6 so I'm going to
885:20 - use a full withth text area and that has
885:23 - a um label cover letter and once again
885:26 - you give it the class form control and
885:28 - that's it we have our application form
885:30 - the last thing we have is the terms I'm
885:33 - just going to bring in the terms real
885:34 - quick really straightforward it's just a
885:37 - simple checkbox so all we do is we say
885:39 - form form check input and form check
885:41 - label again all this is borrowed from
885:43 - the bootstrap documentation simply
885:45 - copied over and with a quick assessment
885:48 - of how things are what else um I think
885:51 - we have the submit button right here so
885:53 - let's grab that submit button that is
885:55 - going to be a primary button for us so
885:58 - we have submit application and now we're
886:00 - ready to submit the application so
886:02 - that's it I think this form is looking
886:03 - good maybe we can make like some final
886:06 - changes here let's see okay I think the
886:10 - form
886:11 - goes I guess the form goes too wide I
886:14 - think we want to restrict the form to
886:16 - just be just as wide as this job
886:18 - opportunities table because otherwise
886:19 - it's going to become a little hard to
886:21 - actually read the content of the page so
886:24 - I'm going to add the exact same classes
886:26 - here that I had for the previous one so
886:28 - on the form I am going to add the
886:33 - class LG let's say call lg8 so that it
886:38 - is not too wide and I'm also going to
886:41 - add offset LG2 so that it is relatively
886:45 - speaking centered on the page okay so
886:47 - now we have work at Jovian job
886:49 - opportunity submit your application and
886:51 - we have the form as well let's quickly
886:54 - verify the form okay we have email we
886:56 - have
886:57 - phone okay phone looks fine we have date
887:00 - of birth we have
887:02 - position yep I think this is all let's
887:05 - check date of birth yeah I guess date of
887:07 - birth needs to be changed to do let's
887:09 - change this to D OB d o and yeah with
887:14 - that our date of birth is fixed as well
887:16 - perfect so now we have the form now we
887:18 - have the hero section we have job
887:20 - opportunities the final thing that we
887:21 - need is
887:23 - the foter okay now where do you get the
887:26 - footer again bootstrap has a bunch of
887:29 - examples that you can choose from so
887:30 - here are some examples for the footer
887:32 - let's look for
887:34 - footer and let's open up the footer okay
887:37 - so there's this example right here this
887:40 - is something we could do or we could do
887:41 - something like this I think this might
887:43 - work out fine for us so we could
887:45 - probably just right click inspect and
887:48 - copy this entire
887:50 - container paste it
887:52 - in and make some desired changes to it
887:55 - so I can get rid of this I can simply
887:59 - paste that in and then I just need to
888:01 - make the desired changes to it and
888:04 - because I've made these changes already
888:06 - I'm just going to copy it over from here
888:08 - it's exactly what it looks like um I'm
888:11 - just taking an example of the footer
888:14 - which is a container and then it has
888:17 - maybe a py my and it has the list of
888:19 - links and below it it has this copyright
888:22 - text it's a very simple straightforward
888:25 - footer I've just made very minor
888:27 - modifications to what we already have in
888:30 - the bootstrap example okay so let's
888:32 - paste in the footer here as well and
888:34 - with that we have a
888:37 - footer so great this is what it looks
888:40 - like on let's just go normal to the
888:44 - basic device mode and let's see things
888:46 - from scratch so this is what it looks
888:49 - like on mobile there is this nice drop
888:52 - there's this nice menu here we have and
888:54 - then we have work at Jovian and maybe we
888:56 - can make this a little bigger on maybe
888:58 - we can make this a little smaller on
888:59 - mobile I'll let you maybe explore that
889:02 - as an exercise then we have job
889:04 - opportunities maybe we can make this
889:06 - heading a little bigger I'll let you
889:07 - experiment with that as well then we
889:09 - have submit your application then we
889:11 - have the form here full name email
889:12 - address phone date of birth Etc upload
889:14 - resume cover letter agree to conditions
889:17 - submit application and then we have a
889:19 - footer now as soon as we get into the MD
889:23 - layout the cards disappear and the this
889:27 - appears the table appears but we still
889:29 - have this vertical layout for the hero
889:31 - section and the form seems to take up
889:34 - the full width when we get to
889:36 - LG then this now becomes comes
889:40 - horizontal as well and these open up as
889:42 - well you can see that on md2 these open
889:44 - up and on SM these
889:46 - don't so yeah a bunch of changes going
889:49 - on in each section you can just browse
889:52 - through each break point and you can see
889:53 - that the footer also slightly changes
889:55 - you can see that the fter here it splits
889:57 - into multiple lines and here then it
890:00 - expands into a single line and of course
890:02 - we have this nice line here as well okay
890:05 - yep so I think this is looking good at
890:07 - this point I am just going to make the
890:09 - change so I'm I'm just going to commit
890:11 - this so I'm I'm going to say added
890:15 - bootstrap
890:17 - styles for sections and I'm going to
890:20 - commit this and I'm going to sync it and
890:25 - we're ready to actually deploy this okay
890:28 - so this is the final step we're going to
890:31 - take this repository and just deploy it
890:32 - on verell and you know how this is this
890:35 - is really really simple so we just go to
890:37 - github.com or we just go to verel
890:42 - . and on wal.com let us just add a new
890:45 - repository and you can sign up and
890:47 - connect your GitHub account let's add
890:50 - the repository Jovian careers bootstrap
890:52 - live which we have created just now and
890:55 - we are going to the root directory is
890:57 - the SRC directory so I'm going to select
890:59 - the SRC directory and I am on the main
891:03 - branch and I can click
891:05 - deploy and now it is going to take the
891:07 - code that I've just pushed to the get
891:09 - repository and you can see that we can
891:11 - actually see what the change that was
891:13 - just
891:16 - made yeah so we just added the bootstrap
891:19 - styles for sections and in the SRC
891:21 - folder we have this index.html file
891:24 - which contains bootstrap it contains the
891:26 - nav bar it contains the logo toggle
891:28 - button the collapse section it contains
891:31 - the about section with the hero image
891:34 - and it contains a description and links
891:36 - to the boot camps it contains the list
891:38 - of jobs so this is a normal list of
891:39 - cards and it contains a table with
891:42 - bootstrap Styles and it contains an
891:44 - application form and it contains uh the
891:47 - application form contains various types
891:48 - of inputs contains a position resume
891:50 - cover letter Etc contains terms contains
891:53 - a submit button contains a footer and
891:56 - that has just been deployed so in just
891:58 - under 2 or 3 minutes we've deployed our
892:01 - project to verel now we can open it up
892:04 - and check it out and of course it is a
892:07 - fully responsive website so we can
892:09 - actually just open it up here in our
892:12 - device mode View and we can check out
892:14 - the links the links seem to be working
892:17 - fine okay this link maybe needs to be
892:19 - updated to open in a new tab we can
892:22 - check out that job opportunities show up
892:24 - properly all right this is good submit
892:27 - your application this looks fine too and
892:30 - let's just try filling out the
892:31 - application as well Akash
892:33 - NS aashan join.com
892:38 - plus 9
892:41 - one okay let's try to hit submit and
892:44 - it's going to say this is a required
892:45 - field so let us fill this
892:47 - in and let us upload a
892:50 - resume so let's grab a resume here I'm
892:54 - applying for the let's try to apply
892:56 - again okay this is also required so
892:57 - let's select that too well cover letter
893:01 - why
893:03 - well I no responsive
893:07 - design and bootstrap
893:12 - and then I agree to the terms and
893:14 - conditions I click submit and this is
893:17 - going to make a submission remember we
893:19 - were using this third party tool called
893:21 - form bold so if you check the form here
893:25 - we had set the action to form bold and
893:27 - in a future lesson we'll look at how to
893:29 - actually handle the content but we are
893:31 - simply sending it to third party and
893:32 - that is going to then send us an email
893:33 - with the response but yeah the form has
893:36 - been submitted and the Jen team will get
893:38 - notified so perfect I think this page
893:41 - looks pretty good now considering where
893:44 - we started and even compared to where we
893:48 - were the last lesson I think this was
893:51 - looking good better than what you had
893:53 - earlier but it still had certain issues
893:55 - you couldn't you could tell that it's
893:56 - not very polished but you couldn't tell
893:59 - exactly why and that is where Frameworks
894:01 - like bootstrap come into picture you can
894:03 - use their default Styles you can use the
894:05 - examples that they have and you can
894:06 - build out these nice looking uh web
894:09 - pages I think there's still some spacing
894:11 - that we can improve here probably I
894:13 - think the spacing seems a little bit off
894:15 - here too I'll let you fix that as an
894:17 - exercise maybe we can add maybe like a
894:20 - subtitle or something like that but
894:22 - otherwise uh maybe we can increase the
894:24 - size of this header but otherwise I
894:26 - think this is looking pretty pretty good
894:28 - and it also has like slight interactive
894:31 - elements U on
894:33 - mobile so that's it that is what we have
894:36 - ended up with this is what the page
894:37 - looks like all good and this is what it
894:39 - looks like on mobile uh we have these
894:42 - nice cards and we have this nice
894:44 - separation of the different elements of
894:46 - the card as well that's good so in this
894:50 - tutorial we saw how to install bootstrap
894:53 - CSS and JavaScript bundles into a web
894:55 - development project we saw how to modify
894:57 - bootstrap's default colors and
894:59 - typography using CSS variables and
895:01 - custom selectors we saw how to use
895:03 - bootstraps breakpoints and grid system
895:07 - for for creating mobile first responsive
895:09 - web pages remember you have to first put
895:11 - a container then inside it you can put a
895:12 - row if you want to put columns and then
895:14 - you put put multiple columns within the
895:16 - row and you can use sizes on a 12 column
895:19 - grid to arrange them then you can have
895:21 - use the break points as class prefixes
895:25 - and that is how you achieve all kinds of
895:26 - interesting layouts and of course you
895:28 - have a lot of utility classes for
895:30 - display for background for text for Flex
895:33 - so all those are going to be really
895:34 - useful as well we saw how to use
895:36 - bootstraps pre-built components so we
895:39 - used the nav bar we built we looked at
895:41 - an example hero section we we used form
895:44 - components we used tables we used a
895:47 - example
895:48 - footer and we use these for building a
895:50 - web page quickly and efficiently and all
895:53 - the code for this tutorial can be found
895:54 - at this link and you can also check out
895:56 - the finished site because it's deployed
895:58 - to verel automatically and I would
896:00 - encourage you to check out some of these
896:01 - resources the official bootstrap
896:03 - documentation is really the only
896:05 - resource that you need to work with
896:06 - bootstrap and most of the time what
896:08 - you're going to be doing is finding an
896:10 - example or finding the documentation
896:12 - copying copying it over and then
896:14 - carefully making changes to each line
896:17 - always make sure that you understand
896:18 - what exactly what each class does and if
896:20 - you're confused try removing it see what
896:22 - it does or go into inspect element and
896:24 - see what it uh see what explanation you
896:26 - can come up for it
896:28 - with and then we have a bootstrap crash
896:31 - course you can check out which is
896:32 - similar to what we did today but a
896:34 - different example so maybe looking at a
896:36 - couple of different examples can help
896:38 - you just Explore More components become
896:40 - more familiar there are also a bunch of
896:42 - other tutorials and there's this nice
896:43 - cheat sheet that you can check out if
896:45 - you want to understand what are all the
896:47 - different classes that are available and
896:49 - what do they do hello and welcome to
896:52 - this live tutorial on building a
896:55 - scientific calculator from scratch using
896:58 - HTML CSS and JavaScript no Frameworks
897:01 - required we're going to do this all live
897:04 - step by step and we're going to try and
897:06 - replicate the functionality of Google
897:09 - Go's inbuilt scientific
897:11 - calculator and stay till the end because
897:13 - I'll also show you how you can do most
897:15 - of your work simply by asking chat GPT
897:18 - the right questions so with that let's
897:21 - get
897:23 - started now this is what Google's
897:25 - inbuilt scientific calculator looks like
897:27 - if you just head on to google.com and
897:30 - search for calculator you will be able
897:32 - to see this user interface and you can
897:34 - perform calculations here for example
897:37 - 7 - 3
897:40 - multiplied by 69 * by pi and you can see
897:45 - that that gives us the result
897:49 - 86779 and of course you can then use
897:51 - this result and build on top of it as
897:53 - well but this is the basic functionality
897:55 - that we will try and replicate today you
897:57 - can see that there are a bunch of simple
897:59 - calculator buttons here and then there
898:00 - are a bunch of more complex scientific
898:03 - calculator
898:05 - calculation buttons that are also
898:07 - included here so let's see how many of
898:08 - these we can actually Implement and this
898:11 - is what the calculator looks like on
898:13 - mobile so here is the user interface on
898:16 - mobile and here all the functions are
898:19 - under this other tab FX so we'll try and
898:21 - replicate maybe some of this
898:23 - functionality as well and we are going
898:26 - to do this step by step using just basic
898:29 - HTML CSS and JavaScript so all the steps
898:32 - that we're going to follow are listed
898:34 - here in this doc which is linked from
898:36 - the description so you can follow along
898:38 - if you'd like like now there are some
898:40 - prerequisites here you need to know a
898:42 - little bit of HTML a little bit of CSS a
898:44 - little bit of JavaScript and a little
898:45 - bit of git and GitHub now don't worry if
898:48 - you're not an expert in any of these
898:50 - because we are going to cover just
898:53 - introductory uh explanations about each
898:56 - of these as we use them apart from this
898:58 - we will also be using the bootstrap CSS
899:01 - framework and that is again something
899:03 - that I'll refer you to the documentation
899:04 - for in case you're not already familiar
899:06 - with it and you will be able to find the
899:08 - link L here as well so here are the
899:10 - steps we're going to take we're going to
899:12 - first prepare our development and
899:14 - deployment environment so we're going to
899:16 - create a public GitHub repository launch
899:18 - it in GitHub code spaces to edit it
899:20 - completely online then we're going to
899:22 - set up our basic bootstrap framework and
899:24 - also then deploy the web page to verel
899:27 - quickly so that we can test and share
899:30 - our implementation easily then we're
899:32 - going to build the user interface with
899:33 - HTML and CSS we're going to look at what
899:35 - the Google Calculator works like and
899:37 - we're going to build that mobile first
899:40 - design and progressively enhance it for
899:42 - tablet and desktop and then we're going
899:44 - to add some functionality using
899:46 - JavaScript so this is where we're going
899:47 - to add a script file we're going to
899:49 - create some variables and functions to
899:50 - keep track of current and previous
899:52 - expressions and then we're going to
899:53 - create functions to implement the logic
899:56 - for each button and add some click
899:57 - handlers as well finally we are going to
900:00 - test the page carefully on different
900:02 - screen sizes ensure that the HTML CSS
900:04 - and JavaScript is well organized and
900:06 - then stage commit and push the changes
900:08 - to GitHub and verify that the site is
900:10 - deployed now I will leave some parts of
900:13 - these as exercises for you to do so try
900:16 - and build on top of what we are doing
900:18 - today and we'll see how far we can get
900:19 - in about 90 minutes or so and then we'll
900:22 - also talk about how you can use chat GPD
900:24 - to take away maybe more than half of
900:27 - your work all right so with that let's
900:29 - get started and if you have any
900:31 - questions please post them in the
900:32 - comments so the first thing that I am
900:35 - going to do is start a new
900:39 - GitHub repository so I've just gone into
900:42 - github.com I've signed in and I've
900:44 - simply I've simply uh ready to I'm ready
900:48 - to put in a repository name so let us
900:49 - call it
900:51 - scientific calculator live perfect and
900:56 - let's give it a description so a
900:59 - replica of
901:02 - Google's scientific
901:05 - calculator built live or right and I'm
901:09 - going to make it a public repository I'm
901:11 - going to make it open for everyone to
901:12 - use so that you can see the code I'm
901:14 - going to add a readme file and I'm going
901:16 - to select the git ignore template node
901:19 - and that is going to add a bunch of git
901:21 - ignore uh settings which are going to
901:23 - ignore any temporary files that get
901:25 - created when working on a HTML or web
901:27 - development project I'm going to choose
901:29 - the MIT license here because I want you
901:31 - to be able to build on top of this and
901:34 - let's click create
901:36 - repository and just like that we have
901:38 - our repository now created on GitHub
901:41 - GitHub of course is the platform used by
901:44 - 50 million plus Developers for sharing
901:46 - projects online we use GitHub internally
901:49 - at Jovian as well and of course now we
901:51 - need a way to actually write the code
901:53 - and that is where we going to use an
901:55 - online coding platform called GitHub
901:57 - code spaces so I'm just going to click
902:00 - the code button here and you can develop
902:03 - this locally you can get clone the
902:05 - repository and then you can run the code
902:06 - locally but I'm just going to use an
902:09 - online coding platform offered by G
902:11 - GitHub called GitHub codes spaces now
902:13 - what that is going to do is it is going
902:15 - to set up a machine for me in the cloud
902:18 - and then it is going to clone the GitHub
902:21 - repository over there and then it's
902:23 - going to give me this Visual Studio code
902:26 - interface within the browser Visual
902:27 - Studio code is the editor that we use
902:30 - for web development and a lot of
902:31 - software projects and now we can
902:33 - actually start writing our code in this
902:36 - Visual Studio code browser all right so
902:39 - let me just bring this to one half of
902:41 - the
902:43 - screen so that we can be a little more
902:45 - organized here I'm going to close this
902:47 - terminal over here and let's bring this
902:50 - here and we're going to use this for
902:52 - just testing what we are building okay
902:54 - so to begin I'm just going to go back
902:56 - and search calculator so that I have for
902:58 - reference what my calculator looks like
903:00 - so this is what my calculator looks like
903:02 - right over here I am just going to right
903:04 - click and click
903:06 - inspect and gently when you inspect you
903:10 - will see a view like this so you will
903:12 - see some developer tools here below your
903:15 - actual web page and in the developer
903:18 - tools there's this button right here
903:20 - this is called the device mode so what
903:22 - you can do here is click this button and
903:24 - now you can view the web page in a
903:27 - mobile device so you can see a mobile
903:29 - preview of the web page and you can also
903:32 - put the dock to the right side or the
903:34 - left side so that you can actually line
903:36 - it up nicely with a mobile device so
903:39 - this is what let me just reload the page
903:41 - so this is what the calculator looks
903:42 - like on a mobile device on google.com
903:45 - and I'm going to open up one version of
903:47 - it on desktop as well so this is the
903:50 - normal view of the calculator and this
903:52 - is the mobile view of the calculator and
903:54 - we're going to start by building the
903:56 - mobile view of the calculator okay now
903:59 - to start coding uh I am going to start
904:02 - by creating an SRC folder over here so
904:05 - I'm going to just create a folder SRC
904:07 - which is where I'm going to put in all
904:08 - my HTML CSS and JavaScript and now let
904:12 - me create a new file index.html which is
904:15 - going to contain all the HTML that I'm
904:17 - going to write so let me just uh put in
904:20 - a doc type here so that's something that
904:22 - you should always put in let me put in
904:24 - the HTML tag and in the HTML tag let me
904:27 - put in a head tag and let me put in a
904:30 - body tag and in the head tag let me just
904:33 - put in a
904:34 - title scientific
904:37 - calculator
904:39 - and in the body tag let me put in for
904:42 - now just a div that says hello world all
904:46 - right so this is what we have so far we
904:48 - have let's Zoom that in a bit so we have
904:51 - scientific calculator let's get rid of
904:54 - this yeah so we have scientific
904:56 - calculator that's the title of the page
904:57 - we have a body inside the body we have a
904:59 - div that says hello world and now let us
905:04 - simply try and view this page so we want
905:08 - to be able to preview this index.html
905:10 - page and to preview it we can use an
905:13 - extension called live server because
905:15 - it's not very straight forward to
905:16 - preview a web page directly from Cod
905:18 - spaces you need a vs code extension for
905:20 - that so just head into extensions and
905:23 - search for live
905:24 - server okay the live server is simply
905:27 - going to let us preview the web page we
905:30 - are
905:30 - building within code spaces okay so once
905:34 - this live server extension built by Ric
905:36 - day is installed let's close this
905:39 - extension tab here so extensions are
905:41 - found here in the menu you can see that
905:43 - there's an menu called extension and
905:45 - just search for live server install it
905:47 - now once you do that you will see that
905:50 - there is a go live
905:53 - button I'll have to expand this a bit
905:56 - yeah you will see that there's a go live
905:57 - button at the bottom of the page and
905:59 - this go live button is going to turn
906:02 - your code space into a server
906:05 - essentially and it's going to give you a
906:07 - preview of the page that you had open
906:10 - here so I had open index.html here and
906:12 - now you can see that I have this
906:14 - index.html if I zoom in a bit you can
906:16 - see the words hello world over here and
906:18 - you can see scientific calculator in the
906:20 - title so that is how I've set up a
906:21 - preview of my code okay so that's great
906:26 - now we have on the left we have an
906:28 - index. HTML file on the right we have
906:30 - this hello world text so that's great
906:33 - now of course we want to use the
906:35 - bootstrap CSS framework so I'm just
906:37 - going to go in here and search boot
906:38 - bootstrap CSS and bootstrap CSS makes it
906:40 - really easy to build very flexible
906:42 - layouts it also provides a bunch
906:45 - of yeah maybe I should go for the latest
906:49 - version uh it also provides a bunch of
906:51 - different components that we can use and
906:54 - that makes development really fast so I
906:56 - am just going to let's see read the docs
907:00 - and we want to get started with
907:01 - bootstrap so let's start by okay it says
907:05 - that you need to create an index.html
907:07 - file and we need to add a couple of meta
907:09 - tags so let's copy these meta tags meta
907:12 - caret equals utf8 and meta name equals
907:15 - viewport so these are both required to
907:17 - enable proper responsive behavior on
907:19 - mobile devices so I'm just going to come
907:21 - in and paste these meta tags in my code
907:24 - over here so all I've done is I've read
907:26 - the documentation so read meta tags from
907:28 - here and pasted them here then the next
907:31 - thing I'm going to do is include
907:33 - bootstrap CSS and JavaScript so
907:34 - bootstrap contains a CSS file which
907:36 - contains all the styles that it provides
907:38 - and it contains a JavaScript file which
907:41 - contains all the all the interactivity
907:44 - it provides with drop downs and things
907:46 - like that so let's just come in and
907:47 - include those as well so I'm going to
907:49 - include my the link tag for this
907:50 - bootstrap CSS file in my head tag and
907:53 - I'm going to include the script tag over
907:56 - here at the bottom of the body okay now
908:00 - if this doesn't make sense don't worry
908:02 - you can spend some time learning
908:03 - bootstrap but the idea here is we using
908:05 - an external framework all it gives us is
908:08 - some nice things that allow us to
908:10 - quickly build web pages without having
908:12 - to worry too much about writing a lot of
908:14 - custom CSS okay perfect It also says you
908:18 - can also include popper and JS
908:20 - separately well I'm not worried about
908:22 - that so with that I think I have added
908:24 - bootstrap and I should immediately be
908:26 - able to just see that you can see here
908:29 - that the Styles have immediately changed
908:31 - I had a different font earlier and now I
908:33 - have a slightly different font so that's
908:35 - great now we've added bootstrap as well
908:37 - and at this point I my web page is
908:40 - looking pretty good and I think I'm
908:41 - ready to start building my scientific
908:43 - calculator but let me also save the work
908:47 - I've done and the way I'm going to save
908:49 - it is simply by adding so going into the
908:51 - git tab in Visual Studio code and adding
908:54 - a adding a commit message to perform a
908:56 - git commit so I'm just going to say here
909:00 - um add
909:02 - bootstrap let's see add index.html and
909:05 - bootstrap and I'm just going to click
909:07 - commit and it's going to ask me a few
909:09 - things and it's going to just commit
909:10 - those changes and that's it and now this
909:13 - is going to get pushed so you press the
909:15 - sync button and that is going to now
909:18 - push that code back to the repository
909:21 - okay so that of course is the git
909:23 - workflow you open up the code either
909:26 - locally on your computer or on a GitHub
909:28 - code space then you make some changes
909:30 - and you test them out using a live
909:32 - server or some kind of a server and then
909:34 - you commit and push those changes back
909:36 - to GitHub so GitHub makes this workflow
909:38 - very simple and now you can see that in
909:41 - this index.html file you actually have
909:43 - the scientific calculator basic code
909:45 - that we have put up so
909:47 - far all right so with that let us
909:50 - actually start building this scientific
909:52 - calculator so I am just going to build
909:54 - this piece out for now to to begin with
909:57 - and this looks like okay maybe I just
909:59 - want to put this in the center of the
910:01 - page somewhere somewhere over here and
910:02 - maybe I'll just put a title called
910:04 - scientific calculator somewhere so I'm
910:06 - going to start by creating a bootstrap
910:08 - container so I'm going to create a div
910:10 - with the class
910:12 - container and what that does is that
910:14 - creates this nice div which is always
910:17 - going to remain horizontally centered
910:19 - within the page and let us inside this
910:22 - div let us put in an H1 or a header tag
910:25 - and let's call it scientific
910:29 - calculator okay perfect so now we have
910:32 - this scientific
910:34 - calculator thing over here and this is
910:36 - looking fine um I and you can also see
910:40 - that the container is actually centered
910:41 - on the page so that's why this is
910:42 - centered but I could also just add text
910:45 - Center the class text text Center on the
910:49 - header itself so that this header comes
910:51 - right in between okay I could also
910:54 - control the font size if I wanted maybe
910:56 - this is too big for me maybe I don't
910:58 - want something so big well actually I'm
911:00 - not I'm a bit zoomed in and that's why
911:02 - maybe it appears a bit too big I might
911:05 - want to add some space above and that
911:07 - that is where you would normally write
911:08 - some CSS you would say margin top 32
911:11 - pixels or something like that and again
911:13 - bootstrap provides some
911:16 - simple U simple classes utility classes
911:19 - where you can say something along the
911:20 - lines of myy or Mt which stands on
911:23 - margin top and you can say mt2 and it
911:26 - has like a preconfigured sets of margins
911:30 - so you can say 1 2 3 4 or five and that
911:32 - is going to control the margins let me
911:34 - try mt3 yeah so I think mt3 that is the
911:37 - amount of margin that got added here
911:39 - that looks good okay so that's the
911:41 - utility of bootstrap and you can check
911:43 - out all of these classes simply by
911:44 - looking up the documentation so there
911:46 - are these utility classes for spacing
911:49 - and you can see here bootstrap includes
911:51 - a wide range of shorthand responsive
911:53 - margin padding and GAP utility classes
911:55 - and you can do something like mt1 mt2
911:58 - mt3 so I'll let you experiment with it
912:00 - this is not a bootstrap tutorial but the
912:02 - idea is we've just spaced things out a
912:04 - little bit we've centered this on the
912:06 - page and we have now put some space
912:09 - above our
912:10 - title and let's start building this uh
912:13 - let's start building this actual
912:16 - calculator so I'm going to put this
912:18 - calculator inside a card a bootstrap
912:20 - card because that would be a nice way to
912:22 - kind of contain the entire user
912:24 - interface of the calculator because my
912:25 - page is largely empty and the way I'll
912:27 - do that is first I will create a row so
912:31 - in bootstrap whenever you're creating a
912:33 - responsive layout you start by creating
912:34 - a row and in that row I am going to now
912:38 - create a
912:39 - column okay and in this column so maybe
912:43 - let's just look at the row and let's
912:45 - just add a border to the row so that you
912:47 - can see what the row looks like so right
912:48 - now we have this row and this row takes
912:51 - up all the space from this end to this
912:53 - end that's a lot of space I probably
912:54 - don't need that much space uh so I'll do
912:57 - something about it but let me now add a
912:59 - column to it so let me add a column and
913:02 - let me make this maybe just six U let me
913:06 - make it width six columns long so in
913:09 - bootstrap there is something called the
913:11 - grid system so every row is split into
913:13 - 12 columns and you can create a div
913:15 - spanning six columns so this is where
913:19 - my UI my UI is going to go so I could
913:23 - say UI goes here all right so now you
913:26 - can see uh if I add another border
913:28 - around
913:30 - this you can see that now we have this
913:32 - row of content once again I'll zoom in
913:36 - for you so that you can see clearly
913:37 - what's is happening but yeah you can see
913:39 - that now we have this row of content and
913:41 - in that row of content we have this
913:42 - column this one this one div that covers
913:45 - six columns out of the 12 I I want to
913:48 - Center this div I don't want it to take
913:49 - up the entire it but I want it to Center
913:52 - so that's where I can say something
913:53 - along the lines
913:54 - of
913:57 - offset call
914:00 - 3
914:03 - and okay that doesn't yeah I guess it's
914:06 - just offset three
914:08 - yeah so now what we have done is we have
914:10 - said that we have a row and the row
914:12 - spans the entire width of the container
914:14 - and in that we are going to create a
914:16 - column A div which spans six columns but
914:20 - of course it's going to leave three
914:21 - columns on the left and then it's going
914:23 - to create span six columns and then of
914:25 - course three columns are going to be
914:26 - remaining on the right okay so we've
914:28 - left an offset of three columns we are
914:30 - taking up six columns and then we have
914:31 - three more columns on the right that we
914:33 - uh that is that way we've centered this
914:35 - user interface on the page all right so
914:38 - so far so good this is looking fine to
914:41 - me now let us start adding some of the
914:44 - user interface for our
914:48 - calculator um now I'm going to use a
914:50 - card to create the calculator just to
914:52 - have a
914:54 - nice let's see let's just search for
914:56 - card so just to have a nice border
914:59 - around my calcul around my calculator
915:00 - I'm going to use a card so here's what
915:02 - we can do we can create a div with the
915:04 - class card and then we can create a div
915:06 - with a class card body so let me just
915:08 - quickly do that let me get rid of these
915:11 - borders and let me get rid of these
915:14 - borders and I'm just going to say div
915:16 - class equals
915:19 - card and I'm going to say div class
915:22 - equals card
915:24 - body and my UI goes here okay so we're
915:28 - getting close so you can see that by
915:29 - using the card component from bootstrap
915:31 - again just look it up just look at an
915:33 - example you'll get it now we've created
915:35 - this nice card and inside this card we
915:37 - have this nice user interface that we
915:39 - can now start building okay
915:42 - and now let's start by creating so
915:46 - what's the first thing here the first
915:47 - thing is this input box right over here
915:49 - so let's start by creating this input
915:50 - box how do we create an input box let's
915:53 - search for input okay looks like there's
915:56 - something called an input Group which we
915:57 - can use or maybe even like form control
916:00 - I think we need something like this we
916:02 - probably want to just show the output of
916:04 - the button clicks the current expression
916:07 - in an input box like this so I am going
916:10 - to use I think this looks good form
916:13 - control LG so maybe I can just use this
916:16 - so let me just copy this form control
916:19 - LG and come back here and paste that in
916:24 - here and yeah that looks good to me of
916:29 - course I probably don't
916:32 - need I probably don't need this
916:34 - placeholder over here so let me get rid
916:36 - of placeholder so you can see we have an
916:38 - input of the type text and it has the
916:41 - class form control and form control LG
916:44 - to LG simply means large so to make it a
916:46 - little bigger and finally we have uh a
916:49 - bunch of other labels that we might find
916:52 - useful okay so now we have form control
916:54 - LG I'm also going to make this read only
916:57 - because we don't want to be able to edit
916:59 - this directly so I'm just going to make
917:01 - it read only uh like that uh and we only
917:04 - want to edit it based on the content
917:07 - that we put from the buttons that we
917:09 - click okay and that's going to come up
917:13 - soon all right the last thing I'm going
917:15 - to add here is maybe an ID
917:19 - because so I'm just going to give it an
917:21 - ID Cal display and because this ID is
917:24 - going to be used to actually set the
917:26 - value of this particular field over here
917:29 - okay so now we have this field something
917:32 - like this not exactly this but close
917:34 - enough now we need to start adding some
917:36 - buttons so we have all these buttons
917:38 - okay brackets percentage AC 789 Etc so
917:42 - let's start adding these buttons so to
917:44 - add these buttons I am once again going
917:46 - to create another row so I'm going to
917:48 - say
917:49 - div class equals
917:54 - row okay and let's add the first row of
917:57 - buttons here so the first row of buttons
917:59 - is I'm going to use the BTN or button
918:02 - tag and each of the buttons is taking up
918:05 - 1/4 of the space so remember that every
918:08 - row has 12 columns inside it so that
918:10 - means each button is going to take up
918:12 - three columns so maybe first let me
918:14 - create a div with three columns so div
918:17 - class
918:18 - equals call three and that's going to
918:20 - take up three columns and inside this
918:23 - let me put in a button now again there's
918:25 - a way to put in buttons in bootstrap
918:27 - there there are some helper classes so
918:28 - I'm just going to search for button
918:30 - right over here and again we're going
918:31 - quickly because this is not exactly a
918:34 - bootstrap tutorial but you can go to the
918:36 - documentation you can see what buttons
918:37 - look like this is what buttons look like
918:40 - uh I don't want a base button maybe I
918:41 - want a button like this because that
918:43 - seems to be the color that is used in
918:45 - most of these buttons so I'm just I'm
918:47 - just going to use BTN light or button
918:49 - light let's grab that okay button type
918:52 - equals button BTN light and let's just
918:55 - paste that in here and yeah looks like
918:59 - we now have this light button so that's
919:01 - good uh of course we need some spacing
919:03 - around it we maybe need to add a border
919:05 - around it so let's fix that in a second
919:08 - but at this point let me add one button
919:13 - here so the the button here is
919:17 - that okay so my buttons looking fine and
919:20 - let's add maybe a couple more buttons
919:22 - and then we'll fix this spacing Etc so
919:24 - we have another closing bracket
919:25 - percentage and AC so let's come in and
919:28 - fix those
919:30 - buttons okay this is interesting now
919:33 - when we make when we reduce the size of
919:35 - our scientific calculator of our browser
919:38 - that is going to squish the calculator a
919:41 - little bit so maybe we can do this we
919:44 - can say offset
919:48 - md3 and call
919:51 - md6 and for small screens we can just
919:54 - take let it take up the entire space
919:56 - call
919:57 - 12 okay so for small screens it takes up
920:00 - the entire width of the container the
920:03 - this is the the div wrapping or the
920:06 - column wrapping the card so for small
920:08 - screens it takes up the entire width and
920:10 - then it shifts into a smaller width
920:12 - later for MD screens okay and we can
920:14 - adjust this further towards the end but
920:16 - for now this is
920:21 - fine all right coming right back we need
920:24 - to add a few more buttons but let me
920:26 - just improve this button slightly a bit
920:29 - the first thing I want to do here is
920:32 - let's put one more button and then we'll
920:33 - see what we can do about
920:35 - it so the first issue that I'm running
920:38 - into that this button is not really
920:40 - taking up the entire width of the column
920:41 - maybe it should so I could just come in
920:44 - into the button and let me just go into
920:46 - the button and say
920:48 - w00 and w00 is a helper class within
920:51 - bootstrap that makes the button take up
920:53 - the entire width of the column okay let
920:55 - me add that here the w 100 let me add
920:57 - that in here as well so both my buttons
920:59 - have width of 100 so that's good I think
921:02 - buttons can also have a margin top
921:05 - probably so let me add a margin top here
921:07 - so let me say mt1 or mt2 okay mt2 looks
921:11 - good so now there is some top margin
921:13 - that we have added Let Me Maybe also add
921:15 - a border to these buttons because it'll
921:17 - be nice these buttons seem to have a
921:19 - border around them maybe so let me add a
921:21 - border to this as well so let me add
921:24 - empty2
921:26 - border okay the button is looking good I
921:29 - think the space between these buttons is
921:31 - too high um maybe I can reduce the space
921:33 - and this is a default Space Between The
921:35 - Columns within a row and you can control
921:38 - the space between columns using
921:39 - something called gutters uh in bootstrap
921:42 - again that is done I I'll let you
921:45 - explore this but the basic idea here is
921:47 - you can use these GX and gy classes to
921:50 - control the amount of space between
921:51 - columns so I'm just going to come into
921:54 - the come into my row here which which is
921:56 - the row of buttons that I've created and
921:58 - I'm going to say gx1 and you can see
922:01 - just as as soon as I say gx1 the buttons
922:04 - become a little wider and the space
922:05 - between them reduces okay so yeah I've
922:08 - just added a bunch of classes here and
922:10 - you can always look up what these
922:11 - classes do so I encourage you to do that
922:14 - and I encourage you to also maybe right
922:16 - click inspect and see what exactly what
922:19 - are the CSS properties that get applied
922:20 - here okay all right so now we have the
922:24 - button and we have uh another button
922:27 - let's take and let's take these two
922:28 - buttons and add a couple more
922:30 - buttons
922:35 - oops
922:38 - okay let's add let's see what these
922:40 - buttons are so percentage and AC are the
922:42 - buttons that we are adding here so let's
922:44 - add the percentage symbol let's add
922:47 - AC okay that's good now we want more
922:51 - buttons here so one thing we could do is
922:53 - maybe create more rows uh we could
922:55 - actually create another row and then in
922:57 - that row add multiple columns but
922:59 - remember that bootstrap has 12 columns
923:01 - within a row and if you try to create a
923:03 - div that does not fit within those 12
923:06 - columns it'll automatically go to the
923:07 - next line or the next row essentially
923:10 - it's going to wrap onto the next uh line
923:13 - so I can I don't actually have to create
923:15 - a new row I can simply copy these
923:17 - columns and just create another set of
923:19 - columns right below it and what that'll
923:22 - allow me to do is I can then make it a
923:23 - little more flexible maybe uh in my
923:26 - layout but you don't have to do it this
923:28 - way it's just an easy way to do it okay
923:30 - so here's my second row of buttons how
923:31 - many rows do we have so we have 1 2 3
923:33 - four five rows so let's add those five
923:36 - rows here
923:38 - so I'm just copy pasting uh I'm just
923:41 - copy pasting these four columns or these
923:43 - four column buttons again and
923:45 - again 1 2 3 4 and let's add one more set
923:49 - of buttons Perfect all right so now
923:51 - we've added a bunch of these buttons and
923:54 - let's maybe actually put in the values
923:56 - so we have 789 and the division symbol
923:59 - we should find a way to actually copy
924:01 - that division
924:02 - symbol uh let's find
924:05 - it so if you just search division symbol
924:08 - you can actually find the symbol online
924:10 - uh but anyway let's first put it in so
924:12 - this is the first row of data this is
924:15 - fine then this is the second row of data
924:16 - or second row of buttons let me make
924:18 - them 7
924:22 - 8
924:23 - 9 and the division symbol so let's copy
924:26 - that division symbol and put that in
924:33 - here okay so now you have 7 8 9 find
924:36 - division perfect then let us get that
924:39 - next row that is 4 5 6 and the
924:41 - multiplication symbol so let's get that
924:44 - in
924:45 - 4
924:47 - 5 6 and multiplication
924:54 - symbol yeah this is the multiplication
924:57 - symbol so 4 56 and the multiplication
925:00 - symbol perfect it's looking good let's
925:03 - get the next uh set of rows here so one
925:06 - three and the minus
925:08 - symbol so let's get the minus symbol is
925:12 - already present on the keyboard so we
925:13 - don't need to change a lot here 1 2 3
925:16 - and the minus
925:17 - symbol okay we've added the next set as
925:20 - well finally we have 0 dot equal to and
925:23 - the plus
925:24 - symbol so now we have zero we have dot
925:28 - or point or percentage or decimal point
925:32 - equal to and the plus symbol okay but
925:36 - perfect it's looking good I think the
925:38 - equal to symbol can be made blue and
925:41 - again this we can do simply by changing
925:43 - the class here instead of button light I
925:45 - could say button primary and instead of
925:48 - Border I could say border primary or
925:51 - maybe like border and then border
925:53 - primary and that's going to give it the
925:55 - blue
925:56 - color okay with that we have implemented
926:00 - the basic user interface of the
926:02 - scientific calculator right over here
926:04 - and we have of course it's not working
926:07 - yet none of the buttons actually do
926:08 - anything but if for 15 20 minutes of
926:11 - work this is not looking too bad okay
926:14 - so let's go ahead and commit that so
926:17 - basic
926:18 - buttons and input box let's commit it
926:23 - and let us just sync
926:28 - it and that's going to now go and get
926:31 - added to our GitHub repository okay
926:33 - perfect now we'll also see how how to
926:36 - deploy this so stay tuned till the end
926:38 - and as I mentioned earlier we'll also
926:40 - see how to do all of this or most of it
926:42 - using something like chat GPT okay now
926:45 - let us start adding the functionality
926:47 - for this and to add the functionality
926:50 - for all of this we are going to have to
926:52 - use some JavaScript so I'm going to
926:55 - assume basic knowledge of JavaScript
926:56 - here variables data types functions and
927:00 - I'm going to show you how you can use
927:01 - JavaScript within an HTML page and there
927:04 - are various ways to do it but but the
927:06 - simplest way to do it is by using a
927:09 - script tag so you could for example go
927:11 - to this bottom of your body and add a
927:14 - script tag here so I'm just going to go
927:16 - in here and add a script
927:19 - tag and you need a closing script tag as
927:24 - well okay and you can also put in yeah I
927:28 - think that's it and then now you can put
927:30 - in anything inside this so I could put
927:31 - for example
927:32 - console.log hello
927:34 - world okay and and now this anything you
927:38 - put within the script tag is Javascript
927:40 - code so now you can actually check you
927:43 - can
927:45 - inspect let me yeah so this is the
927:48 - mobile view I think that's fine but let
927:49 - me just bring the doc down to the bottom
927:52 - and let me also turn off device mode for
927:56 - now yeah so you can actually check the
927:58 - console tab here of the developer tools
928:02 - you can always go go here from window
928:05 - developer tools or just type developer
928:07 - tools here from the okay it's from The
928:09 - View tab so view
928:12 - developer developer tools or JavaScript
928:15 - console that's going to bring you to
928:16 - this page so view developer JavaScript
928:19 - console there's also a shortcut for it
928:21 - you can see here that we typed
928:23 - console.log hello world and that printed
928:25 - hello world here instead if you had
928:28 - said hello Jovian that would say hello
928:31 - Jovin so this way you can add JavaScript
928:34 - code within your or HTML now of course
928:39 - we need a way to actually connect this
928:41 - JavaScript code with the buttons that we
928:43 - are seeing on screen so the first thing
928:45 - we'll do is we're going to say document
928:50 - dot on
928:52 - ready yeah something like that so uh
928:55 - what what we want to do is we want to
928:57 - make sure that we run the JavaScript
928:58 - only after the entire document has
929:00 - loaded up properly so I'm just going to
929:02 - go in maybe and ask this on jobot our
929:07 - chat GPT powered chat assistant so let's
929:10 - see how do how to run some JavaScript
929:15 - code after the HTML document is ready
929:21 - okay and it's going to tell me some
929:23 - explanation which you should read
929:25 - absolutely okay so basically what it's
929:27 - telling me is that if you want to run
929:29 - some JavaScript code if you want to
929:31 - interact with an HTML page after the
929:34 - HTML page is loaded up properly then you
929:36 - need to put in your JavaScript code
929:39 - inside this piece of code so basically
929:42 - what we are saying here I'm just going
929:43 - to first come in and paste it in here so
929:46 - basically what we saying here is that to
929:48 - the document which is the entire HTML
929:50 - document and this is a predefined
929:52 - variable in JavaScript there's a bunch
929:53 - of predefined variables like window
929:55 - document Etc so to the document we are
929:57 - adding an event listener which means
929:59 - when this event occurs we want to do
930:02 - something with it what is the event that
930:04 - we're looking for we looking for the
930:05 - event Dom content loaded which means
930:07 - that the entire page the HTML the CSS
930:10 - Etc of the entire page has been loaded
930:13 - in by the browser and when that event or
930:16 - when the entire content has been loaded
930:18 - then we are
930:21 - asking the browser to fire this
930:24 - JavaScript function so you can see that
930:25 - we've provided two things we to add
930:28 - event listener which is a function or a
930:29 - method inside document we've added two
930:31 - things we said when the event Dom
930:33 - content loaded is fired which means when
930:35 - the entire content is loaded then call
930:38 - this function inside call this function
930:40 - or call the code inside this function
930:42 - okay and that's why we're providing it
930:43 - as a function because a function can be
930:46 - invoked when the event occurs and not we
930:48 - don't want to run this code immediately
930:50 - we want to run it only after the page is
930:51 - ready okay so that's how you add some
930:54 - JavaScript code into um an HTML page
930:58 - okay now what do we want to do here I
931:00 - guess first thing to do is maybe just
931:01 - once again add that console log saying
931:03 - that document is ready and let's just
931:06 - see and you can see here now the same
931:08 - thing is printed document is ready but
931:10 - of course it is printed after the
931:11 - browser has loaded the entire content
931:14 - okay now let's get remember this input
931:18 - over here we have given it an input uh
931:20 - we have given it an ID calc display okay
931:24 - we've given an ID calc display so let's
931:26 - first get this input let's get a hang of
931:28 - this input so let's um let's call it
931:32 - display so let me say const display
931:35 - equal equals document. getet
931:38 - element by
931:40 - ID
931:42 - Cal
931:44 - display okay so what we're doing here is
931:47 - we are saying that we want to get the
931:50 - HTML element which has the ID calc
931:52 - display and document. get element by ID
931:55 - is the function you use to do that we
931:57 - want to get the calc display HTML
931:59 - element and we want to store it in the
932:01 - variable display okay and now we can
932:03 - just do console.log display for example
932:07 - okay let me fix the tab size over here
932:09 - looks like it's just adding a bunch of
932:11 - spaces that I don't need end it using
932:14 - spaces and two spaces yeah all right I'm
932:17 - good so now we have this now let's do
932:20 - console.log
932:24 - display okay and now you can see here
932:26 - that as soon as the document loads our
932:29 - JavaScript code is searching for the
932:31 - element with the ID Cal display and it
932:34 - is simply printing it here in the conso
932:35 - cons and you can see when I hover over
932:37 - it it actually shows me on the screen
932:39 - right over here that the input box is
932:42 - what um this element is referring to
932:45 - okay so now we've gotten a hold of our
932:47 - input box now let's try to get a hold of
932:49 - all these buttons okay how do we get all
932:52 - these buttons well let's see const
932:55 - buttons equals document dot get Elements
932:59 - by class name and I think all the
933:01 - buttons have the class name
933:04 - BTN and I can say
933:07 - console.log
933:09 - buttons okay great so you can see here
933:12 - that each button has the class BTN all
933:15 - right so we have gotten a hang of all
933:18 - the buttons with the all the elements
933:20 - with the class BTN simply by saying
933:22 - document. get Elements by class name BTN
933:25 - okay and you can see here that we've
933:26 - printed them out and it says that it's
933:28 - an HTML collection of 20 buttons and
933:30 - each Button as I hover over it you can
933:32 - see that shows me that specific button
933:35 - so that's the first first thing you need
933:36 - to understand whenever you're writing
933:37 - some JavaScript code to add interactive
933:40 - interactivity into an HTML code you
933:44 - can simply uh select a some HTML node
933:49 - using things like document by. getet
933:51 - element by ID or you can get element by
933:53 - class name or you can get element by tag
933:56 - name there are a bunch of ways and you
933:57 - can store those HTML elements or
933:59 - references to those HTML elements in
934:02 - these uh in variables of your choice
934:05 - okay all right next up now let us maybe
934:08 - try to add a click Handler to one of the
934:10 - buttons let's do something when a button
934:13 - is clicked so let's say buttons zero and
934:16 - that should simply pick the first button
934:19 - dot add event listener so again now I'm
934:23 - adding an event listener to the button
934:25 - and what event do I listen for want to
934:27 - listen for I want to listen for the
934:28 - click so I'm saying when the button is
934:30 - clicked I want to run a function so I
934:33 - have to provide the function that is
934:35 - going to get executed when the button is
934:37 - clicked okay so the function that gets
934:40 - executed when the button is clicked uh
934:42 - for now I'm just simply going to say
934:44 - console.log first button
934:48 - clicked all right and now you can see
934:51 - that I have this event listener attached
934:53 - to my first button and nothing happens
934:56 - so far you we are not printing first
934:59 - button clicked and let's say I click the
935:01 - first button you are going to see
935:03 - printed your first button clicked so
935:06 - that is the next thing you want to
935:07 - understand that you can add event
935:09 - listeners or click handlers to specific
935:11 - Dom nodes in this case it's a button and
935:14 - you do that using add event listener and
935:16 - you can do that not just on uh click but
935:18 - you can also do hover and let's say I
935:20 - could just then print out first button
935:22 - hovered and this time what happens is
935:25 - when I simply well maybe not hover maybe
935:27 - it's some other event I don't know like
935:31 - Focus I don't know well there's probably
935:33 - some event uh out there but yeah uh for
935:37 - click you can simply get uh some
935:40 - something printed out on clicking okay
935:44 - perfect so now we've added a click
935:46 - listener to one of the buttons but
935:48 - ideally we want to add click listeners
935:49 - to all of the buttons at once uh or
935:52 - individual click listeners to all of the
935:54 - buttons how do we do that well we can do
935:56 - something like this we can say buttons.
935:58 - for each so for each is a way for you to
936:03 - do something for every element in a
936:06 - array in a JavaScript array okay so what
936:08 - you can do is you can now provide a
936:10 - function to for each okay which is going
936:12 - to take each individual
936:14 - button and it is going to operate that
936:17 - on the individual button so the button
936:19 - now is going to refer to each button one
936:20 - by one and now I can say
936:24 - console.log button
936:26 - clicked and from this button maybe I can
936:29 - get the text of that button so button do
936:33 - inner text so if you want to get the
936:35 - text inside an
936:37 - HTML uh element then you do that simply
936:40 - by simply by calling do inner text okay
936:43 - that's a
936:44 - property let's see maybe it's for each
936:47 - without a yeah like
936:53 - that okay
936:56 - so let's turn that
936:59 - into get Elements by I could just use a
937:02 - for Loop here I I think that would be
937:03 - simpler so for let I equals z i less
937:08 - than buttons.
937:12 - length i++ a for each would have been
937:15 - nice but looks like there are some
937:16 - problems when you're working with an
937:17 - HTML collection you probably can't do
937:19 - for each or something but button so
937:22 - const button equals buttons I so what
937:25 - I'm doing here is I'm looping over the
937:27 - list of buttons and I'm getting each
937:28 - button and then I'm
937:31 - saying button
937:33 - clicked button do inner text
937:37 - okay all right so now what we've done is
937:40 - for each button we are simply going to
937:42 - log that the button was clicked when the
937:44 - button is text and we are going to log
937:45 - the inner text of that button
937:50 - so ah I need to add that
937:53 - actual um click listener so I need to
937:55 - say button do add event listener click
937:58 - of course we want to do the console log
938:01 - only when the button is clicked and not
938:02 - always so let's add this console log
938:06 - only when the button is clicked
938:12 - okay all right well let's see what's ah
938:15 - l n GTH that should fix it yeah okay so
938:21 - now you can see here all we've done is
938:23 - got in a list of buttons using get
938:25 - Elements by class name gotten a list of
938:28 - the actual docu the actual display input
938:30 - display using get element by ID and now
938:33 - we are looping over the buttons using
938:35 - this for Loop we saying I equal 0 I less
938:37 - than buttons. length i++ and we getting
938:40 - each Button as buttons I and then we
938:42 - adding a click listener uh event
938:44 - listener to each button and on the event
938:46 - click we want to invoke this function
938:48 - okay the function that that's going to
938:50 - get invoked is simply going to say
938:51 - console.log button clicked and now when
938:53 - I click on a button you can see that
938:55 - each time we simply print which button
938:58 - was clicked button click percentage
939:00 - button click 99 8 7 Etc okay so it's a
939:03 - bit of work to hook up JavaScript code
939:07 - with some of the event handlers for
939:09 - specific Dom nodes for specific nodes on
939:12 - the HTML page that's why a lot of people
939:14 - use Frameworks or libraries like jQuery
939:16 - react Etc but this is just raw
939:18 - JavaScript we're simply picking up a
939:20 - button we are attaching an event
939:21 - listener to it and this is what it's
939:23 - doing okay now of course what we want to
939:27 - do instead is not actually use the
939:30 - console loged event but simply add that
939:34 - here add that information here for
939:35 - example if I type seven I just want
939:37 - seven to be added here okay so here's
939:41 - what we can do about that so let's
939:46 - say in this button let's do this let us
939:50 - first keep track of the current value of
939:52 - the
939:56 - input in a variable called current value
940:00 - okay so let's do that and let us
940:04 - say
940:05 - const value so this is the value that is
940:08 - present inside the button is simply
940:10 - button. inner
940:12 - text okay and now I can say current
940:17 - value plus equals value okay so we have
940:20 - adding we adding the inner text of the
940:22 - button to the variable current value
940:24 - which we have here and then we can
940:28 - say current value uh then we can we have
940:32 - the display here so we can say display
940:33 - do value remember display this this is
940:35 - simply the input box over here so we can
940:37 - say display. value equals current value
940:41 - all right so let's try that
940:43 - out okay so you can start to see here
940:46 - what's happening as soon as we so what
940:50 - we're doing is we creating this variable
940:52 - current value it contains the empty
940:54 - string right now but what we then doing
940:56 - is when a button is clicked we're
940:57 - getting the inner text of the button
940:59 - adding it to the current value so the
941:01 - current value now contains the empty
941:03 - string plus the value from the button
941:05 - plus the value from the next button that
941:06 - clicked and so on and then one very
941:09 - important thing we also doing is we also
941:11 - setting the value of the input box to
941:13 - current value if we didn't have this
941:15 - then current value would keep changing
941:17 - so we could just log current value over
941:22 - here okay we could just log current
941:25 - value over here and you can see current
941:26 - value is changing to whatever I set it
941:29 - to but this is not changing there's
941:32 - nothing is getting added here and that
941:34 - is where you can actually set the value
941:37 - of the value inside an input field and
941:40 - you can change the text inside a
941:41 - particular div and you can do all sorts
941:43 - of things so basically you can modify
941:45 - the content on the page using display.
941:47 - value or display. inner text or whatever
941:50 - you want to uh want to use for it and
941:52 - you can set it to some value that's
941:53 - coming from a JavaScript variable or you
941:55 - can just set it to something manually
941:57 - okay so that's great so now we
942:01 - have this functionality and I think one
942:04 - thing we can do maybe bring it to the
942:06 - right instead of the left so I'm just
942:07 - going to come back in here into my text
942:10 - uh into my HTML code and I'm just going
942:13 - to say for this input text end and I
942:17 - believe that's simply going to orient
942:19 - the text at the end for
942:21 - it and that's looking good okay so now
942:25 - we able to actually capture this value
942:27 - but of course we are not actually
942:30 - working with the equal to yet so we need
942:32 - to handle equal to we need to handle AC
942:34 - let's start with AC AC is simply going
942:36 - to clear the entire thing so let's start
942:38 - with AC so what we can do here is we can
942:41 - actually do an if else on the value of
942:43 - the button text of So based on the
942:45 - button that was clicked we need to do a
942:47 - simp we need to maybe uh run a separate
942:49 - piece of logic so I'm going to say if
942:52 - value which is the button that was
942:54 - clicked equals and I'm just comparing
942:56 - here that's why I'm using the double
942:57 - equal to equals AC then we want to do
943:01 - something else otherwise we want to do
943:03 - something else right so else we want to
943:06 - do this so let's get this into
943:11 - else okay let's get this into else over
943:15 - here and let us now go in here and let
943:20 - us set the current value simply to
943:23 - empty and again let's just set display.
943:26 - value equals current value okay so now
943:30 - we've implemented the functionality for
943:32 - the AC
943:33 - button
943:36 - so let's say minus 3 and when I press AC
943:39 - you can see that's simply clear clearing
943:40 - the current value because its value is
943:42 - AC and it is setting the display value
943:44 - to the current value okay
943:47 - so now I am I think things are looking
943:50 - pretty good so now we are working now
943:52 - this is working of course brackets and
943:54 - all are also working these may not be
943:55 - Val valid Expressions but nevertheless
943:58 - these expressions are working the next
943:59 - thing we need to do is actually evaluate
944:01 - these so when equal to is clicked we
944:03 - don't want to insert an equal to we
944:04 - actually want to evaluate these and for
944:07 - this we're going to use a shortcut here
944:08 - normally some something like Google
944:11 - would actually do a proper ifls
944:13 - condition they would pass the string and
944:15 - they would have some logic to evaluate
944:17 - it or maybe they would send it to a
944:18 - server and evaluate it and get the
944:19 - result here but we just going to use a
944:21 - shortcut which is not safe to use in a
944:24 - production application so I just want to
944:26 - tell you that but here's what we're
944:28 - going to do um let's put another else if
944:31 - over here so let's say else
944:33 - if and after lsf let me just uh close
944:38 - the bracket over here as well and let's
944:39 - say if the value is equal to the string
944:42 - equal to okay I know this looks
944:44 - confusing but we saying the value inside
944:46 - which is the inner text of the button is
944:48 - equal to the string equal to in that
944:50 - case what do we want to do well uh let's
944:53 - maybe write a helper function here to do
944:55 - this so let's see uh let's call this
944:58 - function evaluate so function
945:00 - evaluate and let's call it evaluate
945:03 - result and let us just call this
945:05 - function evaluate result in that
945:08 - case okay and we're going to put and
945:11 - this is just to keep our code organized
945:12 - slightly nicely so evaluate result so I
945:15 - am just going to here's what I'm going
945:17 - to do I am going
945:21 - to Simply say con result equals eval
945:25 - okay now this is a very dangerous
945:27 - function be very careful while using it
945:29 - but here's what eval does you give it
945:31 - some JavaScript code and it is going to
945:34 - ex execute that JavaScript code for you
945:37 - ideally you should not be evaluating
945:40 - User submitted JavaScript code on your
945:43 - website because they can have some code
945:46 - there which can fetch some data from
945:47 - your um from somewhere on your server
945:51 - and then do malicious things with it uh
945:53 - this code could be coming from some
945:54 - Chrome extension or something so
945:56 - definitely never use eval in production
945:58 - applications rather you might want to
946:00 - write an if else to kind of pass the
946:02 - expression and then execute it so that
946:05 - as an exercise but for now I'm simply
946:07 - going to evaluate the current value so
946:09 - I'm going to take the current value as
946:10 - an expression as a JavaScript expression
946:13 - I'm going to evaluate it and you can
946:15 - test this out you can actually go into
946:18 - the yeah so let's say you you type 2 +
946:21 - 3 you can see that that evaluates to
946:24 - five right and you can also do slightly
946:26 - more complex things you can say 2 + 3
946:29 - now of course in JavaScript
946:30 - multiplication has this star symbol 4 /
946:33 - 7
946:36 - and that evaluates 2.85 Etc right so
946:39 - eval is simply going to take an
946:41 - expression and execute it like
946:42 - JavaScript code and store that
946:45 - result in this thing called result okay
946:50 - and then we can say current value equals
946:52 - result and maybe we can convert it to a
946:54 - string so how do we convert something to
946:56 - a string in JavaScript I'm just going to
946:57 - add ask
946:59 - jobot how do you convert something to
947:03 - string in Java
947:05 - script and you can just say two string
947:08 - and that's going to convert it to a
947:09 - string so I'm just going to use that so
947:12 - I am just going to say result dot two
947:15 - string perfect and let me now set
947:20 - display. value equals current
947:23 - value and I think this should be it um
947:27 - let me also maybe yeah let's let's try
947:29 - this out first so let's say 4 + 3 = 7
947:35 - and just like that we've implemented our
947:37 - calculator see that wasn't that hard and
947:39 - we still just about at 160 lines of code
947:43 - but of course most of this code is just
947:45 - a bunch of buttons copy pasted many many
947:48 - times and we will when we learn
947:50 - Frameworks we are also going to learn
947:51 - about how you can reduce the amount of
947:54 - HTML that you write where you don't have
947:56 - to copy paste things and if you have to
947:57 - change the style of all the buttons you
947:58 - have to go and change them in a bunch of
948:00 - places but for now since we're keeping
948:02 - things simple let's just uh keep it way
948:05 - but just like that we've implemented the
948:07 - functionality and it works probably with
948:09 - something even more complex I could say
948:11 - 7-
948:15 - 3 plus and then in Brackets
948:20 - 2.1 +
948:22 - 6 and that entire thing works okay so
948:25 - that's good there is one problem though
948:28 - AC works as well let's try 8 * by 9 what
948:31 - does that
948:33 - do okay that that fails and that fails
948:37 - specifically because well uh inside
948:39 - evaluate result let us just log the
948:41 - value of current value so let's say
948:45 - console.log current
948:47 - value current value okay it's always a
948:51 - good idea to give labels to your logs uh
948:53 - let me get rid of this document. is
948:55 - ready I think I don't need that anymore
948:57 - okay so when I do 8 * 6 you can see here
949:02 - that the current value is 8 * 6 it has
949:04 - this time symbol but we don't want the
949:06 - time symbol we actually want the
949:11 - symbol star the star symbol is what is
949:14 - valid JavaScript code so we may have to
949:16 - do some replacement over here and that
949:18 - is where we can
949:19 - say
949:22 - const
949:24 - um let's see converted Val let's just
949:29 - call it converted value equals current
949:32 - value so current value is a string and
949:34 - and in the string we simply want to
949:36 - replace the the this character over here
949:40 - which is the times character let's get
949:42 - that from our code over here yeah so
949:44 - this is the times character so we want
949:45 - to replace the times
949:48 - character with a star okay so that's all
949:52 - we are doing here and now we oops sorry
949:57 - about that and now um we can log the
950:00 - current value and let's log the
950:01 - converted value as well in the converted
950:03 - value we've simply replaced times with
950:06 - star and let's evaluated let's evaluate
950:09 - the converted value okay so let's now
950:11 - try 7 * 6 equals and you can see here
950:15 - that the current value was 7 * 6 and uh
950:18 - the converted value this should say
950:20 - converted
950:23 - value and the converted value is let's
950:27 - try that again 9 * 6 so the current
950:30 - value is 9 * 6 and the converted value
950:32 - is 9 star 6 which which is valid
950:35 - JavaScript code and that ultimately ends
950:37 - up being converted into the string 54
950:41 - okay so that's great we have fixed that
950:43 - maybe there we also want to fix the
950:45 - division symbol so let's go ahead and
950:47 - fix that as well we don't need to fix
950:48 - minus and plus they're probably fine we
950:50 - probably need to uh do something about
950:53 - the percentage as well we're going to
950:54 - see what to do about that but let us fix
950:57 - the division symbol as well let's grab
950:59 - the division symbol over
951:01 - here and let us come in here and let us
951:04 - just go in and
951:05 - [Music]
951:07 - say yeah replace right so I'm just going
951:09 - to come in and say let's let's add some
951:12 - space here just so that things are a
951:13 - little easier to
951:15 - see and by the way in JavaScript you can
951:18 - actually put statements on the next line
951:20 - just for better readability so I'm
951:22 - simply replacing the division symbol by
951:26 - slash and hopefully now 6 / 3 should
951:31 - work that's two uh let's try percentage
951:33 - so now 9 29% equals okay that doesn't
951:37 - work again so we want to convert
951:39 - percentage as well a quick replacement
951:42 - for percentage would be to Simply
951:44 - multiply by 0.01 so I could just say
951:47 - multiply it by
951:48 - 0.01 and let's see now so let's see AC
951:53 - 9% equals
951:55 - 0.09 okay that's working as well I think
951:58 - that's it that is our basic calculator
952:01 - we've not added the scientific functions
952:02 - yet we will see how to add them in just
952:04 - a bit but that's looking pretty good and
952:08 - things are looking so good so far so I'm
952:10 - just going to commit this so I'm going
952:11 - to say added basic
952:17 - functionality and let me just commit
952:20 - that and let me send that back to the
952:24 - GitHub repository okay now I can check
952:26 - back the GitHub repository over here
952:28 - let's see
952:30 - github.com
952:32 - and I should have my reposit
952:40 - here where is
952:47 - it well I'm just going to go into my
952:50 - profile and in my profile I'm going to
952:52 - look for
952:54 - repositories and here we have scientific
952:56 - calculator live and you can see
952:58 - scientific calculator live has all the
953:00 - code and everything is still inside
953:02 - index.html uh one quick thing I'm I'm
953:05 - going to show you right after this is
953:06 - how to separate out the script into a
953:08 - different file so let's do that as well
953:11 - let me come back in here let's create a
953:13 - file
953:15 - script.js and let's grab all the code
953:18 - from index.html into
953:24 - script.js okay and let's put that in
953:27 - here so that we can worry about it
953:30 - separately and let us now just give this
953:34 - SRC
953:36 - equals
953:40 - script.js okay and it should still work
953:43 - exactly the same
953:44 - way
953:49 - H let me just restart the live server
953:51 - and let's
954:03 - see
954:07 - okay let's uh let's try going live
954:10 - again yeah there it is and let's see if
954:14 - the let's grab this and put it in
954:21 - here
954:23 - okay well it says refuse to execute
954:26 - script
954:27 - from such and such let's we should be
954:30 - able to fix that so let's just go into
954:32 - jobot and let's search
954:34 - I got this error while
954:40 - including JS in
954:45 - HTML okay so we sending the wrong mime
954:48 - type Etc the server needs to do
954:51 - something okay looks like there's some
954:53 - kind of
954:56 - a yeah I'm just going to say I don't
954:59 - have
955:02 - access
955:09 - all right well looks like there's
955:12 - probably nothing I can do about this at
955:15 - the moment so I'm just going to have to
955:16 - maybe bring back my uh JavaScript code
955:20 - well no it's
955:21 - gone okay yeah that did it I think I
955:25 - just had to put SRC script.js instead
955:27 - of/ script.js and that worked yeah
955:30 - sometimes you run into these errors and
955:32 - you just search online and you should be
955:33 - able to to figure them out and let us
955:36 - just Commit This so let's say separated
955:38 - out the script
955:42 - file and let's push it back and now the
955:46 - next thing I want to show you now that
955:48 - this is loaded up let's just yeah you
955:50 - can see there's index.html script.js I
955:53 - want to show you how to deploy this so
955:54 - you can go to wor.com and create an
955:57 - account and worel is a platform for very
955:59 - easily deploying JavaScript related or
956:01 - nodejs projects in any web related
956:04 - project and I'm going to say add new
956:06 - project and you can connect your GitHub
956:08 - account here and it can get access to
956:10 - your private repositories public
956:11 - repositories Etc and you can see here
956:13 - that it can see in my account that there
956:16 - is this scientific calculator live so
956:18 - I'm importing this project over here and
956:22 - here on ver cell.com I can select some
956:25 - framework so I'm not using a framework
956:26 - right now there's a CSS framework but
956:28 - this is talking about more of a backend
956:30 - framework that I'm using I'm not using
956:32 - any of these but I do need to tell it
956:34 - which directory contains my index.html
956:36 - file and that happens to be SRC so I'm
956:38 - going to select the SRC directory as the
956:40 - Live directory and then I can just click
956:43 - deploy okay it's as simple as that you
956:44 - go to wor.com sign in connect your
956:47 - GitHub with it and then click deploy
956:49 - create a new project and select the root
956:52 - root directory and now you can actually
956:54 - go ahead and uh you get this nice URL
956:58 - scientific calculator Livewell doapp and
957:01 - I'm just going to drop that in the chat
957:03 - and you can try it out you can try it
957:04 - out on your own and you can see whether
957:06 - it's mobile friendly or not yep it looks
957:08 - fairly mobile friendly to me yep and
957:11 - we'll have to figure out how to make it
957:12 - exactly like the Google uh scientific
957:15 - calculator but for now I am pretty happy
957:17 - with how this is looking okay great so
957:20 - now let's continue on now that we've
957:22 - done this deployment as well let us
957:24 - continue and add maybe some of the
957:25 - scientific features we may not get to
957:27 - everything we are kind of running out of
957:28 - time here as well but let's see let's
957:30 - add maybe a couple of rows all right so
957:33 - so now there is this selector here 1 2 3
957:35 - in FX I'm just going to add it below I'm
957:37 - just going to keep keep things simple
957:39 - for now but I encourage you to try it
957:41 - out and I'm going to add this row s Ln
957:44 - pi and cos because these seem like an
957:46 - interesting set of things to
957:48 - add so let's see let us come back over
957:52 - here and let us say uh let's add another
957:55 - row
957:56 - of values so let me grab the last four
957:59 - buttons and let me create a copy and let
958:02 - me paste that in here so one is called
958:05 - s then one is called Ln which is
958:09 - logarithm and the natural logarithm
958:11 - probably and one's called Pi let me just
958:13 - get the pi
958:15 - symbol let's get it
958:18 - here okay and the pi symbol over here is
958:23 - just
958:23 - that character and let me get in what's
958:27 - that last symbol over there C so let's
958:29 - get C in here as
958:32 - well
958:35 - okay so let's see if we are able to make
958:37 - that work of course this doesn't need to
958:39 - be a primary button anymore this can be
958:42 - our
958:43 - normal light
958:45 - button all right and yeah there we have
958:49 - sign Ln Pi cos and let's try to just
958:53 - Implement sign for now okay what if we
958:55 - do s and then maybe Open brackets of
958:59 - course like it has to be proper it has
959:01 - to be a proper expression for it to get
959:03 - evaluated and I click
959:06 - equal okay runs into an error so it says
959:09 - reference error sign is not defined okay
959:13 - and I'm literally just going to copy
959:14 - this error and I'm going to come back to
959:16 - jobard and said um say let's just reset
959:23 - this I got this error when trying to
959:29 - compute
959:31 - sign in JavaScript script and what does
959:35 - it say it looks like you may have
959:36 - forgotten to prefix a sign function with
959:38 - the math object and this is how you
959:39 - should be using it nice so I'm just
959:41 - going to go ahead and use that I'm going
959:43 - to go into my script.js and into my
959:46 - script.js I'm just going to add that
959:48 - replace and for
959:51 - sign I am just going to replace that
959:53 - with math. sign and hopefully that
959:56 - should fix it let's go back in here and
959:58 - let us check so
960:00 - S
960:02 - 4 equal okay looks good it's probably in
960:06 - radians not in degrees that's fine I'm
960:07 - not too concerned about the specific
960:10 - details right now so sign is implemented
960:12 - here minus
960:14 - 0.75 uh maybe we should fix cost the
960:16 - same way as well let's see
960:19 - cost uh that is simply math. cost for
960:24 - cost okay so let's try cos
960:29 - 8 * sin 9
960:35 - equals okay yeah seems fine I could I
960:38 - could just test that in this calculator
960:39 - as well uh this calculator actually
960:41 - allows typing to in case you want to try
960:43 - that and it also inserts button it also
960:45 - inserts a bracket and all but cos 8 *
960:48 - sin 9 that's what we did so cos 8 *
960:54 - sin
960:56 - 9 yeah that's about the same 0.559 0.559
961:00 - 599
961:01 - 0599 okay that's good uh let's deal with
961:05 - Ln over here so okay I think one thing
961:08 - we should do is somehow find a way where
961:10 - if the result has already been computed
961:13 - then we should not um pressing a button
961:15 - should not add to that but again
961:17 - Advanced behavior I'm going to leave
961:18 - that for now but
961:20 - Ln 8 let's see if that works nope so
961:24 - let's try math. Ln I'm just going to try
961:26 - this out and see what
961:28 - happens
961:30 - Len math. Ln
961:35 - okay so
961:36 - Ln
961:39 - 8 H math. Ln is not a function so let's
961:43 - see um I'm going to come back here to
961:45 - jobot I'm going to ask it once again uh
961:50 - I'm trying to
961:52 - compute the natural
961:57 - logarithm in
962:01 - JavaScript I get this error
962:06 - okay jan.com jobot just go in here and
962:09 - drop it in okay it's math.log I believe
962:12 - so for the mathematical for the natural
962:14 - logarithm you just say math.log so I'm
962:16 - going to change that to math.log
962:18 - um and I'm going to say uh while we
962:23 - here can you also tell me how to find
962:27 - the value of
962:30 - pi yeah it's just math.pi so I'm going
962:33 - to going to fix that as well so let's go
962:36 - in here and let's
962:38 - replace the pi symbol I'm going to get
962:41 - the pi character the pi symbol is right
962:43 - over
962:46 - here and there you go we have fixed that
962:49 - as well so now we type Pi you press
962:52 - equals that's 3.14 and whatever pi means
962:55 - okay and we can for example try to
962:56 - compute the the P Pi R square of a
962:59 - circle okay that reminds me we can
963:01 - probably add things like Square to
963:03 - let's get one more line while we while
963:05 - we're doing this this is interesting
963:06 - let's go go ahead and Implement one more
963:08 - line over here okay we have log e tan
963:12 - and square root fine let's do it so log
963:16 - I believe would be the log to the base
963:17 - 10 and I can verify that by again going
963:20 - into log to the base
963:23 - 10 equals 1 yeah so log is log to the
963:26 - base 10 so how do we do log base
963:32 - 10
963:37 - lock to the base 10 in
963:41 - JavaScript yeah I think it's going to
963:43 - try and figure out yeah okay there's
963:45 - something called math. log 10x and that
963:47 - is going to do log to the base 10 for us
963:49 - so we can do one more row and probably
963:51 - square root is going to be somewhat
963:52 - interesting so let me just do one more
963:54 - row and I'll leave the rest rest as an
963:56 - exercise for you um so that I don't give
963:59 - everything
964:00 - away let's see so we have these buttons
964:04 - I just going to grab these buttons once
964:07 - again and I am going
964:10 - to drop that in here let's add
964:14 - log uh by the way if you have any
964:16 - questions please drop them in the
964:17 - comments we will look at the questions
964:19 - and alongside I want to tell you that
964:21 - wait till the end because there's going
964:22 - to be something really interesting that
964:24 - you don't want to miss okay so we
964:26 - have
964:28 - log
964:30 - e tan and the the square root symbol so
964:34 - let's go in here square root
964:37 - symbol and let's grab that okay that is
964:40 - called the radical symbol but let's yeah
964:43 - let's just put that in
964:44 - here and now we might want to just
964:47 - handle these as well so what what about
964:49 - e let me just ask it what about the
964:52 - constant e how do I get that well that
964:55 - is simply math. capital E so we just use
964:58 - that so let's go in let's go into the
965:01 - settings uh let's go into the script.js
965:03 - file and let's add those Replacements as
965:06 - well so replace we want to replace log
965:09 - with uh math. log 10 that's fine and we
965:15 - want to replace e
965:19 - with
965:21 - math. e okay and we want to replace tan
965:26 - with math. tan before we actually
965:29 - evaluate it and finally we want to
965:32 - replace let's see the square root symbol
965:35 - and what exactly do we replace it with
965:37 - I'm not
965:40 - sure okay let's just search here what
965:43 - about square
965:45 - root you just use math.sqrt so I'm just
965:49 - going to put in math.sqrt right in here
965:54 - okay and with that hopefully let's see
965:57 - square root of 4
966:01 - equals ah
966:05 - okay there some something went wrong
966:07 - here I believe this requires a bracket
966:10 - so um I think we might need to actually
966:13 - put a bracket here so square root
966:14 - bracket 4 close bracket equals yeah
966:18 - that's two so that works so we might
966:19 - need to rep be a little careful while
966:22 - working with square root or we might
966:24 - want to do something something a little
966:26 - more interesting while replacing instead
966:28 - of just replacing the square root itself
966:30 - maybe you want to take square root
966:31 - followed by whatever comes after it and
966:33 - put that in Brackets or something but
966:35 - for now it's fine but uh another thing
966:37 - that I should do properly is I should
966:39 - maybe just put all of this into a try
966:41 - catch okay so JavaScript has something
966:43 - whenever there's an error you can
966:45 - actually catch the error and you can
966:47 - handle it in some fashion and maybe show
966:48 - a message to the user so let's say try
966:51 - and let's put all of this into a try
966:53 - block okay so it's it's going to try to
966:56 - execute this code and if the uh if the
967:00 - ex if the code works then that's fine
967:02 - but otherwise okay let me just search
967:05 - what is the Syntax for TR catch in
967:08 - JavaScript what is the
967:11 - Syntax for try catch in
967:15 - JavaScript okay the syntax is like this
967:17 - so try catch and then you catch an
967:20 - error and then I'm going to print the
967:22 - error so I'm going to say console.
967:24 - error and that's going to print the
967:26 - error in that nice red format so I don't
967:28 - want to get rid of the error but what I
967:31 - can do is I can set current value Val
967:34 - equals error and I can say display.
967:37 - value
967:39 - equals current value okay this way I'm
967:42 - also informing the user that there is an
967:44 - error and they can then deal with it
967:46 - somehow okay so let's try that again
967:48 - let's do something wrong let's say
967:51 - percentage and let's do equal to here
967:54 - and it just prints error over here just
967:55 - like a normal calculator and it also
967:57 - prints out the exact error for us for
968:01 - the developer to debug invalid regular
968:04 - expression missing slash or something
968:05 - like that right so definitely this is
968:07 - something that you want to do you want
968:09 - to try and catch these errors so let's
968:11 - say you want to understand what exactly
968:13 - is TR catch you can actually ask jobot
968:15 - um or there's like a personal tutor here
968:18 - and you can just ask it teach me about
968:22 - JavaScript TR cat
968:24 - statement and start conversation and it
968:27 - is going to just tell you a bunch of
968:29 - things about the TR catch statement okay
968:31 - what exactly it does it's going to maybe
968:33 - show you an example so it's going to
968:35 - show you an example of how to use it how
968:36 - to catch these errors so you can
968:38 - generate tutorials on demand just go on
968:41 - join.com jobot and if you want to go use
968:45 - one of these specific tools over here
968:48 - just scroll down and use them or you can
968:49 - just type start typing and get help okay
968:52 - all right I think I'm pretty happy with
968:54 - the scientific calculator at this point
968:56 - I am not going to go any further than
968:59 - this um I will leave the design the
969:03 - responsive design to you as an exercise
969:07 - so how do you make it go from this to
969:09 - this that is something I let you figure
969:11 - out uh if you can't then just put all
969:14 - the buttons here below that's perfectly
969:15 - fine you don't have to exactly implement
969:18 - the design and then there's also this
969:19 - one other interesting thing that the
969:21 - Google um that the Google Calculator
969:24 - does you can actually give it a certain
969:26 - input and when you click when you click
969:28 - enter it stores the previous result on
969:31 - top and you can see that pi equals is
969:34 - stored over here and it shows this
969:36 - recent history as well that is probably
969:37 - too complex but this is something might
969:39 - worth checking out where you can have a
969:41 - previous result variable and just show
969:43 - the previous result above the current
969:45 - result again uh it's an optional part so
969:48 - you don't actually have to implement the
969:50 - whole thing but we've got ourselves a
969:52 - pretty good scientific calculator I
969:55 - think I'm pretty happy with this uh
969:56 - right now so I'm just going to save it
969:59 - over here so let me go ahead go ahead
970:02 - and say
970:04 - um
970:05 - implemented a few scientific functions
970:10 - I'm just going to commit it and I'm
970:11 - going to publish it and my scientific
970:14 - calculator should now be live now one of
970:16 - the things that verell does the platform
970:18 - that we've used for deployment because
970:20 - it's connected to our GitHub uh what it
970:23 - does is every time you push to the main
970:26 - branch or the the main branch or the the
970:29 - primary branch of the repository it is
970:32 - automatically Ally going to redeploy
970:34 - your code and you can see here that now
970:38 - you can see that on my versel production
970:41 - website uh it is automatically now it
970:44 - automatically contains the updated code
970:46 - so you can play along with it right now
970:47 - and this is one of the best uh things
970:50 - with using an integrated platform like
970:52 - worel for deployment now you you're
970:54 - probably wondering what if I make a
970:55 - mistake WIll the what if the deployment
970:57 - fails well it's going to use the
970:58 - previous version but if you create a
971:00 - branch and this is something that we
971:02 - cover when we talked about git but if
971:04 - you create a branch then on that
971:06 - particular Branch it's going to create a
971:07 - preview deployment it's not going to
971:09 - affect your main deployment and then you
971:10 - can create a pull request merge it back
971:12 - so that's all about the GitHub workflow
971:15 - okay the final thing that I want to show
971:17 - you before we close is that we didn't
971:19 - actually have to write any of this to
971:21 - begin with um the tools that we that are
971:24 - at our disposal are actually getting so
971:26 - good right now um that you might not
971:29 - actually have to write much of this code
971:31 - at all um so this this is one thing that
971:33 - I tried to do earlier today I just
971:36 - figured what if I could just ask jobot
971:39 - which is powered by chat GPT GPD 3.5
971:41 - right now soon GPD 4 what if I could
971:43 - just ask it that I want to build a
971:45 - scientific calculator similar to the one
971:48 - available within Google search Okay and
971:51 - let's build it step by step so first
971:53 - please give me the basic HTML code for
971:55 - the page and the calculator without any
971:58 - buttons and use the bootstrap 5 CSS
972:01 - framework and make it responsive okay
972:04 - that's what we've said here and let's
972:06 - see if we can if jobot can generate some
972:09 - code for us and looks like it is
972:11 - generating some code looks like it is
972:13 - okay it's generating it it created an
972:15 - HTML page for us it has a meta it has
972:18 - the right meta tags it has this link tag
972:20 - for the stylesheet it has the scientific
972:23 - calculator and I've asked it not to put
972:25 - any buttons right now I'm going to add
972:26 - the buttons in The Next Step but it
972:28 - could have just created the buttons for
972:30 - me as well there's a limit to how many
972:31 - characters it can can give you at
972:33 - once and let me just grab this and let
972:36 - me open up this online platform where I
972:39 - can quickly uh test out HTML code let me
972:42 - get rid of what they have here let me
972:44 - put in this HTML and you can see here
972:46 - that it is creating this scientific
972:48 - calculated this basic layout already now
972:50 - the bootstrap styles did not get added
972:53 - and I have a sense of why that is so one
972:56 - of the issues that the chat Bots or the
972:59 - code generation Bots run into is that
973:01 - they may not because they're
973:03 - character-wise generators they may not
973:05 - actually have picked up the right
973:06 - Integrity which is the hash that is used
973:08 - to verify um the link tag so you might
973:11 - need to replace this link tag with the
973:13 - actual link tag from bootstrap so I'm
973:14 - just going to go back in here go into
973:16 - introduction and grab the link tag from
973:19 - bootstrap itself okay uh so let's go
973:22 - ahead and fix the link tag so you should
973:24 - always verify any AI generated code that
973:26 - you are working with you should always
973:28 - go through every line of code but just
973:31 - because it's not directly giving you the
973:32 - result that you want doesn't mean that
973:34 - it's not going to be able to solve your
973:36 - problem okay let me add that script tag
973:38 - in here as well so it is created for me
973:40 - the scientific calculator and you can
973:42 - see that it's followed the same best
973:43 - practice that I followed or maybe I
973:46 - copied it uh but you can see that it has
973:49 - this row over here and it has this
973:51 - column and okay has okay it's made it's
973:54 - made this calculator too narrow so I'm
973:56 - just going to stick with call md6 or
973:59 - call
973:59 - sm6 so so far so good okay let me now go
974:03 - in here and let me come back okay so now
974:07 - let me ask it okay give me the
974:10 - additional
974:13 - code to add the
974:16 - buttons
974:18 - within the
974:21 - calculator and I'm just going to tell it
974:23 - not to don't rewrite the entire
974:29 - HTML yeah and let's see if it can just
974:31 - give me the code to add the buttons and
974:33 - it does so now it tells me that copy
974:35 - paste this code into the form element um
974:39 - just below the input field so let's do
974:41 - that so now it's adding a bunch of
974:42 - buttons you can see it's adding 78 9/
974:44 - 456 star 1 2 3 so it probably also knows
974:49 - what Google's calculator looks like or a
974:51 - calculator in general and that's great
974:53 - and it's got these bunch of uh other
974:55 - buttons here at the end equal to Z Dot
974:58 - and then it's got maybe a button called
975:00 - clear that's like a huge button and
975:01 - maybe a backspace button
975:05 - okay and it's given me some explanation
975:07 - about the code as well yeah this is just
975:10 - insane I did not expect that things
975:14 - would get to this point um but it it is
975:18 - and let's just put that in here let's
975:20 - add in the buttons okay well it's not
975:23 - looking too bad I think definitely
975:25 - there's maybe some layout changes we may
975:27 - have to do to make the buttons look
975:29 - slightly nicer but I'm not complaining I
975:31 - think this is is fine for now and we
975:34 - could for example go in here and we
975:35 - could say
975:37 - gx1 right uh not just for this row but
975:40 - for every row so we could go in and say
975:42 - gx1 over here we could go in and say gx1
975:45 - over here and we could go in and say gx1
975:48 - over here and maybe gx1 over here right
975:52 - now of course it is using button
975:53 - secondary maybe we could just fix that
975:55 - and use button outline and um let me
975:59 - just actually ask it if it can add some
976:01 - space
976:02 - between the
976:04 - buttons so let's say uh
976:08 - provide some CSS to add space between
976:13 - the rows of
976:14 - buttons okay so now it says okay just
976:17 - add
976:18 - that that's it just add the
976:21 - margin and you can just add it within
976:23 - the you can just add it as a style tag
976:25 - within your
976:26 - HTML and I just go in there and I just
976:29 - put that in there and there you go the
976:31 - scientific calculator is looking rather
976:32 - nice I could maybe come in here maybe uh
976:35 - the H5 I could maybe just uh text Center
976:39 - it and I could maybe just make it read
976:43 - only okay that's nice and but it of
976:46 - course doesn't have any logic yet let's
976:49 - see if jobot can actually write the
976:50 - logic okay this part I'm not too sure
976:53 - but can you
976:55 - now
976:57 - write the logic for the buttons
977:02 - using
977:04 - JavaScript um don't use any
977:07 - Frameworks because sometimes it might
977:10 - use jQuery or something like that that's
977:11 - what a lot of examples on the internet
977:13 - contain don't use any libraries or
977:16 - Frameworks and just give me the content
977:20 - for the script
977:23 - tag okay and let's ask it and let's see
977:26 - if it can do that okay perfect it is
977:30 - giving us
977:37 - H okay it seems like then I I then have
977:39 - to add this okay I let me tell it I
977:43 - don't want to add I don't want to add
977:44 - any on click
977:49 - handlers so you can actually tell it
977:51 - that you're not happy with the code I
977:52 - don't add any on click handers all the
977:55 - code
977:58 - required to implement the
978:00 - logic
978:05 - should be in the script
978:08 - tag
978:10 - okay yeah look at that so now it's just
978:14 - doing document. query selector all
978:16 - expression field and it's given it's
978:18 - given it the ID expression probably and
978:21 - then it is evaluating a bunch of things
978:24 - let's see let's just copy this
978:25 - JavaScript and let's see if that works I
978:27 - am not very confident if this is going
978:29 - to work uh gp4 would definitely do do a
978:32 - much better job gp4 is the newer version
978:35 - of chat
978:38 - GPT but
978:40 - okay yeah so now we have added some
978:43 - event listeners I think it we might want
978:45 - to put it inside document. element ready
978:47 - or something like that but let's see if
978:49 - this works seven nope let's see so what
978:53 - does it say the expression field is
978:57 - called uh okay the input does not input
978:59 - has the idid result so maybe this should
979:01 - be get element by ID
979:03 - result what's the expression field well
979:05 - there's no expression
979:10 - field H Maybe not maybe this is uh
979:14 - you've added the result field okay let's
979:17 - just
979:18 - do let's just change that to current
979:27 - value well what if we just give it the
979:29 - ID result as well so looks like it is it
979:32 - has two Fields one for expression one
979:33 - for result maybe it got confused there
979:36 - but look at
979:38 - that 8 - 9 = -1 that's not bad okay
979:43 - clear and backspace are not working so
979:45 - let's tell it you're not handling the
979:49 - clear and backspace
979:52 - buttons please update the
979:55 - code also there's no field with the ID
980:00 - expression
980:04 - we just have one result
980:09 - field okay and it apologizes for the
980:11 - mistake obviously and now it is going to
980:14 - update things to also handle the yeah
980:18 - again it probably messed things up a
980:19 - little bit like it is thinking about C
980:21 - and slash I guess it probably doesn't
980:23 - have the full context with it anymore
980:26 - but let's go ahead and fix make that
980:28 - small fix uh this is still a lot faster
980:30 - than coding everything from scratch of
980:33 - course and yeah so here it's using this
980:36 - backspace button so instead of the back
980:38 - word backspace it's using just this
980:40 - arrow and it's using C so maybe just
980:42 - let's replace that with clear and let's
980:44 - replace that with or how about we do the
980:47 - other thing we we replace clear with c
980:54 - and and we replace backspace with the
980:58 - arrow
981:00 - character like
981:03 - that okay so how about that 56 and that
981:07 - backspace is now working 56 589 *
981:12 - 23 equal 13 457 yeah 5889 * 23 that's
981:19 - actually right great you could probably
981:22 - also now go in and say add sign log and
981:24 - a bunch of other buttons but I'm pretty
981:27 - happy with this it it just generated an
981:29 - entire scientific calculator with maybe
981:32 - two or three messages it is uh just
981:34 - insane and not only that it also we also
981:37 - just copy pasted a bunch of errors that
981:40 - we encountered and it's all those errors
981:43 - for us so use these tools use chat GPT
981:47 - use jobot uh of course verify the code
981:50 - that it writes do not just depend on the
981:53 - code without verification I've not had a
981:55 - chance here to look through every line
981:56 - of code but you should you should do
981:58 - that because it may introduce some
982:00 - security ver abilities or something like
982:03 - that but in any case that is how you
982:06 - build a scientific calculator using HTML
982:08 - CSS and JavaScript I hope this was an
982:11 - informative session uh a lot of things
982:14 - that look fairly complex are actually
982:16 - really simple to build out it's that you
982:18 - don't have to build in a lot of the
982:19 - complex functionality you should always
982:21 - focus on building the most simple Parts
982:23 - first and then you can always add in the
982:24 - responsive design the animation uh the
982:27 - multiple rows of data the history etc
982:30 - those are all things that actually do
982:31 - require a lot of additional code but the
982:34 - simple functionality is generally fairly
982:36 - straightforward to implement and in a
982:38 - lot of cases you can get a lot of help
982:40 - from from jobot from chart gbt from
982:43 - whatever AI tools you're using Okay so
982:46 - let's see now if we have any questions
982:50 - at uh this
982:52 - point okay
982:54 - well I do not
982:57 - see any questions can this be uploaded
983:00 - on YouTube this is on YouTube it's going
983:01 - to stay on YouTube so you're fine how to
983:03 - create a function for the how to create
983:06 - the functionality of clicking on either
983:08 - FX or 123 and the buttons to Ensemble
983:10 - changing
983:12 - entirely yeah so see if you want to do
983:14 - something more complex than what we've
983:16 - done here ideally what you should be
983:17 - doing is two things one uh you shouldn't
983:20 - just be storing the current value in a
983:22 - string what you should be doing is maybe
983:24 - having an you should have an array of
983:26 - tokens and you should have an array of
983:29 - tokens or array of uh whole hosting the
983:32 - value of button clicks and that array
983:34 - could be converted into some value that
983:37 - is actually displayed in the input so
983:39 - that when we click the equal to button
983:41 - you don't have to evaluate a particular
983:44 - string but instead you can look at
983:46 - element by element look you can look at
983:48 - the array and you can then use some
983:49 - JavaScript code to evaluate an
983:51 - arithmetic expression right so yeah you
983:54 - could for example let's just try this
983:56 - and see what happens okay jan.com jobot
983:59 - you could for example ask jobot write a
984:03 - JavaScript function to
984:06 - evaluate
984:08 - um an expression from a scientific
984:16 - calculator don't use eval okay let's see
984:21 - so this takes an input and it has this
984:24 - whole set of operators and you can add
984:26 - more operators as well you can see here
984:28 - that it has created a bunch of like a
984:31 - BAS basic code for you and now it's
984:32 - going to do some of this business and
984:35 - you can see here that it can work with
984:36 - all of these interesting operators
984:39 - clearly H it could also potentially okay
984:42 - square root is not yet supported but
984:44 - let's say add support for S
984:49 - log
984:50 - cos
984:52 - Etc it's going to then update that and
984:55 - let's see maybe we can actually use it
984:57 - in our code I don't know but uh possibly
985:05 - yeah so it's basically what it's doing
985:06 - is it's maintaining a stack it is
985:07 - putting tokens into the stack getting
985:09 - tokens out of the stack and it is also
985:11 - testing whether the expression is
985:13 - invalid and yeah all of this should work
985:15 - if all of this works then
985:18 - potentially let's see
985:20 - if okay the maybe the expression may not
985:24 - contain any spaces so we may have to fix
985:26 - that it says let tokens equal to exp.
985:28 - spit space um the
985:33 - expression may not contain any spaces
985:37 - what will you do
985:40 - then yeah so it's going to write more
985:42 - complex logic and you can keep working
985:44 - with it and try and figure it out so I
985:46 - encourage you to try that out with chat
985:48 - GPT okay instead of eval you want to
985:50 - create a different function is there a
985:52 - better way yeah so one thing you could
985:53 - do is you could actually attach onclick
985:56 - handlers on specific buttons directly
985:58 - from HTML so I want to show you right
986:00 - here this is what Char GPD or jobot
986:02 - tried to do you can say onclick and then
986:05 - you can provide the name of a JavaScript
986:07 - function that is defined in the script
986:08 - file and you can call it with some value
986:10 - right so you can have a function called
986:12 - button clicked and button clicked Can U
986:15 - be get called with this particular value
986:17 - when this button gets clicked so that's
986:19 - one other way to do it I am not going to
986:22 - go into a lot of detail with that right
986:23 - now but just know that you can also
986:25 - specify onclick handlers within the HTML
986:28 - itself so I hope that answers your
986:30 - question
986:32 - yeah looks like this is actually working
986:35 - not too badly let's just try it out I'm
986:37 - not sure if this is actually going to
986:39 - work but let's see let's put that in
986:42 - here so let's get our evaluate
986:45 - expression and instead of eval let's
986:48 - just do evaluate expression over
986:50 - here evaluate expression I should be
986:54 - taking a close look at this code but
986:56 - what the hell let's see 7 * 9 equals
987:00 - nope there's definitely some error here
987:02 - I guess there's it's not uh that
987:05 - straightforward because it's like doing
987:06 - some regular expression
987:10 - match yeah but now 7 * 8 works fine yeah
987:15 - so you might need to just test this a
987:18 - little more carefully than what we have
987:20 - done here um you can one way to test
987:23 - this would be maybe to put it into a
987:25 - JavaScript console and then test it out
987:27 - uh but this
987:29 - looks this looks good I don't have have
987:31 - a problem with this um with the
987:33 - modification it should probably work out
987:34 - just fine
987:36 - okay all right I think that's everything
987:40 - that we were covering today so let's
987:43 - just go back and check where we started
987:45 - so we wanted to build a scientific
987:47 - calculator and the way we did this is
987:49 - let's grab those links and put them in
987:51 - here as well so that you can actually
987:53 - see these so here is the finished code
987:55 - I'm just going to add it right here in
987:57 - this Doc it's also going to be in the
987:59 - description here is the actual
988:02 - scientific calculator that we built out
988:04 - the finished site uh that's right
988:07 - here so we created a public GitHub
988:09 - repository we Ed GitHub code spaces for
988:11 - development we added the bootstrap CSS
988:13 - framework and of course we also later
988:15 - figured out how to deploy this web page
988:17 - to the cloud by creating a verel project
988:20 - and you can then connect it to your own
988:22 - domain as well something like scientific
988:24 - calculator. a or something and it should
988:26 - it should work fine too so that was the
988:28 - first step prepare for development and
988:29 - deployment the second step was to build
988:31 - the user interface with HTML and CSS so
988:34 - we added the content for each section
988:36 - one by one using HTML This Is What It
988:39 - ultimately looked
988:40 - like this was the HTML code so we had a
988:45 - bunch of uh we had like this row we had
988:48 - maybe a a column inside it we had the
988:51 - title we had a card we had a body inside
988:53 - the card we had an input then we added
988:55 - the buttons row by row so uh we could we
988:58 - could also have used the browser inspect
989:00 - tab on Google to inspect it but we
989:02 - didn't need to do that uh we didn't
989:04 - really get into a lot of progressive
989:06 - enhancement for tablet and desktop but
989:07 - we did make it a mobile friendly or
989:09 - mobile first design and we've not tried
989:12 - to design replicate the design very
989:13 - closely but we did our best effort given
989:16 - the time we had then we did add a script
989:19 - file later in the in the process but we
989:21 - started out Simply with a a simple
989:24 - script uh tag of the file was added
989:28 - later f variables and functions to track
989:31 - the current we were just tracking the
989:33 - current expression we didn't really
989:34 - track the previous expression uh we
989:36 - added functions to implement the logic
989:38 - for each button Well turns out we could
989:41 - just use eval and we did not actually
989:42 - have to implement the logic separately
989:44 - for each button and then on click
989:46 - handlers those we just added it in a
989:48 - loop so we took a bunch of shortcuts
989:50 - here which is fine for something like
989:51 - this where there is no sensitive
989:53 - information for us to worry about we
989:55 - just used eval but otherwise you might
989:57 - want to use an evaluate
989:59 - expression kind of formula or an
990:01 - evaluate expression function again could
990:04 - be generated with help from jobard you
990:06 - could also give it some example inputs
990:08 - saying these are some example inputs you
990:09 - have to handle and giving the keeping
990:12 - those example inputs in mind it's going
990:14 - to then generate a function so remember
990:16 - that it's not always going to be able to
990:17 - read your mind and know exactly what you
990:19 - need so you need to give it some input
990:22 - you need to give it some examples and in
990:23 - a lot of cases you can also give it uh
990:26 - if it does not give you exactly what you
990:27 - want you can then ask it another
990:29 - question follow up with it it and it can
990:31 - give you the right answer and you can
990:34 - also just copy paste your error and
990:35 - it'll fix things for you okay um and of
990:38 - course you should very carefully look at
990:40 - all the code that is generated by AI
990:42 - definitely don't just copy paste the
990:43 - code into your projects okay test the
990:46 - page carefully at different screen sizes
990:48 - Ure that HTML CSS JavaScript is well
990:50 - organized yeah it looks fairly well
990:51 - organized to me I could add a few
990:54 - comments here in there maybe I could add
990:56 - a few comments here so I could always
990:58 - just go in here and I could would say to
991:02 - jobot add some comments to the following
991:07 - JavaScript
991:12 - code and it can add a bunch of comments
991:14 - for
991:18 - me yeah it is now explaining the code
991:20 - but I want to I want to add some
991:22 - comments inside the code and I can
991:24 - always tell it that uh yeah please
991:28 - add comments inside the code
991:31 - okay so it may not understand it may not
991:33 - exactly understand what you want it to
991:35 - do but just talk to it just don't give
991:38 - up immediately and now it is rewriting
991:40 - the code for us with a bunch of comments
991:42 - how nice is that all right and one thing
991:44 - you can also do is you can just use
991:45 - jobot to get explanations on code so you
991:48 - can always just go on jan.com jobot and
991:51 - simply go on code explainer and paste
991:54 - whatever piece of code you have enter
991:56 - the programming language and it's going
991:57 - to explain that code to you but let me
991:59 - just for now now let me just take this
992:01 - code put that in here and see if it
992:04 - still works I think it should I don't
992:06 - see any reason why it shouldn't
992:07 - generally doesn't mess this up too much
992:10 - let's see 8 88 - 3 = 85 yep Ln or let's
992:17 - do AC
992:19 - Ln 8 that should be about okay Ln seems
992:24 - to have
992:27 - failed yeah for I I'll investigate that
992:30 - later but yeah you can definitely use it
992:33 - to document your code as well just
992:34 - verify that it has not modified any of
992:36 - your existing code okay so that we did
992:39 - then we staged commit and pushed our
992:41 - changes all in a few clicks on vs code
992:44 - didn't have to write any get commands
992:46 - and then we verified that our site is
992:48 - deployed to verel we tested it
992:51 - out and it's working
992:53 - fine again maybe there might be
992:55 - something I might need to fix yeah
992:56 - there's something wrong with my Ln
992:59 - function cannot read properties of
993:01 - undefined log 10 yeah I guess it's
993:04 - probably math log 10 there's something
993:07 - wrong with
993:08 - that in
993:14 - JavaScript math.log
993:18 - 10 H okay I don't know what's
993:22 - um what's going on here but we'll fix it
993:25 - we'll find it and we'll fix it no
993:28 - problem so with that we've reached the
993:31 - end of this tutorial I hope you enjoyed
993:33 - it do leave a like on the video and of
993:36 - course please do subscribe we we're
993:38 - going to do more of these
993:39 - tutorials and if you have any questions
993:42 - please post a comment we will try and
993:44 - reply to all the comments uh
993:45 - specifically if you have technical
993:47 - doubts or you could also just go on
993:48 - jan.com jobot and ask your question
993:51 - there and continue building on this try
993:54 - to see how close you can get to the
993:56 - Google scientific calculator the closer
993:58 - you get try to implement this toggle for
994:00 - radians and degrees see exactly what it
994:02 - does um and and try to maybe also add
994:04 - this button which is going to toggle a
994:06 - few things again the hint here is maybe
994:08 - use some JavaScript to trigger the maybe
994:12 - have like one div of buttons and another
994:15 - div of buttons below it and have a
994:17 - JavaScript variable which tracks which
994:18 - mode you are in and based on the change
994:20 - to the variable also change the display
994:22 - property of the divs so that's kind of
994:25 - the hint that I'm going to give you here
994:27 - but I'll leave it at that so thank you
994:29 - for joining and have a good day or good
994:32 - night take care now the express web
994:35 - application framework is a minimalist
994:37 - web framework for nodejs streamlining
994:40 - serers side application development with
994:42 - flexible routing middleware and a
994:44 - vibrant ecosystem of libraries so we'll
994:47 - talk more about all of these aspects
994:49 - don't worry if these don't make sense
994:51 - right now now you might think that a
994:54 - server is a piece of software and that
994:56 - is partly true server is some uh is a
994:59 - piece of hardware and uh you might think
995:01 - that a server is a piece of hardware and
995:02 - that is partly true these are racks of
995:04 - servers in a data center but the server
995:07 - that we going to talk about today is a
995:09 - piece of software that serves
995:12 - requests now uh here's what we're going
995:15 - to cover in today's tutorial we'll talk
995:17 - about creating and running a web server
995:19 - using the express web framework we will
995:21 - talk about serving HTML Pages static
995:24 - files and dynamic data using templates
995:27 - we will talk about using route
995:29 - parameters to create and serve Dynamic
995:31 - Pages we will talk about accepting form
995:33 - submissions and sending emails from a
995:35 - server so there's a lot of ground we're
995:36 - going to cover today and in some sense
995:38 - we are stepping into the full stack
995:41 - domain here in some sense we are
995:42 - covering the backend side of things now
995:44 - that we've learned basic web development
995:46 - so let's move forward now of course the
995:48 - best way to learn these skills is to
995:50 - follow along step by step and type out
995:51 - all the code yourself so make sure to do
995:53 - that to get a proper understanding and
995:56 - we will explore these Topics by
995:58 - attempting to solve this problem
996:00 - statement so the last time we created a
996:02 - jovian careers website powered by
996:04 - bootstrap and this is what it looks like
996:06 - it has a navigation bar it has a bunch
996:08 - of links here in the navigation bar and
996:11 - a sign-in button it has this work at
996:12 - Jovian section with some text and an
996:14 - image and it has this job opportunities
996:17 - table a list of job opportunities and an
996:19 - application form and it has a footer
996:22 - here at the bottom okay so we built all
996:23 - of this using
996:25 - bootstrap and you might also
996:28 - remember you might ALS also remember
996:31 - that uh we had made this responsive so
996:34 - you can see here that there's an image
996:35 - here at the top there is some text and
996:38 - on the mobile view we have cards instead
996:40 - of um instead of a table and we have the
996:43 - same application form except that it is
996:45 - now adjusted to show up properly on
996:47 - mobile and it scales properly as we grow
996:50 - from Mobile to tablet where we switch
996:52 - into the job opportunities table from
996:54 - the job opportunities card list and then
996:57 - we also take up more space on the screen
996:59 - okay now uh we are going to do a couple
997:02 - of things this time the first thing is
997:04 - that we should we want to make the main
997:07 - page only show a list or a table of job
997:08 - openings we do not want to have the
997:10 - application form on the same page uh
997:13 - it's probably a better idea if clicking
997:15 - on a particular job role opens a job
997:17 - Details page with an application form
997:20 - and submitting that application form can
997:22 - then potentially trigger an email to us
997:26 - and also show an acknowledgement for
997:27 - acknowledgement page to the user so now
997:30 - we going to build a server which is
997:31 - going to accept these form responses and
997:33 - send out an email so let's get into it
997:36 - now of course we assume here that you
997:38 - have knowledge of HTML and CSS Basics
997:41 - and a responsive design with bootstrap
997:43 - and you are familiar with Version
997:45 - Control with GitHub and Cloud deployment
997:47 - with verel okay if you haven't please
997:49 - make sure to review the previous lessons
997:52 - uh before we move forward and you can
997:54 - find all the source code and the result
997:56 - for the starter site and the Finish site
997:58 - over here in the notes so we'll start by
998:00 - creating a GitHub repository so I'm just
998:02 - going to go over to github.com and if
998:05 - you're not signed in make sure to sign
998:06 - in and I'm going to click new and I am
998:09 - going to create a repository and let me
998:11 - just call this Jovian careers express
998:14 - live because we're building this live
998:17 - and this is simply a jovian career
998:20 - site powered by
998:23 - expressjs all right and this is going to
998:26 - be a public repository I am going to
998:28 - initialize it with a readme file I'm
998:30 - going to select the git ignore template
998:32 - nodejs because we're going to actually
998:34 - write some nodejs code this time and I'm
998:36 - going to give it the MIT license and
998:39 - let's create this
998:40 - repository so with that the repository
998:43 - is now created and now we need a now we
998:46 - need a way to run this repository and of
998:48 - course you can download this repository
998:50 - onto your computer and run it but we are
998:53 - going to run it using Code spaces and I
998:56 - just select the code option here and
998:57 - select code spaces and click create
999:00 - codespace on Main and what this does is
999:03 - GitHub sets up a machine for us on the
999:05 - cloud where it pulls the contents of
999:07 - this repository and opens up a visual
999:09 - studio code interface for us to interact
999:12 - with the repository which is to write
999:13 - code and run the code test things and
999:16 - then we can push these changes back to
999:18 - the GitHub repository okay so that is a
999:19 - GitHub workflow that we have been
999:21 - following for the past few
999:24 - lessons all right let's give that a
999:26 - second to uh start
999:28 - properly
999:32 - now um let us uh so here's what you do
999:35 - to uh start developing on GitHub Cod
999:38 - spaces and now let us start building our
999:42 - web server now web servers are software
999:45 - applications that handle incoming
999:46 - requests from a client and that client
999:49 - could be a web browser or that client
999:51 - could be a mobile application or that
999:53 - client could be a Discord bot slackbot
999:55 - anything any form of a client any
999:57 - anything that requests or needs some
999:59 - information makes a request to a web
1000:02 - server and then the web server processes
1000:04 - that request and for processing the
1000:06 - request it may then contact a database
1000:09 - it may contact another external service
1000:11 - it may do some uh data processing and
1000:13 - then it returns that response back to
1000:15 - the client all right so there is a
1000:17 - request sent from the client some
1000:18 - processing happens from the server and
1000:20 - the response is sent back to the client
1000:22 - so that's basically what a web server is
1000:24 - software applications that handle
1000:26 - incoming request from web clients and
1000:28 - it's a it runs on a computer essentially
1000:30 - so web server is running on some
1000:32 - computer on the cloud and is handling
1000:34 - incoming requests and it responds to
1000:36 - these requests by sending back the
1000:37 - requested content and that could be web
1000:39 - pages images videos data Etc and to
1000:43 - communicate with the web server
1000:44 - typically you use an
1000:46 - HTTP um protocol which is where you
1000:49 - often see if you just check the URL of
1000:51 - any page it says https or HTTP and that
1000:55 - basically means that you using the HTTP
1000:57 - your browser is using the HTTP protocol
1000:59 - to commun Comm unicate with the web
1001:00 - server and web servers can be configured
1001:03 - to handle different types of content for
1001:05 - example HTML CSS JavaScript PHP python
1001:08 - all it just depends on what kind of uh
1001:11 - software you want to run on your Cloud
1001:14 - computer which is powering the web
1001:16 - server and web servers can obviously be
1001:18 - used to host web applications for
1001:20 - example Jupiter what we are using here
1001:22 - is running on a web server Jovian itself
1001:24 - runs on a web server Google Instagram
1001:26 - Facebook everything runs on a web server
1001:28 - now the difference between websites that
1001:30 - we've been building today St the
1001:33 - difference between websites that we've
1001:34 - been building so far called statch
1001:35 - websites and web servers is that web
1001:37 - servers can deliver Dynamic content from
1001:40 - a database or a rest API whereas static
1001:42 - sites like index.html the web pages that
1001:45 - we were building cannot deliver Dynamic
1001:47 - content so today we'll talk about how we
1001:49 - can deliver Dynamic content using the
1001:52 - express web application
1001:54 - framework so let's get uh started with
1001:57 - Express um so here's what you need to do
1002:00 - to set up a simple hello world project
1002:02 - using Express GS step one is to
1002:05 - initialize a nodejs project inside a
1002:07 - project directory so we are here in this
1002:10 - GitHub uh project GitHub repository that
1002:14 - is open on codespace and I guess we can
1002:16 - just go ahead and use this as our
1002:18 - project directory so I'm going to
1002:19 - initialize a new nodejs project here and
1002:22 - to do that I'm just first going to zoom
1002:23 - in a little bit all right so let's zoom
1002:26 - in here and I am going to start by
1002:29 - typing npm init minus y so let's type
1002:32 - npm init minus
1002:34 - y and
1002:36 - now the you will see here that a project
1002:39 - has been initialized and what that
1002:41 - really means is a package.json file has
1002:43 - been created so you can check here in
1002:45 - the sidebar there is a package.json file
1002:47 - which contains the name of the project
1002:49 - which is auto inferred from the name of
1002:50 - the directory it contains a version and
1002:52 - a description again both of these are
1002:54 - Auto inferred version is set to 1.0 and
1002:56 - description is auto inferred from the
1002:58 - readme and then we have a then we have a
1003:02 - main file so this is not something that
1003:04 - has been created yet and this is
1003:05 - something that we can potentially change
1003:07 - when we want to in fact we can even
1003:08 - remove it if you want then we have some
1003:10 - scripts here some keywords some author
1003:12 - some license these are not important
1003:14 - right now these are more important when
1003:15 - you are publishing a module to uh the
1003:18 - npm registry but for us the key things
1003:21 - here are um these and these are some
1003:23 - things that we will modify over time all
1003:25 - right so now that we've initialized the
1003:27 - nodejs project the next step is to
1003:29 - install the expressjs web framework and
1003:32 - we're going to install the expressjs web
1003:33 - framework by simply running npm install
1003:36 - Express so I'm going to come in here and
1003:38 - once again let me reset things here and
1003:40 - I'm going to
1003:43 - say and I'm going to say npm install
1003:47 - Express now when we click npm when we
1003:49 - type npm install Express you can see
1003:51 - that a node modules folder is created
1003:54 - here and inside these node modules
1003:55 - folder Express and all of its transitive
1003:58 - dependencies get in installed so you can
1004:00 - see here that you have uh you have
1004:02 - Express here of course this is the
1004:03 - Express framework then there is also a
1004:06 - bunch of other Frameworks that have been
1004:08 - installed now I do want to mention that
1004:10 - the node modules folder will not get
1004:12 - added to your GitHub repository when you
1004:14 - push these changes back to GitHub
1004:16 - because if you check the git ignore file
1004:18 - you'll see that node modules is
1004:20 - mentioned here uh so basically we don't
1004:23 - want to uh send all of these dependency
1004:25 - files all their JavaScript code to our
1004:27 - GitHub repository because that's going
1004:29 - to make our GitHub repository really
1004:30 - heavy uh so instead what we do is we
1004:32 - simply add that dependency in
1004:35 - package.json and that happens when you
1004:37 - run npm install so you can see that
1004:39 - package.json contains the name of the
1004:41 - dependency that you need to install and
1004:43 - the version of the dependency and
1004:45 - whenever you need whenever somebody
1004:46 - someone else need to run your code they
1004:48 - can simply get the bare minimum code and
1004:50 - then they can run npm install and they
1004:52 - can install all the dependencies on
1004:54 - their computer and the same can happen
1004:55 - when you're trying to deploy this
1004:57 - application to the cloud all right so
1004:59 - keep that in mind that we don't commit
1005:01 - the node node modules server the node
1005:04 - modules folder to our GitHub repository
1005:07 - because it is ignored in the git ignore
1005:09 - okay now you will also see this package
1005:10 - log. Json file basically what this
1005:13 - contains is all the dependencies that
1005:16 - node modules uh that expressjs depends
1005:18 - on those are listed here and their
1005:20 - versions are listed here so this is to
1005:22 - ensure that some of the transitive
1005:24 - dependencies don't go out of date and
1005:26 - cause problems later so this is to lock
1005:28 - the version verions of all the
1005:30 - dependencies that you've installed and
1005:31 - and their dependencies and their
1005:33 - dependencies and so on okay now don't
1005:35 - worry if all of that doesn't make sense
1005:36 - the only key thing you should keep in
1005:38 - mind is when you say npm install and
1005:40 - type the name of a package that is going
1005:42 - to get added into the package.json file
1005:45 - and that can then be used to reinstall
1005:47 - that package on any other computer okay
1005:51 - now next we are going to create a folder
1005:53 - called SRC and we are going to put all
1005:55 - our application code inside that all our
1005:58 - HTML CSS Javas script Etc and inside the
1006:01 - SRC folder we're going to create a new
1006:02 - file app.js and inside it we're going to
1006:05 - add some content so let's create a
1006:07 - folder SRC so I've just created a folder
1006:10 - SRC and now let's create a file
1006:13 - app.js and now in the app.js file I'm
1006:17 - going to say uh let me copy of the first
1006:19 - two lines so I'm going to say Express
1006:21 - equals require Express this is how we uh
1006:23 - pull in the express dependency so this
1006:26 - is how we get access to the express
1006:28 - Library by saying require Express and
1006:30 - then I can create an app an express
1006:33 - application a web application simply by
1006:35 - calling the express function okay and
1006:37 - just like that an app has been created a
1006:39 - web server has been created but we're
1006:41 - going to do a couple more things as well
1006:43 - now the first thing we're going to do is
1006:45 - set a basic um set a basic route okay so
1006:51 - let me just paste this over and then
1006:52 - we'll talk about it here so what we're
1006:54 - saying is app.get so we're saying that
1006:56 - when the app gets a request and when it
1006:59 - gets a request on slash which means when
1007:00 - it gets a request on the basic route
1007:02 - right by the basic route we mean it's
1007:04 - simply let's say this application was
1007:06 - deployed on jan.com then when you try to
1007:09 - access jan.com that is treated as the
1007:11 - slash or the root level route but let's
1007:13 - say if you try to access jan.com aashan
1007:16 - that would be treated as the SL aashan
1007:18 - route okay so if you just try to access
1007:21 - the server raw without any sub path to
1007:24 - the URL then that is going to get sent
1007:27 - to this particular route so whenever
1007:30 - you're add whenever you're attaching a
1007:32 - route Handler to whenever you're
1007:34 - attaching a route for an express
1007:35 - application you need to specify a route
1007:38 - Handler which is basically just a
1007:40 - function that is given the request that
1007:42 - has been sent from the client and that
1007:44 - is given a response object and it can
1007:47 - then use the response object to send the
1007:49 - data back to the client okay so the
1007:51 - request object is used to get data from
1007:54 - the client the data that the client has
1007:55 - sent in its request the response object
1007:57 - is used to send data back to the client
1007:59 - all right so you will see this pattern
1008:01 - very commonly in all JavaScript web
1008:03 - Frameworks you'll attach a route and the
1008:06 - method could be get post Etc we'll talk
1008:08 - about that but you'll attach a route and
1008:10 - to the application and for that route
1008:12 - you will specify a route handling
1008:14 - function
1008:15 - okay finally we actually need to run the
1008:18 - server and the way you run the server is
1008:20 - by calling app. listen so once you've
1008:23 - created an express application you can
1008:25 - say app. listen and basically what this
1008:28 - is saying is now the app will start
1008:30 - listening for requests now to start
1008:32 - listening for requests it needs to
1008:33 - specify a port there are many
1008:35 - applications that can run on the same
1008:37 - computer on the same Hardware so the
1008:40 - different applications or different
1008:42 - servers can occupy different ports they
1008:44 - can listen at different ports all right
1008:46 - so that's where so think of it as
1008:47 - mailboxes within a building so you
1008:50 - specify your mailbox number or your port
1008:52 - number so let's see app. listen port and
1008:57 - the port is currently just being set to
1008:58 - three ,000 but what we also often do is
1009:02 - sometimes while running the application
1009:04 - a an external Port is specified so when
1009:08 - an external Port is specified while
1009:09 - running the application that is going to
1009:11 - be configured in what's called an
1009:12 - environment variable process. env. Port
1009:15 - but we uh if that is not specified we
1009:18 - just pick the default value of 3,000
1009:19 - okay so for now again don't worry about
1009:21 - this line basically what it says is use
1009:23 - the port 3000 if no other Port has been
1009:25 - specified while running the application
1009:28 - okay all right so this app is going to
1009:30 - start listening on this port 3000 when
1009:33 - we run the project and it is also going
1009:35 - to just print something out to the to
1009:37 - the console saying that the server is
1009:38 - running on such and such URL
1009:42 - okay so with that we have set up our
1009:44 - very basic web application that is going
1009:46 - to take a request and simply return
1009:48 - hello world now uh the last thing we
1009:51 - need to do is we actually need to
1009:52 - configure
1009:54 - a command to run this server so one way
1009:58 - we could run the server is just go and
1010:00 - say node SRC app.js okay that's one way
1010:04 - to do it we just go into the terminal
1010:06 - and type node SRC
1010:08 - app.js but the preferred way to run or
1010:11 - configure applications in general is to
1010:13 - specify the script that is used to run
1010:15 - the server in the package.json file so
1010:19 - in package.json you will you will have
1010:21 - this scripts object and in this scripts
1010:25 - object it is common to just add a start
1010:28 - key and in that start key specify what
1010:32 - command should be executed to start this
1010:34 - application okay and the command of
1010:36 - course that we want to execute is node
1010:38 - SRC app.js okay so now that we have done
1010:41 - that now that we've started now that you
1010:43 - have specified a start script in
1010:45 - package.json we can say npm Run start
1010:49 - okay and when we say npm Run start that
1010:51 - is going to do the exact same thing as
1010:53 - node SRC app.js why are we doing npm Run
1010:58 - start well it's just good convention any
1010:59 - nodejs applications that you create it's
1011:01 - a good convention to specify the start
1011:03 - script so that somebody else who's
1011:05 - running the application can does not
1011:07 - have to guess what the start script is
1011:08 - uh going to be okay so let's just run
1011:11 - npm run
1011:13 - start and with that the server is
1011:16 - running so now the server is running on
1011:18 - the visual studio code uh the server is
1011:21 - running on the GitHub codes space
1011:23 - machine that is somewhere in the cloud
1011:24 - and to access that machine we can just
1011:27 - click this open and browser button that
1011:29 - shows up what it does is that is it
1011:32 - takes our request from our browser and
1011:34 - forwards it to the port number 3 3,000
1011:36 - of the GitHub Cod spaces machine okay
1011:40 - and you can already see here we now have
1011:43 - on this port we are simply printing
1011:45 - hello world and you can see now that if
1011:49 - I just change this to hello
1011:52 - Jovian and I kill the server and I
1011:55 - restart the server and I reload this
1011:58 - page you can see say hello Jovian so
1012:00 - just like that we have set up our first
1012:03 - basic server so here's what's happening
1012:06 - when we type the URL into the browser
1012:08 - that URL sends a request to the server
1012:11 - and see this URL this is basically just
1012:13 - like a simple URL like a simple
1012:15 - something. something.com or dodev slash
1012:18 - and there's nothing after it and that is
1012:20 - why that is going to match with this
1012:22 - particular route Handler and this
1012:24 - particular route Handler simply says
1012:25 - hello Jin now suppose I had said in here
1012:27 - SL Akash so if I had something at the
1012:30 - end of the URL SL something you can see
1012:32 - that it says cannot get slashes it only
1012:34 - knows how to get slash and we'll see how
1012:37 - to add more of these routes to our
1012:39 - servers shortly as well
1012:42 - okay so now we've set up our Dev server
1012:46 - and one thing I want to mention is
1012:47 - instead of running npm Run start because
1012:50 - start is such a special common command
1012:52 - you can also just say npm start instead
1012:54 - of npm Run start and both do the same
1012:57 - thing and with that we have set up a web
1012:59 - server that shows hello world
1013:02 - okay now the next step would be to serve
1013:05 - an HTML file now of course we don't just
1013:07 - want to return hello world from our
1013:09 - server we want to actually return some
1013:11 - nice HTML so here's what we'll do we
1013:14 - will create a folder Pages inside the
1013:16 - SRC folder so I'm going to say SRC I am
1013:20 - going to create a new folder
1013:21 - Pages all right and now inside Pages I'm
1013:25 - going to create a file
1013:27 - index.html so now we have an index.html
1013:30 - file all right and into this index.html
1013:33 - file I'm going to put in some content so
1013:35 - I'm just I've just taken some of the
1013:37 - content from the from the website that
1013:40 - we had created the last time the Jian
1013:42 - careers website and I have included it
1013:45 - here on this link so I'm just going to
1013:47 - copy paste it because we don't want to
1013:49 - just uh sit and reimplement the entire
1013:51 - page that we had created the last time
1013:53 - already okay so now we have put in
1013:56 - inside SRC we put in a folder pages and
1013:58 - inside Pages we put in the file
1014:01 - index.html however this browser has no
1014:04 - way to actually access that index.html
1014:06 - file this browser can only make a
1014:08 - request to the server and the server is
1014:10 - only listening on the route slash and on
1014:14 - that slash route it is simply returning
1014:16 - hello Jovian it is simply sending hello
1014:18 - Jovian so instead of sending hello
1014:20 - Jovian we need to send the contents of
1014:22 - the index.html file all right how do we
1014:25 - do that well here is what we can do so
1014:28 - we can first include this new utility
1014:33 - function called path so we say path
1014:35 - equals require require path and this is
1014:37 - path is simply a utility to construct
1014:39 - full file system paths based on based on
1014:42 - relative paths next let us change this
1014:46 - one line of
1014:47 - code so instead of saying rest. send
1014:51 - file instead of saying rest. send hello
1014:53 - Jovian so let me comment that out I'm
1014:55 - going to say rest. send file path. jooin
1014:58 - name Dame is basically just the name of
1015:01 - the current directory which is/ SRC
1015:03 - soore uncore Dame is a existing variable
1015:07 - in nodejs that automatically gets the
1015:09 - name of the current directory so we want
1015:11 - to take the name of the current
1015:12 - directory and to it we want to join
1015:14 - Pages index.html all right so we want to
1015:17 - get current directory which is the SRC
1015:19 - folder SL pages index.html and we want
1015:23 - to send that file in the response all
1015:26 - right that's all we are doing here so
1015:28 - let us hit save again and let us reload
1015:32 - the page nothing happens because we have
1015:34 - to restart the server so remember this
1015:36 - Express what it does is when you start
1015:38 - the server it reads the entire
1015:39 - Javascript file and then if you make
1015:41 - changes you have to restart the server
1015:43 - so let's see control let's typ control C
1015:45 - control C is used to kill the server or
1015:47 - stop the server and then uh so you just
1015:50 - go into the terminal press control C and
1015:52 - then type npm Run start or npm start
1015:54 - again and now if we reload the page you
1015:58 - can see now that it actually shows us
1016:01 - the job applications page that we had
1016:03 - created earlier so it has a header it
1016:06 - has this work at Jovian over here and it
1016:08 - has this footer over here as well all
1016:11 - right we've not added the jobs table and
1016:13 - we've not added the application form yet
1016:15 - we've just added these parts and you can
1016:18 - of course you can study the code inside
1016:19 - index.html to make sure that's exactly
1016:21 - what we have so yeah we have a head and
1016:24 - inside the head we have a title we have
1016:25 - some meta tags looks like we have some
1016:27 - link tags Joan favicon.png we have some
1016:30 - um we have bootstrap we have some fonts
1016:33 - and looks like we have a stylesheet
1016:35 - styles.css so we might need to add a few
1016:37 - more files but then we have a nav bar
1016:39 - over here and that is what is uh showing
1016:41 - this nav bar then below the nav bar we
1016:44 - have this about Jovian section over here
1016:46 - all right and then below the about
1016:47 - Jovian section we have a footer over
1016:49 - here and that's basically what we are
1016:51 - showing on the page all right so with
1016:54 - that we have just returned some HTML
1016:56 - from the server now one very important
1016:59 - piece of information I want to point out
1017:01 - to you to you here is to understand what
1017:04 - is visible on the server and what is
1017:06 - visible on the client now all of this
1017:08 - code that we are seeing here it is
1017:10 - Javascript code but this JavaScript code
1017:12 - is not running in your browser this
1017:14 - JavaScript code is running on the server
1017:17 - so your browser simply makes a request
1017:19 - your browser simply sends a request to
1017:21 - the server all the JavaScript code
1017:23 - inside app.js is executed on the server
1017:26 - it picks up the index. h HL file and it
1017:29 - sends it back to the browser and now
1017:31 - it's in the browser that the index.html
1017:34 - file is passed and displayed as a web
1017:37 - page okay now what you might also have
1017:41 - is that you might also send a Javascript
1017:43 - file to the to the browser and then that
1017:45 - Javascript file can get executed on the
1017:47 - browser on the browser as well okay but
1017:49 - that's different from the app.js file
1017:51 - the app.js file only runs on the server
1017:54 - and I'm stressing this again because
1017:57 - this is a common source of vulnerability
1018:00 - right so understand that only the result
1018:01 - of the execution which is hello world or
1018:03 - the HTML file is sent to the browser
1018:06 - this should say
1018:08 - browser uh is sent to the browser and
1018:10 - the rest of the code remains on the
1018:11 - server so understanding which part of
1018:14 - your project code is executed on the
1018:16 - server and which part of your project
1018:17 - code is executed on the browser is very
1018:19 - important to avoid any security
1018:21 - vulnerabilities you do not accidentally
1018:23 - want to send some database credentials
1018:25 - to the browser because then your user
1018:27 - will be able to see your database
1018:28 - credentials and they'll be able to
1018:30 - access your entire database rather you
1018:32 - want to keep them on the server and just
1018:33 - send the response that the user needs to
1018:35 - them okay so with that we have figured
1018:38 - out how to display a HTML file so that's
1018:41 - great now uh the next step is to maybe
1018:46 - make our workflow a little easier every
1018:49 - time we make a change to the index. HTML
1018:51 - file we have to manually restart the
1018:52 - server and each time uh that requires us
1018:56 - to go in press contrl C and then restart
1018:59 - the server there's a better way to do
1019:00 - this there is this helper Library called
1019:03 - nodemon uh which stands for node monitor
1019:05 - so I'm just going to say npm install
1019:09 - nodemon so that's going to install the
1019:11 - node Monon package for us and you can
1019:13 - see here that it gets added here to
1019:15 - nodemon all right and now I'm going to
1019:18 - add
1019:20 - another script here called Dev so now in
1019:23 - my package or I already have the npm
1019:25 - start script which is going to be used
1019:27 - when I'm Happ with all the code I don't
1019:29 - feel a need to change the code too many
1019:31 - times but uh I also want to use another
1019:34 - script during development and here I'm
1019:36 - just going to say nodemon SRC app.js so
1019:39 - the only change we've made between start
1019:41 - and Dev is that start has node SRC
1019:44 - app.js and dev has nodon SRC app.js what
1019:47 - this is going to do is every time the
1019:51 - every time there is a change made to any
1019:53 - file in the project it is going to
1019:55 - restart the server automatically so that
1019:57 - we don't have to in and restart the
1019:58 - server manually okay so let's now run
1020:01 - npm run Dev instead of npm Run start I'm
1020:03 - just going to run npm run Dev and now
1020:06 - you can see that if I go in here and I
1020:09 - change the title of this page for
1020:10 - example so the title of this page is Jan
1020:12 - careers powered by bootstrap and let me
1020:15 - just change it to Jovan careers powered
1020:17 - by Express you can see that the server
1020:20 - will restart
1020:22 - automatically well looks like it did not
1020:24 - so that's where you also have to
1020:26 - configure what causes the server to
1020:28 - restart so we say noon. Json noon. Json
1020:33 - that's a new file we put into the root
1020:35 - folder of the project and then we
1020:38 - say um
1020:40 - EXT and then we give it the list of
1020:43 - extensions for which nodon should
1020:46 - monitor right so let's see nodemon
1020:50 - extensions let's just search that
1020:56 - format yeah so you can specify it this
1021:00 - way you can say um EXT and then you
1021:02 - provide a list of extensions so I'm just
1021:04 - going to provide a list of extensions
1021:06 - here I'm going to say that anytime a JS
1021:07 - file or JavaScript file changes restart
1021:09 - the server anytime an HTML file changes
1021:12 - restart the server anytime a Styles or a
1021:15 - CSS file file changes restart the server
1021:17 - anytime a PNG or a JPG file changes
1021:20 - restart the server so any time any of
1021:22 - these files change I want to restart the
1021:24 - server and let me just restart nodon
1021:28 - itself once
1021:30 - again let's
1021:35 - see
1021:37 - okay I think I might have messed
1021:39 - something up
1021:42 - here ah I believe it's just uh you do
1021:45 - not need it to be an
1021:50 - array yeah you just need it like that
1021:52 - okay so you provide a list of extensions
1021:54 - as a comma separated string and let's
1021:58 - now run npm run Dev once again and now
1022:00 - you will notice that anytime we change
1022:03 - any HTML file CSS file Javascript file
1022:06 - it's going to restart the server okay so
1022:07 - I'm just going to say powered by Express
1022:10 - here and I'll just reload the page and
1022:13 - now you see here it says powered by
1022:15 - Express all right so that is the benefit
1022:18 - of using nodemon it's going to
1022:20 - automatically restart the server but you
1022:22 - still do have to go to the browser and
1022:23 - re reload the page all right um so now
1022:27 - we've set up not nodon and we are using
1022:29 - npm run Dev for development and when we
1022:31 - want to do a final testing or deployment
1022:33 - then we can just use npm start okay now
1022:35 - the next thing I want to point out is
1022:37 - that index.html contains references to
1022:39 - files like styles.css Jovian meta PNG
1022:43 - and Jovian fave icon.png but so far we
1022:46 - have not added any of these so you see
1022:49 - we referring to styles.css but there's
1022:51 - no styles.css file here and more
1022:53 - importantly there will there is no
1022:55 - styles. CSS file here so all of these
1022:58 - things are executed on the browser all
1023:00 - the HTML is run on the browser and when
1023:02 - the browser when the browser tries to
1023:04 - get styles.css it's going to run into an
1023:06 - error so we need to find a way to pass
1023:09 - all of these files styles. CSS and PNG
1023:11 - and all of these directly as is without
1023:13 - any changes to our um browser and that
1023:18 - is where we are going to create a folder
1023:20 - called Static okay so we are going to
1023:23 - create a folder called let me just
1023:24 - rename it public
1023:26 - actually
1023:28 - yeah let's create a folder called public
1023:31 - so
1023:33 - SRC
1023:34 - public and into this I'm going to uh put
1023:37 - in all the files that are going to be
1023:38 - sent as is without any change to the
1023:41 - browser okay and inside the public
1023:43 - folder let me put for example styles.css
1023:46 - and into the styles.css let me put in
1023:49 - some
1023:50 - content all right okay I've put in some
1023:54 - content into styles. CSS looks like I
1023:56 - have one more piece here
1023:58 - yeah so all we're doing in this
1024:00 - styles.css is maybe configuring the
1024:02 - default font body font and config
1024:05 - configuring the default blue color and
1024:07 - the primary U color on bootstrap so
1024:10 - these are all CSS variables we're
1024:11 - configuring and then we are also
1024:13 - configuring the font family for the
1024:15 - headings so we're using the inter font
1024:17 - family which we have included within our
1024:19 - index.html page from Google fonts and we
1024:22 - are also configuring that the a tags or
1024:24 - the link tag should not have any
1024:25 - underlines so text decoration under line
1024:27 - is the default we are setting it to text
1024:30 - decoration none okay so that's a styles.
1024:33 - CSS file next I have a couple of these
1024:36 - files I have this file Jovian fav
1024:38 - icon.png and Jovian meta PNG on my
1024:41 - computer I'm going to drag them in here
1024:43 - and put them both into this public
1024:45 - folder as well and you can download
1024:47 - these files from these URLs so just go
1024:49 - into this URL and right click and save
1024:51 - it as Jovian favicon.png and Jovian meta
1024:54 - PNG so this is what the Jovian
1024:56 - favicon.png looks like it is going to be
1024:58 - used to configure the fav icon or the
1025:00 - icon in the browser and this is what the
1025:03 - Jovian meta image looks like this is
1025:04 - simply going to show up when we share
1025:06 - that link with somebody else on on
1025:08 - social media Etc okay so um all right so
1025:12 - now we've added these files styles.css
1025:15 - index.html uh styles.css Jovian 51
1025:18 - Jovian meta but nothing seems to have
1025:20 - changed even if I try to access SL
1025:24 - styles.css I still cannot get it so it's
1025:27 - still says cannot get styles.css so what
1025:31 - do we do well you actually have to
1025:33 - inform Express that there is a certain
1025:36 - folder on your in your project from
1025:38 - where you want to directly send all the
1025:40 - files to the browser you don't want to
1025:42 - make any changes to them okay so how do
1025:44 - we do that the way to do that is by just
1025:47 - adding this one line within Express so
1025:49 - we say app.use after creating the app we
1025:53 - say
1025:54 - app.use and app.use is a very common
1025:58 - pattern in Express where any new feature
1026:00 - you want to add any what's called
1026:01 - middleware in express any new features
1026:03 - you want to add you just add them using
1026:05 - app.use and here in app.use we're going
1026:08 - to use uh we're going to set up a static
1026:10 - folder using express. static and we need
1026:13 - to give it the exact directory name so
1026:17 - all the full or the full path of the
1026:18 - directory where this um all these static
1026:21 - files are located okay so I'm going to
1026:23 - say path. joinor Ford name which is
1026:27 - simply getting the name of the current
1026:28 - directory
1026:31 - SLU so what we're seeing here is take
1026:34 - everything that is there in this folder
1026:36 - called public and send it to the browser
1026:40 - as is when requested okay and now it
1026:44 - says the app
1026:46 - crashed okay I put in an extra
1026:49 - underscore so yeah now the app should
1026:51 - have restarted y so now the app is
1026:53 - restarted and now if I reload the page
1026:56 - watch closely you will notice the fonts
1026:58 - change there you go you see the fonts
1027:00 - just changed and you can actually see
1027:03 - here if I open SL styles.css you can see
1027:06 - that now we have this Styles file that
1027:08 - is served and if I open
1027:11 - slash Jovian _ FV icon.png you can see
1027:16 - now the fav icon is getting rendered if
1027:18 - I open
1027:19 - Jovian cora. PNG you can see that our
1027:22 - Meta Meta image is getting rendered as
1027:24 - well okay and all of these are linked
1027:26 - from index. HTML as well well so that
1027:27 - will show up properly too you can see
1027:29 - here it shows the nice icon here in the
1027:31 - browser tab so that's one other thing I
1027:34 - want you to take away anything that you
1027:36 - want to directly send out to the uh to
1027:38 - the browser then you simply create a
1027:40 - folder and put all of those files into a
1027:42 - folder and you uh simply configure a
1027:45 - static folder within app. use okay now
1027:50 - we didn't do this for index.html because
1027:51 - we're going to make some changes to
1027:53 - index.html show some Dynamic data on
1027:55 - that page that is why we want to process
1027:57 - it before we send it that is why we
1027:58 - didn't put it in the public or static
1028:00 - folder
1028:01 - okay all right so just keep that in mind
1028:05 - static files are served as is by the
1028:07 - server and it is generally used for
1028:08 - stylesheets scripts images icons that
1028:10 - you just want to pass on to the browser
1028:13 - directly and you can check out this
1028:16 - resource to learn more about static file
1028:18 - serving now one last thing we can do is
1028:20 - to Simply push our changes back to
1028:22 - GitHub and then deploy it to verell so
1028:24 - I'm just going to come in here into the
1028:26 - git
1028:28 - tab of the sidebar and I'm just going to
1028:30 - say
1028:32 - added basic uh well added Express
1028:35 - app index.html and static files I'm
1028:40 - going to click commit and that is going
1028:41 - to Simply stage and commit all the
1028:43 - changes and I'm going to sync this back
1028:45 - to GitHub so stage commit and sync
1028:48 - three-step process and once this is done
1028:51 - we can go in here and you can just
1028:53 - reload this page and you can see here
1028:55 - that we have this SRC folder we have
1028:57 - this package.json you can see
1028:59 - package.json has the dependencies
1029:01 - express and nodemon and there's no node
1029:04 - modules folder because it is ignored in
1029:06 - the git ignore and the SRC folder has a
1029:08 - Pages folder where it has index. HTML of
1029:10 - course it has app and it has this
1029:12 - styles. CSS Etc as well okay now let's
1029:17 - deploy this so I'm just going to go to
1029:18 - wor.com and worell is the platform we
1029:21 - typically use for deployment because
1029:23 - it's really easy to use that's what
1029:24 - jan.com is replied on as well and I'm
1029:27 - going to select add new project here and
1029:29 - if you haven't connected your GitHub
1029:31 - account you can connect it here if you
1029:33 - can if you haven't connected all the
1029:35 - repositories you can configure your
1029:36 - GitHub setting here as well but in this
1029:39 - case we're simply going to go into the
1029:40 - Sydney Jovian account and import Jovian
1029:43 - careers express live and when we import
1029:45 - it we can select the framework preset
1029:50 - okay now uh there's no framework preset
1029:52 - here and because this is just Express
1029:55 - there's no framework as such it's just a
1029:57 - in fact versel does not have inbuilt
1030:00 - support for Express but the root
1030:02 - directory is just the directory which
1030:03 - contains the package.json file and we
1030:06 - can click
1030:07 - deploy now hopefully what this should do
1030:09 - is it should look into the package.json
1030:10 - file and it should deploy and let's see
1030:12 - if that
1030:14 - happens okay so looks like the
1030:17 - deployment is complete but if we try to
1030:20 - access it it says 404 not found and this
1030:24 - is because verel needs things to be
1030:26 - configured in a certain way versal needs
1030:28 - to be told what is the root file that we
1030:31 - need to access versal needs to be told
1030:33 - what are uh the different ways in which
1030:35 - different routes need to be handled so
1030:37 - there is one special piece of code that
1030:40 - you need to add when you're deploying an
1030:41 - express application to worel okay and
1030:44 - again this is not something that you
1030:46 - know by default this is just something
1030:47 - that you would normally Google and
1030:49 - figure out but you need to add a file
1030:51 - called verel Json that informs verel a
1030:54 - few things one it tells verel that s rc/
1030:57 - app.js is the key is the main file that
1031:01 - it needs to build the for for which it
1031:03 - needs to install all the dependencies
1031:05 - ETC and you also need to tell it that it
1031:07 - needs to use the nodejs environment so
1031:09 - what supports a bunch of different
1031:10 - runtime environments and we just
1031:12 - informing here that we want the nodejs
1031:14 - environment and finally so this points
1031:16 - to the main file of the server this
1031:18 - points to the uh the use points to the
1031:20 - environment all of this goes into builds
1031:22 - and finally you also need to configure
1031:25 - we want what we want to do is all the
1031:26 - routes
1031:27 - and no matter what route we try to
1031:29 - access we want them all to be sent to
1031:31 - app.js and we want app.js to handle the
1031:34 - routing and not verel itself so that is
1031:36 - again something that is configured and
1031:38 - again don't worry if this seems
1031:40 - confusing whenever you are deploying an
1031:42 - expressjs application to verel you
1031:45 - simply copy paste this um or find it
1031:47 - online Okay so let's go back here and
1031:49 - let me go in here and create a worel
1031:51 - Json
1031:53 - file so new file verel do Json and in
1031:57 - this file I'm just going to put in this
1031:58 - code version two builds routes um just
1032:02 - standard code for configuring versal to
1032:05 - run with Express and I'm just going to
1032:07 - say add worel do Json and let me click
1032:10 - commit and sync it and that should now
1032:13 - get sent up to the
1032:14 - server and now let us go back into our
1032:18 - versal dashboard let's go back into
1032:20 - Jovan careers express live and delete
1032:24 - this project and and just create a new
1032:25 - one with the worsal Json file so
1032:28 - sometimes what happens is if you change
1032:29 - the worel Json file you may have to just
1032:32 - uh recreate the project so I'm just
1032:34 - going to delete this project and you can
1032:37 - delete the project from the project
1032:39 - settings and let's check the worel do
1032:41 - Json file so the worel do Json file
1032:43 - looks fine to me and now let's come back
1032:45 - into verel and create a new project so
1032:48 - now once again I'm going into new
1032:50 - project I'm set i'm selecting the Jovian
1032:51 - careers express live project which has
1032:53 - the ver. Json file already uh no
1032:56 - framework preset and the root directory
1032:58 - is just the do slash which is the root
1033:00 - of the entire directory because that's
1033:01 - where the package.json and other files
1033:03 - are present and I'm just going to click
1033:05 - deploy okay and hopefully this time it
1033:08 - should pick up the settings from the
1033:10 - ver. Json file yeah looks like you have
1033:13 - a versal Json file so it's going to pick
1033:15 - up the settings properly and let's see
1033:17 - if it's going to do that deployment this
1033:19 - time and it does perfect so our
1033:23 - application or our web web server is now
1033:27 - deployed to verel and it is now scalable
1033:30 - so our Cod space machine can shut down
1033:32 - anytime and it cannot scale but verel
1033:33 - will automatically scale things
1033:35 - depending on the traffic and it will
1033:37 - automatically redeploy whenever you push
1033:38 - to the main branch so that's it so now
1033:40 - we have a basic deployment ready as well
1033:43 - and now we ready to start maybe
1033:45 - rendering some data dynamically into
1033:48 - that page maybe let's see if we have any
1033:50 - questions at this point already okay the
1033:53 - there's a comment here server is a
1033:54 - special computer to deal with traffic
1033:56 - that's right yep that's a good way to
1033:58 - look at it what's the difference between
1034:00 - using static. apppp and using Express so
1034:02 - in static. apppp all it does is it takes
1034:04 - the files that you have and it gives
1034:06 - them to the browser when requested in
1034:08 - Express we can write some custom Logic
1034:10 - for example uh fetching data from a
1034:12 - database sending an email handling form
1034:15 - submissions and all of that okay so I
1034:18 - hope that answers that what is the
1034:19 - difference between flask and express
1034:22 - well flask is a python web framework
1034:24 - Express is a JavaScript web framework
1034:26 - they do the same thing they are both the
1034:28 - smallest possible Frameworks essentially
1034:30 - in each of those languages um but that's
1034:32 - basically it what are Dynamic contents
1034:35 - so anything any data that is for example
1034:37 - fetched from a database for example if
1034:39 - you go to my Jovian profile each time
1034:42 - you open it you'll see something
1034:43 - different because I may have worked on
1034:44 - New notebooks in the meantime now
1034:46 - obviously I'm not creating an index.html
1034:49 - file and putting it up each time I
1034:50 - create a new notebook this data is going
1034:52 - to be fetched from the browser from a
1034:54 - database and that HTML file is going to
1034:56 - be created on the fly when you try to
1034:58 - request it okay what was minus y doing
1035:01 - here so when I said npm init minus y I
1035:03 - will let you search that online all it
1035:06 - does is well it makes our work a little
1035:08 - easier otherwise npm minute is going to
1035:10 - ask you for the package name etc
1035:12 - etc okay what is a route well a route is
1035:16 - simply a path on the page so for example
1035:18 - if you
1035:21 - have um for example if you have jan.com
1035:25 - aashan that's a route right so SL aashan
1035:28 - is so join.com here is the domain and SL
1035:31 - aashan is the path or the route which is
1035:34 - where within this server do you want to
1035:36 - go or SL Akash notebooks which is what
1035:39 - you see here that is another route or SL
1035:41 - Akash or SL Sydney Express web
1035:43 - application that is another route or SL
1035:45 - learn SL courses that is another route
1035:48 - or SL learn SL full stack developer boot
1035:50 - cam that's another so these are all the
1035:52 - sub paaths that you can have present in
1035:54 - your application and uh we've just
1035:57 - looked at the root route which is where
1035:59 - there is no subpath which is just
1036:00 - jan.com or wherever or in this case it
1036:03 - is deployed at Jovian
1036:06 - careers yeah in this case it is deployed
1036:08 - at Jovian careers live. W.A so that is
1036:11 - what we've looked at so far but we look
1036:13 - at some sub routes as well uh
1036:18 - shortly okay what is a port well as I
1036:21 - gave the mailbox analogy let's say in a
1036:23 - building you have a bunch of people
1036:25 - living and every everyone needs to get
1036:27 - their mail delivered so that's where
1036:28 - there's a mailbox and the mail for each
1036:30 - person comes into the respective mailbox
1036:32 - in the same way when an application is
1036:35 - running when a server is starting on a
1036:36 - particular computer and there are many
1036:37 - servers all the time running on your
1036:39 - computer internal processes that you may
1036:41 - not be familiar with each of them can
1036:44 - can put their claim on a port and all
1036:46 - the requests messages sent to that Port
1036:48 - are going to get delivered to that
1036:49 - server so that is something the
1036:50 - operating system provides if we deploy
1036:53 - to the cloud do we have a different port
1036:55 - and how does it work yeah so when we
1036:57 - deploy to the cloud what happens is
1036:59 - worel or whichever Cloud framework we
1037:01 - are using it
1037:03 - automatically puts in a variable called
1037:06 - Port process. env. Port so it
1037:09 - automatically supplies a port number and
1037:13 - ideally your application should have the
1037:15 - ability to read that port number from
1037:16 - the environment variable that is being
1037:18 - provided by the cloud infrastructure
1037:21 - platform so that it can run on that Port
1037:25 - okay okay where can we read these good
1037:28 - conventions any resource well these are
1037:31 - all just things that you will almost
1037:33 - always end up doing so what we're doing
1037:35 - right now is just the only way to do it
1037:37 - uh you just have to go through the
1037:38 - process of building an application and
1037:40 - you kind of learn all these conventions
1037:42 - along the way it's hard to go wrong you
1037:43 - can just search these online how do I do
1037:45 - this or
1037:47 - that okay why do we do it this way why
1037:49 - do we have a request why do we have a
1037:51 - client and a server so the client let's
1037:53 - say you have an application like Jovian
1037:56 - which has the data of 300,000 users now
1037:59 - when we have the data of 300,000 users
1038:01 - and you you open join.com on your
1038:03 - computer I don't want you to be able to
1038:05 - access the data of access the private
1038:07 - data of all 300,000 users that is why
1038:10 - your in your browser I simply give your
1038:12 - browser the ability to contact my server
1038:15 - and then when the when your browser
1038:16 - sends a request to my server I have a
1038:18 - way to validate okay this came from this
1038:20 - particular user and then I can ensure on
1038:22 - my server that I can contact the
1038:24 - database and only return the data that
1038:27 - is um that makes sense for you okay but
1038:30 - if I simply open up my entire database
1038:32 - then anybody would be able to access
1038:34 - anything and that's why we put a server
1038:36 - in between to do
1038:39 - this okay what is durame well uh as I
1038:42 - mentioned underscore uncore Dame is
1038:44 - going to simp when you use it within a
1038:47 - particular JavaScript or nodejs file it
1038:49 - is simply going to get the uh directory
1038:52 - which contains that file and we have
1038:54 - just used it to get the full path for
1038:57 - the pages index.html and for the public
1038:59 - directory what is colon root pointing to
1039:02 - yeah so in our styles.css this is
1039:04 - something we covered the last time in
1039:06 - our styles. CSS file colon root simply
1039:10 - is a way to define some Global CSS
1039:13 - variables all right and it's it's Global
1039:15 - not just within this file but across all
1039:17 - files so because we want to override
1039:19 - some CSS variables that have been
1039:20 - defined in bootstrap that is why col rot
1039:23 - is going to take whatever Global CSS
1039:25 - variable is there and it's going going
1039:26 - to rewrite the variable with this name
1039:28 - with this value okay so this is how you
1039:30 - overwrite the CSS
1039:34 - variable if we are creating a web server
1039:36 - using Express then what are Apache web
1039:39 - server or enginex or Tomcat okay I will
1039:41 - not get into those right now I will
1039:43 - encourage you to ask chat GPT or jobot
1039:46 - this
1039:47 - question uh is there an app. delete app.
1039:49 - put yes so we'll talk about HTTP methods
1039:52 - so you have all of these app.get is just
1039:54 - the simplest way where you simply get
1039:56 - it's just one of the HTTP methods that
1039:58 - is used why is there no Express
1040:01 - framework preset inv versal yeah it for
1040:03 - some reason they don't have it I'm I
1040:05 - guess they should they should probably
1040:06 - have added it at some point but they
1040:08 - decided not
1040:10 - to okay please add the questions in the
1040:13 - chat as well when recordings are posted
1040:15 - okay we'll try to do that are all these
1040:17 - routes basically different folders in
1040:19 - the server in the source code okay not
1040:21 - exactly so conceptually yes as a browser
1040:25 - or as a user I can think of folders I
1040:27 - can think of them as folders on the
1040:29 - server however if let's say we have
1040:31 - zin.com Akash join.com sidhant shin.com
1040:35 - somebody else if we create ended up
1040:37 - creating folders on our server for every
1040:39 - single person then we would end up with
1040:41 - a lot of folders and we would run out of
1040:43 - server space what we do instead is we
1040:46 - put all the data in a database which is
1040:48 - optimized for storing large amounts of
1040:50 - data and then our routes are configured
1040:52 - in such a way that given whatever route
1040:54 - we get they can figure out how to fetch
1040:57 - the right data from the server and we're
1040:58 - going to take a look at that
1041:00 - shortly okay next question difference
1041:02 - between HTTP and https so HTTP traffic
1041:05 - is not encrypted which means if somebody
1041:07 - is uh can track the packets going uh
1041:10 - going through your network so basically
1041:13 - somebody who can kind of listen into
1041:15 - your Wi-Fi router or maybe even your
1041:17 - Wi-Fi router company or maybe your
1041:19 - internet service provider everybody can
1041:20 - see exactly what you're sending the full
1041:22 - contents the the email that you're
1041:24 - sending or the password that you're
1041:25 - sending whatever whatever it is but
1041:27 - https means that the client and the
1041:30 - server they have initially done some
1041:32 - kind of an encryption handshake and the
1041:33 - client encrypts the data sends it to the
1041:36 - server and when the send server sends
1041:38 - back the response it encrypts to the
1041:40 - data sends it to the client in the
1041:42 - client being the browser in between your
1041:44 - internet service provider or somebody
1041:45 - just listening into your Wi-Fi will not
1041:48 - be able to see what's going on and now
1041:50 - most websites just work on https so
1041:53 - moving right ahead let us now
1041:57 - send some Dynamic data and add it into
1042:00 - the index.html page now of course we are
1042:03 - not going to talk about databases just
1042:05 - yet but we're going to simulate
1042:07 - databases in a certain way essentially
1042:09 - um so here's what we're going to do
1042:11 - we're going to create a file called
1042:12 - jobs. JS so I'm going to create a file
1042:15 - here called jobs.
1042:18 - JS okay and in this jobs. JS file I'm
1042:21 - going to put in some data let me take in
1042:24 - all this data over here
1042:27 - and this is simply a list of jobs so
1042:29 - cons jobs equals uh this is our first
1042:31 - job object which has an id1 title
1042:33 - front-end developer location bangaluru
1042:36 - salary 12 lakhs um posted on March 3rd
1042:39 - 2023 similarly there's a second job
1042:41 - third job so we've taken a Json array an
1042:44 - array of Json objects and put that into
1042:46 - this variable called jobs and uh we are
1042:49 - going to just export this as the default
1042:52 - export from this module okay so jobs. JS
1042:55 - is this into which we have put in a
1042:57 - bunch of jobs now um we can actually
1043:02 - import these jobs here so we can say
1043:04 - const
1043:06 - jobs equals
1043:09 - require do/
1043:11 - jobs okay and I can also just
1043:14 - console.log
1043:18 - jobs and you can see that when we import
1043:21 - this from require do/ jobs we get all of
1043:25 - this data here and we can now use it in
1043:27 - our server and we can even send it to
1043:29 - the browser however we want okay now of
1043:32 - course right now we are getting this
1043:33 - from a file but in a real world scenario
1043:36 - you would be getting this from a
1043:37 - database which is something that we'll
1043:39 - look at in a future course okay the next
1043:42 - thing is to actually put these jobs into
1043:46 - the index.html file so now what we're
1043:49 - going to do is turn this index. HML file
1043:51 - into a template and we're going to turn
1043:54 - it into a template us using a template
1043:58 - rendering system called mustache and
1044:01 - I'll talk about what mustache is in just
1044:02 - a second but here's what we need to do
1044:05 - the first thing we need to do is install
1044:07 - this mustache Express package so I'm
1044:10 - just going to go in into the
1044:12 - terminal and I'm just going to stop this
1044:14 - server for now and I'm just going to say
1044:17 - npm install mustache Express okay so
1044:22 - mustache is the
1044:23 - templating uh the the template engine
1044:25 - that we are going to use and mustache
1044:27 - Express is the connector that that
1044:30 - allows you to connect mustache to allow
1044:32 - Express to mustache okay so that was
1044:35 - step one the next thing we need to do is
1044:39 - to convert our index.html file which is
1044:42 - an HTML file into an index. mustache
1044:45 - file or a mustache template okay and
1044:48 - here's what what we're going to do so
1044:49 - I'm just going to go into my index.html
1044:54 - file
1044:57 - and I'm simply going to rename this file
1044:59 - so I'm just going to rename this file
1045:02 - to index
1045:04 - do
1045:06 - mustache
1045:08 - okay all right so far so good we've not
1045:11 - really changed anything we've just
1045:13 - installed a package renamed a file what
1045:15 - difference does that make now um we'll
1045:18 - add some of this later now I'm going to
1045:20 - come into my app file my app server and
1045:24 - I'm going to incorporate the mustache
1045:26 - template rendering engine into my
1045:29 - Express server so first thing I'm going
1045:31 - to do is go into
1045:33 - app.js and just require mustache Express
1045:38 - and get this mustache Express
1045:41 - object okay so now I have this mustache
1045:43 - Express object over here and in this
1045:47 - object uh this object now contains the
1045:49 - mustach template rendering engine now I
1045:52 - need to add it into my app Express app
1045:54 - and the way we add it is like this so
1045:58 - first we have to
1046:00 - set a bunch of views within our
1046:03 - application so what we say is that the
1046:05 - views or the templates or wherever
1046:08 - whatever contains the markup or the HTML
1046:12 - is all present inside this folder called
1046:15 - pages okay so what we're saying is um
1046:17 - let's actually just make that nicer here
1046:20 - so what we're saying is app do set views
1046:23 - to path. join underscore uncore
1046:29 - durame Pages all right so we are saying
1046:32 - that inside the pages folder I have a
1046:34 - bunch of views or I have a bunch of
1046:35 - templates that I can use uh that's the
1046:37 - first thing second thing we need to say
1046:40 - is that we need to set the view engine
1046:42 - okay whenever you hear view think of it
1046:43 - as template these are all just words for
1046:45 - the same thing um so now we say app. set
1046:49 - view engine to mustache Okay so we've
1046:52 - set a directory that contains our
1046:54 - templates or our views then we set a
1046:56 - view engine and that engine has the name
1046:59 - mustache and finally for that engine we
1047:02 - need to provide the Handler function
1047:06 - okay and the Handler function is simply
1047:07 - coming from mustache Express all right
1047:10 - so uh three things we need to set
1047:11 - anytime you're adding some form of
1047:13 - templates to render some form of dynamic
1047:15 - data and all of this will become clear
1047:17 - when you actually see this in action you
1047:18 - need to set the views so the views we
1047:20 - are simply setting to the pages folder
1047:22 - you need to set the view engine and the
1047:24 - view engine we are simply setting uh to
1047:26 - mustache and the actual engine that we
1047:29 - using for the engine name mustache is
1047:31 - called mustache
1047:33 - Express all right so this is just
1047:35 - something that you'll have to drop into
1047:37 - any Express applications whenever you're
1047:38 - adding some some templating U engine to
1047:41 - it and there are a bunch of other
1047:43 - templating engines as well like pug ejs
1047:45 - Etc mustache is just the easiest one to
1047:48 - work with really simple to understand
1047:50 - all right so so far we have installed
1047:53 - mustach Express set it as the view
1047:56 - engine and we've said that all our
1047:58 - templates or mustache files are inside
1048:00 - the pages folder okay now the next thing
1048:03 - we can do is we can go in and render
1048:05 - that template so here's what we can do
1048:08 - instead of saying rest. send file which
1048:10 - is what we were saying earlier we can
1048:12 - say rest. render and in while we're
1048:16 - rendering we need to give it the name of
1048:18 - the view that we want to render so we
1048:19 - are saying that we want to render The
1048:21 - View
1048:22 - index and we want to send this data into
1048:25 - the that view to populate the uh to
1048:28 - populate that view okay again these
1048:32 - words will soon make sense but basically
1048:34 - now you can understand that okay index
1048:35 - simply refers to the index. mustach file
1048:38 - and that index. mustach file is going to
1048:40 - be located in the folder that has been
1048:42 - configured for views and the folder
1048:44 - folder is called Pages all right so we
1048:45 - have this Pages folder index. mustach so
1048:48 - so this is simply going to pick up the
1048:49 - index. mustache file and it's going to
1048:52 - give this additional data which is a
1048:54 - dictionary containing the key jobs which
1048:57 - points to the list of jobs that we have
1048:59 - and that additional data can now be used
1049:01 - within our index. mustach template okay
1049:06 - so let's come back and actually use this
1049:08 - now we have in this page we have this
1049:10 - about section and then we have this
1049:12 - footer just below the about about
1049:14 - section and above the footer I'm going
1049:16 - to add a new section called jobs so
1049:18 - here's what I'm going to do I am going
1049:20 - to first add this div called jobs job
1049:24 - opportunities
1049:31 - okay so so far there's nothing new we've
1049:33 - done we've simply added this job
1049:35 - opportunities div and there we have it
1049:37 - okay so now we've simply added a simple
1049:39 - div which says job opportunities nothing
1049:42 - fancy going on here but then we want to
1049:45 - now add the job list so let's add this
1049:47 - jobs
1049:49 - list so this is going to show up only on
1049:51 - mobile so I'm just going to reduce the
1049:53 - width over here as well so that it shows
1049:54 - up properly
1049:56 - so this is going to be our jobs list and
1049:58 - let's add the SL div over
1050:01 - here okay now inside this jobs list I'm
1050:04 - going to do something very interesting
1050:06 - I'm not going to type out all the jobs
1050:08 - one by one but instead remember that my
1050:11 - template is being rendered with this
1050:14 - data so I have access to a variable
1050:16 - called jobs which points to a list of
1050:18 - jobs okay so so I can take that list of
1050:22 - uh I can take that variable which is a
1050:24 - list and I can Loop over that variable
1050:26 - like this I can say hash
1050:28 - jobs SL jobs so what this is doing is
1050:31 - this is basically creating a for Loop
1050:33 - and inside this for loop I can put in
1050:35 - this
1050:39 - content like
1050:43 - that okay so let's see what is happening
1050:46 - here we have it we had an index. HTML
1050:48 - file we just renamed it to index.
1050:50 - mustach inside it we added this new div
1050:53 - called jobs list inside this jobs list
1050:56 - we use this special syntax called
1050:58 - bracket bracket and that's why these are
1051:00 - called the mustaches or the curly braces
1051:02 - that's why the library is called
1051:03 - mustache and then we said that okay we
1051:06 - want to look for this object or this key
1051:08 - called jobs and whatever is there in
1051:10 - that key if that is a list we want to
1051:12 - Loop over that list and that is where we
1051:14 - use this hash character this hash
1051:16 - basically means we want to Loop over
1051:18 - something and this slash simply means we
1051:20 - are we are at the end of the loop and
1051:22 - then in each Loop so remember our jobs.
1051:25 - JS
1051:27 - file our jobs. JS file contains a list
1051:31 - of jobs so in each Loop we have access
1051:33 - to the job and now what we can do here
1051:35 - is we can use a particular key or a
1051:39 - particular a particular key from the
1051:40 - object for example we have the key title
1051:42 - we have the key location we have the key
1051:44 - salary we have the key um we have the
1051:47 - key posted so all of those can now be
1051:50 - accessed within this Loop okay so now
1051:53 - bracket bracket title bracket bracket ET
1051:55 - is going to get the value for the first
1051:58 - element in the first Loop in the second
1052:00 - loop it's going to get the value for the
1052:02 - for the title from the second element
1052:04 - then it's going to get the title from
1052:05 - the third element and so on so because
1052:07 - there are four jobs listed here four of
1052:10 - these divs will be rendered div div div
1052:12 - div and in each of these four divs the
1052:15 - data from that corresponding job will be
1052:17 - picked up and what data are we picking
1052:18 - up we are picking up the title we are
1052:21 - picking up the location we are picking
1052:22 - up the salary and we are picking up the
1052:24 - poster okay so wherever you see bracket
1052:27 - bracket that is going to get replaced
1052:29 - with some actual data and finally uh we
1052:32 - are also picking up the job ID and using
1052:35 - that we're creating a link okay let me
1052:38 - save that and again I encourage you to
1052:40 - just run this yourself and see if you
1052:43 - can make sense of
1052:46 - this and let
1052:48 - us yeah and now you can see here now we
1052:51 - have job opportunities front-end
1052:53 - developer full stack developer data
1052:55 - scientist machine learning engineer all
1052:58 - right so again think about what happened
1053:01 - what we did was we installed the mustach
1053:02 - Express package we then imported it we
1053:06 - configured it as the default view engine
1053:08 - for Express and we configured the
1053:10 - default view directory as the pages
1053:12 - folder then in the slash route we are
1053:15 - simply rendering the index mustache file
1053:18 - or the index mustach template into that
1053:21 - template we are passing a dictionary in
1053:23 - that dictionary we have a key called
1053:25 - jobs which is a list of jobs now
1053:27 - whenever you have a list you can use it
1053:29 - within that mustache template like this
1053:33 - to Loop over that list and whatever you
1053:35 - put inside the hash and slash that is
1053:37 - going to be applied to each element of
1053:40 - the list okay so each element is going
1053:42 - to be one job or one job object from
1053:45 - that one job object we want to insert
1053:47 - into our HTML the title the location the
1053:49 - salary so that's why this title gets
1053:51 - inserted the location gets inserted the
1053:53 - salary gets inserted the posted gets
1053:55 - inserted and all of this gets looped
1053:57 - four times for each of the jobs that we
1053:59 - have okay so here this data came from a
1054:01 - file but this data could instead have
1054:03 - come from a browser or from a database
1054:06 - or could have come from a third party
1054:07 - Source like Twitter or something like
1054:09 - that if you're using the Twitter API or
1054:11 - something okay so think about this but
1054:13 - this is basically what mustach or any
1054:15 - templating engine is used for to insert
1054:18 - data into an HTML template and fill it
1054:22 - out and create a proper HTML page out of
1054:24 - it now if you just right click here and
1054:26 - click inspect you will not be able to
1054:28 - see this template over here what you
1054:30 - will see instead is that we have this
1054:33 - jobs list and in this jobs list we have
1054:35 - these four jobs these four cards and in
1054:37 - these four cards we have each of these
1054:40 - particular data for each of these
1054:41 - particular job roles okay so the so this
1054:44 - template combined with the code that is
1054:46 - running over here is going to generate
1054:48 - the HTML and only the HTML the final
1054:49 - HTML sent to the browser uh and that is
1054:52 - how things work okay now if you can wrap
1054:54 - wrap your head around this and you may
1054:55 - need to just re-watch this a couple of
1054:57 - times to get it then you've basically
1054:58 - understood what most web servers do they
1055:00 - take some data from a database put that
1055:03 - into a template using some kind of a
1055:04 - templating engine and then they just
1055:06 - send that data back to the client okay
1055:09 - so that was the jobs list but why don't
1055:12 - we also do the jobs table so let me just
1055:14 - grab the jobs table as
1055:17 - well
1055:22 - oops yeah let's grab the let's grab the
1055:25 - jobs table as well so I am going to zoom
1055:29 - out here a little bit grab this entire
1055:32 - jobs table like
1055:35 - that and let's put that right below our
1055:39 - jobs
1055:40 - list so that's our jobs table let me
1055:44 - just give that a tab and all right and
1055:47 - now you can see that on mobile I still
1055:51 - have the jobs
1055:52 - list yeah on mobile I still have the
1055:55 - jobs list but on the desktop I have the
1055:59 - jobs table okay jobs list on mobile jobs
1056:03 - table on desktop how did we create the
1056:05 - table again we created a normal table
1056:07 - with the table TR and it had a th job
1056:10 - title location salary Etc but once again
1056:13 - we use the same jobs variable and now
1056:15 - using the jobs variable we now created
1056:17 - the title we created the location we
1056:20 - created the salary and posted at and we
1056:22 - this time we created not a card but we
1056:23 - created a table row and four of these
1056:25 - get rows get created and each of them is
1056:27 - going to have the appropriate
1056:28 - information okay so just understanding
1056:31 - this templating syntax can sometimes be
1056:32 - a bit tricky at the beginning but once
1056:34 - you get it it becomes second nature and
1056:36 - mustache is actually really simple to
1056:38 - understand so with that we have rendered
1056:41 - the mustache template you can see here
1056:43 - we say rest. render we've given it we've
1056:46 - given it the name of the template index.
1056:47 - mustache and a list of parameters that
1056:50 - we wanted to pass in
1056:53 - okay now of course uh if we wanted we
1056:55 - could also pass in more parameters for
1056:57 - example I could pass in a parameter
1056:58 - called company name and I could pass
1057:01 - that in as let's
1057:02 - say Google for Just For example then in
1057:06 - my index. mustach I could come in here
1057:09 - right at the top where I have my
1057:12 - H1 where is that yeah so I have I have
1057:14 - my H1 and here instead of saying work at
1057:17 - Jovian uh I could maybe have just done
1057:20 - work
1057:22 - at company name
1057:25 - all
1057:26 - right and if I had done that work at
1057:29 - company name you would see that now it
1057:31 - would say work at Google so you can pass
1057:34 - not just one parameter but you can pass
1057:36 - any number of parameters you want and
1057:37 - now I change this back to Jovan and it
1057:39 - says work at Jovan and you can modify
1057:41 - any part of your template as you want
1057:44 - you can modify something inside the
1057:45 - class inside the tag name whatever you
1057:47 - want templates are very flexible but
1057:50 - also they can also be a little tricky to
1057:52 - work with for the same reason all right
1057:55 - so now the job now the page shows a job
1057:58 - table or list on the appropriate device
1058:00 - so now it says work at Jovian and now we
1058:02 - have the job opportunities table one
1058:04 - thing I want to mention is we have also
1058:05 - added links to these taable so what
1058:07 - happens is when you click this link it
1058:09 - goes to this uh if you if you see here
1058:12 - at the end of the URL it goes to SL job
1058:15 - SL1 or two or three or four based on the
1058:18 - job ID it's going to go to a different
1058:19 - route so the next step for us is going
1058:22 - to be Implement that route page
1058:24 - implement ment the individual job Pages
1058:26 - for each of the jobs and we'll see how
1058:28 - to do that in a dynamic fashion once
1058:30 - again without having to create four
1058:31 - separate pages because you could have
1058:32 - 100 jobs or you could have 50 jobs so
1058:34 - you do not want to create U hardcode the
1058:37 - number of jobs you have or create a
1058:38 - bunch of routes uh anticipating how many
1058:41 - jobs you'll have you should just be able
1058:42 - to handle any number of
1058:44 - jobs okay so that is our second step and
1058:49 - I would encourage you to maybe check out
1058:51 - the mustache manual to learn how the
1058:52 - mustache templating engine works it's
1058:54 - actually really simple all it does is
1058:56 - given some text like this it could be
1058:58 - HTML CSS whatever it and given a bunch
1059:01 - of these uh template tags name value in
1059:06 - and slash in or whatever it can take
1059:08 - this data and it can just simply uh fill
1059:11 - that data into this template
1059:14 - okay now the next step for us is to
1059:17 - create a page for each job add the URL
1059:19 - SL jobjob ID okay and for this we we are
1059:24 - going to again follow a two-step process
1059:26 - first we're going to create a template
1059:28 - for that particular job so I've already
1059:32 - again put together some content so I'm
1059:34 - just going to create another
1059:36 - template called job. mustache so in the
1059:39 - pages file I'm going to go in the pages
1059:41 - folder I'm going to create job. M job.
1059:45 - mustache and let's close everything else
1059:49 - and let's paste in here the job.
1059:51 - mustache file and what does it contain
1059:53 - well let me just change this formatting
1059:55 - to HTML yeah so what does this contain
1059:59 - this contains again a bunch a head
1060:01 - basically a bunch of meta tags Etc then
1060:03 - it contains a body in the body it
1060:06 - contains the nav bar so it's the exact
1060:07 - same Navar that we have in index. HTML
1060:09 - but then it contains an application form
1060:12 - okay so it contains an application form
1060:14 - and here it says there is an H1 that
1060:15 - says that it is going it is going to say
1060:18 - apply job. title so you can already
1060:21 - guess here that it expects to maybe get
1060:23 - a variable called job which has a title
1060:25 - field inside it or a title key inside it
1060:28 - similarly it expects to get the variable
1060:30 - or input job which contains a location
1060:32 - and a salary and a posted information
1060:35 - and also it's going to uh create this
1060:37 - form and the form Action Now is also
1060:39 - going to be something different we'll
1060:40 - come and touch on this later but then it
1060:42 - renders this form over here this uh
1060:44 - application form and then it renders the
1060:46 - footer below it okay there's no yeah
1060:48 - there is a footer here as well okay so
1060:50 - we have you can already visualize that
1060:52 - this is going to render the same page
1060:55 - but instead of the about section and
1060:56 - instead of the table it's simply going
1060:58 - to show an application form with a title
1060:59 - on it okay but how do we actually show
1061:03 - this page when you try to access a job
1061:05 - that's where we now need to add a new
1061:07 - route so here's the route that we're
1061:09 - going to add we are going to go back
1061:12 - into
1061:14 - app.js and now we're going to create a
1061:16 - new route this time we're going to say
1061:18 - app.get slj jobs colon ID and in this
1061:23 - case or the and you see here we've not
1061:26 - put in a particular job ID we could have
1061:27 - put in SL one SL2 sl3 sl4 but we have
1061:30 - created a more generic route and this is
1061:32 - called a route parameter we've created a
1061:34 - more generic route that can handle
1061:36 - anything after SL job so it can handle
1061:38 - SL job1 SL job SL2 sl99 slob hello
1061:43 - slobby slob gooogle it could handle
1061:45 - anything but of course we want to maybe
1061:47 - do some filtering and ensure that it's
1061:48 - actually a number a job ID okay so what
1061:51 - we do then in our route Handler function
1061:54 - is uh we get the ID so whatever is
1061:58 - indicated using a colon at the beginning
1062:00 - you can access its value in request.
1062:03 - params okay you can always just go in
1062:05 - here and also do
1062:07 - console.log rec.
1062:11 - params and that's going to print rec.
1062:15 - params okay and by the way this console
1062:17 - log is not going to show up on the
1062:19 - browser this is actually going to show
1062:20 - up on our terminal down in the server
1062:22 - over here oops yeah this is all this is
1062:26 - going to show up in the terminal down in
1062:28 - the server over here so if I just run
1062:30 - the page once
1062:32 - again and open that and if I actually
1062:34 - try to open that particular page that uh
1062:36 - that particular route then it is going
1062:38 - to show up here in the server it's not
1062:39 - going to show up on the browser so
1062:40 - remember what is executed on the server
1062:42 - and what's on the browser all right so
1062:44 - we get the ID uh that is present in the
1062:47 - route parameter and then we try to find
1062:51 - so we are using the find method of an
1062:53 - array all it does is given a condition
1062:56 - or given a function it finds that job uh
1062:59 - that element which matches that
1063:01 - condition so we saying jobs. find given
1063:03 - a job the job. id. twring so we've done
1063:08 - two string here because the IDS here are
1063:10 - numbers so what we're saying is in the
1063:11 - jobs list find the job whose ID when
1063:15 - converted to string matches the ID that
1063:17 - we got from the URL so from the URL we
1063:20 - get an ID and we search for the job
1063:22 - matching that ID in the job table and
1063:24 - that gives us the match job and let us
1063:26 - also log the Matched job so
1063:29 - console.log matched
1063:31 - job and let's log match job okay and
1063:35 - finally we are saying rest. render job
1063:37 - so we we are rendering the template job.
1063:40 - mustach this time which is present in
1063:42 - the pages folder which is configured as
1063:44 - the views uh for our Express so we are
1063:46 - rendering the job. mustach template and
1063:49 - we rendering it with the data job where
1063:52 - the key job or the variable job job will
1063:54 - have the value of mash job okay so let's
1063:57 - just run this let's see it in action and
1063:59 - things will become clearer let me click
1064:01 - on front end developer over
1064:03 - here yeah let's click on front end
1064:05 - developer and you can see now magically
1064:08 - we have navigated to/ job1 because that
1064:11 - is something that we configured in our
1064:13 - index.js template we've navigated to/
1064:15 - job1 so that automatically gets caught
1064:17 - by this uh route Handler and when it
1064:21 - gets this ID you can see that the ID it
1064:23 - printed here is one
1064:24 - and you can see that it's a string so by
1064:26 - default all route parameters are strings
1064:28 - and then we Tred to search for that ID
1064:30 - within the jobs array and we got back a
1064:32 - match job and this was the match job it
1064:34 - had the ID one Title front end developer
1064:36 - location bangaluru India salary Etc and
1064:39 - then we put that into the um into the
1064:42 - template like this and in the template
1064:45 - job. mustache we actually using it to
1064:47 - render things so we are using it to
1064:49 - render the job title which is showing up
1064:51 - here after apply we are using it to
1064:53 - render the job location job salary and
1064:55 - posted on which is all showing up here
1064:57 - all right and the application form is
1064:59 - generic there is no change here so
1065:02 - that's I think that's pretty neat now we
1065:04 - can go back and like let me open full
1065:06 - stack developer and now it says apply
1065:08 - full stack developer and there's a
1065:11 - different salary and location let me
1065:12 - open data scientist now it says
1065:14 - something different and let me open
1065:16 - machine learning engineer and now it
1065:17 - says something different all right so
1065:20 - that way with just one route we have
1065:21 - handled four jobs but not just four jobs
1065:24 - potentially hundreds of thousands of
1065:26 - jobs on Jovian for example we have
1065:27 - hundreds of thousands of notebooks that
1065:30 - people have created but there is only
1065:32 - one route that is serving every notebook
1065:34 - right and that is the benefit of having
1065:36 - web servers and web applications that
1065:38 - can do all this kind of dynamic stuff
1065:41 - okay so let me get rid of these console.
1065:43 - logs
1065:45 - and now uh we are ready to move forward
1065:50 - because now we've created the single
1065:52 - individual job page so the next step for
1065:55 - us is going to actually support
1065:57 - submitting the application so if you see
1066:00 - here if I click on a job Ro and I fill
1066:03 - out the
1066:05 - application let's say I fill out John do
1066:10 - and I fill out the email address John
1066:14 - do.com and I fill out a phone
1066:17 - number and let me fill out a date of
1066:19 - birth here let me fill out a cover
1066:22 - letter
1066:24 - and agree to the terms and conditions
1066:26 - click submit application so now what
1066:28 - happens when we click submit
1066:29 - applications is in the form we have
1066:32 - specified a certain action so and we
1066:35 - have specified a certain method so all
1066:38 - of this data is going to be posted uh so
1066:42 - there are two ways two methods we can
1066:43 - specify one is get one is post and I'll
1066:45 - talk about the differences as well get
1066:47 - simply means that all of the parameters
1066:50 - or all of the data that has been filled
1066:51 - in into the form will be sent as part of
1066:53 - the URL
1066:54 - whereas post means that the URL is going
1066:56 - to be just this the data that is there
1067:00 - in the form is going to be sent as the
1067:01 - body of the request okay so every
1067:03 - request has a URL and a body and it has
1067:06 - something called headers as well which
1067:07 - we'll talk about later but a URL and a
1067:09 - body get is going to just put everything
1067:11 - in the URL your url is going to become
1067:13 - really long with your cover letter and
1067:15 - name and email and everything which is
1067:16 - something we may want to avoid
1067:18 - especially if you can if you have these
1067:20 - text Fields with a lot of content so
1067:22 - that's where we use post so in post this
1067:24 - is we simply going to send this data to
1067:26 - this particular URL SL jobs SL
1067:28 - particular job id/ apply on the server
1067:32 - but we're going to include all the data
1067:34 - in the request body and let me click
1067:36 - submit application and it says cannot
1067:39 - post slj jobs / one/ apply well that is
1067:42 - because in our web server currently we
1067:47 - can only we have only handled the slash
1067:49 - route and we have only handled the SL
1067:51 - job /id route well we could try to
1067:53 - handle like this we could say app.get SL
1067:56 - jobs slon id/ apply and we could say
1068:00 - something along the lines of Rec
1068:03 - res um and let's say let's simply send
1068:06 - rest.
1068:07 - send got the application let's see if
1068:11 - that works so let me go back here and
1068:13 - let me click submit application it still
1068:16 - says cannot post that is because here I
1068:18 - listening for the get HTTP method so if
1068:21 - I was sending the data using the get
1068:23 - method like this then it would work so
1068:26 - if I click Send I'd have to reload the
1068:29 - page yeah so if I just put in something
1068:32 - here a
1068:33 - b.com and something here and something
1068:37 - here and something here and I click
1068:39 - submit application now it says got the
1068:42 - application so when I send with the
1068:44 - method get and I have a listener with
1068:46 - the method get it gets the data but
1068:48 - where is the data all of that data is
1068:50 - here right here you can see it's part of
1068:52 - the URL it's all part of the URL phone
1068:55 - equals such and such email equal such
1068:58 - and.com U and name equals such and
1069:01 - suchar and this is not a good idea for
1069:03 - long longer forms for short forms it's
1069:05 - okay but for long forms it's not good
1069:07 - but on the other hand what we want to do
1069:09 - is we actually want to send it with the
1069:10 - method post and we want to listen to it
1069:12 - with the method post as
1069:14 - well okay so this time when I reload
1069:18 - this and let me fill that in
1069:21 - again John
1069:28 - do a date and something and
1069:34 - submit
1069:38 - okay do at e.com and submit this time
1069:41 - you can see that we actually listened so
1069:43 - every request and hence every route has
1069:46 - two things it of course has the route
1069:47 - path which is going to match the
1069:50 - specific route depending on the
1069:51 - parameters and it has a method so we
1069:53 - need to to accept form submissions which
1069:55 - are sent using the post method we need a
1069:58 - route that can uh that is declared using
1070:00 - the post method okay and now here we
1070:02 - will be able to get some things out from
1070:04 - the request uh all the all the form
1070:06 - elements that have been sent and then
1070:07 - maybe do something with them maybe send
1070:09 - an email send them to a database Etc so
1070:12 - uh there's a comment here well a lot of
1070:15 - things make sense now yep y so this all
1070:17 - fits together is we have to go about it
1070:19 - see the whole thing to actually
1070:21 - understand and um this was I was going
1070:24 - to say this is so much easier it is such
1070:25 - a hazle typing table rows one at a time
1070:28 - exactly so you almost never type out the
1070:30 - data by yourself you almost always get
1070:32 - it from a database and you just use some
1070:35 - kind of a templating engine to just
1070:37 - generate all that HTML for you okay what
1070:40 - is the small tag well it simply makes
1070:42 - the text a little smaller that's all
1070:44 - okay when do we learn to get data from
1070:46 - the database in a future
1070:49 - course are you also using Express for
1070:51 - the Jovian website no so we're actually
1070:53 - using
1070:54 - another framework called nextjs which is
1070:56 - what is part of the next course because
1070:58 - we use a UI Library called react and
1071:00 - nextjs plays better with react a lot of
1071:03 - people use express it's part of this um
1071:05 - you might have heard the mean stack
1071:07 - which is the mongodb express angularjs
1071:11 - and um angular and nodejs stack I
1071:14 - believe or something like that and
1071:15 - similarly there is a M Stack which is
1071:17 - the mongod express reactant Nots yeah so
1071:23 - yeah there are a bunch of these Stacks
1071:24 - but U there's also some Frameworks that
1071:26 - are specific to specific UI libraries
1071:28 - for example nextjs which is what we use
1071:31 - which is what we're going to cover okay
1071:33 - then we were using flask and later using
1071:35 - something yeah so we're also using flask
1071:37 - for us somehow for some reason we
1071:40 - because we've migrated to things over
1071:41 - time we started out with python as our
1071:44 - backend and or JavaScript as a front end
1071:47 - and that's why we still using both flask
1071:49 - and
1071:51 - nextjs okay yeah so so we are planning
1071:53 - to use react we are already using react
1071:55 - Nexis we just haven't migrated to it
1071:57 - fully how can you make the web app
1071:59 - remember what you input you cannot it's
1072:02 - just that when you go back and forth in
1072:03 - a browser uh the browser retains the
1072:05 - history of the page uh so that's all I
1072:07 - was just using that normally a web app
1072:09 - will not remember what you inputed what
1072:11 - other Dynamic content can we use this
1072:13 - framework for well you can create a blog
1072:15 - post all of Jovian could have been built
1072:17 - like this there was no problem with it
1072:20 - okay is Java lets us do multi-threading
1072:22 - and jospt script allows for asynchronous
1072:24 - programming but it is still single
1072:26 - threaded yeah so this is some more
1072:28 - advanced concepts I will not really
1072:30 - address this but I'll answer your
1072:31 - questions say if I want to handle
1072:33 - multiple concurrent request I think a
1072:36 - Java backend would do better than a
1072:38 - JavaScript well not necessarily because
1072:41 - what you could do is you could run
1072:42 - multiple JavaScript processes so what
1072:44 - you do is Ja JavaScript itself is single
1072:46 - threaded but what you can do is you can
1072:47 - run five JavaScript processes and all of
1072:50 - them can asynchronously handle a lot of
1072:52 - uh load
1072:53 - for you or you could just use a bunch of
1072:56 - servers um that said a Java backend
1072:59 - would be better if you have to do a lot
1073:01 - of processing on the server typically if
1073:03 - you simply have to call a database and
1073:04 - then return the result maybe just format
1073:06 - it in a certain way fill out a template
1073:08 - nodejs is going to be as fast as you can
1073:10 - get more or less because it has that
1073:12 - asynchronicity it's very easy to write
1073:14 - asynchronous code with it um but if you
1073:17 - have to do a lot of processing then you
1073:19 - might run into issues where if you have
1073:21 - like one second of processing where you
1073:22 - have to process maybe 10,000 rows of
1073:24 - data or something in that case you might
1073:26 - want to use Java or something okay and
1073:29 - if for those of you who have no idea
1073:31 - what we just talked about don't worry
1073:32 - about it it doesn't
1073:35 - matter okay my end goal is to build a
1073:37 - web app like Jovian uh by the end of the
1073:39 - program that is going to be a final
1073:40 - project to build something like uh
1073:42 - something along the lines of Jovian uh a
1073:45 - proper web application with a user login
1073:48 - with a database with uh proper framework
1073:51 - a UI framework etc etc
1073:54 - so let's continue on now uh so far we
1073:57 - have created this individual job pages
1074:00 - so obviously we have the main page which
1074:02 - contains the list of job opportunities
1074:04 - either as a table or as this nice list
1074:07 - of cards and when we open up a
1074:09 - particular page we have a dedicated
1074:11 - application page for each role front-end
1074:13 - developer along with some information
1074:15 - along with a bunch of uh inputs and when
1074:19 - we click submit application so we have a
1074:20 - submit application button over here
1074:22 - right now that doesn't work so if I just
1074:25 - put in John do and I put
1074:29 - in something like
1074:32 - that and put in a date of birth here or
1074:34 - something and finally put in a cover
1074:38 - letter and agree to the terms and
1074:41 - conditions it does work but it doesn't
1074:43 - really do anything right now uh it
1074:45 - simply says got the application but it's
1074:46 - not doing anything with it okay so now
1074:48 - the next step for us is to actually fill
1074:51 - out the application
1074:54 - um or is to actually maybe do something
1074:56 - with the application data so I'm just
1074:57 - going to delete this right now um and
1075:00 - that is going to ensure that this
1075:01 - doesn't do anything like that so we
1075:03 - we're now going to fix
1075:05 - that okay so let's now add another page
1075:10 - that can accept form submissions and
1075:13 - send the application over email and then
1075:15 - send send an acknowledgement show an
1075:17 - acknowledgement page to the viewer so
1075:20 - for this I'm going to need three
1075:21 - packages I'm going to need a package
1075:23 - package called node mailer which is
1075:26 - going to be used to send an email so
1075:27 - what I want to do is I want to just
1075:29 - inform myself like I'm the creator of
1075:31 - the site I'm the CEO of Jovian and I've
1075:34 - put up this job site and I want to just
1075:36 - send an email to myself whenever
1075:38 - somebody submits a job application okay
1075:40 - I don't want to give away my email
1075:42 - publicly so that not everybody can
1075:43 - contact me I want them to fill out the
1075:45 - form on this site but I don't want to
1075:47 - store that in a database anywhere right
1075:49 - now that's too much work I'll just send
1075:50 - that data to myself as an email okay and
1075:53 - maybe I could also CC the person who uh
1075:55 - who applied just so that they know as
1075:56 - well but in any case now for that we're
1075:59 - going to use the node mailer package
1076:01 - number one second we are going to use a
1076:04 - package called EnV now the EnV package
1076:07 - is useful when you do not want to put
1076:10 - sensitive information like your email
1076:12 - password in the code remember we going
1076:14 - to put up all the code for this
1076:16 - particular email um for this particular
1076:19 - um project on GitHub uh in public or
1076:22 - sometimes even even in private and we
1076:24 - may not want to put our password there
1076:26 - because then our password will will just
1076:27 - be present there on GitHub for everybody
1076:29 - else to see so that's where there's a
1076:31 - way to securely read some of these
1076:33 - things using environment variables for
1076:35 - which we use the end package and finally
1076:38 - um the request body that is being sent
1076:41 - when we are posting the form data that
1076:44 - that body is going to need to be passed
1076:47 - in some way and for that we need to use
1076:48 - this body parser package okay and you'll
1076:51 - see all of them in action shortly so
1076:53 - let's come back in here let me shut down
1076:55 - the server for a second and let me now
1076:58 - just install these packages nod mailer
1077:00 - Dov and body parser okay all the
1077:03 - packages are installed now I can restart
1077:06 - the server npm run
1077:08 - Dev and let's close this for
1077:11 - now next let us create a file called EnV
1077:15 - at the root of the repository so I'm
1077:17 - going to create a file over here called
1077:20 - EnV into which I'm going to put in my
1077:22 - email and password password credentials
1077:24 - so let's put in a folder EnV in the root
1077:27 - of the repository and into this I'm
1077:29 - going to put in these two things of
1077:31 - course what I'm going to put in here is
1077:32 - the actual email and the actual password
1077:35 - that I want to send the data to um
1077:37 - obviously I don't want to show you that
1077:39 - information so what you will have to do
1077:41 - is you will have to replace this with
1077:42 - your email and your password and I would
1077:44 - suggest not using your primary email uh
1077:48 - just to be careful what you can do is
1077:49 - you can go to gmx.com this is a website
1077:53 - where you can create a free email and on
1077:55 - gmx.com you can just create an a
1077:57 - throwaway email and just use that and
1077:59 - its password okay and that's what I'll
1078:01 - be using as well so I'm just going to go
1078:03 - in into another desktop over here and
1078:05 - I'm going to close it over close it here
1078:08 - but I'm going to put in my email ID
1078:11 - which I have created for this
1078:14 - tutorial and
1078:17 - password okay and I've done that so I'm
1078:19 - not going to show you my enem file again
1078:21 - if I open it you'll be able to see my
1078:23 - email and password so I I I won't show
1078:25 - it but it's there now the other thing I
1078:27 - want to mention is the EnV file is
1078:28 - already ignored in the dog ignore file
1078:31 - so which means when I do a git commit
1078:33 - and send it to GitHub then this data is
1078:35 - not going to be sent it is going to
1078:37 - remain securely on my code spaces
1078:39 - machine which is just private for me and
1078:40 - it's not going to be sent to the GitHub
1078:42 - repository which is public for everyone
1078:43 - to see or if it was private and my
1078:45 - co-workers would be able to see which is
1078:47 - again undesirable okay but now that we
1078:50 - have put the uh information in this v
1078:53 - file we need a way to actually load this
1078:55 - information into our app how do we load
1078:58 - this information into our app we do it
1079:00 - by saying this require. env. config so
1079:06 - the first line require. env. config is
1079:08 - going to read the EnV files that are
1079:11 - present in our project folders and it is
1079:14 - going to then read each of those and
1079:16 - then automatically add them to the
1079:19 - process.env variable okay so remember we
1079:22 - had this process EnV variable so now
1079:24 - instead of apart from Port it can also
1079:27 - get a bunch of other things that we have
1079:28 - defined so let me just put this right
1079:31 - here at the
1079:32 - top EnV and now here we have the we've
1079:35 - also included the node mailer package
1079:37 - and we've also included the body parser
1079:39 - package okay all right next step is to
1079:43 - also configure our application to use
1079:46 - the body parser so remember when we send
1079:49 - the data from this form we are posting
1079:51 - it which means we are not sending the
1079:53 - data in the URL we which means we are
1079:56 - actually um sending it in the body of
1079:58 - the request and that body of the request
1080:00 - needs to be passed in a special way so
1080:02 - right below app do uh Express right
1080:05 - below my app creation logic I'm simply
1080:07 - going to say app.use body passer. URL
1080:10 - encoded extended false now don't worry
1080:13 - about all all of this right now if you
1080:14 - just search online how to add body
1080:17 - parser to express you'll get the line of
1080:18 - code that you need to add and you can
1080:20 - look up what exactly extended does okay
1080:22 - but the basic ideas is and by and just
1080:24 - one General tip I want to give you here
1080:26 - is from this point on you will see a lot
1080:28 - of code which we are using uh which we
1080:30 - will not exactly describe perfectly and
1080:33 - the idea is that you have to kind of
1080:35 - look it up online maybe use chat GPT
1080:37 - jobard Google and understand what it
1080:39 - means because there are so many
1080:40 - libraries so many Frameworks so many U
1080:43 - options in each of them that it doesn't
1080:45 - really make sense to cover all of them
1080:46 - it's something that you should just look
1080:48 - up uh and try to figure out as you need
1080:50 - it okay so now we add body part we've
1080:53 - added this middleware essentially to our
1080:56 - application to which is going to parse
1080:59 - the request body and now uh one other
1081:02 - thing we need before we actually start
1081:04 - processing the request we are going to
1081:05 - create a transporter we going to create
1081:08 - a transporter which is going to have the
1081:11 - configuration required to connect with
1081:14 - the mail server and send the email okay
1081:17 - so I'm let me create this transporter
1081:19 - over here so I'm going to say node node
1081:22 - mail create transport and this transport
1081:26 - uh is basically it needs it needs a host
1081:28 - the host is mail. gmx.com so depending
1081:30 - on which email provider you're using
1081:32 - you'll have to look up their SMTP host
1081:34 - so just search for SMTP host for your
1081:38 - email provider and you also need to look
1081:41 - up their SMTP Port all right and then
1081:44 - finally you Al secure true is almost
1081:46 - always said secure true means you're
1081:48 - using https the secure version of the
1081:50 - transport and finally you need to
1081:52 - provide authentication and in the
1081:53 - authentication you need to provide the
1081:55 - username and the password as the user
1081:56 - and pass keys of course I'm not going to
1081:58 - type in my username and password here
1082:00 - rather if since I've already put
1082:02 - something into the EnV file and I've
1082:04 - read that using the require n um line of
1082:09 - code over here so this is automatically
1082:11 - going to get populated with my email ID
1082:13 - and this is automatically going to get
1082:14 - populated with my email password so now
1082:16 - we have this transporter and now we can
1082:18 - simply say transporter. send and that's
1082:20 - going to send whatever email we want to
1082:23 - send okay so with that we are finally
1082:26 - ready to actually pass all the content
1082:29 - so let's just go about this line by line
1082:32 - so let me come in here first and let me
1082:35 - just for
1082:40 - now simply say
1082:43 - console.log
1082:45 - requestbody req. body all right let's
1082:49 - just do that much very straightforward
1082:51 - we're just going to Lo the body over
1082:53 - here so let me just open up the
1082:56 - terminal this is my terminal over here
1082:59 - and let's just click submit
1083:03 - application and you can see that when I
1083:05 - clicked submit application it simply
1083:07 - said um name John John do email whatever
1083:11 - Akash jo.com phone number do cover
1083:13 - letter Etc so we simply logged the body
1083:16 - over here and nothing happened here
1083:18 - because we've not sent anything from the
1083:19 - server let's just go back yeah yeah what
1083:23 - we can also do here is we can we can do
1083:25 - right now rest. send application
1083:29 - received if we had done that then when I
1083:32 - click submit application it's going to
1083:34 - log the request body over here you can
1083:37 - see it loged the request body over here
1083:39 - for us but along with that it also
1083:41 - printed application received right but
1083:42 - that's not what we want to do we want to
1083:44 - actually do something with the
1083:45 - application now that we have the request
1083:47 - body okay so what next well next up then
1083:52 - let let us get so the request body has
1083:54 - this name email phone date of birth and
1083:56 - cover letter let's get all of that
1083:58 - information out from the request body
1084:00 - and for that we're going to use this
1084:02 - special syntax called destructuring
1084:04 - whenever you have a particular object
1084:06 - and you want to get the keys out of that
1084:09 - object and you know the names of the
1084:10 - keys you can put all those keys into
1084:12 - specific variables like this so you can
1084:14 - say const and then you can open brackets
1084:16 - and you can type the names of all the
1084:18 - keys that are present in the object or
1084:20 - you can pick just some of the keys that
1084:21 - are present present in the object and
1084:23 - you can say equal to request. body so
1084:24 - it's kind of the opposite instead of
1084:26 - saying request. body equal to name email
1084:28 - Etc now you're saying that from request.
1084:30 - body extract the name and put it into a
1084:32 - variable called name extract the email
1084:33 - put it into variable email and just do
1084:35 - that and now you can see if we do
1084:37 - console.log
1084:39 - name now this will just have the name
1084:42 - picked out from the request body all
1084:44 - right and I can see submit application
1084:48 - here yeah if I say submit application
1084:50 - you can see it prints the name John deto
1084:54 - okay so we now have all this information
1084:56 - from the request body into a bunch of
1084:57 - variables nice next let us now get the
1085:03 - job that we are currently working with
1085:06 - so remember we are posting when we're
1085:08 - posting we're also specifying the ID of
1085:10 - the job in the URL as a route parameter
1085:13 - so let's get the request. par. ID that
1085:16 - is going to get this uh that is going to
1085:18 - get this URL parameter ID and let's get
1085:20 - the matching job so let's also print in
1085:23 - the matching job so let's log
1085:26 - console.log matched job matched
1085:30 - job okay and let's also for now just
1085:34 - do rest.
1085:37 - send received so that is a match job but
1085:41 - then let's also maybe log the request
1085:43 - body just just for complete
1085:51 - clarity
1085:52 - okay and let's click submit application
1085:54 - once again so now you can see that this
1085:56 - was what was sent or submitted by the
1085:58 - user so this is obtained from the form
1086:00 - that the User submitted name email phone
1086:02 - number date of birth cover letter and
1086:04 - this was received this was a match job
1086:07 - so that means in the URL we had SL1 if I
1086:09 - check the URL over here you can see that
1086:11 - we've done SL1 SL apply right so SL1 SL
1086:15 - apply and that is get getting picked up
1086:17 - as the ID here so and that has been
1086:19 - matched or searched within the jobs list
1086:22 - which currently comes from a file but
1086:23 - could have come from a database and from
1086:26 - there we get the title of the job
1086:27 - essentially um so now we have all the
1086:29 - information we have the information
1086:31 - about the job that uh that is being
1086:33 - applied to we have the information about
1086:35 - the application itself the applicant
1086:37 - itself so the next step is to actually
1086:40 - construct an email so for constructing
1086:43 - an email we create this mail options
1086:46 - object all right so all we doing here is
1086:48 - into it we are putting a from email now
1086:51 - the from email ideally is the same email
1086:53 - that whose password you have put in into
1086:55 - the transporter so yeah you put in a
1086:58 - username and password so the from email
1087:00 - should be the same the two email could
1087:01 - be whatever you want let's say you've
1087:03 - set up this GMX email because you don't
1087:05 - want to reveal your credentials or put
1087:07 - your password of the primary email the
1087:09 - true email could be I could put into the
1087:11 - two email I could just put in Akash ANS
1087:14 - jan.com something like that or I could
1087:17 - also put in I believe I could put in a
1087:19 - list as list here as well so let's say I
1087:21 - also apart from from sending it to
1087:22 - myself I also wanted to send it to the
1087:24 - person who has actually emailed me so
1087:26 - their email is present now in the email
1087:28 - variable I can pick it up from the
1087:30 - application and I can email them that
1087:31 - the application sent and such and such
1087:34 - but for now just to keep things simple
1087:36 - I'm going to send it to the same
1087:37 - throwaway email that I've created all
1087:39 - right I don't want to worry about that
1087:41 - but I could send it to whatever email I
1087:43 - wanted so keep that in mind from is
1087:44 - ideally the same email that you've
1087:46 - configured in the transport two can be
1087:48 - whatever you want you can put in
1087:49 - multiple emails here as well all right
1087:51 - then we have a subject we can set and
1087:53 - I'm just saying new application for
1087:55 - matched job. title so that when I get
1087:57 - the email I want to know which job the
1087:59 - person is applied for and then you can
1088:02 - create some HTML so what you can do is
1088:04 - you can create an HTML string and inside
1088:07 - that HTML string we have inserted a
1088:08 - bunch of these things so this is what is
1088:10 - called a JavaScript string um formatting
1088:15 - essentially or a template literal where
1088:17 - you started with a back code and then
1088:19 - you insert into it using a dollar you
1088:20 - insert name email Etc okay you can learn
1088:22 - about this what you can do is you can
1088:24 - also just paste this code on chat GPT or
1088:26 - jobard and ask it to explain the code
1088:28 - but essentially what we doing is we are
1088:30 - creating a simple HTML email with name
1088:34 - email phone number date of birth and a
1088:36 - cover letter information all right name
1088:37 - email phone number date of birth cover
1088:38 - letter all of that and that is our mail
1088:41 - options so with that our mail options
1088:43 - object is ready and finally we can now
1088:45 - just simply send that using transporter
1088:47 - now we can say transporter.
1088:50 - sendmail
1088:53 - yeah so now let me get rid of this rest.
1088:55 - send and let me paste this in here so
1088:57 - now we can simply say transporter.
1088:59 - sendmail and I give it the mail options
1089:02 - which contains the from to subject and
1089:04 - HTML body and then I can give it a
1089:07 - Handler so when it tries to send the
1089:08 - mail and let's say it succeeds or fails
1089:10 - after the mail sending is done it is
1089:12 - going to get called uh it is going to
1089:14 - call this Handler function that is
1089:15 - provided here with whatever error or
1089:18 - info was received so if there was an
1089:20 - error then we want to Simply log that
1089:22 - error we want to print that error here
1089:24 - in the server and we want to say error
1089:25 - sending email if there was no error then
1089:27 - we want to Simply say email sent
1089:29 - successfully okay so let's just save
1089:31 - that um so now we have all the
1089:33 - information I think this position is not
1089:35 - required because we're not actually
1089:37 - asking for position in the form okay so
1089:40 - I'm going to just close this terminal
1089:42 - tab here let's take a quick look at this
1089:44 - again before we actually run it for when
1089:47 - we post some data to/ jobs colon id/
1089:50 - apply then this Handler gets called from
1089:53 - the request body we are going to get the
1089:55 - name email phone number date of birth
1089:57 - and cover letter from the request params
1089:59 - do ID which is the URL parameter we are
1090:02 - going to get the ID and we going to find
1090:04 - the matching job we are then logging
1090:06 - both of them to the terminal and then we
1090:10 - are creating a male options which
1090:11 - contains a from two subject and a body
1090:14 - and then we saying transporter. send
1090:16 - mail with the mail options and if we
1090:18 - receive an error so we need to give it a
1090:19 - Handler so what happens is it tries to
1090:21 - to send the mail in the background and
1090:23 - once the mail sending is done it calls
1090:25 - this Handler function so you always have
1090:27 - this like call back function that you
1090:29 - keep passing to almost everything that
1090:31 - you do in JavaScript right this is this
1090:33 - is what is meant by asynchronous
1090:35 - programming that you're not you're not
1090:36 - blocking the main thread you can serve
1090:38 - other requests from other clients till
1090:41 - the mail is being sent in the background
1090:43 - and then whenever the mail sending is
1090:44 - done it is going to invoke this function
1090:46 - now if there is an error after sending
1090:48 - the email then we are going to say rest.
1090:50 - status 500 error sending email so what
1090:53 - we saying by status is HTTP status codes
1090:56 - indicate whether the request was served
1090:58 - successfully or not so I would encourage
1091:00 - you to just search for HTTP status
1091:02 - codes you must have heard of 404 which
1091:05 - means that the page or the the URL was
1091:07 - not found 200 simply means that the URL
1091:09 - was found 500 means that the server
1091:12 - encountered an error 400 means bad
1091:14 - request means you made some mistake
1091:15 - while sending the request and so on
1091:17 - right so there are all these HTTP codes
1091:19 - that the server uses to inform the
1091:21 - client client what went wrong if
1091:23 - anything okay and it also sends the
1091:25 - message error sending email otherwise it
1091:28 - says rest. status 2 200 email sent
1091:31 - successfully okay so let's now go back
1091:34 - here and let us submit this once again
1091:38 - so I'm going to click submit application
1091:40 - This Is The Moment of
1091:44 - Truth and when we click that it says
1091:46 - email sent successfully so I'm just
1091:49 - going to go into my GMX account so GMX
1091:53 - . and let me just log in over here let's
1091:57 - see let me grab
1091:59 - my
1092:07 - email and
1092:10 - password and let me log
1092:12 - in and once I am logged in hopefully I
1092:17 - should be able to see that new email so
1092:20 - it says here new application for front
1092:22 - end developer John John do Akash jan.com
1092:27 - phone number is such and such date of
1092:29 - birth in suchar and such I write code
1092:30 - well that seems to be exactly what I had
1092:32 - filled out here great now one thing I
1092:35 - want to mention though almost every
1092:37 - email provider has turned off SMTP by
1092:39 - default because it is somewhat insecure
1092:41 - and that includes GMX to so what you
1092:44 - what you will need to do first is if
1092:46 - you're using GMX uh you will need to go
1092:49 - into home you will need to go into email
1092:51 - settings and under email settings you
1092:54 - will need to go into POP 3 and IMAP and
1092:57 - under POP 3 and IMAP you will need to
1092:59 - enable this setting enable access to
1093:01 - this account via POP 3 and IMAP okay so
1093:04 - that is just how you enable this SMTP
1093:06 - business on um GMX let's see if it's not
1093:09 - enabled so let me just show show you
1093:11 - what happens if I don't enable it and I
1093:14 - try to send it
1093:15 - now you'll see that it faces an error in
1093:18 - sending the email and what is the error
1093:20 - well I can actually look up the the
1093:21 - error here so if I just check the
1093:25 - terminal and you can see that it says
1093:29 - that I got the data I matched the job
1093:32 - but invalid login authentication
1093:34 - credentials invalid all right but I turn
1093:37 - this on again and save it and fill out
1093:41 - this capture qdw ZZ
1093:44 - ZB and
1093:46 - continue and now I try to submit this
1093:48 - again let me try a different job this
1093:50 - time maybe D
1094:00 - scientist and let us put in a date of
1094:02 - birth
1094:06 - here and let's click submit and this
1094:09 - time the email should be sent
1094:11 - successfully okay I can come back here
1094:12 - and check the
1094:16 - email and let's see back to email and
1094:19 - you can see there's a new application
1094:20 - for data science is Akash he.com such
1094:24 - and such and the cover letter simply
1094:25 - says I train okay so nice I think with
1094:30 - that we've basically implemented what we
1094:32 - were looking to implement we have
1094:33 - implemented
1094:35 - uh the the page here as well now of
1094:39 - course this is not how we should show it
1094:41 - ideally we should create a nice page
1094:43 - saying your application has been
1094:44 - received maybe let's try to do that as
1094:46 - well let me go in here and let me say
1094:49 - create a new mustache template
1094:52 - applied.
1094:53 - mustache okay and let me go into my job.
1094:58 - mustache copy over everything from here
1094:59 - into applied.
1095:05 - mustache yeah and let me get rid of the
1095:08 - form here probably don't need the
1095:14 - form and let me simply
1095:16 - say in a
1095:20 - div
1095:23 - your
1095:25 - application has been
1095:29 - received all
1095:31 - right I'll make it look slightly nicer
1095:34 - so let's see what can I do here well let
1095:36 - me go into index. mustache let me get
1095:38 - some styles from my description section
1095:40 - just so that it looks slightly nicer
1095:42 - okay class lead this looks
1095:44 - good so let me get that class lead in
1095:47 - here apply.
1095:50 - mustache let me give this
1095:53 - class
1095:55 - container and
1095:56 - [Music]
1095:57 - Lead all right okay so let's try this
1096:00 - again I click submit application oh
1096:03 - let's also render this template so
1096:05 - instead of saying do send I can say do
1096:09 - render and I can simply give it the name
1096:12 - of the template I want to render and the
1096:14 - name is simply
1096:15 - applied and now if I click submit
1096:19 - application okay just says email send
1096:22 - Pro it should
1096:24 - probably
1096:26 - reload oh sorry I should not render this
1096:28 - one I should render in the other case so
1096:31 - do
1096:35 - render
1096:39 - applied that's it and now let's click
1096:43 - submit and you can see that the email
1096:45 - has been sent and it also says your
1096:47 - application has been received and of
1096:48 - course I can make a few changes here I
1096:50 - can make say
1096:52 - text Center and I can say
1096:55 - mt5 and I can also say maybe
1096:58 - mb5 so that this is slightly
1097:01 - nicer uh so let me go back here let me
1097:03 - click submit application
1097:06 - again yeah I'll have to restart uh
1097:09 - something probably oh I see what's
1097:11 - happening so we actually want to reload
1097:14 - the server even when a mustache file is
1097:16 - changed so m t a c e I'm adding this
1097:19 - setting inside noon. Json so that
1097:21 - whenever I change a mustache file that
1097:23 - automatically reloads the server as well
1097:26 - so let me make these mt6 and mb6 let me
1097:29 - go back and submit
1097:33 - application still okay I need to restart
1097:36 - noon as well when you change noon. Json
1097:39 - you need to restart nodon um or you
1097:42 - could just do you could add Json as
1097:44 - another file that it watches for as well
1097:47 - okay but npm oops let's run it again npm
1097:51 - run
1097:52 - Dev and let me just fix the spelling
1097:55 - here I think there is a small fix it we
1097:59 - have three PS here let's do that let's
1098:02 - put this in here quotations let's go
1098:05 - back and let's click submit
1098:08 - application and it says your application
1098:10 - has been received okay perfect so with
1098:14 - that we have
1098:16 - implemented we should have a pro
1098:18 - probably a top margin as well it's not
1098:20 - showing up just yet
1098:21 - um but you can always figure that out
1098:23 - small styling changes I'll leave that to
1098:25 - you as something to do but with that
1098:27 - we've implemented a nice applied page as
1098:28 - well that's nice um now we want to
1098:31 - actually deploy this so for us to deploy
1098:34 - this of course we can go in here and we
1098:36 - can
1098:38 - say um added
1098:42 - templates and dynamic
1098:46 - pages and click commit and let's send
1098:49 - this so that's going to go to iub and
1098:51 - that is going to automatically deploy to
1098:53 - verel uh however remember that ourv file
1098:58 - is not is not uh going to get committed
1099:00 - to the GitHub repository which means if
1099:02 - I look back at my GitHub repository over
1099:04 - here that is going to contain everything
1099:07 - but it's not going to contain the EMV
1099:08 - file so when worel picks up all of this
1099:10 - code and tries to deploy it to the cloud
1099:13 - worel doesn't have my credentials so I
1099:15 - need to give versel my credentials let's
1099:18 - go back here into the project your
1099:21 - Express Careers Live and Let us actually
1099:23 - see it in
1099:26 - action okay work at Jovian this is all
1099:28 - well and good full stack developer all
1099:30 - right let me put in some information
1099:32 - here aashan a
1099:35 - atb.com
1099:38 - something like that and let me put that
1099:41 - in here cover
1099:42 - letter not ready and let me click submit
1099:46 - application and we're going to get into
1099:48 - this error error sending email obviously
1099:50 - because versal doesn't know the email
1099:52 - and password that we need to have right
1099:54 - so that is where just like you have
1099:55 - environment variables in a EnV file for
1099:58 - local development veral has a settings
1100:00 - tab and inside it you can specify some
1100:02 - environment variables okay so here you
1100:04 - need to add in a couple of environment
1100:06 - variables and I believe I can probably
1100:10 - just paste the contents of an
1100:12 - environment variable
1100:16 - file yeah but I I just want to do that
1100:18 - securely so I'm going to go in here and
1100:20 - and paste my environment variables so my
1100:24 - email
1100:25 - ID yeah and I've added them and now I'm
1100:28 - going to just save
1100:30 - them yeah and now they have been added
1100:32 - so they've been added below I've added
1100:34 - my email ID I've added my email password
1100:36 - and these are stored securely on worell
1100:39 - and I can add so the way I basically
1100:40 - added this was to say email ID and
1100:43 - whatever at whatever.com
1100:45 - and I clicked save and that is how these
1100:47 - got added okay so now the environment
1100:50 - variable my email ID and password have
1100:51 - been added into verel and it is going to
1100:54 - populate them into process. EnV and that
1100:56 - is going to then get picked up but I
1100:57 - just need to do one more deployment to
1100:59 - actually send it so let me just do
1101:02 - redeploy and
1101:06 - redeploy it's going to take a second
1101:08 - it's going to pick up all the
1101:09 - environment variables as well this time
1101:11 - and it is going to redeploy this
1101:13 - versal it's it's going to redeploy the
1101:16 - package or
1101:18 - the application and now let's go back in
1101:22 - here let's try
1101:24 - again okay full stack developer role
1101:28 - let's see
1101:31 - janeo
1101:32 - jan.com
1101:36 - like
1101:41 - that and let us just fill that out here
1101:43 - so I can zoom this in for you but yeah
1101:46 - I've simply filled out for the full
1101:47 - stack developer I've simply filled out
1101:49 - the application and click submit and
1101:51 - this time it says your application has
1101:53 - been received right we can add some
1101:55 - space above it but I guess this is fine
1101:57 - I can also then go into gmx.com
1102:01 - and let's see let's just reload this
1102:04 - page this is a very old email service so
1102:06 - you can clearly see that you have to
1102:08 - reload things and all but yeah Jan
1102:10 - dojo.com phone date of birth cover
1102:12 - letter perfect and with that we are more
1102:16 - or less done so now we have created our
1102:19 - website which anybody can use and this
1102:21 - is a website that honestly at this point
1102:23 - we can probably deploy as our careers
1102:25 - website maybe just change this image to
1102:27 - an image of our team maybe just update
1102:29 - the uh roles that we have in our in the
1102:32 - repository and then deploy it um but the
1102:34 - next step here would be maybe adding
1102:36 - some sort of a login system maybe
1102:37 - storing the data in a database and maybe
1102:40 - allowing applications also to be stored
1102:42 - in the database and so on so there's a
1102:44 - lot you can do here now here are a few
1102:47 - exercises for you create a mustache
1102:49 - template apply. mustache we've already
1102:51 - done this but how about apart from
1102:53 - saying your application has been
1102:54 - submitted you also show what is all the
1102:56 - data that the user has filled out
1102:58 - remember you still have you can pass a
1103:00 - variable the you can pass the request
1103:02 - body maybe as the application data into
1103:05 - the template and you can populate the
1103:07 - template and show all the data there how
1103:10 - what you can try modifying the form
1103:11 - submission to include the resume as an
1103:13 - attachment to the email so what happens
1103:15 - here is you have to use a encryption or
1103:18 - an encoding typee called multip part
1103:20 - form data and for that you'll have to
1103:22 - use not body parser but something called
1103:24 - molter okay so multer is a middleware
1103:27 - for handling multiart form data in
1103:30 - express all right so I'll let you check
1103:33 - that out as well here is another thing
1103:35 - you can try to do now what might happen
1103:37 - is somebody can create a quick script
1103:39 - that can open up the page or maybe like
1103:41 - some kind of a web scraping script that
1103:43 - can open up the page and then just fill
1103:45 - out hundreds of applications and
1103:47 - then yeah fill out hundreds of
1103:49 - applications let me reload that yeah
1103:51 - fill out hundreds of applications by
1103:54 - simply automating this or clicking the
1103:55 - submit button again and again and again
1103:57 - and that will lead to hundreds of email
1103:59 - over here so we want to avoid that we
1104:01 - definitely don't want hundreds of emails
1104:03 - and for that what you can do is use some
1104:05 - kind of a capture you see that thing
1104:07 - where they ask you to select traffic
1104:08 - signs and all it's actually very easy to
1104:10 - add and U one one capture system that
1104:14 - you can use which is actually easier to
1104:15 - use than Google's recapture is The Edge
1104:17 - capture system okay so what you'll have
1104:20 - to do is you'll have to go in and log in
1104:21 - here and you'll have to generate some
1104:23 - you'll have to put some code into the
1104:25 - index.html file or whatever uh HTML
1104:28 - you're sending to the browser you'll
1104:29 - have to put some code on the server and
1104:32 - you will have to um then just verify
1104:35 - that it works properly okay now one good
1104:38 - way to do some of these things is to
1104:40 - maybe just go on uh let's say on jobot
1104:43 - so jan.com
1104:44 - jobot and you can ask jobot um show me
1104:49 - an example of how
1104:52 - to add spam
1104:57 - protection using H
1105:01 - capture in an
1105:03 - expressjs application okay and just like
1105:07 - that jobot should be able to tell us
1105:09 - exactly what we need to do so first you
1105:11 - need to install the npm install edge
1105:12 - capture package then inside your Express
1105:15 - server file you need to um require the
1105:18 - hedc capsa hedc capsa package and then
1105:20 - what you need to do is a couple of
1105:22 - things one um you need to create some
1105:26 - capture HTML and send that into your um
1105:29 - template and then second you need to
1105:32 - maybe verify the capture response using
1105:35 - capture. verify from the body you can
1105:38 - get this get this Edge capture response
1105:39 - and verify it okay and that's it right
1105:42 - or you can also look at the
1105:43 - documentation so the documentation there
1105:45 - is some documentation for expressjs and
1105:48 - here you can check its example and it
1105:49 - says something
1105:50 - about how you do it so there are many
1105:52 - ways to do it um just look it up this is
1105:55 - a very common use case that people do
1105:57 - and this is again a common pattern from
1105:59 - now going forward that it is impossible
1106:02 - for us to just learn or teach or
1106:05 - remember all of the various possible
1106:07 - things that you can do from this point
1106:09 - on what you need to do is figure out
1106:10 - what you need for example I need a
1106:12 - capture then search online maybe study
1106:14 - the documentation maybe use chart GPT or
1106:16 - jobot or look at somebody's blog post
1106:20 - understand the code that is there bring
1106:22 - that code into your project because that
1106:24 - code is never going to be directly copy
1106:26 - pastable bring that code into your
1106:27 - project test it out and if something
1106:30 - goes wrong check the documentation
1106:32 - repeat the process again um debug things
1106:34 - test it out and uh once it works you're
1106:37 - good to go right and with that you now
1106:39 - have access to potentially thousands of
1106:41 - libraries and thousands of features that
1106:43 - you can easily incorporate into your web
1106:45 - applications all right so I'll allow you
1106:48 - to do that modify the S modify by um
1106:51 - yeah prevent spam and automated
1106:52 - submissions by adding human verification
1106:54 - using Edge capture and use chat gbd or
1106:56 - jobot for help so here's what we did
1106:59 - today we created uh and ran a web server
1107:02 - using the express web framework really
1107:04 - simple just a few lines of code we saw
1107:07 - how to serve HTML pages and we saw how
1107:10 - to serve static files and then we also
1107:12 - saw how to serve Dynamic data using
1107:14 - templates where we use the mustache
1107:15 - templating engine and we filled in jobs
1107:18 - data from a list it could could also
1107:20 - have come from a database into the
1107:22 - template we also saw how to use route
1107:25 - parameters to create and serve Dynamic
1107:26 - pages so we created a jobwise
1107:28 - application page where we showed the job
1107:30 - title salary location Etc at the top of
1107:32 - the page and the application form and
1107:34 - then we also accepted form submissions
1107:37 - um on a new route which was a post route
1107:41 - where we passed the request body we
1107:43 - passed the content from the um form that
1107:46 - was submitted and from there we got the
1107:49 - emails and by the if you have a doubt
1107:50 - how did we get to know that the form had
1107:53 - this
1107:54 - uh yeah if you have a question how we
1107:56 - got to know that the form had has
1107:58 - certain Keys um so you have these things
1108:01 - here how did we get name email phone
1108:03 - number how do we know that these were
1108:04 - the actual names of the keys within the
1108:06 - form well that is actually present
1108:08 - within
1108:09 - the form itself so if you check the form
1108:12 - for every input we specify the name so
1108:15 - name equals name name equals email name
1108:19 - equals phone name equals doob and that's
1108:23 - exactly what we get here name email
1108:25 - phone doob and then there is that last
1108:27 - input which is the cover letter name
1108:30 - equals cover letter and that's what we
1108:32 - get as the variable cover letter okay so
1108:34 - we got all the data from the form and
1108:36 - then we created this mail and we use
1108:40 - node mailer to configure our settings
1108:42 - our credentials our credentials of P
1108:45 - post our credentials were stored
1108:47 - securely in aemv file read in securely
1108:50 - using the N library and then we created
1108:53 - a transport and from that transport we
1108:55 - sent an email and that email was then
1108:58 - visible here on our GMX
1109:02 - account yeah so maybe I was just uh I
1109:05 - got logged out here but yeah that was
1109:07 - available on our GMX account so that's
1109:10 - how you build a web application right
1109:11 - this is the most basic version where we
1109:13 - simply using HTML CSS JavaScript we're
1109:15 - not using things like react Etc but this
1109:18 - is the code the code ideas going to
1109:20 - remain the same you have a server some
1109:22 - logic happens on the server server can
1109:23 - connect to the database server can
1109:25 - process request server can handle form
1109:26 - data etc etc and then you send some HTML
1109:29 - to the client and that along with that
1109:30 - HTML you might have some CSS you might
1109:32 - have some static files you might
1109:34 - actually also have some JavaScript files
1109:35 - which get executed only on the client
1109:38 - all right so all of that is something
1109:40 - that you can do as well now all the code
1109:43 - for the tutorial can be found here it's
1109:44 - all open for you to see so you can check
1109:47 - it out except of course the credentials
1109:48 - themselves um this is the starter code
1109:51 - and this is the finished code so this is
1109:53 - all the finished code that you can look
1109:54 - at and this is the finished site that
1109:56 - you can check out and check out these
1109:58 - resources to learn more at this point
1110:00 - you just have to Google things or ask
1110:03 - jobot or chat GPT expressjs
1110:05 - documentation nodemon mustache body
1110:07 - parser HTTP methods node mailer SMTP all
1110:10 - of that okay one exercise I would
1110:13 - definitely encourage you to try is to
1110:14 - modify the form submission code to
1110:16 - include the resume as an attachment to
1110:18 - the email that'll be a very interesting
1110:19 - thing for you to try okay now your
1110:22 - objective with this project and with
1110:25 - this course really is to be able to
1110:28 - build uh an entire website by yourself
1110:31 - from scratch so you're going to build a
1110:34 - personal website using the tools and
1110:36 - techniques that we've covered in this
1110:38 - course okay now of course this is not a
1110:41 - web design course and design is its own
1110:44 - uh entire area that might take several
1110:47 - years to perfect uh so that is why I
1110:51 - would not recommend trying to design a
1110:53 - website from scratch what you can do is
1110:55 - check out the figma community over here
1110:58 - so this is the figma community if you
1111:00 - just go to figma docomomo figma is a
1111:03 - design platform web design platform and
1111:05 - just search for personal website you
1111:07 - should be able to find a bunch of
1111:09 - interesting personal website templates
1111:12 - that you can use so uh for instance this
1111:15 - one looks interesting let's take a look
1111:17 - at this and whenever you open up a figma
1111:19 - Community project you can actually go in
1111:22 - and you can check out what pages they
1111:24 - have provided so yeah this is a UI
1111:26 - design page and on the UI design page
1111:27 - you can see here that uh this person has
1111:30 - created two versions so you can use
1111:33 - either of these versions okay uh they
1111:34 - have a they have a name then they have
1111:37 - uh a couple of links and a download savy
1111:40 - button and then they have like this hero
1111:42 - section after that they have their
1111:43 - Social Links after that okay they're
1111:45 - talking about some of their services
1111:46 - this is where maybe you could talk about
1111:48 - your education your work experience
1111:50 - um then they have maybe uh some projects
1111:53 - that they worked on like this listed
1111:55 - here and then they have maybe some blog
1111:56 - post so if you have some blog post that
1111:58 - you've written on medium or elsewhere
1111:59 - you can link those as well and they
1112:01 - again they have a fitter with some
1112:02 - Social Links right so you do not have to
1112:06 - and I want to stress this again you
1112:07 - don't have to try to design your own web
1112:09 - page I would not recommend doing that
1112:11 - because that's not what this is about
1112:13 - it's about being able to code your own
1112:14 - web page in HTML and CSS uh and make it
1112:17 - look good make it responsive use the the
1112:19 - tools libraries Frameworks that we have
1112:21 - covered in this course here's another
1112:24 - example again let's go into this U so
1112:27 - here again there seems to be
1112:29 - this section over here there is a nav
1112:32 - bar and then a bunch of links here so
1112:34 - it's not that you will use these exact
1112:35 - same links in your project what you're
1112:38 - going to do is you're going to replace
1112:39 - it with some of the links or some of the
1112:41 - items that make sense for you and
1112:43 - there's this hero section you can
1112:44 - probably put up your own picture here
1112:46 - and then there is a bunch of services
1112:49 - there's an about section there's a bunch
1112:51 - of project sections a bunch of cards
1112:53 - here and then just more things here
1112:56 - right so it's again you don't have to
1112:57 - use all of this you can just use some of
1112:59 - this then there's a contact form here as
1113:01 - well and so on so I just want to go over
1113:04 - some guidelines here so there's no
1113:06 - tutorial here as such for this because I
1113:08 - want you to just try and do this on your
1113:10 - own this is the first open-ended
1113:12 - Endeavor in terms of web development so
1113:14 - there's not a lot of step-by-step
1113:16 - instructions it's a bit open-ended for
1113:18 - you so go out check check out the figma
1113:20 - community check out dribble find a good
1113:22 - design that you feel you can Implement
1113:24 - then here are some requirements that
1113:27 - your website needs to satisfy now of
1113:28 - course feel free to do as much as you
1113:30 - want feel free to go as deep as you want
1113:32 - in and as um Broad in terms of the kind
1113:35 - of content you want to incorporate but
1113:37 - the the key things that you need to keep
1113:39 - in mind is this that your website should
1113:41 - contain at least two pages and I would
1113:44 - recommend these Pages can be home and
1113:46 - contact or if you want to spread them
1113:48 - out into multiple pages if you want to
1113:50 - have home as one page and then maybe
1113:51 - projects as another page or one page per
1113:53 - project or something like that you can
1113:55 - do that as well or if you want to
1113:57 - incorporate a Blog of some kind into
1113:59 - your website you can do that as well but
1114:01 - for the purpose of this project we
1114:03 - require your website to have two pages
1114:05 - all right uh not more you can have more
1114:08 - than that but at least make sure that
1114:09 - you have two not one will not
1114:11 - do second the homepage should have at
1114:15 - least four sections and by section we
1114:17 - mean so and that excludes the have bar
1114:20 - so this is one section you can see here
1114:21 - this there is this section called um
1114:24 - this is generally called the hero
1114:26 - section because well this is where you
1114:28 - kind of put a put a picture and just say
1114:30 - some say something with big text this is
1114:32 - just welcoming people then you have
1114:34 - maybe uh you can have maybe a work
1114:36 - experience section you can have maybe a
1114:38 - project section if you don't have a lot
1114:40 - of projects you can have maybe an
1114:41 - education section or something like that
1114:44 - uh and then finally or you can just talk
1114:46 - about your career and finally maybe you
1114:47 - can have a footer you can have maybe
1114:49 - just like uh a a small note about
1114:52 - yourself maybe just sharing your uh
1114:55 - basic your your life Journey so far or
1114:57 - some just something very basic that
1114:59 - would
1114:59 - be informative for a potential employer
1115:03 - so when you go out later down in the
1115:05 - boot camp and you go on and apply for a
1115:07 - fullstack developer role and you share
1115:09 - the link to your website so keep in mind
1115:11 - that what do you want people to see when
1115:13 - they click on the website link in your
1115:15 - resume now what is it that you want to
1115:17 - say to them right you want to present
1115:19 - you you want to tell your story very
1115:20 - briefly just like you do on a LinkedIn
1115:23 - profile for instance and you want to
1115:24 - present some interesting work and you
1115:26 - want to showcase that you have what it
1115:28 - takes to build good goodlooking
1115:30 - responsive websites okay then the
1115:33 - website should contain at least one form
1115:36 - and I would recommend this could be a
1115:38 - contact form so you can maybe if you
1115:40 - have a contact page on the contact page
1115:42 - you can have a contact form or you can
1115:44 - have a if you if you don't have a
1115:46 - contact page you have a different page
1115:47 - for something else then you can maybe
1115:49 - just create a form for on the homepage
1115:51 - itself but make sure that it it has at
1115:53 - least one form with maybe at least three
1115:55 - or four Fields typically they would be
1115:57 - email name uh your your message or
1116:00 - something like that and uh I would
1116:03 - recommend that as you browse a few of
1116:05 - these examples and we have included
1116:07 - several examples here start by first
1116:10 - creating an a wireframe because that is
1116:12 - what we have been doing so far right so
1116:13 - follow that procedure of creating a
1116:15 - wireframe even if you've picked a design
1116:17 - because you're not going to implement a
1116:18 - design EX exactly right you are going to
1116:20 - change the design or you're going to
1116:22 - pick the content that is going to make
1116:24 - more sense for you for your website so
1116:28 - start by uh just after having selected
1116:31 - some design or after having just figured
1116:34 - out what you want to show start by first
1116:35 - creating a wireframe so that you can
1116:37 - figure out what content you want to put
1116:38 - on the page right so for instance is if
1116:41 - I were creating my personal we my
1116:44 - personal website I would maybe let's see
1116:47 - so let's say I were creating Akash that
1116:49 - is my that would be I would probably get
1116:52 - that domain and that is my personal
1116:54 - website and here what would I like to
1116:56 - put so well I would like to definitely
1117:00 - have a nav bar at the top and in the nav
1117:02 - bar I would want to mention my name I
1117:05 - would want to mention uh maybe like the
1117:08 - home link and maybe let's see I would
1117:12 - like to mention a contact page link
1117:14 - something like that right and then on
1117:17 - after the nav bar I would want to to
1117:19 - have maybe a quick hero section let me
1117:22 - just put in that information here and
1117:23 - then we'll draw the wireframe so a hero
1117:26 - section and in the hero section I will
1117:27 - probably have maybe a photo uh maybe a
1117:32 - heading like a big title ha am Akash or
1117:34 - something like that and maybe a subtitle
1117:37 - let me just call it title and subtitle
1117:40 - right something like that so that would
1117:42 - be the hero section then maybe I would
1117:44 - have an about section in the about
1117:46 - section I would uh create a short bio
1117:48 - something like hey I'm Akash I'm from
1117:50 - such I'm from India I live in Bangalore
1117:52 - I do this I do that I've done this in
1117:53 - the past Etc thanks for checking out my
1117:55 - website feel free to contact me right
1117:57 - something like that so uh that would be
1118:00 - good then I would probably want to
1118:03 - include maybe my uh projects because I
1118:06 - think that would be the most interesting
1118:07 - thing that I would want to showcase all
1118:09 - the interesting things that I've worked
1118:10 - on over the years so um I have a bunch
1118:14 - of uh like Android apps
1118:16 - websites uh courses ET Etc I would
1118:19 - mention those um then maybe I would want
1118:22 - to let's see I would want to maybe talk
1118:24 - a little bit about my um career right so
1118:29 - in this I would probably mention my
1118:31 - education and I would probably combine
1118:33 - education and work experience because
1118:35 - I've just had one job full-time job and
1118:38 - after that I've just worked as a
1118:39 - consultant and and so on so yeah
1118:41 - education work experience Etc uh so I
1118:44 - would do that then I would probably just
1118:48 - uh have a
1118:50 - and here I would put some Social Links I
1118:52 - don't have Social Links but I would
1118:54 - probably put like some external links so
1118:57 - like Jovian uh Jovian links Etc right
1119:00 - and maybe I might also have one section
1119:02 - here where I might highlight some of my
1119:05 - best uh work in terms of videos so like
1119:09 - uh add some YouTube
1119:12 - videos like that all right so that would
1119:15 - be what I would want to put so then what
1119:17 - I would do is I would try to create two
1119:18 - wire frames I would want try to create
1119:20 - one wireframe for mobile and one wire
1119:22 - one wireframe for desktop so I would
1119:25 - just put it like that maybe and I would
1119:28 - say okay this is my desktop wireframe
1119:31 - and this is my mobile
1119:33 - wireframe all right and then as you can
1119:35 - imagine I'm basically going to just put
1119:37 - a bunch of boxes here okay so this is
1119:39 - going to be my Navar and I can just fill
1119:41 - in some information into my Navar and
1119:43 - again you can do this on paper I'm just
1119:44 - showing this to you here on this tool
1119:47 - excal draw.com but you can do this on
1119:49 - paper absolutely fine so that would be
1119:51 - the nav bar and then I would have a hero
1119:53 - section here so I would kind of leave
1119:55 - some space for the hero section here is
1119:58 - where I would put the title something
1119:59 - like hi I'm
1120:01 - Akash like that
1120:04 - and often when I'm doing this I would
1120:07 - even just pre-draw so I would maybe just
1120:10 - do something like that that okay maybe
1120:11 - here I want to put like a uh a picture
1120:14 - of myself saying hi or something and
1120:17 - maybe have like a couple of lines
1120:19 - of introduction about myself here I
1120:22 - might want to again mention my name here
1120:24 - I want to say home contact something
1120:26 - like that then I have the about section
1120:29 - so that would be something like about me
1120:32 - and then I would have maybe a few few
1120:34 - lines of text about myself uh I could
1120:36 - also maybe put a picture on the side but
1120:38 - I think that's fine so then after the
1120:40 - about section I would probably then go
1120:43 - down and then uh create a project
1120:45 - section and that's where it's a good
1120:46 - opportunity to use some card maybe so
1120:49 - let's
1120:50 - see projects and I would probably just
1120:53 - put a bunch of cards here uh like that
1120:57 - maybe three cards or so and then I would
1120:59 - maybe just put a button saying view more
1121:01 - and maybe there could be a separate
1121:02 - project page that goes in there and uh
1121:05 - yeah feel free to get as detailed or as
1121:07 - rough as you need but uh the idea is you
1121:09 - want to lay out all the content that you
1121:11 - want to add here so so that when you are
1121:14 - actually implementing you don't really
1121:15 - have to think about what content do I
1121:17 - want to put here right um then okay we
1121:19 - have videos so I would probably put in
1121:21 - some videos here so let's see
1121:24 - videos again I would probably just embed
1121:27 - a couple of YouTube videos here like
1121:29 - that and maybe have a line describing
1121:31 - what projects what what videos I've done
1121:34 - uh and so on and then I would adapt it
1121:37 - to the mobile view so in the mobile view
1121:39 - of course you would have a slightly
1121:42 - different structure maybe you would not
1121:43 - you would need like a menu over here
1121:45 - instead of an actual buttons so I would
1121:49 - probably have that menu button over here
1121:51 - I would probably take
1121:53 - this hello uh you might also want to
1121:55 - take a picture uh a new picture for your
1121:58 - personal website it it would be nice but
1122:01 - yeah I would probably take this like
1122:02 - hello thing and I'd probably just put
1122:05 - that here and then the hero text would
1122:07 - probably become centered and that would
1122:09 - come here like that and then I would
1122:12 - have the About Me section I think this
1122:13 - would remain as is so you get the idea
1122:16 - that you want to have one breakpoint for
1122:19 - mobile you want to have one breakpoint
1122:22 - uh for tablet and one for desktop but if
1122:24 - you want you can just do mobile and
1122:26 - desktop wireframing and you you will
1122:29 - kind of know that okay this I'm going to
1122:32 - get from this so it's so the Styles I'm
1122:34 - going to get from here but the content
1122:36 - and what I'm going to write here all of
1122:38 - that you can actually put into your
1122:39 - wireframe I'm not putting it right now
1122:41 - because it'll take a while but you can
1122:42 - actually put all this into your
1122:43 - wireframe or maybe into a Google doc or
1122:45 - something uh but the idea is before you
1122:47 - even start writing your first line of
1122:50 - HTML you are in a position where you
1122:53 - already know what's the what the page is
1122:55 - going to look like
1122:57 - so the biggest mistake that you're going
1122:59 - to make and I'll repeat this again is
1123:00 - that you start coding right away and
1123:02 - then you're thinking okay what should I
1123:03 - put in this section and then you as
1123:06 - you're trying to put something into the
1123:07 - section you realize okay now the design
1123:09 - is no longer working or now uh I'm not
1123:11 - able to make it responsive so separate
1123:13 - the design content and implementation
1123:17 - okay um yeah so then once you've created
1123:21 - a wireframe then uh create you and once
1123:23 - you picked a design for inspiration then
1123:26 - create it section by section and the
1123:29 - website must be responsive and it should
1123:30 - be easily viewable on mobile on tablet
1123:33 - and on desktop okay so make sure to test
1123:36 - it on real devices and make sure of
1123:38 - course you can deploy it to verell you
1123:40 - can open it up you can send yourself a
1123:41 - link and test
1123:42 - it now you can use bootstrap or you can
1123:45 - use any other CSS framework you want to
1123:47 - build the website if you want you can do
1123:49 - it without bootstrap feel free this is
1123:51 - an open-ended project we not forcing you
1123:53 - to use bootstrap you don't have to but
1123:55 - if you want you can uh use bootstrap
1123:57 - that's fine or you want to use some
1123:59 - other CSS framework that's perfectly
1124:01 - fine too now for the form that you
1124:03 - create you can either use form.com to
1124:06 - collect the responses using uh and we've
1124:09 - covered this in one of the lessons
1124:11 - probably I I believe the second lesson
1124:13 - or you can set up an Express server uh
1124:16 - an Express web server to collect form
1124:18 - resp responses so again this is covered
1124:20 - in the previous lesson so in the lesson
1124:24 - Express web application framework you
1124:26 - can see here that we have a section on
1124:30 - handling form responses where we
1124:32 - basically used uh we created an app.
1124:35 - poost link so you can do that as well uh
1124:38 - both of these can be deployed to versel
1124:40 - equally easily so that's fine you don't
1124:42 - have to use express for this you can do
1124:44 - a simple HTML and CSS if you want that's
1124:46 - perfectly fine but uh yeah as a
1124:49 - challenge I would encourage you to maybe
1124:50 - try try out using Express that will also
1124:53 - help you practice templates and other
1124:54 - things then use consistent and
1124:58 - aesthetically pleasing colors fonts and
1125:01 - Design Elements so one of the things
1125:03 - even though we are not focusing on web
1125:05 - design too much in this course one of
1125:06 - the things we've tried to do is make
1125:07 - sure that
1125:09 - our websites that we build don't look
1125:12 - ugly uh which means that they don't have
1125:14 - a very poor or not poor exactly but they
1125:17 - do not have a very well they don't have
1125:20 - a thoughtless or or or a random choice
1125:23 - of colors right the default colors that
1125:25 - CSS gives you are not great ideally want
1125:28 - to use a color palette and that's where
1125:30 - we have looked at things like Tailwind
1125:33 - uh Tailwind colors it's a good place for
1125:35 - you to pick out yeah tailin color.com so
1125:38 - you want to use a color palette you want
1125:39 - to have one primary color and you want
1125:41 - to use different shades of that primary
1125:43 - color if blue is not your thing pick
1125:45 - green or pick Rose or pick red but
1125:48 - definitely stick to a color palette and
1125:51 - similarly fonts as well you want to be
1125:53 - consistent with fonts feel free to
1125:55 - experiment here feel free to try
1125:57 - different fonts but ideally stick to one
1125:59 - font for headings and one font for body
1126:02 - now that doesn't mean that it has to be
1126:03 - inter and Roboto like if I go back here
1126:06 - on the figma community you can see that
1126:09 - here there's an interesting font that is
1126:11 - used for the uh for the header here and
1126:15 - that's what's called a what's called a
1126:18 - set font and in fact it's not just ter
1126:20 - font it has slight slight calligraphic
1126:22 - elements as well whereas there is a
1126:24 - different set of different font that is
1126:27 - actually used for the body text all
1126:29 - right and then there's this uppercase
1126:31 - font that is used here as well so feel
1126:33 - free to experiment you can use two maybe
1126:35 - three fonts but make sure that it stays
1126:38 - consistent across the page it shouldn't
1126:40 - be the case where you use a certain font
1126:43 - in the nav bar then you use a certain
1126:45 - font in the header or the hero section
1126:47 - then you use certain font in the about
1126:49 - section please don't do that please uh
1126:51 - keep it consistent I hope you've picked
1126:53 - that up and similarly with design
1126:55 - elements as well like if you want to
1126:57 - spray in Design Elements here and there
1126:58 - for example here there are these dots
1127:00 - that are there um you'll have to figure
1127:02 - out how to actually add these Design
1127:04 - Elements but for all these Design
1127:05 - Elements keep them consistent like this
1127:07 - Arrow you see here that arrow is there
1127:09 - everywhere or you see this highlight
1127:11 - here that highlight is there everywhere
1127:13 - as well so um yeah make sure that you
1127:16 - are staying consistent in all of of
1127:18 - these in terms of the design that is the
1127:21 - key even if it is a very simple black
1127:23 - and white kind of page with with maybe
1127:25 - just one color here and there
1127:26 - consistency is key so make sure of that
1127:30 - now you need not replicate a design
1127:32 - exactly just try to make your site look
1127:34 - good just try to make it look consistent
1127:36 - just try to make it look well spaced out
1127:38 - and finally your website should be
1127:40 - deployed to worel and again there are no
1127:42 - instructions here by this time you
1127:43 - should be familiar with the deployment
1127:45 - process so you have to create a GitHub
1127:47 - repository keep it open source keep it
1127:49 - public and um then you deploy it to
1127:52 - verel and optionally if you want you can
1127:54 - also connect a custom domain to it so
1127:56 - you can go ahead and actually on ver.com
1127:59 - if you go into domain settings I'll let
1128:01 - you figure it out but you go into domain
1128:02 - settings and you can add a custom domain
1128:03 - so you can purchase a domain I think
1128:05 - some cheap domains are uh let's see so I
1128:10 - I believe like do XYZ domains are very
1128:13 - cheap so let me if I let me just search
1128:15 - for Akash
1128:17 - XYZ um
1128:19 - I think that's
1128:21 - about 164 rupees that's about less than
1128:25 - $2 a year right so $2 a year is not that
1128:29 - bad but uh so you can buy it for a buy
1128:31 - it for a year if you want but this is
1128:32 - not a compulsory part of the um this not
1128:37 - a compulsory part of the project even if
1128:39 - it's deployed to verel that's perfectly
1128:41 - fine even if it's Akash doval doapp
1128:44 - that's completely okay no problem there
1128:46 - now uh one thing I just want to suggest
1128:48 - is make sure that know as you copy over
1128:50 - things from different sites you might
1128:52 - find that there is some content there
1128:54 - and you might just put that content
1128:55 - directly uh make sure that all the
1128:57 - information on the website is true and
1129:00 - accurate that is key because we want you
1129:03 - to be able to actually use this website
1129:05 - this is not just a project that you're
1129:06 - creating we want this to be a website
1129:09 - that you can use that you can update
1129:10 - over time as you work on the through the
1129:14 - rest of the boot camp and you should be
1129:16 - able to link it from your resume right
1129:18 - so you want it to be informative for
1129:21 - your potential employer but at the same
1129:23 - time you also want it to demonstrate
1129:25 - your skills so finding that balance is
1129:27 - the key here again it's more open-ended
1129:30 - I I'm we do not intentionally don't want
1129:32 - to give you like a set pattern that you
1129:35 - can follow here we want you to encounter
1129:37 - these challenges we want you to uh like
1129:39 - look into these constraints and figure
1129:40 - out what is the right balance for you
1129:42 - okay and for the project is specifically
1129:45 - I would highly recommend scheduling at
1129:48 - least one one-on-one call maybe two so
1129:51 - once once you once you've created a
1129:52 - wireframe once you know what your
1129:54 - website is going to contain and once you
1129:57 - maybe pick the design as a reference
1129:59 - maybe schedule a one-on-one call just to
1130:01 - have a chat just to kind of go over the
1130:03 - content itself right and then the second
1130:06 - thing that you should do after that is
1130:08 - once you have implemented the website
1130:10 - and made it responsive maybe you can get
1130:12 - one get on one one-on-one call with one
1130:15 - of us again to get inputs on on what
1130:19 - further improvements you can make to
1130:20 - your website okay so those are the two
1130:23 - things that I would uh that I would
1130:26 - suggest you should
1130:28 - do okay so here are some examples for
1130:31 - inspiration let's go over some of these
1130:33 - examples very quickly um you can search
1130:36 - for more on dribble or the figma
1130:38 - community just search for personal
1130:40 - website and you'll find hundreds of
1130:42 - examples okay so let's see there is this
1130:45 - one this one is yeah this one is one
1130:48 - that we already looked at but let's take
1130:50 - a closer look at this so here okay it
1130:53 - says hi I'm San I'm a web and app
1130:55 - designer I designed beautiful websites
1130:58 - and of course you can imagine putting a
1130:59 - picture here there's a nice uh nav bar
1131:03 - here at the top then latest work so is
1131:05 - put like you can refashion this as an
1131:07 - about section of course you can just put
1131:10 - um uh about me and you can just write a
1131:13 - few things here uh and then again okay
1131:15 - what I do okay so this is more like the
1131:17 - about section want to work so there's
1131:19 - not a lot here there's like three
1131:20 - sections maybe you might want to add
1131:22 - another section here or maybe just reuse
1131:24 - one of these again this is not uh it's
1131:27 - not like something that you can use
1131:28 - directly you might have to make slight
1131:30 - changes to it here is one this is
1131:32 - something that we uh used for assignment
1131:34 - one feel free to use it if you like it I
1131:37 - would not suggest using this because you
1131:39 - will not be learning enough in the
1131:40 - process but this is a good template as
1131:43 - well so you can definitely use this for
1131:46 - inspiration in terms of how to structure
1131:48 - your website if you don't end up using
1131:50 - this
1131:51 - exact um if you don't end up using this
1131:53 - exact template
1131:55 - itself okay let's take a look at this
1131:59 - then yeah this one also looks pretty
1132:01 - interesting it has some interesting
1132:02 - fonts as well so again let's
1132:13 - see yeah there it is so now you can put
1132:16 - a logo here or you can just put your
1132:17 - name name here and here the napar here
1132:19 - is at the in the in the center and then
1132:21 - there's a contact button um then okay
1132:24 - hello I'm zeror and and then there's
1132:26 - some information there's an email and CV
1132:28 - download button okay there are a bunch
1132:30 - of logos of uh his favorite tools I
1132:33 - think that is a good thing you can put
1132:34 - in four plus years of experience and
1132:37 - here okay there is some information here
1132:39 - there's a Code this could also be an
1132:40 - about me and let's connect yeah so four
1132:44 - sections and of course you may have to
1132:47 - think about what content you're going to
1132:49 - put here but again a good one let's see
1132:52 - what's up here yeah Stefan William uiux
1132:55 - designer again there's a bunch of uh
1132:58 - interesting stuff going on here so let's
1133:00 - see final design there are four sections
1133:03 - so there's of course the hero section um
1133:05 - it has this nice thing on the side
1133:07 - that's also interesting then um yeah
1133:10 - these are projects so maybe you can put
1133:12 - some projects here and you can link to
1133:14 - them as you work through the boot camp
1133:16 - um you can maybe link to some some of
1133:18 - your GitHub repositories here then okay
1133:21 - these are also like projects so you
1133:23 - could use maybe this one as about this
1133:25 - one as projects or something and then
1133:26 - this one just has a code or something
1133:28 - you want to convey to the person seeing
1133:30 - it and then this is like the footer so
1133:32 - this is nice and then let's see a couple
1133:38 - more yeah this one is very detailed you
1133:40 - don't necessarily have to use uh all of
1133:43 - these sections but again use it more for
1133:47 - inspiration
1133:48 - so you can see how it goes I think this
1133:50 - is a great example of how it goes from
1133:55 - um yeah how it goes from like a basic
1133:57 - design setup here to something that is
1134:00 - more interesting here with a hero
1134:02 - section and some articles and some
1134:04 - projects and things like that okay so
1134:07 - great um if you want to add a Blog feel
1134:09 - free to add a Blog uh into your website
1134:11 - and blog would simply be a couple of
1134:13 - pages for now I like this one this one
1134:15 - is really simple
1134:18 - let's see yeah so this one doesn't have
1134:20 - a lot of images this is basically this
1134:23 - hello section over here then this is
1134:25 - what I do where to find my work about me
1134:28 - and schedule of consult this could
1134:29 - probably go on a second page and that's
1134:32 - it there's this bottom over here all
1134:34 - right um yeah a couple of real websites
1134:37 - I want to point out so one you can check
1134:39 - out the website for Ashish Ashish a
1134:42 - senior software engineer Jovian again
1134:44 - this is a very different style and this
1134:45 - is a sort of a very minimal approach
1134:47 - here but I think it covers everything uh
1134:50 - it it has a it's very text Heavy it's
1134:52 - sort of more structured like a resume
1134:54 - but it's great it does the job and for a
1134:56 - developer it actually might be a good
1134:58 - thing the font used here is a monospace
1135:00 - font so that's again an interesting
1135:02 - choice of font um but again for a
1135:04 - programmer that is something that might
1135:06 - make sense and then there's a link to a
1135:08 - Blog here and then so again these these
1135:10 - open into different uh other websites so
1135:14 - that's fine there's a project section
1135:15 - there's an achievements yeah so so this
1135:17 - is more structured like a CV and that's
1135:19 - perfectly fine it's your personal
1135:21 - website you give it your personality uh
1135:24 - just as long as you are satisfying the
1135:27 - requirements that we have laid out here
1135:29 - that is perfectly fine here's another
1135:32 - personal website you can check out um so
1135:35 - this is akansha she is or was a graduate
1135:40 - student pursuing Masters in uh data
1135:42 - science so here she has a homepage where
1135:44 - she has a picture she has this about
1135:47 - section
1135:48 - and she has a bunch of links and then
1135:50 - she has a project section where she has
1135:52 - like a bunch of cards uh showing her
1135:54 - projects right and this is great because
1135:57 - it um it it simply shows you that okay
1136:01 - there you go to this site you learn
1136:03 - enough about this person and you can go
1136:05 - into the project section and then you
1136:06 - can check out okay this person has done
1136:07 - a lot of interesting work and I probably
1136:09 - want to like as a potential employer I
1136:12 - probably want to talk to this person
1136:14 - then um here's another one another like
1136:17 - a lot of people take a more text Heavy
1136:19 - approach and that's perfectly fine again
1136:21 - I want to stress that this is your
1136:22 - website so this is Andre karpati he's a
1136:24 - researcher at open aai um so before that
1136:27 - he was working at Tesla so he has this
1136:29 - simple website where he has the timeline
1136:31 - of his work and after that he has some
1136:33 - featured talks or um that he has given
1136:36 - over the years and then a little a
1136:38 - section about teaching a section about
1136:40 - writing and in this case yeah the the
1136:42 - blog actually opens on a different s and
1136:44 - that's perfectly fine a bunch of pet
1136:47 - projects and Publications Etc right so
1136:51 - again great it's all and then a bunch of
1136:53 - Social Links here as well so perfectly
1136:56 - fine uh this works too so I want to say
1136:58 - that don't limit yourself to the kind of
1137:01 - websites that you see on figma or on
1137:03 - dribble U go feel free to go a little um
1137:08 - wider in terms of your search feel free
1137:10 - to just look at personal websites of
1137:13 - people uh you generally tend to follow
1137:15 - you can generally find them on the
1137:16 - Twitter you can you can find them on
1137:18 - their uh on their LinkedIn project or
1137:21 - elsewhere one other good source for a
1137:23 - bunch of these uh sites is just going on
1137:26 - YouTube and searching personal website
1137:28 - HTML CSS and you'll find here okay this
1137:30 - looks interesting that looks interesting
1137:33 - that looks these three look somewhat
1137:35 - similar I would say but still uh this
1137:37 - looks pretty interesting this one uh
1137:40 - this one over here is also good um yeah
1137:43 - this is also interesting this has got
1137:44 - some this one looks pretty
1137:48 - slick I it's got that whole cyber Punk
1137:50 - theme going on and uh it's also a
1137:52 - tutorial so you can actually probably
1137:54 - even follow along with this and again
1137:56 - it's fine if you're uh referring to a
1137:59 - tutorial a little bit so let's take a
1138:01 - look at this this one's got got a few
1138:02 - animations as well so let me just play
1138:09 - this yeah so this is what this website
1138:12 - looks like at the end of all of this
1138:14 - development I believe this is
1138:15 - implemented in react but it doesn't have
1138:17 - to be
1138:18 - so it's got a bunch of animations it
1138:20 - it's got a bunch of colors over here
1138:23 - it's got this nice bottom sticky Bottom
1138:25 - bar um let's
1138:27 - just watch the
1138:29 - entire demo over here it's got a
1138:32 - portfolio link it's got a bunch of
1138:33 - Social Links it's got this nice image
1138:36 - which is cut out in a random shape over
1138:38 - here got this nice about section there's
1138:41 - some uh animation going on here as well
1138:45 - there's the animation on the buttons too
1138:49 - then there's a more detailed section
1138:51 - what I do again this could be projects
1138:54 - as well
1138:55 - [Music]
1139:00 - possibly let's keep
1139:04 - going and yeah these are like some
1139:06 - latest projects
1139:08 - so that and then probably there's at the
1139:11 - end I believe there is a contact form
1139:13 - somewhere yeah so again you don't have
1139:16 - to add any animations but if you want to
1139:18 - you can and um there are often you can
1139:20 - use a bunch of like CSS or JavaScript
1139:23 - helper libraries to implement animations
1139:25 - bootstrap itself also allows you to
1139:26 - create some animations the reason we
1139:28 - don't cover animation a beginner course
1139:30 - is because most websites will not
1139:33 - require any animation or you'll end up
1139:35 - just using some prepackaged Library uh
1139:38 - but if you want to add animations please
1139:39 - feel free uh we're not stopping you so
1139:41 - one tip I want to give you very
1139:43 - important tip is that you can go beyond
1139:45 - the scope of work as uh that is
1139:46 - described above you don't have to limit
1139:48 - yourself to this however make sure to
1139:51 - First Implement everything that we've
1139:54 - mentioned above so first do a first pass
1139:56 - and Implement just the bare minimum just
1139:58 - Implement everything that we've done
1140:00 - before going too heavy on let's say
1140:01 - creating five pages and all that so
1140:03 - first create a basic version that
1140:05 - satisfies the evaluation criteria make a
1140:07 - submission here and only then continue
1140:10 - building on top of it very important you
1140:12 - have to do this iteratively because if
1140:13 - you keep expanding the scope of your
1140:16 - website you'll be stuck on the first
1140:18 - page or the first section forever and
1140:20 - you will never actually and and you'll
1140:21 - be trying to animate the first section
1140:24 - the Hero part of it and all that and
1140:25 - you'll be stuck on that for days right
1140:27 - so do the basic version make a
1140:29 - submission we'll give you feedback as
1140:30 - well um and then continue adding
1140:33 - whatever else you want to add okay we
1140:35 - started out by looking at HTML and CSS
1140:38 - Basics um so here we just understood
1140:42 - HTML CSS the very basic foundations of
1140:45 - uh a web velopment so we wanted to
1140:48 - create our first web page and creating a
1140:50 - first web page what we really wanted to
1140:52 - do was we wanted to create a jovian jobs
1140:55 - website which we kept building and and
1140:57 - improving over the course of uh the
1140:59 - several lessons and we just wanted to
1141:01 - have a Navar a header section displaying
1141:03 - a picture a list of job openings and a
1141:05 - footer at the bottom uh and that for
1141:07 - just for that what we did was we uh
1141:09 - created a folder on our desktop we
1141:12 - opened up visual studio code we added
1141:14 - just some HTML code to it that showed us
1141:16 - our first web page then we understood
1141:18 - how tags work then we uh created some
1141:22 - important tags like HTML head body title
1141:25 - Etc then uh we added some div tags with
1141:28 - some content um then we had created a
1141:31 - wireframe so we decided that okay we
1141:33 - need to maybe first create a wireframe
1141:34 - like this so this is where it all
1141:36 - started uh okay we wanted to have a
1141:39 - Navar we wanted to have this header
1141:40 - image we want to have an about section
1141:42 - job opportunities and a footer then we
1141:45 - added some content uh using HTML so
1141:48 - again we added a bunch of headings like
1141:50 - this then we added some text and
1141:52 - paragraphs so then start things started
1141:55 - looking a little better of course it's
1141:56 - still basic content then we added some
1141:58 - lists so we created a list for Let's see
1142:02 - we created a list here an ordered list
1142:04 - and an unordered list here for the
1142:06 - footer then we added some links so after
1142:09 - adding some links this is what our page
1142:11 - looked like then we added some images so
1142:13 - we added an image here at the top and
1142:14 - image here
1142:15 - below and and uh this is what a page
1142:18 - looked like without any CSS then we went
1142:20 - ahead and added some CSS so we started
1142:22 - centering things we started adding some
1142:24 - image Styles so we learned how CSS
1142:26 - declarations work we have some selectors
1142:28 - and then we have a property and a value
1142:31 - and we can put it inside the style tag
1142:32 - we can put it in a CSS file or we can
1142:34 - use the style uh attribute then uh we
1142:38 - looked at the different ways to select a
1142:40 - tag and ID a class and we understood the
1142:43 - CSS Box model where we have some content
1142:45 - padding border mark
1142:47 - and then we implemented the wireframe so
1142:49 - we started by adding some basic Styles
1142:51 - so just adding styles to the body then
1142:53 - adding the nav bar uh with the Jovian
1142:56 - logo then adding the banner image the
1142:58 - about section the jobs the footer and
1143:00 - this is ultimately what our first web
1143:02 - page looked like right so once we did
1143:05 - all of that this is what our first web
1143:06 - page looked like and then we deployed it
1143:09 - to the cloud using this platform called
1143:11 - static. apppp not something that you
1143:13 - would do in production but it works for
1143:15 - our first web page and that was was that
1143:17 - was our first web page and that was not
1143:19 - too bad for our first web page uh but
1143:21 - this is something that we then kept
1143:23 - incor improving on over the next several
1143:27 - lessons so the second lesson was
1143:29 - Advanced HTML and CSS and this time we
1143:32 - just wanted to iteratively improve the
1143:33 - existing web page by adding and
1143:35 - modifying sections we want to learn how
1143:37 - to work with tables how to add forms how
1143:39 - to how to work with colors in CSS how to
1143:43 - um save how to use meta tags all of that
1143:47 - so again we uh basically just and we
1143:50 - learned about the iterative method and
1143:52 - this is something that you should try to
1143:53 - apply to your own personal website
1143:54 - development as well try to get the first
1143:56 - version out in one day and maybe then
1143:59 - take the second version out everything
1144:00 - is something that should be deployed and
1144:02 - that is why we may we also focused on
1144:03 - deployment from the beginning your
1144:05 - website should be live from day one and
1144:07 - you should just keep adding more
1144:09 - information to it instead of saying okay
1144:10 - I'm still working on it I'm still
1144:12 - working on it I'm still working on I'm
1144:13 - I'm going to take it live tomorrow or
1144:15 - next week or something like that don't
1144:16 - do that just take it live with whatever
1144:19 - minimal content you can and just keep
1144:20 - improving it so here's what we decided
1144:23 - that we're going to add this job
1144:24 - opportunities table and then we are
1144:26 - going to add a form here as well and uh
1144:29 - then we learn about tables in HTML and
1144:31 - how to create complex tables like this
1144:33 - using the table TR and TD tags we
1144:37 - learned about using um The Border
1144:39 - attribute to make sure and collapsing
1144:42 - the border so that it looks something
1144:43 - like that and then once we had the table
1144:47 - okay so that's a table Without Borders
1144:48 - and then we saw how to style HTML tables
1144:51 - so again we can add a bunch of borders
1144:53 - we can add a bunch of background colors
1144:55 - we can add a bunch of text Styles so
1144:57 - just with a few lines of CSS our table
1145:00 - looked a lot better and then we decided
1145:02 - that we want to merge some rows and
1145:04 - columns make things look a little nicer
1145:06 - so we uh learned about row span call
1145:08 - span and things like that and this is
1145:10 - what our table ultimately looked like
1145:13 - then we learned about text Styles in CSS
1145:15 - so every website every company has a
1145:17 - personality and part of that personality
1145:18 - is the fonts they use so to use external
1145:21 - fonts we use uh Google fonts and again I
1145:25 - encourage you to experiment with fonts
1145:27 - but just pick two or maximum of three
1145:30 - fonts one for maybe headings one for
1145:33 - subheadings or things like that and one
1145:34 - for the body text um and make sure that
1145:37 - those fonts pair well together and there
1145:39 - are a bunch of resources here that you
1145:41 - can check out for finding good font
1145:43 - fairings we at Jovin we use inter and
1145:46 - Roboto as a heading and body uh probably
1145:49 - a slightly boring choice but it does the
1145:50 - job um maybe at some point we'll update
1145:53 - that but there are a bunch of pretty
1145:54 - interesting pairings that you can check
1145:56 - out here okay so part of building your
1145:58 - personal website is going back and
1146:00 - reviewing all the resources that we've
1146:02 - shared with you and figuring out
1146:04 - something that is um that interests you
1146:08 - but at the same time that also looks
1146:09 - good okay um so yeah so then that we
1146:12 - learned about a bunch of font and text
1146:14 - related properties we learned about
1146:16 - understanding size in CSS so there are
1146:18 - absolute sizes pixels are the most
1146:19 - common these are not really used and the
1146:21 - relative sizes again percentages and
1146:24 - Rems are the most common others are not
1146:26 - really used too commonly but in any case
1146:29 - you have a bunch of these sizes that you
1146:31 - can use as
1146:33 - well I really want to stress again that
1146:35 - feel free to go back and refer to
1146:37 - specific sections we've put we've put in
1146:39 - a lot into these lectures like these are
1146:41 - things that you'll keep probably
1146:43 - referring back to for months probably
1146:45 - even years as you going through uh the
1146:47 - rest of the boot camp and also your web
1146:49 - development uh uh job all right U okay
1146:53 - then we have yeah text sizes and Style
1146:56 - Guidelines again we have a bunch of
1146:57 - things over here then we talked about
1146:59 - colors in CSS so there are a bunch of
1147:01 - inbuilt colors they are not very good
1147:03 - for actual web design so I would not
1147:06 - recommend using these inbuilt colors and
1147:08 - in general you want to avoid something
1147:09 - that is too bright or too dark or too
1147:12 - grayish it looks very 90s um you want to
1147:15 - use something that something that has
1147:18 - like these are called pastels or
1147:21 - something that is slightly dull but at
1147:23 - the same time also has a also has an
1147:27 - interesting shade to it right so these
1147:29 - ones the all of these slate green SE
1147:31 - green all of these are interesting um
1147:34 - but really what you should be doing is
1147:36 - using a color palette using some
1147:38 - platform like Tailwind colors or
1147:40 - something so then we have RGB colors so
1147:42 - you can of course specify inbu color
1147:44 - names you can use RGB background RGB
1147:47 - values you can use hexad decimal which
1147:49 - is basically another another short way
1147:51 - of writing RGB where the first two
1147:53 - characters represent red the next two
1147:55 - characters represent green and blue and
1147:57 - it goes from 0 0 to FF that's why it's
1147:59 - called hexadecimal so 0 to 9 and a to F
1148:03 - all of these are used to create numbers
1148:05 - essentially you can learn more about the
1148:07 - hexadecimal number system if you need
1148:09 - you can also add transparency to your
1148:11 - colors whether you're using rgba or
1148:13 - you're using
1148:14 - hexadecimal and colors can be set for
1148:16 - the text colors can be set for the
1148:19 - background for the border for the Box
1148:21 - Shadow and and much more by the way
1148:23 - backgrounds can also be images so that's
1148:25 - also something that you can check out
1148:26 - like this one here has a background
1148:27 - image not a great choice but you can see
1148:30 - the difference between a good consistent
1148:32 - color scheme and fonts and a good
1148:34 - contrast between the text and the
1148:36 - background
1148:37 - versus a good contrast versus bad um
1148:40 - definitely your personal website
1148:43 - shouldn't look like this so I just want
1148:46 - to stress here that it's very the reason
1148:49 - a lot of the old websites look like this
1148:51 - or poor poorly designed websites look
1148:53 - like this is because this is what your
1148:57 - website will naturally look like if
1148:59 - you're thinking on the Fly versus if you
1149:01 - have looked up a template if you have
1149:03 - decided a color palette if you've picked
1149:05 - good fonts colors you have Frozen all
1149:08 - these details before you're actually
1149:10 - coding it then your website is more
1149:12 - likely to look like this okay um so yeah
1149:15 - so just keep that in mind
1149:17 - then these are all some color text color
1149:19 - guidelines again not it's not fixed but
1149:22 - you can use these as a reference so
1149:25 - almost always you want to start out with
1149:27 - some standard reference something that
1149:29 - is some somebody has figured out is a
1149:32 - good set of selections and then make
1149:34 - slight tweaks to it to uh do what you
1149:37 - want it to do um so yeah once we apply
1149:39 - all these uh then we get back a pretty
1149:41 - good-looking site and then we have forms
1149:44 - as well so forms are created us using
1149:47 - the form tag and through the input tag
1149:49 - select tag text area tag and we also use
1149:51 - the label tag so every form has an
1149:53 - action and again this could be an
1149:55 - external website this could be maybe a
1149:57 - server endpoint you have implemented and
1149:59 - a method uh but you create divs and
1150:01 - inside the divs you create these labels
1150:03 - and you have a bunch of different types
1150:05 - of inputs text checkbox radio
1150:08 - dropdown text area password email Etc
1150:12 - and once you've put in a form then um
1150:15 - you can sty it you can give it a bunch
1150:17 - of different styles and this is what a
1150:19 - form might potentially look
1150:21 - like okay and then there's a action and
1150:24 - a method and a Target so in this case
1150:26 - well uh we used form bold because we
1150:28 - were not talking about servers early on
1150:30 - so you can just use any service that can
1150:32 - receive form responses form bold is a
1150:34 - good one useful one uh in case you don't
1150:36 - have the option or the time to set up a
1150:39 - proper server and we simply pass its
1150:41 - action method Etc and it can collect
1150:44 - whatever we needed to collect and then
1150:46 - we have uh HTML meta tags metatags
1150:49 - provide information about a web page to
1150:50 - search engines and browsers so when your
1150:52 - website is searched online and Google
1150:55 - finds it and shows it in a search result
1150:57 - that is when all these metat tags will
1150:59 - come into picture Okay so these are some
1151:01 - common meta tags and these are some
1151:03 - platform specific meta tags and then
1151:04 - there's a title and fav icon tag that
1151:06 - are used to change the browser title and
1151:08 - fav icon so that's again something that
1151:10 - you can um set up as well right so you
1151:13 - should you can literally just take this
1151:15 - set of metatag pasted into any website
1151:18 - that you're building I think one uh
1151:20 - requirement we should we will add in the
1151:22 - project is that it should have your
1151:24 - website should have proper meta tags um
1151:26 - so that it can be shared easily by with
1151:28 - other people as well and then Cloud
1151:30 - deployment again we were still talking
1151:31 - about uh static app here because we not
1151:34 - touched on git and GitHub so that was
1151:36 - lesson two and then you had an
1151:38 - assignment where you had to convert a
1151:40 - design mockup into a web page so you had
1151:44 - this design mockup and what you did was
1151:46 - you had to inspect it using figma you
1151:49 - had to set up a basic page structure and
1151:51 - styles this is the mockup over here you
1151:53 - had to set up the basic page structure
1151:55 - and styles then you have to implement
1151:57 - the web page section by section then you
1151:58 - have to deploy your web page to the
1151:59 - cloud and make a submission all right um
1152:03 - a few tips avoid copy pasting Styles
1152:06 - directly from figma so there's a
1152:08 - knowledge based article on this and
1152:10 - we've also picked up a bunch of common
1152:11 - mistakes and put them into this Google
1152:13 - drive folder so again use these go back
1152:16 - and refer to all of these for your
1152:18 - personal website as well your goal
1152:20 - should be to get a pass grade on your
1152:21 - first submission and for you to get a
1152:23 - pass grade on your first submission make
1152:25 - sure that you're not repeating the
1152:27 - mistakes that you or other people have
1152:28 - made okay um that was this first
1152:31 - assignment then we talked about Version
1152:33 - Control and Cloud deployment the proper
1152:36 - uh way to do web development and that is
1152:39 - where we talked about git and GitHub so
1152:42 - we started by just getting started with
1152:44 - GitHub we learned about what Version
1152:46 - Control is how it is useful we learned
1152:48 - about git uh where you basically you put
1152:51 - your code on a remote server and then
1152:52 - you can pull it into any computer or
1152:55 - maybe a cloud computer like GitHub code
1152:56 - spaces and you can make some changes and
1152:58 - then you can push it back and still have
1153:00 - all the older versions available and you
1153:03 - can also view it from the browser on
1153:05 - github.com and you can also collaborate
1153:07 - with other people right so again there's
1153:10 - a lot git itself is a huge thing that
1153:12 - for years people um keep learning or
1153:16 - just try to manage through uh just
1153:18 - running a few simple commands that's
1153:19 - what I do I just remember three or four
1153:21 - commands and use them all the time and
1153:23 - look things up whenever I require but
1153:25 - this is the basic structure of what git
1153:27 - gives you and GitHub gives you a bunch
1153:30 - of abilities on top of uh Git it is
1153:33 - basically a web- based platform that
1153:35 - also gives you some collaboration tools
1153:37 - uh it's where you can find open source
1153:38 - projects it has a wide community and it
1153:40 - has great integration with other tools
1153:42 - right and for a web developer that
1153:45 - GitHub profile is kind of like the
1153:47 - resume so we'll talk at some point about
1153:49 - actually creating your own GitHub readme
1153:52 - profile as well okay we'll cover that at
1153:55 - some
1153:55 - point so here yeah we talked about how
1153:58 - to create a project repository and then
1154:00 - you have these things called A readme
1154:01 - and A get ignore we talked about them as
1154:03 - well and a license as well especially if
1154:05 - you're building an open source project
1154:06 - and once the project repository is
1154:08 - created we talked about how you can open
1154:09 - it up using GitHub code spaces a
1154:11 - cloud-based development environment with
1154:14 - a free tier that allows you to write
1154:16 - test and debug code directly in your
1154:17 - browser quick to set up gives you a
1154:19 - consistent environment you don't have to
1154:21 - install anything lets you work from
1154:22 - anywhere and starting a code base is
1154:25 - really easy you just click the code
1154:27 - button and click create codes space and
1154:28 - that's how you can create a code space
1154:30 - and it gives you this Visual Studio code
1154:32 - interface in the browser which honestly
1154:34 - is good enough that's what I've been
1154:35 - using for a bunch of projects that I've
1154:37 - been working on and uh you don't even
1154:39 - need to install anything on your
1154:40 - computer and you can install extensions
1154:42 - within this vs code browser and they
1154:44 - will remain there the next time you try
1154:45 - to open it uh so we at Jovian have
1154:48 - almost completely shifted to GitHub code
1154:50 - spaces uh we still do use our local
1154:53 - machines because the free uh tier is not
1154:56 - sufficient for some of our work uh
1154:58 - that's why um yeah and then you can run
1155:02 - it using a live server so especially
1155:03 - when you're developing a simple HTML and
1155:05 - CSS web page you can just use a live
1155:07 - server to run things and then gith
1155:10 - updating a GitHub repository is fairly
1155:12 - straightforward it's a three-step
1155:13 - process uh but there are buttons to to
1155:16 - do it in one step but you just first add
1155:18 - files and Stage them and then you commit
1155:20 - them and then you push them right so
1155:22 - each of them has a certain purpose a
1155:23 - reason they were built um but what you
1155:26 - should just remember is that all these
1155:28 - stages are important for your code to
1155:30 - actually reach the GitHub Cloud
1155:32 - repository all right so make sure that
1155:34 - you are always going to add push and
1155:37 - then add commit and then push so add is
1155:39 - going to Stage your changes comp is
1155:40 - going to record a new version and push
1155:42 - is going to push it to GitHub and then
1155:44 - somebody else can pull it and there are
1155:46 - ways to just do this using visual studio
1155:48 - code so that you don't have to run
1155:50 - anything on your end then Cloud
1155:52 - deployment with verel was again a breeze
1155:55 - all you do is sign up on wor.com and you
1155:58 - connect your GitHub account then you
1156:00 - select the repository that you want to
1156:01 - deploy and you select the folder inside
1156:04 - which your actual code is present that U
1156:06 - that needs to be deployed and it's going
1156:08 - to deploy it for you and it's going to
1156:09 - look something like this so this was
1156:11 - actually the website that we deployed
1156:13 - and um yeah that still looks fine it's
1156:16 - going to be there so you're going to
1156:17 - have all these old versions of your
1156:19 - websites or for each repository versus
1156:21 - fre has a good huge uh basically an
1156:25 - unlimited free tier unless you start
1156:27 - hitting significant amounts of traffic
1156:30 - at which point it will make sense for
1156:31 - you to pay anyway and finally once again
1156:33 - we just cover T talked about meta tags
1156:36 - So Meta tags are pretty important
1156:37 - because you want to be able to share
1156:38 - your work with other people and when you
1156:40 - share it it's kind of the cover for your
1156:43 - book uh if the website is your if your
1156:45 - website is is the book then the meta
1156:47 - tags which is the meta title and image
1156:49 - are the cover and books are judged by
1156:51 - the cover so similarly websites are
1156:53 - judged by their meta tags all right and
1156:55 - then the we talked about the GitHub
1156:57 - collaboration workflow when multiple
1156:58 - people are working on a repository the
1157:02 - way you should work is create a branch
1157:05 - then you should create a make your
1157:06 - changes on the branch by making a bunch
1157:08 - of commits like that then you should
1157:09 - create a pull request where somebody
1157:11 - from your team can or even just you
1157:13 - yourself can review the changes and then
1157:15 - you can based on the comments you can
1157:17 - make uh you can update your branch and
1157:19 - keep pushing more changes and finally
1157:21 - you can just merge uh the merge your
1157:23 - branch to the main branch and just like
1157:26 - that your changes will then get deployed
1157:28 - automatically if you're using a
1157:29 - deployment platform like worell right so
1157:31 - whenever you're doing any new
1157:32 - development and this you should try to
1157:34 - apply to your website as well once
1157:36 - you've pushed out the first version then
1157:38 - for the second version make sure that
1157:40 - you create a branch and then you keep
1157:42 - pushing your changes into a branch and
1157:44 - uh keep updating a pull request and when
1157:46 - you've done enough work that you feel
1157:48 - it's ready to again go live then push it
1157:50 - back okay so try practice uh practice
1157:53 - using the GitHub workflow here the
1157:55 - GitHub flow for your work um it's also
1157:58 - again just good practice and it's
1158:01 - something that you can talk about when
1158:02 - you are um let's say when you're sitting
1158:05 - in an interview you can mention that
1158:06 - when I built my personal website I used
1158:09 - the GitHub flow so first I created a
1158:10 - simple page with just my picture and a
1158:13 - few lines about me and then I deployed
1158:15 - it to verell and then I created a new
1158:18 - branch and on that Branch I added a
1158:19 - project section I um created a pull
1158:22 - request I tested it I reviewed my own
1158:24 - code and only then I merged it back and
1158:26 - then I updated and I I did that three
1158:28 - four more times to add multiple things
1158:30 - to my website okay so try to do that try
1158:32 - to follow the GitHub flow for sure and
1158:34 - it'll help you then creating pull
1158:37 - requests well pull requests are again
1158:39 - there's a flow here then keeping your
1158:41 - branch up to date so sometimes the
1158:43 - master Branch or the main branch will go
1158:45 - forward so you'll have to pull those
1158:47 - changes back into your branch and all
1158:48 - that this makes more uh sense when you
1158:51 - are working in a team where actually
1158:53 - other people working in as well and you
1158:55 - might run into merge conflicts you might
1158:56 - have to fix them uh not something that
1158:59 - you have to know by heart or not
1159:01 - something that you will be doing on a
1159:03 - daily basis but you can always come back
1159:05 - whenever you want to review this topic
1159:06 - so there are a bunch of resources here
1159:08 - that you can check out okay regarding
1159:10 - merge conflicts and regarding uh
1159:12 - branching of course git can also be
1159:14 - installed locally so if you're up for a
1159:16 - not a challenge exactly but if you want
1159:18 - to put in the work to actually set up
1159:19 - get locally you can go ahead and do it I
1159:22 - wouldn't say that this is necessary
1159:24 - anymore because either your company will
1159:27 - be using something like GitHub Cod
1159:28 - spaces or they will give you a laptop
1159:31 - with with all of these things
1159:32 - pre-installed so I wouldn't worry too
1159:34 - much about
1159:35 - it okay but all the information is here
1159:37 - and you can always look it up whenever
1159:39 - you need to so feel free to come back to
1159:41 - all of this whenever you need to look
1159:43 - into it then we talked about responsive
1159:46 - design and flexbox so this is now we got
1159:49 - to a point where we want to make our
1159:51 - websites look good not just on our
1159:52 - desktop development screen but also on
1159:54 - mobile screens so this is where U we
1159:57 - wanted to create um so we saw that the
1160:00 - website that we had created doesn't
1160:02 - really look very good on mobile and we
1160:04 - wanted to create the webs we want to
1160:06 - make it more responsive and to do that
1160:09 - well first we duplicated the GitHub
1160:10 - repository that we had and then then we
1160:12 - deployed it once again opened it on
1160:14 - GitHub code spaces and we learned that
1160:16 - for responsive design we have to break
1160:18 - up our design into three or maybe at
1160:21 - least two but maybe three or four uh
1160:23 - different designs and at each break
1160:26 - point which is at each device width the
1160:28 - layout will change a little bit so here
1160:30 - you can see that at for small screens
1160:32 - the layout looks like this and then
1160:34 - suddenly at about 576 pixels the layout
1160:36 - is going to shift into this and then the
1160:38 - layout is going to shift into this at
1160:40 - 768 and at 992 it's going to shift into
1160:42 - something else right so this is a very
1160:44 - common pattern almost all websites
1160:46 - follow it any websites made in the last
1160:48 - 10 years will will follow it to enable
1160:50 - it though you need this meta tag this is
1160:52 - often something that is forgotten so
1160:53 - make sure you do that again a lot of
1160:55 - these instructions are not necessarily
1160:57 - given on the project page but you'll
1160:59 - have to go back and see how to make
1161:01 - these happen Okay so it's also a way for
1161:03 - you to review all the content you have
1161:05 - device mode on your browser using which
1161:07 - you can test the respons or the
1161:09 - responsive layout of a website and uh
1161:12 - you can a great way to just see how
1161:14 - other websites are achieved achieving
1161:15 - responsive design is to just open them
1161:17 - up on device mode and see what they do
1161:21 - now the way responsive design is
1161:22 - implemented is using CSS media queries
1161:24 - where you can provide at media you can
1161:26 - provide a media type and a condition and
1161:28 - when the condition is met for example if
1161:30 - you say Min WID 768 so if the condition
1161:32 - Min width of 768 is met so when the
1161:34 - condition holds true then these CSS
1161:36 - rules apply otherwise um the CSS rules
1161:39 - don't apply all right so here are some
1161:41 - examples minwidth and you can also do it
1161:43 - on orientation you can Al combine Min
1161:46 - width and Max width like that so that
1161:48 - way you can define specific rules for
1161:50 - different Windows of width however the
1161:53 - better way to do it so that's how you
1161:55 - set you can set break points but the
1161:57 - better way to do it is use a mobile
1161:58 - first approach which is first Rite all
1162:01 - your CSS queries or or your create your
1162:03 - design for mobile and then add maybe for
1162:06 - small or for tablets add a minwidth
1162:09 - breakpoint and add some additional CSS
1162:12 - rules that can go on top of that and
1162:14 - then for your tablets and laptops add
1162:16 - some more Rules by setting M with 768
1162:18 - and so on right so you want to ensure
1162:20 - that you don't have to repeat a lot of
1162:22 - the layout uh design uh and you want to
1162:25 - start building from mobile first so use
1162:27 - this for your personal website as well
1162:30 - uh use a mobile first approach so start
1162:32 - with the mobile design and then add
1162:34 - these break points or you can use
1162:35 - bootstrap to do it uh But whichever way
1162:38 - you choose to do it this is um how you
1162:40 - should achieve it then we also talked
1162:41 - about flexbox because as browsers resize
1162:45 - you cannot exactly know what size you
1162:47 - should build for so you should not you
1162:48 - should never hardcode your wids but to
1162:50 - keep your proportions constant you can
1162:53 - use CSS Flex box and again there's a
1162:56 - bunch of things in CSS Flex box so the
1162:58 - first thing is you have to uh set the
1163:00 - display property now of course the block
1163:02 - inline inline block are some of the
1163:04 - basic display properties but display
1163:06 - Flex enables Flex box and display none
1163:08 - hides the element all together so
1163:10 - flexbox has this concept of containers
1163:13 - and items so there's a flex container
1163:14 - and then there are a bunch of flex items
1163:17 - now as soon as you said display Flex
1163:20 - then the container um or the items are
1163:22 - laid out
1163:23 - along according to the rules of CSS
1163:25 - flexbox and then you can give a bunch of
1163:28 - properties to items as well so some are
1163:30 - container level properties some are item
1163:31 - level properties one is the flex
1163:33 - Direction which is where things flow
1163:35 - from left to right or right to left or
1163:37 - top to bottom or bottom to top so this
1163:39 - is done using row row reverse column
1163:41 - column reverse then you have wrapping so
1163:44 - again uh things by default just go out
1163:47 - but if you say no RP then they're going
1163:49 - to try and fit or compress um you can
1163:53 - say wrap down so they can wrap downwards
1163:55 - and you can say wrap reverse and they
1163:56 - can wrap upwards like that okay um again
1164:00 - these change based on the flex Direction
1164:02 - so you might have to just also uh play
1164:04 - around with it but in most cases you
1164:06 - just want to do the simplest thing some
1164:07 - of these more advanced uh options never
1164:11 - actually get used or they get used
1164:12 - simply when you're trying to achieve a
1164:14 - fair Advanced layout which doesn't
1164:16 - really come up very often so then you
1164:18 - have justify content so along the main
1164:21 - axis you want things to be at the start
1164:23 - at the center or at the end or maybe you
1164:24 - want to be spaced uh you want space
1164:27 - around them you want space between them
1164:28 - or you want even spacing or uh and of
1164:31 - course for Flex Direction column it's
1164:34 - going to be
1164:35 - different then you have align items and
1164:37 - that applies along the cross axis so
1164:39 - again if the flex direction is row do
1164:41 - you want things to be sticking to the
1164:43 - top sticking to the bottom be at the
1164:45 - Center or stretch to take up the entire
1164:46 - space or maybe align according to the
1164:48 - Baseline so that is something that you
1164:50 - can look at as well then you can change
1164:52 - the alignment at a child level as well
1164:54 - so let's say you have an alignment
1164:55 - setting at the parent level you can
1164:57 - actually modify that setting for a
1164:58 - particular child using the Align self
1165:01 - property and you also have something
1165:03 - called align content justify items I've
1165:05 - almost never used them so I wouldn't
1165:06 - worry about it you also have these
1165:08 - properties Flex grow Flex strength Flex
1165:10 - bases they have a certain meaning I
1165:14 - would really not bother about these too
1165:16 - much really the only property that I
1165:18 - often just use is the flex property
1165:20 - where I would just simply put flex one
1165:22 - to make something take up a bunch of
1165:25 - space all the available space okay so
1165:28 - that is that and using that we then
1165:30 - decide that we want to redesign it using
1165:32 - uh flexbox so we the first thing we do
1165:35 - is we create a couple of wireframes we
1165:37 - create one wireframe for desktop and we
1165:39 - create one wireframe from mobile so this
1165:41 - is what we want it to look like on
1165:42 - desktop and this is what we want it to
1165:44 - look like on mobile and we start with a
1165:47 - mobile first layout so we lay out a
1165:50 - bunch of Base Styles and we we have a
1165:53 - base font size we have a base body size
1165:55 - we have a base um font we have a base
1165:58 - size we have a base heading sizes we
1166:00 - have uh we have a bunch of Base Styles
1166:03 - and then uh for tablets we want to
1166:04 - slightly increase the body font size and
1166:06 - so on right so yeah so we then we create
1166:08 - that Navar uh like this so for the Navar
1166:11 - we used a slightly different logo then
1166:13 - we created the banner image we created
1166:15 - the about section and then we added we
1166:18 - started with a mobile first layout and
1166:20 - then we added a bunch of things here to
1166:23 - uh change the layout slightly on Mo on
1166:25 - tablet and on desktop then we have a
1166:27 - jobs list that was shown on mobile and
1166:29 - tablet and then we have a job table that
1166:31 - is shown on desktop
1166:34 - so yeah a job table that is shown on
1166:36 - desktop and then we have this
1166:38 - application form we made some changes
1166:40 - here but ultimately this is what it
1166:42 - looked like on mobile about Chi and
1166:43 - employment opportunity submit your
1166:45 - application etc etc uh looks good looks
1166:48 - readable uh could be better but looks
1166:50 - readable and even these are stacked
1166:52 - vertically and this is what it looks
1166:54 - like on tablet slightly different okay
1166:56 - slightly more spaced out but still using
1166:58 - the list and then this is what it looks
1167:01 - like on desktop here it's using a table
1167:03 - and here the three footer items are
1167:06 - shown vertically are shown horizontally
1167:08 - like they are on tablet okay so that's
1167:11 - our uh that was a lesson on responsive
1167:13 - design and CSS Flex box then we had an
1167:17 - assignment on mobile first responsive
1167:19 - design where you had this layout that
1167:22 - you had to
1167:24 - implement so this was the layout where
1167:27 - you had a mobile tablet and desktop
1167:29 - layout and you had to implement each one
1167:30 - of these like that and yeah I think
1167:34 - there's not much to be said here except
1167:35 - that you could use flexbox to do this
1167:37 - and you also learned about the CSS scal
1167:39 - property and these are the the process
1167:42 - you first set up prepare for develop and
1167:45 - deployment you set up base Styles and
1167:46 - Blake points you implement it section by
1167:48 - section and then you deploy and make a
1167:49 - submission okay then we learned about
1167:52 - the bootstrap CSS framework which is uh
1167:54 - which makes life really easy when you're
1167:56 - working with the uh when you're working
1167:59 - on a complex project so again we wanted
1168:01 - to rebuild the Joan careers website add
1168:03 - some links in the navigation bar show a
1168:05 - collapsible menu on mobile devices show
1168:08 - a list of jobs using cards on mobile and
1168:10 - table on desktop and make the color
1168:11 - scheme typography and layout consistent
1168:14 - and aesthetically pleasing and for that
1168:16 - we wanted to use the bootstrap uh so
1168:19 - there's a basic project setup of course
1168:21 - but we wanted to rebuild the project
1168:22 - using bootstrap bootstrap is a powerful
1168:25 - open source CSS framework that is used
1168:27 - to design streamline the development
1168:29 - workflow uh especially for mobile first
1168:32 - designs so we installed bootstrap and we
1168:35 - installed simply by including a couple
1168:36 - of links within our page and right right
1168:39 - away it changed a few Styles then we
1168:42 - customized it using CSS variables so we
1168:44 - changed the primary color we changed the
1168:47 - uh let's see yeah so we changed
1168:48 - customized bootstraps typography we
1168:51 - customized uh we customized the fonts so
1168:54 - we used a couple of outer fonts then we
1168:57 - created a styles. CSS file we set the
1168:59 - fonts we set the primary color and we
1169:01 - set maybe the heading font to be enter
1169:04 - and there are other customizations that
1169:05 - can be done but these basic
1169:07 - customizations should do the job even
1169:08 - for your own personal
1169:10 - website then we decided that okay we're
1169:12 - going to start out so bootstrap has a
1169:14 - bunch of pre-configured breakpoint so
1169:15 - we're going to start out with uh uh just
1169:18 - building out a a basic container and
1169:20 - building out a layout and then making it
1169:23 - responsive by adding more utility
1169:25 - classes so in bootstrap you typically
1169:28 - start out with a container that centers
1169:30 - your content on the page horizontally
1169:32 - and it takes up full width till whatever
1169:34 - size you want and after that it stays in
1169:37 - the center and bootstrap has a grid
1169:39 - system a 12 column grid system and what
1169:41 - you can do is you can uh set up a row
1169:43 - and inside that row you you can have a
1169:45 - bunch of columns and you can set widths
1169:47 - for those columns on how many of these
1169:50 - uh grid elements you wanted to span so
1169:52 - you can mix and match you can have 3 3 3
1169:54 - three or you can have three four and
1169:56 - four you can have maybe 3 three and six
1169:58 - you can have 3 two2 things like that as
1170:00 - soon as it crosses 12 it goes onto the
1170:01 - next row okay so you create a row and
1170:04 - inside the row you create a column and
1170:05 - that's what it does and then we talk we
1170:08 - looked at offsets we looked at gutters
1170:10 - those are just ways to shift things
1170:12 - around here and there and then we talked
1170:14 - about util classes so bootstrap has a
1170:16 - bunch of utility classes to set margins
1170:19 - set paddings um to set sizes a bunch of
1170:22 - utility classes to make things bold
1170:24 - italic to Center text a bunch of utility
1170:27 - classes to set background colors a bunch
1170:29 - of utility classes for borders for
1170:31 - display for Flex Etc okay and it also
1170:34 - offers a bunch of components so it
1170:36 - offers a Navar component so you can use
1170:38 - something like this um so this is a naar
1170:40 - component for our
1170:42 - site and this produces an app bar like
1170:45 - this which on mobile created a
1170:47 - collapsible menu but on desktop creates
1170:50 - this nice Three Links with a signin
1170:52 - button so what you do with typically
1170:54 - with components is you check out the
1170:56 - example code and you simply copy paste
1170:59 - and drop it into your um not copy paste
1171:02 - exactly but yeah take a close look at it
1171:04 - and either just drop it line by line or
1171:07 - write it or maybe in some cases when
1171:08 - it's exactly what you need just uh copy
1171:11 - paste it and it's fine but make sure you
1171:13 - understand every line of code that
1171:14 - you're copy pasting don't have anything
1171:16 - that doesn't actually make sense you can
1171:18 - always inspect something you can right
1171:20 - click inspect on the page itself and see
1171:22 - what exactly a piece of code does okay
1171:25 - so that's the nav bar over here it had a
1171:28 - couple of images so we were using a
1171:30 - different logo on mobile and a different
1171:32 - logo on desktop like that you can do all
1171:35 - those using some utility classes then we
1171:37 - created a utility hero section again
1171:39 - there are a bunch of examples here for
1171:41 - the hero section and we found this one
1171:43 - interesting so we went ahead and simply
1171:46 - copied it from the browser itself so you
1171:48 - can just open up these tools so again
1171:50 - feel free to use some of these examples
1171:52 - if you think that is going to be useful
1171:53 - for your website your personal website
1171:56 - and then we pasted it in here made some
1171:58 - changes and we got this nice hero
1171:59 - section which looks pretty good pretty
1172:02 - well designed um and yeah that's with
1172:05 - that we had the hero then we created a
1172:07 - jobs list this is where we used a card
1172:08 - component so bootstrap has this card
1172:10 - component that we could use so we added
1172:12 - a bunch of cards and you can see here
1172:15 - that we created this nice job
1172:16 - opportunities and it has this nice
1172:17 - visual hierarchy big text bold font dark
1172:20 - color uh smaller text then even smaller
1172:24 - text lighter font even smaller text even
1172:26 - lighter font all right so use all of
1172:28 - these things to give your content some
1172:31 - hierarchy then we created a jobs table
1172:33 - for desktop again bootstrap has some
1172:34 - examples of creating tables and this is
1172:36 - the table that we ended up creating then
1172:39 - we wanted to create a form and again
1172:40 - bootstap has a bunch of great utilities
1172:42 - for building form so we just dropped in
1172:44 - a bunch of examples and then modified it
1172:47 - and that gave us this nice little form
1172:49 - with uh everything looking very
1172:51 - consistent very clean and also a nice
1172:53 - submit application button and finally
1172:55 - bootstrap we looked at some examples for
1172:57 - foots uh over here like for example you
1173:00 - have a bunch of footer examples so from
1173:03 - this we picked out an example that
1173:04 - worked for us and we added a footer as
1173:07 - well and and then we took the site and
1173:09 - then we deployed it and this is what our
1173:11 - site looked like which is so much nicer
1173:13 - it looks looks so much cleaner and if
1173:16 - you want you could just use a bunch of
1173:17 - these bootstrap components and templates
1173:19 - to build out your personal website and
1173:21 - make it look just something as simple
1173:22 - and clean as this and that's perfectly
1173:24 - fine that's not a problem at all and
1173:26 - this is what it looks like on mobile
1173:27 - this expanded menu and then work at
1173:30 - Jovian some of the content is centered
1173:32 - and of course things that were side by
1173:34 - side have come one above the other the
1173:35 - table has shifted and now or has gone
1173:38 - away and now we are showing a bunch of
1173:40 - cards then we have the submit
1173:41 - application section and that's it and
1173:44 - then we have summary and
1173:46 - references U about this and a bunch of
1173:48 - tutorials on bootstrap that you can
1173:49 - check
1173:51 - out okay so that was a bootstrap CSS
1173:54 - framework and the next assignment was
1173:56 - building a scientific calculator and
1173:59 - here your job was to use uh not just C
1174:02 - HTML CSS but also some JavaScript to
1174:05 - build out a scientific calculator that
1174:07 - is as similar to Google scientific
1174:09 - calculator as possible and many of you
1174:11 - did a pretty good job at this and you
1174:13 - also wanted to make it respon responsive
1174:14 - so that it looks like this on mobile and
1174:16 - it looks like this on desktop and um
1174:19 - there's this tutorial here that goes
1174:21 - into how exactly you add the javascri
1174:24 - functionality yeah uh basically what you
1174:26 - do is let's see you go in here you add
1174:30 - in a bunch of event listeners for each
1174:32 - of the buttons and for each of the
1174:34 - buttons you uh yeah you you add event
1174:37 - listeners and then you add the logic so
1174:39 - you have maybe uh you take the
1174:41 - expression and then you evaluate it or
1174:43 - you add something to the expression so
1174:45 - all of that is covered here I think this
1174:46 - is a great tutorial on uh how exactly to
1174:49 - use JavaScript to add interactivity and
1174:51 - we're going to go much deeper into
1174:53 - adding interactivity but for now I think
1174:56 - this this does the job and the last
1174:58 - thing I want to mention is you can build
1174:59 - these things pretty easily with chart
1175:01 - GPT anytime you want some piece of
1175:03 - functionality on your page you can
1175:05 - always say let's say how do I animate
1175:08 - some text to just shift up and down as
1175:11 - um the user is scrolling you can always
1175:13 - just search on chat GB and get some code
1175:15 - from it right so that's what I just want
1175:18 - to mention there as well use chart GPT
1175:20 - or use jobot right over here use jobot
1175:23 - for help
1175:26 - too okay so that was the um third
1175:30 - assignment then we talked about the
1175:32 - express web application framework so the
1175:35 - express web application framework is a
1175:36 - minimalist framework for nodejs for
1175:38 - streamlining server side application
1175:40 - development with flexible routing and
1175:42 - middleware support and a wibrand
1175:43 - ecosystem
1175:44 - so we wanted to improve the Jan careers
1175:46 - website this time we we wanted to have a
1175:49 - single uh just only show the table only
1175:52 - show the jobs on the main page and then
1175:53 - show the application form on individual
1175:55 - job pages and then we wanted to have uh
1175:58 - an application form that can trigger an
1176:00 - email and an acknowledgement page so
1176:02 - this is what we did well we again
1176:04 - created a new repository and we learned
1176:06 - about creating web servers so instead of
1176:08 - static websites where you simply open a
1176:11 - URL and then you get back in HTML csss
1176:13 - page page a web server can take a
1176:15 - request and then do some processing
1176:17 - maybe call a database or something get
1176:19 - some data from a database like jan.com
1176:21 - is doing and then send it back so we
1176:23 - learned how to build web servers or web
1176:25 - web applications and the way we did that
1176:28 - is well we use the express uh web
1176:30 - application framework which is really
1176:31 - simple to get started with you just
1176:33 - create a bit of text like this and uh
1176:36 - you just write a bit of text like this
1176:38 - and as just like that you will get this
1176:40 - when you open it up when you run it
1176:42 - using npm start or node SRC app.js uh
1176:45 - you're going to get this hello world
1176:47 - response and now you can start sending
1176:48 - whatever content you want after doing
1176:50 - whatever processing you need to do right
1176:52 - so the key benefit of uh web of uh
1176:55 - server side Frameworks is that you can
1176:57 - do some
1176:58 - processing so we saw how to serve HTML
1177:01 - files you can always just uh do rest.
1177:03 - send file and send out a file like
1177:05 - index.html and this is what it looked
1177:07 - like now uh as we make changes we don't
1177:09 - want to keep restarting our server again
1177:12 - and again that that's where you can use
1177:13 - a tool like node mod to automatically
1177:15 - restart things then to serve static
1177:17 - files you can use express. use so
1177:20 - Express or app.use express. static so
1177:23 - any images any CSS files are often
1177:25 - served as static files and uh deploying
1177:28 - Express applications to worel is also
1177:30 - fairly straightforward you just is also
1177:33 - fairly straightforward you just need
1177:34 - this worel do Json file in the projects
1177:37 - root folder with some content that uh
1177:40 - informs verel where to uh send all the
1177:43 - requests and what environment to use
1177:45 - okay now uh next we looked at how to use
1177:47 - templates so let's say we had this list
1177:50 - of jobs that came from a database or
1177:52 - maybe it's just something that we have
1177:53 - hardcoded um now we want to actually
1177:55 - render it using a template and that's
1177:58 - where we can create a template we can
1178:00 - change index.html to index. mustache and
1178:03 - then inside it we can create this
1178:04 - mustache template which can Loop over
1178:06 - the variable jobs and then create a list
1178:09 - of these cards and in each card insert
1178:12 - the uh title job title Job Link and the
1178:15 - salary and the posted date and then
1178:17 - similarly we can also create a table
1178:19 - once again that can Loop over the list
1178:21 - of jobs and create table rows and the
1178:23 - table will be shown on on desktop and on
1178:26 - mobile we'll show the list of cards so
1178:28 - we are reusing code HTML code but this
1178:30 - time we're putting it inside a template
1178:32 - and we configure mustach as the view
1178:34 - engine and then we simply render that
1178:36 - index template and we give it the data
1178:39 - jobs the list of jobs as the variable
1178:41 - jobs and just like that that renders
1178:43 - this
1178:44 - page over that renders this table on
1178:46 - mobile on desktop and a list of cards on
1178:49 - mobile and there are a bunch of things
1178:51 - you can do with must it's really easy to
1178:52 - use uh but the idea here is you take
1178:55 - some data and you put it into some HTML
1178:57 - template to uh render a page then we
1179:00 - also looked at Route parameters so if
1179:02 - you have a route like this app.get jobs
1179:05 - colon ID then you can take your uh you
1179:08 - can take some logic and then use that to
1179:10 - render different kinds of dynamic Pages
1179:13 - for example here we have this template
1179:17 - called yeah we had we have a template
1179:19 - called job so we have a template called
1179:22 - job and in that template job. mustache
1179:26 - we simply render an application form and
1179:28 - we render the title of the job right and
1179:31 - that's what that looks like I believe
1179:33 - the job template is yeah some it's a you
1179:36 - all the source code yeah here is the
1179:38 - template content for the job template
1179:40 - right so it contains just uh uh it's
1179:43 - going to use the job title and it's
1179:44 - going to show that job title in here
1179:47 - it's in the application form at the
1179:49 - title of the application form all right
1179:52 - uh then we looked at how to handle form
1179:54 - submissions now to handle form
1179:56 - submissions we need to use this app.
1179:59 - poost route okay and we need to also
1180:01 - give it a we also need to use this body
1180:04 - parer middleware so that it can pass the
1180:07 - uh content that is going to be sent
1180:09 - using the post method and finally we can
1180:11 - store the form responses in a database
1180:13 - but what we chose to do instead was to
1180:15 - Simply format an email and send it send
1180:18 - out an email using the node mailer
1180:19 - package okay so the idea is not that
1180:21 - every form response has to be emailed
1180:23 - but you can get that form response into
1180:25 - a route and then you can do whatever you
1180:27 - want with it store it in a database just
1180:29 - throw it away send out an email call an
1180:32 - API whatever you want to do okay and um
1180:35 - once yeah and then we saw how to just
1180:39 - make sure that we are not exposing any
1180:41 - credentials directly within our Cod Cod
1180:44 - so we put in an email ID and password as
1180:46 - environment variables both within
1180:49 - our uh as an as a Dot N file uh within
1180:53 - an within a n file which is get IGN noed
1180:55 - in a nodejs project and then also within
1180:59 - uh verel because verel also needs those
1181:01 - and just like that we created this uh
1181:04 - final
1181:05 - website which has a bunch of job
1181:09 - opportunities at Jovian like this and we
1181:12 - can also then go in fill out an
1181:15 - application let me just fill that
1181:21 - out and when you hit submit application
1181:24 - that's actually going to go and try to
1181:26 - send an email not right now this this
1181:28 - did not send but yeah it's going to send
1181:30 - an email it's going to show an
1181:31 - acknowledgement page so that's great and
1181:34 - there are a bunch of other resources you
1181:35 - can check out and in most cases you can
1181:37 - just ask chat GPD what your you can ask
1181:40 - it and it'll tell you exactly what you
1181:42 - uh what you need okay so that is the
1181:45 - final lesson and of course now you're
1181:47 - going to be working on building your own
1181:49 - personal website um so that's all that's
1181:52 - all for today and we have successfully
1181:54 - made it to the end of this course uh
1181:57 - we've learned a lot about HTML CSS
1182:01 - JavaScript and web development in
1182:03 - general um it's been a great journey so
1182:06 - far and I hope you feel like you've
1182:07 - learned something over the past uh
1182:10 - several weeks that you can actually
1182:11 - apply